<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20605.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">nbd_open</name><parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:25">Error</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier><modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:18">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVNBDState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:16">export</name> <init pos:start="9:18" pos:end="9:23">= <expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">result</name></decl>, <decl pos:start="11:17" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:20">sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:64">/* Pop the config into our state object. Exit if invalid. */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><call pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:14">nbd_config</name><argument_list pos:start="19:15" pos:end="19:47">(<argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><name pos:start="19:16" pos:end="19:16">s</name></expr></argument>, <argument pos:start="19:19" pos:end="19:25"><expr pos:start="19:19" pos:end="19:25"><name pos:start="19:19" pos:end="19:25">options</name></expr></argument>, <argument pos:start="19:28" pos:end="19:34"><expr pos:start="19:28" pos:end="19:34"><operator pos:start="19:28" pos:end="19:28">&amp;</operator><name pos:start="19:29" pos:end="19:34">export</name></expr></argument>, <argument pos:start="19:37" pos:end="19:46"><expr pos:start="19:37" pos:end="19:46"><operator pos:start="19:37" pos:end="19:37">&amp;</operator><name pos:start="19:38" pos:end="19:46">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:17">local_err</name></expr>)</condition> <block pos:start="21:20" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:23">

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:23">error_propagate</name><argument_list pos:start="23:24" pos:end="23:40">(<argument pos:start="23:25" pos:end="23:28"><expr pos:start="23:25" pos:end="23:28"><name pos:start="23:25" pos:end="23:28">errp</name></expr></argument>, <argument pos:start="23:31" pos:end="23:39"><expr pos:start="23:31" pos:end="23:39"><name pos:start="23:31" pos:end="23:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:23">return <expr pos:start="25:16" pos:end="25:22"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:7">/* establish TCP connection, return error if it fails

     * TODO: Configurable retry-until-timeout behaviour.

     */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:8">sock</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:45"><name pos:start="37:12" pos:end="37:35">nbd_establish_connection</name><argument_list pos:start="37:36" pos:end="37:45">(<argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><name pos:start="37:37" pos:end="37:38">bs</name></expr></argument>, <argument pos:start="37:41" pos:end="37:44"><expr pos:start="37:41" pos:end="37:44"><name pos:start="37:41" pos:end="37:44">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="44:5"><if pos:start="39:5" pos:end="44:5">if <condition pos:start="39:8" pos:end="39:17">(<expr pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:12">sock</name> <operator pos:start="39:14" pos:end="39:14">&lt;</operator> <literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>)</condition> <block pos:start="39:19" pos:end="44:5">{<block_content pos:start="42:9" pos:end="42:20">


        <return pos:start="42:9" pos:end="42:20">return <expr pos:start="42:16" pos:end="42:19"><name pos:start="42:16" pos:end="42:19">sock</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="48:5" pos:end="48:23">/* NBD handshake */</comment>

    <expr_stmt pos:start="50:5" pos:end="50:53"><expr pos:start="50:5" pos:end="50:52"><name pos:start="50:5" pos:end="50:10">result</name> <operator pos:start="50:12" pos:end="50:12">=</operator> <call pos:start="50:14" pos:end="50:52"><name pos:start="50:14" pos:end="50:28">nbd_client_init</name><argument_list pos:start="50:29" pos:end="50:52">(<argument pos:start="50:30" pos:end="50:31"><expr pos:start="50:30" pos:end="50:31"><name pos:start="50:30" pos:end="50:31">bs</name></expr></argument>, <argument pos:start="50:34" pos:end="50:37"><expr pos:start="50:34" pos:end="50:37"><name pos:start="50:34" pos:end="50:37">sock</name></expr></argument>, <argument pos:start="50:40" pos:end="50:45"><expr pos:start="50:40" pos:end="50:45"><name pos:start="50:40" pos:end="50:45">export</name></expr></argument>, <argument pos:start="50:48" pos:end="50:51"><expr pos:start="50:48" pos:end="50:51"><name pos:start="50:48" pos:end="50:51">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <return pos:start="53:5" pos:end="53:18">return <expr pos:start="53:12" pos:end="53:17"><name pos:start="53:12" pos:end="53:17">result</name></expr>;</return>

</block_content>}</block></function></unit>
