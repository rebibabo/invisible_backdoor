<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26177.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vdi_create</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:72"><decl pos:start="1:45" pos:end="1:72"><type pos:start="1:45" pos:end="1:72"><name pos:start="1:45" pos:end="1:63">QEMUOptionParameter</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">options</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="205:1">{<block_content pos:start="7:5" pos:end="203:18">

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">result</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">bytes</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:21">block_size</name> <init pos:start="15:23" pos:end="15:44">= <expr pos:start="15:25" pos:end="15:44"><name pos:start="15:25" pos:end="15:44">DEFAULT_CLUSTER_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:43"><decl pos:start="17:5" pos:end="17:42"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:23">image_type</name> <init pos:start="17:25" pos:end="17:42">= <expr pos:start="17:27" pos:end="17:42"><name pos:start="17:27" pos:end="17:42">VDI_TYPE_DYNAMIC</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:13">VdiHeader</name></type> <name pos:start="19:15" pos:end="19:20">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:13"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:20">bmap_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><call pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:10">logout</name><argument_list pos:start="27:11" pos:end="27:16">(<argument pos:start="27:12" pos:end="27:15"><expr pos:start="27:12" pos:end="27:15"><literal type="string" pos:start="27:12" pos:end="27:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:27">/* Read out options. */</comment>

    <while pos:start="33:5" pos:end="69:5">while <condition pos:start="33:11" pos:end="33:36">(<expr pos:start="33:12" pos:end="33:35"><name pos:start="33:12" pos:end="33:18">options</name> <operator pos:start="33:20" pos:end="33:21">&amp;&amp;</operator> <name pos:start="33:23" pos:end="33:35"><name pos:start="33:23" pos:end="33:29">options</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:35">name</name></name></expr>)</condition> <block pos:start="33:38" pos:end="69:5">{<block_content pos:start="35:9" pos:end="67:18">

        <if_stmt pos:start="35:9" pos:end="65:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:51">(<expr pos:start="35:13" pos:end="35:50"><operator pos:start="35:13" pos:end="35:13">!</operator><call pos:start="35:14" pos:end="35:50"><name pos:start="35:14" pos:end="35:19">strcmp</name><argument_list pos:start="35:20" pos:end="35:50">(<argument pos:start="35:21" pos:end="35:33"><expr pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:27">options</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:33">name</name></name></expr></argument>, <argument pos:start="35:36" pos:end="35:49"><expr pos:start="35:36" pos:end="35:49"><name pos:start="35:36" pos:end="35:49">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:53" pos:end="41:9">{<block_content pos:start="37:13" pos:end="40:0">

            <expr_stmt pos:start="37:13" pos:end="40:0"><expr pos:start="37:13" pos:end="37:36"><name pos:start="37:13" pos:end="37:17">bytes</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:36"><name pos:start="37:21" pos:end="37:27">options</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:34">value</name><operator pos:start="37:35" pos:end="37:35">.</operator><name pos:start="37:36" pos:end="37:36">n</name></name></expr>;</expr_stmt>

<cpp:if pos:start="39:1" pos:end="39:34">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:34"><call pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:11">defined</name><argument_list pos:start="39:12" pos:end="39:34">(<argument pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:33">CONFIG_VDI_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>

        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="55:9">else if <condition pos:start="41:19" pos:end="41:66">(<expr pos:start="41:20" pos:end="41:65"><operator pos:start="41:20" pos:end="41:20">!</operator><call pos:start="41:21" pos:end="41:65"><name pos:start="41:21" pos:end="41:26">strcmp</name><argument_list pos:start="41:27" pos:end="41:65">(<argument pos:start="41:28" pos:end="41:40"><expr pos:start="41:28" pos:end="41:40"><name pos:start="41:28" pos:end="41:40"><name pos:start="41:28" pos:end="41:34">options</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:40">name</name></name></expr></argument>, <argument pos:start="41:43" pos:end="41:64"><expr pos:start="41:43" pos:end="41:64"><name pos:start="41:43" pos:end="41:64">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:68" pos:end="55:9">{<block_content pos:start="43:13" pos:end="54:0">

            <if_stmt pos:start="43:13" pos:end="54:0"><if pos:start="43:13" pos:end="54:0">if <condition pos:start="43:16" pos:end="43:33">(<expr pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:23">options</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:30">value</name><operator pos:start="43:31" pos:end="43:31">.</operator><name pos:start="43:32" pos:end="43:32">n</name></name></expr>)</condition> <block pos:start="43:35" pos:end="54:0">{<block_content pos:start="47:17" pos:end="47:46">

                <comment type="block" pos:start="45:17" pos:end="45:71">/* TODO: Additional checks (SECTOR_SIZE * 2^n, ...). */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:46"><expr pos:start="47:17" pos:end="47:45"><name pos:start="47:17" pos:end="47:26">block_size</name> <operator pos:start="47:28" pos:end="47:28">=</operator> <name pos:start="47:30" pos:end="47:45"><name pos:start="47:30" pos:end="47:36">options</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:43">value</name><operator pos:start="47:44" pos:end="47:44">.</operator><name pos:start="47:45" pos:end="47:45">n</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="53:1" pos:end="53:36">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:36"><call pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:11">defined</name><argument_list pos:start="53:12" pos:end="53:36">(<argument pos:start="53:13" pos:end="53:35"><expr pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:35">CONFIG_VDI_STATIC_IMAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

        </block_content>}</block></if> <if type="elseif" pos:start="55:11" pos:end="65:9">else if <condition pos:start="55:19" pos:end="55:60">(<expr pos:start="55:20" pos:end="55:59"><operator pos:start="55:20" pos:end="55:20">!</operator><call pos:start="55:21" pos:end="55:59"><name pos:start="55:21" pos:end="55:26">strcmp</name><argument_list pos:start="55:27" pos:end="55:59">(<argument pos:start="55:28" pos:end="55:40"><expr pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:34">options</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:40">name</name></name></expr></argument>, <argument pos:start="55:43" pos:end="55:58"><expr pos:start="55:43" pos:end="55:58"><name pos:start="55:43" pos:end="55:58">BLOCK_OPT_STATIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:62" pos:end="65:9">{<block_content pos:start="57:13" pos:end="64:0">

            <if_stmt pos:start="57:13" pos:end="64:0"><if pos:start="57:13" pos:end="64:0">if <condition pos:start="57:16" pos:end="57:33">(<expr pos:start="57:17" pos:end="57:32"><name pos:start="57:17" pos:end="57:32"><name pos:start="57:17" pos:end="57:23">options</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:30">value</name><operator pos:start="57:31" pos:end="57:31">.</operator><name pos:start="57:32" pos:end="57:32">n</name></name></expr>)</condition> <block pos:start="57:35" pos:end="64:0">{<block_content pos:start="59:17" pos:end="59:45">

                <expr_stmt pos:start="59:17" pos:end="59:45"><expr pos:start="59:17" pos:end="59:44"><name pos:start="59:17" pos:end="59:26">image_type</name> <operator pos:start="59:28" pos:end="59:28">=</operator> <name pos:start="59:30" pos:end="59:44">VDI_TYPE_STATIC</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:15">options</name><operator pos:start="67:16" pos:end="67:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="73:5" pos:end="77:25"><expr pos:start="73:5" pos:end="77:24"><name pos:start="73:5" pos:end="73:6">fd</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <call pos:start="73:10" pos:end="77:24"><name pos:start="73:10" pos:end="73:18">qemu_open</name><argument_list pos:start="73:19" pos:end="77:24">(<argument pos:start="73:20" pos:end="73:27"><expr pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:27">filename</name></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:72"><expr pos:start="75:20" pos:end="75:72"><name pos:start="75:20" pos:end="75:27">O_WRONLY</name> <operator pos:start="75:29" pos:end="75:29">|</operator> <name pos:start="75:31" pos:end="75:37">O_CREAT</name> <operator pos:start="75:39" pos:end="75:39">|</operator> <name pos:start="75:41" pos:end="75:47">O_TRUNC</name> <operator pos:start="75:49" pos:end="75:49">|</operator> <name pos:start="75:51" pos:end="75:58">O_BINARY</name> <operator pos:start="75:60" pos:end="75:60">|</operator> <name pos:start="75:62" pos:end="75:72">O_LARGEFILE</name></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><literal type="number" pos:start="77:20" pos:end="77:23">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:15">(<expr pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:10">fd</name> <operator pos:start="79:12" pos:end="79:12">&lt;</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>)</condition> <block pos:start="79:17" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:22">

        <return pos:start="81:9" pos:end="81:22">return <expr pos:start="81:16" pos:end="81:21"><operator pos:start="81:16" pos:end="81:16">-</operator><name pos:start="81:17" pos:end="81:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="89:29">/* We need enough blocks to store the given disk size,

       so always round up. */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:51"><expr pos:start="91:5" pos:end="91:50"><name pos:start="91:5" pos:end="91:10">blocks</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <operator pos:start="91:14" pos:end="91:14">(</operator><name pos:start="91:15" pos:end="91:19">bytes</name> <operator pos:start="91:21" pos:end="91:21">+</operator> <name pos:start="91:23" pos:end="91:32">block_size</name> <operator pos:start="91:34" pos:end="91:34">-</operator> <literal type="number" pos:start="91:36" pos:end="91:36">1</literal><operator pos:start="91:37" pos:end="91:37">)</operator> <operator pos:start="91:39" pos:end="91:39">/</operator> <name pos:start="91:41" pos:end="91:50">block_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:42"><expr pos:start="95:5" pos:end="95:41"><name pos:start="95:5" pos:end="95:13">bmap_size</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:22">blocks</name> <operator pos:start="95:24" pos:end="95:24">*</operator> <sizeof pos:start="95:26" pos:end="95:41">sizeof<argument_list pos:start="95:32" pos:end="95:41">(<argument pos:start="95:33" pos:end="95:40"><expr pos:start="95:33" pos:end="95:40"><name pos:start="95:33" pos:end="95:40">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:68"><expr pos:start="97:5" pos:end="97:67"><name pos:start="97:5" pos:end="97:13">bmap_size</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <operator pos:start="97:17" pos:end="97:17">(</operator><operator pos:start="97:18" pos:end="97:18">(</operator><name pos:start="97:19" pos:end="97:27">bmap_size</name> <operator pos:start="97:29" pos:end="97:29">+</operator> <name pos:start="97:31" pos:end="97:41">SECTOR_SIZE</name> <operator pos:start="97:43" pos:end="97:43">-</operator> <literal type="number" pos:start="97:45" pos:end="97:45">1</literal><operator pos:start="97:46" pos:end="97:46">)</operator> <operator pos:start="97:48" pos:end="97:48">&amp;</operator> <operator pos:start="97:50" pos:end="97:50">~</operator><operator pos:start="97:51" pos:end="97:51">(</operator><name pos:start="97:52" pos:end="97:62">SECTOR_SIZE</name> <operator pos:start="97:64" pos:end="97:64">-</operator><literal type="number" pos:start="97:65" pos:end="97:65">1</literal><operator pos:start="97:66" pos:end="97:66">)</operator><operator pos:start="97:67" pos:end="97:67">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:39"><expr pos:start="101:5" pos:end="101:38"><call pos:start="101:5" pos:end="101:38"><name pos:start="101:5" pos:end="101:10">memset</name><argument_list pos:start="101:11" pos:end="101:38">(<argument pos:start="101:12" pos:end="101:18"><expr pos:start="101:12" pos:end="101:18"><operator pos:start="101:12" pos:end="101:12">&amp;</operator><name pos:start="101:13" pos:end="101:18">header</name></expr></argument>, <argument pos:start="101:21" pos:end="101:21"><expr pos:start="101:21" pos:end="101:21"><literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr></argument>, <argument pos:start="101:24" pos:end="101:37"><expr pos:start="101:24" pos:end="101:37"><sizeof pos:start="101:24" pos:end="101:37">sizeof<argument_list pos:start="101:30" pos:end="101:37">(<argument pos:start="101:31" pos:end="101:36"><expr pos:start="101:31" pos:end="101:36"><name pos:start="101:31" pos:end="101:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:56"><expr pos:start="103:5" pos:end="103:55"><call pos:start="103:5" pos:end="103:55"><name pos:start="103:5" pos:end="103:11">pstrcpy</name><argument_list pos:start="103:12" pos:end="103:55">(<argument pos:start="103:13" pos:end="103:23"><expr pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:18">header</name><operator pos:start="103:19" pos:end="103:19">.</operator><name pos:start="103:20" pos:end="103:23">text</name></name></expr></argument>, <argument pos:start="103:26" pos:end="103:44"><expr pos:start="103:26" pos:end="103:44"><sizeof pos:start="103:26" pos:end="103:44">sizeof<argument_list pos:start="103:32" pos:end="103:44">(<argument pos:start="103:33" pos:end="103:43"><expr pos:start="103:33" pos:end="103:43"><name pos:start="103:33" pos:end="103:43"><name pos:start="103:33" pos:end="103:38">header</name><operator pos:start="103:39" pos:end="103:39">.</operator><name pos:start="103:40" pos:end="103:43">text</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="103:47" pos:end="103:54"><expr pos:start="103:47" pos:end="103:54"><name pos:start="103:47" pos:end="103:54">VDI_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:37"><expr pos:start="105:5" pos:end="105:36"><name pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:10">header</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:20">signature</name></name> <operator pos:start="105:22" pos:end="105:22">=</operator> <name pos:start="105:24" pos:end="105:36">VDI_SIGNATURE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:37"><expr pos:start="107:5" pos:end="107:36"><name pos:start="107:5" pos:end="107:18"><name pos:start="107:5" pos:end="107:10">header</name><operator pos:start="107:11" pos:end="107:11">.</operator><name pos:start="107:12" pos:end="107:18">version</name></name> <operator pos:start="107:20" pos:end="107:20">=</operator> <name pos:start="107:22" pos:end="107:36">VDI_VERSION_1_1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:31"><expr pos:start="109:5" pos:end="109:30"><name pos:start="109:5" pos:end="109:22"><name pos:start="109:5" pos:end="109:10">header</name><operator pos:start="109:11" pos:end="109:11">.</operator><name pos:start="109:12" pos:end="109:22">header_size</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:30">0x180</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:35"><expr pos:start="111:5" pos:end="111:34"><name pos:start="111:5" pos:end="111:21"><name pos:start="111:5" pos:end="111:10">header</name><operator pos:start="111:11" pos:end="111:11">.</operator><name pos:start="111:12" pos:end="111:21">image_type</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:34">image_type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:31"><expr pos:start="113:5" pos:end="113:30"><name pos:start="113:5" pos:end="113:22"><name pos:start="113:5" pos:end="113:10">header</name><operator pos:start="113:11" pos:end="113:11">.</operator><name pos:start="113:12" pos:end="113:22">offset_bmap</name></name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:30">0x200</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:43"><expr pos:start="115:5" pos:end="115:42"><name pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:10">header</name><operator pos:start="115:11" pos:end="115:11">.</operator><name pos:start="115:12" pos:end="115:22">offset_data</name></name> <operator pos:start="115:24" pos:end="115:24">=</operator> <literal type="number" pos:start="115:26" pos:end="115:32">0x200</literal> <operator pos:start="115:32" pos:end="115:32">+</operator> <name pos:start="115:34" pos:end="115:42">bmap_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:22"><name pos:start="117:5" pos:end="117:10">header</name><operator pos:start="117:11" pos:end="117:11">.</operator><name pos:start="117:12" pos:end="117:22">sector_size</name></name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:36">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:29"><expr pos:start="119:5" pos:end="119:28"><name pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:10">header</name><operator pos:start="119:11" pos:end="119:11">.</operator><name pos:start="119:12" pos:end="119:20">disk_size</name></name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:28">bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:35"><expr pos:start="121:5" pos:end="121:34"><name pos:start="121:5" pos:end="121:21"><name pos:start="121:5" pos:end="121:10">header</name><operator pos:start="121:11" pos:end="121:11">.</operator><name pos:start="121:12" pos:end="121:21">block_size</name></name> <operator pos:start="121:23" pos:end="121:23">=</operator> <name pos:start="121:25" pos:end="121:34">block_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:36"><expr pos:start="123:5" pos:end="123:35"><name pos:start="123:5" pos:end="123:26"><name pos:start="123:5" pos:end="123:10">header</name><operator pos:start="123:11" pos:end="123:11">.</operator><name pos:start="123:12" pos:end="123:26">blocks_in_image</name></name> <operator pos:start="123:28" pos:end="123:28">=</operator> <name pos:start="123:30" pos:end="123:35">blocks</name></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:38">(<expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:18">image_type</name> <operator pos:start="125:20" pos:end="125:21">==</operator> <name pos:start="125:23" pos:end="125:37">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="125:40" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:41">

        <expr_stmt pos:start="127:9" pos:end="127:41"><expr pos:start="127:9" pos:end="127:40"><name pos:start="127:9" pos:end="127:31"><name pos:start="127:9" pos:end="127:14">header</name><operator pos:start="127:15" pos:end="127:15">.</operator><name pos:start="127:16" pos:end="127:31">blocks_allocated</name></name> <operator pos:start="127:33" pos:end="127:33">=</operator> <name pos:start="127:35" pos:end="127:40">blocks</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:37"><expr pos:start="131:5" pos:end="131:36"><call pos:start="131:5" pos:end="131:36"><name pos:start="131:5" pos:end="131:17">uuid_generate</name><argument_list pos:start="131:18" pos:end="131:36">(<argument pos:start="131:19" pos:end="131:35"><expr pos:start="131:19" pos:end="131:35"><name pos:start="131:19" pos:end="131:35"><name pos:start="131:19" pos:end="131:24">header</name><operator pos:start="131:25" pos:end="131:25">.</operator><name pos:start="131:26" pos:end="131:35">uuid_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="138:0"><expr pos:start="133:5" pos:end="133:40"><call pos:start="133:5" pos:end="133:40"><name pos:start="133:5" pos:end="133:17">uuid_generate</name><argument_list pos:start="133:18" pos:end="133:40">(<argument pos:start="133:19" pos:end="133:39"><expr pos:start="133:19" pos:end="133:39"><name pos:start="133:19" pos:end="133:39"><name pos:start="133:19" pos:end="133:24">header</name><operator pos:start="133:25" pos:end="133:25">.</operator><name pos:start="133:26" pos:end="133:39">uuid_last_snap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="135:5" pos:end="135:78">/* There is no need to set header.uuid_link or header.uuid_parent here. */</comment>

<cpp:if pos:start="137:1" pos:end="137:29">#<cpp:directive pos:start="137:2" pos:end="137:3">if</cpp:directive> <expr pos:start="137:5" pos:end="137:29"><call pos:start="137:5" pos:end="137:29"><name pos:start="137:5" pos:end="137:11">defined</name><argument_list pos:start="137:12" pos:end="137:29">(<argument pos:start="137:13" pos:end="137:28"><expr pos:start="137:13" pos:end="137:28"><name pos:start="137:13" pos:end="137:28">CONFIG_VDI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="139:5" pos:end="142:0"><expr pos:start="139:5" pos:end="139:29"><call pos:start="139:5" pos:end="139:29"><name pos:start="139:5" pos:end="139:20">vdi_header_print</name><argument_list pos:start="139:21" pos:end="139:29">(<argument pos:start="139:22" pos:end="139:28"><expr pos:start="139:22" pos:end="139:28"><operator pos:start="139:22" pos:end="139:22">&amp;</operator><name pos:start="139:23" pos:end="139:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="143:5" pos:end="143:30"><expr pos:start="143:5" pos:end="143:29"><call pos:start="143:5" pos:end="143:29"><name pos:start="143:5" pos:end="143:20">vdi_header_to_le</name><argument_list pos:start="143:21" pos:end="143:29">(<argument pos:start="143:22" pos:end="143:28"><expr pos:start="143:22" pos:end="143:28"><operator pos:start="143:22" pos:end="143:22">&amp;</operator><name pos:start="143:23" pos:end="143:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:47">(<expr pos:start="145:9" pos:end="145:46"><call pos:start="145:9" pos:end="145:42"><name pos:start="145:9" pos:end="145:13">write</name><argument_list pos:start="145:14" pos:end="145:42">(<argument pos:start="145:15" pos:end="145:16"><expr pos:start="145:15" pos:end="145:16"><name pos:start="145:15" pos:end="145:16">fd</name></expr></argument>, <argument pos:start="145:19" pos:end="145:25"><expr pos:start="145:19" pos:end="145:25"><operator pos:start="145:19" pos:end="145:19">&amp;</operator><name pos:start="145:20" pos:end="145:25">header</name></expr></argument>, <argument pos:start="145:28" pos:end="145:41"><expr pos:start="145:28" pos:end="145:41"><sizeof pos:start="145:28" pos:end="145:41">sizeof<argument_list pos:start="145:34" pos:end="145:41">(<argument pos:start="145:35" pos:end="145:40"><expr pos:start="145:35" pos:end="145:40"><name pos:start="145:35" pos:end="145:40">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="145:44" pos:end="145:44">&lt;</operator> <literal type="number" pos:start="145:46" pos:end="145:46">0</literal></expr>)</condition> <block pos:start="145:49" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:24">

        <expr_stmt pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:14">result</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <operator pos:start="147:18" pos:end="147:18">-</operator><name pos:start="147:19" pos:end="147:23">errno</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="153:5" pos:end="179:5"><if pos:start="153:5" pos:end="179:5">if <condition pos:start="153:8" pos:end="153:22">(<expr pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:17">bmap_size</name> <operator pos:start="153:19" pos:end="153:19">&gt;</operator> <literal type="number" pos:start="153:21" pos:end="153:21">0</literal></expr>)</condition> <block pos:start="153:24" pos:end="179:5">{<block_content pos:start="155:9" pos:end="177:21">

        <decl_stmt pos:start="155:9" pos:end="155:46"><decl pos:start="155:9" pos:end="155:45"><type pos:start="155:9" pos:end="155:18"><name pos:start="155:9" pos:end="155:16">uint32_t</name> <modifier pos:start="155:18" pos:end="155:18">*</modifier></type><name pos:start="155:19" pos:end="155:22">bmap</name> <init pos:start="155:24" pos:end="155:45">= <expr pos:start="155:26" pos:end="155:45"><call pos:start="155:26" pos:end="155:45"><name pos:start="155:26" pos:end="155:34">g_malloc0</name><argument_list pos:start="155:35" pos:end="155:45">(<argument pos:start="155:36" pos:end="155:44"><expr pos:start="155:36" pos:end="155:44"><name pos:start="155:36" pos:end="155:44">bmap_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for pos:start="157:9" pos:end="169:9">for <control pos:start="157:13" pos:end="157:36">(<init pos:start="157:14" pos:end="157:19"><expr pos:start="157:14" pos:end="157:18"><name pos:start="157:14" pos:end="157:14">i</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal></expr>;</init> <condition pos:start="157:21" pos:end="157:31"><expr pos:start="157:21" pos:end="157:30"><name pos:start="157:21" pos:end="157:21">i</name> <operator pos:start="157:23" pos:end="157:23">&lt;</operator> <name pos:start="157:25" pos:end="157:30">blocks</name></expr>;</condition> <incr pos:start="157:33" pos:end="157:35"><expr pos:start="157:33" pos:end="157:35"><name pos:start="157:33" pos:end="157:33">i</name><operator pos:start="157:34" pos:end="157:35">++</operator></expr></incr>)</control> <block pos:start="157:38" pos:end="169:9">{<block_content pos:start="159:13" pos:end="167:13">

            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="163:13">if <condition pos:start="159:16" pos:end="159:46">(<expr pos:start="159:17" pos:end="159:45"><name pos:start="159:17" pos:end="159:26">image_type</name> <operator pos:start="159:28" pos:end="159:29">==</operator> <name pos:start="159:31" pos:end="159:45">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="159:48" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:28">

                <expr_stmt pos:start="161:17" pos:end="161:28"><expr pos:start="161:17" pos:end="161:27"><name pos:start="161:17" pos:end="161:23"><name pos:start="161:17" pos:end="161:20">bmap</name><index pos:start="161:21" pos:end="161:23">[<expr pos:start="161:22" pos:end="161:22"><name pos:start="161:22" pos:end="161:22">i</name></expr>]</index></name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="163:15" pos:end="167:13">else <block pos:start="163:20" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:42">

                <expr_stmt pos:start="165:17" pos:end="165:42"><expr pos:start="165:17" pos:end="165:41"><name pos:start="165:17" pos:end="165:23"><name pos:start="165:17" pos:end="165:20">bmap</name><index pos:start="165:21" pos:end="165:23">[<expr pos:start="165:22" pos:end="165:22"><name pos:start="165:22" pos:end="165:22">i</name></expr>]</index></name> <operator pos:start="165:25" pos:end="165:25">=</operator> <name pos:start="165:27" pos:end="165:41">VDI_UNALLOCATED</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="171:9" pos:end="175:9"><if pos:start="171:9" pos:end="175:9">if <condition pos:start="171:12" pos:end="171:43">(<expr pos:start="171:13" pos:end="171:42"><call pos:start="171:13" pos:end="171:38"><name pos:start="171:13" pos:end="171:17">write</name><argument_list pos:start="171:18" pos:end="171:38">(<argument pos:start="171:19" pos:end="171:20"><expr pos:start="171:19" pos:end="171:20"><name pos:start="171:19" pos:end="171:20">fd</name></expr></argument>, <argument pos:start="171:23" pos:end="171:26"><expr pos:start="171:23" pos:end="171:26"><name pos:start="171:23" pos:end="171:26">bmap</name></expr></argument>, <argument pos:start="171:29" pos:end="171:37"><expr pos:start="171:29" pos:end="171:37"><name pos:start="171:29" pos:end="171:37">bmap_size</name></expr></argument>)</argument_list></call> <operator pos:start="171:40" pos:end="171:40">&lt;</operator> <literal type="number" pos:start="171:42" pos:end="171:42">0</literal></expr>)</condition> <block pos:start="171:45" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:28">

            <expr_stmt pos:start="173:13" pos:end="173:28"><expr pos:start="173:13" pos:end="173:27"><name pos:start="173:13" pos:end="173:18">result</name> <operator pos:start="173:20" pos:end="173:20">=</operator> <operator pos:start="173:22" pos:end="173:22">-</operator><name pos:start="173:23" pos:end="173:27">errno</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:21"><expr pos:start="177:9" pos:end="177:20"><call pos:start="177:9" pos:end="177:20"><name pos:start="177:9" pos:end="177:14">g_free</name><argument_list pos:start="177:15" pos:end="177:20">(<argument pos:start="177:16" pos:end="177:19"><expr pos:start="177:16" pos:end="177:19"><name pos:start="177:16" pos:end="177:19">bmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="191:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="183:38">(<expr pos:start="183:9" pos:end="183:37"><name pos:start="183:9" pos:end="183:18">image_type</name> <operator pos:start="183:20" pos:end="183:21">==</operator> <name pos:start="183:23" pos:end="183:37">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="183:40" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:9">

        <if_stmt pos:start="185:9" pos:end="189:9"><if pos:start="185:9" pos:end="189:9">if <condition pos:start="185:12" pos:end="185:76">(<expr pos:start="185:13" pos:end="185:75"><call pos:start="185:13" pos:end="185:75"><name pos:start="185:13" pos:end="185:21">ftruncate</name><argument_list pos:start="185:22" pos:end="185:75">(<argument pos:start="185:23" pos:end="185:24"><expr pos:start="185:23" pos:end="185:24"><name pos:start="185:23" pos:end="185:24">fd</name></expr></argument>, <argument pos:start="185:27" pos:end="185:74"><expr pos:start="185:27" pos:end="185:74"><sizeof pos:start="185:27" pos:end="185:40">sizeof<argument_list pos:start="185:33" pos:end="185:40">(<argument pos:start="185:34" pos:end="185:39"><expr pos:start="185:34" pos:end="185:39"><name pos:start="185:34" pos:end="185:39">header</name></expr></argument>)</argument_list></sizeof> <operator pos:start="185:42" pos:end="185:42">+</operator> <name pos:start="185:44" pos:end="185:52">bmap_size</name> <operator pos:start="185:54" pos:end="185:54">+</operator> <name pos:start="185:56" pos:end="185:61">blocks</name> <operator pos:start="185:63" pos:end="185:63">*</operator> <name pos:start="185:65" pos:end="185:74">block_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:78" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:28">

            <expr_stmt pos:start="187:13" pos:end="187:28"><expr pos:start="187:13" pos:end="187:27"><name pos:start="187:13" pos:end="187:18">result</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <operator pos:start="187:22" pos:end="187:22">-</operator><name pos:start="187:23" pos:end="187:27">errno</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="195:5" pos:end="199:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:22">(<expr pos:start="195:9" pos:end="195:21"><call pos:start="195:9" pos:end="195:17"><name pos:start="195:9" pos:end="195:13">close</name><argument_list pos:start="195:14" pos:end="195:17">(<argument pos:start="195:15" pos:end="195:16"><expr pos:start="195:15" pos:end="195:16"><name pos:start="195:15" pos:end="195:16">fd</name></expr></argument>)</argument_list></call> <operator pos:start="195:19" pos:end="195:19">&lt;</operator> <literal type="number" pos:start="195:21" pos:end="195:21">0</literal></expr>)</condition> <block pos:start="195:24" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:24">

        <expr_stmt pos:start="197:9" pos:end="197:24"><expr pos:start="197:9" pos:end="197:23"><name pos:start="197:9" pos:end="197:14">result</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <operator pos:start="197:18" pos:end="197:18">-</operator><name pos:start="197:19" pos:end="197:23">errno</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="203:5" pos:end="203:18">return <expr pos:start="203:12" pos:end="203:17"><name pos:start="203:12" pos:end="203:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
