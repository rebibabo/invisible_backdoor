<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6173.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">id3v2_read_ttag</name><parameter_list pos:start="1:28" pos:end="1:82">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:58">taglen</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">dst</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:81"><decl pos:start="1:72" pos:end="1:81"><type pos:start="1:72" pos:end="1:81"><name pos:start="1:72" pos:end="1:74">int</name></type> <name pos:start="1:76" pos:end="1:81">dstlen</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:5">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:18"><if pos:start="11:5" pos:end="13:18">if<condition pos:start="11:7" pos:end="11:18">(<expr pos:start="11:8" pos:end="11:17"><name pos:start="11:8" pos:end="11:13">dstlen</name> <operator pos:start="11:15" pos:end="11:15">&gt;</operator> <literal type="number" pos:start="11:17" pos:end="11:17">0</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:18"><block_content pos:start="13:9" pos:end="13:18">

        <expr_stmt pos:start="13:9" pos:end="13:18"><expr pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:11">dst</name><index pos:start="13:12" pos:end="13:14">[<expr pos:start="13:13" pos:end="13:13"><literal type="number" pos:start="13:13" pos:end="13:13">0</literal></expr>]</index></name><operator pos:start="13:15" pos:end="13:15">=</operator> <literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="17:15"><if pos:start="15:5" pos:end="17:15">if<condition pos:start="15:7" pos:end="15:18">(<expr pos:start="15:8" pos:end="15:17"><name pos:start="15:8" pos:end="15:13">taglen</name> <operator pos:start="15:15" pos:end="15:15">&lt;</operator> <literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">taglen</name><operator pos:start="21:11" pos:end="21:12">--</operator></expr>;</expr_stmt> <comment type="block" pos:start="21:15" pos:end="21:50">/* account for encoding type byte */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:13"><expr pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">dstlen</name><operator pos:start="23:11" pos:end="23:12">--</operator></expr>;</expr_stmt> <comment type="block" pos:start="23:15" pos:end="23:51">/* Leave space for zero terminator */</comment>



    <switch pos:start="27:5" pos:end="59:5">switch<condition pos:start="27:11" pos:end="27:27">(<expr pos:start="27:12" pos:end="27:26"><call pos:start="27:12" pos:end="27:26"><name pos:start="27:12" pos:end="27:19">get_byte</name><argument_list pos:start="27:20" pos:end="27:26">(<argument pos:start="27:21" pos:end="27:25"><expr pos:start="27:21" pos:end="27:25"><name pos:start="27:21" pos:end="27:25"><name pos:start="27:21" pos:end="27:21">s</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:25">pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:29" pos:end="59:5">{<block_content pos:start="31:5" pos:end="57:14"> <comment type="block" pos:start="27:31" pos:end="27:49">/* encoding type */</comment>



    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>:</case>  <comment type="block" pos:start="31:14" pos:end="31:66">/* ISO-8859-1 (0 - 255 maps directly into unicode) */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:9">q</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:15">dst</name></expr>;</expr_stmt>

        <while pos:start="35:9" pos:end="41:9">while<condition pos:start="35:14" pos:end="35:23">(<expr pos:start="35:15" pos:end="35:22"><name pos:start="35:15" pos:end="35:20">taglen</name><operator pos:start="35:21" pos:end="35:22">--</operator></expr>)</condition> <block pos:start="35:25" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:81">

            <decl_stmt pos:start="37:13" pos:end="37:24"><decl pos:start="37:13" pos:end="37:23"><type pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:19">uint8_t</name></type> <name pos:start="37:21" pos:end="37:23">tmp</name></decl>;</decl_stmt>

            <macro pos:start="39:13" pos:end="39:81"><name pos:start="39:13" pos:end="39:20">PUT_UTF8</name><argument_list pos:start="39:21" pos:end="39:81">(<argument pos:start="39:22" pos:end="39:36">get_byte(s-&gt;pb)</argument>, <argument pos:start="39:39" pos:end="39:41">tmp</argument>, <argument pos:start="39:44" pos:end="39:80">if (q - dst &lt; dstlen - <literal type="number" pos:start="39:67" pos:end="39:67">1</literal>) *q++ = tmp;</argument>)</argument_list></macro>

        </block_content>}</block></while>

        <expr_stmt pos:start="43:9" pos:end="43:18"><expr pos:start="43:9" pos:end="43:17"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:10">q</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="char" pos:start="43:14" pos:end="43:17">'\0'</literal></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>



    <case pos:start="49:5" pos:end="49:11">case <expr pos:start="49:10" pos:end="49:10"><literal type="number" pos:start="49:10" pos:end="49:10">3</literal></expr>:</case>  <comment type="block" pos:start="49:14" pos:end="49:24">/* UTF-8 */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:11">len</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:35"><name pos:start="51:15" pos:end="51:19">FFMIN</name><argument_list pos:start="51:20" pos:end="51:35">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">taglen</name></expr></argument>, <argument pos:start="51:29" pos:end="51:34"><expr pos:start="51:29" pos:end="51:34"><name pos:start="51:29" pos:end="51:34">dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:36"><expr pos:start="53:9" pos:end="53:35"><call pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:18">get_buffer</name><argument_list pos:start="53:19" pos:end="53:35">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:24">pb</name></name></expr></argument>, <argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">dst</name></expr></argument>, <argument pos:start="53:32" pos:end="53:34"><expr pos:start="53:32" pos:end="53:34"><name pos:start="53:32" pos:end="53:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:21"><expr pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:11">dst</name><index pos:start="55:12" pos:end="55:16">[<expr pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">len</name></expr>]</index></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
