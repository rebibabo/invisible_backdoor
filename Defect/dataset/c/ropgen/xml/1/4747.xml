<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4747.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:46">decode_picture_parameter_set</name><parameter_list pos:start="1:47" pos:end="1:78">(<parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:58">H264Context</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">h</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:77">bit_length</name></decl></parameter>)</parameter_list><block pos:start="1:79" pos:end="191:1">{<block_content pos:start="3:5" pos:end="189:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:23">pps_id</name><init pos:start="5:24" pos:end="5:46">= <expr pos:start="5:26" pos:end="5:46"><call pos:start="5:26" pos:end="5:46"><name pos:start="5:26" pos:end="5:38">get_ue_golomb</name><argument_list pos:start="5:39" pos:end="5:46">(<argument pos:start="5:40" pos:end="5:45"><expr pos:start="5:40" pos:end="5:45"><operator pos:start="5:40" pos:end="5:40">&amp;</operator><name pos:start="5:41" pos:end="5:45"><name pos:start="5:41" pos:end="5:41">s</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:45">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">PPS</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:12">pps</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if<condition pos:start="11:7" pos:end="11:29">(<expr pos:start="11:8" pos:end="11:28"><name pos:start="11:8" pos:end="11:13">pps_id</name><operator pos:start="11:14" pos:end="11:15">&gt;=</operator><name pos:start="11:16" pos:end="11:28">MAX_PPS_COUNT</name></expr>)</condition><block pos:start="11:30" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:18">

        <expr_stmt pos:start="13:9" pos:end="13:66"><expr pos:start="13:9" pos:end="13:65"><call pos:start="13:9" pos:end="13:65"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:65">(<argument pos:start="13:16" pos:end="13:25"><expr pos:start="13:16" pos:end="13:25"><name pos:start="13:16" pos:end="13:25"><name pos:start="13:16" pos:end="13:16">h</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:19">s</name><operator pos:start="13:20" pos:end="13:20">.</operator><name pos:start="13:21" pos:end="13:25">avctx</name></name></expr></argument>, <argument pos:start="13:28" pos:end="13:39"><expr pos:start="13:28" pos:end="13:39"><name pos:start="13:28" pos:end="13:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:42" pos:end="13:64"><expr pos:start="13:42" pos:end="13:64"><literal type="string" pos:start="13:42" pos:end="13:64">"pps_id out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:7">pps</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <operator pos:start="19:11" pos:end="19:11">&amp;</operator><name pos:start="19:12" pos:end="19:32"><name pos:start="19:12" pos:end="19:12">h</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:24">pps_buffer</name><index pos:start="19:25" pos:end="19:32">[<expr pos:start="19:26" pos:end="19:31"><name pos:start="19:26" pos:end="19:31">pps_id</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:7">pps</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:15">sps_id</name></name><operator pos:start="23:16" pos:end="23:16">=</operator> <call pos:start="23:18" pos:end="23:38"><name pos:start="23:18" pos:end="23:30">get_ue_golomb</name><argument_list pos:start="23:31" pos:end="23:38">(<argument pos:start="23:32" pos:end="23:37"><expr pos:start="23:32" pos:end="23:37"><operator pos:start="23:32" pos:end="23:32">&amp;</operator><name pos:start="23:33" pos:end="23:37"><name pos:start="23:33" pos:end="23:33">s</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:7">pps</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:14">cabac</name></name><operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="25:33"><name pos:start="25:17" pos:end="25:25">get_bits1</name><argument_list pos:start="25:26" pos:end="25:33">(<argument pos:start="25:27" pos:end="25:32"><expr pos:start="25:27" pos:end="25:32"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:32"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:32">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:7">pps</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:26">pic_order_present</name></name><operator pos:start="27:27" pos:end="27:27">=</operator> <call pos:start="27:29" pos:end="27:45"><name pos:start="27:29" pos:end="27:37">get_bits1</name><argument_list pos:start="27:38" pos:end="27:45">(<argument pos:start="27:39" pos:end="27:44"><expr pos:start="27:39" pos:end="27:44"><operator pos:start="27:39" pos:end="27:39">&amp;</operator><name pos:start="27:40" pos:end="27:44"><name pos:start="27:40" pos:end="27:40">s</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:7">pps</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:26">slice_group_count</name></name><operator pos:start="29:27" pos:end="29:27">=</operator> <call pos:start="29:29" pos:end="29:49"><name pos:start="29:29" pos:end="29:41">get_ue_golomb</name><argument_list pos:start="29:42" pos:end="29:49">(<argument pos:start="29:43" pos:end="29:48"><expr pos:start="29:43" pos:end="29:48"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:48"><name pos:start="29:44" pos:end="29:44">s</name><operator pos:start="29:45" pos:end="29:46">-&gt;</operator><name pos:start="29:47" pos:end="29:48">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="29:51" pos:end="29:51">+</operator> <literal type="number" pos:start="29:53" pos:end="29:53">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="103:5"><if pos:start="31:5" pos:end="103:5">if<condition pos:start="31:7" pos:end="31:35">(<expr pos:start="31:8" pos:end="31:33"><name pos:start="31:8" pos:end="31:29"><name pos:start="31:8" pos:end="31:10">pps</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:29">slice_group_count</name></name> <operator pos:start="31:31" pos:end="31:31">&gt;</operator> <literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr> )</condition><block pos:start="31:36" pos:end="103:5">{<block_content pos:start="33:9" pos:end="101:9">

        <expr_stmt pos:start="33:9" pos:end="33:60"><expr pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:11">pps</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:36">mb_slice_group_map_type</name></name><operator pos:start="33:37" pos:end="33:37">=</operator> <call pos:start="33:39" pos:end="33:59"><name pos:start="33:39" pos:end="33:51">get_ue_golomb</name><argument_list pos:start="33:52" pos:end="33:59">(<argument pos:start="33:53" pos:end="33:58"><expr pos:start="33:53" pos:end="33:58"><operator pos:start="33:53" pos:end="33:53">&amp;</operator><name pos:start="33:54" pos:end="33:58"><name pos:start="33:54" pos:end="33:54">s</name><operator pos:start="33:55" pos:end="33:56">-&gt;</operator><name pos:start="33:57" pos:end="33:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:64"><expr pos:start="35:9" pos:end="35:63"><call pos:start="35:9" pos:end="35:63"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:63">(<argument pos:start="35:16" pos:end="35:25"><expr pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:16">h</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:19">s</name><operator pos:start="35:20" pos:end="35:20">.</operator><name pos:start="35:21" pos:end="35:25">avctx</name></name></expr></argument>, <argument pos:start="35:28" pos:end="35:39"><expr pos:start="35:28" pos:end="35:39"><name pos:start="35:28" pos:end="35:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:42" pos:end="35:62"><expr pos:start="35:42" pos:end="35:62"><literal type="string" pos:start="35:42" pos:end="35:62">"FMO not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="37:9" pos:end="101:9">switch<condition pos:start="37:15" pos:end="37:44">(<expr pos:start="37:16" pos:end="37:43"><name pos:start="37:16" pos:end="37:43"><name pos:start="37:16" pos:end="37:18">pps</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:43">mb_slice_group_map_type</name></name></expr>)</condition><block pos:start="37:45" pos:end="101:9">{<block_content pos:start="39:9" pos:end="99:18">

        <case pos:start="39:9" pos:end="48:0">case <expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>:</case>

<cpp:if pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:5"><literal type="number" pos:start="41:5" pos:end="41:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt;= num_slice_groups_minus1; i++ ) |   |        |

|    run_length[ i ]                                |1  |ue(v)   |

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="66:0">case <expr pos:start="51:14" pos:end="51:14"><literal type="number" pos:start="51:14" pos:end="51:14">2</literal></expr>:</case>

<cpp:if pos:start="53:1" pos:end="53:5">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:5"><literal type="number" pos:start="53:5" pos:end="53:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt; num_slice_groups_minus1; i++ )  |   |        |

|{                                                  |   |        |

|    top_left_mb[ i ]                               |1  |ue(v)   |

|    bottom_right_mb[ i ]                           |1  |ue(v)   |

|   }                                               |   |        |

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:15">case <expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">3</literal></expr>:</case>

        <case pos:start="71:9" pos:end="71:15">case <expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">4</literal></expr>:</case>

        <case pos:start="73:9" pos:end="82:0">case <expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">5</literal></expr>:</case>

<cpp:if pos:start="75:1" pos:end="75:5">#<cpp:directive pos:start="75:2" pos:end="75:3">if</cpp:directive> <expr pos:start="75:5" pos:end="75:5"><literal type="number" pos:start="75:5" pos:end="75:5">0</literal></expr></cpp:if>

|   slice_group_change_direction_flag               |1  |u(1)    |

|   slice_group_change_rate_minus1                  |1  |ue(v)   |

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="98:0">case <expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">6</literal></expr>:</case>

<cpp:if pos:start="87:1" pos:end="87:5">#<cpp:directive pos:start="87:2" pos:end="87:3">if</cpp:directive> <expr pos:start="87:5" pos:end="87:5"><literal type="number" pos:start="87:5" pos:end="87:5">0</literal></expr></cpp:if>

|   slice_group_id_cnt_minus1                       |1  |ue(v)   |

|   for( i = 0; i &lt;= slice_group_id_cnt_minus1; i++ |   |        |

|)                                                  |   |        |

|    slice_group_id[ i ]                            |1  |u(v)    |

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:49"><expr pos:start="105:5" pos:end="105:48"><name pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:7">pps</name><operator pos:start="105:8" pos:end="105:9">-&gt;</operator><name pos:start="105:10" pos:end="105:18">ref_count</name><index pos:start="105:19" pos:end="105:21">[<expr pos:start="105:20" pos:end="105:20"><literal type="number" pos:start="105:20" pos:end="105:20">0</literal></expr>]</index></name><operator pos:start="105:22" pos:end="105:22">=</operator> <call pos:start="105:24" pos:end="105:44"><name pos:start="105:24" pos:end="105:36">get_ue_golomb</name><argument_list pos:start="105:37" pos:end="105:44">(<argument pos:start="105:38" pos:end="105:43"><expr pos:start="105:38" pos:end="105:43"><operator pos:start="105:38" pos:end="105:38">&amp;</operator><name pos:start="105:39" pos:end="105:43"><name pos:start="105:39" pos:end="105:39">s</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="105:46" pos:end="105:46">+</operator> <literal type="number" pos:start="105:48" pos:end="105:48">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:49"><expr pos:start="107:5" pos:end="107:48"><name pos:start="107:5" pos:end="107:21"><name pos:start="107:5" pos:end="107:7">pps</name><operator pos:start="107:8" pos:end="107:9">-&gt;</operator><name pos:start="107:10" pos:end="107:18">ref_count</name><index pos:start="107:19" pos:end="107:21">[<expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>]</index></name><operator pos:start="107:22" pos:end="107:22">=</operator> <call pos:start="107:24" pos:end="107:44"><name pos:start="107:24" pos:end="107:36">get_ue_golomb</name><argument_list pos:start="107:37" pos:end="107:44">(<argument pos:start="107:38" pos:end="107:43"><expr pos:start="107:38" pos:end="107:43"><operator pos:start="107:38" pos:end="107:38">&amp;</operator><name pos:start="107:39" pos:end="107:43"><name pos:start="107:39" pos:end="107:39">s</name><operator pos:start="107:40" pos:end="107:41">-&gt;</operator><name pos:start="107:42" pos:end="107:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="107:46" pos:end="107:46">+</operator> <literal type="number" pos:start="107:48" pos:end="107:48">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if<condition pos:start="109:7" pos:end="109:56">(<expr pos:start="109:8" pos:end="109:55"><name pos:start="109:8" pos:end="109:24"><name pos:start="109:8" pos:end="109:10">pps</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:21">ref_count</name><index pos:start="109:22" pos:end="109:24">[<expr pos:start="109:23" pos:end="109:23"><literal type="number" pos:start="109:23" pos:end="109:23">0</literal></expr>]</index></name> <operator pos:start="109:26" pos:end="109:26">&gt;</operator> <literal type="number" pos:start="109:28" pos:end="109:29">32</literal> <operator pos:start="109:31" pos:end="109:32">||</operator> <name pos:start="109:34" pos:end="109:50"><name pos:start="109:34" pos:end="109:36">pps</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:47">ref_count</name><index pos:start="109:48" pos:end="109:50">[<expr pos:start="109:49" pos:end="109:49"><literal type="number" pos:start="109:49" pos:end="109:49">1</literal></expr>]</index></name> <operator pos:start="109:52" pos:end="109:52">&gt;</operator> <literal type="number" pos:start="109:54" pos:end="109:55">32</literal></expr>)</condition><block pos:start="109:57" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:18">

        <expr_stmt pos:start="111:9" pos:end="111:71"><expr pos:start="111:9" pos:end="111:70"><call pos:start="111:9" pos:end="111:70"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="111:70">(<argument pos:start="111:16" pos:end="111:25"><expr pos:start="111:16" pos:end="111:25"><name pos:start="111:16" pos:end="111:25"><name pos:start="111:16" pos:end="111:16">h</name><operator pos:start="111:17" pos:end="111:18">-&gt;</operator><name pos:start="111:19" pos:end="111:19">s</name><operator pos:start="111:20" pos:end="111:20">.</operator><name pos:start="111:21" pos:end="111:25">avctx</name></name></expr></argument>, <argument pos:start="111:28" pos:end="111:39"><expr pos:start="111:28" pos:end="111:39"><name pos:start="111:28" pos:end="111:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:42" pos:end="111:69"><expr pos:start="111:42" pos:end="111:69"><literal type="string" pos:start="111:42" pos:end="111:69">"reference overflow (pps)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:18">return <expr pos:start="113:16" pos:end="113:17"><operator pos:start="113:16" pos:end="113:16">-</operator><literal type="number" pos:start="113:17" pos:end="113:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:42"><expr pos:start="119:5" pos:end="119:41"><name pos:start="119:5" pos:end="119:22"><name pos:start="119:5" pos:end="119:7">pps</name><operator pos:start="119:8" pos:end="119:9">-&gt;</operator><name pos:start="119:10" pos:end="119:22">weighted_pred</name></name><operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="119:41"><name pos:start="119:25" pos:end="119:33">get_bits1</name><argument_list pos:start="119:34" pos:end="119:41">(<argument pos:start="119:35" pos:end="119:40"><expr pos:start="119:35" pos:end="119:40"><operator pos:start="119:35" pos:end="119:35">&amp;</operator><name pos:start="119:36" pos:end="119:40"><name pos:start="119:36" pos:end="119:36">s</name><operator pos:start="119:37" pos:end="119:38">-&gt;</operator><name pos:start="119:39" pos:end="119:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:50"><expr pos:start="121:5" pos:end="121:49"><name pos:start="121:5" pos:end="121:28"><name pos:start="121:5" pos:end="121:7">pps</name><operator pos:start="121:8" pos:end="121:9">-&gt;</operator><name pos:start="121:10" pos:end="121:28">weighted_bipred_idc</name></name><operator pos:start="121:29" pos:end="121:29">=</operator> <call pos:start="121:31" pos:end="121:49"><name pos:start="121:31" pos:end="121:38">get_bits</name><argument_list pos:start="121:39" pos:end="121:49">(<argument pos:start="121:40" pos:end="121:45"><expr pos:start="121:40" pos:end="121:45"><operator pos:start="121:40" pos:end="121:40">&amp;</operator><name pos:start="121:41" pos:end="121:45"><name pos:start="121:41" pos:end="121:41">s</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:45">gb</name></name></expr></argument>, <argument pos:start="121:48" pos:end="121:48"><expr pos:start="121:48" pos:end="121:48"><literal type="number" pos:start="121:48" pos:end="121:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:45"><expr pos:start="123:5" pos:end="123:44"><name pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:7">pps</name><operator pos:start="123:8" pos:end="123:9">-&gt;</operator><name pos:start="123:10" pos:end="123:16">init_qp</name></name><operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:39"><name pos:start="123:19" pos:end="123:31">get_se_golomb</name><argument_list pos:start="123:32" pos:end="123:39">(<argument pos:start="123:33" pos:end="123:38"><expr pos:start="123:33" pos:end="123:38"><operator pos:start="123:33" pos:end="123:33">&amp;</operator><name pos:start="123:34" pos:end="123:38"><name pos:start="123:34" pos:end="123:34">s</name><operator pos:start="123:35" pos:end="123:36">-&gt;</operator><name pos:start="123:37" pos:end="123:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="123:41" pos:end="123:41">+</operator> <literal type="number" pos:start="123:43" pos:end="123:44">26</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:45"><expr pos:start="125:5" pos:end="125:44"><name pos:start="125:5" pos:end="125:16"><name pos:start="125:5" pos:end="125:7">pps</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:16">init_qs</name></name><operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:39"><name pos:start="125:19" pos:end="125:31">get_se_golomb</name><argument_list pos:start="125:32" pos:end="125:39">(<argument pos:start="125:33" pos:end="125:38"><expr pos:start="125:33" pos:end="125:38"><operator pos:start="125:33" pos:end="125:33">&amp;</operator><name pos:start="125:34" pos:end="125:38"><name pos:start="125:34" pos:end="125:34">s</name><operator pos:start="125:35" pos:end="125:36">-&gt;</operator><name pos:start="125:37" pos:end="125:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:41" pos:end="125:41">+</operator> <literal type="number" pos:start="125:43" pos:end="125:44">26</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:55"><expr pos:start="127:5" pos:end="127:54"><name pos:start="127:5" pos:end="127:31"><name pos:start="127:5" pos:end="127:7">pps</name><operator pos:start="127:8" pos:end="127:9">-&gt;</operator><name pos:start="127:10" pos:end="127:31">chroma_qp_index_offset</name></name><operator pos:start="127:32" pos:end="127:32">=</operator> <call pos:start="127:34" pos:end="127:54"><name pos:start="127:34" pos:end="127:46">get_se_golomb</name><argument_list pos:start="127:47" pos:end="127:54">(<argument pos:start="127:48" pos:end="127:53"><expr pos:start="127:48" pos:end="127:53"><operator pos:start="127:48" pos:end="127:48">&amp;</operator><name pos:start="127:49" pos:end="127:53"><name pos:start="127:49" pos:end="127:49">s</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:65"><expr pos:start="129:5" pos:end="129:64"><name pos:start="129:5" pos:end="129:45"><name pos:start="129:5" pos:end="129:7">pps</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:45">deblocking_filter_parameters_present</name></name><operator pos:start="129:46" pos:end="129:46">=</operator> <call pos:start="129:48" pos:end="129:64"><name pos:start="129:48" pos:end="129:56">get_bits1</name><argument_list pos:start="129:57" pos:end="129:64">(<argument pos:start="129:58" pos:end="129:63"><expr pos:start="129:58" pos:end="129:63"><operator pos:start="129:58" pos:end="129:58">&amp;</operator><name pos:start="129:59" pos:end="129:63"><name pos:start="129:59" pos:end="129:59">s</name><operator pos:start="129:60" pos:end="129:61">-&gt;</operator><name pos:start="129:62" pos:end="129:63">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:51"><expr pos:start="131:5" pos:end="131:50"><name pos:start="131:5" pos:end="131:31"><name pos:start="131:5" pos:end="131:7">pps</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:31">constrained_intra_pred</name></name><operator pos:start="131:32" pos:end="131:32">=</operator> <call pos:start="131:34" pos:end="131:50"><name pos:start="131:34" pos:end="131:42">get_bits1</name><argument_list pos:start="131:43" pos:end="131:50">(<argument pos:start="131:44" pos:end="131:49"><expr pos:start="131:44" pos:end="131:49"><operator pos:start="131:44" pos:end="131:44">&amp;</operator><name pos:start="131:45" pos:end="131:49"><name pos:start="131:45" pos:end="131:45">s</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:55"><expr pos:start="133:5" pos:end="133:54"><name pos:start="133:5" pos:end="133:34"><name pos:start="133:5" pos:end="133:7">pps</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:34">redundant_pic_cnt_present</name></name> <operator pos:start="133:36" pos:end="133:36">=</operator> <call pos:start="133:38" pos:end="133:54"><name pos:start="133:38" pos:end="133:46">get_bits1</name><argument_list pos:start="133:47" pos:end="133:54">(<argument pos:start="133:48" pos:end="133:53"><expr pos:start="133:48" pos:end="133:53"><operator pos:start="133:48" pos:end="133:48">&amp;</operator><name pos:start="133:49" pos:end="133:53"><name pos:start="133:49" pos:end="133:49">s</name><operator pos:start="133:50" pos:end="133:51">-&gt;</operator><name pos:start="133:52" pos:end="133:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:31"><expr pos:start="137:5" pos:end="137:30"><name pos:start="137:5" pos:end="137:27"><name pos:start="137:5" pos:end="137:7">pps</name><operator pos:start="137:8" pos:end="137:9">-&gt;</operator><name pos:start="137:10" pos:end="137:27">transform_8x8_mode</name></name><operator pos:start="137:28" pos:end="137:28">=</operator> <literal type="number" pos:start="137:30" pos:end="137:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:29"><expr pos:start="139:5" pos:end="139:28"><name pos:start="139:5" pos:end="139:24"><name pos:start="139:5" pos:end="139:5">h</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:24">dequant_coeff_pps</name></name><operator pos:start="139:25" pos:end="139:25">=</operator> <operator pos:start="139:27" pos:end="139:27">-</operator><literal type="number" pos:start="139:28" pos:end="139:28">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="139:31" pos:end="139:92">//contents of sps/pps can change even if id doesn't, so reinit</comment>

    <expr_stmt pos:start="141:5" pos:end="141:59"><expr pos:start="141:5" pos:end="141:58"><call pos:start="141:5" pos:end="141:58"><name pos:start="141:5" pos:end="141:10">memset</name><argument_list pos:start="141:11" pos:end="141:58">(<argument pos:start="141:12" pos:end="141:31"><expr pos:start="141:12" pos:end="141:31"><name pos:start="141:12" pos:end="141:31"><name pos:start="141:12" pos:end="141:14">pps</name><operator pos:start="141:15" pos:end="141:16">-&gt;</operator><name pos:start="141:17" pos:end="141:31">scaling_matrix4</name></name></expr></argument>, <argument pos:start="141:34" pos:end="141:35"><expr pos:start="141:34" pos:end="141:35"><literal type="number" pos:start="141:34" pos:end="141:35">16</literal></expr></argument>, <argument pos:start="141:38" pos:end="141:57"><expr pos:start="141:38" pos:end="141:57"><literal type="number" pos:start="141:38" pos:end="141:38">6</literal><operator pos:start="141:39" pos:end="141:39">*</operator><literal type="number" pos:start="141:40" pos:end="141:41">16</literal><operator pos:start="141:42" pos:end="141:42">*</operator><sizeof pos:start="141:43" pos:end="141:57">sizeof<argument_list pos:start="141:49" pos:end="141:57">(<argument pos:start="141:50" pos:end="141:56"><expr pos:start="141:50" pos:end="141:56"><name pos:start="141:50" pos:end="141:56">uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:59"><expr pos:start="143:5" pos:end="143:58"><call pos:start="143:5" pos:end="143:58"><name pos:start="143:5" pos:end="143:10">memset</name><argument_list pos:start="143:11" pos:end="143:58">(<argument pos:start="143:12" pos:end="143:31"><expr pos:start="143:12" pos:end="143:31"><name pos:start="143:12" pos:end="143:31"><name pos:start="143:12" pos:end="143:14">pps</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:31">scaling_matrix8</name></name></expr></argument>, <argument pos:start="143:34" pos:end="143:35"><expr pos:start="143:34" pos:end="143:35"><literal type="number" pos:start="143:34" pos:end="143:35">16</literal></expr></argument>, <argument pos:start="143:38" pos:end="143:57"><expr pos:start="143:38" pos:end="143:57"><literal type="number" pos:start="143:38" pos:end="143:38">2</literal><operator pos:start="143:39" pos:end="143:39">*</operator><literal type="number" pos:start="143:40" pos:end="143:41">64</literal><operator pos:start="143:42" pos:end="143:42">*</operator><sizeof pos:start="143:43" pos:end="143:57">sizeof<argument_list pos:start="143:49" pos:end="143:57">(<argument pos:start="143:50" pos:end="143:56"><expr pos:start="143:50" pos:end="143:56"><name pos:start="143:50" pos:end="143:56">uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="155:5"><if pos:start="147:5" pos:end="155:5">if<condition pos:start="147:7" pos:end="147:43">(<expr pos:start="147:8" pos:end="147:42"><call pos:start="147:8" pos:end="147:29"><name pos:start="147:8" pos:end="147:21">get_bits_count</name><argument_list pos:start="147:22" pos:end="147:29">(<argument pos:start="147:23" pos:end="147:28"><expr pos:start="147:23" pos:end="147:28"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="147:31" pos:end="147:31">&lt;</operator> <name pos:start="147:33" pos:end="147:42">bit_length</name></expr>)</condition><block pos:start="147:44" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:30">

        <expr_stmt pos:start="149:9" pos:end="149:51"><expr pos:start="149:9" pos:end="149:50"><name pos:start="149:9" pos:end="149:31"><name pos:start="149:9" pos:end="149:11">pps</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:31">transform_8x8_mode</name></name><operator pos:start="149:32" pos:end="149:32">=</operator> <call pos:start="149:34" pos:end="149:50"><name pos:start="149:34" pos:end="149:42">get_bits1</name><argument_list pos:start="149:43" pos:end="149:50">(<argument pos:start="149:44" pos:end="149:49"><expr pos:start="149:44" pos:end="149:49"><operator pos:start="149:44" pos:end="149:44">&amp;</operator><name pos:start="149:45" pos:end="149:49"><name pos:start="149:45" pos:end="149:45">s</name><operator pos:start="149:46" pos:end="149:47">-&gt;</operator><name pos:start="149:48" pos:end="149:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:116"><expr pos:start="151:9" pos:end="151:115"><call pos:start="151:9" pos:end="151:115"><name pos:start="151:9" pos:end="151:31">decode_scaling_matrices</name><argument_list pos:start="151:32" pos:end="151:115">(<argument pos:start="151:33" pos:end="151:33"><expr pos:start="151:33" pos:end="151:33"><name pos:start="151:33" pos:end="151:33">h</name></expr></argument>, <argument pos:start="151:36" pos:end="151:62"><expr pos:start="151:36" pos:end="151:62"><operator pos:start="151:36" pos:end="151:36">&amp;</operator><name pos:start="151:37" pos:end="151:62"><name pos:start="151:37" pos:end="151:37">h</name><operator pos:start="151:38" pos:end="151:39">-&gt;</operator><name pos:start="151:40" pos:end="151:49">sps_buffer</name><index pos:start="151:50" pos:end="151:62">[<expr pos:start="151:51" pos:end="151:61"><name pos:start="151:51" pos:end="151:61"><name pos:start="151:51" pos:end="151:53">pps</name><operator pos:start="151:54" pos:end="151:55">-&gt;</operator><name pos:start="151:56" pos:end="151:61">sps_id</name></name></expr>]</index></name></expr></argument>, <argument pos:start="151:65" pos:end="151:67"><expr pos:start="151:65" pos:end="151:67"><name pos:start="151:65" pos:end="151:67">pps</name></expr></argument>, <argument pos:start="151:70" pos:end="151:70"><expr pos:start="151:70" pos:end="151:70"><literal type="number" pos:start="151:70" pos:end="151:70">0</literal></expr></argument>, <argument pos:start="151:73" pos:end="151:92"><expr pos:start="151:73" pos:end="151:92"><name pos:start="151:73" pos:end="151:92"><name pos:start="151:73" pos:end="151:75">pps</name><operator pos:start="151:76" pos:end="151:77">-&gt;</operator><name pos:start="151:78" pos:end="151:92">scaling_matrix4</name></name></expr></argument>, <argument pos:start="151:95" pos:end="151:114"><expr pos:start="151:95" pos:end="151:114"><name pos:start="151:95" pos:end="151:114"><name pos:start="151:95" pos:end="151:97">pps</name><operator pos:start="151:98" pos:end="151:99">-&gt;</operator><name pos:start="151:100" pos:end="151:114">scaling_matrix8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:21">get_se_golomb</name><argument_list pos:start="153:22" pos:end="153:29">(<argument pos:start="153:23" pos:end="153:28"><expr pos:start="153:23" pos:end="153:28"><operator pos:start="153:23" pos:end="153:23">&amp;</operator><name pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:24">s</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:28">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="153:33" pos:end="153:63">//second_chroma_qp_index_offset</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="185:5"><if pos:start="159:5" pos:end="185:5">if<condition pos:start="159:7" pos:end="159:42">(<expr pos:start="159:8" pos:end="159:41"><name pos:start="159:8" pos:end="159:22"><name pos:start="159:8" pos:end="159:8">s</name><operator pos:start="159:9" pos:end="159:10">-&gt;</operator><name pos:start="159:11" pos:end="159:15">avctx</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:22">debug</name></name><operator pos:start="159:23" pos:end="159:23">&amp;</operator><name pos:start="159:24" pos:end="159:41">FF_DEBUG_PICT_INFO</name></expr>)</condition><block pos:start="159:43" pos:end="185:5">{<block_content pos:start="161:9" pos:end="183:17">

        <expr_stmt pos:start="161:9" pos:end="183:17"><expr pos:start="161:9" pos:end="183:16"><call pos:start="161:9" pos:end="183:16"><name pos:start="161:9" pos:end="161:14">av_log</name><argument_list pos:start="161:15" pos:end="183:16">(<argument pos:start="161:16" pos:end="161:25"><expr pos:start="161:16" pos:end="161:25"><name pos:start="161:16" pos:end="161:25"><name pos:start="161:16" pos:end="161:16">h</name><operator pos:start="161:17" pos:end="161:18">-&gt;</operator><name pos:start="161:19" pos:end="161:19">s</name><operator pos:start="161:20" pos:end="161:20">.</operator><name pos:start="161:21" pos:end="161:25">avctx</name></name></expr></argument>, <argument pos:start="161:28" pos:end="161:39"><expr pos:start="161:28" pos:end="161:39"><name pos:start="161:28" pos:end="161:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="161:42" pos:end="161:114"><expr pos:start="161:42" pos:end="161:114"><literal type="string" pos:start="161:42" pos:end="161:114">"pps:%u sps:%u %s slice_groups:%d ref:%d/%d %s qp:%d/%d/%d %s %s %s %s\n"</literal></expr></argument>,

               <argument pos:start="163:16" pos:end="163:21"><expr pos:start="163:16" pos:end="163:21"><name pos:start="163:16" pos:end="163:21">pps_id</name></expr></argument>, <argument pos:start="163:24" pos:end="163:34"><expr pos:start="163:24" pos:end="163:34"><name pos:start="163:24" pos:end="163:34"><name pos:start="163:24" pos:end="163:26">pps</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:34">sps_id</name></name></expr></argument>,

               <argument pos:start="165:16" pos:end="165:45"><expr pos:start="165:16" pos:end="165:45"><ternary pos:start="165:16" pos:end="165:45"><condition pos:start="165:16" pos:end="165:27"><expr pos:start="165:16" pos:end="165:25"><name pos:start="165:16" pos:end="165:25"><name pos:start="165:16" pos:end="165:18">pps</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:25">cabac</name></name></expr> ?</condition><then pos:start="165:29" pos:end="165:35"> <expr pos:start="165:29" pos:end="165:35"><literal type="string" pos:start="165:29" pos:end="165:35">"CABAC"</literal></expr> </then><else pos:start="165:37" pos:end="165:45">: <expr pos:start="165:39" pos:end="165:45"><literal type="string" pos:start="165:39" pos:end="165:45">"CAVLC"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="167:16" pos:end="167:37"><expr pos:start="167:16" pos:end="167:37"><name pos:start="167:16" pos:end="167:37"><name pos:start="167:16" pos:end="167:18">pps</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:37">slice_group_count</name></name></expr></argument>,

               <argument pos:start="169:16" pos:end="169:32"><expr pos:start="169:16" pos:end="169:32"><name pos:start="169:16" pos:end="169:32"><name pos:start="169:16" pos:end="169:18">pps</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:29">ref_count</name><index pos:start="169:30" pos:end="169:32">[<expr pos:start="169:31" pos:end="169:31"><literal type="number" pos:start="169:31" pos:end="169:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="169:35" pos:end="169:51"><expr pos:start="169:35" pos:end="169:51"><name pos:start="169:35" pos:end="169:51"><name pos:start="169:35" pos:end="169:37">pps</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:48">ref_count</name><index pos:start="169:49" pos:end="169:51">[<expr pos:start="169:50" pos:end="169:50"><literal type="number" pos:start="169:50" pos:end="169:50">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="171:16" pos:end="171:51"><expr pos:start="171:16" pos:end="171:51"><ternary pos:start="171:16" pos:end="171:51"><condition pos:start="171:16" pos:end="171:35"><expr pos:start="171:16" pos:end="171:33"><name pos:start="171:16" pos:end="171:33"><name pos:start="171:16" pos:end="171:18">pps</name><operator pos:start="171:19" pos:end="171:20">-&gt;</operator><name pos:start="171:21" pos:end="171:33">weighted_pred</name></name></expr> ?</condition><then pos:start="171:37" pos:end="171:46"> <expr pos:start="171:37" pos:end="171:46"><literal type="string" pos:start="171:37" pos:end="171:46">"weighted"</literal></expr> </then><else pos:start="171:48" pos:end="171:51">: <expr pos:start="171:50" pos:end="171:51"><literal type="string" pos:start="171:50" pos:end="171:51">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="173:16" pos:end="173:27"><expr pos:start="173:16" pos:end="173:27"><name pos:start="173:16" pos:end="173:27"><name pos:start="173:16" pos:end="173:18">pps</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:27">init_qp</name></name></expr></argument>, <argument pos:start="173:30" pos:end="173:41"><expr pos:start="173:30" pos:end="173:41"><name pos:start="173:30" pos:end="173:41"><name pos:start="173:30" pos:end="173:32">pps</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:41">init_qs</name></name></expr></argument>, <argument pos:start="173:44" pos:end="173:70"><expr pos:start="173:44" pos:end="173:70"><name pos:start="173:44" pos:end="173:70"><name pos:start="173:44" pos:end="173:46">pps</name><operator pos:start="173:47" pos:end="173:48">-&gt;</operator><name pos:start="173:49" pos:end="173:70">chroma_qp_index_offset</name></name></expr></argument>,

               <argument pos:start="175:16" pos:end="175:70"><expr pos:start="175:16" pos:end="175:70"><ternary pos:start="175:16" pos:end="175:70"><condition pos:start="175:16" pos:end="175:58"><expr pos:start="175:16" pos:end="175:56"><name pos:start="175:16" pos:end="175:56"><name pos:start="175:16" pos:end="175:18">pps</name><operator pos:start="175:19" pos:end="175:20">-&gt;</operator><name pos:start="175:21" pos:end="175:56">deblocking_filter_parameters_present</name></name></expr> ?</condition><then pos:start="175:60" pos:end="175:65"> <expr pos:start="175:60" pos:end="175:65"><literal type="string" pos:start="175:60" pos:end="175:65">"LPAR"</literal></expr> </then><else pos:start="175:67" pos:end="175:70">: <expr pos:start="175:69" pos:end="175:70"><literal type="string" pos:start="175:69" pos:end="175:70">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="177:16" pos:end="177:58"><expr pos:start="177:16" pos:end="177:58"><ternary pos:start="177:16" pos:end="177:58"><condition pos:start="177:16" pos:end="177:44"><expr pos:start="177:16" pos:end="177:42"><name pos:start="177:16" pos:end="177:42"><name pos:start="177:16" pos:end="177:18">pps</name><operator pos:start="177:19" pos:end="177:20">-&gt;</operator><name pos:start="177:21" pos:end="177:42">constrained_intra_pred</name></name></expr> ?</condition><then pos:start="177:46" pos:end="177:53"> <expr pos:start="177:46" pos:end="177:53"><literal type="string" pos:start="177:46" pos:end="177:53">"CONSTR"</literal></expr> </then><else pos:start="177:55" pos:end="177:58">: <expr pos:start="177:57" pos:end="177:58"><literal type="string" pos:start="177:57" pos:end="177:58">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="179:16" pos:end="179:59"><expr pos:start="179:16" pos:end="179:59"><ternary pos:start="179:16" pos:end="179:59"><condition pos:start="179:16" pos:end="179:47"><expr pos:start="179:16" pos:end="179:45"><name pos:start="179:16" pos:end="179:45"><name pos:start="179:16" pos:end="179:18">pps</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:45">redundant_pic_cnt_present</name></name></expr> ?</condition><then pos:start="179:49" pos:end="179:54"> <expr pos:start="179:49" pos:end="179:54"><literal type="string" pos:start="179:49" pos:end="179:54">"REDU"</literal></expr> </then><else pos:start="179:56" pos:end="179:59">: <expr pos:start="179:58" pos:end="179:59"><literal type="string" pos:start="179:58" pos:end="179:59">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="181:16" pos:end="181:54"><expr pos:start="181:16" pos:end="181:54"><ternary pos:start="181:16" pos:end="181:54"><condition pos:start="181:16" pos:end="181:40"><expr pos:start="181:16" pos:end="181:38"><name pos:start="181:16" pos:end="181:38"><name pos:start="181:16" pos:end="181:18">pps</name><operator pos:start="181:19" pos:end="181:20">-&gt;</operator><name pos:start="181:21" pos:end="181:38">transform_8x8_mode</name></name></expr> ?</condition><then pos:start="181:42" pos:end="181:49"> <expr pos:start="181:42" pos:end="181:49"><literal type="string" pos:start="181:42" pos:end="181:49">"8x8DCT"</literal></expr> </then><else pos:start="181:51" pos:end="181:54">: <expr pos:start="181:53" pos:end="181:54"><literal type="string" pos:start="181:53" pos:end="181:54">""</literal></expr></else></ternary></expr></argument>

               )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="189:5" pos:end="189:13">return <expr pos:start="189:12" pos:end="189:12"><literal type="number" pos:start="189:12" pos:end="189:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
