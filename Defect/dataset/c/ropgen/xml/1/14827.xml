<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14827.c" pos:tabs="8"><function pos:start="1:1" pos:end="469:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_msmpeg4_decode_block</name><parameter_list pos:start="1:28" pos:end="3:74">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:42">MpegEncContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:55">int16_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type> <name pos:start="1:59" pos:end="1:63">block</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:35"><decl pos:start="3:31" pos:end="3:35"><type pos:start="3:31" pos:end="3:35"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:35">n</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:46"><decl pos:start="3:38" pos:end="3:46"><type pos:start="3:38" pos:end="3:46"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:46">coded</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:73"><decl pos:start="3:49" pos:end="3:73"><type pos:start="3:49" pos:end="3:73"><specifier pos:start="3:49" pos:end="3:53">const</specifier> <name pos:start="3:55" pos:end="3:61">uint8_t</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:73">scan_table</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="469:1">{<block_content pos:start="7:5" pos:end="467:13">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">level</name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">i</name></decl>, <decl pos:start="7:19" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:22">last</name></decl>, <decl pos:start="7:25" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:27">run</name></decl>, <decl pos:start="7:30" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:30" pos:end="7:37">run_diff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">av_uninit</name><argument_list pos:start="9:18" pos:end="9:30">(<argument pos:start="9:19" pos:end="9:29"><expr pos:start="9:19" pos:end="9:29"><name pos:start="9:19" pos:end="9:29">dc_pred_dir</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">RLTable</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:15">rl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">RL_VLC_ELEM</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:23">rl_vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">qmul</name></decl>, <decl pos:start="15:15" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:18">qadd</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="137:5"><if pos:start="19:5" pos:end="101:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:19">mb_intra</name></name></expr>)</condition> <block pos:start="19:22" pos:end="101:5">{<block_content pos:start="21:9" pos:end="99:30">

        <expr_stmt pos:start="21:9" pos:end="21:15"><expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:12">qmul</name><operator pos:start="21:13" pos:end="21:13">=</operator><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:15"><expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:12">qadd</name><operator pos:start="23:13" pos:end="23:13">=</operator><literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="27:9" pos:end="27:21">/* DC coef */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:54"><expr pos:start="29:9" pos:end="29:53"><name pos:start="29:9" pos:end="29:13">level</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:53"><name pos:start="29:17" pos:end="29:33">msmpeg4_decode_dc</name><argument_list pos:start="29:34" pos:end="29:53">(<argument pos:start="29:35" pos:end="29:35"><expr pos:start="29:35" pos:end="29:35"><name pos:start="29:35" pos:end="29:35">s</name></expr></argument>, <argument pos:start="29:38" pos:end="29:38"><expr pos:start="29:38" pos:end="29:38"><name pos:start="29:38" pos:end="29:38">n</name></expr></argument>, <argument pos:start="29:41" pos:end="29:52"><expr pos:start="29:41" pos:end="29:52"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:52">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:17">level</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <literal type="number" pos:start="33:21" pos:end="33:21">0</literal></expr>)</condition><block pos:start="33:23" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:46">

            <expr_stmt pos:start="35:13" pos:end="35:98"><expr pos:start="35:13" pos:end="35:97"><call pos:start="35:13" pos:end="35:97"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:97">(<argument pos:start="35:20" pos:end="35:27"><expr pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:27">avctx</name></name></expr></argument>, <argument pos:start="35:30" pos:end="35:41"><expr pos:start="35:30" pos:end="35:41"><name pos:start="35:30" pos:end="35:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:44" pos:end="35:82"><expr pos:start="35:44" pos:end="35:82"><literal type="string" pos:start="35:44" pos:end="35:82">"dc overflow- block: %d qscale: %d//\n"</literal></expr></argument>, <argument pos:start="35:85" pos:end="35:85"><expr pos:start="35:85" pos:end="35:85"><name pos:start="35:85" pos:end="35:85">n</name></expr></argument>, <argument pos:start="35:88" pos:end="35:96"><expr pos:start="35:88" pos:end="35:96"><name pos:start="35:88" pos:end="35:96"><name pos:start="35:88" pos:end="35:88">s</name><operator pos:start="35:89" pos:end="35:90">-&gt;</operator><name pos:start="35:91" pos:end="35:96">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="39:46"><if pos:start="37:13" pos:end="37:44">if<condition pos:start="37:15" pos:end="37:35">(<expr pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:34">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="37:37" pos:end="37:44"><block_content pos:start="37:37" pos:end="37:44"> <expr_stmt pos:start="37:37" pos:end="37:44"><expr pos:start="37:37" pos:end="37:43"><name pos:start="37:37" pos:end="37:41">level</name><operator pos:start="37:42" pos:end="37:42">=</operator><literal type="number" pos:start="37:43" pos:end="37:43">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="39:13" pos:end="39:46">else<block type="pseudo" pos:start="39:37" pos:end="39:46"><block_content pos:start="39:37" pos:end="39:46">                    <return pos:start="39:37" pos:end="39:46">return <expr pos:start="39:44" pos:end="39:45"><operator pos:start="39:44" pos:end="39:44">-</operator><literal type="number" pos:start="39:45" pos:end="39:45">1</literal></expr>;</return></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="67:9"><if pos:start="43:9" pos:end="55:9">if <condition pos:start="43:12" pos:end="43:18">(<expr pos:start="43:13" pos:end="43:17"><name pos:start="43:13" pos:end="43:13">n</name> <operator pos:start="43:15" pos:end="43:15">&lt;</operator> <literal type="number" pos:start="43:17" pos:end="43:17">4</literal></expr>)</condition> <block pos:start="43:20" pos:end="55:9">{<block_content pos:start="45:13" pos:end="53:13">

            <expr_stmt pos:start="45:13" pos:end="45:49"><expr pos:start="45:13" pos:end="45:48"><name pos:start="45:13" pos:end="45:14">rl</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:48"><name pos:start="45:19" pos:end="45:29">ff_rl_table</name><index pos:start="45:30" pos:end="45:48">[<expr pos:start="45:31" pos:end="45:47"><name pos:start="45:31" pos:end="45:47"><name pos:start="45:31" pos:end="45:31">s</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:47">rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if<condition pos:start="47:15" pos:end="47:41">(<expr pos:start="47:16" pos:end="47:40"><name pos:start="47:16" pos:end="47:20">level</name> <operator pos:start="47:22" pos:end="47:22">&gt;</operator> <literal type="number" pos:start="47:24" pos:end="47:26">256</literal><operator pos:start="47:27" pos:end="47:27">*</operator><name pos:start="47:28" pos:end="47:40"><name pos:start="47:28" pos:end="47:28">s</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:40">y_dc_scale</name></name></expr>)</condition><block pos:start="47:42" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:51">

                <expr_stmt pos:start="49:17" pos:end="49:91"><expr pos:start="49:17" pos:end="49:90"><call pos:start="49:17" pos:end="49:90"><name pos:start="49:17" pos:end="49:22">av_log</name><argument_list pos:start="49:23" pos:end="49:90">(<argument pos:start="49:24" pos:end="49:31"><expr pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:24">s</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:31">avctx</name></name></expr></argument>, <argument pos:start="49:34" pos:end="49:45"><expr pos:start="49:34" pos:end="49:45"><name pos:start="49:34" pos:end="49:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:48" pos:end="49:78"><expr pos:start="49:48" pos:end="49:78"><literal type="string" pos:start="49:48" pos:end="49:78">"dc overflow+ L qscale: %d//\n"</literal></expr></argument>, <argument pos:start="49:81" pos:end="49:89"><expr pos:start="49:81" pos:end="49:89"><name pos:start="49:81" pos:end="49:89"><name pos:start="49:81" pos:end="49:81">s</name><operator pos:start="49:82" pos:end="49:83">-&gt;</operator><name pos:start="49:84" pos:end="49:89">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="51:17" pos:end="51:51"><if pos:start="51:17" pos:end="51:51">if<condition pos:start="51:19" pos:end="51:40">(<expr pos:start="51:20" pos:end="51:39"><operator pos:start="51:20" pos:end="51:20">!</operator><name pos:start="51:21" pos:end="51:39"><name pos:start="51:21" pos:end="51:21">s</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:39">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="51:42" pos:end="51:51"><block_content pos:start="51:42" pos:end="51:51"> <return pos:start="51:42" pos:end="51:51">return <expr pos:start="51:49" pos:end="51:50"><operator pos:start="51:49" pos:end="51:49">-</operator><literal type="number" pos:start="51:50" pos:end="51:50">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="67:9">else <block pos:start="55:16" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:13">

            <expr_stmt pos:start="57:13" pos:end="57:60"><expr pos:start="57:13" pos:end="57:59"><name pos:start="57:13" pos:end="57:14">rl</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:59"><name pos:start="57:19" pos:end="57:29">ff_rl_table</name><index pos:start="57:30" pos:end="57:59">[<expr pos:start="57:31" pos:end="57:58"><literal type="number" pos:start="57:31" pos:end="57:33">3</literal> <operator pos:start="57:33" pos:end="57:33">+</operator> <name pos:start="57:35" pos:end="57:58"><name pos:start="57:35" pos:end="57:35">s</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:58">rl_chroma_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if<condition pos:start="59:15" pos:end="59:41">(<expr pos:start="59:16" pos:end="59:40"><name pos:start="59:16" pos:end="59:20">level</name> <operator pos:start="59:22" pos:end="59:22">&gt;</operator> <literal type="number" pos:start="59:24" pos:end="59:26">256</literal><operator pos:start="59:27" pos:end="59:27">*</operator><name pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:28">s</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:40">c_dc_scale</name></name></expr>)</condition><block pos:start="59:42" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:51">

                <expr_stmt pos:start="61:17" pos:end="61:91"><expr pos:start="61:17" pos:end="61:90"><call pos:start="61:17" pos:end="61:90"><name pos:start="61:17" pos:end="61:22">av_log</name><argument_list pos:start="61:23" pos:end="61:90">(<argument pos:start="61:24" pos:end="61:31"><expr pos:start="61:24" pos:end="61:31"><name pos:start="61:24" pos:end="61:31"><name pos:start="61:24" pos:end="61:24">s</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:31">avctx</name></name></expr></argument>, <argument pos:start="61:34" pos:end="61:45"><expr pos:start="61:34" pos:end="61:45"><name pos:start="61:34" pos:end="61:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:48" pos:end="61:78"><expr pos:start="61:48" pos:end="61:78"><literal type="string" pos:start="61:48" pos:end="61:78">"dc overflow+ C qscale: %d//\n"</literal></expr></argument>, <argument pos:start="61:81" pos:end="61:89"><expr pos:start="61:81" pos:end="61:89"><name pos:start="61:81" pos:end="61:89"><name pos:start="61:81" pos:end="61:81">s</name><operator pos:start="61:82" pos:end="61:83">-&gt;</operator><name pos:start="61:84" pos:end="61:89">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="63:51"><if pos:start="63:17" pos:end="63:51">if<condition pos:start="63:19" pos:end="63:40">(<expr pos:start="63:20" pos:end="63:39"><operator pos:start="63:20" pos:end="63:20">!</operator><name pos:start="63:21" pos:end="63:39"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:39">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="63:42" pos:end="63:51"><block_content pos:start="63:42" pos:end="63:51"> <return pos:start="63:42" pos:end="63:51">return <expr pos:start="63:49" pos:end="63:50"><operator pos:start="63:49" pos:end="63:49">-</operator><literal type="number" pos:start="63:50" pos:end="63:50">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:25"><expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:13">block</name><index pos:start="69:14" pos:end="69:16">[<expr pos:start="69:15" pos:end="69:15"><literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>]</index></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:24">level</name></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:16">run_diff</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:37"><name pos:start="73:20" pos:end="73:20">s</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:37">msmpeg4_version</name></name> <operator pos:start="73:39" pos:end="73:40">&gt;=</operator> <literal type="number" pos:start="73:42" pos:end="73:42">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:14"><expr pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:9">i</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <literal type="number" pos:start="75:13" pos:end="75:13">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:19">(<expr pos:start="77:13" pos:end="77:18"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:18">coded</name></expr>)</condition> <block pos:start="77:21" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:27">

            <goto pos:start="79:13" pos:end="79:27">goto <name pos:start="79:18" pos:end="79:26">not_coded</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="97:9"><if pos:start="83:9" pos:end="93:9">if <condition pos:start="83:12" pos:end="83:23">(<expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">ac_pred</name></name></expr>)</condition> <block pos:start="83:25" pos:end="93:9">{<block_content pos:start="85:13" pos:end="91:61">

            <if_stmt pos:start="85:13" pos:end="91:61"><if pos:start="85:13" pos:end="87:61">if <condition pos:start="85:16" pos:end="85:33">(<expr pos:start="85:17" pos:end="85:32"><name pos:start="85:17" pos:end="85:27">dc_pred_dir</name> <operator pos:start="85:29" pos:end="85:30">==</operator> <literal type="number" pos:start="85:32" pos:end="85:32">0</literal></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:61"><block_content pos:start="87:17" pos:end="87:61">

                <expr_stmt pos:start="87:17" pos:end="87:61"><expr pos:start="87:17" pos:end="87:60"><name pos:start="87:17" pos:end="87:26">scan_table</name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:60"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:49">intra_v_scantable</name><operator pos:start="87:50" pos:end="87:50">.</operator><name pos:start="87:51" pos:end="87:60">permutated</name></name></expr>;</expr_stmt></block_content></block></if> <comment type="block" pos:start="87:63" pos:end="87:72">/* left */</comment>

            <else pos:start="89:13" pos:end="91:61">else<block type="pseudo" pos:start="91:17" pos:end="91:61"><block_content pos:start="91:17" pos:end="91:61">

                <expr_stmt pos:start="91:17" pos:end="91:61"><expr pos:start="91:17" pos:end="91:60"><name pos:start="91:17" pos:end="91:26">scan_table</name> <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:60"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:49">intra_h_scantable</name><operator pos:start="91:50" pos:end="91:50">.</operator><name pos:start="91:51" pos:end="91:60">permutated</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="91:63" pos:end="91:71">/* top */</comment>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="97:9">else <block pos:start="93:16" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:55">

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:22">scan_table</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <name pos:start="95:26" pos:end="95:54"><name pos:start="95:26" pos:end="95:26">s</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:43">intra_scantable</name><operator pos:start="95:44" pos:end="95:44">.</operator><name pos:start="95:45" pos:end="95:54">permutated</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:14">rl_vlc</name><operator pos:start="99:15" pos:end="99:15">=</operator> <name pos:start="99:17" pos:end="99:29"><name pos:start="99:17" pos:end="99:18">rl</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:26">rl_vlc</name><index pos:start="99:27" pos:end="99:29">[<expr pos:start="99:28" pos:end="99:28"><literal type="number" pos:start="99:28" pos:end="99:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="137:5">else <block pos:start="101:12" pos:end="137:5">{<block_content pos:start="103:9" pos:end="135:38">

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:12">qmul</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <name pos:start="103:16" pos:end="103:24"><name pos:start="103:16" pos:end="103:16">s</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:24">qscale</name></name> <operator pos:start="103:26" pos:end="103:27">&lt;&lt;</operator> <literal type="number" pos:start="103:29" pos:end="103:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:35"><expr pos:start="105:9" pos:end="105:34"><name pos:start="105:9" pos:end="105:12">qadd</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:25"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:25">qscale</name></name> <operator pos:start="105:27" pos:end="105:27">-</operator> <literal type="number" pos:start="105:29" pos:end="105:29">1</literal><operator pos:start="105:30" pos:end="105:30">)</operator> <operator pos:start="105:32" pos:end="105:32">|</operator> <literal type="number" pos:start="105:34" pos:end="105:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:15"><expr pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:9">i</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <operator pos:start="107:13" pos:end="107:13">-</operator><literal type="number" pos:start="107:14" pos:end="107:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:49"><expr pos:start="109:9" pos:end="109:48"><name pos:start="109:9" pos:end="109:10">rl</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <operator pos:start="109:14" pos:end="109:14">&amp;</operator><name pos:start="109:15" pos:end="109:48"><name pos:start="109:15" pos:end="109:25">ff_rl_table</name><index pos:start="109:26" pos:end="109:48">[<expr pos:start="109:27" pos:end="109:47"><literal type="number" pos:start="109:27" pos:end="109:29">3</literal> <operator pos:start="109:29" pos:end="109:29">+</operator> <name pos:start="109:31" pos:end="109:47"><name pos:start="109:31" pos:end="109:31">s</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:47">rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="119:25"><if pos:start="113:9" pos:end="115:25">if<condition pos:start="113:11" pos:end="113:33">(<expr pos:start="113:12" pos:end="113:32"><name pos:start="113:12" pos:end="113:29"><name pos:start="113:12" pos:end="113:12">s</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:29">msmpeg4_version</name></name><operator pos:start="113:30" pos:end="113:31">==</operator><literal type="number" pos:start="113:32" pos:end="113:32">2</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:25"><block_content pos:start="115:13" pos:end="115:25">

            <expr_stmt pos:start="115:13" pos:end="115:25"><expr pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:20">run_diff</name> <operator pos:start="115:22" pos:end="115:22">=</operator> <literal type="number" pos:start="115:24" pos:end="115:24">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="117:9" pos:end="119:25">else<block type="pseudo" pos:start="119:13" pos:end="119:25"><block_content pos:start="119:13" pos:end="119:25">

            <expr_stmt pos:start="119:13" pos:end="119:25"><expr pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:20">run_diff</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <literal type="number" pos:start="119:24" pos:end="119:24">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:19">(<expr pos:start="123:13" pos:end="123:18"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:18">coded</name></expr>)</condition> <block pos:start="123:21" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:21">

            <expr_stmt pos:start="125:13" pos:end="125:39"><expr pos:start="125:13" pos:end="125:38"><name pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:31">block_last_index</name><index pos:start="125:32" pos:end="125:34">[<expr pos:start="125:33" pos:end="125:33"><name pos:start="125:33" pos:end="125:33">n</name></expr>]</index></name> <operator pos:start="125:36" pos:end="125:36">=</operator> <name pos:start="125:38" pos:end="125:38">i</name></expr>;</expr_stmt>

            <return pos:start="127:13" pos:end="127:21">return <expr pos:start="127:20" pos:end="127:20"><literal type="number" pos:start="127:20" pos:end="127:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="131:9" pos:end="133:55"><if pos:start="131:9" pos:end="133:55">if<condition pos:start="131:11" pos:end="131:23">(<expr pos:start="131:12" pos:end="131:22"><operator pos:start="131:12" pos:end="131:12">!</operator><name pos:start="131:13" pos:end="131:22">scan_table</name></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:55"><block_content pos:start="133:13" pos:end="133:55">

            <expr_stmt pos:start="133:13" pos:end="133:55"><expr pos:start="133:13" pos:end="133:54"><name pos:start="133:13" pos:end="133:22">scan_table</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <name pos:start="133:26" pos:end="133:54"><name pos:start="133:26" pos:end="133:26">s</name><operator pos:start="133:27" pos:end="133:28">-&gt;</operator><name pos:start="133:29" pos:end="133:43">inter_scantable</name><operator pos:start="133:44" pos:end="133:44">.</operator><name pos:start="133:45" pos:end="133:54">permutated</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:38"><expr pos:start="135:9" pos:end="135:37"><name pos:start="135:9" pos:end="135:14">rl_vlc</name><operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:37"><name pos:start="135:17" pos:end="135:18">rl</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:26">rl_vlc</name><index pos:start="135:27" pos:end="135:37">[<expr pos:start="135:28" pos:end="135:36"><name pos:start="135:28" pos:end="135:36"><name pos:start="135:28" pos:end="135:28">s</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:36">qscale</name></name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

  <block pos:start="139:3" pos:end="445:3">{<block_content pos:start="141:5" pos:end="443:29">

    <expr_stmt pos:start="141:5" pos:end="141:28"><expr pos:start="141:5" pos:end="141:27"><call pos:start="141:5" pos:end="141:27"><name pos:start="141:5" pos:end="141:15">OPEN_READER</name><argument_list pos:start="141:16" pos:end="141:27">(<argument pos:start="141:17" pos:end="141:18"><expr pos:start="141:17" pos:end="141:18"><name pos:start="141:17" pos:end="141:18">re</name></expr></argument>, <argument pos:start="141:21" pos:end="141:26"><expr pos:start="141:21" pos:end="141:26"><operator pos:start="141:21" pos:end="141:21">&amp;</operator><name pos:start="141:22" pos:end="141:26"><name pos:start="141:22" pos:end="141:22">s</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:26">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="441:5">for<control pos:start="143:8" pos:end="143:11">(<init pos:start="143:9" pos:end="143:9">;</init><condition pos:start="143:10" pos:end="143:10">;</condition><incr/>)</control> <block pos:start="143:13" pos:end="441:5">{<block_content pos:start="145:9" pos:end="439:37">

        <expr_stmt pos:start="145:9" pos:end="145:33"><expr pos:start="145:9" pos:end="145:32"><call pos:start="145:9" pos:end="145:32"><name pos:start="145:9" pos:end="145:20">UPDATE_CACHE</name><argument_list pos:start="145:21" pos:end="145:32">(<argument pos:start="145:22" pos:end="145:23"><expr pos:start="145:22" pos:end="145:23"><name pos:start="145:22" pos:end="145:23">re</name></expr></argument>, <argument pos:start="145:26" pos:end="145:31"><expr pos:start="145:26" pos:end="145:31"><operator pos:start="145:26" pos:end="145:26">&amp;</operator><name pos:start="145:27" pos:end="145:31"><name pos:start="145:27" pos:end="145:27">s</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:71"><expr pos:start="147:9" pos:end="147:70"><call pos:start="147:9" pos:end="147:70"><name pos:start="147:9" pos:end="147:18">GET_RL_VLC</name><argument_list pos:start="147:19" pos:end="147:70">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">level</name></expr></argument>, <argument pos:start="147:27" pos:end="147:29"><expr pos:start="147:27" pos:end="147:29"><name pos:start="147:27" pos:end="147:29">run</name></expr></argument>, <argument pos:start="147:32" pos:end="147:33"><expr pos:start="147:32" pos:end="147:33"><name pos:start="147:32" pos:end="147:33">re</name></expr></argument>, <argument pos:start="147:36" pos:end="147:41"><expr pos:start="147:36" pos:end="147:41"><operator pos:start="147:36" pos:end="147:36">&amp;</operator><name pos:start="147:37" pos:end="147:41"><name pos:start="147:37" pos:end="147:37">s</name><operator pos:start="147:38" pos:end="147:39">-&gt;</operator><name pos:start="147:40" pos:end="147:41">gb</name></name></expr></argument>, <argument pos:start="147:44" pos:end="147:49"><expr pos:start="147:44" pos:end="147:49"><name pos:start="147:44" pos:end="147:49">rl_vlc</name></expr></argument>, <argument pos:start="147:52" pos:end="147:63"><expr pos:start="147:52" pos:end="147:63"><name pos:start="147:52" pos:end="147:63">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="147:66" pos:end="147:66"><expr pos:start="147:66" pos:end="147:66"><literal type="number" pos:start="147:66" pos:end="147:66">2</literal></expr></argument>, <argument pos:start="147:69" pos:end="147:69"><expr pos:start="147:69" pos:end="147:69"><literal type="number" pos:start="147:69" pos:end="147:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="401:9"><if pos:start="149:9" pos:end="381:9">if <condition pos:start="149:12" pos:end="149:21">(<expr pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:17">level</name><operator pos:start="149:18" pos:end="149:19">==</operator><literal type="number" pos:start="149:20" pos:end="149:20">0</literal></expr>)</condition> <block pos:start="149:23" pos:end="381:9">{<block_content pos:start="151:13" pos:end="379:13">

            <decl_stmt pos:start="151:13" pos:end="151:22"><decl pos:start="151:13" pos:end="151:21"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:21">cache</name></decl>;</decl_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:41"><expr pos:start="153:13" pos:end="153:40"><name pos:start="153:13" pos:end="153:17">cache</name><operator pos:start="153:18" pos:end="153:18">=</operator> <call pos:start="153:20" pos:end="153:40"><name pos:start="153:20" pos:end="153:28">GET_CACHE</name><argument_list pos:start="153:29" pos:end="153:40">(<argument pos:start="153:30" pos:end="153:31"><expr pos:start="153:30" pos:end="153:31"><name pos:start="153:30" pos:end="153:31">re</name></expr></argument>, <argument pos:start="153:34" pos:end="153:39"><expr pos:start="153:34" pos:end="153:39"><operator pos:start="153:34" pos:end="153:34">&amp;</operator><name pos:start="153:35" pos:end="153:39"><name pos:start="153:35" pos:end="153:35">s</name><operator pos:start="153:36" pos:end="153:37">-&gt;</operator><name pos:start="153:38" pos:end="153:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="155:13" pos:end="155:24">/* escape */</comment>

            <if_stmt pos:start="157:13" pos:end="379:13"><if pos:start="157:13" pos:end="351:13">if <condition pos:start="157:16" pos:end="157:63">(<expr pos:start="157:17" pos:end="157:62"><name pos:start="157:17" pos:end="157:34"><name pos:start="157:17" pos:end="157:17">s</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:34">msmpeg4_version</name></name><operator pos:start="157:35" pos:end="157:36">==</operator><literal type="number" pos:start="157:37" pos:end="157:37">1</literal> <operator pos:start="157:39" pos:end="157:40">||</operator> <operator pos:start="157:42" pos:end="157:42">(</operator><name pos:start="157:43" pos:end="157:47">cache</name><operator pos:start="157:48" pos:end="157:48">&amp;</operator><literal type="number" pos:start="157:49" pos:end="157:58">0x80000000</literal><operator pos:start="157:59" pos:end="157:59">)</operator><operator pos:start="157:60" pos:end="157:61">==</operator><literal type="number" pos:start="157:62" pos:end="157:62">0</literal></expr>)</condition> <block pos:start="157:65" pos:end="351:13">{<block_content pos:start="159:17" pos:end="349:17">

                <if_stmt pos:start="159:17" pos:end="349:17"><if pos:start="159:17" pos:end="323:17">if <condition pos:start="159:20" pos:end="159:67">(<expr pos:start="159:21" pos:end="159:66"><name pos:start="159:21" pos:end="159:38"><name pos:start="159:21" pos:end="159:21">s</name><operator pos:start="159:22" pos:end="159:23">-&gt;</operator><name pos:start="159:24" pos:end="159:38">msmpeg4_version</name></name><operator pos:start="159:39" pos:end="159:40">==</operator><literal type="number" pos:start="159:41" pos:end="159:41">1</literal> <operator pos:start="159:43" pos:end="159:44">||</operator> <operator pos:start="159:46" pos:end="159:46">(</operator><name pos:start="159:47" pos:end="159:51">cache</name><operator pos:start="159:52" pos:end="159:52">&amp;</operator><literal type="number" pos:start="159:53" pos:end="159:62">0x40000000</literal><operator pos:start="159:63" pos:end="159:63">)</operator><operator pos:start="159:64" pos:end="159:65">==</operator><literal type="number" pos:start="159:66" pos:end="159:66">0</literal></expr>)</condition> <block pos:start="159:69" pos:end="323:17">{<block_content pos:start="163:21" pos:end="322:0">

                    <comment type="block" pos:start="161:21" pos:end="161:38">/* third escape */</comment>

                    <if_stmt pos:start="163:21" pos:end="163:76"><if pos:start="163:21" pos:end="163:76">if<condition pos:start="163:23" pos:end="163:45">(<expr pos:start="163:24" pos:end="163:44"><name pos:start="163:24" pos:end="163:41"><name pos:start="163:24" pos:end="163:24">s</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:41">msmpeg4_version</name></name><operator pos:start="163:42" pos:end="163:43">!=</operator><literal type="number" pos:start="163:44" pos:end="163:44">1</literal></expr>)</condition><block type="pseudo" pos:start="163:47" pos:end="163:76"><block_content pos:start="163:47" pos:end="163:76"> <expr_stmt pos:start="163:47" pos:end="163:76"><expr pos:start="163:47" pos:end="163:75"><call pos:start="163:47" pos:end="163:75"><name pos:start="163:47" pos:end="163:60">LAST_SKIP_BITS</name><argument_list pos:start="163:61" pos:end="163:75">(<argument pos:start="163:62" pos:end="163:63"><expr pos:start="163:62" pos:end="163:63"><name pos:start="163:62" pos:end="163:63">re</name></expr></argument>, <argument pos:start="163:66" pos:end="163:71"><expr pos:start="163:66" pos:end="163:71"><operator pos:start="163:66" pos:end="163:66">&amp;</operator><name pos:start="163:67" pos:end="163:71"><name pos:start="163:67" pos:end="163:67">s</name><operator pos:start="163:68" pos:end="163:69">-&gt;</operator><name pos:start="163:70" pos:end="163:71">gb</name></name></expr></argument>, <argument pos:start="163:74" pos:end="163:74"><expr pos:start="163:74" pos:end="163:74"><literal type="number" pos:start="163:74" pos:end="163:74">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="165:21" pos:end="165:45"><expr pos:start="165:21" pos:end="165:44"><call pos:start="165:21" pos:end="165:44"><name pos:start="165:21" pos:end="165:32">UPDATE_CACHE</name><argument_list pos:start="165:33" pos:end="165:44">(<argument pos:start="165:34" pos:end="165:35"><expr pos:start="165:34" pos:end="165:35"><name pos:start="165:34" pos:end="165:35">re</name></expr></argument>, <argument pos:start="165:38" pos:end="165:43"><expr pos:start="165:38" pos:end="165:43"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:43"><name pos:start="165:39" pos:end="165:39">s</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="167:21" pos:end="288:0"><if pos:start="167:21" pos:end="177:21">if<condition pos:start="167:23" pos:end="167:45">(<expr pos:start="167:24" pos:end="167:44"><name pos:start="167:24" pos:end="167:41"><name pos:start="167:24" pos:end="167:24">s</name><operator pos:start="167:25" pos:end="167:26">-&gt;</operator><name pos:start="167:27" pos:end="167:41">msmpeg4_version</name></name><operator pos:start="167:42" pos:end="167:43">&lt;=</operator><literal type="number" pos:start="167:44" pos:end="167:44">3</literal></expr>)</condition><block pos:start="167:46" pos:end="177:21">{<block_content pos:start="169:25" pos:end="175:56">

                        <expr_stmt pos:start="169:25" pos:end="169:57"><expr pos:start="169:25" pos:end="169:56"><name pos:start="169:25" pos:end="169:28">last</name><operator pos:start="169:29" pos:end="169:29">=</operator>  <call pos:start="169:32" pos:end="169:56"><name pos:start="169:32" pos:end="169:41">SHOW_UBITS</name><argument_list pos:start="169:42" pos:end="169:56">(<argument pos:start="169:43" pos:end="169:44"><expr pos:start="169:43" pos:end="169:44"><name pos:start="169:43" pos:end="169:44">re</name></expr></argument>, <argument pos:start="169:47" pos:end="169:52"><expr pos:start="169:47" pos:end="169:52"><operator pos:start="169:47" pos:end="169:47">&amp;</operator><name pos:start="169:48" pos:end="169:52"><name pos:start="169:48" pos:end="169:48">s</name><operator pos:start="169:49" pos:end="169:50">-&gt;</operator><name pos:start="169:51" pos:end="169:52">gb</name></name></expr></argument>, <argument pos:start="169:55" pos:end="169:55"><expr pos:start="169:55" pos:end="169:55"><literal type="number" pos:start="169:55" pos:end="169:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="169:59" pos:end="169:84"><expr pos:start="169:59" pos:end="169:83"><call pos:start="169:59" pos:end="169:83"><name pos:start="169:59" pos:end="169:68">SKIP_CACHE</name><argument_list pos:start="169:69" pos:end="169:83">(<argument pos:start="169:70" pos:end="169:71"><expr pos:start="169:70" pos:end="169:71"><name pos:start="169:70" pos:end="169:71">re</name></expr></argument>, <argument pos:start="169:74" pos:end="169:79"><expr pos:start="169:74" pos:end="169:79"><operator pos:start="169:74" pos:end="169:74">&amp;</operator><name pos:start="169:75" pos:end="169:79"><name pos:start="169:75" pos:end="169:75">s</name><operator pos:start="169:76" pos:end="169:77">-&gt;</operator><name pos:start="169:78" pos:end="169:79">gb</name></name></expr></argument>, <argument pos:start="169:82" pos:end="169:82"><expr pos:start="169:82" pos:end="169:82"><literal type="number" pos:start="169:82" pos:end="169:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="171:25" pos:end="171:57"><expr pos:start="171:25" pos:end="171:56"><name pos:start="171:25" pos:end="171:27">run</name><operator pos:start="171:28" pos:end="171:28">=</operator>   <call pos:start="171:32" pos:end="171:56"><name pos:start="171:32" pos:end="171:41">SHOW_UBITS</name><argument_list pos:start="171:42" pos:end="171:56">(<argument pos:start="171:43" pos:end="171:44"><expr pos:start="171:43" pos:end="171:44"><name pos:start="171:43" pos:end="171:44">re</name></expr></argument>, <argument pos:start="171:47" pos:end="171:52"><expr pos:start="171:47" pos:end="171:52"><operator pos:start="171:47" pos:end="171:47">&amp;</operator><name pos:start="171:48" pos:end="171:52"><name pos:start="171:48" pos:end="171:48">s</name><operator pos:start="171:49" pos:end="171:50">-&gt;</operator><name pos:start="171:51" pos:end="171:52">gb</name></name></expr></argument>, <argument pos:start="171:55" pos:end="171:55"><expr pos:start="171:55" pos:end="171:55"><literal type="number" pos:start="171:55" pos:end="171:55">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="171:59" pos:end="171:84"><expr pos:start="171:59" pos:end="171:83"><call pos:start="171:59" pos:end="171:83"><name pos:start="171:59" pos:end="171:68">SKIP_CACHE</name><argument_list pos:start="171:69" pos:end="171:83">(<argument pos:start="171:70" pos:end="171:71"><expr pos:start="171:70" pos:end="171:71"><name pos:start="171:70" pos:end="171:71">re</name></expr></argument>, <argument pos:start="171:74" pos:end="171:79"><expr pos:start="171:74" pos:end="171:79"><operator pos:start="171:74" pos:end="171:74">&amp;</operator><name pos:start="171:75" pos:end="171:79"><name pos:start="171:75" pos:end="171:75">s</name><operator pos:start="171:76" pos:end="171:77">-&gt;</operator><name pos:start="171:78" pos:end="171:79">gb</name></name></expr></argument>, <argument pos:start="171:82" pos:end="171:82"><expr pos:start="171:82" pos:end="171:82"><literal type="number" pos:start="171:82" pos:end="171:82">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="173:25" pos:end="173:57"><expr pos:start="173:25" pos:end="173:56"><name pos:start="173:25" pos:end="173:29">level</name><operator pos:start="173:30" pos:end="173:30">=</operator> <call pos:start="173:32" pos:end="173:56"><name pos:start="173:32" pos:end="173:41">SHOW_SBITS</name><argument_list pos:start="173:42" pos:end="173:56">(<argument pos:start="173:43" pos:end="173:44"><expr pos:start="173:43" pos:end="173:44"><name pos:start="173:43" pos:end="173:44">re</name></expr></argument>, <argument pos:start="173:47" pos:end="173:52"><expr pos:start="173:47" pos:end="173:52"><operator pos:start="173:47" pos:end="173:47">&amp;</operator><name pos:start="173:48" pos:end="173:52"><name pos:start="173:48" pos:end="173:48">s</name><operator pos:start="173:49" pos:end="173:50">-&gt;</operator><name pos:start="173:51" pos:end="173:52">gb</name></name></expr></argument>, <argument pos:start="173:55" pos:end="173:55"><expr pos:start="173:55" pos:end="173:55"><literal type="number" pos:start="173:55" pos:end="173:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="175:25" pos:end="175:56"><expr pos:start="175:25" pos:end="175:55"><call pos:start="175:25" pos:end="175:55"><name pos:start="175:25" pos:end="175:36">SKIP_COUNTER</name><argument_list pos:start="175:37" pos:end="175:55">(<argument pos:start="175:38" pos:end="175:39"><expr pos:start="175:38" pos:end="175:39"><name pos:start="175:38" pos:end="175:39">re</name></expr></argument>, <argument pos:start="175:42" pos:end="175:47"><expr pos:start="175:42" pos:end="175:47"><operator pos:start="175:42" pos:end="175:42">&amp;</operator><name pos:start="175:43" pos:end="175:47"><name pos:start="175:43" pos:end="175:43">s</name><operator pos:start="175:44" pos:end="175:45">-&gt;</operator><name pos:start="175:46" pos:end="175:47">gb</name></name></expr></argument>, <argument pos:start="175:50" pos:end="175:54"><expr pos:start="175:50" pos:end="175:54"><literal type="number" pos:start="175:50" pos:end="175:51">1</literal><operator pos:start="175:51" pos:end="175:51">+</operator><literal type="number" pos:start="175:52" pos:end="175:53">6</literal><operator pos:start="175:53" pos:end="175:53">+</operator><literal type="number" pos:start="175:54" pos:end="175:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="177:22" pos:end="288:0">else<block pos:start="177:26" pos:end="288:0">{<block_content pos:start="179:25" pos:end="243:47">

                        <decl_stmt pos:start="179:25" pos:end="179:33"><decl pos:start="179:25" pos:end="179:32"><type pos:start="179:25" pos:end="179:27"><name pos:start="179:25" pos:end="179:27">int</name></type> <name pos:start="179:29" pos:end="179:32">sign</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="181:25" pos:end="181:57"><expr pos:start="181:25" pos:end="181:56"><name pos:start="181:25" pos:end="181:28">last</name><operator pos:start="181:29" pos:end="181:29">=</operator>  <call pos:start="181:32" pos:end="181:56"><name pos:start="181:32" pos:end="181:41">SHOW_UBITS</name><argument_list pos:start="181:42" pos:end="181:56">(<argument pos:start="181:43" pos:end="181:44"><expr pos:start="181:43" pos:end="181:44"><name pos:start="181:43" pos:end="181:44">re</name></expr></argument>, <argument pos:start="181:47" pos:end="181:52"><expr pos:start="181:47" pos:end="181:52"><operator pos:start="181:47" pos:end="181:47">&amp;</operator><name pos:start="181:48" pos:end="181:52"><name pos:start="181:48" pos:end="181:48">s</name><operator pos:start="181:49" pos:end="181:50">-&gt;</operator><name pos:start="181:51" pos:end="181:52">gb</name></name></expr></argument>, <argument pos:start="181:55" pos:end="181:55"><expr pos:start="181:55" pos:end="181:55"><literal type="number" pos:start="181:55" pos:end="181:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="181:59" pos:end="181:83"><expr pos:start="181:59" pos:end="181:82"><call pos:start="181:59" pos:end="181:82"><name pos:start="181:59" pos:end="181:67">SKIP_BITS</name><argument_list pos:start="181:68" pos:end="181:82">(<argument pos:start="181:69" pos:end="181:70"><expr pos:start="181:69" pos:end="181:70"><name pos:start="181:69" pos:end="181:70">re</name></expr></argument>, <argument pos:start="181:73" pos:end="181:78"><expr pos:start="181:73" pos:end="181:78"><operator pos:start="181:73" pos:end="181:73">&amp;</operator><name pos:start="181:74" pos:end="181:78"><name pos:start="181:74" pos:end="181:74">s</name><operator pos:start="181:75" pos:end="181:76">-&gt;</operator><name pos:start="181:77" pos:end="181:78">gb</name></name></expr></argument>, <argument pos:start="181:81" pos:end="181:81"><expr pos:start="181:81" pos:end="181:81"><literal type="number" pos:start="181:81" pos:end="181:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="183:25" pos:end="225:25"><if pos:start="183:25" pos:end="225:25">if<condition pos:start="183:27" pos:end="183:49">(<expr pos:start="183:28" pos:end="183:48"><operator pos:start="183:28" pos:end="183:28">!</operator><name pos:start="183:29" pos:end="183:48"><name pos:start="183:29" pos:end="183:29">s</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:48">esc3_level_length</name></name></expr>)</condition><block pos:start="183:50" pos:end="225:25">{<block_content pos:start="185:29" pos:end="223:53">

                            <decl_stmt pos:start="185:29" pos:end="185:35"><decl pos:start="185:29" pos:end="185:34"><type pos:start="185:29" pos:end="185:31"><name pos:start="185:29" pos:end="185:31">int</name></type> <name pos:start="185:33" pos:end="185:34">ll</name></decl>;</decl_stmt>

                            <expr_stmt pos:start="187:29" pos:end="189:77"><expr pos:start="187:29" pos:end="189:76"><call pos:start="187:29" pos:end="189:76"><name pos:start="187:29" pos:end="187:35">av_dlog</name><argument_list pos:start="187:36" pos:end="189:76">(<argument pos:start="187:37" pos:end="187:44"><expr pos:start="187:37" pos:end="187:44"><name pos:start="187:37" pos:end="187:44"><name pos:start="187:37" pos:end="187:37">s</name><operator pos:start="187:38" pos:end="187:39">-&gt;</operator><name pos:start="187:40" pos:end="187:44">avctx</name></name></expr></argument>, <argument pos:start="187:47" pos:end="187:67"><expr pos:start="187:47" pos:end="187:67"><literal type="string" pos:start="187:47" pos:end="187:67">"ESC-3 %X at %d %d\n"</literal></expr></argument>,

                                    <argument pos:start="189:37" pos:end="189:57"><expr pos:start="189:37" pos:end="189:57"><call pos:start="189:37" pos:end="189:57"><name pos:start="189:37" pos:end="189:45">show_bits</name><argument_list pos:start="189:46" pos:end="189:57">(<argument pos:start="189:47" pos:end="189:52"><expr pos:start="189:47" pos:end="189:52"><operator pos:start="189:47" pos:end="189:47">&amp;</operator><name pos:start="189:48" pos:end="189:52"><name pos:start="189:48" pos:end="189:48">s</name><operator pos:start="189:49" pos:end="189:50">-&gt;</operator><name pos:start="189:51" pos:end="189:52">gb</name></name></expr></argument>, <argument pos:start="189:55" pos:end="189:56"><expr pos:start="189:55" pos:end="189:56"><literal type="number" pos:start="189:55" pos:end="189:56">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="189:60" pos:end="189:66"><expr pos:start="189:60" pos:end="189:66"><name pos:start="189:60" pos:end="189:66"><name pos:start="189:60" pos:end="189:60">s</name><operator pos:start="189:61" pos:end="189:62">-&gt;</operator><name pos:start="189:63" pos:end="189:66">mb_x</name></name></expr></argument>, <argument pos:start="189:69" pos:end="189:75"><expr pos:start="189:69" pos:end="189:75"><name pos:start="189:69" pos:end="189:75"><name pos:start="189:69" pos:end="189:69">s</name><operator pos:start="189:70" pos:end="189:71">-&gt;</operator><name pos:start="189:72" pos:end="189:75">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="191:29" pos:end="215:29"><if pos:start="191:29" pos:end="201:29">if<condition pos:start="191:31" pos:end="191:43">(<expr pos:start="191:32" pos:end="191:42"><name pos:start="191:32" pos:end="191:40"><name pos:start="191:32" pos:end="191:32">s</name><operator pos:start="191:33" pos:end="191:34">-&gt;</operator><name pos:start="191:35" pos:end="191:40">qscale</name></name><operator pos:start="191:41" pos:end="191:41">&lt;</operator><literal type="number" pos:start="191:42" pos:end="191:42">8</literal></expr>)</condition><block pos:start="191:44" pos:end="201:29">{<block_content pos:start="193:33" pos:end="199:33">

                                <expr_stmt pos:start="193:33" pos:end="193:62"><expr pos:start="193:33" pos:end="193:61"><name pos:start="193:33" pos:end="193:34">ll</name><operator pos:start="193:35" pos:end="193:35">=</operator> <call pos:start="193:37" pos:end="193:61"><name pos:start="193:37" pos:end="193:46">SHOW_UBITS</name><argument_list pos:start="193:47" pos:end="193:61">(<argument pos:start="193:48" pos:end="193:49"><expr pos:start="193:48" pos:end="193:49"><name pos:start="193:48" pos:end="193:49">re</name></expr></argument>, <argument pos:start="193:52" pos:end="193:57"><expr pos:start="193:52" pos:end="193:57"><operator pos:start="193:52" pos:end="193:52">&amp;</operator><name pos:start="193:53" pos:end="193:57"><name pos:start="193:53" pos:end="193:53">s</name><operator pos:start="193:54" pos:end="193:55">-&gt;</operator><name pos:start="193:56" pos:end="193:57">gb</name></name></expr></argument>, <argument pos:start="193:60" pos:end="193:60"><expr pos:start="193:60" pos:end="193:60"><literal type="number" pos:start="193:60" pos:end="193:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="193:64" pos:end="193:88"><expr pos:start="193:64" pos:end="193:87"><call pos:start="193:64" pos:end="193:87"><name pos:start="193:64" pos:end="193:72">SKIP_BITS</name><argument_list pos:start="193:73" pos:end="193:87">(<argument pos:start="193:74" pos:end="193:75"><expr pos:start="193:74" pos:end="193:75"><name pos:start="193:74" pos:end="193:75">re</name></expr></argument>, <argument pos:start="193:78" pos:end="193:83"><expr pos:start="193:78" pos:end="193:83"><operator pos:start="193:78" pos:end="193:78">&amp;</operator><name pos:start="193:79" pos:end="193:83"><name pos:start="193:79" pos:end="193:79">s</name><operator pos:start="193:80" pos:end="193:81">-&gt;</operator><name pos:start="193:82" pos:end="193:83">gb</name></name></expr></argument>, <argument pos:start="193:86" pos:end="193:86"><expr pos:start="193:86" pos:end="193:86"><literal type="number" pos:start="193:86" pos:end="193:86">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="195:33" pos:end="199:33"><if pos:start="195:33" pos:end="199:33">if<condition pos:start="195:35" pos:end="195:41">(<expr pos:start="195:36" pos:end="195:40"><name pos:start="195:36" pos:end="195:37">ll</name><operator pos:start="195:38" pos:end="195:39">==</operator><literal type="number" pos:start="195:40" pos:end="195:40">0</literal></expr>)</condition><block pos:start="195:42" pos:end="199:33">{<block_content pos:start="197:37" pos:end="197:94">

                                    <expr_stmt pos:start="197:37" pos:end="197:68"><expr pos:start="197:37" pos:end="197:67"><name pos:start="197:37" pos:end="197:38">ll</name><operator pos:start="197:39" pos:end="197:39">=</operator> <literal type="number" pos:start="197:41" pos:end="197:42">8</literal><operator pos:start="197:42" pos:end="197:42">+</operator><call pos:start="197:43" pos:end="197:67"><name pos:start="197:43" pos:end="197:52">SHOW_UBITS</name><argument_list pos:start="197:53" pos:end="197:67">(<argument pos:start="197:54" pos:end="197:55"><expr pos:start="197:54" pos:end="197:55"><name pos:start="197:54" pos:end="197:55">re</name></expr></argument>, <argument pos:start="197:58" pos:end="197:63"><expr pos:start="197:58" pos:end="197:63"><operator pos:start="197:58" pos:end="197:58">&amp;</operator><name pos:start="197:59" pos:end="197:63"><name pos:start="197:59" pos:end="197:59">s</name><operator pos:start="197:60" pos:end="197:61">-&gt;</operator><name pos:start="197:62" pos:end="197:63">gb</name></name></expr></argument>, <argument pos:start="197:66" pos:end="197:66"><expr pos:start="197:66" pos:end="197:66"><literal type="number" pos:start="197:66" pos:end="197:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="197:70" pos:end="197:94"><expr pos:start="197:70" pos:end="197:93"><call pos:start="197:70" pos:end="197:93"><name pos:start="197:70" pos:end="197:78">SKIP_BITS</name><argument_list pos:start="197:79" pos:end="197:93">(<argument pos:start="197:80" pos:end="197:81"><expr pos:start="197:80" pos:end="197:81"><name pos:start="197:80" pos:end="197:81">re</name></expr></argument>, <argument pos:start="197:84" pos:end="197:89"><expr pos:start="197:84" pos:end="197:89"><operator pos:start="197:84" pos:end="197:84">&amp;</operator><name pos:start="197:85" pos:end="197:89"><name pos:start="197:85" pos:end="197:85">s</name><operator pos:start="197:86" pos:end="197:87">-&gt;</operator><name pos:start="197:88" pos:end="197:89">gb</name></name></expr></argument>, <argument pos:start="197:92" pos:end="197:92"><expr pos:start="197:92" pos:end="197:92"><literal type="number" pos:start="197:92" pos:end="197:92">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if><else pos:start="201:30" pos:end="215:29">else<block pos:start="201:34" pos:end="215:29">{<block_content pos:start="203:33" pos:end="213:66">

                                <expr_stmt pos:start="203:33" pos:end="203:37"><expr pos:start="203:33" pos:end="203:36"><name pos:start="203:33" pos:end="203:34">ll</name><operator pos:start="203:35" pos:end="203:35">=</operator><literal type="number" pos:start="203:36" pos:end="203:36">2</literal></expr>;</expr_stmt>

                                <while pos:start="205:33" pos:end="211:33">while<condition pos:start="205:38" pos:end="205:75">(<expr pos:start="205:39" pos:end="205:74"><name pos:start="205:39" pos:end="205:40">ll</name><operator pos:start="205:41" pos:end="205:41">&lt;</operator><literal type="number" pos:start="205:42" pos:end="205:42">8</literal> <operator pos:start="205:44" pos:end="205:45">&amp;&amp;</operator> <call pos:start="205:47" pos:end="205:71"><name pos:start="205:47" pos:end="205:56">SHOW_UBITS</name><argument_list pos:start="205:57" pos:end="205:71">(<argument pos:start="205:58" pos:end="205:59"><expr pos:start="205:58" pos:end="205:59"><name pos:start="205:58" pos:end="205:59">re</name></expr></argument>, <argument pos:start="205:62" pos:end="205:67"><expr pos:start="205:62" pos:end="205:67"><operator pos:start="205:62" pos:end="205:62">&amp;</operator><name pos:start="205:63" pos:end="205:67"><name pos:start="205:63" pos:end="205:63">s</name><operator pos:start="205:64" pos:end="205:65">-&gt;</operator><name pos:start="205:66" pos:end="205:67">gb</name></name></expr></argument>, <argument pos:start="205:70" pos:end="205:70"><expr pos:start="205:70" pos:end="205:70"><literal type="number" pos:start="205:70" pos:end="205:70">1</literal></expr></argument>)</argument_list></call><operator pos:start="205:72" pos:end="205:73">==</operator><literal type="number" pos:start="205:74" pos:end="205:74">0</literal></expr>)</condition><block pos:start="205:76" pos:end="211:33">{<block_content pos:start="207:37" pos:end="209:61">

                                    <expr_stmt pos:start="207:37" pos:end="207:41"><expr pos:start="207:37" pos:end="207:40"><name pos:start="207:37" pos:end="207:38">ll</name><operator pos:start="207:39" pos:end="207:40">++</operator></expr>;</expr_stmt>

                                    <expr_stmt pos:start="209:37" pos:end="209:61"><expr pos:start="209:37" pos:end="209:60"><call pos:start="209:37" pos:end="209:60"><name pos:start="209:37" pos:end="209:45">SKIP_BITS</name><argument_list pos:start="209:46" pos:end="209:60">(<argument pos:start="209:47" pos:end="209:48"><expr pos:start="209:47" pos:end="209:48"><name pos:start="209:47" pos:end="209:48">re</name></expr></argument>, <argument pos:start="209:51" pos:end="209:56"><expr pos:start="209:51" pos:end="209:56"><operator pos:start="209:51" pos:end="209:51">&amp;</operator><name pos:start="209:52" pos:end="209:56"><name pos:start="209:52" pos:end="209:52">s</name><operator pos:start="209:53" pos:end="209:54">-&gt;</operator><name pos:start="209:55" pos:end="209:56">gb</name></name></expr></argument>, <argument pos:start="209:59" pos:end="209:59"><expr pos:start="209:59" pos:end="209:59"><literal type="number" pos:start="209:59" pos:end="209:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></while>

                                <if_stmt pos:start="213:33" pos:end="213:66"><if pos:start="213:33" pos:end="213:66">if<condition pos:start="213:35" pos:end="213:40">(<expr pos:start="213:36" pos:end="213:39"><name pos:start="213:36" pos:end="213:37">ll</name><operator pos:start="213:38" pos:end="213:38">&lt;</operator><literal type="number" pos:start="213:39" pos:end="213:39">8</literal></expr>)</condition><block type="pseudo" pos:start="213:42" pos:end="213:66"><block_content pos:start="213:42" pos:end="213:66"> <expr_stmt pos:start="213:42" pos:end="213:66"><expr pos:start="213:42" pos:end="213:65"><call pos:start="213:42" pos:end="213:65"><name pos:start="213:42" pos:end="213:50">SKIP_BITS</name><argument_list pos:start="213:51" pos:end="213:65">(<argument pos:start="213:52" pos:end="213:53"><expr pos:start="213:52" pos:end="213:53"><name pos:start="213:52" pos:end="213:53">re</name></expr></argument>, <argument pos:start="213:56" pos:end="213:61"><expr pos:start="213:56" pos:end="213:61"><operator pos:start="213:56" pos:end="213:56">&amp;</operator><name pos:start="213:57" pos:end="213:61"><name pos:start="213:57" pos:end="213:57">s</name><operator pos:start="213:58" pos:end="213:59">-&gt;</operator><name pos:start="213:60" pos:end="213:61">gb</name></name></expr></argument>, <argument pos:start="213:64" pos:end="213:64"><expr pos:start="213:64" pos:end="213:64"><literal type="number" pos:start="213:64" pos:end="213:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>



                            <expr_stmt pos:start="219:29" pos:end="219:53"><expr pos:start="219:29" pos:end="219:52"><name pos:start="219:29" pos:end="219:48"><name pos:start="219:29" pos:end="219:29">s</name><operator pos:start="219:30" pos:end="219:31">-&gt;</operator><name pos:start="219:32" pos:end="219:48">esc3_level_length</name></name><operator pos:start="219:49" pos:end="219:49">=</operator> <name pos:start="219:51" pos:end="219:52">ll</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="221:29" pos:end="221:78"><expr pos:start="221:29" pos:end="221:77"><name pos:start="221:29" pos:end="221:46"><name pos:start="221:29" pos:end="221:29">s</name><operator pos:start="221:30" pos:end="221:31">-&gt;</operator><name pos:start="221:32" pos:end="221:46">esc3_run_length</name></name><operator pos:start="221:47" pos:end="221:47">=</operator> <call pos:start="221:49" pos:end="221:73"><name pos:start="221:49" pos:end="221:58">SHOW_UBITS</name><argument_list pos:start="221:59" pos:end="221:73">(<argument pos:start="221:60" pos:end="221:61"><expr pos:start="221:60" pos:end="221:61"><name pos:start="221:60" pos:end="221:61">re</name></expr></argument>, <argument pos:start="221:64" pos:end="221:69"><expr pos:start="221:64" pos:end="221:69"><operator pos:start="221:64" pos:end="221:64">&amp;</operator><name pos:start="221:65" pos:end="221:69"><name pos:start="221:65" pos:end="221:65">s</name><operator pos:start="221:66" pos:end="221:67">-&gt;</operator><name pos:start="221:68" pos:end="221:69">gb</name></name></expr></argument>, <argument pos:start="221:72" pos:end="221:72"><expr pos:start="221:72" pos:end="221:72"><literal type="number" pos:start="221:72" pos:end="221:72">2</literal></expr></argument>)</argument_list></call> <operator pos:start="221:75" pos:end="221:75">+</operator> <literal type="number" pos:start="221:77" pos:end="221:77">3</literal></expr>;</expr_stmt> <expr_stmt pos:start="221:80" pos:end="221:104"><expr pos:start="221:80" pos:end="221:103"><call pos:start="221:80" pos:end="221:103"><name pos:start="221:80" pos:end="221:88">SKIP_BITS</name><argument_list pos:start="221:89" pos:end="221:103">(<argument pos:start="221:90" pos:end="221:91"><expr pos:start="221:90" pos:end="221:91"><name pos:start="221:90" pos:end="221:91">re</name></expr></argument>, <argument pos:start="221:94" pos:end="221:99"><expr pos:start="221:94" pos:end="221:99"><operator pos:start="221:94" pos:end="221:94">&amp;</operator><name pos:start="221:95" pos:end="221:99"><name pos:start="221:95" pos:end="221:95">s</name><operator pos:start="221:96" pos:end="221:97">-&gt;</operator><name pos:start="221:98" pos:end="221:99">gb</name></name></expr></argument>, <argument pos:start="221:102" pos:end="221:102"><expr pos:start="221:102" pos:end="221:102"><literal type="number" pos:start="221:102" pos:end="221:102">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="223:29" pos:end="223:53"><expr pos:start="223:29" pos:end="223:52"><call pos:start="223:29" pos:end="223:52"><name pos:start="223:29" pos:end="223:40">UPDATE_CACHE</name><argument_list pos:start="223:41" pos:end="223:52">(<argument pos:start="223:42" pos:end="223:43"><expr pos:start="223:42" pos:end="223:43"><name pos:start="223:42" pos:end="223:43">re</name></expr></argument>, <argument pos:start="223:46" pos:end="223:51"><expr pos:start="223:46" pos:end="223:51"><operator pos:start="223:46" pos:end="223:46">&amp;</operator><name pos:start="223:47" pos:end="223:51"><name pos:start="223:47" pos:end="223:47">s</name><operator pos:start="223:48" pos:end="223:49">-&gt;</operator><name pos:start="223:50" pos:end="223:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="227:25" pos:end="227:74"><expr pos:start="227:25" pos:end="227:73"><name pos:start="227:25" pos:end="227:27">run</name><operator pos:start="227:28" pos:end="227:28">=</operator>   <call pos:start="227:32" pos:end="227:73"><name pos:start="227:32" pos:end="227:41">SHOW_UBITS</name><argument_list pos:start="227:42" pos:end="227:73">(<argument pos:start="227:43" pos:end="227:44"><expr pos:start="227:43" pos:end="227:44"><name pos:start="227:43" pos:end="227:44">re</name></expr></argument>, <argument pos:start="227:47" pos:end="227:52"><expr pos:start="227:47" pos:end="227:52"><operator pos:start="227:47" pos:end="227:47">&amp;</operator><name pos:start="227:48" pos:end="227:52"><name pos:start="227:48" pos:end="227:48">s</name><operator pos:start="227:49" pos:end="227:50">-&gt;</operator><name pos:start="227:51" pos:end="227:52">gb</name></name></expr></argument>, <argument pos:start="227:55" pos:end="227:72"><expr pos:start="227:55" pos:end="227:72"><name pos:start="227:55" pos:end="227:72"><name pos:start="227:55" pos:end="227:55">s</name><operator pos:start="227:56" pos:end="227:57">-&gt;</operator><name pos:start="227:58" pos:end="227:72">esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="229:25" pos:end="229:66"><expr pos:start="229:25" pos:end="229:65"><call pos:start="229:25" pos:end="229:65"><name pos:start="229:25" pos:end="229:33">SKIP_BITS</name><argument_list pos:start="229:34" pos:end="229:65">(<argument pos:start="229:35" pos:end="229:36"><expr pos:start="229:35" pos:end="229:36"><name pos:start="229:35" pos:end="229:36">re</name></expr></argument>, <argument pos:start="229:39" pos:end="229:44"><expr pos:start="229:39" pos:end="229:44"><operator pos:start="229:39" pos:end="229:39">&amp;</operator><name pos:start="229:40" pos:end="229:44"><name pos:start="229:40" pos:end="229:40">s</name><operator pos:start="229:41" pos:end="229:42">-&gt;</operator><name pos:start="229:43" pos:end="229:44">gb</name></name></expr></argument>, <argument pos:start="229:47" pos:end="229:64"><expr pos:start="229:47" pos:end="229:64"><name pos:start="229:47" pos:end="229:64"><name pos:start="229:47" pos:end="229:47">s</name><operator pos:start="229:48" pos:end="229:49">-&gt;</operator><name pos:start="229:50" pos:end="229:64">esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="233:25" pos:end="233:57"><expr pos:start="233:25" pos:end="233:56"><name pos:start="233:25" pos:end="233:28">sign</name><operator pos:start="233:29" pos:end="233:29">=</operator>  <call pos:start="233:32" pos:end="233:56"><name pos:start="233:32" pos:end="233:41">SHOW_UBITS</name><argument_list pos:start="233:42" pos:end="233:56">(<argument pos:start="233:43" pos:end="233:44"><expr pos:start="233:43" pos:end="233:44"><name pos:start="233:43" pos:end="233:44">re</name></expr></argument>, <argument pos:start="233:47" pos:end="233:52"><expr pos:start="233:47" pos:end="233:52"><operator pos:start="233:47" pos:end="233:47">&amp;</operator><name pos:start="233:48" pos:end="233:52"><name pos:start="233:48" pos:end="233:48">s</name><operator pos:start="233:49" pos:end="233:50">-&gt;</operator><name pos:start="233:51" pos:end="233:52">gb</name></name></expr></argument>, <argument pos:start="233:55" pos:end="233:55"><expr pos:start="233:55" pos:end="233:55"><literal type="number" pos:start="233:55" pos:end="233:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="235:25" pos:end="235:49"><expr pos:start="235:25" pos:end="235:48"><call pos:start="235:25" pos:end="235:48"><name pos:start="235:25" pos:end="235:33">SKIP_BITS</name><argument_list pos:start="235:34" pos:end="235:48">(<argument pos:start="235:35" pos:end="235:36"><expr pos:start="235:35" pos:end="235:36"><name pos:start="235:35" pos:end="235:36">re</name></expr></argument>, <argument pos:start="235:39" pos:end="235:44"><expr pos:start="235:39" pos:end="235:44"><operator pos:start="235:39" pos:end="235:39">&amp;</operator><name pos:start="235:40" pos:end="235:44"><name pos:start="235:40" pos:end="235:40">s</name><operator pos:start="235:41" pos:end="235:42">-&gt;</operator><name pos:start="235:43" pos:end="235:44">gb</name></name></expr></argument>, <argument pos:start="235:47" pos:end="235:47"><expr pos:start="235:47" pos:end="235:47"><literal type="number" pos:start="235:47" pos:end="235:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="239:25" pos:end="239:76"><expr pos:start="239:25" pos:end="239:75"><name pos:start="239:25" pos:end="239:29">level</name><operator pos:start="239:30" pos:end="239:30">=</operator> <call pos:start="239:32" pos:end="239:75"><name pos:start="239:32" pos:end="239:41">SHOW_UBITS</name><argument_list pos:start="239:42" pos:end="239:75">(<argument pos:start="239:43" pos:end="239:44"><expr pos:start="239:43" pos:end="239:44"><name pos:start="239:43" pos:end="239:44">re</name></expr></argument>, <argument pos:start="239:47" pos:end="239:52"><expr pos:start="239:47" pos:end="239:52"><operator pos:start="239:47" pos:end="239:47">&amp;</operator><name pos:start="239:48" pos:end="239:52"><name pos:start="239:48" pos:end="239:48">s</name><operator pos:start="239:49" pos:end="239:50">-&gt;</operator><name pos:start="239:51" pos:end="239:52">gb</name></name></expr></argument>, <argument pos:start="239:55" pos:end="239:74"><expr pos:start="239:55" pos:end="239:74"><name pos:start="239:55" pos:end="239:74"><name pos:start="239:55" pos:end="239:55">s</name><operator pos:start="239:56" pos:end="239:57">-&gt;</operator><name pos:start="239:58" pos:end="239:74">esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="241:25" pos:end="241:68"><expr pos:start="241:25" pos:end="241:67"><call pos:start="241:25" pos:end="241:67"><name pos:start="241:25" pos:end="241:33">SKIP_BITS</name><argument_list pos:start="241:34" pos:end="241:67">(<argument pos:start="241:35" pos:end="241:36"><expr pos:start="241:35" pos:end="241:36"><name pos:start="241:35" pos:end="241:36">re</name></expr></argument>, <argument pos:start="241:39" pos:end="241:44"><expr pos:start="241:39" pos:end="241:44"><operator pos:start="241:39" pos:end="241:39">&amp;</operator><name pos:start="241:40" pos:end="241:44"><name pos:start="241:40" pos:end="241:40">s</name><operator pos:start="241:41" pos:end="241:42">-&gt;</operator><name pos:start="241:43" pos:end="241:44">gb</name></name></expr></argument>, <argument pos:start="241:47" pos:end="241:66"><expr pos:start="241:47" pos:end="241:66"><name pos:start="241:47" pos:end="241:66"><name pos:start="241:47" pos:end="241:47">s</name><operator pos:start="241:48" pos:end="241:49">-&gt;</operator><name pos:start="241:50" pos:end="241:66">esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="243:25" pos:end="243:47"><if pos:start="243:25" pos:end="243:47">if<condition pos:start="243:27" pos:end="243:32">(<expr pos:start="243:28" pos:end="243:31"><name pos:start="243:28" pos:end="243:31">sign</name></expr>)</condition><block type="pseudo" pos:start="243:34" pos:end="243:47"><block_content pos:start="243:34" pos:end="243:47"> <expr_stmt pos:start="243:34" pos:end="243:47"><expr pos:start="243:34" pos:end="243:46"><name pos:start="243:34" pos:end="243:38">level</name><operator pos:start="243:39" pos:end="243:39">=</operator> <operator pos:start="243:41" pos:end="243:41">-</operator><name pos:start="243:42" pos:end="243:46">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>



<cpp:if pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:5"><literal type="number" pos:start="249:5" pos:end="249:5">0</literal></expr></cpp:if> <comment type="line" pos:start="249:7" pos:end="249:57">// waste of time / this will detect very few errors</comment>

                    {

                        const int abs_level= FFABS(level);

                        const int run1= run - rl-&gt;max_run[last][abs_level] - run_diff;

                        if(abs_level&lt;=MAX_LEVEL &amp;&amp; run&lt;=MAX_RUN){

                            if(abs_level &lt;= rl-&gt;max_level[last][run]){

                                av_log(s-&gt;avctx, AV_LOG_ERROR, "illegal 3. esc, vlc encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                            if(abs_level &lt;= rl-&gt;max_level[last][run]*2){

                                av_log(s-&gt;avctx, AV_LOG_ERROR, "illegal 3. esc, esc 1 encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                            if(run1&gt;=0 &amp;&amp; abs_level &lt;= rl-&gt;max_level[last][run1]){

                                av_log(s-&gt;avctx, AV_LOG_ERROR, "illegal 3. esc, esc 2 encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                        }

                    }

<cpp:endif pos:start="287:1" pos:end="287:6">#<cpp:directive pos:start="287:2" pos:end="287:6">endif</cpp:directive></cpp:endif>

                    <comment type="line" pos:start="289:21" pos:end="289:83">//level = level * qmul + (level&gt;0) * qadd - (level&lt;=0) * qadd ;</comment>

                    <if_stmt pos:start="291:21" pos:end="306:0"><if pos:start="291:21" pos:end="291:60">if <condition pos:start="291:24" pos:end="291:32">(<expr pos:start="291:25" pos:end="291:31"><name pos:start="291:25" pos:end="291:29">level</name><operator pos:start="291:30" pos:end="291:30">&gt;</operator><literal type="number" pos:start="291:31" pos:end="291:31">0</literal></expr>)</condition><block type="pseudo" pos:start="291:34" pos:end="291:60"><block_content pos:start="291:34" pos:end="291:60"> <expr_stmt pos:start="291:34" pos:end="291:60"><expr pos:start="291:34" pos:end="291:59"><name pos:start="291:34" pos:end="291:38">level</name><operator pos:start="291:39" pos:end="291:39">=</operator> <name pos:start="291:41" pos:end="291:45">level</name> <operator pos:start="291:47" pos:end="291:47">*</operator> <name pos:start="291:49" pos:end="291:52">qmul</name> <operator pos:start="291:54" pos:end="291:54">+</operator> <name pos:start="291:56" pos:end="291:59">qadd</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="293:21" pos:end="306:0">else<block type="pseudo" pos:start="293:34" pos:end="306:0"><block_content pos:start="293:34" pos:end="306:0">         <expr_stmt pos:start="293:34" pos:end="306:0"><expr pos:start="293:34" pos:end="293:59"><name pos:start="293:34" pos:end="293:38">level</name><operator pos:start="293:39" pos:end="293:39">=</operator> <name pos:start="293:41" pos:end="293:45">level</name> <operator pos:start="293:47" pos:end="293:47">*</operator> <name pos:start="293:49" pos:end="293:52">qmul</name> <operator pos:start="293:54" pos:end="293:54">-</operator> <name pos:start="293:56" pos:end="293:59">qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if pos:start="295:1" pos:end="295:5">#<cpp:directive pos:start="295:2" pos:end="295:3">if</cpp:directive> <expr pos:start="295:5" pos:end="295:5"><literal type="number" pos:start="295:5" pos:end="295:5">0</literal></expr></cpp:if> <comment type="line" pos:start="295:7" pos:end="295:29">// waste of time too :(</comment>

                    if(level&gt;2048 || level&lt;-2048){

                        av_log(s-&gt;avctx, AV_LOG_ERROR, "|level| overflow in 3. esc\n");

                        return DECODING_AC_LOST;

                    }

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="307:21" pos:end="307:32"><expr pos:start="307:21" pos:end="307:31"><name pos:start="307:21" pos:end="307:21">i</name><operator pos:start="307:22" pos:end="307:23">+=</operator> <name pos:start="307:25" pos:end="307:27">run</name> <operator pos:start="307:29" pos:end="307:29">+</operator> <literal type="number" pos:start="307:31" pos:end="307:31">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="309:21" pos:end="312:0"><if pos:start="309:21" pos:end="312:0">if<condition pos:start="309:23" pos:end="309:28">(<expr pos:start="309:24" pos:end="309:27"><name pos:start="309:24" pos:end="309:27">last</name></expr>)</condition><block type="pseudo" pos:start="309:30" pos:end="312:0"><block_content pos:start="309:30" pos:end="312:0"> <expr_stmt pos:start="309:30" pos:end="312:0"><expr pos:start="309:30" pos:end="309:35"><name pos:start="309:30" pos:end="309:30">i</name><operator pos:start="309:31" pos:end="309:32">+=</operator><literal type="number" pos:start="309:33" pos:end="309:35">192</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="311:1" pos:end="311:20">#<cpp:directive pos:start="311:2" pos:end="311:6">ifdef</cpp:directive> <name pos:start="311:8" pos:end="311:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="313:17" pos:end="322:0"><if pos:start="313:17" pos:end="315:97">if<condition pos:start="313:19" pos:end="313:27">(<expr pos:start="313:20" pos:end="313:26"><name pos:start="313:20" pos:end="313:22">run</name><operator pos:start="313:23" pos:end="313:24">==</operator><literal type="number" pos:start="313:25" pos:end="313:26">66</literal></expr>)</condition><block type="pseudo" pos:start="315:21" pos:end="315:97"><block_content pos:start="315:21" pos:end="315:97">

                    <expr_stmt pos:start="315:21" pos:end="315:97"><expr pos:start="315:21" pos:end="315:96"><call pos:start="315:21" pos:end="315:96"><name pos:start="315:21" pos:end="315:26">av_log</name><argument_list pos:start="315:27" pos:end="315:96">(<argument pos:start="315:28" pos:end="315:35"><expr pos:start="315:28" pos:end="315:35"><name pos:start="315:28" pos:end="315:35"><name pos:start="315:28" pos:end="315:28">s</name><operator pos:start="315:29" pos:end="315:30">-&gt;</operator><name pos:start="315:31" pos:end="315:35">avctx</name></name></expr></argument>, <argument pos:start="315:38" pos:end="315:49"><expr pos:start="315:38" pos:end="315:49"><name pos:start="315:38" pos:end="315:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="315:52" pos:end="315:88"><expr pos:start="315:52" pos:end="315:88"><literal type="string" pos:start="315:52" pos:end="315:88">"illegal vlc code in ESC3 level=%d\n"</literal></expr></argument>, <argument pos:start="315:91" pos:end="315:95"><expr pos:start="315:91" pos:end="315:95"><name pos:start="315:91" pos:end="315:95">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="317:17" pos:end="322:0">else if<condition pos:start="317:24" pos:end="317:52">(<expr pos:start="317:25" pos:end="317:51"><operator pos:start="317:25" pos:end="317:25">(</operator><name pos:start="317:26" pos:end="317:26">i</name><operator pos:start="317:27" pos:end="317:27">&gt;</operator><literal type="number" pos:start="317:28" pos:end="317:29">62</literal> <operator pos:start="317:31" pos:end="317:32">&amp;&amp;</operator> <name pos:start="317:34" pos:end="317:34">i</name><operator pos:start="317:35" pos:end="317:35">&lt;</operator><literal type="number" pos:start="317:36" pos:end="317:38">192</literal><operator pos:start="317:39" pos:end="317:39">)</operator> <operator pos:start="317:41" pos:end="317:42">||</operator> <name pos:start="317:44" pos:end="317:44">i</name><operator pos:start="317:45" pos:end="317:45">&gt;</operator><literal type="number" pos:start="317:46" pos:end="317:49">192</literal><operator pos:start="317:49" pos:end="317:49">+</operator><literal type="number" pos:start="317:50" pos:end="317:51">63</literal></expr>)</condition><block type="pseudo" pos:start="319:21" pos:end="322:0"><block_content pos:start="319:21" pos:end="322:0">

                    <expr_stmt pos:start="319:21" pos:end="322:0"><expr pos:start="319:21" pos:end="319:112"><call pos:start="319:21" pos:end="319:112"><name pos:start="319:21" pos:end="319:26">av_log</name><argument_list pos:start="319:27" pos:end="319:112">(<argument pos:start="319:28" pos:end="319:35"><expr pos:start="319:28" pos:end="319:35"><name pos:start="319:28" pos:end="319:35"><name pos:start="319:28" pos:end="319:28">s</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:35">avctx</name></name></expr></argument>, <argument pos:start="319:38" pos:end="319:49"><expr pos:start="319:38" pos:end="319:49"><name pos:start="319:38" pos:end="319:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="319:52" pos:end="319:96"><expr pos:start="319:52" pos:end="319:96"><literal type="string" pos:start="319:52" pos:end="319:96">"run overflow in ESC3 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="319:99" pos:end="319:99"><expr pos:start="319:99" pos:end="319:99"><name pos:start="319:99" pos:end="319:99">i</name></expr></argument>, <argument pos:start="319:102" pos:end="319:104"><expr pos:start="319:102" pos:end="319:104"><name pos:start="319:102" pos:end="319:104">run</name></expr></argument>, <argument pos:start="319:107" pos:end="319:111"><expr pos:start="319:107" pos:end="319:111"><name pos:start="319:107" pos:end="319:111">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="321:1" pos:end="321:6">#<cpp:directive pos:start="321:2" pos:end="321:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if> <else pos:start="323:19" pos:end="349:17">else <block pos:start="323:24" pos:end="349:17">{<block_content pos:start="327:21" pos:end="348:0">

                    <comment type="block" pos:start="325:21" pos:end="325:39">/* second escape */</comment>

                    <expr_stmt pos:start="327:21" pos:end="327:45"><expr pos:start="327:21" pos:end="327:44"><call pos:start="327:21" pos:end="327:44"><name pos:start="327:21" pos:end="327:29">SKIP_BITS</name><argument_list pos:start="327:30" pos:end="327:44">(<argument pos:start="327:31" pos:end="327:32"><expr pos:start="327:31" pos:end="327:32"><name pos:start="327:31" pos:end="327:32">re</name></expr></argument>, <argument pos:start="327:35" pos:end="327:40"><expr pos:start="327:35" pos:end="327:40"><operator pos:start="327:35" pos:end="327:35">&amp;</operator><name pos:start="327:36" pos:end="327:40"><name pos:start="327:36" pos:end="327:36">s</name><operator pos:start="327:37" pos:end="327:38">-&gt;</operator><name pos:start="327:39" pos:end="327:40">gb</name></name></expr></argument>, <argument pos:start="327:43" pos:end="327:43"><expr pos:start="327:43" pos:end="327:43"><literal type="number" pos:start="327:43" pos:end="327:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="329:21" pos:end="329:83"><expr pos:start="329:21" pos:end="329:82"><call pos:start="329:21" pos:end="329:82"><name pos:start="329:21" pos:end="329:30">GET_RL_VLC</name><argument_list pos:start="329:31" pos:end="329:82">(<argument pos:start="329:32" pos:end="329:36"><expr pos:start="329:32" pos:end="329:36"><name pos:start="329:32" pos:end="329:36">level</name></expr></argument>, <argument pos:start="329:39" pos:end="329:41"><expr pos:start="329:39" pos:end="329:41"><name pos:start="329:39" pos:end="329:41">run</name></expr></argument>, <argument pos:start="329:44" pos:end="329:45"><expr pos:start="329:44" pos:end="329:45"><name pos:start="329:44" pos:end="329:45">re</name></expr></argument>, <argument pos:start="329:48" pos:end="329:53"><expr pos:start="329:48" pos:end="329:53"><operator pos:start="329:48" pos:end="329:48">&amp;</operator><name pos:start="329:49" pos:end="329:53"><name pos:start="329:49" pos:end="329:49">s</name><operator pos:start="329:50" pos:end="329:51">-&gt;</operator><name pos:start="329:52" pos:end="329:53">gb</name></name></expr></argument>, <argument pos:start="329:56" pos:end="329:61"><expr pos:start="329:56" pos:end="329:61"><name pos:start="329:56" pos:end="329:61">rl_vlc</name></expr></argument>, <argument pos:start="329:64" pos:end="329:75"><expr pos:start="329:64" pos:end="329:75"><name pos:start="329:64" pos:end="329:75">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="329:78" pos:end="329:78"><expr pos:start="329:78" pos:end="329:78"><literal type="number" pos:start="329:78" pos:end="329:78">2</literal></expr></argument>, <argument pos:start="329:81" pos:end="329:81"><expr pos:start="329:81" pos:end="329:81"><literal type="number" pos:start="329:81" pos:end="329:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="331:21" pos:end="331:73"><expr pos:start="331:21" pos:end="331:72"><name pos:start="331:21" pos:end="331:21">i</name><operator pos:start="331:22" pos:end="331:23">+=</operator> <name pos:start="331:25" pos:end="331:27">run</name> <operator pos:start="331:29" pos:end="331:29">+</operator> <name pos:start="331:31" pos:end="331:61"><name pos:start="331:31" pos:end="331:32">rl</name><operator pos:start="331:33" pos:end="331:34">-&gt;</operator><name pos:start="331:35" pos:end="331:41">max_run</name><index pos:start="331:42" pos:end="331:49">[<expr pos:start="331:43" pos:end="331:48"><name pos:start="331:43" pos:end="331:45">run</name><operator pos:start="331:46" pos:end="331:47">&gt;&gt;</operator><literal type="number" pos:start="331:48" pos:end="331:48">7</literal></expr>]</index><index pos:start="331:50" pos:end="331:61">[<expr pos:start="331:51" pos:end="331:60"><name pos:start="331:51" pos:end="331:55">level</name><operator pos:start="331:56" pos:end="331:56">/</operator><name pos:start="331:57" pos:end="331:60">qmul</name></expr>]</index></name> <operator pos:start="331:63" pos:end="331:63">+</operator> <name pos:start="331:65" pos:end="331:72">run_diff</name></expr>;</expr_stmt> <comment type="line" pos:start="331:75" pos:end="331:94">//FIXME opt indexing</comment>

                    <expr_stmt pos:start="333:21" pos:end="333:92"><expr pos:start="333:21" pos:end="333:91"><name pos:start="333:21" pos:end="333:25">level</name> <operator pos:start="333:27" pos:end="333:27">=</operator> <operator pos:start="333:29" pos:end="333:29">(</operator><name pos:start="333:30" pos:end="333:34">level</name> <operator pos:start="333:36" pos:end="333:36">^</operator> <call pos:start="333:38" pos:end="333:62"><name pos:start="333:38" pos:end="333:47">SHOW_SBITS</name><argument_list pos:start="333:48" pos:end="333:62">(<argument pos:start="333:49" pos:end="333:50"><expr pos:start="333:49" pos:end="333:50"><name pos:start="333:49" pos:end="333:50">re</name></expr></argument>, <argument pos:start="333:53" pos:end="333:58"><expr pos:start="333:53" pos:end="333:58"><operator pos:start="333:53" pos:end="333:53">&amp;</operator><name pos:start="333:54" pos:end="333:58"><name pos:start="333:54" pos:end="333:54">s</name><operator pos:start="333:55" pos:end="333:56">-&gt;</operator><name pos:start="333:57" pos:end="333:58">gb</name></name></expr></argument>, <argument pos:start="333:61" pos:end="333:61"><expr pos:start="333:61" pos:end="333:61"><literal type="number" pos:start="333:61" pos:end="333:61">1</literal></expr></argument>)</argument_list></call><operator pos:start="333:63" pos:end="333:63">)</operator> <operator pos:start="333:65" pos:end="333:65">-</operator> <call pos:start="333:67" pos:end="333:91"><name pos:start="333:67" pos:end="333:76">SHOW_SBITS</name><argument_list pos:start="333:77" pos:end="333:91">(<argument pos:start="333:78" pos:end="333:79"><expr pos:start="333:78" pos:end="333:79"><name pos:start="333:78" pos:end="333:79">re</name></expr></argument>, <argument pos:start="333:82" pos:end="333:87"><expr pos:start="333:82" pos:end="333:87"><operator pos:start="333:82" pos:end="333:82">&amp;</operator><name pos:start="333:83" pos:end="333:87"><name pos:start="333:83" pos:end="333:83">s</name><operator pos:start="333:84" pos:end="333:85">-&gt;</operator><name pos:start="333:86" pos:end="333:87">gb</name></name></expr></argument>, <argument pos:start="333:90" pos:end="333:90"><expr pos:start="333:90" pos:end="333:90"><literal type="number" pos:start="333:90" pos:end="333:90">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="338:0"><expr pos:start="335:21" pos:end="335:49"><call pos:start="335:21" pos:end="335:49"><name pos:start="335:21" pos:end="335:34">LAST_SKIP_BITS</name><argument_list pos:start="335:35" pos:end="335:49">(<argument pos:start="335:36" pos:end="335:37"><expr pos:start="335:36" pos:end="335:37"><name pos:start="335:36" pos:end="335:37">re</name></expr></argument>, <argument pos:start="335:40" pos:end="335:45"><expr pos:start="335:40" pos:end="335:45"><operator pos:start="335:40" pos:end="335:40">&amp;</operator><name pos:start="335:41" pos:end="335:45"><name pos:start="335:41" pos:end="335:41">s</name><operator pos:start="335:42" pos:end="335:43">-&gt;</operator><name pos:start="335:44" pos:end="335:45">gb</name></name></expr></argument>, <argument pos:start="335:48" pos:end="335:48"><expr pos:start="335:48" pos:end="335:48"><literal type="number" pos:start="335:48" pos:end="335:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="337:1" pos:end="337:20">#<cpp:directive pos:start="337:2" pos:end="337:6">ifdef</cpp:directive> <name pos:start="337:8" pos:end="337:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="339:17" pos:end="348:0"><if pos:start="339:17" pos:end="341:97">if<condition pos:start="339:19" pos:end="339:27">(<expr pos:start="339:20" pos:end="339:26"><name pos:start="339:20" pos:end="339:22">run</name><operator pos:start="339:23" pos:end="339:24">==</operator><literal type="number" pos:start="339:25" pos:end="339:26">66</literal></expr>)</condition><block type="pseudo" pos:start="341:21" pos:end="341:97"><block_content pos:start="341:21" pos:end="341:97">

                    <expr_stmt pos:start="341:21" pos:end="341:97"><expr pos:start="341:21" pos:end="341:96"><call pos:start="341:21" pos:end="341:96"><name pos:start="341:21" pos:end="341:26">av_log</name><argument_list pos:start="341:27" pos:end="341:96">(<argument pos:start="341:28" pos:end="341:35"><expr pos:start="341:28" pos:end="341:35"><name pos:start="341:28" pos:end="341:35"><name pos:start="341:28" pos:end="341:28">s</name><operator pos:start="341:29" pos:end="341:30">-&gt;</operator><name pos:start="341:31" pos:end="341:35">avctx</name></name></expr></argument>, <argument pos:start="341:38" pos:end="341:49"><expr pos:start="341:38" pos:end="341:49"><name pos:start="341:38" pos:end="341:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="341:52" pos:end="341:88"><expr pos:start="341:52" pos:end="341:88"><literal type="string" pos:start="341:52" pos:end="341:88">"illegal vlc code in ESC2 level=%d\n"</literal></expr></argument>, <argument pos:start="341:91" pos:end="341:95"><expr pos:start="341:91" pos:end="341:95"><name pos:start="341:91" pos:end="341:95">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="343:17" pos:end="348:0">else if<condition pos:start="343:24" pos:end="343:52">(<expr pos:start="343:25" pos:end="343:51"><operator pos:start="343:25" pos:end="343:25">(</operator><name pos:start="343:26" pos:end="343:26">i</name><operator pos:start="343:27" pos:end="343:27">&gt;</operator><literal type="number" pos:start="343:28" pos:end="343:29">62</literal> <operator pos:start="343:31" pos:end="343:32">&amp;&amp;</operator> <name pos:start="343:34" pos:end="343:34">i</name><operator pos:start="343:35" pos:end="343:35">&lt;</operator><literal type="number" pos:start="343:36" pos:end="343:38">192</literal><operator pos:start="343:39" pos:end="343:39">)</operator> <operator pos:start="343:41" pos:end="343:42">||</operator> <name pos:start="343:44" pos:end="343:44">i</name><operator pos:start="343:45" pos:end="343:45">&gt;</operator><literal type="number" pos:start="343:46" pos:end="343:49">192</literal><operator pos:start="343:49" pos:end="343:49">+</operator><literal type="number" pos:start="343:50" pos:end="343:51">63</literal></expr>)</condition><block type="pseudo" pos:start="345:21" pos:end="348:0"><block_content pos:start="345:21" pos:end="348:0">

                    <expr_stmt pos:start="345:21" pos:end="348:0"><expr pos:start="345:21" pos:end="345:112"><call pos:start="345:21" pos:end="345:112"><name pos:start="345:21" pos:end="345:26">av_log</name><argument_list pos:start="345:27" pos:end="345:112">(<argument pos:start="345:28" pos:end="345:35"><expr pos:start="345:28" pos:end="345:35"><name pos:start="345:28" pos:end="345:35"><name pos:start="345:28" pos:end="345:28">s</name><operator pos:start="345:29" pos:end="345:30">-&gt;</operator><name pos:start="345:31" pos:end="345:35">avctx</name></name></expr></argument>, <argument pos:start="345:38" pos:end="345:49"><expr pos:start="345:38" pos:end="345:49"><name pos:start="345:38" pos:end="345:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="345:52" pos:end="345:96"><expr pos:start="345:52" pos:end="345:96"><literal type="string" pos:start="345:52" pos:end="345:96">"run overflow in ESC2 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="345:99" pos:end="345:99"><expr pos:start="345:99" pos:end="345:99"><name pos:start="345:99" pos:end="345:99">i</name></expr></argument>, <argument pos:start="345:102" pos:end="345:104"><expr pos:start="345:102" pos:end="345:104"><name pos:start="345:102" pos:end="345:104">run</name></expr></argument>, <argument pos:start="345:107" pos:end="345:111"><expr pos:start="345:107" pos:end="345:111"><name pos:start="345:107" pos:end="345:111">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="347:1" pos:end="347:6">#<cpp:directive pos:start="347:2" pos:end="347:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="351:15" pos:end="379:13">else <block pos:start="351:20" pos:end="379:13">{<block_content pos:start="355:17" pos:end="378:0">

                <comment type="block" pos:start="353:17" pos:end="353:34">/* first escape */</comment>

                <expr_stmt pos:start="355:17" pos:end="355:41"><expr pos:start="355:17" pos:end="355:40"><call pos:start="355:17" pos:end="355:40"><name pos:start="355:17" pos:end="355:25">SKIP_BITS</name><argument_list pos:start="355:26" pos:end="355:40">(<argument pos:start="355:27" pos:end="355:28"><expr pos:start="355:27" pos:end="355:28"><name pos:start="355:27" pos:end="355:28">re</name></expr></argument>, <argument pos:start="355:31" pos:end="355:36"><expr pos:start="355:31" pos:end="355:36"><operator pos:start="355:31" pos:end="355:31">&amp;</operator><name pos:start="355:32" pos:end="355:36"><name pos:start="355:32" pos:end="355:32">s</name><operator pos:start="355:33" pos:end="355:34">-&gt;</operator><name pos:start="355:35" pos:end="355:36">gb</name></name></expr></argument>, <argument pos:start="355:39" pos:end="355:39"><expr pos:start="355:39" pos:end="355:39"><literal type="number" pos:start="355:39" pos:end="355:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:79"><expr pos:start="357:17" pos:end="357:78"><call pos:start="357:17" pos:end="357:78"><name pos:start="357:17" pos:end="357:26">GET_RL_VLC</name><argument_list pos:start="357:27" pos:end="357:78">(<argument pos:start="357:28" pos:end="357:32"><expr pos:start="357:28" pos:end="357:32"><name pos:start="357:28" pos:end="357:32">level</name></expr></argument>, <argument pos:start="357:35" pos:end="357:37"><expr pos:start="357:35" pos:end="357:37"><name pos:start="357:35" pos:end="357:37">run</name></expr></argument>, <argument pos:start="357:40" pos:end="357:41"><expr pos:start="357:40" pos:end="357:41"><name pos:start="357:40" pos:end="357:41">re</name></expr></argument>, <argument pos:start="357:44" pos:end="357:49"><expr pos:start="357:44" pos:end="357:49"><operator pos:start="357:44" pos:end="357:44">&amp;</operator><name pos:start="357:45" pos:end="357:49"><name pos:start="357:45" pos:end="357:45">s</name><operator pos:start="357:46" pos:end="357:47">-&gt;</operator><name pos:start="357:48" pos:end="357:49">gb</name></name></expr></argument>, <argument pos:start="357:52" pos:end="357:57"><expr pos:start="357:52" pos:end="357:57"><name pos:start="357:52" pos:end="357:57">rl_vlc</name></expr></argument>, <argument pos:start="357:60" pos:end="357:71"><expr pos:start="357:60" pos:end="357:71"><name pos:start="357:60" pos:end="357:71">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="357:74" pos:end="357:74"><expr pos:start="357:74" pos:end="357:74"><literal type="number" pos:start="357:74" pos:end="357:74">2</literal></expr></argument>, <argument pos:start="357:77" pos:end="357:77"><expr pos:start="357:77" pos:end="357:77"><literal type="number" pos:start="357:77" pos:end="357:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:24"><expr pos:start="359:17" pos:end="359:23"><name pos:start="359:17" pos:end="359:17">i</name><operator pos:start="359:18" pos:end="359:19">+=</operator> <name pos:start="359:21" pos:end="359:23">run</name></expr>;</expr_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:73"><expr pos:start="361:17" pos:end="361:72"><name pos:start="361:17" pos:end="361:21">level</name> <operator pos:start="361:23" pos:end="361:23">=</operator> <name pos:start="361:25" pos:end="361:29">level</name> <operator pos:start="361:31" pos:end="361:31">+</operator> <name pos:start="361:33" pos:end="361:65"><name pos:start="361:33" pos:end="361:34">rl</name><operator pos:start="361:35" pos:end="361:36">-&gt;</operator><name pos:start="361:37" pos:end="361:45">max_level</name><index pos:start="361:46" pos:end="361:53">[<expr pos:start="361:47" pos:end="361:52"><name pos:start="361:47" pos:end="361:49">run</name><operator pos:start="361:50" pos:end="361:51">&gt;&gt;</operator><literal type="number" pos:start="361:52" pos:end="361:52">7</literal></expr>]</index><index pos:start="361:54" pos:end="361:65">[<expr pos:start="361:55" pos:end="361:64"><operator pos:start="361:55" pos:end="361:55">(</operator><name pos:start="361:56" pos:end="361:58">run</name><operator pos:start="361:59" pos:end="361:59">-</operator><literal type="number" pos:start="361:60" pos:end="361:60">1</literal><operator pos:start="361:61" pos:end="361:61">)</operator><operator pos:start="361:62" pos:end="361:62">&amp;</operator><literal type="number" pos:start="361:63" pos:end="361:64">63</literal></expr>]</index></name> <operator pos:start="361:67" pos:end="361:67">*</operator> <name pos:start="361:69" pos:end="361:72">qmul</name></expr>;</expr_stmt><comment type="line" pos:start="361:74" pos:end="361:93">//FIXME opt indexing</comment>

                <expr_stmt pos:start="363:17" pos:end="363:88"><expr pos:start="363:17" pos:end="363:87"><name pos:start="363:17" pos:end="363:21">level</name> <operator pos:start="363:23" pos:end="363:23">=</operator> <operator pos:start="363:25" pos:end="363:25">(</operator><name pos:start="363:26" pos:end="363:30">level</name> <operator pos:start="363:32" pos:end="363:32">^</operator> <call pos:start="363:34" pos:end="363:58"><name pos:start="363:34" pos:end="363:43">SHOW_SBITS</name><argument_list pos:start="363:44" pos:end="363:58">(<argument pos:start="363:45" pos:end="363:46"><expr pos:start="363:45" pos:end="363:46"><name pos:start="363:45" pos:end="363:46">re</name></expr></argument>, <argument pos:start="363:49" pos:end="363:54"><expr pos:start="363:49" pos:end="363:54"><operator pos:start="363:49" pos:end="363:49">&amp;</operator><name pos:start="363:50" pos:end="363:54"><name pos:start="363:50" pos:end="363:50">s</name><operator pos:start="363:51" pos:end="363:52">-&gt;</operator><name pos:start="363:53" pos:end="363:54">gb</name></name></expr></argument>, <argument pos:start="363:57" pos:end="363:57"><expr pos:start="363:57" pos:end="363:57"><literal type="number" pos:start="363:57" pos:end="363:57">1</literal></expr></argument>)</argument_list></call><operator pos:start="363:59" pos:end="363:59">)</operator> <operator pos:start="363:61" pos:end="363:61">-</operator> <call pos:start="363:63" pos:end="363:87"><name pos:start="363:63" pos:end="363:72">SHOW_SBITS</name><argument_list pos:start="363:73" pos:end="363:87">(<argument pos:start="363:74" pos:end="363:75"><expr pos:start="363:74" pos:end="363:75"><name pos:start="363:74" pos:end="363:75">re</name></expr></argument>, <argument pos:start="363:78" pos:end="363:83"><expr pos:start="363:78" pos:end="363:83"><operator pos:start="363:78" pos:end="363:78">&amp;</operator><name pos:start="363:79" pos:end="363:83"><name pos:start="363:79" pos:end="363:79">s</name><operator pos:start="363:80" pos:end="363:81">-&gt;</operator><name pos:start="363:82" pos:end="363:83">gb</name></name></expr></argument>, <argument pos:start="363:86" pos:end="363:86"><expr pos:start="363:86" pos:end="363:86"><literal type="number" pos:start="363:86" pos:end="363:86">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="365:17" pos:end="368:0"><expr pos:start="365:17" pos:end="365:45"><call pos:start="365:17" pos:end="365:45"><name pos:start="365:17" pos:end="365:30">LAST_SKIP_BITS</name><argument_list pos:start="365:31" pos:end="365:45">(<argument pos:start="365:32" pos:end="365:33"><expr pos:start="365:32" pos:end="365:33"><name pos:start="365:32" pos:end="365:33">re</name></expr></argument>, <argument pos:start="365:36" pos:end="365:41"><expr pos:start="365:36" pos:end="365:41"><operator pos:start="365:36" pos:end="365:36">&amp;</operator><name pos:start="365:37" pos:end="365:41"><name pos:start="365:37" pos:end="365:37">s</name><operator pos:start="365:38" pos:end="365:39">-&gt;</operator><name pos:start="365:40" pos:end="365:41">gb</name></name></expr></argument>, <argument pos:start="365:44" pos:end="365:44"><expr pos:start="365:44" pos:end="365:44"><literal type="number" pos:start="365:44" pos:end="365:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="367:1" pos:end="367:20">#<cpp:directive pos:start="367:2" pos:end="367:6">ifdef</cpp:directive> <name pos:start="367:8" pos:end="367:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="369:17" pos:end="378:0"><if pos:start="369:17" pos:end="371:97">if<condition pos:start="369:19" pos:end="369:27">(<expr pos:start="369:20" pos:end="369:26"><name pos:start="369:20" pos:end="369:22">run</name><operator pos:start="369:23" pos:end="369:24">==</operator><literal type="number" pos:start="369:25" pos:end="369:26">66</literal></expr>)</condition><block type="pseudo" pos:start="371:21" pos:end="371:97"><block_content pos:start="371:21" pos:end="371:97">

                    <expr_stmt pos:start="371:21" pos:end="371:97"><expr pos:start="371:21" pos:end="371:96"><call pos:start="371:21" pos:end="371:96"><name pos:start="371:21" pos:end="371:26">av_log</name><argument_list pos:start="371:27" pos:end="371:96">(<argument pos:start="371:28" pos:end="371:35"><expr pos:start="371:28" pos:end="371:35"><name pos:start="371:28" pos:end="371:35"><name pos:start="371:28" pos:end="371:28">s</name><operator pos:start="371:29" pos:end="371:30">-&gt;</operator><name pos:start="371:31" pos:end="371:35">avctx</name></name></expr></argument>, <argument pos:start="371:38" pos:end="371:49"><expr pos:start="371:38" pos:end="371:49"><name pos:start="371:38" pos:end="371:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="371:52" pos:end="371:88"><expr pos:start="371:52" pos:end="371:88"><literal type="string" pos:start="371:52" pos:end="371:88">"illegal vlc code in ESC1 level=%d\n"</literal></expr></argument>, <argument pos:start="371:91" pos:end="371:95"><expr pos:start="371:91" pos:end="371:95"><name pos:start="371:91" pos:end="371:95">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="373:17" pos:end="378:0">else if<condition pos:start="373:24" pos:end="373:52">(<expr pos:start="373:25" pos:end="373:51"><operator pos:start="373:25" pos:end="373:25">(</operator><name pos:start="373:26" pos:end="373:26">i</name><operator pos:start="373:27" pos:end="373:27">&gt;</operator><literal type="number" pos:start="373:28" pos:end="373:29">62</literal> <operator pos:start="373:31" pos:end="373:32">&amp;&amp;</operator> <name pos:start="373:34" pos:end="373:34">i</name><operator pos:start="373:35" pos:end="373:35">&lt;</operator><literal type="number" pos:start="373:36" pos:end="373:38">192</literal><operator pos:start="373:39" pos:end="373:39">)</operator> <operator pos:start="373:41" pos:end="373:42">||</operator> <name pos:start="373:44" pos:end="373:44">i</name><operator pos:start="373:45" pos:end="373:45">&gt;</operator><literal type="number" pos:start="373:46" pos:end="373:49">192</literal><operator pos:start="373:49" pos:end="373:49">+</operator><literal type="number" pos:start="373:50" pos:end="373:51">63</literal></expr>)</condition><block type="pseudo" pos:start="375:21" pos:end="378:0"><block_content pos:start="375:21" pos:end="378:0">

                    <expr_stmt pos:start="375:21" pos:end="378:0"><expr pos:start="375:21" pos:end="375:112"><call pos:start="375:21" pos:end="375:112"><name pos:start="375:21" pos:end="375:26">av_log</name><argument_list pos:start="375:27" pos:end="375:112">(<argument pos:start="375:28" pos:end="375:35"><expr pos:start="375:28" pos:end="375:35"><name pos:start="375:28" pos:end="375:35"><name pos:start="375:28" pos:end="375:28">s</name><operator pos:start="375:29" pos:end="375:30">-&gt;</operator><name pos:start="375:31" pos:end="375:35">avctx</name></name></expr></argument>, <argument pos:start="375:38" pos:end="375:49"><expr pos:start="375:38" pos:end="375:49"><name pos:start="375:38" pos:end="375:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="375:52" pos:end="375:96"><expr pos:start="375:52" pos:end="375:96"><literal type="string" pos:start="375:52" pos:end="375:96">"run overflow in ESC1 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="375:99" pos:end="375:99"><expr pos:start="375:99" pos:end="375:99"><name pos:start="375:99" pos:end="375:99">i</name></expr></argument>, <argument pos:start="375:102" pos:end="375:104"><expr pos:start="375:102" pos:end="375:104"><name pos:start="375:102" pos:end="375:104">run</name></expr></argument>, <argument pos:start="375:107" pos:end="375:111"><expr pos:start="375:107" pos:end="375:111"><name pos:start="375:107" pos:end="375:111">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="377:1" pos:end="377:6">#<cpp:directive pos:start="377:2" pos:end="377:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="381:11" pos:end="401:9">else <block pos:start="381:16" pos:end="401:9">{<block_content pos:start="383:13" pos:end="400:0">

            <expr_stmt pos:start="383:13" pos:end="383:20"><expr pos:start="383:13" pos:end="383:19"><name pos:start="383:13" pos:end="383:13">i</name><operator pos:start="383:14" pos:end="383:15">+=</operator> <name pos:start="383:17" pos:end="383:19">run</name></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:84"><expr pos:start="385:13" pos:end="385:83"><name pos:start="385:13" pos:end="385:17">level</name> <operator pos:start="385:19" pos:end="385:19">=</operator> <operator pos:start="385:21" pos:end="385:21">(</operator><name pos:start="385:22" pos:end="385:26">level</name> <operator pos:start="385:28" pos:end="385:28">^</operator> <call pos:start="385:30" pos:end="385:54"><name pos:start="385:30" pos:end="385:39">SHOW_SBITS</name><argument_list pos:start="385:40" pos:end="385:54">(<argument pos:start="385:41" pos:end="385:42"><expr pos:start="385:41" pos:end="385:42"><name pos:start="385:41" pos:end="385:42">re</name></expr></argument>, <argument pos:start="385:45" pos:end="385:50"><expr pos:start="385:45" pos:end="385:50"><operator pos:start="385:45" pos:end="385:45">&amp;</operator><name pos:start="385:46" pos:end="385:50"><name pos:start="385:46" pos:end="385:46">s</name><operator pos:start="385:47" pos:end="385:48">-&gt;</operator><name pos:start="385:49" pos:end="385:50">gb</name></name></expr></argument>, <argument pos:start="385:53" pos:end="385:53"><expr pos:start="385:53" pos:end="385:53"><literal type="number" pos:start="385:53" pos:end="385:53">1</literal></expr></argument>)</argument_list></call><operator pos:start="385:55" pos:end="385:55">)</operator> <operator pos:start="385:57" pos:end="385:57">-</operator> <call pos:start="385:59" pos:end="385:83"><name pos:start="385:59" pos:end="385:68">SHOW_SBITS</name><argument_list pos:start="385:69" pos:end="385:83">(<argument pos:start="385:70" pos:end="385:71"><expr pos:start="385:70" pos:end="385:71"><name pos:start="385:70" pos:end="385:71">re</name></expr></argument>, <argument pos:start="385:74" pos:end="385:79"><expr pos:start="385:74" pos:end="385:79"><operator pos:start="385:74" pos:end="385:74">&amp;</operator><name pos:start="385:75" pos:end="385:79"><name pos:start="385:75" pos:end="385:75">s</name><operator pos:start="385:76" pos:end="385:77">-&gt;</operator><name pos:start="385:78" pos:end="385:79">gb</name></name></expr></argument>, <argument pos:start="385:82" pos:end="385:82"><expr pos:start="385:82" pos:end="385:82"><literal type="number" pos:start="385:82" pos:end="385:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="390:0"><expr pos:start="387:13" pos:end="387:41"><call pos:start="387:13" pos:end="387:41"><name pos:start="387:13" pos:end="387:26">LAST_SKIP_BITS</name><argument_list pos:start="387:27" pos:end="387:41">(<argument pos:start="387:28" pos:end="387:29"><expr pos:start="387:28" pos:end="387:29"><name pos:start="387:28" pos:end="387:29">re</name></expr></argument>, <argument pos:start="387:32" pos:end="387:37"><expr pos:start="387:32" pos:end="387:37"><operator pos:start="387:32" pos:end="387:32">&amp;</operator><name pos:start="387:33" pos:end="387:37"><name pos:start="387:33" pos:end="387:33">s</name><operator pos:start="387:34" pos:end="387:35">-&gt;</operator><name pos:start="387:36" pos:end="387:37">gb</name></name></expr></argument>, <argument pos:start="387:40" pos:end="387:40"><expr pos:start="387:40" pos:end="387:40"><literal type="number" pos:start="387:40" pos:end="387:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="389:1" pos:end="389:20">#<cpp:directive pos:start="389:2" pos:end="389:6">ifdef</cpp:directive> <name pos:start="389:8" pos:end="389:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="391:17" pos:end="400:0"><if pos:start="391:17" pos:end="393:89">if<condition pos:start="391:19" pos:end="391:27">(<expr pos:start="391:20" pos:end="391:26"><name pos:start="391:20" pos:end="391:22">run</name><operator pos:start="391:23" pos:end="391:24">==</operator><literal type="number" pos:start="391:25" pos:end="391:26">66</literal></expr>)</condition><block type="pseudo" pos:start="393:21" pos:end="393:89"><block_content pos:start="393:21" pos:end="393:89">

                    <expr_stmt pos:start="393:21" pos:end="393:89"><expr pos:start="393:21" pos:end="393:88"><call pos:start="393:21" pos:end="393:88"><name pos:start="393:21" pos:end="393:26">av_log</name><argument_list pos:start="393:27" pos:end="393:88">(<argument pos:start="393:28" pos:end="393:35"><expr pos:start="393:28" pos:end="393:35"><name pos:start="393:28" pos:end="393:35"><name pos:start="393:28" pos:end="393:28">s</name><operator pos:start="393:29" pos:end="393:30">-&gt;</operator><name pos:start="393:31" pos:end="393:35">avctx</name></name></expr></argument>, <argument pos:start="393:38" pos:end="393:49"><expr pos:start="393:38" pos:end="393:49"><name pos:start="393:38" pos:end="393:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="393:52" pos:end="393:80"><expr pos:start="393:52" pos:end="393:80"><literal type="string" pos:start="393:52" pos:end="393:80">"illegal vlc code level=%d\n"</literal></expr></argument>, <argument pos:start="393:83" pos:end="393:87"><expr pos:start="393:83" pos:end="393:87"><name pos:start="393:83" pos:end="393:87">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="395:17" pos:end="400:0">else if<condition pos:start="395:24" pos:end="395:52">(<expr pos:start="395:25" pos:end="395:51"><operator pos:start="395:25" pos:end="395:25">(</operator><name pos:start="395:26" pos:end="395:26">i</name><operator pos:start="395:27" pos:end="395:27">&gt;</operator><literal type="number" pos:start="395:28" pos:end="395:29">62</literal> <operator pos:start="395:31" pos:end="395:32">&amp;&amp;</operator> <name pos:start="395:34" pos:end="395:34">i</name><operator pos:start="395:35" pos:end="395:35">&lt;</operator><literal type="number" pos:start="395:36" pos:end="395:38">192</literal><operator pos:start="395:39" pos:end="395:39">)</operator> <operator pos:start="395:41" pos:end="395:42">||</operator> <name pos:start="395:44" pos:end="395:44">i</name><operator pos:start="395:45" pos:end="395:45">&gt;</operator><literal type="number" pos:start="395:46" pos:end="395:49">192</literal><operator pos:start="395:49" pos:end="395:49">+</operator><literal type="number" pos:start="395:50" pos:end="395:51">63</literal></expr>)</condition><block type="pseudo" pos:start="397:21" pos:end="400:0"><block_content pos:start="397:21" pos:end="400:0">

                    <expr_stmt pos:start="397:21" pos:end="400:0"><expr pos:start="397:21" pos:end="397:104"><call pos:start="397:21" pos:end="397:104"><name pos:start="397:21" pos:end="397:26">av_log</name><argument_list pos:start="397:27" pos:end="397:104">(<argument pos:start="397:28" pos:end="397:35"><expr pos:start="397:28" pos:end="397:35"><name pos:start="397:28" pos:end="397:35"><name pos:start="397:28" pos:end="397:28">s</name><operator pos:start="397:29" pos:end="397:30">-&gt;</operator><name pos:start="397:31" pos:end="397:35">avctx</name></name></expr></argument>, <argument pos:start="397:38" pos:end="397:49"><expr pos:start="397:38" pos:end="397:49"><name pos:start="397:38" pos:end="397:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="397:52" pos:end="397:88"><expr pos:start="397:52" pos:end="397:88"><literal type="string" pos:start="397:52" pos:end="397:88">"run overflow i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="397:91" pos:end="397:91"><expr pos:start="397:91" pos:end="397:91"><name pos:start="397:91" pos:end="397:91">i</name></expr></argument>, <argument pos:start="397:94" pos:end="397:96"><expr pos:start="397:94" pos:end="397:96"><name pos:start="397:94" pos:end="397:96">run</name></expr></argument>, <argument pos:start="397:99" pos:end="397:103"><expr pos:start="397:99" pos:end="397:103"><name pos:start="397:99" pos:end="397:103">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="399:1" pos:end="399:6">#<cpp:directive pos:start="399:2" pos:end="399:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="403:9" pos:end="435:9"><if pos:start="403:9" pos:end="435:9">if <condition pos:start="403:12" pos:end="403:19">(<expr pos:start="403:13" pos:end="403:18"><name pos:start="403:13" pos:end="403:13">i</name> <operator pos:start="403:15" pos:end="403:15">&gt;</operator> <literal type="number" pos:start="403:17" pos:end="403:18">62</literal></expr>)</condition><block pos:start="403:20" pos:end="435:9">{<block_content pos:start="405:13" pos:end="433:18">

            <expr_stmt pos:start="405:13" pos:end="405:20"><expr pos:start="405:13" pos:end="405:19"><name pos:start="405:13" pos:end="405:13">i</name><operator pos:start="405:14" pos:end="405:15">-=</operator> <literal type="number" pos:start="405:17" pos:end="405:19">192</literal></expr>;</expr_stmt>

            <if_stmt pos:start="407:13" pos:end="427:13"><if pos:start="407:13" pos:end="427:13">if<condition pos:start="407:15" pos:end="407:23">(<expr pos:start="407:16" pos:end="407:22"><name pos:start="407:16" pos:end="407:16">i</name><operator pos:start="407:17" pos:end="407:17">&amp;</operator><operator pos:start="407:18" pos:end="407:18">(</operator><operator pos:start="407:19" pos:end="407:19">~</operator><literal type="number" pos:start="407:20" pos:end="407:21">63</literal><operator pos:start="407:22" pos:end="407:22">)</operator></expr>)</condition><block pos:start="407:24" pos:end="427:13">{<block_content pos:start="409:17" pos:end="425:17">

                <decl_stmt pos:start="409:17" pos:end="409:54"><decl pos:start="409:17" pos:end="409:53"><type pos:start="409:17" pos:end="409:25"><specifier pos:start="409:17" pos:end="409:21">const</specifier> <name pos:start="409:23" pos:end="409:25">int</name></type> <name pos:start="409:27" pos:end="409:30">left</name><init pos:start="409:31" pos:end="409:53">= <expr pos:start="409:33" pos:end="409:53"><call pos:start="409:33" pos:end="409:53"><name pos:start="409:33" pos:end="409:45">get_bits_left</name><argument_list pos:start="409:46" pos:end="409:53">(<argument pos:start="409:47" pos:end="409:52"><expr pos:start="409:47" pos:end="409:52"><operator pos:start="409:47" pos:end="409:47">&amp;</operator><name pos:start="409:48" pos:end="409:52"><name pos:start="409:48" pos:end="409:48">s</name><operator pos:start="409:49" pos:end="409:50">-&gt;</operator><name pos:start="409:51" pos:end="409:52">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="411:17" pos:end="425:17"><if pos:start="411:17" pos:end="419:17">if<condition pos:start="411:19" pos:end="411:123">(<expr pos:start="411:20" pos:end="411:122"><operator pos:start="411:20" pos:end="411:20">(</operator><operator pos:start="411:21" pos:end="411:21">(</operator><name pos:start="411:22" pos:end="411:22">i</name><operator pos:start="411:23" pos:end="411:23">+</operator><literal type="number" pos:start="411:24" pos:end="411:26">192</literal> <operator pos:start="411:28" pos:end="411:29">==</operator> <literal type="number" pos:start="411:31" pos:end="411:32">64</literal> <operator pos:start="411:34" pos:end="411:35">&amp;&amp;</operator> <name pos:start="411:37" pos:end="411:41">level</name><operator pos:start="411:42" pos:end="411:42">/</operator><name pos:start="411:43" pos:end="411:46">qmul</name><operator pos:start="411:47" pos:end="411:48">==</operator><operator pos:start="411:49" pos:end="411:49">-</operator><literal type="number" pos:start="411:50" pos:end="411:50">1</literal><operator pos:start="411:51" pos:end="411:51">)</operator> <operator pos:start="411:53" pos:end="411:54">||</operator> <operator pos:start="411:56" pos:end="411:56">!</operator><operator pos:start="411:57" pos:end="411:57">(</operator><name pos:start="411:58" pos:end="411:75"><name pos:start="411:58" pos:end="411:58">s</name><operator pos:start="411:59" pos:end="411:60">-&gt;</operator><name pos:start="411:61" pos:end="411:75">err_recognition</name></name><operator pos:start="411:76" pos:end="411:76">&amp;</operator><operator pos:start="411:77" pos:end="411:77">(</operator><name pos:start="411:78" pos:end="411:92">AV_EF_BITSTREAM</name><operator pos:start="411:93" pos:end="411:93">|</operator><name pos:start="411:94" pos:end="411:108">AV_EF_COMPLIANT</name><operator pos:start="411:109" pos:end="411:109">)</operator><operator pos:start="411:110" pos:end="411:110">)</operator><operator pos:start="411:111" pos:end="411:111">)</operator> <operator pos:start="411:113" pos:end="411:114">&amp;&amp;</operator> <name pos:start="411:116" pos:end="411:119">left</name><operator pos:start="411:120" pos:end="411:121">&gt;=</operator><literal type="number" pos:start="411:122" pos:end="411:122">0</literal></expr>)</condition><block pos:start="411:124" pos:end="419:17">{<block_content pos:start="413:21" pos:end="417:26">

                    <expr_stmt pos:start="413:21" pos:end="413:101"><expr pos:start="413:21" pos:end="413:100"><call pos:start="413:21" pos:end="413:100"><name pos:start="413:21" pos:end="413:26">av_log</name><argument_list pos:start="413:27" pos:end="413:100">(<argument pos:start="413:28" pos:end="413:35"><expr pos:start="413:28" pos:end="413:35"><name pos:start="413:28" pos:end="413:35"><name pos:start="413:28" pos:end="413:28">s</name><operator pos:start="413:29" pos:end="413:30">-&gt;</operator><name pos:start="413:31" pos:end="413:35">avctx</name></name></expr></argument>, <argument pos:start="413:38" pos:end="413:49"><expr pos:start="413:38" pos:end="413:49"><name pos:start="413:38" pos:end="413:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="413:52" pos:end="413:81"><expr pos:start="413:52" pos:end="413:81"><literal type="string" pos:start="413:52" pos:end="413:81">"ignoring overflow at %d %d\n"</literal></expr></argument>, <argument pos:start="413:84" pos:end="413:90"><expr pos:start="413:84" pos:end="413:90"><name pos:start="413:84" pos:end="413:90"><name pos:start="413:84" pos:end="413:84">s</name><operator pos:start="413:85" pos:end="413:86">-&gt;</operator><name pos:start="413:87" pos:end="413:90">mb_x</name></name></expr></argument>, <argument pos:start="413:93" pos:end="413:99"><expr pos:start="413:93" pos:end="413:99"><name pos:start="413:93" pos:end="413:99"><name pos:start="413:93" pos:end="413:93">s</name><operator pos:start="413:94" pos:end="413:95">-&gt;</operator><name pos:start="413:96" pos:end="413:99">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="415:21" pos:end="415:27"><expr pos:start="415:21" pos:end="415:26"><name pos:start="415:21" pos:end="415:21">i</name> <operator pos:start="415:23" pos:end="415:23">=</operator> <literal type="number" pos:start="415:25" pos:end="415:26">63</literal></expr>;</expr_stmt>

                    <break pos:start="417:21" pos:end="417:26">break;</break>

                </block_content>}</block></if><else pos:start="419:18" pos:end="425:17">else<block pos:start="419:22" pos:end="425:17">{<block_content pos:start="421:21" pos:end="423:30">

                    <expr_stmt pos:start="421:21" pos:end="421:98"><expr pos:start="421:21" pos:end="421:97"><call pos:start="421:21" pos:end="421:97"><name pos:start="421:21" pos:end="421:26">av_log</name><argument_list pos:start="421:27" pos:end="421:97">(<argument pos:start="421:28" pos:end="421:35"><expr pos:start="421:28" pos:end="421:35"><name pos:start="421:28" pos:end="421:35"><name pos:start="421:28" pos:end="421:28">s</name><operator pos:start="421:29" pos:end="421:30">-&gt;</operator><name pos:start="421:31" pos:end="421:35">avctx</name></name></expr></argument>, <argument pos:start="421:38" pos:end="421:49"><expr pos:start="421:38" pos:end="421:49"><name pos:start="421:38" pos:end="421:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="421:52" pos:end="421:78"><expr pos:start="421:52" pos:end="421:78"><literal type="string" pos:start="421:52" pos:end="421:78">"ac-tex damaged at %d %d\n"</literal></expr></argument>, <argument pos:start="421:81" pos:end="421:87"><expr pos:start="421:81" pos:end="421:87"><name pos:start="421:81" pos:end="421:87"><name pos:start="421:81" pos:end="421:81">s</name><operator pos:start="421:82" pos:end="421:83">-&gt;</operator><name pos:start="421:84" pos:end="421:87">mb_x</name></name></expr></argument>, <argument pos:start="421:90" pos:end="421:96"><expr pos:start="421:90" pos:end="421:96"><name pos:start="421:90" pos:end="421:96"><name pos:start="421:90" pos:end="421:90">s</name><operator pos:start="421:91" pos:end="421:92">-&gt;</operator><name pos:start="421:93" pos:end="421:96">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="423:21" pos:end="423:30">return <expr pos:start="423:28" pos:end="423:29"><operator pos:start="423:28" pos:end="423:28">-</operator><literal type="number" pos:start="423:29" pos:end="423:29">1</literal></expr>;</return>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="431:13" pos:end="431:41"><expr pos:start="431:13" pos:end="431:40"><name pos:start="431:13" pos:end="431:32"><name pos:start="431:13" pos:end="431:17">block</name><index pos:start="431:18" pos:end="431:32">[<expr pos:start="431:19" pos:end="431:31"><name pos:start="431:19" pos:end="431:31"><name pos:start="431:19" pos:end="431:28">scan_table</name><index pos:start="431:29" pos:end="431:31">[<expr pos:start="431:30" pos:end="431:30"><name pos:start="431:30" pos:end="431:30">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="431:34" pos:end="431:34">=</operator> <name pos:start="431:36" pos:end="431:40">level</name></expr>;</expr_stmt>

            <break pos:start="433:13" pos:end="433:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="439:9" pos:end="439:37"><expr pos:start="439:9" pos:end="439:36"><name pos:start="439:9" pos:end="439:28"><name pos:start="439:9" pos:end="439:13">block</name><index pos:start="439:14" pos:end="439:28">[<expr pos:start="439:15" pos:end="439:27"><name pos:start="439:15" pos:end="439:27"><name pos:start="439:15" pos:end="439:24">scan_table</name><index pos:start="439:25" pos:end="439:27">[<expr pos:start="439:26" pos:end="439:26"><name pos:start="439:26" pos:end="439:26">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="439:30" pos:end="439:30">=</operator> <name pos:start="439:32" pos:end="439:36">level</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="443:5" pos:end="443:29"><expr pos:start="443:5" pos:end="443:28"><call pos:start="443:5" pos:end="443:28"><name pos:start="443:5" pos:end="443:16">CLOSE_READER</name><argument_list pos:start="443:17" pos:end="443:28">(<argument pos:start="443:18" pos:end="443:19"><expr pos:start="443:18" pos:end="443:19"><name pos:start="443:18" pos:end="443:19">re</name></expr></argument>, <argument pos:start="443:22" pos:end="443:27"><expr pos:start="443:22" pos:end="443:27"><operator pos:start="443:22" pos:end="443:22">&amp;</operator><name pos:start="443:23" pos:end="443:27"><name pos:start="443:23" pos:end="443:23">s</name><operator pos:start="443:24" pos:end="443:25">-&gt;</operator><name pos:start="443:26" pos:end="443:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block>

 <label pos:start="447:2" pos:end="447:11"><name pos:start="447:2" pos:end="447:10">not_coded</name>:</label>

    <if_stmt pos:start="449:5" pos:end="459:5"><if pos:start="449:5" pos:end="459:5">if <condition pos:start="449:8" pos:end="449:20">(<expr pos:start="449:9" pos:end="449:19"><name pos:start="449:9" pos:end="449:19"><name pos:start="449:9" pos:end="449:9">s</name><operator pos:start="449:10" pos:end="449:11">-&gt;</operator><name pos:start="449:12" pos:end="449:19">mb_intra</name></name></expr>)</condition> <block pos:start="449:22" pos:end="459:5">{<block_content pos:start="451:9" pos:end="457:9">

        <expr_stmt pos:start="451:9" pos:end="451:51"><expr pos:start="451:9" pos:end="451:50"><call pos:start="451:9" pos:end="451:50"><name pos:start="451:9" pos:end="451:24">ff_mpeg4_pred_ac</name><argument_list pos:start="451:25" pos:end="451:50">(<argument pos:start="451:26" pos:end="451:26"><expr pos:start="451:26" pos:end="451:26"><name pos:start="451:26" pos:end="451:26">s</name></expr></argument>, <argument pos:start="451:29" pos:end="451:33"><expr pos:start="451:29" pos:end="451:33"><name pos:start="451:29" pos:end="451:33">block</name></expr></argument>, <argument pos:start="451:36" pos:end="451:36"><expr pos:start="451:36" pos:end="451:36"><name pos:start="451:36" pos:end="451:36">n</name></expr></argument>, <argument pos:start="451:39" pos:end="451:49"><expr pos:start="451:39" pos:end="451:49"><name pos:start="451:39" pos:end="451:49">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="453:9" pos:end="457:9"><if pos:start="453:9" pos:end="457:9">if <condition pos:start="453:12" pos:end="453:23">(<expr pos:start="453:13" pos:end="453:22"><name pos:start="453:13" pos:end="453:22"><name pos:start="453:13" pos:end="453:13">s</name><operator pos:start="453:14" pos:end="453:15">-&gt;</operator><name pos:start="453:16" pos:end="453:22">ac_pred</name></name></expr>)</condition> <block pos:start="453:25" pos:end="457:9">{<block_content pos:start="455:13" pos:end="455:19">

            <expr_stmt pos:start="455:13" pos:end="455:19"><expr pos:start="455:13" pos:end="455:18"><name pos:start="455:13" pos:end="455:13">i</name> <operator pos:start="455:15" pos:end="455:15">=</operator> <literal type="number" pos:start="455:17" pos:end="455:18">63</literal></expr>;</expr_stmt> <comment type="block" pos:start="455:21" pos:end="455:42">/* XXX: not optimal */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="461:5" pos:end="461:42"><if pos:start="461:5" pos:end="461:42">if<condition pos:start="461:7" pos:end="461:36">(<expr pos:start="461:8" pos:end="461:35"><name pos:start="461:8" pos:end="461:25"><name pos:start="461:8" pos:end="461:8">s</name><operator pos:start="461:9" pos:end="461:10">-&gt;</operator><name pos:start="461:11" pos:end="461:25">msmpeg4_version</name></name><operator pos:start="461:26" pos:end="461:27">&gt;=</operator><literal type="number" pos:start="461:28" pos:end="461:28">4</literal> <operator pos:start="461:30" pos:end="461:31">&amp;&amp;</operator> <name pos:start="461:33" pos:end="461:33">i</name><operator pos:start="461:34" pos:end="461:34">&gt;</operator><literal type="number" pos:start="461:35" pos:end="461:35">0</literal></expr>)</condition><block type="pseudo" pos:start="461:38" pos:end="461:42"><block_content pos:start="461:38" pos:end="461:42"> <expr_stmt pos:start="461:38" pos:end="461:42"><expr pos:start="461:38" pos:end="461:41"><name pos:start="461:38" pos:end="461:38">i</name><operator pos:start="461:39" pos:end="461:39">=</operator><literal type="number" pos:start="461:40" pos:end="461:41">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="461:44" pos:end="461:63">//FIXME/XXX optimize</comment>

    <expr_stmt pos:start="463:5" pos:end="463:31"><expr pos:start="463:5" pos:end="463:30"><name pos:start="463:5" pos:end="463:26"><name pos:start="463:5" pos:end="463:5">s</name><operator pos:start="463:6" pos:end="463:7">-&gt;</operator><name pos:start="463:8" pos:end="463:23">block_last_index</name><index pos:start="463:24" pos:end="463:26">[<expr pos:start="463:25" pos:end="463:25"><name pos:start="463:25" pos:end="463:25">n</name></expr>]</index></name> <operator pos:start="463:28" pos:end="463:28">=</operator> <name pos:start="463:30" pos:end="463:30">i</name></expr>;</expr_stmt>



    <return pos:start="467:5" pos:end="467:13">return <expr pos:start="467:12" pos:end="467:12"><literal type="number" pos:start="467:12" pos:end="467:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
