<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18033.c" pos:tabs="8"><function pos:start="1:1" pos:end="503:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">output_packet</name><parameter_list pos:start="1:25" pos:end="5:45">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><name pos:start="1:26" pos:end="1:38">AVInputStream</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ist</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:58">ist_index</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:51"><decl pos:start="3:26" pos:end="3:51"><type pos:start="3:26" pos:end="3:51"><name pos:start="3:26" pos:end="3:39">AVOutputStream</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:51">ost_table</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:68">nb_ostreams</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:44"><decl pos:start="5:26" pos:end="5:44"><type pos:start="5:26" pos:end="5:44"><specifier pos:start="5:26" pos:end="5:30">const</specifier> <name pos:start="5:32" pos:end="5:39">AVPacket</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:44">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="503:1">{<block_content pos:start="9:5" pos:end="501:14">

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">AVFormatContext</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:23">os</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">AVOutputStream</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:23">ost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">len</name></decl>, <decl pos:start="15:14" pos:end="15:16"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:16">ret</name></decl>, <decl pos:start="15:19" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:19" pos:end="15:19">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:21">data_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">data_size</name></decl>, <decl pos:start="19:20" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:20" pos:end="19:30">got_picture</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">AVFrame</name></type> <name pos:start="21:13" pos:end="21:19">picture</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:114"><decl pos:start="23:5" pos:end="23:113"><type pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:9">short</name></type> <name pos:start="23:11" pos:end="23:113"><name pos:start="23:11" pos:end="23:17">samples</name><index pos:start="23:18" pos:end="23:113">[<expr pos:start="23:19" pos:end="23:112"><ternary pos:start="23:19" pos:end="23:112"><condition pos:start="23:19" pos:end="23:69"><expr pos:start="23:19" pos:end="23:67"><name pos:start="23:19" pos:end="23:21">pkt</name> <operator pos:start="23:23" pos:end="23:24">&amp;&amp;</operator> <name pos:start="23:26" pos:end="23:34"><name pos:start="23:26" pos:end="23:28">pkt</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:34">size</name></name> <operator pos:start="23:36" pos:end="23:36">&gt;</operator> <name pos:start="23:38" pos:end="23:65">AVCODEC_MAX_AUDIO_FRAME_SIZE</name><operator pos:start="23:66" pos:end="23:66">/</operator><literal type="number" pos:start="23:67" pos:end="23:67">2</literal></expr> ?</condition><then pos:start="23:71" pos:end="23:79"> <expr pos:start="23:71" pos:end="23:79"><name pos:start="23:71" pos:end="23:79"><name pos:start="23:71" pos:end="23:73">pkt</name><operator pos:start="23:74" pos:end="23:75">-&gt;</operator><name pos:start="23:76" pos:end="23:79">size</name></name></expr> </then><else pos:start="23:81" pos:end="23:112">: <expr pos:start="23:83" pos:end="23:112"><name pos:start="23:83" pos:end="23:110">AVCODEC_MAX_AUDIO_FRAME_SIZE</name><operator pos:start="23:111" pos:end="23:111">/</operator><literal type="number" pos:start="23:112" pos:end="23:112">2</literal></expr></else></ternary></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">void</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:24">buffer_to_free</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:42">(<expr pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:11">pkt</name> <operator pos:start="29:13" pos:end="29:14">&amp;&amp;</operator> <name pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:18">pkt</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:23">dts</name></name> <operator pos:start="29:25" pos:end="29:26">!=</operator> <name pos:start="29:28" pos:end="29:41">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="29:44" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:44"> <comment type="line" pos:start="29:46" pos:end="29:98">//FIXME seems redundant, as libavformat does this too</comment>

        <expr_stmt pos:start="31:9" pos:end="31:44"><expr pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:11">ist</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:21">next_pts</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:32"><name pos:start="31:25" pos:end="31:27">ist</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:32">pts</name></name> <operator pos:start="31:34" pos:end="31:34">=</operator> <name pos:start="31:36" pos:end="31:43"><name pos:start="31:36" pos:end="31:38">pkt</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:43">dts</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="37:5">else <block pos:start="33:12" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:42">

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><call pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:14">assert</name><argument_list pos:start="35:15" pos:end="35:41">(<argument pos:start="35:16" pos:end="35:40"><expr pos:start="35:16" pos:end="35:40"><name pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:18">ist</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:23">pts</name></name> <operator pos:start="35:25" pos:end="35:26">==</operator> <name pos:start="35:28" pos:end="35:40"><name pos:start="35:28" pos:end="35:30">ist</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:40">next_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    

    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:11">pkt</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <name pos:start="41:16" pos:end="41:19">NULL</name></expr>)</condition> <block pos:start="41:22" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:24">

        <comment type="block" pos:start="43:9" pos:end="43:26">/* EOF handling */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:19"><expr pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:11">ptr</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:18">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">len</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:24">goto <name pos:start="49:14" pos:end="49:23">handle_eof</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:7">len</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <name pos:start="55:11" pos:end="55:19"><name pos:start="55:11" pos:end="55:13">pkt</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:19">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:20"><expr pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:7">ptr</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:19"><name pos:start="57:11" pos:end="57:13">pkt</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:19">data</name></name></expr>;</expr_stmt>

    <while pos:start="59:5" pos:end="389:9">while <condition pos:start="59:11" pos:end="59:19">(<expr pos:start="59:12" pos:end="59:18"><name pos:start="59:12" pos:end="59:14">len</name> <operator pos:start="59:16" pos:end="59:16">&gt;</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>)</condition> <block pos:start="59:21" pos:end="389:9">{<block_content pos:start="61:5" pos:end="387:36">

    <label pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:14">handle_eof</name>:</label>

        <comment type="block" pos:start="63:9" pos:end="63:41">/* decode the packet if needed */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:16">data_buf</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:23">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="65:26" pos:end="65:40">/* fail safe */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17">data_size</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="169:13"><if pos:start="69:9" pos:end="159:13">if <condition pos:start="69:12" pos:end="69:33">(<expr pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:15">ist</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:32">decoding_needed</name></name></expr>)</condition> <block pos:start="69:35" pos:end="159:13">{<block_content pos:start="71:13" pos:end="157:17">

            <switch pos:start="71:13" pos:end="157:17">switch<condition pos:start="71:19" pos:end="71:45">(<expr pos:start="71:20" pos:end="71:44"><name pos:start="71:20" pos:end="71:44"><name pos:start="71:20" pos:end="71:22">ist</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:26">st</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:33">codec</name><operator pos:start="71:34" pos:end="71:34">.</operator><name pos:start="71:35" pos:end="71:44">codec_type</name></name></expr>)</condition> <block pos:start="71:47" pos:end="157:17">{<block_content pos:start="73:13" pos:end="155:37">

            <case pos:start="73:13" pos:end="73:34">case <expr pos:start="73:18" pos:end="73:33"><name pos:start="73:18" pos:end="73:33">CODEC_TYPE_AUDIO</name></expr>:</case>

                    <comment type="block" pos:start="75:21" pos:end="77:43">/* XXX: could avoid copy if PCM 16 bits with same

                       endianness as CPU */</comment>

                <expr_stmt pos:start="79:17" pos:end="81:53"><expr pos:start="79:17" pos:end="81:52"><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="81:52"><name pos:start="79:23" pos:end="79:42">avcodec_decode_audio</name><argument_list pos:start="79:43" pos:end="81:52">(<argument pos:start="79:44" pos:end="79:58"><expr pos:start="79:44" pos:end="79:58"><operator pos:start="79:44" pos:end="79:44">&amp;</operator><name pos:start="79:45" pos:end="79:58"><name pos:start="79:45" pos:end="79:47">ist</name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:51">st</name><operator pos:start="79:52" pos:end="79:53">-&gt;</operator><name pos:start="79:54" pos:end="79:58">codec</name></name></expr></argument>, <argument pos:start="79:61" pos:end="79:67"><expr pos:start="79:61" pos:end="79:67"><name pos:start="79:61" pos:end="79:67">samples</name></expr></argument>, <argument pos:start="79:70" pos:end="79:79"><expr pos:start="79:70" pos:end="79:79"><operator pos:start="79:70" pos:end="79:70">&amp;</operator><name pos:start="79:71" pos:end="79:79">data_size</name></expr></argument>,

                                           <argument pos:start="81:44" pos:end="81:46"><expr pos:start="81:44" pos:end="81:46"><name pos:start="81:44" pos:end="81:46">ptr</name></expr></argument>, <argument pos:start="81:49" pos:end="81:51"><expr pos:start="81:49" pos:end="81:51"><name pos:start="81:49" pos:end="81:51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="85:37"><if pos:start="83:17" pos:end="85:37">if <condition pos:start="83:20" pos:end="83:28">(<expr pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:23">ret</name> <operator pos:start="83:25" pos:end="83:25">&lt;</operator> <literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:37"><block_content pos:start="85:21" pos:end="85:37">

                    <goto pos:start="85:21" pos:end="85:37">goto <name pos:start="85:26" pos:end="85:36">fail_decode</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:27"><expr pos:start="87:17" pos:end="87:26"><name pos:start="87:17" pos:end="87:19">ptr</name> <operator pos:start="87:21" pos:end="87:22">+=</operator> <name pos:start="87:24" pos:end="87:26">ret</name></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:27"><expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:19">len</name> <operator pos:start="89:21" pos:end="89:22">-=</operator> <name pos:start="89:24" pos:end="89:26">ret</name></expr>;</expr_stmt>

                <comment type="block" pos:start="91:17" pos:end="91:58">/* Some bug in mpeg audio decoder gives */</comment>

                <comment type="block" pos:start="93:17" pos:end="93:64">/* data_size &lt; 0, it seems they are overflows */</comment>

                <if_stmt pos:start="95:17" pos:end="101:17"><if pos:start="95:17" pos:end="101:17">if <condition pos:start="95:20" pos:end="95:35">(<expr pos:start="95:21" pos:end="95:34"><name pos:start="95:21" pos:end="95:29">data_size</name> <operator pos:start="95:31" pos:end="95:32">&lt;=</operator> <literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr>)</condition> <block pos:start="95:37" pos:end="101:17">{<block_content pos:start="99:21" pos:end="99:29">

                    <comment type="block" pos:start="97:21" pos:end="97:40">/* no audio frame */</comment>

                    <continue pos:start="99:21" pos:end="99:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:46"><expr pos:start="103:17" pos:end="103:45"><name pos:start="103:17" pos:end="103:24">data_buf</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <operator pos:start="103:28" pos:end="103:28">(</operator><name pos:start="103:29" pos:end="103:35">uint8_t</name> <operator pos:start="103:37" pos:end="103:37">*</operator><operator pos:start="103:38" pos:end="103:38">)</operator><name pos:start="103:39" pos:end="103:45">samples</name></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="107:75"><expr pos:start="105:17" pos:end="107:74"><name pos:start="105:17" pos:end="105:29"><name pos:start="105:17" pos:end="105:19">ist</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:29">next_pts</name></name> <operator pos:start="105:31" pos:end="105:32">+=</operator> <operator pos:start="105:34" pos:end="105:34">(</operator><operator pos:start="105:35" pos:end="105:35">(</operator><name pos:start="105:36" pos:end="105:42">int64_t</name><operator pos:start="105:43" pos:end="105:43">)</operator><name pos:start="105:44" pos:end="105:55">AV_TIME_BASE</name><operator pos:start="105:56" pos:end="105:56">/</operator><literal type="number" pos:start="105:57" pos:end="105:57">2</literal> <operator pos:start="105:59" pos:end="105:59">*</operator> <name pos:start="105:61" pos:end="105:69">data_size</name><operator pos:start="105:70" pos:end="105:70">)</operator> <operator pos:start="105:72" pos:end="105:72">/</operator> 

                    <operator pos:start="107:21" pos:end="107:21">(</operator><name pos:start="107:22" pos:end="107:47"><name pos:start="107:22" pos:end="107:24">ist</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:28">st</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:35">codec</name><operator pos:start="107:36" pos:end="107:36">.</operator><name pos:start="107:37" pos:end="107:47">sample_rate</name></name> <operator pos:start="107:49" pos:end="107:49">*</operator> <name pos:start="107:51" pos:end="107:73"><name pos:start="107:51" pos:end="107:53">ist</name><operator pos:start="107:54" pos:end="107:55">-&gt;</operator><name pos:start="107:56" pos:end="107:57">st</name><operator pos:start="107:58" pos:end="107:59">-&gt;</operator><name pos:start="107:60" pos:end="107:64">codec</name><operator pos:start="107:65" pos:end="107:65">.</operator><name pos:start="107:66" pos:end="107:73">channels</name></name><operator pos:start="107:74" pos:end="107:74">)</operator></expr>;</expr_stmt>

                <break pos:start="109:17" pos:end="109:22">break;</break>

            <case pos:start="111:13" pos:end="111:34">case <expr pos:start="111:18" pos:end="111:33"><name pos:start="111:18" pos:end="111:33">CODEC_TYPE_VIDEO</name></expr>:</case>

                    <expr_stmt pos:start="113:21" pos:end="113:87"><expr pos:start="113:21" pos:end="113:86"><name pos:start="113:21" pos:end="113:29">data_size</name> <operator pos:start="113:31" pos:end="113:31">=</operator> <operator pos:start="113:33" pos:end="113:33">(</operator><name pos:start="113:34" pos:end="113:53"><name pos:start="113:34" pos:end="113:36">ist</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:40">st</name><operator pos:start="113:41" pos:end="113:42">-&gt;</operator><name pos:start="113:43" pos:end="113:47">codec</name><operator pos:start="113:48" pos:end="113:48">.</operator><name pos:start="113:49" pos:end="113:53">width</name></name> <operator pos:start="113:55" pos:end="113:55">*</operator> <name pos:start="113:57" pos:end="113:77"><name pos:start="113:57" pos:end="113:59">ist</name><operator pos:start="113:60" pos:end="113:61">-&gt;</operator><name pos:start="113:62" pos:end="113:63">st</name><operator pos:start="113:64" pos:end="113:65">-&gt;</operator><name pos:start="113:66" pos:end="113:70">codec</name><operator pos:start="113:71" pos:end="113:71">.</operator><name pos:start="113:72" pos:end="113:77">height</name></name> <operator pos:start="113:79" pos:end="113:79">*</operator> <literal type="number" pos:start="113:81" pos:end="113:81">3</literal><operator pos:start="113:82" pos:end="113:82">)</operator> <operator pos:start="113:84" pos:end="113:84">/</operator> <literal type="number" pos:start="113:86" pos:end="113:86">2</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="115:21" pos:end="115:57">/* XXX: allocate picture correctly */</comment>

                    <expr_stmt pos:start="117:21" pos:end="117:57"><expr pos:start="117:21" pos:end="117:56"><call pos:start="117:21" pos:end="117:56"><name pos:start="117:21" pos:end="117:46">avcodec_get_frame_defaults</name><argument_list pos:start="117:47" pos:end="117:56">(<argument pos:start="117:48" pos:end="117:55"><expr pos:start="117:48" pos:end="117:55"><operator pos:start="117:48" pos:end="117:48">&amp;</operator><name pos:start="117:49" pos:end="117:55">picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="121:21" pos:end="123:81"><expr pos:start="121:21" pos:end="123:80"><name pos:start="121:21" pos:end="121:23">ret</name> <operator pos:start="121:25" pos:end="121:25">=</operator> <call pos:start="121:27" pos:end="123:80"><name pos:start="121:27" pos:end="121:46">avcodec_decode_video</name><argument_list pos:start="121:47" pos:end="123:80">(<argument pos:start="121:48" pos:end="121:62"><expr pos:start="121:48" pos:end="121:62"><operator pos:start="121:48" pos:end="121:48">&amp;</operator><name pos:start="121:49" pos:end="121:62"><name pos:start="121:49" pos:end="121:51">ist</name><operator pos:start="121:52" pos:end="121:53">-&gt;</operator><name pos:start="121:54" pos:end="121:55">st</name><operator pos:start="121:56" pos:end="121:57">-&gt;</operator><name pos:start="121:58" pos:end="121:62">codec</name></name></expr></argument>, 

                                               <argument pos:start="123:48" pos:end="123:55"><expr pos:start="123:48" pos:end="123:55"><operator pos:start="123:48" pos:end="123:48">&amp;</operator><name pos:start="123:49" pos:end="123:55">picture</name></expr></argument>, <argument pos:start="123:58" pos:end="123:69"><expr pos:start="123:58" pos:end="123:69"><operator pos:start="123:58" pos:end="123:58">&amp;</operator><name pos:start="123:59" pos:end="123:69">got_picture</name></expr></argument>, <argument pos:start="123:72" pos:end="123:74"><expr pos:start="123:72" pos:end="123:74"><name pos:start="123:72" pos:end="123:74">ptr</name></expr></argument>, <argument pos:start="123:77" pos:end="123:79"><expr pos:start="123:77" pos:end="123:79"><name pos:start="123:77" pos:end="123:79">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:54"><expr pos:start="125:21" pos:end="125:53"><name pos:start="125:21" pos:end="125:36"><name pos:start="125:21" pos:end="125:23">ist</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:27">st</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:36">quality</name></name><operator pos:start="125:37" pos:end="125:37">=</operator> <name pos:start="125:39" pos:end="125:53"><name pos:start="125:39" pos:end="125:45">picture</name><operator pos:start="125:46" pos:end="125:46">.</operator><name pos:start="125:47" pos:end="125:53">quality</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="127:21" pos:end="129:41"><if pos:start="127:21" pos:end="129:41">if <condition pos:start="127:24" pos:end="127:32">(<expr pos:start="127:25" pos:end="127:31"><name pos:start="127:25" pos:end="127:27">ret</name> <operator pos:start="127:29" pos:end="127:29">&lt;</operator> <literal type="number" pos:start="127:31" pos:end="127:31">0</literal></expr>)</condition><block type="pseudo" pos:start="129:25" pos:end="129:41"><block_content pos:start="129:25" pos:end="129:41"> 

                        <goto pos:start="129:25" pos:end="129:41">goto <name pos:start="129:30" pos:end="129:40">fail_decode</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="131:21" pos:end="137:21"><if pos:start="131:21" pos:end="137:21">if <condition pos:start="131:24" pos:end="131:37">(<expr pos:start="131:25" pos:end="131:36"><operator pos:start="131:25" pos:end="131:25">!</operator><name pos:start="131:26" pos:end="131:36">got_picture</name></expr>)</condition> <block pos:start="131:39" pos:end="137:21">{<block_content pos:start="135:25" pos:end="135:44">

                        <comment type="block" pos:start="133:25" pos:end="133:44">/* no picture yet */</comment>

                        <goto pos:start="135:25" pos:end="135:44">goto <name pos:start="135:30" pos:end="135:43">discard_packet</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="139:21" pos:end="147:21"><if pos:start="139:21" pos:end="147:21">if <condition pos:start="139:24" pos:end="139:60">(<expr pos:start="139:25" pos:end="139:59"><name pos:start="139:25" pos:end="139:54"><name pos:start="139:25" pos:end="139:27">ist</name><operator pos:start="139:28" pos:end="139:29">-&gt;</operator><name pos:start="139:30" pos:end="139:31">st</name><operator pos:start="139:32" pos:end="139:33">-&gt;</operator><name pos:start="139:34" pos:end="139:38">codec</name><operator pos:start="139:39" pos:end="139:39">.</operator><name pos:start="139:40" pos:end="139:54">frame_rate_base</name></name> <operator pos:start="139:56" pos:end="139:57">!=</operator> <literal type="number" pos:start="139:59" pos:end="139:59">0</literal></expr>)</condition> <block pos:start="139:62" pos:end="147:21">{<block_content pos:start="141:25" pos:end="145:54">

                        <expr_stmt pos:start="141:25" pos:end="145:54"><expr pos:start="141:25" pos:end="145:53"><name pos:start="141:25" pos:end="141:37"><name pos:start="141:25" pos:end="141:27">ist</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:37">next_pts</name></name> <operator pos:start="141:39" pos:end="141:40">+=</operator> <operator pos:start="141:42" pos:end="141:42">(</operator><operator pos:start="141:43" pos:end="141:43">(</operator><name pos:start="141:44" pos:end="141:50">int64_t</name><operator pos:start="141:51" pos:end="141:51">)</operator><name pos:start="141:52" pos:end="141:63">AV_TIME_BASE</name> <operator pos:start="141:65" pos:end="141:65">*</operator> 

                                          <name pos:start="143:43" pos:end="143:72"><name pos:start="143:43" pos:end="143:45">ist</name><operator pos:start="143:46" pos:end="143:47">-&gt;</operator><name pos:start="143:48" pos:end="143:49">st</name><operator pos:start="143:50" pos:end="143:51">-&gt;</operator><name pos:start="143:52" pos:end="143:56">codec</name><operator pos:start="143:57" pos:end="143:57">.</operator><name pos:start="143:58" pos:end="143:72">frame_rate_base</name></name><operator pos:start="143:73" pos:end="143:73">)</operator> <operator pos:start="143:75" pos:end="143:75">/</operator>

                            <name pos:start="145:29" pos:end="145:53"><name pos:start="145:29" pos:end="145:31">ist</name><operator pos:start="145:32" pos:end="145:33">-&gt;</operator><name pos:start="145:34" pos:end="145:35">st</name><operator pos:start="145:36" pos:end="145:37">-&gt;</operator><name pos:start="145:38" pos:end="145:42">codec</name><operator pos:start="145:43" pos:end="145:43">.</operator><name pos:start="145:44" pos:end="145:53">frame_rate</name></name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:28"><expr pos:start="149:21" pos:end="149:27"><name pos:start="149:21" pos:end="149:23">len</name> <operator pos:start="149:25" pos:end="149:25">=</operator> <literal type="number" pos:start="149:27" pos:end="149:27">0</literal></expr>;</expr_stmt>

                    <break pos:start="151:21" pos:end="151:26">break;</break>

                <default pos:start="153:17" pos:end="153:24">default:</default>

                    <goto pos:start="155:21" pos:end="155:37">goto <name pos:start="155:26" pos:end="155:36">fail_decode</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="159:15" pos:end="169:13">else <block pos:start="159:20" pos:end="169:13">{<block_content pos:start="161:17" pos:end="167:24">

                <expr_stmt pos:start="161:17" pos:end="161:31"><expr pos:start="161:17" pos:end="161:30"><name pos:start="161:17" pos:end="161:24">data_buf</name> <operator pos:start="161:26" pos:end="161:26">=</operator> <name pos:start="161:28" pos:end="161:30">ptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:32"><expr pos:start="163:17" pos:end="163:31"><name pos:start="163:17" pos:end="163:25">data_size</name> <operator pos:start="163:27" pos:end="163:27">=</operator> <name pos:start="163:29" pos:end="163:31">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:26"><expr pos:start="165:17" pos:end="165:25"><name pos:start="165:17" pos:end="165:19">ret</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <name pos:start="165:23" pos:end="165:25">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:24"><expr pos:start="167:17" pos:end="167:23"><name pos:start="167:17" pos:end="167:19">len</name> <operator pos:start="167:21" pos:end="167:21">=</operator> <literal type="number" pos:start="167:23" pos:end="167:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="173:13" pos:end="173:34"><expr pos:start="173:13" pos:end="173:33"><name pos:start="173:13" pos:end="173:26">buffer_to_free</name> <operator pos:start="173:28" pos:end="173:28">=</operator> <name pos:start="173:30" pos:end="173:33">NULL</name></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="181:13"><if pos:start="175:13" pos:end="181:13">if <condition pos:start="175:16" pos:end="175:62">(<expr pos:start="175:17" pos:end="175:61"><name pos:start="175:17" pos:end="175:41"><name pos:start="175:17" pos:end="175:19">ist</name><operator pos:start="175:20" pos:end="175:21">-&gt;</operator><name pos:start="175:22" pos:end="175:23">st</name><operator pos:start="175:24" pos:end="175:25">-&gt;</operator><name pos:start="175:26" pos:end="175:30">codec</name><operator pos:start="175:31" pos:end="175:31">.</operator><name pos:start="175:32" pos:end="175:41">codec_type</name></name> <operator pos:start="175:43" pos:end="175:44">==</operator> <name pos:start="175:46" pos:end="175:61">CODEC_TYPE_VIDEO</name></expr>)</condition> <block pos:start="175:64" pos:end="181:13">{<block_content pos:start="177:17" pos:end="179:57">

                <expr_stmt pos:start="177:17" pos:end="179:57"><expr pos:start="177:17" pos:end="179:56"><call pos:start="177:17" pos:end="179:56"><name pos:start="177:17" pos:end="177:39">pre_process_video_frame</name><argument_list pos:start="177:40" pos:end="179:56">(<argument pos:start="177:41" pos:end="177:43"><expr pos:start="177:41" pos:end="177:43"><name pos:start="177:41" pos:end="177:43">ist</name></expr></argument>, <argument pos:start="177:46" pos:end="177:66"><expr pos:start="177:46" pos:end="177:66"><operator pos:start="177:46" pos:end="177:46">(</operator><name pos:start="177:47" pos:end="177:55">AVPicture</name> <operator pos:start="177:57" pos:end="177:57">*</operator><operator pos:start="177:58" pos:end="177:58">)</operator><operator pos:start="177:59" pos:end="177:59">&amp;</operator><name pos:start="177:60" pos:end="177:66">picture</name></expr></argument>, 

                                        <argument pos:start="179:41" pos:end="179:55"><expr pos:start="179:41" pos:end="179:55"><operator pos:start="179:41" pos:end="179:41">&amp;</operator><name pos:start="179:42" pos:end="179:55">buffer_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="185:13" pos:end="185:38">/* frame rate emulation */</comment>

            <if_stmt pos:start="187:13" pos:end="230:0"><if pos:start="187:13" pos:end="230:0">if <condition pos:start="187:16" pos:end="187:40">(<expr pos:start="187:17" pos:end="187:39"><name pos:start="187:17" pos:end="187:39"><name pos:start="187:17" pos:end="187:19">ist</name><operator pos:start="187:20" pos:end="187:21">-&gt;</operator><name pos:start="187:22" pos:end="187:23">st</name><operator pos:start="187:24" pos:end="187:25">-&gt;</operator><name pos:start="187:26" pos:end="187:30">codec</name><operator pos:start="187:31" pos:end="187:31">.</operator><name pos:start="187:32" pos:end="187:39">rate_emu</name></name></expr>)</condition> <block pos:start="187:42" pos:end="230:0">{<block_content pos:start="189:17" pos:end="199:29">

                <decl_stmt pos:start="189:17" pos:end="189:132"><decl pos:start="189:17" pos:end="189:131"><type pos:start="189:17" pos:end="189:23"><name pos:start="189:17" pos:end="189:23">int64_t</name></type> <name pos:start="189:25" pos:end="189:27">pts</name> <init pos:start="189:29" pos:end="189:131">= <expr pos:start="189:31" pos:end="189:131"><call pos:start="189:31" pos:end="189:131"><name pos:start="189:31" pos:end="189:40">av_rescale</name><argument_list pos:start="189:41" pos:end="189:131">(<argument pos:start="189:42" pos:end="189:94"><expr pos:start="189:42" pos:end="189:94"><operator pos:start="189:42" pos:end="189:42">(</operator><name pos:start="189:43" pos:end="189:49">int64_t</name><operator pos:start="189:50" pos:end="189:50">)</operator> <name pos:start="189:52" pos:end="189:61"><name pos:start="189:52" pos:end="189:54">ist</name><operator pos:start="189:55" pos:end="189:56">-&gt;</operator><name pos:start="189:57" pos:end="189:61">frame</name></name> <operator pos:start="189:63" pos:end="189:63">*</operator> <name pos:start="189:65" pos:end="189:94"><name pos:start="189:65" pos:end="189:67">ist</name><operator pos:start="189:68" pos:end="189:69">-&gt;</operator><name pos:start="189:70" pos:end="189:71">st</name><operator pos:start="189:72" pos:end="189:73">-&gt;</operator><name pos:start="189:74" pos:end="189:78">codec</name><operator pos:start="189:79" pos:end="189:79">.</operator><name pos:start="189:80" pos:end="189:94">frame_rate_base</name></name></expr></argument>, <argument pos:start="189:97" pos:end="189:103"><expr pos:start="189:97" pos:end="189:103"><literal type="number" pos:start="189:97" pos:end="189:103">1000000</literal></expr></argument>, <argument pos:start="189:106" pos:end="189:130"><expr pos:start="189:106" pos:end="189:130"><name pos:start="189:106" pos:end="189:130"><name pos:start="189:106" pos:end="189:108">ist</name><operator pos:start="189:109" pos:end="189:110">-&gt;</operator><name pos:start="189:111" pos:end="189:112">st</name><operator pos:start="189:113" pos:end="189:114">-&gt;</operator><name pos:start="189:115" pos:end="189:119">codec</name><operator pos:start="189:120" pos:end="189:120">.</operator><name pos:start="189:121" pos:end="189:130">frame_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="191:17" pos:end="191:56"><decl pos:start="191:17" pos:end="191:55"><type pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:23">int64_t</name></type> <name pos:start="191:25" pos:end="191:27">now</name> <init pos:start="191:29" pos:end="191:55">= <expr pos:start="191:31" pos:end="191:55"><call pos:start="191:31" pos:end="191:42"><name pos:start="191:31" pos:end="191:40">av_gettime</name><argument_list pos:start="191:41" pos:end="191:42">()</argument_list></call> <operator pos:start="191:44" pos:end="191:44">-</operator> <name pos:start="191:46" pos:end="191:55"><name pos:start="191:46" pos:end="191:48">ist</name><operator pos:start="191:49" pos:end="191:50">-&gt;</operator><name pos:start="191:51" pos:end="191:55">start</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="193:17" pos:end="195:38"><if pos:start="193:17" pos:end="195:38">if <condition pos:start="193:20" pos:end="193:30">(<expr pos:start="193:21" pos:end="193:29"><name pos:start="193:21" pos:end="193:23">pts</name> <operator pos:start="193:25" pos:end="193:25">&gt;</operator> <name pos:start="193:27" pos:end="193:29">now</name></expr>)</condition><block type="pseudo" pos:start="195:21" pos:end="195:38"><block_content pos:start="195:21" pos:end="195:38">

                    <expr_stmt pos:start="195:21" pos:end="195:38"><expr pos:start="195:21" pos:end="195:37"><call pos:start="195:21" pos:end="195:37"><name pos:start="195:21" pos:end="195:26">usleep</name><argument_list pos:start="195:27" pos:end="195:37">(<argument pos:start="195:28" pos:end="195:36"><expr pos:start="195:28" pos:end="195:36"><name pos:start="195:28" pos:end="195:30">pts</name> <operator pos:start="195:32" pos:end="195:32">-</operator> <name pos:start="195:34" pos:end="195:36">now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <expr_stmt pos:start="199:17" pos:end="199:29"><expr pos:start="199:17" pos:end="199:28"><name pos:start="199:17" pos:end="199:26"><name pos:start="199:17" pos:end="199:19">ist</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:26">frame</name></name><operator pos:start="199:27" pos:end="199:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



<cpp:if pos:start="205:1" pos:end="205:5">#<cpp:directive pos:start="205:2" pos:end="205:3">if</cpp:directive> <expr pos:start="205:5" pos:end="205:5"><literal type="number" pos:start="205:5" pos:end="205:5">0</literal></expr></cpp:if>

            <comment type="block" pos:start="207:13" pos:end="209:54">/* mpeg PTS deordering : if it is a P or I frame, the PTS

               is the one of the next displayed one */</comment>

            <comment type="block" pos:start="211:13" pos:end="211:38">/* XXX: add mpeg4 too ? */</comment>

            if (ist-&gt;st-&gt;codec.codec_id == CODEC_ID_MPEG1VIDEO) {

                if (ist-&gt;st-&gt;codec.pict_type != B_TYPE) {

                    int64_t tmp;

                    tmp = ist-&gt;last_ip_pts;

                    ist-&gt;last_ip_pts  = ist-&gt;frac_pts.val;

                    ist-&gt;frac_pts.val = tmp;

                }

            }

<cpp:endif pos:start="229:1" pos:end="229:6">#<cpp:directive pos:start="229:2" pos:end="229:6">endif</cpp:directive></cpp:endif>

            <comment type="block" pos:start="231:13" pos:end="233:48">/* if output time reached then transcode raw format, 

	       encode packets and output them */</comment>

            <if_stmt pos:start="235:13" pos:end="385:17"><if pos:start="235:13" pos:end="385:17">if <condition pos:start="235:16" pos:end="235:58">(<expr pos:start="235:17" pos:end="235:57"><name pos:start="235:17" pos:end="235:26">start_time</name> <operator pos:start="235:28" pos:end="235:29">==</operator> <literal type="number" pos:start="235:31" pos:end="235:31">0</literal> <operator pos:start="235:33" pos:end="235:34">||</operator> <name pos:start="235:36" pos:end="235:43"><name pos:start="235:36" pos:end="235:38">ist</name><operator pos:start="235:39" pos:end="235:40">-&gt;</operator><name pos:start="235:41" pos:end="235:43">pts</name></name> <operator pos:start="235:45" pos:end="235:46">&gt;=</operator> <name pos:start="235:48" pos:end="235:57">start_time</name></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="385:17"><block_content pos:start="237:17" pos:end="385:17">

                <for pos:start="237:17" pos:end="385:17">for<control pos:start="237:20" pos:end="237:42">(<init pos:start="237:21" pos:end="237:24"><expr pos:start="237:21" pos:end="237:23"><name pos:start="237:21" pos:end="237:21">i</name><operator pos:start="237:22" pos:end="237:22">=</operator><literal type="number" pos:start="237:23" pos:end="237:23">0</literal></expr>;</init><condition pos:start="237:25" pos:end="237:38"><expr pos:start="237:25" pos:end="237:37"><name pos:start="237:25" pos:end="237:25">i</name><operator pos:start="237:26" pos:end="237:26">&lt;</operator><name pos:start="237:27" pos:end="237:37">nb_ostreams</name></expr>;</condition><incr pos:start="237:39" pos:end="237:41"><expr pos:start="237:39" pos:end="237:41"><name pos:start="237:39" pos:end="237:39">i</name><operator pos:start="237:40" pos:end="237:41">++</operator></expr></incr>)</control> <block pos:start="237:44" pos:end="385:17">{<block_content pos:start="239:21" pos:end="383:21">

                    <decl_stmt pos:start="239:21" pos:end="239:35"><decl pos:start="239:21" pos:end="239:34"><type pos:start="239:21" pos:end="239:23"><name pos:start="239:21" pos:end="239:23">int</name></type> <name pos:start="239:25" pos:end="239:34">frame_size</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="243:21" pos:end="243:39"><expr pos:start="243:21" pos:end="243:38"><name pos:start="243:21" pos:end="243:23">ost</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <name pos:start="243:27" pos:end="243:38"><name pos:start="243:27" pos:end="243:35">ost_table</name><index pos:start="243:36" pos:end="243:38">[<expr pos:start="243:37" pos:end="243:37"><name pos:start="243:37" pos:end="243:37">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="245:21" pos:end="383:21"><if pos:start="245:21" pos:end="383:21">if <condition pos:start="245:24" pos:end="245:55">(<expr pos:start="245:25" pos:end="245:54"><name pos:start="245:25" pos:end="245:41"><name pos:start="245:25" pos:end="245:27">ost</name><operator pos:start="245:28" pos:end="245:29">-&gt;</operator><name pos:start="245:30" pos:end="245:41">source_index</name></name> <operator pos:start="245:43" pos:end="245:44">==</operator> <name pos:start="245:46" pos:end="245:54">ist_index</name></expr>)</condition> <block pos:start="245:57" pos:end="383:21">{<block_content pos:start="247:25" pos:end="381:25">

                        <expr_stmt pos:start="247:25" pos:end="262:0"><expr pos:start="247:25" pos:end="247:58"><name pos:start="247:25" pos:end="247:26">os</name> <operator pos:start="247:28" pos:end="247:28">=</operator> <name pos:start="247:30" pos:end="247:58"><name pos:start="247:30" pos:end="247:41">output_files</name><index pos:start="247:42" pos:end="247:58">[<expr pos:start="247:43" pos:end="247:57"><name pos:start="247:43" pos:end="247:57"><name pos:start="247:43" pos:end="247:45">ost</name><operator pos:start="247:46" pos:end="247:47">-&gt;</operator><name pos:start="247:48" pos:end="247:57">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>



<cpp:if pos:start="251:1" pos:end="251:5">#<cpp:directive pos:start="251:2" pos:end="251:3">if</cpp:directive> <expr pos:start="251:5" pos:end="251:5"><literal type="number" pos:start="251:5" pos:end="251:5">0</literal></expr></cpp:if>

                        printf("%d: got pts=%0.3f %0.3f\n", i, 

                               (double)pkt-&gt;pts / AV_TIME_BASE, 

                               ((double)ist-&gt;pts / AV_TIME_BASE) - 

                               ((double)ost-&gt;st-&gt;pts.val * ost-&gt;st-&gt;time_base.num / ost-&gt;st-&gt;time_base.den));

<cpp:endif pos:start="261:1" pos:end="261:6">#<cpp:directive pos:start="261:2" pos:end="261:6">endif</cpp:directive></cpp:endif>

                        <comment type="block" pos:start="263:25" pos:end="263:60">/* set the input output pts pairs */</comment>

                        <expr_stmt pos:start="265:25" pos:end="265:115"><expr pos:start="265:25" pos:end="265:114"><name pos:start="265:25" pos:end="265:38"><name pos:start="265:25" pos:end="265:27">ost</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:38">sync_ipts</name></name> <operator pos:start="265:40" pos:end="265:40">=</operator> <operator pos:start="265:42" pos:end="265:42">(</operator><name pos:start="265:43" pos:end="265:48">double</name><operator pos:start="265:49" pos:end="265:49">)</operator><operator pos:start="265:50" pos:end="265:50">(</operator><name pos:start="265:51" pos:end="265:58"><name pos:start="265:51" pos:end="265:53">ist</name><operator pos:start="265:54" pos:end="265:55">-&gt;</operator><name pos:start="265:56" pos:end="265:58">pts</name></name> <operator pos:start="265:60" pos:end="265:60">+</operator> <name pos:start="265:62" pos:end="265:99"><name pos:start="265:62" pos:end="265:82">input_files_ts_offset</name><index pos:start="265:83" pos:end="265:99">[<expr pos:start="265:84" pos:end="265:98"><name pos:start="265:84" pos:end="265:98"><name pos:start="265:84" pos:end="265:86">ist</name><operator pos:start="265:87" pos:end="265:88">-&gt;</operator><name pos:start="265:89" pos:end="265:98">file_index</name></name></expr>]</index></name><operator pos:start="265:100" pos:end="265:100">)</operator><operator pos:start="265:101" pos:end="265:101">/</operator> <name pos:start="265:103" pos:end="265:114">AV_TIME_BASE</name></expr>;</expr_stmt>



                        <if_stmt pos:start="269:25" pos:end="381:25"><if pos:start="269:25" pos:end="327:25">if <condition pos:start="269:28" pos:end="269:49">(<expr pos:start="269:29" pos:end="269:48"><name pos:start="269:29" pos:end="269:48"><name pos:start="269:29" pos:end="269:31">ost</name><operator pos:start="269:32" pos:end="269:33">-&gt;</operator><name pos:start="269:34" pos:end="269:48">encoding_needed</name></name></expr>)</condition> <block pos:start="269:51" pos:end="327:25">{<block_content pos:start="271:29" pos:end="325:29">

                            <switch pos:start="271:29" pos:end="325:29">switch<condition pos:start="271:35" pos:end="271:61">(<expr pos:start="271:36" pos:end="271:60"><name pos:start="271:36" pos:end="271:60"><name pos:start="271:36" pos:end="271:38">ost</name><operator pos:start="271:39" pos:end="271:40">-&gt;</operator><name pos:start="271:41" pos:end="271:42">st</name><operator pos:start="271:43" pos:end="271:44">-&gt;</operator><name pos:start="271:45" pos:end="271:49">codec</name><operator pos:start="271:50" pos:end="271:50">.</operator><name pos:start="271:51" pos:end="271:60">codec_type</name></name></expr>)</condition> <block pos:start="271:63" pos:end="325:29">{<block_content pos:start="273:29" pos:end="323:43">

                            <case pos:start="273:29" pos:end="273:50">case <expr pos:start="273:34" pos:end="273:49"><name pos:start="273:34" pos:end="273:49">CODEC_TYPE_AUDIO</name></expr>:</case>

                                <expr_stmt pos:start="275:33" pos:end="275:80"><expr pos:start="275:33" pos:end="275:79"><call pos:start="275:33" pos:end="275:79"><name pos:start="275:33" pos:end="275:44">do_audio_out</name><argument_list pos:start="275:45" pos:end="275:79">(<argument pos:start="275:46" pos:end="275:47"><expr pos:start="275:46" pos:end="275:47"><name pos:start="275:46" pos:end="275:47">os</name></expr></argument>, <argument pos:start="275:50" pos:end="275:52"><expr pos:start="275:50" pos:end="275:52"><name pos:start="275:50" pos:end="275:52">ost</name></expr></argument>, <argument pos:start="275:55" pos:end="275:57"><expr pos:start="275:55" pos:end="275:57"><name pos:start="275:55" pos:end="275:57">ist</name></expr></argument>, <argument pos:start="275:60" pos:end="275:67"><expr pos:start="275:60" pos:end="275:67"><name pos:start="275:60" pos:end="275:67">data_buf</name></expr></argument>, <argument pos:start="275:70" pos:end="275:78"><expr pos:start="275:70" pos:end="275:78"><name pos:start="275:70" pos:end="275:78">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="277:33" pos:end="277:38">break;</break>

                            <case pos:start="279:29" pos:end="279:50">case <expr pos:start="279:34" pos:end="279:49"><name pos:start="279:34" pos:end="279:49">CODEC_TYPE_VIDEO</name></expr>:</case>

                                <comment type="block" pos:start="281:33" pos:end="281:70">/* find an audio stream for synchro */</comment>

                                <block pos:start="283:33" pos:end="317:33">{<block_content pos:start="285:37" pos:end="315:76">

                                    <decl_stmt pos:start="285:37" pos:end="285:42"><decl pos:start="285:37" pos:end="285:41"><type pos:start="285:37" pos:end="285:39"><name pos:start="285:37" pos:end="285:39">int</name></type> <name pos:start="285:41" pos:end="285:41">i</name></decl>;</decl_stmt>

                                    <decl_stmt pos:start="287:37" pos:end="287:70"><decl pos:start="287:37" pos:end="287:62"><type pos:start="287:37" pos:end="287:52"><name pos:start="287:37" pos:end="287:50">AVOutputStream</name> <modifier pos:start="287:52" pos:end="287:52">*</modifier></type><name pos:start="287:53" pos:end="287:62">audio_sync</name></decl>, <decl pos:start="287:65" pos:end="287:69"><type ref="prev" pos:start="287:37" pos:end="287:52"><modifier pos:start="287:65" pos:end="287:65">*</modifier></type><name pos:start="287:66" pos:end="287:69">ost1</name></decl>;</decl_stmt>

                                    <expr_stmt pos:start="289:37" pos:end="289:54"><expr pos:start="289:37" pos:end="289:53"><name pos:start="289:37" pos:end="289:46">audio_sync</name> <operator pos:start="289:48" pos:end="289:48">=</operator> <name pos:start="289:50" pos:end="289:53">NULL</name></expr>;</expr_stmt>

                                    <for pos:start="291:37" pos:end="305:37">for<control pos:start="291:40" pos:end="291:62">(<init pos:start="291:41" pos:end="291:44"><expr pos:start="291:41" pos:end="291:43"><name pos:start="291:41" pos:end="291:41">i</name><operator pos:start="291:42" pos:end="291:42">=</operator><literal type="number" pos:start="291:43" pos:end="291:43">0</literal></expr>;</init><condition pos:start="291:45" pos:end="291:58"><expr pos:start="291:45" pos:end="291:57"><name pos:start="291:45" pos:end="291:45">i</name><operator pos:start="291:46" pos:end="291:46">&lt;</operator><name pos:start="291:47" pos:end="291:57">nb_ostreams</name></expr>;</condition><incr pos:start="291:59" pos:end="291:61"><expr pos:start="291:59" pos:end="291:61"><name pos:start="291:59" pos:end="291:59">i</name><operator pos:start="291:60" pos:end="291:61">++</operator></expr></incr>)</control> <block pos:start="291:64" pos:end="305:37">{<block_content pos:start="293:41" pos:end="303:41">

                                        <expr_stmt pos:start="293:41" pos:end="293:60"><expr pos:start="293:41" pos:end="293:59"><name pos:start="293:41" pos:end="293:44">ost1</name> <operator pos:start="293:46" pos:end="293:46">=</operator> <name pos:start="293:48" pos:end="293:59"><name pos:start="293:48" pos:end="293:56">ost_table</name><index pos:start="293:57" pos:end="293:59">[<expr pos:start="293:58" pos:end="293:58"><name pos:start="293:58" pos:end="293:58">i</name></expr>]</index></name></expr>;</expr_stmt>

                                        <if_stmt pos:start="295:41" pos:end="303:41"><if pos:start="295:41" pos:end="303:41">if <condition pos:start="295:44" pos:end="297:91">(<expr pos:start="295:45" pos:end="297:90"><name pos:start="295:45" pos:end="295:60"><name pos:start="295:45" pos:end="295:48">ost1</name><operator pos:start="295:49" pos:end="295:50">-&gt;</operator><name pos:start="295:51" pos:end="295:60">file_index</name></name> <operator pos:start="295:62" pos:end="295:63">==</operator> <name pos:start="295:65" pos:end="295:79"><name pos:start="295:65" pos:end="295:67">ost</name><operator pos:start="295:68" pos:end="295:69">-&gt;</operator><name pos:start="295:70" pos:end="295:79">file_index</name></name> <operator pos:start="295:81" pos:end="295:82">&amp;&amp;</operator>

                                            <name pos:start="297:45" pos:end="297:70"><name pos:start="297:45" pos:end="297:48">ost1</name><operator pos:start="297:49" pos:end="297:50">-&gt;</operator><name pos:start="297:51" pos:end="297:52">st</name><operator pos:start="297:53" pos:end="297:54">-&gt;</operator><name pos:start="297:55" pos:end="297:59">codec</name><operator pos:start="297:60" pos:end="297:60">.</operator><name pos:start="297:61" pos:end="297:70">codec_type</name></name> <operator pos:start="297:72" pos:end="297:73">==</operator> <name pos:start="297:75" pos:end="297:90">CODEC_TYPE_AUDIO</name></expr>)</condition> <block pos:start="297:93" pos:end="303:41">{<block_content pos:start="299:45" pos:end="301:50">

                                            <expr_stmt pos:start="299:45" pos:end="299:62"><expr pos:start="299:45" pos:end="299:61"><name pos:start="299:45" pos:end="299:54">audio_sync</name> <operator pos:start="299:56" pos:end="299:56">=</operator> <name pos:start="299:58" pos:end="299:61">ost1</name></expr>;</expr_stmt>

                                            <break pos:start="301:45" pos:end="301:50">break;</break>

                                        </block_content>}</block></if></if_stmt>

                                    </block_content>}</block></for>



                                    <expr_stmt pos:start="309:37" pos:end="309:86"><expr pos:start="309:37" pos:end="309:85"><call pos:start="309:37" pos:end="309:85"><name pos:start="309:37" pos:end="309:48">do_video_out</name><argument_list pos:start="309:49" pos:end="309:85">(<argument pos:start="309:50" pos:end="309:51"><expr pos:start="309:50" pos:end="309:51"><name pos:start="309:50" pos:end="309:51">os</name></expr></argument>, <argument pos:start="309:54" pos:end="309:56"><expr pos:start="309:54" pos:end="309:56"><name pos:start="309:54" pos:end="309:56">ost</name></expr></argument>, <argument pos:start="309:59" pos:end="309:61"><expr pos:start="309:59" pos:end="309:61"><name pos:start="309:59" pos:end="309:61">ist</name></expr></argument>, <argument pos:start="309:64" pos:end="309:71"><expr pos:start="309:64" pos:end="309:71"><operator pos:start="309:64" pos:end="309:64">&amp;</operator><name pos:start="309:65" pos:end="309:71">picture</name></expr></argument>, <argument pos:start="309:74" pos:end="309:84"><expr pos:start="309:74" pos:end="309:84"><operator pos:start="309:74" pos:end="309:74">&amp;</operator><name pos:start="309:75" pos:end="309:84">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="311:37" pos:end="311:61"><expr pos:start="311:37" pos:end="311:60"><name pos:start="311:37" pos:end="311:46">video_size</name> <operator pos:start="311:48" pos:end="311:49">+=</operator> <name pos:start="311:51" pos:end="311:60">frame_size</name></expr>;</expr_stmt>

                                    <if_stmt pos:start="313:37" pos:end="315:76"><if pos:start="313:37" pos:end="315:76">if <condition pos:start="313:40" pos:end="313:64">(<expr pos:start="313:41" pos:end="313:63"><name pos:start="313:41" pos:end="313:49">do_vstats</name> <operator pos:start="313:51" pos:end="313:52">&amp;&amp;</operator> <name pos:start="313:54" pos:end="313:63">frame_size</name></expr>)</condition><block type="pseudo" pos:start="315:41" pos:end="315:76"><block_content pos:start="315:41" pos:end="315:76">

                                        <expr_stmt pos:start="315:41" pos:end="315:76"><expr pos:start="315:41" pos:end="315:75"><call pos:start="315:41" pos:end="315:75"><name pos:start="315:41" pos:end="315:54">do_video_stats</name><argument_list pos:start="315:55" pos:end="315:75">(<argument pos:start="315:56" pos:end="315:57"><expr pos:start="315:56" pos:end="315:57"><name pos:start="315:56" pos:end="315:57">os</name></expr></argument>, <argument pos:start="315:60" pos:end="315:62"><expr pos:start="315:60" pos:end="315:62"><name pos:start="315:60" pos:end="315:62">ost</name></expr></argument>, <argument pos:start="315:65" pos:end="315:74"><expr pos:start="315:65" pos:end="315:74"><name pos:start="315:65" pos:end="315:74">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                </block_content>}</block>

                                <break pos:start="319:33" pos:end="319:38">break;</break>

                            <default pos:start="321:29" pos:end="321:36">default:</default>

                                <expr_stmt pos:start="323:33" pos:end="323:43"><expr pos:start="323:33" pos:end="323:42"><call pos:start="323:33" pos:end="323:42"><name pos:start="323:33" pos:end="323:40">av_abort</name><argument_list pos:start="323:41" pos:end="323:42">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></if> <else pos:start="327:27" pos:end="381:25">else <block pos:start="327:32" pos:end="381:25">{<block_content pos:start="329:29" pos:end="379:48">

                            <decl_stmt pos:start="329:29" pos:end="329:44"><decl pos:start="329:29" pos:end="329:43"><type pos:start="329:29" pos:end="329:35"><name pos:start="329:29" pos:end="329:35">AVFrame</name></type> <name pos:start="329:37" pos:end="329:43">avframe</name></decl>;</decl_stmt> <comment type="line" pos:start="329:46" pos:end="329:68">//FIXME/XXX remove this</comment>

                            <decl_stmt pos:start="331:29" pos:end="331:42"><decl pos:start="331:29" pos:end="331:41"><type pos:start="331:29" pos:end="331:36"><name pos:start="331:29" pos:end="331:36">AVPacket</name></type> <name pos:start="331:38" pos:end="331:41">opkt</name></decl>;</decl_stmt>

                            <expr_stmt pos:start="333:29" pos:end="333:50"><expr pos:start="333:29" pos:end="333:49"><call pos:start="333:29" pos:end="333:49"><name pos:start="333:29" pos:end="333:42">av_init_packet</name><argument_list pos:start="333:43" pos:end="333:49">(<argument pos:start="333:44" pos:end="333:48"><expr pos:start="333:44" pos:end="333:48"><operator pos:start="333:44" pos:end="333:44">&amp;</operator><name pos:start="333:45" pos:end="333:48">opkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                            <comment type="block" pos:start="337:29" pos:end="337:83">/* no reencoding needed : output the packet directly */</comment>

                            <comment type="block" pos:start="339:29" pos:end="339:60">/* force the input stream PTS */</comment>

                        

                            <expr_stmt pos:start="343:29" pos:end="343:65"><expr pos:start="343:29" pos:end="343:64"><call pos:start="343:29" pos:end="343:64"><name pos:start="343:29" pos:end="343:54">avcodec_get_frame_defaults</name><argument_list pos:start="343:55" pos:end="343:64">(<argument pos:start="343:56" pos:end="343:63"><expr pos:start="343:56" pos:end="343:63"><operator pos:start="343:56" pos:end="343:56">&amp;</operator><name pos:start="343:57" pos:end="343:63">avframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="345:29" pos:end="345:65"><expr pos:start="345:29" pos:end="345:64"><name pos:start="345:29" pos:end="345:54"><name pos:start="345:29" pos:end="345:31">ost</name><operator pos:start="345:32" pos:end="345:33">-&gt;</operator><name pos:start="345:34" pos:end="345:35">st</name><operator pos:start="345:36" pos:end="345:37">-&gt;</operator><name pos:start="345:38" pos:end="345:42">codec</name><operator pos:start="345:43" pos:end="345:43">.</operator><name pos:start="345:44" pos:end="345:54">coded_frame</name></name><operator pos:start="345:55" pos:end="345:55">=</operator> <operator pos:start="345:57" pos:end="345:57">&amp;</operator><name pos:start="345:58" pos:end="345:64">avframe</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="347:29" pos:end="347:74"><expr pos:start="347:29" pos:end="347:73"><name pos:start="347:29" pos:end="347:45"><name pos:start="347:29" pos:end="347:35">avframe</name><operator pos:start="347:36" pos:end="347:36">.</operator><name pos:start="347:37" pos:end="347:45">key_frame</name></name> <operator pos:start="347:47" pos:end="347:47">=</operator> <name pos:start="347:49" pos:end="347:58"><name pos:start="347:49" pos:end="347:51">pkt</name><operator pos:start="347:52" pos:end="347:53">-&gt;</operator><name pos:start="347:54" pos:end="347:58">flags</name></name> <operator pos:start="347:60" pos:end="347:60">&amp;</operator> <name pos:start="347:62" pos:end="347:73">PKT_FLAG_KEY</name></expr>;</expr_stmt> 



                            <if_stmt pos:start="351:29" pos:end="357:56"><if pos:start="351:29" pos:end="353:56">if<condition pos:start="351:31" pos:end="351:77">(<expr pos:start="351:32" pos:end="351:76"><name pos:start="351:32" pos:end="351:56"><name pos:start="351:32" pos:end="351:34">ost</name><operator pos:start="351:35" pos:end="351:36">-&gt;</operator><name pos:start="351:37" pos:end="351:38">st</name><operator pos:start="351:39" pos:end="351:40">-&gt;</operator><name pos:start="351:41" pos:end="351:45">codec</name><operator pos:start="351:46" pos:end="351:46">.</operator><name pos:start="351:47" pos:end="351:56">codec_type</name></name> <operator pos:start="351:58" pos:end="351:59">==</operator> <name pos:start="351:61" pos:end="351:76">CODEC_TYPE_AUDIO</name></expr>)</condition><block type="pseudo" pos:start="353:33" pos:end="353:56"><block_content pos:start="353:33" pos:end="353:56">

                                <expr_stmt pos:start="353:33" pos:end="353:56"><expr pos:start="353:33" pos:end="353:55"><name pos:start="353:33" pos:end="353:42">audio_size</name> <operator pos:start="353:44" pos:end="353:45">+=</operator> <name pos:start="353:47" pos:end="353:55">data_size</name></expr>;</expr_stmt></block_content></block></if>

                            <if type="elseif" pos:start="355:29" pos:end="357:56">else if <condition pos:start="355:37" pos:end="355:83">(<expr pos:start="355:38" pos:end="355:82"><name pos:start="355:38" pos:end="355:62"><name pos:start="355:38" pos:end="355:40">ost</name><operator pos:start="355:41" pos:end="355:42">-&gt;</operator><name pos:start="355:43" pos:end="355:44">st</name><operator pos:start="355:45" pos:end="355:46">-&gt;</operator><name pos:start="355:47" pos:end="355:51">codec</name><operator pos:start="355:52" pos:end="355:52">.</operator><name pos:start="355:53" pos:end="355:62">codec_type</name></name> <operator pos:start="355:64" pos:end="355:65">==</operator> <name pos:start="355:67" pos:end="355:82">CODEC_TYPE_VIDEO</name></expr>)</condition><block type="pseudo" pos:start="357:33" pos:end="357:56"><block_content pos:start="357:33" pos:end="357:56">

                                <expr_stmt pos:start="357:33" pos:end="357:56"><expr pos:start="357:33" pos:end="357:55"><name pos:start="357:33" pos:end="357:42">video_size</name> <operator pos:start="357:44" pos:end="357:45">+=</operator> <name pos:start="357:47" pos:end="357:55">data_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                            <expr_stmt pos:start="361:29" pos:end="361:58"><expr pos:start="361:29" pos:end="361:57"><name pos:start="361:29" pos:end="361:45"><name pos:start="361:29" pos:end="361:32">opkt</name><operator pos:start="361:33" pos:end="361:33">.</operator><name pos:start="361:34" pos:end="361:45">stream_index</name></name><operator pos:start="361:46" pos:end="361:46">=</operator> <name pos:start="361:48" pos:end="361:57"><name pos:start="361:48" pos:end="361:50">ost</name><operator pos:start="361:51" pos:end="361:52">-&gt;</operator><name pos:start="361:53" pos:end="361:57">index</name></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="363:29" pos:end="363:48"><expr pos:start="363:29" pos:end="363:47"><name pos:start="363:29" pos:end="363:37"><name pos:start="363:29" pos:end="363:32">opkt</name><operator pos:start="363:33" pos:end="363:33">.</operator><name pos:start="363:34" pos:end="363:37">data</name></name><operator pos:start="363:38" pos:end="363:38">=</operator> <name pos:start="363:40" pos:end="363:47">data_buf</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="365:29" pos:end="365:49"><expr pos:start="365:29" pos:end="365:48"><name pos:start="365:29" pos:end="365:37"><name pos:start="365:29" pos:end="365:32">opkt</name><operator pos:start="365:33" pos:end="365:33">.</operator><name pos:start="365:34" pos:end="365:37">size</name></name><operator pos:start="365:38" pos:end="365:38">=</operator> <name pos:start="365:40" pos:end="365:48">data_size</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="367:29" pos:end="367:88"><expr pos:start="367:29" pos:end="367:87"><name pos:start="367:29" pos:end="367:36"><name pos:start="367:29" pos:end="367:32">opkt</name><operator pos:start="367:33" pos:end="367:33">.</operator><name pos:start="367:34" pos:end="367:36">pts</name></name><operator pos:start="367:37" pos:end="367:37">=</operator> <name pos:start="367:39" pos:end="367:46"><name pos:start="367:39" pos:end="367:41">pkt</name><operator pos:start="367:42" pos:end="367:43">-&gt;</operator><name pos:start="367:44" pos:end="367:46">pts</name></name> <operator pos:start="367:48" pos:end="367:48">+</operator> <name pos:start="367:50" pos:end="367:87"><name pos:start="367:50" pos:end="367:70">input_files_ts_offset</name><index pos:start="367:71" pos:end="367:87">[<expr pos:start="367:72" pos:end="367:86"><name pos:start="367:72" pos:end="367:86"><name pos:start="367:72" pos:end="367:74">ist</name><operator pos:start="367:75" pos:end="367:76">-&gt;</operator><name pos:start="367:77" pos:end="367:86">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="369:29" pos:end="369:88"><expr pos:start="369:29" pos:end="369:87"><name pos:start="369:29" pos:end="369:36"><name pos:start="369:29" pos:end="369:32">opkt</name><operator pos:start="369:33" pos:end="369:33">.</operator><name pos:start="369:34" pos:end="369:36">dts</name></name><operator pos:start="369:37" pos:end="369:37">=</operator> <name pos:start="369:39" pos:end="369:46"><name pos:start="369:39" pos:end="369:41">pkt</name><operator pos:start="369:42" pos:end="369:43">-&gt;</operator><name pos:start="369:44" pos:end="369:46">dts</name></name> <operator pos:start="369:48" pos:end="369:48">+</operator> <name pos:start="369:50" pos:end="369:87"><name pos:start="369:50" pos:end="369:70">input_files_ts_offset</name><index pos:start="369:71" pos:end="369:87">[<expr pos:start="369:72" pos:end="369:86"><name pos:start="369:72" pos:end="369:86"><name pos:start="369:72" pos:end="369:74">ist</name><operator pos:start="369:75" pos:end="369:76">-&gt;</operator><name pos:start="369:77" pos:end="369:86">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="371:29" pos:end="371:51"><expr pos:start="371:29" pos:end="371:50"><name pos:start="371:29" pos:end="371:38"><name pos:start="371:29" pos:end="371:32">opkt</name><operator pos:start="371:33" pos:end="371:33">.</operator><name pos:start="371:34" pos:end="371:38">flags</name></name><operator pos:start="371:39" pos:end="371:39">=</operator> <name pos:start="371:41" pos:end="371:50"><name pos:start="371:41" pos:end="371:43">pkt</name><operator pos:start="371:44" pos:end="371:45">-&gt;</operator><name pos:start="371:46" pos:end="371:50">flags</name></name></expr>;</expr_stmt>

                            

                            <expr_stmt pos:start="375:29" pos:end="375:66"><expr pos:start="375:29" pos:end="375:65"><call pos:start="375:29" pos:end="375:65"><name pos:start="375:29" pos:end="375:54">av_interleaved_write_frame</name><argument_list pos:start="375:55" pos:end="375:65">(<argument pos:start="375:56" pos:end="375:57"><expr pos:start="375:56" pos:end="375:57"><name pos:start="375:56" pos:end="375:57">os</name></expr></argument>, <argument pos:start="375:60" pos:end="375:64"><expr pos:start="375:60" pos:end="375:64"><operator pos:start="375:60" pos:end="375:60">&amp;</operator><name pos:start="375:61" pos:end="375:64">opkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="377:29" pos:end="377:58"><expr pos:start="377:29" pos:end="377:57"><name pos:start="377:29" pos:end="377:55"><name pos:start="377:29" pos:end="377:31">ost</name><operator pos:start="377:32" pos:end="377:33">-&gt;</operator><name pos:start="377:34" pos:end="377:35">st</name><operator pos:start="377:36" pos:end="377:37">-&gt;</operator><name pos:start="377:38" pos:end="377:42">codec</name><operator pos:start="377:43" pos:end="377:43">.</operator><name pos:start="377:44" pos:end="377:55">frame_number</name></name><operator pos:start="377:56" pos:end="377:57">++</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="379:29" pos:end="379:48"><expr pos:start="379:29" pos:end="379:47"><name pos:start="379:29" pos:end="379:45"><name pos:start="379:29" pos:end="379:31">ost</name><operator pos:start="379:32" pos:end="379:33">-&gt;</operator><name pos:start="379:34" pos:end="379:45">frame_number</name></name><operator pos:start="379:46" pos:end="379:47">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for></block_content></block></if></if_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:36"><expr pos:start="387:13" pos:end="387:35"><call pos:start="387:13" pos:end="387:35"><name pos:start="387:13" pos:end="387:19">av_free</name><argument_list pos:start="387:20" pos:end="387:35">(<argument pos:start="387:21" pos:end="387:34"><expr pos:start="387:21" pos:end="387:34"><name pos:start="387:21" pos:end="387:34">buffer_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

 <label pos:start="391:2" pos:end="391:16"><name pos:start="391:2" pos:end="391:15">discard_packet</name>:</label>

    <if_stmt pos:start="393:5" pos:end="493:5"><if pos:start="393:5" pos:end="493:5">if <condition pos:start="393:8" pos:end="393:20">(<expr pos:start="393:9" pos:end="393:19"><name pos:start="393:9" pos:end="393:11">pkt</name> <operator pos:start="393:13" pos:end="393:14">==</operator> <name pos:start="393:16" pos:end="393:19">NULL</name></expr>)</condition> <block pos:start="393:22" pos:end="493:5">{<block_content pos:start="399:9" pos:end="491:9">

        <comment type="block" pos:start="395:9" pos:end="395:26">/* EOF handling */</comment>

  

        <for pos:start="399:9" pos:end="491:9">for<control pos:start="399:12" pos:end="399:34">(<init pos:start="399:13" pos:end="399:16"><expr pos:start="399:13" pos:end="399:15"><name pos:start="399:13" pos:end="399:13">i</name><operator pos:start="399:14" pos:end="399:14">=</operator><literal type="number" pos:start="399:15" pos:end="399:15">0</literal></expr>;</init><condition pos:start="399:17" pos:end="399:30"><expr pos:start="399:17" pos:end="399:29"><name pos:start="399:17" pos:end="399:17">i</name><operator pos:start="399:18" pos:end="399:18">&lt;</operator><name pos:start="399:19" pos:end="399:29">nb_ostreams</name></expr>;</condition><incr pos:start="399:31" pos:end="399:33"><expr pos:start="399:31" pos:end="399:33"><name pos:start="399:31" pos:end="399:31">i</name><operator pos:start="399:32" pos:end="399:33">++</operator></expr></incr>)</control> <block pos:start="399:36" pos:end="491:9">{<block_content pos:start="401:13" pos:end="489:13">

            <expr_stmt pos:start="401:13" pos:end="401:31"><expr pos:start="401:13" pos:end="401:30"><name pos:start="401:13" pos:end="401:15">ost</name> <operator pos:start="401:17" pos:end="401:17">=</operator> <name pos:start="401:19" pos:end="401:30"><name pos:start="401:19" pos:end="401:27">ost_table</name><index pos:start="401:28" pos:end="401:30">[<expr pos:start="401:29" pos:end="401:29"><name pos:start="401:29" pos:end="401:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="403:13" pos:end="489:13"><if pos:start="403:13" pos:end="489:13">if <condition pos:start="403:16" pos:end="403:47">(<expr pos:start="403:17" pos:end="403:46"><name pos:start="403:17" pos:end="403:33"><name pos:start="403:17" pos:end="403:19">ost</name><operator pos:start="403:20" pos:end="403:21">-&gt;</operator><name pos:start="403:22" pos:end="403:33">source_index</name></name> <operator pos:start="403:35" pos:end="403:36">==</operator> <name pos:start="403:38" pos:end="403:46">ist_index</name></expr>)</condition> <block pos:start="403:49" pos:end="489:13">{<block_content pos:start="405:17" pos:end="487:17">

                <decl_stmt pos:start="405:17" pos:end="405:53"><decl pos:start="405:17" pos:end="405:52"><type pos:start="405:17" pos:end="405:32"><name pos:start="405:17" pos:end="405:30">AVCodecContext</name> <modifier pos:start="405:32" pos:end="405:32">*</modifier></type><name pos:start="405:33" pos:end="405:35">enc</name><init pos:start="405:36" pos:end="405:52">= <expr pos:start="405:38" pos:end="405:52"><operator pos:start="405:38" pos:end="405:38">&amp;</operator><name pos:start="405:39" pos:end="405:52"><name pos:start="405:39" pos:end="405:41">ost</name><operator pos:start="405:42" pos:end="405:43">-&gt;</operator><name pos:start="405:44" pos:end="405:45">st</name><operator pos:start="405:46" pos:end="405:47">-&gt;</operator><name pos:start="405:48" pos:end="405:52">codec</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="407:17" pos:end="407:51"><expr pos:start="407:17" pos:end="407:50"><name pos:start="407:17" pos:end="407:18">os</name> <operator pos:start="407:20" pos:end="407:20">=</operator> <name pos:start="407:22" pos:end="407:50"><name pos:start="407:22" pos:end="407:33">output_files</name><index pos:start="407:34" pos:end="407:50">[<expr pos:start="407:35" pos:end="407:49"><name pos:start="407:35" pos:end="407:49"><name pos:start="407:35" pos:end="407:37">ost</name><operator pos:start="407:38" pos:end="407:39">-&gt;</operator><name pos:start="407:40" pos:end="407:49">file_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                

                <if_stmt pos:start="411:17" pos:end="413:29"><if pos:start="411:17" pos:end="413:29">if<condition pos:start="411:19" pos:end="411:88">(<expr pos:start="411:20" pos:end="411:87"><name pos:start="411:20" pos:end="411:44"><name pos:start="411:20" pos:end="411:22">ost</name><operator pos:start="411:23" pos:end="411:24">-&gt;</operator><name pos:start="411:25" pos:end="411:26">st</name><operator pos:start="411:27" pos:end="411:28">-&gt;</operator><name pos:start="411:29" pos:end="411:33">codec</name><operator pos:start="411:34" pos:end="411:34">.</operator><name pos:start="411:35" pos:end="411:44">codec_type</name></name> <operator pos:start="411:46" pos:end="411:47">==</operator> <name pos:start="411:49" pos:end="411:64">CODEC_TYPE_AUDIO</name> <operator pos:start="411:66" pos:end="411:67">&amp;&amp;</operator> <name pos:start="411:69" pos:end="411:83"><name pos:start="411:69" pos:end="411:71">enc</name><operator pos:start="411:72" pos:end="411:73">-&gt;</operator><name pos:start="411:74" pos:end="411:83">frame_size</name></name> <operator pos:start="411:85" pos:end="411:86">&lt;=</operator><literal type="number" pos:start="411:87" pos:end="411:87">1</literal></expr>)</condition><block type="pseudo" pos:start="413:21" pos:end="413:29"><block_content pos:start="413:21" pos:end="413:29">

                    <continue pos:start="413:21" pos:end="413:29">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="415:17" pos:end="417:29"><if pos:start="415:17" pos:end="417:29">if<condition pos:start="415:19" pos:end="415:108">(<expr pos:start="415:20" pos:end="415:107"><name pos:start="415:20" pos:end="415:44"><name pos:start="415:20" pos:end="415:22">ost</name><operator pos:start="415:23" pos:end="415:24">-&gt;</operator><name pos:start="415:25" pos:end="415:26">st</name><operator pos:start="415:27" pos:end="415:28">-&gt;</operator><name pos:start="415:29" pos:end="415:33">codec</name><operator pos:start="415:34" pos:end="415:34">.</operator><name pos:start="415:35" pos:end="415:44">codec_type</name></name> <operator pos:start="415:46" pos:end="415:47">==</operator> <name pos:start="415:49" pos:end="415:64">CODEC_TYPE_VIDEO</name> <operator pos:start="415:66" pos:end="415:67">&amp;&amp;</operator> <operator pos:start="415:69" pos:end="415:69">(</operator><name pos:start="415:70" pos:end="415:87"><name pos:start="415:70" pos:end="415:71">os</name><operator pos:start="415:72" pos:end="415:73">-&gt;</operator><name pos:start="415:74" pos:end="415:80">oformat</name><operator pos:start="415:81" pos:end="415:82">-&gt;</operator><name pos:start="415:83" pos:end="415:87">flags</name></name> <operator pos:start="415:89" pos:end="415:89">&amp;</operator> <name pos:start="415:91" pos:end="415:106">AVFMT_RAWPICTURE</name><operator pos:start="415:107" pos:end="415:107">)</operator></expr>)</condition><block type="pseudo" pos:start="417:21" pos:end="417:29"><block_content pos:start="417:21" pos:end="417:29">

                    <continue pos:start="417:21" pos:end="417:29">continue;</continue></block_content></block></if></if_stmt>



                <if_stmt pos:start="421:17" pos:end="487:17"><if pos:start="421:17" pos:end="487:17">if <condition pos:start="421:20" pos:end="421:41">(<expr pos:start="421:21" pos:end="421:40"><name pos:start="421:21" pos:end="421:40"><name pos:start="421:21" pos:end="421:23">ost</name><operator pos:start="421:24" pos:end="421:25">-&gt;</operator><name pos:start="421:26" pos:end="421:40">encoding_needed</name></name></expr>)</condition> <block pos:start="421:43" pos:end="487:17">{<block_content pos:start="423:21" pos:end="485:21">

                    <for pos:start="423:21" pos:end="485:21">for<control pos:start="423:24" pos:end="423:27">(<init pos:start="423:25" pos:end="423:25">;</init><condition pos:start="423:26" pos:end="423:26">;</condition><incr/>)</control> <block pos:start="423:29" pos:end="485:21">{<block_content pos:start="425:25" pos:end="483:61">

                        <decl_stmt pos:start="425:25" pos:end="425:37"><decl pos:start="425:25" pos:end="425:36"><type pos:start="425:25" pos:end="425:32"><name pos:start="425:25" pos:end="425:32">AVPacket</name></type> <name pos:start="425:34" pos:end="425:36">pkt</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="427:25" pos:end="427:45"><expr pos:start="427:25" pos:end="427:44"><call pos:start="427:25" pos:end="427:44"><name pos:start="427:25" pos:end="427:38">av_init_packet</name><argument_list pos:start="427:39" pos:end="427:44">(<argument pos:start="427:40" pos:end="427:43"><expr pos:start="427:40" pos:end="427:43"><operator pos:start="427:40" pos:end="427:40">&amp;</operator><name pos:start="427:41" pos:end="427:43">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="429:25" pos:end="429:53"><expr pos:start="429:25" pos:end="429:52"><name pos:start="429:25" pos:end="429:40"><name pos:start="429:25" pos:end="429:27">pkt</name><operator pos:start="429:28" pos:end="429:28">.</operator><name pos:start="429:29" pos:end="429:40">stream_index</name></name><operator pos:start="429:41" pos:end="429:41">=</operator> <name pos:start="429:43" pos:end="429:52"><name pos:start="429:43" pos:end="429:45">ost</name><operator pos:start="429:46" pos:end="429:47">-&gt;</operator><name pos:start="429:48" pos:end="429:52">index</name></name></expr>;</expr_stmt>

 

                        <switch pos:start="433:25" pos:end="467:25">switch<condition pos:start="433:31" pos:end="433:57">(<expr pos:start="433:32" pos:end="433:56"><name pos:start="433:32" pos:end="433:56"><name pos:start="433:32" pos:end="433:34">ost</name><operator pos:start="433:35" pos:end="433:36">-&gt;</operator><name pos:start="433:37" pos:end="433:38">st</name><operator pos:start="433:39" pos:end="433:40">-&gt;</operator><name pos:start="433:41" pos:end="433:45">codec</name><operator pos:start="433:46" pos:end="433:46">.</operator><name pos:start="433:47" pos:end="433:56">codec_type</name></name></expr>)</condition> <block pos:start="433:59" pos:end="467:25">{<block_content pos:start="435:25" pos:end="465:35">

                        <case pos:start="435:25" pos:end="435:46">case <expr pos:start="435:30" pos:end="435:45"><name pos:start="435:30" pos:end="435:45">CODEC_TYPE_AUDIO</name></expr>:</case>        

                            <expr_stmt pos:start="437:29" pos:end="437:97"><expr pos:start="437:29" pos:end="437:96"><name pos:start="437:29" pos:end="437:31">ret</name> <operator pos:start="437:33" pos:end="437:33">=</operator> <call pos:start="437:35" pos:end="437:96"><name pos:start="437:35" pos:end="437:54">avcodec_encode_audio</name><argument_list pos:start="437:55" pos:end="437:96">(<argument pos:start="437:56" pos:end="437:58"><expr pos:start="437:56" pos:end="437:58"><name pos:start="437:56" pos:end="437:58">enc</name></expr></argument>, <argument pos:start="437:61" pos:end="437:70"><expr pos:start="437:61" pos:end="437:70"><name pos:start="437:61" pos:end="437:70">bit_buffer</name></expr></argument>, <argument pos:start="437:73" pos:end="437:89"><expr pos:start="437:73" pos:end="437:89"><name pos:start="437:73" pos:end="437:89">VIDEO_BUFFER_SIZE</name></expr></argument>, <argument pos:start="437:92" pos:end="437:95"><expr pos:start="437:92" pos:end="437:95"><name pos:start="437:92" pos:end="437:95">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="439:29" pos:end="439:46"><expr pos:start="439:29" pos:end="439:45"><name pos:start="439:29" pos:end="439:38">audio_size</name> <operator pos:start="439:40" pos:end="439:41">+=</operator> <name pos:start="439:43" pos:end="439:45">ret</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="441:29" pos:end="441:54"><expr pos:start="441:29" pos:end="441:53"><name pos:start="441:29" pos:end="441:37"><name pos:start="441:29" pos:end="441:31">pkt</name><operator pos:start="441:32" pos:end="441:32">.</operator><name pos:start="441:33" pos:end="441:37">flags</name></name> <operator pos:start="441:39" pos:end="441:40">|=</operator> <name pos:start="441:42" pos:end="441:53">PKT_FLAG_KEY</name></expr>;</expr_stmt>

                            <break pos:start="443:29" pos:end="443:34">break;</break>

                        <case pos:start="445:25" pos:end="445:46">case <expr pos:start="445:30" pos:end="445:45"><name pos:start="445:30" pos:end="445:45">CODEC_TYPE_VIDEO</name></expr>:</case>

                            <expr_stmt pos:start="447:29" pos:end="447:97"><expr pos:start="447:29" pos:end="447:96"><name pos:start="447:29" pos:end="447:31">ret</name> <operator pos:start="447:33" pos:end="447:33">=</operator> <call pos:start="447:35" pos:end="447:96"><name pos:start="447:35" pos:end="447:54">avcodec_encode_video</name><argument_list pos:start="447:55" pos:end="447:96">(<argument pos:start="447:56" pos:end="447:58"><expr pos:start="447:56" pos:end="447:58"><name pos:start="447:56" pos:end="447:58">enc</name></expr></argument>, <argument pos:start="447:61" pos:end="447:70"><expr pos:start="447:61" pos:end="447:70"><name pos:start="447:61" pos:end="447:70">bit_buffer</name></expr></argument>, <argument pos:start="447:73" pos:end="447:89"><expr pos:start="447:73" pos:end="447:89"><name pos:start="447:73" pos:end="447:89">VIDEO_BUFFER_SIZE</name></expr></argument>, <argument pos:start="447:92" pos:end="447:95"><expr pos:start="447:92" pos:end="447:95"><name pos:start="447:92" pos:end="447:95">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="449:29" pos:end="449:46"><expr pos:start="449:29" pos:end="449:45"><name pos:start="449:29" pos:end="449:38">video_size</name> <operator pos:start="449:40" pos:end="449:41">+=</operator> <name pos:start="449:43" pos:end="449:45">ret</name></expr>;</expr_stmt>

                            <if_stmt pos:start="451:29" pos:end="453:58"><if pos:start="451:29" pos:end="453:58">if<condition pos:start="451:31" pos:end="451:79">(<expr pos:start="451:32" pos:end="451:78"><name pos:start="451:32" pos:end="451:47"><name pos:start="451:32" pos:end="451:34">enc</name><operator pos:start="451:35" pos:end="451:36">-&gt;</operator><name pos:start="451:37" pos:end="451:47">coded_frame</name></name> <operator pos:start="451:49" pos:end="451:50">&amp;&amp;</operator> <name pos:start="451:52" pos:end="451:78"><name pos:start="451:52" pos:end="451:54">enc</name><operator pos:start="451:55" pos:end="451:56">-&gt;</operator><name pos:start="451:57" pos:end="451:67">coded_frame</name><operator pos:start="451:68" pos:end="451:69">-&gt;</operator><name pos:start="451:70" pos:end="451:78">key_frame</name></name></expr>)</condition><block type="pseudo" pos:start="453:33" pos:end="453:58"><block_content pos:start="453:33" pos:end="453:58">

                                <expr_stmt pos:start="453:33" pos:end="453:58"><expr pos:start="453:33" pos:end="453:57"><name pos:start="453:33" pos:end="453:41"><name pos:start="453:33" pos:end="453:35">pkt</name><operator pos:start="453:36" pos:end="453:36">.</operator><name pos:start="453:37" pos:end="453:41">flags</name></name> <operator pos:start="453:43" pos:end="453:44">|=</operator> <name pos:start="453:46" pos:end="453:57">PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="455:29" pos:end="459:29"><if pos:start="455:29" pos:end="459:29">if <condition pos:start="455:32" pos:end="455:63">(<expr pos:start="455:33" pos:end="455:62"><name pos:start="455:33" pos:end="455:44"><name pos:start="455:33" pos:end="455:35">ost</name><operator pos:start="455:36" pos:end="455:37">-&gt;</operator><name pos:start="455:38" pos:end="455:44">logfile</name></name> <operator pos:start="455:46" pos:end="455:47">&amp;&amp;</operator> <name pos:start="455:49" pos:end="455:62"><name pos:start="455:49" pos:end="455:51">enc</name><operator pos:start="455:52" pos:end="455:53">-&gt;</operator><name pos:start="455:54" pos:end="455:62">stats_out</name></name></expr>)</condition> <block pos:start="455:65" pos:end="459:29">{<block_content pos:start="457:33" pos:end="457:76">

                                <expr_stmt pos:start="457:33" pos:end="457:76"><expr pos:start="457:33" pos:end="457:75"><call pos:start="457:33" pos:end="457:75"><name pos:start="457:33" pos:end="457:39">fprintf</name><argument_list pos:start="457:40" pos:end="457:75">(<argument pos:start="457:41" pos:end="457:52"><expr pos:start="457:41" pos:end="457:52"><name pos:start="457:41" pos:end="457:52"><name pos:start="457:41" pos:end="457:43">ost</name><operator pos:start="457:44" pos:end="457:45">-&gt;</operator><name pos:start="457:46" pos:end="457:52">logfile</name></name></expr></argument>, <argument pos:start="457:55" pos:end="457:58"><expr pos:start="457:55" pos:end="457:58"><literal type="string" pos:start="457:55" pos:end="457:58">"%s"</literal></expr></argument>, <argument pos:start="457:61" pos:end="457:74"><expr pos:start="457:61" pos:end="457:74"><name pos:start="457:61" pos:end="457:74"><name pos:start="457:61" pos:end="457:63">enc</name><operator pos:start="457:64" pos:end="457:65">-&gt;</operator><name pos:start="457:66" pos:end="457:74">stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <break pos:start="461:29" pos:end="461:34">break;</break>

                        <default pos:start="463:25" pos:end="463:32">default:</default>

                            <expr_stmt pos:start="465:29" pos:end="465:35"><expr pos:start="465:29" pos:end="465:34"><name pos:start="465:29" pos:end="465:31">ret</name><operator pos:start="465:32" pos:end="465:32">=</operator><operator pos:start="465:33" pos:end="465:33">-</operator><literal type="number" pos:start="465:34" pos:end="465:34">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                            

                        <if_stmt pos:start="471:25" pos:end="473:34"><if pos:start="471:25" pos:end="473:34">if<condition pos:start="471:27" pos:end="471:34">(<expr pos:start="471:28" pos:end="471:33"><name pos:start="471:28" pos:end="471:30">ret</name><operator pos:start="471:31" pos:end="471:32">&lt;=</operator><literal type="number" pos:start="471:33" pos:end="471:33">0</literal></expr>)</condition><block type="pseudo" pos:start="473:29" pos:end="473:34"><block_content pos:start="473:29" pos:end="473:34">

                            <break pos:start="473:29" pos:end="473:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="475:25" pos:end="475:45"><expr pos:start="475:25" pos:end="475:44"><name pos:start="475:25" pos:end="475:32"><name pos:start="475:25" pos:end="475:27">pkt</name><operator pos:start="475:28" pos:end="475:28">.</operator><name pos:start="475:29" pos:end="475:32">data</name></name><operator pos:start="475:33" pos:end="475:33">=</operator> <name pos:start="475:35" pos:end="475:44">bit_buffer</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="477:25" pos:end="477:38"><expr pos:start="477:25" pos:end="477:37"><name pos:start="477:25" pos:end="477:32"><name pos:start="477:25" pos:end="477:27">pkt</name><operator pos:start="477:28" pos:end="477:28">.</operator><name pos:start="477:29" pos:end="477:32">size</name></name><operator pos:start="477:33" pos:end="477:33">=</operator> <name pos:start="477:35" pos:end="477:37">ret</name></expr>;</expr_stmt>

                        <if_stmt pos:start="479:25" pos:end="481:59"><if pos:start="479:25" pos:end="481:59">if<condition pos:start="479:27" pos:end="479:44">(<expr pos:start="479:28" pos:end="479:43"><name pos:start="479:28" pos:end="479:43"><name pos:start="479:28" pos:end="479:30">enc</name><operator pos:start="479:31" pos:end="479:32">-&gt;</operator><name pos:start="479:33" pos:end="479:43">coded_frame</name></name></expr>)</condition><block type="pseudo" pos:start="481:29" pos:end="481:59"><block_content pos:start="481:29" pos:end="481:59">

                            <expr_stmt pos:start="481:29" pos:end="481:59"><expr pos:start="481:29" pos:end="481:58"><name pos:start="481:29" pos:end="481:35"><name pos:start="481:29" pos:end="481:31">pkt</name><operator pos:start="481:32" pos:end="481:32">.</operator><name pos:start="481:33" pos:end="481:35">pts</name></name><operator pos:start="481:36" pos:end="481:36">=</operator> <name pos:start="481:38" pos:end="481:58"><name pos:start="481:38" pos:end="481:40">enc</name><operator pos:start="481:41" pos:end="481:42">-&gt;</operator><name pos:start="481:43" pos:end="481:53">coded_frame</name><operator pos:start="481:54" pos:end="481:55">-&gt;</operator><name pos:start="481:56" pos:end="481:58">pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="483:25" pos:end="483:61"><expr pos:start="483:25" pos:end="483:60"><call pos:start="483:25" pos:end="483:60"><name pos:start="483:25" pos:end="483:50">av_interleaved_write_frame</name><argument_list pos:start="483:51" pos:end="483:60">(<argument pos:start="483:52" pos:end="483:53"><expr pos:start="483:52" pos:end="483:53"><name pos:start="483:52" pos:end="483:53">os</name></expr></argument>, <argument pos:start="483:56" pos:end="483:59"><expr pos:start="483:56" pos:end="483:59"><operator pos:start="483:56" pos:end="483:56">&amp;</operator><name pos:start="483:57" pos:end="483:59">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

 

    <return pos:start="497:5" pos:end="497:13">return <expr pos:start="497:12" pos:end="497:12"><literal type="number" pos:start="497:12" pos:end="497:12">0</literal></expr>;</return>

 <label pos:start="499:2" pos:end="499:13"><name pos:start="499:2" pos:end="499:12">fail_decode</name>:</label>

    <return pos:start="501:5" pos:end="501:14">return <expr pos:start="501:12" pos:end="501:13"><operator pos:start="501:12" pos:end="501:12">-</operator><literal type="number" pos:start="501:13" pos:end="501:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
