<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12235.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">tcp_open</name><parameter_list pos:start="1:20" pos:end="1:62">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:30">URLContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">h</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">uri</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_in</name></name></type> <name pos:start="5:24" pos:end="5:32">dest_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">port</name></decl>, <decl pos:start="7:15" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:16">fd</name> <init pos:start="7:18" pos:end="7:21">= <expr pos:start="7:20" pos:end="7:21"><operator pos:start="7:20" pos:end="7:20">-</operator><literal type="number" pos:start="7:21" pos:end="7:21">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">TCPContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:24">= <expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">fd_set</name></type> <name pos:start="11:12" pos:end="11:15">wfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">fd_max</name></decl>, <decl pos:start="13:17" pos:end="13:19"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:19">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:18">timeval</name></name></type> <name pos:start="15:20" pos:end="15:21">tv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">socklen_t</name></type> <name pos:start="17:15" pos:end="17:20">optlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:60"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:23"><name pos:start="19:10" pos:end="19:17">hostname</name><index pos:start="19:18" pos:end="19:23">[<expr pos:start="19:19" pos:end="19:22"><literal type="number" pos:start="19:19" pos:end="19:22">1024</literal></expr>]</index></name></decl>,<decl pos:start="19:25" pos:end="19:35"><type ref="prev" pos:start="19:5" pos:end="19:8"/><name pos:start="19:25" pos:end="19:35"><name pos:start="19:25" pos:end="19:29">proto</name><index pos:start="19:30" pos:end="19:35">[<expr pos:start="19:31" pos:end="19:34"><literal type="number" pos:start="19:31" pos:end="19:34">1024</literal></expr>]</index></name></decl>,<decl pos:start="19:37" pos:end="19:46"><type ref="prev" pos:start="19:5" pos:end="19:8"/><name pos:start="19:37" pos:end="19:46"><name pos:start="19:37" pos:end="19:40">path</name><index pos:start="19:41" pos:end="19:46">[<expr pos:start="19:42" pos:end="19:45"><literal type="number" pos:start="19:42" pos:end="19:45">1024</literal></expr>]</index></name></decl>,<decl pos:start="19:48" pos:end="19:56"><type ref="prev" pos:start="19:5" pos:end="19:8"/><name pos:start="19:48" pos:end="19:56"><name pos:start="19:48" pos:end="19:50">tmp</name><index pos:start="19:51" pos:end="19:56">[<expr pos:start="19:52" pos:end="19:55"><literal type="number" pos:start="19:52" pos:end="19:55">1024</literal></expr>]</index></name></decl>,<decl pos:start="19:58" pos:end="19:59"><type ref="prev" pos:start="19:5" pos:end="19:8"><modifier pos:start="19:58" pos:end="19:58">*</modifier></type><name pos:start="19:59" pos:end="19:59">q</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:28"><if pos:start="23:5" pos:end="25:28">if<condition pos:start="23:7" pos:end="23:26">(<expr pos:start="23:8" pos:end="23:25"><operator pos:start="23:8" pos:end="23:8">!</operator><call pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:23">ff_network_init</name><argument_list pos:start="23:24" pos:end="23:25">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:28"><block_content pos:start="25:9" pos:end="25:28">

        <return pos:start="25:9" pos:end="25:28">return <expr pos:start="25:16" pos:end="25:27"><call pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:27">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:40"><expr pos:start="29:5" pos:end="31:39"><call pos:start="29:5" pos:end="31:39"><name pos:start="29:5" pos:end="29:13">url_split</name><argument_list pos:start="29:14" pos:end="31:39">(<argument pos:start="29:15" pos:end="29:19"><expr pos:start="29:15" pos:end="29:19"><name pos:start="29:15" pos:end="29:19">proto</name></expr></argument>, <argument pos:start="29:22" pos:end="29:34"><expr pos:start="29:22" pos:end="29:34"><sizeof pos:start="29:22" pos:end="29:34">sizeof<argument_list pos:start="29:28" pos:end="29:34">(<argument pos:start="29:29" pos:end="29:33"><expr pos:start="29:29" pos:end="29:33"><name pos:start="29:29" pos:end="29:33">proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:37" pos:end="29:40"><expr pos:start="29:37" pos:end="29:40"><name pos:start="29:37" pos:end="29:40">NULL</name></expr></argument>, <argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><literal type="number" pos:start="29:43" pos:end="29:43">0</literal></expr></argument>, <argument pos:start="29:46" pos:end="29:53"><expr pos:start="29:46" pos:end="29:53"><name pos:start="29:46" pos:end="29:53">hostname</name></expr></argument>, <argument pos:start="29:56" pos:end="29:71"><expr pos:start="29:56" pos:end="29:71"><sizeof pos:start="29:56" pos:end="29:71">sizeof<argument_list pos:start="29:62" pos:end="29:71">(<argument pos:start="29:63" pos:end="29:70"><expr pos:start="29:63" pos:end="29:70"><name pos:start="29:63" pos:end="29:70">hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>,

        <argument pos:start="31:9" pos:end="31:13"><expr pos:start="31:9" pos:end="31:13"><operator pos:start="31:9" pos:end="31:9">&amp;</operator><name pos:start="31:10" pos:end="31:13">port</name></expr></argument>, <argument pos:start="31:16" pos:end="31:19"><expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">path</name></expr></argument>, <argument pos:start="31:22" pos:end="31:33"><expr pos:start="31:22" pos:end="31:33"><sizeof pos:start="31:22" pos:end="31:33">sizeof<argument_list pos:start="31:28" pos:end="31:33">(<argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><name pos:start="31:29" pos:end="31:32">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:36" pos:end="31:38"><expr pos:start="31:36" pos:end="31:38"><name pos:start="31:36" pos:end="31:38">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:31"><if pos:start="33:5" pos:end="35:31">if <condition pos:start="33:8" pos:end="33:58">(<expr pos:start="33:9" pos:end="33:57"><call pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:14">strcmp</name><argument_list pos:start="33:15" pos:end="33:27">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">proto</name></expr></argument>,<argument pos:start="33:22" pos:end="33:26"><expr pos:start="33:22" pos:end="33:26"><literal type="string" pos:start="33:22" pos:end="33:26">"tcp"</literal></expr></argument>)</argument_list></call> <operator pos:start="33:29" pos:end="33:30">||</operator> <name pos:start="33:32" pos:end="33:35">port</name> <operator pos:start="33:37" pos:end="33:38">&lt;=</operator> <literal type="number" pos:start="33:40" pos:end="33:40">0</literal> <operator pos:start="33:42" pos:end="33:43">||</operator> <name pos:start="33:45" pos:end="33:48">port</name> <operator pos:start="33:50" pos:end="33:51">&gt;=</operator> <literal type="number" pos:start="33:53" pos:end="33:57">65536</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:31"><block_content pos:start="35:9" pos:end="35:31">

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="37:78"><if pos:start="37:5" pos:end="37:78">if <condition pos:start="37:8" pos:end="37:35">(<expr pos:start="37:9" pos:end="37:34"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:10">q</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:33"><name pos:start="37:14" pos:end="37:19">strchr</name><argument_list pos:start="37:20" pos:end="37:33">(<argument pos:start="37:21" pos:end="37:28"><expr pos:start="37:21" pos:end="37:28"><name pos:start="37:21" pos:end="37:28">hostname</name></expr></argument>,<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><literal type="char" pos:start="37:30" pos:end="37:32">'@'</literal></expr></argument>)</argument_list></call><operator pos:start="37:34" pos:end="37:34">)</operator></expr>)</condition> <block pos:start="37:37" pos:end="37:78">{<block_content pos:start="37:39" pos:end="37:76"> <expr_stmt pos:start="37:39" pos:end="37:54"><expr pos:start="37:39" pos:end="37:53"><call pos:start="37:39" pos:end="37:53"><name pos:start="37:39" pos:end="37:44">strcpy</name><argument_list pos:start="37:45" pos:end="37:53">(<argument pos:start="37:46" pos:end="37:48"><expr pos:start="37:46" pos:end="37:48"><name pos:start="37:46" pos:end="37:48">tmp</name></expr></argument>,<argument pos:start="37:50" pos:end="37:52"><expr pos:start="37:50" pos:end="37:52"><name pos:start="37:50" pos:end="37:50">q</name><operator pos:start="37:51" pos:end="37:51">+</operator><literal type="number" pos:start="37:52" pos:end="37:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="37:56" pos:end="37:76"><expr pos:start="37:56" pos:end="37:75"><call pos:start="37:56" pos:end="37:75"><name pos:start="37:56" pos:end="37:61">strcpy</name><argument_list pos:start="37:62" pos:end="37:75">(<argument pos:start="37:63" pos:end="37:70"><expr pos:start="37:63" pos:end="37:70"><name pos:start="37:63" pos:end="37:70">hostname</name></expr></argument>,<argument pos:start="37:72" pos:end="37:74"><expr pos:start="37:72" pos:end="37:74"><name pos:start="37:72" pos:end="37:74">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:35"><expr pos:start="41:5" pos:end="41:34"><name pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:13">dest_addr</name><operator pos:start="41:14" pos:end="41:14">.</operator><name pos:start="41:15" pos:end="41:24">sin_family</name></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <name pos:start="41:28" pos:end="41:34">AF_INET</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:13">dest_addr</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:22">sin_port</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <call pos:start="43:26" pos:end="43:36"><name pos:start="43:26" pos:end="43:30">htons</name><argument_list pos:start="43:31" pos:end="43:36">(<argument pos:start="43:32" pos:end="43:35"><expr pos:start="43:32" pos:end="43:35"><name pos:start="43:32" pos:end="43:35">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:28"><if pos:start="45:5" pos:end="47:28">if <condition pos:start="45:8" pos:end="45:56">(<expr pos:start="45:9" pos:end="45:55"><call pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:20">resolve_host</name><argument_list pos:start="45:21" pos:end="45:51">(<argument pos:start="45:22" pos:end="45:40"><expr pos:start="45:22" pos:end="45:40"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:40"><name pos:start="45:23" pos:end="45:31">dest_addr</name><operator pos:start="45:32" pos:end="45:32">.</operator><name pos:start="45:33" pos:end="45:40">sin_addr</name></name></expr></argument>, <argument pos:start="45:43" pos:end="45:50"><expr pos:start="45:43" pos:end="45:50"><name pos:start="45:43" pos:end="45:50">hostname</name></expr></argument>)</argument_list></call> <operator pos:start="45:53" pos:end="45:53">&lt;</operator> <literal type="number" pos:start="45:55" pos:end="45:55">0</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:28"><block_content pos:start="47:9" pos:end="47:28">

        <return pos:start="47:9" pos:end="47:28">return <expr pos:start="47:16" pos:end="47:27"><call pos:start="47:16" pos:end="47:27"><name pos:start="47:16" pos:end="47:22">AVERROR</name><argument_list pos:start="47:23" pos:end="47:27">(<argument pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><name pos:start="47:24" pos:end="47:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:41"><expr pos:start="51:5" pos:end="51:40"><name pos:start="51:5" pos:end="51:6">fd</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:40"><name pos:start="51:10" pos:end="51:15">socket</name><argument_list pos:start="51:16" pos:end="51:40">(<argument pos:start="51:17" pos:end="51:23"><expr pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:23">AF_INET</name></expr></argument>, <argument pos:start="51:26" pos:end="51:36"><expr pos:start="51:26" pos:end="51:36"><name pos:start="51:26" pos:end="51:36">SOCK_STREAM</name></expr></argument>, <argument pos:start="51:39" pos:end="51:39"><expr pos:start="51:39" pos:end="51:39"><literal type="number" pos:start="51:39" pos:end="51:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:28"><if pos:start="53:5" pos:end="55:28">if <condition pos:start="53:8" pos:end="53:15">(<expr pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:10">fd</name> <operator pos:start="53:12" pos:end="53:12">&lt;</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:28"><block_content pos:start="55:9" pos:end="55:28">

        <return pos:start="55:9" pos:end="55:28">return <expr pos:start="55:16" pos:end="55:27"><call pos:start="55:16" pos:end="55:27"><name pos:start="55:16" pos:end="55:22">AVERROR</name><argument_list pos:start="55:23" pos:end="55:27">(<argument pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><name pos:start="55:24" pos:end="55:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:30"><expr pos:start="57:5" pos:end="57:29"><call pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:22">ff_socket_nonblock</name><argument_list pos:start="57:23" pos:end="57:29">(<argument pos:start="57:24" pos:end="57:25"><expr pos:start="57:24" pos:end="57:25"><name pos:start="57:24" pos:end="57:25">fd</name></expr></argument>, <argument pos:start="57:28" pos:end="57:28"><expr pos:start="57:28" pos:end="57:28"><literal type="number" pos:start="57:28" pos:end="57:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



 <label pos:start="61:2" pos:end="61:6"><name pos:start="61:2" pos:end="61:5">redo</name>:</label>

    <expr_stmt pos:start="63:5" pos:end="65:37"><expr pos:start="63:5" pos:end="65:36"><name pos:start="63:5" pos:end="63:7">ret</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:36"><name pos:start="63:11" pos:end="63:17">connect</name><argument_list pos:start="63:18" pos:end="65:36">(<argument pos:start="63:19" pos:end="63:20"><expr pos:start="63:19" pos:end="63:20"><name pos:start="63:19" pos:end="63:20">fd</name></expr></argument>, <argument pos:start="63:23" pos:end="63:51"><expr pos:start="63:23" pos:end="63:51"><operator pos:start="63:23" pos:end="63:23">(</operator>struct <name pos:start="63:31" pos:end="63:38">sockaddr</name> <operator pos:start="63:40" pos:end="63:40">*</operator><operator pos:start="63:41" pos:end="63:41">)</operator><operator pos:start="63:42" pos:end="63:42">&amp;</operator><name pos:start="63:43" pos:end="63:51">dest_addr</name></expr></argument>,

                  <argument pos:start="65:19" pos:end="65:35"><expr pos:start="65:19" pos:end="65:35"><sizeof pos:start="65:19" pos:end="65:35">sizeof<argument_list pos:start="65:25" pos:end="65:35">(<argument pos:start="65:26" pos:end="65:34"><expr pos:start="65:26" pos:end="65:34"><name pos:start="65:26" pos:end="65:34">dest_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="123:5"><if pos:start="67:5" pos:end="123:5">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">&lt;</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition> <block pos:start="67:18" pos:end="123:5">{<block_content pos:start="69:9" pos:end="121:22">

        <if_stmt pos:start="69:9" pos:end="71:22"><if pos:start="69:9" pos:end="71:22">if <condition pos:start="69:12" pos:end="69:48">(<expr pos:start="69:13" pos:end="69:47"><call pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:23">ff_neterrno</name><argument_list pos:start="69:24" pos:end="69:25">()</argument_list></call> <operator pos:start="69:27" pos:end="69:28">==</operator> <call pos:start="69:30" pos:end="69:47"><name pos:start="69:30" pos:end="69:40">FF_NETERROR</name><argument_list pos:start="69:41" pos:end="69:47">(<argument pos:start="69:42" pos:end="69:46"><expr pos:start="69:42" pos:end="69:46"><name pos:start="69:42" pos:end="69:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:22"><block_content pos:start="71:13" pos:end="71:22">

            <goto pos:start="71:13" pos:end="71:22">goto <name pos:start="71:18" pos:end="71:21">redo</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="77:22"><if pos:start="73:9" pos:end="77:22">if <condition pos:start="73:12" pos:end="75:49">(<expr pos:start="73:13" pos:end="75:48"><call pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:23">ff_neterrno</name><argument_list pos:start="73:24" pos:end="73:25">()</argument_list></call> <operator pos:start="73:27" pos:end="73:28">!=</operator> <call pos:start="73:30" pos:end="73:53"><name pos:start="73:30" pos:end="73:40">FF_NETERROR</name><argument_list pos:start="73:41" pos:end="73:53">(<argument pos:start="73:42" pos:end="73:52"><expr pos:start="73:42" pos:end="73:52"><name pos:start="73:42" pos:end="73:52">EINPROGRESS</name></expr></argument>)</argument_list></call> <operator pos:start="73:55" pos:end="73:56">&amp;&amp;</operator>

            <call pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:23">ff_neterrno</name><argument_list pos:start="75:24" pos:end="75:25">()</argument_list></call> <operator pos:start="75:27" pos:end="75:28">!=</operator> <call pos:start="75:30" pos:end="75:48"><name pos:start="75:30" pos:end="75:40">FF_NETERROR</name><argument_list pos:start="75:41" pos:end="75:48">(<argument pos:start="75:42" pos:end="75:47"><expr pos:start="75:42" pos:end="75:47"><name pos:start="75:42" pos:end="75:47">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:22"><block_content pos:start="77:13" pos:end="77:22">

            <goto pos:start="77:13" pos:end="77:22">goto <name pos:start="77:18" pos:end="77:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <comment type="block" pos:start="81:9" pos:end="81:56">/* wait until we are connected or until abort */</comment>

        <for pos:start="83:9" pos:end="109:9">for<control pos:start="83:12" pos:end="83:15">(<init pos:start="83:13" pos:end="83:13">;</init><condition pos:start="83:14" pos:end="83:14">;</condition><incr/>)</control> <block pos:start="83:17" pos:end="109:9">{<block_content pos:start="85:13" pos:end="107:22">

            <if_stmt pos:start="85:13" pos:end="91:13"><if pos:start="85:13" pos:end="91:13">if <condition pos:start="85:16" pos:end="85:35">(<expr pos:start="85:17" pos:end="85:34"><call pos:start="85:17" pos:end="85:34"><name pos:start="85:17" pos:end="85:32">url_interrupt_cb</name><argument_list pos:start="85:33" pos:end="85:34">()</argument_list></call></expr>)</condition> <block pos:start="85:37" pos:end="91:13">{<block_content pos:start="87:17" pos:end="89:27">

                <expr_stmt pos:start="87:17" pos:end="87:37"><expr pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:29">AVERROR</name><argument_list pos:start="87:30" pos:end="87:36">(<argument pos:start="87:31" pos:end="87:35"><expr pos:start="87:31" pos:end="87:35"><name pos:start="87:31" pos:end="87:35">EINTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="89:17" pos:end="89:27">goto <name pos:start="89:22" pos:end="89:26">fail1</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:24"><expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:18">fd_max</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:23">fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><call pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:19">FD_ZERO</name><argument_list pos:start="95:20" pos:end="95:26">(<argument pos:start="95:21" pos:end="95:25"><expr pos:start="95:21" pos:end="95:25"><operator pos:start="95:21" pos:end="95:21">&amp;</operator><name pos:start="95:22" pos:end="95:25">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:30"><expr pos:start="97:13" pos:end="97:29"><call pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:18">FD_SET</name><argument_list pos:start="97:19" pos:end="97:29">(<argument pos:start="97:20" pos:end="97:21"><expr pos:start="97:20" pos:end="97:21"><name pos:start="97:20" pos:end="97:21">fd</name></expr></argument>, <argument pos:start="97:24" pos:end="97:28"><expr pos:start="97:24" pos:end="97:28"><operator pos:start="97:24" pos:end="97:24">&amp;</operator><name pos:start="97:25" pos:end="97:28">wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:26"><expr pos:start="99:13" pos:end="99:25"><name pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:14">tv</name><operator pos:start="99:15" pos:end="99:15">.</operator><name pos:start="99:16" pos:end="99:21">tv_sec</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <literal type="number" pos:start="99:25" pos:end="99:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:36"><expr pos:start="101:13" pos:end="101:35"><name pos:start="101:13" pos:end="101:22"><name pos:start="101:13" pos:end="101:14">tv</name><operator pos:start="101:15" pos:end="101:15">.</operator><name pos:start="101:16" pos:end="101:22">tv_usec</name></name> <operator pos:start="101:24" pos:end="101:24">=</operator> <literal type="number" pos:start="101:26" pos:end="101:28">100</literal> <operator pos:start="101:30" pos:end="101:30">*</operator> <literal type="number" pos:start="101:32" pos:end="101:35">1000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:61"><expr pos:start="103:13" pos:end="103:60"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:60"><name pos:start="103:19" pos:end="103:24">select</name><argument_list pos:start="103:25" pos:end="103:60">(<argument pos:start="103:26" pos:end="103:35"><expr pos:start="103:26" pos:end="103:35"><name pos:start="103:26" pos:end="103:31">fd_max</name> <operator pos:start="103:33" pos:end="103:33">+</operator> <literal type="number" pos:start="103:35" pos:end="103:35">1</literal></expr></argument>, <argument pos:start="103:38" pos:end="103:41"><expr pos:start="103:38" pos:end="103:41"><name pos:start="103:38" pos:end="103:41">NULL</name></expr></argument>, <argument pos:start="103:44" pos:end="103:48"><expr pos:start="103:44" pos:end="103:48"><operator pos:start="103:44" pos:end="103:44">&amp;</operator><name pos:start="103:45" pos:end="103:48">wfds</name></expr></argument>, <argument pos:start="103:51" pos:end="103:54"><expr pos:start="103:51" pos:end="103:54"><name pos:start="103:51" pos:end="103:54">NULL</name></expr></argument>, <argument pos:start="103:57" pos:end="103:59"><expr pos:start="103:57" pos:end="103:59"><operator pos:start="103:57" pos:end="103:57">&amp;</operator><name pos:start="103:58" pos:end="103:59">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="107:22"><if pos:start="105:13" pos:end="107:22">if <condition pos:start="105:16" pos:end="105:47">(<expr pos:start="105:17" pos:end="105:46"><name pos:start="105:17" pos:end="105:19">ret</name> <operator pos:start="105:21" pos:end="105:21">&gt;</operator> <literal type="number" pos:start="105:23" pos:end="105:23">0</literal> <operator pos:start="105:25" pos:end="105:26">&amp;&amp;</operator> <call pos:start="105:28" pos:end="105:46"><name pos:start="105:28" pos:end="105:35">FD_ISSET</name><argument_list pos:start="105:36" pos:end="105:46">(<argument pos:start="105:37" pos:end="105:38"><expr pos:start="105:37" pos:end="105:38"><name pos:start="105:37" pos:end="105:38">fd</name></expr></argument>, <argument pos:start="105:41" pos:end="105:45"><expr pos:start="105:41" pos:end="105:45"><operator pos:start="105:41" pos:end="105:41">&amp;</operator><name pos:start="105:42" pos:end="105:45">wfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:22"><block_content pos:start="107:17" pos:end="107:22">

                <break pos:start="107:17" pos:end="107:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="113:9" pos:end="113:24">/* test error */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:29"><expr pos:start="115:9" pos:end="115:28"><name pos:start="115:9" pos:end="115:14">optlen</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <sizeof pos:start="115:18" pos:end="115:28">sizeof<argument_list pos:start="115:24" pos:end="115:28">(<argument pos:start="115:25" pos:end="115:27"><expr pos:start="115:25" pos:end="115:27"><name pos:start="115:25" pos:end="115:27">ret</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:61"><expr pos:start="117:9" pos:end="117:60"><call pos:start="117:9" pos:end="117:60"><name pos:start="117:9" pos:end="117:18">getsockopt</name> <argument_list pos:start="117:20" pos:end="117:60">(<argument pos:start="117:21" pos:end="117:22"><expr pos:start="117:21" pos:end="117:22"><name pos:start="117:21" pos:end="117:22">fd</name></expr></argument>, <argument pos:start="117:25" pos:end="117:34"><expr pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:34">SOL_SOCKET</name></expr></argument>, <argument pos:start="117:37" pos:end="117:44"><expr pos:start="117:37" pos:end="117:44"><name pos:start="117:37" pos:end="117:44">SO_ERROR</name></expr></argument>, <argument pos:start="117:47" pos:end="117:50"><expr pos:start="117:47" pos:end="117:50"><operator pos:start="117:47" pos:end="117:47">&amp;</operator><name pos:start="117:48" pos:end="117:50">ret</name></expr></argument>, <argument pos:start="117:53" pos:end="117:59"><expr pos:start="117:53" pos:end="117:59"><operator pos:start="117:53" pos:end="117:53">&amp;</operator><name pos:start="117:54" pos:end="117:59">optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="121:22"><if pos:start="119:9" pos:end="121:22">if <condition pos:start="119:12" pos:end="119:21">(<expr pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:18">!=</operator> <literal type="number" pos:start="119:20" pos:end="119:20">0</literal></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:22"><block_content pos:start="121:13" pos:end="121:22">

            <goto pos:start="121:13" pos:end="121:22">goto <name pos:start="121:18" pos:end="121:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:38"><expr pos:start="125:5" pos:end="125:37"><name pos:start="125:5" pos:end="125:5">s</name> <operator pos:start="125:7" pos:end="125:7">=</operator> <call pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:17">av_malloc</name><argument_list pos:start="125:18" pos:end="125:37">(<argument pos:start="125:19" pos:end="125:36"><expr pos:start="125:19" pos:end="125:36"><sizeof pos:start="125:19" pos:end="125:36">sizeof<argument_list pos:start="125:25" pos:end="125:36">(<argument pos:start="125:26" pos:end="125:35"><expr pos:start="125:26" pos:end="125:35"><name pos:start="125:26" pos:end="125:35">TCPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="129:31"><if pos:start="127:5" pos:end="129:31">if <condition pos:start="127:8" pos:end="127:11">(<expr pos:start="127:9" pos:end="127:10"><operator pos:start="127:9" pos:end="127:9">!</operator><name pos:start="127:10" pos:end="127:10">s</name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:31"><block_content pos:start="129:9" pos:end="129:31">

        <return pos:start="129:9" pos:end="129:31">return <expr pos:start="129:16" pos:end="129:30"><call pos:start="129:16" pos:end="129:30"><name pos:start="129:16" pos:end="129:22">AVERROR</name><argument_list pos:start="129:23" pos:end="129:30">(<argument pos:start="129:24" pos:end="129:29"><expr pos:start="129:24" pos:end="129:29"><name pos:start="129:24" pos:end="129:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:21"><expr pos:start="131:5" pos:end="131:20"><name pos:start="131:5" pos:end="131:16"><name pos:start="131:5" pos:end="131:5">h</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:16">priv_data</name></name> <operator pos:start="131:18" pos:end="131:18">=</operator> <name pos:start="131:20" pos:end="131:20">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:23"><expr pos:start="133:5" pos:end="133:22"><name pos:start="133:5" pos:end="133:18"><name pos:start="133:5" pos:end="133:5">h</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:18">is_streamed</name></name> <operator pos:start="133:20" pos:end="133:20">=</operator> <literal type="number" pos:start="133:22" pos:end="133:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:15"><expr pos:start="135:5" pos:end="135:14"><name pos:start="135:5" pos:end="135:9"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:9">fd</name></name> <operator pos:start="135:11" pos:end="135:11">=</operator> <name pos:start="135:13" pos:end="135:14">fd</name></expr>;</expr_stmt>

    <return pos:start="137:5" pos:end="137:13">return <expr pos:start="137:12" pos:end="137:12"><literal type="number" pos:start="137:12" pos:end="137:12">0</literal></expr>;</return>



 <label pos:start="141:2" pos:end="141:6"><name pos:start="141:2" pos:end="141:5">fail</name>:</label>

    <expr_stmt pos:start="143:5" pos:end="143:23"><expr pos:start="143:5" pos:end="143:22"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="143:22"><name pos:start="143:11" pos:end="143:17">AVERROR</name><argument_list pos:start="143:18" pos:end="143:22">(<argument pos:start="143:19" pos:end="143:21"><expr pos:start="143:19" pos:end="143:21"><name pos:start="143:19" pos:end="143:21">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="145:2" pos:end="145:7"><name pos:start="145:2" pos:end="145:6">fail1</name>:</label>

    <if_stmt pos:start="147:5" pos:end="149:24"><if pos:start="147:5" pos:end="149:24">if <condition pos:start="147:8" pos:end="147:16">(<expr pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:10">fd</name> <operator pos:start="147:12" pos:end="147:13">&gt;=</operator> <literal type="number" pos:start="147:15" pos:end="147:15">0</literal></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:24"><block_content pos:start="149:9" pos:end="149:24">

        <expr_stmt pos:start="149:9" pos:end="149:24"><expr pos:start="149:9" pos:end="149:23"><call pos:start="149:9" pos:end="149:23"><name pos:start="149:9" pos:end="149:19">closesocket</name><argument_list pos:start="149:20" pos:end="149:23">(<argument pos:start="149:21" pos:end="149:22"><expr pos:start="149:21" pos:end="149:22"><name pos:start="149:21" pos:end="149:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="151:5" pos:end="151:15">return <expr pos:start="151:12" pos:end="151:14"><name pos:start="151:12" pos:end="151:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
