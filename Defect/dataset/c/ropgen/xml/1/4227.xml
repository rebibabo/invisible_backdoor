<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4227.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:44">qio_channel_websock_read_wire</name><parameter_list pos:start="1:45" pos:end="3:58">(<parameter pos:start="1:46" pos:end="1:67"><decl pos:start="1:46" pos:end="1:67"><type pos:start="1:46" pos:end="1:67"><name pos:start="1:46" pos:end="1:62">QIOChannelWebsock</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">ioc</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:57"><decl pos:start="3:46" pos:end="3:57"><type pos:start="3:46" pos:end="3:57"><name pos:start="3:46" pos:end="3:50">Error</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier><modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:13">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">ssize_t</name></type> <name pos:start="7:13" pos:end="7:15">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="45:5"><if pos:start="11:5" pos:end="45:5">if <condition pos:start="11:8" pos:end="11:36">(<expr pos:start="11:9" pos:end="11:35"><name pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:11">ioc</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:21">encinput</name><operator pos:start="11:22" pos:end="11:22">.</operator><name pos:start="11:23" pos:end="11:28">offset</name></name> <operator pos:start="11:30" pos:end="11:30">&lt;</operator> <literal type="number" pos:start="11:32" pos:end="11:35">4096</literal></expr>)</condition> <block pos:start="11:38" pos:end="45:5">{<block_content pos:start="13:9" pos:end="43:36">

        <decl_stmt pos:start="13:9" pos:end="13:50"><decl pos:start="13:9" pos:end="13:49"><type pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:14">size_t</name></type> <name pos:start="13:16" pos:end="13:19">want</name> <init pos:start="13:21" pos:end="13:49">= <expr pos:start="13:23" pos:end="13:49"><literal type="number" pos:start="13:23" pos:end="13:28">4096</literal> <operator pos:start="13:28" pos:end="13:28">-</operator> <name pos:start="13:30" pos:end="13:49"><name pos:start="13:30" pos:end="13:32">ioc</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:42">encinput</name><operator pos:start="13:43" pos:end="13:43">.</operator><name pos:start="13:44" pos:end="13:49">offset</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="17:9" pos:end="17:45"><expr pos:start="17:9" pos:end="17:44"><call pos:start="17:9" pos:end="17:44"><name pos:start="17:9" pos:end="17:22">buffer_reserve</name><argument_list pos:start="17:23" pos:end="17:44">(<argument pos:start="17:24" pos:end="17:37"><expr pos:start="17:24" pos:end="17:37"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:37"><name pos:start="17:25" pos:end="17:27">ioc</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:37">encinput</name></name></expr></argument>, <argument pos:start="17:40" pos:end="17:43"><expr pos:start="17:40" pos:end="17:43"><name pos:start="17:40" pos:end="17:43">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="27:37"><expr pos:start="19:9" pos:end="27:36"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="27:36"><name pos:start="19:15" pos:end="19:30">qio_channel_read</name><argument_list pos:start="19:31" pos:end="27:36">(<argument pos:start="19:32" pos:end="19:42"><expr pos:start="19:32" pos:end="19:42"><name pos:start="19:32" pos:end="19:42"><name pos:start="19:32" pos:end="19:34">ioc</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:42">master</name></name></expr></argument>,

                               <argument pos:start="21:32" pos:end="23:51"><expr pos:start="21:32" pos:end="23:51"><operator pos:start="21:32" pos:end="21:32">(</operator><name pos:start="21:33" pos:end="21:36">char</name> <operator pos:start="21:38" pos:end="21:38">*</operator><operator pos:start="21:39" pos:end="21:39">)</operator><name pos:start="21:40" pos:end="21:59"><name pos:start="21:40" pos:end="21:42">ioc</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:52">encinput</name><operator pos:start="21:53" pos:end="21:53">.</operator><name pos:start="21:54" pos:end="21:59">buffer</name></name> <operator pos:start="21:61" pos:end="21:61">+</operator>

                               <name pos:start="23:32" pos:end="23:51"><name pos:start="23:32" pos:end="23:34">ioc</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:44">encinput</name><operator pos:start="23:45" pos:end="23:45">.</operator><name pos:start="23:46" pos:end="23:51">offset</name></name></expr></argument>,

                               <argument pos:start="25:32" pos:end="25:35"><expr pos:start="25:32" pos:end="25:35"><name pos:start="25:32" pos:end="25:35">want</name></expr></argument>,

                               <argument pos:start="27:32" pos:end="27:35"><expr pos:start="27:32" pos:end="27:35"><name pos:start="27:32" pos:end="27:35">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">&lt;</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>)</condition> <block pos:start="29:22" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:23">

            <return pos:start="31:13" pos:end="31:23">return <expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="37:38">(<expr pos:start="35:13" pos:end="37:37"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:18">==</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal> <operator pos:start="35:22" pos:end="35:23">&amp;&amp;</operator>

            <name pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:15">ioc</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:25">encinput</name><operator pos:start="37:26" pos:end="37:26">.</operator><name pos:start="37:27" pos:end="37:32">offset</name></name> <operator pos:start="37:34" pos:end="37:35">==</operator> <literal type="number" pos:start="37:37" pos:end="37:37">0</literal></expr>)</condition> <block pos:start="37:40" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:21">

            <return pos:start="39:13" pos:end="39:21">return <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:11">ioc</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:21">encinput</name><operator pos:start="43:22" pos:end="43:22">.</operator><name pos:start="43:23" pos:end="43:28">offset</name></name> <operator pos:start="43:30" pos:end="43:31">+=</operator> <name pos:start="43:33" pos:end="43:35">ret</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="49:5" pos:end="81:5">while <condition pos:start="49:11" pos:end="49:37">(<expr pos:start="49:12" pos:end="49:36"><name pos:start="49:12" pos:end="49:31"><name pos:start="49:12" pos:end="49:14">ioc</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:24">encinput</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:31">offset</name></name> <operator pos:start="49:33" pos:end="49:34">!=</operator> <literal type="number" pos:start="49:36" pos:end="49:36">0</literal></expr>)</condition> <block pos:start="49:39" pos:end="81:5">{<block_content pos:start="51:9" pos:end="79:9">

        <if_stmt pos:start="51:9" pos:end="69:9"><if pos:start="51:9" pos:end="69:9">if <condition pos:start="51:12" pos:end="51:37">(<expr pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:15">ioc</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:31">payload_remain</name></name> <operator pos:start="51:33" pos:end="51:34">==</operator> <literal type="number" pos:start="51:36" pos:end="51:36">0</literal></expr>)</condition> <block pos:start="51:39" pos:end="69:9">{<block_content pos:start="53:13" pos:end="67:13">

            <expr_stmt pos:start="53:13" pos:end="53:63"><expr pos:start="53:13" pos:end="53:62"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:62"><name pos:start="53:19" pos:end="53:51">qio_channel_websock_decode_header</name><argument_list pos:start="53:52" pos:end="53:62">(<argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">ioc</name></expr></argument>, <argument pos:start="53:58" pos:end="53:61"><expr pos:start="53:58" pos:end="53:61"><name pos:start="53:58" pos:end="53:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="59:13"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:24">(<expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:19">ret</name> <operator pos:start="55:21" pos:end="55:21">&lt;</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr>)</condition> <block pos:start="55:26" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:27">

                <return pos:start="57:17" pos:end="57:27">return <expr pos:start="57:24" pos:end="57:26"><name pos:start="57:24" pos:end="57:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:25">(<expr pos:start="61:17" pos:end="61:24"><name pos:start="61:17" pos:end="61:19">ret</name> <operator pos:start="61:21" pos:end="61:22">==</operator> <literal type="number" pos:start="61:24" pos:end="61:24">0</literal></expr>)</condition> <block pos:start="61:27" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:22">

                <expr_stmt pos:start="63:17" pos:end="63:35"><expr pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:27"><name pos:start="63:17" pos:end="63:19">ioc</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:27">io_eof</name></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <name pos:start="63:31" pos:end="63:34">TRUE</name></expr>;</expr_stmt>

                <break pos:start="65:17" pos:end="65:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:60"><expr pos:start="73:9" pos:end="73:59"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:59"><name pos:start="73:15" pos:end="73:48">qio_channel_websock_decode_payload</name><argument_list pos:start="73:49" pos:end="73:59">(<argument pos:start="73:50" pos:end="73:52"><expr pos:start="73:50" pos:end="73:52"><name pos:start="73:50" pos:end="73:52">ioc</name></expr></argument>, <argument pos:start="73:55" pos:end="73:58"><expr pos:start="73:55" pos:end="73:58"><name pos:start="73:55" pos:end="73:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:20">(<expr pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">&lt;</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>)</condition> <block pos:start="75:22" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:23">

            <return pos:start="77:13" pos:end="77:23">return <expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
