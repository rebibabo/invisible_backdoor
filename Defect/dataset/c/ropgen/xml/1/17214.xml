<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17214.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">qemu_rdma_accept</name><parameter_list pos:start="1:28" pos:end="1:46">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">RDMAContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">rdma</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="5:5" pos:end="261:15">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:20">RDMACapabilities</name></type> <name pos:start="5:22" pos:end="5:24">cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="15:43"><decl pos:start="7:5" pos:end="15:42"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:26">rdma_conn_param</name></name></type> <name pos:start="7:28" pos:end="7:37">conn_param</name> <init pos:start="7:39" pos:end="15:42">= <expr pos:start="7:41" pos:end="15:42"><block pos:start="7:41" pos:end="15:42">{

                                            <expr pos:start="9:45" pos:end="9:68"><operator pos:start="9:45" pos:end="9:45">.</operator><name pos:start="9:46" pos:end="9:64">responder_resources</name> <operator pos:start="9:66" pos:end="9:66">=</operator> <literal type="number" pos:start="9:68" pos:end="9:68">2</literal></expr>,

                                            <expr pos:start="11:45" pos:end="11:64"><operator pos:start="11:45" pos:end="11:45">.</operator><name pos:start="11:46" pos:end="11:57">private_data</name> <operator pos:start="11:59" pos:end="11:59">=</operator> <operator pos:start="11:61" pos:end="11:61">&amp;</operator><name pos:start="11:62" pos:end="11:64">cap</name></expr>,

                                            <expr pos:start="13:45" pos:end="13:75"><operator pos:start="13:45" pos:end="13:45">.</operator><name pos:start="13:46" pos:end="13:61">private_data_len</name> <operator pos:start="13:63" pos:end="13:63">=</operator> <sizeof pos:start="13:65" pos:end="13:75">sizeof<argument_list pos:start="13:71" pos:end="13:75">(<argument pos:start="13:72" pos:end="13:74"><expr pos:start="13:72" pos:end="13:74"><name pos:start="13:72" pos:end="13:74">cap</name></expr></argument>)</argument_list></sizeof></expr>,

                                         }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:24">rdma_cm_event</name></name> <modifier pos:start="17:26" pos:end="17:26">*</modifier></type><name pos:start="17:27" pos:end="17:34">cm_event</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:22">ibv_context</name></name> <modifier pos:start="19:24" pos:end="19:24">*</modifier></type><name pos:start="19:25" pos:end="19:29">verbs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name> <init pos:start="21:13" pos:end="21:21">= <expr pos:start="21:15" pos:end="21:21"><operator pos:start="21:15" pos:end="21:15">-</operator><name pos:start="21:16" pos:end="21:21">EINVAL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">idx</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:54"><expr pos:start="27:5" pos:end="27:53"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:53"><name pos:start="27:11" pos:end="27:27">rdma_get_cm_event</name><argument_list pos:start="27:28" pos:end="27:53">(<argument pos:start="27:29" pos:end="27:41"><expr pos:start="27:29" pos:end="27:41"><name pos:start="27:29" pos:end="27:41"><name pos:start="27:29" pos:end="27:32">rdma</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:41">channel</name></name></expr></argument>, <argument pos:start="27:44" pos:end="27:52"><expr pos:start="27:44" pos:end="27:52"><operator pos:start="27:44" pos:end="27:44">&amp;</operator><name pos:start="27:45" pos:end="27:52">cm_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:12">(<expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">ret</name></expr>)</condition> <block pos:start="29:14" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:32">

        <goto pos:start="31:9" pos:end="31:32">goto <name pos:start="31:14" pos:end="31:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:57">(<expr pos:start="37:9" pos:end="37:56"><name pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:16">cm_event</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:23">event</name></name> <operator pos:start="37:25" pos:end="37:26">!=</operator> <name pos:start="37:28" pos:end="37:56">RDMA_CM_EVENT_CONNECT_REQUEST</name></expr>)</condition> <block pos:start="37:59" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:32">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><call pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:25">rdma_ack_cm_event</name><argument_list pos:start="39:26" pos:end="39:35">(<argument pos:start="39:27" pos:end="39:34"><expr pos:start="39:27" pos:end="39:34"><name pos:start="39:27" pos:end="39:34">cm_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:32">goto <name pos:start="41:14" pos:end="41:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:65"><expr pos:start="47:5" pos:end="47:64"><call pos:start="47:5" pos:end="47:64"><name pos:start="47:5" pos:end="47:10">memcpy</name><argument_list pos:start="47:11" pos:end="47:64">(<argument pos:start="47:12" pos:end="47:15"><expr pos:start="47:12" pos:end="47:15"><operator pos:start="47:12" pos:end="47:12">&amp;</operator><name pos:start="47:13" pos:end="47:15">cap</name></expr></argument>, <argument pos:start="47:18" pos:end="47:50"><expr pos:start="47:18" pos:end="47:50"><name pos:start="47:18" pos:end="47:50"><name pos:start="47:18" pos:end="47:25">cm_event</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:32">param</name><operator pos:start="47:33" pos:end="47:33">.</operator><name pos:start="47:34" pos:end="47:37">conn</name><operator pos:start="47:38" pos:end="47:38">.</operator><name pos:start="47:39" pos:end="47:50">private_data</name></name></expr></argument>, <argument pos:start="47:53" pos:end="47:63"><expr pos:start="47:53" pos:end="47:63"><sizeof pos:start="47:53" pos:end="47:63">sizeof<argument_list pos:start="47:59" pos:end="47:63">(<argument pos:start="47:60" pos:end="47:62"><expr pos:start="47:60" pos:end="47:62"><name pos:start="47:60" pos:end="47:62">cap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:26"><expr pos:start="51:5" pos:end="51:25"><call pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:19">network_to_caps</name><argument_list pos:start="51:20" pos:end="51:25">(<argument pos:start="51:21" pos:end="51:24"><expr pos:start="51:21" pos:end="51:24"><operator pos:start="51:21" pos:end="51:21">&amp;</operator><name pos:start="51:22" pos:end="51:24">cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="55:70">(<expr pos:start="55:9" pos:end="55:69"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:11">cap</name><operator pos:start="55:12" pos:end="55:12">.</operator><name pos:start="55:13" pos:end="55:19">version</name></name> <operator pos:start="55:21" pos:end="55:21">&lt;</operator> <literal type="number" pos:start="55:23" pos:end="55:23">1</literal> <operator pos:start="55:25" pos:end="55:26">||</operator> <name pos:start="55:28" pos:end="55:38"><name pos:start="55:28" pos:end="55:30">cap</name><operator pos:start="55:31" pos:end="55:31">.</operator><name pos:start="55:32" pos:end="55:38">version</name></name> <operator pos:start="55:40" pos:end="55:40">&gt;</operator> <name pos:start="55:42" pos:end="55:69">RDMA_CONTROL_VERSION_CURRENT</name></expr>)</condition> <block pos:start="55:72" pos:end="65:5">{<block_content pos:start="57:13" pos:end="63:36">

            <expr_stmt pos:start="57:13" pos:end="59:41"><expr pos:start="57:13" pos:end="59:40"><call pos:start="57:13" pos:end="59:40"><name pos:start="57:13" pos:end="57:19">fprintf</name><argument_list pos:start="57:20" pos:end="59:40">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">stderr</name></expr></argument>, <argument pos:start="57:29" pos:end="57:75"><expr pos:start="57:29" pos:end="57:75"><literal type="string" pos:start="57:29" pos:end="57:75">"Unknown source RDMA version: %d, bailing...\n"</literal></expr></argument>,

                            <argument pos:start="59:29" pos:end="59:39"><expr pos:start="59:29" pos:end="59:39"><name pos:start="59:29" pos:end="59:39"><name pos:start="59:29" pos:end="59:31">cap</name><operator pos:start="59:32" pos:end="59:32">.</operator><name pos:start="59:33" pos:end="59:39">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:40"><expr pos:start="61:13" pos:end="61:39"><call pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:29">rdma_ack_cm_event</name><argument_list pos:start="61:30" pos:end="61:39">(<argument pos:start="61:31" pos:end="61:38"><expr pos:start="61:31" pos:end="61:38"><name pos:start="61:31" pos:end="61:38">cm_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="63:13" pos:end="63:36">goto <name pos:start="63:18" pos:end="63:35">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="73:7">/*

     * Respond with only the capabilities this version of QEMU knows about.

     */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:36"><expr pos:start="75:5" pos:end="75:35"><name pos:start="75:5" pos:end="75:13"><name pos:start="75:5" pos:end="75:7">cap</name><operator pos:start="75:8" pos:end="75:8">.</operator><name pos:start="75:9" pos:end="75:13">flags</name></name> <operator pos:start="75:15" pos:end="75:16">&amp;=</operator> <name pos:start="75:18" pos:end="75:35">known_capabilities</name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="85:7">/*

     * Enable the ones that we do know about.

     * Add other checks here as new ones are introduced.

     */</comment>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:44">(<expr pos:start="87:9" pos:end="87:43"><name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:11">cap</name><operator pos:start="87:12" pos:end="87:12">.</operator><name pos:start="87:13" pos:end="87:17">flags</name></name> <operator pos:start="87:19" pos:end="87:19">&amp;</operator> <name pos:start="87:21" pos:end="87:43">RDMA_CAPABILITY_PIN_ALL</name></expr>)</condition> <block pos:start="87:46" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:29">

        <expr_stmt pos:start="89:9" pos:end="89:29"><expr pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:12">rdma</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:21">pin_all</name></name> <operator pos:start="89:23" pos:end="89:23">=</operator> <name pos:start="89:25" pos:end="89:28">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:31"><expr pos:start="95:5" pos:end="95:30"><name pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:8">rdma</name><operator pos:start="95:9" pos:end="95:10">-&gt;</operator><name pos:start="95:11" pos:end="95:15">cm_id</name></name> <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:30"><name pos:start="95:19" pos:end="95:26">cm_event</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:30">id</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:32"><expr pos:start="97:5" pos:end="97:31"><name pos:start="97:5" pos:end="97:9">verbs</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <name pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:20">cm_event</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:24">id</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:31">verbs</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:32"><expr pos:start="101:5" pos:end="101:31"><call pos:start="101:5" pos:end="101:31"><name pos:start="101:5" pos:end="101:21">rdma_ack_cm_event</name><argument_list pos:start="101:22" pos:end="101:31">(<argument pos:start="101:23" pos:end="101:30"><expr pos:start="101:23" pos:end="101:30"><name pos:start="101:23" pos:end="101:30">cm_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:76"><expr pos:start="105:5" pos:end="105:75"><call pos:start="105:5" pos:end="105:75"><name pos:start="105:5" pos:end="105:11">DPRINTF</name><argument_list pos:start="105:12" pos:end="105:75">(<argument pos:start="105:13" pos:end="105:34"><expr pos:start="105:13" pos:end="105:34"><literal type="string" pos:start="105:13" pos:end="105:34">"Memory pin all: %s\n"</literal></expr></argument>, <argument pos:start="105:37" pos:end="105:74"><expr pos:start="105:37" pos:end="105:74"><ternary pos:start="105:37" pos:end="105:74"><condition pos:start="105:37" pos:end="105:51"><expr pos:start="105:37" pos:end="105:49"><name pos:start="105:37" pos:end="105:49"><name pos:start="105:37" pos:end="105:40">rdma</name><operator pos:start="105:41" pos:end="105:42">-&gt;</operator><name pos:start="105:43" pos:end="105:49">pin_all</name></name></expr> ?</condition><then pos:start="105:53" pos:end="105:61"> <expr pos:start="105:53" pos:end="105:61"><literal type="string" pos:start="105:53" pos:end="105:61">"enabled"</literal></expr> </then><else pos:start="105:63" pos:end="105:74">: <expr pos:start="105:65" pos:end="105:74"><literal type="string" pos:start="105:65" pos:end="105:74">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:26"><expr pos:start="109:5" pos:end="109:25"><call pos:start="109:5" pos:end="109:25"><name pos:start="109:5" pos:end="109:19">caps_to_network</name><argument_list pos:start="109:20" pos:end="109:25">(<argument pos:start="109:21" pos:end="109:24"><expr pos:start="109:21" pos:end="109:24"><operator pos:start="109:21" pos:end="109:21">&amp;</operator><name pos:start="109:22" pos:end="109:24">cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:55"><expr pos:start="113:5" pos:end="113:54"><call pos:start="113:5" pos:end="113:54"><name pos:start="113:5" pos:end="113:11">DPRINTF</name><argument_list pos:start="113:12" pos:end="113:54">(<argument pos:start="113:13" pos:end="113:46"><expr pos:start="113:13" pos:end="113:46"><literal type="string" pos:start="113:13" pos:end="113:46">"verbs context after listen: %p\n"</literal></expr></argument>, <argument pos:start="113:49" pos:end="113:53"><expr pos:start="113:49" pos:end="113:53"><name pos:start="113:49" pos:end="113:53">verbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="129:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:21">(<expr pos:start="117:9" pos:end="117:20"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:20"><name pos:start="117:10" pos:end="117:13">rdma</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:20">verbs</name></name></expr>)</condition> <block pos:start="117:23" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:28">

        <expr_stmt pos:start="119:9" pos:end="119:28"><expr pos:start="119:9" pos:end="119:27"><name pos:start="119:9" pos:end="119:19"><name pos:start="119:9" pos:end="119:12">rdma</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:19">verbs</name></name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:27">verbs</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="129:5">else if <condition pos:start="121:15" pos:end="121:36">(<expr pos:start="121:16" pos:end="121:35"><name pos:start="121:16" pos:end="121:26"><name pos:start="121:16" pos:end="121:19">rdma</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:26">verbs</name></name> <operator pos:start="121:28" pos:end="121:29">!=</operator> <name pos:start="121:31" pos:end="121:35">verbs</name></expr>)</condition> <block pos:start="121:38" pos:end="129:5">{<block_content pos:start="123:13" pos:end="127:36">

            <expr_stmt pos:start="123:13" pos:end="125:40"><expr pos:start="123:13" pos:end="125:39"><call pos:start="123:13" pos:end="125:39"><name pos:start="123:13" pos:end="123:19">fprintf</name><argument_list pos:start="123:20" pos:end="125:39">(<argument pos:start="123:21" pos:end="123:26"><expr pos:start="123:21" pos:end="123:26"><name pos:start="123:21" pos:end="123:26">stderr</name></expr></argument>, <argument pos:start="123:29" pos:end="123:64"><expr pos:start="123:29" pos:end="123:64"><literal type="string" pos:start="123:29" pos:end="123:64">"ibv context not matching %p, %p!\n"</literal></expr></argument>,

                    <argument pos:start="125:21" pos:end="125:31"><expr pos:start="125:21" pos:end="125:31"><name pos:start="125:21" pos:end="125:31"><name pos:start="125:21" pos:end="125:24">rdma</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:31">verbs</name></name></expr></argument>, <argument pos:start="125:34" pos:end="125:38"><expr pos:start="125:34" pos:end="125:38"><name pos:start="125:34" pos:end="125:38">verbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:36">goto <name pos:start="127:18" pos:end="127:35">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:42"><expr pos:start="133:5" pos:end="133:41"><call pos:start="133:5" pos:end="133:41"><name pos:start="133:5" pos:end="133:21">qemu_rdma_dump_id</name><argument_list pos:start="133:22" pos:end="133:41">(<argument pos:start="133:23" pos:end="133:33"><expr pos:start="133:23" pos:end="133:33"><literal type="string" pos:start="133:23" pos:end="133:33">"dest_init"</literal></expr></argument>, <argument pos:start="133:36" pos:end="133:40"><expr pos:start="133:36" pos:end="133:40"><name pos:start="133:36" pos:end="133:40">verbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:38"><expr pos:start="137:5" pos:end="137:37"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:37"><name pos:start="137:11" pos:end="137:31">qemu_rdma_alloc_pd_cq</name><argument_list pos:start="137:32" pos:end="137:37">(<argument pos:start="137:33" pos:end="137:36"><expr pos:start="137:33" pos:end="137:36"><name pos:start="137:33" pos:end="137:36">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:12">(<expr pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:11">ret</name></expr>)</condition> <block pos:start="139:14" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:32">

        <expr_stmt pos:start="141:9" pos:end="141:73"><expr pos:start="141:9" pos:end="141:72"><call pos:start="141:9" pos:end="141:72"><name pos:start="141:9" pos:end="141:15">fprintf</name><argument_list pos:start="141:16" pos:end="141:72">(<argument pos:start="141:17" pos:end="141:22"><expr pos:start="141:17" pos:end="141:22"><name pos:start="141:17" pos:end="141:22">stderr</name></expr></argument>, <argument pos:start="141:25" pos:end="141:71"><expr pos:start="141:25" pos:end="141:71"><literal type="string" pos:start="141:25" pos:end="141:71">"rdma migration: error allocating pd and cq!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:32">goto <name pos:start="143:14" pos:end="143:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:35"><expr pos:start="149:5" pos:end="149:34"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="149:34"><name pos:start="149:11" pos:end="149:28">qemu_rdma_alloc_qp</name><argument_list pos:start="149:29" pos:end="149:34">(<argument pos:start="149:30" pos:end="149:33"><expr pos:start="149:30" pos:end="149:33"><name pos:start="149:30" pos:end="149:33">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:12">(<expr pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:11">ret</name></expr>)</condition> <block pos:start="151:14" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:32">

        <expr_stmt pos:start="153:9" pos:end="153:66"><expr pos:start="153:9" pos:end="153:65"><call pos:start="153:9" pos:end="153:65"><name pos:start="153:9" pos:end="153:15">fprintf</name><argument_list pos:start="153:16" pos:end="153:65">(<argument pos:start="153:17" pos:end="153:22"><expr pos:start="153:17" pos:end="153:22"><name pos:start="153:17" pos:end="153:22">stderr</name></expr></argument>, <argument pos:start="153:25" pos:end="153:64"><expr pos:start="153:25" pos:end="153:64"><literal type="string" pos:start="153:25" pos:end="153:64">"rdma migration: error allocating qp!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="155:9" pos:end="155:32">goto <name pos:start="155:14" pos:end="155:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:42"><expr pos:start="161:5" pos:end="161:41"><name pos:start="161:5" pos:end="161:7">ret</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:41"><name pos:start="161:11" pos:end="161:35">qemu_rdma_init_ram_blocks</name><argument_list pos:start="161:36" pos:end="161:41">(<argument pos:start="161:37" pos:end="161:40"><expr pos:start="161:37" pos:end="161:40"><name pos:start="161:37" pos:end="161:40">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:12">(<expr pos:start="163:9" pos:end="163:11"><name pos:start="163:9" pos:end="163:11">ret</name></expr>)</condition> <block pos:start="163:14" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:32">

        <expr_stmt pos:start="165:9" pos:end="165:76"><expr pos:start="165:9" pos:end="165:75"><call pos:start="165:9" pos:end="165:75"><name pos:start="165:9" pos:end="165:15">fprintf</name><argument_list pos:start="165:16" pos:end="165:75">(<argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">stderr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:74"><expr pos:start="165:25" pos:end="165:74"><literal type="string" pos:start="165:25" pos:end="165:74">"rdma migration: error initializing ram blocks!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="167:9" pos:end="167:32">goto <name pos:start="167:14" pos:end="167:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="173:5" pos:end="185:5">for <control pos:start="173:9" pos:end="173:45">(<init pos:start="173:10" pos:end="173:17"><expr pos:start="173:10" pos:end="173:16"><name pos:start="173:10" pos:end="173:12">idx</name> <operator pos:start="173:14" pos:end="173:14">=</operator> <literal type="number" pos:start="173:16" pos:end="173:16">0</literal></expr>;</init> <condition pos:start="173:19" pos:end="173:38"><expr pos:start="173:19" pos:end="173:37"><name pos:start="173:19" pos:end="173:21">idx</name> <operator pos:start="173:23" pos:end="173:23">&lt;</operator> <name pos:start="173:25" pos:end="173:37">RDMA_WRID_MAX</name></expr>;</condition> <incr pos:start="173:40" pos:end="173:44"><expr pos:start="173:40" pos:end="173:44"><name pos:start="173:40" pos:end="173:42">idx</name><operator pos:start="173:43" pos:end="173:44">++</operator></expr></incr>)</control> <block pos:start="173:47" pos:end="185:5">{<block_content pos:start="175:9" pos:end="183:9">

        <expr_stmt pos:start="175:9" pos:end="175:47"><expr pos:start="175:9" pos:end="175:46"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:46"><name pos:start="175:15" pos:end="175:35">qemu_rdma_reg_control</name><argument_list pos:start="175:36" pos:end="175:46">(<argument pos:start="175:37" pos:end="175:40"><expr pos:start="175:37" pos:end="175:40"><name pos:start="175:37" pos:end="175:40">rdma</name></expr></argument>, <argument pos:start="175:43" pos:end="175:45"><expr pos:start="175:43" pos:end="175:45"><name pos:start="175:43" pos:end="175:45">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:16">(<expr pos:start="177:13" pos:end="177:15"><name pos:start="177:13" pos:end="177:15">ret</name></expr>)</condition> <block pos:start="177:18" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:36">

            <expr_stmt pos:start="179:13" pos:end="179:74"><expr pos:start="179:13" pos:end="179:73"><call pos:start="179:13" pos:end="179:73"><name pos:start="179:13" pos:end="179:19">fprintf</name><argument_list pos:start="179:20" pos:end="179:73">(<argument pos:start="179:21" pos:end="179:26"><expr pos:start="179:21" pos:end="179:26"><name pos:start="179:21" pos:end="179:26">stderr</name></expr></argument>, <argument pos:start="179:29" pos:end="179:67"><expr pos:start="179:29" pos:end="179:67"><literal type="string" pos:start="179:29" pos:end="179:67">"rdma: error registering %d control!\n"</literal></expr></argument>, <argument pos:start="179:70" pos:end="179:72"><expr pos:start="179:70" pos:end="179:72"><name pos:start="179:70" pos:end="179:72">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="181:13" pos:end="181:36">goto <name pos:start="181:18" pos:end="181:35">err_rdma_dest_wait</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="189:5" pos:end="189:68"><expr pos:start="189:5" pos:end="189:67"><call pos:start="189:5" pos:end="189:67"><name pos:start="189:5" pos:end="189:24">qemu_set_fd_handler2</name><argument_list pos:start="189:25" pos:end="189:67">(<argument pos:start="189:26" pos:end="189:42"><expr pos:start="189:26" pos:end="189:42"><name pos:start="189:26" pos:end="189:42"><name pos:start="189:26" pos:end="189:29">rdma</name><operator pos:start="189:30" pos:end="189:31">-&gt;</operator><name pos:start="189:32" pos:end="189:38">channel</name><operator pos:start="189:39" pos:end="189:40">-&gt;</operator><name pos:start="189:41" pos:end="189:42">fd</name></name></expr></argument>, <argument pos:start="189:45" pos:end="189:48"><expr pos:start="189:45" pos:end="189:48"><name pos:start="189:45" pos:end="189:48">NULL</name></expr></argument>, <argument pos:start="189:51" pos:end="189:54"><expr pos:start="189:51" pos:end="189:54"><name pos:start="189:51" pos:end="189:54">NULL</name></expr></argument>, <argument pos:start="189:57" pos:end="189:60"><expr pos:start="189:57" pos:end="189:60"><name pos:start="189:57" pos:end="189:60">NULL</name></expr></argument>, <argument pos:start="189:63" pos:end="189:66"><expr pos:start="189:63" pos:end="189:66"><name pos:start="189:63" pos:end="189:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:48"><expr pos:start="193:5" pos:end="193:47"><name pos:start="193:5" pos:end="193:7">ret</name> <operator pos:start="193:9" pos:end="193:9">=</operator> <call pos:start="193:11" pos:end="193:47"><name pos:start="193:11" pos:end="193:21">rdma_accept</name><argument_list pos:start="193:22" pos:end="193:47">(<argument pos:start="193:23" pos:end="193:33"><expr pos:start="193:23" pos:end="193:33"><name pos:start="193:23" pos:end="193:33"><name pos:start="193:23" pos:end="193:26">rdma</name><operator pos:start="193:27" pos:end="193:28">-&gt;</operator><name pos:start="193:29" pos:end="193:33">cm_id</name></name></expr></argument>, <argument pos:start="193:36" pos:end="193:46"><expr pos:start="193:36" pos:end="193:46"><operator pos:start="193:36" pos:end="193:36">&amp;</operator><name pos:start="193:37" pos:end="193:46">conn_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="195:5" pos:end="201:5"><if pos:start="195:5" pos:end="201:5">if <condition pos:start="195:8" pos:end="195:12">(<expr pos:start="195:9" pos:end="195:11"><name pos:start="195:9" pos:end="195:11">ret</name></expr>)</condition> <block pos:start="195:14" pos:end="201:5">{<block_content pos:start="197:9" pos:end="199:32">

        <expr_stmt pos:start="197:9" pos:end="197:58"><expr pos:start="197:9" pos:end="197:57"><call pos:start="197:9" pos:end="197:57"><name pos:start="197:9" pos:end="197:15">fprintf</name><argument_list pos:start="197:16" pos:end="197:57">(<argument pos:start="197:17" pos:end="197:22"><expr pos:start="197:17" pos:end="197:22"><name pos:start="197:17" pos:end="197:22">stderr</name></expr></argument>, <argument pos:start="197:25" pos:end="197:51"><expr pos:start="197:25" pos:end="197:51"><literal type="string" pos:start="197:25" pos:end="197:51">"rdma_accept returns %d!\n"</literal></expr></argument>, <argument pos:start="197:54" pos:end="197:56"><expr pos:start="197:54" pos:end="197:56"><name pos:start="197:54" pos:end="197:56">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="199:9" pos:end="199:32">goto <name pos:start="199:14" pos:end="199:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:54"><expr pos:start="205:5" pos:end="205:53"><name pos:start="205:5" pos:end="205:7">ret</name> <operator pos:start="205:9" pos:end="205:9">=</operator> <call pos:start="205:11" pos:end="205:53"><name pos:start="205:11" pos:end="205:27">rdma_get_cm_event</name><argument_list pos:start="205:28" pos:end="205:53">(<argument pos:start="205:29" pos:end="205:41"><expr pos:start="205:29" pos:end="205:41"><name pos:start="205:29" pos:end="205:41"><name pos:start="205:29" pos:end="205:32">rdma</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:41">channel</name></name></expr></argument>, <argument pos:start="205:44" pos:end="205:52"><expr pos:start="205:44" pos:end="205:52"><operator pos:start="205:44" pos:end="205:44">&amp;</operator><name pos:start="205:45" pos:end="205:52">cm_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="207:5" pos:end="213:5"><if pos:start="207:5" pos:end="213:5">if <condition pos:start="207:8" pos:end="207:12">(<expr pos:start="207:9" pos:end="207:11"><name pos:start="207:9" pos:end="207:11">ret</name></expr>)</condition> <block pos:start="207:14" pos:end="213:5">{<block_content pos:start="209:9" pos:end="211:32">

        <expr_stmt pos:start="209:9" pos:end="209:70"><expr pos:start="209:9" pos:end="209:69"><call pos:start="209:9" pos:end="209:69"><name pos:start="209:9" pos:end="209:15">fprintf</name><argument_list pos:start="209:16" pos:end="209:69">(<argument pos:start="209:17" pos:end="209:22"><expr pos:start="209:17" pos:end="209:22"><name pos:start="209:17" pos:end="209:22">stderr</name></expr></argument>, <argument pos:start="209:25" pos:end="209:63"><expr pos:start="209:25" pos:end="209:63"><literal type="string" pos:start="209:25" pos:end="209:63">"rdma_accept get_cm_event failed %d!\n"</literal></expr></argument>, <argument pos:start="209:66" pos:end="209:68"><expr pos:start="209:66" pos:end="209:68"><name pos:start="209:66" pos:end="209:68">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="211:9" pos:end="211:32">goto <name pos:start="211:14" pos:end="211:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="217:5" pos:end="225:5"><if pos:start="217:5" pos:end="225:5">if <condition pos:start="217:8" pos:end="217:53">(<expr pos:start="217:9" pos:end="217:52"><name pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:16">cm_event</name><operator pos:start="217:17" pos:end="217:18">-&gt;</operator><name pos:start="217:19" pos:end="217:23">event</name></name> <operator pos:start="217:25" pos:end="217:26">!=</operator> <name pos:start="217:28" pos:end="217:52">RDMA_CM_EVENT_ESTABLISHED</name></expr>)</condition> <block pos:start="217:55" pos:end="225:5">{<block_content pos:start="219:9" pos:end="223:32">

        <expr_stmt pos:start="219:9" pos:end="219:64"><expr pos:start="219:9" pos:end="219:63"><call pos:start="219:9" pos:end="219:63"><name pos:start="219:9" pos:end="219:15">fprintf</name><argument_list pos:start="219:16" pos:end="219:63">(<argument pos:start="219:17" pos:end="219:22"><expr pos:start="219:17" pos:end="219:22"><name pos:start="219:17" pos:end="219:22">stderr</name></expr></argument>, <argument pos:start="219:25" pos:end="219:62"><expr pos:start="219:25" pos:end="219:62"><literal type="string" pos:start="219:25" pos:end="219:62">"rdma_accept not event established!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:36"><expr pos:start="221:9" pos:end="221:35"><call pos:start="221:9" pos:end="221:35"><name pos:start="221:9" pos:end="221:25">rdma_ack_cm_event</name><argument_list pos:start="221:26" pos:end="221:35">(<argument pos:start="221:27" pos:end="221:34"><expr pos:start="221:27" pos:end="221:34"><name pos:start="221:27" pos:end="221:34">cm_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="223:9" pos:end="223:32">goto <name pos:start="223:14" pos:end="223:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="229:5" pos:end="229:32"><expr pos:start="229:5" pos:end="229:31"><call pos:start="229:5" pos:end="229:31"><name pos:start="229:5" pos:end="229:21">rdma_ack_cm_event</name><argument_list pos:start="229:22" pos:end="229:31">(<argument pos:start="229:23" pos:end="229:30"><expr pos:start="229:23" pos:end="229:30"><name pos:start="229:23" pos:end="229:30">cm_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:27"><expr pos:start="231:5" pos:end="231:26"><name pos:start="231:5" pos:end="231:19"><name pos:start="231:5" pos:end="231:8">rdma</name><operator pos:start="231:9" pos:end="231:10">-&gt;</operator><name pos:start="231:11" pos:end="231:19">connected</name></name> <operator pos:start="231:21" pos:end="231:21">=</operator> <name pos:start="231:23" pos:end="231:26">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:61"><expr pos:start="235:5" pos:end="235:60"><name pos:start="235:5" pos:end="235:7">ret</name> <operator pos:start="235:9" pos:end="235:9">=</operator> <call pos:start="235:11" pos:end="235:60"><name pos:start="235:11" pos:end="235:37">qemu_rdma_post_recv_control</name><argument_list pos:start="235:38" pos:end="235:60">(<argument pos:start="235:39" pos:end="235:42"><expr pos:start="235:39" pos:end="235:42"><name pos:start="235:39" pos:end="235:42">rdma</name></expr></argument>, <argument pos:start="235:45" pos:end="235:59"><expr pos:start="235:45" pos:end="235:59"><name pos:start="235:45" pos:end="235:59">RDMA_WRID_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:12">(<expr pos:start="237:9" pos:end="237:11"><name pos:start="237:9" pos:end="237:11">ret</name></expr>)</condition> <block pos:start="237:14" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:32">

        <expr_stmt pos:start="239:9" pos:end="239:80"><expr pos:start="239:9" pos:end="239:79"><call pos:start="239:9" pos:end="239:79"><name pos:start="239:9" pos:end="239:15">fprintf</name><argument_list pos:start="239:16" pos:end="239:79">(<argument pos:start="239:17" pos:end="239:22"><expr pos:start="239:17" pos:end="239:22"><name pos:start="239:17" pos:end="239:22">stderr</name></expr></argument>, <argument pos:start="239:25" pos:end="239:78"><expr pos:start="239:25" pos:end="239:78"><literal type="string" pos:start="239:25" pos:end="239:78">"rdma migration: error posting second control recv!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="241:9" pos:end="241:32">goto <name pos:start="241:14" pos:end="241:31">err_rdma_dest_wait</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:52"><expr pos:start="247:5" pos:end="247:51"><call pos:start="247:5" pos:end="247:51"><name pos:start="247:5" pos:end="247:22">qemu_rdma_dump_gid</name><argument_list pos:start="247:23" pos:end="247:51">(<argument pos:start="247:24" pos:end="247:37"><expr pos:start="247:24" pos:end="247:37"><literal type="string" pos:start="247:24" pos:end="247:37">"dest_connect"</literal></expr></argument>, <argument pos:start="247:40" pos:end="247:50"><expr pos:start="247:40" pos:end="247:50"><name pos:start="247:40" pos:end="247:50"><name pos:start="247:40" pos:end="247:43">rdma</name><operator pos:start="247:44" pos:end="247:45">-&gt;</operator><name pos:start="247:46" pos:end="247:50">cm_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="251:5" pos:end="251:13">return <expr pos:start="251:12" pos:end="251:12"><literal type="number" pos:start="251:12" pos:end="251:12">0</literal></expr>;</return>



<label pos:start="255:1" pos:end="255:19"><name pos:start="255:1" pos:end="255:18">err_rdma_dest_wait</name>:</label>

    <expr_stmt pos:start="257:5" pos:end="257:28"><expr pos:start="257:5" pos:end="257:27"><name pos:start="257:5" pos:end="257:21"><name pos:start="257:5" pos:end="257:8">rdma</name><operator pos:start="257:9" pos:end="257:10">-&gt;</operator><name pos:start="257:11" pos:end="257:21">error_state</name></name> <operator pos:start="257:23" pos:end="257:23">=</operator> <name pos:start="257:25" pos:end="257:27">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:28"><expr pos:start="259:5" pos:end="259:27"><call pos:start="259:5" pos:end="259:27"><name pos:start="259:5" pos:end="259:21">qemu_rdma_cleanup</name><argument_list pos:start="259:22" pos:end="259:27">(<argument pos:start="259:23" pos:end="259:26"><expr pos:start="259:23" pos:end="259:26"><name pos:start="259:23" pos:end="259:26">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="261:5" pos:end="261:15">return <expr pos:start="261:12" pos:end="261:14"><name pos:start="261:12" pos:end="261:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
