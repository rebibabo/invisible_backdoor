<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4471.c" pos:tabs="8"><function pos:start="1:1" pos:end="16:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">powernv_populate_chip</name><parameter_list pos:start="1:34" pos:end="1:59">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:41">PnvChip</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">chip</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:58"><decl pos:start="1:50" pos:end="1:58"><type pos:start="1:50" pos:end="1:58"><name pos:start="1:50" pos:end="1:53">void</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">fdt</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="16:1">{<block_content pos:start="3:5" pos:end="15:21">
    <decl_stmt pos:start="3:5" pos:end="3:49"><decl pos:start="3:5" pos:end="3:48"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:16">PnvChipClass</name> <modifier pos:start="3:18" pos:end="3:18">*</modifier></type><name pos:start="3:19" pos:end="3:21">pcc</name> <init pos:start="3:23" pos:end="3:48">= <expr pos:start="3:25" pos:end="3:48"><call pos:start="3:25" pos:end="3:48"><name pos:start="3:25" pos:end="3:42">PNV_CHIP_GET_CLASS</name><argument_list pos:start="3:43" pos:end="3:48">(<argument pos:start="3:44" pos:end="3:47"><expr pos:start="3:44" pos:end="3:47"><name pos:start="3:44" pos:end="3:47">chip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:55"><decl pos:start="4:5" pos:end="4:54"><type pos:start="4:5" pos:end="4:10"><name pos:start="4:5" pos:end="4:8">char</name> <modifier pos:start="4:10" pos:end="4:10">*</modifier></type><name pos:start="4:11" pos:end="4:18">typename</name> <init pos:start="4:20" pos:end="4:54">= <expr pos:start="4:22" pos:end="4:54"><call pos:start="4:22" pos:end="4:54"><name pos:start="4:22" pos:end="4:38">pnv_core_typename</name><argument_list pos:start="4:39" pos:end="4:54">(<argument pos:start="4:40" pos:end="4:53"><expr pos:start="4:40" pos:end="4:53"><name pos:start="4:40" pos:end="4:53"><name pos:start="4:40" pos:end="4:42">pcc</name><operator pos:start="4:43" pos:end="4:44">-&gt;</operator><name pos:start="4:45" pos:end="4:53">cpu_model</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:62"><decl pos:start="5:5" pos:end="5:61"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:19">typesize</name> <init pos:start="5:21" pos:end="5:61">= <expr pos:start="5:23" pos:end="5:61"><call pos:start="5:23" pos:end="5:61"><name pos:start="5:23" pos:end="5:51">object_type_get_instance_size</name><argument_list pos:start="5:52" pos:end="5:61">(<argument pos:start="5:53" pos:end="5:60"><expr pos:start="5:53" pos:end="5:60"><name pos:start="5:53" pos:end="5:60">typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:10"><decl pos:start="6:5" pos:end="6:9"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:9">i</name></decl>;</decl_stmt>
    <for pos:start="7:5" pos:end="10:5">for <control pos:start="7:9" pos:end="7:40">(<init pos:start="7:10" pos:end="7:15"><expr pos:start="7:10" pos:end="7:14"><name pos:start="7:10" pos:end="7:10">i</name> <operator pos:start="7:12" pos:end="7:12">=</operator> <literal type="number" pos:start="7:14" pos:end="7:14">0</literal></expr>;</init> <condition pos:start="7:17" pos:end="7:35"><expr pos:start="7:17" pos:end="7:34"><name pos:start="7:17" pos:end="7:17">i</name> <operator pos:start="7:19" pos:end="7:19">&lt;</operator> <name pos:start="7:21" pos:end="7:34"><name pos:start="7:21" pos:end="7:24">chip</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:34">nr_cores</name></name></expr>;</condition> <incr pos:start="7:37" pos:end="7:39"><expr pos:start="7:37" pos:end="7:39"><name pos:start="7:37" pos:end="7:37">i</name><operator pos:start="7:38" pos:end="7:39">++</operator></expr></incr>)</control> <block pos:start="7:42" pos:end="10:5">{<block_content pos:start="8:9" pos:end="9:54">
        <decl_stmt pos:start="8:9" pos:end="8:65"><decl pos:start="8:9" pos:end="8:64"><type pos:start="8:9" pos:end="8:17"><name pos:start="8:9" pos:end="8:15">PnvCore</name> <modifier pos:start="8:17" pos:end="8:17">*</modifier></type><name pos:start="8:18" pos:end="8:25">pnv_core</name> <init pos:start="8:27" pos:end="8:64">= <expr pos:start="8:29" pos:end="8:64"><call pos:start="8:29" pos:end="8:64"><name pos:start="8:29" pos:end="8:36">PNV_CORE</name><argument_list pos:start="8:37" pos:end="8:64">(<argument pos:start="8:38" pos:end="8:63"><expr pos:start="8:38" pos:end="8:63"><name pos:start="8:38" pos:end="8:48"><name pos:start="8:38" pos:end="8:41">chip</name><operator pos:start="8:42" pos:end="8:43">-&gt;</operator><name pos:start="8:44" pos:end="8:48">cores</name></name> <operator pos:start="8:50" pos:end="8:50">+</operator> <name pos:start="8:52" pos:end="8:52">i</name> <operator pos:start="8:54" pos:end="8:54">*</operator> <name pos:start="8:56" pos:end="8:63">typesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="9:9" pos:end="9:54"><expr pos:start="9:9" pos:end="9:53"><call pos:start="9:9" pos:end="9:53"><name pos:start="9:9" pos:end="9:32">powernv_create_core_node</name><argument_list pos:start="9:33" pos:end="9:53">(<argument pos:start="9:34" pos:end="9:37"><expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">chip</name></expr></argument>, <argument pos:start="9:40" pos:end="9:47"><expr pos:start="9:40" pos:end="9:47"><name pos:start="9:40" pos:end="9:47">pnv_core</name></expr></argument>, <argument pos:start="9:50" pos:end="9:52"><expr pos:start="9:50" pos:end="9:52"><name pos:start="9:50" pos:end="9:52">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="11:5" pos:end="14:5"><if pos:start="11:5" pos:end="14:5">if <condition pos:start="11:8" pos:end="11:23">(<expr pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:12">chip</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:22">ram_size</name></name></expr>)</condition> <block pos:start="11:25" pos:end="14:5">{<block_content pos:start="12:9" pos:end="13:53">
        <expr_stmt pos:start="12:9" pos:end="13:53"><expr pos:start="12:9" pos:end="13:52"><call pos:start="12:9" pos:end="13:52"><name pos:start="12:9" pos:end="12:36">powernv_populate_memory_node</name><argument_list pos:start="12:37" pos:end="13:52">(<argument pos:start="12:38" pos:end="12:40"><expr pos:start="12:38" pos:end="12:40"><name pos:start="12:38" pos:end="12:40">fdt</name></expr></argument>, <argument pos:start="12:43" pos:end="12:55"><expr pos:start="12:43" pos:end="12:55"><name pos:start="12:43" pos:end="12:55"><name pos:start="12:43" pos:end="12:46">chip</name><operator pos:start="12:47" pos:end="12:48">-&gt;</operator><name pos:start="12:49" pos:end="12:55">chip_id</name></name></expr></argument>, <argument pos:start="12:58" pos:end="12:72"><expr pos:start="12:58" pos:end="12:72"><name pos:start="12:58" pos:end="12:72"><name pos:start="12:58" pos:end="12:61">chip</name><operator pos:start="12:62" pos:end="12:63">-&gt;</operator><name pos:start="12:64" pos:end="12:72">ram_start</name></name></expr></argument>,
                                     <argument pos:start="13:38" pos:end="13:51"><expr pos:start="13:38" pos:end="13:51"><name pos:start="13:38" pos:end="13:51"><name pos:start="13:38" pos:end="13:41">chip</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:51">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><call pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:10">g_free</name><argument_list pos:start="15:11" pos:end="15:20">(<argument pos:start="15:12" pos:end="15:19"><expr pos:start="15:12" pos:end="15:19"><name pos:start="15:12" pos:end="15:19">typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
