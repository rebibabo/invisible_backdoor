<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12903.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">latm_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">out</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:47">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:57">AVPacket</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:64">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="119:1">{<block_content pos:start="7:5" pos:end="117:21">

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:50"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">LATMContext</name></name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:31">latmctx</name> <init pos:start="7:33" pos:end="7:50">= <expr pos:start="7:35" pos:end="7:50"><name pos:start="7:35" pos:end="7:50"><name pos:start="7:35" pos:end="7:39">avctx</name><operator pos:start="7:40" pos:end="7:41">-&gt;</operator><name pos:start="7:42" pos:end="7:50">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type>                 <name pos:start="9:25" pos:end="9:33">muxlength</name></decl>, <decl pos:start="9:36" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:36" pos:end="9:38">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type>       <name pos:start="11:25" pos:end="11:26">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:19"><if pos:start="15:5" pos:end="17:19">if <condition pos:start="15:8" pos:end="15:66">(<expr pos:start="15:9" pos:end="15:65"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:12">err</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:60"><name pos:start="15:16" pos:end="15:29">init_get_bits8</name><argument_list pos:start="15:30" pos:end="15:60">(<argument pos:start="15:31" pos:end="15:33"><expr pos:start="15:31" pos:end="15:33"><operator pos:start="15:31" pos:end="15:31">&amp;</operator><name pos:start="15:32" pos:end="15:33">gb</name></expr></argument>, <argument pos:start="15:36" pos:end="15:46"><expr pos:start="15:36" pos:end="15:46"><name pos:start="15:36" pos:end="15:46"><name pos:start="15:36" pos:end="15:40">avpkt</name><operator pos:start="15:41" pos:end="15:42">-&gt;</operator><name pos:start="15:43" pos:end="15:46">data</name></name></expr></argument>, <argument pos:start="15:49" pos:end="15:59"><expr pos:start="15:49" pos:end="15:59"><name pos:start="15:49" pos:end="15:59"><name pos:start="15:49" pos:end="15:53">avpkt</name><operator pos:start="15:54" pos:end="15:55">-&gt;</operator><name pos:start="15:56" pos:end="15:59">size</name></name></expr></argument>)</argument_list></call><operator pos:start="15:61" pos:end="15:61">)</operator> <operator pos:start="15:63" pos:end="15:63">&lt;</operator> <literal type="number" pos:start="15:65" pos:end="15:65">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:19"><block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:31">// check for LOAS sync word</comment>

    <if_stmt pos:start="23:5" pos:end="25:35"><if pos:start="23:5" pos:end="25:35">if <condition pos:start="23:8" pos:end="23:44">(<expr pos:start="23:9" pos:end="23:43"><call pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:16">get_bits</name><argument_list pos:start="23:17" pos:end="23:25">(<argument pos:start="23:18" pos:end="23:20"><expr pos:start="23:18" pos:end="23:20"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:20">gb</name></expr></argument>, <argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><literal type="number" pos:start="23:23" pos:end="23:24">11</literal></expr></argument>)</argument_list></call> <operator pos:start="23:27" pos:end="23:28">!=</operator> <name pos:start="23:30" pos:end="23:43">LOAS_SYNC_WORD</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:35"><block_content pos:start="25:9" pos:end="25:35">

        <return pos:start="25:9" pos:end="25:35">return <expr pos:start="25:16" pos:end="25:34"><name pos:start="25:16" pos:end="25:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:13">muxlength</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:24">get_bits</name><argument_list pos:start="29:25" pos:end="29:33">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:28">gb</name></expr></argument>, <argument pos:start="29:31" pos:end="29:32"><expr pos:start="29:31" pos:end="29:32"><literal type="number" pos:start="29:31" pos:end="29:32">13</literal></expr></argument>)</argument_list></call> <operator pos:start="29:35" pos:end="29:35">+</operator> <literal type="number" pos:start="29:37" pos:end="29:37">3</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="31:5" pos:end="31:62">// not enough data, the parser should have sorted this out</comment>

    <if_stmt pos:start="33:5" pos:end="35:35"><if pos:start="33:5" pos:end="35:35">if <condition pos:start="33:8" pos:end="33:32">(<expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:17">muxlength</name> <operator pos:start="33:19" pos:end="33:19">&gt;</operator> <name pos:start="33:21" pos:end="33:31"><name pos:start="33:21" pos:end="33:25">avpkt</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:31">size</name></name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:35"><block_content pos:start="35:9" pos:end="35:35">

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="41:19"><if pos:start="39:5" pos:end="41:19">if <condition pos:start="39:8" pos:end="39:57">(<expr pos:start="39:9" pos:end="39:56"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:12">err</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:51"><name pos:start="39:16" pos:end="39:37">read_audio_mux_element</name><argument_list pos:start="39:38" pos:end="39:51">(<argument pos:start="39:39" pos:end="39:45"><expr pos:start="39:39" pos:end="39:45"><name pos:start="39:39" pos:end="39:45">latmctx</name></expr></argument>, <argument pos:start="39:48" pos:end="39:50"><expr pos:start="39:48" pos:end="39:50"><operator pos:start="39:48" pos:end="39:48">&amp;</operator><name pos:start="39:49" pos:end="39:50">gb</name></expr></argument>)</argument_list></call><operator pos:start="39:52" pos:end="39:52">)</operator> <operator pos:start="39:54" pos:end="39:54">&lt;</operator> <literal type="number" pos:start="39:56" pos:end="39:56">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:19"><block_content pos:start="41:9" pos:end="41:19">

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="73:5"><if pos:start="45:5" pos:end="73:5">if <condition pos:start="45:8" pos:end="45:30">(<expr pos:start="45:9" pos:end="45:29"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:29"><name pos:start="45:10" pos:end="45:16">latmctx</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:29">initialized</name></name></expr>)</condition> <block pos:start="45:32" pos:end="73:5">{<block_content pos:start="47:9" pos:end="71:9">

        <if_stmt pos:start="47:9" pos:end="71:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:29"><name pos:start="47:14" pos:end="47:18">avctx</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:29">extradata</name></name></expr>)</condition> <block pos:start="47:32" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:31">

            <expr_stmt pos:start="49:13" pos:end="49:31"><expr pos:start="49:13" pos:end="49:30"><operator pos:start="49:13" pos:end="49:13">*</operator><name pos:start="49:14" pos:end="49:26">got_frame_ptr</name> <operator pos:start="49:28" pos:end="49:28">=</operator> <literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:31">return <expr pos:start="51:20" pos:end="51:30"><name pos:start="51:20" pos:end="51:30"><name pos:start="51:20" pos:end="51:24">avpkt</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:30">size</name></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="71:9">else <block pos:start="53:16" pos:end="71:9">{<block_content pos:start="55:13" pos:end="69:37">

            <expr_stmt pos:start="55:13" pos:end="55:57"><expr pos:start="55:13" pos:end="55:56"><call pos:start="55:13" pos:end="55:56"><name pos:start="55:13" pos:end="55:37">push_output_configuration</name><argument_list pos:start="55:38" pos:end="55:56">(<argument pos:start="55:39" pos:end="55:55"><expr pos:start="55:39" pos:end="55:55"><operator pos:start="55:39" pos:end="55:39">&amp;</operator><name pos:start="55:40" pos:end="55:55"><name pos:start="55:40" pos:end="55:46">latmctx</name><operator pos:start="55:47" pos:end="55:48">-&gt;</operator><name pos:start="55:49" pos:end="55:55">aac_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="67:13"><if pos:start="57:13" pos:end="67:13">if <condition pos:start="57:16" pos:end="61:71">(<expr pos:start="57:17" pos:end="61:70"><operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:20">err</name> <operator pos:start="57:22" pos:end="57:22">=</operator> <call pos:start="57:24" pos:end="61:65"><name pos:start="57:24" pos:end="57:51">decode_audio_specific_config</name><argument_list pos:start="57:52" pos:end="61:65">(

                    <argument pos:start="59:21" pos:end="59:37"><expr pos:start="59:21" pos:end="59:37"><operator pos:start="59:21" pos:end="59:21">&amp;</operator><name pos:start="59:22" pos:end="59:37"><name pos:start="59:22" pos:end="59:28">latmctx</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:37">aac_ctx</name></name></expr></argument>, <argument pos:start="59:40" pos:end="59:44"><expr pos:start="59:40" pos:end="59:44"><name pos:start="59:40" pos:end="59:44">avctx</name></expr></argument>, <argument pos:start="59:47" pos:end="59:74"><expr pos:start="59:47" pos:end="59:74"><operator pos:start="59:47" pos:end="59:47">&amp;</operator><name pos:start="59:48" pos:end="59:69"><name pos:start="59:48" pos:end="59:54">latmctx</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:63">aac_ctx</name><operator pos:start="59:64" pos:end="59:64">.</operator><name pos:start="59:65" pos:end="59:66">oc</name><index pos:start="59:67" pos:end="59:69">[<expr pos:start="59:68" pos:end="59:68"><literal type="number" pos:start="59:68" pos:end="59:68">1</literal></expr>]</index></name><operator pos:start="59:70" pos:end="59:70">.</operator><name pos:start="59:71" pos:end="59:74">m4ac</name></expr></argument>,

                    <argument pos:start="61:21" pos:end="61:36"><expr pos:start="61:21" pos:end="61:36"><name pos:start="61:21" pos:end="61:36"><name pos:start="61:21" pos:end="61:25">avctx</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:36">extradata</name></name></expr></argument>, <argument pos:start="61:39" pos:end="61:61"><expr pos:start="61:39" pos:end="61:61"><name pos:start="61:39" pos:end="61:59"><name pos:start="61:39" pos:end="61:43">avctx</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:59">extradata_size</name></name><operator pos:start="61:60" pos:end="61:60">*</operator><literal type="number" pos:start="61:61" pos:end="61:61">8</literal></expr></argument>, <argument pos:start="61:64" pos:end="61:64"><expr pos:start="61:64" pos:end="61:64"><literal type="number" pos:start="61:64" pos:end="61:64">1</literal></expr></argument>)</argument_list></call><operator pos:start="61:66" pos:end="61:66">)</operator> <operator pos:start="61:68" pos:end="61:68">&lt;</operator> <literal type="number" pos:start="61:70" pos:end="61:70">0</literal></expr>)</condition> <block pos:start="61:73" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:27">

                <expr_stmt pos:start="63:17" pos:end="63:60"><expr pos:start="63:17" pos:end="63:59"><call pos:start="63:17" pos:end="63:59"><name pos:start="63:17" pos:end="63:40">pop_output_configuration</name><argument_list pos:start="63:41" pos:end="63:59">(<argument pos:start="63:42" pos:end="63:58"><expr pos:start="63:42" pos:end="63:58"><operator pos:start="63:42" pos:end="63:42">&amp;</operator><name pos:start="63:43" pos:end="63:58"><name pos:start="63:43" pos:end="63:49">latmctx</name><operator pos:start="63:50" pos:end="63:51">-&gt;</operator><name pos:start="63:52" pos:end="63:58">aac_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="65:17" pos:end="65:27">return <expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">err</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:37"><expr pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:19">latmctx</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:32">initialized</name></name> <operator pos:start="69:34" pos:end="69:34">=</operator> <literal type="number" pos:start="69:36" pos:end="69:36">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="87:5"><if pos:start="77:5" pos:end="87:5">if <condition pos:start="77:8" pos:end="77:36">(<expr pos:start="77:9" pos:end="77:35"><call pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:17">show_bits</name><argument_list pos:start="77:18" pos:end="77:26">(<argument pos:start="77:19" pos:end="77:21"><expr pos:start="77:19" pos:end="77:21"><operator pos:start="77:19" pos:end="77:19">&amp;</operator><name pos:start="77:20" pos:end="77:21">gb</name></expr></argument>, <argument pos:start="77:24" pos:end="77:25"><expr pos:start="77:24" pos:end="77:25"><literal type="number" pos:start="77:24" pos:end="77:25">12</literal></expr></argument>)</argument_list></call> <operator pos:start="77:28" pos:end="77:29">==</operator> <literal type="number" pos:start="77:31" pos:end="77:35">0xfff</literal></expr>)</condition> <block pos:start="77:38" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:35">

        <expr_stmt pos:start="79:9" pos:end="83:31"><expr pos:start="79:9" pos:end="83:30"><call pos:start="79:9" pos:end="83:30"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="83:30">(<argument pos:start="79:16" pos:end="79:37"><expr pos:start="79:16" pos:end="79:37"><name pos:start="79:16" pos:end="79:37"><name pos:start="79:16" pos:end="79:22">latmctx</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:31">aac_ctx</name><operator pos:start="79:32" pos:end="79:32">.</operator><name pos:start="79:33" pos:end="79:37">avctx</name></name></expr></argument>, <argument pos:start="79:40" pos:end="79:51"><expr pos:start="79:40" pos:end="79:51"><name pos:start="79:40" pos:end="79:51">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="81:16" pos:end="83:29"><expr pos:start="81:16" pos:end="83:29"><literal type="string" pos:start="81:16" pos:end="81:75">"ADTS header detected, probably as result of configuration "</literal>

               <literal type="string" pos:start="83:16" pos:end="83:29">"misparsing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:35">return <expr pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="91:5" pos:end="109:5">switch <condition pos:start="91:12" pos:end="91:52">(<expr pos:start="91:13" pos:end="91:51"><name pos:start="91:13" pos:end="91:34"><name pos:start="91:13" pos:end="91:19">latmctx</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:28">aac_ctx</name><operator pos:start="91:29" pos:end="91:29">.</operator><name pos:start="91:30" pos:end="91:31">oc</name><index pos:start="91:32" pos:end="91:34">[<expr pos:start="91:33" pos:end="91:33"><literal type="number" pos:start="91:33" pos:end="91:33">1</literal></expr>]</index></name><operator pos:start="91:35" pos:end="91:35">.</operator><name pos:start="91:36" pos:end="91:51"><name pos:start="91:36" pos:end="91:39">m4ac</name><operator pos:start="91:40" pos:end="91:40">.</operator><name pos:start="91:41" pos:end="91:51">object_type</name></name></expr>)</condition> <block pos:start="91:54" pos:end="109:5">{<block_content pos:start="93:5" pos:end="107:74">

    <case pos:start="93:5" pos:end="93:23">case <expr pos:start="93:10" pos:end="93:22"><name pos:start="93:10" pos:end="93:22">AOT_ER_AAC_LC</name></expr>:</case>

    <case pos:start="95:5" pos:end="95:24">case <expr pos:start="95:10" pos:end="95:23"><name pos:start="95:10" pos:end="95:23">AOT_ER_AAC_LTP</name></expr>:</case>

    <case pos:start="97:5" pos:end="97:23">case <expr pos:start="97:10" pos:end="97:22"><name pos:start="97:10" pos:end="97:22">AOT_ER_AAC_LD</name></expr>:</case>

    <case pos:start="99:5" pos:end="99:24">case <expr pos:start="99:10" pos:end="99:23"><name pos:start="99:10" pos:end="99:23">AOT_ER_AAC_ELD</name></expr>:</case>

        <expr_stmt pos:start="101:9" pos:end="101:66"><expr pos:start="101:9" pos:end="101:65"><name pos:start="101:9" pos:end="101:11">err</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:65"><name pos:start="101:15" pos:end="101:33">aac_decode_er_frame</name><argument_list pos:start="101:34" pos:end="101:65">(<argument pos:start="101:35" pos:end="101:39"><expr pos:start="101:35" pos:end="101:39"><name pos:start="101:35" pos:end="101:39">avctx</name></expr></argument>, <argument pos:start="101:42" pos:end="101:44"><expr pos:start="101:42" pos:end="101:44"><name pos:start="101:42" pos:end="101:44">out</name></expr></argument>, <argument pos:start="101:47" pos:end="101:59"><expr pos:start="101:47" pos:end="101:59"><name pos:start="101:47" pos:end="101:59">got_frame_ptr</name></expr></argument>, <argument pos:start="101:62" pos:end="101:64"><expr pos:start="101:62" pos:end="101:64"><operator pos:start="101:62" pos:end="101:62">&amp;</operator><name pos:start="101:63" pos:end="101:64">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <default pos:start="105:5" pos:end="105:12">default:</default>

        <expr_stmt pos:start="107:9" pos:end="107:74"><expr pos:start="107:9" pos:end="107:73"><name pos:start="107:9" pos:end="107:11">err</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="107:73"><name pos:start="107:15" pos:end="107:34">aac_decode_frame_int</name><argument_list pos:start="107:35" pos:end="107:73">(<argument pos:start="107:36" pos:end="107:40"><expr pos:start="107:36" pos:end="107:40"><name pos:start="107:36" pos:end="107:40">avctx</name></expr></argument>, <argument pos:start="107:43" pos:end="107:45"><expr pos:start="107:43" pos:end="107:45"><name pos:start="107:43" pos:end="107:45">out</name></expr></argument>, <argument pos:start="107:48" pos:end="107:60"><expr pos:start="107:48" pos:end="107:60"><name pos:start="107:48" pos:end="107:60">got_frame_ptr</name></expr></argument>, <argument pos:start="107:63" pos:end="107:65"><expr pos:start="107:63" pos:end="107:65"><operator pos:start="107:63" pos:end="107:63">&amp;</operator><name pos:start="107:64" pos:end="107:65">gb</name></expr></argument>, <argument pos:start="107:68" pos:end="107:72"><expr pos:start="107:68" pos:end="107:72"><name pos:start="107:68" pos:end="107:72">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="111:5" pos:end="113:19"><if pos:start="111:5" pos:end="113:19">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:11">err</name> <operator pos:start="111:13" pos:end="111:13">&lt;</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:19"><block_content pos:start="113:9" pos:end="113:19">

        <return pos:start="113:9" pos:end="113:19">return <expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="117:5" pos:end="117:21">return <expr pos:start="117:12" pos:end="117:20"><name pos:start="117:12" pos:end="117:20">muxlength</name></expr>;</return>

</block_content>}</block></function>
</unit>
