<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3404.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:45">avcodec_encode_video2</name><parameter_list pos:start="1:46" pos:end="4:66">(<parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>,
                                              <parameter pos:start="2:47" pos:end="2:61"><decl pos:start="2:47" pos:end="2:61"><type pos:start="2:47" pos:end="2:61"><name pos:start="2:47" pos:end="2:54">AVPacket</name> <modifier pos:start="2:56" pos:end="2:56">*</modifier></type><name pos:start="2:57" pos:end="2:61">avpkt</name></decl></parameter>,
                                              <parameter pos:start="3:47" pos:end="3:66"><decl pos:start="3:47" pos:end="3:66"><type pos:start="3:47" pos:end="3:66"><specifier pos:start="3:47" pos:end="3:51">const</specifier> <name pos:start="3:53" pos:end="3:59">AVFrame</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:66">frame</name></decl></parameter>,
                                              <parameter pos:start="4:47" pos:end="4:65"><decl pos:start="4:47" pos:end="4:65"><type pos:start="4:47" pos:end="4:65"><name pos:start="4:47" pos:end="4:49">int</name> <modifier pos:start="4:51" pos:end="4:51">*</modifier></type><name pos:start="4:52" pos:end="4:65">got_packet_ptr</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="6:5" pos:end="66:15">
    <decl_stmt pos:start="6:5" pos:end="6:12"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">AVPacket</name></type> <name pos:start="7:14" pos:end="7:21">user_pkt</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">*</operator><name pos:start="7:26" pos:end="7:30">avpkt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:39"><decl pos:start="8:5" pos:end="8:38"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:21">needs_realloc</name> <init pos:start="8:23" pos:end="8:38">= <expr pos:start="8:25" pos:end="8:38"><operator pos:start="8:25" pos:end="8:25">!</operator><name pos:start="8:26" pos:end="8:38"><name pos:start="8:26" pos:end="8:33">user_pkt</name><operator pos:start="8:34" pos:end="8:34">.</operator><name pos:start="8:35" pos:end="8:38">data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:24"><expr pos:start="9:5" pos:end="9:23"><operator pos:start="9:5" pos:end="9:5">*</operator><name pos:start="9:6" pos:end="9:19">got_packet_ptr</name> <operator pos:start="9:21" pos:end="9:21">=</operator> <literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="12:81"><if pos:start="10:5" pos:end="12:81">if<condition pos:start="10:7" pos:end="11:92">(<expr pos:start="10:8" pos:end="11:91"><name pos:start="10:8" pos:end="10:34">CONFIG_FRAME_THREAD_ENCODER</name> <operator pos:start="10:36" pos:end="10:37">&amp;&amp;</operator>
       <name pos:start="11:8" pos:end="11:44"><name pos:start="11:8" pos:end="11:12">avctx</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:22">internal</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:44">frame_thread_encoder</name></name> <operator pos:start="11:46" pos:end="11:47">&amp;&amp;</operator> <operator pos:start="11:49" pos:end="11:49">(</operator><name pos:start="11:50" pos:end="11:74"><name pos:start="11:50" pos:end="11:54">avctx</name><operator pos:start="11:55" pos:end="11:56">-&gt;</operator><name pos:start="11:57" pos:end="11:74">active_thread_type</name></name><operator pos:start="11:75" pos:end="11:75">&amp;</operator><name pos:start="11:76" pos:end="11:90">FF_THREAD_FRAME</name><operator pos:start="11:91" pos:end="11:91">)</operator></expr>)</condition><block type="pseudo" pos:start="12:9" pos:end="12:81"><block_content pos:start="12:9" pos:end="12:81">
        <return pos:start="12:9" pos:end="12:81">return <expr pos:start="12:16" pos:end="12:80"><call pos:start="12:16" pos:end="12:80"><name pos:start="12:16" pos:end="12:43">ff_thread_video_encode_frame</name><argument_list pos:start="12:44" pos:end="12:80">(<argument pos:start="12:45" pos:end="12:49"><expr pos:start="12:45" pos:end="12:49"><name pos:start="12:45" pos:end="12:49">avctx</name></expr></argument>, <argument pos:start="12:52" pos:end="12:56"><expr pos:start="12:52" pos:end="12:56"><name pos:start="12:52" pos:end="12:56">avpkt</name></expr></argument>, <argument pos:start="12:59" pos:end="12:63"><expr pos:start="12:59" pos:end="12:63"><name pos:start="12:59" pos:end="12:63">frame</name></expr></argument>, <argument pos:start="12:66" pos:end="12:79"><expr pos:start="12:66" pos:end="12:79"><name pos:start="12:66" pos:end="12:79">got_packet_ptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="13:5" pos:end="14:35"><if pos:start="13:5" pos:end="14:35">if <condition pos:start="13:8" pos:end="13:60">(<expr pos:start="13:9" pos:end="13:59"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:14">avctx</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:21">flags</name></name><operator pos:start="13:22" pos:end="13:22">&amp;</operator><name pos:start="13:23" pos:end="13:38">CODEC_FLAG_PASS1</name><operator pos:start="13:39" pos:end="13:39">)</operator> <operator pos:start="13:41" pos:end="13:42">&amp;&amp;</operator> <name pos:start="13:44" pos:end="13:59"><name pos:start="13:44" pos:end="13:48">avctx</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:59">stats_out</name></name></expr>)</condition><block type="pseudo" pos:start="14:9" pos:end="14:35"><block_content pos:start="14:9" pos:end="14:35">
        <expr_stmt pos:start="14:9" pos:end="14:35"><expr pos:start="14:9" pos:end="14:34"><name pos:start="14:9" pos:end="14:27"><name pos:start="14:9" pos:end="14:13">avctx</name><operator pos:start="14:14" pos:end="14:15">-&gt;</operator><name pos:start="14:16" pos:end="14:24">stats_out</name><index pos:start="14:25" pos:end="14:27">[<expr pos:start="14:26" pos:end="14:26"><literal type="number" pos:start="14:26" pos:end="14:26">0</literal></expr>]</index></name> <operator pos:start="14:29" pos:end="14:29">=</operator> <literal type="char" pos:start="14:31" pos:end="14:34">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="15:5" pos:end="20:5"><if pos:start="15:5" pos:end="20:5">if <condition pos:start="15:8" pos:end="15:66">(<expr pos:start="15:9" pos:end="15:65"><operator pos:start="15:9" pos:end="15:9">!</operator><operator pos:start="15:10" pos:end="15:10">(</operator><name pos:start="15:11" pos:end="15:36"><name pos:start="15:11" pos:end="15:15">avctx</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:22">codec</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:36">capabilities</name></name> <operator pos:start="15:38" pos:end="15:38">&amp;</operator> <name pos:start="15:40" pos:end="15:54">CODEC_CAP_DELAY</name><operator pos:start="15:55" pos:end="15:55">)</operator> <operator pos:start="15:57" pos:end="15:58">&amp;&amp;</operator> <operator pos:start="15:60" pos:end="15:60">!</operator><name pos:start="15:61" pos:end="15:65">frame</name></expr>)</condition> <block pos:start="15:68" pos:end="20:5">{<block_content pos:start="16:9" pos:end="19:17">
        <expr_stmt pos:start="16:9" pos:end="16:30"><expr pos:start="16:9" pos:end="16:29"><call pos:start="16:9" pos:end="16:29"><name pos:start="16:9" pos:end="16:22">av_free_packet</name><argument_list pos:start="16:23" pos:end="16:29">(<argument pos:start="16:24" pos:end="16:28"><expr pos:start="16:24" pos:end="16:28"><name pos:start="16:24" pos:end="16:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><call pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:22">av_init_packet</name><argument_list pos:start="17:23" pos:end="17:29">(<argument pos:start="17:24" pos:end="17:28"><expr pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:24"><expr pos:start="18:9" pos:end="18:23"><name pos:start="18:9" pos:end="18:19"><name pos:start="18:9" pos:end="18:13">avpkt</name><operator pos:start="18:14" pos:end="18:15">-&gt;</operator><name pos:start="18:16" pos:end="18:19">size</name></name> <operator pos:start="18:21" pos:end="18:21">=</operator> <literal type="number" pos:start="18:23" pos:end="18:23">0</literal></expr>;</expr_stmt>
        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="21:5" pos:end="22:31"><if pos:start="21:5" pos:end="22:31">if <condition pos:start="21:8" pos:end="21:67">(<expr pos:start="21:9" pos:end="21:66"><call pos:start="21:9" pos:end="21:66"><name pos:start="21:9" pos:end="21:27">av_image_check_size</name><argument_list pos:start="21:28" pos:end="21:66">(<argument pos:start="21:29" pos:end="21:40"><expr pos:start="21:29" pos:end="21:40"><name pos:start="21:29" pos:end="21:40"><name pos:start="21:29" pos:end="21:33">avctx</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:40">width</name></name></expr></argument>, <argument pos:start="21:43" pos:end="21:55"><expr pos:start="21:43" pos:end="21:55"><name pos:start="21:43" pos:end="21:55"><name pos:start="21:43" pos:end="21:47">avctx</name><operator pos:start="21:48" pos:end="21:49">-&gt;</operator><name pos:start="21:50" pos:end="21:55">height</name></name></expr></argument>, <argument pos:start="21:58" pos:end="21:58"><expr pos:start="21:58" pos:end="21:58"><literal type="number" pos:start="21:58" pos:end="21:58">0</literal></expr></argument>, <argument pos:start="21:61" pos:end="21:65"><expr pos:start="21:61" pos:end="21:65"><name pos:start="21:61" pos:end="21:65">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="22:9" pos:end="22:31"><block_content pos:start="22:9" pos:end="22:31">
        <return pos:start="22:9" pos:end="22:31">return <expr pos:start="22:16" pos:end="22:30"><call pos:start="22:16" pos:end="22:30"><name pos:start="22:16" pos:end="22:22">AVERROR</name><argument_list pos:start="22:23" pos:end="22:30">(<argument pos:start="22:24" pos:end="22:29"><expr pos:start="22:24" pos:end="22:29"><name pos:start="22:24" pos:end="22:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:14">av_assert0</name><argument_list pos:start="23:15" pos:end="23:37">(<argument pos:start="23:16" pos:end="23:36"><expr pos:start="23:16" pos:end="23:36"><name pos:start="23:16" pos:end="23:36"><name pos:start="23:16" pos:end="23:20">avctx</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:27">codec</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:36">encode2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:69"><expr pos:start="24:5" pos:end="24:68"><name pos:start="24:5" pos:end="24:7">ret</name> <operator pos:start="24:9" pos:end="24:9">=</operator> <call pos:start="24:11" pos:end="24:68"><name pos:start="24:11" pos:end="24:31"><name pos:start="24:11" pos:end="24:15">avctx</name><operator pos:start="24:16" pos:end="24:17">-&gt;</operator><name pos:start="24:18" pos:end="24:22">codec</name><operator pos:start="24:23" pos:end="24:24">-&gt;</operator><name pos:start="24:25" pos:end="24:31">encode2</name></name><argument_list pos:start="24:32" pos:end="24:68">(<argument pos:start="24:33" pos:end="24:37"><expr pos:start="24:33" pos:end="24:37"><name pos:start="24:33" pos:end="24:37">avctx</name></expr></argument>, <argument pos:start="24:40" pos:end="24:44"><expr pos:start="24:40" pos:end="24:44"><name pos:start="24:40" pos:end="24:44">avpkt</name></expr></argument>, <argument pos:start="24:47" pos:end="24:51"><expr pos:start="24:47" pos:end="24:51"><name pos:start="24:47" pos:end="24:51">frame</name></expr></argument>, <argument pos:start="24:54" pos:end="24:67"><expr pos:start="24:54" pos:end="24:67"><name pos:start="24:54" pos:end="24:67">got_packet_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><call pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:14">av_assert0</name><argument_list pos:start="25:15" pos:end="25:24">(<argument pos:start="25:16" pos:end="25:23"><expr pos:start="25:16" pos:end="25:23"><name pos:start="25:16" pos:end="25:18">ret</name> <operator pos:start="25:20" pos:end="25:21">&lt;=</operator> <literal type="number" pos:start="25:23" pos:end="25:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="48:5"><if pos:start="26:5" pos:end="48:5">if <condition pos:start="26:8" pos:end="26:67">(<expr pos:start="26:9" pos:end="26:66"><name pos:start="26:9" pos:end="26:19"><name pos:start="26:9" pos:end="26:13">avpkt</name><operator pos:start="26:14" pos:end="26:15">-&gt;</operator><name pos:start="26:16" pos:end="26:19">data</name></name> <operator pos:start="26:21" pos:end="26:22">&amp;&amp;</operator> <name pos:start="26:24" pos:end="26:34"><name pos:start="26:24" pos:end="26:28">avpkt</name><operator pos:start="26:29" pos:end="26:30">-&gt;</operator><name pos:start="26:31" pos:end="26:34">data</name></name> <operator pos:start="26:36" pos:end="26:37">==</operator> <name pos:start="26:39" pos:end="26:66"><name pos:start="26:39" pos:end="26:43">avctx</name><operator pos:start="26:44" pos:end="26:45">-&gt;</operator><name pos:start="26:46" pos:end="26:53">internal</name><operator pos:start="26:54" pos:end="26:55">-&gt;</operator><name pos:start="26:56" pos:end="26:66">byte_buffer</name></name></expr>)</condition> <block pos:start="26:69" pos:end="48:5">{<block_content pos:start="27:9" pos:end="47:9">
        <expr_stmt pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:21">needs_realloc</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="28:9" pos:end="47:9"><if pos:start="28:9" pos:end="43:9">if <condition pos:start="28:12" pos:end="28:26">(<expr pos:start="28:13" pos:end="28:25"><name pos:start="28:13" pos:end="28:25"><name pos:start="28:13" pos:end="28:20">user_pkt</name><operator pos:start="28:21" pos:end="28:21">.</operator><name pos:start="28:22" pos:end="28:25">data</name></name></expr>)</condition> <block pos:start="28:28" pos:end="43:9">{<block_content pos:start="29:13" pos:end="43:0">
            <if_stmt pos:start="29:13" pos:end="35:13"><if pos:start="29:13" pos:end="31:13">if <condition pos:start="29:16" pos:end="29:45">(<expr pos:start="29:17" pos:end="29:44"><name pos:start="29:17" pos:end="29:29"><name pos:start="29:17" pos:end="29:24">user_pkt</name><operator pos:start="29:25" pos:end="29:25">.</operator><name pos:start="29:26" pos:end="29:29">size</name></name> <operator pos:start="29:31" pos:end="29:32">&gt;=</operator> <name pos:start="29:34" pos:end="29:44"><name pos:start="29:34" pos:end="29:38">avpkt</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:44">size</name></name></expr>)</condition> <block pos:start="29:47" pos:end="31:13">{<block_content pos:start="30:17" pos:end="30:64">
                <expr_stmt pos:start="30:17" pos:end="30:64"><expr pos:start="30:17" pos:end="30:63"><call pos:start="30:17" pos:end="30:63"><name pos:start="30:17" pos:end="30:22">memcpy</name><argument_list pos:start="30:23" pos:end="30:63">(<argument pos:start="30:24" pos:end="30:36"><expr pos:start="30:24" pos:end="30:36"><name pos:start="30:24" pos:end="30:36"><name pos:start="30:24" pos:end="30:31">user_pkt</name><operator pos:start="30:32" pos:end="30:32">.</operator><name pos:start="30:33" pos:end="30:36">data</name></name></expr></argument>, <argument pos:start="30:39" pos:end="30:49"><expr pos:start="30:39" pos:end="30:49"><name pos:start="30:39" pos:end="30:49"><name pos:start="30:39" pos:end="30:43">avpkt</name><operator pos:start="30:44" pos:end="30:45">-&gt;</operator><name pos:start="30:46" pos:end="30:49">data</name></name></expr></argument>, <argument pos:start="30:52" pos:end="30:62"><expr pos:start="30:52" pos:end="30:62"><name pos:start="30:52" pos:end="30:62"><name pos:start="30:52" pos:end="30:56">avpkt</name><operator pos:start="30:57" pos:end="30:58">-&gt;</operator><name pos:start="30:59" pos:end="30:62">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="31:15" pos:end="35:13">else <block pos:start="31:20" pos:end="35:13">{<block_content pos:start="32:17" pos:end="34:25">
                <expr_stmt pos:start="32:17" pos:end="32:107"><expr pos:start="32:17" pos:end="32:106"><call pos:start="32:17" pos:end="32:106"><name pos:start="32:17" pos:end="32:22">av_log</name><argument_list pos:start="32:23" pos:end="32:106">(<argument pos:start="32:24" pos:end="32:28"><expr pos:start="32:24" pos:end="32:28"><name pos:start="32:24" pos:end="32:28">avctx</name></expr></argument>, <argument pos:start="32:31" pos:end="32:42"><expr pos:start="32:31" pos:end="32:42"><name pos:start="32:31" pos:end="32:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="32:45" pos:end="32:92"><expr pos:start="32:45" pos:end="32:92"><literal type="string" pos:start="32:45" pos:end="32:92">"Provided packet is too small, needs to be %d\n"</literal></expr></argument>, <argument pos:start="32:95" pos:end="32:105"><expr pos:start="32:95" pos:end="32:105"><name pos:start="32:95" pos:end="32:105"><name pos:start="32:95" pos:end="32:99">avpkt</name><operator pos:start="32:100" pos:end="32:101">-&gt;</operator><name pos:start="32:102" pos:end="32:105">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="33:17" pos:end="33:44"><expr pos:start="33:17" pos:end="33:43"><name pos:start="33:17" pos:end="33:27"><name pos:start="33:17" pos:end="33:21">avpkt</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:27">size</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <name pos:start="33:31" pos:end="33:43"><name pos:start="33:31" pos:end="33:38">user_pkt</name><operator pos:start="33:39" pos:end="33:39">.</operator><name pos:start="33:40" pos:end="33:43">size</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="34:17" pos:end="34:25"><expr pos:start="34:17" pos:end="34:24"><name pos:start="34:17" pos:end="34:19">ret</name> <operator pos:start="34:21" pos:end="34:21">=</operator> <operator pos:start="34:23" pos:end="34:23">-</operator><literal type="number" pos:start="34:24" pos:end="34:24">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="36:13" pos:end="36:43"><expr pos:start="36:13" pos:end="36:42"><name pos:start="36:13" pos:end="36:22"><name pos:start="36:13" pos:end="36:17">avpkt</name><operator pos:start="36:18" pos:end="36:19">-&gt;</operator><name pos:start="36:20" pos:end="36:22">buf</name></name>      <operator pos:start="36:29" pos:end="36:29">=</operator> <name pos:start="36:31" pos:end="36:42"><name pos:start="36:31" pos:end="36:38">user_pkt</name><operator pos:start="36:39" pos:end="36:39">.</operator><name pos:start="36:40" pos:end="36:42">buf</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="37:13" pos:end="39:0"><expr pos:start="37:13" pos:end="37:43"><name pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:17">avpkt</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:23">data</name></name>     <operator pos:start="37:29" pos:end="37:29">=</operator> <name pos:start="37:31" pos:end="37:43"><name pos:start="37:31" pos:end="37:38">user_pkt</name><operator pos:start="37:39" pos:end="37:39">.</operator><name pos:start="37:40" pos:end="37:43">data</name></name></expr>;</expr_stmt>
<cpp:if pos:start="38:1" pos:end="38:26">#<cpp:directive pos:start="38:2" pos:end="38:3">if</cpp:directive> <expr pos:start="38:5" pos:end="38:26"><name pos:start="38:5" pos:end="38:26">FF_API_DESTRUCT_PACKET</name></expr></cpp:if>
<decl_stmt pos:start="39:1" pos:end="40:48"><decl pos:start="39:1" pos:end="40:47"><type pos:start="39:1" pos:end="39:31"><name pos:start="39:1" pos:end="39:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>
            <name pos:start="40:13" pos:end="40:27"><name pos:start="40:13" pos:end="40:17">avpkt</name><operator pos:start="40:18" pos:end="40:19">-&gt;</operator><name pos:start="40:20" pos:end="40:27">destruct</name></name> <init pos:start="40:29" pos:end="40:47">= <expr pos:start="40:31" pos:end="40:47"><name pos:start="40:31" pos:end="40:47"><name pos:start="40:31" pos:end="40:38">user_pkt</name><operator pos:start="40:39" pos:end="40:39">.</operator><name pos:start="40:40" pos:end="40:47">destruct</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt pos:start="41:1" pos:end="43:0"><expr pos:start="41:1" pos:end="43:0"><name pos:start="41:1" pos:end="43:0">FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>
<cpp:endif pos:start="42:1" pos:end="42:6">#<cpp:directive pos:start="42:2" pos:end="42:6">endif</cpp:directive></cpp:endif>
        </block_content>}</block></if> <else pos:start="43:11" pos:end="47:9">else <block pos:start="43:16" pos:end="47:9">{<block_content pos:start="44:13" pos:end="46:13">
            <if_stmt pos:start="44:13" pos:end="46:13"><if pos:start="44:13" pos:end="46:13">if <condition pos:start="44:16" pos:end="44:41">(<expr pos:start="44:17" pos:end="44:40"><call pos:start="44:17" pos:end="44:36"><name pos:start="44:17" pos:end="44:29">av_dup_packet</name><argument_list pos:start="44:30" pos:end="44:36">(<argument pos:start="44:31" pos:end="44:35"><expr pos:start="44:31" pos:end="44:35"><name pos:start="44:31" pos:end="44:35">avpkt</name></expr></argument>)</argument_list></call> <operator pos:start="44:38" pos:end="44:38">&lt;</operator> <literal type="number" pos:start="44:40" pos:end="44:40">0</literal></expr>)</condition> <block pos:start="44:43" pos:end="46:13">{<block_content pos:start="45:17" pos:end="45:38">
                <expr_stmt pos:start="45:17" pos:end="45:38"><expr pos:start="45:17" pos:end="45:37"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:37"><name pos:start="45:23" pos:end="45:29">AVERROR</name><argument_list pos:start="45:30" pos:end="45:37">(<argument pos:start="45:31" pos:end="45:36"><expr pos:start="45:31" pos:end="45:36"><name pos:start="45:31" pos:end="45:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="49:5" pos:end="60:5"><if pos:start="49:5" pos:end="60:5">if <condition pos:start="49:8" pos:end="49:13">(<expr pos:start="49:9" pos:end="49:12"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:12">ret</name></expr>)</condition> <block pos:start="49:15" pos:end="60:5">{<block_content pos:start="50:9" pos:end="59:30">
        <if_stmt pos:start="50:9" pos:end="53:49"><if pos:start="50:9" pos:end="51:28">if <condition pos:start="50:12" pos:end="50:29">(<expr pos:start="50:13" pos:end="50:28"><operator pos:start="50:13" pos:end="50:13">!</operator><operator pos:start="50:14" pos:end="50:14">*</operator><name pos:start="50:15" pos:end="50:28">got_packet_ptr</name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:28"><block_content pos:start="51:13" pos:end="51:28">
            <expr_stmt pos:start="51:13" pos:end="51:28"><expr pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:17">avpkt</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:23">size</name></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <literal type="number" pos:start="51:27" pos:end="51:27">0</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="52:9" pos:end="53:49">else if <condition pos:start="52:17" pos:end="52:65">(<expr pos:start="52:18" pos:end="52:64"><operator pos:start="52:18" pos:end="52:18">!</operator><operator pos:start="52:19" pos:end="52:19">(</operator><name pos:start="52:20" pos:end="52:45"><name pos:start="52:20" pos:end="52:24">avctx</name><operator pos:start="52:25" pos:end="52:26">-&gt;</operator><name pos:start="52:27" pos:end="52:31">codec</name><operator pos:start="52:32" pos:end="52:33">-&gt;</operator><name pos:start="52:34" pos:end="52:45">capabilities</name></name> <operator pos:start="52:47" pos:end="52:47">&amp;</operator> <name pos:start="52:49" pos:end="52:63">CODEC_CAP_DELAY</name><operator pos:start="52:64" pos:end="52:64">)</operator></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:49"><block_content pos:start="53:13" pos:end="53:49">
            <expr_stmt pos:start="53:13" pos:end="53:49"><expr pos:start="53:13" pos:end="53:48"><name pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:17">avpkt</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:22">pts</name></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:35"><name pos:start="53:26" pos:end="53:30">avpkt</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:35">dts</name></name> <operator pos:start="53:37" pos:end="53:37">=</operator> <name pos:start="53:39" pos:end="53:48"><name pos:start="53:39" pos:end="53:43">frame</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:48">pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="54:9" pos:end="58:9"><if pos:start="54:9" pos:end="58:9">if <condition pos:start="54:12" pos:end="54:41">(<expr pos:start="54:13" pos:end="54:40"><name pos:start="54:13" pos:end="54:25">needs_realloc</name> <operator pos:start="54:27" pos:end="54:28">&amp;&amp;</operator> <name pos:start="54:30" pos:end="54:40"><name pos:start="54:30" pos:end="54:34">avpkt</name><operator pos:start="54:35" pos:end="54:36">-&gt;</operator><name pos:start="54:37" pos:end="54:40">data</name></name></expr>)</condition> <block pos:start="54:43" pos:end="58:9">{<block_content pos:start="55:13" pos:end="57:47">
            <expr_stmt pos:start="55:13" pos:end="55:93"><expr pos:start="55:13" pos:end="55:92"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:92"><name pos:start="55:19" pos:end="55:35">av_buffer_realloc</name><argument_list pos:start="55:36" pos:end="55:92">(<argument pos:start="55:37" pos:end="55:47"><expr pos:start="55:37" pos:end="55:47"><operator pos:start="55:37" pos:end="55:37">&amp;</operator><name pos:start="55:38" pos:end="55:47"><name pos:start="55:38" pos:end="55:42">avpkt</name><operator pos:start="55:43" pos:end="55:44">-&gt;</operator><name pos:start="55:45" pos:end="55:47">buf</name></name></expr></argument>, <argument pos:start="55:50" pos:end="55:91"><expr pos:start="55:50" pos:end="55:91"><name pos:start="55:50" pos:end="55:60"><name pos:start="55:50" pos:end="55:54">avpkt</name><operator pos:start="55:55" pos:end="55:56">-&gt;</operator><name pos:start="55:57" pos:end="55:60">size</name></name> <operator pos:start="55:62" pos:end="55:62">+</operator> <name pos:start="55:64" pos:end="55:91">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="56:13" pos:end="57:47"><if pos:start="56:13" pos:end="57:47">if <condition pos:start="56:16" pos:end="56:25">(<expr pos:start="56:17" pos:end="56:24"><name pos:start="56:17" pos:end="56:19">ret</name> <operator pos:start="56:21" pos:end="56:22">&gt;=</operator> <literal type="number" pos:start="56:24" pos:end="56:24">0</literal></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:47"><block_content pos:start="57:17" pos:end="57:47">
                <expr_stmt pos:start="57:17" pos:end="57:47"><expr pos:start="57:17" pos:end="57:46"><name pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:21">avpkt</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:27">data</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:46"><name pos:start="57:31" pos:end="57:35">avpkt</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:40">buf</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:46">data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:27"><name pos:start="59:9" pos:end="59:13">avctx</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:27">frame_number</name></name><operator pos:start="59:28" pos:end="59:29">++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="61:5" pos:end="64:41"><if pos:start="61:5" pos:end="62:30">if <condition pos:start="61:8" pos:end="61:36">(<expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">&lt;</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal> <operator pos:start="61:17" pos:end="61:18">||</operator> <operator pos:start="61:20" pos:end="61:20">!</operator><operator pos:start="61:21" pos:end="61:21">*</operator><name pos:start="61:22" pos:end="61:35">got_packet_ptr</name></expr>)</condition><block type="pseudo" pos:start="62:9" pos:end="62:30"><block_content pos:start="62:9" pos:end="62:30">
        <expr_stmt pos:start="62:9" pos:end="62:30"><expr pos:start="62:9" pos:end="62:29"><call pos:start="62:9" pos:end="62:29"><name pos:start="62:9" pos:end="62:22">av_free_packet</name><argument_list pos:start="62:23" pos:end="62:29">(<argument pos:start="62:24" pos:end="62:28"><expr pos:start="62:24" pos:end="62:28"><name pos:start="62:24" pos:end="62:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="63:5" pos:end="64:41">else<block type="pseudo" pos:start="64:9" pos:end="64:41"><block_content pos:start="64:9" pos:end="64:41">
        <expr_stmt pos:start="64:9" pos:end="64:41"><expr pos:start="64:9" pos:end="64:40"><call pos:start="64:9" pos:end="64:40"><name pos:start="64:9" pos:end="64:33">av_packet_merge_side_data</name><argument_list pos:start="64:34" pos:end="64:40">(<argument pos:start="64:35" pos:end="64:39"><expr pos:start="64:35" pos:end="64:39"><name pos:start="64:35" pos:end="64:39">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:13"><expr pos:start="65:5" pos:end="65:12"><call pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:10">emms_c</name><argument_list pos:start="65:11" pos:end="65:12">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="66:5" pos:end="66:15">return <expr pos:start="66:12" pos:end="66:14"><name pos:start="66:12" pos:end="66:14">ret</name></expr>;</return>
</block_content>}</block></function></unit>
