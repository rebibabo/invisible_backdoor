<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/640.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:32"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">xhci_intr_raise</name><parameter_list pos:start="1:28" pos:end="1:51">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:37">XHCIState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">xhci</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:50"><decl pos:start="1:46" pos:end="1:50"><type pos:start="1:46" pos:end="1:50"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:50">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:32">{<block_content pos:start="5:5" pos:end="57:32">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:22">pci_dev</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><call pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:35">PCI_DEVICE</name><argument_list pos:start="5:36" pos:end="5:41">(<argument pos:start="5:37" pos:end="5:40"><expr pos:start="5:37" pos:end="5:40"><name pos:start="5:37" pos:end="5:40">xhci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




    <expr_stmt pos:start="10:5" pos:end="10:39"><expr pos:start="10:5" pos:end="10:38"><name pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:8">xhci</name><operator pos:start="10:9" pos:end="10:10">-&gt;</operator><name pos:start="10:11" pos:end="10:14">intr</name><index pos:start="10:15" pos:end="10:17">[<expr pos:start="10:16" pos:end="10:16"><name pos:start="10:16" pos:end="10:16">v</name></expr>]</index></name><operator pos:start="10:18" pos:end="10:18">.</operator><name pos:start="10:19" pos:end="10:26">erdp_low</name> <operator pos:start="10:28" pos:end="10:29">|=</operator> <name pos:start="10:31" pos:end="10:38">ERDP_EHB</name></expr>;</expr_stmt>

    <expr_stmt pos:start="12:5" pos:end="12:34"><expr pos:start="12:5" pos:end="12:33"><name pos:start="12:5" pos:end="12:17"><name pos:start="12:5" pos:end="12:8">xhci</name><operator pos:start="12:9" pos:end="12:10">-&gt;</operator><name pos:start="12:11" pos:end="12:14">intr</name><index pos:start="12:15" pos:end="12:17">[<expr pos:start="12:16" pos:end="12:16"><name pos:start="12:16" pos:end="12:16">v</name></expr>]</index></name><operator pos:start="12:18" pos:end="12:18">.</operator><name pos:start="12:19" pos:end="12:22">iman</name> <operator pos:start="12:24" pos:end="12:25">|=</operator> <name pos:start="12:27" pos:end="12:33">IMAN_IP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="14:5" pos:end="14:32"><expr pos:start="14:5" pos:end="14:31"><name pos:start="14:5" pos:end="14:16"><name pos:start="14:5" pos:end="14:8">xhci</name><operator pos:start="14:9" pos:end="14:10">-&gt;</operator><name pos:start="14:11" pos:end="14:16">usbsts</name></name> <operator pos:start="14:18" pos:end="14:19">|=</operator> <name pos:start="14:21" pos:end="14:31">USBSTS_EINT</name></expr>;</expr_stmt>






    <if_stmt pos:start="21:5" pos:end="57:32"><if pos:start="21:5" pos:end="57:32">if <condition pos:start="21:8" pos:end="21:40">(<expr pos:start="21:9" pos:end="21:39"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:23"><name pos:start="21:11" pos:end="21:14">xhci</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:20">intr</name><index pos:start="21:21" pos:end="21:23">[<expr pos:start="21:22" pos:end="21:22"><name pos:start="21:22" pos:end="21:22">v</name></expr>]</index></name><operator pos:start="21:24" pos:end="21:24">.</operator><name pos:start="21:25" pos:end="21:28">iman</name> <operator pos:start="21:30" pos:end="21:30">&amp;</operator> <name pos:start="21:32" pos:end="21:38">IMAN_IE</name><operator pos:start="21:39" pos:end="21:39">)</operator></expr>)</condition> <block pos:start="21:42" pos:end="57:32">{<block_content pos:start="27:5" pos:end="57:32">





    <if_stmt pos:start="27:5" pos:end="57:32"><if pos:start="27:5" pos:end="57:32">if <condition pos:start="27:8" pos:end="27:38">(<expr pos:start="27:9" pos:end="27:37"><operator pos:start="27:9" pos:end="27:9">!</operator><operator pos:start="27:10" pos:end="27:10">(</operator><name pos:start="27:11" pos:end="27:22"><name pos:start="27:11" pos:end="27:14">xhci</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:22">usbcmd</name></name> <operator pos:start="27:24" pos:end="27:24">&amp;</operator> <name pos:start="27:26" pos:end="27:36">USBCMD_INTE</name><operator pos:start="27:37" pos:end="27:37">)</operator></expr>)</condition> <block pos:start="27:40" pos:end="57:32">{<block_content pos:start="33:5" pos:end="57:32">





    <if_stmt pos:start="33:5" pos:end="57:32"><if pos:start="33:5" pos:end="57:32">if <condition pos:start="33:8" pos:end="33:30">(<expr pos:start="33:9" pos:end="33:29"><call pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:20">msix_enabled</name><argument_list pos:start="33:21" pos:end="33:29">(<argument pos:start="33:22" pos:end="33:28"><expr pos:start="33:22" pos:end="33:28"><name pos:start="33:22" pos:end="33:28">pci_dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:32" pos:end="57:32">{<block_content pos:start="35:9" pos:end="57:32">

        <expr_stmt pos:start="35:9" pos:end="35:35"><expr pos:start="35:9" pos:end="35:34"><call pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:31">trace_usb_xhci_irq_msix</name><argument_list pos:start="35:32" pos:end="35:34">(<argument pos:start="35:33" pos:end="35:33"><expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><call pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:19">msix_notify</name><argument_list pos:start="37:20" pos:end="37:31">(<argument pos:start="37:21" pos:end="37:27"><expr pos:start="37:21" pos:end="37:27"><name pos:start="37:21" pos:end="37:27">pci_dev</name></expr></argument>, <argument pos:start="37:30" pos:end="37:30"><expr pos:start="37:30" pos:end="37:30"><name pos:start="37:30" pos:end="37:30">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="43:5" pos:end="57:32"><if pos:start="43:5" pos:end="57:32">if <condition pos:start="43:8" pos:end="43:29">(<expr pos:start="43:9" pos:end="43:28"><call pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:19">msi_enabled</name><argument_list pos:start="43:20" pos:end="43:28">(<argument pos:start="43:21" pos:end="43:27"><expr pos:start="43:21" pos:end="43:27"><name pos:start="43:21" pos:end="43:27">pci_dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:31" pos:end="57:32">{<block_content pos:start="45:9" pos:end="57:32">

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><call pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:30">trace_usb_xhci_irq_msi</name><argument_list pos:start="45:31" pos:end="45:33">(<argument pos:start="45:32" pos:end="45:32"><expr pos:start="45:32" pos:end="45:32"><name pos:start="45:32" pos:end="45:32">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><call pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:18">msi_notify</name><argument_list pos:start="47:19" pos:end="47:30">(<argument pos:start="47:20" pos:end="47:26"><expr pos:start="47:20" pos:end="47:26"><name pos:start="47:20" pos:end="47:26">pci_dev</name></expr></argument>, <argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><name pos:start="47:29" pos:end="47:29">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="53:5" pos:end="57:32"><if pos:start="53:5" pos:end="57:32">if <condition pos:start="53:8" pos:end="53:15">(<expr pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:9">v</name> <operator pos:start="53:11" pos:end="53:12">==</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>)</condition> <block pos:start="53:17" pos:end="57:32">{<block_content pos:start="55:9" pos:end="57:32">

        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:31">trace_usb_xhci_irq_intx</name><argument_list pos:start="55:32" pos:end="55:34">(<argument pos:start="55:33" pos:end="55:33"><expr pos:start="55:33" pos:end="55:33"><literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><call pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:22">pci_irq_assert</name><argument_list pos:start="57:23" pos:end="57:31">(<argument pos:start="57:24" pos:end="57:30"><expr pos:start="57:24" pos:end="57:30"><name pos:start="57:24" pos:end="57:30">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>

</unit>
