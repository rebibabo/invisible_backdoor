<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25788.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">av_always_inline</name> <name pos:start="1:25" pos:end="1:27">int</name></type> <name pos:start="1:29" pos:end="1:38">mvd_decode</name><parameter_list pos:start="1:39" pos:end="1:54">(<parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:50">HEVCContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:55">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">k</name> <init pos:start="7:11" pos:end="7:13">= <expr pos:start="7:13" pos:end="7:13"><literal type="number" pos:start="7:13" pos:end="7:13">1</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="17:5">while <condition pos:start="11:11" pos:end="11:65">(<expr pos:start="11:12" pos:end="11:64"><name pos:start="11:12" pos:end="11:12">k</name> <operator pos:start="11:14" pos:end="11:14">&lt;</operator> <name pos:start="11:16" pos:end="11:28">CABAC_MAX_BIN</name> <operator pos:start="11:30" pos:end="11:31">&amp;&amp;</operator> <call pos:start="11:33" pos:end="11:64"><name pos:start="11:33" pos:end="11:48">get_cabac_bypass</name><argument_list pos:start="11:49" pos:end="11:64">(<argument pos:start="11:50" pos:end="11:63"><expr pos:start="11:50" pos:end="11:63"><operator pos:start="11:50" pos:end="11:50">&amp;</operator><name pos:start="11:51" pos:end="11:63"><name pos:start="11:51" pos:end="11:51">s</name><operator pos:start="11:52" pos:end="11:53">-&gt;</operator><name pos:start="11:54" pos:end="11:59">HEVClc</name><operator pos:start="11:60" pos:end="11:61">-&gt;</operator><name pos:start="11:62" pos:end="11:63">cc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:67" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:12">

        <expr_stmt pos:start="13:9" pos:end="13:22"><expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:14">+=</operator> <literal type="number" pos:start="13:16" pos:end="13:16">1</literal> <operator pos:start="13:18" pos:end="13:19">&lt;&lt;</operator> <name pos:start="13:21" pos:end="13:21">k</name></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:12"><expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:9">k</name><operator pos:start="15:10" pos:end="15:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="19:5" pos:end="21:66"><if pos:start="19:5" pos:end="21:66">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:9">k</name> <operator pos:start="19:11" pos:end="19:12">==</operator> <name pos:start="19:14" pos:end="19:26">CABAC_MAX_BIN</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:66"><block_content pos:start="21:9" pos:end="21:66">

        <expr_stmt pos:start="21:9" pos:end="21:66"><expr pos:start="21:9" pos:end="21:65"><call pos:start="21:9" pos:end="21:65"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:65">(<argument pos:start="21:16" pos:end="21:23"><expr pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:23">avctx</name></name></expr></argument>, <argument pos:start="21:26" pos:end="21:37"><expr pos:start="21:26" pos:end="21:37"><name pos:start="21:26" pos:end="21:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:40" pos:end="21:61"><expr pos:start="21:40" pos:end="21:61"><literal type="string" pos:start="21:40" pos:end="21:61">"CABAC_MAX_BIN : %d\n"</literal></expr></argument>, <argument pos:start="21:64" pos:end="21:64"><expr pos:start="21:64" pos:end="21:64"><name pos:start="21:64" pos:end="21:64">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <while pos:start="23:5" pos:end="25:53">while <condition pos:start="23:11" pos:end="23:15">(<expr pos:start="23:12" pos:end="23:14"><name pos:start="23:12" pos:end="23:12">k</name><operator pos:start="23:13" pos:end="23:14">--</operator></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:53"><block_content pos:start="25:9" pos:end="25:53">

        <expr_stmt pos:start="25:9" pos:end="25:53"><expr pos:start="25:9" pos:end="25:52"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:14">+=</operator> <call pos:start="25:16" pos:end="25:47"><name pos:start="25:16" pos:end="25:31">get_cabac_bypass</name><argument_list pos:start="25:32" pos:end="25:47">(<argument pos:start="25:33" pos:end="25:46"><expr pos:start="25:33" pos:end="25:46"><operator pos:start="25:33" pos:end="25:33">&amp;</operator><name pos:start="25:34" pos:end="25:46"><name pos:start="25:34" pos:end="25:34">s</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:42">HEVClc</name><operator pos:start="25:43" pos:end="25:44">-&gt;</operator><name pos:start="25:45" pos:end="25:46">cc</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:49" pos:end="25:50">&lt;&lt;</operator> <name pos:start="25:52" pos:end="25:52">k</name></expr>;</expr_stmt></block_content></block></while>

    <return pos:start="27:5" pos:end="27:55">return <expr pos:start="27:12" pos:end="27:54"><call pos:start="27:12" pos:end="27:54"><name pos:start="27:12" pos:end="27:32">get_cabac_bypass_sign</name><argument_list pos:start="27:33" pos:end="27:54">(<argument pos:start="27:34" pos:end="27:47"><expr pos:start="27:34" pos:end="27:47"><operator pos:start="27:34" pos:end="27:34">&amp;</operator><name pos:start="27:35" pos:end="27:47"><name pos:start="27:35" pos:end="27:35">s</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:43">HEVClc</name><operator pos:start="27:44" pos:end="27:45">-&gt;</operator><name pos:start="27:46" pos:end="27:47">cc</name></name></expr></argument>, <argument pos:start="27:50" pos:end="27:53"><expr pos:start="27:50" pos:end="27:53"><operator pos:start="27:50" pos:end="27:50">-</operator><name pos:start="27:51" pos:end="27:53">ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
