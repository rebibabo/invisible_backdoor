<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16683.c" pos:tabs="8"><function pos:start="1:1" pos:end="363:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:32">hScale</name>)<parameter_list pos:start="1:34" pos:end="3:87">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:41">int16_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dst</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">dstW</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">src</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:80"><decl pos:start="1:73" pos:end="1:80"><type pos:start="1:73" pos:end="1:80"><name pos:start="1:73" pos:end="1:75">int</name></type> <name pos:start="1:77" pos:end="1:80">srcW</name></decl></parameter>, <parameter pos:start="1:83" pos:end="1:90"><decl pos:start="1:83" pos:end="1:90"><type pos:start="1:83" pos:end="1:90"><name pos:start="1:83" pos:end="1:85">int</name></type> <name pos:start="1:87" pos:end="1:90">xInc</name></decl></parameter>,

				  <parameter pos:start="3:35" pos:end="3:49"><decl pos:start="3:35" pos:end="3:49"><type pos:start="3:35" pos:end="3:49"><name pos:start="3:35" pos:end="3:41">int16_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:49">filter</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:69"><decl pos:start="3:52" pos:end="3:69"><type pos:start="3:52" pos:end="3:69"><name pos:start="3:52" pos:end="3:58">int16_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:69">filterPos</name></decl></parameter>, <parameter pos:start="3:72" pos:end="3:86"><decl pos:start="3:72" pos:end="3:86"><type pos:start="3:72" pos:end="3:86"><name pos:start="3:72" pos:end="3:75">long</name></type> <name pos:start="3:77" pos:end="3:86">filterSize</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="363:1">{<block_content pos:start="9:9" pos:end="362:0">

<cpp:ifdef pos:start="7:1" pos:end="7:15">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:15">HAVE_MMX</name></cpp:ifdef>

	<expr_stmt pos:start="9:9" pos:end="9:52"><expr pos:start="9:9" pos:end="9:51"><call pos:start="9:9" pos:end="9:51"><name pos:start="9:9" pos:end="9:14">assert</name><argument_list pos:start="9:15" pos:end="9:51">(<argument pos:start="9:16" pos:end="9:50"><expr pos:start="9:16" pos:end="9:50"><name pos:start="9:16" pos:end="9:25">filterSize</name> <operator pos:start="9:27" pos:end="9:27">%</operator> <literal type="number" pos:start="9:29" pos:end="9:29">4</literal> <operator pos:start="9:31" pos:end="9:32">==</operator> <literal type="number" pos:start="9:34" pos:end="9:34">0</literal> <operator pos:start="9:36" pos:end="9:37">&amp;&amp;</operator> <name pos:start="9:39" pos:end="9:48">filterSize</name><operator pos:start="9:49" pos:end="9:49">&gt;</operator><literal type="number" pos:start="9:50" pos:end="9:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="11:9" pos:end="322:0"><if pos:start="11:9" pos:end="101:9">if<condition pos:start="11:11" pos:end="11:25">(<expr pos:start="11:12" pos:end="11:24"><name pos:start="11:12" pos:end="11:21">filterSize</name><operator pos:start="11:22" pos:end="11:23">==</operator><literal type="number" pos:start="11:24" pos:end="11:24">4</literal></expr>)</condition> <comment type="line" pos:start="11:27" pos:end="11:80">// Always true for upscaling, sometimes for down, too.</comment>

	<block pos:start="13:9" pos:end="101:9">{<block_content pos:start="15:17" pos:end="99:18">

		<decl_stmt pos:start="15:17" pos:end="15:38"><decl pos:start="15:17" pos:end="15:37"><type pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">long</name></type> <name pos:start="15:22" pos:end="15:28">counter</name><init pos:start="15:29" pos:end="15:37">= <expr pos:start="15:31" pos:end="15:37"><operator pos:start="15:31" pos:end="15:31">-</operator><literal type="number" pos:start="15:32" pos:end="15:32">2</literal><operator pos:start="15:33" pos:end="15:33">*</operator><name pos:start="15:34" pos:end="15:37">dstW</name></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="17:17" pos:end="17:35"><expr pos:start="17:17" pos:end="17:34"><name pos:start="17:17" pos:end="17:22">filter</name><operator pos:start="17:23" pos:end="17:24">-=</operator> <name pos:start="17:26" pos:end="17:32">counter</name><operator pos:start="17:33" pos:end="17:33">*</operator><literal type="number" pos:start="17:34" pos:end="17:34">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="19:17" pos:end="19:38"><expr pos:start="19:17" pos:end="19:37"><name pos:start="19:17" pos:end="19:25">filterPos</name><operator pos:start="19:26" pos:end="19:27">-=</operator> <name pos:start="19:29" pos:end="19:35">counter</name><operator pos:start="19:36" pos:end="19:36">/</operator><literal type="number" pos:start="19:37" pos:end="19:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="21:17" pos:end="21:32"><expr pos:start="21:17" pos:end="21:31"><name pos:start="21:17" pos:end="21:19">dst</name><operator pos:start="21:20" pos:end="21:21">-=</operator> <name pos:start="21:23" pos:end="21:29">counter</name><operator pos:start="21:30" pos:end="21:30">/</operator><literal type="number" pos:start="21:31" pos:end="21:31">2</literal></expr>;</expr_stmt>

		<asm pos:start="23:17" pos:end="99:18">asm <specifier pos:start="23:21" pos:end="23:28">volatile</specifier>(

<cpp:if pos:start="25:1" pos:end="25:16">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:16"><call pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:11">defined</name><argument_list pos:start="25:12" pos:end="25:16">(<argument pos:start="25:13" pos:end="25:15"><expr pos:start="25:13" pos:end="25:15"><name pos:start="25:13" pos:end="25:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			"push %%"REG_b"   		\n\t"

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

			"pxor %%mm7, %%mm7		\n\t"

			"movq "MANGLE(w02)", %%mm6	\n\t"

			"push %%"REG_BP"		\n\t" <comment type="line" pos:start="35:63" pos:end="35:87">// we use 7 regs here ...</comment>

			"mov %%"REG_a", %%"REG_BP"	\n\t"

			ASMALIGN(4)

			"1:				\n\t"

			"movzwl (%2, %%"REG_BP"), %%eax	\n\t"

			"movzwl 2(%2, %%"REG_BP"), %%ebx\n\t"

			"movq (%1, %%"REG_BP", 4), %%mm1\n\t"

			"movq 8(%1, %%"REG_BP", 4), %%mm3\n\t"

			"movd (%3, %%"REG_a"), %%mm0	\n\t"

			"movd (%3, %%"REG_b"), %%mm2	\n\t"

			"punpcklbw %%mm7, %%mm0		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm0		\n\t"

			"pmaddwd %%mm2, %%mm3		\n\t"

			"psrad $8, %%mm0		\n\t"

			"psrad $8, %%mm3		\n\t"

			"packssdw %%mm3, %%mm0		\n\t"

			"pmaddwd %%mm6, %%mm0		\n\t"

			"packssdw %%mm0, %%mm0		\n\t"

			"movd %%mm0, (%4, %%"REG_BP")	\n\t"

			"add $4, %%"REG_BP"		\n\t"

			" jnc 1b			\n\t"



			"pop %%"REG_BP"			\n\t"

<cpp:if pos:start="83:1" pos:end="83:16">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:16"><call pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:11">defined</name><argument_list pos:start="83:12" pos:end="83:16">(<argument pos:start="83:13" pos:end="83:15"><expr pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			"pop %%"REG_b"   		\n\t"

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

			: "+a" (counter)

			: "c" (filter), "d" (filterPos), "S" (src), "D" (dst)

<cpp:if pos:start="93:1" pos:end="93:17">#<cpp:directive pos:start="93:2" pos:end="93:3">if</cpp:directive> <expr pos:start="93:5" pos:end="93:17"><operator pos:start="93:5" pos:end="93:5">!</operator><call pos:start="93:6" pos:end="93:17"><name pos:start="93:6" pos:end="93:12">defined</name><argument_list pos:start="93:13" pos:end="93:17">(<argument pos:start="93:14" pos:end="93:16"><expr pos:start="93:14" pos:end="93:16"><name pos:start="93:14" pos:end="93:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			: "%"REG_b

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

		);</asm>

	</block_content>}</block></if>

	<if type="elseif" pos:start="103:9" pos:end="217:9">else if<condition pos:start="103:16" pos:end="103:30">(<expr pos:start="103:17" pos:end="103:29"><name pos:start="103:17" pos:end="103:26">filterSize</name><operator pos:start="103:27" pos:end="103:28">==</operator><literal type="number" pos:start="103:29" pos:end="103:29">8</literal></expr>)</condition>

	<block pos:start="105:9" pos:end="217:9">{<block_content pos:start="107:17" pos:end="215:18">

		<decl_stmt pos:start="107:17" pos:end="107:38"><decl pos:start="107:17" pos:end="107:37"><type pos:start="107:17" pos:end="107:20"><name pos:start="107:17" pos:end="107:20">long</name></type> <name pos:start="107:22" pos:end="107:28">counter</name><init pos:start="107:29" pos:end="107:37">= <expr pos:start="107:31" pos:end="107:37"><operator pos:start="107:31" pos:end="107:31">-</operator><literal type="number" pos:start="107:32" pos:end="107:32">2</literal><operator pos:start="107:33" pos:end="107:33">*</operator><name pos:start="107:34" pos:end="107:37">dstW</name></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="109:17" pos:end="109:35"><expr pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:22">filter</name><operator pos:start="109:23" pos:end="109:24">-=</operator> <name pos:start="109:26" pos:end="109:32">counter</name><operator pos:start="109:33" pos:end="109:33">*</operator><literal type="number" pos:start="109:34" pos:end="109:34">4</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="111:17" pos:end="111:38"><expr pos:start="111:17" pos:end="111:37"><name pos:start="111:17" pos:end="111:25">filterPos</name><operator pos:start="111:26" pos:end="111:27">-=</operator> <name pos:start="111:29" pos:end="111:35">counter</name><operator pos:start="111:36" pos:end="111:36">/</operator><literal type="number" pos:start="111:37" pos:end="111:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="113:17" pos:end="113:32"><expr pos:start="113:17" pos:end="113:31"><name pos:start="113:17" pos:end="113:19">dst</name><operator pos:start="113:20" pos:end="113:21">-=</operator> <name pos:start="113:23" pos:end="113:29">counter</name><operator pos:start="113:30" pos:end="113:30">/</operator><literal type="number" pos:start="113:31" pos:end="113:31">2</literal></expr>;</expr_stmt>

		<asm pos:start="115:17" pos:end="215:18">asm <specifier pos:start="115:21" pos:end="115:28">volatile</specifier>(

<cpp:if pos:start="117:1" pos:end="117:16">#<cpp:directive pos:start="117:2" pos:end="117:3">if</cpp:directive> <expr pos:start="117:5" pos:end="117:16"><call pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:11">defined</name><argument_list pos:start="117:12" pos:end="117:16">(<argument pos:start="117:13" pos:end="117:15"><expr pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			"push %%"REG_b"   		\n\t"

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

			"pxor %%mm7, %%mm7		\n\t"

			"movq "MANGLE(w02)", %%mm6	\n\t"

			"push %%"REG_BP"		\n\t" <comment type="line" pos:start="127:63" pos:end="127:87">// we use 7 regs here ...</comment>

			"mov %%"REG_a", %%"REG_BP"	\n\t"

			ASMALIGN(4)

			"1:				\n\t"

			"movzwl (%2, %%"REG_BP"), %%eax	\n\t"

			"movzwl 2(%2, %%"REG_BP"), %%ebx\n\t"

			"movq (%1, %%"REG_BP", 8), %%mm1\n\t"

			"movq 16(%1, %%"REG_BP", 8), %%mm3\n\t"

			"movd (%3, %%"REG_a"), %%mm0	\n\t"

			"movd (%3, %%"REG_b"), %%mm2	\n\t"

			"punpcklbw %%mm7, %%mm0		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm0		\n\t"

			"pmaddwd %%mm2, %%mm3		\n\t"



			"movq 8(%1, %%"REG_BP", 8), %%mm1\n\t"

			"movq 24(%1, %%"REG_BP", 8), %%mm5\n\t"

			"movd 4(%3, %%"REG_a"), %%mm4	\n\t"

			"movd 4(%3, %%"REG_b"), %%mm2	\n\t"

			"punpcklbw %%mm7, %%mm4		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm4		\n\t"

			"pmaddwd %%mm2, %%mm5		\n\t"

			"paddd %%mm4, %%mm0		\n\t"

			"paddd %%mm5, %%mm3		\n\t"



			"psrad $8, %%mm0		\n\t"

			"psrad $8, %%mm3		\n\t"

			"packssdw %%mm3, %%mm0		\n\t"

			"pmaddwd %%mm6, %%mm0		\n\t"

			"packssdw %%mm0, %%mm0		\n\t"

			"movd %%mm0, (%4, %%"REG_BP")	\n\t"

			"add $4, %%"REG_BP"		\n\t"

			" jnc 1b			\n\t"



			"pop %%"REG_BP"			\n\t"

<cpp:if pos:start="199:1" pos:end="199:16">#<cpp:directive pos:start="199:2" pos:end="199:3">if</cpp:directive> <expr pos:start="199:5" pos:end="199:16"><call pos:start="199:5" pos:end="199:16"><name pos:start="199:5" pos:end="199:11">defined</name><argument_list pos:start="199:12" pos:end="199:16">(<argument pos:start="199:13" pos:end="199:15"><expr pos:start="199:13" pos:end="199:15"><name pos:start="199:13" pos:end="199:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			"pop %%"REG_b"   		\n\t"

<cpp:endif pos:start="203:1" pos:end="203:6">#<cpp:directive pos:start="203:2" pos:end="203:6">endif</cpp:directive></cpp:endif>

			: "+a" (counter)

			: "c" (filter), "d" (filterPos), "S" (src), "D" (dst)

<cpp:if pos:start="209:1" pos:end="209:17">#<cpp:directive pos:start="209:2" pos:end="209:3">if</cpp:directive> <expr pos:start="209:5" pos:end="209:17"><operator pos:start="209:5" pos:end="209:5">!</operator><call pos:start="209:6" pos:end="209:17"><name pos:start="209:6" pos:end="209:12">defined</name><argument_list pos:start="209:13" pos:end="209:17">(<argument pos:start="209:14" pos:end="209:16"><expr pos:start="209:14" pos:end="209:16"><name pos:start="209:14" pos:end="209:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			: "%"REG_b

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

		);</asm>

	</block_content>}</block></if>

	<else pos:start="219:9" pos:end="322:0">else

	<block pos:start="221:9" pos:end="322:0">{<block_content pos:start="223:17" pos:end="315:18">

		<decl_stmt pos:start="223:17" pos:end="223:49"><decl pos:start="223:17" pos:end="223:48"><type pos:start="223:17" pos:end="223:25"><name pos:start="223:17" pos:end="223:23">uint8_t</name> <modifier pos:start="223:25" pos:end="223:25">*</modifier></type><name pos:start="223:26" pos:end="223:31">offset</name> <init pos:start="223:33" pos:end="223:48">= <expr pos:start="223:35" pos:end="223:48"><name pos:start="223:35" pos:end="223:37">src</name><operator pos:start="223:38" pos:end="223:38">+</operator><name pos:start="223:39" pos:end="223:48">filterSize</name></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="225:17" pos:end="225:38"><decl pos:start="225:17" pos:end="225:37"><type pos:start="225:17" pos:end="225:20"><name pos:start="225:17" pos:end="225:20">long</name></type> <name pos:start="225:22" pos:end="225:28">counter</name><init pos:start="225:29" pos:end="225:37">= <expr pos:start="225:31" pos:end="225:37"><operator pos:start="225:31" pos:end="225:31">-</operator><literal type="number" pos:start="225:32" pos:end="225:32">2</literal><operator pos:start="225:33" pos:end="225:33">*</operator><name pos:start="225:34" pos:end="225:37">dstW</name></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="227:1" pos:end="227:46">//		filter-= counter*filterSize/2;</comment>

		<expr_stmt pos:start="229:17" pos:end="229:38"><expr pos:start="229:17" pos:end="229:37"><name pos:start="229:17" pos:end="229:25">filterPos</name><operator pos:start="229:26" pos:end="229:27">-=</operator> <name pos:start="229:29" pos:end="229:35">counter</name><operator pos:start="229:36" pos:end="229:36">/</operator><literal type="number" pos:start="229:37" pos:end="229:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="231:17" pos:end="231:32"><expr pos:start="231:17" pos:end="231:31"><name pos:start="231:17" pos:end="231:19">dst</name><operator pos:start="231:20" pos:end="231:21">-=</operator> <name pos:start="231:23" pos:end="231:29">counter</name><operator pos:start="231:30" pos:end="231:30">/</operator><literal type="number" pos:start="231:31" pos:end="231:31">2</literal></expr>;</expr_stmt>

		<asm pos:start="233:17" pos:end="315:18">asm <specifier pos:start="233:21" pos:end="233:28">volatile</specifier>(

			"pxor %%mm7, %%mm7		\n\t"

			"movq "MANGLE(w02)", %%mm6	\n\t"

			ASMALIGN(4)

			"1:				\n\t"

			"mov %2, %%"REG_c"		\n\t"

			"movzwl (%%"REG_c", %0), %%eax	\n\t"

			"movzwl 2(%%"REG_c", %0), %%edx	\n\t"

			"mov %5, %%"REG_c"		\n\t"

			"pxor %%mm4, %%mm4		\n\t"

			"pxor %%mm5, %%mm5		\n\t"

			"2:				\n\t"

			"movq (%1), %%mm1		\n\t"

			"movq (%1, %6), %%mm3		\n\t"

			"movd (%%"REG_c", %%"REG_a"), %%mm0\n\t"

			"movd (%%"REG_c", %%"REG_d"), %%mm2\n\t"

			"punpcklbw %%mm7, %%mm0		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm0		\n\t"

			"pmaddwd %%mm2, %%mm3		\n\t"

			"paddd %%mm3, %%mm5		\n\t"

			"paddd %%mm0, %%mm4		\n\t"

			"add $8, %1			\n\t"

			"add $4, %%"REG_c"		\n\t"

			"cmp %4, %%"REG_c"		\n\t"

			" jb 2b				\n\t"

			"add %6, %1			\n\t"

			"psrad $8, %%mm4		\n\t"

			"psrad $8, %%mm5		\n\t"

			"packssdw %%mm5, %%mm4		\n\t"

			"pmaddwd %%mm6, %%mm4		\n\t"

			"packssdw %%mm4, %%mm4		\n\t"

			"mov %3, %%"REG_a"		\n\t"

			"movd %%mm4, (%%"REG_a", %0)	\n\t"

			"add $4, %0			\n\t"

			" jnc 1b			\n\t"



			: "+r" (counter), "+r" (filter)

			: "m" (filterPos), "m" (dst), "m"(offset),

			  "m" (src), "r" (filterSize*2)

			: "%"REG_a, "%"REG_c, "%"REG_d

		);</asm>

	</block_content>}</block></else></if_stmt>

<cpp:else pos:start="319:1" pos:end="319:5">#<cpp:directive pos:start="319:2" pos:end="319:5">else</cpp:directive></cpp:else>

<cpp:ifdef pos:start="321:1" pos:end="321:19">#<cpp:directive pos:start="321:2" pos:end="321:6">ifdef</cpp:directive> <name pos:start="321:8" pos:end="321:19">HAVE_ALTIVEC</name></cpp:ifdef>

	<expr_stmt pos:start="323:9" pos:end="326:0"><expr pos:start="323:9" pos:end="323:86"><call pos:start="323:9" pos:end="323:86"><name pos:start="323:9" pos:end="323:27">hScale_altivec_real</name><argument_list pos:start="323:28" pos:end="323:86">(<argument pos:start="323:29" pos:end="323:31"><expr pos:start="323:29" pos:end="323:31"><name pos:start="323:29" pos:end="323:31">dst</name></expr></argument>, <argument pos:start="323:34" pos:end="323:37"><expr pos:start="323:34" pos:end="323:37"><name pos:start="323:34" pos:end="323:37">dstW</name></expr></argument>, <argument pos:start="323:40" pos:end="323:42"><expr pos:start="323:40" pos:end="323:42"><name pos:start="323:40" pos:end="323:42">src</name></expr></argument>, <argument pos:start="323:45" pos:end="323:48"><expr pos:start="323:45" pos:end="323:48"><name pos:start="323:45" pos:end="323:48">srcW</name></expr></argument>, <argument pos:start="323:51" pos:end="323:54"><expr pos:start="323:51" pos:end="323:54"><name pos:start="323:51" pos:end="323:54">xInc</name></expr></argument>, <argument pos:start="323:57" pos:end="323:62"><expr pos:start="323:57" pos:end="323:62"><name pos:start="323:57" pos:end="323:62">filter</name></expr></argument>, <argument pos:start="323:65" pos:end="323:73"><expr pos:start="323:65" pos:end="323:73"><name pos:start="323:65" pos:end="323:73">filterPos</name></expr></argument>, <argument pos:start="323:76" pos:end="323:85"><expr pos:start="323:76" pos:end="323:85"><name pos:start="323:76" pos:end="323:85">filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="325:1" pos:end="325:5">#<cpp:directive pos:start="325:2" pos:end="325:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="327:9" pos:end="327:14"><decl pos:start="327:9" pos:end="327:13"><type pos:start="327:9" pos:end="327:11"><name pos:start="327:9" pos:end="327:11">int</name></type> <name pos:start="327:13" pos:end="327:13">i</name></decl>;</decl_stmt>

	<for pos:start="329:9" pos:end="362:0">for<control pos:start="329:12" pos:end="329:29">(<init pos:start="329:13" pos:end="329:16"><expr pos:start="329:13" pos:end="329:15"><name pos:start="329:13" pos:end="329:13">i</name><operator pos:start="329:14" pos:end="329:14">=</operator><literal type="number" pos:start="329:15" pos:end="329:15">0</literal></expr>;</init> <condition pos:start="329:18" pos:end="329:24"><expr pos:start="329:18" pos:end="329:23"><name pos:start="329:18" pos:end="329:18">i</name><operator pos:start="329:19" pos:end="329:19">&lt;</operator><name pos:start="329:20" pos:end="329:23">dstW</name></expr>;</condition> <incr pos:start="329:26" pos:end="329:28"><expr pos:start="329:26" pos:end="329:28"><name pos:start="329:26" pos:end="329:26">i</name><operator pos:start="329:27" pos:end="329:28">++</operator></expr></incr>)</control>

	<block pos:start="331:9" pos:end="362:0">{<block_content pos:start="333:17" pos:end="353:55">

		<decl_stmt pos:start="333:17" pos:end="333:22"><decl pos:start="333:17" pos:end="333:21"><type pos:start="333:17" pos:end="333:19"><name pos:start="333:17" pos:end="333:19">int</name></type> <name pos:start="333:21" pos:end="333:21">j</name></decl>;</decl_stmt>

		<decl_stmt pos:start="335:17" pos:end="335:41"><decl pos:start="335:17" pos:end="335:40"><type pos:start="335:17" pos:end="335:19"><name pos:start="335:17" pos:end="335:19">int</name></type> <name pos:start="335:21" pos:end="335:26">srcPos</name><init pos:start="335:27" pos:end="335:40">= <expr pos:start="335:29" pos:end="335:40"><name pos:start="335:29" pos:end="335:40"><name pos:start="335:29" pos:end="335:37">filterPos</name><index pos:start="335:38" pos:end="335:40">[<expr pos:start="335:39" pos:end="335:39"><name pos:start="335:39" pos:end="335:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="337:17" pos:end="337:26"><decl pos:start="337:17" pos:end="337:25"><type pos:start="337:17" pos:end="337:19"><name pos:start="337:17" pos:end="337:19">int</name></type> <name pos:start="337:21" pos:end="337:23">val</name><init pos:start="337:24" pos:end="337:25">=<expr pos:start="337:25" pos:end="337:25"><literal type="number" pos:start="337:25" pos:end="337:25">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="339:1" pos:end="339:56">//		printf("filterPos: %d\n", filterPos[i]);</comment>

		<for pos:start="341:17" pos:end="349:17">for<control pos:start="341:20" pos:end="341:43">(<init pos:start="341:21" pos:end="341:24"><expr pos:start="341:21" pos:end="341:23"><name pos:start="341:21" pos:end="341:21">j</name><operator pos:start="341:22" pos:end="341:22">=</operator><literal type="number" pos:start="341:23" pos:end="341:23">0</literal></expr>;</init> <condition pos:start="341:26" pos:end="341:38"><expr pos:start="341:26" pos:end="341:37"><name pos:start="341:26" pos:end="341:26">j</name><operator pos:start="341:27" pos:end="341:27">&lt;</operator><name pos:start="341:28" pos:end="341:37">filterSize</name></expr>;</condition> <incr pos:start="341:40" pos:end="341:42"><expr pos:start="341:40" pos:end="341:42"><name pos:start="341:40" pos:end="341:40">j</name><operator pos:start="341:41" pos:end="341:42">++</operator></expr></incr>)</control>

		<block pos:start="343:17" pos:end="349:17">{<block_content pos:start="347:25" pos:end="347:79">

<comment type="line" pos:start="345:1" pos:end="345:84">//			printf("filter: %d, src: %d\n", filter[i], src[srcPos + j]);</comment>

			<expr_stmt pos:start="347:25" pos:end="347:79"><expr pos:start="347:25" pos:end="347:78"><name pos:start="347:25" pos:end="347:27">val</name> <operator pos:start="347:29" pos:end="347:30">+=</operator> <operator pos:start="347:32" pos:end="347:32">(</operator><operator pos:start="347:33" pos:end="347:33">(</operator><name pos:start="347:34" pos:end="347:36">int</name><operator pos:start="347:37" pos:end="347:37">)</operator><name pos:start="347:38" pos:end="347:52"><name pos:start="347:38" pos:end="347:40">src</name><index pos:start="347:41" pos:end="347:52">[<expr pos:start="347:42" pos:end="347:51"><name pos:start="347:42" pos:end="347:47">srcPos</name> <operator pos:start="347:49" pos:end="347:49">+</operator> <name pos:start="347:51" pos:end="347:51">j</name></expr>]</index></name><operator pos:start="347:53" pos:end="347:53">)</operator><operator pos:start="347:54" pos:end="347:54">*</operator><name pos:start="347:55" pos:end="347:78"><name pos:start="347:55" pos:end="347:60">filter</name><index pos:start="347:61" pos:end="347:78">[<expr pos:start="347:62" pos:end="347:77"><name pos:start="347:62" pos:end="347:71">filterSize</name><operator pos:start="347:72" pos:end="347:72">*</operator><name pos:start="347:73" pos:end="347:73">i</name> <operator pos:start="347:75" pos:end="347:75">+</operator> <name pos:start="347:77" pos:end="347:77">j</name></expr>]</index></name></expr>;</expr_stmt>

		</block_content>}</block></for>

<comment type="line" pos:start="351:1" pos:end="351:38">//		filter += hFilterSize;</comment>

		<expr_stmt pos:start="353:17" pos:end="353:55"><expr pos:start="353:17" pos:end="353:54"><name pos:start="353:17" pos:end="353:22"><name pos:start="353:17" pos:end="353:19">dst</name><index pos:start="353:20" pos:end="353:22">[<expr pos:start="353:21" pos:end="353:21"><name pos:start="353:21" pos:end="353:21">i</name></expr>]</index></name> <operator pos:start="353:24" pos:end="353:24">=</operator> <call pos:start="353:26" pos:end="353:54"><name pos:start="353:26" pos:end="353:32">av_clip</name><argument_list pos:start="353:33" pos:end="353:54">(<argument pos:start="353:34" pos:end="353:39"><expr pos:start="353:34" pos:end="353:39"><name pos:start="353:34" pos:end="353:36">val</name><operator pos:start="353:37" pos:end="353:38">&gt;&gt;</operator><literal type="number" pos:start="353:39" pos:end="353:39">7</literal></expr></argument>, <argument pos:start="353:42" pos:end="353:42"><expr pos:start="353:42" pos:end="353:42"><literal type="number" pos:start="353:42" pos:end="353:42">0</literal></expr></argument>, <argument pos:start="353:45" pos:end="353:53"><expr pos:start="353:45" pos:end="353:53"><operator pos:start="353:45" pos:end="353:45">(</operator><literal type="number" pos:start="353:46" pos:end="353:46">1</literal><operator pos:start="353:47" pos:end="353:48">&lt;&lt;</operator><literal type="number" pos:start="353:49" pos:end="353:50">15</literal><operator pos:start="353:51" pos:end="353:51">)</operator><operator pos:start="353:52" pos:end="353:52">-</operator><literal type="number" pos:start="353:53" pos:end="353:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="353:57" pos:end="353:95">// the cubic equation does overflow ...</comment>

<comment type="line" pos:start="355:1" pos:end="355:32">//		dst[i] = val&gt;&gt;7;</comment>

	</block_content>}</block></for>

<cpp:endif pos:start="359:1" pos:end="359:6">#<cpp:directive pos:start="359:2" pos:end="359:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
