<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6463.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">protocol_client_auth_vnc</name><parameter_list pos:start="1:36" pos:end="1:76">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:44">VncState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">vs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:75"><decl pos:start="1:66" pos:end="1:75"><type pos:start="1:66" pos:end="1:75"><name pos:start="1:66" pos:end="1:71">size_t</name></type> <name pos:start="1:73" pos:end="1:75">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:13">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">char</name></type> <name pos:start="5:19" pos:end="5:51"><name pos:start="5:19" pos:end="5:26">response</name><index pos:start="5:27" pos:end="5:51">[<expr pos:start="5:28" pos:end="5:50"><name pos:start="5:28" pos:end="5:50">VNC_AUTH_CHALLENGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:12">i</name></decl>, <decl pos:start="7:15" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:15" pos:end="7:19">pwlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:21">key</name><index pos:start="9:22" pos:end="9:24">[<expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">time_t</name></type> <name pos:start="11:12" pos:end="11:14">now</name> <init pos:start="11:16" pos:end="11:27">= <expr pos:start="11:18" pos:end="11:27"><call pos:start="11:18" pos:end="11:27"><name pos:start="11:18" pos:end="11:21">time</name><argument_list pos:start="11:22" pos:end="11:27">(<argument pos:start="11:23" pos:end="11:26"><expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">QCryptoCipher</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:25">cipher</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">err</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:25"><name pos:start="19:10" pos:end="19:11">vs</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:15">vd</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:25">password</name></name></expr>)</condition> <block pos:start="19:28" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:20">

        <expr_stmt pos:start="21:9" pos:end="21:54"><expr pos:start="21:9" pos:end="21:53"><call pos:start="21:9" pos:end="21:53"><name pos:start="21:9" pos:end="21:17">VNC_DEBUG</name><argument_list pos:start="21:18" pos:end="21:53">(<argument pos:start="21:19" pos:end="21:52"><expr pos:start="21:19" pos:end="21:52"><literal type="string" pos:start="21:19" pos:end="21:52">"No password configured on server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="23:9" pos:end="23:20">goto <name pos:start="23:14" pos:end="23:19">reject</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:30">(<expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:10">vs</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:14">vd</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">expires</name></name> <operator pos:start="27:25" pos:end="27:25">&lt;</operator> <name pos:start="27:27" pos:end="27:29">now</name></expr>)</condition> <block pos:start="27:32" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><call pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:17">VNC_DEBUG</name><argument_list pos:start="29:18" pos:end="29:40">(<argument pos:start="29:19" pos:end="29:39"><expr pos:start="29:19" pos:end="29:39"><literal type="string" pos:start="29:19" pos:end="29:39">"Password is expired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:20">goto <name pos:start="31:14" pos:end="31:19">reject</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:61"><expr pos:start="37:5" pos:end="37:60"><call pos:start="37:5" pos:end="37:60"><name pos:start="37:5" pos:end="37:10">memcpy</name><argument_list pos:start="37:11" pos:end="37:60">(<argument pos:start="37:12" pos:end="37:19"><expr pos:start="37:12" pos:end="37:19"><name pos:start="37:12" pos:end="37:19">response</name></expr></argument>, <argument pos:start="37:22" pos:end="37:34"><expr pos:start="37:22" pos:end="37:34"><name pos:start="37:22" pos:end="37:34"><name pos:start="37:22" pos:end="37:23">vs</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:34">challenge</name></name></expr></argument>, <argument pos:start="37:37" pos:end="37:59"><expr pos:start="37:37" pos:end="37:59"><name pos:start="37:37" pos:end="37:59">VNC_AUTH_CHALLENGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:51">/* Calculate the expected challenge response */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:9">pwlen</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:18">strlen</name><argument_list pos:start="43:19" pos:end="43:36">(<argument pos:start="43:20" pos:end="43:35"><expr pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:21">vs</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:25">vd</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:35">password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="45:5" pos:end="47:51">for <control pos:start="45:9" pos:end="45:33">(<init pos:start="45:10" pos:end="45:13"><expr pos:start="45:10" pos:end="45:12"><name pos:start="45:10" pos:end="45:10">i</name><operator pos:start="45:11" pos:end="45:11">=</operator><literal type="number" pos:start="45:12" pos:end="45:12">0</literal></expr>;</init> <condition pos:start="45:15" pos:end="45:28"><expr pos:start="45:15" pos:end="45:27"><name pos:start="45:15" pos:end="45:15">i</name><operator pos:start="45:16" pos:end="45:16">&lt;</operator><sizeof pos:start="45:17" pos:end="45:27">sizeof<argument_list pos:start="45:23" pos:end="45:27">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">key</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:30">i</name><operator pos:start="45:31" pos:end="45:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:9" pos:end="47:51"><block_content pos:start="47:9" pos:end="47:51">

        <expr_stmt pos:start="47:9" pos:end="47:51"><expr pos:start="47:9" pos:end="47:50"><name pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:11">key</name><index pos:start="47:12" pos:end="47:14">[<expr pos:start="47:13" pos:end="47:13"><name pos:start="47:13" pos:end="47:13">i</name></expr>]</index></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <ternary pos:start="47:18" pos:end="47:50"><condition pos:start="47:18" pos:end="47:26"><expr pos:start="47:18" pos:end="47:24"><name pos:start="47:18" pos:end="47:18">i</name><operator pos:start="47:19" pos:end="47:19">&lt;</operator><name pos:start="47:20" pos:end="47:24">pwlen</name></expr> ?</condition><then pos:start="47:28" pos:end="47:46"> <expr pos:start="47:28" pos:end="47:46"><name pos:start="47:28" pos:end="47:46"><name pos:start="47:28" pos:end="47:29">vs</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:33">vd</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:43">password</name><index pos:start="47:44" pos:end="47:46">[<expr pos:start="47:45" pos:end="47:45"><name pos:start="47:45" pos:end="47:45">i</name></expr>]</index></name></expr> </then><else pos:start="47:48" pos:end="47:50">: <expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="51:5" pos:end="59:14"><expr pos:start="51:5" pos:end="59:13"><name pos:start="51:5" pos:end="51:10">cipher</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="59:13"><name pos:start="51:14" pos:end="51:31">qcrypto_cipher_new</name><argument_list pos:start="51:32" pos:end="59:13">(

        <argument pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:34">QCRYPTO_CIPHER_ALG_DES_RFB</name></expr></argument>,

        <argument pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:31">QCRYPTO_CIPHER_MODE_ECB</name></expr></argument>,

        <argument pos:start="57:9" pos:end="57:11"><expr pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">key</name></expr></argument>, <argument pos:start="57:14" pos:end="57:30"><expr pos:start="57:14" pos:end="57:30"><call pos:start="57:14" pos:end="57:30"><name pos:start="57:14" pos:end="57:25">G_N_ELEMENTS</name><argument_list pos:start="57:26" pos:end="57:30">(<argument pos:start="57:27" pos:end="57:29"><expr pos:start="57:27" pos:end="57:29"><name pos:start="57:27" pos:end="57:29">key</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="59:9" pos:end="59:12"><expr pos:start="59:9" pos:end="59:12"><operator pos:start="59:9" pos:end="59:9">&amp;</operator><name pos:start="59:10" pos:end="59:12">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="71:5"><if pos:start="61:5" pos:end="71:5">if <condition pos:start="61:8" pos:end="61:16">(<expr pos:start="61:9" pos:end="61:15"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:15">cipher</name></expr>)</condition> <block pos:start="61:18" pos:end="71:5">{<block_content pos:start="63:9" pos:end="69:20">

        <expr_stmt pos:start="63:9" pos:end="65:41"><expr pos:start="63:9" pos:end="65:40"><call pos:start="63:9" pos:end="65:40"><name pos:start="63:9" pos:end="63:17">VNC_DEBUG</name><argument_list pos:start="63:18" pos:end="65:40">(<argument pos:start="63:19" pos:end="63:47"><expr pos:start="63:19" pos:end="63:47"><literal type="string" pos:start="63:19" pos:end="63:47">"Cannot initialize cipher %s"</literal></expr></argument>,

                  <argument pos:start="65:19" pos:end="65:39"><expr pos:start="65:19" pos:end="65:39"><call pos:start="65:19" pos:end="65:39"><name pos:start="65:19" pos:end="65:34">error_get_pretty</name><argument_list pos:start="65:35" pos:end="65:39">(<argument pos:start="65:36" pos:end="65:38"><expr pos:start="65:36" pos:end="65:38"><name pos:start="65:36" pos:end="65:38">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:24"><expr pos:start="67:9" pos:end="67:23"><call pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:18">error_free</name><argument_list pos:start="67:19" pos:end="67:23">(<argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:20">goto <name pos:start="69:14" pos:end="69:19">reject</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="93:5"><if pos:start="75:5" pos:end="93:5">if <condition pos:start="75:8" pos:end="83:41">(<expr pos:start="75:9" pos:end="83:40"><call pos:start="75:9" pos:end="83:36"><name pos:start="75:9" pos:end="75:30">qcrypto_cipher_encrypt</name><argument_list pos:start="75:31" pos:end="83:36">(<argument pos:start="75:32" pos:end="75:37"><expr pos:start="75:32" pos:end="75:37"><name pos:start="75:32" pos:end="75:37">cipher</name></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:44"><expr pos:start="77:32" pos:end="77:44"><name pos:start="77:32" pos:end="77:44"><name pos:start="77:32" pos:end="77:33">vs</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:44">challenge</name></name></expr></argument>,

                               <argument pos:start="79:32" pos:end="79:39"><expr pos:start="79:32" pos:end="79:39"><name pos:start="79:32" pos:end="79:39">response</name></expr></argument>,

                               <argument pos:start="81:32" pos:end="81:54"><expr pos:start="81:32" pos:end="81:54"><name pos:start="81:32" pos:end="81:54">VNC_AUTH_CHALLENGE_SIZE</name></expr></argument>,

                               <argument pos:start="83:32" pos:end="83:35"><expr pos:start="83:32" pos:end="83:35"><operator pos:start="83:32" pos:end="83:32">&amp;</operator><name pos:start="83:33" pos:end="83:35">err</name></expr></argument>)</argument_list></call> <operator pos:start="83:38" pos:end="83:38">&lt;</operator> <literal type="number" pos:start="83:40" pos:end="83:40">0</literal></expr>)</condition> <block pos:start="83:43" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:20">

        <expr_stmt pos:start="85:9" pos:end="87:41"><expr pos:start="85:9" pos:end="87:40"><call pos:start="85:9" pos:end="87:40"><name pos:start="85:9" pos:end="85:17">VNC_DEBUG</name><argument_list pos:start="85:18" pos:end="87:40">(<argument pos:start="85:19" pos:end="85:47"><expr pos:start="85:19" pos:end="85:47"><literal type="string" pos:start="85:19" pos:end="85:47">"Cannot encrypt challenge %s"</literal></expr></argument>,

                  <argument pos:start="87:19" pos:end="87:39"><expr pos:start="87:19" pos:end="87:39"><call pos:start="87:19" pos:end="87:39"><name pos:start="87:19" pos:end="87:34">error_get_pretty</name><argument_list pos:start="87:35" pos:end="87:39">(<argument pos:start="87:36" pos:end="87:38"><expr pos:start="87:36" pos:end="87:38"><name pos:start="87:36" pos:end="87:38">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:24"><expr pos:start="89:9" pos:end="89:23"><call pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:18">error_free</name><argument_list pos:start="89:19" pos:end="89:23">(<argument pos:start="89:20" pos:end="89:22"><expr pos:start="89:20" pos:end="89:22"><name pos:start="89:20" pos:end="89:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:20">goto <name pos:start="91:14" pos:end="91:19">reject</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:55">/* Compare expected vs actual challenge response */</comment>

    <if_stmt pos:start="99:5" pos:end="117:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:61">(<expr pos:start="99:9" pos:end="99:60"><call pos:start="99:9" pos:end="99:55"><name pos:start="99:9" pos:end="99:14">memcmp</name><argument_list pos:start="99:15" pos:end="99:55">(<argument pos:start="99:16" pos:end="99:23"><expr pos:start="99:16" pos:end="99:23"><name pos:start="99:16" pos:end="99:23">response</name></expr></argument>, <argument pos:start="99:26" pos:end="99:29"><expr pos:start="99:26" pos:end="99:29"><name pos:start="99:26" pos:end="99:29">data</name></expr></argument>, <argument pos:start="99:32" pos:end="99:54"><expr pos:start="99:32" pos:end="99:54"><name pos:start="99:32" pos:end="99:54">VNC_AUTH_CHALLENGE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="99:57" pos:end="99:58">!=</operator> <literal type="number" pos:start="99:60" pos:end="99:60">0</literal></expr>)</condition> <block pos:start="99:63" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:20">

        <expr_stmt pos:start="101:9" pos:end="101:63"><expr pos:start="101:9" pos:end="101:62"><call pos:start="101:9" pos:end="101:62"><name pos:start="101:9" pos:end="101:17">VNC_DEBUG</name><argument_list pos:start="101:18" pos:end="101:62">(<argument pos:start="101:19" pos:end="101:61"><expr pos:start="101:19" pos:end="101:61"><literal type="string" pos:start="101:19" pos:end="101:61">"Client challenge response did not match\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:20">goto <name pos:start="103:14" pos:end="103:19">reject</name>;</goto>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="117:5">else <block pos:start="105:12" pos:end="117:5">{<block_content pos:start="107:9" pos:end="115:30">

        <expr_stmt pos:start="107:9" pos:end="107:56"><expr pos:start="107:9" pos:end="107:55"><call pos:start="107:9" pos:end="107:55"><name pos:start="107:9" pos:end="107:17">VNC_DEBUG</name><argument_list pos:start="107:18" pos:end="107:55">(<argument pos:start="107:19" pos:end="107:54"><expr pos:start="107:19" pos:end="107:54"><literal type="string" pos:start="107:19" pos:end="107:54">"Accepting VNC challenge response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:29"><expr pos:start="109:9" pos:end="109:28"><call pos:start="109:9" pos:end="109:28"><name pos:start="109:9" pos:end="109:21">vnc_write_u32</name><argument_list pos:start="109:22" pos:end="109:28">(<argument pos:start="109:23" pos:end="109:24"><expr pos:start="109:23" pos:end="109:24"><name pos:start="109:23" pos:end="109:24">vs</name></expr></argument>, <argument pos:start="109:27" pos:end="109:27"><expr pos:start="109:27" pos:end="109:27"><literal type="number" pos:start="109:27" pos:end="109:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:31" pos:end="109:47">/* Accept auth */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:22"><expr pos:start="111:9" pos:end="111:21"><call pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:17">vnc_flush</name><argument_list pos:start="111:18" pos:end="111:21">(<argument pos:start="111:19" pos:end="111:20"><expr pos:start="111:19" pos:end="111:20"><name pos:start="111:19" pos:end="111:20">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:30"><expr pos:start="115:9" pos:end="115:29"><call pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:25">start_client_init</name><argument_list pos:start="115:26" pos:end="115:29">(<argument pos:start="115:27" pos:end="115:28"><expr pos:start="115:27" pos:end="115:28"><name pos:start="115:27" pos:end="115:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:32"><expr pos:start="121:5" pos:end="121:31"><call pos:start="121:5" pos:end="121:31"><name pos:start="121:5" pos:end="121:23">qcrypto_cipher_free</name><argument_list pos:start="121:24" pos:end="121:31">(<argument pos:start="121:25" pos:end="121:30"><expr pos:start="121:25" pos:end="121:30"><name pos:start="121:25" pos:end="121:30">cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>



<label pos:start="127:1" pos:end="127:7"><name pos:start="127:1" pos:end="127:6">reject</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:25"><expr pos:start="129:5" pos:end="129:24"><call pos:start="129:5" pos:end="129:24"><name pos:start="129:5" pos:end="129:17">vnc_write_u32</name><argument_list pos:start="129:18" pos:end="129:24">(<argument pos:start="129:19" pos:end="129:20"><expr pos:start="129:19" pos:end="129:20"><name pos:start="129:19" pos:end="129:20">vs</name></expr></argument>, <argument pos:start="129:23" pos:end="129:23"><expr pos:start="129:23" pos:end="129:23"><literal type="number" pos:start="129:23" pos:end="129:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="129:27" pos:end="129:43">/* Reject auth */</comment>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:23">(<expr pos:start="131:9" pos:end="131:22"><name pos:start="131:9" pos:end="131:17"><name pos:start="131:9" pos:end="131:10">vs</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:17">minor</name></name> <operator pos:start="131:19" pos:end="131:20">&gt;=</operator> <literal type="number" pos:start="131:22" pos:end="131:22">8</literal></expr>)</condition> <block pos:start="131:25" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:40">

        <decl_stmt pos:start="133:9" pos:end="133:58"><decl pos:start="133:9" pos:end="133:57"><type pos:start="133:9" pos:end="133:25"><specifier pos:start="133:9" pos:end="133:14">static</specifier> <specifier pos:start="133:16" pos:end="133:20">const</specifier> <name pos:start="133:22" pos:end="133:25">char</name></type> <name pos:start="133:27" pos:end="133:31"><name pos:start="133:27" pos:end="133:29">err</name><index pos:start="133:30" pos:end="133:31">[]</index></name> <init pos:start="133:33" pos:end="133:57">= <expr pos:start="133:35" pos:end="133:57"><literal type="string" pos:start="133:35" pos:end="133:57">"Authentication failed"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:39"><expr pos:start="135:9" pos:end="135:38"><call pos:start="135:9" pos:end="135:38"><name pos:start="135:9" pos:end="135:21">vnc_write_u32</name><argument_list pos:start="135:22" pos:end="135:38">(<argument pos:start="135:23" pos:end="135:24"><expr pos:start="135:23" pos:end="135:24"><name pos:start="135:23" pos:end="135:24">vs</name></expr></argument>, <argument pos:start="135:27" pos:end="135:37"><expr pos:start="135:27" pos:end="135:37"><sizeof pos:start="135:27" pos:end="135:37">sizeof<argument_list pos:start="135:33" pos:end="135:37">(<argument pos:start="135:34" pos:end="135:36"><expr pos:start="135:34" pos:end="135:36"><name pos:start="135:34" pos:end="135:36">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:40"><expr pos:start="137:9" pos:end="137:39"><call pos:start="137:9" pos:end="137:39"><name pos:start="137:9" pos:end="137:17">vnc_write</name><argument_list pos:start="137:18" pos:end="137:39">(<argument pos:start="137:19" pos:end="137:20"><expr pos:start="137:19" pos:end="137:20"><name pos:start="137:19" pos:end="137:20">vs</name></expr></argument>, <argument pos:start="137:23" pos:end="137:25"><expr pos:start="137:23" pos:end="137:25"><name pos:start="137:23" pos:end="137:25">err</name></expr></argument>, <argument pos:start="137:28" pos:end="137:38"><expr pos:start="137:28" pos:end="137:38"><sizeof pos:start="137:28" pos:end="137:38">sizeof<argument_list pos:start="137:34" pos:end="137:38">(<argument pos:start="137:35" pos:end="137:37"><expr pos:start="137:35" pos:end="137:37"><name pos:start="137:35" pos:end="137:37">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:18"><expr pos:start="141:5" pos:end="141:17"><call pos:start="141:5" pos:end="141:17"><name pos:start="141:5" pos:end="141:13">vnc_flush</name><argument_list pos:start="141:14" pos:end="141:17">(<argument pos:start="141:15" pos:end="141:16"><expr pos:start="141:15" pos:end="141:16"><name pos:start="141:15" pos:end="141:16">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:25"><expr pos:start="143:5" pos:end="143:24"><call pos:start="143:5" pos:end="143:24"><name pos:start="143:5" pos:end="143:20">vnc_client_error</name><argument_list pos:start="143:21" pos:end="143:24">(<argument pos:start="143:22" pos:end="143:23"><expr pos:start="143:22" pos:end="143:23"><name pos:start="143:22" pos:end="143:23">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:32"><expr pos:start="145:5" pos:end="145:31"><call pos:start="145:5" pos:end="145:31"><name pos:start="145:5" pos:end="145:23">qcrypto_cipher_free</name><argument_list pos:start="145:24" pos:end="145:31">(<argument pos:start="145:25" pos:end="145:30"><expr pos:start="145:25" pos:end="145:30"><name pos:start="145:25" pos:end="145:30">cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
