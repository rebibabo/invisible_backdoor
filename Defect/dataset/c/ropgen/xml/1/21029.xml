<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21029.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">spapr_core_plug</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:48"><decl pos:start="1:22" pos:end="1:48"><type pos:start="1:22" pos:end="1:48"><name pos:start="1:22" pos:end="1:35">HotplugHandler</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:48">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:61">DeviceState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">dev</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:5">

    <decl_stmt pos:start="7:5" pos:end="7:74"><decl pos:start="7:5" pos:end="7:73"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRMachineClass</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">smc</name> <init pos:start="7:28" pos:end="7:73">= <expr pos:start="7:30" pos:end="7:73"><call pos:start="7:30" pos:end="7:73"><name pos:start="7:30" pos:end="7:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="7:53" pos:end="7:73">(<argument pos:start="7:54" pos:end="7:72"><expr pos:start="7:54" pos:end="7:72"><call pos:start="7:54" pos:end="7:72"><name pos:start="7:54" pos:end="7:59">OBJECT</name><argument_list pos:start="7:60" pos:end="7:72">(<argument pos:start="7:61" pos:end="7:71"><expr pos:start="7:61" pos:end="7:71"><name pos:start="7:61" pos:end="7:71">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:66"><decl pos:start="9:5" pos:end="9:65"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">sPAPRMachineState</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:28">spapr</name> <init pos:start="9:30" pos:end="9:65">= <expr pos:start="9:32" pos:end="9:65"><call pos:start="9:32" pos:end="9:65"><name pos:start="9:32" pos:end="9:44">SPAPR_MACHINE</name><argument_list pos:start="9:45" pos:end="9:65">(<argument pos:start="9:46" pos:end="9:64"><expr pos:start="9:46" pos:end="9:64"><call pos:start="9:46" pos:end="9:64"><name pos:start="9:46" pos:end="9:51">OBJECT</name><argument_list pos:start="9:52" pos:end="9:64">(<argument pos:start="9:53" pos:end="9:63"><expr pos:start="9:53" pos:end="9:63"><name pos:start="9:53" pos:end="9:63">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">sPAPRCPUCore</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">core</name> <init pos:start="11:24" pos:end="11:52">= <expr pos:start="11:26" pos:end="11:52"><call pos:start="11:26" pos:end="11:52"><name pos:start="11:26" pos:end="11:39">SPAPR_CPU_CORE</name><argument_list pos:start="11:40" pos:end="11:52">(<argument pos:start="11:41" pos:end="11:51"><expr pos:start="11:41" pos:end="11:51"><call pos:start="11:41" pos:end="11:51"><name pos:start="11:41" pos:end="11:46">OBJECT</name><argument_list pos:start="11:47" pos:end="11:51">(<argument pos:start="11:48" pos:end="11:50"><expr pos:start="11:48" pos:end="11:50"><name pos:start="11:48" pos:end="11:50">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">CPUCore</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:15">cc</name> <init pos:start="13:17" pos:end="13:31">= <expr pos:start="13:19" pos:end="13:31"><call pos:start="13:19" pos:end="13:31"><name pos:start="13:19" pos:end="13:26">CPU_CORE</name><argument_list pos:start="13:27" pos:end="13:31">(<argument pos:start="13:28" pos:end="13:30"><expr pos:start="13:28" pos:end="13:30"><name pos:start="13:28" pos:end="13:30">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:16">cs</name> <init pos:start="15:18" pos:end="15:37">= <expr pos:start="15:20" pos:end="15:37"><call pos:start="15:20" pos:end="15:37"><name pos:start="15:20" pos:end="15:22">CPU</name><argument_list pos:start="15:23" pos:end="15:37">(<argument pos:start="15:24" pos:end="15:36"><expr pos:start="15:24" pos:end="15:36"><name pos:start="15:24" pos:end="15:36"><name pos:start="15:24" pos:end="15:27">core</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:36">threads</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">sPAPRDRConnector</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:25">sPAPRDRConnectorClass</name> <modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:31">drck</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">fdt</name> <init pos:start="23:15" pos:end="23:20">= <expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">fdt_offset</name> <init pos:start="25:20" pos:end="25:22">= <expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:42"><decl pos:start="27:5" pos:end="27:41"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:13">index</name> <init pos:start="27:15" pos:end="27:41">= <expr pos:start="27:17" pos:end="27:41"><name pos:start="27:17" pos:end="27:27"><name pos:start="27:17" pos:end="27:18">cc</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:27">core_id</name></name> <operator pos:start="27:29" pos:end="27:29">/</operator> <name pos:start="27:31" pos:end="27:41">smp_threads</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:35"><decl pos:start="29:5" pos:end="29:34"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">smt</name> <init pos:start="29:13" pos:end="29:34">= <expr pos:start="29:15" pos:end="29:34"><call pos:start="29:15" pos:end="29:34"><name pos:start="29:15" pos:end="29:32">kvmppc_smt_threads</name><argument_list pos:start="29:33" pos:end="29:34">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><call pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:12">g_assert</name><argument_list pos:start="33:13" pos:end="33:33">(<argument pos:start="33:14" pos:end="33:32"><expr pos:start="33:14" pos:end="33:32"><name pos:start="33:14" pos:end="33:32"><name pos:start="33:14" pos:end="33:16">smc</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:32">dr_cpu_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:77"><expr pos:start="37:5" pos:end="37:76"><name pos:start="37:5" pos:end="37:7">drc</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:76"><name pos:start="37:11" pos:end="37:34">spapr_dr_connector_by_id</name><argument_list pos:start="37:35" pos:end="37:76">(<argument pos:start="37:36" pos:end="37:62"><expr pos:start="37:36" pos:end="37:62"><name pos:start="37:36" pos:end="37:62">SPAPR_DR_CONNECTOR_TYPE_CPU</name></expr></argument>, <argument pos:start="37:65" pos:end="37:75"><expr pos:start="37:65" pos:end="37:75"><name pos:start="37:65" pos:end="37:69">index</name> <operator pos:start="37:71" pos:end="37:71">*</operator> <name pos:start="37:73" pos:end="37:75">smt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:9">spapr</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:16">cores</name><index pos:start="39:17" pos:end="39:23">[<expr pos:start="39:18" pos:end="39:22"><name pos:start="39:18" pos:end="39:22">index</name></expr>]</index></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <call pos:start="39:27" pos:end="39:37"><name pos:start="39:27" pos:end="39:32">OBJECT</name><argument_list pos:start="39:33" pos:end="39:37">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:18"><expr pos:start="43:5" pos:end="43:17"><call pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:12">g_assert</name><argument_list pos:start="43:13" pos:end="43:17">(<argument pos:start="43:14" pos:end="43:16"><expr pos:start="43:14" pos:end="43:16"><name pos:start="43:14" pos:end="43:16">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="53:7">/*

     * Setup CPU DT entries only for hotplugged CPUs. For boot time or

     * coldplugged CPUs DT entries are setup in spapr_finalize_fdt().

     */</comment>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:24">(<expr pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:11">dev</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:23">hotplugged</name></name></expr>)</condition> <block pos:start="55:26" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:68">

        <expr_stmt pos:start="57:9" pos:end="57:68"><expr pos:start="57:9" pos:end="57:67"><name pos:start="57:9" pos:end="57:11">fdt</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:67"><name pos:start="57:15" pos:end="57:43">spapr_populate_hotplug_cpu_dt</name><argument_list pos:start="57:44" pos:end="57:67">(<argument pos:start="57:45" pos:end="57:46"><expr pos:start="57:45" pos:end="57:46"><name pos:start="57:45" pos:end="57:46">cs</name></expr></argument>, <argument pos:start="57:49" pos:end="57:59"><expr pos:start="57:49" pos:end="57:59"><operator pos:start="57:49" pos:end="57:49">&amp;</operator><name pos:start="57:50" pos:end="57:59">fdt_offset</name></expr></argument>, <argument pos:start="57:62" pos:end="57:66"><expr pos:start="57:62" pos:end="57:66"><name pos:start="57:62" pos:end="57:66">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:45"><expr pos:start="63:5" pos:end="63:44"><name pos:start="63:5" pos:end="63:8">drck</name> <operator pos:start="63:10" pos:end="63:10">=</operator> <call pos:start="63:12" pos:end="63:44"><name pos:start="63:12" pos:end="63:39">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="63:40" pos:end="63:44">(<argument pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><name pos:start="63:41" pos:end="63:43">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:74"><expr pos:start="65:5" pos:end="65:73"><call pos:start="65:5" pos:end="65:73"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:8">drck</name><operator pos:start="65:9" pos:end="65:10">-&gt;</operator><name pos:start="65:11" pos:end="65:16">attach</name></name><argument_list pos:start="65:17" pos:end="65:73">(<argument pos:start="65:18" pos:end="65:20"><expr pos:start="65:18" pos:end="65:20"><name pos:start="65:18" pos:end="65:20">drc</name></expr></argument>, <argument pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><name pos:start="65:23" pos:end="65:25">dev</name></expr></argument>, <argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">fdt</name></expr></argument>, <argument pos:start="65:33" pos:end="65:42"><expr pos:start="65:33" pos:end="65:42"><name pos:start="65:33" pos:end="65:42">fdt_offset</name></expr></argument>, <argument pos:start="65:45" pos:end="65:60"><expr pos:start="65:45" pos:end="65:60"><operator pos:start="65:45" pos:end="65:45">!</operator><name pos:start="65:46" pos:end="65:60"><name pos:start="65:46" pos:end="65:48">dev</name><operator pos:start="65:49" pos:end="65:50">-&gt;</operator><name pos:start="65:51" pos:end="65:60">hotplugged</name></name></expr></argument>, <argument pos:start="65:63" pos:end="65:72"><expr pos:start="65:63" pos:end="65:72"><operator pos:start="65:63" pos:end="65:63">&amp;</operator><name pos:start="65:64" pos:end="65:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="77:5"><if pos:start="67:5" pos:end="77:5">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:17">local_err</name></expr>)</condition> <block pos:start="67:20" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:15">

        <expr_stmt pos:start="69:9" pos:end="69:20"><expr pos:start="69:9" pos:end="69:19"><call pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:14">g_free</name><argument_list pos:start="69:15" pos:end="69:19">(<argument pos:start="69:16" pos:end="69:18"><expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:13">spapr</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:20">cores</name><index pos:start="71:21" pos:end="71:27">[<expr pos:start="71:22" pos:end="71:26"><name pos:start="71:22" pos:end="71:26">index</name></expr>]</index></name> <operator pos:start="71:29" pos:end="71:29">=</operator> <name pos:start="71:31" pos:end="71:34">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:41"><expr pos:start="73:9" pos:end="73:40"><call pos:start="73:9" pos:end="73:40"><name pos:start="73:9" pos:end="73:23">error_propagate</name><argument_list pos:start="73:24" pos:end="73:40">(<argument pos:start="73:25" pos:end="73:28"><expr pos:start="73:25" pos:end="73:28"><name pos:start="73:25" pos:end="73:28">errp</name></expr></argument>, <argument pos:start="73:31" pos:end="73:39"><expr pos:start="73:31" pos:end="73:39"><name pos:start="73:31" pos:end="73:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="105:5"><if pos:start="81:5" pos:end="93:5">if <condition pos:start="81:8" pos:end="81:24">(<expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:11">dev</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:23">hotplugged</name></name></expr>)</condition> <block pos:start="81:26" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:44">

        <comment type="block" pos:start="83:9" pos:end="89:11">/*

         * Send hotplug notification interrupt to the guest only in case

         * of hotplugged CPUs.

         */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:44"><expr pos:start="91:9" pos:end="91:43"><call pos:start="91:9" pos:end="91:43"><name pos:start="91:9" pos:end="91:38">spapr_hotplug_req_add_by_index</name><argument_list pos:start="91:39" pos:end="91:43">(<argument pos:start="91:40" pos:end="91:42"><expr pos:start="91:40" pos:end="91:42"><name pos:start="91:40" pos:end="91:42">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="105:5">else <block pos:start="93:12" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:76">

        <comment type="block" pos:start="95:9" pos:end="99:11">/*

         * Set the right DRC states for cold plugged CPU.

         */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:74"><expr pos:start="101:9" pos:end="101:73"><call pos:start="101:9" pos:end="101:73"><name pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:12">drck</name><operator pos:start="101:13" pos:end="101:14">-&gt;</operator><name pos:start="101:15" pos:end="101:34">set_allocation_state</name></name><argument_list pos:start="101:35" pos:end="101:73">(<argument pos:start="101:36" pos:end="101:38"><expr pos:start="101:36" pos:end="101:38"><name pos:start="101:36" pos:end="101:38">drc</name></expr></argument>, <argument pos:start="101:41" pos:end="101:72"><expr pos:start="101:41" pos:end="101:72"><name pos:start="101:41" pos:end="101:72">SPAPR_DR_ALLOCATION_STATE_USABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:76"><expr pos:start="103:9" pos:end="103:75"><call pos:start="103:9" pos:end="103:75"><name pos:start="103:9" pos:end="103:33"><name pos:start="103:9" pos:end="103:12">drck</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:33">set_isolation_state</name></name><argument_list pos:start="103:34" pos:end="103:75">(<argument pos:start="103:35" pos:end="103:37"><expr pos:start="103:35" pos:end="103:37"><name pos:start="103:35" pos:end="103:37">drc</name></expr></argument>, <argument pos:start="103:40" pos:end="103:74"><expr pos:start="103:40" pos:end="103:74"><name pos:start="103:40" pos:end="103:74">SPAPR_DR_ISOLATION_STATE_UNISOLATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
