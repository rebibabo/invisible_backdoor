<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9111.c" pos:tabs="8"><function pos:start="1:1" pos:end="821:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">wavpack_decode_block</name><parameter_list pos:start="1:32" pos:end="3:81">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:67">block_no</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:39">AVFrame</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:46">frame</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:66"><decl pos:start="3:49" pos:end="3:66"><type pos:start="3:49" pos:end="3:66"><specifier pos:start="3:49" pos:end="3:53">const</specifier> <name pos:start="3:55" pos:end="3:61">uint8_t</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:66">buf</name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:80"><decl pos:start="3:69" pos:end="3:80"><type pos:start="3:69" pos:end="3:80"><name pos:start="3:69" pos:end="3:71">int</name></type> <name pos:start="3:73" pos:end="3:80">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="821:1">{<block_content pos:start="7:5" pos:end="819:13">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">WavpackContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">wc</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">ThreadFrame</name></type> <name pos:start="9:17" pos:end="9:22">tframe</name> <init pos:start="9:24" pos:end="9:39">= <expr pos:start="9:26" pos:end="9:39"><block pos:start="9:26" pos:end="9:39">{ <expr pos:start="9:28" pos:end="9:37"><operator pos:start="9:28" pos:end="9:28">.</operator><name pos:start="9:29" pos:end="9:29">f</name> <operator pos:start="9:31" pos:end="9:31">=</operator> <name pos:start="9:33" pos:end="9:37">frame</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">WavpackFrameContext</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:26">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">GetByteContext</name></type> <name pos:start="13:20" pos:end="13:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:19">samples_l</name> <init pos:start="15:21" pos:end="15:26">= <expr pos:start="15:23" pos:end="15:26"><name pos:start="15:23" pos:end="15:26">NULL</name></expr></init></decl>, <decl pos:start="15:29" pos:end="15:45"><type ref="prev" pos:start="15:5" pos:end="15:10"><modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:38">samples_r</name> <init pos:start="15:40" pos:end="15:45">= <expr pos:start="15:42" pos:end="15:45"><name pos:start="15:42" pos:end="15:45">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="21:74"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">got_terms</name>   <init pos:start="19:21" pos:end="19:23">= <expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr></init></decl>, <decl pos:start="19:26" pos:end="19:40"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:26" pos:end="19:36">got_weights</name> <init pos:start="19:38" pos:end="19:40">= <expr pos:start="19:40" pos:end="19:40"><literal type="number" pos:start="19:40" pos:end="19:40">0</literal></expr></init></decl>, <decl pos:start="19:43" pos:end="19:57"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:43" pos:end="19:53">got_samples</name> <init pos:start="19:55" pos:end="19:57">= <expr pos:start="19:57" pos:end="19:57"><literal type="number" pos:start="19:57" pos:end="19:57">0</literal></expr></init></decl>,

        <decl pos:start="21:9" pos:end="21:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="21:9" pos:end="21:19">got_entropy</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>, <decl pos:start="21:26" pos:end="21:40"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="21:26" pos:end="21:31">got_bs</name>      <init pos:start="21:38" pos:end="21:40">= <expr pos:start="21:40" pos:end="21:40"><literal type="number" pos:start="21:40" pos:end="21:40">0</literal></expr></init></decl>, <decl pos:start="21:43" pos:end="21:57"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="21:43" pos:end="21:51">got_float</name>   <init pos:start="21:55" pos:end="21:57">= <expr pos:start="21:57" pos:end="21:57"><literal type="number" pos:start="21:57" pos:end="21:57">0</literal></expr></init></decl>, <decl pos:start="21:60" pos:end="21:73"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="21:60" pos:end="21:69">got_hybrid</name> <init pos:start="21:71" pos:end="21:73">= <expr pos:start="21:73" pos:end="21:73"><literal type="number" pos:start="21:73" pos:end="21:73">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:42"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>, <decl pos:start="23:12" pos:end="23:12"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:12">j</name></decl>, <decl pos:start="23:15" pos:end="23:16"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:15" pos:end="23:16">id</name></decl>, <decl pos:start="23:19" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:19" pos:end="23:22">size</name></decl>, <decl pos:start="23:25" pos:end="23:29"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:25" pos:end="23:29">ssize</name></decl>, <decl pos:start="23:32" pos:end="23:38"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:32" pos:end="23:38">weights</name></decl>, <decl pos:start="23:41" pos:end="23:41"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:41" pos:end="23:41">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:61"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">bpp</name></decl>, <decl pos:start="25:14" pos:end="25:21"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:14" pos:end="25:17">chan</name> <init pos:start="25:19" pos:end="25:21">= <expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr></init></decl>, <decl pos:start="25:24" pos:end="25:33"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:24" pos:end="25:29">chmask</name> <init pos:start="25:31" pos:end="25:33">= <expr pos:start="25:33" pos:end="25:33"><literal type="number" pos:start="25:33" pos:end="25:33">0</literal></expr></init></decl>, <decl pos:start="25:36" pos:end="25:43"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:36" pos:end="25:43">orig_bpp</name></decl>, <decl pos:start="25:46" pos:end="25:60"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:46" pos:end="25:56">sample_rate</name> <init pos:start="25:58" pos:end="25:60">= <expr pos:start="25:60" pos:end="25:60"><literal type="number" pos:start="25:60" pos:end="25:60">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">multiblock</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:67">(<expr pos:start="31:9" pos:end="31:66"><name pos:start="31:9" pos:end="31:16">block_no</name> <operator pos:start="31:18" pos:end="31:19">&gt;=</operator> <name pos:start="31:21" pos:end="31:32"><name pos:start="31:21" pos:end="31:22">wc</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:32">fdec_num</name></name> <operator pos:start="31:34" pos:end="31:35">&amp;&amp;</operator> <call pos:start="31:37" pos:end="31:62"><name pos:start="31:37" pos:end="31:58">wv_alloc_frame_context</name><argument_list pos:start="31:59" pos:end="31:62">(<argument pos:start="31:60" pos:end="31:61"><expr pos:start="31:60" pos:end="31:61"><name pos:start="31:60" pos:end="31:61">wc</name></expr></argument>)</argument_list></call> <operator pos:start="31:64" pos:end="31:64">&lt;</operator> <literal type="number" pos:start="31:66" pos:end="31:66">0</literal></expr>)</condition> <block pos:start="31:69" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:35">

        <expr_stmt pos:start="33:9" pos:end="33:77"><expr pos:start="33:9" pos:end="33:76"><call pos:start="33:9" pos:end="33:76"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:76">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:37" pos:end="33:75"><expr pos:start="33:37" pos:end="33:75"><literal type="string" pos:start="33:37" pos:end="33:75">"Error creating frame decode context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:27"><expr pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:5">s</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:10">wc</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:16">fdec</name><index pos:start="41:17" pos:end="41:26">[<expr pos:start="41:18" pos:end="41:25"><name pos:start="41:18" pos:end="41:25">block_no</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:11">(<expr pos:start="43:9" pos:end="43:10"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:10">s</name></expr>)</condition> <block pos:start="43:13" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:35">

        <expr_stmt pos:start="45:9" pos:end="47:25"><expr pos:start="45:9" pos:end="47:24"><call pos:start="45:9" pos:end="47:24"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="47:24">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:37" pos:end="45:75"><expr pos:start="45:37" pos:end="45:75"><literal type="string" pos:start="45:37" pos:end="45:75">"Context for block %d is not present\n"</literal></expr></argument>,

               <argument pos:start="47:16" pos:end="47:23"><expr pos:start="47:16" pos:end="47:23"><name pos:start="47:16" pos:end="47:23">block_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:35">return <expr pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:53"><expr pos:start="55:5" pos:end="55:52"><call pos:start="55:5" pos:end="55:52"><name pos:start="55:5" pos:end="55:10">memset</name><argument_list pos:start="55:11" pos:end="55:52">(<argument pos:start="55:12" pos:end="55:20"><expr pos:start="55:12" pos:end="55:20"><name pos:start="55:12" pos:end="55:20"><name pos:start="55:12" pos:end="55:12">s</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:20">decorr</name></name></expr></argument>, <argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr></argument>, <argument pos:start="55:26" pos:end="55:51"><expr pos:start="55:26" pos:end="55:51"><name pos:start="55:26" pos:end="55:34">MAX_TERMS</name> <operator pos:start="55:36" pos:end="55:36">*</operator> <sizeof pos:start="55:38" pos:end="55:51">sizeof<argument_list pos:start="55:44" pos:end="55:51">(<argument pos:start="55:45" pos:end="55:50"><expr pos:start="55:45" pos:end="55:50"><name pos:start="55:45" pos:end="55:50">Decorr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:36"><expr pos:start="57:5" pos:end="57:35"><call pos:start="57:5" pos:end="57:35"><name pos:start="57:5" pos:end="57:10">memset</name><argument_list pos:start="57:11" pos:end="57:35">(<argument pos:start="57:12" pos:end="57:16"><expr pos:start="57:12" pos:end="57:16"><name pos:start="57:12" pos:end="57:16"><name pos:start="57:12" pos:end="57:12">s</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:16">ch</name></name></expr></argument>, <argument pos:start="57:19" pos:end="57:19"><expr pos:start="57:19" pos:end="57:19"><literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr></argument>, <argument pos:start="57:22" pos:end="57:34"><expr pos:start="57:22" pos:end="57:34"><sizeof pos:start="57:22" pos:end="57:34">sizeof<argument_list pos:start="57:28" pos:end="57:34">(<argument pos:start="57:29" pos:end="57:33"><expr pos:start="57:29" pos:end="57:33"><name pos:start="57:29" pos:end="57:33"><name pos:start="57:29" pos:end="57:29">s</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:33">ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:17">extra_bits</name></name>     <operator pos:start="59:23" pos:end="59:23">=</operator> <literal type="number" pos:start="59:25" pos:end="59:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:10">and</name></name>            <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:29"><name pos:start="61:25" pos:end="61:25">s</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:29">or</name></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <name pos:start="61:33" pos:end="61:40"><name pos:start="61:33" pos:end="61:33">s</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:40">shift</name></name> <operator pos:start="61:42" pos:end="61:42">=</operator> <literal type="number" pos:start="61:44" pos:end="61:44">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:21">got_extra_bits</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <literal type="number" pos:start="63:25" pos:end="63:25">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:41"><expr pos:start="67:5" pos:end="67:40"><call pos:start="67:5" pos:end="67:40"><name pos:start="67:5" pos:end="67:20">bytestream2_init</name><argument_list pos:start="67:21" pos:end="67:40">(<argument pos:start="67:22" pos:end="67:24"><expr pos:start="67:22" pos:end="67:24"><operator pos:start="67:22" pos:end="67:22">&amp;</operator><name pos:start="67:23" pos:end="67:24">gb</name></expr></argument>, <argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:29">buf</name></expr></argument>, <argument pos:start="67:32" pos:end="67:39"><expr pos:start="67:32" pos:end="67:39"><name pos:start="67:32" pos:end="67:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:43"><expr pos:start="71:5" pos:end="71:42"><name pos:start="71:5" pos:end="71:14"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:14">samples</name></name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:42"><name pos:start="71:18" pos:end="71:37">bytestream2_get_le32</name><argument_list pos:start="71:38" pos:end="71:42">(<argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><operator pos:start="71:39" pos:end="71:39">&amp;</operator><name pos:start="71:40" pos:end="71:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:34">(<expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:18">samples</name></name> <operator pos:start="73:20" pos:end="73:21">!=</operator> <name pos:start="73:23" pos:end="73:33"><name pos:start="73:23" pos:end="73:24">wc</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:33">samples</name></name></expr>)</condition> <block pos:start="73:36" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:35">

        <expr_stmt pos:start="75:9" pos:end="77:67"><expr pos:start="75:9" pos:end="77:66"><call pos:start="75:9" pos:end="77:66"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="77:66">(<argument pos:start="75:16" pos:end="75:20"><expr pos:start="75:16" pos:end="75:20"><name pos:start="75:16" pos:end="75:20">avctx</name></expr></argument>, <argument pos:start="75:23" pos:end="75:34"><expr pos:start="75:23" pos:end="75:34"><name pos:start="75:23" pos:end="75:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:37" pos:end="77:40"><expr pos:start="75:37" pos:end="77:40"><literal type="string" pos:start="75:37" pos:end="75:71">"Mismatching number of samples in "</literal>

               <literal type="string" pos:start="77:16" pos:end="77:40">"a sequence: %d and %d\n"</literal></expr></argument>, <argument pos:start="77:43" pos:end="77:53"><expr pos:start="77:43" pos:end="77:53"><name pos:start="77:43" pos:end="77:53"><name pos:start="77:43" pos:end="77:44">wc</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:53">samples</name></name></expr></argument>, <argument pos:start="77:56" pos:end="77:65"><expr pos:start="77:56" pos:end="77:65"><name pos:start="77:56" pos:end="77:65"><name pos:start="77:56" pos:end="77:56">s</name><operator pos:start="77:57" pos:end="77:58">-&gt;</operator><name pos:start="77:59" pos:end="77:65">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:35">return <expr pos:start="79:16" pos:end="79:34"><name pos:start="79:16" pos:end="79:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:47"><expr pos:start="83:5" pos:end="83:46"><name pos:start="83:5" pos:end="83:18"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:18">frame_flags</name></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <call pos:start="83:22" pos:end="83:46"><name pos:start="83:22" pos:end="83:41">bytestream2_get_le32</name><argument_list pos:start="83:42" pos:end="83:46">(<argument pos:start="83:43" pos:end="83:45"><expr pos:start="83:43" pos:end="83:45"><operator pos:start="83:43" pos:end="83:43">&amp;</operator><name pos:start="83:44" pos:end="83:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:64"><expr pos:start="85:5" pos:end="85:63"><name pos:start="85:5" pos:end="85:7">bpp</name>            <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:63"><name pos:start="85:22" pos:end="85:44">av_get_bytes_per_sample</name><argument_list pos:start="85:45" pos:end="85:63">(<argument pos:start="85:46" pos:end="85:62"><expr pos:start="85:46" pos:end="85:62"><name pos:start="85:46" pos:end="85:62"><name pos:start="85:46" pos:end="85:50">avctx</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:62">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:56"><expr pos:start="87:5" pos:end="87:55"><name pos:start="87:5" pos:end="87:12">orig_bpp</name>       <operator pos:start="87:20" pos:end="87:20">=</operator> <operator pos:start="87:22" pos:end="87:22">(</operator><operator pos:start="87:23" pos:end="87:23">(</operator><name pos:start="87:24" pos:end="87:37"><name pos:start="87:24" pos:end="87:24">s</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:37">frame_flags</name></name> <operator pos:start="87:39" pos:end="87:39">&amp;</operator> <literal type="number" pos:start="87:41" pos:end="87:44">0x03</literal><operator pos:start="87:45" pos:end="87:45">)</operator> <operator pos:start="87:47" pos:end="87:47">+</operator> <literal type="number" pos:start="87:49" pos:end="87:49">1</literal><operator pos:start="87:50" pos:end="87:50">)</operator> <operator pos:start="87:52" pos:end="87:53">&lt;&lt;</operator> <literal type="number" pos:start="87:55" pos:end="87:55">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:75"><expr pos:start="89:5" pos:end="89:74"><name pos:start="89:5" pos:end="89:14">multiblock</name>     <operator pos:start="89:20" pos:end="89:20">=</operator> <operator pos:start="89:22" pos:end="89:22">(</operator><name pos:start="89:23" pos:end="89:36"><name pos:start="89:23" pos:end="89:23">s</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:36">frame_flags</name></name> <operator pos:start="89:38" pos:end="89:38">&amp;</operator> <name pos:start="89:40" pos:end="89:54">WV_SINGLE_BLOCK</name><operator pos:start="89:55" pos:end="89:55">)</operator> <operator pos:start="89:57" pos:end="89:58">!=</operator> <name pos:start="89:60" pos:end="89:74">WV_SINGLE_BLOCK</name></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:52"><expr pos:start="93:5" pos:end="93:51"><name pos:start="93:5" pos:end="93:13"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:13">stereo</name></name>         <operator pos:start="93:23" pos:end="93:23">=</operator> <operator pos:start="93:25" pos:end="93:25">!</operator><operator pos:start="93:26" pos:end="93:26">(</operator><name pos:start="93:27" pos:end="93:40"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:40">frame_flags</name></name> <operator pos:start="93:42" pos:end="93:42">&amp;</operator> <name pos:start="93:44" pos:end="93:50">WV_MONO</name><operator pos:start="93:51" pos:end="93:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:76"><expr pos:start="95:5" pos:end="95:75"><name pos:start="95:5" pos:end="95:16"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:16">stereo_in</name></name>      <operator pos:start="95:23" pos:end="95:23">=</operator>  <ternary pos:start="95:26" pos:end="95:75"><condition pos:start="95:26" pos:end="95:61"><expr pos:start="95:26" pos:end="95:59"><operator pos:start="95:26" pos:end="95:26">(</operator><name pos:start="95:27" pos:end="95:40"><name pos:start="95:27" pos:end="95:27">s</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:40">frame_flags</name></name> <operator pos:start="95:42" pos:end="95:42">&amp;</operator> <name pos:start="95:44" pos:end="95:58">WV_FALSE_STEREO</name><operator pos:start="95:59" pos:end="95:59">)</operator></expr> ?</condition><then pos:start="95:63" pos:end="95:63"> <expr pos:start="95:63" pos:end="95:63"><literal type="number" pos:start="95:63" pos:end="95:63">0</literal></expr> </then><else pos:start="95:65" pos:end="95:75">: <expr pos:start="95:67" pos:end="95:75"><name pos:start="95:67" pos:end="95:75"><name pos:start="95:67" pos:end="95:67">s</name><operator pos:start="95:68" pos:end="95:69">-&gt;</operator><name pos:start="95:70" pos:end="95:75">stereo</name></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:59"><expr pos:start="97:5" pos:end="97:58"><name pos:start="97:5" pos:end="97:12"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:12">joint</name></name>          <operator pos:start="97:23" pos:end="97:23">=</operator>   <name pos:start="97:27" pos:end="97:40"><name pos:start="97:27" pos:end="97:27">s</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:40">frame_flags</name></name> <operator pos:start="97:42" pos:end="97:42">&amp;</operator> <name pos:start="97:44" pos:end="97:58">WV_JOINT_STEREO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:58"><expr pos:start="99:5" pos:end="99:57"><name pos:start="99:5" pos:end="99:13"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:13">hybrid</name></name>         <operator pos:start="99:23" pos:end="99:23">=</operator>   <name pos:start="99:27" pos:end="99:40"><name pos:start="99:27" pos:end="99:27">s</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:40">frame_flags</name></name> <operator pos:start="99:42" pos:end="99:42">&amp;</operator> <name pos:start="99:44" pos:end="99:57">WV_HYBRID_MODE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:61"><expr pos:start="101:5" pos:end="101:60"><name pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:21">hybrid_bitrate</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator>   <name pos:start="101:27" pos:end="101:40"><name pos:start="101:27" pos:end="101:27">s</name><operator pos:start="101:28" pos:end="101:29">-&gt;</operator><name pos:start="101:30" pos:end="101:40">frame_flags</name></name> <operator pos:start="101:42" pos:end="101:42">&amp;</operator> <name pos:start="101:44" pos:end="101:60">WV_HYBRID_BITRATE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:77"><expr pos:start="103:5" pos:end="103:76"><name pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:17">post_shift</name></name>     <operator pos:start="103:23" pos:end="103:23">=</operator> <name pos:start="103:25" pos:end="103:27">bpp</name> <operator pos:start="103:29" pos:end="103:29">*</operator> <literal type="number" pos:start="103:31" pos:end="103:33">8</literal> <operator pos:start="103:33" pos:end="103:33">-</operator> <name pos:start="103:35" pos:end="103:42">orig_bpp</name> <operator pos:start="103:44" pos:end="103:44">+</operator> <operator pos:start="103:46" pos:end="103:46">(</operator><operator pos:start="103:47" pos:end="103:47">(</operator><name pos:start="103:48" pos:end="103:61"><name pos:start="103:48" pos:end="103:48">s</name><operator pos:start="103:49" pos:end="103:50">-&gt;</operator><name pos:start="103:51" pos:end="103:61">frame_flags</name></name> <operator pos:start="103:63" pos:end="103:64">&gt;&gt;</operator> <literal type="number" pos:start="103:66" pos:end="103:67">13</literal><operator pos:start="103:68" pos:end="103:68">)</operator> <operator pos:start="103:70" pos:end="103:70">&amp;</operator> <literal type="number" pos:start="103:72" pos:end="103:75">0x1f</literal><operator pos:start="103:76" pos:end="103:76">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:55"><expr pos:start="105:5" pos:end="105:54"><name pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:21">hybrid_maxclip</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator>  <operator pos:start="105:26" pos:end="105:26">(</operator><operator pos:start="105:27" pos:end="105:27">(</operator><literal type="number" pos:start="105:28" pos:end="105:30">1LL</literal> <operator pos:start="105:32" pos:end="105:33">&lt;&lt;</operator> <operator pos:start="105:35" pos:end="105:35">(</operator><name pos:start="105:36" pos:end="105:43">orig_bpp</name> <operator pos:start="105:45" pos:end="105:45">-</operator> <literal type="number" pos:start="105:47" pos:end="105:47">1</literal><operator pos:start="105:48" pos:end="105:48">)</operator><operator pos:start="105:49" pos:end="105:49">)</operator> <operator pos:start="105:51" pos:end="105:51">-</operator> <literal type="number" pos:start="105:53" pos:end="105:53">1</literal><operator pos:start="105:54" pos:end="105:54">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:51"><expr pos:start="107:5" pos:end="107:50"><name pos:start="107:5" pos:end="107:21"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:21">hybrid_minclip</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <operator pos:start="107:25" pos:end="107:25">(</operator><operator pos:start="107:26" pos:end="107:26">(</operator><operator pos:start="107:27" pos:end="107:27">-</operator><literal type="number" pos:start="107:28" pos:end="107:30">1LL</literal> <operator pos:start="107:32" pos:end="107:33">&lt;&lt;</operator> <operator pos:start="107:35" pos:end="107:35">(</operator><name pos:start="107:36" pos:end="107:43">orig_bpp</name> <operator pos:start="107:45" pos:end="107:45">-</operator> <literal type="number" pos:start="107:47" pos:end="107:47">1</literal><operator pos:start="107:48" pos:end="107:48">)</operator><operator pos:start="107:49" pos:end="107:49">)</operator><operator pos:start="107:50" pos:end="107:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:50"><expr pos:start="109:5" pos:end="109:49"><name pos:start="109:5" pos:end="109:10"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:10">CRC</name></name>            <operator pos:start="109:23" pos:end="109:23">=</operator> <call pos:start="109:25" pos:end="109:49"><name pos:start="109:25" pos:end="109:44">bytestream2_get_le32</name><argument_list pos:start="109:45" pos:end="109:49">(<argument pos:start="109:46" pos:end="109:48"><expr pos:start="109:46" pos:end="109:48"><operator pos:start="109:46" pos:end="109:46">&amp;</operator><name pos:start="109:47" pos:end="109:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="113:5" pos:end="113:28">// parse metadata blocks</comment>

    <while pos:start="115:5" pos:end="635:5">while <condition pos:start="115:11" pos:end="115:43">(<expr pos:start="115:12" pos:end="115:42"><call pos:start="115:12" pos:end="115:42"><name pos:start="115:12" pos:end="115:37">bytestream2_get_bytes_left</name><argument_list pos:start="115:38" pos:end="115:42">(<argument pos:start="115:39" pos:end="115:41"><expr pos:start="115:39" pos:end="115:41"><operator pos:start="115:39" pos:end="115:39">&amp;</operator><name pos:start="115:40" pos:end="115:41">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:45" pos:end="635:5">{<block_content pos:start="117:9" pos:end="633:37">

        <expr_stmt pos:start="117:9" pos:end="117:41"><expr pos:start="117:9" pos:end="117:40"><name pos:start="117:9" pos:end="117:10">id</name>   <operator pos:start="117:14" pos:end="117:14">=</operator> <call pos:start="117:16" pos:end="117:40"><name pos:start="117:16" pos:end="117:35">bytestream2_get_byte</name><argument_list pos:start="117:36" pos:end="117:40">(<argument pos:start="117:37" pos:end="117:39"><expr pos:start="117:37" pos:end="117:39"><operator pos:start="117:37" pos:end="117:37">&amp;</operator><name pos:start="117:38" pos:end="117:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:12">size</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:40"><name pos:start="119:16" pos:end="119:35">bytestream2_get_byte</name><argument_list pos:start="119:36" pos:end="119:40">(<argument pos:start="119:37" pos:end="119:39"><expr pos:start="119:37" pos:end="119:39"><operator pos:start="119:37" pos:end="119:37">&amp;</operator><name pos:start="119:38" pos:end="119:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:29">(<expr pos:start="121:13" pos:end="121:28"><name pos:start="121:13" pos:end="121:14">id</name> <operator pos:start="121:16" pos:end="121:16">&amp;</operator> <name pos:start="121:18" pos:end="121:28">WP_IDF_LONG</name></expr>)</condition> <block pos:start="121:31" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:54">

            <expr_stmt pos:start="123:13" pos:end="123:53"><expr pos:start="123:13" pos:end="123:52"><name pos:start="123:13" pos:end="123:16">size</name> <operator pos:start="123:18" pos:end="123:19">|=</operator> <operator pos:start="123:21" pos:end="123:21">(</operator><call pos:start="123:22" pos:end="123:46"><name pos:start="123:22" pos:end="123:41">bytestream2_get_byte</name><argument_list pos:start="123:42" pos:end="123:46">(<argument pos:start="123:43" pos:end="123:45"><expr pos:start="123:43" pos:end="123:45"><operator pos:start="123:43" pos:end="123:43">&amp;</operator><name pos:start="123:44" pos:end="123:45">gb</name></expr></argument>)</argument_list></call><operator pos:start="123:47" pos:end="123:47">)</operator> <operator pos:start="123:49" pos:end="123:50">&lt;&lt;</operator> <literal type="number" pos:start="123:52" pos:end="123:52">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:54"><expr pos:start="125:13" pos:end="125:53"><name pos:start="125:13" pos:end="125:16">size</name> <operator pos:start="125:18" pos:end="125:19">|=</operator> <operator pos:start="125:21" pos:end="125:21">(</operator><call pos:start="125:22" pos:end="125:46"><name pos:start="125:22" pos:end="125:41">bytestream2_get_byte</name><argument_list pos:start="125:42" pos:end="125:46">(<argument pos:start="125:43" pos:end="125:45"><expr pos:start="125:43" pos:end="125:45"><operator pos:start="125:43" pos:end="125:43">&amp;</operator><name pos:start="125:44" pos:end="125:45">gb</name></expr></argument>)</argument_list></call><operator pos:start="125:47" pos:end="125:47">)</operator> <operator pos:start="125:49" pos:end="125:50">&lt;&lt;</operator> <literal type="number" pos:start="125:52" pos:end="125:53">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:19"><expr pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:12">size</name> <operator pos:start="129:14" pos:end="129:16">&lt;&lt;=</operator> <literal type="number" pos:start="129:18" pos:end="129:18">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="129:21" pos:end="129:49">// size is specified in words</comment>

        <expr_stmt pos:start="131:9" pos:end="131:22"><expr pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:13">ssize</name>  <operator pos:start="131:16" pos:end="131:16">=</operator> <name pos:start="131:18" pos:end="131:21">size</name></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="135:19"><if pos:start="133:9" pos:end="135:19">if <condition pos:start="133:12" pos:end="133:28">(<expr pos:start="133:13" pos:end="133:27"><name pos:start="133:13" pos:end="133:14">id</name> <operator pos:start="133:16" pos:end="133:16">&amp;</operator> <name pos:start="133:18" pos:end="133:27">WP_IDF_ODD</name></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:19"><block_content pos:start="135:13" pos:end="135:19">

            <expr_stmt pos:start="135:13" pos:end="135:19"><expr pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:16">size</name><operator pos:start="135:17" pos:end="135:18">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="137:9" pos:end="145:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:21">(<expr pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:16">size</name> <operator pos:start="137:18" pos:end="137:18">&lt;</operator> <literal type="number" pos:start="137:20" pos:end="137:20">0</literal></expr>)</condition> <block pos:start="137:23" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:18">

            <expr_stmt pos:start="139:13" pos:end="141:72"><expr pos:start="139:13" pos:end="141:71"><call pos:start="139:13" pos:end="141:71"><name pos:start="139:13" pos:end="139:18">av_log</name><argument_list pos:start="139:19" pos:end="141:71">(<argument pos:start="139:20" pos:end="139:24"><expr pos:start="139:20" pos:end="139:24"><name pos:start="139:20" pos:end="139:24">avctx</name></expr></argument>, <argument pos:start="139:27" pos:end="139:38"><expr pos:start="139:27" pos:end="139:38"><name pos:start="139:27" pos:end="139:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="141:20" pos:end="141:60"><expr pos:start="141:20" pos:end="141:60"><literal type="string" pos:start="141:20" pos:end="141:60">"Got incorrect block %02X with size %i\n"</literal></expr></argument>, <argument pos:start="141:63" pos:end="141:64"><expr pos:start="141:63" pos:end="141:64"><name pos:start="141:63" pos:end="141:64">id</name></expr></argument>, <argument pos:start="141:67" pos:end="141:70"><expr pos:start="141:67" pos:end="141:70"><name pos:start="141:67" pos:end="141:70">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="147:9" pos:end="155:9"><if pos:start="147:9" pos:end="155:9">if <condition pos:start="147:12" pos:end="147:52">(<expr pos:start="147:13" pos:end="147:51"><call pos:start="147:13" pos:end="147:43"><name pos:start="147:13" pos:end="147:38">bytestream2_get_bytes_left</name><argument_list pos:start="147:39" pos:end="147:43">(<argument pos:start="147:40" pos:end="147:42"><expr pos:start="147:40" pos:end="147:42"><operator pos:start="147:40" pos:end="147:40">&amp;</operator><name pos:start="147:41" pos:end="147:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="147:45" pos:end="147:45">&lt;</operator> <name pos:start="147:47" pos:end="147:51">ssize</name></expr>)</condition> <block pos:start="147:54" pos:end="155:9">{<block_content pos:start="149:13" pos:end="153:18">

            <expr_stmt pos:start="149:13" pos:end="151:61"><expr pos:start="149:13" pos:end="151:60"><call pos:start="149:13" pos:end="151:60"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="151:60">(<argument pos:start="149:20" pos:end="149:24"><expr pos:start="149:20" pos:end="149:24"><name pos:start="149:20" pos:end="149:24">avctx</name></expr></argument>, <argument pos:start="149:27" pos:end="149:38"><expr pos:start="149:27" pos:end="149:38"><name pos:start="149:27" pos:end="149:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="151:20" pos:end="151:53"><expr pos:start="151:20" pos:end="151:53"><literal type="string" pos:start="151:20" pos:end="151:53">"Block size %i is out of bounds\n"</literal></expr></argument>, <argument pos:start="151:56" pos:end="151:59"><expr pos:start="151:56" pos:end="151:59"><name pos:start="151:56" pos:end="151:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="157:9" pos:end="629:9">switch <condition pos:start="157:16" pos:end="157:33">(<expr pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:18">id</name> <operator pos:start="157:20" pos:end="157:20">&amp;</operator> <name pos:start="157:22" pos:end="157:32">WP_IDF_MASK</name></expr>)</condition> <block pos:start="157:35" pos:end="629:9">{<block_content pos:start="159:9" pos:end="627:40">

        <case pos:start="159:9" pos:end="159:28">case <expr pos:start="159:14" pos:end="159:27"><name pos:start="159:14" pos:end="159:27">WP_ID_DECTERMS</name></expr>:</case>

            <if_stmt pos:start="161:13" pos:end="171:13"><if pos:start="161:13" pos:end="171:13">if <condition pos:start="161:16" pos:end="161:33">(<expr pos:start="161:17" pos:end="161:32"><name pos:start="161:17" pos:end="161:20">size</name> <operator pos:start="161:22" pos:end="161:22">&gt;</operator> <name pos:start="161:24" pos:end="161:32">MAX_TERMS</name></expr>)</condition> <block pos:start="161:35" pos:end="171:13">{<block_content pos:start="163:17" pos:end="169:25">

                <expr_stmt pos:start="163:17" pos:end="163:78"><expr pos:start="163:17" pos:end="163:77"><call pos:start="163:17" pos:end="163:77"><name pos:start="163:17" pos:end="163:22">av_log</name><argument_list pos:start="163:23" pos:end="163:77">(<argument pos:start="163:24" pos:end="163:28"><expr pos:start="163:24" pos:end="163:28"><name pos:start="163:24" pos:end="163:28">avctx</name></expr></argument>, <argument pos:start="163:31" pos:end="163:42"><expr pos:start="163:31" pos:end="163:42"><name pos:start="163:31" pos:end="163:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:45" pos:end="163:76"><expr pos:start="163:45" pos:end="163:76"><literal type="string" pos:start="163:45" pos:end="163:76">"Too many decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:29"><expr pos:start="165:17" pos:end="165:28"><name pos:start="165:17" pos:end="165:24"><name pos:start="165:17" pos:end="165:17">s</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:24">terms</name></name> <operator pos:start="165:26" pos:end="165:26">=</operator> <literal type="number" pos:start="165:28" pos:end="165:28">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:45"><expr pos:start="167:17" pos:end="167:44"><call pos:start="167:17" pos:end="167:44"><name pos:start="167:17" pos:end="167:32">bytestream2_skip</name><argument_list pos:start="167:33" pos:end="167:44">(<argument pos:start="167:34" pos:end="167:36"><expr pos:start="167:34" pos:end="167:36"><operator pos:start="167:34" pos:end="167:34">&amp;</operator><name pos:start="167:35" pos:end="167:36">gb</name></expr></argument>, <argument pos:start="167:39" pos:end="167:43"><expr pos:start="167:39" pos:end="167:43"><name pos:start="167:39" pos:end="167:43">ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="169:17" pos:end="169:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:28"><expr pos:start="173:13" pos:end="173:27"><name pos:start="173:13" pos:end="173:20"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:20">terms</name></name> <operator pos:start="173:22" pos:end="173:22">=</operator> <name pos:start="173:24" pos:end="173:27">size</name></expr>;</expr_stmt>

            <for pos:start="175:13" pos:end="183:13">for <control pos:start="175:17" pos:end="175:42">(<init pos:start="175:18" pos:end="175:23"><expr pos:start="175:18" pos:end="175:22"><name pos:start="175:18" pos:end="175:18">i</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <literal type="number" pos:start="175:22" pos:end="175:22">0</literal></expr>;</init> <condition pos:start="175:25" pos:end="175:37"><expr pos:start="175:25" pos:end="175:36"><name pos:start="175:25" pos:end="175:25">i</name> <operator pos:start="175:27" pos:end="175:27">&lt;</operator> <name pos:start="175:29" pos:end="175:36"><name pos:start="175:29" pos:end="175:29">s</name><operator pos:start="175:30" pos:end="175:31">-&gt;</operator><name pos:start="175:32" pos:end="175:36">terms</name></name></expr>;</condition> <incr pos:start="175:39" pos:end="175:41"><expr pos:start="175:39" pos:end="175:41"><name pos:start="175:39" pos:end="175:39">i</name><operator pos:start="175:40" pos:end="175:41">++</operator></expr></incr>)</control> <block pos:start="175:44" pos:end="183:13">{<block_content pos:start="177:17" pos:end="181:62">

                <decl_stmt pos:start="177:17" pos:end="177:56"><decl pos:start="177:17" pos:end="177:55"><type pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:23">uint8_t</name></type> <name pos:start="177:25" pos:end="177:27">val</name> <init pos:start="177:29" pos:end="177:55">= <expr pos:start="177:31" pos:end="177:55"><call pos:start="177:31" pos:end="177:55"><name pos:start="177:31" pos:end="177:50">bytestream2_get_byte</name><argument_list pos:start="177:51" pos:end="177:55">(<argument pos:start="177:52" pos:end="177:54"><expr pos:start="177:52" pos:end="177:54"><operator pos:start="177:52" pos:end="177:52">&amp;</operator><name pos:start="177:53" pos:end="177:54">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:69"><expr pos:start="179:17" pos:end="179:68"><name pos:start="179:17" pos:end="179:43"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:25">decorr</name><index pos:start="179:26" pos:end="179:43">[<expr pos:start="179:27" pos:end="179:42"><name pos:start="179:27" pos:end="179:34"><name pos:start="179:27" pos:end="179:27">s</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:34">terms</name></name> <operator pos:start="179:36" pos:end="179:36">-</operator> <name pos:start="179:38" pos:end="179:38">i</name> <operator pos:start="179:40" pos:end="179:40">-</operator> <literal type="number" pos:start="179:42" pos:end="179:42">1</literal></expr>]</index></name><operator pos:start="179:44" pos:end="179:44">.</operator><name pos:start="179:45" pos:end="179:49">value</name> <operator pos:start="179:51" pos:end="179:51">=</operator> <operator pos:start="179:53" pos:end="179:53">(</operator><name pos:start="179:54" pos:end="179:56">val</name> <operator pos:start="179:58" pos:end="179:58">&amp;</operator> <literal type="number" pos:start="179:60" pos:end="179:63">0x1F</literal><operator pos:start="179:64" pos:end="179:64">)</operator> <operator pos:start="179:66" pos:end="179:66">-</operator> <literal type="number" pos:start="179:68" pos:end="179:68">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:62"><expr pos:start="181:17" pos:end="181:61"><name pos:start="181:17" pos:end="181:43"><name pos:start="181:17" pos:end="181:17">s</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:25">decorr</name><index pos:start="181:26" pos:end="181:43">[<expr pos:start="181:27" pos:end="181:42"><name pos:start="181:27" pos:end="181:34"><name pos:start="181:27" pos:end="181:27">s</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:34">terms</name></name> <operator pos:start="181:36" pos:end="181:36">-</operator> <name pos:start="181:38" pos:end="181:38">i</name> <operator pos:start="181:40" pos:end="181:40">-</operator> <literal type="number" pos:start="181:42" pos:end="181:42">1</literal></expr>]</index></name><operator pos:start="181:44" pos:end="181:44">.</operator><name pos:start="181:45" pos:end="181:49">delta</name> <operator pos:start="181:51" pos:end="181:51">=</operator>  <name pos:start="181:54" pos:end="181:56">val</name> <operator pos:start="181:58" pos:end="181:59">&gt;&gt;</operator> <literal type="number" pos:start="181:61" pos:end="181:61">5</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="185:13" pos:end="185:26"><expr pos:start="185:13" pos:end="185:25"><name pos:start="185:13" pos:end="185:21">got_terms</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <literal type="number" pos:start="185:25" pos:end="185:25">1</literal></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <case pos:start="189:9" pos:end="189:30">case <expr pos:start="189:14" pos:end="189:29"><name pos:start="189:14" pos:end="189:29">WP_ID_DECWEIGHTS</name></expr>:</case>

            <if_stmt pos:start="191:13" pos:end="197:13"><if pos:start="191:13" pos:end="197:13">if <condition pos:start="191:16" pos:end="191:27">(<expr pos:start="191:17" pos:end="191:26"><operator pos:start="191:17" pos:end="191:17">!</operator><name pos:start="191:18" pos:end="191:26">got_terms</name></expr>)</condition> <block pos:start="191:29" pos:end="197:13">{<block_content pos:start="193:17" pos:end="195:25">

                <expr_stmt pos:start="193:17" pos:end="193:76"><expr pos:start="193:17" pos:end="193:75"><call pos:start="193:17" pos:end="193:75"><name pos:start="193:17" pos:end="193:22">av_log</name><argument_list pos:start="193:23" pos:end="193:75">(<argument pos:start="193:24" pos:end="193:28"><expr pos:start="193:24" pos:end="193:28"><name pos:start="193:24" pos:end="193:28">avctx</name></expr></argument>, <argument pos:start="193:31" pos:end="193:42"><expr pos:start="193:31" pos:end="193:42"><name pos:start="193:31" pos:end="193:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:45" pos:end="193:74"><expr pos:start="193:45" pos:end="193:74"><literal type="string" pos:start="193:45" pos:end="193:74">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="195:17" pos:end="195:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:43"><expr pos:start="199:13" pos:end="199:42"><name pos:start="199:13" pos:end="199:19">weights</name> <operator pos:start="199:21" pos:end="199:21">=</operator> <name pos:start="199:23" pos:end="199:26">size</name> <operator pos:start="199:28" pos:end="199:29">&gt;&gt;</operator> <name pos:start="199:31" pos:end="199:42"><name pos:start="199:31" pos:end="199:31">s</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:42">stereo_in</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="201:13" pos:end="209:13"><if pos:start="201:13" pos:end="209:13">if <condition pos:start="201:16" pos:end="201:58">(<expr pos:start="201:17" pos:end="201:57"><name pos:start="201:17" pos:end="201:23">weights</name> <operator pos:start="201:25" pos:end="201:25">&gt;</operator> <name pos:start="201:27" pos:end="201:35">MAX_TERMS</name> <operator pos:start="201:37" pos:end="201:38">||</operator> <name pos:start="201:40" pos:end="201:46">weights</name> <operator pos:start="201:48" pos:end="201:48">&gt;</operator> <name pos:start="201:50" pos:end="201:57"><name pos:start="201:50" pos:end="201:50">s</name><operator pos:start="201:51" pos:end="201:52">-&gt;</operator><name pos:start="201:53" pos:end="201:57">terms</name></name></expr>)</condition> <block pos:start="201:60" pos:end="209:13">{<block_content pos:start="203:17" pos:end="207:25">

                <expr_stmt pos:start="203:17" pos:end="203:80"><expr pos:start="203:17" pos:end="203:79"><call pos:start="203:17" pos:end="203:79"><name pos:start="203:17" pos:end="203:22">av_log</name><argument_list pos:start="203:23" pos:end="203:79">(<argument pos:start="203:24" pos:end="203:28"><expr pos:start="203:24" pos:end="203:28"><name pos:start="203:24" pos:end="203:28">avctx</name></expr></argument>, <argument pos:start="203:31" pos:end="203:42"><expr pos:start="203:31" pos:end="203:42"><name pos:start="203:31" pos:end="203:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="203:45" pos:end="203:78"><expr pos:start="203:45" pos:end="203:78"><literal type="string" pos:start="203:45" pos:end="203:78">"Too many decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:45"><expr pos:start="205:17" pos:end="205:44"><call pos:start="205:17" pos:end="205:44"><name pos:start="205:17" pos:end="205:32">bytestream2_skip</name><argument_list pos:start="205:33" pos:end="205:44">(<argument pos:start="205:34" pos:end="205:36"><expr pos:start="205:34" pos:end="205:36"><operator pos:start="205:34" pos:end="205:34">&amp;</operator><name pos:start="205:35" pos:end="205:36">gb</name></expr></argument>, <argument pos:start="205:39" pos:end="205:43"><expr pos:start="205:39" pos:end="205:43"><name pos:start="205:39" pos:end="205:43">ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="207:17" pos:end="207:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <for pos:start="211:13" pos:end="237:13">for <control pos:start="211:17" pos:end="211:41">(<init pos:start="211:18" pos:end="211:23"><expr pos:start="211:18" pos:end="211:22"><name pos:start="211:18" pos:end="211:18">i</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <literal type="number" pos:start="211:22" pos:end="211:22">0</literal></expr>;</init> <condition pos:start="211:25" pos:end="211:36"><expr pos:start="211:25" pos:end="211:35"><name pos:start="211:25" pos:end="211:25">i</name> <operator pos:start="211:27" pos:end="211:27">&lt;</operator> <name pos:start="211:29" pos:end="211:35">weights</name></expr>;</condition> <incr pos:start="211:38" pos:end="211:40"><expr pos:start="211:38" pos:end="211:40"><name pos:start="211:38" pos:end="211:38">i</name><operator pos:start="211:39" pos:end="211:40">++</operator></expr></incr>)</control> <block pos:start="211:43" pos:end="237:13">{<block_content pos:start="213:17" pos:end="235:17">

                <expr_stmt pos:start="213:17" pos:end="213:54"><expr pos:start="213:17" pos:end="213:53"><name pos:start="213:17" pos:end="213:17">t</name> <operator pos:start="213:19" pos:end="213:19">=</operator> <operator pos:start="213:21" pos:end="213:21">(</operator><name pos:start="213:22" pos:end="213:27">int8_t</name><operator pos:start="213:28" pos:end="213:28">)</operator><call pos:start="213:29" pos:end="213:53"><name pos:start="213:29" pos:end="213:48">bytestream2_get_byte</name><argument_list pos:start="213:49" pos:end="213:53">(<argument pos:start="213:50" pos:end="213:52"><expr pos:start="213:50" pos:end="213:52"><operator pos:start="213:50" pos:end="213:50">&amp;</operator><name pos:start="213:51" pos:end="213:52">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:61"><expr pos:start="215:17" pos:end="215:60"><name pos:start="215:17" pos:end="215:43"><name pos:start="215:17" pos:end="215:17">s</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:25">decorr</name><index pos:start="215:26" pos:end="215:43">[<expr pos:start="215:27" pos:end="215:42"><name pos:start="215:27" pos:end="215:34"><name pos:start="215:27" pos:end="215:27">s</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:34">terms</name></name> <operator pos:start="215:36" pos:end="215:36">-</operator> <name pos:start="215:38" pos:end="215:38">i</name> <operator pos:start="215:40" pos:end="215:40">-</operator> <literal type="number" pos:start="215:42" pos:end="215:42">1</literal></expr>]</index></name><operator pos:start="215:44" pos:end="215:44">.</operator><name pos:start="215:45" pos:end="215:51">weightA</name> <operator pos:start="215:53" pos:end="215:53">=</operator> <name pos:start="215:55" pos:end="215:55">t</name> <operator pos:start="215:57" pos:end="215:58">&lt;&lt;</operator> <literal type="number" pos:start="215:60" pos:end="215:60">3</literal></expr>;</expr_stmt>

                <if_stmt pos:start="217:17" pos:end="221:72"><if pos:start="217:17" pos:end="221:72">if <condition pos:start="217:20" pos:end="217:60">(<expr pos:start="217:21" pos:end="217:59"><name pos:start="217:21" pos:end="217:47"><name pos:start="217:21" pos:end="217:21">s</name><operator pos:start="217:22" pos:end="217:23">-&gt;</operator><name pos:start="217:24" pos:end="217:29">decorr</name><index pos:start="217:30" pos:end="217:47">[<expr pos:start="217:31" pos:end="217:46"><name pos:start="217:31" pos:end="217:38"><name pos:start="217:31" pos:end="217:31">s</name><operator pos:start="217:32" pos:end="217:33">-&gt;</operator><name pos:start="217:34" pos:end="217:38">terms</name></name> <operator pos:start="217:40" pos:end="217:40">-</operator> <name pos:start="217:42" pos:end="217:42">i</name> <operator pos:start="217:44" pos:end="217:44">-</operator> <literal type="number" pos:start="217:46" pos:end="217:46">1</literal></expr>]</index></name><operator pos:start="217:48" pos:end="217:48">.</operator><name pos:start="217:49" pos:end="217:55">weightA</name> <operator pos:start="217:57" pos:end="217:57">&gt;</operator> <literal type="number" pos:start="217:59" pos:end="217:59">0</literal></expr>)</condition><block type="pseudo" pos:start="219:21" pos:end="221:72"><block_content pos:start="219:21" pos:end="221:72">

                    <expr_stmt pos:start="219:21" pos:end="221:72"><expr pos:start="219:21" pos:end="221:71"><name pos:start="219:21" pos:end="219:47"><name pos:start="219:21" pos:end="219:21">s</name><operator pos:start="219:22" pos:end="219:23">-&gt;</operator><name pos:start="219:24" pos:end="219:29">decorr</name><index pos:start="219:30" pos:end="219:47">[<expr pos:start="219:31" pos:end="219:46"><name pos:start="219:31" pos:end="219:38"><name pos:start="219:31" pos:end="219:31">s</name><operator pos:start="219:32" pos:end="219:33">-&gt;</operator><name pos:start="219:34" pos:end="219:38">terms</name></name> <operator pos:start="219:40" pos:end="219:40">-</operator> <name pos:start="219:42" pos:end="219:42">i</name> <operator pos:start="219:44" pos:end="219:44">-</operator> <literal type="number" pos:start="219:46" pos:end="219:46">1</literal></expr>]</index></name><operator pos:start="219:48" pos:end="219:48">.</operator><name pos:start="219:49" pos:end="219:55">weightA</name> <operator pos:start="219:57" pos:end="219:58">+=</operator>

                        <operator pos:start="221:25" pos:end="221:25">(</operator><name pos:start="221:26" pos:end="221:52"><name pos:start="221:26" pos:end="221:26">s</name><operator pos:start="221:27" pos:end="221:28">-&gt;</operator><name pos:start="221:29" pos:end="221:34">decorr</name><index pos:start="221:35" pos:end="221:52">[<expr pos:start="221:36" pos:end="221:51"><name pos:start="221:36" pos:end="221:43"><name pos:start="221:36" pos:end="221:36">s</name><operator pos:start="221:37" pos:end="221:38">-&gt;</operator><name pos:start="221:39" pos:end="221:43">terms</name></name> <operator pos:start="221:45" pos:end="221:45">-</operator> <name pos:start="221:47" pos:end="221:47">i</name> <operator pos:start="221:49" pos:end="221:49">-</operator> <literal type="number" pos:start="221:51" pos:end="221:51">1</literal></expr>]</index></name><operator pos:start="221:53" pos:end="221:53">.</operator><name pos:start="221:54" pos:end="221:60">weightA</name> <operator pos:start="221:62" pos:end="221:62">+</operator> <literal type="number" pos:start="221:64" pos:end="221:65">64</literal><operator pos:start="221:66" pos:end="221:66">)</operator> <operator pos:start="221:68" pos:end="221:69">&gt;&gt;</operator> <literal type="number" pos:start="221:71" pos:end="221:71">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="223:17" pos:end="235:17"><if pos:start="223:17" pos:end="235:17">if <condition pos:start="223:20" pos:end="223:33">(<expr pos:start="223:21" pos:end="223:32"><name pos:start="223:21" pos:end="223:32"><name pos:start="223:21" pos:end="223:21">s</name><operator pos:start="223:22" pos:end="223:23">-&gt;</operator><name pos:start="223:24" pos:end="223:32">stereo_in</name></name></expr>)</condition> <block pos:start="223:35" pos:end="235:17">{<block_content pos:start="225:21" pos:end="233:76">

                    <expr_stmt pos:start="225:21" pos:end="225:58"><expr pos:start="225:21" pos:end="225:57"><name pos:start="225:21" pos:end="225:21">t</name> <operator pos:start="225:23" pos:end="225:23">=</operator> <operator pos:start="225:25" pos:end="225:25">(</operator><name pos:start="225:26" pos:end="225:31">int8_t</name><operator pos:start="225:32" pos:end="225:32">)</operator><call pos:start="225:33" pos:end="225:57"><name pos:start="225:33" pos:end="225:52">bytestream2_get_byte</name><argument_list pos:start="225:53" pos:end="225:57">(<argument pos:start="225:54" pos:end="225:56"><expr pos:start="225:54" pos:end="225:56"><operator pos:start="225:54" pos:end="225:54">&amp;</operator><name pos:start="225:55" pos:end="225:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:65"><expr pos:start="227:21" pos:end="227:64"><name pos:start="227:21" pos:end="227:47"><name pos:start="227:21" pos:end="227:21">s</name><operator pos:start="227:22" pos:end="227:23">-&gt;</operator><name pos:start="227:24" pos:end="227:29">decorr</name><index pos:start="227:30" pos:end="227:47">[<expr pos:start="227:31" pos:end="227:46"><name pos:start="227:31" pos:end="227:38"><name pos:start="227:31" pos:end="227:31">s</name><operator pos:start="227:32" pos:end="227:33">-&gt;</operator><name pos:start="227:34" pos:end="227:38">terms</name></name> <operator pos:start="227:40" pos:end="227:40">-</operator> <name pos:start="227:42" pos:end="227:42">i</name> <operator pos:start="227:44" pos:end="227:44">-</operator> <literal type="number" pos:start="227:46" pos:end="227:46">1</literal></expr>]</index></name><operator pos:start="227:48" pos:end="227:48">.</operator><name pos:start="227:49" pos:end="227:55">weightB</name> <operator pos:start="227:57" pos:end="227:57">=</operator> <name pos:start="227:59" pos:end="227:59">t</name> <operator pos:start="227:61" pos:end="227:62">&lt;&lt;</operator> <literal type="number" pos:start="227:64" pos:end="227:64">3</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="229:21" pos:end="233:76"><if pos:start="229:21" pos:end="233:76">if <condition pos:start="229:24" pos:end="229:64">(<expr pos:start="229:25" pos:end="229:63"><name pos:start="229:25" pos:end="229:51"><name pos:start="229:25" pos:end="229:25">s</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:33">decorr</name><index pos:start="229:34" pos:end="229:51">[<expr pos:start="229:35" pos:end="229:50"><name pos:start="229:35" pos:end="229:42"><name pos:start="229:35" pos:end="229:35">s</name><operator pos:start="229:36" pos:end="229:37">-&gt;</operator><name pos:start="229:38" pos:end="229:42">terms</name></name> <operator pos:start="229:44" pos:end="229:44">-</operator> <name pos:start="229:46" pos:end="229:46">i</name> <operator pos:start="229:48" pos:end="229:48">-</operator> <literal type="number" pos:start="229:50" pos:end="229:50">1</literal></expr>]</index></name><operator pos:start="229:52" pos:end="229:52">.</operator><name pos:start="229:53" pos:end="229:59">weightB</name> <operator pos:start="229:61" pos:end="229:61">&gt;</operator> <literal type="number" pos:start="229:63" pos:end="229:63">0</literal></expr>)</condition><block type="pseudo" pos:start="231:25" pos:end="233:76"><block_content pos:start="231:25" pos:end="233:76">

                        <expr_stmt pos:start="231:25" pos:end="233:76"><expr pos:start="231:25" pos:end="233:75"><name pos:start="231:25" pos:end="231:51"><name pos:start="231:25" pos:end="231:25">s</name><operator pos:start="231:26" pos:end="231:27">-&gt;</operator><name pos:start="231:28" pos:end="231:33">decorr</name><index pos:start="231:34" pos:end="231:51">[<expr pos:start="231:35" pos:end="231:50"><name pos:start="231:35" pos:end="231:42"><name pos:start="231:35" pos:end="231:35">s</name><operator pos:start="231:36" pos:end="231:37">-&gt;</operator><name pos:start="231:38" pos:end="231:42">terms</name></name> <operator pos:start="231:44" pos:end="231:44">-</operator> <name pos:start="231:46" pos:end="231:46">i</name> <operator pos:start="231:48" pos:end="231:48">-</operator> <literal type="number" pos:start="231:50" pos:end="231:50">1</literal></expr>]</index></name><operator pos:start="231:52" pos:end="231:52">.</operator><name pos:start="231:53" pos:end="231:59">weightB</name> <operator pos:start="231:61" pos:end="231:62">+=</operator>

                            <operator pos:start="233:29" pos:end="233:29">(</operator><name pos:start="233:30" pos:end="233:56"><name pos:start="233:30" pos:end="233:30">s</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:38">decorr</name><index pos:start="233:39" pos:end="233:56">[<expr pos:start="233:40" pos:end="233:55"><name pos:start="233:40" pos:end="233:47"><name pos:start="233:40" pos:end="233:40">s</name><operator pos:start="233:41" pos:end="233:42">-&gt;</operator><name pos:start="233:43" pos:end="233:47">terms</name></name> <operator pos:start="233:49" pos:end="233:49">-</operator> <name pos:start="233:51" pos:end="233:51">i</name> <operator pos:start="233:53" pos:end="233:53">-</operator> <literal type="number" pos:start="233:55" pos:end="233:55">1</literal></expr>]</index></name><operator pos:start="233:57" pos:end="233:57">.</operator><name pos:start="233:58" pos:end="233:64">weightB</name> <operator pos:start="233:66" pos:end="233:66">+</operator> <literal type="number" pos:start="233:68" pos:end="233:69">64</literal><operator pos:start="233:70" pos:end="233:70">)</operator> <operator pos:start="233:72" pos:end="233:73">&gt;&gt;</operator> <literal type="number" pos:start="233:75" pos:end="233:75">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="239:13" pos:end="239:28"><expr pos:start="239:13" pos:end="239:27"><name pos:start="239:13" pos:end="239:23">got_weights</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <literal type="number" pos:start="239:27" pos:end="239:27">1</literal></expr>;</expr_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>

        <case pos:start="243:9" pos:end="243:30">case <expr pos:start="243:14" pos:end="243:29"><name pos:start="243:14" pos:end="243:29">WP_ID_DECSAMPLES</name></expr>:</case>

            <if_stmt pos:start="245:13" pos:end="251:13"><if pos:start="245:13" pos:end="251:13">if <condition pos:start="245:16" pos:end="245:27">(<expr pos:start="245:17" pos:end="245:26"><operator pos:start="245:17" pos:end="245:17">!</operator><name pos:start="245:18" pos:end="245:26">got_terms</name></expr>)</condition> <block pos:start="245:29" pos:end="251:13">{<block_content pos:start="247:17" pos:end="249:25">

                <expr_stmt pos:start="247:17" pos:end="247:76"><expr pos:start="247:17" pos:end="247:75"><call pos:start="247:17" pos:end="247:75"><name pos:start="247:17" pos:end="247:22">av_log</name><argument_list pos:start="247:23" pos:end="247:75">(<argument pos:start="247:24" pos:end="247:28"><expr pos:start="247:24" pos:end="247:28"><name pos:start="247:24" pos:end="247:28">avctx</name></expr></argument>, <argument pos:start="247:31" pos:end="247:42"><expr pos:start="247:31" pos:end="247:42"><name pos:start="247:31" pos:end="247:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="247:45" pos:end="247:74"><expr pos:start="247:45" pos:end="247:74"><literal type="string" pos:start="247:45" pos:end="247:74">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="249:17" pos:end="249:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:18"><expr pos:start="253:13" pos:end="253:17"><name pos:start="253:13" pos:end="253:13">t</name> <operator pos:start="253:15" pos:end="253:15">=</operator> <literal type="number" pos:start="253:17" pos:end="253:17">0</literal></expr>;</expr_stmt>

            <for pos:start="255:13" pos:end="319:13">for <control pos:start="255:17" pos:end="255:63">(<init pos:start="255:18" pos:end="255:34"><expr pos:start="255:18" pos:end="255:33"><name pos:start="255:18" pos:end="255:18">i</name> <operator pos:start="255:20" pos:end="255:20">=</operator> <name pos:start="255:22" pos:end="255:29"><name pos:start="255:22" pos:end="255:22">s</name><operator pos:start="255:23" pos:end="255:24">-&gt;</operator><name pos:start="255:25" pos:end="255:29">terms</name></name> <operator pos:start="255:31" pos:end="255:31">-</operator> <literal type="number" pos:start="255:33" pos:end="255:33">1</literal></expr>;</init> <condition pos:start="255:36" pos:end="255:58"><expr pos:start="255:36" pos:end="255:57"><operator pos:start="255:36" pos:end="255:36">(</operator><name pos:start="255:37" pos:end="255:37">i</name> <operator pos:start="255:39" pos:end="255:40">&gt;=</operator> <literal type="number" pos:start="255:42" pos:end="255:42">0</literal><operator pos:start="255:43" pos:end="255:43">)</operator> <operator pos:start="255:45" pos:end="255:46">&amp;&amp;</operator> <operator pos:start="255:48" pos:end="255:48">(</operator><name pos:start="255:49" pos:end="255:49">t</name> <operator pos:start="255:51" pos:end="255:51">&lt;</operator> <name pos:start="255:53" pos:end="255:56">size</name><operator pos:start="255:57" pos:end="255:57">)</operator></expr>;</condition> <incr pos:start="255:60" pos:end="255:62"><expr pos:start="255:60" pos:end="255:62"><name pos:start="255:60" pos:end="255:60">i</name><operator pos:start="255:61" pos:end="255:62">--</operator></expr></incr>)</control> <block pos:start="255:65" pos:end="319:13">{<block_content pos:start="257:17" pos:end="317:17">

                <if_stmt pos:start="257:17" pos:end="317:17"><if pos:start="257:17" pos:end="285:17">if <condition pos:start="257:20" pos:end="257:43">(<expr pos:start="257:21" pos:end="257:42"><name pos:start="257:21" pos:end="257:32"><name pos:start="257:21" pos:end="257:21">s</name><operator pos:start="257:22" pos:end="257:23">-&gt;</operator><name pos:start="257:24" pos:end="257:29">decorr</name><index pos:start="257:30" pos:end="257:32">[<expr pos:start="257:31" pos:end="257:31"><name pos:start="257:31" pos:end="257:31">i</name></expr>]</index></name><operator pos:start="257:33" pos:end="257:33">.</operator><name pos:start="257:34" pos:end="257:38">value</name> <operator pos:start="257:40" pos:end="257:40">&gt;</operator> <literal type="number" pos:start="257:42" pos:end="257:42">8</literal></expr>)</condition> <block pos:start="257:45" pos:end="285:17">{<block_content pos:start="259:21" pos:end="283:27">

                    <expr_stmt pos:start="259:21" pos:end="261:59"><expr pos:start="259:21" pos:end="261:58"><name pos:start="259:21" pos:end="259:32"><name pos:start="259:21" pos:end="259:21">s</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:29">decorr</name><index pos:start="259:30" pos:end="259:32">[<expr pos:start="259:31" pos:end="259:31"><name pos:start="259:31" pos:end="259:31">i</name></expr>]</index></name><operator pos:start="259:33" pos:end="259:33">.</operator><name pos:start="259:34" pos:end="259:44"><name pos:start="259:34" pos:end="259:41">samplesA</name><index pos:start="259:42" pos:end="259:44">[<expr pos:start="259:43" pos:end="259:43"><literal type="number" pos:start="259:43" pos:end="259:43">0</literal></expr>]</index></name> <operator pos:start="259:46" pos:end="259:46">=</operator>

                        <call pos:start="261:25" pos:end="261:58"><name pos:start="261:25" pos:end="261:31">wp_exp2</name><argument_list pos:start="261:32" pos:end="261:58">(<argument pos:start="261:33" pos:end="261:57"><expr pos:start="261:33" pos:end="261:57"><call pos:start="261:33" pos:end="261:57"><name pos:start="261:33" pos:end="261:52">bytestream2_get_le16</name><argument_list pos:start="261:53" pos:end="261:57">(<argument pos:start="261:54" pos:end="261:56"><expr pos:start="261:54" pos:end="261:56"><operator pos:start="261:54" pos:end="261:54">&amp;</operator><name pos:start="261:55" pos:end="261:56">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="263:21" pos:end="265:59"><expr pos:start="263:21" pos:end="265:58"><name pos:start="263:21" pos:end="263:32"><name pos:start="263:21" pos:end="263:21">s</name><operator pos:start="263:22" pos:end="263:23">-&gt;</operator><name pos:start="263:24" pos:end="263:29">decorr</name><index pos:start="263:30" pos:end="263:32">[<expr pos:start="263:31" pos:end="263:31"><name pos:start="263:31" pos:end="263:31">i</name></expr>]</index></name><operator pos:start="263:33" pos:end="263:33">.</operator><name pos:start="263:34" pos:end="263:44"><name pos:start="263:34" pos:end="263:41">samplesA</name><index pos:start="263:42" pos:end="263:44">[<expr pos:start="263:43" pos:end="263:43"><literal type="number" pos:start="263:43" pos:end="263:43">1</literal></expr>]</index></name> <operator pos:start="263:46" pos:end="263:46">=</operator>

                        <call pos:start="265:25" pos:end="265:58"><name pos:start="265:25" pos:end="265:31">wp_exp2</name><argument_list pos:start="265:32" pos:end="265:58">(<argument pos:start="265:33" pos:end="265:57"><expr pos:start="265:33" pos:end="265:57"><call pos:start="265:33" pos:end="265:57"><name pos:start="265:33" pos:end="265:52">bytestream2_get_le16</name><argument_list pos:start="265:53" pos:end="265:57">(<argument pos:start="265:54" pos:end="265:56"><expr pos:start="265:54" pos:end="265:56"><operator pos:start="265:54" pos:end="265:54">&amp;</operator><name pos:start="265:55" pos:end="265:56">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="269:21" pos:end="281:21"><if pos:start="269:21" pos:end="281:21">if <condition pos:start="269:24" pos:end="269:37">(<expr pos:start="269:25" pos:end="269:36"><name pos:start="269:25" pos:end="269:36"><name pos:start="269:25" pos:end="269:25">s</name><operator pos:start="269:26" pos:end="269:27">-&gt;</operator><name pos:start="269:28" pos:end="269:36">stereo_in</name></name></expr>)</condition> <block pos:start="269:39" pos:end="281:21">{<block_content pos:start="271:25" pos:end="279:53">

                        <expr_stmt pos:start="271:25" pos:end="273:63"><expr pos:start="271:25" pos:end="273:62"><name pos:start="271:25" pos:end="271:36"><name pos:start="271:25" pos:end="271:25">s</name><operator pos:start="271:26" pos:end="271:27">-&gt;</operator><name pos:start="271:28" pos:end="271:33">decorr</name><index pos:start="271:34" pos:end="271:36">[<expr pos:start="271:35" pos:end="271:35"><name pos:start="271:35" pos:end="271:35">i</name></expr>]</index></name><operator pos:start="271:37" pos:end="271:37">.</operator><name pos:start="271:38" pos:end="271:48"><name pos:start="271:38" pos:end="271:45">samplesB</name><index pos:start="271:46" pos:end="271:48">[<expr pos:start="271:47" pos:end="271:47"><literal type="number" pos:start="271:47" pos:end="271:47">0</literal></expr>]</index></name> <operator pos:start="271:50" pos:end="271:50">=</operator>

                            <call pos:start="273:29" pos:end="273:62"><name pos:start="273:29" pos:end="273:35">wp_exp2</name><argument_list pos:start="273:36" pos:end="273:62">(<argument pos:start="273:37" pos:end="273:61"><expr pos:start="273:37" pos:end="273:61"><call pos:start="273:37" pos:end="273:61"><name pos:start="273:37" pos:end="273:56">bytestream2_get_le16</name><argument_list pos:start="273:57" pos:end="273:61">(<argument pos:start="273:58" pos:end="273:60"><expr pos:start="273:58" pos:end="273:60"><operator pos:start="273:58" pos:end="273:58">&amp;</operator><name pos:start="273:59" pos:end="273:60">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="275:25" pos:end="277:63"><expr pos:start="275:25" pos:end="277:62"><name pos:start="275:25" pos:end="275:36"><name pos:start="275:25" pos:end="275:25">s</name><operator pos:start="275:26" pos:end="275:27">-&gt;</operator><name pos:start="275:28" pos:end="275:33">decorr</name><index pos:start="275:34" pos:end="275:36">[<expr pos:start="275:35" pos:end="275:35"><name pos:start="275:35" pos:end="275:35">i</name></expr>]</index></name><operator pos:start="275:37" pos:end="275:37">.</operator><name pos:start="275:38" pos:end="275:48"><name pos:start="275:38" pos:end="275:45">samplesB</name><index pos:start="275:46" pos:end="275:48">[<expr pos:start="275:47" pos:end="275:47"><literal type="number" pos:start="275:47" pos:end="275:47">1</literal></expr>]</index></name> <operator pos:start="275:50" pos:end="275:50">=</operator>

                            <call pos:start="277:29" pos:end="277:62"><name pos:start="277:29" pos:end="277:35">wp_exp2</name><argument_list pos:start="277:36" pos:end="277:62">(<argument pos:start="277:37" pos:end="277:61"><expr pos:start="277:37" pos:end="277:61"><call pos:start="277:37" pos:end="277:61"><name pos:start="277:37" pos:end="277:56">bytestream2_get_le16</name><argument_list pos:start="277:57" pos:end="277:61">(<argument pos:start="277:58" pos:end="277:60"><expr pos:start="277:58" pos:end="277:60"><operator pos:start="277:58" pos:end="277:58">&amp;</operator><name pos:start="277:59" pos:end="277:60">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="279:25" pos:end="279:53"><expr pos:start="279:25" pos:end="279:52"><name pos:start="279:25" pos:end="279:25">t</name>                       <operator pos:start="279:49" pos:end="279:50">+=</operator> <literal type="number" pos:start="279:52" pos:end="279:52">4</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:27"><expr pos:start="283:21" pos:end="283:26"><name pos:start="283:21" pos:end="283:21">t</name> <operator pos:start="283:23" pos:end="283:24">+=</operator> <literal type="number" pos:start="283:26" pos:end="283:26">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="285:19" pos:end="297:17">else if <condition pos:start="285:27" pos:end="285:50">(<expr pos:start="285:28" pos:end="285:49"><name pos:start="285:28" pos:end="285:39"><name pos:start="285:28" pos:end="285:28">s</name><operator pos:start="285:29" pos:end="285:30">-&gt;</operator><name pos:start="285:31" pos:end="285:36">decorr</name><index pos:start="285:37" pos:end="285:39">[<expr pos:start="285:38" pos:end="285:38"><name pos:start="285:38" pos:end="285:38">i</name></expr>]</index></name><operator pos:start="285:40" pos:end="285:40">.</operator><name pos:start="285:41" pos:end="285:45">value</name> <operator pos:start="285:47" pos:end="285:47">&lt;</operator> <literal type="number" pos:start="285:49" pos:end="285:49">0</literal></expr>)</condition> <block pos:start="285:52" pos:end="297:17">{<block_content pos:start="287:21" pos:end="295:49">

                    <expr_stmt pos:start="287:21" pos:end="289:59"><expr pos:start="287:21" pos:end="289:58"><name pos:start="287:21" pos:end="287:32"><name pos:start="287:21" pos:end="287:21">s</name><operator pos:start="287:22" pos:end="287:23">-&gt;</operator><name pos:start="287:24" pos:end="287:29">decorr</name><index pos:start="287:30" pos:end="287:32">[<expr pos:start="287:31" pos:end="287:31"><name pos:start="287:31" pos:end="287:31">i</name></expr>]</index></name><operator pos:start="287:33" pos:end="287:33">.</operator><name pos:start="287:34" pos:end="287:44"><name pos:start="287:34" pos:end="287:41">samplesA</name><index pos:start="287:42" pos:end="287:44">[<expr pos:start="287:43" pos:end="287:43"><literal type="number" pos:start="287:43" pos:end="287:43">0</literal></expr>]</index></name> <operator pos:start="287:46" pos:end="287:46">=</operator>

                        <call pos:start="289:25" pos:end="289:58"><name pos:start="289:25" pos:end="289:31">wp_exp2</name><argument_list pos:start="289:32" pos:end="289:58">(<argument pos:start="289:33" pos:end="289:57"><expr pos:start="289:33" pos:end="289:57"><call pos:start="289:33" pos:end="289:57"><name pos:start="289:33" pos:end="289:52">bytestream2_get_le16</name><argument_list pos:start="289:53" pos:end="289:57">(<argument pos:start="289:54" pos:end="289:56"><expr pos:start="289:54" pos:end="289:56"><operator pos:start="289:54" pos:end="289:54">&amp;</operator><name pos:start="289:55" pos:end="289:56">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="293:59"><expr pos:start="291:21" pos:end="293:58"><name pos:start="291:21" pos:end="291:32"><name pos:start="291:21" pos:end="291:21">s</name><operator pos:start="291:22" pos:end="291:23">-&gt;</operator><name pos:start="291:24" pos:end="291:29">decorr</name><index pos:start="291:30" pos:end="291:32">[<expr pos:start="291:31" pos:end="291:31"><name pos:start="291:31" pos:end="291:31">i</name></expr>]</index></name><operator pos:start="291:33" pos:end="291:33">.</operator><name pos:start="291:34" pos:end="291:44"><name pos:start="291:34" pos:end="291:41">samplesB</name><index pos:start="291:42" pos:end="291:44">[<expr pos:start="291:43" pos:end="291:43"><literal type="number" pos:start="291:43" pos:end="291:43">0</literal></expr>]</index></name> <operator pos:start="291:46" pos:end="291:46">=</operator>

                        <call pos:start="293:25" pos:end="293:58"><name pos:start="293:25" pos:end="293:31">wp_exp2</name><argument_list pos:start="293:32" pos:end="293:58">(<argument pos:start="293:33" pos:end="293:57"><expr pos:start="293:33" pos:end="293:57"><call pos:start="293:33" pos:end="293:57"><name pos:start="293:33" pos:end="293:52">bytestream2_get_le16</name><argument_list pos:start="293:53" pos:end="293:57">(<argument pos:start="293:54" pos:end="293:56"><expr pos:start="293:54" pos:end="293:56"><operator pos:start="293:54" pos:end="293:54">&amp;</operator><name pos:start="293:55" pos:end="293:56">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:49"><expr pos:start="295:21" pos:end="295:48"><name pos:start="295:21" pos:end="295:21">t</name>                       <operator pos:start="295:45" pos:end="295:46">+=</operator> <literal type="number" pos:start="295:48" pos:end="295:48">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="297:19" pos:end="317:17">else <block pos:start="297:24" pos:end="317:17">{<block_content pos:start="299:21" pos:end="315:69">

                    <for pos:start="299:21" pos:end="313:21">for <control pos:start="299:25" pos:end="299:60">(<init pos:start="299:26" pos:end="299:31"><expr pos:start="299:26" pos:end="299:30"><name pos:start="299:26" pos:end="299:26">j</name> <operator pos:start="299:28" pos:end="299:28">=</operator> <literal type="number" pos:start="299:30" pos:end="299:30">0</literal></expr>;</init> <condition pos:start="299:33" pos:end="299:55"><expr pos:start="299:33" pos:end="299:54"><name pos:start="299:33" pos:end="299:33">j</name> <operator pos:start="299:35" pos:end="299:35">&lt;</operator> <name pos:start="299:37" pos:end="299:48"><name pos:start="299:37" pos:end="299:37">s</name><operator pos:start="299:38" pos:end="299:39">-&gt;</operator><name pos:start="299:40" pos:end="299:45">decorr</name><index pos:start="299:46" pos:end="299:48">[<expr pos:start="299:47" pos:end="299:47"><name pos:start="299:47" pos:end="299:47">i</name></expr>]</index></name><operator pos:start="299:49" pos:end="299:49">.</operator><name pos:start="299:50" pos:end="299:54">value</name></expr>;</condition> <incr pos:start="299:57" pos:end="299:59"><expr pos:start="299:57" pos:end="299:59"><name pos:start="299:57" pos:end="299:57">j</name><operator pos:start="299:58" pos:end="299:59">++</operator></expr></incr>)</control> <block pos:start="299:62" pos:end="313:21">{<block_content pos:start="301:25" pos:end="311:25">

                        <expr_stmt pos:start="301:25" pos:end="303:63"><expr pos:start="301:25" pos:end="303:62"><name pos:start="301:25" pos:end="301:36"><name pos:start="301:25" pos:end="301:25">s</name><operator pos:start="301:26" pos:end="301:27">-&gt;</operator><name pos:start="301:28" pos:end="301:33">decorr</name><index pos:start="301:34" pos:end="301:36">[<expr pos:start="301:35" pos:end="301:35"><name pos:start="301:35" pos:end="301:35">i</name></expr>]</index></name><operator pos:start="301:37" pos:end="301:37">.</operator><name pos:start="301:38" pos:end="301:48"><name pos:start="301:38" pos:end="301:45">samplesA</name><index pos:start="301:46" pos:end="301:48">[<expr pos:start="301:47" pos:end="301:47"><name pos:start="301:47" pos:end="301:47">j</name></expr>]</index></name> <operator pos:start="301:50" pos:end="301:50">=</operator>

                            <call pos:start="303:29" pos:end="303:62"><name pos:start="303:29" pos:end="303:35">wp_exp2</name><argument_list pos:start="303:36" pos:end="303:62">(<argument pos:start="303:37" pos:end="303:61"><expr pos:start="303:37" pos:end="303:61"><call pos:start="303:37" pos:end="303:61"><name pos:start="303:37" pos:end="303:56">bytestream2_get_le16</name><argument_list pos:start="303:57" pos:end="303:61">(<argument pos:start="303:58" pos:end="303:60"><expr pos:start="303:58" pos:end="303:60"><operator pos:start="303:58" pos:end="303:58">&amp;</operator><name pos:start="303:59" pos:end="303:60">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="305:25" pos:end="311:25"><if pos:start="305:25" pos:end="311:25">if <condition pos:start="305:28" pos:end="305:41">(<expr pos:start="305:29" pos:end="305:40"><name pos:start="305:29" pos:end="305:40"><name pos:start="305:29" pos:end="305:29">s</name><operator pos:start="305:30" pos:end="305:31">-&gt;</operator><name pos:start="305:32" pos:end="305:40">stereo_in</name></name></expr>)</condition> <block pos:start="305:43" pos:end="311:25">{<block_content pos:start="307:29" pos:end="309:67">

                            <expr_stmt pos:start="307:29" pos:end="309:67"><expr pos:start="307:29" pos:end="309:66"><name pos:start="307:29" pos:end="307:40"><name pos:start="307:29" pos:end="307:29">s</name><operator pos:start="307:30" pos:end="307:31">-&gt;</operator><name pos:start="307:32" pos:end="307:37">decorr</name><index pos:start="307:38" pos:end="307:40">[<expr pos:start="307:39" pos:end="307:39"><name pos:start="307:39" pos:end="307:39">i</name></expr>]</index></name><operator pos:start="307:41" pos:end="307:41">.</operator><name pos:start="307:42" pos:end="307:52"><name pos:start="307:42" pos:end="307:49">samplesB</name><index pos:start="307:50" pos:end="307:52">[<expr pos:start="307:51" pos:end="307:51"><name pos:start="307:51" pos:end="307:51">j</name></expr>]</index></name> <operator pos:start="307:54" pos:end="307:54">=</operator>

                                <call pos:start="309:33" pos:end="309:66"><name pos:start="309:33" pos:end="309:39">wp_exp2</name><argument_list pos:start="309:40" pos:end="309:66">(<argument pos:start="309:41" pos:end="309:65"><expr pos:start="309:41" pos:end="309:65"><call pos:start="309:41" pos:end="309:65"><name pos:start="309:41" pos:end="309:60">bytestream2_get_le16</name><argument_list pos:start="309:61" pos:end="309:65">(<argument pos:start="309:62" pos:end="309:64"><expr pos:start="309:62" pos:end="309:64"><operator pos:start="309:62" pos:end="309:62">&amp;</operator><name pos:start="309:63" pos:end="309:64">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="315:21" pos:end="315:69"><expr pos:start="315:21" pos:end="315:68"><name pos:start="315:21" pos:end="315:21">t</name> <operator pos:start="315:23" pos:end="315:24">+=</operator> <name pos:start="315:26" pos:end="315:37"><name pos:start="315:26" pos:end="315:26">s</name><operator pos:start="315:27" pos:end="315:28">-&gt;</operator><name pos:start="315:29" pos:end="315:34">decorr</name><index pos:start="315:35" pos:end="315:37">[<expr pos:start="315:36" pos:end="315:36"><name pos:start="315:36" pos:end="315:36">i</name></expr>]</index></name><operator pos:start="315:38" pos:end="315:38">.</operator><name pos:start="315:39" pos:end="315:43">value</name> <operator pos:start="315:45" pos:end="315:45">*</operator> <literal type="number" pos:start="315:47" pos:end="315:47">2</literal> <operator pos:start="315:49" pos:end="315:49">*</operator> <operator pos:start="315:51" pos:end="315:51">(</operator><name pos:start="315:52" pos:end="315:63"><name pos:start="315:52" pos:end="315:52">s</name><operator pos:start="315:53" pos:end="315:54">-&gt;</operator><name pos:start="315:55" pos:end="315:63">stereo_in</name></name> <operator pos:start="315:65" pos:end="315:65">+</operator> <literal type="number" pos:start="315:67" pos:end="315:67">1</literal><operator pos:start="315:68" pos:end="315:68">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="321:13" pos:end="321:28"><expr pos:start="321:13" pos:end="321:27"><name pos:start="321:13" pos:end="321:23">got_samples</name> <operator pos:start="321:25" pos:end="321:25">=</operator> <literal type="number" pos:start="321:27" pos:end="321:27">1</literal></expr>;</expr_stmt>

            <break pos:start="323:13" pos:end="323:18">break;</break>

        <case pos:start="325:9" pos:end="325:27">case <expr pos:start="325:14" pos:end="325:26"><name pos:start="325:14" pos:end="325:26">WP_ID_ENTROPY</name></expr>:</case>

            <if_stmt pos:start="327:13" pos:end="339:13"><if pos:start="327:13" pos:end="339:13">if <condition pos:start="327:16" pos:end="327:47">(<expr pos:start="327:17" pos:end="327:46"><name pos:start="327:17" pos:end="327:20">size</name> <operator pos:start="327:22" pos:end="327:23">!=</operator> <literal type="number" pos:start="327:25" pos:end="327:25">6</literal> <operator pos:start="327:27" pos:end="327:27">*</operator> <operator pos:start="327:29" pos:end="327:29">(</operator><name pos:start="327:30" pos:end="327:41"><name pos:start="327:30" pos:end="327:30">s</name><operator pos:start="327:31" pos:end="327:32">-&gt;</operator><name pos:start="327:33" pos:end="327:41">stereo_in</name></name> <operator pos:start="327:43" pos:end="327:43">+</operator> <literal type="number" pos:start="327:45" pos:end="327:45">1</literal><operator pos:start="327:46" pos:end="327:46">)</operator></expr>)</condition> <block pos:start="327:49" pos:end="339:13">{<block_content pos:start="329:17" pos:end="337:25">

                <expr_stmt pos:start="329:17" pos:end="333:53"><expr pos:start="329:17" pos:end="333:52"><call pos:start="329:17" pos:end="333:52"><name pos:start="329:17" pos:end="329:22">av_log</name><argument_list pos:start="329:23" pos:end="333:52">(<argument pos:start="329:24" pos:end="329:28"><expr pos:start="329:24" pos:end="329:28"><name pos:start="329:24" pos:end="329:28">avctx</name></expr></argument>, <argument pos:start="329:31" pos:end="329:42"><expr pos:start="329:31" pos:end="329:42"><name pos:start="329:31" pos:end="329:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="331:24" pos:end="331:66"><expr pos:start="331:24" pos:end="331:66"><literal type="string" pos:start="331:24" pos:end="331:66">"Entropy vars size should be %i, got %i.\n"</literal></expr></argument>,

                       <argument pos:start="333:24" pos:end="333:45"><expr pos:start="333:24" pos:end="333:45"><literal type="number" pos:start="333:24" pos:end="333:24">6</literal> <operator pos:start="333:26" pos:end="333:26">*</operator> <operator pos:start="333:28" pos:end="333:28">(</operator><name pos:start="333:29" pos:end="333:40"><name pos:start="333:29" pos:end="333:29">s</name><operator pos:start="333:30" pos:end="333:31">-&gt;</operator><name pos:start="333:32" pos:end="333:40">stereo_in</name></name> <operator pos:start="333:42" pos:end="333:42">+</operator> <literal type="number" pos:start="333:44" pos:end="333:44">1</literal><operator pos:start="333:45" pos:end="333:45">)</operator></expr></argument>, <argument pos:start="333:48" pos:end="333:51"><expr pos:start="333:48" pos:end="333:51"><name pos:start="333:48" pos:end="333:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:45"><expr pos:start="335:17" pos:end="335:44"><call pos:start="335:17" pos:end="335:44"><name pos:start="335:17" pos:end="335:32">bytestream2_skip</name><argument_list pos:start="335:33" pos:end="335:44">(<argument pos:start="335:34" pos:end="335:36"><expr pos:start="335:34" pos:end="335:36"><operator pos:start="335:34" pos:end="335:34">&amp;</operator><name pos:start="335:35" pos:end="335:36">gb</name></expr></argument>, <argument pos:start="335:39" pos:end="335:43"><expr pos:start="335:39" pos:end="335:43"><name pos:start="335:39" pos:end="335:43">ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="337:17" pos:end="337:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <for pos:start="341:13" pos:end="347:17">for <control pos:start="341:17" pos:end="341:47">(<init pos:start="341:18" pos:end="341:23"><expr pos:start="341:18" pos:end="341:22"><name pos:start="341:18" pos:end="341:18">j</name> <operator pos:start="341:20" pos:end="341:20">=</operator> <literal type="number" pos:start="341:22" pos:end="341:22">0</literal></expr>;</init> <condition pos:start="341:25" pos:end="341:42"><expr pos:start="341:25" pos:end="341:41"><name pos:start="341:25" pos:end="341:25">j</name> <operator pos:start="341:27" pos:end="341:28">&lt;=</operator> <name pos:start="341:30" pos:end="341:41"><name pos:start="341:30" pos:end="341:30">s</name><operator pos:start="341:31" pos:end="341:32">-&gt;</operator><name pos:start="341:33" pos:end="341:41">stereo_in</name></name></expr>;</condition> <incr pos:start="341:44" pos:end="341:46"><expr pos:start="341:44" pos:end="341:46"><name pos:start="341:44" pos:end="341:44">j</name><operator pos:start="341:45" pos:end="341:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="343:17" pos:end="347:17"><block_content pos:start="343:17" pos:end="347:17">

                <for pos:start="343:17" pos:end="347:17">for <control pos:start="343:21" pos:end="343:39">(<init pos:start="343:22" pos:end="343:27"><expr pos:start="343:22" pos:end="343:26"><name pos:start="343:22" pos:end="343:22">i</name> <operator pos:start="343:24" pos:end="343:24">=</operator> <literal type="number" pos:start="343:26" pos:end="343:26">0</literal></expr>;</init> <condition pos:start="343:29" pos:end="343:34"><expr pos:start="343:29" pos:end="343:33"><name pos:start="343:29" pos:end="343:29">i</name> <operator pos:start="343:31" pos:end="343:31">&lt;</operator> <literal type="number" pos:start="343:33" pos:end="343:33">3</literal></expr>;</condition> <incr pos:start="343:36" pos:end="343:38"><expr pos:start="343:36" pos:end="343:38"><name pos:start="343:36" pos:end="343:36">i</name><operator pos:start="343:37" pos:end="343:38">++</operator></expr></incr>)</control> <block pos:start="343:41" pos:end="347:17">{<block_content pos:start="345:21" pos:end="345:76">

                    <expr_stmt pos:start="345:21" pos:end="345:76"><expr pos:start="345:21" pos:end="345:75"><name pos:start="345:21" pos:end="345:28"><name pos:start="345:21" pos:end="345:21">s</name><operator pos:start="345:22" pos:end="345:23">-&gt;</operator><name pos:start="345:24" pos:end="345:25">ch</name><index pos:start="345:26" pos:end="345:28">[<expr pos:start="345:27" pos:end="345:27"><name pos:start="345:27" pos:end="345:27">j</name></expr>]</index></name><operator pos:start="345:29" pos:end="345:29">.</operator><name pos:start="345:30" pos:end="345:38"><name pos:start="345:30" pos:end="345:35">median</name><index pos:start="345:36" pos:end="345:38">[<expr pos:start="345:37" pos:end="345:37"><name pos:start="345:37" pos:end="345:37">i</name></expr>]</index></name> <operator pos:start="345:40" pos:end="345:40">=</operator> <call pos:start="345:42" pos:end="345:75"><name pos:start="345:42" pos:end="345:48">wp_exp2</name><argument_list pos:start="345:49" pos:end="345:75">(<argument pos:start="345:50" pos:end="345:74"><expr pos:start="345:50" pos:end="345:74"><call pos:start="345:50" pos:end="345:74"><name pos:start="345:50" pos:end="345:69">bytestream2_get_le16</name><argument_list pos:start="345:70" pos:end="345:74">(<argument pos:start="345:71" pos:end="345:73"><expr pos:start="345:71" pos:end="345:73"><operator pos:start="345:71" pos:end="345:71">&amp;</operator><name pos:start="345:72" pos:end="345:73">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for></block_content></block></for>

            <expr_stmt pos:start="349:13" pos:end="349:28"><expr pos:start="349:13" pos:end="349:27"><name pos:start="349:13" pos:end="349:23">got_entropy</name> <operator pos:start="349:25" pos:end="349:25">=</operator> <literal type="number" pos:start="349:27" pos:end="349:27">1</literal></expr>;</expr_stmt>

            <break pos:start="351:13" pos:end="351:18">break;</break>

        <case pos:start="353:9" pos:end="353:26">case <expr pos:start="353:14" pos:end="353:25"><name pos:start="353:14" pos:end="353:25">WP_ID_HYBRID</name></expr>:</case>

            <if_stmt pos:start="355:13" pos:end="365:13"><if pos:start="355:13" pos:end="365:13">if <condition pos:start="355:16" pos:end="355:34">(<expr pos:start="355:17" pos:end="355:33"><name pos:start="355:17" pos:end="355:33"><name pos:start="355:17" pos:end="355:17">s</name><operator pos:start="355:18" pos:end="355:19">-&gt;</operator><name pos:start="355:20" pos:end="355:33">hybrid_bitrate</name></name></expr>)</condition> <block pos:start="355:36" pos:end="365:13">{<block_content pos:start="357:17" pos:end="363:17">

                <for pos:start="357:17" pos:end="363:17">for <control pos:start="357:21" pos:end="357:51">(<init pos:start="357:22" pos:end="357:27"><expr pos:start="357:22" pos:end="357:26"><name pos:start="357:22" pos:end="357:22">i</name> <operator pos:start="357:24" pos:end="357:24">=</operator> <literal type="number" pos:start="357:26" pos:end="357:26">0</literal></expr>;</init> <condition pos:start="357:29" pos:end="357:46"><expr pos:start="357:29" pos:end="357:45"><name pos:start="357:29" pos:end="357:29">i</name> <operator pos:start="357:31" pos:end="357:32">&lt;=</operator> <name pos:start="357:34" pos:end="357:45"><name pos:start="357:34" pos:end="357:34">s</name><operator pos:start="357:35" pos:end="357:36">-&gt;</operator><name pos:start="357:37" pos:end="357:45">stereo_in</name></name></expr>;</condition> <incr pos:start="357:48" pos:end="357:50"><expr pos:start="357:48" pos:end="357:50"><name pos:start="357:48" pos:end="357:48">i</name><operator pos:start="357:49" pos:end="357:50">++</operator></expr></incr>)</control> <block pos:start="357:53" pos:end="363:17">{<block_content pos:start="359:21" pos:end="361:44">

                    <expr_stmt pos:start="359:21" pos:end="359:77"><expr pos:start="359:21" pos:end="359:76"><name pos:start="359:21" pos:end="359:28"><name pos:start="359:21" pos:end="359:21">s</name><operator pos:start="359:22" pos:end="359:23">-&gt;</operator><name pos:start="359:24" pos:end="359:25">ch</name><index pos:start="359:26" pos:end="359:28">[<expr pos:start="359:27" pos:end="359:27"><name pos:start="359:27" pos:end="359:27">i</name></expr>]</index></name><operator pos:start="359:29" pos:end="359:29">.</operator><name pos:start="359:30" pos:end="359:39">slow_level</name> <operator pos:start="359:41" pos:end="359:41">=</operator> <call pos:start="359:43" pos:end="359:76"><name pos:start="359:43" pos:end="359:49">wp_exp2</name><argument_list pos:start="359:50" pos:end="359:76">(<argument pos:start="359:51" pos:end="359:75"><expr pos:start="359:51" pos:end="359:75"><call pos:start="359:51" pos:end="359:75"><name pos:start="359:51" pos:end="359:70">bytestream2_get_le16</name><argument_list pos:start="359:71" pos:end="359:75">(<argument pos:start="359:72" pos:end="359:74"><expr pos:start="359:72" pos:end="359:74"><operator pos:start="359:72" pos:end="359:72">&amp;</operator><name pos:start="359:73" pos:end="359:74">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:44"><expr pos:start="361:21" pos:end="361:43"><name pos:start="361:21" pos:end="361:24">size</name>               <operator pos:start="361:40" pos:end="361:41">-=</operator> <literal type="number" pos:start="361:43" pos:end="361:43">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <for pos:start="367:13" pos:end="373:13">for <control pos:start="367:17" pos:end="367:52">(<init pos:start="367:18" pos:end="367:23"><expr pos:start="367:18" pos:end="367:22"><name pos:start="367:18" pos:end="367:18">i</name> <operator pos:start="367:20" pos:end="367:20">=</operator> <literal type="number" pos:start="367:22" pos:end="367:22">0</literal></expr>;</init> <condition pos:start="367:25" pos:end="367:47"><expr pos:start="367:25" pos:end="367:46"><name pos:start="367:25" pos:end="367:25">i</name> <operator pos:start="367:27" pos:end="367:27">&lt;</operator> <operator pos:start="367:29" pos:end="367:29">(</operator><name pos:start="367:30" pos:end="367:41"><name pos:start="367:30" pos:end="367:30">s</name><operator pos:start="367:31" pos:end="367:32">-&gt;</operator><name pos:start="367:33" pos:end="367:41">stereo_in</name></name> <operator pos:start="367:43" pos:end="367:43">+</operator> <literal type="number" pos:start="367:45" pos:end="367:45">1</literal><operator pos:start="367:46" pos:end="367:46">)</operator></expr>;</condition> <incr pos:start="367:49" pos:end="367:51"><expr pos:start="367:49" pos:end="367:51"><name pos:start="367:49" pos:end="367:49">i</name><operator pos:start="367:50" pos:end="367:51">++</operator></expr></incr>)</control> <block pos:start="367:54" pos:end="373:13">{<block_content pos:start="369:17" pos:end="371:41">

                <expr_stmt pos:start="369:17" pos:end="369:71"><expr pos:start="369:17" pos:end="369:70"><name pos:start="369:17" pos:end="369:24"><name pos:start="369:17" pos:end="369:17">s</name><operator pos:start="369:18" pos:end="369:19">-&gt;</operator><name pos:start="369:20" pos:end="369:21">ch</name><index pos:start="369:22" pos:end="369:24">[<expr pos:start="369:23" pos:end="369:23"><name pos:start="369:23" pos:end="369:23">i</name></expr>]</index></name><operator pos:start="369:25" pos:end="369:25">.</operator><name pos:start="369:26" pos:end="369:36">bitrate_acc</name> <operator pos:start="369:38" pos:end="369:38">=</operator> <call pos:start="369:40" pos:end="369:64"><name pos:start="369:40" pos:end="369:59">bytestream2_get_le16</name><argument_list pos:start="369:60" pos:end="369:64">(<argument pos:start="369:61" pos:end="369:63"><expr pos:start="369:61" pos:end="369:63"><operator pos:start="369:61" pos:end="369:61">&amp;</operator><name pos:start="369:62" pos:end="369:63">gb</name></expr></argument>)</argument_list></call> <operator pos:start="369:66" pos:end="369:67">&lt;&lt;</operator> <literal type="number" pos:start="369:69" pos:end="369:70">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:41"><expr pos:start="371:17" pos:end="371:40"><name pos:start="371:17" pos:end="371:20">size</name>                <operator pos:start="371:37" pos:end="371:38">-=</operator> <literal type="number" pos:start="371:40" pos:end="371:40">2</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="375:13" pos:end="391:13"><if pos:start="375:13" pos:end="385:13">if <condition pos:start="375:16" pos:end="375:25">(<expr pos:start="375:17" pos:end="375:24"><name pos:start="375:17" pos:end="375:20">size</name> <operator pos:start="375:22" pos:end="375:22">&gt;</operator> <literal type="number" pos:start="375:24" pos:end="375:24">0</literal></expr>)</condition> <block pos:start="375:27" pos:end="385:13">{<block_content pos:start="377:17" pos:end="383:17">

                <for pos:start="377:17" pos:end="383:17">for <control pos:start="377:21" pos:end="377:56">(<init pos:start="377:22" pos:end="377:27"><expr pos:start="377:22" pos:end="377:26"><name pos:start="377:22" pos:end="377:22">i</name> <operator pos:start="377:24" pos:end="377:24">=</operator> <literal type="number" pos:start="377:26" pos:end="377:26">0</literal></expr>;</init> <condition pos:start="377:29" pos:end="377:51"><expr pos:start="377:29" pos:end="377:50"><name pos:start="377:29" pos:end="377:29">i</name> <operator pos:start="377:31" pos:end="377:31">&lt;</operator> <operator pos:start="377:33" pos:end="377:33">(</operator><name pos:start="377:34" pos:end="377:45"><name pos:start="377:34" pos:end="377:34">s</name><operator pos:start="377:35" pos:end="377:36">-&gt;</operator><name pos:start="377:37" pos:end="377:45">stereo_in</name></name> <operator pos:start="377:47" pos:end="377:47">+</operator> <literal type="number" pos:start="377:49" pos:end="377:49">1</literal><operator pos:start="377:50" pos:end="377:50">)</operator></expr>;</condition> <incr pos:start="377:53" pos:end="377:55"><expr pos:start="377:53" pos:end="377:55"><name pos:start="377:53" pos:end="377:53">i</name><operator pos:start="377:54" pos:end="377:55">++</operator></expr></incr>)</control> <block pos:start="377:58" pos:end="383:17">{<block_content pos:start="379:21" pos:end="381:68">

                    <expr_stmt pos:start="379:21" pos:end="381:68"><expr pos:start="379:21" pos:end="381:67"><name pos:start="379:21" pos:end="379:28"><name pos:start="379:21" pos:end="379:21">s</name><operator pos:start="379:22" pos:end="379:23">-&gt;</operator><name pos:start="379:24" pos:end="379:25">ch</name><index pos:start="379:26" pos:end="379:28">[<expr pos:start="379:27" pos:end="379:27"><name pos:start="379:27" pos:end="379:27">i</name></expr>]</index></name><operator pos:start="379:29" pos:end="379:29">.</operator><name pos:start="379:30" pos:end="379:42">bitrate_delta</name> <operator pos:start="379:44" pos:end="379:44">=</operator>

                        <call pos:start="381:25" pos:end="381:67"><name pos:start="381:25" pos:end="381:31">wp_exp2</name><argument_list pos:start="381:32" pos:end="381:67">(<argument pos:start="381:33" pos:end="381:66"><expr pos:start="381:33" pos:end="381:66"><operator pos:start="381:33" pos:end="381:33">(</operator><name pos:start="381:34" pos:end="381:40">int16_t</name><operator pos:start="381:41" pos:end="381:41">)</operator><call pos:start="381:42" pos:end="381:66"><name pos:start="381:42" pos:end="381:61">bytestream2_get_le16</name><argument_list pos:start="381:62" pos:end="381:66">(<argument pos:start="381:63" pos:end="381:65"><expr pos:start="381:63" pos:end="381:65"><operator pos:start="381:63" pos:end="381:63">&amp;</operator><name pos:start="381:64" pos:end="381:65">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="385:15" pos:end="391:13">else <block pos:start="385:20" pos:end="391:13">{<block_content pos:start="387:17" pos:end="389:47">

                <for pos:start="387:17" pos:end="389:47">for <control pos:start="387:21" pos:end="387:56">(<init pos:start="387:22" pos:end="387:27"><expr pos:start="387:22" pos:end="387:26"><name pos:start="387:22" pos:end="387:22">i</name> <operator pos:start="387:24" pos:end="387:24">=</operator> <literal type="number" pos:start="387:26" pos:end="387:26">0</literal></expr>;</init> <condition pos:start="387:29" pos:end="387:51"><expr pos:start="387:29" pos:end="387:50"><name pos:start="387:29" pos:end="387:29">i</name> <operator pos:start="387:31" pos:end="387:31">&lt;</operator> <operator pos:start="387:33" pos:end="387:33">(</operator><name pos:start="387:34" pos:end="387:45"><name pos:start="387:34" pos:end="387:34">s</name><operator pos:start="387:35" pos:end="387:36">-&gt;</operator><name pos:start="387:37" pos:end="387:45">stereo_in</name></name> <operator pos:start="387:47" pos:end="387:47">+</operator> <literal type="number" pos:start="387:49" pos:end="387:49">1</literal><operator pos:start="387:50" pos:end="387:50">)</operator></expr>;</condition> <incr pos:start="387:53" pos:end="387:55"><expr pos:start="387:53" pos:end="387:55"><name pos:start="387:53" pos:end="387:53">i</name><operator pos:start="387:54" pos:end="387:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="389:21" pos:end="389:47"><block_content pos:start="389:21" pos:end="389:47">

                    <expr_stmt pos:start="389:21" pos:end="389:47"><expr pos:start="389:21" pos:end="389:46"><name pos:start="389:21" pos:end="389:28"><name pos:start="389:21" pos:end="389:21">s</name><operator pos:start="389:22" pos:end="389:23">-&gt;</operator><name pos:start="389:24" pos:end="389:25">ch</name><index pos:start="389:26" pos:end="389:28">[<expr pos:start="389:27" pos:end="389:27"><name pos:start="389:27" pos:end="389:27">i</name></expr>]</index></name><operator pos:start="389:29" pos:end="389:29">.</operator><name pos:start="389:30" pos:end="389:42">bitrate_delta</name> <operator pos:start="389:44" pos:end="389:44">=</operator> <literal type="number" pos:start="389:46" pos:end="389:46">0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:27"><expr pos:start="393:13" pos:end="393:26"><name pos:start="393:13" pos:end="393:22">got_hybrid</name> <operator pos:start="393:24" pos:end="393:24">=</operator> <literal type="number" pos:start="393:26" pos:end="393:26">1</literal></expr>;</expr_stmt>

            <break pos:start="395:13" pos:end="395:18">break;</break>

        <case pos:start="397:9" pos:end="397:29">case <expr pos:start="397:14" pos:end="397:28"><name pos:start="397:14" pos:end="397:28">WP_ID_INT32INFO</name></expr>:</case> <block pos:start="397:31" pos:end="465:9">{<block_content pos:start="399:13" pos:end="463:18">

            <decl_stmt pos:start="399:13" pos:end="399:27"><decl pos:start="399:13" pos:end="399:26"><type pos:start="399:13" pos:end="399:19"><name pos:start="399:13" pos:end="399:19">uint8_t</name></type> <name pos:start="399:21" pos:end="399:26"><name pos:start="399:21" pos:end="399:23">val</name><index pos:start="399:24" pos:end="399:26">[<expr pos:start="399:25" pos:end="399:25"><literal type="number" pos:start="399:25" pos:end="399:25">4</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="401:13" pos:end="413:13"><if pos:start="401:13" pos:end="413:13">if <condition pos:start="401:16" pos:end="401:26">(<expr pos:start="401:17" pos:end="401:25"><name pos:start="401:17" pos:end="401:20">size</name> <operator pos:start="401:22" pos:end="401:23">!=</operator> <literal type="number" pos:start="401:25" pos:end="401:25">4</literal></expr>)</condition> <block pos:start="401:28" pos:end="413:13">{<block_content pos:start="403:17" pos:end="411:25">

                <expr_stmt pos:start="403:17" pos:end="407:29"><expr pos:start="403:17" pos:end="407:28"><call pos:start="403:17" pos:end="407:28"><name pos:start="403:17" pos:end="403:22">av_log</name><argument_list pos:start="403:23" pos:end="407:28">(<argument pos:start="403:24" pos:end="403:28"><expr pos:start="403:24" pos:end="403:28"><name pos:start="403:24" pos:end="403:28">avctx</name></expr></argument>, <argument pos:start="403:31" pos:end="403:42"><expr pos:start="403:31" pos:end="403:42"><name pos:start="403:31" pos:end="403:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="405:24" pos:end="405:55"><expr pos:start="405:24" pos:end="405:55"><literal type="string" pos:start="405:24" pos:end="405:55">"Invalid INT32INFO, size = %i\n"</literal></expr></argument>,

                       <argument pos:start="407:24" pos:end="407:27"><expr pos:start="407:24" pos:end="407:27"><name pos:start="407:24" pos:end="407:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:49"><expr pos:start="409:17" pos:end="409:48"><call pos:start="409:17" pos:end="409:48"><name pos:start="409:17" pos:end="409:32">bytestream2_skip</name><argument_list pos:start="409:33" pos:end="409:48">(<argument pos:start="409:34" pos:end="409:36"><expr pos:start="409:34" pos:end="409:36"><operator pos:start="409:34" pos:end="409:34">&amp;</operator><name pos:start="409:35" pos:end="409:36">gb</name></expr></argument>, <argument pos:start="409:39" pos:end="409:47"><expr pos:start="409:39" pos:end="409:47"><name pos:start="409:39" pos:end="409:43">ssize</name> <operator pos:start="409:45" pos:end="409:45">-</operator> <literal type="number" pos:start="409:47" pos:end="409:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="411:17" pos:end="411:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="415:13" pos:end="415:48"><expr pos:start="415:13" pos:end="415:47"><call pos:start="415:13" pos:end="415:47"><name pos:start="415:13" pos:end="415:34">bytestream2_get_buffer</name><argument_list pos:start="415:35" pos:end="415:47">(<argument pos:start="415:36" pos:end="415:38"><expr pos:start="415:36" pos:end="415:38"><operator pos:start="415:36" pos:end="415:36">&amp;</operator><name pos:start="415:37" pos:end="415:38">gb</name></expr></argument>, <argument pos:start="415:41" pos:end="415:43"><expr pos:start="415:41" pos:end="415:43"><name pos:start="415:41" pos:end="415:43">val</name></expr></argument>, <argument pos:start="415:46" pos:end="415:46"><expr pos:start="415:46" pos:end="415:46"><literal type="number" pos:start="415:46" pos:end="415:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="417:13" pos:end="445:13"><if pos:start="417:13" pos:end="425:13">if <condition pos:start="417:16" pos:end="417:28">(<expr pos:start="417:17" pos:end="417:27"><name pos:start="417:17" pos:end="417:22"><name pos:start="417:17" pos:end="417:19">val</name><index pos:start="417:20" pos:end="417:22">[<expr pos:start="417:21" pos:end="417:21"><literal type="number" pos:start="417:21" pos:end="417:21">0</literal></expr>]</index></name> <operator pos:start="417:24" pos:end="417:24">&gt;</operator> <literal type="number" pos:start="417:26" pos:end="417:27">32</literal></expr>)</condition> <block pos:start="417:30" pos:end="425:13">{<block_content pos:start="419:17" pos:end="423:25">

                <expr_stmt pos:start="419:17" pos:end="421:78"><expr pos:start="419:17" pos:end="421:77"><call pos:start="419:17" pos:end="421:77"><name pos:start="419:17" pos:end="419:22">av_log</name><argument_list pos:start="419:23" pos:end="421:77">(<argument pos:start="419:24" pos:end="419:28"><expr pos:start="419:24" pos:end="419:28"><name pos:start="419:24" pos:end="419:28">avctx</name></expr></argument>, <argument pos:start="419:31" pos:end="419:42"><expr pos:start="419:31" pos:end="419:42"><name pos:start="419:31" pos:end="419:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="421:24" pos:end="421:68"><expr pos:start="421:24" pos:end="421:68"><literal type="string" pos:start="421:24" pos:end="421:68">"Invalid INT32INFO, extra_bits = %d (&gt; 32)\n"</literal></expr></argument>, <argument pos:start="421:71" pos:end="421:76"><expr pos:start="421:71" pos:end="421:76"><name pos:start="421:71" pos:end="421:76"><name pos:start="421:71" pos:end="421:73">val</name><index pos:start="421:74" pos:end="421:76">[<expr pos:start="421:75" pos:end="421:75"><literal type="number" pos:start="421:75" pos:end="421:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="423:17" pos:end="423:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="425:15" pos:end="429:13">else if <condition pos:start="425:23" pos:end="425:30">(<expr pos:start="425:24" pos:end="425:29"><name pos:start="425:24" pos:end="425:29"><name pos:start="425:24" pos:end="425:26">val</name><index pos:start="425:27" pos:end="425:29">[<expr pos:start="425:28" pos:end="425:28"><literal type="number" pos:start="425:28" pos:end="425:28">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="425:32" pos:end="429:13">{<block_content pos:start="427:17" pos:end="427:39">

                <expr_stmt pos:start="427:17" pos:end="427:39"><expr pos:start="427:17" pos:end="427:38"><name pos:start="427:17" pos:end="427:29"><name pos:start="427:17" pos:end="427:17">s</name><operator pos:start="427:18" pos:end="427:19">-&gt;</operator><name pos:start="427:20" pos:end="427:29">extra_bits</name></name> <operator pos:start="427:31" pos:end="427:31">=</operator> <name pos:start="427:33" pos:end="427:38"><name pos:start="427:33" pos:end="427:35">val</name><index pos:start="427:36" pos:end="427:38">[<expr pos:start="427:37" pos:end="427:37"><literal type="number" pos:start="427:37" pos:end="427:37">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="429:15" pos:end="433:13">else if <condition pos:start="429:23" pos:end="429:30">(<expr pos:start="429:24" pos:end="429:29"><name pos:start="429:24" pos:end="429:29"><name pos:start="429:24" pos:end="429:26">val</name><index pos:start="429:27" pos:end="429:29">[<expr pos:start="429:28" pos:end="429:28"><literal type="number" pos:start="429:28" pos:end="429:28">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="429:32" pos:end="433:13">{<block_content pos:start="431:17" pos:end="431:34">

                <expr_stmt pos:start="431:17" pos:end="431:34"><expr pos:start="431:17" pos:end="431:33"><name pos:start="431:17" pos:end="431:24"><name pos:start="431:17" pos:end="431:17">s</name><operator pos:start="431:18" pos:end="431:19">-&gt;</operator><name pos:start="431:20" pos:end="431:24">shift</name></name> <operator pos:start="431:26" pos:end="431:26">=</operator> <name pos:start="431:28" pos:end="431:33"><name pos:start="431:28" pos:end="431:30">val</name><index pos:start="431:31" pos:end="431:33">[<expr pos:start="431:32" pos:end="431:32"><literal type="number" pos:start="431:32" pos:end="431:32">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="433:15" pos:end="439:13">else if <condition pos:start="433:23" pos:end="433:30">(<expr pos:start="433:24" pos:end="433:29"><name pos:start="433:24" pos:end="433:29"><name pos:start="433:24" pos:end="433:26">val</name><index pos:start="433:27" pos:end="433:29">[<expr pos:start="433:28" pos:end="433:28"><literal type="number" pos:start="433:28" pos:end="433:28">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="433:32" pos:end="439:13">{<block_content pos:start="435:17" pos:end="437:34">

                <expr_stmt pos:start="435:17" pos:end="435:37"><expr pos:start="435:17" pos:end="435:36"><name pos:start="435:17" pos:end="435:22"><name pos:start="435:17" pos:end="435:17">s</name><operator pos:start="435:18" pos:end="435:19">-&gt;</operator><name pos:start="435:20" pos:end="435:22">and</name></name>   <operator pos:start="435:26" pos:end="435:26">=</operator> <name pos:start="435:28" pos:end="435:32"><name pos:start="435:28" pos:end="435:28">s</name><operator pos:start="435:29" pos:end="435:30">-&gt;</operator><name pos:start="435:31" pos:end="435:32">or</name></name> <operator pos:start="435:34" pos:end="435:34">=</operator> <literal type="number" pos:start="435:36" pos:end="435:36">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="437:17" pos:end="437:34"><expr pos:start="437:17" pos:end="437:33"><name pos:start="437:17" pos:end="437:24"><name pos:start="437:17" pos:end="437:17">s</name><operator pos:start="437:18" pos:end="437:19">-&gt;</operator><name pos:start="437:20" pos:end="437:24">shift</name></name> <operator pos:start="437:26" pos:end="437:26">=</operator> <name pos:start="437:28" pos:end="437:33"><name pos:start="437:28" pos:end="437:30">val</name><index pos:start="437:31" pos:end="437:33">[<expr pos:start="437:32" pos:end="437:32"><literal type="number" pos:start="437:32" pos:end="437:32">2</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="439:15" pos:end="445:13">else if <condition pos:start="439:23" pos:end="439:30">(<expr pos:start="439:24" pos:end="439:29"><name pos:start="439:24" pos:end="439:29"><name pos:start="439:24" pos:end="439:26">val</name><index pos:start="439:27" pos:end="439:29">[<expr pos:start="439:28" pos:end="439:28"><literal type="number" pos:start="439:28" pos:end="439:28">3</literal></expr>]</index></name></expr>)</condition> <block pos:start="439:32" pos:end="445:13">{<block_content pos:start="441:17" pos:end="443:34">

                <expr_stmt pos:start="441:17" pos:end="441:29"><expr pos:start="441:17" pos:end="441:28"><name pos:start="441:17" pos:end="441:22"><name pos:start="441:17" pos:end="441:17">s</name><operator pos:start="441:18" pos:end="441:19">-&gt;</operator><name pos:start="441:20" pos:end="441:22">and</name></name>   <operator pos:start="441:26" pos:end="441:26">=</operator> <literal type="number" pos:start="441:28" pos:end="441:28">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:34"><expr pos:start="443:17" pos:end="443:33"><name pos:start="443:17" pos:end="443:24"><name pos:start="443:17" pos:end="443:17">s</name><operator pos:start="443:18" pos:end="443:19">-&gt;</operator><name pos:start="443:20" pos:end="443:24">shift</name></name> <operator pos:start="443:26" pos:end="443:26">=</operator> <name pos:start="443:28" pos:end="443:33"><name pos:start="443:28" pos:end="443:30">val</name><index pos:start="443:31" pos:end="443:33">[<expr pos:start="443:32" pos:end="443:32"><literal type="number" pos:start="443:32" pos:end="443:32">3</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="447:13" pos:end="449:64">/* original WavPack decoder forces 32-bit lossy sound to be treated

             * as 24-bit one in order to have proper clipping */</comment>

            <if_stmt pos:start="451:13" pos:end="461:13"><if pos:start="451:13" pos:end="461:13">if <condition pos:start="451:16" pos:end="451:75">(<expr pos:start="451:17" pos:end="451:74"><name pos:start="451:17" pos:end="451:25"><name pos:start="451:17" pos:end="451:17">s</name><operator pos:start="451:18" pos:end="451:19">-&gt;</operator><name pos:start="451:20" pos:end="451:25">hybrid</name></name> <operator pos:start="451:27" pos:end="451:28">&amp;&amp;</operator> <name pos:start="451:30" pos:end="451:32">bpp</name> <operator pos:start="451:34" pos:end="451:35">==</operator> <literal type="number" pos:start="451:37" pos:end="451:37">4</literal> <operator pos:start="451:39" pos:end="451:40">&amp;&amp;</operator> <name pos:start="451:42" pos:end="451:54"><name pos:start="451:42" pos:end="451:42">s</name><operator pos:start="451:43" pos:end="451:44">-&gt;</operator><name pos:start="451:45" pos:end="451:54">post_shift</name></name> <operator pos:start="451:56" pos:end="451:56">&lt;</operator> <literal type="number" pos:start="451:58" pos:end="451:58">8</literal> <operator pos:start="451:60" pos:end="451:61">&amp;&amp;</operator> <name pos:start="451:63" pos:end="451:70"><name pos:start="451:63" pos:end="451:63">s</name><operator pos:start="451:64" pos:end="451:65">-&gt;</operator><name pos:start="451:66" pos:end="451:70">shift</name></name> <operator pos:start="451:72" pos:end="451:72">&gt;</operator> <literal type="number" pos:start="451:74" pos:end="451:74">8</literal></expr>)</condition> <block pos:start="451:77" pos:end="461:13">{<block_content pos:start="453:17" pos:end="459:40">

                <expr_stmt pos:start="453:17" pos:end="453:40"><expr pos:start="453:17" pos:end="453:39"><name pos:start="453:17" pos:end="453:29"><name pos:start="453:17" pos:end="453:17">s</name><operator pos:start="453:18" pos:end="453:19">-&gt;</operator><name pos:start="453:20" pos:end="453:29">post_shift</name></name>      <operator pos:start="453:36" pos:end="453:37">+=</operator> <literal type="number" pos:start="453:39" pos:end="453:39">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="455:17" pos:end="455:40"><expr pos:start="455:17" pos:end="455:39"><name pos:start="455:17" pos:end="455:24"><name pos:start="455:17" pos:end="455:17">s</name><operator pos:start="455:18" pos:end="455:19">-&gt;</operator><name pos:start="455:20" pos:end="455:24">shift</name></name>           <operator pos:start="455:36" pos:end="455:37">-=</operator> <literal type="number" pos:start="455:39" pos:end="455:39">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="457:40"><expr pos:start="457:17" pos:end="457:39"><name pos:start="457:17" pos:end="457:33"><name pos:start="457:17" pos:end="457:17">s</name><operator pos:start="457:18" pos:end="457:19">-&gt;</operator><name pos:start="457:20" pos:end="457:33">hybrid_maxclip</name></name> <operator pos:start="457:35" pos:end="457:37">&gt;&gt;=</operator> <literal type="number" pos:start="457:39" pos:end="457:39">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="459:17" pos:end="459:40"><expr pos:start="459:17" pos:end="459:39"><name pos:start="459:17" pos:end="459:33"><name pos:start="459:17" pos:end="459:17">s</name><operator pos:start="459:18" pos:end="459:19">-&gt;</operator><name pos:start="459:20" pos:end="459:33">hybrid_minclip</name></name> <operator pos:start="459:35" pos:end="459:37">&gt;&gt;=</operator> <literal type="number" pos:start="459:39" pos:end="459:39">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="463:13" pos:end="463:18">break;</break>

        </block_content>}</block>

        <case pos:start="467:9" pos:end="467:29">case <expr pos:start="467:14" pos:end="467:28"><name pos:start="467:14" pos:end="467:28">WP_ID_FLOATINFO</name></expr>:</case>

            <if_stmt pos:start="469:13" pos:end="479:13"><if pos:start="469:13" pos:end="479:13">if <condition pos:start="469:16" pos:end="469:26">(<expr pos:start="469:17" pos:end="469:25"><name pos:start="469:17" pos:end="469:20">size</name> <operator pos:start="469:22" pos:end="469:23">!=</operator> <literal type="number" pos:start="469:25" pos:end="469:25">4</literal></expr>)</condition> <block pos:start="469:28" pos:end="479:13">{<block_content pos:start="471:17" pos:end="477:25">

                <expr_stmt pos:start="471:17" pos:end="473:63"><expr pos:start="471:17" pos:end="473:62"><call pos:start="471:17" pos:end="473:62"><name pos:start="471:17" pos:end="471:22">av_log</name><argument_list pos:start="471:23" pos:end="473:62">(<argument pos:start="471:24" pos:end="471:28"><expr pos:start="471:24" pos:end="471:28"><name pos:start="471:24" pos:end="471:28">avctx</name></expr></argument>, <argument pos:start="471:31" pos:end="471:42"><expr pos:start="471:31" pos:end="471:42"><name pos:start="471:31" pos:end="471:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="473:24" pos:end="473:55"><expr pos:start="473:24" pos:end="473:55"><literal type="string" pos:start="473:24" pos:end="473:55">"Invalid FLOATINFO, size = %i\n"</literal></expr></argument>, <argument pos:start="473:58" pos:end="473:61"><expr pos:start="473:58" pos:end="473:61"><name pos:start="473:58" pos:end="473:61">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="475:17" pos:end="475:45"><expr pos:start="475:17" pos:end="475:44"><call pos:start="475:17" pos:end="475:44"><name pos:start="475:17" pos:end="475:32">bytestream2_skip</name><argument_list pos:start="475:33" pos:end="475:44">(<argument pos:start="475:34" pos:end="475:36"><expr pos:start="475:34" pos:end="475:36"><operator pos:start="475:34" pos:end="475:34">&amp;</operator><name pos:start="475:35" pos:end="475:36">gb</name></expr></argument>, <argument pos:start="475:39" pos:end="475:43"><expr pos:start="475:39" pos:end="475:43"><name pos:start="475:39" pos:end="475:43">ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="477:17" pos:end="477:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:57"><expr pos:start="481:13" pos:end="481:56"><name pos:start="481:13" pos:end="481:25"><name pos:start="481:13" pos:end="481:13">s</name><operator pos:start="481:14" pos:end="481:15">-&gt;</operator><name pos:start="481:16" pos:end="481:25">float_flag</name></name>    <operator pos:start="481:30" pos:end="481:30">=</operator> <call pos:start="481:32" pos:end="481:56"><name pos:start="481:32" pos:end="481:51">bytestream2_get_byte</name><argument_list pos:start="481:52" pos:end="481:56">(<argument pos:start="481:53" pos:end="481:55"><expr pos:start="481:53" pos:end="481:55"><operator pos:start="481:53" pos:end="481:53">&amp;</operator><name pos:start="481:54" pos:end="481:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:57"><expr pos:start="483:13" pos:end="483:56"><name pos:start="483:13" pos:end="483:26"><name pos:start="483:13" pos:end="483:13">s</name><operator pos:start="483:14" pos:end="483:15">-&gt;</operator><name pos:start="483:16" pos:end="483:26">float_shift</name></name>   <operator pos:start="483:30" pos:end="483:30">=</operator> <call pos:start="483:32" pos:end="483:56"><name pos:start="483:32" pos:end="483:51">bytestream2_get_byte</name><argument_list pos:start="483:52" pos:end="483:56">(<argument pos:start="483:53" pos:end="483:55"><expr pos:start="483:53" pos:end="483:55"><operator pos:start="483:53" pos:end="483:53">&amp;</operator><name pos:start="483:54" pos:end="483:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:57"><expr pos:start="485:13" pos:end="485:56"><name pos:start="485:13" pos:end="485:28"><name pos:start="485:13" pos:end="485:13">s</name><operator pos:start="485:14" pos:end="485:15">-&gt;</operator><name pos:start="485:16" pos:end="485:28">float_max_exp</name></name> <operator pos:start="485:30" pos:end="485:30">=</operator> <call pos:start="485:32" pos:end="485:56"><name pos:start="485:32" pos:end="485:51">bytestream2_get_byte</name><argument_list pos:start="485:52" pos:end="485:56">(<argument pos:start="485:53" pos:end="485:55"><expr pos:start="485:53" pos:end="485:55"><operator pos:start="485:53" pos:end="485:53">&amp;</operator><name pos:start="485:54" pos:end="485:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:33"><expr pos:start="487:13" pos:end="487:32"><name pos:start="487:13" pos:end="487:21">got_float</name>        <operator pos:start="487:30" pos:end="487:30">=</operator> <literal type="number" pos:start="487:32" pos:end="487:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:37"><expr pos:start="489:13" pos:end="489:36"><call pos:start="489:13" pos:end="489:36"><name pos:start="489:13" pos:end="489:28">bytestream2_skip</name><argument_list pos:start="489:29" pos:end="489:36">(<argument pos:start="489:30" pos:end="489:32"><expr pos:start="489:30" pos:end="489:32"><operator pos:start="489:30" pos:end="489:30">&amp;</operator><name pos:start="489:31" pos:end="489:32">gb</name></expr></argument>, <argument pos:start="489:35" pos:end="489:35"><expr pos:start="489:35" pos:end="489:35"><literal type="number" pos:start="489:35" pos:end="489:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="491:13" pos:end="491:18">break;</break>

        <case pos:start="493:9" pos:end="493:24">case <expr pos:start="493:14" pos:end="493:23"><name pos:start="493:14" pos:end="493:23">WP_ID_DATA</name></expr>:</case>

            <expr_stmt pos:start="495:13" pos:end="495:49"><expr pos:start="495:13" pos:end="495:48"><name pos:start="495:13" pos:end="495:24"><name pos:start="495:13" pos:end="495:13">s</name><operator pos:start="495:14" pos:end="495:15">-&gt;</operator><name pos:start="495:16" pos:end="495:17">sc</name><operator pos:start="495:18" pos:end="495:18">.</operator><name pos:start="495:19" pos:end="495:24">offset</name></name> <operator pos:start="495:26" pos:end="495:26">=</operator> <call pos:start="495:28" pos:end="495:48"><name pos:start="495:28" pos:end="495:43">bytestream2_tell</name><argument_list pos:start="495:44" pos:end="495:48">(<argument pos:start="495:45" pos:end="495:47"><expr pos:start="495:45" pos:end="495:47"><operator pos:start="495:45" pos:end="495:45">&amp;</operator><name pos:start="495:46" pos:end="495:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:36"><expr pos:start="497:13" pos:end="497:35"><name pos:start="497:13" pos:end="497:22"><name pos:start="497:13" pos:end="497:13">s</name><operator pos:start="497:14" pos:end="497:15">-&gt;</operator><name pos:start="497:16" pos:end="497:17">sc</name><operator pos:start="497:18" pos:end="497:18">.</operator><name pos:start="497:19" pos:end="497:22">size</name></name>   <operator pos:start="497:26" pos:end="497:26">=</operator> <name pos:start="497:28" pos:end="497:31">size</name> <operator pos:start="497:33" pos:end="497:33">*</operator> <literal type="number" pos:start="497:35" pos:end="497:35">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="499:13" pos:end="501:27"><if pos:start="499:13" pos:end="501:27">if <condition pos:start="499:16" pos:end="499:68">(<expr pos:start="499:17" pos:end="499:67"><operator pos:start="499:17" pos:end="499:17">(</operator><name pos:start="499:18" pos:end="499:20">ret</name> <operator pos:start="499:22" pos:end="499:22">=</operator> <call pos:start="499:24" pos:end="499:62"><name pos:start="499:24" pos:end="499:37">init_get_bits8</name><argument_list pos:start="499:38" pos:end="499:62">(<argument pos:start="499:39" pos:end="499:44"><expr pos:start="499:39" pos:end="499:44"><operator pos:start="499:39" pos:end="499:39">&amp;</operator><name pos:start="499:40" pos:end="499:44"><name pos:start="499:40" pos:end="499:40">s</name><operator pos:start="499:41" pos:end="499:42">-&gt;</operator><name pos:start="499:43" pos:end="499:44">gb</name></name></expr></argument>, <argument pos:start="499:47" pos:end="499:55"><expr pos:start="499:47" pos:end="499:55"><name pos:start="499:47" pos:end="499:55"><name pos:start="499:47" pos:end="499:48">gb</name><operator pos:start="499:49" pos:end="499:49">.</operator><name pos:start="499:50" pos:end="499:55">buffer</name></name></expr></argument>, <argument pos:start="499:58" pos:end="499:61"><expr pos:start="499:58" pos:end="499:61"><name pos:start="499:58" pos:end="499:61">size</name></expr></argument>)</argument_list></call><operator pos:start="499:63" pos:end="499:63">)</operator> <operator pos:start="499:65" pos:end="499:65">&lt;</operator> <literal type="number" pos:start="499:67" pos:end="499:67">0</literal></expr>)</condition><block type="pseudo" pos:start="501:17" pos:end="501:27"><block_content pos:start="501:17" pos:end="501:27">

                <return pos:start="501:17" pos:end="501:27">return <expr pos:start="501:24" pos:end="501:26"><name pos:start="501:24" pos:end="501:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:36"><expr pos:start="503:13" pos:end="503:35"><name pos:start="503:13" pos:end="503:24"><name pos:start="503:13" pos:end="503:13">s</name><operator pos:start="503:14" pos:end="503:15">-&gt;</operator><name pos:start="503:16" pos:end="503:24">data_size</name></name> <operator pos:start="503:26" pos:end="503:26">=</operator> <name pos:start="503:28" pos:end="503:31">size</name> <operator pos:start="503:33" pos:end="503:33">*</operator> <literal type="number" pos:start="503:35" pos:end="503:35">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:40"><expr pos:start="505:13" pos:end="505:39"><call pos:start="505:13" pos:end="505:39"><name pos:start="505:13" pos:end="505:28">bytestream2_skip</name><argument_list pos:start="505:29" pos:end="505:39">(<argument pos:start="505:30" pos:end="505:32"><expr pos:start="505:30" pos:end="505:32"><operator pos:start="505:30" pos:end="505:30">&amp;</operator><name pos:start="505:31" pos:end="505:32">gb</name></expr></argument>, <argument pos:start="505:35" pos:end="505:38"><expr pos:start="505:35" pos:end="505:38"><name pos:start="505:35" pos:end="505:38">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:29"><expr pos:start="507:13" pos:end="507:28"><name pos:start="507:13" pos:end="507:18">got_bs</name>       <operator pos:start="507:26" pos:end="507:26">=</operator> <literal type="number" pos:start="507:28" pos:end="507:28">1</literal></expr>;</expr_stmt>

            <break pos:start="509:13" pos:end="509:18">break;</break>

        <case pos:start="511:9" pos:end="511:29">case <expr pos:start="511:14" pos:end="511:28"><name pos:start="511:14" pos:end="511:28">WP_ID_EXTRABITS</name></expr>:</case>

            <if_stmt pos:start="513:13" pos:end="523:13"><if pos:start="513:13" pos:end="523:13">if <condition pos:start="513:16" pos:end="513:26">(<expr pos:start="513:17" pos:end="513:25"><name pos:start="513:17" pos:end="513:20">size</name> <operator pos:start="513:22" pos:end="513:23">&lt;=</operator> <literal type="number" pos:start="513:25" pos:end="513:25">4</literal></expr>)</condition> <block pos:start="513:28" pos:end="523:13">{<block_content pos:start="515:17" pos:end="521:25">

                <expr_stmt pos:start="515:17" pos:end="517:29"><expr pos:start="515:17" pos:end="517:28"><call pos:start="515:17" pos:end="517:28"><name pos:start="515:17" pos:end="515:22">av_log</name><argument_list pos:start="515:23" pos:end="517:28">(<argument pos:start="515:24" pos:end="515:28"><expr pos:start="515:24" pos:end="515:28"><name pos:start="515:24" pos:end="515:28">avctx</name></expr></argument>, <argument pos:start="515:31" pos:end="515:42"><expr pos:start="515:31" pos:end="515:42"><name pos:start="515:31" pos:end="515:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="515:45" pos:end="515:76"><expr pos:start="515:45" pos:end="515:76"><literal type="string" pos:start="515:45" pos:end="515:76">"Invalid EXTRABITS, size = %i\n"</literal></expr></argument>,

                       <argument pos:start="517:24" pos:end="517:27"><expr pos:start="517:24" pos:end="517:27"><name pos:start="517:24" pos:end="517:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="519:17" pos:end="519:44"><expr pos:start="519:17" pos:end="519:43"><call pos:start="519:17" pos:end="519:43"><name pos:start="519:17" pos:end="519:32">bytestream2_skip</name><argument_list pos:start="519:33" pos:end="519:43">(<argument pos:start="519:34" pos:end="519:36"><expr pos:start="519:34" pos:end="519:36"><operator pos:start="519:34" pos:end="519:34">&amp;</operator><name pos:start="519:35" pos:end="519:36">gb</name></expr></argument>, <argument pos:start="519:39" pos:end="519:42"><expr pos:start="519:39" pos:end="519:42"><name pos:start="519:39" pos:end="519:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="521:17" pos:end="521:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="525:13" pos:end="525:55"><expr pos:start="525:13" pos:end="525:54"><name pos:start="525:13" pos:end="525:30"><name pos:start="525:13" pos:end="525:13">s</name><operator pos:start="525:14" pos:end="525:15">-&gt;</operator><name pos:start="525:16" pos:end="525:23">extra_sc</name><operator pos:start="525:24" pos:end="525:24">.</operator><name pos:start="525:25" pos:end="525:30">offset</name></name> <operator pos:start="525:32" pos:end="525:32">=</operator> <call pos:start="525:34" pos:end="525:54"><name pos:start="525:34" pos:end="525:49">bytestream2_tell</name><argument_list pos:start="525:50" pos:end="525:54">(<argument pos:start="525:51" pos:end="525:53"><expr pos:start="525:51" pos:end="525:53"><operator pos:start="525:51" pos:end="525:51">&amp;</operator><name pos:start="525:52" pos:end="525:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="527:13" pos:end="527:42"><expr pos:start="527:13" pos:end="527:41"><name pos:start="527:13" pos:end="527:28"><name pos:start="527:13" pos:end="527:13">s</name><operator pos:start="527:14" pos:end="527:15">-&gt;</operator><name pos:start="527:16" pos:end="527:23">extra_sc</name><operator pos:start="527:24" pos:end="527:24">.</operator><name pos:start="527:25" pos:end="527:28">size</name></name>   <operator pos:start="527:32" pos:end="527:32">=</operator> <name pos:start="527:34" pos:end="527:37">size</name> <operator pos:start="527:39" pos:end="527:39">*</operator> <literal type="number" pos:start="527:41" pos:end="527:41">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="529:13" pos:end="531:27"><if pos:start="529:13" pos:end="531:27">if <condition pos:start="529:16" pos:end="529:79">(<expr pos:start="529:17" pos:end="529:78"><operator pos:start="529:17" pos:end="529:17">(</operator><name pos:start="529:18" pos:end="529:20">ret</name> <operator pos:start="529:22" pos:end="529:22">=</operator> <call pos:start="529:24" pos:end="529:73"><name pos:start="529:24" pos:end="529:37">init_get_bits8</name><argument_list pos:start="529:38" pos:end="529:73">(<argument pos:start="529:39" pos:end="529:55"><expr pos:start="529:39" pos:end="529:55"><operator pos:start="529:39" pos:end="529:39">&amp;</operator><name pos:start="529:40" pos:end="529:55"><name pos:start="529:40" pos:end="529:40">s</name><operator pos:start="529:41" pos:end="529:42">-&gt;</operator><name pos:start="529:43" pos:end="529:55">gb_extra_bits</name></name></expr></argument>, <argument pos:start="529:58" pos:end="529:66"><expr pos:start="529:58" pos:end="529:66"><name pos:start="529:58" pos:end="529:66"><name pos:start="529:58" pos:end="529:59">gb</name><operator pos:start="529:60" pos:end="529:60">.</operator><name pos:start="529:61" pos:end="529:66">buffer</name></name></expr></argument>, <argument pos:start="529:69" pos:end="529:72"><expr pos:start="529:69" pos:end="529:72"><name pos:start="529:69" pos:end="529:72">size</name></expr></argument>)</argument_list></call><operator pos:start="529:74" pos:end="529:74">)</operator> <operator pos:start="529:76" pos:end="529:76">&lt;</operator> <literal type="number" pos:start="529:78" pos:end="529:78">0</literal></expr>)</condition><block type="pseudo" pos:start="531:17" pos:end="531:27"><block_content pos:start="531:17" pos:end="531:27">

                <return pos:start="531:17" pos:end="531:27">return <expr pos:start="531:24" pos:end="531:26"><name pos:start="531:24" pos:end="531:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:70"><expr pos:start="533:13" pos:end="533:69"><name pos:start="533:13" pos:end="533:29"><name pos:start="533:13" pos:end="533:13">s</name><operator pos:start="533:14" pos:end="533:15">-&gt;</operator><name pos:start="533:16" pos:end="533:29">crc_extra_bits</name></name>  <operator pos:start="533:32" pos:end="533:32">=</operator> <call pos:start="533:34" pos:end="533:69"><name pos:start="533:34" pos:end="533:46">get_bits_long</name><argument_list pos:start="533:47" pos:end="533:69">(<argument pos:start="533:48" pos:end="533:64"><expr pos:start="533:48" pos:end="533:64"><operator pos:start="533:48" pos:end="533:48">&amp;</operator><name pos:start="533:49" pos:end="533:64"><name pos:start="533:49" pos:end="533:49">s</name><operator pos:start="533:50" pos:end="533:51">-&gt;</operator><name pos:start="533:52" pos:end="533:64">gb_extra_bits</name></name></expr></argument>, <argument pos:start="533:67" pos:end="533:68"><expr pos:start="533:67" pos:end="533:68"><literal type="number" pos:start="533:67" pos:end="533:68">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="535:13" pos:end="535:40"><expr pos:start="535:13" pos:end="535:39"><call pos:start="535:13" pos:end="535:39"><name pos:start="535:13" pos:end="535:28">bytestream2_skip</name><argument_list pos:start="535:29" pos:end="535:39">(<argument pos:start="535:30" pos:end="535:32"><expr pos:start="535:30" pos:end="535:32"><operator pos:start="535:30" pos:end="535:30">&amp;</operator><name pos:start="535:31" pos:end="535:32">gb</name></expr></argument>, <argument pos:start="535:35" pos:end="535:38"><expr pos:start="535:35" pos:end="535:38"><name pos:start="535:35" pos:end="535:38">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="537:13" pos:end="537:35"><expr pos:start="537:13" pos:end="537:34"><name pos:start="537:13" pos:end="537:29"><name pos:start="537:13" pos:end="537:13">s</name><operator pos:start="537:14" pos:end="537:15">-&gt;</operator><name pos:start="537:16" pos:end="537:29">got_extra_bits</name></name>  <operator pos:start="537:32" pos:end="537:32">=</operator> <literal type="number" pos:start="537:34" pos:end="537:34">1</literal></expr>;</expr_stmt>

            <break pos:start="539:13" pos:end="539:18">break;</break>

        <case pos:start="541:9" pos:end="541:28">case <expr pos:start="541:14" pos:end="541:27"><name pos:start="541:14" pos:end="541:27">WP_ID_CHANINFO</name></expr>:</case>

            <if_stmt pos:start="543:13" pos:end="551:13"><if pos:start="543:13" pos:end="551:13">if <condition pos:start="543:16" pos:end="543:26">(<expr pos:start="543:17" pos:end="543:25"><name pos:start="543:17" pos:end="543:20">size</name> <operator pos:start="543:22" pos:end="543:23">&lt;=</operator> <literal type="number" pos:start="543:25" pos:end="543:25">1</literal></expr>)</condition> <block pos:start="543:28" pos:end="551:13">{<block_content pos:start="545:17" pos:end="549:43">

                <expr_stmt pos:start="545:17" pos:end="547:61"><expr pos:start="545:17" pos:end="547:60"><call pos:start="545:17" pos:end="547:60"><name pos:start="545:17" pos:end="545:22">av_log</name><argument_list pos:start="545:23" pos:end="547:60">(<argument pos:start="545:24" pos:end="545:28"><expr pos:start="545:24" pos:end="545:28"><name pos:start="545:24" pos:end="545:28">avctx</name></expr></argument>, <argument pos:start="545:31" pos:end="545:42"><expr pos:start="545:31" pos:end="545:42"><name pos:start="545:31" pos:end="545:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="547:24" pos:end="547:59"><expr pos:start="547:24" pos:end="547:59"><literal type="string" pos:start="547:24" pos:end="547:59">"Insufficient channel information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="549:17" pos:end="549:43">return <expr pos:start="549:24" pos:end="549:42"><name pos:start="549:24" pos:end="549:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:45"><expr pos:start="553:13" pos:end="553:44"><name pos:start="553:13" pos:end="553:16">chan</name> <operator pos:start="553:18" pos:end="553:18">=</operator> <call pos:start="553:20" pos:end="553:44"><name pos:start="553:20" pos:end="553:39">bytestream2_get_byte</name><argument_list pos:start="553:40" pos:end="553:44">(<argument pos:start="553:41" pos:end="553:43"><expr pos:start="553:41" pos:end="553:43"><operator pos:start="553:41" pos:end="553:41">&amp;</operator><name pos:start="553:42" pos:end="553:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="555:13" pos:end="607:13">switch <condition pos:start="555:20" pos:end="555:29">(<expr pos:start="555:21" pos:end="555:28"><name pos:start="555:21" pos:end="555:24">size</name> <operator pos:start="555:26" pos:end="555:26">-</operator> <literal type="number" pos:start="555:28" pos:end="555:28">2</literal></expr>)</condition> <block pos:start="555:31" pos:end="607:13">{<block_content pos:start="557:13" pos:end="605:47">

            <case pos:start="557:13" pos:end="557:19">case <expr pos:start="557:18" pos:end="557:18"><literal type="number" pos:start="557:18" pos:end="557:18">0</literal></expr>:</case>

                <expr_stmt pos:start="559:17" pos:end="559:51"><expr pos:start="559:17" pos:end="559:50"><name pos:start="559:17" pos:end="559:22">chmask</name> <operator pos:start="559:24" pos:end="559:24">=</operator> <call pos:start="559:26" pos:end="559:50"><name pos:start="559:26" pos:end="559:45">bytestream2_get_byte</name><argument_list pos:start="559:46" pos:end="559:50">(<argument pos:start="559:47" pos:end="559:49"><expr pos:start="559:47" pos:end="559:49"><operator pos:start="559:47" pos:end="559:47">&amp;</operator><name pos:start="559:48" pos:end="559:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="561:17" pos:end="561:22">break;</break>

            <case pos:start="563:13" pos:end="563:19">case <expr pos:start="563:18" pos:end="563:18"><literal type="number" pos:start="563:18" pos:end="563:18">1</literal></expr>:</case>

                <expr_stmt pos:start="565:17" pos:end="565:51"><expr pos:start="565:17" pos:end="565:50"><name pos:start="565:17" pos:end="565:22">chmask</name> <operator pos:start="565:24" pos:end="565:24">=</operator> <call pos:start="565:26" pos:end="565:50"><name pos:start="565:26" pos:end="565:45">bytestream2_get_le16</name><argument_list pos:start="565:46" pos:end="565:50">(<argument pos:start="565:47" pos:end="565:49"><expr pos:start="565:47" pos:end="565:49"><operator pos:start="565:47" pos:end="565:47">&amp;</operator><name pos:start="565:48" pos:end="565:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="567:17" pos:end="567:22">break;</break>

            <case pos:start="569:13" pos:end="569:19">case <expr pos:start="569:18" pos:end="569:18"><literal type="number" pos:start="569:18" pos:end="569:18">2</literal></expr>:</case>

                <expr_stmt pos:start="571:17" pos:end="571:51"><expr pos:start="571:17" pos:end="571:50"><name pos:start="571:17" pos:end="571:22">chmask</name> <operator pos:start="571:24" pos:end="571:24">=</operator> <call pos:start="571:26" pos:end="571:50"><name pos:start="571:26" pos:end="571:45">bytestream2_get_le24</name><argument_list pos:start="571:46" pos:end="571:50">(<argument pos:start="571:47" pos:end="571:49"><expr pos:start="571:47" pos:end="571:49"><operator pos:start="571:47" pos:end="571:47">&amp;</operator><name pos:start="571:48" pos:end="571:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="573:17" pos:end="573:22">break;</break>

            <case pos:start="575:13" pos:end="575:19">case <expr pos:start="575:18" pos:end="575:18"><literal type="number" pos:start="575:18" pos:end="575:18">3</literal></expr>:</case>

                <expr_stmt pos:start="577:17" pos:end="577:51"><expr pos:start="577:17" pos:end="577:50"><name pos:start="577:17" pos:end="577:22">chmask</name> <operator pos:start="577:24" pos:end="577:24">=</operator> <call pos:start="577:26" pos:end="577:50"><name pos:start="577:26" pos:end="577:45">bytestream2_get_le32</name><argument_list pos:start="577:46" pos:end="577:50">(<argument pos:start="577:47" pos:end="577:49"><expr pos:start="577:47" pos:end="577:49"><operator pos:start="577:47" pos:end="577:47">&amp;</operator><name pos:start="577:48" pos:end="577:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="579:17" pos:end="579:22">break;</break>

            <case pos:start="581:13" pos:end="581:19">case <expr pos:start="581:18" pos:end="581:18"><literal type="number" pos:start="581:18" pos:end="581:18">5</literal></expr>:</case>

                <expr_stmt pos:start="583:17" pos:end="583:49"><expr pos:start="583:17" pos:end="583:48"><name pos:start="583:17" pos:end="583:20">size</name> <operator pos:start="583:22" pos:end="583:22">=</operator> <call pos:start="583:24" pos:end="583:48"><name pos:start="583:24" pos:end="583:43">bytestream2_get_byte</name><argument_list pos:start="583:44" pos:end="583:48">(<argument pos:start="583:45" pos:end="583:47"><expr pos:start="583:45" pos:end="583:47"><operator pos:start="583:45" pos:end="583:45">&amp;</operator><name pos:start="583:46" pos:end="583:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="585:17" pos:end="589:71"><if pos:start="585:17" pos:end="589:71">if <condition pos:start="585:20" pos:end="585:44">(<expr pos:start="585:21" pos:end="585:43"><name pos:start="585:21" pos:end="585:35"><name pos:start="585:21" pos:end="585:25">avctx</name><operator pos:start="585:26" pos:end="585:27">-&gt;</operator><name pos:start="585:28" pos:end="585:35">channels</name></name> <operator pos:start="585:37" pos:end="585:38">!=</operator> <name pos:start="585:40" pos:end="585:43">size</name></expr>)</condition><block type="pseudo" pos:start="587:21" pos:end="589:71"><block_content pos:start="587:21" pos:end="589:71">

                    <expr_stmt pos:start="587:21" pos:end="589:71"><expr pos:start="587:21" pos:end="589:70"><call pos:start="587:21" pos:end="589:70"><name pos:start="587:21" pos:end="587:26">av_log</name><argument_list pos:start="587:27" pos:end="589:70">(<argument pos:start="587:28" pos:end="587:32"><expr pos:start="587:28" pos:end="587:32"><name pos:start="587:28" pos:end="587:32">avctx</name></expr></argument>, <argument pos:start="587:35" pos:end="587:48"><expr pos:start="587:35" pos:end="587:48"><name pos:start="587:35" pos:end="587:48">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="587:51" pos:end="589:46"><expr pos:start="587:51" pos:end="589:46"><literal type="string" pos:start="587:51" pos:end="587:73">"%i channels signalled"</literal>

                           <literal type="string" pos:start="589:28" pos:end="589:46">" instead of %i.\n"</literal></expr></argument>, <argument pos:start="589:49" pos:end="589:52"><expr pos:start="589:49" pos:end="589:52"><name pos:start="589:49" pos:end="589:52">size</name></expr></argument>, <argument pos:start="589:55" pos:end="589:69"><expr pos:start="589:55" pos:end="589:69"><name pos:start="589:55" pos:end="589:69"><name pos:start="589:55" pos:end="589:59">avctx</name><operator pos:start="589:60" pos:end="589:61">-&gt;</operator><name pos:start="589:62" pos:end="589:69">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="591:17" pos:end="591:64"><expr pos:start="591:17" pos:end="591:63"><name pos:start="591:17" pos:end="591:20">chan</name>  <operator pos:start="591:23" pos:end="591:24">|=</operator> <operator pos:start="591:26" pos:end="591:26">(</operator><call pos:start="591:27" pos:end="591:51"><name pos:start="591:27" pos:end="591:46">bytestream2_get_byte</name><argument_list pos:start="591:47" pos:end="591:51">(<argument pos:start="591:48" pos:end="591:50"><expr pos:start="591:48" pos:end="591:50"><operator pos:start="591:48" pos:end="591:48">&amp;</operator><name pos:start="591:49" pos:end="591:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="591:53" pos:end="591:53">&amp;</operator> <literal type="number" pos:start="591:55" pos:end="591:57">0xF</literal><operator pos:start="591:58" pos:end="591:58">)</operator> <operator pos:start="591:60" pos:end="591:61">&lt;&lt;</operator> <literal type="number" pos:start="591:63" pos:end="591:63">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="593:17" pos:end="593:51"><expr pos:start="593:17" pos:end="593:50"><name pos:start="593:17" pos:end="593:22">chmask</name> <operator pos:start="593:24" pos:end="593:24">=</operator> <call pos:start="593:26" pos:end="593:50"><name pos:start="593:26" pos:end="593:45">bytestream2_get_le16</name><argument_list pos:start="593:46" pos:end="593:50">(<argument pos:start="593:47" pos:end="593:49"><expr pos:start="593:47" pos:end="593:49"><operator pos:start="593:47" pos:end="593:47">&amp;</operator><name pos:start="593:48" pos:end="593:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="595:17" pos:end="595:22">break;</break>

            <default pos:start="597:13" pos:end="597:20">default:</default>

                <expr_stmt pos:start="599:17" pos:end="601:29"><expr pos:start="599:17" pos:end="601:28"><call pos:start="599:17" pos:end="601:28"><name pos:start="599:17" pos:end="599:22">av_log</name><argument_list pos:start="599:23" pos:end="601:28">(<argument pos:start="599:24" pos:end="599:28"><expr pos:start="599:24" pos:end="599:28"><name pos:start="599:24" pos:end="599:28">avctx</name></expr></argument>, <argument pos:start="599:31" pos:end="599:42"><expr pos:start="599:31" pos:end="599:42"><name pos:start="599:31" pos:end="599:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="599:45" pos:end="599:76"><expr pos:start="599:45" pos:end="599:76"><literal type="string" pos:start="599:45" pos:end="599:76">"Invalid channel info size %d\n"</literal></expr></argument>,

                       <argument pos:start="601:24" pos:end="601:27"><expr pos:start="601:24" pos:end="601:27"><name pos:start="601:24" pos:end="601:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="603:17" pos:end="603:41"><expr pos:start="603:17" pos:end="603:40"><name pos:start="603:17" pos:end="603:20">chan</name>   <operator pos:start="603:24" pos:end="603:24">=</operator> <name pos:start="603:26" pos:end="603:40"><name pos:start="603:26" pos:end="603:30">avctx</name><operator pos:start="603:31" pos:end="603:32">-&gt;</operator><name pos:start="603:33" pos:end="603:40">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="605:17" pos:end="605:47"><expr pos:start="605:17" pos:end="605:46"><name pos:start="605:17" pos:end="605:22">chmask</name> <operator pos:start="605:24" pos:end="605:24">=</operator> <name pos:start="605:26" pos:end="605:46"><name pos:start="605:26" pos:end="605:30">avctx</name><operator pos:start="605:31" pos:end="605:32">-&gt;</operator><name pos:start="605:33" pos:end="605:46">channel_layout</name></name></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <break pos:start="609:13" pos:end="609:18">break;</break>

        <case pos:start="611:9" pos:end="611:31">case <expr pos:start="611:14" pos:end="611:30"><name pos:start="611:14" pos:end="611:30">WP_ID_SAMPLE_RATE</name></expr>:</case>

            <if_stmt pos:start="613:13" pos:end="619:13"><if pos:start="613:13" pos:end="619:13">if <condition pos:start="613:16" pos:end="613:26">(<expr pos:start="613:17" pos:end="613:25"><name pos:start="613:17" pos:end="613:20">size</name> <operator pos:start="613:22" pos:end="613:23">!=</operator> <literal type="number" pos:start="613:25" pos:end="613:25">3</literal></expr>)</condition> <block pos:start="613:28" pos:end="619:13">{<block_content pos:start="615:17" pos:end="617:43">

                <expr_stmt pos:start="615:17" pos:end="615:77"><expr pos:start="615:17" pos:end="615:76"><call pos:start="615:17" pos:end="615:76"><name pos:start="615:17" pos:end="615:22">av_log</name><argument_list pos:start="615:23" pos:end="615:76">(<argument pos:start="615:24" pos:end="615:28"><expr pos:start="615:24" pos:end="615:28"><name pos:start="615:24" pos:end="615:28">avctx</name></expr></argument>, <argument pos:start="615:31" pos:end="615:42"><expr pos:start="615:31" pos:end="615:42"><name pos:start="615:31" pos:end="615:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="615:45" pos:end="615:75"><expr pos:start="615:45" pos:end="615:75"><literal type="string" pos:start="615:45" pos:end="615:75">"Invalid custom sample rate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="617:17" pos:end="617:43">return <expr pos:start="617:24" pos:end="617:42"><name pos:start="617:24" pos:end="617:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="621:13" pos:end="621:52"><expr pos:start="621:13" pos:end="621:51"><name pos:start="621:13" pos:end="621:23">sample_rate</name> <operator pos:start="621:25" pos:end="621:25">=</operator> <call pos:start="621:27" pos:end="621:51"><name pos:start="621:27" pos:end="621:46">bytestream2_get_le24</name><argument_list pos:start="621:47" pos:end="621:51">(<argument pos:start="621:48" pos:end="621:50"><expr pos:start="621:48" pos:end="621:50"><operator pos:start="621:48" pos:end="621:48">&amp;</operator><name pos:start="621:49" pos:end="621:50">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="623:13" pos:end="623:18">break;</break>

        <default pos:start="625:9" pos:end="625:16">default:</default>

            <expr_stmt pos:start="627:13" pos:end="627:40"><expr pos:start="627:13" pos:end="627:39"><call pos:start="627:13" pos:end="627:39"><name pos:start="627:13" pos:end="627:28">bytestream2_skip</name><argument_list pos:start="627:29" pos:end="627:39">(<argument pos:start="627:30" pos:end="627:32"><expr pos:start="627:30" pos:end="627:32"><operator pos:start="627:30" pos:end="627:30">&amp;</operator><name pos:start="627:31" pos:end="627:32">gb</name></expr></argument>, <argument pos:start="627:35" pos:end="627:38"><expr pos:start="627:35" pos:end="627:38"><name pos:start="627:35" pos:end="627:38">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="631:9" pos:end="633:37"><if pos:start="631:9" pos:end="633:37">if <condition pos:start="631:12" pos:end="631:28">(<expr pos:start="631:13" pos:end="631:27"><name pos:start="631:13" pos:end="631:14">id</name> <operator pos:start="631:16" pos:end="631:16">&amp;</operator> <name pos:start="631:18" pos:end="631:27">WP_IDF_ODD</name></expr>)</condition><block type="pseudo" pos:start="633:13" pos:end="633:37"><block_content pos:start="633:13" pos:end="633:37">

            <expr_stmt pos:start="633:13" pos:end="633:37"><expr pos:start="633:13" pos:end="633:36"><call pos:start="633:13" pos:end="633:36"><name pos:start="633:13" pos:end="633:28">bytestream2_skip</name><argument_list pos:start="633:29" pos:end="633:36">(<argument pos:start="633:30" pos:end="633:32"><expr pos:start="633:30" pos:end="633:32"><operator pos:start="633:30" pos:end="633:30">&amp;</operator><name pos:start="633:31" pos:end="633:32">gb</name></expr></argument>, <argument pos:start="633:35" pos:end="633:35"><expr pos:start="633:35" pos:end="633:35"><literal type="number" pos:start="633:35" pos:end="633:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="639:5" pos:end="645:5"><if pos:start="639:5" pos:end="645:5">if <condition pos:start="639:8" pos:end="639:19">(<expr pos:start="639:9" pos:end="639:18"><operator pos:start="639:9" pos:end="639:9">!</operator><name pos:start="639:10" pos:end="639:18">got_terms</name></expr>)</condition> <block pos:start="639:21" pos:end="645:5">{<block_content pos:start="641:9" pos:end="643:35">

        <expr_stmt pos:start="641:9" pos:end="641:75"><expr pos:start="641:9" pos:end="641:74"><call pos:start="641:9" pos:end="641:74"><name pos:start="641:9" pos:end="641:14">av_log</name><argument_list pos:start="641:15" pos:end="641:74">(<argument pos:start="641:16" pos:end="641:20"><expr pos:start="641:16" pos:end="641:20"><name pos:start="641:16" pos:end="641:20">avctx</name></expr></argument>, <argument pos:start="641:23" pos:end="641:34"><expr pos:start="641:23" pos:end="641:34"><name pos:start="641:23" pos:end="641:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="641:37" pos:end="641:73"><expr pos:start="641:37" pos:end="641:73"><literal type="string" pos:start="641:37" pos:end="641:73">"No block with decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="643:9" pos:end="643:35">return <expr pos:start="643:16" pos:end="643:34"><name pos:start="643:16" pos:end="643:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="647:5" pos:end="653:5"><if pos:start="647:5" pos:end="653:5">if <condition pos:start="647:8" pos:end="647:21">(<expr pos:start="647:9" pos:end="647:20"><operator pos:start="647:9" pos:end="647:9">!</operator><name pos:start="647:10" pos:end="647:20">got_weights</name></expr>)</condition> <block pos:start="647:23" pos:end="653:5">{<block_content pos:start="649:9" pos:end="651:35">

        <expr_stmt pos:start="649:9" pos:end="649:77"><expr pos:start="649:9" pos:end="649:76"><call pos:start="649:9" pos:end="649:76"><name pos:start="649:9" pos:end="649:14">av_log</name><argument_list pos:start="649:15" pos:end="649:76">(<argument pos:start="649:16" pos:end="649:20"><expr pos:start="649:16" pos:end="649:20"><name pos:start="649:16" pos:end="649:20">avctx</name></expr></argument>, <argument pos:start="649:23" pos:end="649:34"><expr pos:start="649:23" pos:end="649:34"><name pos:start="649:23" pos:end="649:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="649:37" pos:end="649:75"><expr pos:start="649:37" pos:end="649:75"><literal type="string" pos:start="649:37" pos:end="649:75">"No block with decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="651:9" pos:end="651:35">return <expr pos:start="651:16" pos:end="651:34"><name pos:start="651:16" pos:end="651:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="655:5" pos:end="661:5"><if pos:start="655:5" pos:end="661:5">if <condition pos:start="655:8" pos:end="655:21">(<expr pos:start="655:9" pos:end="655:20"><operator pos:start="655:9" pos:end="655:9">!</operator><name pos:start="655:10" pos:end="655:20">got_samples</name></expr>)</condition> <block pos:start="655:23" pos:end="661:5">{<block_content pos:start="657:9" pos:end="659:35">

        <expr_stmt pos:start="657:9" pos:end="657:77"><expr pos:start="657:9" pos:end="657:76"><call pos:start="657:9" pos:end="657:76"><name pos:start="657:9" pos:end="657:14">av_log</name><argument_list pos:start="657:15" pos:end="657:76">(<argument pos:start="657:16" pos:end="657:20"><expr pos:start="657:16" pos:end="657:20"><name pos:start="657:16" pos:end="657:20">avctx</name></expr></argument>, <argument pos:start="657:23" pos:end="657:34"><expr pos:start="657:23" pos:end="657:34"><name pos:start="657:23" pos:end="657:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="657:37" pos:end="657:75"><expr pos:start="657:37" pos:end="657:75"><literal type="string" pos:start="657:37" pos:end="657:75">"No block with decorrelation samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="659:9" pos:end="659:35">return <expr pos:start="659:16" pos:end="659:34"><name pos:start="659:16" pos:end="659:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="663:5" pos:end="669:5"><if pos:start="663:5" pos:end="669:5">if <condition pos:start="663:8" pos:end="663:21">(<expr pos:start="663:9" pos:end="663:20"><operator pos:start="663:9" pos:end="663:9">!</operator><name pos:start="663:10" pos:end="663:20">got_entropy</name></expr>)</condition> <block pos:start="663:23" pos:end="669:5">{<block_content pos:start="665:9" pos:end="667:35">

        <expr_stmt pos:start="665:9" pos:end="665:68"><expr pos:start="665:9" pos:end="665:67"><call pos:start="665:9" pos:end="665:67"><name pos:start="665:9" pos:end="665:14">av_log</name><argument_list pos:start="665:15" pos:end="665:67">(<argument pos:start="665:16" pos:end="665:20"><expr pos:start="665:16" pos:end="665:20"><name pos:start="665:16" pos:end="665:20">avctx</name></expr></argument>, <argument pos:start="665:23" pos:end="665:34"><expr pos:start="665:23" pos:end="665:34"><name pos:start="665:23" pos:end="665:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="665:37" pos:end="665:66"><expr pos:start="665:37" pos:end="665:66"><literal type="string" pos:start="665:37" pos:end="665:66">"No block with entropy info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="667:9" pos:end="667:35">return <expr pos:start="667:16" pos:end="667:34"><name pos:start="667:16" pos:end="667:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="671:5" pos:end="677:5"><if pos:start="671:5" pos:end="677:5">if <condition pos:start="671:8" pos:end="671:33">(<expr pos:start="671:9" pos:end="671:32"><name pos:start="671:9" pos:end="671:17"><name pos:start="671:9" pos:end="671:9">s</name><operator pos:start="671:10" pos:end="671:11">-&gt;</operator><name pos:start="671:12" pos:end="671:17">hybrid</name></name> <operator pos:start="671:19" pos:end="671:20">&amp;&amp;</operator> <operator pos:start="671:22" pos:end="671:22">!</operator><name pos:start="671:23" pos:end="671:32">got_hybrid</name></expr>)</condition> <block pos:start="671:35" pos:end="677:5">{<block_content pos:start="673:9" pos:end="675:35">

        <expr_stmt pos:start="673:9" pos:end="673:65"><expr pos:start="673:9" pos:end="673:64"><call pos:start="673:9" pos:end="673:64"><name pos:start="673:9" pos:end="673:14">av_log</name><argument_list pos:start="673:15" pos:end="673:64">(<argument pos:start="673:16" pos:end="673:20"><expr pos:start="673:16" pos:end="673:20"><name pos:start="673:16" pos:end="673:20">avctx</name></expr></argument>, <argument pos:start="673:23" pos:end="673:34"><expr pos:start="673:23" pos:end="673:34"><name pos:start="673:23" pos:end="673:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="673:37" pos:end="673:63"><expr pos:start="673:37" pos:end="673:63"><literal type="string" pos:start="673:37" pos:end="673:63">"Hybrid config not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="675:9" pos:end="675:35">return <expr pos:start="675:16" pos:end="675:34"><name pos:start="675:16" pos:end="675:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="679:5" pos:end="685:5"><if pos:start="679:5" pos:end="685:5">if <condition pos:start="679:8" pos:end="679:16">(<expr pos:start="679:9" pos:end="679:15"><operator pos:start="679:9" pos:end="679:9">!</operator><name pos:start="679:10" pos:end="679:15">got_bs</name></expr>)</condition> <block pos:start="679:18" pos:end="685:5">{<block_content pos:start="681:9" pos:end="683:35">

        <expr_stmt pos:start="681:9" pos:end="681:66"><expr pos:start="681:9" pos:end="681:65"><call pos:start="681:9" pos:end="681:65"><name pos:start="681:9" pos:end="681:14">av_log</name><argument_list pos:start="681:15" pos:end="681:65">(<argument pos:start="681:16" pos:end="681:20"><expr pos:start="681:16" pos:end="681:20"><name pos:start="681:16" pos:end="681:20">avctx</name></expr></argument>, <argument pos:start="681:23" pos:end="681:34"><expr pos:start="681:23" pos:end="681:34"><name pos:start="681:23" pos:end="681:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="681:37" pos:end="681:64"><expr pos:start="681:37" pos:end="681:64"><literal type="string" pos:start="681:37" pos:end="681:64">"Packed samples not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="683:9" pos:end="683:35">return <expr pos:start="683:16" pos:end="683:34"><name pos:start="683:16" pos:end="683:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="687:5" pos:end="693:5"><if pos:start="687:5" pos:end="693:5">if <condition pos:start="687:8" pos:end="687:62">(<expr pos:start="687:9" pos:end="687:61"><operator pos:start="687:9" pos:end="687:9">!</operator><name pos:start="687:10" pos:end="687:18">got_float</name> <operator pos:start="687:20" pos:end="687:21">&amp;&amp;</operator> <name pos:start="687:23" pos:end="687:39"><name pos:start="687:23" pos:end="687:27">avctx</name><operator pos:start="687:28" pos:end="687:29">-&gt;</operator><name pos:start="687:30" pos:end="687:39">sample_fmt</name></name> <operator pos:start="687:41" pos:end="687:42">==</operator> <name pos:start="687:44" pos:end="687:61">AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block pos:start="687:64" pos:end="693:5">{<block_content pos:start="689:9" pos:end="691:35">

        <expr_stmt pos:start="689:9" pos:end="689:69"><expr pos:start="689:9" pos:end="689:68"><call pos:start="689:9" pos:end="689:68"><name pos:start="689:9" pos:end="689:14">av_log</name><argument_list pos:start="689:15" pos:end="689:68">(<argument pos:start="689:16" pos:end="689:20"><expr pos:start="689:16" pos:end="689:20"><name pos:start="689:16" pos:end="689:20">avctx</name></expr></argument>, <argument pos:start="689:23" pos:end="689:34"><expr pos:start="689:23" pos:end="689:34"><name pos:start="689:23" pos:end="689:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="689:37" pos:end="689:67"><expr pos:start="689:37" pos:end="689:67"><literal type="string" pos:start="689:37" pos:end="689:67">"Float information not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="691:9" pos:end="691:35">return <expr pos:start="691:16" pos:end="691:34"><name pos:start="691:16" pos:end="691:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="695:5" pos:end="709:5"><if pos:start="695:5" pos:end="709:5">if <condition pos:start="695:8" pos:end="695:69">(<expr pos:start="695:9" pos:end="695:68"><name pos:start="695:9" pos:end="695:25"><name pos:start="695:9" pos:end="695:9">s</name><operator pos:start="695:10" pos:end="695:11">-&gt;</operator><name pos:start="695:12" pos:end="695:25">got_extra_bits</name></name> <operator pos:start="695:27" pos:end="695:28">&amp;&amp;</operator> <name pos:start="695:30" pos:end="695:46"><name pos:start="695:30" pos:end="695:34">avctx</name><operator pos:start="695:35" pos:end="695:36">-&gt;</operator><name pos:start="695:37" pos:end="695:46">sample_fmt</name></name> <operator pos:start="695:48" pos:end="695:49">!=</operator> <name pos:start="695:51" pos:end="695:68">AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block pos:start="695:71" pos:end="709:5">{<block_content pos:start="697:9" pos:end="707:9">

        <decl_stmt pos:start="697:9" pos:end="697:60"><decl pos:start="697:9" pos:end="697:59"><type pos:start="697:9" pos:end="697:17"><specifier pos:start="697:9" pos:end="697:13">const</specifier> <name pos:start="697:15" pos:end="697:17">int</name></type> <name pos:start="697:19" pos:end="697:22">size</name>   <init pos:start="697:26" pos:end="697:59">= <expr pos:start="697:28" pos:end="697:59"><call pos:start="697:28" pos:end="697:59"><name pos:start="697:28" pos:end="697:40">get_bits_left</name><argument_list pos:start="697:41" pos:end="697:59">(<argument pos:start="697:42" pos:end="697:58"><expr pos:start="697:42" pos:end="697:58"><operator pos:start="697:42" pos:end="697:42">&amp;</operator><name pos:start="697:43" pos:end="697:58"><name pos:start="697:43" pos:end="697:43">s</name><operator pos:start="697:44" pos:end="697:45">-&gt;</operator><name pos:start="697:46" pos:end="697:58">gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="699:9" pos:end="699:70"><decl pos:start="699:9" pos:end="699:69"><type pos:start="699:9" pos:end="699:17"><specifier pos:start="699:9" pos:end="699:13">const</specifier> <name pos:start="699:15" pos:end="699:17">int</name></type> <name pos:start="699:19" pos:end="699:24">wanted</name> <init pos:start="699:26" pos:end="699:69">= <expr pos:start="699:28" pos:end="699:69"><name pos:start="699:28" pos:end="699:37"><name pos:start="699:28" pos:end="699:28">s</name><operator pos:start="699:29" pos:end="699:30">-&gt;</operator><name pos:start="699:31" pos:end="699:37">samples</name></name> <operator pos:start="699:39" pos:end="699:39">*</operator> <name pos:start="699:41" pos:end="699:53"><name pos:start="699:41" pos:end="699:41">s</name><operator pos:start="699:42" pos:end="699:43">-&gt;</operator><name pos:start="699:44" pos:end="699:53">extra_bits</name></name> <operator pos:start="699:55" pos:end="699:56">&lt;&lt;</operator> <name pos:start="699:58" pos:end="699:69"><name pos:start="699:58" pos:end="699:58">s</name><operator pos:start="699:59" pos:end="699:60">-&gt;</operator><name pos:start="699:61" pos:end="699:69">stereo_in</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="701:9" pos:end="707:9"><if pos:start="701:9" pos:end="707:9">if <condition pos:start="701:12" pos:end="701:26">(<expr pos:start="701:13" pos:end="701:25"><name pos:start="701:13" pos:end="701:16">size</name> <operator pos:start="701:18" pos:end="701:18">&lt;</operator> <name pos:start="701:20" pos:end="701:25">wanted</name></expr>)</condition> <block pos:start="701:28" pos:end="707:9">{<block_content pos:start="703:13" pos:end="705:34">

            <expr_stmt pos:start="703:13" pos:end="703:65"><expr pos:start="703:13" pos:end="703:64"><call pos:start="703:13" pos:end="703:64"><name pos:start="703:13" pos:end="703:18">av_log</name><argument_list pos:start="703:19" pos:end="703:64">(<argument pos:start="703:20" pos:end="703:24"><expr pos:start="703:20" pos:end="703:24"><name pos:start="703:20" pos:end="703:24">avctx</name></expr></argument>, <argument pos:start="703:27" pos:end="703:38"><expr pos:start="703:27" pos:end="703:38"><name pos:start="703:27" pos:end="703:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="703:41" pos:end="703:63"><expr pos:start="703:41" pos:end="703:63"><literal type="string" pos:start="703:41" pos:end="703:63">"Too small EXTRABITS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:34"><expr pos:start="705:13" pos:end="705:33"><name pos:start="705:13" pos:end="705:29"><name pos:start="705:13" pos:end="705:13">s</name><operator pos:start="705:14" pos:end="705:15">-&gt;</operator><name pos:start="705:16" pos:end="705:29">got_extra_bits</name></name> <operator pos:start="705:31" pos:end="705:31">=</operator> <literal type="number" pos:start="705:33" pos:end="705:33">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="713:5" pos:end="767:5"><if pos:start="713:5" pos:end="767:5">if <condition pos:start="713:8" pos:end="713:23">(<expr pos:start="713:9" pos:end="713:22"><operator pos:start="713:9" pos:end="713:9">!</operator><name pos:start="713:10" pos:end="713:22"><name pos:start="713:10" pos:end="713:11">wc</name><operator pos:start="713:12" pos:end="713:13">-&gt;</operator><name pos:start="713:14" pos:end="713:22">ch_offset</name></name></expr>)</condition> <block pos:start="713:25" pos:end="767:5">{<block_content pos:start="715:9" pos:end="765:39">

        <decl_stmt pos:start="715:9" pos:end="715:46"><decl pos:start="715:9" pos:end="715:45"><type pos:start="715:9" pos:end="715:11"><name pos:start="715:9" pos:end="715:11">int</name></type> <name pos:start="715:13" pos:end="715:14">sr</name> <init pos:start="715:16" pos:end="715:45">= <expr pos:start="715:18" pos:end="715:45"><operator pos:start="715:18" pos:end="715:18">(</operator><name pos:start="715:19" pos:end="715:32"><name pos:start="715:19" pos:end="715:19">s</name><operator pos:start="715:20" pos:end="715:21">-&gt;</operator><name pos:start="715:22" pos:end="715:32">frame_flags</name></name> <operator pos:start="715:34" pos:end="715:35">&gt;&gt;</operator> <literal type="number" pos:start="715:37" pos:end="715:38">23</literal><operator pos:start="715:39" pos:end="715:39">)</operator> <operator pos:start="715:41" pos:end="715:41">&amp;</operator> <literal type="number" pos:start="715:43" pos:end="715:45">0xf</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="717:9" pos:end="731:46"><if pos:start="717:9" pos:end="729:9">if <condition pos:start="717:12" pos:end="717:22">(<expr pos:start="717:13" pos:end="717:21"><name pos:start="717:13" pos:end="717:14">sr</name> <operator pos:start="717:16" pos:end="717:17">==</operator> <literal type="number" pos:start="717:19" pos:end="717:21">0xf</literal></expr>)</condition> <block pos:start="717:24" pos:end="729:9">{<block_content pos:start="719:13" pos:end="727:45">

            <if_stmt pos:start="719:13" pos:end="725:13"><if pos:start="719:13" pos:end="725:13">if <condition pos:start="719:16" pos:end="719:29">(<expr pos:start="719:17" pos:end="719:28"><operator pos:start="719:17" pos:end="719:17">!</operator><name pos:start="719:18" pos:end="719:28">sample_rate</name></expr>)</condition> <block pos:start="719:31" pos:end="725:13">{<block_content pos:start="721:17" pos:end="723:43">

                <expr_stmt pos:start="721:17" pos:end="721:77"><expr pos:start="721:17" pos:end="721:76"><call pos:start="721:17" pos:end="721:76"><name pos:start="721:17" pos:end="721:22">av_log</name><argument_list pos:start="721:23" pos:end="721:76">(<argument pos:start="721:24" pos:end="721:28"><expr pos:start="721:24" pos:end="721:28"><name pos:start="721:24" pos:end="721:28">avctx</name></expr></argument>, <argument pos:start="721:31" pos:end="721:42"><expr pos:start="721:31" pos:end="721:42"><name pos:start="721:31" pos:end="721:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="721:45" pos:end="721:75"><expr pos:start="721:45" pos:end="721:75"><literal type="string" pos:start="721:45" pos:end="721:75">"Custom sample rate missing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="723:17" pos:end="723:43">return <expr pos:start="723:24" pos:end="723:42"><name pos:start="723:24" pos:end="723:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="727:13" pos:end="727:45"><expr pos:start="727:13" pos:end="727:44"><name pos:start="727:13" pos:end="727:30"><name pos:start="727:13" pos:end="727:17">avctx</name><operator pos:start="727:18" pos:end="727:19">-&gt;</operator><name pos:start="727:20" pos:end="727:30">sample_rate</name></name> <operator pos:start="727:32" pos:end="727:32">=</operator> <name pos:start="727:34" pos:end="727:44">sample_rate</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="729:11" pos:end="731:46">else<block type="pseudo" pos:start="731:13" pos:end="731:46"><block_content pos:start="731:13" pos:end="731:46">

            <expr_stmt pos:start="731:13" pos:end="731:46"><expr pos:start="731:13" pos:end="731:45"><name pos:start="731:13" pos:end="731:30"><name pos:start="731:13" pos:end="731:17">avctx</name><operator pos:start="731:18" pos:end="731:19">-&gt;</operator><name pos:start="731:20" pos:end="731:30">sample_rate</name></name> <operator pos:start="731:32" pos:end="731:32">=</operator> <name pos:start="731:34" pos:end="731:45"><name pos:start="731:34" pos:end="731:41">wv_rates</name><index pos:start="731:42" pos:end="731:45">[<expr pos:start="731:43" pos:end="731:44"><name pos:start="731:43" pos:end="731:44">sr</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="735:9" pos:end="753:9"><if pos:start="735:9" pos:end="745:9">if <condition pos:start="735:12" pos:end="735:23">(<expr pos:start="735:13" pos:end="735:22"><name pos:start="735:13" pos:end="735:22">multiblock</name></expr>)</condition> <block pos:start="735:25" pos:end="745:9">{<block_content pos:start="737:13" pos:end="743:47">

            <if_stmt pos:start="737:13" pos:end="739:39"><if pos:start="737:13" pos:end="739:39">if <condition pos:start="737:16" pos:end="737:21">(<expr pos:start="737:17" pos:end="737:20"><name pos:start="737:17" pos:end="737:20">chan</name></expr>)</condition><block type="pseudo" pos:start="739:17" pos:end="739:39"><block_content pos:start="739:17" pos:end="739:39">

                <expr_stmt pos:start="739:17" pos:end="739:39"><expr pos:start="739:17" pos:end="739:38"><name pos:start="739:17" pos:end="739:31"><name pos:start="739:17" pos:end="739:21">avctx</name><operator pos:start="739:22" pos:end="739:23">-&gt;</operator><name pos:start="739:24" pos:end="739:31">channels</name></name> <operator pos:start="739:33" pos:end="739:33">=</operator> <name pos:start="739:35" pos:end="739:38">chan</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="741:13" pos:end="743:47"><if pos:start="741:13" pos:end="743:47">if <condition pos:start="741:16" pos:end="741:23">(<expr pos:start="741:17" pos:end="741:22"><name pos:start="741:17" pos:end="741:22">chmask</name></expr>)</condition><block type="pseudo" pos:start="743:17" pos:end="743:47"><block_content pos:start="743:17" pos:end="743:47">

                <expr_stmt pos:start="743:17" pos:end="743:47"><expr pos:start="743:17" pos:end="743:46"><name pos:start="743:17" pos:end="743:37"><name pos:start="743:17" pos:end="743:21">avctx</name><operator pos:start="743:22" pos:end="743:23">-&gt;</operator><name pos:start="743:24" pos:end="743:37">channel_layout</name></name> <operator pos:start="743:39" pos:end="743:39">=</operator> <name pos:start="743:41" pos:end="743:46">chmask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="745:11" pos:end="753:9">else <block pos:start="745:16" pos:end="753:9">{<block_content pos:start="747:13" pos:end="751:66">

            <expr_stmt pos:start="747:13" pos:end="747:54"><expr pos:start="747:13" pos:end="747:53"><name pos:start="747:13" pos:end="747:27"><name pos:start="747:13" pos:end="747:17">avctx</name><operator pos:start="747:18" pos:end="747:19">-&gt;</operator><name pos:start="747:20" pos:end="747:27">channels</name></name>       <operator pos:start="747:35" pos:end="747:35">=</operator> <ternary pos:start="747:37" pos:end="747:53"><condition pos:start="747:37" pos:end="747:47"><expr pos:start="747:37" pos:end="747:45"><name pos:start="747:37" pos:end="747:45"><name pos:start="747:37" pos:end="747:37">s</name><operator pos:start="747:38" pos:end="747:39">-&gt;</operator><name pos:start="747:40" pos:end="747:45">stereo</name></name></expr> ?</condition><then pos:start="747:49" pos:end="747:49"> <expr pos:start="747:49" pos:end="747:49"><literal type="number" pos:start="747:49" pos:end="747:49">2</literal></expr> </then><else pos:start="747:51" pos:end="747:53">: <expr pos:start="747:53" pos:end="747:53"><literal type="number" pos:start="747:53" pos:end="747:53">1</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="749:13" pos:end="751:66"><expr pos:start="749:13" pos:end="751:65"><name pos:start="749:13" pos:end="749:33"><name pos:start="749:13" pos:end="749:17">avctx</name><operator pos:start="749:18" pos:end="749:19">-&gt;</operator><name pos:start="749:20" pos:end="749:33">channel_layout</name></name> <operator pos:start="749:35" pos:end="749:35">=</operator> <ternary pos:start="749:37" pos:end="751:65"><condition pos:start="749:37" pos:end="749:47"><expr pos:start="749:37" pos:end="749:45"><name pos:start="749:37" pos:end="749:45"><name pos:start="749:37" pos:end="749:37">s</name><operator pos:start="749:38" pos:end="749:39">-&gt;</operator><name pos:start="749:40" pos:end="749:45">stereo</name></name></expr> ?</condition><then pos:start="749:49" pos:end="749:67"> <expr pos:start="749:49" pos:end="749:67"><name pos:start="749:49" pos:end="749:67">AV_CH_LAYOUT_STEREO</name></expr> </then><else pos:start="749:69" pos:end="751:65">:

                                                <expr pos:start="751:49" pos:end="751:65"><name pos:start="751:49" pos:end="751:65">AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="757:9" pos:end="757:31">/* get output buffer */</comment>

        <expr_stmt pos:start="759:9" pos:end="759:43"><expr pos:start="759:9" pos:end="759:42"><name pos:start="759:9" pos:end="759:25"><name pos:start="759:9" pos:end="759:13">frame</name><operator pos:start="759:14" pos:end="759:15">-&gt;</operator><name pos:start="759:16" pos:end="759:25">nb_samples</name></name> <operator pos:start="759:27" pos:end="759:27">=</operator> <name pos:start="759:29" pos:end="759:38"><name pos:start="759:29" pos:end="759:29">s</name><operator pos:start="759:30" pos:end="759:31">-&gt;</operator><name pos:start="759:32" pos:end="759:38">samples</name></name> <operator pos:start="759:40" pos:end="759:40">+</operator> <literal type="number" pos:start="759:42" pos:end="759:42">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="761:9" pos:end="763:23"><if pos:start="761:9" pos:end="763:23">if <condition pos:start="761:12" pos:end="761:64">(<expr pos:start="761:13" pos:end="761:63"><operator pos:start="761:13" pos:end="761:13">(</operator><name pos:start="761:14" pos:end="761:16">ret</name> <operator pos:start="761:18" pos:end="761:18">=</operator> <call pos:start="761:20" pos:end="761:58"><name pos:start="761:20" pos:end="761:39">ff_thread_get_buffer</name><argument_list pos:start="761:40" pos:end="761:58">(<argument pos:start="761:41" pos:end="761:45"><expr pos:start="761:41" pos:end="761:45"><name pos:start="761:41" pos:end="761:45">avctx</name></expr></argument>, <argument pos:start="761:48" pos:end="761:54"><expr pos:start="761:48" pos:end="761:54"><operator pos:start="761:48" pos:end="761:48">&amp;</operator><name pos:start="761:49" pos:end="761:54">tframe</name></expr></argument>, <argument pos:start="761:57" pos:end="761:57"><expr pos:start="761:57" pos:end="761:57"><literal type="number" pos:start="761:57" pos:end="761:57">0</literal></expr></argument>)</argument_list></call><operator pos:start="761:59" pos:end="761:59">)</operator> <operator pos:start="761:61" pos:end="761:61">&lt;</operator> <literal type="number" pos:start="761:63" pos:end="761:63">0</literal></expr>)</condition><block type="pseudo" pos:start="763:13" pos:end="763:23"><block_content pos:start="763:13" pos:end="763:23">

            <return pos:start="763:13" pos:end="763:23">return <expr pos:start="763:20" pos:end="763:22"><name pos:start="763:20" pos:end="763:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="765:9" pos:end="765:39"><expr pos:start="765:9" pos:end="765:38"><name pos:start="765:9" pos:end="765:25"><name pos:start="765:9" pos:end="765:13">frame</name><operator pos:start="765:14" pos:end="765:15">-&gt;</operator><name pos:start="765:16" pos:end="765:25">nb_samples</name></name> <operator pos:start="765:27" pos:end="765:27">=</operator> <name pos:start="765:29" pos:end="765:38"><name pos:start="765:29" pos:end="765:29">s</name><operator pos:start="765:30" pos:end="765:31">-&gt;</operator><name pos:start="765:32" pos:end="765:38">samples</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="771:5" pos:end="777:5"><if pos:start="771:5" pos:end="777:5">if <condition pos:start="771:8" pos:end="771:53">(<expr pos:start="771:9" pos:end="771:52"><name pos:start="771:9" pos:end="771:21"><name pos:start="771:9" pos:end="771:10">wc</name><operator pos:start="771:11" pos:end="771:12">-&gt;</operator><name pos:start="771:13" pos:end="771:21">ch_offset</name></name> <operator pos:start="771:23" pos:end="771:23">+</operator> <name pos:start="771:25" pos:end="771:33"><name pos:start="771:25" pos:end="771:25">s</name><operator pos:start="771:26" pos:end="771:27">-&gt;</operator><name pos:start="771:28" pos:end="771:33">stereo</name></name> <operator pos:start="771:35" pos:end="771:36">&gt;=</operator> <name pos:start="771:38" pos:end="771:52"><name pos:start="771:38" pos:end="771:42">avctx</name><operator pos:start="771:43" pos:end="771:44">-&gt;</operator><name pos:start="771:45" pos:end="771:52">channels</name></name></expr>)</condition> <block pos:start="771:55" pos:end="777:5">{<block_content pos:start="773:9" pos:end="775:82">

        <expr_stmt pos:start="773:9" pos:end="773:80"><expr pos:start="773:9" pos:end="773:79"><call pos:start="773:9" pos:end="773:79"><name pos:start="773:9" pos:end="773:14">av_log</name><argument_list pos:start="773:15" pos:end="773:79">(<argument pos:start="773:16" pos:end="773:20"><expr pos:start="773:16" pos:end="773:20"><name pos:start="773:16" pos:end="773:20">avctx</name></expr></argument>, <argument pos:start="773:23" pos:end="773:36"><expr pos:start="773:23" pos:end="773:36"><name pos:start="773:23" pos:end="773:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="773:39" pos:end="773:78"><expr pos:start="773:39" pos:end="773:78"><literal type="string" pos:start="773:39" pos:end="773:78">"Too many channels coded in a packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="775:9" pos:end="775:82">return <expr pos:start="775:16" pos:end="775:81"><ternary pos:start="775:16" pos:end="775:81"><condition pos:start="775:16" pos:end="775:57"><expr pos:start="775:16" pos:end="775:55"><operator pos:start="775:16" pos:end="775:16">(</operator><name pos:start="775:17" pos:end="775:38"><name pos:start="775:17" pos:end="775:21">avctx</name><operator pos:start="775:22" pos:end="775:23">-&gt;</operator><name pos:start="775:24" pos:end="775:38">err_recognition</name></name> <operator pos:start="775:40" pos:end="775:40">&amp;</operator> <name pos:start="775:42" pos:end="775:54">AV_EF_EXPLODE</name><operator pos:start="775:55" pos:end="775:55">)</operator></expr> ?</condition><then pos:start="775:59" pos:end="775:77"> <expr pos:start="775:59" pos:end="775:77"><name pos:start="775:59" pos:end="775:77">AVERROR_INVALIDDATA</name></expr> </then><else pos:start="775:79" pos:end="775:81">: <expr pos:start="775:81" pos:end="775:81"><literal type="number" pos:start="775:81" pos:end="775:81">0</literal></expr></else></ternary></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="781:5" pos:end="781:52"><expr pos:start="781:5" pos:end="781:51"><name pos:start="781:5" pos:end="781:13">samples_l</name> <operator pos:start="781:15" pos:end="781:15">=</operator> <name pos:start="781:17" pos:end="781:51"><name pos:start="781:17" pos:end="781:21">frame</name><operator pos:start="781:22" pos:end="781:23">-&gt;</operator><name pos:start="781:24" pos:end="781:36">extended_data</name><index pos:start="781:37" pos:end="781:51">[<expr pos:start="781:38" pos:end="781:50"><name pos:start="781:38" pos:end="781:50"><name pos:start="781:38" pos:end="781:39">wc</name><operator pos:start="781:40" pos:end="781:41">-&gt;</operator><name pos:start="781:42" pos:end="781:50">ch_offset</name></name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="783:5" pos:end="785:60"><if pos:start="783:5" pos:end="785:60">if <condition pos:start="783:8" pos:end="783:18">(<expr pos:start="783:9" pos:end="783:17"><name pos:start="783:9" pos:end="783:17"><name pos:start="783:9" pos:end="783:9">s</name><operator pos:start="783:10" pos:end="783:11">-&gt;</operator><name pos:start="783:12" pos:end="783:17">stereo</name></name></expr>)</condition><block type="pseudo" pos:start="785:9" pos:end="785:60"><block_content pos:start="785:9" pos:end="785:60">

        <expr_stmt pos:start="785:9" pos:end="785:60"><expr pos:start="785:9" pos:end="785:59"><name pos:start="785:9" pos:end="785:17">samples_r</name> <operator pos:start="785:19" pos:end="785:19">=</operator> <name pos:start="785:21" pos:end="785:59"><name pos:start="785:21" pos:end="785:25">frame</name><operator pos:start="785:26" pos:end="785:27">-&gt;</operator><name pos:start="785:28" pos:end="785:40">extended_data</name><index pos:start="785:41" pos:end="785:59">[<expr pos:start="785:42" pos:end="785:58"><name pos:start="785:42" pos:end="785:54"><name pos:start="785:42" pos:end="785:43">wc</name><operator pos:start="785:44" pos:end="785:45">-&gt;</operator><name pos:start="785:46" pos:end="785:54">ch_offset</name></name> <operator pos:start="785:56" pos:end="785:56">+</operator> <literal type="number" pos:start="785:58" pos:end="785:58">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="789:5" pos:end="789:35"><expr pos:start="789:5" pos:end="789:34"><name pos:start="789:5" pos:end="789:17"><name pos:start="789:5" pos:end="789:6">wc</name><operator pos:start="789:7" pos:end="789:8">-&gt;</operator><name pos:start="789:9" pos:end="789:17">ch_offset</name></name> <operator pos:start="789:19" pos:end="789:20">+=</operator> <literal type="number" pos:start="789:22" pos:end="789:24">1</literal> <operator pos:start="789:24" pos:end="789:24">+</operator> <name pos:start="789:26" pos:end="789:34"><name pos:start="789:26" pos:end="789:26">s</name><operator pos:start="789:27" pos:end="789:28">-&gt;</operator><name pos:start="789:29" pos:end="789:34">stereo</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="793:5" pos:end="815:5"><if pos:start="793:5" pos:end="801:5">if <condition pos:start="793:8" pos:end="793:21">(<expr pos:start="793:9" pos:end="793:20"><name pos:start="793:9" pos:end="793:20"><name pos:start="793:9" pos:end="793:9">s</name><operator pos:start="793:10" pos:end="793:11">-&gt;</operator><name pos:start="793:12" pos:end="793:20">stereo_in</name></name></expr>)</condition> <block pos:start="793:23" pos:end="801:5">{<block_content pos:start="795:9" pos:end="799:23">

        <expr_stmt pos:start="795:9" pos:end="795:83"><expr pos:start="795:9" pos:end="795:82"><name pos:start="795:9" pos:end="795:11">ret</name> <operator pos:start="795:13" pos:end="795:13">=</operator> <call pos:start="795:15" pos:end="795:82"><name pos:start="795:15" pos:end="795:30">wv_unpack_stereo</name><argument_list pos:start="795:31" pos:end="795:82">(<argument pos:start="795:32" pos:end="795:32"><expr pos:start="795:32" pos:end="795:32"><name pos:start="795:32" pos:end="795:32">s</name></expr></argument>, <argument pos:start="795:35" pos:end="795:40"><expr pos:start="795:35" pos:end="795:40"><operator pos:start="795:35" pos:end="795:35">&amp;</operator><name pos:start="795:36" pos:end="795:40"><name pos:start="795:36" pos:end="795:36">s</name><operator pos:start="795:37" pos:end="795:38">-&gt;</operator><name pos:start="795:39" pos:end="795:40">gb</name></name></expr></argument>, <argument pos:start="795:43" pos:end="795:51"><expr pos:start="795:43" pos:end="795:51"><name pos:start="795:43" pos:end="795:51">samples_l</name></expr></argument>, <argument pos:start="795:54" pos:end="795:62"><expr pos:start="795:54" pos:end="795:62"><name pos:start="795:54" pos:end="795:62">samples_r</name></expr></argument>, <argument pos:start="795:65" pos:end="795:81"><expr pos:start="795:65" pos:end="795:81"><name pos:start="795:65" pos:end="795:81"><name pos:start="795:65" pos:end="795:69">avctx</name><operator pos:start="795:70" pos:end="795:71">-&gt;</operator><name pos:start="795:72" pos:end="795:81">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="797:9" pos:end="799:23"><if pos:start="797:9" pos:end="799:23">if <condition pos:start="797:12" pos:end="797:20">(<expr pos:start="797:13" pos:end="797:19"><name pos:start="797:13" pos:end="797:15">ret</name> <operator pos:start="797:17" pos:end="797:17">&lt;</operator> <literal type="number" pos:start="797:19" pos:end="797:19">0</literal></expr>)</condition><block type="pseudo" pos:start="799:13" pos:end="799:23"><block_content pos:start="799:13" pos:end="799:23">

            <return pos:start="799:13" pos:end="799:23">return <expr pos:start="799:20" pos:end="799:22"><name pos:start="799:20" pos:end="799:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="801:7" pos:end="815:5">else <block pos:start="801:12" pos:end="815:5">{<block_content pos:start="803:9" pos:end="813:59">

        <expr_stmt pos:start="803:9" pos:end="803:70"><expr pos:start="803:9" pos:end="803:69"><name pos:start="803:9" pos:end="803:11">ret</name> <operator pos:start="803:13" pos:end="803:13">=</operator> <call pos:start="803:15" pos:end="803:69"><name pos:start="803:15" pos:end="803:28">wv_unpack_mono</name><argument_list pos:start="803:29" pos:end="803:69">(<argument pos:start="803:30" pos:end="803:30"><expr pos:start="803:30" pos:end="803:30"><name pos:start="803:30" pos:end="803:30">s</name></expr></argument>, <argument pos:start="803:33" pos:end="803:38"><expr pos:start="803:33" pos:end="803:38"><operator pos:start="803:33" pos:end="803:33">&amp;</operator><name pos:start="803:34" pos:end="803:38"><name pos:start="803:34" pos:end="803:34">s</name><operator pos:start="803:35" pos:end="803:36">-&gt;</operator><name pos:start="803:37" pos:end="803:38">gb</name></name></expr></argument>, <argument pos:start="803:41" pos:end="803:49"><expr pos:start="803:41" pos:end="803:49"><name pos:start="803:41" pos:end="803:49">samples_l</name></expr></argument>, <argument pos:start="803:52" pos:end="803:68"><expr pos:start="803:52" pos:end="803:68"><name pos:start="803:52" pos:end="803:68"><name pos:start="803:52" pos:end="803:56">avctx</name><operator pos:start="803:57" pos:end="803:58">-&gt;</operator><name pos:start="803:59" pos:end="803:68">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="805:9" pos:end="807:23"><if pos:start="805:9" pos:end="807:23">if <condition pos:start="805:12" pos:end="805:20">(<expr pos:start="805:13" pos:end="805:19"><name pos:start="805:13" pos:end="805:15">ret</name> <operator pos:start="805:17" pos:end="805:17">&lt;</operator> <literal type="number" pos:start="805:19" pos:end="805:19">0</literal></expr>)</condition><block type="pseudo" pos:start="807:13" pos:end="807:23"><block_content pos:start="807:13" pos:end="807:23">

            <return pos:start="807:13" pos:end="807:23">return <expr pos:start="807:20" pos:end="807:22"><name pos:start="807:20" pos:end="807:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="811:9" pos:end="813:59"><if pos:start="811:9" pos:end="813:59">if <condition pos:start="811:12" pos:end="811:22">(<expr pos:start="811:13" pos:end="811:21"><name pos:start="811:13" pos:end="811:21"><name pos:start="811:13" pos:end="811:13">s</name><operator pos:start="811:14" pos:end="811:15">-&gt;</operator><name pos:start="811:16" pos:end="811:21">stereo</name></name></expr>)</condition><block type="pseudo" pos:start="813:13" pos:end="813:59"><block_content pos:start="813:13" pos:end="813:59">

            <expr_stmt pos:start="813:13" pos:end="813:59"><expr pos:start="813:13" pos:end="813:58"><call pos:start="813:13" pos:end="813:58"><name pos:start="813:13" pos:end="813:18">memcpy</name><argument_list pos:start="813:19" pos:end="813:58">(<argument pos:start="813:20" pos:end="813:28"><expr pos:start="813:20" pos:end="813:28"><name pos:start="813:20" pos:end="813:28">samples_r</name></expr></argument>, <argument pos:start="813:31" pos:end="813:39"><expr pos:start="813:31" pos:end="813:39"><name pos:start="813:31" pos:end="813:39">samples_l</name></expr></argument>, <argument pos:start="813:42" pos:end="813:57"><expr pos:start="813:42" pos:end="813:57"><name pos:start="813:42" pos:end="813:44">bpp</name> <operator pos:start="813:46" pos:end="813:46">*</operator> <name pos:start="813:48" pos:end="813:57"><name pos:start="813:48" pos:end="813:48">s</name><operator pos:start="813:49" pos:end="813:50">-&gt;</operator><name pos:start="813:51" pos:end="813:57">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="819:5" pos:end="819:13">return <expr pos:start="819:12" pos:end="819:12"><literal type="number" pos:start="819:12" pos:end="819:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
