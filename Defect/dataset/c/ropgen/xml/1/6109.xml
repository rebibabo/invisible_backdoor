<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6109.c" pos:tabs="8"><function pos:start="1:1" pos:end="376:0"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="5:65">(<parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:60">PowerPCCPU</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">cpu</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:54">bool</name></type> <name pos:start="5:56" pos:end="5:64">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="376:0">{<block_content pos:start="9:5" pos:end="376:0">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><call pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">CPU</name><argument_list pos:start="9:23" pos:end="9:27">(<argument pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUPPCState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:32">= <expr pos:start="11:24" pos:end="11:32"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:27">cpu</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">DisasContext</name></type> <name pos:start="13:18" pos:end="13:20">ctx</name></decl>, <decl pos:start="13:23" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:27">ctxp</name> <init pos:start="13:29" pos:end="13:34">= <expr pos:start="13:31" pos:end="13:34"><operator pos:start="13:31" pos:end="13:31">&amp;</operator><name pos:start="13:32" pos:end="13:34">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:17">opc_handler_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier><modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:25">table</name></decl>, <decl pos:start="15:28" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:20"><modifier pos:start="15:28" pos:end="15:28">*</modifier></type><name pos:start="15:29" pos:end="15:35">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint16_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:17">CPUBreakpoint</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">j</name></decl>, <decl pos:start="23:12" pos:end="23:18"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:13">lj</name> <init pos:start="23:15" pos:end="23:18">= <expr pos:start="23:17" pos:end="23:18"><operator pos:start="23:17" pos:end="23:17">-</operator><literal type="number" pos:start="23:18" pos:end="23:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:12">pc_start</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:17">tb</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:53"><expr pos:start="33:5" pos:end="33:52"><name pos:start="33:5" pos:end="33:15">gen_opc_end</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:37"><name pos:start="33:19" pos:end="33:25">tcg_ctx</name><operator pos:start="33:26" pos:end="33:26">.</operator><name pos:start="33:27" pos:end="33:37">gen_opc_buf</name></name> <operator pos:start="33:39" pos:end="33:39">+</operator> <name pos:start="33:41" pos:end="33:52">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:11">nip</name></name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:22">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:16"><expr pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:10">tb</name></name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:17">exception</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:37">POWERPC_EXCP_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:14">spr_cb</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:28"><name pos:start="41:18" pos:end="41:20">env</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:28">spr_cb</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:31"><expr pos:start="43:5" pos:end="43:30"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:15">mem_idx</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:30"><name pos:start="43:19" pos:end="43:21">env</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:30">mmu_idx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:39"><expr pos:start="45:5" pos:end="45:38"><name pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:7">ctx</name><operator pos:start="45:8" pos:end="45:8">.</operator><name pos:start="45:9" pos:end="45:19">insns_flags</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:38"><name pos:start="45:23" pos:end="45:25">env</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:38">insns_flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:41"><expr pos:start="47:5" pos:end="47:40"><name pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:8">.</operator><name pos:start="47:9" pos:end="47:20">insns_flags2</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:40"><name pos:start="47:24" pos:end="47:26">env</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:40">insns_flags2</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:7">ctx</name><operator pos:start="49:8" pos:end="49:8">.</operator><name pos:start="49:9" pos:end="49:19">access_type</name></name> <operator pos:start="49:21" pos:end="49:21">=</operator> <operator pos:start="49:23" pos:end="49:23">-</operator><literal type="number" pos:start="49:24" pos:end="49:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:53"><name pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:7">ctx</name><operator pos:start="51:8" pos:end="51:8">.</operator><name pos:start="51:9" pos:end="51:15">le_mode</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <ternary pos:start="51:19" pos:end="51:53"><condition pos:start="51:19" pos:end="51:47"><expr pos:start="51:19" pos:end="51:45"><name pos:start="51:19" pos:end="51:29"><name pos:start="51:19" pos:end="51:21">env</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:29">hflags</name></name> <operator pos:start="51:31" pos:end="51:31">&amp;</operator> <operator pos:start="51:33" pos:end="51:33">(</operator><literal type="number" pos:start="51:34" pos:end="51:34">1</literal> <operator pos:start="51:36" pos:end="51:37">&lt;&lt;</operator> <name pos:start="51:39" pos:end="51:44">MSR_LE</name><operator pos:start="51:45" pos:end="51:45">)</operator></expr> ?</condition><then pos:start="51:49" pos:end="51:49"> <expr pos:start="51:49" pos:end="51:49"><literal type="number" pos:start="51:49" pos:end="51:49">1</literal></expr> </then><else pos:start="51:51" pos:end="51:53">: <expr pos:start="51:53" pos:end="51:53"><literal type="number" pos:start="51:53" pos:end="51:53">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if pos:start="53:1" pos:end="53:25">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:25"><call pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:11">defined</name><argument_list pos:start="53:12" pos:end="53:25">(<argument pos:start="53:13" pos:end="53:24"><expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="55:5" pos:end="55:46"><expr pos:start="55:5" pos:end="55:45"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:7">ctx</name><operator pos:start="55:8" pos:end="55:8">.</operator><name pos:start="55:9" pos:end="55:15">sf_mode</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:45"><name pos:start="55:19" pos:end="55:30">msr_is_64bit</name><argument_list pos:start="55:31" pos:end="55:45">(<argument pos:start="55:32" pos:end="55:34"><expr pos:start="55:32" pos:end="55:34"><name pos:start="55:32" pos:end="55:34">env</name></expr></argument>, <argument pos:start="55:37" pos:end="55:44"><expr pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:39">env</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:44">msr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:53"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:7">ctx</name><operator pos:start="57:8" pos:end="57:8">.</operator><name pos:start="57:9" pos:end="57:16">has_cfar</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <operator pos:start="57:20" pos:end="57:20">!</operator><operator pos:start="57:21" pos:end="57:21">!</operator><operator pos:start="57:22" pos:end="57:22">(</operator><name pos:start="57:23" pos:end="57:32"><name pos:start="57:23" pos:end="57:25">env</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:32">flags</name></name> <operator pos:start="57:34" pos:end="57:34">&amp;</operator> <name pos:start="57:36" pos:end="57:52">POWERPC_FLAG_CFAR</name><operator pos:start="57:53" pos:end="57:53">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="61:5" pos:end="61:29"><expr pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:7">ctx</name><operator pos:start="61:8" pos:end="61:8">.</operator><name pos:start="61:9" pos:end="61:19">fpu_enabled</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:28">msr_fp</name></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:28"><if pos:start="63:5" pos:end="65:34">if <condition pos:start="63:8" pos:end="63:51">(<expr pos:start="63:9" pos:end="63:50"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:19"><name pos:start="63:10" pos:end="63:12">env</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:19">flags</name></name> <operator pos:start="63:21" pos:end="63:21">&amp;</operator> <name pos:start="63:23" pos:end="63:38">POWERPC_FLAG_SPE</name><operator pos:start="63:39" pos:end="63:39">)</operator> <operator pos:start="63:41" pos:end="63:42">&amp;&amp;</operator> <name pos:start="63:44" pos:end="63:50">msr_spe</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:34"><block_content pos:start="65:9" pos:end="65:34">

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">ctx</name><operator pos:start="65:12" pos:end="65:12">.</operator><name pos:start="65:13" pos:end="65:23">spe_enabled</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:33">msr_spe</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="67:5" pos:end="69:28">else<block type="pseudo" pos:start="69:9" pos:end="69:28"><block_content pos:start="69:9" pos:end="69:28">

        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:11">ctx</name><operator pos:start="69:12" pos:end="69:12">.</operator><name pos:start="69:13" pos:end="69:23">spe_enabled</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="71:5" pos:end="77:32"><if pos:start="71:5" pos:end="73:37">if <condition pos:start="71:8" pos:end="71:50">(<expr pos:start="71:9" pos:end="71:49"><operator pos:start="71:9" pos:end="71:9">(</operator><name pos:start="71:10" pos:end="71:19"><name pos:start="71:10" pos:end="71:12">env</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:19">flags</name></name> <operator pos:start="71:21" pos:end="71:21">&amp;</operator> <name pos:start="71:23" pos:end="71:38">POWERPC_FLAG_VRE</name><operator pos:start="71:39" pos:end="71:39">)</operator> <operator pos:start="71:41" pos:end="71:42">&amp;&amp;</operator> <name pos:start="71:44" pos:end="71:49">msr_vr</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:37"><block_content pos:start="73:9" pos:end="73:37">

        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:11">ctx</name><operator pos:start="73:12" pos:end="73:12">.</operator><name pos:start="73:13" pos:end="73:27">altivec_enabled</name></name> <operator pos:start="73:29" pos:end="73:29">=</operator> <name pos:start="73:31" pos:end="73:36">msr_vr</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="75:5" pos:end="77:32">else<block type="pseudo" pos:start="77:9" pos:end="77:32"><block_content pos:start="77:9" pos:end="77:32">

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:11">ctx</name><operator pos:start="77:12" pos:end="77:12">.</operator><name pos:start="77:13" pos:end="77:27">altivec_enabled</name></name> <operator pos:start="77:29" pos:end="77:29">=</operator> <literal type="number" pos:start="77:31" pos:end="77:31">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="79:5" pos:end="376:0"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:51">(<expr pos:start="79:9" pos:end="79:50"><operator pos:start="79:9" pos:end="79:9">(</operator><name pos:start="79:10" pos:end="79:19"><name pos:start="79:10" pos:end="79:12">env</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:19">flags</name></name> <operator pos:start="79:21" pos:end="79:21">&amp;</operator> <name pos:start="79:23" pos:end="79:38">POWERPC_FLAG_VSX</name><operator pos:start="79:39" pos:end="79:39">)</operator> <operator pos:start="79:41" pos:end="79:42">&amp;&amp;</operator> <name pos:start="79:44" pos:end="79:50">msr_vsx</name></expr>)</condition> <block pos:start="79:53" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:34">

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:11">ctx</name><operator pos:start="81:12" pos:end="81:12">.</operator><name pos:start="81:13" pos:end="81:23">vsx_enabled</name></name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:33">msr_vsx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="376:0">else <block pos:start="83:12" pos:end="376:0">{<block_content pos:start="85:9" pos:end="376:0">

        <expr_stmt pos:start="85:9" pos:end="85:28"><expr pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:11">ctx</name><operator pos:start="85:12" pos:end="85:12">.</operator><name pos:start="85:13" pos:end="85:23">vsx_enabled</name></name> <operator pos:start="85:25" pos:end="85:25">=</operator> <literal type="number" pos:start="85:27" pos:end="85:27">0</literal></expr>;</expr_stmt>


    <if_stmt pos:start="88:5" pos:end="94:35"><if pos:start="88:5" pos:end="90:49">if <condition pos:start="88:8" pos:end="88:49">(<expr pos:start="88:9" pos:end="88:48"><operator pos:start="88:9" pos:end="88:9">(</operator><name pos:start="88:10" pos:end="88:19"><name pos:start="88:10" pos:end="88:12">env</name><operator pos:start="88:13" pos:end="88:14">-&gt;</operator><name pos:start="88:15" pos:end="88:19">flags</name></name> <operator pos:start="88:21" pos:end="88:21">&amp;</operator> <name pos:start="88:23" pos:end="88:37">POWERPC_FLAG_SE</name><operator pos:start="88:38" pos:end="88:38">)</operator> <operator pos:start="88:40" pos:end="88:41">&amp;&amp;</operator> <name pos:start="88:43" pos:end="88:48">msr_se</name></expr>)</condition><block type="pseudo" pos:start="90:9" pos:end="90:49"><block_content pos:start="90:9" pos:end="90:49">

        <expr_stmt pos:start="90:9" pos:end="90:49"><expr pos:start="90:9" pos:end="90:48"><name pos:start="90:9" pos:end="90:30"><name pos:start="90:9" pos:end="90:11">ctx</name><operator pos:start="90:12" pos:end="90:12">.</operator><name pos:start="90:13" pos:end="90:30">singlestep_enabled</name></name> <operator pos:start="90:32" pos:end="90:32">=</operator> <name pos:start="90:34" pos:end="90:48">CPU_SINGLE_STEP</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="92:5" pos:end="94:35">else<block type="pseudo" pos:start="94:9" pos:end="94:35"><block_content pos:start="94:9" pos:end="94:35">

        <expr_stmt pos:start="94:9" pos:end="94:35"><expr pos:start="94:9" pos:end="94:34"><name pos:start="94:9" pos:end="94:30"><name pos:start="94:9" pos:end="94:11">ctx</name><operator pos:start="94:12" pos:end="94:12">.</operator><name pos:start="94:13" pos:end="94:30">singlestep_enabled</name></name> <operator pos:start="94:32" pos:end="94:32">=</operator> <literal type="number" pos:start="94:34" pos:end="94:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="96:5" pos:end="98:50"><if pos:start="96:5" pos:end="98:50">if <condition pos:start="96:8" pos:end="96:49">(<expr pos:start="96:9" pos:end="96:48"><operator pos:start="96:9" pos:end="96:9">(</operator><name pos:start="96:10" pos:end="96:19"><name pos:start="96:10" pos:end="96:12">env</name><operator pos:start="96:13" pos:end="96:14">-&gt;</operator><name pos:start="96:15" pos:end="96:19">flags</name></name> <operator pos:start="96:21" pos:end="96:21">&amp;</operator> <name pos:start="96:23" pos:end="96:37">POWERPC_FLAG_BE</name><operator pos:start="96:38" pos:end="96:38">)</operator> <operator pos:start="96:40" pos:end="96:41">&amp;&amp;</operator> <name pos:start="96:43" pos:end="96:48">msr_be</name></expr>)</condition><block type="pseudo" pos:start="98:9" pos:end="98:50"><block_content pos:start="98:9" pos:end="98:50">

        <expr_stmt pos:start="98:9" pos:end="98:50"><expr pos:start="98:9" pos:end="98:49"><name pos:start="98:9" pos:end="98:30"><name pos:start="98:9" pos:end="98:11">ctx</name><operator pos:start="98:12" pos:end="98:12">.</operator><name pos:start="98:13" pos:end="98:30">singlestep_enabled</name></name> <operator pos:start="98:32" pos:end="98:33">|=</operator> <name pos:start="98:35" pos:end="98:49">CPU_BRANCH_STEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="100:5" pos:end="376:0"><if pos:start="100:5" pos:end="376:0">if <condition pos:start="100:8" pos:end="100:41">(<expr pos:start="100:9" pos:end="100:40"><call pos:start="100:9" pos:end="100:40"><name pos:start="100:9" pos:end="100:16">unlikely</name><argument_list pos:start="100:17" pos:end="100:40">(<argument pos:start="100:18" pos:end="100:39"><expr pos:start="100:18" pos:end="100:39"><name pos:start="100:18" pos:end="100:39"><name pos:start="100:18" pos:end="100:19">cs</name><operator pos:start="100:20" pos:end="100:21">-&gt;</operator><name pos:start="100:22" pos:end="100:39">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="100:43" pos:end="376:0">{<block_content pos:start="102:9" pos:end="376:0">

        <expr_stmt pos:start="102:9" pos:end="106:0"><expr pos:start="102:9" pos:end="102:53"><name pos:start="102:9" pos:end="102:30"><name pos:start="102:9" pos:end="102:11">ctx</name><operator pos:start="102:12" pos:end="102:12">.</operator><name pos:start="102:13" pos:end="102:30">singlestep_enabled</name></name> <operator pos:start="102:32" pos:end="102:33">|=</operator> <name pos:start="102:35" pos:end="102:53">GDBSTUB_SINGLE_STEP</name></expr>;</expr_stmt>


<cpp:if pos:start="105:1" pos:end="105:33">#<cpp:directive pos:start="105:2" pos:end="105:3">if</cpp:directive> <expr pos:start="105:5" pos:end="105:33"><call pos:start="105:5" pos:end="105:28"><name pos:start="105:5" pos:end="105:11">defined</name> <argument_list pos:start="105:13" pos:end="105:28">(<argument pos:start="105:14" pos:end="105:27"><expr pos:start="105:14" pos:end="105:27"><name pos:start="105:14" pos:end="105:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call> <operator pos:start="105:30" pos:end="105:31">&amp;&amp;</operator> <literal type="number" pos:start="105:33" pos:end="105:33">0</literal></expr></cpp:if>

    <comment type="block" pos:start="107:5" pos:end="107:32">/* Single step trace mode */</comment>

    <expr_stmt pos:start="109:5" pos:end="112:0"><expr pos:start="109:5" pos:end="109:14"><name pos:start="109:5" pos:end="109:10">msr_se</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="113:5" pos:end="113:18"><expr pos:start="113:5" pos:end="113:17"><name pos:start="113:5" pos:end="113:13">num_insns</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <literal type="number" pos:start="113:17" pos:end="113:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:43"><expr pos:start="115:5" pos:end="115:42"><name pos:start="115:5" pos:end="115:13">max_insns</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:26"><name pos:start="115:17" pos:end="115:18">tb</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:26">cflags</name></name> <operator pos:start="115:28" pos:end="115:28">&amp;</operator> <name pos:start="115:30" pos:end="115:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="119:34"><if pos:start="117:5" pos:end="119:34">if <condition pos:start="117:8" pos:end="117:23">(<expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:17">max_insns</name> <operator pos:start="117:19" pos:end="117:20">==</operator> <literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:34"><block_content pos:start="119:9" pos:end="119:34">

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:17">max_insns</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:19"><expr pos:start="123:5" pos:end="123:18"><call pos:start="123:5" pos:end="123:18"><name pos:start="123:5" pos:end="123:16">gen_tb_start</name><argument_list pos:start="123:17" pos:end="123:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:27"><expr pos:start="125:5" pos:end="125:26"><call pos:start="125:5" pos:end="125:26"><name pos:start="125:5" pos:end="125:24">tcg_clear_temp_count</name><argument_list pos:start="125:25" pos:end="125:26">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="127:5" pos:end="127:55">/* Set env in case of segfault during code fetch */</comment>

    <while pos:start="129:5" pos:end="376:0">while <condition pos:start="129:11" pos:end="131:49">(<expr pos:start="129:12" pos:end="131:48"><name pos:start="129:12" pos:end="129:24"><name pos:start="129:12" pos:end="129:14">ctx</name><operator pos:start="129:15" pos:end="129:15">.</operator><name pos:start="129:16" pos:end="129:24">exception</name></name> <operator pos:start="129:26" pos:end="129:27">==</operator> <name pos:start="129:29" pos:end="129:45">POWERPC_EXCP_NONE</name>

            <operator pos:start="131:13" pos:end="131:14">&amp;&amp;</operator> <name pos:start="131:16" pos:end="131:34"><name pos:start="131:16" pos:end="131:22">tcg_ctx</name><operator pos:start="131:23" pos:end="131:23">.</operator><name pos:start="131:24" pos:end="131:34">gen_opc_ptr</name></name> <operator pos:start="131:36" pos:end="131:36">&lt;</operator> <name pos:start="131:38" pos:end="131:48">gen_opc_end</name></expr>)</condition> <block pos:start="131:51" pos:end="376:0">{<block_content pos:start="133:9" pos:end="376:0">

        <if_stmt pos:start="133:9" pos:end="376:0"><if pos:start="133:9" pos:end="376:0">if <condition pos:start="133:12" pos:end="133:54">(<expr pos:start="133:13" pos:end="133:53"><call pos:start="133:13" pos:end="133:53"><name pos:start="133:13" pos:end="133:20">unlikely</name><argument_list pos:start="133:21" pos:end="133:53">(<argument pos:start="133:22" pos:end="133:52"><expr pos:start="133:22" pos:end="133:52"><operator pos:start="133:22" pos:end="133:22">!</operator><call pos:start="133:23" pos:end="133:52"><name pos:start="133:23" pos:end="133:34">QTAILQ_EMPTY</name><argument_list pos:start="133:35" pos:end="133:52">(<argument pos:start="133:36" pos:end="133:51"><expr pos:start="133:36" pos:end="133:51"><operator pos:start="133:36" pos:end="133:36">&amp;</operator><name pos:start="133:37" pos:end="133:51"><name pos:start="133:37" pos:end="133:38">cs</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:56" pos:end="376:0">{<block_content pos:start="135:13" pos:end="376:0">

            <macro pos:start="135:13" pos:end="135:55"><name pos:start="135:13" pos:end="135:26">QTAILQ_FOREACH</name><argument_list pos:start="135:27" pos:end="135:55">(<argument pos:start="135:28" pos:end="135:29">bp</argument>, <argument pos:start="135:32" pos:end="135:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="135:50" pos:end="135:54">entry</argument>)</argument_list></macro> <block pos:start="135:57" pos:end="376:0">{<block_content pos:start="137:17" pos:end="376:0">

                <if_stmt pos:start="137:17" pos:end="376:0"><if pos:start="137:17" pos:end="376:0">if <condition pos:start="137:20" pos:end="137:38">(<expr pos:start="137:21" pos:end="137:37"><name pos:start="137:21" pos:end="137:26"><name pos:start="137:21" pos:end="137:22">bp</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:26">pc</name></name> <operator pos:start="137:28" pos:end="137:29">==</operator> <name pos:start="137:31" pos:end="137:37"><name pos:start="137:31" pos:end="137:33">ctx</name><operator pos:start="137:34" pos:end="137:34">.</operator><name pos:start="137:35" pos:end="137:37">nip</name></name></expr>)</condition> <block pos:start="137:40" pos:end="376:0">{<block_content pos:start="139:21" pos:end="376:0">

                    <expr_stmt pos:start="139:21" pos:end="139:46"><expr pos:start="139:21" pos:end="139:45"><call pos:start="139:21" pos:end="139:45"><name pos:start="139:21" pos:end="139:39">gen_debug_exception</name><argument_list pos:start="139:40" pos:end="139:45">(<argument pos:start="139:41" pos:end="139:44"><expr pos:start="139:41" pos:end="139:44"><name pos:start="139:41" pos:end="139:44">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="141:21" pos:end="141:26">break;</break>




        <if_stmt pos:start="146:9" pos:end="376:0"><if pos:start="146:9" pos:end="376:0">if <condition pos:start="146:12" pos:end="146:32">(<expr pos:start="146:13" pos:end="146:31"><call pos:start="146:13" pos:end="146:31"><name pos:start="146:13" pos:end="146:20">unlikely</name><argument_list pos:start="146:21" pos:end="146:31">(<argument pos:start="146:22" pos:end="146:30"><expr pos:start="146:22" pos:end="146:30"><name pos:start="146:22" pos:end="146:30">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="146:34" pos:end="376:0">{<block_content pos:start="148:13" pos:end="376:0">

            <expr_stmt pos:start="148:13" pos:end="148:58"><expr pos:start="148:13" pos:end="148:57"><name pos:start="148:13" pos:end="148:13">j</name> <operator pos:start="148:15" pos:end="148:15">=</operator> <name pos:start="148:17" pos:end="148:35"><name pos:start="148:17" pos:end="148:23">tcg_ctx</name><operator pos:start="148:24" pos:end="148:24">.</operator><name pos:start="148:25" pos:end="148:35">gen_opc_ptr</name></name> <operator pos:start="148:37" pos:end="148:37">-</operator> <name pos:start="148:39" pos:end="148:57"><name pos:start="148:39" pos:end="148:45">tcg_ctx</name><operator pos:start="148:46" pos:end="148:46">.</operator><name pos:start="148:47" pos:end="148:57">gen_opc_buf</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="150:13" pos:end="376:0"><if pos:start="150:13" pos:end="376:0">if <condition pos:start="150:16" pos:end="150:23">(<expr pos:start="150:17" pos:end="150:22"><name pos:start="150:17" pos:end="150:18">lj</name> <operator pos:start="150:20" pos:end="150:20">&lt;</operator> <name pos:start="150:22" pos:end="150:22">j</name></expr>)</condition> <block pos:start="150:25" pos:end="376:0">{<block_content pos:start="152:17" pos:end="376:0">

                <expr_stmt pos:start="152:17" pos:end="152:21"><expr pos:start="152:17" pos:end="152:20"><name pos:start="152:17" pos:end="152:18">lj</name><operator pos:start="152:19" pos:end="152:20">++</operator></expr>;</expr_stmt>

                <while pos:start="154:17" pos:end="156:58">while <condition pos:start="154:23" pos:end="154:30">(<expr pos:start="154:24" pos:end="154:29"><name pos:start="154:24" pos:end="154:25">lj</name> <operator pos:start="154:27" pos:end="154:27">&lt;</operator> <name pos:start="154:29" pos:end="154:29">j</name></expr>)</condition><block type="pseudo" pos:start="156:21" pos:end="156:58"><block_content pos:start="156:21" pos:end="156:58">

                    <expr_stmt pos:start="156:21" pos:end="156:58"><expr pos:start="156:21" pos:end="156:57"><name pos:start="156:21" pos:end="156:53"><name pos:start="156:21" pos:end="156:27">tcg_ctx</name><operator pos:start="156:28" pos:end="156:28">.</operator><name pos:start="156:29" pos:end="156:47">gen_opc_instr_start</name><index pos:start="156:48" pos:end="156:53">[<expr pos:start="156:49" pos:end="156:52"><name pos:start="156:49" pos:end="156:50">lj</name><operator pos:start="156:51" pos:end="156:52">++</operator></expr>]</index></name> <operator pos:start="156:55" pos:end="156:55">=</operator> <literal type="number" pos:start="156:57" pos:end="156:57">0</literal></expr>;</expr_stmt></block_content></block></while>


            <expr_stmt pos:start="159:13" pos:end="159:45"><expr pos:start="159:13" pos:end="159:44"><name pos:start="159:13" pos:end="159:34"><name pos:start="159:13" pos:end="159:19">tcg_ctx</name><operator pos:start="159:20" pos:end="159:20">.</operator><name pos:start="159:21" pos:end="159:30">gen_opc_pc</name><index pos:start="159:31" pos:end="159:34">[<expr pos:start="159:32" pos:end="159:33"><name pos:start="159:32" pos:end="159:33">lj</name></expr>]</index></name> <operator pos:start="159:36" pos:end="159:36">=</operator> <name pos:start="159:38" pos:end="159:44"><name pos:start="159:38" pos:end="159:40">ctx</name><operator pos:start="159:41" pos:end="159:41">.</operator><name pos:start="159:42" pos:end="159:44">nip</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:48"><expr pos:start="161:13" pos:end="161:47"><name pos:start="161:13" pos:end="161:43"><name pos:start="161:13" pos:end="161:19">tcg_ctx</name><operator pos:start="161:20" pos:end="161:20">.</operator><name pos:start="161:21" pos:end="161:39">gen_opc_instr_start</name><index pos:start="161:40" pos:end="161:43">[<expr pos:start="161:41" pos:end="161:42"><name pos:start="161:41" pos:end="161:42">lj</name></expr>]</index></name> <operator pos:start="161:45" pos:end="161:45">=</operator> <literal type="number" pos:start="161:47" pos:end="161:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:51"><expr pos:start="163:13" pos:end="163:50"><name pos:start="163:13" pos:end="163:38"><name pos:start="163:13" pos:end="163:19">tcg_ctx</name><operator pos:start="163:20" pos:end="163:20">.</operator><name pos:start="163:21" pos:end="163:34">gen_opc_icount</name><index pos:start="163:35" pos:end="163:38">[<expr pos:start="163:36" pos:end="163:37"><name pos:start="163:36" pos:end="163:37">lj</name></expr>]</index></name> <operator pos:start="163:40" pos:end="163:40">=</operator> <name pos:start="163:42" pos:end="163:50">num_insns</name></expr>;</expr_stmt>


        <expr_stmt pos:start="166:9" pos:end="166:40"><expr pos:start="166:9" pos:end="166:39"><call pos:start="166:9" pos:end="166:39"><name pos:start="166:9" pos:end="166:17">LOG_DISAS</name><argument_list pos:start="166:18" pos:end="166:39">(<argument pos:start="166:19" pos:end="166:38"><expr pos:start="166:19" pos:end="166:38"><literal type="string" pos:start="166:19" pos:end="166:38">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="168:9" pos:end="170:53"><expr pos:start="168:9" pos:end="170:52"><call pos:start="168:9" pos:end="170:52"><name pos:start="168:9" pos:end="168:17">LOG_DISAS</name><argument_list pos:start="168:18" pos:end="170:52">(<argument pos:start="168:19" pos:end="168:58"><expr pos:start="168:19" pos:end="168:58"><literal type="string" pos:start="168:19" pos:end="168:24">"nip="</literal> <name pos:start="168:26" pos:end="168:38">TARGET_FMT_lx</name> <literal type="string" pos:start="168:40" pos:end="168:58">" super=%d ir=%d\n"</literal></expr></argument>,

                  <argument pos:start="170:19" pos:end="170:25"><expr pos:start="170:19" pos:end="170:25"><name pos:start="170:19" pos:end="170:25"><name pos:start="170:19" pos:end="170:21">ctx</name><operator pos:start="170:22" pos:end="170:22">.</operator><name pos:start="170:23" pos:end="170:25">nip</name></name></expr></argument>, <argument pos:start="170:28" pos:end="170:38"><expr pos:start="170:28" pos:end="170:38"><name pos:start="170:28" pos:end="170:38"><name pos:start="170:28" pos:end="170:30">ctx</name><operator pos:start="170:31" pos:end="170:31">.</operator><name pos:start="170:32" pos:end="170:38">mem_idx</name></name></expr></argument>, <argument pos:start="170:41" pos:end="170:51"><expr pos:start="170:41" pos:end="170:51"><operator pos:start="170:41" pos:end="170:41">(</operator><name pos:start="170:42" pos:end="170:44">int</name><operator pos:start="170:45" pos:end="170:45">)</operator><name pos:start="170:46" pos:end="170:51">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="172:9" pos:end="174:27"><if pos:start="172:9" pos:end="174:27">if <condition pos:start="172:12" pos:end="172:68">(<expr pos:start="172:13" pos:end="172:67"><name pos:start="172:13" pos:end="172:21">num_insns</name> <operator pos:start="172:23" pos:end="172:23">+</operator> <literal type="number" pos:start="172:25" pos:end="172:25">1</literal> <operator pos:start="172:27" pos:end="172:28">==</operator> <name pos:start="172:30" pos:end="172:38">max_insns</name> <operator pos:start="172:40" pos:end="172:41">&amp;&amp;</operator> <operator pos:start="172:43" pos:end="172:43">(</operator><name pos:start="172:44" pos:end="172:53"><name pos:start="172:44" pos:end="172:45">tb</name><operator pos:start="172:46" pos:end="172:47">-&gt;</operator><name pos:start="172:48" pos:end="172:53">cflags</name></name> <operator pos:start="172:55" pos:end="172:55">&amp;</operator> <name pos:start="172:57" pos:end="172:66">CF_LAST_IO</name><operator pos:start="172:67" pos:end="172:67">)</operator></expr>)</condition><block type="pseudo" pos:start="174:13" pos:end="174:27"><block_content pos:start="174:13" pos:end="174:27">

            <expr_stmt pos:start="174:13" pos:end="174:27"><expr pos:start="174:13" pos:end="174:26"><call pos:start="174:13" pos:end="174:26"><name pos:start="174:13" pos:end="174:24">gen_io_start</name><argument_list pos:start="174:25" pos:end="174:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="176:9" pos:end="376:0"><if pos:start="176:9" pos:end="180:9">if <condition pos:start="176:12" pos:end="176:34">(<expr pos:start="176:13" pos:end="176:33"><call pos:start="176:13" pos:end="176:33"><name pos:start="176:13" pos:end="176:20">unlikely</name><argument_list pos:start="176:21" pos:end="176:33">(<argument pos:start="176:22" pos:end="176:32"><expr pos:start="176:22" pos:end="176:32"><name pos:start="176:22" pos:end="176:32"><name pos:start="176:22" pos:end="176:24">ctx</name><operator pos:start="176:25" pos:end="176:25">.</operator><name pos:start="176:26" pos:end="176:32">le_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="176:36" pos:end="180:9">{<block_content pos:start="178:13" pos:end="178:61">

            <expr_stmt pos:start="178:13" pos:end="178:61"><expr pos:start="178:13" pos:end="178:60"><name pos:start="178:13" pos:end="178:22"><name pos:start="178:13" pos:end="178:15">ctx</name><operator pos:start="178:16" pos:end="178:16">.</operator><name pos:start="178:17" pos:end="178:22">opcode</name></name> <operator pos:start="178:24" pos:end="178:24">=</operator> <call pos:start="178:26" pos:end="178:60"><name pos:start="178:26" pos:end="178:32">bswap32</name><argument_list pos:start="178:33" pos:end="178:60">(<argument pos:start="178:34" pos:end="178:59"><expr pos:start="178:34" pos:end="178:59"><call pos:start="178:34" pos:end="178:59"><name pos:start="178:34" pos:end="178:45">cpu_ldl_code</name><argument_list pos:start="178:46" pos:end="178:59">(<argument pos:start="178:47" pos:end="178:49"><expr pos:start="178:47" pos:end="178:49"><name pos:start="178:47" pos:end="178:49">env</name></expr></argument>, <argument pos:start="178:52" pos:end="178:58"><expr pos:start="178:52" pos:end="178:58"><name pos:start="178:52" pos:end="178:58"><name pos:start="178:52" pos:end="178:54">ctx</name><operator pos:start="178:55" pos:end="178:55">.</operator><name pos:start="178:56" pos:end="178:58">nip</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="180:11" pos:end="376:0">else <block pos:start="180:16" pos:end="376:0">{<block_content pos:start="182:13" pos:end="376:0">

            <expr_stmt pos:start="182:13" pos:end="182:52"><expr pos:start="182:13" pos:end="182:51"><name pos:start="182:13" pos:end="182:22"><name pos:start="182:13" pos:end="182:15">ctx</name><operator pos:start="182:16" pos:end="182:16">.</operator><name pos:start="182:17" pos:end="182:22">opcode</name></name> <operator pos:start="182:24" pos:end="182:24">=</operator> <call pos:start="182:26" pos:end="182:51"><name pos:start="182:26" pos:end="182:37">cpu_ldl_code</name><argument_list pos:start="182:38" pos:end="182:51">(<argument pos:start="182:39" pos:end="182:41"><expr pos:start="182:39" pos:end="182:41"><name pos:start="182:39" pos:end="182:41">env</name></expr></argument>, <argument pos:start="182:44" pos:end="182:50"><expr pos:start="182:44" pos:end="182:50"><name pos:start="182:44" pos:end="182:50"><name pos:start="182:44" pos:end="182:46">ctx</name><operator pos:start="182:47" pos:end="182:47">.</operator><name pos:start="182:48" pos:end="182:50">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="185:9" pos:end="189:70"><expr pos:start="185:9" pos:end="189:69"><call pos:start="185:9" pos:end="189:69"><name pos:start="185:9" pos:end="185:17">LOG_DISAS</name><argument_list pos:start="185:18" pos:end="189:69">(<argument pos:start="185:19" pos:end="185:65"><expr pos:start="185:19" pos:end="185:65"><literal type="string" pos:start="185:19" pos:end="185:65">"translate opcode %08x (%02x %02x %02x) (%s)\n"</literal></expr></argument>,

                    <argument pos:start="187:21" pos:end="187:30"><expr pos:start="187:21" pos:end="187:30"><name pos:start="187:21" pos:end="187:30"><name pos:start="187:21" pos:end="187:23">ctx</name><operator pos:start="187:24" pos:end="187:24">.</operator><name pos:start="187:25" pos:end="187:30">opcode</name></name></expr></argument>, <argument pos:start="187:33" pos:end="187:48"><expr pos:start="187:33" pos:end="187:48"><call pos:start="187:33" pos:end="187:48"><name pos:start="187:33" pos:end="187:36">opc1</name><argument_list pos:start="187:37" pos:end="187:48">(<argument pos:start="187:38" pos:end="187:47"><expr pos:start="187:38" pos:end="187:47"><name pos:start="187:38" pos:end="187:47"><name pos:start="187:38" pos:end="187:40">ctx</name><operator pos:start="187:41" pos:end="187:41">.</operator><name pos:start="187:42" pos:end="187:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="187:51" pos:end="187:66"><expr pos:start="187:51" pos:end="187:66"><call pos:start="187:51" pos:end="187:66"><name pos:start="187:51" pos:end="187:54">opc2</name><argument_list pos:start="187:55" pos:end="187:66">(<argument pos:start="187:56" pos:end="187:65"><expr pos:start="187:56" pos:end="187:65"><name pos:start="187:56" pos:end="187:65"><name pos:start="187:56" pos:end="187:58">ctx</name><operator pos:start="187:59" pos:end="187:59">.</operator><name pos:start="187:60" pos:end="187:65">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="189:21" pos:end="189:36"><expr pos:start="189:21" pos:end="189:36"><call pos:start="189:21" pos:end="189:36"><name pos:start="189:21" pos:end="189:24">opc3</name><argument_list pos:start="189:25" pos:end="189:36">(<argument pos:start="189:26" pos:end="189:35"><expr pos:start="189:26" pos:end="189:35"><name pos:start="189:26" pos:end="189:35"><name pos:start="189:26" pos:end="189:28">ctx</name><operator pos:start="189:29" pos:end="189:29">.</operator><name pos:start="189:30" pos:end="189:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="189:39" pos:end="189:68"><expr pos:start="189:39" pos:end="189:68"><ternary pos:start="189:39" pos:end="189:68"><condition pos:start="189:39" pos:end="189:51"><expr pos:start="189:39" pos:end="189:49"><name pos:start="189:39" pos:end="189:49"><name pos:start="189:39" pos:end="189:41">ctx</name><operator pos:start="189:42" pos:end="189:42">.</operator><name pos:start="189:43" pos:end="189:49">le_mode</name></name></expr> ?</condition><then pos:start="189:53" pos:end="189:60"> <expr pos:start="189:53" pos:end="189:60"><literal type="string" pos:start="189:53" pos:end="189:60">"little"</literal></expr> </then><else pos:start="189:62" pos:end="189:68">: <expr pos:start="189:64" pos:end="189:68"><literal type="string" pos:start="189:64" pos:end="189:68">"big"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="376:0"><if pos:start="191:9" pos:end="376:0">if <condition pos:start="191:12" pos:end="191:76">(<expr pos:start="191:13" pos:end="191:75"><call pos:start="191:13" pos:end="191:75"><name pos:start="191:13" pos:end="191:20">unlikely</name><argument_list pos:start="191:21" pos:end="191:75">(<argument pos:start="191:22" pos:end="191:74"><expr pos:start="191:22" pos:end="191:74"><call pos:start="191:22" pos:end="191:74"><name pos:start="191:22" pos:end="191:39">qemu_loglevel_mask</name><argument_list pos:start="191:40" pos:end="191:74">(<argument pos:start="191:41" pos:end="191:73"><expr pos:start="191:41" pos:end="191:73"><name pos:start="191:41" pos:end="191:53">CPU_LOG_TB_OP</name> <operator pos:start="191:55" pos:end="191:55">|</operator> <name pos:start="191:57" pos:end="191:73">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:78" pos:end="376:0">{<block_content pos:start="193:13" pos:end="376:0">

            <expr_stmt pos:start="193:13" pos:end="193:46"><expr pos:start="193:13" pos:end="193:45"><call pos:start="193:13" pos:end="193:45"><name pos:start="193:13" pos:end="193:36">tcg_gen_debug_insn_start</name><argument_list pos:start="193:37" pos:end="193:45">(<argument pos:start="193:38" pos:end="193:44"><expr pos:start="193:38" pos:end="193:44"><name pos:start="193:38" pos:end="193:44"><name pos:start="193:38" pos:end="193:40">ctx</name><operator pos:start="193:41" pos:end="193:41">.</operator><name pos:start="193:42" pos:end="193:44">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="196:9" pos:end="196:21"><expr pos:start="196:9" pos:end="196:20"><name pos:start="196:9" pos:end="196:15"><name pos:start="196:9" pos:end="196:11">ctx</name><operator pos:start="196:12" pos:end="196:12">.</operator><name pos:start="196:13" pos:end="196:15">nip</name></name> <operator pos:start="196:17" pos:end="196:18">+=</operator> <literal type="number" pos:start="196:20" pos:end="196:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="198:9" pos:end="198:29"><expr pos:start="198:9" pos:end="198:28"><name pos:start="198:9" pos:end="198:13">table</name> <operator pos:start="198:15" pos:end="198:15">=</operator> <name pos:start="198:17" pos:end="198:28"><name pos:start="198:17" pos:end="198:19">env</name><operator pos:start="198:20" pos:end="198:21">-&gt;</operator><name pos:start="198:22" pos:end="198:28">opcodes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="200:9" pos:end="200:20"><expr pos:start="200:9" pos:end="200:19"><name pos:start="200:9" pos:end="200:17">num_insns</name><operator pos:start="200:18" pos:end="200:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="202:9" pos:end="202:42"><expr pos:start="202:9" pos:end="202:41"><name pos:start="202:9" pos:end="202:15">handler</name> <operator pos:start="202:17" pos:end="202:17">=</operator> <name pos:start="202:19" pos:end="202:41"><name pos:start="202:19" pos:end="202:23">table</name><index pos:start="202:24" pos:end="202:41">[<expr pos:start="202:25" pos:end="202:40"><call pos:start="202:25" pos:end="202:40"><name pos:start="202:25" pos:end="202:28">opc1</name><argument_list pos:start="202:29" pos:end="202:40">(<argument pos:start="202:30" pos:end="202:39"><expr pos:start="202:30" pos:end="202:39"><name pos:start="202:30" pos:end="202:39"><name pos:start="202:30" pos:end="202:32">ctx</name><operator pos:start="202:33" pos:end="202:33">.</operator><name pos:start="202:34" pos:end="202:39">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="204:9" pos:end="376:0"><if pos:start="204:9" pos:end="376:0">if <condition pos:start="204:12" pos:end="204:40">(<expr pos:start="204:13" pos:end="204:39"><call pos:start="204:13" pos:end="204:39"><name pos:start="204:13" pos:end="204:30">is_indirect_opcode</name><argument_list pos:start="204:31" pos:end="204:39">(<argument pos:start="204:32" pos:end="204:38"><expr pos:start="204:32" pos:end="204:38"><name pos:start="204:32" pos:end="204:38">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="204:42" pos:end="376:0">{<block_content pos:start="206:13" pos:end="376:0">

            <expr_stmt pos:start="206:13" pos:end="206:39"><expr pos:start="206:13" pos:end="206:38"><name pos:start="206:13" pos:end="206:17">table</name> <operator pos:start="206:19" pos:end="206:19">=</operator> <call pos:start="206:21" pos:end="206:38"><name pos:start="206:21" pos:end="206:29">ind_table</name><argument_list pos:start="206:30" pos:end="206:38">(<argument pos:start="206:31" pos:end="206:37"><expr pos:start="206:31" pos:end="206:37"><name pos:start="206:31" pos:end="206:37">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="208:13" pos:end="208:46"><expr pos:start="208:13" pos:end="208:45"><name pos:start="208:13" pos:end="208:19">handler</name> <operator pos:start="208:21" pos:end="208:21">=</operator> <name pos:start="208:23" pos:end="208:45"><name pos:start="208:23" pos:end="208:27">table</name><index pos:start="208:28" pos:end="208:45">[<expr pos:start="208:29" pos:end="208:44"><call pos:start="208:29" pos:end="208:44"><name pos:start="208:29" pos:end="208:32">opc2</name><argument_list pos:start="208:33" pos:end="208:44">(<argument pos:start="208:34" pos:end="208:43"><expr pos:start="208:34" pos:end="208:43"><name pos:start="208:34" pos:end="208:43"><name pos:start="208:34" pos:end="208:36">ctx</name><operator pos:start="208:37" pos:end="208:37">.</operator><name pos:start="208:38" pos:end="208:43">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="210:13" pos:end="376:0"><if pos:start="210:13" pos:end="376:0">if <condition pos:start="210:16" pos:end="210:44">(<expr pos:start="210:17" pos:end="210:43"><call pos:start="210:17" pos:end="210:43"><name pos:start="210:17" pos:end="210:34">is_indirect_opcode</name><argument_list pos:start="210:35" pos:end="210:43">(<argument pos:start="210:36" pos:end="210:42"><expr pos:start="210:36" pos:end="210:42"><name pos:start="210:36" pos:end="210:42">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="210:46" pos:end="376:0">{<block_content pos:start="212:17" pos:end="376:0">

                <expr_stmt pos:start="212:17" pos:end="212:43"><expr pos:start="212:17" pos:end="212:42"><name pos:start="212:17" pos:end="212:21">table</name> <operator pos:start="212:23" pos:end="212:23">=</operator> <call pos:start="212:25" pos:end="212:42"><name pos:start="212:25" pos:end="212:33">ind_table</name><argument_list pos:start="212:34" pos:end="212:42">(<argument pos:start="212:35" pos:end="212:41"><expr pos:start="212:35" pos:end="212:41"><name pos:start="212:35" pos:end="212:41">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="214:17" pos:end="214:50"><expr pos:start="214:17" pos:end="214:49"><name pos:start="214:17" pos:end="214:23">handler</name> <operator pos:start="214:25" pos:end="214:25">=</operator> <name pos:start="214:27" pos:end="214:49"><name pos:start="214:27" pos:end="214:31">table</name><index pos:start="214:32" pos:end="214:49">[<expr pos:start="214:33" pos:end="214:48"><call pos:start="214:33" pos:end="214:48"><name pos:start="214:33" pos:end="214:36">opc3</name><argument_list pos:start="214:37" pos:end="214:48">(<argument pos:start="214:38" pos:end="214:47"><expr pos:start="214:38" pos:end="214:47"><name pos:start="214:38" pos:end="214:47"><name pos:start="214:38" pos:end="214:40">ctx</name><operator pos:start="214:41" pos:end="214:41">.</operator><name pos:start="214:42" pos:end="214:47">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



        <comment type="block" pos:start="218:9" pos:end="218:40">/* Is opcode *REALLY* valid ? */</comment>

        <if_stmt pos:start="220:9" pos:end="376:0"><if pos:start="220:9" pos:end="376:0">if <condition pos:start="220:12" pos:end="220:55">(<expr pos:start="220:13" pos:end="220:54"><call pos:start="220:13" pos:end="220:54"><name pos:start="220:13" pos:end="220:20">unlikely</name><argument_list pos:start="220:21" pos:end="220:54">(<argument pos:start="220:22" pos:end="220:53"><expr pos:start="220:22" pos:end="220:53"><name pos:start="220:22" pos:end="220:37"><name pos:start="220:22" pos:end="220:28">handler</name><operator pos:start="220:29" pos:end="220:30">-&gt;</operator><name pos:start="220:31" pos:end="220:37">handler</name></name> <operator pos:start="220:39" pos:end="220:40">==</operator> <operator pos:start="220:42" pos:end="220:42">&amp;</operator><name pos:start="220:43" pos:end="220:53">gen_invalid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="220:57" pos:end="376:0">{<block_content pos:start="222:13" pos:end="376:0">

            <if_stmt pos:start="222:13" pos:end="376:0"><if pos:start="222:13" pos:end="233:9">if <condition pos:start="222:16" pos:end="222:35">(<expr pos:start="222:17" pos:end="222:34"><call pos:start="222:17" pos:end="222:34"><name pos:start="222:17" pos:end="222:32">qemu_log_enabled</name><argument_list pos:start="222:33" pos:end="222:34">()</argument_list></call></expr>)</condition> <block pos:start="222:37" pos:end="233:9">{<block_content pos:start="224:17" pos:end="230:81">

                <expr_stmt pos:start="224:17" pos:end="230:81"><expr pos:start="224:17" pos:end="230:80"><call pos:start="224:17" pos:end="230:80"><name pos:start="224:17" pos:end="224:24">qemu_log</name><argument_list pos:start="224:25" pos:end="230:80">(<argument pos:start="224:26" pos:end="226:75"><expr pos:start="224:26" pos:end="226:75"><literal type="string" pos:start="224:26" pos:end="224:55">"invalid/unsupported opcode: "</literal>

                         <literal type="string" pos:start="226:26" pos:end="226:53">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="226:55" pos:end="226:67">TARGET_FMT_lx</name> <literal type="string" pos:start="226:69" pos:end="226:75">" %d\n"</literal></expr></argument>,

                         <argument pos:start="228:26" pos:end="228:41"><expr pos:start="228:26" pos:end="228:41"><call pos:start="228:26" pos:end="228:41"><name pos:start="228:26" pos:end="228:29">opc1</name><argument_list pos:start="228:30" pos:end="228:41">(<argument pos:start="228:31" pos:end="228:40"><expr pos:start="228:31" pos:end="228:40"><name pos:start="228:31" pos:end="228:40"><name pos:start="228:31" pos:end="228:33">ctx</name><operator pos:start="228:34" pos:end="228:34">.</operator><name pos:start="228:35" pos:end="228:40">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="228:44" pos:end="228:59"><expr pos:start="228:44" pos:end="228:59"><call pos:start="228:44" pos:end="228:59"><name pos:start="228:44" pos:end="228:47">opc2</name><argument_list pos:start="228:48" pos:end="228:59">(<argument pos:start="228:49" pos:end="228:58"><expr pos:start="228:49" pos:end="228:58"><name pos:start="228:49" pos:end="228:58"><name pos:start="228:49" pos:end="228:51">ctx</name><operator pos:start="228:52" pos:end="228:52">.</operator><name pos:start="228:53" pos:end="228:58">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="230:26" pos:end="230:41"><expr pos:start="230:26" pos:end="230:41"><call pos:start="230:26" pos:end="230:41"><name pos:start="230:26" pos:end="230:29">opc3</name><argument_list pos:start="230:30" pos:end="230:41">(<argument pos:start="230:31" pos:end="230:40"><expr pos:start="230:31" pos:end="230:40"><name pos:start="230:31" pos:end="230:40"><name pos:start="230:31" pos:end="230:33">ctx</name><operator pos:start="230:34" pos:end="230:34">.</operator><name pos:start="230:35" pos:end="230:40">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="230:44" pos:end="230:53"><expr pos:start="230:44" pos:end="230:53"><name pos:start="230:44" pos:end="230:53"><name pos:start="230:44" pos:end="230:46">ctx</name><operator pos:start="230:47" pos:end="230:47">.</operator><name pos:start="230:48" pos:end="230:53">opcode</name></name></expr></argument>, <argument pos:start="230:56" pos:end="230:66"><expr pos:start="230:56" pos:end="230:66"><name pos:start="230:56" pos:end="230:62"><name pos:start="230:56" pos:end="230:58">ctx</name><operator pos:start="230:59" pos:end="230:59">.</operator><name pos:start="230:60" pos:end="230:62">nip</name></name> <operator pos:start="230:64" pos:end="230:64">-</operator> <literal type="number" pos:start="230:66" pos:end="230:66">4</literal></expr></argument>, <argument pos:start="230:69" pos:end="230:79"><expr pos:start="230:69" pos:end="230:79"><operator pos:start="230:69" pos:end="230:69">(</operator><name pos:start="230:70" pos:end="230:72">int</name><operator pos:start="230:73" pos:end="230:73">)</operator><name pos:start="230:74" pos:end="230:79">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if> <else pos:start="233:11" pos:end="376:0">else <block pos:start="233:16" pos:end="376:0">{<block_content pos:start="235:13" pos:end="376:0">

            <decl_stmt pos:start="235:13" pos:end="235:27"><decl pos:start="235:13" pos:end="235:26"><type pos:start="235:13" pos:end="235:20"><name pos:start="235:13" pos:end="235:20">uint32_t</name></type> <name pos:start="235:22" pos:end="235:26">inval</name></decl>;</decl_stmt>



            <if_stmt pos:start="239:13" pos:end="376:0"><if pos:start="239:13" pos:end="243:13">if <condition pos:start="239:16" pos:end="239:104">(<expr pos:start="239:17" pos:end="239:103"><call pos:start="239:17" pos:end="239:103"><name pos:start="239:17" pos:end="239:24">unlikely</name><argument_list pos:start="239:25" pos:end="239:103">(<argument pos:start="239:26" pos:end="239:102"><expr pos:start="239:26" pos:end="239:102"><name pos:start="239:26" pos:end="239:38"><name pos:start="239:26" pos:end="239:32">handler</name><operator pos:start="239:33" pos:end="239:34">-&gt;</operator><name pos:start="239:35" pos:end="239:38">type</name></name> <operator pos:start="239:40" pos:end="239:40">&amp;</operator> <operator pos:start="239:42" pos:end="239:42">(</operator><name pos:start="239:43" pos:end="239:49">PPC_SPE</name> <operator pos:start="239:51" pos:end="239:51">|</operator> <name pos:start="239:53" pos:end="239:66">PPC_SPE_SINGLE</name> <operator pos:start="239:68" pos:end="239:68">|</operator> <name pos:start="239:70" pos:end="239:83">PPC_SPE_DOUBLE</name><operator pos:start="239:84" pos:end="239:84">)</operator> <operator pos:start="239:86" pos:end="239:87">&amp;&amp;</operator> <call pos:start="239:89" pos:end="239:102"><name pos:start="239:89" pos:end="239:90">Rc</name><argument_list pos:start="239:91" pos:end="239:102">(<argument pos:start="239:92" pos:end="239:101"><expr pos:start="239:92" pos:end="239:101"><name pos:start="239:92" pos:end="239:101"><name pos:start="239:92" pos:end="239:94">ctx</name><operator pos:start="239:95" pos:end="239:95">.</operator><name pos:start="239:96" pos:end="239:101">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="239:106" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:40">

                <expr_stmt pos:start="241:17" pos:end="241:40"><expr pos:start="241:17" pos:end="241:39"><name pos:start="241:17" pos:end="241:21">inval</name> <operator pos:start="241:23" pos:end="241:23">=</operator> <name pos:start="241:25" pos:end="241:39"><name pos:start="241:25" pos:end="241:31">handler</name><operator pos:start="241:32" pos:end="241:33">-&gt;</operator><name pos:start="241:34" pos:end="241:39">inval2</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="243:15" pos:end="376:0">else <block pos:start="243:20" pos:end="376:0">{<block_content pos:start="245:17" pos:end="376:0">

                <expr_stmt pos:start="245:17" pos:end="245:40"><expr pos:start="245:17" pos:end="245:39"><name pos:start="245:17" pos:end="245:21">inval</name> <operator pos:start="245:23" pos:end="245:23">=</operator> <name pos:start="245:25" pos:end="245:39"><name pos:start="245:25" pos:end="245:31">handler</name><operator pos:start="245:32" pos:end="245:33">-&gt;</operator><name pos:start="245:34" pos:end="245:39">inval1</name></name></expr>;</expr_stmt>




            <if_stmt pos:start="250:13" pos:end="376:0"><if pos:start="250:13" pos:end="376:0">if <condition pos:start="250:16" pos:end="250:52">(<expr pos:start="250:17" pos:end="250:51"><call pos:start="250:17" pos:end="250:51"><name pos:start="250:17" pos:end="250:24">unlikely</name><argument_list pos:start="250:25" pos:end="250:51">(<argument pos:start="250:26" pos:end="250:50"><expr pos:start="250:26" pos:end="250:50"><operator pos:start="250:26" pos:end="250:26">(</operator><name pos:start="250:27" pos:end="250:36"><name pos:start="250:27" pos:end="250:29">ctx</name><operator pos:start="250:30" pos:end="250:30">.</operator><name pos:start="250:31" pos:end="250:36">opcode</name></name> <operator pos:start="250:38" pos:end="250:38">&amp;</operator> <name pos:start="250:40" pos:end="250:44">inval</name><operator pos:start="250:45" pos:end="250:45">)</operator> <operator pos:start="250:47" pos:end="250:48">!=</operator> <literal type="number" pos:start="250:50" pos:end="250:50">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="250:54" pos:end="376:0">{<block_content pos:start="252:17" pos:end="376:0">

                <if_stmt pos:start="252:17" pos:end="376:0"><if pos:start="252:17" pos:end="376:0">if <condition pos:start="252:20" pos:end="252:39">(<expr pos:start="252:21" pos:end="252:38"><call pos:start="252:21" pos:end="252:38"><name pos:start="252:21" pos:end="252:36">qemu_log_enabled</name><argument_list pos:start="252:37" pos:end="252:38">()</argument_list></call></expr>)</condition> <block pos:start="252:41" pos:end="376:0">{<block_content pos:start="254:21" pos:end="376:0">

                    <expr_stmt pos:start="254:21" pos:end="262:54"><expr pos:start="254:21" pos:end="262:53"><call pos:start="254:21" pos:end="262:53"><name pos:start="254:21" pos:end="254:28">qemu_log</name><argument_list pos:start="254:29" pos:end="262:53">(<argument pos:start="254:30" pos:end="256:76"><expr pos:start="254:30" pos:end="256:76"><literal type="string" pos:start="254:30" pos:end="254:62">"invalid bits: %08x for opcode: "</literal>

                             <literal type="string" pos:start="256:30" pos:end="256:57">"%02x - %02x - %02x (%08x) "</literal> <name pos:start="256:59" pos:end="256:71">TARGET_FMT_lx</name> <literal type="string" pos:start="256:73" pos:end="256:76">"\n"</literal></expr></argument>,

                             <argument pos:start="258:30" pos:end="258:47"><expr pos:start="258:30" pos:end="258:47"><name pos:start="258:30" pos:end="258:39"><name pos:start="258:30" pos:end="258:32">ctx</name><operator pos:start="258:33" pos:end="258:33">.</operator><name pos:start="258:34" pos:end="258:39">opcode</name></name> <operator pos:start="258:41" pos:end="258:41">&amp;</operator> <name pos:start="258:43" pos:end="258:47">inval</name></expr></argument>, <argument pos:start="258:50" pos:end="258:65"><expr pos:start="258:50" pos:end="258:65"><call pos:start="258:50" pos:end="258:65"><name pos:start="258:50" pos:end="258:53">opc1</name><argument_list pos:start="258:54" pos:end="258:65">(<argument pos:start="258:55" pos:end="258:64"><expr pos:start="258:55" pos:end="258:64"><name pos:start="258:55" pos:end="258:64"><name pos:start="258:55" pos:end="258:57">ctx</name><operator pos:start="258:58" pos:end="258:58">.</operator><name pos:start="258:59" pos:end="258:64">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="260:30" pos:end="260:45"><expr pos:start="260:30" pos:end="260:45"><call pos:start="260:30" pos:end="260:45"><name pos:start="260:30" pos:end="260:33">opc2</name><argument_list pos:start="260:34" pos:end="260:45">(<argument pos:start="260:35" pos:end="260:44"><expr pos:start="260:35" pos:end="260:44"><name pos:start="260:35" pos:end="260:44"><name pos:start="260:35" pos:end="260:37">ctx</name><operator pos:start="260:38" pos:end="260:38">.</operator><name pos:start="260:39" pos:end="260:44">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="260:48" pos:end="260:63"><expr pos:start="260:48" pos:end="260:63"><call pos:start="260:48" pos:end="260:63"><name pos:start="260:48" pos:end="260:51">opc3</name><argument_list pos:start="260:52" pos:end="260:63">(<argument pos:start="260:53" pos:end="260:62"><expr pos:start="260:53" pos:end="260:62"><name pos:start="260:53" pos:end="260:62"><name pos:start="260:53" pos:end="260:55">ctx</name><operator pos:start="260:56" pos:end="260:56">.</operator><name pos:start="260:57" pos:end="260:62">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="262:30" pos:end="262:39"><expr pos:start="262:30" pos:end="262:39"><name pos:start="262:30" pos:end="262:39"><name pos:start="262:30" pos:end="262:32">ctx</name><operator pos:start="262:33" pos:end="262:33">.</operator><name pos:start="262:34" pos:end="262:39">opcode</name></name></expr></argument>, <argument pos:start="262:42" pos:end="262:52"><expr pos:start="262:42" pos:end="262:52"><name pos:start="262:42" pos:end="262:48"><name pos:start="262:42" pos:end="262:44">ctx</name><operator pos:start="262:45" pos:end="262:45">.</operator><name pos:start="262:46" pos:end="262:48">nip</name></name> <operator pos:start="262:50" pos:end="262:50">-</operator> <literal type="number" pos:start="262:52" pos:end="262:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <expr_stmt pos:start="265:17" pos:end="265:68"><expr pos:start="265:17" pos:end="265:67"><call pos:start="265:17" pos:end="265:67"><name pos:start="265:17" pos:end="265:35">gen_inval_exception</name><argument_list pos:start="265:36" pos:end="265:67">(<argument pos:start="265:37" pos:end="265:40"><expr pos:start="265:37" pos:end="265:40"><name pos:start="265:37" pos:end="265:40">ctxp</name></expr></argument>, <argument pos:start="265:43" pos:end="265:66"><expr pos:start="265:43" pos:end="265:66"><name pos:start="265:43" pos:end="265:66">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="267:17" pos:end="267:22">break;</break>



        <expr_stmt pos:start="271:9" pos:end="274:0"><expr pos:start="271:9" pos:end="271:35"><operator pos:start="271:9" pos:end="271:9">(</operator><operator pos:start="271:10" pos:end="271:10">*</operator><operator pos:start="271:11" pos:end="271:11">(</operator><name pos:start="271:12" pos:end="271:27"><name pos:start="271:12" pos:end="271:18">handler</name><operator pos:start="271:19" pos:end="271:20">-&gt;</operator><name pos:start="271:21" pos:end="271:27">handler</name></name><operator pos:start="271:28" pos:end="271:28">)</operator><operator pos:start="271:29" pos:end="271:29">)</operator><operator pos:start="271:30" pos:end="271:30">(</operator><operator pos:start="271:31" pos:end="271:31">&amp;</operator><name pos:start="271:32" pos:end="271:34">ctx</name><operator pos:start="271:35" pos:end="271:35">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="273:1" pos:end="273:30">#<cpp:directive pos:start="273:2" pos:end="273:3">if</cpp:directive> <expr pos:start="273:5" pos:end="273:30"><call pos:start="273:5" pos:end="273:30"><name pos:start="273:5" pos:end="273:11">defined</name><argument_list pos:start="273:12" pos:end="273:30">(<argument pos:start="273:13" pos:end="273:29"><expr pos:start="273:13" pos:end="273:29"><name pos:start="273:13" pos:end="273:29">DO_PPC_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="275:9" pos:end="278:0"><expr pos:start="275:9" pos:end="275:24"><name pos:start="275:9" pos:end="275:22"><name pos:start="275:9" pos:end="275:15">handler</name><operator pos:start="275:16" pos:end="275:17">-&gt;</operator><name pos:start="275:18" pos:end="275:22">count</name></name><operator pos:start="275:23" pos:end="275:24">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="277:1" pos:end="277:6">#<cpp:directive pos:start="277:2" pos:end="277:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="279:9" pos:end="279:41">/* Check trace mode exceptions */</comment>

        <if_stmt pos:start="281:9" pos:end="376:0"><if pos:start="281:9" pos:end="293:9">if <condition pos:start="281:12" pos:end="289:59">(<expr pos:start="281:13" pos:end="289:58"><call pos:start="281:13" pos:end="289:58"><name pos:start="281:13" pos:end="281:20">unlikely</name><argument_list pos:start="281:21" pos:end="289:58">(<argument pos:start="281:22" pos:end="289:57"><expr pos:start="281:22" pos:end="289:57"><name pos:start="281:22" pos:end="281:43"><name pos:start="281:22" pos:end="281:24">ctx</name><operator pos:start="281:25" pos:end="281:25">.</operator><name pos:start="281:26" pos:end="281:43">singlestep_enabled</name></name> <operator pos:start="281:45" pos:end="281:45">&amp;</operator> <name pos:start="281:47" pos:end="281:61">CPU_SINGLE_STEP</name> <operator pos:start="281:63" pos:end="281:64">&amp;&amp;</operator>

                     <operator pos:start="283:22" pos:end="283:22">(</operator><name pos:start="283:23" pos:end="283:29"><name pos:start="283:23" pos:end="283:25">ctx</name><operator pos:start="283:26" pos:end="283:26">.</operator><name pos:start="283:27" pos:end="283:29">nip</name></name> <operator pos:start="283:31" pos:end="283:32">&lt;=</operator> <literal type="number" pos:start="283:34" pos:end="283:38">0x100</literal> <operator pos:start="283:40" pos:end="283:41">||</operator> <name pos:start="283:43" pos:end="283:49"><name pos:start="283:43" pos:end="283:45">ctx</name><operator pos:start="283:46" pos:end="283:46">.</operator><name pos:start="283:47" pos:end="283:49">nip</name></name> <operator pos:start="283:51" pos:end="283:51">&gt;</operator> <literal type="number" pos:start="283:53" pos:end="283:57">0xF00</literal><operator pos:start="283:58" pos:end="283:58">)</operator> <operator pos:start="283:60" pos:end="283:61">&amp;&amp;</operator>

                     <name pos:start="285:22" pos:end="285:34"><name pos:start="285:22" pos:end="285:24">ctx</name><operator pos:start="285:25" pos:end="285:25">.</operator><name pos:start="285:26" pos:end="285:34">exception</name></name> <operator pos:start="285:36" pos:end="285:37">!=</operator> <name pos:start="285:39" pos:end="285:53">POWERPC_SYSCALL</name> <operator pos:start="285:55" pos:end="285:56">&amp;&amp;</operator>

                     <name pos:start="287:22" pos:end="287:34"><name pos:start="287:22" pos:end="287:24">ctx</name><operator pos:start="287:25" pos:end="287:25">.</operator><name pos:start="287:26" pos:end="287:34">exception</name></name> <operator pos:start="287:36" pos:end="287:37">!=</operator> <name pos:start="287:39" pos:end="287:55">POWERPC_EXCP_TRAP</name> <operator pos:start="287:57" pos:end="287:58">&amp;&amp;</operator>

                     <name pos:start="289:22" pos:end="289:34"><name pos:start="289:22" pos:end="289:24">ctx</name><operator pos:start="289:25" pos:end="289:25">.</operator><name pos:start="289:26" pos:end="289:34">exception</name></name> <operator pos:start="289:36" pos:end="289:37">!=</operator> <name pos:start="289:39" pos:end="289:57">POWERPC_EXCP_BRANCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="289:61" pos:end="293:9">{<block_content pos:start="291:13" pos:end="291:52">

            <expr_stmt pos:start="291:13" pos:end="291:52"><expr pos:start="291:13" pos:end="291:51"><call pos:start="291:13" pos:end="291:51"><name pos:start="291:13" pos:end="291:25">gen_exception</name><argument_list pos:start="291:26" pos:end="291:51">(<argument pos:start="291:27" pos:end="291:30"><expr pos:start="291:27" pos:end="291:30"><name pos:start="291:27" pos:end="291:30">ctxp</name></expr></argument>, <argument pos:start="291:33" pos:end="291:50"><expr pos:start="291:33" pos:end="291:50"><name pos:start="291:33" pos:end="291:50">POWERPC_EXCP_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="293:11" pos:end="376:0">else if <condition pos:start="293:19" pos:end="299:52">(<expr pos:start="293:20" pos:end="299:51"><call pos:start="293:20" pos:end="299:51"><name pos:start="293:20" pos:end="293:27">unlikely</name><argument_list pos:start="293:28" pos:end="299:51">(<argument pos:start="293:29" pos:end="299:50"><expr pos:start="293:29" pos:end="299:50"><operator pos:start="293:29" pos:end="293:29">(</operator><operator pos:start="293:30" pos:end="293:30">(</operator><name pos:start="293:31" pos:end="293:37"><name pos:start="293:31" pos:end="293:33">ctx</name><operator pos:start="293:34" pos:end="293:34">.</operator><name pos:start="293:35" pos:end="293:37">nip</name></name> <operator pos:start="293:39" pos:end="293:39">&amp;</operator> <operator pos:start="293:41" pos:end="293:41">(</operator><name pos:start="293:42" pos:end="293:57">TARGET_PAGE_SIZE</name> <operator pos:start="293:59" pos:end="293:59">-</operator> <literal type="number" pos:start="293:61" pos:end="293:61">1</literal><operator pos:start="293:62" pos:end="293:62">)</operator><operator pos:start="293:63" pos:end="293:63">)</operator> <operator pos:start="293:65" pos:end="293:66">==</operator> <literal type="number" pos:start="293:68" pos:end="293:68">0</literal><operator pos:start="293:69" pos:end="293:69">)</operator> <operator pos:start="293:71" pos:end="293:72">||</operator>

                            <operator pos:start="295:29" pos:end="295:29">(</operator><name pos:start="295:30" pos:end="295:51"><name pos:start="295:30" pos:end="295:31">cs</name><operator pos:start="295:32" pos:end="295:33">-&gt;</operator><name pos:start="295:34" pos:end="295:51">singlestep_enabled</name></name><operator pos:start="295:52" pos:end="295:52">)</operator> <operator pos:start="295:54" pos:end="295:55">||</operator>

                            <name pos:start="297:29" pos:end="297:38">singlestep</name> <operator pos:start="297:40" pos:end="297:41">||</operator>

                            <name pos:start="299:29" pos:end="299:37">num_insns</name> <operator pos:start="299:39" pos:end="299:40">&gt;=</operator> <name pos:start="299:42" pos:end="299:50">max_insns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="299:54" pos:end="376:0">{<block_content pos:start="307:13" pos:end="376:0">

            <comment type="block" pos:start="301:13" pos:end="305:15">/* if we reach a page boundary or are single stepping, stop

             * generation

             */</comment>

            <break pos:start="307:13" pos:end="307:18">break;</break>









    <if_stmt pos:start="317:5" pos:end="319:21"><if pos:start="317:5" pos:end="319:21">if <condition pos:start="317:8" pos:end="317:32">(<expr pos:start="317:9" pos:end="317:31"><name pos:start="317:9" pos:end="317:18"><name pos:start="317:9" pos:end="317:10">tb</name><operator pos:start="317:11" pos:end="317:12">-&gt;</operator><name pos:start="317:13" pos:end="317:18">cflags</name></name> <operator pos:start="317:20" pos:end="317:20">&amp;</operator> <name pos:start="317:22" pos:end="317:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="319:9" pos:end="319:21"><block_content pos:start="319:9" pos:end="319:21">

        <expr_stmt pos:start="319:9" pos:end="319:21"><expr pos:start="319:9" pos:end="319:20"><call pos:start="319:9" pos:end="319:20"><name pos:start="319:9" pos:end="319:18">gen_io_end</name><argument_list pos:start="319:19" pos:end="319:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="321:5" pos:end="376:0"><if pos:start="321:5" pos:end="325:5">if <condition pos:start="321:8" pos:end="321:43">(<expr pos:start="321:9" pos:end="321:42"><name pos:start="321:9" pos:end="321:21"><name pos:start="321:9" pos:end="321:11">ctx</name><operator pos:start="321:12" pos:end="321:12">.</operator><name pos:start="321:13" pos:end="321:21">exception</name></name> <operator pos:start="321:23" pos:end="321:24">==</operator> <name pos:start="321:26" pos:end="321:42">POWERPC_EXCP_NONE</name></expr>)</condition> <block pos:start="321:45" pos:end="325:5">{<block_content pos:start="323:9" pos:end="323:38">

        <expr_stmt pos:start="323:9" pos:end="323:38"><expr pos:start="323:9" pos:end="323:37"><call pos:start="323:9" pos:end="323:37"><name pos:start="323:9" pos:end="323:19">gen_goto_tb</name><argument_list pos:start="323:20" pos:end="323:37">(<argument pos:start="323:21" pos:end="323:24"><expr pos:start="323:21" pos:end="323:24"><operator pos:start="323:21" pos:end="323:21">&amp;</operator><name pos:start="323:22" pos:end="323:24">ctx</name></expr></argument>, <argument pos:start="323:27" pos:end="323:27"><expr pos:start="323:27" pos:end="323:27"><literal type="number" pos:start="323:27" pos:end="323:27">0</literal></expr></argument>, <argument pos:start="323:30" pos:end="323:36"><expr pos:start="323:30" pos:end="323:36"><name pos:start="323:30" pos:end="323:36"><name pos:start="323:30" pos:end="323:32">ctx</name><operator pos:start="323:33" pos:end="323:33">.</operator><name pos:start="323:34" pos:end="323:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="325:7" pos:end="376:0">else if <condition pos:start="325:15" pos:end="325:52">(<expr pos:start="325:16" pos:end="325:51"><name pos:start="325:16" pos:end="325:28"><name pos:start="325:16" pos:end="325:18">ctx</name><operator pos:start="325:19" pos:end="325:19">.</operator><name pos:start="325:20" pos:end="325:28">exception</name></name> <operator pos:start="325:30" pos:end="325:31">!=</operator> <name pos:start="325:33" pos:end="325:51">POWERPC_EXCP_BRANCH</name></expr>)</condition> <block pos:start="325:54" pos:end="376:0">{<block_content pos:start="327:9" pos:end="376:0">

        <if_stmt pos:start="327:9" pos:end="376:0"><if pos:start="327:9" pos:end="376:0">if <condition pos:start="327:12" pos:end="327:45">(<expr pos:start="327:13" pos:end="327:44"><call pos:start="327:13" pos:end="327:44"><name pos:start="327:13" pos:end="327:20">unlikely</name><argument_list pos:start="327:21" pos:end="327:44">(<argument pos:start="327:22" pos:end="327:43"><expr pos:start="327:22" pos:end="327:43"><name pos:start="327:22" pos:end="327:43"><name pos:start="327:22" pos:end="327:23">cs</name><operator pos:start="327:24" pos:end="327:25">-&gt;</operator><name pos:start="327:26" pos:end="327:43">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:47" pos:end="376:0">{<block_content pos:start="329:13" pos:end="376:0">

            <expr_stmt pos:start="329:13" pos:end="329:38"><expr pos:start="329:13" pos:end="329:37"><call pos:start="329:13" pos:end="329:37"><name pos:start="329:13" pos:end="329:31">gen_debug_exception</name><argument_list pos:start="329:32" pos:end="329:37">(<argument pos:start="329:33" pos:end="329:36"><expr pos:start="329:33" pos:end="329:36"><name pos:start="329:33" pos:end="329:36">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="block" pos:start="332:9" pos:end="332:45">/* Generate the return instruction */</comment>

        <expr_stmt pos:start="334:9" pos:end="334:27"><expr pos:start="334:9" pos:end="334:26"><call pos:start="334:9" pos:end="334:26"><name pos:start="334:9" pos:end="334:23">tcg_gen_exit_tb</name><argument_list pos:start="334:24" pos:end="334:26">(<argument pos:start="334:25" pos:end="334:25"><expr pos:start="334:25" pos:end="334:25"><literal type="number" pos:start="334:25" pos:end="334:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="337:5" pos:end="337:30"><expr pos:start="337:5" pos:end="337:29"><call pos:start="337:5" pos:end="337:29"><name pos:start="337:5" pos:end="337:14">gen_tb_end</name><argument_list pos:start="337:15" pos:end="337:29">(<argument pos:start="337:16" pos:end="337:17"><expr pos:start="337:16" pos:end="337:17"><name pos:start="337:16" pos:end="337:17">tb</name></expr></argument>, <argument pos:start="337:20" pos:end="337:28"><expr pos:start="337:20" pos:end="337:28"><name pos:start="337:20" pos:end="337:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:40"><expr pos:start="339:5" pos:end="339:39"><operator pos:start="339:5" pos:end="339:5">*</operator><name pos:start="339:6" pos:end="339:24"><name pos:start="339:6" pos:end="339:12">tcg_ctx</name><operator pos:start="339:13" pos:end="339:13">.</operator><name pos:start="339:14" pos:end="339:24">gen_opc_ptr</name></name> <operator pos:start="339:26" pos:end="339:26">=</operator> <name pos:start="339:28" pos:end="339:39">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="341:5" pos:end="376:0"><if pos:start="341:5" pos:end="351:5">if <condition pos:start="341:8" pos:end="341:28">(<expr pos:start="341:9" pos:end="341:27"><call pos:start="341:9" pos:end="341:27"><name pos:start="341:9" pos:end="341:16">unlikely</name><argument_list pos:start="341:17" pos:end="341:27">(<argument pos:start="341:18" pos:end="341:26"><expr pos:start="341:18" pos:end="341:26"><name pos:start="341:18" pos:end="341:26">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="341:30" pos:end="351:5">{<block_content pos:start="343:9" pos:end="349:50">

        <expr_stmt pos:start="343:9" pos:end="343:54"><expr pos:start="343:9" pos:end="343:53"><name pos:start="343:9" pos:end="343:9">j</name> <operator pos:start="343:11" pos:end="343:11">=</operator> <name pos:start="343:13" pos:end="343:31"><name pos:start="343:13" pos:end="343:19">tcg_ctx</name><operator pos:start="343:20" pos:end="343:20">.</operator><name pos:start="343:21" pos:end="343:31">gen_opc_ptr</name></name> <operator pos:start="343:33" pos:end="343:33">-</operator> <name pos:start="343:35" pos:end="343:53"><name pos:start="343:35" pos:end="343:41">tcg_ctx</name><operator pos:start="343:42" pos:end="343:42">.</operator><name pos:start="343:43" pos:end="343:53">gen_opc_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:13"><expr pos:start="345:9" pos:end="345:12"><name pos:start="345:9" pos:end="345:10">lj</name><operator pos:start="345:11" pos:end="345:12">++</operator></expr>;</expr_stmt>

        <while pos:start="347:9" pos:end="349:50">while <condition pos:start="347:15" pos:end="347:23">(<expr pos:start="347:16" pos:end="347:22"><name pos:start="347:16" pos:end="347:17">lj</name> <operator pos:start="347:19" pos:end="347:20">&lt;=</operator> <name pos:start="347:22" pos:end="347:22">j</name></expr>)</condition><block type="pseudo" pos:start="349:13" pos:end="349:50"><block_content pos:start="349:13" pos:end="349:50">

            <expr_stmt pos:start="349:13" pos:end="349:50"><expr pos:start="349:13" pos:end="349:49"><name pos:start="349:13" pos:end="349:45"><name pos:start="349:13" pos:end="349:19">tcg_ctx</name><operator pos:start="349:20" pos:end="349:20">.</operator><name pos:start="349:21" pos:end="349:39">gen_opc_instr_start</name><index pos:start="349:40" pos:end="349:45">[<expr pos:start="349:41" pos:end="349:44"><name pos:start="349:41" pos:end="349:42">lj</name><operator pos:start="349:43" pos:end="349:44">++</operator></expr>]</index></name> <operator pos:start="349:47" pos:end="349:47">=</operator> <literal type="number" pos:start="349:49" pos:end="349:49">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="351:7" pos:end="376:0">else <block pos:start="351:12" pos:end="376:0">{<block_content pos:start="353:9" pos:end="376:0">

        <expr_stmt pos:start="353:9" pos:end="353:38"><expr pos:start="353:9" pos:end="353:37"><name pos:start="353:9" pos:end="353:16"><name pos:start="353:9" pos:end="353:10">tb</name><operator pos:start="353:11" pos:end="353:12">-&gt;</operator><name pos:start="353:13" pos:end="353:16">size</name></name> <operator pos:start="353:18" pos:end="353:18">=</operator> <name pos:start="353:20" pos:end="353:26"><name pos:start="353:20" pos:end="353:22">ctx</name><operator pos:start="353:23" pos:end="353:23">.</operator><name pos:start="353:24" pos:end="353:26">nip</name></name> <operator pos:start="353:28" pos:end="353:28">-</operator> <name pos:start="353:30" pos:end="353:37">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="355:9" pos:end="359:0"><expr pos:start="355:9" pos:end="355:30"><name pos:start="355:9" pos:end="355:18"><name pos:start="355:9" pos:end="355:10">tb</name><operator pos:start="355:11" pos:end="355:12">-&gt;</operator><name pos:start="355:13" pos:end="355:18">icount</name></name> <operator pos:start="355:20" pos:end="355:20">=</operator> <name pos:start="355:22" pos:end="355:30">num_insns</name></expr>;</expr_stmt>


<cpp:if pos:start="358:1" pos:end="358:24">#<cpp:directive pos:start="358:2" pos:end="358:3">if</cpp:directive> <expr pos:start="358:5" pos:end="358:24"><call pos:start="358:5" pos:end="358:24"><name pos:start="358:5" pos:end="358:11">defined</name><argument_list pos:start="358:12" pos:end="358:24">(<argument pos:start="358:13" pos:end="358:23"><expr pos:start="358:13" pos:end="358:23"><name pos:start="358:13" pos:end="358:23">DEBUG_DISAS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="360:5" pos:end="376:0"><if pos:start="360:5" pos:end="376:0">if <condition pos:start="360:8" pos:end="360:46">(<expr pos:start="360:9" pos:end="360:45"><call pos:start="360:9" pos:end="360:45"><name pos:start="360:9" pos:end="360:26">qemu_loglevel_mask</name><argument_list pos:start="360:27" pos:end="360:45">(<argument pos:start="360:28" pos:end="360:44"><expr pos:start="360:28" pos:end="360:44"><name pos:start="360:28" pos:end="360:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="360:48" pos:end="376:0">{<block_content pos:start="362:9" pos:end="376:0">

        <decl_stmt pos:start="362:9" pos:end="362:18"><decl pos:start="362:9" pos:end="362:17"><type pos:start="362:9" pos:end="362:11"><name pos:start="362:9" pos:end="362:11">int</name></type> <name pos:start="362:13" pos:end="362:17">flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="364:9" pos:end="364:30"><expr pos:start="364:9" pos:end="364:29"><name pos:start="364:9" pos:end="364:13">flags</name> <operator pos:start="364:15" pos:end="364:15">=</operator> <name pos:start="364:17" pos:end="364:29"><name pos:start="364:17" pos:end="364:19">env</name><operator pos:start="364:20" pos:end="364:21">-&gt;</operator><name pos:start="364:22" pos:end="364:29">bfd_mach</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="366:9" pos:end="366:35"><expr pos:start="366:9" pos:end="366:34"><name pos:start="366:9" pos:end="366:13">flags</name> <operator pos:start="366:15" pos:end="366:16">|=</operator> <name pos:start="366:18" pos:end="366:28"><name pos:start="366:18" pos:end="366:20">ctx</name><operator pos:start="366:21" pos:end="366:21">.</operator><name pos:start="366:22" pos:end="366:28">le_mode</name></name> <operator pos:start="366:30" pos:end="366:31">&lt;&lt;</operator> <literal type="number" pos:start="366:33" pos:end="366:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="368:9" pos:end="368:54"><expr pos:start="368:9" pos:end="368:53"><call pos:start="368:9" pos:end="368:53"><name pos:start="368:9" pos:end="368:16">qemu_log</name><argument_list pos:start="368:17" pos:end="368:53">(<argument pos:start="368:18" pos:end="368:27"><expr pos:start="368:18" pos:end="368:27"><literal type="string" pos:start="368:18" pos:end="368:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="368:30" pos:end="368:52"><expr pos:start="368:30" pos:end="368:52"><call pos:start="368:30" pos:end="368:52"><name pos:start="368:30" pos:end="368:42">lookup_symbol</name><argument_list pos:start="368:43" pos:end="368:52">(<argument pos:start="368:44" pos:end="368:51"><expr pos:start="368:44" pos:end="368:51"><name pos:start="368:44" pos:end="368:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="370:9" pos:end="370:67"><expr pos:start="370:9" pos:end="370:66"><call pos:start="370:9" pos:end="370:66"><name pos:start="370:9" pos:end="370:24">log_target_disas</name><argument_list pos:start="370:25" pos:end="370:66">(<argument pos:start="370:26" pos:end="370:28"><expr pos:start="370:26" pos:end="370:28"><name pos:start="370:26" pos:end="370:28">env</name></expr></argument>, <argument pos:start="370:31" pos:end="370:38"><expr pos:start="370:31" pos:end="370:38"><name pos:start="370:31" pos:end="370:38">pc_start</name></expr></argument>, <argument pos:start="370:41" pos:end="370:58"><expr pos:start="370:41" pos:end="370:58"><name pos:start="370:41" pos:end="370:47"><name pos:start="370:41" pos:end="370:43">ctx</name><operator pos:start="370:44" pos:end="370:44">.</operator><name pos:start="370:45" pos:end="370:47">nip</name></name> <operator pos:start="370:49" pos:end="370:49">-</operator> <name pos:start="370:51" pos:end="370:58">pc_start</name></expr></argument>, <argument pos:start="370:61" pos:end="370:65"><expr pos:start="370:61" pos:end="370:65"><name pos:start="370:61" pos:end="370:65">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="372:9" pos:end="376:0"><expr pos:start="372:9" pos:end="372:22"><call pos:start="372:9" pos:end="372:22"><name pos:start="372:9" pos:end="372:16">qemu_log</name><argument_list pos:start="372:17" pos:end="372:22">(<argument pos:start="372:18" pos:end="372:21"><expr pos:start="372:18" pos:end="372:21"><literal type="string" pos:start="372:18" pos:end="372:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></function>


<cpp:endif pos:start="375:1" pos:end="375:6">#<cpp:directive pos:start="375:2" pos:end="375:6">endif</cpp:directive></cpp:endif>
</unit>
