<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6219.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">frame_thread_free</name><parameter_list pos:start="1:30" pos:end="1:70">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:69"><decl pos:start="1:54" pos:end="1:69"><type pos:start="1:54" pos:end="1:69"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:69">thread_count</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:51">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">FrameThreadContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:28">fctx</name> <init pos:start="5:30" pos:end="5:51">= <expr pos:start="5:32" pos:end="5:51"><name pos:start="5:32" pos:end="5:51"><name pos:start="5:32" pos:end="5:36">avctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:51">thread_opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVCodec</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">codec</name> <init pos:start="7:20" pos:end="7:33">= <expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:33">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><call pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:29">park_frame_worker_threads</name><argument_list pos:start="13:30" pos:end="13:49">(<argument pos:start="13:31" pos:end="13:34"><expr pos:start="13:31" pos:end="13:34"><name pos:start="13:31" pos:end="13:34">fctx</name></expr></argument>, <argument pos:start="13:37" pos:end="13:48"><expr pos:start="13:37" pos:end="13:48"><name pos:start="13:37" pos:end="13:48">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="19:86"><if pos:start="17:5" pos:end="19:86">if <condition pos:start="17:8" pos:end="17:64">(<expr pos:start="17:9" pos:end="17:63"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:12">fctx</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:25">prev_thread</name></name> <operator pos:start="17:27" pos:end="17:28">&amp;&amp;</operator> <name pos:start="17:30" pos:end="17:46"><name pos:start="17:30" pos:end="17:33">fctx</name><operator pos:start="17:34" pos:end="17:35">-&gt;</operator><name pos:start="17:36" pos:end="17:46">prev_thread</name></name> <operator pos:start="17:48" pos:end="17:49">!=</operator> <name pos:start="17:51" pos:end="17:63"><name pos:start="17:51" pos:end="17:54">fctx</name><operator pos:start="17:55" pos:end="17:56">-&gt;</operator><name pos:start="17:57" pos:end="17:63">threads</name></name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:86"><block_content pos:start="19:9" pos:end="19:86">

        <expr_stmt pos:start="19:9" pos:end="19:86"><expr pos:start="19:9" pos:end="19:85"><call pos:start="19:9" pos:end="19:85"><name pos:start="19:9" pos:end="19:34">update_context_from_thread</name><argument_list pos:start="19:35" pos:end="19:85">(<argument pos:start="19:36" pos:end="19:55"><expr pos:start="19:36" pos:end="19:55"><name pos:start="19:36" pos:end="19:55"><name pos:start="19:36" pos:end="19:39">fctx</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:48">threads</name><operator pos:start="19:49" pos:end="19:50">-&gt;</operator><name pos:start="19:51" pos:end="19:55">avctx</name></name></expr></argument>, <argument pos:start="19:58" pos:end="19:81"><expr pos:start="19:58" pos:end="19:81"><name pos:start="19:58" pos:end="19:81"><name pos:start="19:58" pos:end="19:61">fctx</name><operator pos:start="19:62" pos:end="19:63">-&gt;</operator><name pos:start="19:64" pos:end="19:74">prev_thread</name><operator pos:start="19:75" pos:end="19:76">-&gt;</operator><name pos:start="19:77" pos:end="19:81">avctx</name></name></expr></argument>, <argument pos:start="19:84" pos:end="19:84"><expr pos:start="19:84" pos:end="19:84"><literal type="number" pos:start="19:84" pos:end="19:84">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:8">fctx</name><operator pos:start="23:9" pos:end="23:10">-&gt;</operator><name pos:start="23:11" pos:end="23:13">die</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</expr_stmt>



    <for pos:start="27:5" pos:end="57:5">for <control pos:start="27:9" pos:end="27:38">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:33"><expr pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:32">thread_count</name></expr>;</condition> <incr pos:start="27:35" pos:end="27:37"><expr pos:start="27:35" pos:end="27:37"><name pos:start="27:35" pos:end="27:35">i</name><operator pos:start="27:36" pos:end="27:37">++</operator></expr></incr>)</control> <block pos:start="27:40" pos:end="57:5">{<block_content pos:start="29:9" pos:end="55:35">

        <decl_stmt pos:start="29:9" pos:end="29:48"><decl pos:start="29:9" pos:end="29:47"><type pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:24">PerThreadContext</name> <modifier pos:start="29:26" pos:end="29:26">*</modifier></type><name pos:start="29:27" pos:end="29:27">p</name> <init pos:start="29:29" pos:end="29:47">= <expr pos:start="29:31" pos:end="29:47"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:47"><name pos:start="29:32" pos:end="29:35">fctx</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:44">threads</name><index pos:start="29:45" pos:end="29:47">[<expr pos:start="29:46" pos:end="29:46"><name pos:start="29:46" pos:end="29:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:38"><expr pos:start="33:9" pos:end="33:37"><call pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:26">pthread_mutex_lock</name><argument_list pos:start="33:27" pos:end="33:37">(<argument pos:start="33:28" pos:end="33:36"><expr pos:start="33:28" pos:end="33:36"><operator pos:start="33:28" pos:end="33:28">&amp;</operator><name pos:start="33:29" pos:end="33:36"><name pos:start="33:29" pos:end="33:29">p</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><call pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:27">pthread_cond_signal</name><argument_list pos:start="35:28" pos:end="35:43">(<argument pos:start="35:29" pos:end="35:42"><expr pos:start="35:29" pos:end="35:42"><operator pos:start="35:29" pos:end="35:29">&amp;</operator><name pos:start="35:30" pos:end="35:42"><name pos:start="35:30" pos:end="35:30">p</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:42">input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><call pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:28">pthread_mutex_unlock</name><argument_list pos:start="37:29" pos:end="37:39">(<argument pos:start="37:30" pos:end="37:38"><expr pos:start="37:30" pos:end="37:38"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:38"><name pos:start="37:31" pos:end="37:31">p</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:38"><expr pos:start="41:9" pos:end="41:37"><call pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:20">pthread_join</name><argument_list pos:start="41:21" pos:end="41:37">(<argument pos:start="41:22" pos:end="41:30"><expr pos:start="41:22" pos:end="41:30"><name pos:start="41:22" pos:end="41:30"><name pos:start="41:22" pos:end="41:22">p</name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:30">thread</name></name></expr></argument>, <argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="47:35"><if pos:start="45:9" pos:end="47:35">if <condition pos:start="45:12" pos:end="45:25">(<expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:17">codec</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:24">close</name></name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:35"><block_content pos:start="47:13" pos:end="47:35">

            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><call pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:17">codec</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:24">close</name></name><argument_list pos:start="47:25" pos:end="47:34">(<argument pos:start="47:26" pos:end="47:33"><expr pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:26">p</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:33">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:13">avctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:20">codec</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:27">NULL</name></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:31">release_delayed_buffers</name><argument_list pos:start="55:32" pos:end="55:34">(<argument pos:start="55:33" pos:end="55:33"><expr pos:start="55:33" pos:end="55:33"><name pos:start="55:33" pos:end="55:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="61:5" pos:end="93:5">for <control pos:start="61:9" pos:end="61:38">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">i</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:33"><expr pos:start="61:17" pos:end="61:32"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <name pos:start="61:21" pos:end="61:32">thread_count</name></expr>;</condition> <incr pos:start="61:35" pos:end="61:37"><expr pos:start="61:35" pos:end="61:37"><name pos:start="61:35" pos:end="61:35">i</name><operator pos:start="61:36" pos:end="61:37">++</operator></expr></incr>)</control> <block pos:start="61:40" pos:end="93:5">{<block_content pos:start="63:9" pos:end="91:28">

        <decl_stmt pos:start="63:9" pos:end="63:48"><decl pos:start="63:9" pos:end="63:47"><type pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:24">PerThreadContext</name> <modifier pos:start="63:26" pos:end="63:26">*</modifier></type><name pos:start="63:27" pos:end="63:27">p</name> <init pos:start="63:29" pos:end="63:47">= <expr pos:start="63:31" pos:end="63:47"><operator pos:start="63:31" pos:end="63:31">&amp;</operator><name pos:start="63:32" pos:end="63:47"><name pos:start="63:32" pos:end="63:35">fctx</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:44">threads</name><index pos:start="63:45" pos:end="63:47">[<expr pos:start="63:46" pos:end="63:46"><name pos:start="63:46" pos:end="63:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:47"><expr pos:start="67:9" pos:end="67:46"><call pos:start="67:9" pos:end="67:46"><name pos:start="67:9" pos:end="67:36">avcodec_default_free_buffers</name><argument_list pos:start="67:37" pos:end="67:46">(<argument pos:start="67:38" pos:end="67:45"><expr pos:start="67:38" pos:end="67:45"><name pos:start="67:38" pos:end="67:45"><name pos:start="67:38" pos:end="67:38">p</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:45">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:41"><expr pos:start="71:9" pos:end="71:40"><call pos:start="71:9" pos:end="71:40"><name pos:start="71:9" pos:end="71:29">pthread_mutex_destroy</name><argument_list pos:start="71:30" pos:end="71:40">(<argument pos:start="71:31" pos:end="71:39"><expr pos:start="71:31" pos:end="71:39"><operator pos:start="71:31" pos:end="71:31">&amp;</operator><name pos:start="71:32" pos:end="71:39"><name pos:start="71:32" pos:end="71:32">p</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:39">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:50"><expr pos:start="73:9" pos:end="73:49"><call pos:start="73:9" pos:end="73:49"><name pos:start="73:9" pos:end="73:29">pthread_mutex_destroy</name><argument_list pos:start="73:30" pos:end="73:49">(<argument pos:start="73:31" pos:end="73:48"><expr pos:start="73:31" pos:end="73:48"><operator pos:start="73:31" pos:end="73:31">&amp;</operator><name pos:start="73:32" pos:end="73:48"><name pos:start="73:32" pos:end="73:32">p</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:48">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><call pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:28">pthread_cond_destroy</name><argument_list pos:start="75:29" pos:end="75:44">(<argument pos:start="75:30" pos:end="75:43"><expr pos:start="75:30" pos:end="75:43"><operator pos:start="75:30" pos:end="75:30">&amp;</operator><name pos:start="75:31" pos:end="75:43"><name pos:start="75:31" pos:end="75:31">p</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:43">input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:48"><expr pos:start="77:9" pos:end="77:47"><call pos:start="77:9" pos:end="77:47"><name pos:start="77:9" pos:end="77:28">pthread_cond_destroy</name><argument_list pos:start="77:29" pos:end="77:47">(<argument pos:start="77:30" pos:end="77:46"><expr pos:start="77:30" pos:end="77:46"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:46"><name pos:start="77:31" pos:end="77:31">p</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:46">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><call pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:28">pthread_cond_destroy</name><argument_list pos:start="79:29" pos:end="79:45">(<argument pos:start="79:30" pos:end="79:44"><expr pos:start="79:30" pos:end="79:44"><operator pos:start="79:30" pos:end="79:30">&amp;</operator><name pos:start="79:31" pos:end="79:44"><name pos:start="79:31" pos:end="79:31">p</name><operator pos:start="79:32" pos:end="79:33">-&gt;</operator><name pos:start="79:34" pos:end="79:44">output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:33"><expr pos:start="81:9" pos:end="81:32"><call pos:start="81:9" pos:end="81:32"><name pos:start="81:9" pos:end="81:16">av_freep</name><argument_list pos:start="81:17" pos:end="81:32">(<argument pos:start="81:18" pos:end="81:31"><expr pos:start="81:18" pos:end="81:31"><operator pos:start="81:18" pos:end="81:18">&amp;</operator><name pos:start="81:19" pos:end="81:31"><name pos:start="81:19" pos:end="81:19">p</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:26">avpkt</name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:31">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="87:43"><if pos:start="85:9" pos:end="87:43">if <condition pos:start="85:12" pos:end="85:14">(<expr pos:start="85:13" pos:end="85:13"><name pos:start="85:13" pos:end="85:13">i</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:43"><block_content pos:start="87:13" pos:end="87:43">

            <expr_stmt pos:start="87:13" pos:end="87:43"><expr pos:start="87:13" pos:end="87:42"><call pos:start="87:13" pos:end="87:42"><name pos:start="87:13" pos:end="87:20">av_freep</name><argument_list pos:start="87:21" pos:end="87:42">(<argument pos:start="87:22" pos:end="87:41"><expr pos:start="87:22" pos:end="87:41"><operator pos:start="87:22" pos:end="87:22">&amp;</operator><name pos:start="87:23" pos:end="87:41"><name pos:start="87:23" pos:end="87:23">p</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:30">avctx</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:41">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:28"><expr pos:start="91:9" pos:end="91:27"><call pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:16">av_freep</name><argument_list pos:start="91:17" pos:end="91:27">(<argument pos:start="91:18" pos:end="91:26"><expr pos:start="91:18" pos:end="91:26"><operator pos:start="91:18" pos:end="91:18">&amp;</operator><name pos:start="91:19" pos:end="91:26"><name pos:start="91:19" pos:end="91:19">p</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:26">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><call pos:start="97:5" pos:end="97:28"><name pos:start="97:5" pos:end="97:12">av_freep</name><argument_list pos:start="97:13" pos:end="97:28">(<argument pos:start="97:14" pos:end="97:27"><expr pos:start="97:14" pos:end="97:27"><operator pos:start="97:14" pos:end="97:14">&amp;</operator><name pos:start="97:15" pos:end="97:27"><name pos:start="97:15" pos:end="97:18">fctx</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:27">threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:47"><expr pos:start="99:5" pos:end="99:46"><call pos:start="99:5" pos:end="99:46"><name pos:start="99:5" pos:end="99:25">pthread_mutex_destroy</name><argument_list pos:start="99:26" pos:end="99:46">(<argument pos:start="99:27" pos:end="99:45"><expr pos:start="99:27" pos:end="99:45"><operator pos:start="99:27" pos:end="99:27">&amp;</operator><name pos:start="99:28" pos:end="99:45"><name pos:start="99:28" pos:end="99:31">fctx</name><operator pos:start="99:32" pos:end="99:33">-&gt;</operator><name pos:start="99:34" pos:end="99:45">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:36"><expr pos:start="101:5" pos:end="101:35"><call pos:start="101:5" pos:end="101:35"><name pos:start="101:5" pos:end="101:12">av_freep</name><argument_list pos:start="101:13" pos:end="101:35">(<argument pos:start="101:14" pos:end="101:34"><expr pos:start="101:14" pos:end="101:34"><operator pos:start="101:14" pos:end="101:14">&amp;</operator><name pos:start="101:15" pos:end="101:34"><name pos:start="101:15" pos:end="101:19">avctx</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:34">thread_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:51"><expr pos:start="103:5" pos:end="103:50"><name pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:9">avctx</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:23">has_b_frames</name></name> <operator pos:start="103:25" pos:end="103:26">-=</operator> <name pos:start="103:28" pos:end="103:46"><name pos:start="103:28" pos:end="103:32">avctx</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:46">thread_count</name></name> <operator pos:start="103:48" pos:end="103:48">-</operator> <literal type="number" pos:start="103:50" pos:end="103:50">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
