<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5436.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">nbd_establish_connection</name><parameter_list pos:start="1:36" pos:end="1:57">(<parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:54"><name pos:start="1:37" pos:end="1:52">BlockDriverState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVNBDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:9">off_t</name></type> <name pos:start="11:11" pos:end="11:14">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:20">blocksize</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:20">host_spec</name><index pos:start="17:21" pos:end="17:23">[<expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr>]</index></name> <operator pos:start="17:25" pos:end="17:26">==</operator> <literal type="char" pos:start="17:28" pos:end="17:30">'/'</literal></expr>)</condition> <block pos:start="17:33" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:50">

        <expr_stmt pos:start="19:9" pos:end="19:50"><expr pos:start="19:9" pos:end="19:49"><name pos:start="19:9" pos:end="19:12">sock</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:49"><name pos:start="19:16" pos:end="19:35">unix_socket_outgoing</name><argument_list pos:start="19:36" pos:end="19:49">(<argument pos:start="19:37" pos:end="19:48"><expr pos:start="19:37" pos:end="19:48"><name pos:start="19:37" pos:end="19:48"><name pos:start="19:37" pos:end="19:37">s</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:48">host_spec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="25:5">else <block pos:start="21:12" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:54">

        <expr_stmt pos:start="23:9" pos:end="23:54"><expr pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:12">sock</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:53"><name pos:start="23:16" pos:end="23:39">tcp_socket_outgoing_spec</name><argument_list pos:start="23:40" pos:end="23:53">(<argument pos:start="23:41" pos:end="23:52"><expr pos:start="23:41" pos:end="23:52"><name pos:start="23:41" pos:end="23:52"><name pos:start="23:41" pos:end="23:41">s</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:52">host_spec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:40">/* Failed to establish connection */</comment>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:17">(<expr pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:12">sock</name> <operator pos:start="31:14" pos:end="31:14">&lt;</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>)</condition> <block pos:start="31:19" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:22">

        <expr_stmt pos:start="33:9" pos:end="33:65"><expr pos:start="33:9" pos:end="33:64"><call pos:start="33:9" pos:end="33:64"><name pos:start="33:9" pos:end="33:14">logout</name><argument_list pos:start="33:15" pos:end="33:64">(<argument pos:start="33:16" pos:end="33:63"><expr pos:start="33:16" pos:end="33:63"><literal type="string" pos:start="33:16" pos:end="33:63">"Failed to establish connection to NBD server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:22">return <expr pos:start="35:16" pos:end="35:21"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:23">/* NBD handshake */</comment>

    <expr_stmt pos:start="43:5" pos:end="45:44"><expr pos:start="43:5" pos:end="45:43"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="45:43"><name pos:start="43:11" pos:end="43:31">nbd_receive_negotiate</name><argument_list pos:start="43:32" pos:end="45:43">(<argument pos:start="43:33" pos:end="43:36"><expr pos:start="43:33" pos:end="43:36"><name pos:start="43:33" pos:end="43:36">sock</name></expr></argument>, <argument pos:start="43:39" pos:end="43:52"><expr pos:start="43:39" pos:end="43:52"><name pos:start="43:39" pos:end="43:52"><name pos:start="43:39" pos:end="43:39">s</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:52">export_name</name></name></expr></argument>, <argument pos:start="43:55" pos:end="43:66"><expr pos:start="43:55" pos:end="43:66"><operator pos:start="43:55" pos:end="43:55">&amp;</operator><name pos:start="43:56" pos:end="43:66"><name pos:start="43:56" pos:end="43:56">s</name><operator pos:start="43:57" pos:end="43:58">-&gt;</operator><name pos:start="43:59" pos:end="43:66">nbdflags</name></name></expr></argument>, <argument pos:start="43:69" pos:end="43:73"><expr pos:start="43:69" pos:end="43:73"><operator pos:start="43:69" pos:end="43:69">&amp;</operator><name pos:start="43:70" pos:end="43:73">size</name></expr></argument>,

                                <argument pos:start="45:33" pos:end="45:42"><expr pos:start="45:33" pos:end="45:42"><operator pos:start="45:33" pos:end="45:33">&amp;</operator><name pos:start="45:34" pos:end="45:42">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition> <block pos:start="47:18" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:19">

        <expr_stmt pos:start="49:9" pos:end="49:60"><expr pos:start="49:9" pos:end="49:59"><call pos:start="49:9" pos:end="49:59"><name pos:start="49:9" pos:end="49:14">logout</name><argument_list pos:start="49:15" pos:end="49:59">(<argument pos:start="49:16" pos:end="49:58"><expr pos:start="49:16" pos:end="49:58"><literal type="string" pos:start="49:16" pos:end="49:58">"Failed to negotiate with the NBD server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:26"><expr pos:start="51:9" pos:end="51:25"><call pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:19">closesocket</name><argument_list pos:start="51:20" pos:end="51:25">(<argument pos:start="51:21" pos:end="51:24"><expr pos:start="51:21" pos:end="51:24"><name pos:start="51:21" pos:end="51:24">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:19">return <expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="61:36">/* Now that we're connected, set the socket to be non-blocking and

     * kick the reply mechanism.  */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:30"><expr pos:start="63:5" pos:end="63:29"><call pos:start="63:5" pos:end="63:29"><name pos:start="63:5" pos:end="63:23">socket_set_nonblock</name><argument_list pos:start="63:24" pos:end="63:29">(<argument pos:start="63:25" pos:end="63:28"><expr pos:start="63:25" pos:end="63:28"><name pos:start="63:25" pos:end="63:28">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:49"><expr pos:start="65:5" pos:end="67:48"><call pos:start="65:5" pos:end="67:48"><name pos:start="65:5" pos:end="65:27">qemu_aio_set_fd_handler</name><argument_list pos:start="65:28" pos:end="67:48">(<argument pos:start="65:29" pos:end="65:35"><expr pos:start="65:29" pos:end="65:35"><name pos:start="65:29" pos:end="65:35"><name pos:start="65:29" pos:end="65:29">s</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:35">sock</name></name></expr></argument>, <argument pos:start="65:38" pos:end="65:52"><expr pos:start="65:38" pos:end="65:52"><name pos:start="65:38" pos:end="65:52">nbd_reply_ready</name></expr></argument>, <argument pos:start="65:55" pos:end="65:58"><expr pos:start="65:55" pos:end="65:58"><name pos:start="65:55" pos:end="65:58">NULL</name></expr></argument>,

                            <argument pos:start="67:29" pos:end="67:44"><expr pos:start="67:29" pos:end="67:44"><name pos:start="67:29" pos:end="67:44">nbd_have_request</name></expr></argument>, <argument pos:start="67:47" pos:end="67:47"><expr pos:start="67:47" pos:end="67:47"><name pos:start="67:47" pos:end="67:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:19"><expr pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:11"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:11">sock</name></name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:18">sock</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:11"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:11">size</name></name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:18">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:16">blocksize</name></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <name pos:start="75:20" pos:end="75:28">blocksize</name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><call pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:10">logout</name><argument_list pos:start="79:11" pos:end="79:54">(<argument pos:start="79:12" pos:end="79:53"><expr pos:start="79:12" pos:end="79:53"><literal type="string" pos:start="79:12" pos:end="79:53">"Established connection with NBD server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
