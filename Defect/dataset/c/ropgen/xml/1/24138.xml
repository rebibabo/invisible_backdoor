<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24138.c" pos:tabs="8"><function pos:start="1:1" pos:end="603:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="13:37">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:47"><decl pos:start="7:22" pos:end="7:47"><type pos:start="7:22" pos:end="7:47"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:47">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:48"><decl pos:start="9:22" pos:end="9:48"><type pos:start="9:22" pos:end="9:48"><specifier pos:start="9:22" pos:end="9:26">const</specifier> <name pos:start="9:28" pos:end="9:31">char</name> <modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:48">initrd_filename</name></decl></parameter>,

                     <parameter pos:start="11:22" pos:end="11:42"><decl pos:start="11:22" pos:end="11:42"><type pos:start="11:22" pos:end="11:42"><specifier pos:start="11:22" pos:end="11:26">const</specifier> <name pos:start="11:28" pos:end="11:31">char</name> <modifier pos:start="11:33" pos:end="11:33">*</modifier></type><name pos:start="11:34" pos:end="11:42">cpu_model</name></decl></parameter>,

                     <parameter pos:start="13:22" pos:end="13:36"><decl pos:start="13:22" pos:end="13:36"><type pos:start="13:22" pos:end="13:36"><name pos:start="13:22" pos:end="13:24">int</name></type> <name pos:start="13:26" pos:end="13:36">pci_enabled</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="603:1">{<block_content pos:start="17:5" pos:end="601:5">

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>, <decl pos:start="19:14" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:23">linux_boot</name></decl>, <decl pos:start="19:26" pos:end="19:26"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:26" pos:end="19:26">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:56"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:23">ram_addr</name></decl>, <decl pos:start="21:26" pos:end="21:36"><type ref="prev" pos:start="21:5" pos:end="21:14"/><name pos:start="21:26" pos:end="21:36">bios_offset</name></decl>, <decl pos:start="21:39" pos:end="21:55"><type ref="prev" pos:start="21:5" pos:end="21:14"/><name pos:start="21:39" pos:end="21:55">option_rom_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:56"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:32">below_4g_mem_size</name></decl>, <decl pos:start="23:35" pos:end="23:55"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:35" pos:end="23:51">above_4g_mem_size</name> <init pos:start="23:53" pos:end="23:55">= <expr pos:start="23:55" pos:end="23:55"><literal type="number" pos:start="23:55" pos:end="23:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">bios_size</name></decl>, <decl pos:start="25:20" pos:end="25:32"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:20" pos:end="25:32">isa_bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">PCIBus</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:13">ISADevice</name> <modifier pos:start="29:15" pos:end="29:15">*</modifier></type><name pos:start="29:16" pos:end="29:22">isa_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:19">piix3_devfn</name> <init pos:start="31:21" pos:end="31:24">= <expr pos:start="31:23" pos:end="31:24"><operator pos:start="31:23" pos:end="31:23">-</operator><literal type="number" pos:start="31:24" pos:end="31:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:18"><decl pos:start="33:5" pos:end="33:17"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">CPUState</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">qemu_irq</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:22"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:12">qemu_irq</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:21">isa_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">qemu_irq</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:31"><decl pos:start="41:5" pos:end="41:30"><type pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:15">IsaIrqState</name> <modifier pos:start="41:17" pos:end="41:17">*</modifier></type><name pos:start="41:18" pos:end="41:30">isa_irq_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:46"><decl pos:start="43:5" pos:end="43:45"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:17">hd</name><index pos:start="43:18" pos:end="43:45">[<expr pos:start="43:19" pos:end="43:44"><name pos:start="43:19" pos:end="43:29">MAX_IDE_BUS</name> <operator pos:start="43:31" pos:end="43:31">*</operator> <name pos:start="43:33" pos:end="43:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:26"><decl pos:start="45:5" pos:end="45:25"><type pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:13">DriveInfo</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:17">fd</name><index pos:start="45:18" pos:end="45:25">[<expr pos:start="45:19" pos:end="45:24"><name pos:start="45:19" pos:end="45:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:76"><decl pos:start="47:5" pos:end="47:75"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:17">using_vga</name> <init pos:start="47:19" pos:end="47:75">= <expr pos:start="47:21" pos:end="47:75"><name pos:start="47:21" pos:end="47:38">cirrus_vga_enabled</name> <operator pos:start="47:40" pos:end="47:41">||</operator> <name pos:start="47:43" pos:end="47:57">std_vga_enabled</name> <operator pos:start="47:59" pos:end="47:60">||</operator> <name pos:start="47:62" pos:end="47:75">vmsvga_enabled</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:17"><decl pos:start="49:5" pos:end="49:16"><type pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:8">void</name> <modifier pos:start="49:10" pos:end="49:10">*</modifier></type><name pos:start="49:11" pos:end="49:16">fw_cfg</name></decl>;</decl_stmt>



    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:32">(<expr pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:16">ram_size</name> <operator pos:start="53:18" pos:end="53:19">&gt;=</operator> <literal type="number" pos:start="53:21" pos:end="53:30">0xe0000000</literal></expr> )</condition> <block pos:start="53:34" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:39">

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:25">above_4g_mem_size</name> <operator pos:start="55:27" pos:end="55:27">=</operator> <name pos:start="55:29" pos:end="55:36">ram_size</name> <operator pos:start="55:38" pos:end="55:38">-</operator> <literal type="number" pos:start="55:40" pos:end="55:49">0xe0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:25">below_4g_mem_size</name> <operator pos:start="57:27" pos:end="57:27">=</operator> <literal type="number" pos:start="57:29" pos:end="57:38">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="63:5">else <block pos:start="59:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:37">

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:25">below_4g_mem_size</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <name pos:start="61:29" pos:end="61:36">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:14">linux_boot</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:33">kernel_filename</name> <operator pos:start="67:35" pos:end="67:36">!=</operator> <name pos:start="67:38" pos:end="67:41">NULL</name><operator pos:start="67:42" pos:end="67:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:19">/* init CPUs */</comment>

    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:26">(<expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:17">cpu_model</name> <operator pos:start="73:19" pos:end="73:20">==</operator> <name pos:start="73:22" pos:end="73:25">NULL</name></expr>)</condition> <block pos:start="73:28" pos:end="85:5">{<block_content pos:start="77:9" pos:end="84:0">

<cpp:ifdef pos:start="75:1" pos:end="75:20">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:20">TARGET_X86_64</name></cpp:ifdef>

        <expr_stmt pos:start="77:9" pos:end="80:0"><expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:17">cpu_model</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="string" pos:start="77:21" pos:end="77:28">"qemu64"</literal></expr>;</expr_stmt>

<cpp:else pos:start="79:1" pos:end="79:5">#<cpp:directive pos:start="79:2" pos:end="79:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="81:9" pos:end="84:0"><expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:17">cpu_model</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <literal type="string" pos:start="81:21" pos:end="81:28">"qemu32"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <for pos:start="89:5" pos:end="93:5">for <control pos:start="89:9" pos:end="89:34">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:28">smp_cpus</name></expr>;</condition> <incr pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:31">i</name><operator pos:start="89:32" pos:end="89:33">++</operator></expr></incr>)</control> <block pos:start="89:36" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:36">

        <expr_stmt pos:start="91:9" pos:end="91:36"><expr pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:11">env</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:35"><name pos:start="91:15" pos:end="91:24">pc_new_cpu</name><argument_list pos:start="91:25" pos:end="91:35">(<argument pos:start="91:26" pos:end="91:34"><expr pos:start="91:26" pos:end="91:34"><name pos:start="91:26" pos:end="91:34">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="97:5" pos:end="97:18"><expr pos:start="97:5" pos:end="97:17"><call pos:start="97:5" pos:end="97:17"><name pos:start="97:5" pos:end="97:15">vmport_init</name><argument_list pos:start="97:16" pos:end="97:17">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:39"><expr pos:start="103:5" pos:end="103:38"><name pos:start="103:5" pos:end="103:12">ram_addr</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:38"><name pos:start="103:16" pos:end="103:29">qemu_ram_alloc</name><argument_list pos:start="103:30" pos:end="103:38">(<argument pos:start="103:31" pos:end="103:37"><expr pos:start="103:31" pos:end="103:37"><literal type="number" pos:start="103:31" pos:end="103:37">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:55"><expr pos:start="105:5" pos:end="105:54"><call pos:start="105:5" pos:end="105:54"><name pos:start="105:5" pos:end="105:32">cpu_register_physical_memory</name><argument_list pos:start="105:33" pos:end="105:54">(<argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><literal type="number" pos:start="105:34" pos:end="105:34">0</literal></expr></argument>, <argument pos:start="105:37" pos:end="105:43"><expr pos:start="105:37" pos:end="105:43"><literal type="number" pos:start="105:37" pos:end="105:43">0xa0000</literal></expr></argument>, <argument pos:start="105:46" pos:end="105:53"><expr pos:start="105:46" pos:end="105:53"><name pos:start="105:46" pos:end="105:53">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="115:7">/* Allocate, even though we won't register, so we don't break the

     * phys_ram_base + PA assumption. This range includes vga (0xa0000 - 0xc0000),

     * and some bios areas, which will be registered later

     */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:50"><expr pos:start="117:5" pos:end="117:49"><name pos:start="117:5" pos:end="117:12">ram_addr</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <call pos:start="117:16" pos:end="117:49"><name pos:start="117:16" pos:end="117:29">qemu_ram_alloc</name><argument_list pos:start="117:30" pos:end="117:49">(<argument pos:start="117:31" pos:end="117:48"><expr pos:start="117:31" pos:end="117:48"><literal type="number" pos:start="117:31" pos:end="117:40">0x100000</literal> <operator pos:start="117:40" pos:end="117:40">-</operator> <literal type="number" pos:start="117:42" pos:end="117:48">0xa0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:60"><expr pos:start="119:5" pos:end="119:59"><name pos:start="119:5" pos:end="119:12">ram_addr</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:59"><name pos:start="119:16" pos:end="119:29">qemu_ram_alloc</name><argument_list pos:start="119:30" pos:end="119:59">(<argument pos:start="119:31" pos:end="119:58"><expr pos:start="119:31" pos:end="119:58"><name pos:start="119:31" pos:end="119:47">below_4g_mem_size</name> <operator pos:start="119:49" pos:end="119:49">-</operator> <literal type="number" pos:start="119:51" pos:end="119:58">0x100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="125:27"><expr pos:start="121:5" pos:end="125:26"><call pos:start="121:5" pos:end="125:26"><name pos:start="121:5" pos:end="121:32">cpu_register_physical_memory</name><argument_list pos:start="121:33" pos:end="125:26">(<argument pos:start="121:34" pos:end="121:41"><expr pos:start="121:34" pos:end="121:41"><literal type="number" pos:start="121:34" pos:end="121:41">0x100000</literal></expr></argument>,

                 <argument pos:start="123:18" pos:end="123:45"><expr pos:start="123:18" pos:end="123:45"><name pos:start="123:18" pos:end="123:34">below_4g_mem_size</name> <operator pos:start="123:36" pos:end="123:36">-</operator> <literal type="number" pos:start="123:38" pos:end="123:45">0x100000</literal></expr></argument>,

                 <argument pos:start="125:18" pos:end="125:25"><expr pos:start="125:18" pos:end="125:25"><name pos:start="125:18" pos:end="125:25">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:39">/* above 4giga memory allocation */</comment>

    <if_stmt pos:start="131:5" pos:end="149:5"><if pos:start="131:5" pos:end="149:5">if <condition pos:start="131:8" pos:end="131:30">(<expr pos:start="131:9" pos:end="131:29"><name pos:start="131:9" pos:end="131:25">above_4g_mem_size</name> <operator pos:start="131:27" pos:end="131:27">&gt;</operator> <literal type="number" pos:start="131:29" pos:end="131:29">0</literal></expr>)</condition> <block pos:start="131:32" pos:end="149:5">{<block_content pos:start="135:9" pos:end="148:0">

<cpp:if pos:start="133:1" pos:end="133:31">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:31"><name pos:start="133:5" pos:end="133:25">TARGET_PHYS_ADDR_BITS</name> <operator pos:start="133:27" pos:end="133:28">==</operator> <literal type="number" pos:start="133:30" pos:end="133:31">32</literal></expr></cpp:if>

        <expr_stmt pos:start="135:9" pos:end="138:0"><expr pos:start="135:9" pos:end="135:59"><call pos:start="135:9" pos:end="135:59"><name pos:start="135:9" pos:end="135:16">hw_error</name><argument_list pos:start="135:17" pos:end="135:59">(<argument pos:start="135:18" pos:end="135:58"><expr pos:start="135:18" pos:end="135:58"><literal type="string" pos:start="135:18" pos:end="135:58">"To much RAM for 32-bit physical address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="139:9" pos:end="139:53"><expr pos:start="139:9" pos:end="139:52"><name pos:start="139:9" pos:end="139:16">ram_addr</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:52"><name pos:start="139:20" pos:end="139:33">qemu_ram_alloc</name><argument_list pos:start="139:34" pos:end="139:52">(<argument pos:start="139:35" pos:end="139:51"><expr pos:start="139:35" pos:end="139:51"><name pos:start="139:35" pos:end="139:51">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="148:0"><expr pos:start="141:9" pos:end="145:46"><call pos:start="141:9" pos:end="145:46"><name pos:start="141:9" pos:end="141:36">cpu_register_physical_memory</name><argument_list pos:start="141:37" pos:end="145:46">(<argument pos:start="141:38" pos:end="141:51"><expr pos:start="141:38" pos:end="141:51"><literal type="number" pos:start="141:38" pos:end="141:51">0x100000000ULL</literal></expr></argument>,

                                     <argument pos:start="143:38" pos:end="143:54"><expr pos:start="143:38" pos:end="143:54"><name pos:start="143:38" pos:end="143:54">above_4g_mem_size</name></expr></argument>,

                                     <argument pos:start="145:38" pos:end="145:45"><expr pos:start="145:38" pos:end="145:45"><name pos:start="145:38" pos:end="145:45">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="155:5" pos:end="155:19">/* BIOS load */</comment>

    <if_stmt pos:start="157:5" pos:end="159:34"><if pos:start="157:5" pos:end="159:34">if <condition pos:start="157:8" pos:end="157:26">(<expr pos:start="157:9" pos:end="157:25"><name pos:start="157:9" pos:end="157:17">bios_name</name> <operator pos:start="157:19" pos:end="157:20">==</operator> <name pos:start="157:22" pos:end="157:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:34"><block_content pos:start="159:9" pos:end="159:34">

        <expr_stmt pos:start="159:9" pos:end="159:34"><expr pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:17">bios_name</name> <operator pos:start="159:19" pos:end="159:19">=</operator> <name pos:start="159:21" pos:end="159:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:62"><expr pos:start="161:5" pos:end="161:61"><name pos:start="161:5" pos:end="161:12">filename</name> <operator pos:start="161:14" pos:end="161:14">=</operator> <call pos:start="161:16" pos:end="161:61"><name pos:start="161:16" pos:end="161:29">qemu_find_file</name><argument_list pos:start="161:30" pos:end="161:61">(<argument pos:start="161:31" pos:end="161:49"><expr pos:start="161:31" pos:end="161:49"><name pos:start="161:31" pos:end="161:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="161:52" pos:end="161:60"><expr pos:start="161:52" pos:end="161:60"><name pos:start="161:52" pos:end="161:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="171:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:17">(<expr pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:16">filename</name></expr>)</condition> <block pos:start="163:19" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:45">

        <expr_stmt pos:start="165:9" pos:end="165:45"><expr pos:start="165:9" pos:end="165:44"><name pos:start="165:9" pos:end="165:17">bios_size</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <call pos:start="165:21" pos:end="165:44"><name pos:start="165:21" pos:end="165:34">get_image_size</name><argument_list pos:start="165:35" pos:end="165:44">(<argument pos:start="165:36" pos:end="165:43"><expr pos:start="165:36" pos:end="165:43"><name pos:start="165:36" pos:end="165:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="171:5">else <block pos:start="167:12" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:23">

        <expr_stmt pos:start="169:9" pos:end="169:23"><expr pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:17">bios_size</name> <operator pos:start="169:19" pos:end="169:19">=</operator> <operator pos:start="169:21" pos:end="169:21">-</operator><literal type="number" pos:start="169:22" pos:end="169:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="173:5" pos:end="179:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="175:33">(<expr pos:start="173:9" pos:end="175:32"><name pos:start="173:9" pos:end="173:17">bios_size</name> <operator pos:start="173:19" pos:end="173:20">&lt;=</operator> <literal type="number" pos:start="173:22" pos:end="173:22">0</literal> <operator pos:start="173:24" pos:end="173:25">||</operator>

        <operator pos:start="175:9" pos:end="175:9">(</operator><name pos:start="175:10" pos:end="175:18">bios_size</name> <operator pos:start="175:20" pos:end="175:20">%</operator> <literal type="number" pos:start="175:22" pos:end="175:26">65536</literal><operator pos:start="175:27" pos:end="175:27">)</operator> <operator pos:start="175:29" pos:end="175:30">!=</operator> <literal type="number" pos:start="175:32" pos:end="175:32">0</literal></expr>)</condition> <block pos:start="175:35" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:24">

        <goto pos:start="177:9" pos:end="177:24">goto <name pos:start="177:14" pos:end="177:23">bios_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:44"><expr pos:start="181:5" pos:end="181:43"><name pos:start="181:5" pos:end="181:15">bios_offset</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="181:43"><name pos:start="181:19" pos:end="181:32">qemu_ram_alloc</name><argument_list pos:start="181:33" pos:end="181:43">(<argument pos:start="181:34" pos:end="181:42"><expr pos:start="181:34" pos:end="181:42"><name pos:start="181:34" pos:end="181:42">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:62"><expr pos:start="183:5" pos:end="183:61"><name pos:start="183:5" pos:end="183:7">ret</name> <operator pos:start="183:9" pos:end="183:9">=</operator> <call pos:start="183:11" pos:end="183:61"><name pos:start="183:11" pos:end="183:20">load_image</name><argument_list pos:start="183:21" pos:end="183:61">(<argument pos:start="183:22" pos:end="183:29"><expr pos:start="183:22" pos:end="183:29"><name pos:start="183:22" pos:end="183:29">filename</name></expr></argument>, <argument pos:start="183:32" pos:end="183:60"><expr pos:start="183:32" pos:end="183:60"><call pos:start="183:32" pos:end="183:60"><name pos:start="183:32" pos:end="183:47">qemu_get_ram_ptr</name><argument_list pos:start="183:48" pos:end="183:60">(<argument pos:start="183:49" pos:end="183:59"><expr pos:start="183:49" pos:end="183:59"><name pos:start="183:49" pos:end="183:59">bios_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="193:5"><if pos:start="185:5" pos:end="193:5">if <condition pos:start="185:8" pos:end="185:25">(<expr pos:start="185:9" pos:end="185:24"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:14">!=</operator> <name pos:start="185:16" pos:end="185:24">bios_size</name></expr>)</condition> <block pos:start="185:27" pos:end="193:5">{<block_content pos:start="187:5" pos:end="191:16">

    <label pos:start="187:5" pos:end="187:15"><name pos:start="187:5" pos:end="187:14">bios_error</name>:</label>

        <expr_stmt pos:start="189:9" pos:end="189:74"><expr pos:start="189:9" pos:end="189:73"><call pos:start="189:9" pos:end="189:73"><name pos:start="189:9" pos:end="189:15">fprintf</name><argument_list pos:start="189:16" pos:end="189:73">(<argument pos:start="189:17" pos:end="189:22"><expr pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:22">stderr</name></expr></argument>, <argument pos:start="189:25" pos:end="189:61"><expr pos:start="189:25" pos:end="189:61"><literal type="string" pos:start="189:25" pos:end="189:61">"qemu: could not load PC BIOS '%s'\n"</literal></expr></argument>, <argument pos:start="189:64" pos:end="189:72"><expr pos:start="189:64" pos:end="189:72"><name pos:start="189:64" pos:end="189:72">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:16"><expr pos:start="191:9" pos:end="191:15"><call pos:start="191:9" pos:end="191:15"><name pos:start="191:9" pos:end="191:12">exit</name><argument_list pos:start="191:13" pos:end="191:15">(<argument pos:start="191:14" pos:end="191:14"><expr pos:start="191:14" pos:end="191:14"><literal type="number" pos:start="191:14" pos:end="191:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="195:5" pos:end="199:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:17">(<expr pos:start="195:9" pos:end="195:16"><name pos:start="195:9" pos:end="195:16">filename</name></expr>)</condition> <block pos:start="195:19" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:28">

        <expr_stmt pos:start="197:9" pos:end="197:28"><expr pos:start="197:9" pos:end="197:27"><call pos:start="197:9" pos:end="197:27"><name pos:start="197:9" pos:end="197:17">qemu_free</name><argument_list pos:start="197:18" pos:end="197:27">(<argument pos:start="197:19" pos:end="197:26"><expr pos:start="197:19" pos:end="197:26"><name pos:start="197:19" pos:end="197:26">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="201:5" pos:end="201:53">/* map the last 128KB of the BIOS in ISA space */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:30"><expr pos:start="203:5" pos:end="203:29"><name pos:start="203:5" pos:end="203:17">isa_bios_size</name> <operator pos:start="203:19" pos:end="203:19">=</operator> <name pos:start="203:21" pos:end="203:29">bios_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="205:5" pos:end="207:35"><if pos:start="205:5" pos:end="207:35">if <condition pos:start="205:8" pos:end="205:37">(<expr pos:start="205:9" pos:end="205:36"><name pos:start="205:9" pos:end="205:21">isa_bios_size</name> <operator pos:start="205:23" pos:end="205:23">&gt;</operator> <operator pos:start="205:25" pos:end="205:25">(</operator><literal type="number" pos:start="205:26" pos:end="205:28">128</literal> <operator pos:start="205:30" pos:end="205:30">*</operator> <literal type="number" pos:start="205:32" pos:end="205:35">1024</literal><operator pos:start="205:36" pos:end="205:36">)</operator></expr>)</condition><block type="pseudo" pos:start="207:9" pos:end="207:35"><block_content pos:start="207:9" pos:end="207:35">

        <expr_stmt pos:start="207:9" pos:end="207:35"><expr pos:start="207:9" pos:end="207:34"><name pos:start="207:9" pos:end="207:21">isa_bios_size</name> <operator pos:start="207:23" pos:end="207:23">=</operator> <literal type="number" pos:start="207:25" pos:end="207:27">128</literal> <operator pos:start="207:29" pos:end="207:29">*</operator> <literal type="number" pos:start="207:31" pos:end="207:34">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="209:5" pos:end="213:89"><expr pos:start="209:5" pos:end="213:88"><call pos:start="209:5" pos:end="213:88"><name pos:start="209:5" pos:end="209:32">cpu_register_physical_memory</name><argument_list pos:start="209:33" pos:end="213:88">(<argument pos:start="209:34" pos:end="209:57"><expr pos:start="209:34" pos:end="209:57"><literal type="number" pos:start="209:34" pos:end="209:43">0x100000</literal> <operator pos:start="209:43" pos:end="209:43">-</operator> <name pos:start="209:45" pos:end="209:57">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="211:34" pos:end="211:46"><expr pos:start="211:34" pos:end="211:46"><name pos:start="211:34" pos:end="211:46">isa_bios_size</name></expr></argument>,

                                 <argument pos:start="213:34" pos:end="213:87"><expr pos:start="213:34" pos:end="213:87"><operator pos:start="213:34" pos:end="213:34">(</operator><name pos:start="213:35" pos:end="213:45">bios_offset</name> <operator pos:start="213:47" pos:end="213:47">+</operator> <name pos:start="213:49" pos:end="213:57">bios_size</name> <operator pos:start="213:59" pos:end="213:59">-</operator> <name pos:start="213:61" pos:end="213:73">isa_bios_size</name><operator pos:start="213:74" pos:end="213:74">)</operator> <operator pos:start="213:76" pos:end="213:76">|</operator> <name pos:start="213:78" pos:end="213:87">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







    <expr_stmt pos:start="221:5" pos:end="221:52"><expr pos:start="221:5" pos:end="221:51"><name pos:start="221:5" pos:end="221:21">option_rom_offset</name> <operator pos:start="221:23" pos:end="221:23">=</operator> <call pos:start="221:25" pos:end="221:51"><name pos:start="221:25" pos:end="221:38">qemu_ram_alloc</name><argument_list pos:start="221:39" pos:end="221:51">(<argument pos:start="221:40" pos:end="221:50"><expr pos:start="221:40" pos:end="221:50"><name pos:start="221:40" pos:end="221:50">PC_ROM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:81"><expr pos:start="223:5" pos:end="223:80"><call pos:start="223:5" pos:end="223:80"><name pos:start="223:5" pos:end="223:32">cpu_register_physical_memory</name><argument_list pos:start="223:33" pos:end="223:80">(<argument pos:start="223:34" pos:end="223:47"><expr pos:start="223:34" pos:end="223:47"><name pos:start="223:34" pos:end="223:47">PC_ROM_MIN_VGA</name></expr></argument>, <argument pos:start="223:50" pos:end="223:60"><expr pos:start="223:50" pos:end="223:60"><name pos:start="223:50" pos:end="223:60">PC_ROM_SIZE</name></expr></argument>, <argument pos:start="223:63" pos:end="223:79"><expr pos:start="223:63" pos:end="223:79"><name pos:start="223:63" pos:end="223:79">option_rom_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="227:5" pos:end="241:5"><if pos:start="227:5" pos:end="241:5">if <condition pos:start="227:8" pos:end="227:18">(<expr pos:start="227:9" pos:end="227:17"><name pos:start="227:9" pos:end="227:17">using_vga</name></expr>)</condition> <block pos:start="227:20" pos:end="241:5">{<block_content pos:start="231:9" pos:end="239:9">

        <comment type="block" pos:start="229:9" pos:end="229:27">/* VGA BIOS load */</comment>

        <if_stmt pos:start="231:9" pos:end="239:9"><if pos:start="231:9" pos:end="235:9">if <condition pos:start="231:12" pos:end="231:31">(<expr pos:start="231:13" pos:end="231:30"><name pos:start="231:13" pos:end="231:30">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="231:33" pos:end="235:9">{<block_content pos:start="233:13" pos:end="233:49">

            <expr_stmt pos:start="233:13" pos:end="233:49"><expr pos:start="233:13" pos:end="233:48"><call pos:start="233:13" pos:end="233:48"><name pos:start="233:13" pos:end="233:23">rom_add_vga</name><argument_list pos:start="233:24" pos:end="233:48">(<argument pos:start="233:25" pos:end="233:47"><expr pos:start="233:25" pos:end="233:47"><name pos:start="233:25" pos:end="233:47">VGABIOS_CIRRUS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="235:11" pos:end="239:9">else <block pos:start="235:16" pos:end="239:9">{<block_content pos:start="237:13" pos:end="237:42">

            <expr_stmt pos:start="237:13" pos:end="237:42"><expr pos:start="237:13" pos:end="237:41"><call pos:start="237:13" pos:end="237:41"><name pos:start="237:13" pos:end="237:23">rom_add_vga</name><argument_list pos:start="237:24" pos:end="237:41">(<argument pos:start="237:25" pos:end="237:40"><expr pos:start="237:25" pos:end="237:40"><name pos:start="237:25" pos:end="237:40">VGABIOS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="245:5" pos:end="245:47">/* map all the bios at the top of memory */</comment>

    <expr_stmt pos:start="247:5" pos:end="249:70"><expr pos:start="247:5" pos:end="249:69"><call pos:start="247:5" pos:end="249:69"><name pos:start="247:5" pos:end="247:32">cpu_register_physical_memory</name><argument_list pos:start="247:33" pos:end="249:69">(<argument pos:start="247:34" pos:end="247:55"><expr pos:start="247:34" pos:end="247:55"><operator pos:start="247:34" pos:end="247:34">(</operator><name pos:start="247:35" pos:end="247:42">uint32_t</name><operator pos:start="247:43" pos:end="247:43">)</operator><operator pos:start="247:44" pos:end="247:44">(</operator><operator pos:start="247:45" pos:end="247:45">-</operator><name pos:start="247:46" pos:end="247:54">bios_size</name><operator pos:start="247:55" pos:end="247:55">)</operator></expr></argument>,

                                 <argument pos:start="249:34" pos:end="249:42"><expr pos:start="249:34" pos:end="249:42"><name pos:start="249:34" pos:end="249:42">bios_size</name></expr></argument>, <argument pos:start="249:45" pos:end="249:68"><expr pos:start="249:45" pos:end="249:68"><name pos:start="249:45" pos:end="249:55">bios_offset</name> <operator pos:start="249:57" pos:end="249:57">|</operator> <name pos:start="249:59" pos:end="249:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:31"><expr pos:start="253:5" pos:end="253:30"><name pos:start="253:5" pos:end="253:10">fw_cfg</name> <operator pos:start="253:12" pos:end="253:12">=</operator> <call pos:start="253:14" pos:end="253:30"><name pos:start="253:14" pos:end="253:28">bochs_bios_init</name><argument_list pos:start="253:29" pos:end="253:30">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="257:5" pos:end="261:5"><if pos:start="257:5" pos:end="261:5">if <condition pos:start="257:8" pos:end="257:19">(<expr pos:start="257:9" pos:end="257:18"><name pos:start="257:9" pos:end="257:18">linux_boot</name></expr>)</condition> <block pos:start="257:21" pos:end="261:5">{<block_content pos:start="259:9" pos:end="259:96">

        <expr_stmt pos:start="259:9" pos:end="259:96"><expr pos:start="259:9" pos:end="259:95"><call pos:start="259:9" pos:end="259:95"><name pos:start="259:9" pos:end="259:18">load_linux</name><argument_list pos:start="259:19" pos:end="259:95">(<argument pos:start="259:20" pos:end="259:25"><expr pos:start="259:20" pos:end="259:25"><name pos:start="259:20" pos:end="259:25">fw_cfg</name></expr></argument>, <argument pos:start="259:28" pos:end="259:42"><expr pos:start="259:28" pos:end="259:42"><name pos:start="259:28" pos:end="259:42">kernel_filename</name></expr></argument>, <argument pos:start="259:45" pos:end="259:59"><expr pos:start="259:45" pos:end="259:59"><name pos:start="259:45" pos:end="259:59">initrd_filename</name></expr></argument>, <argument pos:start="259:62" pos:end="259:75"><expr pos:start="259:62" pos:end="259:75"><name pos:start="259:62" pos:end="259:75">kernel_cmdline</name></expr></argument>, <argument pos:start="259:78" pos:end="259:94"><expr pos:start="259:78" pos:end="259:94"><name pos:start="259:78" pos:end="259:94">below_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="265:5" pos:end="269:5">for <control pos:start="265:9" pos:end="265:40">(<init pos:start="265:10" pos:end="265:15"><expr pos:start="265:10" pos:end="265:14"><name pos:start="265:10" pos:end="265:10">i</name> <operator pos:start="265:12" pos:end="265:12">=</operator> <literal type="number" pos:start="265:14" pos:end="265:14">0</literal></expr>;</init> <condition pos:start="265:17" pos:end="265:35"><expr pos:start="265:17" pos:end="265:34"><name pos:start="265:17" pos:end="265:17">i</name> <operator pos:start="265:19" pos:end="265:19">&lt;</operator> <name pos:start="265:21" pos:end="265:34">nb_option_roms</name></expr>;</condition> <incr pos:start="265:37" pos:end="265:39"><expr pos:start="265:37" pos:end="265:39"><name pos:start="265:37" pos:end="265:37">i</name><operator pos:start="265:38" pos:end="265:39">++</operator></expr></incr>)</control> <block pos:start="265:42" pos:end="269:5">{<block_content pos:start="267:9" pos:end="267:38">

        <expr_stmt pos:start="267:9" pos:end="267:38"><expr pos:start="267:9" pos:end="267:37"><call pos:start="267:9" pos:end="267:37"><name pos:start="267:9" pos:end="267:22">rom_add_option</name><argument_list pos:start="267:23" pos:end="267:37">(<argument pos:start="267:24" pos:end="267:36"><expr pos:start="267:24" pos:end="267:36"><name pos:start="267:24" pos:end="267:36"><name pos:start="267:24" pos:end="267:33">option_rom</name><index pos:start="267:34" pos:end="267:36">[<expr pos:start="267:35" pos:end="267:35"><name pos:start="267:35" pos:end="267:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="273:5" pos:end="297:5">for <control pos:start="273:9" pos:end="273:33">(<init pos:start="273:10" pos:end="273:15"><expr pos:start="273:10" pos:end="273:14"><name pos:start="273:10" pos:end="273:10">i</name> <operator pos:start="273:12" pos:end="273:12">=</operator> <literal type="number" pos:start="273:14" pos:end="273:14">0</literal></expr>;</init> <condition pos:start="273:17" pos:end="273:28"><expr pos:start="273:17" pos:end="273:27"><name pos:start="273:17" pos:end="273:17">i</name> <operator pos:start="273:19" pos:end="273:19">&lt;</operator> <name pos:start="273:21" pos:end="273:27">nb_nics</name></expr>;</condition> <incr pos:start="273:30" pos:end="273:32"><expr pos:start="273:30" pos:end="273:32"><name pos:start="273:30" pos:end="273:30">i</name><operator pos:start="273:31" pos:end="273:32">++</operator></expr></incr>)</control> <block pos:start="273:35" pos:end="297:5">{<block_content pos:start="275:9" pos:end="295:34">

        <decl_stmt pos:start="275:9" pos:end="275:29"><decl pos:start="275:9" pos:end="275:28"><type pos:start="275:9" pos:end="275:12"><name pos:start="275:9" pos:end="275:12">char</name></type> <name pos:start="275:14" pos:end="275:28"><name pos:start="275:14" pos:end="275:22">nic_oprom</name><index pos:start="275:23" pos:end="275:28">[<expr pos:start="275:24" pos:end="275:27"><literal type="number" pos:start="275:24" pos:end="275:27">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="277:9" pos:end="277:46"><decl pos:start="277:9" pos:end="277:45"><type pos:start="277:9" pos:end="277:20"><specifier pos:start="277:9" pos:end="277:13">const</specifier> <name pos:start="277:15" pos:end="277:18">char</name> <modifier pos:start="277:20" pos:end="277:20">*</modifier></type><name pos:start="277:21" pos:end="277:25">model</name> <init pos:start="277:27" pos:end="277:45">= <expr pos:start="277:29" pos:end="277:45"><name pos:start="277:29" pos:end="277:39"><name pos:start="277:29" pos:end="277:36">nd_table</name><index pos:start="277:37" pos:end="277:39">[<expr pos:start="277:38" pos:end="277:38"><name pos:start="277:38" pos:end="277:38">i</name></expr>]</index></name><operator pos:start="277:40" pos:end="277:40">.</operator><name pos:start="277:41" pos:end="277:45">model</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="281:9" pos:end="283:21"><if pos:start="281:9" pos:end="283:21">if <condition pos:start="281:12" pos:end="281:34">(<expr pos:start="281:13" pos:end="281:33"><operator pos:start="281:13" pos:end="281:13">!</operator><name pos:start="281:14" pos:end="281:24"><name pos:start="281:14" pos:end="281:21">nd_table</name><index pos:start="281:22" pos:end="281:24">[<expr pos:start="281:23" pos:end="281:23"><name pos:start="281:23" pos:end="281:23">i</name></expr>]</index></name><operator pos:start="281:25" pos:end="281:25">.</operator><name pos:start="281:26" pos:end="281:33">bootable</name></expr>)</condition><block type="pseudo" pos:start="283:13" pos:end="283:21"><block_content pos:start="283:13" pos:end="283:21">

            <continue pos:start="283:13" pos:end="283:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="287:9" pos:end="289:28"><if pos:start="287:9" pos:end="289:28">if <condition pos:start="287:12" pos:end="287:26">(<expr pos:start="287:13" pos:end="287:25"><name pos:start="287:13" pos:end="287:17">model</name> <operator pos:start="287:19" pos:end="287:20">==</operator> <name pos:start="287:22" pos:end="287:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="289:13" pos:end="289:28"><block_content pos:start="289:13" pos:end="289:28">

            <expr_stmt pos:start="289:13" pos:end="289:28"><expr pos:start="289:13" pos:end="289:27"><name pos:start="289:13" pos:end="289:17">model</name> <operator pos:start="289:19" pos:end="289:19">=</operator> <literal type="string" pos:start="289:21" pos:end="289:27">"e1000"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:68"><expr pos:start="291:9" pos:end="291:67"><call pos:start="291:9" pos:end="291:67"><name pos:start="291:9" pos:end="291:16">snprintf</name><argument_list pos:start="291:17" pos:end="291:67">(<argument pos:start="291:18" pos:end="291:26"><expr pos:start="291:18" pos:end="291:26"><name pos:start="291:18" pos:end="291:26">nic_oprom</name></expr></argument>, <argument pos:start="291:29" pos:end="291:45"><expr pos:start="291:29" pos:end="291:45"><sizeof pos:start="291:29" pos:end="291:45">sizeof<argument_list pos:start="291:35" pos:end="291:45">(<argument pos:start="291:36" pos:end="291:44"><expr pos:start="291:36" pos:end="291:44"><name pos:start="291:36" pos:end="291:44">nic_oprom</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="291:48" pos:end="291:59"><expr pos:start="291:48" pos:end="291:59"><literal type="string" pos:start="291:48" pos:end="291:59">"pxe-%s.bin"</literal></expr></argument>, <argument pos:start="291:62" pos:end="291:66"><expr pos:start="291:62" pos:end="291:66"><name pos:start="291:62" pos:end="291:66">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="295:9" pos:end="295:34"><expr pos:start="295:9" pos:end="295:33"><call pos:start="295:9" pos:end="295:33"><name pos:start="295:9" pos:end="295:22">rom_add_option</name><argument_list pos:start="295:23" pos:end="295:33">(<argument pos:start="295:24" pos:end="295:32"><expr pos:start="295:24" pos:end="295:32"><name pos:start="295:24" pos:end="295:32">nic_oprom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="301:5" pos:end="301:59"><expr pos:start="301:5" pos:end="301:58"><name pos:start="301:5" pos:end="301:11">cpu_irq</name> <operator pos:start="301:13" pos:end="301:13">=</operator> <call pos:start="301:15" pos:end="301:58"><name pos:start="301:15" pos:end="301:32">qemu_allocate_irqs</name><argument_list pos:start="301:33" pos:end="301:58">(<argument pos:start="301:34" pos:end="301:48"><expr pos:start="301:34" pos:end="301:48"><name pos:start="301:34" pos:end="301:48">pic_irq_request</name></expr></argument>, <argument pos:start="301:51" pos:end="301:54"><expr pos:start="301:51" pos:end="301:54"><name pos:start="301:51" pos:end="301:54">NULL</name></expr></argument>, <argument pos:start="301:57" pos:end="301:57"><expr pos:start="301:57" pos:end="301:57"><literal type="number" pos:start="301:57" pos:end="301:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:35"><expr pos:start="303:5" pos:end="303:34"><name pos:start="303:5" pos:end="303:9">i8259</name> <operator pos:start="303:11" pos:end="303:11">=</operator> <call pos:start="303:13" pos:end="303:34"><name pos:start="303:13" pos:end="303:22">i8259_init</name><argument_list pos:start="303:23" pos:end="303:34">(<argument pos:start="303:24" pos:end="303:33"><expr pos:start="303:24" pos:end="303:33"><name pos:start="303:24" pos:end="303:33"><name pos:start="303:24" pos:end="303:30">cpu_irq</name><index pos:start="303:31" pos:end="303:33">[<expr pos:start="303:32" pos:end="303:32"><literal type="number" pos:start="303:32" pos:end="303:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="305:57"><expr pos:start="305:5" pos:end="305:56"><name pos:start="305:5" pos:end="305:17">isa_irq_state</name> <operator pos:start="305:19" pos:end="305:19">=</operator> <call pos:start="305:21" pos:end="305:56"><name pos:start="305:21" pos:end="305:32">qemu_mallocz</name><argument_list pos:start="305:33" pos:end="305:56">(<argument pos:start="305:34" pos:end="305:55"><expr pos:start="305:34" pos:end="305:55"><sizeof pos:start="305:34" pos:end="305:55">sizeof<argument_list pos:start="305:40" pos:end="305:55">(<argument pos:start="305:41" pos:end="305:54"><expr pos:start="305:41" pos:end="305:54"><operator pos:start="305:41" pos:end="305:41">*</operator><name pos:start="305:42" pos:end="305:54">isa_irq_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:33"><expr pos:start="307:5" pos:end="307:32"><name pos:start="307:5" pos:end="307:24"><name pos:start="307:5" pos:end="307:17">isa_irq_state</name><operator pos:start="307:18" pos:end="307:19">-&gt;</operator><name pos:start="307:20" pos:end="307:24">i8259</name></name> <operator pos:start="307:26" pos:end="307:26">=</operator> <name pos:start="307:28" pos:end="307:32">i8259</name></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:69"><expr pos:start="309:5" pos:end="309:68"><name pos:start="309:5" pos:end="309:11">isa_irq</name> <operator pos:start="309:13" pos:end="309:13">=</operator> <call pos:start="309:15" pos:end="309:68"><name pos:start="309:15" pos:end="309:32">qemu_allocate_irqs</name><argument_list pos:start="309:33" pos:end="309:68">(<argument pos:start="309:34" pos:end="309:48"><expr pos:start="309:34" pos:end="309:48"><name pos:start="309:34" pos:end="309:48">isa_irq_handler</name></expr></argument>, <argument pos:start="309:51" pos:end="309:63"><expr pos:start="309:51" pos:end="309:63"><name pos:start="309:51" pos:end="309:63">isa_irq_state</name></expr></argument>, <argument pos:start="309:66" pos:end="309:67"><expr pos:start="309:66" pos:end="309:67"><literal type="number" pos:start="309:66" pos:end="309:67">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="313:5" pos:end="323:5"><if pos:start="313:5" pos:end="317:5">if <condition pos:start="313:8" pos:end="313:20">(<expr pos:start="313:9" pos:end="313:19"><name pos:start="313:9" pos:end="313:19">pci_enabled</name></expr>)</condition> <block pos:start="313:22" pos:end="317:5">{<block_content pos:start="315:9" pos:end="315:68">

        <expr_stmt pos:start="315:9" pos:end="315:68"><expr pos:start="315:9" pos:end="315:67"><name pos:start="315:9" pos:end="315:15">pci_bus</name> <operator pos:start="315:17" pos:end="315:17">=</operator> <call pos:start="315:19" pos:end="315:67"><name pos:start="315:19" pos:end="315:29">i440fx_init</name><argument_list pos:start="315:30" pos:end="315:67">(<argument pos:start="315:31" pos:end="315:43"><expr pos:start="315:31" pos:end="315:43"><operator pos:start="315:31" pos:end="315:31">&amp;</operator><name pos:start="315:32" pos:end="315:43">i440fx_state</name></expr></argument>, <argument pos:start="315:46" pos:end="315:57"><expr pos:start="315:46" pos:end="315:57"><operator pos:start="315:46" pos:end="315:46">&amp;</operator><name pos:start="315:47" pos:end="315:57">piix3_devfn</name></expr></argument>, <argument pos:start="315:60" pos:end="315:66"><expr pos:start="315:60" pos:end="315:66"><name pos:start="315:60" pos:end="315:66">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="317:7" pos:end="323:5">else <block pos:start="317:12" pos:end="323:5">{<block_content pos:start="319:9" pos:end="321:26">

        <expr_stmt pos:start="319:9" pos:end="319:23"><expr pos:start="319:9" pos:end="319:22"><name pos:start="319:9" pos:end="319:15">pci_bus</name> <operator pos:start="319:17" pos:end="319:17">=</operator> <name pos:start="319:19" pos:end="319:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:26"><expr pos:start="321:9" pos:end="321:25"><call pos:start="321:9" pos:end="321:25"><name pos:start="321:9" pos:end="321:19">isa_bus_new</name><argument_list pos:start="321:20" pos:end="321:25">(<argument pos:start="321:21" pos:end="321:24"><expr pos:start="321:21" pos:end="321:24"><name pos:start="321:21" pos:end="321:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:26"><expr pos:start="325:5" pos:end="325:25"><call pos:start="325:5" pos:end="325:25"><name pos:start="325:5" pos:end="325:16">isa_bus_irqs</name><argument_list pos:start="325:17" pos:end="325:25">(<argument pos:start="325:18" pos:end="325:24"><expr pos:start="325:18" pos:end="325:24"><name pos:start="325:18" pos:end="325:24">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:35"><expr pos:start="329:5" pos:end="329:34"><name pos:start="329:5" pos:end="329:12">ferr_irq</name> <operator pos:start="329:14" pos:end="329:14">=</operator> <call pos:start="329:16" pos:end="329:34"><name pos:start="329:16" pos:end="329:30">isa_reserve_irq</name><argument_list pos:start="329:31" pos:end="329:34">(<argument pos:start="329:32" pos:end="329:33"><expr pos:start="329:32" pos:end="329:33"><literal type="number" pos:start="329:32" pos:end="329:33">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="333:5" pos:end="333:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="335:5" pos:end="335:60"><expr pos:start="335:5" pos:end="335:59"><call pos:start="335:5" pos:end="335:59"><name pos:start="335:5" pos:end="335:25">register_ioport_write</name><argument_list pos:start="335:26" pos:end="335:59">(<argument pos:start="335:27" pos:end="335:30"><expr pos:start="335:27" pos:end="335:30"><literal type="number" pos:start="335:27" pos:end="335:30">0x80</literal></expr></argument>, <argument pos:start="335:33" pos:end="335:33"><expr pos:start="335:33" pos:end="335:33"><literal type="number" pos:start="335:33" pos:end="335:33">1</literal></expr></argument>, <argument pos:start="335:36" pos:end="335:36"><expr pos:start="335:36" pos:end="335:36"><literal type="number" pos:start="335:36" pos:end="335:36">1</literal></expr></argument>, <argument pos:start="335:39" pos:end="335:52"><expr pos:start="335:39" pos:end="335:52"><name pos:start="335:39" pos:end="335:52">ioport80_write</name></expr></argument>, <argument pos:start="335:55" pos:end="335:58"><expr pos:start="335:55" pos:end="335:58"><name pos:start="335:55" pos:end="335:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="339:5" pos:end="339:60"><expr pos:start="339:5" pos:end="339:59"><call pos:start="339:5" pos:end="339:59"><name pos:start="339:5" pos:end="339:25">register_ioport_write</name><argument_list pos:start="339:26" pos:end="339:59">(<argument pos:start="339:27" pos:end="339:30"><expr pos:start="339:27" pos:end="339:30"><literal type="number" pos:start="339:27" pos:end="339:30">0xf0</literal></expr></argument>, <argument pos:start="339:33" pos:end="339:33"><expr pos:start="339:33" pos:end="339:33"><literal type="number" pos:start="339:33" pos:end="339:33">1</literal></expr></argument>, <argument pos:start="339:36" pos:end="339:36"><expr pos:start="339:36" pos:end="339:36"><literal type="number" pos:start="339:36" pos:end="339:36">1</literal></expr></argument>, <argument pos:start="339:39" pos:end="339:52"><expr pos:start="339:39" pos:end="339:52"><name pos:start="339:39" pos:end="339:52">ioportF0_write</name></expr></argument>, <argument pos:start="339:55" pos:end="339:58"><expr pos:start="339:55" pos:end="339:58"><name pos:start="339:55" pos:end="339:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="343:5" pos:end="377:5"><if pos:start="343:5" pos:end="355:5">if <condition pos:start="343:8" pos:end="343:27">(<expr pos:start="343:9" pos:end="343:26"><name pos:start="343:9" pos:end="343:26">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="343:29" pos:end="355:5">{<block_content pos:start="345:9" pos:end="353:9">

        <if_stmt pos:start="345:9" pos:end="353:9"><if pos:start="345:9" pos:end="349:9">if <condition pos:start="345:12" pos:end="345:24">(<expr pos:start="345:13" pos:end="345:23"><name pos:start="345:13" pos:end="345:23">pci_enabled</name></expr>)</condition> <block pos:start="345:26" pos:end="349:9">{<block_content pos:start="347:13" pos:end="347:41">

            <expr_stmt pos:start="347:13" pos:end="347:41"><expr pos:start="347:13" pos:end="347:40"><call pos:start="347:13" pos:end="347:40"><name pos:start="347:13" pos:end="347:31">pci_cirrus_vga_init</name><argument_list pos:start="347:32" pos:end="347:40">(<argument pos:start="347:33" pos:end="347:39"><expr pos:start="347:33" pos:end="347:39"><name pos:start="347:33" pos:end="347:39">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="349:11" pos:end="353:9">else <block pos:start="349:16" pos:end="353:9">{<block_content pos:start="351:13" pos:end="351:34">

            <expr_stmt pos:start="351:13" pos:end="351:34"><expr pos:start="351:13" pos:end="351:33"><call pos:start="351:13" pos:end="351:33"><name pos:start="351:13" pos:end="351:31">isa_cirrus_vga_init</name><argument_list pos:start="351:32" pos:end="351:33">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="355:7" pos:end="365:5">else if <condition pos:start="355:15" pos:end="355:30">(<expr pos:start="355:16" pos:end="355:29"><name pos:start="355:16" pos:end="355:29">vmsvga_enabled</name></expr>)</condition> <block pos:start="355:32" pos:end="365:5">{<block_content pos:start="357:9" pos:end="363:74">

        <if_stmt pos:start="357:9" pos:end="363:74"><if pos:start="357:9" pos:end="359:37">if <condition pos:start="357:12" pos:end="357:24">(<expr pos:start="357:13" pos:end="357:23"><name pos:start="357:13" pos:end="357:23">pci_enabled</name></expr>)</condition><block type="pseudo" pos:start="359:13" pos:end="359:37"><block_content pos:start="359:13" pos:end="359:37">

            <expr_stmt pos:start="359:13" pos:end="359:37"><expr pos:start="359:13" pos:end="359:36"><call pos:start="359:13" pos:end="359:36"><name pos:start="359:13" pos:end="359:27">pci_vmsvga_init</name><argument_list pos:start="359:28" pos:end="359:36">(<argument pos:start="359:29" pos:end="359:35"><expr pos:start="359:29" pos:end="359:35"><name pos:start="359:29" pos:end="359:35">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="361:9" pos:end="363:74">else<block type="pseudo" pos:start="363:13" pos:end="363:74"><block_content pos:start="363:13" pos:end="363:74">

            <expr_stmt pos:start="363:13" pos:end="363:74"><expr pos:start="363:13" pos:end="363:73"><call pos:start="363:13" pos:end="363:73"><name pos:start="363:13" pos:end="363:19">fprintf</name><argument_list pos:start="363:20" pos:end="363:73">(<argument pos:start="363:21" pos:end="363:26"><expr pos:start="363:21" pos:end="363:26"><name pos:start="363:21" pos:end="363:26">stderr</name></expr></argument>, <argument pos:start="363:29" pos:end="363:58"><expr pos:start="363:29" pos:end="363:58"><literal type="string" pos:start="363:29" pos:end="363:58">"%s: vmware_vga: no PCI bus\n"</literal></expr></argument>, <argument pos:start="363:61" pos:end="363:72"><expr pos:start="363:61" pos:end="363:72"><name pos:start="363:61" pos:end="363:72">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="365:7" pos:end="377:5">else if <condition pos:start="365:15" pos:end="365:31">(<expr pos:start="365:16" pos:end="365:30"><name pos:start="365:16" pos:end="365:30">std_vga_enabled</name></expr>)</condition> <block pos:start="365:33" pos:end="377:5">{<block_content pos:start="367:9" pos:end="375:9">

        <if_stmt pos:start="367:9" pos:end="375:9"><if pos:start="367:9" pos:end="371:9">if <condition pos:start="367:12" pos:end="367:24">(<expr pos:start="367:13" pos:end="367:23"><name pos:start="367:13" pos:end="367:23">pci_enabled</name></expr>)</condition> <block pos:start="367:26" pos:end="371:9">{<block_content pos:start="369:13" pos:end="369:40">

            <expr_stmt pos:start="369:13" pos:end="369:40"><expr pos:start="369:13" pos:end="369:39"><call pos:start="369:13" pos:end="369:39"><name pos:start="369:13" pos:end="369:24">pci_vga_init</name><argument_list pos:start="369:25" pos:end="369:39">(<argument pos:start="369:26" pos:end="369:32"><expr pos:start="369:26" pos:end="369:32"><name pos:start="369:26" pos:end="369:32">pci_bus</name></expr></argument>, <argument pos:start="369:35" pos:end="369:35"><expr pos:start="369:35" pos:end="369:35"><literal type="number" pos:start="369:35" pos:end="369:35">0</literal></expr></argument>, <argument pos:start="369:38" pos:end="369:38"><expr pos:start="369:38" pos:end="369:38"><literal type="number" pos:start="369:38" pos:end="369:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="371:11" pos:end="375:9">else <block pos:start="371:16" pos:end="375:9">{<block_content pos:start="373:13" pos:end="373:27">

            <expr_stmt pos:start="373:13" pos:end="373:27"><expr pos:start="373:13" pos:end="373:26"><call pos:start="373:13" pos:end="373:26"><name pos:start="373:13" pos:end="373:24">isa_vga_init</name><argument_list pos:start="373:25" pos:end="373:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="381:5" pos:end="381:31"><expr pos:start="381:5" pos:end="381:30"><name pos:start="381:5" pos:end="381:13">rtc_state</name> <operator pos:start="381:15" pos:end="381:15">=</operator> <call pos:start="381:17" pos:end="381:30"><name pos:start="381:17" pos:end="381:24">rtc_init</name><argument_list pos:start="381:25" pos:end="381:30">(<argument pos:start="381:26" pos:end="381:29"><expr pos:start="381:26" pos:end="381:29"><literal type="number" pos:start="381:26" pos:end="381:29">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="385:5" pos:end="385:51"><expr pos:start="385:5" pos:end="385:50"><call pos:start="385:5" pos:end="385:50"><name pos:start="385:5" pos:end="385:26">qemu_register_boot_set</name><argument_list pos:start="385:27" pos:end="385:50">(<argument pos:start="385:28" pos:end="385:38"><expr pos:start="385:28" pos:end="385:38"><name pos:start="385:28" pos:end="385:38">pc_boot_set</name></expr></argument>, <argument pos:start="385:41" pos:end="385:49"><expr pos:start="385:41" pos:end="385:49"><name pos:start="385:41" pos:end="385:49">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="389:5" pos:end="389:58"><expr pos:start="389:5" pos:end="389:57"><call pos:start="389:5" pos:end="389:57"><name pos:start="389:5" pos:end="389:24">register_ioport_read</name><argument_list pos:start="389:25" pos:end="389:57">(<argument pos:start="389:26" pos:end="389:29"><expr pos:start="389:26" pos:end="389:29"><literal type="number" pos:start="389:26" pos:end="389:29">0x92</literal></expr></argument>, <argument pos:start="389:32" pos:end="389:32"><expr pos:start="389:32" pos:end="389:32"><literal type="number" pos:start="389:32" pos:end="389:32">1</literal></expr></argument>, <argument pos:start="389:35" pos:end="389:35"><expr pos:start="389:35" pos:end="389:35"><literal type="number" pos:start="389:35" pos:end="389:35">1</literal></expr></argument>, <argument pos:start="389:38" pos:end="389:50"><expr pos:start="389:38" pos:end="389:50"><name pos:start="389:38" pos:end="389:50">ioport92_read</name></expr></argument>, <argument pos:start="389:53" pos:end="389:56"><expr pos:start="389:53" pos:end="389:56"><name pos:start="389:53" pos:end="389:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:60"><expr pos:start="391:5" pos:end="391:59"><call pos:start="391:5" pos:end="391:59"><name pos:start="391:5" pos:end="391:25">register_ioport_write</name><argument_list pos:start="391:26" pos:end="391:59">(<argument pos:start="391:27" pos:end="391:30"><expr pos:start="391:27" pos:end="391:30"><literal type="number" pos:start="391:27" pos:end="391:30">0x92</literal></expr></argument>, <argument pos:start="391:33" pos:end="391:33"><expr pos:start="391:33" pos:end="391:33"><literal type="number" pos:start="391:33" pos:end="391:33">1</literal></expr></argument>, <argument pos:start="391:36" pos:end="391:36"><expr pos:start="391:36" pos:end="391:36"><literal type="number" pos:start="391:36" pos:end="391:36">1</literal></expr></argument>, <argument pos:start="391:39" pos:end="391:52"><expr pos:start="391:39" pos:end="391:52"><name pos:start="391:39" pos:end="391:52">ioport92_write</name></expr></argument>, <argument pos:start="391:55" pos:end="391:58"><expr pos:start="391:55" pos:end="391:58"><name pos:start="391:55" pos:end="391:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="395:5" pos:end="399:5"><if pos:start="395:5" pos:end="399:5">if <condition pos:start="395:8" pos:end="395:20">(<expr pos:start="395:9" pos:end="395:19"><name pos:start="395:9" pos:end="395:19">pci_enabled</name></expr>)</condition> <block pos:start="395:22" pos:end="399:5">{<block_content pos:start="397:9" pos:end="397:46">

        <expr_stmt pos:start="397:9" pos:end="397:46"><expr pos:start="397:9" pos:end="397:45"><name pos:start="397:9" pos:end="397:29"><name pos:start="397:9" pos:end="397:21">isa_irq_state</name><operator pos:start="397:22" pos:end="397:23">-&gt;</operator><name pos:start="397:24" pos:end="397:29">ioapic</name></name> <operator pos:start="397:31" pos:end="397:31">=</operator> <call pos:start="397:33" pos:end="397:45"><name pos:start="397:33" pos:end="397:43">ioapic_init</name><argument_list pos:start="397:44" pos:end="397:45">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:45"><expr pos:start="401:5" pos:end="401:44"><name pos:start="401:5" pos:end="401:7">pit</name> <operator pos:start="401:9" pos:end="401:9">=</operator> <call pos:start="401:11" pos:end="401:44"><name pos:start="401:11" pos:end="401:18">pit_init</name><argument_list pos:start="401:19" pos:end="401:44">(<argument pos:start="401:20" pos:end="401:23"><expr pos:start="401:20" pos:end="401:23"><literal type="number" pos:start="401:20" pos:end="401:23">0x40</literal></expr></argument>, <argument pos:start="401:26" pos:end="401:43"><expr pos:start="401:26" pos:end="401:43"><call pos:start="401:26" pos:end="401:43"><name pos:start="401:26" pos:end="401:40">isa_reserve_irq</name><argument_list pos:start="401:41" pos:end="401:43">(<argument pos:start="401:42" pos:end="401:42"><expr pos:start="401:42" pos:end="401:42"><literal type="number" pos:start="401:42" pos:end="401:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:20"><expr pos:start="403:5" pos:end="403:19"><call pos:start="403:5" pos:end="403:19"><name pos:start="403:5" pos:end="403:14">pcspk_init</name><argument_list pos:start="403:15" pos:end="403:19">(<argument pos:start="403:16" pos:end="403:18"><expr pos:start="403:16" pos:end="403:18"><name pos:start="403:16" pos:end="403:18">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="405:5" pos:end="409:5"><if pos:start="405:5" pos:end="409:5">if <condition pos:start="405:8" pos:end="405:17">(<expr pos:start="405:9" pos:end="405:16"><operator pos:start="405:9" pos:end="405:9">!</operator><name pos:start="405:10" pos:end="405:16">no_hpet</name></expr>)</condition> <block pos:start="405:19" pos:end="409:5">{<block_content pos:start="407:9" pos:end="407:27">

        <expr_stmt pos:start="407:9" pos:end="407:27"><expr pos:start="407:9" pos:end="407:26"><call pos:start="407:9" pos:end="407:26"><name pos:start="407:9" pos:end="407:17">hpet_init</name><argument_list pos:start="407:18" pos:end="407:26">(<argument pos:start="407:19" pos:end="407:25"><expr pos:start="407:19" pos:end="407:25"><name pos:start="407:19" pos:end="407:25">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="413:5" pos:end="421:5">for<control pos:start="413:8" pos:end="413:41">(<init pos:start="413:9" pos:end="413:14"><expr pos:start="413:9" pos:end="413:13"><name pos:start="413:9" pos:end="413:9">i</name> <operator pos:start="413:11" pos:end="413:11">=</operator> <literal type="number" pos:start="413:13" pos:end="413:13">0</literal></expr>;</init> <condition pos:start="413:16" pos:end="413:36"><expr pos:start="413:16" pos:end="413:35"><name pos:start="413:16" pos:end="413:16">i</name> <operator pos:start="413:18" pos:end="413:18">&lt;</operator> <name pos:start="413:20" pos:end="413:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="413:38" pos:end="413:40"><expr pos:start="413:38" pos:end="413:40"><name pos:start="413:38" pos:end="413:38">i</name><operator pos:start="413:39" pos:end="413:40">++</operator></expr></incr>)</control> <block pos:start="413:43" pos:end="421:5">{<block_content pos:start="415:9" pos:end="419:9">

        <if_stmt pos:start="415:9" pos:end="419:9"><if pos:start="415:9" pos:end="419:9">if <condition pos:start="415:12" pos:end="415:26">(<expr pos:start="415:13" pos:end="415:25"><name pos:start="415:13" pos:end="415:25"><name pos:start="415:13" pos:end="415:22">serial_hds</name><index pos:start="415:23" pos:end="415:25">[<expr pos:start="415:24" pos:end="415:24"><name pos:start="415:24" pos:end="415:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="415:28" pos:end="419:9">{<block_content pos:start="417:13" pos:end="417:46">

            <expr_stmt pos:start="417:13" pos:end="417:46"><expr pos:start="417:13" pos:end="417:45"><call pos:start="417:13" pos:end="417:45"><name pos:start="417:13" pos:end="417:27">serial_isa_init</name><argument_list pos:start="417:28" pos:end="417:45">(<argument pos:start="417:29" pos:end="417:29"><expr pos:start="417:29" pos:end="417:29"><name pos:start="417:29" pos:end="417:29">i</name></expr></argument>, <argument pos:start="417:32" pos:end="417:44"><expr pos:start="417:32" pos:end="417:44"><name pos:start="417:32" pos:end="417:44"><name pos:start="417:32" pos:end="417:41">serial_hds</name><index pos:start="417:42" pos:end="417:44">[<expr pos:start="417:43" pos:end="417:43"><name pos:start="417:43" pos:end="417:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="425:5" pos:end="433:5">for<control pos:start="425:8" pos:end="425:43">(<init pos:start="425:9" pos:end="425:14"><expr pos:start="425:9" pos:end="425:13"><name pos:start="425:9" pos:end="425:9">i</name> <operator pos:start="425:11" pos:end="425:11">=</operator> <literal type="number" pos:start="425:13" pos:end="425:13">0</literal></expr>;</init> <condition pos:start="425:16" pos:end="425:38"><expr pos:start="425:16" pos:end="425:37"><name pos:start="425:16" pos:end="425:16">i</name> <operator pos:start="425:18" pos:end="425:18">&lt;</operator> <name pos:start="425:20" pos:end="425:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="425:40" pos:end="425:42"><expr pos:start="425:40" pos:end="425:42"><name pos:start="425:40" pos:end="425:40">i</name><operator pos:start="425:41" pos:end="425:42">++</operator></expr></incr>)</control> <block pos:start="425:45" pos:end="433:5">{<block_content pos:start="427:9" pos:end="431:9">

        <if_stmt pos:start="427:9" pos:end="431:9"><if pos:start="427:9" pos:end="431:9">if <condition pos:start="427:12" pos:end="427:28">(<expr pos:start="427:13" pos:end="427:27"><name pos:start="427:13" pos:end="427:27"><name pos:start="427:13" pos:end="427:24">parallel_hds</name><index pos:start="427:25" pos:end="427:27">[<expr pos:start="427:26" pos:end="427:26"><name pos:start="427:26" pos:end="427:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="427:30" pos:end="431:9">{<block_content pos:start="429:13" pos:end="429:46">

            <expr_stmt pos:start="429:13" pos:end="429:46"><expr pos:start="429:13" pos:end="429:45"><call pos:start="429:13" pos:end="429:45"><name pos:start="429:13" pos:end="429:25">parallel_init</name><argument_list pos:start="429:26" pos:end="429:45">(<argument pos:start="429:27" pos:end="429:27"><expr pos:start="429:27" pos:end="429:27"><name pos:start="429:27" pos:end="429:27">i</name></expr></argument>, <argument pos:start="429:30" pos:end="429:44"><expr pos:start="429:30" pos:end="429:44"><name pos:start="429:30" pos:end="429:44"><name pos:start="429:30" pos:end="429:41">parallel_hds</name><index pos:start="429:42" pos:end="429:44">[<expr pos:start="429:43" pos:end="429:43"><name pos:start="429:43" pos:end="429:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="437:5" pos:end="451:5">for<control pos:start="437:8" pos:end="437:32">(<init pos:start="437:9" pos:end="437:14"><expr pos:start="437:9" pos:end="437:13"><name pos:start="437:9" pos:end="437:9">i</name> <operator pos:start="437:11" pos:end="437:11">=</operator> <literal type="number" pos:start="437:13" pos:end="437:13">0</literal></expr>;</init> <condition pos:start="437:16" pos:end="437:27"><expr pos:start="437:16" pos:end="437:26"><name pos:start="437:16" pos:end="437:16">i</name> <operator pos:start="437:18" pos:end="437:18">&lt;</operator> <name pos:start="437:20" pos:end="437:26">nb_nics</name></expr>;</condition> <incr pos:start="437:29" pos:end="437:31"><expr pos:start="437:29" pos:end="437:31"><name pos:start="437:29" pos:end="437:29">i</name><operator pos:start="437:30" pos:end="437:31">++</operator></expr></incr>)</control> <block pos:start="437:34" pos:end="451:5">{<block_content pos:start="439:9" pos:end="449:51">

        <decl_stmt pos:start="439:9" pos:end="439:35"><decl pos:start="439:9" pos:end="439:34"><type pos:start="439:9" pos:end="439:17"><name pos:start="439:9" pos:end="439:15">NICInfo</name> <modifier pos:start="439:17" pos:end="439:17">*</modifier></type><name pos:start="439:18" pos:end="439:19">nd</name> <init pos:start="439:21" pos:end="439:34">= <expr pos:start="439:23" pos:end="439:34"><operator pos:start="439:23" pos:end="439:23">&amp;</operator><name pos:start="439:24" pos:end="439:34"><name pos:start="439:24" pos:end="439:31">nd_table</name><index pos:start="439:32" pos:end="439:34">[<expr pos:start="439:33" pos:end="439:33"><name pos:start="439:33" pos:end="439:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="443:9" pos:end="449:51"><if pos:start="443:9" pos:end="445:33">if <condition pos:start="443:12" pos:end="443:78">(<expr pos:start="443:13" pos:end="443:77"><operator pos:start="443:13" pos:end="443:13">!</operator><name pos:start="443:14" pos:end="443:24">pci_enabled</name> <operator pos:start="443:26" pos:end="443:27">||</operator> <operator pos:start="443:29" pos:end="443:29">(</operator><name pos:start="443:30" pos:end="443:38"><name pos:start="443:30" pos:end="443:31">nd</name><operator pos:start="443:32" pos:end="443:33">-&gt;</operator><name pos:start="443:34" pos:end="443:38">model</name></name> <operator pos:start="443:40" pos:end="443:41">&amp;&amp;</operator> <call pos:start="443:43" pos:end="443:71"><name pos:start="443:43" pos:end="443:48">strcmp</name><argument_list pos:start="443:49" pos:end="443:71">(<argument pos:start="443:50" pos:end="443:58"><expr pos:start="443:50" pos:end="443:58"><name pos:start="443:50" pos:end="443:58"><name pos:start="443:50" pos:end="443:51">nd</name><operator pos:start="443:52" pos:end="443:53">-&gt;</operator><name pos:start="443:54" pos:end="443:58">model</name></name></expr></argument>, <argument pos:start="443:61" pos:end="443:70"><expr pos:start="443:61" pos:end="443:70"><literal type="string" pos:start="443:61" pos:end="443:70">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="443:73" pos:end="443:74">==</operator> <literal type="number" pos:start="443:76" pos:end="443:76">0</literal><operator pos:start="443:77" pos:end="443:77">)</operator></expr>)</condition><block type="pseudo" pos:start="445:13" pos:end="445:33"><block_content pos:start="445:13" pos:end="445:33">

            <expr_stmt pos:start="445:13" pos:end="445:33"><expr pos:start="445:13" pos:end="445:32"><call pos:start="445:13" pos:end="445:32"><name pos:start="445:13" pos:end="445:28">pc_init_ne2k_isa</name><argument_list pos:start="445:29" pos:end="445:32">(<argument pos:start="445:30" pos:end="445:31"><expr pos:start="445:30" pos:end="445:31"><name pos:start="445:30" pos:end="445:31">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="447:9" pos:end="449:51">else<block type="pseudo" pos:start="449:13" pos:end="449:51"><block_content pos:start="449:13" pos:end="449:51">

            <expr_stmt pos:start="449:13" pos:end="449:51"><expr pos:start="449:13" pos:end="449:50"><call pos:start="449:13" pos:end="449:50"><name pos:start="449:13" pos:end="449:31">pci_nic_init_nofail</name><argument_list pos:start="449:32" pos:end="449:50">(<argument pos:start="449:33" pos:end="449:34"><expr pos:start="449:33" pos:end="449:34"><name pos:start="449:33" pos:end="449:34">nd</name></expr></argument>, <argument pos:start="449:37" pos:end="449:43"><expr pos:start="449:37" pos:end="449:43"><literal type="string" pos:start="449:37" pos:end="449:43">"e1000"</literal></expr></argument>, <argument pos:start="449:46" pos:end="449:49"><expr pos:start="449:46" pos:end="449:49"><name pos:start="449:46" pos:end="449:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="455:5" pos:end="461:5"><if pos:start="455:5" pos:end="461:5">if <condition pos:start="455:8" pos:end="455:49">(<expr pos:start="455:9" pos:end="455:48"><call pos:start="455:9" pos:end="455:33"><name pos:start="455:9" pos:end="455:25">drive_get_max_bus</name><argument_list pos:start="455:26" pos:end="455:33">(<argument pos:start="455:27" pos:end="455:32"><expr pos:start="455:27" pos:end="455:32"><name pos:start="455:27" pos:end="455:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="455:35" pos:end="455:36">&gt;=</operator> <name pos:start="455:38" pos:end="455:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="455:51" pos:end="461:5">{<block_content pos:start="457:9" pos:end="459:16">

        <expr_stmt pos:start="457:9" pos:end="457:52"><expr pos:start="457:9" pos:end="457:51"><call pos:start="457:9" pos:end="457:51"><name pos:start="457:9" pos:end="457:15">fprintf</name><argument_list pos:start="457:16" pos:end="457:51">(<argument pos:start="457:17" pos:end="457:22"><expr pos:start="457:17" pos:end="457:22"><name pos:start="457:17" pos:end="457:22">stderr</name></expr></argument>, <argument pos:start="457:25" pos:end="457:50"><expr pos:start="457:25" pos:end="457:50"><literal type="string" pos:start="457:25" pos:end="457:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:16"><expr pos:start="459:9" pos:end="459:15"><call pos:start="459:9" pos:end="459:15"><name pos:start="459:9" pos:end="459:12">exit</name><argument_list pos:start="459:13" pos:end="459:15">(<argument pos:start="459:14" pos:end="459:14"><expr pos:start="459:14" pos:end="459:14"><literal type="number" pos:start="459:14" pos:end="459:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="465:5" pos:end="469:5">for<control pos:start="465:8" pos:end="465:51">(<init pos:start="465:9" pos:end="465:14"><expr pos:start="465:9" pos:end="465:13"><name pos:start="465:9" pos:end="465:9">i</name> <operator pos:start="465:11" pos:end="465:11">=</operator> <literal type="number" pos:start="465:13" pos:end="465:13">0</literal></expr>;</init> <condition pos:start="465:16" pos:end="465:46"><expr pos:start="465:16" pos:end="465:45"><name pos:start="465:16" pos:end="465:16">i</name> <operator pos:start="465:18" pos:end="465:18">&lt;</operator> <name pos:start="465:20" pos:end="465:30">MAX_IDE_BUS</name> <operator pos:start="465:32" pos:end="465:32">*</operator> <name pos:start="465:34" pos:end="465:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="465:48" pos:end="465:50"><expr pos:start="465:48" pos:end="465:50"><name pos:start="465:48" pos:end="465:48">i</name><operator pos:start="465:49" pos:end="465:50">++</operator></expr></incr>)</control> <block pos:start="465:53" pos:end="469:5">{<block_content pos:start="467:9" pos:end="467:70">

        <expr_stmt pos:start="467:9" pos:end="467:70"><expr pos:start="467:9" pos:end="467:69"><name pos:start="467:9" pos:end="467:13"><name pos:start="467:9" pos:end="467:10">hd</name><index pos:start="467:11" pos:end="467:13">[<expr pos:start="467:12" pos:end="467:12"><name pos:start="467:12" pos:end="467:12">i</name></expr>]</index></name> <operator pos:start="467:15" pos:end="467:15">=</operator> <call pos:start="467:17" pos:end="467:69"><name pos:start="467:17" pos:end="467:25">drive_get</name><argument_list pos:start="467:26" pos:end="467:69">(<argument pos:start="467:27" pos:end="467:32"><expr pos:start="467:27" pos:end="467:32"><name pos:start="467:27" pos:end="467:32">IF_IDE</name></expr></argument>, <argument pos:start="467:35" pos:end="467:50"><expr pos:start="467:35" pos:end="467:50"><name pos:start="467:35" pos:end="467:35">i</name> <operator pos:start="467:37" pos:end="467:37">/</operator> <name pos:start="467:39" pos:end="467:50">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="467:53" pos:end="467:68"><expr pos:start="467:53" pos:end="467:68"><name pos:start="467:53" pos:end="467:53">i</name> <operator pos:start="467:55" pos:end="467:55">%</operator> <name pos:start="467:57" pos:end="467:68">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="473:5" pos:end="487:5"><if pos:start="473:5" pos:end="477:5">if <condition pos:start="473:8" pos:end="473:20">(<expr pos:start="473:9" pos:end="473:19"><name pos:start="473:9" pos:end="473:19">pci_enabled</name></expr>)</condition> <block pos:start="473:22" pos:end="477:5">{<block_content pos:start="475:9" pos:end="475:57">

        <expr_stmt pos:start="475:9" pos:end="475:57"><expr pos:start="475:9" pos:end="475:56"><call pos:start="475:9" pos:end="475:56"><name pos:start="475:9" pos:end="475:26">pci_piix3_ide_init</name><argument_list pos:start="475:27" pos:end="475:56">(<argument pos:start="475:28" pos:end="475:34"><expr pos:start="475:28" pos:end="475:34"><name pos:start="475:28" pos:end="475:34">pci_bus</name></expr></argument>, <argument pos:start="475:37" pos:end="475:38"><expr pos:start="475:37" pos:end="475:38"><name pos:start="475:37" pos:end="475:38">hd</name></expr></argument>, <argument pos:start="475:41" pos:end="475:55"><expr pos:start="475:41" pos:end="475:55"><name pos:start="475:41" pos:end="475:51">piix3_devfn</name> <operator pos:start="475:53" pos:end="475:53">+</operator> <literal type="number" pos:start="475:55" pos:end="475:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="477:7" pos:end="487:5">else <block pos:start="477:12" pos:end="487:5">{<block_content pos:start="479:9" pos:end="485:9">

        <for pos:start="479:9" pos:end="485:9">for<control pos:start="479:12" pos:end="479:40">(<init pos:start="479:13" pos:end="479:18"><expr pos:start="479:13" pos:end="479:17"><name pos:start="479:13" pos:end="479:13">i</name> <operator pos:start="479:15" pos:end="479:15">=</operator> <literal type="number" pos:start="479:17" pos:end="479:17">0</literal></expr>;</init> <condition pos:start="479:20" pos:end="479:35"><expr pos:start="479:20" pos:end="479:34"><name pos:start="479:20" pos:end="479:20">i</name> <operator pos:start="479:22" pos:end="479:22">&lt;</operator> <name pos:start="479:24" pos:end="479:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="479:37" pos:end="479:39"><expr pos:start="479:37" pos:end="479:39"><name pos:start="479:37" pos:end="479:37">i</name><operator pos:start="479:38" pos:end="479:39">++</operator></expr></incr>)</control> <block pos:start="479:42" pos:end="485:9">{<block_content pos:start="481:13" pos:end="483:73">

            <expr_stmt pos:start="481:13" pos:end="483:73"><expr pos:start="481:13" pos:end="483:72"><call pos:start="481:13" pos:end="483:72"><name pos:start="481:13" pos:end="481:24">isa_ide_init</name><argument_list pos:start="481:25" pos:end="483:72">(<argument pos:start="481:26" pos:end="481:38"><expr pos:start="481:26" pos:end="481:38"><name pos:start="481:26" pos:end="481:38"><name pos:start="481:26" pos:end="481:35">ide_iobase</name><index pos:start="481:36" pos:end="481:38">[<expr pos:start="481:37" pos:end="481:37"><name pos:start="481:37" pos:end="481:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="481:41" pos:end="481:54"><expr pos:start="481:41" pos:end="481:54"><name pos:start="481:41" pos:end="481:54"><name pos:start="481:41" pos:end="481:51">ide_iobase2</name><index pos:start="481:52" pos:end="481:54">[<expr pos:start="481:53" pos:end="481:53"><name pos:start="481:53" pos:end="481:53">i</name></expr>]</index></name></expr></argument>, <argument pos:start="481:57" pos:end="481:66"><expr pos:start="481:57" pos:end="481:66"><name pos:start="481:57" pos:end="481:66"><name pos:start="481:57" pos:end="481:63">ide_irq</name><index pos:start="481:64" pos:end="481:66">[<expr pos:start="481:65" pos:end="481:65"><name pos:start="481:65" pos:end="481:65">i</name></expr>]</index></name></expr></argument>,

	                 <argument pos:start="483:26" pos:end="483:45"><expr pos:start="483:26" pos:end="483:45"><name pos:start="483:26" pos:end="483:45"><name pos:start="483:26" pos:end="483:27">hd</name><index pos:start="483:28" pos:end="483:45">[<expr pos:start="483:29" pos:end="483:44"><name pos:start="483:29" pos:end="483:40">MAX_IDE_DEVS</name> <operator pos:start="483:42" pos:end="483:42">*</operator> <name pos:start="483:44" pos:end="483:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="483:48" pos:end="483:71"><expr pos:start="483:48" pos:end="483:71"><name pos:start="483:48" pos:end="483:71"><name pos:start="483:48" pos:end="483:49">hd</name><index pos:start="483:50" pos:end="483:71">[<expr pos:start="483:51" pos:end="483:70"><name pos:start="483:51" pos:end="483:62">MAX_IDE_DEVS</name> <operator pos:start="483:64" pos:end="483:64">*</operator> <name pos:start="483:66" pos:end="483:66">i</name> <operator pos:start="483:68" pos:end="483:68">+</operator> <literal type="number" pos:start="483:70" pos:end="483:70">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="491:5" pos:end="491:41"><expr pos:start="491:5" pos:end="491:40"><name pos:start="491:5" pos:end="491:11">isa_dev</name> <operator pos:start="491:13" pos:end="491:13">=</operator> <call pos:start="491:15" pos:end="491:40"><name pos:start="491:15" pos:end="491:31">isa_create_simple</name><argument_list pos:start="491:32" pos:end="491:40">(<argument pos:start="491:33" pos:end="491:39"><expr pos:start="491:33" pos:end="491:39"><literal type="string" pos:start="491:33" pos:end="491:39">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="496:0"><expr pos:start="493:5" pos:end="493:15"><call pos:start="493:5" pos:end="493:15"><name pos:start="493:5" pos:end="493:12">DMA_init</name><argument_list pos:start="493:13" pos:end="493:15">(<argument pos:start="493:14" pos:end="493:14"><expr pos:start="493:14" pos:end="493:14"><literal type="number" pos:start="493:14" pos:end="493:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="495:1" pos:end="495:16">#<cpp:directive pos:start="495:2" pos:end="495:6">ifdef</cpp:directive> <name pos:start="495:8" pos:end="495:16">HAS_AUDIO</name></cpp:ifdef>

    <expr_stmt pos:start="497:5" pos:end="500:0"><expr pos:start="497:5" pos:end="497:53"><call pos:start="497:5" pos:end="497:53"><name pos:start="497:5" pos:end="497:14">audio_init</name><argument_list pos:start="497:15" pos:end="497:53">(<argument pos:start="497:16" pos:end="497:43"><expr pos:start="497:16" pos:end="497:43"><ternary pos:start="497:16" pos:end="497:43"><condition pos:start="497:16" pos:end="497:28"><expr pos:start="497:16" pos:end="497:26"><name pos:start="497:16" pos:end="497:26">pci_enabled</name></expr> ?</condition><then pos:start="497:30" pos:end="497:36"> <expr pos:start="497:30" pos:end="497:36"><name pos:start="497:30" pos:end="497:36">pci_bus</name></expr> </then><else pos:start="497:38" pos:end="497:43">: <expr pos:start="497:40" pos:end="497:43"><name pos:start="497:40" pos:end="497:43">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="497:46" pos:end="497:52"><expr pos:start="497:46" pos:end="497:52"><name pos:start="497:46" pos:end="497:52">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="499:1" pos:end="499:6">#<cpp:directive pos:start="499:2" pos:end="499:6">endif</cpp:directive></cpp:endif>



    <for pos:start="503:5" pos:end="507:5">for<control pos:start="503:8" pos:end="503:31">(<init pos:start="503:9" pos:end="503:14"><expr pos:start="503:9" pos:end="503:13"><name pos:start="503:9" pos:end="503:9">i</name> <operator pos:start="503:11" pos:end="503:11">=</operator> <literal type="number" pos:start="503:13" pos:end="503:13">0</literal></expr>;</init> <condition pos:start="503:16" pos:end="503:26"><expr pos:start="503:16" pos:end="503:25"><name pos:start="503:16" pos:end="503:16">i</name> <operator pos:start="503:18" pos:end="503:18">&lt;</operator> <name pos:start="503:20" pos:end="503:25">MAX_FD</name></expr>;</condition> <incr pos:start="503:28" pos:end="503:30"><expr pos:start="503:28" pos:end="503:30"><name pos:start="503:28" pos:end="503:28">i</name><operator pos:start="503:29" pos:end="503:30">++</operator></expr></incr>)</control> <block pos:start="503:33" pos:end="507:5">{<block_content pos:start="505:9" pos:end="505:43">

        <expr_stmt pos:start="505:9" pos:end="505:43"><expr pos:start="505:9" pos:end="505:42"><name pos:start="505:9" pos:end="505:13"><name pos:start="505:9" pos:end="505:10">fd</name><index pos:start="505:11" pos:end="505:13">[<expr pos:start="505:12" pos:end="505:12"><name pos:start="505:12" pos:end="505:12">i</name></expr>]</index></name> <operator pos:start="505:15" pos:end="505:15">=</operator> <call pos:start="505:17" pos:end="505:42"><name pos:start="505:17" pos:end="505:25">drive_get</name><argument_list pos:start="505:26" pos:end="505:42">(<argument pos:start="505:27" pos:end="505:35"><expr pos:start="505:27" pos:end="505:35"><name pos:start="505:27" pos:end="505:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="505:38" pos:end="505:38"><expr pos:start="505:38" pos:end="505:38"><literal type="number" pos:start="505:38" pos:end="505:38">0</literal></expr></argument>, <argument pos:start="505:41" pos:end="505:41"><expr pos:start="505:41" pos:end="505:41"><name pos:start="505:41" pos:end="505:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="509:5" pos:end="509:44"><expr pos:start="509:5" pos:end="509:43"><name pos:start="509:5" pos:end="509:21">floppy_controller</name> <operator pos:start="509:23" pos:end="509:23">=</operator> <call pos:start="509:25" pos:end="509:43"><name pos:start="509:25" pos:end="509:39">fdctrl_init_isa</name><argument_list pos:start="509:40" pos:end="509:43">(<argument pos:start="509:41" pos:end="509:42"><expr pos:start="509:41" pos:end="509:42"><name pos:start="509:41" pos:end="509:42">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="513:5" pos:end="513:69"><expr pos:start="513:5" pos:end="513:68"><call pos:start="513:5" pos:end="513:68"><name pos:start="513:5" pos:end="513:13">cmos_init</name><argument_list pos:start="513:14" pos:end="513:68">(<argument pos:start="513:15" pos:end="513:31"><expr pos:start="513:15" pos:end="513:31"><name pos:start="513:15" pos:end="513:31">below_4g_mem_size</name></expr></argument>, <argument pos:start="513:34" pos:end="513:50"><expr pos:start="513:34" pos:end="513:50"><name pos:start="513:34" pos:end="513:50">above_4g_mem_size</name></expr></argument>, <argument pos:start="513:53" pos:end="513:63"><expr pos:start="513:53" pos:end="513:63"><name pos:start="513:53" pos:end="513:63">boot_device</name></expr></argument>, <argument pos:start="513:66" pos:end="513:67"><expr pos:start="513:66" pos:end="513:67"><name pos:start="513:66" pos:end="513:67">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="517:5" pos:end="521:5"><if pos:start="517:5" pos:end="521:5">if <condition pos:start="517:8" pos:end="517:35">(<expr pos:start="517:9" pos:end="517:34"><name pos:start="517:9" pos:end="517:19">pci_enabled</name> <operator pos:start="517:21" pos:end="517:22">&amp;&amp;</operator> <name pos:start="517:24" pos:end="517:34">usb_enabled</name></expr>)</condition> <block pos:start="517:37" pos:end="521:5">{<block_content pos:start="519:9" pos:end="519:54">

        <expr_stmt pos:start="519:9" pos:end="519:54"><expr pos:start="519:9" pos:end="519:53"><call pos:start="519:9" pos:end="519:53"><name pos:start="519:9" pos:end="519:27">usb_uhci_piix3_init</name><argument_list pos:start="519:28" pos:end="519:53">(<argument pos:start="519:29" pos:end="519:35"><expr pos:start="519:29" pos:end="519:35"><name pos:start="519:29" pos:end="519:35">pci_bus</name></expr></argument>, <argument pos:start="519:38" pos:end="519:52"><expr pos:start="519:38" pos:end="519:52"><name pos:start="519:38" pos:end="519:48">piix3_devfn</name> <operator pos:start="519:50" pos:end="519:50">+</operator> <literal type="number" pos:start="519:52" pos:end="519:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="525:5" pos:end="555:5"><if pos:start="525:5" pos:end="555:5">if <condition pos:start="525:8" pos:end="525:36">(<expr pos:start="525:9" pos:end="525:35"><name pos:start="525:9" pos:end="525:19">pci_enabled</name> <operator pos:start="525:21" pos:end="525:22">&amp;&amp;</operator> <name pos:start="525:24" pos:end="525:35">acpi_enabled</name></expr>)</condition> <block pos:start="525:38" pos:end="555:5">{<block_content pos:start="527:9" pos:end="553:48">

        <decl_stmt pos:start="527:9" pos:end="527:52"><decl pos:start="527:9" pos:end="527:51"><type pos:start="527:9" pos:end="527:17"><name pos:start="527:9" pos:end="527:15">uint8_t</name> <modifier pos:start="527:17" pos:end="527:17">*</modifier></type><name pos:start="527:18" pos:end="527:27">eeprom_buf</name> <init pos:start="527:29" pos:end="527:51">= <expr pos:start="527:31" pos:end="527:51"><call pos:start="527:31" pos:end="527:51"><name pos:start="527:31" pos:end="527:42">qemu_mallocz</name><argument_list pos:start="527:43" pos:end="527:51">(<argument pos:start="527:44" pos:end="527:50"><expr pos:start="527:44" pos:end="527:50"><literal type="number" pos:start="527:44" pos:end="527:44">8</literal> <operator pos:start="527:46" pos:end="527:46">*</operator> <literal type="number" pos:start="527:48" pos:end="527:50">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="527:54" pos:end="527:84">/* XXX: make this persistent */</comment>

        <decl_stmt pos:start="529:9" pos:end="529:23"><decl pos:start="529:9" pos:end="529:22"><type pos:start="529:9" pos:end="529:17"><name pos:start="529:9" pos:end="529:15">i2c_bus</name> <modifier pos:start="529:17" pos:end="529:17">*</modifier></type><name pos:start="529:18" pos:end="529:22">smbus</name></decl>;</decl_stmt>



        <comment type="block" pos:start="533:9" pos:end="533:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="535:9" pos:end="537:50"><expr pos:start="535:9" pos:end="537:49"><name pos:start="535:9" pos:end="535:13">smbus</name> <operator pos:start="535:15" pos:end="535:15">=</operator> <call pos:start="535:17" pos:end="537:49"><name pos:start="535:17" pos:end="535:29">piix4_pm_init</name><argument_list pos:start="535:30" pos:end="537:49">(<argument pos:start="535:31" pos:end="535:37"><expr pos:start="535:31" pos:end="535:37"><name pos:start="535:31" pos:end="535:37">pci_bus</name></expr></argument>, <argument pos:start="535:40" pos:end="535:54"><expr pos:start="535:40" pos:end="535:54"><name pos:start="535:40" pos:end="535:50">piix3_devfn</name> <operator pos:start="535:52" pos:end="535:52">+</operator> <literal type="number" pos:start="535:54" pos:end="535:54">3</literal></expr></argument>, <argument pos:start="535:57" pos:end="535:62"><expr pos:start="535:57" pos:end="535:62"><literal type="number" pos:start="535:57" pos:end="535:62">0xb100</literal></expr></argument>,

                              <argument pos:start="537:31" pos:end="537:48"><expr pos:start="537:31" pos:end="537:48"><call pos:start="537:31" pos:end="537:48"><name pos:start="537:31" pos:end="537:45">isa_reserve_irq</name><argument_list pos:start="537:46" pos:end="537:48">(<argument pos:start="537:47" pos:end="537:47"><expr pos:start="537:47" pos:end="537:47"><literal type="number" pos:start="537:47" pos:end="537:47">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="539:9" pos:end="551:9">for <control pos:start="539:13" pos:end="539:31">(<init pos:start="539:14" pos:end="539:19"><expr pos:start="539:14" pos:end="539:18"><name pos:start="539:14" pos:end="539:14">i</name> <operator pos:start="539:16" pos:end="539:16">=</operator> <literal type="number" pos:start="539:18" pos:end="539:18">0</literal></expr>;</init> <condition pos:start="539:21" pos:end="539:26"><expr pos:start="539:21" pos:end="539:25"><name pos:start="539:21" pos:end="539:21">i</name> <operator pos:start="539:23" pos:end="539:23">&lt;</operator> <literal type="number" pos:start="539:25" pos:end="539:25">8</literal></expr>;</condition> <incr pos:start="539:28" pos:end="539:30"><expr pos:start="539:28" pos:end="539:30"><name pos:start="539:28" pos:end="539:28">i</name><operator pos:start="539:29" pos:end="539:30">++</operator></expr></incr>)</control> <block pos:start="539:33" pos:end="551:9">{<block_content pos:start="541:13" pos:end="549:30">

            <decl_stmt pos:start="541:13" pos:end="541:32"><decl pos:start="541:13" pos:end="541:31"><type pos:start="541:13" pos:end="541:25"><name pos:start="541:13" pos:end="541:23">DeviceState</name> <modifier pos:start="541:25" pos:end="541:25">*</modifier></type><name pos:start="541:26" pos:end="541:31">eeprom</name></decl>;</decl_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:68"><expr pos:start="543:13" pos:end="543:67"><name pos:start="543:13" pos:end="543:18">eeprom</name> <operator pos:start="543:20" pos:end="543:20">=</operator> <call pos:start="543:22" pos:end="543:67"><name pos:start="543:22" pos:end="543:32">qdev_create</name><argument_list pos:start="543:33" pos:end="543:67">(<argument pos:start="543:34" pos:end="543:50"><expr pos:start="543:34" pos:end="543:50"><operator pos:start="543:34" pos:end="543:34">(</operator><name pos:start="543:35" pos:end="543:42">BusState</name> <operator pos:start="543:44" pos:end="543:44">*</operator><operator pos:start="543:45" pos:end="543:45">)</operator><name pos:start="543:46" pos:end="543:50">smbus</name></expr></argument>, <argument pos:start="543:53" pos:end="543:66"><expr pos:start="543:53" pos:end="543:66"><literal type="string" pos:start="543:53" pos:end="543:66">"smbus-eeprom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="545:13" pos:end="545:61"><expr pos:start="545:13" pos:end="545:60"><call pos:start="545:13" pos:end="545:60"><name pos:start="545:13" pos:end="545:31">qdev_prop_set_uint8</name><argument_list pos:start="545:32" pos:end="545:60">(<argument pos:start="545:33" pos:end="545:38"><expr pos:start="545:33" pos:end="545:38"><name pos:start="545:33" pos:end="545:38">eeprom</name></expr></argument>, <argument pos:start="545:41" pos:end="545:49"><expr pos:start="545:41" pos:end="545:49"><literal type="string" pos:start="545:41" pos:end="545:49">"address"</literal></expr></argument>, <argument pos:start="545:52" pos:end="545:59"><expr pos:start="545:52" pos:end="545:59"><literal type="number" pos:start="545:52" pos:end="545:57">0x50</literal> <operator pos:start="545:57" pos:end="545:57">+</operator> <name pos:start="545:59" pos:end="545:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="547:13" pos:end="547:70"><expr pos:start="547:13" pos:end="547:69"><call pos:start="547:13" pos:end="547:69"><name pos:start="547:13" pos:end="547:29">qdev_prop_set_ptr</name><argument_list pos:start="547:30" pos:end="547:69">(<argument pos:start="547:31" pos:end="547:36"><expr pos:start="547:31" pos:end="547:36"><name pos:start="547:31" pos:end="547:36">eeprom</name></expr></argument>, <argument pos:start="547:39" pos:end="547:44"><expr pos:start="547:39" pos:end="547:44"><literal type="string" pos:start="547:39" pos:end="547:44">"data"</literal></expr></argument>, <argument pos:start="547:47" pos:end="547:68"><expr pos:start="547:47" pos:end="547:68"><name pos:start="547:47" pos:end="547:56">eeprom_buf</name> <operator pos:start="547:58" pos:end="547:58">+</operator> <operator pos:start="547:60" pos:end="547:60">(</operator><name pos:start="547:61" pos:end="547:61">i</name> <operator pos:start="547:63" pos:end="547:63">*</operator> <literal type="number" pos:start="547:65" pos:end="547:67">256</literal><operator pos:start="547:68" pos:end="547:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="549:13" pos:end="549:30"><expr pos:start="549:13" pos:end="549:29"><call pos:start="549:13" pos:end="549:29"><name pos:start="549:13" pos:end="549:21">qdev_init</name><argument_list pos:start="549:22" pos:end="549:29">(<argument pos:start="549:23" pos:end="549:28"><expr pos:start="549:23" pos:end="549:28"><name pos:start="549:23" pos:end="549:28">eeprom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="553:9" pos:end="553:48"><expr pos:start="553:9" pos:end="553:47"><call pos:start="553:9" pos:end="553:47"><name pos:start="553:9" pos:end="553:38">piix4_acpi_system_hot_add_init</name><argument_list pos:start="553:39" pos:end="553:47">(<argument pos:start="553:40" pos:end="553:46"><expr pos:start="553:40" pos:end="553:46"><name pos:start="553:40" pos:end="553:46">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="559:5" pos:end="563:5"><if pos:start="559:5" pos:end="563:5">if <condition pos:start="559:8" pos:end="559:21">(<expr pos:start="559:9" pos:end="559:20"><name pos:start="559:9" pos:end="559:20">i440fx_state</name></expr>)</condition> <block pos:start="559:23" pos:end="563:5">{<block_content pos:start="561:9" pos:end="561:50">

        <expr_stmt pos:start="561:9" pos:end="561:50"><expr pos:start="561:9" pos:end="561:49"><call pos:start="561:9" pos:end="561:49"><name pos:start="561:9" pos:end="561:35">i440fx_init_memory_mappings</name><argument_list pos:start="561:36" pos:end="561:49">(<argument pos:start="561:37" pos:end="561:48"><expr pos:start="561:37" pos:end="561:48"><name pos:start="561:37" pos:end="561:48">i440fx_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="567:5" pos:end="583:5"><if pos:start="567:5" pos:end="583:5">if <condition pos:start="567:8" pos:end="567:20">(<expr pos:start="567:9" pos:end="567:19"><name pos:start="567:9" pos:end="567:19">pci_enabled</name></expr>)</condition> <block pos:start="567:22" pos:end="583:5">{<block_content pos:start="569:9" pos:end="581:9">

	<decl_stmt pos:start="569:9" pos:end="569:20"><decl pos:start="569:9" pos:end="569:19"><type pos:start="569:9" pos:end="569:11"><name pos:start="569:9" pos:end="569:11">int</name></type> <name pos:start="569:13" pos:end="569:19">max_bus</name></decl>;</decl_stmt>

        <decl_stmt pos:start="571:9" pos:end="571:16"><decl pos:start="571:9" pos:end="571:15"><type pos:start="571:9" pos:end="571:11"><name pos:start="571:9" pos:end="571:11">int</name></type> <name pos:start="571:13" pos:end="571:15">bus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="575:9" pos:end="575:45"><expr pos:start="575:9" pos:end="575:44"><name pos:start="575:9" pos:end="575:15">max_bus</name> <operator pos:start="575:17" pos:end="575:17">=</operator> <call pos:start="575:19" pos:end="575:44"><name pos:start="575:19" pos:end="575:35">drive_get_max_bus</name><argument_list pos:start="575:36" pos:end="575:44">(<argument pos:start="575:37" pos:end="575:43"><expr pos:start="575:37" pos:end="575:43"><name pos:start="575:37" pos:end="575:43">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:start="577:9" pos:end="581:9">for <control pos:start="577:13" pos:end="577:44">(<init pos:start="577:14" pos:end="577:21"><expr pos:start="577:14" pos:end="577:20"><name pos:start="577:14" pos:end="577:16">bus</name> <operator pos:start="577:18" pos:end="577:18">=</operator> <literal type="number" pos:start="577:20" pos:end="577:20">0</literal></expr>;</init> <condition pos:start="577:23" pos:end="577:37"><expr pos:start="577:23" pos:end="577:36"><name pos:start="577:23" pos:end="577:25">bus</name> <operator pos:start="577:27" pos:end="577:28">&lt;=</operator> <name pos:start="577:30" pos:end="577:36">max_bus</name></expr>;</condition> <incr pos:start="577:39" pos:end="577:43"><expr pos:start="577:39" pos:end="577:43"><name pos:start="577:39" pos:end="577:41">bus</name><operator pos:start="577:42" pos:end="577:43">++</operator></expr></incr>)</control> <block pos:start="577:46" pos:end="581:9">{<block_content pos:start="579:13" pos:end="579:57">

            <expr_stmt pos:start="579:13" pos:end="579:57"><expr pos:start="579:13" pos:end="579:56"><call pos:start="579:13" pos:end="579:56"><name pos:start="579:13" pos:end="579:29">pci_create_simple</name><argument_list pos:start="579:30" pos:end="579:56">(<argument pos:start="579:31" pos:end="579:37"><expr pos:start="579:31" pos:end="579:37"><name pos:start="579:31" pos:end="579:37">pci_bus</name></expr></argument>, <argument pos:start="579:40" pos:end="579:41"><expr pos:start="579:40" pos:end="579:41"><operator pos:start="579:40" pos:end="579:40">-</operator><literal type="number" pos:start="579:41" pos:end="579:41">1</literal></expr></argument>, <argument pos:start="579:44" pos:end="579:55"><expr pos:start="579:44" pos:end="579:55"><literal type="string" pos:start="579:44" pos:end="579:55">"lsi53c895a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="587:5" pos:end="587:36">/* Add virtio console devices */</comment>

    <if_stmt pos:start="589:5" pos:end="601:5"><if pos:start="589:5" pos:end="601:5">if <condition pos:start="589:8" pos:end="589:20">(<expr pos:start="589:9" pos:end="589:19"><name pos:start="589:9" pos:end="589:19">pci_enabled</name></expr>)</condition> <block pos:start="589:22" pos:end="601:5">{<block_content pos:start="591:9" pos:end="599:9">

        <for pos:start="591:9" pos:end="599:9">for<control pos:start="591:12" pos:end="591:48">(<init pos:start="591:13" pos:end="591:18"><expr pos:start="591:13" pos:end="591:17"><name pos:start="591:13" pos:end="591:13">i</name> <operator pos:start="591:15" pos:end="591:15">=</operator> <literal type="number" pos:start="591:17" pos:end="591:17">0</literal></expr>;</init> <condition pos:start="591:20" pos:end="591:43"><expr pos:start="591:20" pos:end="591:42"><name pos:start="591:20" pos:end="591:20">i</name> <operator pos:start="591:22" pos:end="591:22">&lt;</operator> <name pos:start="591:24" pos:end="591:42">MAX_VIRTIO_CONSOLES</name></expr>;</condition> <incr pos:start="591:45" pos:end="591:47"><expr pos:start="591:45" pos:end="591:47"><name pos:start="591:45" pos:end="591:45">i</name><operator pos:start="591:46" pos:end="591:47">++</operator></expr></incr>)</control> <block pos:start="591:50" pos:end="599:9">{<block_content pos:start="593:13" pos:end="597:13">

            <if_stmt pos:start="593:13" pos:end="597:13"><if pos:start="593:13" pos:end="597:13">if <condition pos:start="593:16" pos:end="593:31">(<expr pos:start="593:17" pos:end="593:30"><name pos:start="593:17" pos:end="593:30"><name pos:start="593:17" pos:end="593:27">virtcon_hds</name><index pos:start="593:28" pos:end="593:30">[<expr pos:start="593:29" pos:end="593:29"><name pos:start="593:29" pos:end="593:29">i</name></expr>]</index></name></expr>)</condition> <block pos:start="593:33" pos:end="597:13">{<block_content pos:start="595:17" pos:end="595:69">

                <expr_stmt pos:start="595:17" pos:end="595:69"><expr pos:start="595:17" pos:end="595:68"><call pos:start="595:17" pos:end="595:68"><name pos:start="595:17" pos:end="595:33">pci_create_simple</name><argument_list pos:start="595:34" pos:end="595:68">(<argument pos:start="595:35" pos:end="595:41"><expr pos:start="595:35" pos:end="595:41"><name pos:start="595:35" pos:end="595:41">pci_bus</name></expr></argument>, <argument pos:start="595:44" pos:end="595:45"><expr pos:start="595:44" pos:end="595:45"><operator pos:start="595:44" pos:end="595:44">-</operator><literal type="number" pos:start="595:45" pos:end="595:45">1</literal></expr></argument>, <argument pos:start="595:48" pos:end="595:67"><expr pos:start="595:48" pos:end="595:67"><literal type="string" pos:start="595:48" pos:end="595:67">"virtio-console-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
