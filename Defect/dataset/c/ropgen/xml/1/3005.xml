<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3005.c" pos:tabs="8"><function pos:start="1:1" pos:end="331:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">abi_ulong</name></type> <name pos:start="1:18" pos:end="1:34">create_elf_tables</name><parameter_list pos:start="1:35" pos:end="7:66">(<parameter pos:start="1:36" pos:end="1:46"><decl pos:start="1:36" pos:end="1:46"><type pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:44">abi_ulong</name></type> <name pos:start="1:46" pos:end="1:46">p</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">argc</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:66"><decl pos:start="1:59" pos:end="1:66"><type pos:start="1:59" pos:end="1:66"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:66">envc</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:54"><decl pos:start="3:36" pos:end="3:54"><type pos:start="3:36" pos:end="3:54"><name pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:41">struct</name> <name pos:start="3:43" pos:end="3:48">elfhdr</name></name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:54">exec</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:58"><decl pos:start="5:36" pos:end="5:58"><type pos:start="5:36" pos:end="5:58"><name pos:start="5:36" pos:end="5:52"><name pos:start="5:36" pos:end="5:41">struct</name> <name pos:start="5:43" pos:end="5:52">image_info</name></name> <modifier pos:start="5:54" pos:end="5:54">*</modifier></type><name pos:start="5:55" pos:end="5:58">info</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:65"><decl pos:start="7:36" pos:end="7:65"><type pos:start="7:36" pos:end="7:65"><name pos:start="7:36" pos:end="7:52"><name pos:start="7:36" pos:end="7:41">struct</name> <name pos:start="7:43" pos:end="7:52">image_info</name></name> <modifier pos:start="7:54" pos:end="7:54">*</modifier></type><name pos:start="7:55" pos:end="7:65">interp_info</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="331:1">{<block_content pos:start="11:5" pos:end="329:14">

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">abi_ulong</name></type> <name pos:start="11:15" pos:end="11:16">sp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">abi_ulong</name></type> <name pos:start="13:15" pos:end="13:20">u_argc</name></decl>, <decl pos:start="13:23" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:23" pos:end="13:28">u_argv</name></decl>, <decl pos:start="13:31" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:31" pos:end="13:36">u_envp</name></decl>, <decl pos:start="13:39" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:39" pos:end="13:44">u_auxv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:13">abi_ulong</name></type> <name pos:start="19:15" pos:end="19:26">u_rand_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:24">k_rand_bytes</name><index pos:start="21:25" pos:end="21:28">[<expr pos:start="21:26" pos:end="21:27"><literal type="number" pos:start="21:26" pos:end="21:27">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:13">abi_ulong</name></type> <name pos:start="23:15" pos:end="23:24">u_platform</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:26">k_platform</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:37"><decl pos:start="27:5" pos:end="27:36"><type pos:start="27:5" pos:end="27:13"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:13">int</name></type> <name pos:start="27:15" pos:end="27:15">n</name> <init pos:start="27:17" pos:end="27:36">= <expr pos:start="27:19" pos:end="27:36"><sizeof pos:start="27:19" pos:end="27:36">sizeof<argument_list pos:start="27:25" pos:end="27:36">(<argument pos:start="27:26" pos:end="27:35"><expr pos:start="27:26" pos:end="27:35"><name pos:start="27:26" pos:end="27:35">elf_addr_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="36:0"><expr pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:6">sp</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <name pos:start="31:10" pos:end="31:10">p</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="35:1" pos:end="35:23">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:23">CONFIG_USE_FDPIC</name></cpp:ifdef>

    <comment type="block" pos:start="37:5" pos:end="37:53">/* Needs to be before we load the env/argc/... */</comment>

    <if_stmt pos:start="39:5" pos:end="60:0"><if pos:start="39:5" pos:end="60:0">if <condition pos:start="39:8" pos:end="39:27">(<expr pos:start="39:9" pos:end="39:26"><call pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:20">elf_is_fdpic</name><argument_list pos:start="39:21" pos:end="39:26">(<argument pos:start="39:22" pos:end="39:25"><expr pos:start="39:22" pos:end="39:25"><name pos:start="39:22" pos:end="39:25">exec</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:29" pos:end="60:0">{<block_content pos:start="43:9" pos:end="55:9">

        <comment type="block" pos:start="41:9" pos:end="41:53">/* Need 4 byte alignment for these structs */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:17"><expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:10">sp</name> <operator pos:start="43:12" pos:end="43:13">&amp;=</operator> <operator pos:start="43:15" pos:end="43:15">~</operator><literal type="number" pos:start="43:16" pos:end="43:16">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:10">sp</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:49"><name pos:start="45:14" pos:end="45:39">loader_build_fdpic_loadmap</name><argument_list pos:start="45:40" pos:end="45:49">(<argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><name pos:start="45:41" pos:end="45:44">info</name></expr></argument>, <argument pos:start="45:47" pos:end="45:48"><expr pos:start="45:47" pos:end="45:48"><name pos:start="45:47" pos:end="45:48">sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:12">info</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:24">other_info</name></name> <operator pos:start="47:26" pos:end="47:26">=</operator> <name pos:start="47:28" pos:end="47:38">interp_info</name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:23">interp_info</name></expr>)</condition> <block pos:start="49:26" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:61">

            <expr_stmt pos:start="51:13" pos:end="51:43"><expr pos:start="51:13" pos:end="51:42"><name pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:23">interp_info</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:35">other_info</name></name> <operator pos:start="51:37" pos:end="51:37">=</operator> <name pos:start="51:39" pos:end="51:42">info</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:61"><expr pos:start="53:13" pos:end="53:60"><name pos:start="53:13" pos:end="53:14">sp</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:60"><name pos:start="53:18" pos:end="53:43">loader_build_fdpic_loadmap</name><argument_list pos:start="53:44" pos:end="53:60">(<argument pos:start="53:45" pos:end="53:55"><expr pos:start="53:45" pos:end="53:55"><name pos:start="53:45" pos:end="53:55">interp_info</name></expr></argument>, <argument pos:start="53:58" pos:end="53:59"><expr pos:start="53:58" pos:end="53:59"><name pos:start="53:58" pos:end="53:59">sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="63:5" pos:end="63:19"><expr pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:14">u_platform</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:14">k_platform</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:29">ELF_PLATFORM</name></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="91:5"><if pos:start="67:5" pos:end="91:5">if <condition pos:start="67:8" pos:end="67:19">(<expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:18">k_platform</name></expr>)</condition> <block pos:start="67:21" pos:end="91:5">{<block_content pos:start="69:9" pos:end="89:9">

        <decl_stmt pos:start="69:9" pos:end="69:44"><decl pos:start="69:9" pos:end="69:43"><type pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:14">size_t</name></type> <name pos:start="69:16" pos:end="69:18">len</name> <init pos:start="69:20" pos:end="69:43">= <expr pos:start="69:22" pos:end="69:43"><call pos:start="69:22" pos:end="69:39"><name pos:start="69:22" pos:end="69:27">strlen</name><argument_list pos:start="69:28" pos:end="69:39">(<argument pos:start="69:29" pos:end="69:38"><expr pos:start="69:29" pos:end="69:38"><name pos:start="69:29" pos:end="69:38">k_platform</name></expr></argument>)</argument_list></call> <operator pos:start="69:41" pos:end="69:41">+</operator> <literal type="number" pos:start="69:43" pos:end="69:43">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="71:9" pos:end="89:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:29">(<expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:28">STACK_GROWS_DOWN</name></expr>)</condition> <block pos:start="71:31" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:50">

            <expr_stmt pos:start="73:13" pos:end="73:43"><expr pos:start="73:13" pos:end="73:42"><name pos:start="73:13" pos:end="73:14">sp</name> <operator pos:start="73:16" pos:end="73:17">-=</operator> <operator pos:start="73:19" pos:end="73:19">(</operator><name pos:start="73:20" pos:end="73:22">len</name> <operator pos:start="73:24" pos:end="73:24">+</operator> <name pos:start="73:26" pos:end="73:26">n</name> <operator pos:start="73:28" pos:end="73:28">-</operator> <literal type="number" pos:start="73:30" pos:end="73:30">1</literal><operator pos:start="73:31" pos:end="73:31">)</operator> <operator pos:start="73:33" pos:end="73:33">&amp;</operator> <operator pos:start="73:35" pos:end="73:35">~</operator><operator pos:start="73:36" pos:end="73:36">(</operator><name pos:start="73:37" pos:end="73:37">n</name> <operator pos:start="73:39" pos:end="73:39">-</operator> <literal type="number" pos:start="73:41" pos:end="73:41">1</literal><operator pos:start="73:42" pos:end="73:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:28"><expr pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:22">u_platform</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:27">sp</name></expr>;</expr_stmt>

            <comment type="block" pos:start="77:13" pos:end="77:78">/* FIXME - check return value of memcpy_to_target() for failure */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:50"><expr pos:start="79:13" pos:end="79:49"><call pos:start="79:13" pos:end="79:49"><name pos:start="79:13" pos:end="79:28">memcpy_to_target</name><argument_list pos:start="79:29" pos:end="79:49">(<argument pos:start="79:30" pos:end="79:31"><expr pos:start="79:30" pos:end="79:31"><name pos:start="79:30" pos:end="79:31">sp</name></expr></argument>, <argument pos:start="79:34" pos:end="79:43"><expr pos:start="79:34" pos:end="79:43"><name pos:start="79:34" pos:end="79:43">k_platform</name></expr></argument>, <argument pos:start="79:46" pos:end="79:48"><expr pos:start="79:46" pos:end="79:48"><name pos:start="79:46" pos:end="79:48">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="89:9">else <block pos:start="81:16" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:26">

            <expr_stmt pos:start="83:13" pos:end="83:50"><expr pos:start="83:13" pos:end="83:49"><call pos:start="83:13" pos:end="83:49"><name pos:start="83:13" pos:end="83:28">memcpy_to_target</name><argument_list pos:start="83:29" pos:end="83:49">(<argument pos:start="83:30" pos:end="83:31"><expr pos:start="83:30" pos:end="83:31"><name pos:start="83:30" pos:end="83:31">sp</name></expr></argument>, <argument pos:start="83:34" pos:end="83:43"><expr pos:start="83:34" pos:end="83:43"><name pos:start="83:34" pos:end="83:43">k_platform</name></expr></argument>, <argument pos:start="83:46" pos:end="83:48"><expr pos:start="83:46" pos:end="83:48"><name pos:start="83:46" pos:end="83:48">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:28"><expr pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:22">u_platform</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:27">sp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:26"><expr pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:14">sp</name> <operator pos:start="87:16" pos:end="87:17">+=</operator> <name pos:start="87:19" pos:end="87:21">len</name> <operator pos:start="87:23" pos:end="87:23">+</operator> <literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="99:7">/* Provide 16 byte alignment for the PRNG, and basic alignment for

     * the argv and envp pointers.

     */</comment>

    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:25">(<expr pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:24">STACK_GROWS_DOWN</name></expr>)</condition> <block pos:start="101:27" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:37">

        <expr_stmt pos:start="103:9" pos:end="103:37"><expr pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:10">sp</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <call pos:start="103:14" pos:end="103:36"><name pos:start="103:14" pos:end="103:28">QEMU_ALIGN_DOWN</name><argument_list pos:start="103:29" pos:end="103:36">(<argument pos:start="103:30" pos:end="103:31"><expr pos:start="103:30" pos:end="103:31"><name pos:start="103:30" pos:end="103:31">sp</name></expr></argument>, <argument pos:start="103:34" pos:end="103:35"><expr pos:start="103:34" pos:end="103:35"><literal type="number" pos:start="103:34" pos:end="103:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="109:5">else <block pos:start="105:12" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:35">

        <expr_stmt pos:start="107:9" pos:end="107:35"><expr pos:start="107:9" pos:end="107:34"><name pos:start="107:9" pos:end="107:10">sp</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <call pos:start="107:14" pos:end="107:34"><name pos:start="107:14" pos:end="107:26">QEMU_ALIGN_UP</name><argument_list pos:start="107:27" pos:end="107:34">(<argument pos:start="107:28" pos:end="107:29"><expr pos:start="107:28" pos:end="107:29"><name pos:start="107:28" pos:end="107:29">sp</name></expr></argument>, <argument pos:start="107:32" pos:end="107:33"><expr pos:start="107:32" pos:end="107:33"><literal type="number" pos:start="107:32" pos:end="107:33">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="119:7">/*

     * Generate 16 random bytes for userspace PRNG seeding (not

     * cryptically secure but it's not the aim of QEMU).

     */</comment>

    <for pos:start="121:5" pos:end="125:5">for <control pos:start="121:9" pos:end="121:28">(<init pos:start="121:10" pos:end="121:15"><expr pos:start="121:10" pos:end="121:14"><name pos:start="121:10" pos:end="121:10">i</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <literal type="number" pos:start="121:14" pos:end="121:14">0</literal></expr>;</init> <condition pos:start="121:17" pos:end="121:23"><expr pos:start="121:17" pos:end="121:22"><name pos:start="121:17" pos:end="121:17">i</name> <operator pos:start="121:19" pos:end="121:19">&lt;</operator> <literal type="number" pos:start="121:21" pos:end="121:22">16</literal></expr>;</condition> <incr pos:start="121:25" pos:end="121:27"><expr pos:start="121:25" pos:end="121:27"><name pos:start="121:25" pos:end="121:25">i</name><operator pos:start="121:26" pos:end="121:27">++</operator></expr></incr>)</control> <block pos:start="121:30" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:33">

        <expr_stmt pos:start="123:9" pos:end="123:33"><expr pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:20">k_rand_bytes</name><index pos:start="123:21" pos:end="123:23">[<expr pos:start="123:22" pos:end="123:22"><name pos:start="123:22" pos:end="123:22">i</name></expr>]</index></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <call pos:start="123:27" pos:end="123:32"><name pos:start="123:27" pos:end="123:30">rand</name><argument_list pos:start="123:31" pos:end="123:32">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="127:5" pos:end="145:5"><if pos:start="127:5" pos:end="137:5">if <condition pos:start="127:8" pos:end="127:25">(<expr pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:24">STACK_GROWS_DOWN</name></expr>)</condition> <block pos:start="127:27" pos:end="137:5">{<block_content pos:start="129:9" pos:end="135:47">

        <expr_stmt pos:start="129:9" pos:end="129:17"><expr pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:10">sp</name> <operator pos:start="129:12" pos:end="129:13">-=</operator> <literal type="number" pos:start="129:15" pos:end="129:16">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:26"><expr pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:20">u_rand_bytes</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <name pos:start="131:24" pos:end="131:25">sp</name></expr>;</expr_stmt>

        <comment type="block" pos:start="133:9" pos:end="133:74">/* FIXME - check return value of memcpy_to_target() for failure */</comment>

        <expr_stmt pos:start="135:9" pos:end="135:47"><expr pos:start="135:9" pos:end="135:46"><call pos:start="135:9" pos:end="135:46"><name pos:start="135:9" pos:end="135:24">memcpy_to_target</name><argument_list pos:start="135:25" pos:end="135:46">(<argument pos:start="135:26" pos:end="135:27"><expr pos:start="135:26" pos:end="135:27"><name pos:start="135:26" pos:end="135:27">sp</name></expr></argument>, <argument pos:start="135:30" pos:end="135:41"><expr pos:start="135:30" pos:end="135:41"><name pos:start="135:30" pos:end="135:41">k_rand_bytes</name></expr></argument>, <argument pos:start="135:44" pos:end="135:45"><expr pos:start="135:44" pos:end="135:45"><literal type="number" pos:start="135:44" pos:end="135:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="145:5">else <block pos:start="137:12" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:17">

        <expr_stmt pos:start="139:9" pos:end="139:47"><expr pos:start="139:9" pos:end="139:46"><call pos:start="139:9" pos:end="139:46"><name pos:start="139:9" pos:end="139:24">memcpy_to_target</name><argument_list pos:start="139:25" pos:end="139:46">(<argument pos:start="139:26" pos:end="139:27"><expr pos:start="139:26" pos:end="139:27"><name pos:start="139:26" pos:end="139:27">sp</name></expr></argument>, <argument pos:start="139:30" pos:end="139:41"><expr pos:start="139:30" pos:end="139:41"><name pos:start="139:30" pos:end="139:41">k_rand_bytes</name></expr></argument>, <argument pos:start="139:44" pos:end="139:45"><expr pos:start="139:44" pos:end="139:45"><literal type="number" pos:start="139:44" pos:end="139:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:26"><expr pos:start="141:9" pos:end="141:25"><name pos:start="141:9" pos:end="141:20">u_rand_bytes</name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:25">sp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:17"><expr pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:10">sp</name> <operator pos:start="143:12" pos:end="143:13">+=</operator> <literal type="number" pos:start="143:15" pos:end="143:16">16</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:34"><expr pos:start="149:5" pos:end="149:33"><name pos:start="149:5" pos:end="149:8">size</name> <operator pos:start="149:10" pos:end="149:10">=</operator> <operator pos:start="149:12" pos:end="149:12">(</operator><name pos:start="149:13" pos:end="149:24">DLINFO_ITEMS</name> <operator pos:start="149:26" pos:end="149:26">+</operator> <literal type="number" pos:start="149:28" pos:end="149:28">1</literal><operator pos:start="149:29" pos:end="149:29">)</operator> <operator pos:start="149:31" pos:end="149:31">*</operator> <literal type="number" pos:start="149:33" pos:end="149:33">2</literal></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="156:0"><if pos:start="151:5" pos:end="156:0">if <condition pos:start="151:8" pos:end="151:19">(<expr pos:start="151:9" pos:end="151:18"><name pos:start="151:9" pos:end="151:18">k_platform</name></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="156:0"><block_content pos:start="153:9" pos:end="156:0">

        <expr_stmt pos:start="153:9" pos:end="156:0"><expr pos:start="153:9" pos:end="153:17"><name pos:start="153:9" pos:end="153:12">size</name> <operator pos:start="153:14" pos:end="153:15">+=</operator> <literal type="number" pos:start="153:17" pos:end="153:17">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="155:1" pos:end="155:24">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:24">DLINFO_ARCH_ITEMS</name></cpp:ifdef>

    <expr_stmt pos:start="157:5" pos:end="162:0"><expr pos:start="157:5" pos:end="157:33"><name pos:start="157:5" pos:end="157:8">size</name> <operator pos:start="157:10" pos:end="157:11">+=</operator> <name pos:start="157:13" pos:end="157:29">DLINFO_ARCH_ITEMS</name> <operator pos:start="157:31" pos:end="157:31">*</operator> <literal type="number" pos:start="157:33" pos:end="157:33">2</literal></expr>;</expr_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="161:1" pos:end="161:17">#<cpp:directive pos:start="161:2" pos:end="161:6">ifdef</cpp:directive> <name pos:start="161:8" pos:end="161:17">ELF_HWCAP2</name></cpp:ifdef>

    <expr_stmt pos:start="163:5" pos:end="166:0"><expr pos:start="163:5" pos:end="163:13"><name pos:start="163:5" pos:end="163:8">size</name> <operator pos:start="163:10" pos:end="163:11">+=</operator> <literal type="number" pos:start="163:13" pos:end="163:13">2</literal></expr>;</expr_stmt>

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="167:5" pos:end="167:28"><expr pos:start="167:5" pos:end="167:27"><name pos:start="167:5" pos:end="167:8">size</name> <operator pos:start="167:10" pos:end="167:11">+=</operator> <name pos:start="167:13" pos:end="167:16">envc</name> <operator pos:start="167:18" pos:end="167:18">+</operator> <name pos:start="167:20" pos:end="167:23">argc</name> <operator pos:start="167:25" pos:end="167:25">+</operator> <literal type="number" pos:start="167:27" pos:end="167:27">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:14"><expr pos:start="169:5" pos:end="169:13"><name pos:start="169:5" pos:end="169:8">size</name> <operator pos:start="169:10" pos:end="169:11">+=</operator> <literal type="number" pos:start="169:13" pos:end="169:13">1</literal></expr>;</expr_stmt>  <comment type="block" pos:start="169:17" pos:end="169:33">/* argc itself */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:14"><expr pos:start="171:5" pos:end="171:13"><name pos:start="171:5" pos:end="171:8">size</name> <operator pos:start="171:10" pos:end="171:11">*=</operator> <name pos:start="171:13" pos:end="171:13">n</name></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:69">/* Allocate space and finalize stack alignment for entry now.  */</comment>

    <if_stmt pos:start="177:5" pos:end="189:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="177:25">(<expr pos:start="177:9" pos:end="177:24"><name pos:start="177:9" pos:end="177:24">STACK_GROWS_DOWN</name></expr>)</condition> <block pos:start="177:27" pos:end="183:5">{<block_content pos:start="179:9" pos:end="181:20">

        <expr_stmt pos:start="179:9" pos:end="179:61"><expr pos:start="179:9" pos:end="179:60"><name pos:start="179:9" pos:end="179:14">u_argc</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <call pos:start="179:18" pos:end="179:60"><name pos:start="179:18" pos:end="179:32">QEMU_ALIGN_DOWN</name><argument_list pos:start="179:33" pos:end="179:60">(<argument pos:start="179:34" pos:end="179:42"><expr pos:start="179:34" pos:end="179:42"><name pos:start="179:34" pos:end="179:35">sp</name> <operator pos:start="179:37" pos:end="179:37">-</operator> <name pos:start="179:39" pos:end="179:42">size</name></expr></argument>, <argument pos:start="179:45" pos:end="179:59"><expr pos:start="179:45" pos:end="179:59"><name pos:start="179:45" pos:end="179:59">STACK_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:20"><expr pos:start="181:9" pos:end="181:19"><name pos:start="181:9" pos:end="181:10">sp</name> <operator pos:start="181:12" pos:end="181:12">=</operator> <name pos:start="181:14" pos:end="181:19">u_argc</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="189:5">else <block pos:start="183:12" pos:end="189:5">{<block_content pos:start="185:9" pos:end="187:55">

        <expr_stmt pos:start="185:9" pos:end="185:20"><expr pos:start="185:9" pos:end="185:19"><name pos:start="185:9" pos:end="185:14">u_argc</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <name pos:start="185:18" pos:end="185:19">sp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:55"><expr pos:start="187:9" pos:end="187:54"><name pos:start="187:9" pos:end="187:10">sp</name> <operator pos:start="187:12" pos:end="187:12">=</operator> <call pos:start="187:14" pos:end="187:54"><name pos:start="187:14" pos:end="187:26">QEMU_ALIGN_UP</name><argument_list pos:start="187:27" pos:end="187:54">(<argument pos:start="187:28" pos:end="187:36"><expr pos:start="187:28" pos:end="187:36"><name pos:start="187:28" pos:end="187:29">sp</name> <operator pos:start="187:31" pos:end="187:31">+</operator> <name pos:start="187:33" pos:end="187:36">size</name></expr></argument>, <argument pos:start="187:39" pos:end="187:53"><expr pos:start="187:39" pos:end="187:53"><name pos:start="187:39" pos:end="187:53">STACK_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:24"><expr pos:start="193:5" pos:end="193:23"><name pos:start="193:5" pos:end="193:10">u_argv</name> <operator pos:start="193:12" pos:end="193:12">=</operator> <name pos:start="193:14" pos:end="193:19">u_argc</name> <operator pos:start="193:21" pos:end="193:21">+</operator> <name pos:start="193:23" pos:end="193:23">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:37"><expr pos:start="195:5" pos:end="195:36"><name pos:start="195:5" pos:end="195:10">u_envp</name> <operator pos:start="195:12" pos:end="195:12">=</operator> <name pos:start="195:14" pos:end="195:19">u_argv</name> <operator pos:start="195:21" pos:end="195:21">+</operator> <operator pos:start="195:23" pos:end="195:23">(</operator><name pos:start="195:24" pos:end="195:27">argc</name> <operator pos:start="195:29" pos:end="195:29">+</operator> <literal type="number" pos:start="195:31" pos:end="195:31">1</literal><operator pos:start="195:32" pos:end="195:32">)</operator> <operator pos:start="195:34" pos:end="195:34">*</operator> <name pos:start="195:36" pos:end="195:36">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:37"><expr pos:start="197:5" pos:end="197:36"><name pos:start="197:5" pos:end="197:10">u_auxv</name> <operator pos:start="197:12" pos:end="197:12">=</operator> <name pos:start="197:14" pos:end="197:19">u_envp</name> <operator pos:start="197:21" pos:end="197:21">+</operator> <operator pos:start="197:23" pos:end="197:23">(</operator><name pos:start="197:24" pos:end="197:27">envc</name> <operator pos:start="197:29" pos:end="197:29">+</operator> <literal type="number" pos:start="197:31" pos:end="197:31">1</literal><operator pos:start="197:32" pos:end="197:32">)</operator> <operator pos:start="197:34" pos:end="197:34">*</operator> <name pos:start="197:36" pos:end="197:36">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:30"><expr pos:start="199:5" pos:end="199:29"><name pos:start="199:5" pos:end="199:20"><name pos:start="199:5" pos:end="199:8">info</name><operator pos:start="199:9" pos:end="199:10">-&gt;</operator><name pos:start="199:11" pos:end="199:20">saved_auxv</name></name> <operator pos:start="199:22" pos:end="199:22">=</operator> <name pos:start="199:24" pos:end="199:29">u_auxv</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:29"><expr pos:start="201:5" pos:end="201:28"><name pos:start="201:5" pos:end="201:19"><name pos:start="201:5" pos:end="201:8">info</name><operator pos:start="201:9" pos:end="201:10">-&gt;</operator><name pos:start="201:11" pos:end="201:19">arg_start</name></name> <operator pos:start="201:21" pos:end="201:21">=</operator> <name pos:start="201:23" pos:end="201:28">u_argv</name></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="226:0"><expr pos:start="203:5" pos:end="203:37"><name pos:start="203:5" pos:end="203:17"><name pos:start="203:5" pos:end="203:8">info</name><operator pos:start="203:9" pos:end="203:10">-&gt;</operator><name pos:start="203:11" pos:end="203:17">arg_end</name></name> <operator pos:start="203:19" pos:end="203:19">=</operator> <name pos:start="203:21" pos:end="203:26">u_argv</name> <operator pos:start="203:28" pos:end="203:28">+</operator> <name pos:start="203:30" pos:end="203:33">argc</name> <operator pos:start="203:35" pos:end="203:35">*</operator> <name pos:start="203:37" pos:end="203:37">n</name></expr>;</expr_stmt>



    <comment type="block" pos:start="207:5" pos:end="211:7">/* This is correct because Linux defines

     * elf_addr_t as Elf32_Off / Elf64_Off

     */</comment>

<cpp:define pos:start="213:1" pos:end="219:14">#<cpp:directive pos:start="213:2" pos:end="213:7">define</cpp:directive> <cpp:macro pos:start="213:9" pos:end="213:28"><name pos:start="213:9" pos:end="213:19">NEW_AUX_ENT</name><parameter_list pos:start="213:20" pos:end="213:28">(<parameter pos:start="213:21" pos:end="213:22"><type pos:start="213:21" pos:end="213:22"><name pos:start="213:21" pos:end="213:22">id</name></type></parameter>, <parameter pos:start="213:25" pos:end="213:27"><type pos:start="213:25" pos:end="213:27"><name pos:start="213:25" pos:end="213:27">val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="213:30" pos:end="219:14">do {               \

        put_user_ual(id, u_auxv);  u_auxv += n; \

        put_user_ual(val, u_auxv); u_auxv += n; \

    } while(0)</cpp:value></cpp:define>



    <comment type="block" pos:start="223:5" pos:end="223:59">/* There must be exactly DLINFO_ITEMS entries here.  */</comment>

<cpp:ifdef pos:start="225:1" pos:end="225:18">#<cpp:directive pos:start="225:2" pos:end="225:6">ifdef</cpp:directive> <name pos:start="225:8" pos:end="225:18">ARCH_DLINFO</name></cpp:ifdef>

    <comment type="block" pos:start="227:5" pos:end="233:7">/*

     * ARCH_DLINFO must come first so platform specific code can enforce

     * special alignment requirements on the AUXV if necessary (eg. PPC).

     */</comment>

    <expr_stmt pos:start="235:5" pos:end="238:0"><expr pos:start="235:5" pos:end="235:15"><name pos:start="235:5" pos:end="235:15">ARCH_DLINFO</name></expr>;</expr_stmt>

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="239:5" pos:end="239:71"><expr pos:start="239:5" pos:end="239:70"><call pos:start="239:5" pos:end="239:70"><name pos:start="239:5" pos:end="239:15">NEW_AUX_ENT</name><argument_list pos:start="239:16" pos:end="239:70">(<argument pos:start="239:17" pos:end="239:23"><expr pos:start="239:17" pos:end="239:23"><name pos:start="239:17" pos:end="239:23">AT_PHDR</name></expr></argument>, <argument pos:start="239:26" pos:end="239:69"><expr pos:start="239:26" pos:end="239:69"><operator pos:start="239:26" pos:end="239:26">(</operator><name pos:start="239:27" pos:end="239:35">abi_ulong</name><operator pos:start="239:36" pos:end="239:36">)</operator><operator pos:start="239:37" pos:end="239:37">(</operator><name pos:start="239:38" pos:end="239:52"><name pos:start="239:38" pos:end="239:41">info</name><operator pos:start="239:42" pos:end="239:43">-&gt;</operator><name pos:start="239:44" pos:end="239:52">load_addr</name></name> <operator pos:start="239:54" pos:end="239:54">+</operator> <name pos:start="239:56" pos:end="239:68"><name pos:start="239:56" pos:end="239:59">exec</name><operator pos:start="239:60" pos:end="239:61">-&gt;</operator><name pos:start="239:62" pos:end="239:68">e_phoff</name></name><operator pos:start="239:69" pos:end="239:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:65"><expr pos:start="241:5" pos:end="241:64"><call pos:start="241:5" pos:end="241:64"><name pos:start="241:5" pos:end="241:15">NEW_AUX_ENT</name><argument_list pos:start="241:16" pos:end="241:64">(<argument pos:start="241:17" pos:end="241:24"><expr pos:start="241:17" pos:end="241:24"><name pos:start="241:17" pos:end="241:24">AT_PHENT</name></expr></argument>, <argument pos:start="241:27" pos:end="241:63"><expr pos:start="241:27" pos:end="241:63"><operator pos:start="241:27" pos:end="241:27">(</operator><name pos:start="241:28" pos:end="241:36">abi_ulong</name><operator pos:start="241:37" pos:end="241:37">)</operator><operator pos:start="241:38" pos:end="241:38">(</operator><sizeof pos:start="241:39" pos:end="241:62">sizeof <argument_list pos:start="241:46" pos:end="241:62">(<argument pos:start="241:47" pos:end="241:61"><expr pos:start="241:47" pos:end="241:61">struct <name pos:start="241:54" pos:end="241:61">elf_phdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="241:63" pos:end="241:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:54"><expr pos:start="243:5" pos:end="243:53"><call pos:start="243:5" pos:end="243:53"><name pos:start="243:5" pos:end="243:15">NEW_AUX_ENT</name><argument_list pos:start="243:16" pos:end="243:53">(<argument pos:start="243:17" pos:end="243:24"><expr pos:start="243:17" pos:end="243:24"><name pos:start="243:17" pos:end="243:24">AT_PHNUM</name></expr></argument>, <argument pos:start="243:27" pos:end="243:52"><expr pos:start="243:27" pos:end="243:52"><operator pos:start="243:27" pos:end="243:27">(</operator><name pos:start="243:28" pos:end="243:36">abi_ulong</name><operator pos:start="243:37" pos:end="243:37">)</operator><operator pos:start="243:38" pos:end="243:38">(</operator><name pos:start="243:39" pos:end="243:51"><name pos:start="243:39" pos:end="243:42">exec</name><operator pos:start="243:43" pos:end="243:44">-&gt;</operator><name pos:start="243:45" pos:end="243:51">e_phnum</name></name><operator pos:start="243:52" pos:end="243:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:78"><expr pos:start="245:5" pos:end="245:77"><call pos:start="245:5" pos:end="245:77"><name pos:start="245:5" pos:end="245:15">NEW_AUX_ENT</name><argument_list pos:start="245:16" pos:end="245:77">(<argument pos:start="245:17" pos:end="245:25"><expr pos:start="245:17" pos:end="245:25"><name pos:start="245:17" pos:end="245:25">AT_PAGESZ</name></expr></argument>, <argument pos:start="245:28" pos:end="245:76"><expr pos:start="245:28" pos:end="245:76"><operator pos:start="245:28" pos:end="245:28">(</operator><name pos:start="245:29" pos:end="245:37">abi_ulong</name><operator pos:start="245:38" pos:end="245:38">)</operator><operator pos:start="245:39" pos:end="245:39">(</operator><call pos:start="245:40" pos:end="245:75"><name pos:start="245:40" pos:end="245:42">MAX</name><argument_list pos:start="245:43" pos:end="245:75">(<argument pos:start="245:44" pos:end="245:59"><expr pos:start="245:44" pos:end="245:59"><name pos:start="245:44" pos:end="245:59">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="245:62" pos:end="245:74"><expr pos:start="245:62" pos:end="245:74"><call pos:start="245:62" pos:end="245:74"><name pos:start="245:62" pos:end="245:72">getpagesize</name><argument_list pos:start="245:73" pos:end="245:74">()</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="245:76" pos:end="245:76">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:80"><expr pos:start="247:5" pos:end="247:79"><call pos:start="247:5" pos:end="247:79"><name pos:start="247:5" pos:end="247:15">NEW_AUX_ENT</name><argument_list pos:start="247:16" pos:end="247:79">(<argument pos:start="247:17" pos:end="247:23"><expr pos:start="247:17" pos:end="247:23"><name pos:start="247:17" pos:end="247:23">AT_BASE</name></expr></argument>, <argument pos:start="247:26" pos:end="247:78"><expr pos:start="247:26" pos:end="247:78"><operator pos:start="247:26" pos:end="247:26">(</operator><name pos:start="247:27" pos:end="247:35">abi_ulong</name><operator pos:start="247:36" pos:end="247:36">)</operator><operator pos:start="247:37" pos:end="247:37">(</operator><ternary pos:start="247:38" pos:end="247:77"><condition pos:start="247:38" pos:end="247:50"><expr pos:start="247:38" pos:end="247:48"><name pos:start="247:38" pos:end="247:48">interp_info</name></expr> ?</condition><then pos:start="247:52" pos:end="247:73"> <expr pos:start="247:52" pos:end="247:73"><name pos:start="247:52" pos:end="247:73"><name pos:start="247:52" pos:end="247:62">interp_info</name><operator pos:start="247:63" pos:end="247:64">-&gt;</operator><name pos:start="247:65" pos:end="247:73">load_addr</name></name></expr> </then><else pos:start="247:75" pos:end="247:77">: <expr pos:start="247:77" pos:end="247:77"><literal type="number" pos:start="247:77" pos:end="247:77">0</literal></expr></else></ternary><operator pos:start="247:78" pos:end="247:78">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:40"><expr pos:start="249:5" pos:end="249:39"><call pos:start="249:5" pos:end="249:39"><name pos:start="249:5" pos:end="249:15">NEW_AUX_ENT</name><argument_list pos:start="249:16" pos:end="249:39">(<argument pos:start="249:17" pos:end="249:24"><expr pos:start="249:17" pos:end="249:24"><name pos:start="249:17" pos:end="249:24">AT_FLAGS</name></expr></argument>, <argument pos:start="249:27" pos:end="249:38"><expr pos:start="249:27" pos:end="249:38"><operator pos:start="249:27" pos:end="249:27">(</operator><name pos:start="249:28" pos:end="249:36">abi_ulong</name><operator pos:start="249:37" pos:end="249:37">)</operator><literal type="number" pos:start="249:38" pos:end="249:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:39"><expr pos:start="251:5" pos:end="251:38"><call pos:start="251:5" pos:end="251:38"><name pos:start="251:5" pos:end="251:15">NEW_AUX_ENT</name><argument_list pos:start="251:16" pos:end="251:38">(<argument pos:start="251:17" pos:end="251:24"><expr pos:start="251:17" pos:end="251:24"><name pos:start="251:17" pos:end="251:24">AT_ENTRY</name></expr></argument>, <argument pos:start="251:27" pos:end="251:37"><expr pos:start="251:27" pos:end="251:37"><name pos:start="251:27" pos:end="251:37"><name pos:start="251:27" pos:end="251:30">info</name><operator pos:start="251:31" pos:end="251:32">-&gt;</operator><name pos:start="251:33" pos:end="251:37">entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:46"><expr pos:start="253:5" pos:end="253:45"><call pos:start="253:5" pos:end="253:45"><name pos:start="253:5" pos:end="253:15">NEW_AUX_ENT</name><argument_list pos:start="253:16" pos:end="253:45">(<argument pos:start="253:17" pos:end="253:22"><expr pos:start="253:17" pos:end="253:22"><name pos:start="253:17" pos:end="253:22">AT_UID</name></expr></argument>, <argument pos:start="253:25" pos:end="253:44"><expr pos:start="253:25" pos:end="253:44"><operator pos:start="253:25" pos:end="253:25">(</operator><name pos:start="253:26" pos:end="253:34">abi_ulong</name><operator pos:start="253:35" pos:end="253:35">)</operator> <call pos:start="253:37" pos:end="253:44"><name pos:start="253:37" pos:end="253:42">getuid</name><argument_list pos:start="253:43" pos:end="253:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:48"><expr pos:start="255:5" pos:end="255:47"><call pos:start="255:5" pos:end="255:47"><name pos:start="255:5" pos:end="255:15">NEW_AUX_ENT</name><argument_list pos:start="255:16" pos:end="255:47">(<argument pos:start="255:17" pos:end="255:23"><expr pos:start="255:17" pos:end="255:23"><name pos:start="255:17" pos:end="255:23">AT_EUID</name></expr></argument>, <argument pos:start="255:26" pos:end="255:46"><expr pos:start="255:26" pos:end="255:46"><operator pos:start="255:26" pos:end="255:26">(</operator><name pos:start="255:27" pos:end="255:35">abi_ulong</name><operator pos:start="255:36" pos:end="255:36">)</operator> <call pos:start="255:38" pos:end="255:46"><name pos:start="255:38" pos:end="255:44">geteuid</name><argument_list pos:start="255:45" pos:end="255:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:46"><expr pos:start="257:5" pos:end="257:45"><call pos:start="257:5" pos:end="257:45"><name pos:start="257:5" pos:end="257:15">NEW_AUX_ENT</name><argument_list pos:start="257:16" pos:end="257:45">(<argument pos:start="257:17" pos:end="257:22"><expr pos:start="257:17" pos:end="257:22"><name pos:start="257:17" pos:end="257:22">AT_GID</name></expr></argument>, <argument pos:start="257:25" pos:end="257:44"><expr pos:start="257:25" pos:end="257:44"><operator pos:start="257:25" pos:end="257:25">(</operator><name pos:start="257:26" pos:end="257:34">abi_ulong</name><operator pos:start="257:35" pos:end="257:35">)</operator> <call pos:start="257:37" pos:end="257:44"><name pos:start="257:37" pos:end="257:42">getgid</name><argument_list pos:start="257:43" pos:end="257:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:48"><expr pos:start="259:5" pos:end="259:47"><call pos:start="259:5" pos:end="259:47"><name pos:start="259:5" pos:end="259:15">NEW_AUX_ENT</name><argument_list pos:start="259:16" pos:end="259:47">(<argument pos:start="259:17" pos:end="259:23"><expr pos:start="259:17" pos:end="259:23"><name pos:start="259:17" pos:end="259:23">AT_EGID</name></expr></argument>, <argument pos:start="259:26" pos:end="259:46"><expr pos:start="259:26" pos:end="259:46"><operator pos:start="259:26" pos:end="259:26">(</operator><name pos:start="259:27" pos:end="259:35">abi_ulong</name><operator pos:start="259:36" pos:end="259:36">)</operator> <call pos:start="259:38" pos:end="259:46"><name pos:start="259:38" pos:end="259:44">getegid</name><argument_list pos:start="259:45" pos:end="259:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:49"><expr pos:start="261:5" pos:end="261:48"><call pos:start="261:5" pos:end="261:48"><name pos:start="261:5" pos:end="261:15">NEW_AUX_ENT</name><argument_list pos:start="261:16" pos:end="261:48">(<argument pos:start="261:17" pos:end="261:24"><expr pos:start="261:17" pos:end="261:24"><name pos:start="261:17" pos:end="261:24">AT_HWCAP</name></expr></argument>, <argument pos:start="261:27" pos:end="261:47"><expr pos:start="261:27" pos:end="261:47"><operator pos:start="261:27" pos:end="261:27">(</operator><name pos:start="261:28" pos:end="261:36">abi_ulong</name><operator pos:start="261:37" pos:end="261:37">)</operator> <name pos:start="261:39" pos:end="261:47">ELF_HWCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:61"><expr pos:start="263:5" pos:end="263:60"><call pos:start="263:5" pos:end="263:60"><name pos:start="263:5" pos:end="263:15">NEW_AUX_ENT</name><argument_list pos:start="263:16" pos:end="263:60">(<argument pos:start="263:17" pos:end="263:25"><expr pos:start="263:17" pos:end="263:25"><name pos:start="263:17" pos:end="263:25">AT_CLKTCK</name></expr></argument>, <argument pos:start="263:28" pos:end="263:59"><expr pos:start="263:28" pos:end="263:59"><operator pos:start="263:28" pos:end="263:28">(</operator><name pos:start="263:29" pos:end="263:37">abi_ulong</name><operator pos:start="263:38" pos:end="263:38">)</operator> <call pos:start="263:40" pos:end="263:59"><name pos:start="263:40" pos:end="263:46">sysconf</name><argument_list pos:start="263:47" pos:end="263:59">(<argument pos:start="263:48" pos:end="263:58"><expr pos:start="263:48" pos:end="263:58"><name pos:start="263:48" pos:end="263:58">_SC_CLK_TCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="270:0"><expr pos:start="265:5" pos:end="265:52"><call pos:start="265:5" pos:end="265:52"><name pos:start="265:5" pos:end="265:15">NEW_AUX_ENT</name><argument_list pos:start="265:16" pos:end="265:52">(<argument pos:start="265:17" pos:end="265:25"><expr pos:start="265:17" pos:end="265:25"><name pos:start="265:17" pos:end="265:25">AT_RANDOM</name></expr></argument>, <argument pos:start="265:28" pos:end="265:51"><expr pos:start="265:28" pos:end="265:51"><operator pos:start="265:28" pos:end="265:28">(</operator><name pos:start="265:29" pos:end="265:37">abi_ulong</name><operator pos:start="265:38" pos:end="265:38">)</operator> <name pos:start="265:40" pos:end="265:51">u_rand_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="269:1" pos:end="269:17">#<cpp:directive pos:start="269:2" pos:end="269:6">ifdef</cpp:directive> <name pos:start="269:8" pos:end="269:17">ELF_HWCAP2</name></cpp:ifdef>

    <expr_stmt pos:start="271:5" pos:end="274:0"><expr pos:start="271:5" pos:end="271:50"><call pos:start="271:5" pos:end="271:50"><name pos:start="271:5" pos:end="271:15">NEW_AUX_ENT</name><argument_list pos:start="271:16" pos:end="271:50">(<argument pos:start="271:17" pos:end="271:25"><expr pos:start="271:17" pos:end="271:25"><name pos:start="271:17" pos:end="271:25">AT_HWCAP2</name></expr></argument>, <argument pos:start="271:28" pos:end="271:49"><expr pos:start="271:28" pos:end="271:49"><operator pos:start="271:28" pos:end="271:28">(</operator><name pos:start="271:29" pos:end="271:37">abi_ulong</name><operator pos:start="271:38" pos:end="271:38">)</operator> <name pos:start="271:40" pos:end="271:49">ELF_HWCAP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="273:1" pos:end="273:6">#<cpp:directive pos:start="273:2" pos:end="273:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="277:5" pos:end="281:5"><if pos:start="277:5" pos:end="281:5">if <condition pos:start="277:8" pos:end="277:19">(<expr pos:start="277:9" pos:end="277:18"><name pos:start="277:9" pos:end="277:18">u_platform</name></expr>)</condition> <block pos:start="277:21" pos:end="281:5">{<block_content pos:start="279:9" pos:end="279:45">

        <expr_stmt pos:start="279:9" pos:end="279:45"><expr pos:start="279:9" pos:end="279:44"><call pos:start="279:9" pos:end="279:44"><name pos:start="279:9" pos:end="279:19">NEW_AUX_ENT</name><argument_list pos:start="279:20" pos:end="279:44">(<argument pos:start="279:21" pos:end="279:31"><expr pos:start="279:21" pos:end="279:31"><name pos:start="279:21" pos:end="279:31">AT_PLATFORM</name></expr></argument>, <argument pos:start="279:34" pos:end="279:43"><expr pos:start="279:34" pos:end="279:43"><name pos:start="279:34" pos:end="279:43">u_platform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="283:5" pos:end="286:0"><expr pos:start="283:5" pos:end="283:28"><call pos:start="283:5" pos:end="283:28"><name pos:start="283:5" pos:end="283:15">NEW_AUX_ENT</name> <argument_list pos:start="283:17" pos:end="283:28">(<argument pos:start="283:18" pos:end="283:24"><expr pos:start="283:18" pos:end="283:24"><name pos:start="283:18" pos:end="283:24">AT_NULL</name></expr></argument>, <argument pos:start="283:27" pos:end="283:27"><expr pos:start="283:27" pos:end="283:27"><literal type="number" pos:start="283:27" pos:end="283:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef pos:start="285:1" pos:end="285:18">#<cpp:directive pos:start="285:2" pos:end="285:6">undef</cpp:directive> <name pos:start="285:8" pos:end="285:18">NEW_AUX_ENT</name></cpp:undef>



    <expr_stmt pos:start="289:5" pos:end="289:47"><expr pos:start="289:5" pos:end="289:46"><name pos:start="289:5" pos:end="289:18"><name pos:start="289:5" pos:end="289:8">info</name><operator pos:start="289:9" pos:end="289:10">-&gt;</operator><name pos:start="289:11" pos:end="289:18">auxv_len</name></name> <operator pos:start="289:20" pos:end="289:20">=</operator> <name pos:start="289:22" pos:end="289:27">u_argv</name> <operator pos:start="289:29" pos:end="289:29">-</operator> <name pos:start="289:31" pos:end="289:46"><name pos:start="289:31" pos:end="289:34">info</name><operator pos:start="289:35" pos:end="289:36">-&gt;</operator><name pos:start="289:37" pos:end="289:46">saved_auxv</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="293:5" pos:end="293:31"><expr pos:start="293:5" pos:end="293:30"><call pos:start="293:5" pos:end="293:30"><name pos:start="293:5" pos:end="293:16">put_user_ual</name><argument_list pos:start="293:17" pos:end="293:30">(<argument pos:start="293:18" pos:end="293:21"><expr pos:start="293:18" pos:end="293:21"><name pos:start="293:18" pos:end="293:21">argc</name></expr></argument>, <argument pos:start="293:24" pos:end="293:29"><expr pos:start="293:24" pos:end="293:29"><name pos:start="293:24" pos:end="293:29">u_argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="297:5" pos:end="297:26"><expr pos:start="297:5" pos:end="297:25"><name pos:start="297:5" pos:end="297:5">p</name> <operator pos:start="297:7" pos:end="297:7">=</operator> <name pos:start="297:9" pos:end="297:25"><name pos:start="297:9" pos:end="297:12">info</name><operator pos:start="297:13" pos:end="297:14">-&gt;</operator><name pos:start="297:15" pos:end="297:25">arg_strings</name></name></expr>;</expr_stmt>

    <for pos:start="299:5" pos:end="307:5">for <control pos:start="299:9" pos:end="299:30">(<init pos:start="299:10" pos:end="299:15"><expr pos:start="299:10" pos:end="299:14"><name pos:start="299:10" pos:end="299:10">i</name> <operator pos:start="299:12" pos:end="299:12">=</operator> <literal type="number" pos:start="299:14" pos:end="299:14">0</literal></expr>;</init> <condition pos:start="299:17" pos:end="299:25"><expr pos:start="299:17" pos:end="299:24"><name pos:start="299:17" pos:end="299:17">i</name> <operator pos:start="299:19" pos:end="299:19">&lt;</operator> <name pos:start="299:21" pos:end="299:24">argc</name></expr>;</condition> <incr pos:start="299:27" pos:end="299:29"><expr pos:start="299:27" pos:end="299:29"><operator pos:start="299:27" pos:end="299:28">++</operator><name pos:start="299:29" pos:end="299:29">i</name></expr></incr>)</control> <block pos:start="299:32" pos:end="307:5">{<block_content pos:start="301:9" pos:end="305:34">

        <expr_stmt pos:start="301:9" pos:end="301:32"><expr pos:start="301:9" pos:end="301:31"><call pos:start="301:9" pos:end="301:31"><name pos:start="301:9" pos:end="301:20">put_user_ual</name><argument_list pos:start="301:21" pos:end="301:31">(<argument pos:start="301:22" pos:end="301:22"><expr pos:start="301:22" pos:end="301:22"><name pos:start="301:22" pos:end="301:22">p</name></expr></argument>, <argument pos:start="301:25" pos:end="301:30"><expr pos:start="301:25" pos:end="301:30"><name pos:start="301:25" pos:end="301:30">u_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:20"><expr pos:start="303:9" pos:end="303:19"><name pos:start="303:9" pos:end="303:14">u_argv</name> <operator pos:start="303:16" pos:end="303:17">+=</operator> <name pos:start="303:19" pos:end="303:19">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:34"><expr pos:start="305:9" pos:end="305:33"><name pos:start="305:9" pos:end="305:9">p</name> <operator pos:start="305:11" pos:end="305:12">+=</operator> <call pos:start="305:14" pos:end="305:29"><name pos:start="305:14" pos:end="305:26">target_strlen</name><argument_list pos:start="305:27" pos:end="305:29">(<argument pos:start="305:28" pos:end="305:28"><expr pos:start="305:28" pos:end="305:28"><name pos:start="305:28" pos:end="305:28">p</name></expr></argument>)</argument_list></call> <operator pos:start="305:31" pos:end="305:31">+</operator> <literal type="number" pos:start="305:33" pos:end="305:33">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="309:5" pos:end="309:28"><expr pos:start="309:5" pos:end="309:27"><call pos:start="309:5" pos:end="309:27"><name pos:start="309:5" pos:end="309:16">put_user_ual</name><argument_list pos:start="309:17" pos:end="309:27">(<argument pos:start="309:18" pos:end="309:18"><expr pos:start="309:18" pos:end="309:18"><literal type="number" pos:start="309:18" pos:end="309:18">0</literal></expr></argument>, <argument pos:start="309:21" pos:end="309:26"><expr pos:start="309:21" pos:end="309:26"><name pos:start="309:21" pos:end="309:26">u_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="313:5" pos:end="313:26"><expr pos:start="313:5" pos:end="313:25"><name pos:start="313:5" pos:end="313:5">p</name> <operator pos:start="313:7" pos:end="313:7">=</operator> <name pos:start="313:9" pos:end="313:25"><name pos:start="313:9" pos:end="313:12">info</name><operator pos:start="313:13" pos:end="313:14">-&gt;</operator><name pos:start="313:15" pos:end="313:25">env_strings</name></name></expr>;</expr_stmt>

    <for pos:start="315:5" pos:end="323:5">for <control pos:start="315:9" pos:end="315:30">(<init pos:start="315:10" pos:end="315:15"><expr pos:start="315:10" pos:end="315:14"><name pos:start="315:10" pos:end="315:10">i</name> <operator pos:start="315:12" pos:end="315:12">=</operator> <literal type="number" pos:start="315:14" pos:end="315:14">0</literal></expr>;</init> <condition pos:start="315:17" pos:end="315:25"><expr pos:start="315:17" pos:end="315:24"><name pos:start="315:17" pos:end="315:17">i</name> <operator pos:start="315:19" pos:end="315:19">&lt;</operator> <name pos:start="315:21" pos:end="315:24">envc</name></expr>;</condition> <incr pos:start="315:27" pos:end="315:29"><expr pos:start="315:27" pos:end="315:29"><operator pos:start="315:27" pos:end="315:28">++</operator><name pos:start="315:29" pos:end="315:29">i</name></expr></incr>)</control> <block pos:start="315:32" pos:end="323:5">{<block_content pos:start="317:9" pos:end="321:34">

        <expr_stmt pos:start="317:9" pos:end="317:32"><expr pos:start="317:9" pos:end="317:31"><call pos:start="317:9" pos:end="317:31"><name pos:start="317:9" pos:end="317:20">put_user_ual</name><argument_list pos:start="317:21" pos:end="317:31">(<argument pos:start="317:22" pos:end="317:22"><expr pos:start="317:22" pos:end="317:22"><name pos:start="317:22" pos:end="317:22">p</name></expr></argument>, <argument pos:start="317:25" pos:end="317:30"><expr pos:start="317:25" pos:end="317:30"><name pos:start="317:25" pos:end="317:30">u_envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:20"><expr pos:start="319:9" pos:end="319:19"><name pos:start="319:9" pos:end="319:14">u_envp</name> <operator pos:start="319:16" pos:end="319:17">+=</operator> <name pos:start="319:19" pos:end="319:19">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:34"><expr pos:start="321:9" pos:end="321:33"><name pos:start="321:9" pos:end="321:9">p</name> <operator pos:start="321:11" pos:end="321:12">+=</operator> <call pos:start="321:14" pos:end="321:29"><name pos:start="321:14" pos:end="321:26">target_strlen</name><argument_list pos:start="321:27" pos:end="321:29">(<argument pos:start="321:28" pos:end="321:28"><expr pos:start="321:28" pos:end="321:28"><name pos:start="321:28" pos:end="321:28">p</name></expr></argument>)</argument_list></call> <operator pos:start="321:31" pos:end="321:31">+</operator> <literal type="number" pos:start="321:33" pos:end="321:33">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="325:5" pos:end="325:28"><expr pos:start="325:5" pos:end="325:27"><call pos:start="325:5" pos:end="325:27"><name pos:start="325:5" pos:end="325:16">put_user_ual</name><argument_list pos:start="325:17" pos:end="325:27">(<argument pos:start="325:18" pos:end="325:18"><expr pos:start="325:18" pos:end="325:18"><literal type="number" pos:start="325:18" pos:end="325:18">0</literal></expr></argument>, <argument pos:start="325:21" pos:end="325:26"><expr pos:start="325:21" pos:end="325:26"><name pos:start="325:21" pos:end="325:26">u_envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="329:5" pos:end="329:14">return <expr pos:start="329:12" pos:end="329:13"><name pos:start="329:12" pos:end="329:13">sp</name></expr>;</return>

</block_content>}</block></function>
</unit>
