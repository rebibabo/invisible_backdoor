<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18644.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:25"><name pos:start="1:1" pos:end="1:9">g_malloc0</name><argument_list pos:start="1:10" pos:end="1:25">(<argument pos:start="1:11" pos:end="1:24">size_t n_bytes</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="15:1">{<block_content pos:start="5:5" pos:end="13:15">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">mem</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:40"><expr pos:start="7:5" pos:end="7:39"><call pos:start="7:5" pos:end="7:39"><name pos:start="7:5" pos:end="7:30">__coverity_negative_sink__</name><argument_list pos:start="7:31" pos:end="7:39">(<argument pos:start="7:32" pos:end="7:38"><expr pos:start="7:32" pos:end="7:38"><name pos:start="7:32" pos:end="7:38">n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:48"><expr pos:start="9:5" pos:end="9:47"><name pos:start="9:5" pos:end="9:7">mem</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:47"><name pos:start="9:11" pos:end="9:16">calloc</name><argument_list pos:start="9:17" pos:end="9:47">(<argument pos:start="9:18" pos:end="9:18"><expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">1</literal></expr></argument>, <argument pos:start="9:21" pos:end="9:46"><expr pos:start="9:21" pos:end="9:46"><ternary pos:start="9:21" pos:end="9:46"><condition pos:start="9:21" pos:end="9:34"><expr pos:start="9:21" pos:end="9:32"><name pos:start="9:21" pos:end="9:27">n_bytes</name> <operator pos:start="9:29" pos:end="9:30">==</operator> <literal type="number" pos:start="9:32" pos:end="9:32">0</literal></expr> ?</condition><then pos:start="9:36" pos:end="9:36"> <expr pos:start="9:36" pos:end="9:36"><literal type="number" pos:start="9:36" pos:end="9:36">1</literal></expr> </then><else pos:start="9:38" pos:end="9:46">: <expr pos:start="9:40" pos:end="9:46"><name pos:start="9:40" pos:end="9:46">n_bytes</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="11:35"><if pos:start="11:5" pos:end="11:35">if <condition pos:start="11:8" pos:end="11:13">(<expr pos:start="11:9" pos:end="11:12"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:12">mem</name></expr>)</condition><block type="pseudo" pos:start="11:15" pos:end="11:35"><block_content pos:start="11:15" pos:end="11:35"> <expr_stmt pos:start="11:15" pos:end="11:35"><expr pos:start="11:15" pos:end="11:34"><call pos:start="11:15" pos:end="11:34"><name pos:start="11:15" pos:end="11:32">__coverity_panic__</name><argument_list pos:start="11:33" pos:end="11:34">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="13:5" pos:end="13:15">return <expr pos:start="13:12" pos:end="13:14"><name pos:start="13:12" pos:end="13:14">mem</name></expr>;</return>

</block_content>}</block>
</unit>
