<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/957.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:69"><name pos:start="1:1" pos:end="1:10">build_dsdt</name><argument_list pos:start="1:11" pos:end="5:69">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:49">BIOSLinker *linker</argument>,

           <argument pos:start="3:12" pos:end="3:25">AcpiPmInfo *pm</argument>, <argument pos:start="3:28" pos:end="3:45">AcpiMiscInfo *misc</argument>,

           <argument pos:start="5:12" pos:end="5:26">Range *pci_hole</argument>, <argument pos:start="5:29" pos:end="5:45">Range *pci_hole64</argument>, <argument pos:start="5:48" pos:end="5:68">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="745:1">{<block_content pos:start="9:5" pos:end="743:25">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CrsRangeEntry</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">Aml</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:13">dsdt</name></decl>, <decl pos:start="11:16" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">sb_scope</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:32">scope</name></decl>, <decl pos:start="11:35" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:35" pos:end="11:35">*</modifier></type><name pos:start="11:36" pos:end="11:38">dev</name></decl>, <decl pos:start="11:41" pos:end="11:47"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:47">method</name></decl>, <decl pos:start="11:50" pos:end="11:55"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:50" pos:end="11:50">*</modifier></type><name pos:start="11:51" pos:end="11:55">field</name></decl>, <decl pos:start="11:58" pos:end="11:61"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:58" pos:end="11:58">*</modifier></type><name pos:start="11:59" pos:end="11:61">pkg</name></decl>, <decl pos:start="11:64" pos:end="11:67"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:64" pos:end="11:64">*</modifier></type><name pos:start="11:65" pos:end="11:67">crs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">CrsRangeSet</name></type> <name pos:start="13:17" pos:end="13:29">crs_range_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">PCMachineState</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:24">pcms</name> <init pos:start="15:26" pos:end="15:46">= <expr pos:start="15:28" pos:end="15:46"><call pos:start="15:28" pos:end="15:46"><name pos:start="15:28" pos:end="15:37">PC_MACHINE</name><argument_list pos:start="15:38" pos:end="15:46">(<argument pos:start="15:39" pos:end="15:45"><expr pos:start="15:39" pos:end="15:45"><name pos:start="15:39" pos:end="15:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:57"><decl pos:start="17:5" pos:end="17:56"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">PCMachineClass</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:24">pcmc</name> <init pos:start="17:26" pos:end="17:56">= <expr pos:start="17:28" pos:end="17:56"><call pos:start="17:28" pos:end="17:56"><name pos:start="17:28" pos:end="17:47">PC_MACHINE_GET_CLASS</name><argument_list pos:start="17:48" pos:end="17:56">(<argument pos:start="17:49" pos:end="17:55"><expr pos:start="17:49" pos:end="17:55"><name pos:start="17:49" pos:end="17:55">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:40"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19">nr_mem</name> <init pos:start="19:21" pos:end="19:40">= <expr pos:start="19:23" pos:end="19:40"><name pos:start="19:23" pos:end="19:40"><name pos:start="19:23" pos:end="19:29">machine</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:40">ram_slots</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">root_bus_limit</name> <init pos:start="21:24" pos:end="21:29">= <expr pos:start="21:26" pos:end="21:29"><literal type="number" pos:start="21:26" pos:end="21:29">0xFF</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">PCIBus</name> <modifier pos:start="23:12" pos:end="23:12">*</modifier></type><name pos:start="23:13" pos:end="23:15">bus</name> <init pos:start="23:17" pos:end="23:22">= <expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:8">dsdt</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:29">init_aml_allocator</name><argument_list pos:start="29:30" pos:end="29:31">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:34">/* Reserve space for header */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><call pos:start="35:5" pos:end="35:54"><name pos:start="35:5" pos:end="35:18">acpi_data_push</name><argument_list pos:start="35:19" pos:end="35:54">(<argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:23">dsdt</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:28">buf</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:53"><expr pos:start="35:31" pos:end="35:53"><sizeof pos:start="35:31" pos:end="35:53">sizeof<argument_list pos:start="35:37" pos:end="35:53">(<argument pos:start="35:38" pos:end="35:52"><expr pos:start="35:38" pos:end="35:52"><name pos:start="35:38" pos:end="35:52">AcpiTableHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><call pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:17">build_dbg_aml</name><argument_list pos:start="39:18" pos:end="39:23">(<argument pos:start="39:19" pos:end="39:22"><expr pos:start="39:19" pos:end="39:22"><name pos:start="39:19" pos:end="39:22">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="101:5"><if pos:start="41:5" pos:end="71:5">if <condition pos:start="41:8" pos:end="41:23">(<expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:12">misc</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">is_piix4</name></name></expr>)</condition> <block pos:start="41:25" pos:end="71:5">{<block_content pos:start="43:9" pos:end="69:35">

        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:16">sb_scope</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:28">aml_scope</name><argument_list pos:start="43:29" pos:end="43:35">(<argument pos:start="43:30" pos:end="43:34"><expr pos:start="43:30" pos:end="43:34"><literal type="string" pos:start="43:30" pos:end="43:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:11">dev</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:32"><name pos:start="45:15" pos:end="45:24">aml_device</name><argument_list pos:start="45:25" pos:end="45:32">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><literal type="string" pos:start="45:26" pos:end="45:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:70"><expr pos:start="47:9" pos:end="47:69"><call pos:start="47:9" pos:end="47:69"><name pos:start="47:9" pos:end="47:18">aml_append</name><argument_list pos:start="47:19" pos:end="47:69">(<argument pos:start="47:20" pos:end="47:22"><expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">dev</name></expr></argument>, <argument pos:start="47:25" pos:end="47:68"><expr pos:start="47:25" pos:end="47:68"><call pos:start="47:25" pos:end="47:68"><name pos:start="47:25" pos:end="47:37">aml_name_decl</name><argument_list pos:start="47:38" pos:end="47:68">(<argument pos:start="47:39" pos:end="47:44"><expr pos:start="47:39" pos:end="47:44"><literal type="string" pos:start="47:39" pos:end="47:44">"_HID"</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:67"><expr pos:start="47:47" pos:end="47:67"><call pos:start="47:47" pos:end="47:67"><name pos:start="47:47" pos:end="47:56">aml_eisaid</name><argument_list pos:start="47:57" pos:end="47:67">(<argument pos:start="47:58" pos:end="47:66"><expr pos:start="47:58" pos:end="47:66"><literal type="string" pos:start="47:58" pos:end="47:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><call pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:18">aml_append</name><argument_list pos:start="49:19" pos:end="49:58">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">dev</name></expr></argument>, <argument pos:start="49:25" pos:end="49:57"><expr pos:start="49:25" pos:end="49:57"><call pos:start="49:25" pos:end="49:57"><name pos:start="49:25" pos:end="49:37">aml_name_decl</name><argument_list pos:start="49:38" pos:end="49:57">(<argument pos:start="49:39" pos:end="49:44"><expr pos:start="49:39" pos:end="49:44"><literal type="string" pos:start="49:39" pos:end="49:44">"_ADR"</literal></expr></argument>, <argument pos:start="49:47" pos:end="49:56"><expr pos:start="49:47" pos:end="49:56"><call pos:start="49:47" pos:end="49:56"><name pos:start="49:47" pos:end="49:53">aml_int</name><argument_list pos:start="49:54" pos:end="49:56">(<argument pos:start="49:55" pos:end="49:55"><expr pos:start="49:55" pos:end="49:55"><literal type="number" pos:start="49:55" pos:end="49:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:18">aml_append</name><argument_list pos:start="51:19" pos:end="51:58">(<argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">dev</name></expr></argument>, <argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><call pos:start="51:25" pos:end="51:57"><name pos:start="51:25" pos:end="51:37">aml_name_decl</name><argument_list pos:start="51:38" pos:end="51:57">(<argument pos:start="51:39" pos:end="51:44"><expr pos:start="51:39" pos:end="51:44"><literal type="string" pos:start="51:39" pos:end="51:44">"_UID"</literal></expr></argument>, <argument pos:start="51:47" pos:end="51:56"><expr pos:start="51:47" pos:end="51:56"><call pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:53">aml_int</name><argument_list pos:start="51:54" pos:end="51:56">(<argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><call pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:18">aml_append</name><argument_list pos:start="53:19" pos:end="53:33">(<argument pos:start="53:20" pos:end="53:27"><expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27">sb_scope</name></expr></argument>, <argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:18">aml_append</name><argument_list pos:start="55:19" pos:end="55:34">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">dsdt</name></expr></argument>, <argument pos:start="55:26" pos:end="55:33"><expr pos:start="55:26" pos:end="55:33"><name pos:start="55:26" pos:end="55:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><call pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:22">build_hpet_aml</name><argument_list pos:start="59:23" pos:end="59:28">(<argument pos:start="59:24" pos:end="59:27"><expr pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><call pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:22">build_piix4_pm</name><argument_list pos:start="61:23" pos:end="61:28">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><call pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:30">build_piix4_isa_bridge</name><argument_list pos:start="63:31" pos:end="63:36">(<argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:36"><expr pos:start="65:9" pos:end="65:35"><call pos:start="65:9" pos:end="65:35"><name pos:start="65:9" pos:end="65:29">build_isa_devices_aml</name><argument_list pos:start="65:30" pos:end="65:35">(<argument pos:start="65:31" pos:end="65:34"><expr pos:start="65:31" pos:end="65:34"><name pos:start="65:31" pos:end="65:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><call pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:31">build_piix4_pci_hotplug</name><argument_list pos:start="67:32" pos:end="67:37">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><call pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:28">build_piix4_pci0_int</name><argument_list pos:start="69:29" pos:end="69:34">(<argument pos:start="69:30" pos:end="69:33"><expr pos:start="69:30" pos:end="69:33"><name pos:start="69:30" pos:end="69:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="101:5">else <block pos:start="71:12" pos:end="101:5">{<block_content pos:start="73:9" pos:end="99:33">

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:16">sb_scope</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:35"><name pos:start="73:20" pos:end="73:28">aml_scope</name><argument_list pos:start="73:29" pos:end="73:35">(<argument pos:start="73:30" pos:end="73:34"><expr pos:start="73:30" pos:end="73:34"><literal type="string" pos:start="73:30" pos:end="73:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:33"><expr pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:11">dev</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:32"><name pos:start="75:15" pos:end="75:24">aml_device</name><argument_list pos:start="75:25" pos:end="75:32">(<argument pos:start="75:26" pos:end="75:31"><expr pos:start="75:26" pos:end="75:31"><literal type="string" pos:start="75:26" pos:end="75:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:70"><expr pos:start="77:9" pos:end="77:69"><call pos:start="77:9" pos:end="77:69"><name pos:start="77:9" pos:end="77:18">aml_append</name><argument_list pos:start="77:19" pos:end="77:69">(<argument pos:start="77:20" pos:end="77:22"><expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">dev</name></expr></argument>, <argument pos:start="77:25" pos:end="77:68"><expr pos:start="77:25" pos:end="77:68"><call pos:start="77:25" pos:end="77:68"><name pos:start="77:25" pos:end="77:37">aml_name_decl</name><argument_list pos:start="77:38" pos:end="77:68">(<argument pos:start="77:39" pos:end="77:44"><expr pos:start="77:39" pos:end="77:44"><literal type="string" pos:start="77:39" pos:end="77:44">"_HID"</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:67"><expr pos:start="77:47" pos:end="77:67"><call pos:start="77:47" pos:end="77:67"><name pos:start="77:47" pos:end="77:56">aml_eisaid</name><argument_list pos:start="77:57" pos:end="77:67">(<argument pos:start="77:58" pos:end="77:66"><expr pos:start="77:58" pos:end="77:66"><literal type="string" pos:start="77:58" pos:end="77:66">"PNP0A08"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:70"><expr pos:start="79:9" pos:end="79:69"><call pos:start="79:9" pos:end="79:69"><name pos:start="79:9" pos:end="79:18">aml_append</name><argument_list pos:start="79:19" pos:end="79:69">(<argument pos:start="79:20" pos:end="79:22"><expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">dev</name></expr></argument>, <argument pos:start="79:25" pos:end="79:68"><expr pos:start="79:25" pos:end="79:68"><call pos:start="79:25" pos:end="79:68"><name pos:start="79:25" pos:end="79:37">aml_name_decl</name><argument_list pos:start="79:38" pos:end="79:68">(<argument pos:start="79:39" pos:end="79:44"><expr pos:start="79:39" pos:end="79:44"><literal type="string" pos:start="79:39" pos:end="79:44">"_CID"</literal></expr></argument>, <argument pos:start="79:47" pos:end="79:67"><expr pos:start="79:47" pos:end="79:67"><call pos:start="79:47" pos:end="79:67"><name pos:start="79:47" pos:end="79:56">aml_eisaid</name><argument_list pos:start="79:57" pos:end="79:67">(<argument pos:start="79:58" pos:end="79:66"><expr pos:start="79:58" pos:end="79:66"><literal type="string" pos:start="79:58" pos:end="79:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:59"><expr pos:start="81:9" pos:end="81:58"><call pos:start="81:9" pos:end="81:58"><name pos:start="81:9" pos:end="81:18">aml_append</name><argument_list pos:start="81:19" pos:end="81:58">(<argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">dev</name></expr></argument>, <argument pos:start="81:25" pos:end="81:57"><expr pos:start="81:25" pos:end="81:57"><call pos:start="81:25" pos:end="81:57"><name pos:start="81:25" pos:end="81:37">aml_name_decl</name><argument_list pos:start="81:38" pos:end="81:57">(<argument pos:start="81:39" pos:end="81:44"><expr pos:start="81:39" pos:end="81:44"><literal type="string" pos:start="81:39" pos:end="81:44">"_ADR"</literal></expr></argument>, <argument pos:start="81:47" pos:end="81:56"><expr pos:start="81:47" pos:end="81:56"><call pos:start="81:47" pos:end="81:56"><name pos:start="81:47" pos:end="81:53">aml_int</name><argument_list pos:start="81:54" pos:end="81:56">(<argument pos:start="81:55" pos:end="81:55"><expr pos:start="81:55" pos:end="81:55"><literal type="number" pos:start="81:55" pos:end="81:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:59"><expr pos:start="83:9" pos:end="83:58"><call pos:start="83:9" pos:end="83:58"><name pos:start="83:9" pos:end="83:18">aml_append</name><argument_list pos:start="83:19" pos:end="83:58">(<argument pos:start="83:20" pos:end="83:22"><expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">dev</name></expr></argument>, <argument pos:start="83:25" pos:end="83:57"><expr pos:start="83:25" pos:end="83:57"><call pos:start="83:25" pos:end="83:57"><name pos:start="83:25" pos:end="83:37">aml_name_decl</name><argument_list pos:start="83:38" pos:end="83:57">(<argument pos:start="83:39" pos:end="83:44"><expr pos:start="83:39" pos:end="83:44"><literal type="string" pos:start="83:39" pos:end="83:44">"_UID"</literal></expr></argument>, <argument pos:start="83:47" pos:end="83:56"><expr pos:start="83:47" pos:end="83:56"><call pos:start="83:47" pos:end="83:56"><name pos:start="83:47" pos:end="83:53">aml_int</name><argument_list pos:start="83:54" pos:end="83:56">(<argument pos:start="83:55" pos:end="83:55"><expr pos:start="83:55" pos:end="83:55"><literal type="number" pos:start="83:55" pos:end="83:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:48"><expr pos:start="85:9" pos:end="85:47"><call pos:start="85:9" pos:end="85:47"><name pos:start="85:9" pos:end="85:18">aml_append</name><argument_list pos:start="85:19" pos:end="85:47">(<argument pos:start="85:20" pos:end="85:22"><expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">dev</name></expr></argument>, <argument pos:start="85:25" pos:end="85:46"><expr pos:start="85:25" pos:end="85:46"><call pos:start="85:25" pos:end="85:46"><name pos:start="85:25" pos:end="85:44">build_q35_osc_method</name><argument_list pos:start="85:45" pos:end="85:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:34"><expr pos:start="87:9" pos:end="87:33"><call pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:18">aml_append</name><argument_list pos:start="87:19" pos:end="87:33">(<argument pos:start="87:20" pos:end="87:27"><expr pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:27">sb_scope</name></expr></argument>, <argument pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><name pos:start="87:30" pos:end="87:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:35"><expr pos:start="89:9" pos:end="89:34"><call pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:18">aml_append</name><argument_list pos:start="89:19" pos:end="89:34">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">dsdt</name></expr></argument>, <argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:29"><expr pos:start="93:9" pos:end="93:28"><call pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:22">build_hpet_aml</name><argument_list pos:start="93:23" pos:end="93:28">(<argument pos:start="93:24" pos:end="93:27"><expr pos:start="93:24" pos:end="93:27"><name pos:start="93:24" pos:end="93:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:35"><expr pos:start="95:9" pos:end="95:34"><call pos:start="95:9" pos:end="95:34"><name pos:start="95:9" pos:end="95:28">build_q35_isa_bridge</name><argument_list pos:start="95:29" pos:end="95:34">(<argument pos:start="95:30" pos:end="95:33"><expr pos:start="95:30" pos:end="95:33"><name pos:start="95:30" pos:end="95:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:36"><expr pos:start="97:9" pos:end="97:35"><call pos:start="97:9" pos:end="97:35"><name pos:start="97:9" pos:end="97:29">build_isa_devices_aml</name><argument_list pos:start="97:30" pos:end="97:35">(<argument pos:start="97:31" pos:end="97:34"><expr pos:start="97:31" pos:end="97:34"><name pos:start="97:31" pos:end="97:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><call pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:26">build_q35_pci0_int</name><argument_list pos:start="99:27" pos:end="99:32">(<argument pos:start="99:28" pos:end="99:31"><expr pos:start="99:28" pos:end="99:31"><name pos:start="99:28" pos:end="99:31">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:33">(<expr pos:start="105:9" pos:end="105:32"><name pos:start="105:9" pos:end="105:32"><name pos:start="105:9" pos:end="105:12">pcmc</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:32">legacy_cpu_hotplug</name></name></expr>)</condition> <block pos:start="105:35" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:72">

        <expr_stmt pos:start="107:9" pos:end="107:72"><expr pos:start="107:9" pos:end="107:71"><call pos:start="107:9" pos:end="107:71"><name pos:start="107:9" pos:end="107:36">build_legacy_cpu_hotplug_aml</name><argument_list pos:start="107:37" pos:end="107:71">(<argument pos:start="107:38" pos:end="107:41"><expr pos:start="107:38" pos:end="107:41"><name pos:start="107:38" pos:end="107:41">dsdt</name></expr></argument>, <argument pos:start="107:44" pos:end="107:50"><expr pos:start="107:44" pos:end="107:50"><name pos:start="107:44" pos:end="107:50">machine</name></expr></argument>, <argument pos:start="107:53" pos:end="107:70"><expr pos:start="107:53" pos:end="107:70"><name pos:start="107:53" pos:end="107:70"><name pos:start="107:53" pos:end="107:54">pm</name><operator pos:start="107:55" pos:end="107:56">-&gt;</operator><name pos:start="107:57" pos:end="107:70">cpu_hp_io_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="121:5">else <block pos:start="109:12" pos:end="121:5">{<block_content pos:start="111:9" pos:end="119:52">

        <decl_stmt pos:start="111:9" pos:end="115:10"><decl pos:start="111:9" pos:end="115:9"><type pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:26">CPUHotplugFeatures</name></type> <name pos:start="111:28" pos:end="111:31">opts</name> <init pos:start="111:33" pos:end="115:9">= <expr pos:start="111:35" pos:end="115:9"><block pos:start="111:35" pos:end="115:9">{

            <expr pos:start="113:13" pos:end="113:37"><operator pos:start="113:13" pos:end="113:13">.</operator><name pos:start="113:14" pos:end="113:30">apci_1_compatible</name> <operator pos:start="113:32" pos:end="113:32">=</operator> <name pos:start="113:34" pos:end="113:37">true</name></expr>, <expr pos:start="113:40" pos:end="113:62"><operator pos:start="113:40" pos:end="113:40">.</operator><name pos:start="113:41" pos:end="113:55">has_legacy_cphp</name> <operator pos:start="113:57" pos:end="113:57">=</operator> <name pos:start="113:59" pos:end="113:62">true</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="117:9" pos:end="119:52"><expr pos:start="117:9" pos:end="119:51"><call pos:start="117:9" pos:end="119:51"><name pos:start="117:9" pos:end="117:22">build_cpus_aml</name><argument_list pos:start="117:23" pos:end="119:51">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">dsdt</name></expr></argument>, <argument pos:start="117:30" pos:end="117:36"><expr pos:start="117:30" pos:end="117:36"><name pos:start="117:30" pos:end="117:36">machine</name></expr></argument>, <argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><name pos:start="117:39" pos:end="117:42">opts</name></expr></argument>, <argument pos:start="117:45" pos:end="117:62"><expr pos:start="117:45" pos:end="117:62"><name pos:start="117:45" pos:end="117:62"><name pos:start="117:45" pos:end="117:46">pm</name><operator pos:start="117:47" pos:end="117:48">-&gt;</operator><name pos:start="117:49" pos:end="117:62">cpu_hp_io_base</name></name></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:35"><expr pos:start="119:24" pos:end="119:35"><literal type="string" pos:start="119:24" pos:end="119:35">"\\_SB.PCI0"</literal></expr></argument>, <argument pos:start="119:38" pos:end="119:50"><expr pos:start="119:38" pos:end="119:50"><literal type="string" pos:start="119:38" pos:end="119:50">"\\_GPE._E02"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:72"><expr pos:start="123:5" pos:end="123:71"><call pos:start="123:5" pos:end="123:71"><name pos:start="123:5" pos:end="123:28">build_memory_hotplug_aml</name><argument_list pos:start="123:29" pos:end="123:71">(<argument pos:start="123:30" pos:end="123:33"><expr pos:start="123:30" pos:end="123:33"><name pos:start="123:30" pos:end="123:33">dsdt</name></expr></argument>, <argument pos:start="123:36" pos:end="123:41"><expr pos:start="123:36" pos:end="123:41"><name pos:start="123:36" pos:end="123:41">nr_mem</name></expr></argument>, <argument pos:start="123:44" pos:end="123:55"><expr pos:start="123:44" pos:end="123:55"><literal type="string" pos:start="123:44" pos:end="123:55">"\\_SB.PCI0"</literal></expr></argument>, <argument pos:start="123:58" pos:end="123:70"><expr pos:start="123:58" pos:end="123:70"><literal type="string" pos:start="123:58" pos:end="123:70">"\\_GPE._E03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:31"><expr pos:start="127:5" pos:end="127:30"><name pos:start="127:5" pos:end="127:9">scope</name> <operator pos:start="127:11" pos:end="127:11">=</operator>  <call pos:start="127:14" pos:end="127:30"><name pos:start="127:14" pos:end="127:22">aml_scope</name><argument_list pos:start="127:23" pos:end="127:30">(<argument pos:start="127:24" pos:end="127:29"><expr pos:start="127:24" pos:end="127:29"><literal type="string" pos:start="127:24" pos:end="127:29">"_GPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="129:5" pos:end="165:5">{<block_content pos:start="131:9" pos:end="163:9">

        <expr_stmt pos:start="131:9" pos:end="131:73"><expr pos:start="131:9" pos:end="131:72"><call pos:start="131:9" pos:end="131:72"><name pos:start="131:9" pos:end="131:18">aml_append</name><argument_list pos:start="131:19" pos:end="131:72">(<argument pos:start="131:20" pos:end="131:24"><expr pos:start="131:20" pos:end="131:24"><name pos:start="131:20" pos:end="131:24">scope</name></expr></argument>, <argument pos:start="131:27" pos:end="131:71"><expr pos:start="131:27" pos:end="131:71"><call pos:start="131:27" pos:end="131:71"><name pos:start="131:27" pos:end="131:39">aml_name_decl</name><argument_list pos:start="131:40" pos:end="131:71">(<argument pos:start="131:41" pos:end="131:46"><expr pos:start="131:41" pos:end="131:46"><literal type="string" pos:start="131:41" pos:end="131:46">"_HID"</literal></expr></argument>, <argument pos:start="131:49" pos:end="131:70"><expr pos:start="131:49" pos:end="131:70"><call pos:start="131:49" pos:end="131:70"><name pos:start="131:49" pos:end="131:58">aml_string</name><argument_list pos:start="131:59" pos:end="131:70">(<argument pos:start="131:60" pos:end="131:69"><expr pos:start="131:60" pos:end="131:69"><literal type="string" pos:start="131:60" pos:end="131:69">"ACPI0006"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="149:9"><if pos:start="135:9" pos:end="149:9">if <condition pos:start="135:12" pos:end="135:27">(<expr pos:start="135:13" pos:end="135:26"><name pos:start="135:13" pos:end="135:26"><name pos:start="135:13" pos:end="135:16">misc</name><operator pos:start="135:17" pos:end="135:18">-&gt;</operator><name pos:start="135:19" pos:end="135:26">is_piix4</name></name></expr>)</condition> <block pos:start="135:29" pos:end="149:9">{<block_content pos:start="137:13" pos:end="147:38">

            <expr_stmt pos:start="137:13" pos:end="137:62"><expr pos:start="137:13" pos:end="137:61"><name pos:start="137:13" pos:end="137:18">method</name> <operator pos:start="137:20" pos:end="137:20">=</operator> <call pos:start="137:22" pos:end="137:61"><name pos:start="137:22" pos:end="137:31">aml_method</name><argument_list pos:start="137:32" pos:end="137:61">(<argument pos:start="137:33" pos:end="137:38"><expr pos:start="137:33" pos:end="137:38"><literal type="string" pos:start="137:33" pos:end="137:38">"_E01"</literal></expr></argument>, <argument pos:start="137:41" pos:end="137:41"><expr pos:start="137:41" pos:end="137:41"><literal type="number" pos:start="137:41" pos:end="137:41">0</literal></expr></argument>, <argument pos:start="137:44" pos:end="137:60"><expr pos:start="137:44" pos:end="137:60"><name pos:start="137:44" pos:end="137:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="141:66"><expr pos:start="139:13" pos:end="141:65"><call pos:start="139:13" pos:end="141:65"><name pos:start="139:13" pos:end="139:22">aml_append</name><argument_list pos:start="139:23" pos:end="141:65">(<argument pos:start="139:24" pos:end="139:29"><expr pos:start="139:24" pos:end="139:29"><name pos:start="139:24" pos:end="139:29">method</name></expr></argument>,

                <argument pos:start="141:17" pos:end="141:64"><expr pos:start="141:17" pos:end="141:64"><call pos:start="141:17" pos:end="141:64"><name pos:start="141:17" pos:end="141:27">aml_acquire</name><argument_list pos:start="141:28" pos:end="141:64">(<argument pos:start="141:29" pos:end="141:55"><expr pos:start="141:29" pos:end="141:55"><call pos:start="141:29" pos:end="141:55"><name pos:start="141:29" pos:end="141:36">aml_name</name><argument_list pos:start="141:37" pos:end="141:55">(<argument pos:start="141:38" pos:end="141:54"><expr pos:start="141:38" pos:end="141:54"><literal type="string" pos:start="141:38" pos:end="141:54">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="141:58" pos:end="141:63"><expr pos:start="141:58" pos:end="141:63"><literal type="number" pos:start="141:58" pos:end="141:63">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:61"><expr pos:start="143:13" pos:end="143:60"><call pos:start="143:13" pos:end="143:60"><name pos:start="143:13" pos:end="143:22">aml_append</name><argument_list pos:start="143:23" pos:end="143:60">(<argument pos:start="143:24" pos:end="143:29"><expr pos:start="143:24" pos:end="143:29"><name pos:start="143:24" pos:end="143:29">method</name></expr></argument>, <argument pos:start="143:32" pos:end="143:59"><expr pos:start="143:32" pos:end="143:59"><call pos:start="143:32" pos:end="143:59"><name pos:start="143:32" pos:end="143:40">aml_call0</name><argument_list pos:start="143:41" pos:end="143:59">(<argument pos:start="143:42" pos:end="143:58"><expr pos:start="143:42" pos:end="143:58"><literal type="string" pos:start="143:42" pos:end="143:58">"\\_SB.PCI0.PCNT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:73"><expr pos:start="145:13" pos:end="145:72"><call pos:start="145:13" pos:end="145:72"><name pos:start="145:13" pos:end="145:22">aml_append</name><argument_list pos:start="145:23" pos:end="145:72">(<argument pos:start="145:24" pos:end="145:29"><expr pos:start="145:24" pos:end="145:29"><name pos:start="145:24" pos:end="145:29">method</name></expr></argument>, <argument pos:start="145:32" pos:end="145:71"><expr pos:start="145:32" pos:end="145:71"><call pos:start="145:32" pos:end="145:71"><name pos:start="145:32" pos:end="145:42">aml_release</name><argument_list pos:start="145:43" pos:end="145:71">(<argument pos:start="145:44" pos:end="145:70"><expr pos:start="145:44" pos:end="145:70"><call pos:start="145:44" pos:end="145:70"><name pos:start="145:44" pos:end="145:51">aml_name</name><argument_list pos:start="145:52" pos:end="145:70">(<argument pos:start="145:53" pos:end="145:69"><expr pos:start="145:53" pos:end="145:69"><literal type="string" pos:start="145:53" pos:end="145:69">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:38"><expr pos:start="147:13" pos:end="147:37"><call pos:start="147:13" pos:end="147:37"><name pos:start="147:13" pos:end="147:22">aml_append</name><argument_list pos:start="147:23" pos:end="147:37">(<argument pos:start="147:24" pos:end="147:28"><expr pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:28">scope</name></expr></argument>, <argument pos:start="147:31" pos:end="147:36"><expr pos:start="147:31" pos:end="147:36"><name pos:start="147:31" pos:end="147:36">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="153:9" pos:end="163:9"><if pos:start="153:9" pos:end="163:9">if <condition pos:start="153:12" pos:end="153:47">(<expr pos:start="153:13" pos:end="153:46"><name pos:start="153:13" pos:end="153:46"><name pos:start="153:13" pos:end="153:16">pcms</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:35">acpi_nvdimm_state</name><operator pos:start="153:36" pos:end="153:36">.</operator><name pos:start="153:37" pos:end="153:46">is_enabled</name></name></expr>)</condition> <block pos:start="153:49" pos:end="163:9">{<block_content pos:start="155:13" pos:end="161:38">

            <expr_stmt pos:start="155:13" pos:end="155:62"><expr pos:start="155:13" pos:end="155:61"><name pos:start="155:13" pos:end="155:18">method</name> <operator pos:start="155:20" pos:end="155:20">=</operator> <call pos:start="155:22" pos:end="155:61"><name pos:start="155:22" pos:end="155:31">aml_method</name><argument_list pos:start="155:32" pos:end="155:61">(<argument pos:start="155:33" pos:end="155:38"><expr pos:start="155:33" pos:end="155:38"><literal type="string" pos:start="155:33" pos:end="155:38">"_E04"</literal></expr></argument>, <argument pos:start="155:41" pos:end="155:41"><expr pos:start="155:41" pos:end="155:41"><literal type="number" pos:start="155:41" pos:end="155:41">0</literal></expr></argument>, <argument pos:start="155:44" pos:end="155:60"><expr pos:start="155:44" pos:end="155:60"><name pos:start="155:44" pos:end="155:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="159:58"><expr pos:start="157:13" pos:end="159:57"><call pos:start="157:13" pos:end="159:57"><name pos:start="157:13" pos:end="157:22">aml_append</name><argument_list pos:start="157:23" pos:end="159:57">(<argument pos:start="157:24" pos:end="157:29"><expr pos:start="157:24" pos:end="157:29"><name pos:start="157:24" pos:end="157:29">method</name></expr></argument>, <argument pos:start="157:32" pos:end="159:56"><expr pos:start="157:32" pos:end="159:56"><call pos:start="157:32" pos:end="159:56"><name pos:start="157:32" pos:end="157:41">aml_notify</name><argument_list pos:start="157:42" pos:end="159:56">(<argument pos:start="157:43" pos:end="157:64"><expr pos:start="157:43" pos:end="157:64"><call pos:start="157:43" pos:end="157:64"><name pos:start="157:43" pos:end="157:50">aml_name</name><argument_list pos:start="157:51" pos:end="157:64">(<argument pos:start="157:52" pos:end="157:63"><expr pos:start="157:52" pos:end="157:63"><literal type="string" pos:start="157:52" pos:end="157:63">"\\_SB.NVDR"</literal></expr></argument>)</argument_list></call></expr></argument>,

                                          <argument pos:start="159:43" pos:end="159:55"><expr pos:start="159:43" pos:end="159:55"><call pos:start="159:43" pos:end="159:55"><name pos:start="159:43" pos:end="159:49">aml_int</name><argument_list pos:start="159:50" pos:end="159:55">(<argument pos:start="159:51" pos:end="159:54"><expr pos:start="159:51" pos:end="159:54"><literal type="number" pos:start="159:51" pos:end="159:54">0x80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:38"><expr pos:start="161:13" pos:end="161:37"><call pos:start="161:13" pos:end="161:37"><name pos:start="161:13" pos:end="161:22">aml_append</name><argument_list pos:start="161:23" pos:end="161:37">(<argument pos:start="161:24" pos:end="161:28"><expr pos:start="161:24" pos:end="161:28"><name pos:start="161:24" pos:end="161:28">scope</name></expr></argument>, <argument pos:start="161:31" pos:end="161:36"><expr pos:start="161:31" pos:end="161:36"><name pos:start="161:31" pos:end="161:36">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="167:5" pos:end="167:28"><expr pos:start="167:5" pos:end="167:27"><call pos:start="167:5" pos:end="167:27"><name pos:start="167:5" pos:end="167:14">aml_append</name><argument_list pos:start="167:15" pos:end="167:27">(<argument pos:start="167:16" pos:end="167:19"><expr pos:start="167:16" pos:end="167:19"><name pos:start="167:16" pos:end="167:19">dsdt</name></expr></argument>, <argument pos:start="167:22" pos:end="167:26"><expr pos:start="167:22" pos:end="167:26"><name pos:start="167:22" pos:end="167:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:39"><expr pos:start="171:5" pos:end="171:38"><call pos:start="171:5" pos:end="171:38"><name pos:start="171:5" pos:end="171:22">crs_range_set_init</name><argument_list pos:start="171:23" pos:end="171:38">(<argument pos:start="171:24" pos:end="171:37"><expr pos:start="171:24" pos:end="171:37"><operator pos:start="171:24" pos:end="171:24">&amp;</operator><name pos:start="171:25" pos:end="171:37">crs_range_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:35"><expr pos:start="173:5" pos:end="173:34"><name pos:start="173:5" pos:end="173:7">bus</name> <operator pos:start="173:9" pos:end="173:9">=</operator> <call pos:start="173:11" pos:end="173:29"><name pos:start="173:11" pos:end="173:20">PC_MACHINE</name><argument_list pos:start="173:21" pos:end="173:29">(<argument pos:start="173:22" pos:end="173:28"><expr pos:start="173:22" pos:end="173:28"><name pos:start="173:22" pos:end="173:28">machine</name></expr></argument>)</argument_list></call><operator pos:start="173:30" pos:end="173:31">-&gt;</operator><name pos:start="173:32" pos:end="173:34">bus</name></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="241:5"><if pos:start="175:5" pos:end="241:5">if <condition pos:start="175:8" pos:end="175:12">(<expr pos:start="175:9" pos:end="175:11"><name pos:start="175:9" pos:end="175:11">bus</name></expr>)</condition> <block pos:start="175:14" pos:end="241:5">{<block_content pos:start="177:9" pos:end="239:9">

        <macro pos:start="177:9" pos:end="177:48"><name pos:start="177:9" pos:end="177:21">QLIST_FOREACH</name><argument_list pos:start="177:22" pos:end="177:48">(<argument pos:start="177:23" pos:end="177:25">bus</argument>, <argument pos:start="177:28" pos:end="177:38">&amp;bus-&gt;child</argument>, <argument pos:start="177:41" pos:end="177:47">sibling</argument>)</argument_list></macro> <block pos:start="177:50" pos:end="239:9">{<block_content pos:start="179:13" pos:end="237:36">

            <decl_stmt pos:start="179:13" pos:end="179:47"><decl pos:start="179:13" pos:end="179:46"><type pos:start="179:13" pos:end="179:19"><name pos:start="179:13" pos:end="179:19">uint8_t</name></type> <name pos:start="179:21" pos:end="179:27">bus_num</name> <init pos:start="179:29" pos:end="179:46">= <expr pos:start="179:31" pos:end="179:46"><call pos:start="179:31" pos:end="179:46"><name pos:start="179:31" pos:end="179:41">pci_bus_num</name><argument_list pos:start="179:42" pos:end="179:46">(<argument pos:start="179:43" pos:end="179:45"><expr pos:start="179:43" pos:end="179:45"><name pos:start="179:43" pos:end="179:45">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="181:13" pos:end="181:55"><decl pos:start="181:13" pos:end="181:54"><type pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:19">uint8_t</name></type> <name pos:start="181:21" pos:end="181:29">numa_node</name> <init pos:start="181:31" pos:end="181:54">= <expr pos:start="181:33" pos:end="181:54"><call pos:start="181:33" pos:end="181:54"><name pos:start="181:33" pos:end="181:49">pci_bus_numa_node</name><argument_list pos:start="181:50" pos:end="181:54">(<argument pos:start="181:51" pos:end="181:53"><expr pos:start="181:51" pos:end="181:53"><name pos:start="181:51" pos:end="181:53">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="185:13" pos:end="185:51">/* look only for expander root buses */</comment>

            <if_stmt pos:start="187:13" pos:end="191:13"><if pos:start="187:13" pos:end="191:13">if <condition pos:start="187:16" pos:end="187:38">(<expr pos:start="187:17" pos:end="187:37"><operator pos:start="187:17" pos:end="187:17">!</operator><call pos:start="187:18" pos:end="187:37"><name pos:start="187:18" pos:end="187:32">pci_bus_is_root</name><argument_list pos:start="187:33" pos:end="187:37">(<argument pos:start="187:34" pos:end="187:36"><expr pos:start="187:34" pos:end="187:36"><name pos:start="187:34" pos:end="187:36">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:40" pos:end="191:13">{<block_content pos:start="189:17" pos:end="189:25">

                <continue pos:start="189:17" pos:end="189:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="195:13" pos:end="199:13"><if pos:start="195:13" pos:end="199:13">if <condition pos:start="195:16" pos:end="195:41">(<expr pos:start="195:17" pos:end="195:40"><name pos:start="195:17" pos:end="195:23">bus_num</name> <operator pos:start="195:25" pos:end="195:25">&lt;</operator> <name pos:start="195:27" pos:end="195:40">root_bus_limit</name></expr>)</condition> <block pos:start="195:43" pos:end="199:13">{<block_content pos:start="197:17" pos:end="197:45">

                <expr_stmt pos:start="197:17" pos:end="197:45"><expr pos:start="197:17" pos:end="197:44"><name pos:start="197:17" pos:end="197:30">root_bus_limit</name> <operator pos:start="197:32" pos:end="197:32">=</operator> <name pos:start="197:34" pos:end="197:40">bus_num</name> <operator pos:start="197:42" pos:end="197:42">-</operator> <literal type="number" pos:start="197:44" pos:end="197:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="203:13" pos:end="203:39"><expr pos:start="203:13" pos:end="203:38"><name pos:start="203:13" pos:end="203:17">scope</name> <operator pos:start="203:19" pos:end="203:19">=</operator> <call pos:start="203:21" pos:end="203:38"><name pos:start="203:21" pos:end="203:29">aml_scope</name><argument_list pos:start="203:30" pos:end="203:38">(<argument pos:start="203:31" pos:end="203:37"><expr pos:start="203:31" pos:end="203:37"><literal type="string" pos:start="203:31" pos:end="203:37">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:49"><expr pos:start="205:13" pos:end="205:48"><name pos:start="205:13" pos:end="205:15">dev</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <call pos:start="205:19" pos:end="205:48"><name pos:start="205:19" pos:end="205:28">aml_device</name><argument_list pos:start="205:29" pos:end="205:48">(<argument pos:start="205:30" pos:end="205:38"><expr pos:start="205:30" pos:end="205:38"><literal type="string" pos:start="205:30" pos:end="205:38">"PC%.02X"</literal></expr></argument>, <argument pos:start="205:41" pos:end="205:47"><expr pos:start="205:41" pos:end="205:47"><name pos:start="205:41" pos:end="205:47">bus_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:69"><expr pos:start="207:13" pos:end="207:68"><call pos:start="207:13" pos:end="207:68"><name pos:start="207:13" pos:end="207:22">aml_append</name><argument_list pos:start="207:23" pos:end="207:68">(<argument pos:start="207:24" pos:end="207:26"><expr pos:start="207:24" pos:end="207:26"><name pos:start="207:24" pos:end="207:26">dev</name></expr></argument>, <argument pos:start="207:29" pos:end="207:67"><expr pos:start="207:29" pos:end="207:67"><call pos:start="207:29" pos:end="207:67"><name pos:start="207:29" pos:end="207:41">aml_name_decl</name><argument_list pos:start="207:42" pos:end="207:67">(<argument pos:start="207:43" pos:end="207:48"><expr pos:start="207:43" pos:end="207:48"><literal type="string" pos:start="207:43" pos:end="207:48">"_UID"</literal></expr></argument>, <argument pos:start="207:51" pos:end="207:66"><expr pos:start="207:51" pos:end="207:66"><call pos:start="207:51" pos:end="207:66"><name pos:start="207:51" pos:end="207:57">aml_int</name><argument_list pos:start="207:58" pos:end="207:66">(<argument pos:start="207:59" pos:end="207:65"><expr pos:start="207:59" pos:end="207:65"><name pos:start="207:59" pos:end="207:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:74"><expr pos:start="209:13" pos:end="209:73"><call pos:start="209:13" pos:end="209:73"><name pos:start="209:13" pos:end="209:22">aml_append</name><argument_list pos:start="209:23" pos:end="209:73">(<argument pos:start="209:24" pos:end="209:26"><expr pos:start="209:24" pos:end="209:26"><name pos:start="209:24" pos:end="209:26">dev</name></expr></argument>, <argument pos:start="209:29" pos:end="209:72"><expr pos:start="209:29" pos:end="209:72"><call pos:start="209:29" pos:end="209:72"><name pos:start="209:29" pos:end="209:41">aml_name_decl</name><argument_list pos:start="209:42" pos:end="209:72">(<argument pos:start="209:43" pos:end="209:48"><expr pos:start="209:43" pos:end="209:48"><literal type="string" pos:start="209:43" pos:end="209:48">"_HID"</literal></expr></argument>, <argument pos:start="209:51" pos:end="209:71"><expr pos:start="209:51" pos:end="209:71"><call pos:start="209:51" pos:end="209:71"><name pos:start="209:51" pos:end="209:60">aml_eisaid</name><argument_list pos:start="209:61" pos:end="209:71">(<argument pos:start="209:62" pos:end="209:70"><expr pos:start="209:62" pos:end="209:70"><literal type="string" pos:start="209:62" pos:end="209:70">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:69"><expr pos:start="211:13" pos:end="211:68"><call pos:start="211:13" pos:end="211:68"><name pos:start="211:13" pos:end="211:22">aml_append</name><argument_list pos:start="211:23" pos:end="211:68">(<argument pos:start="211:24" pos:end="211:26"><expr pos:start="211:24" pos:end="211:26"><name pos:start="211:24" pos:end="211:26">dev</name></expr></argument>, <argument pos:start="211:29" pos:end="211:67"><expr pos:start="211:29" pos:end="211:67"><call pos:start="211:29" pos:end="211:67"><name pos:start="211:29" pos:end="211:41">aml_name_decl</name><argument_list pos:start="211:42" pos:end="211:67">(<argument pos:start="211:43" pos:end="211:48"><expr pos:start="211:43" pos:end="211:48"><literal type="string" pos:start="211:43" pos:end="211:48">"_BBN"</literal></expr></argument>, <argument pos:start="211:51" pos:end="211:66"><expr pos:start="211:51" pos:end="211:66"><call pos:start="211:51" pos:end="211:66"><name pos:start="211:51" pos:end="211:57">aml_int</name><argument_list pos:start="211:58" pos:end="211:66">(<argument pos:start="211:59" pos:end="211:65"><expr pos:start="211:59" pos:end="211:65"><name pos:start="211:59" pos:end="211:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="217:13"><if pos:start="213:13" pos:end="217:13">if <condition pos:start="213:16" pos:end="213:40">(<expr pos:start="213:17" pos:end="213:39"><call pos:start="213:17" pos:end="213:39"><name pos:start="213:17" pos:end="213:34">pci_bus_is_express</name><argument_list pos:start="213:35" pos:end="213:39">(<argument pos:start="213:36" pos:end="213:38"><expr pos:start="213:36" pos:end="213:38"><name pos:start="213:36" pos:end="213:38">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="213:42" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:56">

                <expr_stmt pos:start="215:17" pos:end="215:56"><expr pos:start="215:17" pos:end="215:55"><call pos:start="215:17" pos:end="215:55"><name pos:start="215:17" pos:end="215:26">aml_append</name><argument_list pos:start="215:27" pos:end="215:55">(<argument pos:start="215:28" pos:end="215:30"><expr pos:start="215:28" pos:end="215:30"><name pos:start="215:28" pos:end="215:30">dev</name></expr></argument>, <argument pos:start="215:33" pos:end="215:54"><expr pos:start="215:33" pos:end="215:54"><call pos:start="215:33" pos:end="215:54"><name pos:start="215:33" pos:end="215:52">build_q35_osc_method</name><argument_list pos:start="215:53" pos:end="215:54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="221:13" pos:end="225:13"><if pos:start="221:13" pos:end="225:13">if <condition pos:start="221:16" pos:end="221:50">(<expr pos:start="221:17" pos:end="221:49"><name pos:start="221:17" pos:end="221:25">numa_node</name> <operator pos:start="221:27" pos:end="221:28">!=</operator> <name pos:start="221:30" pos:end="221:49">NUMA_NODE_UNASSIGNED</name></expr>)</condition> <block pos:start="221:52" pos:end="225:13">{<block_content pos:start="223:17" pos:end="223:75">

                <expr_stmt pos:start="223:17" pos:end="223:75"><expr pos:start="223:17" pos:end="223:74"><call pos:start="223:17" pos:end="223:74"><name pos:start="223:17" pos:end="223:26">aml_append</name><argument_list pos:start="223:27" pos:end="223:74">(<argument pos:start="223:28" pos:end="223:30"><expr pos:start="223:28" pos:end="223:30"><name pos:start="223:28" pos:end="223:30">dev</name></expr></argument>, <argument pos:start="223:33" pos:end="223:73"><expr pos:start="223:33" pos:end="223:73"><call pos:start="223:33" pos:end="223:73"><name pos:start="223:33" pos:end="223:45">aml_name_decl</name><argument_list pos:start="223:46" pos:end="223:73">(<argument pos:start="223:47" pos:end="223:52"><expr pos:start="223:47" pos:end="223:52"><literal type="string" pos:start="223:47" pos:end="223:52">"_PXM"</literal></expr></argument>, <argument pos:start="223:55" pos:end="223:72"><expr pos:start="223:55" pos:end="223:72"><call pos:start="223:55" pos:end="223:72"><name pos:start="223:55" pos:end="223:61">aml_int</name><argument_list pos:start="223:62" pos:end="223:72">(<argument pos:start="223:63" pos:end="223:71"><expr pos:start="223:63" pos:end="223:71"><name pos:start="223:63" pos:end="223:71">numa_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="229:13" pos:end="229:46"><expr pos:start="229:13" pos:end="229:45"><call pos:start="229:13" pos:end="229:45"><name pos:start="229:13" pos:end="229:22">aml_append</name><argument_list pos:start="229:23" pos:end="229:45">(<argument pos:start="229:24" pos:end="229:26"><expr pos:start="229:24" pos:end="229:26"><name pos:start="229:24" pos:end="229:26">dev</name></expr></argument>, <argument pos:start="229:29" pos:end="229:44"><expr pos:start="229:29" pos:end="229:44"><call pos:start="229:29" pos:end="229:44"><name pos:start="229:29" pos:end="229:37">build_prt</name><argument_list pos:start="229:38" pos:end="229:44">(<argument pos:start="229:39" pos:end="229:43"><expr pos:start="229:39" pos:end="229:43"><name pos:start="229:39" pos:end="229:43">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:79"><expr pos:start="231:13" pos:end="231:78"><name pos:start="231:13" pos:end="231:15">crs</name> <operator pos:start="231:17" pos:end="231:17">=</operator> <call pos:start="231:19" pos:end="231:78"><name pos:start="231:19" pos:end="231:27">build_crs</name><argument_list pos:start="231:28" pos:end="231:78">(<argument pos:start="231:29" pos:end="231:61"><expr pos:start="231:29" pos:end="231:61"><call pos:start="231:29" pos:end="231:61"><name pos:start="231:29" pos:end="231:43">PCI_HOST_BRIDGE</name><argument_list pos:start="231:44" pos:end="231:61">(<argument pos:start="231:45" pos:end="231:60"><expr pos:start="231:45" pos:end="231:60"><call pos:start="231:45" pos:end="231:52"><name pos:start="231:45" pos:end="231:47">BUS</name><argument_list pos:start="231:48" pos:end="231:52">(<argument pos:start="231:49" pos:end="231:51"><expr pos:start="231:49" pos:end="231:51"><name pos:start="231:49" pos:end="231:51">bus</name></expr></argument>)</argument_list></call><operator pos:start="231:53" pos:end="231:54">-&gt;</operator><name pos:start="231:55" pos:end="231:60">parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="231:64" pos:end="231:77"><expr pos:start="231:64" pos:end="231:77"><operator pos:start="231:64" pos:end="231:64">&amp;</operator><name pos:start="231:65" pos:end="231:77">crs_range_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:56"><expr pos:start="233:13" pos:end="233:55"><call pos:start="233:13" pos:end="233:55"><name pos:start="233:13" pos:end="233:22">aml_append</name><argument_list pos:start="233:23" pos:end="233:55">(<argument pos:start="233:24" pos:end="233:26"><expr pos:start="233:24" pos:end="233:26"><name pos:start="233:24" pos:end="233:26">dev</name></expr></argument>, <argument pos:start="233:29" pos:end="233:54"><expr pos:start="233:29" pos:end="233:54"><call pos:start="233:29" pos:end="233:54"><name pos:start="233:29" pos:end="233:41">aml_name_decl</name><argument_list pos:start="233:42" pos:end="233:54">(<argument pos:start="233:43" pos:end="233:48"><expr pos:start="233:43" pos:end="233:48"><literal type="string" pos:start="233:43" pos:end="233:48">"_CRS"</literal></expr></argument>, <argument pos:start="233:51" pos:end="233:53"><expr pos:start="233:51" pos:end="233:53"><name pos:start="233:51" pos:end="233:53">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:35"><expr pos:start="235:13" pos:end="235:34"><call pos:start="235:13" pos:end="235:34"><name pos:start="235:13" pos:end="235:22">aml_append</name><argument_list pos:start="235:23" pos:end="235:34">(<argument pos:start="235:24" pos:end="235:28"><expr pos:start="235:24" pos:end="235:28"><name pos:start="235:24" pos:end="235:28">scope</name></expr></argument>, <argument pos:start="235:31" pos:end="235:33"><expr pos:start="235:31" pos:end="235:33"><name pos:start="235:31" pos:end="235:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:36"><expr pos:start="237:13" pos:end="237:35"><call pos:start="237:13" pos:end="237:35"><name pos:start="237:13" pos:end="237:22">aml_append</name><argument_list pos:start="237:23" pos:end="237:35">(<argument pos:start="237:24" pos:end="237:27"><expr pos:start="237:24" pos:end="237:27"><name pos:start="237:24" pos:end="237:27">dsdt</name></expr></argument>, <argument pos:start="237:30" pos:end="237:34"><expr pos:start="237:30" pos:end="237:34"><name pos:start="237:30" pos:end="237:34">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:36"><expr pos:start="245:5" pos:end="245:35"><name pos:start="245:5" pos:end="245:9">scope</name> <operator pos:start="245:11" pos:end="245:11">=</operator> <call pos:start="245:13" pos:end="245:35"><name pos:start="245:13" pos:end="245:21">aml_scope</name><argument_list pos:start="245:22" pos:end="245:35">(<argument pos:start="245:23" pos:end="245:34"><expr pos:start="245:23" pos:end="245:34"><literal type="string" pos:start="245:23" pos:end="245:34">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="247:5" pos:end="247:25">/* build PCI0._CRS */</comment>

    <expr_stmt pos:start="249:5" pos:end="249:34"><expr pos:start="249:5" pos:end="249:33"><name pos:start="249:5" pos:end="249:7">crs</name> <operator pos:start="249:9" pos:end="249:9">=</operator> <call pos:start="249:11" pos:end="249:33"><name pos:start="249:11" pos:end="249:31">aml_resource_template</name><argument_list pos:start="249:32" pos:end="249:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="257:57"><expr pos:start="251:5" pos:end="257:56"><call pos:start="251:5" pos:end="257:56"><name pos:start="251:5" pos:end="251:14">aml_append</name><argument_list pos:start="251:15" pos:end="257:56">(<argument pos:start="251:16" pos:end="251:18"><expr pos:start="251:16" pos:end="251:18"><name pos:start="251:16" pos:end="251:18">crs</name></expr></argument>,

        <argument pos:start="253:9" pos:end="257:55"><expr pos:start="253:9" pos:end="257:55"><call pos:start="253:9" pos:end="257:55"><name pos:start="253:9" pos:end="253:27">aml_word_bus_number</name><argument_list pos:start="253:28" pos:end="257:55">(<argument pos:start="253:29" pos:end="253:41"><expr pos:start="253:29" pos:end="253:41"><name pos:start="253:29" pos:end="253:41">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="253:44" pos:end="253:56"><expr pos:start="253:44" pos:end="253:56"><name pos:start="253:44" pos:end="253:56">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="253:59" pos:end="253:72"><expr pos:start="253:59" pos:end="253:72"><name pos:start="253:59" pos:end="253:72">AML_POS_DECODE</name></expr></argument>,

                            <argument pos:start="255:29" pos:end="255:34"><expr pos:start="255:29" pos:end="255:34"><literal type="number" pos:start="255:29" pos:end="255:34">0x0000</literal></expr></argument>, <argument pos:start="255:37" pos:end="255:39"><expr pos:start="255:37" pos:end="255:39"><literal type="number" pos:start="255:37" pos:end="255:39">0x0</literal></expr></argument>, <argument pos:start="255:42" pos:end="255:55"><expr pos:start="255:42" pos:end="255:55"><name pos:start="255:42" pos:end="255:55">root_bus_limit</name></expr></argument>,

                            <argument pos:start="257:29" pos:end="257:34"><expr pos:start="257:29" pos:end="257:34"><literal type="number" pos:start="257:29" pos:end="257:34">0x0000</literal></expr></argument>, <argument pos:start="257:37" pos:end="257:54"><expr pos:start="257:37" pos:end="257:54"><name pos:start="257:37" pos:end="257:50">root_bus_limit</name> <operator pos:start="257:52" pos:end="257:52">+</operator> <literal type="number" pos:start="257:54" pos:end="257:54">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:70"><expr pos:start="259:5" pos:end="259:69"><call pos:start="259:5" pos:end="259:69"><name pos:start="259:5" pos:end="259:14">aml_append</name><argument_list pos:start="259:15" pos:end="259:69">(<argument pos:start="259:16" pos:end="259:18"><expr pos:start="259:16" pos:end="259:18"><name pos:start="259:16" pos:end="259:18">crs</name></expr></argument>, <argument pos:start="259:21" pos:end="259:68"><expr pos:start="259:21" pos:end="259:68"><call pos:start="259:21" pos:end="259:68"><name pos:start="259:21" pos:end="259:26">aml_io</name><argument_list pos:start="259:27" pos:end="259:68">(<argument pos:start="259:28" pos:end="259:39"><expr pos:start="259:28" pos:end="259:39"><name pos:start="259:28" pos:end="259:39">AML_DECODE16</name></expr></argument>, <argument pos:start="259:42" pos:end="259:47"><expr pos:start="259:42" pos:end="259:47"><literal type="number" pos:start="259:42" pos:end="259:47">0x0CF8</literal></expr></argument>, <argument pos:start="259:50" pos:end="259:55"><expr pos:start="259:50" pos:end="259:55"><literal type="number" pos:start="259:50" pos:end="259:55">0x0CF8</literal></expr></argument>, <argument pos:start="259:58" pos:end="259:61"><expr pos:start="259:58" pos:end="259:61"><literal type="number" pos:start="259:58" pos:end="259:61">0x01</literal></expr></argument>, <argument pos:start="259:64" pos:end="259:67"><expr pos:start="259:64" pos:end="259:67"><literal type="number" pos:start="259:64" pos:end="259:67">0x08</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="263:5" pos:end="269:61"><expr pos:start="263:5" pos:end="269:60"><call pos:start="263:5" pos:end="269:60"><name pos:start="263:5" pos:end="263:14">aml_append</name><argument_list pos:start="263:15" pos:end="269:60">(<argument pos:start="263:16" pos:end="263:18"><expr pos:start="263:16" pos:end="263:18"><name pos:start="263:16" pos:end="263:18">crs</name></expr></argument>,

        <argument pos:start="265:9" pos:end="269:59"><expr pos:start="265:9" pos:end="269:59"><call pos:start="265:9" pos:end="269:59"><name pos:start="265:9" pos:end="265:19">aml_word_io</name><argument_list pos:start="265:20" pos:end="269:59">(<argument pos:start="265:21" pos:end="265:33"><expr pos:start="265:21" pos:end="265:33"><name pos:start="265:21" pos:end="265:33">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="265:36" pos:end="265:48"><expr pos:start="265:36" pos:end="265:48"><name pos:start="265:36" pos:end="265:48">AML_MAX_FIXED</name></expr></argument>,

                    <argument pos:start="267:21" pos:end="267:34"><expr pos:start="267:21" pos:end="267:34"><name pos:start="267:21" pos:end="267:34">AML_POS_DECODE</name></expr></argument>, <argument pos:start="267:37" pos:end="267:52"><expr pos:start="267:37" pos:end="267:52"><name pos:start="267:37" pos:end="267:52">AML_ENTIRE_RANGE</name></expr></argument>,

                    <argument pos:start="269:21" pos:end="269:26"><expr pos:start="269:21" pos:end="269:26"><literal type="number" pos:start="269:21" pos:end="269:26">0x0000</literal></expr></argument>, <argument pos:start="269:29" pos:end="269:34"><expr pos:start="269:29" pos:end="269:34"><literal type="number" pos:start="269:29" pos:end="269:34">0x0000</literal></expr></argument>, <argument pos:start="269:37" pos:end="269:42"><expr pos:start="269:37" pos:end="269:42"><literal type="number" pos:start="269:37" pos:end="269:42">0x0CF7</literal></expr></argument>, <argument pos:start="269:45" pos:end="269:50"><expr pos:start="269:45" pos:end="269:50"><literal type="number" pos:start="269:45" pos:end="269:50">0x0000</literal></expr></argument>, <argument pos:start="269:53" pos:end="269:58"><expr pos:start="269:53" pos:end="269:58"><literal type="number" pos:start="269:53" pos:end="269:58">0x0CF8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="273:5" pos:end="273:74"><expr pos:start="273:5" pos:end="273:73"><call pos:start="273:5" pos:end="273:73"><name pos:start="273:5" pos:end="273:32">crs_replace_with_free_ranges</name><argument_list pos:start="273:33" pos:end="273:73">(<argument pos:start="273:34" pos:end="273:56"><expr pos:start="273:34" pos:end="273:56"><name pos:start="273:34" pos:end="273:56"><name pos:start="273:34" pos:end="273:46">crs_range_set</name><operator pos:start="273:47" pos:end="273:47">.</operator><name pos:start="273:48" pos:end="273:56">io_ranges</name></name></expr></argument>, <argument pos:start="273:59" pos:end="273:64"><expr pos:start="273:59" pos:end="273:64"><literal type="number" pos:start="273:59" pos:end="273:64">0x0D00</literal></expr></argument>, <argument pos:start="273:67" pos:end="273:72"><expr pos:start="273:67" pos:end="273:72"><literal type="number" pos:start="273:67" pos:end="273:72">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="275:5" pos:end="289:5">for <control pos:start="275:9" pos:end="275:54">(<init pos:start="275:10" pos:end="275:15"><expr pos:start="275:10" pos:end="275:14"><name pos:start="275:10" pos:end="275:10">i</name> <operator pos:start="275:12" pos:end="275:12">=</operator> <literal type="number" pos:start="275:14" pos:end="275:14">0</literal></expr>;</init> <condition pos:start="275:17" pos:end="275:49"><expr pos:start="275:17" pos:end="275:48"><name pos:start="275:17" pos:end="275:17">i</name> <operator pos:start="275:19" pos:end="275:19">&lt;</operator> <name pos:start="275:21" pos:end="275:48"><name pos:start="275:21" pos:end="275:33">crs_range_set</name><operator pos:start="275:34" pos:end="275:34">.</operator><name pos:start="275:35" pos:end="275:43">io_ranges</name><operator pos:start="275:44" pos:end="275:45">-&gt;</operator><name pos:start="275:46" pos:end="275:48">len</name></name></expr>;</condition> <incr pos:start="275:51" pos:end="275:53"><expr pos:start="275:51" pos:end="275:53"><name pos:start="275:51" pos:end="275:51">i</name><operator pos:start="275:52" pos:end="275:53">++</operator></expr></incr>)</control> <block pos:start="275:56" pos:end="289:5">{<block_content pos:start="277:9" pos:end="287:65">

        <expr_stmt pos:start="277:9" pos:end="277:62"><expr pos:start="277:9" pos:end="277:61"><name pos:start="277:9" pos:end="277:13">entry</name> <operator pos:start="277:15" pos:end="277:15">=</operator> <call pos:start="277:17" pos:end="277:61"><name pos:start="277:17" pos:end="277:33">g_ptr_array_index</name><argument_list pos:start="277:34" pos:end="277:61">(<argument pos:start="277:35" pos:end="277:57"><expr pos:start="277:35" pos:end="277:57"><name pos:start="277:35" pos:end="277:57"><name pos:start="277:35" pos:end="277:47">crs_range_set</name><operator pos:start="277:48" pos:end="277:48">.</operator><name pos:start="277:49" pos:end="277:57">io_ranges</name></name></expr></argument>, <argument pos:start="277:60" pos:end="277:60"><expr pos:start="277:60" pos:end="277:60"><name pos:start="277:60" pos:end="277:60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="287:65"><expr pos:start="279:9" pos:end="287:64"><call pos:start="279:9" pos:end="287:64"><name pos:start="279:9" pos:end="279:18">aml_append</name><argument_list pos:start="279:19" pos:end="287:64">(<argument pos:start="279:20" pos:end="279:22"><expr pos:start="279:20" pos:end="279:22"><name pos:start="279:20" pos:end="279:22">crs</name></expr></argument>,

            <argument pos:start="281:13" pos:end="287:63"><expr pos:start="281:13" pos:end="287:63"><call pos:start="281:13" pos:end="287:63"><name pos:start="281:13" pos:end="281:23">aml_word_io</name><argument_list pos:start="281:24" pos:end="287:63">(<argument pos:start="281:25" pos:end="281:37"><expr pos:start="281:25" pos:end="281:37"><name pos:start="281:25" pos:end="281:37">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="281:40" pos:end="281:52"><expr pos:start="281:40" pos:end="281:52"><name pos:start="281:40" pos:end="281:52">AML_MAX_FIXED</name></expr></argument>,

                        <argument pos:start="283:25" pos:end="283:38"><expr pos:start="283:25" pos:end="283:38"><name pos:start="283:25" pos:end="283:38">AML_POS_DECODE</name></expr></argument>, <argument pos:start="283:41" pos:end="283:56"><expr pos:start="283:41" pos:end="283:56"><name pos:start="283:41" pos:end="283:56">AML_ENTIRE_RANGE</name></expr></argument>,

                        <argument pos:start="285:25" pos:end="285:30"><expr pos:start="285:25" pos:end="285:30"><literal type="number" pos:start="285:25" pos:end="285:30">0x0000</literal></expr></argument>, <argument pos:start="285:33" pos:end="285:43"><expr pos:start="285:33" pos:end="285:43"><name pos:start="285:33" pos:end="285:43"><name pos:start="285:33" pos:end="285:37">entry</name><operator pos:start="285:38" pos:end="285:39">-&gt;</operator><name pos:start="285:40" pos:end="285:43">base</name></name></expr></argument>, <argument pos:start="285:46" pos:end="285:57"><expr pos:start="285:46" pos:end="285:57"><name pos:start="285:46" pos:end="285:57"><name pos:start="285:46" pos:end="285:50">entry</name><operator pos:start="285:51" pos:end="285:52">-&gt;</operator><name pos:start="285:53" pos:end="285:57">limit</name></name></expr></argument>,

                        <argument pos:start="287:25" pos:end="287:30"><expr pos:start="287:25" pos:end="287:30"><literal type="number" pos:start="287:25" pos:end="287:30">0x0000</literal></expr></argument>, <argument pos:start="287:33" pos:end="287:62"><expr pos:start="287:33" pos:end="287:62"><name pos:start="287:33" pos:end="287:44"><name pos:start="287:33" pos:end="287:37">entry</name><operator pos:start="287:38" pos:end="287:39">-&gt;</operator><name pos:start="287:40" pos:end="287:44">limit</name></name> <operator pos:start="287:46" pos:end="287:46">-</operator> <name pos:start="287:48" pos:end="287:58"><name pos:start="287:48" pos:end="287:52">entry</name><operator pos:start="287:53" pos:end="287:54">-&gt;</operator><name pos:start="287:55" pos:end="287:58">base</name></name> <operator pos:start="287:60" pos:end="287:60">+</operator> <literal type="number" pos:start="287:62" pos:end="287:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="293:5" pos:end="299:68"><expr pos:start="293:5" pos:end="299:67"><call pos:start="293:5" pos:end="299:67"><name pos:start="293:5" pos:end="293:14">aml_append</name><argument_list pos:start="293:15" pos:end="299:67">(<argument pos:start="293:16" pos:end="293:18"><expr pos:start="293:16" pos:end="293:18"><name pos:start="293:16" pos:end="293:18">crs</name></expr></argument>,

        <argument pos:start="295:9" pos:end="299:66"><expr pos:start="295:9" pos:end="299:66"><call pos:start="295:9" pos:end="299:66"><name pos:start="295:9" pos:end="295:24">aml_dword_memory</name><argument_list pos:start="295:25" pos:end="299:66">(<argument pos:start="295:26" pos:end="295:39"><expr pos:start="295:26" pos:end="295:39"><name pos:start="295:26" pos:end="295:39">AML_POS_DECODE</name></expr></argument>, <argument pos:start="295:42" pos:end="295:54"><expr pos:start="295:42" pos:end="295:54"><name pos:start="295:42" pos:end="295:54">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="295:57" pos:end="295:69"><expr pos:start="295:57" pos:end="295:69"><name pos:start="295:57" pos:end="295:69">AML_MAX_FIXED</name></expr></argument>,

                         <argument pos:start="297:26" pos:end="297:38"><expr pos:start="297:26" pos:end="297:38"><name pos:start="297:26" pos:end="297:38">AML_CACHEABLE</name></expr></argument>, <argument pos:start="297:41" pos:end="297:54"><expr pos:start="297:41" pos:end="297:54"><name pos:start="297:41" pos:end="297:54">AML_READ_WRITE</name></expr></argument>,

                         <argument pos:start="299:26" pos:end="299:26"><expr pos:start="299:26" pos:end="299:26"><literal type="number" pos:start="299:26" pos:end="299:26">0</literal></expr></argument>, <argument pos:start="299:29" pos:end="299:38"><expr pos:start="299:29" pos:end="299:38"><literal type="number" pos:start="299:29" pos:end="299:38">0x000A0000</literal></expr></argument>, <argument pos:start="299:41" pos:end="299:50"><expr pos:start="299:41" pos:end="299:50"><literal type="number" pos:start="299:41" pos:end="299:50">0x000BFFFF</literal></expr></argument>, <argument pos:start="299:53" pos:end="299:53"><expr pos:start="299:53" pos:end="299:53"><literal type="number" pos:start="299:53" pos:end="299:53">0</literal></expr></argument>, <argument pos:start="299:56" pos:end="299:65"><expr pos:start="299:56" pos:end="299:65"><literal type="number" pos:start="299:56" pos:end="299:65">0x00020000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="303:5" pos:end="307:54"><expr pos:start="303:5" pos:end="307:53"><call pos:start="303:5" pos:end="307:53"><name pos:start="303:5" pos:end="303:32">crs_replace_with_free_ranges</name><argument_list pos:start="303:33" pos:end="307:53">(<argument pos:start="303:34" pos:end="303:57"><expr pos:start="303:34" pos:end="303:57"><name pos:start="303:34" pos:end="303:57"><name pos:start="303:34" pos:end="303:46">crs_range_set</name><operator pos:start="303:47" pos:end="303:47">.</operator><name pos:start="303:48" pos:end="303:57">mem_ranges</name></name></expr></argument>,

                                 <argument pos:start="305:34" pos:end="305:52"><expr pos:start="305:34" pos:end="305:52"><call pos:start="305:34" pos:end="305:52"><name pos:start="305:34" pos:end="305:42">range_lob</name><argument_list pos:start="305:43" pos:end="305:52">(<argument pos:start="305:44" pos:end="305:51"><expr pos:start="305:44" pos:end="305:51"><name pos:start="305:44" pos:end="305:51">pci_hole</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="307:34" pos:end="307:52"><expr pos:start="307:34" pos:end="307:52"><call pos:start="307:34" pos:end="307:52"><name pos:start="307:34" pos:end="307:42">range_upb</name><argument_list pos:start="307:43" pos:end="307:52">(<argument pos:start="307:44" pos:end="307:51"><expr pos:start="307:44" pos:end="307:51"><name pos:start="307:44" pos:end="307:51">pci_hole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="309:5" pos:end="323:5">for <control pos:start="309:9" pos:end="309:55">(<init pos:start="309:10" pos:end="309:15"><expr pos:start="309:10" pos:end="309:14"><name pos:start="309:10" pos:end="309:10">i</name> <operator pos:start="309:12" pos:end="309:12">=</operator> <literal type="number" pos:start="309:14" pos:end="309:14">0</literal></expr>;</init> <condition pos:start="309:17" pos:end="309:50"><expr pos:start="309:17" pos:end="309:49"><name pos:start="309:17" pos:end="309:17">i</name> <operator pos:start="309:19" pos:end="309:19">&lt;</operator> <name pos:start="309:21" pos:end="309:49"><name pos:start="309:21" pos:end="309:33">crs_range_set</name><operator pos:start="309:34" pos:end="309:34">.</operator><name pos:start="309:35" pos:end="309:44">mem_ranges</name><operator pos:start="309:45" pos:end="309:46">-&gt;</operator><name pos:start="309:47" pos:end="309:49">len</name></name></expr>;</condition> <incr pos:start="309:52" pos:end="309:54"><expr pos:start="309:52" pos:end="309:54"><name pos:start="309:52" pos:end="309:52">i</name><operator pos:start="309:53" pos:end="309:54">++</operator></expr></incr>)</control> <block pos:start="309:57" pos:end="323:5">{<block_content pos:start="311:9" pos:end="321:65">

        <expr_stmt pos:start="311:9" pos:end="311:63"><expr pos:start="311:9" pos:end="311:62"><name pos:start="311:9" pos:end="311:13">entry</name> <operator pos:start="311:15" pos:end="311:15">=</operator> <call pos:start="311:17" pos:end="311:62"><name pos:start="311:17" pos:end="311:33">g_ptr_array_index</name><argument_list pos:start="311:34" pos:end="311:62">(<argument pos:start="311:35" pos:end="311:58"><expr pos:start="311:35" pos:end="311:58"><name pos:start="311:35" pos:end="311:58"><name pos:start="311:35" pos:end="311:47">crs_range_set</name><operator pos:start="311:48" pos:end="311:48">.</operator><name pos:start="311:49" pos:end="311:58">mem_ranges</name></name></expr></argument>, <argument pos:start="311:61" pos:end="311:61"><expr pos:start="311:61" pos:end="311:61"><name pos:start="311:61" pos:end="311:61">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="321:65"><expr pos:start="313:9" pos:end="321:64"><call pos:start="313:9" pos:end="321:64"><name pos:start="313:9" pos:end="313:18">aml_append</name><argument_list pos:start="313:19" pos:end="321:64">(<argument pos:start="313:20" pos:end="313:22"><expr pos:start="313:20" pos:end="313:22"><name pos:start="313:20" pos:end="313:22">crs</name></expr></argument>,

            <argument pos:start="315:13" pos:end="321:63"><expr pos:start="315:13" pos:end="321:63"><call pos:start="315:13" pos:end="321:63"><name pos:start="315:13" pos:end="315:28">aml_dword_memory</name><argument_list pos:start="315:29" pos:end="321:63">(<argument pos:start="315:30" pos:end="315:43"><expr pos:start="315:30" pos:end="315:43"><name pos:start="315:30" pos:end="315:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="315:46" pos:end="315:58"><expr pos:start="315:46" pos:end="315:58"><name pos:start="315:46" pos:end="315:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="315:61" pos:end="315:73"><expr pos:start="315:61" pos:end="315:73"><name pos:start="315:61" pos:end="315:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="317:30" pos:end="317:46"><expr pos:start="317:30" pos:end="317:46"><name pos:start="317:30" pos:end="317:46">AML_NON_CACHEABLE</name></expr></argument>, <argument pos:start="317:49" pos:end="317:62"><expr pos:start="317:49" pos:end="317:62"><name pos:start="317:49" pos:end="317:62">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="319:30" pos:end="319:30"><expr pos:start="319:30" pos:end="319:30"><literal type="number" pos:start="319:30" pos:end="319:30">0</literal></expr></argument>, <argument pos:start="319:33" pos:end="319:43"><expr pos:start="319:33" pos:end="319:43"><name pos:start="319:33" pos:end="319:43"><name pos:start="319:33" pos:end="319:37">entry</name><operator pos:start="319:38" pos:end="319:39">-&gt;</operator><name pos:start="319:40" pos:end="319:43">base</name></name></expr></argument>, <argument pos:start="319:46" pos:end="319:57"><expr pos:start="319:46" pos:end="319:57"><name pos:start="319:46" pos:end="319:57"><name pos:start="319:46" pos:end="319:50">entry</name><operator pos:start="319:51" pos:end="319:52">-&gt;</operator><name pos:start="319:53" pos:end="319:57">limit</name></name></expr></argument>,

                             <argument pos:start="321:30" pos:end="321:30"><expr pos:start="321:30" pos:end="321:30"><literal type="number" pos:start="321:30" pos:end="321:30">0</literal></expr></argument>, <argument pos:start="321:33" pos:end="321:62"><expr pos:start="321:33" pos:end="321:62"><name pos:start="321:33" pos:end="321:44"><name pos:start="321:33" pos:end="321:37">entry</name><operator pos:start="321:38" pos:end="321:39">-&gt;</operator><name pos:start="321:40" pos:end="321:44">limit</name></name> <operator pos:start="321:46" pos:end="321:46">-</operator> <name pos:start="321:48" pos:end="321:58"><name pos:start="321:48" pos:end="321:52">entry</name><operator pos:start="321:53" pos:end="321:54">-&gt;</operator><name pos:start="321:55" pos:end="321:58">base</name></name> <operator pos:start="321:60" pos:end="321:60">+</operator> <literal type="number" pos:start="321:62" pos:end="321:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="327:5" pos:end="353:5"><if pos:start="327:5" pos:end="353:5">if <condition pos:start="327:8" pos:end="327:36">(<expr pos:start="327:9" pos:end="327:35"><operator pos:start="327:9" pos:end="327:9">!</operator><call pos:start="327:10" pos:end="327:35"><name pos:start="327:10" pos:end="327:23">range_is_empty</name><argument_list pos:start="327:24" pos:end="327:35">(<argument pos:start="327:25" pos:end="327:34"><expr pos:start="327:25" pos:end="327:34"><name pos:start="327:25" pos:end="327:34">pci_hole64</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:38" pos:end="353:5">{<block_content pos:start="329:9" pos:end="351:9">

        <expr_stmt pos:start="329:9" pos:end="333:60"><expr pos:start="329:9" pos:end="333:59"><call pos:start="329:9" pos:end="333:59"><name pos:start="329:9" pos:end="329:36">crs_replace_with_free_ranges</name><argument_list pos:start="329:37" pos:end="333:59">(<argument pos:start="329:38" pos:end="329:67"><expr pos:start="329:38" pos:end="329:67"><name pos:start="329:38" pos:end="329:67"><name pos:start="329:38" pos:end="329:50">crs_range_set</name><operator pos:start="329:51" pos:end="329:51">.</operator><name pos:start="329:52" pos:end="329:67">mem_64bit_ranges</name></name></expr></argument>,

                                     <argument pos:start="331:38" pos:end="331:58"><expr pos:start="331:38" pos:end="331:58"><call pos:start="331:38" pos:end="331:58"><name pos:start="331:38" pos:end="331:46">range_lob</name><argument_list pos:start="331:47" pos:end="331:58">(<argument pos:start="331:48" pos:end="331:57"><expr pos:start="331:48" pos:end="331:57"><name pos:start="331:48" pos:end="331:57">pci_hole64</name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="333:38" pos:end="333:58"><expr pos:start="333:38" pos:end="333:58"><call pos:start="333:38" pos:end="333:58"><name pos:start="333:38" pos:end="333:46">range_upb</name><argument_list pos:start="333:47" pos:end="333:58">(<argument pos:start="333:48" pos:end="333:57"><expr pos:start="333:48" pos:end="333:57"><name pos:start="333:48" pos:end="333:57">pci_hole64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="335:9" pos:end="351:9">for <control pos:start="335:13" pos:end="335:65">(<init pos:start="335:14" pos:end="335:19"><expr pos:start="335:14" pos:end="335:18"><name pos:start="335:14" pos:end="335:14">i</name> <operator pos:start="335:16" pos:end="335:16">=</operator> <literal type="number" pos:start="335:18" pos:end="335:18">0</literal></expr>;</init> <condition pos:start="335:21" pos:end="335:60"><expr pos:start="335:21" pos:end="335:59"><name pos:start="335:21" pos:end="335:21">i</name> <operator pos:start="335:23" pos:end="335:23">&lt;</operator> <name pos:start="335:25" pos:end="335:59"><name pos:start="335:25" pos:end="335:37">crs_range_set</name><operator pos:start="335:38" pos:end="335:38">.</operator><name pos:start="335:39" pos:end="335:54">mem_64bit_ranges</name><operator pos:start="335:55" pos:end="335:56">-&gt;</operator><name pos:start="335:57" pos:end="335:59">len</name></name></expr>;</condition> <incr pos:start="335:62" pos:end="335:64"><expr pos:start="335:62" pos:end="335:64"><name pos:start="335:62" pos:end="335:62">i</name><operator pos:start="335:63" pos:end="335:64">++</operator></expr></incr>)</control> <block pos:start="335:67" pos:end="351:9">{<block_content pos:start="337:13" pos:end="349:76">

            <expr_stmt pos:start="337:13" pos:end="337:73"><expr pos:start="337:13" pos:end="337:72"><name pos:start="337:13" pos:end="337:17">entry</name> <operator pos:start="337:19" pos:end="337:19">=</operator> <call pos:start="337:21" pos:end="337:72"><name pos:start="337:21" pos:end="337:37">g_ptr_array_index</name><argument_list pos:start="337:38" pos:end="337:72">(<argument pos:start="337:39" pos:end="337:68"><expr pos:start="337:39" pos:end="337:68"><name pos:start="337:39" pos:end="337:68"><name pos:start="337:39" pos:end="337:51">crs_range_set</name><operator pos:start="337:52" pos:end="337:52">.</operator><name pos:start="337:53" pos:end="337:68">mem_64bit_ranges</name></name></expr></argument>, <argument pos:start="337:71" pos:end="337:71"><expr pos:start="337:71" pos:end="337:71"><name pos:start="337:71" pos:end="337:71">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="349:76"><expr pos:start="339:13" pos:end="349:75"><call pos:start="339:13" pos:end="349:75"><name pos:start="339:13" pos:end="339:22">aml_append</name><argument_list pos:start="339:23" pos:end="349:75">(<argument pos:start="339:24" pos:end="339:26"><expr pos:start="339:24" pos:end="339:26"><name pos:start="339:24" pos:end="339:26">crs</name></expr></argument>,

                       <argument pos:start="341:24" pos:end="349:74"><expr pos:start="341:24" pos:end="349:74"><call pos:start="341:24" pos:end="349:74"><name pos:start="341:24" pos:end="341:39">aml_qword_memory</name><argument_list pos:start="341:40" pos:end="349:74">(<argument pos:start="341:41" pos:end="341:54"><expr pos:start="341:41" pos:end="341:54"><name pos:start="341:41" pos:end="341:54">AML_POS_DECODE</name></expr></argument>, <argument pos:start="341:57" pos:end="341:69"><expr pos:start="341:57" pos:end="341:69"><name pos:start="341:57" pos:end="341:69">AML_MIN_FIXED</name></expr></argument>,

                                        <argument pos:start="343:41" pos:end="343:53"><expr pos:start="343:41" pos:end="343:53"><name pos:start="343:41" pos:end="343:53">AML_MAX_FIXED</name></expr></argument>,

                                        <argument pos:start="345:41" pos:end="345:53"><expr pos:start="345:41" pos:end="345:53"><name pos:start="345:41" pos:end="345:53">AML_CACHEABLE</name></expr></argument>, <argument pos:start="345:56" pos:end="345:69"><expr pos:start="345:56" pos:end="345:69"><name pos:start="345:56" pos:end="345:69">AML_READ_WRITE</name></expr></argument>,

                                        <argument pos:start="347:41" pos:end="347:41"><expr pos:start="347:41" pos:end="347:41"><literal type="number" pos:start="347:41" pos:end="347:41">0</literal></expr></argument>, <argument pos:start="347:44" pos:end="347:54"><expr pos:start="347:44" pos:end="347:54"><name pos:start="347:44" pos:end="347:54"><name pos:start="347:44" pos:end="347:48">entry</name><operator pos:start="347:49" pos:end="347:50">-&gt;</operator><name pos:start="347:51" pos:end="347:54">base</name></name></expr></argument>, <argument pos:start="347:57" pos:end="347:68"><expr pos:start="347:57" pos:end="347:68"><name pos:start="347:57" pos:end="347:68"><name pos:start="347:57" pos:end="347:61">entry</name><operator pos:start="347:62" pos:end="347:63">-&gt;</operator><name pos:start="347:64" pos:end="347:68">limit</name></name></expr></argument>,

                                        <argument pos:start="349:41" pos:end="349:41"><expr pos:start="349:41" pos:end="349:41"><literal type="number" pos:start="349:41" pos:end="349:41">0</literal></expr></argument>, <argument pos:start="349:44" pos:end="349:73"><expr pos:start="349:44" pos:end="349:73"><name pos:start="349:44" pos:end="349:55"><name pos:start="349:44" pos:end="349:48">entry</name><operator pos:start="349:49" pos:end="349:50">-&gt;</operator><name pos:start="349:51" pos:end="349:55">limit</name></name> <operator pos:start="349:57" pos:end="349:57">-</operator> <name pos:start="349:59" pos:end="349:69"><name pos:start="349:59" pos:end="349:63">entry</name><operator pos:start="349:64" pos:end="349:65">-&gt;</operator><name pos:start="349:66" pos:end="349:69">base</name></name> <operator pos:start="349:71" pos:end="349:71">+</operator> <literal type="number" pos:start="349:73" pos:end="349:73">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="357:5" pos:end="363:5"><if pos:start="357:5" pos:end="363:5">if <condition pos:start="357:8" pos:end="357:48">(<expr pos:start="357:9" pos:end="357:47"><name pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:12">misc</name><operator pos:start="357:13" pos:end="357:14">-&gt;</operator><name pos:start="357:15" pos:end="357:25">tpm_version</name></name> <operator pos:start="357:27" pos:end="357:28">!=</operator> <name pos:start="357:30" pos:end="357:47">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="357:50" pos:end="363:5">{<block_content pos:start="359:9" pos:end="361:55">

        <expr_stmt pos:start="359:9" pos:end="361:55"><expr pos:start="359:9" pos:end="361:54"><call pos:start="359:9" pos:end="361:54"><name pos:start="359:9" pos:end="359:18">aml_append</name><argument_list pos:start="359:19" pos:end="361:54">(<argument pos:start="359:20" pos:end="359:22"><expr pos:start="359:20" pos:end="359:22"><name pos:start="359:20" pos:end="359:22">crs</name></expr></argument>, <argument pos:start="359:25" pos:end="361:53"><expr pos:start="359:25" pos:end="361:53"><call pos:start="359:25" pos:end="361:53"><name pos:start="359:25" pos:end="359:42">aml_memory32_fixed</name><argument_list pos:start="359:43" pos:end="361:53">(<argument pos:start="359:44" pos:end="359:60"><expr pos:start="359:44" pos:end="359:60"><name pos:start="359:44" pos:end="359:60">TPM_TIS_ADDR_BASE</name></expr></argument>,

                   <argument pos:start="361:20" pos:end="361:36"><expr pos:start="361:20" pos:end="361:36"><name pos:start="361:20" pos:end="361:36">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="361:39" pos:end="361:52"><expr pos:start="361:39" pos:end="361:52"><name pos:start="361:39" pos:end="361:52">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:50"><expr pos:start="365:5" pos:end="365:49"><call pos:start="365:5" pos:end="365:49"><name pos:start="365:5" pos:end="365:14">aml_append</name><argument_list pos:start="365:15" pos:end="365:49">(<argument pos:start="365:16" pos:end="365:20"><expr pos:start="365:16" pos:end="365:20"><name pos:start="365:16" pos:end="365:20">scope</name></expr></argument>, <argument pos:start="365:23" pos:end="365:48"><expr pos:start="365:23" pos:end="365:48"><call pos:start="365:23" pos:end="365:48"><name pos:start="365:23" pos:end="365:35">aml_name_decl</name><argument_list pos:start="365:36" pos:end="365:48">(<argument pos:start="365:37" pos:end="365:42"><expr pos:start="365:37" pos:end="365:42"><literal type="string" pos:start="365:37" pos:end="365:42">"_CRS"</literal></expr></argument>, <argument pos:start="365:45" pos:end="365:47"><expr pos:start="365:45" pos:end="365:47"><name pos:start="365:45" pos:end="365:47">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="369:5" pos:end="369:38">/* reserve GPE0 block resources */</comment>

    <expr_stmt pos:start="371:5" pos:end="371:29"><expr pos:start="371:5" pos:end="371:28"><name pos:start="371:5" pos:end="371:7">dev</name> <operator pos:start="371:9" pos:end="371:9">=</operator> <call pos:start="371:11" pos:end="371:28"><name pos:start="371:11" pos:end="371:20">aml_device</name><argument_list pos:start="371:21" pos:end="371:28">(<argument pos:start="371:22" pos:end="371:27"><expr pos:start="371:22" pos:end="371:27"><literal type="string" pos:start="371:22" pos:end="371:27">"GPE0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:66"><expr pos:start="373:5" pos:end="373:65"><call pos:start="373:5" pos:end="373:65"><name pos:start="373:5" pos:end="373:14">aml_append</name><argument_list pos:start="373:15" pos:end="373:65">(<argument pos:start="373:16" pos:end="373:18"><expr pos:start="373:16" pos:end="373:18"><name pos:start="373:16" pos:end="373:18">dev</name></expr></argument>, <argument pos:start="373:21" pos:end="373:64"><expr pos:start="373:21" pos:end="373:64"><call pos:start="373:21" pos:end="373:64"><name pos:start="373:21" pos:end="373:33">aml_name_decl</name><argument_list pos:start="373:34" pos:end="373:64">(<argument pos:start="373:35" pos:end="373:40"><expr pos:start="373:35" pos:end="373:40"><literal type="string" pos:start="373:35" pos:end="373:40">"_HID"</literal></expr></argument>, <argument pos:start="373:43" pos:end="373:63"><expr pos:start="373:43" pos:end="373:63"><call pos:start="373:43" pos:end="373:63"><name pos:start="373:43" pos:end="373:52">aml_string</name><argument_list pos:start="373:53" pos:end="373:63">(<argument pos:start="373:54" pos:end="373:62"><expr pos:start="373:54" pos:end="373:62"><literal type="string" pos:start="373:54" pos:end="373:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:73"><expr pos:start="375:5" pos:end="375:72"><call pos:start="375:5" pos:end="375:72"><name pos:start="375:5" pos:end="375:14">aml_append</name><argument_list pos:start="375:15" pos:end="375:72">(<argument pos:start="375:16" pos:end="375:18"><expr pos:start="375:16" pos:end="375:18"><name pos:start="375:16" pos:end="375:18">dev</name></expr></argument>, <argument pos:start="375:21" pos:end="375:71"><expr pos:start="375:21" pos:end="375:71"><call pos:start="375:21" pos:end="375:71"><name pos:start="375:21" pos:end="375:33">aml_name_decl</name><argument_list pos:start="375:34" pos:end="375:71">(<argument pos:start="375:35" pos:end="375:40"><expr pos:start="375:35" pos:end="375:40"><literal type="string" pos:start="375:35" pos:end="375:40">"_UID"</literal></expr></argument>, <argument pos:start="375:43" pos:end="375:70"><expr pos:start="375:43" pos:end="375:70"><call pos:start="375:43" pos:end="375:70"><name pos:start="375:43" pos:end="375:52">aml_string</name><argument_list pos:start="375:53" pos:end="375:70">(<argument pos:start="375:54" pos:end="375:69"><expr pos:start="375:54" pos:end="375:69"><literal type="string" pos:start="375:54" pos:end="375:69">"GPE0 resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="377:5" pos:end="377:64">/* device present, functioning, decoding, not shown in UI */</comment>

    <expr_stmt pos:start="379:5" pos:end="379:57"><expr pos:start="379:5" pos:end="379:56"><call pos:start="379:5" pos:end="379:56"><name pos:start="379:5" pos:end="379:14">aml_append</name><argument_list pos:start="379:15" pos:end="379:56">(<argument pos:start="379:16" pos:end="379:18"><expr pos:start="379:16" pos:end="379:18"><name pos:start="379:16" pos:end="379:18">dev</name></expr></argument>, <argument pos:start="379:21" pos:end="379:55"><expr pos:start="379:21" pos:end="379:55"><call pos:start="379:21" pos:end="379:55"><name pos:start="379:21" pos:end="379:33">aml_name_decl</name><argument_list pos:start="379:34" pos:end="379:55">(<argument pos:start="379:35" pos:end="379:40"><expr pos:start="379:35" pos:end="379:40"><literal type="string" pos:start="379:35" pos:end="379:40">"_STA"</literal></expr></argument>, <argument pos:start="379:43" pos:end="379:54"><expr pos:start="379:43" pos:end="379:54"><call pos:start="379:43" pos:end="379:54"><name pos:start="379:43" pos:end="379:49">aml_int</name><argument_list pos:start="379:50" pos:end="379:54">(<argument pos:start="379:51" pos:end="379:53"><expr pos:start="379:51" pos:end="379:53"><literal type="number" pos:start="379:51" pos:end="379:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:34"><expr pos:start="381:5" pos:end="381:33"><name pos:start="381:5" pos:end="381:7">crs</name> <operator pos:start="381:9" pos:end="381:9">=</operator> <call pos:start="381:11" pos:end="381:33"><name pos:start="381:11" pos:end="381:31">aml_resource_template</name><argument_list pos:start="381:32" pos:end="381:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="387:6"><expr pos:start="383:5" pos:end="387:5"><call pos:start="383:5" pos:end="387:5"><name pos:start="383:5" pos:end="383:14">aml_append</name><argument_list pos:start="383:15" pos:end="387:5">(<argument pos:start="383:16" pos:end="383:18"><expr pos:start="383:16" pos:end="383:18"><name pos:start="383:16" pos:end="383:18">crs</name></expr></argument>,

        <argument pos:start="385:9" pos:end="385:77"><expr pos:start="385:9" pos:end="385:77"><call pos:start="385:9" pos:end="385:77"><name pos:start="385:9" pos:end="385:14">aml_io</name><argument_list pos:start="385:15" pos:end="385:77">(<argument pos:start="385:16" pos:end="385:27"><expr pos:start="385:16" pos:end="385:27"><name pos:start="385:16" pos:end="385:27">AML_DECODE16</name></expr></argument>, <argument pos:start="385:30" pos:end="385:41"><expr pos:start="385:30" pos:end="385:41"><name pos:start="385:30" pos:end="385:41"><name pos:start="385:30" pos:end="385:31">pm</name><operator pos:start="385:32" pos:end="385:33">-&gt;</operator><name pos:start="385:34" pos:end="385:41">gpe0_blk</name></name></expr></argument>, <argument pos:start="385:44" pos:end="385:55"><expr pos:start="385:44" pos:end="385:55"><name pos:start="385:44" pos:end="385:55"><name pos:start="385:44" pos:end="385:45">pm</name><operator pos:start="385:46" pos:end="385:47">-&gt;</operator><name pos:start="385:48" pos:end="385:55">gpe0_blk</name></name></expr></argument>, <argument pos:start="385:58" pos:end="385:58"><expr pos:start="385:58" pos:end="385:58"><literal type="number" pos:start="385:58" pos:end="385:58">1</literal></expr></argument>, <argument pos:start="385:61" pos:end="385:76"><expr pos:start="385:61" pos:end="385:76"><name pos:start="385:61" pos:end="385:76"><name pos:start="385:61" pos:end="385:62">pm</name><operator pos:start="385:63" pos:end="385:64">-&gt;</operator><name pos:start="385:65" pos:end="385:76">gpe0_blk_len</name></name></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:48"><expr pos:start="389:5" pos:end="389:47"><call pos:start="389:5" pos:end="389:47"><name pos:start="389:5" pos:end="389:14">aml_append</name><argument_list pos:start="389:15" pos:end="389:47">(<argument pos:start="389:16" pos:end="389:18"><expr pos:start="389:16" pos:end="389:18"><name pos:start="389:16" pos:end="389:18">dev</name></expr></argument>, <argument pos:start="389:21" pos:end="389:46"><expr pos:start="389:21" pos:end="389:46"><call pos:start="389:21" pos:end="389:46"><name pos:start="389:21" pos:end="389:33">aml_name_decl</name><argument_list pos:start="389:34" pos:end="389:46">(<argument pos:start="389:35" pos:end="389:40"><expr pos:start="389:35" pos:end="389:40"><literal type="string" pos:start="389:35" pos:end="389:40">"_CRS"</literal></expr></argument>, <argument pos:start="389:43" pos:end="389:45"><expr pos:start="389:43" pos:end="389:45"><name pos:start="389:43" pos:end="389:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:27"><expr pos:start="391:5" pos:end="391:26"><call pos:start="391:5" pos:end="391:26"><name pos:start="391:5" pos:end="391:14">aml_append</name><argument_list pos:start="391:15" pos:end="391:26">(<argument pos:start="391:16" pos:end="391:20"><expr pos:start="391:16" pos:end="391:20"><name pos:start="391:16" pos:end="391:20">scope</name></expr></argument>, <argument pos:start="391:23" pos:end="391:25"><expr pos:start="391:23" pos:end="391:25"><name pos:start="391:23" pos:end="391:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="395:5" pos:end="395:39"><expr pos:start="395:5" pos:end="395:38"><call pos:start="395:5" pos:end="395:38"><name pos:start="395:5" pos:end="395:22">crs_range_set_free</name><argument_list pos:start="395:23" pos:end="395:38">(<argument pos:start="395:24" pos:end="395:37"><expr pos:start="395:24" pos:end="395:37"><operator pos:start="395:24" pos:end="395:24">&amp;</operator><name pos:start="395:25" pos:end="395:37">crs_range_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="399:5" pos:end="399:33">/* reserve PCIHP resources */</comment>

    <if_stmt pos:start="401:5" pos:end="429:5"><if pos:start="401:5" pos:end="429:5">if <condition pos:start="401:8" pos:end="401:25">(<expr pos:start="401:9" pos:end="401:24"><name pos:start="401:9" pos:end="401:24"><name pos:start="401:9" pos:end="401:10">pm</name><operator pos:start="401:11" pos:end="401:12">-&gt;</operator><name pos:start="401:13" pos:end="401:24">pcihp_io_len</name></name></expr>)</condition> <block pos:start="401:27" pos:end="429:5">{<block_content pos:start="403:9" pos:end="427:31">

        <expr_stmt pos:start="403:9" pos:end="403:33"><expr pos:start="403:9" pos:end="403:32"><name pos:start="403:9" pos:end="403:11">dev</name> <operator pos:start="403:13" pos:end="403:13">=</operator> <call pos:start="403:15" pos:end="403:32"><name pos:start="403:15" pos:end="403:24">aml_device</name><argument_list pos:start="403:25" pos:end="403:32">(<argument pos:start="403:26" pos:end="403:31"><expr pos:start="403:26" pos:end="403:31"><literal type="string" pos:start="403:26" pos:end="403:31">"PHPR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="405:9" pos:end="405:70"><expr pos:start="405:9" pos:end="405:69"><call pos:start="405:9" pos:end="405:69"><name pos:start="405:9" pos:end="405:18">aml_append</name><argument_list pos:start="405:19" pos:end="405:69">(<argument pos:start="405:20" pos:end="405:22"><expr pos:start="405:20" pos:end="405:22"><name pos:start="405:20" pos:end="405:22">dev</name></expr></argument>, <argument pos:start="405:25" pos:end="405:68"><expr pos:start="405:25" pos:end="405:68"><call pos:start="405:25" pos:end="405:68"><name pos:start="405:25" pos:end="405:37">aml_name_decl</name><argument_list pos:start="405:38" pos:end="405:68">(<argument pos:start="405:39" pos:end="405:44"><expr pos:start="405:39" pos:end="405:44"><literal type="string" pos:start="405:39" pos:end="405:44">"_HID"</literal></expr></argument>, <argument pos:start="405:47" pos:end="405:67"><expr pos:start="405:47" pos:end="405:67"><call pos:start="405:47" pos:end="405:67"><name pos:start="405:47" pos:end="405:56">aml_string</name><argument_list pos:start="405:57" pos:end="405:67">(<argument pos:start="405:58" pos:end="405:66"><expr pos:start="405:58" pos:end="405:66"><literal type="string" pos:start="405:58" pos:end="405:66">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="409:72"><expr pos:start="407:9" pos:end="409:71"><call pos:start="407:9" pos:end="409:71"><name pos:start="407:9" pos:end="407:18">aml_append</name><argument_list pos:start="407:19" pos:end="409:71">(<argument pos:start="407:20" pos:end="407:22"><expr pos:start="407:20" pos:end="407:22"><name pos:start="407:20" pos:end="407:22">dev</name></expr></argument>,

            <argument pos:start="409:13" pos:end="409:70"><expr pos:start="409:13" pos:end="409:70"><call pos:start="409:13" pos:end="409:70"><name pos:start="409:13" pos:end="409:25">aml_name_decl</name><argument_list pos:start="409:26" pos:end="409:70">(<argument pos:start="409:27" pos:end="409:32"><expr pos:start="409:27" pos:end="409:32"><literal type="string" pos:start="409:27" pos:end="409:32">"_UID"</literal></expr></argument>, <argument pos:start="409:35" pos:end="409:69"><expr pos:start="409:35" pos:end="409:69"><call pos:start="409:35" pos:end="409:69"><name pos:start="409:35" pos:end="409:44">aml_string</name><argument_list pos:start="409:45" pos:end="409:69">(<argument pos:start="409:46" pos:end="409:68"><expr pos:start="409:46" pos:end="409:68"><literal type="string" pos:start="409:46" pos:end="409:68">"PCI Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="411:9" pos:end="411:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="413:9" pos:end="413:61"><expr pos:start="413:9" pos:end="413:60"><call pos:start="413:9" pos:end="413:60"><name pos:start="413:9" pos:end="413:18">aml_append</name><argument_list pos:start="413:19" pos:end="413:60">(<argument pos:start="413:20" pos:end="413:22"><expr pos:start="413:20" pos:end="413:22"><name pos:start="413:20" pos:end="413:22">dev</name></expr></argument>, <argument pos:start="413:25" pos:end="413:59"><expr pos:start="413:25" pos:end="413:59"><call pos:start="413:25" pos:end="413:59"><name pos:start="413:25" pos:end="413:37">aml_name_decl</name><argument_list pos:start="413:38" pos:end="413:59">(<argument pos:start="413:39" pos:end="413:44"><expr pos:start="413:39" pos:end="413:44"><literal type="string" pos:start="413:39" pos:end="413:44">"_STA"</literal></expr></argument>, <argument pos:start="413:47" pos:end="413:58"><expr pos:start="413:47" pos:end="413:58"><call pos:start="413:47" pos:end="413:58"><name pos:start="413:47" pos:end="413:53">aml_int</name><argument_list pos:start="413:54" pos:end="413:58">(<argument pos:start="413:55" pos:end="413:57"><expr pos:start="413:55" pos:end="413:57"><literal type="number" pos:start="413:55" pos:end="413:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="415:9" pos:end="415:38"><expr pos:start="415:9" pos:end="415:37"><name pos:start="415:9" pos:end="415:11">crs</name> <operator pos:start="415:13" pos:end="415:13">=</operator> <call pos:start="415:15" pos:end="415:37"><name pos:start="415:15" pos:end="415:35">aml_resource_template</name><argument_list pos:start="415:36" pos:end="415:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="423:10"><expr pos:start="417:9" pos:end="423:9"><call pos:start="417:9" pos:end="423:9"><name pos:start="417:9" pos:end="417:18">aml_append</name><argument_list pos:start="417:19" pos:end="423:9">(<argument pos:start="417:20" pos:end="417:22"><expr pos:start="417:20" pos:end="417:22"><name pos:start="417:20" pos:end="417:22">crs</name></expr></argument>,

            <argument pos:start="419:13" pos:end="421:36"><expr pos:start="419:13" pos:end="421:36"><call pos:start="419:13" pos:end="421:36"><name pos:start="419:13" pos:end="419:18">aml_io</name><argument_list pos:start="419:19" pos:end="421:36">(<argument pos:start="419:20" pos:end="419:31"><expr pos:start="419:20" pos:end="419:31"><name pos:start="419:20" pos:end="419:31">AML_DECODE16</name></expr></argument>, <argument pos:start="419:34" pos:end="419:50"><expr pos:start="419:34" pos:end="419:50"><name pos:start="419:34" pos:end="419:50"><name pos:start="419:34" pos:end="419:35">pm</name><operator pos:start="419:36" pos:end="419:37">-&gt;</operator><name pos:start="419:38" pos:end="419:50">pcihp_io_base</name></name></expr></argument>, <argument pos:start="419:53" pos:end="419:69"><expr pos:start="419:53" pos:end="419:69"><name pos:start="419:53" pos:end="419:69"><name pos:start="419:53" pos:end="419:54">pm</name><operator pos:start="419:55" pos:end="419:56">-&gt;</operator><name pos:start="419:57" pos:end="419:69">pcihp_io_base</name></name></expr></argument>, <argument pos:start="419:72" pos:end="419:72"><expr pos:start="419:72" pos:end="419:72"><literal type="number" pos:start="419:72" pos:end="419:72">1</literal></expr></argument>,

                   <argument pos:start="421:20" pos:end="421:35"><expr pos:start="421:20" pos:end="421:35"><name pos:start="421:20" pos:end="421:35"><name pos:start="421:20" pos:end="421:21">pm</name><operator pos:start="421:22" pos:end="421:23">-&gt;</operator><name pos:start="421:24" pos:end="421:35">pcihp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:52"><expr pos:start="425:9" pos:end="425:51"><call pos:start="425:9" pos:end="425:51"><name pos:start="425:9" pos:end="425:18">aml_append</name><argument_list pos:start="425:19" pos:end="425:51">(<argument pos:start="425:20" pos:end="425:22"><expr pos:start="425:20" pos:end="425:22"><name pos:start="425:20" pos:end="425:22">dev</name></expr></argument>, <argument pos:start="425:25" pos:end="425:50"><expr pos:start="425:25" pos:end="425:50"><call pos:start="425:25" pos:end="425:50"><name pos:start="425:25" pos:end="425:37">aml_name_decl</name><argument_list pos:start="425:38" pos:end="425:50">(<argument pos:start="425:39" pos:end="425:44"><expr pos:start="425:39" pos:end="425:44"><literal type="string" pos:start="425:39" pos:end="425:44">"_CRS"</literal></expr></argument>, <argument pos:start="425:47" pos:end="425:49"><expr pos:start="425:47" pos:end="425:49"><name pos:start="425:47" pos:end="425:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="427:9" pos:end="427:31"><expr pos:start="427:9" pos:end="427:30"><call pos:start="427:9" pos:end="427:30"><name pos:start="427:9" pos:end="427:18">aml_append</name><argument_list pos:start="427:19" pos:end="427:30">(<argument pos:start="427:20" pos:end="427:24"><expr pos:start="427:20" pos:end="427:24"><name pos:start="427:20" pos:end="427:24">scope</name></expr></argument>, <argument pos:start="427:27" pos:end="427:29"><expr pos:start="427:27" pos:end="427:29"><name pos:start="427:27" pos:end="427:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:28"><expr pos:start="431:5" pos:end="431:27"><call pos:start="431:5" pos:end="431:27"><name pos:start="431:5" pos:end="431:14">aml_append</name><argument_list pos:start="431:15" pos:end="431:27">(<argument pos:start="431:16" pos:end="431:19"><expr pos:start="431:16" pos:end="431:19"><name pos:start="431:16" pos:end="431:19">dsdt</name></expr></argument>, <argument pos:start="431:22" pos:end="431:26"><expr pos:start="431:22" pos:end="431:26"><name pos:start="431:22" pos:end="431:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="435:5" pos:end="435:55">/*  create S3_ / S4_ / S5_ packages if necessary */</comment>

    <expr_stmt pos:start="437:5" pos:end="437:28"><expr pos:start="437:5" pos:end="437:27"><name pos:start="437:5" pos:end="437:9">scope</name> <operator pos:start="437:11" pos:end="437:11">=</operator> <call pos:start="437:13" pos:end="437:27"><name pos:start="437:13" pos:end="437:21">aml_scope</name><argument_list pos:start="437:22" pos:end="437:27">(<argument pos:start="437:23" pos:end="437:26"><expr pos:start="437:23" pos:end="437:26"><literal type="string" pos:start="437:23" pos:end="437:26">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="439:5" pos:end="453:5"><if pos:start="439:5" pos:end="453:5">if <condition pos:start="439:8" pos:end="439:25">(<expr pos:start="439:9" pos:end="439:24"><operator pos:start="439:9" pos:end="439:9">!</operator><name pos:start="439:10" pos:end="439:24"><name pos:start="439:10" pos:end="439:11">pm</name><operator pos:start="439:12" pos:end="439:13">-&gt;</operator><name pos:start="439:14" pos:end="439:24">s3_disabled</name></name></expr>)</condition> <block pos:start="439:27" pos:end="453:5">{<block_content pos:start="441:9" pos:end="451:53">

        <expr_stmt pos:start="441:9" pos:end="441:29"><expr pos:start="441:9" pos:end="441:28"><name pos:start="441:9" pos:end="441:11">pkg</name> <operator pos:start="441:13" pos:end="441:13">=</operator> <call pos:start="441:15" pos:end="441:28"><name pos:start="441:15" pos:end="441:25">aml_package</name><argument_list pos:start="441:26" pos:end="441:28">(<argument pos:start="441:27" pos:end="441:27"><expr pos:start="441:27" pos:end="441:27"><literal type="number" pos:start="441:27" pos:end="441:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:36"><expr pos:start="443:9" pos:end="443:35"><call pos:start="443:9" pos:end="443:35"><name pos:start="443:9" pos:end="443:18">aml_append</name><argument_list pos:start="443:19" pos:end="443:35">(<argument pos:start="443:20" pos:end="443:22"><expr pos:start="443:20" pos:end="443:22"><name pos:start="443:20" pos:end="443:22">pkg</name></expr></argument>, <argument pos:start="443:25" pos:end="443:34"><expr pos:start="443:25" pos:end="443:34"><call pos:start="443:25" pos:end="443:34"><name pos:start="443:25" pos:end="443:31">aml_int</name><argument_list pos:start="443:32" pos:end="443:34">(<argument pos:start="443:33" pos:end="443:33"><expr pos:start="443:33" pos:end="443:33"><literal type="number" pos:start="443:33" pos:end="443:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="443:38" pos:end="443:59">/* PM1a_CNT.SLP_TYP */</comment>

        <expr_stmt pos:start="445:9" pos:end="445:36"><expr pos:start="445:9" pos:end="445:35"><call pos:start="445:9" pos:end="445:35"><name pos:start="445:9" pos:end="445:18">aml_append</name><argument_list pos:start="445:19" pos:end="445:35">(<argument pos:start="445:20" pos:end="445:22"><expr pos:start="445:20" pos:end="445:22"><name pos:start="445:20" pos:end="445:22">pkg</name></expr></argument>, <argument pos:start="445:25" pos:end="445:34"><expr pos:start="445:25" pos:end="445:34"><call pos:start="445:25" pos:end="445:34"><name pos:start="445:25" pos:end="445:31">aml_int</name><argument_list pos:start="445:32" pos:end="445:34">(<argument pos:start="445:33" pos:end="445:33"><expr pos:start="445:33" pos:end="445:33"><literal type="number" pos:start="445:33" pos:end="445:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="445:38" pos:end="445:77">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="447:9" pos:end="447:36"><expr pos:start="447:9" pos:end="447:35"><call pos:start="447:9" pos:end="447:35"><name pos:start="447:9" pos:end="447:18">aml_append</name><argument_list pos:start="447:19" pos:end="447:35">(<argument pos:start="447:20" pos:end="447:22"><expr pos:start="447:20" pos:end="447:22"><name pos:start="447:20" pos:end="447:22">pkg</name></expr></argument>, <argument pos:start="447:25" pos:end="447:34"><expr pos:start="447:25" pos:end="447:34"><call pos:start="447:25" pos:end="447:34"><name pos:start="447:25" pos:end="447:31">aml_int</name><argument_list pos:start="447:32" pos:end="447:34">(<argument pos:start="447:33" pos:end="447:33"><expr pos:start="447:33" pos:end="447:33"><literal type="number" pos:start="447:33" pos:end="447:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="447:38" pos:end="447:51">/* reserved */</comment>

        <expr_stmt pos:start="449:9" pos:end="449:36"><expr pos:start="449:9" pos:end="449:35"><call pos:start="449:9" pos:end="449:35"><name pos:start="449:9" pos:end="449:18">aml_append</name><argument_list pos:start="449:19" pos:end="449:35">(<argument pos:start="449:20" pos:end="449:22"><expr pos:start="449:20" pos:end="449:22"><name pos:start="449:20" pos:end="449:22">pkg</name></expr></argument>, <argument pos:start="449:25" pos:end="449:34"><expr pos:start="449:25" pos:end="449:34"><call pos:start="449:25" pos:end="449:34"><name pos:start="449:25" pos:end="449:31">aml_int</name><argument_list pos:start="449:32" pos:end="449:34">(<argument pos:start="449:33" pos:end="449:33"><expr pos:start="449:33" pos:end="449:33"><literal type="number" pos:start="449:33" pos:end="449:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="449:38" pos:end="449:51">/* reserved */</comment>

        <expr_stmt pos:start="451:9" pos:end="451:53"><expr pos:start="451:9" pos:end="451:52"><call pos:start="451:9" pos:end="451:52"><name pos:start="451:9" pos:end="451:18">aml_append</name><argument_list pos:start="451:19" pos:end="451:52">(<argument pos:start="451:20" pos:end="451:24"><expr pos:start="451:20" pos:end="451:24"><name pos:start="451:20" pos:end="451:24">scope</name></expr></argument>, <argument pos:start="451:27" pos:end="451:51"><expr pos:start="451:27" pos:end="451:51"><call pos:start="451:27" pos:end="451:51"><name pos:start="451:27" pos:end="451:39">aml_name_decl</name><argument_list pos:start="451:40" pos:end="451:51">(<argument pos:start="451:41" pos:end="451:45"><expr pos:start="451:41" pos:end="451:45"><literal type="string" pos:start="451:41" pos:end="451:45">"_S3"</literal></expr></argument>, <argument pos:start="451:48" pos:end="451:50"><expr pos:start="451:48" pos:end="451:50"><name pos:start="451:48" pos:end="451:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="457:5" pos:end="473:5"><if pos:start="457:5" pos:end="473:5">if <condition pos:start="457:8" pos:end="457:25">(<expr pos:start="457:9" pos:end="457:24"><operator pos:start="457:9" pos:end="457:9">!</operator><name pos:start="457:10" pos:end="457:24"><name pos:start="457:10" pos:end="457:11">pm</name><operator pos:start="457:12" pos:end="457:13">-&gt;</operator><name pos:start="457:14" pos:end="457:24">s4_disabled</name></name></expr>)</condition> <block pos:start="457:27" pos:end="473:5">{<block_content pos:start="459:9" pos:end="471:53">

        <expr_stmt pos:start="459:9" pos:end="459:29"><expr pos:start="459:9" pos:end="459:28"><name pos:start="459:9" pos:end="459:11">pkg</name> <operator pos:start="459:13" pos:end="459:13">=</operator> <call pos:start="459:15" pos:end="459:28"><name pos:start="459:15" pos:end="459:25">aml_package</name><argument_list pos:start="459:26" pos:end="459:28">(<argument pos:start="459:27" pos:end="459:27"><expr pos:start="459:27" pos:end="459:27"><literal type="number" pos:start="459:27" pos:end="459:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:45"><expr pos:start="461:9" pos:end="461:44"><call pos:start="461:9" pos:end="461:44"><name pos:start="461:9" pos:end="461:18">aml_append</name><argument_list pos:start="461:19" pos:end="461:44">(<argument pos:start="461:20" pos:end="461:22"><expr pos:start="461:20" pos:end="461:22"><name pos:start="461:20" pos:end="461:22">pkg</name></expr></argument>, <argument pos:start="461:25" pos:end="461:43"><expr pos:start="461:25" pos:end="461:43"><call pos:start="461:25" pos:end="461:43"><name pos:start="461:25" pos:end="461:31">aml_int</name><argument_list pos:start="461:32" pos:end="461:43">(<argument pos:start="461:33" pos:end="461:42"><expr pos:start="461:33" pos:end="461:42"><name pos:start="461:33" pos:end="461:42"><name pos:start="461:33" pos:end="461:34">pm</name><operator pos:start="461:35" pos:end="461:36">-&gt;</operator><name pos:start="461:37" pos:end="461:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="461:47" pos:end="461:68">/* PM1a_CNT.SLP_TYP */</comment>

        <comment type="block" pos:start="463:9" pos:end="463:48">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="465:9" pos:end="465:45"><expr pos:start="465:9" pos:end="465:44"><call pos:start="465:9" pos:end="465:44"><name pos:start="465:9" pos:end="465:18">aml_append</name><argument_list pos:start="465:19" pos:end="465:44">(<argument pos:start="465:20" pos:end="465:22"><expr pos:start="465:20" pos:end="465:22"><name pos:start="465:20" pos:end="465:22">pkg</name></expr></argument>, <argument pos:start="465:25" pos:end="465:43"><expr pos:start="465:25" pos:end="465:43"><call pos:start="465:25" pos:end="465:43"><name pos:start="465:25" pos:end="465:31">aml_int</name><argument_list pos:start="465:32" pos:end="465:43">(<argument pos:start="465:33" pos:end="465:42"><expr pos:start="465:33" pos:end="465:42"><name pos:start="465:33" pos:end="465:42"><name pos:start="465:33" pos:end="465:34">pm</name><operator pos:start="465:35" pos:end="465:36">-&gt;</operator><name pos:start="465:37" pos:end="465:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:36"><expr pos:start="467:9" pos:end="467:35"><call pos:start="467:9" pos:end="467:35"><name pos:start="467:9" pos:end="467:18">aml_append</name><argument_list pos:start="467:19" pos:end="467:35">(<argument pos:start="467:20" pos:end="467:22"><expr pos:start="467:20" pos:end="467:22"><name pos:start="467:20" pos:end="467:22">pkg</name></expr></argument>, <argument pos:start="467:25" pos:end="467:34"><expr pos:start="467:25" pos:end="467:34"><call pos:start="467:25" pos:end="467:34"><name pos:start="467:25" pos:end="467:31">aml_int</name><argument_list pos:start="467:32" pos:end="467:34">(<argument pos:start="467:33" pos:end="467:33"><expr pos:start="467:33" pos:end="467:33"><literal type="number" pos:start="467:33" pos:end="467:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="467:38" pos:end="467:51">/* reserved */</comment>

        <expr_stmt pos:start="469:9" pos:end="469:36"><expr pos:start="469:9" pos:end="469:35"><call pos:start="469:9" pos:end="469:35"><name pos:start="469:9" pos:end="469:18">aml_append</name><argument_list pos:start="469:19" pos:end="469:35">(<argument pos:start="469:20" pos:end="469:22"><expr pos:start="469:20" pos:end="469:22"><name pos:start="469:20" pos:end="469:22">pkg</name></expr></argument>, <argument pos:start="469:25" pos:end="469:34"><expr pos:start="469:25" pos:end="469:34"><call pos:start="469:25" pos:end="469:34"><name pos:start="469:25" pos:end="469:31">aml_int</name><argument_list pos:start="469:32" pos:end="469:34">(<argument pos:start="469:33" pos:end="469:33"><expr pos:start="469:33" pos:end="469:33"><literal type="number" pos:start="469:33" pos:end="469:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="469:38" pos:end="469:51">/* reserved */</comment>

        <expr_stmt pos:start="471:9" pos:end="471:53"><expr pos:start="471:9" pos:end="471:52"><call pos:start="471:9" pos:end="471:52"><name pos:start="471:9" pos:end="471:18">aml_append</name><argument_list pos:start="471:19" pos:end="471:52">(<argument pos:start="471:20" pos:end="471:24"><expr pos:start="471:20" pos:end="471:24"><name pos:start="471:20" pos:end="471:24">scope</name></expr></argument>, <argument pos:start="471:27" pos:end="471:51"><expr pos:start="471:27" pos:end="471:51"><call pos:start="471:27" pos:end="471:51"><name pos:start="471:27" pos:end="471:39">aml_name_decl</name><argument_list pos:start="471:40" pos:end="471:51">(<argument pos:start="471:41" pos:end="471:45"><expr pos:start="471:41" pos:end="471:45"><literal type="string" pos:start="471:41" pos:end="471:45">"_S4"</literal></expr></argument>, <argument pos:start="471:48" pos:end="471:50"><expr pos:start="471:48" pos:end="471:50"><name pos:start="471:48" pos:end="471:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="477:5" pos:end="477:25"><expr pos:start="477:5" pos:end="477:24"><name pos:start="477:5" pos:end="477:7">pkg</name> <operator pos:start="477:9" pos:end="477:9">=</operator> <call pos:start="477:11" pos:end="477:24"><name pos:start="477:11" pos:end="477:21">aml_package</name><argument_list pos:start="477:22" pos:end="477:24">(<argument pos:start="477:23" pos:end="477:23"><expr pos:start="477:23" pos:end="477:23"><literal type="number" pos:start="477:23" pos:end="477:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="479:5" pos:end="479:32"><expr pos:start="479:5" pos:end="479:31"><call pos:start="479:5" pos:end="479:31"><name pos:start="479:5" pos:end="479:14">aml_append</name><argument_list pos:start="479:15" pos:end="479:31">(<argument pos:start="479:16" pos:end="479:18"><expr pos:start="479:16" pos:end="479:18"><name pos:start="479:16" pos:end="479:18">pkg</name></expr></argument>, <argument pos:start="479:21" pos:end="479:30"><expr pos:start="479:21" pos:end="479:30"><call pos:start="479:21" pos:end="479:30"><name pos:start="479:21" pos:end="479:27">aml_int</name><argument_list pos:start="479:28" pos:end="479:30">(<argument pos:start="479:29" pos:end="479:29"><expr pos:start="479:29" pos:end="479:29"><literal type="number" pos:start="479:29" pos:end="479:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="479:34" pos:end="479:55">/* PM1a_CNT.SLP_TYP */</comment>

    <expr_stmt pos:start="481:5" pos:end="481:32"><expr pos:start="481:5" pos:end="481:31"><call pos:start="481:5" pos:end="481:31"><name pos:start="481:5" pos:end="481:14">aml_append</name><argument_list pos:start="481:15" pos:end="481:31">(<argument pos:start="481:16" pos:end="481:18"><expr pos:start="481:16" pos:end="481:18"><name pos:start="481:16" pos:end="481:18">pkg</name></expr></argument>, <argument pos:start="481:21" pos:end="481:30"><expr pos:start="481:21" pos:end="481:30"><call pos:start="481:21" pos:end="481:30"><name pos:start="481:21" pos:end="481:27">aml_int</name><argument_list pos:start="481:28" pos:end="481:30">(<argument pos:start="481:29" pos:end="481:29"><expr pos:start="481:29" pos:end="481:29"><literal type="number" pos:start="481:29" pos:end="481:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="481:34" pos:end="481:65">/* PM1b_CNT.SLP_TYP not impl. */</comment>

    <expr_stmt pos:start="483:5" pos:end="483:32"><expr pos:start="483:5" pos:end="483:31"><call pos:start="483:5" pos:end="483:31"><name pos:start="483:5" pos:end="483:14">aml_append</name><argument_list pos:start="483:15" pos:end="483:31">(<argument pos:start="483:16" pos:end="483:18"><expr pos:start="483:16" pos:end="483:18"><name pos:start="483:16" pos:end="483:18">pkg</name></expr></argument>, <argument pos:start="483:21" pos:end="483:30"><expr pos:start="483:21" pos:end="483:30"><call pos:start="483:21" pos:end="483:30"><name pos:start="483:21" pos:end="483:27">aml_int</name><argument_list pos:start="483:28" pos:end="483:30">(<argument pos:start="483:29" pos:end="483:29"><expr pos:start="483:29" pos:end="483:29"><literal type="number" pos:start="483:29" pos:end="483:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="483:34" pos:end="483:47">/* reserved */</comment>

    <expr_stmt pos:start="485:5" pos:end="485:32"><expr pos:start="485:5" pos:end="485:31"><call pos:start="485:5" pos:end="485:31"><name pos:start="485:5" pos:end="485:14">aml_append</name><argument_list pos:start="485:15" pos:end="485:31">(<argument pos:start="485:16" pos:end="485:18"><expr pos:start="485:16" pos:end="485:18"><name pos:start="485:16" pos:end="485:18">pkg</name></expr></argument>, <argument pos:start="485:21" pos:end="485:30"><expr pos:start="485:21" pos:end="485:30"><call pos:start="485:21" pos:end="485:30"><name pos:start="485:21" pos:end="485:27">aml_int</name><argument_list pos:start="485:28" pos:end="485:30">(<argument pos:start="485:29" pos:end="485:29"><expr pos:start="485:29" pos:end="485:29"><literal type="number" pos:start="485:29" pos:end="485:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="485:34" pos:end="485:47">/* reserved */</comment>

    <expr_stmt pos:start="487:5" pos:end="487:49"><expr pos:start="487:5" pos:end="487:48"><call pos:start="487:5" pos:end="487:48"><name pos:start="487:5" pos:end="487:14">aml_append</name><argument_list pos:start="487:15" pos:end="487:48">(<argument pos:start="487:16" pos:end="487:20"><expr pos:start="487:16" pos:end="487:20"><name pos:start="487:16" pos:end="487:20">scope</name></expr></argument>, <argument pos:start="487:23" pos:end="487:47"><expr pos:start="487:23" pos:end="487:47"><call pos:start="487:23" pos:end="487:47"><name pos:start="487:23" pos:end="487:35">aml_name_decl</name><argument_list pos:start="487:36" pos:end="487:47">(<argument pos:start="487:37" pos:end="487:41"><expr pos:start="487:37" pos:end="487:41"><literal type="string" pos:start="487:37" pos:end="487:41">"_S5"</literal></expr></argument>, <argument pos:start="487:44" pos:end="487:46"><expr pos:start="487:44" pos:end="487:46"><name pos:start="487:44" pos:end="487:46">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:28"><expr pos:start="489:5" pos:end="489:27"><call pos:start="489:5" pos:end="489:27"><name pos:start="489:5" pos:end="489:14">aml_append</name><argument_list pos:start="489:15" pos:end="489:27">(<argument pos:start="489:16" pos:end="489:19"><expr pos:start="489:16" pos:end="489:19"><name pos:start="489:16" pos:end="489:19">dsdt</name></expr></argument>, <argument pos:start="489:22" pos:end="489:26"><expr pos:start="489:22" pos:end="489:26"><name pos:start="489:22" pos:end="489:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="493:5" pos:end="493:45">/* create fw_cfg node, unconditionally */</comment>

    <block pos:start="495:5" pos:end="547:5">{<block_content pos:start="505:9" pos:end="545:32">

        <comment type="block" pos:start="497:9" pos:end="503:71">/* when using port i/o, the 8-bit data register *always* overlaps

         * with half of the 16-bit control register. Hence, the total size

         * of the i/o region used is FW_CFG_CTL_SIZE; when using DMA, the

         * DMA control register is located at FW_CFG_DMA_IO_BASE + 4 */</comment>

        <decl_stmt pos:start="505:9" pos:end="511:42"><decl pos:start="505:9" pos:end="511:41"><type pos:start="505:9" pos:end="505:15"><name pos:start="505:9" pos:end="505:15">uint8_t</name></type> <name pos:start="505:17" pos:end="505:23">io_size</name> <init pos:start="505:25" pos:end="511:41">= <expr pos:start="505:27" pos:end="511:41"><ternary pos:start="505:27" pos:end="511:41"><condition pos:start="505:27" pos:end="507:73"><expr pos:start="505:27" pos:end="507:71"><call pos:start="505:27" pos:end="507:71"><name pos:start="505:27" pos:end="505:50">object_property_get_bool</name><argument_list pos:start="505:51" pos:end="507:71">(<argument pos:start="505:52" pos:end="505:71"><expr pos:start="505:52" pos:end="505:71"><call pos:start="505:52" pos:end="505:71"><name pos:start="505:52" pos:end="505:57">OBJECT</name><argument_list pos:start="505:58" pos:end="505:71">(<argument pos:start="505:59" pos:end="505:70"><expr pos:start="505:59" pos:end="505:70"><name pos:start="505:59" pos:end="505:70"><name pos:start="505:59" pos:end="505:62">pcms</name><operator pos:start="505:63" pos:end="505:64">-&gt;</operator><name pos:start="505:65" pos:end="505:70">fw_cfg</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                   <argument pos:start="507:52" pos:end="507:64"><expr pos:start="507:52" pos:end="507:64"><literal type="string" pos:start="507:52" pos:end="507:64">"dma_enabled"</literal></expr></argument>, <argument pos:start="507:67" pos:end="507:70"><expr pos:start="507:67" pos:end="507:70"><name pos:start="507:67" pos:end="507:70">NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="509:27" pos:end="509:75">

                          <expr pos:start="509:27" pos:end="509:75"><call pos:start="509:27" pos:end="509:54"><name pos:start="509:27" pos:end="509:34">ROUND_UP</name><argument_list pos:start="509:35" pos:end="509:54">(<argument pos:start="509:36" pos:end="509:50"><expr pos:start="509:36" pos:end="509:50"><name pos:start="509:36" pos:end="509:50">FW_CFG_CTL_SIZE</name></expr></argument>, <argument pos:start="509:53" pos:end="509:53"><expr pos:start="509:53" pos:end="509:53"><literal type="number" pos:start="509:53" pos:end="509:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="509:56" pos:end="509:56">+</operator> <sizeof pos:start="509:58" pos:end="509:75">sizeof<argument_list pos:start="509:64" pos:end="509:75">(<argument pos:start="509:65" pos:end="509:74"><expr pos:start="509:65" pos:end="509:74"><name pos:start="509:65" pos:end="509:74">dma_addr_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="509:77" pos:end="511:41">:

                          <expr pos:start="511:27" pos:end="511:41"><name pos:start="511:27" pos:end="511:41">FW_CFG_CTL_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="515:9" pos:end="515:40"><expr pos:start="515:9" pos:end="515:39"><name pos:start="515:9" pos:end="515:13">scope</name> <operator pos:start="515:15" pos:end="515:15">=</operator> <call pos:start="515:17" pos:end="515:39"><name pos:start="515:17" pos:end="515:25">aml_scope</name><argument_list pos:start="515:26" pos:end="515:39">(<argument pos:start="515:27" pos:end="515:38"><expr pos:start="515:27" pos:end="515:38"><literal type="string" pos:start="515:27" pos:end="515:38">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="517:33"><expr pos:start="517:9" pos:end="517:32"><name pos:start="517:9" pos:end="517:11">dev</name> <operator pos:start="517:13" pos:end="517:13">=</operator> <call pos:start="517:15" pos:end="517:32"><name pos:start="517:15" pos:end="517:24">aml_device</name><argument_list pos:start="517:25" pos:end="517:32">(<argument pos:start="517:26" pos:end="517:31"><expr pos:start="517:26" pos:end="517:31"><literal type="string" pos:start="517:26" pos:end="517:31">"FWCF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="521:9" pos:end="521:71"><expr pos:start="521:9" pos:end="521:70"><call pos:start="521:9" pos:end="521:70"><name pos:start="521:9" pos:end="521:18">aml_append</name><argument_list pos:start="521:19" pos:end="521:70">(<argument pos:start="521:20" pos:end="521:22"><expr pos:start="521:20" pos:end="521:22"><name pos:start="521:20" pos:end="521:22">dev</name></expr></argument>, <argument pos:start="521:25" pos:end="521:69"><expr pos:start="521:25" pos:end="521:69"><call pos:start="521:25" pos:end="521:69"><name pos:start="521:25" pos:end="521:37">aml_name_decl</name><argument_list pos:start="521:38" pos:end="521:69">(<argument pos:start="521:39" pos:end="521:44"><expr pos:start="521:39" pos:end="521:44"><literal type="string" pos:start="521:39" pos:end="521:44">"_HID"</literal></expr></argument>, <argument pos:start="521:47" pos:end="521:68"><expr pos:start="521:47" pos:end="521:68"><call pos:start="521:47" pos:end="521:68"><name pos:start="521:47" pos:end="521:56">aml_string</name><argument_list pos:start="521:57" pos:end="521:68">(<argument pos:start="521:58" pos:end="521:67"><expr pos:start="521:58" pos:end="521:67"><literal type="string" pos:start="521:58" pos:end="521:67">"QEMU0002"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="525:9" pos:end="525:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="527:9" pos:end="527:61"><expr pos:start="527:9" pos:end="527:60"><call pos:start="527:9" pos:end="527:60"><name pos:start="527:9" pos:end="527:18">aml_append</name><argument_list pos:start="527:19" pos:end="527:60">(<argument pos:start="527:20" pos:end="527:22"><expr pos:start="527:20" pos:end="527:22"><name pos:start="527:20" pos:end="527:22">dev</name></expr></argument>, <argument pos:start="527:25" pos:end="527:59"><expr pos:start="527:25" pos:end="527:59"><call pos:start="527:25" pos:end="527:59"><name pos:start="527:25" pos:end="527:37">aml_name_decl</name><argument_list pos:start="527:38" pos:end="527:59">(<argument pos:start="527:39" pos:end="527:44"><expr pos:start="527:39" pos:end="527:44"><literal type="string" pos:start="527:39" pos:end="527:44">"_STA"</literal></expr></argument>, <argument pos:start="527:47" pos:end="527:58"><expr pos:start="527:47" pos:end="527:58"><call pos:start="527:47" pos:end="527:58"><name pos:start="527:47" pos:end="527:53">aml_int</name><argument_list pos:start="527:54" pos:end="527:58">(<argument pos:start="527:55" pos:end="527:57"><expr pos:start="527:55" pos:end="527:57"><literal type="number" pos:start="527:55" pos:end="527:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="531:9" pos:end="531:38"><expr pos:start="531:9" pos:end="531:37"><name pos:start="531:9" pos:end="531:11">crs</name> <operator pos:start="531:13" pos:end="531:13">=</operator> <call pos:start="531:15" pos:end="531:37"><name pos:start="531:15" pos:end="531:35">aml_resource_template</name><argument_list pos:start="531:36" pos:end="531:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="533:9" pos:end="537:10"><expr pos:start="533:9" pos:end="537:9"><call pos:start="533:9" pos:end="537:9"><name pos:start="533:9" pos:end="533:18">aml_append</name><argument_list pos:start="533:19" pos:end="537:9">(<argument pos:start="533:20" pos:end="533:22"><expr pos:start="533:20" pos:end="533:22"><name pos:start="533:20" pos:end="533:22">crs</name></expr></argument>,

            <argument pos:start="535:13" pos:end="535:79"><expr pos:start="535:13" pos:end="535:79"><call pos:start="535:13" pos:end="535:79"><name pos:start="535:13" pos:end="535:18">aml_io</name><argument_list pos:start="535:19" pos:end="535:79">(<argument pos:start="535:20" pos:end="535:31"><expr pos:start="535:20" pos:end="535:31"><name pos:start="535:20" pos:end="535:31">AML_DECODE16</name></expr></argument>, <argument pos:start="535:34" pos:end="535:47"><expr pos:start="535:34" pos:end="535:47"><name pos:start="535:34" pos:end="535:47">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="535:50" pos:end="535:63"><expr pos:start="535:50" pos:end="535:63"><name pos:start="535:50" pos:end="535:63">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="535:66" pos:end="535:69"><expr pos:start="535:66" pos:end="535:69"><literal type="number" pos:start="535:66" pos:end="535:69">0x01</literal></expr></argument>, <argument pos:start="535:72" pos:end="535:78"><expr pos:start="535:72" pos:end="535:78"><name pos:start="535:72" pos:end="535:78">io_size</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="539:9" pos:end="539:52"><expr pos:start="539:9" pos:end="539:51"><call pos:start="539:9" pos:end="539:51"><name pos:start="539:9" pos:end="539:18">aml_append</name><argument_list pos:start="539:19" pos:end="539:51">(<argument pos:start="539:20" pos:end="539:22"><expr pos:start="539:20" pos:end="539:22"><name pos:start="539:20" pos:end="539:22">dev</name></expr></argument>, <argument pos:start="539:25" pos:end="539:50"><expr pos:start="539:25" pos:end="539:50"><call pos:start="539:25" pos:end="539:50"><name pos:start="539:25" pos:end="539:37">aml_name_decl</name><argument_list pos:start="539:38" pos:end="539:50">(<argument pos:start="539:39" pos:end="539:44"><expr pos:start="539:39" pos:end="539:44"><literal type="string" pos:start="539:39" pos:end="539:44">"_CRS"</literal></expr></argument>, <argument pos:start="539:47" pos:end="539:49"><expr pos:start="539:47" pos:end="539:49"><name pos:start="539:47" pos:end="539:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="543:9" pos:end="543:31"><expr pos:start="543:9" pos:end="543:30"><call pos:start="543:9" pos:end="543:30"><name pos:start="543:9" pos:end="543:18">aml_append</name><argument_list pos:start="543:19" pos:end="543:30">(<argument pos:start="543:20" pos:end="543:24"><expr pos:start="543:20" pos:end="543:24"><name pos:start="543:20" pos:end="543:24">scope</name></expr></argument>, <argument pos:start="543:27" pos:end="543:29"><expr pos:start="543:27" pos:end="543:29"><name pos:start="543:27" pos:end="543:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="545:9" pos:end="545:32"><expr pos:start="545:9" pos:end="545:31"><call pos:start="545:9" pos:end="545:31"><name pos:start="545:9" pos:end="545:18">aml_append</name><argument_list pos:start="545:19" pos:end="545:31">(<argument pos:start="545:20" pos:end="545:23"><expr pos:start="545:20" pos:end="545:23"><name pos:start="545:20" pos:end="545:23">dsdt</name></expr></argument>, <argument pos:start="545:26" pos:end="545:30"><expr pos:start="545:26" pos:end="545:30"><name pos:start="545:26" pos:end="545:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="551:5" pos:end="587:5"><if pos:start="551:5" pos:end="587:5">if <condition pos:start="551:8" pos:end="551:31">(<expr pos:start="551:9" pos:end="551:30"><name pos:start="551:9" pos:end="551:30"><name pos:start="551:9" pos:end="551:12">misc</name><operator pos:start="551:13" pos:end="551:14">-&gt;</operator><name pos:start="551:15" pos:end="551:30">applesmc_io_base</name></name></expr>)</condition> <block pos:start="551:33" pos:end="587:5">{<block_content pos:start="553:9" pos:end="585:32">

        <expr_stmt pos:start="553:9" pos:end="553:44"><expr pos:start="553:9" pos:end="553:43"><name pos:start="553:9" pos:end="553:13">scope</name> <operator pos:start="553:15" pos:end="553:15">=</operator> <call pos:start="553:17" pos:end="553:43"><name pos:start="553:17" pos:end="553:25">aml_scope</name><argument_list pos:start="553:26" pos:end="553:43">(<argument pos:start="553:27" pos:end="553:42"><expr pos:start="553:27" pos:end="553:42"><literal type="string" pos:start="553:27" pos:end="553:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="555:9" pos:end="555:32"><expr pos:start="555:9" pos:end="555:31"><name pos:start="555:9" pos:end="555:11">dev</name> <operator pos:start="555:13" pos:end="555:13">=</operator> <call pos:start="555:15" pos:end="555:31"><name pos:start="555:15" pos:end="555:24">aml_device</name><argument_list pos:start="555:25" pos:end="555:31">(<argument pos:start="555:26" pos:end="555:30"><expr pos:start="555:26" pos:end="555:30"><literal type="string" pos:start="555:26" pos:end="555:30">"SMC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="559:9" pos:end="559:70"><expr pos:start="559:9" pos:end="559:69"><call pos:start="559:9" pos:end="559:69"><name pos:start="559:9" pos:end="559:18">aml_append</name><argument_list pos:start="559:19" pos:end="559:69">(<argument pos:start="559:20" pos:end="559:22"><expr pos:start="559:20" pos:end="559:22"><name pos:start="559:20" pos:end="559:22">dev</name></expr></argument>, <argument pos:start="559:25" pos:end="559:68"><expr pos:start="559:25" pos:end="559:68"><call pos:start="559:25" pos:end="559:68"><name pos:start="559:25" pos:end="559:37">aml_name_decl</name><argument_list pos:start="559:38" pos:end="559:68">(<argument pos:start="559:39" pos:end="559:44"><expr pos:start="559:39" pos:end="559:44"><literal type="string" pos:start="559:39" pos:end="559:44">"_HID"</literal></expr></argument>, <argument pos:start="559:47" pos:end="559:67"><expr pos:start="559:47" pos:end="559:67"><call pos:start="559:47" pos:end="559:67"><name pos:start="559:47" pos:end="559:56">aml_eisaid</name><argument_list pos:start="559:57" pos:end="559:67">(<argument pos:start="559:58" pos:end="559:66"><expr pos:start="559:58" pos:end="559:66"><literal type="string" pos:start="559:58" pos:end="559:66">"APP0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="561:9" pos:end="561:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="563:9" pos:end="563:61"><expr pos:start="563:9" pos:end="563:60"><call pos:start="563:9" pos:end="563:60"><name pos:start="563:9" pos:end="563:18">aml_append</name><argument_list pos:start="563:19" pos:end="563:60">(<argument pos:start="563:20" pos:end="563:22"><expr pos:start="563:20" pos:end="563:22"><name pos:start="563:20" pos:end="563:22">dev</name></expr></argument>, <argument pos:start="563:25" pos:end="563:59"><expr pos:start="563:25" pos:end="563:59"><call pos:start="563:25" pos:end="563:59"><name pos:start="563:25" pos:end="563:37">aml_name_decl</name><argument_list pos:start="563:38" pos:end="563:59">(<argument pos:start="563:39" pos:end="563:44"><expr pos:start="563:39" pos:end="563:44"><literal type="string" pos:start="563:39" pos:end="563:44">"_STA"</literal></expr></argument>, <argument pos:start="563:47" pos:end="563:58"><expr pos:start="563:47" pos:end="563:58"><call pos:start="563:47" pos:end="563:58"><name pos:start="563:47" pos:end="563:53">aml_int</name><argument_list pos:start="563:54" pos:end="563:58">(<argument pos:start="563:55" pos:end="563:57"><expr pos:start="563:55" pos:end="563:57"><literal type="number" pos:start="563:55" pos:end="563:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="567:9" pos:end="567:38"><expr pos:start="567:9" pos:end="567:37"><name pos:start="567:9" pos:end="567:11">crs</name> <operator pos:start="567:13" pos:end="567:13">=</operator> <call pos:start="567:15" pos:end="567:37"><name pos:start="567:15" pos:end="567:35">aml_resource_template</name><argument_list pos:start="567:36" pos:end="567:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="569:9" pos:end="575:10"><expr pos:start="569:9" pos:end="575:9"><call pos:start="569:9" pos:end="575:9"><name pos:start="569:9" pos:end="569:18">aml_append</name><argument_list pos:start="569:19" pos:end="575:9">(<argument pos:start="569:20" pos:end="569:22"><expr pos:start="569:20" pos:end="569:22"><name pos:start="569:20" pos:end="569:22">crs</name></expr></argument>,

            <argument pos:start="571:13" pos:end="573:50"><expr pos:start="571:13" pos:end="573:50"><call pos:start="571:13" pos:end="573:50"><name pos:start="571:13" pos:end="571:18">aml_io</name><argument_list pos:start="571:19" pos:end="573:50">(<argument pos:start="571:20" pos:end="571:31"><expr pos:start="571:20" pos:end="571:31"><name pos:start="571:20" pos:end="571:31">AML_DECODE16</name></expr></argument>, <argument pos:start="571:34" pos:end="571:55"><expr pos:start="571:34" pos:end="571:55"><name pos:start="571:34" pos:end="571:55"><name pos:start="571:34" pos:end="571:37">misc</name><operator pos:start="571:38" pos:end="571:39">-&gt;</operator><name pos:start="571:40" pos:end="571:55">applesmc_io_base</name></name></expr></argument>, <argument pos:start="571:58" pos:end="571:79"><expr pos:start="571:58" pos:end="571:79"><name pos:start="571:58" pos:end="571:79"><name pos:start="571:58" pos:end="571:61">misc</name><operator pos:start="571:62" pos:end="571:63">-&gt;</operator><name pos:start="571:64" pos:end="571:79">applesmc_io_base</name></name></expr></argument>,

                   <argument pos:start="573:20" pos:end="573:23"><expr pos:start="573:20" pos:end="573:23"><literal type="number" pos:start="573:20" pos:end="573:23">0x01</literal></expr></argument>, <argument pos:start="573:26" pos:end="573:49"><expr pos:start="573:26" pos:end="573:49"><name pos:start="573:26" pos:end="573:49">APPLESMC_MAX_DATA_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:45"><expr pos:start="577:9" pos:end="577:44"><call pos:start="577:9" pos:end="577:44"><name pos:start="577:9" pos:end="577:18">aml_append</name><argument_list pos:start="577:19" pos:end="577:44">(<argument pos:start="577:20" pos:end="577:22"><expr pos:start="577:20" pos:end="577:22"><name pos:start="577:20" pos:end="577:22">crs</name></expr></argument>, <argument pos:start="577:25" pos:end="577:43"><expr pos:start="577:25" pos:end="577:43"><call pos:start="577:25" pos:end="577:43"><name pos:start="577:25" pos:end="577:40">aml_irq_no_flags</name><argument_list pos:start="577:41" pos:end="577:43">(<argument pos:start="577:42" pos:end="577:42"><expr pos:start="577:42" pos:end="577:42"><literal type="number" pos:start="577:42" pos:end="577:42">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="579:9" pos:end="579:52"><expr pos:start="579:9" pos:end="579:51"><call pos:start="579:9" pos:end="579:51"><name pos:start="579:9" pos:end="579:18">aml_append</name><argument_list pos:start="579:19" pos:end="579:51">(<argument pos:start="579:20" pos:end="579:22"><expr pos:start="579:20" pos:end="579:22"><name pos:start="579:20" pos:end="579:22">dev</name></expr></argument>, <argument pos:start="579:25" pos:end="579:50"><expr pos:start="579:25" pos:end="579:50"><call pos:start="579:25" pos:end="579:50"><name pos:start="579:25" pos:end="579:37">aml_name_decl</name><argument_list pos:start="579:38" pos:end="579:50">(<argument pos:start="579:39" pos:end="579:44"><expr pos:start="579:39" pos:end="579:44"><literal type="string" pos:start="579:39" pos:end="579:44">"_CRS"</literal></expr></argument>, <argument pos:start="579:47" pos:end="579:49"><expr pos:start="579:47" pos:end="579:49"><name pos:start="579:47" pos:end="579:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="583:9" pos:end="583:31"><expr pos:start="583:9" pos:end="583:30"><call pos:start="583:9" pos:end="583:30"><name pos:start="583:9" pos:end="583:18">aml_append</name><argument_list pos:start="583:19" pos:end="583:30">(<argument pos:start="583:20" pos:end="583:24"><expr pos:start="583:20" pos:end="583:24"><name pos:start="583:20" pos:end="583:24">scope</name></expr></argument>, <argument pos:start="583:27" pos:end="583:29"><expr pos:start="583:27" pos:end="583:29"><name pos:start="583:27" pos:end="583:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="585:9" pos:end="585:32"><expr pos:start="585:9" pos:end="585:31"><call pos:start="585:9" pos:end="585:31"><name pos:start="585:9" pos:end="585:18">aml_append</name><argument_list pos:start="585:19" pos:end="585:31">(<argument pos:start="585:20" pos:end="585:23"><expr pos:start="585:20" pos:end="585:23"><name pos:start="585:20" pos:end="585:23">dsdt</name></expr></argument>, <argument pos:start="585:26" pos:end="585:30"><expr pos:start="585:26" pos:end="585:30"><name pos:start="585:26" pos:end="585:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="591:5" pos:end="655:5"><if pos:start="591:5" pos:end="655:5">if <condition pos:start="591:8" pos:end="591:27">(<expr pos:start="591:9" pos:end="591:26"><name pos:start="591:9" pos:end="591:26"><name pos:start="591:9" pos:end="591:12">misc</name><operator pos:start="591:13" pos:end="591:14">-&gt;</operator><name pos:start="591:15" pos:end="591:26">pvpanic_port</name></name></expr>)</condition> <block pos:start="591:29" pos:end="655:5">{<block_content pos:start="593:9" pos:end="653:32">

        <expr_stmt pos:start="593:9" pos:end="593:44"><expr pos:start="593:9" pos:end="593:43"><name pos:start="593:9" pos:end="593:13">scope</name> <operator pos:start="593:15" pos:end="593:15">=</operator> <call pos:start="593:17" pos:end="593:43"><name pos:start="593:17" pos:end="593:25">aml_scope</name><argument_list pos:start="593:26" pos:end="593:43">(<argument pos:start="593:27" pos:end="593:42"><expr pos:start="593:27" pos:end="593:42"><literal type="string" pos:start="593:27" pos:end="593:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="597:9" pos:end="597:33"><expr pos:start="597:9" pos:end="597:32"><name pos:start="597:9" pos:end="597:11">dev</name> <operator pos:start="597:13" pos:end="597:13">=</operator> <call pos:start="597:15" pos:end="597:32"><name pos:start="597:15" pos:end="597:24">aml_device</name><argument_list pos:start="597:25" pos:end="597:32">(<argument pos:start="597:26" pos:end="597:31"><expr pos:start="597:26" pos:end="597:31"><literal type="string" pos:start="597:26" pos:end="597:31">"PEVT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:71"><expr pos:start="599:9" pos:end="599:70"><call pos:start="599:9" pos:end="599:70"><name pos:start="599:9" pos:end="599:18">aml_append</name><argument_list pos:start="599:19" pos:end="599:70">(<argument pos:start="599:20" pos:end="599:22"><expr pos:start="599:20" pos:end="599:22"><name pos:start="599:20" pos:end="599:22">dev</name></expr></argument>, <argument pos:start="599:25" pos:end="599:69"><expr pos:start="599:25" pos:end="599:69"><call pos:start="599:25" pos:end="599:69"><name pos:start="599:25" pos:end="599:37">aml_name_decl</name><argument_list pos:start="599:38" pos:end="599:69">(<argument pos:start="599:39" pos:end="599:44"><expr pos:start="599:39" pos:end="599:44"><literal type="string" pos:start="599:39" pos:end="599:44">"_HID"</literal></expr></argument>, <argument pos:start="599:47" pos:end="599:68"><expr pos:start="599:47" pos:end="599:68"><call pos:start="599:47" pos:end="599:68"><name pos:start="599:47" pos:end="599:56">aml_string</name><argument_list pos:start="599:57" pos:end="599:68">(<argument pos:start="599:58" pos:end="599:67"><expr pos:start="599:58" pos:end="599:67"><literal type="string" pos:start="599:58" pos:end="599:67">"QEMU0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="603:9" pos:end="603:38"><expr pos:start="603:9" pos:end="603:37"><name pos:start="603:9" pos:end="603:11">crs</name> <operator pos:start="603:13" pos:end="603:13">=</operator> <call pos:start="603:15" pos:end="603:37"><name pos:start="603:15" pos:end="603:35">aml_resource_template</name><argument_list pos:start="603:36" pos:end="603:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="605:9" pos:end="609:10"><expr pos:start="605:9" pos:end="609:9"><call pos:start="605:9" pos:end="609:9"><name pos:start="605:9" pos:end="605:18">aml_append</name><argument_list pos:start="605:19" pos:end="609:9">(<argument pos:start="605:20" pos:end="605:22"><expr pos:start="605:20" pos:end="605:22"><name pos:start="605:20" pos:end="605:22">crs</name></expr></argument>,

            <argument pos:start="607:13" pos:end="607:78"><expr pos:start="607:13" pos:end="607:78"><call pos:start="607:13" pos:end="607:78"><name pos:start="607:13" pos:end="607:18">aml_io</name><argument_list pos:start="607:19" pos:end="607:78">(<argument pos:start="607:20" pos:end="607:31"><expr pos:start="607:20" pos:end="607:31"><name pos:start="607:20" pos:end="607:31">AML_DECODE16</name></expr></argument>, <argument pos:start="607:34" pos:end="607:51"><expr pos:start="607:34" pos:end="607:51"><name pos:start="607:34" pos:end="607:51"><name pos:start="607:34" pos:end="607:37">misc</name><operator pos:start="607:38" pos:end="607:39">-&gt;</operator><name pos:start="607:40" pos:end="607:51">pvpanic_port</name></name></expr></argument>, <argument pos:start="607:54" pos:end="607:71"><expr pos:start="607:54" pos:end="607:71"><name pos:start="607:54" pos:end="607:71"><name pos:start="607:54" pos:end="607:57">misc</name><operator pos:start="607:58" pos:end="607:59">-&gt;</operator><name pos:start="607:60" pos:end="607:71">pvpanic_port</name></name></expr></argument>, <argument pos:start="607:74" pos:end="607:74"><expr pos:start="607:74" pos:end="607:74"><literal type="number" pos:start="607:74" pos:end="607:74">1</literal></expr></argument>, <argument pos:start="607:77" pos:end="607:77"><expr pos:start="607:77" pos:end="607:77"><literal type="number" pos:start="607:77" pos:end="607:77">1</literal></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="611:9" pos:end="611:52"><expr pos:start="611:9" pos:end="611:51"><call pos:start="611:9" pos:end="611:51"><name pos:start="611:9" pos:end="611:18">aml_append</name><argument_list pos:start="611:19" pos:end="611:51">(<argument pos:start="611:20" pos:end="611:22"><expr pos:start="611:20" pos:end="611:22"><name pos:start="611:20" pos:end="611:22">dev</name></expr></argument>, <argument pos:start="611:25" pos:end="611:50"><expr pos:start="611:25" pos:end="611:50"><call pos:start="611:25" pos:end="611:50"><name pos:start="611:25" pos:end="611:37">aml_name_decl</name><argument_list pos:start="611:38" pos:end="611:50">(<argument pos:start="611:39" pos:end="611:44"><expr pos:start="611:39" pos:end="611:44"><literal type="string" pos:start="611:39" pos:end="611:44">"_CRS"</literal></expr></argument>, <argument pos:start="611:47" pos:end="611:49"><expr pos:start="611:47" pos:end="611:49"><name pos:start="611:47" pos:end="611:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="615:9" pos:end="617:79"><expr pos:start="615:9" pos:end="617:78"><call pos:start="615:9" pos:end="617:78"><name pos:start="615:9" pos:end="615:18">aml_append</name><argument_list pos:start="615:19" pos:end="617:78">(<argument pos:start="615:20" pos:end="615:22"><expr pos:start="615:20" pos:end="615:22"><name pos:start="615:20" pos:end="615:22">dev</name></expr></argument>, <argument pos:start="615:25" pos:end="617:77"><expr pos:start="615:25" pos:end="617:77"><call pos:start="615:25" pos:end="617:77"><name pos:start="615:25" pos:end="615:44">aml_operation_region</name><argument_list pos:start="615:45" pos:end="617:77">(<argument pos:start="615:46" pos:end="615:51"><expr pos:start="615:46" pos:end="615:51"><literal type="string" pos:start="615:46" pos:end="615:51">"PEOR"</literal></expr></argument>, <argument pos:start="615:54" pos:end="615:66"><expr pos:start="615:54" pos:end="615:66"><name pos:start="615:54" pos:end="615:66">AML_SYSTEM_IO</name></expr></argument>,

                                              <argument pos:start="617:47" pos:end="617:73"><expr pos:start="617:47" pos:end="617:73"><call pos:start="617:47" pos:end="617:73"><name pos:start="617:47" pos:end="617:53">aml_int</name><argument_list pos:start="617:54" pos:end="617:73">(<argument pos:start="617:55" pos:end="617:72"><expr pos:start="617:55" pos:end="617:72"><name pos:start="617:55" pos:end="617:72"><name pos:start="617:55" pos:end="617:58">misc</name><operator pos:start="617:59" pos:end="617:60">-&gt;</operator><name pos:start="617:61" pos:end="617:72">pvpanic_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="617:76" pos:end="617:76"><expr pos:start="617:76" pos:end="617:76"><literal type="number" pos:start="617:76" pos:end="617:76">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="619:9" pos:end="619:74"><expr pos:start="619:9" pos:end="619:73"><name pos:start="619:9" pos:end="619:13">field</name> <operator pos:start="619:15" pos:end="619:15">=</operator> <call pos:start="619:17" pos:end="619:73"><name pos:start="619:17" pos:end="619:25">aml_field</name><argument_list pos:start="619:26" pos:end="619:73">(<argument pos:start="619:27" pos:end="619:32"><expr pos:start="619:27" pos:end="619:32"><literal type="string" pos:start="619:27" pos:end="619:32">"PEOR"</literal></expr></argument>, <argument pos:start="619:35" pos:end="619:46"><expr pos:start="619:35" pos:end="619:46"><name pos:start="619:35" pos:end="619:46">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="619:49" pos:end="619:58"><expr pos:start="619:49" pos:end="619:58"><name pos:start="619:49" pos:end="619:58">AML_NOLOCK</name></expr></argument>, <argument pos:start="619:61" pos:end="619:72"><expr pos:start="619:61" pos:end="619:72"><name pos:start="619:61" pos:end="619:72">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="621:9" pos:end="621:54"><expr pos:start="621:9" pos:end="621:53"><call pos:start="621:9" pos:end="621:53"><name pos:start="621:9" pos:end="621:18">aml_append</name><argument_list pos:start="621:19" pos:end="621:53">(<argument pos:start="621:20" pos:end="621:24"><expr pos:start="621:20" pos:end="621:24"><name pos:start="621:20" pos:end="621:24">field</name></expr></argument>, <argument pos:start="621:27" pos:end="621:52"><expr pos:start="621:27" pos:end="621:52"><call pos:start="621:27" pos:end="621:52"><name pos:start="621:27" pos:end="621:41">aml_named_field</name><argument_list pos:start="621:42" pos:end="621:52">(<argument pos:start="621:43" pos:end="621:48"><expr pos:start="621:43" pos:end="621:48"><literal type="string" pos:start="621:43" pos:end="621:48">"PEPT"</literal></expr></argument>, <argument pos:start="621:51" pos:end="621:51"><expr pos:start="621:51" pos:end="621:51"><literal type="number" pos:start="621:51" pos:end="621:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:31"><expr pos:start="623:9" pos:end="623:30"><call pos:start="623:9" pos:end="623:30"><name pos:start="623:9" pos:end="623:18">aml_append</name><argument_list pos:start="623:19" pos:end="623:30">(<argument pos:start="623:20" pos:end="623:22"><expr pos:start="623:20" pos:end="623:22"><name pos:start="623:20" pos:end="623:22">dev</name></expr></argument>, <argument pos:start="623:25" pos:end="623:29"><expr pos:start="623:25" pos:end="623:29"><name pos:start="623:25" pos:end="623:29">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="627:9" pos:end="627:64">/* device present, functioning, decoding, shown in UI */</comment>

        <expr_stmt pos:start="629:9" pos:end="629:61"><expr pos:start="629:9" pos:end="629:60"><call pos:start="629:9" pos:end="629:60"><name pos:start="629:9" pos:end="629:18">aml_append</name><argument_list pos:start="629:19" pos:end="629:60">(<argument pos:start="629:20" pos:end="629:22"><expr pos:start="629:20" pos:end="629:22"><name pos:start="629:20" pos:end="629:22">dev</name></expr></argument>, <argument pos:start="629:25" pos:end="629:59"><expr pos:start="629:25" pos:end="629:59"><call pos:start="629:25" pos:end="629:59"><name pos:start="629:25" pos:end="629:37">aml_name_decl</name><argument_list pos:start="629:38" pos:end="629:59">(<argument pos:start="629:39" pos:end="629:44"><expr pos:start="629:39" pos:end="629:44"><literal type="string" pos:start="629:39" pos:end="629:44">"_STA"</literal></expr></argument>, <argument pos:start="629:47" pos:end="629:58"><expr pos:start="629:47" pos:end="629:58"><call pos:start="629:47" pos:end="629:58"><name pos:start="629:47" pos:end="629:53">aml_int</name><argument_list pos:start="629:54" pos:end="629:58">(<argument pos:start="629:55" pos:end="629:57"><expr pos:start="629:55" pos:end="629:57"><literal type="number" pos:start="629:55" pos:end="629:57">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="633:9" pos:end="633:58"><expr pos:start="633:9" pos:end="633:57"><name pos:start="633:9" pos:end="633:14">method</name> <operator pos:start="633:16" pos:end="633:16">=</operator> <call pos:start="633:18" pos:end="633:57"><name pos:start="633:18" pos:end="633:27">aml_method</name><argument_list pos:start="633:28" pos:end="633:57">(<argument pos:start="633:29" pos:end="633:34"><expr pos:start="633:29" pos:end="633:34"><literal type="string" pos:start="633:29" pos:end="633:34">"RDPT"</literal></expr></argument>, <argument pos:start="633:37" pos:end="633:37"><expr pos:start="633:37" pos:end="633:37"><literal type="number" pos:start="633:37" pos:end="633:37">0</literal></expr></argument>, <argument pos:start="633:40" pos:end="633:56"><expr pos:start="633:40" pos:end="633:56"><name pos:start="633:40" pos:end="633:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="635:9" pos:end="635:70"><expr pos:start="635:9" pos:end="635:69"><call pos:start="635:9" pos:end="635:69"><name pos:start="635:9" pos:end="635:18">aml_append</name><argument_list pos:start="635:19" pos:end="635:69">(<argument pos:start="635:20" pos:end="635:25"><expr pos:start="635:20" pos:end="635:25"><name pos:start="635:20" pos:end="635:25">method</name></expr></argument>, <argument pos:start="635:28" pos:end="635:68"><expr pos:start="635:28" pos:end="635:68"><call pos:start="635:28" pos:end="635:68"><name pos:start="635:28" pos:end="635:36">aml_store</name><argument_list pos:start="635:37" pos:end="635:68">(<argument pos:start="635:38" pos:end="635:53"><expr pos:start="635:38" pos:end="635:53"><call pos:start="635:38" pos:end="635:53"><name pos:start="635:38" pos:end="635:45">aml_name</name><argument_list pos:start="635:46" pos:end="635:53">(<argument pos:start="635:47" pos:end="635:52"><expr pos:start="635:47" pos:end="635:52"><literal type="string" pos:start="635:47" pos:end="635:52">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="635:56" pos:end="635:67"><expr pos:start="635:56" pos:end="635:67"><call pos:start="635:56" pos:end="635:67"><name pos:start="635:56" pos:end="635:64">aml_local</name><argument_list pos:start="635:65" pos:end="635:67">(<argument pos:start="635:66" pos:end="635:66"><expr pos:start="635:66" pos:end="635:66"><literal type="number" pos:start="635:66" pos:end="635:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="637:9" pos:end="637:53"><expr pos:start="637:9" pos:end="637:52"><call pos:start="637:9" pos:end="637:52"><name pos:start="637:9" pos:end="637:18">aml_append</name><argument_list pos:start="637:19" pos:end="637:52">(<argument pos:start="637:20" pos:end="637:25"><expr pos:start="637:20" pos:end="637:25"><name pos:start="637:20" pos:end="637:25">method</name></expr></argument>, <argument pos:start="637:28" pos:end="637:51"><expr pos:start="637:28" pos:end="637:51"><call pos:start="637:28" pos:end="637:51"><name pos:start="637:28" pos:end="637:37">aml_return</name><argument_list pos:start="637:38" pos:end="637:51">(<argument pos:start="637:39" pos:end="637:50"><expr pos:start="637:39" pos:end="637:50"><call pos:start="637:39" pos:end="637:50"><name pos:start="637:39" pos:end="637:47">aml_local</name><argument_list pos:start="637:48" pos:end="637:50">(<argument pos:start="637:49" pos:end="637:49"><expr pos:start="637:49" pos:end="637:49"><literal type="number" pos:start="637:49" pos:end="637:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="639:9" pos:end="639:32"><expr pos:start="639:9" pos:end="639:31"><call pos:start="639:9" pos:end="639:31"><name pos:start="639:9" pos:end="639:18">aml_append</name><argument_list pos:start="639:19" pos:end="639:31">(<argument pos:start="639:20" pos:end="639:22"><expr pos:start="639:20" pos:end="639:22"><name pos:start="639:20" pos:end="639:22">dev</name></expr></argument>, <argument pos:start="639:25" pos:end="639:30"><expr pos:start="639:25" pos:end="639:30"><name pos:start="639:25" pos:end="639:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="643:9" pos:end="643:58"><expr pos:start="643:9" pos:end="643:57"><name pos:start="643:9" pos:end="643:14">method</name> <operator pos:start="643:16" pos:end="643:16">=</operator> <call pos:start="643:18" pos:end="643:57"><name pos:start="643:18" pos:end="643:27">aml_method</name><argument_list pos:start="643:28" pos:end="643:57">(<argument pos:start="643:29" pos:end="643:34"><expr pos:start="643:29" pos:end="643:34"><literal type="string" pos:start="643:29" pos:end="643:34">"WRPT"</literal></expr></argument>, <argument pos:start="643:37" pos:end="643:37"><expr pos:start="643:37" pos:end="643:37"><literal type="number" pos:start="643:37" pos:end="643:37">1</literal></expr></argument>, <argument pos:start="643:40" pos:end="643:56"><expr pos:start="643:40" pos:end="643:56"><name pos:start="643:40" pos:end="643:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="645:9" pos:end="645:68"><expr pos:start="645:9" pos:end="645:67"><call pos:start="645:9" pos:end="645:67"><name pos:start="645:9" pos:end="645:18">aml_append</name><argument_list pos:start="645:19" pos:end="645:67">(<argument pos:start="645:20" pos:end="645:25"><expr pos:start="645:20" pos:end="645:25"><name pos:start="645:20" pos:end="645:25">method</name></expr></argument>, <argument pos:start="645:28" pos:end="645:66"><expr pos:start="645:28" pos:end="645:66"><call pos:start="645:28" pos:end="645:66"><name pos:start="645:28" pos:end="645:36">aml_store</name><argument_list pos:start="645:37" pos:end="645:66">(<argument pos:start="645:38" pos:end="645:47"><expr pos:start="645:38" pos:end="645:47"><call pos:start="645:38" pos:end="645:47"><name pos:start="645:38" pos:end="645:44">aml_arg</name><argument_list pos:start="645:45" pos:end="645:47">(<argument pos:start="645:46" pos:end="645:46"><expr pos:start="645:46" pos:end="645:46"><literal type="number" pos:start="645:46" pos:end="645:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="645:50" pos:end="645:65"><expr pos:start="645:50" pos:end="645:65"><call pos:start="645:50" pos:end="645:65"><name pos:start="645:50" pos:end="645:57">aml_name</name><argument_list pos:start="645:58" pos:end="645:65">(<argument pos:start="645:59" pos:end="645:64"><expr pos:start="645:59" pos:end="645:64"><literal type="string" pos:start="645:59" pos:end="645:64">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="647:9" pos:end="647:32"><expr pos:start="647:9" pos:end="647:31"><call pos:start="647:9" pos:end="647:31"><name pos:start="647:9" pos:end="647:18">aml_append</name><argument_list pos:start="647:19" pos:end="647:31">(<argument pos:start="647:20" pos:end="647:22"><expr pos:start="647:20" pos:end="647:22"><name pos:start="647:20" pos:end="647:22">dev</name></expr></argument>, <argument pos:start="647:25" pos:end="647:30"><expr pos:start="647:25" pos:end="647:30"><name pos:start="647:25" pos:end="647:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="651:9" pos:end="651:31"><expr pos:start="651:9" pos:end="651:30"><call pos:start="651:9" pos:end="651:30"><name pos:start="651:9" pos:end="651:18">aml_append</name><argument_list pos:start="651:19" pos:end="651:30">(<argument pos:start="651:20" pos:end="651:24"><expr pos:start="651:20" pos:end="651:24"><name pos:start="651:20" pos:end="651:24">scope</name></expr></argument>, <argument pos:start="651:27" pos:end="651:29"><expr pos:start="651:27" pos:end="651:29"><name pos:start="651:27" pos:end="651:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="653:9" pos:end="653:32"><expr pos:start="653:9" pos:end="653:31"><call pos:start="653:9" pos:end="653:31"><name pos:start="653:9" pos:end="653:18">aml_append</name><argument_list pos:start="653:19" pos:end="653:31">(<argument pos:start="653:20" pos:end="653:23"><expr pos:start="653:20" pos:end="653:23"><name pos:start="653:20" pos:end="653:23">dsdt</name></expr></argument>, <argument pos:start="653:26" pos:end="653:30"><expr pos:start="653:26" pos:end="653:30"><name pos:start="653:26" pos:end="653:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="659:5" pos:end="659:34"><expr pos:start="659:5" pos:end="659:33"><name pos:start="659:5" pos:end="659:12">sb_scope</name> <operator pos:start="659:14" pos:end="659:14">=</operator> <call pos:start="659:16" pos:end="659:33"><name pos:start="659:16" pos:end="659:24">aml_scope</name><argument_list pos:start="659:25" pos:end="659:33">(<argument pos:start="659:26" pos:end="659:32"><expr pos:start="659:26" pos:end="659:32"><literal type="string" pos:start="659:26" pos:end="659:32">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="661:5" pos:end="727:5">{<block_content pos:start="663:9" pos:end="725:9">

        <decl_stmt pos:start="663:9" pos:end="663:25"><decl pos:start="663:9" pos:end="663:24"><type pos:start="663:9" pos:end="663:16"><name pos:start="663:9" pos:end="663:14">Object</name> <modifier pos:start="663:16" pos:end="663:16">*</modifier></type><name pos:start="663:17" pos:end="663:24">pci_host</name></decl>;</decl_stmt>

        <decl_stmt pos:start="665:9" pos:end="665:27"><decl pos:start="665:9" pos:end="665:26"><type pos:start="665:9" pos:end="665:16"><name pos:start="665:9" pos:end="665:14">PCIBus</name> <modifier pos:start="665:16" pos:end="665:16">*</modifier></type><name pos:start="665:17" pos:end="665:19">bus</name> <init pos:start="665:21" pos:end="665:26">= <expr pos:start="665:23" pos:end="665:26"><name pos:start="665:23" pos:end="665:26">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="669:9" pos:end="669:44"><expr pos:start="669:9" pos:end="669:43"><name pos:start="669:9" pos:end="669:16">pci_host</name> <operator pos:start="669:18" pos:end="669:18">=</operator> <call pos:start="669:20" pos:end="669:43"><name pos:start="669:20" pos:end="669:41">acpi_get_i386_pci_host</name><argument_list pos:start="669:42" pos:end="669:43">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="671:9" pos:end="675:9"><if pos:start="671:9" pos:end="675:9">if <condition pos:start="671:12" pos:end="671:21">(<expr pos:start="671:13" pos:end="671:20"><name pos:start="671:13" pos:end="671:20">pci_host</name></expr>)</condition> <block pos:start="671:23" pos:end="675:9">{<block_content pos:start="673:13" pos:end="673:49">

            <expr_stmt pos:start="673:13" pos:end="673:49"><expr pos:start="673:13" pos:end="673:48"><name pos:start="673:13" pos:end="673:15">bus</name> <operator pos:start="673:17" pos:end="673:17">=</operator> <call pos:start="673:19" pos:end="673:43"><name pos:start="673:19" pos:end="673:33">PCI_HOST_BRIDGE</name><argument_list pos:start="673:34" pos:end="673:43">(<argument pos:start="673:35" pos:end="673:42"><expr pos:start="673:35" pos:end="673:42"><name pos:start="673:35" pos:end="673:42">pci_host</name></expr></argument>)</argument_list></call><operator pos:start="673:44" pos:end="673:45">-&gt;</operator><name pos:start="673:46" pos:end="673:48">bus</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="679:9" pos:end="725:9"><if pos:start="679:9" pos:end="725:9">if <condition pos:start="679:12" pos:end="679:16">(<expr pos:start="679:13" pos:end="679:15"><name pos:start="679:13" pos:end="679:15">bus</name></expr>)</condition> <block pos:start="679:18" pos:end="725:9">{<block_content pos:start="681:13" pos:end="723:40">

            <decl_stmt pos:start="681:13" pos:end="681:43"><decl pos:start="681:13" pos:end="681:42"><type pos:start="681:13" pos:end="681:17"><name pos:start="681:13" pos:end="681:15">Aml</name> <modifier pos:start="681:17" pos:end="681:17">*</modifier></type><name pos:start="681:18" pos:end="681:22">scope</name> <init pos:start="681:24" pos:end="681:42">= <expr pos:start="681:26" pos:end="681:42"><call pos:start="681:26" pos:end="681:42"><name pos:start="681:26" pos:end="681:34">aml_scope</name><argument_list pos:start="681:35" pos:end="681:42">(<argument pos:start="681:36" pos:end="681:41"><expr pos:start="681:36" pos:end="681:41"><literal type="string" pos:start="681:36" pos:end="681:41">"PCI0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="683:13" pos:end="683:73">/* Scan all PCI buses. Generate tables to support hotplug. */</comment>

            <expr_stmt pos:start="685:13" pos:end="685:74"><expr pos:start="685:13" pos:end="685:73"><call pos:start="685:13" pos:end="685:73"><name pos:start="685:13" pos:end="685:40">build_append_pci_bus_devices</name><argument_list pos:start="685:41" pos:end="685:73">(<argument pos:start="685:42" pos:end="685:46"><expr pos:start="685:42" pos:end="685:46"><name pos:start="685:42" pos:end="685:46">scope</name></expr></argument>, <argument pos:start="685:49" pos:end="685:51"><expr pos:start="685:49" pos:end="685:51"><name pos:start="685:49" pos:end="685:51">bus</name></expr></argument>, <argument pos:start="685:54" pos:end="685:72"><expr pos:start="685:54" pos:end="685:72"><name pos:start="685:54" pos:end="685:72"><name pos:start="685:54" pos:end="685:55">pm</name><operator pos:start="685:56" pos:end="685:57">-&gt;</operator><name pos:start="685:58" pos:end="685:72">pcihp_bridge_en</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="689:13" pos:end="719:13"><if pos:start="689:13" pos:end="719:13">if <condition pos:start="689:16" pos:end="689:56">(<expr pos:start="689:17" pos:end="689:55"><name pos:start="689:17" pos:end="689:33"><name pos:start="689:17" pos:end="689:20">misc</name><operator pos:start="689:21" pos:end="689:22">-&gt;</operator><name pos:start="689:23" pos:end="689:33">tpm_version</name></name> <operator pos:start="689:35" pos:end="689:36">!=</operator> <name pos:start="689:38" pos:end="689:55">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="689:58" pos:end="719:13">{<block_content pos:start="691:17" pos:end="717:39">

                <expr_stmt pos:start="691:17" pos:end="691:44"><expr pos:start="691:17" pos:end="691:43"><name pos:start="691:17" pos:end="691:19">dev</name> <operator pos:start="691:21" pos:end="691:21">=</operator> <call pos:start="691:23" pos:end="691:43"><name pos:start="691:23" pos:end="691:32">aml_device</name><argument_list pos:start="691:33" pos:end="691:43">(<argument pos:start="691:34" pos:end="691:42"><expr pos:start="691:34" pos:end="691:42"><literal type="string" pos:start="691:34" pos:end="691:42">"ISA.TPM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:78"><expr pos:start="693:17" pos:end="693:77"><call pos:start="693:17" pos:end="693:77"><name pos:start="693:17" pos:end="693:26">aml_append</name><argument_list pos:start="693:27" pos:end="693:77">(<argument pos:start="693:28" pos:end="693:30"><expr pos:start="693:28" pos:end="693:30"><name pos:start="693:28" pos:end="693:30">dev</name></expr></argument>, <argument pos:start="693:33" pos:end="693:76"><expr pos:start="693:33" pos:end="693:76"><call pos:start="693:33" pos:end="693:76"><name pos:start="693:33" pos:end="693:45">aml_name_decl</name><argument_list pos:start="693:46" pos:end="693:76">(<argument pos:start="693:47" pos:end="693:52"><expr pos:start="693:47" pos:end="693:52"><literal type="string" pos:start="693:47" pos:end="693:52">"_HID"</literal></expr></argument>, <argument pos:start="693:55" pos:end="693:75"><expr pos:start="693:55" pos:end="693:75"><call pos:start="693:55" pos:end="693:75"><name pos:start="693:55" pos:end="693:64">aml_eisaid</name><argument_list pos:start="693:65" pos:end="693:75">(<argument pos:start="693:66" pos:end="693:74"><expr pos:start="693:66" pos:end="693:74"><literal type="string" pos:start="693:66" pos:end="693:74">"PNP0C31"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="695:17" pos:end="695:69"><expr pos:start="695:17" pos:end="695:68"><call pos:start="695:17" pos:end="695:68"><name pos:start="695:17" pos:end="695:26">aml_append</name><argument_list pos:start="695:27" pos:end="695:68">(<argument pos:start="695:28" pos:end="695:30"><expr pos:start="695:28" pos:end="695:30"><name pos:start="695:28" pos:end="695:30">dev</name></expr></argument>, <argument pos:start="695:33" pos:end="695:67"><expr pos:start="695:33" pos:end="695:67"><call pos:start="695:33" pos:end="695:67"><name pos:start="695:33" pos:end="695:45">aml_name_decl</name><argument_list pos:start="695:46" pos:end="695:67">(<argument pos:start="695:47" pos:end="695:52"><expr pos:start="695:47" pos:end="695:52"><literal type="string" pos:start="695:47" pos:end="695:52">"_STA"</literal></expr></argument>, <argument pos:start="695:55" pos:end="695:66"><expr pos:start="695:55" pos:end="695:66"><call pos:start="695:55" pos:end="695:66"><name pos:start="695:55" pos:end="695:61">aml_int</name><argument_list pos:start="695:62" pos:end="695:66">(<argument pos:start="695:63" pos:end="695:65"><expr pos:start="695:63" pos:end="695:65"><literal type="number" pos:start="695:63" pos:end="695:65">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="697:46"><expr pos:start="697:17" pos:end="697:45"><name pos:start="697:17" pos:end="697:19">crs</name> <operator pos:start="697:21" pos:end="697:21">=</operator> <call pos:start="697:23" pos:end="697:45"><name pos:start="697:23" pos:end="697:43">aml_resource_template</name><argument_list pos:start="697:44" pos:end="697:45">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="699:17" pos:end="701:63"><expr pos:start="699:17" pos:end="701:62"><call pos:start="699:17" pos:end="701:62"><name pos:start="699:17" pos:end="699:26">aml_append</name><argument_list pos:start="699:27" pos:end="701:62">(<argument pos:start="699:28" pos:end="699:30"><expr pos:start="699:28" pos:end="699:30"><name pos:start="699:28" pos:end="699:30">crs</name></expr></argument>, <argument pos:start="699:33" pos:end="701:61"><expr pos:start="699:33" pos:end="701:61"><call pos:start="699:33" pos:end="701:61"><name pos:start="699:33" pos:end="699:50">aml_memory32_fixed</name><argument_list pos:start="699:51" pos:end="701:61">(<argument pos:start="699:52" pos:end="699:68"><expr pos:start="699:52" pos:end="699:68"><name pos:start="699:52" pos:end="699:68">TPM_TIS_ADDR_BASE</name></expr></argument>,

                           <argument pos:start="701:28" pos:end="701:44"><expr pos:start="701:28" pos:end="701:44"><name pos:start="701:28" pos:end="701:44">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="701:47" pos:end="701:60"><expr pos:start="701:47" pos:end="701:60"><name pos:start="701:47" pos:end="701:60">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="703:17" pos:end="711:19">/*

                    FIXME: TPM_TIS_IRQ=5 conflicts with PNP0C0F irqs,

                    Rewrite to take IRQ from TPM device model and

                    fix default IRQ value there to use some unused IRQ

                 */</comment>

                <comment type="block" pos:start="713:17" pos:end="713:69">/* aml_append(crs, aml_irq_no_flags(TPM_TIS_IRQ)); */</comment>

                <expr_stmt pos:start="715:17" pos:end="715:60"><expr pos:start="715:17" pos:end="715:59"><call pos:start="715:17" pos:end="715:59"><name pos:start="715:17" pos:end="715:26">aml_append</name><argument_list pos:start="715:27" pos:end="715:59">(<argument pos:start="715:28" pos:end="715:30"><expr pos:start="715:28" pos:end="715:30"><name pos:start="715:28" pos:end="715:30">dev</name></expr></argument>, <argument pos:start="715:33" pos:end="715:58"><expr pos:start="715:33" pos:end="715:58"><call pos:start="715:33" pos:end="715:58"><name pos:start="715:33" pos:end="715:45">aml_name_decl</name><argument_list pos:start="715:46" pos:end="715:58">(<argument pos:start="715:47" pos:end="715:52"><expr pos:start="715:47" pos:end="715:52"><literal type="string" pos:start="715:47" pos:end="715:52">"_CRS"</literal></expr></argument>, <argument pos:start="715:55" pos:end="715:57"><expr pos:start="715:55" pos:end="715:57"><name pos:start="715:55" pos:end="715:57">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="717:17" pos:end="717:39"><expr pos:start="717:17" pos:end="717:38"><call pos:start="717:17" pos:end="717:38"><name pos:start="717:17" pos:end="717:26">aml_append</name><argument_list pos:start="717:27" pos:end="717:38">(<argument pos:start="717:28" pos:end="717:32"><expr pos:start="717:28" pos:end="717:32"><name pos:start="717:28" pos:end="717:32">scope</name></expr></argument>, <argument pos:start="717:35" pos:end="717:37"><expr pos:start="717:35" pos:end="717:37"><name pos:start="717:35" pos:end="717:37">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="723:13" pos:end="723:40"><expr pos:start="723:13" pos:end="723:39"><call pos:start="723:13" pos:end="723:39"><name pos:start="723:13" pos:end="723:22">aml_append</name><argument_list pos:start="723:23" pos:end="723:39">(<argument pos:start="723:24" pos:end="723:31"><expr pos:start="723:24" pos:end="723:31"><name pos:start="723:24" pos:end="723:31">sb_scope</name></expr></argument>, <argument pos:start="723:34" pos:end="723:38"><expr pos:start="723:34" pos:end="723:38"><name pos:start="723:34" pos:end="723:38">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="729:5" pos:end="729:31"><expr pos:start="729:5" pos:end="729:30"><call pos:start="729:5" pos:end="729:30"><name pos:start="729:5" pos:end="729:14">aml_append</name><argument_list pos:start="729:15" pos:end="729:30">(<argument pos:start="729:16" pos:end="729:19"><expr pos:start="729:16" pos:end="729:19"><name pos:start="729:16" pos:end="729:19">dsdt</name></expr></argument>, <argument pos:start="729:22" pos:end="729:29"><expr pos:start="729:22" pos:end="729:29"><name pos:start="729:22" pos:end="729:29">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="733:5" pos:end="733:69">/* copy AML table into ACPI tables blob and patch header there */</comment>

    <expr_stmt pos:start="735:5" pos:end="735:69"><expr pos:start="735:5" pos:end="735:68"><call pos:start="735:5" pos:end="735:68"><name pos:start="735:5" pos:end="735:23">g_array_append_vals</name><argument_list pos:start="735:24" pos:end="735:68">(<argument pos:start="735:25" pos:end="735:34"><expr pos:start="735:25" pos:end="735:34"><name pos:start="735:25" pos:end="735:34">table_data</name></expr></argument>, <argument pos:start="735:37" pos:end="735:51"><expr pos:start="735:37" pos:end="735:51"><name pos:start="735:37" pos:end="735:51"><name pos:start="735:37" pos:end="735:40">dsdt</name><operator pos:start="735:41" pos:end="735:42">-&gt;</operator><name pos:start="735:43" pos:end="735:45">buf</name><operator pos:start="735:46" pos:end="735:47">-&gt;</operator><name pos:start="735:48" pos:end="735:51">data</name></name></expr></argument>, <argument pos:start="735:54" pos:end="735:67"><expr pos:start="735:54" pos:end="735:67"><name pos:start="735:54" pos:end="735:67"><name pos:start="735:54" pos:end="735:57">dsdt</name><operator pos:start="735:58" pos:end="735:59">-&gt;</operator><name pos:start="735:60" pos:end="735:62">buf</name><operator pos:start="735:63" pos:end="735:64">-&gt;</operator><name pos:start="735:65" pos:end="735:67">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="737:5" pos:end="741:47"><expr pos:start="737:5" pos:end="741:46"><call pos:start="737:5" pos:end="741:46"><name pos:start="737:5" pos:end="737:16">build_header</name><argument_list pos:start="737:17" pos:end="741:46">(<argument pos:start="737:18" pos:end="737:23"><expr pos:start="737:18" pos:end="737:23"><name pos:start="737:18" pos:end="737:23">linker</name></expr></argument>, <argument pos:start="737:26" pos:end="737:35"><expr pos:start="737:26" pos:end="737:35"><name pos:start="737:26" pos:end="737:35">table_data</name></expr></argument>,

        <argument pos:start="739:9" pos:end="739:69"><expr pos:start="739:9" pos:end="739:69"><operator pos:start="739:9" pos:end="739:9">(</operator><name pos:start="739:10" pos:end="739:13">void</name> <operator pos:start="739:15" pos:end="739:15">*</operator><operator pos:start="739:16" pos:end="739:16">)</operator><operator pos:start="739:17" pos:end="739:17">(</operator><name pos:start="739:18" pos:end="739:33"><name pos:start="739:18" pos:end="739:27">table_data</name><operator pos:start="739:28" pos:end="739:29">-&gt;</operator><name pos:start="739:30" pos:end="739:33">data</name></name> <operator pos:start="739:35" pos:end="739:35">+</operator> <name pos:start="739:37" pos:end="739:51"><name pos:start="739:37" pos:end="739:46">table_data</name><operator pos:start="739:47" pos:end="739:48">-&gt;</operator><name pos:start="739:49" pos:end="739:51">len</name></name> <operator pos:start="739:53" pos:end="739:53">-</operator> <name pos:start="739:55" pos:end="739:68"><name pos:start="739:55" pos:end="739:58">dsdt</name><operator pos:start="739:59" pos:end="739:60">-&gt;</operator><name pos:start="739:61" pos:end="739:63">buf</name><operator pos:start="739:64" pos:end="739:65">-&gt;</operator><name pos:start="739:66" pos:end="739:68">len</name></name><operator pos:start="739:69" pos:end="739:69">)</operator></expr></argument>,

        <argument pos:start="741:9" pos:end="741:14"><expr pos:start="741:9" pos:end="741:14"><literal type="string" pos:start="741:9" pos:end="741:14">"DSDT"</literal></expr></argument>, <argument pos:start="741:17" pos:end="741:30"><expr pos:start="741:17" pos:end="741:30"><name pos:start="741:17" pos:end="741:30"><name pos:start="741:17" pos:end="741:20">dsdt</name><operator pos:start="741:21" pos:end="741:22">-&gt;</operator><name pos:start="741:23" pos:end="741:25">buf</name><operator pos:start="741:26" pos:end="741:27">-&gt;</operator><name pos:start="741:28" pos:end="741:30">len</name></name></expr></argument>, <argument pos:start="741:33" pos:end="741:33"><expr pos:start="741:33" pos:end="741:33"><literal type="number" pos:start="741:33" pos:end="741:33">1</literal></expr></argument>, <argument pos:start="741:36" pos:end="741:39"><expr pos:start="741:36" pos:end="741:39"><name pos:start="741:36" pos:end="741:39">NULL</name></expr></argument>, <argument pos:start="741:42" pos:end="741:45"><expr pos:start="741:42" pos:end="741:45"><name pos:start="741:42" pos:end="741:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="743:5" pos:end="743:25"><expr pos:start="743:5" pos:end="743:24"><call pos:start="743:5" pos:end="743:24"><name pos:start="743:5" pos:end="743:22">free_aml_allocator</name><argument_list pos:start="743:23" pos:end="743:24">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
