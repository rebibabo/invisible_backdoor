<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11461.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">xhci_kick_ep</name><parameter_list pos:start="1:25" pos:end="3:66">(<parameter pos:start="1:26" pos:end="1:40"><decl pos:start="1:26" pos:end="1:40"><type pos:start="1:26" pos:end="1:40"><name pos:start="1:26" pos:end="1:34">XHCIState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">xhci</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><name pos:start="1:43" pos:end="1:50">unsigned</name> <name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:61">slotid</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:42"><decl pos:start="3:26" pos:end="3:42"><type pos:start="3:26" pos:end="3:42"><name pos:start="3:26" pos:end="3:33">unsigned</name> <name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:42">epid</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:65"><decl pos:start="3:45" pos:end="3:65"><type pos:start="3:45" pos:end="3:65"><name pos:start="3:45" pos:end="3:52">unsigned</name> <name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:65">streamid</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="283:1">{<block_content pos:start="7:5" pos:end="281:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">XHCIStreamContext</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">stctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">XHCIEPContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">epctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">XHCIRing</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:18">ring</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">USBEndpoint</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">ep</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:20">mfindex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><call pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:26">trace_usb_xhci_ep_kick</name><argument_list pos:start="23:27" pos:end="23:50">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33">slotid</name></expr></argument>, <argument pos:start="23:36" pos:end="23:39"><expr pos:start="23:36" pos:end="23:39"><name pos:start="23:36" pos:end="23:39">epid</name></expr></argument>, <argument pos:start="23:42" pos:end="23:49"><expr pos:start="23:42" pos:end="23:49"><name pos:start="23:42" pos:end="23:49">streamid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:52"><expr pos:start="25:5" pos:end="25:51"><call pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:51">(<argument pos:start="25:12" pos:end="25:50"><expr pos:start="25:12" pos:end="25:50"><name pos:start="25:12" pos:end="25:17">slotid</name> <operator pos:start="25:19" pos:end="25:20">&gt;=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">1</literal> <operator pos:start="25:24" pos:end="25:25">&amp;&amp;</operator> <name pos:start="25:27" pos:end="25:32">slotid</name> <operator pos:start="25:34" pos:end="25:35">&lt;=</operator> <name pos:start="25:37" pos:end="25:50"><name pos:start="25:37" pos:end="25:40">xhci</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:50">numslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><call pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:35">(<argument pos:start="27:12" pos:end="27:34"><expr pos:start="27:12" pos:end="27:34"><name pos:start="27:12" pos:end="27:15">epid</name> <operator pos:start="27:17" pos:end="27:18">&gt;=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">1</literal> <operator pos:start="27:22" pos:end="27:23">&amp;&amp;</operator> <name pos:start="27:25" pos:end="27:28">epid</name> <operator pos:start="27:30" pos:end="27:31">&lt;=</operator> <literal type="number" pos:start="27:33" pos:end="27:34">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:39">(<expr pos:start="31:9" pos:end="31:38"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:30"><name pos:start="31:10" pos:end="31:13">xhci</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:20">slots</name><index pos:start="31:21" pos:end="31:30">[<expr pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:27">slotid</name><operator pos:start="31:28" pos:end="31:28">-</operator><literal type="number" pos:start="31:29" pos:end="31:29">1</literal></expr>]</index></name><operator pos:start="31:31" pos:end="31:31">.</operator><name pos:start="31:32" pos:end="31:38">enabled</name></expr>)</condition> <block pos:start="31:41" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:77"><expr pos:start="33:9" pos:end="33:76"><call pos:start="33:9" pos:end="33:76"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:76">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:67"><expr pos:start="33:25" pos:end="33:67"><literal type="string" pos:start="33:25" pos:end="33:67">"xhci: xhci_kick_ep for disabled slot %d\n"</literal></expr></argument>, <argument pos:start="33:70" pos:end="33:75"><expr pos:start="33:70" pos:end="33:75"><name pos:start="33:70" pos:end="33:75">slotid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:9">epctx</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <name pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:16">xhci</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:23">slots</name><index pos:start="39:24" pos:end="39:33">[<expr pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:30">slotid</name><operator pos:start="39:31" pos:end="39:31">-</operator><literal type="number" pos:start="39:32" pos:end="39:32">1</literal></expr>]</index></name><operator pos:start="39:34" pos:end="39:34">.</operator><name pos:start="39:35" pos:end="39:45"><name pos:start="39:35" pos:end="39:37">eps</name><index pos:start="39:38" pos:end="39:45">[<expr pos:start="39:39" pos:end="39:44"><name pos:start="39:39" pos:end="39:42">epid</name><operator pos:start="39:43" pos:end="39:43">-</operator><literal type="number" pos:start="39:44" pos:end="39:44">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:14">epctx</name></expr>)</condition> <block pos:start="41:17" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:15">

        <expr_stmt pos:start="43:9" pos:end="45:30"><expr pos:start="43:9" pos:end="45:29"><call pos:start="43:9" pos:end="45:29"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:29">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:74"><expr pos:start="43:25" pos:end="43:74"><literal type="string" pos:start="43:25" pos:end="43:74">"xhci: xhci_kick_ep for disabled endpoint %d,%d\n"</literal></expr></argument>,

                <argument pos:start="45:17" pos:end="45:20"><expr pos:start="45:17" pos:end="45:20"><name pos:start="45:17" pos:end="45:20">epid</name></expr></argument>, <argument pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:28">slotid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="115:5"><if pos:start="53:5" pos:end="115:5">if <condition pos:start="53:8" pos:end="53:21">(<expr pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:13">epctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">retry</name></name></expr>)</condition> <block pos:start="53:23" pos:end="115:5">{<block_content pos:start="55:9" pos:end="113:28">

        <decl_stmt pos:start="55:9" pos:end="55:42"><decl pos:start="55:9" pos:end="55:41"><type pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:20">XHCITransfer</name> <modifier pos:start="55:22" pos:end="55:22">*</modifier></type><name pos:start="55:23" pos:end="55:26">xfer</name> <init pos:start="55:28" pos:end="55:41">= <expr pos:start="55:30" pos:end="55:41"><name pos:start="55:30" pos:end="55:41"><name pos:start="55:30" pos:end="55:34">epctx</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:41">retry</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:40"><expr pos:start="59:9" pos:end="59:39"><call pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:33">trace_usb_xhci_xfer_retry</name><argument_list pos:start="59:34" pos:end="59:39">(<argument pos:start="59:35" pos:end="59:38"><expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">xfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><call pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:14">assert</name><argument_list pos:start="61:15" pos:end="61:35">(<argument pos:start="61:16" pos:end="61:34"><expr pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:19">xfer</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:34">running_retry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="109:9"><if pos:start="63:9" pos:end="89:9">if <condition pos:start="63:12" pos:end="63:27">(<expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:16">xfer</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:26">iso_xfer</name></name></expr>)</condition> <block pos:start="63:29" pos:end="89:9">{<block_content pos:start="67:13" pos:end="87:39">

            <comment type="block" pos:start="65:13" pos:end="65:44">/* retry delayed iso transfer */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:19">mfindex</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:44"><name pos:start="67:23" pos:end="67:38">xhci_mfindex_get</name><argument_list pos:start="67:39" pos:end="67:44">(<argument pos:start="67:40" pos:end="67:43"><expr pos:start="67:40" pos:end="67:43"><name pos:start="67:40" pos:end="67:43">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:60"><expr pos:start="69:13" pos:end="69:59"><call pos:start="69:13" pos:end="69:59"><name pos:start="69:13" pos:end="69:31">xhci_check_iso_kick</name><argument_list pos:start="69:32" pos:end="69:59">(<argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">xhci</name></expr></argument>, <argument pos:start="69:39" pos:end="69:42"><expr pos:start="69:39" pos:end="69:42"><name pos:start="69:39" pos:end="69:42">xfer</name></expr></argument>, <argument pos:start="69:45" pos:end="69:49"><expr pos:start="69:45" pos:end="69:49"><name pos:start="69:45" pos:end="69:49">epctx</name></expr></argument>, <argument pos:start="69:52" pos:end="69:58"><expr pos:start="69:52" pos:end="69:58"><name pos:start="69:52" pos:end="69:58">mfindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:36">(<expr pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:20">xfer</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:35">running_retry</name></name></expr>)</condition> <block pos:start="71:38" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:23">

                <return pos:start="73:17" pos:end="73:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="77:13" pos:end="81:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:44">(<expr pos:start="77:17" pos:end="77:43"><call pos:start="77:17" pos:end="77:39"><name pos:start="77:17" pos:end="77:33">xhci_setup_packet</name><argument_list pos:start="77:34" pos:end="77:39">(<argument pos:start="77:35" pos:end="77:38"><expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">xfer</name></expr></argument>)</argument_list></call> <operator pos:start="77:41" pos:end="77:41">&lt;</operator> <literal type="number" pos:start="77:43" pos:end="77:43">0</literal></expr>)</condition> <block pos:start="77:46" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:23">

                <return pos:start="79:17" pos:end="79:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:67"><expr pos:start="83:13" pos:end="83:66"><call pos:start="83:13" pos:end="83:66"><name pos:start="83:13" pos:end="83:29">usb_handle_packet</name><argument_list pos:start="83:30" pos:end="83:66">(<argument pos:start="83:31" pos:end="83:50"><expr pos:start="83:31" pos:end="83:50"><name pos:start="83:31" pos:end="83:50"><name pos:start="83:31" pos:end="83:34">xfer</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:42">packet</name><operator pos:start="83:43" pos:end="83:43">.</operator><name pos:start="83:44" pos:end="83:45">ep</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:50">dev</name></name></expr></argument>, <argument pos:start="83:53" pos:end="83:65"><expr pos:start="83:53" pos:end="83:65"><operator pos:start="83:53" pos:end="83:53">&amp;</operator><name pos:start="83:54" pos:end="83:65"><name pos:start="83:54" pos:end="83:57">xfer</name><operator pos:start="83:58" pos:end="83:59">-&gt;</operator><name pos:start="83:60" pos:end="83:65">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:55"><expr pos:start="85:13" pos:end="85:54"><call pos:start="85:13" pos:end="85:54"><name pos:start="85:13" pos:end="85:18">assert</name><argument_list pos:start="85:19" pos:end="85:54">(<argument pos:start="85:20" pos:end="85:53"><expr pos:start="85:20" pos:end="85:53"><name pos:start="85:20" pos:end="85:38"><name pos:start="85:20" pos:end="85:23">xfer</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:31">packet</name><operator pos:start="85:32" pos:end="85:32">.</operator><name pos:start="85:33" pos:end="85:38">status</name></name> <operator pos:start="85:40" pos:end="85:41">!=</operator> <name pos:start="85:43" pos:end="85:53">USB_RET_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:39"><expr pos:start="87:13" pos:end="87:38"><call pos:start="87:13" pos:end="87:38"><name pos:start="87:13" pos:end="87:32">xhci_complete_packet</name><argument_list pos:start="87:33" pos:end="87:38">(<argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">xfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="109:9">else <block pos:start="89:16" pos:end="109:9">{<block_content pos:start="93:13" pos:end="107:39">

            <comment type="block" pos:start="91:13" pos:end="91:39">/* retry nak'ed transfer */</comment>

            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:44">(<expr pos:start="93:17" pos:end="93:43"><call pos:start="93:17" pos:end="93:39"><name pos:start="93:17" pos:end="93:33">xhci_setup_packet</name><argument_list pos:start="93:34" pos:end="93:39">(<argument pos:start="93:35" pos:end="93:38"><expr pos:start="93:35" pos:end="93:38"><name pos:start="93:35" pos:end="93:38">xfer</name></expr></argument>)</argument_list></call> <operator pos:start="93:41" pos:end="93:41">&lt;</operator> <literal type="number" pos:start="93:43" pos:end="93:43">0</literal></expr>)</condition> <block pos:start="93:46" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:23">

                <return pos:start="95:17" pos:end="95:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:67"><expr pos:start="99:13" pos:end="99:66"><call pos:start="99:13" pos:end="99:66"><name pos:start="99:13" pos:end="99:29">usb_handle_packet</name><argument_list pos:start="99:30" pos:end="99:66">(<argument pos:start="99:31" pos:end="99:50"><expr pos:start="99:31" pos:end="99:50"><name pos:start="99:31" pos:end="99:50"><name pos:start="99:31" pos:end="99:34">xfer</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:42">packet</name><operator pos:start="99:43" pos:end="99:43">.</operator><name pos:start="99:44" pos:end="99:45">ep</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:50">dev</name></name></expr></argument>, <argument pos:start="99:53" pos:end="99:65"><expr pos:start="99:53" pos:end="99:65"><operator pos:start="99:53" pos:end="99:53">&amp;</operator><name pos:start="99:54" pos:end="99:65"><name pos:start="99:54" pos:end="99:57">xfer</name><operator pos:start="99:58" pos:end="99:59">-&gt;</operator><name pos:start="99:60" pos:end="99:65">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="105:13"><if pos:start="101:13" pos:end="105:13">if <condition pos:start="101:16" pos:end="101:51">(<expr pos:start="101:17" pos:end="101:50"><name pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:20">xfer</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:28">packet</name><operator pos:start="101:29" pos:end="101:29">.</operator><name pos:start="101:30" pos:end="101:35">status</name></name> <operator pos:start="101:37" pos:end="101:38">==</operator> <name pos:start="101:40" pos:end="101:50">USB_RET_NAK</name></expr>)</condition> <block pos:start="101:53" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:23">

                <return pos:start="103:17" pos:end="103:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:39"><expr pos:start="107:13" pos:end="107:38"><call pos:start="107:13" pos:end="107:38"><name pos:start="107:13" pos:end="107:32">xhci_complete_packet</name><argument_list pos:start="107:33" pos:end="107:38">(<argument pos:start="107:34" pos:end="107:37"><expr pos:start="107:34" pos:end="107:37"><name pos:start="107:34" pos:end="107:37">xfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:37"><expr pos:start="111:9" pos:end="111:36"><call pos:start="111:9" pos:end="111:36"><name pos:start="111:9" pos:end="111:14">assert</name><argument_list pos:start="111:15" pos:end="111:36">(<argument pos:start="111:16" pos:end="111:35"><expr pos:start="111:16" pos:end="111:35"><operator pos:start="111:16" pos:end="111:16">!</operator><name pos:start="111:17" pos:end="111:35"><name pos:start="111:17" pos:end="111:20">xfer</name><operator pos:start="111:21" pos:end="111:22">-&gt;</operator><name pos:start="111:23" pos:end="111:35">running_retry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:28"><expr pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:13">epctx</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:20">retry</name></name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:27">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:34">(<expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:13">epctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:20">state</name></name> <operator pos:start="119:22" pos:end="119:23">==</operator> <name pos:start="119:25" pos:end="119:33">EP_HALTED</name></expr>)</condition> <block pos:start="119:36" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:15">

        <expr_stmt pos:start="121:9" pos:end="121:59"><expr pos:start="121:9" pos:end="121:58"><call pos:start="121:9" pos:end="121:58"><name pos:start="121:9" pos:end="121:15">DPRINTF</name><argument_list pos:start="121:16" pos:end="121:58">(<argument pos:start="121:17" pos:end="121:57"><expr pos:start="121:17" pos:end="121:57"><literal type="string" pos:start="121:17" pos:end="121:57">"xhci: ep halted, not running schedule\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:15">return;</return>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="131:5" pos:end="155:5"><if pos:start="131:5" pos:end="147:5">if <condition pos:start="131:8" pos:end="131:27">(<expr pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:13">epctx</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:26">nr_pstreams</name></name></expr>)</condition> <block pos:start="131:29" pos:end="147:5">{<block_content pos:start="133:9" pos:end="145:58">

        <decl_stmt pos:start="133:9" pos:end="133:21"><decl pos:start="133:9" pos:end="133:20"><type pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:16">uint32_t</name></type> <name pos:start="133:18" pos:end="133:20">err</name></decl>;</decl_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:56"><expr pos:start="135:9" pos:end="135:55"><name pos:start="135:9" pos:end="135:13">stctx</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <call pos:start="135:17" pos:end="135:55"><name pos:start="135:17" pos:end="135:32">xhci_find_stream</name><argument_list pos:start="135:33" pos:end="135:55">(<argument pos:start="135:34" pos:end="135:38"><expr pos:start="135:34" pos:end="135:38"><name pos:start="135:34" pos:end="135:38">epctx</name></expr></argument>, <argument pos:start="135:41" pos:end="135:48"><expr pos:start="135:41" pos:end="135:48"><name pos:start="135:41" pos:end="135:48">streamid</name></expr></argument>, <argument pos:start="135:51" pos:end="135:54"><expr pos:start="135:51" pos:end="135:54"><operator pos:start="135:51" pos:end="135:51">&amp;</operator><name pos:start="135:52" pos:end="135:54">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:26">(<expr pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:17">stctx</name> <operator pos:start="137:19" pos:end="137:20">==</operator> <name pos:start="137:22" pos:end="137:25">NULL</name></expr>)</condition> <block pos:start="137:28" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:19">

            <return pos:start="139:13" pos:end="139:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:28"><expr pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:12">ring</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <operator pos:start="143:16" pos:end="143:16">&amp;</operator><name pos:start="143:17" pos:end="143:27"><name pos:start="143:17" pos:end="143:21">stctx</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:27">ring</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:58"><expr pos:start="145:9" pos:end="145:57"><call pos:start="145:9" pos:end="145:57"><name pos:start="145:9" pos:end="145:25">xhci_set_ep_state</name><argument_list pos:start="145:26" pos:end="145:57">(<argument pos:start="145:27" pos:end="145:30"><expr pos:start="145:27" pos:end="145:30"><name pos:start="145:27" pos:end="145:30">xhci</name></expr></argument>, <argument pos:start="145:33" pos:end="145:37"><expr pos:start="145:33" pos:end="145:37"><name pos:start="145:33" pos:end="145:37">epctx</name></expr></argument>, <argument pos:start="145:40" pos:end="145:44"><expr pos:start="145:40" pos:end="145:44"><name pos:start="145:40" pos:end="145:44">stctx</name></expr></argument>, <argument pos:start="145:47" pos:end="145:56"><expr pos:start="145:47" pos:end="145:56"><name pos:start="145:47" pos:end="145:56">EP_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="147:7" pos:end="155:5">else <block pos:start="147:12" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:57">

        <expr_stmt pos:start="149:9" pos:end="149:28"><expr pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:12">ring</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <operator pos:start="149:16" pos:end="149:16">&amp;</operator><name pos:start="149:17" pos:end="149:27"><name pos:start="149:17" pos:end="149:21">epctx</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:27">ring</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:21"><expr pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:16">streamid</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <literal type="number" pos:start="151:20" pos:end="151:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:57"><expr pos:start="153:9" pos:end="153:56"><call pos:start="153:9" pos:end="153:56"><name pos:start="153:9" pos:end="153:25">xhci_set_ep_state</name><argument_list pos:start="153:26" pos:end="153:56">(<argument pos:start="153:27" pos:end="153:30"><expr pos:start="153:27" pos:end="153:30"><name pos:start="153:27" pos:end="153:30">xhci</name></expr></argument>, <argument pos:start="153:33" pos:end="153:37"><expr pos:start="153:33" pos:end="153:37"><name pos:start="153:33" pos:end="153:37">epctx</name></expr></argument>, <argument pos:start="153:40" pos:end="153:43"><expr pos:start="153:40" pos:end="153:43"><name pos:start="153:40" pos:end="153:43">NULL</name></expr></argument>, <argument pos:start="153:46" pos:end="153:55"><expr pos:start="153:46" pos:end="153:55"><name pos:start="153:46" pos:end="153:55">EP_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:31"><expr pos:start="157:5" pos:end="157:30"><call pos:start="157:5" pos:end="157:30"><name pos:start="157:5" pos:end="157:10">assert</name><argument_list pos:start="157:11" pos:end="157:30">(<argument pos:start="157:12" pos:end="157:29"><expr pos:start="157:12" pos:end="157:29"><name pos:start="157:12" pos:end="157:24"><name pos:start="157:12" pos:end="157:15">ring</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:24">dequeue</name></name> <operator pos:start="157:26" pos:end="157:27">!=</operator> <literal type="number" pos:start="157:29" pos:end="157:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="161:5" pos:end="275:5">while <condition pos:start="161:11" pos:end="161:13">(<expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">1</literal></expr>)</condition> <block pos:start="161:15" pos:end="275:5">{<block_content pos:start="163:9" pos:end="273:9">

        <decl_stmt pos:start="163:9" pos:end="163:65"><decl pos:start="163:9" pos:end="163:64"><type pos:start="163:9" pos:end="163:22"><name pos:start="163:9" pos:end="163:20">XHCITransfer</name> <modifier pos:start="163:22" pos:end="163:22">*</modifier></type><name pos:start="163:23" pos:end="163:26">xfer</name> <init pos:start="163:28" pos:end="163:64">= <expr pos:start="163:30" pos:end="163:64"><operator pos:start="163:30" pos:end="163:30">&amp;</operator><name pos:start="163:31" pos:end="163:64"><name pos:start="163:31" pos:end="163:35">epctx</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:46">transfers</name><index pos:start="163:47" pos:end="163:64">[<expr pos:start="163:48" pos:end="163:63"><name pos:start="163:48" pos:end="163:63"><name pos:start="163:48" pos:end="163:52">epctx</name><operator pos:start="163:53" pos:end="163:54">-&gt;</operator><name pos:start="163:55" pos:end="163:63">next_xfer</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:55">(<expr pos:start="165:13" pos:end="165:54"><name pos:start="165:13" pos:end="165:31"><name pos:start="165:13" pos:end="165:16">xfer</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:31">running_async</name></name> <operator pos:start="165:33" pos:end="165:34">||</operator> <name pos:start="165:36" pos:end="165:54"><name pos:start="165:36" pos:end="165:39">xfer</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:54">running_retry</name></name></expr>)</condition> <block pos:start="165:57" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:18">

            <break pos:start="167:13" pos:end="167:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:52"><expr pos:start="171:9" pos:end="171:51"><name pos:start="171:9" pos:end="171:14">length</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="171:51"><name pos:start="171:18" pos:end="171:39">xhci_ring_chain_length</name><argument_list pos:start="171:40" pos:end="171:51">(<argument pos:start="171:41" pos:end="171:44"><expr pos:start="171:41" pos:end="171:44"><name pos:start="171:41" pos:end="171:44">xhci</name></expr></argument>, <argument pos:start="171:47" pos:end="171:50"><expr pos:start="171:47" pos:end="171:50"><name pos:start="171:47" pos:end="171:50">ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="181:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:23">(<expr pos:start="173:13" pos:end="173:22"><name pos:start="173:13" pos:end="173:18">length</name> <operator pos:start="173:20" pos:end="173:20">&lt;</operator> <literal type="number" pos:start="173:22" pos:end="173:22">0</literal></expr>)</condition> <block pos:start="173:25" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:18">

            <break pos:start="175:13" pos:end="175:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="177:11" pos:end="181:9">else if <condition pos:start="177:19" pos:end="177:31">(<expr pos:start="177:20" pos:end="177:30"><name pos:start="177:20" pos:end="177:25">length</name> <operator pos:start="177:27" pos:end="177:28">==</operator> <literal type="number" pos:start="177:30" pos:end="177:30">0</literal></expr>)</condition> <block pos:start="177:33" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:18">

            <break pos:start="179:13" pos:end="179:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="193:9"><if pos:start="183:9" pos:end="193:9">if <condition pos:start="183:12" pos:end="183:53">(<expr pos:start="183:13" pos:end="183:52"><name pos:start="183:13" pos:end="183:22"><name pos:start="183:13" pos:end="183:16">xfer</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:22">trbs</name></name> <operator pos:start="183:24" pos:end="183:25">&amp;&amp;</operator> <name pos:start="183:27" pos:end="183:43"><name pos:start="183:27" pos:end="183:30">xfer</name><operator pos:start="183:31" pos:end="183:32">-&gt;</operator><name pos:start="183:33" pos:end="183:43">trb_alloced</name></name> <operator pos:start="183:45" pos:end="183:45">&lt;</operator> <name pos:start="183:47" pos:end="183:52">length</name></expr>)</condition> <block pos:start="183:55" pos:end="193:9">{<block_content pos:start="185:13" pos:end="191:30">

            <expr_stmt pos:start="185:13" pos:end="185:32"><expr pos:start="185:13" pos:end="185:31"><name pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:16">xfer</name><operator pos:start="185:17" pos:end="185:18">-&gt;</operator><name pos:start="185:19" pos:end="185:27">trb_count</name></name> <operator pos:start="185:29" pos:end="185:29">=</operator> <literal type="number" pos:start="185:31" pos:end="185:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:34"><expr pos:start="187:13" pos:end="187:33"><name pos:start="187:13" pos:end="187:29"><name pos:start="187:13" pos:end="187:16">xfer</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:29">trb_alloced</name></name> <operator pos:start="187:31" pos:end="187:31">=</operator> <literal type="number" pos:start="187:33" pos:end="187:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:31"><expr pos:start="189:13" pos:end="189:30"><call pos:start="189:13" pos:end="189:30"><name pos:start="189:13" pos:end="189:18">g_free</name><argument_list pos:start="189:19" pos:end="189:30">(<argument pos:start="189:20" pos:end="189:29"><expr pos:start="189:20" pos:end="189:29"><name pos:start="189:20" pos:end="189:29"><name pos:start="189:20" pos:end="189:23">xfer</name><operator pos:start="189:24" pos:end="189:25">-&gt;</operator><name pos:start="189:26" pos:end="189:29">trbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:30"><expr pos:start="191:13" pos:end="191:29"><name pos:start="191:13" pos:end="191:22"><name pos:start="191:13" pos:end="191:16">xfer</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:22">trbs</name></name> <operator pos:start="191:24" pos:end="191:24">=</operator> <name pos:start="191:26" pos:end="191:29">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:24">(<expr pos:start="195:13" pos:end="195:23"><operator pos:start="195:13" pos:end="195:13">!</operator><name pos:start="195:14" pos:end="195:23"><name pos:start="195:14" pos:end="195:17">xfer</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:23">trbs</name></name></expr>)</condition> <block pos:start="195:26" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:39">

            <expr_stmt pos:start="197:13" pos:end="197:60"><expr pos:start="197:13" pos:end="197:59"><name pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:16">xfer</name><operator pos:start="197:17" pos:end="197:18">-&gt;</operator><name pos:start="197:19" pos:end="197:22">trbs</name></name> <operator pos:start="197:24" pos:end="197:24">=</operator> <call pos:start="197:26" pos:end="197:59"><name pos:start="197:26" pos:end="197:33">g_malloc</name><argument_list pos:start="197:34" pos:end="197:59">(<argument pos:start="197:35" pos:end="197:58"><expr pos:start="197:35" pos:end="197:58"><sizeof pos:start="197:35" pos:end="197:49">sizeof<argument_list pos:start="197:41" pos:end="197:49">(<argument pos:start="197:42" pos:end="197:48"><expr pos:start="197:42" pos:end="197:48"><name pos:start="197:42" pos:end="197:48">XHCITRB</name></expr></argument>)</argument_list></sizeof> <operator pos:start="197:51" pos:end="197:51">*</operator> <name pos:start="197:53" pos:end="197:58">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:39"><expr pos:start="199:13" pos:end="199:38"><name pos:start="199:13" pos:end="199:29"><name pos:start="199:13" pos:end="199:16">xfer</name><operator pos:start="199:17" pos:end="199:18">-&gt;</operator><name pos:start="199:19" pos:end="199:29">trb_alloced</name></name> <operator pos:start="199:31" pos:end="199:31">=</operator> <name pos:start="199:33" pos:end="199:38">length</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:33"><expr pos:start="203:9" pos:end="203:32"><name pos:start="203:9" pos:end="203:23"><name pos:start="203:9" pos:end="203:12">xfer</name><operator pos:start="203:13" pos:end="203:14">-&gt;</operator><name pos:start="203:15" pos:end="203:23">trb_count</name></name> <operator pos:start="203:25" pos:end="203:25">=</operator> <name pos:start="203:27" pos:end="203:32">length</name></expr>;</expr_stmt>



        <for pos:start="207:9" pos:end="211:9">for <control pos:start="207:13" pos:end="207:36">(<init pos:start="207:14" pos:end="207:19"><expr pos:start="207:14" pos:end="207:18"><name pos:start="207:14" pos:end="207:14">i</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <literal type="number" pos:start="207:18" pos:end="207:18">0</literal></expr>;</init> <condition pos:start="207:21" pos:end="207:31"><expr pos:start="207:21" pos:end="207:30"><name pos:start="207:21" pos:end="207:21">i</name> <operator pos:start="207:23" pos:end="207:23">&lt;</operator> <name pos:start="207:25" pos:end="207:30">length</name></expr>;</condition> <incr pos:start="207:33" pos:end="207:35"><expr pos:start="207:33" pos:end="207:35"><name pos:start="207:33" pos:end="207:33">i</name><operator pos:start="207:34" pos:end="207:35">++</operator></expr></incr>)</control> <block pos:start="207:38" pos:end="211:9">{<block_content pos:start="209:13" pos:end="209:70">

            <expr_stmt pos:start="209:13" pos:end="209:70"><expr pos:start="209:13" pos:end="209:69"><call pos:start="209:13" pos:end="209:69"><name pos:start="209:13" pos:end="209:18">assert</name><argument_list pos:start="209:19" pos:end="209:69">(<argument pos:start="209:20" pos:end="209:68"><expr pos:start="209:20" pos:end="209:68"><call pos:start="209:20" pos:end="209:68"><name pos:start="209:20" pos:end="209:34">xhci_ring_fetch</name><argument_list pos:start="209:35" pos:end="209:68">(<argument pos:start="209:36" pos:end="209:39"><expr pos:start="209:36" pos:end="209:39"><name pos:start="209:36" pos:end="209:39">xhci</name></expr></argument>, <argument pos:start="209:42" pos:end="209:45"><expr pos:start="209:42" pos:end="209:45"><name pos:start="209:42" pos:end="209:45">ring</name></expr></argument>, <argument pos:start="209:48" pos:end="209:61"><expr pos:start="209:48" pos:end="209:61"><operator pos:start="209:48" pos:end="209:48">&amp;</operator><name pos:start="209:49" pos:end="209:61"><name pos:start="209:49" pos:end="209:52">xfer</name><operator pos:start="209:53" pos:end="209:54">-&gt;</operator><name pos:start="209:55" pos:end="209:58">trbs</name><index pos:start="209:59" pos:end="209:61">[<expr pos:start="209:60" pos:end="209:60"><name pos:start="209:60" pos:end="209:60">i</name></expr>]</index></name></expr></argument>, <argument pos:start="209:64" pos:end="209:67"><expr pos:start="209:64" pos:end="209:67"><name pos:start="209:64" pos:end="209:67">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="213:9" pos:end="213:26"><expr pos:start="213:9" pos:end="213:25"><name pos:start="213:9" pos:end="213:18"><name pos:start="213:9" pos:end="213:12">xfer</name><operator pos:start="213:13" pos:end="213:14">-&gt;</operator><name pos:start="213:15" pos:end="213:18">xhci</name></name> <operator pos:start="213:20" pos:end="213:20">=</operator> <name pos:start="213:22" pos:end="213:25">xhci</name></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:26"><expr pos:start="215:9" pos:end="215:25"><name pos:start="215:9" pos:end="215:18"><name pos:start="215:9" pos:end="215:12">xfer</name><operator pos:start="215:13" pos:end="215:14">-&gt;</operator><name pos:start="215:15" pos:end="215:18">epid</name></name> <operator pos:start="215:20" pos:end="215:20">=</operator> <name pos:start="215:22" pos:end="215:25">epid</name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:30"><expr pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:20"><name pos:start="217:9" pos:end="217:12">xfer</name><operator pos:start="217:13" pos:end="217:14">-&gt;</operator><name pos:start="217:15" pos:end="217:20">slotid</name></name> <operator pos:start="217:22" pos:end="217:22">=</operator> <name pos:start="217:24" pos:end="217:29">slotid</name></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:34"><expr pos:start="219:9" pos:end="219:33"><name pos:start="219:9" pos:end="219:22"><name pos:start="219:9" pos:end="219:12">xfer</name><operator pos:start="219:13" pos:end="219:14">-&gt;</operator><name pos:start="219:15" pos:end="219:22">streamid</name></name> <operator pos:start="219:24" pos:end="219:24">=</operator> <name pos:start="219:26" pos:end="219:33">streamid</name></expr>;</expr_stmt>



        <if_stmt pos:start="223:9" pos:end="255:9"><if pos:start="223:9" pos:end="237:9">if <condition pos:start="223:12" pos:end="223:22">(<expr pos:start="223:13" pos:end="223:21"><name pos:start="223:13" pos:end="223:16">epid</name> <operator pos:start="223:18" pos:end="223:19">==</operator> <literal type="number" pos:start="223:21" pos:end="223:21">1</literal></expr>)</condition> <block pos:start="223:24" pos:end="237:9">{<block_content pos:start="225:13" pos:end="235:13">

            <if_stmt pos:start="225:13" pos:end="235:13"><if pos:start="225:13" pos:end="231:13">if <condition pos:start="225:16" pos:end="225:56">(<expr pos:start="225:17" pos:end="225:55"><call pos:start="225:17" pos:end="225:50"><name pos:start="225:17" pos:end="225:38">xhci_fire_ctl_transfer</name><argument_list pos:start="225:39" pos:end="225:50">(<argument pos:start="225:40" pos:end="225:43"><expr pos:start="225:40" pos:end="225:43"><name pos:start="225:40" pos:end="225:43">xhci</name></expr></argument>, <argument pos:start="225:46" pos:end="225:49"><expr pos:start="225:46" pos:end="225:49"><name pos:start="225:46" pos:end="225:49">xfer</name></expr></argument>)</argument_list></call> <operator pos:start="225:52" pos:end="225:53">&gt;=</operator> <literal type="number" pos:start="225:55" pos:end="225:55">0</literal></expr>)</condition> <block pos:start="225:58" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:37">

                <expr_stmt pos:start="227:17" pos:end="227:69"><expr pos:start="227:17" pos:end="227:68"><name pos:start="227:17" pos:end="227:32"><name pos:start="227:17" pos:end="227:21">epctx</name><operator pos:start="227:22" pos:end="227:23">-&gt;</operator><name pos:start="227:24" pos:end="227:32">next_xfer</name></name> <operator pos:start="227:34" pos:end="227:34">=</operator> <operator pos:start="227:36" pos:end="227:36">(</operator><name pos:start="227:37" pos:end="227:52"><name pos:start="227:37" pos:end="227:41">epctx</name><operator pos:start="227:42" pos:end="227:43">-&gt;</operator><name pos:start="227:44" pos:end="227:52">next_xfer</name></name> <operator pos:start="227:54" pos:end="227:54">+</operator> <literal type="number" pos:start="227:56" pos:end="227:56">1</literal><operator pos:start="227:57" pos:end="227:57">)</operator> <operator pos:start="227:59" pos:end="227:59">%</operator> <name pos:start="227:61" pos:end="227:68">TD_QUEUE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:37"><expr pos:start="229:17" pos:end="229:36"><name pos:start="229:17" pos:end="229:18">ep</name> <operator pos:start="229:20" pos:end="229:20">=</operator> <name pos:start="229:22" pos:end="229:36"><name pos:start="229:22" pos:end="229:25">xfer</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:33">packet</name><operator pos:start="229:34" pos:end="229:34">.</operator><name pos:start="229:35" pos:end="229:36">ep</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="231:15" pos:end="235:13">else <block pos:start="231:20" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:69">

                <expr_stmt pos:start="233:17" pos:end="233:69"><expr pos:start="233:17" pos:end="233:68"><call pos:start="233:17" pos:end="233:68"><name pos:start="233:17" pos:end="233:23">fprintf</name><argument_list pos:start="233:24" pos:end="233:68">(<argument pos:start="233:25" pos:end="233:30"><expr pos:start="233:25" pos:end="233:30"><name pos:start="233:25" pos:end="233:30">stderr</name></expr></argument>, <argument pos:start="233:33" pos:end="233:67"><expr pos:start="233:33" pos:end="233:67"><literal type="string" pos:start="233:33" pos:end="233:67">"xhci: error firing CTL transfer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="237:11" pos:end="255:9">else <block pos:start="237:16" pos:end="255:9">{<block_content pos:start="239:13" pos:end="253:13">

            <if_stmt pos:start="239:13" pos:end="253:13"><if pos:start="239:13" pos:end="245:13">if <condition pos:start="239:16" pos:end="239:59">(<expr pos:start="239:17" pos:end="239:58"><call pos:start="239:17" pos:end="239:53"><name pos:start="239:17" pos:end="239:34">xhci_fire_transfer</name><argument_list pos:start="239:35" pos:end="239:53">(<argument pos:start="239:36" pos:end="239:39"><expr pos:start="239:36" pos:end="239:39"><name pos:start="239:36" pos:end="239:39">xhci</name></expr></argument>, <argument pos:start="239:42" pos:end="239:45"><expr pos:start="239:42" pos:end="239:45"><name pos:start="239:42" pos:end="239:45">xfer</name></expr></argument>, <argument pos:start="239:48" pos:end="239:52"><expr pos:start="239:48" pos:end="239:52"><name pos:start="239:48" pos:end="239:52">epctx</name></expr></argument>)</argument_list></call> <operator pos:start="239:55" pos:end="239:56">&gt;=</operator> <literal type="number" pos:start="239:58" pos:end="239:58">0</literal></expr>)</condition> <block pos:start="239:61" pos:end="245:13">{<block_content pos:start="241:17" pos:end="243:37">

                <expr_stmt pos:start="241:17" pos:end="241:69"><expr pos:start="241:17" pos:end="241:68"><name pos:start="241:17" pos:end="241:32"><name pos:start="241:17" pos:end="241:21">epctx</name><operator pos:start="241:22" pos:end="241:23">-&gt;</operator><name pos:start="241:24" pos:end="241:32">next_xfer</name></name> <operator pos:start="241:34" pos:end="241:34">=</operator> <operator pos:start="241:36" pos:end="241:36">(</operator><name pos:start="241:37" pos:end="241:52"><name pos:start="241:37" pos:end="241:41">epctx</name><operator pos:start="241:42" pos:end="241:43">-&gt;</operator><name pos:start="241:44" pos:end="241:52">next_xfer</name></name> <operator pos:start="241:54" pos:end="241:54">+</operator> <literal type="number" pos:start="241:56" pos:end="241:56">1</literal><operator pos:start="241:57" pos:end="241:57">)</operator> <operator pos:start="241:59" pos:end="241:59">%</operator> <name pos:start="241:61" pos:end="241:68">TD_QUEUE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:37"><expr pos:start="243:17" pos:end="243:36"><name pos:start="243:17" pos:end="243:18">ep</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <name pos:start="243:22" pos:end="243:36"><name pos:start="243:22" pos:end="243:25">xfer</name><operator pos:start="243:26" pos:end="243:27">-&gt;</operator><name pos:start="243:28" pos:end="243:33">packet</name><operator pos:start="243:34" pos:end="243:34">.</operator><name pos:start="243:35" pos:end="243:36">ep</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="245:15" pos:end="253:13">else <block pos:start="245:20" pos:end="253:13">{<block_content pos:start="247:17" pos:end="251:17">

                <if_stmt pos:start="247:17" pos:end="251:17"><if pos:start="247:17" pos:end="251:17">if <condition pos:start="247:20" pos:end="247:36">(<expr pos:start="247:21" pos:end="247:35"><operator pos:start="247:21" pos:end="247:21">!</operator><name pos:start="247:22" pos:end="247:35"><name pos:start="247:22" pos:end="247:25">xfer</name><operator pos:start="247:26" pos:end="247:27">-&gt;</operator><name pos:start="247:28" pos:end="247:35">iso_xfer</name></name></expr>)</condition> <block pos:start="247:38" pos:end="251:17">{<block_content pos:start="249:21" pos:end="249:74">

                    <expr_stmt pos:start="249:21" pos:end="249:74"><expr pos:start="249:21" pos:end="249:73"><call pos:start="249:21" pos:end="249:73"><name pos:start="249:21" pos:end="249:27">fprintf</name><argument_list pos:start="249:28" pos:end="249:73">(<argument pos:start="249:29" pos:end="249:34"><expr pos:start="249:29" pos:end="249:34"><name pos:start="249:29" pos:end="249:34">stderr</name></expr></argument>, <argument pos:start="249:37" pos:end="249:72"><expr pos:start="249:37" pos:end="249:72"><literal type="string" pos:start="249:37" pos:end="249:72">"xhci: error firing data transfer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="259:9" pos:end="263:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:38">(<expr pos:start="259:13" pos:end="259:37"><name pos:start="259:13" pos:end="259:24"><name pos:start="259:13" pos:end="259:17">epctx</name><operator pos:start="259:18" pos:end="259:19">-&gt;</operator><name pos:start="259:20" pos:end="259:24">state</name></name> <operator pos:start="259:26" pos:end="259:27">==</operator> <name pos:start="259:29" pos:end="259:37">EP_HALTED</name></expr>)</condition> <block pos:start="259:40" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:18">

            <break pos:start="261:13" pos:end="261:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="265:9" pos:end="273:9"><if pos:start="265:9" pos:end="273:9">if <condition pos:start="265:12" pos:end="265:32">(<expr pos:start="265:13" pos:end="265:31"><name pos:start="265:13" pos:end="265:31"><name pos:start="265:13" pos:end="265:16">xfer</name><operator pos:start="265:17" pos:end="265:18">-&gt;</operator><name pos:start="265:19" pos:end="265:31">running_retry</name></name></expr>)</condition> <block pos:start="265:34" pos:end="273:9">{<block_content pos:start="267:13" pos:end="271:18">

            <expr_stmt pos:start="267:13" pos:end="267:62"><expr pos:start="267:13" pos:end="267:61"><call pos:start="267:13" pos:end="267:61"><name pos:start="267:13" pos:end="267:19">DPRINTF</name><argument_list pos:start="267:20" pos:end="267:61">(<argument pos:start="267:21" pos:end="267:60"><expr pos:start="267:21" pos:end="267:60"><literal type="string" pos:start="267:21" pos:end="267:60">"xhci: xfer nacked, stopping schedule\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:32"><expr pos:start="269:13" pos:end="269:31"><name pos:start="269:13" pos:end="269:24"><name pos:start="269:13" pos:end="269:17">epctx</name><operator pos:start="269:18" pos:end="269:19">-&gt;</operator><name pos:start="269:20" pos:end="269:24">retry</name></name> <operator pos:start="269:26" pos:end="269:26">=</operator> <name pos:start="269:28" pos:end="269:31">xfer</name></expr>;</expr_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="277:5" pos:end="281:5"><if pos:start="277:5" pos:end="281:5">if <condition pos:start="277:8" pos:end="277:11">(<expr pos:start="277:9" pos:end="277:10"><name pos:start="277:9" pos:end="277:10">ep</name></expr>)</condition> <block pos:start="277:13" pos:end="281:5">{<block_content pos:start="279:9" pos:end="279:47">

        <expr_stmt pos:start="279:9" pos:end="279:47"><expr pos:start="279:9" pos:end="279:46"><call pos:start="279:9" pos:end="279:46"><name pos:start="279:9" pos:end="279:33">usb_device_flush_ep_queue</name><argument_list pos:start="279:34" pos:end="279:46">(<argument pos:start="279:35" pos:end="279:41"><expr pos:start="279:35" pos:end="279:41"><name pos:start="279:35" pos:end="279:41"><name pos:start="279:35" pos:end="279:36">ep</name><operator pos:start="279:37" pos:end="279:38">-&gt;</operator><name pos:start="279:39" pos:end="279:41">dev</name></name></expr></argument>, <argument pos:start="279:44" pos:end="279:45"><expr pos:start="279:44" pos:end="279:45"><name pos:start="279:44" pos:end="279:45">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
