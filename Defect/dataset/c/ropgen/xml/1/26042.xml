<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26042.c" pos:tabs="8"><function pos:start="1:1" pos:end="469:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:35">alloc_refcount_block</name><parameter_list pos:start="1:36" pos:end="1:80">(<parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><name pos:start="1:37" pos:end="1:52">BlockDriverState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">bs</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:79"><decl pos:start="1:59" pos:end="1:79"><type pos:start="1:59" pos:end="1:79"><name pos:start="1:59" pos:end="1:65">int64_t</name></type> <name pos:start="1:67" pos:end="1:79">cluster_index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="469:1">{<block_content pos:start="5:5" pos:end="467:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:37">refcount_table_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><call pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:16">BLKDBG_EVENT</name><argument_list pos:start="13:17" pos:end="13:49">(<argument pos:start="13:18" pos:end="13:25"><expr pos:start="13:18" pos:end="13:25"><name pos:start="13:18" pos:end="13:25"><name pos:start="13:18" pos:end="13:19">bs</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:25">file</name></name></expr></argument>, <argument pos:start="13:28" pos:end="13:48"><expr pos:start="13:28" pos:end="13:48"><name pos:start="13:28" pos:end="13:48">BLKDBG_REFBLOCK_ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:55">/* Find the refcount block for the given cluster */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:79"><expr pos:start="19:5" pos:end="19:78"><name pos:start="19:5" pos:end="19:24">refcount_table_index</name> <operator pos:start="19:26" pos:end="19:26">=</operator> <name pos:start="19:28" pos:end="19:40">cluster_index</name> <operator pos:start="19:42" pos:end="19:43">&gt;&gt;</operator> <operator pos:start="19:45" pos:end="19:45">(</operator><name pos:start="19:46" pos:end="19:60"><name pos:start="19:46" pos:end="19:46">s</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:60">cluster_bits</name></name> <operator pos:start="19:62" pos:end="19:62">-</operator> <name pos:start="19:64" pos:end="19:77">REFCOUNT_SHIFT</name><operator pos:start="19:78" pos:end="19:78">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="53:5"><if pos:start="23:5" pos:end="53:5">if <condition pos:start="23:8" pos:end="23:54">(<expr pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:28">refcount_table_index</name> <operator pos:start="23:30" pos:end="23:30">&lt;</operator> <name pos:start="23:32" pos:end="23:53"><name pos:start="23:32" pos:end="23:32">s</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="23:56" pos:end="53:5">{<block_content pos:start="27:9" pos:end="51:9">



        <decl_stmt pos:start="27:9" pos:end="29:52"><decl pos:start="27:9" pos:end="29:51"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">uint64_t</name></type> <name pos:start="27:18" pos:end="27:38">refcount_block_offset</name> <init pos:start="27:40" pos:end="29:51">=

            <expr pos:start="29:13" pos:end="29:51"><name pos:start="29:13" pos:end="29:51"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:29">refcount_table</name><index pos:start="29:30" pos:end="29:51">[<expr pos:start="29:31" pos:end="29:50"><name pos:start="29:31" pos:end="29:50">refcount_table_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:47">/* If it's already there, we're done */</comment>

        <if_stmt pos:start="35:9" pos:end="51:9"><if pos:start="35:9" pos:end="51:9">if <condition pos:start="35:12" pos:end="35:34">(<expr pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:33">refcount_block_offset</name></expr>)</condition> <block pos:start="35:36" pos:end="51:9">{<block_content pos:start="37:13" pos:end="49:41">

            <if_stmt pos:start="37:13" pos:end="47:13"><if pos:start="37:13" pos:end="47:13">if <condition pos:start="37:16" pos:end="37:72">(<expr pos:start="37:17" pos:end="37:71"><name pos:start="37:17" pos:end="37:37">refcount_block_offset</name> <operator pos:start="37:39" pos:end="37:40">!=</operator> <name pos:start="37:42" pos:end="37:71"><name pos:start="37:42" pos:end="37:42">s</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:71">refcount_block_cache_offset</name></name></expr>)</condition> <block pos:start="37:74" pos:end="47:13">{<block_content pos:start="39:17" pos:end="45:17">

                <expr_stmt pos:start="39:17" pos:end="39:69"><expr pos:start="39:17" pos:end="39:68"><name pos:start="39:17" pos:end="39:19">ret</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:68"><name pos:start="39:23" pos:end="39:41">load_refcount_block</name><argument_list pos:start="39:42" pos:end="39:68">(<argument pos:start="39:43" pos:end="39:44"><expr pos:start="39:43" pos:end="39:44"><name pos:start="39:43" pos:end="39:44">bs</name></expr></argument>, <argument pos:start="39:47" pos:end="39:67"><expr pos:start="39:47" pos:end="39:67"><name pos:start="39:47" pos:end="39:67">refcount_block_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="41:17" pos:end="45:17"><if pos:start="41:17" pos:end="45:17">if <condition pos:start="41:20" pos:end="41:28">(<expr pos:start="41:21" pos:end="41:27"><name pos:start="41:21" pos:end="41:23">ret</name> <operator pos:start="41:25" pos:end="41:25">&lt;</operator> <literal type="number" pos:start="41:27" pos:end="41:27">0</literal></expr>)</condition> <block pos:start="41:30" pos:end="45:17">{<block_content pos:start="43:21" pos:end="43:31">

                    <return pos:start="43:21" pos:end="43:31">return <expr pos:start="43:28" pos:end="43:30"><name pos:start="43:28" pos:end="43:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="49:13" pos:end="49:41">return <expr pos:start="49:20" pos:end="49:40"><name pos:start="49:20" pos:end="49:40">refcount_block_offset</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="97:7">/*

     * If we came here, we need to allocate something. Something is at least

     * a cluster for the new refcount block. It may also include a new refcount

     * table if the old refcount table is too small.

     *

     * Note that allocating clusters here needs some special care:

     *

     * - We can't use the normal qcow2_alloc_clusters(), it would try to

     *   increase the refcount and very likely we would end up with an endless

     *   recursion. Instead we must place the refcount blocks in a way that

     *   they can describe them themselves.

     *

     * - We need to consider that at this point we are inside update_refcounts

     *   and doing the initial refcount increase. This means that some clusters

     *   have already been allocated by the caller, but their refcount isn't

     *   accurate yet. free_cluster_index tells us where this allocation ends

     *   as long as we don't overwrite it by freeing clusters.

     *

     * - alloc_clusters_noref and qcow2_free_clusters may load a different

     *   refcount block into the cache

     */</comment>



    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="111:5">if <condition pos:start="101:8" pos:end="101:31">(<expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:30">cache_refcount_updates</name></expr>)</condition> <block pos:start="101:33" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:9">

        <expr_stmt pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:38"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:38"><name pos:start="103:15" pos:end="103:34">write_refcount_block</name><argument_list pos:start="103:35" pos:end="103:38">(<argument pos:start="103:36" pos:end="103:37"><expr pos:start="103:36" pos:end="103:37"><name pos:start="103:36" pos:end="103:37">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:20">(<expr pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:17">&lt;</operator> <literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr>)</condition> <block pos:start="105:22" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:23">

            <return pos:start="107:13" pos:end="107:23">return <expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:64">/* Allocate the refcount block itself and mark it as used */</comment>

    <decl_stmt pos:start="117:5" pos:end="117:67"><decl pos:start="117:5" pos:end="117:66"><type pos:start="117:5" pos:end="117:12"><name pos:start="117:5" pos:end="117:12">uint64_t</name></type> <name pos:start="117:14" pos:end="117:22">new_block</name> <init pos:start="117:24" pos:end="117:66">= <expr pos:start="117:26" pos:end="117:66"><call pos:start="117:26" pos:end="117:66"><name pos:start="117:26" pos:end="117:45">alloc_clusters_noref</name><argument_list pos:start="117:46" pos:end="117:66">(<argument pos:start="117:47" pos:end="117:48"><expr pos:start="117:47" pos:end="117:48"><name pos:start="117:47" pos:end="117:48">bs</name></expr></argument>, <argument pos:start="117:51" pos:end="117:65"><expr pos:start="117:51" pos:end="117:65"><name pos:start="117:51" pos:end="117:65"><name pos:start="117:51" pos:end="117:51">s</name><operator pos:start="117:52" pos:end="117:53">-&gt;</operator><name pos:start="117:54" pos:end="117:65">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:56"><expr pos:start="119:5" pos:end="119:55"><call pos:start="119:5" pos:end="119:55"><name pos:start="119:5" pos:end="119:10">memset</name><argument_list pos:start="119:11" pos:end="119:55">(<argument pos:start="119:12" pos:end="119:34"><expr pos:start="119:12" pos:end="119:34"><name pos:start="119:12" pos:end="119:34"><name pos:start="119:12" pos:end="119:12">s</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:34">refcount_block_cache</name></name></expr></argument>, <argument pos:start="119:37" pos:end="119:37"><expr pos:start="119:37" pos:end="119:37"><literal type="number" pos:start="119:37" pos:end="119:37">0</literal></expr></argument>, <argument pos:start="119:40" pos:end="119:54"><expr pos:start="119:40" pos:end="119:54"><name pos:start="119:40" pos:end="119:54"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:54">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="126:0"><expr pos:start="121:5" pos:end="121:46"><name pos:start="121:5" pos:end="121:34"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:34">refcount_block_cache_offset</name></name> <operator pos:start="121:36" pos:end="121:36">=</operator> <name pos:start="121:38" pos:end="121:46">new_block</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="125:1" pos:end="125:19">#<cpp:directive pos:start="125:2" pos:end="125:6">ifdef</cpp:directive> <name pos:start="125:8" pos:end="125:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="127:5" pos:end="134:0"><expr pos:start="127:5" pos:end="131:74"><call pos:start="127:5" pos:end="131:74"><name pos:start="127:5" pos:end="127:11">fprintf</name><argument_list pos:start="127:12" pos:end="131:74">(<argument pos:start="127:13" pos:end="127:18"><expr pos:start="127:13" pos:end="127:18"><name pos:start="127:13" pos:end="127:18">stderr</name></expr></argument>, <argument pos:start="127:21" pos:end="129:27"><expr pos:start="127:21" pos:end="129:27"><literal type="string" pos:start="127:21" pos:end="127:61">"qcow2: Allocate refcount block %d for %"</literal> <name pos:start="127:63" pos:end="127:68">PRIx64</name>

        <literal type="string" pos:start="129:9" pos:end="129:15">" at %"</literal> <name pos:start="129:17" pos:end="129:22">PRIx64</name> <literal type="string" pos:start="129:24" pos:end="129:27">"\n"</literal></expr></argument>,

        <argument pos:start="131:9" pos:end="131:28"><expr pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:28">refcount_table_index</name></expr></argument>, <argument pos:start="131:31" pos:end="131:62"><expr pos:start="131:31" pos:end="131:62"><name pos:start="131:31" pos:end="131:43">cluster_index</name> <operator pos:start="131:45" pos:end="131:46">&lt;&lt;</operator> <name pos:start="131:48" pos:end="131:62"><name pos:start="131:48" pos:end="131:48">s</name><operator pos:start="131:49" pos:end="131:50">-&gt;</operator><name pos:start="131:51" pos:end="131:62">cluster_bits</name></name></expr></argument>, <argument pos:start="131:65" pos:end="131:73"><expr pos:start="131:65" pos:end="131:73"><name pos:start="131:65" pos:end="131:73">new_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="137:5" pos:end="161:5"><if pos:start="137:5" pos:end="147:5">if <condition pos:start="137:8" pos:end="137:79">(<expr pos:start="137:9" pos:end="137:78"><call pos:start="137:9" pos:end="137:78"><name pos:start="137:9" pos:end="137:30">in_same_refcount_block</name><argument_list pos:start="137:31" pos:end="137:78">(<argument pos:start="137:32" pos:end="137:32"><expr pos:start="137:32" pos:end="137:32"><name pos:start="137:32" pos:end="137:32">s</name></expr></argument>, <argument pos:start="137:35" pos:end="137:43"><expr pos:start="137:35" pos:end="137:43"><name pos:start="137:35" pos:end="137:43">new_block</name></expr></argument>, <argument pos:start="137:46" pos:end="137:77"><expr pos:start="137:46" pos:end="137:77"><name pos:start="137:46" pos:end="137:58">cluster_index</name> <operator pos:start="137:60" pos:end="137:61">&lt;&lt;</operator> <name pos:start="137:63" pos:end="137:77"><name pos:start="137:63" pos:end="137:63">s</name><operator pos:start="137:64" pos:end="137:65">-&gt;</operator><name pos:start="137:66" pos:end="137:77">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:81" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:62">

        <comment type="block" pos:start="139:9" pos:end="139:66">/* The block describes itself, need to update the cache */</comment>

        <decl_stmt pos:start="141:9" pos:end="143:60"><decl pos:start="141:9" pos:end="143:59"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:23">block_index</name> <init pos:start="141:25" pos:end="143:59">= <expr pos:start="141:27" pos:end="143:59"><operator pos:start="141:27" pos:end="141:27">(</operator><name pos:start="141:28" pos:end="141:36">new_block</name> <operator pos:start="141:38" pos:end="141:39">&gt;&gt;</operator> <name pos:start="141:41" pos:end="141:55"><name pos:start="141:41" pos:end="141:41">s</name><operator pos:start="141:42" pos:end="141:43">-&gt;</operator><name pos:start="141:44" pos:end="141:55">cluster_bits</name></name><operator pos:start="141:56" pos:end="141:56">)</operator> <operator pos:start="141:58" pos:end="141:58">&amp;</operator>

            <operator pos:start="143:13" pos:end="143:13">(</operator><operator pos:start="143:14" pos:end="143:14">(</operator><literal type="number" pos:start="143:15" pos:end="143:15">1</literal> <operator pos:start="143:17" pos:end="143:18">&lt;&lt;</operator> <operator pos:start="143:20" pos:end="143:20">(</operator><name pos:start="143:21" pos:end="143:35"><name pos:start="143:21" pos:end="143:21">s</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:35">cluster_bits</name></name> <operator pos:start="143:37" pos:end="143:37">-</operator> <name pos:start="143:39" pos:end="143:52">REFCOUNT_SHIFT</name><operator pos:start="143:53" pos:end="143:53">)</operator><operator pos:start="143:54" pos:end="143:54">)</operator> <operator pos:start="143:56" pos:end="143:56">-</operator> <literal type="number" pos:start="143:58" pos:end="143:58">1</literal><operator pos:start="143:59" pos:end="143:59">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:62"><expr pos:start="145:9" pos:end="145:61"><name pos:start="145:9" pos:end="145:44"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:31">refcount_block_cache</name><index pos:start="145:32" pos:end="145:44">[<expr pos:start="145:33" pos:end="145:43"><name pos:start="145:33" pos:end="145:43">block_index</name></expr>]</index></name> <operator pos:start="145:46" pos:end="145:46">=</operator> <call pos:start="145:48" pos:end="145:61"><name pos:start="145:48" pos:end="145:58">cpu_to_be16</name><argument_list pos:start="145:59" pos:end="145:61">(<argument pos:start="145:60" pos:end="145:60"><expr pos:start="145:60" pos:end="145:60"><literal type="number" pos:start="145:60" pos:end="145:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="147:7" pos:end="161:5">else <block pos:start="147:12" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:9">

        <comment type="block" pos:start="149:9" pos:end="151:54">/* Described somewhere else. This can recurse at most twice before we

         * arrive at a block that describes itself. */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:65"><expr pos:start="153:9" pos:end="153:64"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:64"><name pos:start="153:15" pos:end="153:29">update_refcount</name><argument_list pos:start="153:30" pos:end="153:64">(<argument pos:start="153:31" pos:end="153:32"><expr pos:start="153:31" pos:end="153:32"><name pos:start="153:31" pos:end="153:32">bs</name></expr></argument>, <argument pos:start="153:35" pos:end="153:43"><expr pos:start="153:35" pos:end="153:43"><name pos:start="153:35" pos:end="153:43">new_block</name></expr></argument>, <argument pos:start="153:46" pos:end="153:60"><expr pos:start="153:46" pos:end="153:60"><name pos:start="153:46" pos:end="153:60"><name pos:start="153:46" pos:end="153:46">s</name><operator pos:start="153:47" pos:end="153:48">-&gt;</operator><name pos:start="153:49" pos:end="153:60">cluster_size</name></name></expr></argument>, <argument pos:start="153:63" pos:end="153:63"><expr pos:start="153:63" pos:end="153:63"><literal type="number" pos:start="153:63" pos:end="153:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="159:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:20">(<expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">&lt;</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>)</condition> <block pos:start="155:22" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:28">

            <goto pos:start="157:13" pos:end="157:28">goto <name pos:start="157:18" pos:end="157:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:64">/* Now the new refcount block needs to be written to disk */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:56"><expr pos:start="167:5" pos:end="167:55"><call pos:start="167:5" pos:end="167:55"><name pos:start="167:5" pos:end="167:16">BLKDBG_EVENT</name><argument_list pos:start="167:17" pos:end="167:55">(<argument pos:start="167:18" pos:end="167:25"><expr pos:start="167:18" pos:end="167:25"><name pos:start="167:18" pos:end="167:25"><name pos:start="167:18" pos:end="167:19">bs</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:25">file</name></name></expr></argument>, <argument pos:start="167:28" pos:end="167:54"><expr pos:start="167:28" pos:end="167:54"><name pos:start="167:28" pos:end="167:54">BLKDBG_REFBLOCK_ALLOC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="171:25"><expr pos:start="169:5" pos:end="171:24"><name pos:start="169:5" pos:end="169:7">ret</name> <operator pos:start="169:9" pos:end="169:9">=</operator> <call pos:start="169:11" pos:end="171:24"><name pos:start="169:11" pos:end="169:21">bdrv_pwrite</name><argument_list pos:start="169:22" pos:end="171:24">(<argument pos:start="169:23" pos:end="169:30"><expr pos:start="169:23" pos:end="169:30"><name pos:start="169:23" pos:end="169:30"><name pos:start="169:23" pos:end="169:24">bs</name><operator pos:start="169:25" pos:end="169:26">-&gt;</operator><name pos:start="169:27" pos:end="169:30">file</name></name></expr></argument>, <argument pos:start="169:33" pos:end="169:41"><expr pos:start="169:33" pos:end="169:41"><name pos:start="169:33" pos:end="169:41">new_block</name></expr></argument>, <argument pos:start="169:44" pos:end="169:66"><expr pos:start="169:44" pos:end="169:66"><name pos:start="169:44" pos:end="169:66"><name pos:start="169:44" pos:end="169:44">s</name><operator pos:start="169:45" pos:end="169:46">-&gt;</operator><name pos:start="169:47" pos:end="169:66">refcount_block_cache</name></name></expr></argument>,

        <argument pos:start="171:9" pos:end="171:23"><expr pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:23">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="177:5"><if pos:start="173:5" pos:end="177:5">if <condition pos:start="173:8" pos:end="173:16">(<expr pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">&lt;</operator> <literal type="number" pos:start="173:15" pos:end="173:15">0</literal></expr>)</condition> <block pos:start="173:18" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:24">

        <goto pos:start="175:9" pos:end="175:24">goto <name pos:start="175:14" pos:end="175:23">fail_block</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="181:5" pos:end="181:75">/* If the refcount table is big enough, just hook the block up there */</comment>

    <if_stmt pos:start="183:5" pos:end="207:5"><if pos:start="183:5" pos:end="207:5">if <condition pos:start="183:8" pos:end="183:54">(<expr pos:start="183:9" pos:end="183:53"><name pos:start="183:9" pos:end="183:28">refcount_table_index</name> <operator pos:start="183:30" pos:end="183:30">&lt;</operator> <name pos:start="183:32" pos:end="183:53"><name pos:start="183:32" pos:end="183:32">s</name><operator pos:start="183:33" pos:end="183:34">-&gt;</operator><name pos:start="183:35" pos:end="183:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="183:56" pos:end="207:5">{<block_content pos:start="185:9" pos:end="205:25">

        <decl_stmt pos:start="185:9" pos:end="185:49"><decl pos:start="185:9" pos:end="185:48"><type pos:start="185:9" pos:end="185:16"><name pos:start="185:9" pos:end="185:16">uint64_t</name></type> <name pos:start="185:18" pos:end="185:23">data64</name> <init pos:start="185:25" pos:end="185:48">= <expr pos:start="185:27" pos:end="185:48"><call pos:start="185:27" pos:end="185:48"><name pos:start="185:27" pos:end="185:37">cpu_to_be64</name><argument_list pos:start="185:38" pos:end="185:48">(<argument pos:start="185:39" pos:end="185:47"><expr pos:start="185:39" pos:end="185:47"><name pos:start="185:39" pos:end="185:47">new_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:61"><expr pos:start="187:9" pos:end="187:60"><call pos:start="187:9" pos:end="187:60"><name pos:start="187:9" pos:end="187:20">BLKDBG_EVENT</name><argument_list pos:start="187:21" pos:end="187:60">(<argument pos:start="187:22" pos:end="187:29"><expr pos:start="187:22" pos:end="187:29"><name pos:start="187:22" pos:end="187:29"><name pos:start="187:22" pos:end="187:23">bs</name><operator pos:start="187:24" pos:end="187:25">-&gt;</operator><name pos:start="187:26" pos:end="187:29">file</name></name></expr></argument>, <argument pos:start="187:32" pos:end="187:59"><expr pos:start="187:32" pos:end="187:59"><name pos:start="187:32" pos:end="187:59">BLKDBG_REFBLOCK_ALLOC_HOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="193:37"><expr pos:start="189:9" pos:end="193:36"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="193:36"><name pos:start="189:15" pos:end="189:25">bdrv_pwrite</name><argument_list pos:start="189:26" pos:end="193:36">(<argument pos:start="189:27" pos:end="189:34"><expr pos:start="189:27" pos:end="189:34"><name pos:start="189:27" pos:end="189:34"><name pos:start="189:27" pos:end="189:28">bs</name><operator pos:start="189:29" pos:end="189:30">-&gt;</operator><name pos:start="189:31" pos:end="189:34">file</name></name></expr></argument>,

            <argument pos:start="191:13" pos:end="191:78"><expr pos:start="191:13" pos:end="191:78"><name pos:start="191:13" pos:end="191:36"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:36">refcount_table_offset</name></name> <operator pos:start="191:38" pos:end="191:38">+</operator> <name pos:start="191:40" pos:end="191:59">refcount_table_index</name> <operator pos:start="191:61" pos:end="191:61">*</operator> <sizeof pos:start="191:63" pos:end="191:78">sizeof<argument_list pos:start="191:69" pos:end="191:78">(<argument pos:start="191:70" pos:end="191:77"><expr pos:start="191:70" pos:end="191:77"><name pos:start="191:70" pos:end="191:77">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

            <argument pos:start="193:13" pos:end="193:19"><expr pos:start="193:13" pos:end="193:19"><operator pos:start="193:13" pos:end="193:13">&amp;</operator><name pos:start="193:14" pos:end="193:19">data64</name></expr></argument>, <argument pos:start="193:22" pos:end="193:35"><expr pos:start="193:22" pos:end="193:35"><sizeof pos:start="193:22" pos:end="193:35">sizeof<argument_list pos:start="193:28" pos:end="193:35">(<argument pos:start="193:29" pos:end="193:34"><expr pos:start="193:29" pos:end="193:34"><name pos:start="193:29" pos:end="193:34">data64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="199:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:20">(<expr pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">&lt;</operator> <literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>)</condition> <block pos:start="195:22" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:28">

            <goto pos:start="197:13" pos:end="197:28">goto <name pos:start="197:18" pos:end="197:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:60"><expr pos:start="203:9" pos:end="203:59"><name pos:start="203:9" pos:end="203:47"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:25">refcount_table</name><index pos:start="203:26" pos:end="203:47">[<expr pos:start="203:27" pos:end="203:46"><name pos:start="203:27" pos:end="203:46">refcount_table_index</name></expr>]</index></name> <operator pos:start="203:49" pos:end="203:49">=</operator> <name pos:start="203:51" pos:end="203:59">new_block</name></expr>;</expr_stmt>

        <return pos:start="205:9" pos:end="205:25">return <expr pos:start="205:16" pos:end="205:24"><name pos:start="205:16" pos:end="205:24">new_block</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="211:5" pos:end="231:7">/*

     * If we come here, we need to grow the refcount table. Again, a new

     * refcount table needs some space and we can't simply allocate to avoid

     * endless recursion.

     *

     * Therefore let's grab new refcount blocks at the end of the image, which

     * will describe themselves and the new refcount table. This way we can

     * reference them only in the new table and do the switch to the new

     * refcount table at once without producing an inconsistent state in

     * between.

     */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:49"><expr pos:start="233:5" pos:end="233:48"><call pos:start="233:5" pos:end="233:48"><name pos:start="233:5" pos:end="233:16">BLKDBG_EVENT</name><argument_list pos:start="233:17" pos:end="233:48">(<argument pos:start="233:18" pos:end="233:25"><expr pos:start="233:18" pos:end="233:25"><name pos:start="233:18" pos:end="233:25"><name pos:start="233:18" pos:end="233:19">bs</name><operator pos:start="233:20" pos:end="233:21">-&gt;</operator><name pos:start="233:22" pos:end="233:25">file</name></name></expr></argument>, <argument pos:start="233:28" pos:end="233:47"><expr pos:start="233:28" pos:end="233:47"><name pos:start="233:28" pos:end="233:47">BLKDBG_REFTABLE_GROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="237:5" pos:end="237:63">/* Calculate the number of refcount blocks needed so far */</comment>

    <decl_stmt pos:start="239:5" pos:end="239:79"><decl pos:start="239:5" pos:end="239:78"><type pos:start="239:5" pos:end="239:12"><name pos:start="239:5" pos:end="239:12">uint64_t</name></type> <name pos:start="239:14" pos:end="239:36">refcount_block_clusters</name> <init pos:start="239:38" pos:end="239:78">= <expr pos:start="239:40" pos:end="239:78"><literal type="number" pos:start="239:40" pos:end="239:40">1</literal> <operator pos:start="239:42" pos:end="239:43">&lt;&lt;</operator> <operator pos:start="239:45" pos:end="239:45">(</operator><name pos:start="239:46" pos:end="239:60"><name pos:start="239:46" pos:end="239:46">s</name><operator pos:start="239:47" pos:end="239:48">-&gt;</operator><name pos:start="239:49" pos:end="239:60">cluster_bits</name></name> <operator pos:start="239:62" pos:end="239:62">-</operator> <name pos:start="239:64" pos:end="239:77">REFCOUNT_SHIFT</name><operator pos:start="239:78" pos:end="239:78">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="241:5" pos:end="243:63"><decl pos:start="241:5" pos:end="243:62"><type pos:start="241:5" pos:end="241:12"><name pos:start="241:5" pos:end="241:12">uint64_t</name></type> <name pos:start="241:14" pos:end="241:24">blocks_used</name> <init pos:start="241:26" pos:end="243:62">= <expr pos:start="241:28" pos:end="243:62"><operator pos:start="241:28" pos:end="241:28">(</operator><name pos:start="241:29" pos:end="241:49"><name pos:start="241:29" pos:end="241:29">s</name><operator pos:start="241:30" pos:end="241:31">-&gt;</operator><name pos:start="241:32" pos:end="241:49">free_cluster_index</name></name> <operator pos:start="241:51" pos:end="241:51">+</operator>

        <name pos:start="243:9" pos:end="243:31">refcount_block_clusters</name> <operator pos:start="243:33" pos:end="243:33">-</operator> <literal type="number" pos:start="243:35" pos:end="243:35">1</literal><operator pos:start="243:36" pos:end="243:36">)</operator> <operator pos:start="243:38" pos:end="243:38">/</operator> <name pos:start="243:40" pos:end="243:62">refcount_block_clusters</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="247:5" pos:end="247:70">/* And now we need at least one block more for the new metadata */</comment>

    <decl_stmt pos:start="249:5" pos:end="249:71"><decl pos:start="249:5" pos:end="249:70"><type pos:start="249:5" pos:end="249:12"><name pos:start="249:5" pos:end="249:12">uint64_t</name></type> <name pos:start="249:14" pos:end="249:23">table_size</name> <init pos:start="249:25" pos:end="249:70">= <expr pos:start="249:27" pos:end="249:70"><call pos:start="249:27" pos:end="249:70"><name pos:start="249:27" pos:end="249:50">next_refcount_table_size</name><argument_list pos:start="249:51" pos:end="249:70">(<argument pos:start="249:52" pos:end="249:52"><expr pos:start="249:52" pos:end="249:52"><name pos:start="249:52" pos:end="249:52">s</name></expr></argument>, <argument pos:start="249:55" pos:end="249:69"><expr pos:start="249:55" pos:end="249:69"><name pos:start="249:55" pos:end="249:65">blocks_used</name> <operator pos:start="249:67" pos:end="249:67">+</operator> <literal type="number" pos:start="249:69" pos:end="249:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="251:5" pos:end="251:29"><decl pos:start="251:5" pos:end="251:28"><type pos:start="251:5" pos:end="251:12"><name pos:start="251:5" pos:end="251:12">uint64_t</name></type> <name pos:start="251:14" pos:end="251:28">last_table_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="253:5" pos:end="253:29"><decl pos:start="253:5" pos:end="253:28"><type pos:start="253:5" pos:end="253:12"><name pos:start="253:5" pos:end="253:12">uint64_t</name></type> <name pos:start="253:14" pos:end="253:28">blocks_clusters</name></decl>;</decl_stmt>

    <do pos:start="255:5" pos:end="284:0">do <block pos:start="255:8" pos:end="279:5">{<block_content pos:start="257:9" pos:end="275:40">

        <decl_stmt pos:start="257:9" pos:end="257:66"><decl pos:start="257:9" pos:end="257:65"><type pos:start="257:9" pos:end="257:16"><name pos:start="257:9" pos:end="257:16">uint64_t</name></type> <name pos:start="257:18" pos:end="257:31">table_clusters</name> <init pos:start="257:33" pos:end="257:65">= <expr pos:start="257:35" pos:end="257:65"><call pos:start="257:35" pos:end="257:65"><name pos:start="257:35" pos:end="257:50">size_to_clusters</name><argument_list pos:start="257:51" pos:end="257:65">(<argument pos:start="257:52" pos:end="257:52"><expr pos:start="257:52" pos:end="257:52"><name pos:start="257:52" pos:end="257:52">s</name></expr></argument>, <argument pos:start="257:55" pos:end="257:64"><expr pos:start="257:55" pos:end="257:64"><name pos:start="257:55" pos:end="257:64">table_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="259:9" pos:end="263:39"><expr pos:start="259:9" pos:end="263:38"><name pos:start="259:9" pos:end="259:23">blocks_clusters</name> <operator pos:start="259:25" pos:end="259:25">=</operator> <literal type="number" pos:start="259:27" pos:end="259:29">1</literal> <operator pos:start="259:29" pos:end="259:29">+</operator>

            <operator pos:start="261:13" pos:end="261:13">(</operator><operator pos:start="261:14" pos:end="261:14">(</operator><name pos:start="261:15" pos:end="261:28">table_clusters</name> <operator pos:start="261:30" pos:end="261:30">+</operator> <name pos:start="261:32" pos:end="261:54">refcount_block_clusters</name> <operator pos:start="261:56" pos:end="261:56">-</operator> <literal type="number" pos:start="261:58" pos:end="261:58">1</literal><operator pos:start="261:59" pos:end="261:59">)</operator>

            <operator pos:start="263:13" pos:end="263:13">/</operator> <name pos:start="263:15" pos:end="263:37">refcount_block_clusters</name><operator pos:start="263:38" pos:end="263:38">)</operator></expr>;</expr_stmt>

        <decl_stmt pos:start="265:9" pos:end="265:66"><decl pos:start="265:9" pos:end="265:65"><type pos:start="265:9" pos:end="265:16"><name pos:start="265:9" pos:end="265:16">uint64_t</name></type> <name pos:start="265:18" pos:end="265:30">meta_clusters</name> <init pos:start="265:32" pos:end="265:65">= <expr pos:start="265:34" pos:end="265:65"><name pos:start="265:34" pos:end="265:47">table_clusters</name> <operator pos:start="265:49" pos:end="265:49">+</operator> <name pos:start="265:51" pos:end="265:65">blocks_clusters</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="269:9" pos:end="269:37"><expr pos:start="269:9" pos:end="269:36"><name pos:start="269:9" pos:end="269:23">last_table_size</name> <operator pos:start="269:25" pos:end="269:25">=</operator> <name pos:start="269:27" pos:end="269:36">table_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="275:40"><expr pos:start="271:9" pos:end="275:39"><name pos:start="271:9" pos:end="271:18">table_size</name> <operator pos:start="271:20" pos:end="271:20">=</operator> <call pos:start="271:22" pos:end="275:39"><name pos:start="271:22" pos:end="271:45">next_refcount_table_size</name><argument_list pos:start="271:46" pos:end="275:39">(<argument pos:start="271:47" pos:end="271:47"><expr pos:start="271:47" pos:end="271:47"><name pos:start="271:47" pos:end="271:47">s</name></expr></argument>, <argument pos:start="271:50" pos:end="275:38"><expr pos:start="271:50" pos:end="275:38"><name pos:start="271:50" pos:end="271:60">blocks_used</name> <operator pos:start="271:62" pos:end="271:62">+</operator>

            <operator pos:start="273:13" pos:end="273:13">(</operator><operator pos:start="273:14" pos:end="273:14">(</operator><name pos:start="273:15" pos:end="273:27">meta_clusters</name> <operator pos:start="273:29" pos:end="273:29">+</operator> <name pos:start="273:31" pos:end="273:53">refcount_block_clusters</name> <operator pos:start="273:55" pos:end="273:55">-</operator> <literal type="number" pos:start="273:57" pos:end="273:57">1</literal><operator pos:start="273:58" pos:end="273:58">)</operator>

            <operator pos:start="275:13" pos:end="275:13">/</operator> <name pos:start="275:15" pos:end="275:37">refcount_block_clusters</name><operator pos:start="275:38" pos:end="275:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block> while <condition pos:start="279:13" pos:end="279:43">(<expr pos:start="279:14" pos:end="279:42"><name pos:start="279:14" pos:end="279:28">last_table_size</name> <operator pos:start="279:30" pos:end="279:31">!=</operator> <name pos:start="279:33" pos:end="279:42">table_size</name></expr>)</condition>;</do>



<cpp:ifdef pos:start="283:1" pos:end="283:19">#<cpp:directive pos:start="283:2" pos:end="283:6">ifdef</cpp:directive> <name pos:start="283:8" pos:end="283:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="285:5" pos:end="290:0"><expr pos:start="285:5" pos:end="287:43"><call pos:start="285:5" pos:end="287:43"><name pos:start="285:5" pos:end="285:11">fprintf</name><argument_list pos:start="285:12" pos:end="287:43">(<argument pos:start="285:13" pos:end="285:18"><expr pos:start="285:13" pos:end="285:18"><name pos:start="285:13" pos:end="285:18">stderr</name></expr></argument>, <argument pos:start="285:21" pos:end="285:77"><expr pos:start="285:21" pos:end="285:77"><literal type="string" pos:start="285:21" pos:end="285:50">"qcow2: Grow refcount table %"</literal> <name pos:start="285:52" pos:end="285:57">PRId32</name> <literal type="string" pos:start="285:59" pos:end="285:65">" =&gt; %"</literal> <name pos:start="285:67" pos:end="285:72">PRId64</name> <literal type="string" pos:start="285:74" pos:end="285:77">"\n"</literal></expr></argument>,

        <argument pos:start="287:9" pos:end="287:30"><expr pos:start="287:9" pos:end="287:30"><name pos:start="287:9" pos:end="287:30"><name pos:start="287:9" pos:end="287:9">s</name><operator pos:start="287:10" pos:end="287:11">-&gt;</operator><name pos:start="287:12" pos:end="287:30">refcount_table_size</name></name></expr></argument>, <argument pos:start="287:33" pos:end="287:42"><expr pos:start="287:33" pos:end="287:42"><name pos:start="287:33" pos:end="287:42">table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="289:1" pos:end="289:6">#<cpp:directive pos:start="289:2" pos:end="289:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="293:5" pos:end="293:50">/* Create the new refcount table and blocks */</comment>

    <decl_stmt pos:start="295:5" pos:end="297:24"><decl pos:start="295:5" pos:end="297:23"><type pos:start="295:5" pos:end="295:12"><name pos:start="295:5" pos:end="295:12">uint64_t</name></type> <name pos:start="295:14" pos:end="295:24">meta_offset</name> <init pos:start="295:26" pos:end="297:23">= <expr pos:start="295:28" pos:end="297:23"><operator pos:start="295:28" pos:end="295:28">(</operator><name pos:start="295:29" pos:end="295:39">blocks_used</name> <operator pos:start="295:41" pos:end="295:41">*</operator> <name pos:start="295:43" pos:end="295:65">refcount_block_clusters</name><operator pos:start="295:66" pos:end="295:66">)</operator> <operator pos:start="295:68" pos:end="295:68">*</operator>

        <name pos:start="297:9" pos:end="297:23"><name pos:start="297:9" pos:end="297:9">s</name><operator pos:start="297:10" pos:end="297:11">-&gt;</operator><name pos:start="297:12" pos:end="297:23">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="299:5" pos:end="299:76"><decl pos:start="299:5" pos:end="299:75"><type pos:start="299:5" pos:end="299:12"><name pos:start="299:5" pos:end="299:12">uint64_t</name></type> <name pos:start="299:14" pos:end="299:25">table_offset</name> <init pos:start="299:27" pos:end="299:75">= <expr pos:start="299:29" pos:end="299:75"><name pos:start="299:29" pos:end="299:39">meta_offset</name> <operator pos:start="299:41" pos:end="299:41">+</operator> <name pos:start="299:43" pos:end="299:57">blocks_clusters</name> <operator pos:start="299:59" pos:end="299:59">*</operator> <name pos:start="299:61" pos:end="299:75"><name pos:start="299:61" pos:end="299:61">s</name><operator pos:start="299:62" pos:end="299:63">-&gt;</operator><name pos:start="299:64" pos:end="299:75">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="301:5" pos:end="301:75"><decl pos:start="301:5" pos:end="301:74"><type pos:start="301:5" pos:end="301:14"><name pos:start="301:5" pos:end="301:12">uint16_t</name> <modifier pos:start="301:14" pos:end="301:14">*</modifier></type><name pos:start="301:15" pos:end="301:24">new_blocks</name> <init pos:start="301:26" pos:end="301:74">= <expr pos:start="301:28" pos:end="301:74"><call pos:start="301:28" pos:end="301:74"><name pos:start="301:28" pos:end="301:39">qemu_mallocz</name><argument_list pos:start="301:40" pos:end="301:74">(<argument pos:start="301:41" pos:end="301:73"><expr pos:start="301:41" pos:end="301:73"><name pos:start="301:41" pos:end="301:55">blocks_clusters</name> <operator pos:start="301:57" pos:end="301:57">*</operator> <name pos:start="301:59" pos:end="301:73"><name pos:start="301:59" pos:end="301:59">s</name><operator pos:start="301:60" pos:end="301:61">-&gt;</operator><name pos:start="301:62" pos:end="301:73">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="303:5" pos:end="303:70"><decl pos:start="303:5" pos:end="303:69"><type pos:start="303:5" pos:end="303:14"><name pos:start="303:5" pos:end="303:12">uint64_t</name> <modifier pos:start="303:14" pos:end="303:14">*</modifier></type><name pos:start="303:15" pos:end="303:23">new_table</name> <init pos:start="303:25" pos:end="303:69">= <expr pos:start="303:27" pos:end="303:69"><call pos:start="303:27" pos:end="303:69"><name pos:start="303:27" pos:end="303:38">qemu_mallocz</name><argument_list pos:start="303:39" pos:end="303:69">(<argument pos:start="303:40" pos:end="303:68"><expr pos:start="303:40" pos:end="303:68"><name pos:start="303:40" pos:end="303:49">table_size</name> <operator pos:start="303:51" pos:end="303:51">*</operator> <sizeof pos:start="303:53" pos:end="303:68">sizeof<argument_list pos:start="303:59" pos:end="303:68">(<argument pos:start="303:60" pos:end="303:67"><expr pos:start="303:60" pos:end="303:67"><name pos:start="303:60" pos:end="303:67">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:69"><expr pos:start="307:5" pos:end="307:68"><call pos:start="307:5" pos:end="307:68"><name pos:start="307:5" pos:end="307:10">assert</name><argument_list pos:start="307:11" pos:end="307:68">(<argument pos:start="307:12" pos:end="307:67"><expr pos:start="307:12" pos:end="307:67"><name pos:start="307:12" pos:end="307:22">meta_offset</name> <operator pos:start="307:24" pos:end="307:25">&gt;=</operator> <operator pos:start="307:27" pos:end="307:27">(</operator><name pos:start="307:28" pos:end="307:48"><name pos:start="307:28" pos:end="307:28">s</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:48">free_cluster_index</name></name> <operator pos:start="307:50" pos:end="307:50">*</operator> <name pos:start="307:52" pos:end="307:66"><name pos:start="307:52" pos:end="307:52">s</name><operator pos:start="307:53" pos:end="307:54">-&gt;</operator><name pos:start="307:55" pos:end="307:66">cluster_size</name></name><operator pos:start="307:67" pos:end="307:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="311:5" pos:end="311:37">/* Fill the new refcount table */</comment>

    <expr_stmt pos:start="313:5" pos:end="315:51"><expr pos:start="313:5" pos:end="315:50"><call pos:start="313:5" pos:end="315:50"><name pos:start="313:5" pos:end="313:10">memcpy</name><argument_list pos:start="313:11" pos:end="315:50">(<argument pos:start="313:12" pos:end="313:20"><expr pos:start="313:12" pos:end="313:20"><name pos:start="313:12" pos:end="313:20">new_table</name></expr></argument>, <argument pos:start="313:23" pos:end="313:39"><expr pos:start="313:23" pos:end="313:39"><name pos:start="313:23" pos:end="313:39"><name pos:start="313:23" pos:end="313:23">s</name><operator pos:start="313:24" pos:end="313:25">-&gt;</operator><name pos:start="313:26" pos:end="313:39">refcount_table</name></name></expr></argument>,

        <argument pos:start="315:9" pos:end="315:49"><expr pos:start="315:9" pos:end="315:49"><name pos:start="315:9" pos:end="315:30"><name pos:start="315:9" pos:end="315:9">s</name><operator pos:start="315:10" pos:end="315:11">-&gt;</operator><name pos:start="315:12" pos:end="315:30">refcount_table_size</name></name> <operator pos:start="315:32" pos:end="315:32">*</operator> <sizeof pos:start="315:34" pos:end="315:49">sizeof<argument_list pos:start="315:40" pos:end="315:49">(<argument pos:start="315:41" pos:end="315:48"><expr pos:start="315:41" pos:end="315:48"><name pos:start="315:41" pos:end="315:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:48"><expr pos:start="317:5" pos:end="317:47"><name pos:start="317:5" pos:end="317:35"><name pos:start="317:5" pos:end="317:13">new_table</name><index pos:start="317:14" pos:end="317:35">[<expr pos:start="317:15" pos:end="317:34"><name pos:start="317:15" pos:end="317:34">refcount_table_index</name></expr>]</index></name> <operator pos:start="317:37" pos:end="317:37">=</operator> <name pos:start="317:39" pos:end="317:47">new_block</name></expr>;</expr_stmt>



    <decl_stmt pos:start="321:5" pos:end="321:10"><decl pos:start="321:5" pos:end="321:9"><type pos:start="321:5" pos:end="321:7"><name pos:start="321:5" pos:end="321:7">int</name></type> <name pos:start="321:9" pos:end="321:9">i</name></decl>;</decl_stmt>

    <for pos:start="323:5" pos:end="327:5">for <control pos:start="323:9" pos:end="323:41">(<init pos:start="323:10" pos:end="323:15"><expr pos:start="323:10" pos:end="323:14"><name pos:start="323:10" pos:end="323:10">i</name> <operator pos:start="323:12" pos:end="323:12">=</operator> <literal type="number" pos:start="323:14" pos:end="323:14">0</literal></expr>;</init> <condition pos:start="323:17" pos:end="323:36"><expr pos:start="323:17" pos:end="323:35"><name pos:start="323:17" pos:end="323:17">i</name> <operator pos:start="323:19" pos:end="323:19">&lt;</operator> <name pos:start="323:21" pos:end="323:35">blocks_clusters</name></expr>;</condition> <incr pos:start="323:38" pos:end="323:40"><expr pos:start="323:38" pos:end="323:40"><name pos:start="323:38" pos:end="323:38">i</name><operator pos:start="323:39" pos:end="323:40">++</operator></expr></incr>)</control> <block pos:start="323:43" pos:end="327:5">{<block_content pos:start="325:9" pos:end="325:73">

        <expr_stmt pos:start="325:9" pos:end="325:73"><expr pos:start="325:9" pos:end="325:72"><name pos:start="325:9" pos:end="325:34"><name pos:start="325:9" pos:end="325:17">new_table</name><index pos:start="325:18" pos:end="325:34">[<expr pos:start="325:19" pos:end="325:33"><name pos:start="325:19" pos:end="325:29">blocks_used</name> <operator pos:start="325:31" pos:end="325:31">+</operator> <name pos:start="325:33" pos:end="325:33">i</name></expr>]</index></name> <operator pos:start="325:36" pos:end="325:36">=</operator> <name pos:start="325:38" pos:end="325:48">meta_offset</name> <operator pos:start="325:50" pos:end="325:50">+</operator> <operator pos:start="325:52" pos:end="325:52">(</operator><name pos:start="325:53" pos:end="325:53">i</name> <operator pos:start="325:55" pos:end="325:55">*</operator> <name pos:start="325:57" pos:end="325:71"><name pos:start="325:57" pos:end="325:57">s</name><operator pos:start="325:58" pos:end="325:59">-&gt;</operator><name pos:start="325:60" pos:end="325:71">cluster_size</name></name><operator pos:start="325:72" pos:end="325:72">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="331:5" pos:end="331:34">/* Fill the refcount blocks */</comment>

    <decl_stmt pos:start="333:5" pos:end="333:81"><decl pos:start="333:5" pos:end="333:80"><type pos:start="333:5" pos:end="333:12"><name pos:start="333:5" pos:end="333:12">uint64_t</name></type> <name pos:start="333:14" pos:end="333:27">table_clusters</name> <init pos:start="333:29" pos:end="333:80">= <expr pos:start="333:31" pos:end="333:80"><call pos:start="333:31" pos:end="333:80"><name pos:start="333:31" pos:end="333:46">size_to_clusters</name><argument_list pos:start="333:47" pos:end="333:80">(<argument pos:start="333:48" pos:end="333:48"><expr pos:start="333:48" pos:end="333:48"><name pos:start="333:48" pos:end="333:48">s</name></expr></argument>, <argument pos:start="333:51" pos:end="333:79"><expr pos:start="333:51" pos:end="333:79"><name pos:start="333:51" pos:end="333:60">table_size</name> <operator pos:start="333:62" pos:end="333:62">*</operator> <sizeof pos:start="333:64" pos:end="333:79">sizeof<argument_list pos:start="333:70" pos:end="333:79">(<argument pos:start="333:71" pos:end="333:78"><expr pos:start="333:71" pos:end="333:78"><name pos:start="333:71" pos:end="333:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="335:5" pos:end="335:18"><decl pos:start="335:5" pos:end="335:17"><type pos:start="335:5" pos:end="335:7"><name pos:start="335:5" pos:end="335:7">int</name></type> <name pos:start="335:9" pos:end="335:13">block</name> <init pos:start="335:15" pos:end="335:17">= <expr pos:start="335:17" pos:end="335:17"><literal type="number" pos:start="335:17" pos:end="335:17">0</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="337:5" pos:end="341:5">for <control pos:start="337:9" pos:end="337:58">(<init pos:start="337:10" pos:end="337:15"><expr pos:start="337:10" pos:end="337:14"><name pos:start="337:10" pos:end="337:10">i</name> <operator pos:start="337:12" pos:end="337:12">=</operator> <literal type="number" pos:start="337:14" pos:end="337:14">0</literal></expr>;</init> <condition pos:start="337:17" pos:end="337:53"><expr pos:start="337:17" pos:end="337:52"><name pos:start="337:17" pos:end="337:17">i</name> <operator pos:start="337:19" pos:end="337:19">&lt;</operator> <name pos:start="337:21" pos:end="337:34">table_clusters</name> <operator pos:start="337:36" pos:end="337:36">+</operator> <name pos:start="337:38" pos:end="337:52">blocks_clusters</name></expr>;</condition> <incr pos:start="337:55" pos:end="337:57"><expr pos:start="337:55" pos:end="337:57"><name pos:start="337:55" pos:end="337:55">i</name><operator pos:start="337:56" pos:end="337:57">++</operator></expr></incr>)</control> <block pos:start="337:60" pos:end="341:5">{<block_content pos:start="339:9" pos:end="339:45">

        <expr_stmt pos:start="339:9" pos:end="339:45"><expr pos:start="339:9" pos:end="339:44"><name pos:start="339:9" pos:end="339:27"><name pos:start="339:9" pos:end="339:18">new_blocks</name><index pos:start="339:19" pos:end="339:27">[<expr pos:start="339:20" pos:end="339:26"><name pos:start="339:20" pos:end="339:24">block</name><operator pos:start="339:25" pos:end="339:26">++</operator></expr>]</index></name> <operator pos:start="339:29" pos:end="339:29">=</operator> <call pos:start="339:31" pos:end="339:44"><name pos:start="339:31" pos:end="339:41">cpu_to_be16</name><argument_list pos:start="339:42" pos:end="339:44">(<argument pos:start="339:43" pos:end="339:43"><expr pos:start="339:43" pos:end="339:43"><literal type="number" pos:start="339:43" pos:end="339:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="345:5" pos:end="345:39">/* Write refcount blocks to disk */</comment>

    <expr_stmt pos:start="347:5" pos:end="347:63"><expr pos:start="347:5" pos:end="347:62"><call pos:start="347:5" pos:end="347:62"><name pos:start="347:5" pos:end="347:16">BLKDBG_EVENT</name><argument_list pos:start="347:17" pos:end="347:62">(<argument pos:start="347:18" pos:end="347:25"><expr pos:start="347:18" pos:end="347:25"><name pos:start="347:18" pos:end="347:25"><name pos:start="347:18" pos:end="347:19">bs</name><operator pos:start="347:20" pos:end="347:21">-&gt;</operator><name pos:start="347:22" pos:end="347:25">file</name></name></expr></argument>, <argument pos:start="347:28" pos:end="347:61"><expr pos:start="347:28" pos:end="347:61"><name pos:start="347:28" pos:end="347:61">BLKDBG_REFBLOCK_ALLOC_WRITE_BLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="351:43"><expr pos:start="349:5" pos:end="351:42"><name pos:start="349:5" pos:end="349:7">ret</name> <operator pos:start="349:9" pos:end="349:9">=</operator> <call pos:start="349:11" pos:end="351:42"><name pos:start="349:11" pos:end="349:21">bdrv_pwrite</name><argument_list pos:start="349:22" pos:end="351:42">(<argument pos:start="349:23" pos:end="349:30"><expr pos:start="349:23" pos:end="349:30"><name pos:start="349:23" pos:end="349:30"><name pos:start="349:23" pos:end="349:24">bs</name><operator pos:start="349:25" pos:end="349:26">-&gt;</operator><name pos:start="349:27" pos:end="349:30">file</name></name></expr></argument>, <argument pos:start="349:33" pos:end="349:43"><expr pos:start="349:33" pos:end="349:43"><name pos:start="349:33" pos:end="349:43">meta_offset</name></expr></argument>, <argument pos:start="349:46" pos:end="349:55"><expr pos:start="349:46" pos:end="349:55"><name pos:start="349:46" pos:end="349:55">new_blocks</name></expr></argument>,

        <argument pos:start="351:9" pos:end="351:41"><expr pos:start="351:9" pos:end="351:41"><name pos:start="351:9" pos:end="351:23">blocks_clusters</name> <operator pos:start="351:25" pos:end="351:25">*</operator> <name pos:start="351:27" pos:end="351:41"><name pos:start="351:27" pos:end="351:27">s</name><operator pos:start="351:28" pos:end="351:29">-&gt;</operator><name pos:start="351:30" pos:end="351:41">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:26"><expr pos:start="353:5" pos:end="353:25"><call pos:start="353:5" pos:end="353:25"><name pos:start="353:5" pos:end="353:13">qemu_free</name><argument_list pos:start="353:14" pos:end="353:25">(<argument pos:start="353:15" pos:end="353:24"><expr pos:start="353:15" pos:end="353:24"><name pos:start="353:15" pos:end="353:24">new_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="355:5" pos:end="359:5"><if pos:start="355:5" pos:end="359:5">if <condition pos:start="355:8" pos:end="355:16">(<expr pos:start="355:9" pos:end="355:15"><name pos:start="355:9" pos:end="355:11">ret</name> <operator pos:start="355:13" pos:end="355:13">&lt;</operator> <literal type="number" pos:start="355:15" pos:end="355:15">0</literal></expr>)</condition> <block pos:start="355:18" pos:end="359:5">{<block_content pos:start="357:9" pos:end="357:24">

        <goto pos:start="357:9" pos:end="357:24">goto <name pos:start="357:14" pos:end="357:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="363:5" pos:end="363:38">/* Write refcount table to disk */</comment>

    <for pos:start="365:5" pos:end="369:5">for<control pos:start="365:8" pos:end="365:35">(<init pos:start="365:9" pos:end="365:14"><expr pos:start="365:9" pos:end="365:13"><name pos:start="365:9" pos:end="365:9">i</name> <operator pos:start="365:11" pos:end="365:11">=</operator> <literal type="number" pos:start="365:13" pos:end="365:13">0</literal></expr>;</init> <condition pos:start="365:16" pos:end="365:30"><expr pos:start="365:16" pos:end="365:29"><name pos:start="365:16" pos:end="365:16">i</name> <operator pos:start="365:18" pos:end="365:18">&lt;</operator> <name pos:start="365:20" pos:end="365:29">table_size</name></expr>;</condition> <incr pos:start="365:32" pos:end="365:34"><expr pos:start="365:32" pos:end="365:34"><name pos:start="365:32" pos:end="365:32">i</name><operator pos:start="365:33" pos:end="365:34">++</operator></expr></incr>)</control> <block pos:start="365:37" pos:end="369:5">{<block_content pos:start="367:9" pos:end="367:36">

        <expr_stmt pos:start="367:9" pos:end="367:36"><expr pos:start="367:9" pos:end="367:35"><call pos:start="367:9" pos:end="367:35"><name pos:start="367:9" pos:end="367:20">cpu_to_be64s</name><argument_list pos:start="367:21" pos:end="367:35">(<argument pos:start="367:22" pos:end="367:34"><expr pos:start="367:22" pos:end="367:34"><operator pos:start="367:22" pos:end="367:22">&amp;</operator><name pos:start="367:23" pos:end="367:34"><name pos:start="367:23" pos:end="367:31">new_table</name><index pos:start="367:32" pos:end="367:34">[<expr pos:start="367:33" pos:end="367:33"><name pos:start="367:33" pos:end="367:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="373:5" pos:end="373:62"><expr pos:start="373:5" pos:end="373:61"><call pos:start="373:5" pos:end="373:61"><name pos:start="373:5" pos:end="373:16">BLKDBG_EVENT</name><argument_list pos:start="373:17" pos:end="373:61">(<argument pos:start="373:18" pos:end="373:25"><expr pos:start="373:18" pos:end="373:25"><name pos:start="373:18" pos:end="373:25"><name pos:start="373:18" pos:end="373:19">bs</name><operator pos:start="373:20" pos:end="373:21">-&gt;</operator><name pos:start="373:22" pos:end="373:25">file</name></name></expr></argument>, <argument pos:start="373:28" pos:end="373:60"><expr pos:start="373:28" pos:end="373:60"><name pos:start="373:28" pos:end="373:60">BLKDBG_REFBLOCK_ALLOC_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="377:39"><expr pos:start="375:5" pos:end="377:38"><name pos:start="375:5" pos:end="375:7">ret</name> <operator pos:start="375:9" pos:end="375:9">=</operator> <call pos:start="375:11" pos:end="377:38"><name pos:start="375:11" pos:end="375:21">bdrv_pwrite</name><argument_list pos:start="375:22" pos:end="377:38">(<argument pos:start="375:23" pos:end="375:30"><expr pos:start="375:23" pos:end="375:30"><name pos:start="375:23" pos:end="375:30"><name pos:start="375:23" pos:end="375:24">bs</name><operator pos:start="375:25" pos:end="375:26">-&gt;</operator><name pos:start="375:27" pos:end="375:30">file</name></name></expr></argument>, <argument pos:start="375:33" pos:end="375:44"><expr pos:start="375:33" pos:end="375:44"><name pos:start="375:33" pos:end="375:44">table_offset</name></expr></argument>, <argument pos:start="375:47" pos:end="375:55"><expr pos:start="375:47" pos:end="375:55"><name pos:start="375:47" pos:end="375:55">new_table</name></expr></argument>,

        <argument pos:start="377:9" pos:end="377:37"><expr pos:start="377:9" pos:end="377:37"><name pos:start="377:9" pos:end="377:18">table_size</name> <operator pos:start="377:20" pos:end="377:20">*</operator> <sizeof pos:start="377:22" pos:end="377:37">sizeof<argument_list pos:start="377:28" pos:end="377:37">(<argument pos:start="377:29" pos:end="377:36"><expr pos:start="377:29" pos:end="377:36"><name pos:start="377:29" pos:end="377:36">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="379:5" pos:end="383:5"><if pos:start="379:5" pos:end="383:5">if <condition pos:start="379:8" pos:end="379:16">(<expr pos:start="379:9" pos:end="379:15"><name pos:start="379:9" pos:end="379:11">ret</name> <operator pos:start="379:13" pos:end="379:13">&lt;</operator> <literal type="number" pos:start="379:15" pos:end="379:15">0</literal></expr>)</condition> <block pos:start="379:18" pos:end="383:5">{<block_content pos:start="381:9" pos:end="381:24">

        <goto pos:start="381:9" pos:end="381:24">goto <name pos:start="381:14" pos:end="381:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="387:5" pos:end="391:5">for<control pos:start="387:8" pos:end="387:35">(<init pos:start="387:9" pos:end="387:14"><expr pos:start="387:9" pos:end="387:13"><name pos:start="387:9" pos:end="387:9">i</name> <operator pos:start="387:11" pos:end="387:11">=</operator> <literal type="number" pos:start="387:13" pos:end="387:13">0</literal></expr>;</init> <condition pos:start="387:16" pos:end="387:30"><expr pos:start="387:16" pos:end="387:29"><name pos:start="387:16" pos:end="387:16">i</name> <operator pos:start="387:18" pos:end="387:18">&lt;</operator> <name pos:start="387:20" pos:end="387:29">table_size</name></expr>;</condition> <incr pos:start="387:32" pos:end="387:34"><expr pos:start="387:32" pos:end="387:34"><name pos:start="387:32" pos:end="387:32">i</name><operator pos:start="387:33" pos:end="387:34">++</operator></expr></incr>)</control> <block pos:start="387:37" pos:end="391:5">{<block_content pos:start="389:9" pos:end="389:36">

        <expr_stmt pos:start="389:9" pos:end="389:36"><expr pos:start="389:9" pos:end="389:35"><call pos:start="389:9" pos:end="389:35"><name pos:start="389:9" pos:end="389:20">cpu_to_be64s</name><argument_list pos:start="389:21" pos:end="389:35">(<argument pos:start="389:22" pos:end="389:34"><expr pos:start="389:22" pos:end="389:34"><operator pos:start="389:22" pos:end="389:22">&amp;</operator><name pos:start="389:23" pos:end="389:34"><name pos:start="389:23" pos:end="389:31">new_table</name><index pos:start="389:32" pos:end="389:34">[<expr pos:start="389:33" pos:end="389:33"><name pos:start="389:33" pos:end="389:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="395:5" pos:end="395:60">/* Hook up the new refcount table in the qcow2 header */</comment>

    <decl_stmt pos:start="397:5" pos:end="397:21"><decl pos:start="397:5" pos:end="397:20"><type pos:start="397:5" pos:end="397:11"><name pos:start="397:5" pos:end="397:11">uint8_t</name></type> <name pos:start="397:13" pos:end="397:20"><name pos:start="397:13" pos:end="397:16">data</name><index pos:start="397:17" pos:end="397:20">[<expr pos:start="397:18" pos:end="397:19"><literal type="number" pos:start="397:18" pos:end="397:19">12</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:48"><expr pos:start="399:5" pos:end="399:47"><call pos:start="399:5" pos:end="399:47"><name pos:start="399:5" pos:end="399:16">cpu_to_be64w</name><argument_list pos:start="399:17" pos:end="399:47">(<argument pos:start="399:18" pos:end="399:32"><expr pos:start="399:18" pos:end="399:32"><operator pos:start="399:18" pos:end="399:18">(</operator><name pos:start="399:19" pos:end="399:26">uint64_t</name><operator pos:start="399:27" pos:end="399:27">*</operator><operator pos:start="399:28" pos:end="399:28">)</operator><name pos:start="399:29" pos:end="399:32">data</name></expr></argument>, <argument pos:start="399:35" pos:end="399:46"><expr pos:start="399:35" pos:end="399:46"><name pos:start="399:35" pos:end="399:46">table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:56"><expr pos:start="401:5" pos:end="401:55"><call pos:start="401:5" pos:end="401:55"><name pos:start="401:5" pos:end="401:16">cpu_to_be32w</name><argument_list pos:start="401:17" pos:end="401:55">(<argument pos:start="401:18" pos:end="401:38"><expr pos:start="401:18" pos:end="401:38"><operator pos:start="401:18" pos:end="401:18">(</operator><name pos:start="401:19" pos:end="401:26">uint32_t</name><operator pos:start="401:27" pos:end="401:27">*</operator><operator pos:start="401:28" pos:end="401:28">)</operator><operator pos:start="401:29" pos:end="401:29">(</operator><name pos:start="401:30" pos:end="401:33">data</name> <operator pos:start="401:35" pos:end="401:35">+</operator> <literal type="number" pos:start="401:37" pos:end="401:37">8</literal><operator pos:start="401:38" pos:end="401:38">)</operator></expr></argument>, <argument pos:start="401:41" pos:end="401:54"><expr pos:start="401:41" pos:end="401:54"><name pos:start="401:41" pos:end="401:54">table_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:63"><expr pos:start="403:5" pos:end="403:62"><call pos:start="403:5" pos:end="403:62"><name pos:start="403:5" pos:end="403:16">BLKDBG_EVENT</name><argument_list pos:start="403:17" pos:end="403:62">(<argument pos:start="403:18" pos:end="403:25"><expr pos:start="403:18" pos:end="403:25"><name pos:start="403:18" pos:end="403:25"><name pos:start="403:18" pos:end="403:19">bs</name><operator pos:start="403:20" pos:end="403:21">-&gt;</operator><name pos:start="403:22" pos:end="403:25">file</name></name></expr></argument>, <argument pos:start="403:28" pos:end="403:61"><expr pos:start="403:28" pos:end="403:61"><name pos:start="403:28" pos:end="403:61">BLKDBG_REFBLOCK_ALLOC_SWITCH_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="407:28"><expr pos:start="405:5" pos:end="407:27"><name pos:start="405:5" pos:end="405:7">ret</name> <operator pos:start="405:9" pos:end="405:9">=</operator> <call pos:start="405:11" pos:end="407:27"><name pos:start="405:11" pos:end="405:21">bdrv_pwrite</name><argument_list pos:start="405:22" pos:end="407:27">(<argument pos:start="405:23" pos:end="405:30"><expr pos:start="405:23" pos:end="405:30"><name pos:start="405:23" pos:end="405:30"><name pos:start="405:23" pos:end="405:24">bs</name><operator pos:start="405:25" pos:end="405:26">-&gt;</operator><name pos:start="405:27" pos:end="405:30">file</name></name></expr></argument>, <argument pos:start="405:33" pos:end="405:75"><expr pos:start="405:33" pos:end="405:75"><call pos:start="405:33" pos:end="405:75"><name pos:start="405:33" pos:end="405:40">offsetof</name><argument_list pos:start="405:41" pos:end="405:75">(<argument pos:start="405:42" pos:end="405:51"><expr pos:start="405:42" pos:end="405:51"><name pos:start="405:42" pos:end="405:51">QCowHeader</name></expr></argument>, <argument pos:start="405:54" pos:end="405:74"><expr pos:start="405:54" pos:end="405:74"><name pos:start="405:54" pos:end="405:74">refcount_table_offset</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="407:9" pos:end="407:12"><expr pos:start="407:9" pos:end="407:12"><name pos:start="407:9" pos:end="407:12">data</name></expr></argument>, <argument pos:start="407:15" pos:end="407:26"><expr pos:start="407:15" pos:end="407:26"><sizeof pos:start="407:15" pos:end="407:26">sizeof<argument_list pos:start="407:21" pos:end="407:26">(<argument pos:start="407:22" pos:end="407:25"><expr pos:start="407:22" pos:end="407:25"><name pos:start="407:22" pos:end="407:25">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="409:5" pos:end="413:5"><if pos:start="409:5" pos:end="413:5">if <condition pos:start="409:8" pos:end="409:16">(<expr pos:start="409:9" pos:end="409:15"><name pos:start="409:9" pos:end="409:11">ret</name> <operator pos:start="409:13" pos:end="409:13">&lt;</operator> <literal type="number" pos:start="409:15" pos:end="409:15">0</literal></expr>)</condition> <block pos:start="409:18" pos:end="413:5">{<block_content pos:start="411:9" pos:end="411:24">

        <goto pos:start="411:9" pos:end="411:24">goto <name pos:start="411:14" pos:end="411:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="417:5" pos:end="417:33">/* And switch it in memory */</comment>

    <decl_stmt pos:start="419:5" pos:end="419:57"><decl pos:start="419:5" pos:end="419:56"><type pos:start="419:5" pos:end="419:12"><name pos:start="419:5" pos:end="419:12">uint64_t</name></type> <name pos:start="419:14" pos:end="419:29">old_table_offset</name> <init pos:start="419:31" pos:end="419:56">= <expr pos:start="419:33" pos:end="419:56"><name pos:start="419:33" pos:end="419:56"><name pos:start="419:33" pos:end="419:33">s</name><operator pos:start="419:34" pos:end="419:35">-&gt;</operator><name pos:start="419:36" pos:end="419:56">refcount_table_offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="421:5" pos:end="421:53"><decl pos:start="421:5" pos:end="421:52"><type pos:start="421:5" pos:end="421:12"><name pos:start="421:5" pos:end="421:12">uint64_t</name></type> <name pos:start="421:14" pos:end="421:27">old_table_size</name> <init pos:start="421:29" pos:end="421:52">= <expr pos:start="421:31" pos:end="421:52"><name pos:start="421:31" pos:end="421:52"><name pos:start="421:31" pos:end="421:31">s</name><operator pos:start="421:32" pos:end="421:33">-&gt;</operator><name pos:start="421:34" pos:end="421:52">refcount_table_size</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="425:5" pos:end="425:33"><expr pos:start="425:5" pos:end="425:32"><call pos:start="425:5" pos:end="425:32"><name pos:start="425:5" pos:end="425:13">qemu_free</name><argument_list pos:start="425:14" pos:end="425:32">(<argument pos:start="425:15" pos:end="425:31"><expr pos:start="425:15" pos:end="425:31"><name pos:start="425:15" pos:end="425:31"><name pos:start="425:15" pos:end="425:15">s</name><operator pos:start="425:16" pos:end="425:17">-&gt;</operator><name pos:start="425:18" pos:end="425:31">refcount_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:34"><expr pos:start="427:5" pos:end="427:33"><name pos:start="427:5" pos:end="427:21"><name pos:start="427:5" pos:end="427:5">s</name><operator pos:start="427:6" pos:end="427:7">-&gt;</operator><name pos:start="427:8" pos:end="427:21">refcount_table</name></name> <operator pos:start="427:23" pos:end="427:23">=</operator> <name pos:start="427:25" pos:end="427:33">new_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:40"><expr pos:start="429:5" pos:end="429:39"><name pos:start="429:5" pos:end="429:26"><name pos:start="429:5" pos:end="429:5">s</name><operator pos:start="429:6" pos:end="429:7">-&gt;</operator><name pos:start="429:8" pos:end="429:26">refcount_table_size</name></name> <operator pos:start="429:28" pos:end="429:28">=</operator> <name pos:start="429:30" pos:end="429:39">table_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:44"><expr pos:start="431:5" pos:end="431:43"><name pos:start="431:5" pos:end="431:28"><name pos:start="431:5" pos:end="431:5">s</name><operator pos:start="431:6" pos:end="431:7">-&gt;</operator><name pos:start="431:8" pos:end="431:28">refcount_table_offset</name></name> <operator pos:start="431:30" pos:end="431:30">=</operator> <name pos:start="431:32" pos:end="431:43">table_offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="435:5" pos:end="435:73">/* Free old table. Remember, we must not change free_cluster_index */</comment>

    <decl_stmt pos:start="437:5" pos:end="437:60"><decl pos:start="437:5" pos:end="437:59"><type pos:start="437:5" pos:end="437:12"><name pos:start="437:5" pos:end="437:12">uint64_t</name></type> <name pos:start="437:14" pos:end="437:35">old_free_cluster_index</name> <init pos:start="437:37" pos:end="437:59">= <expr pos:start="437:39" pos:end="437:59"><name pos:start="437:39" pos:end="437:59"><name pos:start="437:39" pos:end="437:39">s</name><operator pos:start="437:40" pos:end="437:41">-&gt;</operator><name pos:start="437:42" pos:end="437:59">free_cluster_index</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:81"><expr pos:start="439:5" pos:end="439:80"><call pos:start="439:5" pos:end="439:80"><name pos:start="439:5" pos:end="439:23">qcow2_free_clusters</name><argument_list pos:start="439:24" pos:end="439:80">(<argument pos:start="439:25" pos:end="439:26"><expr pos:start="439:25" pos:end="439:26"><name pos:start="439:25" pos:end="439:26">bs</name></expr></argument>, <argument pos:start="439:29" pos:end="439:44"><expr pos:start="439:29" pos:end="439:44"><name pos:start="439:29" pos:end="439:44">old_table_offset</name></expr></argument>, <argument pos:start="439:47" pos:end="439:79"><expr pos:start="439:47" pos:end="439:79"><name pos:start="439:47" pos:end="439:60">old_table_size</name> <operator pos:start="439:62" pos:end="439:62">*</operator> <sizeof pos:start="439:64" pos:end="439:79">sizeof<argument_list pos:start="439:70" pos:end="439:79">(<argument pos:start="439:71" pos:end="439:78"><expr pos:start="439:71" pos:end="439:78"><name pos:start="439:71" pos:end="439:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:51"><expr pos:start="441:5" pos:end="441:50"><name pos:start="441:5" pos:end="441:25"><name pos:start="441:5" pos:end="441:5">s</name><operator pos:start="441:6" pos:end="441:7">-&gt;</operator><name pos:start="441:8" pos:end="441:25">free_cluster_index</name></name> <operator pos:start="441:27" pos:end="441:27">=</operator> <name pos:start="441:29" pos:end="441:50">old_free_cluster_index</name></expr>;</expr_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:45"><expr pos:start="445:5" pos:end="445:44"><name pos:start="445:5" pos:end="445:7">ret</name> <operator pos:start="445:9" pos:end="445:9">=</operator> <call pos:start="445:11" pos:end="445:44"><name pos:start="445:11" pos:end="445:29">load_refcount_block</name><argument_list pos:start="445:30" pos:end="445:44">(<argument pos:start="445:31" pos:end="445:32"><expr pos:start="445:31" pos:end="445:32"><name pos:start="445:31" pos:end="445:32">bs</name></expr></argument>, <argument pos:start="445:35" pos:end="445:43"><expr pos:start="445:35" pos:end="445:43"><name pos:start="445:35" pos:end="445:43">new_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="447:5" pos:end="451:5"><if pos:start="447:5" pos:end="451:5">if <condition pos:start="447:8" pos:end="447:16">(<expr pos:start="447:9" pos:end="447:15"><name pos:start="447:9" pos:end="447:11">ret</name> <operator pos:start="447:13" pos:end="447:13">&lt;</operator> <literal type="number" pos:start="447:15" pos:end="447:15">0</literal></expr>)</condition> <block pos:start="447:18" pos:end="451:5">{<block_content pos:start="449:9" pos:end="449:24">

        <goto pos:start="449:9" pos:end="449:24">goto <name pos:start="449:14" pos:end="449:23">fail_block</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="455:5" pos:end="455:21">return <expr pos:start="455:12" pos:end="455:20"><name pos:start="455:12" pos:end="455:20">new_block</name></expr>;</return>



<label pos:start="459:1" pos:end="459:11"><name pos:start="459:1" pos:end="459:10">fail_table</name>:</label>

    <expr_stmt pos:start="461:5" pos:end="461:25"><expr pos:start="461:5" pos:end="461:24"><call pos:start="461:5" pos:end="461:24"><name pos:start="461:5" pos:end="461:13">qemu_free</name><argument_list pos:start="461:14" pos:end="461:24">(<argument pos:start="461:15" pos:end="461:23"><expr pos:start="461:15" pos:end="461:23"><name pos:start="461:15" pos:end="461:23">new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="463:1" pos:end="463:11"><name pos:start="463:1" pos:end="463:10">fail_block</name>:</label>

    <expr_stmt pos:start="465:5" pos:end="465:39"><expr pos:start="465:5" pos:end="465:38"><name pos:start="465:5" pos:end="465:34"><name pos:start="465:5" pos:end="465:5">s</name><operator pos:start="465:6" pos:end="465:7">-&gt;</operator><name pos:start="465:8" pos:end="465:34">refcount_block_cache_offset</name></name> <operator pos:start="465:36" pos:end="465:36">=</operator> <literal type="number" pos:start="465:38" pos:end="465:38">0</literal></expr>;</expr_stmt>

    <return pos:start="467:5" pos:end="467:15">return <expr pos:start="467:12" pos:end="467:14"><name pos:start="467:12" pos:end="467:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
