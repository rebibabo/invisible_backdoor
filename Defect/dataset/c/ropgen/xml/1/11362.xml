<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11362.c" pos:tabs="8"><function pos:start="1:1" pos:end="461:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">img_bench</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:29"><decl pos:start="1:22" pos:end="1:29"><type pos:start="1:22" pos:end="1:29"><name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:29">argc</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier><modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="461:1">{<block_content pos:start="5:5" pos:end="459:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">fmt</name> <init pos:start="7:21" pos:end="7:26">= <expr pos:start="7:23" pos:end="7:26"><name pos:start="7:23" pos:end="7:26">NULL</name></expr></init></decl>, <decl pos:start="7:29" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:37">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">quiet</name> <init pos:start="9:16" pos:end="9:22">= <expr pos:start="9:18" pos:end="9:22"><name pos:start="9:18" pos:end="9:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:19">image_opts</name> <init pos:start="11:21" pos:end="11:27">= <expr pos:start="11:23" pos:end="11:27"><name pos:start="11:23" pos:end="11:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:17">is_write</name> <init pos:start="13:19" pos:end="13:25">= <expr pos:start="13:21" pos:end="13:25"><name pos:start="13:21" pos:end="13:25">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">count</name> <init pos:start="15:15" pos:end="15:21">= <expr pos:start="15:17" pos:end="15:21"><literal type="number" pos:start="15:17" pos:end="15:21">75000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">depth</name> <init pos:start="17:15" pos:end="17:18">= <expr pos:start="17:17" pos:end="17:18"><literal type="number" pos:start="17:17" pos:end="17:18">64</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:18">offset</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:18">bufsize</name> <init pos:start="21:20" pos:end="21:25">= <expr pos:start="21:22" pos:end="21:25"><literal type="number" pos:start="21:22" pos:end="21:25">4096</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">pattern</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">size_t</name></type> <name pos:start="25:12" pos:end="25:15">step</name> <init pos:start="25:17" pos:end="25:19">= <expr pos:start="25:19" pos:end="25:19"><literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:22">flush_interval</name> <init pos:start="27:24" pos:end="27:26">= <expr pos:start="27:26" pos:end="27:26"><literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:31"><decl pos:start="29:5" pos:end="29:30"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">bool</name></type> <name pos:start="29:10" pos:end="29:23">drain_on_flush</name> <init pos:start="29:25" pos:end="29:30">= <expr pos:start="29:27" pos:end="29:30"><name pos:start="29:27" pos:end="29:30">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:11">int64_t</name></type> <name pos:start="31:13" pos:end="31:22">image_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:29"><decl pos:start="33:5" pos:end="33:28"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">BlockBackend</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:21">blk</name> <init pos:start="33:23" pos:end="33:28">= <expr pos:start="33:25" pos:end="33:28"><name pos:start="33:25" pos:end="33:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:13">BenchData</name></type> <name pos:start="35:15" pos:end="35:18">data</name> <init pos:start="35:20" pos:end="35:23">= <expr pos:start="35:22" pos:end="35:23"><block pos:start="35:22" pos:end="35:23">{}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:18"><decl pos:start="37:5" pos:end="37:17"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:13">flags</name> <init pos:start="37:15" pos:end="37:17">= <expr pos:start="37:17" pos:end="37:17"><literal type="number" pos:start="37:17" pos:end="37:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:30"><decl pos:start="39:5" pos:end="39:29"><type pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:8">bool</name></type> <name pos:start="39:10" pos:end="39:21">writethrough</name> <init pos:start="39:23" pos:end="39:29">= <expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:29">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:26"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:10">struct</name> <name pos:start="41:12" pos:end="41:18">timeval</name></name></type> <name pos:start="41:20" pos:end="41:21">t1</name></decl>, <decl pos:start="41:24" pos:end="41:25"><type ref="prev" pos:start="41:5" pos:end="41:18"/><name pos:start="41:24" pos:end="41:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:10"><decl pos:start="43:5" pos:end="43:9"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:9">i</name></decl>;</decl_stmt>



    <for pos:start="47:5" pos:end="301:5">for <control pos:start="47:9" pos:end="47:12">(<init pos:start="47:10" pos:end="47:10">;</init><condition pos:start="47:11" pos:end="47:11">;</condition><incr/>)</control> <block pos:start="47:14" pos:end="301:5">{<block_content pos:start="49:9" pos:end="299:9">

        <decl_stmt pos:start="49:9" pos:end="63:10"><decl pos:start="49:9" pos:end="63:9"><type pos:start="49:9" pos:end="49:34"><specifier pos:start="49:9" pos:end="49:14">static</specifier> <specifier pos:start="49:16" pos:end="49:20">const</specifier> <name pos:start="49:22" pos:end="49:34"><name pos:start="49:22" pos:end="49:27">struct</name> <name pos:start="49:29" pos:end="49:34">option</name></name></type> <name pos:start="49:36" pos:end="49:49"><name pos:start="49:36" pos:end="49:47">long_options</name><index pos:start="49:48" pos:end="49:49">[]</index></name> <init pos:start="49:51" pos:end="63:9">= <expr pos:start="49:53" pos:end="63:9"><block pos:start="49:53" pos:end="63:9">{

            <expr pos:start="51:13" pos:end="51:41"><block pos:start="51:13" pos:end="51:41">{<expr pos:start="51:14" pos:end="51:19"><literal type="string" pos:start="51:14" pos:end="51:19">"help"</literal></expr>, <expr pos:start="51:22" pos:end="51:32"><name pos:start="51:22" pos:end="51:32">no_argument</name></expr>, <expr pos:start="51:35" pos:end="51:35"><literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr>, <expr pos:start="51:38" pos:end="51:40"><literal type="char" pos:start="51:38" pos:end="51:40">'h'</literal></expr>}</block></expr>,

            <expr pos:start="53:13" pos:end="53:75"><block pos:start="53:13" pos:end="53:75">{<expr pos:start="53:14" pos:end="53:29"><literal type="string" pos:start="53:14" pos:end="53:29">"flush-interval"</literal></expr>, <expr pos:start="53:32" pos:end="53:48"><name pos:start="53:32" pos:end="53:48">required_argument</name></expr>, <expr pos:start="53:51" pos:end="53:51"><literal type="number" pos:start="53:51" pos:end="53:51">0</literal></expr>, <expr pos:start="53:54" pos:end="53:74"><name pos:start="53:54" pos:end="53:74">OPTION_FLUSH_INTERVAL</name></expr>}</block></expr>,

            <expr pos:start="55:13" pos:end="55:61"><block pos:start="55:13" pos:end="55:61">{<expr pos:start="55:14" pos:end="55:25"><literal type="string" pos:start="55:14" pos:end="55:25">"image-opts"</literal></expr>, <expr pos:start="55:28" pos:end="55:38"><name pos:start="55:28" pos:end="55:38">no_argument</name></expr>, <expr pos:start="55:41" pos:end="55:41"><literal type="number" pos:start="55:41" pos:end="55:41">0</literal></expr>, <expr pos:start="55:44" pos:end="55:60"><name pos:start="55:44" pos:end="55:60">OPTION_IMAGE_OPTS</name></expr>}</block></expr>,

            <expr pos:start="57:13" pos:end="57:61"><block pos:start="57:13" pos:end="57:61">{<expr pos:start="57:14" pos:end="57:22"><literal type="string" pos:start="57:14" pos:end="57:22">"pattern"</literal></expr>, <expr pos:start="57:25" pos:end="57:41"><name pos:start="57:25" pos:end="57:41">required_argument</name></expr>, <expr pos:start="57:44" pos:end="57:44"><literal type="number" pos:start="57:44" pos:end="57:44">0</literal></expr>, <expr pos:start="57:47" pos:end="57:60"><name pos:start="57:47" pos:end="57:60">OPTION_PATTERN</name></expr>}</block></expr>,

            <expr pos:start="59:13" pos:end="59:57"><block pos:start="59:13" pos:end="59:57">{<expr pos:start="59:14" pos:end="59:23"><literal type="string" pos:start="59:14" pos:end="59:23">"no-drain"</literal></expr>, <expr pos:start="59:26" pos:end="59:36"><name pos:start="59:26" pos:end="59:36">no_argument</name></expr>, <expr pos:start="59:39" pos:end="59:39"><literal type="number" pos:start="59:39" pos:end="59:39">0</literal></expr>, <expr pos:start="59:42" pos:end="59:56"><name pos:start="59:42" pos:end="59:56">OPTION_NO_DRAIN</name></expr>}</block></expr>,

            <expr pos:start="61:13" pos:end="61:24"><block pos:start="61:13" pos:end="61:24">{<expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>, <expr pos:start="61:17" pos:end="61:17"><literal type="number" pos:start="61:17" pos:end="61:17">0</literal></expr>, <expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr>, <expr pos:start="61:23" pos:end="61:23"><literal type="number" pos:start="61:23" pos:end="61:23">0</literal></expr>}</block></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:78"><expr pos:start="65:9" pos:end="65:77"><name pos:start="65:9" pos:end="65:9">c</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:77"><name pos:start="65:13" pos:end="65:23">getopt_long</name><argument_list pos:start="65:24" pos:end="65:77">(<argument pos:start="65:25" pos:end="65:28"><expr pos:start="65:25" pos:end="65:28"><name pos:start="65:25" pos:end="65:28">argc</name></expr></argument>, <argument pos:start="65:31" pos:end="65:34"><expr pos:start="65:31" pos:end="65:34"><name pos:start="65:31" pos:end="65:34">argv</name></expr></argument>, <argument pos:start="65:37" pos:end="65:56"><expr pos:start="65:37" pos:end="65:56"><literal type="string" pos:start="65:37" pos:end="65:56">"hc:d:f:no:qs:S:t:w"</literal></expr></argument>, <argument pos:start="65:59" pos:end="65:70"><expr pos:start="65:59" pos:end="65:70"><name pos:start="65:59" pos:end="65:70">long_options</name></expr></argument>, <argument pos:start="65:73" pos:end="65:76"><expr pos:start="65:73" pos:end="65:76"><name pos:start="65:73" pos:end="65:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:13">c</name> <operator pos:start="67:15" pos:end="67:16">==</operator> <operator pos:start="67:18" pos:end="67:18">-</operator><literal type="number" pos:start="67:19" pos:end="67:19">1</literal></expr>)</condition> <block pos:start="67:22" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:18">

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="75:9" pos:end="299:9">switch <condition pos:start="75:16" pos:end="75:18">(<expr pos:start="75:17" pos:end="75:17"><name pos:start="75:17" pos:end="75:17">c</name></expr>)</condition> <block pos:start="75:20" pos:end="299:9">{<block_content pos:start="77:9" pos:end="297:18">

        <case pos:start="77:9" pos:end="77:17">case <expr pos:start="77:14" pos:end="77:16"><literal type="char" pos:start="77:14" pos:end="77:16">'h'</literal></expr>:</case>

        <case pos:start="79:9" pos:end="79:17">case <expr pos:start="79:14" pos:end="79:16"><literal type="char" pos:start="79:14" pos:end="79:16">'?'</literal></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:19"><expr pos:start="81:13" pos:end="81:18"><call pos:start="81:13" pos:end="81:18"><name pos:start="81:13" pos:end="81:16">help</name><argument_list pos:start="81:17" pos:end="81:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:17">case <expr pos:start="85:14" pos:end="85:16"><literal type="char" pos:start="85:14" pos:end="85:16">'c'</literal></expr>:</case>

        <block pos:start="87:9" pos:end="105:9">{<block_content pos:start="89:13" pos:end="103:18">

            <decl_stmt pos:start="89:13" pos:end="89:30"><decl pos:start="89:13" pos:end="89:29"><type pos:start="89:13" pos:end="89:25"><name pos:start="89:13" pos:end="89:20">unsigned</name> <name pos:start="89:22" pos:end="89:25">long</name></type> <name pos:start="89:27" pos:end="89:29">res</name></decl>;</decl_stmt>



            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:73">(<expr pos:start="93:17" pos:end="93:72"><call pos:start="93:17" pos:end="93:51"><name pos:start="93:17" pos:end="93:28">qemu_strtoul</name><argument_list pos:start="93:29" pos:end="93:51">(<argument pos:start="93:30" pos:end="93:35"><expr pos:start="93:30" pos:end="93:35"><name pos:start="93:30" pos:end="93:35">optarg</name></expr></argument>, <argument pos:start="93:38" pos:end="93:41"><expr pos:start="93:38" pos:end="93:41"><name pos:start="93:38" pos:end="93:41">NULL</name></expr></argument>, <argument pos:start="93:44" pos:end="93:44"><expr pos:start="93:44" pos:end="93:44"><literal type="number" pos:start="93:44" pos:end="93:44">0</literal></expr></argument>, <argument pos:start="93:47" pos:end="93:50"><expr pos:start="93:47" pos:end="93:50"><operator pos:start="93:47" pos:end="93:47">&amp;</operator><name pos:start="93:48" pos:end="93:50">res</name></expr></argument>)</argument_list></call> <operator pos:start="93:53" pos:end="93:53">&lt;</operator> <literal type="number" pos:start="93:55" pos:end="93:55">0</literal> <operator pos:start="93:57" pos:end="93:58">||</operator> <name pos:start="93:60" pos:end="93:62">res</name> <operator pos:start="93:64" pos:end="93:64">&gt;</operator> <name pos:start="93:66" pos:end="93:72">INT_MAX</name></expr>)</condition> <block pos:start="93:75" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:25">

                <expr_stmt pos:start="95:17" pos:end="95:64"><expr pos:start="95:17" pos:end="95:63"><call pos:start="95:17" pos:end="95:63"><name pos:start="95:17" pos:end="95:28">error_report</name><argument_list pos:start="95:29" pos:end="95:63">(<argument pos:start="95:30" pos:end="95:62"><expr pos:start="95:30" pos:end="95:62"><literal type="string" pos:start="95:30" pos:end="95:62">"Invalid request count specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="97:17" pos:end="97:25">return <expr pos:start="97:24" pos:end="97:24"><literal type="number" pos:start="97:24" pos:end="97:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:24"><expr pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:17">count</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <name pos:start="101:21" pos:end="101:23">res</name></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        </block_content>}</block>

        <case pos:start="107:9" pos:end="107:17">case <expr pos:start="107:14" pos:end="107:16"><literal type="char" pos:start="107:14" pos:end="107:16">'d'</literal></expr>:</case>

        <block pos:start="109:9" pos:end="127:9">{<block_content pos:start="111:13" pos:end="125:18">

            <decl_stmt pos:start="111:13" pos:end="111:30"><decl pos:start="111:13" pos:end="111:29"><type pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:20">unsigned</name> <name pos:start="111:22" pos:end="111:25">long</name></type> <name pos:start="111:27" pos:end="111:29">res</name></decl>;</decl_stmt>



            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:73">(<expr pos:start="115:17" pos:end="115:72"><call pos:start="115:17" pos:end="115:51"><name pos:start="115:17" pos:end="115:28">qemu_strtoul</name><argument_list pos:start="115:29" pos:end="115:51">(<argument pos:start="115:30" pos:end="115:35"><expr pos:start="115:30" pos:end="115:35"><name pos:start="115:30" pos:end="115:35">optarg</name></expr></argument>, <argument pos:start="115:38" pos:end="115:41"><expr pos:start="115:38" pos:end="115:41"><name pos:start="115:38" pos:end="115:41">NULL</name></expr></argument>, <argument pos:start="115:44" pos:end="115:44"><expr pos:start="115:44" pos:end="115:44"><literal type="number" pos:start="115:44" pos:end="115:44">0</literal></expr></argument>, <argument pos:start="115:47" pos:end="115:50"><expr pos:start="115:47" pos:end="115:50"><operator pos:start="115:47" pos:end="115:47">&amp;</operator><name pos:start="115:48" pos:end="115:50">res</name></expr></argument>)</argument_list></call> <operator pos:start="115:53" pos:end="115:53">&lt;</operator> <literal type="number" pos:start="115:55" pos:end="115:55">0</literal> <operator pos:start="115:57" pos:end="115:58">||</operator> <name pos:start="115:60" pos:end="115:62">res</name> <operator pos:start="115:64" pos:end="115:64">&gt;</operator> <name pos:start="115:66" pos:end="115:72">INT_MAX</name></expr>)</condition> <block pos:start="115:75" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:25">

                <expr_stmt pos:start="117:17" pos:end="117:62"><expr pos:start="117:17" pos:end="117:61"><call pos:start="117:17" pos:end="117:61"><name pos:start="117:17" pos:end="117:28">error_report</name><argument_list pos:start="117:29" pos:end="117:61">(<argument pos:start="117:30" pos:end="117:60"><expr pos:start="117:30" pos:end="117:60"><literal type="string" pos:start="117:30" pos:end="117:60">"Invalid queue depth specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="119:17" pos:end="119:25">return <expr pos:start="119:24" pos:end="119:24"><literal type="number" pos:start="119:24" pos:end="119:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:24"><expr pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:17">depth</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <name pos:start="123:21" pos:end="123:23">res</name></expr>;</expr_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        </block_content>}</block>

        <case pos:start="129:9" pos:end="129:17">case <expr pos:start="129:14" pos:end="129:16"><literal type="char" pos:start="129:14" pos:end="129:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="131:13" pos:end="131:25"><expr pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:15">fmt</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:17">case <expr pos:start="135:14" pos:end="135:16"><literal type="char" pos:start="135:14" pos:end="135:16">'n'</literal></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:39"><expr pos:start="137:13" pos:end="137:38"><name pos:start="137:13" pos:end="137:17">flags</name> <operator pos:start="137:19" pos:end="137:20">|=</operator> <name pos:start="137:22" pos:end="137:38">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        <case pos:start="141:9" pos:end="141:17">case <expr pos:start="141:14" pos:end="141:16"><literal type="char" pos:start="141:14" pos:end="141:16">'o'</literal></expr>:</case>

        <block pos:start="143:9" pos:end="157:9">{<block_content pos:start="145:13" pos:end="155:18">

            <expr_stmt pos:start="145:13" pos:end="145:36"><expr pos:start="145:13" pos:end="145:35"><name pos:start="145:13" pos:end="145:18">offset</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <call pos:start="145:22" pos:end="145:35"><name pos:start="145:22" pos:end="145:27">cvtnum</name><argument_list pos:start="145:28" pos:end="145:35">(<argument pos:start="145:29" pos:end="145:34"><expr pos:start="145:29" pos:end="145:34"><name pos:start="145:29" pos:end="145:34">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="153:13"><if pos:start="147:13" pos:end="153:13">if <condition pos:start="147:16" pos:end="147:27">(<expr pos:start="147:17" pos:end="147:26"><name pos:start="147:17" pos:end="147:22">offset</name> <operator pos:start="147:24" pos:end="147:24">&lt;</operator> <literal type="number" pos:start="147:26" pos:end="147:26">0</literal></expr>)</condition> <block pos:start="147:29" pos:end="153:13">{<block_content pos:start="149:17" pos:end="151:25">

                <expr_stmt pos:start="149:17" pos:end="149:57"><expr pos:start="149:17" pos:end="149:56"><call pos:start="149:17" pos:end="149:56"><name pos:start="149:17" pos:end="149:28">error_report</name><argument_list pos:start="149:29" pos:end="149:56">(<argument pos:start="149:30" pos:end="149:55"><expr pos:start="149:30" pos:end="149:55"><literal type="string" pos:start="149:30" pos:end="149:55">"Invalid offset specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="151:17" pos:end="151:25">return <expr pos:start="151:24" pos:end="151:24"><literal type="number" pos:start="151:24" pos:end="151:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        </block_content>}</block>

            <break pos:start="159:13" pos:end="159:18">break;</break>

        <case pos:start="161:9" pos:end="161:17">case <expr pos:start="161:14" pos:end="161:16"><literal type="char" pos:start="161:14" pos:end="161:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="163:13" pos:end="163:25"><expr pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:17">quiet</name> <operator pos:start="163:19" pos:end="163:19">=</operator> <name pos:start="163:21" pos:end="163:24">true</name></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="167:17">case <expr pos:start="167:14" pos:end="167:16"><literal type="char" pos:start="167:14" pos:end="167:16">'s'</literal></expr>:</case>

        <block pos:start="169:9" pos:end="191:9">{<block_content pos:start="171:13" pos:end="189:18">

            <decl_stmt pos:start="171:13" pos:end="171:25"><decl pos:start="171:13" pos:end="171:24"><type pos:start="171:13" pos:end="171:19"><name pos:start="171:13" pos:end="171:19">int64_t</name></type> <name pos:start="171:21" pos:end="171:24">sval</name></decl>;</decl_stmt>



            <expr_stmt pos:start="175:13" pos:end="175:34"><expr pos:start="175:13" pos:end="175:33"><name pos:start="175:13" pos:end="175:16">sval</name> <operator pos:start="175:18" pos:end="175:18">=</operator> <call pos:start="175:20" pos:end="175:33"><name pos:start="175:20" pos:end="175:25">cvtnum</name><argument_list pos:start="175:26" pos:end="175:33">(<argument pos:start="175:27" pos:end="175:32"><expr pos:start="175:27" pos:end="175:32"><name pos:start="175:27" pos:end="175:32">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="183:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:43">(<expr pos:start="177:17" pos:end="177:42"><name pos:start="177:17" pos:end="177:34"><name pos:start="177:17" pos:end="177:20">sval</name> <argument_list type="generic" pos:start="177:22" pos:end="177:34">&lt; <argument pos:start="177:24" pos:end="177:32"><expr pos:start="177:24" pos:end="177:32"><literal type="number" pos:start="177:24" pos:end="177:24">0</literal> <operator pos:start="177:26" pos:end="177:27">||</operator> <name pos:start="177:29" pos:end="177:32">sval</name></expr></argument> &gt;</argument_list></name> <name pos:start="177:36" pos:end="177:42">INT_MAX</name></expr>)</condition> <block pos:start="177:45" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:25">

                <expr_stmt pos:start="179:17" pos:end="179:62"><expr pos:start="179:17" pos:end="179:61"><call pos:start="179:17" pos:end="179:61"><name pos:start="179:17" pos:end="179:28">error_report</name><argument_list pos:start="179:29" pos:end="179:61">(<argument pos:start="179:30" pos:end="179:60"><expr pos:start="179:30" pos:end="179:60"><literal type="string" pos:start="179:30" pos:end="179:60">"Invalid buffer size specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="181:17" pos:end="181:25">return <expr pos:start="181:24" pos:end="181:24"><literal type="number" pos:start="181:24" pos:end="181:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="187:13" pos:end="187:27"><expr pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:19">bufsize</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <name pos:start="187:23" pos:end="187:26">sval</name></expr>;</expr_stmt>

            <break pos:start="189:13" pos:end="189:18">break;</break>

        </block_content>}</block>

        <case pos:start="193:9" pos:end="193:17">case <expr pos:start="193:14" pos:end="193:16"><literal type="char" pos:start="193:14" pos:end="193:16">'S'</literal></expr>:</case>

        <block pos:start="195:9" pos:end="217:9">{<block_content pos:start="197:13" pos:end="215:18">

            <decl_stmt pos:start="197:13" pos:end="197:25"><decl pos:start="197:13" pos:end="197:24"><type pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:19">int64_t</name></type> <name pos:start="197:21" pos:end="197:24">sval</name></decl>;</decl_stmt>



            <expr_stmt pos:start="201:13" pos:end="201:34"><expr pos:start="201:13" pos:end="201:33"><name pos:start="201:13" pos:end="201:16">sval</name> <operator pos:start="201:18" pos:end="201:18">=</operator> <call pos:start="201:20" pos:end="201:33"><name pos:start="201:20" pos:end="201:25">cvtnum</name><argument_list pos:start="201:26" pos:end="201:33">(<argument pos:start="201:27" pos:end="201:32"><expr pos:start="201:27" pos:end="201:32"><name pos:start="201:27" pos:end="201:32">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="209:13"><if pos:start="203:13" pos:end="209:13">if <condition pos:start="203:16" pos:end="203:43">(<expr pos:start="203:17" pos:end="203:42"><name pos:start="203:17" pos:end="203:34"><name pos:start="203:17" pos:end="203:20">sval</name> <argument_list type="generic" pos:start="203:22" pos:end="203:34">&lt; <argument pos:start="203:24" pos:end="203:32"><expr pos:start="203:24" pos:end="203:32"><literal type="number" pos:start="203:24" pos:end="203:24">0</literal> <operator pos:start="203:26" pos:end="203:27">||</operator> <name pos:start="203:29" pos:end="203:32">sval</name></expr></argument> &gt;</argument_list></name> <name pos:start="203:36" pos:end="203:42">INT_MAX</name></expr>)</condition> <block pos:start="203:45" pos:end="209:13">{<block_content pos:start="205:17" pos:end="207:25">

                <expr_stmt pos:start="205:17" pos:end="205:60"><expr pos:start="205:17" pos:end="205:59"><call pos:start="205:17" pos:end="205:59"><name pos:start="205:17" pos:end="205:28">error_report</name><argument_list pos:start="205:29" pos:end="205:59">(<argument pos:start="205:30" pos:end="205:58"><expr pos:start="205:30" pos:end="205:58"><literal type="string" pos:start="205:30" pos:end="205:58">"Invalid step size specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="207:17" pos:end="207:25">return <expr pos:start="207:24" pos:end="207:24"><literal type="number" pos:start="207:24" pos:end="207:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="213:13" pos:end="213:24"><expr pos:start="213:13" pos:end="213:23"><name pos:start="213:13" pos:end="213:16">step</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <name pos:start="213:20" pos:end="213:23">sval</name></expr>;</expr_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        </block_content>}</block>

        <case pos:start="219:9" pos:end="219:17">case <expr pos:start="219:14" pos:end="219:16"><literal type="char" pos:start="219:14" pos:end="219:16">'t'</literal></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:71"><expr pos:start="221:13" pos:end="221:70"><name pos:start="221:13" pos:end="221:15">ret</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:70"><name pos:start="221:19" pos:end="221:39">bdrv_parse_cache_mode</name><argument_list pos:start="221:40" pos:end="221:70">(<argument pos:start="221:41" pos:end="221:46"><expr pos:start="221:41" pos:end="221:46"><name pos:start="221:41" pos:end="221:46">optarg</name></expr></argument>, <argument pos:start="221:49" pos:end="221:54"><expr pos:start="221:49" pos:end="221:54"><operator pos:start="221:49" pos:end="221:49">&amp;</operator><name pos:start="221:50" pos:end="221:54">flags</name></expr></argument>, <argument pos:start="221:57" pos:end="221:69"><expr pos:start="221:57" pos:end="221:69"><operator pos:start="221:57" pos:end="221:57">&amp;</operator><name pos:start="221:58" pos:end="221:69">writethrough</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="223:13" pos:end="231:13"><if pos:start="223:13" pos:end="231:13">if <condition pos:start="223:16" pos:end="223:24">(<expr pos:start="223:17" pos:end="223:23"><name pos:start="223:17" pos:end="223:19">ret</name> <operator pos:start="223:21" pos:end="223:21">&lt;</operator> <literal type="number" pos:start="223:23" pos:end="223:23">0</literal></expr>)</condition> <block pos:start="223:26" pos:end="231:13">{<block_content pos:start="225:17" pos:end="229:25">

                <expr_stmt pos:start="225:17" pos:end="225:51"><expr pos:start="225:17" pos:end="225:50"><call pos:start="225:17" pos:end="225:50"><name pos:start="225:17" pos:end="225:28">error_report</name><argument_list pos:start="225:29" pos:end="225:50">(<argument pos:start="225:30" pos:end="225:49"><expr pos:start="225:30" pos:end="225:49"><literal type="string" pos:start="225:30" pos:end="225:49">"Invalid cache mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:25"><expr pos:start="227:17" pos:end="227:24"><name pos:start="227:17" pos:end="227:19">ret</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <operator pos:start="227:23" pos:end="227:23">-</operator><literal type="number" pos:start="227:24" pos:end="227:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="229:17" pos:end="229:25">goto <name pos:start="229:22" pos:end="229:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="233:13" pos:end="233:18">break;</break>

        <case pos:start="235:9" pos:end="235:17">case <expr pos:start="235:14" pos:end="235:16"><literal type="char" pos:start="235:14" pos:end="235:16">'w'</literal></expr>:</case>

            <expr_stmt pos:start="237:13" pos:end="237:33"><expr pos:start="237:13" pos:end="237:32"><name pos:start="237:13" pos:end="237:17">flags</name> <operator pos:start="237:19" pos:end="237:20">|=</operator> <name pos:start="237:22" pos:end="237:32">BDRV_O_RDWR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:28"><expr pos:start="239:13" pos:end="239:27"><name pos:start="239:13" pos:end="239:20">is_write</name> <operator pos:start="239:22" pos:end="239:22">=</operator> <name pos:start="239:24" pos:end="239:27">true</name></expr>;</expr_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>

        <case pos:start="243:9" pos:end="243:28">case <expr pos:start="243:14" pos:end="243:27"><name pos:start="243:14" pos:end="243:27">OPTION_PATTERN</name></expr>:</case>

        <block pos:start="245:9" pos:end="263:9">{<block_content pos:start="247:13" pos:end="261:18">

            <decl_stmt pos:start="247:13" pos:end="247:30"><decl pos:start="247:13" pos:end="247:29"><type pos:start="247:13" pos:end="247:25"><name pos:start="247:13" pos:end="247:20">unsigned</name> <name pos:start="247:22" pos:end="247:25">long</name></type> <name pos:start="247:27" pos:end="247:29">res</name></decl>;</decl_stmt>



            <if_stmt pos:start="251:13" pos:end="257:13"><if pos:start="251:13" pos:end="257:13">if <condition pos:start="251:16" pos:end="251:70">(<expr pos:start="251:17" pos:end="251:69"><call pos:start="251:17" pos:end="251:51"><name pos:start="251:17" pos:end="251:28">qemu_strtoul</name><argument_list pos:start="251:29" pos:end="251:51">(<argument pos:start="251:30" pos:end="251:35"><expr pos:start="251:30" pos:end="251:35"><name pos:start="251:30" pos:end="251:35">optarg</name></expr></argument>, <argument pos:start="251:38" pos:end="251:41"><expr pos:start="251:38" pos:end="251:41"><name pos:start="251:38" pos:end="251:41">NULL</name></expr></argument>, <argument pos:start="251:44" pos:end="251:44"><expr pos:start="251:44" pos:end="251:44"><literal type="number" pos:start="251:44" pos:end="251:44">0</literal></expr></argument>, <argument pos:start="251:47" pos:end="251:50"><expr pos:start="251:47" pos:end="251:50"><operator pos:start="251:47" pos:end="251:47">&amp;</operator><name pos:start="251:48" pos:end="251:50">res</name></expr></argument>)</argument_list></call> <operator pos:start="251:53" pos:end="251:53">&lt;</operator> <literal type="number" pos:start="251:55" pos:end="251:55">0</literal> <operator pos:start="251:57" pos:end="251:58">||</operator> <name pos:start="251:60" pos:end="251:62">res</name> <operator pos:start="251:64" pos:end="251:64">&gt;</operator> <literal type="number" pos:start="251:66" pos:end="251:69">0xff</literal></expr>)</condition> <block pos:start="251:72" pos:end="257:13">{<block_content pos:start="253:17" pos:end="255:25">

                <expr_stmt pos:start="253:17" pos:end="253:63"><expr pos:start="253:17" pos:end="253:62"><call pos:start="253:17" pos:end="253:62"><name pos:start="253:17" pos:end="253:28">error_report</name><argument_list pos:start="253:29" pos:end="253:62">(<argument pos:start="253:30" pos:end="253:61"><expr pos:start="253:30" pos:end="253:61"><literal type="string" pos:start="253:30" pos:end="253:61">"Invalid pattern byte specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="255:17" pos:end="255:25">return <expr pos:start="255:24" pos:end="255:24"><literal type="number" pos:start="255:24" pos:end="255:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:26"><expr pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:19">pattern</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <name pos:start="259:23" pos:end="259:25">res</name></expr>;</expr_stmt>

            <break pos:start="261:13" pos:end="261:18">break;</break>

        </block_content>}</block>

        <case pos:start="265:9" pos:end="265:35">case <expr pos:start="265:14" pos:end="265:34"><name pos:start="265:14" pos:end="265:34">OPTION_FLUSH_INTERVAL</name></expr>:</case>

        <block pos:start="267:9" pos:end="285:9">{<block_content pos:start="269:13" pos:end="283:18">

            <decl_stmt pos:start="269:13" pos:end="269:30"><decl pos:start="269:13" pos:end="269:29"><type pos:start="269:13" pos:end="269:25"><name pos:start="269:13" pos:end="269:20">unsigned</name> <name pos:start="269:22" pos:end="269:25">long</name></type> <name pos:start="269:27" pos:end="269:29">res</name></decl>;</decl_stmt>



            <if_stmt pos:start="273:13" pos:end="279:13"><if pos:start="273:13" pos:end="279:13">if <condition pos:start="273:16" pos:end="273:73">(<expr pos:start="273:17" pos:end="273:72"><call pos:start="273:17" pos:end="273:51"><name pos:start="273:17" pos:end="273:28">qemu_strtoul</name><argument_list pos:start="273:29" pos:end="273:51">(<argument pos:start="273:30" pos:end="273:35"><expr pos:start="273:30" pos:end="273:35"><name pos:start="273:30" pos:end="273:35">optarg</name></expr></argument>, <argument pos:start="273:38" pos:end="273:41"><expr pos:start="273:38" pos:end="273:41"><name pos:start="273:38" pos:end="273:41">NULL</name></expr></argument>, <argument pos:start="273:44" pos:end="273:44"><expr pos:start="273:44" pos:end="273:44"><literal type="number" pos:start="273:44" pos:end="273:44">0</literal></expr></argument>, <argument pos:start="273:47" pos:end="273:50"><expr pos:start="273:47" pos:end="273:50"><operator pos:start="273:47" pos:end="273:47">&amp;</operator><name pos:start="273:48" pos:end="273:50">res</name></expr></argument>)</argument_list></call> <operator pos:start="273:53" pos:end="273:53">&lt;</operator> <literal type="number" pos:start="273:55" pos:end="273:55">0</literal> <operator pos:start="273:57" pos:end="273:58">||</operator> <name pos:start="273:60" pos:end="273:62">res</name> <operator pos:start="273:64" pos:end="273:64">&gt;</operator> <name pos:start="273:66" pos:end="273:72">INT_MAX</name></expr>)</condition> <block pos:start="273:75" pos:end="279:13">{<block_content pos:start="275:17" pos:end="277:25">

                <expr_stmt pos:start="275:17" pos:end="275:65"><expr pos:start="275:17" pos:end="275:64"><call pos:start="275:17" pos:end="275:64"><name pos:start="275:17" pos:end="275:28">error_report</name><argument_list pos:start="275:29" pos:end="275:64">(<argument pos:start="275:30" pos:end="275:63"><expr pos:start="275:30" pos:end="275:63"><literal type="string" pos:start="275:30" pos:end="275:63">"Invalid flush interval specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="277:17" pos:end="277:25">return <expr pos:start="277:24" pos:end="277:24"><literal type="number" pos:start="277:24" pos:end="277:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:33"><expr pos:start="281:13" pos:end="281:32"><name pos:start="281:13" pos:end="281:26">flush_interval</name> <operator pos:start="281:28" pos:end="281:28">=</operator> <name pos:start="281:30" pos:end="281:32">res</name></expr>;</expr_stmt>

            <break pos:start="283:13" pos:end="283:18">break;</break>

        </block_content>}</block>

        <case pos:start="287:9" pos:end="287:29">case <expr pos:start="287:14" pos:end="287:28"><name pos:start="287:14" pos:end="287:28">OPTION_NO_DRAIN</name></expr>:</case>

            <expr_stmt pos:start="289:13" pos:end="289:35"><expr pos:start="289:13" pos:end="289:34"><name pos:start="289:13" pos:end="289:26">drain_on_flush</name> <operator pos:start="289:28" pos:end="289:28">=</operator> <name pos:start="289:30" pos:end="289:34">false</name></expr>;</expr_stmt>

            <break pos:start="291:13" pos:end="291:18">break;</break>

        <case pos:start="293:9" pos:end="293:31">case <expr pos:start="293:14" pos:end="293:30"><name pos:start="293:14" pos:end="293:30">OPTION_IMAGE_OPTS</name></expr>:</case>

            <expr_stmt pos:start="295:13" pos:end="295:30"><expr pos:start="295:13" pos:end="295:29"><name pos:start="295:13" pos:end="295:22">image_opts</name> <operator pos:start="295:24" pos:end="295:24">=</operator> <name pos:start="295:26" pos:end="295:29">true</name></expr>;</expr_stmt>

            <break pos:start="297:13" pos:end="297:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <if_stmt pos:start="305:5" pos:end="309:5"><if pos:start="305:5" pos:end="309:5">if <condition pos:start="305:8" pos:end="305:27">(<expr pos:start="305:9" pos:end="305:26"><name pos:start="305:9" pos:end="305:14">optind</name> <operator pos:start="305:16" pos:end="305:17">!=</operator> <name pos:start="305:19" pos:end="305:22">argc</name> <operator pos:start="305:24" pos:end="305:24">-</operator> <literal type="number" pos:start="305:26" pos:end="305:26">1</literal></expr>)</condition> <block pos:start="305:29" pos:end="309:5">{<block_content pos:start="307:9" pos:end="307:52">

        <expr_stmt pos:start="307:9" pos:end="307:52"><expr pos:start="307:9" pos:end="307:51"><call pos:start="307:9" pos:end="307:51"><name pos:start="307:9" pos:end="307:18">error_exit</name><argument_list pos:start="307:19" pos:end="307:51">(<argument pos:start="307:20" pos:end="307:50"><expr pos:start="307:20" pos:end="307:50"><literal type="string" pos:start="307:20" pos:end="307:50">"Expecting one image file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:30"><expr pos:start="311:5" pos:end="311:29"><name pos:start="311:5" pos:end="311:12">filename</name> <operator pos:start="311:14" pos:end="311:14">=</operator> <name pos:start="311:16" pos:end="311:29"><name pos:start="311:16" pos:end="311:19">argv</name><index pos:start="311:20" pos:end="311:29">[<expr pos:start="311:21" pos:end="311:28"><name pos:start="311:21" pos:end="311:24">argc</name> <operator pos:start="311:26" pos:end="311:26">-</operator> <literal type="number" pos:start="311:28" pos:end="311:28">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="315:5" pos:end="323:5"><if pos:start="315:5" pos:end="323:5">if <condition pos:start="315:8" pos:end="315:36">(<expr pos:start="315:9" pos:end="315:35"><operator pos:start="315:9" pos:end="315:9">!</operator><name pos:start="315:10" pos:end="315:17">is_write</name> <operator pos:start="315:19" pos:end="315:20">&amp;&amp;</operator> <name pos:start="315:22" pos:end="315:35">flush_interval</name></expr>)</condition> <block pos:start="315:38" pos:end="323:5">{<block_content pos:start="317:9" pos:end="321:17">

        <expr_stmt pos:start="317:9" pos:end="317:74"><expr pos:start="317:9" pos:end="317:73"><call pos:start="317:9" pos:end="317:73"><name pos:start="317:9" pos:end="317:20">error_report</name><argument_list pos:start="317:21" pos:end="317:73">(<argument pos:start="317:22" pos:end="317:72"><expr pos:start="317:22" pos:end="317:72"><literal type="string" pos:start="317:22" pos:end="317:72">"--flush-interval is only available in write tests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:17"><expr pos:start="319:9" pos:end="319:16"><name pos:start="319:9" pos:end="319:11">ret</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <operator pos:start="319:15" pos:end="319:15">-</operator><literal type="number" pos:start="319:16" pos:end="319:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="321:9" pos:end="321:17">goto <name pos:start="321:14" pos:end="321:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="325:5" pos:end="333:5"><if pos:start="325:5" pos:end="333:5">if <condition pos:start="325:8" pos:end="325:49">(<expr pos:start="325:9" pos:end="325:48"><name pos:start="325:9" pos:end="325:22">flush_interval</name> <operator pos:start="325:24" pos:end="325:25">&amp;&amp;</operator> <name pos:start="325:27" pos:end="325:40">flush_interval</name> <operator pos:start="325:42" pos:end="325:42">&lt;</operator> <name pos:start="325:44" pos:end="325:48">depth</name></expr>)</condition> <block pos:start="325:51" pos:end="333:5">{<block_content pos:start="327:9" pos:end="331:17">

        <expr_stmt pos:start="327:9" pos:end="327:67"><expr pos:start="327:9" pos:end="327:66"><call pos:start="327:9" pos:end="327:66"><name pos:start="327:9" pos:end="327:20">error_report</name><argument_list pos:start="327:21" pos:end="327:66">(<argument pos:start="327:22" pos:end="327:65"><expr pos:start="327:22" pos:end="327:65"><literal type="string" pos:start="327:22" pos:end="327:65">"Flush interval can't be smaller than depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:17"><expr pos:start="329:9" pos:end="329:16"><name pos:start="329:9" pos:end="329:11">ret</name> <operator pos:start="329:13" pos:end="329:13">=</operator> <operator pos:start="329:15" pos:end="329:15">-</operator><literal type="number" pos:start="329:16" pos:end="329:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="331:9" pos:end="331:17">goto <name pos:start="331:14" pos:end="331:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="337:5" pos:end="337:74"><expr pos:start="337:5" pos:end="337:73"><name pos:start="337:5" pos:end="337:7">blk</name> <operator pos:start="337:9" pos:end="337:9">=</operator> <call pos:start="337:11" pos:end="337:73"><name pos:start="337:11" pos:end="337:18">img_open</name><argument_list pos:start="337:19" pos:end="337:73">(<argument pos:start="337:20" pos:end="337:29"><expr pos:start="337:20" pos:end="337:29"><name pos:start="337:20" pos:end="337:29">image_opts</name></expr></argument>, <argument pos:start="337:32" pos:end="337:39"><expr pos:start="337:32" pos:end="337:39"><name pos:start="337:32" pos:end="337:39">filename</name></expr></argument>, <argument pos:start="337:42" pos:end="337:44"><expr pos:start="337:42" pos:end="337:44"><name pos:start="337:42" pos:end="337:44">fmt</name></expr></argument>, <argument pos:start="337:47" pos:end="337:51"><expr pos:start="337:47" pos:end="337:51"><name pos:start="337:47" pos:end="337:51">flags</name></expr></argument>, <argument pos:start="337:54" pos:end="337:65"><expr pos:start="337:54" pos:end="337:65"><name pos:start="337:54" pos:end="337:65">writethrough</name></expr></argument>, <argument pos:start="337:68" pos:end="337:72"><expr pos:start="337:68" pos:end="337:72"><name pos:start="337:68" pos:end="337:72">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="339:5" pos:end="345:5"><if pos:start="339:5" pos:end="345:5">if <condition pos:start="339:8" pos:end="339:13">(<expr pos:start="339:9" pos:end="339:12"><operator pos:start="339:9" pos:end="339:9">!</operator><name pos:start="339:10" pos:end="339:12">blk</name></expr>)</condition> <block pos:start="339:15" pos:end="345:5">{<block_content pos:start="341:9" pos:end="343:17">

        <expr_stmt pos:start="341:9" pos:end="341:17"><expr pos:start="341:9" pos:end="341:16"><name pos:start="341:9" pos:end="341:11">ret</name> <operator pos:start="341:13" pos:end="341:13">=</operator> <operator pos:start="341:15" pos:end="341:15">-</operator><literal type="number" pos:start="341:16" pos:end="341:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="343:9" pos:end="343:17">goto <name pos:start="343:14" pos:end="343:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="349:5" pos:end="349:36"><expr pos:start="349:5" pos:end="349:35"><name pos:start="349:5" pos:end="349:14">image_size</name> <operator pos:start="349:16" pos:end="349:16">=</operator> <call pos:start="349:18" pos:end="349:35"><name pos:start="349:18" pos:end="349:30">blk_getlength</name><argument_list pos:start="349:31" pos:end="349:35">(<argument pos:start="349:32" pos:end="349:34"><expr pos:start="349:32" pos:end="349:34"><name pos:start="349:32" pos:end="349:34">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="351:5" pos:end="357:5"><if pos:start="351:5" pos:end="357:5">if <condition pos:start="351:8" pos:end="351:23">(<expr pos:start="351:9" pos:end="351:22"><name pos:start="351:9" pos:end="351:18">image_size</name> <operator pos:start="351:20" pos:end="351:20">&lt;</operator> <literal type="number" pos:start="351:22" pos:end="351:22">0</literal></expr>)</condition> <block pos:start="351:25" pos:end="357:5">{<block_content pos:start="353:9" pos:end="355:17">

        <expr_stmt pos:start="353:9" pos:end="353:25"><expr pos:start="353:9" pos:end="353:24"><name pos:start="353:9" pos:end="353:11">ret</name> <operator pos:start="353:13" pos:end="353:13">=</operator> <name pos:start="353:15" pos:end="353:24">image_size</name></expr>;</expr_stmt>

        <goto pos:start="355:9" pos:end="355:17">goto <name pos:start="355:14" pos:end="355:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="361:5" pos:end="383:6"><expr pos:start="361:5" pos:end="383:5"><name pos:start="361:5" pos:end="361:8">data</name> <operator pos:start="361:10" pos:end="361:10">=</operator> <operator pos:start="361:12" pos:end="361:12">(</operator><name pos:start="361:13" pos:end="361:21">BenchData</name><operator pos:start="361:22" pos:end="361:22">)</operator> <block pos:start="361:24" pos:end="383:5">{

        <expr pos:start="363:9" pos:end="363:29"><operator pos:start="363:9" pos:end="363:9">.</operator><name pos:start="363:10" pos:end="363:12">blk</name>            <operator pos:start="363:25" pos:end="363:25">=</operator> <name pos:start="363:27" pos:end="363:29">blk</name></expr>,

        <expr pos:start="365:9" pos:end="365:36"><operator pos:start="365:9" pos:end="365:9">.</operator><name pos:start="365:10" pos:end="365:19">image_size</name>     <operator pos:start="365:25" pos:end="365:25">=</operator> <name pos:start="365:27" pos:end="365:36">image_size</name></expr>,

        <expr pos:start="367:9" pos:end="367:33"><operator pos:start="367:9" pos:end="367:9">.</operator><name pos:start="367:10" pos:end="367:16">bufsize</name>        <operator pos:start="367:25" pos:end="367:25">=</operator> <name pos:start="367:27" pos:end="367:33">bufsize</name></expr>,

        <expr pos:start="369:9" pos:end="369:41"><operator pos:start="369:9" pos:end="369:9">.</operator><name pos:start="369:10" pos:end="369:13">step</name>           <operator pos:start="369:25" pos:end="369:25">=</operator> <name pos:start="369:27" pos:end="369:30">step</name> <operator pos:start="369:32" pos:end="369:32">?</operator><operator pos:start="369:33" pos:end="369:33">:</operator> <name pos:start="369:35" pos:end="369:41">bufsize</name></expr>,

        <expr pos:start="371:9" pos:end="371:31"><operator pos:start="371:9" pos:end="371:9">.</operator><name pos:start="371:10" pos:end="371:14">nrreq</name>          <operator pos:start="371:25" pos:end="371:25">=</operator> <name pos:start="371:27" pos:end="371:31">depth</name></expr>,

        <expr pos:start="373:9" pos:end="373:31"><operator pos:start="373:9" pos:end="373:9">.</operator><name pos:start="373:10" pos:end="373:10">n</name>              <operator pos:start="373:25" pos:end="373:25">=</operator> <name pos:start="373:27" pos:end="373:31">count</name></expr>,

        <expr pos:start="375:9" pos:end="375:32"><operator pos:start="375:9" pos:end="375:9">.</operator><name pos:start="375:10" pos:end="375:15">offset</name>         <operator pos:start="375:25" pos:end="375:25">=</operator> <name pos:start="375:27" pos:end="375:32">offset</name></expr>,

        <expr pos:start="377:9" pos:end="377:34"><operator pos:start="377:9" pos:end="377:9">.</operator><name pos:start="377:10" pos:end="377:14">write</name>          <operator pos:start="377:25" pos:end="377:25">=</operator> <name pos:start="377:27" pos:end="377:34">is_write</name></expr>,

        <expr pos:start="379:9" pos:end="379:40"><operator pos:start="379:9" pos:end="379:9">.</operator><name pos:start="379:10" pos:end="379:23">flush_interval</name> <operator pos:start="379:25" pos:end="379:25">=</operator> <name pos:start="379:27" pos:end="379:40">flush_interval</name></expr>,

        <expr pos:start="381:9" pos:end="381:40"><operator pos:start="381:9" pos:end="381:9">.</operator><name pos:start="381:10" pos:end="381:23">drain_on_flush</name> <operator pos:start="381:25" pos:end="381:25">=</operator> <name pos:start="381:27" pos:end="381:40">drain_on_flush</name></expr>,

    }</block></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="391:35"><expr pos:start="385:5" pos:end="391:34"><call pos:start="385:5" pos:end="391:34"><name pos:start="385:5" pos:end="385:10">printf</name><argument_list pos:start="385:11" pos:end="391:34">(<argument pos:start="385:12" pos:end="387:61"><expr pos:start="385:12" pos:end="387:61"><literal type="string" pos:start="385:12" pos:end="385:67">"Sending %d %s requests, %d bytes each, %d in parallel "</literal>

           <literal type="string" pos:start="387:12" pos:end="387:34">"(starting at offset %"</literal> <name pos:start="387:36" pos:end="387:41">PRId64</name> <literal type="string" pos:start="387:43" pos:end="387:61">", step size %d)\n"</literal></expr></argument>,

           <argument pos:start="389:12" pos:end="389:17"><expr pos:start="389:12" pos:end="389:17"><name pos:start="389:12" pos:end="389:17"><name pos:start="389:12" pos:end="389:15">data</name><operator pos:start="389:16" pos:end="389:16">.</operator><name pos:start="389:17" pos:end="389:17">n</name></name></expr></argument>, <argument pos:start="389:20" pos:end="389:48"><expr pos:start="389:20" pos:end="389:48"><ternary pos:start="389:20" pos:end="389:48"><condition pos:start="389:20" pos:end="389:31"><expr pos:start="389:20" pos:end="389:29"><name pos:start="389:20" pos:end="389:29"><name pos:start="389:20" pos:end="389:23">data</name><operator pos:start="389:24" pos:end="389:24">.</operator><name pos:start="389:25" pos:end="389:29">write</name></name></expr> ?</condition><then pos:start="389:33" pos:end="389:39"> <expr pos:start="389:33" pos:end="389:39"><literal type="string" pos:start="389:33" pos:end="389:39">"write"</literal></expr> </then><else pos:start="389:41" pos:end="389:48">: <expr pos:start="389:43" pos:end="389:48"><literal type="string" pos:start="389:43" pos:end="389:48">"read"</literal></expr></else></ternary></expr></argument>, <argument pos:start="389:51" pos:end="389:62"><expr pos:start="389:51" pos:end="389:62"><name pos:start="389:51" pos:end="389:62"><name pos:start="389:51" pos:end="389:54">data</name><operator pos:start="389:55" pos:end="389:55">.</operator><name pos:start="389:56" pos:end="389:62">bufsize</name></name></expr></argument>, <argument pos:start="389:65" pos:end="389:74"><expr pos:start="389:65" pos:end="389:74"><name pos:start="389:65" pos:end="389:74"><name pos:start="389:65" pos:end="389:68">data</name><operator pos:start="389:69" pos:end="389:69">.</operator><name pos:start="389:70" pos:end="389:74">nrreq</name></name></expr></argument>,

           <argument pos:start="391:12" pos:end="391:22"><expr pos:start="391:12" pos:end="391:22"><name pos:start="391:12" pos:end="391:22"><name pos:start="391:12" pos:end="391:15">data</name><operator pos:start="391:16" pos:end="391:16">.</operator><name pos:start="391:17" pos:end="391:22">offset</name></name></expr></argument>, <argument pos:start="391:25" pos:end="391:33"><expr pos:start="391:25" pos:end="391:33"><name pos:start="391:25" pos:end="391:33"><name pos:start="391:25" pos:end="391:28">data</name><operator pos:start="391:29" pos:end="391:29">.</operator><name pos:start="391:30" pos:end="391:33">step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="393:5" pos:end="397:5"><if pos:start="393:5" pos:end="397:5">if <condition pos:start="393:8" pos:end="393:23">(<expr pos:start="393:9" pos:end="393:22"><name pos:start="393:9" pos:end="393:22">flush_interval</name></expr>)</condition> <block pos:start="393:25" pos:end="397:5">{<block_content pos:start="395:9" pos:end="395:68">

        <expr_stmt pos:start="395:9" pos:end="395:68"><expr pos:start="395:9" pos:end="395:67"><call pos:start="395:9" pos:end="395:67"><name pos:start="395:9" pos:end="395:14">printf</name><argument_list pos:start="395:15" pos:end="395:67">(<argument pos:start="395:16" pos:end="395:50"><expr pos:start="395:16" pos:end="395:50"><literal type="string" pos:start="395:16" pos:end="395:50">"Sending flush every %d requests\n"</literal></expr></argument>, <argument pos:start="395:53" pos:end="395:66"><expr pos:start="395:53" pos:end="395:66"><name pos:start="395:53" pos:end="395:66">flush_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="401:5" pos:end="401:62"><expr pos:start="401:5" pos:end="401:61"><name pos:start="401:5" pos:end="401:12"><name pos:start="401:5" pos:end="401:8">data</name><operator pos:start="401:9" pos:end="401:9">.</operator><name pos:start="401:10" pos:end="401:12">buf</name></name> <operator pos:start="401:14" pos:end="401:14">=</operator> <call pos:start="401:16" pos:end="401:61"><name pos:start="401:16" pos:end="401:29">blk_blockalign</name><argument_list pos:start="401:30" pos:end="401:61">(<argument pos:start="401:31" pos:end="401:33"><expr pos:start="401:31" pos:end="401:33"><name pos:start="401:31" pos:end="401:33">blk</name></expr></argument>, <argument pos:start="401:36" pos:end="401:60"><expr pos:start="401:36" pos:end="401:60"><name pos:start="401:36" pos:end="401:45"><name pos:start="401:36" pos:end="401:39">data</name><operator pos:start="401:40" pos:end="401:40">.</operator><name pos:start="401:41" pos:end="401:45">nrreq</name></name> <operator pos:start="401:47" pos:end="401:47">*</operator> <name pos:start="401:49" pos:end="401:60"><name pos:start="401:49" pos:end="401:52">data</name><operator pos:start="401:53" pos:end="401:53">.</operator><name pos:start="401:54" pos:end="401:60">bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:57"><expr pos:start="403:5" pos:end="403:56"><call pos:start="403:5" pos:end="403:56"><name pos:start="403:5" pos:end="403:10">memset</name><argument_list pos:start="403:11" pos:end="403:56">(<argument pos:start="403:12" pos:end="403:19"><expr pos:start="403:12" pos:end="403:19"><name pos:start="403:12" pos:end="403:19"><name pos:start="403:12" pos:end="403:15">data</name><operator pos:start="403:16" pos:end="403:16">.</operator><name pos:start="403:17" pos:end="403:19">buf</name></name></expr></argument>, <argument pos:start="403:22" pos:end="403:28"><expr pos:start="403:22" pos:end="403:28"><name pos:start="403:22" pos:end="403:28">pattern</name></expr></argument>, <argument pos:start="403:31" pos:end="403:55"><expr pos:start="403:31" pos:end="403:55"><name pos:start="403:31" pos:end="403:40"><name pos:start="403:31" pos:end="403:34">data</name><operator pos:start="403:35" pos:end="403:35">.</operator><name pos:start="403:36" pos:end="403:40">nrreq</name></name> <operator pos:start="403:42" pos:end="403:42">*</operator> <name pos:start="403:44" pos:end="403:55"><name pos:start="403:44" pos:end="403:47">data</name><operator pos:start="403:48" pos:end="403:48">.</operator><name pos:start="403:49" pos:end="403:55">bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="407:5" pos:end="407:48"><expr pos:start="407:5" pos:end="407:47"><name pos:start="407:5" pos:end="407:13"><name pos:start="407:5" pos:end="407:8">data</name><operator pos:start="407:9" pos:end="407:9">.</operator><name pos:start="407:10" pos:end="407:13">qiov</name></name> <operator pos:start="407:15" pos:end="407:15">=</operator> <call pos:start="407:17" pos:end="407:47"><name pos:start="407:17" pos:end="407:21">g_new</name><argument_list pos:start="407:22" pos:end="407:47">(<argument pos:start="407:23" pos:end="407:34"><expr pos:start="407:23" pos:end="407:34"><name pos:start="407:23" pos:end="407:34">QEMUIOVector</name></expr></argument>, <argument pos:start="407:37" pos:end="407:46"><expr pos:start="407:37" pos:end="407:46"><name pos:start="407:37" pos:end="407:46"><name pos:start="407:37" pos:end="407:40">data</name><operator pos:start="407:41" pos:end="407:41">.</operator><name pos:start="407:42" pos:end="407:46">nrreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="409:5" pos:end="417:5">for <control pos:start="409:9" pos:end="409:36">(<init pos:start="409:10" pos:end="409:15"><expr pos:start="409:10" pos:end="409:14"><name pos:start="409:10" pos:end="409:10">i</name> <operator pos:start="409:12" pos:end="409:12">=</operator> <literal type="number" pos:start="409:14" pos:end="409:14">0</literal></expr>;</init> <condition pos:start="409:17" pos:end="409:31"><expr pos:start="409:17" pos:end="409:30"><name pos:start="409:17" pos:end="409:17">i</name> <operator pos:start="409:19" pos:end="409:19">&lt;</operator> <name pos:start="409:21" pos:end="409:30"><name pos:start="409:21" pos:end="409:24">data</name><operator pos:start="409:25" pos:end="409:25">.</operator><name pos:start="409:26" pos:end="409:30">nrreq</name></name></expr>;</condition> <incr pos:start="409:33" pos:end="409:35"><expr pos:start="409:33" pos:end="409:35"><name pos:start="409:33" pos:end="409:33">i</name><operator pos:start="409:34" pos:end="409:35">++</operator></expr></incr>)</control> <block pos:start="409:38" pos:end="417:5">{<block_content pos:start="411:9" pos:end="415:66">

        <expr_stmt pos:start="411:9" pos:end="411:42"><expr pos:start="411:9" pos:end="411:41"><call pos:start="411:9" pos:end="411:41"><name pos:start="411:9" pos:end="411:23">qemu_iovec_init</name><argument_list pos:start="411:24" pos:end="411:41">(<argument pos:start="411:25" pos:end="411:37"><expr pos:start="411:25" pos:end="411:37"><operator pos:start="411:25" pos:end="411:25">&amp;</operator><name pos:start="411:26" pos:end="411:37"><name pos:start="411:26" pos:end="411:29">data</name><operator pos:start="411:30" pos:end="411:30">.</operator><name pos:start="411:31" pos:end="411:34">qiov</name><index pos:start="411:35" pos:end="411:37">[<expr pos:start="411:36" pos:end="411:36"><name pos:start="411:36" pos:end="411:36">i</name></expr>]</index></name></expr></argument>, <argument pos:start="411:40" pos:end="411:40"><expr pos:start="411:40" pos:end="411:40"><literal type="number" pos:start="411:40" pos:end="411:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="415:66"><expr pos:start="413:9" pos:end="415:65"><call pos:start="413:9" pos:end="415:65"><name pos:start="413:9" pos:end="413:22">qemu_iovec_add</name><argument_list pos:start="413:23" pos:end="415:65">(<argument pos:start="413:24" pos:end="413:36"><expr pos:start="413:24" pos:end="413:36"><operator pos:start="413:24" pos:end="413:24">&amp;</operator><name pos:start="413:25" pos:end="413:36"><name pos:start="413:25" pos:end="413:28">data</name><operator pos:start="413:29" pos:end="413:29">.</operator><name pos:start="413:30" pos:end="413:33">qiov</name><index pos:start="413:34" pos:end="413:36">[<expr pos:start="413:35" pos:end="413:35"><name pos:start="413:35" pos:end="413:35">i</name></expr>]</index></name></expr></argument>,

                       <argument pos:start="415:24" pos:end="415:50"><expr pos:start="415:24" pos:end="415:50"><name pos:start="415:24" pos:end="415:31"><name pos:start="415:24" pos:end="415:27">data</name><operator pos:start="415:28" pos:end="415:28">.</operator><name pos:start="415:29" pos:end="415:31">buf</name></name> <operator pos:start="415:33" pos:end="415:33">+</operator> <name pos:start="415:35" pos:end="415:35">i</name> <operator pos:start="415:37" pos:end="415:37">*</operator> <name pos:start="415:39" pos:end="415:50"><name pos:start="415:39" pos:end="415:42">data</name><operator pos:start="415:43" pos:end="415:43">.</operator><name pos:start="415:44" pos:end="415:50">bufsize</name></name></expr></argument>, <argument pos:start="415:53" pos:end="415:64"><expr pos:start="415:53" pos:end="415:64"><name pos:start="415:53" pos:end="415:64"><name pos:start="415:53" pos:end="415:56">data</name><operator pos:start="415:57" pos:end="415:57">.</operator><name pos:start="415:58" pos:end="415:64">bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="421:5" pos:end="421:28"><expr pos:start="421:5" pos:end="421:27"><call pos:start="421:5" pos:end="421:27"><name pos:start="421:5" pos:end="421:16">gettimeofday</name><argument_list pos:start="421:17" pos:end="421:27">(<argument pos:start="421:18" pos:end="421:20"><expr pos:start="421:18" pos:end="421:20"><operator pos:start="421:18" pos:end="421:18">&amp;</operator><name pos:start="421:19" pos:end="421:20">t1</name></expr></argument>, <argument pos:start="421:23" pos:end="421:26"><expr pos:start="421:23" pos:end="421:26"><name pos:start="421:23" pos:end="421:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:23"><expr pos:start="423:5" pos:end="423:22"><call pos:start="423:5" pos:end="423:22"><name pos:start="423:5" pos:end="423:12">bench_cb</name><argument_list pos:start="423:13" pos:end="423:22">(<argument pos:start="423:14" pos:end="423:18"><expr pos:start="423:14" pos:end="423:18"><operator pos:start="423:14" pos:end="423:14">&amp;</operator><name pos:start="423:15" pos:end="423:18">data</name></expr></argument>, <argument pos:start="423:21" pos:end="423:21"><expr pos:start="423:21" pos:end="423:21"><literal type="number" pos:start="423:21" pos:end="423:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="427:5" pos:end="431:5">while <condition pos:start="427:11" pos:end="427:22">(<expr pos:start="427:12" pos:end="427:21"><name pos:start="427:12" pos:end="427:17"><name pos:start="427:12" pos:end="427:15">data</name><operator pos:start="427:16" pos:end="427:16">.</operator><name pos:start="427:17" pos:end="427:17">n</name></name> <operator pos:start="427:19" pos:end="427:19">&gt;</operator> <literal type="number" pos:start="427:21" pos:end="427:21">0</literal></expr>)</condition> <block pos:start="427:24" pos:end="431:5">{<block_content pos:start="429:9" pos:end="429:30">

        <expr_stmt pos:start="429:9" pos:end="429:30"><expr pos:start="429:9" pos:end="429:29"><call pos:start="429:9" pos:end="429:29"><name pos:start="429:9" pos:end="429:22">main_loop_wait</name><argument_list pos:start="429:23" pos:end="429:29">(<argument pos:start="429:24" pos:end="429:28"><expr pos:start="429:24" pos:end="429:28"><name pos:start="429:24" pos:end="429:28">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="433:5" pos:end="433:28"><expr pos:start="433:5" pos:end="433:27"><call pos:start="433:5" pos:end="433:27"><name pos:start="433:5" pos:end="433:16">gettimeofday</name><argument_list pos:start="433:17" pos:end="433:27">(<argument pos:start="433:18" pos:end="433:20"><expr pos:start="433:18" pos:end="433:20"><operator pos:start="433:18" pos:end="433:18">&amp;</operator><name pos:start="433:19" pos:end="433:20">t2</name></expr></argument>, <argument pos:start="433:23" pos:end="433:26"><expr pos:start="433:23" pos:end="433:26"><name pos:start="433:23" pos:end="433:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="437:5" pos:end="441:60"><expr pos:start="437:5" pos:end="441:59"><call pos:start="437:5" pos:end="441:59"><name pos:start="437:5" pos:end="437:10">printf</name><argument_list pos:start="437:11" pos:end="441:59">(<argument pos:start="437:12" pos:end="437:46"><expr pos:start="437:12" pos:end="437:46"><literal type="string" pos:start="437:12" pos:end="437:46">"Run completed in %3.3f seconds.\n"</literal></expr></argument>,

           <argument pos:start="439:12" pos:end="441:58"><expr pos:start="439:12" pos:end="441:58"><operator pos:start="439:12" pos:end="439:12">(</operator><name pos:start="439:13" pos:end="439:21"><name pos:start="439:13" pos:end="439:14">t2</name><operator pos:start="439:15" pos:end="439:15">.</operator><name pos:start="439:16" pos:end="439:21">tv_sec</name></name> <operator pos:start="439:23" pos:end="439:23">-</operator> <name pos:start="439:25" pos:end="439:33"><name pos:start="439:25" pos:end="439:26">t1</name><operator pos:start="439:27" pos:end="439:27">.</operator><name pos:start="439:28" pos:end="439:33">tv_sec</name></name><operator pos:start="439:34" pos:end="439:34">)</operator>

           <operator pos:start="441:12" pos:end="441:12">+</operator> <operator pos:start="441:14" pos:end="441:14">(</operator><operator pos:start="441:15" pos:end="441:15">(</operator><name pos:start="441:16" pos:end="441:21">double</name><operator pos:start="441:22" pos:end="441:22">)</operator><operator pos:start="441:23" pos:end="441:23">(</operator><name pos:start="441:24" pos:end="441:33"><name pos:start="441:24" pos:end="441:25">t2</name><operator pos:start="441:26" pos:end="441:26">.</operator><name pos:start="441:27" pos:end="441:33">tv_usec</name></name> <operator pos:start="441:35" pos:end="441:35">-</operator> <name pos:start="441:37" pos:end="441:46"><name pos:start="441:37" pos:end="441:38">t1</name><operator pos:start="441:39" pos:end="441:39">.</operator><name pos:start="441:40" pos:end="441:46">tv_usec</name></name><operator pos:start="441:47" pos:end="441:47">)</operator> <operator pos:start="441:49" pos:end="441:49">/</operator> <literal type="number" pos:start="441:51" pos:end="441:57">1000000</literal><operator pos:start="441:58" pos:end="441:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="445:1" pos:end="445:4"><name pos:start="445:1" pos:end="445:3">out</name>:</label>

    <expr_stmt pos:start="447:5" pos:end="447:25"><expr pos:start="447:5" pos:end="447:24"><call pos:start="447:5" pos:end="447:24"><name pos:start="447:5" pos:end="447:14">qemu_vfree</name><argument_list pos:start="447:15" pos:end="447:24">(<argument pos:start="447:16" pos:end="447:23"><expr pos:start="447:16" pos:end="447:23"><name pos:start="447:16" pos:end="447:23"><name pos:start="447:16" pos:end="447:19">data</name><operator pos:start="447:20" pos:end="447:20">.</operator><name pos:start="447:21" pos:end="447:23">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="449:5" pos:end="449:19"><expr pos:start="449:5" pos:end="449:18"><call pos:start="449:5" pos:end="449:18"><name pos:start="449:5" pos:end="449:13">blk_unref</name><argument_list pos:start="449:14" pos:end="449:18">(<argument pos:start="449:15" pos:end="449:17"><expr pos:start="449:15" pos:end="449:17"><name pos:start="449:15" pos:end="449:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="453:5" pos:end="457:5"><if pos:start="453:5" pos:end="457:5">if <condition pos:start="453:8" pos:end="453:12">(<expr pos:start="453:9" pos:end="453:11"><name pos:start="453:9" pos:end="453:11">ret</name></expr>)</condition> <block pos:start="453:14" pos:end="457:5">{<block_content pos:start="455:9" pos:end="455:17">

        <return pos:start="455:9" pos:end="455:17">return <expr pos:start="455:16" pos:end="455:16"><literal type="number" pos:start="455:16" pos:end="455:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="459:5" pos:end="459:13">return <expr pos:start="459:12" pos:end="459:12"><literal type="number" pos:start="459:12" pos:end="459:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
