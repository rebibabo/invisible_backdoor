<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6214.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">lan9118_writel</name><parameter_list pos:start="1:27" pos:end="3:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:66"><decl pos:start="1:42" pos:end="1:66"><type pos:start="1:42" pos:end="1:66"><name pos:start="1:42" pos:end="1:59">target_phys_addr_t</name></type> <name pos:start="1:61" pos:end="1:66">offset</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:35">uint32_t</name></type> <name pos:start="3:37" pos:end="3:39">val</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="263:1">{<block_content pos:start="7:5" pos:end="261:22">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">lan9118_state</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:46">= <expr pos:start="7:24" pos:end="7:46"><operator pos:start="7:24" pos:end="7:24">(</operator><name pos:start="7:25" pos:end="7:37">lan9118_state</name> <operator pos:start="7:39" pos:end="7:39">*</operator><operator pos:start="7:40" pos:end="7:40">)</operator><name pos:start="7:41" pos:end="7:46">opaque</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:19"><expr pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">offset</name> <operator pos:start="9:12" pos:end="9:13">&amp;=</operator> <literal type="number" pos:start="9:15" pos:end="9:18">0xff</literal></expr>;</expr_stmt>

    

    <comment type="line" pos:start="13:5" pos:end="13:63">//DPRINTF("Write reg 0x%02x = 0x%08x\n", (int)offset, val);</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:40">(<expr pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:14">offset</name> <operator pos:start="15:16" pos:end="15:17">&gt;=</operator> <literal type="number" pos:start="15:19" pos:end="15:22">0x20</literal> <operator pos:start="15:24" pos:end="15:25">&amp;&amp;</operator> <name pos:start="15:27" pos:end="15:32">offset</name> <operator pos:start="15:34" pos:end="15:34">&lt;</operator> <literal type="number" pos:start="15:36" pos:end="15:39">0x40</literal></expr>)</condition> <block pos:start="15:42" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <comment type="block" pos:start="17:9" pos:end="17:21">/* TX FIFO */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:29"><expr pos:start="19:9" pos:end="19:28"><call pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:20">tx_fifo_push</name><argument_list pos:start="19:21" pos:end="19:28">(<argument pos:start="19:22" pos:end="19:22"><expr pos:start="19:22" pos:end="19:22"><name pos:start="19:22" pos:end="19:22">s</name></expr></argument>, <argument pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><name pos:start="19:25" pos:end="19:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="25:5" pos:end="259:5">switch <condition pos:start="25:12" pos:end="25:19">(<expr pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:18">offset</name></expr>)</condition> <block pos:start="25:21" pos:end="259:5">{<block_content pos:start="27:5" pos:end="257:14">

    <case pos:start="27:5" pos:end="27:21">case <expr pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:20">CSR_IRQ_CFG</name></expr>:</case>

        <comment type="block" pos:start="29:9" pos:end="29:63">/* TODO: Implement interrupt deassertion intervals.  */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:61"><expr pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:18">irq_cfg</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <operator pos:start="31:22" pos:end="31:22">(</operator><name pos:start="31:23" pos:end="31:32"><name pos:start="31:23" pos:end="31:23">s</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:32">irq_cfg</name></name> <operator pos:start="31:34" pos:end="31:34">&amp;</operator> <name pos:start="31:36" pos:end="31:42">IRQ_INT</name><operator pos:start="31:43" pos:end="31:43">)</operator> <operator pos:start="31:45" pos:end="31:45">|</operator> <operator pos:start="31:47" pos:end="31:47">(</operator><name pos:start="31:48" pos:end="31:50">val</name> <operator pos:start="31:52" pos:end="31:52">&amp;</operator> <name pos:start="31:54" pos:end="31:59">IRQ_EN</name><operator pos:start="31:60" pos:end="31:60">)</operator></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:21">case <expr pos:start="35:10" pos:end="35:20"><name pos:start="35:10" pos:end="35:20">CSR_INT_STS</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:18">int_sts</name></name> <operator pos:start="37:20" pos:end="37:21">&amp;=</operator> <operator pos:start="37:23" pos:end="37:23">~</operator><name pos:start="37:24" pos:end="37:26">val</name></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:20">case <expr pos:start="41:10" pos:end="41:19"><name pos:start="41:10" pos:end="41:19">CSR_INT_EN</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:40"><expr pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:17">int_en</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:23">val</name> <operator pos:start="43:25" pos:end="43:25">&amp;</operator> <operator pos:start="43:27" pos:end="43:27">~</operator><name pos:start="43:28" pos:end="43:39">RESERVED_INT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">int_sts</name></name> <operator pos:start="45:20" pos:end="45:21">|=</operator> <name pos:start="45:23" pos:end="45:25">val</name> <operator pos:start="45:27" pos:end="45:27">&amp;</operator> <name pos:start="45:29" pos:end="45:34">SW_INT</name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:22">case <expr pos:start="49:10" pos:end="49:21"><name pos:start="49:10" pos:end="49:21">CSR_FIFO_INT</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:47"><expr pos:start="51:9" pos:end="51:46"><call pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:15">DPRINTF</name><argument_list pos:start="51:16" pos:end="51:46">(<argument pos:start="51:17" pos:end="51:40"><expr pos:start="51:17" pos:end="51:40"><literal type="string" pos:start="51:17" pos:end="51:40">"FIFO INT levels %08x\n"</literal></expr></argument>, <argument pos:start="51:43" pos:end="51:45"><expr pos:start="51:43" pos:end="51:45"><name pos:start="51:43" pos:end="51:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:26"><expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:19">fifo_int</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:25">val</name></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:20">case <expr pos:start="57:10" pos:end="57:19"><name pos:start="57:10" pos:end="57:19">CSR_RX_CFG</name></expr>:</case>

        <if_stmt pos:start="59:9" pos:end="71:9"><if pos:start="59:9" pos:end="71:9">if <condition pos:start="59:12" pos:end="59:25">(<expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:15">val</name> <operator pos:start="59:17" pos:end="59:17">&amp;</operator> <literal type="number" pos:start="59:19" pos:end="59:24">0x8000</literal></expr>)</condition> <block pos:start="59:27" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:58">

            <comment type="block" pos:start="61:13" pos:end="61:25">/* RX_DUMP */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:32"><expr pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:27">rx_fifo_used</name></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <literal type="number" pos:start="63:31" pos:end="63:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:39"><expr pos:start="65:13" pos:end="65:38"><name pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:34">rx_status_fifo_used</name></name> <operator pos:start="65:36" pos:end="65:36">=</operator> <literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:60"><expr pos:start="67:13" pos:end="67:59"><name pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:34">rx_packet_size_tail</name></name> <operator pos:start="67:36" pos:end="67:36">=</operator> <name pos:start="67:38" pos:end="67:59"><name pos:start="67:38" pos:end="67:38">s</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:59">rx_packet_size_head</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:58"><expr pos:start="69:13" pos:end="69:57"><name pos:start="69:13" pos:end="69:53"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:29">rx_packet_size</name><index pos:start="69:30" pos:end="69:53">[<expr pos:start="69:31" pos:end="69:52"><name pos:start="69:31" pos:end="69:52"><name pos:start="69:31" pos:end="69:31">s</name><operator pos:start="69:32" pos:end="69:33">-&gt;</operator><name pos:start="69:34" pos:end="69:52">rx_packet_size_head</name></name></expr>]</index></name> <operator pos:start="69:55" pos:end="69:55">=</operator> <literal type="number" pos:start="69:57" pos:end="69:57">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:17">rx_cfg</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:23">val</name> <operator pos:start="73:25" pos:end="73:25">&amp;</operator> <literal type="number" pos:start="73:27" pos:end="73:36">0xcfff1ff0</literal></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:20">case <expr pos:start="77:10" pos:end="77:19"><name pos:start="77:10" pos:end="77:19">CSR_TX_CFG</name></expr>:</case>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:25">(<expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:15">val</name> <operator pos:start="79:17" pos:end="79:17">&amp;</operator> <literal type="number" pos:start="79:19" pos:end="79:24">0x8000</literal></expr>)</condition> <block pos:start="79:27" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:39">

            <expr_stmt pos:start="81:13" pos:end="81:39"><expr pos:start="81:13" pos:end="81:38"><name pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:34">tx_status_fifo_used</name></name> <operator pos:start="81:36" pos:end="81:36">=</operator> <literal type="number" pos:start="81:38" pos:end="81:38">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:25">(<expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:15">val</name> <operator pos:start="85:17" pos:end="85:17">&amp;</operator> <literal type="number" pos:start="85:19" pos:end="85:24">0x4000</literal></expr>)</condition> <block pos:start="85:27" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:39">

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:18">txp</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:25">state</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <name pos:start="87:29" pos:end="87:35">TX_IDLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:18">txp</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:29">fifo_used</name></name> <operator pos:start="89:31" pos:end="89:31">=</operator> <literal type="number" pos:start="89:33" pos:end="89:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:39"><expr pos:start="91:13" pos:end="91:38"><name pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:18">txp</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:25">cmd_a</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <literal type="number" pos:start="91:29" pos:end="91:38">0xffffffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">tx_cfg</name></name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:23">val</name> <operator pos:start="95:25" pos:end="95:25">&amp;</operator> <literal type="number" pos:start="95:27" pos:end="95:27">6</literal></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <case pos:start="99:5" pos:end="99:20">case <expr pos:start="99:10" pos:end="99:19"><name pos:start="99:10" pos:end="99:19">CSR_HW_CFG</name></expr>:</case>

        <if_stmt pos:start="101:9" pos:end="111:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:20">(<expr pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:15">val</name> <operator pos:start="101:17" pos:end="101:17">&amp;</operator> <literal type="number" pos:start="101:19" pos:end="101:19">1</literal></expr>)</condition> <block pos:start="101:22" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:43">

            <comment type="block" pos:start="103:13" pos:end="103:22">/* SRST */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:43"><expr pos:start="105:13" pos:end="105:42"><call pos:start="105:13" pos:end="105:42"><name pos:start="105:13" pos:end="105:25">lan9118_reset</name><argument_list pos:start="105:26" pos:end="105:42">(<argument pos:start="105:27" pos:end="105:41"><expr pos:start="105:27" pos:end="105:41"><operator pos:start="105:27" pos:end="105:27">&amp;</operator><name pos:start="105:28" pos:end="105:41"><name pos:start="105:28" pos:end="105:28">s</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:36">busdev</name><operator pos:start="105:37" pos:end="105:37">.</operator><name pos:start="105:38" pos:end="105:41">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="107:11" pos:end="111:9">else <block pos:start="107:16" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:40">

            <expr_stmt pos:start="109:13" pos:end="109:40"><expr pos:start="109:13" pos:end="109:39"><name pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:21">hw_cfg</name></name> <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:27">val</name> <operator pos:start="109:29" pos:end="109:29">&amp;</operator> <literal type="number" pos:start="109:31" pos:end="109:39">0x003f300</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:24">case <expr pos:start="115:10" pos:end="115:23"><name pos:start="115:10" pos:end="115:23">CSR_RX_DP_CTRL</name></expr>:</case>

        <if_stmt pos:start="117:9" pos:end="145:9"><if pos:start="117:9" pos:end="145:9">if <condition pos:start="117:12" pos:end="117:29">(<expr pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:15">val</name> <operator pos:start="117:17" pos:end="117:17">&amp;</operator> <literal type="number" pos:start="117:19" pos:end="117:28">0x80000000</literal></expr>)</condition> <block pos:start="117:31" pos:end="145:9">{<block_content pos:start="121:13" pos:end="143:13">

            <comment type="block" pos:start="119:13" pos:end="119:47">/* Skip forward to next packet.  */</comment>

            <expr_stmt pos:start="121:13" pos:end="121:27"><expr pos:start="121:13" pos:end="121:26"><name pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:22">rxp_pad</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <literal type="number" pos:start="121:26" pos:end="121:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:30"><expr pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:25">rxp_offset</name></name> <operator pos:start="123:27" pos:end="123:27">=</operator> <literal type="number" pos:start="123:29" pos:end="123:29">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="135:13"><if pos:start="125:13" pos:end="135:13">if <condition pos:start="125:16" pos:end="125:33">(<expr pos:start="125:17" pos:end="125:32"><name pos:start="125:17" pos:end="125:27"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:27">rxp_size</name></name> <operator pos:start="125:29" pos:end="125:30">==</operator> <literal type="number" pos:start="125:32" pos:end="125:32">0</literal></expr>)</condition> <block pos:start="125:35" pos:end="135:13">{<block_content pos:start="129:17" pos:end="133:34">

                <comment type="block" pos:start="127:17" pos:end="127:59">/* Pop a word to start the next packet.  */</comment>

                <expr_stmt pos:start="129:17" pos:end="129:31"><expr pos:start="129:17" pos:end="129:30"><call pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:27">rx_fifo_pop</name><argument_list pos:start="129:28" pos:end="129:30">(<argument pos:start="129:29" pos:end="129:29"><expr pos:start="129:29" pos:end="129:29"><name pos:start="129:29" pos:end="129:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:31"><expr pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:26"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:26">rxp_pad</name></name> <operator pos:start="131:28" pos:end="131:28">=</operator> <literal type="number" pos:start="131:30" pos:end="131:30">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:34"><expr pos:start="133:17" pos:end="133:33"><name pos:start="133:17" pos:end="133:29"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:29">rxp_offset</name></name> <operator pos:start="133:31" pos:end="133:31">=</operator> <literal type="number" pos:start="133:33" pos:end="133:33">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:43"><expr pos:start="137:13" pos:end="137:42"><name pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:27">rx_fifo_head</name></name> <operator pos:start="137:29" pos:end="137:30">+=</operator> <name pos:start="137:32" pos:end="137:42"><name pos:start="137:32" pos:end="137:32">s</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:42">rxp_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:51">(<expr pos:start="139:17" pos:end="139:50"><name pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:31">rx_fifo_head</name></name> <operator pos:start="139:33" pos:end="139:34">&gt;=</operator> <name pos:start="139:36" pos:end="139:50"><name pos:start="139:36" pos:end="139:36">s</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:50">rx_fifo_size</name></name></expr>)</condition> <block pos:start="139:53" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:51">

                <expr_stmt pos:start="141:17" pos:end="141:51"><expr pos:start="141:17" pos:end="141:50"><name pos:start="141:17" pos:end="141:31"><name pos:start="141:17" pos:end="141:17">s</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:31">rx_fifo_head</name></name> <operator pos:start="141:33" pos:end="141:34">-=</operator> <name pos:start="141:36" pos:end="141:50"><name pos:start="141:36" pos:end="141:36">s</name><operator pos:start="141:37" pos:end="141:38">-&gt;</operator><name pos:start="141:39" pos:end="141:50">rx_fifo_size</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:22">case <expr pos:start="149:10" pos:end="149:21"><name pos:start="149:10" pos:end="149:21">CSR_PMT_CTRL</name></expr>:</case>

        <if_stmt pos:start="151:9" pos:end="155:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:24">(<expr pos:start="151:13" pos:end="151:23"><name pos:start="151:13" pos:end="151:15">val</name> <operator pos:start="151:17" pos:end="151:17">&amp;</operator> <literal type="number" pos:start="151:19" pos:end="151:23">0x400</literal></expr>)</condition> <block pos:start="151:26" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:25">

            <expr_stmt pos:start="153:13" pos:end="153:25"><expr pos:start="153:13" pos:end="153:24"><call pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:21">phy_reset</name><argument_list pos:start="153:22" pos:end="153:24">(<argument pos:start="153:23" pos:end="153:23"><expr pos:start="153:23" pos:end="153:23"><name pos:start="153:23" pos:end="153:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:30"><expr pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:19"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:19">pmt_ctrl</name></name> <operator pos:start="157:21" pos:end="157:22">&amp;=</operator> <operator pos:start="157:24" pos:end="157:24">~</operator><literal type="number" pos:start="157:25" pos:end="157:29">0x34e</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:37"><expr pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:19"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:19">pmt_ctrl</name></name> <operator pos:start="159:21" pos:end="159:22">|=</operator> <operator pos:start="159:24" pos:end="159:24">(</operator><name pos:start="159:25" pos:end="159:27">val</name> <operator pos:start="159:29" pos:end="159:29">&amp;</operator> <literal type="number" pos:start="159:31" pos:end="159:35">0x34e</literal><operator pos:start="159:36" pos:end="159:36">)</operator></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <case pos:start="163:5" pos:end="163:22">case <expr pos:start="163:10" pos:end="163:21"><name pos:start="163:10" pos:end="163:21">CSR_GPIO_CFG</name></expr>:</case>

        <comment type="block" pos:start="165:9" pos:end="165:43">/* Probably just enabling LEDs.  */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:39"><expr pos:start="167:9" pos:end="167:38"><name pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:19">gpio_cfg</name></name> <operator pos:start="167:21" pos:end="167:21">=</operator> <name pos:start="167:23" pos:end="167:25">val</name> <operator pos:start="167:27" pos:end="167:27">&amp;</operator> <literal type="number" pos:start="167:29" pos:end="167:38">0x7777071f</literal></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    <case pos:start="171:5" pos:end="171:21">case <expr pos:start="171:10" pos:end="171:20"><name pos:start="171:10" pos:end="171:20">CSR_GPT_CFG</name></expr>:</case>

        <if_stmt pos:start="173:9" pos:end="189:9"><if pos:start="173:9" pos:end="189:9">if <condition pos:start="173:12" pos:end="173:46">(<expr pos:start="173:13" pos:end="173:45"><operator pos:start="173:13" pos:end="173:13">(</operator><name pos:start="173:14" pos:end="173:23"><name pos:start="173:14" pos:end="173:14">s</name><operator pos:start="173:15" pos:end="173:16">-&gt;</operator><name pos:start="173:17" pos:end="173:23">gpt_cfg</name></name> <operator pos:start="173:25" pos:end="173:25">^</operator> <name pos:start="173:27" pos:end="173:29">val</name><operator pos:start="173:30" pos:end="173:30">)</operator> <operator pos:start="173:32" pos:end="173:32">&amp;</operator> <name pos:start="173:34" pos:end="173:45">GPT_TIMER_EN</name></expr>)</condition> <block pos:start="173:48" pos:end="189:9">{<block_content pos:start="175:13" pos:end="187:13">

            <if_stmt pos:start="175:13" pos:end="187:13"><if pos:start="175:13" pos:end="181:13">if <condition pos:start="175:16" pos:end="175:35">(<expr pos:start="175:17" pos:end="175:34"><name pos:start="175:17" pos:end="175:19">val</name> <operator pos:start="175:21" pos:end="175:21">&amp;</operator> <name pos:start="175:23" pos:end="175:34">GPT_TIMER_EN</name></expr>)</condition> <block pos:start="175:37" pos:end="181:13">{<block_content pos:start="177:17" pos:end="179:40">

                <expr_stmt pos:start="177:17" pos:end="177:57"><expr pos:start="177:17" pos:end="177:56"><call pos:start="177:17" pos:end="177:56"><name pos:start="177:17" pos:end="177:32">ptimer_set_count</name><argument_list pos:start="177:33" pos:end="177:56">(<argument pos:start="177:34" pos:end="177:41"><expr pos:start="177:34" pos:end="177:41"><name pos:start="177:34" pos:end="177:41"><name pos:start="177:34" pos:end="177:34">s</name><operator pos:start="177:35" pos:end="177:36">-&gt;</operator><name pos:start="177:37" pos:end="177:41">timer</name></name></expr></argument>, <argument pos:start="177:44" pos:end="177:55"><expr pos:start="177:44" pos:end="177:55"><name pos:start="177:44" pos:end="177:46">val</name> <operator pos:start="177:48" pos:end="177:48">&amp;</operator> <literal type="number" pos:start="177:50" pos:end="177:55">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:40"><expr pos:start="179:17" pos:end="179:39"><call pos:start="179:17" pos:end="179:39"><name pos:start="179:17" pos:end="179:26">ptimer_run</name><argument_list pos:start="179:27" pos:end="179:39">(<argument pos:start="179:28" pos:end="179:35"><expr pos:start="179:28" pos:end="179:35"><name pos:start="179:28" pos:end="179:35"><name pos:start="179:28" pos:end="179:28">s</name><operator pos:start="179:29" pos:end="179:30">-&gt;</operator><name pos:start="179:31" pos:end="179:35">timer</name></name></expr></argument>, <argument pos:start="179:38" pos:end="179:38"><expr pos:start="179:38" pos:end="179:38"><literal type="number" pos:start="179:38" pos:end="179:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="181:15" pos:end="187:13">else <block pos:start="181:20" pos:end="187:13">{<block_content pos:start="183:17" pos:end="185:51">

                <expr_stmt pos:start="183:17" pos:end="183:38"><expr pos:start="183:17" pos:end="183:37"><call pos:start="183:17" pos:end="183:37"><name pos:start="183:17" pos:end="183:27">ptimer_stop</name><argument_list pos:start="183:28" pos:end="183:37">(<argument pos:start="183:29" pos:end="183:36"><expr pos:start="183:29" pos:end="183:36"><name pos:start="183:29" pos:end="183:36"><name pos:start="183:29" pos:end="183:29">s</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:36">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:51"><expr pos:start="185:17" pos:end="185:50"><call pos:start="185:17" pos:end="185:50"><name pos:start="185:17" pos:end="185:32">ptimer_set_count</name><argument_list pos:start="185:33" pos:end="185:50">(<argument pos:start="185:34" pos:end="185:41"><expr pos:start="185:34" pos:end="185:41"><name pos:start="185:34" pos:end="185:41"><name pos:start="185:34" pos:end="185:34">s</name><operator pos:start="185:35" pos:end="185:36">-&gt;</operator><name pos:start="185:37" pos:end="185:41">timer</name></name></expr></argument>, <argument pos:start="185:44" pos:end="185:49"><expr pos:start="185:44" pos:end="185:49"><literal type="number" pos:start="185:44" pos:end="185:49">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:51"><expr pos:start="191:9" pos:end="191:50"><name pos:start="191:9" pos:end="191:18"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:18">gpt_cfg</name></name> <operator pos:start="191:20" pos:end="191:20">=</operator> <name pos:start="191:22" pos:end="191:24">val</name> <operator pos:start="191:26" pos:end="191:26">&amp;</operator> <operator pos:start="191:28" pos:end="191:28">(</operator><name pos:start="191:29" pos:end="191:40">GPT_TIMER_EN</name> <operator pos:start="191:42" pos:end="191:42">|</operator> <literal type="number" pos:start="191:44" pos:end="191:49">0xffff</literal><operator pos:start="191:50" pos:end="191:50">)</operator></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:23">case <expr pos:start="195:10" pos:end="195:22"><name pos:start="195:10" pos:end="195:22">CSR_WORD_SWAP</name></expr>:</case>

        <comment type="block" pos:start="197:9" pos:end="197:52">/* Ignored because we're in 32-bit mode.  */</comment>

        <expr_stmt pos:start="199:9" pos:end="199:27"><expr pos:start="199:9" pos:end="199:26"><name pos:start="199:9" pos:end="199:20"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:20">word_swap</name></name> <operator pos:start="199:22" pos:end="199:22">=</operator> <name pos:start="199:24" pos:end="199:26">val</name></expr>;</expr_stmt>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    <case pos:start="203:5" pos:end="203:25">case <expr pos:start="203:10" pos:end="203:24"><name pos:start="203:10" pos:end="203:24">CSR_MAC_CSR_CMD</name></expr>:</case>

        <expr_stmt pos:start="205:9" pos:end="205:38"><expr pos:start="205:9" pos:end="205:37"><name pos:start="205:9" pos:end="205:18"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:18">mac_cmd</name></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:24">val</name> <operator pos:start="205:26" pos:end="205:26">&amp;</operator> <literal type="number" pos:start="205:28" pos:end="205:37">0x4000000f</literal></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="223:9"><if pos:start="207:9" pos:end="223:9">if <condition pos:start="207:12" pos:end="207:29">(<expr pos:start="207:13" pos:end="207:28"><name pos:start="207:13" pos:end="207:15">val</name> <operator pos:start="207:17" pos:end="207:17">&amp;</operator> <literal type="number" pos:start="207:19" pos:end="207:28">0x80000000</literal></expr>)</condition> <block pos:start="207:31" pos:end="223:9">{<block_content pos:start="209:13" pos:end="221:13">

            <if_stmt pos:start="209:13" pos:end="221:13"><if pos:start="209:13" pos:end="215:13">if <condition pos:start="209:16" pos:end="209:33">(<expr pos:start="209:17" pos:end="209:32"><name pos:start="209:17" pos:end="209:19">val</name> <operator pos:start="209:21" pos:end="209:21">&amp;</operator> <literal type="number" pos:start="209:23" pos:end="209:32">0x40000000</literal></expr>)</condition> <block pos:start="209:35" pos:end="215:13">{<block_content pos:start="211:17" pos:end="213:74">

                <expr_stmt pos:start="211:17" pos:end="211:56"><expr pos:start="211:17" pos:end="211:55"><name pos:start="211:17" pos:end="211:27"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:27">mac_data</name></name> <operator pos:start="211:29" pos:end="211:29">=</operator> <call pos:start="211:31" pos:end="211:55"><name pos:start="211:31" pos:end="211:41">do_mac_read</name><argument_list pos:start="211:42" pos:end="211:55">(<argument pos:start="211:43" pos:end="211:43"><expr pos:start="211:43" pos:end="211:43"><name pos:start="211:43" pos:end="211:43">s</name></expr></argument>, <argument pos:start="211:46" pos:end="211:54"><expr pos:start="211:46" pos:end="211:54"><name pos:start="211:46" pos:end="211:48">val</name> <operator pos:start="211:50" pos:end="211:50">&amp;</operator> <literal type="number" pos:start="211:52" pos:end="211:54">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:74"><expr pos:start="213:17" pos:end="213:73"><call pos:start="213:17" pos:end="213:73"><name pos:start="213:17" pos:end="213:23">DPRINTF</name><argument_list pos:start="213:24" pos:end="213:73">(<argument pos:start="213:25" pos:end="213:48"><expr pos:start="213:25" pos:end="213:48"><literal type="string" pos:start="213:25" pos:end="213:48">"MAC read %d = 0x%08x\n"</literal></expr></argument>, <argument pos:start="213:51" pos:end="213:59"><expr pos:start="213:51" pos:end="213:59"><name pos:start="213:51" pos:end="213:53">val</name> <operator pos:start="213:55" pos:end="213:55">&amp;</operator> <literal type="number" pos:start="213:57" pos:end="213:59">0xf</literal></expr></argument>, <argument pos:start="213:62" pos:end="213:72"><expr pos:start="213:62" pos:end="213:72"><name pos:start="213:62" pos:end="213:72"><name pos:start="213:62" pos:end="213:62">s</name><operator pos:start="213:63" pos:end="213:64">-&gt;</operator><name pos:start="213:65" pos:end="213:72">mac_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="215:15" pos:end="221:13">else <block pos:start="215:20" pos:end="221:13">{<block_content pos:start="217:17" pos:end="219:56">

                <expr_stmt pos:start="217:17" pos:end="217:75"><expr pos:start="217:17" pos:end="217:74"><call pos:start="217:17" pos:end="217:74"><name pos:start="217:17" pos:end="217:23">DPRINTF</name><argument_list pos:start="217:24" pos:end="217:74">(<argument pos:start="217:25" pos:end="217:49"><expr pos:start="217:25" pos:end="217:49"><literal type="string" pos:start="217:25" pos:end="217:49">"MAC write %d = 0x%08x\n"</literal></expr></argument>, <argument pos:start="217:52" pos:end="217:60"><expr pos:start="217:52" pos:end="217:60"><name pos:start="217:52" pos:end="217:54">val</name> <operator pos:start="217:56" pos:end="217:56">&amp;</operator> <literal type="number" pos:start="217:58" pos:end="217:60">0xf</literal></expr></argument>, <argument pos:start="217:63" pos:end="217:73"><expr pos:start="217:63" pos:end="217:73"><name pos:start="217:63" pos:end="217:73"><name pos:start="217:63" pos:end="217:63">s</name><operator pos:start="217:64" pos:end="217:65">-&gt;</operator><name pos:start="217:66" pos:end="217:73">mac_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:56"><expr pos:start="219:17" pos:end="219:55"><call pos:start="219:17" pos:end="219:55"><name pos:start="219:17" pos:end="219:28">do_mac_write</name><argument_list pos:start="219:29" pos:end="219:55">(<argument pos:start="219:30" pos:end="219:30"><expr pos:start="219:30" pos:end="219:30"><name pos:start="219:30" pos:end="219:30">s</name></expr></argument>, <argument pos:start="219:33" pos:end="219:41"><expr pos:start="219:33" pos:end="219:41"><name pos:start="219:33" pos:end="219:35">val</name> <operator pos:start="219:37" pos:end="219:37">&amp;</operator> <literal type="number" pos:start="219:39" pos:end="219:41">0xf</literal></expr></argument>, <argument pos:start="219:44" pos:end="219:54"><expr pos:start="219:44" pos:end="219:54"><name pos:start="219:44" pos:end="219:54"><name pos:start="219:44" pos:end="219:44">s</name><operator pos:start="219:45" pos:end="219:46">-&gt;</operator><name pos:start="219:47" pos:end="219:54">mac_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="225:9" pos:end="225:14">break;</break>

    <case pos:start="227:5" pos:end="227:26">case <expr pos:start="227:10" pos:end="227:25"><name pos:start="227:10" pos:end="227:25">CSR_MAC_CSR_DATA</name></expr>:</case>

        <expr_stmt pos:start="229:9" pos:end="229:26"><expr pos:start="229:9" pos:end="229:25"><name pos:start="229:9" pos:end="229:19"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:19">mac_data</name></name> <operator pos:start="229:21" pos:end="229:21">=</operator> <name pos:start="229:23" pos:end="229:25">val</name></expr>;</expr_stmt>

        <break pos:start="231:9" pos:end="231:14">break;</break>

    <case pos:start="233:5" pos:end="233:21">case <expr pos:start="233:10" pos:end="233:20"><name pos:start="233:10" pos:end="233:20">CSR_AFC_CFG</name></expr>:</case>

        <expr_stmt pos:start="235:9" pos:end="235:38"><expr pos:start="235:9" pos:end="235:37"><name pos:start="235:9" pos:end="235:18"><name pos:start="235:9" pos:end="235:9">s</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:18">afc_cfg</name></name> <operator pos:start="235:20" pos:end="235:20">=</operator> <name pos:start="235:22" pos:end="235:24">val</name> <operator pos:start="235:26" pos:end="235:26">&amp;</operator> <literal type="number" pos:start="235:28" pos:end="235:37">0x00ffffff</literal></expr>;</expr_stmt>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <case pos:start="239:5" pos:end="239:21">case <expr pos:start="239:10" pos:end="239:20"><name pos:start="239:10" pos:end="239:20">CSR_E2P_CMD</name></expr>:</case>

        <expr_stmt pos:start="241:9" pos:end="241:59"><expr pos:start="241:9" pos:end="241:58"><call pos:start="241:9" pos:end="241:58"><name pos:start="241:9" pos:end="241:26">lan9118_eeprom_cmd</name><argument_list pos:start="241:27" pos:end="241:58">(<argument pos:start="241:28" pos:end="241:28"><expr pos:start="241:28" pos:end="241:28"><name pos:start="241:28" pos:end="241:28">s</name></expr></argument>, <argument pos:start="241:31" pos:end="241:45"><expr pos:start="241:31" pos:end="241:45"><operator pos:start="241:31" pos:end="241:31">(</operator><name pos:start="241:32" pos:end="241:34">val</name> <operator pos:start="241:36" pos:end="241:37">&gt;&gt;</operator> <literal type="number" pos:start="241:39" pos:end="241:40">28</literal><operator pos:start="241:41" pos:end="241:41">)</operator> <operator pos:start="241:43" pos:end="241:43">&amp;</operator> <literal type="number" pos:start="241:45" pos:end="241:45">7</literal></expr></argument>, <argument pos:start="241:48" pos:end="241:57"><expr pos:start="241:48" pos:end="241:57"><name pos:start="241:48" pos:end="241:50">val</name> <operator pos:start="241:52" pos:end="241:52">&amp;</operator> <literal type="number" pos:start="241:54" pos:end="241:57">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="243:9" pos:end="243:14">break;</break>

    <case pos:start="245:5" pos:end="245:22">case <expr pos:start="245:10" pos:end="245:21"><name pos:start="245:10" pos:end="245:21">CSR_E2P_DATA</name></expr>:</case>

        <expr_stmt pos:start="247:9" pos:end="247:33"><expr pos:start="247:9" pos:end="247:32"><name pos:start="247:9" pos:end="247:19"><name pos:start="247:9" pos:end="247:9">s</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:19">e2p_data</name></name> <operator pos:start="247:21" pos:end="247:21">=</operator> <name pos:start="247:23" pos:end="247:25">val</name> <operator pos:start="247:27" pos:end="247:27">&amp;</operator> <literal type="number" pos:start="247:29" pos:end="247:32">0xff</literal></expr>;</expr_stmt>

        <break pos:start="249:9" pos:end="249:14">break;</break>



    <default pos:start="253:5" pos:end="253:12">default:</default>

        <expr_stmt pos:start="255:9" pos:end="255:73"><expr pos:start="255:9" pos:end="255:72"><call pos:start="255:9" pos:end="255:72"><name pos:start="255:9" pos:end="255:16">hw_error</name><argument_list pos:start="255:17" pos:end="255:72">(<argument pos:start="255:18" pos:end="255:53"><expr pos:start="255:18" pos:end="255:53"><literal type="string" pos:start="255:18" pos:end="255:53">"lan9118_write: Bad reg 0x%x = %x\n"</literal></expr></argument>, <argument pos:start="255:56" pos:end="255:66"><expr pos:start="255:56" pos:end="255:66"><operator pos:start="255:56" pos:end="255:56">(</operator><name pos:start="255:57" pos:end="255:59">int</name><operator pos:start="255:60" pos:end="255:60">)</operator><name pos:start="255:61" pos:end="255:66">offset</name></expr></argument>, <argument pos:start="255:69" pos:end="255:71"><expr pos:start="255:69" pos:end="255:71"><name pos:start="255:69" pos:end="255:71">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="257:9" pos:end="257:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="261:5" pos:end="261:22"><expr pos:start="261:5" pos:end="261:21"><call pos:start="261:5" pos:end="261:21"><name pos:start="261:5" pos:end="261:18">lan9118_update</name><argument_list pos:start="261:19" pos:end="261:21">(<argument pos:start="261:20" pos:end="261:20"><expr pos:start="261:20" pos:end="261:20"><name pos:start="261:20" pos:end="261:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
