<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25802.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">dump_iterate</name><parameter_list pos:start="1:25" pos:end="1:52">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:34">DumpState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:44">Error</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier><modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">GuestPhysBlock</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="55:5">while <condition pos:start="15:11" pos:end="15:13">(<expr pos:start="15:12" pos:end="15:12"><literal type="number" pos:start="15:12" pos:end="15:12">1</literal></expr>)</condition> <block pos:start="15:15" pos:end="55:5">{<block_content pos:start="17:9" pos:end="53:9">

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:13">block</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:29"><name pos:start="17:17" pos:end="17:17">s</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:29">next_block</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:55"><expr pos:start="21:9" pos:end="21:54"><name pos:start="21:9" pos:end="21:12">size</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:32"><name pos:start="21:16" pos:end="21:20">block</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:32">target_end</name></name> <operator pos:start="21:34" pos:end="21:34">-</operator> <name pos:start="21:36" pos:end="21:54"><name pos:start="21:36" pos:end="21:40">block</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:54">target_start</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="23:26">(<expr pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:25">has_filter</name></name></expr>)</condition> <block pos:start="23:28" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:13">

            <expr_stmt pos:start="25:13" pos:end="25:29"><expr pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:16">size</name> <operator pos:start="25:18" pos:end="25:19">-=</operator> <name pos:start="25:21" pos:end="25:28"><name pos:start="25:21" pos:end="25:21">s</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:28">start</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="31:13"><if pos:start="27:13" pos:end="31:13">if <condition pos:start="27:16" pos:end="27:57">(<expr pos:start="27:17" pos:end="27:56"><name pos:start="27:17" pos:end="27:24"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:24">begin</name></name> <operator pos:start="27:26" pos:end="27:26">+</operator> <name pos:start="27:28" pos:end="27:36"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:36">length</name></name> <operator pos:start="27:38" pos:end="27:38">&lt;</operator> <name pos:start="27:40" pos:end="27:56"><name pos:start="27:40" pos:end="27:44">block</name><operator pos:start="27:45" pos:end="27:46">-&gt;</operator><name pos:start="27:47" pos:end="27:56">target_end</name></name></expr>)</condition> <block pos:start="27:59" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:67">

                <expr_stmt pos:start="29:17" pos:end="29:67"><expr pos:start="29:17" pos:end="29:66"><name pos:start="29:17" pos:end="29:20">size</name> <operator pos:start="29:22" pos:end="29:23">-=</operator> <name pos:start="29:25" pos:end="29:41"><name pos:start="29:25" pos:end="29:29">block</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:41">target_end</name></name> <operator pos:start="29:43" pos:end="29:43">-</operator> <operator pos:start="29:45" pos:end="29:45">(</operator><name pos:start="29:46" pos:end="29:53"><name pos:start="29:46" pos:end="29:46">s</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:53">begin</name></name> <operator pos:start="29:55" pos:end="29:55">+</operator> <name pos:start="29:57" pos:end="29:65"><name pos:start="29:57" pos:end="29:57">s</name><operator pos:start="29:58" pos:end="29:59">-&gt;</operator><name pos:start="29:60" pos:end="29:65">length</name></name><operator pos:start="29:66" pos:end="29:66">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:59"><expr pos:start="35:9" pos:end="35:58"><call pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:20">write_memory</name><argument_list pos:start="35:21" pos:end="35:58">(<argument pos:start="35:22" pos:end="35:22"><expr pos:start="35:22" pos:end="35:22"><name pos:start="35:22" pos:end="35:22">s</name></expr></argument>, <argument pos:start="35:25" pos:end="35:29"><expr pos:start="35:25" pos:end="35:29"><name pos:start="35:25" pos:end="35:29">block</name></expr></argument>, <argument pos:start="35:32" pos:end="35:39"><expr pos:start="35:32" pos:end="35:39"><name pos:start="35:32" pos:end="35:39"><name pos:start="35:32" pos:end="35:32">s</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:39">start</name></name></expr></argument>, <argument pos:start="35:42" pos:end="35:45"><expr pos:start="35:42" pos:end="35:45"><name pos:start="35:42" pos:end="35:45">size</name></expr></argument>, <argument pos:start="35:48" pos:end="35:57"><expr pos:start="35:48" pos:end="35:57"><operator pos:start="35:48" pos:end="35:48">&amp;</operator><name pos:start="35:49" pos:end="35:57">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:22">(<expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:21">local_err</name></expr>)</condition> <block pos:start="37:24" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:19">

            <expr_stmt pos:start="39:13" pos:end="39:45"><expr pos:start="39:13" pos:end="39:44"><call pos:start="39:13" pos:end="39:44"><name pos:start="39:13" pos:end="39:27">error_propagate</name><argument_list pos:start="39:28" pos:end="39:44">(<argument pos:start="39:29" pos:end="39:32"><expr pos:start="39:29" pos:end="39:32"><name pos:start="39:29" pos:end="39:32">errp</name></expr></argument>, <argument pos:start="39:35" pos:end="39:43"><expr pos:start="39:35" pos:end="39:43"><name pos:start="39:35" pos:end="39:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:38"><name pos:start="47:15" pos:end="47:28">get_next_block</name><argument_list pos:start="47:29" pos:end="47:38">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">s</name></expr></argument>, <argument pos:start="47:33" pos:end="47:37"><expr pos:start="47:33" pos:end="47:37"><name pos:start="47:33" pos:end="47:37">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:18">==</operator> <literal type="number" pos:start="49:20" pos:end="49:20">1</literal></expr>)</condition> <block pos:start="49:23" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:30">

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><call pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:26">dump_completed</name><argument_list pos:start="51:27" pos:end="51:29">(<argument pos:start="51:28" pos:end="51:28"><expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
