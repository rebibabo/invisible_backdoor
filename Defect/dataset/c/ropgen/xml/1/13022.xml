<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13022.c" pos:tabs="8"><function pos:start="1:1" pos:end="261:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">net_slirp_init</name><parameter_list pos:start="1:26" pos:end="13:49">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:33">Monitor</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">mon</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:49">VLANState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">vlan</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:74"><decl pos:start="1:58" pos:end="1:74"><type pos:start="1:58" pos:end="1:74"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">model</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">name</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:58">restricted</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:46"><decl pos:start="5:27" pos:end="5:46"><type pos:start="5:27" pos:end="5:46"><specifier pos:start="5:27" pos:end="5:31">const</specifier> <name pos:start="5:33" pos:end="5:36">char</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:46">vnetwork</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:65"><decl pos:start="5:49" pos:end="5:65"><type pos:start="5:49" pos:end="5:65"><specifier pos:start="5:49" pos:end="5:53">const</specifier> <name pos:start="5:55" pos:end="5:58">char</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:65">vhost</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:47"><decl pos:start="7:27" pos:end="7:47"><type pos:start="7:27" pos:end="7:47"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:36">char</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier></type><name pos:start="7:39" pos:end="7:47">vhostname</name></decl></parameter>, <parameter pos:start="7:50" pos:end="7:72"><decl pos:start="7:50" pos:end="7:72"><type pos:start="7:50" pos:end="7:72"><specifier pos:start="7:50" pos:end="7:54">const</specifier> <name pos:start="7:56" pos:end="7:59">char</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:72">tftp_export</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:46"><decl pos:start="9:27" pos:end="9:46"><type pos:start="9:27" pos:end="9:46"><specifier pos:start="9:27" pos:end="9:31">const</specifier> <name pos:start="9:33" pos:end="9:36">char</name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:46">bootfile</name></decl></parameter>, <parameter pos:start="9:49" pos:end="9:71"><decl pos:start="9:49" pos:end="9:71"><type pos:start="9:49" pos:end="9:71"><specifier pos:start="9:49" pos:end="9:53">const</specifier> <name pos:start="9:55" pos:end="9:58">char</name> <modifier pos:start="9:60" pos:end="9:60">*</modifier></type><name pos:start="9:61" pos:end="9:71">vdhcp_start</name></decl></parameter>,

                          <parameter pos:start="11:27" pos:end="11:49"><decl pos:start="11:27" pos:end="11:49"><type pos:start="11:27" pos:end="11:49"><specifier pos:start="11:27" pos:end="11:31">const</specifier> <name pos:start="11:33" pos:end="11:36">char</name> <modifier pos:start="11:38" pos:end="11:38">*</modifier></type><name pos:start="11:39" pos:end="11:49">vnameserver</name></decl></parameter>, <parameter pos:start="11:52" pos:end="11:73"><decl pos:start="11:52" pos:end="11:73"><type pos:start="11:52" pos:end="11:73"><specifier pos:start="11:52" pos:end="11:56">const</specifier> <name pos:start="11:58" pos:end="11:61">char</name> <modifier pos:start="11:63" pos:end="11:63">*</modifier></type><name pos:start="11:64" pos:end="11:73">smb_export</name></decl></parameter>,

                          <parameter pos:start="13:27" pos:end="13:48"><decl pos:start="13:27" pos:end="13:48"><type pos:start="13:27" pos:end="13:48"><specifier pos:start="13:27" pos:end="13:31">const</specifier> <name pos:start="13:33" pos:end="13:36">char</name> <modifier pos:start="13:38" pos:end="13:38">*</modifier></type><name pos:start="13:39" pos:end="13:48">vsmbserver</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="261:1">{<block_content pos:start="19:5" pos:end="259:13">

    <comment type="block" pos:start="17:5" pos:end="17:54">/* default settings according to historic slirp */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:18">in_addr</name></name></type> <name pos:start="19:20" pos:end="19:22">net</name>  <init pos:start="19:25" pos:end="19:57">= <expr pos:start="19:27" pos:end="19:57"><block pos:start="19:27" pos:end="19:57">{ <expr pos:start="19:29" pos:end="19:55"><operator pos:start="19:29" pos:end="19:29">.</operator><name pos:start="19:30" pos:end="19:35">s_addr</name> <operator pos:start="19:37" pos:end="19:37">=</operator> <macro pos:start="19:39" pos:end="19:55"><name pos:start="19:39" pos:end="19:43">htonl</name><argument_list pos:start="19:44" pos:end="19:55">(<argument pos:start="19:45" pos:end="19:54"><literal type="number" pos:start="19:45" pos:end="19:54">0x0a000200</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="19:60" pos:end="19:73">/* 10.0.2.0 */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:57"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:18">in_addr</name></name></type> <name pos:start="21:20" pos:end="21:23">mask</name> <init pos:start="21:25" pos:end="21:57">= <expr pos:start="21:27" pos:end="21:57"><block pos:start="21:27" pos:end="21:57">{ <expr pos:start="21:29" pos:end="21:55"><operator pos:start="21:29" pos:end="21:29">.</operator><name pos:start="21:30" pos:end="21:35">s_addr</name> <operator pos:start="21:37" pos:end="21:37">=</operator> <macro pos:start="21:39" pos:end="21:55"><name pos:start="21:39" pos:end="21:43">htonl</name><argument_list pos:start="21:44" pos:end="21:55">(<argument pos:start="21:45" pos:end="21:54"><literal type="number" pos:start="21:45" pos:end="21:54">0xffffff00</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="21:60" pos:end="21:78">/* 255.255.255.0 */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:58"><decl pos:start="23:5" pos:end="23:57"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:18">in_addr</name></name></type> <name pos:start="23:20" pos:end="23:23">host</name> <init pos:start="23:25" pos:end="23:57">= <expr pos:start="23:27" pos:end="23:57"><block pos:start="23:27" pos:end="23:57">{ <expr pos:start="23:29" pos:end="23:55"><operator pos:start="23:29" pos:end="23:29">.</operator><name pos:start="23:30" pos:end="23:35">s_addr</name> <operator pos:start="23:37" pos:end="23:37">=</operator> <macro pos:start="23:39" pos:end="23:55"><name pos:start="23:39" pos:end="23:43">htonl</name><argument_list pos:start="23:44" pos:end="23:55">(<argument pos:start="23:45" pos:end="23:54"><literal type="number" pos:start="23:45" pos:end="23:54">0x0a000202</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="23:60" pos:end="23:73">/* 10.0.2.2 */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:58"><decl pos:start="25:5" pos:end="25:57"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:18">in_addr</name></name></type> <name pos:start="25:20" pos:end="25:23">dhcp</name> <init pos:start="25:25" pos:end="25:57">= <expr pos:start="25:27" pos:end="25:57"><block pos:start="25:27" pos:end="25:57">{ <expr pos:start="25:29" pos:end="25:55"><operator pos:start="25:29" pos:end="25:29">.</operator><name pos:start="25:30" pos:end="25:35">s_addr</name> <operator pos:start="25:37" pos:end="25:37">=</operator> <macro pos:start="25:39" pos:end="25:55"><name pos:start="25:39" pos:end="25:43">htonl</name><argument_list pos:start="25:44" pos:end="25:55">(<argument pos:start="25:45" pos:end="25:54"><literal type="number" pos:start="25:45" pos:end="25:54">0x0a00020f</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="25:60" pos:end="25:74">/* 10.0.2.15 */</comment>

    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:57"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:10">struct</name> <name pos:start="27:12" pos:end="27:18">in_addr</name></name></type> <name pos:start="27:20" pos:end="27:22">dns</name>  <init pos:start="27:25" pos:end="27:57">= <expr pos:start="27:27" pos:end="27:57"><block pos:start="27:27" pos:end="27:57">{ <expr pos:start="27:29" pos:end="27:55"><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:35">s_addr</name> <operator pos:start="27:37" pos:end="27:37">=</operator> <macro pos:start="27:39" pos:end="27:55"><name pos:start="27:39" pos:end="27:43">htonl</name><argument_list pos:start="27:44" pos:end="27:55">(<argument pos:start="27:45" pos:end="27:54"><literal type="number" pos:start="27:45" pos:end="27:54">0x0a000203</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="27:60" pos:end="27:73">/* 10.0.2.3 */</comment>

<cpp:ifndef pos:start="29:1" pos:end="29:14">#<cpp:directive pos:start="29:2" pos:end="29:7">ifndef</cpp:directive> <name pos:start="29:9" pos:end="29:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="31:5" pos:end="34:0"><decl pos:start="31:5" pos:end="31:43"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:10">struct</name> <name pos:start="31:12" pos:end="31:18">in_addr</name></name></type> <name pos:start="31:20" pos:end="31:25">smbsrv</name> <init pos:start="31:27" pos:end="31:43">= <expr pos:start="31:29" pos:end="31:43"><block pos:start="31:29" pos:end="31:43">{ <expr pos:start="31:31" pos:end="31:41"><operator pos:start="31:31" pos:end="31:31">.</operator><name pos:start="31:32" pos:end="31:37">s_addr</name> <operator pos:start="31:39" pos:end="31:39">=</operator> <literal type="number" pos:start="31:41" pos:end="31:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:14">SlirpState</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:17"><decl pos:start="37:5" pos:end="37:16"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">char</name></type> <name pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:12">buf</name><index pos:start="37:13" pos:end="37:16">[<expr pos:start="37:14" pos:end="37:15"><literal type="number" pos:start="37:14" pos:end="37:15">20</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:18"><decl pos:start="39:5" pos:end="39:17"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint32_t</name></type> <name pos:start="39:14" pos:end="39:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:14"><decl pos:start="41:5" pos:end="41:13"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:14"><decl pos:start="43:5" pos:end="43:13"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:8">char</name> <modifier pos:start="43:10" pos:end="43:10">*</modifier></type><name pos:start="43:11" pos:end="43:13">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:36"><decl pos:start="45:5" pos:end="45:35"><type pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:10">struct</name> <name pos:start="45:12" pos:end="45:27">slirp_config_str</name></name> <modifier pos:start="45:29" pos:end="45:29">*</modifier></type><name pos:start="45:30" pos:end="45:35">config</name></decl>;</decl_stmt>



    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:21">(<expr pos:start="49:9" pos:end="49:20"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:20">tftp_export</name></expr>)</condition> <block pos:start="49:23" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:41">

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:19">tftp_export</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:40">legacy_tftp_prefix</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:17">bootfile</name></expr>)</condition> <block pos:start="55:20" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:41">

        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:16">bootfile</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:40">legacy_bootp_filename</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="143:5"><if pos:start="63:5" pos:end="143:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:16">vnetwork</name></expr>)</condition> <block pos:start="63:19" pos:end="143:5">{<block_content pos:start="65:9" pos:end="141:66">

        <if_stmt pos:start="65:9" pos:end="133:9"><if pos:start="65:9" pos:end="105:9">if <condition pos:start="65:12" pos:end="65:62">(<expr pos:start="65:13" pos:end="65:61"><call pos:start="65:13" pos:end="65:57"><name pos:start="65:13" pos:end="65:23">get_str_sep</name><argument_list pos:start="65:24" pos:end="65:57">(<argument pos:start="65:25" pos:end="65:27"><expr pos:start="65:25" pos:end="65:27"><name pos:start="65:25" pos:end="65:27">buf</name></expr></argument>, <argument pos:start="65:30" pos:end="65:40"><expr pos:start="65:30" pos:end="65:40"><sizeof pos:start="65:30" pos:end="65:40">sizeof<argument_list pos:start="65:36" pos:end="65:40">(<argument pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="65:43" pos:end="65:51"><expr pos:start="65:43" pos:end="65:51"><operator pos:start="65:43" pos:end="65:43">&amp;</operator><name pos:start="65:44" pos:end="65:51">vnetwork</name></expr></argument>, <argument pos:start="65:54" pos:end="65:56"><expr pos:start="65:54" pos:end="65:56"><literal type="char" pos:start="65:54" pos:end="65:56">'/'</literal></expr></argument>)</argument_list></call> <operator pos:start="65:59" pos:end="65:59">&lt;</operator> <literal type="number" pos:start="65:61" pos:end="65:61">0</literal></expr>)</condition> <block pos:start="65:64" pos:end="105:9">{<block_content pos:start="67:13" pos:end="103:13">

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:43">(<expr pos:start="67:17" pos:end="67:42"><operator pos:start="67:17" pos:end="67:17">!</operator><call pos:start="67:18" pos:end="67:42"><name pos:start="67:18" pos:end="67:26">inet_aton</name><argument_list pos:start="67:27" pos:end="67:42">(<argument pos:start="67:28" pos:end="67:35"><expr pos:start="67:28" pos:end="67:35"><name pos:start="67:28" pos:end="67:35">vnetwork</name></expr></argument>, <argument pos:start="67:38" pos:end="67:41"><expr pos:start="67:38" pos:end="67:41"><operator pos:start="67:38" pos:end="67:38">&amp;</operator><name pos:start="67:39" pos:end="67:41">net</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:45" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:26">

                <return pos:start="69:17" pos:end="69:26">return <expr pos:start="69:24" pos:end="69:25"><operator pos:start="69:24" pos:end="69:24">-</operator><literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:37"><expr pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:16">addr</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:36"><name pos:start="73:20" pos:end="73:24">ntohl</name><argument_list pos:start="73:25" pos:end="73:36">(<argument pos:start="73:26" pos:end="73:35"><expr pos:start="73:26" pos:end="73:35"><name pos:start="73:26" pos:end="73:35"><name pos:start="73:26" pos:end="73:28">net</name><operator pos:start="73:29" pos:end="73:29">.</operator><name pos:start="73:30" pos:end="73:35">s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="103:13"><if pos:start="75:13" pos:end="79:13">if <condition pos:start="75:16" pos:end="75:37">(<expr pos:start="75:17" pos:end="75:36"><operator pos:start="75:17" pos:end="75:17">!</operator><operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:22">addr</name> <operator pos:start="75:24" pos:end="75:24">&amp;</operator> <literal type="number" pos:start="75:26" pos:end="75:35">0x80000000</literal><operator pos:start="75:36" pos:end="75:36">)</operator></expr>)</condition> <block pos:start="75:39" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:48">

                <expr_stmt pos:start="77:17" pos:end="77:48"><expr pos:start="77:17" pos:end="77:47"><name pos:start="77:17" pos:end="77:27"><name pos:start="77:17" pos:end="77:20">mask</name><operator pos:start="77:21" pos:end="77:21">.</operator><name pos:start="77:22" pos:end="77:27">s_addr</name></name> <operator pos:start="77:29" pos:end="77:29">=</operator> <call pos:start="77:31" pos:end="77:47"><name pos:start="77:31" pos:end="77:35">htonl</name><argument_list pos:start="77:36" pos:end="77:47">(<argument pos:start="77:37" pos:end="77:46"><expr pos:start="77:37" pos:end="77:46"><literal type="number" pos:start="77:37" pos:end="77:46">0xff000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="77:50" pos:end="77:62">/* class A */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="79:15" pos:end="83:13">else if <condition pos:start="79:23" pos:end="79:57">(<expr pos:start="79:24" pos:end="79:56"><operator pos:start="79:24" pos:end="79:24">(</operator><name pos:start="79:25" pos:end="79:28">addr</name> <operator pos:start="79:30" pos:end="79:30">&amp;</operator> <literal type="number" pos:start="79:32" pos:end="79:41">0xfff00000</literal><operator pos:start="79:42" pos:end="79:42">)</operator> <operator pos:start="79:44" pos:end="79:45">==</operator> <literal type="number" pos:start="79:47" pos:end="79:56">0xac100000</literal></expr>)</condition> <block pos:start="79:59" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:48">

                <expr_stmt pos:start="81:17" pos:end="81:48"><expr pos:start="81:17" pos:end="81:47"><name pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:20">mask</name><operator pos:start="81:21" pos:end="81:21">.</operator><name pos:start="81:22" pos:end="81:27">s_addr</name></name> <operator pos:start="81:29" pos:end="81:29">=</operator> <call pos:start="81:31" pos:end="81:47"><name pos:start="81:31" pos:end="81:35">htonl</name><argument_list pos:start="81:36" pos:end="81:47">(<argument pos:start="81:37" pos:end="81:46"><expr pos:start="81:37" pos:end="81:46"><literal type="number" pos:start="81:37" pos:end="81:46">0xfff00000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="81:50" pos:end="81:74">/* priv. 172.16.0.0/12 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="83:15" pos:end="87:13">else if <condition pos:start="83:23" pos:end="83:57">(<expr pos:start="83:24" pos:end="83:56"><operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:28">addr</name> <operator pos:start="83:30" pos:end="83:30">&amp;</operator> <literal type="number" pos:start="83:32" pos:end="83:41">0xc0000000</literal><operator pos:start="83:42" pos:end="83:42">)</operator> <operator pos:start="83:44" pos:end="83:45">==</operator> <literal type="number" pos:start="83:47" pos:end="83:56">0x80000000</literal></expr>)</condition> <block pos:start="83:59" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:48">

                <expr_stmt pos:start="85:17" pos:end="85:48"><expr pos:start="85:17" pos:end="85:47"><name pos:start="85:17" pos:end="85:27"><name pos:start="85:17" pos:end="85:20">mask</name><operator pos:start="85:21" pos:end="85:21">.</operator><name pos:start="85:22" pos:end="85:27">s_addr</name></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <call pos:start="85:31" pos:end="85:47"><name pos:start="85:31" pos:end="85:35">htonl</name><argument_list pos:start="85:36" pos:end="85:47">(<argument pos:start="85:37" pos:end="85:46"><expr pos:start="85:37" pos:end="85:46"><literal type="number" pos:start="85:37" pos:end="85:46">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="85:50" pos:end="85:62">/* class B */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="87:15" pos:end="91:13">else if <condition pos:start="87:23" pos:end="87:57">(<expr pos:start="87:24" pos:end="87:56"><operator pos:start="87:24" pos:end="87:24">(</operator><name pos:start="87:25" pos:end="87:28">addr</name> <operator pos:start="87:30" pos:end="87:30">&amp;</operator> <literal type="number" pos:start="87:32" pos:end="87:41">0xffff0000</literal><operator pos:start="87:42" pos:end="87:42">)</operator> <operator pos:start="87:44" pos:end="87:45">==</operator> <literal type="number" pos:start="87:47" pos:end="87:56">0xc0a80000</literal></expr>)</condition> <block pos:start="87:59" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:48">

                <expr_stmt pos:start="89:17" pos:end="89:48"><expr pos:start="89:17" pos:end="89:47"><name pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:20">mask</name><operator pos:start="89:21" pos:end="89:21">.</operator><name pos:start="89:22" pos:end="89:27">s_addr</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <call pos:start="89:31" pos:end="89:47"><name pos:start="89:31" pos:end="89:35">htonl</name><argument_list pos:start="89:36" pos:end="89:47">(<argument pos:start="89:37" pos:end="89:46"><expr pos:start="89:37" pos:end="89:46"><literal type="number" pos:start="89:37" pos:end="89:46">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="89:50" pos:end="89:75">/* priv. 192.168.0.0/16 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="91:15" pos:end="95:13">else if <condition pos:start="91:23" pos:end="91:57">(<expr pos:start="91:24" pos:end="91:56"><operator pos:start="91:24" pos:end="91:24">(</operator><name pos:start="91:25" pos:end="91:28">addr</name> <operator pos:start="91:30" pos:end="91:30">&amp;</operator> <literal type="number" pos:start="91:32" pos:end="91:41">0xffff0000</literal><operator pos:start="91:42" pos:end="91:42">)</operator> <operator pos:start="91:44" pos:end="91:45">==</operator> <literal type="number" pos:start="91:47" pos:end="91:56">0xc6120000</literal></expr>)</condition> <block pos:start="91:59" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:48">

                <expr_stmt pos:start="93:17" pos:end="93:48"><expr pos:start="93:17" pos:end="93:47"><name pos:start="93:17" pos:end="93:27"><name pos:start="93:17" pos:end="93:20">mask</name><operator pos:start="93:21" pos:end="93:21">.</operator><name pos:start="93:22" pos:end="93:27">s_addr</name></name> <operator pos:start="93:29" pos:end="93:29">=</operator> <call pos:start="93:31" pos:end="93:47"><name pos:start="93:31" pos:end="93:35">htonl</name><argument_list pos:start="93:36" pos:end="93:47">(<argument pos:start="93:37" pos:end="93:46"><expr pos:start="93:37" pos:end="93:46"><literal type="number" pos:start="93:37" pos:end="93:46">0xfffe0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="93:50" pos:end="93:74">/* tests 198.18.0.0/15 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="95:15" pos:end="99:13">else if <condition pos:start="95:23" pos:end="95:57">(<expr pos:start="95:24" pos:end="95:56"><operator pos:start="95:24" pos:end="95:24">(</operator><name pos:start="95:25" pos:end="95:28">addr</name> <operator pos:start="95:30" pos:end="95:30">&amp;</operator> <literal type="number" pos:start="95:32" pos:end="95:41">0xe0000000</literal><operator pos:start="95:42" pos:end="95:42">)</operator> <operator pos:start="95:44" pos:end="95:45">==</operator> <literal type="number" pos:start="95:47" pos:end="95:56">0xe0000000</literal></expr>)</condition> <block pos:start="95:59" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:48">

                <expr_stmt pos:start="97:17" pos:end="97:48"><expr pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:27"><name pos:start="97:17" pos:end="97:20">mask</name><operator pos:start="97:21" pos:end="97:21">.</operator><name pos:start="97:22" pos:end="97:27">s_addr</name></name> <operator pos:start="97:29" pos:end="97:29">=</operator> <call pos:start="97:31" pos:end="97:47"><name pos:start="97:31" pos:end="97:35">htonl</name><argument_list pos:start="97:36" pos:end="97:47">(<argument pos:start="97:37" pos:end="97:46"><expr pos:start="97:37" pos:end="97:46"><literal type="number" pos:start="97:37" pos:end="97:46">0xffffff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="97:50" pos:end="97:62">/* class C */</comment>

            </block_content>}</block></if> <else pos:start="99:15" pos:end="103:13">else <block pos:start="99:20" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:48">

                <expr_stmt pos:start="101:17" pos:end="101:48"><expr pos:start="101:17" pos:end="101:47"><name pos:start="101:17" pos:end="101:27"><name pos:start="101:17" pos:end="101:20">mask</name><operator pos:start="101:21" pos:end="101:21">.</operator><name pos:start="101:22" pos:end="101:27">s_addr</name></name> <operator pos:start="101:29" pos:end="101:29">=</operator> <call pos:start="101:31" pos:end="101:47"><name pos:start="101:31" pos:end="101:35">htonl</name><argument_list pos:start="101:36" pos:end="101:47">(<argument pos:start="101:37" pos:end="101:46"><expr pos:start="101:37" pos:end="101:46"><literal type="number" pos:start="101:37" pos:end="101:46">0xfffffff0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:50" pos:end="101:73">/* multicast/reserved */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="133:9">else <block pos:start="105:16" pos:end="133:9">{<block_content pos:start="107:13" pos:end="131:13">

            <if_stmt pos:start="107:13" pos:end="111:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:38">(<expr pos:start="107:17" pos:end="107:37"><operator pos:start="107:17" pos:end="107:17">!</operator><call pos:start="107:18" pos:end="107:37"><name pos:start="107:18" pos:end="107:26">inet_aton</name><argument_list pos:start="107:27" pos:end="107:37">(<argument pos:start="107:28" pos:end="107:30"><expr pos:start="107:28" pos:end="107:30"><name pos:start="107:28" pos:end="107:30">buf</name></expr></argument>, <argument pos:start="107:33" pos:end="107:36"><expr pos:start="107:33" pos:end="107:36"><operator pos:start="107:33" pos:end="107:33">&amp;</operator><name pos:start="107:34" pos:end="107:36">net</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:40" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:26">

                <return pos:start="109:17" pos:end="109:26">return <expr pos:start="109:24" pos:end="109:25"><operator pos:start="109:24" pos:end="109:24">-</operator><literal type="number" pos:start="109:25" pos:end="109:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:47"><expr pos:start="113:13" pos:end="113:46"><name pos:start="113:13" pos:end="113:17">shift</name> <operator pos:start="113:19" pos:end="113:19">=</operator> <call pos:start="113:21" pos:end="113:46"><name pos:start="113:21" pos:end="113:26">strtol</name><argument_list pos:start="113:27" pos:end="113:46">(<argument pos:start="113:28" pos:end="113:35"><expr pos:start="113:28" pos:end="113:35"><name pos:start="113:28" pos:end="113:35">vnetwork</name></expr></argument>, <argument pos:start="113:38" pos:end="113:41"><expr pos:start="113:38" pos:end="113:41"><operator pos:start="113:38" pos:end="113:38">&amp;</operator><name pos:start="113:39" pos:end="113:41">end</name></expr></argument>, <argument pos:start="113:44" pos:end="113:45"><expr pos:start="113:44" pos:end="113:45"><literal type="number" pos:start="113:44" pos:end="113:45">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="131:13"><if pos:start="115:13" pos:end="123:13">if <condition pos:start="115:16" pos:end="115:29">(<expr pos:start="115:17" pos:end="115:28"><operator pos:start="115:17" pos:end="115:17">*</operator><name pos:start="115:18" pos:end="115:20">end</name> <operator pos:start="115:22" pos:end="115:23">!=</operator> <literal type="char" pos:start="115:25" pos:end="115:28">'\0'</literal></expr>)</condition> <block pos:start="115:31" pos:end="123:13">{<block_content pos:start="117:17" pos:end="121:17">

                <if_stmt pos:start="117:17" pos:end="121:17"><if pos:start="117:17" pos:end="121:17">if <condition pos:start="117:20" pos:end="117:48">(<expr pos:start="117:21" pos:end="117:47"><operator pos:start="117:21" pos:end="117:21">!</operator><call pos:start="117:22" pos:end="117:47"><name pos:start="117:22" pos:end="117:30">inet_aton</name><argument_list pos:start="117:31" pos:end="117:47">(<argument pos:start="117:32" pos:end="117:39"><expr pos:start="117:32" pos:end="117:39"><name pos:start="117:32" pos:end="117:39">vnetwork</name></expr></argument>, <argument pos:start="117:42" pos:end="117:46"><expr pos:start="117:42" pos:end="117:46"><operator pos:start="117:42" pos:end="117:42">&amp;</operator><name pos:start="117:43" pos:end="117:46">mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:50" pos:end="121:17">{<block_content pos:start="119:21" pos:end="119:30">

                    <return pos:start="119:21" pos:end="119:30">return <expr pos:start="119:28" pos:end="119:29"><operator pos:start="119:28" pos:end="119:28">-</operator><literal type="number" pos:start="119:29" pos:end="119:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="123:15" pos:end="127:13">else if <condition pos:start="123:23" pos:end="123:47">(<expr pos:start="123:24" pos:end="123:46"><name pos:start="123:24" pos:end="123:43"><name pos:start="123:24" pos:end="123:28">shift</name> <argument_list type="generic" pos:start="123:30" pos:end="123:43">&lt; <argument pos:start="123:32" pos:end="123:41"><expr pos:start="123:32" pos:end="123:41"><literal type="number" pos:start="123:32" pos:end="123:32">4</literal> <operator pos:start="123:34" pos:end="123:35">||</operator> <name pos:start="123:37" pos:end="123:41">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="123:45" pos:end="123:46">32</literal></expr>)</condition> <block pos:start="123:49" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:26">

                <return pos:start="125:17" pos:end="125:26">return <expr pos:start="125:24" pos:end="125:25"><operator pos:start="125:24" pos:end="125:24">-</operator><literal type="number" pos:start="125:25" pos:end="125:25">1</literal></expr>;</return>

            </block_content>}</block></if> <else pos:start="127:15" pos:end="131:13">else <block pos:start="127:20" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:64">

                <expr_stmt pos:start="129:17" pos:end="129:64"><expr pos:start="129:17" pos:end="129:63"><name pos:start="129:17" pos:end="129:27"><name pos:start="129:17" pos:end="129:20">mask</name><operator pos:start="129:21" pos:end="129:21">.</operator><name pos:start="129:22" pos:end="129:27">s_addr</name></name> <operator pos:start="129:29" pos:end="129:29">=</operator> <call pos:start="129:31" pos:end="129:63"><name pos:start="129:31" pos:end="129:35">htonl</name><argument_list pos:start="129:36" pos:end="129:63">(<argument pos:start="129:37" pos:end="129:62"><expr pos:start="129:37" pos:end="129:62"><literal type="number" pos:start="129:37" pos:end="129:46">0xffffffff</literal> <operator pos:start="129:48" pos:end="129:49">&lt;&lt;</operator> <operator pos:start="129:51" pos:end="129:51">(</operator><literal type="number" pos:start="129:52" pos:end="129:55">32</literal> <operator pos:start="129:55" pos:end="129:55">-</operator> <name pos:start="129:57" pos:end="129:61">shift</name><operator pos:start="129:62" pos:end="129:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:34"><expr pos:start="135:9" pos:end="135:33"><name pos:start="135:9" pos:end="135:18"><name pos:start="135:9" pos:end="135:11">net</name><operator pos:start="135:12" pos:end="135:12">.</operator><name pos:start="135:13" pos:end="135:18">s_addr</name></name> <operator pos:start="135:20" pos:end="135:21">&amp;=</operator> <name pos:start="135:23" pos:end="135:33"><name pos:start="135:23" pos:end="135:26">mask</name><operator pos:start="135:27" pos:end="135:27">.</operator><name pos:start="135:28" pos:end="135:33">s_addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:66"><expr pos:start="137:9" pos:end="137:65"><name pos:start="137:9" pos:end="137:19"><name pos:start="137:9" pos:end="137:12">host</name><operator pos:start="137:13" pos:end="137:13">.</operator><name pos:start="137:14" pos:end="137:19">s_addr</name></name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:32"><name pos:start="137:23" pos:end="137:25">net</name><operator pos:start="137:26" pos:end="137:26">.</operator><name pos:start="137:27" pos:end="137:32">s_addr</name></name> <operator pos:start="137:34" pos:end="137:34">|</operator> <operator pos:start="137:36" pos:end="137:36">(</operator><call pos:start="137:37" pos:end="137:49"><name pos:start="137:37" pos:end="137:41">htonl</name><argument_list pos:start="137:42" pos:end="137:49">(<argument pos:start="137:43" pos:end="137:48"><expr pos:start="137:43" pos:end="137:48"><literal type="number" pos:start="137:43" pos:end="137:48">0x0202</literal></expr></argument>)</argument_list></call> <operator pos:start="137:51" pos:end="137:51">&amp;</operator> <operator pos:start="137:53" pos:end="137:53">~</operator><name pos:start="137:54" pos:end="137:64"><name pos:start="137:54" pos:end="137:57">mask</name><operator pos:start="137:58" pos:end="137:58">.</operator><name pos:start="137:59" pos:end="137:64">s_addr</name></name><operator pos:start="137:65" pos:end="137:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:66"><expr pos:start="139:9" pos:end="139:65"><name pos:start="139:9" pos:end="139:19"><name pos:start="139:9" pos:end="139:12">dhcp</name><operator pos:start="139:13" pos:end="139:13">.</operator><name pos:start="139:14" pos:end="139:19">s_addr</name></name> <operator pos:start="139:21" pos:end="139:21">=</operator> <name pos:start="139:23" pos:end="139:32"><name pos:start="139:23" pos:end="139:25">net</name><operator pos:start="139:26" pos:end="139:26">.</operator><name pos:start="139:27" pos:end="139:32">s_addr</name></name> <operator pos:start="139:34" pos:end="139:34">|</operator> <operator pos:start="139:36" pos:end="139:36">(</operator><call pos:start="139:37" pos:end="139:49"><name pos:start="139:37" pos:end="139:41">htonl</name><argument_list pos:start="139:42" pos:end="139:49">(<argument pos:start="139:43" pos:end="139:48"><expr pos:start="139:43" pos:end="139:48"><literal type="number" pos:start="139:43" pos:end="139:48">0x020f</literal></expr></argument>)</argument_list></call> <operator pos:start="139:51" pos:end="139:51">&amp;</operator> <operator pos:start="139:53" pos:end="139:53">~</operator><name pos:start="139:54" pos:end="139:64"><name pos:start="139:54" pos:end="139:57">mask</name><operator pos:start="139:58" pos:end="139:58">.</operator><name pos:start="139:59" pos:end="139:64">s_addr</name></name><operator pos:start="139:65" pos:end="139:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:66"><expr pos:start="141:9" pos:end="141:65"><name pos:start="141:9" pos:end="141:18"><name pos:start="141:9" pos:end="141:11">dns</name><operator pos:start="141:12" pos:end="141:12">.</operator><name pos:start="141:13" pos:end="141:18">s_addr</name></name>  <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:32"><name pos:start="141:23" pos:end="141:25">net</name><operator pos:start="141:26" pos:end="141:26">.</operator><name pos:start="141:27" pos:end="141:32">s_addr</name></name> <operator pos:start="141:34" pos:end="141:34">|</operator> <operator pos:start="141:36" pos:end="141:36">(</operator><call pos:start="141:37" pos:end="141:49"><name pos:start="141:37" pos:end="141:41">htonl</name><argument_list pos:start="141:42" pos:end="141:49">(<argument pos:start="141:43" pos:end="141:48"><expr pos:start="141:43" pos:end="141:48"><literal type="number" pos:start="141:43" pos:end="141:48">0x0203</literal></expr></argument>)</argument_list></call> <operator pos:start="141:51" pos:end="141:51">&amp;</operator> <operator pos:start="141:53" pos:end="141:53">~</operator><name pos:start="141:54" pos:end="141:64"><name pos:start="141:54" pos:end="141:57">mask</name><operator pos:start="141:58" pos:end="141:58">.</operator><name pos:start="141:59" pos:end="141:64">s_addr</name></name><operator pos:start="141:65" pos:end="141:65">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:42">(<expr pos:start="147:9" pos:end="147:41"><name pos:start="147:9" pos:end="147:13">vhost</name> <operator pos:start="147:15" pos:end="147:16">&amp;&amp;</operator> <operator pos:start="147:18" pos:end="147:18">!</operator><call pos:start="147:19" pos:end="147:41"><name pos:start="147:19" pos:end="147:27">inet_aton</name><argument_list pos:start="147:28" pos:end="147:41">(<argument pos:start="147:29" pos:end="147:33"><expr pos:start="147:29" pos:end="147:33"><name pos:start="147:29" pos:end="147:33">vhost</name></expr></argument>, <argument pos:start="147:36" pos:end="147:40"><expr pos:start="147:36" pos:end="147:40"><operator pos:start="147:36" pos:end="147:36">&amp;</operator><name pos:start="147:37" pos:end="147:40">host</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:44" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:18">

        <return pos:start="149:9" pos:end="149:18">return <expr pos:start="149:16" pos:end="149:17"><operator pos:start="149:16" pos:end="149:16">-</operator><literal type="number" pos:start="149:17" pos:end="149:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="153:5" pos:end="157:5"><if pos:start="153:5" pos:end="157:5">if <condition pos:start="153:8" pos:end="153:50">(<expr pos:start="153:9" pos:end="153:49"><operator pos:start="153:9" pos:end="153:9">(</operator><name pos:start="153:10" pos:end="153:20"><name pos:start="153:10" pos:end="153:13">host</name><operator pos:start="153:14" pos:end="153:14">.</operator><name pos:start="153:15" pos:end="153:20">s_addr</name></name> <operator pos:start="153:22" pos:end="153:22">&amp;</operator> <name pos:start="153:24" pos:end="153:34"><name pos:start="153:24" pos:end="153:27">mask</name><operator pos:start="153:28" pos:end="153:28">.</operator><name pos:start="153:29" pos:end="153:34">s_addr</name></name><operator pos:start="153:35" pos:end="153:35">)</operator> <operator pos:start="153:37" pos:end="153:38">!=</operator> <name pos:start="153:40" pos:end="153:49"><name pos:start="153:40" pos:end="153:42">net</name><operator pos:start="153:43" pos:end="153:43">.</operator><name pos:start="153:44" pos:end="153:49">s_addr</name></name></expr>)</condition> <block pos:start="153:52" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:18">

        <return pos:start="155:9" pos:end="155:18">return <expr pos:start="155:16" pos:end="155:17"><operator pos:start="155:16" pos:end="155:16">-</operator><literal type="number" pos:start="155:17" pos:end="155:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:54">(<expr pos:start="161:9" pos:end="161:53"><name pos:start="161:9" pos:end="161:19">vdhcp_start</name> <operator pos:start="161:21" pos:end="161:22">&amp;&amp;</operator> <operator pos:start="161:24" pos:end="161:24">!</operator><call pos:start="161:25" pos:end="161:53"><name pos:start="161:25" pos:end="161:33">inet_aton</name><argument_list pos:start="161:34" pos:end="161:53">(<argument pos:start="161:35" pos:end="161:45"><expr pos:start="161:35" pos:end="161:45"><name pos:start="161:35" pos:end="161:45">vdhcp_start</name></expr></argument>, <argument pos:start="161:48" pos:end="161:52"><expr pos:start="161:48" pos:end="161:52"><operator pos:start="161:48" pos:end="161:48">&amp;</operator><name pos:start="161:49" pos:end="161:52">dhcp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:56" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:18">

        <return pos:start="163:9" pos:end="163:18">return <expr pos:start="163:16" pos:end="163:17"><operator pos:start="163:16" pos:end="163:16">-</operator><literal type="number" pos:start="163:17" pos:end="163:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="169:64">(<expr pos:start="167:9" pos:end="169:63"><operator pos:start="167:9" pos:end="167:9">(</operator><name pos:start="167:10" pos:end="167:20"><name pos:start="167:10" pos:end="167:13">dhcp</name><operator pos:start="167:14" pos:end="167:14">.</operator><name pos:start="167:15" pos:end="167:20">s_addr</name></name> <operator pos:start="167:22" pos:end="167:22">&amp;</operator> <name pos:start="167:24" pos:end="167:34"><name pos:start="167:24" pos:end="167:27">mask</name><operator pos:start="167:28" pos:end="167:28">.</operator><name pos:start="167:29" pos:end="167:34">s_addr</name></name><operator pos:start="167:35" pos:end="167:35">)</operator> <operator pos:start="167:37" pos:end="167:38">!=</operator> <name pos:start="167:40" pos:end="167:49"><name pos:start="167:40" pos:end="167:42">net</name><operator pos:start="167:43" pos:end="167:43">.</operator><name pos:start="167:44" pos:end="167:49">s_addr</name></name> <operator pos:start="167:51" pos:end="167:52">||</operator>

        <name pos:start="169:9" pos:end="169:19"><name pos:start="169:9" pos:end="169:12">dhcp</name><operator pos:start="169:13" pos:end="169:13">.</operator><name pos:start="169:14" pos:end="169:19">s_addr</name></name> <operator pos:start="169:21" pos:end="169:22">==</operator> <name pos:start="169:24" pos:end="169:34"><name pos:start="169:24" pos:end="169:27">host</name><operator pos:start="169:28" pos:end="169:28">.</operator><name pos:start="169:29" pos:end="169:34">s_addr</name></name> <operator pos:start="169:36" pos:end="169:37">||</operator> <name pos:start="169:39" pos:end="169:49"><name pos:start="169:39" pos:end="169:42">dhcp</name><operator pos:start="169:43" pos:end="169:43">.</operator><name pos:start="169:44" pos:end="169:49">s_addr</name></name> <operator pos:start="169:51" pos:end="169:52">==</operator> <name pos:start="169:54" pos:end="169:63"><name pos:start="169:54" pos:end="169:56">dns</name><operator pos:start="169:57" pos:end="169:57">.</operator><name pos:start="169:58" pos:end="169:63">s_addr</name></name></expr>)</condition> <block pos:start="169:66" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:18">

        <return pos:start="171:9" pos:end="171:18">return <expr pos:start="171:16" pos:end="171:17"><operator pos:start="171:16" pos:end="171:16">-</operator><literal type="number" pos:start="171:17" pos:end="171:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:53">(<expr pos:start="177:9" pos:end="177:52"><name pos:start="177:9" pos:end="177:19">vnameserver</name> <operator pos:start="177:21" pos:end="177:22">&amp;&amp;</operator> <operator pos:start="177:24" pos:end="177:24">!</operator><call pos:start="177:25" pos:end="177:52"><name pos:start="177:25" pos:end="177:33">inet_aton</name><argument_list pos:start="177:34" pos:end="177:52">(<argument pos:start="177:35" pos:end="177:45"><expr pos:start="177:35" pos:end="177:45"><name pos:start="177:35" pos:end="177:45">vnameserver</name></expr></argument>, <argument pos:start="177:48" pos:end="177:51"><expr pos:start="177:48" pos:end="177:51"><operator pos:start="177:48" pos:end="177:48">&amp;</operator><name pos:start="177:49" pos:end="177:51">dns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:55" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:18">

        <return pos:start="179:9" pos:end="179:18">return <expr pos:start="179:16" pos:end="179:17"><operator pos:start="179:16" pos:end="179:16">-</operator><literal type="number" pos:start="179:17" pos:end="179:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="183:5" pos:end="194:0"><if pos:start="183:5" pos:end="194:0">if <condition pos:start="183:8" pos:end="185:34">(<expr pos:start="183:9" pos:end="185:33"><operator pos:start="183:9" pos:end="183:9">(</operator><name pos:start="183:10" pos:end="183:19"><name pos:start="183:10" pos:end="183:12">dns</name><operator pos:start="183:13" pos:end="183:13">.</operator><name pos:start="183:14" pos:end="183:19">s_addr</name></name> <operator pos:start="183:21" pos:end="183:21">&amp;</operator> <name pos:start="183:23" pos:end="183:33"><name pos:start="183:23" pos:end="183:26">mask</name><operator pos:start="183:27" pos:end="183:27">.</operator><name pos:start="183:28" pos:end="183:33">s_addr</name></name><operator pos:start="183:34" pos:end="183:34">)</operator> <operator pos:start="183:36" pos:end="183:37">!=</operator> <name pos:start="183:39" pos:end="183:48"><name pos:start="183:39" pos:end="183:41">net</name><operator pos:start="183:42" pos:end="183:42">.</operator><name pos:start="183:43" pos:end="183:48">s_addr</name></name> <operator pos:start="183:50" pos:end="183:51">||</operator>

        <name pos:start="185:9" pos:end="185:18"><name pos:start="185:9" pos:end="185:11">dns</name><operator pos:start="185:12" pos:end="185:12">.</operator><name pos:start="185:13" pos:end="185:18">s_addr</name></name> <operator pos:start="185:20" pos:end="185:21">==</operator> <name pos:start="185:23" pos:end="185:33"><name pos:start="185:23" pos:end="185:26">host</name><operator pos:start="185:27" pos:end="185:27">.</operator><name pos:start="185:28" pos:end="185:33">s_addr</name></name></expr>)</condition> <block pos:start="185:36" pos:end="194:0">{<block_content pos:start="187:9" pos:end="187:18">

        <return pos:start="187:9" pos:end="187:18">return <expr pos:start="187:16" pos:end="187:17"><operator pos:start="187:16" pos:end="187:16">-</operator><literal type="number" pos:start="187:17" pos:end="187:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="193:1" pos:end="193:14">#<cpp:directive pos:start="193:2" pos:end="193:7">ifndef</cpp:directive> <name pos:start="193:9" pos:end="193:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="195:5" pos:end="202:0"><if pos:start="195:5" pos:end="202:0">if <condition pos:start="195:8" pos:end="195:54">(<expr pos:start="195:9" pos:end="195:53"><name pos:start="195:9" pos:end="195:18">vsmbserver</name> <operator pos:start="195:20" pos:end="195:21">&amp;&amp;</operator> <operator pos:start="195:23" pos:end="195:23">!</operator><call pos:start="195:24" pos:end="195:53"><name pos:start="195:24" pos:end="195:32">inet_aton</name><argument_list pos:start="195:33" pos:end="195:53">(<argument pos:start="195:34" pos:end="195:43"><expr pos:start="195:34" pos:end="195:43"><name pos:start="195:34" pos:end="195:43">vsmbserver</name></expr></argument>, <argument pos:start="195:46" pos:end="195:52"><expr pos:start="195:46" pos:end="195:52"><operator pos:start="195:46" pos:end="195:46">&amp;</operator><name pos:start="195:47" pos:end="195:52">smbsrv</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:56" pos:end="202:0">{<block_content pos:start="197:9" pos:end="197:18">

        <return pos:start="197:9" pos:end="197:18">return <expr pos:start="197:16" pos:end="197:17"><operator pos:start="197:16" pos:end="197:16">-</operator><literal type="number" pos:start="197:17" pos:end="197:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="201:1" pos:end="201:6">#<cpp:directive pos:start="201:2" pos:end="201:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="205:5" pos:end="205:41"><expr pos:start="205:5" pos:end="205:40"><name pos:start="205:5" pos:end="205:5">s</name> <operator pos:start="205:7" pos:end="205:7">=</operator> <call pos:start="205:9" pos:end="205:40"><name pos:start="205:9" pos:end="205:20">qemu_mallocz</name><argument_list pos:start="205:21" pos:end="205:40">(<argument pos:start="205:22" pos:end="205:39"><expr pos:start="205:22" pos:end="205:39"><sizeof pos:start="205:22" pos:end="205:39">sizeof<argument_list pos:start="205:28" pos:end="205:39">(<argument pos:start="205:29" pos:end="205:38"><expr pos:start="205:29" pos:end="205:38"><name pos:start="205:29" pos:end="205:38">SlirpState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="209:63"><expr pos:start="207:5" pos:end="209:62"><name pos:start="207:5" pos:end="207:12"><name pos:start="207:5" pos:end="207:5">s</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:12">slirp</name></name> <operator pos:start="207:14" pos:end="207:14">=</operator> <call pos:start="207:16" pos:end="209:62"><name pos:start="207:16" pos:end="207:25">slirp_init</name><argument_list pos:start="207:26" pos:end="209:62">(<argument pos:start="207:27" pos:end="207:36"><expr pos:start="207:27" pos:end="207:36"><name pos:start="207:27" pos:end="207:36">restricted</name></expr></argument>, <argument pos:start="207:39" pos:end="207:41"><expr pos:start="207:39" pos:end="207:41"><name pos:start="207:39" pos:end="207:41">net</name></expr></argument>, <argument pos:start="207:44" pos:end="207:47"><expr pos:start="207:44" pos:end="207:47"><name pos:start="207:44" pos:end="207:47">mask</name></expr></argument>, <argument pos:start="207:50" pos:end="207:53"><expr pos:start="207:50" pos:end="207:53"><name pos:start="207:50" pos:end="207:53">host</name></expr></argument>, <argument pos:start="207:56" pos:end="207:64"><expr pos:start="207:56" pos:end="207:64"><name pos:start="207:56" pos:end="207:64">vhostname</name></expr></argument>,

                          <argument pos:start="209:27" pos:end="209:37"><expr pos:start="209:27" pos:end="209:37"><name pos:start="209:27" pos:end="209:37">tftp_export</name></expr></argument>, <argument pos:start="209:40" pos:end="209:47"><expr pos:start="209:40" pos:end="209:47"><name pos:start="209:40" pos:end="209:47">bootfile</name></expr></argument>, <argument pos:start="209:50" pos:end="209:53"><expr pos:start="209:50" pos:end="209:53"><name pos:start="209:50" pos:end="209:53">dhcp</name></expr></argument>, <argument pos:start="209:56" pos:end="209:58"><expr pos:start="209:56" pos:end="209:58"><name pos:start="209:56" pos:end="209:58">dns</name></expr></argument>, <argument pos:start="209:61" pos:end="209:61"><expr pos:start="209:61" pos:end="209:61"><name pos:start="209:61" pos:end="209:61">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:48"><expr pos:start="211:5" pos:end="211:47"><call pos:start="211:5" pos:end="211:47"><name pos:start="211:5" pos:end="211:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="211:23" pos:end="211:47">(<argument pos:start="211:24" pos:end="211:36"><expr pos:start="211:24" pos:end="211:36"><operator pos:start="211:24" pos:end="211:24">&amp;</operator><name pos:start="211:25" pos:end="211:36">slirp_stacks</name></expr></argument>, <argument pos:start="211:39" pos:end="211:39"><expr pos:start="211:39" pos:end="211:39"><name pos:start="211:39" pos:end="211:39">s</name></expr></argument>, <argument pos:start="211:42" pos:end="211:46"><expr pos:start="211:42" pos:end="211:46"><name pos:start="211:42" pos:end="211:46">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="215:5" pos:end="234:0">for <control pos:start="215:9" pos:end="215:63">(<init pos:start="215:10" pos:end="215:32"><expr pos:start="215:10" pos:end="215:31"><name pos:start="215:10" pos:end="215:15">config</name> <operator pos:start="215:17" pos:end="215:17">=</operator> <name pos:start="215:19" pos:end="215:31">slirp_configs</name></expr>;</init> <condition pos:start="215:34" pos:end="215:40"><expr pos:start="215:34" pos:end="215:39"><name pos:start="215:34" pos:end="215:39">config</name></expr>;</condition> <incr pos:start="215:42" pos:end="215:62"><expr pos:start="215:42" pos:end="215:62"><name pos:start="215:42" pos:end="215:47">config</name> <operator pos:start="215:49" pos:end="215:49">=</operator> <name pos:start="215:51" pos:end="215:62"><name pos:start="215:51" pos:end="215:56">config</name><operator pos:start="215:57" pos:end="215:58">-&gt;</operator><name pos:start="215:59" pos:end="215:62">next</name></name></expr></incr>)</control> <block pos:start="215:65" pos:end="234:0">{<block_content pos:start="217:9" pos:end="229:9">

        <if_stmt pos:start="217:9" pos:end="229:9"><if pos:start="217:9" pos:end="223:9">if <condition pos:start="217:12" pos:end="217:46">(<expr pos:start="217:13" pos:end="217:45"><name pos:start="217:13" pos:end="217:25"><name pos:start="217:13" pos:end="217:18">config</name><operator pos:start="217:19" pos:end="217:20">-&gt;</operator><name pos:start="217:21" pos:end="217:25">flags</name></name> <operator pos:start="217:27" pos:end="217:27">&amp;</operator> <name pos:start="217:29" pos:end="217:45">SLIRP_CFG_HOSTFWD</name></expr>)</condition> <block pos:start="217:48" pos:end="223:9">{<block_content pos:start="219:13" pos:end="221:60">

            <expr_stmt pos:start="219:13" pos:end="221:60"><expr pos:start="219:13" pos:end="221:59"><call pos:start="219:13" pos:end="221:59"><name pos:start="219:13" pos:end="219:25">slirp_hostfwd</name><argument_list pos:start="219:26" pos:end="221:59">(<argument pos:start="219:27" pos:end="219:27"><expr pos:start="219:27" pos:end="219:27"><name pos:start="219:27" pos:end="219:27">s</name></expr></argument>, <argument pos:start="219:30" pos:end="219:32"><expr pos:start="219:30" pos:end="219:32"><name pos:start="219:30" pos:end="219:32">mon</name></expr></argument>, <argument pos:start="219:35" pos:end="219:45"><expr pos:start="219:35" pos:end="219:45"><name pos:start="219:35" pos:end="219:45"><name pos:start="219:35" pos:end="219:40">config</name><operator pos:start="219:41" pos:end="219:42">-&gt;</operator><name pos:start="219:43" pos:end="219:45">str</name></name></expr></argument>,

                          <argument pos:start="221:27" pos:end="221:58"><expr pos:start="221:27" pos:end="221:58"><name pos:start="221:27" pos:end="221:39"><name pos:start="221:27" pos:end="221:32">config</name><operator pos:start="221:33" pos:end="221:34">-&gt;</operator><name pos:start="221:35" pos:end="221:39">flags</name></name> <operator pos:start="221:41" pos:end="221:41">&amp;</operator> <name pos:start="221:43" pos:end="221:58">SLIRP_CFG_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="223:11" pos:end="229:9">else <block pos:start="223:16" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:61">

            <expr_stmt pos:start="225:13" pos:end="227:61"><expr pos:start="225:13" pos:end="227:60"><call pos:start="225:13" pos:end="227:60"><name pos:start="225:13" pos:end="225:26">slirp_guestfwd</name><argument_list pos:start="225:27" pos:end="227:60">(<argument pos:start="225:28" pos:end="225:28"><expr pos:start="225:28" pos:end="225:28"><name pos:start="225:28" pos:end="225:28">s</name></expr></argument>, <argument pos:start="225:31" pos:end="225:33"><expr pos:start="225:31" pos:end="225:33"><name pos:start="225:31" pos:end="225:33">mon</name></expr></argument>, <argument pos:start="225:36" pos:end="225:46"><expr pos:start="225:36" pos:end="225:46"><name pos:start="225:36" pos:end="225:46"><name pos:start="225:36" pos:end="225:41">config</name><operator pos:start="225:42" pos:end="225:43">-&gt;</operator><name pos:start="225:44" pos:end="225:46">str</name></name></expr></argument>,

                           <argument pos:start="227:28" pos:end="227:59"><expr pos:start="227:28" pos:end="227:59"><name pos:start="227:28" pos:end="227:40"><name pos:start="227:28" pos:end="227:33">config</name><operator pos:start="227:34" pos:end="227:35">-&gt;</operator><name pos:start="227:36" pos:end="227:40">flags</name></name> <operator pos:start="227:42" pos:end="227:42">&amp;</operator> <name pos:start="227:44" pos:end="227:59">SLIRP_CFG_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

<cpp:ifndef pos:start="233:1" pos:end="233:14">#<cpp:directive pos:start="233:2" pos:end="233:7">ifndef</cpp:directive> <name pos:start="233:9" pos:end="233:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="235:5" pos:end="239:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:20">(<expr pos:start="235:9" pos:end="235:19"><operator pos:start="235:9" pos:end="235:9">!</operator><name pos:start="235:10" pos:end="235:19">smb_export</name></expr>)</condition> <block pos:start="235:22" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:39">

        <expr_stmt pos:start="237:9" pos:end="237:39"><expr pos:start="237:9" pos:end="237:38"><name pos:start="237:9" pos:end="237:18">smb_export</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <name pos:start="237:22" pos:end="237:38">legacy_smb_export</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="248:0"><if pos:start="241:5" pos:end="248:0">if <condition pos:start="241:8" pos:end="241:19">(<expr pos:start="241:9" pos:end="241:18"><name pos:start="241:9" pos:end="241:18">smb_export</name></expr>)</condition> <block pos:start="241:21" pos:end="248:0">{<block_content pos:start="243:9" pos:end="243:46">

        <expr_stmt pos:start="243:9" pos:end="243:46"><expr pos:start="243:9" pos:end="243:45"><call pos:start="243:9" pos:end="243:45"><name pos:start="243:9" pos:end="243:17">slirp_smb</name><argument_list pos:start="243:18" pos:end="243:45">(<argument pos:start="243:19" pos:end="243:19"><expr pos:start="243:19" pos:end="243:19"><name pos:start="243:19" pos:end="243:19">s</name></expr></argument>, <argument pos:start="243:22" pos:end="243:24"><expr pos:start="243:22" pos:end="243:24"><name pos:start="243:22" pos:end="243:24">mon</name></expr></argument>, <argument pos:start="243:27" pos:end="243:36"><expr pos:start="243:27" pos:end="243:36"><name pos:start="243:27" pos:end="243:36">smb_export</name></expr></argument>, <argument pos:start="243:39" pos:end="243:44"><expr pos:start="243:39" pos:end="243:44"><name pos:start="243:39" pos:end="243:44">smbsrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="247:1" pos:end="247:6">#<cpp:directive pos:start="247:2" pos:end="247:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="251:5" pos:end="253:55"><expr pos:start="251:5" pos:end="253:54"><name pos:start="251:5" pos:end="251:9"><name pos:start="251:5" pos:end="251:5">s</name><operator pos:start="251:6" pos:end="251:7">-&gt;</operator><name pos:start="251:8" pos:end="251:9">vc</name></name> <operator pos:start="251:11" pos:end="251:11">=</operator> <call pos:start="251:13" pos:end="253:54"><name pos:start="251:13" pos:end="251:32">qemu_new_vlan_client</name><argument_list pos:start="251:33" pos:end="253:54">(<argument pos:start="251:34" pos:end="251:37"><expr pos:start="251:34" pos:end="251:37"><name pos:start="251:34" pos:end="251:37">vlan</name></expr></argument>, <argument pos:start="251:40" pos:end="251:44"><expr pos:start="251:40" pos:end="251:44"><name pos:start="251:40" pos:end="251:44">model</name></expr></argument>, <argument pos:start="251:47" pos:end="251:50"><expr pos:start="251:47" pos:end="251:50"><name pos:start="251:47" pos:end="251:50">name</name></expr></argument>, <argument pos:start="251:53" pos:end="251:56"><expr pos:start="251:53" pos:end="251:56"><name pos:start="251:53" pos:end="251:56">NULL</name></expr></argument>, <argument pos:start="251:59" pos:end="251:71"><expr pos:start="251:59" pos:end="251:71"><name pos:start="251:59" pos:end="251:71">slirp_receive</name></expr></argument>, <argument pos:start="251:74" pos:end="251:77"><expr pos:start="251:74" pos:end="251:77"><name pos:start="251:74" pos:end="251:77">NULL</name></expr></argument>,

                                 <argument pos:start="253:34" pos:end="253:50"><expr pos:start="253:34" pos:end="253:50"><name pos:start="253:34" pos:end="253:50">net_slirp_cleanup</name></expr></argument>, <argument pos:start="253:53" pos:end="253:53"><expr pos:start="253:53" pos:end="253:53"><name pos:start="253:53" pos:end="253:53">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="257:78"><expr pos:start="255:5" pos:end="257:77"><call pos:start="255:5" pos:end="257:77"><name pos:start="255:5" pos:end="255:12">snprintf</name><argument_list pos:start="255:13" pos:end="257:77">(<argument pos:start="255:14" pos:end="255:28"><expr pos:start="255:14" pos:end="255:28"><name pos:start="255:14" pos:end="255:28"><name pos:start="255:14" pos:end="255:14">s</name><operator pos:start="255:15" pos:end="255:16">-&gt;</operator><name pos:start="255:17" pos:end="255:18">vc</name><operator pos:start="255:19" pos:end="255:20">-&gt;</operator><name pos:start="255:21" pos:end="255:28">info_str</name></name></expr></argument>, <argument pos:start="255:31" pos:end="255:53"><expr pos:start="255:31" pos:end="255:53"><sizeof pos:start="255:31" pos:end="255:53">sizeof<argument_list pos:start="255:37" pos:end="255:53">(<argument pos:start="255:38" pos:end="255:52"><expr pos:start="255:38" pos:end="255:52"><name pos:start="255:38" pos:end="255:52"><name pos:start="255:38" pos:end="255:38">s</name><operator pos:start="255:39" pos:end="255:40">-&gt;</operator><name pos:start="255:41" pos:end="255:42">vc</name><operator pos:start="255:43" pos:end="255:44">-&gt;</operator><name pos:start="255:45" pos:end="255:52">info_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="257:14" pos:end="257:36"><expr pos:start="257:14" pos:end="257:36"><literal type="string" pos:start="257:14" pos:end="257:36">"net=%s, restricted=%c"</literal></expr></argument>, <argument pos:start="257:39" pos:end="257:52"><expr pos:start="257:39" pos:end="257:52"><call pos:start="257:39" pos:end="257:52"><name pos:start="257:39" pos:end="257:47">inet_ntoa</name><argument_list pos:start="257:48" pos:end="257:52">(<argument pos:start="257:49" pos:end="257:51"><expr pos:start="257:49" pos:end="257:51"><name pos:start="257:49" pos:end="257:51">net</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="257:55" pos:end="257:76"><expr pos:start="257:55" pos:end="257:76"><ternary pos:start="257:55" pos:end="257:76"><condition pos:start="257:55" pos:end="257:66"><expr pos:start="257:55" pos:end="257:64"><name pos:start="257:55" pos:end="257:64">restricted</name></expr> ?</condition><then pos:start="257:68" pos:end="257:70"> <expr pos:start="257:68" pos:end="257:70"><literal type="char" pos:start="257:68" pos:end="257:70">'y'</literal></expr> </then><else pos:start="257:72" pos:end="257:76">: <expr pos:start="257:74" pos:end="257:76"><literal type="char" pos:start="257:74" pos:end="257:76">'n'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="259:5" pos:end="259:13">return <expr pos:start="259:12" pos:end="259:12"><literal type="number" pos:start="259:12" pos:end="259:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
