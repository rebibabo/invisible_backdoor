<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21467.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_frame</name><parameter_list pos:start="1:24" pos:end="3:60">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:55">AVPacket</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">pkt</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:37">AVFrame</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:42">pic</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:59">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="263:1">{<block_content pos:start="7:5" pos:end="261:13">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ProresContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">ctx</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:60"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">orig_buf</name></decl>, <decl pos:start="9:24" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:27">buf</name></decl>, <decl pos:start="9:30" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:30" pos:end="9:30">*</modifier></type><name pos:start="9:31" pos:end="9:39">slice_hdr</name></decl>, <decl pos:start="9:42" pos:end="9:53"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:42" pos:end="9:42">*</modifier></type><name pos:start="9:43" pos:end="9:53">slice_sizes</name></decl>, <decl pos:start="9:56" pos:end="9:59"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:56" pos:end="9:56">*</modifier></type><name pos:start="9:57" pos:end="9:59">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:29">picture_size_pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">PutBitContext</name></type> <name pos:start="13:19" pos:end="13:20">pb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">x</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">y</name></decl>, <decl pos:start="15:15" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:15">i</name></decl>, <decl pos:start="15:18" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:19">mb</name></decl>, <decl pos:start="15:22" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:22">q</name> <init pos:start="15:24" pos:end="15:26">= <expr pos:start="15:26" pos:end="15:26"><literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:13">sizes</name><index pos:start="17:14" pos:end="17:16">[<expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">4</literal></expr>]</index></name> <init pos:start="17:18" pos:end="17:24">= <expr pos:start="17:20" pos:end="17:24"><block pos:start="17:20" pos:end="17:24">{ <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:55"><decl pos:start="19:5" pos:end="19:54"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:22">slice_hdr_size</name> <init pos:start="19:24" pos:end="19:54">= <expr pos:start="19:26" pos:end="19:54"><literal type="number" pos:start="19:26" pos:end="19:28">2</literal> <operator pos:start="19:28" pos:end="19:28">+</operator> <literal type="number" pos:start="19:30" pos:end="19:30">2</literal> <operator pos:start="19:32" pos:end="19:32">*</operator> <operator pos:start="19:34" pos:end="19:34">(</operator><name pos:start="19:35" pos:end="19:49"><name pos:start="19:35" pos:end="19:37">ctx</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:49">num_planes</name></name> <operator pos:start="19:51" pos:end="19:51">-</operator> <literal type="number" pos:start="19:53" pos:end="19:53">1</literal><operator pos:start="19:54" pos:end="19:54">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:45"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">frame_size</name></decl>, <decl pos:start="21:21" pos:end="21:32"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:21" pos:end="21:32">picture_size</name></decl>, <decl pos:start="21:35" pos:end="21:44"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:35" pos:end="21:44">slice_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">pkt_size</name></decl>, <decl pos:start="23:19" pos:end="23:21"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:19" pos:end="23:21">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">uint8_t</name></type> <name pos:start="25:13" pos:end="25:23">frame_flags</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><operator pos:start="29:5" pos:end="29:5">*</operator><name pos:start="29:6" pos:end="29:23"><name pos:start="29:6" pos:end="29:10">avctx</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:23">coded_frame</name></name>           <operator pos:start="29:35" pos:end="29:35">=</operator> <operator pos:start="29:37" pos:end="29:37">*</operator><name pos:start="29:38" pos:end="29:40">pic</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:54"><expr pos:start="31:5" pos:end="31:53"><name pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:9">avctx</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:22">coded_frame</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:33">pict_type</name></name> <operator pos:start="31:35" pos:end="31:35">=</operator> <name pos:start="31:37" pos:end="31:53">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:9">avctx</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:22">coded_frame</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:33">key_frame</name></name> <operator pos:start="33:35" pos:end="33:35">=</operator> <literal type="number" pos:start="33:37" pos:end="33:37">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:43"><expr pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:12">pkt_size</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:42"><name pos:start="37:16" pos:end="37:18">ctx</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:42">frame_size_upper_bound</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:72">(<expr pos:start="41:9" pos:end="41:71"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">ret</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:66"><name pos:start="41:16" pos:end="41:30">ff_alloc_packet</name><argument_list pos:start="41:31" pos:end="41:66">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">pkt</name></expr></argument>, <argument pos:start="41:37" pos:end="41:65"><expr pos:start="41:37" pos:end="41:65"><name pos:start="41:37" pos:end="41:44">pkt_size</name> <operator pos:start="41:46" pos:end="41:46">+</operator> <name pos:start="41:48" pos:end="41:65">FF_MIN_BUFFER_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="41:67" pos:end="41:67">)</operator> <operator pos:start="41:69" pos:end="41:69">&lt;</operator> <literal type="number" pos:start="41:71" pos:end="41:71">0</literal></expr>)</condition> <block pos:start="41:74" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:19">

        <expr_stmt pos:start="43:9" pos:end="43:70"><expr pos:start="43:9" pos:end="43:69"><call pos:start="43:9" pos:end="43:69"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:69">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:68"><expr pos:start="43:37" pos:end="43:68"><literal type="string" pos:start="43:37" pos:end="43:68">"Error getting output packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:25"><expr pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:12">orig_buf</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:24"><name pos:start="51:16" pos:end="51:18">pkt</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:24">data</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="55:5" pos:end="55:17">// frame atom</comment>

    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:12">orig_buf</name> <operator pos:start="57:14" pos:end="57:15">+=</operator> <literal type="number" pos:start="57:17" pos:end="57:17">4</literal></expr>;</expr_stmt>                              <comment type="line" pos:start="57:49" pos:end="57:61">// frame size</comment>

    <expr_stmt pos:start="59:5" pos:end="59:47"><expr pos:start="59:5" pos:end="59:46"><call pos:start="59:5" pos:end="59:46"><name pos:start="59:5" pos:end="59:23">bytestream_put_be32</name>  <argument_list pos:start="59:26" pos:end="59:46">(<argument pos:start="59:27" pos:end="59:35"><expr pos:start="59:27" pos:end="59:35"><operator pos:start="59:27" pos:end="59:27">&amp;</operator><name pos:start="59:28" pos:end="59:35">orig_buf</name></expr></argument>, <argument pos:start="59:38" pos:end="59:45"><expr pos:start="59:38" pos:end="59:45"><name pos:start="59:38" pos:end="59:45">FRAME_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="59:49" pos:end="59:69">// frame container ID</comment>

    <expr_stmt pos:start="61:5" pos:end="61:19"><expr pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:7">buf</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <name pos:start="61:11" pos:end="61:18">orig_buf</name></expr>;</expr_stmt>



    <comment type="line" pos:start="65:5" pos:end="65:19">// frame header</comment>

    <expr_stmt pos:start="67:5" pos:end="67:14"><expr pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:7">tmp</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <name pos:start="67:11" pos:end="67:13">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:13"><expr pos:start="69:5" pos:end="69:12"><name pos:start="69:5" pos:end="69:7">buf</name> <operator pos:start="69:9" pos:end="69:10">+=</operator> <literal type="number" pos:start="69:12" pos:end="69:12">2</literal></expr>;</expr_stmt>                                   <comment type="line" pos:start="69:49" pos:end="69:88">// frame header size will be stored here</comment>

    <expr_stmt pos:start="71:5" pos:end="71:35"><expr pos:start="71:5" pos:end="71:34"><call pos:start="71:5" pos:end="71:34"><name pos:start="71:5" pos:end="71:23">bytestream_put_be16</name>  <argument_list pos:start="71:26" pos:end="71:34">(<argument pos:start="71:27" pos:end="71:30"><expr pos:start="71:27" pos:end="71:30"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:30">buf</name></expr></argument>, <argument pos:start="71:33" pos:end="71:33"><expr pos:start="71:33" pos:end="71:33"><literal type="number" pos:start="71:33" pos:end="71:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="71:49" pos:end="71:60">// version 1</comment>

    <expr_stmt pos:start="73:5" pos:end="73:48"><expr pos:start="73:5" pos:end="73:47"><call pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:25">bytestream_put_buffer</name><argument_list pos:start="73:26" pos:end="73:47">(<argument pos:start="73:27" pos:end="73:30"><expr pos:start="73:27" pos:end="73:30"><operator pos:start="73:27" pos:end="73:27">&amp;</operator><name pos:start="73:28" pos:end="73:30">buf</name></expr></argument>, <argument pos:start="73:33" pos:end="73:43"><expr pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:35">ctx</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:43">vendor</name></name></expr></argument>, <argument pos:start="73:46" pos:end="73:46"><expr pos:start="73:46" pos:end="73:46"><literal type="number" pos:start="73:46" pos:end="73:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:46"><expr pos:start="75:5" pos:end="75:45"><call pos:start="75:5" pos:end="75:45"><name pos:start="75:5" pos:end="75:23">bytestream_put_be16</name>  <argument_list pos:start="75:26" pos:end="75:45">(<argument pos:start="75:27" pos:end="75:30"><expr pos:start="75:27" pos:end="75:30"><operator pos:start="75:27" pos:end="75:27">&amp;</operator><name pos:start="75:28" pos:end="75:30">buf</name></expr></argument>, <argument pos:start="75:33" pos:end="75:44"><expr pos:start="75:33" pos:end="75:44"><name pos:start="75:33" pos:end="75:44"><name pos:start="75:33" pos:end="75:37">avctx</name><operator pos:start="75:38" pos:end="75:39">-&gt;</operator><name pos:start="75:40" pos:end="75:44">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:47"><expr pos:start="77:5" pos:end="77:46"><call pos:start="77:5" pos:end="77:46"><name pos:start="77:5" pos:end="77:23">bytestream_put_be16</name>  <argument_list pos:start="77:26" pos:end="77:46">(<argument pos:start="77:27" pos:end="77:30"><expr pos:start="77:27" pos:end="77:30"><operator pos:start="77:27" pos:end="77:27">&amp;</operator><name pos:start="77:28" pos:end="77:30">buf</name></expr></argument>, <argument pos:start="77:33" pos:end="77:45"><expr pos:start="77:33" pos:end="77:45"><name pos:start="77:33" pos:end="77:45"><name pos:start="77:33" pos:end="77:37">avctx</name><operator pos:start="77:38" pos:end="77:39">-&gt;</operator><name pos:start="77:40" pos:end="77:45">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:15">frame_flags</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:36"><name pos:start="81:19" pos:end="81:21">ctx</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:36">chroma_factor</name></name> <operator pos:start="81:38" pos:end="81:39">&lt;&lt;</operator> <literal type="number" pos:start="81:41" pos:end="81:41">6</literal></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="85:58"><if pos:start="83:5" pos:end="85:58">if <condition pos:start="83:8" pos:end="83:49">(<expr pos:start="83:9" pos:end="83:48"><name pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:13">avctx</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:20">flags</name></name> <operator pos:start="83:22" pos:end="83:22">&amp;</operator> <name pos:start="83:24" pos:end="83:48">CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:58"><block_content pos:start="85:9" pos:end="85:58">

        <expr_stmt pos:start="85:9" pos:end="85:58"><expr pos:start="85:9" pos:end="85:57"><name pos:start="85:9" pos:end="85:19">frame_flags</name> <operator pos:start="85:21" pos:end="85:22">|=</operator> <ternary pos:start="85:24" pos:end="85:57"><condition pos:start="85:24" pos:end="85:45"><expr pos:start="85:24" pos:end="85:43"><name pos:start="85:24" pos:end="85:43"><name pos:start="85:24" pos:end="85:26">pic</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:43">top_field_first</name></name></expr> ?</condition><then pos:start="85:47" pos:end="85:50"> <expr pos:start="85:47" pos:end="85:50"><literal type="number" pos:start="85:47" pos:end="85:50">0x04</literal></expr> </then><else pos:start="85:52" pos:end="85:57">: <expr pos:start="85:54" pos:end="85:57"><literal type="number" pos:start="85:54" pos:end="85:57">0x08</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:45"><expr pos:start="87:5" pos:end="87:44"><call pos:start="87:5" pos:end="87:44"><name pos:start="87:5" pos:end="87:23">bytestream_put_byte</name>  <argument_list pos:start="87:26" pos:end="87:44">(<argument pos:start="87:27" pos:end="87:30"><expr pos:start="87:27" pos:end="87:30"><operator pos:start="87:27" pos:end="87:27">&amp;</operator><name pos:start="87:28" pos:end="87:30">buf</name></expr></argument>, <argument pos:start="87:33" pos:end="87:43"><expr pos:start="87:33" pos:end="87:43"><name pos:start="87:33" pos:end="87:43">frame_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:35"><expr pos:start="91:5" pos:end="91:34"><call pos:start="91:5" pos:end="91:34"><name pos:start="91:5" pos:end="91:23">bytestream_put_byte</name>  <argument_list pos:start="91:26" pos:end="91:34">(<argument pos:start="91:27" pos:end="91:30"><expr pos:start="91:27" pos:end="91:30"><operator pos:start="91:27" pos:end="91:27">&amp;</operator><name pos:start="91:28" pos:end="91:30">buf</name></expr></argument>, <argument pos:start="91:33" pos:end="91:33"><expr pos:start="91:33" pos:end="91:33"><literal type="number" pos:start="91:33" pos:end="91:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="91:49" pos:end="91:59">// reserved</comment>

    <expr_stmt pos:start="93:5" pos:end="93:56"><expr pos:start="93:5" pos:end="93:55"><call pos:start="93:5" pos:end="93:55"><name pos:start="93:5" pos:end="93:23">bytestream_put_byte</name>  <argument_list pos:start="93:26" pos:end="93:55">(<argument pos:start="93:27" pos:end="93:30"><expr pos:start="93:27" pos:end="93:30"><operator pos:start="93:27" pos:end="93:27">&amp;</operator><name pos:start="93:28" pos:end="93:30">buf</name></expr></argument>, <argument pos:start="93:33" pos:end="93:54"><expr pos:start="93:33" pos:end="93:54"><name pos:start="93:33" pos:end="93:54"><name pos:start="93:33" pos:end="93:37">avctx</name><operator pos:start="93:38" pos:end="93:39">-&gt;</operator><name pos:start="93:40" pos:end="93:54">color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:50"><expr pos:start="95:5" pos:end="95:49"><call pos:start="95:5" pos:end="95:49"><name pos:start="95:5" pos:end="95:23">bytestream_put_byte</name>  <argument_list pos:start="95:26" pos:end="95:49">(<argument pos:start="95:27" pos:end="95:30"><expr pos:start="95:27" pos:end="95:30"><operator pos:start="95:27" pos:end="95:27">&amp;</operator><name pos:start="95:28" pos:end="95:30">buf</name></expr></argument>, <argument pos:start="95:33" pos:end="95:48"><expr pos:start="95:33" pos:end="95:48"><name pos:start="95:33" pos:end="95:48"><name pos:start="95:33" pos:end="95:37">avctx</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:48">color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:51"><expr pos:start="97:5" pos:end="97:50"><call pos:start="97:5" pos:end="97:50"><name pos:start="97:5" pos:end="97:23">bytestream_put_byte</name>  <argument_list pos:start="97:26" pos:end="97:50">(<argument pos:start="97:27" pos:end="97:30"><expr pos:start="97:27" pos:end="97:30"><operator pos:start="97:27" pos:end="97:27">&amp;</operator><name pos:start="97:28" pos:end="97:30">buf</name></expr></argument>, <argument pos:start="97:33" pos:end="97:49"><expr pos:start="97:33" pos:end="97:49"><name pos:start="97:33" pos:end="97:49"><name pos:start="97:33" pos:end="97:37">avctx</name><operator pos:start="97:38" pos:end="97:39">-&gt;</operator><name pos:start="97:40" pos:end="97:49">colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:63"><expr pos:start="99:5" pos:end="99:62"><call pos:start="99:5" pos:end="99:62"><name pos:start="99:5" pos:end="99:23">bytestream_put_byte</name>  <argument_list pos:start="99:26" pos:end="99:62">(<argument pos:start="99:27" pos:end="99:30"><expr pos:start="99:27" pos:end="99:30"><operator pos:start="99:27" pos:end="99:27">&amp;</operator><name pos:start="99:28" pos:end="99:30">buf</name></expr></argument>, <argument pos:start="99:33" pos:end="99:61"><expr pos:start="99:33" pos:end="99:61"><literal type="number" pos:start="99:33" pos:end="99:36">0x40</literal> <operator pos:start="99:38" pos:end="99:38">|</operator> <operator pos:start="99:40" pos:end="99:40">(</operator><name pos:start="99:41" pos:end="99:55"><name pos:start="99:41" pos:end="99:43">ctx</name><operator pos:start="99:44" pos:end="99:45">-&gt;</operator><name pos:start="99:46" pos:end="99:55">alpha_bits</name></name> <operator pos:start="99:57" pos:end="99:58">&gt;&gt;</operator> <literal type="number" pos:start="99:60" pos:end="99:60">3</literal><operator pos:start="99:61" pos:end="99:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:35"><expr pos:start="101:5" pos:end="101:34"><call pos:start="101:5" pos:end="101:34"><name pos:start="101:5" pos:end="101:23">bytestream_put_byte</name>  <argument_list pos:start="101:26" pos:end="101:34">(<argument pos:start="101:27" pos:end="101:30"><expr pos:start="101:27" pos:end="101:30"><operator pos:start="101:27" pos:end="101:27">&amp;</operator><name pos:start="101:28" pos:end="101:30">buf</name></expr></argument>, <argument pos:start="101:33" pos:end="101:33"><expr pos:start="101:33" pos:end="101:33"><literal type="number" pos:start="101:33" pos:end="101:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="101:49" pos:end="101:59">// reserved</comment>

    <if_stmt pos:start="103:5" pos:end="123:5"><if pos:start="103:5" pos:end="119:5">if <condition pos:start="103:8" pos:end="103:44">(<expr pos:start="103:9" pos:end="103:43"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:11">ctx</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:22">quant_sel</name></name> <operator pos:start="103:24" pos:end="103:25">!=</operator> <name pos:start="103:27" pos:end="103:43">QUANT_MAT_DEFAULT</name></expr>)</condition> <block pos:start="103:46" pos:end="119:5">{<block_content pos:start="105:9" pos:end="117:57">

        <expr_stmt pos:start="105:9" pos:end="105:42"><expr pos:start="105:9" pos:end="105:41"><call pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:27">bytestream_put_byte</name>  <argument_list pos:start="105:30" pos:end="105:41">(<argument pos:start="105:31" pos:end="105:34"><expr pos:start="105:31" pos:end="105:34"><operator pos:start="105:31" pos:end="105:31">&amp;</operator><name pos:start="105:32" pos:end="105:34">buf</name></expr></argument>, <argument pos:start="105:37" pos:end="105:40"><expr pos:start="105:37" pos:end="105:40"><literal type="number" pos:start="105:37" pos:end="105:40">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="105:49" pos:end="105:91">// matrix flags - both matrices are present</comment>

        <comment type="line" pos:start="107:9" pos:end="107:35">// luma quantisation matrix</comment>

        <for pos:start="109:9" pos:end="111:57">for <control pos:start="109:13" pos:end="109:32">(<init pos:start="109:14" pos:end="109:19"><expr pos:start="109:14" pos:end="109:18"><name pos:start="109:14" pos:end="109:14">i</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>;</init> <condition pos:start="109:21" pos:end="109:27"><expr pos:start="109:21" pos:end="109:26"><name pos:start="109:21" pos:end="109:21">i</name> <operator pos:start="109:23" pos:end="109:23">&lt;</operator> <literal type="number" pos:start="109:25" pos:end="109:26">64</literal></expr>;</condition> <incr pos:start="109:29" pos:end="109:31"><expr pos:start="109:29" pos:end="109:31"><name pos:start="109:29" pos:end="109:29">i</name><operator pos:start="109:30" pos:end="109:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:13" pos:end="111:57"><block_content pos:start="111:13" pos:end="111:57">

            <expr_stmt pos:start="111:13" pos:end="111:57"><expr pos:start="111:13" pos:end="111:56"><call pos:start="111:13" pos:end="111:56"><name pos:start="111:13" pos:end="111:31">bytestream_put_byte</name><argument_list pos:start="111:32" pos:end="111:56">(<argument pos:start="111:33" pos:end="111:36"><expr pos:start="111:33" pos:end="111:36"><operator pos:start="111:33" pos:end="111:33">&amp;</operator><name pos:start="111:34" pos:end="111:36">buf</name></expr></argument>, <argument pos:start="111:39" pos:end="111:55"><expr pos:start="111:39" pos:end="111:55"><name pos:start="111:39" pos:end="111:55"><name pos:start="111:39" pos:end="111:41">ctx</name><operator pos:start="111:42" pos:end="111:43">-&gt;</operator><name pos:start="111:44" pos:end="111:52">quant_mat</name><index pos:start="111:53" pos:end="111:55">[<expr pos:start="111:54" pos:end="111:54"><name pos:start="111:54" pos:end="111:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line" pos:start="113:9" pos:end="113:37">// chroma quantisation matrix</comment>

        <for pos:start="115:9" pos:end="117:57">for <control pos:start="115:13" pos:end="115:32">(<init pos:start="115:14" pos:end="115:19"><expr pos:start="115:14" pos:end="115:18"><name pos:start="115:14" pos:end="115:14">i</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <literal type="number" pos:start="115:18" pos:end="115:18">0</literal></expr>;</init> <condition pos:start="115:21" pos:end="115:27"><expr pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:21">i</name> <operator pos:start="115:23" pos:end="115:23">&lt;</operator> <literal type="number" pos:start="115:25" pos:end="115:26">64</literal></expr>;</condition> <incr pos:start="115:29" pos:end="115:31"><expr pos:start="115:29" pos:end="115:31"><name pos:start="115:29" pos:end="115:29">i</name><operator pos:start="115:30" pos:end="115:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="117:13" pos:end="117:57"><block_content pos:start="117:13" pos:end="117:57">

            <expr_stmt pos:start="117:13" pos:end="117:57"><expr pos:start="117:13" pos:end="117:56"><call pos:start="117:13" pos:end="117:56"><name pos:start="117:13" pos:end="117:31">bytestream_put_byte</name><argument_list pos:start="117:32" pos:end="117:56">(<argument pos:start="117:33" pos:end="117:36"><expr pos:start="117:33" pos:end="117:36"><operator pos:start="117:33" pos:end="117:33">&amp;</operator><name pos:start="117:34" pos:end="117:36">buf</name></expr></argument>, <argument pos:start="117:39" pos:end="117:55"><expr pos:start="117:39" pos:end="117:55"><name pos:start="117:39" pos:end="117:55"><name pos:start="117:39" pos:end="117:41">ctx</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:52">quant_mat</name><index pos:start="117:53" pos:end="117:55">[<expr pos:start="117:54" pos:end="117:54"><name pos:start="117:54" pos:end="117:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="123:5">else <block pos:start="119:12" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:42">

        <expr_stmt pos:start="121:9" pos:end="121:42"><expr pos:start="121:9" pos:end="121:41"><call pos:start="121:9" pos:end="121:41"><name pos:start="121:9" pos:end="121:27">bytestream_put_byte</name>  <argument_list pos:start="121:30" pos:end="121:41">(<argument pos:start="121:31" pos:end="121:34"><expr pos:start="121:31" pos:end="121:34"><operator pos:start="121:31" pos:end="121:31">&amp;</operator><name pos:start="121:32" pos:end="121:34">buf</name></expr></argument>, <argument pos:start="121:37" pos:end="121:40"><expr pos:start="121:37" pos:end="121:40"><literal type="number" pos:start="121:37" pos:end="121:40">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="121:49" pos:end="121:91">// matrix flags - default matrices are used</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:48"><expr pos:start="125:5" pos:end="125:47"><call pos:start="125:5" pos:end="125:47"><name pos:start="125:5" pos:end="125:23">bytestream_put_be16</name>  <argument_list pos:start="125:26" pos:end="125:47">(<argument pos:start="125:27" pos:end="125:30"><expr pos:start="125:27" pos:end="125:30"><operator pos:start="125:27" pos:end="125:27">&amp;</operator><name pos:start="125:28" pos:end="125:30">tmp</name></expr></argument>, <argument pos:start="125:33" pos:end="125:46"><expr pos:start="125:33" pos:end="125:46"><name pos:start="125:33" pos:end="125:35">buf</name> <operator pos:start="125:37" pos:end="125:37">-</operator> <name pos:start="125:39" pos:end="125:46">orig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="125:50" pos:end="125:80">// write back frame header size</comment>



    <for pos:start="129:5" pos:end="241:5">for <control pos:start="129:9" pos:end="133:32">(<init pos:start="129:10" pos:end="129:34"><expr pos:start="129:10" pos:end="129:33"><name pos:start="129:10" pos:end="129:29"><name pos:start="129:10" pos:end="129:12">ctx</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:29">cur_picture_idx</name></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <literal type="number" pos:start="129:33" pos:end="129:33">0</literal></expr>;</init>

         <condition pos:start="131:10" pos:end="131:56"><expr pos:start="131:10" pos:end="131:55"><name pos:start="131:10" pos:end="131:29"><name pos:start="131:10" pos:end="131:12">ctx</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:29">cur_picture_idx</name></name> <operator pos:start="131:31" pos:end="131:31">&lt;</operator> <name pos:start="131:33" pos:end="131:55"><name pos:start="131:33" pos:end="131:35">ctx</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:55">pictures_per_frame</name></name></expr>;</condition>

         <incr pos:start="133:10" pos:end="133:31"><expr pos:start="133:10" pos:end="133:31"><name pos:start="133:10" pos:end="133:29"><name pos:start="133:10" pos:end="133:12">ctx</name><operator pos:start="133:13" pos:end="133:14">-&gt;</operator><name pos:start="133:15" pos:end="133:29">cur_picture_idx</name></name><operator pos:start="133:30" pos:end="133:31">++</operator></expr></incr>)</control> <block pos:start="133:34" pos:end="241:5">{<block_content pos:start="137:9" pos:end="239:61">

        <comment type="line" pos:start="135:9" pos:end="135:25">// picture header</comment>

        <expr_stmt pos:start="137:9" pos:end="137:35"><expr pos:start="137:9" pos:end="137:34"><name pos:start="137:9" pos:end="137:24">picture_size_pos</name> <operator pos:start="137:26" pos:end="137:26">=</operator> <name pos:start="137:28" pos:end="137:30">buf</name> <operator pos:start="137:32" pos:end="137:32">+</operator> <literal type="number" pos:start="137:34" pos:end="137:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:42"><expr pos:start="139:9" pos:end="139:41"><call pos:start="139:9" pos:end="139:41"><name pos:start="139:9" pos:end="139:27">bytestream_put_byte</name>  <argument_list pos:start="139:30" pos:end="139:41">(<argument pos:start="139:31" pos:end="139:34"><expr pos:start="139:31" pos:end="139:34"><operator pos:start="139:31" pos:end="139:31">&amp;</operator><name pos:start="139:32" pos:end="139:34">buf</name></expr></argument>, <argument pos:start="139:37" pos:end="139:40"><expr pos:start="139:37" pos:end="139:40"><literal type="number" pos:start="139:37" pos:end="139:40">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="line" pos:start="139:53" pos:end="139:84">// picture header size (in bits)</comment>

        <expr_stmt pos:start="141:9" pos:end="141:17"><expr pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:11">buf</name> <operator pos:start="141:13" pos:end="141:14">+=</operator> <literal type="number" pos:start="141:16" pos:end="141:16">4</literal></expr>;</expr_stmt>                                   <comment type="line" pos:start="141:53" pos:end="141:92">// picture data size will be stored here</comment>

        <expr_stmt pos:start="143:9" pos:end="143:61"><expr pos:start="143:9" pos:end="143:60"><call pos:start="143:9" pos:end="143:60"><name pos:start="143:9" pos:end="143:27">bytestream_put_be16</name>  <argument_list pos:start="143:30" pos:end="143:60">(<argument pos:start="143:31" pos:end="143:34"><expr pos:start="143:31" pos:end="143:34"><operator pos:start="143:31" pos:end="143:31">&amp;</operator><name pos:start="143:32" pos:end="143:34">buf</name></expr></argument>, <argument pos:start="143:37" pos:end="143:59"><expr pos:start="143:37" pos:end="143:59"><name pos:start="143:37" pos:end="143:59"><name pos:start="143:37" pos:end="143:39">ctx</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:59">slices_per_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:70"><expr pos:start="145:9" pos:end="145:69"><call pos:start="145:9" pos:end="145:69"><name pos:start="145:9" pos:end="145:27">bytestream_put_byte</name>  <argument_list pos:start="145:30" pos:end="145:69">(<argument pos:start="145:31" pos:end="145:34"><expr pos:start="145:31" pos:end="145:34"><operator pos:start="145:31" pos:end="145:31">&amp;</operator><name pos:start="145:32" pos:end="145:34">buf</name></expr></argument>, <argument pos:start="145:37" pos:end="145:68"><expr pos:start="145:37" pos:end="145:68"><call pos:start="145:37" pos:end="145:63"><name pos:start="145:37" pos:end="145:43">av_log2</name><argument_list pos:start="145:44" pos:end="145:63">(<argument pos:start="145:45" pos:end="145:62"><expr pos:start="145:45" pos:end="145:62"><name pos:start="145:45" pos:end="145:62"><name pos:start="145:45" pos:end="145:47">ctx</name><operator pos:start="145:48" pos:end="145:49">-&gt;</operator><name pos:start="145:50" pos:end="145:62">mbs_per_slice</name></name></expr></argument>)</argument_list></call> <operator pos:start="145:65" pos:end="145:66">&lt;&lt;</operator> <literal type="number" pos:start="145:68" pos:end="145:68">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="145:72" pos:end="145:103">// slice width and height in MBs</comment>



        <comment type="line" pos:start="149:9" pos:end="149:60">// seek table - will be filled during slice encoding</comment>

        <expr_stmt pos:start="151:9" pos:end="151:26"><expr pos:start="151:9" pos:end="151:25"><name pos:start="151:9" pos:end="151:19">slice_sizes</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <name pos:start="151:23" pos:end="151:25">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:43"><expr pos:start="153:9" pos:end="153:42"><name pos:start="153:9" pos:end="153:11">buf</name> <operator pos:start="153:13" pos:end="153:14">+=</operator> <name pos:start="153:16" pos:end="153:38"><name pos:start="153:16" pos:end="153:18">ctx</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:38">slices_per_picture</name></name> <operator pos:start="153:40" pos:end="153:40">*</operator> <literal type="number" pos:start="153:42" pos:end="153:42">2</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="157:9" pos:end="157:17">// slices</comment>

        <if_stmt pos:start="159:9" pos:end="169:9"><if pos:start="159:9" pos:end="169:9">if <condition pos:start="159:12" pos:end="159:30">(<expr pos:start="159:13" pos:end="159:29"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:29"><name pos:start="159:14" pos:end="159:16">ctx</name><operator pos:start="159:17" pos:end="159:18">-&gt;</operator><name pos:start="159:19" pos:end="159:29">force_quant</name></name></expr>)</condition> <block pos:start="159:32" pos:end="169:9">{<block_content pos:start="161:13" pos:end="167:27">

            <expr_stmt pos:start="161:13" pos:end="163:50"><expr pos:start="161:13" pos:end="163:49"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="163:49"><name pos:start="161:19" pos:end="161:33"><name pos:start="161:19" pos:end="161:23">avctx</name><operator pos:start="161:24" pos:end="161:25">-&gt;</operator><name pos:start="161:26" pos:end="161:33">execute2</name></name><argument_list pos:start="161:34" pos:end="163:49">(<argument pos:start="161:35" pos:end="161:39"><expr pos:start="161:35" pos:end="161:39"><name pos:start="161:35" pos:end="161:39">avctx</name></expr></argument>, <argument pos:start="161:42" pos:end="161:58"><expr pos:start="161:42" pos:end="161:58"><name pos:start="161:42" pos:end="161:58">find_quant_thread</name></expr></argument>, <argument pos:start="161:61" pos:end="161:64"><expr pos:start="161:61" pos:end="161:64"><name pos:start="161:61" pos:end="161:64">NULL</name></expr></argument>, <argument pos:start="161:67" pos:end="161:70"><expr pos:start="161:67" pos:end="161:70"><name pos:start="161:67" pos:end="161:70">NULL</name></expr></argument>,

                                  <argument pos:start="163:35" pos:end="163:48"><expr pos:start="163:35" pos:end="163:48"><name pos:start="163:35" pos:end="163:48"><name pos:start="163:35" pos:end="163:37">ctx</name><operator pos:start="163:38" pos:end="163:39">-&gt;</operator><name pos:start="163:40" pos:end="163:48">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="165:13" pos:end="167:27"><if pos:start="165:13" pos:end="167:27">if <condition pos:start="165:16" pos:end="165:20">(<expr pos:start="165:17" pos:end="165:19"><name pos:start="165:17" pos:end="165:19">ret</name></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:27"><block_content pos:start="167:17" pos:end="167:27">

                <return pos:start="167:17" pos:end="167:27">return <expr pos:start="167:24" pos:end="167:26"><name pos:start="167:24" pos:end="167:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="173:9" pos:end="227:9">for <control pos:start="173:13" pos:end="173:44">(<init pos:start="173:14" pos:end="173:19"><expr pos:start="173:14" pos:end="173:18"><name pos:start="173:14" pos:end="173:14">y</name> <operator pos:start="173:16" pos:end="173:16">=</operator> <literal type="number" pos:start="173:18" pos:end="173:18">0</literal></expr>;</init> <condition pos:start="173:21" pos:end="173:39"><expr pos:start="173:21" pos:end="173:38"><name pos:start="173:21" pos:end="173:21">y</name> <operator pos:start="173:23" pos:end="173:23">&lt;</operator> <name pos:start="173:25" pos:end="173:38"><name pos:start="173:25" pos:end="173:27">ctx</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:38">mb_height</name></name></expr>;</condition> <incr pos:start="173:41" pos:end="173:43"><expr pos:start="173:41" pos:end="173:43"><name pos:start="173:41" pos:end="173:41">y</name><operator pos:start="173:42" pos:end="173:43">++</operator></expr></incr>)</control> <block pos:start="173:46" pos:end="227:9">{<block_content pos:start="175:13" pos:end="225:13">

            <decl_stmt pos:start="175:13" pos:end="175:51"><decl pos:start="175:13" pos:end="175:50"><type pos:start="175:13" pos:end="175:15"><name pos:start="175:13" pos:end="175:15">int</name></type> <name pos:start="175:17" pos:end="175:29">mbs_per_slice</name> <init pos:start="175:31" pos:end="175:50">= <expr pos:start="175:33" pos:end="175:50"><name pos:start="175:33" pos:end="175:50"><name pos:start="175:33" pos:end="175:35">ctx</name><operator pos:start="175:36" pos:end="175:37">-&gt;</operator><name pos:start="175:38" pos:end="175:50">mbs_per_slice</name></name></expr></init></decl>;</decl_stmt>

            <for pos:start="177:13" pos:end="225:13">for <control pos:start="177:17" pos:end="177:73">(<init pos:start="177:18" pos:end="177:28"><expr pos:start="177:18" pos:end="177:27"><name pos:start="177:18" pos:end="177:18">x</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <name pos:start="177:22" pos:end="177:23">mb</name> <operator pos:start="177:25" pos:end="177:25">=</operator> <literal type="number" pos:start="177:27" pos:end="177:27">0</literal></expr>;</init> <condition pos:start="177:30" pos:end="177:47"><expr pos:start="177:30" pos:end="177:46"><name pos:start="177:30" pos:end="177:30">x</name> <operator pos:start="177:32" pos:end="177:32">&lt;</operator> <name pos:start="177:34" pos:end="177:46"><name pos:start="177:34" pos:end="177:36">ctx</name><operator pos:start="177:37" pos:end="177:38">-&gt;</operator><name pos:start="177:39" pos:end="177:46">mb_width</name></name></expr>;</condition> <incr pos:start="177:49" pos:end="177:72"><expr pos:start="177:49" pos:end="177:66"><name pos:start="177:49" pos:end="177:49">x</name> <operator pos:start="177:51" pos:end="177:52">+=</operator> <name pos:start="177:54" pos:end="177:66">mbs_per_slice</name></expr><operator pos:start="177:67" pos:end="177:67">,</operator> <expr pos:start="177:69" pos:end="177:72"><name pos:start="177:69" pos:end="177:70">mb</name><operator pos:start="177:71" pos:end="177:72">++</operator></expr></incr>)</control> <block pos:start="177:75" pos:end="225:13">{<block_content pos:start="179:17" pos:end="223:51">

                <expr_stmt pos:start="179:17" pos:end="181:80"><expr pos:start="179:17" pos:end="181:79"><name pos:start="179:17" pos:end="179:17">q</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <ternary pos:start="179:21" pos:end="181:79"><condition pos:start="179:21" pos:end="179:38"><expr pos:start="179:21" pos:end="179:36"><name pos:start="179:21" pos:end="179:36"><name pos:start="179:21" pos:end="179:23">ctx</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:36">force_quant</name></name></expr> ?</condition><then pos:start="179:40" pos:end="179:55"> <expr pos:start="179:40" pos:end="179:55"><name pos:start="179:40" pos:end="179:55"><name pos:start="179:40" pos:end="179:42">ctx</name><operator pos:start="179:43" pos:end="179:44">-&gt;</operator><name pos:start="179:45" pos:end="179:55">force_quant</name></name></expr>

                                     </then><else pos:start="181:38" pos:end="181:79">: <expr pos:start="181:40" pos:end="181:79"><name pos:start="181:40" pos:end="181:79"><name pos:start="181:40" pos:end="181:42">ctx</name><operator pos:start="181:43" pos:end="181:44">-&gt;</operator><name pos:start="181:45" pos:end="181:51">slice_q</name><index pos:start="181:52" pos:end="181:79">[<expr pos:start="181:53" pos:end="181:78"><name pos:start="181:53" pos:end="181:54">mb</name> <operator pos:start="181:56" pos:end="181:56">+</operator> <name pos:start="181:58" pos:end="181:58">y</name> <operator pos:start="181:60" pos:end="181:60">*</operator> <name pos:start="181:62" pos:end="181:78"><name pos:start="181:62" pos:end="181:64">ctx</name><operator pos:start="181:65" pos:end="181:66">-&gt;</operator><name pos:start="181:67" pos:end="181:78">slices_width</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>



                <while pos:start="185:17" pos:end="187:40">while <condition pos:start="185:23" pos:end="185:57">(<expr pos:start="185:24" pos:end="185:56"><name pos:start="185:24" pos:end="185:36"><name pos:start="185:24" pos:end="185:26">ctx</name><operator pos:start="185:27" pos:end="185:28">-&gt;</operator><name pos:start="185:29" pos:end="185:36">mb_width</name></name> <operator pos:start="185:38" pos:end="185:38">-</operator> <name pos:start="185:40" pos:end="185:40">x</name> <operator pos:start="185:42" pos:end="185:42">&lt;</operator> <name pos:start="185:44" pos:end="185:56">mbs_per_slice</name></expr>)</condition><block type="pseudo" pos:start="187:21" pos:end="187:40"><block_content pos:start="187:21" pos:end="187:40">

                    <expr_stmt pos:start="187:21" pos:end="187:40"><expr pos:start="187:21" pos:end="187:39"><name pos:start="187:21" pos:end="187:33">mbs_per_slice</name> <operator pos:start="187:35" pos:end="187:37">&gt;&gt;=</operator> <literal type="number" pos:start="187:39" pos:end="187:39">1</literal></expr>;</expr_stmt></block_content></block></while>



                <expr_stmt pos:start="191:17" pos:end="191:63"><expr pos:start="191:17" pos:end="191:62"><call pos:start="191:17" pos:end="191:62"><name pos:start="191:17" pos:end="191:35">bytestream_put_byte</name><argument_list pos:start="191:36" pos:end="191:62">(<argument pos:start="191:37" pos:end="191:40"><expr pos:start="191:37" pos:end="191:40"><operator pos:start="191:37" pos:end="191:37">&amp;</operator><name pos:start="191:38" pos:end="191:40">buf</name></expr></argument>, <argument pos:start="191:43" pos:end="191:61"><expr pos:start="191:43" pos:end="191:61"><name pos:start="191:43" pos:end="191:56">slice_hdr_size</name> <operator pos:start="191:58" pos:end="191:59">&lt;&lt;</operator> <literal type="number" pos:start="191:61" pos:end="191:61">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:32"><expr pos:start="193:17" pos:end="193:31"><name pos:start="193:17" pos:end="193:25">slice_hdr</name> <operator pos:start="193:27" pos:end="193:27">=</operator> <name pos:start="193:29" pos:end="193:31">buf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:42"><expr pos:start="195:17" pos:end="195:41"><name pos:start="195:17" pos:end="195:19">buf</name> <operator pos:start="195:21" pos:end="195:22">+=</operator> <name pos:start="195:24" pos:end="195:37">slice_hdr_size</name> <operator pos:start="195:39" pos:end="195:39">-</operator> <literal type="number" pos:start="195:41" pos:end="195:41">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:75"><expr pos:start="197:17" pos:end="197:74"><call pos:start="197:17" pos:end="197:74"><name pos:start="197:17" pos:end="197:29">init_put_bits</name><argument_list pos:start="197:30" pos:end="197:74">(<argument pos:start="197:31" pos:end="197:33"><expr pos:start="197:31" pos:end="197:33"><operator pos:start="197:31" pos:end="197:31">&amp;</operator><name pos:start="197:32" pos:end="197:33">pb</name></expr></argument>, <argument pos:start="197:36" pos:end="197:38"><expr pos:start="197:36" pos:end="197:38"><name pos:start="197:36" pos:end="197:38">buf</name></expr></argument>, <argument pos:start="197:41" pos:end="197:73"><expr pos:start="197:41" pos:end="197:73"><operator pos:start="197:41" pos:end="197:41">(</operator><name pos:start="197:42" pos:end="197:49">pkt_size</name> <operator pos:start="197:51" pos:end="197:51">-</operator> <operator pos:start="197:53" pos:end="197:53">(</operator><name pos:start="197:54" pos:end="197:56">buf</name> <operator pos:start="197:58" pos:end="197:58">-</operator> <name pos:start="197:60" pos:end="197:67">orig_buf</name><operator pos:start="197:68" pos:end="197:68">)</operator><operator pos:start="197:69" pos:end="197:69">)</operator> <operator pos:start="197:71" pos:end="197:71">*</operator> <literal type="number" pos:start="197:73" pos:end="197:73">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="201:50"><expr pos:start="199:17" pos:end="201:49"><name pos:start="199:17" pos:end="199:19">ret</name> <operator pos:start="199:21" pos:end="199:21">=</operator> <call pos:start="199:23" pos:end="201:49"><name pos:start="199:23" pos:end="199:34">encode_slice</name><argument_list pos:start="199:35" pos:end="201:49">(<argument pos:start="199:36" pos:end="199:40"><expr pos:start="199:36" pos:end="199:40"><name pos:start="199:36" pos:end="199:40">avctx</name></expr></argument>, <argument pos:start="199:43" pos:end="199:45"><expr pos:start="199:43" pos:end="199:45"><name pos:start="199:43" pos:end="199:45">pic</name></expr></argument>, <argument pos:start="199:48" pos:end="199:50"><expr pos:start="199:48" pos:end="199:50"><operator pos:start="199:48" pos:end="199:48">&amp;</operator><name pos:start="199:49" pos:end="199:50">pb</name></expr></argument>, <argument pos:start="199:53" pos:end="199:57"><expr pos:start="199:53" pos:end="199:57"><name pos:start="199:53" pos:end="199:57">sizes</name></expr></argument>, <argument pos:start="199:60" pos:end="199:60"><expr pos:start="199:60" pos:end="199:60"><name pos:start="199:60" pos:end="199:60">x</name></expr></argument>, <argument pos:start="199:63" pos:end="199:63"><expr pos:start="199:63" pos:end="199:63"><name pos:start="199:63" pos:end="199:63">y</name></expr></argument>, <argument pos:start="199:66" pos:end="199:66"><expr pos:start="199:66" pos:end="199:66"><name pos:start="199:66" pos:end="199:66">q</name></expr></argument>,

                                   <argument pos:start="201:36" pos:end="201:48"><expr pos:start="201:36" pos:end="201:48"><name pos:start="201:36" pos:end="201:48">mbs_per_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="203:17" pos:end="205:31"><if pos:start="203:17" pos:end="205:31">if <condition pos:start="203:20" pos:end="203:28">(<expr pos:start="203:21" pos:end="203:27"><name pos:start="203:21" pos:end="203:23">ret</name> <operator pos:start="203:25" pos:end="203:25">&lt;</operator> <literal type="number" pos:start="203:27" pos:end="203:27">0</literal></expr>)</condition><block type="pseudo" pos:start="205:21" pos:end="205:31"><block_content pos:start="205:21" pos:end="205:31">

                    <return pos:start="205:21" pos:end="205:31">return <expr pos:start="205:28" pos:end="205:30"><name pos:start="205:28" pos:end="205:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="209:17" pos:end="209:51"><expr pos:start="209:17" pos:end="209:50"><call pos:start="209:17" pos:end="209:50"><name pos:start="209:17" pos:end="209:35">bytestream_put_byte</name><argument_list pos:start="209:36" pos:end="209:50">(<argument pos:start="209:37" pos:end="209:46"><expr pos:start="209:37" pos:end="209:46"><operator pos:start="209:37" pos:end="209:37">&amp;</operator><name pos:start="209:38" pos:end="209:46">slice_hdr</name></expr></argument>, <argument pos:start="209:49" pos:end="209:49"><expr pos:start="209:49" pos:end="209:49"><name pos:start="209:49" pos:end="209:49">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:73"><expr pos:start="211:17" pos:end="211:72"><name pos:start="211:17" pos:end="211:26">slice_size</name> <operator pos:start="211:28" pos:end="211:28">=</operator> <name pos:start="211:30" pos:end="211:43">slice_hdr_size</name> <operator pos:start="211:45" pos:end="211:45">+</operator> <name pos:start="211:47" pos:end="211:72"><name pos:start="211:47" pos:end="211:51">sizes</name><index pos:start="211:52" pos:end="211:72">[<expr pos:start="211:53" pos:end="211:71"><name pos:start="211:53" pos:end="211:67"><name pos:start="211:53" pos:end="211:55">ctx</name><operator pos:start="211:56" pos:end="211:57">-&gt;</operator><name pos:start="211:58" pos:end="211:67">num_planes</name></name> <operator pos:start="211:69" pos:end="211:69">-</operator> <literal type="number" pos:start="211:71" pos:end="211:71">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="213:17" pos:end="219:17">for <control pos:start="213:21" pos:end="213:57">(<init pos:start="213:22" pos:end="213:27"><expr pos:start="213:22" pos:end="213:26"><name pos:start="213:22" pos:end="213:22">i</name> <operator pos:start="213:24" pos:end="213:24">=</operator> <literal type="number" pos:start="213:26" pos:end="213:26">0</literal></expr>;</init> <condition pos:start="213:29" pos:end="213:52"><expr pos:start="213:29" pos:end="213:51"><name pos:start="213:29" pos:end="213:29">i</name> <operator pos:start="213:31" pos:end="213:31">&lt;</operator> <name pos:start="213:33" pos:end="213:47"><name pos:start="213:33" pos:end="213:35">ctx</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:47">num_planes</name></name> <operator pos:start="213:49" pos:end="213:49">-</operator> <literal type="number" pos:start="213:51" pos:end="213:51">1</literal></expr>;</condition> <incr pos:start="213:54" pos:end="213:56"><expr pos:start="213:54" pos:end="213:56"><name pos:start="213:54" pos:end="213:54">i</name><operator pos:start="213:55" pos:end="213:56">++</operator></expr></incr>)</control> <block pos:start="213:59" pos:end="219:17">{<block_content pos:start="215:21" pos:end="217:43">

                    <expr_stmt pos:start="215:21" pos:end="215:62"><expr pos:start="215:21" pos:end="215:61"><call pos:start="215:21" pos:end="215:61"><name pos:start="215:21" pos:end="215:39">bytestream_put_be16</name><argument_list pos:start="215:40" pos:end="215:61">(<argument pos:start="215:41" pos:end="215:50"><expr pos:start="215:41" pos:end="215:50"><operator pos:start="215:41" pos:end="215:41">&amp;</operator><name pos:start="215:42" pos:end="215:50">slice_hdr</name></expr></argument>, <argument pos:start="215:53" pos:end="215:60"><expr pos:start="215:53" pos:end="215:60"><name pos:start="215:53" pos:end="215:60"><name pos:start="215:53" pos:end="215:57">sizes</name><index pos:start="215:58" pos:end="215:60">[<expr pos:start="215:59" pos:end="215:59"><name pos:start="215:59" pos:end="215:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:43"><expr pos:start="217:21" pos:end="217:42"><name pos:start="217:21" pos:end="217:30">slice_size</name> <operator pos:start="217:32" pos:end="217:33">+=</operator> <name pos:start="217:35" pos:end="217:42"><name pos:start="217:35" pos:end="217:39">sizes</name><index pos:start="217:40" pos:end="217:42">[<expr pos:start="217:41" pos:end="217:41"><name pos:start="217:41" pos:end="217:41">i</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="221:17" pos:end="221:62"><expr pos:start="221:17" pos:end="221:61"><call pos:start="221:17" pos:end="221:61"><name pos:start="221:17" pos:end="221:35">bytestream_put_be16</name><argument_list pos:start="221:36" pos:end="221:61">(<argument pos:start="221:37" pos:end="221:48"><expr pos:start="221:37" pos:end="221:48"><operator pos:start="221:37" pos:end="221:37">&amp;</operator><name pos:start="221:38" pos:end="221:48">slice_sizes</name></expr></argument>, <argument pos:start="221:51" pos:end="221:60"><expr pos:start="221:51" pos:end="221:60"><name pos:start="221:51" pos:end="221:60">slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:51"><expr pos:start="223:17" pos:end="223:50"><name pos:start="223:17" pos:end="223:19">buf</name> <operator pos:start="223:21" pos:end="223:22">+=</operator> <name pos:start="223:24" pos:end="223:33">slice_size</name> <operator pos:start="223:35" pos:end="223:35">-</operator> <name pos:start="223:37" pos:end="223:50">slice_hdr_size</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="231:9" pos:end="237:54"><if pos:start="231:9" pos:end="233:54">if <condition pos:start="231:12" pos:end="231:41">(<expr pos:start="231:13" pos:end="231:40"><name pos:start="231:13" pos:end="231:35"><name pos:start="231:13" pos:end="231:15">ctx</name><operator pos:start="231:16" pos:end="231:17">-&gt;</operator><name pos:start="231:18" pos:end="231:35">pictures_per_frame</name></name> <operator pos:start="231:37" pos:end="231:38">==</operator> <literal type="number" pos:start="231:40" pos:end="231:40">1</literal></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:54"><block_content pos:start="233:13" pos:end="233:54">

            <expr_stmt pos:start="233:13" pos:end="233:54"><expr pos:start="233:13" pos:end="233:53"><name pos:start="233:13" pos:end="233:24">picture_size</name> <operator pos:start="233:26" pos:end="233:26">=</operator> <name pos:start="233:28" pos:end="233:30">buf</name> <operator pos:start="233:32" pos:end="233:32">-</operator> <name pos:start="233:34" pos:end="233:49">picture_size_pos</name> <operator pos:start="233:51" pos:end="233:51">-</operator> <literal type="number" pos:start="233:53" pos:end="233:53">6</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="235:9" pos:end="237:54">else<block type="pseudo" pos:start="237:13" pos:end="237:54"><block_content pos:start="237:13" pos:end="237:54">

            <expr_stmt pos:start="237:13" pos:end="237:54"><expr pos:start="237:13" pos:end="237:53"><name pos:start="237:13" pos:end="237:24">picture_size</name> <operator pos:start="237:26" pos:end="237:26">=</operator> <name pos:start="237:28" pos:end="237:30">buf</name> <operator pos:start="237:32" pos:end="237:32">-</operator> <name pos:start="237:34" pos:end="237:49">picture_size_pos</name> <operator pos:start="237:51" pos:end="237:51">+</operator> <literal type="number" pos:start="237:53" pos:end="237:53">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:61"><expr pos:start="239:9" pos:end="239:60"><call pos:start="239:9" pos:end="239:60"><name pos:start="239:9" pos:end="239:27">bytestream_put_be32</name><argument_list pos:start="239:28" pos:end="239:60">(<argument pos:start="239:29" pos:end="239:45"><expr pos:start="239:29" pos:end="239:45"><operator pos:start="239:29" pos:end="239:29">&amp;</operator><name pos:start="239:30" pos:end="239:45">picture_size_pos</name></expr></argument>, <argument pos:start="239:48" pos:end="239:59"><expr pos:start="239:48" pos:end="239:59"><name pos:start="239:48" pos:end="239:59">picture_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="245:5" pos:end="245:18"><expr pos:start="245:5" pos:end="245:17"><name pos:start="245:5" pos:end="245:12">orig_buf</name> <operator pos:start="245:14" pos:end="245:15">-=</operator> <literal type="number" pos:start="245:17" pos:end="245:17">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:32"><expr pos:start="247:5" pos:end="247:31"><name pos:start="247:5" pos:end="247:14">frame_size</name> <operator pos:start="247:16" pos:end="247:16">=</operator> <name pos:start="247:18" pos:end="247:20">buf</name> <operator pos:start="247:22" pos:end="247:22">-</operator> <name pos:start="247:24" pos:end="247:31">orig_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:47"><expr pos:start="249:5" pos:end="249:46"><call pos:start="249:5" pos:end="249:46"><name pos:start="249:5" pos:end="249:23">bytestream_put_be32</name><argument_list pos:start="249:24" pos:end="249:46">(<argument pos:start="249:25" pos:end="249:33"><expr pos:start="249:25" pos:end="249:33"><operator pos:start="249:25" pos:end="249:25">&amp;</operator><name pos:start="249:26" pos:end="249:33">orig_buf</name></expr></argument>, <argument pos:start="249:36" pos:end="249:45"><expr pos:start="249:36" pos:end="249:45"><name pos:start="249:36" pos:end="249:45">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:29"><expr pos:start="253:5" pos:end="253:28"><name pos:start="253:5" pos:end="253:13"><name pos:start="253:5" pos:end="253:7">pkt</name><operator pos:start="253:8" pos:end="253:9">-&gt;</operator><name pos:start="253:10" pos:end="253:13">size</name></name>   <operator pos:start="253:17" pos:end="253:17">=</operator> <name pos:start="253:19" pos:end="253:28">frame_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:34"><expr pos:start="255:5" pos:end="255:33"><name pos:start="255:5" pos:end="255:14"><name pos:start="255:5" pos:end="255:7">pkt</name><operator pos:start="255:8" pos:end="255:9">-&gt;</operator><name pos:start="255:10" pos:end="255:14">flags</name></name> <operator pos:start="255:16" pos:end="255:17">|=</operator> <name pos:start="255:19" pos:end="255:33">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:20"><expr pos:start="257:5" pos:end="257:19"><operator pos:start="257:5" pos:end="257:5">*</operator><name pos:start="257:6" pos:end="257:15">got_packet</name> <operator pos:start="257:17" pos:end="257:17">=</operator> <literal type="number" pos:start="257:19" pos:end="257:19">1</literal></expr>;</expr_stmt>



    <return pos:start="261:5" pos:end="261:13">return <expr pos:start="261:12" pos:end="261:12"><literal type="number" pos:start="261:12" pos:end="261:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
