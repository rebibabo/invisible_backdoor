<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10353.c" pos:tabs="8"><function pos:start="1:1" pos:end="122:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:48">gen_intermediate_code_internal</name><parameter_list pos:start="1:49" pos:end="3:63">(<parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">CPUState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">env</name></decl></parameter>, 
                                                 <parameter pos:start="2:50" pos:end="2:69"><decl pos:start="2:50" pos:end="2:69"><type pos:start="2:50" pos:end="2:69"><name pos:start="2:50" pos:end="2:65">TranslationBlock</name> <modifier pos:start="2:67" pos:end="2:67">*</modifier></type><name pos:start="2:68" pos:end="2:69">tb</name></decl></parameter>, 
                                                 <parameter pos:start="3:50" pos:end="3:62"><decl pos:start="3:50" pos:end="3:62"><type pos:start="3:50" pos:end="3:62"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:62">search_pc</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="122:1">{<block_content pos:start="5:5" pos:end="121:13">
    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">DisasContext</name></type> <name pos:start="5:18" pos:end="5:20">dc1</name></decl>, <decl pos:start="5:23" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:25">dc</name> <init pos:start="5:27" pos:end="5:32">= <expr pos:start="5:29" pos:end="5:32"><operator pos:start="5:29" pos:end="5:29">&amp;</operator><name pos:start="5:30" pos:end="5:32">dc1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:26"><decl pos:start="6:5" pos:end="6:25"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">uint16_t</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:25">gen_opc_end</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">j</name></decl>, <decl pos:start="7:12" pos:end="7:13"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:13">lj</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:26"><decl pos:start="8:5" pos:end="8:25"><type pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:16">target_ulong</name></type> <name pos:start="8:18" pos:end="8:25">pc_start</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:28">next_page_start</name></decl>;</decl_stmt>
    <comment type="block" pos:start="10:5" pos:end="10:36">/* generate intermediate code */</comment>
    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:12">pc_start</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:21"><name pos:start="11:16" pos:end="11:17">tb</name><operator pos:start="11:18" pos:end="11:19">-&gt;</operator><name pos:start="11:20" pos:end="11:21">pc</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:16"><expr pos:start="12:5" pos:end="12:15"><name pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:6">dc</name><operator pos:start="12:7" pos:end="12:8">-&gt;</operator><name pos:start="12:9" pos:end="12:10">tb</name></name> <operator pos:start="12:12" pos:end="12:12">=</operator> <name pos:start="12:14" pos:end="12:15">tb</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:15">gen_opc_ptr</name> <operator pos:start="13:17" pos:end="13:17">=</operator> <name pos:start="13:19" pos:end="13:29">gen_opc_buf</name></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:45"><expr pos:start="14:5" pos:end="14:44"><name pos:start="14:5" pos:end="14:15">gen_opc_end</name> <operator pos:start="14:17" pos:end="14:17">=</operator> <name pos:start="14:19" pos:end="14:29">gen_opc_buf</name> <operator pos:start="14:31" pos:end="14:31">+</operator> <name pos:start="14:33" pos:end="14:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:19">gen_opparam_ptr</name> <operator pos:start="15:21" pos:end="15:21">=</operator> <name pos:start="15:23" pos:end="15:37">gen_opparam_buf</name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:28"><expr pos:start="16:5" pos:end="16:27"><name pos:start="16:5" pos:end="16:14"><name pos:start="16:5" pos:end="16:6">dc</name><operator pos:start="16:7" pos:end="16:8">-&gt;</operator><name pos:start="16:9" pos:end="16:14">is_jmp</name></name> <operator pos:start="16:16" pos:end="16:16">=</operator> <name pos:start="16:18" pos:end="16:27">DISAS_NEXT</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:22"><expr pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:6">dc</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:10">pc</name></name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:21">pc_start</name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:53"><expr pos:start="18:5" pos:end="18:52"><name pos:start="18:5" pos:end="18:26"><name pos:start="18:5" pos:end="18:6">dc</name><operator pos:start="18:7" pos:end="18:8">-&gt;</operator><name pos:start="18:9" pos:end="18:26">singlestep_enabled</name></name> <operator pos:start="18:28" pos:end="18:28">=</operator> <name pos:start="18:30" pos:end="18:52"><name pos:start="18:30" pos:end="18:32">env</name><operator pos:start="18:33" pos:end="18:34">-&gt;</operator><name pos:start="18:35" pos:end="18:52">singlestep_enabled</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:20"><expr pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:6">dc</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:15">condjmp</name></name> <operator pos:start="19:17" pos:end="19:17">=</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:27"><expr pos:start="20:5" pos:end="20:26"><name pos:start="20:5" pos:end="20:13"><name pos:start="20:5" pos:end="20:6">dc</name><operator pos:start="20:7" pos:end="20:8">-&gt;</operator><name pos:start="20:9" pos:end="20:13">thumb</name></name> <operator pos:start="20:15" pos:end="20:15">=</operator> <name pos:start="20:17" pos:end="20:26"><name pos:start="20:17" pos:end="20:19">env</name><operator pos:start="20:20" pos:end="20:21">-&gt;</operator><name pos:start="20:22" pos:end="20:26">thumb</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="23:0"><expr pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:6">dc</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:14">is_mem</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</expr_stmt>
<cpp:if pos:start="22:1" pos:end="22:30">#<cpp:directive pos:start="22:2" pos:end="22:3">if</cpp:directive> <expr pos:start="22:5" pos:end="22:30"><operator pos:start="22:5" pos:end="22:5">!</operator><call pos:start="22:6" pos:end="22:30"><name pos:start="22:6" pos:end="22:12">defined</name><argument_list pos:start="22:13" pos:end="22:30">(<argument pos:start="22:14" pos:end="22:29"><expr pos:start="22:14" pos:end="22:29"><name pos:start="22:14" pos:end="22:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt pos:start="23:5" pos:end="25:0"><expr pos:start="23:5" pos:end="23:62"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:6">dc</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:12">user</name></name> <operator pos:start="23:14" pos:end="23:14">=</operator> <operator pos:start="23:16" pos:end="23:16">(</operator><name pos:start="23:17" pos:end="23:34"><name pos:start="23:17" pos:end="23:19">env</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:34">uncached_cpsr</name></name> <operator pos:start="23:36" pos:end="23:36">&amp;</operator> <literal type="number" pos:start="23:38" pos:end="23:41">0x1f</literal><operator pos:start="23:42" pos:end="23:42">)</operator> <operator pos:start="23:44" pos:end="23:45">==</operator> <name pos:start="23:47" pos:end="23:62">ARM_CPU_MODE_USR</name></expr>;</expr_stmt>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="25:5" pos:end="25:71"><expr pos:start="25:5" pos:end="25:70"><name pos:start="25:5" pos:end="25:19">next_page_start</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:31">pc_start</name> <operator pos:start="25:33" pos:end="25:33">&amp;</operator> <name pos:start="25:35" pos:end="25:50">TARGET_PAGE_MASK</name><operator pos:start="25:51" pos:end="25:51">)</operator> <operator pos:start="25:53" pos:end="25:53">+</operator> <name pos:start="25:55" pos:end="25:70">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:22"><expr pos:start="26:5" pos:end="26:21"><name pos:start="26:5" pos:end="26:17">nb_gen_labels</name> <operator pos:start="26:19" pos:end="26:19">=</operator> <literal type="number" pos:start="26:21" pos:end="26:21">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:12"><expr pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:6">lj</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <operator pos:start="27:10" pos:end="27:10">-</operator><literal type="number" pos:start="27:11" pos:end="27:11">1</literal></expr>;</expr_stmt>
    <do pos:start="28:5" pos:end="63:39">do <block pos:start="28:8" pos:end="61:5">{<block_content pos:start="29:9" pos:end="56:9">
        <if_stmt pos:start="29:9" pos:end="38:9"><if pos:start="29:9" pos:end="38:9">if <condition pos:start="29:12" pos:end="29:36">(<expr pos:start="29:13" pos:end="29:35"><name pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:15">env</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:31">nb_breakpoints</name></name> <operator pos:start="29:33" pos:end="29:33">&gt;</operator> <literal type="number" pos:start="29:35" pos:end="29:35">0</literal></expr>)</condition> <block pos:start="29:38" pos:end="38:9">{<block_content pos:start="30:13" pos:end="37:13">
            <for pos:start="30:13" pos:end="37:13">for<control pos:start="30:16" pos:end="30:52">(<init pos:start="30:17" pos:end="30:22"><expr pos:start="30:17" pos:end="30:21"><name pos:start="30:17" pos:end="30:17">j</name> <operator pos:start="30:19" pos:end="30:19">=</operator> <literal type="number" pos:start="30:21" pos:end="30:21">0</literal></expr>;</init> <condition pos:start="30:24" pos:end="30:47"><expr pos:start="30:24" pos:end="30:46"><name pos:start="30:24" pos:end="30:24">j</name> <operator pos:start="30:26" pos:end="30:26">&lt;</operator> <name pos:start="30:28" pos:end="30:46"><name pos:start="30:28" pos:end="30:30">env</name><operator pos:start="30:31" pos:end="30:32">-&gt;</operator><name pos:start="30:33" pos:end="30:46">nb_breakpoints</name></name></expr>;</condition> <incr pos:start="30:49" pos:end="30:51"><expr pos:start="30:49" pos:end="30:51"><name pos:start="30:49" pos:end="30:49">j</name><operator pos:start="30:50" pos:end="30:51">++</operator></expr></incr>)</control> <block pos:start="30:54" pos:end="37:13">{<block_content pos:start="31:17" pos:end="36:17">
                <if_stmt pos:start="31:17" pos:end="36:17"><if pos:start="31:17" pos:end="36:17">if <condition pos:start="31:20" pos:end="31:50">(<expr pos:start="31:21" pos:end="31:49"><name pos:start="31:21" pos:end="31:39"><name pos:start="31:21" pos:end="31:23">env</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:36">breakpoints</name><index pos:start="31:37" pos:end="31:39">[<expr pos:start="31:38" pos:end="31:38"><name pos:start="31:38" pos:end="31:38">j</name></expr>]</index></name> <operator pos:start="31:41" pos:end="31:42">==</operator> <name pos:start="31:44" pos:end="31:49"><name pos:start="31:44" pos:end="31:45">dc</name><operator pos:start="31:46" pos:end="31:47">-&gt;</operator><name pos:start="31:48" pos:end="31:49">pc</name></name></expr>)</condition> <block pos:start="31:52" pos:end="36:17">{<block_content pos:start="32:21" pos:end="35:44">
                    <expr_stmt pos:start="32:21" pos:end="32:52"><expr pos:start="32:21" pos:end="32:51"><call pos:start="32:21" pos:end="32:51"><name pos:start="32:21" pos:end="32:37">gen_op_movl_T0_im</name><argument_list pos:start="32:38" pos:end="32:51">(<argument pos:start="32:39" pos:end="32:50"><expr pos:start="32:39" pos:end="32:50"><operator pos:start="32:39" pos:end="32:39">(</operator><name pos:start="32:40" pos:end="32:43">long</name><operator pos:start="32:44" pos:end="32:44">)</operator><name pos:start="32:45" pos:end="32:50"><name pos:start="32:45" pos:end="32:46">dc</name><operator pos:start="32:47" pos:end="32:48">-&gt;</operator><name pos:start="32:49" pos:end="32:50">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="33:21" pos:end="33:48"><expr pos:start="33:21" pos:end="33:47"><name pos:start="33:21" pos:end="33:45"><name pos:start="33:21" pos:end="33:38">gen_op_movl_reg_TN</name><index pos:start="33:39" pos:end="33:41">[<expr pos:start="33:40" pos:end="33:40"><literal type="number" pos:start="33:40" pos:end="33:40">0</literal></expr>]</index><index pos:start="33:42" pos:end="33:45">[<expr pos:start="33:43" pos:end="33:44"><literal type="number" pos:start="33:43" pos:end="33:44">15</literal></expr>]</index></name><operator pos:start="33:46" pos:end="33:46">(</operator><operator pos:start="33:47" pos:end="33:47">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="34:21" pos:end="34:35"><expr pos:start="34:21" pos:end="34:34"><call pos:start="34:21" pos:end="34:34"><name pos:start="34:21" pos:end="34:32">gen_op_debug</name><argument_list pos:start="34:33" pos:end="34:34">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="35:21" pos:end="35:44"><expr pos:start="35:21" pos:end="35:43"><name pos:start="35:21" pos:end="35:30"><name pos:start="35:21" pos:end="35:22">dc</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:30">is_jmp</name></name> <operator pos:start="35:32" pos:end="35:32">=</operator> <name pos:start="35:34" pos:end="35:43">DISAS_JUMP</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="39:9" pos:end="48:9"><if pos:start="39:9" pos:end="48:9">if <condition pos:start="39:12" pos:end="39:22">(<expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:21">search_pc</name></expr>)</condition> <block pos:start="39:24" pos:end="48:9">{<block_content pos:start="40:13" pos:end="47:40">
            <expr_stmt pos:start="40:13" pos:end="40:42"><expr pos:start="40:13" pos:end="40:41"><name pos:start="40:13" pos:end="40:13">j</name> <operator pos:start="40:15" pos:end="40:15">=</operator> <name pos:start="40:17" pos:end="40:27">gen_opc_ptr</name> <operator pos:start="40:29" pos:end="40:29">-</operator> <name pos:start="40:31" pos:end="40:41">gen_opc_buf</name></expr>;</expr_stmt>
            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:23">(<expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:18">lj</name> <operator pos:start="41:20" pos:end="41:20">&lt;</operator> <name pos:start="41:22" pos:end="41:22">j</name></expr>)</condition> <block pos:start="41:25" pos:end="45:13">{<block_content pos:start="42:17" pos:end="44:50">
                <expr_stmt pos:start="42:17" pos:end="42:21"><expr pos:start="42:17" pos:end="42:20"><name pos:start="42:17" pos:end="42:18">lj</name><operator pos:start="42:19" pos:end="42:20">++</operator></expr>;</expr_stmt>
                <while pos:start="43:17" pos:end="44:50">while <condition pos:start="43:23" pos:end="43:30">(<expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:25">lj</name> <operator pos:start="43:27" pos:end="43:27">&lt;</operator> <name pos:start="43:29" pos:end="43:29">j</name></expr>)</condition><block type="pseudo" pos:start="44:21" pos:end="44:50"><block_content pos:start="44:21" pos:end="44:50">
                    <expr_stmt pos:start="44:21" pos:end="44:50"><expr pos:start="44:21" pos:end="44:49"><name pos:start="44:21" pos:end="44:45"><name pos:start="44:21" pos:end="44:39">gen_opc_instr_start</name><index pos:start="44:40" pos:end="44:45">[<expr pos:start="44:41" pos:end="44:44"><name pos:start="44:41" pos:end="44:42">lj</name><operator pos:start="44:43" pos:end="44:44">++</operator></expr>]</index></name> <operator pos:start="44:47" pos:end="44:47">=</operator> <literal type="number" pos:start="44:49" pos:end="44:49">0</literal></expr>;</expr_stmt></block_content></block></while>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="46:13" pos:end="46:36"><expr pos:start="46:13" pos:end="46:35"><name pos:start="46:13" pos:end="46:26"><name pos:start="46:13" pos:end="46:22">gen_opc_pc</name><index pos:start="46:23" pos:end="46:26">[<expr pos:start="46:24" pos:end="46:25"><name pos:start="46:24" pos:end="46:25">lj</name></expr>]</index></name> <operator pos:start="46:28" pos:end="46:28">=</operator> <name pos:start="46:30" pos:end="46:35"><name pos:start="46:30" pos:end="46:31">dc</name><operator pos:start="46:32" pos:end="46:33">-&gt;</operator><name pos:start="46:34" pos:end="46:35">pc</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="47:13" pos:end="47:40"><expr pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:31">gen_opc_instr_start</name><index pos:start="47:32" pos:end="47:35">[<expr pos:start="47:33" pos:end="47:34"><name pos:start="47:33" pos:end="47:34">lj</name></expr>]</index></name> <operator pos:start="47:37" pos:end="47:37">=</operator> <literal type="number" pos:start="47:39" pos:end="47:39">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="49:9" pos:end="52:34"><if pos:start="49:9" pos:end="50:31">if <condition pos:start="49:12" pos:end="49:23">(<expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:15">env</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:22">thumb</name></name></expr>)</condition><block type="pseudo" pos:start="50:11" pos:end="50:31"><block_content pos:start="50:11" pos:end="50:31">
          <expr_stmt pos:start="50:11" pos:end="50:31"><expr pos:start="50:11" pos:end="50:30"><call pos:start="50:11" pos:end="50:30"><name pos:start="50:11" pos:end="50:26">disas_thumb_insn</name><argument_list pos:start="50:27" pos:end="50:30">(<argument pos:start="50:28" pos:end="50:29"><expr pos:start="50:28" pos:end="50:29"><name pos:start="50:28" pos:end="50:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="51:9" pos:end="52:34">else<block type="pseudo" pos:start="52:11" pos:end="52:34"><block_content pos:start="52:11" pos:end="52:34">
          <expr_stmt pos:start="52:11" pos:end="52:34"><expr pos:start="52:11" pos:end="52:33"><call pos:start="52:11" pos:end="52:33"><name pos:start="52:11" pos:end="52:24">disas_arm_insn</name><argument_list pos:start="52:25" pos:end="52:33">(<argument pos:start="52:26" pos:end="52:28"><expr pos:start="52:26" pos:end="52:28"><name pos:start="52:26" pos:end="52:28">env</name></expr></argument>, <argument pos:start="52:31" pos:end="52:32"><expr pos:start="52:31" pos:end="52:32"><name pos:start="52:31" pos:end="52:32">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="53:9" pos:end="56:9"><if pos:start="53:9" pos:end="56:9">if <condition pos:start="53:12" pos:end="53:39">(<expr pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:14">dc</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:23">condjmp</name></name> <operator pos:start="53:25" pos:end="53:26">&amp;&amp;</operator> <operator pos:start="53:28" pos:end="53:28">!</operator><name pos:start="53:29" pos:end="53:38"><name pos:start="53:29" pos:end="53:30">dc</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:38">is_jmp</name></name></expr>)</condition> <block pos:start="53:41" pos:end="56:9">{<block_content pos:start="54:13" pos:end="55:28">
            <expr_stmt pos:start="54:13" pos:end="54:41"><expr pos:start="54:13" pos:end="54:40"><call pos:start="54:13" pos:end="54:40"><name pos:start="54:13" pos:end="54:25">gen_set_label</name><argument_list pos:start="54:26" pos:end="54:40">(<argument pos:start="54:27" pos:end="54:39"><expr pos:start="54:27" pos:end="54:39"><name pos:start="54:27" pos:end="54:39"><name pos:start="54:27" pos:end="54:28">dc</name><operator pos:start="54:29" pos:end="54:30">-&gt;</operator><name pos:start="54:31" pos:end="54:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="55:13" pos:end="55:28"><expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:14">dc</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:23">condjmp</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="57:9" pos:end="60:63">/* Translation stops when a conditional branch is enoutered.
         * Otherwise the subsequent code could get translated several times.
         * Also stop translation when a page boundary is reached.  This
         * ensures prefech aborts occur at the right place.  */</comment>
    </block_content>}</block> while <condition pos:start="61:13" pos:end="63:38">(<expr pos:start="61:14" pos:end="63:37"><operator pos:start="61:14" pos:end="61:14">!</operator><name pos:start="61:15" pos:end="61:24"><name pos:start="61:15" pos:end="61:16">dc</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:24">is_jmp</name></name> <operator pos:start="61:26" pos:end="61:27">&amp;&amp;</operator> <name pos:start="61:29" pos:end="61:39">gen_opc_ptr</name> <operator pos:start="61:41" pos:end="61:41">&lt;</operator> <name pos:start="61:43" pos:end="61:53">gen_opc_end</name> <operator pos:start="61:55" pos:end="61:56">&amp;&amp;</operator>
             <operator pos:start="62:14" pos:end="62:14">!</operator><name pos:start="62:15" pos:end="62:37"><name pos:start="62:15" pos:end="62:17">env</name><operator pos:start="62:18" pos:end="62:19">-&gt;</operator><name pos:start="62:20" pos:end="62:37">singlestep_enabled</name></name> <operator pos:start="62:39" pos:end="62:40">&amp;&amp;</operator>
             <name pos:start="63:14" pos:end="63:19"><name pos:start="63:14" pos:end="63:15">dc</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:19">pc</name></name> <operator pos:start="63:21" pos:end="63:21">&lt;</operator> <name pos:start="63:23" pos:end="63:37">next_page_start</name></expr>)</condition>;</do>
    <comment type="block" pos:start="64:5" pos:end="66:19">/* At this stage dc-&gt;condjmp will only be set when the skipped
     * instruction was a conditional branch, and the PC has already been
     * written.  */</comment>
    <if_stmt pos:start="67:5" pos:end="97:5"><if pos:start="67:5" pos:end="79:5">if <condition pos:start="67:8" pos:end="67:53">(<expr pos:start="67:9" pos:end="67:52"><call pos:start="67:9" pos:end="67:52"><name pos:start="67:9" pos:end="67:24">__builtin_expect</name><argument_list pos:start="67:25" pos:end="67:52">(<argument pos:start="67:26" pos:end="67:48"><expr pos:start="67:26" pos:end="67:48"><name pos:start="67:26" pos:end="67:48"><name pos:start="67:26" pos:end="67:28">env</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:48">singlestep_enabled</name></name></expr></argument>, <argument pos:start="67:51" pos:end="67:51"><expr pos:start="67:51" pos:end="67:51"><literal type="number" pos:start="67:51" pos:end="67:51">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:55" pos:end="79:5">{<block_content pos:start="69:9" pos:end="78:23">
        <comment type="block" pos:start="68:9" pos:end="68:72">/* Make sure the pc is updated, and raise a debug exception.  */</comment>
        <if_stmt pos:start="69:9" pos:end="72:9"><if pos:start="69:9" pos:end="72:9">if <condition pos:start="69:12" pos:end="69:24">(<expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:14">dc</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:23">condjmp</name></name></expr>)</condition> <block pos:start="69:26" pos:end="72:9">{<block_content pos:start="70:13" pos:end="71:41">
            <expr_stmt pos:start="70:13" pos:end="70:27"><expr pos:start="70:13" pos:end="70:26"><call pos:start="70:13" pos:end="70:26"><name pos:start="70:13" pos:end="70:24">gen_op_debug</name><argument_list pos:start="70:25" pos:end="70:26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="71:13" pos:end="71:41"><expr pos:start="71:13" pos:end="71:40"><call pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:25">gen_set_label</name><argument_list pos:start="71:26" pos:end="71:40">(<argument pos:start="71:27" pos:end="71:39"><expr pos:start="71:27" pos:end="71:39"><name pos:start="71:27" pos:end="71:39"><name pos:start="71:27" pos:end="71:28">dc</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:39">(<expr pos:start="73:13" pos:end="73:38"><name pos:start="73:13" pos:end="73:23"><name pos:start="73:13" pos:end="73:14">dc</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:23">condjmp</name></name> <operator pos:start="73:25" pos:end="73:26">||</operator> <operator pos:start="73:28" pos:end="73:28">!</operator><name pos:start="73:29" pos:end="73:38"><name pos:start="73:29" pos:end="73:30">dc</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:38">is_jmp</name></name></expr>)</condition> <block pos:start="73:41" pos:end="77:9">{<block_content pos:start="74:13" pos:end="76:28">
            <expr_stmt pos:start="74:13" pos:end="74:44"><expr pos:start="74:13" pos:end="74:43"><call pos:start="74:13" pos:end="74:43"><name pos:start="74:13" pos:end="74:29">gen_op_movl_T0_im</name><argument_list pos:start="74:30" pos:end="74:43">(<argument pos:start="74:31" pos:end="74:42"><expr pos:start="74:31" pos:end="74:42"><operator pos:start="74:31" pos:end="74:31">(</operator><name pos:start="74:32" pos:end="74:35">long</name><operator pos:start="74:36" pos:end="74:36">)</operator><name pos:start="74:37" pos:end="74:42"><name pos:start="74:37" pos:end="74:38">dc</name><operator pos:start="74:39" pos:end="74:40">-&gt;</operator><name pos:start="74:41" pos:end="74:42">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="75:13" pos:end="75:40"><expr pos:start="75:13" pos:end="75:39"><name pos:start="75:13" pos:end="75:37"><name pos:start="75:13" pos:end="75:30">gen_op_movl_reg_TN</name><index pos:start="75:31" pos:end="75:33">[<expr pos:start="75:32" pos:end="75:32"><literal type="number" pos:start="75:32" pos:end="75:32">0</literal></expr>]</index><index pos:start="75:34" pos:end="75:37">[<expr pos:start="75:35" pos:end="75:36"><literal type="number" pos:start="75:35" pos:end="75:36">15</literal></expr>]</index></name><operator pos:start="75:38" pos:end="75:38">(</operator><operator pos:start="75:39" pos:end="75:39">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="76:13" pos:end="76:28"><expr pos:start="76:13" pos:end="76:27"><name pos:start="76:13" pos:end="76:23"><name pos:start="76:13" pos:end="76:14">dc</name><operator pos:start="76:15" pos:end="76:16">-&gt;</operator><name pos:start="76:17" pos:end="76:23">condjmp</name></name> <operator pos:start="76:25" pos:end="76:25">=</operator> <literal type="number" pos:start="76:27" pos:end="76:27">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:23"><expr pos:start="78:9" pos:end="78:22"><call pos:start="78:9" pos:end="78:22"><name pos:start="78:9" pos:end="78:20">gen_op_debug</name><argument_list pos:start="78:21" pos:end="78:22">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="79:7" pos:end="97:5">else <block pos:start="79:12" pos:end="97:5">{<block_content pos:start="80:9" pos:end="96:9">
        <switch pos:start="80:9" pos:end="91:9">switch<condition pos:start="80:15" pos:end="80:26">(<expr pos:start="80:16" pos:end="80:25"><name pos:start="80:16" pos:end="80:25"><name pos:start="80:16" pos:end="80:17">dc</name><operator pos:start="80:18" pos:end="80:19">-&gt;</operator><name pos:start="80:20" pos:end="80:25">is_jmp</name></name></expr>)</condition> <block pos:start="80:28" pos:end="91:9">{<block_content pos:start="81:9" pos:end="89:27">
        <case pos:start="81:9" pos:end="81:24">case <expr pos:start="81:14" pos:end="81:23"><name pos:start="81:14" pos:end="81:23">DISAS_NEXT</name></expr>:</case>
            <expr_stmt pos:start="82:13" pos:end="82:39"><expr pos:start="82:13" pos:end="82:38"><call pos:start="82:13" pos:end="82:38"><name pos:start="82:13" pos:end="82:23">gen_goto_tb</name><argument_list pos:start="82:24" pos:end="82:38">(<argument pos:start="82:25" pos:end="82:26"><expr pos:start="82:25" pos:end="82:26"><name pos:start="82:25" pos:end="82:26">dc</name></expr></argument>, <argument pos:start="82:29" pos:end="82:29"><expr pos:start="82:29" pos:end="82:29"><literal type="number" pos:start="82:29" pos:end="82:29">1</literal></expr></argument>, <argument pos:start="82:32" pos:end="82:37"><expr pos:start="82:32" pos:end="82:37"><name pos:start="82:32" pos:end="82:37"><name pos:start="82:32" pos:end="82:33">dc</name><operator pos:start="82:34" pos:end="82:35">-&gt;</operator><name pos:start="82:36" pos:end="82:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <default pos:start="83:9" pos:end="83:16">default:</default>
        <case pos:start="84:9" pos:end="84:24">case <expr pos:start="84:14" pos:end="84:23"><name pos:start="84:14" pos:end="84:23">DISAS_JUMP</name></expr>:</case>
        <case pos:start="85:9" pos:end="85:26">case <expr pos:start="85:14" pos:end="85:25"><name pos:start="85:14" pos:end="85:25">DISAS_UPDATE</name></expr>:</case>
            <comment type="block" pos:start="86:13" pos:end="86:79">/* indicate that the hash table must be used to find the next TB */</comment>
            <expr_stmt pos:start="87:13" pos:end="87:31"><expr pos:start="87:13" pos:end="87:30"><call pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:28">gen_op_movl_T0_0</name><argument_list pos:start="87:29" pos:end="87:30">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="88:13" pos:end="88:29"><expr pos:start="88:13" pos:end="88:28"><call pos:start="88:13" pos:end="88:28"><name pos:start="88:13" pos:end="88:26">gen_op_exit_tb</name><argument_list pos:start="88:27" pos:end="88:28">()</argument_list></call></expr>;</expr_stmt>
        <case pos:start="89:9" pos:end="89:27">case <expr pos:start="89:14" pos:end="89:26"><name pos:start="89:14" pos:end="89:26">DISAS_TB_JUMP</name></expr>:</case>
            <comment type="block" pos:start="90:13" pos:end="90:42">/* nothing more to generate */</comment>
        </block_content>}</block></switch>
        <if_stmt pos:start="92:9" pos:end="96:9"><if pos:start="92:9" pos:end="96:9">if <condition pos:start="92:12" pos:end="92:24">(<expr pos:start="92:13" pos:end="92:23"><name pos:start="92:13" pos:end="92:23"><name pos:start="92:13" pos:end="92:14">dc</name><operator pos:start="92:15" pos:end="92:16">-&gt;</operator><name pos:start="92:17" pos:end="92:23">condjmp</name></name></expr>)</condition> <block pos:start="92:26" pos:end="96:9">{<block_content pos:start="93:13" pos:end="95:28">
            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><call pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:25">gen_set_label</name><argument_list pos:start="93:26" pos:end="93:40">(<argument pos:start="93:27" pos:end="93:39"><expr pos:start="93:27" pos:end="93:39"><name pos:start="93:27" pos:end="93:39"><name pos:start="93:27" pos:end="93:28">dc</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="94:13" pos:end="94:39"><expr pos:start="94:13" pos:end="94:38"><call pos:start="94:13" pos:end="94:38"><name pos:start="94:13" pos:end="94:23">gen_goto_tb</name><argument_list pos:start="94:24" pos:end="94:38">(<argument pos:start="94:25" pos:end="94:26"><expr pos:start="94:25" pos:end="94:26"><name pos:start="94:25" pos:end="94:26">dc</name></expr></argument>, <argument pos:start="94:29" pos:end="94:29"><expr pos:start="94:29" pos:end="94:29"><literal type="number" pos:start="94:29" pos:end="94:29">1</literal></expr></argument>, <argument pos:start="94:32" pos:end="94:37"><expr pos:start="94:32" pos:end="94:37"><name pos:start="94:32" pos:end="94:37"><name pos:start="94:32" pos:end="94:33">dc</name><operator pos:start="94:34" pos:end="94:35">-&gt;</operator><name pos:start="94:36" pos:end="94:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="95:13" pos:end="95:28"><expr pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:14">dc</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:23">condjmp</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <literal type="number" pos:start="95:27" pos:end="95:27">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="98:5" pos:end="100:0"><expr pos:start="98:5" pos:end="98:31"><operator pos:start="98:5" pos:end="98:5">*</operator><name pos:start="98:6" pos:end="98:16">gen_opc_ptr</name> <operator pos:start="98:18" pos:end="98:18">=</operator> <name pos:start="98:20" pos:end="98:31">INDEX_op_end</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="99:1" pos:end="99:18">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:18">DEBUG_DISAS</name></cpp:ifdef>
    <if_stmt pos:start="100:5" pos:end="112:0"><if pos:start="100:5" pos:end="112:0">if <condition pos:start="100:8" pos:end="100:37">(<expr pos:start="100:9" pos:end="100:36"><name pos:start="100:9" pos:end="100:16">loglevel</name> <operator pos:start="100:18" pos:end="100:18">&amp;</operator> <name pos:start="100:20" pos:end="100:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="100:39" pos:end="112:0">{<block_content pos:start="101:9" pos:end="109:9">
        <expr_stmt pos:start="101:9" pos:end="101:47"><expr pos:start="101:9" pos:end="101:46"><call pos:start="101:9" pos:end="101:46"><name pos:start="101:9" pos:end="101:15">fprintf</name><argument_list pos:start="101:16" pos:end="101:46">(<argument pos:start="101:17" pos:end="101:23"><expr pos:start="101:17" pos:end="101:23"><name pos:start="101:17" pos:end="101:23">logfile</name></expr></argument>, <argument pos:start="101:26" pos:end="101:45"><expr pos:start="101:26" pos:end="101:45"><literal type="string" pos:start="101:26" pos:end="101:45">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="102:9" pos:end="102:62"><expr pos:start="102:9" pos:end="102:61"><call pos:start="102:9" pos:end="102:61"><name pos:start="102:9" pos:end="102:15">fprintf</name><argument_list pos:start="102:16" pos:end="102:61">(<argument pos:start="102:17" pos:end="102:23"><expr pos:start="102:17" pos:end="102:23"><name pos:start="102:17" pos:end="102:23">logfile</name></expr></argument>, <argument pos:start="102:26" pos:end="102:35"><expr pos:start="102:26" pos:end="102:35"><literal type="string" pos:start="102:26" pos:end="102:35">"IN: %s\n"</literal></expr></argument>, <argument pos:start="102:38" pos:end="102:60"><expr pos:start="102:38" pos:end="102:60"><call pos:start="102:38" pos:end="102:60"><name pos:start="102:38" pos:end="102:50">lookup_symbol</name><argument_list pos:start="102:51" pos:end="102:60">(<argument pos:start="102:52" pos:end="102:59"><expr pos:start="102:52" pos:end="102:59"><name pos:start="102:52" pos:end="102:59">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="103:9" pos:end="103:71"><expr pos:start="103:9" pos:end="103:70"><call pos:start="103:9" pos:end="103:70"><name pos:start="103:9" pos:end="103:20">target_disas</name><argument_list pos:start="103:21" pos:end="103:70">(<argument pos:start="103:22" pos:end="103:28"><expr pos:start="103:22" pos:end="103:28"><name pos:start="103:22" pos:end="103:28">logfile</name></expr></argument>, <argument pos:start="103:31" pos:end="103:38"><expr pos:start="103:31" pos:end="103:38"><name pos:start="103:31" pos:end="103:38">pc_start</name></expr></argument>, <argument pos:start="103:41" pos:end="103:57"><expr pos:start="103:41" pos:end="103:57"><name pos:start="103:41" pos:end="103:46"><name pos:start="103:41" pos:end="103:42">dc</name><operator pos:start="103:43" pos:end="103:44">-&gt;</operator><name pos:start="103:45" pos:end="103:46">pc</name></name> <operator pos:start="103:48" pos:end="103:48">-</operator> <name pos:start="103:50" pos:end="103:57">pc_start</name></expr></argument>, <argument pos:start="103:60" pos:end="103:69"><expr pos:start="103:60" pos:end="103:69"><name pos:start="103:60" pos:end="103:69"><name pos:start="103:60" pos:end="103:62">env</name><operator pos:start="103:63" pos:end="103:64">-&gt;</operator><name pos:start="103:65" pos:end="103:69">thumb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="104:9" pos:end="104:31"><expr pos:start="104:9" pos:end="104:30"><call pos:start="104:9" pos:end="104:30"><name pos:start="104:9" pos:end="104:15">fprintf</name><argument_list pos:start="104:16" pos:end="104:30">(<argument pos:start="104:17" pos:end="104:23"><expr pos:start="104:17" pos:end="104:23"><name pos:start="104:17" pos:end="104:23">logfile</name></expr></argument>, <argument pos:start="104:26" pos:end="104:29"><expr pos:start="104:26" pos:end="104:29"><literal type="string" pos:start="104:26" pos:end="104:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:39">(<expr pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:20">loglevel</name> <operator pos:start="105:22" pos:end="105:22">&amp;</operator> <operator pos:start="105:24" pos:end="105:24">(</operator><name pos:start="105:25" pos:end="105:37">CPU_LOG_TB_OP</name><operator pos:start="105:38" pos:end="105:38">)</operator></expr>)</condition> <block pos:start="105:41" pos:end="109:9">{<block_content pos:start="106:13" pos:end="108:35">
            <expr_stmt pos:start="106:13" pos:end="106:38"><expr pos:start="106:13" pos:end="106:37"><call pos:start="106:13" pos:end="106:37"><name pos:start="106:13" pos:end="106:19">fprintf</name><argument_list pos:start="106:20" pos:end="106:37">(<argument pos:start="106:21" pos:end="106:27"><expr pos:start="106:21" pos:end="106:27"><name pos:start="106:21" pos:end="106:27">logfile</name></expr></argument>, <argument pos:start="106:30" pos:end="106:36"><expr pos:start="106:30" pos:end="106:36"><literal type="string" pos:start="106:30" pos:end="106:36">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="107:13" pos:end="107:51"><expr pos:start="107:13" pos:end="107:50"><call pos:start="107:13" pos:end="107:50"><name pos:start="107:13" pos:end="107:20">dump_ops</name><argument_list pos:start="107:21" pos:end="107:50">(<argument pos:start="107:22" pos:end="107:32"><expr pos:start="107:22" pos:end="107:32"><name pos:start="107:22" pos:end="107:32">gen_opc_buf</name></expr></argument>, <argument pos:start="107:35" pos:end="107:49"><expr pos:start="107:35" pos:end="107:49"><name pos:start="107:35" pos:end="107:49">gen_opparam_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="108:13" pos:end="108:35"><expr pos:start="108:13" pos:end="108:34"><call pos:start="108:13" pos:end="108:34"><name pos:start="108:13" pos:end="108:19">fprintf</name><argument_list pos:start="108:20" pos:end="108:34">(<argument pos:start="108:21" pos:end="108:27"><expr pos:start="108:21" pos:end="108:27"><name pos:start="108:21" pos:end="108:27">logfile</name></expr></argument>, <argument pos:start="108:30" pos:end="108:33"><expr pos:start="108:30" pos:end="108:33"><literal type="string" pos:start="108:30" pos:end="108:33">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="112:5" pos:end="120:5"><if pos:start="112:5" pos:end="118:5">if <condition pos:start="112:8" pos:end="112:18">(<expr pos:start="112:9" pos:end="112:17"><name pos:start="112:9" pos:end="112:17">search_pc</name></expr>)</condition> <block pos:start="112:20" pos:end="118:5">{<block_content pos:start="113:9" pos:end="117:21">
        <expr_stmt pos:start="113:9" pos:end="113:38"><expr pos:start="113:9" pos:end="113:37"><name pos:start="113:9" pos:end="113:9">j</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <name pos:start="113:13" pos:end="113:23">gen_opc_ptr</name> <operator pos:start="113:25" pos:end="113:25">-</operator> <name pos:start="113:27" pos:end="113:37">gen_opc_buf</name></expr>;</expr_stmt>
        <expr_stmt pos:start="114:9" pos:end="114:13"><expr pos:start="114:9" pos:end="114:12"><name pos:start="114:9" pos:end="114:10">lj</name><operator pos:start="114:11" pos:end="114:12">++</operator></expr>;</expr_stmt>
        <while pos:start="115:9" pos:end="116:42">while <condition pos:start="115:15" pos:end="115:23">(<expr pos:start="115:16" pos:end="115:22"><name pos:start="115:16" pos:end="115:17">lj</name> <operator pos:start="115:19" pos:end="115:20">&lt;=</operator> <name pos:start="115:22" pos:end="115:22">j</name></expr>)</condition><block type="pseudo" pos:start="116:13" pos:end="116:42"><block_content pos:start="116:13" pos:end="116:42">
            <expr_stmt pos:start="116:13" pos:end="116:42"><expr pos:start="116:13" pos:end="116:41"><name pos:start="116:13" pos:end="116:37"><name pos:start="116:13" pos:end="116:31">gen_opc_instr_start</name><index pos:start="116:32" pos:end="116:37">[<expr pos:start="116:33" pos:end="116:36"><name pos:start="116:33" pos:end="116:34">lj</name><operator pos:start="116:35" pos:end="116:36">++</operator></expr>]</index></name> <operator pos:start="116:39" pos:end="116:39">=</operator> <literal type="number" pos:start="116:41" pos:end="116:41">0</literal></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt pos:start="117:9" pos:end="117:21"><expr pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:10">tb</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:16">size</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <literal type="number" pos:start="117:20" pos:end="117:20">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="118:7" pos:end="120:5">else <block pos:start="118:12" pos:end="120:5">{<block_content pos:start="119:9" pos:end="119:37">
        <expr_stmt pos:start="119:9" pos:end="119:37"><expr pos:start="119:9" pos:end="119:36"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:10">tb</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:16">size</name></name> <operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:25"><name pos:start="119:20" pos:end="119:21">dc</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:25">pc</name></name> <operator pos:start="119:27" pos:end="119:27">-</operator> <name pos:start="119:29" pos:end="119:36">pc_start</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>
</block_content>}</block></function></unit>
