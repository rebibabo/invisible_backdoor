<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15267.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">usb_net_handle_dataout</name><parameter_list pos:start="1:34" pos:end="1:63">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:45">USBNetState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:59">USBPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:20">= <expr pos:start="5:15" pos:end="5:20"><name pos:start="5:15" pos:end="5:20"><name pos:start="5:15" pos:end="5:15">p</name><operator pos:start="5:16" pos:end="5:17">-&gt;</operator><name pos:start="5:18" pos:end="5:20">len</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">sz</name> <init pos:start="7:12" pos:end="7:44">= <expr pos:start="7:14" pos:end="7:44"><sizeof pos:start="7:14" pos:end="7:31">sizeof<argument_list pos:start="7:20" pos:end="7:31">(<argument pos:start="7:21" pos:end="7:30"><expr pos:start="7:21" pos:end="7:30"><name pos:start="7:21" pos:end="7:30"><name pos:start="7:21" pos:end="7:21">s</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:30">out_buf</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="7:33" pos:end="7:33">-</operator> <name pos:start="7:35" pos:end="7:44"><name pos:start="7:35" pos:end="7:35">s</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:44">out_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:56"><decl pos:start="9:5" pos:end="11:55"><type pos:start="9:5" pos:end="9:34"><name pos:start="9:5" pos:end="9:32"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:32">rndis_packet_msg_type</name></name> <modifier pos:start="9:34" pos:end="9:34">*</modifier></type><name pos:start="9:35" pos:end="9:37">msg</name> <init pos:start="9:39" pos:end="11:55">=

            <expr pos:start="11:13" pos:end="11:55"><operator pos:start="11:13" pos:end="11:13">(</operator>struct <name pos:start="11:21" pos:end="11:41">rndis_packet_msg_type</name> <operator pos:start="11:43" pos:end="11:43">*</operator><operator pos:start="11:44" pos:end="11:44">)</operator> <name pos:start="11:46" pos:end="11:55"><name pos:start="11:46" pos:end="11:46">s</name><operator pos:start="11:47" pos:end="11:48">-&gt;</operator><name pos:start="11:49" pos:end="11:55">out_buf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">len</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="17:1" pos:end="17:20">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:20">TRAFFIC_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="19:5" pos:end="19:57"><expr pos:start="19:5" pos:end="19:56"><call pos:start="19:5" pos:end="19:56"><name pos:start="19:5" pos:end="19:11">fprintf</name><argument_list pos:start="19:12" pos:end="19:56">(<argument pos:start="19:13" pos:end="19:18"><expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18">stderr</name></expr></argument>, <argument pos:start="19:21" pos:end="19:47"><expr pos:start="19:21" pos:end="19:47"><literal type="string" pos:start="19:21" pos:end="19:47">"usbnet: data out len %u\n"</literal></expr></argument>, <argument pos:start="19:50" pos:end="19:55"><expr pos:start="19:50" pos:end="19:55"><name pos:start="19:50" pos:end="19:55"><name pos:start="19:50" pos:end="19:50">p</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:55">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="21:5" pos:end="42:0">{<block_content pos:start="23:9" pos:end="37:32">

        <decl_stmt pos:start="23:9" pos:end="23:14"><decl pos:start="23:9" pos:end="23:13"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><call pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="25:28">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:27"><expr pos:start="25:25" pos:end="25:27"><literal type="string" pos:start="25:25" pos:end="25:27">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="27:9" pos:end="35:9">for <control pos:start="27:13" pos:end="27:36">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:31"><expr pos:start="27:21" pos:end="27:30"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:30"><name pos:start="27:25" pos:end="27:25">p</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:30">len</name></name></expr>;</condition> <incr pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:33">i</name><operator pos:start="27:34" pos:end="27:35">++</operator></expr></incr>)</control> <block pos:start="27:38" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:49">

            <if_stmt pos:start="29:13" pos:end="31:46"><if pos:start="29:13" pos:end="31:46">if <condition pos:start="29:16" pos:end="29:26">(<expr pos:start="29:17" pos:end="29:25"><operator pos:start="29:17" pos:end="29:17">!</operator><operator pos:start="29:18" pos:end="29:18">(</operator><name pos:start="29:19" pos:end="29:19">i</name> <operator pos:start="29:21" pos:end="29:21">&amp;</operator> <literal type="number" pos:start="29:23" pos:end="29:24">15</literal><operator pos:start="29:25" pos:end="29:25">)</operator></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:46"><block_content pos:start="31:17" pos:end="31:46">

                <expr_stmt pos:start="31:17" pos:end="31:46"><expr pos:start="31:17" pos:end="31:45"><call pos:start="31:17" pos:end="31:45"><name pos:start="31:17" pos:end="31:23">fprintf</name><argument_list pos:start="31:24" pos:end="31:45">(<argument pos:start="31:25" pos:end="31:30"><expr pos:start="31:25" pos:end="31:30"><name pos:start="31:25" pos:end="31:30">stderr</name></expr></argument>, <argument pos:start="31:33" pos:end="31:41"><expr pos:start="31:33" pos:end="31:41"><literal type="string" pos:start="31:33" pos:end="31:41">"\n%04x:"</literal></expr></argument>, <argument pos:start="31:44" pos:end="31:44"><expr pos:start="31:44" pos:end="31:44"><name pos:start="31:44" pos:end="31:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:49"><expr pos:start="33:13" pos:end="33:48"><call pos:start="33:13" pos:end="33:48"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:48">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">stderr</name></expr></argument>, <argument pos:start="33:29" pos:end="33:35"><expr pos:start="33:29" pos:end="33:35"><literal type="string" pos:start="33:29" pos:end="33:35">" %02x"</literal></expr></argument>, <argument pos:start="33:38" pos:end="33:47"><expr pos:start="33:38" pos:end="33:47"><name pos:start="33:38" pos:end="33:47"><name pos:start="33:38" pos:end="33:38">p</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:44">data</name><index pos:start="33:45" pos:end="33:47">[<expr pos:start="33:46" pos:end="33:46"><name pos:start="33:46" pos:end="33:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><call pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="37:31">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">stderr</name></expr></argument>, <argument pos:start="37:25" pos:end="37:30"><expr pos:start="37:25" pos:end="37:30"><literal type="string" pos:start="37:25" pos:end="37:30">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="45:5" pos:end="47:17"><if pos:start="45:5" pos:end="47:17">if <condition pos:start="45:8" pos:end="45:17">(<expr pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:10">sz</name> <operator pos:start="45:12" pos:end="45:12">&gt;</operator> <name pos:start="45:14" pos:end="45:16">ret</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:17"><block_content pos:start="47:9" pos:end="47:17">

        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:10">sz</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:16">ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:49"><expr pos:start="49:5" pos:end="49:48"><call pos:start="49:5" pos:end="49:48"><name pos:start="49:5" pos:end="49:10">memcpy</name><argument_list pos:start="49:11" pos:end="49:48">(<argument pos:start="49:12" pos:end="49:34"><expr pos:start="49:12" pos:end="49:34"><operator pos:start="49:12" pos:end="49:12">&amp;</operator><name pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:22">out_buf</name><index pos:start="49:23" pos:end="49:34">[<expr pos:start="49:24" pos:end="49:33"><name pos:start="49:24" pos:end="49:33"><name pos:start="49:24" pos:end="49:24">s</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:33">out_ptr</name></name></expr>]</index></name></expr></argument>, <argument pos:start="49:37" pos:end="49:43"><expr pos:start="49:37" pos:end="49:43"><name pos:start="49:37" pos:end="49:43"><name pos:start="49:37" pos:end="49:37">p</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:43">data</name></name></expr></argument>, <argument pos:start="49:46" pos:end="49:47"><expr pos:start="49:46" pos:end="49:47"><name pos:start="49:46" pos:end="49:47">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:21"><expr pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:14">out_ptr</name></name> <operator pos:start="51:16" pos:end="51:17">+=</operator> <name pos:start="51:19" pos:end="51:20">sz</name></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="67:5"><if pos:start="55:5" pos:end="67:5">if <condition pos:start="55:8" pos:end="55:21">(<expr pos:start="55:9" pos:end="55:20"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:20"><name pos:start="55:10" pos:end="55:17">is_rndis</name><argument_list pos:start="55:18" pos:end="55:20">(<argument pos:start="55:19" pos:end="55:19"><expr pos:start="55:19" pos:end="55:19"><name pos:start="55:19" pos:end="55:19">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:23" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:19">

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:21">(<expr pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:20">64</literal></expr>)</condition> <block pos:start="57:23" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:27">

            <expr_stmt pos:start="59:13" pos:end="59:66"><expr pos:start="59:13" pos:end="59:65"><call pos:start="59:13" pos:end="59:65"><name pos:start="59:13" pos:end="59:28">qemu_send_packet</name><argument_list pos:start="59:29" pos:end="59:65">(<argument pos:start="59:30" pos:end="59:40"><expr pos:start="59:30" pos:end="59:40"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:40"><name pos:start="59:31" pos:end="59:31">s</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:36">nic</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:40">nc</name></name></expr></argument>, <argument pos:start="59:43" pos:end="59:52"><expr pos:start="59:43" pos:end="59:52"><name pos:start="59:43" pos:end="59:52"><name pos:start="59:43" pos:end="59:43">s</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:52">out_buf</name></name></expr></argument>, <argument pos:start="59:55" pos:end="59:64"><expr pos:start="59:55" pos:end="59:64"><name pos:start="59:55" pos:end="59:64"><name pos:start="59:55" pos:end="59:55">s</name><operator pos:start="59:56" pos:end="59:57">-&gt;</operator><name pos:start="59:58" pos:end="59:64">out_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:27"><expr pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:22">out_ptr</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:42"><expr pos:start="69:5" pos:end="69:41"><name pos:start="69:5" pos:end="69:7">len</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:41"><name pos:start="69:11" pos:end="69:21">le32_to_cpu</name><argument_list pos:start="69:22" pos:end="69:41">(<argument pos:start="69:23" pos:end="69:40"><expr pos:start="69:23" pos:end="69:40"><name pos:start="69:23" pos:end="69:40"><name pos:start="69:23" pos:end="69:25">msg</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:40">MessageLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="73:19"><if pos:start="71:5" pos:end="73:19">if <condition pos:start="71:8" pos:end="71:43">(<expr pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:18">out_ptr</name></name> <operator pos:start="71:20" pos:end="71:20">&lt;</operator> <literal type="number" pos:start="71:22" pos:end="71:22">8</literal> <operator pos:start="71:24" pos:end="71:25">||</operator> <name pos:start="71:27" pos:end="71:36"><name pos:start="71:27" pos:end="71:27">s</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:36">out_ptr</name></name> <operator pos:start="71:38" pos:end="71:38">&lt;</operator> <name pos:start="71:40" pos:end="71:42">len</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:19"><block_content pos:start="73:9" pos:end="73:19">

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="85:5"><if pos:start="75:5" pos:end="85:5">if <condition pos:start="75:8" pos:end="75:58">(<expr pos:start="75:9" pos:end="75:57"><call pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:19">le32_to_cpu</name><argument_list pos:start="75:20" pos:end="75:37">(<argument pos:start="75:21" pos:end="75:36"><expr pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:23">msg</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:36">MessageType</name></name></expr></argument>)</argument_list></call> <operator pos:start="75:39" pos:end="75:40">==</operator> <name pos:start="75:42" pos:end="75:57">RNDIS_PACKET_MSG</name></expr>)</condition> <block pos:start="75:60" pos:end="85:5">{<block_content pos:start="77:9" pos:end="83:67">

        <decl_stmt pos:start="77:9" pos:end="77:57"><decl pos:start="77:9" pos:end="77:56"><type pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:16">uint32_t</name></type> <name pos:start="77:18" pos:end="77:21">offs</name> <init pos:start="77:23" pos:end="77:56">= <expr pos:start="77:25" pos:end="77:56"><literal type="number" pos:start="77:25" pos:end="77:27">8</literal> <operator pos:start="77:27" pos:end="77:27">+</operator> <call pos:start="77:29" pos:end="77:56"><name pos:start="77:29" pos:end="77:39">le32_to_cpu</name><argument_list pos:start="77:40" pos:end="77:56">(<argument pos:start="77:41" pos:end="77:55"><expr pos:start="77:41" pos:end="77:55"><name pos:start="77:41" pos:end="77:55"><name pos:start="77:41" pos:end="77:43">msg</name><operator pos:start="77:44" pos:end="77:45">-&gt;</operator><name pos:start="77:46" pos:end="77:55">DataOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:53"><decl pos:start="79:9" pos:end="79:52"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint32_t</name></type> <name pos:start="79:18" pos:end="79:21">size</name> <init pos:start="79:23" pos:end="79:52">= <expr pos:start="79:25" pos:end="79:52"><call pos:start="79:25" pos:end="79:52"><name pos:start="79:25" pos:end="79:35">le32_to_cpu</name><argument_list pos:start="79:36" pos:end="79:52">(<argument pos:start="79:37" pos:end="79:51"><expr pos:start="79:37" pos:end="79:51"><name pos:start="79:37" pos:end="79:51"><name pos:start="79:37" pos:end="79:39">msg</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:51">DataLength</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="81:9" pos:end="83:67"><if pos:start="81:9" pos:end="83:67">if <condition pos:start="81:12" pos:end="81:31">(<expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:16">offs</name> <operator pos:start="81:18" pos:end="81:18">+</operator> <name pos:start="81:20" pos:end="81:23">size</name> <operator pos:start="81:25" pos:end="81:26">&lt;=</operator> <name pos:start="81:28" pos:end="81:30">len</name></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:67"><block_content pos:start="83:13" pos:end="83:67">

            <expr_stmt pos:start="83:13" pos:end="83:67"><expr pos:start="83:13" pos:end="83:66"><call pos:start="83:13" pos:end="83:66"><name pos:start="83:13" pos:end="83:28">qemu_send_packet</name><argument_list pos:start="83:29" pos:end="83:66">(<argument pos:start="83:30" pos:end="83:40"><expr pos:start="83:30" pos:end="83:40"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:40"><name pos:start="83:31" pos:end="83:31">s</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:36">nic</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:40">nc</name></name></expr></argument>, <argument pos:start="83:43" pos:end="83:59"><expr pos:start="83:43" pos:end="83:59"><name pos:start="83:43" pos:end="83:52"><name pos:start="83:43" pos:end="83:43">s</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:52">out_buf</name></name> <operator pos:start="83:54" pos:end="83:54">+</operator> <name pos:start="83:56" pos:end="83:59">offs</name></expr></argument>, <argument pos:start="83:62" pos:end="83:65"><expr pos:start="83:62" pos:end="83:65"><name pos:start="83:62" pos:end="83:65">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:22"><expr pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:14"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:14">out_ptr</name></name> <operator pos:start="87:16" pos:end="87:17">-=</operator> <name pos:start="87:19" pos:end="87:21">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:54"><expr pos:start="89:5" pos:end="89:53"><call pos:start="89:5" pos:end="89:53"><name pos:start="89:5" pos:end="89:11">memmove</name><argument_list pos:start="89:12" pos:end="89:53">(<argument pos:start="89:13" pos:end="89:22"><expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:22">out_buf</name></name></expr></argument>, <argument pos:start="89:25" pos:end="89:40"><expr pos:start="89:25" pos:end="89:40"><operator pos:start="89:25" pos:end="89:25">&amp;</operator><name pos:start="89:26" pos:end="89:40"><name pos:start="89:26" pos:end="89:26">s</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:35">out_buf</name><index pos:start="89:36" pos:end="89:40">[<expr pos:start="89:37" pos:end="89:39"><name pos:start="89:37" pos:end="89:39">len</name></expr>]</index></name></expr></argument>, <argument pos:start="89:43" pos:end="89:52"><expr pos:start="89:43" pos:end="89:52"><name pos:start="89:43" pos:end="89:52"><name pos:start="89:43" pos:end="89:43">s</name><operator pos:start="89:44" pos:end="89:45">-&gt;</operator><name pos:start="89:46" pos:end="89:52">out_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
