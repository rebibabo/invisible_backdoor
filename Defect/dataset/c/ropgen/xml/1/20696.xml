<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20696.c" pos:tabs="8"><function pos:start="1:1" pos:end="64:43"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">pc_cpu_pre_plug</name><parameter_list pos:start="1:28" pos:end="2:59">(<parameter pos:start="1:29" pos:end="1:55"><decl pos:start="1:29" pos:end="1:55"><type pos:start="1:29" pos:end="1:55"><name pos:start="1:29" pos:end="1:42">HotplugHandler</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:55">hotplug_dev</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:44"><decl pos:start="2:29" pos:end="2:44"><type pos:start="2:29" pos:end="2:44"><name pos:start="2:29" pos:end="2:39">DeviceState</name> <modifier pos:start="2:41" pos:end="2:41">*</modifier></type><name pos:start="2:42" pos:end="2:44">dev</name></decl></parameter>, <parameter pos:start="2:47" pos:end="2:58"><decl pos:start="2:47" pos:end="2:58"><type pos:start="2:47" pos:end="2:58"><name pos:start="2:47" pos:end="2:51">Error</name> <modifier pos:start="2:53" pos:end="2:53">*</modifier><modifier pos:start="2:54" pos:end="2:54">*</modifier></type><name pos:start="2:55" pos:end="2:58">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="64:43">{<block_content pos:start="4:5" pos:end="64:43">
    <decl_stmt pos:start="4:5" pos:end="4:12"><decl pos:start="4:5" pos:end="4:11"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">idx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:24"><decl pos:start="6:5" pos:end="6:23"><type pos:start="6:5" pos:end="6:15"><name pos:start="6:5" pos:end="6:13">CPUArchId</name> <modifier pos:start="6:15" pos:end="6:15">*</modifier></type><name pos:start="6:16" pos:end="6:23">cpu_slot</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18">X86CPUTopoInfo</name></type> <name pos:start="7:20" pos:end="7:23">topo</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:31"><decl pos:start="8:5" pos:end="8:30"><type pos:start="8:5" pos:end="8:12"><name pos:start="8:5" pos:end="8:10">X86CPU</name> <modifier pos:start="8:12" pos:end="8:12">*</modifier></type><name pos:start="8:13" pos:end="8:15">cpu</name> <init pos:start="8:17" pos:end="8:30">= <expr pos:start="8:19" pos:end="8:30"><call pos:start="8:19" pos:end="8:30"><name pos:start="8:19" pos:end="8:25">X86_CPU</name><argument_list pos:start="8:26" pos:end="8:30">(<argument pos:start="8:27" pos:end="8:29"><expr pos:start="8:27" pos:end="8:29"><name pos:start="8:27" pos:end="8:29">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:24">pcms</name> <init pos:start="9:26" pos:end="9:50">= <expr pos:start="9:28" pos:end="9:50"><call pos:start="9:28" pos:end="9:50"><name pos:start="9:28" pos:end="9:37">PC_MACHINE</name><argument_list pos:start="9:38" pos:end="9:50">(<argument pos:start="9:39" pos:end="9:49"><expr pos:start="9:39" pos:end="9:49"><name pos:start="9:39" pos:end="9:49">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="10:5" pos:end="10:78">/* if APIC ID is not set, set it based on socket/core/thread properties */</comment>
    <if_stmt pos:start="11:5" pos:end="64:43"><if pos:start="11:5" pos:end="64:43">if <condition pos:start="11:8" pos:end="11:43">(<expr pos:start="11:9" pos:end="11:42"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:11">cpu</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:20">apic_id</name></name> <operator pos:start="11:22" pos:end="11:23">==</operator> <name pos:start="11:25" pos:end="11:42">UNASSIGNED_APIC_ID</name></expr>)</condition> <block pos:start="11:45" pos:end="64:43">{<block_content pos:start="12:9" pos:end="64:43">
        <decl_stmt pos:start="12:9" pos:end="12:66"><decl pos:start="12:9" pos:end="12:65"><type pos:start="12:9" pos:end="12:11"><name pos:start="12:9" pos:end="12:11">int</name></type> <name pos:start="12:13" pos:end="12:22">max_socket</name> <init pos:start="12:24" pos:end="12:65">= <expr pos:start="12:26" pos:end="12:65"><operator pos:start="12:26" pos:end="12:26">(</operator><name pos:start="12:27" pos:end="12:34">max_cpus</name> <operator pos:start="12:36" pos:end="12:36">-</operator> <literal type="number" pos:start="12:38" pos:end="12:38">1</literal><operator pos:start="12:39" pos:end="12:39">)</operator> <operator pos:start="12:41" pos:end="12:41">/</operator> <name pos:start="12:43" pos:end="12:53">smp_threads</name> <operator pos:start="12:55" pos:end="12:55">/</operator> <name pos:start="12:57" pos:end="12:65">smp_cores</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="13:9" pos:end="64:43"><if pos:start="13:9" pos:end="15:9">if <condition pos:start="13:12" pos:end="13:31">(<expr pos:start="13:13" pos:end="13:30"><name pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:15">cpu</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:26">socket_id</name></name> <operator pos:start="13:28" pos:end="13:28">&lt;</operator> <literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr>)</condition> <block pos:start="13:33" pos:end="15:9">{<block_content pos:start="14:13" pos:end="14:57">
            <expr_stmt pos:start="14:13" pos:end="14:57"><expr pos:start="14:13" pos:end="14:56"><call pos:start="14:13" pos:end="14:56"><name pos:start="14:13" pos:end="14:22">error_setg</name><argument_list pos:start="14:23" pos:end="14:56">(<argument pos:start="14:24" pos:end="14:27"><expr pos:start="14:24" pos:end="14:27"><name pos:start="14:24" pos:end="14:27">errp</name></expr></argument>, <argument pos:start="14:30" pos:end="14:55"><expr pos:start="14:30" pos:end="14:55"><literal type="string" pos:start="14:30" pos:end="14:55">"CPU socket-id is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="15:11" pos:end="64:43">else if <condition pos:start="15:19" pos:end="15:47">(<expr pos:start="15:20" pos:end="15:46"><name pos:start="15:20" pos:end="15:33"><name pos:start="15:20" pos:end="15:22">cpu</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:33">socket_id</name></name> <operator pos:start="15:35" pos:end="15:35">&gt;</operator> <name pos:start="15:37" pos:end="15:46">max_socket</name></expr>)</condition> <block pos:start="15:49" pos:end="64:43">{<block_content pos:start="16:13" pos:end="64:43">
            <expr_stmt pos:start="16:13" pos:end="17:51"><expr pos:start="16:13" pos:end="17:50"><call pos:start="16:13" pos:end="17:50"><name pos:start="16:13" pos:end="16:22">error_setg</name><argument_list pos:start="16:23" pos:end="17:50">(<argument pos:start="16:24" pos:end="16:27"><expr pos:start="16:24" pos:end="16:27"><name pos:start="16:24" pos:end="16:27">errp</name></expr></argument>, <argument pos:start="16:30" pos:end="16:78"><expr pos:start="16:30" pos:end="16:78"><literal type="string" pos:start="16:30" pos:end="16:78">"Invalid CPU socket-id: %u must be in range 0:%u"</literal></expr></argument>,
                       <argument pos:start="17:24" pos:end="17:37"><expr pos:start="17:24" pos:end="17:37"><name pos:start="17:24" pos:end="17:37"><name pos:start="17:24" pos:end="17:26">cpu</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:37">socket_id</name></name></expr></argument>, <argument pos:start="17:40" pos:end="17:49"><expr pos:start="17:40" pos:end="17:49"><name pos:start="17:40" pos:end="17:49">max_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="18:9" pos:end="64:43"><if pos:start="18:9" pos:end="20:9">if <condition pos:start="18:12" pos:end="18:29">(<expr pos:start="18:13" pos:end="18:28"><name pos:start="18:13" pos:end="18:24"><name pos:start="18:13" pos:end="18:15">cpu</name><operator pos:start="18:16" pos:end="18:17">-&gt;</operator><name pos:start="18:18" pos:end="18:24">core_id</name></name> <operator pos:start="18:26" pos:end="18:26">&lt;</operator> <literal type="number" pos:start="18:28" pos:end="18:28">0</literal></expr>)</condition> <block pos:start="18:31" pos:end="20:9">{<block_content pos:start="19:13" pos:end="19:55">
            <expr_stmt pos:start="19:13" pos:end="19:55"><expr pos:start="19:13" pos:end="19:54"><call pos:start="19:13" pos:end="19:54"><name pos:start="19:13" pos:end="19:22">error_setg</name><argument_list pos:start="19:23" pos:end="19:54">(<argument pos:start="19:24" pos:end="19:27"><expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">errp</name></expr></argument>, <argument pos:start="19:30" pos:end="19:53"><expr pos:start="19:30" pos:end="19:53"><literal type="string" pos:start="19:30" pos:end="19:53">"CPU core-id is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="20:11" pos:end="64:43">else if <condition pos:start="20:19" pos:end="20:50">(<expr pos:start="20:20" pos:end="20:49"><name pos:start="20:20" pos:end="20:31"><name pos:start="20:20" pos:end="20:22">cpu</name><operator pos:start="20:23" pos:end="20:24">-&gt;</operator><name pos:start="20:25" pos:end="20:31">core_id</name></name> <operator pos:start="20:33" pos:end="20:33">&gt;</operator> <operator pos:start="20:35" pos:end="20:35">(</operator><name pos:start="20:36" pos:end="20:44">smp_cores</name> <operator pos:start="20:46" pos:end="20:46">-</operator> <literal type="number" pos:start="20:48" pos:end="20:48">1</literal><operator pos:start="20:49" pos:end="20:49">)</operator></expr>)</condition> <block pos:start="20:52" pos:end="64:43">{<block_content pos:start="21:13" pos:end="64:43">
            <expr_stmt pos:start="21:13" pos:end="22:52"><expr pos:start="21:13" pos:end="22:51"><call pos:start="21:13" pos:end="22:51"><name pos:start="21:13" pos:end="21:22">error_setg</name><argument_list pos:start="21:23" pos:end="22:51">(<argument pos:start="21:24" pos:end="21:27"><expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">errp</name></expr></argument>, <argument pos:start="21:30" pos:end="21:76"><expr pos:start="21:30" pos:end="21:76"><literal type="string" pos:start="21:30" pos:end="21:76">"Invalid CPU core-id: %u must be in range 0:%u"</literal></expr></argument>,
                       <argument pos:start="22:24" pos:end="22:35"><expr pos:start="22:24" pos:end="22:35"><name pos:start="22:24" pos:end="22:35"><name pos:start="22:24" pos:end="22:26">cpu</name><operator pos:start="22:27" pos:end="22:28">-&gt;</operator><name pos:start="22:29" pos:end="22:35">core_id</name></name></expr></argument>, <argument pos:start="22:38" pos:end="22:50"><expr pos:start="22:38" pos:end="22:50"><name pos:start="22:38" pos:end="22:46">smp_cores</name> <operator pos:start="22:48" pos:end="22:48">-</operator> <literal type="number" pos:start="22:50" pos:end="22:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="23:9" pos:end="64:43"><if pos:start="23:9" pos:end="25:9">if <condition pos:start="23:12" pos:end="23:31">(<expr pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:15">cpu</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:26">thread_id</name></name> <operator pos:start="23:28" pos:end="23:28">&lt;</operator> <literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>)</condition> <block pos:start="23:33" pos:end="25:9">{<block_content pos:start="24:13" pos:end="24:57">
            <expr_stmt pos:start="24:13" pos:end="24:57"><expr pos:start="24:13" pos:end="24:56"><call pos:start="24:13" pos:end="24:56"><name pos:start="24:13" pos:end="24:22">error_setg</name><argument_list pos:start="24:23" pos:end="24:56">(<argument pos:start="24:24" pos:end="24:27"><expr pos:start="24:24" pos:end="24:27"><name pos:start="24:24" pos:end="24:27">errp</name></expr></argument>, <argument pos:start="24:30" pos:end="24:55"><expr pos:start="24:30" pos:end="24:55"><literal type="string" pos:start="24:30" pos:end="24:55">"CPU thread-id is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="25:11" pos:end="64:43">else if <condition pos:start="25:19" pos:end="25:54">(<expr pos:start="25:20" pos:end="25:53"><name pos:start="25:20" pos:end="25:33"><name pos:start="25:20" pos:end="25:22">cpu</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:33">thread_id</name></name> <operator pos:start="25:35" pos:end="25:35">&gt;</operator> <operator pos:start="25:37" pos:end="25:37">(</operator><name pos:start="25:38" pos:end="25:48">smp_threads</name> <operator pos:start="25:50" pos:end="25:50">-</operator> <literal type="number" pos:start="25:52" pos:end="25:52">1</literal><operator pos:start="25:53" pos:end="25:53">)</operator></expr>)</condition> <block pos:start="25:56" pos:end="64:43">{<block_content pos:start="26:13" pos:end="64:43">
            <expr_stmt pos:start="26:13" pos:end="27:56"><expr pos:start="26:13" pos:end="27:55"><call pos:start="26:13" pos:end="27:55"><name pos:start="26:13" pos:end="26:22">error_setg</name><argument_list pos:start="26:23" pos:end="27:55">(<argument pos:start="26:24" pos:end="26:27"><expr pos:start="26:24" pos:end="26:27"><name pos:start="26:24" pos:end="26:27">errp</name></expr></argument>, <argument pos:start="26:30" pos:end="26:78"><expr pos:start="26:30" pos:end="26:78"><literal type="string" pos:start="26:30" pos:end="26:78">"Invalid CPU thread-id: %u must be in range 0:%u"</literal></expr></argument>,
                       <argument pos:start="27:24" pos:end="27:37"><expr pos:start="27:24" pos:end="27:37"><name pos:start="27:24" pos:end="27:37"><name pos:start="27:24" pos:end="27:26">cpu</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:37">thread_id</name></name></expr></argument>, <argument pos:start="27:40" pos:end="27:54"><expr pos:start="27:40" pos:end="27:54"><name pos:start="27:40" pos:end="27:50">smp_threads</name> <operator pos:start="27:52" pos:end="27:52">-</operator> <literal type="number" pos:start="27:54" pos:end="27:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:37"><expr pos:start="28:9" pos:end="28:36"><name pos:start="28:9" pos:end="28:19"><name pos:start="28:9" pos:end="28:12">topo</name><operator pos:start="28:13" pos:end="28:13">.</operator><name pos:start="28:14" pos:end="28:19">pkg_id</name></name> <operator pos:start="28:21" pos:end="28:21">=</operator> <name pos:start="28:23" pos:end="28:36"><name pos:start="28:23" pos:end="28:25">cpu</name><operator pos:start="28:26" pos:end="28:27">-&gt;</operator><name pos:start="28:28" pos:end="28:36">socket_id</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:36"><expr pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:12">topo</name><operator pos:start="29:13" pos:end="29:13">.</operator><name pos:start="29:14" pos:end="29:20">core_id</name></name> <operator pos:start="29:22" pos:end="29:22">=</operator> <name pos:start="29:24" pos:end="29:35"><name pos:start="29:24" pos:end="29:26">cpu</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:35">core_id</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:37"><expr pos:start="30:9" pos:end="30:36"><name pos:start="30:9" pos:end="30:19"><name pos:start="30:9" pos:end="30:12">topo</name><operator pos:start="30:13" pos:end="30:13">.</operator><name pos:start="30:14" pos:end="30:19">smt_id</name></name> <operator pos:start="30:21" pos:end="30:21">=</operator> <name pos:start="30:23" pos:end="30:36"><name pos:start="30:23" pos:end="30:25">cpu</name><operator pos:start="30:26" pos:end="30:27">-&gt;</operator><name pos:start="30:28" pos:end="30:36">thread_id</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:75"><expr pos:start="31:9" pos:end="31:74"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:11">cpu</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:20">apic_id</name></name> <operator pos:start="31:22" pos:end="31:22">=</operator> <call pos:start="31:24" pos:end="31:74"><name pos:start="31:24" pos:end="31:43">apicid_from_topo_ids</name><argument_list pos:start="31:44" pos:end="31:74">(<argument pos:start="31:45" pos:end="31:53"><expr pos:start="31:45" pos:end="31:53"><name pos:start="31:45" pos:end="31:53">smp_cores</name></expr></argument>, <argument pos:start="31:56" pos:end="31:66"><expr pos:start="31:56" pos:end="31:66"><name pos:start="31:56" pos:end="31:66">smp_threads</name></expr></argument>, <argument pos:start="31:69" pos:end="31:73"><expr pos:start="31:69" pos:end="31:73"><operator pos:start="31:69" pos:end="31:69">&amp;</operator><name pos:start="31:70" pos:end="31:73">topo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:67"><expr pos:start="32:5" pos:end="32:66"><name pos:start="32:5" pos:end="32:12">cpu_slot</name> <operator pos:start="32:14" pos:end="32:14">=</operator> <call pos:start="32:16" pos:end="32:66"><name pos:start="32:16" pos:end="32:31">pc_find_cpu_slot</name><argument_list pos:start="32:32" pos:end="32:66">(<argument pos:start="32:33" pos:end="32:45"><expr pos:start="32:33" pos:end="32:45"><call pos:start="32:33" pos:end="32:45"><name pos:start="32:33" pos:end="32:39">MACHINE</name><argument_list pos:start="32:40" pos:end="32:45">(<argument pos:start="32:41" pos:end="32:44"><expr pos:start="32:41" pos:end="32:44"><name pos:start="32:41" pos:end="32:44">pcms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="32:48" pos:end="32:59"><expr pos:start="32:48" pos:end="32:59"><name pos:start="32:48" pos:end="32:59"><name pos:start="32:48" pos:end="32:50">cpu</name><operator pos:start="32:51" pos:end="32:52">-&gt;</operator><name pos:start="32:53" pos:end="32:59">apic_id</name></name></expr></argument>, <argument pos:start="32:62" pos:end="32:65"><expr pos:start="32:62" pos:end="32:65"><operator pos:start="32:62" pos:end="32:62">&amp;</operator><name pos:start="32:63" pos:end="32:65">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="33:5" pos:end="64:43"><if pos:start="33:5" pos:end="64:43">if <condition pos:start="33:8" pos:end="33:18">(<expr pos:start="33:9" pos:end="33:17"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:17">cpu_slot</name></expr>)</condition> <block pos:start="33:20" pos:end="64:43">{<block_content pos:start="34:9" pos:end="64:43">
        <decl_stmt pos:start="34:9" pos:end="34:41"><decl pos:start="34:9" pos:end="34:40"><type pos:start="34:9" pos:end="34:22"><name pos:start="34:9" pos:end="34:20">MachineState</name> <modifier pos:start="34:22" pos:end="34:22">*</modifier></type><name pos:start="34:23" pos:end="34:24">ms</name> <init pos:start="34:26" pos:end="34:40">= <expr pos:start="34:28" pos:end="34:40"><call pos:start="34:28" pos:end="34:40"><name pos:start="34:28" pos:end="34:34">MACHINE</name><argument_list pos:start="34:35" pos:end="34:40">(<argument pos:start="34:36" pos:end="34:39"><expr pos:start="34:36" pos:end="34:39"><name pos:start="34:36" pos:end="34:39">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:78"><expr pos:start="35:9" pos:end="35:77"><call pos:start="35:9" pos:end="35:77"><name pos:start="35:9" pos:end="35:32">x86_topo_ids_from_apicid</name><argument_list pos:start="35:33" pos:end="35:77">(<argument pos:start="35:34" pos:end="35:45"><expr pos:start="35:34" pos:end="35:45"><name pos:start="35:34" pos:end="35:45"><name pos:start="35:34" pos:end="35:36">cpu</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:45">apic_id</name></name></expr></argument>, <argument pos:start="35:48" pos:end="35:56"><expr pos:start="35:48" pos:end="35:56"><name pos:start="35:48" pos:end="35:56">smp_cores</name></expr></argument>, <argument pos:start="35:59" pos:end="35:69"><expr pos:start="35:59" pos:end="35:69"><name pos:start="35:59" pos:end="35:69">smp_threads</name></expr></argument>, <argument pos:start="35:72" pos:end="35:76"><expr pos:start="35:72" pos:end="35:76"><operator pos:start="35:72" pos:end="35:72">&amp;</operator><name pos:start="35:73" pos:end="35:76">topo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="39:47"><expr pos:start="36:9" pos:end="39:46"><call pos:start="36:9" pos:end="39:46"><name pos:start="36:9" pos:end="36:18">error_setg</name><argument_list pos:start="36:19" pos:end="39:46">(<argument pos:start="36:20" pos:end="36:23"><expr pos:start="36:20" pos:end="36:23"><name pos:start="36:20" pos:end="36:23">errp</name></expr></argument>, <argument pos:start="36:26" pos:end="37:64"><expr pos:start="36:26" pos:end="37:64"><literal type="string" pos:start="36:26" pos:end="36:78">"Invalid CPU [socket: %u, core: %u, thread: %u] with"</literal>
                  <literal type="string" pos:start="37:19" pos:end="37:30">" APIC ID %"</literal> <name pos:start="37:32" pos:end="37:37">PRIu32</name> <literal type="string" pos:start="37:39" pos:end="37:64">", valid index range 0:%d"</literal></expr></argument>,
                   <argument pos:start="38:20" pos:end="38:30"><expr pos:start="38:20" pos:end="38:30"><name pos:start="38:20" pos:end="38:30"><name pos:start="38:20" pos:end="38:23">topo</name><operator pos:start="38:24" pos:end="38:24">.</operator><name pos:start="38:25" pos:end="38:30">pkg_id</name></name></expr></argument>, <argument pos:start="38:33" pos:end="38:44"><expr pos:start="38:33" pos:end="38:44"><name pos:start="38:33" pos:end="38:44"><name pos:start="38:33" pos:end="38:36">topo</name><operator pos:start="38:37" pos:end="38:37">.</operator><name pos:start="38:38" pos:end="38:44">core_id</name></name></expr></argument>, <argument pos:start="38:47" pos:end="38:57"><expr pos:start="38:47" pos:end="38:57"><name pos:start="38:47" pos:end="38:57"><name pos:start="38:47" pos:end="38:50">topo</name><operator pos:start="38:51" pos:end="38:51">.</operator><name pos:start="38:52" pos:end="38:57">smt_id</name></name></expr></argument>, <argument pos:start="38:60" pos:end="38:71"><expr pos:start="38:60" pos:end="38:71"><name pos:start="38:60" pos:end="38:71"><name pos:start="38:60" pos:end="38:62">cpu</name><operator pos:start="38:63" pos:end="38:64">-&gt;</operator><name pos:start="38:65" pos:end="38:71">apic_id</name></name></expr></argument>,
                   <argument pos:start="39:20" pos:end="39:45"><expr pos:start="39:20" pos:end="39:45"><name pos:start="39:20" pos:end="39:41"><name pos:start="39:20" pos:end="39:21">ms</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:36">possible_cpus</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:41">len</name></name> <operator pos:start="39:43" pos:end="39:43">-</operator> <literal type="number" pos:start="39:45" pos:end="39:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="40:5" pos:end="64:43"><if pos:start="40:5" pos:end="64:43">if <condition pos:start="40:8" pos:end="40:22">(<expr pos:start="40:9" pos:end="40:21"><name pos:start="40:9" pos:end="40:21"><name pos:start="40:9" pos:end="40:16">cpu_slot</name><operator pos:start="40:17" pos:end="40:18">-&gt;</operator><name pos:start="40:19" pos:end="40:21">cpu</name></name></expr>)</condition> <block pos:start="40:24" pos:end="64:43">{<block_content pos:start="41:9" pos:end="64:43">
        <expr_stmt pos:start="41:9" pos:end="42:38"><expr pos:start="41:9" pos:end="42:37"><call pos:start="41:9" pos:end="42:37"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="42:37">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:66"><expr pos:start="41:26" pos:end="41:66"><literal type="string" pos:start="41:26" pos:end="41:49">"CPU[%d] with APIC ID %"</literal> <name pos:start="41:51" pos:end="41:56">PRIu32</name> <literal type="string" pos:start="41:58" pos:end="41:66">" exists"</literal></expr></argument>,
                   <argument pos:start="42:20" pos:end="42:22"><expr pos:start="42:20" pos:end="42:22"><name pos:start="42:20" pos:end="42:22">idx</name></expr></argument>, <argument pos:start="42:25" pos:end="42:36"><expr pos:start="42:25" pos:end="42:36"><name pos:start="42:25" pos:end="42:36"><name pos:start="42:25" pos:end="42:27">cpu</name><operator pos:start="42:28" pos:end="42:29">-&gt;</operator><name pos:start="42:30" pos:end="42:36">apic_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="43:5" pos:end="45:7">/* if 'address' properties socket-id/core-id/thread-id are not set, set them
     * so that machine_query_hotpluggable_cpus would show correct values
     */</comment>
    <comment type="block" pos:start="46:5" pos:end="48:79">/* TODO: move socket_id/core_id/thread_id checks into x86_cpu_realizefn()
     * once -smp refactoring is complete and there will be CPU private
     * CPUState::nr_cores and CPUState::nr_threads fields instead of globals */</comment>
    <expr_stmt pos:start="49:5" pos:end="49:74"><expr pos:start="49:5" pos:end="49:73"><call pos:start="49:5" pos:end="49:73"><name pos:start="49:5" pos:end="49:28">x86_topo_ids_from_apicid</name><argument_list pos:start="49:29" pos:end="49:73">(<argument pos:start="49:30" pos:end="49:41"><expr pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:32">cpu</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:41">apic_id</name></name></expr></argument>, <argument pos:start="49:44" pos:end="49:52"><expr pos:start="49:44" pos:end="49:52"><name pos:start="49:44" pos:end="49:52">smp_cores</name></expr></argument>, <argument pos:start="49:55" pos:end="49:65"><expr pos:start="49:55" pos:end="49:65"><name pos:start="49:55" pos:end="49:65">smp_threads</name></expr></argument>, <argument pos:start="49:68" pos:end="49:72"><expr pos:start="49:68" pos:end="49:72"><operator pos:start="49:68" pos:end="49:68">&amp;</operator><name pos:start="49:69" pos:end="49:72">topo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="50:5" pos:end="64:43"><if pos:start="50:5" pos:end="64:43">if <condition pos:start="50:8" pos:end="50:62">(<expr pos:start="50:9" pos:end="50:61"><name pos:start="50:9" pos:end="50:22"><name pos:start="50:9" pos:end="50:11">cpu</name><operator pos:start="50:12" pos:end="50:13">-&gt;</operator><name pos:start="50:14" pos:end="50:22">socket_id</name></name> <operator pos:start="50:24" pos:end="50:25">!=</operator> <operator pos:start="50:27" pos:end="50:27">-</operator><literal type="number" pos:start="50:28" pos:end="50:28">1</literal> <operator pos:start="50:30" pos:end="50:31">&amp;&amp;</operator> <name pos:start="50:33" pos:end="50:46"><name pos:start="50:33" pos:end="50:35">cpu</name><operator pos:start="50:36" pos:end="50:37">-&gt;</operator><name pos:start="50:38" pos:end="50:46">socket_id</name></name> <operator pos:start="50:48" pos:end="50:49">!=</operator> <name pos:start="50:51" pos:end="50:61"><name pos:start="50:51" pos:end="50:54">topo</name><operator pos:start="50:55" pos:end="50:55">.</operator><name pos:start="50:56" pos:end="50:61">pkg_id</name></name></expr>)</condition> <block pos:start="50:64" pos:end="64:43">{<block_content pos:start="51:9" pos:end="64:43">
        <expr_stmt pos:start="51:9" pos:end="52:80"><expr pos:start="51:9" pos:end="52:79"><call pos:start="51:9" pos:end="52:79"><name pos:start="51:9" pos:end="51:18">error_setg</name><argument_list pos:start="51:19" pos:end="52:79">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">errp</name></expr></argument>, <argument pos:start="51:26" pos:end="52:35"><expr pos:start="51:26" pos:end="52:35"><literal type="string" pos:start="51:26" pos:end="51:76">"property socket-id: %u doesn't match set apic-id:"</literal>
            <literal type="string" pos:start="52:13" pos:end="52:35">" 0x%x (socket-id: %u)"</literal></expr></argument>, <argument pos:start="52:38" pos:end="52:51"><expr pos:start="52:38" pos:end="52:51"><name pos:start="52:38" pos:end="52:51"><name pos:start="52:38" pos:end="52:40">cpu</name><operator pos:start="52:41" pos:end="52:42">-&gt;</operator><name pos:start="52:43" pos:end="52:51">socket_id</name></name></expr></argument>, <argument pos:start="52:54" pos:end="52:65"><expr pos:start="52:54" pos:end="52:65"><name pos:start="52:54" pos:end="52:65"><name pos:start="52:54" pos:end="52:56">cpu</name><operator pos:start="52:57" pos:end="52:58">-&gt;</operator><name pos:start="52:59" pos:end="52:65">apic_id</name></name></expr></argument>, <argument pos:start="52:68" pos:end="52:78"><expr pos:start="52:68" pos:end="52:78"><name pos:start="52:68" pos:end="52:78"><name pos:start="52:68" pos:end="52:71">topo</name><operator pos:start="52:72" pos:end="52:72">.</operator><name pos:start="52:73" pos:end="52:78">pkg_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:7">cpu</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:18">socket_id</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:32"><name pos:start="53:22" pos:end="53:25">topo</name><operator pos:start="53:26" pos:end="53:26">.</operator><name pos:start="53:27" pos:end="53:32">pkg_id</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="54:5" pos:end="64:43"><if pos:start="54:5" pos:end="64:43">if <condition pos:start="54:8" pos:end="54:59">(<expr pos:start="54:9" pos:end="54:58"><name pos:start="54:9" pos:end="54:20"><name pos:start="54:9" pos:end="54:11">cpu</name><operator pos:start="54:12" pos:end="54:13">-&gt;</operator><name pos:start="54:14" pos:end="54:20">core_id</name></name> <operator pos:start="54:22" pos:end="54:23">!=</operator> <operator pos:start="54:25" pos:end="54:25">-</operator><literal type="number" pos:start="54:26" pos:end="54:26">1</literal> <operator pos:start="54:28" pos:end="54:29">&amp;&amp;</operator> <name pos:start="54:31" pos:end="54:42"><name pos:start="54:31" pos:end="54:33">cpu</name><operator pos:start="54:34" pos:end="54:35">-&gt;</operator><name pos:start="54:36" pos:end="54:42">core_id</name></name> <operator pos:start="54:44" pos:end="54:45">!=</operator> <name pos:start="54:47" pos:end="54:58"><name pos:start="54:47" pos:end="54:50">topo</name><operator pos:start="54:51" pos:end="54:51">.</operator><name pos:start="54:52" pos:end="54:58">core_id</name></name></expr>)</condition> <block pos:start="54:61" pos:end="64:43">{<block_content pos:start="55:9" pos:end="64:43">
        <expr_stmt pos:start="55:9" pos:end="56:77"><expr pos:start="55:9" pos:end="56:76"><call pos:start="55:9" pos:end="56:76"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="56:76">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="56:33"><expr pos:start="55:26" pos:end="56:33"><literal type="string" pos:start="55:26" pos:end="55:74">"property core-id: %u doesn't match set apic-id:"</literal>
            <literal type="string" pos:start="56:13" pos:end="56:33">" 0x%x (core-id: %u)"</literal></expr></argument>, <argument pos:start="56:36" pos:end="56:47"><expr pos:start="56:36" pos:end="56:47"><name pos:start="56:36" pos:end="56:47"><name pos:start="56:36" pos:end="56:38">cpu</name><operator pos:start="56:39" pos:end="56:40">-&gt;</operator><name pos:start="56:41" pos:end="56:47">core_id</name></name></expr></argument>, <argument pos:start="56:50" pos:end="56:61"><expr pos:start="56:50" pos:end="56:61"><name pos:start="56:50" pos:end="56:61"><name pos:start="56:50" pos:end="56:52">cpu</name><operator pos:start="56:53" pos:end="56:54">-&gt;</operator><name pos:start="56:55" pos:end="56:61">apic_id</name></name></expr></argument>, <argument pos:start="56:64" pos:end="56:75"><expr pos:start="56:64" pos:end="56:75"><name pos:start="56:64" pos:end="56:75"><name pos:start="56:64" pos:end="56:67">topo</name><operator pos:start="56:68" pos:end="56:68">.</operator><name pos:start="56:69" pos:end="56:75">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:7">cpu</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:16">core_id</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:31"><name pos:start="57:20" pos:end="57:23">topo</name><operator pos:start="57:24" pos:end="57:24">.</operator><name pos:start="57:25" pos:end="57:31">core_id</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="58:5" pos:end="64:43"><if pos:start="58:5" pos:end="64:43">if <condition pos:start="58:8" pos:end="58:62">(<expr pos:start="58:9" pos:end="58:61"><name pos:start="58:9" pos:end="58:22"><name pos:start="58:9" pos:end="58:11">cpu</name><operator pos:start="58:12" pos:end="58:13">-&gt;</operator><name pos:start="58:14" pos:end="58:22">thread_id</name></name> <operator pos:start="58:24" pos:end="58:25">!=</operator> <operator pos:start="58:27" pos:end="58:27">-</operator><literal type="number" pos:start="58:28" pos:end="58:28">1</literal> <operator pos:start="58:30" pos:end="58:31">&amp;&amp;</operator> <name pos:start="58:33" pos:end="58:46"><name pos:start="58:33" pos:end="58:35">cpu</name><operator pos:start="58:36" pos:end="58:37">-&gt;</operator><name pos:start="58:38" pos:end="58:46">thread_id</name></name> <operator pos:start="58:48" pos:end="58:49">!=</operator> <name pos:start="58:51" pos:end="58:61"><name pos:start="58:51" pos:end="58:54">topo</name><operator pos:start="58:55" pos:end="58:55">.</operator><name pos:start="58:56" pos:end="58:61">smt_id</name></name></expr>)</condition> <block pos:start="58:64" pos:end="64:43">{<block_content pos:start="59:9" pos:end="64:43">
        <expr_stmt pos:start="59:9" pos:end="60:80"><expr pos:start="59:9" pos:end="60:79"><call pos:start="59:9" pos:end="60:79"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="60:79">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="60:35"><expr pos:start="59:26" pos:end="60:35"><literal type="string" pos:start="59:26" pos:end="59:76">"property thread-id: %u doesn't match set apic-id:"</literal>
            <literal type="string" pos:start="60:13" pos:end="60:35">" 0x%x (thread-id: %u)"</literal></expr></argument>, <argument pos:start="60:38" pos:end="60:51"><expr pos:start="60:38" pos:end="60:51"><name pos:start="60:38" pos:end="60:51"><name pos:start="60:38" pos:end="60:40">cpu</name><operator pos:start="60:41" pos:end="60:42">-&gt;</operator><name pos:start="60:43" pos:end="60:51">thread_id</name></name></expr></argument>, <argument pos:start="60:54" pos:end="60:65"><expr pos:start="60:54" pos:end="60:65"><name pos:start="60:54" pos:end="60:65"><name pos:start="60:54" pos:end="60:56">cpu</name><operator pos:start="60:57" pos:end="60:58">-&gt;</operator><name pos:start="60:59" pos:end="60:65">apic_id</name></name></expr></argument>, <argument pos:start="60:68" pos:end="60:78"><expr pos:start="60:68" pos:end="60:78"><name pos:start="60:68" pos:end="60:78"><name pos:start="60:68" pos:end="60:71">topo</name><operator pos:start="60:72" pos:end="60:72">.</operator><name pos:start="60:73" pos:end="60:78">smt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:7">cpu</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:18">thread_id</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:32"><name pos:start="61:22" pos:end="61:25">topo</name><operator pos:start="61:26" pos:end="61:26">.</operator><name pos:start="61:27" pos:end="61:32">smt_id</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="62:5" pos:end="62:18"><expr pos:start="62:5" pos:end="62:17"><name pos:start="62:5" pos:end="62:6">cs</name> <operator pos:start="62:8" pos:end="62:8">=</operator> <call pos:start="62:10" pos:end="62:17"><name pos:start="62:10" pos:end="62:12">CPU</name><argument_list pos:start="62:13" pos:end="62:17">(<argument pos:start="62:14" pos:end="62:16"><expr pos:start="62:14" pos:end="62:16"><name pos:start="62:14" pos:end="62:16">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:6">cs</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:17">cpu_index</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:23">idx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:43"><expr pos:start="64:5" pos:end="64:42"><call pos:start="64:5" pos:end="64:42"><name pos:start="64:5" pos:end="64:21">numa_cpu_pre_plug</name><argument_list pos:start="64:22" pos:end="64:42">(<argument pos:start="64:23" pos:end="64:30"><expr pos:start="64:23" pos:end="64:30"><name pos:start="64:23" pos:end="64:30">cpu_slot</name></expr></argument>, <argument pos:start="64:33" pos:end="64:35"><expr pos:start="64:33" pos:end="64:35"><name pos:start="64:33" pos:end="64:35">dev</name></expr></argument>, <argument pos:start="64:38" pos:end="64:41"><expr pos:start="64:38" pos:end="64:41"><name pos:start="64:38" pos:end="64:41">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
