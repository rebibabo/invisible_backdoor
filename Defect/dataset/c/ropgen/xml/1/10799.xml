<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10799.c" pos:tabs="8"><function pos:start="1:1" pos:end="377:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:39">ff_snow_horizontal_compose97i_sse2</name><parameter_list pos:start="1:40" pos:end="1:62">(<parameter pos:start="1:41" pos:end="1:50"><decl pos:start="1:41" pos:end="1:50"><type pos:start="1:41" pos:end="1:50"><name pos:start="1:41" pos:end="1:47">DWTELEM</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">b</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">width</name></decl></parameter>)</parameter_list><block pos:start="1:63" pos:end="377:1">{<block_content pos:start="3:5" pos:end="375:5">

    <decl_stmt pos:start="3:5" pos:end="3:31"><decl pos:start="3:5" pos:end="3:30"><type pos:start="3:5" pos:end="3:13"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:13">int</name></type> <name pos:start="3:15" pos:end="3:16">w2</name><init pos:start="3:17" pos:end="3:30">= <expr pos:start="3:19" pos:end="3:30"><operator pos:start="3:19" pos:end="3:19">(</operator><name pos:start="3:20" pos:end="3:24">width</name><operator pos:start="3:25" pos:end="3:25">+</operator><literal type="number" pos:start="3:26" pos:end="3:26">1</literal><operator pos:start="3:27" pos:end="3:27">)</operator><operator pos:start="3:28" pos:end="3:29">&gt;&gt;</operator><literal type="number" pos:start="3:30" pos:end="3:30">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="5:5" pos:end="5:73">// SSE2 code runs faster with pointers aligned on a 32-byte boundary.</comment>

    <expr_stmt pos:start="7:5" pos:end="7:37"><expr pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:11">DWTELEM</name> <name pos:start="7:13" pos:end="7:36"><name pos:start="7:13" pos:end="7:20">temp_buf</name><index pos:start="7:21" pos:end="7:36">[<expr pos:start="7:22" pos:end="7:35"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:27">width</name><operator pos:start="7:28" pos:end="7:29">&gt;&gt;</operator><literal type="number" pos:start="7:30" pos:end="7:30">1</literal><operator pos:start="7:31" pos:end="7:31">)</operator> <operator pos:start="7:33" pos:end="7:33">+</operator> <literal type="number" pos:start="7:35" pos:end="7:35">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:71"><decl pos:start="9:5" pos:end="9:70"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:11">DWTELEM</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier> <specifier pos:start="9:15" pos:end="9:19">const</specifier></type> <name pos:start="9:21" pos:end="9:24">temp</name> <init pos:start="9:26" pos:end="9:70">= <expr pos:start="9:28" pos:end="9:70"><name pos:start="9:28" pos:end="9:35">temp_buf</name> <operator pos:start="9:37" pos:end="9:37">+</operator> <literal type="number" pos:start="9:39" pos:end="9:41">4</literal> <operator pos:start="9:41" pos:end="9:41">-</operator> <operator pos:start="9:43" pos:end="9:43">(</operator><operator pos:start="9:44" pos:end="9:44">(</operator><operator pos:start="9:45" pos:end="9:45">(</operator><name pos:start="9:46" pos:end="9:48">int</name><operator pos:start="9:49" pos:end="9:49">)</operator><name pos:start="9:50" pos:end="9:57">temp_buf</name> <operator pos:start="9:59" pos:end="9:59">&amp;</operator> <literal type="number" pos:start="9:61" pos:end="9:63">0xF</literal><operator pos:start="9:64" pos:end="9:64">)</operator> <operator pos:start="9:66" pos:end="9:67">&gt;&gt;</operator> <literal type="number" pos:start="9:69" pos:end="9:69">2</literal><operator pos:start="9:70" pos:end="9:70">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:17">w_l</name><init pos:start="11:18" pos:end="11:29">= <expr pos:start="11:20" pos:end="11:29"><operator pos:start="11:20" pos:end="11:20">(</operator><name pos:start="11:21" pos:end="11:25">width</name><operator pos:start="11:26" pos:end="11:27">&gt;&gt;</operator><literal type="number" pos:start="11:28" pos:end="11:28">1</literal><operator pos:start="11:29" pos:end="11:29">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:17">w_r</name><init pos:start="13:18" pos:end="13:25">= <expr pos:start="13:20" pos:end="13:25"><name pos:start="13:20" pos:end="13:21">w2</name> <operator pos:start="13:23" pos:end="13:23">-</operator> <literal type="number" pos:start="13:25" pos:end="13:25">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <block pos:start="19:5" pos:end="105:5">{<block_content pos:start="21:9" pos:end="103:54"> <comment type="line" pos:start="19:7" pos:end="19:15">// Lift 0</comment>

        <decl_stmt pos:start="21:9" pos:end="21:41"><decl pos:start="21:9" pos:end="21:40"><type pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:15">DWTELEM</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier> <specifier pos:start="21:19" pos:end="21:23">const</specifier></type> <name pos:start="21:25" pos:end="21:27">ref</name> <init pos:start="21:29" pos:end="21:40">= <expr pos:start="21:31" pos:end="21:40"><name pos:start="21:31" pos:end="21:31">b</name> <operator pos:start="21:33" pos:end="21:33">+</operator> <name pos:start="21:35" pos:end="21:36">w2</name> <operator pos:start="21:38" pos:end="21:38">-</operator> <literal type="number" pos:start="21:40" pos:end="21:40">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:27"><decl pos:start="23:9" pos:end="23:26"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">DWTELEM</name></type> <name pos:start="23:17" pos:end="23:19">b_0</name> <init pos:start="23:21" pos:end="23:26">= <expr pos:start="23:23" pos:end="23:26"><name pos:start="23:23" pos:end="23:26"><name pos:start="23:23" pos:end="23:23">b</name><index pos:start="23:24" pos:end="23:26">[<expr pos:start="23:25" pos:end="23:25"><literal type="number" pos:start="23:25" pos:end="23:25">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="23:29" pos:end="23:88">//By allowing the first entry in b[0] to be calculated twice</comment>

        <comment type="line" pos:start="25:9" pos:end="25:85">// (the first time erroneously), we allow the SSE2 code to run an extra pass.</comment>

        <comment type="line" pos:start="27:9" pos:end="27:85">// The savings in code and time are well worth having to store this value and</comment>

        <comment type="line" pos:start="29:9" pos:end="29:47">// calculate b[0] correctly afterwards.</comment>



        <expr_stmt pos:start="33:9" pos:end="33:14"><expr pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:9">i</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <literal type="number" pos:start="33:13" pos:end="33:13">0</literal></expr>;</expr_stmt>

        <asm pos:start="35:9" pos:end="43:12">asm <specifier pos:start="35:13" pos:end="35:20">volatile</specifier>(

            "pcmpeqd   %%xmm7, %%xmm7         \n\t"

            "pslld        $31, %%xmm7         \n\t"

            "psrld        $29, %%xmm7         \n\t"

        ::);</asm>

        <for pos:start="45:9" pos:end="99:9">for<control pos:start="45:12" pos:end="45:28">(<init pos:start="45:13" pos:end="45:13">;</init> <condition pos:start="45:15" pos:end="45:22"><expr pos:start="45:15" pos:end="45:21"><name pos:start="45:15" pos:end="45:15">i</name><operator pos:start="45:16" pos:end="45:16">&lt;</operator><name pos:start="45:17" pos:end="45:19">w_l</name><operator pos:start="45:20" pos:end="45:20">-</operator><literal type="number" pos:start="45:21" pos:end="45:21">7</literal></expr>;</condition> <incr pos:start="45:24" pos:end="45:27"><expr pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:24">i</name><operator pos:start="45:25" pos:end="45:26">+=</operator><literal type="number" pos:start="45:27" pos:end="45:27">8</literal></expr></incr>)</control><block pos:start="45:29" pos:end="99:9">{<block_content pos:start="47:13" pos:end="97:14">

            <asm pos:start="47:13" pos:end="97:14">asm <specifier pos:start="47:17" pos:end="47:24">volatile</specifier>(

                "movdqu   (%1), %%xmm1        \n\t"

                "movdqu 16(%1), %%xmm5        \n\t"

                "movdqu  4(%1), %%xmm2        \n\t"

                "movdqu 20(%1), %%xmm6        \n\t"

                "paddd  %%xmm1, %%xmm2        \n\t"

                "paddd  %%xmm5, %%xmm6        \n\t"

                "movdqa %%xmm2, %%xmm0        \n\t"

                "movdqa %%xmm6, %%xmm4        \n\t"

                "paddd  %%xmm2, %%xmm2        \n\t"

                "paddd  %%xmm6, %%xmm6        \n\t"

                "paddd  %%xmm0, %%xmm2        \n\t"

                "paddd  %%xmm4, %%xmm6        \n\t"

                "paddd  %%xmm7, %%xmm2        \n\t"

                "paddd  %%xmm7, %%xmm6        \n\t"

                "psrad      $3, %%xmm2        \n\t"

                "psrad      $3, %%xmm6        \n\t"

                "movdqa   (%0), %%xmm0        \n\t"

                "movdqa 16(%0), %%xmm4        \n\t"

                "psubd  %%xmm2, %%xmm0        \n\t"

                "psubd  %%xmm6, %%xmm4        \n\t"

                "movdqa %%xmm0, (%0)          \n\t"

                "movdqa %%xmm4, 16(%0)        \n\t"

                :: "r"(&amp;b[i]), "r"(&amp;ref[i])

                : "memory"

            );</asm>

        </block_content>}</block></for>

        <expr_stmt pos:start="101:9" pos:end="101:93"><expr pos:start="101:9" pos:end="101:92"><call pos:start="101:9" pos:end="101:92"><name pos:start="101:9" pos:end="101:45">snow_horizontal_compose_lift_lead_out</name><argument_list pos:start="101:46" pos:end="101:92">(<argument pos:start="101:47" pos:end="101:47"><expr pos:start="101:47" pos:end="101:47"><name pos:start="101:47" pos:end="101:47">i</name></expr></argument>, <argument pos:start="101:50" pos:end="101:50"><expr pos:start="101:50" pos:end="101:50"><name pos:start="101:50" pos:end="101:50">b</name></expr></argument>, <argument pos:start="101:53" pos:end="101:53"><expr pos:start="101:53" pos:end="101:53"><name pos:start="101:53" pos:end="101:53">b</name></expr></argument>, <argument pos:start="101:56" pos:end="101:58"><expr pos:start="101:56" pos:end="101:58"><name pos:start="101:56" pos:end="101:58">ref</name></expr></argument>, <argument pos:start="101:61" pos:end="101:65"><expr pos:start="101:61" pos:end="101:65"><name pos:start="101:61" pos:end="101:65">width</name></expr></argument>, <argument pos:start="101:68" pos:end="101:70"><expr pos:start="101:68" pos:end="101:70"><name pos:start="101:68" pos:end="101:70">w_l</name></expr></argument>, <argument pos:start="101:73" pos:end="101:73"><expr pos:start="101:73" pos:end="101:73"><literal type="number" pos:start="101:73" pos:end="101:73">0</literal></expr></argument>, <argument pos:start="101:76" pos:end="101:79"><expr pos:start="101:76" pos:end="101:79"><name pos:start="101:76" pos:end="101:79">W_DM</name></expr></argument>, <argument pos:start="101:82" pos:end="101:85"><expr pos:start="101:82" pos:end="101:85"><name pos:start="101:82" pos:end="101:85">W_DO</name></expr></argument>, <argument pos:start="101:88" pos:end="101:91"><expr pos:start="101:88" pos:end="101:91"><name pos:start="101:88" pos:end="101:91">W_DS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:54"><expr pos:start="103:9" pos:end="103:53"><name pos:start="103:9" pos:end="103:12"><name pos:start="103:9" pos:end="103:9">b</name><index pos:start="103:10" pos:end="103:12">[<expr pos:start="103:11" pos:end="103:11"><literal type="number" pos:start="103:11" pos:end="103:11">0</literal></expr>]</index></name> <operator pos:start="103:14" pos:end="103:14">=</operator> <name pos:start="103:16" pos:end="103:18">b_0</name> <operator pos:start="103:20" pos:end="103:20">-</operator> <operator pos:start="103:22" pos:end="103:22">(</operator><operator pos:start="103:23" pos:end="103:23">(</operator><name pos:start="103:24" pos:end="103:27">W_DM</name> <operator pos:start="103:29" pos:end="103:29">*</operator> <literal type="number" pos:start="103:31" pos:end="103:31">2</literal> <operator pos:start="103:33" pos:end="103:33">*</operator> <name pos:start="103:35" pos:end="103:40"><name pos:start="103:35" pos:end="103:37">ref</name><index pos:start="103:38" pos:end="103:40">[<expr pos:start="103:39" pos:end="103:39"><literal type="number" pos:start="103:39" pos:end="103:39">1</literal></expr>]</index></name><operator pos:start="103:41" pos:end="103:41">+</operator><name pos:start="103:42" pos:end="103:45">W_DO</name><operator pos:start="103:46" pos:end="103:46">)</operator><operator pos:start="103:47" pos:end="103:48">&gt;&gt;</operator><name pos:start="103:49" pos:end="103:52">W_DS</name><operator pos:start="103:53" pos:end="103:53">)</operator></expr>;</expr_stmt>

    </block_content>}</block>



    <block pos:start="109:5" pos:end="161:5">{<block_content pos:start="111:9" pos:end="159:95"> <comment type="line" pos:start="109:7" pos:end="109:15">// Lift 1</comment>

        <decl_stmt pos:start="111:9" pos:end="111:35"><decl pos:start="111:9" pos:end="111:34"><type pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:15">DWTELEM</name> <modifier pos:start="111:17" pos:end="111:17">*</modifier> <specifier pos:start="111:19" pos:end="111:23">const</specifier></type> <name pos:start="111:25" pos:end="111:27">dst</name> <init pos:start="111:29" pos:end="111:34">= <expr pos:start="111:31" pos:end="111:34"><name pos:start="111:31" pos:end="111:31">b</name><operator pos:start="111:32" pos:end="111:32">+</operator><name pos:start="111:33" pos:end="111:34">w2</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:14"><expr pos:start="115:9" pos:end="115:13"><name pos:start="115:9" pos:end="115:9">i</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <literal type="number" pos:start="115:13" pos:end="115:13">0</literal></expr>;</expr_stmt>

        <for pos:start="117:9" pos:end="121:9">for<control pos:start="117:12" pos:end="117:52">(<init pos:start="117:13" pos:end="117:13">;</init> <condition pos:start="117:15" pos:end="117:47"><expr pos:start="117:15" pos:end="117:46"><operator pos:start="117:15" pos:end="117:15">(</operator><operator pos:start="117:16" pos:end="117:16">(</operator><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:21">long</name><operator pos:start="117:22" pos:end="117:22">)</operator><operator pos:start="117:23" pos:end="117:23">&amp;</operator><name pos:start="117:24" pos:end="117:29"><name pos:start="117:24" pos:end="117:26">dst</name><index pos:start="117:27" pos:end="117:29">[<expr pos:start="117:28" pos:end="117:28"><name pos:start="117:28" pos:end="117:28">i</name></expr>]</index></name><operator pos:start="117:30" pos:end="117:30">)</operator> <operator pos:start="117:32" pos:end="117:32">&amp;</operator> <literal type="number" pos:start="117:34" pos:end="117:36">0xF</literal><operator pos:start="117:37" pos:end="117:37">)</operator> <operator pos:start="117:39" pos:end="117:40">&amp;&amp;</operator> <name pos:start="117:42" pos:end="117:42">i</name><operator pos:start="117:43" pos:end="117:43">&lt;</operator><name pos:start="117:44" pos:end="117:46">w_r</name></expr>;</condition> <incr pos:start="117:49" pos:end="117:51"><expr pos:start="117:49" pos:end="117:51"><name pos:start="117:49" pos:end="117:49">i</name><operator pos:start="117:50" pos:end="117:51">++</operator></expr></incr>)</control><block pos:start="117:53" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:48">

            <expr_stmt pos:start="119:13" pos:end="119:48"><expr pos:start="119:13" pos:end="119:47"><name pos:start="119:13" pos:end="119:18"><name pos:start="119:13" pos:end="119:15">dst</name><index pos:start="119:16" pos:end="119:18">[<expr pos:start="119:17" pos:end="119:17"><name pos:start="119:17" pos:end="119:17">i</name></expr>]</index></name> <operator pos:start="119:20" pos:end="119:20">=</operator> <name pos:start="119:22" pos:end="119:27"><name pos:start="119:22" pos:end="119:24">dst</name><index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><name pos:start="119:26" pos:end="119:26">i</name></expr>]</index></name> <operator pos:start="119:29" pos:end="119:29">-</operator> <operator pos:start="119:31" pos:end="119:31">(</operator><name pos:start="119:32" pos:end="119:35"><name pos:start="119:32" pos:end="119:32">b</name><index pos:start="119:33" pos:end="119:35">[<expr pos:start="119:34" pos:end="119:34"><name pos:start="119:34" pos:end="119:34">i</name></expr>]</index></name> <operator pos:start="119:37" pos:end="119:37">+</operator> <name pos:start="119:39" pos:end="119:46"><name pos:start="119:39" pos:end="119:39">b</name><index pos:start="119:40" pos:end="119:46">[<expr pos:start="119:41" pos:end="119:45"><name pos:start="119:41" pos:end="119:41">i</name> <operator pos:start="119:43" pos:end="119:43">+</operator> <literal type="number" pos:start="119:45" pos:end="119:45">1</literal></expr>]</index></name><operator pos:start="119:47" pos:end="119:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="123:9" pos:end="157:9">for<control pos:start="123:12" pos:end="123:28">(<init pos:start="123:13" pos:end="123:13">;</init> <condition pos:start="123:15" pos:end="123:22"><expr pos:start="123:15" pos:end="123:21"><name pos:start="123:15" pos:end="123:15">i</name><operator pos:start="123:16" pos:end="123:16">&lt;</operator><name pos:start="123:17" pos:end="123:19">w_r</name><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">7</literal></expr>;</condition> <incr pos:start="123:24" pos:end="123:27"><expr pos:start="123:24" pos:end="123:27"><name pos:start="123:24" pos:end="123:24">i</name><operator pos:start="123:25" pos:end="123:26">+=</operator><literal type="number" pos:start="123:27" pos:end="123:27">8</literal></expr></incr>)</control><block pos:start="123:29" pos:end="157:9">{<block_content pos:start="125:13" pos:end="155:14">

            <asm pos:start="125:13" pos:end="155:14">asm <specifier pos:start="125:17" pos:end="125:24">volatile</specifier>(

                "movdqu   (%1), %%xmm1        \n\t"

                "movdqu 16(%1), %%xmm5        \n\t"

                "movdqu  4(%1), %%xmm2        \n\t"

                "movdqu 20(%1), %%xmm6        \n\t"

                "paddd  %%xmm1, %%xmm2        \n\t"

                "paddd  %%xmm5, %%xmm6        \n\t"

                "movdqa   (%0), %%xmm0        \n\t"

                "movdqa 16(%0), %%xmm4        \n\t"

                "psubd  %%xmm2, %%xmm0        \n\t"

                "psubd  %%xmm6, %%xmm4        \n\t"

                "movdqa %%xmm0, (%0)          \n\t"

                "movdqa %%xmm4, 16(%0)        \n\t"

                :: "r"(&amp;dst[i]), "r"(&amp;b[i])

                : "memory"

            );</asm>

        </block_content>}</block></for>

        <expr_stmt pos:start="159:9" pos:end="159:95"><expr pos:start="159:9" pos:end="159:94"><call pos:start="159:9" pos:end="159:94"><name pos:start="159:9" pos:end="159:45">snow_horizontal_compose_lift_lead_out</name><argument_list pos:start="159:46" pos:end="159:94">(<argument pos:start="159:47" pos:end="159:47"><expr pos:start="159:47" pos:end="159:47"><name pos:start="159:47" pos:end="159:47">i</name></expr></argument>, <argument pos:start="159:50" pos:end="159:52"><expr pos:start="159:50" pos:end="159:52"><name pos:start="159:50" pos:end="159:52">dst</name></expr></argument>, <argument pos:start="159:55" pos:end="159:57"><expr pos:start="159:55" pos:end="159:57"><name pos:start="159:55" pos:end="159:57">dst</name></expr></argument>, <argument pos:start="159:60" pos:end="159:60"><expr pos:start="159:60" pos:end="159:60"><name pos:start="159:60" pos:end="159:60">b</name></expr></argument>, <argument pos:start="159:63" pos:end="159:67"><expr pos:start="159:63" pos:end="159:67"><name pos:start="159:63" pos:end="159:67">width</name></expr></argument>, <argument pos:start="159:70" pos:end="159:72"><expr pos:start="159:70" pos:end="159:72"><name pos:start="159:70" pos:end="159:72">w_r</name></expr></argument>, <argument pos:start="159:75" pos:end="159:75"><expr pos:start="159:75" pos:end="159:75"><literal type="number" pos:start="159:75" pos:end="159:75">1</literal></expr></argument>, <argument pos:start="159:78" pos:end="159:81"><expr pos:start="159:78" pos:end="159:81"><name pos:start="159:78" pos:end="159:81">W_CM</name></expr></argument>, <argument pos:start="159:84" pos:end="159:87"><expr pos:start="159:84" pos:end="159:87"><name pos:start="159:84" pos:end="159:87">W_CO</name></expr></argument>, <argument pos:start="159:90" pos:end="159:93"><expr pos:start="159:90" pos:end="159:93"><name pos:start="159:90" pos:end="159:93">W_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <block pos:start="165:5" pos:end="237:5">{<block_content pos:start="167:9" pos:end="235:63"> <comment type="line" pos:start="165:7" pos:end="165:15">// Lift 2</comment>

        <decl_stmt pos:start="167:9" pos:end="167:39"><decl pos:start="167:9" pos:end="167:38"><type pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:15">DWTELEM</name> <modifier pos:start="167:17" pos:end="167:17">*</modifier> <specifier pos:start="167:19" pos:end="167:23">const</specifier></type> <name pos:start="167:25" pos:end="167:27">ref</name> <init pos:start="167:29" pos:end="167:38">= <expr pos:start="167:31" pos:end="167:38"><name pos:start="167:31" pos:end="167:31">b</name><operator pos:start="167:32" pos:end="167:32">+</operator><name pos:start="167:33" pos:end="167:34">w2</name> <operator pos:start="167:36" pos:end="167:36">-</operator> <literal type="number" pos:start="167:38" pos:end="167:38">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="169:9" pos:end="169:27"><decl pos:start="169:9" pos:end="169:26"><type pos:start="169:9" pos:end="169:15"><name pos:start="169:9" pos:end="169:15">DWTELEM</name></type> <name pos:start="169:17" pos:end="169:19">b_0</name> <init pos:start="169:21" pos:end="169:26">= <expr pos:start="169:23" pos:end="169:26"><name pos:start="169:23" pos:end="169:26"><name pos:start="169:23" pos:end="169:23">b</name><index pos:start="169:24" pos:end="169:26">[<expr pos:start="169:25" pos:end="169:25"><literal type="number" pos:start="169:25" pos:end="169:25">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:14"><expr pos:start="173:9" pos:end="173:13"><name pos:start="173:9" pos:end="173:9">i</name> <operator pos:start="173:11" pos:end="173:11">=</operator> <literal type="number" pos:start="173:13" pos:end="173:13">0</literal></expr>;</expr_stmt>

        <asm pos:start="175:9" pos:end="179:12">asm <specifier pos:start="175:13" pos:end="175:20">volatile</specifier>(

            "pslld          $1, %%xmm7        \n\t"

        ::);</asm>

        <for pos:start="181:9" pos:end="231:9">for<control pos:start="181:12" pos:end="181:28">(<init pos:start="181:13" pos:end="181:13">;</init> <condition pos:start="181:15" pos:end="181:22"><expr pos:start="181:15" pos:end="181:21"><name pos:start="181:15" pos:end="181:15">i</name><operator pos:start="181:16" pos:end="181:16">&lt;</operator><name pos:start="181:17" pos:end="181:19">w_l</name><operator pos:start="181:20" pos:end="181:20">-</operator><literal type="number" pos:start="181:21" pos:end="181:21">7</literal></expr>;</condition> <incr pos:start="181:24" pos:end="181:27"><expr pos:start="181:24" pos:end="181:27"><name pos:start="181:24" pos:end="181:24">i</name><operator pos:start="181:25" pos:end="181:26">+=</operator><literal type="number" pos:start="181:27" pos:end="181:27">8</literal></expr></incr>)</control><block pos:start="181:29" pos:end="231:9">{<block_content pos:start="183:13" pos:end="229:14">

            <asm pos:start="183:13" pos:end="229:14">asm <specifier pos:start="183:17" pos:end="183:24">volatile</specifier>(

                "movdqu   (%1), %%xmm1        \n\t"

                "movdqu 16(%1), %%xmm5        \n\t"

                "movdqu  4(%1), %%xmm0        \n\t"

                "movdqu 20(%1), %%xmm4        \n\t" <comment type="line" pos:start="191:53" pos:end="191:88">//FIXME try aligned reads and shifts</comment>

                "paddd  %%xmm1, %%xmm0        \n\t"

                "paddd  %%xmm5, %%xmm4        \n\t"

                "paddd  %%xmm7, %%xmm0        \n\t"

                "paddd  %%xmm7, %%xmm4        \n\t"

                "movdqa   (%0), %%xmm1        \n\t"

                "movdqa 16(%0), %%xmm5        \n\t"

                "psrad      $2, %%xmm0        \n\t"

                "psrad      $2, %%xmm4        \n\t"

                "paddd  %%xmm1, %%xmm0        \n\t"

                "paddd  %%xmm5, %%xmm4        \n\t"

                "psrad      $2, %%xmm0        \n\t"

                "psrad      $2, %%xmm4        \n\t"

                "paddd  %%xmm1, %%xmm0        \n\t"

                "paddd  %%xmm5, %%xmm4        \n\t"

                "movdqa %%xmm0, (%0)          \n\t"

                "movdqa %%xmm4, 16(%0)        \n\t"

                :: "r"(&amp;b[i]), "r"(&amp;ref[i])

                : "memory"

            );</asm>

        </block_content>}</block></for>

        <expr_stmt pos:start="233:9" pos:end="233:73"><expr pos:start="233:9" pos:end="233:72"><call pos:start="233:9" pos:end="233:72"><name pos:start="233:9" pos:end="233:46">snow_horizontal_compose_liftS_lead_out</name><argument_list pos:start="233:47" pos:end="233:72">(<argument pos:start="233:48" pos:end="233:48"><expr pos:start="233:48" pos:end="233:48"><name pos:start="233:48" pos:end="233:48">i</name></expr></argument>, <argument pos:start="233:51" pos:end="233:51"><expr pos:start="233:51" pos:end="233:51"><name pos:start="233:51" pos:end="233:51">b</name></expr></argument>, <argument pos:start="233:54" pos:end="233:54"><expr pos:start="233:54" pos:end="233:54"><name pos:start="233:54" pos:end="233:54">b</name></expr></argument>, <argument pos:start="233:57" pos:end="233:59"><expr pos:start="233:57" pos:end="233:59"><name pos:start="233:57" pos:end="233:59">ref</name></expr></argument>, <argument pos:start="233:62" pos:end="233:66"><expr pos:start="233:62" pos:end="233:66"><name pos:start="233:62" pos:end="233:66">width</name></expr></argument>, <argument pos:start="233:69" pos:end="233:71"><expr pos:start="233:69" pos:end="233:71"><name pos:start="233:69" pos:end="233:71">w_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:63"><expr pos:start="235:9" pos:end="235:62"><name pos:start="235:9" pos:end="235:12"><name pos:start="235:9" pos:end="235:9">b</name><index pos:start="235:10" pos:end="235:12">[<expr pos:start="235:11" pos:end="235:11"><literal type="number" pos:start="235:11" pos:end="235:11">0</literal></expr>]</index></name> <operator pos:start="235:14" pos:end="235:14">=</operator> <name pos:start="235:16" pos:end="235:18">b_0</name> <operator pos:start="235:20" pos:end="235:20">+</operator> <operator pos:start="235:22" pos:end="235:22">(</operator><operator pos:start="235:23" pos:end="235:23">(</operator><literal type="number" pos:start="235:24" pos:end="235:24">2</literal> <operator pos:start="235:26" pos:end="235:26">*</operator> <name pos:start="235:28" pos:end="235:33"><name pos:start="235:28" pos:end="235:30">ref</name><index pos:start="235:31" pos:end="235:33">[<expr pos:start="235:32" pos:end="235:32"><literal type="number" pos:start="235:32" pos:end="235:32">1</literal></expr>]</index></name> <operator pos:start="235:35" pos:end="235:35">+</operator> <name pos:start="235:37" pos:end="235:40">W_BO</name><operator pos:start="235:41" pos:end="235:41">-</operator><literal type="number" pos:start="235:42" pos:end="235:44">1</literal> <operator pos:start="235:44" pos:end="235:44">+</operator> <literal type="number" pos:start="235:46" pos:end="235:46">4</literal> <operator pos:start="235:48" pos:end="235:48">*</operator> <name pos:start="235:50" pos:end="235:52">b_0</name><operator pos:start="235:53" pos:end="235:53">)</operator> <operator pos:start="235:55" pos:end="235:56">&gt;&gt;</operator> <name pos:start="235:58" pos:end="235:61">W_BS</name><operator pos:start="235:62" pos:end="235:62">)</operator></expr>;</expr_stmt>

    </block_content>}</block>



    <block pos:start="241:5" pos:end="297:5">{<block_content pos:start="243:9" pos:end="295:99"> <comment type="line" pos:start="241:7" pos:end="241:15">// Lift 3</comment>

        <decl_stmt pos:start="243:9" pos:end="243:35"><decl pos:start="243:9" pos:end="243:34"><type pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:15">DWTELEM</name> <modifier pos:start="243:17" pos:end="243:17">*</modifier> <specifier pos:start="243:19" pos:end="243:23">const</specifier></type> <name pos:start="243:25" pos:end="243:27">src</name> <init pos:start="243:29" pos:end="243:34">= <expr pos:start="243:31" pos:end="243:34"><name pos:start="243:31" pos:end="243:31">b</name><operator pos:start="243:32" pos:end="243:32">+</operator><name pos:start="243:33" pos:end="243:34">w2</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="247:9" pos:end="247:14"><expr pos:start="247:9" pos:end="247:13"><name pos:start="247:9" pos:end="247:9">i</name> <operator pos:start="247:11" pos:end="247:11">=</operator> <literal type="number" pos:start="247:13" pos:end="247:13">0</literal></expr>;</expr_stmt>

        <for pos:start="249:9" pos:end="253:9">for<control pos:start="249:12" pos:end="249:53">(<init pos:start="249:13" pos:end="249:13">;</init> <condition pos:start="249:15" pos:end="249:48"><expr pos:start="249:15" pos:end="249:47"><operator pos:start="249:15" pos:end="249:15">(</operator><operator pos:start="249:16" pos:end="249:16">(</operator><operator pos:start="249:17" pos:end="249:17">(</operator><name pos:start="249:18" pos:end="249:21">long</name><operator pos:start="249:22" pos:end="249:22">)</operator><operator pos:start="249:23" pos:end="249:23">&amp;</operator><name pos:start="249:24" pos:end="249:30"><name pos:start="249:24" pos:end="249:27">temp</name><index pos:start="249:28" pos:end="249:30">[<expr pos:start="249:29" pos:end="249:29"><name pos:start="249:29" pos:end="249:29">i</name></expr>]</index></name><operator pos:start="249:31" pos:end="249:31">)</operator> <operator pos:start="249:33" pos:end="249:33">&amp;</operator> <literal type="number" pos:start="249:35" pos:end="249:37">0xF</literal><operator pos:start="249:38" pos:end="249:38">)</operator> <operator pos:start="249:40" pos:end="249:41">&amp;&amp;</operator> <name pos:start="249:43" pos:end="249:43">i</name><operator pos:start="249:44" pos:end="249:44">&lt;</operator><name pos:start="249:45" pos:end="249:47">w_r</name></expr>;</condition> <incr pos:start="249:50" pos:end="249:52"><expr pos:start="249:50" pos:end="249:52"><name pos:start="249:50" pos:end="249:50">i</name><operator pos:start="249:51" pos:end="249:52">++</operator></expr></incr>)</control><block pos:start="249:54" pos:end="253:9">{<block_content pos:start="251:13" pos:end="251:63">

            <expr_stmt pos:start="251:13" pos:end="251:63"><expr pos:start="251:13" pos:end="251:62"><name pos:start="251:13" pos:end="251:19"><name pos:start="251:13" pos:end="251:16">temp</name><index pos:start="251:17" pos:end="251:19">[<expr pos:start="251:18" pos:end="251:18"><name pos:start="251:18" pos:end="251:18">i</name></expr>]</index></name> <operator pos:start="251:21" pos:end="251:21">=</operator> <name pos:start="251:23" pos:end="251:28"><name pos:start="251:23" pos:end="251:25">src</name><index pos:start="251:26" pos:end="251:28">[<expr pos:start="251:27" pos:end="251:27"><name pos:start="251:27" pos:end="251:27">i</name></expr>]</index></name> <operator pos:start="251:30" pos:end="251:30">-</operator> <operator pos:start="251:32" pos:end="251:32">(</operator><operator pos:start="251:33" pos:end="251:33">(</operator><operator pos:start="251:34" pos:end="251:34">-</operator><name pos:start="251:35" pos:end="251:38">W_AM</name><operator pos:start="251:39" pos:end="251:39">*</operator><operator pos:start="251:40" pos:end="251:40">(</operator><name pos:start="251:41" pos:end="251:44"><name pos:start="251:41" pos:end="251:41">b</name><index pos:start="251:42" pos:end="251:44">[<expr pos:start="251:43" pos:end="251:43"><name pos:start="251:43" pos:end="251:43">i</name></expr>]</index></name> <operator pos:start="251:46" pos:end="251:46">+</operator> <name pos:start="251:48" pos:end="251:53"><name pos:start="251:48" pos:end="251:48">b</name><index pos:start="251:49" pos:end="251:53">[<expr pos:start="251:50" pos:end="251:52"><name pos:start="251:50" pos:end="251:50">i</name><operator pos:start="251:51" pos:end="251:51">+</operator><literal type="number" pos:start="251:52" pos:end="251:52">1</literal></expr>]</index></name><operator pos:start="251:54" pos:end="251:54">)</operator><operator pos:start="251:55" pos:end="251:55">)</operator><operator pos:start="251:56" pos:end="251:57">&gt;&gt;</operator><name pos:start="251:58" pos:end="251:61">W_AS</name><operator pos:start="251:62" pos:end="251:62">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="255:9" pos:end="293:9">for<control pos:start="255:12" pos:end="255:28">(<init pos:start="255:13" pos:end="255:13">;</init> <condition pos:start="255:15" pos:end="255:22"><expr pos:start="255:15" pos:end="255:21"><name pos:start="255:15" pos:end="255:15">i</name><operator pos:start="255:16" pos:end="255:16">&lt;</operator><name pos:start="255:17" pos:end="255:19">w_r</name><operator pos:start="255:20" pos:end="255:20">-</operator><literal type="number" pos:start="255:21" pos:end="255:21">7</literal></expr>;</condition> <incr pos:start="255:24" pos:end="255:27"><expr pos:start="255:24" pos:end="255:27"><name pos:start="255:24" pos:end="255:24">i</name><operator pos:start="255:25" pos:end="255:26">+=</operator><literal type="number" pos:start="255:27" pos:end="255:27">8</literal></expr></incr>)</control><block pos:start="255:29" pos:end="293:9">{<block_content pos:start="257:13" pos:end="291:17">

            <asm pos:start="257:13" pos:end="291:17">asm <specifier pos:start="257:17" pos:end="257:24">volatile</specifier>(

                "movdqu  4(%1), %%xmm2        \n\t"

                "movdqu 20(%1), %%xmm6        \n\t"

                "paddd    (%1), %%xmm2        \n\t"

                "paddd  16(%1), %%xmm6        \n\t"

                "movdqu   (%0), %%xmm0        \n\t"

                "movdqu 16(%0), %%xmm4        \n\t"

                "paddd  %%xmm2, %%xmm0        \n\t"

                "paddd  %%xmm6, %%xmm4        \n\t"

                "psrad      $1, %%xmm2        \n\t"

                "psrad      $1, %%xmm6        \n\t"

                "paddd  %%xmm0, %%xmm2        \n\t"

                "paddd  %%xmm4, %%xmm6        \n\t"

                "movdqa %%xmm2, (%2)          \n\t"

                "movdqa %%xmm6, 16(%2)        \n\t"

                :: "r"(&amp;src[i]), "r"(&amp;b[i]), "r"(&amp;temp[i])

                 : "memory"

               );</asm>

        </block_content>}</block></for>

        <expr_stmt pos:start="295:9" pos:end="295:99"><expr pos:start="295:9" pos:end="295:98"><call pos:start="295:9" pos:end="295:98"><name pos:start="295:9" pos:end="295:45">snow_horizontal_compose_lift_lead_out</name><argument_list pos:start="295:46" pos:end="295:98">(<argument pos:start="295:47" pos:end="295:47"><expr pos:start="295:47" pos:end="295:47"><name pos:start="295:47" pos:end="295:47">i</name></expr></argument>, <argument pos:start="295:50" pos:end="295:53"><expr pos:start="295:50" pos:end="295:53"><name pos:start="295:50" pos:end="295:53">temp</name></expr></argument>, <argument pos:start="295:56" pos:end="295:58"><expr pos:start="295:56" pos:end="295:58"><name pos:start="295:56" pos:end="295:58">src</name></expr></argument>, <argument pos:start="295:61" pos:end="295:61"><expr pos:start="295:61" pos:end="295:61"><name pos:start="295:61" pos:end="295:61">b</name></expr></argument>, <argument pos:start="295:64" pos:end="295:68"><expr pos:start="295:64" pos:end="295:68"><name pos:start="295:64" pos:end="295:68">width</name></expr></argument>, <argument pos:start="295:71" pos:end="295:73"><expr pos:start="295:71" pos:end="295:73"><name pos:start="295:71" pos:end="295:73">w_r</name></expr></argument>, <argument pos:start="295:76" pos:end="295:76"><expr pos:start="295:76" pos:end="295:76"><literal type="number" pos:start="295:76" pos:end="295:76">1</literal></expr></argument>, <argument pos:start="295:79" pos:end="295:83"><expr pos:start="295:79" pos:end="295:83"><operator pos:start="295:79" pos:end="295:79">-</operator><name pos:start="295:80" pos:end="295:83">W_AM</name></expr></argument>, <argument pos:start="295:86" pos:end="295:91"><expr pos:start="295:86" pos:end="295:91"><name pos:start="295:86" pos:end="295:89">W_AO</name><operator pos:start="295:90" pos:end="295:90">+</operator><literal type="number" pos:start="295:91" pos:end="295:91">1</literal></expr></argument>, <argument pos:start="295:94" pos:end="295:97"><expr pos:start="295:94" pos:end="295:97"><name pos:start="295:94" pos:end="295:97">W_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <block pos:start="301:5" pos:end="375:5">{<block_content pos:start="303:9" pos:end="373:9">

        <expr_stmt pos:start="303:9" pos:end="303:56"><expr pos:start="303:9" pos:end="303:55"><call pos:start="303:9" pos:end="303:55"><name pos:start="303:9" pos:end="303:35">snow_interleave_line_header</name><argument_list pos:start="303:36" pos:end="303:55">(<argument pos:start="303:37" pos:end="303:38"><expr pos:start="303:37" pos:end="303:38"><operator pos:start="303:37" pos:end="303:37">&amp;</operator><name pos:start="303:38" pos:end="303:38">i</name></expr></argument>, <argument pos:start="303:41" pos:end="303:45"><expr pos:start="303:41" pos:end="303:45"><name pos:start="303:41" pos:end="303:45">width</name></expr></argument>, <argument pos:start="303:48" pos:end="303:48"><expr pos:start="303:48" pos:end="303:48"><name pos:start="303:48" pos:end="303:48">b</name></expr></argument>, <argument pos:start="303:51" pos:end="303:54"><expr pos:start="303:51" pos:end="303:54"><name pos:start="303:51" pos:end="303:54">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="307:9" pos:end="313:9">for <control pos:start="307:13" pos:end="307:40">(<init pos:start="307:14" pos:end="307:14">;</init> <condition pos:start="307:16" pos:end="307:34"><expr pos:start="307:16" pos:end="307:33"><operator pos:start="307:16" pos:end="307:16">(</operator><name pos:start="307:17" pos:end="307:17">i</name> <operator pos:start="307:19" pos:end="307:19">&amp;</operator> <literal type="number" pos:start="307:21" pos:end="307:24">0x1E</literal><operator pos:start="307:25" pos:end="307:25">)</operator> <operator pos:start="307:27" pos:end="307:28">!=</operator> <literal type="number" pos:start="307:30" pos:end="307:33">0x1E</literal></expr>;</condition> <incr pos:start="307:36" pos:end="307:39"><expr pos:start="307:36" pos:end="307:39"><name pos:start="307:36" pos:end="307:36">i</name><operator pos:start="307:37" pos:end="307:38">-=</operator><literal type="number" pos:start="307:39" pos:end="307:39">2</literal></expr></incr>)</control><block pos:start="307:41" pos:end="313:9">{<block_content pos:start="309:13" pos:end="311:27">

            <expr_stmt pos:start="309:13" pos:end="309:32"><expr pos:start="309:13" pos:end="309:31"><name pos:start="309:13" pos:end="309:18"><name pos:start="309:13" pos:end="309:13">b</name><index pos:start="309:14" pos:end="309:18">[<expr pos:start="309:15" pos:end="309:17"><name pos:start="309:15" pos:end="309:15">i</name><operator pos:start="309:16" pos:end="309:16">+</operator><literal type="number" pos:start="309:17" pos:end="309:17">1</literal></expr>]</index></name> <operator pos:start="309:20" pos:end="309:20">=</operator> <name pos:start="309:22" pos:end="309:31"><name pos:start="309:22" pos:end="309:25">temp</name><index pos:start="309:26" pos:end="309:31">[<expr pos:start="309:27" pos:end="309:30"><name pos:start="309:27" pos:end="309:27">i</name><operator pos:start="309:28" pos:end="309:29">&gt;&gt;</operator><literal type="number" pos:start="309:30" pos:end="309:30">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:27"><expr pos:start="311:13" pos:end="311:26"><name pos:start="311:13" pos:end="311:16"><name pos:start="311:13" pos:end="311:13">b</name><index pos:start="311:14" pos:end="311:16">[<expr pos:start="311:15" pos:end="311:15"><name pos:start="311:15" pos:end="311:15">i</name></expr>]</index></name> <operator pos:start="311:18" pos:end="311:18">=</operator> <name pos:start="311:20" pos:end="311:26"><name pos:start="311:20" pos:end="311:20">b</name><index pos:start="311:21" pos:end="311:26">[<expr pos:start="311:22" pos:end="311:25"><name pos:start="311:22" pos:end="311:22">i</name><operator pos:start="311:23" pos:end="311:24">&gt;&gt;</operator><literal type="number" pos:start="311:25" pos:end="311:25">1</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="315:9" pos:end="373:9">for <control pos:start="315:13" pos:end="315:32">(<init pos:start="315:14" pos:end="315:19"><expr pos:start="315:14" pos:end="315:18"><name pos:start="315:14" pos:end="315:14">i</name><operator pos:start="315:15" pos:end="315:16">-=</operator><literal type="number" pos:start="315:17" pos:end="315:18">30</literal></expr>;</init> <condition pos:start="315:21" pos:end="315:25"><expr pos:start="315:21" pos:end="315:24"><name pos:start="315:21" pos:end="315:21">i</name><operator pos:start="315:22" pos:end="315:23">&gt;=</operator><literal type="number" pos:start="315:24" pos:end="315:24">0</literal></expr>;</condition> <incr pos:start="315:27" pos:end="315:31"><expr pos:start="315:27" pos:end="315:31"><name pos:start="315:27" pos:end="315:27">i</name><operator pos:start="315:28" pos:end="315:29">-=</operator><literal type="number" pos:start="315:30" pos:end="315:31">32</literal></expr></incr>)</control><block pos:start="315:33" pos:end="373:9">{<block_content pos:start="317:13" pos:end="371:17">

            <asm pos:start="317:13" pos:end="371:17">asm <specifier pos:start="317:17" pos:end="317:24">volatile</specifier>(

                "movdqa      (%1), %%xmm0       \n\t"

                "movdqa    16(%1), %%xmm2       \n\t"

                "movdqa    32(%1), %%xmm4       \n\t"

                "movdqa    48(%1), %%xmm6       \n\t"

                "movdqa      (%1), %%xmm1       \n\t"

                "movdqa    16(%1), %%xmm3       \n\t"

                "movdqa    32(%1), %%xmm5       \n\t"

                "movdqa    48(%1), %%xmm7       \n\t"

                "punpckldq   (%2), %%xmm0       \n\t"

                "punpckldq 16(%2), %%xmm2       \n\t"

                "punpckldq 32(%2), %%xmm4       \n\t"

                "punpckldq 48(%2), %%xmm6       \n\t"

                "movdqa    %%xmm0, (%0)         \n\t"

                "movdqa    %%xmm2, 32(%0)       \n\t"

                "movdqa    %%xmm4, 64(%0)       \n\t"

                "movdqa    %%xmm6, 96(%0)       \n\t"

                "punpckhdq   (%2), %%xmm1       \n\t"

                "punpckhdq 16(%2), %%xmm3       \n\t"

                "punpckhdq 32(%2), %%xmm5       \n\t"

                "punpckhdq 48(%2), %%xmm7       \n\t"

                "movdqa    %%xmm1, 16(%0)       \n\t"

                "movdqa    %%xmm3, 48(%0)       \n\t"

                "movdqa    %%xmm5, 80(%0)       \n\t"

                "movdqa    %%xmm7, 112(%0)      \n\t"

                :: "r"(&amp;(b)[i]), "r"(&amp;(b)[i&gt;&gt;1]), "r"(&amp;(temp)[i&gt;&gt;1])

                 : "memory"

               );</asm>

        </block_content>}</block></for>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
