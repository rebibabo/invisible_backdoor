<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24557.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">asf_read_stream_properties</name><parameter_list pos:start="1:38" pos:end="1:82">(<parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:53">AVFormatContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:81"><decl pos:start="1:59" pos:end="1:81"><type pos:start="1:59" pos:end="1:81"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:78">GUIDParseTable</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:81">g</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:17">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:25">err_data_len</name></decl>, <decl pos:start="11:28" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:28" pos:end="11:38">ts_data_len</name></decl>;</decl_stmt> <comment type="line" pos:start="11:41" pos:end="11:68">// type specific data length</comment>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">ff_asf_guid</name></type> <name pos:start="15:17" pos:end="15:27">stream_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:8">enum</name> <name pos:start="17:10" pos:end="17:20">AVMediaType</name></name></type> <name pos:start="17:22" pos:end="17:25">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:14"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:24">stream_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">AVStream</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">ASFStream</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:21">asf_st</name></decl>;</decl_stmt>



    <comment type="line" pos:start="29:5" pos:end="29:85">// ASF file must not contain more than 128 streams according to the specification</comment>

    <if_stmt pos:start="31:5" pos:end="33:35"><if pos:start="31:5" pos:end="33:35">if <condition pos:start="31:8" pos:end="31:43">(<expr pos:start="31:9" pos:end="31:42"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:11">asf</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:23">nb_streams</name></name> <operator pos:start="31:25" pos:end="31:26">&gt;=</operator> <name pos:start="31:28" pos:end="31:42">ASF_MAX_STREAMS</name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:35"><block_content pos:start="33:9" pos:end="33:35">

        <return pos:start="33:9" pos:end="33:35">return <expr pos:start="33:16" pos:end="33:34"><name pos:start="33:16" pos:end="33:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:8">size</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:24"><name pos:start="37:12" pos:end="37:20">avio_rl64</name><argument_list pos:start="37:21" pos:end="37:24">(<argument pos:start="37:22" pos:end="37:23"><expr pos:start="37:22" pos:end="37:23"><name pos:start="37:22" pos:end="37:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><call pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:15">ff_get_guid</name><argument_list pos:start="39:16" pos:end="39:33">(<argument pos:start="39:17" pos:end="39:18"><expr pos:start="39:17" pos:end="39:18"><name pos:start="39:17" pos:end="39:18">pb</name></expr></argument>, <argument pos:start="39:21" pos:end="39:32"><expr pos:start="39:21" pos:end="39:32"><operator pos:start="39:21" pos:end="39:21">&amp;</operator><name pos:start="39:22" pos:end="39:32">stream_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="65:35"><if pos:start="41:5" pos:end="43:34">if <condition pos:start="41:8" pos:end="41:56">(<expr pos:start="41:9" pos:end="41:55"><operator pos:start="41:9" pos:end="41:9">!</operator><call pos:start="41:10" pos:end="41:55"><name pos:start="41:10" pos:end="41:19">ff_guidcmp</name><argument_list pos:start="41:20" pos:end="41:55">(<argument pos:start="41:21" pos:end="41:32"><expr pos:start="41:21" pos:end="41:32"><operator pos:start="41:21" pos:end="41:21">&amp;</operator><name pos:start="41:22" pos:end="41:32">stream_type</name></expr></argument>, <argument pos:start="41:35" pos:end="41:54"><expr pos:start="41:35" pos:end="41:54"><operator pos:start="41:35" pos:end="41:35">&amp;</operator><name pos:start="41:36" pos:end="41:54">ff_asf_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:34"><block_content pos:start="43:9" pos:end="43:34">

        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:12">type</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:33">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="45:5" pos:end="47:34">else if <condition pos:start="45:13" pos:end="45:61">(<expr pos:start="45:14" pos:end="45:60"><operator pos:start="45:14" pos:end="45:14">!</operator><call pos:start="45:15" pos:end="45:60"><name pos:start="45:15" pos:end="45:24">ff_guidcmp</name><argument_list pos:start="45:25" pos:end="45:60">(<argument pos:start="45:26" pos:end="45:37"><expr pos:start="45:26" pos:end="45:37"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:37">stream_type</name></expr></argument>, <argument pos:start="45:40" pos:end="45:59"><expr pos:start="45:40" pos:end="45:59"><operator pos:start="45:40" pos:end="45:40">&amp;</operator><name pos:start="45:41" pos:end="45:59">ff_asf_video_stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:34"><block_content pos:start="47:9" pos:end="47:34">

        <expr_stmt pos:start="47:9" pos:end="47:34"><expr pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:12">type</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:33">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="49:5" pos:end="51:34">else if <condition pos:start="49:13" pos:end="49:59">(<expr pos:start="49:14" pos:end="49:58"><operator pos:start="49:14" pos:end="49:14">!</operator><call pos:start="49:15" pos:end="49:58"><name pos:start="49:15" pos:end="49:24">ff_guidcmp</name><argument_list pos:start="49:25" pos:end="49:58">(<argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:37">stream_type</name></expr></argument>, <argument pos:start="49:40" pos:end="49:57"><expr pos:start="49:40" pos:end="49:57"><operator pos:start="49:40" pos:end="49:40">&amp;</operator><name pos:start="49:41" pos:end="49:57">ff_asf_jfif_media</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:34"><block_content pos:start="51:9" pos:end="51:34">

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:12">type</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:33">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="53:5" pos:end="55:33">else if <condition pos:start="53:13" pos:end="53:63">(<expr pos:start="53:14" pos:end="53:62"><operator pos:start="53:14" pos:end="53:14">!</operator><call pos:start="53:15" pos:end="53:62"><name pos:start="53:15" pos:end="53:24">ff_guidcmp</name><argument_list pos:start="53:25" pos:end="53:62">(<argument pos:start="53:26" pos:end="53:37"><expr pos:start="53:26" pos:end="53:37"><operator pos:start="53:26" pos:end="53:26">&amp;</operator><name pos:start="53:27" pos:end="53:37">stream_type</name></expr></argument>, <argument pos:start="53:40" pos:end="53:61"><expr pos:start="53:40" pos:end="53:61"><operator pos:start="53:40" pos:end="53:40">&amp;</operator><name pos:start="53:41" pos:end="53:61">ff_asf_command_stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:33"><block_content pos:start="55:9" pos:end="55:33">

        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:32">AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="57:5" pos:end="61:36">else if <condition pos:start="57:13" pos:end="59:65">(<expr pos:start="57:14" pos:end="59:64"><operator pos:start="57:14" pos:end="57:14">!</operator><call pos:start="57:15" pos:end="59:64"><name pos:start="57:15" pos:end="57:24">ff_guidcmp</name><argument_list pos:start="57:25" pos:end="59:64">(<argument pos:start="57:26" pos:end="57:37"><expr pos:start="57:26" pos:end="57:37"><operator pos:start="57:26" pos:end="57:26">&amp;</operator><name pos:start="57:27" pos:end="57:37">stream_type</name></expr></argument>,

                         <argument pos:start="59:26" pos:end="59:63"><expr pos:start="59:26" pos:end="59:63"><operator pos:start="59:26" pos:end="59:26">&amp;</operator><name pos:start="59:27" pos:end="59:63">ff_asf_ext_stream_embed_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:36"><block_content pos:start="61:9" pos:end="61:36">

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:12">type</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:35">AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="63:5" pos:end="65:35">else<block type="pseudo" pos:start="65:9" pos:end="65:35"><block_content pos:start="65:9" pos:end="65:35">

        <return pos:start="65:9" pos:end="65:35">return <expr pos:start="65:16" pos:end="65:34"><name pos:start="65:16" pos:end="65:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:34"><expr pos:start="69:5" pos:end="69:33"><call pos:start="69:5" pos:end="69:33"><name pos:start="69:5" pos:end="69:15">ff_get_guid</name><argument_list pos:start="69:16" pos:end="69:33">(<argument pos:start="69:17" pos:end="69:18"><expr pos:start="69:17" pos:end="69:18"><name pos:start="69:17" pos:end="69:18">pb</name></expr></argument>, <argument pos:start="69:21" pos:end="69:32"><expr pos:start="69:21" pos:end="69:32"><operator pos:start="69:21" pos:end="69:21">&amp;</operator><name pos:start="69:22" pos:end="69:32">stream_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="69:36" pos:end="69:59">// error correction type</comment>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><call pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:13">avio_skip</name><argument_list pos:start="71:14" pos:end="71:20">(<argument pos:start="71:15" pos:end="71:16"><expr pos:start="71:15" pos:end="71:16"><name pos:start="71:15" pos:end="71:16">pb</name></expr></argument>, <argument pos:start="71:19" pos:end="71:19"><expr pos:start="71:19" pos:end="71:19"><literal type="number" pos:start="71:19" pos:end="71:19">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="71:23" pos:end="71:45">// skip the time offset</comment>

    <expr_stmt pos:start="73:5" pos:end="73:37"><expr pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:15">ts_data_len</name>      <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:36"><name pos:start="73:24" pos:end="73:32">avio_rl32</name><argument_list pos:start="73:33" pos:end="73:36">(<argument pos:start="73:34" pos:end="73:35"><expr pos:start="73:34" pos:end="73:35"><name pos:start="73:34" pos:end="73:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:37"><expr pos:start="75:5" pos:end="75:36"><name pos:start="75:5" pos:end="75:16">err_data_len</name>     <operator pos:start="75:22" pos:end="75:22">=</operator> <call pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:32">avio_rl32</name><argument_list pos:start="75:33" pos:end="75:36">(<argument pos:start="75:34" pos:end="75:35"><expr pos:start="75:34" pos:end="75:35"><name pos:start="75:34" pos:end="75:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:9">flags</name>            <operator pos:start="77:22" pos:end="77:22">=</operator> <call pos:start="77:24" pos:end="77:36"><name pos:start="77:24" pos:end="77:32">avio_rl16</name><argument_list pos:start="77:33" pos:end="77:36">(<argument pos:start="77:34" pos:end="77:35"><expr pos:start="77:34" pos:end="77:35"><name pos:start="77:34" pos:end="77:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="77:39" pos:end="77:67">// bit 15 - Encrypted Content</comment>



    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:16">stream_index</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <name pos:start="81:20" pos:end="81:24">flags</name> <operator pos:start="81:26" pos:end="81:26">&amp;</operator> <name pos:start="81:28" pos:end="81:41">ASF_STREAM_NUM</name></expr>;</expr_stmt>

    <for pos:start="83:5" pos:end="95:9">for <control pos:start="83:9" pos:end="83:41">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:36"><expr pos:start="83:17" pos:end="83:35"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <name pos:start="83:21" pos:end="83:35"><name pos:start="83:21" pos:end="83:23">asf</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:35">nb_streams</name></name></expr>;</condition> <incr pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:38">i</name><operator pos:start="83:39" pos:end="83:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:9" pos:end="95:9"><block_content pos:start="85:9" pos:end="95:9">

        <if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:57">(<expr pos:start="85:13" pos:end="85:56"><name pos:start="85:13" pos:end="85:24">stream_index</name> <operator pos:start="85:26" pos:end="85:27">==</operator> <name pos:start="85:29" pos:end="85:42"><name pos:start="85:29" pos:end="85:31">asf</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:39">asf_st</name><index pos:start="85:40" pos:end="85:42">[<expr pos:start="85:41" pos:end="85:41"><name pos:start="85:41" pos:end="85:41">i</name></expr>]</index></name><operator pos:start="85:43" pos:end="85:44">-&gt;</operator><name pos:start="85:45" pos:end="85:56">stream_index</name></expr>)</condition> <block pos:start="85:59" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:21">

            <expr_stmt pos:start="87:13" pos:end="89:77"><expr pos:start="87:13" pos:end="89:76"><call pos:start="87:13" pos:end="89:76"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="89:76">(<argument pos:start="87:20" pos:end="87:20"><expr pos:start="87:20" pos:end="87:20"><name pos:start="87:20" pos:end="87:20">s</name></expr></argument>, <argument pos:start="87:23" pos:end="87:36"><expr pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:75"><expr pos:start="89:20" pos:end="89:75"><literal type="string" pos:start="89:20" pos:end="89:75">"Duplicate stream found, this stream will be ignored.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:50"><expr pos:start="91:13" pos:end="91:49"><call pos:start="91:13" pos:end="91:49"><name pos:start="91:13" pos:end="91:26">align_position</name><argument_list pos:start="91:27" pos:end="91:49">(<argument pos:start="91:28" pos:end="91:29"><expr pos:start="91:28" pos:end="91:29"><name pos:start="91:28" pos:end="91:29">pb</name></expr></argument>, <argument pos:start="91:32" pos:end="91:42"><expr pos:start="91:32" pos:end="91:42"><name pos:start="91:32" pos:end="91:42"><name pos:start="91:32" pos:end="91:34">asf</name><operator pos:start="91:35" pos:end="91:36">-&gt;</operator><name pos:start="91:37" pos:end="91:42">offset</name></name></expr></argument>, <argument pos:start="91:45" pos:end="91:48"><expr pos:start="91:45" pos:end="91:48"><name pos:start="91:45" pos:end="91:48">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:21">return <expr pos:start="93:20" pos:end="93:20"><literal type="number" pos:start="93:20" pos:end="93:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt></block_content></block></for>



    <expr_stmt pos:start="99:5" pos:end="99:38"><expr pos:start="99:5" pos:end="99:37"><name pos:start="99:5" pos:end="99:6">st</name> <operator pos:start="99:8" pos:end="99:8">=</operator> <call pos:start="99:10" pos:end="99:37"><name pos:start="99:10" pos:end="99:28">avformat_new_stream</name><argument_list pos:start="99:29" pos:end="99:37">(<argument pos:start="99:30" pos:end="99:30"><expr pos:start="99:30" pos:end="99:30"><name pos:start="99:30" pos:end="99:30">s</name></expr></argument>, <argument pos:start="99:33" pos:end="99:36"><expr pos:start="99:33" pos:end="99:36"><name pos:start="99:33" pos:end="99:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="103:31"><if pos:start="101:5" pos:end="103:31">if <condition pos:start="101:8" pos:end="101:12">(<expr pos:start="101:9" pos:end="101:11"><operator pos:start="101:9" pos:end="101:9">!</operator><name pos:start="101:10" pos:end="101:11">st</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:31"><block_content pos:start="103:9" pos:end="103:31">

        <return pos:start="103:9" pos:end="103:31">return <expr pos:start="103:16" pos:end="103:30"><call pos:start="103:16" pos:end="103:30"><name pos:start="103:16" pos:end="103:22">AVERROR</name><argument_list pos:start="103:23" pos:end="103:30">(<argument pos:start="103:24" pos:end="103:29"><expr pos:start="103:24" pos:end="103:29"><name pos:start="103:24" pos:end="103:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:41"><expr pos:start="105:5" pos:end="105:40"><call pos:start="105:5" pos:end="105:40"><name pos:start="105:5" pos:end="105:23">avpriv_set_pts_info</name><argument_list pos:start="105:24" pos:end="105:40">(<argument pos:start="105:25" pos:end="105:26"><expr pos:start="105:25" pos:end="105:26"><name pos:start="105:25" pos:end="105:26">st</name></expr></argument>, <argument pos:start="105:29" pos:end="105:30"><expr pos:start="105:29" pos:end="105:30"><literal type="number" pos:start="105:29" pos:end="105:30">32</literal></expr></argument>, <argument pos:start="105:33" pos:end="105:33"><expr pos:start="105:33" pos:end="105:33"><literal type="number" pos:start="105:33" pos:end="105:33">1</literal></expr></argument>, <argument pos:start="105:36" pos:end="105:39"><expr pos:start="105:36" pos:end="105:39"><literal type="number" pos:start="105:36" pos:end="105:39">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="105:43" pos:end="105:81">// pts should be dword, in milliseconds</comment>

    <expr_stmt pos:start="107:5" pos:end="107:33"><expr pos:start="107:5" pos:end="107:32"><name pos:start="107:5" pos:end="107:25"><name pos:start="107:5" pos:end="107:6">st</name><operator pos:start="107:7" pos:end="107:8">-&gt;</operator><name pos:start="107:9" pos:end="107:13">codec</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:25">codec_type</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:32">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:63"><expr pos:start="109:5" pos:end="109:62"><name pos:start="109:5" pos:end="109:32"><name pos:start="109:5" pos:end="109:7">asf</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:15">asf_st</name><index pos:start="109:16" pos:end="109:32">[<expr pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:19">asf</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:31">nb_streams</name></name></expr>]</index></name> <operator pos:start="109:34" pos:end="109:34">=</operator> <call pos:start="109:36" pos:end="109:62"><name pos:start="109:36" pos:end="109:45">av_mallocz</name><argument_list pos:start="109:46" pos:end="109:62">(<argument pos:start="109:47" pos:end="109:61"><expr pos:start="109:47" pos:end="109:61"><sizeof pos:start="109:47" pos:end="109:61">sizeof<argument_list pos:start="109:53" pos:end="109:61">(<argument pos:start="109:54" pos:end="109:60"><expr pos:start="109:54" pos:end="109:60"><operator pos:start="109:54" pos:end="109:54">*</operator><name pos:start="109:55" pos:end="109:60">asf_st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="113:31"><if pos:start="111:5" pos:end="113:31">if <condition pos:start="111:8" pos:end="111:38">(<expr pos:start="111:9" pos:end="111:37"><operator pos:start="111:9" pos:end="111:9">!</operator><name pos:start="111:10" pos:end="111:37"><name pos:start="111:10" pos:end="111:12">asf</name><operator pos:start="111:13" pos:end="111:14">-&gt;</operator><name pos:start="111:15" pos:end="111:20">asf_st</name><index pos:start="111:21" pos:end="111:37">[<expr pos:start="111:22" pos:end="111:36"><name pos:start="111:22" pos:end="111:36"><name pos:start="111:22" pos:end="111:24">asf</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:36">nb_streams</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:31"><block_content pos:start="113:9" pos:end="113:31">

        <return pos:start="113:9" pos:end="113:31">return <expr pos:start="113:16" pos:end="113:30"><call pos:start="113:16" pos:end="113:30"><name pos:start="113:16" pos:end="113:22">AVERROR</name><argument_list pos:start="113:23" pos:end="113:30">(<argument pos:start="113:24" pos:end="113:29"><expr pos:start="113:24" pos:end="113:29"><name pos:start="113:24" pos:end="113:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:64"><expr pos:start="115:5" pos:end="115:63"><name pos:start="115:5" pos:end="115:10">asf_st</name>                       <operator pos:start="115:34" pos:end="115:34">=</operator> <name pos:start="115:36" pos:end="115:63"><name pos:start="115:36" pos:end="115:38">asf</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:46">asf_st</name><index pos:start="115:47" pos:end="115:63">[<expr pos:start="115:48" pos:end="115:62"><name pos:start="115:48" pos:end="115:62"><name pos:start="115:48" pos:end="115:50">asf</name><operator pos:start="115:51" pos:end="115:52">-&gt;</operator><name pos:start="115:53" pos:end="115:62">nb_streams</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:48"><expr pos:start="117:5" pos:end="117:47"><name pos:start="117:5" pos:end="117:24"><name pos:start="117:5" pos:end="117:10">asf_st</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:24">stream_index</name></name>         <operator pos:start="117:34" pos:end="117:34">=</operator> <name pos:start="117:36" pos:end="117:47">stream_index</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:45"><expr pos:start="119:5" pos:end="119:44"><name pos:start="119:5" pos:end="119:17"><name pos:start="119:5" pos:end="119:10">asf_st</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:17">index</name></name>                <operator pos:start="119:34" pos:end="119:34">=</operator> <name pos:start="119:36" pos:end="119:44"><name pos:start="119:36" pos:end="119:37">st</name><operator pos:start="119:38" pos:end="119:39">-&gt;</operator><name pos:start="119:40" pos:end="119:44">index</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:37"><expr pos:start="121:5" pos:end="121:36"><name pos:start="121:5" pos:end="121:19"><name pos:start="121:5" pos:end="121:10">asf_st</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:19">indexed</name></name>              <operator pos:start="121:34" pos:end="121:34">=</operator> <literal type="number" pos:start="121:36" pos:end="121:36">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:58"><expr pos:start="123:5" pos:end="123:57"><name pos:start="123:5" pos:end="123:10"><name pos:start="123:5" pos:end="123:6">st</name><operator pos:start="123:7" pos:end="123:8">-&gt;</operator><name pos:start="123:9" pos:end="123:10">id</name></name>                       <operator pos:start="123:34" pos:end="123:34">=</operator> <name pos:start="123:36" pos:end="123:40">flags</name> <operator pos:start="123:42" pos:end="123:42">&amp;</operator> <name pos:start="123:44" pos:end="123:57">ASF_STREAM_NUM</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:39"><expr pos:start="125:5" pos:end="125:38"><call pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:18">av_init_packet</name><argument_list pos:start="125:19" pos:end="125:38">(<argument pos:start="125:20" pos:end="125:37"><expr pos:start="125:20" pos:end="125:37"><operator pos:start="125:20" pos:end="125:20">&amp;</operator><name pos:start="125:21" pos:end="125:37"><name pos:start="125:21" pos:end="125:26">asf_st</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:31">pkt</name><operator pos:start="125:32" pos:end="125:32">.</operator><name pos:start="125:33" pos:end="125:37">avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:37"><expr pos:start="127:5" pos:end="127:36"><name pos:start="127:5" pos:end="127:25"><name pos:start="127:5" pos:end="127:10">asf_st</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:15">pkt</name><operator pos:start="127:16" pos:end="127:16">.</operator><name pos:start="127:17" pos:end="127:25">data_size</name></name>        <operator pos:start="127:34" pos:end="127:34">=</operator> <literal type="number" pos:start="127:36" pos:end="127:36">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:21"><expr pos:start="129:5" pos:end="129:20"><call pos:start="129:5" pos:end="129:20"><name pos:start="129:5" pos:end="129:13">avio_skip</name><argument_list pos:start="129:14" pos:end="129:20">(<argument pos:start="129:15" pos:end="129:16"><expr pos:start="129:15" pos:end="129:16"><name pos:start="129:15" pos:end="129:16">pb</name></expr></argument>, <argument pos:start="129:19" pos:end="129:19"><expr pos:start="129:19" pos:end="129:19"><literal type="number" pos:start="129:19" pos:end="129:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="129:23" pos:end="129:44">// skip reserved field</comment>



    <switch pos:start="133:5" pos:end="161:5">switch <condition pos:start="133:12" pos:end="133:17">(<expr pos:start="133:13" pos:end="133:16"><name pos:start="133:13" pos:end="133:16">type</name></expr>)</condition> <block pos:start="133:19" pos:end="161:5">{<block_content pos:start="135:5" pos:end="159:14">

    <case pos:start="135:5" pos:end="135:28">case <expr pos:start="135:10" pos:end="135:27"><name pos:start="135:10" pos:end="135:27">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:42"><expr pos:start="137:9" pos:end="137:41"><name pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:14">asf_st</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:20">type</name></name> <operator pos:start="137:22" pos:end="137:22">=</operator> <name pos:start="137:24" pos:end="137:41">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="141:23"><if pos:start="139:9" pos:end="141:23">if <condition pos:start="139:12" pos:end="139:73">(<expr pos:start="139:13" pos:end="139:72"><operator pos:start="139:13" pos:end="139:13">(</operator><name pos:start="139:14" pos:end="139:16">ret</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:67"><name pos:start="139:20" pos:end="139:36">ff_get_wav_header</name><argument_list pos:start="139:37" pos:end="139:67">(<argument pos:start="139:38" pos:end="139:38"><expr pos:start="139:38" pos:end="139:38"><name pos:start="139:38" pos:end="139:38">s</name></expr></argument>, <argument pos:start="139:41" pos:end="139:42"><expr pos:start="139:41" pos:end="139:42"><name pos:start="139:41" pos:end="139:42">pb</name></expr></argument>, <argument pos:start="139:45" pos:end="139:53"><expr pos:start="139:45" pos:end="139:53"><name pos:start="139:45" pos:end="139:53"><name pos:start="139:45" pos:end="139:46">st</name><operator pos:start="139:47" pos:end="139:48">-&gt;</operator><name pos:start="139:49" pos:end="139:53">codec</name></name></expr></argument>, <argument pos:start="139:56" pos:end="139:66"><expr pos:start="139:56" pos:end="139:66"><name pos:start="139:56" pos:end="139:66">ts_data_len</name></expr></argument>)</argument_list></call><operator pos:start="139:68" pos:end="139:68">)</operator> <operator pos:start="139:70" pos:end="139:70">&lt;</operator> <literal type="number" pos:start="139:72" pos:end="139:72">0</literal></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:23"><block_content pos:start="141:13" pos:end="141:23">

            <return pos:start="141:13" pos:end="141:23">return <expr pos:start="141:20" pos:end="141:22"><name pos:start="141:20" pos:end="141:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:28">case <expr pos:start="145:10" pos:end="145:27"><name pos:start="145:10" pos:end="145:27">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="147:42"><expr pos:start="147:9" pos:end="147:41"><name pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:14">asf_st</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:20">type</name></name> <operator pos:start="147:22" pos:end="147:22">=</operator> <name pos:start="147:24" pos:end="147:41">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="151:23"><if pos:start="149:9" pos:end="151:23">if <condition pos:start="149:12" pos:end="149:49">(<expr pos:start="149:13" pos:end="149:48"><operator pos:start="149:13" pos:end="149:13">(</operator><name pos:start="149:14" pos:end="149:16">ret</name> <operator pos:start="149:18" pos:end="149:18">=</operator> <call pos:start="149:20" pos:end="149:43"><name pos:start="149:20" pos:end="149:35">parse_video_info</name><argument_list pos:start="149:36" pos:end="149:43">(<argument pos:start="149:37" pos:end="149:38"><expr pos:start="149:37" pos:end="149:38"><name pos:start="149:37" pos:end="149:38">pb</name></expr></argument>, <argument pos:start="149:41" pos:end="149:42"><expr pos:start="149:41" pos:end="149:42"><name pos:start="149:41" pos:end="149:42">st</name></expr></argument>)</argument_list></call><operator pos:start="149:44" pos:end="149:44">)</operator> <operator pos:start="149:46" pos:end="149:46">&lt;</operator> <literal type="number" pos:start="149:48" pos:end="149:48">0</literal></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:23"><block_content pos:start="151:13" pos:end="151:23">

            <return pos:start="151:13" pos:end="151:23">return <expr pos:start="151:20" pos:end="151:22"><name pos:start="151:20" pos:end="151:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <default pos:start="155:5" pos:end="155:12">default:</default>

        <expr_stmt pos:start="157:9" pos:end="157:35"><expr pos:start="157:9" pos:end="157:34"><call pos:start="157:9" pos:end="157:34"><name pos:start="157:9" pos:end="157:17">avio_skip</name><argument_list pos:start="157:18" pos:end="157:34">(<argument pos:start="157:19" pos:end="157:20"><expr pos:start="157:19" pos:end="157:20"><name pos:start="157:19" pos:end="157:20">pb</name></expr></argument>, <argument pos:start="157:23" pos:end="157:33"><expr pos:start="157:23" pos:end="157:33"><name pos:start="157:23" pos:end="157:33">ts_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="165:5" pos:end="193:5"><if pos:start="165:5" pos:end="193:5">if <condition pos:start="165:8" pos:end="165:21">(<expr pos:start="165:9" pos:end="165:20"><name pos:start="165:9" pos:end="165:20">err_data_len</name></expr>)</condition> <block pos:start="165:23" pos:end="193:5">{<block_content pos:start="167:9" pos:end="191:40">

        <if_stmt pos:start="167:9" pos:end="191:40"><if pos:start="167:9" pos:end="189:9">if <condition pos:start="167:12" pos:end="167:39">(<expr pos:start="167:13" pos:end="167:38"><name pos:start="167:13" pos:end="167:16">type</name> <operator pos:start="167:18" pos:end="167:19">==</operator> <name pos:start="167:21" pos:end="167:38">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="167:41" pos:end="189:9">{<block_content pos:start="169:13" pos:end="187:48">

            <decl_stmt pos:start="169:13" pos:end="169:39"><decl pos:start="169:13" pos:end="169:38"><type pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:19">uint8_t</name></type> <name pos:start="169:21" pos:end="169:24">span</name> <init pos:start="169:26" pos:end="169:38">= <expr pos:start="169:28" pos:end="169:38"><call pos:start="169:28" pos:end="169:38"><name pos:start="169:28" pos:end="169:34">avio_r8</name><argument_list pos:start="169:35" pos:end="169:38">(<argument pos:start="169:36" pos:end="169:37"><expr pos:start="169:36" pos:end="169:37"><name pos:start="169:36" pos:end="169:37">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="171:13" pos:end="187:48"><if pos:start="171:13" pos:end="185:13">if <condition pos:start="171:16" pos:end="171:25">(<expr pos:start="171:17" pos:end="171:24"><name pos:start="171:17" pos:end="171:20">span</name> <operator pos:start="171:22" pos:end="171:22">&gt;</operator> <literal type="number" pos:start="171:24" pos:end="171:24">1</literal></expr>)</condition> <block pos:start="171:27" pos:end="185:13">{<block_content pos:start="173:17" pos:end="183:48">

                <expr_stmt pos:start="173:17" pos:end="173:49"><expr pos:start="173:17" pos:end="173:48"><name pos:start="173:17" pos:end="173:28"><name pos:start="173:17" pos:end="173:22">asf_st</name><operator pos:start="173:23" pos:end="173:24">-&gt;</operator><name pos:start="173:25" pos:end="173:28">span</name></name>              <operator pos:start="173:43" pos:end="173:43">=</operator> <name pos:start="173:45" pos:end="173:48">span</name></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:58"><expr pos:start="175:17" pos:end="175:57"><name pos:start="175:17" pos:end="175:39"><name pos:start="175:17" pos:end="175:22">asf_st</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:39">virtual_pkt_len</name></name>   <operator pos:start="175:43" pos:end="175:43">=</operator> <call pos:start="175:45" pos:end="175:57"><name pos:start="175:45" pos:end="175:53">avio_rl16</name><argument_list pos:start="175:54" pos:end="175:57">(<argument pos:start="175:55" pos:end="175:56"><expr pos:start="175:55" pos:end="175:56"><name pos:start="175:55" pos:end="175:56">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:58"><expr pos:start="177:17" pos:end="177:57"><name pos:start="177:17" pos:end="177:41"><name pos:start="177:17" pos:end="177:22">asf_st</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:41">virtual_chunk_len</name></name> <operator pos:start="177:43" pos:end="177:43">=</operator> <call pos:start="177:45" pos:end="177:57"><name pos:start="177:45" pos:end="177:53">avio_rl16</name><argument_list pos:start="177:54" pos:end="177:57">(<argument pos:start="177:55" pos:end="177:56"><expr pos:start="177:55" pos:end="177:56"><name pos:start="177:55" pos:end="177:56">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="179:17" pos:end="181:47"><if pos:start="179:17" pos:end="181:47">if <condition pos:start="179:20" pos:end="179:75">(<expr pos:start="179:21" pos:end="179:74"><operator pos:start="179:21" pos:end="179:21">!</operator><name pos:start="179:22" pos:end="179:46"><name pos:start="179:22" pos:end="179:27">asf_st</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:46">virtual_chunk_len</name></name> <operator pos:start="179:48" pos:end="179:49">||</operator> <operator pos:start="179:51" pos:end="179:51">!</operator><name pos:start="179:52" pos:end="179:74"><name pos:start="179:52" pos:end="179:57">asf_st</name><operator pos:start="179:58" pos:end="179:59">-&gt;</operator><name pos:start="179:60" pos:end="179:74">virtual_pkt_len</name></name></expr>)</condition><block type="pseudo" pos:start="181:21" pos:end="181:47"><block_content pos:start="181:21" pos:end="181:47">

                    <return pos:start="181:21" pos:end="181:47">return <expr pos:start="181:28" pos:end="181:46"><name pos:start="181:28" pos:end="181:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:48"><expr pos:start="183:17" pos:end="183:47"><call pos:start="183:17" pos:end="183:47"><name pos:start="183:17" pos:end="183:25">avio_skip</name><argument_list pos:start="183:26" pos:end="183:47">(<argument pos:start="183:27" pos:end="183:28"><expr pos:start="183:27" pos:end="183:28"><name pos:start="183:27" pos:end="183:28">pb</name></expr></argument>, <argument pos:start="183:31" pos:end="183:46"><expr pos:start="183:31" pos:end="183:46"><name pos:start="183:31" pos:end="183:42">err_data_len</name> <operator pos:start="183:44" pos:end="183:44">-</operator> <literal type="number" pos:start="183:46" pos:end="183:46">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="187:48">else<block type="pseudo" pos:start="187:17" pos:end="187:48"><block_content pos:start="187:17" pos:end="187:48">

                <expr_stmt pos:start="187:17" pos:end="187:48"><expr pos:start="187:17" pos:end="187:47"><call pos:start="187:17" pos:end="187:47"><name pos:start="187:17" pos:end="187:25">avio_skip</name><argument_list pos:start="187:26" pos:end="187:47">(<argument pos:start="187:27" pos:end="187:28"><expr pos:start="187:27" pos:end="187:28"><name pos:start="187:27" pos:end="187:28">pb</name></expr></argument>, <argument pos:start="187:31" pos:end="187:46"><expr pos:start="187:31" pos:end="187:46"><name pos:start="187:31" pos:end="187:42">err_data_len</name> <operator pos:start="187:44" pos:end="187:44">-</operator> <literal type="number" pos:start="187:46" pos:end="187:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="191:40">else<block type="pseudo" pos:start="191:13" pos:end="191:40"><block_content pos:start="191:13" pos:end="191:40">

            <expr_stmt pos:start="191:13" pos:end="191:40"><expr pos:start="191:13" pos:end="191:39"><call pos:start="191:13" pos:end="191:39"><name pos:start="191:13" pos:end="191:21">avio_skip</name><argument_list pos:start="191:22" pos:end="191:39">(<argument pos:start="191:23" pos:end="191:24"><expr pos:start="191:23" pos:end="191:24"><name pos:start="191:23" pos:end="191:24">pb</name></expr></argument>, <argument pos:start="191:27" pos:end="191:38"><expr pos:start="191:27" pos:end="191:38"><name pos:start="191:27" pos:end="191:38">err_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:22"><expr pos:start="197:5" pos:end="197:21"><name pos:start="197:5" pos:end="197:19"><name pos:start="197:5" pos:end="197:7">asf</name><operator pos:start="197:8" pos:end="197:9">-&gt;</operator><name pos:start="197:10" pos:end="197:19">nb_streams</name></name><operator pos:start="197:20" pos:end="197:21">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:42"><expr pos:start="199:5" pos:end="199:41"><call pos:start="199:5" pos:end="199:41"><name pos:start="199:5" pos:end="199:18">align_position</name><argument_list pos:start="199:19" pos:end="199:41">(<argument pos:start="199:20" pos:end="199:21"><expr pos:start="199:20" pos:end="199:21"><name pos:start="199:20" pos:end="199:21">pb</name></expr></argument>, <argument pos:start="199:24" pos:end="199:34"><expr pos:start="199:24" pos:end="199:34"><name pos:start="199:24" pos:end="199:34"><name pos:start="199:24" pos:end="199:26">asf</name><operator pos:start="199:27" pos:end="199:28">-&gt;</operator><name pos:start="199:29" pos:end="199:34">offset</name></name></expr></argument>, <argument pos:start="199:37" pos:end="199:40"><expr pos:start="199:37" pos:end="199:40"><name pos:start="199:37" pos:end="199:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="203:5" pos:end="203:13">return <expr pos:start="203:12" pos:end="203:12"><literal type="number" pos:start="203:12" pos:end="203:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
