<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4480.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">sun4uv_init</name><parameter_list pos:start="1:24" pos:end="9:50">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:34">ram_addr_t</name></type> <name pos:start="1:36" pos:end="1:43">RAM_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:48"><decl pos:start="3:25" pos:end="3:48"><type pos:start="3:25" pos:end="3:48"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:48">boot_devices</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:51"><decl pos:start="5:25" pos:end="5:51"><type pos:start="5:25" pos:end="5:51"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:51">kernel_filename</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:79"><decl pos:start="5:54" pos:end="5:79"><type pos:start="5:54" pos:end="5:79"><specifier pos:start="5:54" pos:end="5:58">const</specifier> <name pos:start="5:60" pos:end="5:63">char</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:79">kernel_cmdline</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:51"><decl pos:start="7:25" pos:end="7:51"><type pos:start="7:25" pos:end="7:51"><specifier pos:start="7:25" pos:end="7:29">const</specifier> <name pos:start="7:31" pos:end="7:34">char</name> <modifier pos:start="7:36" pos:end="7:36">*</modifier></type><name pos:start="7:37" pos:end="7:51">initrd_filename</name></decl></parameter>, <parameter pos:start="7:54" pos:end="7:74"><decl pos:start="7:54" pos:end="7:74"><type pos:start="7:54" pos:end="7:74"><specifier pos:start="7:54" pos:end="7:58">const</specifier> <name pos:start="7:60" pos:end="7:63">char</name> <modifier pos:start="7:65" pos:end="7:65">*</modifier></type><name pos:start="7:66" pos:end="7:74">cpu_model</name></decl></parameter>,

                        <parameter pos:start="9:25" pos:end="9:49"><decl pos:start="9:25" pos:end="9:49"><type pos:start="9:25" pos:end="9:49"><specifier pos:start="9:25" pos:end="9:29">const</specifier> <name pos:start="9:31" pos:end="9:42"><name pos:start="9:31" pos:end="9:36">struct</name> <name pos:start="9:38" pos:end="9:42">hwdef</name></name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:49">hwdef</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="215:1">{<block_content pos:start="13:5" pos:end="213:52">

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">m48t59_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:19">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">long</name></type> <name pos:start="19:10" pos:end="19:20">initrd_size</name></decl>, <decl pos:start="19:23" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:8"/><name pos:start="19:23" pos:end="19:33">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:42"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">PCIBus</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:19">pci_bus</name></decl>, <decl pos:start="21:22" pos:end="21:30"><type ref="prev" pos:start="21:5" pos:end="21:12"><modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:30">pci_bus2</name></decl>, <decl pos:start="21:33" pos:end="21:41"><type ref="prev" pos:start="21:5" pos:end="21:12"><modifier pos:start="21:33" pos:end="21:33">*</modifier></type><name pos:start="21:34" pos:end="21:41">pci_bus3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:17">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:46"><decl pos:start="25:5" pos:end="25:45"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">DriveInfo</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:45"><name pos:start="25:16" pos:end="25:17">hd</name><index pos:start="25:18" pos:end="25:45">[<expr pos:start="25:19" pos:end="25:44"><name pos:start="25:19" pos:end="25:29">MAX_IDE_BUS</name> <operator pos:start="25:31" pos:end="25:31">*</operator> <name pos:start="25:33" pos:end="25:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">DriveInfo</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:25"><name pos:start="27:16" pos:end="27:17">fd</name><index pos:start="27:18" pos:end="27:25">[<expr pos:start="27:19" pos:end="27:24"><name pos:start="27:19" pos:end="27:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:17"><decl pos:start="29:5" pos:end="29:16"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:8">void</name> <modifier pos:start="29:10" pos:end="29:10">*</modifier></type><name pos:start="29:11" pos:end="29:16">fw_cfg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:19">/* init CPUs */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:7">env</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:39"><name pos:start="35:11" pos:end="35:21">cpu_devinit</name><argument_list pos:start="35:22" pos:end="35:39">(<argument pos:start="35:23" pos:end="35:31"><expr pos:start="35:23" pos:end="35:31"><name pos:start="35:23" pos:end="35:31">cpu_model</name></expr></argument>, <argument pos:start="35:34" pos:end="35:38"><expr pos:start="35:34" pos:end="35:38"><name pos:start="35:34" pos:end="35:38">hwdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:24">/* set up devices */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><call pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:12">ram_init</name><argument_list pos:start="41:13" pos:end="41:25">(<argument pos:start="41:14" pos:end="41:14"><expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr></argument>, <argument pos:start="41:17" pos:end="41:24"><expr pos:start="41:17" pos:end="41:24"><name pos:start="41:17" pos:end="41:24">RAM_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><call pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:13">prom_init</name><argument_list pos:start="45:14" pos:end="45:42">(<argument pos:start="45:15" pos:end="45:30"><expr pos:start="45:15" pos:end="45:30"><name pos:start="45:15" pos:end="45:30"><name pos:start="45:15" pos:end="45:19">hwdef</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:30">prom_addr</name></name></expr></argument>, <argument pos:start="45:33" pos:end="45:41"><expr pos:start="45:33" pos:end="45:41"><name pos:start="45:33" pos:end="45:41">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="51:5" pos:end="51:57"><expr pos:start="51:5" pos:end="51:56"><name pos:start="51:5" pos:end="51:7">irq</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:56"><name pos:start="51:11" pos:end="51:28">qemu_allocate_irqs</name><argument_list pos:start="51:29" pos:end="51:56">(<argument pos:start="51:30" pos:end="51:40"><expr pos:start="51:30" pos:end="51:40"><name pos:start="51:30" pos:end="51:40">cpu_set_irq</name></expr></argument>, <argument pos:start="51:43" pos:end="51:45"><expr pos:start="51:43" pos:end="51:45"><name pos:start="51:43" pos:end="51:45">env</name></expr></argument>, <argument pos:start="51:48" pos:end="51:55"><expr pos:start="51:48" pos:end="51:55"><name pos:start="51:48" pos:end="51:55">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="55:38"><expr pos:start="53:5" pos:end="55:37"><name pos:start="53:5" pos:end="53:11">pci_bus</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="55:37"><name pos:start="53:15" pos:end="53:26">pci_apb_init</name><argument_list pos:start="53:27" pos:end="55:37">(<argument pos:start="53:28" pos:end="53:43"><expr pos:start="53:28" pos:end="53:43"><name pos:start="53:28" pos:end="53:43">APB_SPECIAL_BASE</name></expr></argument>, <argument pos:start="53:46" pos:end="53:57"><expr pos:start="53:46" pos:end="53:57"><name pos:start="53:46" pos:end="53:57">APB_MEM_BASE</name></expr></argument>, <argument pos:start="53:60" pos:end="53:62"><expr pos:start="53:60" pos:end="53:62"><name pos:start="53:60" pos:end="53:62">irq</name></expr></argument>, <argument pos:start="53:65" pos:end="53:73"><expr pos:start="53:65" pos:end="53:73"><operator pos:start="53:65" pos:end="53:65">&amp;</operator><name pos:start="53:66" pos:end="53:73">pci_bus2</name></expr></argument>,

                           <argument pos:start="55:28" pos:end="55:36"><expr pos:start="55:28" pos:end="55:36"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:36">pci_bus3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:16">isa_mem_base</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:27">VGA_BASE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:32"><expr pos:start="59:5" pos:end="59:31"><call pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:16">pci_vga_init</name><argument_list pos:start="59:17" pos:end="59:31">(<argument pos:start="59:18" pos:end="59:24"><expr pos:start="59:18" pos:end="59:24"><name pos:start="59:18" pos:end="59:24">pci_bus</name></expr></argument>, <argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr></argument>, <argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><literal type="number" pos:start="59:30" pos:end="59:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="63:5" pos:end="63:29">// XXX Should be pci_bus3</comment>

    <expr_stmt pos:start="65:5" pos:end="65:31"><expr pos:start="65:5" pos:end="65:30"><call pos:start="65:5" pos:end="65:30"><name pos:start="65:5" pos:end="65:17">pci_ebus_init</name><argument_list pos:start="65:18" pos:end="65:30">(<argument pos:start="65:19" pos:end="65:25"><expr pos:start="65:19" pos:end="65:25"><name pos:start="65:19" pos:end="65:25">pci_bus</name></expr></argument>, <argument pos:start="65:28" pos:end="65:29"><expr pos:start="65:28" pos:end="65:29"><operator pos:start="65:28" pos:end="65:28">-</operator><literal type="number" pos:start="65:29" pos:end="65:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:10"><expr pos:start="69:5" pos:end="69:9"><name pos:start="69:5" pos:end="69:5">i</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <literal type="number" pos:start="69:9" pos:end="69:9">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:35">(<expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:13">hwdef</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:34">console_serial_base</name></name></expr>)</condition> <block pos:start="71:37" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:12">

        <expr_stmt pos:start="73:9" pos:end="75:41"><expr pos:start="73:9" pos:end="75:40"><call pos:start="73:9" pos:end="75:40"><name pos:start="73:9" pos:end="73:22">serial_mm_init</name><argument_list pos:start="73:23" pos:end="75:40">(<argument pos:start="73:24" pos:end="73:49"><expr pos:start="73:24" pos:end="73:49"><name pos:start="73:24" pos:end="73:49"><name pos:start="73:24" pos:end="73:28">hwdef</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:49">console_serial_base</name></name></expr></argument>, <argument pos:start="73:52" pos:end="73:52"><expr pos:start="73:52" pos:end="73:52"><literal type="number" pos:start="73:52" pos:end="73:52">0</literal></expr></argument>, <argument pos:start="73:55" pos:end="73:58"><expr pos:start="73:55" pos:end="73:58"><name pos:start="73:55" pos:end="73:58">NULL</name></expr></argument>, <argument pos:start="73:61" pos:end="73:66"><expr pos:start="73:61" pos:end="73:66"><literal type="number" pos:start="73:61" pos:end="73:66">115200</literal></expr></argument>,

                       <argument pos:start="75:24" pos:end="75:36"><expr pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:33">serial_hds</name><index pos:start="75:34" pos:end="75:36">[<expr pos:start="75:35" pos:end="75:35"><name pos:start="75:35" pos:end="75:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:12"><expr pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:9">i</name><operator pos:start="77:10" pos:end="77:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="81:5" pos:end="89:5">for<control pos:start="81:8" pos:end="81:36">(<init pos:start="81:9" pos:end="81:9">;</init> <condition pos:start="81:11" pos:end="81:31"><expr pos:start="81:11" pos:end="81:30"><name pos:start="81:11" pos:end="81:11">i</name> <operator pos:start="81:13" pos:end="81:13">&lt;</operator> <name pos:start="81:15" pos:end="81:30">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="81:33" pos:end="81:35"><expr pos:start="81:33" pos:end="81:35"><name pos:start="81:33" pos:end="81:33">i</name><operator pos:start="81:34" pos:end="81:35">++</operator></expr></incr>)</control> <block pos:start="81:38" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:9">

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:26">(<expr pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:22">serial_hds</name><index pos:start="83:23" pos:end="83:25">[<expr pos:start="83:24" pos:end="83:24"><name pos:start="83:24" pos:end="83:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="83:28" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:46">

            <expr_stmt pos:start="85:13" pos:end="85:46"><expr pos:start="85:13" pos:end="85:45"><call pos:start="85:13" pos:end="85:45"><name pos:start="85:13" pos:end="85:27">serial_isa_init</name><argument_list pos:start="85:28" pos:end="85:45">(<argument pos:start="85:29" pos:end="85:29"><expr pos:start="85:29" pos:end="85:29"><name pos:start="85:29" pos:end="85:29">i</name></expr></argument>, <argument pos:start="85:32" pos:end="85:44"><expr pos:start="85:32" pos:end="85:44"><name pos:start="85:32" pos:end="85:44"><name pos:start="85:32" pos:end="85:41">serial_hds</name><index pos:start="85:42" pos:end="85:44">[<expr pos:start="85:43" pos:end="85:43"><name pos:start="85:43" pos:end="85:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="93:5" pos:end="101:5">for<control pos:start="93:8" pos:end="93:43">(<init pos:start="93:9" pos:end="93:14"><expr pos:start="93:9" pos:end="93:13"><name pos:start="93:9" pos:end="93:9">i</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <literal type="number" pos:start="93:13" pos:end="93:13">0</literal></expr>;</init> <condition pos:start="93:16" pos:end="93:38"><expr pos:start="93:16" pos:end="93:37"><name pos:start="93:16" pos:end="93:16">i</name> <operator pos:start="93:18" pos:end="93:18">&lt;</operator> <name pos:start="93:20" pos:end="93:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="93:40" pos:end="93:42"><expr pos:start="93:40" pos:end="93:42"><name pos:start="93:40" pos:end="93:40">i</name><operator pos:start="93:41" pos:end="93:42">++</operator></expr></incr>)</control> <block pos:start="93:45" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:9">

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:28">(<expr pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:24">parallel_hds</name><index pos:start="95:25" pos:end="95:27">[<expr pos:start="95:26" pos:end="95:26"><name pos:start="95:26" pos:end="95:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="95:30" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:46">

            <expr_stmt pos:start="97:13" pos:end="97:46"><expr pos:start="97:13" pos:end="97:45"><call pos:start="97:13" pos:end="97:45"><name pos:start="97:13" pos:end="97:25">parallel_init</name><argument_list pos:start="97:26" pos:end="97:45">(<argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><name pos:start="97:27" pos:end="97:27">i</name></expr></argument>, <argument pos:start="97:30" pos:end="97:44"><expr pos:start="97:30" pos:end="97:44"><name pos:start="97:30" pos:end="97:44"><name pos:start="97:30" pos:end="97:41">parallel_hds</name><index pos:start="97:42" pos:end="97:44">[<expr pos:start="97:43" pos:end="97:43"><name pos:start="97:43" pos:end="97:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="105:5" pos:end="107:53">for<control pos:start="105:8" pos:end="105:32">(<init pos:start="105:9" pos:end="105:14"><expr pos:start="105:9" pos:end="105:13"><name pos:start="105:9" pos:end="105:9">i</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <literal type="number" pos:start="105:13" pos:end="105:13">0</literal></expr>;</init> <condition pos:start="105:16" pos:end="105:27"><expr pos:start="105:16" pos:end="105:26"><name pos:start="105:16" pos:end="105:16">i</name> <operator pos:start="105:18" pos:end="105:18">&lt;</operator> <name pos:start="105:20" pos:end="105:26">nb_nics</name></expr>;</condition> <incr pos:start="105:29" pos:end="105:31"><expr pos:start="105:29" pos:end="105:31"><name pos:start="105:29" pos:end="105:29">i</name><operator pos:start="105:30" pos:end="105:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="107:9" pos:end="107:53"><block_content pos:start="107:9" pos:end="107:53">

        <expr_stmt pos:start="107:9" pos:end="107:53"><expr pos:start="107:9" pos:end="107:52"><call pos:start="107:9" pos:end="107:52"><name pos:start="107:9" pos:end="107:20">pci_nic_init</name><argument_list pos:start="107:21" pos:end="107:52">(<argument pos:start="107:22" pos:end="107:33"><expr pos:start="107:22" pos:end="107:33"><operator pos:start="107:22" pos:end="107:22">&amp;</operator><name pos:start="107:23" pos:end="107:33"><name pos:start="107:23" pos:end="107:30">nd_table</name><index pos:start="107:31" pos:end="107:33">[<expr pos:start="107:32" pos:end="107:32"><name pos:start="107:32" pos:end="107:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="107:36" pos:end="107:45"><expr pos:start="107:36" pos:end="107:45"><literal type="string" pos:start="107:36" pos:end="107:45">"ne2k_pci"</literal></expr></argument>, <argument pos:start="107:48" pos:end="107:51"><expr pos:start="107:48" pos:end="107:51"><name pos:start="107:48" pos:end="107:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:49">(<expr pos:start="111:9" pos:end="111:48"><call pos:start="111:9" pos:end="111:33"><name pos:start="111:9" pos:end="111:25">drive_get_max_bus</name><argument_list pos:start="111:26" pos:end="111:33">(<argument pos:start="111:27" pos:end="111:32"><expr pos:start="111:27" pos:end="111:32"><name pos:start="111:27" pos:end="111:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="111:35" pos:end="111:36">&gt;=</operator> <name pos:start="111:38" pos:end="111:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="111:51" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:16">

        <expr_stmt pos:start="113:9" pos:end="113:52"><expr pos:start="113:9" pos:end="113:51"><call pos:start="113:9" pos:end="113:51"><name pos:start="113:9" pos:end="113:15">fprintf</name><argument_list pos:start="113:16" pos:end="113:51">(<argument pos:start="113:17" pos:end="113:22"><expr pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:22">stderr</name></expr></argument>, <argument pos:start="113:25" pos:end="113:50"><expr pos:start="113:25" pos:end="113:50"><literal type="string" pos:start="113:25" pos:end="113:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:16"><expr pos:start="115:9" pos:end="115:15"><call pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:12">exit</name><argument_list pos:start="115:13" pos:end="115:15">(<argument pos:start="115:14" pos:end="115:14"><expr pos:start="115:14" pos:end="115:14"><literal type="number" pos:start="115:14" pos:end="115:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="119:5" pos:end="125:5">for<control pos:start="119:8" pos:end="119:51">(<init pos:start="119:9" pos:end="119:14"><expr pos:start="119:9" pos:end="119:13"><name pos:start="119:9" pos:end="119:9">i</name> <operator pos:start="119:11" pos:end="119:11">=</operator> <literal type="number" pos:start="119:13" pos:end="119:13">0</literal></expr>;</init> <condition pos:start="119:16" pos:end="119:46"><expr pos:start="119:16" pos:end="119:45"><name pos:start="119:16" pos:end="119:16">i</name> <operator pos:start="119:18" pos:end="119:18">&lt;</operator> <name pos:start="119:20" pos:end="119:30">MAX_IDE_BUS</name> <operator pos:start="119:32" pos:end="119:32">*</operator> <name pos:start="119:34" pos:end="119:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="119:48" pos:end="119:50"><expr pos:start="119:48" pos:end="119:50"><name pos:start="119:48" pos:end="119:48">i</name><operator pos:start="119:49" pos:end="119:50">++</operator></expr></incr>)</control> <block pos:start="119:53" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:44">

        <expr_stmt pos:start="121:9" pos:end="123:44"><expr pos:start="121:9" pos:end="123:43"><name pos:start="121:9" pos:end="121:13"><name pos:start="121:9" pos:end="121:10">hd</name><index pos:start="121:11" pos:end="121:13">[<expr pos:start="121:12" pos:end="121:12"><name pos:start="121:12" pos:end="121:12">i</name></expr>]</index></name> <operator pos:start="121:15" pos:end="121:15">=</operator> <call pos:start="121:17" pos:end="123:43"><name pos:start="121:17" pos:end="121:25">drive_get</name><argument_list pos:start="121:26" pos:end="123:43">(<argument pos:start="121:27" pos:end="121:32"><expr pos:start="121:27" pos:end="121:32"><name pos:start="121:27" pos:end="121:32">IF_IDE</name></expr></argument>, <argument pos:start="121:35" pos:end="121:50"><expr pos:start="121:35" pos:end="121:50"><name pos:start="121:35" pos:end="121:35">i</name> <operator pos:start="121:37" pos:end="121:37">/</operator> <name pos:start="121:39" pos:end="121:50">MAX_IDE_DEVS</name></expr></argument>,

                          <argument pos:start="123:27" pos:end="123:42"><expr pos:start="123:27" pos:end="123:42"><name pos:start="123:27" pos:end="123:27">i</name> <operator pos:start="123:29" pos:end="123:29">%</operator> <name pos:start="123:31" pos:end="123:42">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="129:5" pos:end="129:40"><expr pos:start="129:5" pos:end="129:39"><call pos:start="129:5" pos:end="129:39"><name pos:start="129:5" pos:end="129:23">pci_cmd646_ide_init</name><argument_list pos:start="129:24" pos:end="129:39">(<argument pos:start="129:25" pos:end="129:31"><expr pos:start="129:25" pos:end="129:31"><name pos:start="129:25" pos:end="129:31">pci_bus</name></expr></argument>, <argument pos:start="129:34" pos:end="129:35"><expr pos:start="129:34" pos:end="129:35"><name pos:start="129:34" pos:end="129:35">hd</name></expr></argument>, <argument pos:start="129:38" pos:end="129:38"><expr pos:start="129:38" pos:end="129:38"><literal type="number" pos:start="129:38" pos:end="129:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:31"><expr pos:start="133:5" pos:end="133:30"><call pos:start="133:5" pos:end="133:30"><name pos:start="133:5" pos:end="133:21">isa_create_simple</name><argument_list pos:start="133:22" pos:end="133:30">(<argument pos:start="133:23" pos:end="133:29"><expr pos:start="133:23" pos:end="133:29"><literal type="string" pos:start="133:23" pos:end="133:29">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="135:5" pos:end="139:5">for<control pos:start="135:8" pos:end="135:31">(<init pos:start="135:9" pos:end="135:14"><expr pos:start="135:9" pos:end="135:13"><name pos:start="135:9" pos:end="135:9">i</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <literal type="number" pos:start="135:13" pos:end="135:13">0</literal></expr>;</init> <condition pos:start="135:16" pos:end="135:26"><expr pos:start="135:16" pos:end="135:25"><name pos:start="135:16" pos:end="135:16">i</name> <operator pos:start="135:18" pos:end="135:18">&lt;</operator> <name pos:start="135:20" pos:end="135:25">MAX_FD</name></expr>;</condition> <incr pos:start="135:28" pos:end="135:30"><expr pos:start="135:28" pos:end="135:30"><name pos:start="135:28" pos:end="135:28">i</name><operator pos:start="135:29" pos:end="135:30">++</operator></expr></incr>)</control> <block pos:start="135:33" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:43">

        <expr_stmt pos:start="137:9" pos:end="137:43"><expr pos:start="137:9" pos:end="137:42"><name pos:start="137:9" pos:end="137:13"><name pos:start="137:9" pos:end="137:10">fd</name><index pos:start="137:11" pos:end="137:13">[<expr pos:start="137:12" pos:end="137:12"><name pos:start="137:12" pos:end="137:12">i</name></expr>]</index></name> <operator pos:start="137:15" pos:end="137:15">=</operator> <call pos:start="137:17" pos:end="137:42"><name pos:start="137:17" pos:end="137:25">drive_get</name><argument_list pos:start="137:26" pos:end="137:42">(<argument pos:start="137:27" pos:end="137:35"><expr pos:start="137:27" pos:end="137:35"><name pos:start="137:27" pos:end="137:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="137:38" pos:end="137:38"><expr pos:start="137:38" pos:end="137:38"><literal type="number" pos:start="137:38" pos:end="137:38">0</literal></expr></argument>, <argument pos:start="137:41" pos:end="137:41"><expr pos:start="137:41" pos:end="137:41"><name pos:start="137:41" pos:end="137:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="141:5" pos:end="141:24"><expr pos:start="141:5" pos:end="141:23"><call pos:start="141:5" pos:end="141:23"><name pos:start="141:5" pos:end="141:19">fdctrl_init_isa</name><argument_list pos:start="141:20" pos:end="141:23">(<argument pos:start="141:21" pos:end="141:22"><expr pos:start="141:21" pos:end="141:22"><name pos:start="141:21" pos:end="141:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:52"><expr pos:start="143:5" pos:end="143:51"><name pos:start="143:5" pos:end="143:9">nvram</name> <operator pos:start="143:11" pos:end="143:11">=</operator> <call pos:start="143:13" pos:end="143:51"><name pos:start="143:13" pos:end="143:27">m48t59_init_isa</name><argument_list pos:start="143:28" pos:end="143:51">(<argument pos:start="143:29" pos:end="143:34"><expr pos:start="143:29" pos:end="143:34"><literal type="number" pos:start="143:29" pos:end="143:34">0x0074</literal></expr></argument>, <argument pos:start="143:37" pos:end="143:46"><expr pos:start="143:37" pos:end="143:46"><name pos:start="143:37" pos:end="143:46">NVRAM_SIZE</name></expr></argument>, <argument pos:start="143:49" pos:end="143:50"><expr pos:start="143:49" pos:end="143:50"><literal type="number" pos:start="143:49" pos:end="143:50">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:20"><expr pos:start="147:5" pos:end="147:19"><name pos:start="147:5" pos:end="147:15">initrd_size</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="151:60"><expr pos:start="149:5" pos:end="151:59"><name pos:start="149:5" pos:end="149:15">kernel_size</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="151:59"><name pos:start="149:19" pos:end="149:35">sun4u_load_kernel</name><argument_list pos:start="149:36" pos:end="151:59">(<argument pos:start="149:37" pos:end="149:51"><expr pos:start="149:37" pos:end="149:51"><name pos:start="149:37" pos:end="149:51">kernel_filename</name></expr></argument>, <argument pos:start="149:54" pos:end="149:68"><expr pos:start="149:54" pos:end="149:68"><name pos:start="149:54" pos:end="149:68">initrd_filename</name></expr></argument>,

                                    <argument pos:start="151:37" pos:end="151:44"><expr pos:start="151:37" pos:end="151:44"><name pos:start="151:37" pos:end="151:44">ram_size</name></expr></argument>, <argument pos:start="151:47" pos:end="151:58"><expr pos:start="151:47" pos:end="151:58"><operator pos:start="151:47" pos:end="151:47">&amp;</operator><name pos:start="151:48" pos:end="151:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="169:60"><expr pos:start="155:5" pos:end="169:59"><call pos:start="155:5" pos:end="169:59"><name pos:start="155:5" pos:end="155:26">sun4u_NVRAM_set_params</name><argument_list pos:start="155:27" pos:end="169:59">(<argument pos:start="155:28" pos:end="155:32"><expr pos:start="155:28" pos:end="155:32"><name pos:start="155:28" pos:end="155:32">nvram</name></expr></argument>, <argument pos:start="155:35" pos:end="155:44"><expr pos:start="155:35" pos:end="155:44"><name pos:start="155:35" pos:end="155:44">NVRAM_SIZE</name></expr></argument>, <argument pos:start="155:47" pos:end="155:53"><expr pos:start="155:47" pos:end="155:53"><literal type="string" pos:start="155:47" pos:end="155:53">"Sun4u"</literal></expr></argument>, <argument pos:start="155:56" pos:end="155:63"><expr pos:start="155:56" pos:end="155:63"><name pos:start="155:56" pos:end="155:63">RAM_size</name></expr></argument>, <argument pos:start="155:66" pos:end="155:77"><expr pos:start="155:66" pos:end="155:77"><name pos:start="155:66" pos:end="155:77">boot_devices</name></expr></argument>,

                           <argument pos:start="157:28" pos:end="157:43"><expr pos:start="157:28" pos:end="157:43"><name pos:start="157:28" pos:end="157:43">KERNEL_LOAD_ADDR</name></expr></argument>, <argument pos:start="157:46" pos:end="157:56"><expr pos:start="157:46" pos:end="157:56"><name pos:start="157:46" pos:end="157:56">kernel_size</name></expr></argument>,

                           <argument pos:start="159:28" pos:end="159:41"><expr pos:start="159:28" pos:end="159:41"><name pos:start="159:28" pos:end="159:41">kernel_cmdline</name></expr></argument>,

                           <argument pos:start="161:28" pos:end="161:43"><expr pos:start="161:28" pos:end="161:43"><name pos:start="161:28" pos:end="161:43">INITRD_LOAD_ADDR</name></expr></argument>, <argument pos:start="161:46" pos:end="161:56"><expr pos:start="161:46" pos:end="161:56"><name pos:start="161:46" pos:end="161:56">initrd_size</name></expr></argument>,

                           <comment type="block" pos:start="163:28" pos:end="163:74">/* XXX: need an option to load a NVRAM image */</comment>

                           <argument pos:start="165:28" pos:end="165:28"><expr pos:start="165:28" pos:end="165:28"><literal type="number" pos:start="165:28" pos:end="165:28">0</literal></expr></argument>,

                           <argument pos:start="167:28" pos:end="167:40"><expr pos:start="167:28" pos:end="167:40"><name pos:start="167:28" pos:end="167:40">graphic_width</name></expr></argument>, <argument pos:start="167:43" pos:end="167:56"><expr pos:start="167:43" pos:end="167:56"><name pos:start="167:43" pos:end="167:56">graphic_height</name></expr></argument>, <argument pos:start="167:59" pos:end="167:71"><expr pos:start="167:59" pos:end="167:71"><name pos:start="167:59" pos:end="167:71">graphic_depth</name></expr></argument>,

                           <argument pos:start="169:28" pos:end="169:58"><expr pos:start="169:28" pos:end="169:58"><operator pos:start="169:28" pos:end="169:28">(</operator><name pos:start="169:29" pos:end="169:35">uint8_t</name> <operator pos:start="169:37" pos:end="169:37">*</operator><operator pos:start="169:38" pos:end="169:38">)</operator><operator pos:start="169:39" pos:end="169:39">&amp;</operator><name pos:start="169:40" pos:end="169:50"><name pos:start="169:40" pos:end="169:47">nd_table</name><index pos:start="169:48" pos:end="169:50">[<expr pos:start="169:49" pos:end="169:49"><literal type="number" pos:start="169:49" pos:end="169:49">0</literal></expr>]</index></name><operator pos:start="169:51" pos:end="169:51">.</operator><name pos:start="169:52" pos:end="169:58">macaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:69"><expr pos:start="173:5" pos:end="173:68"><name pos:start="173:5" pos:end="173:10">fw_cfg</name> <operator pos:start="173:12" pos:end="173:12">=</operator> <call pos:start="173:14" pos:end="173:68"><name pos:start="173:14" pos:end="173:24">fw_cfg_init</name><argument_list pos:start="173:25" pos:end="173:68">(<argument pos:start="173:26" pos:end="173:40"><expr pos:start="173:26" pos:end="173:40"><name pos:start="173:26" pos:end="173:40">BIOS_CFG_IOPORT</name></expr></argument>, <argument pos:start="173:43" pos:end="173:61"><expr pos:start="173:43" pos:end="173:61"><name pos:start="173:43" pos:end="173:57">BIOS_CFG_IOPORT</name> <operator pos:start="173:59" pos:end="173:59">+</operator> <literal type="number" pos:start="173:61" pos:end="173:61">1</literal></expr></argument>, <argument pos:start="173:64" pos:end="173:64"><expr pos:start="173:64" pos:end="173:64"><literal type="number" pos:start="173:64" pos:end="173:64">0</literal></expr></argument>, <argument pos:start="173:67" pos:end="173:67"><expr pos:start="173:67" pos:end="173:67"><literal type="number" pos:start="173:67" pos:end="173:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:41"><expr pos:start="175:5" pos:end="175:40"><call pos:start="175:5" pos:end="175:40"><name pos:start="175:5" pos:end="175:18">fw_cfg_add_i32</name><argument_list pos:start="175:19" pos:end="175:40">(<argument pos:start="175:20" pos:end="175:25"><expr pos:start="175:20" pos:end="175:25"><name pos:start="175:20" pos:end="175:25">fw_cfg</name></expr></argument>, <argument pos:start="175:28" pos:end="175:36"><expr pos:start="175:28" pos:end="175:36"><name pos:start="175:28" pos:end="175:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="175:39" pos:end="175:39"><expr pos:start="175:39" pos:end="175:39"><literal type="number" pos:start="175:39" pos:end="175:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:64"><expr pos:start="177:5" pos:end="177:63"><call pos:start="177:5" pos:end="177:63"><name pos:start="177:5" pos:end="177:18">fw_cfg_add_i64</name><argument_list pos:start="177:19" pos:end="177:63">(<argument pos:start="177:20" pos:end="177:25"><expr pos:start="177:20" pos:end="177:25"><name pos:start="177:20" pos:end="177:25">fw_cfg</name></expr></argument>, <argument pos:start="177:28" pos:end="177:42"><expr pos:start="177:28" pos:end="177:42"><name pos:start="177:28" pos:end="177:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="177:45" pos:end="177:62"><expr pos:start="177:45" pos:end="177:62"><operator pos:start="177:45" pos:end="177:45">(</operator><name pos:start="177:46" pos:end="177:53">uint64_t</name><operator pos:start="177:54" pos:end="177:54">)</operator><name pos:start="177:55" pos:end="177:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:65"><expr pos:start="179:5" pos:end="179:64"><call pos:start="179:5" pos:end="179:64"><name pos:start="179:5" pos:end="179:18">fw_cfg_add_i16</name><argument_list pos:start="179:19" pos:end="179:64">(<argument pos:start="179:20" pos:end="179:25"><expr pos:start="179:20" pos:end="179:25"><name pos:start="179:20" pos:end="179:25">fw_cfg</name></expr></argument>, <argument pos:start="179:28" pos:end="179:44"><expr pos:start="179:28" pos:end="179:44"><name pos:start="179:28" pos:end="179:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="179:47" pos:end="179:63"><expr pos:start="179:47" pos:end="179:63"><name pos:start="179:47" pos:end="179:63"><name pos:start="179:47" pos:end="179:51">hwdef</name><operator pos:start="179:52" pos:end="179:53">-&gt;</operator><name pos:start="179:54" pos:end="179:63">machine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:65"><expr pos:start="181:5" pos:end="181:64"><call pos:start="181:5" pos:end="181:64"><name pos:start="181:5" pos:end="181:18">fw_cfg_add_i32</name><argument_list pos:start="181:19" pos:end="181:64">(<argument pos:start="181:20" pos:end="181:25"><expr pos:start="181:20" pos:end="181:25"><name pos:start="181:20" pos:end="181:25">fw_cfg</name></expr></argument>, <argument pos:start="181:28" pos:end="181:45"><expr pos:start="181:28" pos:end="181:45"><name pos:start="181:28" pos:end="181:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="181:48" pos:end="181:63"><expr pos:start="181:48" pos:end="181:63"><name pos:start="181:48" pos:end="181:63">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:60"><expr pos:start="183:5" pos:end="183:59"><call pos:start="183:5" pos:end="183:59"><name pos:start="183:5" pos:end="183:18">fw_cfg_add_i32</name><argument_list pos:start="183:19" pos:end="183:59">(<argument pos:start="183:20" pos:end="183:25"><expr pos:start="183:20" pos:end="183:25"><name pos:start="183:20" pos:end="183:25">fw_cfg</name></expr></argument>, <argument pos:start="183:28" pos:end="183:45"><expr pos:start="183:28" pos:end="183:45"><name pos:start="183:28" pos:end="183:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="183:48" pos:end="183:58"><expr pos:start="183:48" pos:end="183:58"><name pos:start="183:48" pos:end="183:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="195:5"><if pos:start="185:5" pos:end="191:5">if <condition pos:start="185:8" pos:end="185:23">(<expr pos:start="185:9" pos:end="185:22"><name pos:start="185:9" pos:end="185:22">kernel_cmdline</name></expr>)</condition> <block pos:start="185:25" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:73">

        <expr_stmt pos:start="187:9" pos:end="187:68"><expr pos:start="187:9" pos:end="187:67"><call pos:start="187:9" pos:end="187:67"><name pos:start="187:9" pos:end="187:22">fw_cfg_add_i32</name><argument_list pos:start="187:23" pos:end="187:67">(<argument pos:start="187:24" pos:end="187:29"><expr pos:start="187:24" pos:end="187:29"><name pos:start="187:24" pos:end="187:29">fw_cfg</name></expr></argument>, <argument pos:start="187:32" pos:end="187:52"><expr pos:start="187:32" pos:end="187:52"><name pos:start="187:32" pos:end="187:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="187:55" pos:end="187:66"><expr pos:start="187:55" pos:end="187:66"><name pos:start="187:55" pos:end="187:66">CMDLINE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:73"><expr pos:start="189:9" pos:end="189:72"><call pos:start="189:9" pos:end="189:72"><name pos:start="189:9" pos:end="189:24">pstrcpy_targphys</name><argument_list pos:start="189:25" pos:end="189:72">(<argument pos:start="189:26" pos:end="189:37"><expr pos:start="189:26" pos:end="189:37"><name pos:start="189:26" pos:end="189:37">CMDLINE_ADDR</name></expr></argument>, <argument pos:start="189:40" pos:end="189:55"><expr pos:start="189:40" pos:end="189:55"><name pos:start="189:40" pos:end="189:55">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="189:58" pos:end="189:71"><expr pos:start="189:58" pos:end="189:71"><name pos:start="189:58" pos:end="189:71">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="191:7" pos:end="195:5">else <block pos:start="191:12" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:57">

        <expr_stmt pos:start="193:9" pos:end="193:57"><expr pos:start="193:9" pos:end="193:56"><call pos:start="193:9" pos:end="193:56"><name pos:start="193:9" pos:end="193:22">fw_cfg_add_i32</name><argument_list pos:start="193:23" pos:end="193:56">(<argument pos:start="193:24" pos:end="193:29"><expr pos:start="193:24" pos:end="193:29"><name pos:start="193:24" pos:end="193:29">fw_cfg</name></expr></argument>, <argument pos:start="193:32" pos:end="193:52"><expr pos:start="193:32" pos:end="193:52"><name pos:start="193:32" pos:end="193:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="193:55" pos:end="193:55"><expr pos:start="193:55" pos:end="193:55"><literal type="number" pos:start="193:55" pos:end="193:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:65"><expr pos:start="197:5" pos:end="197:64"><call pos:start="197:5" pos:end="197:64"><name pos:start="197:5" pos:end="197:18">fw_cfg_add_i32</name><argument_list pos:start="197:19" pos:end="197:64">(<argument pos:start="197:20" pos:end="197:25"><expr pos:start="197:20" pos:end="197:25"><name pos:start="197:20" pos:end="197:25">fw_cfg</name></expr></argument>, <argument pos:start="197:28" pos:end="197:45"><expr pos:start="197:28" pos:end="197:45"><name pos:start="197:28" pos:end="197:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="197:48" pos:end="197:63"><expr pos:start="197:48" pos:end="197:63"><name pos:start="197:48" pos:end="197:63">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:60"><expr pos:start="199:5" pos:end="199:59"><call pos:start="199:5" pos:end="199:59"><name pos:start="199:5" pos:end="199:18">fw_cfg_add_i32</name><argument_list pos:start="199:19" pos:end="199:59">(<argument pos:start="199:20" pos:end="199:25"><expr pos:start="199:20" pos:end="199:25"><name pos:start="199:20" pos:end="199:25">fw_cfg</name></expr></argument>, <argument pos:start="199:28" pos:end="199:45"><expr pos:start="199:28" pos:end="199:45"><name pos:start="199:28" pos:end="199:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="199:48" pos:end="199:58"><expr pos:start="199:48" pos:end="199:58"><name pos:start="199:48" pos:end="199:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:64"><expr pos:start="201:5" pos:end="201:63"><call pos:start="201:5" pos:end="201:63"><name pos:start="201:5" pos:end="201:18">fw_cfg_add_i16</name><argument_list pos:start="201:19" pos:end="201:63">(<argument pos:start="201:20" pos:end="201:25"><expr pos:start="201:20" pos:end="201:25"><name pos:start="201:20" pos:end="201:25">fw_cfg</name></expr></argument>, <argument pos:start="201:28" pos:end="201:45"><expr pos:start="201:28" pos:end="201:45"><name pos:start="201:28" pos:end="201:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="201:48" pos:end="201:62"><expr pos:start="201:48" pos:end="201:62"><name pos:start="201:48" pos:end="201:62"><name pos:start="201:48" pos:end="201:59">boot_devices</name><index pos:start="201:60" pos:end="201:62">[<expr pos:start="201:61" pos:end="201:61"><literal type="number" pos:start="201:61" pos:end="201:61">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:64"><expr pos:start="205:5" pos:end="205:63"><call pos:start="205:5" pos:end="205:63"><name pos:start="205:5" pos:end="205:18">fw_cfg_add_i16</name><argument_list pos:start="205:19" pos:end="205:63">(<argument pos:start="205:20" pos:end="205:25"><expr pos:start="205:20" pos:end="205:25"><name pos:start="205:20" pos:end="205:25">fw_cfg</name></expr></argument>, <argument pos:start="205:28" pos:end="205:47"><expr pos:start="205:28" pos:end="205:47"><name pos:start="205:28" pos:end="205:47">FW_CFG_SPARC64_WIDTH</name></expr></argument>, <argument pos:start="205:50" pos:end="205:62"><expr pos:start="205:50" pos:end="205:62"><name pos:start="205:50" pos:end="205:62">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:66"><expr pos:start="207:5" pos:end="207:65"><call pos:start="207:5" pos:end="207:65"><name pos:start="207:5" pos:end="207:18">fw_cfg_add_i16</name><argument_list pos:start="207:19" pos:end="207:65">(<argument pos:start="207:20" pos:end="207:25"><expr pos:start="207:20" pos:end="207:25"><name pos:start="207:20" pos:end="207:25">fw_cfg</name></expr></argument>, <argument pos:start="207:28" pos:end="207:48"><expr pos:start="207:28" pos:end="207:48"><name pos:start="207:28" pos:end="207:48">FW_CFG_SPARC64_HEIGHT</name></expr></argument>, <argument pos:start="207:51" pos:end="207:64"><expr pos:start="207:51" pos:end="207:64"><name pos:start="207:51" pos:end="207:64">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:64"><expr pos:start="209:5" pos:end="209:63"><call pos:start="209:5" pos:end="209:63"><name pos:start="209:5" pos:end="209:18">fw_cfg_add_i16</name><argument_list pos:start="209:19" pos:end="209:63">(<argument pos:start="209:20" pos:end="209:25"><expr pos:start="209:20" pos:end="209:25"><name pos:start="209:20" pos:end="209:25">fw_cfg</name></expr></argument>, <argument pos:start="209:28" pos:end="209:47"><expr pos:start="209:28" pos:end="209:47"><name pos:start="209:28" pos:end="209:47">FW_CFG_SPARC64_DEPTH</name></expr></argument>, <argument pos:start="209:50" pos:end="209:62"><expr pos:start="209:50" pos:end="209:62"><name pos:start="209:50" pos:end="209:62">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:52"><expr pos:start="213:5" pos:end="213:51"><call pos:start="213:5" pos:end="213:51"><name pos:start="213:5" pos:end="213:26">qemu_register_boot_set</name><argument_list pos:start="213:27" pos:end="213:51">(<argument pos:start="213:28" pos:end="213:42"><expr pos:start="213:28" pos:end="213:42"><name pos:start="213:28" pos:end="213:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="213:45" pos:end="213:50"><expr pos:start="213:45" pos:end="213:50"><name pos:start="213:45" pos:end="213:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
