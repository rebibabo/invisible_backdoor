<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15297.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">vhdx_parse_log</name><parameter_list pos:start="1:19" pos:end="1:73">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:35">BlockDriverState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">bs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:54">BDRVVHDXState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:72"><decl pos:start="1:60" pos:end="1:72"><type pos:start="1:60" pos:end="1:72"><name pos:start="1:60" pos:end="1:63">bool</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">flushed</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VHDXHeader</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19">VHDXLogSequence</name></type> <name pos:start="9:21" pos:end="9:24">logs</name> <init pos:start="9:26" pos:end="9:32">= <expr pos:start="9:28" pos:end="9:32"><block pos:start="9:28" pos:end="9:32">{ <expr pos:start="9:30" pos:end="9:30"><literal type="number" pos:start="9:30" pos:end="9:30">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:7">hdr</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:36"><name pos:start="13:11" pos:end="13:11">s</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:20">headers</name><index pos:start="13:21" pos:end="13:36">[<expr pos:start="13:22" pos:end="13:35"><name pos:start="13:22" pos:end="13:35"><name pos:start="13:22" pos:end="13:22">s</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:35">curr_header</name></name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><operator pos:start="17:5" pos:end="17:5">*</operator><name pos:start="17:6" pos:end="17:12">flushed</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:20">false</name></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:45">/* s-&gt;log.hdr is freed in vhdx_close() */</comment>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:27">(<expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:14">log</name><operator pos:start="23:15" pos:end="23:15">.</operator><name pos:start="23:16" pos:end="23:18">hdr</name></name> <operator pos:start="23:20" pos:end="23:21">==</operator> <name pos:start="23:23" pos:end="23:26">NULL</name></expr>)</condition> <block pos:start="23:29" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:69">

        <expr_stmt pos:start="25:9" pos:end="25:69"><expr pos:start="25:9" pos:end="25:68"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">log</name><operator pos:start="25:15" pos:end="25:15">.</operator><name pos:start="25:16" pos:end="25:18">hdr</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:68"><name pos:start="25:22" pos:end="25:36">qemu_blockalign</name><argument_list pos:start="25:37" pos:end="25:68">(<argument pos:start="25:38" pos:end="25:39"><expr pos:start="25:38" pos:end="25:39"><name pos:start="25:38" pos:end="25:39">bs</name></expr></argument>, <argument pos:start="25:42" pos:end="25:67"><expr pos:start="25:42" pos:end="25:67"><sizeof pos:start="25:42" pos:end="25:67">sizeof<argument_list pos:start="25:48" pos:end="25:67">(<argument pos:start="25:49" pos:end="25:66"><expr pos:start="25:49" pos:end="25:66"><name pos:start="25:49" pos:end="25:66">VHDXLogEntryHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:10">log</name><operator pos:start="31:11" pos:end="31:11">.</operator><name pos:start="31:12" pos:end="31:17">offset</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:35"><name pos:start="31:21" pos:end="31:23">hdr</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:35">log_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:10">log</name><operator pos:start="33:11" pos:end="33:11">.</operator><name pos:start="33:12" pos:end="33:17">length</name></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:35"><name pos:start="33:21" pos:end="33:23">hdr</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:35">log_length</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="39:42">(<expr pos:start="37:9" pos:end="39:41"><name pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:14">log</name><operator pos:start="37:15" pos:end="37:15">.</operator><name pos:start="37:16" pos:end="37:21">offset</name></name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <name pos:start="37:25" pos:end="37:41">VHDX_LOG_MIN_SIZE</name> <operator pos:start="37:43" pos:end="37:44">||</operator>

        <name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:14">log</name><operator pos:start="39:15" pos:end="39:15">.</operator><name pos:start="39:16" pos:end="39:21">offset</name></name> <operator pos:start="39:23" pos:end="39:23">%</operator> <name pos:start="39:25" pos:end="39:41">VHDX_LOG_MIN_SIZE</name></expr>)</condition> <block pos:start="39:44" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:54">/* per spec, only log version of 0 is supported */</comment>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:30">(<expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:11">hdr</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:24">log_version</name></name> <operator pos:start="51:26" pos:end="51:27">!=</operator> <literal type="number" pos:start="51:29" pos:end="51:29">0</literal></expr>)</condition> <block pos:start="51:32" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="63:42">/* If either the log guid, or log length is zero,

     * then a replay log is not present */</comment>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:42">(<expr pos:start="65:9" pos:end="65:41"><call pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:15">guid_eq</name><argument_list pos:start="65:16" pos:end="65:41">(<argument pos:start="65:17" pos:end="65:29"><expr pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:19">hdr</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:29">log_guid</name></name></expr></argument>, <argument pos:start="65:32" pos:end="65:40"><expr pos:start="65:32" pos:end="65:40"><name pos:start="65:32" pos:end="65:40">zero_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:44" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:18">

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:29">(<expr pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:11">hdr</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:23">log_length</name></name> <operator pos:start="73:25" pos:end="73:26">==</operator> <literal type="number" pos:start="73:28" pos:end="73:28">0</literal></expr>)</condition> <block pos:start="73:31" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:18">

        <goto pos:start="75:9" pos:end="75:18">goto <name pos:start="75:14" pos:end="75:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:44">(<expr pos:start="81:9" pos:end="81:43"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:11">hdr</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:23">log_length</name></name> <operator pos:start="81:25" pos:end="81:25">%</operator> <name pos:start="81:27" pos:end="81:43">VHDX_LOG_MIN_SIZE</name></expr>)</condition> <block pos:start="81:46" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:18">

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">-</operator><name pos:start="83:16" pos:end="83:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="93:5" pos:end="95:56">/* The log is present, we need to find if and where there is an active

     * sequence of valid entries present in the log.  */</comment>



    <expr_stmt pos:start="99:5" pos:end="99:40"><expr pos:start="99:5" pos:end="99:39"><name pos:start="99:5" pos:end="99:7">ret</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:39"><name pos:start="99:11" pos:end="99:25">vhdx_log_search</name><argument_list pos:start="99:26" pos:end="99:39">(<argument pos:start="99:27" pos:end="99:28"><expr pos:start="99:27" pos:end="99:28"><name pos:start="99:27" pos:end="99:28">bs</name></expr></argument>, <argument pos:start="99:31" pos:end="99:31"><expr pos:start="99:31" pos:end="99:31"><name pos:start="99:31" pos:end="99:31">s</name></expr></argument>, <argument pos:start="99:34" pos:end="99:38"><expr pos:start="99:34" pos:end="99:38"><operator pos:start="99:34" pos:end="99:34">&amp;</operator><name pos:start="99:35" pos:end="99:38">logs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>)</condition> <block pos:start="101:18" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:18">

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="123:5"><if pos:start="109:5" pos:end="123:5">if <condition pos:start="109:8" pos:end="109:19">(<expr pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:12">logs</name><operator pos:start="109:13" pos:end="109:13">.</operator><name pos:start="109:14" pos:end="109:18">valid</name></name></expr>)</condition> <block pos:start="109:21" pos:end="123:5">{<block_content pos:start="113:9" pos:end="121:24">

        <comment type="block" pos:start="111:9" pos:end="111:31">/* now flush the log */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:43"><expr pos:start="113:9" pos:end="113:42"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:42"><name pos:start="113:15" pos:end="113:28">vhdx_log_flush</name><argument_list pos:start="113:29" pos:end="113:42">(<argument pos:start="113:30" pos:end="113:31"><expr pos:start="113:30" pos:end="113:31"><name pos:start="113:30" pos:end="113:31">bs</name></expr></argument>, <argument pos:start="113:34" pos:end="113:34"><expr pos:start="113:34" pos:end="113:34"><name pos:start="113:34" pos:end="113:34">s</name></expr></argument>, <argument pos:start="113:37" pos:end="113:41"><expr pos:start="113:37" pos:end="113:41"><operator pos:start="113:37" pos:end="113:37">&amp;</operator><name pos:start="113:38" pos:end="113:41">logs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:22">

            <goto pos:start="117:13" pos:end="117:22">goto <name pos:start="117:18" pos:end="117:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:24"><expr pos:start="121:9" pos:end="121:23"><operator pos:start="121:9" pos:end="121:9">*</operator><name pos:start="121:10" pos:end="121:16">flushed</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:23">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





<label pos:start="129:1" pos:end="129:5"><name pos:start="129:1" pos:end="129:4">exit</name>:</label>

    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
