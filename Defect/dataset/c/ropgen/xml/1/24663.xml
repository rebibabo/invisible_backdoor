<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24663.c" pos:tabs="8"><function pos:start="1:1" pos:end="136:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">ppc_tlb_invalidate_one</name><parameter_list pos:start="1:28" pos:end="1:64">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:39">CPUPPCState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:58">target_ulong</name></type> <name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="136:1">{<block_content pos:start="7:5" pos:end="136:1">

<cpp:if pos:start="5:1" pos:end="5:28">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:28"><operator pos:start="5:5" pos:end="5:5">!</operator><call pos:start="5:6" pos:end="5:28"><name pos:start="5:6" pos:end="5:12">defined</name><argument_list pos:start="5:13" pos:end="5:28">(<argument pos:start="5:14" pos:end="5:27"><expr pos:start="5:14" pos:end="5:27"><name pos:start="5:14" pos:end="5:27">FLUSH_ALL_TLBS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PowerPCCPU</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">cpu</name> <init pos:start="7:21" pos:end="7:42">= <expr pos:start="7:23" pos:end="7:42"><call pos:start="7:23" pos:end="7:42"><name pos:start="7:23" pos:end="7:37">ppc_env_get_cpu</name><argument_list pos:start="7:38" pos:end="7:42">(<argument pos:start="7:39" pos:end="7:41"><expr pos:start="7:39" pos:end="7:41"><name pos:start="7:39" pos:end="7:41">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:8">addr</name> <operator pos:start="13:10" pos:end="13:11">&amp;=</operator> <name pos:start="13:13" pos:end="13:28">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <switch pos:start="15:5" pos:end="136:1">switch <condition pos:start="15:12" pos:end="15:27">(<expr pos:start="15:13" pos:end="15:26"><name pos:start="15:13" pos:end="15:26"><name pos:start="15:13" pos:end="15:15">env</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:26">mmu_model</name></name></expr>)</condition> <block pos:start="15:29" pos:end="136:1">{<block_content pos:start="17:5" pos:end="136:1">

    <case pos:start="17:5" pos:end="17:30">case <expr pos:start="17:10" pos:end="17:29"><name pos:start="17:10" pos:end="17:29">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

    <case pos:start="19:5" pos:end="19:31">case <expr pos:start="19:10" pos:end="19:30"><name pos:start="19:10" pos:end="19:30">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><call pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:34">ppc6xx_tlb_invalidate_virt</name><argument_list pos:start="21:35" pos:end="21:48">(<argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">env</name></expr></argument>, <argument pos:start="21:41" pos:end="21:44"><expr pos:start="21:41" pos:end="21:44"><name pos:start="21:41" pos:end="21:44">addr</name></expr></argument>, <argument pos:start="21:47" pos:end="21:47"><expr pos:start="21:47" pos:end="21:47"><literal type="number" pos:start="21:47" pos:end="21:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:30">(<expr pos:start="23:13" pos:end="23:29"><name pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:15">env</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:24">id_tlbs</name></name> <operator pos:start="23:26" pos:end="23:27">==</operator> <literal type="number" pos:start="23:29" pos:end="23:29">1</literal></expr>)</condition> <block pos:start="23:32" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:53">

            <expr_stmt pos:start="25:13" pos:end="25:53"><expr pos:start="25:13" pos:end="25:52"><call pos:start="25:13" pos:end="25:52"><name pos:start="25:13" pos:end="25:38">ppc6xx_tlb_invalidate_virt</name><argument_list pos:start="25:39" pos:end="25:52">(<argument pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><name pos:start="25:40" pos:end="25:42">env</name></expr></argument>, <argument pos:start="25:45" pos:end="25:48"><expr pos:start="25:45" pos:end="25:48"><name pos:start="25:45" pos:end="25:48">addr</name></expr></argument>, <argument pos:start="25:51" pos:end="25:51"><expr pos:start="25:51" pos:end="25:51"><literal type="number" pos:start="25:51" pos:end="25:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:25">case <expr pos:start="31:10" pos:end="31:24"><name pos:start="31:10" pos:end="31:24">POWERPC_MMU_32B</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">POWERPC_MMU_601</name></expr>:</case>

        <comment type="block" pos:start="35:9" pos:end="35:52">/* tlbie invalidate TLBs for all segments */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:12">addr</name> <operator pos:start="37:14" pos:end="37:15">&amp;=</operator> <operator pos:start="37:17" pos:end="37:17">~</operator><operator pos:start="37:18" pos:end="37:18">(</operator><operator pos:start="37:19" pos:end="37:19">(</operator><name pos:start="37:20" pos:end="37:31">target_ulong</name><operator pos:start="37:32" pos:end="37:32">)</operator><operator pos:start="37:33" pos:end="37:33">-</operator><literal type="number" pos:start="37:34" pos:end="37:37">1ULL</literal> <operator pos:start="37:39" pos:end="37:40">&lt;&lt;</operator> <literal type="number" pos:start="37:42" pos:end="37:43">28</literal><operator pos:start="37:44" pos:end="37:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="136:1"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:10">cs</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:21"><name pos:start="39:14" pos:end="39:16">CPU</name><argument_list pos:start="39:17" pos:end="39:21">(<argument pos:start="39:18" pos:end="39:20"><expr pos:start="39:18" pos:end="39:20"><name pos:start="39:18" pos:end="39:20">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></switch></block_content></block></function>

        <comment type="block" pos:start="41:9" pos:end="45:11">/* XXX: this case should be optimized,

         * giving a mask to tlb_flush_page

         */</comment>

        <comment type="block" pos:start="47:9" pos:end="53:11">/* This is broken, some CPUs invalidate a whole congruence

         * class on an even smaller subset of bits and some OSes take

         * advantage of this. Just blow the whole thing away.

         */</comment>

<cpp:if pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:5"><literal type="number" pos:start="55:5" pos:end="55:5">0</literal></expr></cpp:if>

        tlb_flush_page(cs, addr | (0x0 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x1 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x2 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x3 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x4 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x5 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x6 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x7 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x8 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0x9 &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0xA &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0xB &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0xC &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0xD &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0xE &lt;&lt; 28));

        tlb_flush_page(cs, addr | (0xF &lt;&lt; 28));




        break;

<cpp:if pos:start="94:1" pos:end="94:25">#<cpp:directive pos:start="94:2" pos:end="94:3">if</cpp:directive> <expr pos:start="94:5" pos:end="94:25"><call pos:start="94:5" pos:end="94:25"><name pos:start="94:5" pos:end="94:11">defined</name><argument_list pos:start="94:12" pos:end="94:25">(<argument pos:start="94:13" pos:end="94:24"><expr pos:start="94:13" pos:end="94:24"><name pos:start="94:13" pos:end="94:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    case POWERPC_MMU_64B:

    case POWERPC_MMU_2_03:

    case POWERPC_MMU_2_06:

    case POWERPC_MMU_2_06a:

    case POWERPC_MMU_2_07:

    case POWERPC_MMU_2_07a:

        <comment type="block" pos:start="108:9" pos:end="108:52">/* tlbie invalidate TLBs for all segments */</comment>

        <comment type="block" pos:start="110:9" pos:end="116:11">/* XXX: given the fact that there are too many segments to invalidate,

         *      and we still don't have a tlb_flush_mask(env, n, mask) in QEMU,

         *      we just invalidate all TLBs

         */</comment>

        env-&gt;tlb_need_flush = 1;

        break;

<cpp:endif pos:start="122:1" pos:end="122:6">#<cpp:directive pos:start="122:2" pos:end="122:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="122:8" pos:end="122:34">/* defined(TARGET_PPC64) */</comment>

    default:

        <comment type="block" pos:start="126:9" pos:end="126:59">/* Should never reach here with other MMU models */</comment>

        assert(0);

    }


    ppc_tlb_invalidate_all(env);


}</unit>
