<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24657.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">parse_bintree</name><parameter_list pos:start="1:25" pos:end="5:64">(<parameter pos:start="1:26" pos:end="1:49"><decl pos:start="1:26" pos:end="1:49"><type pos:start="1:26" pos:end="1:49"><name pos:start="1:26" pos:end="1:44">Indeo3DecodeContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:72"><decl pos:start="1:52" pos:end="1:72"><type pos:start="1:52" pos:end="1:72"><name pos:start="1:52" pos:end="1:65">AVCodecContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">avctx</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:30">Plane</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:37">plane</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:47"><decl pos:start="3:40" pos:end="3:47"><type pos:start="3:40" pos:end="3:47"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:47">code</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:63"><decl pos:start="3:50" pos:end="3:63"><type pos:start="3:50" pos:end="3:63"><name pos:start="3:50" pos:end="3:53">Cell</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:63">ref_cell</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:40"><decl pos:start="5:26" pos:end="5:40"><type pos:start="5:26" pos:end="5:40"><specifier pos:start="5:26" pos:end="5:30">const</specifier> <name pos:start="5:32" pos:end="5:34">int</name></type> <name pos:start="5:36" pos:end="5:40">depth</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:63"><decl pos:start="5:43" pos:end="5:63"><type pos:start="5:43" pos:end="5:63"><specifier pos:start="5:43" pos:end="5:47">const</specifier> <name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:63">strip_width</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="167:1">{<block_content pos:start="9:5" pos:end="165:31">

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">Cell</name></type>    <name pos:start="9:13" pos:end="9:21">curr_cell</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type>     <name pos:start="11:13" pos:end="11:22">bytes_used</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:13">depth</name> <operator pos:start="15:15" pos:end="15:16">&lt;=</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>)</condition> <block pos:start="15:21" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:35">

        <expr_stmt pos:start="17:9" pos:end="17:81"><expr pos:start="17:9" pos:end="17:80"><call pos:start="17:9" pos:end="17:80"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:80">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:79"><expr pos:start="17:37" pos:end="17:79"><literal type="string" pos:start="17:37" pos:end="17:79">"Stack overflow (corrupted binary tree)!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return> <comment type="line" pos:start="19:37" pos:end="19:55">// unwind recursion</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:13">curr_cell</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <operator pos:start="25:17" pos:end="25:17">*</operator><name pos:start="25:18" pos:end="25:25">ref_cell</name></expr>;</expr_stmt> <comment type="line" pos:start="25:28" pos:end="25:47">// clone parent cell</comment>

    <if_stmt pos:start="27:5" pos:end="51:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:24">(<expr pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:12">code</name> <operator pos:start="27:14" pos:end="27:15">==</operator> <name pos:start="27:17" pos:end="27:23">H_SPLIT</name></expr>)</condition> <block pos:start="27:26" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:45">

        <expr_stmt pos:start="29:9" pos:end="29:55"><expr pos:start="29:9" pos:end="29:54"><call pos:start="29:9" pos:end="29:54"><name pos:start="29:9" pos:end="29:18">SPLIT_CELL</name><argument_list pos:start="29:19" pos:end="29:54">(<argument pos:start="29:20" pos:end="29:35"><expr pos:start="29:20" pos:end="29:35"><name pos:start="29:20" pos:end="29:35"><name pos:start="29:20" pos:end="29:27">ref_cell</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:35">height</name></name></expr></argument>, <argument pos:start="29:38" pos:end="29:53"><expr pos:start="29:38" pos:end="29:53"><name pos:start="29:38" pos:end="29:53"><name pos:start="29:38" pos:end="29:46">curr_cell</name><operator pos:start="29:47" pos:end="29:47">.</operator><name pos:start="29:48" pos:end="29:53">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:16">ref_cell</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:22">ypos</name></name>   <operator pos:start="31:26" pos:end="31:27">+=</operator> <name pos:start="31:29" pos:end="31:44"><name pos:start="31:29" pos:end="31:37">curr_cell</name><operator pos:start="31:38" pos:end="31:38">.</operator><name pos:start="31:39" pos:end="31:44">height</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:45"><expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:16">ref_cell</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:24">height</name></name> <operator pos:start="33:26" pos:end="33:27">-=</operator> <name pos:start="33:29" pos:end="33:44"><name pos:start="33:29" pos:end="33:37">curr_cell</name><operator pos:start="33:38" pos:end="33:38">.</operator><name pos:start="33:39" pos:end="33:44">height</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="35:7" pos:end="51:5">else if <condition pos:start="35:15" pos:end="35:31">(<expr pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:19">code</name> <operator pos:start="35:21" pos:end="35:22">==</operator> <name pos:start="35:24" pos:end="35:30">V_SPLIT</name></expr>)</condition> <block pos:start="35:33" pos:end="51:5">{<block_content pos:start="37:9" pos:end="49:43">

        <if_stmt pos:start="37:9" pos:end="45:57"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:42">(<expr pos:start="37:13" pos:end="37:41"><name pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:21">curr_cell</name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:27">width</name></name> <operator pos:start="37:29" pos:end="37:29">&gt;</operator> <name pos:start="37:31" pos:end="37:41">strip_width</name></expr>)</condition> <block pos:start="37:44" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:92">

            <comment type="block" pos:start="39:13" pos:end="39:29">/* split strip */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:92"><expr pos:start="41:13" pos:end="41:91"><name pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:21">curr_cell</name><operator pos:start="41:22" pos:end="41:22">.</operator><name pos:start="41:23" pos:end="41:27">width</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <operator pos:start="41:31" pos:end="41:31">(</operator><ternary pos:start="41:32" pos:end="41:76"><condition pos:start="41:32" pos:end="41:70"><expr pos:start="41:32" pos:end="41:68"><name pos:start="41:32" pos:end="41:46"><name pos:start="41:32" pos:end="41:40">curr_cell</name><operator pos:start="41:41" pos:end="41:41">.</operator><name pos:start="41:42" pos:end="41:46">width</name></name> <operator pos:start="41:48" pos:end="41:49">&lt;=</operator> <operator pos:start="41:51" pos:end="41:51">(</operator><name pos:start="41:52" pos:end="41:62">strip_width</name> <operator pos:start="41:64" pos:end="41:65">&lt;&lt;</operator> <literal type="number" pos:start="41:67" pos:end="41:67">1</literal><operator pos:start="41:68" pos:end="41:68">)</operator></expr> ?</condition><then pos:start="41:72" pos:end="41:72"> <expr pos:start="41:72" pos:end="41:72"><literal type="number" pos:start="41:72" pos:end="41:72">1</literal></expr> </then><else pos:start="41:74" pos:end="41:76">: <expr pos:start="41:76" pos:end="41:76"><literal type="number" pos:start="41:76" pos:end="41:76">2</literal></expr></else></ternary><operator pos:start="41:77" pos:end="41:77">)</operator> <operator pos:start="41:79" pos:end="41:79">*</operator> <name pos:start="41:81" pos:end="41:91">strip_width</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="43:11" pos:end="45:57">else<block type="pseudo" pos:start="45:13" pos:end="45:57"><block_content pos:start="45:13" pos:end="45:57">

            <expr_stmt pos:start="45:13" pos:end="45:57"><expr pos:start="45:13" pos:end="45:56"><call pos:start="45:13" pos:end="45:56"><name pos:start="45:13" pos:end="45:22">SPLIT_CELL</name><argument_list pos:start="45:23" pos:end="45:56">(<argument pos:start="45:24" pos:end="45:38"><expr pos:start="45:24" pos:end="45:38"><name pos:start="45:24" pos:end="45:38"><name pos:start="45:24" pos:end="45:31">ref_cell</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:38">width</name></name></expr></argument>, <argument pos:start="45:41" pos:end="45:55"><expr pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:49">curr_cell</name><operator pos:start="45:50" pos:end="45:50">.</operator><name pos:start="45:51" pos:end="45:55">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:16">ref_cell</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:22">xpos</name></name>  <operator pos:start="47:25" pos:end="47:26">+=</operator> <name pos:start="47:28" pos:end="47:42"><name pos:start="47:28" pos:end="47:36">curr_cell</name><operator pos:start="47:37" pos:end="47:37">.</operator><name pos:start="47:38" pos:end="47:42">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:43"><expr pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:16">ref_cell</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:23">width</name></name> <operator pos:start="49:25" pos:end="49:26">-=</operator> <name pos:start="49:28" pos:end="49:42"><name pos:start="49:28" pos:end="49:36">curr_cell</name><operator pos:start="49:37" pos:end="49:37">.</operator><name pos:start="49:38" pos:end="49:42">width</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="55:5" pos:end="161:5">while <condition pos:start="55:11" pos:end="55:40">(<expr pos:start="55:12" pos:end="55:39"><call pos:start="55:12" pos:end="55:34"><name pos:start="55:12" pos:end="55:24">get_bits_left</name><argument_list pos:start="55:25" pos:end="55:34">(<argument pos:start="55:26" pos:end="55:33"><expr pos:start="55:26" pos:end="55:33"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:33"><name pos:start="55:27" pos:end="55:29">ctx</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="55:36" pos:end="55:37">&gt;=</operator> <literal type="number" pos:start="55:39" pos:end="55:39">2</literal></expr>)</condition> <block pos:start="55:42" pos:end="161:5">{<block_content pos:start="57:9" pos:end="159:9"> <comment type="block" pos:start="55:44" pos:end="55:66">/* loop until return */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:24">RESYNC_BITSTREAM</name></expr>;</expr_stmt>

        <switch pos:start="59:9" pos:end="159:9">switch <condition pos:start="59:16" pos:end="59:45">(<expr pos:start="59:17" pos:end="59:44"><name pos:start="59:17" pos:end="59:20">code</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <call pos:start="59:24" pos:end="59:44"><name pos:start="59:24" pos:end="59:31">get_bits</name><argument_list pos:start="59:32" pos:end="59:44">(<argument pos:start="59:33" pos:end="59:40"><expr pos:start="59:33" pos:end="59:40"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:40"><name pos:start="59:34" pos:end="59:36">ctx</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:40">gb</name></name></expr></argument>, <argument pos:start="59:43" pos:end="59:43"><expr pos:start="59:43" pos:end="59:43"><literal type="number" pos:start="59:43" pos:end="59:43">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:47" pos:end="159:9">{<block_content pos:start="61:9" pos:end="157:18">

        <case pos:start="61:9" pos:end="61:21">case <expr pos:start="61:14" pos:end="61:20"><name pos:start="61:14" pos:end="61:20">H_SPLIT</name></expr>:</case>

        <case pos:start="63:9" pos:end="63:21">case <expr pos:start="63:14" pos:end="63:20"><name pos:start="63:14" pos:end="63:20">V_SPLIT</name></expr>:</case>

            <if_stmt pos:start="65:13" pos:end="67:43"><if pos:start="65:13" pos:end="67:43">if <condition pos:start="65:16" pos:end="65:91">(<expr pos:start="65:17" pos:end="65:90"><call pos:start="65:17" pos:end="65:90"><name pos:start="65:17" pos:end="65:29">parse_bintree</name><argument_list pos:start="65:30" pos:end="65:90">(<argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">ctx</name></expr></argument>, <argument pos:start="65:36" pos:end="65:40"><expr pos:start="65:36" pos:end="65:40"><name pos:start="65:36" pos:end="65:40">avctx</name></expr></argument>, <argument pos:start="65:43" pos:end="65:47"><expr pos:start="65:43" pos:end="65:47"><name pos:start="65:43" pos:end="65:47">plane</name></expr></argument>, <argument pos:start="65:50" pos:end="65:53"><expr pos:start="65:50" pos:end="65:53"><name pos:start="65:50" pos:end="65:53">code</name></expr></argument>, <argument pos:start="65:56" pos:end="65:65"><expr pos:start="65:56" pos:end="65:65"><operator pos:start="65:56" pos:end="65:56">&amp;</operator><name pos:start="65:57" pos:end="65:65">curr_cell</name></expr></argument>, <argument pos:start="65:68" pos:end="65:76"><expr pos:start="65:68" pos:end="65:76"><name pos:start="65:68" pos:end="65:72">depth</name> <operator pos:start="65:74" pos:end="65:74">-</operator> <literal type="number" pos:start="65:76" pos:end="65:76">1</literal></expr></argument>, <argument pos:start="65:79" pos:end="65:89"><expr pos:start="65:79" pos:end="65:89"><name pos:start="65:79" pos:end="65:89">strip_width</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:43"><block_content pos:start="67:17" pos:end="67:43">

                <return pos:start="67:17" pos:end="67:43">return <expr pos:start="67:24" pos:end="67:42"><name pos:start="67:24" pos:end="67:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:24">case <expr pos:start="71:14" pos:end="71:23"><name pos:start="71:14" pos:end="71:23">INTRA_NULL</name></expr>:</case>

            <if_stmt pos:start="73:13" pos:end="109:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:32">(<expr pos:start="73:17" pos:end="73:31"><operator pos:start="73:17" pos:end="73:17">!</operator><name pos:start="73:18" pos:end="73:31"><name pos:start="73:18" pos:end="73:26">curr_cell</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:31">tree</name></name></expr>)</condition> <block pos:start="73:34" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:37"> <comment type="block" pos:start="73:36" pos:end="73:59">/* MC tree INTRA code */</comment>

                <expr_stmt pos:start="75:17" pos:end="75:37"><expr pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:32"><name pos:start="75:17" pos:end="75:25">curr_cell</name><operator pos:start="75:26" pos:end="75:26">.</operator><name pos:start="75:27" pos:end="75:32">mv_ptr</name></name> <operator pos:start="75:34" pos:end="75:34">=</operator> <literal type="number" pos:start="75:36" pos:end="75:36">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="75:39" pos:end="75:75">/* mark the current strip as INTRA */</comment>

                <expr_stmt pos:start="77:17" pos:end="77:37"><expr pos:start="77:17" pos:end="77:36"><name pos:start="77:17" pos:end="77:30"><name pos:start="77:17" pos:end="77:25">curr_cell</name><operator pos:start="77:26" pos:end="77:26">.</operator><name pos:start="77:27" pos:end="77:30">tree</name></name>   <operator pos:start="77:34" pos:end="77:34">=</operator> <literal type="number" pos:start="77:36" pos:end="77:36">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="77:39" pos:end="77:61">/* enter the VQ tree */</comment>

            </block_content>}</block></if> <else pos:start="79:15" pos:end="109:13">else <block pos:start="79:20" pos:end="109:13">{<block_content pos:start="81:17" pos:end="107:25"> <comment type="block" pos:start="79:22" pos:end="79:44">/* VQ tree NULL code */</comment>

                <expr_stmt pos:start="81:17" pos:end="81:33"><expr pos:start="81:17" pos:end="81:32"><name pos:start="81:17" pos:end="81:32">RESYNC_BITSTREAM</name></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:45"><expr pos:start="83:17" pos:end="83:44"><name pos:start="83:17" pos:end="83:20">code</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="83:44"><name pos:start="83:24" pos:end="83:31">get_bits</name><argument_list pos:start="83:32" pos:end="83:44">(<argument pos:start="83:33" pos:end="83:40"><expr pos:start="83:33" pos:end="83:40"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:40"><name pos:start="83:34" pos:end="83:36">ctx</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:40">gb</name></name></expr></argument>, <argument pos:start="83:43" pos:end="83:43"><expr pos:start="83:43" pos:end="83:43"><literal type="number" pos:start="83:43" pos:end="83:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="91:17"><if pos:start="85:17" pos:end="91:17">if <condition pos:start="85:20" pos:end="85:30">(<expr pos:start="85:21" pos:end="85:29"><name pos:start="85:21" pos:end="85:24">code</name> <operator pos:start="85:26" pos:end="85:27">&gt;=</operator> <literal type="number" pos:start="85:29" pos:end="85:29">2</literal></expr>)</condition> <block pos:start="85:32" pos:end="91:17">{<block_content pos:start="87:21" pos:end="89:47">

                    <expr_stmt pos:start="87:21" pos:end="87:84"><expr pos:start="87:21" pos:end="87:83"><call pos:start="87:21" pos:end="87:83"><name pos:start="87:21" pos:end="87:26">av_log</name><argument_list pos:start="87:27" pos:end="87:83">(<argument pos:start="87:28" pos:end="87:32"><expr pos:start="87:28" pos:end="87:32"><name pos:start="87:28" pos:end="87:32">avctx</name></expr></argument>, <argument pos:start="87:35" pos:end="87:46"><expr pos:start="87:35" pos:end="87:46"><name pos:start="87:35" pos:end="87:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:49" pos:end="87:76"><expr pos:start="87:49" pos:end="87:76"><literal type="string" pos:start="87:49" pos:end="87:76">"Invalid VQ_NULL code: %d\n"</literal></expr></argument>, <argument pos:start="87:79" pos:end="87:82"><expr pos:start="87:79" pos:end="87:82"><name pos:start="87:79" pos:end="87:82">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="89:21" pos:end="89:47">return <expr pos:start="89:28" pos:end="89:46"><name pos:start="89:28" pos:end="89:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="93:17" pos:end="95:93"><if pos:start="93:17" pos:end="95:93">if <condition pos:start="93:20" pos:end="93:30">(<expr pos:start="93:21" pos:end="93:29"><name pos:start="93:21" pos:end="93:24">code</name> <operator pos:start="93:26" pos:end="93:27">==</operator> <literal type="number" pos:start="93:29" pos:end="93:29">1</literal></expr>)</condition><block type="pseudo" pos:start="95:21" pos:end="95:93"><block_content pos:start="95:21" pos:end="95:93">

                    <expr_stmt pos:start="95:21" pos:end="95:93"><expr pos:start="95:21" pos:end="95:92"><call pos:start="95:21" pos:end="95:92"><name pos:start="95:21" pos:end="95:26">av_log</name><argument_list pos:start="95:27" pos:end="95:92">(<argument pos:start="95:28" pos:end="95:32"><expr pos:start="95:28" pos:end="95:32"><name pos:start="95:28" pos:end="95:32">avctx</name></expr></argument>, <argument pos:start="95:35" pos:end="95:46"><expr pos:start="95:35" pos:end="95:46"><name pos:start="95:35" pos:end="95:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:49" pos:end="95:91"><expr pos:start="95:49" pos:end="95:91"><literal type="string" pos:start="95:49" pos:end="95:91">"SkipCell procedure not implemented yet!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <macro pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:26">CHECK_CELL</name></macro>

                <if_stmt pos:start="101:17" pos:end="103:47"><if pos:start="101:17" pos:end="103:47">if <condition pos:start="101:20" pos:end="101:38">(<expr pos:start="101:21" pos:end="101:37"><operator pos:start="101:21" pos:end="101:21">!</operator><name pos:start="101:22" pos:end="101:37"><name pos:start="101:22" pos:end="101:30">curr_cell</name><operator pos:start="101:31" pos:end="101:31">.</operator><name pos:start="101:32" pos:end="101:37">mv_ptr</name></name></expr>)</condition><block type="pseudo" pos:start="103:21" pos:end="103:47"><block_content pos:start="103:21" pos:end="103:47">

                    <return pos:start="103:21" pos:end="103:47">return <expr pos:start="103:28" pos:end="103:46"><name pos:start="103:28" pos:end="103:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:50"><expr pos:start="105:17" pos:end="105:49"><call pos:start="105:17" pos:end="105:49"><name pos:start="105:17" pos:end="105:25">copy_cell</name><argument_list pos:start="105:26" pos:end="105:49">(<argument pos:start="105:27" pos:end="105:29"><expr pos:start="105:27" pos:end="105:29"><name pos:start="105:27" pos:end="105:29">ctx</name></expr></argument>, <argument pos:start="105:32" pos:end="105:36"><expr pos:start="105:32" pos:end="105:36"><name pos:start="105:32" pos:end="105:36">plane</name></expr></argument>, <argument pos:start="105:39" pos:end="105:48"><expr pos:start="105:39" pos:end="105:48"><operator pos:start="105:39" pos:end="105:39">&amp;</operator><name pos:start="105:40" pos:end="105:48">curr_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="107:17" pos:end="107:25">return <expr pos:start="107:24" pos:end="107:24"><literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        <case pos:start="113:9" pos:end="113:24">case <expr pos:start="113:14" pos:end="113:23"><name pos:start="113:14" pos:end="113:23">INTER_DATA</name></expr>:</case>

            <if_stmt pos:start="115:13" pos:end="155:13"><if pos:start="115:13" pos:end="129:13">if <condition pos:start="115:16" pos:end="115:32">(<expr pos:start="115:17" pos:end="115:31"><operator pos:start="115:17" pos:end="115:17">!</operator><name pos:start="115:18" pos:end="115:31"><name pos:start="115:18" pos:end="115:26">curr_cell</name><operator pos:start="115:27" pos:end="115:27">.</operator><name pos:start="115:28" pos:end="115:31">tree</name></name></expr>)</condition> <block pos:start="115:34" pos:end="129:13">{<block_content pos:start="119:17" pos:end="127:33"> <comment type="block" pos:start="115:36" pos:end="115:59">/* MC tree INTER code */</comment>

                <comment type="block" pos:start="117:17" pos:end="117:81">/* get motion vector index and setup the pointer to the mv set */</comment>

                <if_stmt pos:start="119:17" pos:end="121:95"><if pos:start="119:17" pos:end="121:95">if <condition pos:start="119:20" pos:end="119:38">(<expr pos:start="119:21" pos:end="119:37"><operator pos:start="119:21" pos:end="119:21">!</operator><name pos:start="119:22" pos:end="119:37"><name pos:start="119:22" pos:end="119:24">ctx</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:37">need_resync</name></name></expr>)</condition><block type="pseudo" pos:start="121:21" pos:end="121:95"><block_content pos:start="121:21" pos:end="121:95">

                    <expr_stmt pos:start="121:21" pos:end="121:95"><expr pos:start="121:21" pos:end="121:94"><name pos:start="121:21" pos:end="121:39"><name pos:start="121:21" pos:end="121:23">ctx</name><operator pos:start="121:24" pos:end="121:25">-&gt;</operator><name pos:start="121:26" pos:end="121:39">next_cell_data</name></name> <operator pos:start="121:41" pos:end="121:41">=</operator> <operator pos:start="121:43" pos:end="121:43">&amp;</operator><name pos:start="121:44" pos:end="121:94"><name pos:start="121:44" pos:end="121:46">ctx</name><operator pos:start="121:47" pos:end="121:48">-&gt;</operator><name pos:start="121:49" pos:end="121:50">gb</name><operator pos:start="121:51" pos:end="121:51">.</operator><name pos:start="121:52" pos:end="121:57">buffer</name><index pos:start="121:58" pos:end="121:94">[<expr pos:start="121:59" pos:end="121:93"><operator pos:start="121:59" pos:end="121:59">(</operator><call pos:start="121:60" pos:end="121:83"><name pos:start="121:60" pos:end="121:73">get_bits_count</name><argument_list pos:start="121:74" pos:end="121:83">(<argument pos:start="121:75" pos:end="121:82"><expr pos:start="121:75" pos:end="121:82"><operator pos:start="121:75" pos:end="121:75">&amp;</operator><name pos:start="121:76" pos:end="121:82"><name pos:start="121:76" pos:end="121:78">ctx</name><operator pos:start="121:79" pos:end="121:80">-&gt;</operator><name pos:start="121:81" pos:end="121:82">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="121:85" pos:end="121:85">+</operator> <literal type="number" pos:start="121:87" pos:end="121:87">7</literal><operator pos:start="121:88" pos:end="121:88">)</operator> <operator pos:start="121:90" pos:end="121:91">&gt;&gt;</operator> <literal type="number" pos:start="121:93" pos:end="121:93">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:83"><expr pos:start="123:17" pos:end="123:82"><name pos:start="123:17" pos:end="123:32"><name pos:start="123:17" pos:end="123:25">curr_cell</name><operator pos:start="123:26" pos:end="123:26">.</operator><name pos:start="123:27" pos:end="123:32">mv_ptr</name></name> <operator pos:start="123:34" pos:end="123:34">=</operator> <operator pos:start="123:36" pos:end="123:36">&amp;</operator><name pos:start="123:37" pos:end="123:82"><name pos:start="123:37" pos:end="123:39">ctx</name><operator pos:start="123:40" pos:end="123:41">-&gt;</operator><name pos:start="123:42" pos:end="123:51">mc_vectors</name><index pos:start="123:52" pos:end="123:82">[<expr pos:start="123:53" pos:end="123:81"><operator pos:start="123:53" pos:end="123:53">*</operator><operator pos:start="123:54" pos:end="123:54">(</operator><name pos:start="123:55" pos:end="123:73"><name pos:start="123:55" pos:end="123:57">ctx</name><operator pos:start="123:58" pos:end="123:59">-&gt;</operator><name pos:start="123:60" pos:end="123:73">next_cell_data</name></name><operator pos:start="123:74" pos:end="123:75">++</operator><operator pos:start="123:76" pos:end="123:76">)</operator> <operator pos:start="123:78" pos:end="123:79">&lt;&lt;</operator> <literal type="number" pos:start="123:81" pos:end="123:81">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:37"><expr pos:start="125:17" pos:end="125:36"><name pos:start="125:17" pos:end="125:30"><name pos:start="125:17" pos:end="125:25">curr_cell</name><operator pos:start="125:26" pos:end="125:26">.</operator><name pos:start="125:27" pos:end="125:30">tree</name></name>   <operator pos:start="125:34" pos:end="125:34">=</operator> <literal type="number" pos:start="125:36" pos:end="125:36">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="125:39" pos:end="125:61">/* enter the VQ tree */</comment>

                <expr_stmt pos:start="127:17" pos:end="127:33"><expr pos:start="127:17" pos:end="127:32"><call pos:start="127:17" pos:end="127:32"><name pos:start="127:17" pos:end="127:29">UPDATE_BITPOS</name><argument_list pos:start="127:30" pos:end="127:32">(<argument pos:start="127:31" pos:end="127:31"><expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="129:15" pos:end="155:13">else <block pos:start="129:20" pos:end="155:13">{<block_content pos:start="131:17" pos:end="153:25"> <comment type="block" pos:start="129:22" pos:end="129:44">/* VQ tree DATA code */</comment>

                <if_stmt pos:start="131:17" pos:end="133:95"><if pos:start="131:17" pos:end="133:95">if <condition pos:start="131:20" pos:end="131:38">(<expr pos:start="131:21" pos:end="131:37"><operator pos:start="131:21" pos:end="131:21">!</operator><name pos:start="131:22" pos:end="131:37"><name pos:start="131:22" pos:end="131:24">ctx</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:37">need_resync</name></name></expr>)</condition><block type="pseudo" pos:start="133:21" pos:end="133:95"><block_content pos:start="133:21" pos:end="133:95">

                    <expr_stmt pos:start="133:21" pos:end="133:95"><expr pos:start="133:21" pos:end="133:94"><name pos:start="133:21" pos:end="133:39"><name pos:start="133:21" pos:end="133:23">ctx</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:39">next_cell_data</name></name> <operator pos:start="133:41" pos:end="133:41">=</operator> <operator pos:start="133:43" pos:end="133:43">&amp;</operator><name pos:start="133:44" pos:end="133:94"><name pos:start="133:44" pos:end="133:46">ctx</name><operator pos:start="133:47" pos:end="133:48">-&gt;</operator><name pos:start="133:49" pos:end="133:50">gb</name><operator pos:start="133:51" pos:end="133:51">.</operator><name pos:start="133:52" pos:end="133:57">buffer</name><index pos:start="133:58" pos:end="133:94">[<expr pos:start="133:59" pos:end="133:93"><operator pos:start="133:59" pos:end="133:59">(</operator><call pos:start="133:60" pos:end="133:83"><name pos:start="133:60" pos:end="133:73">get_bits_count</name><argument_list pos:start="133:74" pos:end="133:83">(<argument pos:start="133:75" pos:end="133:82"><expr pos:start="133:75" pos:end="133:82"><operator pos:start="133:75" pos:end="133:75">&amp;</operator><name pos:start="133:76" pos:end="133:82"><name pos:start="133:76" pos:end="133:78">ctx</name><operator pos:start="133:79" pos:end="133:80">-&gt;</operator><name pos:start="133:81" pos:end="133:82">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="133:85" pos:end="133:85">+</operator> <literal type="number" pos:start="133:87" pos:end="133:87">7</literal><operator pos:start="133:88" pos:end="133:88">)</operator> <operator pos:start="133:90" pos:end="133:91">&gt;&gt;</operator> <literal type="number" pos:start="133:93" pos:end="133:93">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <decl_stmt pos:start="137:17" pos:end="141:78"><decl pos:start="137:17" pos:end="141:77"><type pos:start="137:17" pos:end="137:26"><name pos:start="137:17" pos:end="137:26">CHECK_CELL</name></type>

                <name pos:start="139:17" pos:end="139:26">bytes_used</name> <init pos:start="139:28" pos:end="141:77">= <expr pos:start="139:30" pos:end="141:77"><call pos:start="139:30" pos:end="141:77"><name pos:start="139:30" pos:end="139:40">decode_cell</name><argument_list pos:start="139:41" pos:end="141:77">(<argument pos:start="139:42" pos:end="139:44"><expr pos:start="139:42" pos:end="139:44"><name pos:start="139:42" pos:end="139:44">ctx</name></expr></argument>, <argument pos:start="139:47" pos:end="139:51"><expr pos:start="139:47" pos:end="139:51"><name pos:start="139:47" pos:end="139:51">avctx</name></expr></argument>, <argument pos:start="139:54" pos:end="139:58"><expr pos:start="139:54" pos:end="139:58"><name pos:start="139:54" pos:end="139:58">plane</name></expr></argument>, <argument pos:start="139:61" pos:end="139:70"><expr pos:start="139:61" pos:end="139:70"><operator pos:start="139:61" pos:end="139:61">&amp;</operator><name pos:start="139:62" pos:end="139:70">curr_cell</name></expr></argument>,

                                         <argument pos:start="141:42" pos:end="141:60"><expr pos:start="141:42" pos:end="141:60"><name pos:start="141:42" pos:end="141:60"><name pos:start="141:42" pos:end="141:44">ctx</name><operator pos:start="141:45" pos:end="141:46">-&gt;</operator><name pos:start="141:47" pos:end="141:60">next_cell_data</name></name></expr></argument>, <argument pos:start="141:63" pos:end="141:76"><expr pos:start="141:63" pos:end="141:76"><name pos:start="141:63" pos:end="141:76"><name pos:start="141:63" pos:end="141:65">ctx</name><operator pos:start="141:66" pos:end="141:67">-&gt;</operator><name pos:start="141:68" pos:end="141:76">last_byte</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="143:17" pos:end="145:47"><if pos:start="143:17" pos:end="145:47">if <condition pos:start="143:20" pos:end="143:35">(<expr pos:start="143:21" pos:end="143:34"><name pos:start="143:21" pos:end="143:30">bytes_used</name> <operator pos:start="143:32" pos:end="143:32">&lt;</operator> <literal type="number" pos:start="143:34" pos:end="143:34">0</literal></expr>)</condition><block type="pseudo" pos:start="145:21" pos:end="145:47"><block_content pos:start="145:21" pos:end="145:47">

                    <return pos:start="145:21" pos:end="145:47">return <expr pos:start="145:28" pos:end="145:46"><name pos:start="145:28" pos:end="145:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="149:17" pos:end="149:47"><expr pos:start="149:17" pos:end="149:46"><call pos:start="149:17" pos:end="149:46"><name pos:start="149:17" pos:end="149:29">UPDATE_BITPOS</name><argument_list pos:start="149:30" pos:end="149:46">(<argument pos:start="149:31" pos:end="149:45"><expr pos:start="149:31" pos:end="149:45"><name pos:start="149:31" pos:end="149:40">bytes_used</name> <operator pos:start="149:42" pos:end="149:43">&lt;&lt;</operator> <literal type="number" pos:start="149:45" pos:end="149:45">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:50"><expr pos:start="151:17" pos:end="151:49"><name pos:start="151:17" pos:end="151:35"><name pos:start="151:17" pos:end="151:19">ctx</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:35">next_cell_data</name></name> <operator pos:start="151:37" pos:end="151:38">+=</operator> <name pos:start="151:40" pos:end="151:49">bytes_used</name></expr>;</expr_stmt>

                <return pos:start="153:17" pos:end="153:25">return <expr pos:start="153:24" pos:end="153:24"><literal type="number" pos:start="153:24" pos:end="153:24">0</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while><comment type="line" pos:start="161:6" pos:end="161:12">//while</comment>



    <return pos:start="165:5" pos:end="165:31">return <expr pos:start="165:12" pos:end="165:30"><name pos:start="165:12" pos:end="165:30">AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>
</unit>
