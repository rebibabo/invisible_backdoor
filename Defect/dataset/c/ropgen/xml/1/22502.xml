<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22502.c" pos:tabs="8"><function pos:start="1:1" pos:end="56:16"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:19">virtqueue_pop</name><parameter_list pos:start="1:20" pos:end="1:45">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:29">VirtQueue</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:33">vq</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:44"><name pos:start="1:36" pos:end="1:41">size_t</name></type> <name pos:start="1:43" pos:end="1:44">sz</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="56:16">{<block_content pos:start="3:5" pos:end="56:16">
    <decl_stmt pos:start="3:5" pos:end="3:30"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:12">unsigned</name> <name pos:start="3:14" pos:end="3:16">int</name></type> <name pos:start="3:18" pos:end="3:18">i</name></decl>, <decl pos:start="3:21" pos:end="3:24"><type ref="prev" pos:start="3:5" pos:end="3:16"/><name pos:start="3:21" pos:end="3:24">head</name></decl>, <decl pos:start="3:27" pos:end="3:29"><type ref="prev" pos:start="3:5" pos:end="3:16"/><name pos:start="3:27" pos:end="3:29">max</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:36"><decl pos:start="4:5" pos:end="4:35"><type pos:start="4:5" pos:end="4:10"><name pos:start="4:5" pos:end="4:10">hwaddr</name></type> <name pos:start="4:12" pos:end="4:18">desc_pa</name> <init pos:start="4:20" pos:end="4:35">= <expr pos:start="4:22" pos:end="4:35"><name pos:start="4:22" pos:end="4:35"><name pos:start="4:22" pos:end="4:23">vq</name><operator pos:start="4:24" pos:end="4:25">-&gt;</operator><name pos:start="4:26" pos:end="4:30">vring</name><operator pos:start="4:31" pos:end="4:31">.</operator><name pos:start="4:32" pos:end="4:35">desc</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">VirtIODevice</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">vdev</name> <init pos:start="5:24" pos:end="5:33">= <expr pos:start="5:26" pos:end="5:33"><name pos:start="5:26" pos:end="5:33"><name pos:start="5:26" pos:end="5:27">vq</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:33">vdev</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:27"><decl pos:start="6:5" pos:end="6:26"><type pos:start="6:5" pos:end="6:22"><name pos:start="6:5" pos:end="6:20">VirtQueueElement</name> <modifier pos:start="6:22" pos:end="6:22">*</modifier></type><name pos:start="6:23" pos:end="6:26">elem</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:20">out_num</name></decl>, <decl pos:start="7:23" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:23" pos:end="7:28">in_num</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:36"><decl pos:start="8:5" pos:end="8:35"><type pos:start="8:5" pos:end="8:10"><name pos:start="8:5" pos:end="8:10">hwaddr</name></type> <name pos:start="8:12" pos:end="8:35"><name pos:start="8:12" pos:end="8:15">addr</name><index pos:start="8:16" pos:end="8:35">[<expr pos:start="8:17" pos:end="8:34"><name pos:start="8:17" pos:end="8:34">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:16">iovec</name></name></type> <name pos:start="9:18" pos:end="9:40"><name pos:start="9:18" pos:end="9:20">iov</name><index pos:start="9:21" pos:end="9:40">[<expr pos:start="9:22" pos:end="9:39"><name pos:start="9:22" pos:end="9:39">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:19"><decl pos:start="10:5" pos:end="10:18"><type pos:start="10:5" pos:end="10:13"><name pos:start="10:5" pos:end="10:13">VRingDesc</name></type> <name pos:start="10:15" pos:end="10:18">desc</name></decl>;</decl_stmt>
    <if_stmt pos:start="11:5" pos:end="56:16"><if pos:start="11:5" pos:end="56:16">if <condition pos:start="11:8" pos:end="11:31">(<expr pos:start="11:9" pos:end="11:30"><call pos:start="11:9" pos:end="11:30"><name pos:start="11:9" pos:end="11:26">virtio_queue_empty</name><argument_list pos:start="11:27" pos:end="11:30">(<argument pos:start="11:28" pos:end="11:29"><expr pos:start="11:28" pos:end="11:29"><name pos:start="11:28" pos:end="11:29">vq</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:33" pos:end="56:16">{<block_content pos:start="12:9" pos:end="56:16">
        <return pos:start="12:9" pos:end="12:20">return <expr pos:start="12:16" pos:end="12:19"><name pos:start="12:16" pos:end="12:19">NULL</name></expr>;</return>
    <comment type="block" pos:start="13:5" pos:end="14:32">/* Needed after virtio_queue_empty(), see comment in
     * virtqueue_num_heads(). */</comment>
    <expr_stmt pos:start="15:5" pos:end="15:14"><expr pos:start="15:5" pos:end="15:13"><call pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">smp_rmb</name><argument_list pos:start="15:12" pos:end="15:13">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="16:5" pos:end="16:66">/* When we start there are none of either input nor output. */</comment>
    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:11">out_num</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:20">in_num</name> <operator pos:start="17:22" pos:end="17:22">=</operator> <literal type="number" pos:start="17:24" pos:end="17:24">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:24"><expr pos:start="18:5" pos:end="18:23"><name pos:start="18:5" pos:end="18:7">max</name> <operator pos:start="18:9" pos:end="18:9">=</operator> <name pos:start="18:11" pos:end="18:23"><name pos:start="18:11" pos:end="18:12">vq</name><operator pos:start="18:13" pos:end="18:14">-&gt;</operator><name pos:start="18:15" pos:end="18:19">vring</name><operator pos:start="18:20" pos:end="18:20">.</operator><name pos:start="18:21" pos:end="18:23">num</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:60"><expr pos:start="19:5" pos:end="19:59"><name pos:start="19:5" pos:end="19:5">i</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <name pos:start="19:9" pos:end="19:12">head</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:59"><name pos:start="19:16" pos:end="19:33">virtqueue_get_head</name><argument_list pos:start="19:34" pos:end="19:59">(<argument pos:start="19:35" pos:end="19:36"><expr pos:start="19:35" pos:end="19:36"><name pos:start="19:35" pos:end="19:36">vq</name></expr></argument>, <argument pos:start="19:39" pos:end="19:58"><expr pos:start="19:39" pos:end="19:58"><name pos:start="19:39" pos:end="19:56"><name pos:start="19:39" pos:end="19:40">vq</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:56">last_avail_idx</name></name><operator pos:start="19:57" pos:end="19:58">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="20:5" pos:end="56:16"><if pos:start="20:5" pos:end="56:16">if <condition pos:start="20:8" pos:end="20:63">(<expr pos:start="20:9" pos:end="20:62"><call pos:start="20:9" pos:end="20:62"><name pos:start="20:9" pos:end="20:31">virtio_vdev_has_feature</name><argument_list pos:start="20:32" pos:end="20:62">(<argument pos:start="20:33" pos:end="20:36"><expr pos:start="20:33" pos:end="20:36"><name pos:start="20:33" pos:end="20:36">vdev</name></expr></argument>, <argument pos:start="20:39" pos:end="20:61"><expr pos:start="20:39" pos:end="20:61"><name pos:start="20:39" pos:end="20:61">VIRTIO_RING_F_EVENT_IDX</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="20:65" pos:end="56:16">{<block_content pos:start="21:9" pos:end="56:16">
        <expr_stmt pos:start="21:9" pos:end="21:54"><expr pos:start="21:9" pos:end="21:53"><call pos:start="21:9" pos:end="21:53"><name pos:start="21:9" pos:end="21:29">vring_set_avail_event</name><argument_list pos:start="21:30" pos:end="21:53">(<argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><name pos:start="21:31" pos:end="21:32">vq</name></expr></argument>, <argument pos:start="21:35" pos:end="21:52"><expr pos:start="21:35" pos:end="21:52"><name pos:start="21:35" pos:end="21:52"><name pos:start="21:35" pos:end="21:36">vq</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:52">last_avail_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:45"><expr pos:start="22:5" pos:end="22:44"><call pos:start="22:5" pos:end="22:44"><name pos:start="22:5" pos:end="22:19">vring_desc_read</name><argument_list pos:start="22:20" pos:end="22:44">(<argument pos:start="22:21" pos:end="22:24"><expr pos:start="22:21" pos:end="22:24"><name pos:start="22:21" pos:end="22:24">vdev</name></expr></argument>, <argument pos:start="22:27" pos:end="22:31"><expr pos:start="22:27" pos:end="22:31"><operator pos:start="22:27" pos:end="22:27">&amp;</operator><name pos:start="22:28" pos:end="22:31">desc</name></expr></argument>, <argument pos:start="22:34" pos:end="22:40"><expr pos:start="22:34" pos:end="22:40"><name pos:start="22:34" pos:end="22:40">desc_pa</name></expr></argument>, <argument pos:start="22:43" pos:end="22:43"><expr pos:start="22:43" pos:end="22:43"><name pos:start="22:43" pos:end="22:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="23:5" pos:end="56:16"><if pos:start="23:5" pos:end="56:16">if <condition pos:start="23:8" pos:end="23:43">(<expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:12">desc</name><operator pos:start="23:13" pos:end="23:13">.</operator><name pos:start="23:14" pos:end="23:18">flags</name></name> <operator pos:start="23:20" pos:end="23:20">&amp;</operator> <name pos:start="23:22" pos:end="23:42">VRING_DESC_F_INDIRECT</name></expr>)</condition> <block pos:start="23:45" pos:end="56:16">{<block_content pos:start="24:9" pos:end="56:16">
        <if_stmt pos:start="24:9" pos:end="56:16"><if pos:start="24:9" pos:end="56:16">if <condition pos:start="24:12" pos:end="24:41">(<expr pos:start="24:13" pos:end="24:40"><name pos:start="24:13" pos:end="24:20"><name pos:start="24:13" pos:end="24:16">desc</name><operator pos:start="24:17" pos:end="24:17">.</operator><name pos:start="24:18" pos:end="24:20">len</name></name> <operator pos:start="24:22" pos:end="24:22">%</operator> <sizeof pos:start="24:24" pos:end="24:40">sizeof<argument_list pos:start="24:30" pos:end="24:40">(<argument pos:start="24:31" pos:end="24:39"><expr pos:start="24:31" pos:end="24:39"><name pos:start="24:31" pos:end="24:39">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="24:43" pos:end="56:16">{<block_content pos:start="25:13" pos:end="56:16">
            <expr_stmt pos:start="25:13" pos:end="25:67"><expr pos:start="25:13" pos:end="25:66"><call pos:start="25:13" pos:end="25:66"><name pos:start="25:13" pos:end="25:24">error_report</name><argument_list pos:start="25:25" pos:end="25:66">(<argument pos:start="25:26" pos:end="25:65"><expr pos:start="25:26" pos:end="25:65"><literal type="string" pos:start="25:26" pos:end="25:65">"Invalid size for indirect buffer table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="26:9" pos:end="26:53">/* loop over the indirect descriptor table */</comment>
        <expr_stmt pos:start="27:9" pos:end="27:43"><expr pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:11">max</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:22"><name pos:start="27:15" pos:end="27:18">desc</name><operator pos:start="27:19" pos:end="27:19">.</operator><name pos:start="27:20" pos:end="27:22">len</name></name> <operator pos:start="27:24" pos:end="27:24">/</operator> <sizeof pos:start="27:26" pos:end="27:42">sizeof<argument_list pos:start="27:32" pos:end="27:42">(<argument pos:start="27:33" pos:end="27:41"><expr pos:start="27:33" pos:end="27:41"><name pos:start="27:33" pos:end="27:41">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:28"><expr pos:start="28:9" pos:end="28:27"><name pos:start="28:9" pos:end="28:15">desc_pa</name> <operator pos:start="28:17" pos:end="28:17">=</operator> <name pos:start="28:19" pos:end="28:27"><name pos:start="28:19" pos:end="28:22">desc</name><operator pos:start="28:23" pos:end="28:23">.</operator><name pos:start="28:24" pos:end="28:27">addr</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:14"><expr pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:9">i</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:49"><expr pos:start="30:9" pos:end="30:48"><call pos:start="30:9" pos:end="30:48"><name pos:start="30:9" pos:end="30:23">vring_desc_read</name><argument_list pos:start="30:24" pos:end="30:48">(<argument pos:start="30:25" pos:end="30:28"><expr pos:start="30:25" pos:end="30:28"><name pos:start="30:25" pos:end="30:28">vdev</name></expr></argument>, <argument pos:start="30:31" pos:end="30:35"><expr pos:start="30:31" pos:end="30:35"><operator pos:start="30:31" pos:end="30:31">&amp;</operator><name pos:start="30:32" pos:end="30:35">desc</name></expr></argument>, <argument pos:start="30:38" pos:end="30:44"><expr pos:start="30:38" pos:end="30:44"><name pos:start="30:38" pos:end="30:44">desc_pa</name></expr></argument>, <argument pos:start="30:47" pos:end="30:47"><expr pos:start="30:47" pos:end="30:47"><name pos:start="30:47" pos:end="30:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="31:5" pos:end="31:37">/* Collect all the descriptors */</comment>
    <do pos:start="32:5" pos:end="56:16">do <block pos:start="32:8" pos:end="56:16">{<block_content pos:start="33:9" pos:end="56:16">
        <if_stmt pos:start="33:9" pos:end="56:16"><if pos:start="33:9" pos:end="36:9">if <condition pos:start="33:12" pos:end="33:44">(<expr pos:start="33:13" pos:end="33:43"><name pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:16">desc</name><operator pos:start="33:17" pos:end="33:17">.</operator><name pos:start="33:18" pos:end="33:22">flags</name></name> <operator pos:start="33:24" pos:end="33:24">&amp;</operator> <name pos:start="33:26" pos:end="33:43">VRING_DESC_F_WRITE</name></expr>)</condition> <block pos:start="33:46" pos:end="36:9">{<block_content pos:start="34:13" pos:end="35:88">
            <expr_stmt pos:start="34:13" pos:end="35:88"><expr pos:start="34:13" pos:end="35:87"><call pos:start="34:13" pos:end="35:87"><name pos:start="34:13" pos:end="34:30">virtqueue_map_desc</name><argument_list pos:start="34:31" pos:end="35:87">(<argument pos:start="34:32" pos:end="34:38"><expr pos:start="34:32" pos:end="34:38"><operator pos:start="34:32" pos:end="34:32">&amp;</operator><name pos:start="34:33" pos:end="34:38">in_num</name></expr></argument>, <argument pos:start="34:41" pos:end="34:54"><expr pos:start="34:41" pos:end="34:54"><name pos:start="34:41" pos:end="34:44">addr</name> <operator pos:start="34:46" pos:end="34:46">+</operator> <name pos:start="34:48" pos:end="34:54">out_num</name></expr></argument>, <argument pos:start="34:57" pos:end="34:69"><expr pos:start="34:57" pos:end="34:69"><name pos:start="34:57" pos:end="34:59">iov</name> <operator pos:start="34:61" pos:end="34:61">+</operator> <name pos:start="34:63" pos:end="34:69">out_num</name></expr></argument>,
                               <argument pos:start="35:32" pos:end="35:59"><expr pos:start="35:32" pos:end="35:59"><name pos:start="35:32" pos:end="35:49">VIRTQUEUE_MAX_SIZE</name> <operator pos:start="35:51" pos:end="35:51">-</operator> <name pos:start="35:53" pos:end="35:59">out_num</name></expr></argument>, <argument pos:start="35:62" pos:end="35:65"><expr pos:start="35:62" pos:end="35:65"><name pos:start="35:62" pos:end="35:65">true</name></expr></argument>, <argument pos:start="35:68" pos:end="35:76"><expr pos:start="35:68" pos:end="35:76"><name pos:start="35:68" pos:end="35:76"><name pos:start="35:68" pos:end="35:71">desc</name><operator pos:start="35:72" pos:end="35:72">.</operator><name pos:start="35:73" pos:end="35:76">addr</name></name></expr></argument>, <argument pos:start="35:79" pos:end="35:86"><expr pos:start="35:79" pos:end="35:86"><name pos:start="35:79" pos:end="35:86"><name pos:start="35:79" pos:end="35:82">desc</name><operator pos:start="35:83" pos:end="35:83">.</operator><name pos:start="35:84" pos:end="35:86">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="36:11" pos:end="56:16">else <block pos:start="36:16" pos:end="56:16">{<block_content pos:start="37:13" pos:end="56:16">
            <if_stmt pos:start="37:13" pos:end="56:16"><if pos:start="37:13" pos:end="56:16">if <condition pos:start="37:16" pos:end="37:23">(<expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">in_num</name></expr>)</condition> <block pos:start="37:25" pos:end="56:16">{<block_content pos:start="38:17" pos:end="56:16">
                <expr_stmt pos:start="38:17" pos:end="38:64"><expr pos:start="38:17" pos:end="38:63"><call pos:start="38:17" pos:end="38:63"><name pos:start="38:17" pos:end="38:28">error_report</name><argument_list pos:start="38:29" pos:end="38:63">(<argument pos:start="38:30" pos:end="38:62"><expr pos:start="38:30" pos:end="38:62"><literal type="string" pos:start="38:30" pos:end="38:62">"Incorrect order for descriptors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="39:13" pos:end="40:79"><expr pos:start="39:13" pos:end="40:78"><call pos:start="39:13" pos:end="40:78"><name pos:start="39:13" pos:end="39:30">virtqueue_map_desc</name><argument_list pos:start="39:31" pos:end="40:78">(<argument pos:start="39:32" pos:end="39:39"><expr pos:start="39:32" pos:end="39:39"><operator pos:start="39:32" pos:end="39:32">&amp;</operator><name pos:start="39:33" pos:end="39:39">out_num</name></expr></argument>, <argument pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><name pos:start="39:42" pos:end="39:45">addr</name></expr></argument>, <argument pos:start="39:48" pos:end="39:50"><expr pos:start="39:48" pos:end="39:50"><name pos:start="39:48" pos:end="39:50">iov</name></expr></argument>,
                               <argument pos:start="40:32" pos:end="40:49"><expr pos:start="40:32" pos:end="40:49"><name pos:start="40:32" pos:end="40:49">VIRTQUEUE_MAX_SIZE</name></expr></argument>, <argument pos:start="40:52" pos:end="40:56"><expr pos:start="40:52" pos:end="40:56"><name pos:start="40:52" pos:end="40:56">false</name></expr></argument>, <argument pos:start="40:59" pos:end="40:67"><expr pos:start="40:59" pos:end="40:67"><name pos:start="40:59" pos:end="40:67"><name pos:start="40:59" pos:end="40:62">desc</name><operator pos:start="40:63" pos:end="40:63">.</operator><name pos:start="40:64" pos:end="40:67">addr</name></name></expr></argument>, <argument pos:start="40:70" pos:end="40:77"><expr pos:start="40:70" pos:end="40:77"><name pos:start="40:70" pos:end="40:77"><name pos:start="40:70" pos:end="40:73">desc</name><operator pos:start="40:74" pos:end="40:74">.</operator><name pos:start="40:75" pos:end="40:77">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="41:9" pos:end="41:68">/* If we've got too many, that implies a descriptor loop. */</comment>
        <if_stmt pos:start="42:9" pos:end="44:5"><if pos:start="42:9" pos:end="44:5">if <condition pos:start="42:12" pos:end="42:37">(<expr pos:start="42:13" pos:end="42:36"><operator pos:start="42:13" pos:end="42:13">(</operator><name pos:start="42:14" pos:end="42:19">in_num</name> <operator pos:start="42:21" pos:end="42:21">+</operator> <name pos:start="42:23" pos:end="42:29">out_num</name><operator pos:start="42:30" pos:end="42:30">)</operator> <operator pos:start="42:32" pos:end="42:32">&gt;</operator> <name pos:start="42:34" pos:end="42:36">max</name></expr>)</condition> <block pos:start="42:39" pos:end="44:5">{<block_content pos:start="43:13" pos:end="43:46">
            <expr_stmt pos:start="43:13" pos:end="43:46"><expr pos:start="43:13" pos:end="43:45"><call pos:start="43:13" pos:end="43:45"><name pos:start="43:13" pos:end="43:24">error_report</name><argument_list pos:start="43:25" pos:end="43:45">(<argument pos:start="43:26" pos:end="43:44"><expr pos:start="43:26" pos:end="43:44"><literal type="string" pos:start="43:26" pos:end="43:44">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> <while pos:start="44:7" pos:end="44:79">while <condition pos:start="44:13" pos:end="44:78">(<expr pos:start="44:14" pos:end="44:77"><operator pos:start="44:14" pos:end="44:14">(</operator><name pos:start="44:15" pos:end="44:15">i</name> <operator pos:start="44:17" pos:end="44:17">=</operator> <call pos:start="44:19" pos:end="44:69"><name pos:start="44:19" pos:end="44:42">virtqueue_read_next_desc</name><argument_list pos:start="44:43" pos:end="44:69">(<argument pos:start="44:44" pos:end="44:47"><expr pos:start="44:44" pos:end="44:47"><name pos:start="44:44" pos:end="44:47">vdev</name></expr></argument>, <argument pos:start="44:50" pos:end="44:54"><expr pos:start="44:50" pos:end="44:54"><operator pos:start="44:50" pos:end="44:50">&amp;</operator><name pos:start="44:51" pos:end="44:54">desc</name></expr></argument>, <argument pos:start="44:57" pos:end="44:63"><expr pos:start="44:57" pos:end="44:63"><name pos:start="44:57" pos:end="44:63">desc_pa</name></expr></argument>, <argument pos:start="44:66" pos:end="44:68"><expr pos:start="44:66" pos:end="44:68"><name pos:start="44:66" pos:end="44:68">max</name></expr></argument>)</argument_list></call><operator pos:start="44:70" pos:end="44:70">)</operator> <operator pos:start="44:72" pos:end="44:73">!=</operator> <name pos:start="44:75" pos:end="44:77">max</name></expr>)</condition><block type="pseudo" pos:start="44:79" pos:end="44:79"><block_content pos:start="44:79" pos:end="44:79"><empty_stmt pos:start="44:79" pos:end="44:79">;</empty_stmt></block_content></block></while>
    <comment type="block" pos:start="45:5" pos:end="45:52">/* Now copy what we have collected and mapped */</comment>
    <expr_stmt pos:start="46:5" pos:end="46:56"><expr pos:start="46:5" pos:end="46:55"><name pos:start="46:5" pos:end="46:8">elem</name> <operator pos:start="46:10" pos:end="46:10">=</operator> <call pos:start="46:12" pos:end="46:55"><name pos:start="46:12" pos:end="46:34">virtqueue_alloc_element</name><argument_list pos:start="46:35" pos:end="46:55">(<argument pos:start="46:36" pos:end="46:37"><expr pos:start="46:36" pos:end="46:37"><name pos:start="46:36" pos:end="46:37">sz</name></expr></argument>, <argument pos:start="46:40" pos:end="46:46"><expr pos:start="46:40" pos:end="46:46"><name pos:start="46:40" pos:end="46:46">out_num</name></expr></argument>, <argument pos:start="46:49" pos:end="46:54"><expr pos:start="46:49" pos:end="46:54"><name pos:start="46:49" pos:end="46:54">in_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:23"><expr pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:8">elem</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:15">index</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:22">head</name></expr>;</expr_stmt>
    <for pos:start="48:5" pos:end="56:16">for <control pos:start="48:9" pos:end="48:33">(<init pos:start="48:10" pos:end="48:15"><expr pos:start="48:10" pos:end="48:14"><name pos:start="48:10" pos:end="48:10">i</name> <operator pos:start="48:12" pos:end="48:12">=</operator> <literal type="number" pos:start="48:14" pos:end="48:14">0</literal></expr>;</init> <condition pos:start="48:17" pos:end="48:28"><expr pos:start="48:17" pos:end="48:27"><name pos:start="48:17" pos:end="48:17">i</name> <operator pos:start="48:19" pos:end="48:19">&lt;</operator> <name pos:start="48:21" pos:end="48:27">out_num</name></expr>;</condition> <incr pos:start="48:30" pos:end="48:32"><expr pos:start="48:30" pos:end="48:32"><name pos:start="48:30" pos:end="48:30">i</name><operator pos:start="48:31" pos:end="48:32">++</operator></expr></incr>)</control> <block pos:start="48:35" pos:end="56:16">{<block_content pos:start="49:9" pos:end="56:16">
        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:12">elem</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:22">out_addr</name><index pos:start="49:23" pos:end="49:25">[<expr pos:start="49:24" pos:end="49:24"><name pos:start="49:24" pos:end="49:24">i</name></expr>]</index></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:35"><name pos:start="49:29" pos:end="49:32">addr</name><index pos:start="49:33" pos:end="49:35">[<expr pos:start="49:34" pos:end="49:34"><name pos:start="49:34" pos:end="49:34">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:33"><expr pos:start="50:9" pos:end="50:32"><name pos:start="50:9" pos:end="50:23"><name pos:start="50:9" pos:end="50:12">elem</name><operator pos:start="50:13" pos:end="50:14">-&gt;</operator><name pos:start="50:15" pos:end="50:20">out_sg</name><index pos:start="50:21" pos:end="50:23">[<expr pos:start="50:22" pos:end="50:22"><name pos:start="50:22" pos:end="50:22">i</name></expr>]</index></name> <operator pos:start="50:25" pos:end="50:25">=</operator> <name pos:start="50:27" pos:end="50:32"><name pos:start="50:27" pos:end="50:29">iov</name><index pos:start="50:30" pos:end="50:32">[<expr pos:start="50:31" pos:end="50:31"><name pos:start="50:31" pos:end="50:31">i</name></expr>]</index></name></expr>;</expr_stmt>
    <for pos:start="51:5" pos:end="56:16">for <control pos:start="51:9" pos:end="51:32">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:27"><expr pos:start="51:17" pos:end="51:26"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:26">in_num</name></expr>;</condition> <incr pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:29">i</name><operator pos:start="51:30" pos:end="51:31">++</operator></expr></incr>)</control> <block pos:start="51:34" pos:end="56:16">{<block_content pos:start="52:9" pos:end="56:16">
        <expr_stmt pos:start="52:9" pos:end="52:45"><expr pos:start="52:9" pos:end="52:44"><name pos:start="52:9" pos:end="52:24"><name pos:start="52:9" pos:end="52:12">elem</name><operator pos:start="52:13" pos:end="52:14">-&gt;</operator><name pos:start="52:15" pos:end="52:21">in_addr</name><index pos:start="52:22" pos:end="52:24">[<expr pos:start="52:23" pos:end="52:23"><name pos:start="52:23" pos:end="52:23">i</name></expr>]</index></name> <operator pos:start="52:26" pos:end="52:26">=</operator> <name pos:start="52:28" pos:end="52:44"><name pos:start="52:28" pos:end="52:31">addr</name><index pos:start="52:32" pos:end="52:44">[<expr pos:start="52:33" pos:end="52:43"><name pos:start="52:33" pos:end="52:39">out_num</name> <operator pos:start="52:41" pos:end="52:41">+</operator> <name pos:start="52:43" pos:end="52:43">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:12">elem</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:19">in_sg</name><index pos:start="53:20" pos:end="53:22">[<expr pos:start="53:21" pos:end="53:21"><name pos:start="53:21" pos:end="53:21">i</name></expr>]</index></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:41"><name pos:start="53:26" pos:end="53:28">iov</name><index pos:start="53:29" pos:end="53:41">[<expr pos:start="53:30" pos:end="53:40"><name pos:start="53:30" pos:end="53:36">out_num</name> <operator pos:start="53:38" pos:end="53:38">+</operator> <name pos:start="53:40" pos:end="53:40">i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:16"><expr pos:start="54:5" pos:end="54:15"><name pos:start="54:5" pos:end="54:13"><name pos:start="54:5" pos:end="54:6">vq</name><operator pos:start="54:7" pos:end="54:8">-&gt;</operator><name pos:start="54:9" pos:end="54:13">inuse</name></name><operator pos:start="54:14" pos:end="54:15">++</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:63"><expr pos:start="55:5" pos:end="55:62"><call pos:start="55:5" pos:end="55:62"><name pos:start="55:5" pos:end="55:23">trace_virtqueue_pop</name><argument_list pos:start="55:24" pos:end="55:62">(<argument pos:start="55:25" pos:end="55:26"><expr pos:start="55:25" pos:end="55:26"><name pos:start="55:25" pos:end="55:26">vq</name></expr></argument>, <argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">elem</name></expr></argument>, <argument pos:start="55:35" pos:end="55:46"><expr pos:start="55:35" pos:end="55:46"><name pos:start="55:35" pos:end="55:46"><name pos:start="55:35" pos:end="55:38">elem</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:46">in_num</name></name></expr></argument>, <argument pos:start="55:49" pos:end="55:61"><expr pos:start="55:49" pos:end="55:61"><name pos:start="55:49" pos:end="55:61"><name pos:start="55:49" pos:end="55:52">elem</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:61">out_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="56:5" pos:end="56:16">return <expr pos:start="56:12" pos:end="56:15"><name pos:start="56:12" pos:end="56:15">elem</name></expr>;</return></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></do></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
