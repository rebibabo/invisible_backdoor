<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17869.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">monitor_disas</name><parameter_list pos:start="1:19" pos:end="3:65">(<parameter pos:start="1:20" pos:end="1:31"><decl pos:start="1:20" pos:end="1:31"><type pos:start="1:20" pos:end="1:31"><name pos:start="1:20" pos:end="1:26">Monitor</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">mon</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:41">CPUState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">cpu</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:34"><decl pos:start="3:20" pos:end="3:34"><type pos:start="3:20" pos:end="3:34"><name pos:start="3:20" pos:end="3:31">target_ulong</name></type> <name pos:start="3:33" pos:end="3:34">pc</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:47"><decl pos:start="3:37" pos:end="3:47"><type pos:start="3:37" pos:end="3:47"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:47">nb_insn</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:64">is_physical</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:5">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><call pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:32">CPU_GET_CLASS</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">count</name></decl>, <decl pos:start="9:16" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">CPUDebug</name></type> <name pos:start="11:14" pos:end="11:14">s</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:64"><expr pos:start="15:5" pos:end="15:63"><call pos:start="15:5" pos:end="15:63"><name pos:start="15:5" pos:end="15:25">INIT_DISASSEMBLE_INFO</name><argument_list pos:start="15:26" pos:end="15:63">(<argument pos:start="15:27" pos:end="15:32"><expr pos:start="15:27" pos:end="15:32"><name pos:start="15:27" pos:end="15:32"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:28">.</operator><name pos:start="15:29" pos:end="15:32">info</name></name></expr></argument>, <argument pos:start="15:35" pos:end="15:45"><expr pos:start="15:35" pos:end="15:45"><operator pos:start="15:35" pos:end="15:35">(</operator><name pos:start="15:36" pos:end="15:39">FILE</name> <operator pos:start="15:41" pos:end="15:41">*</operator><operator pos:start="15:42" pos:end="15:42">)</operator><name pos:start="15:43" pos:end="15:45">mon</name></expr></argument>, <argument pos:start="15:48" pos:end="15:62"><expr pos:start="15:48" pos:end="15:62"><name pos:start="15:48" pos:end="15:62">monitor_fprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:16"><expr pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:6">.</operator><name pos:start="19:7" pos:end="19:9">cpu</name></name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:15">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:29">monitor_disas_is_physical</name> <operator pos:start="21:31" pos:end="21:31">=</operator> <name pos:start="21:33" pos:end="21:43">is_physical</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:6">.</operator><name pos:start="23:7" pos:end="23:10">info</name><operator pos:start="23:11" pos:end="23:11">.</operator><name pos:start="23:12" pos:end="23:27">read_memory_func</name></name> <operator pos:start="23:29" pos:end="23:29">=</operator> <name pos:start="23:31" pos:end="23:49">monitor_read_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:54"><expr pos:start="25:5" pos:end="25:53"><name pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:6">.</operator><name pos:start="25:7" pos:end="25:10">info</name><operator pos:start="25:11" pos:end="25:11">.</operator><name pos:start="25:12" pos:end="25:29">print_address_func</name></name> <operator pos:start="25:31" pos:end="25:31">=</operator> <name pos:start="25:33" pos:end="25:53">generic_print_address</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:6">.</operator><name pos:start="27:7" pos:end="27:10">info</name><operator pos:start="27:11" pos:end="27:11">.</operator><name pos:start="27:12" pos:end="27:21">buffer_vma</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:26">pc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:6">.</operator><name pos:start="29:7" pos:end="29:10">info</name><operator pos:start="29:11" pos:end="29:11">.</operator><name pos:start="29:12" pos:end="29:19">cap_arch</name></name> <operator pos:start="29:21" pos:end="29:21">=</operator> <operator pos:start="29:23" pos:end="29:23">-</operator><literal type="number" pos:start="29:24" pos:end="29:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="36:0"><expr pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:6">.</operator><name pos:start="31:7" pos:end="31:10">info</name><operator pos:start="31:11" pos:end="31:11">.</operator><name pos:start="31:12" pos:end="31:19">cap_mode</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="35:1" pos:end="35:29">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:6">.</operator><name pos:start="37:7" pos:end="37:10">info</name><operator pos:start="37:11" pos:end="37:11">.</operator><name pos:start="37:12" pos:end="37:17">endian</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:34">BFD_ENDIAN_BIG</name></expr>;</expr_stmt>

<cpp:else pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:6">.</operator><name pos:start="41:7" pos:end="41:10">info</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:17">endian</name></name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:37">BFD_ENDIAN_LITTLE</name></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:27">(<expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:10">cc</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:26">disas_set_info</name></name></expr>)</condition> <block pos:start="47:29" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:41">

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:10">cc</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:26">disas_set_info</name></name><argument_list pos:start="49:27" pos:end="49:40">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">cpu</name></expr></argument>, <argument pos:start="49:33" pos:end="49:39"><expr pos:start="49:33" pos:end="49:39"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:39"><name pos:start="49:34" pos:end="49:34">s</name><operator pos:start="49:35" pos:end="49:35">.</operator><name pos:start="49:36" pos:end="49:39">info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:72">(<expr pos:start="55:9" pos:end="55:71"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:10">.</operator><name pos:start="55:11" pos:end="55:14">info</name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:23">cap_arch</name></name> <operator pos:start="55:25" pos:end="55:26">&gt;=</operator> <literal type="number" pos:start="55:28" pos:end="55:28">0</literal> <operator pos:start="55:30" pos:end="55:31">&amp;&amp;</operator> <call pos:start="55:33" pos:end="55:71"><name pos:start="55:33" pos:end="55:49">cap_disas_monitor</name><argument_list pos:start="55:50" pos:end="55:71">(<argument pos:start="55:51" pos:end="55:57"><expr pos:start="55:51" pos:end="55:57"><operator pos:start="55:51" pos:end="55:51">&amp;</operator><name pos:start="55:52" pos:end="55:57"><name pos:start="55:52" pos:end="55:52">s</name><operator pos:start="55:53" pos:end="55:53">.</operator><name pos:start="55:54" pos:end="55:57">info</name></name></expr></argument>, <argument pos:start="55:60" pos:end="55:61"><expr pos:start="55:60" pos:end="55:61"><name pos:start="55:60" pos:end="55:61">pc</name></expr></argument>, <argument pos:start="55:64" pos:end="55:70"><expr pos:start="55:64" pos:end="55:70"><name pos:start="55:64" pos:end="55:70">nb_insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:74" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:15">

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:27">(<expr pos:start="63:9" pos:end="63:26"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:26"><name pos:start="63:10" pos:end="63:10">s</name><operator pos:start="63:11" pos:end="63:11">.</operator><name pos:start="63:12" pos:end="63:15">info</name><operator pos:start="63:16" pos:end="63:16">.</operator><name pos:start="63:17" pos:end="63:26">print_insn</name></name></expr>)</condition> <block pos:start="63:29" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:15">

        <expr_stmt pos:start="65:9" pos:end="67:72"><expr pos:start="65:9" pos:end="67:71"><call pos:start="65:9" pos:end="67:71"><name pos:start="65:9" pos:end="65:22">monitor_printf</name><argument_list pos:start="65:23" pos:end="67:71">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">mon</name></expr></argument>, <argument pos:start="65:29" pos:end="67:66"><expr pos:start="65:29" pos:end="67:66"><literal type="string" pos:start="65:29" pos:end="65:32">"0x"</literal> <name pos:start="65:34" pos:end="65:46">TARGET_FMT_lx</name>

                       <literal type="string" pos:start="67:24" pos:end="67:66">": Asm output not supported on this arch\n"</literal></expr></argument>, <argument pos:start="67:69" pos:end="67:70"><expr pos:start="67:69" pos:end="67:70"><name pos:start="67:69" pos:end="67:70">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="75:5" pos:end="89:5">for<control pos:start="75:8" pos:end="75:32">(<init pos:start="75:9" pos:end="75:14"><expr pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:9">i</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <literal type="number" pos:start="75:13" pos:end="75:13">0</literal></expr>;</init> <condition pos:start="75:16" pos:end="75:27"><expr pos:start="75:16" pos:end="75:26"><name pos:start="75:16" pos:end="75:16">i</name> <operator pos:start="75:18" pos:end="75:18">&lt;</operator> <name pos:start="75:20" pos:end="75:26">nb_insn</name></expr>;</condition> <incr pos:start="75:29" pos:end="75:31"><expr pos:start="75:29" pos:end="75:31"><name pos:start="75:29" pos:end="75:29">i</name><operator pos:start="75:30" pos:end="75:31">++</operator></expr></incr>)</control> <block pos:start="75:34" pos:end="89:5">{<block_content pos:start="77:9" pos:end="87:20">

	<expr_stmt pos:start="77:9" pos:end="77:58"><expr pos:start="77:9" pos:end="77:57"><call pos:start="77:9" pos:end="77:57"><name pos:start="77:9" pos:end="77:22">monitor_printf</name><argument_list pos:start="77:23" pos:end="77:57">(<argument pos:start="77:24" pos:end="77:26"><expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">mon</name></expr></argument>, <argument pos:start="77:29" pos:end="77:52"><expr pos:start="77:29" pos:end="77:52"><literal type="string" pos:start="77:29" pos:end="77:32">"0x"</literal> <name pos:start="77:34" pos:end="77:46">TARGET_FMT_lx</name> <literal type="string" pos:start="77:48" pos:end="77:52">":  "</literal></expr></argument>, <argument pos:start="77:55" pos:end="77:56"><expr pos:start="77:55" pos:end="77:56"><name pos:start="77:55" pos:end="77:56">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:47"><expr pos:start="79:9" pos:end="79:46"><name pos:start="79:9" pos:end="79:13">count</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:46"><name pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:18">.</operator><name pos:start="79:19" pos:end="79:22">info</name><operator pos:start="79:23" pos:end="79:23">.</operator><name pos:start="79:24" pos:end="79:33">print_insn</name></name><argument_list pos:start="79:34" pos:end="79:46">(<argument pos:start="79:35" pos:end="79:36"><expr pos:start="79:35" pos:end="79:36"><name pos:start="79:35" pos:end="79:36">pc</name></expr></argument>, <argument pos:start="79:39" pos:end="79:45"><expr pos:start="79:39" pos:end="79:45"><operator pos:start="79:39" pos:end="79:39">&amp;</operator><name pos:start="79:40" pos:end="79:45"><name pos:start="79:40" pos:end="79:40">s</name><operator pos:start="79:41" pos:end="79:41">.</operator><name pos:start="79:42" pos:end="79:45">info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><call pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:22">monitor_printf</name><argument_list pos:start="81:23" pos:end="81:33">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">mon</name></expr></argument>, <argument pos:start="81:29" pos:end="81:32"><expr pos:start="81:29" pos:end="81:32"><literal type="string" pos:start="81:29" pos:end="81:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="83:9" pos:end="85:18"><if pos:start="83:9" pos:end="85:18">if <condition pos:start="83:12" pos:end="83:22">(<expr pos:start="83:13" pos:end="83:21"><name pos:start="83:13" pos:end="83:17">count</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:21">0</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:18"><block_content pos:start="85:13" pos:end="85:18">

	    <break pos:start="85:13" pos:end="85:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:20"><expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:10">pc</name> <operator pos:start="87:12" pos:end="87:13">+=</operator> <name pos:start="87:15" pos:end="87:19">count</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
