<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26980.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">gen_msa_elm_df</name><parameter_list pos:start="1:27" pos:end="3:19">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:39">CPUMIPSState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:58">DisasContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">ctx</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:76"><decl pos:start="1:66" pos:end="1:76"><type pos:start="1:66" pos:end="1:76"><name pos:start="1:66" pos:end="1:73">uint32_t</name></type> <name pos:start="1:75" pos:end="1:76">df</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:18"><decl pos:start="3:9" pos:end="3:18"><type pos:start="3:9" pos:end="3:18"><name pos:start="3:9" pos:end="3:16">uint32_t</name></type> <name pos:start="3:18" pos:end="3:18">n</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="105:1">{<block_content pos:start="9:5" pos:end="103:27">

<cpp:define pos:start="7:1" pos:end="7:69">#<cpp:directive pos:start="7:2" pos:end="7:7">define</cpp:directive> <cpp:macro pos:start="7:9" pos:end="7:24"><name pos:start="7:9" pos:end="7:20">MASK_MSA_ELM</name><parameter_list pos:start="7:21" pos:end="7:24">(<parameter pos:start="7:22" pos:end="7:23"><type pos:start="7:22" pos:end="7:23"><name pos:start="7:22" pos:end="7:23">op</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value pos:start="7:29" pos:end="7:69">(MASK_MSA_MINOR(op) | (op &amp; (0xf &lt;&lt; 22)))</cpp:value></cpp:define>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:14">ws</name> <init pos:start="9:16" pos:end="9:43">= <expr pos:start="9:18" pos:end="9:43"><operator pos:start="9:18" pos:end="9:18">(</operator><name pos:start="9:19" pos:end="9:29"><name pos:start="9:19" pos:end="9:21">ctx</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:29">opcode</name></name> <operator pos:start="9:31" pos:end="9:32">&gt;&gt;</operator> <literal type="number" pos:start="9:34" pos:end="9:35">11</literal><operator pos:start="9:36" pos:end="9:36">)</operator> <operator pos:start="9:38" pos:end="9:38">&amp;</operator> <literal type="number" pos:start="9:40" pos:end="9:43">0x1f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:14">wd</name> <init pos:start="11:16" pos:end="11:42">= <expr pos:start="11:18" pos:end="11:42"><operator pos:start="11:18" pos:end="11:18">(</operator><name pos:start="11:19" pos:end="11:29"><name pos:start="11:19" pos:end="11:21">ctx</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:29">opcode</name></name> <operator pos:start="11:31" pos:end="11:32">&gt;&gt;</operator> <literal type="number" pos:start="11:34" pos:end="11:34">6</literal><operator pos:start="11:35" pos:end="11:35">)</operator> <operator pos:start="11:37" pos:end="11:37">&amp;</operator> <literal type="number" pos:start="11:39" pos:end="11:42">0x1f</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">TCGv_i32</name></type> <name pos:start="15:14" pos:end="15:16">tws</name> <init pos:start="15:18" pos:end="15:36">= <expr pos:start="15:20" pos:end="15:36"><call pos:start="15:20" pos:end="15:36"><name pos:start="15:20" pos:end="15:32">tcg_const_i32</name><argument_list pos:start="15:33" pos:end="15:36">(<argument pos:start="15:34" pos:end="15:35"><expr pos:start="15:34" pos:end="15:35"><name pos:start="15:34" pos:end="15:35">ws</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">TCGv_i32</name></type> <name pos:start="17:14" pos:end="17:16">twd</name> <init pos:start="17:18" pos:end="17:36">= <expr pos:start="17:20" pos:end="17:36"><call pos:start="17:20" pos:end="17:36"><name pos:start="17:20" pos:end="17:32">tcg_const_i32</name><argument_list pos:start="17:33" pos:end="17:36">(<argument pos:start="17:34" pos:end="17:35"><expr pos:start="17:34" pos:end="17:35"><name pos:start="17:34" pos:end="17:35">wd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">TCGv_i32</name></type> <name pos:start="19:14" pos:end="19:15">tn</name>  <init pos:start="19:18" pos:end="19:35">= <expr pos:start="19:20" pos:end="19:35"><call pos:start="19:20" pos:end="19:35"><name pos:start="19:20" pos:end="19:32">tcg_const_i32</name><argument_list pos:start="19:33" pos:end="19:35">(<argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><name pos:start="19:34" pos:end="19:34">n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">TCGv_i32</name></type> <name pos:start="21:14" pos:end="21:16">tdf</name> <init pos:start="21:18" pos:end="21:36">= <expr pos:start="21:20" pos:end="21:36"><call pos:start="21:20" pos:end="21:36"><name pos:start="21:20" pos:end="21:32">tcg_const_i32</name><argument_list pos:start="21:33" pos:end="21:36">(<argument pos:start="21:34" pos:end="21:35"><expr pos:start="21:34" pos:end="21:35"><name pos:start="21:34" pos:end="21:35">df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <switch pos:start="25:5" pos:end="95:5">switch <condition pos:start="25:12" pos:end="25:38">(<expr pos:start="25:13" pos:end="25:37"><call pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:24">MASK_MSA_ELM</name><argument_list pos:start="25:25" pos:end="25:37">(<argument pos:start="25:26" pos:end="25:36"><expr pos:start="25:26" pos:end="25:36"><name pos:start="25:26" pos:end="25:36"><name pos:start="25:26" pos:end="25:28">ctx</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:36">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:40" pos:end="95:5">{<block_content pos:start="27:5" pos:end="93:45">

    <case pos:start="27:5" pos:end="27:21">case <expr pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:20">OPC_SLDI_df</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:59"><expr pos:start="29:9" pos:end="29:58"><call pos:start="29:9" pos:end="29:58"><name pos:start="29:9" pos:end="29:30">gen_helper_msa_sldi_df</name><argument_list pos:start="29:31" pos:end="29:58">(<argument pos:start="29:32" pos:end="29:38"><expr pos:start="29:32" pos:end="29:38"><name pos:start="29:32" pos:end="29:38">cpu_env</name></expr></argument>, <argument pos:start="29:41" pos:end="29:43"><expr pos:start="29:41" pos:end="29:43"><name pos:start="29:41" pos:end="29:43">tdf</name></expr></argument>, <argument pos:start="29:46" pos:end="29:48"><expr pos:start="29:46" pos:end="29:48"><name pos:start="29:46" pos:end="29:48">twd</name></expr></argument>, <argument pos:start="29:51" pos:end="29:53"><expr pos:start="29:51" pos:end="29:53"><name pos:start="29:51" pos:end="29:53">tws</name></expr></argument>, <argument pos:start="29:56" pos:end="29:57"><expr pos:start="29:56" pos:end="29:57"><name pos:start="29:56" pos:end="29:57">tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:23">case <expr pos:start="33:10" pos:end="33:22"><name pos:start="33:10" pos:end="33:22">OPC_SPLATI_df</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:61"><expr pos:start="35:9" pos:end="35:60"><call pos:start="35:9" pos:end="35:60"><name pos:start="35:9" pos:end="35:32">gen_helper_msa_splati_df</name><argument_list pos:start="35:33" pos:end="35:60">(<argument pos:start="35:34" pos:end="35:40"><expr pos:start="35:34" pos:end="35:40"><name pos:start="35:34" pos:end="35:40">cpu_env</name></expr></argument>, <argument pos:start="35:43" pos:end="35:45"><expr pos:start="35:43" pos:end="35:45"><name pos:start="35:43" pos:end="35:45">tdf</name></expr></argument>, <argument pos:start="35:48" pos:end="35:50"><expr pos:start="35:48" pos:end="35:50"><name pos:start="35:48" pos:end="35:50">twd</name></expr></argument>, <argument pos:start="35:53" pos:end="35:55"><expr pos:start="35:53" pos:end="35:55"><name pos:start="35:53" pos:end="35:55">tws</name></expr></argument>, <argument pos:start="35:58" pos:end="35:59"><expr pos:start="35:58" pos:end="35:59"><name pos:start="35:58" pos:end="35:59">tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:22">case <expr pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:21">OPC_INSVE_df</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:60"><expr pos:start="41:9" pos:end="41:59"><call pos:start="41:9" pos:end="41:59"><name pos:start="41:9" pos:end="41:31">gen_helper_msa_insve_df</name><argument_list pos:start="41:32" pos:end="41:59">(<argument pos:start="41:33" pos:end="41:39"><expr pos:start="41:33" pos:end="41:39"><name pos:start="41:33" pos:end="41:39">cpu_env</name></expr></argument>, <argument pos:start="41:42" pos:end="41:44"><expr pos:start="41:42" pos:end="41:44"><name pos:start="41:42" pos:end="41:44">tdf</name></expr></argument>, <argument pos:start="41:47" pos:end="41:49"><expr pos:start="41:47" pos:end="41:49"><name pos:start="41:47" pos:end="41:49">twd</name></expr></argument>, <argument pos:start="41:52" pos:end="41:54"><expr pos:start="41:52" pos:end="41:54"><name pos:start="41:52" pos:end="41:54">tws</name></expr></argument>, <argument pos:start="41:57" pos:end="41:58"><expr pos:start="41:57" pos:end="41:58"><name pos:start="41:57" pos:end="41:58">tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:23">case <expr pos:start="45:10" pos:end="45:22"><name pos:start="45:10" pos:end="45:22">OPC_COPY_S_df</name></expr>:</case>

    <case pos:start="47:5" pos:end="47:23">case <expr pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:22">OPC_COPY_U_df</name></expr>:</case>

    <case pos:start="49:5" pos:end="52:0">case <expr pos:start="49:10" pos:end="49:22"><name pos:start="49:10" pos:end="49:22">OPC_INSERT_df</name></expr>:</case>

<cpp:if pos:start="51:1" pos:end="51:27">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:27"><operator pos:start="51:5" pos:end="51:5">!</operator><call pos:start="51:6" pos:end="51:27"><name pos:start="51:6" pos:end="51:12">defined</name><argument_list pos:start="51:13" pos:end="51:27">(<argument pos:start="51:14" pos:end="51:26"><expr pos:start="51:14" pos:end="51:26"><name pos:start="51:14" pos:end="51:26">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="53:9" pos:end="53:49">/* Double format valid only for MIPS64 */</comment>

        <if_stmt pos:start="55:9" pos:end="64:0"><if pos:start="55:9" pos:end="64:0">if <condition pos:start="55:12" pos:end="55:28">(<expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:14">df</name> <operator pos:start="55:16" pos:end="55:17">==</operator> <name pos:start="55:19" pos:end="55:27">DF_DOUBLE</name></expr>)</condition> <block pos:start="55:30" pos:end="64:0">{<block_content pos:start="57:13" pos:end="59:18">

            <expr_stmt pos:start="57:13" pos:end="57:49"><expr pos:start="57:13" pos:end="57:48"><call pos:start="57:13" pos:end="57:48"><name pos:start="57:13" pos:end="57:34">generate_exception_end</name><argument_list pos:start="57:35" pos:end="57:48">(<argument pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><name pos:start="57:36" pos:end="57:38">ctx</name></expr></argument>, <argument pos:start="57:41" pos:end="57:47"><expr pos:start="57:41" pos:end="57:47"><name pos:start="57:41" pos:end="57:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="65:9" pos:end="85:9">switch <condition pos:start="65:16" pos:end="65:42">(<expr pos:start="65:17" pos:end="65:41"><call pos:start="65:17" pos:end="65:41"><name pos:start="65:17" pos:end="65:28">MASK_MSA_ELM</name><argument_list pos:start="65:29" pos:end="65:41">(<argument pos:start="65:30" pos:end="65:40"><expr pos:start="65:30" pos:end="65:40"><name pos:start="65:30" pos:end="65:40"><name pos:start="65:30" pos:end="65:32">ctx</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:40">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:44" pos:end="85:9">{<block_content pos:start="67:9" pos:end="83:18">

        <case pos:start="67:9" pos:end="67:27">case <expr pos:start="67:14" pos:end="67:26"><name pos:start="67:14" pos:end="67:26">OPC_COPY_S_df</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:65"><expr pos:start="69:13" pos:end="69:64"><call pos:start="69:13" pos:end="69:64"><name pos:start="69:13" pos:end="69:36">gen_helper_msa_copy_s_df</name><argument_list pos:start="69:37" pos:end="69:64">(<argument pos:start="69:38" pos:end="69:44"><expr pos:start="69:38" pos:end="69:44"><name pos:start="69:38" pos:end="69:44">cpu_env</name></expr></argument>, <argument pos:start="69:47" pos:end="69:49"><expr pos:start="69:47" pos:end="69:49"><name pos:start="69:47" pos:end="69:49">tdf</name></expr></argument>, <argument pos:start="69:52" pos:end="69:54"><expr pos:start="69:52" pos:end="69:54"><name pos:start="69:52" pos:end="69:54">twd</name></expr></argument>, <argument pos:start="69:57" pos:end="69:59"><expr pos:start="69:57" pos:end="69:59"><name pos:start="69:57" pos:end="69:59">tws</name></expr></argument>, <argument pos:start="69:62" pos:end="69:63"><expr pos:start="69:62" pos:end="69:63"><name pos:start="69:62" pos:end="69:63">tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:27">case <expr pos:start="73:14" pos:end="73:26"><name pos:start="73:14" pos:end="73:26">OPC_COPY_U_df</name></expr>:</case>

            <expr_stmt pos:start="75:13" pos:end="75:65"><expr pos:start="75:13" pos:end="75:64"><call pos:start="75:13" pos:end="75:64"><name pos:start="75:13" pos:end="75:36">gen_helper_msa_copy_u_df</name><argument_list pos:start="75:37" pos:end="75:64">(<argument pos:start="75:38" pos:end="75:44"><expr pos:start="75:38" pos:end="75:44"><name pos:start="75:38" pos:end="75:44">cpu_env</name></expr></argument>, <argument pos:start="75:47" pos:end="75:49"><expr pos:start="75:47" pos:end="75:49"><name pos:start="75:47" pos:end="75:49">tdf</name></expr></argument>, <argument pos:start="75:52" pos:end="75:54"><expr pos:start="75:52" pos:end="75:54"><name pos:start="75:52" pos:end="75:54">twd</name></expr></argument>, <argument pos:start="75:57" pos:end="75:59"><expr pos:start="75:57" pos:end="75:59"><name pos:start="75:57" pos:end="75:59">tws</name></expr></argument>, <argument pos:start="75:62" pos:end="75:63"><expr pos:start="75:62" pos:end="75:63"><name pos:start="75:62" pos:end="75:63">tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <case pos:start="79:9" pos:end="79:27">case <expr pos:start="79:14" pos:end="79:26"><name pos:start="79:14" pos:end="79:26">OPC_INSERT_df</name></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:65"><expr pos:start="81:13" pos:end="81:64"><call pos:start="81:13" pos:end="81:64"><name pos:start="81:13" pos:end="81:36">gen_helper_msa_insert_df</name><argument_list pos:start="81:37" pos:end="81:64">(<argument pos:start="81:38" pos:end="81:44"><expr pos:start="81:38" pos:end="81:44"><name pos:start="81:38" pos:end="81:44">cpu_env</name></expr></argument>, <argument pos:start="81:47" pos:end="81:49"><expr pos:start="81:47" pos:end="81:49"><name pos:start="81:47" pos:end="81:49">tdf</name></expr></argument>, <argument pos:start="81:52" pos:end="81:54"><expr pos:start="81:52" pos:end="81:54"><name pos:start="81:52" pos:end="81:54">twd</name></expr></argument>, <argument pos:start="81:57" pos:end="81:59"><expr pos:start="81:57" pos:end="81:59"><name pos:start="81:57" pos:end="81:59">tws</name></expr></argument>, <argument pos:start="81:62" pos:end="81:63"><expr pos:start="81:62" pos:end="81:63"><name pos:start="81:62" pos:end="81:63">tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <default pos:start="89:5" pos:end="89:12">default:</default>

        <expr_stmt pos:start="91:9" pos:end="91:38"><expr pos:start="91:9" pos:end="91:37"><call pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:18">MIPS_INVAL</name><argument_list pos:start="91:19" pos:end="91:37">(<argument pos:start="91:20" pos:end="91:36"><expr pos:start="91:20" pos:end="91:36"><literal type="string" pos:start="91:20" pos:end="91:36">"MSA instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:45"><expr pos:start="93:9" pos:end="93:44"><call pos:start="93:9" pos:end="93:44"><name pos:start="93:9" pos:end="93:30">generate_exception_end</name><argument_list pos:start="93:31" pos:end="93:44">(<argument pos:start="93:32" pos:end="93:34"><expr pos:start="93:32" pos:end="93:34"><name pos:start="93:32" pos:end="93:34">ctx</name></expr></argument>, <argument pos:start="93:37" pos:end="93:43"><expr pos:start="93:37" pos:end="93:43"><name pos:start="93:37" pos:end="93:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <expr_stmt pos:start="97:5" pos:end="97:27"><expr pos:start="97:5" pos:end="97:26"><call pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:21">tcg_temp_free_i32</name><argument_list pos:start="97:22" pos:end="97:26">(<argument pos:start="97:23" pos:end="97:25"><expr pos:start="97:23" pos:end="97:25"><name pos:start="97:23" pos:end="97:25">twd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><call pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:21">tcg_temp_free_i32</name><argument_list pos:start="99:22" pos:end="99:26">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">tws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:26"><expr pos:start="101:5" pos:end="101:25"><call pos:start="101:5" pos:end="101:25"><name pos:start="101:5" pos:end="101:21">tcg_temp_free_i32</name><argument_list pos:start="101:22" pos:end="101:25">(<argument pos:start="101:23" pos:end="101:24"><expr pos:start="101:23" pos:end="101:24"><name pos:start="101:23" pos:end="101:24">tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:27"><expr pos:start="103:5" pos:end="103:26"><call pos:start="103:5" pos:end="103:26"><name pos:start="103:5" pos:end="103:21">tcg_temp_free_i32</name><argument_list pos:start="103:22" pos:end="103:26">(<argument pos:start="103:23" pos:end="103:25"><expr pos:start="103:23" pos:end="103:25"><name pos:start="103:23" pos:end="103:25">tdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
