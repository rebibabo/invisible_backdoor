<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3429.c" pos:tabs="8"><function pos:start="1:1" pos:end="459:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_nal_units</name><parameter_list pos:start="1:28" pos:end="1:77">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:76"><decl pos:start="1:65" pos:end="1:76"><type pos:start="1:65" pos:end="1:76"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:76">buf_size</name></decl></parameter>)</parameter_list><block pos:start="1:78" pos:end="459:1">{<block_content pos:start="3:5" pos:end="457:21">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier> <specifier pos:start="5:22" pos:end="5:26">const</specifier></type> <name pos:start="5:28" pos:end="5:32">avctx</name><init pos:start="5:33" pos:end="5:42">= <expr pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:35">s</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:42">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">buf_index</name><init pos:start="7:18" pos:end="7:19">=<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">H264Context</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">hx</name></decl>;</decl_stmt> <comment type="line" format="doxygen" pos:start="9:22" pos:end="9:40">///&lt; thread context</comment>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">context_count</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">next_avc</name><init pos:start="13:17" pos:end="13:42">= <expr pos:start="13:19" pos:end="13:42"><ternary pos:start="13:19" pos:end="13:42"><condition pos:start="13:19" pos:end="13:29"><expr pos:start="13:19" pos:end="13:27"><name pos:start="13:19" pos:end="13:27"><name pos:start="13:19" pos:end="13:19">h</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:27">is_avc</name></name></expr> ?</condition><then pos:start="13:31" pos:end="13:31"> <expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">0</literal></expr> </then><else pos:start="13:33" pos:end="13:42">: <expr pos:start="13:35" pos:end="13:42"><name pos:start="13:35" pos:end="13:42">buf_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="30:0"><expr pos:start="17:5" pos:end="17:112"><name pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:5">h</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:19">max_contexts</name></name> <operator pos:start="17:21" pos:end="17:21">=</operator> <ternary pos:start="17:23" pos:end="17:112"><condition pos:start="17:23" pos:end="17:88"><expr pos:start="17:23" pos:end="17:86"><operator pos:start="17:23" pos:end="17:23">(</operator><name pos:start="17:24" pos:end="17:35">HAVE_THREADS</name> <operator pos:start="17:37" pos:end="17:38">&amp;&amp;</operator> <operator pos:start="17:40" pos:end="17:40">(</operator><name pos:start="17:41" pos:end="17:68"><name pos:start="17:41" pos:end="17:41">s</name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:48">avctx</name><operator pos:start="17:49" pos:end="17:50">-&gt;</operator><name pos:start="17:51" pos:end="17:68">active_thread_type</name></name><operator pos:start="17:69" pos:end="17:69">&amp;</operator><name pos:start="17:70" pos:end="17:84">FF_THREAD_SLICE</name><operator pos:start="17:85" pos:end="17:85">)</operator><operator pos:start="17:86" pos:end="17:86">)</operator></expr> ?</condition><then pos:start="17:90" pos:end="17:108"> <expr pos:start="17:90" pos:end="17:108"><name pos:start="17:90" pos:end="17:108"><name pos:start="17:90" pos:end="17:94">avctx</name><operator pos:start="17:95" pos:end="17:96">-&gt;</operator><name pos:start="17:97" pos:end="17:108">thread_count</name></name></expr> </then><else pos:start="17:110" pos:end="17:112">: <expr pos:start="17:112" pos:end="17:112"><literal type="number" pos:start="17:112" pos:end="17:112">1</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:5"><literal type="number" pos:start="19:5" pos:end="19:5">0</literal></expr></cpp:if>

    int i;

    for(i=0; i&lt;50; i++){

        av_log(NULL, AV_LOG_ERROR,"%02X ", buf[i]);

    }

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if<condition pos:start="31:7" pos:end="31:41">(<expr pos:start="31:8" pos:end="31:40"><operator pos:start="31:8" pos:end="31:8">!</operator><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:18"><name pos:start="31:10" pos:end="31:10">s</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:18">flags2</name></name> <operator pos:start="31:20" pos:end="31:20">&amp;</operator> <name pos:start="31:22" pos:end="31:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="31:40" pos:end="31:40">)</operator></expr>)</condition><block pos:start="31:42" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:29">

        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:9">h</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:24">current_slice</name></name> <operator pos:start="33:26" pos:end="33:26">=</operator> <literal type="number" pos:start="33:28" pos:end="33:28">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="37:41"><if pos:start="35:9" pos:end="37:41">if <condition pos:start="35:12" pos:end="35:28">(<expr pos:start="35:13" pos:end="35:27"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:27"><name pos:start="35:14" pos:end="35:14">s</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:27">first_field</name></name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:41"><block_content pos:start="37:13" pos:end="37:41">

            <expr_stmt pos:start="37:13" pos:end="37:41"><expr pos:start="37:13" pos:end="37:40"><name pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:34">current_picture_ptr</name></name><operator pos:start="37:35" pos:end="37:35">=</operator> <name pos:start="37:37" pos:end="37:40">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><call pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:25">ff_h264_reset_sei</name><argument_list pos:start="39:26" pos:end="39:28">(<argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><name pos:start="39:27" pos:end="39:27">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="45:5" pos:end="451:5">for<control pos:start="45:8" pos:end="45:11">(<init pos:start="45:9" pos:end="45:9">;</init><condition pos:start="45:10" pos:end="45:10">;</condition><incr/>)</control><block pos:start="45:12" pos:end="451:5">{<block_content pos:start="47:9" pos:end="449:9">

        <decl_stmt pos:start="47:9" pos:end="47:21"><decl pos:start="47:9" pos:end="47:20"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:20">consumed</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:23"><decl pos:start="49:9" pos:end="49:22"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:22">dst_length</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:23"><decl pos:start="51:9" pos:end="51:22"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:22">bit_length</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:27"><decl pos:start="53:9" pos:end="53:26"><type pos:start="53:9" pos:end="53:23"><specifier pos:start="53:9" pos:end="53:13">const</specifier> <name pos:start="53:15" pos:end="53:21">uint8_t</name> <modifier pos:start="53:23" pos:end="53:23">*</modifier></type><name pos:start="53:24" pos:end="53:26">ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:27"><decl pos:start="55:9" pos:end="55:13"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:13">i</name></decl>, <decl pos:start="55:16" pos:end="55:26"><type ref="prev" pos:start="55:9" pos:end="55:11"/><name pos:start="55:16" pos:end="55:22">nalsize</name> <init pos:start="55:24" pos:end="55:26">= <expr pos:start="55:26" pos:end="55:26"><literal type="number" pos:start="55:26" pos:end="55:26">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:16"><decl pos:start="57:9" pos:end="57:15"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:15">err</name></decl>;</decl_stmt>



        <if_stmt pos:start="61:9" pos:end="105:9"><if pos:start="61:9" pos:end="81:9">if<condition pos:start="61:11" pos:end="61:33">(<expr pos:start="61:12" pos:end="61:32"><name pos:start="61:12" pos:end="61:20">buf_index</name> <operator pos:start="61:22" pos:end="61:23">&gt;=</operator> <name pos:start="61:25" pos:end="61:32">next_avc</name></expr>)</condition> <block pos:start="61:35" pos:end="81:9">{<block_content pos:start="63:13" pos:end="79:42">

            <if_stmt pos:start="63:13" pos:end="63:44"><if pos:start="63:13" pos:end="63:44">if<condition pos:start="63:15" pos:end="63:37">(<expr pos:start="63:16" pos:end="63:36"><name pos:start="63:16" pos:end="63:24">buf_index</name> <operator pos:start="63:26" pos:end="63:27">&gt;=</operator> <name pos:start="63:29" pos:end="63:36">buf_size</name></expr>)</condition><block type="pseudo" pos:start="63:39" pos:end="63:44"><block_content pos:start="63:39" pos:end="63:44"> <break pos:start="63:39" pos:end="63:44">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:24"><expr pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:19">nalsize</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <literal type="number" pos:start="65:23" pos:end="65:23">0</literal></expr>;</expr_stmt>

            <for pos:start="67:13" pos:end="69:60">for<control pos:start="67:16" pos:end="67:51">(<init pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:21"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>;</init> <condition pos:start="67:24" pos:end="67:46"><expr pos:start="67:24" pos:end="67:45"><name pos:start="67:24" pos:end="67:24">i</name> <operator pos:start="67:26" pos:end="67:26">&lt;</operator> <name pos:start="67:28" pos:end="67:45"><name pos:start="67:28" pos:end="67:28">h</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:45">nal_length_size</name></name></expr>;</condition> <incr pos:start="67:48" pos:end="67:50"><expr pos:start="67:48" pos:end="67:50"><name pos:start="67:48" pos:end="67:48">i</name><operator pos:start="67:49" pos:end="67:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:17" pos:end="69:60"><block_content pos:start="69:17" pos:end="69:60">

                <expr_stmt pos:start="69:17" pos:end="69:60"><expr pos:start="69:17" pos:end="69:59"><name pos:start="69:17" pos:end="69:23">nalsize</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <operator pos:start="69:27" pos:end="69:27">(</operator><name pos:start="69:28" pos:end="69:34">nalsize</name> <operator pos:start="69:36" pos:end="69:37">&lt;&lt;</operator> <literal type="number" pos:start="69:39" pos:end="69:39">8</literal><operator pos:start="69:40" pos:end="69:40">)</operator> <operator pos:start="69:42" pos:end="69:42">|</operator> <name pos:start="69:44" pos:end="69:59"><name pos:start="69:44" pos:end="69:46">buf</name><index pos:start="69:47" pos:end="69:59">[<expr pos:start="69:48" pos:end="69:58"><name pos:start="69:48" pos:end="69:56">buf_index</name><operator pos:start="69:57" pos:end="69:58">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if<condition pos:start="71:15" pos:end="71:62">(<expr pos:start="71:16" pos:end="71:61"><name pos:start="71:16" pos:end="71:22">nalsize</name> <operator pos:start="71:24" pos:end="71:25">&lt;=</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal> <operator pos:start="71:29" pos:end="71:30">||</operator> <name pos:start="71:32" pos:end="71:38">nalsize</name> <operator pos:start="71:40" pos:end="71:40">&gt;</operator> <name pos:start="71:42" pos:end="71:49">buf_size</name> <operator pos:start="71:51" pos:end="71:51">-</operator> <name pos:start="71:53" pos:end="71:61">buf_index</name></expr>)</condition><block pos:start="71:63" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:22">

                <expr_stmt pos:start="73:17" pos:end="73:80"><expr pos:start="73:17" pos:end="73:79"><call pos:start="73:17" pos:end="73:79"><name pos:start="73:17" pos:end="73:22">av_log</name><argument_list pos:start="73:23" pos:end="73:79">(<argument pos:start="73:24" pos:end="73:33"><expr pos:start="73:24" pos:end="73:33"><name pos:start="73:24" pos:end="73:33"><name pos:start="73:24" pos:end="73:24">h</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:27">s</name><operator pos:start="73:28" pos:end="73:28">.</operator><name pos:start="73:29" pos:end="73:33">avctx</name></name></expr></argument>, <argument pos:start="73:36" pos:end="73:47"><expr pos:start="73:36" pos:end="73:47"><name pos:start="73:36" pos:end="73:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:50" pos:end="73:69"><expr pos:start="73:50" pos:end="73:69"><literal type="string" pos:start="73:50" pos:end="73:69">"AVC: nal size %d\n"</literal></expr></argument>, <argument pos:start="73:72" pos:end="73:78"><expr pos:start="73:72" pos:end="73:78"><name pos:start="73:72" pos:end="73:78">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="75:17" pos:end="75:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:42"><expr pos:start="79:13" pos:end="79:41"><name pos:start="79:13" pos:end="79:20">next_avc</name><operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:31">buf_index</name> <operator pos:start="79:33" pos:end="79:33">+</operator> <name pos:start="79:35" pos:end="79:41">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="105:9">else <block pos:start="81:16" pos:end="105:9">{<block_content pos:start="85:13" pos:end="103:47">

            <comment type="line" pos:start="83:13" pos:end="83:39">// start code prefix search</comment>

            <for pos:start="85:13" pos:end="93:13">for<control pos:start="85:16" pos:end="85:56">(<init pos:start="85:17" pos:end="85:17">;</init> <condition pos:start="85:19" pos:end="85:43"><expr pos:start="85:19" pos:end="85:42"><name pos:start="85:19" pos:end="85:27">buf_index</name> <operator pos:start="85:29" pos:end="85:29">+</operator> <literal type="number" pos:start="85:31" pos:end="85:31">3</literal> <operator pos:start="85:33" pos:end="85:33">&lt;</operator> <name pos:start="85:35" pos:end="85:42">next_avc</name></expr>;</condition> <incr pos:start="85:45" pos:end="85:55"><expr pos:start="85:45" pos:end="85:55"><name pos:start="85:45" pos:end="85:53">buf_index</name><operator pos:start="85:54" pos:end="85:55">++</operator></expr></incr>)</control><block pos:start="85:57" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:26">

                <comment type="line" pos:start="87:17" pos:end="87:69">// This should always succeed in the first iteration.</comment>

                <if_stmt pos:start="89:17" pos:end="91:26"><if pos:start="89:17" pos:end="91:26">if<condition pos:start="89:19" pos:end="89:89">(<expr pos:start="89:20" pos:end="89:88"><name pos:start="89:20" pos:end="89:33"><name pos:start="89:20" pos:end="89:22">buf</name><index pos:start="89:23" pos:end="89:33">[<expr pos:start="89:24" pos:end="89:32"><name pos:start="89:24" pos:end="89:32">buf_index</name></expr>]</index></name> <operator pos:start="89:35" pos:end="89:36">==</operator> <literal type="number" pos:start="89:38" pos:end="89:38">0</literal> <operator pos:start="89:40" pos:end="89:41">&amp;&amp;</operator> <name pos:start="89:43" pos:end="89:58"><name pos:start="89:43" pos:end="89:45">buf</name><index pos:start="89:46" pos:end="89:58">[<expr pos:start="89:47" pos:end="89:57"><name pos:start="89:47" pos:end="89:55">buf_index</name><operator pos:start="89:56" pos:end="89:56">+</operator><literal type="number" pos:start="89:57" pos:end="89:57">1</literal></expr>]</index></name> <operator pos:start="89:60" pos:end="89:61">==</operator> <literal type="number" pos:start="89:63" pos:end="89:63">0</literal> <operator pos:start="89:65" pos:end="89:66">&amp;&amp;</operator> <name pos:start="89:68" pos:end="89:83"><name pos:start="89:68" pos:end="89:70">buf</name><index pos:start="89:71" pos:end="89:83">[<expr pos:start="89:72" pos:end="89:82"><name pos:start="89:72" pos:end="89:80">buf_index</name><operator pos:start="89:81" pos:end="89:81">+</operator><literal type="number" pos:start="89:82" pos:end="89:82">2</literal></expr>]</index></name> <operator pos:start="89:85" pos:end="89:86">==</operator> <literal type="number" pos:start="89:88" pos:end="89:88">1</literal></expr>)</condition><block type="pseudo" pos:start="91:21" pos:end="91:26"><block_content pos:start="91:21" pos:end="91:26">

                    <break pos:start="91:21" pos:end="91:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="97:13" pos:end="97:46"><if pos:start="97:13" pos:end="97:46">if<condition pos:start="97:15" pos:end="97:39">(<expr pos:start="97:16" pos:end="97:38"><name pos:start="97:16" pos:end="97:24">buf_index</name><operator pos:start="97:25" pos:end="97:25">+</operator><literal type="number" pos:start="97:26" pos:end="97:26">3</literal> <operator pos:start="97:28" pos:end="97:29">&gt;=</operator> <name pos:start="97:31" pos:end="97:38">buf_size</name></expr>)</condition><block type="pseudo" pos:start="97:41" pos:end="97:46"><block_content pos:start="97:41" pos:end="97:46"> <break pos:start="97:41" pos:end="97:46">break;</break></block_content></block></if></if_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:25"><expr pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:21">buf_index</name><operator pos:start="101:22" pos:end="101:23">+=</operator><literal type="number" pos:start="101:24" pos:end="101:24">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="103:47"><if pos:start="103:13" pos:end="103:47">if<condition pos:start="103:15" pos:end="103:37">(<expr pos:start="103:16" pos:end="103:36"><name pos:start="103:16" pos:end="103:24">buf_index</name> <operator pos:start="103:26" pos:end="103:27">&gt;=</operator> <name pos:start="103:29" pos:end="103:36">next_avc</name></expr>)</condition><block type="pseudo" pos:start="103:39" pos:end="103:47"><block_content pos:start="103:39" pos:end="103:47"> <continue pos:start="103:39" pos:end="103:47">continue;</continue></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:46"><expr pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:10">hx</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <name pos:start="109:14" pos:end="109:45"><name pos:start="109:14" pos:end="109:14">h</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:30">thread_context</name><index pos:start="109:31" pos:end="109:45">[<expr pos:start="109:32" pos:end="109:44"><name pos:start="109:32" pos:end="109:44">context_count</name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:99"><expr pos:start="113:9" pos:end="113:98"><name pos:start="113:9" pos:end="113:11">ptr</name><operator pos:start="113:12" pos:end="113:12">=</operator> <call pos:start="113:14" pos:end="113:98"><name pos:start="113:14" pos:end="113:31">ff_h264_decode_nal</name><argument_list pos:start="113:32" pos:end="113:98">(<argument pos:start="113:33" pos:end="113:34"><expr pos:start="113:33" pos:end="113:34"><name pos:start="113:33" pos:end="113:34">hx</name></expr></argument>, <argument pos:start="113:37" pos:end="113:51"><expr pos:start="113:37" pos:end="113:51"><name pos:start="113:37" pos:end="113:39">buf</name> <operator pos:start="113:41" pos:end="113:41">+</operator> <name pos:start="113:43" pos:end="113:51">buf_index</name></expr></argument>, <argument pos:start="113:54" pos:end="113:64"><expr pos:start="113:54" pos:end="113:64"><operator pos:start="113:54" pos:end="113:54">&amp;</operator><name pos:start="113:55" pos:end="113:64">dst_length</name></expr></argument>, <argument pos:start="113:67" pos:end="113:75"><expr pos:start="113:67" pos:end="113:75"><operator pos:start="113:67" pos:end="113:67">&amp;</operator><name pos:start="113:68" pos:end="113:75">consumed</name></expr></argument>, <argument pos:start="113:78" pos:end="113:97"><expr pos:start="113:78" pos:end="113:97"><name pos:start="113:78" pos:end="113:85">next_avc</name> <operator pos:start="113:87" pos:end="113:87">-</operator> <name pos:start="113:89" pos:end="113:97">buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:40">(<expr pos:start="115:13" pos:end="115:39"><name pos:start="115:13" pos:end="115:15">ptr</name><operator pos:start="115:16" pos:end="115:17">==</operator><name pos:start="115:18" pos:end="115:21">NULL</name> <operator pos:start="115:23" pos:end="115:24">||</operator> <name pos:start="115:26" pos:end="115:35">dst_length</name> <operator pos:start="115:37" pos:end="115:37">&lt;</operator> <literal type="number" pos:start="115:39" pos:end="115:39">0</literal></expr>)</condition><block pos:start="115:41" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:22">

            <return pos:start="117:13" pos:end="117:22">return <expr pos:start="117:20" pos:end="117:21"><operator pos:start="117:20" pos:end="117:20">-</operator><literal type="number" pos:start="117:21" pos:end="117:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:32"><expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:9">i</name><operator pos:start="121:10" pos:end="121:10">=</operator> <name pos:start="121:12" pos:end="121:20">buf_index</name> <operator pos:start="121:22" pos:end="121:22">+</operator> <name pos:start="121:24" pos:end="121:31">consumed</name></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="127:51"><if pos:start="123:9" pos:end="127:51">if<condition pos:start="123:11" pos:end="125:78">(<expr pos:start="123:12" pos:end="125:77"><operator pos:start="123:12" pos:end="123:12">(</operator><name pos:start="123:13" pos:end="123:30"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:30">workaround_bugs</name></name> <operator pos:start="123:32" pos:end="123:32">&amp;</operator> <name pos:start="123:34" pos:end="123:50">FF_BUG_AUTODETECT</name><operator pos:start="123:51" pos:end="123:51">)</operator> <operator pos:start="123:53" pos:end="123:54">&amp;&amp;</operator> <name pos:start="123:56" pos:end="123:56">i</name><operator pos:start="123:57" pos:end="123:57">+</operator><literal type="number" pos:start="123:58" pos:end="123:58">3</literal><operator pos:start="123:59" pos:end="123:59">&lt;</operator><name pos:start="123:60" pos:end="123:67">next_avc</name> <operator pos:start="123:69" pos:end="123:70">&amp;&amp;</operator>

           <name pos:start="125:12" pos:end="125:17"><name pos:start="125:12" pos:end="125:14">buf</name><index pos:start="125:15" pos:end="125:17">[<expr pos:start="125:16" pos:end="125:16"><name pos:start="125:16" pos:end="125:16">i</name></expr>]</index></name><operator pos:start="125:18" pos:end="125:19">==</operator><literal type="number" pos:start="125:20" pos:end="125:23">0x00</literal> <operator pos:start="125:25" pos:end="125:26">&amp;&amp;</operator> <name pos:start="125:28" pos:end="125:35"><name pos:start="125:28" pos:end="125:30">buf</name><index pos:start="125:31" pos:end="125:35">[<expr pos:start="125:32" pos:end="125:34"><name pos:start="125:32" pos:end="125:32">i</name><operator pos:start="125:33" pos:end="125:33">+</operator><literal type="number" pos:start="125:34" pos:end="125:34">1</literal></expr>]</index></name><operator pos:start="125:36" pos:end="125:37">==</operator><literal type="number" pos:start="125:38" pos:end="125:41">0x00</literal> <operator pos:start="125:43" pos:end="125:44">&amp;&amp;</operator> <name pos:start="125:46" pos:end="125:53"><name pos:start="125:46" pos:end="125:48">buf</name><index pos:start="125:49" pos:end="125:53">[<expr pos:start="125:50" pos:end="125:52"><name pos:start="125:50" pos:end="125:50">i</name><operator pos:start="125:51" pos:end="125:51">+</operator><literal type="number" pos:start="125:52" pos:end="125:52">2</literal></expr>]</index></name><operator pos:start="125:54" pos:end="125:55">==</operator><literal type="number" pos:start="125:56" pos:end="125:59">0x01</literal> <operator pos:start="125:61" pos:end="125:62">&amp;&amp;</operator> <name pos:start="125:64" pos:end="125:71"><name pos:start="125:64" pos:end="125:66">buf</name><index pos:start="125:67" pos:end="125:71">[<expr pos:start="125:68" pos:end="125:70"><name pos:start="125:68" pos:end="125:68">i</name><operator pos:start="125:69" pos:end="125:69">+</operator><literal type="number" pos:start="125:70" pos:end="125:70">3</literal></expr>]</index></name><operator pos:start="125:72" pos:end="125:73">==</operator><literal type="number" pos:start="125:74" pos:end="125:77">0xE0</literal></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:51"><block_content pos:start="127:13" pos:end="127:51">

            <expr_stmt pos:start="127:13" pos:end="127:51"><expr pos:start="127:13" pos:end="127:50"><name pos:start="127:13" pos:end="127:30"><name pos:start="127:13" pos:end="127:13">s</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:30">workaround_bugs</name></name> <operator pos:start="127:32" pos:end="127:33">|=</operator> <name pos:start="127:35" pos:end="127:50">FF_BUG_TRUNCATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if<condition pos:start="131:11" pos:end="131:52">(<expr pos:start="131:12" pos:end="131:51"><operator pos:start="131:12" pos:end="131:12">!</operator><operator pos:start="131:13" pos:end="131:13">(</operator><name pos:start="131:14" pos:end="131:31"><name pos:start="131:14" pos:end="131:14">s</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:31">workaround_bugs</name></name> <operator pos:start="131:33" pos:end="131:33">&amp;</operator> <name pos:start="131:35" pos:end="131:50">FF_BUG_TRUNCATED</name><operator pos:start="131:51" pos:end="131:51">)</operator></expr>)</condition><block pos:start="131:53" pos:end="137:9">{<block_content pos:start="133:9" pos:end="135:25">

        <while pos:start="133:9" pos:end="135:25">while<condition pos:start="133:14" pos:end="133:57">(<expr pos:start="133:15" pos:end="133:56"><name pos:start="133:15" pos:end="133:33"><name pos:start="133:15" pos:end="133:17">ptr</name><index pos:start="133:18" pos:end="133:33">[<expr pos:start="133:19" pos:end="133:32"><name pos:start="133:19" pos:end="133:28">dst_length</name> <operator pos:start="133:30" pos:end="133:30">-</operator> <literal type="number" pos:start="133:32" pos:end="133:32">1</literal></expr>]</index></name> <operator pos:start="133:35" pos:end="133:36">==</operator> <literal type="number" pos:start="133:38" pos:end="133:38">0</literal> <operator pos:start="133:40" pos:end="133:41">&amp;&amp;</operator> <name pos:start="133:43" pos:end="133:52">dst_length</name> <operator pos:start="133:54" pos:end="133:54">&gt;</operator> <literal type="number" pos:start="133:56" pos:end="133:56">0</literal></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:25"><block_content pos:start="135:13" pos:end="135:25">

            <expr_stmt pos:start="135:13" pos:end="135:25"><expr pos:start="135:13" pos:end="135:24"><name pos:start="135:13" pos:end="135:22">dst_length</name><operator pos:start="135:23" pos:end="135:24">--</operator></expr>;</expr_stmt></block_content></block></while>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:109"><expr pos:start="139:9" pos:end="139:108"><name pos:start="139:9" pos:end="139:18">bit_length</name><operator pos:start="139:19" pos:end="139:19">=</operator> <ternary pos:start="139:21" pos:end="139:108"><condition pos:start="139:21" pos:end="139:33"><expr pos:start="139:21" pos:end="139:31"><operator pos:start="139:21" pos:end="139:21">!</operator><name pos:start="139:22" pos:end="139:31">dst_length</name></expr> ?</condition><then pos:start="139:35" pos:end="139:35"> <expr pos:start="139:35" pos:end="139:35"><literal type="number" pos:start="139:35" pos:end="139:35">0</literal></expr> </then><else pos:start="139:37" pos:end="139:108">: <expr pos:start="139:39" pos:end="139:108"><operator pos:start="139:39" pos:end="139:39">(</operator><literal type="number" pos:start="139:40" pos:end="139:40">8</literal><operator pos:start="139:41" pos:end="139:41">*</operator><name pos:start="139:42" pos:end="139:51">dst_length</name> <operator pos:start="139:53" pos:end="139:53">-</operator> <call pos:start="139:55" pos:end="139:107"><name pos:start="139:55" pos:end="139:82">ff_h264_decode_rbsp_trailing</name><argument_list pos:start="139:83" pos:end="139:107">(<argument pos:start="139:84" pos:end="139:84"><expr pos:start="139:84" pos:end="139:84"><name pos:start="139:84" pos:end="139:84">h</name></expr></argument>, <argument pos:start="139:87" pos:end="139:106"><expr pos:start="139:87" pos:end="139:106"><name pos:start="139:87" pos:end="139:89">ptr</name> <operator pos:start="139:91" pos:end="139:91">+</operator> <name pos:start="139:93" pos:end="139:102">dst_length</name> <operator pos:start="139:104" pos:end="139:104">-</operator> <literal type="number" pos:start="139:106" pos:end="139:106">1</literal></expr></argument>)</argument_list></call><operator pos:start="139:108" pos:end="139:108">)</operator></expr></else></ternary></expr>;</expr_stmt>



        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if<condition pos:start="143:11" pos:end="143:46">(<expr pos:start="143:12" pos:end="143:45"><name pos:start="143:12" pos:end="143:26"><name pos:start="143:12" pos:end="143:12">s</name><operator pos:start="143:13" pos:end="143:14">-&gt;</operator><name pos:start="143:15" pos:end="143:19">avctx</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:26">debug</name></name><operator pos:start="143:27" pos:end="143:27">&amp;</operator><name pos:start="143:28" pos:end="143:45">FF_DEBUG_STARTCODE</name></expr>)</condition><block pos:start="143:47" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:148">

            <expr_stmt pos:start="145:13" pos:end="145:148"><expr pos:start="145:13" pos:end="145:147"><call pos:start="145:13" pos:end="145:147"><name pos:start="145:13" pos:end="145:18">av_log</name><argument_list pos:start="145:19" pos:end="145:147">(<argument pos:start="145:20" pos:end="145:29"><expr pos:start="145:20" pos:end="145:29"><name pos:start="145:20" pos:end="145:29"><name pos:start="145:20" pos:end="145:20">h</name><operator pos:start="145:21" pos:end="145:22">-&gt;</operator><name pos:start="145:23" pos:end="145:23">s</name><operator pos:start="145:24" pos:end="145:24">.</operator><name pos:start="145:25" pos:end="145:29">avctx</name></name></expr></argument>, <argument pos:start="145:32" pos:end="145:43"><expr pos:start="145:32" pos:end="145:43"><name pos:start="145:32" pos:end="145:43">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="145:46" pos:end="145:77"><expr pos:start="145:46" pos:end="145:77"><literal type="string" pos:start="145:46" pos:end="145:77">"NAL %d/%d at %d/%d length %d\n"</literal></expr></argument>, <argument pos:start="145:80" pos:end="145:96"><expr pos:start="145:80" pos:end="145:96"><name pos:start="145:80" pos:end="145:96"><name pos:start="145:80" pos:end="145:81">hx</name><operator pos:start="145:82" pos:end="145:83">-&gt;</operator><name pos:start="145:84" pos:end="145:96">nal_unit_type</name></name></expr></argument>, <argument pos:start="145:99" pos:end="145:113"><expr pos:start="145:99" pos:end="145:113"><name pos:start="145:99" pos:end="145:113"><name pos:start="145:99" pos:end="145:100">hx</name><operator pos:start="145:101" pos:end="145:102">-&gt;</operator><name pos:start="145:103" pos:end="145:113">nal_ref_idc</name></name></expr></argument>, <argument pos:start="145:116" pos:end="145:124"><expr pos:start="145:116" pos:end="145:124"><name pos:start="145:116" pos:end="145:124">buf_index</name></expr></argument>, <argument pos:start="145:127" pos:end="145:134"><expr pos:start="145:127" pos:end="145:134"><name pos:start="145:127" pos:end="145:134">buf_size</name></expr></argument>, <argument pos:start="145:137" pos:end="145:146"><expr pos:start="145:137" pos:end="145:146"><name pos:start="145:137" pos:end="145:146">dst_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="151:9" pos:end="155:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:58">(<expr pos:start="151:13" pos:end="151:57"><name pos:start="151:13" pos:end="151:21"><name pos:start="151:13" pos:end="151:13">h</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:21">is_avc</name></name> <operator pos:start="151:23" pos:end="151:24">&amp;&amp;</operator> <operator pos:start="151:26" pos:end="151:26">(</operator><name pos:start="151:27" pos:end="151:33">nalsize</name> <operator pos:start="151:35" pos:end="151:36">!=</operator> <name pos:start="151:38" pos:end="151:45">consumed</name><operator pos:start="151:46" pos:end="151:46">)</operator> <operator pos:start="151:48" pos:end="151:49">&amp;&amp;</operator> <name pos:start="151:51" pos:end="151:57">nalsize</name></expr>)</condition><block pos:start="151:59" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:111">

            <expr_stmt pos:start="153:13" pos:end="153:111"><expr pos:start="153:13" pos:end="153:110"><call pos:start="153:13" pos:end="153:110"><name pos:start="153:13" pos:end="153:18">av_log</name><argument_list pos:start="153:19" pos:end="153:110">(<argument pos:start="153:20" pos:end="153:29"><expr pos:start="153:20" pos:end="153:29"><name pos:start="153:20" pos:end="153:29"><name pos:start="153:20" pos:end="153:20">h</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:23">s</name><operator pos:start="153:24" pos:end="153:24">.</operator><name pos:start="153:25" pos:end="153:29">avctx</name></name></expr></argument>, <argument pos:start="153:32" pos:end="153:43"><expr pos:start="153:32" pos:end="153:43"><name pos:start="153:32" pos:end="153:43">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="153:46" pos:end="153:90"><expr pos:start="153:46" pos:end="153:90"><literal type="string" pos:start="153:46" pos:end="153:90">"AVC: Consumed only %d bytes instead of %d\n"</literal></expr></argument>, <argument pos:start="153:93" pos:end="153:100"><expr pos:start="153:93" pos:end="153:100"><name pos:start="153:93" pos:end="153:100">consumed</name></expr></argument>, <argument pos:start="153:103" pos:end="153:109"><expr pos:start="153:103" pos:end="153:109"><name pos:start="153:103" pos:end="153:109">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:30"><expr pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:17">buf_index</name> <operator pos:start="159:19" pos:end="159:20">+=</operator> <name pos:start="159:22" pos:end="159:29">consumed</name></expr>;</expr_stmt>



        <comment type="line" pos:start="163:9" pos:end="163:37">//FIXME do not discard SEI id</comment>

        <if_stmt pos:start="165:9" pos:end="167:21"><if pos:start="165:9" pos:end="167:21">if<condition pos:start="165:11" pos:end="165:73">(<expr pos:start="165:12" pos:end="165:72"><name pos:start="165:12" pos:end="165:28"><name pos:start="165:12" pos:end="165:16">avctx</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:28">skip_frame</name></name> <operator pos:start="165:30" pos:end="165:31">&gt;=</operator> <name pos:start="165:33" pos:end="165:48">AVDISCARD_NONREF</name> <operator pos:start="165:50" pos:end="165:51">&amp;&amp;</operator> <name pos:start="165:53" pos:end="165:66"><name pos:start="165:53" pos:end="165:53">h</name><operator pos:start="165:54" pos:end="165:55">-&gt;</operator><name pos:start="165:56" pos:end="165:66">nal_ref_idc</name></name>  <operator pos:start="165:69" pos:end="165:70">==</operator> <literal type="number" pos:start="165:72" pos:end="165:72">0</literal></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:21"><block_content pos:start="167:13" pos:end="167:21">

            <continue pos:start="167:13" pos:end="167:21">continue;</continue></block_content></block></if></if_stmt>



      <label pos:start="171:7" pos:end="171:12"><name pos:start="171:7" pos:end="171:11">again</name>:</label>

        <expr_stmt pos:start="173:9" pos:end="173:16"><expr pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:11">err</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <literal type="number" pos:start="173:15" pos:end="173:15">0</literal></expr>;</expr_stmt>

        <switch pos:start="175:9" pos:end="413:9">switch<condition pos:start="175:15" pos:end="175:33">(<expr pos:start="175:16" pos:end="175:32"><name pos:start="175:16" pos:end="175:32"><name pos:start="175:16" pos:end="175:17">hx</name><operator pos:start="175:18" pos:end="175:19">-&gt;</operator><name pos:start="175:20" pos:end="175:32">nal_unit_type</name></name></expr>)</condition><block pos:start="175:34" pos:end="413:9">{<block_content pos:start="177:9" pos:end="411:107">

        <case pos:start="177:9" pos:end="177:27">case <expr pos:start="177:14" pos:end="177:26"><name pos:start="177:14" pos:end="177:26">NAL_IDR_SLICE</name></expr>:</case>

            <if_stmt pos:start="179:13" pos:end="185:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:50">(<expr pos:start="179:17" pos:end="179:49"><name pos:start="179:17" pos:end="179:32"><name pos:start="179:17" pos:end="179:17">h</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:32">nal_unit_type</name></name> <operator pos:start="179:34" pos:end="179:35">!=</operator> <name pos:start="179:37" pos:end="179:49">NAL_IDR_SLICE</name></expr>)</condition> <block pos:start="179:52" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:26">

                <expr_stmt pos:start="181:17" pos:end="181:90"><expr pos:start="181:17" pos:end="181:89"><call pos:start="181:17" pos:end="181:89"><name pos:start="181:17" pos:end="181:22">av_log</name><argument_list pos:start="181:23" pos:end="181:89">(<argument pos:start="181:24" pos:end="181:33"><expr pos:start="181:24" pos:end="181:33"><name pos:start="181:24" pos:end="181:33"><name pos:start="181:24" pos:end="181:24">h</name><operator pos:start="181:25" pos:end="181:26">-&gt;</operator><name pos:start="181:27" pos:end="181:27">s</name><operator pos:start="181:28" pos:end="181:28">.</operator><name pos:start="181:29" pos:end="181:33">avctx</name></name></expr></argument>, <argument pos:start="181:36" pos:end="181:47"><expr pos:start="181:36" pos:end="181:47"><name pos:start="181:36" pos:end="181:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:50" pos:end="181:88"><expr pos:start="181:50" pos:end="181:88"><literal type="string" pos:start="181:50" pos:end="181:88">"Invalid mix of idr and non-idr slices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="183:17" pos:end="183:26">return <expr pos:start="183:24" pos:end="183:25"><operator pos:start="183:24" pos:end="183:24">-</operator><literal type="number" pos:start="183:25" pos:end="183:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:19"><expr pos:start="187:13" pos:end="187:18"><call pos:start="187:13" pos:end="187:18"><name pos:start="187:13" pos:end="187:15">idr</name><argument_list pos:start="187:16" pos:end="187:18">(<argument pos:start="187:17" pos:end="187:17"><expr pos:start="187:17" pos:end="187:17"><name pos:start="187:17" pos:end="187:17">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="187:21" pos:end="187:84">//FIXME ensure we don't loose some frames if there is reordering</comment>

        <case pos:start="189:9" pos:end="189:23">case <expr pos:start="189:14" pos:end="189:22"><name pos:start="189:14" pos:end="189:22">NAL_SLICE</name></expr>:</case>

            <expr_stmt pos:start="191:13" pos:end="191:54"><expr pos:start="191:13" pos:end="191:53"><call pos:start="191:13" pos:end="191:53"><name pos:start="191:13" pos:end="191:25">init_get_bits</name><argument_list pos:start="191:26" pos:end="191:53">(<argument pos:start="191:27" pos:end="191:35"><expr pos:start="191:27" pos:end="191:35"><operator pos:start="191:27" pos:end="191:27">&amp;</operator><name pos:start="191:28" pos:end="191:35"><name pos:start="191:28" pos:end="191:29">hx</name><operator pos:start="191:30" pos:end="191:31">-&gt;</operator><name pos:start="191:32" pos:end="191:32">s</name><operator pos:start="191:33" pos:end="191:33">.</operator><name pos:start="191:34" pos:end="191:35">gb</name></name></expr></argument>, <argument pos:start="191:38" pos:end="191:40"><expr pos:start="191:38" pos:end="191:40"><name pos:start="191:38" pos:end="191:40">ptr</name></expr></argument>, <argument pos:start="191:43" pos:end="191:52"><expr pos:start="191:43" pos:end="191:52"><name pos:start="191:43" pos:end="191:52">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="195:40"><expr pos:start="193:13" pos:end="195:39"><name pos:start="193:13" pos:end="193:28"><name pos:start="193:13" pos:end="193:14">hx</name><operator pos:start="193:15" pos:end="193:16">-&gt;</operator><name pos:start="193:17" pos:end="193:28">intra_gb_ptr</name></name><operator pos:start="193:29" pos:end="193:29">=</operator>

            <name pos:start="195:13" pos:end="195:28"><name pos:start="195:13" pos:end="195:14">hx</name><operator pos:start="195:15" pos:end="195:16">-&gt;</operator><name pos:start="195:17" pos:end="195:28">inter_gb_ptr</name></name><operator pos:start="195:29" pos:end="195:29">=</operator> <operator pos:start="195:31" pos:end="195:31">&amp;</operator><name pos:start="195:32" pos:end="195:39"><name pos:start="195:32" pos:end="195:33">hx</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:36">s</name><operator pos:start="195:37" pos:end="195:37">.</operator><name pos:start="195:38" pos:end="195:39">gb</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:40"><expr pos:start="197:13" pos:end="197:39"><name pos:start="197:13" pos:end="197:35"><name pos:start="197:13" pos:end="197:14">hx</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:18">.</operator><name pos:start="197:19" pos:end="197:35">data_partitioning</name></name> <operator pos:start="197:37" pos:end="197:37">=</operator> <literal type="number" pos:start="197:39" pos:end="197:39">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="201:13" pos:end="203:21"><if pos:start="201:13" pos:end="203:21">if<condition pos:start="201:15" pos:end="201:50">(<expr pos:start="201:16" pos:end="201:49"><operator pos:start="201:16" pos:end="201:16">(</operator><name pos:start="201:17" pos:end="201:19">err</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <call pos:start="201:23" pos:end="201:48"><name pos:start="201:23" pos:end="201:41">decode_slice_header</name><argument_list pos:start="201:42" pos:end="201:48">(<argument pos:start="201:43" pos:end="201:44"><expr pos:start="201:43" pos:end="201:44"><name pos:start="201:43" pos:end="201:44">hx</name></expr></argument>, <argument pos:start="201:47" pos:end="201:47"><expr pos:start="201:47" pos:end="201:47"><name pos:start="201:47" pos:end="201:47">h</name></expr></argument>)</argument_list></call><operator pos:start="201:49" pos:end="201:49">)</operator></expr>)</condition><block type="pseudo" pos:start="203:16" pos:end="203:21"><block_content pos:start="203:16" pos:end="203:21">

               <break pos:start="203:16" pos:end="203:21">break;</break></block_content></block></if></if_stmt>



            <expr_stmt pos:start="207:13" pos:end="211:53"><expr pos:start="207:13" pos:end="211:52"><name pos:start="207:13" pos:end="207:45"><name pos:start="207:13" pos:end="207:13">s</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:34">current_picture_ptr</name><operator pos:start="207:35" pos:end="207:36">-&gt;</operator><name pos:start="207:37" pos:end="207:45">key_frame</name></name> <operator pos:start="207:47" pos:end="207:48">|=</operator>

                    <operator pos:start="209:21" pos:end="209:21">(</operator><name pos:start="209:22" pos:end="209:38"><name pos:start="209:22" pos:end="209:23">hx</name><operator pos:start="209:24" pos:end="209:25">-&gt;</operator><name pos:start="209:26" pos:end="209:38">nal_unit_type</name></name> <operator pos:start="209:40" pos:end="209:41">==</operator> <name pos:start="209:43" pos:end="209:55">NAL_IDR_SLICE</name><operator pos:start="209:56" pos:end="209:56">)</operator> <operator pos:start="209:58" pos:end="209:59">||</operator>

                    <operator pos:start="211:21" pos:end="211:21">(</operator><name pos:start="211:22" pos:end="211:46"><name pos:start="211:22" pos:end="211:22">h</name><operator pos:start="211:23" pos:end="211:24">-&gt;</operator><name pos:start="211:25" pos:end="211:46">sei_recovery_frame_cnt</name></name> <operator pos:start="211:48" pos:end="211:49">&gt;=</operator> <literal type="number" pos:start="211:51" pos:end="211:51">0</literal><operator pos:start="211:52" pos:end="211:52">)</operator></expr>;</expr_stmt>



            <if_stmt pos:start="215:13" pos:end="233:13"><if pos:start="215:13" pos:end="233:13">if <condition pos:start="215:16" pos:end="215:38">(<expr pos:start="215:17" pos:end="215:37"><name pos:start="215:17" pos:end="215:32"><name pos:start="215:17" pos:end="215:17">h</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:32">current_slice</name></name> <operator pos:start="215:34" pos:end="215:35">==</operator> <literal type="number" pos:start="215:37" pos:end="215:37">1</literal></expr>)</condition> <block pos:start="215:40" pos:end="233:13">{<block_content pos:start="217:17" pos:end="231:51">

                <if_stmt pos:start="217:17" pos:end="221:17"><if pos:start="217:17" pos:end="221:17">if<condition pos:start="217:19" pos:end="217:53">(<expr pos:start="217:20" pos:end="217:52"><operator pos:start="217:20" pos:end="217:20">!</operator><operator pos:start="217:21" pos:end="217:21">(</operator><name pos:start="217:22" pos:end="217:30"><name pos:start="217:22" pos:end="217:22">s</name><operator pos:start="217:23" pos:end="217:24">-&gt;</operator><name pos:start="217:25" pos:end="217:30">flags2</name></name> <operator pos:start="217:32" pos:end="217:32">&amp;</operator> <name pos:start="217:34" pos:end="217:51">CODEC_FLAG2_CHUNKS</name><operator pos:start="217:52" pos:end="217:52">)</operator></expr>)</condition> <block pos:start="217:55" pos:end="221:17">{<block_content pos:start="219:21" pos:end="219:39">

                    <expr_stmt pos:start="219:21" pos:end="219:39"><expr pos:start="219:21" pos:end="219:38"><call pos:start="219:21" pos:end="219:38"><name pos:start="219:21" pos:end="219:35">decode_postinit</name><argument_list pos:start="219:36" pos:end="219:38">(<argument pos:start="219:37" pos:end="219:37"><expr pos:start="219:37" pos:end="219:37"><name pos:start="219:37" pos:end="219:37">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="225:17" pos:end="227:30"><if pos:start="225:17" pos:end="227:30">if <condition pos:start="225:20" pos:end="225:95">(<expr pos:start="225:21" pos:end="225:94"><name pos:start="225:21" pos:end="225:37"><name pos:start="225:21" pos:end="225:21">s</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:28">avctx</name><operator pos:start="225:29" pos:end="225:30">-&gt;</operator><name pos:start="225:31" pos:end="225:37">hwaccel</name></name> <operator pos:start="225:39" pos:end="225:40">&amp;&amp;</operator> <call pos:start="225:42" pos:end="225:90"><name pos:start="225:42" pos:end="225:71"><name pos:start="225:42" pos:end="225:42">s</name><operator pos:start="225:43" pos:end="225:44">-&gt;</operator><name pos:start="225:45" pos:end="225:49">avctx</name><operator pos:start="225:50" pos:end="225:51">-&gt;</operator><name pos:start="225:52" pos:end="225:58">hwaccel</name><operator pos:start="225:59" pos:end="225:60">-&gt;</operator><name pos:start="225:61" pos:end="225:71">start_frame</name></name><argument_list pos:start="225:72" pos:end="225:90">(<argument pos:start="225:73" pos:end="225:80"><expr pos:start="225:73" pos:end="225:80"><name pos:start="225:73" pos:end="225:80"><name pos:start="225:73" pos:end="225:73">s</name><operator pos:start="225:74" pos:end="225:75">-&gt;</operator><name pos:start="225:76" pos:end="225:80">avctx</name></name></expr></argument>, <argument pos:start="225:83" pos:end="225:86"><expr pos:start="225:83" pos:end="225:86"><name pos:start="225:83" pos:end="225:86">NULL</name></expr></argument>, <argument pos:start="225:89" pos:end="225:89"><expr pos:start="225:89" pos:end="225:89"><literal type="number" pos:start="225:89" pos:end="225:89">0</literal></expr></argument>)</argument_list></call> <operator pos:start="225:92" pos:end="225:92">&lt;</operator> <literal type="number" pos:start="225:94" pos:end="225:94">0</literal></expr>)</condition><block type="pseudo" pos:start="227:21" pos:end="227:30"><block_content pos:start="227:21" pos:end="227:30">

                    <return pos:start="227:21" pos:end="227:30">return <expr pos:start="227:28" pos:end="227:29"><operator pos:start="227:28" pos:end="227:28">-</operator><literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="229:17" pos:end="231:51"><if pos:start="229:17" pos:end="231:51">if<condition pos:start="229:19" pos:end="229:102">(<expr pos:start="229:20" pos:end="229:101"><name pos:start="229:20" pos:end="229:44">CONFIG_H264_VDPAU_DECODER</name> <operator pos:start="229:46" pos:end="229:47">&amp;&amp;</operator> <name pos:start="229:49" pos:end="229:77"><name pos:start="229:49" pos:end="229:49">s</name><operator pos:start="229:50" pos:end="229:51">-&gt;</operator><name pos:start="229:52" pos:end="229:56">avctx</name><operator pos:start="229:57" pos:end="229:58">-&gt;</operator><name pos:start="229:59" pos:end="229:63">codec</name><operator pos:start="229:64" pos:end="229:65">-&gt;</operator><name pos:start="229:66" pos:end="229:77">capabilities</name></name><operator pos:start="229:78" pos:end="229:78">&amp;</operator><name pos:start="229:79" pos:end="229:101">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition><block type="pseudo" pos:start="231:21" pos:end="231:51"><block_content pos:start="231:21" pos:end="231:51">

                    <expr_stmt pos:start="231:21" pos:end="231:51"><expr pos:start="231:21" pos:end="231:50"><call pos:start="231:21" pos:end="231:50"><name pos:start="231:21" pos:end="231:47">ff_vdpau_h264_picture_start</name><argument_list pos:start="231:48" pos:end="231:50">(<argument pos:start="231:49" pos:end="231:49"><expr pos:start="231:49" pos:end="231:49"><name pos:start="231:49" pos:end="231:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="237:13" pos:end="267:13"><if pos:start="237:13" pos:end="267:13">if<condition pos:start="237:15" pos:end="245:52">(<expr pos:start="237:16" pos:end="245:51"><name pos:start="237:16" pos:end="237:38"><name pos:start="237:16" pos:end="237:17">hx</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:38">redundant_pic_count</name></name><operator pos:start="237:39" pos:end="237:40">==</operator><literal type="number" pos:start="237:41" pos:end="237:41">0</literal>

               <operator pos:start="239:16" pos:end="239:17">&amp;&amp;</operator> <operator pos:start="239:19" pos:end="239:19">(</operator><name pos:start="239:20" pos:end="239:36"><name pos:start="239:20" pos:end="239:24">avctx</name><operator pos:start="239:25" pos:end="239:26">-&gt;</operator><name pos:start="239:27" pos:end="239:36">skip_frame</name></name> <operator pos:start="239:38" pos:end="239:38">&lt;</operator> <name pos:start="239:40" pos:end="239:55">AVDISCARD_NONREF</name> <operator pos:start="239:57" pos:end="239:58">||</operator> <name pos:start="239:60" pos:end="239:74"><name pos:start="239:60" pos:end="239:61">hx</name><operator pos:start="239:62" pos:end="239:63">-&gt;</operator><name pos:start="239:64" pos:end="239:74">nal_ref_idc</name></name><operator pos:start="239:75" pos:end="239:75">)</operator>

               <operator pos:start="241:16" pos:end="241:17">&amp;&amp;</operator> <operator pos:start="241:19" pos:end="241:19">(</operator><name pos:start="241:20" pos:end="241:36"><name pos:start="241:20" pos:end="241:24">avctx</name><operator pos:start="241:25" pos:end="241:26">-&gt;</operator><name pos:start="241:27" pos:end="241:36">skip_frame</name></name> <operator pos:start="241:38" pos:end="241:38">&lt;</operator> <name pos:start="241:40" pos:end="241:54">AVDISCARD_BIDIR</name>  <operator pos:start="241:57" pos:end="241:58">||</operator> <name pos:start="241:60" pos:end="241:77"><name pos:start="241:60" pos:end="241:61">hx</name><operator pos:start="241:62" pos:end="241:63">-&gt;</operator><name pos:start="241:64" pos:end="241:77">slice_type_nos</name></name><operator pos:start="241:78" pos:end="241:79">!=</operator><name pos:start="241:80" pos:end="241:96">AV_PICTURE_TYPE_B</name><operator pos:start="241:97" pos:end="241:97">)</operator>

               <operator pos:start="243:16" pos:end="243:17">&amp;&amp;</operator> <operator pos:start="243:19" pos:end="243:19">(</operator><name pos:start="243:20" pos:end="243:36"><name pos:start="243:20" pos:end="243:24">avctx</name><operator pos:start="243:25" pos:end="243:26">-&gt;</operator><name pos:start="243:27" pos:end="243:36">skip_frame</name></name> <operator pos:start="243:38" pos:end="243:38">&lt;</operator> <name pos:start="243:40" pos:end="243:55">AVDISCARD_NONKEY</name> <operator pos:start="243:57" pos:end="243:58">||</operator> <name pos:start="243:60" pos:end="243:77"><name pos:start="243:60" pos:end="243:61">hx</name><operator pos:start="243:62" pos:end="243:63">-&gt;</operator><name pos:start="243:64" pos:end="243:77">slice_type_nos</name></name><operator pos:start="243:78" pos:end="243:79">==</operator><name pos:start="243:80" pos:end="243:96">AV_PICTURE_TYPE_I</name><operator pos:start="243:97" pos:end="243:97">)</operator>

               <operator pos:start="245:16" pos:end="245:17">&amp;&amp;</operator> <name pos:start="245:19" pos:end="245:35"><name pos:start="245:19" pos:end="245:23">avctx</name><operator pos:start="245:24" pos:end="245:25">-&gt;</operator><name pos:start="245:26" pos:end="245:35">skip_frame</name></name> <operator pos:start="245:37" pos:end="245:37">&lt;</operator> <name pos:start="245:39" pos:end="245:51">AVDISCARD_ALL</name></expr>)</condition><block pos:start="245:53" pos:end="267:13">{<block_content pos:start="247:17" pos:end="265:36">

                <if_stmt pos:start="247:17" pos:end="265:36"><if pos:start="247:17" pos:end="253:17">if<condition pos:start="247:19" pos:end="247:34">(<expr pos:start="247:20" pos:end="247:33"><name pos:start="247:20" pos:end="247:33"><name pos:start="247:20" pos:end="247:24">avctx</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:33">hwaccel</name></name></expr>)</condition> <block pos:start="247:36" pos:end="253:17">{<block_content pos:start="249:21" pos:end="251:34">

                    <if_stmt pos:start="249:21" pos:end="251:34"><if pos:start="249:21" pos:end="251:34">if <condition pos:start="249:24" pos:end="249:102">(<expr pos:start="249:25" pos:end="249:101"><call pos:start="249:25" pos:end="249:97"><name pos:start="249:25" pos:end="249:52"><name pos:start="249:25" pos:end="249:29">avctx</name><operator pos:start="249:30" pos:end="249:31">-&gt;</operator><name pos:start="249:32" pos:end="249:38">hwaccel</name><operator pos:start="249:39" pos:end="249:40">-&gt;</operator><name pos:start="249:41" pos:end="249:52">decode_slice</name></name><argument_list pos:start="249:53" pos:end="249:97">(<argument pos:start="249:54" pos:end="249:58"><expr pos:start="249:54" pos:end="249:58"><name pos:start="249:54" pos:end="249:58">avctx</name></expr></argument>, <argument pos:start="249:61" pos:end="249:86"><expr pos:start="249:61" pos:end="249:86"><operator pos:start="249:61" pos:end="249:61">&amp;</operator><name pos:start="249:62" pos:end="249:86"><name pos:start="249:62" pos:end="249:64">buf</name><index pos:start="249:65" pos:end="249:86">[<expr pos:start="249:66" pos:end="249:85"><name pos:start="249:66" pos:end="249:74">buf_index</name> <operator pos:start="249:76" pos:end="249:76">-</operator> <name pos:start="249:78" pos:end="249:85">consumed</name></expr>]</index></name></expr></argument>, <argument pos:start="249:89" pos:end="249:96"><expr pos:start="249:89" pos:end="249:96"><name pos:start="249:89" pos:end="249:96">consumed</name></expr></argument>)</argument_list></call> <operator pos:start="249:99" pos:end="249:99">&lt;</operator> <literal type="number" pos:start="249:101" pos:end="249:101">0</literal></expr>)</condition><block type="pseudo" pos:start="251:25" pos:end="251:34"><block_content pos:start="251:25" pos:end="251:34">

                        <return pos:start="251:25" pos:end="251:34">return <expr pos:start="251:32" pos:end="251:33"><operator pos:start="251:32" pos:end="251:32">-</operator><literal type="number" pos:start="251:33" pos:end="251:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="253:18" pos:end="263:17">else

                if<condition pos:start="255:19" pos:end="255:102">(<expr pos:start="255:20" pos:end="255:101"><name pos:start="255:20" pos:end="255:44">CONFIG_H264_VDPAU_DECODER</name> <operator pos:start="255:46" pos:end="255:47">&amp;&amp;</operator> <name pos:start="255:49" pos:end="255:77"><name pos:start="255:49" pos:end="255:49">s</name><operator pos:start="255:50" pos:end="255:51">-&gt;</operator><name pos:start="255:52" pos:end="255:56">avctx</name><operator pos:start="255:57" pos:end="255:58">-&gt;</operator><name pos:start="255:59" pos:end="255:63">codec</name><operator pos:start="255:64" pos:end="255:65">-&gt;</operator><name pos:start="255:66" pos:end="255:77">capabilities</name></name><operator pos:start="255:78" pos:end="255:78">&amp;</operator><name pos:start="255:79" pos:end="255:101">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition><block pos:start="255:103" pos:end="263:17">{<block_content pos:start="257:21" pos:end="261:86">

                    <decl_stmt pos:start="257:21" pos:end="257:75"><decl pos:start="257:21" pos:end="257:74"><type pos:start="257:21" pos:end="257:40"><specifier pos:start="257:21" pos:end="257:26">static</specifier> <specifier pos:start="257:28" pos:end="257:32">const</specifier> <name pos:start="257:34" pos:end="257:40">uint8_t</name></type> <name pos:start="257:42" pos:end="257:53"><name pos:start="257:42" pos:end="257:51">start_code</name><index pos:start="257:52" pos:end="257:53">[]</index></name> <init pos:start="257:55" pos:end="257:74">= <expr pos:start="257:57" pos:end="257:74"><block pos:start="257:57" pos:end="257:74">{<expr pos:start="257:58" pos:end="257:61"><literal type="number" pos:start="257:58" pos:end="257:61">0x00</literal></expr>, <expr pos:start="257:64" pos:end="257:67"><literal type="number" pos:start="257:64" pos:end="257:67">0x00</literal></expr>, <expr pos:start="257:70" pos:end="257:73"><literal type="number" pos:start="257:70" pos:end="257:73">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="259:21" pos:end="259:79"><expr pos:start="259:21" pos:end="259:78"><call pos:start="259:21" pos:end="259:78"><name pos:start="259:21" pos:end="259:43">ff_vdpau_add_data_chunk</name><argument_list pos:start="259:44" pos:end="259:78">(<argument pos:start="259:45" pos:end="259:45"><expr pos:start="259:45" pos:end="259:45"><name pos:start="259:45" pos:end="259:45">s</name></expr></argument>, <argument pos:start="259:48" pos:end="259:57"><expr pos:start="259:48" pos:end="259:57"><name pos:start="259:48" pos:end="259:57">start_code</name></expr></argument>, <argument pos:start="259:60" pos:end="259:77"><expr pos:start="259:60" pos:end="259:77"><sizeof pos:start="259:60" pos:end="259:77">sizeof<argument_list pos:start="259:66" pos:end="259:77">(<argument pos:start="259:67" pos:end="259:76"><expr pos:start="259:67" pos:end="259:76"><name pos:start="259:67" pos:end="259:76">start_code</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="261:21" pos:end="261:86"><expr pos:start="261:21" pos:end="261:85"><call pos:start="261:21" pos:end="261:85"><name pos:start="261:21" pos:end="261:43">ff_vdpau_add_data_chunk</name><argument_list pos:start="261:44" pos:end="261:85">(<argument pos:start="261:45" pos:end="261:45"><expr pos:start="261:45" pos:end="261:45"><name pos:start="261:45" pos:end="261:45">s</name></expr></argument>, <argument pos:start="261:48" pos:end="261:73"><expr pos:start="261:48" pos:end="261:73"><operator pos:start="261:48" pos:end="261:48">&amp;</operator><name pos:start="261:49" pos:end="261:73"><name pos:start="261:49" pos:end="261:51">buf</name><index pos:start="261:52" pos:end="261:73">[<expr pos:start="261:53" pos:end="261:72"><name pos:start="261:53" pos:end="261:61">buf_index</name> <operator pos:start="261:63" pos:end="261:63">-</operator> <name pos:start="261:65" pos:end="261:72">consumed</name></expr>]</index></name></expr></argument>, <argument pos:start="261:76" pos:end="261:83"><expr pos:start="261:76" pos:end="261:83"><name pos:start="261:76" pos:end="261:83">consumed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="263:18" pos:end="265:36">else<block type="pseudo" pos:start="265:21" pos:end="265:36"><block_content pos:start="265:21" pos:end="265:36">

                    <expr_stmt pos:start="265:21" pos:end="265:36"><expr pos:start="265:21" pos:end="265:35"><name pos:start="265:21" pos:end="265:33">context_count</name><operator pos:start="265:34" pos:end="265:35">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="269:13" pos:end="269:18">break;</break>

        <case pos:start="271:9" pos:end="271:21">case <expr pos:start="271:14" pos:end="271:20"><name pos:start="271:14" pos:end="271:20">NAL_DPA</name></expr>:</case>

            <expr_stmt pos:start="273:13" pos:end="273:54"><expr pos:start="273:13" pos:end="273:53"><call pos:start="273:13" pos:end="273:53"><name pos:start="273:13" pos:end="273:25">init_get_bits</name><argument_list pos:start="273:26" pos:end="273:53">(<argument pos:start="273:27" pos:end="273:35"><expr pos:start="273:27" pos:end="273:35"><operator pos:start="273:27" pos:end="273:27">&amp;</operator><name pos:start="273:28" pos:end="273:35"><name pos:start="273:28" pos:end="273:29">hx</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:32">s</name><operator pos:start="273:33" pos:end="273:33">.</operator><name pos:start="273:34" pos:end="273:35">gb</name></name></expr></argument>, <argument pos:start="273:38" pos:end="273:40"><expr pos:start="273:38" pos:end="273:40"><name pos:start="273:38" pos:end="273:40">ptr</name></expr></argument>, <argument pos:start="273:43" pos:end="273:52"><expr pos:start="273:43" pos:end="273:52"><name pos:start="273:43" pos:end="273:52">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="277:35"><expr pos:start="275:13" pos:end="277:34"><name pos:start="275:13" pos:end="275:28"><name pos:start="275:13" pos:end="275:14">hx</name><operator pos:start="275:15" pos:end="275:16">-&gt;</operator><name pos:start="275:17" pos:end="275:28">intra_gb_ptr</name></name><operator pos:start="275:29" pos:end="275:29">=</operator>

            <name pos:start="277:13" pos:end="277:28"><name pos:start="277:13" pos:end="277:14">hx</name><operator pos:start="277:15" pos:end="277:16">-&gt;</operator><name pos:start="277:17" pos:end="277:28">inter_gb_ptr</name></name><operator pos:start="277:29" pos:end="277:29">=</operator> <name pos:start="277:31" pos:end="277:34">NULL</name></expr>;</expr_stmt>



            <if_stmt pos:start="281:13" pos:end="283:22"><if pos:start="281:13" pos:end="283:22">if <condition pos:start="281:16" pos:end="281:55">(<expr pos:start="281:17" pos:end="281:54"><operator pos:start="281:17" pos:end="281:17">(</operator><name pos:start="281:18" pos:end="281:20">err</name> <operator pos:start="281:22" pos:end="281:22">=</operator> <call pos:start="281:24" pos:end="281:49"><name pos:start="281:24" pos:end="281:42">decode_slice_header</name><argument_list pos:start="281:43" pos:end="281:49">(<argument pos:start="281:44" pos:end="281:45"><expr pos:start="281:44" pos:end="281:45"><name pos:start="281:44" pos:end="281:45">hx</name></expr></argument>, <argument pos:start="281:48" pos:end="281:48"><expr pos:start="281:48" pos:end="281:48"><name pos:start="281:48" pos:end="281:48">h</name></expr></argument>)</argument_list></call><operator pos:start="281:50" pos:end="281:50">)</operator> <operator pos:start="281:52" pos:end="281:52">&lt;</operator> <literal type="number" pos:start="281:54" pos:end="281:54">0</literal></expr>)</condition><block type="pseudo" pos:start="283:17" pos:end="283:22"><block_content pos:start="283:17" pos:end="283:22">

                <break pos:start="283:17" pos:end="283:22">break;</break></block_content></block></if></if_stmt>



            <expr_stmt pos:start="287:13" pos:end="287:40"><expr pos:start="287:13" pos:end="287:39"><name pos:start="287:13" pos:end="287:35"><name pos:start="287:13" pos:end="287:14">hx</name><operator pos:start="287:15" pos:end="287:16">-&gt;</operator><name pos:start="287:17" pos:end="287:17">s</name><operator pos:start="287:18" pos:end="287:18">.</operator><name pos:start="287:19" pos:end="287:35">data_partitioning</name></name> <operator pos:start="287:37" pos:end="287:37">=</operator> <literal type="number" pos:start="287:39" pos:end="287:39">1</literal></expr>;</expr_stmt>



            <break pos:start="291:13" pos:end="291:18">break;</break>

        <case pos:start="293:9" pos:end="293:21">case <expr pos:start="293:14" pos:end="293:20"><name pos:start="293:14" pos:end="293:20">NAL_DPB</name></expr>:</case>

            <expr_stmt pos:start="295:13" pos:end="295:58"><expr pos:start="295:13" pos:end="295:57"><call pos:start="295:13" pos:end="295:57"><name pos:start="295:13" pos:end="295:25">init_get_bits</name><argument_list pos:start="295:26" pos:end="295:57">(<argument pos:start="295:27" pos:end="295:39"><expr pos:start="295:27" pos:end="295:39"><operator pos:start="295:27" pos:end="295:27">&amp;</operator><name pos:start="295:28" pos:end="295:39"><name pos:start="295:28" pos:end="295:29">hx</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:39">intra_gb</name></name></expr></argument>, <argument pos:start="295:42" pos:end="295:44"><expr pos:start="295:42" pos:end="295:44"><name pos:start="295:42" pos:end="295:44">ptr</name></expr></argument>, <argument pos:start="295:47" pos:end="295:56"><expr pos:start="295:47" pos:end="295:56"><name pos:start="295:47" pos:end="295:56">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:44"><expr pos:start="297:13" pos:end="297:43"><name pos:start="297:13" pos:end="297:28"><name pos:start="297:13" pos:end="297:14">hx</name><operator pos:start="297:15" pos:end="297:16">-&gt;</operator><name pos:start="297:17" pos:end="297:28">intra_gb_ptr</name></name><operator pos:start="297:29" pos:end="297:29">=</operator> <operator pos:start="297:31" pos:end="297:31">&amp;</operator><name pos:start="297:32" pos:end="297:43"><name pos:start="297:32" pos:end="297:33">hx</name><operator pos:start="297:34" pos:end="297:35">-&gt;</operator><name pos:start="297:36" pos:end="297:43">intra_gb</name></name></expr>;</expr_stmt>

            <break pos:start="299:13" pos:end="299:18">break;</break>

        <case pos:start="301:9" pos:end="301:21">case <expr pos:start="301:14" pos:end="301:20"><name pos:start="301:14" pos:end="301:20">NAL_DPC</name></expr>:</case>

            <expr_stmt pos:start="303:13" pos:end="303:58"><expr pos:start="303:13" pos:end="303:57"><call pos:start="303:13" pos:end="303:57"><name pos:start="303:13" pos:end="303:25">init_get_bits</name><argument_list pos:start="303:26" pos:end="303:57">(<argument pos:start="303:27" pos:end="303:39"><expr pos:start="303:27" pos:end="303:39"><operator pos:start="303:27" pos:end="303:27">&amp;</operator><name pos:start="303:28" pos:end="303:39"><name pos:start="303:28" pos:end="303:29">hx</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:39">inter_gb</name></name></expr></argument>, <argument pos:start="303:42" pos:end="303:44"><expr pos:start="303:42" pos:end="303:44"><name pos:start="303:42" pos:end="303:44">ptr</name></expr></argument>, <argument pos:start="303:47" pos:end="303:56"><expr pos:start="303:47" pos:end="303:56"><name pos:start="303:47" pos:end="303:56">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:44"><expr pos:start="305:13" pos:end="305:43"><name pos:start="305:13" pos:end="305:28"><name pos:start="305:13" pos:end="305:14">hx</name><operator pos:start="305:15" pos:end="305:16">-&gt;</operator><name pos:start="305:17" pos:end="305:28">inter_gb_ptr</name></name><operator pos:start="305:29" pos:end="305:29">=</operator> <operator pos:start="305:31" pos:end="305:31">&amp;</operator><name pos:start="305:32" pos:end="305:43"><name pos:start="305:32" pos:end="305:33">hx</name><operator pos:start="305:34" pos:end="305:35">-&gt;</operator><name pos:start="305:36" pos:end="305:43">inter_gb</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="309:13" pos:end="321:32"><if pos:start="309:13" pos:end="321:32">if<condition pos:start="309:15" pos:end="319:52">(<expr pos:start="309:16" pos:end="319:51"><name pos:start="309:16" pos:end="309:38"><name pos:start="309:16" pos:end="309:17">hx</name><operator pos:start="309:18" pos:end="309:19">-&gt;</operator><name pos:start="309:20" pos:end="309:38">redundant_pic_count</name></name><operator pos:start="309:39" pos:end="309:40">==</operator><literal type="number" pos:start="309:41" pos:end="309:41">0</literal> <operator pos:start="309:43" pos:end="309:44">&amp;&amp;</operator> <name pos:start="309:46" pos:end="309:61"><name pos:start="309:46" pos:end="309:47">hx</name><operator pos:start="309:48" pos:end="309:49">-&gt;</operator><name pos:start="309:50" pos:end="309:61">intra_gb_ptr</name></name> <operator pos:start="309:63" pos:end="309:64">&amp;&amp;</operator> <name pos:start="309:66" pos:end="309:88"><name pos:start="309:66" pos:end="309:67">hx</name><operator pos:start="309:68" pos:end="309:69">-&gt;</operator><name pos:start="309:70" pos:end="309:70">s</name><operator pos:start="309:71" pos:end="309:71">.</operator><name pos:start="309:72" pos:end="309:88">data_partitioning</name></name>

               <operator pos:start="311:16" pos:end="311:17">&amp;&amp;</operator> <name pos:start="311:19" pos:end="311:40"><name pos:start="311:19" pos:end="311:19">s</name><operator pos:start="311:20" pos:end="311:21">-&gt;</operator><name pos:start="311:22" pos:end="311:40">context_initialized</name></name>

               <operator pos:start="313:16" pos:end="313:17">&amp;&amp;</operator> <operator pos:start="313:19" pos:end="313:19">(</operator><name pos:start="313:20" pos:end="313:36"><name pos:start="313:20" pos:end="313:24">avctx</name><operator pos:start="313:25" pos:end="313:26">-&gt;</operator><name pos:start="313:27" pos:end="313:36">skip_frame</name></name> <operator pos:start="313:38" pos:end="313:38">&lt;</operator> <name pos:start="313:40" pos:end="313:55">AVDISCARD_NONREF</name> <operator pos:start="313:57" pos:end="313:58">||</operator> <name pos:start="313:60" pos:end="313:74"><name pos:start="313:60" pos:end="313:61">hx</name><operator pos:start="313:62" pos:end="313:63">-&gt;</operator><name pos:start="313:64" pos:end="313:74">nal_ref_idc</name></name><operator pos:start="313:75" pos:end="313:75">)</operator>

               <operator pos:start="315:16" pos:end="315:17">&amp;&amp;</operator> <operator pos:start="315:19" pos:end="315:19">(</operator><name pos:start="315:20" pos:end="315:36"><name pos:start="315:20" pos:end="315:24">avctx</name><operator pos:start="315:25" pos:end="315:26">-&gt;</operator><name pos:start="315:27" pos:end="315:36">skip_frame</name></name> <operator pos:start="315:38" pos:end="315:38">&lt;</operator> <name pos:start="315:40" pos:end="315:54">AVDISCARD_BIDIR</name>  <operator pos:start="315:57" pos:end="315:58">||</operator> <name pos:start="315:60" pos:end="315:77"><name pos:start="315:60" pos:end="315:61">hx</name><operator pos:start="315:62" pos:end="315:63">-&gt;</operator><name pos:start="315:64" pos:end="315:77">slice_type_nos</name></name><operator pos:start="315:78" pos:end="315:79">!=</operator><name pos:start="315:80" pos:end="315:96">AV_PICTURE_TYPE_B</name><operator pos:start="315:97" pos:end="315:97">)</operator>

               <operator pos:start="317:16" pos:end="317:17">&amp;&amp;</operator> <operator pos:start="317:19" pos:end="317:19">(</operator><name pos:start="317:20" pos:end="317:36"><name pos:start="317:20" pos:end="317:24">avctx</name><operator pos:start="317:25" pos:end="317:26">-&gt;</operator><name pos:start="317:27" pos:end="317:36">skip_frame</name></name> <operator pos:start="317:38" pos:end="317:38">&lt;</operator> <name pos:start="317:40" pos:end="317:55">AVDISCARD_NONKEY</name> <operator pos:start="317:57" pos:end="317:58">||</operator> <name pos:start="317:60" pos:end="317:77"><name pos:start="317:60" pos:end="317:61">hx</name><operator pos:start="317:62" pos:end="317:63">-&gt;</operator><name pos:start="317:64" pos:end="317:77">slice_type_nos</name></name><operator pos:start="317:78" pos:end="317:79">==</operator><name pos:start="317:80" pos:end="317:96">AV_PICTURE_TYPE_I</name><operator pos:start="317:97" pos:end="317:97">)</operator>

               <operator pos:start="319:16" pos:end="319:17">&amp;&amp;</operator> <name pos:start="319:19" pos:end="319:35"><name pos:start="319:19" pos:end="319:23">avctx</name><operator pos:start="319:24" pos:end="319:25">-&gt;</operator><name pos:start="319:26" pos:end="319:35">skip_frame</name></name> <operator pos:start="319:37" pos:end="319:37">&lt;</operator> <name pos:start="319:39" pos:end="319:51">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:32"><block_content pos:start="321:17" pos:end="321:32">

                <expr_stmt pos:start="321:17" pos:end="321:32"><expr pos:start="321:17" pos:end="321:31"><name pos:start="321:17" pos:end="321:29">context_count</name><operator pos:start="321:30" pos:end="321:31">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="323:13" pos:end="323:18">break;</break>

        <case pos:start="325:9" pos:end="325:21">case <expr pos:start="325:14" pos:end="325:20"><name pos:start="325:14" pos:end="325:20">NAL_SEI</name></expr>:</case>

            <expr_stmt pos:start="327:13" pos:end="327:51"><expr pos:start="327:13" pos:end="327:50"><call pos:start="327:13" pos:end="327:50"><name pos:start="327:13" pos:end="327:25">init_get_bits</name><argument_list pos:start="327:26" pos:end="327:50">(<argument pos:start="327:27" pos:end="327:32"><expr pos:start="327:27" pos:end="327:32"><operator pos:start="327:27" pos:end="327:27">&amp;</operator><name pos:start="327:28" pos:end="327:32"><name pos:start="327:28" pos:end="327:28">s</name><operator pos:start="327:29" pos:end="327:30">-&gt;</operator><name pos:start="327:31" pos:end="327:32">gb</name></name></expr></argument>, <argument pos:start="327:35" pos:end="327:37"><expr pos:start="327:35" pos:end="327:37"><name pos:start="327:35" pos:end="327:37">ptr</name></expr></argument>, <argument pos:start="327:40" pos:end="327:49"><expr pos:start="327:40" pos:end="327:49"><name pos:start="327:40" pos:end="327:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:34"><expr pos:start="329:13" pos:end="329:33"><call pos:start="329:13" pos:end="329:33"><name pos:start="329:13" pos:end="329:30">ff_h264_decode_sei</name><argument_list pos:start="329:31" pos:end="329:33">(<argument pos:start="329:32" pos:end="329:32"><expr pos:start="329:32" pos:end="329:32"><name pos:start="329:32" pos:end="329:32">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="331:13" pos:end="331:18">break;</break>

        <case pos:start="333:9" pos:end="333:21">case <expr pos:start="333:14" pos:end="333:20"><name pos:start="333:14" pos:end="333:20">NAL_SPS</name></expr>:</case>

            <expr_stmt pos:start="335:13" pos:end="335:51"><expr pos:start="335:13" pos:end="335:50"><call pos:start="335:13" pos:end="335:50"><name pos:start="335:13" pos:end="335:25">init_get_bits</name><argument_list pos:start="335:26" pos:end="335:50">(<argument pos:start="335:27" pos:end="335:32"><expr pos:start="335:27" pos:end="335:32"><operator pos:start="335:27" pos:end="335:27">&amp;</operator><name pos:start="335:28" pos:end="335:32"><name pos:start="335:28" pos:end="335:28">s</name><operator pos:start="335:29" pos:end="335:30">-&gt;</operator><name pos:start="335:31" pos:end="335:32">gb</name></name></expr></argument>, <argument pos:start="335:35" pos:end="335:37"><expr pos:start="335:35" pos:end="335:37"><name pos:start="335:35" pos:end="335:37">ptr</name></expr></argument>, <argument pos:start="335:40" pos:end="335:49"><expr pos:start="335:40" pos:end="335:49"><name pos:start="335:40" pos:end="335:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:48"><expr pos:start="337:13" pos:end="337:47"><call pos:start="337:13" pos:end="337:47"><name pos:start="337:13" pos:end="337:44">ff_h264_decode_seq_parameter_set</name><argument_list pos:start="337:45" pos:end="337:47">(<argument pos:start="337:46" pos:end="337:46"><expr pos:start="337:46" pos:end="337:46"><name pos:start="337:46" pos:end="337:46">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="341:13" pos:end="345:31"><if pos:start="341:13" pos:end="345:31">if<condition pos:start="341:15" pos:end="343:80">(<expr pos:start="341:16" pos:end="343:79"><name pos:start="341:16" pos:end="341:23"><name pos:start="341:16" pos:end="341:16">s</name><operator pos:start="341:17" pos:end="341:18">-&gt;</operator><name pos:start="341:19" pos:end="341:23">flags</name></name><operator pos:start="341:24" pos:end="341:24">&amp;</operator> <name pos:start="341:26" pos:end="341:45">CODEC_FLAG_LOW_DELAY</name> <operator pos:start="341:47" pos:end="341:48">||</operator>

              <operator pos:start="343:15" pos:end="343:15">(</operator><name pos:start="343:16" pos:end="343:48"><name pos:start="343:16" pos:end="343:16">h</name><operator pos:start="343:17" pos:end="343:18">-&gt;</operator><name pos:start="343:19" pos:end="343:21">sps</name><operator pos:start="343:22" pos:end="343:22">.</operator><name pos:start="343:23" pos:end="343:48">bitstream_restriction_flag</name></name> <operator pos:start="343:50" pos:end="343:51">&amp;&amp;</operator> <operator pos:start="343:53" pos:end="343:53">!</operator><name pos:start="343:54" pos:end="343:78"><name pos:start="343:54" pos:end="343:54">h</name><operator pos:start="343:55" pos:end="343:56">-&gt;</operator><name pos:start="343:57" pos:end="343:59">sps</name><operator pos:start="343:60" pos:end="343:60">.</operator><name pos:start="343:61" pos:end="343:78">num_reorder_frames</name></name><operator pos:start="343:79" pos:end="343:79">)</operator></expr>)</condition><block type="pseudo" pos:start="345:17" pos:end="345:31"><block_content pos:start="345:17" pos:end="345:31">

                <expr_stmt pos:start="345:17" pos:end="345:31"><expr pos:start="345:17" pos:end="345:30"><name pos:start="345:17" pos:end="345:28"><name pos:start="345:17" pos:end="345:17">s</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:28">low_delay</name></name><operator pos:start="345:29" pos:end="345:29">=</operator><literal type="number" pos:start="345:30" pos:end="345:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="349:13" pos:end="351:51"><if pos:start="349:13" pos:end="351:51">if<condition pos:start="349:15" pos:end="349:39">(<expr pos:start="349:16" pos:end="349:38"><name pos:start="349:16" pos:end="349:34"><name pos:start="349:16" pos:end="349:20">avctx</name><operator pos:start="349:21" pos:end="349:22">-&gt;</operator><name pos:start="349:23" pos:end="349:34">has_b_frames</name></name> <operator pos:start="349:36" pos:end="349:36">&lt;</operator> <literal type="number" pos:start="349:38" pos:end="349:38">2</literal></expr>)</condition><block type="pseudo" pos:start="351:17" pos:end="351:51"><block_content pos:start="351:17" pos:end="351:51">

                <expr_stmt pos:start="351:17" pos:end="351:51"><expr pos:start="351:17" pos:end="351:50"><name pos:start="351:17" pos:end="351:35"><name pos:start="351:17" pos:end="351:21">avctx</name><operator pos:start="351:22" pos:end="351:23">-&gt;</operator><name pos:start="351:24" pos:end="351:35">has_b_frames</name></name><operator pos:start="351:36" pos:end="351:36">=</operator> <operator pos:start="351:38" pos:end="351:38">!</operator><name pos:start="351:39" pos:end="351:50"><name pos:start="351:39" pos:end="351:39">s</name><operator pos:start="351:40" pos:end="351:41">-&gt;</operator><name pos:start="351:42" pos:end="351:50">low_delay</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="355:13" pos:end="379:13"><if pos:start="355:13" pos:end="379:13">if <condition pos:start="355:16" pos:end="355:68">(<expr pos:start="355:17" pos:end="355:67"><name pos:start="355:17" pos:end="355:42"><name pos:start="355:17" pos:end="355:21">avctx</name><operator pos:start="355:22" pos:end="355:23">-&gt;</operator><name pos:start="355:24" pos:end="355:42">bits_per_raw_sample</name></name> <operator pos:start="355:44" pos:end="355:45">!=</operator> <name pos:start="355:47" pos:end="355:67"><name pos:start="355:47" pos:end="355:47">h</name><operator pos:start="355:48" pos:end="355:49">-&gt;</operator><name pos:start="355:50" pos:end="355:52">sps</name><operator pos:start="355:53" pos:end="355:53">.</operator><name pos:start="355:54" pos:end="355:67">bit_depth_luma</name></name></expr>)</condition> <block pos:start="355:70" pos:end="379:13">{<block_content pos:start="357:17" pos:end="377:17">

                <if_stmt pos:start="357:17" pos:end="377:17"><if pos:start="357:17" pos:end="371:17">if <condition pos:start="357:20" pos:end="357:78">(<expr pos:start="357:21" pos:end="357:77"><name pos:start="357:21" pos:end="357:41"><name pos:start="357:21" pos:end="357:21">h</name><operator pos:start="357:22" pos:end="357:23">-&gt;</operator><name pos:start="357:24" pos:end="357:26">sps</name><operator pos:start="357:27" pos:end="357:27">.</operator><name pos:start="357:28" pos:end="357:41">bit_depth_luma</name></name> <operator pos:start="357:43" pos:end="357:44">&gt;=</operator> <literal type="number" pos:start="357:46" pos:end="357:46">8</literal> <operator pos:start="357:48" pos:end="357:49">&amp;&amp;</operator> <name pos:start="357:51" pos:end="357:71"><name pos:start="357:51" pos:end="357:51">h</name><operator pos:start="357:52" pos:end="357:53">-&gt;</operator><name pos:start="357:54" pos:end="357:56">sps</name><operator pos:start="357:57" pos:end="357:57">.</operator><name pos:start="357:58" pos:end="357:71">bit_depth_luma</name></name> <operator pos:start="357:73" pos:end="357:74">&lt;=</operator> <literal type="number" pos:start="357:76" pos:end="357:77">10</literal></expr>)</condition> <block pos:start="357:80" pos:end="371:17">{<block_content pos:start="359:21" pos:end="369:52">

                    <expr_stmt pos:start="359:21" pos:end="359:71"><expr pos:start="359:21" pos:end="359:70"><name pos:start="359:21" pos:end="359:46"><name pos:start="359:21" pos:end="359:25">avctx</name><operator pos:start="359:26" pos:end="359:27">-&gt;</operator><name pos:start="359:28" pos:end="359:46">bits_per_raw_sample</name></name> <operator pos:start="359:48" pos:end="359:48">=</operator> <name pos:start="359:50" pos:end="359:70"><name pos:start="359:50" pos:end="359:50">h</name><operator pos:start="359:51" pos:end="359:52">-&gt;</operator><name pos:start="359:53" pos:end="359:55">sps</name><operator pos:start="359:56" pos:end="359:56">.</operator><name pos:start="359:57" pos:end="359:70">bit_depth_luma</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:63"><expr pos:start="361:21" pos:end="361:62"><name pos:start="361:21" pos:end="361:34"><name pos:start="361:21" pos:end="361:21">h</name><operator pos:start="361:22" pos:end="361:23">-&gt;</operator><name pos:start="361:24" pos:end="361:34">pixel_shift</name></name> <operator pos:start="361:36" pos:end="361:36">=</operator> <name pos:start="361:38" pos:end="361:58"><name pos:start="361:38" pos:end="361:38">h</name><operator pos:start="361:39" pos:end="361:40">-&gt;</operator><name pos:start="361:41" pos:end="361:43">sps</name><operator pos:start="361:44" pos:end="361:44">.</operator><name pos:start="361:45" pos:end="361:58">bit_depth_luma</name></name> <operator pos:start="361:60" pos:end="361:60">&gt;</operator> <literal type="number" pos:start="361:62" pos:end="361:62">8</literal></expr>;</expr_stmt>



                    <expr_stmt pos:start="365:21" pos:end="365:72"><expr pos:start="365:21" pos:end="365:71"><call pos:start="365:21" pos:end="365:71"><name pos:start="365:21" pos:end="365:35">ff_h264dsp_init</name><argument_list pos:start="365:36" pos:end="365:71">(<argument pos:start="365:37" pos:end="365:47"><expr pos:start="365:37" pos:end="365:47"><operator pos:start="365:37" pos:end="365:37">&amp;</operator><name pos:start="365:38" pos:end="365:47"><name pos:start="365:38" pos:end="365:38">h</name><operator pos:start="365:39" pos:end="365:40">-&gt;</operator><name pos:start="365:41" pos:end="365:47">h264dsp</name></name></expr></argument>, <argument pos:start="365:50" pos:end="365:70"><expr pos:start="365:50" pos:end="365:70"><name pos:start="365:50" pos:end="365:70"><name pos:start="365:50" pos:end="365:50">h</name><operator pos:start="365:51" pos:end="365:52">-&gt;</operator><name pos:start="365:53" pos:end="365:55">sps</name><operator pos:start="365:56" pos:end="365:56">.</operator><name pos:start="365:57" pos:end="365:70">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="367:21" pos:end="367:83"><expr pos:start="367:21" pos:end="367:82"><call pos:start="367:21" pos:end="367:82"><name pos:start="367:21" pos:end="367:37">ff_h264_pred_init</name><argument_list pos:start="367:38" pos:end="367:82">(<argument pos:start="367:39" pos:end="367:45"><expr pos:start="367:39" pos:end="367:45"><operator pos:start="367:39" pos:end="367:39">&amp;</operator><name pos:start="367:40" pos:end="367:45"><name pos:start="367:40" pos:end="367:40">h</name><operator pos:start="367:41" pos:end="367:42">-&gt;</operator><name pos:start="367:43" pos:end="367:45">hpc</name></name></expr></argument>, <argument pos:start="367:48" pos:end="367:58"><expr pos:start="367:48" pos:end="367:58"><name pos:start="367:48" pos:end="367:58"><name pos:start="367:48" pos:end="367:48">s</name><operator pos:start="367:49" pos:end="367:50">-&gt;</operator><name pos:start="367:51" pos:end="367:58">codec_id</name></name></expr></argument>, <argument pos:start="367:61" pos:end="367:81"><expr pos:start="367:61" pos:end="367:81"><name pos:start="367:61" pos:end="367:81"><name pos:start="367:61" pos:end="367:61">h</name><operator pos:start="367:62" pos:end="367:63">-&gt;</operator><name pos:start="367:64" pos:end="367:66">sps</name><operator pos:start="367:67" pos:end="367:67">.</operator><name pos:start="367:68" pos:end="367:81">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:52"><expr pos:start="369:21" pos:end="369:51"><call pos:start="369:21" pos:end="369:51"><name pos:start="369:21" pos:end="369:32">dsputil_init</name><argument_list pos:start="369:33" pos:end="369:51">(<argument pos:start="369:34" pos:end="369:40"><expr pos:start="369:34" pos:end="369:40"><operator pos:start="369:34" pos:end="369:34">&amp;</operator><name pos:start="369:35" pos:end="369:40"><name pos:start="369:35" pos:end="369:35">s</name><operator pos:start="369:36" pos:end="369:37">-&gt;</operator><name pos:start="369:38" pos:end="369:40">dsp</name></name></expr></argument>, <argument pos:start="369:43" pos:end="369:50"><expr pos:start="369:43" pos:end="369:50"><name pos:start="369:43" pos:end="369:50"><name pos:start="369:43" pos:end="369:43">s</name><operator pos:start="369:44" pos:end="369:45">-&gt;</operator><name pos:start="369:46" pos:end="369:50">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="371:19" pos:end="377:17">else <block pos:start="371:24" pos:end="377:17">{<block_content pos:start="373:21" pos:end="375:30">

                    <expr_stmt pos:start="373:21" pos:end="373:102"><expr pos:start="373:21" pos:end="373:101"><call pos:start="373:21" pos:end="373:101"><name pos:start="373:21" pos:end="373:26">av_log</name><argument_list pos:start="373:27" pos:end="373:101">(<argument pos:start="373:28" pos:end="373:32"><expr pos:start="373:28" pos:end="373:32"><name pos:start="373:28" pos:end="373:32">avctx</name></expr></argument>, <argument pos:start="373:35" pos:end="373:46"><expr pos:start="373:35" pos:end="373:46"><name pos:start="373:35" pos:end="373:46">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="373:49" pos:end="373:77"><expr pos:start="373:49" pos:end="373:77"><literal type="string" pos:start="373:49" pos:end="373:77">"Unsupported bit depth: %d\n"</literal></expr></argument>, <argument pos:start="373:80" pos:end="373:100"><expr pos:start="373:80" pos:end="373:100"><name pos:start="373:80" pos:end="373:100"><name pos:start="373:80" pos:end="373:80">h</name><operator pos:start="373:81" pos:end="373:82">-&gt;</operator><name pos:start="373:83" pos:end="373:85">sps</name><operator pos:start="373:86" pos:end="373:86">.</operator><name pos:start="373:87" pos:end="373:100">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="375:21" pos:end="375:30">return <expr pos:start="375:28" pos:end="375:29"><operator pos:start="375:28" pos:end="375:28">-</operator><literal type="number" pos:start="375:29" pos:end="375:29">1</literal></expr>;</return>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="381:13" pos:end="381:18">break;</break>

        <case pos:start="383:9" pos:end="383:21">case <expr pos:start="383:14" pos:end="383:20"><name pos:start="383:14" pos:end="383:20">NAL_PPS</name></expr>:</case>

            <expr_stmt pos:start="385:13" pos:end="385:51"><expr pos:start="385:13" pos:end="385:50"><call pos:start="385:13" pos:end="385:50"><name pos:start="385:13" pos:end="385:25">init_get_bits</name><argument_list pos:start="385:26" pos:end="385:50">(<argument pos:start="385:27" pos:end="385:32"><expr pos:start="385:27" pos:end="385:32"><operator pos:start="385:27" pos:end="385:27">&amp;</operator><name pos:start="385:28" pos:end="385:32"><name pos:start="385:28" pos:end="385:28">s</name><operator pos:start="385:29" pos:end="385:30">-&gt;</operator><name pos:start="385:31" pos:end="385:32">gb</name></name></expr></argument>, <argument pos:start="385:35" pos:end="385:37"><expr pos:start="385:35" pos:end="385:37"><name pos:start="385:35" pos:end="385:37">ptr</name></expr></argument>, <argument pos:start="385:40" pos:end="385:49"><expr pos:start="385:40" pos:end="385:49"><name pos:start="385:40" pos:end="385:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="389:13" pos:end="389:64"><expr pos:start="389:13" pos:end="389:63"><call pos:start="389:13" pos:end="389:63"><name pos:start="389:13" pos:end="389:48">ff_h264_decode_picture_parameter_set</name><argument_list pos:start="389:49" pos:end="389:63">(<argument pos:start="389:50" pos:end="389:50"><expr pos:start="389:50" pos:end="389:50"><name pos:start="389:50" pos:end="389:50">h</name></expr></argument>, <argument pos:start="389:53" pos:end="389:62"><expr pos:start="389:53" pos:end="389:62"><name pos:start="389:53" pos:end="389:62">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <break pos:start="393:13" pos:end="393:18">break;</break>

        <case pos:start="395:9" pos:end="395:21">case <expr pos:start="395:14" pos:end="395:20"><name pos:start="395:14" pos:end="395:20">NAL_AUD</name></expr>:</case>

        <case pos:start="397:9" pos:end="397:30">case <expr pos:start="397:14" pos:end="397:29"><name pos:start="397:14" pos:end="397:29">NAL_END_SEQUENCE</name></expr>:</case>

        <case pos:start="399:9" pos:end="399:28">case <expr pos:start="399:14" pos:end="399:27"><name pos:start="399:14" pos:end="399:27">NAL_END_STREAM</name></expr>:</case>

        <case pos:start="401:9" pos:end="401:29">case <expr pos:start="401:14" pos:end="401:28"><name pos:start="401:14" pos:end="401:28">NAL_FILLER_DATA</name></expr>:</case>

        <case pos:start="403:9" pos:end="403:25">case <expr pos:start="403:14" pos:end="403:24"><name pos:start="403:14" pos:end="403:24">NAL_SPS_EXT</name></expr>:</case>

        <case pos:start="405:9" pos:end="405:33">case <expr pos:start="405:14" pos:end="405:32"><name pos:start="405:14" pos:end="405:32">NAL_AUXILIARY_SLICE</name></expr>:</case>

            <break pos:start="407:13" pos:end="407:18">break;</break>

        <default pos:start="409:9" pos:end="409:16">default:</default>

            <expr_stmt pos:start="411:13" pos:end="411:107"><expr pos:start="411:13" pos:end="411:106"><call pos:start="411:13" pos:end="411:106"><name pos:start="411:13" pos:end="411:18">av_log</name><argument_list pos:start="411:19" pos:end="411:106">(<argument pos:start="411:20" pos:end="411:24"><expr pos:start="411:20" pos:end="411:24"><name pos:start="411:20" pos:end="411:24">avctx</name></expr></argument>, <argument pos:start="411:27" pos:end="411:38"><expr pos:start="411:27" pos:end="411:38"><name pos:start="411:27" pos:end="411:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="411:41" pos:end="411:74"><expr pos:start="411:41" pos:end="411:74"><literal type="string" pos:start="411:41" pos:end="411:74">"Unknown NAL code: %d (%d bits)\n"</literal></expr></argument>, <argument pos:start="411:77" pos:end="411:93"><expr pos:start="411:77" pos:end="411:93"><name pos:start="411:77" pos:end="411:93"><name pos:start="411:77" pos:end="411:78">hx</name><operator pos:start="411:79" pos:end="411:80">-&gt;</operator><name pos:start="411:81" pos:end="411:93">nal_unit_type</name></name></expr></argument>, <argument pos:start="411:96" pos:end="411:105"><expr pos:start="411:96" pos:end="411:105"><name pos:start="411:96" pos:end="411:105">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <if_stmt pos:start="417:9" pos:end="423:9"><if pos:start="417:9" pos:end="423:9">if<condition pos:start="417:11" pos:end="417:44">(<expr pos:start="417:12" pos:end="417:43"><name pos:start="417:12" pos:end="417:24">context_count</name> <operator pos:start="417:26" pos:end="417:27">==</operator> <name pos:start="417:29" pos:end="417:43"><name pos:start="417:29" pos:end="417:29">h</name><operator pos:start="417:30" pos:end="417:31">-&gt;</operator><name pos:start="417:32" pos:end="417:43">max_contexts</name></name></expr>)</condition> <block pos:start="417:46" pos:end="423:9">{<block_content pos:start="419:13" pos:end="421:30">

            <expr_stmt pos:start="419:13" pos:end="419:52"><expr pos:start="419:13" pos:end="419:51"><call pos:start="419:13" pos:end="419:51"><name pos:start="419:13" pos:end="419:33">execute_decode_slices</name><argument_list pos:start="419:34" pos:end="419:51">(<argument pos:start="419:35" pos:end="419:35"><expr pos:start="419:35" pos:end="419:35"><name pos:start="419:35" pos:end="419:35">h</name></expr></argument>, <argument pos:start="419:38" pos:end="419:50"><expr pos:start="419:38" pos:end="419:50"><name pos:start="419:38" pos:end="419:50">context_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:30"><expr pos:start="421:13" pos:end="421:29"><name pos:start="421:13" pos:end="421:25">context_count</name> <operator pos:start="421:27" pos:end="421:27">=</operator> <literal type="number" pos:start="421:29" pos:end="421:29">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="427:9" pos:end="449:9"><if pos:start="427:9" pos:end="429:76">if <condition pos:start="427:12" pos:end="427:20">(<expr pos:start="427:13" pos:end="427:19"><name pos:start="427:13" pos:end="427:15">err</name> <operator pos:start="427:17" pos:end="427:17">&lt;</operator> <literal type="number" pos:start="427:19" pos:end="427:19">0</literal></expr>)</condition><block type="pseudo" pos:start="429:13" pos:end="429:76"><block_content pos:start="429:13" pos:end="429:76">

            <expr_stmt pos:start="429:13" pos:end="429:76"><expr pos:start="429:13" pos:end="429:75"><call pos:start="429:13" pos:end="429:75"><name pos:start="429:13" pos:end="429:18">av_log</name><argument_list pos:start="429:19" pos:end="429:75">(<argument pos:start="429:20" pos:end="429:29"><expr pos:start="429:20" pos:end="429:29"><name pos:start="429:20" pos:end="429:29"><name pos:start="429:20" pos:end="429:20">h</name><operator pos:start="429:21" pos:end="429:22">-&gt;</operator><name pos:start="429:23" pos:end="429:23">s</name><operator pos:start="429:24" pos:end="429:24">.</operator><name pos:start="429:25" pos:end="429:29">avctx</name></name></expr></argument>, <argument pos:start="429:32" pos:end="429:43"><expr pos:start="429:32" pos:end="429:43"><name pos:start="429:32" pos:end="429:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="429:46" pos:end="429:74"><expr pos:start="429:46" pos:end="429:74"><literal type="string" pos:start="429:46" pos:end="429:74">"decode_slice_header error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="431:9" pos:end="449:9">else if<condition pos:start="431:16" pos:end="431:25">(<expr pos:start="431:17" pos:end="431:24"><name pos:start="431:17" pos:end="431:19">err</name> <operator pos:start="431:21" pos:end="431:22">==</operator> <literal type="number" pos:start="431:24" pos:end="431:24">1</literal></expr>)</condition> <block pos:start="431:27" pos:end="449:9">{<block_content pos:start="441:13" pos:end="447:23">

            <comment type="block" pos:start="433:13" pos:end="439:67">/* Slice could not be decoded in parallel mode, copy down

             * NAL unit stuff to context 0 and restart. Note that

             * rbsp_buffer is not transferred, but since we no longer

             * run in parallel mode this should not be an issue. */</comment>

            <expr_stmt pos:start="441:13" pos:end="441:49"><expr pos:start="441:13" pos:end="441:48"><name pos:start="441:13" pos:end="441:28"><name pos:start="441:13" pos:end="441:13">h</name><operator pos:start="441:14" pos:end="441:15">-&gt;</operator><name pos:start="441:16" pos:end="441:28">nal_unit_type</name></name> <operator pos:start="441:30" pos:end="441:30">=</operator> <name pos:start="441:32" pos:end="441:48"><name pos:start="441:32" pos:end="441:33">hx</name><operator pos:start="441:34" pos:end="441:35">-&gt;</operator><name pos:start="441:36" pos:end="441:48">nal_unit_type</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:47"><expr pos:start="443:13" pos:end="443:46"><name pos:start="443:13" pos:end="443:26"><name pos:start="443:13" pos:end="443:13">h</name><operator pos:start="443:14" pos:end="443:15">-&gt;</operator><name pos:start="443:16" pos:end="443:26">nal_ref_idc</name></name>   <operator pos:start="443:30" pos:end="443:30">=</operator> <name pos:start="443:32" pos:end="443:46"><name pos:start="443:32" pos:end="443:33">hx</name><operator pos:start="443:34" pos:end="443:35">-&gt;</operator><name pos:start="443:36" pos:end="443:46">nal_ref_idc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="445:13" pos:end="445:19"><expr pos:start="445:13" pos:end="445:18"><name pos:start="445:13" pos:end="445:14">hx</name> <operator pos:start="445:16" pos:end="445:16">=</operator> <name pos:start="445:18" pos:end="445:18">h</name></expr>;</expr_stmt>

            <goto pos:start="447:13" pos:end="447:23">goto <name pos:start="447:18" pos:end="447:22">again</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="453:5" pos:end="455:48"><if pos:start="453:5" pos:end="455:48">if<condition pos:start="453:7" pos:end="453:21">(<expr pos:start="453:8" pos:end="453:20"><name pos:start="453:8" pos:end="453:20">context_count</name></expr>)</condition><block type="pseudo" pos:start="455:9" pos:end="455:48"><block_content pos:start="455:9" pos:end="455:48">

        <expr_stmt pos:start="455:9" pos:end="455:48"><expr pos:start="455:9" pos:end="455:47"><call pos:start="455:9" pos:end="455:47"><name pos:start="455:9" pos:end="455:29">execute_decode_slices</name><argument_list pos:start="455:30" pos:end="455:47">(<argument pos:start="455:31" pos:end="455:31"><expr pos:start="455:31" pos:end="455:31"><name pos:start="455:31" pos:end="455:31">h</name></expr></argument>, <argument pos:start="455:34" pos:end="455:46"><expr pos:start="455:34" pos:end="455:46"><name pos:start="455:34" pos:end="455:46">context_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="457:5" pos:end="457:21">return <expr pos:start="457:12" pos:end="457:20"><name pos:start="457:12" pos:end="457:20">buf_index</name></expr>;</return>

</block_content>}</block></function>
</unit>
