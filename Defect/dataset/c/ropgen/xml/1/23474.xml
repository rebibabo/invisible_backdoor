<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23474.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">ich9_apm_ctrl_changed</name><parameter_list pos:start="1:34" pos:end="1:58">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:42">uint32_t</name></type> <name pos:start="1:44" pos:end="1:46">val</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:57"><decl pos:start="1:49" pos:end="1:57"><type pos:start="1:49" pos:end="1:57"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">ICH9LPCState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">lpc</name> <init pos:start="5:23" pos:end="5:27">= <expr pos:start="5:25" pos:end="5:27"><name pos:start="5:25" pos:end="5:27">arg</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:33">/* ACPI specs 3.0, 4.7.2.5 */</comment>

    <expr_stmt pos:start="11:5" pos:end="15:54"><expr pos:start="11:5" pos:end="15:53"><call pos:start="11:5" pos:end="15:53"><name pos:start="11:5" pos:end="11:23">acpi_pm1_cnt_update</name><argument_list pos:start="11:24" pos:end="15:53">(<argument pos:start="11:25" pos:end="11:42"><expr pos:start="11:25" pos:end="11:42"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:42"><name pos:start="11:26" pos:end="11:28">lpc</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:32">pm</name><operator pos:start="11:33" pos:end="11:33">.</operator><name pos:start="11:34" pos:end="11:42">acpi_regs</name></name></expr></argument>,

                        <argument pos:start="13:25" pos:end="13:51"><expr pos:start="13:25" pos:end="13:51"><name pos:start="13:25" pos:end="13:27">val</name> <operator pos:start="13:29" pos:end="13:30">==</operator> <name pos:start="13:32" pos:end="13:51">ICH9_APM_ACPI_ENABLE</name></expr></argument>,

                        <argument pos:start="15:25" pos:end="15:52"><expr pos:start="15:25" pos:end="15:52"><name pos:start="15:25" pos:end="15:27">val</name> <operator pos:start="15:29" pos:end="15:30">==</operator> <name pos:start="15:32" pos:end="15:52">ICH9_APM_ACPI_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:68">(<expr pos:start="17:9" pos:end="17:67"><name pos:start="17:9" pos:end="17:11">val</name> <operator pos:start="17:13" pos:end="17:14">==</operator> <name pos:start="17:16" pos:end="17:35">ICH9_APM_ACPI_ENABLE</name> <operator pos:start="17:37" pos:end="17:38">||</operator> <name pos:start="17:40" pos:end="17:42">val</name> <operator pos:start="17:44" pos:end="17:45">==</operator> <name pos:start="17:47" pos:end="17:67">ICH9_APM_ACPI_DISABLE</name></expr>)</condition> <block pos:start="17:70" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:15">

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:63">/* SMI_EN = PMBASE + 30. SMI control and enable register */</comment>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:50">(<expr pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:11">lpc</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:15">pm</name><operator pos:start="27:16" pos:end="27:16">.</operator><name pos:start="27:17" pos:end="27:22">smi_en</name></name> <operator pos:start="27:24" pos:end="27:24">&amp;</operator> <name pos:start="27:26" pos:end="27:49">ICH9_PMIO_SMI_EN_APMC_EN</name></expr>)</condition> <block pos:start="27:52" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:54">

        <expr_stmt pos:start="29:9" pos:end="29:54"><expr pos:start="29:9" pos:end="29:53"><call pos:start="29:9" pos:end="29:53"><name pos:start="29:9" pos:end="29:21">cpu_interrupt</name><argument_list pos:start="29:22" pos:end="29:53">(<argument pos:start="29:23" pos:end="29:33"><expr pos:start="29:23" pos:end="29:33"><name pos:start="29:23" pos:end="29:33">current_cpu</name></expr></argument>, <argument pos:start="29:36" pos:end="29:52"><expr pos:start="29:36" pos:end="29:52"><name pos:start="29:36" pos:end="29:52">CPU_INTERRUPT_SMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
