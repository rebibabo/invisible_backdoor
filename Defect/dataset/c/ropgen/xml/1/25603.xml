<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25603.c" pos:tabs="8"><function pos:start="1:1" pos:end="260:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">aac_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:54"><decl pos:start="1:29" pos:end="1:54"><type pos:start="1:29" pos:end="1:54"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:54">avccontext</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:66"><decl pos:start="1:57" pos:end="1:66"><type pos:start="1:57" pos:end="1:66"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">data_size</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="260:1">{<block_content pos:start="7:5" pos:end="258:59">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">AACContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:18">ac</name> <init pos:start="11:20" pos:end="11:42">= <expr pos:start="11:22" pos:end="11:42"><name pos:start="11:22" pos:end="11:42"><name pos:start="11:22" pos:end="11:31">avccontext</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">ChannelElement</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:23">che</name> <init pos:start="13:25" pos:end="13:30">= <expr pos:start="13:27" pos:end="13:30"><name pos:start="13:27" pos:end="13:30">NULL</name></expr></init></decl>, <decl pos:start="13:33" pos:end="13:48"><type ref="prev" pos:start="13:5" pos:end="13:20"><modifier pos:start="13:33" pos:end="13:33">*</modifier></type><name pos:start="13:34" pos:end="13:41">che_prev</name> <init pos:start="13:43" pos:end="13:48">= <expr pos:start="13:45" pos:end="13:48"><name pos:start="13:45" pos:end="13:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:63"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:8">enum</name> <name pos:start="17:10" pos:end="17:25">RawDataBlockType</name></name></type> <name pos:start="17:27" pos:end="17:35">elem_type</name></decl>, <decl pos:start="17:38" pos:end="17:62"><type ref="prev" pos:start="17:5" pos:end="17:25"/><name pos:start="17:38" pos:end="17:51">elem_type_prev</name> <init pos:start="17:53" pos:end="17:62">= <expr pos:start="17:55" pos:end="17:62"><name pos:start="17:55" pos:end="17:62">TYPE_END</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">err</name></decl>, <decl pos:start="19:14" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:20">elem_id</name></decl>, <decl pos:start="19:23" pos:end="19:35"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:23" pos:end="19:35">data_size_tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">buf_consumed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">samples</name> <init pos:start="23:17" pos:end="23:22">= <expr pos:start="23:19" pos:end="23:22"><literal type="number" pos:start="23:19" pos:end="23:22">1024</literal></expr></init></decl>, <decl pos:start="23:25" pos:end="23:34"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:25" pos:end="23:34">multiplier</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">buf_offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><call pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:17">init_get_bits</name><argument_list pos:start="29:18" pos:end="29:41">(<argument pos:start="29:19" pos:end="29:21"><expr pos:start="29:19" pos:end="29:21"><operator pos:start="29:19" pos:end="29:19">&amp;</operator><name pos:start="29:20" pos:end="29:21">gb</name></expr></argument>, <argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">buf</name></expr></argument>, <argument pos:start="29:29" pos:end="29:40"><expr pos:start="29:29" pos:end="29:40"><name pos:start="29:29" pos:end="29:36">buf_size</name> <operator pos:start="29:38" pos:end="29:38">*</operator> <literal type="number" pos:start="29:40" pos:end="29:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="51:5">if <condition pos:start="33:8" pos:end="33:36">(<expr pos:start="33:9" pos:end="33:35"><call pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:17">show_bits</name><argument_list pos:start="33:18" pos:end="33:26">(<argument pos:start="33:19" pos:end="33:21"><expr pos:start="33:19" pos:end="33:21"><operator pos:start="33:19" pos:end="33:19">&amp;</operator><name pos:start="33:20" pos:end="33:21">gb</name></expr></argument>, <argument pos:start="33:24" pos:end="33:25"><expr pos:start="33:24" pos:end="33:25"><literal type="number" pos:start="33:24" pos:end="33:25">12</literal></expr></argument>)</argument_list></call> <operator pos:start="33:28" pos:end="33:29">==</operator> <literal type="number" pos:start="33:31" pos:end="33:35">0xfff</literal></expr>)</condition> <block pos:start="33:38" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:9">

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:49">(<expr pos:start="35:13" pos:end="35:48"><call pos:start="35:13" pos:end="35:44"><name pos:start="35:13" pos:end="35:35">parse_adts_frame_header</name><argument_list pos:start="35:36" pos:end="35:44">(<argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><name pos:start="35:37" pos:end="35:38">ac</name></expr></argument>, <argument pos:start="35:41" pos:end="35:43"><expr pos:start="35:41" pos:end="35:43"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:43">gb</name></expr></argument>)</argument_list></call> <operator pos:start="35:46" pos:end="35:46">&lt;</operator> <literal type="number" pos:start="35:48" pos:end="35:48">0</literal></expr>)</condition> <block pos:start="35:51" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:22">

            <expr_stmt pos:start="37:13" pos:end="37:83"><expr pos:start="37:13" pos:end="37:82"><call pos:start="37:13" pos:end="37:82"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="37:82">(<argument pos:start="37:20" pos:end="37:29"><expr pos:start="37:20" pos:end="37:29"><name pos:start="37:20" pos:end="37:29">avccontext</name></expr></argument>, <argument pos:start="37:32" pos:end="37:43"><expr pos:start="37:32" pos:end="37:43"><name pos:start="37:32" pos:end="37:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:46" pos:end="37:81"><expr pos:start="37:46" pos:end="37:81"><literal type="string" pos:start="37:46" pos:end="37:81">"Error decoding AAC frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:22">return <expr pos:start="39:20" pos:end="39:21"><operator pos:start="39:20" pos:end="39:20">-</operator><literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:41">(<expr pos:start="43:13" pos:end="43:40"><name pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:14">ac</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:20">m4ac</name><operator pos:start="43:21" pos:end="43:21">.</operator><name pos:start="43:22" pos:end="43:35">sampling_index</name></name> <operator pos:start="43:37" pos:end="43:37">&gt;</operator> <literal type="number" pos:start="43:39" pos:end="43:40">12</literal></expr>)</condition> <block pos:start="43:43" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:22">

            <expr_stmt pos:start="45:13" pos:end="45:110"><expr pos:start="45:13" pos:end="45:109"><call pos:start="45:13" pos:end="45:109"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="45:109">(<argument pos:start="45:20" pos:end="45:33"><expr pos:start="45:20" pos:end="45:33"><name pos:start="45:20" pos:end="45:33"><name pos:start="45:20" pos:end="45:21">ac</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:33">avccontext</name></name></expr></argument>, <argument pos:start="45:36" pos:end="45:47"><expr pos:start="45:36" pos:end="45:47"><name pos:start="45:36" pos:end="45:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:50" pos:end="45:83"><expr pos:start="45:50" pos:end="45:83"><literal type="string" pos:start="45:50" pos:end="45:83">"invalid sampling rate index %d\n"</literal></expr></argument>, <argument pos:start="45:86" pos:end="45:108"><expr pos:start="45:86" pos:end="45:108"><name pos:start="45:86" pos:end="45:108"><name pos:start="45:86" pos:end="45:87">ac</name><operator pos:start="45:88" pos:end="45:89">-&gt;</operator><name pos:start="45:90" pos:end="45:93">m4ac</name><operator pos:start="45:94" pos:end="45:94">.</operator><name pos:start="45:95" pos:end="45:108">sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>




    <comment type="line" pos:start="56:5" pos:end="56:12">// parse</comment>

    <while pos:start="58:5" pos:end="198:5">while <condition pos:start="58:11" pos:end="58:54">(<expr pos:start="58:12" pos:end="58:53"><operator pos:start="58:12" pos:end="58:12">(</operator><name pos:start="58:13" pos:end="58:21">elem_type</name> <operator pos:start="58:23" pos:end="58:23">=</operator> <call pos:start="58:25" pos:end="58:40"><name pos:start="58:25" pos:end="58:32">get_bits</name><argument_list pos:start="58:33" pos:end="58:40">(<argument pos:start="58:34" pos:end="58:36"><expr pos:start="58:34" pos:end="58:36"><operator pos:start="58:34" pos:end="58:34">&amp;</operator><name pos:start="58:35" pos:end="58:36">gb</name></expr></argument>, <argument pos:start="58:39" pos:end="58:39"><expr pos:start="58:39" pos:end="58:39"><literal type="number" pos:start="58:39" pos:end="58:39">3</literal></expr></argument>)</argument_list></call><operator pos:start="58:41" pos:end="58:41">)</operator> <operator pos:start="58:43" pos:end="58:44">!=</operator> <name pos:start="58:46" pos:end="58:53">TYPE_END</name></expr>)</condition> <block pos:start="58:56" pos:end="198:5">{<block_content pos:start="60:9" pos:end="196:9">

        <expr_stmt pos:start="60:9" pos:end="60:35"><expr pos:start="60:9" pos:end="60:34"><name pos:start="60:9" pos:end="60:15">elem_id</name> <operator pos:start="60:17" pos:end="60:17">=</operator> <call pos:start="60:19" pos:end="60:34"><name pos:start="60:19" pos:end="60:26">get_bits</name><argument_list pos:start="60:27" pos:end="60:34">(<argument pos:start="60:28" pos:end="60:30"><expr pos:start="60:28" pos:end="60:30"><operator pos:start="60:28" pos:end="60:28">&amp;</operator><name pos:start="60:29" pos:end="60:30">gb</name></expr></argument>, <argument pos:start="60:33" pos:end="60:33"><expr pos:start="60:33" pos:end="60:33"><literal type="number" pos:start="60:33" pos:end="60:33">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="64:9" pos:end="70:9"><if pos:start="64:9" pos:end="70:9">if <condition pos:start="64:12" pos:end="64:75">(<expr pos:start="64:13" pos:end="64:74"><name pos:start="64:13" pos:end="64:21">elem_type</name> <operator pos:start="64:23" pos:end="64:23">&lt;</operator> <name pos:start="64:25" pos:end="64:32">TYPE_DSE</name> <operator pos:start="64:34" pos:end="64:35">&amp;&amp;</operator> <operator pos:start="64:37" pos:end="64:37">!</operator><operator pos:start="64:38" pos:end="64:38">(</operator><name pos:start="64:39" pos:end="64:41">che</name><operator pos:start="64:42" pos:end="64:42">=</operator><call pos:start="64:43" pos:end="64:73"><name pos:start="64:43" pos:end="64:49">get_che</name><argument_list pos:start="64:50" pos:end="64:73">(<argument pos:start="64:51" pos:end="64:52"><expr pos:start="64:51" pos:end="64:52"><name pos:start="64:51" pos:end="64:52">ac</name></expr></argument>, <argument pos:start="64:55" pos:end="64:63"><expr pos:start="64:55" pos:end="64:63"><name pos:start="64:55" pos:end="64:63">elem_type</name></expr></argument>, <argument pos:start="64:66" pos:end="64:72"><expr pos:start="64:66" pos:end="64:72"><name pos:start="64:66" pos:end="64:72">elem_id</name></expr></argument>)</argument_list></call><operator pos:start="64:74" pos:end="64:74">)</operator></expr>)</condition> <block pos:start="64:77" pos:end="70:9">{<block_content pos:start="66:13" pos:end="68:22">

            <expr_stmt pos:start="66:13" pos:end="66:113"><expr pos:start="66:13" pos:end="66:112"><call pos:start="66:13" pos:end="66:112"><name pos:start="66:13" pos:end="66:18">av_log</name><argument_list pos:start="66:19" pos:end="66:112">(<argument pos:start="66:20" pos:end="66:33"><expr pos:start="66:20" pos:end="66:33"><name pos:start="66:20" pos:end="66:33"><name pos:start="66:20" pos:end="66:21">ac</name><operator pos:start="66:22" pos:end="66:23">-&gt;</operator><name pos:start="66:24" pos:end="66:33">avccontext</name></name></expr></argument>, <argument pos:start="66:36" pos:end="66:47"><expr pos:start="66:36" pos:end="66:47"><name pos:start="66:36" pos:end="66:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="66:50" pos:end="66:91"><expr pos:start="66:50" pos:end="66:91"><literal type="string" pos:start="66:50" pos:end="66:91">"channel element %d.%d is not allocated\n"</literal></expr></argument>, <argument pos:start="66:94" pos:end="66:102"><expr pos:start="66:94" pos:end="66:102"><name pos:start="66:94" pos:end="66:102">elem_type</name></expr></argument>, <argument pos:start="66:105" pos:end="66:111"><expr pos:start="66:105" pos:end="66:111"><name pos:start="66:105" pos:end="66:111">elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="68:13" pos:end="68:22">return <expr pos:start="68:20" pos:end="68:21"><operator pos:start="68:20" pos:end="68:20">-</operator><literal type="number" pos:start="68:21" pos:end="68:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="74:9" pos:end="174:9">switch <condition pos:start="74:16" pos:end="74:26">(<expr pos:start="74:17" pos:end="74:25"><name pos:start="74:17" pos:end="74:25">elem_type</name></expr>)</condition> <block pos:start="74:28" pos:end="174:9">{<block_content pos:start="78:9" pos:end="172:18">



        <case pos:start="78:9" pos:end="78:22">case <expr pos:start="78:14" pos:end="78:21"><name pos:start="78:14" pos:end="78:21">TYPE_SCE</name></expr>:</case>

            <expr_stmt pos:start="80:13" pos:end="80:57"><expr pos:start="80:13" pos:end="80:56"><name pos:start="80:13" pos:end="80:15">err</name> <operator pos:start="80:17" pos:end="80:17">=</operator> <call pos:start="80:19" pos:end="80:56"><name pos:start="80:19" pos:end="80:28">decode_ics</name><argument_list pos:start="80:29" pos:end="80:56">(<argument pos:start="80:30" pos:end="80:31"><expr pos:start="80:30" pos:end="80:31"><name pos:start="80:30" pos:end="80:31">ac</name></expr></argument>, <argument pos:start="80:34" pos:end="80:44"><expr pos:start="80:34" pos:end="80:44"><operator pos:start="80:34" pos:end="80:34">&amp;</operator><name pos:start="80:35" pos:end="80:44"><name pos:start="80:35" pos:end="80:37">che</name><operator pos:start="80:38" pos:end="80:39">-&gt;</operator><name pos:start="80:40" pos:end="80:41">ch</name><index pos:start="80:42" pos:end="80:44">[<expr pos:start="80:43" pos:end="80:43"><literal type="number" pos:start="80:43" pos:end="80:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="80:47" pos:end="80:49"><expr pos:start="80:47" pos:end="80:49"><operator pos:start="80:47" pos:end="80:47">&amp;</operator><name pos:start="80:48" pos:end="80:49">gb</name></expr></argument>, <argument pos:start="80:52" pos:end="80:52"><expr pos:start="80:52" pos:end="80:52"><literal type="number" pos:start="80:52" pos:end="80:52">0</literal></expr></argument>, <argument pos:start="80:55" pos:end="80:55"><expr pos:start="80:55" pos:end="80:55"><literal type="number" pos:start="80:55" pos:end="80:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="82:13" pos:end="82:18">break;</break>



        <case pos:start="86:9" pos:end="86:22">case <expr pos:start="86:14" pos:end="86:21"><name pos:start="86:14" pos:end="86:21">TYPE_CPE</name></expr>:</case>

            <expr_stmt pos:start="88:13" pos:end="88:43"><expr pos:start="88:13" pos:end="88:42"><name pos:start="88:13" pos:end="88:15">err</name> <operator pos:start="88:17" pos:end="88:17">=</operator> <call pos:start="88:19" pos:end="88:42"><name pos:start="88:19" pos:end="88:28">decode_cpe</name><argument_list pos:start="88:29" pos:end="88:42">(<argument pos:start="88:30" pos:end="88:31"><expr pos:start="88:30" pos:end="88:31"><name pos:start="88:30" pos:end="88:31">ac</name></expr></argument>, <argument pos:start="88:34" pos:end="88:36"><expr pos:start="88:34" pos:end="88:36"><operator pos:start="88:34" pos:end="88:34">&amp;</operator><name pos:start="88:35" pos:end="88:36">gb</name></expr></argument>, <argument pos:start="88:39" pos:end="88:41"><expr pos:start="88:39" pos:end="88:41"><name pos:start="88:39" pos:end="88:41">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="90:13" pos:end="90:18">break;</break>



        <case pos:start="94:9" pos:end="94:22">case <expr pos:start="94:14" pos:end="94:21"><name pos:start="94:14" pos:end="94:21">TYPE_CCE</name></expr>:</case>

            <expr_stmt pos:start="96:13" pos:end="96:43"><expr pos:start="96:13" pos:end="96:42"><name pos:start="96:13" pos:end="96:15">err</name> <operator pos:start="96:17" pos:end="96:17">=</operator> <call pos:start="96:19" pos:end="96:42"><name pos:start="96:19" pos:end="96:28">decode_cce</name><argument_list pos:start="96:29" pos:end="96:42">(<argument pos:start="96:30" pos:end="96:31"><expr pos:start="96:30" pos:end="96:31"><name pos:start="96:30" pos:end="96:31">ac</name></expr></argument>, <argument pos:start="96:34" pos:end="96:36"><expr pos:start="96:34" pos:end="96:36"><operator pos:start="96:34" pos:end="96:34">&amp;</operator><name pos:start="96:35" pos:end="96:36">gb</name></expr></argument>, <argument pos:start="96:39" pos:end="96:41"><expr pos:start="96:39" pos:end="96:41"><name pos:start="96:39" pos:end="96:41">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="98:13" pos:end="98:18">break;</break>



        <case pos:start="102:9" pos:end="102:22">case <expr pos:start="102:14" pos:end="102:21"><name pos:start="102:14" pos:end="102:21">TYPE_LFE</name></expr>:</case>

            <expr_stmt pos:start="104:13" pos:end="104:57"><expr pos:start="104:13" pos:end="104:56"><name pos:start="104:13" pos:end="104:15">err</name> <operator pos:start="104:17" pos:end="104:17">=</operator> <call pos:start="104:19" pos:end="104:56"><name pos:start="104:19" pos:end="104:28">decode_ics</name><argument_list pos:start="104:29" pos:end="104:56">(<argument pos:start="104:30" pos:end="104:31"><expr pos:start="104:30" pos:end="104:31"><name pos:start="104:30" pos:end="104:31">ac</name></expr></argument>, <argument pos:start="104:34" pos:end="104:44"><expr pos:start="104:34" pos:end="104:44"><operator pos:start="104:34" pos:end="104:34">&amp;</operator><name pos:start="104:35" pos:end="104:44"><name pos:start="104:35" pos:end="104:37">che</name><operator pos:start="104:38" pos:end="104:39">-&gt;</operator><name pos:start="104:40" pos:end="104:41">ch</name><index pos:start="104:42" pos:end="104:44">[<expr pos:start="104:43" pos:end="104:43"><literal type="number" pos:start="104:43" pos:end="104:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="104:47" pos:end="104:49"><expr pos:start="104:47" pos:end="104:49"><operator pos:start="104:47" pos:end="104:47">&amp;</operator><name pos:start="104:48" pos:end="104:49">gb</name></expr></argument>, <argument pos:start="104:52" pos:end="104:52"><expr pos:start="104:52" pos:end="104:52"><literal type="number" pos:start="104:52" pos:end="104:52">0</literal></expr></argument>, <argument pos:start="104:55" pos:end="104:55"><expr pos:start="104:55" pos:end="104:55"><literal type="number" pos:start="104:55" pos:end="104:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="106:13" pos:end="106:18">break;</break>



        <case pos:start="110:9" pos:end="110:22">case <expr pos:start="110:14" pos:end="110:21"><name pos:start="110:14" pos:end="110:21">TYPE_DSE</name></expr>:</case>

            <expr_stmt pos:start="112:13" pos:end="112:52"><expr pos:start="112:13" pos:end="112:51"><name pos:start="112:13" pos:end="112:15">err</name> <operator pos:start="112:17" pos:end="112:17">=</operator> <call pos:start="112:19" pos:end="112:51"><name pos:start="112:19" pos:end="112:42">skip_data_stream_element</name><argument_list pos:start="112:43" pos:end="112:51">(<argument pos:start="112:44" pos:end="112:45"><expr pos:start="112:44" pos:end="112:45"><name pos:start="112:44" pos:end="112:45">ac</name></expr></argument>, <argument pos:start="112:48" pos:end="112:50"><expr pos:start="112:48" pos:end="112:50"><operator pos:start="112:48" pos:end="112:48">&amp;</operator><name pos:start="112:49" pos:end="112:50">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="114:13" pos:end="114:18">break;</break>



        <case pos:start="118:9" pos:end="118:22">case <expr pos:start="118:14" pos:end="118:21"><name pos:start="118:14" pos:end="118:21">TYPE_PCE</name></expr>:</case> <block pos:start="118:24" pos:end="140:9">{<block_content pos:start="120:13" pos:end="138:18">

            <decl_stmt pos:start="120:13" pos:end="120:61"><decl pos:start="120:13" pos:end="120:60"><type pos:start="120:13" pos:end="120:32"><name pos:start="120:13" pos:end="120:32"><name pos:start="120:13" pos:end="120:16">enum</name> <name pos:start="120:18" pos:end="120:32">ChannelPosition</name></name></type> <name pos:start="120:34" pos:end="120:60"><name pos:start="120:34" pos:end="120:44">new_che_pos</name><index pos:start="120:45" pos:end="120:47">[<expr pos:start="120:46" pos:end="120:46"><literal type="number" pos:start="120:46" pos:end="120:46">4</literal></expr>]</index><index pos:start="120:48" pos:end="120:60">[<expr pos:start="120:49" pos:end="120:59"><name pos:start="120:49" pos:end="120:59">MAX_ELEM_ID</name></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="122:13" pos:end="122:80"><expr pos:start="122:13" pos:end="122:79"><call pos:start="122:13" pos:end="122:79"><name pos:start="122:13" pos:end="122:18">memset</name><argument_list pos:start="122:19" pos:end="122:79">(<argument pos:start="122:20" pos:end="122:30"><expr pos:start="122:20" pos:end="122:30"><name pos:start="122:20" pos:end="122:30">new_che_pos</name></expr></argument>, <argument pos:start="122:33" pos:end="122:33"><expr pos:start="122:33" pos:end="122:33"><literal type="number" pos:start="122:33" pos:end="122:33">0</literal></expr></argument>, <argument pos:start="122:36" pos:end="122:78"><expr pos:start="122:36" pos:end="122:78"><literal type="number" pos:start="122:36" pos:end="122:36">4</literal> <operator pos:start="122:38" pos:end="122:38">*</operator> <name pos:start="122:40" pos:end="122:50">MAX_ELEM_ID</name> <operator pos:start="122:52" pos:end="122:52">*</operator> <sizeof pos:start="122:54" pos:end="122:78">sizeof<argument_list pos:start="122:60" pos:end="122:78">(<argument pos:start="122:61" pos:end="122:77"><expr pos:start="122:61" pos:end="122:77"><name pos:start="122:61" pos:end="122:77"><name pos:start="122:61" pos:end="122:71">new_che_pos</name><index pos:start="122:72" pos:end="122:74">[<expr pos:start="122:73" pos:end="122:73"><literal type="number" pos:start="122:73" pos:end="122:73">0</literal></expr>]</index><index pos:start="122:75" pos:end="122:77">[<expr pos:start="122:76" pos:end="122:76"><literal type="number" pos:start="122:76" pos:end="122:76">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="124:13" pos:end="126:22"><if pos:start="124:13" pos:end="126:22">if <condition pos:start="124:16" pos:end="124:57">(<expr pos:start="124:17" pos:end="124:56"><operator pos:start="124:17" pos:end="124:17">(</operator><name pos:start="124:18" pos:end="124:20">err</name> <operator pos:start="124:22" pos:end="124:22">=</operator> <call pos:start="124:24" pos:end="124:55"><name pos:start="124:24" pos:end="124:33">decode_pce</name><argument_list pos:start="124:34" pos:end="124:55">(<argument pos:start="124:35" pos:end="124:36"><expr pos:start="124:35" pos:end="124:36"><name pos:start="124:35" pos:end="124:36">ac</name></expr></argument>, <argument pos:start="124:39" pos:end="124:49"><expr pos:start="124:39" pos:end="124:49"><name pos:start="124:39" pos:end="124:49">new_che_pos</name></expr></argument>, <argument pos:start="124:52" pos:end="124:54"><expr pos:start="124:52" pos:end="124:54"><operator pos:start="124:52" pos:end="124:52">&amp;</operator><name pos:start="124:53" pos:end="124:54">gb</name></expr></argument>)</argument_list></call><operator pos:start="124:56" pos:end="124:56">)</operator></expr>)</condition><block type="pseudo" pos:start="126:17" pos:end="126:22"><block_content pos:start="126:17" pos:end="126:22">

                <break pos:start="126:17" pos:end="126:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="128:13" pos:end="136:86"><if pos:start="128:13" pos:end="132:114">if <condition pos:start="128:16" pos:end="128:53">(<expr pos:start="128:17" pos:end="128:52"><name pos:start="128:17" pos:end="128:37"><name pos:start="128:17" pos:end="128:18">ac</name><operator pos:start="128:19" pos:end="128:20">-&gt;</operator><name pos:start="128:21" pos:end="128:37">output_configured</name></name> <operator pos:start="128:39" pos:end="128:39">&gt;</operator> <name pos:start="128:41" pos:end="128:52">OC_TRIAL_PCE</name></expr>)</condition><block type="pseudo" pos:start="130:17" pos:end="132:114"><block_content pos:start="130:17" pos:end="132:114">

                <expr_stmt pos:start="130:17" pos:end="132:114"><expr pos:start="130:17" pos:end="132:113"><call pos:start="130:17" pos:end="132:113"><name pos:start="130:17" pos:end="130:22">av_log</name><argument_list pos:start="130:23" pos:end="132:113">(<argument pos:start="130:24" pos:end="130:33"><expr pos:start="130:24" pos:end="130:33"><name pos:start="130:24" pos:end="130:33">avccontext</name></expr></argument>, <argument pos:start="130:36" pos:end="130:47"><expr pos:start="130:36" pos:end="130:47"><name pos:start="130:36" pos:end="130:47">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="132:24" pos:end="132:112"><expr pos:start="132:24" pos:end="132:112"><literal type="string" pos:start="132:24" pos:end="132:112">"Not evaluating a further program_config_element as this construct is dubious at best.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="134:13" pos:end="136:86">else<block type="pseudo" pos:start="136:17" pos:end="136:86"><block_content pos:start="136:17" pos:end="136:86">

                <expr_stmt pos:start="136:17" pos:end="136:86"><expr pos:start="136:17" pos:end="136:85"><name pos:start="136:17" pos:end="136:19">err</name> <operator pos:start="136:21" pos:end="136:21">=</operator> <call pos:start="136:23" pos:end="136:85"><name pos:start="136:23" pos:end="136:38">output_configure</name><argument_list pos:start="136:39" pos:end="136:85">(<argument pos:start="136:40" pos:end="136:41"><expr pos:start="136:40" pos:end="136:41"><name pos:start="136:40" pos:end="136:41">ac</name></expr></argument>, <argument pos:start="136:44" pos:end="136:54"><expr pos:start="136:44" pos:end="136:54"><name pos:start="136:44" pos:end="136:54"><name pos:start="136:44" pos:end="136:45">ac</name><operator pos:start="136:46" pos:end="136:47">-&gt;</operator><name pos:start="136:48" pos:end="136:54">che_pos</name></name></expr></argument>, <argument pos:start="136:57" pos:end="136:67"><expr pos:start="136:57" pos:end="136:67"><name pos:start="136:57" pos:end="136:67">new_che_pos</name></expr></argument>, <argument pos:start="136:70" pos:end="136:70"><expr pos:start="136:70" pos:end="136:70"><literal type="number" pos:start="136:70" pos:end="136:70">0</literal></expr></argument>, <argument pos:start="136:73" pos:end="136:84"><expr pos:start="136:73" pos:end="136:84"><name pos:start="136:73" pos:end="136:84">OC_TRIAL_PCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="138:13" pos:end="138:18">break;</break>

        </block_content>}</block>



        <case pos:start="144:9" pos:end="144:22">case <expr pos:start="144:14" pos:end="144:21"><name pos:start="144:14" pos:end="144:21">TYPE_FIL</name></expr>:</case>

            <if_stmt pos:start="146:13" pos:end="148:48"><if pos:start="146:13" pos:end="148:48">if <condition pos:start="146:16" pos:end="146:30">(<expr pos:start="146:17" pos:end="146:29"><name pos:start="146:17" pos:end="146:23">elem_id</name> <operator pos:start="146:25" pos:end="146:26">==</operator> <literal type="number" pos:start="146:28" pos:end="146:29">15</literal></expr>)</condition><block type="pseudo" pos:start="148:17" pos:end="148:48"><block_content pos:start="148:17" pos:end="148:48">

                <expr_stmt pos:start="148:17" pos:end="148:48"><expr pos:start="148:17" pos:end="148:47"><name pos:start="148:17" pos:end="148:23">elem_id</name> <operator pos:start="148:25" pos:end="148:26">+=</operator> <call pos:start="148:28" pos:end="148:43"><name pos:start="148:28" pos:end="148:35">get_bits</name><argument_list pos:start="148:36" pos:end="148:43">(<argument pos:start="148:37" pos:end="148:39"><expr pos:start="148:37" pos:end="148:39"><operator pos:start="148:37" pos:end="148:37">&amp;</operator><name pos:start="148:38" pos:end="148:39">gb</name></expr></argument>, <argument pos:start="148:42" pos:end="148:42"><expr pos:start="148:42" pos:end="148:42"><literal type="number" pos:start="148:42" pos:end="148:42">8</literal></expr></argument>)</argument_list></call> <operator pos:start="148:45" pos:end="148:45">-</operator> <literal type="number" pos:start="148:47" pos:end="148:47">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="150:13" pos:end="156:13"><if pos:start="150:13" pos:end="156:13">if <condition pos:start="150:16" pos:end="150:49">(<expr pos:start="150:17" pos:end="150:48"><call pos:start="150:17" pos:end="150:34"><name pos:start="150:17" pos:end="150:29">get_bits_left</name><argument_list pos:start="150:30" pos:end="150:34">(<argument pos:start="150:31" pos:end="150:33"><expr pos:start="150:31" pos:end="150:33"><operator pos:start="150:31" pos:end="150:31">&amp;</operator><name pos:start="150:32" pos:end="150:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="150:36" pos:end="150:36">&lt;</operator> <literal type="number" pos:start="150:38" pos:end="150:38">8</literal> <operator pos:start="150:40" pos:end="150:40">*</operator> <name pos:start="150:42" pos:end="150:48">elem_id</name></expr>)</condition> <block pos:start="150:51" pos:end="156:13">{<block_content pos:start="152:21" pos:end="154:30">

                    <expr_stmt pos:start="152:21" pos:end="152:67"><expr pos:start="152:21" pos:end="152:66"><call pos:start="152:21" pos:end="152:66"><name pos:start="152:21" pos:end="152:26">av_log</name><argument_list pos:start="152:27" pos:end="152:66">(<argument pos:start="152:28" pos:end="152:37"><expr pos:start="152:28" pos:end="152:37"><name pos:start="152:28" pos:end="152:37">avccontext</name></expr></argument>, <argument pos:start="152:40" pos:end="152:51"><expr pos:start="152:40" pos:end="152:51"><name pos:start="152:40" pos:end="152:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="152:54" pos:end="152:65"><expr pos:start="152:54" pos:end="152:65"><name pos:start="152:54" pos:end="152:65">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="154:21" pos:end="154:30">return <expr pos:start="154:28" pos:end="154:29"><operator pos:start="154:28" pos:end="154:28">-</operator><literal type="number" pos:start="154:29" pos:end="154:29">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <while pos:start="158:13" pos:end="160:96">while <condition pos:start="158:19" pos:end="158:31">(<expr pos:start="158:20" pos:end="158:30"><name pos:start="158:20" pos:end="158:26">elem_id</name> <operator pos:start="158:28" pos:end="158:28">&gt;</operator> <literal type="number" pos:start="158:30" pos:end="158:30">0</literal></expr>)</condition><block type="pseudo" pos:start="160:17" pos:end="160:96"><block_content pos:start="160:17" pos:end="160:96">

                <expr_stmt pos:start="160:17" pos:end="160:96"><expr pos:start="160:17" pos:end="160:95"><name pos:start="160:17" pos:end="160:23">elem_id</name> <operator pos:start="160:25" pos:end="160:26">-=</operator> <call pos:start="160:28" pos:end="160:95"><name pos:start="160:28" pos:end="160:51">decode_extension_payload</name><argument_list pos:start="160:52" pos:end="160:95">(<argument pos:start="160:53" pos:end="160:54"><expr pos:start="160:53" pos:end="160:54"><name pos:start="160:53" pos:end="160:54">ac</name></expr></argument>, <argument pos:start="160:57" pos:end="160:59"><expr pos:start="160:57" pos:end="160:59"><operator pos:start="160:57" pos:end="160:57">&amp;</operator><name pos:start="160:58" pos:end="160:59">gb</name></expr></argument>, <argument pos:start="160:62" pos:end="160:68"><expr pos:start="160:62" pos:end="160:68"><name pos:start="160:62" pos:end="160:68">elem_id</name></expr></argument>, <argument pos:start="160:71" pos:end="160:78"><expr pos:start="160:71" pos:end="160:78"><name pos:start="160:71" pos:end="160:78">che_prev</name></expr></argument>, <argument pos:start="160:81" pos:end="160:94"><expr pos:start="160:81" pos:end="160:94"><name pos:start="160:81" pos:end="160:94">elem_type_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="162:13" pos:end="162:20"><expr pos:start="162:13" pos:end="162:19"><name pos:start="162:13" pos:end="162:15">err</name> <operator pos:start="162:17" pos:end="162:17">=</operator> <literal type="number" pos:start="162:19" pos:end="162:19">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="162:22" pos:end="162:32">/* FIXME */</comment>

            <break pos:start="164:13" pos:end="164:18">break;</break>



        <default pos:start="168:9" pos:end="168:16">default:</default>

            <expr_stmt pos:start="170:13" pos:end="170:21"><expr pos:start="170:13" pos:end="170:20"><name pos:start="170:13" pos:end="170:15">err</name> <operator pos:start="170:17" pos:end="170:17">=</operator> <operator pos:start="170:19" pos:end="170:19">-</operator><literal type="number" pos:start="170:20" pos:end="170:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="170:23" pos:end="170:71">/* should not happen, but keeps compiler happy */</comment>

            <break pos:start="172:13" pos:end="172:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="178:9" pos:end="178:29"><expr pos:start="178:9" pos:end="178:28"><name pos:start="178:9" pos:end="178:16">che_prev</name>       <operator pos:start="178:24" pos:end="178:24">=</operator> <name pos:start="178:26" pos:end="178:28">che</name></expr>;</expr_stmt>

        <expr_stmt pos:start="180:9" pos:end="180:35"><expr pos:start="180:9" pos:end="180:34"><name pos:start="180:9" pos:end="180:22">elem_type_prev</name> <operator pos:start="180:24" pos:end="180:24">=</operator> <name pos:start="180:26" pos:end="180:34">elem_type</name></expr>;</expr_stmt>



        <if_stmt pos:start="184:9" pos:end="186:23"><if pos:start="184:9" pos:end="186:23">if <condition pos:start="184:12" pos:end="184:16">(<expr pos:start="184:13" pos:end="184:15"><name pos:start="184:13" pos:end="184:15">err</name></expr>)</condition><block type="pseudo" pos:start="186:13" pos:end="186:23"><block_content pos:start="186:13" pos:end="186:23">

            <return pos:start="186:13" pos:end="186:23">return <expr pos:start="186:20" pos:end="186:22"><name pos:start="186:20" pos:end="186:22">err</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="190:9" pos:end="196:9"><if pos:start="190:9" pos:end="196:9">if <condition pos:start="190:12" pos:end="190:35">(<expr pos:start="190:13" pos:end="190:34"><call pos:start="190:13" pos:end="190:30"><name pos:start="190:13" pos:end="190:25">get_bits_left</name><argument_list pos:start="190:26" pos:end="190:30">(<argument pos:start="190:27" pos:end="190:29"><expr pos:start="190:27" pos:end="190:29"><operator pos:start="190:27" pos:end="190:27">&amp;</operator><name pos:start="190:28" pos:end="190:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="190:32" pos:end="190:32">&lt;</operator> <literal type="number" pos:start="190:34" pos:end="190:34">3</literal></expr>)</condition> <block pos:start="190:37" pos:end="196:9">{<block_content pos:start="192:13" pos:end="194:22">

            <expr_stmt pos:start="192:13" pos:end="192:59"><expr pos:start="192:13" pos:end="192:58"><call pos:start="192:13" pos:end="192:58"><name pos:start="192:13" pos:end="192:18">av_log</name><argument_list pos:start="192:19" pos:end="192:58">(<argument pos:start="192:20" pos:end="192:29"><expr pos:start="192:20" pos:end="192:29"><name pos:start="192:20" pos:end="192:29">avccontext</name></expr></argument>, <argument pos:start="192:32" pos:end="192:43"><expr pos:start="192:32" pos:end="192:43"><name pos:start="192:32" pos:end="192:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="192:46" pos:end="192:57"><expr pos:start="192:46" pos:end="192:57"><name pos:start="192:46" pos:end="192:57">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="194:13" pos:end="194:22">return <expr pos:start="194:20" pos:end="194:21"><operator pos:start="194:20" pos:end="194:20">-</operator><literal type="number" pos:start="194:21" pos:end="194:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="202:5" pos:end="202:27"><expr pos:start="202:5" pos:end="202:26"><call pos:start="202:5" pos:end="202:26"><name pos:start="202:5" pos:end="202:22">spectral_to_sample</name><argument_list pos:start="202:23" pos:end="202:26">(<argument pos:start="202:24" pos:end="202:25"><expr pos:start="202:24" pos:end="202:25"><name pos:start="202:24" pos:end="202:25">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="206:5" pos:end="206:91"><expr pos:start="206:5" pos:end="206:90"><name pos:start="206:5" pos:end="206:14">multiplier</name> <operator pos:start="206:16" pos:end="206:16">=</operator> <ternary pos:start="206:18" pos:end="206:90"><condition pos:start="206:18" pos:end="206:38"><expr pos:start="206:18" pos:end="206:36"><operator pos:start="206:18" pos:end="206:18">(</operator><name pos:start="206:19" pos:end="206:30"><name pos:start="206:19" pos:end="206:20">ac</name><operator pos:start="206:21" pos:end="206:22">-&gt;</operator><name pos:start="206:23" pos:end="206:26">m4ac</name><operator pos:start="206:27" pos:end="206:27">.</operator><name pos:start="206:28" pos:end="206:30">sbr</name></name> <operator pos:start="206:32" pos:end="206:33">==</operator> <literal type="number" pos:start="206:35" pos:end="206:35">1</literal><operator pos:start="206:36" pos:end="206:36">)</operator></expr> ?</condition><then pos:start="206:40" pos:end="206:86"> <expr pos:start="206:40" pos:end="206:86"><name pos:start="206:40" pos:end="206:63"><name pos:start="206:40" pos:end="206:41">ac</name><operator pos:start="206:42" pos:end="206:43">-&gt;</operator><name pos:start="206:44" pos:end="206:47">m4ac</name><operator pos:start="206:48" pos:end="206:48">.</operator><name pos:start="206:49" pos:end="206:63">ext_sample_rate</name></name> <operator pos:start="206:65" pos:end="206:65">&gt;</operator> <name pos:start="206:67" pos:end="206:86"><name pos:start="206:67" pos:end="206:68">ac</name><operator pos:start="206:69" pos:end="206:70">-&gt;</operator><name pos:start="206:71" pos:end="206:74">m4ac</name><operator pos:start="206:75" pos:end="206:75">.</operator><name pos:start="206:76" pos:end="206:86">sample_rate</name></name></expr> </then><else pos:start="206:88" pos:end="206:90">: <expr pos:start="206:90" pos:end="206:90"><literal type="number" pos:start="206:90" pos:end="206:90">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="208:5" pos:end="208:27"><expr pos:start="208:5" pos:end="208:26"><name pos:start="208:5" pos:end="208:11">samples</name> <operator pos:start="208:13" pos:end="208:15">&lt;&lt;=</operator> <name pos:start="208:17" pos:end="208:26">multiplier</name></expr>;</expr_stmt>

    <if_stmt pos:start="210:5" pos:end="216:5"><if pos:start="210:5" pos:end="216:5">if <condition pos:start="210:8" pos:end="210:42">(<expr pos:start="210:9" pos:end="210:41"><name pos:start="210:9" pos:end="210:29"><name pos:start="210:9" pos:end="210:10">ac</name><operator pos:start="210:11" pos:end="210:12">-&gt;</operator><name pos:start="210:13" pos:end="210:29">output_configured</name></name> <operator pos:start="210:31" pos:end="210:31">&lt;</operator> <name pos:start="210:33" pos:end="210:41">OC_LOCKED</name></expr>)</condition> <block pos:start="210:44" pos:end="216:5">{<block_content pos:start="212:9" pos:end="214:41">

        <expr_stmt pos:start="212:9" pos:end="212:69"><expr pos:start="212:9" pos:end="212:68"><name pos:start="212:9" pos:end="212:31"><name pos:start="212:9" pos:end="212:18">avccontext</name><operator pos:start="212:19" pos:end="212:20">-&gt;</operator><name pos:start="212:21" pos:end="212:31">sample_rate</name></name> <operator pos:start="212:33" pos:end="212:33">=</operator> <name pos:start="212:35" pos:end="212:54"><name pos:start="212:35" pos:end="212:36">ac</name><operator pos:start="212:37" pos:end="212:38">-&gt;</operator><name pos:start="212:39" pos:end="212:42">m4ac</name><operator pos:start="212:43" pos:end="212:43">.</operator><name pos:start="212:44" pos:end="212:54">sample_rate</name></name> <operator pos:start="212:56" pos:end="212:57">&lt;&lt;</operator> <name pos:start="212:59" pos:end="212:68">multiplier</name></expr>;</expr_stmt>

        <expr_stmt pos:start="214:9" pos:end="214:41"><expr pos:start="214:9" pos:end="214:40"><name pos:start="214:9" pos:end="214:30"><name pos:start="214:9" pos:end="214:18">avccontext</name><operator pos:start="214:19" pos:end="214:20">-&gt;</operator><name pos:start="214:21" pos:end="214:30">frame_size</name></name> <operator pos:start="214:32" pos:end="214:32">=</operator> <name pos:start="214:34" pos:end="214:40">samples</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="220:5" pos:end="220:69"><expr pos:start="220:5" pos:end="220:68"><name pos:start="220:5" pos:end="220:17">data_size_tmp</name> <operator pos:start="220:19" pos:end="220:19">=</operator> <name pos:start="220:21" pos:end="220:27">samples</name> <operator pos:start="220:29" pos:end="220:29">*</operator> <name pos:start="220:31" pos:end="220:50"><name pos:start="220:31" pos:end="220:40">avccontext</name><operator pos:start="220:41" pos:end="220:42">-&gt;</operator><name pos:start="220:43" pos:end="220:50">channels</name></name> <operator pos:start="220:52" pos:end="220:52">*</operator> <sizeof pos:start="220:54" pos:end="220:68">sizeof<argument_list pos:start="220:60" pos:end="220:68">(<argument pos:start="220:61" pos:end="220:67"><expr pos:start="220:61" pos:end="220:67"><name pos:start="220:61" pos:end="220:67">int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="222:5" pos:end="232:5"><if pos:start="222:5" pos:end="232:5">if <condition pos:start="222:8" pos:end="222:35">(<expr pos:start="222:9" pos:end="222:34"><operator pos:start="222:9" pos:end="222:9">*</operator><name pos:start="222:10" pos:end="222:18">data_size</name> <operator pos:start="222:20" pos:end="222:20">&lt;</operator> <name pos:start="222:22" pos:end="222:34">data_size_tmp</name></expr>)</condition> <block pos:start="222:37" pos:end="232:5">{<block_content pos:start="224:9" pos:end="230:18">

        <expr_stmt pos:start="224:9" pos:end="228:42"><expr pos:start="224:9" pos:end="228:41"><call pos:start="224:9" pos:end="228:41"><name pos:start="224:9" pos:end="224:14">av_log</name><argument_list pos:start="224:15" pos:end="228:41">(<argument pos:start="224:16" pos:end="224:25"><expr pos:start="224:16" pos:end="224:25"><name pos:start="224:16" pos:end="224:25">avccontext</name></expr></argument>, <argument pos:start="224:28" pos:end="224:39"><expr pos:start="224:28" pos:end="224:39"><name pos:start="224:28" pos:end="224:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="226:16" pos:end="226:105"><expr pos:start="226:16" pos:end="226:105"><literal type="string" pos:start="226:16" pos:end="226:105">"Output buffer too small (%d) or trying to output too many samples (%d) for this frame.\n"</literal></expr></argument>,

               <argument pos:start="228:16" pos:end="228:25"><expr pos:start="228:16" pos:end="228:25"><operator pos:start="228:16" pos:end="228:16">*</operator><name pos:start="228:17" pos:end="228:25">data_size</name></expr></argument>, <argument pos:start="228:28" pos:end="228:40"><expr pos:start="228:28" pos:end="228:40"><name pos:start="228:28" pos:end="228:40">data_size_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="230:9" pos:end="230:18">return <expr pos:start="230:16" pos:end="230:17"><operator pos:start="230:16" pos:end="230:16">-</operator><literal type="number" pos:start="230:17" pos:end="230:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="234:5" pos:end="234:31"><expr pos:start="234:5" pos:end="234:30"><operator pos:start="234:5" pos:end="234:5">*</operator><name pos:start="234:6" pos:end="234:14">data_size</name> <operator pos:start="234:16" pos:end="234:16">=</operator> <name pos:start="234:18" pos:end="234:30">data_size_tmp</name></expr>;</expr_stmt>



    <expr_stmt pos:start="238:5" pos:end="238:108"><expr pos:start="238:5" pos:end="238:107"><call pos:start="238:5" pos:end="238:107"><name pos:start="238:5" pos:end="238:37"><name pos:start="238:5" pos:end="238:6">ac</name><operator pos:start="238:7" pos:end="238:8">-&gt;</operator><name pos:start="238:9" pos:end="238:11">dsp</name><operator pos:start="238:12" pos:end="238:12">.</operator><name pos:start="238:13" pos:end="238:37">float_to_int16_interleave</name></name><argument_list pos:start="238:38" pos:end="238:107">(<argument pos:start="238:39" pos:end="238:42"><expr pos:start="238:39" pos:end="238:42"><name pos:start="238:39" pos:end="238:42">data</name></expr></argument>, <argument pos:start="238:45" pos:end="238:75"><expr pos:start="238:45" pos:end="238:75"><operator pos:start="238:45" pos:end="238:45">(</operator><specifier pos:start="238:46" pos:end="238:50">const</specifier> <name pos:start="238:52" pos:end="238:56">float</name> <operator pos:start="238:58" pos:end="238:58">*</operator><operator pos:start="238:59" pos:end="238:59">*</operator><operator pos:start="238:60" pos:end="238:60">)</operator><name pos:start="238:61" pos:end="238:75"><name pos:start="238:61" pos:end="238:62">ac</name><operator pos:start="238:63" pos:end="238:64">-&gt;</operator><name pos:start="238:65" pos:end="238:75">output_data</name></name></expr></argument>, <argument pos:start="238:78" pos:end="238:84"><expr pos:start="238:78" pos:end="238:84"><name pos:start="238:78" pos:end="238:84">samples</name></expr></argument>, <argument pos:start="238:87" pos:end="238:106"><expr pos:start="238:87" pos:end="238:106"><name pos:start="238:87" pos:end="238:106"><name pos:start="238:87" pos:end="238:96">avccontext</name><operator pos:start="238:97" pos:end="238:98">-&gt;</operator><name pos:start="238:99" pos:end="238:106">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="242:5" pos:end="244:42"><if pos:start="242:5" pos:end="244:42">if <condition pos:start="242:8" pos:end="242:30">(<expr pos:start="242:9" pos:end="242:29"><name pos:start="242:9" pos:end="242:29"><name pos:start="242:9" pos:end="242:10">ac</name><operator pos:start="242:11" pos:end="242:12">-&gt;</operator><name pos:start="242:13" pos:end="242:29">output_configured</name></name></expr>)</condition><block type="pseudo" pos:start="244:9" pos:end="244:42"><block_content pos:start="244:9" pos:end="244:42">

        <expr_stmt pos:start="244:9" pos:end="244:42"><expr pos:start="244:9" pos:end="244:41"><name pos:start="244:9" pos:end="244:29"><name pos:start="244:9" pos:end="244:10">ac</name><operator pos:start="244:11" pos:end="244:12">-&gt;</operator><name pos:start="244:13" pos:end="244:29">output_configured</name></name> <operator pos:start="244:31" pos:end="244:31">=</operator> <name pos:start="244:33" pos:end="244:41">OC_LOCKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="248:5" pos:end="248:50"><expr pos:start="248:5" pos:end="248:49"><name pos:start="248:5" pos:end="248:16">buf_consumed</name> <operator pos:start="248:18" pos:end="248:18">=</operator> <operator pos:start="248:20" pos:end="248:20">(</operator><call pos:start="248:21" pos:end="248:39"><name pos:start="248:21" pos:end="248:34">get_bits_count</name><argument_list pos:start="248:35" pos:end="248:39">(<argument pos:start="248:36" pos:end="248:38"><expr pos:start="248:36" pos:end="248:38"><operator pos:start="248:36" pos:end="248:36">&amp;</operator><name pos:start="248:37" pos:end="248:38">gb</name></expr></argument>)</argument_list></call> <operator pos:start="248:41" pos:end="248:41">+</operator> <literal type="number" pos:start="248:43" pos:end="248:43">7</literal><operator pos:start="248:44" pos:end="248:44">)</operator> <operator pos:start="248:46" pos:end="248:47">&gt;&gt;</operator> <literal type="number" pos:start="248:49" pos:end="248:49">3</literal></expr>;</expr_stmt>

    <for pos:start="250:5" pos:end="254:18">for <control pos:start="250:9" pos:end="250:72">(<init pos:start="250:10" pos:end="250:35"><expr pos:start="250:10" pos:end="250:34"><name pos:start="250:10" pos:end="250:19">buf_offset</name> <operator pos:start="250:21" pos:end="250:21">=</operator> <name pos:start="250:23" pos:end="250:34">buf_consumed</name></expr>;</init> <condition pos:start="250:37" pos:end="250:58"><expr pos:start="250:37" pos:end="250:57"><name pos:start="250:37" pos:end="250:46">buf_offset</name> <operator pos:start="250:48" pos:end="250:48">&lt;</operator> <name pos:start="250:50" pos:end="250:57">buf_size</name></expr>;</condition> <incr pos:start="250:60" pos:end="250:71"><expr pos:start="250:60" pos:end="250:71"><name pos:start="250:60" pos:end="250:69">buf_offset</name><operator pos:start="250:70" pos:end="250:71">++</operator></expr></incr>)</control><block type="pseudo" pos:start="252:9" pos:end="254:18"><block_content pos:start="252:9" pos:end="254:18">

        <if_stmt pos:start="252:9" pos:end="254:18"><if pos:start="252:9" pos:end="254:18">if <condition pos:start="252:12" pos:end="252:28">(<expr pos:start="252:13" pos:end="252:27"><name pos:start="252:13" pos:end="252:27"><name pos:start="252:13" pos:end="252:15">buf</name><index pos:start="252:16" pos:end="252:27">[<expr pos:start="252:17" pos:end="252:26"><name pos:start="252:17" pos:end="252:26">buf_offset</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="254:13" pos:end="254:18"><block_content pos:start="254:13" pos:end="254:18">

            <break pos:start="254:13" pos:end="254:18">break;</break></block_content></block></if></if_stmt></block_content></block></for>



    <return pos:start="258:5" pos:end="258:59">return <expr pos:start="258:12" pos:end="258:58"><ternary pos:start="258:12" pos:end="258:58"><condition pos:start="258:12" pos:end="258:34"><expr pos:start="258:12" pos:end="258:32"><name pos:start="258:12" pos:end="258:19">buf_size</name> <operator pos:start="258:21" pos:end="258:21">&gt;</operator> <name pos:start="258:23" pos:end="258:32">buf_offset</name></expr> ?</condition><then pos:start="258:36" pos:end="258:47"> <expr pos:start="258:36" pos:end="258:47"><name pos:start="258:36" pos:end="258:47">buf_consumed</name></expr> </then><else pos:start="258:49" pos:end="258:58">: <expr pos:start="258:51" pos:end="258:58"><name pos:start="258:51" pos:end="258:58">buf_size</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function></unit>
