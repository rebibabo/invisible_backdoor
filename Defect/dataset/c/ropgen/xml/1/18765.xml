<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18765.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="5:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:34"><decl pos:start="3:25" pos:end="3:34"><type pos:start="3:25" pos:end="3:34"><name pos:start="3:25" pos:end="3:28">void</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">data</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:50"><decl pos:start="3:37" pos:end="3:50"><type pos:start="3:37" pos:end="3:50"><name pos:start="3:37" pos:end="3:39">int</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:50">data_size</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:39"><decl pos:start="5:25" pos:end="5:39"><type pos:start="5:25" pos:end="5:39"><name pos:start="5:25" pos:end="5:32">AVPacket</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:39">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="105:1">{<block_content pos:start="9:5" pos:end="103:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:14">TM2Context</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier> <specifier pos:start="13:18" pos:end="13:22">const</specifier></type> <name pos:start="13:24" pos:end="13:24">l</name> <init pos:start="13:26" pos:end="13:43">= <expr pos:start="13:28" pos:end="13:43"><name pos:start="13:28" pos:end="13:43"><name pos:start="13:28" pos:end="13:32">avctx</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier> <specifier pos:start="15:15" pos:end="15:19">const</specifier></type> <name pos:start="15:21" pos:end="15:21">p</name><init pos:start="15:22" pos:end="15:40">= <expr pos:start="15:24" pos:end="15:40"><operator pos:start="15:24" pos:end="15:24">(</operator><name pos:start="15:25" pos:end="15:31">AVFrame</name><operator pos:start="15:32" pos:end="15:32">*</operator><operator pos:start="15:33" pos:end="15:33">)</operator><operator pos:start="15:34" pos:end="15:34">&amp;</operator><name pos:start="15:35" pos:end="15:40"><name pos:start="15:35" pos:end="15:35">l</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:40">pic</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:15">skip</name></decl>, <decl pos:start="17:18" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:18">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:18">swbuf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:63"><expr pos:start="23:5" pos:end="23:62"><name pos:start="23:5" pos:end="23:9">swbuf</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:62"><name pos:start="23:13" pos:end="23:21">av_malloc</name><argument_list pos:start="23:22" pos:end="23:62">(<argument pos:start="23:23" pos:end="23:61"><expr pos:start="23:23" pos:end="23:61"><name pos:start="23:23" pos:end="23:30">buf_size</name> <operator pos:start="23:32" pos:end="23:32">+</operator> <name pos:start="23:34" pos:end="23:61">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if<condition pos:start="25:7" pos:end="25:14">(<expr pos:start="25:8" pos:end="25:13"><operator pos:start="25:8" pos:end="25:8">!</operator><name pos:start="25:9" pos:end="25:13">swbuf</name></expr>)</condition><block pos:start="25:15" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:74"><expr pos:start="27:9" pos:end="27:73"><call pos:start="27:9" pos:end="27:73"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:73">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:72"><expr pos:start="27:37" pos:end="27:72"><literal type="string" pos:start="27:37" pos:end="27:72">"Cannot allocate temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:5">p</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:16">reference</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <literal type="number" pos:start="33:20" pos:end="33:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:98"><expr pos:start="35:5" pos:end="35:97"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:5">p</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:19">buffer_hints</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:43">FF_BUFFER_HINTS_VALID</name> <operator pos:start="35:45" pos:end="35:45">|</operator> <name pos:start="35:47" pos:end="35:70">FF_BUFFER_HINTS_PRESERVE</name> <operator pos:start="35:72" pos:end="35:72">|</operator> <name pos:start="35:74" pos:end="35:97">FF_BUFFER_HINTS_REUSABLE</name></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if<condition pos:start="37:7" pos:end="37:41">(<expr pos:start="37:8" pos:end="37:40"><call pos:start="37:8" pos:end="37:36"><name pos:start="37:8" pos:end="37:26"><name pos:start="37:8" pos:end="37:12">avctx</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:26">reget_buffer</name></name><argument_list pos:start="37:27" pos:end="37:36">(<argument pos:start="37:28" pos:end="37:32"><expr pos:start="37:28" pos:end="37:32"><name pos:start="37:28" pos:end="37:32">avctx</name></expr></argument>, <argument pos:start="37:35" pos:end="37:35"><expr pos:start="37:35" pos:end="37:35"><name pos:start="37:35" pos:end="37:35">p</name></expr></argument>)</argument_list></call> <operator pos:start="37:38" pos:end="37:38">&lt;</operator> <literal type="number" pos:start="37:40" pos:end="37:40">0</literal></expr>)</condition><block pos:start="37:42" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:18">

        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><call pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:60">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:59"><expr pos:start="39:37" pos:end="39:59"><literal type="string" pos:start="39:37" pos:end="39:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><call pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:15">av_free</name><argument_list pos:start="41:16" pos:end="41:22">(<argument pos:start="41:17" pos:end="41:21"><expr pos:start="41:17" pos:end="41:21"><name pos:start="41:17" pos:end="41:21">swbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:76"><expr pos:start="49:5" pos:end="49:75"><call pos:start="49:5" pos:end="49:75"><name pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:5">l</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:10">dsp</name><operator pos:start="49:11" pos:end="49:11">.</operator><name pos:start="49:12" pos:end="49:20">bswap_buf</name></name><argument_list pos:start="49:21" pos:end="49:75">(<argument pos:start="49:22" pos:end="49:37"><expr pos:start="49:22" pos:end="49:37"><operator pos:start="49:22" pos:end="49:22">(</operator><name pos:start="49:23" pos:end="49:30">uint32_t</name><operator pos:start="49:31" pos:end="49:31">*</operator><operator pos:start="49:32" pos:end="49:32">)</operator><name pos:start="49:33" pos:end="49:37">swbuf</name></expr></argument>, <argument pos:start="49:40" pos:end="49:59"><expr pos:start="49:40" pos:end="49:59"><operator pos:start="49:40" pos:end="49:40">(</operator><specifier pos:start="49:41" pos:end="49:45">const</specifier> <name pos:start="49:47" pos:end="49:54">uint32_t</name><operator pos:start="49:55" pos:end="49:55">*</operator><operator pos:start="49:56" pos:end="49:56">)</operator><name pos:start="49:57" pos:end="49:59">buf</name></expr></argument>, <argument pos:start="49:62" pos:end="49:74"><expr pos:start="49:62" pos:end="49:74"><name pos:start="49:62" pos:end="49:69">buf_size</name> <operator pos:start="49:71" pos:end="49:72">&gt;&gt;</operator> <literal type="number" pos:start="49:74" pos:end="49:74">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:37"><expr pos:start="51:5" pos:end="51:36"><name pos:start="51:5" pos:end="51:8">skip</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:36"><name pos:start="51:12" pos:end="51:26">tm2_read_header</name><argument_list pos:start="51:27" pos:end="51:36">(<argument pos:start="51:28" pos:end="51:28"><expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">l</name></expr></argument>, <argument pos:start="51:31" pos:end="51:35"><expr pos:start="51:31" pos:end="51:35"><name pos:start="51:31" pos:end="51:35">swbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if<condition pos:start="55:7" pos:end="55:18">(<expr pos:start="55:8" pos:end="55:17"><name pos:start="55:8" pos:end="55:11">skip</name> <operator pos:start="55:13" pos:end="55:14">==</operator> <operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>)</condition><block pos:start="55:19" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:18">

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><call pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:15">av_free</name><argument_list pos:start="57:16" pos:end="57:22">(<argument pos:start="57:17" pos:end="57:21"><expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:21">swbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="65:5" pos:end="79:5">for<control pos:start="65:8" pos:end="65:40">(<init pos:start="65:9" pos:end="65:14"><expr pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:9">i</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <literal type="number" pos:start="65:13" pos:end="65:13">0</literal></expr>;</init> <condition pos:start="65:16" pos:end="65:35"><expr pos:start="65:16" pos:end="65:34"><name pos:start="65:16" pos:end="65:16">i</name> <operator pos:start="65:18" pos:end="65:18">&lt;</operator> <name pos:start="65:20" pos:end="65:34">TM2_NUM_STREAMS</name></expr>;</condition> <incr pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:37">i</name><operator pos:start="65:38" pos:end="65:39">++</operator></expr></incr>)</control><block pos:start="65:41" pos:end="79:5">{<block_content pos:start="67:9" pos:end="77:18">

        <expr_stmt pos:start="67:9" pos:end="67:66"><expr pos:start="67:9" pos:end="67:65"><name pos:start="67:9" pos:end="67:9">t</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:65"><name pos:start="67:13" pos:end="67:27">tm2_read_stream</name><argument_list pos:start="67:28" pos:end="67:65">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">l</name></expr></argument>, <argument pos:start="67:32" pos:end="67:43"><expr pos:start="67:32" pos:end="67:43"><name pos:start="67:32" pos:end="67:36">swbuf</name> <operator pos:start="67:38" pos:end="67:38">+</operator> <name pos:start="67:40" pos:end="67:43">skip</name></expr></argument>, <argument pos:start="67:46" pos:end="67:64"><expr pos:start="67:46" pos:end="67:64"><name pos:start="67:46" pos:end="67:64"><name pos:start="67:46" pos:end="67:61">tm2_stream_order</name><index pos:start="67:62" pos:end="67:64">[<expr pos:start="67:63" pos:end="67:63"><name pos:start="67:63" pos:end="67:63">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if<condition pos:start="69:11" pos:end="69:19">(<expr pos:start="69:12" pos:end="69:18"><name pos:start="69:12" pos:end="69:12">t</name> <operator pos:start="69:14" pos:end="69:15">==</operator> <operator pos:start="69:17" pos:end="69:17">-</operator><literal type="number" pos:start="69:18" pos:end="69:18">1</literal></expr>)</condition><block pos:start="69:20" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:22">

            <expr_stmt pos:start="71:13" pos:end="71:27"><expr pos:start="71:13" pos:end="71:26"><call pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:19">av_free</name><argument_list pos:start="71:20" pos:end="71:26">(<argument pos:start="71:21" pos:end="71:25"><expr pos:start="71:21" pos:end="71:25"><name pos:start="71:21" pos:end="71:25">swbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:22">return <expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:12">skip</name> <operator pos:start="77:14" pos:end="77:15">+=</operator> <name pos:start="77:17" pos:end="77:17">t</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="81:5" pos:end="81:43"><expr pos:start="81:5" pos:end="81:42"><name pos:start="81:5" pos:end="81:16"><name pos:start="81:5" pos:end="81:5">p</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:16">key_frame</name></name> <operator pos:start="81:18" pos:end="81:18">=</operator> <call pos:start="81:20" pos:end="81:42"><name pos:start="81:20" pos:end="81:36">tm2_decode_blocks</name><argument_list pos:start="81:37" pos:end="81:42">(<argument pos:start="81:38" pos:end="81:38"><expr pos:start="81:38" pos:end="81:38"><name pos:start="81:38" pos:end="81:38">l</name></expr></argument>, <argument pos:start="81:41" pos:end="81:41"><expr pos:start="81:41" pos:end="81:41"><name pos:start="81:41" pos:end="81:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:33"><if pos:start="83:5" pos:end="85:33">if<condition pos:start="83:7" pos:end="83:20">(<expr pos:start="83:8" pos:end="83:19"><name pos:start="83:8" pos:end="83:19"><name pos:start="83:8" pos:end="83:8">p</name><operator pos:start="83:9" pos:end="83:10">-&gt;</operator><name pos:start="83:11" pos:end="83:19">key_frame</name></name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:33"><block_content pos:start="85:9" pos:end="85:33">

        <expr_stmt pos:start="85:9" pos:end="85:33"><expr pos:start="85:9" pos:end="85:32"><name pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:9">p</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:20">pict_type</name></name> <operator pos:start="85:22" pos:end="85:22">=</operator> <name pos:start="85:24" pos:end="85:32">FF_I_TYPE</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="87:5" pos:end="89:33">else<block type="pseudo" pos:start="89:9" pos:end="89:33"><block_content pos:start="89:9" pos:end="89:33">

        <expr_stmt pos:start="89:9" pos:end="89:33"><expr pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:9">p</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:20">pict_type</name></name> <operator pos:start="89:22" pos:end="89:22">=</operator> <name pos:start="89:24" pos:end="89:32">FF_P_TYPE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:21"><expr pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:10"><name pos:start="93:5" pos:end="93:5">l</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:10">cur</name></name> <operator pos:start="93:12" pos:end="93:12">=</operator> <operator pos:start="93:14" pos:end="93:14">!</operator><name pos:start="93:15" pos:end="93:20"><name pos:start="93:15" pos:end="93:15">l</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:20">cur</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:33"><expr pos:start="95:5" pos:end="95:32"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:14">data_size</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <sizeof pos:start="95:18" pos:end="95:32">sizeof<argument_list pos:start="95:24" pos:end="95:32">(<argument pos:start="95:25" pos:end="95:31"><expr pos:start="95:25" pos:end="95:31"><name pos:start="95:25" pos:end="95:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><operator pos:start="97:5" pos:end="97:5">*</operator><operator pos:start="97:6" pos:end="97:6">(</operator><name pos:start="97:7" pos:end="97:13">AVFrame</name><operator pos:start="97:14" pos:end="97:14">*</operator><operator pos:start="97:15" pos:end="97:15">)</operator><name pos:start="97:16" pos:end="97:19">data</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <name pos:start="97:23" pos:end="97:28"><name pos:start="97:23" pos:end="97:23">l</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:28">pic</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><call pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:11">av_free</name><argument_list pos:start="99:12" pos:end="99:18">(<argument pos:start="99:13" pos:end="99:17"><expr pos:start="99:13" pos:end="99:17"><name pos:start="99:13" pos:end="99:17">swbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="103:5" pos:end="103:20">return <expr pos:start="103:12" pos:end="103:19"><name pos:start="103:12" pos:end="103:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
