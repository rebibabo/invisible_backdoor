<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25452.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:34"><name pos:start="1:1" pos:end="1:10">udp_listen</name><argument_list pos:start="1:11" pos:end="3:34">(<argument pos:start="1:12" pos:end="1:23">Slirp *slirp</argument>, <argument pos:start="1:26" pos:end="1:39">uint32_t haddr</argument>, <argument pos:start="1:42" pos:end="1:52">u_int hport</argument>, <argument pos:start="1:55" pos:end="1:68">uint32_t laddr</argument>,

           <argument pos:start="3:12" pos:end="3:22">u_int lport</argument>, <argument pos:start="3:25" pos:end="3:33">int flags</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="75:18">{<block_content pos:start="7:9" pos:end="75:18">

	<decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:26">sockaddr_in</name></name></type> <name pos:start="7:28" pos:end="7:31">addr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:26"><decl pos:start="9:9" pos:end="9:25"><type pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:14">struct</name> <name pos:start="9:16" pos:end="9:21">socket</name></name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">so</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:55"><decl pos:start="11:9" pos:end="11:54"><type pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:17">socklen_t</name></type> <name pos:start="11:19" pos:end="11:25">addrlen</name> <init pos:start="11:27" pos:end="11:54">= <expr pos:start="11:29" pos:end="11:54"><sizeof pos:start="11:29" pos:end="11:54">sizeof<argument_list pos:start="11:35" pos:end="11:54">(<argument pos:start="11:36" pos:end="11:53"><expr pos:start="11:36" pos:end="11:53">struct <name pos:start="11:43" pos:end="11:53">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="15:9" pos:end="15:29"><expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:10">so</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <call pos:start="15:14" pos:end="15:28"><name pos:start="15:14" pos:end="15:21">socreate</name><argument_list pos:start="15:22" pos:end="15:28">(<argument pos:start="15:23" pos:end="15:27"><expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="17:9" pos:end="75:18"><if pos:start="17:9" pos:end="75:18">if <condition pos:start="17:12" pos:end="17:16">(<expr pos:start="17:13" pos:end="17:15"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:15">so</name></expr>)</condition> <block pos:start="17:18" pos:end="75:18">{<block_content pos:start="21:9" pos:end="75:18">



	<expr_stmt pos:start="21:9" pos:end="21:50"><expr pos:start="21:9" pos:end="21:49"><name pos:start="21:9" pos:end="21:13"><name pos:start="21:9" pos:end="21:10">so</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:13">s</name></name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="21:49"><name pos:start="21:17" pos:end="21:27">qemu_socket</name><argument_list pos:start="21:28" pos:end="21:49">(<argument pos:start="21:29" pos:end="21:35"><expr pos:start="21:29" pos:end="21:35"><name pos:start="21:29" pos:end="21:35">AF_INET</name></expr></argument>,<argument pos:start="21:37" pos:end="21:46"><expr pos:start="21:37" pos:end="21:46"><name pos:start="21:37" pos:end="21:46">SOCK_DGRAM</name></expr></argument>,<argument pos:start="21:48" pos:end="21:48"><expr pos:start="21:48" pos:end="21:48"><literal type="number" pos:start="21:48" pos:end="21:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





	<expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:10">so</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:21">so_expire</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:31">curtime</name> <operator pos:start="27:33" pos:end="27:33">+</operator> <name pos:start="27:35" pos:end="27:43">SO_EXPIRE</name></expr>;</expr_stmt>

	<expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><call pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:14">insque</name><argument_list pos:start="29:15" pos:end="29:31">(<argument pos:start="29:16" pos:end="29:17"><expr pos:start="29:16" pos:end="29:17"><name pos:start="29:16" pos:end="29:17">so</name></expr></argument>, <argument pos:start="29:20" pos:end="29:30"><expr pos:start="29:20" pos:end="29:30"><operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:30"><name pos:start="29:21" pos:end="29:25">slirp</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:30">udb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:12">addr</name><operator pos:start="33:13" pos:end="33:13">.</operator><name pos:start="33:14" pos:end="33:23">sin_family</name></name> <operator pos:start="33:25" pos:end="33:25">=</operator> <name pos:start="33:27" pos:end="33:33">AF_INET</name></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:37"><expr pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:12">addr</name><operator pos:start="35:13" pos:end="35:13">.</operator><name pos:start="35:14" pos:end="35:21">sin_addr</name><operator pos:start="35:22" pos:end="35:22">.</operator><name pos:start="35:23" pos:end="35:28">s_addr</name></name> <operator pos:start="35:30" pos:end="35:30">=</operator> <name pos:start="35:32" pos:end="35:36">haddr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:12">addr</name><operator pos:start="37:13" pos:end="37:13">.</operator><name pos:start="37:14" pos:end="37:21">sin_port</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:29">hport</name></expr>;</expr_stmt>



	<if_stmt pos:start="41:9" pos:end="75:18"><if pos:start="41:9" pos:end="75:18">if <condition pos:start="41:12" pos:end="41:62">(<expr pos:start="41:13" pos:end="41:61"><call pos:start="41:13" pos:end="41:57"><name pos:start="41:13" pos:end="41:16">bind</name><argument_list pos:start="41:17" pos:end="41:57">(<argument pos:start="41:18" pos:end="41:22"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:19">so</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:22">s</name></name></expr></argument>,<argument pos:start="41:24" pos:end="41:47"><expr pos:start="41:24" pos:end="41:47"><operator pos:start="41:24" pos:end="41:24">(</operator>struct <name pos:start="41:32" pos:end="41:39">sockaddr</name> <operator pos:start="41:41" pos:end="41:41">*</operator><operator pos:start="41:42" pos:end="41:42">)</operator><operator pos:start="41:43" pos:end="41:43">&amp;</operator><name pos:start="41:44" pos:end="41:47">addr</name></expr></argument>, <argument pos:start="41:50" pos:end="41:56"><expr pos:start="41:50" pos:end="41:56"><name pos:start="41:50" pos:end="41:56">addrlen</name></expr></argument>)</argument_list></call> <operator pos:start="41:59" pos:end="41:59">&lt;</operator> <literal type="number" pos:start="41:61" pos:end="41:61">0</literal></expr>)</condition> <block pos:start="41:64" pos:end="75:18">{<block_content pos:start="43:17" pos:end="75:18">

		<expr_stmt pos:start="43:17" pos:end="43:31"><expr pos:start="43:17" pos:end="43:30"><call pos:start="43:17" pos:end="43:30"><name pos:start="43:17" pos:end="43:26">udp_detach</name><argument_list pos:start="43:27" pos:end="43:30">(<argument pos:start="43:28" pos:end="43:29"><expr pos:start="43:28" pos:end="43:29"><name pos:start="43:28" pos:end="43:29">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><call pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:29">socket_set_fast_reuse</name><argument_list pos:start="47:30" pos:end="47:36">(<argument pos:start="47:31" pos:end="47:35"><expr pos:start="47:31" pos:end="47:35"><name pos:start="47:31" pos:end="47:35"><name pos:start="47:31" pos:end="47:32">so</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:35">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="51:9" pos:end="51:61"><expr pos:start="51:9" pos:end="51:60"><call pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:19">getsockname</name><argument_list pos:start="51:20" pos:end="51:60">(<argument pos:start="51:21" pos:end="51:25"><expr pos:start="51:21" pos:end="51:25"><name pos:start="51:21" pos:end="51:25"><name pos:start="51:21" pos:end="51:22">so</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:25">s</name></name></expr></argument>,<argument pos:start="51:27" pos:end="51:50"><expr pos:start="51:27" pos:end="51:50"><operator pos:start="51:27" pos:end="51:27">(</operator>struct <name pos:start="51:35" pos:end="51:42">sockaddr</name> <operator pos:start="51:44" pos:end="51:44">*</operator><operator pos:start="51:45" pos:end="51:45">)</operator><operator pos:start="51:46" pos:end="51:46">&amp;</operator><name pos:start="51:47" pos:end="51:50">addr</name></expr></argument>,<argument pos:start="51:52" pos:end="51:59"><expr pos:start="51:52" pos:end="51:59"><operator pos:start="51:52" pos:end="51:52">&amp;</operator><name pos:start="51:53" pos:end="51:59">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:10">so</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:17">fhost</name><operator pos:start="53:18" pos:end="53:18">.</operator><name pos:start="53:19" pos:end="53:21">sin</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:28">addr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><call pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:26">sotranslate_accept</name><argument_list pos:start="55:27" pos:end="55:30">(<argument pos:start="55:28" pos:end="55:29"><expr pos:start="55:28" pos:end="55:29"><name pos:start="55:28" pos:end="55:29">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:10">so</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:22">so_lfamily</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:32">AF_INET</name></expr>;</expr_stmt>

	<expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:10">so</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:20">so_lport</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:28">lport</name></expr>;</expr_stmt>

	<expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:10">so</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:20">so_laddr</name><operator pos:start="61:21" pos:end="61:21">.</operator><name pos:start="61:22" pos:end="61:27">s_addr</name></name> <operator pos:start="61:29" pos:end="61:29">=</operator> <name pos:start="61:31" pos:end="61:35">laddr</name></expr>;</expr_stmt>

	<if_stmt pos:start="63:9" pos:end="65:29"><if pos:start="63:9" pos:end="65:29">if <condition pos:start="63:12" pos:end="63:36">(<expr pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:17">flags</name> <operator pos:start="63:19" pos:end="63:20">!=</operator> <name pos:start="63:22" pos:end="63:35">SS_FACCEPTONCE</name></expr>)</condition><block type="pseudo" pos:start="65:12" pos:end="65:29"><block_content pos:start="65:12" pos:end="65:29">

	   <expr_stmt pos:start="65:12" pos:end="65:29"><expr pos:start="65:12" pos:end="65:28"><name pos:start="65:12" pos:end="65:24"><name pos:start="65:12" pos:end="65:13">so</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:24">so_expire</name></name> <operator pos:start="65:26" pos:end="65:26">=</operator> <literal type="number" pos:start="65:28" pos:end="65:28">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<expr_stmt pos:start="69:9" pos:end="69:43"><expr pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:10">so</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:20">so_state</name></name> <operator pos:start="69:22" pos:end="69:23">&amp;=</operator> <name pos:start="69:25" pos:end="69:42">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

	<expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:10">so</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:20">so_state</name></name> <operator pos:start="71:22" pos:end="71:23">|=</operator> <name pos:start="71:25" pos:end="71:39">SS_ISFCONNECTED</name> <operator pos:start="71:41" pos:end="71:41">|</operator> <name pos:start="71:43" pos:end="71:47">flags</name></expr>;</expr_stmt>



	<return pos:start="75:9" pos:end="75:18">return <expr pos:start="75:16" pos:end="75:17"><name pos:start="75:16" pos:end="75:17">so</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block>
</unit>
