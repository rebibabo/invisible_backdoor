<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6992.c" pos:tabs="8"><function pos:start="1:1" pos:end="1442:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">disas_arm_insn</name><parameter_list pos:start="1:27" pos:end="1:59">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:41"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type> <name pos:start="1:39" pos:end="1:41">env</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:55">DisasContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:58">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1442:1">{<block_content pos:start="5:5" pos:end="1440:5">

    <decl_stmt pos:start="5:5" pos:end="5:68"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:21">cond</name></decl>, <decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:24" pos:end="5:27">insn</name></decl>, <decl pos:start="5:30" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:30" pos:end="5:32">val</name></decl>, <decl pos:start="5:35" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:35" pos:end="5:37">op1</name></decl>, <decl pos:start="5:40" pos:end="5:40"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:40" pos:end="5:40">i</name></decl>, <decl pos:start="5:43" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:43" pos:end="5:47">shift</name></decl>, <decl pos:start="5:50" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:50" pos:end="5:51">rm</name></decl>, <decl pos:start="5:54" pos:end="5:55"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:54" pos:end="5:55">rs</name></decl>, <decl pos:start="5:58" pos:end="5:59"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:58" pos:end="5:59">rn</name></decl>, <decl pos:start="5:62" pos:end="5:63"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:62" pos:end="5:63">rd</name></decl>, <decl pos:start="5:66" pos:end="5:67"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:66" pos:end="5:67">sh</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="9:5" pos:end="9:27"><expr pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:8">insn</name> <operator pos:start="9:10" pos:end="9:10">=</operator> <call pos:start="9:12" pos:end="9:26"><name pos:start="9:12" pos:end="9:19">ldl_code</name><argument_list pos:start="9:20" pos:end="9:26">(<argument pos:start="9:21" pos:end="9:25"><expr pos:start="9:21" pos:end="9:25"><name pos:start="9:21" pos:end="9:25"><name pos:start="9:21" pos:end="9:21">s</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:25">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:15"><expr pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:9">pc</name></name> <operator pos:start="11:11" pos:end="11:12">+=</operator> <literal type="number" pos:start="11:14" pos:end="11:14">4</literal></expr>;</expr_stmt>

    

    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:8">cond</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:15">insn</name> <operator pos:start="15:17" pos:end="15:18">&gt;&gt;</operator> <literal type="number" pos:start="15:20" pos:end="15:21">28</literal></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="87:5"><if pos:start="17:5" pos:end="87:5">if <condition pos:start="17:8" pos:end="17:20">(<expr pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:12">cond</name> <operator pos:start="17:14" pos:end="17:15">==</operator> <literal type="number" pos:start="17:17" pos:end="17:19">0xf</literal></expr>)</condition><block pos:start="17:21" pos:end="87:5">{<block_content pos:start="21:9" pos:end="85:24">

        <comment type="block" pos:start="19:9" pos:end="19:42">/* Unconditional instructions.  */</comment>

        <if_stmt pos:start="21:9" pos:end="83:9"><if pos:start="21:9" pos:end="23:19">if <condition pos:start="21:12" pos:end="21:46">(<expr pos:start="21:13" pos:end="21:45"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:17">insn</name> <operator pos:start="21:19" pos:end="21:19">&amp;</operator> <literal type="number" pos:start="21:21" pos:end="21:30">0x0d70f000</literal><operator pos:start="21:31" pos:end="21:31">)</operator> <operator pos:start="21:33" pos:end="21:34">==</operator> <literal type="number" pos:start="21:36" pos:end="21:45">0x0550f000</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:19"><block_content pos:start="23:13" pos:end="23:19">

            <return pos:start="23:13" pos:end="23:19">return;</return></block_content></block></if> <comment type="block" pos:start="23:21" pos:end="23:29">/* PLD */</comment>

        <if type="elseif" pos:start="25:9" pos:end="57:9">else if <condition pos:start="25:17" pos:end="25:51">(<expr pos:start="25:18" pos:end="25:50"><operator pos:start="25:18" pos:end="25:18">(</operator><name pos:start="25:19" pos:end="25:22">insn</name> <operator pos:start="25:24" pos:end="25:24">&amp;</operator> <literal type="number" pos:start="25:26" pos:end="25:35">0x0e000000</literal><operator pos:start="25:36" pos:end="25:36">)</operator> <operator pos:start="25:38" pos:end="25:39">==</operator> <literal type="number" pos:start="25:41" pos:end="25:50">0x0a000000</literal></expr>)</condition> <block pos:start="25:53" pos:end="57:9">{<block_content pos:start="29:13" pos:end="55:19">

            <comment type="block" pos:start="27:13" pos:end="27:64">/* branch link and change to thumb (blx &lt;offset&gt;) */</comment>

            <decl_stmt pos:start="29:13" pos:end="29:27"><decl pos:start="29:13" pos:end="29:26"><type pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:19">int32_t</name></type> <name pos:start="29:21" pos:end="29:26">offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="33:13" pos:end="33:34"><expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:15">val</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <operator pos:start="33:19" pos:end="33:19">(</operator><name pos:start="33:20" pos:end="33:27">uint32_t</name><operator pos:start="33:28" pos:end="33:28">)</operator><name pos:start="33:29" pos:end="33:33"><name pos:start="33:29" pos:end="33:29">s</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:33">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:35"><expr pos:start="35:13" pos:end="35:34"><call pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:29">gen_op_movl_T0_im</name><argument_list pos:start="35:30" pos:end="35:34">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:35"><expr pos:start="37:13" pos:end="37:34"><call pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:27">gen_movl_reg_T0</name><argument_list pos:start="37:28" pos:end="37:34">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">s</name></expr></argument>, <argument pos:start="37:32" pos:end="37:33"><expr pos:start="37:32" pos:end="37:33"><literal type="number" pos:start="37:32" pos:end="37:33">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="39:13" pos:end="39:47">/* Sign-extend the 24-bit offset */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:49"><expr pos:start="41:13" pos:end="41:48"><name pos:start="41:13" pos:end="41:18">offset</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <operator pos:start="41:22" pos:end="41:22">(</operator><operator pos:start="41:23" pos:end="41:23">(</operator><operator pos:start="41:24" pos:end="41:24">(</operator><name pos:start="41:25" pos:end="41:31">int32_t</name><operator pos:start="41:32" pos:end="41:32">)</operator><name pos:start="41:33" pos:end="41:36">insn</name><operator pos:start="41:37" pos:end="41:37">)</operator> <operator pos:start="41:39" pos:end="41:40">&lt;&lt;</operator> <literal type="number" pos:start="41:42" pos:end="41:42">8</literal><operator pos:start="41:43" pos:end="41:43">)</operator> <operator pos:start="41:45" pos:end="41:46">&gt;&gt;</operator> <literal type="number" pos:start="41:48" pos:end="41:48">8</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="43:13" pos:end="43:54">/* offset * 4 + bit24 * 2 + (thumb bit) */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:58"><expr pos:start="45:13" pos:end="45:57"><name pos:start="45:13" pos:end="45:15">val</name> <operator pos:start="45:17" pos:end="45:18">+=</operator> <operator pos:start="45:20" pos:end="45:20">(</operator><name pos:start="45:21" pos:end="45:26">offset</name> <operator pos:start="45:28" pos:end="45:29">&lt;&lt;</operator> <literal type="number" pos:start="45:31" pos:end="45:31">2</literal><operator pos:start="45:32" pos:end="45:32">)</operator> <operator pos:start="45:34" pos:end="45:34">|</operator> <operator pos:start="45:36" pos:end="45:36">(</operator><operator pos:start="45:37" pos:end="45:37">(</operator><name pos:start="45:38" pos:end="45:41">insn</name> <operator pos:start="45:43" pos:end="45:44">&gt;&gt;</operator> <literal type="number" pos:start="45:46" pos:end="45:47">23</literal><operator pos:start="45:48" pos:end="45:48">)</operator> <operator pos:start="45:50" pos:end="45:50">&amp;</operator> <literal type="number" pos:start="45:52" pos:end="45:52">2</literal><operator pos:start="45:53" pos:end="45:53">)</operator> <operator pos:start="45:55" pos:end="45:55">|</operator> <literal type="number" pos:start="45:57" pos:end="45:57">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="47:13" pos:end="47:33">/* pipeline offset */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:21"><expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:15">val</name> <operator pos:start="49:17" pos:end="49:18">+=</operator> <literal type="number" pos:start="49:20" pos:end="49:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:35"><expr pos:start="51:13" pos:end="51:34"><call pos:start="51:13" pos:end="51:34"><name pos:start="51:13" pos:end="51:29">gen_op_movl_T0_im</name><argument_list pos:start="51:30" pos:end="51:34">(<argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:22"><expr pos:start="53:13" pos:end="53:21"><call pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:18">gen_bx</name><argument_list pos:start="53:19" pos:end="53:21">(<argument pos:start="53:20" pos:end="53:20"><expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="57:11" pos:end="61:9">else if <condition pos:start="57:19" pos:end="57:53">(<expr pos:start="57:20" pos:end="57:52"><operator pos:start="57:20" pos:end="57:20">(</operator><name pos:start="57:21" pos:end="57:24">insn</name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <literal type="number" pos:start="57:28" pos:end="57:37">0x0fe00000</literal><operator pos:start="57:38" pos:end="57:38">)</operator> <operator pos:start="57:40" pos:end="57:41">==</operator> <literal type="number" pos:start="57:43" pos:end="57:52">0x0c400000</literal></expr>)</condition> <block pos:start="57:55" pos:end="61:9">{<block_content>

            <comment type="block" pos:start="59:13" pos:end="59:56">/* Coprocessor double register transfer.  */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="65:9">else if <condition pos:start="61:19" pos:end="61:53">(<expr pos:start="61:20" pos:end="61:52"><operator pos:start="61:20" pos:end="61:20">(</operator><name pos:start="61:21" pos:end="61:24">insn</name> <operator pos:start="61:26" pos:end="61:26">&amp;</operator> <literal type="number" pos:start="61:28" pos:end="61:37">0x0f000010</literal><operator pos:start="61:38" pos:end="61:38">)</operator> <operator pos:start="61:40" pos:end="61:41">==</operator> <literal type="number" pos:start="61:43" pos:end="61:52">0x0e000010</literal></expr>)</condition> <block pos:start="61:55" pos:end="65:9">{<block_content>

            <comment type="block" pos:start="63:13" pos:end="63:60">/* Additional coprocessor register transfer.  */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="69:9">else if <condition pos:start="65:19" pos:end="65:53">(<expr pos:start="65:20" pos:end="65:52"><operator pos:start="65:20" pos:end="65:20">(</operator><name pos:start="65:21" pos:end="65:24">insn</name> <operator pos:start="65:26" pos:end="65:26">&amp;</operator> <literal type="number" pos:start="65:28" pos:end="65:37">0x0ff10010</literal><operator pos:start="65:38" pos:end="65:38">)</operator> <operator pos:start="65:40" pos:end="65:41">==</operator> <literal type="number" pos:start="65:43" pos:end="65:52">0x01000000</literal></expr>)</condition> <block pos:start="65:55" pos:end="69:9">{<block_content>

            <comment type="block" pos:start="67:13" pos:end="67:34">/* cps (privileged) */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="69:11" pos:end="83:9">else if <condition pos:start="69:19" pos:end="69:53">(<expr pos:start="69:20" pos:end="69:52"><operator pos:start="69:20" pos:end="69:20">(</operator><name pos:start="69:21" pos:end="69:24">insn</name> <operator pos:start="69:26" pos:end="69:26">&amp;</operator> <literal type="number" pos:start="69:28" pos:end="69:37">0x0ffffdff</literal><operator pos:start="69:38" pos:end="69:38">)</operator> <operator pos:start="69:40" pos:end="69:41">==</operator> <literal type="number" pos:start="69:43" pos:end="69:52">0x01010000</literal></expr>)</condition> <block pos:start="69:55" pos:end="83:9">{<block_content pos:start="73:13" pos:end="81:19">

            <comment type="block" pos:start="71:13" pos:end="71:24">/* setend */</comment>

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:32">(<expr pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:20">insn</name> <operator pos:start="73:22" pos:end="73:22">&amp;</operator> <operator pos:start="73:24" pos:end="73:24">(</operator><literal type="number" pos:start="73:25" pos:end="73:25">1</literal> <operator pos:start="73:27" pos:end="73:28">&lt;&lt;</operator> <literal type="number" pos:start="73:30" pos:end="73:30">9</literal><operator pos:start="73:31" pos:end="73:31">)</operator></expr>)</condition> <block pos:start="73:34" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:32">

                <comment type="block" pos:start="75:17" pos:end="75:48">/* BE8 mode not implemented.  */</comment>

                <goto pos:start="77:17" pos:end="77:32">goto <name pos:start="77:22" pos:end="77:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <return pos:start="81:13" pos:end="81:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="85:9" pos:end="85:24">goto <name pos:start="85:14" pos:end="85:23">illegal_op</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="105:5"><if pos:start="89:5" pos:end="105:5">if <condition pos:start="89:8" pos:end="89:20">(<expr pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:12">cond</name> <operator pos:start="89:14" pos:end="89:15">!=</operator> <literal type="number" pos:start="89:17" pos:end="89:19">0xe</literal></expr>)</condition> <block pos:start="89:22" pos:end="105:5">{<block_content pos:start="95:9" pos:end="99:23">

        <comment type="block" pos:start="91:9" pos:end="93:30">/* if not always execute, we generate a conditional jump to

           next instruction */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:39"><expr pos:start="95:9" pos:end="95:38"><name pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:20">condlabel</name></name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="95:38"><name pos:start="95:24" pos:end="95:36">gen_new_label</name><argument_list pos:start="95:37" pos:end="95:38">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:44"><expr pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:19">gen_test_cc</name><index pos:start="97:20" pos:end="97:29">[<expr pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:24">cond</name> <operator pos:start="97:26" pos:end="97:26">^</operator> <literal type="number" pos:start="97:28" pos:end="97:28">1</literal></expr>]</index></name><operator pos:start="97:30" pos:end="97:30">(</operator><name pos:start="97:31" pos:end="97:42"><name pos:start="97:31" pos:end="97:31">s</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:42">condlabel</name></name><operator pos:start="97:43" pos:end="97:43">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:23"><expr pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:18">condjmp</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:22">1</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="101:9" pos:end="101:58">//gen_test_cc[cond ^ 1]((long)s-&gt;tb, (long)s-&gt;pc);</comment>

        <comment type="line" pos:start="103:9" pos:end="103:38">//s-&gt;is_jmp = DISAS_JUMP_NEXT;</comment>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="1440:5"><if pos:start="107:5" pos:end="131:5">if <condition pos:start="107:8" pos:end="107:42">(<expr pos:start="107:9" pos:end="107:41"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:13">insn</name> <operator pos:start="107:15" pos:end="107:15">&amp;</operator> <literal type="number" pos:start="107:17" pos:end="107:26">0x0f900000</literal><operator pos:start="107:27" pos:end="107:27">)</operator> <operator pos:start="107:29" pos:end="107:30">==</operator> <literal type="number" pos:start="107:32" pos:end="107:41">0x03000000</literal></expr>)</condition> <block pos:start="107:44" pos:end="131:5">{<block_content pos:start="109:9" pos:end="129:28">

        <if_stmt pos:start="109:9" pos:end="111:28"><if pos:start="109:9" pos:end="111:28">if <condition pos:start="109:12" pos:end="109:46">(<expr pos:start="109:13" pos:end="109:45"><operator pos:start="109:13" pos:end="109:13">(</operator><name pos:start="109:14" pos:end="109:17">insn</name> <operator pos:start="109:19" pos:end="109:19">&amp;</operator> <literal type="number" pos:start="109:21" pos:end="109:30">0x0fb0f000</literal><operator pos:start="109:31" pos:end="109:31">)</operator> <operator pos:start="109:33" pos:end="109:34">!=</operator> <literal type="number" pos:start="109:36" pos:end="109:45">0x0320f000</literal></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:28"><block_content pos:start="111:13" pos:end="111:28">

            <goto pos:start="111:13" pos:end="111:28">goto <name pos:start="111:18" pos:end="111:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block" pos:start="113:9" pos:end="113:30">/* CPSR = immediate */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:26"><expr pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:11">val</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:18">insn</name> <operator pos:start="115:20" pos:end="115:20">&amp;</operator> <literal type="number" pos:start="115:22" pos:end="115:25">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:40"><expr pos:start="117:9" pos:end="117:39"><name pos:start="117:9" pos:end="117:13">shift</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <operator pos:start="117:17" pos:end="117:17">(</operator><operator pos:start="117:18" pos:end="117:18">(</operator><name pos:start="117:19" pos:end="117:22">insn</name> <operator pos:start="117:24" pos:end="117:25">&gt;&gt;</operator> <literal type="number" pos:start="117:27" pos:end="117:27">8</literal><operator pos:start="117:28" pos:end="117:28">)</operator> <operator pos:start="117:30" pos:end="117:30">&amp;</operator> <literal type="number" pos:start="117:32" pos:end="117:34">0xf</literal><operator pos:start="117:35" pos:end="117:35">)</operator> <operator pos:start="117:37" pos:end="117:37">*</operator> <literal type="number" pos:start="117:39" pos:end="117:39">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="121:57"><if pos:start="119:9" pos:end="121:57">if <condition pos:start="119:12" pos:end="119:18">(<expr pos:start="119:13" pos:end="119:17"><name pos:start="119:13" pos:end="119:17">shift</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:57"><block_content pos:start="121:13" pos:end="121:57">

            <expr_stmt pos:start="121:13" pos:end="121:57"><expr pos:start="121:13" pos:end="121:56"><name pos:start="121:13" pos:end="121:15">val</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <operator pos:start="121:19" pos:end="121:19">(</operator><name pos:start="121:20" pos:end="121:22">val</name> <operator pos:start="121:24" pos:end="121:25">&gt;&gt;</operator> <name pos:start="121:27" pos:end="121:31">shift</name><operator pos:start="121:32" pos:end="121:32">)</operator> <operator pos:start="121:34" pos:end="121:34">|</operator> <operator pos:start="121:36" pos:end="121:36">(</operator><name pos:start="121:37" pos:end="121:39">val</name> <operator pos:start="121:41" pos:end="121:42">&lt;&lt;</operator> <operator pos:start="121:44" pos:end="121:44">(</operator><literal type="number" pos:start="121:45" pos:end="121:48">32</literal> <operator pos:start="121:48" pos:end="121:48">-</operator> <name pos:start="121:50" pos:end="121:54">shift</name><operator pos:start="121:55" pos:end="121:55">)</operator><operator pos:start="121:56" pos:end="121:56">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:31"><expr pos:start="123:9" pos:end="123:30"><call pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:25">gen_op_movl_T0_im</name><argument_list pos:start="123:26" pos:end="123:30">(<argument pos:start="123:27" pos:end="123:29"><expr pos:start="123:27" pos:end="123:29"><name pos:start="123:27" pos:end="123:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:9">i</name> <operator pos:start="125:11" pos:end="125:11">=</operator> <operator pos:start="125:13" pos:end="125:13">(</operator><operator pos:start="125:14" pos:end="125:14">(</operator><name pos:start="125:15" pos:end="125:18">insn</name> <operator pos:start="125:20" pos:end="125:20">&amp;</operator> <operator pos:start="125:22" pos:end="125:22">(</operator><literal type="number" pos:start="125:23" pos:end="125:23">1</literal> <operator pos:start="125:25" pos:end="125:26">&lt;&lt;</operator> <literal type="number" pos:start="125:28" pos:end="125:29">22</literal><operator pos:start="125:30" pos:end="125:30">)</operator><operator pos:start="125:31" pos:end="125:31">)</operator> <operator pos:start="125:33" pos:end="125:34">!=</operator> <literal type="number" pos:start="125:36" pos:end="125:36">0</literal><operator pos:start="125:37" pos:end="125:37">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="129:28"><if pos:start="127:9" pos:end="129:28">if <condition pos:start="127:12" pos:end="127:69">(<expr pos:start="127:13" pos:end="127:68"><call pos:start="127:13" pos:end="127:68"><name pos:start="127:13" pos:end="127:26">gen_set_psr_T0</name><argument_list pos:start="127:27" pos:end="127:68">(<argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">s</name></expr></argument>, <argument pos:start="127:31" pos:end="127:64"><expr pos:start="127:31" pos:end="127:64"><call pos:start="127:31" pos:end="127:64"><name pos:start="127:31" pos:end="127:38">msr_mask</name><argument_list pos:start="127:39" pos:end="127:64">(<argument pos:start="127:40" pos:end="127:40"><expr pos:start="127:40" pos:end="127:40"><name pos:start="127:40" pos:end="127:40">s</name></expr></argument>, <argument pos:start="127:43" pos:end="127:60"><expr pos:start="127:43" pos:end="127:60"><operator pos:start="127:43" pos:end="127:43">(</operator><name pos:start="127:44" pos:end="127:47">insn</name> <operator pos:start="127:49" pos:end="127:50">&gt;&gt;</operator> <literal type="number" pos:start="127:52" pos:end="127:53">16</literal><operator pos:start="127:54" pos:end="127:54">)</operator> <operator pos:start="127:56" pos:end="127:56">&amp;</operator> <literal type="number" pos:start="127:58" pos:end="127:60">0xf</literal></expr></argument>, <argument pos:start="127:63" pos:end="127:63"><expr pos:start="127:63" pos:end="127:63"><name pos:start="127:63" pos:end="127:63">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:67" pos:end="127:67"><expr pos:start="127:67" pos:end="127:67"><name pos:start="127:67" pos:end="127:67">i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:28"><block_content pos:start="129:13" pos:end="129:28">

            <goto pos:start="129:13" pos:end="129:28">goto <name pos:start="129:18" pos:end="129:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="131:7" pos:end="381:5">else if <condition pos:start="131:15" pos:end="133:52">(<expr pos:start="131:16" pos:end="133:51"><operator pos:start="131:16" pos:end="131:16">(</operator><name pos:start="131:17" pos:end="131:20">insn</name> <operator pos:start="131:22" pos:end="131:22">&amp;</operator> <literal type="number" pos:start="131:24" pos:end="131:33">0x0f900000</literal><operator pos:start="131:34" pos:end="131:34">)</operator> <operator pos:start="131:36" pos:end="131:37">==</operator> <literal type="number" pos:start="131:39" pos:end="131:48">0x01000000</literal>

               <operator pos:start="133:16" pos:end="133:17">&amp;&amp;</operator> <operator pos:start="133:19" pos:end="133:19">(</operator><name pos:start="133:20" pos:end="133:23">insn</name> <operator pos:start="133:25" pos:end="133:25">&amp;</operator> <literal type="number" pos:start="133:27" pos:end="133:36">0x00000090</literal><operator pos:start="133:37" pos:end="133:37">)</operator> <operator pos:start="133:39" pos:end="133:40">!=</operator> <literal type="number" pos:start="133:42" pos:end="133:51">0x00000090</literal></expr>)</condition> <block pos:start="133:54" pos:end="381:5">{<block_content pos:start="137:9" pos:end="379:9">

        <comment type="block" pos:start="135:9" pos:end="135:40">/* miscellaneous instructions */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:31"><expr pos:start="137:9" pos:end="137:30"><name pos:start="137:9" pos:end="137:11">op1</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <operator pos:start="137:15" pos:end="137:15">(</operator><name pos:start="137:16" pos:end="137:19">insn</name> <operator pos:start="137:21" pos:end="137:22">&gt;&gt;</operator> <literal type="number" pos:start="137:24" pos:end="137:25">21</literal><operator pos:start="137:26" pos:end="137:26">)</operator> <operator pos:start="137:28" pos:end="137:28">&amp;</operator> <literal type="number" pos:start="137:30" pos:end="137:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:31"><expr pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:10">sh</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <operator pos:start="139:14" pos:end="139:14">(</operator><name pos:start="139:15" pos:end="139:18">insn</name> <operator pos:start="139:20" pos:end="139:21">&gt;&gt;</operator> <literal type="number" pos:start="139:23" pos:end="139:23">4</literal><operator pos:start="139:24" pos:end="139:24">)</operator> <operator pos:start="139:26" pos:end="139:26">&amp;</operator> <literal type="number" pos:start="139:28" pos:end="139:30">0xf</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:24"><expr pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:10">rm</name> <operator pos:start="141:12" pos:end="141:12">=</operator> <name pos:start="141:14" pos:end="141:17">insn</name> <operator pos:start="141:19" pos:end="141:19">&amp;</operator> <literal type="number" pos:start="141:21" pos:end="141:23">0xf</literal></expr>;</expr_stmt>

        <switch pos:start="143:9" pos:end="379:9">switch <condition pos:start="143:16" pos:end="143:19">(<expr pos:start="143:17" pos:end="143:18"><name pos:start="143:17" pos:end="143:18">sh</name></expr>)</condition> <block pos:start="143:21" pos:end="379:9">{<block_content pos:start="145:9" pos:end="377:28">

        <case pos:start="145:9" pos:end="145:17">case <expr pos:start="145:14" pos:end="145:16"><literal type="number" pos:start="145:14" pos:end="145:16">0x0</literal></expr>:</case> <comment type="block" pos:start="145:19" pos:end="145:52">/* move program status register */</comment>

            <if_stmt pos:start="147:13" pos:end="181:13"><if pos:start="147:13" pos:end="159:13">if <condition pos:start="147:16" pos:end="147:24">(<expr pos:start="147:17" pos:end="147:23"><name pos:start="147:17" pos:end="147:19">op1</name> <operator pos:start="147:21" pos:end="147:21">&amp;</operator> <literal type="number" pos:start="147:23" pos:end="147:23">1</literal></expr>)</condition> <block pos:start="147:26" pos:end="159:13">{<block_content pos:start="151:17" pos:end="157:36">

                <comment type="block" pos:start="149:17" pos:end="149:31">/* PSR = reg */</comment>

                <expr_stmt pos:start="151:17" pos:end="151:39"><expr pos:start="151:17" pos:end="151:38"><call pos:start="151:17" pos:end="151:38"><name pos:start="151:17" pos:end="151:31">gen_movl_T0_reg</name><argument_list pos:start="151:32" pos:end="151:38">(<argument pos:start="151:33" pos:end="151:33"><expr pos:start="151:33" pos:end="151:33"><name pos:start="151:33" pos:end="151:33">s</name></expr></argument>, <argument pos:start="151:36" pos:end="151:37"><expr pos:start="151:36" pos:end="151:37"><name pos:start="151:36" pos:end="151:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:37"><expr pos:start="153:17" pos:end="153:36"><name pos:start="153:17" pos:end="153:17">i</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <operator pos:start="153:21" pos:end="153:21">(</operator><operator pos:start="153:22" pos:end="153:22">(</operator><name pos:start="153:23" pos:end="153:25">op1</name> <operator pos:start="153:27" pos:end="153:27">&amp;</operator> <literal type="number" pos:start="153:29" pos:end="153:29">2</literal><operator pos:start="153:30" pos:end="153:30">)</operator> <operator pos:start="153:32" pos:end="153:33">!=</operator> <literal type="number" pos:start="153:35" pos:end="153:35">0</literal><operator pos:start="153:36" pos:end="153:36">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="155:17" pos:end="157:36"><if pos:start="155:17" pos:end="157:36">if <condition pos:start="155:20" pos:end="155:77">(<expr pos:start="155:21" pos:end="155:76"><call pos:start="155:21" pos:end="155:76"><name pos:start="155:21" pos:end="155:34">gen_set_psr_T0</name><argument_list pos:start="155:35" pos:end="155:76">(<argument pos:start="155:36" pos:end="155:36"><expr pos:start="155:36" pos:end="155:36"><name pos:start="155:36" pos:end="155:36">s</name></expr></argument>, <argument pos:start="155:39" pos:end="155:72"><expr pos:start="155:39" pos:end="155:72"><call pos:start="155:39" pos:end="155:72"><name pos:start="155:39" pos:end="155:46">msr_mask</name><argument_list pos:start="155:47" pos:end="155:72">(<argument pos:start="155:48" pos:end="155:48"><expr pos:start="155:48" pos:end="155:48"><name pos:start="155:48" pos:end="155:48">s</name></expr></argument>, <argument pos:start="155:51" pos:end="155:68"><expr pos:start="155:51" pos:end="155:68"><operator pos:start="155:51" pos:end="155:51">(</operator><name pos:start="155:52" pos:end="155:55">insn</name> <operator pos:start="155:57" pos:end="155:58">&gt;&gt;</operator> <literal type="number" pos:start="155:60" pos:end="155:61">16</literal><operator pos:start="155:62" pos:end="155:62">)</operator> <operator pos:start="155:64" pos:end="155:64">&amp;</operator> <literal type="number" pos:start="155:66" pos:end="155:68">0xf</literal></expr></argument>, <argument pos:start="155:71" pos:end="155:71"><expr pos:start="155:71" pos:end="155:71"><name pos:start="155:71" pos:end="155:71">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="155:75" pos:end="155:75"><expr pos:start="155:75" pos:end="155:75"><name pos:start="155:75" pos:end="155:75">i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="157:21" pos:end="157:36"><block_content pos:start="157:21" pos:end="157:36">

                    <goto pos:start="157:21" pos:end="157:36">goto <name pos:start="157:26" pos:end="157:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="159:15" pos:end="181:13">else <block pos:start="159:20" pos:end="181:13">{<block_content pos:start="163:17" pos:end="179:39">

                <comment type="block" pos:start="161:17" pos:end="161:31">/* reg = PSR */</comment>

                <expr_stmt pos:start="163:17" pos:end="163:40"><expr pos:start="163:17" pos:end="163:39"><name pos:start="163:17" pos:end="163:18">rd</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <operator pos:start="163:22" pos:end="163:22">(</operator><name pos:start="163:23" pos:end="163:26">insn</name> <operator pos:start="163:28" pos:end="163:29">&gt;&gt;</operator> <literal type="number" pos:start="163:31" pos:end="163:32">12</literal><operator pos:start="163:33" pos:end="163:33">)</operator> <operator pos:start="163:35" pos:end="163:35">&amp;</operator> <literal type="number" pos:start="163:37" pos:end="163:39">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="165:17" pos:end="177:17"><if pos:start="165:17" pos:end="173:17">if <condition pos:start="165:20" pos:end="165:28">(<expr pos:start="165:21" pos:end="165:27"><name pos:start="165:21" pos:end="165:23">op1</name> <operator pos:start="165:25" pos:end="165:25">&amp;</operator> <literal type="number" pos:start="165:27" pos:end="165:27">2</literal></expr>)</condition> <block pos:start="165:30" pos:end="173:17">{<block_content pos:start="167:21" pos:end="171:42">

                    <if_stmt pos:start="167:21" pos:end="169:40"><if pos:start="167:21" pos:end="169:40">if <condition pos:start="167:24" pos:end="167:35">(<expr pos:start="167:25" pos:end="167:34"><call pos:start="167:25" pos:end="167:34"><name pos:start="167:25" pos:end="167:31">IS_USER</name><argument_list pos:start="167:32" pos:end="167:34">(<argument pos:start="167:33" pos:end="167:33"><expr pos:start="167:33" pos:end="167:33"><name pos:start="167:33" pos:end="167:33">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="169:25" pos:end="169:40"><block_content pos:start="169:25" pos:end="169:40">

                        <goto pos:start="169:25" pos:end="169:40">goto <name pos:start="169:30" pos:end="169:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="171:21" pos:end="171:42"><expr pos:start="171:21" pos:end="171:41"><call pos:start="171:21" pos:end="171:41"><name pos:start="171:21" pos:end="171:39">gen_op_movl_T0_spsr</name><argument_list pos:start="171:40" pos:end="171:41">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="173:19" pos:end="177:17">else <block pos:start="173:24" pos:end="177:17">{<block_content pos:start="175:21" pos:end="175:42">

                    <expr_stmt pos:start="175:21" pos:end="175:42"><expr pos:start="175:21" pos:end="175:41"><call pos:start="175:21" pos:end="175:41"><name pos:start="175:21" pos:end="175:39">gen_op_movl_T0_cpsr</name><argument_list pos:start="175:40" pos:end="175:41">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:39"><expr pos:start="179:17" pos:end="179:38"><call pos:start="179:17" pos:end="179:38"><name pos:start="179:17" pos:end="179:31">gen_movl_reg_T0</name><argument_list pos:start="179:32" pos:end="179:38">(<argument pos:start="179:33" pos:end="179:33"><expr pos:start="179:33" pos:end="179:33"><name pos:start="179:33" pos:end="179:33">s</name></expr></argument>, <argument pos:start="179:36" pos:end="179:37"><expr pos:start="179:36" pos:end="179:37"><name pos:start="179:36" pos:end="179:37">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="183:13" pos:end="183:18">break;</break>

        <case pos:start="185:9" pos:end="185:17">case <expr pos:start="185:14" pos:end="185:16"><literal type="number" pos:start="185:14" pos:end="185:16">0x1</literal></expr>:</case>

            <if_stmt pos:start="187:13" pos:end="211:13"><if pos:start="187:13" pos:end="195:13">if <condition pos:start="187:16" pos:end="187:25">(<expr pos:start="187:17" pos:end="187:24"><name pos:start="187:17" pos:end="187:19">op1</name> <operator pos:start="187:21" pos:end="187:22">==</operator> <literal type="number" pos:start="187:24" pos:end="187:24">1</literal></expr>)</condition> <block pos:start="187:27" pos:end="195:13">{<block_content pos:start="191:17" pos:end="193:26">

                <comment type="block" pos:start="189:17" pos:end="189:50">/* branch/exchange thumb (bx).  */</comment>

                <expr_stmt pos:start="191:17" pos:end="191:39"><expr pos:start="191:17" pos:end="191:38"><call pos:start="191:17" pos:end="191:38"><name pos:start="191:17" pos:end="191:31">gen_movl_T0_reg</name><argument_list pos:start="191:32" pos:end="191:38">(<argument pos:start="191:33" pos:end="191:33"><expr pos:start="191:33" pos:end="191:33"><name pos:start="191:33" pos:end="191:33">s</name></expr></argument>, <argument pos:start="191:36" pos:end="191:37"><expr pos:start="191:36" pos:end="191:37"><name pos:start="191:36" pos:end="191:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:26"><expr pos:start="193:17" pos:end="193:25"><call pos:start="193:17" pos:end="193:25"><name pos:start="193:17" pos:end="193:22">gen_bx</name><argument_list pos:start="193:23" pos:end="193:25">(<argument pos:start="193:24" pos:end="193:24"><expr pos:start="193:24" pos:end="193:24"><name pos:start="193:24" pos:end="193:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="195:15" pos:end="207:13">else if <condition pos:start="195:23" pos:end="195:32">(<expr pos:start="195:24" pos:end="195:31"><name pos:start="195:24" pos:end="195:26">op1</name> <operator pos:start="195:28" pos:end="195:29">==</operator> <literal type="number" pos:start="195:31" pos:end="195:31">3</literal></expr>)</condition> <block pos:start="195:34" pos:end="207:13">{<block_content pos:start="199:17" pos:end="205:39">

                <comment type="block" pos:start="197:17" pos:end="197:25">/* clz */</comment>

                <expr_stmt pos:start="199:17" pos:end="199:40"><expr pos:start="199:17" pos:end="199:39"><name pos:start="199:17" pos:end="199:18">rd</name> <operator pos:start="199:20" pos:end="199:20">=</operator> <operator pos:start="199:22" pos:end="199:22">(</operator><name pos:start="199:23" pos:end="199:26">insn</name> <operator pos:start="199:28" pos:end="199:29">&gt;&gt;</operator> <literal type="number" pos:start="199:31" pos:end="199:32">12</literal><operator pos:start="199:33" pos:end="199:33">)</operator> <operator pos:start="199:35" pos:end="199:35">&amp;</operator> <literal type="number" pos:start="199:37" pos:end="199:39">0xf</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:39"><expr pos:start="201:17" pos:end="201:38"><call pos:start="201:17" pos:end="201:38"><name pos:start="201:17" pos:end="201:31">gen_movl_T0_reg</name><argument_list pos:start="201:32" pos:end="201:38">(<argument pos:start="201:33" pos:end="201:33"><expr pos:start="201:33" pos:end="201:33"><name pos:start="201:33" pos:end="201:33">s</name></expr></argument>, <argument pos:start="201:36" pos:end="201:37"><expr pos:start="201:36" pos:end="201:37"><name pos:start="201:36" pos:end="201:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:32"><expr pos:start="203:17" pos:end="203:31"><call pos:start="203:17" pos:end="203:31"><name pos:start="203:17" pos:end="203:29">gen_op_clz_T0</name><argument_list pos:start="203:30" pos:end="203:31">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:39"><expr pos:start="205:17" pos:end="205:38"><call pos:start="205:17" pos:end="205:38"><name pos:start="205:17" pos:end="205:31">gen_movl_reg_T0</name><argument_list pos:start="205:32" pos:end="205:38">(<argument pos:start="205:33" pos:end="205:33"><expr pos:start="205:33" pos:end="205:33"><name pos:start="205:33" pos:end="205:33">s</name></expr></argument>, <argument pos:start="205:36" pos:end="205:37"><expr pos:start="205:36" pos:end="205:37"><name pos:start="205:36" pos:end="205:37">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="207:15" pos:end="211:13">else <block pos:start="207:20" pos:end="211:13">{<block_content pos:start="209:17" pos:end="209:32">

                <goto pos:start="209:17" pos:end="209:32">goto <name pos:start="209:22" pos:end="209:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="213:13" pos:end="213:18">break;</break>

        <case pos:start="215:9" pos:end="215:17">case <expr pos:start="215:14" pos:end="215:16"><literal type="number" pos:start="215:14" pos:end="215:16">0x2</literal></expr>:</case>

            <if_stmt pos:start="217:13" pos:end="231:13"><if pos:start="217:13" pos:end="227:13">if <condition pos:start="217:16" pos:end="217:25">(<expr pos:start="217:17" pos:end="217:24"><name pos:start="217:17" pos:end="217:19">op1</name> <operator pos:start="217:21" pos:end="217:22">==</operator> <literal type="number" pos:start="217:24" pos:end="217:24">1</literal></expr>)</condition> <block pos:start="217:27" pos:end="227:13">{<block_content pos:start="219:17" pos:end="225:26">

                <expr_stmt pos:start="219:17" pos:end="219:25"><expr pos:start="219:17" pos:end="219:24"><call pos:start="219:17" pos:end="219:24"><name pos:start="219:17" pos:end="219:20">ARCH</name><argument_list pos:start="219:21" pos:end="219:24">(<argument pos:start="219:22" pos:end="219:23"><expr pos:start="219:22" pos:end="219:23"><literal type="number" pos:start="219:22" pos:end="219:23">5J</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="219:27" pos:end="219:35">/* bxj */</comment>

                <comment type="block" pos:start="221:17" pos:end="221:63">/* Trivial implementation equivalent to bx.  */</comment>

                <expr_stmt pos:start="223:17" pos:end="223:39"><expr pos:start="223:17" pos:end="223:38"><call pos:start="223:17" pos:end="223:38"><name pos:start="223:17" pos:end="223:31">gen_movl_T0_reg</name><argument_list pos:start="223:32" pos:end="223:38">(<argument pos:start="223:33" pos:end="223:33"><expr pos:start="223:33" pos:end="223:33"><name pos:start="223:33" pos:end="223:33">s</name></expr></argument>, <argument pos:start="223:36" pos:end="223:37"><expr pos:start="223:36" pos:end="223:37"><name pos:start="223:36" pos:end="223:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:26"><expr pos:start="225:17" pos:end="225:25"><call pos:start="225:17" pos:end="225:25"><name pos:start="225:17" pos:end="225:22">gen_bx</name><argument_list pos:start="225:23" pos:end="225:25">(<argument pos:start="225:24" pos:end="225:24"><expr pos:start="225:24" pos:end="225:24"><name pos:start="225:24" pos:end="225:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="227:15" pos:end="231:13">else <block pos:start="227:20" pos:end="231:13">{<block_content pos:start="229:17" pos:end="229:32">

                <goto pos:start="229:17" pos:end="229:32">goto <name pos:start="229:22" pos:end="229:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="233:13" pos:end="233:18">break;</break>

        <case pos:start="235:9" pos:end="235:17">case <expr pos:start="235:14" pos:end="235:16"><literal type="number" pos:start="235:14" pos:end="235:16">0x3</literal></expr>:</case>

            <if_stmt pos:start="237:13" pos:end="239:30"><if pos:start="237:13" pos:end="239:30">if <condition pos:start="237:16" pos:end="237:25">(<expr pos:start="237:17" pos:end="237:24"><name pos:start="237:17" pos:end="237:19">op1</name> <operator pos:start="237:21" pos:end="237:22">!=</operator> <literal type="number" pos:start="237:24" pos:end="237:24">1</literal></expr>)</condition><block type="pseudo" pos:start="239:15" pos:end="239:30"><block_content pos:start="239:15" pos:end="239:30">

              <goto pos:start="239:15" pos:end="239:30">goto <name pos:start="239:20" pos:end="239:29">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <comment type="block" pos:start="243:13" pos:end="243:50">/* branch link/exchange thumb (blx) */</comment>

            <expr_stmt pos:start="245:13" pos:end="245:34"><expr pos:start="245:13" pos:end="245:33"><name pos:start="245:13" pos:end="245:15">val</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <operator pos:start="245:19" pos:end="245:19">(</operator><name pos:start="245:20" pos:end="245:27">uint32_t</name><operator pos:start="245:28" pos:end="245:28">)</operator><name pos:start="245:29" pos:end="245:33"><name pos:start="245:29" pos:end="245:29">s</name><operator pos:start="245:30" pos:end="245:31">-&gt;</operator><name pos:start="245:32" pos:end="245:33">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:35"><expr pos:start="247:13" pos:end="247:34"><call pos:start="247:13" pos:end="247:34"><name pos:start="247:13" pos:end="247:29">gen_op_movl_T0_im</name><argument_list pos:start="247:30" pos:end="247:34">(<argument pos:start="247:31" pos:end="247:33"><expr pos:start="247:31" pos:end="247:33"><name pos:start="247:31" pos:end="247:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:35"><expr pos:start="249:13" pos:end="249:34"><call pos:start="249:13" pos:end="249:34"><name pos:start="249:13" pos:end="249:27">gen_movl_reg_T0</name><argument_list pos:start="249:28" pos:end="249:34">(<argument pos:start="249:29" pos:end="249:29"><expr pos:start="249:29" pos:end="249:29"><name pos:start="249:29" pos:end="249:29">s</name></expr></argument>, <argument pos:start="249:32" pos:end="249:33"><expr pos:start="249:32" pos:end="249:33"><literal type="number" pos:start="249:32" pos:end="249:33">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:35"><expr pos:start="251:13" pos:end="251:34"><call pos:start="251:13" pos:end="251:34"><name pos:start="251:13" pos:end="251:27">gen_movl_T0_reg</name><argument_list pos:start="251:28" pos:end="251:34">(<argument pos:start="251:29" pos:end="251:29"><expr pos:start="251:29" pos:end="251:29"><name pos:start="251:29" pos:end="251:29">s</name></expr></argument>, <argument pos:start="251:32" pos:end="251:33"><expr pos:start="251:32" pos:end="251:33"><name pos:start="251:32" pos:end="251:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:22"><expr pos:start="253:13" pos:end="253:21"><call pos:start="253:13" pos:end="253:21"><name pos:start="253:13" pos:end="253:18">gen_bx</name><argument_list pos:start="253:19" pos:end="253:21">(<argument pos:start="253:20" pos:end="253:20"><expr pos:start="253:20" pos:end="253:20"><name pos:start="253:20" pos:end="253:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="255:13" pos:end="255:18">break;</break>

        <case pos:start="257:9" pos:end="257:17">case <expr pos:start="257:14" pos:end="257:16"><literal type="number" pos:start="257:14" pos:end="257:16">0x5</literal></expr>:</case> <comment type="block" pos:start="257:19" pos:end="257:47">/* saturating add/subtract */</comment>

            <expr_stmt pos:start="259:13" pos:end="259:36"><expr pos:start="259:13" pos:end="259:35"><name pos:start="259:13" pos:end="259:14">rd</name> <operator pos:start="259:16" pos:end="259:16">=</operator> <operator pos:start="259:18" pos:end="259:18">(</operator><name pos:start="259:19" pos:end="259:22">insn</name> <operator pos:start="259:24" pos:end="259:25">&gt;&gt;</operator> <literal type="number" pos:start="259:27" pos:end="259:28">12</literal><operator pos:start="259:29" pos:end="259:29">)</operator> <operator pos:start="259:31" pos:end="259:31">&amp;</operator> <literal type="number" pos:start="259:33" pos:end="259:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:36"><expr pos:start="261:13" pos:end="261:35"><name pos:start="261:13" pos:end="261:14">rn</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <operator pos:start="261:18" pos:end="261:18">(</operator><name pos:start="261:19" pos:end="261:22">insn</name> <operator pos:start="261:24" pos:end="261:25">&gt;&gt;</operator> <literal type="number" pos:start="261:27" pos:end="261:28">16</literal><operator pos:start="261:29" pos:end="261:29">)</operator> <operator pos:start="261:31" pos:end="261:31">&amp;</operator> <literal type="number" pos:start="261:33" pos:end="261:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:35"><expr pos:start="263:13" pos:end="263:34"><call pos:start="263:13" pos:end="263:34"><name pos:start="263:13" pos:end="263:27">gen_movl_T0_reg</name><argument_list pos:start="263:28" pos:end="263:34">(<argument pos:start="263:29" pos:end="263:29"><expr pos:start="263:29" pos:end="263:29"><name pos:start="263:29" pos:end="263:29">s</name></expr></argument>, <argument pos:start="263:32" pos:end="263:33"><expr pos:start="263:32" pos:end="263:33"><name pos:start="263:32" pos:end="263:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:35"><expr pos:start="265:13" pos:end="265:34"><call pos:start="265:13" pos:end="265:34"><name pos:start="265:13" pos:end="265:27">gen_movl_T1_reg</name><argument_list pos:start="265:28" pos:end="265:34">(<argument pos:start="265:29" pos:end="265:29"><expr pos:start="265:29" pos:end="265:29"><name pos:start="265:29" pos:end="265:29">s</name></expr></argument>, <argument pos:start="265:32" pos:end="265:33"><expr pos:start="265:32" pos:end="265:33"><name pos:start="265:32" pos:end="265:33">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="267:13" pos:end="269:44"><if pos:start="267:13" pos:end="269:44">if <condition pos:start="267:16" pos:end="267:24">(<expr pos:start="267:17" pos:end="267:23"><name pos:start="267:17" pos:end="267:19">op1</name> <operator pos:start="267:21" pos:end="267:21">&amp;</operator> <literal type="number" pos:start="267:23" pos:end="267:23">2</literal></expr>)</condition><block type="pseudo" pos:start="269:17" pos:end="269:44"><block_content pos:start="269:17" pos:end="269:44">

                <expr_stmt pos:start="269:17" pos:end="269:44"><expr pos:start="269:17" pos:end="269:43"><call pos:start="269:17" pos:end="269:43"><name pos:start="269:17" pos:end="269:41">gen_op_double_T1_saturate</name><argument_list pos:start="269:42" pos:end="269:43">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="271:13" pos:end="277:45"><if pos:start="271:13" pos:end="273:45">if <condition pos:start="271:16" pos:end="271:24">(<expr pos:start="271:17" pos:end="271:23"><name pos:start="271:17" pos:end="271:19">op1</name> <operator pos:start="271:21" pos:end="271:21">&amp;</operator> <literal type="number" pos:start="271:23" pos:end="271:23">1</literal></expr>)</condition><block type="pseudo" pos:start="273:17" pos:end="273:45"><block_content pos:start="273:17" pos:end="273:45">

                <expr_stmt pos:start="273:17" pos:end="273:45"><expr pos:start="273:17" pos:end="273:44"><call pos:start="273:17" pos:end="273:44"><name pos:start="273:17" pos:end="273:42">gen_op_subl_T0_T1_saturate</name><argument_list pos:start="273:43" pos:end="273:44">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="275:13" pos:end="277:45">else<block type="pseudo" pos:start="277:17" pos:end="277:45"><block_content pos:start="277:17" pos:end="277:45">

                <expr_stmt pos:start="277:17" pos:end="277:45"><expr pos:start="277:17" pos:end="277:44"><call pos:start="277:17" pos:end="277:44"><name pos:start="277:17" pos:end="277:42">gen_op_addl_T0_T1_saturate</name><argument_list pos:start="277:43" pos:end="277:44">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:35"><expr pos:start="279:13" pos:end="279:34"><call pos:start="279:13" pos:end="279:34"><name pos:start="279:13" pos:end="279:27">gen_movl_reg_T0</name><argument_list pos:start="279:28" pos:end="279:34">(<argument pos:start="279:29" pos:end="279:29"><expr pos:start="279:29" pos:end="279:29"><name pos:start="279:29" pos:end="279:29">s</name></expr></argument>, <argument pos:start="279:32" pos:end="279:33"><expr pos:start="279:32" pos:end="279:33"><name pos:start="279:32" pos:end="279:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        <case pos:start="283:9" pos:end="283:15">case <expr pos:start="283:14" pos:end="283:14"><literal type="number" pos:start="283:14" pos:end="283:14">7</literal></expr>:</case> <comment type="block" pos:start="283:17" pos:end="283:26">/* bkpt */</comment>

            <expr_stmt pos:start="285:13" pos:end="285:47"><expr pos:start="285:13" pos:end="285:46"><call pos:start="285:13" pos:end="285:46"><name pos:start="285:13" pos:end="285:29">gen_op_movl_T0_im</name><argument_list pos:start="285:30" pos:end="285:46">(<argument pos:start="285:31" pos:end="285:45"><expr pos:start="285:31" pos:end="285:45"><operator pos:start="285:31" pos:end="285:31">(</operator><name pos:start="285:32" pos:end="285:35">long</name><operator pos:start="285:36" pos:end="285:36">)</operator><name pos:start="285:37" pos:end="285:41"><name pos:start="285:37" pos:end="285:37">s</name><operator pos:start="285:38" pos:end="285:39">-&gt;</operator><name pos:start="285:40" pos:end="285:41">pc</name></name> <operator pos:start="285:43" pos:end="285:43">-</operator> <literal type="number" pos:start="285:45" pos:end="285:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="287:13" pos:end="287:40"><expr pos:start="287:13" pos:end="287:39"><name pos:start="287:13" pos:end="287:37"><name pos:start="287:13" pos:end="287:30">gen_op_movl_reg_TN</name><index pos:start="287:31" pos:end="287:33">[<expr pos:start="287:32" pos:end="287:32"><literal type="number" pos:start="287:32" pos:end="287:32">0</literal></expr>]</index><index pos:start="287:34" pos:end="287:37">[<expr pos:start="287:35" pos:end="287:36"><literal type="number" pos:start="287:35" pos:end="287:36">15</literal></expr>]</index></name><operator pos:start="287:38" pos:end="287:38">(</operator><operator pos:start="287:39" pos:end="287:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:26"><expr pos:start="289:13" pos:end="289:25"><call pos:start="289:13" pos:end="289:25"><name pos:start="289:13" pos:end="289:23">gen_op_bkpt</name><argument_list pos:start="289:24" pos:end="289:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:35"><expr pos:start="291:13" pos:end="291:34"><name pos:start="291:13" pos:end="291:21"><name pos:start="291:13" pos:end="291:13">s</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:21">is_jmp</name></name> <operator pos:start="291:23" pos:end="291:23">=</operator> <name pos:start="291:25" pos:end="291:34">DISAS_JUMP</name></expr>;</expr_stmt>

            <break pos:start="293:13" pos:end="293:18">break;</break>

        <case pos:start="295:9" pos:end="295:17">case <expr pos:start="295:14" pos:end="295:16"><literal type="number" pos:start="295:14" pos:end="295:16">0x8</literal></expr>:</case> <comment type="block" pos:start="295:19" pos:end="295:39">/* signed multiply */</comment>

        <case pos:start="297:9" pos:end="297:17">case <expr pos:start="297:14" pos:end="297:16"><literal type="number" pos:start="297:14" pos:end="297:16">0xa</literal></expr>:</case>

        <case pos:start="299:9" pos:end="299:17">case <expr pos:start="299:14" pos:end="299:16"><literal type="number" pos:start="299:14" pos:end="299:16">0xc</literal></expr>:</case>

        <case pos:start="301:9" pos:end="301:17">case <expr pos:start="301:14" pos:end="301:16"><literal type="number" pos:start="301:14" pos:end="301:16">0xe</literal></expr>:</case>

            <expr_stmt pos:start="303:13" pos:end="303:35"><expr pos:start="303:13" pos:end="303:34"><name pos:start="303:13" pos:end="303:14">rs</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <operator pos:start="303:18" pos:end="303:18">(</operator><name pos:start="303:19" pos:end="303:22">insn</name> <operator pos:start="303:24" pos:end="303:25">&gt;&gt;</operator> <literal type="number" pos:start="303:27" pos:end="303:27">8</literal><operator pos:start="303:28" pos:end="303:28">)</operator> <operator pos:start="303:30" pos:end="303:30">&amp;</operator> <literal type="number" pos:start="303:32" pos:end="303:34">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:36"><expr pos:start="305:13" pos:end="305:35"><name pos:start="305:13" pos:end="305:14">rn</name> <operator pos:start="305:16" pos:end="305:16">=</operator> <operator pos:start="305:18" pos:end="305:18">(</operator><name pos:start="305:19" pos:end="305:22">insn</name> <operator pos:start="305:24" pos:end="305:25">&gt;&gt;</operator> <literal type="number" pos:start="305:27" pos:end="305:28">12</literal><operator pos:start="305:29" pos:end="305:29">)</operator> <operator pos:start="305:31" pos:end="305:31">&amp;</operator> <literal type="number" pos:start="305:33" pos:end="305:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:36"><expr pos:start="307:13" pos:end="307:35"><name pos:start="307:13" pos:end="307:14">rd</name> <operator pos:start="307:16" pos:end="307:16">=</operator> <operator pos:start="307:18" pos:end="307:18">(</operator><name pos:start="307:19" pos:end="307:22">insn</name> <operator pos:start="307:24" pos:end="307:25">&gt;&gt;</operator> <literal type="number" pos:start="307:27" pos:end="307:28">16</literal><operator pos:start="307:29" pos:end="307:29">)</operator> <operator pos:start="307:31" pos:end="307:31">&amp;</operator> <literal type="number" pos:start="307:33" pos:end="307:35">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="309:13" pos:end="371:13"><if pos:start="309:13" pos:end="337:13">if <condition pos:start="309:16" pos:end="309:25">(<expr pos:start="309:17" pos:end="309:24"><name pos:start="309:17" pos:end="309:19">op1</name> <operator pos:start="309:21" pos:end="309:22">==</operator> <literal type="number" pos:start="309:24" pos:end="309:24">1</literal></expr>)</condition> <block pos:start="309:27" pos:end="337:13">{<block_content pos:start="313:17" pos:end="335:39">

                <comment type="block" pos:start="311:17" pos:end="311:37">/* (32 * 16) &gt;&gt; 16 */</comment>

                <expr_stmt pos:start="313:17" pos:end="313:39"><expr pos:start="313:17" pos:end="313:38"><call pos:start="313:17" pos:end="313:38"><name pos:start="313:17" pos:end="313:31">gen_movl_T0_reg</name><argument_list pos:start="313:32" pos:end="313:38">(<argument pos:start="313:33" pos:end="313:33"><expr pos:start="313:33" pos:end="313:33"><name pos:start="313:33" pos:end="313:33">s</name></expr></argument>, <argument pos:start="313:36" pos:end="313:37"><expr pos:start="313:36" pos:end="313:37"><name pos:start="313:36" pos:end="313:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:39"><expr pos:start="315:17" pos:end="315:38"><call pos:start="315:17" pos:end="315:38"><name pos:start="315:17" pos:end="315:31">gen_movl_T1_reg</name><argument_list pos:start="315:32" pos:end="315:38">(<argument pos:start="315:33" pos:end="315:33"><expr pos:start="315:33" pos:end="315:33"><name pos:start="315:33" pos:end="315:33">s</name></expr></argument>, <argument pos:start="315:36" pos:end="315:37"><expr pos:start="315:36" pos:end="315:37"><name pos:start="315:36" pos:end="315:37">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="317:17" pos:end="323:37"><if pos:start="317:17" pos:end="319:42">if <condition pos:start="317:20" pos:end="317:27">(<expr pos:start="317:21" pos:end="317:26"><name pos:start="317:21" pos:end="317:22">sh</name> <operator pos:start="317:24" pos:end="317:24">&amp;</operator> <literal type="number" pos:start="317:26" pos:end="317:26">4</literal></expr>)</condition><block type="pseudo" pos:start="319:21" pos:end="319:42"><block_content pos:start="319:21" pos:end="319:42">

                    <expr_stmt pos:start="319:21" pos:end="319:42"><expr pos:start="319:21" pos:end="319:41"><call pos:start="319:21" pos:end="319:41"><name pos:start="319:21" pos:end="319:37">gen_op_sarl_T1_im</name><argument_list pos:start="319:38" pos:end="319:41">(<argument pos:start="319:39" pos:end="319:40"><expr pos:start="319:39" pos:end="319:40"><literal type="number" pos:start="319:39" pos:end="319:40">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="321:17" pos:end="323:37">else<block type="pseudo" pos:start="323:21" pos:end="323:37"><block_content pos:start="323:21" pos:end="323:37">

                    <expr_stmt pos:start="323:21" pos:end="323:37"><expr pos:start="323:21" pos:end="323:36"><call pos:start="323:21" pos:end="323:36"><name pos:start="323:21" pos:end="323:34">gen_op_sxth_T1</name><argument_list pos:start="323:35" pos:end="323:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:37"><expr pos:start="325:17" pos:end="325:36"><call pos:start="325:17" pos:end="325:36"><name pos:start="325:17" pos:end="325:34">gen_op_imulw_T0_T1</name><argument_list pos:start="325:35" pos:end="325:36">()</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="327:17" pos:end="333:17"><if pos:start="327:17" pos:end="333:17">if <condition pos:start="327:20" pos:end="327:34">(<expr pos:start="327:21" pos:end="327:33"><operator pos:start="327:21" pos:end="327:21">(</operator><name pos:start="327:22" pos:end="327:23">sh</name> <operator pos:start="327:25" pos:end="327:25">&amp;</operator> <literal type="number" pos:start="327:27" pos:end="327:27">2</literal><operator pos:start="327:28" pos:end="327:28">)</operator> <operator pos:start="327:30" pos:end="327:31">==</operator> <literal type="number" pos:start="327:33" pos:end="327:33">0</literal></expr>)</condition> <block pos:start="327:36" pos:end="333:17">{<block_content pos:start="329:21" pos:end="331:45">

                    <expr_stmt pos:start="329:21" pos:end="329:43"><expr pos:start="329:21" pos:end="329:42"><call pos:start="329:21" pos:end="329:42"><name pos:start="329:21" pos:end="329:35">gen_movl_T1_reg</name><argument_list pos:start="329:36" pos:end="329:42">(<argument pos:start="329:37" pos:end="329:37"><expr pos:start="329:37" pos:end="329:37"><name pos:start="329:37" pos:end="329:37">s</name></expr></argument>, <argument pos:start="329:40" pos:end="329:41"><expr pos:start="329:40" pos:end="329:41"><name pos:start="329:40" pos:end="329:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="331:21" pos:end="331:45"><expr pos:start="331:21" pos:end="331:44"><call pos:start="331:21" pos:end="331:44"><name pos:start="331:21" pos:end="331:42">gen_op_addl_T0_T1_setq</name><argument_list pos:start="331:43" pos:end="331:44">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:39"><expr pos:start="335:17" pos:end="335:38"><call pos:start="335:17" pos:end="335:38"><name pos:start="335:17" pos:end="335:31">gen_movl_reg_T0</name><argument_list pos:start="335:32" pos:end="335:38">(<argument pos:start="335:33" pos:end="335:33"><expr pos:start="335:33" pos:end="335:33"><name pos:start="335:33" pos:end="335:33">s</name></expr></argument>, <argument pos:start="335:36" pos:end="335:37"><expr pos:start="335:36" pos:end="335:37"><name pos:start="335:36" pos:end="335:37">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="337:15" pos:end="371:13">else <block pos:start="337:20" pos:end="371:13">{<block_content pos:start="341:17" pos:end="369:17">

                <comment type="block" pos:start="339:17" pos:end="339:29">/* 16 * 16 */</comment>

                <expr_stmt pos:start="341:17" pos:end="341:39"><expr pos:start="341:17" pos:end="341:38"><call pos:start="341:17" pos:end="341:38"><name pos:start="341:17" pos:end="341:31">gen_movl_T0_reg</name><argument_list pos:start="341:32" pos:end="341:38">(<argument pos:start="341:33" pos:end="341:33"><expr pos:start="341:33" pos:end="341:33"><name pos:start="341:33" pos:end="341:33">s</name></expr></argument>, <argument pos:start="341:36" pos:end="341:37"><expr pos:start="341:36" pos:end="341:37"><name pos:start="341:36" pos:end="341:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:39"><expr pos:start="343:17" pos:end="343:38"><call pos:start="343:17" pos:end="343:38"><name pos:start="343:17" pos:end="343:31">gen_movl_T1_reg</name><argument_list pos:start="343:32" pos:end="343:38">(<argument pos:start="343:33" pos:end="343:33"><expr pos:start="343:33" pos:end="343:33"><name pos:start="343:33" pos:end="343:33">s</name></expr></argument>, <argument pos:start="343:36" pos:end="343:37"><expr pos:start="343:36" pos:end="343:37"><name pos:start="343:36" pos:end="343:37">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:42"><expr pos:start="345:17" pos:end="345:41"><call pos:start="345:17" pos:end="345:41"><name pos:start="345:17" pos:end="345:25">gen_mulxy</name><argument_list pos:start="345:26" pos:end="345:41">(<argument pos:start="345:27" pos:end="345:32"><expr pos:start="345:27" pos:end="345:32"><name pos:start="345:27" pos:end="345:28">sh</name> <operator pos:start="345:30" pos:end="345:30">&amp;</operator> <literal type="number" pos:start="345:32" pos:end="345:32">2</literal></expr></argument>, <argument pos:start="345:35" pos:end="345:40"><expr pos:start="345:35" pos:end="345:40"><name pos:start="345:35" pos:end="345:36">sh</name> <operator pos:start="345:38" pos:end="345:38">&amp;</operator> <literal type="number" pos:start="345:40" pos:end="345:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="347:17" pos:end="369:17"><if pos:start="347:17" pos:end="357:17">if <condition pos:start="347:20" pos:end="347:29">(<expr pos:start="347:21" pos:end="347:28"><name pos:start="347:21" pos:end="347:23">op1</name> <operator pos:start="347:25" pos:end="347:26">==</operator> <literal type="number" pos:start="347:28" pos:end="347:28">2</literal></expr>)</condition> <block pos:start="347:31" pos:end="357:17">{<block_content pos:start="349:21" pos:end="355:43">

                    <expr_stmt pos:start="349:21" pos:end="349:43"><expr pos:start="349:21" pos:end="349:42"><call pos:start="349:21" pos:end="349:42"><name pos:start="349:21" pos:end="349:40">gen_op_signbit_T1_T0</name><argument_list pos:start="349:41" pos:end="349:42">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:46"><expr pos:start="351:21" pos:end="351:45"><call pos:start="351:21" pos:end="351:45"><name pos:start="351:21" pos:end="351:37">gen_op_addq_T0_T1</name><argument_list pos:start="351:38" pos:end="351:45">(<argument pos:start="351:39" pos:end="351:40"><expr pos:start="351:39" pos:end="351:40"><name pos:start="351:39" pos:end="351:40">rn</name></expr></argument>, <argument pos:start="351:43" pos:end="351:44"><expr pos:start="351:43" pos:end="351:44"><name pos:start="351:43" pos:end="351:44">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="353:21" pos:end="353:43"><expr pos:start="353:21" pos:end="353:42"><call pos:start="353:21" pos:end="353:42"><name pos:start="353:21" pos:end="353:35">gen_movl_reg_T0</name><argument_list pos:start="353:36" pos:end="353:42">(<argument pos:start="353:37" pos:end="353:37"><expr pos:start="353:37" pos:end="353:37"><name pos:start="353:37" pos:end="353:37">s</name></expr></argument>, <argument pos:start="353:40" pos:end="353:41"><expr pos:start="353:40" pos:end="353:41"><name pos:start="353:40" pos:end="353:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:43"><expr pos:start="355:21" pos:end="355:42"><call pos:start="355:21" pos:end="355:42"><name pos:start="355:21" pos:end="355:35">gen_movl_reg_T1</name><argument_list pos:start="355:36" pos:end="355:42">(<argument pos:start="355:37" pos:end="355:37"><expr pos:start="355:37" pos:end="355:37"><name pos:start="355:37" pos:end="355:37">s</name></expr></argument>, <argument pos:start="355:40" pos:end="355:41"><expr pos:start="355:40" pos:end="355:41"><name pos:start="355:40" pos:end="355:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="357:19" pos:end="369:17">else <block pos:start="357:24" pos:end="369:17">{<block_content pos:start="359:21" pos:end="367:43">

                    <if_stmt pos:start="359:21" pos:end="365:21"><if pos:start="359:21" pos:end="365:21">if <condition pos:start="359:24" pos:end="359:33">(<expr pos:start="359:25" pos:end="359:32"><name pos:start="359:25" pos:end="359:27">op1</name> <operator pos:start="359:29" pos:end="359:30">==</operator> <literal type="number" pos:start="359:32" pos:end="359:32">0</literal></expr>)</condition> <block pos:start="359:35" pos:end="365:21">{<block_content pos:start="361:25" pos:end="363:49">

                        <expr_stmt pos:start="361:25" pos:end="361:47"><expr pos:start="361:25" pos:end="361:46"><call pos:start="361:25" pos:end="361:46"><name pos:start="361:25" pos:end="361:39">gen_movl_T1_reg</name><argument_list pos:start="361:40" pos:end="361:46">(<argument pos:start="361:41" pos:end="361:41"><expr pos:start="361:41" pos:end="361:41"><name pos:start="361:41" pos:end="361:41">s</name></expr></argument>, <argument pos:start="361:44" pos:end="361:45"><expr pos:start="361:44" pos:end="361:45"><name pos:start="361:44" pos:end="361:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="363:25" pos:end="363:49"><expr pos:start="363:25" pos:end="363:48"><call pos:start="363:25" pos:end="363:48"><name pos:start="363:25" pos:end="363:46">gen_op_addl_T0_T1_setq</name><argument_list pos:start="363:47" pos:end="363:48">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="367:21" pos:end="367:43"><expr pos:start="367:21" pos:end="367:42"><call pos:start="367:21" pos:end="367:42"><name pos:start="367:21" pos:end="367:35">gen_movl_reg_T0</name><argument_list pos:start="367:36" pos:end="367:42">(<argument pos:start="367:37" pos:end="367:37"><expr pos:start="367:37" pos:end="367:37"><name pos:start="367:37" pos:end="367:37">s</name></expr></argument>, <argument pos:start="367:40" pos:end="367:41"><expr pos:start="367:40" pos:end="367:41"><name pos:start="367:40" pos:end="367:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="373:13" pos:end="373:18">break;</break>

        <default pos:start="375:9" pos:end="375:16">default:</default>

            <goto pos:start="377:13" pos:end="377:28">goto <name pos:start="377:18" pos:end="377:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></if> <if type="elseif" pos:start="381:7" pos:end="725:5">else if <condition pos:start="381:15" pos:end="385:50">(<expr pos:start="381:16" pos:end="385:49"><operator pos:start="381:16" pos:end="381:16">(</operator><operator pos:start="381:17" pos:end="381:17">(</operator><name pos:start="381:18" pos:end="381:21">insn</name> <operator pos:start="381:23" pos:end="381:23">&amp;</operator> <literal type="number" pos:start="381:25" pos:end="381:34">0x0e000000</literal><operator pos:start="381:35" pos:end="381:35">)</operator> <operator pos:start="381:37" pos:end="381:38">==</operator> <literal type="number" pos:start="381:40" pos:end="381:40">0</literal> <operator pos:start="381:42" pos:end="381:43">&amp;&amp;</operator>

                <operator pos:start="383:17" pos:end="383:17">(</operator><name pos:start="383:18" pos:end="383:21">insn</name> <operator pos:start="383:23" pos:end="383:23">&amp;</operator> <literal type="number" pos:start="383:25" pos:end="383:34">0x00000090</literal><operator pos:start="383:35" pos:end="383:35">)</operator> <operator pos:start="383:37" pos:end="383:38">!=</operator> <literal type="number" pos:start="383:40" pos:end="383:43">0x90</literal><operator pos:start="383:44" pos:end="383:44">)</operator> <operator pos:start="383:46" pos:end="383:47">||</operator>

               <operator pos:start="385:16" pos:end="385:16">(</operator><operator pos:start="385:17" pos:end="385:17">(</operator><name pos:start="385:18" pos:end="385:21">insn</name> <operator pos:start="385:23" pos:end="385:23">&amp;</operator> <literal type="number" pos:start="385:25" pos:end="385:34">0x0e000000</literal><operator pos:start="385:35" pos:end="385:35">)</operator> <operator pos:start="385:37" pos:end="385:38">==</operator> <operator pos:start="385:40" pos:end="385:40">(</operator><literal type="number" pos:start="385:41" pos:end="385:41">1</literal> <operator pos:start="385:43" pos:end="385:44">&lt;&lt;</operator> <literal type="number" pos:start="385:46" pos:end="385:47">25</literal><operator pos:start="385:48" pos:end="385:48">)</operator><operator pos:start="385:49" pos:end="385:49">)</operator></expr>)</condition> <block pos:start="385:52" pos:end="725:5">{<block_content pos:start="387:9" pos:end="723:9">

        <decl_stmt pos:start="387:9" pos:end="387:38"><decl pos:start="387:9" pos:end="387:18"><type pos:start="387:9" pos:end="387:11"><name pos:start="387:9" pos:end="387:11">int</name></type> <name pos:start="387:13" pos:end="387:18">set_cc</name></decl>, <decl pos:start="387:21" pos:end="387:28"><type ref="prev" pos:start="387:9" pos:end="387:11"/><name pos:start="387:21" pos:end="387:28">logic_cc</name></decl>, <decl pos:start="387:31" pos:end="387:37"><type ref="prev" pos:start="387:9" pos:end="387:11"/><name pos:start="387:31" pos:end="387:37">shiftop</name></decl>;</decl_stmt>

        

        <expr_stmt pos:start="391:9" pos:end="391:33"><expr pos:start="391:9" pos:end="391:32"><name pos:start="391:9" pos:end="391:11">op1</name> <operator pos:start="391:13" pos:end="391:13">=</operator> <operator pos:start="391:15" pos:end="391:15">(</operator><name pos:start="391:16" pos:end="391:19">insn</name> <operator pos:start="391:21" pos:end="391:22">&gt;&gt;</operator> <literal type="number" pos:start="391:24" pos:end="391:25">21</literal><operator pos:start="391:26" pos:end="391:26">)</operator> <operator pos:start="391:28" pos:end="391:28">&amp;</operator> <literal type="number" pos:start="391:30" pos:end="391:32">0xf</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:34"><expr pos:start="393:9" pos:end="393:33"><name pos:start="393:9" pos:end="393:14">set_cc</name> <operator pos:start="393:16" pos:end="393:16">=</operator> <operator pos:start="393:18" pos:end="393:18">(</operator><name pos:start="393:19" pos:end="393:22">insn</name> <operator pos:start="393:24" pos:end="393:25">&gt;&gt;</operator> <literal type="number" pos:start="393:27" pos:end="393:28">20</literal><operator pos:start="393:29" pos:end="393:29">)</operator> <operator pos:start="393:31" pos:end="393:31">&amp;</operator> <literal type="number" pos:start="393:33" pos:end="393:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:48"><expr pos:start="395:9" pos:end="395:47"><name pos:start="395:9" pos:end="395:16">logic_cc</name> <operator pos:start="395:18" pos:end="395:18">=</operator> <name pos:start="395:20" pos:end="395:38"><name pos:start="395:20" pos:end="395:33">table_logic_cc</name><index pos:start="395:34" pos:end="395:38">[<expr pos:start="395:35" pos:end="395:37"><name pos:start="395:35" pos:end="395:37">op1</name></expr>]</index></name> <operator pos:start="395:40" pos:end="395:40">&amp;</operator> <name pos:start="395:42" pos:end="395:47">set_cc</name></expr>;</expr_stmt>



        <comment type="block" pos:start="399:9" pos:end="399:41">/* data processing instruction */</comment>

        <if_stmt pos:start="401:9" pos:end="477:9"><if pos:start="401:9" pos:end="419:9">if <condition pos:start="401:12" pos:end="401:29">(<expr pos:start="401:13" pos:end="401:28"><name pos:start="401:13" pos:end="401:16">insn</name> <operator pos:start="401:18" pos:end="401:18">&amp;</operator> <operator pos:start="401:20" pos:end="401:20">(</operator><literal type="number" pos:start="401:21" pos:end="401:21">1</literal> <operator pos:start="401:23" pos:end="401:24">&lt;&lt;</operator> <literal type="number" pos:start="401:26" pos:end="401:27">25</literal><operator pos:start="401:28" pos:end="401:28">)</operator></expr>)</condition> <block pos:start="401:31" pos:end="419:9">{<block_content pos:start="405:13" pos:end="417:35">

            <comment type="block" pos:start="403:13" pos:end="403:35">/* immediate operand */</comment>

            <expr_stmt pos:start="405:13" pos:end="405:30"><expr pos:start="405:13" pos:end="405:29"><name pos:start="405:13" pos:end="405:15">val</name> <operator pos:start="405:17" pos:end="405:17">=</operator> <name pos:start="405:19" pos:end="405:22">insn</name> <operator pos:start="405:24" pos:end="405:24">&amp;</operator> <literal type="number" pos:start="405:26" pos:end="405:29">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="407:13" pos:end="407:44"><expr pos:start="407:13" pos:end="407:43"><name pos:start="407:13" pos:end="407:17">shift</name> <operator pos:start="407:19" pos:end="407:19">=</operator> <operator pos:start="407:21" pos:end="407:21">(</operator><operator pos:start="407:22" pos:end="407:22">(</operator><name pos:start="407:23" pos:end="407:26">insn</name> <operator pos:start="407:28" pos:end="407:29">&gt;&gt;</operator> <literal type="number" pos:start="407:31" pos:end="407:31">8</literal><operator pos:start="407:32" pos:end="407:32">)</operator> <operator pos:start="407:34" pos:end="407:34">&amp;</operator> <literal type="number" pos:start="407:36" pos:end="407:38">0xf</literal><operator pos:start="407:39" pos:end="407:39">)</operator> <operator pos:start="407:41" pos:end="407:41">*</operator> <literal type="number" pos:start="407:43" pos:end="407:43">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="409:13" pos:end="411:61"><if pos:start="409:13" pos:end="411:61">if <condition pos:start="409:16" pos:end="409:22">(<expr pos:start="409:17" pos:end="409:21"><name pos:start="409:17" pos:end="409:21">shift</name></expr>)</condition><block type="pseudo" pos:start="411:17" pos:end="411:61"><block_content pos:start="411:17" pos:end="411:61">

                <expr_stmt pos:start="411:17" pos:end="411:61"><expr pos:start="411:17" pos:end="411:60"><name pos:start="411:17" pos:end="411:19">val</name> <operator pos:start="411:21" pos:end="411:21">=</operator> <operator pos:start="411:23" pos:end="411:23">(</operator><name pos:start="411:24" pos:end="411:26">val</name> <operator pos:start="411:28" pos:end="411:29">&gt;&gt;</operator> <name pos:start="411:31" pos:end="411:35">shift</name><operator pos:start="411:36" pos:end="411:36">)</operator> <operator pos:start="411:38" pos:end="411:38">|</operator> <operator pos:start="411:40" pos:end="411:40">(</operator><name pos:start="411:41" pos:end="411:43">val</name> <operator pos:start="411:45" pos:end="411:46">&lt;&lt;</operator> <operator pos:start="411:48" pos:end="411:48">(</operator><literal type="number" pos:start="411:49" pos:end="411:52">32</literal> <operator pos:start="411:52" pos:end="411:52">-</operator> <name pos:start="411:54" pos:end="411:58">shift</name><operator pos:start="411:59" pos:end="411:59">)</operator><operator pos:start="411:60" pos:end="411:60">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:35"><expr pos:start="413:13" pos:end="413:34"><call pos:start="413:13" pos:end="413:34"><name pos:start="413:13" pos:end="413:29">gen_op_movl_T1_im</name><argument_list pos:start="413:30" pos:end="413:34">(<argument pos:start="413:31" pos:end="413:33"><expr pos:start="413:31" pos:end="413:33"><name pos:start="413:31" pos:end="413:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="415:13" pos:end="417:35"><if pos:start="415:13" pos:end="417:35">if <condition pos:start="415:16" pos:end="415:34">(<expr pos:start="415:17" pos:end="415:33"><name pos:start="415:17" pos:end="415:24">logic_cc</name> <operator pos:start="415:26" pos:end="415:27">&amp;&amp;</operator> <name pos:start="415:29" pos:end="415:33">shift</name></expr>)</condition><block type="pseudo" pos:start="417:17" pos:end="417:35"><block_content pos:start="417:17" pos:end="417:35">

                <expr_stmt pos:start="417:17" pos:end="417:35"><expr pos:start="417:17" pos:end="417:34"><call pos:start="417:17" pos:end="417:34"><name pos:start="417:17" pos:end="417:32">gen_op_mov_CF_T1</name><argument_list pos:start="417:33" pos:end="417:34">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="419:11" pos:end="477:9">else <block pos:start="419:16" pos:end="477:9">{<block_content pos:start="423:13" pos:end="475:13">

            <comment type="block" pos:start="421:13" pos:end="421:26">/* register */</comment>

            <expr_stmt pos:start="423:13" pos:end="423:30"><expr pos:start="423:13" pos:end="423:29"><name pos:start="423:13" pos:end="423:14">rm</name> <operator pos:start="423:16" pos:end="423:16">=</operator> <operator pos:start="423:18" pos:end="423:18">(</operator><name pos:start="423:19" pos:end="423:22">insn</name><operator pos:start="423:23" pos:end="423:23">)</operator> <operator pos:start="423:25" pos:end="423:25">&amp;</operator> <literal type="number" pos:start="423:27" pos:end="423:29">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:35"><expr pos:start="425:13" pos:end="425:34"><call pos:start="425:13" pos:end="425:34"><name pos:start="425:13" pos:end="425:27">gen_movl_T1_reg</name><argument_list pos:start="425:28" pos:end="425:34">(<argument pos:start="425:29" pos:end="425:29"><expr pos:start="425:29" pos:end="425:29"><name pos:start="425:29" pos:end="425:29">s</name></expr></argument>, <argument pos:start="425:32" pos:end="425:33"><expr pos:start="425:32" pos:end="425:33"><name pos:start="425:32" pos:end="425:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:38"><expr pos:start="427:13" pos:end="427:37"><name pos:start="427:13" pos:end="427:19">shiftop</name> <operator pos:start="427:21" pos:end="427:21">=</operator> <operator pos:start="427:23" pos:end="427:23">(</operator><name pos:start="427:24" pos:end="427:27">insn</name> <operator pos:start="427:29" pos:end="427:30">&gt;&gt;</operator> <literal type="number" pos:start="427:32" pos:end="427:32">5</literal><operator pos:start="427:33" pos:end="427:33">)</operator> <operator pos:start="427:35" pos:end="427:35">&amp;</operator> <literal type="number" pos:start="427:37" pos:end="427:37">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="429:13" pos:end="475:13"><if pos:start="429:13" pos:end="459:13">if <condition pos:start="429:16" pos:end="429:35">(<expr pos:start="429:17" pos:end="429:34"><operator pos:start="429:17" pos:end="429:17">!</operator><operator pos:start="429:18" pos:end="429:18">(</operator><name pos:start="429:19" pos:end="429:22">insn</name> <operator pos:start="429:24" pos:end="429:24">&amp;</operator> <operator pos:start="429:26" pos:end="429:26">(</operator><literal type="number" pos:start="429:27" pos:end="429:27">1</literal> <operator pos:start="429:29" pos:end="429:30">&lt;&lt;</operator> <literal type="number" pos:start="429:32" pos:end="429:32">4</literal><operator pos:start="429:33" pos:end="429:33">)</operator><operator pos:start="429:34" pos:end="429:34">)</operator></expr>)</condition> <block pos:start="429:37" pos:end="459:13">{<block_content pos:start="431:17" pos:end="457:17">

                <expr_stmt pos:start="431:17" pos:end="431:43"><expr pos:start="431:17" pos:end="431:42"><name pos:start="431:17" pos:end="431:21">shift</name> <operator pos:start="431:23" pos:end="431:23">=</operator> <operator pos:start="431:25" pos:end="431:25">(</operator><name pos:start="431:26" pos:end="431:29">insn</name> <operator pos:start="431:31" pos:end="431:32">&gt;&gt;</operator> <literal type="number" pos:start="431:34" pos:end="431:34">7</literal><operator pos:start="431:35" pos:end="431:35">)</operator> <operator pos:start="431:37" pos:end="431:37">&amp;</operator> <literal type="number" pos:start="431:39" pos:end="431:42">0x1f</literal></expr>;</expr_stmt>

                <if_stmt pos:start="433:17" pos:end="457:17"><if pos:start="433:17" pos:end="445:17">if <condition pos:start="433:20" pos:end="433:31">(<expr pos:start="433:21" pos:end="433:30"><name pos:start="433:21" pos:end="433:25">shift</name> <operator pos:start="433:27" pos:end="433:28">!=</operator> <literal type="number" pos:start="433:30" pos:end="433:30">0</literal></expr>)</condition> <block pos:start="433:33" pos:end="445:17">{<block_content pos:start="435:21" pos:end="443:21">

                    <if_stmt pos:start="435:21" pos:end="443:21"><if pos:start="435:21" pos:end="439:21">if <condition pos:start="435:24" pos:end="435:33">(<expr pos:start="435:25" pos:end="435:32"><name pos:start="435:25" pos:end="435:32">logic_cc</name></expr>)</condition> <block pos:start="435:35" pos:end="439:21">{<block_content pos:start="437:25" pos:end="437:59">

                        <expr_stmt pos:start="437:25" pos:end="437:59"><expr pos:start="437:25" pos:end="437:58"><name pos:start="437:25" pos:end="437:51"><name pos:start="437:25" pos:end="437:42">gen_shift_T1_im_cc</name><index pos:start="437:43" pos:end="437:51">[<expr pos:start="437:44" pos:end="437:50"><name pos:start="437:44" pos:end="437:50">shiftop</name></expr>]</index></name><operator pos:start="437:52" pos:end="437:52">(</operator><name pos:start="437:53" pos:end="437:57">shift</name><operator pos:start="437:58" pos:end="437:58">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="439:23" pos:end="443:21">else <block pos:start="439:28" pos:end="443:21">{<block_content pos:start="441:25" pos:end="441:56">

                        <expr_stmt pos:start="441:25" pos:end="441:56"><expr pos:start="441:25" pos:end="441:55"><name pos:start="441:25" pos:end="441:48"><name pos:start="441:25" pos:end="441:39">gen_shift_T1_im</name><index pos:start="441:40" pos:end="441:48">[<expr pos:start="441:41" pos:end="441:47"><name pos:start="441:41" pos:end="441:47">shiftop</name></expr>]</index></name><operator pos:start="441:49" pos:end="441:49">(</operator><name pos:start="441:50" pos:end="441:54">shift</name><operator pos:start="441:55" pos:end="441:55">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="445:19" pos:end="457:17">else if <condition pos:start="445:27" pos:end="445:40">(<expr pos:start="445:28" pos:end="445:39"><name pos:start="445:28" pos:end="445:34">shiftop</name> <operator pos:start="445:36" pos:end="445:37">!=</operator> <literal type="number" pos:start="445:39" pos:end="445:39">0</literal></expr>)</condition> <block pos:start="445:42" pos:end="457:17">{<block_content pos:start="447:21" pos:end="455:21">

                    <if_stmt pos:start="447:21" pos:end="455:21"><if pos:start="447:21" pos:end="451:21">if <condition pos:start="447:24" pos:end="447:33">(<expr pos:start="447:25" pos:end="447:32"><name pos:start="447:25" pos:end="447:32">logic_cc</name></expr>)</condition> <block pos:start="447:35" pos:end="451:21">{<block_content pos:start="449:25" pos:end="449:53">

                        <expr_stmt pos:start="449:25" pos:end="449:53"><expr pos:start="449:25" pos:end="449:52"><name pos:start="449:25" pos:end="449:50"><name pos:start="449:25" pos:end="449:41">gen_shift_T1_0_cc</name><index pos:start="449:42" pos:end="449:50">[<expr pos:start="449:43" pos:end="449:49"><name pos:start="449:43" pos:end="449:49">shiftop</name></expr>]</index></name><operator pos:start="449:51" pos:end="449:51">(</operator><operator pos:start="449:52" pos:end="449:52">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="451:23" pos:end="455:21">else <block pos:start="451:28" pos:end="455:21">{<block_content pos:start="453:25" pos:end="453:50">

                        <expr_stmt pos:start="453:25" pos:end="453:50"><expr pos:start="453:25" pos:end="453:49"><name pos:start="453:25" pos:end="453:47"><name pos:start="453:25" pos:end="453:38">gen_shift_T1_0</name><index pos:start="453:39" pos:end="453:47">[<expr pos:start="453:40" pos:end="453:46"><name pos:start="453:40" pos:end="453:46">shiftop</name></expr>]</index></name><operator pos:start="453:48" pos:end="453:48">(</operator><operator pos:start="453:49" pos:end="453:49">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="459:15" pos:end="475:13">else <block pos:start="459:20" pos:end="475:13">{<block_content pos:start="461:17" pos:end="473:17">

                <expr_stmt pos:start="461:17" pos:end="461:39"><expr pos:start="461:17" pos:end="461:38"><name pos:start="461:17" pos:end="461:18">rs</name> <operator pos:start="461:20" pos:end="461:20">=</operator> <operator pos:start="461:22" pos:end="461:22">(</operator><name pos:start="461:23" pos:end="461:26">insn</name> <operator pos:start="461:28" pos:end="461:29">&gt;&gt;</operator> <literal type="number" pos:start="461:31" pos:end="461:31">8</literal><operator pos:start="461:32" pos:end="461:32">)</operator> <operator pos:start="461:34" pos:end="461:34">&amp;</operator> <literal type="number" pos:start="461:36" pos:end="461:38">0xf</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="463:17" pos:end="463:39"><expr pos:start="463:17" pos:end="463:38"><call pos:start="463:17" pos:end="463:38"><name pos:start="463:17" pos:end="463:31">gen_movl_T0_reg</name><argument_list pos:start="463:32" pos:end="463:38">(<argument pos:start="463:33" pos:end="463:33"><expr pos:start="463:33" pos:end="463:33"><name pos:start="463:33" pos:end="463:33">s</name></expr></argument>, <argument pos:start="463:36" pos:end="463:37"><expr pos:start="463:36" pos:end="463:37"><name pos:start="463:36" pos:end="463:37">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="465:17" pos:end="473:17"><if pos:start="465:17" pos:end="469:17">if <condition pos:start="465:20" pos:end="465:29">(<expr pos:start="465:21" pos:end="465:28"><name pos:start="465:21" pos:end="465:28">logic_cc</name></expr>)</condition> <block pos:start="465:31" pos:end="469:17">{<block_content pos:start="467:21" pos:end="467:50">

                    <expr_stmt pos:start="467:21" pos:end="467:50"><expr pos:start="467:21" pos:end="467:49"><name pos:start="467:21" pos:end="467:47"><name pos:start="467:21" pos:end="467:38">gen_shift_T1_T0_cc</name><index pos:start="467:39" pos:end="467:47">[<expr pos:start="467:40" pos:end="467:46"><name pos:start="467:40" pos:end="467:46">shiftop</name></expr>]</index></name><operator pos:start="467:48" pos:end="467:48">(</operator><operator pos:start="467:49" pos:end="467:49">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="469:19" pos:end="473:17">else <block pos:start="469:24" pos:end="473:17">{<block_content pos:start="471:21" pos:end="471:47">

                    <expr_stmt pos:start="471:21" pos:end="471:47"><expr pos:start="471:21" pos:end="471:46"><name pos:start="471:21" pos:end="471:44"><name pos:start="471:21" pos:end="471:35">gen_shift_T1_T0</name><index pos:start="471:36" pos:end="471:44">[<expr pos:start="471:37" pos:end="471:43"><name pos:start="471:37" pos:end="471:43">shiftop</name></expr>]</index></name><operator pos:start="471:45" pos:end="471:45">(</operator><operator pos:start="471:46" pos:end="471:46">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="479:9" pos:end="485:9"><if pos:start="479:9" pos:end="485:9">if <condition pos:start="479:12" pos:end="479:39">(<expr pos:start="479:13" pos:end="479:38"><name pos:start="479:13" pos:end="479:15">op1</name> <operator pos:start="479:17" pos:end="479:18">!=</operator> <literal type="number" pos:start="479:20" pos:end="479:23">0x0f</literal> <operator pos:start="479:25" pos:end="479:26">&amp;&amp;</operator> <name pos:start="479:28" pos:end="479:30">op1</name> <operator pos:start="479:32" pos:end="479:33">!=</operator> <literal type="number" pos:start="479:35" pos:end="479:38">0x0d</literal></expr>)</condition> <block pos:start="479:41" pos:end="485:9">{<block_content pos:start="481:13" pos:end="483:35">

            <expr_stmt pos:start="481:13" pos:end="481:36"><expr pos:start="481:13" pos:end="481:35"><name pos:start="481:13" pos:end="481:14">rn</name> <operator pos:start="481:16" pos:end="481:16">=</operator> <operator pos:start="481:18" pos:end="481:18">(</operator><name pos:start="481:19" pos:end="481:22">insn</name> <operator pos:start="481:24" pos:end="481:25">&gt;&gt;</operator> <literal type="number" pos:start="481:27" pos:end="481:28">16</literal><operator pos:start="481:29" pos:end="481:29">)</operator> <operator pos:start="481:31" pos:end="481:31">&amp;</operator> <literal type="number" pos:start="481:33" pos:end="481:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:35"><expr pos:start="483:13" pos:end="483:34"><call pos:start="483:13" pos:end="483:34"><name pos:start="483:13" pos:end="483:27">gen_movl_T0_reg</name><argument_list pos:start="483:28" pos:end="483:34">(<argument pos:start="483:29" pos:end="483:29"><expr pos:start="483:29" pos:end="483:29"><name pos:start="483:29" pos:end="483:29">s</name></expr></argument>, <argument pos:start="483:32" pos:end="483:33"><expr pos:start="483:32" pos:end="483:33"><name pos:start="483:32" pos:end="483:33">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="487:9" pos:end="487:32"><expr pos:start="487:9" pos:end="487:31"><name pos:start="487:9" pos:end="487:10">rd</name> <operator pos:start="487:12" pos:end="487:12">=</operator> <operator pos:start="487:14" pos:end="487:14">(</operator><name pos:start="487:15" pos:end="487:18">insn</name> <operator pos:start="487:20" pos:end="487:21">&gt;&gt;</operator> <literal type="number" pos:start="487:23" pos:end="487:24">12</literal><operator pos:start="487:25" pos:end="487:25">)</operator> <operator pos:start="487:27" pos:end="487:27">&amp;</operator> <literal type="number" pos:start="487:29" pos:end="487:31">0xf</literal></expr>;</expr_stmt>

        <switch pos:start="489:9" pos:end="723:9">switch<condition pos:start="489:15" pos:end="489:19">(<expr pos:start="489:16" pos:end="489:18"><name pos:start="489:16" pos:end="489:18">op1</name></expr>)</condition> <block pos:start="489:21" pos:end="723:9">{<block_content pos:start="491:9" pos:end="721:18">

        <case pos:start="491:9" pos:end="491:18">case <expr pos:start="491:14" pos:end="491:17"><literal type="number" pos:start="491:14" pos:end="491:17">0x00</literal></expr>:</case>

            <expr_stmt pos:start="493:13" pos:end="493:32"><expr pos:start="493:13" pos:end="493:31"><call pos:start="493:13" pos:end="493:31"><name pos:start="493:13" pos:end="493:29">gen_op_andl_T0_T1</name><argument_list pos:start="493:30" pos:end="493:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:35"><expr pos:start="495:13" pos:end="495:34"><call pos:start="495:13" pos:end="495:34"><name pos:start="495:13" pos:end="495:27">gen_movl_reg_T0</name><argument_list pos:start="495:28" pos:end="495:34">(<argument pos:start="495:29" pos:end="495:29"><expr pos:start="495:29" pos:end="495:29"><name pos:start="495:29" pos:end="495:29">s</name></expr></argument>, <argument pos:start="495:32" pos:end="495:33"><expr pos:start="495:32" pos:end="495:33"><name pos:start="495:32" pos:end="495:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="497:13" pos:end="499:37"><if pos:start="497:13" pos:end="499:37">if <condition pos:start="497:16" pos:end="497:25">(<expr pos:start="497:17" pos:end="497:24"><name pos:start="497:17" pos:end="497:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="499:17" pos:end="499:37"><block_content pos:start="499:17" pos:end="499:37">

                <expr_stmt pos:start="499:17" pos:end="499:37"><expr pos:start="499:17" pos:end="499:36"><call pos:start="499:17" pos:end="499:36"><name pos:start="499:17" pos:end="499:34">gen_op_logic_T0_cc</name><argument_list pos:start="499:35" pos:end="499:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="501:13" pos:end="501:18">break;</break>

        <case pos:start="503:9" pos:end="503:18">case <expr pos:start="503:14" pos:end="503:17"><literal type="number" pos:start="503:14" pos:end="503:17">0x01</literal></expr>:</case>

            <expr_stmt pos:start="505:13" pos:end="505:32"><expr pos:start="505:13" pos:end="505:31"><call pos:start="505:13" pos:end="505:31"><name pos:start="505:13" pos:end="505:29">gen_op_xorl_T0_T1</name><argument_list pos:start="505:30" pos:end="505:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:35"><expr pos:start="507:13" pos:end="507:34"><call pos:start="507:13" pos:end="507:34"><name pos:start="507:13" pos:end="507:27">gen_movl_reg_T0</name><argument_list pos:start="507:28" pos:end="507:34">(<argument pos:start="507:29" pos:end="507:29"><expr pos:start="507:29" pos:end="507:29"><name pos:start="507:29" pos:end="507:29">s</name></expr></argument>, <argument pos:start="507:32" pos:end="507:33"><expr pos:start="507:32" pos:end="507:33"><name pos:start="507:32" pos:end="507:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="509:13" pos:end="511:37"><if pos:start="509:13" pos:end="511:37">if <condition pos:start="509:16" pos:end="509:25">(<expr pos:start="509:17" pos:end="509:24"><name pos:start="509:17" pos:end="509:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="511:17" pos:end="511:37"><block_content pos:start="511:17" pos:end="511:37">

                <expr_stmt pos:start="511:17" pos:end="511:37"><expr pos:start="511:17" pos:end="511:36"><call pos:start="511:17" pos:end="511:36"><name pos:start="511:17" pos:end="511:34">gen_op_logic_T0_cc</name><argument_list pos:start="511:35" pos:end="511:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="513:13" pos:end="513:18">break;</break>

        <case pos:start="515:9" pos:end="515:18">case <expr pos:start="515:14" pos:end="515:17"><literal type="number" pos:start="515:14" pos:end="515:17">0x02</literal></expr>:</case>

            <if_stmt pos:start="517:13" pos:end="541:13"><if pos:start="517:13" pos:end="529:13">if <condition pos:start="517:16" pos:end="517:35">(<expr pos:start="517:17" pos:end="517:34"><name pos:start="517:17" pos:end="517:22">set_cc</name> <operator pos:start="517:24" pos:end="517:25">&amp;&amp;</operator> <name pos:start="517:27" pos:end="517:28">rd</name> <operator pos:start="517:30" pos:end="517:31">==</operator> <literal type="number" pos:start="517:33" pos:end="517:34">15</literal></expr>)</condition> <block pos:start="517:37" pos:end="529:13">{<block_content pos:start="521:17" pos:end="527:40">

                <comment type="block" pos:start="519:17" pos:end="519:66">/* SUBS r15, ... is used for exception return.  */</comment>

                <if_stmt pos:start="521:17" pos:end="523:36"><if pos:start="521:17" pos:end="523:36">if <condition pos:start="521:20" pos:end="521:31">(<expr pos:start="521:21" pos:end="521:30"><call pos:start="521:21" pos:end="521:30"><name pos:start="521:21" pos:end="521:27">IS_USER</name><argument_list pos:start="521:28" pos:end="521:30">(<argument pos:start="521:29" pos:end="521:29"><expr pos:start="521:29" pos:end="521:29"><name pos:start="521:29" pos:end="521:29">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="523:21" pos:end="523:36"><block_content pos:start="523:21" pos:end="523:36">

                    <goto pos:start="523:21" pos:end="523:36">goto <name pos:start="523:26" pos:end="523:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="525:17" pos:end="525:39"><expr pos:start="525:17" pos:end="525:38"><call pos:start="525:17" pos:end="525:38"><name pos:start="525:17" pos:end="525:36">gen_op_subl_T0_T1_cc</name><argument_list pos:start="525:37" pos:end="525:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="527:17" pos:end="527:40"><expr pos:start="527:17" pos:end="527:39"><call pos:start="527:17" pos:end="527:39"><name pos:start="527:17" pos:end="527:36">gen_exception_return</name><argument_list pos:start="527:37" pos:end="527:39">(<argument pos:start="527:38" pos:end="527:38"><expr pos:start="527:38" pos:end="527:38"><name pos:start="527:38" pos:end="527:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="529:15" pos:end="541:13">else <block pos:start="529:20" pos:end="541:13">{<block_content pos:start="531:17" pos:end="539:39">

                <if_stmt pos:start="531:17" pos:end="537:40"><if pos:start="531:17" pos:end="533:43">if <condition pos:start="531:20" pos:end="531:27">(<expr pos:start="531:21" pos:end="531:26"><name pos:start="531:21" pos:end="531:26">set_cc</name></expr>)</condition><block type="pseudo" pos:start="533:21" pos:end="533:43"><block_content pos:start="533:21" pos:end="533:43">

                    <expr_stmt pos:start="533:21" pos:end="533:43"><expr pos:start="533:21" pos:end="533:42"><call pos:start="533:21" pos:end="533:42"><name pos:start="533:21" pos:end="533:40">gen_op_subl_T0_T1_cc</name><argument_list pos:start="533:41" pos:end="533:42">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="535:17" pos:end="537:40">else<block type="pseudo" pos:start="537:21" pos:end="537:40"><block_content pos:start="537:21" pos:end="537:40">

                    <expr_stmt pos:start="537:21" pos:end="537:40"><expr pos:start="537:21" pos:end="537:39"><call pos:start="537:21" pos:end="537:39"><name pos:start="537:21" pos:end="537:37">gen_op_subl_T0_T1</name><argument_list pos:start="537:38" pos:end="537:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="539:17" pos:end="539:39"><expr pos:start="539:17" pos:end="539:38"><call pos:start="539:17" pos:end="539:38"><name pos:start="539:17" pos:end="539:31">gen_movl_reg_T0</name><argument_list pos:start="539:32" pos:end="539:38">(<argument pos:start="539:33" pos:end="539:33"><expr pos:start="539:33" pos:end="539:33"><name pos:start="539:33" pos:end="539:33">s</name></expr></argument>, <argument pos:start="539:36" pos:end="539:37"><expr pos:start="539:36" pos:end="539:37"><name pos:start="539:36" pos:end="539:37">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="543:13" pos:end="543:18">break;</break>

        <case pos:start="545:9" pos:end="545:18">case <expr pos:start="545:14" pos:end="545:17"><literal type="number" pos:start="545:14" pos:end="545:17">0x03</literal></expr>:</case>

            <if_stmt pos:start="547:13" pos:end="553:36"><if pos:start="547:13" pos:end="549:39">if <condition pos:start="547:16" pos:end="547:23">(<expr pos:start="547:17" pos:end="547:22"><name pos:start="547:17" pos:end="547:22">set_cc</name></expr>)</condition><block type="pseudo" pos:start="549:17" pos:end="549:39"><block_content pos:start="549:17" pos:end="549:39">

                <expr_stmt pos:start="549:17" pos:end="549:39"><expr pos:start="549:17" pos:end="549:38"><call pos:start="549:17" pos:end="549:38"><name pos:start="549:17" pos:end="549:36">gen_op_rsbl_T0_T1_cc</name><argument_list pos:start="549:37" pos:end="549:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="551:13" pos:end="553:36">else<block type="pseudo" pos:start="553:17" pos:end="553:36"><block_content pos:start="553:17" pos:end="553:36">

                <expr_stmt pos:start="553:17" pos:end="553:36"><expr pos:start="553:17" pos:end="553:35"><call pos:start="553:17" pos:end="553:35"><name pos:start="553:17" pos:end="553:33">gen_op_rsbl_T0_T1</name><argument_list pos:start="553:34" pos:end="553:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="555:13" pos:end="555:35"><expr pos:start="555:13" pos:end="555:34"><call pos:start="555:13" pos:end="555:34"><name pos:start="555:13" pos:end="555:27">gen_movl_reg_T0</name><argument_list pos:start="555:28" pos:end="555:34">(<argument pos:start="555:29" pos:end="555:29"><expr pos:start="555:29" pos:end="555:29"><name pos:start="555:29" pos:end="555:29">s</name></expr></argument>, <argument pos:start="555:32" pos:end="555:33"><expr pos:start="555:32" pos:end="555:33"><name pos:start="555:32" pos:end="555:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="557:13" pos:end="557:18">break;</break>

        <case pos:start="559:9" pos:end="559:18">case <expr pos:start="559:14" pos:end="559:17"><literal type="number" pos:start="559:14" pos:end="559:17">0x04</literal></expr>:</case>

            <if_stmt pos:start="561:13" pos:end="567:36"><if pos:start="561:13" pos:end="563:39">if <condition pos:start="561:16" pos:end="561:23">(<expr pos:start="561:17" pos:end="561:22"><name pos:start="561:17" pos:end="561:22">set_cc</name></expr>)</condition><block type="pseudo" pos:start="563:17" pos:end="563:39"><block_content pos:start="563:17" pos:end="563:39">

                <expr_stmt pos:start="563:17" pos:end="563:39"><expr pos:start="563:17" pos:end="563:38"><call pos:start="563:17" pos:end="563:38"><name pos:start="563:17" pos:end="563:36">gen_op_addl_T0_T1_cc</name><argument_list pos:start="563:37" pos:end="563:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="565:13" pos:end="567:36">else<block type="pseudo" pos:start="567:17" pos:end="567:36"><block_content pos:start="567:17" pos:end="567:36">

                <expr_stmt pos:start="567:17" pos:end="567:36"><expr pos:start="567:17" pos:end="567:35"><call pos:start="567:17" pos:end="567:35"><name pos:start="567:17" pos:end="567:33">gen_op_addl_T0_T1</name><argument_list pos:start="567:34" pos:end="567:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="569:13" pos:end="569:35"><expr pos:start="569:13" pos:end="569:34"><call pos:start="569:13" pos:end="569:34"><name pos:start="569:13" pos:end="569:27">gen_movl_reg_T0</name><argument_list pos:start="569:28" pos:end="569:34">(<argument pos:start="569:29" pos:end="569:29"><expr pos:start="569:29" pos:end="569:29"><name pos:start="569:29" pos:end="569:29">s</name></expr></argument>, <argument pos:start="569:32" pos:end="569:33"><expr pos:start="569:32" pos:end="569:33"><name pos:start="569:32" pos:end="569:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="571:13" pos:end="571:18">break;</break>

        <case pos:start="573:9" pos:end="573:18">case <expr pos:start="573:14" pos:end="573:17"><literal type="number" pos:start="573:14" pos:end="573:17">0x05</literal></expr>:</case>

            <if_stmt pos:start="575:13" pos:end="581:36"><if pos:start="575:13" pos:end="577:39">if <condition pos:start="575:16" pos:end="575:23">(<expr pos:start="575:17" pos:end="575:22"><name pos:start="575:17" pos:end="575:22">set_cc</name></expr>)</condition><block type="pseudo" pos:start="577:17" pos:end="577:39"><block_content pos:start="577:17" pos:end="577:39">

                <expr_stmt pos:start="577:17" pos:end="577:39"><expr pos:start="577:17" pos:end="577:38"><call pos:start="577:17" pos:end="577:38"><name pos:start="577:17" pos:end="577:36">gen_op_adcl_T0_T1_cc</name><argument_list pos:start="577:37" pos:end="577:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="579:13" pos:end="581:36">else<block type="pseudo" pos:start="581:17" pos:end="581:36"><block_content pos:start="581:17" pos:end="581:36">

                <expr_stmt pos:start="581:17" pos:end="581:36"><expr pos:start="581:17" pos:end="581:35"><call pos:start="581:17" pos:end="581:35"><name pos:start="581:17" pos:end="581:33">gen_op_adcl_T0_T1</name><argument_list pos:start="581:34" pos:end="581:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:35"><expr pos:start="583:13" pos:end="583:34"><call pos:start="583:13" pos:end="583:34"><name pos:start="583:13" pos:end="583:27">gen_movl_reg_T0</name><argument_list pos:start="583:28" pos:end="583:34">(<argument pos:start="583:29" pos:end="583:29"><expr pos:start="583:29" pos:end="583:29"><name pos:start="583:29" pos:end="583:29">s</name></expr></argument>, <argument pos:start="583:32" pos:end="583:33"><expr pos:start="583:32" pos:end="583:33"><name pos:start="583:32" pos:end="583:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="585:13" pos:end="585:18">break;</break>

        <case pos:start="587:9" pos:end="587:18">case <expr pos:start="587:14" pos:end="587:17"><literal type="number" pos:start="587:14" pos:end="587:17">0x06</literal></expr>:</case>

            <if_stmt pos:start="589:13" pos:end="595:36"><if pos:start="589:13" pos:end="591:39">if <condition pos:start="589:16" pos:end="589:23">(<expr pos:start="589:17" pos:end="589:22"><name pos:start="589:17" pos:end="589:22">set_cc</name></expr>)</condition><block type="pseudo" pos:start="591:17" pos:end="591:39"><block_content pos:start="591:17" pos:end="591:39">

                <expr_stmt pos:start="591:17" pos:end="591:39"><expr pos:start="591:17" pos:end="591:38"><call pos:start="591:17" pos:end="591:38"><name pos:start="591:17" pos:end="591:36">gen_op_sbcl_T0_T1_cc</name><argument_list pos:start="591:37" pos:end="591:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="593:13" pos:end="595:36">else<block type="pseudo" pos:start="595:17" pos:end="595:36"><block_content pos:start="595:17" pos:end="595:36">

                <expr_stmt pos:start="595:17" pos:end="595:36"><expr pos:start="595:17" pos:end="595:35"><call pos:start="595:17" pos:end="595:35"><name pos:start="595:17" pos:end="595:33">gen_op_sbcl_T0_T1</name><argument_list pos:start="595:34" pos:end="595:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="597:13" pos:end="597:35"><expr pos:start="597:13" pos:end="597:34"><call pos:start="597:13" pos:end="597:34"><name pos:start="597:13" pos:end="597:27">gen_movl_reg_T0</name><argument_list pos:start="597:28" pos:end="597:34">(<argument pos:start="597:29" pos:end="597:29"><expr pos:start="597:29" pos:end="597:29"><name pos:start="597:29" pos:end="597:29">s</name></expr></argument>, <argument pos:start="597:32" pos:end="597:33"><expr pos:start="597:32" pos:end="597:33"><name pos:start="597:32" pos:end="597:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="599:13" pos:end="599:18">break;</break>

        <case pos:start="601:9" pos:end="601:18">case <expr pos:start="601:14" pos:end="601:17"><literal type="number" pos:start="601:14" pos:end="601:17">0x07</literal></expr>:</case>

            <if_stmt pos:start="603:13" pos:end="609:36"><if pos:start="603:13" pos:end="605:39">if <condition pos:start="603:16" pos:end="603:23">(<expr pos:start="603:17" pos:end="603:22"><name pos:start="603:17" pos:end="603:22">set_cc</name></expr>)</condition><block type="pseudo" pos:start="605:17" pos:end="605:39"><block_content pos:start="605:17" pos:end="605:39">

                <expr_stmt pos:start="605:17" pos:end="605:39"><expr pos:start="605:17" pos:end="605:38"><call pos:start="605:17" pos:end="605:38"><name pos:start="605:17" pos:end="605:36">gen_op_rscl_T0_T1_cc</name><argument_list pos:start="605:37" pos:end="605:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="607:13" pos:end="609:36">else<block type="pseudo" pos:start="609:17" pos:end="609:36"><block_content pos:start="609:17" pos:end="609:36">

                <expr_stmt pos:start="609:17" pos:end="609:36"><expr pos:start="609:17" pos:end="609:35"><call pos:start="609:17" pos:end="609:35"><name pos:start="609:17" pos:end="609:33">gen_op_rscl_T0_T1</name><argument_list pos:start="609:34" pos:end="609:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="611:13" pos:end="611:35"><expr pos:start="611:13" pos:end="611:34"><call pos:start="611:13" pos:end="611:34"><name pos:start="611:13" pos:end="611:27">gen_movl_reg_T0</name><argument_list pos:start="611:28" pos:end="611:34">(<argument pos:start="611:29" pos:end="611:29"><expr pos:start="611:29" pos:end="611:29"><name pos:start="611:29" pos:end="611:29">s</name></expr></argument>, <argument pos:start="611:32" pos:end="611:33"><expr pos:start="611:32" pos:end="611:33"><name pos:start="611:32" pos:end="611:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="613:13" pos:end="613:18">break;</break>

        <case pos:start="615:9" pos:end="615:18">case <expr pos:start="615:14" pos:end="615:17"><literal type="number" pos:start="615:14" pos:end="615:17">0x08</literal></expr>:</case>

            <if_stmt pos:start="617:13" pos:end="623:13"><if pos:start="617:13" pos:end="623:13">if <condition pos:start="617:16" pos:end="617:23">(<expr pos:start="617:17" pos:end="617:22"><name pos:start="617:17" pos:end="617:22">set_cc</name></expr>)</condition> <block pos:start="617:25" pos:end="623:13">{<block_content pos:start="619:17" pos:end="621:37">

                <expr_stmt pos:start="619:17" pos:end="619:36"><expr pos:start="619:17" pos:end="619:35"><call pos:start="619:17" pos:end="619:35"><name pos:start="619:17" pos:end="619:33">gen_op_andl_T0_T1</name><argument_list pos:start="619:34" pos:end="619:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="621:17" pos:end="621:37"><expr pos:start="621:17" pos:end="621:36"><call pos:start="621:17" pos:end="621:36"><name pos:start="621:17" pos:end="621:34">gen_op_logic_T0_cc</name><argument_list pos:start="621:35" pos:end="621:36">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="625:13" pos:end="625:18">break;</break>

        <case pos:start="627:9" pos:end="627:18">case <expr pos:start="627:14" pos:end="627:17"><literal type="number" pos:start="627:14" pos:end="627:17">0x09</literal></expr>:</case>

            <if_stmt pos:start="629:13" pos:end="635:13"><if pos:start="629:13" pos:end="635:13">if <condition pos:start="629:16" pos:end="629:23">(<expr pos:start="629:17" pos:end="629:22"><name pos:start="629:17" pos:end="629:22">set_cc</name></expr>)</condition> <block pos:start="629:25" pos:end="635:13">{<block_content pos:start="631:17" pos:end="633:37">

                <expr_stmt pos:start="631:17" pos:end="631:36"><expr pos:start="631:17" pos:end="631:35"><call pos:start="631:17" pos:end="631:35"><name pos:start="631:17" pos:end="631:33">gen_op_xorl_T0_T1</name><argument_list pos:start="631:34" pos:end="631:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="633:17" pos:end="633:37"><expr pos:start="633:17" pos:end="633:36"><call pos:start="633:17" pos:end="633:36"><name pos:start="633:17" pos:end="633:34">gen_op_logic_T0_cc</name><argument_list pos:start="633:35" pos:end="633:36">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="637:13" pos:end="637:18">break;</break>

        <case pos:start="639:9" pos:end="639:18">case <expr pos:start="639:14" pos:end="639:17"><literal type="number" pos:start="639:14" pos:end="639:17">0x0a</literal></expr>:</case>

            <if_stmt pos:start="641:13" pos:end="645:13"><if pos:start="641:13" pos:end="645:13">if <condition pos:start="641:16" pos:end="641:23">(<expr pos:start="641:17" pos:end="641:22"><name pos:start="641:17" pos:end="641:22">set_cc</name></expr>)</condition> <block pos:start="641:25" pos:end="645:13">{<block_content pos:start="643:17" pos:end="643:39">

                <expr_stmt pos:start="643:17" pos:end="643:39"><expr pos:start="643:17" pos:end="643:38"><call pos:start="643:17" pos:end="643:38"><name pos:start="643:17" pos:end="643:36">gen_op_subl_T0_T1_cc</name><argument_list pos:start="643:37" pos:end="643:38">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="647:13" pos:end="647:18">break;</break>

        <case pos:start="649:9" pos:end="649:18">case <expr pos:start="649:14" pos:end="649:17"><literal type="number" pos:start="649:14" pos:end="649:17">0x0b</literal></expr>:</case>

            <if_stmt pos:start="651:13" pos:end="655:13"><if pos:start="651:13" pos:end="655:13">if <condition pos:start="651:16" pos:end="651:23">(<expr pos:start="651:17" pos:end="651:22"><name pos:start="651:17" pos:end="651:22">set_cc</name></expr>)</condition> <block pos:start="651:25" pos:end="655:13">{<block_content pos:start="653:17" pos:end="653:39">

                <expr_stmt pos:start="653:17" pos:end="653:39"><expr pos:start="653:17" pos:end="653:38"><call pos:start="653:17" pos:end="653:38"><name pos:start="653:17" pos:end="653:36">gen_op_addl_T0_T1_cc</name><argument_list pos:start="653:37" pos:end="653:38">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="657:13" pos:end="657:18">break;</break>

        <case pos:start="659:9" pos:end="659:18">case <expr pos:start="659:14" pos:end="659:17"><literal type="number" pos:start="659:14" pos:end="659:17">0x0c</literal></expr>:</case>

            <expr_stmt pos:start="661:13" pos:end="661:31"><expr pos:start="661:13" pos:end="661:30"><call pos:start="661:13" pos:end="661:30"><name pos:start="661:13" pos:end="661:28">gen_op_orl_T0_T1</name><argument_list pos:start="661:29" pos:end="661:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="663:13" pos:end="663:35"><expr pos:start="663:13" pos:end="663:34"><call pos:start="663:13" pos:end="663:34"><name pos:start="663:13" pos:end="663:27">gen_movl_reg_T0</name><argument_list pos:start="663:28" pos:end="663:34">(<argument pos:start="663:29" pos:end="663:29"><expr pos:start="663:29" pos:end="663:29"><name pos:start="663:29" pos:end="663:29">s</name></expr></argument>, <argument pos:start="663:32" pos:end="663:33"><expr pos:start="663:32" pos:end="663:33"><name pos:start="663:32" pos:end="663:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="665:13" pos:end="667:37"><if pos:start="665:13" pos:end="667:37">if <condition pos:start="665:16" pos:end="665:25">(<expr pos:start="665:17" pos:end="665:24"><name pos:start="665:17" pos:end="665:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="667:17" pos:end="667:37"><block_content pos:start="667:17" pos:end="667:37">

                <expr_stmt pos:start="667:17" pos:end="667:37"><expr pos:start="667:17" pos:end="667:36"><call pos:start="667:17" pos:end="667:36"><name pos:start="667:17" pos:end="667:34">gen_op_logic_T0_cc</name><argument_list pos:start="667:35" pos:end="667:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="669:13" pos:end="669:18">break;</break>

        <case pos:start="671:9" pos:end="671:18">case <expr pos:start="671:14" pos:end="671:17"><literal type="number" pos:start="671:14" pos:end="671:17">0x0d</literal></expr>:</case>

            <if_stmt pos:start="673:13" pos:end="693:13"><if pos:start="673:13" pos:end="685:13">if <condition pos:start="673:16" pos:end="673:37">(<expr pos:start="673:17" pos:end="673:36"><name pos:start="673:17" pos:end="673:24">logic_cc</name> <operator pos:start="673:26" pos:end="673:27">&amp;&amp;</operator> <name pos:start="673:29" pos:end="673:30">rd</name> <operator pos:start="673:32" pos:end="673:33">==</operator> <literal type="number" pos:start="673:35" pos:end="673:36">15</literal></expr>)</condition> <block pos:start="673:39" pos:end="685:13">{<block_content pos:start="677:17" pos:end="683:40">

                <comment type="block" pos:start="675:17" pos:end="675:66">/* MOVS r15, ... is used for exception return.  */</comment>

                <if_stmt pos:start="677:17" pos:end="679:36"><if pos:start="677:17" pos:end="679:36">if <condition pos:start="677:20" pos:end="677:31">(<expr pos:start="677:21" pos:end="677:30"><call pos:start="677:21" pos:end="677:30"><name pos:start="677:21" pos:end="677:27">IS_USER</name><argument_list pos:start="677:28" pos:end="677:30">(<argument pos:start="677:29" pos:end="677:29"><expr pos:start="677:29" pos:end="677:29"><name pos:start="677:29" pos:end="677:29">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="679:21" pos:end="679:36"><block_content pos:start="679:21" pos:end="679:36">

                    <goto pos:start="679:21" pos:end="679:36">goto <name pos:start="679:26" pos:end="679:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="681:17" pos:end="681:36"><expr pos:start="681:17" pos:end="681:35"><call pos:start="681:17" pos:end="681:35"><name pos:start="681:17" pos:end="681:33">gen_op_movl_T0_T1</name><argument_list pos:start="681:34" pos:end="681:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="683:17" pos:end="683:40"><expr pos:start="683:17" pos:end="683:39"><call pos:start="683:17" pos:end="683:39"><name pos:start="683:17" pos:end="683:36">gen_exception_return</name><argument_list pos:start="683:37" pos:end="683:39">(<argument pos:start="683:38" pos:end="683:38"><expr pos:start="683:38" pos:end="683:38"><name pos:start="683:38" pos:end="683:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="685:15" pos:end="693:13">else <block pos:start="685:20" pos:end="693:13">{<block_content pos:start="687:17" pos:end="691:41">

                <expr_stmt pos:start="687:17" pos:end="687:39"><expr pos:start="687:17" pos:end="687:38"><call pos:start="687:17" pos:end="687:38"><name pos:start="687:17" pos:end="687:31">gen_movl_reg_T1</name><argument_list pos:start="687:32" pos:end="687:38">(<argument pos:start="687:33" pos:end="687:33"><expr pos:start="687:33" pos:end="687:33"><name pos:start="687:33" pos:end="687:33">s</name></expr></argument>, <argument pos:start="687:36" pos:end="687:37"><expr pos:start="687:36" pos:end="687:37"><name pos:start="687:36" pos:end="687:37">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="689:17" pos:end="691:41"><if pos:start="689:17" pos:end="691:41">if <condition pos:start="689:20" pos:end="689:29">(<expr pos:start="689:21" pos:end="689:28"><name pos:start="689:21" pos:end="689:28">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="691:21" pos:end="691:41"><block_content pos:start="691:21" pos:end="691:41">

                    <expr_stmt pos:start="691:21" pos:end="691:41"><expr pos:start="691:21" pos:end="691:40"><call pos:start="691:21" pos:end="691:40"><name pos:start="691:21" pos:end="691:38">gen_op_logic_T1_cc</name><argument_list pos:start="691:39" pos:end="691:40">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="695:13" pos:end="695:18">break;</break>

        <case pos:start="697:9" pos:end="697:18">case <expr pos:start="697:14" pos:end="697:17"><literal type="number" pos:start="697:14" pos:end="697:17">0x0e</literal></expr>:</case>

            <expr_stmt pos:start="699:13" pos:end="699:32"><expr pos:start="699:13" pos:end="699:31"><call pos:start="699:13" pos:end="699:31"><name pos:start="699:13" pos:end="699:29">gen_op_bicl_T0_T1</name><argument_list pos:start="699:30" pos:end="699:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:35"><expr pos:start="701:13" pos:end="701:34"><call pos:start="701:13" pos:end="701:34"><name pos:start="701:13" pos:end="701:27">gen_movl_reg_T0</name><argument_list pos:start="701:28" pos:end="701:34">(<argument pos:start="701:29" pos:end="701:29"><expr pos:start="701:29" pos:end="701:29"><name pos:start="701:29" pos:end="701:29">s</name></expr></argument>, <argument pos:start="701:32" pos:end="701:33"><expr pos:start="701:32" pos:end="701:33"><name pos:start="701:32" pos:end="701:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="703:13" pos:end="705:37"><if pos:start="703:13" pos:end="705:37">if <condition pos:start="703:16" pos:end="703:25">(<expr pos:start="703:17" pos:end="703:24"><name pos:start="703:17" pos:end="703:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="705:17" pos:end="705:37"><block_content pos:start="705:17" pos:end="705:37">

                <expr_stmt pos:start="705:17" pos:end="705:37"><expr pos:start="705:17" pos:end="705:36"><call pos:start="705:17" pos:end="705:36"><name pos:start="705:17" pos:end="705:34">gen_op_logic_T0_cc</name><argument_list pos:start="705:35" pos:end="705:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="707:13" pos:end="707:18">break;</break>

        <default pos:start="709:9" pos:end="709:16">default:</default>

        <case pos:start="711:9" pos:end="711:18">case <expr pos:start="711:14" pos:end="711:17"><literal type="number" pos:start="711:14" pos:end="711:17">0x0f</literal></expr>:</case>

            <expr_stmt pos:start="713:13" pos:end="713:29"><expr pos:start="713:13" pos:end="713:28"><call pos:start="713:13" pos:end="713:28"><name pos:start="713:13" pos:end="713:26">gen_op_notl_T1</name><argument_list pos:start="713:27" pos:end="713:28">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="715:13" pos:end="715:35"><expr pos:start="715:13" pos:end="715:34"><call pos:start="715:13" pos:end="715:34"><name pos:start="715:13" pos:end="715:27">gen_movl_reg_T1</name><argument_list pos:start="715:28" pos:end="715:34">(<argument pos:start="715:29" pos:end="715:29"><expr pos:start="715:29" pos:end="715:29"><name pos:start="715:29" pos:end="715:29">s</name></expr></argument>, <argument pos:start="715:32" pos:end="715:33"><expr pos:start="715:32" pos:end="715:33"><name pos:start="715:32" pos:end="715:33">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="717:13" pos:end="719:37"><if pos:start="717:13" pos:end="719:37">if <condition pos:start="717:16" pos:end="717:25">(<expr pos:start="717:17" pos:end="717:24"><name pos:start="717:17" pos:end="717:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="719:17" pos:end="719:37"><block_content pos:start="719:17" pos:end="719:37">

                <expr_stmt pos:start="719:17" pos:end="719:37"><expr pos:start="719:17" pos:end="719:36"><call pos:start="719:17" pos:end="719:36"><name pos:start="719:17" pos:end="719:34">gen_op_logic_T1_cc</name><argument_list pos:start="719:35" pos:end="719:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="721:13" pos:end="721:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="725:7" pos:end="1440:5">else <block pos:start="725:12" pos:end="1440:5">{<block_content pos:start="729:9" pos:end="1438:9">

        <comment type="block" pos:start="727:9" pos:end="727:32">/* other instructions */</comment>

        <expr_stmt pos:start="729:9" pos:end="729:33"><expr pos:start="729:9" pos:end="729:32"><name pos:start="729:9" pos:end="729:11">op1</name> <operator pos:start="729:13" pos:end="729:13">=</operator> <operator pos:start="729:15" pos:end="729:15">(</operator><name pos:start="729:16" pos:end="729:19">insn</name> <operator pos:start="729:21" pos:end="729:22">&gt;&gt;</operator> <literal type="number" pos:start="729:24" pos:end="729:25">24</literal><operator pos:start="729:26" pos:end="729:26">)</operator> <operator pos:start="729:28" pos:end="729:28">&amp;</operator> <literal type="number" pos:start="729:30" pos:end="729:32">0xf</literal></expr>;</expr_stmt>

        <switch pos:start="731:9" pos:end="1438:9">switch<condition pos:start="731:15" pos:end="731:19">(<expr pos:start="731:16" pos:end="731:18"><name pos:start="731:16" pos:end="731:18">op1</name></expr>)</condition> <block pos:start="731:21" pos:end="1438:9">{<block_content pos:start="733:9" pos:end="1436:18">

        <case pos:start="733:9" pos:end="733:17">case <expr pos:start="733:14" pos:end="733:16"><literal type="number" pos:start="733:14" pos:end="733:16">0x0</literal></expr>:</case>

        <case pos:start="735:9" pos:end="735:17">case <expr pos:start="735:14" pos:end="735:16"><literal type="number" pos:start="735:14" pos:end="735:16">0x1</literal></expr>:</case>

            <comment type="block" pos:start="737:13" pos:end="737:47">/* multiplies, extra load/stores */</comment>

            <expr_stmt pos:start="739:13" pos:end="739:33"><expr pos:start="739:13" pos:end="739:32"><name pos:start="739:13" pos:end="739:14">sh</name> <operator pos:start="739:16" pos:end="739:16">=</operator> <operator pos:start="739:18" pos:end="739:18">(</operator><name pos:start="739:19" pos:end="739:22">insn</name> <operator pos:start="739:24" pos:end="739:25">&gt;&gt;</operator> <literal type="number" pos:start="739:27" pos:end="739:27">5</literal><operator pos:start="739:28" pos:end="739:28">)</operator> <operator pos:start="739:30" pos:end="739:30">&amp;</operator> <literal type="number" pos:start="739:32" pos:end="739:32">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="741:13" pos:end="967:13"><if pos:start="741:13" pos:end="857:13">if <condition pos:start="741:16" pos:end="741:24">(<expr pos:start="741:17" pos:end="741:23"><name pos:start="741:17" pos:end="741:18">sh</name> <operator pos:start="741:20" pos:end="741:21">==</operator> <literal type="number" pos:start="741:23" pos:end="741:23">0</literal></expr>)</condition> <block pos:start="741:26" pos:end="857:13">{<block_content pos:start="743:17" pos:end="855:17">

                <if_stmt pos:start="743:17" pos:end="855:17"><if pos:start="743:17" pos:end="817:17">if <condition pos:start="743:20" pos:end="743:31">(<expr pos:start="743:21" pos:end="743:30"><name pos:start="743:21" pos:end="743:23">op1</name> <operator pos:start="743:25" pos:end="743:26">==</operator> <literal type="number" pos:start="743:28" pos:end="743:30">0x0</literal></expr>)</condition> <block pos:start="743:33" pos:end="817:17">{<block_content pos:start="745:21" pos:end="815:21">

                    <expr_stmt pos:start="745:21" pos:end="745:44"><expr pos:start="745:21" pos:end="745:43"><name pos:start="745:21" pos:end="745:22">rd</name> <operator pos:start="745:24" pos:end="745:24">=</operator> <operator pos:start="745:26" pos:end="745:26">(</operator><name pos:start="745:27" pos:end="745:30">insn</name> <operator pos:start="745:32" pos:end="745:33">&gt;&gt;</operator> <literal type="number" pos:start="745:35" pos:end="745:36">16</literal><operator pos:start="745:37" pos:end="745:37">)</operator> <operator pos:start="745:39" pos:end="745:39">&amp;</operator> <literal type="number" pos:start="745:41" pos:end="745:43">0xf</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="747:21" pos:end="747:44"><expr pos:start="747:21" pos:end="747:43"><name pos:start="747:21" pos:end="747:22">rn</name> <operator pos:start="747:24" pos:end="747:24">=</operator> <operator pos:start="747:26" pos:end="747:26">(</operator><name pos:start="747:27" pos:end="747:30">insn</name> <operator pos:start="747:32" pos:end="747:33">&gt;&gt;</operator> <literal type="number" pos:start="747:35" pos:end="747:36">12</literal><operator pos:start="747:37" pos:end="747:37">)</operator> <operator pos:start="747:39" pos:end="747:39">&amp;</operator> <literal type="number" pos:start="747:41" pos:end="747:43">0xf</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="749:21" pos:end="749:43"><expr pos:start="749:21" pos:end="749:42"><name pos:start="749:21" pos:end="749:22">rs</name> <operator pos:start="749:24" pos:end="749:24">=</operator> <operator pos:start="749:26" pos:end="749:26">(</operator><name pos:start="749:27" pos:end="749:30">insn</name> <operator pos:start="749:32" pos:end="749:33">&gt;&gt;</operator> <literal type="number" pos:start="749:35" pos:end="749:35">8</literal><operator pos:start="749:36" pos:end="749:36">)</operator> <operator pos:start="749:38" pos:end="749:38">&amp;</operator> <literal type="number" pos:start="749:40" pos:end="749:42">0xf</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="751:21" pos:end="751:38"><expr pos:start="751:21" pos:end="751:37"><name pos:start="751:21" pos:end="751:22">rm</name> <operator pos:start="751:24" pos:end="751:24">=</operator> <operator pos:start="751:26" pos:end="751:26">(</operator><name pos:start="751:27" pos:end="751:30">insn</name><operator pos:start="751:31" pos:end="751:31">)</operator> <operator pos:start="751:33" pos:end="751:33">&amp;</operator> <literal type="number" pos:start="751:35" pos:end="751:37">0xf</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="753:21" pos:end="815:21"><if pos:start="753:21" pos:end="777:21">if <condition pos:start="753:24" pos:end="753:48">(<expr pos:start="753:25" pos:end="753:47"><operator pos:start="753:25" pos:end="753:25">(</operator><operator pos:start="753:26" pos:end="753:26">(</operator><name pos:start="753:27" pos:end="753:30">insn</name> <operator pos:start="753:32" pos:end="753:33">&gt;&gt;</operator> <literal type="number" pos:start="753:35" pos:end="753:36">22</literal><operator pos:start="753:37" pos:end="753:37">)</operator> <operator pos:start="753:39" pos:end="753:39">&amp;</operator> <literal type="number" pos:start="753:41" pos:end="753:41">3</literal><operator pos:start="753:42" pos:end="753:42">)</operator> <operator pos:start="753:44" pos:end="753:45">==</operator> <literal type="number" pos:start="753:47" pos:end="753:47">0</literal></expr>)</condition> <block pos:start="753:50" pos:end="777:21">{<block_content pos:start="757:25" pos:end="775:47">

                        <comment type="block" pos:start="755:25" pos:end="755:40">/* 32 bit mul */</comment>

                        <expr_stmt pos:start="757:25" pos:end="757:47"><expr pos:start="757:25" pos:end="757:46"><call pos:start="757:25" pos:end="757:46"><name pos:start="757:25" pos:end="757:39">gen_movl_T0_reg</name><argument_list pos:start="757:40" pos:end="757:46">(<argument pos:start="757:41" pos:end="757:41"><expr pos:start="757:41" pos:end="757:41"><name pos:start="757:41" pos:end="757:41">s</name></expr></argument>, <argument pos:start="757:44" pos:end="757:45"><expr pos:start="757:44" pos:end="757:45"><name pos:start="757:44" pos:end="757:45">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="759:25" pos:end="759:47"><expr pos:start="759:25" pos:end="759:46"><call pos:start="759:25" pos:end="759:46"><name pos:start="759:25" pos:end="759:39">gen_movl_T1_reg</name><argument_list pos:start="759:40" pos:end="759:46">(<argument pos:start="759:41" pos:end="759:41"><expr pos:start="759:41" pos:end="759:41"><name pos:start="759:41" pos:end="759:41">s</name></expr></argument>, <argument pos:start="759:44" pos:end="759:45"><expr pos:start="759:44" pos:end="759:45"><name pos:start="759:44" pos:end="759:45">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="761:25" pos:end="761:43"><expr pos:start="761:25" pos:end="761:42"><call pos:start="761:25" pos:end="761:42"><name pos:start="761:25" pos:end="761:40">gen_op_mul_T0_T1</name><argument_list pos:start="761:41" pos:end="761:42">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="763:25" pos:end="769:25"><if pos:start="763:25" pos:end="769:25">if <condition pos:start="763:28" pos:end="763:45">(<expr pos:start="763:29" pos:end="763:44"><name pos:start="763:29" pos:end="763:32">insn</name> <operator pos:start="763:34" pos:end="763:34">&amp;</operator> <operator pos:start="763:36" pos:end="763:36">(</operator><literal type="number" pos:start="763:37" pos:end="763:37">1</literal> <operator pos:start="763:39" pos:end="763:40">&lt;&lt;</operator> <literal type="number" pos:start="763:42" pos:end="763:43">21</literal><operator pos:start="763:44" pos:end="763:44">)</operator></expr>)</condition> <block pos:start="763:47" pos:end="769:25">{<block_content pos:start="765:29" pos:end="767:48">

                            <expr_stmt pos:start="765:29" pos:end="765:51"><expr pos:start="765:29" pos:end="765:50"><call pos:start="765:29" pos:end="765:50"><name pos:start="765:29" pos:end="765:43">gen_movl_T1_reg</name><argument_list pos:start="765:44" pos:end="765:50">(<argument pos:start="765:45" pos:end="765:45"><expr pos:start="765:45" pos:end="765:45"><name pos:start="765:45" pos:end="765:45">s</name></expr></argument>, <argument pos:start="765:48" pos:end="765:49"><expr pos:start="765:48" pos:end="765:49"><name pos:start="765:48" pos:end="765:49">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="767:29" pos:end="767:48"><expr pos:start="767:29" pos:end="767:47"><call pos:start="767:29" pos:end="767:47"><name pos:start="767:29" pos:end="767:45">gen_op_addl_T0_T1</name><argument_list pos:start="767:46" pos:end="767:47">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="771:25" pos:end="773:49"><if pos:start="771:25" pos:end="773:49">if <condition pos:start="771:28" pos:end="771:45">(<expr pos:start="771:29" pos:end="771:44"><name pos:start="771:29" pos:end="771:32">insn</name> <operator pos:start="771:34" pos:end="771:34">&amp;</operator> <operator pos:start="771:36" pos:end="771:36">(</operator><literal type="number" pos:start="771:37" pos:end="771:37">1</literal> <operator pos:start="771:39" pos:end="771:40">&lt;&lt;</operator> <literal type="number" pos:start="771:42" pos:end="771:43">20</literal><operator pos:start="771:44" pos:end="771:44">)</operator></expr>)</condition><block type="pseudo" pos:start="773:29" pos:end="773:49"><block_content pos:start="773:29" pos:end="773:49"> 

                            <expr_stmt pos:start="773:29" pos:end="773:49"><expr pos:start="773:29" pos:end="773:48"><call pos:start="773:29" pos:end="773:48"><name pos:start="773:29" pos:end="773:46">gen_op_logic_T0_cc</name><argument_list pos:start="773:47" pos:end="773:48">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="775:25" pos:end="775:47"><expr pos:start="775:25" pos:end="775:46"><call pos:start="775:25" pos:end="775:46"><name pos:start="775:25" pos:end="775:39">gen_movl_reg_T0</name><argument_list pos:start="775:40" pos:end="775:46">(<argument pos:start="775:41" pos:end="775:41"><expr pos:start="775:41" pos:end="775:41"><name pos:start="775:41" pos:end="775:41">s</name></expr></argument>, <argument pos:start="775:44" pos:end="775:45"><expr pos:start="775:44" pos:end="775:45"><name pos:start="775:44" pos:end="775:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="777:23" pos:end="815:21">else <block pos:start="777:28" pos:end="815:21">{<block_content pos:start="781:25" pos:end="813:47">

                        <comment type="block" pos:start="779:25" pos:end="779:40">/* 64 bit mul */</comment>

                        <expr_stmt pos:start="781:25" pos:end="781:47"><expr pos:start="781:25" pos:end="781:46"><call pos:start="781:25" pos:end="781:46"><name pos:start="781:25" pos:end="781:39">gen_movl_T0_reg</name><argument_list pos:start="781:40" pos:end="781:46">(<argument pos:start="781:41" pos:end="781:41"><expr pos:start="781:41" pos:end="781:41"><name pos:start="781:41" pos:end="781:41">s</name></expr></argument>, <argument pos:start="781:44" pos:end="781:45"><expr pos:start="781:44" pos:end="781:45"><name pos:start="781:44" pos:end="781:45">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="783:25" pos:end="783:47"><expr pos:start="783:25" pos:end="783:46"><call pos:start="783:25" pos:end="783:46"><name pos:start="783:25" pos:end="783:39">gen_movl_T1_reg</name><argument_list pos:start="783:40" pos:end="783:46">(<argument pos:start="783:41" pos:end="783:41"><expr pos:start="783:41" pos:end="783:41"><name pos:start="783:41" pos:end="783:41">s</name></expr></argument>, <argument pos:start="783:44" pos:end="783:45"><expr pos:start="783:44" pos:end="783:45"><name pos:start="783:44" pos:end="783:45">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="785:25" pos:end="791:48"><if pos:start="785:25" pos:end="787:49">if <condition pos:start="785:28" pos:end="785:45">(<expr pos:start="785:29" pos:end="785:44"><name pos:start="785:29" pos:end="785:32">insn</name> <operator pos:start="785:34" pos:end="785:34">&amp;</operator> <operator pos:start="785:36" pos:end="785:36">(</operator><literal type="number" pos:start="785:37" pos:end="785:37">1</literal> <operator pos:start="785:39" pos:end="785:40">&lt;&lt;</operator> <literal type="number" pos:start="785:42" pos:end="785:43">22</literal><operator pos:start="785:44" pos:end="785:44">)</operator></expr>)</condition><block type="pseudo" pos:start="787:29" pos:end="787:49"><block_content pos:start="787:29" pos:end="787:49"> 

                            <expr_stmt pos:start="787:29" pos:end="787:49"><expr pos:start="787:29" pos:end="787:48"><call pos:start="787:29" pos:end="787:48"><name pos:start="787:29" pos:end="787:46">gen_op_imull_T0_T1</name><argument_list pos:start="787:47" pos:end="787:48">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="789:25" pos:end="791:48">else<block type="pseudo" pos:start="791:29" pos:end="791:48"><block_content pos:start="791:29" pos:end="791:48">

                            <expr_stmt pos:start="791:29" pos:end="791:48"><expr pos:start="791:29" pos:end="791:47"><call pos:start="791:29" pos:end="791:47"><name pos:start="791:29" pos:end="791:45">gen_op_mull_T0_T1</name><argument_list pos:start="791:46" pos:end="791:47">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <if_stmt pos:start="793:25" pos:end="795:54"><if pos:start="793:25" pos:end="795:54">if <condition pos:start="793:28" pos:end="793:45">(<expr pos:start="793:29" pos:end="793:44"><name pos:start="793:29" pos:end="793:32">insn</name> <operator pos:start="793:34" pos:end="793:34">&amp;</operator> <operator pos:start="793:36" pos:end="793:36">(</operator><literal type="number" pos:start="793:37" pos:end="793:37">1</literal> <operator pos:start="793:39" pos:end="793:40">&lt;&lt;</operator> <literal type="number" pos:start="793:42" pos:end="793:43">21</literal><operator pos:start="793:44" pos:end="793:44">)</operator></expr>)</condition><block type="pseudo" pos:start="795:29" pos:end="795:54"><block_content pos:start="795:29" pos:end="795:54"> <comment type="block" pos:start="793:47" pos:end="793:67">/* mult accumulate */</comment>

                            <expr_stmt pos:start="795:29" pos:end="795:54"><expr pos:start="795:29" pos:end="795:53"><call pos:start="795:29" pos:end="795:53"><name pos:start="795:29" pos:end="795:45">gen_op_addq_T0_T1</name><argument_list pos:start="795:46" pos:end="795:53">(<argument pos:start="795:47" pos:end="795:48"><expr pos:start="795:47" pos:end="795:48"><name pos:start="795:47" pos:end="795:48">rn</name></expr></argument>, <argument pos:start="795:51" pos:end="795:52"><expr pos:start="795:51" pos:end="795:52"><name pos:start="795:51" pos:end="795:52">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt pos:start="797:25" pos:end="805:25"><if pos:start="797:25" pos:end="805:25">if <condition pos:start="797:28" pos:end="797:48">(<expr pos:start="797:29" pos:end="797:47"><operator pos:start="797:29" pos:end="797:29">!</operator><operator pos:start="797:30" pos:end="797:30">(</operator><name pos:start="797:31" pos:end="797:34">insn</name> <operator pos:start="797:36" pos:end="797:36">&amp;</operator> <operator pos:start="797:38" pos:end="797:38">(</operator><literal type="number" pos:start="797:39" pos:end="797:39">1</literal> <operator pos:start="797:41" pos:end="797:42">&lt;&lt;</operator> <literal type="number" pos:start="797:44" pos:end="797:45">23</literal><operator pos:start="797:46" pos:end="797:46">)</operator><operator pos:start="797:47" pos:end="797:47">)</operator></expr>)</condition> <block pos:start="797:50" pos:end="805:25">{<block_content pos:start="799:29" pos:end="803:53"> <comment type="block" pos:start="797:52" pos:end="797:74">/* double accumulate */</comment>

                            <expr_stmt pos:start="799:29" pos:end="799:36"><expr pos:start="799:29" pos:end="799:35"><call pos:start="799:29" pos:end="799:35"><name pos:start="799:29" pos:end="799:32">ARCH</name><argument_list pos:start="799:33" pos:end="799:35">(<argument pos:start="799:34" pos:end="799:34"><expr pos:start="799:34" pos:end="799:34"><literal type="number" pos:start="799:34" pos:end="799:34">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="801:29" pos:end="801:53"><expr pos:start="801:29" pos:end="801:52"><call pos:start="801:29" pos:end="801:52"><name pos:start="801:29" pos:end="801:48">gen_op_addq_lo_T0_T1</name><argument_list pos:start="801:49" pos:end="801:52">(<argument pos:start="801:50" pos:end="801:51"><expr pos:start="801:50" pos:end="801:51"><name pos:start="801:50" pos:end="801:51">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="803:29" pos:end="803:53"><expr pos:start="803:29" pos:end="803:52"><call pos:start="803:29" pos:end="803:52"><name pos:start="803:29" pos:end="803:48">gen_op_addq_lo_T0_T1</name><argument_list pos:start="803:49" pos:end="803:52">(<argument pos:start="803:50" pos:end="803:51"><expr pos:start="803:50" pos:end="803:51"><name pos:start="803:50" pos:end="803:51">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="807:25" pos:end="809:47"><if pos:start="807:25" pos:end="809:47">if <condition pos:start="807:28" pos:end="807:45">(<expr pos:start="807:29" pos:end="807:44"><name pos:start="807:29" pos:end="807:32">insn</name> <operator pos:start="807:34" pos:end="807:34">&amp;</operator> <operator pos:start="807:36" pos:end="807:36">(</operator><literal type="number" pos:start="807:37" pos:end="807:37">1</literal> <operator pos:start="807:39" pos:end="807:40">&lt;&lt;</operator> <literal type="number" pos:start="807:42" pos:end="807:43">20</literal><operator pos:start="807:44" pos:end="807:44">)</operator></expr>)</condition><block type="pseudo" pos:start="809:29" pos:end="809:47"><block_content pos:start="809:29" pos:end="809:47"> 

                            <expr_stmt pos:start="809:29" pos:end="809:47"><expr pos:start="809:29" pos:end="809:46"><call pos:start="809:29" pos:end="809:46"><name pos:start="809:29" pos:end="809:44">gen_op_logicq_cc</name><argument_list pos:start="809:45" pos:end="809:46">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="811:25" pos:end="811:47"><expr pos:start="811:25" pos:end="811:46"><call pos:start="811:25" pos:end="811:46"><name pos:start="811:25" pos:end="811:39">gen_movl_reg_T0</name><argument_list pos:start="811:40" pos:end="811:46">(<argument pos:start="811:41" pos:end="811:41"><expr pos:start="811:41" pos:end="811:41"><name pos:start="811:41" pos:end="811:41">s</name></expr></argument>, <argument pos:start="811:44" pos:end="811:45"><expr pos:start="811:44" pos:end="811:45"><name pos:start="811:44" pos:end="811:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="813:25" pos:end="813:47"><expr pos:start="813:25" pos:end="813:46"><call pos:start="813:25" pos:end="813:46"><name pos:start="813:25" pos:end="813:39">gen_movl_reg_T1</name><argument_list pos:start="813:40" pos:end="813:46">(<argument pos:start="813:41" pos:end="813:41"><expr pos:start="813:41" pos:end="813:41"><name pos:start="813:41" pos:end="813:41">s</name></expr></argument>, <argument pos:start="813:44" pos:end="813:45"><expr pos:start="813:44" pos:end="813:45"><name pos:start="813:44" pos:end="813:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="817:19" pos:end="855:17">else <block pos:start="817:24" pos:end="855:17">{<block_content pos:start="819:21" pos:end="853:21">

                    <expr_stmt pos:start="819:21" pos:end="819:44"><expr pos:start="819:21" pos:end="819:43"><name pos:start="819:21" pos:end="819:22">rn</name> <operator pos:start="819:24" pos:end="819:24">=</operator> <operator pos:start="819:26" pos:end="819:26">(</operator><name pos:start="819:27" pos:end="819:30">insn</name> <operator pos:start="819:32" pos:end="819:33">&gt;&gt;</operator> <literal type="number" pos:start="819:35" pos:end="819:36">16</literal><operator pos:start="819:37" pos:end="819:37">)</operator> <operator pos:start="819:39" pos:end="819:39">&amp;</operator> <literal type="number" pos:start="819:41" pos:end="819:43">0xf</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="821:21" pos:end="821:44"><expr pos:start="821:21" pos:end="821:43"><name pos:start="821:21" pos:end="821:22">rd</name> <operator pos:start="821:24" pos:end="821:24">=</operator> <operator pos:start="821:26" pos:end="821:26">(</operator><name pos:start="821:27" pos:end="821:30">insn</name> <operator pos:start="821:32" pos:end="821:33">&gt;&gt;</operator> <literal type="number" pos:start="821:35" pos:end="821:36">12</literal><operator pos:start="821:37" pos:end="821:37">)</operator> <operator pos:start="821:39" pos:end="821:39">&amp;</operator> <literal type="number" pos:start="821:41" pos:end="821:43">0xf</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="823:21" pos:end="853:21"><if pos:start="823:21" pos:end="829:21">if <condition pos:start="823:24" pos:end="823:41">(<expr pos:start="823:25" pos:end="823:40"><name pos:start="823:25" pos:end="823:28">insn</name> <operator pos:start="823:30" pos:end="823:30">&amp;</operator> <operator pos:start="823:32" pos:end="823:32">(</operator><literal type="number" pos:start="823:33" pos:end="823:33">1</literal> <operator pos:start="823:35" pos:end="823:36">&lt;&lt;</operator> <literal type="number" pos:start="823:38" pos:end="823:39">23</literal><operator pos:start="823:40" pos:end="823:40">)</operator></expr>)</condition> <block pos:start="823:43" pos:end="829:21">{<block_content pos:start="827:25" pos:end="827:40">

                        <comment type="block" pos:start="825:25" pos:end="825:50">/* load/store exclusive */</comment>

                        <goto pos:start="827:25" pos:end="827:40">goto <name pos:start="827:30" pos:end="827:39">illegal_op</name>;</goto>

                    </block_content>}</block></if> <else pos:start="829:23" pos:end="853:21">else <block pos:start="829:28" pos:end="853:21">{<block_content pos:start="833:25" pos:end="851:47">

                        <comment type="block" pos:start="831:25" pos:end="831:45">/* SWP instruction */</comment>

                        <expr_stmt pos:start="833:25" pos:end="833:42"><expr pos:start="833:25" pos:end="833:41"><name pos:start="833:25" pos:end="833:26">rm</name> <operator pos:start="833:28" pos:end="833:28">=</operator> <operator pos:start="833:30" pos:end="833:30">(</operator><name pos:start="833:31" pos:end="833:34">insn</name><operator pos:start="833:35" pos:end="833:35">)</operator> <operator pos:start="833:37" pos:end="833:37">&amp;</operator> <literal type="number" pos:start="833:39" pos:end="833:41">0xf</literal></expr>;</expr_stmt>

                        

                        <expr_stmt pos:start="837:25" pos:end="837:47"><expr pos:start="837:25" pos:end="837:46"><call pos:start="837:25" pos:end="837:46"><name pos:start="837:25" pos:end="837:39">gen_movl_T0_reg</name><argument_list pos:start="837:40" pos:end="837:46">(<argument pos:start="837:41" pos:end="837:41"><expr pos:start="837:41" pos:end="837:41"><name pos:start="837:41" pos:end="837:41">s</name></expr></argument>, <argument pos:start="837:44" pos:end="837:45"><expr pos:start="837:44" pos:end="837:45"><name pos:start="837:44" pos:end="837:45">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="839:25" pos:end="839:47"><expr pos:start="839:25" pos:end="839:46"><call pos:start="839:25" pos:end="839:46"><name pos:start="839:25" pos:end="839:39">gen_movl_T1_reg</name><argument_list pos:start="839:40" pos:end="839:46">(<argument pos:start="839:41" pos:end="839:41"><expr pos:start="839:41" pos:end="839:41"><name pos:start="839:41" pos:end="839:41">s</name></expr></argument>, <argument pos:start="839:44" pos:end="839:45"><expr pos:start="839:44" pos:end="839:45"><name pos:start="839:44" pos:end="839:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="841:25" pos:end="849:25"><if pos:start="841:25" pos:end="845:25">if <condition pos:start="841:28" pos:end="841:45">(<expr pos:start="841:29" pos:end="841:44"><name pos:start="841:29" pos:end="841:32">insn</name> <operator pos:start="841:34" pos:end="841:34">&amp;</operator> <operator pos:start="841:36" pos:end="841:36">(</operator><literal type="number" pos:start="841:37" pos:end="841:37">1</literal> <operator pos:start="841:39" pos:end="841:40">&lt;&lt;</operator> <literal type="number" pos:start="841:42" pos:end="841:43">22</literal><operator pos:start="841:44" pos:end="841:44">)</operator></expr>)</condition> <block pos:start="841:47" pos:end="845:25">{<block_content pos:start="843:29" pos:end="843:46">

                            <expr_stmt pos:start="843:29" pos:end="843:46"><expr pos:start="843:29" pos:end="843:45"><call pos:start="843:29" pos:end="843:45"><name pos:start="843:29" pos:end="843:36">gen_ldst</name><argument_list pos:start="843:37" pos:end="843:45">(<argument pos:start="843:38" pos:end="843:41"><expr pos:start="843:38" pos:end="843:41"><name pos:start="843:38" pos:end="843:41">swpb</name></expr></argument>, <argument pos:start="843:44" pos:end="843:44"><expr pos:start="843:44" pos:end="843:44"><name pos:start="843:44" pos:end="843:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="845:27" pos:end="849:25">else <block pos:start="845:32" pos:end="849:25">{<block_content pos:start="847:29" pos:end="847:46">

                            <expr_stmt pos:start="847:29" pos:end="847:46"><expr pos:start="847:29" pos:end="847:45"><call pos:start="847:29" pos:end="847:45"><name pos:start="847:29" pos:end="847:36">gen_ldst</name><argument_list pos:start="847:37" pos:end="847:45">(<argument pos:start="847:38" pos:end="847:41"><expr pos:start="847:38" pos:end="847:41"><name pos:start="847:38" pos:end="847:41">swpl</name></expr></argument>, <argument pos:start="847:44" pos:end="847:44"><expr pos:start="847:44" pos:end="847:44"><name pos:start="847:44" pos:end="847:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="851:25" pos:end="851:47"><expr pos:start="851:25" pos:end="851:46"><call pos:start="851:25" pos:end="851:46"><name pos:start="851:25" pos:end="851:39">gen_movl_reg_T0</name><argument_list pos:start="851:40" pos:end="851:46">(<argument pos:start="851:41" pos:end="851:41"><expr pos:start="851:41" pos:end="851:41"><name pos:start="851:41" pos:end="851:41">s</name></expr></argument>, <argument pos:start="851:44" pos:end="851:45"><expr pos:start="851:44" pos:end="851:45"><name pos:start="851:44" pos:end="851:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="857:15" pos:end="967:13">else <block pos:start="857:20" pos:end="967:13">{<block_content pos:start="859:17" pos:end="965:17">

                <decl_stmt pos:start="859:17" pos:end="859:35"><decl pos:start="859:17" pos:end="859:34"><type pos:start="859:17" pos:end="859:19"><name pos:start="859:17" pos:end="859:19">int</name></type> <name pos:start="859:21" pos:end="859:34">address_offset</name></decl>;</decl_stmt>

                <comment type="block" pos:start="861:17" pos:end="861:37">/* Misc load/store */</comment>

                <expr_stmt pos:start="863:17" pos:end="863:40"><expr pos:start="863:17" pos:end="863:39"><name pos:start="863:17" pos:end="863:18">rn</name> <operator pos:start="863:20" pos:end="863:20">=</operator> <operator pos:start="863:22" pos:end="863:22">(</operator><name pos:start="863:23" pos:end="863:26">insn</name> <operator pos:start="863:28" pos:end="863:29">&gt;&gt;</operator> <literal type="number" pos:start="863:31" pos:end="863:32">16</literal><operator pos:start="863:33" pos:end="863:33">)</operator> <operator pos:start="863:35" pos:end="863:35">&amp;</operator> <literal type="number" pos:start="863:37" pos:end="863:39">0xf</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="865:17" pos:end="865:40"><expr pos:start="865:17" pos:end="865:39"><name pos:start="865:17" pos:end="865:18">rd</name> <operator pos:start="865:20" pos:end="865:20">=</operator> <operator pos:start="865:22" pos:end="865:22">(</operator><name pos:start="865:23" pos:end="865:26">insn</name> <operator pos:start="865:28" pos:end="865:29">&gt;&gt;</operator> <literal type="number" pos:start="865:31" pos:end="865:32">12</literal><operator pos:start="865:33" pos:end="865:33">)</operator> <operator pos:start="865:35" pos:end="865:35">&amp;</operator> <literal type="number" pos:start="865:37" pos:end="865:39">0xf</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="867:17" pos:end="867:39"><expr pos:start="867:17" pos:end="867:38"><call pos:start="867:17" pos:end="867:38"><name pos:start="867:17" pos:end="867:31">gen_movl_T1_reg</name><argument_list pos:start="867:32" pos:end="867:38">(<argument pos:start="867:33" pos:end="867:33"><expr pos:start="867:33" pos:end="867:33"><name pos:start="867:33" pos:end="867:33">s</name></expr></argument>, <argument pos:start="867:36" pos:end="867:37"><expr pos:start="867:36" pos:end="867:37"><name pos:start="867:36" pos:end="867:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="869:17" pos:end="871:53"><if pos:start="869:17" pos:end="871:53">if <condition pos:start="869:20" pos:end="869:37">(<expr pos:start="869:21" pos:end="869:36"><name pos:start="869:21" pos:end="869:24">insn</name> <operator pos:start="869:26" pos:end="869:26">&amp;</operator> <operator pos:start="869:28" pos:end="869:28">(</operator><literal type="number" pos:start="869:29" pos:end="869:29">1</literal> <operator pos:start="869:31" pos:end="869:32">&lt;&lt;</operator> <literal type="number" pos:start="869:34" pos:end="869:35">24</literal><operator pos:start="869:36" pos:end="869:36">)</operator></expr>)</condition><block type="pseudo" pos:start="871:21" pos:end="871:53"><block_content pos:start="871:21" pos:end="871:53">

                    <expr_stmt pos:start="871:21" pos:end="871:53"><expr pos:start="871:21" pos:end="871:52"><call pos:start="871:21" pos:end="871:52"><name pos:start="871:21" pos:end="871:40">gen_add_datah_offset</name><argument_list pos:start="871:41" pos:end="871:52">(<argument pos:start="871:42" pos:end="871:42"><expr pos:start="871:42" pos:end="871:42"><name pos:start="871:42" pos:end="871:42">s</name></expr></argument>, <argument pos:start="871:45" pos:end="871:48"><expr pos:start="871:45" pos:end="871:48"><name pos:start="871:45" pos:end="871:48">insn</name></expr></argument>, <argument pos:start="871:51" pos:end="871:51"><expr pos:start="871:51" pos:end="871:51"><literal type="number" pos:start="871:51" pos:end="871:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="873:17" pos:end="873:35"><expr pos:start="873:17" pos:end="873:34"><name pos:start="873:17" pos:end="873:30">address_offset</name> <operator pos:start="873:32" pos:end="873:32">=</operator> <literal type="number" pos:start="873:34" pos:end="873:34">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="875:17" pos:end="949:17"><if pos:start="875:17" pos:end="905:17">if <condition pos:start="875:20" pos:end="875:37">(<expr pos:start="875:21" pos:end="875:36"><name pos:start="875:21" pos:end="875:24">insn</name> <operator pos:start="875:26" pos:end="875:26">&amp;</operator> <operator pos:start="875:28" pos:end="875:28">(</operator><literal type="number" pos:start="875:29" pos:end="875:29">1</literal> <operator pos:start="875:31" pos:end="875:32">&lt;&lt;</operator> <literal type="number" pos:start="875:34" pos:end="875:35">20</literal><operator pos:start="875:36" pos:end="875:36">)</operator></expr>)</condition> <block pos:start="875:39" pos:end="905:17">{<block_content pos:start="879:21" pos:end="903:43">

                    <comment type="block" pos:start="877:21" pos:end="877:30">/* load */</comment>

                    <switch pos:start="879:21" pos:end="901:21">switch<condition pos:start="879:27" pos:end="879:30">(<expr pos:start="879:28" pos:end="879:29"><name pos:start="879:28" pos:end="879:29">sh</name></expr>)</condition> <block pos:start="879:32" pos:end="901:21">{<block_content pos:start="881:21" pos:end="899:30">

                    <case pos:start="881:21" pos:end="881:27">case <expr pos:start="881:26" pos:end="881:26"><literal type="number" pos:start="881:26" pos:end="881:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="883:25" pos:end="883:42"><expr pos:start="883:25" pos:end="883:41"><call pos:start="883:25" pos:end="883:41"><name pos:start="883:25" pos:end="883:32">gen_ldst</name><argument_list pos:start="883:33" pos:end="883:41">(<argument pos:start="883:34" pos:end="883:37"><expr pos:start="883:34" pos:end="883:37"><name pos:start="883:34" pos:end="883:37">lduw</name></expr></argument>, <argument pos:start="883:40" pos:end="883:40"><expr pos:start="883:40" pos:end="883:40"><name pos:start="883:40" pos:end="883:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="885:25" pos:end="885:30">break;</break>

                    <case pos:start="887:21" pos:end="887:27">case <expr pos:start="887:26" pos:end="887:26"><literal type="number" pos:start="887:26" pos:end="887:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="889:25" pos:end="889:42"><expr pos:start="889:25" pos:end="889:41"><call pos:start="889:25" pos:end="889:41"><name pos:start="889:25" pos:end="889:32">gen_ldst</name><argument_list pos:start="889:33" pos:end="889:41">(<argument pos:start="889:34" pos:end="889:37"><expr pos:start="889:34" pos:end="889:37"><name pos:start="889:34" pos:end="889:37">ldsb</name></expr></argument>, <argument pos:start="889:40" pos:end="889:40"><expr pos:start="889:40" pos:end="889:40"><name pos:start="889:40" pos:end="889:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="891:25" pos:end="891:30">break;</break>

                    <default pos:start="893:21" pos:end="893:28">default:</default>

                    <case pos:start="895:21" pos:end="895:27">case <expr pos:start="895:26" pos:end="895:26"><literal type="number" pos:start="895:26" pos:end="895:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="897:25" pos:end="897:42"><expr pos:start="897:25" pos:end="897:41"><call pos:start="897:25" pos:end="897:41"><name pos:start="897:25" pos:end="897:32">gen_ldst</name><argument_list pos:start="897:33" pos:end="897:41">(<argument pos:start="897:34" pos:end="897:37"><expr pos:start="897:34" pos:end="897:37"><name pos:start="897:34" pos:end="897:37">ldsw</name></expr></argument>, <argument pos:start="897:40" pos:end="897:40"><expr pos:start="897:40" pos:end="897:40"><name pos:start="897:40" pos:end="897:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="899:25" pos:end="899:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="903:21" pos:end="903:43"><expr pos:start="903:21" pos:end="903:42"><call pos:start="903:21" pos:end="903:42"><name pos:start="903:21" pos:end="903:35">gen_movl_reg_T0</name><argument_list pos:start="903:36" pos:end="903:42">(<argument pos:start="903:37" pos:end="903:37"><expr pos:start="903:37" pos:end="903:37"><name pos:start="903:37" pos:end="903:37">s</name></expr></argument>, <argument pos:start="903:40" pos:end="903:41"><expr pos:start="903:40" pos:end="903:41"><name pos:start="903:40" pos:end="903:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="905:19" pos:end="941:17">else if <condition pos:start="905:27" pos:end="905:34">(<expr pos:start="905:28" pos:end="905:33"><name pos:start="905:28" pos:end="905:29">sh</name> <operator pos:start="905:31" pos:end="905:31">&amp;</operator> <literal type="number" pos:start="905:33" pos:end="905:33">2</literal></expr>)</condition> <block pos:start="905:36" pos:end="941:17">{<block_content pos:start="909:21" pos:end="939:40">

                    <comment type="block" pos:start="907:21" pos:end="907:36">/* doubleword */</comment>

                    <if_stmt pos:start="909:21" pos:end="937:21"><if pos:start="909:21" pos:end="923:21">if <condition pos:start="909:24" pos:end="909:31">(<expr pos:start="909:25" pos:end="909:30"><name pos:start="909:25" pos:end="909:26">sh</name> <operator pos:start="909:28" pos:end="909:28">&amp;</operator> <literal type="number" pos:start="909:30" pos:end="909:30">1</literal></expr>)</condition> <block pos:start="909:33" pos:end="923:21">{<block_content pos:start="913:25" pos:end="921:41">

                        <comment type="block" pos:start="911:25" pos:end="911:35">/* store */</comment>

                        <expr_stmt pos:start="913:25" pos:end="913:47"><expr pos:start="913:25" pos:end="913:46"><call pos:start="913:25" pos:end="913:46"><name pos:start="913:25" pos:end="913:39">gen_movl_T0_reg</name><argument_list pos:start="913:40" pos:end="913:46">(<argument pos:start="913:41" pos:end="913:41"><expr pos:start="913:41" pos:end="913:41"><name pos:start="913:41" pos:end="913:41">s</name></expr></argument>, <argument pos:start="913:44" pos:end="913:45"><expr pos:start="913:44" pos:end="913:45"><name pos:start="913:44" pos:end="913:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="915:25" pos:end="915:41"><expr pos:start="915:25" pos:end="915:40"><call pos:start="915:25" pos:end="915:40"><name pos:start="915:25" pos:end="915:32">gen_ldst</name><argument_list pos:start="915:33" pos:end="915:40">(<argument pos:start="915:34" pos:end="915:36"><expr pos:start="915:34" pos:end="915:36"><name pos:start="915:34" pos:end="915:36">stl</name></expr></argument>, <argument pos:start="915:39" pos:end="915:39"><expr pos:start="915:39" pos:end="915:39"><name pos:start="915:39" pos:end="915:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="917:25" pos:end="917:45"><expr pos:start="917:25" pos:end="917:44"><call pos:start="917:25" pos:end="917:44"><name pos:start="917:25" pos:end="917:41">gen_op_addl_T1_im</name><argument_list pos:start="917:42" pos:end="917:44">(<argument pos:start="917:43" pos:end="917:43"><expr pos:start="917:43" pos:end="917:43"><literal type="number" pos:start="917:43" pos:end="917:43">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="919:25" pos:end="919:51"><expr pos:start="919:25" pos:end="919:50"><call pos:start="919:25" pos:end="919:50"><name pos:start="919:25" pos:end="919:39">gen_movl_T0_reg</name><argument_list pos:start="919:40" pos:end="919:50">(<argument pos:start="919:41" pos:end="919:41"><expr pos:start="919:41" pos:end="919:41"><name pos:start="919:41" pos:end="919:41">s</name></expr></argument>, <argument pos:start="919:44" pos:end="919:49"><expr pos:start="919:44" pos:end="919:49"><name pos:start="919:44" pos:end="919:45">rd</name> <operator pos:start="919:47" pos:end="919:47">+</operator> <literal type="number" pos:start="919:49" pos:end="919:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="921:25" pos:end="921:41"><expr pos:start="921:25" pos:end="921:40"><call pos:start="921:25" pos:end="921:40"><name pos:start="921:25" pos:end="921:32">gen_ldst</name><argument_list pos:start="921:33" pos:end="921:40">(<argument pos:start="921:34" pos:end="921:36"><expr pos:start="921:34" pos:end="921:36"><name pos:start="921:34" pos:end="921:36">stl</name></expr></argument>, <argument pos:start="921:39" pos:end="921:39"><expr pos:start="921:39" pos:end="921:39"><name pos:start="921:39" pos:end="921:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="923:23" pos:end="937:21">else <block pos:start="923:28" pos:end="937:21">{<block_content pos:start="927:25" pos:end="935:51">

                        <comment type="block" pos:start="925:25" pos:end="925:34">/* load */</comment>

                        <expr_stmt pos:start="927:25" pos:end="927:41"><expr pos:start="927:25" pos:end="927:40"><call pos:start="927:25" pos:end="927:40"><name pos:start="927:25" pos:end="927:32">gen_ldst</name><argument_list pos:start="927:33" pos:end="927:40">(<argument pos:start="927:34" pos:end="927:36"><expr pos:start="927:34" pos:end="927:36"><name pos:start="927:34" pos:end="927:36">ldl</name></expr></argument>, <argument pos:start="927:39" pos:end="927:39"><expr pos:start="927:39" pos:end="927:39"><name pos:start="927:39" pos:end="927:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="929:25" pos:end="929:47"><expr pos:start="929:25" pos:end="929:46"><call pos:start="929:25" pos:end="929:46"><name pos:start="929:25" pos:end="929:39">gen_movl_reg_T0</name><argument_list pos:start="929:40" pos:end="929:46">(<argument pos:start="929:41" pos:end="929:41"><expr pos:start="929:41" pos:end="929:41"><name pos:start="929:41" pos:end="929:41">s</name></expr></argument>, <argument pos:start="929:44" pos:end="929:45"><expr pos:start="929:44" pos:end="929:45"><name pos:start="929:44" pos:end="929:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="931:25" pos:end="931:45"><expr pos:start="931:25" pos:end="931:44"><call pos:start="931:25" pos:end="931:44"><name pos:start="931:25" pos:end="931:41">gen_op_addl_T1_im</name><argument_list pos:start="931:42" pos:end="931:44">(<argument pos:start="931:43" pos:end="931:43"><expr pos:start="931:43" pos:end="931:43"><literal type="number" pos:start="931:43" pos:end="931:43">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="933:25" pos:end="933:41"><expr pos:start="933:25" pos:end="933:40"><call pos:start="933:25" pos:end="933:40"><name pos:start="933:25" pos:end="933:32">gen_ldst</name><argument_list pos:start="933:33" pos:end="933:40">(<argument pos:start="933:34" pos:end="933:36"><expr pos:start="933:34" pos:end="933:36"><name pos:start="933:34" pos:end="933:36">ldl</name></expr></argument>, <argument pos:start="933:39" pos:end="933:39"><expr pos:start="933:39" pos:end="933:39"><name pos:start="933:39" pos:end="933:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="935:25" pos:end="935:51"><expr pos:start="935:25" pos:end="935:50"><call pos:start="935:25" pos:end="935:50"><name pos:start="935:25" pos:end="935:39">gen_movl_reg_T0</name><argument_list pos:start="935:40" pos:end="935:50">(<argument pos:start="935:41" pos:end="935:41"><expr pos:start="935:41" pos:end="935:41"><name pos:start="935:41" pos:end="935:41">s</name></expr></argument>, <argument pos:start="935:44" pos:end="935:49"><expr pos:start="935:44" pos:end="935:49"><name pos:start="935:44" pos:end="935:45">rd</name> <operator pos:start="935:47" pos:end="935:47">+</operator> <literal type="number" pos:start="935:49" pos:end="935:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="939:21" pos:end="939:40"><expr pos:start="939:21" pos:end="939:39"><name pos:start="939:21" pos:end="939:34">address_offset</name> <operator pos:start="939:36" pos:end="939:36">=</operator> <operator pos:start="939:38" pos:end="939:38">-</operator><literal type="number" pos:start="939:39" pos:end="939:39">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="941:19" pos:end="949:17">else <block pos:start="941:24" pos:end="949:17">{<block_content pos:start="945:21" pos:end="947:37">

                    <comment type="block" pos:start="943:21" pos:end="943:31">/* store */</comment>

                    <expr_stmt pos:start="945:21" pos:end="945:43"><expr pos:start="945:21" pos:end="945:42"><call pos:start="945:21" pos:end="945:42"><name pos:start="945:21" pos:end="945:35">gen_movl_T0_reg</name><argument_list pos:start="945:36" pos:end="945:42">(<argument pos:start="945:37" pos:end="945:37"><expr pos:start="945:37" pos:end="945:37"><name pos:start="945:37" pos:end="945:37">s</name></expr></argument>, <argument pos:start="945:40" pos:end="945:41"><expr pos:start="945:40" pos:end="945:41"><name pos:start="945:40" pos:end="945:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="947:21" pos:end="947:37"><expr pos:start="947:21" pos:end="947:36"><call pos:start="947:21" pos:end="947:36"><name pos:start="947:21" pos:end="947:28">gen_ldst</name><argument_list pos:start="947:29" pos:end="947:36">(<argument pos:start="947:30" pos:end="947:32"><expr pos:start="947:30" pos:end="947:32"><name pos:start="947:30" pos:end="947:32">stw</name></expr></argument>, <argument pos:start="947:35" pos:end="947:35"><expr pos:start="947:35" pos:end="947:35"><name pos:start="947:35" pos:end="947:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="951:17" pos:end="965:17"><if pos:start="951:17" pos:end="957:17">if <condition pos:start="951:20" pos:end="951:40">(<expr pos:start="951:21" pos:end="951:39"><operator pos:start="951:21" pos:end="951:21">!</operator><operator pos:start="951:22" pos:end="951:22">(</operator><name pos:start="951:23" pos:end="951:26">insn</name> <operator pos:start="951:28" pos:end="951:28">&amp;</operator> <operator pos:start="951:30" pos:end="951:30">(</operator><literal type="number" pos:start="951:31" pos:end="951:31">1</literal> <operator pos:start="951:33" pos:end="951:34">&lt;&lt;</operator> <literal type="number" pos:start="951:36" pos:end="951:37">24</literal><operator pos:start="951:38" pos:end="951:38">)</operator><operator pos:start="951:39" pos:end="951:39">)</operator></expr>)</condition> <block pos:start="951:42" pos:end="957:17">{<block_content pos:start="953:21" pos:end="955:43">

                    <expr_stmt pos:start="953:21" pos:end="953:66"><expr pos:start="953:21" pos:end="953:65"><call pos:start="953:21" pos:end="953:65"><name pos:start="953:21" pos:end="953:40">gen_add_datah_offset</name><argument_list pos:start="953:41" pos:end="953:65">(<argument pos:start="953:42" pos:end="953:42"><expr pos:start="953:42" pos:end="953:42"><name pos:start="953:42" pos:end="953:42">s</name></expr></argument>, <argument pos:start="953:45" pos:end="953:48"><expr pos:start="953:45" pos:end="953:48"><name pos:start="953:45" pos:end="953:48">insn</name></expr></argument>, <argument pos:start="953:51" pos:end="953:64"><expr pos:start="953:51" pos:end="953:64"><name pos:start="953:51" pos:end="953:64">address_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="955:21" pos:end="955:43"><expr pos:start="955:21" pos:end="955:42"><call pos:start="955:21" pos:end="955:42"><name pos:start="955:21" pos:end="955:35">gen_movl_reg_T1</name><argument_list pos:start="955:36" pos:end="955:42">(<argument pos:start="955:37" pos:end="955:37"><expr pos:start="955:37" pos:end="955:37"><name pos:start="955:37" pos:end="955:37">s</name></expr></argument>, <argument pos:start="955:40" pos:end="955:41"><expr pos:start="955:40" pos:end="955:41"><name pos:start="955:40" pos:end="955:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="957:19" pos:end="965:17">else if <condition pos:start="957:27" pos:end="957:44">(<expr pos:start="957:28" pos:end="957:43"><name pos:start="957:28" pos:end="957:31">insn</name> <operator pos:start="957:33" pos:end="957:33">&amp;</operator> <operator pos:start="957:35" pos:end="957:35">(</operator><literal type="number" pos:start="957:36" pos:end="957:36">1</literal> <operator pos:start="957:38" pos:end="957:39">&lt;&lt;</operator> <literal type="number" pos:start="957:41" pos:end="957:42">21</literal><operator pos:start="957:43" pos:end="957:43">)</operator></expr>)</condition> <block pos:start="957:46" pos:end="965:17">{<block_content pos:start="959:21" pos:end="963:43">

                    <if_stmt pos:start="959:21" pos:end="961:58"><if pos:start="959:21" pos:end="961:58">if <condition pos:start="959:24" pos:end="959:39">(<expr pos:start="959:25" pos:end="959:38"><name pos:start="959:25" pos:end="959:38">address_offset</name></expr>)</condition><block type="pseudo" pos:start="961:25" pos:end="961:58"><block_content pos:start="961:25" pos:end="961:58">

                        <expr_stmt pos:start="961:25" pos:end="961:58"><expr pos:start="961:25" pos:end="961:57"><call pos:start="961:25" pos:end="961:57"><name pos:start="961:25" pos:end="961:41">gen_op_addl_T1_im</name><argument_list pos:start="961:42" pos:end="961:57">(<argument pos:start="961:43" pos:end="961:56"><expr pos:start="961:43" pos:end="961:56"><name pos:start="961:43" pos:end="961:56">address_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="963:21" pos:end="963:43"><expr pos:start="963:21" pos:end="963:42"><call pos:start="963:21" pos:end="963:42"><name pos:start="963:21" pos:end="963:35">gen_movl_reg_T1</name><argument_list pos:start="963:36" pos:end="963:42">(<argument pos:start="963:37" pos:end="963:37"><expr pos:start="963:37" pos:end="963:37"><name pos:start="963:37" pos:end="963:37">s</name></expr></argument>, <argument pos:start="963:40" pos:end="963:41"><expr pos:start="963:40" pos:end="963:41"><name pos:start="963:40" pos:end="963:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="969:13" pos:end="969:18">break;</break>

        <case pos:start="971:9" pos:end="971:17">case <expr pos:start="971:14" pos:end="971:16"><literal type="number" pos:start="971:14" pos:end="971:16">0x4</literal></expr>:</case>

        <case pos:start="973:9" pos:end="973:17">case <expr pos:start="973:14" pos:end="973:16"><literal type="number" pos:start="973:14" pos:end="973:16">0x5</literal></expr>:</case>

        <case pos:start="975:9" pos:end="975:17">case <expr pos:start="975:14" pos:end="975:16"><literal type="number" pos:start="975:14" pos:end="975:16">0x6</literal></expr>:</case>

        <case pos:start="977:9" pos:end="977:17">case <expr pos:start="977:14" pos:end="977:16"><literal type="number" pos:start="977:14" pos:end="977:16">0x7</literal></expr>:</case>

            <comment type="block" pos:start="979:13" pos:end="985:15">/* Check for undefined extension instructions

             * per the ARM Bible IE:

             * xxxx 0111 1111 xxxx  xxxx xxxx 1111 xxxx

             */</comment>

            <expr_stmt pos:start="987:13" pos:end="987:42"><expr pos:start="987:13" pos:end="987:41"><name pos:start="987:13" pos:end="987:14">sh</name> <operator pos:start="987:16" pos:end="987:16">=</operator> <operator pos:start="987:18" pos:end="987:18">(</operator><literal type="number" pos:start="987:19" pos:end="987:21">0xf</literal> <operator pos:start="987:23" pos:end="987:24">&lt;&lt;</operator> <literal type="number" pos:start="987:26" pos:end="987:27">20</literal><operator pos:start="987:28" pos:end="987:28">)</operator> <operator pos:start="987:30" pos:end="987:30">|</operator> <operator pos:start="987:32" pos:end="987:32">(</operator><literal type="number" pos:start="987:33" pos:end="987:35">0xf</literal> <operator pos:start="987:37" pos:end="987:38">&lt;&lt;</operator> <literal type="number" pos:start="987:40" pos:end="987:40">4</literal><operator pos:start="987:41" pos:end="987:41">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="989:13" pos:end="995:13"><if pos:start="989:13" pos:end="995:13">if <condition pos:start="989:16" pos:end="989:50">(<expr pos:start="989:17" pos:end="989:49"><name pos:start="989:17" pos:end="989:19">op1</name> <operator pos:start="989:21" pos:end="989:22">==</operator> <literal type="number" pos:start="989:24" pos:end="989:26">0x7</literal> <operator pos:start="989:28" pos:end="989:29">&amp;&amp;</operator> <operator pos:start="989:31" pos:end="989:31">(</operator><operator pos:start="989:32" pos:end="989:32">(</operator><name pos:start="989:33" pos:end="989:36">insn</name> <operator pos:start="989:38" pos:end="989:38">&amp;</operator> <name pos:start="989:40" pos:end="989:41">sh</name><operator pos:start="989:42" pos:end="989:42">)</operator> <operator pos:start="989:44" pos:end="989:45">==</operator> <name pos:start="989:47" pos:end="989:48">sh</name><operator pos:start="989:49" pos:end="989:49">)</operator></expr>)</condition>

            <block pos:start="991:13" pos:end="995:13">{<block_content pos:start="993:17" pos:end="993:32">

                <goto pos:start="993:17" pos:end="993:32">goto <name pos:start="993:22" pos:end="993:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="997:13" pos:end="997:38">/* load/store byte/word */</comment>

            <expr_stmt pos:start="999:13" pos:end="999:36"><expr pos:start="999:13" pos:end="999:35"><name pos:start="999:13" pos:end="999:14">rn</name> <operator pos:start="999:16" pos:end="999:16">=</operator> <operator pos:start="999:18" pos:end="999:18">(</operator><name pos:start="999:19" pos:end="999:22">insn</name> <operator pos:start="999:24" pos:end="999:25">&gt;&gt;</operator> <literal type="number" pos:start="999:27" pos:end="999:28">16</literal><operator pos:start="999:29" pos:end="999:29">)</operator> <operator pos:start="999:31" pos:end="999:31">&amp;</operator> <literal type="number" pos:start="999:33" pos:end="999:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1001:13" pos:end="1001:36"><expr pos:start="1001:13" pos:end="1001:35"><name pos:start="1001:13" pos:end="1001:14">rd</name> <operator pos:start="1001:16" pos:end="1001:16">=</operator> <operator pos:start="1001:18" pos:end="1001:18">(</operator><name pos:start="1001:19" pos:end="1001:22">insn</name> <operator pos:start="1001:24" pos:end="1001:25">&gt;&gt;</operator> <literal type="number" pos:start="1001:27" pos:end="1001:28">12</literal><operator pos:start="1001:29" pos:end="1001:29">)</operator> <operator pos:start="1001:31" pos:end="1001:31">&amp;</operator> <literal type="number" pos:start="1001:33" pos:end="1001:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1003:13" pos:end="1003:35"><expr pos:start="1003:13" pos:end="1003:34"><call pos:start="1003:13" pos:end="1003:34"><name pos:start="1003:13" pos:end="1003:27">gen_movl_T1_reg</name><argument_list pos:start="1003:28" pos:end="1003:34">(<argument pos:start="1003:29" pos:end="1003:29"><expr pos:start="1003:29" pos:end="1003:29"><name pos:start="1003:29" pos:end="1003:29">s</name></expr></argument>, <argument pos:start="1003:32" pos:end="1003:33"><expr pos:start="1003:32" pos:end="1003:33"><name pos:start="1003:32" pos:end="1003:33">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:66"><expr pos:start="1005:13" pos:end="1005:65"><name pos:start="1005:13" pos:end="1005:13">i</name> <operator pos:start="1005:15" pos:end="1005:15">=</operator> <operator pos:start="1005:17" pos:end="1005:17">(</operator><call pos:start="1005:18" pos:end="1005:27"><name pos:start="1005:18" pos:end="1005:24">IS_USER</name><argument_list pos:start="1005:25" pos:end="1005:27">(<argument pos:start="1005:26" pos:end="1005:26"><expr pos:start="1005:26" pos:end="1005:26"><name pos:start="1005:26" pos:end="1005:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="1005:29" pos:end="1005:30">||</operator> <operator pos:start="1005:32" pos:end="1005:32">(</operator><name pos:start="1005:33" pos:end="1005:36">insn</name> <operator pos:start="1005:38" pos:end="1005:38">&amp;</operator> <literal type="number" pos:start="1005:40" pos:end="1005:49">0x01200000</literal><operator pos:start="1005:50" pos:end="1005:50">)</operator> <operator pos:start="1005:52" pos:end="1005:53">==</operator> <literal type="number" pos:start="1005:55" pos:end="1005:64">0x00200000</literal><operator pos:start="1005:65" pos:end="1005:65">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1007:13" pos:end="1009:45"><if pos:start="1007:13" pos:end="1009:45">if <condition pos:start="1007:16" pos:end="1007:33">(<expr pos:start="1007:17" pos:end="1007:32"><name pos:start="1007:17" pos:end="1007:20">insn</name> <operator pos:start="1007:22" pos:end="1007:22">&amp;</operator> <operator pos:start="1007:24" pos:end="1007:24">(</operator><literal type="number" pos:start="1007:25" pos:end="1007:25">1</literal> <operator pos:start="1007:27" pos:end="1007:28">&lt;&lt;</operator> <literal type="number" pos:start="1007:30" pos:end="1007:31">24</literal><operator pos:start="1007:32" pos:end="1007:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1009:17" pos:end="1009:45"><block_content pos:start="1009:17" pos:end="1009:45">

                <expr_stmt pos:start="1009:17" pos:end="1009:45"><expr pos:start="1009:17" pos:end="1009:44"><call pos:start="1009:17" pos:end="1009:44"><name pos:start="1009:17" pos:end="1009:35">gen_add_data_offset</name><argument_list pos:start="1009:36" pos:end="1009:44">(<argument pos:start="1009:37" pos:end="1009:37"><expr pos:start="1009:37" pos:end="1009:37"><name pos:start="1009:37" pos:end="1009:37">s</name></expr></argument>, <argument pos:start="1009:40" pos:end="1009:43"><expr pos:start="1009:40" pos:end="1009:43"><name pos:start="1009:40" pos:end="1009:43">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="1011:13" pos:end="1102:13"><if pos:start="1011:13" pos:end="1060:13">if <condition pos:start="1011:16" pos:end="1011:33">(<expr pos:start="1011:17" pos:end="1011:32"><name pos:start="1011:17" pos:end="1011:20">insn</name> <operator pos:start="1011:22" pos:end="1011:22">&amp;</operator> <operator pos:start="1011:24" pos:end="1011:24">(</operator><literal type="number" pos:start="1011:25" pos:end="1011:25">1</literal> <operator pos:start="1011:27" pos:end="1011:28">&lt;&lt;</operator> <literal type="number" pos:start="1011:30" pos:end="1011:31">20</literal><operator pos:start="1011:32" pos:end="1011:32">)</operator></expr>)</condition> <block pos:start="1011:35" pos:end="1060:13">{<block_content pos:start="1018:17" pos:end="1058:43">

                <comment type="block" pos:start="1013:17" pos:end="1013:26">/* load */</comment>


<cpp:if pos:start="1016:1" pos:end="1016:29">#<cpp:directive pos:start="1016:2" pos:end="1016:3">if</cpp:directive> <expr pos:start="1016:5" pos:end="1016:29"><call pos:start="1016:5" pos:end="1016:29"><name pos:start="1016:5" pos:end="1016:11">defined</name><argument_list pos:start="1016:12" pos:end="1016:29">(<argument pos:start="1016:13" pos:end="1016:28"><expr pos:start="1016:13" pos:end="1016:28"><name pos:start="1016:13" pos:end="1016:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="1018:17" pos:end="1027:0"><if pos:start="1018:17" pos:end="1020:38">if <condition pos:start="1018:20" pos:end="1018:37">(<expr pos:start="1018:21" pos:end="1018:36"><name pos:start="1018:21" pos:end="1018:24">insn</name> <operator pos:start="1018:26" pos:end="1018:26">&amp;</operator> <operator pos:start="1018:28" pos:end="1018:28">(</operator><literal type="number" pos:start="1018:29" pos:end="1018:29">1</literal> <operator pos:start="1018:31" pos:end="1018:32">&lt;&lt;</operator> <literal type="number" pos:start="1018:34" pos:end="1018:35">22</literal><operator pos:start="1018:36" pos:end="1018:36">)</operator></expr>)</condition><block type="pseudo" pos:start="1020:21" pos:end="1020:38"><block_content pos:start="1020:21" pos:end="1020:38">

                    <expr_stmt pos:start="1020:21" pos:end="1020:38"><expr pos:start="1020:21" pos:end="1020:37"><call pos:start="1020:21" pos:end="1020:37"><name pos:start="1020:21" pos:end="1020:35">gen_op_ldub_raw</name><argument_list pos:start="1020:36" pos:end="1020:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1022:17" pos:end="1027:0">else<block type="pseudo" pos:start="1024:21" pos:end="1027:0"><block_content pos:start="1024:21" pos:end="1027:0">

                    <expr_stmt pos:start="1024:21" pos:end="1027:0"><expr pos:start="1024:21" pos:end="1024:36"><call pos:start="1024:21" pos:end="1024:36"><name pos:start="1024:21" pos:end="1024:34">gen_op_ldl_raw</name><argument_list pos:start="1024:35" pos:end="1024:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else pos:start="1026:1" pos:end="1026:5">#<cpp:directive pos:start="1026:2" pos:end="1026:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="1028:17" pos:end="1051:0"><if pos:start="1028:17" pos:end="1038:17">if <condition pos:start="1028:20" pos:end="1028:37">(<expr pos:start="1028:21" pos:end="1028:36"><name pos:start="1028:21" pos:end="1028:24">insn</name> <operator pos:start="1028:26" pos:end="1028:26">&amp;</operator> <operator pos:start="1028:28" pos:end="1028:28">(</operator><literal type="number" pos:start="1028:29" pos:end="1028:29">1</literal> <operator pos:start="1028:31" pos:end="1028:32">&lt;&lt;</operator> <literal type="number" pos:start="1028:34" pos:end="1028:35">22</literal><operator pos:start="1028:36" pos:end="1028:36">)</operator></expr>)</condition> <block pos:start="1028:39" pos:end="1038:17">{<block_content pos:start="1030:21" pos:end="1036:45">

                    <if_stmt pos:start="1030:21" pos:end="1036:45"><if pos:start="1030:21" pos:end="1032:43">if <condition pos:start="1030:24" pos:end="1030:26">(<expr pos:start="1030:25" pos:end="1030:25"><name pos:start="1030:25" pos:end="1030:25">i</name></expr>)</condition><block type="pseudo" pos:start="1032:25" pos:end="1032:43"><block_content pos:start="1032:25" pos:end="1032:43">

                        <expr_stmt pos:start="1032:25" pos:end="1032:43"><expr pos:start="1032:25" pos:end="1032:42"><call pos:start="1032:25" pos:end="1032:42"><name pos:start="1032:25" pos:end="1032:40">gen_op_ldub_user</name><argument_list pos:start="1032:41" pos:end="1032:42">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1034:21" pos:end="1036:45">else<block type="pseudo" pos:start="1036:25" pos:end="1036:45"><block_content pos:start="1036:25" pos:end="1036:45">

                        <expr_stmt pos:start="1036:25" pos:end="1036:45"><expr pos:start="1036:25" pos:end="1036:44"><call pos:start="1036:25" pos:end="1036:44"><name pos:start="1036:25" pos:end="1036:42">gen_op_ldub_kernel</name><argument_list pos:start="1036:43" pos:end="1036:44">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1038:19" pos:end="1051:0">else <block pos:start="1038:24" pos:end="1051:0">{<block_content pos:start="1040:21" pos:end="1046:44">

                    <if_stmt pos:start="1040:21" pos:end="1046:44"><if pos:start="1040:21" pos:end="1042:42">if <condition pos:start="1040:24" pos:end="1040:26">(<expr pos:start="1040:25" pos:end="1040:25"><name pos:start="1040:25" pos:end="1040:25">i</name></expr>)</condition><block type="pseudo" pos:start="1042:25" pos:end="1042:42"><block_content pos:start="1042:25" pos:end="1042:42">

                        <expr_stmt pos:start="1042:25" pos:end="1042:42"><expr pos:start="1042:25" pos:end="1042:41"><call pos:start="1042:25" pos:end="1042:41"><name pos:start="1042:25" pos:end="1042:39">gen_op_ldl_user</name><argument_list pos:start="1042:40" pos:end="1042:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1044:21" pos:end="1046:44">else<block type="pseudo" pos:start="1046:25" pos:end="1046:44"><block_content pos:start="1046:25" pos:end="1046:44">

                        <expr_stmt pos:start="1046:25" pos:end="1046:44"><expr pos:start="1046:25" pos:end="1046:43"><call pos:start="1046:25" pos:end="1046:43"><name pos:start="1046:25" pos:end="1046:41">gen_op_ldl_kernel</name><argument_list pos:start="1046:42" pos:end="1046:43">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="1050:1" pos:end="1050:6">#<cpp:directive pos:start="1050:2" pos:end="1050:6">endif</cpp:directive></cpp:endif>

                <if_stmt pos:start="1052:17" pos:end="1058:43"><if pos:start="1052:17" pos:end="1054:30">if <condition pos:start="1052:20" pos:end="1052:29">(<expr pos:start="1052:21" pos:end="1052:28"><name pos:start="1052:21" pos:end="1052:22">rd</name> <operator pos:start="1052:24" pos:end="1052:25">==</operator> <literal type="number" pos:start="1052:27" pos:end="1052:28">15</literal></expr>)</condition><block type="pseudo" pos:start="1054:21" pos:end="1054:30"><block_content pos:start="1054:21" pos:end="1054:30">

                    <expr_stmt pos:start="1054:21" pos:end="1054:30"><expr pos:start="1054:21" pos:end="1054:29"><call pos:start="1054:21" pos:end="1054:29"><name pos:start="1054:21" pos:end="1054:26">gen_bx</name><argument_list pos:start="1054:27" pos:end="1054:29">(<argument pos:start="1054:28" pos:end="1054:28"><expr pos:start="1054:28" pos:end="1054:28"><name pos:start="1054:28" pos:end="1054:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1056:17" pos:end="1058:43">else<block type="pseudo" pos:start="1058:21" pos:end="1058:43"><block_content pos:start="1058:21" pos:end="1058:43">

                    <expr_stmt pos:start="1058:21" pos:end="1058:43"><expr pos:start="1058:21" pos:end="1058:42"><call pos:start="1058:21" pos:end="1058:42"><name pos:start="1058:21" pos:end="1058:35">gen_movl_reg_T0</name><argument_list pos:start="1058:36" pos:end="1058:42">(<argument pos:start="1058:37" pos:end="1058:37"><expr pos:start="1058:37" pos:end="1058:37"><name pos:start="1058:37" pos:end="1058:37">s</name></expr></argument>, <argument pos:start="1058:40" pos:end="1058:41"><expr pos:start="1058:40" pos:end="1058:41"><name pos:start="1058:40" pos:end="1058:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1060:15" pos:end="1102:13">else <block pos:start="1060:20" pos:end="1102:13">{<block_content pos:start="1064:17" pos:end="1101:0">

                <comment type="block" pos:start="1062:17" pos:end="1062:27">/* store */</comment>

                <expr_stmt pos:start="1064:17" pos:end="1067:0"><expr pos:start="1064:17" pos:end="1064:38"><call pos:start="1064:17" pos:end="1064:38"><name pos:start="1064:17" pos:end="1064:31">gen_movl_T0_reg</name><argument_list pos:start="1064:32" pos:end="1064:38">(<argument pos:start="1064:33" pos:end="1064:33"><expr pos:start="1064:33" pos:end="1064:33"><name pos:start="1064:33" pos:end="1064:33">s</name></expr></argument>, <argument pos:start="1064:36" pos:end="1064:37"><expr pos:start="1064:36" pos:end="1064:37"><name pos:start="1064:36" pos:end="1064:37">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="1066:1" pos:end="1066:29">#<cpp:directive pos:start="1066:2" pos:end="1066:3">if</cpp:directive> <expr pos:start="1066:5" pos:end="1066:29"><call pos:start="1066:5" pos:end="1066:29"><name pos:start="1066:5" pos:end="1066:11">defined</name><argument_list pos:start="1066:12" pos:end="1066:29">(<argument pos:start="1066:13" pos:end="1066:28"><expr pos:start="1066:13" pos:end="1066:28"><name pos:start="1066:13" pos:end="1066:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="1068:17" pos:end="1077:0"><if pos:start="1068:17" pos:end="1070:37">if <condition pos:start="1068:20" pos:end="1068:37">(<expr pos:start="1068:21" pos:end="1068:36"><name pos:start="1068:21" pos:end="1068:24">insn</name> <operator pos:start="1068:26" pos:end="1068:26">&amp;</operator> <operator pos:start="1068:28" pos:end="1068:28">(</operator><literal type="number" pos:start="1068:29" pos:end="1068:29">1</literal> <operator pos:start="1068:31" pos:end="1068:32">&lt;&lt;</operator> <literal type="number" pos:start="1068:34" pos:end="1068:35">22</literal><operator pos:start="1068:36" pos:end="1068:36">)</operator></expr>)</condition><block type="pseudo" pos:start="1070:21" pos:end="1070:37"><block_content pos:start="1070:21" pos:end="1070:37">

                    <expr_stmt pos:start="1070:21" pos:end="1070:37"><expr pos:start="1070:21" pos:end="1070:36"><call pos:start="1070:21" pos:end="1070:36"><name pos:start="1070:21" pos:end="1070:34">gen_op_stb_raw</name><argument_list pos:start="1070:35" pos:end="1070:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1072:17" pos:end="1077:0">else<block type="pseudo" pos:start="1074:21" pos:end="1077:0"><block_content pos:start="1074:21" pos:end="1077:0">

                    <expr_stmt pos:start="1074:21" pos:end="1077:0"><expr pos:start="1074:21" pos:end="1074:36"><call pos:start="1074:21" pos:end="1074:36"><name pos:start="1074:21" pos:end="1074:34">gen_op_stl_raw</name><argument_list pos:start="1074:35" pos:end="1074:36">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else pos:start="1076:1" pos:end="1076:5">#<cpp:directive pos:start="1076:2" pos:end="1076:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="1078:17" pos:end="1101:0"><if pos:start="1078:17" pos:end="1088:17">if <condition pos:start="1078:20" pos:end="1078:37">(<expr pos:start="1078:21" pos:end="1078:36"><name pos:start="1078:21" pos:end="1078:24">insn</name> <operator pos:start="1078:26" pos:end="1078:26">&amp;</operator> <operator pos:start="1078:28" pos:end="1078:28">(</operator><literal type="number" pos:start="1078:29" pos:end="1078:29">1</literal> <operator pos:start="1078:31" pos:end="1078:32">&lt;&lt;</operator> <literal type="number" pos:start="1078:34" pos:end="1078:35">22</literal><operator pos:start="1078:36" pos:end="1078:36">)</operator></expr>)</condition> <block pos:start="1078:39" pos:end="1088:17">{<block_content pos:start="1080:21" pos:end="1086:44">

                    <if_stmt pos:start="1080:21" pos:end="1086:44"><if pos:start="1080:21" pos:end="1082:42">if <condition pos:start="1080:24" pos:end="1080:26">(<expr pos:start="1080:25" pos:end="1080:25"><name pos:start="1080:25" pos:end="1080:25">i</name></expr>)</condition><block type="pseudo" pos:start="1082:25" pos:end="1082:42"><block_content pos:start="1082:25" pos:end="1082:42">

                        <expr_stmt pos:start="1082:25" pos:end="1082:42"><expr pos:start="1082:25" pos:end="1082:41"><call pos:start="1082:25" pos:end="1082:41"><name pos:start="1082:25" pos:end="1082:39">gen_op_stb_user</name><argument_list pos:start="1082:40" pos:end="1082:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1084:21" pos:end="1086:44">else<block type="pseudo" pos:start="1086:25" pos:end="1086:44"><block_content pos:start="1086:25" pos:end="1086:44">

                        <expr_stmt pos:start="1086:25" pos:end="1086:44"><expr pos:start="1086:25" pos:end="1086:43"><call pos:start="1086:25" pos:end="1086:43"><name pos:start="1086:25" pos:end="1086:41">gen_op_stb_kernel</name><argument_list pos:start="1086:42" pos:end="1086:43">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1088:19" pos:end="1101:0">else <block pos:start="1088:24" pos:end="1101:0">{<block_content pos:start="1090:21" pos:end="1096:44">

                    <if_stmt pos:start="1090:21" pos:end="1096:44"><if pos:start="1090:21" pos:end="1092:42">if <condition pos:start="1090:24" pos:end="1090:26">(<expr pos:start="1090:25" pos:end="1090:25"><name pos:start="1090:25" pos:end="1090:25">i</name></expr>)</condition><block type="pseudo" pos:start="1092:25" pos:end="1092:42"><block_content pos:start="1092:25" pos:end="1092:42">

                        <expr_stmt pos:start="1092:25" pos:end="1092:42"><expr pos:start="1092:25" pos:end="1092:41"><call pos:start="1092:25" pos:end="1092:41"><name pos:start="1092:25" pos:end="1092:39">gen_op_stl_user</name><argument_list pos:start="1092:40" pos:end="1092:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1094:21" pos:end="1096:44">else<block type="pseudo" pos:start="1096:25" pos:end="1096:44"><block_content pos:start="1096:25" pos:end="1096:44">

                        <expr_stmt pos:start="1096:25" pos:end="1096:44"><expr pos:start="1096:25" pos:end="1096:43"><call pos:start="1096:25" pos:end="1096:43"><name pos:start="1096:25" pos:end="1096:41">gen_op_stl_kernel</name><argument_list pos:start="1096:42" pos:end="1096:43">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="1100:1" pos:end="1100:6">#<cpp:directive pos:start="1100:2" pos:end="1100:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1104:13" pos:end="1112:39"><if pos:start="1104:13" pos:end="1110:13">if <condition pos:start="1104:16" pos:end="1104:36">(<expr pos:start="1104:17" pos:end="1104:35"><operator pos:start="1104:17" pos:end="1104:17">!</operator><operator pos:start="1104:18" pos:end="1104:18">(</operator><name pos:start="1104:19" pos:end="1104:22">insn</name> <operator pos:start="1104:24" pos:end="1104:24">&amp;</operator> <operator pos:start="1104:26" pos:end="1104:26">(</operator><literal type="number" pos:start="1104:27" pos:end="1104:27">1</literal> <operator pos:start="1104:29" pos:end="1104:30">&lt;&lt;</operator> <literal type="number" pos:start="1104:32" pos:end="1104:33">24</literal><operator pos:start="1104:34" pos:end="1104:34">)</operator><operator pos:start="1104:35" pos:end="1104:35">)</operator></expr>)</condition> <block pos:start="1104:38" pos:end="1110:13">{<block_content pos:start="1106:17" pos:end="1108:39">

                <expr_stmt pos:start="1106:17" pos:end="1106:45"><expr pos:start="1106:17" pos:end="1106:44"><call pos:start="1106:17" pos:end="1106:44"><name pos:start="1106:17" pos:end="1106:35">gen_add_data_offset</name><argument_list pos:start="1106:36" pos:end="1106:44">(<argument pos:start="1106:37" pos:end="1106:37"><expr pos:start="1106:37" pos:end="1106:37"><name pos:start="1106:37" pos:end="1106:37">s</name></expr></argument>, <argument pos:start="1106:40" pos:end="1106:43"><expr pos:start="1106:40" pos:end="1106:43"><name pos:start="1106:40" pos:end="1106:43">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1108:17" pos:end="1108:39"><expr pos:start="1108:17" pos:end="1108:38"><call pos:start="1108:17" pos:end="1108:38"><name pos:start="1108:17" pos:end="1108:31">gen_movl_reg_T1</name><argument_list pos:start="1108:32" pos:end="1108:38">(<argument pos:start="1108:33" pos:end="1108:33"><expr pos:start="1108:33" pos:end="1108:33"><name pos:start="1108:33" pos:end="1108:33">s</name></expr></argument>, <argument pos:start="1108:36" pos:end="1108:37"><expr pos:start="1108:36" pos:end="1108:37"><name pos:start="1108:36" pos:end="1108:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1110:15" pos:end="1112:39">else if <condition pos:start="1110:23" pos:end="1110:40">(<expr pos:start="1110:24" pos:end="1110:39"><name pos:start="1110:24" pos:end="1110:27">insn</name> <operator pos:start="1110:29" pos:end="1110:29">&amp;</operator> <operator pos:start="1110:31" pos:end="1110:31">(</operator><literal type="number" pos:start="1110:32" pos:end="1110:32">1</literal> <operator pos:start="1110:34" pos:end="1110:35">&lt;&lt;</operator> <literal type="number" pos:start="1110:37" pos:end="1110:38">21</literal><operator pos:start="1110:39" pos:end="1110:39">)</operator></expr>)</condition><block type="pseudo" pos:start="1112:17" pos:end="1112:39"><block_content pos:start="1112:17" pos:end="1112:39">

                <expr_stmt pos:start="1112:17" pos:end="1112:39"><expr pos:start="1112:17" pos:end="1112:38"><call pos:start="1112:17" pos:end="1112:38"><name pos:start="1112:17" pos:end="1112:31">gen_movl_reg_T1</name><argument_list pos:start="1112:32" pos:end="1112:38">(<argument pos:start="1112:33" pos:end="1112:33"><expr pos:start="1112:33" pos:end="1112:33"><name pos:start="1112:33" pos:end="1112:33">s</name></expr></argument>, <argument pos:start="1112:36" pos:end="1112:37"><expr pos:start="1112:36" pos:end="1112:37"><name pos:start="1112:36" pos:end="1112:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <block pos:start="1112:41" pos:end="1114:13">{<block_content>

            </block_content>}</block>

            <break pos:start="1116:13" pos:end="1116:18">break;</break>

        <case pos:start="1118:9" pos:end="1118:18">case <expr pos:start="1118:14" pos:end="1118:17"><literal type="number" pos:start="1118:14" pos:end="1118:17">0x08</literal></expr>:</case>

        <case pos:start="1120:9" pos:end="1120:18">case <expr pos:start="1120:14" pos:end="1120:17"><literal type="number" pos:start="1120:14" pos:end="1120:17">0x09</literal></expr>:</case>

            <block pos:start="1122:13" pos:end="1334:13">{<block_content pos:start="1124:17" pos:end="1332:17">

                <decl_stmt pos:start="1124:17" pos:end="1124:44"><decl pos:start="1124:17" pos:end="1124:21"><type pos:start="1124:17" pos:end="1124:19"><name pos:start="1124:17" pos:end="1124:19">int</name></type> <name pos:start="1124:21" pos:end="1124:21">j</name></decl>, <decl pos:start="1124:24" pos:end="1124:24"><type ref="prev" pos:start="1124:17" pos:end="1124:19"/><name pos:start="1124:24" pos:end="1124:24">n</name></decl>, <decl pos:start="1124:27" pos:end="1124:30"><type ref="prev" pos:start="1124:17" pos:end="1124:19"/><name pos:start="1124:27" pos:end="1124:30">user</name></decl>, <decl pos:start="1124:33" pos:end="1124:43"><type ref="prev" pos:start="1124:17" pos:end="1124:19"/><name pos:start="1124:33" pos:end="1124:43">loaded_base</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1126:17" pos:end="1126:47">/* load/store multiple words */</comment>

                <comment type="block" pos:start="1128:17" pos:end="1128:59">/* XXX: store correct base if write back */</comment>

                <expr_stmt pos:start="1130:17" pos:end="1130:25"><expr pos:start="1130:17" pos:end="1130:24"><name pos:start="1130:17" pos:end="1130:20">user</name> <operator pos:start="1130:22" pos:end="1130:22">=</operator> <literal type="number" pos:start="1130:24" pos:end="1130:24">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1132:17" pos:end="1144:17"><if pos:start="1132:17" pos:end="1144:17">if <condition pos:start="1132:20" pos:end="1132:37">(<expr pos:start="1132:21" pos:end="1132:36"><name pos:start="1132:21" pos:end="1132:24">insn</name> <operator pos:start="1132:26" pos:end="1132:26">&amp;</operator> <operator pos:start="1132:28" pos:end="1132:28">(</operator><literal type="number" pos:start="1132:29" pos:end="1132:29">1</literal> <operator pos:start="1132:31" pos:end="1132:32">&lt;&lt;</operator> <literal type="number" pos:start="1132:34" pos:end="1132:35">22</literal><operator pos:start="1132:36" pos:end="1132:36">)</operator></expr>)</condition> <block pos:start="1132:39" pos:end="1144:17">{<block_content pos:start="1134:21" pos:end="1142:33">

                    <if_stmt pos:start="1134:21" pos:end="1136:40"><if pos:start="1134:21" pos:end="1136:40">if <condition pos:start="1134:24" pos:end="1134:35">(<expr pos:start="1134:25" pos:end="1134:34"><call pos:start="1134:25" pos:end="1134:34"><name pos:start="1134:25" pos:end="1134:31">IS_USER</name><argument_list pos:start="1134:32" pos:end="1134:34">(<argument pos:start="1134:33" pos:end="1134:33"><expr pos:start="1134:33" pos:end="1134:33"><name pos:start="1134:33" pos:end="1134:33">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1136:25" pos:end="1136:40"><block_content pos:start="1136:25" pos:end="1136:40">

                        <goto pos:start="1136:25" pos:end="1136:40">goto <name pos:start="1136:30" pos:end="1136:39">illegal_op</name>;</goto></block_content></block></if></if_stmt> <comment type="block" pos:start="1136:42" pos:end="1136:77">/* only usable in supervisor mode */</comment>



                    <if_stmt pos:start="1140:21" pos:end="1142:33"><if pos:start="1140:21" pos:end="1142:33">if <condition pos:start="1140:24" pos:end="1140:48">(<expr pos:start="1140:25" pos:end="1140:47"><operator pos:start="1140:25" pos:end="1140:25">(</operator><name pos:start="1140:26" pos:end="1140:29">insn</name> <operator pos:start="1140:31" pos:end="1140:31">&amp;</operator> <operator pos:start="1140:33" pos:end="1140:33">(</operator><literal type="number" pos:start="1140:34" pos:end="1140:34">1</literal> <operator pos:start="1140:36" pos:end="1140:37">&lt;&lt;</operator> <literal type="number" pos:start="1140:39" pos:end="1140:40">15</literal><operator pos:start="1140:41" pos:end="1140:41">)</operator><operator pos:start="1140:42" pos:end="1140:42">)</operator> <operator pos:start="1140:44" pos:end="1140:45">==</operator> <literal type="number" pos:start="1140:47" pos:end="1140:47">0</literal></expr>)</condition><block type="pseudo" pos:start="1142:25" pos:end="1142:33"><block_content pos:start="1142:25" pos:end="1142:33">

                        <expr_stmt pos:start="1142:25" pos:end="1142:33"><expr pos:start="1142:25" pos:end="1142:32"><name pos:start="1142:25" pos:end="1142:28">user</name> <operator pos:start="1142:30" pos:end="1142:30">=</operator> <literal type="number" pos:start="1142:32" pos:end="1142:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1146:17" pos:end="1146:40"><expr pos:start="1146:17" pos:end="1146:39"><name pos:start="1146:17" pos:end="1146:18">rn</name> <operator pos:start="1146:20" pos:end="1146:20">=</operator> <operator pos:start="1146:22" pos:end="1146:22">(</operator><name pos:start="1146:23" pos:end="1146:26">insn</name> <operator pos:start="1146:28" pos:end="1146:29">&gt;&gt;</operator> <literal type="number" pos:start="1146:31" pos:end="1146:32">16</literal><operator pos:start="1146:33" pos:end="1146:33">)</operator> <operator pos:start="1146:35" pos:end="1146:35">&amp;</operator> <literal type="number" pos:start="1146:37" pos:end="1146:39">0xf</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1148:17" pos:end="1148:39"><expr pos:start="1148:17" pos:end="1148:38"><call pos:start="1148:17" pos:end="1148:38"><name pos:start="1148:17" pos:end="1148:31">gen_movl_T1_reg</name><argument_list pos:start="1148:32" pos:end="1148:38">(<argument pos:start="1148:33" pos:end="1148:33"><expr pos:start="1148:33" pos:end="1148:33"><name pos:start="1148:33" pos:end="1148:33">s</name></expr></argument>, <argument pos:start="1148:36" pos:end="1148:37"><expr pos:start="1148:36" pos:end="1148:37"><name pos:start="1148:36" pos:end="1148:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                

                <comment type="block" pos:start="1152:17" pos:end="1152:40">/* compute total size */</comment>

                <expr_stmt pos:start="1154:17" pos:end="1154:32"><expr pos:start="1154:17" pos:end="1154:31"><name pos:start="1154:17" pos:end="1154:27">loaded_base</name> <operator pos:start="1154:29" pos:end="1154:29">=</operator> <literal type="number" pos:start="1154:31" pos:end="1154:31">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1156:17" pos:end="1156:22"><expr pos:start="1156:17" pos:end="1156:21"><name pos:start="1156:17" pos:end="1156:17">n</name> <operator pos:start="1156:19" pos:end="1156:19">=</operator> <literal type="number" pos:start="1156:21" pos:end="1156:21">0</literal></expr>;</expr_stmt>

                <for pos:start="1158:17" pos:end="1164:17">for<control pos:start="1158:20" pos:end="1158:33">(<init pos:start="1158:21" pos:end="1158:24"><expr pos:start="1158:21" pos:end="1158:23"><name pos:start="1158:21" pos:end="1158:21">i</name><operator pos:start="1158:22" pos:end="1158:22">=</operator><literal type="number" pos:start="1158:23" pos:end="1158:23">0</literal></expr>;</init><condition pos:start="1158:25" pos:end="1158:29"><expr pos:start="1158:25" pos:end="1158:28"><name pos:start="1158:25" pos:end="1158:25">i</name><operator pos:start="1158:26" pos:end="1158:26">&lt;</operator><literal type="number" pos:start="1158:27" pos:end="1158:28">16</literal></expr>;</condition><incr pos:start="1158:30" pos:end="1158:32"><expr pos:start="1158:30" pos:end="1158:32"><name pos:start="1158:30" pos:end="1158:30">i</name><operator pos:start="1158:31" pos:end="1158:32">++</operator></expr></incr>)</control> <block pos:start="1158:35" pos:end="1164:17">{<block_content pos:start="1160:21" pos:end="1162:28">

                    <if_stmt pos:start="1160:21" pos:end="1162:28"><if pos:start="1160:21" pos:end="1162:28">if <condition pos:start="1160:24" pos:end="1160:40">(<expr pos:start="1160:25" pos:end="1160:39"><name pos:start="1160:25" pos:end="1160:28">insn</name> <operator pos:start="1160:30" pos:end="1160:30">&amp;</operator> <operator pos:start="1160:32" pos:end="1160:32">(</operator><literal type="number" pos:start="1160:33" pos:end="1160:33">1</literal> <operator pos:start="1160:35" pos:end="1160:36">&lt;&lt;</operator> <name pos:start="1160:38" pos:end="1160:38">i</name><operator pos:start="1160:39" pos:end="1160:39">)</operator></expr>)</condition><block type="pseudo" pos:start="1162:25" pos:end="1162:28"><block_content pos:start="1162:25" pos:end="1162:28">

                        <expr_stmt pos:start="1162:25" pos:end="1162:28"><expr pos:start="1162:25" pos:end="1162:27"><name pos:start="1162:25" pos:end="1162:25">n</name><operator pos:start="1162:26" pos:end="1162:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <comment type="block" pos:start="1166:17" pos:end="1166:53">/* XXX: test invalid n == 0 case ? */</comment>

                <if_stmt pos:start="1168:17" pos:end="1200:17"><if pos:start="1168:17" pos:end="1182:17">if <condition pos:start="1168:20" pos:end="1168:37">(<expr pos:start="1168:21" pos:end="1168:36"><name pos:start="1168:21" pos:end="1168:24">insn</name> <operator pos:start="1168:26" pos:end="1168:26">&amp;</operator> <operator pos:start="1168:28" pos:end="1168:28">(</operator><literal type="number" pos:start="1168:29" pos:end="1168:29">1</literal> <operator pos:start="1168:31" pos:end="1168:32">&lt;&lt;</operator> <literal type="number" pos:start="1168:34" pos:end="1168:35">23</literal><operator pos:start="1168:36" pos:end="1168:36">)</operator></expr>)</condition> <block pos:start="1168:39" pos:end="1182:17">{<block_content pos:start="1170:21" pos:end="1180:21">

                    <if_stmt pos:start="1170:21" pos:end="1180:21"><if pos:start="1170:21" pos:end="1176:21">if <condition pos:start="1170:24" pos:end="1170:41">(<expr pos:start="1170:25" pos:end="1170:40"><name pos:start="1170:25" pos:end="1170:28">insn</name> <operator pos:start="1170:30" pos:end="1170:30">&amp;</operator> <operator pos:start="1170:32" pos:end="1170:32">(</operator><literal type="number" pos:start="1170:33" pos:end="1170:33">1</literal> <operator pos:start="1170:35" pos:end="1170:36">&lt;&lt;</operator> <literal type="number" pos:start="1170:38" pos:end="1170:39">24</literal><operator pos:start="1170:40" pos:end="1170:40">)</operator></expr>)</condition> <block pos:start="1170:43" pos:end="1176:21">{<block_content pos:start="1174:25" pos:end="1174:45">

                        <comment type="block" pos:start="1172:25" pos:end="1172:43">/* pre increment */</comment>

                        <expr_stmt pos:start="1174:25" pos:end="1174:45"><expr pos:start="1174:25" pos:end="1174:44"><call pos:start="1174:25" pos:end="1174:44"><name pos:start="1174:25" pos:end="1174:41">gen_op_addl_T1_im</name><argument_list pos:start="1174:42" pos:end="1174:44">(<argument pos:start="1174:43" pos:end="1174:43"><expr pos:start="1174:43" pos:end="1174:43"><literal type="number" pos:start="1174:43" pos:end="1174:43">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1176:23" pos:end="1180:21">else <block pos:start="1176:28" pos:end="1180:21">{<block_content>

                        <comment type="block" pos:start="1178:25" pos:end="1178:44">/* post increment */</comment>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1182:19" pos:end="1200:17">else <block pos:start="1182:24" pos:end="1200:17">{<block_content pos:start="1184:21" pos:end="1198:21">

                    <if_stmt pos:start="1184:21" pos:end="1198:21"><if pos:start="1184:21" pos:end="1190:21">if <condition pos:start="1184:24" pos:end="1184:41">(<expr pos:start="1184:25" pos:end="1184:40"><name pos:start="1184:25" pos:end="1184:28">insn</name> <operator pos:start="1184:30" pos:end="1184:30">&amp;</operator> <operator pos:start="1184:32" pos:end="1184:32">(</operator><literal type="number" pos:start="1184:33" pos:end="1184:33">1</literal> <operator pos:start="1184:35" pos:end="1184:36">&lt;&lt;</operator> <literal type="number" pos:start="1184:38" pos:end="1184:39">24</literal><operator pos:start="1184:40" pos:end="1184:40">)</operator></expr>)</condition> <block pos:start="1184:43" pos:end="1190:21">{<block_content pos:start="1188:25" pos:end="1188:52">

                        <comment type="block" pos:start="1186:25" pos:end="1186:43">/* pre decrement */</comment>

                        <expr_stmt pos:start="1188:25" pos:end="1188:52"><expr pos:start="1188:25" pos:end="1188:51"><call pos:start="1188:25" pos:end="1188:51"><name pos:start="1188:25" pos:end="1188:41">gen_op_addl_T1_im</name><argument_list pos:start="1188:42" pos:end="1188:51">(<argument pos:start="1188:43" pos:end="1188:50"><expr pos:start="1188:43" pos:end="1188:50"><operator pos:start="1188:43" pos:end="1188:43">-</operator><operator pos:start="1188:44" pos:end="1188:44">(</operator><name pos:start="1188:45" pos:end="1188:45">n</name> <operator pos:start="1188:47" pos:end="1188:47">*</operator> <literal type="number" pos:start="1188:49" pos:end="1188:49">4</literal><operator pos:start="1188:50" pos:end="1188:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1190:23" pos:end="1198:21">else <block pos:start="1190:28" pos:end="1198:21">{<block_content pos:start="1194:25" pos:end="1196:62">

                        <comment type="block" pos:start="1192:25" pos:end="1192:44">/* post decrement */</comment>

                        <if_stmt pos:start="1194:25" pos:end="1196:62"><if pos:start="1194:25" pos:end="1196:62">if <condition pos:start="1194:28" pos:end="1194:35">(<expr pos:start="1194:29" pos:end="1194:34"><name pos:start="1194:29" pos:end="1194:29">n</name> <operator pos:start="1194:31" pos:end="1194:32">!=</operator> <literal type="number" pos:start="1194:34" pos:end="1194:34">1</literal></expr>)</condition><block type="pseudo" pos:start="1196:29" pos:end="1196:62"><block_content pos:start="1196:29" pos:end="1196:62">

                            <expr_stmt pos:start="1196:29" pos:end="1196:62"><expr pos:start="1196:29" pos:end="1196:61"><call pos:start="1196:29" pos:end="1196:61"><name pos:start="1196:29" pos:end="1196:45">gen_op_addl_T1_im</name><argument_list pos:start="1196:46" pos:end="1196:61">(<argument pos:start="1196:47" pos:end="1196:60"><expr pos:start="1196:47" pos:end="1196:60"><operator pos:start="1196:47" pos:end="1196:47">-</operator><operator pos:start="1196:48" pos:end="1196:48">(</operator><operator pos:start="1196:49" pos:end="1196:49">(</operator><name pos:start="1196:50" pos:end="1196:50">n</name> <operator pos:start="1196:52" pos:end="1196:52">-</operator> <literal type="number" pos:start="1196:54" pos:end="1196:54">1</literal><operator pos:start="1196:55" pos:end="1196:55">)</operator> <operator pos:start="1196:57" pos:end="1196:57">*</operator> <literal type="number" pos:start="1196:59" pos:end="1196:59">4</literal><operator pos:start="1196:60" pos:end="1196:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1202:17" pos:end="1202:22"><expr pos:start="1202:17" pos:end="1202:21"><name pos:start="1202:17" pos:end="1202:17">j</name> <operator pos:start="1202:19" pos:end="1202:19">=</operator> <literal type="number" pos:start="1202:21" pos:end="1202:21">0</literal></expr>;</expr_stmt>

                <for pos:start="1204:17" pos:end="1270:17">for<control pos:start="1204:20" pos:end="1204:33">(<init pos:start="1204:21" pos:end="1204:24"><expr pos:start="1204:21" pos:end="1204:23"><name pos:start="1204:21" pos:end="1204:21">i</name><operator pos:start="1204:22" pos:end="1204:22">=</operator><literal type="number" pos:start="1204:23" pos:end="1204:23">0</literal></expr>;</init><condition pos:start="1204:25" pos:end="1204:29"><expr pos:start="1204:25" pos:end="1204:28"><name pos:start="1204:25" pos:end="1204:25">i</name><operator pos:start="1204:26" pos:end="1204:26">&lt;</operator><literal type="number" pos:start="1204:27" pos:end="1204:28">16</literal></expr>;</condition><incr pos:start="1204:30" pos:end="1204:32"><expr pos:start="1204:30" pos:end="1204:32"><name pos:start="1204:30" pos:end="1204:30">i</name><operator pos:start="1204:31" pos:end="1204:32">++</operator></expr></incr>)</control> <block pos:start="1204:35" pos:end="1270:17">{<block_content pos:start="1206:21" pos:end="1268:21">

                    <if_stmt pos:start="1206:21" pos:end="1268:21"><if pos:start="1206:21" pos:end="1268:21">if <condition pos:start="1206:24" pos:end="1206:40">(<expr pos:start="1206:25" pos:end="1206:39"><name pos:start="1206:25" pos:end="1206:28">insn</name> <operator pos:start="1206:30" pos:end="1206:30">&amp;</operator> <operator pos:start="1206:32" pos:end="1206:32">(</operator><literal type="number" pos:start="1206:33" pos:end="1206:33">1</literal> <operator pos:start="1206:35" pos:end="1206:36">&lt;&lt;</operator> <name pos:start="1206:38" pos:end="1206:38">i</name><operator pos:start="1206:39" pos:end="1206:39">)</operator></expr>)</condition> <block pos:start="1206:42" pos:end="1268:21">{<block_content pos:start="1208:25" pos:end="1266:49">

                        <if_stmt pos:start="1208:25" pos:end="1258:25"><if pos:start="1208:25" pos:end="1234:25">if <condition pos:start="1208:28" pos:end="1208:45">(<expr pos:start="1208:29" pos:end="1208:44"><name pos:start="1208:29" pos:end="1208:32">insn</name> <operator pos:start="1208:34" pos:end="1208:34">&amp;</operator> <operator pos:start="1208:36" pos:end="1208:36">(</operator><literal type="number" pos:start="1208:37" pos:end="1208:37">1</literal> <operator pos:start="1208:39" pos:end="1208:40">&lt;&lt;</operator> <literal type="number" pos:start="1208:42" pos:end="1208:43">20</literal><operator pos:start="1208:44" pos:end="1208:44">)</operator></expr>)</condition> <block pos:start="1208:47" pos:end="1234:25">{<block_content pos:start="1212:29" pos:end="1232:29">

                            <comment type="block" pos:start="1210:29" pos:end="1210:38">/* load */</comment>

                            <expr_stmt pos:start="1212:29" pos:end="1212:45"><expr pos:start="1212:29" pos:end="1212:44"><call pos:start="1212:29" pos:end="1212:44"><name pos:start="1212:29" pos:end="1212:36">gen_ldst</name><argument_list pos:start="1212:37" pos:end="1212:44">(<argument pos:start="1212:38" pos:end="1212:40"><expr pos:start="1212:38" pos:end="1212:40"><name pos:start="1212:38" pos:end="1212:40">ldl</name></expr></argument>, <argument pos:start="1212:43" pos:end="1212:43"><expr pos:start="1212:43" pos:end="1212:43"><name pos:start="1212:43" pos:end="1212:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="1214:29" pos:end="1232:29"><if pos:start="1214:29" pos:end="1218:29">if <condition pos:start="1214:32" pos:end="1214:40">(<expr pos:start="1214:33" pos:end="1214:39"><name pos:start="1214:33" pos:end="1214:33">i</name> <operator pos:start="1214:35" pos:end="1214:36">==</operator> <literal type="number" pos:start="1214:38" pos:end="1214:39">15</literal></expr>)</condition> <block pos:start="1214:42" pos:end="1218:29">{<block_content pos:start="1216:33" pos:end="1216:42">

                                <expr_stmt pos:start="1216:33" pos:end="1216:42"><expr pos:start="1216:33" pos:end="1216:41"><call pos:start="1216:33" pos:end="1216:41"><name pos:start="1216:33" pos:end="1216:38">gen_bx</name><argument_list pos:start="1216:39" pos:end="1216:41">(<argument pos:start="1216:40" pos:end="1216:40"><expr pos:start="1216:40" pos:end="1216:40"><name pos:start="1216:40" pos:end="1216:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="1218:31" pos:end="1222:29">else if <condition pos:start="1218:39" pos:end="1218:44">(<expr pos:start="1218:40" pos:end="1218:43"><name pos:start="1218:40" pos:end="1218:43">user</name></expr>)</condition> <block pos:start="1218:46" pos:end="1222:29">{<block_content pos:start="1220:33" pos:end="1220:55">

                                <expr_stmt pos:start="1220:33" pos:end="1220:55"><expr pos:start="1220:33" pos:end="1220:54"><call pos:start="1220:33" pos:end="1220:54"><name pos:start="1220:33" pos:end="1220:51">gen_op_movl_user_T0</name><argument_list pos:start="1220:52" pos:end="1220:54">(<argument pos:start="1220:53" pos:end="1220:53"><expr pos:start="1220:53" pos:end="1220:53"><name pos:start="1220:53" pos:end="1220:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="1222:31" pos:end="1228:29">else if <condition pos:start="1222:39" pos:end="1222:47">(<expr pos:start="1222:40" pos:end="1222:46"><name pos:start="1222:40" pos:end="1222:40">i</name> <operator pos:start="1222:42" pos:end="1222:43">==</operator> <name pos:start="1222:45" pos:end="1222:46">rn</name></expr>)</condition> <block pos:start="1222:49" pos:end="1228:29">{<block_content pos:start="1224:33" pos:end="1226:48">

                                <expr_stmt pos:start="1224:33" pos:end="1224:52"><expr pos:start="1224:33" pos:end="1224:51"><call pos:start="1224:33" pos:end="1224:51"><name pos:start="1224:33" pos:end="1224:49">gen_op_movl_T2_T0</name><argument_list pos:start="1224:50" pos:end="1224:51">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="1226:33" pos:end="1226:48"><expr pos:start="1226:33" pos:end="1226:47"><name pos:start="1226:33" pos:end="1226:43">loaded_base</name> <operator pos:start="1226:45" pos:end="1226:45">=</operator> <literal type="number" pos:start="1226:47" pos:end="1226:47">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1228:31" pos:end="1232:29">else <block pos:start="1228:36" pos:end="1232:29">{<block_content pos:start="1230:33" pos:end="1230:54">

                                <expr_stmt pos:start="1230:33" pos:end="1230:54"><expr pos:start="1230:33" pos:end="1230:53"><call pos:start="1230:33" pos:end="1230:53"><name pos:start="1230:33" pos:end="1230:47">gen_movl_reg_T0</name><argument_list pos:start="1230:48" pos:end="1230:53">(<argument pos:start="1230:49" pos:end="1230:49"><expr pos:start="1230:49" pos:end="1230:49"><name pos:start="1230:49" pos:end="1230:49">s</name></expr></argument>, <argument pos:start="1230:52" pos:end="1230:52"><expr pos:start="1230:52" pos:end="1230:52"><name pos:start="1230:52" pos:end="1230:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="1234:27" pos:end="1258:25">else <block pos:start="1234:32" pos:end="1258:25">{<block_content pos:start="1238:29" pos:end="1256:45">

                            <comment type="block" pos:start="1236:29" pos:end="1236:39">/* store */</comment>

                            <if_stmt pos:start="1238:29" pos:end="1254:29"><if pos:start="1238:29" pos:end="1246:29">if <condition pos:start="1238:32" pos:end="1238:40">(<expr pos:start="1238:33" pos:end="1238:39"><name pos:start="1238:33" pos:end="1238:33">i</name> <operator pos:start="1238:35" pos:end="1238:36">==</operator> <literal type="number" pos:start="1238:38" pos:end="1238:39">15</literal></expr>)</condition> <block pos:start="1238:42" pos:end="1246:29">{<block_content pos:start="1242:33" pos:end="1244:58">

                                <comment type="block" pos:start="1240:33" pos:end="1240:65">/* special case: r15 = PC + 12 */</comment>

                                <expr_stmt pos:start="1242:33" pos:end="1242:54"><expr pos:start="1242:33" pos:end="1242:53"><name pos:start="1242:33" pos:end="1242:35">val</name> <operator pos:start="1242:37" pos:end="1242:37">=</operator> <operator pos:start="1242:39" pos:end="1242:39">(</operator><name pos:start="1242:40" pos:end="1242:43">long</name><operator pos:start="1242:44" pos:end="1242:44">)</operator><name pos:start="1242:45" pos:end="1242:49"><name pos:start="1242:45" pos:end="1242:45">s</name><operator pos:start="1242:46" pos:end="1242:47">-&gt;</operator><name pos:start="1242:48" pos:end="1242:49">pc</name></name> <operator pos:start="1242:51" pos:end="1242:51">+</operator> <literal type="number" pos:start="1242:53" pos:end="1242:53">8</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="1244:33" pos:end="1244:58"><expr pos:start="1244:33" pos:end="1244:57"><name pos:start="1244:33" pos:end="1244:52"><name pos:start="1244:33" pos:end="1244:49">gen_op_movl_TN_im</name><index pos:start="1244:50" pos:end="1244:52">[<expr pos:start="1244:51" pos:end="1244:51"><literal type="number" pos:start="1244:51" pos:end="1244:51">0</literal></expr>]</index></name><operator pos:start="1244:53" pos:end="1244:53">(</operator><name pos:start="1244:54" pos:end="1244:56">val</name><operator pos:start="1244:57" pos:end="1244:57">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="1246:31" pos:end="1250:29">else if <condition pos:start="1246:39" pos:end="1246:44">(<expr pos:start="1246:40" pos:end="1246:43"><name pos:start="1246:40" pos:end="1246:43">user</name></expr>)</condition> <block pos:start="1246:46" pos:end="1250:29">{<block_content pos:start="1248:33" pos:end="1248:55">

                                <expr_stmt pos:start="1248:33" pos:end="1248:55"><expr pos:start="1248:33" pos:end="1248:54"><call pos:start="1248:33" pos:end="1248:54"><name pos:start="1248:33" pos:end="1248:51">gen_op_movl_T0_user</name><argument_list pos:start="1248:52" pos:end="1248:54">(<argument pos:start="1248:53" pos:end="1248:53"><expr pos:start="1248:53" pos:end="1248:53"><name pos:start="1248:53" pos:end="1248:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1250:31" pos:end="1254:29">else <block pos:start="1250:36" pos:end="1254:29">{<block_content pos:start="1252:33" pos:end="1252:54">

                                <expr_stmt pos:start="1252:33" pos:end="1252:54"><expr pos:start="1252:33" pos:end="1252:53"><call pos:start="1252:33" pos:end="1252:53"><name pos:start="1252:33" pos:end="1252:47">gen_movl_T0_reg</name><argument_list pos:start="1252:48" pos:end="1252:53">(<argument pos:start="1252:49" pos:end="1252:49"><expr pos:start="1252:49" pos:end="1252:49"><name pos:start="1252:49" pos:end="1252:49">s</name></expr></argument>, <argument pos:start="1252:52" pos:end="1252:52"><expr pos:start="1252:52" pos:end="1252:52"><name pos:start="1252:52" pos:end="1252:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <expr_stmt pos:start="1256:29" pos:end="1256:45"><expr pos:start="1256:29" pos:end="1256:44"><call pos:start="1256:29" pos:end="1256:44"><name pos:start="1256:29" pos:end="1256:36">gen_ldst</name><argument_list pos:start="1256:37" pos:end="1256:44">(<argument pos:start="1256:38" pos:end="1256:40"><expr pos:start="1256:38" pos:end="1256:40"><name pos:start="1256:38" pos:end="1256:40">stl</name></expr></argument>, <argument pos:start="1256:43" pos:end="1256:43"><expr pos:start="1256:43" pos:end="1256:43"><name pos:start="1256:43" pos:end="1256:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1260:25" pos:end="1260:28"><expr pos:start="1260:25" pos:end="1260:27"><name pos:start="1260:25" pos:end="1260:25">j</name><operator pos:start="1260:26" pos:end="1260:27">++</operator></expr>;</expr_stmt>

                        <comment type="block" pos:start="1262:25" pos:end="1262:68">/* no need to add after the last transfer */</comment>

                        <if_stmt pos:start="1264:25" pos:end="1266:49"><if pos:start="1264:25" pos:end="1266:49">if <condition pos:start="1264:28" pos:end="1264:35">(<expr pos:start="1264:29" pos:end="1264:34"><name pos:start="1264:29" pos:end="1264:29">j</name> <operator pos:start="1264:31" pos:end="1264:32">!=</operator> <name pos:start="1264:34" pos:end="1264:34">n</name></expr>)</condition><block type="pseudo" pos:start="1266:29" pos:end="1266:49"><block_content pos:start="1266:29" pos:end="1266:49">

                            <expr_stmt pos:start="1266:29" pos:end="1266:49"><expr pos:start="1266:29" pos:end="1266:48"><call pos:start="1266:29" pos:end="1266:48"><name pos:start="1266:29" pos:end="1266:45">gen_op_addl_T1_im</name><argument_list pos:start="1266:46" pos:end="1266:48">(<argument pos:start="1266:47" pos:end="1266:47"><expr pos:start="1266:47" pos:end="1266:47"><literal type="number" pos:start="1266:47" pos:end="1266:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="1272:17" pos:end="1312:17"><if pos:start="1272:17" pos:end="1312:17">if <condition pos:start="1272:20" pos:end="1272:37">(<expr pos:start="1272:21" pos:end="1272:36"><name pos:start="1272:21" pos:end="1272:24">insn</name> <operator pos:start="1272:26" pos:end="1272:26">&amp;</operator> <operator pos:start="1272:28" pos:end="1272:28">(</operator><literal type="number" pos:start="1272:29" pos:end="1272:29">1</literal> <operator pos:start="1272:31" pos:end="1272:32">&lt;&lt;</operator> <literal type="number" pos:start="1272:34" pos:end="1272:35">21</literal><operator pos:start="1272:36" pos:end="1272:36">)</operator></expr>)</condition> <block pos:start="1272:39" pos:end="1312:17">{<block_content pos:start="1276:21" pos:end="1310:43">

                    <comment type="block" pos:start="1274:21" pos:end="1274:36">/* write back */</comment>

                    <if_stmt pos:start="1276:21" pos:end="1308:21"><if pos:start="1276:21" pos:end="1290:21">if <condition pos:start="1276:24" pos:end="1276:41">(<expr pos:start="1276:25" pos:end="1276:40"><name pos:start="1276:25" pos:end="1276:28">insn</name> <operator pos:start="1276:30" pos:end="1276:30">&amp;</operator> <operator pos:start="1276:32" pos:end="1276:32">(</operator><literal type="number" pos:start="1276:33" pos:end="1276:33">1</literal> <operator pos:start="1276:35" pos:end="1276:36">&lt;&lt;</operator> <literal type="number" pos:start="1276:38" pos:end="1276:39">23</literal><operator pos:start="1276:40" pos:end="1276:40">)</operator></expr>)</condition> <block pos:start="1276:43" pos:end="1290:21">{<block_content pos:start="1278:25" pos:end="1288:25">

                        <if_stmt pos:start="1278:25" pos:end="1288:25"><if pos:start="1278:25" pos:end="1282:25">if <condition pos:start="1278:28" pos:end="1278:45">(<expr pos:start="1278:29" pos:end="1278:44"><name pos:start="1278:29" pos:end="1278:32">insn</name> <operator pos:start="1278:34" pos:end="1278:34">&amp;</operator> <operator pos:start="1278:36" pos:end="1278:36">(</operator><literal type="number" pos:start="1278:37" pos:end="1278:37">1</literal> <operator pos:start="1278:39" pos:end="1278:40">&lt;&lt;</operator> <literal type="number" pos:start="1278:42" pos:end="1278:43">24</literal><operator pos:start="1278:44" pos:end="1278:44">)</operator></expr>)</condition> <block pos:start="1278:47" pos:end="1282:25">{<block_content>

                            <comment type="block" pos:start="1280:29" pos:end="1280:47">/* pre increment */</comment>

                        </block_content>}</block></if> <else pos:start="1282:27" pos:end="1288:25">else <block pos:start="1282:32" pos:end="1288:25">{<block_content pos:start="1286:29" pos:end="1286:49">

                            <comment type="block" pos:start="1284:29" pos:end="1284:48">/* post increment */</comment>

                            <expr_stmt pos:start="1286:29" pos:end="1286:49"><expr pos:start="1286:29" pos:end="1286:48"><call pos:start="1286:29" pos:end="1286:48"><name pos:start="1286:29" pos:end="1286:45">gen_op_addl_T1_im</name><argument_list pos:start="1286:46" pos:end="1286:48">(<argument pos:start="1286:47" pos:end="1286:47"><expr pos:start="1286:47" pos:end="1286:47"><literal type="number" pos:start="1286:47" pos:end="1286:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1290:23" pos:end="1308:21">else <block pos:start="1290:28" pos:end="1308:21">{<block_content pos:start="1292:25" pos:end="1306:25">

                        <if_stmt pos:start="1292:25" pos:end="1306:25"><if pos:start="1292:25" pos:end="1300:25">if <condition pos:start="1292:28" pos:end="1292:45">(<expr pos:start="1292:29" pos:end="1292:44"><name pos:start="1292:29" pos:end="1292:32">insn</name> <operator pos:start="1292:34" pos:end="1292:34">&amp;</operator> <operator pos:start="1292:36" pos:end="1292:36">(</operator><literal type="number" pos:start="1292:37" pos:end="1292:37">1</literal> <operator pos:start="1292:39" pos:end="1292:40">&lt;&lt;</operator> <literal type="number" pos:start="1292:42" pos:end="1292:43">24</literal><operator pos:start="1292:44" pos:end="1292:44">)</operator></expr>)</condition> <block pos:start="1292:47" pos:end="1300:25">{<block_content pos:start="1296:29" pos:end="1298:66">

                            <comment type="block" pos:start="1294:29" pos:end="1294:47">/* pre decrement */</comment>

                            <if_stmt pos:start="1296:29" pos:end="1298:66"><if pos:start="1296:29" pos:end="1298:66">if <condition pos:start="1296:32" pos:end="1296:39">(<expr pos:start="1296:33" pos:end="1296:38"><name pos:start="1296:33" pos:end="1296:33">n</name> <operator pos:start="1296:35" pos:end="1296:36">!=</operator> <literal type="number" pos:start="1296:38" pos:end="1296:38">1</literal></expr>)</condition><block type="pseudo" pos:start="1298:33" pos:end="1298:66"><block_content pos:start="1298:33" pos:end="1298:66">

                                <expr_stmt pos:start="1298:33" pos:end="1298:66"><expr pos:start="1298:33" pos:end="1298:65"><call pos:start="1298:33" pos:end="1298:65"><name pos:start="1298:33" pos:end="1298:49">gen_op_addl_T1_im</name><argument_list pos:start="1298:50" pos:end="1298:65">(<argument pos:start="1298:51" pos:end="1298:64"><expr pos:start="1298:51" pos:end="1298:64"><operator pos:start="1298:51" pos:end="1298:51">-</operator><operator pos:start="1298:52" pos:end="1298:52">(</operator><operator pos:start="1298:53" pos:end="1298:53">(</operator><name pos:start="1298:54" pos:end="1298:54">n</name> <operator pos:start="1298:56" pos:end="1298:56">-</operator> <literal type="number" pos:start="1298:58" pos:end="1298:58">1</literal><operator pos:start="1298:59" pos:end="1298:59">)</operator> <operator pos:start="1298:61" pos:end="1298:61">*</operator> <literal type="number" pos:start="1298:63" pos:end="1298:63">4</literal><operator pos:start="1298:64" pos:end="1298:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></if> <else pos:start="1300:27" pos:end="1306:25">else <block pos:start="1300:32" pos:end="1306:25">{<block_content pos:start="1304:29" pos:end="1304:56">

                            <comment type="block" pos:start="1302:29" pos:end="1302:48">/* post decrement */</comment>

                            <expr_stmt pos:start="1304:29" pos:end="1304:56"><expr pos:start="1304:29" pos:end="1304:55"><call pos:start="1304:29" pos:end="1304:55"><name pos:start="1304:29" pos:end="1304:45">gen_op_addl_T1_im</name><argument_list pos:start="1304:46" pos:end="1304:55">(<argument pos:start="1304:47" pos:end="1304:54"><expr pos:start="1304:47" pos:end="1304:54"><operator pos:start="1304:47" pos:end="1304:47">-</operator><operator pos:start="1304:48" pos:end="1304:48">(</operator><name pos:start="1304:49" pos:end="1304:49">n</name> <operator pos:start="1304:51" pos:end="1304:51">*</operator> <literal type="number" pos:start="1304:53" pos:end="1304:53">4</literal><operator pos:start="1304:54" pos:end="1304:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1310:21" pos:end="1310:43"><expr pos:start="1310:21" pos:end="1310:42"><call pos:start="1310:21" pos:end="1310:42"><name pos:start="1310:21" pos:end="1310:35">gen_movl_reg_T1</name><argument_list pos:start="1310:36" pos:end="1310:42">(<argument pos:start="1310:37" pos:end="1310:37"><expr pos:start="1310:37" pos:end="1310:37"><name pos:start="1310:37" pos:end="1310:37">s</name></expr></argument>, <argument pos:start="1310:40" pos:end="1310:41"><expr pos:start="1310:40" pos:end="1310:41"><name pos:start="1310:40" pos:end="1310:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1314:17" pos:end="1320:17"><if pos:start="1314:17" pos:end="1320:17">if <condition pos:start="1314:20" pos:end="1314:32">(<expr pos:start="1314:21" pos:end="1314:31"><name pos:start="1314:21" pos:end="1314:31">loaded_base</name></expr>)</condition> <block pos:start="1314:34" pos:end="1320:17">{<block_content pos:start="1316:21" pos:end="1318:43">

                    <expr_stmt pos:start="1316:21" pos:end="1316:40"><expr pos:start="1316:21" pos:end="1316:39"><call pos:start="1316:21" pos:end="1316:39"><name pos:start="1316:21" pos:end="1316:37">gen_op_movl_T0_T2</name><argument_list pos:start="1316:38" pos:end="1316:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1318:21" pos:end="1318:43"><expr pos:start="1318:21" pos:end="1318:42"><call pos:start="1318:21" pos:end="1318:42"><name pos:start="1318:21" pos:end="1318:35">gen_movl_reg_T0</name><argument_list pos:start="1318:36" pos:end="1318:42">(<argument pos:start="1318:37" pos:end="1318:37"><expr pos:start="1318:37" pos:end="1318:37"><name pos:start="1318:37" pos:end="1318:37">s</name></expr></argument>, <argument pos:start="1318:40" pos:end="1318:41"><expr pos:start="1318:40" pos:end="1318:41"><name pos:start="1318:40" pos:end="1318:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1322:17" pos:end="1332:17"><if pos:start="1322:17" pos:end="1332:17">if <condition pos:start="1322:20" pos:end="1322:48">(<expr pos:start="1322:21" pos:end="1322:47"><operator pos:start="1322:21" pos:end="1322:21">(</operator><name pos:start="1322:22" pos:end="1322:25">insn</name> <operator pos:start="1322:27" pos:end="1322:27">&amp;</operator> <operator pos:start="1322:29" pos:end="1322:29">(</operator><literal type="number" pos:start="1322:30" pos:end="1322:30">1</literal> <operator pos:start="1322:32" pos:end="1322:33">&lt;&lt;</operator> <literal type="number" pos:start="1322:35" pos:end="1322:36">22</literal><operator pos:start="1322:37" pos:end="1322:37">)</operator><operator pos:start="1322:38" pos:end="1322:38">)</operator> <operator pos:start="1322:40" pos:end="1322:41">&amp;&amp;</operator> <operator pos:start="1322:43" pos:end="1322:43">!</operator><name pos:start="1322:44" pos:end="1322:47">user</name></expr>)</condition> <block pos:start="1322:50" pos:end="1332:17">{<block_content pos:start="1326:21" pos:end="1330:45">

                    <comment type="block" pos:start="1324:21" pos:end="1324:50">/* Restore CPSR from SPSR.  */</comment>

                    <expr_stmt pos:start="1326:21" pos:end="1326:42"><expr pos:start="1326:21" pos:end="1326:41"><call pos:start="1326:21" pos:end="1326:41"><name pos:start="1326:21" pos:end="1326:39">gen_op_movl_T0_spsr</name><argument_list pos:start="1326:40" pos:end="1326:41">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1328:21" pos:end="1328:52"><expr pos:start="1328:21" pos:end="1328:51"><call pos:start="1328:21" pos:end="1328:51"><name pos:start="1328:21" pos:end="1328:39">gen_op_movl_cpsr_T0</name><argument_list pos:start="1328:40" pos:end="1328:51">(<argument pos:start="1328:41" pos:end="1328:50"><expr pos:start="1328:41" pos:end="1328:50"><literal type="number" pos:start="1328:41" pos:end="1328:50">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1330:21" pos:end="1330:45"><expr pos:start="1330:21" pos:end="1330:44"><name pos:start="1330:21" pos:end="1330:29"><name pos:start="1330:21" pos:end="1330:21">s</name><operator pos:start="1330:22" pos:end="1330:23">-&gt;</operator><name pos:start="1330:24" pos:end="1330:29">is_jmp</name></name> <operator pos:start="1330:31" pos:end="1330:31">=</operator> <name pos:start="1330:33" pos:end="1330:44">DISAS_UPDATE</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="1336:13" pos:end="1336:18">break;</break>

        <case pos:start="1338:9" pos:end="1338:17">case <expr pos:start="1338:14" pos:end="1338:16"><literal type="number" pos:start="1338:14" pos:end="1338:16">0xa</literal></expr>:</case>

        <case pos:start="1340:9" pos:end="1340:17">case <expr pos:start="1340:14" pos:end="1340:16"><literal type="number" pos:start="1340:14" pos:end="1340:16">0xb</literal></expr>:</case>

            <block pos:start="1342:13" pos:end="1366:13">{<block_content pos:start="1344:17" pos:end="1364:32">

                <decl_stmt pos:start="1344:17" pos:end="1344:31"><decl pos:start="1344:17" pos:end="1344:30"><type pos:start="1344:17" pos:end="1344:23"><name pos:start="1344:17" pos:end="1344:23">int32_t</name></type> <name pos:start="1344:25" pos:end="1344:30">offset</name></decl>;</decl_stmt>

                

                <comment type="block" pos:start="1348:17" pos:end="1348:39">/* branch (and link) */</comment>

                <expr_stmt pos:start="1350:17" pos:end="1350:37"><expr pos:start="1350:17" pos:end="1350:36"><name pos:start="1350:17" pos:end="1350:19">val</name> <operator pos:start="1350:21" pos:end="1350:21">=</operator> <operator pos:start="1350:23" pos:end="1350:23">(</operator><name pos:start="1350:24" pos:end="1350:30">int32_t</name><operator pos:start="1350:31" pos:end="1350:31">)</operator><name pos:start="1350:32" pos:end="1350:36"><name pos:start="1350:32" pos:end="1350:32">s</name><operator pos:start="1350:33" pos:end="1350:34">-&gt;</operator><name pos:start="1350:35" pos:end="1350:36">pc</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="1352:17" pos:end="1358:17"><if pos:start="1352:17" pos:end="1358:17">if <condition pos:start="1352:20" pos:end="1352:37">(<expr pos:start="1352:21" pos:end="1352:36"><name pos:start="1352:21" pos:end="1352:24">insn</name> <operator pos:start="1352:26" pos:end="1352:26">&amp;</operator> <operator pos:start="1352:28" pos:end="1352:28">(</operator><literal type="number" pos:start="1352:29" pos:end="1352:29">1</literal> <operator pos:start="1352:31" pos:end="1352:32">&lt;&lt;</operator> <literal type="number" pos:start="1352:34" pos:end="1352:35">24</literal><operator pos:start="1352:36" pos:end="1352:36">)</operator></expr>)</condition> <block pos:start="1352:39" pos:end="1358:17">{<block_content pos:start="1354:21" pos:end="1356:48">

                    <expr_stmt pos:start="1354:21" pos:end="1354:43"><expr pos:start="1354:21" pos:end="1354:42"><call pos:start="1354:21" pos:end="1354:42"><name pos:start="1354:21" pos:end="1354:37">gen_op_movl_T0_im</name><argument_list pos:start="1354:38" pos:end="1354:42">(<argument pos:start="1354:39" pos:end="1354:41"><expr pos:start="1354:39" pos:end="1354:41"><name pos:start="1354:39" pos:end="1354:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1356:21" pos:end="1356:48"><expr pos:start="1356:21" pos:end="1356:47"><name pos:start="1356:21" pos:end="1356:45"><name pos:start="1356:21" pos:end="1356:38">gen_op_movl_reg_TN</name><index pos:start="1356:39" pos:end="1356:41">[<expr pos:start="1356:40" pos:end="1356:40"><literal type="number" pos:start="1356:40" pos:end="1356:40">0</literal></expr>]</index><index pos:start="1356:42" pos:end="1356:45">[<expr pos:start="1356:43" pos:end="1356:44"><literal type="number" pos:start="1356:43" pos:end="1356:44">14</literal></expr>]</index></name><operator pos:start="1356:46" pos:end="1356:46">(</operator><operator pos:start="1356:47" pos:end="1356:47">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1360:17" pos:end="1360:53"><expr pos:start="1360:17" pos:end="1360:52"><name pos:start="1360:17" pos:end="1360:22">offset</name> <operator pos:start="1360:24" pos:end="1360:24">=</operator> <operator pos:start="1360:26" pos:end="1360:26">(</operator><operator pos:start="1360:27" pos:end="1360:27">(</operator><operator pos:start="1360:28" pos:end="1360:28">(</operator><name pos:start="1360:29" pos:end="1360:35">int32_t</name><operator pos:start="1360:36" pos:end="1360:36">)</operator><name pos:start="1360:37" pos:end="1360:40">insn</name> <operator pos:start="1360:42" pos:end="1360:43">&lt;&lt;</operator> <literal type="number" pos:start="1360:45" pos:end="1360:45">8</literal><operator pos:start="1360:46" pos:end="1360:46">)</operator> <operator pos:start="1360:48" pos:end="1360:49">&gt;&gt;</operator> <literal type="number" pos:start="1360:51" pos:end="1360:51">8</literal><operator pos:start="1360:52" pos:end="1360:52">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1362:17" pos:end="1362:41"><expr pos:start="1362:17" pos:end="1362:40"><name pos:start="1362:17" pos:end="1362:19">val</name> <operator pos:start="1362:21" pos:end="1362:22">+=</operator> <operator pos:start="1362:24" pos:end="1362:24">(</operator><name pos:start="1362:25" pos:end="1362:30">offset</name> <operator pos:start="1362:32" pos:end="1362:33">&lt;&lt;</operator> <literal type="number" pos:start="1362:35" pos:end="1362:35">2</literal><operator pos:start="1362:36" pos:end="1362:36">)</operator> <operator pos:start="1362:38" pos:end="1362:38">+</operator> <literal type="number" pos:start="1362:40" pos:end="1362:40">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1364:17" pos:end="1364:32"><expr pos:start="1364:17" pos:end="1364:31"><call pos:start="1364:17" pos:end="1364:31"><name pos:start="1364:17" pos:end="1364:23">gen_jmp</name><argument_list pos:start="1364:24" pos:end="1364:31">(<argument pos:start="1364:25" pos:end="1364:25"><expr pos:start="1364:25" pos:end="1364:25"><name pos:start="1364:25" pos:end="1364:25">s</name></expr></argument>, <argument pos:start="1364:28" pos:end="1364:30"><expr pos:start="1364:28" pos:end="1364:30"><name pos:start="1364:28" pos:end="1364:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="1368:13" pos:end="1368:18">break;</break>

        <case pos:start="1370:9" pos:end="1370:17">case <expr pos:start="1370:14" pos:end="1370:16"><literal type="number" pos:start="1370:14" pos:end="1370:16">0xc</literal></expr>:</case>

        <case pos:start="1372:9" pos:end="1372:17">case <expr pos:start="1372:14" pos:end="1372:16"><literal type="number" pos:start="1372:14" pos:end="1372:16">0xd</literal></expr>:</case>

        <case pos:start="1374:9" pos:end="1374:17">case <expr pos:start="1374:14" pos:end="1374:16"><literal type="number" pos:start="1374:14" pos:end="1374:16">0xe</literal></expr>:</case>

            <comment type="block" pos:start="1376:13" pos:end="1376:31">/* Coprocessor.  */</comment>

            <expr_stmt pos:start="1378:13" pos:end="1378:36"><expr pos:start="1378:13" pos:end="1378:35"><name pos:start="1378:13" pos:end="1378:15">op1</name> <operator pos:start="1378:17" pos:end="1378:17">=</operator> <operator pos:start="1378:19" pos:end="1378:19">(</operator><name pos:start="1378:20" pos:end="1378:23">insn</name> <operator pos:start="1378:25" pos:end="1378:26">&gt;&gt;</operator> <literal type="number" pos:start="1378:28" pos:end="1378:28">8</literal><operator pos:start="1378:29" pos:end="1378:29">)</operator> <operator pos:start="1378:31" pos:end="1378:31">&amp;</operator> <literal type="number" pos:start="1378:33" pos:end="1378:35">0xf</literal></expr>;</expr_stmt>

            <switch pos:start="1380:13" pos:end="1406:13">switch <condition pos:start="1380:20" pos:end="1380:24">(<expr pos:start="1380:21" pos:end="1380:23"><name pos:start="1380:21" pos:end="1380:23">op1</name></expr>)</condition> <block pos:start="1380:26" pos:end="1406:13">{<block_content pos:start="1382:13" pos:end="1404:32">

            <case pos:start="1382:13" pos:end="1382:20">case <expr pos:start="1382:18" pos:end="1382:19"><literal type="number" pos:start="1382:18" pos:end="1382:19">10</literal></expr>:</case>

            <case pos:start="1384:13" pos:end="1384:20">case <expr pos:start="1384:18" pos:end="1384:19"><literal type="number" pos:start="1384:18" pos:end="1384:19">11</literal></expr>:</case>

                <if_stmt pos:start="1386:17" pos:end="1388:36"><if pos:start="1386:17" pos:end="1388:36">if <condition pos:start="1386:20" pos:end="1386:50">(<expr pos:start="1386:21" pos:end="1386:49"><call pos:start="1386:21" pos:end="1386:49"><name pos:start="1386:21" pos:end="1386:34">disas_vfp_insn</name> <argument_list pos:start="1386:36" pos:end="1386:49">(<argument pos:start="1386:37" pos:end="1386:39"><expr pos:start="1386:37" pos:end="1386:39"><name pos:start="1386:37" pos:end="1386:39">env</name></expr></argument>, <argument pos:start="1386:42" pos:end="1386:42"><expr pos:start="1386:42" pos:end="1386:42"><name pos:start="1386:42" pos:end="1386:42">s</name></expr></argument>, <argument pos:start="1386:45" pos:end="1386:48"><expr pos:start="1386:45" pos:end="1386:48"><name pos:start="1386:45" pos:end="1386:48">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1388:21" pos:end="1388:36"><block_content pos:start="1388:21" pos:end="1388:36">

                    <goto pos:start="1388:21" pos:end="1388:36">goto <name pos:start="1388:26" pos:end="1388:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <break pos:start="1390:17" pos:end="1390:22">break;</break>

            <case pos:start="1392:13" pos:end="1392:20">case <expr pos:start="1392:18" pos:end="1392:19"><literal type="number" pos:start="1392:18" pos:end="1392:19">15</literal></expr>:</case>

                <if_stmt pos:start="1394:17" pos:end="1396:36"><if pos:start="1394:17" pos:end="1396:36">if <condition pos:start="1394:20" pos:end="1394:46">(<expr pos:start="1394:21" pos:end="1394:45"><call pos:start="1394:21" pos:end="1394:45"><name pos:start="1394:21" pos:end="1394:35">disas_cp15_insn</name> <argument_list pos:start="1394:37" pos:end="1394:45">(<argument pos:start="1394:38" pos:end="1394:38"><expr pos:start="1394:38" pos:end="1394:38"><name pos:start="1394:38" pos:end="1394:38">s</name></expr></argument>, <argument pos:start="1394:41" pos:end="1394:44"><expr pos:start="1394:41" pos:end="1394:44"><name pos:start="1394:41" pos:end="1394:44">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1396:21" pos:end="1396:36"><block_content pos:start="1396:21" pos:end="1396:36">

                    <goto pos:start="1396:21" pos:end="1396:36">goto <name pos:start="1396:26" pos:end="1396:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <break pos:start="1398:17" pos:end="1398:22">break;</break>

            <default pos:start="1400:13" pos:end="1400:20">default:</default>

                <comment type="block" pos:start="1402:17" pos:end="1402:43">/* unknown coprocessor.  */</comment>

                <goto pos:start="1404:17" pos:end="1404:32">goto <name pos:start="1404:22" pos:end="1404:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="1408:13" pos:end="1408:18">break;</break>

        <case pos:start="1410:9" pos:end="1410:17">case <expr pos:start="1410:14" pos:end="1410:16"><literal type="number" pos:start="1410:14" pos:end="1410:16">0xf</literal></expr>:</case>

            <comment type="block" pos:start="1412:13" pos:end="1412:21">/* swi */</comment>

            <expr_stmt pos:start="1414:13" pos:end="1414:43"><expr pos:start="1414:13" pos:end="1414:42"><call pos:start="1414:13" pos:end="1414:42"><name pos:start="1414:13" pos:end="1414:29">gen_op_movl_T0_im</name><argument_list pos:start="1414:30" pos:end="1414:42">(<argument pos:start="1414:31" pos:end="1414:41"><expr pos:start="1414:31" pos:end="1414:41"><operator pos:start="1414:31" pos:end="1414:31">(</operator><name pos:start="1414:32" pos:end="1414:35">long</name><operator pos:start="1414:36" pos:end="1414:36">)</operator><name pos:start="1414:37" pos:end="1414:41"><name pos:start="1414:37" pos:end="1414:37">s</name><operator pos:start="1414:38" pos:end="1414:39">-&gt;</operator><name pos:start="1414:40" pos:end="1414:41">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1416:13" pos:end="1416:40"><expr pos:start="1416:13" pos:end="1416:39"><name pos:start="1416:13" pos:end="1416:37"><name pos:start="1416:13" pos:end="1416:30">gen_op_movl_reg_TN</name><index pos:start="1416:31" pos:end="1416:33">[<expr pos:start="1416:32" pos:end="1416:32"><literal type="number" pos:start="1416:32" pos:end="1416:32">0</literal></expr>]</index><index pos:start="1416:34" pos:end="1416:37">[<expr pos:start="1416:35" pos:end="1416:36"><literal type="number" pos:start="1416:35" pos:end="1416:36">15</literal></expr>]</index></name><operator pos:start="1416:38" pos:end="1416:38">(</operator><operator pos:start="1416:39" pos:end="1416:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1418:13" pos:end="1418:25"><expr pos:start="1418:13" pos:end="1418:24"><call pos:start="1418:13" pos:end="1418:24"><name pos:start="1418:13" pos:end="1418:22">gen_op_swi</name><argument_list pos:start="1418:23" pos:end="1418:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1420:13" pos:end="1420:35"><expr pos:start="1420:13" pos:end="1420:34"><name pos:start="1420:13" pos:end="1420:21"><name pos:start="1420:13" pos:end="1420:13">s</name><operator pos:start="1420:14" pos:end="1420:15">-&gt;</operator><name pos:start="1420:16" pos:end="1420:21">is_jmp</name></name> <operator pos:start="1420:23" pos:end="1420:23">=</operator> <name pos:start="1420:25" pos:end="1420:34">DISAS_JUMP</name></expr>;</expr_stmt>

            <break pos:start="1422:13" pos:end="1422:18">break;</break>

        <default pos:start="1424:9" pos:end="1424:16">default:</default>

        <label pos:start="1426:9" pos:end="1426:19"><name pos:start="1426:9" pos:end="1426:18">illegal_op</name>:</label>

            <expr_stmt pos:start="1428:13" pos:end="1428:47"><expr pos:start="1428:13" pos:end="1428:46"><call pos:start="1428:13" pos:end="1428:46"><name pos:start="1428:13" pos:end="1428:29">gen_op_movl_T0_im</name><argument_list pos:start="1428:30" pos:end="1428:46">(<argument pos:start="1428:31" pos:end="1428:45"><expr pos:start="1428:31" pos:end="1428:45"><operator pos:start="1428:31" pos:end="1428:31">(</operator><name pos:start="1428:32" pos:end="1428:35">long</name><operator pos:start="1428:36" pos:end="1428:36">)</operator><name pos:start="1428:37" pos:end="1428:41"><name pos:start="1428:37" pos:end="1428:37">s</name><operator pos:start="1428:38" pos:end="1428:39">-&gt;</operator><name pos:start="1428:40" pos:end="1428:41">pc</name></name> <operator pos:start="1428:43" pos:end="1428:43">-</operator> <literal type="number" pos:start="1428:45" pos:end="1428:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1430:13" pos:end="1430:40"><expr pos:start="1430:13" pos:end="1430:39"><name pos:start="1430:13" pos:end="1430:37"><name pos:start="1430:13" pos:end="1430:30">gen_op_movl_reg_TN</name><index pos:start="1430:31" pos:end="1430:33">[<expr pos:start="1430:32" pos:end="1430:32"><literal type="number" pos:start="1430:32" pos:end="1430:32">0</literal></expr>]</index><index pos:start="1430:34" pos:end="1430:37">[<expr pos:start="1430:35" pos:end="1430:36"><literal type="number" pos:start="1430:35" pos:end="1430:36">15</literal></expr>]</index></name><operator pos:start="1430:38" pos:end="1430:38">(</operator><operator pos:start="1430:39" pos:end="1430:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1432:13" pos:end="1432:32"><expr pos:start="1432:13" pos:end="1432:31"><call pos:start="1432:13" pos:end="1432:31"><name pos:start="1432:13" pos:end="1432:29">gen_op_undef_insn</name><argument_list pos:start="1432:30" pos:end="1432:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1434:13" pos:end="1434:35"><expr pos:start="1434:13" pos:end="1434:34"><name pos:start="1434:13" pos:end="1434:21"><name pos:start="1434:13" pos:end="1434:13">s</name><operator pos:start="1434:14" pos:end="1434:15">-&gt;</operator><name pos:start="1434:16" pos:end="1434:21">is_jmp</name></name> <operator pos:start="1434:23" pos:end="1434:23">=</operator> <name pos:start="1434:25" pos:end="1434:34">DISAS_JUMP</name></expr>;</expr_stmt>

            <break pos:start="1436:13" pos:end="1436:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function></unit>
