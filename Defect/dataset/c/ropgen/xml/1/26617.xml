<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26617.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:44">bdrv_aligned_pwritev</name><parameter_list pos:start="1:45" pos:end="5:34">(<parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:27"><decl pos:start="3:5" pos:end="3:27"><type pos:start="3:5" pos:end="3:27"><name pos:start="3:5" pos:end="3:22">BdrvTrackedRequest</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:27">req</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:36">int64_t</name></type> <name pos:start="3:38" pos:end="3:43">offset</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:63"><decl pos:start="3:46" pos:end="3:63"><type pos:start="3:46" pos:end="3:63"><name pos:start="3:46" pos:end="3:53">unsigned</name> <name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">bytes</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:16">QEMUIOVector</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">qiov</name></decl></parameter>, <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="113:1">{<block_content pos:start="9:5" pos:end="111:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:15">waited</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:51"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:22">sector_num</name> <init pos:start="17:24" pos:end="17:51">= <expr pos:start="17:26" pos:end="17:51"><name pos:start="17:26" pos:end="17:31">offset</name> <operator pos:start="17:33" pos:end="17:34">&gt;&gt;</operator> <name pos:start="17:36" pos:end="17:51">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:56"><decl pos:start="19:5" pos:end="19:55"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:27">nb_sectors</name> <init pos:start="19:29" pos:end="19:55">= <expr pos:start="19:31" pos:end="19:55"><name pos:start="19:31" pos:end="19:35">bytes</name> <operator pos:start="19:37" pos:end="19:38">&gt;&gt;</operator> <name pos:start="19:40" pos:end="19:55">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><call pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:50">(<argument pos:start="23:12" pos:end="23:49"><expr pos:start="23:12" pos:end="23:49"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:18">offset</name> <operator pos:start="23:20" pos:end="23:20">&amp;</operator> <operator pos:start="23:22" pos:end="23:22">(</operator><name pos:start="23:23" pos:end="23:38">BDRV_SECTOR_SIZE</name> <operator pos:start="23:40" pos:end="23:40">-</operator> <literal type="number" pos:start="23:42" pos:end="23:42">1</literal><operator pos:start="23:43" pos:end="23:43">)</operator><operator pos:start="23:44" pos:end="23:44">)</operator> <operator pos:start="23:46" pos:end="23:47">==</operator> <literal type="number" pos:start="23:49" pos:end="23:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:50"><expr pos:start="25:5" pos:end="25:49"><call pos:start="25:5" pos:end="25:49"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:49">(<argument pos:start="25:12" pos:end="25:48"><expr pos:start="25:12" pos:end="25:48"><operator pos:start="25:12" pos:end="25:12">(</operator><name pos:start="25:13" pos:end="25:17">bytes</name> <operator pos:start="25:19" pos:end="25:19">&amp;</operator> <operator pos:start="25:21" pos:end="25:21">(</operator><name pos:start="25:22" pos:end="25:37">BDRV_SECTOR_SIZE</name> <operator pos:start="25:39" pos:end="25:39">-</operator> <literal type="number" pos:start="25:41" pos:end="25:41">1</literal><operator pos:start="25:42" pos:end="25:42">)</operator><operator pos:start="25:43" pos:end="25:43">)</operator> <operator pos:start="25:45" pos:end="25:46">==</operator> <literal type="number" pos:start="25:48" pos:end="25:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><call pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:40">(<argument pos:start="27:12" pos:end="27:39"><expr pos:start="27:12" pos:end="27:39"><operator pos:start="27:12" pos:end="27:12">!</operator><name pos:start="27:13" pos:end="27:16">qiov</name> <operator pos:start="27:18" pos:end="27:19">||</operator> <name pos:start="27:21" pos:end="27:25">bytes</name> <operator pos:start="27:27" pos:end="27:28">==</operator> <name pos:start="27:30" pos:end="27:39"><name pos:start="27:30" pos:end="27:33">qiov</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:39">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:10">waited</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:43"><name pos:start="31:14" pos:end="31:38">wait_serialising_requests</name><argument_list pos:start="31:39" pos:end="31:43">(<argument pos:start="31:40" pos:end="31:42"><expr pos:start="31:40" pos:end="31:42"><name pos:start="31:40" pos:end="31:42">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><call pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:40">(<argument pos:start="33:12" pos:end="33:39"><expr pos:start="33:12" pos:end="33:39"><operator pos:start="33:12" pos:end="33:12">!</operator><name pos:start="33:13" pos:end="33:18">waited</name> <operator pos:start="33:20" pos:end="33:21">||</operator> <operator pos:start="33:23" pos:end="33:23">!</operator><name pos:start="33:24" pos:end="33:39"><name pos:start="33:24" pos:end="33:26">req</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:39">serialising</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><call pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:41">(<argument pos:start="35:12" pos:end="35:40"><expr pos:start="35:12" pos:end="35:40"><name pos:start="35:12" pos:end="35:30"><name pos:start="35:12" pos:end="35:14">req</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:30">overlap_offset</name></name> <operator pos:start="35:32" pos:end="35:33">&lt;=</operator> <name pos:start="35:35" pos:end="35:40">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:71"><expr pos:start="37:5" pos:end="37:70"><call pos:start="37:5" pos:end="37:70"><name pos:start="37:5" pos:end="37:10">assert</name><argument_list pos:start="37:11" pos:end="37:70">(<argument pos:start="37:12" pos:end="37:69"><expr pos:start="37:12" pos:end="37:69"><name pos:start="37:12" pos:end="37:17">offset</name> <operator pos:start="37:19" pos:end="37:19">+</operator> <name pos:start="37:21" pos:end="37:25">bytes</name> <operator pos:start="37:27" pos:end="37:28">&lt;=</operator> <name pos:start="37:30" pos:end="37:48"><name pos:start="37:30" pos:end="37:32">req</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:48">overlap_offset</name></name> <operator pos:start="37:50" pos:end="37:50">+</operator> <name pos:start="37:52" pos:end="37:69"><name pos:start="37:52" pos:end="37:54">req</name><operator pos:start="37:55" pos:end="37:56">-&gt;</operator><name pos:start="37:57" pos:end="37:69">overlap_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:77"><expr pos:start="41:5" pos:end="41:76"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:76"><name pos:start="41:11" pos:end="41:42">notifier_with_return_list_notify</name><argument_list pos:start="41:43" pos:end="41:76">(<argument pos:start="41:44" pos:end="41:70"><expr pos:start="41:44" pos:end="41:70"><operator pos:start="41:44" pos:end="41:44">&amp;</operator><name pos:start="41:45" pos:end="41:70"><name pos:start="41:45" pos:end="41:46">bs</name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:70">before_write_notifiers</name></name></expr></argument>, <argument pos:start="41:73" pos:end="41:75"><expr pos:start="41:73" pos:end="41:75"><name pos:start="41:73" pos:end="41:75">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="59:5"><if pos:start="45:5" pos:end="59:5">if <condition pos:start="45:8" pos:end="49:33">(<expr pos:start="45:9" pos:end="49:32"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:12">ret</name> <operator pos:start="45:14" pos:end="45:15">&amp;&amp;</operator> <name pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:18">bs</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:33">detect_zeroes</name></name> <operator pos:start="45:35" pos:end="45:36">!=</operator> <name pos:start="45:38" pos:end="45:71">BLOCKDEV_DETECT_ZEROES_OPTIONS_OFF</name> <operator pos:start="45:73" pos:end="45:74">&amp;&amp;</operator>

        <operator pos:start="47:9" pos:end="47:9">!</operator><operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:15">flags</name> <operator pos:start="47:17" pos:end="47:17">&amp;</operator> <name pos:start="47:19" pos:end="47:37">BDRV_REQ_ZERO_WRITE</name><operator pos:start="47:38" pos:end="47:38">)</operator> <operator pos:start="47:40" pos:end="47:41">&amp;&amp;</operator> <name pos:start="47:43" pos:end="47:67"><name pos:start="47:43" pos:end="47:45">drv</name><operator pos:start="47:46" pos:end="47:47">-&gt;</operator><name pos:start="47:48" pos:end="47:67">bdrv_co_write_zeroes</name></name> <operator pos:start="47:69" pos:end="47:70">&amp;&amp;</operator>

        <call pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:26">qemu_iovec_is_zero</name><argument_list pos:start="49:27" pos:end="49:32">(<argument pos:start="49:28" pos:end="49:31"><expr pos:start="49:28" pos:end="49:31"><name pos:start="49:28" pos:end="49:31">qiov</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:35" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:9">

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:13">flags</name> <operator pos:start="51:15" pos:end="51:16">|=</operator> <name pos:start="51:18" pos:end="51:36">BDRV_REQ_ZERO_WRITE</name></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:70">(<expr pos:start="53:13" pos:end="53:69"><name pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:14">bs</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:29">detect_zeroes</name></name> <operator pos:start="53:31" pos:end="53:32">==</operator> <name pos:start="53:34" pos:end="53:69">BLOCKDEV_DETECT_ZEROES_OPTIONS_UNMAP</name></expr>)</condition> <block pos:start="53:72" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:40">

            <expr_stmt pos:start="55:13" pos:end="55:40"><expr pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:17">flags</name> <operator pos:start="55:19" pos:end="55:20">|=</operator> <name pos:start="55:22" pos:end="55:39">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="79:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="67:5">{<block_content>

        <comment type="block" pos:start="65:9" pos:end="65:69">/* Do nothing, write notifier decided to fail this request */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="73:5">else if <condition pos:start="67:15" pos:end="67:43">(<expr pos:start="67:16" pos:end="67:42"><name pos:start="67:16" pos:end="67:20">flags</name> <operator pos:start="67:22" pos:end="67:22">&amp;</operator> <name pos:start="67:24" pos:end="67:42">BDRV_REQ_ZERO_WRITE</name></expr>)</condition> <block pos:start="67:45" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:73">

        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><call pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:20">BLKDBG_EVENT</name><argument_list pos:start="69:21" pos:end="69:45">(<argument pos:start="69:22" pos:end="69:23"><expr pos:start="69:22" pos:end="69:23"><name pos:start="69:22" pos:end="69:23">bs</name></expr></argument>, <argument pos:start="69:26" pos:end="69:44"><expr pos:start="69:26" pos:end="69:44"><name pos:start="69:26" pos:end="69:44">BLKDBG_PWRITEV_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:73"><expr pos:start="71:9" pos:end="71:72"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:72"><name pos:start="71:15" pos:end="71:37">bdrv_co_do_write_zeroes</name><argument_list pos:start="71:38" pos:end="71:72">(<argument pos:start="71:39" pos:end="71:40"><expr pos:start="71:39" pos:end="71:40"><name pos:start="71:39" pos:end="71:40">bs</name></expr></argument>, <argument pos:start="71:43" pos:end="71:52"><expr pos:start="71:43" pos:end="71:52"><name pos:start="71:43" pos:end="71:52">sector_num</name></expr></argument>, <argument pos:start="71:55" pos:end="71:64"><expr pos:start="71:55" pos:end="71:64"><name pos:start="71:55" pos:end="71:64">nb_sectors</name></expr></argument>, <argument pos:start="71:67" pos:end="71:71"><expr pos:start="71:67" pos:end="71:71"><name pos:start="71:67" pos:end="71:71">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="79:5">else <block pos:start="73:12" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:68">

        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><call pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:20">BLKDBG_EVENT</name><argument_list pos:start="75:21" pos:end="75:40">(<argument pos:start="75:22" pos:end="75:23"><expr pos:start="75:22" pos:end="75:23"><name pos:start="75:22" pos:end="75:23">bs</name></expr></argument>, <argument pos:start="75:26" pos:end="75:39"><expr pos:start="75:26" pos:end="75:39"><name pos:start="75:26" pos:end="75:39">BLKDBG_PWRITEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:68"><expr pos:start="77:9" pos:end="77:67"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:67"><name pos:start="77:15" pos:end="77:33"><name pos:start="77:15" pos:end="77:17">drv</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:33">bdrv_co_writev</name></name><argument_list pos:start="77:34" pos:end="77:67">(<argument pos:start="77:35" pos:end="77:36"><expr pos:start="77:35" pos:end="77:36"><name pos:start="77:35" pos:end="77:36">bs</name></expr></argument>, <argument pos:start="77:39" pos:end="77:48"><expr pos:start="77:39" pos:end="77:48"><name pos:start="77:39" pos:end="77:48">sector_num</name></expr></argument>, <argument pos:start="77:51" pos:end="77:60"><expr pos:start="77:51" pos:end="77:60"><name pos:start="77:51" pos:end="77:60">nb_sectors</name></expr></argument>, <argument pos:start="77:63" pos:end="77:66"><expr pos:start="77:63" pos:end="77:66"><name pos:start="77:63" pos:end="77:66">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><call pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:16">BLKDBG_EVENT</name><argument_list pos:start="81:17" pos:end="81:41">(<argument pos:start="81:18" pos:end="81:19"><expr pos:start="81:18" pos:end="81:19"><name pos:start="81:18" pos:end="81:19">bs</name></expr></argument>, <argument pos:start="81:22" pos:end="81:40"><expr pos:start="81:22" pos:end="81:40"><name pos:start="81:22" pos:end="81:40">BLKDBG_PWRITEV_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:44">(<expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:14">==</operator> <literal type="number" pos:start="85:16" pos:end="85:16">0</literal> <operator pos:start="85:18" pos:end="85:19">&amp;&amp;</operator> <operator pos:start="85:21" pos:end="85:21">!</operator><name pos:start="85:22" pos:end="85:43"><name pos:start="85:22" pos:end="85:23">bs</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:43">enable_write_cache</name></name></expr>)</condition> <block pos:start="85:46" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:32">

        <expr_stmt pos:start="87:9" pos:end="87:32"><expr pos:start="87:9" pos:end="87:31"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:31"><name pos:start="87:15" pos:end="87:27">bdrv_co_flush</name><argument_list pos:start="87:28" pos:end="87:31">(<argument pos:start="87:29" pos:end="87:30"><expr pos:start="87:29" pos:end="87:30"><name pos:start="87:29" pos:end="87:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:47"><expr pos:start="93:5" pos:end="93:46"><call pos:start="93:5" pos:end="93:46"><name pos:start="93:5" pos:end="93:18">bdrv_set_dirty</name><argument_list pos:start="93:19" pos:end="93:46">(<argument pos:start="93:20" pos:end="93:21"><expr pos:start="93:20" pos:end="93:21"><name pos:start="93:20" pos:end="93:21">bs</name></expr></argument>, <argument pos:start="93:24" pos:end="93:33"><expr pos:start="93:24" pos:end="93:33"><name pos:start="93:24" pos:end="93:33">sector_num</name></expr></argument>, <argument pos:start="93:36" pos:end="93:45"><expr pos:start="93:36" pos:end="93:45"><name pos:start="93:36" pos:end="93:45">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:66">(<expr pos:start="97:9" pos:end="97:65"><name pos:start="97:9" pos:end="97:35"><name pos:start="97:9" pos:end="97:10">bs</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:17">stats</name><operator pos:start="97:18" pos:end="97:18">.</operator><name pos:start="97:19" pos:end="97:35">wr_highest_sector</name></name> <operator pos:start="97:37" pos:end="97:37">&lt;</operator> <name pos:start="97:39" pos:end="97:48">sector_num</name> <operator pos:start="97:50" pos:end="97:50">+</operator> <name pos:start="97:52" pos:end="97:61">nb_sectors</name> <operator pos:start="97:63" pos:end="97:63">-</operator> <literal type="number" pos:start="97:65" pos:end="97:65">1</literal></expr>)</condition> <block pos:start="97:68" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:66">

        <expr_stmt pos:start="99:9" pos:end="99:66"><expr pos:start="99:9" pos:end="99:65"><name pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:10">bs</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:17">stats</name><operator pos:start="99:18" pos:end="99:18">.</operator><name pos:start="99:19" pos:end="99:35">wr_highest_sector</name></name> <operator pos:start="99:37" pos:end="99:37">=</operator> <name pos:start="99:39" pos:end="99:48">sector_num</name> <operator pos:start="99:50" pos:end="99:50">+</operator> <name pos:start="99:52" pos:end="99:61">nb_sectors</name> <operator pos:start="99:63" pos:end="99:63">-</operator> <literal type="number" pos:start="99:65" pos:end="99:65">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:33">(<expr pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:10">bs</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:20">growable</name></name> <operator pos:start="103:22" pos:end="103:23">&amp;&amp;</operator> <name pos:start="103:25" pos:end="103:27">ret</name> <operator pos:start="103:29" pos:end="103:30">&gt;=</operator> <literal type="number" pos:start="103:32" pos:end="103:32">0</literal></expr>)</condition> <block pos:start="103:35" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:76">

        <expr_stmt pos:start="105:9" pos:end="105:76"><expr pos:start="105:9" pos:end="105:75"><name pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:10">bs</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:25">total_sectors</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <call pos:start="105:29" pos:end="105:75"><name pos:start="105:29" pos:end="105:31">MAX</name><argument_list pos:start="105:32" pos:end="105:75">(<argument pos:start="105:33" pos:end="105:49"><expr pos:start="105:33" pos:end="105:49"><name pos:start="105:33" pos:end="105:49"><name pos:start="105:33" pos:end="105:34">bs</name><operator pos:start="105:35" pos:end="105:36">-&gt;</operator><name pos:start="105:37" pos:end="105:49">total_sectors</name></name></expr></argument>, <argument pos:start="105:52" pos:end="105:74"><expr pos:start="105:52" pos:end="105:74"><name pos:start="105:52" pos:end="105:61">sector_num</name> <operator pos:start="105:63" pos:end="105:63">+</operator> <name pos:start="105:65" pos:end="105:74">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="111:5" pos:end="111:15">return <expr pos:start="111:12" pos:end="111:14"><name pos:start="111:12" pos:end="111:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
