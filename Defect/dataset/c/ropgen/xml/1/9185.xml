<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9185.c" pos:tabs="8"><function pos:start="1:1" pos:end="120:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">read_matrix_params</name><parameter_list pos:start="1:30" pos:end="1:91">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:46">MLPDecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">m</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:70"><decl pos:start="1:52" pos:end="1:70"><type pos:start="1:52" pos:end="1:70"><name pos:start="1:52" pos:end="1:59">unsigned</name> <name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:70">substr</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:90"><decl pos:start="1:73" pos:end="1:90"><type pos:start="1:73" pos:end="1:90"><name pos:start="1:73" pos:end="1:85">GetBitContext</name> <modifier pos:start="1:87" pos:end="1:87">*</modifier></type><name pos:start="1:88" pos:end="1:90">gbp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="120:1">{<block_content pos:start="5:5" pos:end="118:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">SubStream</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:40">= <expr pos:start="5:20" pos:end="5:40"><operator pos:start="5:20" pos:end="5:20">&amp;</operator><name pos:start="5:21" pos:end="5:40"><name pos:start="5:21" pos:end="5:21">m</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">substream</name><index pos:start="5:33" pos:end="5:40">[<expr pos:start="5:34" pos:end="5:39"><name pos:start="5:34" pos:end="5:39">substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:20">mat</name></decl>, <decl pos:start="7:23" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:23" pos:end="7:24">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="13:59"><decl pos:start="9:5" pos:end="13:58"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:36">max_primitive_matrices</name> <init pos:start="9:38" pos:end="13:58">= <expr pos:start="9:40" pos:end="13:58"><ternary pos:start="9:40" pos:end="13:58"><condition pos:start="9:40" pos:end="11:38"><expr pos:start="9:40" pos:end="9:76"><name pos:start="9:40" pos:end="9:57"><name pos:start="9:40" pos:end="9:40">m</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:47">avctx</name><operator pos:start="9:48" pos:end="9:49">-&gt;</operator><name pos:start="9:50" pos:end="9:57">codec_id</name></name> <operator pos:start="9:59" pos:end="9:60">==</operator> <name pos:start="9:62" pos:end="9:76">AV_CODEC_ID_MLP</name></expr>

                                     ?</condition><then pos:start="11:40" pos:end="11:55"> <expr pos:start="11:40" pos:end="11:55"><name pos:start="11:40" pos:end="11:55">MAX_MATRICES_MLP</name></expr>

                                     </then><else pos:start="13:38" pos:end="13:58">: <expr pos:start="13:40" pos:end="13:58"><name pos:start="13:40" pos:end="13:58">MAX_MATRICES_TRUEHD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:32">(<expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:9">m</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:25">matrix_changed</name></name><operator pos:start="17:26" pos:end="17:27">++</operator> <operator pos:start="17:29" pos:end="17:29">&gt;</operator> <literal type="number" pos:start="17:31" pos:end="17:31">1</literal></expr>)</condition> <block pos:start="17:34" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:35">

        <expr_stmt pos:start="19:9" pos:end="19:91"><expr pos:start="19:9" pos:end="19:90"><call pos:start="19:9" pos:end="19:90"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:90">(<argument pos:start="19:16" pos:end="19:23"><expr pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:16">m</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:23">avctx</name></name></expr></argument>, <argument pos:start="19:26" pos:end="19:37"><expr pos:start="19:26" pos:end="19:37"><name pos:start="19:26" pos:end="19:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:40" pos:end="19:89"><expr pos:start="19:40" pos:end="19:89"><literal type="string" pos:start="19:40" pos:end="19:89">"Matrices may change only once per access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:35">return <expr pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:29">num_primitive_matrices</name></name> <operator pos:start="27:31" pos:end="27:31">=</operator> <call pos:start="27:33" pos:end="27:48"><name pos:start="27:33" pos:end="27:40">get_bits</name><argument_list pos:start="27:41" pos:end="27:48">(<argument pos:start="27:42" pos:end="27:44"><expr pos:start="27:42" pos:end="27:44"><name pos:start="27:42" pos:end="27:44">gbp</name></expr></argument>, <argument pos:start="27:47" pos:end="27:47"><expr pos:start="27:47" pos:end="27:47"><literal type="number" pos:start="27:47" pos:end="27:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="42:5"><if pos:start="31:5" pos:end="42:5">if <condition pos:start="31:8" pos:end="31:59">(<expr pos:start="31:9" pos:end="31:58"><name pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:33">num_primitive_matrices</name></name> <operator pos:start="31:35" pos:end="31:35">&gt;</operator> <name pos:start="31:37" pos:end="31:58">max_primitive_matrices</name></expr>)</condition> <block pos:start="31:61" pos:end="42:5">{<block_content pos:start="33:9" pos:end="40:35">

        <expr_stmt pos:start="33:9" pos:end="37:39"><expr pos:start="33:9" pos:end="37:38"><call pos:start="33:9" pos:end="37:38"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="37:38">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:16">m</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">avctx</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="35:16" pos:end="35:74"><expr pos:start="35:16" pos:end="35:74"><literal type="string" pos:start="35:16" pos:end="35:74">"Number of primitive matrices cannot be greater than %d.\n"</literal></expr></argument>,

               <argument pos:start="37:16" pos:end="37:37"><expr pos:start="37:16" pos:end="37:37"><name pos:start="37:16" pos:end="37:37">max_primitive_matrices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <return pos:start="40:9" pos:end="40:35">return <expr pos:start="40:16" pos:end="40:34"><name pos:start="40:16" pos:end="40:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="46:5" pos:end="114:5">for <control pos:start="46:9" pos:end="46:57">(<init pos:start="46:10" pos:end="46:17"><expr pos:start="46:10" pos:end="46:16"><name pos:start="46:10" pos:end="46:12">mat</name> <operator pos:start="46:14" pos:end="46:14">=</operator> <literal type="number" pos:start="46:16" pos:end="46:16">0</literal></expr>;</init> <condition pos:start="46:19" pos:end="46:50"><expr pos:start="46:19" pos:end="46:49"><name pos:start="46:19" pos:end="46:21">mat</name> <operator pos:start="46:23" pos:end="46:23">&lt;</operator> <name pos:start="46:25" pos:end="46:49"><name pos:start="46:25" pos:end="46:25">s</name><operator pos:start="46:26" pos:end="46:27">-&gt;</operator><name pos:start="46:28" pos:end="46:49">num_primitive_matrices</name></name></expr>;</condition> <incr pos:start="46:52" pos:end="46:56"><expr pos:start="46:52" pos:end="46:56"><name pos:start="46:52" pos:end="46:54">mat</name><operator pos:start="46:55" pos:end="46:56">++</operator></expr></incr>)</control> <block pos:start="46:59" pos:end="114:5">{<block_content pos:start="48:9" pos:end="112:43">

        <decl_stmt pos:start="48:9" pos:end="48:32"><decl pos:start="48:9" pos:end="48:21"><type pos:start="48:9" pos:end="48:11"><name pos:start="48:9" pos:end="48:11">int</name></type> <name pos:start="48:13" pos:end="48:21">frac_bits</name></decl>, <decl pos:start="48:24" pos:end="48:31"><type ref="prev" pos:start="48:9" pos:end="48:11"/><name pos:start="48:24" pos:end="48:31">max_chan</name></decl>;</decl_stmt>

        <expr_stmt pos:start="50:9" pos:end="50:49"><expr pos:start="50:9" pos:end="50:48"><name pos:start="50:9" pos:end="50:29"><name pos:start="50:9" pos:end="50:9">s</name><operator pos:start="50:10" pos:end="50:11">-&gt;</operator><name pos:start="50:12" pos:end="50:24">matrix_out_ch</name><index pos:start="50:25" pos:end="50:29">[<expr pos:start="50:26" pos:end="50:28"><name pos:start="50:26" pos:end="50:28">mat</name></expr>]</index></name> <operator pos:start="50:31" pos:end="50:31">=</operator> <call pos:start="50:33" pos:end="50:48"><name pos:start="50:33" pos:end="50:40">get_bits</name><argument_list pos:start="50:41" pos:end="50:48">(<argument pos:start="50:42" pos:end="50:44"><expr pos:start="50:42" pos:end="50:44"><name pos:start="50:42" pos:end="50:44">gbp</name></expr></argument>, <argument pos:start="50:47" pos:end="50:47"><expr pos:start="50:47" pos:end="50:47"><literal type="number" pos:start="50:47" pos:end="50:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="52:9" pos:end="52:49"><expr pos:start="52:9" pos:end="52:48"><name pos:start="52:9" pos:end="52:17">frac_bits</name>             <operator pos:start="52:31" pos:end="52:31">=</operator> <call pos:start="52:33" pos:end="52:48"><name pos:start="52:33" pos:end="52:40">get_bits</name><argument_list pos:start="52:41" pos:end="52:48">(<argument pos:start="52:42" pos:end="52:44"><expr pos:start="52:42" pos:end="52:44"><name pos:start="52:42" pos:end="52:44">gbp</name></expr></argument>, <argument pos:start="52:47" pos:end="52:47"><expr pos:start="52:47" pos:end="52:47"><literal type="number" pos:start="52:47" pos:end="52:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="54:9" pos:end="54:47"><expr pos:start="54:9" pos:end="54:46"><name pos:start="54:9" pos:end="54:29"><name pos:start="54:9" pos:end="54:9">s</name><operator pos:start="54:10" pos:end="54:11">-&gt;</operator><name pos:start="54:12" pos:end="54:21">lsb_bypass</name>   <index pos:start="54:25" pos:end="54:29">[<expr pos:start="54:26" pos:end="54:28"><name pos:start="54:26" pos:end="54:28">mat</name></expr>]</index></name> <operator pos:start="54:31" pos:end="54:31">=</operator> <call pos:start="54:33" pos:end="54:46"><name pos:start="54:33" pos:end="54:41">get_bits1</name><argument_list pos:start="54:42" pos:end="54:46">(<argument pos:start="54:43" pos:end="54:45"><expr pos:start="54:43" pos:end="54:45"><name pos:start="54:43" pos:end="54:45">gbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="58:9" pos:end="68:9"><if pos:start="58:9" pos:end="68:9">if <condition pos:start="58:12" pos:end="58:58">(<expr pos:start="58:13" pos:end="58:57"><name pos:start="58:13" pos:end="58:33"><name pos:start="58:13" pos:end="58:13">s</name><operator pos:start="58:14" pos:end="58:15">-&gt;</operator><name pos:start="58:16" pos:end="58:28">matrix_out_ch</name><index pos:start="58:29" pos:end="58:33">[<expr pos:start="58:30" pos:end="58:32"><name pos:start="58:30" pos:end="58:32">mat</name></expr>]</index></name> <operator pos:start="58:35" pos:end="58:35">&gt;</operator> <name pos:start="58:37" pos:end="58:57"><name pos:start="58:37" pos:end="58:37">s</name><operator pos:start="58:38" pos:end="58:39">-&gt;</operator><name pos:start="58:40" pos:end="58:57">max_matrix_channel</name></name></expr>)</condition> <block pos:start="58:60" pos:end="68:9">{<block_content pos:start="60:13" pos:end="66:39">

            <expr_stmt pos:start="60:13" pos:end="64:43"><expr pos:start="60:13" pos:end="64:42"><call pos:start="60:13" pos:end="64:42"><name pos:start="60:13" pos:end="60:18">av_log</name><argument_list pos:start="60:19" pos:end="64:42">(<argument pos:start="60:20" pos:end="60:27"><expr pos:start="60:20" pos:end="60:27"><name pos:start="60:20" pos:end="60:27"><name pos:start="60:20" pos:end="60:20">m</name><operator pos:start="60:21" pos:end="60:22">-&gt;</operator><name pos:start="60:23" pos:end="60:27">avctx</name></name></expr></argument>, <argument pos:start="60:30" pos:end="60:41"><expr pos:start="60:30" pos:end="60:41"><name pos:start="60:30" pos:end="60:41">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="62:21" pos:end="62:75"><expr pos:start="62:21" pos:end="62:75"><literal type="string" pos:start="62:21" pos:end="62:75">"Invalid channel %d specified as output from matrix.\n"</literal></expr></argument>,

                    <argument pos:start="64:21" pos:end="64:41"><expr pos:start="64:21" pos:end="64:41"><name pos:start="64:21" pos:end="64:41"><name pos:start="64:21" pos:end="64:21">s</name><operator pos:start="64:22" pos:end="64:23">-&gt;</operator><name pos:start="64:24" pos:end="64:36">matrix_out_ch</name><index pos:start="64:37" pos:end="64:41">[<expr pos:start="64:38" pos:end="64:40"><name pos:start="64:38" pos:end="64:40">mat</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="66:13" pos:end="66:39">return <expr pos:start="66:20" pos:end="66:38"><name pos:start="66:20" pos:end="66:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="70:9" pos:end="78:9"><if pos:start="70:9" pos:end="78:9">if <condition pos:start="70:12" pos:end="70:27">(<expr pos:start="70:13" pos:end="70:26"><name pos:start="70:13" pos:end="70:21">frac_bits</name> <operator pos:start="70:23" pos:end="70:23">&gt;</operator> <literal type="number" pos:start="70:25" pos:end="70:26">14</literal></expr>)</condition> <block pos:start="70:29" pos:end="78:9">{<block_content pos:start="72:13" pos:end="76:39">

            <expr_stmt pos:start="72:13" pos:end="74:61"><expr pos:start="72:13" pos:end="74:60"><call pos:start="72:13" pos:end="74:60"><name pos:start="72:13" pos:end="72:18">av_log</name><argument_list pos:start="72:19" pos:end="74:60">(<argument pos:start="72:20" pos:end="72:27"><expr pos:start="72:20" pos:end="72:27"><name pos:start="72:20" pos:end="72:27"><name pos:start="72:20" pos:end="72:20">m</name><operator pos:start="72:21" pos:end="72:22">-&gt;</operator><name pos:start="72:23" pos:end="72:27">avctx</name></name></expr></argument>, <argument pos:start="72:30" pos:end="72:41"><expr pos:start="72:30" pos:end="72:41"><name pos:start="72:30" pos:end="72:41">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="74:21" pos:end="74:59"><expr pos:start="74:21" pos:end="74:59"><literal type="string" pos:start="74:21" pos:end="74:59">"Too many fractional bits specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="76:13" pos:end="76:39">return <expr pos:start="76:20" pos:end="76:38"><name pos:start="76:20" pos:end="76:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="82:9" pos:end="82:41"><expr pos:start="82:9" pos:end="82:40"><name pos:start="82:9" pos:end="82:16">max_chan</name> <operator pos:start="82:18" pos:end="82:18">=</operator> <name pos:start="82:20" pos:end="82:40"><name pos:start="82:20" pos:end="82:20">s</name><operator pos:start="82:21" pos:end="82:22">-&gt;</operator><name pos:start="82:23" pos:end="82:40">max_matrix_channel</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="84:9" pos:end="86:24"><if pos:start="84:9" pos:end="86:24">if <condition pos:start="84:12" pos:end="84:27">(<expr pos:start="84:13" pos:end="84:26"><operator pos:start="84:13" pos:end="84:13">!</operator><name pos:start="84:14" pos:end="84:26"><name pos:start="84:14" pos:end="84:14">s</name><operator pos:start="84:15" pos:end="84:16">-&gt;</operator><name pos:start="84:17" pos:end="84:26">noise_type</name></name></expr>)</condition><block type="pseudo" pos:start="86:13" pos:end="86:24"><block_content pos:start="86:13" pos:end="86:24">

            <expr_stmt pos:start="86:13" pos:end="86:24"><expr pos:start="86:13" pos:end="86:23"><name pos:start="86:13" pos:end="86:20">max_chan</name><operator pos:start="86:21" pos:end="86:22">+=</operator><literal type="number" pos:start="86:23" pos:end="86:23">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="90:9" pos:end="102:9">for <control pos:start="90:13" pos:end="90:42">(<init pos:start="90:14" pos:end="90:20"><expr pos:start="90:14" pos:end="90:19"><name pos:start="90:14" pos:end="90:15">ch</name> <operator pos:start="90:17" pos:end="90:17">=</operator> <literal type="number" pos:start="90:19" pos:end="90:19">0</literal></expr>;</init> <condition pos:start="90:22" pos:end="90:36"><expr pos:start="90:22" pos:end="90:35"><name pos:start="90:22" pos:end="90:23">ch</name> <operator pos:start="90:25" pos:end="90:26">&lt;=</operator> <name pos:start="90:28" pos:end="90:35">max_chan</name></expr>;</condition> <incr pos:start="90:38" pos:end="90:41"><expr pos:start="90:38" pos:end="90:41"><name pos:start="90:38" pos:end="90:39">ch</name><operator pos:start="90:40" pos:end="90:41">++</operator></expr></incr>)</control> <block pos:start="90:44" pos:end="102:9">{<block_content pos:start="92:13" pos:end="100:75">

            <decl_stmt pos:start="92:13" pos:end="92:30"><decl pos:start="92:13" pos:end="92:29"><type pos:start="92:13" pos:end="92:15"><name pos:start="92:13" pos:end="92:15">int</name></type> <name pos:start="92:17" pos:end="92:25">coeff_val</name> <init pos:start="92:27" pos:end="92:29">= <expr pos:start="92:29" pos:end="92:29"><literal type="number" pos:start="92:29" pos:end="92:29">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="94:13" pos:end="96:58"><if pos:start="94:13" pos:end="96:58">if <condition pos:start="94:16" pos:end="94:31">(<expr pos:start="94:17" pos:end="94:30"><call pos:start="94:17" pos:end="94:30"><name pos:start="94:17" pos:end="94:25">get_bits1</name><argument_list pos:start="94:26" pos:end="94:30">(<argument pos:start="94:27" pos:end="94:29"><expr pos:start="94:27" pos:end="94:29"><name pos:start="94:27" pos:end="94:29">gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="96:17" pos:end="96:58"><block_content pos:start="96:17" pos:end="96:58">

                <expr_stmt pos:start="96:17" pos:end="96:58"><expr pos:start="96:17" pos:end="96:57"><name pos:start="96:17" pos:end="96:25">coeff_val</name> <operator pos:start="96:27" pos:end="96:27">=</operator> <call pos:start="96:29" pos:end="96:57"><name pos:start="96:29" pos:end="96:37">get_sbits</name><argument_list pos:start="96:38" pos:end="96:57">(<argument pos:start="96:39" pos:end="96:41"><expr pos:start="96:39" pos:end="96:41"><name pos:start="96:39" pos:end="96:41">gbp</name></expr></argument>, <argument pos:start="96:44" pos:end="96:56"><expr pos:start="96:44" pos:end="96:56"><name pos:start="96:44" pos:end="96:52">frac_bits</name> <operator pos:start="96:54" pos:end="96:54">+</operator> <literal type="number" pos:start="96:56" pos:end="96:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="100:13" pos:end="100:75"><expr pos:start="100:13" pos:end="100:74"><name pos:start="100:13" pos:end="100:36"><name pos:start="100:13" pos:end="100:13">s</name><operator pos:start="100:14" pos:end="100:15">-&gt;</operator><name pos:start="100:16" pos:end="100:27">matrix_coeff</name><index pos:start="100:28" pos:end="100:32">[<expr pos:start="100:29" pos:end="100:31"><name pos:start="100:29" pos:end="100:31">mat</name></expr>]</index><index pos:start="100:33" pos:end="100:36">[<expr pos:start="100:34" pos:end="100:35"><name pos:start="100:34" pos:end="100:35">ch</name></expr>]</index></name> <operator pos:start="100:38" pos:end="100:38">=</operator> <name pos:start="100:40" pos:end="100:48">coeff_val</name> <operator pos:start="100:50" pos:end="100:50">*</operator> <operator pos:start="100:52" pos:end="100:52">(</operator><literal type="number" pos:start="100:53" pos:end="100:53">1</literal> <operator pos:start="100:55" pos:end="100:56">&lt;&lt;</operator> <operator pos:start="100:58" pos:end="100:58">(</operator><literal type="number" pos:start="100:59" pos:end="100:62">14</literal> <operator pos:start="100:62" pos:end="100:62">-</operator> <name pos:start="100:64" pos:end="100:72">frac_bits</name><operator pos:start="100:73" pos:end="100:73">)</operator><operator pos:start="100:74" pos:end="100:74">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="106:9" pos:end="112:43"><if pos:start="106:9" pos:end="108:58">if <condition pos:start="106:12" pos:end="106:26">(<expr pos:start="106:13" pos:end="106:25"><name pos:start="106:13" pos:end="106:25"><name pos:start="106:13" pos:end="106:13">s</name><operator pos:start="106:14" pos:end="106:15">-&gt;</operator><name pos:start="106:16" pos:end="106:25">noise_type</name></name></expr>)</condition><block type="pseudo" pos:start="108:13" pos:end="108:58"><block_content pos:start="108:13" pos:end="108:58">

            <expr_stmt pos:start="108:13" pos:end="108:58"><expr pos:start="108:13" pos:end="108:57"><name pos:start="108:13" pos:end="108:38"><name pos:start="108:13" pos:end="108:13">s</name><operator pos:start="108:14" pos:end="108:15">-&gt;</operator><name pos:start="108:16" pos:end="108:33">matrix_noise_shift</name><index pos:start="108:34" pos:end="108:38">[<expr pos:start="108:35" pos:end="108:37"><name pos:start="108:35" pos:end="108:37">mat</name></expr>]</index></name> <operator pos:start="108:40" pos:end="108:40">=</operator> <call pos:start="108:42" pos:end="108:57"><name pos:start="108:42" pos:end="108:49">get_bits</name><argument_list pos:start="108:50" pos:end="108:57">(<argument pos:start="108:51" pos:end="108:53"><expr pos:start="108:51" pos:end="108:53"><name pos:start="108:51" pos:end="108:53">gbp</name></expr></argument>, <argument pos:start="108:56" pos:end="108:56"><expr pos:start="108:56" pos:end="108:56"><literal type="number" pos:start="108:56" pos:end="108:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="110:9" pos:end="112:43">else<block type="pseudo" pos:start="112:13" pos:end="112:43"><block_content pos:start="112:13" pos:end="112:43">

            <expr_stmt pos:start="112:13" pos:end="112:43"><expr pos:start="112:13" pos:end="112:42"><name pos:start="112:13" pos:end="112:38"><name pos:start="112:13" pos:end="112:13">s</name><operator pos:start="112:14" pos:end="112:15">-&gt;</operator><name pos:start="112:16" pos:end="112:33">matrix_noise_shift</name><index pos:start="112:34" pos:end="112:38">[<expr pos:start="112:35" pos:end="112:37"><name pos:start="112:35" pos:end="112:37">mat</name></expr>]</index></name> <operator pos:start="112:40" pos:end="112:40">=</operator> <literal type="number" pos:start="112:42" pos:end="112:42">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="118:5" pos:end="118:13">return <expr pos:start="118:12" pos:end="118:12"><literal type="number" pos:start="118:12" pos:end="118:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
