<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6104.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">emulated_initfn</name><parameter_list pos:start="1:27" pos:end="1:47">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:40">CCIDCardState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">base</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:13">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">EmulatedState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">card</name> <init pos:start="5:25" pos:end="5:62">= <expr pos:start="5:27" pos:end="5:62"><call pos:start="5:27" pos:end="5:62"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:62">(<argument pos:start="5:37" pos:end="5:49"><expr pos:start="5:37" pos:end="5:49"><name pos:start="5:37" pos:end="5:49">EmulatedState</name></expr></argument>, <argument pos:start="5:52" pos:end="5:55"><expr pos:start="5:52" pos:end="5:55"><name pos:start="5:52" pos:end="5:55">base</name></expr></argument>, <argument pos:start="5:58" pos:end="5:61"><expr pos:start="5:58" pos:end="5:61"><name pos:start="5:58" pos:end="5:61">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18">VCardEmulError</name></type> <name pos:start="7:20" pos:end="7:22">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:19">EnumTable</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:27">ptable</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><call pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:17">QSIMPLEQ_INIT</name><argument_list pos:start="13:18" pos:end="13:36">(<argument pos:start="13:19" pos:end="13:35"><expr pos:start="13:19" pos:end="13:35"><operator pos:start="13:19" pos:end="13:19">&amp;</operator><name pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:23">card</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:35">event_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><call pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:17">QSIMPLEQ_INIT</name><argument_list pos:start="15:18" pos:end="15:41">(<argument pos:start="15:19" pos:end="15:40"><expr pos:start="15:19" pos:end="15:40"><operator pos:start="15:19" pos:end="15:19">&amp;</operator><name pos:start="15:20" pos:end="15:40"><name pos:start="15:20" pos:end="15:23">card</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:40">guest_apdu_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><call pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:19">qemu_mutex_init</name><argument_list pos:start="17:20" pos:end="17:44">(<argument pos:start="17:21" pos:end="17:43"><expr pos:start="17:21" pos:end="17:43"><operator pos:start="17:21" pos:end="17:21">&amp;</operator><name pos:start="17:22" pos:end="17:43"><name pos:start="17:22" pos:end="17:25">card</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:43">event_list_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:19">qemu_mutex_init</name><argument_list pos:start="19:20" pos:end="19:41">(<argument pos:start="19:21" pos:end="19:40"><expr pos:start="19:21" pos:end="19:40"><operator pos:start="19:21" pos:end="19:21">&amp;</operator><name pos:start="19:22" pos:end="19:40"><name pos:start="19:22" pos:end="19:25">card</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:40">vreader_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><call pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:19">qemu_mutex_init</name><argument_list pos:start="21:20" pos:end="21:45">(<argument pos:start="21:21" pos:end="21:44"><expr pos:start="21:21" pos:end="21:44"><operator pos:start="21:21" pos:end="21:21">&amp;</operator><name pos:start="21:22" pos:end="21:44"><name pos:start="21:22" pos:end="21:25">card</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:44">handle_apdu_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><call pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:18">qemu_cond_init</name><argument_list pos:start="23:19" pos:end="23:43">(<argument pos:start="23:20" pos:end="23:42"><expr pos:start="23:20" pos:end="23:42"><operator pos:start="23:20" pos:end="23:20">&amp;</operator><name pos:start="23:21" pos:end="23:42"><name pos:start="23:21" pos:end="23:24">card</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:42">handle_apdu_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:8">card</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:16">reader</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <name pos:start="25:20" pos:end="25:23">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:8">card</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:26">quit_apdu_thread</name></name> <operator pos:start="27:28" pos:end="27:28">=</operator> <literal type="number" pos:start="27:30" pos:end="27:30">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:38">(<expr pos:start="29:9" pos:end="29:37"><call pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:27">init_pipe_signaling</name><argument_list pos:start="29:28" pos:end="29:33">(<argument pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><name pos:start="29:29" pos:end="29:32">card</name></expr></argument>)</argument_list></call> <operator pos:start="29:35" pos:end="29:35">&lt;</operator> <literal type="number" pos:start="29:37" pos:end="29:37">0</literal></expr>)</condition> <block pos:start="29:40" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:18">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:80"><expr pos:start="35:5" pos:end="35:79"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:8">card</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:17">backend</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <call pos:start="35:21" pos:end="35:79"><name pos:start="35:21" pos:end="35:37">parse_enumeration</name><argument_list pos:start="35:38" pos:end="35:79">(<argument pos:start="35:39" pos:end="35:55"><expr pos:start="35:39" pos:end="35:55"><name pos:start="35:39" pos:end="35:55"><name pos:start="35:39" pos:end="35:42">card</name><operator pos:start="35:43" pos:end="35:44">-&gt;</operator><name pos:start="35:45" pos:end="35:55">backend_str</name></name></expr></argument>, <argument pos:start="35:58" pos:end="35:75"><expr pos:start="35:58" pos:end="35:75"><name pos:start="35:58" pos:end="35:75">backend_enum_table</name></expr></argument>, <argument pos:start="35:78" pos:end="35:78"><expr pos:start="35:78" pos:end="35:78"><literal type="number" pos:start="35:78" pos:end="35:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="49:5">if <condition pos:start="37:8" pos:end="37:27">(<expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:12">card</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:21">backend</name></name> <operator pos:start="37:23" pos:end="37:24">==</operator> <literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>)</condition> <block pos:start="37:29" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:18">

        <expr_stmt pos:start="39:9" pos:end="39:53"><expr pos:start="39:9" pos:end="39:52"><call pos:start="39:9" pos:end="39:52"><name pos:start="39:9" pos:end="39:14">printf</name><argument_list pos:start="39:15" pos:end="39:52">(<argument pos:start="39:16" pos:end="39:51"><expr pos:start="39:16" pos:end="39:51"><literal type="string" pos:start="39:16" pos:end="39:51">"unknown backend, must be one of:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="41:9" pos:end="45:9">for <control pos:start="41:13" pos:end="41:73">(<init pos:start="41:14" pos:end="41:41"><expr pos:start="41:14" pos:end="41:40"><name pos:start="41:14" pos:end="41:19">ptable</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:40">backend_enum_table</name></expr>;</init> <condition pos:start="41:43" pos:end="41:63"><expr pos:start="41:43" pos:end="41:62"><name pos:start="41:43" pos:end="41:54"><name pos:start="41:43" pos:end="41:48">ptable</name><operator pos:start="41:49" pos:end="41:50">-&gt;</operator><name pos:start="41:51" pos:end="41:54">name</name></name> <operator pos:start="41:56" pos:end="41:57">!=</operator> <name pos:start="41:59" pos:end="41:62">NULL</name></expr>;</condition> <incr pos:start="41:65" pos:end="41:72"><expr pos:start="41:65" pos:end="41:72"><operator pos:start="41:65" pos:end="41:66">++</operator><name pos:start="41:67" pos:end="41:72">ptable</name></expr></incr>)</control> <block pos:start="41:75" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:41">

            <expr_stmt pos:start="43:13" pos:end="43:41"><expr pos:start="43:13" pos:end="43:40"><call pos:start="43:13" pos:end="43:40"><name pos:start="43:13" pos:end="43:18">printf</name><argument_list pos:start="43:19" pos:end="43:40">(<argument pos:start="43:20" pos:end="43:25"><expr pos:start="43:20" pos:end="43:25"><literal type="string" pos:start="43:20" pos:end="43:25">"%s\n"</literal></expr></argument>, <argument pos:start="43:28" pos:end="43:39"><expr pos:start="43:28" pos:end="43:39"><name pos:start="43:28" pos:end="43:39"><name pos:start="43:28" pos:end="43:33">ptable</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:39">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:80">/* TODO: a passthru backened that works on local machine. third card type?*/</comment>

    <if_stmt pos:start="55:5" pos:end="99:5"><if pos:start="55:5" pos:end="71:5">if <condition pos:start="55:8" pos:end="55:46">(<expr pos:start="55:9" pos:end="55:45"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:12">card</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:21">backend</name></name> <operator pos:start="55:23" pos:end="55:24">==</operator> <name pos:start="55:26" pos:end="55:45">BACKEND_CERTIFICATES</name></expr>)</condition> <block pos:start="55:48" pos:end="71:5">{<block_content pos:start="57:9" pos:end="69:9">

        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:78">(<expr pos:start="57:13" pos:end="57:77"><name pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:16">card</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:23">cert1</name></name> <operator pos:start="57:25" pos:end="57:26">!=</operator> <name pos:start="57:28" pos:end="57:31">NULL</name> <operator pos:start="57:33" pos:end="57:34">&amp;&amp;</operator> <name pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:39">card</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:46">cert2</name></name> <operator pos:start="57:48" pos:end="57:49">!=</operator> <name pos:start="57:51" pos:end="57:54">NULL</name> <operator pos:start="57:56" pos:end="57:57">&amp;&amp;</operator> <name pos:start="57:59" pos:end="57:69"><name pos:start="57:59" pos:end="57:62">card</name><operator pos:start="57:63" pos:end="57:64">-&gt;</operator><name pos:start="57:65" pos:end="57:69">cert3</name></name> <operator pos:start="57:71" pos:end="57:72">!=</operator> <name pos:start="57:74" pos:end="57:77">NULL</name></expr>)</condition> <block pos:start="57:80" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:68">

            <expr_stmt pos:start="59:13" pos:end="59:68"><expr pos:start="59:13" pos:end="59:67"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:67"><name pos:start="59:19" pos:end="59:61">emulated_initialize_vcard_from_certificates</name><argument_list pos:start="59:62" pos:end="59:67">(<argument pos:start="59:63" pos:end="59:66"><expr pos:start="59:63" pos:end="59:66"><name pos:start="59:63" pos:end="59:66">card</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="69:9">else <block pos:start="61:16" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:22">

            <expr_stmt pos:start="63:13" pos:end="65:65"><expr pos:start="63:13" pos:end="65:64"><call pos:start="63:13" pos:end="65:64"><name pos:start="63:13" pos:end="63:18">printf</name><argument_list pos:start="63:19" pos:end="65:64">(<argument pos:start="63:20" pos:end="65:44"><expr pos:start="63:20" pos:end="65:44"><literal type="string" pos:start="63:20" pos:end="63:61">"%s: you must provide all three certs for"</literal>

                   <literal type="string" pos:start="65:20" pos:end="65:44">" certificates backend\n"</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:63"><expr pos:start="65:47" pos:end="65:63"><name pos:start="65:47" pos:end="65:63">EMULATED_DEV_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:22">return <expr pos:start="67:20" pos:end="67:21"><operator pos:start="67:20" pos:end="67:20">-</operator><literal type="number" pos:start="67:21" pos:end="67:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="99:5">else <block pos:start="71:12" pos:end="99:5">{<block_content pos:start="73:9" pos:end="97:41">

        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:50">(<expr pos:start="73:13" pos:end="73:49"><name pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:16">card</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:25">backend</name></name> <operator pos:start="73:27" pos:end="73:28">!=</operator> <name pos:start="73:30" pos:end="73:49">BACKEND_NSS_EMULATED</name></expr>)</condition> <block pos:start="73:52" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:22">

            <expr_stmt pos:start="75:13" pos:end="79:43"><expr pos:start="75:13" pos:end="79:42"><call pos:start="75:13" pos:end="79:42"><name pos:start="75:13" pos:end="75:18">printf</name><argument_list pos:start="75:19" pos:end="79:42">(<argument pos:start="75:20" pos:end="77:24"><expr pos:start="75:20" pos:end="77:24"><literal type="string" pos:start="75:20" pos:end="75:79">"%s: bad backend specified. The options are:\n%s (default),"</literal>

                <literal type="string" pos:start="77:17" pos:end="77:24">" %s.\n"</literal></expr></argument>, <argument pos:start="77:27" pos:end="77:43"><expr pos:start="77:27" pos:end="77:43"><name pos:start="77:27" pos:end="77:43">EMULATED_DEV_NAME</name></expr></argument>, <argument pos:start="77:46" pos:end="77:70"><expr pos:start="77:46" pos:end="77:70"><name pos:start="77:46" pos:end="77:70">BACKEND_NSS_EMULATED_NAME</name></expr></argument>,

                <argument pos:start="79:17" pos:end="79:41"><expr pos:start="79:17" pos:end="79:41"><name pos:start="79:17" pos:end="79:41">BACKEND_CERTIFICATES_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:78">(<expr pos:start="85:13" pos:end="85:77"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:16">card</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:23">cert1</name></name> <operator pos:start="85:25" pos:end="85:26">!=</operator> <name pos:start="85:28" pos:end="85:31">NULL</name> <operator pos:start="85:33" pos:end="85:34">||</operator> <name pos:start="85:36" pos:end="85:46"><name pos:start="85:36" pos:end="85:39">card</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:46">cert2</name></name> <operator pos:start="85:48" pos:end="85:49">!=</operator> <name pos:start="85:51" pos:end="85:54">NULL</name> <operator pos:start="85:56" pos:end="85:57">||</operator> <name pos:start="85:59" pos:end="85:69"><name pos:start="85:59" pos:end="85:62">card</name><operator pos:start="85:63" pos:end="85:64">-&gt;</operator><name pos:start="85:65" pos:end="85:69">cert3</name></name> <operator pos:start="85:71" pos:end="85:72">!=</operator> <name pos:start="85:74" pos:end="85:77">NULL</name></expr>)</condition> <block pos:start="85:80" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:22">

            <expr_stmt pos:start="87:13" pos:end="89:38"><expr pos:start="87:13" pos:end="89:37"><call pos:start="87:13" pos:end="89:37"><name pos:start="87:13" pos:end="87:18">printf</name><argument_list pos:start="87:19" pos:end="89:37">(<argument pos:start="87:20" pos:end="87:77"><expr pos:start="87:20" pos:end="87:77"><literal type="string" pos:start="87:20" pos:end="87:77">"%s: unexpected cert parameters to nss emulated backend\n"</literal></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:36"><expr pos:start="89:20" pos:end="89:36"><name pos:start="89:20" pos:end="89:36">EMULATED_DEV_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:22">return <expr pos:start="91:20" pos:end="91:21"><operator pos:start="91:20" pos:end="91:20">-</operator><literal type="number" pos:start="91:21" pos:end="91:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="95:9" pos:end="95:61">/* default to mirroring the local hardware readers */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:40"><name pos:start="97:15" pos:end="97:34">wrap_vcard_emul_init</name><argument_list pos:start="97:35" pos:end="97:40">(<argument pos:start="97:36" pos:end="97:39"><expr pos:start="97:36" pos:end="97:39"><name pos:start="97:36" pos:end="97:39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:29">(<expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:14">!=</operator> <name pos:start="101:16" pos:end="101:28">VCARD_EMUL_OK</name></expr>)</condition> <block pos:start="101:31" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:18">

        <expr_stmt pos:start="103:9" pos:end="103:70"><expr pos:start="103:9" pos:end="103:69"><call pos:start="103:9" pos:end="103:69"><name pos:start="103:9" pos:end="103:14">printf</name><argument_list pos:start="103:15" pos:end="103:69">(<argument pos:start="103:16" pos:end="103:49"><expr pos:start="103:16" pos:end="103:49"><literal type="string" pos:start="103:16" pos:end="103:49">"%s: failed to initialize vcard\n"</literal></expr></argument>, <argument pos:start="103:52" pos:end="103:68"><expr pos:start="103:52" pos:end="103:68"><name pos:start="103:52" pos:end="103:68">EMULATED_DEV_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:18">return <expr pos:start="105:16" pos:end="105:17"><operator pos:start="105:16" pos:end="105:16">-</operator><literal type="number" pos:start="105:17" pos:end="105:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="111:45"><expr pos:start="109:5" pos:end="111:44"><call pos:start="109:5" pos:end="111:44"><name pos:start="109:5" pos:end="109:22">qemu_thread_create</name><argument_list pos:start="109:23" pos:end="111:44">(<argument pos:start="109:24" pos:end="109:45"><expr pos:start="109:24" pos:end="109:45"><operator pos:start="109:24" pos:end="109:24">&amp;</operator><name pos:start="109:25" pos:end="109:45"><name pos:start="109:25" pos:end="109:28">card</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:45">event_thread_id</name></name></expr></argument>, <argument pos:start="109:48" pos:end="109:59"><expr pos:start="109:48" pos:end="109:59"><name pos:start="109:48" pos:end="109:59">event_thread</name></expr></argument>, <argument pos:start="109:62" pos:end="109:65"><expr pos:start="109:62" pos:end="109:65"><name pos:start="109:62" pos:end="109:65">card</name></expr></argument>,

                       <argument pos:start="111:24" pos:end="111:43"><expr pos:start="111:24" pos:end="111:43"><name pos:start="111:24" pos:end="111:43">QEMU_THREAD_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:45"><expr pos:start="113:5" pos:end="115:44"><call pos:start="113:5" pos:end="115:44"><name pos:start="113:5" pos:end="113:22">qemu_thread_create</name><argument_list pos:start="113:23" pos:end="115:44">(<argument pos:start="113:24" pos:end="113:44"><expr pos:start="113:24" pos:end="113:44"><operator pos:start="113:24" pos:end="113:24">&amp;</operator><name pos:start="113:25" pos:end="113:44"><name pos:start="113:25" pos:end="113:28">card</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:44">apdu_thread_id</name></name></expr></argument>, <argument pos:start="113:47" pos:end="113:64"><expr pos:start="113:47" pos:end="113:64"><name pos:start="113:47" pos:end="113:64">handle_apdu_thread</name></expr></argument>, <argument pos:start="113:67" pos:end="113:70"><expr pos:start="113:67" pos:end="113:70"><name pos:start="113:67" pos:end="113:70">card</name></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:43"><expr pos:start="115:24" pos:end="115:43"><name pos:start="115:24" pos:end="115:43">QEMU_THREAD_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="117:5" pos:end="117:13">return <expr pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
