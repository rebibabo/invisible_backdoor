<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23202.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">usb_msd_handle_data</name><parameter_list pos:start="1:31" pos:end="1:60">(<parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:40">USBDevice</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dev</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:56">USBPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MSDState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:33">= <expr pos:start="5:19" pos:end="5:33"><operator pos:start="5:19" pos:end="5:19">(</operator><name pos:start="5:20" pos:end="5:27">MSDState</name> <operator pos:start="5:29" pos:end="5:29">*</operator><operator pos:start="5:30" pos:end="5:30">)</operator><name pos:start="5:31" pos:end="5:33">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">usb_msd_cbw</name></name></type> <name pos:start="9:24" pos:end="9:26">cbw</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:17">devep</name> <init pos:start="11:19" pos:end="11:28">= <expr pos:start="11:21" pos:end="11:28"><name pos:start="11:21" pos:end="11:28"><name pos:start="11:21" pos:end="11:21">p</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:28">devep</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">data</name> <init pos:start="13:19" pos:end="13:27">= <expr pos:start="13:21" pos:end="13:27"><name pos:start="13:21" pos:end="13:27"><name pos:start="13:21" pos:end="13:21">p</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:27">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">len</name> <init pos:start="15:13" pos:end="15:20">= <expr pos:start="15:15" pos:end="15:20"><name pos:start="15:15" pos:end="15:20"><name pos:start="15:15" pos:end="15:15">p</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:20">len</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="19:5" pos:end="291:5">switch <condition pos:start="19:12" pos:end="19:19">(<expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:13">p</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">pid</name></name></expr>)</condition> <block pos:start="19:21" pos:end="291:5">{<block_content pos:start="21:5" pos:end="289:14">

    <case pos:start="21:5" pos:end="21:23">case <expr pos:start="21:10" pos:end="21:22"><name pos:start="21:10" pos:end="21:22">USB_TOKEN_OUT</name></expr>:</case>

        <if_stmt pos:start="23:9" pos:end="25:22"><if pos:start="23:9" pos:end="25:22">if <condition pos:start="23:12" pos:end="23:23">(<expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:17">devep</name> <operator pos:start="23:19" pos:end="23:20">!=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">2</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:22"><block_content pos:start="25:13" pos:end="25:22">

            <goto pos:start="25:13" pos:end="25:22">goto <name pos:start="25:18" pos:end="25:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <switch pos:start="29:9" pos:end="165:9">switch <condition pos:start="29:16" pos:end="29:24">(<expr pos:start="29:17" pos:end="29:23"><name pos:start="29:17" pos:end="29:23"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:23">mode</name></name></expr>)</condition> <block pos:start="29:26" pos:end="165:9">{<block_content pos:start="31:9" pos:end="163:22">

        <case pos:start="31:9" pos:end="31:26">case <expr pos:start="31:14" pos:end="31:25"><name pos:start="31:14" pos:end="31:25">USB_MSDM_CBW</name></expr>:</case>

            <if_stmt pos:start="33:13" pos:end="39:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:26">(<expr pos:start="33:17" pos:end="33:25"><name pos:start="33:17" pos:end="33:19">len</name> <operator pos:start="33:21" pos:end="33:22">!=</operator> <literal type="number" pos:start="33:24" pos:end="33:25">31</literal></expr>)</condition> <block pos:start="33:28" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:26">

                <expr_stmt pos:start="35:17" pos:end="35:57"><expr pos:start="35:17" pos:end="35:56"><call pos:start="35:17" pos:end="35:56"><name pos:start="35:17" pos:end="35:23">fprintf</name><argument_list pos:start="35:24" pos:end="35:56">(<argument pos:start="35:25" pos:end="35:30"><expr pos:start="35:25" pos:end="35:30"><name pos:start="35:25" pos:end="35:30">stderr</name></expr></argument>, <argument pos:start="35:33" pos:end="35:55"><expr pos:start="35:33" pos:end="35:55"><literal type="string" pos:start="35:33" pos:end="35:55">"usb-msd: Bad CBW size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="37:17" pos:end="37:26">goto <name pos:start="37:22" pos:end="37:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:35"><expr pos:start="41:13" pos:end="41:34"><call pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:18">memcpy</name><argument_list pos:start="41:19" pos:end="41:34">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:23">cbw</name></expr></argument>, <argument pos:start="41:26" pos:end="41:29"><expr pos:start="41:26" pos:end="41:29"><name pos:start="41:26" pos:end="41:29">data</name></expr></argument>, <argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><literal type="number" pos:start="41:32" pos:end="41:33">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="51:13"><if pos:start="43:13" pos:end="51:13">if <condition pos:start="43:16" pos:end="43:51">(<expr pos:start="43:17" pos:end="43:50"><call pos:start="43:17" pos:end="43:36"><name pos:start="43:17" pos:end="43:27">le32_to_cpu</name><argument_list pos:start="43:28" pos:end="43:36">(<argument pos:start="43:29" pos:end="43:35"><expr pos:start="43:29" pos:end="43:35"><name pos:start="43:29" pos:end="43:35"><name pos:start="43:29" pos:end="43:31">cbw</name><operator pos:start="43:32" pos:end="43:32">.</operator><name pos:start="43:33" pos:end="43:35">sig</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:38" pos:end="43:39">!=</operator> <literal type="number" pos:start="43:41" pos:end="43:50">0x43425355</literal></expr>)</condition> <block pos:start="43:53" pos:end="51:13">{<block_content pos:start="45:17" pos:end="49:26">

                <expr_stmt pos:start="45:17" pos:end="47:46"><expr pos:start="45:17" pos:end="47:45"><call pos:start="45:17" pos:end="47:45"><name pos:start="45:17" pos:end="45:23">fprintf</name><argument_list pos:start="45:24" pos:end="47:45">(<argument pos:start="45:25" pos:end="45:30"><expr pos:start="45:25" pos:end="45:30"><name pos:start="45:25" pos:end="45:30">stderr</name></expr></argument>, <argument pos:start="45:33" pos:end="45:63"><expr pos:start="45:33" pos:end="45:63"><literal type="string" pos:start="45:33" pos:end="45:63">"usb-msd: Bad signature %08x\n"</literal></expr></argument>,

                        <argument pos:start="47:25" pos:end="47:44"><expr pos:start="47:25" pos:end="47:44"><call pos:start="47:25" pos:end="47:44"><name pos:start="47:25" pos:end="47:35">le32_to_cpu</name><argument_list pos:start="47:36" pos:end="47:44">(<argument pos:start="47:37" pos:end="47:43"><expr pos:start="47:37" pos:end="47:43"><name pos:start="47:37" pos:end="47:43"><name pos:start="47:37" pos:end="47:39">cbw</name><operator pos:start="47:40" pos:end="47:40">.</operator><name pos:start="47:41" pos:end="47:43">sig</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="49:17" pos:end="49:26">goto <name pos:start="49:22" pos:end="49:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:52"><expr pos:start="53:13" pos:end="53:51"><call pos:start="53:13" pos:end="53:51"><name pos:start="53:13" pos:end="53:19">DPRINTF</name><argument_list pos:start="53:20" pos:end="53:51">(<argument pos:start="53:21" pos:end="53:41"><expr pos:start="53:21" pos:end="53:41"><literal type="string" pos:start="53:21" pos:end="53:41">"Command on LUN %d\n"</literal></expr></argument>, <argument pos:start="53:44" pos:end="53:50"><expr pos:start="53:44" pos:end="53:50"><name pos:start="53:44" pos:end="53:50"><name pos:start="53:44" pos:end="53:46">cbw</name><operator pos:start="53:47" pos:end="53:47">.</operator><name pos:start="53:48" pos:end="53:50">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="61:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:29">(<expr pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:19">cbw</name><operator pos:start="55:20" pos:end="55:20">.</operator><name pos:start="55:21" pos:end="55:23">lun</name></name> <operator pos:start="55:25" pos:end="55:26">!=</operator> <literal type="number" pos:start="55:28" pos:end="55:28">0</literal></expr>)</condition> <block pos:start="55:31" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:26">

                <expr_stmt pos:start="57:17" pos:end="57:66"><expr pos:start="57:17" pos:end="57:65"><call pos:start="57:17" pos:end="57:65"><name pos:start="57:17" pos:end="57:23">fprintf</name><argument_list pos:start="57:24" pos:end="57:65">(<argument pos:start="57:25" pos:end="57:30"><expr pos:start="57:25" pos:end="57:30"><name pos:start="57:25" pos:end="57:30">stderr</name></expr></argument>, <argument pos:start="57:33" pos:end="57:55"><expr pos:start="57:33" pos:end="57:55"><literal type="string" pos:start="57:33" pos:end="57:55">"usb-msd: Bad LUN %d\n"</literal></expr></argument>, <argument pos:start="57:58" pos:end="57:64"><expr pos:start="57:58" pos:end="57:64"><name pos:start="57:58" pos:end="57:64"><name pos:start="57:58" pos:end="57:60">cbw</name><operator pos:start="57:61" pos:end="57:61">.</operator><name pos:start="57:62" pos:end="57:64">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="59:17" pos:end="59:26">goto <name pos:start="59:22" pos:end="59:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:42"><expr pos:start="63:13" pos:end="63:41"><name pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:18">tag</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="63:41"><name pos:start="63:22" pos:end="63:32">le32_to_cpu</name><argument_list pos:start="63:33" pos:end="63:41">(<argument pos:start="63:34" pos:end="63:40"><expr pos:start="63:34" pos:end="63:40"><name pos:start="63:34" pos:end="63:40"><name pos:start="63:34" pos:end="63:36">cbw</name><operator pos:start="63:37" pos:end="63:37">.</operator><name pos:start="63:38" pos:end="63:40">tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:52"><expr pos:start="65:13" pos:end="65:51"><name pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:23">data_len</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:51"><name pos:start="65:27" pos:end="65:37">le32_to_cpu</name><argument_list pos:start="65:38" pos:end="65:51">(<argument pos:start="65:39" pos:end="65:50"><expr pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:41">cbw</name><operator pos:start="65:42" pos:end="65:42">.</operator><name pos:start="65:43" pos:end="65:50">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="79:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:33">(<expr pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:27"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:27">data_len</name></name> <operator pos:start="67:29" pos:end="67:30">==</operator> <literal type="number" pos:start="67:32" pos:end="67:32">0</literal></expr>)</condition> <block pos:start="67:35" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:39">

                <expr_stmt pos:start="69:17" pos:end="69:39"><expr pos:start="69:17" pos:end="69:38"><name pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:23">mode</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:38">USB_MSDM_CSW</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="71:15" pos:end="75:13">else if <condition pos:start="71:23" pos:end="71:40">(<expr pos:start="71:24" pos:end="71:39"><name pos:start="71:24" pos:end="71:32"><name pos:start="71:24" pos:end="71:26">cbw</name><operator pos:start="71:27" pos:end="71:27">.</operator><name pos:start="71:28" pos:end="71:32">flags</name></name> <operator pos:start="71:34" pos:end="71:34">&amp;</operator> <literal type="number" pos:start="71:36" pos:end="71:39">0x80</literal></expr>)</condition> <block pos:start="71:42" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:42">

                <expr_stmt pos:start="73:17" pos:end="73:42"><expr pos:start="73:17" pos:end="73:41"><name pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:23">mode</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:41">USB_MSDM_DATAIN</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="79:13">else <block pos:start="75:20" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:43">

                <expr_stmt pos:start="77:17" pos:end="77:43"><expr pos:start="77:17" pos:end="77:42"><name pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:17">s</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:23">mode</name></name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:42">USB_MSDM_DATAOUT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="83:65"><expr pos:start="81:13" pos:end="83:64"><call pos:start="81:13" pos:end="83:64"><name pos:start="81:13" pos:end="81:19">DPRINTF</name><argument_list pos:start="81:20" pos:end="83:64">(<argument pos:start="81:21" pos:end="81:66"><expr pos:start="81:21" pos:end="81:66"><literal type="string" pos:start="81:21" pos:end="81:66">"Command tag 0x%x flags %08x len %d data %d\n"</literal></expr></argument>,

                    <argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:26">tag</name></name></expr></argument>, <argument pos:start="83:29" pos:end="83:37"><expr pos:start="83:29" pos:end="83:37"><name pos:start="83:29" pos:end="83:37"><name pos:start="83:29" pos:end="83:31">cbw</name><operator pos:start="83:32" pos:end="83:32">.</operator><name pos:start="83:33" pos:end="83:37">flags</name></name></expr></argument>, <argument pos:start="83:40" pos:end="83:50"><expr pos:start="83:40" pos:end="83:50"><name pos:start="83:40" pos:end="83:50"><name pos:start="83:40" pos:end="83:42">cbw</name><operator pos:start="83:43" pos:end="83:43">.</operator><name pos:start="83:44" pos:end="83:50">cmd_len</name></name></expr></argument>, <argument pos:start="83:53" pos:end="83:63"><expr pos:start="83:53" pos:end="83:63"><name pos:start="83:53" pos:end="83:63"><name pos:start="83:53" pos:end="83:53">s</name><operator pos:start="83:54" pos:end="83:55">-&gt;</operator><name pos:start="83:56" pos:end="83:63">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:22">residue</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:23">scsi_len</name></name> <operator pos:start="87:25" pos:end="87:25">=</operator> <literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:64"><expr pos:start="89:13" pos:end="89:63"><name pos:start="89:13" pos:end="89:18"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:18">req</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <call pos:start="89:22" pos:end="89:63"><name pos:start="89:22" pos:end="89:33">scsi_req_new</name><argument_list pos:start="89:34" pos:end="89:63">(<argument pos:start="89:35" pos:end="89:45"><expr pos:start="89:35" pos:end="89:45"><name pos:start="89:35" pos:end="89:45"><name pos:start="89:35" pos:end="89:35">s</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:45">scsi_dev</name></name></expr></argument>, <argument pos:start="89:48" pos:end="89:53"><expr pos:start="89:48" pos:end="89:53"><name pos:start="89:48" pos:end="89:53"><name pos:start="89:48" pos:end="89:48">s</name><operator pos:start="89:49" pos:end="89:50">-&gt;</operator><name pos:start="89:51" pos:end="89:53">tag</name></name></expr></argument>, <argument pos:start="89:56" pos:end="89:56"><expr pos:start="89:56" pos:end="89:56"><literal type="number" pos:start="89:56" pos:end="89:56">0</literal></expr></argument>, <argument pos:start="89:59" pos:end="89:62"><expr pos:start="89:59" pos:end="89:62"><name pos:start="89:59" pos:end="89:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:46"><expr pos:start="91:13" pos:end="91:45"><call pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:28">scsi_req_enqueue</name><argument_list pos:start="91:29" pos:end="91:45">(<argument pos:start="91:30" pos:end="91:35"><expr pos:start="91:30" pos:end="91:35"><name pos:start="91:30" pos:end="91:35"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:35">req</name></name></expr></argument>, <argument pos:start="91:38" pos:end="91:44"><expr pos:start="91:38" pos:end="91:44"><name pos:start="91:38" pos:end="91:44"><name pos:start="91:38" pos:end="91:40">cbw</name><operator pos:start="91:41" pos:end="91:41">.</operator><name pos:start="91:42" pos:end="91:44">cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="93:13" pos:end="95:36">/* ??? Should check that USB and SCSI data transfer

               directions match.  */</comment>

            <if_stmt pos:start="97:13" pos:end="101:13"><if pos:start="97:13" pos:end="101:13">if <condition pos:start="97:16" pos:end="97:59">(<expr pos:start="97:17" pos:end="97:58"><name pos:start="97:17" pos:end="97:23"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:23">mode</name></name> <operator pos:start="97:25" pos:end="97:26">!=</operator> <name pos:start="97:28" pos:end="97:39">USB_MSDM_CSW</name> <operator pos:start="97:41" pos:end="97:42">&amp;&amp;</operator> <name pos:start="97:44" pos:end="97:53"><name pos:start="97:44" pos:end="97:44">s</name><operator pos:start="97:45" pos:end="97:46">-&gt;</operator><name pos:start="97:47" pos:end="97:53">residue</name></name> <operator pos:start="97:55" pos:end="97:56">==</operator> <literal type="number" pos:start="97:58" pos:end="97:58">0</literal></expr>)</condition> <block pos:start="97:61" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:42">

                <expr_stmt pos:start="99:17" pos:end="99:42"><expr pos:start="99:17" pos:end="99:41"><call pos:start="99:17" pos:end="99:41"><name pos:start="99:17" pos:end="99:33">scsi_req_continue</name><argument_list pos:start="99:34" pos:end="99:41">(<argument pos:start="99:35" pos:end="99:40"><expr pos:start="99:35" pos:end="99:40"><name pos:start="99:35" pos:end="99:40"><name pos:start="99:35" pos:end="99:35">s</name><operator pos:start="99:36" pos:end="99:37">-&gt;</operator><name pos:start="99:38" pos:end="99:40">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:22"><expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:21">len</name></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>



        <case pos:start="109:9" pos:end="109:30">case <expr pos:start="109:14" pos:end="109:29"><name pos:start="109:14" pos:end="109:29">USB_MSDM_DATAOUT</name></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:58"><expr pos:start="111:13" pos:end="111:57"><call pos:start="111:13" pos:end="111:57"><name pos:start="111:13" pos:end="111:19">DPRINTF</name><argument_list pos:start="111:20" pos:end="111:57">(<argument pos:start="111:21" pos:end="111:38"><expr pos:start="111:21" pos:end="111:38"><literal type="string" pos:start="111:21" pos:end="111:38">"Data out %d/%d\n"</literal></expr></argument>, <argument pos:start="111:41" pos:end="111:43"><expr pos:start="111:41" pos:end="111:43"><name pos:start="111:41" pos:end="111:43">len</name></expr></argument>, <argument pos:start="111:46" pos:end="111:56"><expr pos:start="111:46" pos:end="111:56"><name pos:start="111:46" pos:end="111:56"><name pos:start="111:46" pos:end="111:46">s</name><operator pos:start="111:47" pos:end="111:48">-&gt;</operator><name pos:start="111:49" pos:end="111:56">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="115:26"><if pos:start="113:13" pos:end="115:26">if <condition pos:start="113:16" pos:end="113:34">(<expr pos:start="113:17" pos:end="113:33"><name pos:start="113:17" pos:end="113:19">len</name> <operator pos:start="113:21" pos:end="113:21">&gt;</operator> <name pos:start="113:23" pos:end="113:33"><name pos:start="113:23" pos:end="113:23">s</name><operator pos:start="113:24" pos:end="113:25">-&gt;</operator><name pos:start="113:26" pos:end="113:33">data_len</name></name></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:26"><block_content pos:start="115:17" pos:end="115:26">

                <goto pos:start="115:17" pos:end="115:26">goto <name pos:start="115:22" pos:end="115:25">fail</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:30"><expr pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:22">usb_buf</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <name pos:start="119:26" pos:end="119:29">data</name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:29"><expr pos:start="121:13" pos:end="121:28"><name pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:22">usb_len</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:28">len</name></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="127:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:28">(<expr pos:start="123:17" pos:end="123:27"><name pos:start="123:17" pos:end="123:27"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:27">scsi_len</name></name></expr>)</condition> <block pos:start="123:30" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:37">

                <expr_stmt pos:start="125:17" pos:end="125:37"><expr pos:start="125:17" pos:end="125:36"><call pos:start="125:17" pos:end="125:36"><name pos:start="125:17" pos:end="125:33">usb_msd_copy_data</name><argument_list pos:start="125:34" pos:end="125:36">(<argument pos:start="125:35" pos:end="125:35"><expr pos:start="125:35" pos:end="125:35"><name pos:start="125:35" pos:end="125:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="129:13" pos:end="139:13"><if pos:start="129:13" pos:end="139:13">if <condition pos:start="129:16" pos:end="129:41">(<expr pos:start="129:17" pos:end="129:40"><name pos:start="129:17" pos:end="129:26"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:26">residue</name></name> <operator pos:start="129:28" pos:end="129:29">&amp;&amp;</operator> <name pos:start="129:31" pos:end="129:40"><name pos:start="129:31" pos:end="129:31">s</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:40">usb_len</name></name></expr>)</condition> <block pos:start="129:43" pos:end="139:13">{<block_content pos:start="131:17" pos:end="137:31">

                <expr_stmt pos:start="131:17" pos:end="131:42"><expr pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:27"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:27">data_len</name></name> <operator pos:start="131:29" pos:end="131:30">-=</operator> <name pos:start="131:32" pos:end="131:41"><name pos:start="131:32" pos:end="131:32">s</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:41">usb_len</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="133:17" pos:end="135:43"><if pos:start="133:17" pos:end="135:43">if <condition pos:start="133:20" pos:end="133:37">(<expr pos:start="133:21" pos:end="133:36"><name pos:start="133:21" pos:end="133:31"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:31">data_len</name></name> <operator pos:start="133:33" pos:end="133:34">==</operator> <literal type="number" pos:start="133:36" pos:end="133:36">0</literal></expr>)</condition><block type="pseudo" pos:start="135:21" pos:end="135:43"><block_content pos:start="135:21" pos:end="135:43">

                    <expr_stmt pos:start="135:21" pos:end="135:43"><expr pos:start="135:21" pos:end="135:42"><name pos:start="135:21" pos:end="135:27"><name pos:start="135:21" pos:end="135:21">s</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:27">mode</name></name> <operator pos:start="135:29" pos:end="135:29">=</operator> <name pos:start="135:31" pos:end="135:42">USB_MSDM_CSW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:31"><expr pos:start="137:17" pos:end="137:30"><name pos:start="137:17" pos:end="137:26"><name pos:start="137:17" pos:end="137:17">s</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:26">usb_len</name></name> <operator pos:start="137:28" pos:end="137:28">=</operator> <literal type="number" pos:start="137:30" pos:end="137:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="141:13" pos:end="153:13"><if pos:start="141:13" pos:end="149:13">if <condition pos:start="141:16" pos:end="141:27">(<expr pos:start="141:17" pos:end="141:26"><name pos:start="141:17" pos:end="141:26"><name pos:start="141:17" pos:end="141:17">s</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:26">usb_len</name></name></expr>)</condition> <block pos:start="141:29" pos:end="149:13">{<block_content pos:start="143:17" pos:end="147:36">

                <expr_stmt pos:start="143:17" pos:end="143:52"><expr pos:start="143:17" pos:end="143:51"><call pos:start="143:17" pos:end="143:51"><name pos:start="143:17" pos:end="143:23">DPRINTF</name><argument_list pos:start="143:24" pos:end="143:51">(<argument pos:start="143:25" pos:end="143:47"><expr pos:start="143:25" pos:end="143:47"><literal type="string" pos:start="143:25" pos:end="143:47">"Deferring packet %p\n"</literal></expr></argument>, <argument pos:start="143:50" pos:end="143:50"><expr pos:start="143:50" pos:end="143:50"><name pos:start="143:50" pos:end="143:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:30"><expr pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:25"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:25">packet</name></name> <operator pos:start="145:27" pos:end="145:27">=</operator> <name pos:start="145:29" pos:end="145:29">p</name></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:36"><expr pos:start="147:17" pos:end="147:35"><name pos:start="147:17" pos:end="147:19">ret</name> <operator pos:start="147:21" pos:end="147:21">=</operator> <name pos:start="147:23" pos:end="147:35">USB_RET_ASYNC</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="149:15" pos:end="153:13">else <block pos:start="149:20" pos:end="153:13">{<block_content pos:start="151:17" pos:end="151:26">

                <expr_stmt pos:start="151:17" pos:end="151:26"><expr pos:start="151:17" pos:end="151:25"><name pos:start="151:17" pos:end="151:19">ret</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <name pos:start="151:23" pos:end="151:25">len</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>



        <default pos:start="159:9" pos:end="159:16">default:</default>

            <expr_stmt pos:start="161:13" pos:end="161:56"><expr pos:start="161:13" pos:end="161:55"><call pos:start="161:13" pos:end="161:55"><name pos:start="161:13" pos:end="161:19">DPRINTF</name><argument_list pos:start="161:20" pos:end="161:55">(<argument pos:start="161:21" pos:end="161:49"><expr pos:start="161:21" pos:end="161:49"><literal type="string" pos:start="161:21" pos:end="161:49">"Unexpected write (len %d)\n"</literal></expr></argument>, <argument pos:start="161:52" pos:end="161:54"><expr pos:start="161:52" pos:end="161:54"><name pos:start="161:52" pos:end="161:54">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:22">goto <name pos:start="163:18" pos:end="163:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="167:9" pos:end="167:14">break;</break>



    <case pos:start="171:5" pos:end="171:22">case <expr pos:start="171:10" pos:end="171:21"><name pos:start="171:10" pos:end="171:21">USB_TOKEN_IN</name></expr>:</case>

        <if_stmt pos:start="173:9" pos:end="175:22"><if pos:start="173:9" pos:end="175:22">if <condition pos:start="173:12" pos:end="173:23">(<expr pos:start="173:13" pos:end="173:22"><name pos:start="173:13" pos:end="173:17">devep</name> <operator pos:start="173:19" pos:end="173:20">!=</operator> <literal type="number" pos:start="173:22" pos:end="173:22">1</literal></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:22"><block_content pos:start="175:13" pos:end="175:22">

            <goto pos:start="175:13" pos:end="175:22">goto <name pos:start="175:18" pos:end="175:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <switch pos:start="179:9" pos:end="275:9">switch <condition pos:start="179:16" pos:end="179:24">(<expr pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:23">mode</name></name></expr>)</condition> <block pos:start="179:26" pos:end="275:9">{<block_content pos:start="181:9" pos:end="273:22">

        <case pos:start="181:9" pos:end="181:30">case <expr pos:start="181:14" pos:end="181:29"><name pos:start="181:14" pos:end="181:29">USB_MSDM_DATAOUT</name></expr>:</case>

            <if_stmt pos:start="183:13" pos:end="185:26"><if pos:start="183:13" pos:end="185:26">if <condition pos:start="183:16" pos:end="183:45">(<expr pos:start="183:17" pos:end="183:44"><name pos:start="183:17" pos:end="183:27"><name pos:start="183:17" pos:end="183:17">s</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:27">data_len</name></name> <operator pos:start="183:29" pos:end="183:30">!=</operator> <literal type="number" pos:start="183:32" pos:end="183:32">0</literal> <operator pos:start="183:34" pos:end="183:35">||</operator> <name pos:start="183:37" pos:end="183:39">len</name> <operator pos:start="183:41" pos:end="183:41">&lt;</operator> <literal type="number" pos:start="183:43" pos:end="183:44">13</literal></expr>)</condition><block type="pseudo" pos:start="185:17" pos:end="185:26"><block_content pos:start="185:17" pos:end="185:26">

                <goto pos:start="185:17" pos:end="185:26">goto <name pos:start="185:22" pos:end="185:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block" pos:start="187:13" pos:end="187:54">/* Waiting for SCSI write to complete.  */</comment>

            <expr_stmt pos:start="189:13" pos:end="189:26"><expr pos:start="189:13" pos:end="189:25"><name pos:start="189:13" pos:end="189:21"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:21">packet</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:25">p</name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:32"><expr pos:start="191:13" pos:end="191:31"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <name pos:start="191:19" pos:end="191:31">USB_RET_ASYNC</name></expr>;</expr_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>



        <case pos:start="197:9" pos:end="197:26">case <expr pos:start="197:14" pos:end="197:25"><name pos:start="197:14" pos:end="197:25">USB_MSDM_CSW</name></expr>:</case>

            <expr_stmt pos:start="199:13" pos:end="201:44"><expr pos:start="199:13" pos:end="201:43"><call pos:start="199:13" pos:end="201:43"><name pos:start="199:13" pos:end="199:19">DPRINTF</name><argument_list pos:start="199:20" pos:end="201:43">(<argument pos:start="199:21" pos:end="199:58"><expr pos:start="199:21" pos:end="199:58"><literal type="string" pos:start="199:21" pos:end="199:58">"Command status %d tag 0x%x, len %d\n"</literal></expr></argument>,

                    <argument pos:start="201:21" pos:end="201:29"><expr pos:start="201:21" pos:end="201:29"><name pos:start="201:21" pos:end="201:29"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:29">result</name></name></expr></argument>, <argument pos:start="201:32" pos:end="201:37"><expr pos:start="201:32" pos:end="201:37"><name pos:start="201:32" pos:end="201:37"><name pos:start="201:32" pos:end="201:32">s</name><operator pos:start="201:33" pos:end="201:34">-&gt;</operator><name pos:start="201:35" pos:end="201:37">tag</name></name></expr></argument>, <argument pos:start="201:40" pos:end="201:42"><expr pos:start="201:40" pos:end="201:42"><name pos:start="201:40" pos:end="201:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="205:26"><if pos:start="203:13" pos:end="205:26">if <condition pos:start="203:16" pos:end="203:25">(<expr pos:start="203:17" pos:end="203:24"><name pos:start="203:17" pos:end="203:19">len</name> <operator pos:start="203:21" pos:end="203:21">&lt;</operator> <literal type="number" pos:start="203:23" pos:end="203:24">13</literal></expr>)</condition><block type="pseudo" pos:start="205:17" pos:end="205:26"><block_content pos:start="205:17" pos:end="205:26">

                <goto pos:start="205:17" pos:end="205:26">goto <name pos:start="205:22" pos:end="205:25">fail</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="209:13" pos:end="209:38"><expr pos:start="209:13" pos:end="209:37"><call pos:start="209:13" pos:end="209:37"><name pos:start="209:13" pos:end="209:31">usb_msd_send_status</name><argument_list pos:start="209:32" pos:end="209:37">(<argument pos:start="209:33" pos:end="209:33"><expr pos:start="209:33" pos:end="209:33"><name pos:start="209:33" pos:end="209:33">s</name></expr></argument>, <argument pos:start="209:36" pos:end="209:36"><expr pos:start="209:36" pos:end="209:36"><name pos:start="209:36" pos:end="209:36">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:35"><expr pos:start="211:13" pos:end="211:34"><name pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:19">mode</name></name> <operator pos:start="211:21" pos:end="211:21">=</operator> <name pos:start="211:23" pos:end="211:34">USB_MSDM_CBW</name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:21"><expr pos:start="213:13" pos:end="213:20"><name pos:start="213:13" pos:end="213:15">ret</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <literal type="number" pos:start="213:19" pos:end="213:20">13</literal></expr>;</expr_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>



        <case pos:start="219:9" pos:end="219:29">case <expr pos:start="219:14" pos:end="219:28"><name pos:start="219:14" pos:end="219:28">USB_MSDM_DATAIN</name></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:83"><expr pos:start="221:13" pos:end="221:82"><call pos:start="221:13" pos:end="221:82"><name pos:start="221:13" pos:end="221:19">DPRINTF</name><argument_list pos:start="221:20" pos:end="221:82">(<argument pos:start="221:21" pos:end="221:50"><expr pos:start="221:21" pos:end="221:50"><literal type="string" pos:start="221:21" pos:end="221:50">"Data in %d/%d, scsi_len %d\n"</literal></expr></argument>, <argument pos:start="221:53" pos:end="221:55"><expr pos:start="221:53" pos:end="221:55"><name pos:start="221:53" pos:end="221:55">len</name></expr></argument>, <argument pos:start="221:58" pos:end="221:68"><expr pos:start="221:58" pos:end="221:68"><name pos:start="221:58" pos:end="221:68"><name pos:start="221:58" pos:end="221:58">s</name><operator pos:start="221:59" pos:end="221:60">-&gt;</operator><name pos:start="221:61" pos:end="221:68">data_len</name></name></expr></argument>, <argument pos:start="221:71" pos:end="221:81"><expr pos:start="221:71" pos:end="221:81"><name pos:start="221:71" pos:end="221:81"><name pos:start="221:71" pos:end="221:71">s</name><operator pos:start="221:72" pos:end="221:73">-&gt;</operator><name pos:start="221:74" pos:end="221:81">scsi_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="223:13" pos:end="225:34"><if pos:start="223:13" pos:end="225:34">if <condition pos:start="223:16" pos:end="223:34">(<expr pos:start="223:17" pos:end="223:33"><name pos:start="223:17" pos:end="223:19">len</name> <operator pos:start="223:21" pos:end="223:21">&gt;</operator> <name pos:start="223:23" pos:end="223:33"><name pos:start="223:23" pos:end="223:23">s</name><operator pos:start="223:24" pos:end="223:25">-&gt;</operator><name pos:start="223:26" pos:end="223:33">data_len</name></name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:34"><block_content pos:start="225:17" pos:end="225:34">

                <expr_stmt pos:start="225:17" pos:end="225:34"><expr pos:start="225:17" pos:end="225:33"><name pos:start="225:17" pos:end="225:19">len</name> <operator pos:start="225:21" pos:end="225:21">=</operator> <name pos:start="225:23" pos:end="225:33"><name pos:start="225:23" pos:end="225:23">s</name><operator pos:start="225:24" pos:end="225:25">-&gt;</operator><name pos:start="225:26" pos:end="225:33">data_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:30"><expr pos:start="227:13" pos:end="227:29"><name pos:start="227:13" pos:end="227:22"><name pos:start="227:13" pos:end="227:13">s</name><operator pos:start="227:14" pos:end="227:15">-&gt;</operator><name pos:start="227:16" pos:end="227:22">usb_buf</name></name> <operator pos:start="227:24" pos:end="227:24">=</operator> <name pos:start="227:26" pos:end="227:29">data</name></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:29"><expr pos:start="229:13" pos:end="229:28"><name pos:start="229:13" pos:end="229:22"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:22">usb_len</name></name> <operator pos:start="229:24" pos:end="229:24">=</operator> <name pos:start="229:26" pos:end="229:28">len</name></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="235:13"><if pos:start="231:13" pos:end="235:13">if <condition pos:start="231:16" pos:end="231:28">(<expr pos:start="231:17" pos:end="231:27"><name pos:start="231:17" pos:end="231:27"><name pos:start="231:17" pos:end="231:17">s</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:27">scsi_len</name></name></expr>)</condition> <block pos:start="231:30" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:37">

                <expr_stmt pos:start="233:17" pos:end="233:37"><expr pos:start="233:17" pos:end="233:36"><call pos:start="233:17" pos:end="233:36"><name pos:start="233:17" pos:end="233:33">usb_msd_copy_data</name><argument_list pos:start="233:34" pos:end="233:36">(<argument pos:start="233:35" pos:end="233:35"><expr pos:start="233:35" pos:end="233:35"><name pos:start="233:35" pos:end="233:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="237:13" pos:end="249:13"><if pos:start="237:13" pos:end="249:13">if <condition pos:start="237:16" pos:end="237:41">(<expr pos:start="237:17" pos:end="237:40"><name pos:start="237:17" pos:end="237:26"><name pos:start="237:17" pos:end="237:17">s</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:26">residue</name></name> <operator pos:start="237:28" pos:end="237:29">&amp;&amp;</operator> <name pos:start="237:31" pos:end="237:40"><name pos:start="237:31" pos:end="237:31">s</name><operator pos:start="237:32" pos:end="237:33">-&gt;</operator><name pos:start="237:34" pos:end="237:40">usb_len</name></name></expr>)</condition> <block pos:start="237:43" pos:end="249:13">{<block_content pos:start="239:17" pos:end="247:31">

                <expr_stmt pos:start="239:17" pos:end="239:42"><expr pos:start="239:17" pos:end="239:41"><name pos:start="239:17" pos:end="239:27"><name pos:start="239:17" pos:end="239:17">s</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:27">data_len</name></name> <operator pos:start="239:29" pos:end="239:30">-=</operator> <name pos:start="239:32" pos:end="239:41"><name pos:start="239:32" pos:end="239:32">s</name><operator pos:start="239:33" pos:end="239:34">-&gt;</operator><name pos:start="239:35" pos:end="239:41">usb_len</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:50"><expr pos:start="241:17" pos:end="241:49"><call pos:start="241:17" pos:end="241:49"><name pos:start="241:17" pos:end="241:22">memset</name><argument_list pos:start="241:23" pos:end="241:49">(<argument pos:start="241:24" pos:end="241:33"><expr pos:start="241:24" pos:end="241:33"><name pos:start="241:24" pos:end="241:33"><name pos:start="241:24" pos:end="241:24">s</name><operator pos:start="241:25" pos:end="241:26">-&gt;</operator><name pos:start="241:27" pos:end="241:33">usb_buf</name></name></expr></argument>, <argument pos:start="241:36" pos:end="241:36"><expr pos:start="241:36" pos:end="241:36"><literal type="number" pos:start="241:36" pos:end="241:36">0</literal></expr></argument>, <argument pos:start="241:39" pos:end="241:48"><expr pos:start="241:39" pos:end="241:48"><name pos:start="241:39" pos:end="241:48"><name pos:start="241:39" pos:end="241:39">s</name><operator pos:start="241:40" pos:end="241:41">-&gt;</operator><name pos:start="241:42" pos:end="241:48">usb_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="243:17" pos:end="245:43"><if pos:start="243:17" pos:end="245:43">if <condition pos:start="243:20" pos:end="243:37">(<expr pos:start="243:21" pos:end="243:36"><name pos:start="243:21" pos:end="243:31"><name pos:start="243:21" pos:end="243:21">s</name><operator pos:start="243:22" pos:end="243:23">-&gt;</operator><name pos:start="243:24" pos:end="243:31">data_len</name></name> <operator pos:start="243:33" pos:end="243:34">==</operator> <literal type="number" pos:start="243:36" pos:end="243:36">0</literal></expr>)</condition><block type="pseudo" pos:start="245:21" pos:end="245:43"><block_content pos:start="245:21" pos:end="245:43">

                    <expr_stmt pos:start="245:21" pos:end="245:43"><expr pos:start="245:21" pos:end="245:42"><name pos:start="245:21" pos:end="245:27"><name pos:start="245:21" pos:end="245:21">s</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:27">mode</name></name> <operator pos:start="245:29" pos:end="245:29">=</operator> <name pos:start="245:31" pos:end="245:42">USB_MSDM_CSW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:31"><expr pos:start="247:17" pos:end="247:30"><name pos:start="247:17" pos:end="247:26"><name pos:start="247:17" pos:end="247:17">s</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:26">usb_len</name></name> <operator pos:start="247:28" pos:end="247:28">=</operator> <literal type="number" pos:start="247:30" pos:end="247:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="251:13" pos:end="263:13"><if pos:start="251:13" pos:end="259:13">if <condition pos:start="251:16" pos:end="251:27">(<expr pos:start="251:17" pos:end="251:26"><name pos:start="251:17" pos:end="251:26"><name pos:start="251:17" pos:end="251:17">s</name><operator pos:start="251:18" pos:end="251:19">-&gt;</operator><name pos:start="251:20" pos:end="251:26">usb_len</name></name></expr>)</condition> <block pos:start="251:29" pos:end="259:13">{<block_content pos:start="253:17" pos:end="257:36">

                <expr_stmt pos:start="253:17" pos:end="253:52"><expr pos:start="253:17" pos:end="253:51"><call pos:start="253:17" pos:end="253:51"><name pos:start="253:17" pos:end="253:23">DPRINTF</name><argument_list pos:start="253:24" pos:end="253:51">(<argument pos:start="253:25" pos:end="253:47"><expr pos:start="253:25" pos:end="253:47"><literal type="string" pos:start="253:25" pos:end="253:47">"Deferring packet %p\n"</literal></expr></argument>, <argument pos:start="253:50" pos:end="253:50"><expr pos:start="253:50" pos:end="253:50"><name pos:start="253:50" pos:end="253:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:30"><expr pos:start="255:17" pos:end="255:29"><name pos:start="255:17" pos:end="255:25"><name pos:start="255:17" pos:end="255:17">s</name><operator pos:start="255:18" pos:end="255:19">-&gt;</operator><name pos:start="255:20" pos:end="255:25">packet</name></name> <operator pos:start="255:27" pos:end="255:27">=</operator> <name pos:start="255:29" pos:end="255:29">p</name></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:36"><expr pos:start="257:17" pos:end="257:35"><name pos:start="257:17" pos:end="257:19">ret</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <name pos:start="257:23" pos:end="257:35">USB_RET_ASYNC</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="259:15" pos:end="263:13">else <block pos:start="259:20" pos:end="263:13">{<block_content pos:start="261:17" pos:end="261:26">

                <expr_stmt pos:start="261:17" pos:end="261:26"><expr pos:start="261:17" pos:end="261:25"><name pos:start="261:17" pos:end="261:19">ret</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <name pos:start="261:23" pos:end="261:25">len</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="265:13" pos:end="265:18">break;</break>



        <default pos:start="269:9" pos:end="269:16">default:</default>

            <expr_stmt pos:start="271:13" pos:end="271:55"><expr pos:start="271:13" pos:end="271:54"><call pos:start="271:13" pos:end="271:54"><name pos:start="271:13" pos:end="271:19">DPRINTF</name><argument_list pos:start="271:20" pos:end="271:54">(<argument pos:start="271:21" pos:end="271:48"><expr pos:start="271:21" pos:end="271:48"><literal type="string" pos:start="271:21" pos:end="271:48">"Unexpected read (len %d)\n"</literal></expr></argument>, <argument pos:start="271:51" pos:end="271:53"><expr pos:start="271:51" pos:end="271:53"><name pos:start="271:51" pos:end="271:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="273:13" pos:end="273:22">goto <name pos:start="273:18" pos:end="273:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="277:9" pos:end="277:14">break;</break>



    <default pos:start="281:5" pos:end="281:12">default:</default>

        <expr_stmt pos:start="283:9" pos:end="283:31"><expr pos:start="283:9" pos:end="283:30"><call pos:start="283:9" pos:end="283:30"><name pos:start="283:9" pos:end="283:15">DPRINTF</name><argument_list pos:start="283:16" pos:end="283:30">(<argument pos:start="283:17" pos:end="283:29"><expr pos:start="283:17" pos:end="283:29"><literal type="string" pos:start="283:17" pos:end="283:29">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="285:5" pos:end="285:9"><name pos:start="285:5" pos:end="285:8">fail</name>:</label>

        <expr_stmt pos:start="287:9" pos:end="287:28"><expr pos:start="287:9" pos:end="287:27"><name pos:start="287:9" pos:end="287:11">ret</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <name pos:start="287:15" pos:end="287:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="295:5" pos:end="295:15">return <expr pos:start="295:12" pos:end="295:14"><name pos:start="295:12" pos:end="295:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
