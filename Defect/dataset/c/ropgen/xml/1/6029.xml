<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6029.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:27">read_line</name><parameter_list pos:start="1:28" pos:end="3:41">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">rbuf</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><specifier pos:start="1:61" pos:end="1:65">const</specifier> <name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:78">rbufsize</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:40">rbuflen</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:24">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">RTSPState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">rt</name> <init pos:start="7:19" pos:end="7:32">= <expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:21">s</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">idx</name>       <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name>       <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><operator pos:start="13:5" pos:end="13:5">*</operator><name pos:start="13:6" pos:end="13:12">rbuflen</name>      <operator pos:start="13:19" pos:end="13:19">=</operator> <literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr>;</expr_stmt>



    <do pos:start="17:5" pos:end="41:29">do <block pos:start="17:8" pos:end="41:5">{<block_content pos:start="19:9" pos:end="39:18">

        <expr_stmt pos:start="19:9" pos:end="19:62"><expr pos:start="19:9" pos:end="19:61"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:61"><name pos:start="19:15" pos:end="19:33">ffurl_read_complete</name><argument_list pos:start="19:34" pos:end="19:61">(<argument pos:start="19:35" pos:end="19:45"><expr pos:start="19:35" pos:end="19:45"><name pos:start="19:35" pos:end="19:45"><name pos:start="19:35" pos:end="19:36">rt</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:45">rtsp_hd</name></name></expr></argument>, <argument pos:start="19:48" pos:end="19:57"><expr pos:start="19:48" pos:end="19:57"><name pos:start="19:48" pos:end="19:51">rbuf</name> <operator pos:start="19:53" pos:end="19:53">+</operator> <name pos:start="19:55" pos:end="19:57">idx</name></expr></argument>, <argument pos:start="19:60" pos:end="19:60"><expr pos:start="19:60" pos:end="19:60"><literal type="number" pos:start="19:60" pos:end="19:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:23"><if pos:start="21:9" pos:end="23:23">if <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">&lt;</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:23"><block_content pos:start="23:13" pos:end="23:23">

            <return pos:start="23:13" pos:end="23:23">return <expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="39:18"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:30">(<expr pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:16">rbuf</name><index pos:start="25:17" pos:end="25:21">[<expr pos:start="25:18" pos:end="25:20"><name pos:start="25:18" pos:end="25:20">idx</name></expr>]</index></name> <operator pos:start="25:23" pos:end="25:24">==</operator> <literal type="char" pos:start="25:26" pos:end="25:29">'\r'</literal></expr>)</condition> <block pos:start="25:32" pos:end="29:9">{<block_content>

            <comment type="block" pos:start="27:13" pos:end="27:24">/* Ignore */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="29:11" pos:end="37:9">else if <condition pos:start="29:19" pos:end="29:37">(<expr pos:start="29:20" pos:end="29:36"><name pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:23">rbuf</name><index pos:start="29:24" pos:end="29:28">[<expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">idx</name></expr>]</index></name> <operator pos:start="29:30" pos:end="29:31">==</operator> <literal type="char" pos:start="29:33" pos:end="29:36">'\n'</literal></expr>)</condition> <block pos:start="29:39" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:21">

            <expr_stmt pos:start="31:13" pos:end="31:29"><expr pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:21"><name pos:start="31:13" pos:end="31:16">rbuf</name><index pos:start="31:17" pos:end="31:21">[<expr pos:start="31:18" pos:end="31:20"><name pos:start="31:18" pos:end="31:20">idx</name></expr>]</index></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <literal type="char" pos:start="31:25" pos:end="31:28">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:28"><expr pos:start="33:13" pos:end="33:27"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:20">rbuflen</name>  <operator pos:start="33:23" pos:end="33:23">=</operator> <name pos:start="33:25" pos:end="33:27">idx</name></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:21">return <expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="39:18">else<block type="pseudo" pos:start="39:13" pos:end="39:18"><block_content pos:start="39:13" pos:end="39:18">

            <expr_stmt pos:start="39:13" pos:end="39:18"><expr pos:start="39:13" pos:end="39:17"><name pos:start="39:13" pos:end="39:15">idx</name><operator pos:start="39:16" pos:end="39:17">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block> while <condition pos:start="41:13" pos:end="41:28">(<expr pos:start="41:14" pos:end="41:27"><name pos:start="41:14" pos:end="41:16">idx</name> <operator pos:start="41:18" pos:end="41:18">&lt;</operator> <name pos:start="41:20" pos:end="41:27">rbufsize</name></expr>)</condition>;</do>

    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><call pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:10">av_log</name><argument_list pos:start="43:11" pos:end="43:49">(<argument pos:start="43:12" pos:end="43:12"><expr pos:start="43:12" pos:end="43:12"><name pos:start="43:12" pos:end="43:12">s</name></expr></argument>, <argument pos:start="43:15" pos:end="43:26"><expr pos:start="43:15" pos:end="43:26"><name pos:start="43:15" pos:end="43:26">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:29" pos:end="43:48"><expr pos:start="43:29" pos:end="43:48"><literal type="string" pos:start="43:29" pos:end="43:48">"Message too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="45:5" pos:end="45:24">return <expr pos:start="45:12" pos:end="45:23"><call pos:start="45:12" pos:end="45:23"><name pos:start="45:12" pos:end="45:18">AVERROR</name><argument_list pos:start="45:19" pos:end="45:23">(<argument pos:start="45:20" pos:end="45:22"><expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
