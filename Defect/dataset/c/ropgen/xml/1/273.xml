<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/273.c" pos:tabs="8"><function pos:start="1:1" pos:end="433:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">gdb_handle_packet</name><parameter_list pos:start="1:29" pos:end="1:78">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:37">GDBState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">CPUState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">env</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:77"><decl pos:start="1:58" pos:end="1:77"><type pos:start="1:58" pos:end="1:77"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:77">line_buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="433:1">{<block_content pos:start="5:5" pos:end="431:19">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">ch</name></decl>, <decl pos:start="7:13" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:20">reg_size</name></decl>, <decl pos:start="7:23" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:26">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:18"><name pos:start="9:10" pos:end="9:12">buf</name><index pos:start="9:13" pos:end="9:18">[<expr pos:start="9:14" pos:end="9:17"><literal type="number" pos:start="9:14" pos:end="9:17">4096</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:19">mem_buf</name><index pos:start="11:20" pos:end="11:25">[<expr pos:start="11:21" pos:end="11:24"><literal type="number" pos:start="11:21" pos:end="11:24">4096</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint32_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:23">registers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:21">addr</name></decl>, <decl pos:start="15:24" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:24" pos:end="15:26">len</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="19:1" pos:end="19:16">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:16">DEBUG_GDB</name></cpp:ifdef>

    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:38"><call pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:38">(<argument pos:start="21:12" pos:end="21:27"><expr pos:start="21:12" pos:end="21:27"><literal type="string" pos:start="21:12" pos:end="21:27">"command='%s'\n"</literal></expr></argument>, <argument pos:start="21:30" pos:end="21:37"><expr pos:start="21:30" pos:end="21:37"><name pos:start="21:30" pos:end="21:37">line_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:5">p</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <name pos:start="25:9" pos:end="25:16">line_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:14"><expr pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:6">ch</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <operator pos:start="27:10" pos:end="27:10">*</operator><name pos:start="27:11" pos:end="27:11">p</name><operator pos:start="27:12" pos:end="27:13">++</operator></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="429:5">switch<condition pos:start="29:11" pos:end="29:14">(<expr pos:start="29:12" pos:end="29:13"><name pos:start="29:12" pos:end="29:13">ch</name></expr>)</condition> <block pos:start="29:16" pos:end="429:5">{<block_content pos:start="31:5" pos:end="426:27">

    <case pos:start="31:5" pos:end="31:13">case <expr pos:start="31:10" pos:end="31:12"><literal type="char" pos:start="31:10" pos:end="31:12">'?'</literal></expr>:</case>

        <comment type="block" pos:start="33:9" pos:end="33:70">/* TODO: Make this return the correct value for user-mode.  */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:53"><expr pos:start="35:9" pos:end="35:52"><call pos:start="35:9" pos:end="35:52"><name pos:start="35:9" pos:end="35:16">snprintf</name><argument_list pos:start="35:17" pos:end="35:52">(<argument pos:start="35:18" pos:end="35:20"><expr pos:start="35:18" pos:end="35:20"><name pos:start="35:18" pos:end="35:20">buf</name></expr></argument>, <argument pos:start="35:23" pos:end="35:33"><expr pos:start="35:23" pos:end="35:33"><sizeof pos:start="35:23" pos:end="35:33">sizeof<argument_list pos:start="35:29" pos:end="35:33">(<argument pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><name pos:start="35:30" pos:end="35:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:36" pos:end="35:42"><expr pos:start="35:36" pos:end="35:42"><literal type="string" pos:start="35:36" pos:end="35:42">"S%02x"</literal></expr></argument>, <argument pos:start="35:45" pos:end="35:51"><expr pos:start="35:45" pos:end="35:51"><name pos:start="35:45" pos:end="35:51">SIGTRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><call pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:18">put_packet</name><argument_list pos:start="37:19" pos:end="37:26">(<argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><name pos:start="37:20" pos:end="37:20">s</name></expr></argument>, <argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><name pos:start="37:23" pos:end="37:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="39:9" pos:end="45:11">/* Remove all the breakpoints when this query is issued,

         * because gdb is doing and initial connect and the state

         * should be cleaned up.

         */</comment>




    <case pos:start="50:5" pos:end="50:13">case <expr pos:start="50:10" pos:end="50:12"><literal type="char" pos:start="50:10" pos:end="50:12">'c'</literal></expr>:</case>

        <if_stmt pos:start="52:9" pos:end="88:9"><if pos:start="52:9" pos:end="88:9">if <condition pos:start="52:12" pos:end="52:23">(<expr pos:start="52:13" pos:end="52:22"><operator pos:start="52:13" pos:end="52:13">*</operator><name pos:start="52:14" pos:end="52:14">p</name> <operator pos:start="52:16" pos:end="52:17">!=</operator> <literal type="char" pos:start="52:19" pos:end="52:22">'\0'</literal></expr>)</condition> <block pos:start="52:25" pos:end="88:9">{<block_content pos:start="54:13" pos:end="87:0">

            <expr_stmt pos:start="54:13" pos:end="57:0"><expr pos:start="54:13" pos:end="54:47"><name pos:start="54:13" pos:end="54:16">addr</name> <operator pos:start="54:18" pos:end="54:18">=</operator> <call pos:start="54:20" pos:end="54:47"><name pos:start="54:20" pos:end="54:27">strtoull</name><argument_list pos:start="54:28" pos:end="54:47">(<argument pos:start="54:29" pos:end="54:29"><expr pos:start="54:29" pos:end="54:29"><name pos:start="54:29" pos:end="54:29">p</name></expr></argument>, <argument pos:start="54:32" pos:end="54:42"><expr pos:start="54:32" pos:end="54:42"><operator pos:start="54:32" pos:end="54:32">(</operator><name pos:start="54:33" pos:end="54:36">char</name> <operator pos:start="54:38" pos:end="54:38">*</operator><operator pos:start="54:39" pos:end="54:39">*</operator><operator pos:start="54:40" pos:end="54:40">)</operator><operator pos:start="54:41" pos:end="54:41">&amp;</operator><name pos:start="54:42" pos:end="54:42">p</name></expr></argument>, <argument pos:start="54:45" pos:end="54:46"><expr pos:start="54:45" pos:end="54:46"><literal type="number" pos:start="54:45" pos:end="54:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="56:1" pos:end="56:24">#<cpp:directive pos:start="56:2" pos:end="56:3">if</cpp:directive> <expr pos:start="56:5" pos:end="56:24"><call pos:start="56:5" pos:end="56:24"><name pos:start="56:5" pos:end="56:11">defined</name><argument_list pos:start="56:12" pos:end="56:24">(<argument pos:start="56:13" pos:end="56:23"><expr pos:start="56:13" pos:end="56:23"><name pos:start="56:13" pos:end="56:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="58:13" pos:end="61:0"><expr pos:start="58:13" pos:end="58:27"><name pos:start="58:13" pos:end="58:20"><name pos:start="58:13" pos:end="58:15">env</name><operator pos:start="58:16" pos:end="58:17">-&gt;</operator><name pos:start="58:18" pos:end="58:20">eip</name></name> <operator pos:start="58:22" pos:end="58:22">=</operator> <name pos:start="58:24" pos:end="58:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="60:1" pos:end="60:26">#<cpp:directive pos:start="60:2" pos:end="60:5">elif</cpp:directive> <expr pos:start="60:7" pos:end="60:26"><call pos:start="60:7" pos:end="60:26"><name pos:start="60:7" pos:end="60:13">defined</name> <argument_list pos:start="60:15" pos:end="60:26">(<argument pos:start="60:16" pos:end="60:25"><expr pos:start="60:16" pos:end="60:25"><name pos:start="60:16" pos:end="60:25">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="62:13" pos:end="65:0"><expr pos:start="62:13" pos:end="62:27"><name pos:start="62:13" pos:end="62:20"><name pos:start="62:13" pos:end="62:15">env</name><operator pos:start="62:16" pos:end="62:17">-&gt;</operator><name pos:start="62:18" pos:end="62:20">nip</name></name> <operator pos:start="62:22" pos:end="62:22">=</operator> <name pos:start="62:24" pos:end="62:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="64:1" pos:end="64:28">#<cpp:directive pos:start="64:2" pos:end="64:5">elif</cpp:directive> <expr pos:start="64:7" pos:end="64:28"><call pos:start="64:7" pos:end="64:28"><name pos:start="64:7" pos:end="64:13">defined</name> <argument_list pos:start="64:15" pos:end="64:28">(<argument pos:start="64:16" pos:end="64:27"><expr pos:start="64:16" pos:end="64:27"><name pos:start="64:16" pos:end="64:27">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="66:13" pos:end="66:27"><expr pos:start="66:13" pos:end="66:26"><name pos:start="66:13" pos:end="66:19"><name pos:start="66:13" pos:end="66:15">env</name><operator pos:start="66:16" pos:end="66:17">-&gt;</operator><name pos:start="66:18" pos:end="66:19">pc</name></name> <operator pos:start="66:21" pos:end="66:21">=</operator> <name pos:start="66:23" pos:end="66:26">addr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="68:13" pos:end="71:0"><expr pos:start="68:13" pos:end="68:31"><name pos:start="68:13" pos:end="68:20"><name pos:start="68:13" pos:end="68:15">env</name><operator pos:start="68:16" pos:end="68:17">-&gt;</operator><name pos:start="68:18" pos:end="68:20">npc</name></name> <operator pos:start="68:22" pos:end="68:22">=</operator> <name pos:start="68:24" pos:end="68:27">addr</name> <operator pos:start="68:29" pos:end="68:29">+</operator> <literal type="number" pos:start="68:31" pos:end="68:31">4</literal></expr>;</expr_stmt>

<cpp:elif pos:start="70:1" pos:end="70:26">#<cpp:directive pos:start="70:2" pos:end="70:5">elif</cpp:directive> <expr pos:start="70:7" pos:end="70:26"><call pos:start="70:7" pos:end="70:26"><name pos:start="70:7" pos:end="70:13">defined</name> <argument_list pos:start="70:15" pos:end="70:26">(<argument pos:start="70:16" pos:end="70:25"><expr pos:start="70:16" pos:end="70:25"><name pos:start="70:16" pos:end="70:25">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="72:13" pos:end="75:0"><expr pos:start="72:13" pos:end="72:32"><name pos:start="72:13" pos:end="72:25"><name pos:start="72:13" pos:end="72:15">env</name><operator pos:start="72:16" pos:end="72:17">-&gt;</operator><name pos:start="72:18" pos:end="72:21">regs</name><index pos:start="72:22" pos:end="72:25">[<expr pos:start="72:23" pos:end="72:24"><literal type="number" pos:start="72:23" pos:end="72:24">15</literal></expr>]</index></name> <operator pos:start="72:27" pos:end="72:27">=</operator> <name pos:start="72:29" pos:end="72:32">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="74:1" pos:end="74:26">#<cpp:directive pos:start="74:2" pos:end="74:5">elif</cpp:directive> <expr pos:start="74:7" pos:end="74:26"><call pos:start="74:7" pos:end="74:26"><name pos:start="74:7" pos:end="74:13">defined</name> <argument_list pos:start="74:15" pos:end="74:26">(<argument pos:start="74:16" pos:end="74:25"><expr pos:start="74:16" pos:end="74:25"><name pos:start="74:16" pos:end="74:25">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="76:13" pos:end="79:0"><expr pos:start="76:13" pos:end="76:26"><name pos:start="76:13" pos:end="76:19"><name pos:start="76:13" pos:end="76:15">env</name><operator pos:start="76:16" pos:end="76:17">-&gt;</operator><name pos:start="76:18" pos:end="76:19">pc</name></name> <operator pos:start="76:21" pos:end="76:21">=</operator> <name pos:start="76:23" pos:end="76:26">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="78:1" pos:end="78:27">#<cpp:directive pos:start="78:2" pos:end="78:5">elif</cpp:directive> <expr pos:start="78:7" pos:end="78:27"><call pos:start="78:7" pos:end="78:27"><name pos:start="78:7" pos:end="78:13">defined</name> <argument_list pos:start="78:15" pos:end="78:27">(<argument pos:start="78:16" pos:end="78:26"><expr pos:start="78:16" pos:end="78:26"><name pos:start="78:16" pos:end="78:26">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="80:13" pos:end="83:0"><expr pos:start="80:13" pos:end="80:43"><name pos:start="80:13" pos:end="80:36"><name pos:start="80:13" pos:end="80:15">env</name><operator pos:start="80:16" pos:end="80:17">-&gt;</operator><name pos:start="80:18" pos:end="80:19">PC</name><index pos:start="80:20" pos:end="80:36">[<expr pos:start="80:21" pos:end="80:35"><name pos:start="80:21" pos:end="80:35"><name pos:start="80:21" pos:end="80:23">env</name><operator pos:start="80:24" pos:end="80:25">-&gt;</operator><name pos:start="80:26" pos:end="80:35">current_tc</name></name></expr>]</index></name> <operator pos:start="80:38" pos:end="80:38">=</operator> <name pos:start="80:40" pos:end="80:43">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="82:1" pos:end="82:27">#<cpp:directive pos:start="82:2" pos:end="82:5">elif</cpp:directive> <expr pos:start="82:7" pos:end="82:27"><call pos:start="82:7" pos:end="82:27"><name pos:start="82:7" pos:end="82:13">defined</name> <argument_list pos:start="82:15" pos:end="82:27">(<argument pos:start="82:16" pos:end="82:26"><expr pos:start="82:16" pos:end="82:26"><name pos:start="82:16" pos:end="82:26">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="84:13" pos:end="87:0"><expr pos:start="84:13" pos:end="84:26"><name pos:start="84:13" pos:end="84:19"><name pos:start="84:13" pos:end="84:15">env</name><operator pos:start="84:16" pos:end="84:17">-&gt;</operator><name pos:start="84:18" pos:end="84:19">pc</name></name> <operator pos:start="84:21" pos:end="84:21">=</operator> <name pos:start="84:23" pos:end="84:26">addr</name></expr>;</expr_stmt>

<cpp:endif pos:start="86:1" pos:end="86:6">#<cpp:directive pos:start="86:2" pos:end="86:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>


	<return pos:start="91:9" pos:end="91:23">return <expr pos:start="91:16" pos:end="91:22"><name pos:start="91:16" pos:end="91:22">RS_IDLE</name></expr>;</return>












    <case pos:start="104:5" pos:end="104:13">case <expr pos:start="104:10" pos:end="104:12"><literal type="char" pos:start="104:10" pos:end="104:12">'s'</literal></expr>:</case>

        <if_stmt pos:start="106:9" pos:end="142:9"><if pos:start="106:9" pos:end="142:9">if <condition pos:start="106:12" pos:end="106:23">(<expr pos:start="106:13" pos:end="106:22"><operator pos:start="106:13" pos:end="106:13">*</operator><name pos:start="106:14" pos:end="106:14">p</name> <operator pos:start="106:16" pos:end="106:17">!=</operator> <literal type="char" pos:start="106:19" pos:end="106:22">'\0'</literal></expr>)</condition> <block pos:start="106:25" pos:end="142:9">{<block_content pos:start="108:13" pos:end="141:0">

            <expr_stmt pos:start="108:13" pos:end="111:0"><expr pos:start="108:13" pos:end="108:47"><name pos:start="108:13" pos:end="108:16">addr</name> <operator pos:start="108:18" pos:end="108:18">=</operator> <call pos:start="108:20" pos:end="108:47"><name pos:start="108:20" pos:end="108:27">strtoull</name><argument_list pos:start="108:28" pos:end="108:47">(<argument pos:start="108:29" pos:end="108:29"><expr pos:start="108:29" pos:end="108:29"><name pos:start="108:29" pos:end="108:29">p</name></expr></argument>, <argument pos:start="108:32" pos:end="108:42"><expr pos:start="108:32" pos:end="108:42"><operator pos:start="108:32" pos:end="108:32">(</operator><name pos:start="108:33" pos:end="108:36">char</name> <operator pos:start="108:38" pos:end="108:38">*</operator><operator pos:start="108:39" pos:end="108:39">*</operator><operator pos:start="108:40" pos:end="108:40">)</operator><operator pos:start="108:41" pos:end="108:41">&amp;</operator><name pos:start="108:42" pos:end="108:42">p</name></expr></argument>, <argument pos:start="108:45" pos:end="108:46"><expr pos:start="108:45" pos:end="108:46"><literal type="number" pos:start="108:45" pos:end="108:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="110:1" pos:end="110:24">#<cpp:directive pos:start="110:2" pos:end="110:3">if</cpp:directive> <expr pos:start="110:5" pos:end="110:24"><call pos:start="110:5" pos:end="110:24"><name pos:start="110:5" pos:end="110:11">defined</name><argument_list pos:start="110:12" pos:end="110:24">(<argument pos:start="110:13" pos:end="110:23"><expr pos:start="110:13" pos:end="110:23"><name pos:start="110:13" pos:end="110:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="112:13" pos:end="115:0"><expr pos:start="112:13" pos:end="112:27"><name pos:start="112:13" pos:end="112:20"><name pos:start="112:13" pos:end="112:15">env</name><operator pos:start="112:16" pos:end="112:17">-&gt;</operator><name pos:start="112:18" pos:end="112:20">eip</name></name> <operator pos:start="112:22" pos:end="112:22">=</operator> <name pos:start="112:24" pos:end="112:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="114:1" pos:end="114:26">#<cpp:directive pos:start="114:2" pos:end="114:5">elif</cpp:directive> <expr pos:start="114:7" pos:end="114:26"><call pos:start="114:7" pos:end="114:26"><name pos:start="114:7" pos:end="114:13">defined</name> <argument_list pos:start="114:15" pos:end="114:26">(<argument pos:start="114:16" pos:end="114:25"><expr pos:start="114:16" pos:end="114:25"><name pos:start="114:16" pos:end="114:25">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="116:13" pos:end="119:0"><expr pos:start="116:13" pos:end="116:27"><name pos:start="116:13" pos:end="116:20"><name pos:start="116:13" pos:end="116:15">env</name><operator pos:start="116:16" pos:end="116:17">-&gt;</operator><name pos:start="116:18" pos:end="116:20">nip</name></name> <operator pos:start="116:22" pos:end="116:22">=</operator> <name pos:start="116:24" pos:end="116:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="118:1" pos:end="118:28">#<cpp:directive pos:start="118:2" pos:end="118:5">elif</cpp:directive> <expr pos:start="118:7" pos:end="118:28"><call pos:start="118:7" pos:end="118:28"><name pos:start="118:7" pos:end="118:13">defined</name> <argument_list pos:start="118:15" pos:end="118:28">(<argument pos:start="118:16" pos:end="118:27"><expr pos:start="118:16" pos:end="118:27"><name pos:start="118:16" pos:end="118:27">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="120:13" pos:end="120:27"><expr pos:start="120:13" pos:end="120:26"><name pos:start="120:13" pos:end="120:19"><name pos:start="120:13" pos:end="120:15">env</name><operator pos:start="120:16" pos:end="120:17">-&gt;</operator><name pos:start="120:18" pos:end="120:19">pc</name></name> <operator pos:start="120:21" pos:end="120:21">=</operator> <name pos:start="120:23" pos:end="120:26">addr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="122:13" pos:end="125:0"><expr pos:start="122:13" pos:end="122:31"><name pos:start="122:13" pos:end="122:20"><name pos:start="122:13" pos:end="122:15">env</name><operator pos:start="122:16" pos:end="122:17">-&gt;</operator><name pos:start="122:18" pos:end="122:20">npc</name></name> <operator pos:start="122:22" pos:end="122:22">=</operator> <name pos:start="122:24" pos:end="122:27">addr</name> <operator pos:start="122:29" pos:end="122:29">+</operator> <literal type="number" pos:start="122:31" pos:end="122:31">4</literal></expr>;</expr_stmt>

<cpp:elif pos:start="124:1" pos:end="124:26">#<cpp:directive pos:start="124:2" pos:end="124:5">elif</cpp:directive> <expr pos:start="124:7" pos:end="124:26"><call pos:start="124:7" pos:end="124:26"><name pos:start="124:7" pos:end="124:13">defined</name> <argument_list pos:start="124:15" pos:end="124:26">(<argument pos:start="124:16" pos:end="124:25"><expr pos:start="124:16" pos:end="124:25"><name pos:start="124:16" pos:end="124:25">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="126:13" pos:end="129:0"><expr pos:start="126:13" pos:end="126:32"><name pos:start="126:13" pos:end="126:25"><name pos:start="126:13" pos:end="126:15">env</name><operator pos:start="126:16" pos:end="126:17">-&gt;</operator><name pos:start="126:18" pos:end="126:21">regs</name><index pos:start="126:22" pos:end="126:25">[<expr pos:start="126:23" pos:end="126:24"><literal type="number" pos:start="126:23" pos:end="126:24">15</literal></expr>]</index></name> <operator pos:start="126:27" pos:end="126:27">=</operator> <name pos:start="126:29" pos:end="126:32">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="128:1" pos:end="128:26">#<cpp:directive pos:start="128:2" pos:end="128:5">elif</cpp:directive> <expr pos:start="128:7" pos:end="128:26"><call pos:start="128:7" pos:end="128:26"><name pos:start="128:7" pos:end="128:13">defined</name> <argument_list pos:start="128:15" pos:end="128:26">(<argument pos:start="128:16" pos:end="128:25"><expr pos:start="128:16" pos:end="128:25"><name pos:start="128:16" pos:end="128:25">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="130:13" pos:end="133:0"><expr pos:start="130:13" pos:end="130:26"><name pos:start="130:13" pos:end="130:19"><name pos:start="130:13" pos:end="130:15">env</name><operator pos:start="130:16" pos:end="130:17">-&gt;</operator><name pos:start="130:18" pos:end="130:19">pc</name></name> <operator pos:start="130:21" pos:end="130:21">=</operator> <name pos:start="130:23" pos:end="130:26">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="132:1" pos:end="132:27">#<cpp:directive pos:start="132:2" pos:end="132:5">elif</cpp:directive> <expr pos:start="132:7" pos:end="132:27"><call pos:start="132:7" pos:end="132:27"><name pos:start="132:7" pos:end="132:13">defined</name> <argument_list pos:start="132:15" pos:end="132:27">(<argument pos:start="132:16" pos:end="132:26"><expr pos:start="132:16" pos:end="132:26"><name pos:start="132:16" pos:end="132:26">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="134:13" pos:end="137:0"><expr pos:start="134:13" pos:end="134:43"><name pos:start="134:13" pos:end="134:36"><name pos:start="134:13" pos:end="134:15">env</name><operator pos:start="134:16" pos:end="134:17">-&gt;</operator><name pos:start="134:18" pos:end="134:19">PC</name><index pos:start="134:20" pos:end="134:36">[<expr pos:start="134:21" pos:end="134:35"><name pos:start="134:21" pos:end="134:35"><name pos:start="134:21" pos:end="134:23">env</name><operator pos:start="134:24" pos:end="134:25">-&gt;</operator><name pos:start="134:26" pos:end="134:35">current_tc</name></name></expr>]</index></name> <operator pos:start="134:38" pos:end="134:38">=</operator> <name pos:start="134:40" pos:end="134:43">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="136:1" pos:end="136:27">#<cpp:directive pos:start="136:2" pos:end="136:5">elif</cpp:directive> <expr pos:start="136:7" pos:end="136:27"><call pos:start="136:7" pos:end="136:27"><name pos:start="136:7" pos:end="136:13">defined</name> <argument_list pos:start="136:15" pos:end="136:27">(<argument pos:start="136:16" pos:end="136:26"><expr pos:start="136:16" pos:end="136:26"><name pos:start="136:16" pos:end="136:26">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="138:13" pos:end="141:0"><expr pos:start="138:13" pos:end="138:26"><name pos:start="138:13" pos:end="138:19"><name pos:start="138:13" pos:end="138:15">env</name><operator pos:start="138:16" pos:end="138:17">-&gt;</operator><name pos:start="138:18" pos:end="138:19">pc</name></name> <operator pos:start="138:21" pos:end="138:21">=</operator> <name pos:start="138:23" pos:end="138:26">addr</name></expr>;</expr_stmt>

<cpp:endif pos:start="140:1" pos:end="140:6">#<cpp:directive pos:start="140:2" pos:end="140:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="144:9" pos:end="144:42"><expr pos:start="144:9" pos:end="144:41"><call pos:start="144:9" pos:end="144:41"><name pos:start="144:9" pos:end="144:23">cpu_single_step</name><argument_list pos:start="144:24" pos:end="144:41">(<argument pos:start="144:25" pos:end="144:27"><expr pos:start="144:25" pos:end="144:27"><name pos:start="144:25" pos:end="144:27">env</name></expr></argument>, <argument pos:start="144:30" pos:end="144:40"><expr pos:start="144:30" pos:end="144:40"><name pos:start="144:30" pos:end="144:40">sstep_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<return pos:start="147:9" pos:end="147:23">return <expr pos:start="147:16" pos:end="147:22"><name pos:start="147:16" pos:end="147:22">RS_IDLE</name></expr>;</return>

    <case pos:start="149:5" pos:end="149:13">case <expr pos:start="149:10" pos:end="149:12"><literal type="char" pos:start="149:10" pos:end="149:12">'F'</literal></expr>:</case>

        <block pos:start="151:9" pos:end="192:9">{<block_content pos:start="153:13" pos:end="190:13">

            <decl_stmt pos:start="153:13" pos:end="153:29"><decl pos:start="153:13" pos:end="153:28"><type pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:24">target_ulong</name></type> <name pos:start="153:26" pos:end="153:28">ret</name></decl>;</decl_stmt>

            <decl_stmt pos:start="155:13" pos:end="155:29"><decl pos:start="155:13" pos:end="155:28"><type pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:24">target_ulong</name></type> <name pos:start="155:26" pos:end="155:28">err</name></decl>;</decl_stmt>



            <expr_stmt pos:start="159:13" pos:end="159:47"><expr pos:start="159:13" pos:end="159:46"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:46"><name pos:start="159:19" pos:end="159:26">strtoull</name><argument_list pos:start="159:27" pos:end="159:46">(<argument pos:start="159:28" pos:end="159:28"><expr pos:start="159:28" pos:end="159:28"><name pos:start="159:28" pos:end="159:28">p</name></expr></argument>, <argument pos:start="159:31" pos:end="159:41"><expr pos:start="159:31" pos:end="159:41"><operator pos:start="159:31" pos:end="159:31">(</operator><name pos:start="159:32" pos:end="159:35">char</name> <operator pos:start="159:37" pos:end="159:37">*</operator><operator pos:start="159:38" pos:end="159:38">*</operator><operator pos:start="159:39" pos:end="159:39">)</operator><operator pos:start="159:40" pos:end="159:40">&amp;</operator><name pos:start="159:41" pos:end="159:41">p</name></expr></argument>, <argument pos:start="159:44" pos:end="159:45"><expr pos:start="159:44" pos:end="159:45"><literal type="number" pos:start="159:44" pos:end="159:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="171:13"><if pos:start="161:13" pos:end="167:13">if <condition pos:start="161:16" pos:end="161:26">(<expr pos:start="161:17" pos:end="161:25"><operator pos:start="161:17" pos:end="161:17">*</operator><name pos:start="161:18" pos:end="161:18">p</name> <operator pos:start="161:20" pos:end="161:21">==</operator> <literal type="char" pos:start="161:23" pos:end="161:25">','</literal></expr>)</condition> <block pos:start="161:28" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:51">

                <expr_stmt pos:start="163:17" pos:end="163:20"><expr pos:start="163:17" pos:end="163:19"><name pos:start="163:17" pos:end="163:17">p</name><operator pos:start="163:18" pos:end="163:19">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:51"><expr pos:start="165:17" pos:end="165:50"><name pos:start="165:17" pos:end="165:19">err</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <call pos:start="165:23" pos:end="165:50"><name pos:start="165:23" pos:end="165:30">strtoull</name><argument_list pos:start="165:31" pos:end="165:50">(<argument pos:start="165:32" pos:end="165:32"><expr pos:start="165:32" pos:end="165:32"><name pos:start="165:32" pos:end="165:32">p</name></expr></argument>, <argument pos:start="165:35" pos:end="165:45"><expr pos:start="165:35" pos:end="165:45"><operator pos:start="165:35" pos:end="165:35">(</operator><name pos:start="165:36" pos:end="165:39">char</name> <operator pos:start="165:41" pos:end="165:41">*</operator><operator pos:start="165:42" pos:end="165:42">*</operator><operator pos:start="165:43" pos:end="165:43">)</operator><operator pos:start="165:44" pos:end="165:44">&amp;</operator><name pos:start="165:45" pos:end="165:45">p</name></expr></argument>, <argument pos:start="165:48" pos:end="165:49"><expr pos:start="165:48" pos:end="165:49"><literal type="number" pos:start="165:48" pos:end="165:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="171:13">else <block pos:start="167:20" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:24">

                <expr_stmt pos:start="169:17" pos:end="169:24"><expr pos:start="169:17" pos:end="169:23"><name pos:start="169:17" pos:end="169:19">err</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <literal type="number" pos:start="169:23" pos:end="169:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="173:13" pos:end="175:20"><if pos:start="173:13" pos:end="175:20">if <condition pos:start="173:16" pos:end="173:26">(<expr pos:start="173:17" pos:end="173:25"><operator pos:start="173:17" pos:end="173:17">*</operator><name pos:start="173:18" pos:end="173:18">p</name> <operator pos:start="173:20" pos:end="173:21">==</operator> <literal type="char" pos:start="173:23" pos:end="173:25">','</literal></expr>)</condition><block type="pseudo" pos:start="175:17" pos:end="175:20"><block_content pos:start="175:17" pos:end="175:20">

                <expr_stmt pos:start="175:17" pos:end="175:20"><expr pos:start="175:17" pos:end="175:19"><name pos:start="175:17" pos:end="175:17">p</name><operator pos:start="175:18" pos:end="175:19">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:22"><expr pos:start="177:13" pos:end="177:21"><name pos:start="177:13" pos:end="177:16">type</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <operator pos:start="177:20" pos:end="177:20">*</operator><name pos:start="177:21" pos:end="177:21">p</name></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="181:57"><if pos:start="179:13" pos:end="181:57">if <condition pos:start="179:16" pos:end="179:39">(<expr pos:start="179:17" pos:end="179:38"><name pos:start="179:17" pos:end="179:38">gdb_current_syscall_cb</name></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:57"><block_content pos:start="181:17" pos:end="181:57">

                <expr_stmt pos:start="181:17" pos:end="181:57"><expr pos:start="181:17" pos:end="181:56"><call pos:start="181:17" pos:end="181:56"><name pos:start="181:17" pos:end="181:38">gdb_current_syscall_cb</name><argument_list pos:start="181:39" pos:end="181:56">(<argument pos:start="181:40" pos:end="181:45"><expr pos:start="181:40" pos:end="181:45"><name pos:start="181:40" pos:end="181:45"><name pos:start="181:40" pos:end="181:40">s</name><operator pos:start="181:41" pos:end="181:42">-&gt;</operator><name pos:start="181:43" pos:end="181:45">env</name></name></expr></argument>, <argument pos:start="181:48" pos:end="181:50"><expr pos:start="181:48" pos:end="181:50"><name pos:start="181:48" pos:end="181:50">ret</name></expr></argument>, <argument pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><name pos:start="181:53" pos:end="181:55">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="183:13" pos:end="190:13"><if pos:start="183:13" pos:end="187:13">if <condition pos:start="183:16" pos:end="183:28">(<expr pos:start="183:17" pos:end="183:27"><name pos:start="183:17" pos:end="183:20">type</name> <operator pos:start="183:22" pos:end="183:23">==</operator> <literal type="char" pos:start="183:25" pos:end="183:27">'C'</literal></expr>)</condition> <block pos:start="183:30" pos:end="187:13">{<block_content pos:start="185:17" pos:end="185:37">

                <expr_stmt pos:start="185:17" pos:end="185:37"><expr pos:start="185:17" pos:end="185:36"><call pos:start="185:17" pos:end="185:36"><name pos:start="185:17" pos:end="185:26">put_packet</name><argument_list pos:start="185:27" pos:end="185:36">(<argument pos:start="185:28" pos:end="185:28"><expr pos:start="185:28" pos:end="185:28"><name pos:start="185:28" pos:end="185:28">s</name></expr></argument>, <argument pos:start="185:31" pos:end="185:35"><expr pos:start="185:31" pos:end="185:35"><literal type="string" pos:start="185:31" pos:end="185:35">"T02"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="187:15" pos:end="190:13">else <block pos:start="187:20" pos:end="190:13">{<block_content>


            </block_content>}</block></else></if_stmt>

        </block_content>}</block>


    <case pos:start="195:5" pos:end="195:13">case <expr pos:start="195:10" pos:end="195:12"><literal type="char" pos:start="195:10" pos:end="195:12">'g'</literal></expr>:</case>

        <expr_stmt pos:start="197:9" pos:end="197:56"><expr pos:start="197:9" pos:end="197:55"><name pos:start="197:9" pos:end="197:16">reg_size</name> <operator pos:start="197:18" pos:end="197:18">=</operator> <call pos:start="197:20" pos:end="197:55"><name pos:start="197:20" pos:end="197:41">cpu_gdb_read_registers</name><argument_list pos:start="197:42" pos:end="197:55">(<argument pos:start="197:43" pos:end="197:45"><expr pos:start="197:43" pos:end="197:45"><name pos:start="197:43" pos:end="197:45">env</name></expr></argument>, <argument pos:start="197:48" pos:end="197:54"><expr pos:start="197:48" pos:end="197:54"><name pos:start="197:48" pos:end="197:54">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:41"><expr pos:start="199:9" pos:end="199:40"><call pos:start="199:9" pos:end="199:40"><name pos:start="199:9" pos:end="199:16">memtohex</name><argument_list pos:start="199:17" pos:end="199:40">(<argument pos:start="199:18" pos:end="199:20"><expr pos:start="199:18" pos:end="199:20"><name pos:start="199:18" pos:end="199:20">buf</name></expr></argument>, <argument pos:start="199:23" pos:end="199:29"><expr pos:start="199:23" pos:end="199:29"><name pos:start="199:23" pos:end="199:29">mem_buf</name></expr></argument>, <argument pos:start="199:32" pos:end="199:39"><expr pos:start="199:32" pos:end="199:39"><name pos:start="199:32" pos:end="199:39">reg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:27"><expr pos:start="201:9" pos:end="201:26"><call pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:18">put_packet</name><argument_list pos:start="201:19" pos:end="201:26">(<argument pos:start="201:20" pos:end="201:20"><expr pos:start="201:20" pos:end="201:20"><name pos:start="201:20" pos:end="201:20">s</name></expr></argument>, <argument pos:start="201:23" pos:end="201:25"><expr pos:start="201:23" pos:end="201:25"><name pos:start="201:23" pos:end="201:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <case pos:start="204:5" pos:end="204:13">case <expr pos:start="204:10" pos:end="204:12"><literal type="char" pos:start="204:10" pos:end="204:12">'G'</literal></expr>:</case>

        <expr_stmt pos:start="206:9" pos:end="206:36"><expr pos:start="206:9" pos:end="206:35"><name pos:start="206:9" pos:end="206:17">registers</name> <operator pos:start="206:19" pos:end="206:19">=</operator> <operator pos:start="206:21" pos:end="206:21">(</operator><name pos:start="206:22" pos:end="206:25">void</name> <operator pos:start="206:27" pos:end="206:27">*</operator><operator pos:start="206:28" pos:end="206:28">)</operator><name pos:start="206:29" pos:end="206:35">mem_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="208:9" pos:end="208:28"><expr pos:start="208:9" pos:end="208:27"><name pos:start="208:9" pos:end="208:11">len</name> <operator pos:start="208:13" pos:end="208:13">=</operator> <call pos:start="208:15" pos:end="208:23"><name pos:start="208:15" pos:end="208:20">strlen</name><argument_list pos:start="208:21" pos:end="208:23">(<argument pos:start="208:22" pos:end="208:22"><expr pos:start="208:22" pos:end="208:22"><name pos:start="208:22" pos:end="208:22">p</name></expr></argument>)</argument_list></call> <operator pos:start="208:25" pos:end="208:25">/</operator> <literal type="number" pos:start="208:27" pos:end="208:27">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="210:9" pos:end="210:47"><expr pos:start="210:9" pos:end="210:46"><call pos:start="210:9" pos:end="210:46"><name pos:start="210:9" pos:end="210:16">hextomem</name><argument_list pos:start="210:17" pos:end="210:46">(<argument pos:start="210:18" pos:end="210:37"><expr pos:start="210:18" pos:end="210:37"><operator pos:start="210:18" pos:end="210:18">(</operator><name pos:start="210:19" pos:end="210:25">uint8_t</name> <operator pos:start="210:27" pos:end="210:27">*</operator><operator pos:start="210:28" pos:end="210:28">)</operator><name pos:start="210:29" pos:end="210:37">registers</name></expr></argument>, <argument pos:start="210:40" pos:end="210:40"><expr pos:start="210:40" pos:end="210:40"><name pos:start="210:40" pos:end="210:40">p</name></expr></argument>, <argument pos:start="210:43" pos:end="210:45"><expr pos:start="210:43" pos:end="210:45"><name pos:start="210:43" pos:end="210:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="212:9" pos:end="212:51"><expr pos:start="212:9" pos:end="212:50"><call pos:start="212:9" pos:end="212:50"><name pos:start="212:9" pos:end="212:31">cpu_gdb_write_registers</name><argument_list pos:start="212:32" pos:end="212:50">(<argument pos:start="212:33" pos:end="212:35"><expr pos:start="212:33" pos:end="212:35"><name pos:start="212:33" pos:end="212:35">env</name></expr></argument>, <argument pos:start="212:38" pos:end="212:44"><expr pos:start="212:38" pos:end="212:44"><name pos:start="212:38" pos:end="212:44">mem_buf</name></expr></argument>, <argument pos:start="212:47" pos:end="212:49"><expr pos:start="212:47" pos:end="212:49"><name pos:start="212:47" pos:end="212:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <case pos:start="216:5" pos:end="216:13">case <expr pos:start="216:10" pos:end="216:12"><literal type="char" pos:start="216:10" pos:end="216:12">'m'</literal></expr>:</case>

        <expr_stmt pos:start="218:9" pos:end="218:44"><expr pos:start="218:9" pos:end="218:43"><name pos:start="218:9" pos:end="218:12">addr</name> <operator pos:start="218:14" pos:end="218:14">=</operator> <call pos:start="218:16" pos:end="218:43"><name pos:start="218:16" pos:end="218:23">strtoull</name><argument_list pos:start="218:24" pos:end="218:43">(<argument pos:start="218:25" pos:end="218:25"><expr pos:start="218:25" pos:end="218:25"><name pos:start="218:25" pos:end="218:25">p</name></expr></argument>, <argument pos:start="218:28" pos:end="218:38"><expr pos:start="218:28" pos:end="218:38"><operator pos:start="218:28" pos:end="218:28">(</operator><name pos:start="218:29" pos:end="218:32">char</name> <operator pos:start="218:34" pos:end="218:34">*</operator><operator pos:start="218:35" pos:end="218:35">*</operator><operator pos:start="218:36" pos:end="218:36">)</operator><operator pos:start="218:37" pos:end="218:37">&amp;</operator><name pos:start="218:38" pos:end="218:38">p</name></expr></argument>, <argument pos:start="218:41" pos:end="218:42"><expr pos:start="218:41" pos:end="218:42"><literal type="number" pos:start="218:41" pos:end="218:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="220:9" pos:end="222:16"><if pos:start="220:9" pos:end="222:16">if <condition pos:start="220:12" pos:end="220:22">(<expr pos:start="220:13" pos:end="220:21"><operator pos:start="220:13" pos:end="220:13">*</operator><name pos:start="220:14" pos:end="220:14">p</name> <operator pos:start="220:16" pos:end="220:17">==</operator> <literal type="char" pos:start="220:19" pos:end="220:21">','</literal></expr>)</condition><block type="pseudo" pos:start="222:13" pos:end="222:16"><block_content pos:start="222:13" pos:end="222:16">

            <expr_stmt pos:start="222:13" pos:end="222:16"><expr pos:start="222:13" pos:end="222:15"><name pos:start="222:13" pos:end="222:13">p</name><operator pos:start="222:14" pos:end="222:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="224:9" pos:end="224:36"><expr pos:start="224:9" pos:end="224:35"><name pos:start="224:9" pos:end="224:11">len</name> <operator pos:start="224:13" pos:end="224:13">=</operator> <call pos:start="224:15" pos:end="224:35"><name pos:start="224:15" pos:end="224:22">strtoull</name><argument_list pos:start="224:23" pos:end="224:35">(<argument pos:start="224:24" pos:end="224:24"><expr pos:start="224:24" pos:end="224:24"><name pos:start="224:24" pos:end="224:24">p</name></expr></argument>, <argument pos:start="224:27" pos:end="224:30"><expr pos:start="224:27" pos:end="224:30"><name pos:start="224:27" pos:end="224:30">NULL</name></expr></argument>, <argument pos:start="224:33" pos:end="224:34"><expr pos:start="224:33" pos:end="224:34"><literal type="number" pos:start="224:33" pos:end="224:34">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="226:9" pos:end="236:9"><if pos:start="226:9" pos:end="230:9">if <condition pos:start="226:12" pos:end="226:65">(<expr pos:start="226:13" pos:end="226:64"><call pos:start="226:13" pos:end="226:59"><name pos:start="226:13" pos:end="226:31">cpu_memory_rw_debug</name><argument_list pos:start="226:32" pos:end="226:59">(<argument pos:start="226:33" pos:end="226:35"><expr pos:start="226:33" pos:end="226:35"><name pos:start="226:33" pos:end="226:35">env</name></expr></argument>, <argument pos:start="226:38" pos:end="226:41"><expr pos:start="226:38" pos:end="226:41"><name pos:start="226:38" pos:end="226:41">addr</name></expr></argument>, <argument pos:start="226:44" pos:end="226:50"><expr pos:start="226:44" pos:end="226:50"><name pos:start="226:44" pos:end="226:50">mem_buf</name></expr></argument>, <argument pos:start="226:53" pos:end="226:55"><expr pos:start="226:53" pos:end="226:55"><name pos:start="226:53" pos:end="226:55">len</name></expr></argument>, <argument pos:start="226:58" pos:end="226:58"><expr pos:start="226:58" pos:end="226:58"><literal type="number" pos:start="226:58" pos:end="226:58">0</literal></expr></argument>)</argument_list></call> <operator pos:start="226:61" pos:end="226:62">!=</operator> <literal type="number" pos:start="226:64" pos:end="226:64">0</literal></expr>)</condition> <block pos:start="226:67" pos:end="230:9">{<block_content pos:start="228:13" pos:end="228:34">

            <expr_stmt pos:start="228:13" pos:end="228:34"><expr pos:start="228:13" pos:end="228:33"><call pos:start="228:13" pos:end="228:33"><name pos:start="228:13" pos:end="228:22">put_packet</name> <argument_list pos:start="228:24" pos:end="228:33">(<argument pos:start="228:25" pos:end="228:25"><expr pos:start="228:25" pos:end="228:25"><name pos:start="228:25" pos:end="228:25">s</name></expr></argument>, <argument pos:start="228:28" pos:end="228:32"><expr pos:start="228:28" pos:end="228:32"><literal type="string" pos:start="228:28" pos:end="228:32">"E14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="230:11" pos:end="236:9">else <block pos:start="230:16" pos:end="236:9">{<block_content pos:start="232:13" pos:end="234:31">

            <expr_stmt pos:start="232:13" pos:end="232:40"><expr pos:start="232:13" pos:end="232:39"><call pos:start="232:13" pos:end="232:39"><name pos:start="232:13" pos:end="232:20">memtohex</name><argument_list pos:start="232:21" pos:end="232:39">(<argument pos:start="232:22" pos:end="232:24"><expr pos:start="232:22" pos:end="232:24"><name pos:start="232:22" pos:end="232:24">buf</name></expr></argument>, <argument pos:start="232:27" pos:end="232:33"><expr pos:start="232:27" pos:end="232:33"><name pos:start="232:27" pos:end="232:33">mem_buf</name></expr></argument>, <argument pos:start="232:36" pos:end="232:38"><expr pos:start="232:36" pos:end="232:38"><name pos:start="232:36" pos:end="232:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="234:13" pos:end="234:31"><expr pos:start="234:13" pos:end="234:30"><call pos:start="234:13" pos:end="234:30"><name pos:start="234:13" pos:end="234:22">put_packet</name><argument_list pos:start="234:23" pos:end="234:30">(<argument pos:start="234:24" pos:end="234:24"><expr pos:start="234:24" pos:end="234:24"><name pos:start="234:24" pos:end="234:24">s</name></expr></argument>, <argument pos:start="234:27" pos:end="234:29"><expr pos:start="234:27" pos:end="234:29"><name pos:start="234:27" pos:end="234:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>


    <case pos:start="239:5" pos:end="239:13">case <expr pos:start="239:10" pos:end="239:12"><literal type="char" pos:start="239:10" pos:end="239:12">'M'</literal></expr>:</case>

        <expr_stmt pos:start="241:9" pos:end="241:44"><expr pos:start="241:9" pos:end="241:43"><name pos:start="241:9" pos:end="241:12">addr</name> <operator pos:start="241:14" pos:end="241:14">=</operator> <call pos:start="241:16" pos:end="241:43"><name pos:start="241:16" pos:end="241:23">strtoull</name><argument_list pos:start="241:24" pos:end="241:43">(<argument pos:start="241:25" pos:end="241:25"><expr pos:start="241:25" pos:end="241:25"><name pos:start="241:25" pos:end="241:25">p</name></expr></argument>, <argument pos:start="241:28" pos:end="241:38"><expr pos:start="241:28" pos:end="241:38"><operator pos:start="241:28" pos:end="241:28">(</operator><name pos:start="241:29" pos:end="241:32">char</name> <operator pos:start="241:34" pos:end="241:34">*</operator><operator pos:start="241:35" pos:end="241:35">*</operator><operator pos:start="241:36" pos:end="241:36">)</operator><operator pos:start="241:37" pos:end="241:37">&amp;</operator><name pos:start="241:38" pos:end="241:38">p</name></expr></argument>, <argument pos:start="241:41" pos:end="241:42"><expr pos:start="241:41" pos:end="241:42"><literal type="number" pos:start="241:41" pos:end="241:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="243:9" pos:end="245:16"><if pos:start="243:9" pos:end="245:16">if <condition pos:start="243:12" pos:end="243:22">(<expr pos:start="243:13" pos:end="243:21"><operator pos:start="243:13" pos:end="243:13">*</operator><name pos:start="243:14" pos:end="243:14">p</name> <operator pos:start="243:16" pos:end="243:17">==</operator> <literal type="char" pos:start="243:19" pos:end="243:21">','</literal></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:16"><block_content pos:start="245:13" pos:end="245:16">

            <expr_stmt pos:start="245:13" pos:end="245:16"><expr pos:start="245:13" pos:end="245:15"><name pos:start="245:13" pos:end="245:13">p</name><operator pos:start="245:14" pos:end="245:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:43"><expr pos:start="247:9" pos:end="247:42"><name pos:start="247:9" pos:end="247:11">len</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <call pos:start="247:15" pos:end="247:42"><name pos:start="247:15" pos:end="247:22">strtoull</name><argument_list pos:start="247:23" pos:end="247:42">(<argument pos:start="247:24" pos:end="247:24"><expr pos:start="247:24" pos:end="247:24"><name pos:start="247:24" pos:end="247:24">p</name></expr></argument>, <argument pos:start="247:27" pos:end="247:37"><expr pos:start="247:27" pos:end="247:37"><operator pos:start="247:27" pos:end="247:27">(</operator><name pos:start="247:28" pos:end="247:31">char</name> <operator pos:start="247:33" pos:end="247:33">*</operator><operator pos:start="247:34" pos:end="247:34">*</operator><operator pos:start="247:35" pos:end="247:35">)</operator><operator pos:start="247:36" pos:end="247:36">&amp;</operator><name pos:start="247:37" pos:end="247:37">p</name></expr></argument>, <argument pos:start="247:40" pos:end="247:41"><expr pos:start="247:40" pos:end="247:41"><literal type="number" pos:start="247:40" pos:end="247:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="249:9" pos:end="251:16"><if pos:start="249:9" pos:end="251:16">if <condition pos:start="249:12" pos:end="249:22">(<expr pos:start="249:13" pos:end="249:21"><operator pos:start="249:13" pos:end="249:13">*</operator><name pos:start="249:14" pos:end="249:14">p</name> <operator pos:start="249:16" pos:end="249:17">==</operator> <literal type="char" pos:start="249:19" pos:end="249:21">':'</literal></expr>)</condition><block type="pseudo" pos:start="251:13" pos:end="251:16"><block_content pos:start="251:13" pos:end="251:16">

            <expr_stmt pos:start="251:13" pos:end="251:16"><expr pos:start="251:13" pos:end="251:15"><name pos:start="251:13" pos:end="251:13">p</name><operator pos:start="251:14" pos:end="251:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:34"><expr pos:start="253:9" pos:end="253:33"><call pos:start="253:9" pos:end="253:33"><name pos:start="253:9" pos:end="253:16">hextomem</name><argument_list pos:start="253:17" pos:end="253:33">(<argument pos:start="253:18" pos:end="253:24"><expr pos:start="253:18" pos:end="253:24"><name pos:start="253:18" pos:end="253:24">mem_buf</name></expr></argument>, <argument pos:start="253:27" pos:end="253:27"><expr pos:start="253:27" pos:end="253:27"><name pos:start="253:27" pos:end="253:27">p</name></expr></argument>, <argument pos:start="253:30" pos:end="253:32"><expr pos:start="253:30" pos:end="253:32"><name pos:start="253:30" pos:end="253:32">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="265:43"><if pos:start="255:9" pos:end="257:33">if <condition pos:start="255:12" pos:end="255:65">(<expr pos:start="255:13" pos:end="255:64"><call pos:start="255:13" pos:end="255:59"><name pos:start="255:13" pos:end="255:31">cpu_memory_rw_debug</name><argument_list pos:start="255:32" pos:end="255:59">(<argument pos:start="255:33" pos:end="255:35"><expr pos:start="255:33" pos:end="255:35"><name pos:start="255:33" pos:end="255:35">env</name></expr></argument>, <argument pos:start="255:38" pos:end="255:41"><expr pos:start="255:38" pos:end="255:41"><name pos:start="255:38" pos:end="255:41">addr</name></expr></argument>, <argument pos:start="255:44" pos:end="255:50"><expr pos:start="255:44" pos:end="255:50"><name pos:start="255:44" pos:end="255:50">mem_buf</name></expr></argument>, <argument pos:start="255:53" pos:end="255:55"><expr pos:start="255:53" pos:end="255:55"><name pos:start="255:53" pos:end="255:55">len</name></expr></argument>, <argument pos:start="255:58" pos:end="255:58"><expr pos:start="255:58" pos:end="255:58"><literal type="number" pos:start="255:58" pos:end="255:58">1</literal></expr></argument>)</argument_list></call> <operator pos:start="255:61" pos:end="255:62">!=</operator> <literal type="number" pos:start="255:64" pos:end="255:64">0</literal></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="257:33"><block_content pos:start="257:13" pos:end="257:33">

            <expr_stmt pos:start="257:13" pos:end="257:33"><expr pos:start="257:13" pos:end="257:32"><call pos:start="257:13" pos:end="257:32"><name pos:start="257:13" pos:end="257:22">put_packet</name><argument_list pos:start="257:23" pos:end="257:32">(<argument pos:start="257:24" pos:end="257:24"><expr pos:start="257:24" pos:end="257:24"><name pos:start="257:24" pos:end="257:24">s</name></expr></argument>, <argument pos:start="257:27" pos:end="257:31"><expr pos:start="257:27" pos:end="257:31"><literal type="string" pos:start="257:27" pos:end="257:31">"E14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="259:9" pos:end="265:43">else<block type="pseudo" pos:start="263:5" pos:end="265:43"><block_content pos:start="263:5" pos:end="265:43">



    <case pos:start="263:5" pos:end="263:13">case <expr pos:start="263:10" pos:end="263:12"><literal type="char" pos:start="263:10" pos:end="263:12">'Z'</literal></expr>:</case>

        <expr_stmt pos:start="265:9" pos:end="265:43"><expr pos:start="265:9" pos:end="265:42"><name pos:start="265:9" pos:end="265:12">type</name> <operator pos:start="265:14" pos:end="265:14">=</operator> <call pos:start="265:16" pos:end="265:42"><name pos:start="265:16" pos:end="265:22">strtoul</name><argument_list pos:start="265:23" pos:end="265:42">(<argument pos:start="265:24" pos:end="265:24"><expr pos:start="265:24" pos:end="265:24"><name pos:start="265:24" pos:end="265:24">p</name></expr></argument>, <argument pos:start="265:27" pos:end="265:37"><expr pos:start="265:27" pos:end="265:37"><operator pos:start="265:27" pos:end="265:27">(</operator><name pos:start="265:28" pos:end="265:31">char</name> <operator pos:start="265:33" pos:end="265:33">*</operator><operator pos:start="265:34" pos:end="265:34">*</operator><operator pos:start="265:35" pos:end="265:35">)</operator><operator pos:start="265:36" pos:end="265:36">&amp;</operator><name pos:start="265:37" pos:end="265:37">p</name></expr></argument>, <argument pos:start="265:40" pos:end="265:41"><expr pos:start="265:40" pos:end="265:41"><literal type="number" pos:start="265:40" pos:end="265:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="267:9" pos:end="269:16"><if pos:start="267:9" pos:end="269:16">if <condition pos:start="267:12" pos:end="267:22">(<expr pos:start="267:13" pos:end="267:21"><operator pos:start="267:13" pos:end="267:13">*</operator><name pos:start="267:14" pos:end="267:14">p</name> <operator pos:start="267:16" pos:end="267:17">==</operator> <literal type="char" pos:start="267:19" pos:end="267:21">','</literal></expr>)</condition><block type="pseudo" pos:start="269:13" pos:end="269:16"><block_content pos:start="269:13" pos:end="269:16">

            <expr_stmt pos:start="269:13" pos:end="269:16"><expr pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:13">p</name><operator pos:start="269:14" pos:end="269:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:44"><expr pos:start="271:9" pos:end="271:43"><name pos:start="271:9" pos:end="271:12">addr</name> <operator pos:start="271:14" pos:end="271:14">=</operator> <call pos:start="271:16" pos:end="271:43"><name pos:start="271:16" pos:end="271:23">strtoull</name><argument_list pos:start="271:24" pos:end="271:43">(<argument pos:start="271:25" pos:end="271:25"><expr pos:start="271:25" pos:end="271:25"><name pos:start="271:25" pos:end="271:25">p</name></expr></argument>, <argument pos:start="271:28" pos:end="271:38"><expr pos:start="271:28" pos:end="271:38"><operator pos:start="271:28" pos:end="271:28">(</operator><name pos:start="271:29" pos:end="271:32">char</name> <operator pos:start="271:34" pos:end="271:34">*</operator><operator pos:start="271:35" pos:end="271:35">*</operator><operator pos:start="271:36" pos:end="271:36">)</operator><operator pos:start="271:37" pos:end="271:37">&amp;</operator><name pos:start="271:38" pos:end="271:38">p</name></expr></argument>, <argument pos:start="271:41" pos:end="271:42"><expr pos:start="271:41" pos:end="271:42"><literal type="number" pos:start="271:41" pos:end="271:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="275:16"><if pos:start="273:9" pos:end="275:16">if <condition pos:start="273:12" pos:end="273:22">(<expr pos:start="273:13" pos:end="273:21"><operator pos:start="273:13" pos:end="273:13">*</operator><name pos:start="273:14" pos:end="273:14">p</name> <operator pos:start="273:16" pos:end="273:17">==</operator> <literal type="char" pos:start="273:19" pos:end="273:21">','</literal></expr>)</condition><block type="pseudo" pos:start="275:13" pos:end="275:16"><block_content pos:start="275:13" pos:end="275:16">

            <expr_stmt pos:start="275:13" pos:end="275:16"><expr pos:start="275:13" pos:end="275:15"><name pos:start="275:13" pos:end="275:13">p</name><operator pos:start="275:14" pos:end="275:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:43"><expr pos:start="277:9" pos:end="277:42"><name pos:start="277:9" pos:end="277:11">len</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <call pos:start="277:15" pos:end="277:42"><name pos:start="277:15" pos:end="277:22">strtoull</name><argument_list pos:start="277:23" pos:end="277:42">(<argument pos:start="277:24" pos:end="277:24"><expr pos:start="277:24" pos:end="277:24"><name pos:start="277:24" pos:end="277:24">p</name></expr></argument>, <argument pos:start="277:27" pos:end="277:37"><expr pos:start="277:27" pos:end="277:37"><operator pos:start="277:27" pos:end="277:27">(</operator><name pos:start="277:28" pos:end="277:31">char</name> <operator pos:start="277:33" pos:end="277:33">*</operator><operator pos:start="277:34" pos:end="277:34">*</operator><operator pos:start="277:35" pos:end="277:35">)</operator><operator pos:start="277:36" pos:end="277:36">&amp;</operator><name pos:start="277:37" pos:end="277:37">p</name></expr></argument>, <argument pos:start="277:40" pos:end="277:41"><expr pos:start="277:40" pos:end="277:41"><literal type="number" pos:start="277:40" pos:end="277:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="279:9" pos:end="303:9"><if pos:start="279:9" pos:end="288:9">if <condition pos:start="279:12" pos:end="279:35">(<expr pos:start="279:13" pos:end="279:34"><name pos:start="279:13" pos:end="279:16">type</name> <operator pos:start="279:18" pos:end="279:19">==</operator> <literal type="number" pos:start="279:21" pos:end="279:21">0</literal> <operator pos:start="279:23" pos:end="279:24">||</operator> <name pos:start="279:26" pos:end="279:29">type</name> <operator pos:start="279:31" pos:end="279:32">==</operator> <literal type="number" pos:start="279:34" pos:end="279:34">1</literal></expr>)</condition> <block pos:start="279:37" pos:end="288:9">{<block_content pos:start="281:13" pos:end="287:0">

            <if_stmt pos:start="281:13" pos:end="287:0"><if pos:start="281:13" pos:end="287:0">if <condition pos:start="281:16" pos:end="281:53">(<expr pos:start="281:17" pos:end="281:52"><call pos:start="281:17" pos:end="281:48"><name pos:start="281:17" pos:end="281:37">cpu_breakpoint_insert</name><argument_list pos:start="281:38" pos:end="281:48">(<argument pos:start="281:39" pos:end="281:41"><expr pos:start="281:39" pos:end="281:41"><name pos:start="281:39" pos:end="281:41">env</name></expr></argument>, <argument pos:start="281:44" pos:end="281:47"><expr pos:start="281:44" pos:end="281:47"><name pos:start="281:44" pos:end="281:47">addr</name></expr></argument>)</argument_list></call> <operator pos:start="281:50" pos:end="281:50">&lt;</operator> <literal type="number" pos:start="281:52" pos:end="281:52">0</literal></expr>)</condition><block type="pseudo" pos:start="283:17" pos:end="287:0"><block_content pos:start="283:17" pos:end="287:0">

                <goto pos:start="283:17" pos:end="287:0">goto <name pos:start="283:22" pos:end="283:37">breakpoint_error</name>;</goto></block_content></block></if></if_stmt>


<cpp:ifndef pos:start="286:1" pos:end="286:24">#<cpp:directive pos:start="286:2" pos:end="286:7">ifndef</cpp:directive> <name pos:start="286:9" pos:end="286:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        </block_content>}</block></if> <if type="elseif" pos:start="288:11" pos:end="297:9">else if <condition pos:start="288:19" pos:end="288:29">(<expr pos:start="288:20" pos:end="288:28"><name pos:start="288:20" pos:end="288:23">type</name> <operator pos:start="288:25" pos:end="288:26">==</operator> <literal type="number" pos:start="288:28" pos:end="288:28">2</literal></expr>)</condition> <block pos:start="288:31" pos:end="297:9">{<block_content pos:start="290:13" pos:end="296:0">

            <if_stmt pos:start="290:13" pos:end="296:0"><if pos:start="290:13" pos:end="296:0">if <condition pos:start="290:16" pos:end="290:53">(<expr pos:start="290:17" pos:end="290:52"><call pos:start="290:17" pos:end="290:48"><name pos:start="290:17" pos:end="290:37">cpu_watchpoint_insert</name><argument_list pos:start="290:38" pos:end="290:48">(<argument pos:start="290:39" pos:end="290:41"><expr pos:start="290:39" pos:end="290:41"><name pos:start="290:39" pos:end="290:41">env</name></expr></argument>, <argument pos:start="290:44" pos:end="290:47"><expr pos:start="290:44" pos:end="290:47"><name pos:start="290:44" pos:end="290:47">addr</name></expr></argument>)</argument_list></call> <operator pos:start="290:50" pos:end="290:50">&lt;</operator> <literal type="number" pos:start="290:52" pos:end="290:52">0</literal></expr>)</condition><block type="pseudo" pos:start="292:17" pos:end="296:0"><block_content pos:start="292:17" pos:end="296:0">

                <goto pos:start="292:17" pos:end="296:0">goto <name pos:start="292:22" pos:end="292:37">breakpoint_error</name>;</goto></block_content></block></if></if_stmt>


<cpp:endif pos:start="295:1" pos:end="295:6">#<cpp:directive pos:start="295:2" pos:end="295:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="297:11" pos:end="303:9">else <block pos:start="297:16" pos:end="303:9">{<block_content pos:start="299:9" pos:end="301:33">

        <label pos:start="299:9" pos:end="299:25"><name pos:start="299:9" pos:end="299:24">breakpoint_error</name>:</label>

            <expr_stmt pos:start="301:13" pos:end="301:33"><expr pos:start="301:13" pos:end="301:32"><call pos:start="301:13" pos:end="301:32"><name pos:start="301:13" pos:end="301:22">put_packet</name><argument_list pos:start="301:23" pos:end="301:32">(<argument pos:start="301:24" pos:end="301:24"><expr pos:start="301:24" pos:end="301:24"><name pos:start="301:24" pos:end="301:24">s</name></expr></argument>, <argument pos:start="301:27" pos:end="301:31"><expr pos:start="301:27" pos:end="301:31"><literal type="string" pos:start="301:27" pos:end="301:31">"E22"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>


    <case pos:start="306:5" pos:end="306:13">case <expr pos:start="306:10" pos:end="306:12"><literal type="char" pos:start="306:10" pos:end="306:12">'z'</literal></expr>:</case>

        <expr_stmt pos:start="308:9" pos:end="308:43"><expr pos:start="308:9" pos:end="308:42"><name pos:start="308:9" pos:end="308:12">type</name> <operator pos:start="308:14" pos:end="308:14">=</operator> <call pos:start="308:16" pos:end="308:42"><name pos:start="308:16" pos:end="308:22">strtoul</name><argument_list pos:start="308:23" pos:end="308:42">(<argument pos:start="308:24" pos:end="308:24"><expr pos:start="308:24" pos:end="308:24"><name pos:start="308:24" pos:end="308:24">p</name></expr></argument>, <argument pos:start="308:27" pos:end="308:37"><expr pos:start="308:27" pos:end="308:37"><operator pos:start="308:27" pos:end="308:27">(</operator><name pos:start="308:28" pos:end="308:31">char</name> <operator pos:start="308:33" pos:end="308:33">*</operator><operator pos:start="308:34" pos:end="308:34">*</operator><operator pos:start="308:35" pos:end="308:35">)</operator><operator pos:start="308:36" pos:end="308:36">&amp;</operator><name pos:start="308:37" pos:end="308:37">p</name></expr></argument>, <argument pos:start="308:40" pos:end="308:41"><expr pos:start="308:40" pos:end="308:41"><literal type="number" pos:start="308:40" pos:end="308:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="310:9" pos:end="312:16"><if pos:start="310:9" pos:end="312:16">if <condition pos:start="310:12" pos:end="310:22">(<expr pos:start="310:13" pos:end="310:21"><operator pos:start="310:13" pos:end="310:13">*</operator><name pos:start="310:14" pos:end="310:14">p</name> <operator pos:start="310:16" pos:end="310:17">==</operator> <literal type="char" pos:start="310:19" pos:end="310:21">','</literal></expr>)</condition><block type="pseudo" pos:start="312:13" pos:end="312:16"><block_content pos:start="312:13" pos:end="312:16">

            <expr_stmt pos:start="312:13" pos:end="312:16"><expr pos:start="312:13" pos:end="312:15"><name pos:start="312:13" pos:end="312:13">p</name><operator pos:start="312:14" pos:end="312:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="314:9" pos:end="314:44"><expr pos:start="314:9" pos:end="314:43"><name pos:start="314:9" pos:end="314:12">addr</name> <operator pos:start="314:14" pos:end="314:14">=</operator> <call pos:start="314:16" pos:end="314:43"><name pos:start="314:16" pos:end="314:23">strtoull</name><argument_list pos:start="314:24" pos:end="314:43">(<argument pos:start="314:25" pos:end="314:25"><expr pos:start="314:25" pos:end="314:25"><name pos:start="314:25" pos:end="314:25">p</name></expr></argument>, <argument pos:start="314:28" pos:end="314:38"><expr pos:start="314:28" pos:end="314:38"><operator pos:start="314:28" pos:end="314:28">(</operator><name pos:start="314:29" pos:end="314:32">char</name> <operator pos:start="314:34" pos:end="314:34">*</operator><operator pos:start="314:35" pos:end="314:35">*</operator><operator pos:start="314:36" pos:end="314:36">)</operator><operator pos:start="314:37" pos:end="314:37">&amp;</operator><name pos:start="314:38" pos:end="314:38">p</name></expr></argument>, <argument pos:start="314:41" pos:end="314:42"><expr pos:start="314:41" pos:end="314:42"><literal type="number" pos:start="314:41" pos:end="314:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="316:9" pos:end="318:16"><if pos:start="316:9" pos:end="318:16">if <condition pos:start="316:12" pos:end="316:22">(<expr pos:start="316:13" pos:end="316:21"><operator pos:start="316:13" pos:end="316:13">*</operator><name pos:start="316:14" pos:end="316:14">p</name> <operator pos:start="316:16" pos:end="316:17">==</operator> <literal type="char" pos:start="316:19" pos:end="316:21">','</literal></expr>)</condition><block type="pseudo" pos:start="318:13" pos:end="318:16"><block_content pos:start="318:13" pos:end="318:16">

            <expr_stmt pos:start="318:13" pos:end="318:16"><expr pos:start="318:13" pos:end="318:15"><name pos:start="318:13" pos:end="318:13">p</name><operator pos:start="318:14" pos:end="318:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="320:9" pos:end="320:43"><expr pos:start="320:9" pos:end="320:42"><name pos:start="320:9" pos:end="320:11">len</name> <operator pos:start="320:13" pos:end="320:13">=</operator> <call pos:start="320:15" pos:end="320:42"><name pos:start="320:15" pos:end="320:22">strtoull</name><argument_list pos:start="320:23" pos:end="320:42">(<argument pos:start="320:24" pos:end="320:24"><expr pos:start="320:24" pos:end="320:24"><name pos:start="320:24" pos:end="320:24">p</name></expr></argument>, <argument pos:start="320:27" pos:end="320:37"><expr pos:start="320:27" pos:end="320:37"><operator pos:start="320:27" pos:end="320:27">(</operator><name pos:start="320:28" pos:end="320:31">char</name> <operator pos:start="320:33" pos:end="320:33">*</operator><operator pos:start="320:34" pos:end="320:34">*</operator><operator pos:start="320:35" pos:end="320:35">)</operator><operator pos:start="320:36" pos:end="320:36">&amp;</operator><name pos:start="320:37" pos:end="320:37">p</name></expr></argument>, <argument pos:start="320:40" pos:end="320:41"><expr pos:start="320:40" pos:end="320:41"><literal type="number" pos:start="320:40" pos:end="320:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="322:9" pos:end="340:9"><if pos:start="322:9" pos:end="329:9">if <condition pos:start="322:12" pos:end="322:35">(<expr pos:start="322:13" pos:end="322:34"><name pos:start="322:13" pos:end="322:16">type</name> <operator pos:start="322:18" pos:end="322:19">==</operator> <literal type="number" pos:start="322:21" pos:end="322:21">0</literal> <operator pos:start="322:23" pos:end="322:24">||</operator> <name pos:start="322:26" pos:end="322:29">type</name> <operator pos:start="322:31" pos:end="322:32">==</operator> <literal type="number" pos:start="322:34" pos:end="322:34">1</literal></expr>)</condition> <block pos:start="322:37" pos:end="329:9">{<block_content pos:start="324:13" pos:end="328:0">

            <expr_stmt pos:start="324:13" pos:end="328:0"><expr pos:start="324:13" pos:end="324:44"><call pos:start="324:13" pos:end="324:44"><name pos:start="324:13" pos:end="324:33">cpu_breakpoint_remove</name><argument_list pos:start="324:34" pos:end="324:44">(<argument pos:start="324:35" pos:end="324:37"><expr pos:start="324:35" pos:end="324:37"><name pos:start="324:35" pos:end="324:37">env</name></expr></argument>, <argument pos:start="324:40" pos:end="324:43"><expr pos:start="324:40" pos:end="324:43"><name pos:start="324:40" pos:end="324:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:ifndef pos:start="327:1" pos:end="327:24">#<cpp:directive pos:start="327:2" pos:end="327:7">ifndef</cpp:directive> <name pos:start="327:9" pos:end="327:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        </block_content>}</block></if> <if type="elseif" pos:start="329:11" pos:end="336:9">else if <condition pos:start="329:19" pos:end="329:29">(<expr pos:start="329:20" pos:end="329:28"><name pos:start="329:20" pos:end="329:23">type</name> <operator pos:start="329:25" pos:end="329:26">==</operator> <literal type="number" pos:start="329:28" pos:end="329:28">2</literal></expr>)</condition> <block pos:start="329:31" pos:end="336:9">{<block_content pos:start="331:13" pos:end="335:0">

            <expr_stmt pos:start="331:13" pos:end="335:0"><expr pos:start="331:13" pos:end="331:44"><call pos:start="331:13" pos:end="331:44"><name pos:start="331:13" pos:end="331:33">cpu_watchpoint_remove</name><argument_list pos:start="331:34" pos:end="331:44">(<argument pos:start="331:35" pos:end="331:37"><expr pos:start="331:35" pos:end="331:37"><name pos:start="331:35" pos:end="331:37">env</name></expr></argument>, <argument pos:start="331:40" pos:end="331:43"><expr pos:start="331:40" pos:end="331:43"><name pos:start="331:40" pos:end="331:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:endif pos:start="334:1" pos:end="334:6">#<cpp:directive pos:start="334:2" pos:end="334:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="336:11" pos:end="340:9">else <block pos:start="336:16" pos:end="340:9">{<block_content pos:start="338:13" pos:end="338:34">

            <goto pos:start="338:13" pos:end="338:34">goto <name pos:start="338:18" pos:end="338:33">breakpoint_error</name>;</goto>

        </block_content>}</block></else></if_stmt>


    <case pos:start="343:5" pos:end="343:13">case <expr pos:start="343:10" pos:end="343:12"><literal type="char" pos:start="343:10" pos:end="343:12">'q'</literal></expr>:</case>

    <case pos:start="345:5" pos:end="345:13">case <expr pos:start="345:10" pos:end="345:12"><literal type="char" pos:start="345:10" pos:end="345:12">'Q'</literal></expr>:</case>

        <comment type="block" pos:start="347:9" pos:end="347:40">/* parse any 'q' packets here */</comment>

        <if_stmt pos:start="349:9" pos:end="417:0"><if pos:start="349:9" pos:end="364:9">if <condition pos:start="349:12" pos:end="349:40">(<expr pos:start="349:13" pos:end="349:39"><operator pos:start="349:13" pos:end="349:13">!</operator><call pos:start="349:14" pos:end="349:39"><name pos:start="349:14" pos:end="349:19">strcmp</name><argument_list pos:start="349:20" pos:end="349:39">(<argument pos:start="349:21" pos:end="349:21"><expr pos:start="349:21" pos:end="349:21"><name pos:start="349:21" pos:end="349:21">p</name></expr></argument>,<argument pos:start="349:23" pos:end="349:38"><expr pos:start="349:23" pos:end="349:38"><literal type="string" pos:start="349:23" pos:end="349:38">"qemu.sstepbits"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="349:42" pos:end="364:9">{<block_content pos:start="353:13" pos:end="361:31">

            <comment type="block" pos:start="351:13" pos:end="351:50">/* Query Breakpoint bit definitions */</comment>

            <expr_stmt pos:start="353:13" pos:end="359:35"><expr pos:start="353:13" pos:end="359:34"><call pos:start="353:13" pos:end="359:34"><name pos:start="353:13" pos:end="353:19">sprintf</name><argument_list pos:start="353:20" pos:end="359:34">(<argument pos:start="353:21" pos:end="353:23"><expr pos:start="353:21" pos:end="353:23"><name pos:start="353:21" pos:end="353:23">buf</name></expr></argument>,<argument pos:start="353:25" pos:end="353:55"><expr pos:start="353:25" pos:end="353:55"><literal type="string" pos:start="353:25" pos:end="353:55">"ENABLE=%x,NOIRQ=%x,NOTIMER=%x"</literal></expr></argument>,

                    <argument pos:start="355:21" pos:end="355:32"><expr pos:start="355:21" pos:end="355:32"><name pos:start="355:21" pos:end="355:32">SSTEP_ENABLE</name></expr></argument>,

                    <argument pos:start="357:21" pos:end="357:31"><expr pos:start="357:21" pos:end="357:31"><name pos:start="357:21" pos:end="357:31">SSTEP_NOIRQ</name></expr></argument>,

                    <argument pos:start="359:21" pos:end="359:33"><expr pos:start="359:21" pos:end="359:33"><name pos:start="359:21" pos:end="359:33">SSTEP_NOTIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:31"><expr pos:start="361:13" pos:end="361:30"><call pos:start="361:13" pos:end="361:30"><name pos:start="361:13" pos:end="361:22">put_packet</name><argument_list pos:start="361:23" pos:end="361:30">(<argument pos:start="361:24" pos:end="361:24"><expr pos:start="361:24" pos:end="361:24"><name pos:start="361:24" pos:end="361:24">s</name></expr></argument>, <argument pos:start="361:27" pos:end="361:29"><expr pos:start="361:27" pos:end="361:29"><name pos:start="361:27" pos:end="361:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if> <if type="elseif" pos:start="364:11" pos:end="392:0">else if <condition pos:start="364:19" pos:end="364:51">(<expr pos:start="364:20" pos:end="364:50"><call pos:start="364:20" pos:end="364:45"><name pos:start="364:20" pos:end="364:26">strncmp</name><argument_list pos:start="364:27" pos:end="364:45">(<argument pos:start="364:28" pos:end="364:28"><expr pos:start="364:28" pos:end="364:28"><name pos:start="364:28" pos:end="364:28">p</name></expr></argument>,<argument pos:start="364:30" pos:end="364:41"><expr pos:start="364:30" pos:end="364:41"><literal type="string" pos:start="364:30" pos:end="364:41">"qemu.sstep"</literal></expr></argument>,<argument pos:start="364:43" pos:end="364:44"><expr pos:start="364:43" pos:end="364:44"><literal type="number" pos:start="364:43" pos:end="364:44">10</literal></expr></argument>)</argument_list></call> <operator pos:start="364:47" pos:end="364:48">==</operator> <literal type="number" pos:start="364:50" pos:end="364:50">0</literal></expr>)</condition> <block pos:start="364:53" pos:end="392:0">{<block_content pos:start="368:13" pos:end="385:31">

            <comment type="block" pos:start="366:13" pos:end="366:51">/* Display or change the sstep_flags */</comment>

            <expr_stmt pos:start="368:13" pos:end="368:20"><expr pos:start="368:13" pos:end="368:19"><name pos:start="368:13" pos:end="368:13">p</name> <operator pos:start="368:15" pos:end="368:16">+=</operator> <literal type="number" pos:start="368:18" pos:end="368:19">10</literal></expr>;</expr_stmt>

            <if_stmt pos:start="370:13" pos:end="379:13"><if pos:start="370:13" pos:end="379:13">if <condition pos:start="370:16" pos:end="370:26">(<expr pos:start="370:17" pos:end="370:25"><operator pos:start="370:17" pos:end="370:17">*</operator><name pos:start="370:18" pos:end="370:18">p</name> <operator pos:start="370:20" pos:end="370:21">!=</operator> <literal type="char" pos:start="370:23" pos:end="370:25">'='</literal></expr>)</condition> <block pos:start="370:28" pos:end="379:13">{<block_content pos:start="374:17" pos:end="376:35">

                <comment type="block" pos:start="372:17" pos:end="372:45">/* Display current setting */</comment>

                <expr_stmt pos:start="374:17" pos:end="374:49"><expr pos:start="374:17" pos:end="374:48"><call pos:start="374:17" pos:end="374:48"><name pos:start="374:17" pos:end="374:23">sprintf</name><argument_list pos:start="374:24" pos:end="374:48">(<argument pos:start="374:25" pos:end="374:27"><expr pos:start="374:25" pos:end="374:27"><name pos:start="374:25" pos:end="374:27">buf</name></expr></argument>,<argument pos:start="374:29" pos:end="374:34"><expr pos:start="374:29" pos:end="374:34"><literal type="string" pos:start="374:29" pos:end="374:34">"0x%x"</literal></expr></argument>, <argument pos:start="374:37" pos:end="374:47"><expr pos:start="374:37" pos:end="374:47"><name pos:start="374:37" pos:end="374:47">sstep_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="376:17" pos:end="376:35"><expr pos:start="376:17" pos:end="376:34"><call pos:start="376:17" pos:end="376:34"><name pos:start="376:17" pos:end="376:26">put_packet</name><argument_list pos:start="376:27" pos:end="376:34">(<argument pos:start="376:28" pos:end="376:28"><expr pos:start="376:28" pos:end="376:28"><name pos:start="376:28" pos:end="376:28">s</name></expr></argument>, <argument pos:start="376:31" pos:end="376:33"><expr pos:start="376:31" pos:end="376:33"><name pos:start="376:31" pos:end="376:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:16"><expr pos:start="381:13" pos:end="381:15"><name pos:start="381:13" pos:end="381:13">p</name><operator pos:start="381:14" pos:end="381:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:47"><expr pos:start="383:13" pos:end="383:46"><name pos:start="383:13" pos:end="383:16">type</name> <operator pos:start="383:18" pos:end="383:18">=</operator> <call pos:start="383:20" pos:end="383:46"><name pos:start="383:20" pos:end="383:26">strtoul</name><argument_list pos:start="383:27" pos:end="383:46">(<argument pos:start="383:28" pos:end="383:28"><expr pos:start="383:28" pos:end="383:28"><name pos:start="383:28" pos:end="383:28">p</name></expr></argument>, <argument pos:start="383:31" pos:end="383:41"><expr pos:start="383:31" pos:end="383:41"><operator pos:start="383:31" pos:end="383:31">(</operator><name pos:start="383:32" pos:end="383:35">char</name> <operator pos:start="383:37" pos:end="383:37">*</operator><operator pos:start="383:38" pos:end="383:38">*</operator><operator pos:start="383:39" pos:end="383:39">)</operator><operator pos:start="383:40" pos:end="383:40">&amp;</operator><name pos:start="383:41" pos:end="383:41">p</name></expr></argument>, <argument pos:start="383:44" pos:end="383:45"><expr pos:start="383:44" pos:end="383:45"><literal type="number" pos:start="383:44" pos:end="383:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:31"><expr pos:start="385:13" pos:end="385:30"><name pos:start="385:13" pos:end="385:23">sstep_flags</name> <operator pos:start="385:25" pos:end="385:25">=</operator> <name pos:start="385:27" pos:end="385:30">type</name></expr>;</expr_stmt>



        </block_content>}</block></if>

<cpp:ifdef pos:start="391:1" pos:end="391:24">#<cpp:directive pos:start="391:2" pos:end="391:6">ifdef</cpp:directive> <name pos:start="391:8" pos:end="391:24">CONFIG_LINUX_USER</name></cpp:ifdef>

        <if type="elseif" pos:start="393:9" pos:end="417:0">else if <condition pos:start="393:17" pos:end="393:47">(<expr pos:start="393:18" pos:end="393:46"><call pos:start="393:18" pos:end="393:41"><name pos:start="393:18" pos:end="393:24">strncmp</name><argument_list pos:start="393:25" pos:end="393:41">(<argument pos:start="393:26" pos:end="393:26"><expr pos:start="393:26" pos:end="393:26"><name pos:start="393:26" pos:end="393:26">p</name></expr></argument>, <argument pos:start="393:29" pos:end="393:37"><expr pos:start="393:29" pos:end="393:37"><literal type="string" pos:start="393:29" pos:end="393:37">"Offsets"</literal></expr></argument>, <argument pos:start="393:40" pos:end="393:40"><expr pos:start="393:40" pos:end="393:40"><literal type="number" pos:start="393:40" pos:end="393:40">7</literal></expr></argument>)</argument_list></call> <operator pos:start="393:43" pos:end="393:44">==</operator> <literal type="number" pos:start="393:46" pos:end="393:46">0</literal></expr>)</condition> <block pos:start="393:49" pos:end="417:0">{<block_content pos:start="395:13" pos:end="411:31">

            <decl_stmt pos:start="395:13" pos:end="395:40"><decl pos:start="395:13" pos:end="395:39"><type pos:start="395:13" pos:end="395:23"><name pos:start="395:13" pos:end="395:21">TaskState</name> <modifier pos:start="395:23" pos:end="395:23">*</modifier></type><name pos:start="395:24" pos:end="395:25">ts</name> <init pos:start="395:27" pos:end="395:39">= <expr pos:start="395:29" pos:end="395:39"><name pos:start="395:29" pos:end="395:39"><name pos:start="395:29" pos:end="395:31">env</name><operator pos:start="395:32" pos:end="395:33">-&gt;</operator><name pos:start="395:34" pos:end="395:39">opaque</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="399:13" pos:end="409:43"><expr pos:start="399:13" pos:end="409:42"><call pos:start="399:13" pos:end="409:42"><name pos:start="399:13" pos:end="399:19">sprintf</name><argument_list pos:start="399:20" pos:end="409:42">(<argument pos:start="399:21" pos:end="399:23"><expr pos:start="399:21" pos:end="399:23"><name pos:start="399:21" pos:end="399:23">buf</name></expr></argument>,

                    <argument pos:start="401:21" pos:end="403:45"><expr pos:start="401:21" pos:end="403:45"><literal type="string" pos:start="401:21" pos:end="401:27">"Text="</literal> <name pos:start="401:29" pos:end="401:45">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="401:47" pos:end="401:54">";Data="</literal> <name pos:start="401:56" pos:end="401:72">TARGET_ABI_FMT_lx</name>

                    <literal type="string" pos:start="403:21" pos:end="403:27">";Bss="</literal> <name pos:start="403:29" pos:end="403:45">TARGET_ABI_FMT_lx</name></expr></argument>,

                    <argument pos:start="405:21" pos:end="405:41"><expr pos:start="405:21" pos:end="405:41"><name pos:start="405:21" pos:end="405:41"><name pos:start="405:21" pos:end="405:22">ts</name><operator pos:start="405:23" pos:end="405:24">-&gt;</operator><name pos:start="405:25" pos:end="405:28">info</name><operator pos:start="405:29" pos:end="405:30">-&gt;</operator><name pos:start="405:31" pos:end="405:41">code_offset</name></name></expr></argument>,

                    <argument pos:start="407:21" pos:end="407:41"><expr pos:start="407:21" pos:end="407:41"><name pos:start="407:21" pos:end="407:41"><name pos:start="407:21" pos:end="407:22">ts</name><operator pos:start="407:23" pos:end="407:24">-&gt;</operator><name pos:start="407:25" pos:end="407:28">info</name><operator pos:start="407:29" pos:end="407:30">-&gt;</operator><name pos:start="407:31" pos:end="407:41">data_offset</name></name></expr></argument>,

                    <argument pos:start="409:21" pos:end="409:41"><expr pos:start="409:21" pos:end="409:41"><name pos:start="409:21" pos:end="409:41"><name pos:start="409:21" pos:end="409:22">ts</name><operator pos:start="409:23" pos:end="409:24">-&gt;</operator><name pos:start="409:25" pos:end="409:28">info</name><operator pos:start="409:29" pos:end="409:30">-&gt;</operator><name pos:start="409:31" pos:end="409:41">data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:31"><expr pos:start="411:13" pos:end="411:30"><call pos:start="411:13" pos:end="411:30"><name pos:start="411:13" pos:end="411:22">put_packet</name><argument_list pos:start="411:23" pos:end="411:30">(<argument pos:start="411:24" pos:end="411:24"><expr pos:start="411:24" pos:end="411:24"><name pos:start="411:24" pos:end="411:24">s</name></expr></argument>, <argument pos:start="411:27" pos:end="411:29"><expr pos:start="411:27" pos:end="411:29"><name pos:start="411:27" pos:end="411:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="416:1" pos:end="416:6">#<cpp:directive pos:start="416:2" pos:end="416:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="418:9" pos:end="418:28">/* Fall through.  */</comment>

    <default pos:start="420:5" pos:end="420:12">default:</default>

        <comment type="block" pos:start="422:9" pos:end="422:30">/* put empty packet */</comment>

        <expr_stmt pos:start="424:9" pos:end="424:22"><expr pos:start="424:9" pos:end="424:21"><name pos:start="424:9" pos:end="424:14"><name pos:start="424:9" pos:end="424:11">buf</name><index pos:start="424:12" pos:end="424:14">[<expr pos:start="424:13" pos:end="424:13"><literal type="number" pos:start="424:13" pos:end="424:13">0</literal></expr>]</index></name> <operator pos:start="424:16" pos:end="424:16">=</operator> <literal type="char" pos:start="424:18" pos:end="424:21">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="426:9" pos:end="426:27"><expr pos:start="426:9" pos:end="426:26"><call pos:start="426:9" pos:end="426:26"><name pos:start="426:9" pos:end="426:18">put_packet</name><argument_list pos:start="426:19" pos:end="426:26">(<argument pos:start="426:20" pos:end="426:20"><expr pos:start="426:20" pos:end="426:20"><name pos:start="426:20" pos:end="426:20">s</name></expr></argument>, <argument pos:start="426:23" pos:end="426:25"><expr pos:start="426:23" pos:end="426:25"><name pos:start="426:23" pos:end="426:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></switch>

    <return pos:start="431:5" pos:end="431:19">return <expr pos:start="431:12" pos:end="431:18"><name pos:start="431:12" pos:end="431:18">RS_IDLE</name></expr>;</return>

</block_content>}</block></function></unit>
