<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19890.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">qemu_rdma_alloc_pd_cq</name><parameter_list pos:start="1:33" pos:end="1:51">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:44">RDMAContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">rdma</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="77:14">

    <comment type="block" pos:start="5:5" pos:end="5:21">/* allocate pd */</comment>

    <expr_stmt pos:start="7:5" pos:end="7:41"><expr pos:start="7:5" pos:end="7:40"><name pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:8">rdma</name><operator pos:start="7:9" pos:end="7:10">-&gt;</operator><name pos:start="7:11" pos:end="7:12">pd</name></name> <operator pos:start="7:14" pos:end="7:14">=</operator> <call pos:start="7:16" pos:end="7:40"><name pos:start="7:16" pos:end="7:27">ibv_alloc_pd</name><argument_list pos:start="7:28" pos:end="7:40">(<argument pos:start="7:29" pos:end="7:39"><expr pos:start="7:29" pos:end="7:39"><name pos:start="7:29" pos:end="7:39"><name pos:start="7:29" pos:end="7:32">rdma</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:39">verbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:18">(<expr pos:start="9:9" pos:end="9:17"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:13">rdma</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:17">pd</name></name></expr>)</condition> <block pos:start="9:20" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:18">

        <expr_stmt pos:start="11:9" pos:end="11:66"><expr pos:start="11:9" pos:end="11:65"><call pos:start="11:9" pos:end="11:65"><name pos:start="11:9" pos:end="11:15">fprintf</name><argument_list pos:start="11:16" pos:end="11:65">(<argument pos:start="11:17" pos:end="11:22"><expr pos:start="11:17" pos:end="11:22"><name pos:start="11:17" pos:end="11:22">stderr</name></expr></argument>, <argument pos:start="11:25" pos:end="11:64"><expr pos:start="11:25" pos:end="11:64"><literal type="string" pos:start="11:25" pos:end="11:64">"failed to allocate protection domain\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:35">/* create completion channel */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:62"><expr pos:start="21:5" pos:end="21:61"><name pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:8">rdma</name><operator pos:start="21:9" pos:end="21:10">-&gt;</operator><name pos:start="21:11" pos:end="21:22">comp_channel</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:61"><name pos:start="21:26" pos:end="21:48">ibv_create_comp_channel</name><argument_list pos:start="21:49" pos:end="21:61">(<argument pos:start="21:50" pos:end="21:60"><expr pos:start="21:50" pos:end="21:60"><name pos:start="21:50" pos:end="21:60"><name pos:start="21:50" pos:end="21:53">rdma</name><operator pos:start="21:54" pos:end="21:55">-&gt;</operator><name pos:start="21:56" pos:end="21:60">verbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:28">(<expr pos:start="23:9" pos:end="23:27"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:27"><name pos:start="23:10" pos:end="23:13">rdma</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:27">comp_channel</name></name></expr>)</condition> <block pos:start="23:30" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:29">

        <expr_stmt pos:start="25:9" pos:end="25:67"><expr pos:start="25:9" pos:end="25:66"><call pos:start="25:9" pos:end="25:66"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="25:66">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:65"><expr pos:start="25:25" pos:end="25:65"><literal type="string" pos:start="25:25" pos:end="25:65">"failed to allocate completion channel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:29">goto <name pos:start="27:14" pos:end="27:28">err_alloc_pd_cq</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="39:7">/*

     * Completion queue can be filled by both read and write work requests,

     * so must reflect the sum of both possible queue sizes.

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="43:41"><expr pos:start="41:5" pos:end="43:40"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:8">rdma</name><operator pos:start="41:9" pos:end="41:10">-&gt;</operator><name pos:start="41:11" pos:end="41:12">cq</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="43:40"><name pos:start="41:16" pos:end="41:28">ibv_create_cq</name><argument_list pos:start="41:29" pos:end="43:40">(<argument pos:start="41:30" pos:end="41:40"><expr pos:start="41:30" pos:end="41:40"><name pos:start="41:30" pos:end="41:40"><name pos:start="41:30" pos:end="41:33">rdma</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:40">verbs</name></name></expr></argument>, <argument pos:start="41:43" pos:end="41:70"><expr pos:start="41:43" pos:end="41:70"><operator pos:start="41:43" pos:end="41:43">(</operator><name pos:start="41:44" pos:end="41:65">RDMA_SIGNALED_SEND_MAX</name> <operator pos:start="41:67" pos:end="41:67">*</operator> <literal type="number" pos:start="41:69" pos:end="41:69">3</literal><operator pos:start="41:70" pos:end="41:70">)</operator></expr></argument>,

            <argument pos:start="43:13" pos:end="43:16"><expr pos:start="43:13" pos:end="43:16"><name pos:start="43:13" pos:end="43:16">NULL</name></expr></argument>, <argument pos:start="43:19" pos:end="43:36"><expr pos:start="43:19" pos:end="43:36"><name pos:start="43:19" pos:end="43:36"><name pos:start="43:19" pos:end="43:22">rdma</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:36">comp_channel</name></name></expr></argument>, <argument pos:start="43:39" pos:end="43:39"><expr pos:start="43:39" pos:end="43:39"><literal type="number" pos:start="43:39" pos:end="43:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:17"><name pos:start="45:10" pos:end="45:13">rdma</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:17">cq</name></name></expr>)</condition> <block pos:start="45:20" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:29">

        <expr_stmt pos:start="47:9" pos:end="47:65"><expr pos:start="47:9" pos:end="47:64"><call pos:start="47:9" pos:end="47:64"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="47:64">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:63"><expr pos:start="47:25" pos:end="47:63"><literal type="string" pos:start="47:25" pos:end="47:63">"failed to allocate completion queue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:29">goto <name pos:start="49:14" pos:end="49:28">err_alloc_pd_cq</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>



<label pos:start="59:1" pos:end="59:16"><name pos:start="59:1" pos:end="59:15">err_alloc_pd_cq</name>:</label>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:17">(<expr pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:12">rdma</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:16">pd</name></name></expr>)</condition> <block pos:start="61:19" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:33">

        <expr_stmt pos:start="63:9" pos:end="63:33"><expr pos:start="63:9" pos:end="63:32"><call pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:22">ibv_dealloc_pd</name><argument_list pos:start="63:23" pos:end="63:32">(<argument pos:start="63:24" pos:end="63:31"><expr pos:start="63:24" pos:end="63:31"><name pos:start="63:24" pos:end="63:31"><name pos:start="63:24" pos:end="63:27">rdma</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:31">pd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:27">(<expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:12">rdma</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:26">comp_channel</name></name></expr>)</condition> <block pos:start="67:29" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:53">

        <expr_stmt pos:start="69:9" pos:end="69:53"><expr pos:start="69:9" pos:end="69:52"><call pos:start="69:9" pos:end="69:52"><name pos:start="69:9" pos:end="69:32">ibv_destroy_comp_channel</name><argument_list pos:start="69:33" pos:end="69:52">(<argument pos:start="69:34" pos:end="69:51"><expr pos:start="69:34" pos:end="69:51"><name pos:start="69:34" pos:end="69:51"><name pos:start="69:34" pos:end="69:37">rdma</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:51">comp_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:20"><expr pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:12"><name pos:start="73:5" pos:end="73:8">rdma</name><operator pos:start="73:9" pos:end="73:10">-&gt;</operator><name pos:start="73:11" pos:end="73:12">pd</name></name> <operator pos:start="73:14" pos:end="73:14">=</operator> <name pos:start="73:16" pos:end="73:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:30"><expr pos:start="75:5" pos:end="75:29"><name pos:start="75:5" pos:end="75:22"><name pos:start="75:5" pos:end="75:8">rdma</name><operator pos:start="75:9" pos:end="75:10">-&gt;</operator><name pos:start="75:11" pos:end="75:22">comp_channel</name></name> <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:29">NULL</name></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:14">return <expr pos:start="77:12" pos:end="77:13"><operator pos:start="77:12" pos:end="77:12">-</operator><literal type="number" pos:start="77:13" pos:end="77:13">1</literal></expr>;</return>



</block_content>}</block></function>
</unit>
