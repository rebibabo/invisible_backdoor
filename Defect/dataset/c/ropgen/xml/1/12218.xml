<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12218.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">dfa_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="133:1">{<block_content pos:start="9:5" pos:end="131:23">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">DfaContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:55"><decl pos:start="13:5" pos:end="13:54"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">buf_end</name> <init pos:start="13:28" pos:end="13:54">= <expr pos:start="13:30" pos:end="13:54"><name pos:start="13:30" pos:end="13:40"><name pos:start="13:30" pos:end="13:34">avpkt</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">data</name></name> <operator pos:start="13:42" pos:end="13:42">+</operator> <name pos:start="13:44" pos:end="13:54"><name pos:start="13:44" pos:end="13:48">avpkt</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:54">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">tmp_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:23">chunk_type</name></decl>, <decl pos:start="17:26" pos:end="17:35"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:26" pos:end="17:35">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>, <decl pos:start="23:12" pos:end="23:20"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:20">pal_elems</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:46"><if pos:start="27:5" pos:end="29:46">if <condition pos:start="27:8" pos:end="27:23">(<expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">pic</name><operator pos:start="27:15" pos:end="27:15">.</operator><name pos:start="27:16" pos:end="27:19">data</name><index pos:start="27:20" pos:end="27:22">[<expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:46"><block_content pos:start="29:9" pos:end="29:46">

        <expr_stmt pos:start="29:9" pos:end="29:46"><expr pos:start="29:9" pos:end="29:45"><call pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:13">avctx</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:29">release_buffer</name></name><argument_list pos:start="29:30" pos:end="29:45">(<argument pos:start="29:31" pos:end="29:35"><expr pos:start="29:31" pos:end="29:35"><name pos:start="29:31" pos:end="29:35">avctx</name></expr></argument>, <argument pos:start="29:38" pos:end="29:44"><expr pos:start="29:38" pos:end="29:44"><operator pos:start="29:38" pos:end="29:38">&amp;</operator><name pos:start="29:39" pos:end="29:44"><name pos:start="29:39" pos:end="29:39">s</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:44">pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:50">(<expr pos:start="33:9" pos:end="33:49"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:12">ret</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:48"><name pos:start="33:16" pos:end="33:32"><name pos:start="33:16" pos:end="33:20">avctx</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:32">get_buffer</name></name><argument_list pos:start="33:33" pos:end="33:48">(<argument pos:start="33:34" pos:end="33:38"><expr pos:start="33:34" pos:end="33:38"><name pos:start="33:34" pos:end="33:38">avctx</name></expr></argument>, <argument pos:start="33:41" pos:end="33:47"><expr pos:start="33:41" pos:end="33:47"><operator pos:start="33:41" pos:end="33:41">&amp;</operator><name pos:start="33:42" pos:end="33:47"><name pos:start="33:42" pos:end="33:42">s</name><operator pos:start="33:43" pos:end="33:44">-&gt;</operator><name pos:start="33:45" pos:end="33:47">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="33:49" pos:end="33:49">)</operator></expr>)</condition> <block pos:start="33:52" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:19">

        <expr_stmt pos:start="35:9" pos:end="35:61"><expr pos:start="35:9" pos:end="35:60"><call pos:start="35:9" pos:end="35:60"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:60">(<argument pos:start="35:16" pos:end="35:20"><expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">avctx</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:37" pos:end="35:59"><expr pos:start="35:37" pos:end="35:59"><literal type="string" pos:start="35:37" pos:end="35:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="43:5" pos:end="103:5">while <condition pos:start="43:11" pos:end="43:25">(<expr pos:start="43:12" pos:end="43:24"><name pos:start="43:12" pos:end="43:14">buf</name> <operator pos:start="43:16" pos:end="43:16">&lt;</operator> <name pos:start="43:18" pos:end="43:24">buf_end</name></expr>)</condition> <block pos:start="43:27" pos:end="103:5">{<block_content pos:start="45:9" pos:end="101:26">

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:18">chunk_size</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:37"><name pos:start="45:22" pos:end="45:28">AV_RL32</name><argument_list pos:start="45:29" pos:end="45:37">(<argument pos:start="45:30" pos:end="45:36"><expr pos:start="45:30" pos:end="45:36"><name pos:start="45:30" pos:end="45:32">buf</name> <operator pos:start="45:34" pos:end="45:34">+</operator> <literal type="number" pos:start="45:36" pos:end="45:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:38"><expr pos:start="47:9" pos:end="47:37"><name pos:start="47:9" pos:end="47:18">chunk_type</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:37"><name pos:start="47:22" pos:end="47:28">AV_RL32</name><argument_list pos:start="47:29" pos:end="47:37">(<argument pos:start="47:30" pos:end="47:36"><expr pos:start="47:30" pos:end="47:36"><name pos:start="47:30" pos:end="47:32">buf</name> <operator pos:start="47:34" pos:end="47:34">+</operator> <literal type="number" pos:start="47:36" pos:end="47:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:18"><expr pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:11">buf</name> <operator pos:start="49:13" pos:end="49:14">+=</operator> <literal type="number" pos:start="49:16" pos:end="49:17">12</literal></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:39">(<expr pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:19">buf_end</name> <operator pos:start="51:21" pos:end="51:21">-</operator> <name pos:start="51:23" pos:end="51:25">buf</name> <operator pos:start="51:27" pos:end="51:27">&lt;</operator> <name pos:start="51:29" pos:end="51:38">chunk_size</name></expr>)</condition> <block pos:start="51:41" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:22">

            <expr_stmt pos:start="53:13" pos:end="53:90"><expr pos:start="53:13" pos:end="53:89"><call pos:start="53:13" pos:end="53:89"><name pos:start="53:13" pos:end="53:18">av_log</name><argument_list pos:start="53:19" pos:end="53:89">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24">avctx</name></expr></argument>, <argument pos:start="53:27" pos:end="53:38"><expr pos:start="53:27" pos:end="53:38"><name pos:start="53:27" pos:end="53:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:41" pos:end="53:76"><expr pos:start="53:41" pos:end="53:76"><literal type="string" pos:start="53:41" pos:end="53:76">"Chunk size is too big (%d bytes)\n"</literal></expr></argument>, <argument pos:start="53:79" pos:end="53:88"><expr pos:start="53:79" pos:end="53:88"><name pos:start="53:79" pos:end="53:88">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:22">return <expr pos:start="55:20" pos:end="55:21"><operator pos:start="55:20" pos:end="55:20">-</operator><literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="61:18"><if pos:start="59:9" pos:end="61:18">if <condition pos:start="59:12" pos:end="59:24">(<expr pos:start="59:13" pos:end="59:23"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:23">chunk_type</name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:18"><block_content pos:start="61:13" pos:end="61:18">

            <break pos:start="61:13" pos:end="61:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="99:9"><if pos:start="63:9" pos:end="79:9">if <condition pos:start="63:12" pos:end="63:28">(<expr pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:22">chunk_type</name> <operator pos:start="63:24" pos:end="63:25">==</operator> <literal type="number" pos:start="63:27" pos:end="63:27">1</literal></expr>)</condition> <block pos:start="63:30" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:43">

            <expr_stmt pos:start="65:13" pos:end="65:51"><expr pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:21">pal_elems</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:50"><name pos:start="65:25" pos:end="65:29">FFMIN</name><argument_list pos:start="65:30" pos:end="65:50">(<argument pos:start="65:31" pos:end="65:44"><expr pos:start="65:31" pos:end="65:44"><name pos:start="65:31" pos:end="65:40">chunk_size</name> <operator pos:start="65:42" pos:end="65:42">/</operator> <literal type="number" pos:start="65:44" pos:end="65:44">3</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:49"><expr pos:start="65:47" pos:end="65:49"><literal type="number" pos:start="65:47" pos:end="65:49">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:19">tmp_buf</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:25">buf</name></expr>;</expr_stmt>

            <for pos:start="69:13" pos:end="75:13">for <control pos:start="69:17" pos:end="69:43">(<init pos:start="69:18" pos:end="69:23"><expr pos:start="69:18" pos:end="69:22"><name pos:start="69:18" pos:end="69:18">i</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>;</init> <condition pos:start="69:25" pos:end="69:38"><expr pos:start="69:25" pos:end="69:37"><name pos:start="69:25" pos:end="69:25">i</name> <operator pos:start="69:27" pos:end="69:27">&lt;</operator> <name pos:start="69:29" pos:end="69:37">pal_elems</name></expr>;</condition> <incr pos:start="69:40" pos:end="69:42"><expr pos:start="69:40" pos:end="69:42"><name pos:start="69:40" pos:end="69:40">i</name><operator pos:start="69:41" pos:end="69:42">++</operator></expr></incr>)</control> <block pos:start="69:45" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:54">

                <expr_stmt pos:start="71:17" pos:end="71:63"><expr pos:start="71:17" pos:end="71:62"><name pos:start="71:17" pos:end="71:25"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:22">pal</name><index pos:start="71:23" pos:end="71:25">[<expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">i</name></expr>]</index></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <call pos:start="71:29" pos:end="71:57"><name pos:start="71:29" pos:end="71:47">bytestream_get_be24</name><argument_list pos:start="71:48" pos:end="71:57">(<argument pos:start="71:49" pos:end="71:56"><expr pos:start="71:49" pos:end="71:56"><operator pos:start="71:49" pos:end="71:49">&amp;</operator><name pos:start="71:50" pos:end="71:56">tmp_buf</name></expr></argument>)</argument_list></call> <operator pos:start="71:59" pos:end="71:60">&lt;&lt;</operator> <literal type="number" pos:start="71:62" pos:end="71:62">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:54"><expr pos:start="73:17" pos:end="73:53"><name pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:22">pal</name><index pos:start="73:23" pos:end="73:25">[<expr pos:start="73:24" pos:end="73:24"><name pos:start="73:24" pos:end="73:24">i</name></expr>]</index></name> <operator pos:start="73:27" pos:end="73:28">|=</operator> <operator pos:start="73:30" pos:end="73:30">(</operator><name pos:start="73:31" pos:end="73:39"><name pos:start="73:31" pos:end="73:31">s</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:36">pal</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><name pos:start="73:38" pos:end="73:38">i</name></expr>]</index></name> <operator pos:start="73:41" pos:end="73:42">&gt;&gt;</operator> <literal type="number" pos:start="73:44" pos:end="73:44">6</literal><operator pos:start="73:45" pos:end="73:45">)</operator> <operator pos:start="73:47" pos:end="73:47">&amp;</operator> <literal type="number" pos:start="73:49" pos:end="73:53">0x333</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="77:13" pos:end="77:43"><expr pos:start="77:13" pos:end="77:42"><name pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:18">pic</name><operator pos:start="77:19" pos:end="77:19">.</operator><name pos:start="77:20" pos:end="77:38">palette_has_changed</name></name> <operator pos:start="77:40" pos:end="77:40">=</operator> <literal type="number" pos:start="77:42" pos:end="77:42">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="93:9">else if <condition pos:start="79:19" pos:end="79:35">(<expr pos:start="79:20" pos:end="79:34"><name pos:start="79:20" pos:end="79:29">chunk_type</name> <operator pos:start="79:31" pos:end="79:32">&lt;=</operator> <literal type="number" pos:start="79:34" pos:end="79:34">9</literal></expr>)</condition> <block pos:start="79:37" pos:end="93:9">{<block_content pos:start="81:13" pos:end="91:13">

            <if_stmt pos:start="81:13" pos:end="91:13"><if pos:start="81:13" pos:end="91:13">if <condition pos:start="81:16" pos:end="83:63">(<expr pos:start="81:17" pos:end="83:62"><name pos:start="81:17" pos:end="81:39"><name pos:start="81:17" pos:end="81:23">decoder</name><index pos:start="81:24" pos:end="81:39">[<expr pos:start="81:25" pos:end="81:38"><name pos:start="81:25" pos:end="81:34">chunk_type</name> <operator pos:start="81:36" pos:end="81:36">-</operator> <literal type="number" pos:start="81:38" pos:end="81:38">2</literal></expr>]</index></name><operator pos:start="81:40" pos:end="81:40">(</operator><name pos:start="81:41" pos:end="81:52"><name pos:start="81:41" pos:end="81:41">s</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:52">frame_buf</name></name><operator pos:start="81:53" pos:end="81:53">,</operator> <name pos:start="81:55" pos:end="81:66"><name pos:start="81:55" pos:end="81:59">avctx</name><operator pos:start="81:60" pos:end="81:61">-&gt;</operator><name pos:start="81:62" pos:end="81:66">width</name></name><operator pos:start="81:67" pos:end="81:67">,</operator> <name pos:start="81:69" pos:end="81:81"><name pos:start="81:69" pos:end="81:73">avctx</name><operator pos:start="81:74" pos:end="81:75">-&gt;</operator><name pos:start="81:76" pos:end="81:81">height</name></name><operator pos:start="81:82" pos:end="81:82">,</operator>

                                        <name pos:start="83:41" pos:end="83:43">buf</name><operator pos:start="83:44" pos:end="83:44">,</operator> <name pos:start="83:46" pos:end="83:48">buf</name> <operator pos:start="83:50" pos:end="83:50">+</operator> <name pos:start="83:52" pos:end="83:61">chunk_size</name><operator pos:start="83:62" pos:end="83:62">)</operator></expr>)</condition> <block pos:start="83:65" pos:end="91:13">{<block_content pos:start="85:17" pos:end="89:26">

                <expr_stmt pos:start="85:17" pos:end="87:51"><expr pos:start="85:17" pos:end="87:50"><call pos:start="85:17" pos:end="87:50"><name pos:start="85:17" pos:end="85:22">av_log</name><argument_list pos:start="85:23" pos:end="87:50">(<argument pos:start="85:24" pos:end="85:28"><expr pos:start="85:24" pos:end="85:28"><name pos:start="85:24" pos:end="85:28">avctx</name></expr></argument>, <argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:45" pos:end="85:71"><expr pos:start="85:45" pos:end="85:71"><literal type="string" pos:start="85:45" pos:end="85:71">"Error decoding %s chunk\n"</literal></expr></argument>,

                       <argument pos:start="87:24" pos:end="87:49"><expr pos:start="87:24" pos:end="87:49"><name pos:start="87:24" pos:end="87:49"><name pos:start="87:24" pos:end="87:33">chunk_name</name><index pos:start="87:34" pos:end="87:49">[<expr pos:start="87:35" pos:end="87:48"><name pos:start="87:35" pos:end="87:44">chunk_type</name> <operator pos:start="87:46" pos:end="87:46">-</operator> <literal type="number" pos:start="87:48" pos:end="87:48">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="89:17" pos:end="89:26">return <expr pos:start="89:24" pos:end="89:25"><operator pos:start="89:24" pos:end="89:24">-</operator><literal type="number" pos:start="89:25" pos:end="89:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="99:9">else <block pos:start="93:16" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:31">

            <expr_stmt pos:start="95:13" pos:end="97:31"><expr pos:start="95:13" pos:end="97:30"><call pos:start="95:13" pos:end="97:30"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="97:30">(<argument pos:start="95:20" pos:end="95:24"><expr pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:24">avctx</name></expr></argument>, <argument pos:start="95:27" pos:end="95:40"><expr pos:start="95:27" pos:end="95:40"><name pos:start="95:27" pos:end="95:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="95:43" pos:end="95:76"><expr pos:start="95:43" pos:end="95:76"><literal type="string" pos:start="95:43" pos:end="95:76">"Ignoring unknown chunk type %d\n"</literal></expr></argument>,

                   <argument pos:start="97:20" pos:end="97:29"><expr pos:start="97:20" pos:end="97:29"><name pos:start="97:20" pos:end="97:29">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:26"><expr pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:11">buf</name> <operator pos:start="101:13" pos:end="101:14">+=</operator> <name pos:start="101:16" pos:end="101:25">chunk_size</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="107:5" pos:end="107:23"><expr pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:7">buf</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <name pos:start="107:11" pos:end="107:22"><name pos:start="107:11" pos:end="107:11">s</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:22">frame_buf</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:25"><expr pos:start="109:5" pos:end="109:24"><name pos:start="109:5" pos:end="109:7">dst</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <name pos:start="109:11" pos:end="109:24"><name pos:start="109:11" pos:end="109:11">s</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:16">pic</name><operator pos:start="109:17" pos:end="109:17">.</operator><name pos:start="109:18" pos:end="109:21">data</name><index pos:start="109:22" pos:end="109:24">[<expr pos:start="109:23" pos:end="109:23"><literal type="number" pos:start="109:23" pos:end="109:23">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="111:5" pos:end="119:5">for <control pos:start="111:9" pos:end="111:39">(<init pos:start="111:10" pos:end="111:15"><expr pos:start="111:10" pos:end="111:14"><name pos:start="111:10" pos:end="111:10">i</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <literal type="number" pos:start="111:14" pos:end="111:14">0</literal></expr>;</init> <condition pos:start="111:17" pos:end="111:34"><expr pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:17">i</name> <operator pos:start="111:19" pos:end="111:19">&lt;</operator> <name pos:start="111:21" pos:end="111:33"><name pos:start="111:21" pos:end="111:25">avctx</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:33">height</name></name></expr>;</condition> <incr pos:start="111:36" pos:end="111:38"><expr pos:start="111:36" pos:end="111:38"><name pos:start="111:36" pos:end="111:36">i</name><operator pos:start="111:37" pos:end="111:38">++</operator></expr></incr>)</control> <block pos:start="111:41" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:28">

        <expr_stmt pos:start="113:9" pos:end="113:39"><expr pos:start="113:9" pos:end="113:38"><call pos:start="113:9" pos:end="113:38"><name pos:start="113:9" pos:end="113:14">memcpy</name><argument_list pos:start="113:15" pos:end="113:38">(<argument pos:start="113:16" pos:end="113:18"><expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">dst</name></expr></argument>, <argument pos:start="113:21" pos:end="113:23"><expr pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:23">buf</name></expr></argument>, <argument pos:start="113:26" pos:end="113:37"><expr pos:start="113:26" pos:end="113:37"><name pos:start="113:26" pos:end="113:37"><name pos:start="113:26" pos:end="113:30">avctx</name><operator pos:start="113:31" pos:end="113:32">-&gt;</operator><name pos:start="113:33" pos:end="113:37">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:34"><expr pos:start="115:9" pos:end="115:33"><name pos:start="115:9" pos:end="115:11">dst</name> <operator pos:start="115:13" pos:end="115:14">+=</operator> <name pos:start="115:16" pos:end="115:33"><name pos:start="115:16" pos:end="115:16">s</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:21">pic</name><operator pos:start="115:22" pos:end="115:22">.</operator><name pos:start="115:23" pos:end="115:30">linesize</name><index pos:start="115:31" pos:end="115:33">[<expr pos:start="115:32" pos:end="115:32"><literal type="number" pos:start="115:32" pos:end="115:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:11">buf</name> <operator pos:start="117:13" pos:end="117:14">+=</operator> <name pos:start="117:16" pos:end="117:27"><name pos:start="117:16" pos:end="117:20">avctx</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:27">width</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="121:5" pos:end="121:51"><expr pos:start="121:5" pos:end="121:50"><call pos:start="121:5" pos:end="121:50"><name pos:start="121:5" pos:end="121:10">memcpy</name><argument_list pos:start="121:11" pos:end="121:50">(<argument pos:start="121:12" pos:end="121:25"><expr pos:start="121:12" pos:end="121:25"><name pos:start="121:12" pos:end="121:25"><name pos:start="121:12" pos:end="121:12">s</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:17">pic</name><operator pos:start="121:18" pos:end="121:18">.</operator><name pos:start="121:19" pos:end="121:22">data</name><index pos:start="121:23" pos:end="121:25">[<expr pos:start="121:24" pos:end="121:24"><literal type="number" pos:start="121:24" pos:end="121:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:28" pos:end="121:33"><expr pos:start="121:28" pos:end="121:33"><name pos:start="121:28" pos:end="121:33"><name pos:start="121:28" pos:end="121:28">s</name><operator pos:start="121:29" pos:end="121:30">-&gt;</operator><name pos:start="121:31" pos:end="121:33">pal</name></name></expr></argument>, <argument pos:start="121:36" pos:end="121:49"><expr pos:start="121:36" pos:end="121:49"><sizeof pos:start="121:36" pos:end="121:49">sizeof<argument_list pos:start="121:42" pos:end="121:49">(<argument pos:start="121:43" pos:end="121:48"><expr pos:start="121:43" pos:end="121:48"><name pos:start="121:43" pos:end="121:48"><name pos:start="121:43" pos:end="121:43">s</name><operator pos:start="121:44" pos:end="121:45">-&gt;</operator><name pos:start="121:46" pos:end="121:48">pal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:33"><expr pos:start="125:5" pos:end="125:32"><operator pos:start="125:5" pos:end="125:5">*</operator><name pos:start="125:6" pos:end="125:14">data_size</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <sizeof pos:start="125:18" pos:end="125:32">sizeof<argument_list pos:start="125:24" pos:end="125:32">(<argument pos:start="125:25" pos:end="125:31"><expr pos:start="125:25" pos:end="125:31"><name pos:start="125:25" pos:end="125:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:29"><expr pos:start="127:5" pos:end="127:28"><operator pos:start="127:5" pos:end="127:5">*</operator><operator pos:start="127:6" pos:end="127:6">(</operator><name pos:start="127:7" pos:end="127:13">AVFrame</name><operator pos:start="127:14" pos:end="127:14">*</operator><operator pos:start="127:15" pos:end="127:15">)</operator><name pos:start="127:16" pos:end="127:19">data</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:28"><name pos:start="127:23" pos:end="127:23">s</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:28">pic</name></name></expr>;</expr_stmt>



    <return pos:start="131:5" pos:end="131:23">return <expr pos:start="131:12" pos:end="131:22"><name pos:start="131:12" pos:end="131:22"><name pos:start="131:12" pos:end="131:16">avpkt</name><operator pos:start="131:17" pos:end="131:18">-&gt;</operator><name pos:start="131:19" pos:end="131:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
