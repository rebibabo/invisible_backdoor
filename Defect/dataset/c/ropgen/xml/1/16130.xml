<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16130.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">process_line</name><parameter_list pos:start="1:24" pos:end="3:42">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">URLContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">h</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:49"><decl pos:start="1:40" pos:end="1:49"><type pos:start="1:40" pos:end="1:49"><name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">line</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:65">line_count</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:41"><decl pos:start="3:25" pos:end="3:41"><type pos:start="3:25" pos:end="3:41"><name pos:start="3:25" pos:end="3:27">int</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:41">new_location</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">HTTPContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:33">= <expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:22">h</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:33">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">tag</name></decl>, <decl pos:start="9:16" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">p</name></decl>, <decl pos:start="9:20" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">end</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:23">/* end of header */</comment>

    <if_stmt pos:start="15:5" pos:end="17:17"><if pos:start="15:5" pos:end="17:17">if <condition pos:start="15:8" pos:end="15:24">(<expr pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:12">line</name><index pos:start="15:13" pos:end="15:15">[<expr pos:start="15:14" pos:end="15:14"><literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>]</index></name> <operator pos:start="15:17" pos:end="15:18">==</operator> <literal type="char" pos:start="15:20" pos:end="15:23">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:5">p</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <name pos:start="21:9" pos:end="21:12">line</name></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="135:5"><if pos:start="23:5" pos:end="57:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:18">line_count</name> <operator pos:start="23:20" pos:end="23:21">==</operator> <literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr>)</condition> <block pos:start="23:26" pos:end="57:5">{<block_content pos:start="25:9" pos:end="55:9">

        <while pos:start="25:9" pos:end="27:16">while <condition pos:start="25:15" pos:end="25:42">(<expr pos:start="25:16" pos:end="25:41"><operator pos:start="25:16" pos:end="25:16">!</operator><call pos:start="25:17" pos:end="25:27"><name pos:start="25:17" pos:end="25:23">isspace</name><argument_list pos:start="25:24" pos:end="25:27">(<argument pos:start="25:25" pos:end="25:26"><expr pos:start="25:25" pos:end="25:26"><operator pos:start="25:25" pos:end="25:25">*</operator><name pos:start="25:26" pos:end="25:26">p</name></expr></argument>)</argument_list></call> <operator pos:start="25:29" pos:end="25:30">&amp;&amp;</operator> <operator pos:start="25:32" pos:end="25:32">*</operator><name pos:start="25:33" pos:end="25:33">p</name> <operator pos:start="25:35" pos:end="25:36">!=</operator> <literal type="char" pos:start="25:38" pos:end="25:41">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:16"><block_content pos:start="27:13" pos:end="27:16">

            <expr_stmt pos:start="27:13" pos:end="27:16"><expr pos:start="27:13" pos:end="27:15"><name pos:start="27:13" pos:end="27:13">p</name><operator pos:start="27:14" pos:end="27:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <while pos:start="29:9" pos:end="31:16">while <condition pos:start="29:15" pos:end="29:27">(<expr pos:start="29:16" pos:end="29:26"><call pos:start="29:16" pos:end="29:26"><name pos:start="29:16" pos:end="29:22">isspace</name><argument_list pos:start="29:23" pos:end="29:26">(<argument pos:start="29:24" pos:end="29:25"><expr pos:start="29:24" pos:end="29:25"><operator pos:start="29:24" pos:end="29:24">*</operator><name pos:start="29:25" pos:end="29:25">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:16"><block_content pos:start="31:13" pos:end="31:16">

            <expr_stmt pos:start="31:13" pos:end="31:16"><expr pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:13">p</name><operator pos:start="31:14" pos:end="31:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt pos:start="33:9" pos:end="33:43"><expr pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:20">http_code</name></name> <operator pos:start="33:22" pos:end="33:22">=</operator> <call pos:start="33:24" pos:end="33:42"><name pos:start="33:24" pos:end="33:29">strtol</name><argument_list pos:start="33:30" pos:end="33:42">(<argument pos:start="33:31" pos:end="33:31"><expr pos:start="33:31" pos:end="33:31"><name pos:start="33:31" pos:end="33:31">p</name></expr></argument>, <argument pos:start="33:34" pos:end="33:37"><expr pos:start="33:34" pos:end="33:37"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:37">end</name></expr></argument>, <argument pos:start="33:40" pos:end="33:41"><expr pos:start="33:40" pos:end="33:41"><literal type="number" pos:start="33:40" pos:end="33:41">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:54"><expr pos:start="37:9" pos:end="37:53"><call pos:start="37:9" pos:end="37:53"><name pos:start="37:9" pos:end="37:15">av_dlog</name><argument_list pos:start="37:16" pos:end="37:53">(<argument pos:start="37:17" pos:end="37:20"><expr pos:start="37:17" pos:end="37:20"><name pos:start="37:17" pos:end="37:20">NULL</name></expr></argument>, <argument pos:start="37:23" pos:end="37:38"><expr pos:start="37:23" pos:end="37:38"><literal type="string" pos:start="37:23" pos:end="37:38">"http_code=%d\n"</literal></expr></argument>, <argument pos:start="37:41" pos:end="37:52"><expr pos:start="37:41" pos:end="37:52"><name pos:start="37:41" pos:end="37:52"><name pos:start="37:41" pos:end="37:41">s</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:52">http_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="43:61">/* error codes are 4xx and 5xx, but regard 401 as a success, so we

         * don't abort until all headers have been parsed. */</comment>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="45:77">(<expr pos:start="45:13" pos:end="45:76"><name pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:24">http_code</name></name> <operator pos:start="45:26" pos:end="45:27">&gt;=</operator> <literal type="number" pos:start="45:29" pos:end="45:31">400</literal> <operator pos:start="45:33" pos:end="45:34">&amp;&amp;</operator> <name pos:start="45:36" pos:end="45:47"><name pos:start="45:36" pos:end="45:36">s</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:47">http_code</name></name> <operator pos:start="45:49" pos:end="45:49">&lt;</operator> <literal type="number" pos:start="45:51" pos:end="45:53">600</literal> <operator pos:start="45:55" pos:end="45:56">&amp;&amp;</operator> <name pos:start="45:58" pos:end="45:69"><name pos:start="45:58" pos:end="45:58">s</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:69">http_code</name></name> <operator pos:start="45:71" pos:end="45:72">!=</operator> <literal type="number" pos:start="45:74" pos:end="45:76">401</literal></expr>)</condition> <block pos:start="45:79" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:22">

            <expr_stmt pos:start="47:13" pos:end="47:44"><expr pos:start="47:13" pos:end="47:43"><name pos:start="47:13" pos:end="47:15">end</name> <operator pos:start="47:17" pos:end="47:18">+=</operator> <call pos:start="47:20" pos:end="47:43"><name pos:start="47:20" pos:end="47:25">strspn</name><argument_list pos:start="47:26" pos:end="47:43">(<argument pos:start="47:27" pos:end="47:29"><expr pos:start="47:27" pos:end="47:29"><name pos:start="47:27" pos:end="47:29">end</name></expr></argument>, <argument pos:start="47:32" pos:end="47:42"><expr pos:start="47:32" pos:end="47:42"><name pos:start="47:32" pos:end="47:42">SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="51:38"><expr pos:start="49:13" pos:end="51:37"><call pos:start="49:13" pos:end="51:37"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="51:37">(<argument pos:start="49:20" pos:end="49:20"><expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">h</name></expr></argument>, <argument pos:start="49:23" pos:end="49:36"><expr pos:start="49:23" pos:end="49:36"><name pos:start="49:23" pos:end="49:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="49:39" pos:end="49:58"><expr pos:start="49:39" pos:end="49:58"><literal type="string" pos:start="49:39" pos:end="49:58">"HTTP error %d %s\n"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:31"><expr pos:start="51:20" pos:end="51:31"><name pos:start="51:20" pos:end="51:31"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:31">http_code</name></name></expr></argument>, <argument pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><name pos:start="51:34" pos:end="51:36">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="135:5">else <block pos:start="57:12" pos:end="135:5">{<block_content pos:start="59:9" pos:end="133:9">

        <while pos:start="59:9" pos:end="61:16">while <condition pos:start="59:15" pos:end="59:39">(<expr pos:start="59:16" pos:end="59:38"><operator pos:start="59:16" pos:end="59:16">*</operator><name pos:start="59:17" pos:end="59:17">p</name> <operator pos:start="59:19" pos:end="59:20">!=</operator> <literal type="char" pos:start="59:22" pos:end="59:25">'\0'</literal> <operator pos:start="59:27" pos:end="59:28">&amp;&amp;</operator> <operator pos:start="59:30" pos:end="59:30">*</operator><name pos:start="59:31" pos:end="59:31">p</name> <operator pos:start="59:33" pos:end="59:34">!=</operator> <literal type="char" pos:start="59:36" pos:end="59:38">':'</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:16"><block_content pos:start="61:13" pos:end="61:16">

            <expr_stmt pos:start="61:13" pos:end="61:16"><expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:13">p</name><operator pos:start="61:14" pos:end="61:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <if_stmt pos:start="63:9" pos:end="65:21"><if pos:start="63:9" pos:end="65:21">if <condition pos:start="63:12" pos:end="63:22">(<expr pos:start="63:13" pos:end="63:21"><operator pos:start="63:13" pos:end="63:13">*</operator><name pos:start="63:14" pos:end="63:14">p</name> <operator pos:start="63:16" pos:end="63:17">!=</operator> <literal type="char" pos:start="63:19" pos:end="63:21">':'</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:21"><block_content pos:start="65:13" pos:end="65:21">

            <return pos:start="65:13" pos:end="65:21">return <expr pos:start="65:20" pos:end="65:20"><literal type="number" pos:start="65:20" pos:end="65:20">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:18"><expr pos:start="69:9" pos:end="69:17"><operator pos:start="69:9" pos:end="69:9">*</operator><name pos:start="69:10" pos:end="69:10">p</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="char" pos:start="69:14" pos:end="69:17">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:19"><expr pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:11">tag</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:18">line</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:12"><expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:9">p</name><operator pos:start="73:10" pos:end="73:11">++</operator></expr>;</expr_stmt>

        <while pos:start="75:9" pos:end="77:16">while <condition pos:start="75:15" pos:end="75:27">(<expr pos:start="75:16" pos:end="75:26"><call pos:start="75:16" pos:end="75:26"><name pos:start="75:16" pos:end="75:22">isspace</name><argument_list pos:start="75:23" pos:end="75:26">(<argument pos:start="75:24" pos:end="75:25"><expr pos:start="75:24" pos:end="75:25"><operator pos:start="75:24" pos:end="75:24">*</operator><name pos:start="75:25" pos:end="75:25">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:16"><block_content pos:start="77:13" pos:end="77:16">

            <expr_stmt pos:start="77:13" pos:end="77:16"><expr pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:13">p</name><operator pos:start="77:14" pos:end="77:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <if_stmt pos:start="79:9" pos:end="133:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:44">(<expr pos:start="79:13" pos:end="79:43"><operator pos:start="79:13" pos:end="79:13">!</operator><call pos:start="79:14" pos:end="79:43"><name pos:start="79:14" pos:end="79:26">av_strcasecmp</name><argument_list pos:start="79:27" pos:end="79:43">(<argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">tag</name></expr></argument>, <argument pos:start="79:33" pos:end="79:42"><expr pos:start="79:33" pos:end="79:42"><literal type="string" pos:start="79:33" pos:end="79:42">"Location"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:46" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:30">

            <expr_stmt pos:start="81:13" pos:end="81:35"><expr pos:start="81:13" pos:end="81:34"><call pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:18">strcpy</name><argument_list pos:start="81:19" pos:end="81:34">(<argument pos:start="81:20" pos:end="81:30"><expr pos:start="81:20" pos:end="81:30"><name pos:start="81:20" pos:end="81:30"><name pos:start="81:20" pos:end="81:20">s</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:30">location</name></name></expr></argument>, <argument pos:start="81:33" pos:end="81:33"><expr pos:start="81:33" pos:end="81:33"><name pos:start="81:33" pos:end="81:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:30"><expr pos:start="83:13" pos:end="83:29"><operator pos:start="83:13" pos:end="83:13">*</operator><name pos:start="83:14" pos:end="83:25">new_location</name> <operator pos:start="83:27" pos:end="83:27">=</operator> <literal type="number" pos:start="83:29" pos:end="83:29">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="89:9">else if <condition pos:start="85:19" pos:end="85:79">(<expr pos:start="85:20" pos:end="85:78"><operator pos:start="85:20" pos:end="85:20">!</operator><call pos:start="85:21" pos:end="85:57"><name pos:start="85:21" pos:end="85:33">av_strcasecmp</name> <argument_list pos:start="85:35" pos:end="85:57">(<argument pos:start="85:36" pos:end="85:38"><expr pos:start="85:36" pos:end="85:38"><name pos:start="85:36" pos:end="85:38">tag</name></expr></argument>, <argument pos:start="85:41" pos:end="85:56"><expr pos:start="85:41" pos:end="85:56"><literal type="string" pos:start="85:41" pos:end="85:56">"Content-Length"</literal></expr></argument>)</argument_list></call> <operator pos:start="85:59" pos:end="85:60">&amp;&amp;</operator> <name pos:start="85:62" pos:end="85:72"><name pos:start="85:62" pos:end="85:62">s</name><operator pos:start="85:63" pos:end="85:64">-&gt;</operator><name pos:start="85:65" pos:end="85:72">filesize</name></name> <operator pos:start="85:74" pos:end="85:75">==</operator> <operator pos:start="85:77" pos:end="85:77">-</operator><literal type="number" pos:start="85:78" pos:end="85:78">1</literal></expr>)</condition> <block pos:start="85:81" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:35">

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:23">filesize</name></name> <operator pos:start="87:25" pos:end="87:25">=</operator> <call pos:start="87:27" pos:end="87:34"><name pos:start="87:27" pos:end="87:31">atoll</name><argument_list pos:start="87:32" pos:end="87:34">(<argument pos:start="87:33" pos:end="87:33"><expr pos:start="87:33" pos:end="87:33"><name pos:start="87:33" pos:end="87:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="89:11" pos:end="109:9">else if <condition pos:start="89:19" pos:end="89:57">(<expr pos:start="89:20" pos:end="89:56"><operator pos:start="89:20" pos:end="89:20">!</operator><call pos:start="89:21" pos:end="89:56"><name pos:start="89:21" pos:end="89:33">av_strcasecmp</name> <argument_list pos:start="89:35" pos:end="89:56">(<argument pos:start="89:36" pos:end="89:38"><expr pos:start="89:36" pos:end="89:38"><name pos:start="89:36" pos:end="89:38">tag</name></expr></argument>, <argument pos:start="89:41" pos:end="89:55"><expr pos:start="89:41" pos:end="89:55"><literal type="string" pos:start="89:41" pos:end="89:55">"Content-Range"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:59" pos:end="109:9">{<block_content pos:start="93:13" pos:end="107:31">

            <comment type="block" pos:start="91:13" pos:end="91:50">/* "bytes $from-$to/$document_size" */</comment>

            <decl_stmt pos:start="93:13" pos:end="93:30"><decl pos:start="93:13" pos:end="93:29"><type pos:start="93:13" pos:end="93:24"><specifier pos:start="93:13" pos:end="93:17">const</specifier> <name pos:start="93:19" pos:end="93:22">char</name> <modifier pos:start="93:24" pos:end="93:24">*</modifier></type><name pos:start="93:25" pos:end="93:29">slash</name></decl>;</decl_stmt>

            <if_stmt pos:start="95:13" pos:end="105:13"><if pos:start="95:13" pos:end="105:13">if <condition pos:start="95:16" pos:end="95:42">(<expr pos:start="95:17" pos:end="95:41"><operator pos:start="95:17" pos:end="95:17">!</operator><call pos:start="95:18" pos:end="95:41"><name pos:start="95:18" pos:end="95:24">strncmp</name> <argument_list pos:start="95:26" pos:end="95:41">(<argument pos:start="95:27" pos:end="95:27"><expr pos:start="95:27" pos:end="95:27"><name pos:start="95:27" pos:end="95:27">p</name></expr></argument>, <argument pos:start="95:30" pos:end="95:37"><expr pos:start="95:30" pos:end="95:37"><literal type="string" pos:start="95:30" pos:end="95:37">"bytes "</literal></expr></argument>, <argument pos:start="95:40" pos:end="95:40"><expr pos:start="95:40" pos:end="95:40"><literal type="number" pos:start="95:40" pos:end="95:40">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:44" pos:end="105:13">{<block_content pos:start="97:17" pos:end="103:49">

                <expr_stmt pos:start="97:17" pos:end="97:23"><expr pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:17">p</name> <operator pos:start="97:19" pos:end="97:20">+=</operator> <literal type="number" pos:start="97:22" pos:end="97:22">6</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:34"><expr pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:22">off</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <call pos:start="99:26" pos:end="99:33"><name pos:start="99:26" pos:end="99:30">atoll</name><argument_list pos:start="99:31" pos:end="99:33">(<argument pos:start="99:32" pos:end="99:32"><expr pos:start="99:32" pos:end="99:32"><name pos:start="99:32" pos:end="99:32">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="101:17" pos:end="103:49"><if pos:start="101:17" pos:end="103:49">if <condition pos:start="101:20" pos:end="101:66">(<expr pos:start="101:21" pos:end="101:65"><operator pos:start="101:21" pos:end="101:21">(</operator><name pos:start="101:22" pos:end="101:26">slash</name> <operator pos:start="101:28" pos:end="101:28">=</operator> <call pos:start="101:30" pos:end="101:43"><name pos:start="101:30" pos:end="101:35">strchr</name><argument_list pos:start="101:36" pos:end="101:43">(<argument pos:start="101:37" pos:end="101:37"><expr pos:start="101:37" pos:end="101:37"><name pos:start="101:37" pos:end="101:37">p</name></expr></argument>, <argument pos:start="101:40" pos:end="101:42"><expr pos:start="101:40" pos:end="101:42"><literal type="char" pos:start="101:40" pos:end="101:42">'/'</literal></expr></argument>)</argument_list></call><operator pos:start="101:44" pos:end="101:44">)</operator> <operator pos:start="101:46" pos:end="101:47">&amp;&amp;</operator> <call pos:start="101:49" pos:end="101:61"><name pos:start="101:49" pos:end="101:54">strlen</name><argument_list pos:start="101:55" pos:end="101:61">(<argument pos:start="101:56" pos:end="101:60"><expr pos:start="101:56" pos:end="101:60"><name pos:start="101:56" pos:end="101:60">slash</name></expr></argument>)</argument_list></call> <operator pos:start="101:63" pos:end="101:63">&gt;</operator> <literal type="number" pos:start="101:65" pos:end="101:65">0</literal></expr>)</condition><block type="pseudo" pos:start="103:21" pos:end="103:49"><block_content pos:start="103:21" pos:end="103:49">

                    <expr_stmt pos:start="103:21" pos:end="103:49"><expr pos:start="103:21" pos:end="103:48"><name pos:start="103:21" pos:end="103:31"><name pos:start="103:21" pos:end="103:21">s</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:31">filesize</name></name> <operator pos:start="103:33" pos:end="103:33">=</operator> <call pos:start="103:35" pos:end="103:48"><name pos:start="103:35" pos:end="103:39">atoll</name><argument_list pos:start="103:40" pos:end="103:48">(<argument pos:start="103:41" pos:end="103:47"><expr pos:start="103:41" pos:end="103:47"><name pos:start="103:41" pos:end="103:45">slash</name><operator pos:start="103:46" pos:end="103:46">+</operator><literal type="number" pos:start="103:47" pos:end="103:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:31"><expr pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:13">h</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:26">is_streamed</name></name> <operator pos:start="107:28" pos:end="107:28">=</operator> <literal type="number" pos:start="107:30" pos:end="107:30">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="107:33" pos:end="107:59">/* we _can_ in fact seek */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="109:11" pos:end="113:9">else if <condition pos:start="109:19" pos:end="109:83">(<expr pos:start="109:20" pos:end="109:82"><operator pos:start="109:20" pos:end="109:20">!</operator><call pos:start="109:21" pos:end="109:55"><name pos:start="109:21" pos:end="109:33">av_strcasecmp</name><argument_list pos:start="109:34" pos:end="109:55">(<argument pos:start="109:35" pos:end="109:37"><expr pos:start="109:35" pos:end="109:37"><name pos:start="109:35" pos:end="109:37">tag</name></expr></argument>, <argument pos:start="109:40" pos:end="109:54"><expr pos:start="109:40" pos:end="109:54"><literal type="string" pos:start="109:40" pos:end="109:54">"Accept-Ranges"</literal></expr></argument>)</argument_list></call> <operator pos:start="109:57" pos:end="109:58">&amp;&amp;</operator> <operator pos:start="109:60" pos:end="109:60">!</operator><call pos:start="109:61" pos:end="109:82"><name pos:start="109:61" pos:end="109:67">strncmp</name><argument_list pos:start="109:68" pos:end="109:82">(<argument pos:start="109:69" pos:end="109:69"><expr pos:start="109:69" pos:end="109:69"><name pos:start="109:69" pos:end="109:69">p</name></expr></argument>, <argument pos:start="109:72" pos:end="109:78"><expr pos:start="109:72" pos:end="109:78"><literal type="string" pos:start="109:72" pos:end="109:78">"bytes"</literal></expr></argument>, <argument pos:start="109:81" pos:end="109:81"><expr pos:start="109:81" pos:end="109:81"><literal type="number" pos:start="109:81" pos:end="109:81">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:85" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:31">

            <expr_stmt pos:start="111:13" pos:end="111:31"><expr pos:start="111:13" pos:end="111:30"><name pos:start="111:13" pos:end="111:26"><name pos:start="111:13" pos:end="111:13">h</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:26">is_streamed</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <literal type="number" pos:start="111:30" pos:end="111:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="119:9">else if <condition pos:start="113:19" pos:end="113:97">(<expr pos:start="113:20" pos:end="113:96"><operator pos:start="113:20" pos:end="113:20">!</operator><call pos:start="113:21" pos:end="113:60"><name pos:start="113:21" pos:end="113:33">av_strcasecmp</name> <argument_list pos:start="113:35" pos:end="113:60">(<argument pos:start="113:36" pos:end="113:38"><expr pos:start="113:36" pos:end="113:38"><name pos:start="113:36" pos:end="113:38">tag</name></expr></argument>, <argument pos:start="113:41" pos:end="113:59"><expr pos:start="113:41" pos:end="113:59"><literal type="string" pos:start="113:41" pos:end="113:59">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call> <operator pos:start="113:62" pos:end="113:63">&amp;&amp;</operator> <operator pos:start="113:65" pos:end="113:65">!</operator><call pos:start="113:66" pos:end="113:96"><name pos:start="113:66" pos:end="113:79">av_strncasecmp</name><argument_list pos:start="113:80" pos:end="113:96">(<argument pos:start="113:81" pos:end="113:81"><expr pos:start="113:81" pos:end="113:81"><name pos:start="113:81" pos:end="113:81">p</name></expr></argument>, <argument pos:start="113:84" pos:end="113:92"><expr pos:start="113:84" pos:end="113:92"><literal type="string" pos:start="113:84" pos:end="113:92">"chunked"</literal></expr></argument>, <argument pos:start="113:95" pos:end="113:95"><expr pos:start="113:95" pos:end="113:95"><literal type="number" pos:start="113:95" pos:end="113:95">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:99" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:29">

            <expr_stmt pos:start="115:13" pos:end="115:29"><expr pos:start="115:13" pos:end="115:28"><name pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:23">filesize</name></name> <operator pos:start="115:25" pos:end="115:25">=</operator> <operator pos:start="115:27" pos:end="115:27">-</operator><literal type="number" pos:start="115:28" pos:end="115:28">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:29"><expr pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:24"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:24">chunksize</name></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <literal type="number" pos:start="117:28" pos:end="117:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="119:11" pos:end="123:9">else if <condition pos:start="119:19" pos:end="119:60">(<expr pos:start="119:20" pos:end="119:59"><operator pos:start="119:20" pos:end="119:20">!</operator><call pos:start="119:21" pos:end="119:59"><name pos:start="119:21" pos:end="119:33">av_strcasecmp</name> <argument_list pos:start="119:35" pos:end="119:59">(<argument pos:start="119:36" pos:end="119:38"><expr pos:start="119:36" pos:end="119:38"><name pos:start="119:36" pos:end="119:38">tag</name></expr></argument>, <argument pos:start="119:41" pos:end="119:58"><expr pos:start="119:41" pos:end="119:58"><literal type="string" pos:start="119:41" pos:end="119:58">"WWW-Authenticate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:62" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:63">

            <expr_stmt pos:start="121:13" pos:end="121:63"><expr pos:start="121:13" pos:end="121:62"><call pos:start="121:13" pos:end="121:62"><name pos:start="121:13" pos:end="121:38">ff_http_auth_handle_header</name><argument_list pos:start="121:39" pos:end="121:62">(<argument pos:start="121:40" pos:end="121:53"><expr pos:start="121:40" pos:end="121:53"><operator pos:start="121:40" pos:end="121:40">&amp;</operator><name pos:start="121:41" pos:end="121:53"><name pos:start="121:41" pos:end="121:41">s</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:53">auth_state</name></name></expr></argument>, <argument pos:start="121:56" pos:end="121:58"><expr pos:start="121:56" pos:end="121:58"><name pos:start="121:56" pos:end="121:58">tag</name></expr></argument>, <argument pos:start="121:61" pos:end="121:61"><expr pos:start="121:61" pos:end="121:61"><name pos:start="121:61" pos:end="121:61">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="127:9">else if <condition pos:start="123:19" pos:end="123:63">(<expr pos:start="123:20" pos:end="123:62"><operator pos:start="123:20" pos:end="123:20">!</operator><call pos:start="123:21" pos:end="123:62"><name pos:start="123:21" pos:end="123:33">av_strcasecmp</name> <argument_list pos:start="123:35" pos:end="123:62">(<argument pos:start="123:36" pos:end="123:38"><expr pos:start="123:36" pos:end="123:38"><name pos:start="123:36" pos:end="123:38">tag</name></expr></argument>, <argument pos:start="123:41" pos:end="123:61"><expr pos:start="123:41" pos:end="123:61"><literal type="string" pos:start="123:41" pos:end="123:61">"Authentication-Info"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:65" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:63">

            <expr_stmt pos:start="125:13" pos:end="125:63"><expr pos:start="125:13" pos:end="125:62"><call pos:start="125:13" pos:end="125:62"><name pos:start="125:13" pos:end="125:38">ff_http_auth_handle_header</name><argument_list pos:start="125:39" pos:end="125:62">(<argument pos:start="125:40" pos:end="125:53"><expr pos:start="125:40" pos:end="125:53"><operator pos:start="125:40" pos:end="125:40">&amp;</operator><name pos:start="125:41" pos:end="125:53"><name pos:start="125:41" pos:end="125:41">s</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:53">auth_state</name></name></expr></argument>, <argument pos:start="125:56" pos:end="125:58"><expr pos:start="125:56" pos:end="125:58"><name pos:start="125:56" pos:end="125:58">tag</name></expr></argument>, <argument pos:start="125:61" pos:end="125:61"><expr pos:start="125:61" pos:end="125:61"><name pos:start="125:61" pos:end="125:61">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="133:9">else if <condition pos:start="127:19" pos:end="127:54">(<expr pos:start="127:20" pos:end="127:53"><operator pos:start="127:20" pos:end="127:20">!</operator><call pos:start="127:21" pos:end="127:53"><name pos:start="127:21" pos:end="127:33">av_strcasecmp</name> <argument_list pos:start="127:35" pos:end="127:53">(<argument pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:38">tag</name></expr></argument>, <argument pos:start="127:41" pos:end="127:52"><expr pos:start="127:41" pos:end="127:52"><literal type="string" pos:start="127:41" pos:end="127:52">"Connection"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:56" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:33">

            <if_stmt pos:start="129:13" pos:end="131:33"><if pos:start="129:13" pos:end="131:33">if <condition pos:start="129:16" pos:end="129:36">(<expr pos:start="129:17" pos:end="129:35"><operator pos:start="129:17" pos:end="129:17">!</operator><call pos:start="129:18" pos:end="129:35"><name pos:start="129:18" pos:end="129:23">strcmp</name><argument_list pos:start="129:24" pos:end="129:35">(<argument pos:start="129:25" pos:end="129:25"><expr pos:start="129:25" pos:end="129:25"><name pos:start="129:25" pos:end="129:25">p</name></expr></argument>, <argument pos:start="129:28" pos:end="129:34"><expr pos:start="129:28" pos:end="129:34"><literal type="string" pos:start="129:28" pos:end="129:34">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:33"><block_content pos:start="131:17" pos:end="131:33">

                <expr_stmt pos:start="131:17" pos:end="131:33"><expr pos:start="131:17" pos:end="131:32"><name pos:start="131:17" pos:end="131:28"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:28">willclose</name></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <literal type="number" pos:start="131:32" pos:end="131:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="137:5" pos:end="137:13">return <expr pos:start="137:12" pos:end="137:12"><literal type="number" pos:start="137:12" pos:end="137:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
