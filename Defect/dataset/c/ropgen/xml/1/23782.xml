<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23782.c" pos:tabs="8"><function pos:start="1:1" pos:end="387:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">img_rebase</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:30">argc</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="387:1">{<block_content pos:start="5:5" pos:end="385:13">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>, <decl pos:start="5:27" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:41">bs_old_backing</name></decl>, <decl pos:start="5:44" pos:end="5:58"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:58">bs_new_backing</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:32">old_backing_drv</name></decl>, <decl pos:start="7:35" pos:end="7:50"><type ref="prev" pos:start="7:5" pos:end="7:17"><modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:50">new_backing_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:48"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">fmt</name></decl>, <decl pos:start="11:22" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:33">out_basefmt</name></decl>, <decl pos:start="11:36" pos:end="11:47"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:36" pos:end="11:36">*</modifier></type><name pos:start="11:37" pos:end="11:47">out_baseimg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">c</name></decl>, <decl pos:start="13:12" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:16">flags</name></decl>, <decl pos:start="13:19" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:21">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">unsafe</name> <init pos:start="15:16" pos:end="15:18">= <expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:38">/* Parse commandline parameters */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:7">fmt</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <name pos:start="21:11" pos:end="21:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:15">out_baseimg</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:15">out_basefmt</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:22">NULL</name></expr>;</expr_stmt>



    <for pos:start="29:5" pos:end="71:5">for<control pos:start="29:8" pos:end="29:11">(<init pos:start="29:9" pos:end="29:9">;</init><condition pos:start="29:10" pos:end="29:10">;</condition><incr/>)</control> <block pos:start="29:13" pos:end="71:5">{<block_content pos:start="31:9" pos:end="69:9">

        <expr_stmt pos:start="31:9" pos:end="31:43"><expr pos:start="31:9" pos:end="31:42"><name pos:start="31:9" pos:end="31:9">c</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:42"><name pos:start="31:13" pos:end="31:18">getopt</name><argument_list pos:start="31:19" pos:end="31:42">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">argc</name></expr></argument>, <argument pos:start="31:26" pos:end="31:29"><expr pos:start="31:26" pos:end="31:29"><name pos:start="31:26" pos:end="31:29">argv</name></expr></argument>, <argument pos:start="31:32" pos:end="31:41"><expr pos:start="31:32" pos:end="31:41"><literal type="string" pos:start="31:32" pos:end="31:41">"uhf:F:b:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:18"><if pos:start="33:9" pos:end="35:18">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:13">c</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <operator pos:start="33:18" pos:end="33:18">-</operator><literal type="number" pos:start="33:19" pos:end="33:19">1</literal></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:18"><block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break></block_content></block></if></if_stmt>

        <switch pos:start="37:9" pos:end="69:9">switch<condition pos:start="37:15" pos:end="37:17">(<expr pos:start="37:16" pos:end="37:16"><name pos:start="37:16" pos:end="37:16">c</name></expr>)</condition> <block pos:start="37:19" pos:end="69:9">{<block_content pos:start="39:9" pos:end="67:18">

        <case pos:start="39:9" pos:end="39:17">case <expr pos:start="39:14" pos:end="39:16"><literal type="char" pos:start="39:14" pos:end="39:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:19"><expr pos:start="41:13" pos:end="41:18"><call pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:16">help</name><argument_list pos:start="41:17" pos:end="41:18">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:21">return <expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</return>

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:25"><expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:15">fmt</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:17">case <expr pos:start="51:14" pos:end="51:16"><literal type="char" pos:start="51:14" pos:end="51:16">'F'</literal></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:33"><expr pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:23">out_basefmt</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:32">optarg</name></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:17">case <expr pos:start="57:14" pos:end="57:16"><literal type="char" pos:start="57:14" pos:end="57:16">'b'</literal></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:23">out_baseimg</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:32">optarg</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'u'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:23"><expr pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:18">unsafe</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <if_stmt pos:start="75:5" pos:end="77:15"><if pos:start="75:5" pos:end="77:15">if <condition pos:start="75:8" pos:end="75:41">(<expr pos:start="75:9" pos:end="75:40"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:15">optind</name> <operator pos:start="75:17" pos:end="75:18">&gt;=</operator> <name pos:start="75:20" pos:end="75:23">argc</name><operator pos:start="75:24" pos:end="75:24">)</operator> <operator pos:start="75:26" pos:end="75:27">||</operator> <operator pos:start="75:29" pos:end="75:29">!</operator><name pos:start="75:30" pos:end="75:40">out_baseimg</name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:15"><block_content pos:start="77:9" pos:end="77:15">

        <expr_stmt pos:start="77:9" pos:end="77:15"><expr pos:start="77:9" pos:end="77:14"><call pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:12">help</name><argument_list pos:start="77:13" pos:end="77:14">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:30"><expr pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:12">filename</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:29"><name pos:start="79:16" pos:end="79:19">argv</name><index pos:start="79:20" pos:end="79:29">[<expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:26">optind</name><operator pos:start="79:27" pos:end="79:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="93:7">/*

     * Open the images.

     *

     * Ignore the old backing file for unsafe rebase in case we want to correct

     * the reference to a renamed or moved backing file.

     */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:74"><expr pos:start="95:5" pos:end="95:73"><name pos:start="95:5" pos:end="95:9">flags</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <name pos:start="95:13" pos:end="95:24">BDRV_O_FLAGS</name> <operator pos:start="95:26" pos:end="95:26">|</operator> <name pos:start="95:28" pos:end="95:38">BDRV_O_RDWR</name> <operator pos:start="95:40" pos:end="95:40">|</operator> <operator pos:start="95:42" pos:end="95:42">(</operator><ternary pos:start="95:43" pos:end="95:72"><condition pos:start="95:43" pos:end="95:50"><expr pos:start="95:43" pos:end="95:48"><name pos:start="95:43" pos:end="95:48">unsafe</name></expr> ?</condition><then pos:start="95:52" pos:end="95:68"> <expr pos:start="95:52" pos:end="95:68"><name pos:start="95:52" pos:end="95:68">BDRV_O_NO_BACKING</name></expr> </then><else pos:start="95:70" pos:end="95:72">: <expr pos:start="95:72" pos:end="95:72"><literal type="number" pos:start="95:72" pos:end="95:72">0</literal></expr></else></ternary><operator pos:start="95:73" pos:end="95:73">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:45"><expr pos:start="97:5" pos:end="97:44"><name pos:start="97:5" pos:end="97:6">bs</name> <operator pos:start="97:8" pos:end="97:8">=</operator> <call pos:start="97:10" pos:end="97:44"><name pos:start="97:10" pos:end="97:22">bdrv_new_open</name><argument_list pos:start="97:23" pos:end="97:44">(<argument pos:start="97:24" pos:end="97:31"><expr pos:start="97:24" pos:end="97:31"><name pos:start="97:24" pos:end="97:31">filename</name></expr></argument>, <argument pos:start="97:34" pos:end="97:36"><expr pos:start="97:34" pos:end="97:36"><name pos:start="97:34" pos:end="97:36">fmt</name></expr></argument>, <argument pos:start="97:39" pos:end="97:43"><expr pos:start="97:39" pos:end="97:43"><name pos:start="97:39" pos:end="97:43">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:54">/* Find the right drivers for the backing files */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:27"><expr pos:start="103:5" pos:end="103:26"><name pos:start="103:5" pos:end="103:19">old_backing_drv</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:27"><expr pos:start="105:5" pos:end="105:26"><name pos:start="105:5" pos:end="105:19">new_backing_drv</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:26">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:49">(<expr pos:start="109:9" pos:end="109:48"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:15">unsafe</name> <operator pos:start="109:17" pos:end="109:18">&amp;&amp;</operator> <name pos:start="109:20" pos:end="109:40"><name pos:start="109:20" pos:end="109:21">bs</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:37">backing_format</name><index pos:start="109:38" pos:end="109:40">[<expr pos:start="109:39" pos:end="109:39"><literal type="number" pos:start="109:39" pos:end="109:39">0</literal></expr>]</index></name> <operator pos:start="109:42" pos:end="109:43">!=</operator> <literal type="char" pos:start="109:45" pos:end="109:48">'\0'</literal></expr>)</condition> <block pos:start="109:51" pos:end="119:5">{<block_content pos:start="111:9" pos:end="117:9">

        <expr_stmt pos:start="111:9" pos:end="111:63"><expr pos:start="111:9" pos:end="111:62"><name pos:start="111:9" pos:end="111:23">old_backing_drv</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <call pos:start="111:27" pos:end="111:62"><name pos:start="111:27" pos:end="111:42">bdrv_find_format</name><argument_list pos:start="111:43" pos:end="111:62">(<argument pos:start="111:44" pos:end="111:61"><expr pos:start="111:44" pos:end="111:61"><name pos:start="111:44" pos:end="111:61"><name pos:start="111:44" pos:end="111:45">bs</name><operator pos:start="111:46" pos:end="111:47">-&gt;</operator><name pos:start="111:48" pos:end="111:61">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:36">(<expr pos:start="113:13" pos:end="113:35"><name pos:start="113:13" pos:end="113:27">old_backing_drv</name> <operator pos:start="113:29" pos:end="113:30">==</operator> <name pos:start="113:32" pos:end="113:35">NULL</name></expr>)</condition> <block pos:start="113:38" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:67">

            <expr_stmt pos:start="115:13" pos:end="115:67"><expr pos:start="115:13" pos:end="115:66"><call pos:start="115:13" pos:end="115:66"><name pos:start="115:13" pos:end="115:17">error</name><argument_list pos:start="115:18" pos:end="115:66">(<argument pos:start="115:19" pos:end="115:45"><expr pos:start="115:19" pos:end="115:45"><literal type="string" pos:start="115:19" pos:end="115:45">"Invalid format name: '%s'"</literal></expr></argument>, <argument pos:start="115:48" pos:end="115:65"><expr pos:start="115:48" pos:end="115:65"><name pos:start="115:48" pos:end="115:65"><name pos:start="115:48" pos:end="115:49">bs</name><operator pos:start="115:50" pos:end="115:51">-&gt;</operator><name pos:start="115:52" pos:end="115:65">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="133:5"><if pos:start="123:5" pos:end="133:5">if <condition pos:start="123:8" pos:end="123:28">(<expr pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:19">out_basefmt</name> <operator pos:start="123:21" pos:end="123:22">!=</operator> <name pos:start="123:24" pos:end="123:27">NULL</name></expr>)</condition> <block pos:start="123:30" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:9">

        <expr_stmt pos:start="125:9" pos:end="125:56"><expr pos:start="125:9" pos:end="125:55"><name pos:start="125:9" pos:end="125:23">new_backing_drv</name> <operator pos:start="125:25" pos:end="125:25">=</operator> <call pos:start="125:27" pos:end="125:55"><name pos:start="125:27" pos:end="125:42">bdrv_find_format</name><argument_list pos:start="125:43" pos:end="125:55">(<argument pos:start="125:44" pos:end="125:54"><expr pos:start="125:44" pos:end="125:54"><name pos:start="125:44" pos:end="125:54">out_basefmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="131:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:36">(<expr pos:start="127:13" pos:end="127:35"><name pos:start="127:13" pos:end="127:27">new_backing_drv</name> <operator pos:start="127:29" pos:end="127:30">==</operator> <name pos:start="127:32" pos:end="127:35">NULL</name></expr>)</condition> <block pos:start="127:38" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:60">

            <expr_stmt pos:start="129:13" pos:end="129:60"><expr pos:start="129:13" pos:end="129:59"><call pos:start="129:13" pos:end="129:59"><name pos:start="129:13" pos:end="129:17">error</name><argument_list pos:start="129:18" pos:end="129:59">(<argument pos:start="129:19" pos:end="129:45"><expr pos:start="129:19" pos:end="129:45"><literal type="string" pos:start="129:19" pos:end="129:45">"Invalid format name: '%s'"</literal></expr></argument>, <argument pos:start="129:48" pos:end="129:58"><expr pos:start="129:48" pos:end="129:58"><name pos:start="129:48" pos:end="129:58">out_basefmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:71">/* For safe rebasing we need to compare old and new backing file */</comment>

    <if_stmt pos:start="139:5" pos:end="185:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:15">(<expr pos:start="139:9" pos:end="139:14"><name pos:start="139:9" pos:end="139:14">unsafe</name></expr>)</condition> <block pos:start="139:17" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:30">

        <comment type="block" pos:start="141:9" pos:end="141:37">/* Make the compiler happy */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:30"><expr pos:start="143:9" pos:end="143:29"><name pos:start="143:9" pos:end="143:22">bs_old_backing</name> <operator pos:start="143:24" pos:end="143:24">=</operator> <name pos:start="143:26" pos:end="143:29">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:30"><expr pos:start="145:9" pos:end="145:29"><name pos:start="145:9" pos:end="145:22">bs_new_backing</name> <operator pos:start="145:24" pos:end="145:24">=</operator> <name pos:start="145:26" pos:end="145:29">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="147:7" pos:end="185:5">else <block pos:start="147:12" pos:end="185:5">{<block_content pos:start="149:9" pos:end="183:9">

        <decl_stmt pos:start="149:9" pos:end="149:32"><decl pos:start="149:9" pos:end="149:31"><type pos:start="149:9" pos:end="149:12"><name pos:start="149:9" pos:end="149:12">char</name></type> <name pos:start="149:14" pos:end="149:31"><name pos:start="149:14" pos:end="149:25">backing_name</name><index pos:start="149:26" pos:end="149:31">[<expr pos:start="149:27" pos:end="149:30"><literal type="number" pos:start="149:27" pos:end="149:30">1024</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:49"><expr pos:start="153:9" pos:end="153:48"><name pos:start="153:9" pos:end="153:22">bs_old_backing</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <call pos:start="153:26" pos:end="153:48"><name pos:start="153:26" pos:end="153:33">bdrv_new</name><argument_list pos:start="153:34" pos:end="153:48">(<argument pos:start="153:35" pos:end="153:47"><expr pos:start="153:35" pos:end="153:47"><literal type="string" pos:start="153:35" pos:end="153:47">"old_backing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:74"><expr pos:start="155:9" pos:end="155:73"><call pos:start="155:9" pos:end="155:73"><name pos:start="155:9" pos:end="155:33">bdrv_get_backing_filename</name><argument_list pos:start="155:34" pos:end="155:73">(<argument pos:start="155:35" pos:end="155:36"><expr pos:start="155:35" pos:end="155:36"><name pos:start="155:35" pos:end="155:36">bs</name></expr></argument>, <argument pos:start="155:39" pos:end="155:50"><expr pos:start="155:39" pos:end="155:50"><name pos:start="155:39" pos:end="155:50">backing_name</name></expr></argument>, <argument pos:start="155:53" pos:end="155:72"><expr pos:start="155:53" pos:end="155:72"><sizeof pos:start="155:53" pos:end="155:72">sizeof<argument_list pos:start="155:59" pos:end="155:72">(<argument pos:start="155:60" pos:end="155:71"><expr pos:start="155:60" pos:end="155:71"><name pos:start="155:60" pos:end="155:71">backing_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="167:9"><if pos:start="157:9" pos:end="167:9">if <condition pos:start="157:12" pos:end="159:29">(<expr pos:start="157:13" pos:end="159:28"><call pos:start="157:13" pos:end="159:28"><name pos:start="157:13" pos:end="157:21">bdrv_open</name><argument_list pos:start="157:22" pos:end="159:28">(<argument pos:start="157:23" pos:end="157:36"><expr pos:start="157:23" pos:end="157:36"><name pos:start="157:23" pos:end="157:36">bs_old_backing</name></expr></argument>, <argument pos:start="157:39" pos:end="157:50"><expr pos:start="157:39" pos:end="157:50"><name pos:start="157:39" pos:end="157:50">backing_name</name></expr></argument>, <argument pos:start="157:53" pos:end="157:64"><expr pos:start="157:53" pos:end="157:64"><name pos:start="157:53" pos:end="157:64">BDRV_O_FLAGS</name></expr></argument>,

            <argument pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:27"><name pos:start="159:13" pos:end="159:27">old_backing_drv</name></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="161:9" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:22">

            <expr_stmt pos:start="163:13" pos:end="163:72"><expr pos:start="163:13" pos:end="163:71"><call pos:start="163:13" pos:end="163:71"><name pos:start="163:13" pos:end="163:17">error</name><argument_list pos:start="163:18" pos:end="163:71">(<argument pos:start="163:19" pos:end="163:56"><expr pos:start="163:19" pos:end="163:56"><literal type="string" pos:start="163:19" pos:end="163:56">"Could not open old backing file '%s'"</literal></expr></argument>, <argument pos:start="163:59" pos:end="163:70"><expr pos:start="163:59" pos:end="163:70"><name pos:start="163:59" pos:end="163:70">backing_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="165:13" pos:end="165:22">return <expr pos:start="165:20" pos:end="165:21"><operator pos:start="165:20" pos:end="165:20">-</operator><literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:49"><expr pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:22">bs_new_backing</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <call pos:start="171:26" pos:end="171:48"><name pos:start="171:26" pos:end="171:33">bdrv_new</name><argument_list pos:start="171:34" pos:end="171:48">(<argument pos:start="171:35" pos:end="171:47"><expr pos:start="171:35" pos:end="171:47"><literal type="string" pos:start="171:35" pos:end="171:47">"new_backing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="183:9"><if pos:start="173:9" pos:end="183:9">if <condition pos:start="173:12" pos:end="175:29">(<expr pos:start="173:13" pos:end="175:28"><call pos:start="173:13" pos:end="175:28"><name pos:start="173:13" pos:end="173:21">bdrv_open</name><argument_list pos:start="173:22" pos:end="175:28">(<argument pos:start="173:23" pos:end="173:36"><expr pos:start="173:23" pos:end="173:36"><name pos:start="173:23" pos:end="173:36">bs_new_backing</name></expr></argument>, <argument pos:start="173:39" pos:end="173:49"><expr pos:start="173:39" pos:end="173:49"><name pos:start="173:39" pos:end="173:49">out_baseimg</name></expr></argument>, <argument pos:start="173:52" pos:end="173:77"><expr pos:start="173:52" pos:end="173:77"><name pos:start="173:52" pos:end="173:63">BDRV_O_FLAGS</name> <operator pos:start="173:65" pos:end="173:65">|</operator> <name pos:start="173:67" pos:end="173:77">BDRV_O_RDWR</name></expr></argument>,

            <argument pos:start="175:13" pos:end="175:27"><expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:27">new_backing_drv</name></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="177:9" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:22">

            <expr_stmt pos:start="179:13" pos:end="179:71"><expr pos:start="179:13" pos:end="179:70"><call pos:start="179:13" pos:end="179:70"><name pos:start="179:13" pos:end="179:17">error</name><argument_list pos:start="179:18" pos:end="179:70">(<argument pos:start="179:19" pos:end="179:56"><expr pos:start="179:19" pos:end="179:56"><literal type="string" pos:start="179:19" pos:end="179:56">"Could not open new backing file '%s'"</literal></expr></argument>, <argument pos:start="179:59" pos:end="179:69"><expr pos:start="179:59" pos:end="179:69"><name pos:start="179:59" pos:end="179:69">out_baseimg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="181:13" pos:end="181:22">return <expr pos:start="181:20" pos:end="181:21"><operator pos:start="181:20" pos:end="181:20">-</operator><literal type="number" pos:start="181:21" pos:end="181:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="205:7">/*

     * Check each unallocated cluster in the COW file. If it is unallocated,

     * accesses go to the backing file. We must therefore compare this cluster

     * in the old and new backing file, and if they differ we need to copy it

     * from the old backing file into the COW file.

     *

     * If qemu-img crashes during this step, no harm is done. The content of

     * the image is the same as the original one at any time.

     */</comment>

    <if_stmt pos:start="207:5" pos:end="323:5"><if pos:start="207:5" pos:end="323:5">if <condition pos:start="207:8" pos:end="207:16">(<expr pos:start="207:9" pos:end="207:15"><operator pos:start="207:9" pos:end="207:9">!</operator><name pos:start="207:10" pos:end="207:15">unsafe</name></expr>)</condition> <block pos:start="207:18" pos:end="323:5">{<block_content pos:start="209:9" pos:end="321:27">

        <decl_stmt pos:start="209:9" pos:end="209:29"><decl pos:start="209:9" pos:end="209:28"><type pos:start="209:9" pos:end="209:16"><name pos:start="209:9" pos:end="209:16">uint64_t</name></type> <name pos:start="209:18" pos:end="209:28">num_sectors</name></decl>;</decl_stmt>

        <decl_stmt pos:start="211:9" pos:end="211:24"><decl pos:start="211:9" pos:end="211:23"><type pos:start="211:9" pos:end="211:16"><name pos:start="211:9" pos:end="211:16">uint64_t</name></type> <name pos:start="211:18" pos:end="211:23">sector</name></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:18"><decl pos:start="213:9" pos:end="213:13"><type pos:start="213:9" pos:end="213:11"><name pos:start="213:9" pos:end="213:11">int</name></type> <name pos:start="213:13" pos:end="213:13">n</name></decl>, <decl pos:start="213:16" pos:end="213:17"><type ref="prev" pos:start="213:9" pos:end="213:11"/><name pos:start="213:16" pos:end="213:17">n1</name></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:26"><decl pos:start="215:9" pos:end="215:25"><type pos:start="215:9" pos:end="215:17"><name pos:start="215:9" pos:end="215:15">uint8_t</name> <modifier pos:start="215:17" pos:end="215:17">*</modifier></type> <name pos:start="215:19" pos:end="215:25">buf_old</name></decl>;</decl_stmt>

        <decl_stmt pos:start="217:9" pos:end="217:26"><decl pos:start="217:9" pos:end="217:25"><type pos:start="217:9" pos:end="217:17"><name pos:start="217:9" pos:end="217:15">uint8_t</name> <modifier pos:start="217:17" pos:end="217:17">*</modifier></type> <name pos:start="217:19" pos:end="217:25">buf_new</name></decl>;</decl_stmt>



        <expr_stmt pos:start="221:9" pos:end="221:43"><expr pos:start="221:9" pos:end="221:42"><name pos:start="221:9" pos:end="221:15">buf_old</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:42"><name pos:start="221:19" pos:end="221:29">qemu_malloc</name><argument_list pos:start="221:30" pos:end="221:42">(<argument pos:start="221:31" pos:end="221:41"><expr pos:start="221:31" pos:end="221:41"><name pos:start="221:31" pos:end="221:41">IO_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:43"><expr pos:start="223:9" pos:end="223:42"><name pos:start="223:9" pos:end="223:15">buf_new</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <call pos:start="223:19" pos:end="223:42"><name pos:start="223:19" pos:end="223:29">qemu_malloc</name><argument_list pos:start="223:30" pos:end="223:42">(<argument pos:start="223:31" pos:end="223:41"><expr pos:start="223:31" pos:end="223:41"><name pos:start="223:31" pos:end="223:41">IO_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:44"><expr pos:start="227:9" pos:end="227:43"><call pos:start="227:9" pos:end="227:43"><name pos:start="227:9" pos:end="227:25">bdrv_get_geometry</name><argument_list pos:start="227:26" pos:end="227:43">(<argument pos:start="227:27" pos:end="227:28"><expr pos:start="227:27" pos:end="227:28"><name pos:start="227:27" pos:end="227:28">bs</name></expr></argument>, <argument pos:start="227:31" pos:end="227:42"><expr pos:start="227:31" pos:end="227:42"><operator pos:start="227:31" pos:end="227:31">&amp;</operator><name pos:start="227:32" pos:end="227:42">num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="231:9" pos:end="315:9">for <control pos:start="231:13" pos:end="231:59">(<init pos:start="231:14" pos:end="231:24"><expr pos:start="231:14" pos:end="231:23"><name pos:start="231:14" pos:end="231:19">sector</name> <operator pos:start="231:21" pos:end="231:21">=</operator> <literal type="number" pos:start="231:23" pos:end="231:23">0</literal></expr>;</init> <condition pos:start="231:26" pos:end="231:46"><expr pos:start="231:26" pos:end="231:45"><name pos:start="231:26" pos:end="231:31">sector</name> <operator pos:start="231:33" pos:end="231:33">&lt;</operator> <name pos:start="231:35" pos:end="231:45">num_sectors</name></expr>;</condition> <incr pos:start="231:48" pos:end="231:58"><expr pos:start="231:48" pos:end="231:58"><name pos:start="231:48" pos:end="231:53">sector</name> <operator pos:start="231:55" pos:end="231:56">+=</operator> <name pos:start="231:58" pos:end="231:58">n</name></expr></incr>)</control> <block pos:start="231:61" pos:end="315:9">{<block_content pos:start="237:13" pos:end="313:13">



            <comment type="block" pos:start="235:13" pos:end="235:68">/* How many sectors can we handle with the next read? */</comment>

            <if_stmt pos:start="237:13" pos:end="245:13"><if pos:start="237:13" pos:end="241:13">if <condition pos:start="237:16" pos:end="237:60">(<expr pos:start="237:17" pos:end="237:59"><name pos:start="237:17" pos:end="237:22">sector</name> <operator pos:start="237:24" pos:end="237:24">+</operator> <operator pos:start="237:26" pos:end="237:26">(</operator><name pos:start="237:27" pos:end="237:37">IO_BUF_SIZE</name> <operator pos:start="237:39" pos:end="237:39">/</operator> <literal type="number" pos:start="237:41" pos:end="237:43">512</literal><operator pos:start="237:44" pos:end="237:44">)</operator> <operator pos:start="237:46" pos:end="237:47">&lt;=</operator> <name pos:start="237:49" pos:end="237:59">num_sectors</name></expr>)</condition> <block pos:start="237:62" pos:end="241:13">{<block_content pos:start="239:17" pos:end="239:40">

                <expr_stmt pos:start="239:17" pos:end="239:40"><expr pos:start="239:17" pos:end="239:39"><name pos:start="239:17" pos:end="239:17">n</name> <operator pos:start="239:19" pos:end="239:19">=</operator> <operator pos:start="239:21" pos:end="239:21">(</operator><name pos:start="239:22" pos:end="239:32">IO_BUF_SIZE</name> <operator pos:start="239:34" pos:end="239:34">/</operator> <literal type="number" pos:start="239:36" pos:end="239:38">512</literal><operator pos:start="239:39" pos:end="239:39">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="241:15" pos:end="245:13">else <block pos:start="241:20" pos:end="245:13">{<block_content pos:start="243:17" pos:end="243:41">

                <expr_stmt pos:start="243:17" pos:end="243:41"><expr pos:start="243:17" pos:end="243:40"><name pos:start="243:17" pos:end="243:17">n</name> <operator pos:start="243:19" pos:end="243:19">=</operator> <name pos:start="243:21" pos:end="243:31">num_sectors</name> <operator pos:start="243:33" pos:end="243:33">-</operator> <name pos:start="243:35" pos:end="243:40">sector</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="249:13" pos:end="249:75">/* If the cluster is allocated, we don't need to take action */</comment>

            <if_stmt pos:start="251:13" pos:end="257:13"><if pos:start="251:13" pos:end="257:13">if <condition pos:start="251:16" pos:end="251:54">(<expr pos:start="251:17" pos:end="251:53"><call pos:start="251:17" pos:end="251:53"><name pos:start="251:17" pos:end="251:33">bdrv_is_allocated</name><argument_list pos:start="251:34" pos:end="251:53">(<argument pos:start="251:35" pos:end="251:36"><expr pos:start="251:35" pos:end="251:36"><name pos:start="251:35" pos:end="251:36">bs</name></expr></argument>, <argument pos:start="251:39" pos:end="251:44"><expr pos:start="251:39" pos:end="251:44"><name pos:start="251:39" pos:end="251:44">sector</name></expr></argument>, <argument pos:start="251:47" pos:end="251:47"><expr pos:start="251:47" pos:end="251:47"><name pos:start="251:47" pos:end="251:47">n</name></expr></argument>, <argument pos:start="251:50" pos:end="251:52"><expr pos:start="251:50" pos:end="251:52"><operator pos:start="251:50" pos:end="251:50">&amp;</operator><name pos:start="251:51" pos:end="251:52">n1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:56" pos:end="257:13">{<block_content pos:start="253:17" pos:end="255:25">

                <expr_stmt pos:start="253:17" pos:end="253:23"><expr pos:start="253:17" pos:end="253:22"><name pos:start="253:17" pos:end="253:17">n</name> <operator pos:start="253:19" pos:end="253:19">=</operator> <name pos:start="253:21" pos:end="253:22">n1</name></expr>;</expr_stmt>

                <continue pos:start="255:17" pos:end="255:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="261:13" pos:end="261:47">/* Read old and new backing file */</comment>

            <if_stmt pos:start="263:13" pos:end="267:13"><if pos:start="263:13" pos:end="267:13">if <condition pos:start="263:16" pos:end="263:66">(<expr pos:start="263:17" pos:end="263:65"><call pos:start="263:17" pos:end="263:61"><name pos:start="263:17" pos:end="263:25">bdrv_read</name><argument_list pos:start="263:26" pos:end="263:61">(<argument pos:start="263:27" pos:end="263:40"><expr pos:start="263:27" pos:end="263:40"><name pos:start="263:27" pos:end="263:40">bs_old_backing</name></expr></argument>, <argument pos:start="263:43" pos:end="263:48"><expr pos:start="263:43" pos:end="263:48"><name pos:start="263:43" pos:end="263:48">sector</name></expr></argument>, <argument pos:start="263:51" pos:end="263:57"><expr pos:start="263:51" pos:end="263:57"><name pos:start="263:51" pos:end="263:57">buf_old</name></expr></argument>, <argument pos:start="263:60" pos:end="263:60"><expr pos:start="263:60" pos:end="263:60"><name pos:start="263:60" pos:end="263:60">n</name></expr></argument>)</argument_list></call> <operator pos:start="263:63" pos:end="263:63">&lt;</operator> <literal type="number" pos:start="263:65" pos:end="263:65">0</literal></expr>)</condition> <block pos:start="263:68" pos:end="267:13">{<block_content pos:start="265:17" pos:end="265:67">

                <expr_stmt pos:start="265:17" pos:end="265:67"><expr pos:start="265:17" pos:end="265:66"><call pos:start="265:17" pos:end="265:66"><name pos:start="265:17" pos:end="265:21">error</name><argument_list pos:start="265:22" pos:end="265:66">(<argument pos:start="265:23" pos:end="265:65"><expr pos:start="265:23" pos:end="265:65"><literal type="string" pos:start="265:23" pos:end="265:65">"error while reading from old backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="269:13" pos:end="273:13"><if pos:start="269:13" pos:end="273:13">if <condition pos:start="269:16" pos:end="269:66">(<expr pos:start="269:17" pos:end="269:65"><call pos:start="269:17" pos:end="269:61"><name pos:start="269:17" pos:end="269:25">bdrv_read</name><argument_list pos:start="269:26" pos:end="269:61">(<argument pos:start="269:27" pos:end="269:40"><expr pos:start="269:27" pos:end="269:40"><name pos:start="269:27" pos:end="269:40">bs_new_backing</name></expr></argument>, <argument pos:start="269:43" pos:end="269:48"><expr pos:start="269:43" pos:end="269:48"><name pos:start="269:43" pos:end="269:48">sector</name></expr></argument>, <argument pos:start="269:51" pos:end="269:57"><expr pos:start="269:51" pos:end="269:57"><name pos:start="269:51" pos:end="269:57">buf_new</name></expr></argument>, <argument pos:start="269:60" pos:end="269:60"><expr pos:start="269:60" pos:end="269:60"><name pos:start="269:60" pos:end="269:60">n</name></expr></argument>)</argument_list></call> <operator pos:start="269:63" pos:end="269:63">&lt;</operator> <literal type="number" pos:start="269:65" pos:end="269:65">0</literal></expr>)</condition> <block pos:start="269:68" pos:end="273:13">{<block_content pos:start="271:17" pos:end="271:67">

                <expr_stmt pos:start="271:17" pos:end="271:67"><expr pos:start="271:17" pos:end="271:66"><call pos:start="271:17" pos:end="271:66"><name pos:start="271:17" pos:end="271:21">error</name><argument_list pos:start="271:22" pos:end="271:66">(<argument pos:start="271:23" pos:end="271:65"><expr pos:start="271:23" pos:end="271:65"><literal type="string" pos:start="271:23" pos:end="271:65">"error while reading from new backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="277:13" pos:end="277:66">/* If they differ, we need to write to the COW file */</comment>

            <decl_stmt pos:start="279:13" pos:end="279:33"><decl pos:start="279:13" pos:end="279:32"><type pos:start="279:13" pos:end="279:20"><name pos:start="279:13" pos:end="279:20">uint64_t</name></type> <name pos:start="279:22" pos:end="279:28">written</name> <init pos:start="279:30" pos:end="279:32">= <expr pos:start="279:32" pos:end="279:32"><literal type="number" pos:start="279:32" pos:end="279:32">0</literal></expr></init></decl>;</decl_stmt>



            <while pos:start="283:13" pos:end="313:13">while <condition pos:start="283:19" pos:end="283:31">(<expr pos:start="283:20" pos:end="283:30"><name pos:start="283:20" pos:end="283:26">written</name> <operator pos:start="283:28" pos:end="283:28">&lt;</operator> <name pos:start="283:30" pos:end="283:30">n</name></expr>)</condition> <block pos:start="283:33" pos:end="313:13">{<block_content pos:start="285:17" pos:end="311:32">

                <decl_stmt pos:start="285:17" pos:end="285:25"><decl pos:start="285:17" pos:end="285:24"><type pos:start="285:17" pos:end="285:19"><name pos:start="285:17" pos:end="285:19">int</name></type> <name pos:start="285:21" pos:end="285:24">pnum</name></decl>;</decl_stmt>



                <if_stmt pos:start="289:17" pos:end="307:17"><if pos:start="289:17" pos:end="307:17">if <condition pos:start="289:20" pos:end="291:65">(<expr pos:start="289:21" pos:end="291:64"><call pos:start="289:21" pos:end="291:64"><name pos:start="289:21" pos:end="289:35">compare_sectors</name><argument_list pos:start="289:36" pos:end="291:64">(<argument pos:start="289:37" pos:end="289:59"><expr pos:start="289:37" pos:end="289:59"><name pos:start="289:37" pos:end="289:43">buf_old</name> <operator pos:start="289:45" pos:end="289:45">+</operator> <name pos:start="289:47" pos:end="289:53">written</name> <operator pos:start="289:55" pos:end="289:55">*</operator> <literal type="number" pos:start="289:57" pos:end="289:59">512</literal></expr></argument>,

                    <argument pos:start="291:21" pos:end="291:43"><expr pos:start="291:21" pos:end="291:43"><name pos:start="291:21" pos:end="291:27">buf_new</name> <operator pos:start="291:29" pos:end="291:29">+</operator> <name pos:start="291:31" pos:end="291:37">written</name> <operator pos:start="291:39" pos:end="291:39">*</operator> <literal type="number" pos:start="291:41" pos:end="291:43">512</literal></expr></argument>, <argument pos:start="291:46" pos:end="291:56"><expr pos:start="291:46" pos:end="291:56"><name pos:start="291:46" pos:end="291:46">n</name> <operator pos:start="291:48" pos:end="291:48">-</operator> <name pos:start="291:50" pos:end="291:56">written</name></expr></argument>, <argument pos:start="291:59" pos:end="291:63"><expr pos:start="291:59" pos:end="291:63"><operator pos:start="291:59" pos:end="291:59">&amp;</operator><name pos:start="291:60" pos:end="291:63">pnum</name></expr></argument>)</argument_list></call></expr>)</condition>

                <block pos:start="293:17" pos:end="307:17">{<block_content pos:start="295:21" pos:end="305:21">

                    <expr_stmt pos:start="295:21" pos:end="297:55"><expr pos:start="295:21" pos:end="297:54"><name pos:start="295:21" pos:end="295:23">ret</name> <operator pos:start="295:25" pos:end="295:25">=</operator> <call pos:start="295:27" pos:end="297:54"><name pos:start="295:27" pos:end="295:36">bdrv_write</name><argument_list pos:start="295:37" pos:end="297:54">(<argument pos:start="295:38" pos:end="295:39"><expr pos:start="295:38" pos:end="295:39"><name pos:start="295:38" pos:end="295:39">bs</name></expr></argument>, <argument pos:start="295:42" pos:end="295:57"><expr pos:start="295:42" pos:end="295:57"><name pos:start="295:42" pos:end="295:47">sector</name> <operator pos:start="295:49" pos:end="295:49">+</operator> <name pos:start="295:51" pos:end="295:57">written</name></expr></argument>,

                        <argument pos:start="297:25" pos:end="297:47"><expr pos:start="297:25" pos:end="297:47"><name pos:start="297:25" pos:end="297:31">buf_old</name> <operator pos:start="297:33" pos:end="297:33">+</operator> <name pos:start="297:35" pos:end="297:41">written</name> <operator pos:start="297:43" pos:end="297:43">*</operator> <literal type="number" pos:start="297:45" pos:end="297:47">512</literal></expr></argument>, <argument pos:start="297:50" pos:end="297:53"><expr pos:start="297:50" pos:end="297:53"><name pos:start="297:50" pos:end="297:53">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="299:21" pos:end="305:21"><if pos:start="299:21" pos:end="305:21">if <condition pos:start="299:24" pos:end="299:32">(<expr pos:start="299:25" pos:end="299:31"><name pos:start="299:25" pos:end="299:27">ret</name> <operator pos:start="299:29" pos:end="299:29">&lt;</operator> <literal type="number" pos:start="299:31" pos:end="299:31">0</literal></expr>)</condition> <block pos:start="299:34" pos:end="305:21">{<block_content pos:start="301:25" pos:end="303:44">

                        <expr_stmt pos:start="301:25" pos:end="303:44"><expr pos:start="301:25" pos:end="303:43"><call pos:start="301:25" pos:end="303:43"><name pos:start="301:25" pos:end="301:29">error</name><argument_list pos:start="301:30" pos:end="303:43">(<argument pos:start="301:31" pos:end="301:68"><expr pos:start="301:31" pos:end="301:68"><literal type="string" pos:start="301:31" pos:end="301:68">"Error while writing to COW image: %s"</literal></expr></argument>,

                            <argument pos:start="303:29" pos:end="303:42"><expr pos:start="303:29" pos:end="303:42"><call pos:start="303:29" pos:end="303:42"><name pos:start="303:29" pos:end="303:36">strerror</name><argument_list pos:start="303:37" pos:end="303:42">(<argument pos:start="303:38" pos:end="303:41"><expr pos:start="303:38" pos:end="303:41"><operator pos:start="303:38" pos:end="303:38">-</operator><name pos:start="303:39" pos:end="303:41">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="311:17" pos:end="311:32"><expr pos:start="311:17" pos:end="311:31"><name pos:start="311:17" pos:end="311:23">written</name> <operator pos:start="311:25" pos:end="311:26">+=</operator> <name pos:start="311:28" pos:end="311:31">pnum</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></for>



        <expr_stmt pos:start="319:9" pos:end="319:27"><expr pos:start="319:9" pos:end="319:26"><call pos:start="319:9" pos:end="319:26"><name pos:start="319:9" pos:end="319:17">qemu_free</name><argument_list pos:start="319:18" pos:end="319:26">(<argument pos:start="319:19" pos:end="319:25"><expr pos:start="319:19" pos:end="319:25"><name pos:start="319:19" pos:end="319:25">buf_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:27"><expr pos:start="321:9" pos:end="321:26"><call pos:start="321:9" pos:end="321:26"><name pos:start="321:9" pos:end="321:17">qemu_free</name><argument_list pos:start="321:18" pos:end="321:26">(<argument pos:start="321:19" pos:end="321:25"><expr pos:start="321:19" pos:end="321:25"><name pos:start="321:19" pos:end="321:25">buf_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="327:5" pos:end="335:7">/*

     * Change the backing file. All clusters that are different from the old

     * backing file are overwritten in the COW file now, so the visible content

     * doesn't change when we switch the backing file.

     */</comment>

    <expr_stmt pos:start="337:5" pos:end="337:65"><expr pos:start="337:5" pos:end="337:64"><name pos:start="337:5" pos:end="337:7">ret</name> <operator pos:start="337:9" pos:end="337:9">=</operator> <call pos:start="337:11" pos:end="337:64"><name pos:start="337:11" pos:end="337:34">bdrv_change_backing_file</name><argument_list pos:start="337:35" pos:end="337:64">(<argument pos:start="337:36" pos:end="337:37"><expr pos:start="337:36" pos:end="337:37"><name pos:start="337:36" pos:end="337:37">bs</name></expr></argument>, <argument pos:start="337:40" pos:end="337:50"><expr pos:start="337:40" pos:end="337:50"><name pos:start="337:40" pos:end="337:50">out_baseimg</name></expr></argument>, <argument pos:start="337:53" pos:end="337:63"><expr pos:start="337:53" pos:end="337:63"><name pos:start="337:53" pos:end="337:63">out_basefmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="339:5" pos:end="351:5"><if pos:start="339:5" pos:end="345:5">if <condition pos:start="339:8" pos:end="339:23">(<expr pos:start="339:9" pos:end="339:22"><name pos:start="339:9" pos:end="339:11">ret</name> <operator pos:start="339:13" pos:end="339:14">==</operator> <operator pos:start="339:16" pos:end="339:16">-</operator><name pos:start="339:17" pos:end="339:22">ENOSPC</name></expr>)</condition> <block pos:start="339:25" pos:end="345:5">{<block_content pos:start="341:9" pos:end="343:44">

        <expr_stmt pos:start="341:9" pos:end="343:44"><expr pos:start="341:9" pos:end="343:43"><call pos:start="341:9" pos:end="343:43"><name pos:start="341:9" pos:end="341:13">error</name><argument_list pos:start="341:14" pos:end="343:43">(<argument pos:start="341:15" pos:end="343:29"><expr pos:start="341:15" pos:end="343:29"><literal type="string" pos:start="341:15" pos:end="341:76">"Could not change the backing file to '%s': No space left in "</literal>

            <literal type="string" pos:start="343:13" pos:end="343:29">"the file header"</literal></expr></argument>, <argument pos:start="343:32" pos:end="343:42"><expr pos:start="343:32" pos:end="343:42"><name pos:start="343:32" pos:end="343:42">out_baseimg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="345:7" pos:end="351:5">else if <condition pos:start="345:15" pos:end="345:23">(<expr pos:start="345:16" pos:end="345:22"><name pos:start="345:16" pos:end="345:18">ret</name> <operator pos:start="345:20" pos:end="345:20">&lt;</operator> <literal type="number" pos:start="345:22" pos:end="345:22">0</literal></expr>)</condition> <block pos:start="345:25" pos:end="351:5">{<block_content pos:start="347:9" pos:end="349:41">

        <expr_stmt pos:start="347:9" pos:end="349:41"><expr pos:start="347:9" pos:end="349:40"><call pos:start="347:9" pos:end="349:40"><name pos:start="347:9" pos:end="347:13">error</name><argument_list pos:start="347:14" pos:end="349:40">(<argument pos:start="347:15" pos:end="347:61"><expr pos:start="347:15" pos:end="347:61"><literal type="string" pos:start="347:15" pos:end="347:61">"Could not change the backing file to '%s': %s"</literal></expr></argument>,

            <argument pos:start="349:13" pos:end="349:23"><expr pos:start="349:13" pos:end="349:23"><name pos:start="349:13" pos:end="349:23">out_baseimg</name></expr></argument>, <argument pos:start="349:26" pos:end="349:39"><expr pos:start="349:26" pos:end="349:39"><call pos:start="349:26" pos:end="349:39"><name pos:start="349:26" pos:end="349:33">strerror</name><argument_list pos:start="349:34" pos:end="349:39">(<argument pos:start="349:35" pos:end="349:38"><expr pos:start="349:35" pos:end="349:38"><operator pos:start="349:35" pos:end="349:35">-</operator><name pos:start="349:36" pos:end="349:38">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="355:5" pos:end="365:7">/*

     * TODO At this point it is possible to check if any clusters that are

     * allocated in the COW file are the same in the backing file. If so, they

     * could be dropped from the COW file. Don't do this before switching the

     * backing file, in case of a crash this would lead to corruption.

     */</comment>



    <comment type="block" pos:start="369:5" pos:end="369:17">/* Cleanup */</comment>

    <if_stmt pos:start="371:5" pos:end="377:5"><if pos:start="371:5" pos:end="377:5">if <condition pos:start="371:8" pos:end="371:16">(<expr pos:start="371:9" pos:end="371:15"><operator pos:start="371:9" pos:end="371:9">!</operator><name pos:start="371:10" pos:end="371:15">unsafe</name></expr>)</condition> <block pos:start="371:18" pos:end="377:5">{<block_content pos:start="373:9" pos:end="375:36">

        <expr_stmt pos:start="373:9" pos:end="373:36"><expr pos:start="373:9" pos:end="373:35"><call pos:start="373:9" pos:end="373:35"><name pos:start="373:9" pos:end="373:19">bdrv_delete</name><argument_list pos:start="373:20" pos:end="373:35">(<argument pos:start="373:21" pos:end="373:34"><expr pos:start="373:21" pos:end="373:34"><name pos:start="373:21" pos:end="373:34">bs_old_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:36"><expr pos:start="375:9" pos:end="375:35"><call pos:start="375:9" pos:end="375:35"><name pos:start="375:9" pos:end="375:19">bdrv_delete</name><argument_list pos:start="375:20" pos:end="375:35">(<argument pos:start="375:21" pos:end="375:34"><expr pos:start="375:21" pos:end="375:34"><name pos:start="375:21" pos:end="375:34">bs_new_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="381:5" pos:end="381:20"><expr pos:start="381:5" pos:end="381:19"><call pos:start="381:5" pos:end="381:19"><name pos:start="381:5" pos:end="381:15">bdrv_delete</name><argument_list pos:start="381:16" pos:end="381:19">(<argument pos:start="381:17" pos:end="381:18"><expr pos:start="381:17" pos:end="381:18"><name pos:start="381:17" pos:end="381:18">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="385:5" pos:end="385:13">return <expr pos:start="385:12" pos:end="385:12"><literal type="number" pos:start="385:12" pos:end="385:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
