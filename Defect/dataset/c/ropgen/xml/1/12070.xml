<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12070.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">bool</name></type> <name pos:start="1:6" pos:end="1:21">qpci_msix_masked</name><parameter_list pos:start="1:22" pos:end="1:54">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:32">QPCIDevice</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">dev</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:47">uint16_t</name></type> <name pos:start="1:49" pos:end="1:53">entry</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:16">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:72"><decl pos:start="9:5" pos:end="9:71"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:21">vector_addr</name> <init pos:start="9:23" pos:end="9:71">= <expr pos:start="9:25" pos:end="9:71"><name pos:start="9:25" pos:end="9:39"><name pos:start="9:25" pos:end="9:27">dev</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:39">msix_table</name></name> <operator pos:start="9:41" pos:end="9:41">+</operator> <operator pos:start="9:43" pos:end="9:43">(</operator><name pos:start="9:44" pos:end="9:48">entry</name> <operator pos:start="9:50" pos:end="9:50">*</operator> <name pos:start="9:52" pos:end="9:70">PCI_MSIX_ENTRY_SIZE</name><operator pos:start="9:71" pos:end="9:71">)</operator></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><call pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:12">g_assert</name><argument_list pos:start="13:13" pos:end="13:31">(<argument pos:start="13:14" pos:end="13:30"><expr pos:start="13:14" pos:end="13:30"><name pos:start="13:14" pos:end="13:30"><name pos:start="13:14" pos:end="13:16">dev</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:30">msix_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:54"><expr pos:start="15:5" pos:end="15:53"><name pos:start="15:5" pos:end="15:8">addr</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <call pos:start="15:12" pos:end="15:53"><name pos:start="15:12" pos:end="15:31">qpci_find_capability</name><argument_list pos:start="15:32" pos:end="15:53">(<argument pos:start="15:33" pos:end="15:35"><expr pos:start="15:33" pos:end="15:35"><name pos:start="15:33" pos:end="15:35">dev</name></expr></argument>, <argument pos:start="15:38" pos:end="15:52"><expr pos:start="15:38" pos:end="15:52"><name pos:start="15:38" pos:end="15:52">PCI_CAP_ID_MSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><call pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:19">g_assert_cmphex</name><argument_list pos:start="17:20" pos:end="17:32">(<argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">addr</name></expr></argument>, <argument pos:start="17:27" pos:end="17:28"><expr pos:start="17:27" pos:end="17:28"><operator pos:start="17:27" pos:end="17:28">!=</operator></expr></argument>, <argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><literal type="number" pos:start="17:31" pos:end="17:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:56"><expr pos:start="19:5" pos:end="19:55"><name pos:start="19:5" pos:end="19:7">val</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:55"><name pos:start="19:11" pos:end="19:27">qpci_config_readw</name><argument_list pos:start="19:28" pos:end="19:55">(<argument pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:31">dev</name></expr></argument>, <argument pos:start="19:34" pos:end="19:54"><expr pos:start="19:34" pos:end="19:54"><name pos:start="19:34" pos:end="19:37">addr</name> <operator pos:start="19:39" pos:end="19:39">+</operator> <name pos:start="19:41" pos:end="19:54">PCI_MSIX_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:37">(<expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:11">val</name> <operator pos:start="23:13" pos:end="23:13">&amp;</operator> <name pos:start="23:15" pos:end="23:36">PCI_MSIX_FLAGS_MASKALL</name></expr>)</condition> <block pos:start="23:39" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">true</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="33:5">else <block pos:start="27:12" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:80">

        <return pos:start="29:9" pos:end="31:80">return <expr pos:start="29:16" pos:end="31:79"><operator pos:start="29:16" pos:end="29:16">(</operator><call pos:start="29:17" pos:end="29:76"><name pos:start="29:17" pos:end="29:29">qpci_io_readl</name><argument_list pos:start="29:30" pos:end="29:76">(<argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">dev</name></expr></argument>, <argument pos:start="29:36" pos:end="29:75"><expr pos:start="29:36" pos:end="29:75"><name pos:start="29:36" pos:end="29:46">vector_addr</name> <operator pos:start="29:48" pos:end="29:48">+</operator> <name pos:start="29:50" pos:end="29:75">PCI_MSIX_ENTRY_VECTOR_CTRL</name></expr></argument>)</argument_list></call>

                                            <operator pos:start="31:45" pos:end="31:45">&amp;</operator> <name pos:start="31:47" pos:end="31:73">PCI_MSIX_ENTRY_CTRL_MASKBIT</name><operator pos:start="31:74" pos:end="31:74">)</operator> <operator pos:start="31:76" pos:end="31:77">!=</operator> <literal type="number" pos:start="31:79" pos:end="31:79">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
