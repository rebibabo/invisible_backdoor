<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7128.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">nist_read_header</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="171:1">{<block_content pos:start="5:5" pos:end="169:23">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:19"><name pos:start="5:10" pos:end="5:15">buffer</name><index pos:start="5:16" pos:end="5:19">[<expr pos:start="5:17" pos:end="5:18"><literal type="number" pos:start="5:17" pos:end="5:18">32</literal></expr>]</index></name></decl>, <decl pos:start="5:22" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:22" pos:end="5:31"><name pos:start="5:22" pos:end="5:27">coding</name><index pos:start="5:28" pos:end="5:31">[<expr pos:start="5:29" pos:end="5:30"><literal type="number" pos:start="5:29" pos:end="5:30">32</literal></expr>]</index></name> <init pos:start="5:33" pos:end="5:39">= <expr pos:start="5:35" pos:end="5:39"><literal type="string" pos:start="5:35" pos:end="5:39">"pcm"</literal></expr></init></decl>, <decl pos:start="5:42" pos:end="5:58"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:42" pos:end="5:51"><name pos:start="5:42" pos:end="5:47">format</name><index pos:start="5:48" pos:end="5:51">[<expr pos:start="5:49" pos:end="5:50"><literal type="number" pos:start="5:49" pos:end="5:50">32</literal></expr>]</index></name> <init pos:start="5:53" pos:end="5:58">= <expr pos:start="5:55" pos:end="5:58"><literal type="string" pos:start="5:55" pos:end="5:58">"01"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">bps</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>, <decl pos:start="7:18" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:19">be</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:23">header_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:6">st</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:37"><name pos:start="15:10" pos:end="15:28">avformat_new_stream</name><argument_list pos:start="15:29" pos:end="15:37">(<argument pos:start="15:30" pos:end="15:30"><expr pos:start="15:30" pos:end="15:30"><name pos:start="15:30" pos:end="15:30">s</name></expr></argument>, <argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><name pos:start="15:33" pos:end="15:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:31"><if pos:start="17:5" pos:end="19:31">if <condition pos:start="17:8" pos:end="17:12">(<expr pos:start="17:9" pos:end="17:11"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:11">st</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:31"><block_content pos:start="19:9" pos:end="19:31">

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:6">st</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:13">codec</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:25">codec_type</name></name> <operator pos:start="23:27" pos:end="23:27">=</operator> <name pos:start="23:29" pos:end="23:46">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:15">ff_get_line</name><argument_list pos:start="27:16" pos:end="27:46">(<argument pos:start="27:17" pos:end="27:21"><expr pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:21">pb</name></name></expr></argument>, <argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">buffer</name></expr></argument>, <argument pos:start="27:32" pos:end="27:45"><expr pos:start="27:32" pos:end="27:45"><sizeof pos:start="27:32" pos:end="27:45">sizeof<argument_list pos:start="27:38" pos:end="27:45">(<argument pos:start="27:39" pos:end="27:44"><expr pos:start="27:39" pos:end="27:44"><name pos:start="27:39" pos:end="27:44">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><call pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:15">ff_get_line</name><argument_list pos:start="29:16" pos:end="29:46">(<argument pos:start="29:17" pos:end="29:21"><expr pos:start="29:17" pos:end="29:21"><name pos:start="29:17" pos:end="29:21"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:21">pb</name></name></expr></argument>, <argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">buffer</name></expr></argument>, <argument pos:start="29:32" pos:end="29:45"><expr pos:start="29:32" pos:end="29:45"><sizeof pos:start="29:32" pos:end="29:45">sizeof<argument_list pos:start="29:38" pos:end="29:45">(<argument pos:start="29:39" pos:end="29:44"><expr pos:start="29:39" pos:end="29:44"><name pos:start="29:39" pos:end="29:44">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><call pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:10">sscanf</name><argument_list pos:start="31:11" pos:end="31:43">(<argument pos:start="31:12" pos:end="31:17"><expr pos:start="31:12" pos:end="31:17"><name pos:start="31:12" pos:end="31:17">buffer</name></expr></argument>, <argument pos:start="31:20" pos:end="31:28"><expr pos:start="31:20" pos:end="31:28"><literal type="string" pos:start="31:20" pos:end="31:22">"%"</literal><name pos:start="31:23" pos:end="31:28">SCNd32</name></expr></argument>, <argument pos:start="31:31" pos:end="31:42"><expr pos:start="31:31" pos:end="31:42"><operator pos:start="31:31" pos:end="31:31">&amp;</operator><name pos:start="31:32" pos:end="31:42">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:35"><if pos:start="33:5" pos:end="35:35">if <condition pos:start="33:8" pos:end="33:25">(<expr pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:19">header_size</name> <operator pos:start="33:21" pos:end="33:22">&lt;=</operator> <literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:35"><block_content pos:start="35:9" pos:end="35:35">

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="39:5" pos:end="165:5">while <condition pos:start="39:11" pos:end="39:28">(<expr pos:start="39:12" pos:end="39:27"><operator pos:start="39:12" pos:end="39:12">!</operator><call pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:20">url_feof</name><argument_list pos:start="39:21" pos:end="39:27">(<argument pos:start="39:22" pos:end="39:26"><expr pos:start="39:22" pos:end="39:26"><name pos:start="39:22" pos:end="39:26"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:26">pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:30" pos:end="165:5">{<block_content pos:start="41:9" pos:end="163:9">

        <expr_stmt pos:start="41:9" pos:end="41:51"><expr pos:start="41:9" pos:end="41:50"><call pos:start="41:9" pos:end="41:50"><name pos:start="41:9" pos:end="41:19">ff_get_line</name><argument_list pos:start="41:20" pos:end="41:50">(<argument pos:start="41:21" pos:end="41:25"><expr pos:start="41:21" pos:end="41:25"><name pos:start="41:21" pos:end="41:25"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:25">pb</name></name></expr></argument>, <argument pos:start="41:28" pos:end="41:33"><expr pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:33">buffer</name></expr></argument>, <argument pos:start="41:36" pos:end="41:49"><expr pos:start="41:36" pos:end="41:49"><sizeof pos:start="41:36" pos:end="41:49">sizeof<argument_list pos:start="41:42" pos:end="41:49">(<argument pos:start="41:43" pos:end="41:48"><expr pos:start="41:43" pos:end="41:48"><name pos:start="41:43" pos:end="41:48">buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="47:39"><if pos:start="45:9" pos:end="47:39">if <condition pos:start="45:12" pos:end="45:44">(<expr pos:start="45:13" pos:end="45:43"><call pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:21">avio_tell</name><argument_list pos:start="45:22" pos:end="45:28">(<argument pos:start="45:23" pos:end="45:27"><expr pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:23">s</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:27">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="45:30" pos:end="45:31">&gt;=</operator> <name pos:start="45:33" pos:end="45:43">header_size</name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:39"><block_content pos:start="47:13" pos:end="47:39">

            <return pos:start="47:13" pos:end="47:39">return <expr pos:start="47:20" pos:end="47:38"><name pos:start="47:20" pos:end="47:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="163:9"><if pos:start="51:9" pos:end="103:9">if <condition pos:start="51:12" pos:end="51:43">(<expr pos:start="51:13" pos:end="51:42"><operator pos:start="51:13" pos:end="51:13">!</operator><call pos:start="51:14" pos:end="51:42"><name pos:start="51:14" pos:end="51:19">memcmp</name><argument_list pos:start="51:20" pos:end="51:42">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">buffer</name></expr></argument>, <argument pos:start="51:29" pos:end="51:38"><expr pos:start="51:29" pos:end="51:38"><literal type="string" pos:start="51:29" pos:end="51:38">"end_head"</literal></expr></argument>, <argument pos:start="51:41" pos:end="51:41"><expr pos:start="51:41" pos:end="51:41"><literal type="number" pos:start="51:41" pos:end="51:41">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:45" pos:end="103:9">{<block_content pos:start="53:13" pos:end="101:21">

            <if_stmt pos:start="53:13" pos:end="55:60"><if pos:start="53:13" pos:end="55:60">if <condition pos:start="53:16" pos:end="53:50">(<expr pos:start="53:17" pos:end="53:49"><operator pos:start="53:17" pos:end="53:17">!</operator><name pos:start="53:18" pos:end="53:49"><name pos:start="53:18" pos:end="53:19">st</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:26">codec</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:49">bits_per_coded_sample</name></name></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:60"><block_content pos:start="55:17" pos:end="55:60">

                <expr_stmt pos:start="55:17" pos:end="55:60"><expr pos:start="55:17" pos:end="55:59"><name pos:start="55:17" pos:end="55:48"><name pos:start="55:17" pos:end="55:18">st</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:25">codec</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:48">bits_per_coded_sample</name></name> <operator pos:start="55:50" pos:end="55:50">=</operator> <name pos:start="55:52" pos:end="55:54">bps</name> <operator pos:start="55:56" pos:end="55:57">&lt;&lt;</operator> <literal type="number" pos:start="55:59" pos:end="55:59">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="59:13" pos:end="79:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:46">(<expr pos:start="59:17" pos:end="59:45"><operator pos:start="59:17" pos:end="59:17">!</operator><call pos:start="59:18" pos:end="59:45"><name pos:start="59:18" pos:end="59:30">av_strcasecmp</name><argument_list pos:start="59:31" pos:end="59:45">(<argument pos:start="59:32" pos:end="59:37"><expr pos:start="59:32" pos:end="59:37"><name pos:start="59:32" pos:end="59:37">coding</name></expr></argument>, <argument pos:start="59:40" pos:end="59:44"><expr pos:start="59:40" pos:end="59:44"><literal type="string" pos:start="59:40" pos:end="59:44">"pcm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:48" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:73">

                <expr_stmt pos:start="61:17" pos:end="63:73"><expr pos:start="61:17" pos:end="63:72"><name pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:18">st</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:25">codec</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:35">codec_id</name></name> <operator pos:start="61:37" pos:end="61:37">=</operator> <call pos:start="61:39" pos:end="63:72"><name pos:start="61:39" pos:end="61:57">ff_get_pcm_codec_id</name><argument_list pos:start="61:58" pos:end="63:72">(<argument pos:start="61:59" pos:end="61:90"><expr pos:start="61:59" pos:end="61:90"><name pos:start="61:59" pos:end="61:90"><name pos:start="61:59" pos:end="61:60">st</name><operator pos:start="61:61" pos:end="61:62">-&gt;</operator><name pos:start="61:63" pos:end="61:67">codec</name><operator pos:start="61:68" pos:end="61:69">-&gt;</operator><name pos:start="61:70" pos:end="61:90">bits_per_coded_sample</name></name></expr></argument>,

                                                          <argument pos:start="63:59" pos:end="63:59"><expr pos:start="63:59" pos:end="63:59"><literal type="number" pos:start="63:59" pos:end="63:59">0</literal></expr></argument>, <argument pos:start="63:62" pos:end="63:63"><expr pos:start="63:62" pos:end="63:63"><name pos:start="63:62" pos:end="63:63">be</name></expr></argument>, <argument pos:start="63:66" pos:end="63:71"><expr pos:start="63:66" pos:end="63:71"><literal type="number" pos:start="63:66" pos:end="63:71">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="65:15" pos:end="69:13">else if <condition pos:start="65:23" pos:end="65:54">(<expr pos:start="65:24" pos:end="65:53"><operator pos:start="65:24" pos:end="65:24">!</operator><call pos:start="65:25" pos:end="65:53"><name pos:start="65:25" pos:end="65:37">av_strcasecmp</name><argument_list pos:start="65:38" pos:end="65:53">(<argument pos:start="65:39" pos:end="65:44"><expr pos:start="65:39" pos:end="65:44"><name pos:start="65:39" pos:end="65:44">coding</name></expr></argument>, <argument pos:start="65:47" pos:end="65:52"><expr pos:start="65:47" pos:end="65:52"><literal type="string" pos:start="65:47" pos:end="65:52">"alaw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:56" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:59">

                <expr_stmt pos:start="67:17" pos:end="67:59"><expr pos:start="67:17" pos:end="67:58"><name pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:18">st</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:25">codec</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:35">codec_id</name></name> <operator pos:start="67:37" pos:end="67:37">=</operator> <name pos:start="67:39" pos:end="67:58">AV_CODEC_ID_PCM_ALAW</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="69:15" pos:end="75:13">else if <condition pos:start="69:23" pos:end="71:56">(<expr pos:start="69:24" pos:end="71:55"><operator pos:start="69:24" pos:end="69:24">!</operator><call pos:start="69:25" pos:end="69:53"><name pos:start="69:25" pos:end="69:37">av_strcasecmp</name><argument_list pos:start="69:38" pos:end="69:53">(<argument pos:start="69:39" pos:end="69:44"><expr pos:start="69:39" pos:end="69:44"><name pos:start="69:39" pos:end="69:44">coding</name></expr></argument>, <argument pos:start="69:47" pos:end="69:52"><expr pos:start="69:47" pos:end="69:52"><literal type="string" pos:start="69:47" pos:end="69:52">"ulaw"</literal></expr></argument>)</argument_list></call> <operator pos:start="69:55" pos:end="69:56">||</operator>

                       <operator pos:start="71:24" pos:end="71:24">!</operator><call pos:start="71:25" pos:end="71:55"><name pos:start="71:25" pos:end="71:37">av_strcasecmp</name><argument_list pos:start="71:38" pos:end="71:55">(<argument pos:start="71:39" pos:end="71:44"><expr pos:start="71:39" pos:end="71:44"><name pos:start="71:39" pos:end="71:44">coding</name></expr></argument>, <argument pos:start="71:47" pos:end="71:54"><expr pos:start="71:47" pos:end="71:54"><literal type="string" pos:start="71:47" pos:end="71:54">"mu-law"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:58" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:60">

                <expr_stmt pos:start="73:17" pos:end="73:60"><expr pos:start="73:17" pos:end="73:59"><name pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:18">st</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:25">codec</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:35">codec_id</name></name> <operator pos:start="73:37" pos:end="73:37">=</operator> <name pos:start="73:39" pos:end="73:59">AV_CODEC_ID_PCM_MULAW</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="79:13">else <block pos:start="75:20" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:62">

                <expr_stmt pos:start="77:17" pos:end="77:62"><expr pos:start="77:17" pos:end="77:61"><call pos:start="77:17" pos:end="77:61"><name pos:start="77:17" pos:end="77:37">avpriv_request_sample</name><argument_list pos:start="77:38" pos:end="77:61">(<argument pos:start="77:39" pos:end="77:39"><expr pos:start="77:39" pos:end="77:39"><name pos:start="77:39" pos:end="77:39">s</name></expr></argument>, <argument pos:start="77:42" pos:end="77:52"><expr pos:start="77:42" pos:end="77:52"><literal type="string" pos:start="77:42" pos:end="77:52">"coding %s"</literal></expr></argument>, <argument pos:start="77:55" pos:end="77:60"><expr pos:start="77:55" pos:end="77:60"><name pos:start="77:55" pos:end="77:60">coding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:67"><expr pos:start="83:13" pos:end="83:66"><call pos:start="83:13" pos:end="83:66"><name pos:start="83:13" pos:end="83:31">avpriv_set_pts_info</name><argument_list pos:start="83:32" pos:end="83:66">(<argument pos:start="83:33" pos:end="83:34"><expr pos:start="83:33" pos:end="83:34"><name pos:start="83:33" pos:end="83:34">st</name></expr></argument>, <argument pos:start="83:37" pos:end="83:38"><expr pos:start="83:37" pos:end="83:38"><literal type="number" pos:start="83:37" pos:end="83:38">64</literal></expr></argument>, <argument pos:start="83:41" pos:end="83:41"><expr pos:start="83:41" pos:end="83:41"><literal type="number" pos:start="83:41" pos:end="83:41">1</literal></expr></argument>, <argument pos:start="83:44" pos:end="83:65"><expr pos:start="83:44" pos:end="83:65"><name pos:start="83:44" pos:end="83:65"><name pos:start="83:44" pos:end="83:45">st</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:52">codec</name><operator pos:start="83:53" pos:end="83:54">-&gt;</operator><name pos:start="83:55" pos:end="83:65">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:96"><expr pos:start="87:13" pos:end="87:95"><name pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:14">st</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:21">codec</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:34">block_align</name></name> <operator pos:start="87:36" pos:end="87:36">=</operator> <name pos:start="87:38" pos:end="87:69"><name pos:start="87:38" pos:end="87:39">st</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:46">codec</name><operator pos:start="87:47" pos:end="87:48">-&gt;</operator><name pos:start="87:49" pos:end="87:69">bits_per_coded_sample</name></name> <operator pos:start="87:71" pos:end="87:71">*</operator> <name pos:start="87:73" pos:end="87:91"><name pos:start="87:73" pos:end="87:74">st</name><operator pos:start="87:75" pos:end="87:76">-&gt;</operator><name pos:start="87:77" pos:end="87:81">codec</name><operator pos:start="87:82" pos:end="87:83">-&gt;</operator><name pos:start="87:84" pos:end="87:91">channels</name></name> <operator pos:start="87:93" pos:end="87:93">/</operator> <literal type="number" pos:start="87:95" pos:end="87:95">8</literal></expr>;</expr_stmt>



            <if_stmt pos:start="91:13" pos:end="93:43"><if pos:start="91:13" pos:end="93:43">if <condition pos:start="91:16" pos:end="91:47">(<expr pos:start="91:17" pos:end="91:46"><call pos:start="91:17" pos:end="91:32"><name pos:start="91:17" pos:end="91:25">avio_tell</name><argument_list pos:start="91:26" pos:end="91:32">(<argument pos:start="91:27" pos:end="91:31"><expr pos:start="91:27" pos:end="91:31"><name pos:start="91:27" pos:end="91:31"><name pos:start="91:27" pos:end="91:27">s</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:31">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="91:34" pos:end="91:34">&gt;</operator> <name pos:start="91:36" pos:end="91:46">header_size</name></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:43"><block_content pos:start="93:17" pos:end="93:43">

                <return pos:start="93:17" pos:end="93:43">return <expr pos:start="93:24" pos:end="93:42"><name pos:start="93:24" pos:end="93:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="97:13" pos:end="97:61"><expr pos:start="97:13" pos:end="97:60"><call pos:start="97:13" pos:end="97:60"><name pos:start="97:13" pos:end="97:21">avio_skip</name><argument_list pos:start="97:22" pos:end="97:60">(<argument pos:start="97:23" pos:end="97:27"><expr pos:start="97:23" pos:end="97:27"><name pos:start="97:23" pos:end="97:27"><name pos:start="97:23" pos:end="97:23">s</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:27">pb</name></name></expr></argument>, <argument pos:start="97:30" pos:end="97:59"><expr pos:start="97:30" pos:end="97:59"><name pos:start="97:30" pos:end="97:40">header_size</name> <operator pos:start="97:42" pos:end="97:42">-</operator> <call pos:start="97:44" pos:end="97:59"><name pos:start="97:44" pos:end="97:52">avio_tell</name><argument_list pos:start="97:53" pos:end="97:59">(<argument pos:start="97:54" pos:end="97:58"><expr pos:start="97:54" pos:end="97:58"><name pos:start="97:54" pos:end="97:58"><name pos:start="97:54" pos:end="97:54">s</name><operator pos:start="97:55" pos:end="97:56">-&gt;</operator><name pos:start="97:57" pos:end="97:58">pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="101:13" pos:end="101:21">return <expr pos:start="101:20" pos:end="101:20"><literal type="number" pos:start="101:20" pos:end="101:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="103:11" pos:end="107:9">else if <condition pos:start="103:19" pos:end="103:56">(<expr pos:start="103:20" pos:end="103:55"><operator pos:start="103:20" pos:end="103:20">!</operator><call pos:start="103:21" pos:end="103:55"><name pos:start="103:21" pos:end="103:26">memcmp</name><argument_list pos:start="103:27" pos:end="103:55">(<argument pos:start="103:28" pos:end="103:33"><expr pos:start="103:28" pos:end="103:33"><name pos:start="103:28" pos:end="103:33">buffer</name></expr></argument>, <argument pos:start="103:36" pos:end="103:50"><expr pos:start="103:36" pos:end="103:50"><literal type="string" pos:start="103:36" pos:end="103:50">"channel_count"</literal></expr></argument>, <argument pos:start="103:53" pos:end="103:54"><expr pos:start="103:53" pos:end="103:54"><literal type="number" pos:start="103:53" pos:end="103:54">13</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:58" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:68">

            <expr_stmt pos:start="105:13" pos:end="105:68"><expr pos:start="105:13" pos:end="105:67"><call pos:start="105:13" pos:end="105:67"><name pos:start="105:13" pos:end="105:18">sscanf</name><argument_list pos:start="105:19" pos:end="105:67">(<argument pos:start="105:20" pos:end="105:25"><expr pos:start="105:20" pos:end="105:25"><name pos:start="105:20" pos:end="105:25">buffer</name></expr></argument>, <argument pos:start="105:28" pos:end="105:44"><expr pos:start="105:28" pos:end="105:44"><literal type="string" pos:start="105:28" pos:end="105:38">"%*s %*s %"</literal><name pos:start="105:39" pos:end="105:44">SCNd32</name></expr></argument>, <argument pos:start="105:47" pos:end="105:66"><expr pos:start="105:47" pos:end="105:66"><operator pos:start="105:47" pos:end="105:47">&amp;</operator><name pos:start="105:48" pos:end="105:66"><name pos:start="105:48" pos:end="105:49">st</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:56">codec</name><operator pos:start="105:57" pos:end="105:58">-&gt;</operator><name pos:start="105:59" pos:end="105:66">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="129:9">else if <condition pos:start="107:19" pos:end="107:61">(<expr pos:start="107:20" pos:end="107:60"><operator pos:start="107:20" pos:end="107:20">!</operator><call pos:start="107:21" pos:end="107:60"><name pos:start="107:21" pos:end="107:26">memcmp</name><argument_list pos:start="107:27" pos:end="107:60">(<argument pos:start="107:28" pos:end="107:33"><expr pos:start="107:28" pos:end="107:33"><name pos:start="107:28" pos:end="107:33">buffer</name></expr></argument>, <argument pos:start="107:36" pos:end="107:55"><expr pos:start="107:36" pos:end="107:55"><literal type="string" pos:start="107:36" pos:end="107:55">"sample_byte_format"</literal></expr></argument>, <argument pos:start="107:58" pos:end="107:59"><expr pos:start="107:58" pos:end="107:59"><literal type="number" pos:start="107:58" pos:end="107:59">18</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:63" pos:end="129:9">{<block_content pos:start="109:13" pos:end="127:13">

            <expr_stmt pos:start="109:13" pos:end="109:51"><expr pos:start="109:13" pos:end="109:50"><call pos:start="109:13" pos:end="109:50"><name pos:start="109:13" pos:end="109:18">sscanf</name><argument_list pos:start="109:19" pos:end="109:50">(<argument pos:start="109:20" pos:end="109:25"><expr pos:start="109:20" pos:end="109:25"><name pos:start="109:20" pos:end="109:25">buffer</name></expr></argument>, <argument pos:start="109:28" pos:end="109:41"><expr pos:start="109:28" pos:end="109:41"><literal type="string" pos:start="109:28" pos:end="109:41">"%*s %*s %31s"</literal></expr></argument>, <argument pos:start="109:44" pos:end="109:49"><expr pos:start="109:44" pos:end="109:49"><name pos:start="109:44" pos:end="109:49">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="113:13" pos:end="127:13"><if pos:start="113:13" pos:end="117:13">if <condition pos:start="113:16" pos:end="113:45">(<expr pos:start="113:17" pos:end="113:44"><operator pos:start="113:17" pos:end="113:17">!</operator><call pos:start="113:18" pos:end="113:44"><name pos:start="113:18" pos:end="113:30">av_strcasecmp</name><argument_list pos:start="113:31" pos:end="113:44">(<argument pos:start="113:32" pos:end="113:37"><expr pos:start="113:32" pos:end="113:37"><name pos:start="113:32" pos:end="113:37">format</name></expr></argument>, <argument pos:start="113:40" pos:end="113:43"><expr pos:start="113:40" pos:end="113:43"><literal type="string" pos:start="113:40" pos:end="113:43">"01"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:47" pos:end="117:13">{<block_content pos:start="115:17" pos:end="115:23">

                <expr_stmt pos:start="115:17" pos:end="115:23"><expr pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:18">be</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="117:15" pos:end="121:13">else if <condition pos:start="117:23" pos:end="117:52">(<expr pos:start="117:24" pos:end="117:51"><operator pos:start="117:24" pos:end="117:24">!</operator><call pos:start="117:25" pos:end="117:51"><name pos:start="117:25" pos:end="117:37">av_strcasecmp</name><argument_list pos:start="117:38" pos:end="117:51">(<argument pos:start="117:39" pos:end="117:44"><expr pos:start="117:39" pos:end="117:44"><name pos:start="117:39" pos:end="117:44">format</name></expr></argument>, <argument pos:start="117:47" pos:end="117:50"><expr pos:start="117:47" pos:end="117:50"><literal type="string" pos:start="117:47" pos:end="117:50">"10"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:54" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:23">

                <expr_stmt pos:start="119:17" pos:end="119:23"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:18">be</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="121:15" pos:end="127:13">else if <condition pos:start="121:23" pos:end="121:50">(<expr pos:start="121:24" pos:end="121:49"><call pos:start="121:24" pos:end="121:49"><name pos:start="121:24" pos:end="121:36">av_strcasecmp</name><argument_list pos:start="121:37" pos:end="121:49">(<argument pos:start="121:38" pos:end="121:43"><expr pos:start="121:38" pos:end="121:43"><name pos:start="121:38" pos:end="121:43">format</name></expr></argument>, <argument pos:start="121:46" pos:end="121:48"><expr pos:start="121:46" pos:end="121:48"><literal type="string" pos:start="121:46" pos:end="121:48">"1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:52" pos:end="127:13">{<block_content pos:start="123:17" pos:end="125:44">

                <expr_stmt pos:start="123:17" pos:end="123:74"><expr pos:start="123:17" pos:end="123:73"><call pos:start="123:17" pos:end="123:73"><name pos:start="123:17" pos:end="123:37">avpriv_request_sample</name><argument_list pos:start="123:38" pos:end="123:73">(<argument pos:start="123:39" pos:end="123:39"><expr pos:start="123:39" pos:end="123:39"><name pos:start="123:39" pos:end="123:39">s</name></expr></argument>, <argument pos:start="123:42" pos:end="123:64"><expr pos:start="123:42" pos:end="123:64"><literal type="string" pos:start="123:42" pos:end="123:64">"sample byte format %s"</literal></expr></argument>, <argument pos:start="123:67" pos:end="123:72"><expr pos:start="123:67" pos:end="123:72"><name pos:start="123:67" pos:end="123:72">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="125:17" pos:end="125:44">return <expr pos:start="125:24" pos:end="125:43"><name pos:start="125:24" pos:end="125:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="129:11" pos:end="133:9">else if <condition pos:start="129:19" pos:end="129:56">(<expr pos:start="129:20" pos:end="129:55"><operator pos:start="129:20" pos:end="129:20">!</operator><call pos:start="129:21" pos:end="129:55"><name pos:start="129:21" pos:end="129:26">memcmp</name><argument_list pos:start="129:27" pos:end="129:55">(<argument pos:start="129:28" pos:end="129:33"><expr pos:start="129:28" pos:end="129:33"><name pos:start="129:28" pos:end="129:33">buffer</name></expr></argument>, <argument pos:start="129:36" pos:end="129:50"><expr pos:start="129:36" pos:end="129:50"><literal type="string" pos:start="129:36" pos:end="129:50">"sample_coding"</literal></expr></argument>, <argument pos:start="129:53" pos:end="129:54"><expr pos:start="129:53" pos:end="129:54"><literal type="number" pos:start="129:53" pos:end="129:54">13</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:58" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:51">

            <expr_stmt pos:start="131:13" pos:end="131:51"><expr pos:start="131:13" pos:end="131:50"><call pos:start="131:13" pos:end="131:50"><name pos:start="131:13" pos:end="131:18">sscanf</name><argument_list pos:start="131:19" pos:end="131:50">(<argument pos:start="131:20" pos:end="131:25"><expr pos:start="131:20" pos:end="131:25"><name pos:start="131:20" pos:end="131:25">buffer</name></expr></argument>, <argument pos:start="131:28" pos:end="131:41"><expr pos:start="131:28" pos:end="131:41"><literal type="string" pos:start="131:28" pos:end="131:41">"%*s %*s %31s"</literal></expr></argument>, <argument pos:start="131:44" pos:end="131:49"><expr pos:start="131:44" pos:end="131:49"><name pos:start="131:44" pos:end="131:49">coding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="133:11" pos:end="137:9">else if <condition pos:start="133:19" pos:end="133:55">(<expr pos:start="133:20" pos:end="133:54"><operator pos:start="133:20" pos:end="133:20">!</operator><call pos:start="133:21" pos:end="133:54"><name pos:start="133:21" pos:end="133:26">memcmp</name><argument_list pos:start="133:27" pos:end="133:54">(<argument pos:start="133:28" pos:end="133:33"><expr pos:start="133:28" pos:end="133:33"><name pos:start="133:28" pos:end="133:33">buffer</name></expr></argument>, <argument pos:start="133:36" pos:end="133:49"><expr pos:start="133:36" pos:end="133:49"><literal type="string" pos:start="133:36" pos:end="133:49">"sample_count"</literal></expr></argument>, <argument pos:start="133:52" pos:end="133:53"><expr pos:start="133:52" pos:end="133:53"><literal type="number" pos:start="133:52" pos:end="133:53">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:57" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:61">

            <expr_stmt pos:start="135:13" pos:end="135:61"><expr pos:start="135:13" pos:end="135:60"><call pos:start="135:13" pos:end="135:60"><name pos:start="135:13" pos:end="135:18">sscanf</name><argument_list pos:start="135:19" pos:end="135:60">(<argument pos:start="135:20" pos:end="135:25"><expr pos:start="135:20" pos:end="135:25"><name pos:start="135:20" pos:end="135:25">buffer</name></expr></argument>, <argument pos:start="135:28" pos:end="135:44"><expr pos:start="135:28" pos:end="135:44"><literal type="string" pos:start="135:28" pos:end="135:38">"%*s %*s %"</literal><name pos:start="135:39" pos:end="135:44">SCNd64</name></expr></argument>, <argument pos:start="135:47" pos:end="135:59"><expr pos:start="135:47" pos:end="135:59"><operator pos:start="135:47" pos:end="135:47">&amp;</operator><name pos:start="135:48" pos:end="135:59"><name pos:start="135:48" pos:end="135:49">st</name><operator pos:start="135:50" pos:end="135:51">-&gt;</operator><name pos:start="135:52" pos:end="135:59">duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="137:11" pos:end="141:9">else if <condition pos:start="137:19" pos:end="137:57">(<expr pos:start="137:20" pos:end="137:56"><operator pos:start="137:20" pos:end="137:20">!</operator><call pos:start="137:21" pos:end="137:56"><name pos:start="137:21" pos:end="137:26">memcmp</name><argument_list pos:start="137:27" pos:end="137:56">(<argument pos:start="137:28" pos:end="137:33"><expr pos:start="137:28" pos:end="137:33"><name pos:start="137:28" pos:end="137:33">buffer</name></expr></argument>, <argument pos:start="137:36" pos:end="137:51"><expr pos:start="137:36" pos:end="137:51"><literal type="string" pos:start="137:36" pos:end="137:51">"sample_n_bytes"</literal></expr></argument>, <argument pos:start="137:54" pos:end="137:55"><expr pos:start="137:54" pos:end="137:55"><literal type="number" pos:start="137:54" pos:end="137:55">14</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:59" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:52">

            <expr_stmt pos:start="139:13" pos:end="139:52"><expr pos:start="139:13" pos:end="139:51"><call pos:start="139:13" pos:end="139:51"><name pos:start="139:13" pos:end="139:18">sscanf</name><argument_list pos:start="139:19" pos:end="139:51">(<argument pos:start="139:20" pos:end="139:25"><expr pos:start="139:20" pos:end="139:25"><name pos:start="139:20" pos:end="139:25">buffer</name></expr></argument>, <argument pos:start="139:28" pos:end="139:44"><expr pos:start="139:28" pos:end="139:44"><literal type="string" pos:start="139:28" pos:end="139:38">"%*s %*s %"</literal><name pos:start="139:39" pos:end="139:44">SCNd32</name></expr></argument>, <argument pos:start="139:47" pos:end="139:50"><expr pos:start="139:47" pos:end="139:50"><operator pos:start="139:47" pos:end="139:47">&amp;</operator><name pos:start="139:48" pos:end="139:50">bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="145:9">else if <condition pos:start="141:19" pos:end="141:54">(<expr pos:start="141:20" pos:end="141:53"><operator pos:start="141:20" pos:end="141:20">!</operator><call pos:start="141:21" pos:end="141:53"><name pos:start="141:21" pos:end="141:26">memcmp</name><argument_list pos:start="141:27" pos:end="141:53">(<argument pos:start="141:28" pos:end="141:33"><expr pos:start="141:28" pos:end="141:33"><name pos:start="141:28" pos:end="141:33">buffer</name></expr></argument>, <argument pos:start="141:36" pos:end="141:48"><expr pos:start="141:36" pos:end="141:48"><literal type="string" pos:start="141:36" pos:end="141:48">"sample_rate"</literal></expr></argument>, <argument pos:start="141:51" pos:end="141:52"><expr pos:start="141:51" pos:end="141:52"><literal type="number" pos:start="141:51" pos:end="141:52">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:56" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:71">

            <expr_stmt pos:start="143:13" pos:end="143:71"><expr pos:start="143:13" pos:end="143:70"><call pos:start="143:13" pos:end="143:70"><name pos:start="143:13" pos:end="143:18">sscanf</name><argument_list pos:start="143:19" pos:end="143:70">(<argument pos:start="143:20" pos:end="143:25"><expr pos:start="143:20" pos:end="143:25"><name pos:start="143:20" pos:end="143:25">buffer</name></expr></argument>, <argument pos:start="143:28" pos:end="143:44"><expr pos:start="143:28" pos:end="143:44"><literal type="string" pos:start="143:28" pos:end="143:38">"%*s %*s %"</literal><name pos:start="143:39" pos:end="143:44">SCNd32</name></expr></argument>, <argument pos:start="143:47" pos:end="143:69"><expr pos:start="143:47" pos:end="143:69"><operator pos:start="143:47" pos:end="143:47">&amp;</operator><name pos:start="143:48" pos:end="143:69"><name pos:start="143:48" pos:end="143:49">st</name><operator pos:start="143:50" pos:end="143:51">-&gt;</operator><name pos:start="143:52" pos:end="143:56">codec</name><operator pos:start="143:57" pos:end="143:58">-&gt;</operator><name pos:start="143:59" pos:end="143:69">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="145:11" pos:end="149:9">else if <condition pos:start="145:19" pos:end="145:58">(<expr pos:start="145:20" pos:end="145:57"><operator pos:start="145:20" pos:end="145:20">!</operator><call pos:start="145:21" pos:end="145:57"><name pos:start="145:21" pos:end="145:26">memcmp</name><argument_list pos:start="145:27" pos:end="145:57">(<argument pos:start="145:28" pos:end="145:33"><expr pos:start="145:28" pos:end="145:33"><name pos:start="145:28" pos:end="145:33">buffer</name></expr></argument>, <argument pos:start="145:36" pos:end="145:52"><expr pos:start="145:36" pos:end="145:52"><literal type="string" pos:start="145:36" pos:end="145:52">"sample_sig_bits"</literal></expr></argument>, <argument pos:start="145:55" pos:end="145:56"><expr pos:start="145:55" pos:end="145:56"><literal type="number" pos:start="145:55" pos:end="145:56">15</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:60" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:81">

            <expr_stmt pos:start="147:13" pos:end="147:81"><expr pos:start="147:13" pos:end="147:80"><call pos:start="147:13" pos:end="147:80"><name pos:start="147:13" pos:end="147:18">sscanf</name><argument_list pos:start="147:19" pos:end="147:80">(<argument pos:start="147:20" pos:end="147:25"><expr pos:start="147:20" pos:end="147:25"><name pos:start="147:20" pos:end="147:25">buffer</name></expr></argument>, <argument pos:start="147:28" pos:end="147:44"><expr pos:start="147:28" pos:end="147:44"><literal type="string" pos:start="147:28" pos:end="147:38">"%*s %*s %"</literal><name pos:start="147:39" pos:end="147:44">SCNd32</name></expr></argument>, <argument pos:start="147:47" pos:end="147:79"><expr pos:start="147:47" pos:end="147:79"><operator pos:start="147:47" pos:end="147:47">&amp;</operator><name pos:start="147:48" pos:end="147:79"><name pos:start="147:48" pos:end="147:49">st</name><operator pos:start="147:50" pos:end="147:51">-&gt;</operator><name pos:start="147:52" pos:end="147:56">codec</name><operator pos:start="147:57" pos:end="147:58">-&gt;</operator><name pos:start="147:59" pos:end="147:79">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="149:11" pos:end="163:9">else <block pos:start="149:16" pos:end="163:9">{<block_content pos:start="151:13" pos:end="161:13">

            <decl_stmt pos:start="151:13" pos:end="151:36"><decl pos:start="151:13" pos:end="151:24"><type pos:start="151:13" pos:end="151:16"><name pos:start="151:13" pos:end="151:16">char</name></type> <name pos:start="151:18" pos:end="151:24"><name pos:start="151:18" pos:end="151:20">key</name><index pos:start="151:21" pos:end="151:24">[<expr pos:start="151:22" pos:end="151:23"><literal type="number" pos:start="151:22" pos:end="151:23">32</literal></expr>]</index></name></decl>, <decl pos:start="151:27" pos:end="151:35"><type ref="prev" pos:start="151:13" pos:end="151:16"/><name pos:start="151:27" pos:end="151:35"><name pos:start="151:27" pos:end="151:31">value</name><index pos:start="151:32" pos:end="151:35">[<expr pos:start="151:33" pos:end="151:34"><literal type="number" pos:start="151:33" pos:end="151:34">32</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="153:13" pos:end="161:13"><if pos:start="153:13" pos:end="157:13">if <condition pos:start="153:16" pos:end="153:65">(<expr pos:start="153:17" pos:end="153:64"><call pos:start="153:17" pos:end="153:59"><name pos:start="153:17" pos:end="153:22">sscanf</name><argument_list pos:start="153:23" pos:end="153:59">(<argument pos:start="153:24" pos:end="153:29"><expr pos:start="153:24" pos:end="153:29"><name pos:start="153:24" pos:end="153:29">buffer</name></expr></argument>, <argument pos:start="153:32" pos:end="153:46"><expr pos:start="153:32" pos:end="153:46"><literal type="string" pos:start="153:32" pos:end="153:46">"%31s %*s %31s"</literal></expr></argument>, <argument pos:start="153:49" pos:end="153:51"><expr pos:start="153:49" pos:end="153:51"><name pos:start="153:49" pos:end="153:51">key</name></expr></argument>, <argument pos:start="153:54" pos:end="153:58"><expr pos:start="153:54" pos:end="153:58"><name pos:start="153:54" pos:end="153:58">value</name></expr></argument>)</argument_list></call> <operator pos:start="153:61" pos:end="153:62">==</operator> <literal type="number" pos:start="153:64" pos:end="153:64">3</literal></expr>)</condition> <block pos:start="153:67" pos:end="157:13">{<block_content pos:start="155:17" pos:end="155:70">

                <expr_stmt pos:start="155:17" pos:end="155:70"><expr pos:start="155:17" pos:end="155:69"><call pos:start="155:17" pos:end="155:69"><name pos:start="155:17" pos:end="155:27">av_dict_set</name><argument_list pos:start="155:28" pos:end="155:69">(<argument pos:start="155:29" pos:end="155:40"><expr pos:start="155:29" pos:end="155:40"><operator pos:start="155:29" pos:end="155:29">&amp;</operator><name pos:start="155:30" pos:end="155:40"><name pos:start="155:30" pos:end="155:30">s</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:40">metadata</name></name></expr></argument>, <argument pos:start="155:43" pos:end="155:45"><expr pos:start="155:43" pos:end="155:45"><name pos:start="155:43" pos:end="155:45">key</name></expr></argument>, <argument pos:start="155:48" pos:end="155:52"><expr pos:start="155:48" pos:end="155:52"><name pos:start="155:48" pos:end="155:52">value</name></expr></argument>, <argument pos:start="155:55" pos:end="155:68"><expr pos:start="155:55" pos:end="155:68"><name pos:start="155:55" pos:end="155:68">AV_DICT_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="157:15" pos:end="161:13">else <block pos:start="157:20" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:86">

                <expr_stmt pos:start="159:17" pos:end="159:86"><expr pos:start="159:17" pos:end="159:85"><call pos:start="159:17" pos:end="159:85"><name pos:start="159:17" pos:end="159:22">av_log</name><argument_list pos:start="159:23" pos:end="159:85">(<argument pos:start="159:24" pos:end="159:24"><expr pos:start="159:24" pos:end="159:24"><name pos:start="159:24" pos:end="159:24">s</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:41" pos:end="159:76"><expr pos:start="159:41" pos:end="159:76"><literal type="string" pos:start="159:41" pos:end="159:76">"Failed to parse '%s' as metadata\n"</literal></expr></argument>, <argument pos:start="159:79" pos:end="159:84"><expr pos:start="159:79" pos:end="159:84"><name pos:start="159:79" pos:end="159:84">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <return pos:start="169:5" pos:end="169:23">return <expr pos:start="169:12" pos:end="169:22"><name pos:start="169:12" pos:end="169:22">AVERROR_EOF</name></expr>;</return>

</block_content>}</block></function>
</unit>
