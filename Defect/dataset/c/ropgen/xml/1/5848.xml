<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5848.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:32">tb_alloc_page</name><parameter_list pos:start="1:33" pos:end="3:74">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">TranslationBlock</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">tb</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:47"><decl pos:start="3:34" pos:end="3:47"><type pos:start="3:34" pos:end="3:47"><name pos:start="3:34" pos:end="3:41">unsigned</name> <name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:47">n</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:73"><decl pos:start="3:50" pos:end="3:73"><type pos:start="3:50" pos:end="3:73"><name pos:start="3:50" pos:end="3:63">tb_page_addr_t</name></type> <name pos:start="3:65" pos:end="3:73">page_addr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="109:1">{<block_content pos:start="7:5" pos:end="108:0">

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PageDesc</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="9:1" pos:end="9:24">#<cpp:directive pos:start="9:2" pos:end="9:7">ifndef</cpp:directive> <name pos:start="9:9" pos:end="9:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:31">page_already_protected</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><call pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:22">assert_memory_lock</name><argument_list pos:start="17:23" pos:end="17:24">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:33"><expr pos:start="21:5" pos:end="21:32"><name pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:6">tb</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:17">page_addr</name><index pos:start="21:18" pos:end="21:20">[<expr pos:start="21:19" pos:end="21:19"><name pos:start="21:19" pos:end="21:19">n</name></expr>]</index></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <name pos:start="21:24" pos:end="21:32">page_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:5">p</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:57"><name pos:start="23:9" pos:end="23:23">page_find_alloc</name><argument_list pos:start="23:24" pos:end="23:57">(<argument pos:start="23:25" pos:end="23:53"><expr pos:start="23:25" pos:end="23:53"><name pos:start="23:25" pos:end="23:33">page_addr</name> <operator pos:start="23:35" pos:end="23:36">&gt;&gt;</operator> <name pos:start="23:38" pos:end="23:53">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="23:56" pos:end="23:56"><expr pos:start="23:56" pos:end="23:56"><literal type="number" pos:start="23:56" pos:end="23:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:34"><name pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:6">tb</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:17">page_next</name><index pos:start="25:18" pos:end="25:20">[<expr pos:start="25:19" pos:end="25:19"><name pos:start="25:19" pos:end="25:19">n</name></expr>]</index></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:34"><name pos:start="25:24" pos:end="25:24">p</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:34">first_tb</name></name></expr>;</expr_stmt>

<cpp:ifndef pos:start="27:1" pos:end="27:24">#<cpp:directive pos:start="27:2" pos:end="27:7">ifndef</cpp:directive> <name pos:start="27:9" pos:end="27:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:48"><name pos:start="29:5" pos:end="29:26">page_already_protected</name> <operator pos:start="29:28" pos:end="29:28">=</operator> <name pos:start="29:30" pos:end="29:40"><name pos:start="29:30" pos:end="29:30">p</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:40">first_tb</name></name> <operator pos:start="29:42" pos:end="29:43">!=</operator> <name pos:start="29:45" pos:end="29:48">NULL</name></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="33:5" pos:end="33:58"><expr pos:start="33:5" pos:end="33:57"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:5">p</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:15">first_tb</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <operator pos:start="33:19" pos:end="33:19">(</operator><name pos:start="33:20" pos:end="33:35">TranslationBlock</name> <operator pos:start="33:37" pos:end="33:37">*</operator><operator pos:start="33:38" pos:end="33:38">)</operator><operator pos:start="33:39" pos:end="33:39">(</operator><operator pos:start="33:40" pos:end="33:40">(</operator><name pos:start="33:41" pos:end="33:49">uintptr_t</name><operator pos:start="33:50" pos:end="33:50">)</operator><name pos:start="33:51" pos:end="33:52">tb</name> <operator pos:start="33:54" pos:end="33:54">|</operator> <name pos:start="33:56" pos:end="33:56">n</name><operator pos:start="33:57" pos:end="33:57">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="40:0"><expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:26">invalidate_page_bitmap</name><argument_list pos:start="35:27" pos:end="35:29">(<argument pos:start="35:28" pos:end="35:28"><expr pos:start="35:28" pos:end="35:28"><name pos:start="35:28" pos:end="35:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="39:1" pos:end="39:29">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:29"><call pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:11">defined</name><argument_list pos:start="39:12" pos:end="39:29">(<argument pos:start="39:13" pos:end="39:28"><expr pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="41:5" pos:end="94:0"><if pos:start="41:5" pos:end="94:0">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:9">p</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:16">flags</name></name> <operator pos:start="41:18" pos:end="41:18">&amp;</operator> <name pos:start="41:20" pos:end="41:29">PAGE_WRITE</name></expr>)</condition> <block pos:start="41:32" pos:end="94:0">{<block_content pos:start="43:9" pos:end="90:0">

        <decl_stmt pos:start="43:9" pos:end="43:26"><decl pos:start="43:9" pos:end="43:25"><type pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:20">target_ulong</name></type> <name pos:start="43:22" pos:end="43:25">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:21"><decl pos:start="45:9" pos:end="45:20"><type pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:16">PageDesc</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:20">p2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:17"><decl pos:start="47:9" pos:end="47:16"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:16">prot</name></decl>;</decl_stmt>



        <comment type="block" pos:start="51:9" pos:end="53:45">/* force the host page as non writable (writes will have a

           page fault + mprotect overhead) */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:17">page_addr</name> <operator pos:start="55:19" pos:end="55:20">&amp;=</operator> <name pos:start="55:22" pos:end="55:40">qemu_host_page_mask</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:17"><expr pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:12">prot</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</expr_stmt>

        <for pos:start="59:9" pos:end="77:11">for <control pos:start="59:13" pos:end="61:37">(<init pos:start="59:14" pos:end="59:30"><expr pos:start="59:14" pos:end="59:29"><name pos:start="59:14" pos:end="59:17">addr</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:29">page_addr</name></expr>;</init> <condition pos:start="59:32" pos:end="59:70"><expr pos:start="59:32" pos:end="59:69"><name pos:start="59:32" pos:end="59:35">addr</name> <operator pos:start="59:37" pos:end="59:37">&lt;</operator> <name pos:start="59:39" pos:end="59:47">page_addr</name> <operator pos:start="59:49" pos:end="59:49">+</operator> <name pos:start="59:51" pos:end="59:69">qemu_host_page_size</name></expr>;</condition>

            <incr pos:start="61:13" pos:end="61:36"><expr pos:start="61:13" pos:end="61:36"><name pos:start="61:13" pos:end="61:16">addr</name> <operator pos:start="61:18" pos:end="61:19">+=</operator> <name pos:start="61:21" pos:end="61:36">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="61:39" pos:end="77:11">{<block_content pos:start="65:13" pos:end="75:37">



            <expr_stmt pos:start="65:13" pos:end="65:53"><expr pos:start="65:13" pos:end="65:52"><name pos:start="65:13" pos:end="65:14">p2</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:52"><name pos:start="65:18" pos:end="65:26">page_find</name><argument_list pos:start="65:27" pos:end="65:52">(<argument pos:start="65:28" pos:end="65:51"><expr pos:start="65:28" pos:end="65:51"><name pos:start="65:28" pos:end="65:31">addr</name> <operator pos:start="65:33" pos:end="65:34">&gt;&gt;</operator> <name pos:start="65:36" pos:end="65:51">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:20">(<expr pos:start="67:17" pos:end="67:19"><operator pos:start="67:17" pos:end="67:17">!</operator><name pos:start="67:18" pos:end="67:19">p2</name></expr>)</condition> <block pos:start="67:22" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:25">

                <continue pos:start="69:17" pos:end="69:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:30"><expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:16">prot</name> <operator pos:start="73:18" pos:end="73:19">|=</operator> <name pos:start="73:21" pos:end="73:29"><name pos:start="73:21" pos:end="73:22">p2</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:29">flags</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:14">p2</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:21">flags</name></name> <operator pos:start="75:23" pos:end="75:24">&amp;=</operator> <operator pos:start="75:26" pos:end="75:26">~</operator><name pos:start="75:27" pos:end="75:36">PAGE_WRITE</name></expr>;</expr_stmt>

          </block_content>}</block></for>

        <expr_stmt pos:start="79:9" pos:end="84:0"><expr pos:start="79:9" pos:end="81:50"><call pos:start="79:9" pos:end="81:50"><name pos:start="79:9" pos:end="79:16">mprotect</name><argument_list pos:start="79:17" pos:end="81:50">(<argument pos:start="79:18" pos:end="79:31"><expr pos:start="79:18" pos:end="79:31"><call pos:start="79:18" pos:end="79:31"><name pos:start="79:18" pos:end="79:20">g2h</name><argument_list pos:start="79:21" pos:end="79:31">(<argument pos:start="79:22" pos:end="79:30"><expr pos:start="79:22" pos:end="79:30"><name pos:start="79:22" pos:end="79:30">page_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:34" pos:end="79:52"><expr pos:start="79:34" pos:end="79:52"><name pos:start="79:34" pos:end="79:52">qemu_host_page_size</name></expr></argument>,

                 <argument pos:start="81:18" pos:end="81:49"><expr pos:start="81:18" pos:end="81:49"><operator pos:start="81:18" pos:end="81:18">(</operator><name pos:start="81:19" pos:end="81:22">prot</name> <operator pos:start="81:24" pos:end="81:24">&amp;</operator> <name pos:start="81:26" pos:end="81:34">PAGE_BITS</name><operator pos:start="81:35" pos:end="81:35">)</operator> <operator pos:start="81:37" pos:end="81:37">&amp;</operator> <operator pos:start="81:39" pos:end="81:39">~</operator><name pos:start="81:40" pos:end="81:49">PAGE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="83:1" pos:end="83:26">#<cpp:directive pos:start="83:2" pos:end="83:6">ifdef</cpp:directive> <name pos:start="83:8" pos:end="83:26">DEBUG_TB_INVALIDATE</name></cpp:ifdef>

        <expr_stmt pos:start="85:9" pos:end="90:0"><expr pos:start="85:9" pos:end="87:25"><call pos:start="85:9" pos:end="87:25"><name pos:start="85:9" pos:end="85:14">printf</name><argument_list pos:start="85:15" pos:end="87:25">(<argument pos:start="85:16" pos:end="85:60"><expr pos:start="85:16" pos:end="85:60"><literal type="string" pos:start="85:16" pos:end="85:41">"protecting code page: 0x"</literal> <name pos:start="85:43" pos:end="85:55">TARGET_FMT_lx</name> <literal type="string" pos:start="85:57" pos:end="85:60">"\n"</literal></expr></argument>,

               <argument pos:start="87:16" pos:end="87:24"><expr pos:start="87:16" pos:end="87:24"><name pos:start="87:16" pos:end="87:24">page_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="93:1" pos:end="93:5">#<cpp:directive pos:start="93:2" pos:end="93:5">else</cpp:directive></cpp:else>

    <comment type="block" pos:start="95:5" pos:end="99:38">/* if some code is already present, then the pages are already

       protected. So we handle the case where only the first TB is

       allocated in a physical page */</comment>

    <if_stmt pos:start="101:5" pos:end="108:0"><if pos:start="101:5" pos:end="108:0">if <condition pos:start="101:8" pos:end="101:32">(<expr pos:start="101:9" pos:end="101:31"><operator pos:start="101:9" pos:end="101:9">!</operator><name pos:start="101:10" pos:end="101:31">page_already_protected</name></expr>)</condition> <block pos:start="101:34" pos:end="108:0">{<block_content pos:start="103:9" pos:end="103:36">

        <expr_stmt pos:start="103:9" pos:end="103:36"><expr pos:start="103:9" pos:end="103:35"><call pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:24">tlb_protect_code</name><argument_list pos:start="103:25" pos:end="103:35">(<argument pos:start="103:26" pos:end="103:34"><expr pos:start="103:26" pos:end="103:34"><name pos:start="103:26" pos:end="103:34">page_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
