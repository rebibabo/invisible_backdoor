<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11995.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">qcow2_alloc_cluster_offset</name><parameter_list pos:start="1:31" pos:end="3:76">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">uint64_t</name></type> <name pos:start="1:63" pos:end="1:68">offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:15"><decl pos:start="3:5" pos:end="3:15"><type pos:start="3:5" pos:end="3:15"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:15">n_start</name></decl></parameter>, <parameter pos:start="3:18" pos:end="3:26"><decl pos:start="3:18" pos:end="3:26"><type pos:start="3:18" pos:end="3:26"><name pos:start="3:18" pos:end="3:20">int</name></type> <name pos:start="3:22" pos:end="3:26">n_end</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:36"><decl pos:start="3:29" pos:end="3:36"><type pos:start="3:29" pos:end="3:36"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">num</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:59"><decl pos:start="3:39" pos:end="3:59"><type pos:start="3:39" pos:end="3:59"><name pos:start="3:39" pos:end="3:46">uint64_t</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:59">host_offset</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:75"><decl pos:start="3:62" pos:end="3:75"><type pos:start="3:62" pos:end="3:75"><name pos:start="3:62" pos:end="3:71">QCowL2Meta</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier><modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:75">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="211:1">{<block_content pos:start="7:5" pos:end="209:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">start</name></decl>, <decl pos:start="9:21" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:21" pos:end="9:29">remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">cur_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:54"><expr pos:start="19:5" pos:end="21:53"><call pos:start="19:5" pos:end="21:53"><name pos:start="19:5" pos:end="19:37">trace_qcow2_alloc_clusters_offset</name><argument_list pos:start="19:38" pos:end="21:53">(<argument pos:start="19:39" pos:end="19:59"><expr pos:start="19:39" pos:end="19:59"><call pos:start="19:39" pos:end="19:59"><name pos:start="19:39" pos:end="19:57">qemu_coroutine_self</name><argument_list pos:start="19:58" pos:end="19:59">()</argument_list></call></expr></argument>, <argument pos:start="19:62" pos:end="19:67"><expr pos:start="19:62" pos:end="19:67"><name pos:start="19:62" pos:end="19:67">offset</name></expr></argument>,

                                      <argument pos:start="21:39" pos:end="21:45"><expr pos:start="21:39" pos:end="21:45"><name pos:start="21:39" pos:end="21:45">n_start</name></expr></argument>, <argument pos:start="21:48" pos:end="21:52"><expr pos:start="21:48" pos:end="21:52"><name pos:start="21:48" pos:end="21:52">n_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:73"><expr pos:start="25:5" pos:end="25:72"><call pos:start="25:5" pos:end="25:72"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:72">(<argument pos:start="25:12" pos:end="25:71"><expr pos:start="25:12" pos:end="25:71"><name pos:start="25:12" pos:end="25:18">n_start</name> <operator pos:start="25:20" pos:end="25:20">*</operator> <name pos:start="25:22" pos:end="25:37">BDRV_SECTOR_SIZE</name> <operator pos:start="25:39" pos:end="25:40">==</operator> <call pos:start="25:42" pos:end="25:71"><name pos:start="25:42" pos:end="25:60">offset_into_cluster</name><argument_list pos:start="25:61" pos:end="25:71">(<argument pos:start="25:62" pos:end="25:62"><expr pos:start="25:62" pos:end="25:62"><name pos:start="25:62" pos:end="25:62">s</name></expr></argument>, <argument pos:start="25:65" pos:end="25:70"><expr pos:start="25:65" pos:end="25:70"><name pos:start="25:65" pos:end="25:70">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:10">offset</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:40"><name pos:start="27:14" pos:end="27:29">start_of_cluster</name><argument_list pos:start="27:30" pos:end="27:40">(<argument pos:start="27:31" pos:end="27:31"><expr pos:start="27:31" pos:end="27:31"><name pos:start="27:31" pos:end="27:31">s</name></expr></argument>, <argument pos:start="27:34" pos:end="27:39"><expr pos:start="27:34" pos:end="27:39"><name pos:start="27:34" pos:end="27:39">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="31:1" pos:end="31:6"><name pos:start="31:1" pos:end="31:5">again</name>:</label>

    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:9">start</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:18">offset</name> <operator pos:start="33:20" pos:end="33:20">+</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:29">n_start</name> <operator pos:start="33:31" pos:end="33:32">&lt;&lt;</operator> <name pos:start="33:34" pos:end="33:49">BDRV_SECTOR_BITS</name><operator pos:start="33:50" pos:end="33:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:54"><expr pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:13">remaining</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:22">n_end</name> <operator pos:start="35:24" pos:end="35:24">-</operator> <name pos:start="35:26" pos:end="35:32">n_start</name><operator pos:start="35:33" pos:end="35:33">)</operator> <operator pos:start="35:35" pos:end="35:36">&lt;&lt;</operator> <name pos:start="35:38" pos:end="35:53">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:18">cluster_offset</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:16">host_offset</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</expr_stmt>



    <while pos:start="43:5" pos:end="197:5">while <condition pos:start="43:11" pos:end="43:16">(<expr pos:start="43:12" pos:end="43:15"><name pos:start="43:12" pos:end="43:15">true</name></expr>)</condition> <block pos:start="43:18" pos:end="197:5">{<block_content pos:start="81:9" pos:end="195:9">

        <comment type="block" pos:start="45:9" pos:end="79:11">/*

         * Now start gathering as many contiguous clusters as possible:

         *

         * 1. Check for overlaps with in-flight allocations

         *

         *      a) Overlap not in the first cluster -&gt; shorten this request and

         *         let the caller handle the rest in its next loop iteration.

         *

         *      b) Real overlaps of two requests. Yield and restart the search

         *         for contiguous clusters (the situation could have changed

         *         while we were sleeping)

         *

         *      c) TODO: Request starts in the same cluster as the in-flight

         *         allocation ends. Shorten the COW of the in-fight allocation,

         *         set cluster_offset to write to the same cluster and set up

         *         the right synchronisation between the in-flight request and

         *         the new one.

         */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:30"><expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:17">cur_bytes</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:29">remaining</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:57"><expr pos:start="83:9" pos:end="83:56"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:56"><name pos:start="83:15" pos:end="83:33">handle_dependencies</name><argument_list pos:start="83:34" pos:end="83:56">(<argument pos:start="83:35" pos:end="83:36"><expr pos:start="83:35" pos:end="83:36"><name pos:start="83:35" pos:end="83:36">bs</name></expr></argument>, <argument pos:start="83:39" pos:end="83:43"><expr pos:start="83:39" pos:end="83:43"><name pos:start="83:39" pos:end="83:43">start</name></expr></argument>, <argument pos:start="83:46" pos:end="83:55"><expr pos:start="83:46" pos:end="83:55"><operator pos:start="83:46" pos:end="83:46">&amp;</operator><name pos:start="83:47" pos:end="83:55">cur_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="101:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:27">(<expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:18">==</operator> <operator pos:start="85:20" pos:end="85:20">-</operator><name pos:start="85:21" pos:end="85:26">EAGAIN</name></expr>)</condition> <block pos:start="85:29" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:23">

            <goto pos:start="87:13" pos:end="87:23">goto <name pos:start="87:18" pos:end="87:22">again</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="89:11" pos:end="93:9">else if <condition pos:start="89:19" pos:end="89:27">(<expr pos:start="89:20" pos:end="89:26"><name pos:start="89:20" pos:end="89:22">ret</name> <operator pos:start="89:24" pos:end="89:24">&lt;</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>)</condition> <block pos:start="89:29" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:23">

            <return pos:start="91:13" pos:end="91:23">return <expr pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">ret</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="101:9">else <block pos:start="93:16" pos:end="101:9">{<block_content>

            <comment type="block" pos:start="95:13" pos:end="99:59">/* handle_dependencies() may have decreased cur_bytes (shortened

             * the allocations below) so that the next dependency is processed

             * correctly during the next loop iteration. */</comment>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="105:9" pos:end="109:11">/*

         * 2. Count contiguous COPIED clusters.

         */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:71"><expr pos:start="111:9" pos:end="111:70"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:70"><name pos:start="111:15" pos:end="111:27">handle_copied</name><argument_list pos:start="111:28" pos:end="111:70">(<argument pos:start="111:29" pos:end="111:30"><expr pos:start="111:29" pos:end="111:30"><name pos:start="111:29" pos:end="111:30">bs</name></expr></argument>, <argument pos:start="111:33" pos:end="111:37"><expr pos:start="111:33" pos:end="111:37"><name pos:start="111:33" pos:end="111:37">start</name></expr></argument>, <argument pos:start="111:40" pos:end="111:54"><expr pos:start="111:40" pos:end="111:54"><operator pos:start="111:40" pos:end="111:40">&amp;</operator><name pos:start="111:41" pos:end="111:54">cluster_offset</name></expr></argument>, <argument pos:start="111:57" pos:end="111:66"><expr pos:start="111:57" pos:end="111:66"><operator pos:start="111:57" pos:end="111:57">&amp;</operator><name pos:start="111:58" pos:end="111:66">cur_bytes</name></expr></argument>, <argument pos:start="111:69" pos:end="111:69"><expr pos:start="111:69" pos:end="111:69"><name pos:start="111:69" pos:end="111:69">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="141:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:20">(<expr pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:15">ret</name> <operator pos:start="113:17" pos:end="113:17">&lt;</operator> <literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>)</condition> <block pos:start="113:22" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:23">

            <return pos:start="115:13" pos:end="115:23">return <expr pos:start="115:20" pos:end="115:22"><name pos:start="115:20" pos:end="115:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="137:9">else if <condition pos:start="117:19" pos:end="117:23">(<expr pos:start="117:20" pos:end="117:22"><name pos:start="117:20" pos:end="117:22">ret</name></expr>)</condition> <block pos:start="117:25" pos:end="137:9">{<block_content pos:start="119:13" pos:end="135:34">

            <if_stmt pos:start="119:13" pos:end="123:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:30">(<expr pos:start="119:17" pos:end="119:29"><operator pos:start="119:17" pos:end="119:17">!</operator><operator pos:start="119:18" pos:end="119:18">*</operator><name pos:start="119:19" pos:end="119:29">host_offset</name></expr>)</condition> <block pos:start="119:32" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:67">

                <expr_stmt pos:start="121:17" pos:end="121:67"><expr pos:start="121:17" pos:end="121:66"><operator pos:start="121:17" pos:end="121:17">*</operator><name pos:start="121:18" pos:end="121:28">host_offset</name> <operator pos:start="121:30" pos:end="121:30">=</operator> <call pos:start="121:32" pos:end="121:66"><name pos:start="121:32" pos:end="121:47">start_of_cluster</name><argument_list pos:start="121:48" pos:end="121:66">(<argument pos:start="121:49" pos:end="121:49"><expr pos:start="121:49" pos:end="121:49"><name pos:start="121:49" pos:end="121:49">s</name></expr></argument>, <argument pos:start="121:52" pos:end="121:65"><expr pos:start="121:52" pos:end="121:65"><name pos:start="121:52" pos:end="121:65">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:41"><expr pos:start="127:13" pos:end="127:40"><name pos:start="127:13" pos:end="127:17">start</name>           <operator pos:start="127:29" pos:end="127:30">+=</operator> <name pos:start="127:32" pos:end="127:40">cur_bytes</name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:41"><expr pos:start="129:13" pos:end="129:40"><name pos:start="129:13" pos:end="129:21">remaining</name>       <operator pos:start="129:29" pos:end="129:30">-=</operator> <name pos:start="129:32" pos:end="129:40">cur_bytes</name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:41"><expr pos:start="131:13" pos:end="131:40"><name pos:start="131:13" pos:end="131:26">cluster_offset</name>  <operator pos:start="131:29" pos:end="131:30">+=</operator> <name pos:start="131:32" pos:end="131:40">cur_bytes</name></expr>;</expr_stmt>



            <expr_stmt pos:start="135:13" pos:end="135:34"><expr pos:start="135:13" pos:end="135:33"><name pos:start="135:13" pos:end="135:21">cur_bytes</name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:33">remaining</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="137:11" pos:end="141:9">else if <condition pos:start="137:19" pos:end="137:34">(<expr pos:start="137:20" pos:end="137:33"><name pos:start="137:20" pos:end="137:28">cur_bytes</name> <operator pos:start="137:30" pos:end="137:31">==</operator> <literal type="number" pos:start="137:33" pos:end="137:33">0</literal></expr>)</condition> <block pos:start="137:36" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:18">

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="145:9" pos:end="145:65">/* If there is something left to allocate, do that now */</comment>

        <if_stmt pos:start="147:9" pos:end="151:9"><if pos:start="147:9" pos:end="151:9">if <condition pos:start="147:12" pos:end="147:27">(<expr pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:21">remaining</name> <operator pos:start="147:23" pos:end="147:24">==</operator> <literal type="number" pos:start="147:26" pos:end="147:26">0</literal></expr>)</condition> <block pos:start="147:29" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:18">

            <break pos:start="149:13" pos:end="149:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="155:9" pos:end="161:11">/*

         * 3. If the request still hasn't completed, allocate new clusters,

         *    considering any cluster_offset of steps 1c or 2.

         */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:70"><expr pos:start="163:9" pos:end="163:69"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:69"><name pos:start="163:15" pos:end="163:26">handle_alloc</name><argument_list pos:start="163:27" pos:end="163:69">(<argument pos:start="163:28" pos:end="163:29"><expr pos:start="163:28" pos:end="163:29"><name pos:start="163:28" pos:end="163:29">bs</name></expr></argument>, <argument pos:start="163:32" pos:end="163:36"><expr pos:start="163:32" pos:end="163:36"><name pos:start="163:32" pos:end="163:36">start</name></expr></argument>, <argument pos:start="163:39" pos:end="163:53"><expr pos:start="163:39" pos:end="163:53"><operator pos:start="163:39" pos:end="163:39">&amp;</operator><name pos:start="163:40" pos:end="163:53">cluster_offset</name></expr></argument>, <argument pos:start="163:56" pos:end="163:65"><expr pos:start="163:56" pos:end="163:65"><operator pos:start="163:56" pos:end="163:56">&amp;</operator><name pos:start="163:57" pos:end="163:65">cur_bytes</name></expr></argument>, <argument pos:start="163:68" pos:end="163:68"><expr pos:start="163:68" pos:end="163:68"><name pos:start="163:68" pos:end="163:68">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="195:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:20">(<expr pos:start="165:13" pos:end="165:19"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">&lt;</operator> <literal type="number" pos:start="165:19" pos:end="165:19">0</literal></expr>)</condition> <block pos:start="165:22" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:23">

            <return pos:start="167:13" pos:end="167:23">return <expr pos:start="167:20" pos:end="167:22"><name pos:start="167:20" pos:end="167:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="169:11" pos:end="189:9">else if <condition pos:start="169:19" pos:end="169:23">(<expr pos:start="169:20" pos:end="169:22"><name pos:start="169:20" pos:end="169:22">ret</name></expr>)</condition> <block pos:start="169:25" pos:end="189:9">{<block_content pos:start="171:13" pos:end="187:18">

            <if_stmt pos:start="171:13" pos:end="175:13"><if pos:start="171:13" pos:end="175:13">if <condition pos:start="171:16" pos:end="171:30">(<expr pos:start="171:17" pos:end="171:29"><operator pos:start="171:17" pos:end="171:17">!</operator><operator pos:start="171:18" pos:end="171:18">*</operator><name pos:start="171:19" pos:end="171:29">host_offset</name></expr>)</condition> <block pos:start="171:32" pos:end="175:13">{<block_content pos:start="173:17" pos:end="173:67">

                <expr_stmt pos:start="173:17" pos:end="173:67"><expr pos:start="173:17" pos:end="173:66"><operator pos:start="173:17" pos:end="173:17">*</operator><name pos:start="173:18" pos:end="173:28">host_offset</name> <operator pos:start="173:30" pos:end="173:30">=</operator> <call pos:start="173:32" pos:end="173:66"><name pos:start="173:32" pos:end="173:47">start_of_cluster</name><argument_list pos:start="173:48" pos:end="173:66">(<argument pos:start="173:49" pos:end="173:49"><expr pos:start="173:49" pos:end="173:49"><name pos:start="173:49" pos:end="173:49">s</name></expr></argument>, <argument pos:start="173:52" pos:end="173:65"><expr pos:start="173:52" pos:end="173:65"><name pos:start="173:52" pos:end="173:65">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="179:13" pos:end="179:41"><expr pos:start="179:13" pos:end="179:40"><name pos:start="179:13" pos:end="179:17">start</name>           <operator pos:start="179:29" pos:end="179:30">+=</operator> <name pos:start="179:32" pos:end="179:40">cur_bytes</name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:41"><expr pos:start="181:13" pos:end="181:40"><name pos:start="181:13" pos:end="181:21">remaining</name>       <operator pos:start="181:29" pos:end="181:30">-=</operator> <name pos:start="181:32" pos:end="181:40">cur_bytes</name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:41"><expr pos:start="183:13" pos:end="183:40"><name pos:start="183:13" pos:end="183:26">cluster_offset</name>  <operator pos:start="183:29" pos:end="183:30">+=</operator> <name pos:start="183:32" pos:end="183:40">cur_bytes</name></expr>;</expr_stmt>



            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="195:9">else <block pos:start="189:16" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:18">

            <expr_stmt pos:start="191:13" pos:end="191:35"><expr pos:start="191:13" pos:end="191:34"><call pos:start="191:13" pos:end="191:34"><name pos:start="191:13" pos:end="191:18">assert</name><argument_list pos:start="191:19" pos:end="191:34">(<argument pos:start="191:20" pos:end="191:33"><expr pos:start="191:20" pos:end="191:33"><name pos:start="191:20" pos:end="191:28">cur_bytes</name> <operator pos:start="191:30" pos:end="191:31">==</operator> <literal type="number" pos:start="191:33" pos:end="191:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="201:5" pos:end="201:63"><expr pos:start="201:5" pos:end="201:62"><operator pos:start="201:5" pos:end="201:5">*</operator><name pos:start="201:6" pos:end="201:8">num</name> <operator pos:start="201:10" pos:end="201:10">=</operator> <operator pos:start="201:12" pos:end="201:12">(</operator><name pos:start="201:13" pos:end="201:17">n_end</name> <operator pos:start="201:19" pos:end="201:19">-</operator> <name pos:start="201:21" pos:end="201:27">n_start</name><operator pos:start="201:28" pos:end="201:28">)</operator> <operator pos:start="201:30" pos:end="201:30">-</operator> <operator pos:start="201:32" pos:end="201:32">(</operator><name pos:start="201:33" pos:end="201:41">remaining</name> <operator pos:start="201:43" pos:end="201:44">&gt;&gt;</operator> <name pos:start="201:46" pos:end="201:61">BDRV_SECTOR_BITS</name><operator pos:start="201:62" pos:end="201:62">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:21"><expr pos:start="203:5" pos:end="203:20"><call pos:start="203:5" pos:end="203:20"><name pos:start="203:5" pos:end="203:10">assert</name><argument_list pos:start="203:11" pos:end="203:20">(<argument pos:start="203:12" pos:end="203:19"><expr pos:start="203:12" pos:end="203:19"><operator pos:start="203:12" pos:end="203:12">*</operator><name pos:start="203:13" pos:end="203:15">num</name> <operator pos:start="203:17" pos:end="203:17">&gt;</operator> <literal type="number" pos:start="203:19" pos:end="203:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:30"><expr pos:start="205:5" pos:end="205:29"><call pos:start="205:5" pos:end="205:29"><name pos:start="205:5" pos:end="205:10">assert</name><argument_list pos:start="205:11" pos:end="205:29">(<argument pos:start="205:12" pos:end="205:28"><expr pos:start="205:12" pos:end="205:28"><operator pos:start="205:12" pos:end="205:12">*</operator><name pos:start="205:13" pos:end="205:23">host_offset</name> <operator pos:start="205:25" pos:end="205:26">!=</operator> <literal type="number" pos:start="205:28" pos:end="205:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="209:5" pos:end="209:13">return <expr pos:start="209:12" pos:end="209:12"><literal type="number" pos:start="209:12" pos:end="209:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
