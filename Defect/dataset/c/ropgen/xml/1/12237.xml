<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12237.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">xen_host_pci_get_value</name><parameter_list pos:start="1:34" pos:end="3:65">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:50">XenHostPCIDevice</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">d</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:71"><decl pos:start="1:56" pos:end="1:71"><type pos:start="1:56" pos:end="1:71"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:65">char</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:71">name</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:54"><decl pos:start="3:35" pos:end="3:54"><type pos:start="3:35" pos:end="3:54"><name pos:start="3:35" pos:end="3:42">unsigned</name> <name pos:start="3:44" pos:end="3:46">int</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:54">pvalue</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:64"><decl pos:start="3:57" pos:end="3:64"><type pos:start="3:57" pos:end="3:64"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:64">base</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:14">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:23"><name pos:start="7:10" pos:end="7:13">path</name><index pos:start="7:14" pos:end="7:23">[<expr pos:start="7:15" pos:end="7:22"><name pos:start="7:15" pos:end="7:22">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:48"><name pos:start="9:10" pos:end="9:12">buf</name><index pos:start="9:13" pos:end="9:48">[<expr pos:start="9:14" pos:end="9:47"><name pos:start="9:14" pos:end="9:47">XEN_HOST_PCI_GET_VALUE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>, <decl pos:start="11:13" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:14">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:23">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:16">endptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:63"><expr pos:start="19:5" pos:end="19:62"><name pos:start="19:5" pos:end="19:6">rc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:62"><name pos:start="19:10" pos:end="19:32">xen_host_pci_sysfs_path</name><argument_list pos:start="19:33" pos:end="19:62">(<argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><name pos:start="19:34" pos:end="19:34">d</name></expr></argument>, <argument pos:start="19:37" pos:end="19:40"><expr pos:start="19:37" pos:end="19:40"><name pos:start="19:37" pos:end="19:40">name</name></expr></argument>, <argument pos:start="19:43" pos:end="19:46"><expr pos:start="19:43" pos:end="19:46"><name pos:start="19:43" pos:end="19:46">path</name></expr></argument>, <argument pos:start="19:49" pos:end="19:61"><expr pos:start="19:49" pos:end="19:61"><sizeof pos:start="19:49" pos:end="19:61">sizeof <argument_list pos:start="19:56" pos:end="19:61">(<argument pos:start="19:57" pos:end="19:60"><expr pos:start="19:57" pos:end="19:60"><name pos:start="19:57" pos:end="19:60">path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:11">(<expr pos:start="21:9" pos:end="21:10"><name pos:start="21:9" pos:end="21:10">rc</name></expr>)</condition> <block pos:start="21:13" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:18">

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><name pos:start="23:16" pos:end="23:17">rc</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:6">fd</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <call pos:start="27:10" pos:end="27:29"><name pos:start="27:10" pos:end="27:13">open</name><argument_list pos:start="27:14" pos:end="27:29">(<argument pos:start="27:15" pos:end="27:18"><expr pos:start="27:15" pos:end="27:18"><name pos:start="27:15" pos:end="27:18">path</name></expr></argument>, <argument pos:start="27:21" pos:end="27:28"><expr pos:start="27:21" pos:end="27:28"><name pos:start="27:21" pos:end="27:28">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:17">(<expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:10">fd</name> <operator pos:start="29:12" pos:end="29:13">==</operator> <operator pos:start="29:15" pos:end="29:15">-</operator><literal type="number" pos:start="29:16" pos:end="29:16">1</literal></expr>)</condition> <block pos:start="29:19" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:22">

        <expr_stmt pos:start="31:9" pos:end="31:78"><expr pos:start="31:9" pos:end="31:77"><call pos:start="31:9" pos:end="31:77"><name pos:start="31:9" pos:end="31:24">XEN_HOST_PCI_LOG</name><argument_list pos:start="31:25" pos:end="31:77">(<argument pos:start="31:26" pos:end="31:53"><expr pos:start="31:26" pos:end="31:53"><literal type="string" pos:start="31:26" pos:end="31:53">"Error: Can't open %s: %s\n"</literal></expr></argument>, <argument pos:start="31:56" pos:end="31:59"><expr pos:start="31:56" pos:end="31:59"><name pos:start="31:56" pos:end="31:59">path</name></expr></argument>, <argument pos:start="31:62" pos:end="31:76"><expr pos:start="31:62" pos:end="31:76"><call pos:start="31:62" pos:end="31:76"><name pos:start="31:62" pos:end="31:69">strerror</name><argument_list pos:start="31:70" pos:end="31:76">(<argument pos:start="31:71" pos:end="31:75"><expr pos:start="31:71" pos:end="31:75"><name pos:start="31:71" pos:end="31:75">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:22">return <expr pos:start="33:16" pos:end="33:21"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <do pos:start="37:5" pos:end="49:21">do <block pos:start="37:8" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:9">

        <expr_stmt pos:start="39:9" pos:end="39:46"><expr pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:10">rc</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:45"><name pos:start="39:14" pos:end="39:17">read</name><argument_list pos:start="39:18" pos:end="39:45">(<argument pos:start="39:19" pos:end="39:20"><expr pos:start="39:19" pos:end="39:20"><name pos:start="39:19" pos:end="39:20">fd</name></expr></argument>, <argument pos:start="39:23" pos:end="39:26"><expr pos:start="39:23" pos:end="39:26"><operator pos:start="39:23" pos:end="39:23">&amp;</operator><name pos:start="39:24" pos:end="39:26">buf</name></expr></argument>, <argument pos:start="39:29" pos:end="39:44"><expr pos:start="39:29" pos:end="39:44"><sizeof pos:start="39:29" pos:end="39:40">sizeof <argument_list pos:start="39:36" pos:end="39:40">(<argument pos:start="39:37" pos:end="39:39"><expr pos:start="39:37" pos:end="39:39"><name pos:start="39:37" pos:end="39:39">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="39:42" pos:end="39:42">-</operator> <literal type="number" pos:start="39:44" pos:end="39:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:37">(<expr pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:14">rc</name> <operator pos:start="41:16" pos:end="41:16">&lt;</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal> <operator pos:start="41:20" pos:end="41:21">&amp;&amp;</operator> <name pos:start="41:23" pos:end="41:27">errno</name> <operator pos:start="41:29" pos:end="41:30">!=</operator> <name pos:start="41:32" pos:end="41:36">EINTR</name></expr>)</condition> <block pos:start="41:39" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <expr_stmt pos:start="43:13" pos:end="43:24"><expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:14">rc</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">-</operator><name pos:start="43:19" pos:end="43:23">errno</name></expr>;</expr_stmt>

            <goto pos:start="45:13" pos:end="45:21">goto <name pos:start="45:18" pos:end="45:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="49:13" pos:end="49:20">(<expr pos:start="49:14" pos:end="49:19"><name pos:start="49:14" pos:end="49:15">rc</name> <operator pos:start="49:17" pos:end="49:17">&lt;</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>)</condition>;</do>

    <expr_stmt pos:start="51:5" pos:end="51:16"><expr pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:7">buf</name><index pos:start="51:8" pos:end="51:11">[<expr pos:start="51:9" pos:end="51:10"><name pos:start="51:9" pos:end="51:10">rc</name></expr>]</index></name> <operator pos:start="51:13" pos:end="51:13">=</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:39"><expr pos:start="53:5" pos:end="53:38"><name pos:start="53:5" pos:end="53:9">value</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:18">strtol</name><argument_list pos:start="53:19" pos:end="53:38">(<argument pos:start="53:20" pos:end="53:22"><expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">buf</name></expr></argument>, <argument pos:start="53:25" pos:end="53:31"><expr pos:start="53:25" pos:end="53:31"><operator pos:start="53:25" pos:end="53:25">&amp;</operator><name pos:start="53:26" pos:end="53:31">endptr</name></expr></argument>, <argument pos:start="53:34" pos:end="53:37"><expr pos:start="53:34" pos:end="53:37"><name pos:start="53:34" pos:end="53:37">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="69:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:41">(<expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:14">endptr</name> <operator pos:start="55:16" pos:end="55:17">==</operator> <name pos:start="55:19" pos:end="55:21">buf</name> <operator pos:start="55:23" pos:end="55:24">||</operator> <operator pos:start="55:26" pos:end="55:26">*</operator><name pos:start="55:27" pos:end="55:32">endptr</name> <operator pos:start="55:34" pos:end="55:35">!=</operator> <literal type="char" pos:start="55:37" pos:end="55:40">'\n'</literal></expr>)</condition> <block pos:start="55:43" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:16">

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:10">rc</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">-</operator><literal type="number" pos:start="57:15" pos:end="57:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="63:5">else if <condition pos:start="59:15" pos:end="59:75">(<expr pos:start="59:16" pos:end="59:74"><operator pos:start="59:16" pos:end="59:16">(</operator><name pos:start="59:17" pos:end="59:21">value</name> <operator pos:start="59:23" pos:end="59:24">==</operator> <name pos:start="59:26" pos:end="59:33">LONG_MIN</name> <operator pos:start="59:35" pos:end="59:36">||</operator> <name pos:start="59:38" pos:end="59:42">value</name> <operator pos:start="59:44" pos:end="59:45">==</operator> <name pos:start="59:47" pos:end="59:54">LONG_MAX</name><operator pos:start="59:55" pos:end="59:55">)</operator> <operator pos:start="59:57" pos:end="59:58">&amp;&amp;</operator> <name pos:start="59:60" pos:end="59:64">errno</name> <operator pos:start="59:66" pos:end="59:67">==</operator> <name pos:start="59:69" pos:end="59:74">ERANGE</name></expr>)</condition> <block pos:start="59:77" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:20">

        <expr_stmt pos:start="61:9" pos:end="61:20"><expr pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:10">rc</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <operator pos:start="61:14" pos:end="61:14">-</operator><name pos:start="61:15" pos:end="61:19">errno</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="69:5">else <block pos:start="63:12" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:24">

        <expr_stmt pos:start="65:9" pos:end="65:15"><expr pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:10">rc</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:24"><expr pos:start="67:9" pos:end="67:23"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:15">pvalue</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:23">value</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<label pos:start="71:1" pos:end="71:4"><name pos:start="71:1" pos:end="71:3">out</name>:</label>

    <expr_stmt pos:start="73:5" pos:end="73:14"><expr pos:start="73:5" pos:end="73:13"><call pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:9">close</name><argument_list pos:start="73:10" pos:end="73:13">(<argument pos:start="73:11" pos:end="73:12"><expr pos:start="73:11" pos:end="73:12"><name pos:start="73:11" pos:end="73:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:14">return <expr pos:start="75:12" pos:end="75:13"><name pos:start="75:12" pos:end="75:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
