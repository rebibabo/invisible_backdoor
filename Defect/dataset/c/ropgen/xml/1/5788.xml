<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5788.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">read_dcs</name><parameter_list pos:start="1:20" pos:end="3:49">(<parameter pos:start="1:21" pos:end="1:41"><decl pos:start="1:21" pos:end="1:41"><type pos:start="1:21" pos:end="1:41"><name pos:start="1:21" pos:end="1:34">AVCodecContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:41">avctx</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:56">GetBitContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">gb</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:71"><decl pos:start="1:63" pos:end="1:71"><type pos:start="1:63" pos:end="1:71"><name pos:start="1:63" pos:end="1:68">Bundle</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:71">b</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:34"><decl pos:start="3:21" pos:end="3:34"><type pos:start="3:21" pos:end="3:34"><name pos:start="3:21" pos:end="3:23">int</name></type> <name pos:start="3:25" pos:end="3:34">start_bits</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:48">has_sign</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="77:13">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name></decl>, <decl pos:start="7:15" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:17">len</name></decl>, <decl pos:start="7:20" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:23">len2</name></decl>, <decl pos:start="7:26" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:30">bsize</name></decl>, <decl pos:start="7:33" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:33" pos:end="7:36">sign</name></decl>, <decl pos:start="7:39" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:39" pos:end="7:39">v</name></decl>, <decl pos:start="7:42" pos:end="7:43"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:42" pos:end="7:43">v2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">int16_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">dst</name> <init pos:start="9:18" pos:end="9:39">= <expr pos:start="9:20" pos:end="9:39"><operator pos:start="9:20" pos:end="9:20">(</operator><name pos:start="9:21" pos:end="9:27">int16_t</name><operator pos:start="9:28" pos:end="9:28">*</operator><operator pos:start="9:29" pos:end="9:29">)</operator><name pos:start="9:30" pos:end="9:39"><name pos:start="9:30" pos:end="9:30">b</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:39">cur_dec</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:18">CHECK_READ_VAL</name><argument_list pos:start="13:19" pos:end="13:30">(<argument pos:start="13:20" pos:end="13:21"><expr pos:start="13:20" pos:end="13:21"><name pos:start="13:20" pos:end="13:21">gb</name></expr></argument>, <argument pos:start="13:24" pos:end="13:24"><expr pos:start="13:24" pos:end="13:24"><name pos:start="13:24" pos:end="13:24">b</name></expr></argument>, <argument pos:start="13:27" pos:end="13:29"><expr pos:start="13:27" pos:end="13:29"><name pos:start="13:27" pos:end="13:29">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:44"><expr pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:5">v</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <call pos:start="15:9" pos:end="15:43"><name pos:start="15:9" pos:end="15:16">get_bits</name><argument_list pos:start="15:17" pos:end="15:43">(<argument pos:start="15:18" pos:end="15:19"><expr pos:start="15:18" pos:end="15:19"><name pos:start="15:18" pos:end="15:19">gb</name></expr></argument>, <argument pos:start="15:22" pos:end="15:42"><expr pos:start="15:22" pos:end="15:42"><name pos:start="15:22" pos:end="15:31">start_bits</name> <operator pos:start="15:33" pos:end="15:33">-</operator> <name pos:start="15:35" pos:end="15:42">has_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:9">v</name> <operator pos:start="17:11" pos:end="17:12">&amp;&amp;</operator> <name pos:start="17:14" pos:end="17:21">has_sign</name></expr>)</condition> <block pos:start="17:24" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:30">

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:12">sign</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <operator pos:start="19:16" pos:end="19:16">-</operator><call pos:start="19:17" pos:end="19:29"><name pos:start="19:17" pos:end="19:25">get_bits1</name><argument_list pos:start="19:26" pos:end="19:29">(<argument pos:start="19:27" pos:end="19:28"><expr pos:start="19:27" pos:end="19:28"><name pos:start="19:27" pos:end="19:28">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:9">v</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:14">v</name> <operator pos:start="21:16" pos:end="21:16">^</operator> <name pos:start="21:18" pos:end="21:21">sign</name><operator pos:start="21:22" pos:end="21:22">)</operator> <operator pos:start="21:24" pos:end="21:24">-</operator> <name pos:start="21:26" pos:end="21:29">sign</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:15"><expr pos:start="25:5" pos:end="25:14"><operator pos:start="25:5" pos:end="25:5">*</operator><name pos:start="25:6" pos:end="25:8">dst</name><operator pos:start="25:9" pos:end="25:10">++</operator> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:14">v</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:10"><expr pos:start="27:5" pos:end="27:9"><name pos:start="27:5" pos:end="27:7">len</name><operator pos:start="27:8" pos:end="27:9">--</operator></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="71:5">for <control pos:start="29:9" pos:end="29:32">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:24"><expr pos:start="29:17" pos:end="29:23"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:23">len</name></expr>;</condition> <incr pos:start="29:26" pos:end="29:31"><expr pos:start="29:26" pos:end="29:31"><name pos:start="29:26" pos:end="29:26">i</name> <operator pos:start="29:28" pos:end="29:29">+=</operator> <literal type="number" pos:start="29:31" pos:end="29:31">8</literal></expr></incr>)</control> <block pos:start="29:34" pos:end="71:5">{<block_content pos:start="31:9" pos:end="69:9">

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:12">len2</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:32"><name pos:start="31:16" pos:end="31:20">FFMIN</name><argument_list pos:start="31:21" pos:end="31:32">(<argument pos:start="31:22" pos:end="31:28"><expr pos:start="31:22" pos:end="31:28"><name pos:start="31:22" pos:end="31:24">len</name> <operator pos:start="31:26" pos:end="31:26">-</operator> <name pos:start="31:28" pos:end="31:28">i</name></expr></argument>, <argument pos:start="31:31" pos:end="31:31"><expr pos:start="31:31" pos:end="31:31"><literal type="number" pos:start="31:31" pos:end="31:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:13">bsize</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:24">get_bits</name><argument_list pos:start="33:25" pos:end="33:31">(<argument pos:start="33:26" pos:end="33:27"><expr pos:start="33:26" pos:end="33:27"><name pos:start="33:26" pos:end="33:27">gb</name></expr></argument>, <argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><literal type="number" pos:start="33:30" pos:end="33:30">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="69:9"><if pos:start="35:9" pos:end="63:9">if <condition pos:start="35:12" pos:end="35:18">(<expr pos:start="35:13" pos:end="35:17"><name pos:start="35:13" pos:end="35:17">bsize</name></expr>)</condition> <block pos:start="35:20" pos:end="63:9">{<block_content pos:start="37:13" pos:end="61:13">

            <for pos:start="37:13" pos:end="61:13">for <control pos:start="37:17" pos:end="37:38">(<init pos:start="37:18" pos:end="37:23"><expr pos:start="37:18" pos:end="37:22"><name pos:start="37:18" pos:end="37:18">j</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</init> <condition pos:start="37:25" pos:end="37:33"><expr pos:start="37:25" pos:end="37:32"><name pos:start="37:25" pos:end="37:25">j</name> <operator pos:start="37:27" pos:end="37:27">&lt;</operator> <name pos:start="37:29" pos:end="37:32">len2</name></expr>;</condition> <incr pos:start="37:35" pos:end="37:37"><expr pos:start="37:35" pos:end="37:37"><name pos:start="37:35" pos:end="37:35">j</name><operator pos:start="37:36" pos:end="37:37">++</operator></expr></incr>)</control> <block pos:start="37:40" pos:end="61:13">{<block_content pos:start="39:17" pos:end="59:17">

                <expr_stmt pos:start="39:17" pos:end="39:41"><expr pos:start="39:17" pos:end="39:40"><name pos:start="39:17" pos:end="39:18">v2</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <call pos:start="39:22" pos:end="39:40"><name pos:start="39:22" pos:end="39:29">get_bits</name><argument_list pos:start="39:30" pos:end="39:40">(<argument pos:start="39:31" pos:end="39:32"><expr pos:start="39:31" pos:end="39:32"><name pos:start="39:31" pos:end="39:32">gb</name></expr></argument>, <argument pos:start="39:35" pos:end="39:39"><expr pos:start="39:35" pos:end="39:39"><name pos:start="39:35" pos:end="39:39">bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="41:17" pos:end="47:17"><if pos:start="41:17" pos:end="47:17">if <condition pos:start="41:20" pos:end="41:23">(<expr pos:start="41:21" pos:end="41:22"><name pos:start="41:21" pos:end="41:22">v2</name></expr>)</condition> <block pos:start="41:25" pos:end="47:17">{<block_content pos:start="43:21" pos:end="45:44">

                    <expr_stmt pos:start="43:21" pos:end="43:42"><expr pos:start="43:21" pos:end="43:41"><name pos:start="43:21" pos:end="43:24">sign</name> <operator pos:start="43:26" pos:end="43:26">=</operator> <operator pos:start="43:28" pos:end="43:28">-</operator><call pos:start="43:29" pos:end="43:41"><name pos:start="43:29" pos:end="43:37">get_bits1</name><argument_list pos:start="43:38" pos:end="43:41">(<argument pos:start="43:39" pos:end="43:40"><expr pos:start="43:39" pos:end="43:40"><name pos:start="43:39" pos:end="43:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="45:21" pos:end="45:44"><expr pos:start="45:21" pos:end="45:43"><name pos:start="45:21" pos:end="45:22">v2</name> <operator pos:start="45:24" pos:end="45:24">=</operator> <operator pos:start="45:26" pos:end="45:26">(</operator><name pos:start="45:27" pos:end="45:28">v2</name> <operator pos:start="45:30" pos:end="45:30">^</operator> <name pos:start="45:32" pos:end="45:35">sign</name><operator pos:start="45:36" pos:end="45:36">)</operator> <operator pos:start="45:38" pos:end="45:38">-</operator> <name pos:start="45:40" pos:end="45:43">sign</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:24"><expr pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:17">v</name> <operator pos:start="49:19" pos:end="49:20">+=</operator> <name pos:start="49:22" pos:end="49:23">v2</name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:27"><expr pos:start="51:17" pos:end="51:26"><operator pos:start="51:17" pos:end="51:17">*</operator><name pos:start="51:18" pos:end="51:20">dst</name><operator pos:start="51:21" pos:end="51:22">++</operator> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:26">v</name></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="59:17"><if pos:start="53:17" pos:end="59:17">if <condition pos:start="53:20" pos:end="53:44">(<expr pos:start="53:21" pos:end="53:43"><name pos:start="53:21" pos:end="53:37"><name pos:start="53:21" pos:end="53:21">v</name> <argument_list type="generic" pos:start="53:23" pos:end="53:37">&lt; <argument pos:start="53:25" pos:end="53:35"><expr pos:start="53:25" pos:end="53:35"><operator pos:start="53:25" pos:end="53:25">-</operator><literal type="number" pos:start="53:26" pos:end="53:30">32768</literal> <operator pos:start="53:32" pos:end="53:33">||</operator> <name pos:start="53:35" pos:end="53:35">v</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="53:39" pos:end="53:43">32767</literal></expr>)</condition> <block pos:start="53:46" pos:end="59:17">{<block_content pos:start="55:21" pos:end="57:30">

                    <expr_stmt pos:start="55:21" pos:end="55:88"><expr pos:start="55:21" pos:end="55:87"><call pos:start="55:21" pos:end="55:87"><name pos:start="55:21" pos:end="55:26">av_log</name><argument_list pos:start="55:27" pos:end="55:87">(<argument pos:start="55:28" pos:end="55:32"><expr pos:start="55:28" pos:end="55:32"><name pos:start="55:28" pos:end="55:32">avctx</name></expr></argument>, <argument pos:start="55:35" pos:end="55:46"><expr pos:start="55:35" pos:end="55:46"><name pos:start="55:35" pos:end="55:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:49" pos:end="55:83"><expr pos:start="55:49" pos:end="55:83"><literal type="string" pos:start="55:49" pos:end="55:83">"DC value went out of bounds: %d\n"</literal></expr></argument>, <argument pos:start="55:86" pos:end="55:86"><expr pos:start="55:86" pos:end="55:86"><name pos:start="55:86" pos:end="55:86">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="57:21" pos:end="57:30">return <expr pos:start="57:28" pos:end="57:29"><operator pos:start="57:28" pos:end="57:28">-</operator><literal type="number" pos:start="57:29" pos:end="57:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="69:9">else <block pos:start="63:16" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:27">

            <for pos:start="65:13" pos:end="67:27">for <control pos:start="65:17" pos:end="65:38">(<init pos:start="65:18" pos:end="65:23"><expr pos:start="65:18" pos:end="65:22"><name pos:start="65:18" pos:end="65:18">j</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">0</literal></expr>;</init> <condition pos:start="65:25" pos:end="65:33"><expr pos:start="65:25" pos:end="65:32"><name pos:start="65:25" pos:end="65:25">j</name> <operator pos:start="65:27" pos:end="65:27">&lt;</operator> <name pos:start="65:29" pos:end="65:32">len2</name></expr>;</condition> <incr pos:start="65:35" pos:end="65:37"><expr pos:start="65:35" pos:end="65:37"><name pos:start="65:35" pos:end="65:35">j</name><operator pos:start="65:36" pos:end="65:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="67:17" pos:end="67:27"><block_content pos:start="67:17" pos:end="67:27">

                <expr_stmt pos:start="67:17" pos:end="67:27"><expr pos:start="67:17" pos:end="67:26"><operator pos:start="67:17" pos:end="67:17">*</operator><name pos:start="67:18" pos:end="67:20">dst</name><operator pos:start="67:21" pos:end="67:22">++</operator> <operator pos:start="67:24" pos:end="67:24">=</operator> <name pos:start="67:26" pos:end="67:26">v</name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:5">b</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:14">cur_dec</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:25">uint8_t</name><operator pos:start="75:26" pos:end="75:26">*</operator><operator pos:start="75:27" pos:end="75:27">)</operator><name pos:start="75:28" pos:end="75:30">dst</name></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
