<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12285.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:38">dxt5_block_internal</name><parameter_list pos:start="1:39" pos:end="3:60">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:46">uint8_t</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dst</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:69"><decl pos:start="1:54" pos:end="1:69"><type pos:start="1:54" pos:end="1:69"><name pos:start="1:54" pos:end="1:62">ptrdiff_t</name></type> <name pos:start="1:64" pos:end="1:69">stride</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:59"><decl pos:start="3:40" pos:end="3:59"><type pos:start="3:40" pos:end="3:59"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:52">uint8_t</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">block</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:5">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">x</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:22"><name pos:start="9:14" pos:end="9:19">colors</name><index pos:start="9:20" pos:end="9:22">[<expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:29"><name pos:start="11:13" pos:end="11:25">alpha_indices</name><index pos:start="11:26" pos:end="11:29">[<expr pos:start="11:27" pos:end="11:28"><literal type="number" pos:start="11:27" pos:end="11:28">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:19">color0</name> <init pos:start="13:21" pos:end="13:40">= <expr pos:start="13:23" pos:end="13:40"><call pos:start="13:23" pos:end="13:40"><name pos:start="13:23" pos:end="13:29">AV_RL16</name><argument_list pos:start="13:30" pos:end="13:40">(<argument pos:start="13:31" pos:end="13:39"><expr pos:start="13:31" pos:end="13:39"><name pos:start="13:31" pos:end="13:35">block</name> <operator pos:start="13:37" pos:end="13:37">+</operator> <literal type="number" pos:start="13:39" pos:end="13:39">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:19">color1</name> <init pos:start="15:21" pos:end="15:41">= <expr pos:start="15:23" pos:end="15:41"><call pos:start="15:23" pos:end="15:41"><name pos:start="15:23" pos:end="15:29">AV_RL16</name><argument_list pos:start="15:30" pos:end="15:41">(<argument pos:start="15:31" pos:end="15:40"><expr pos:start="15:31" pos:end="15:40"><name pos:start="15:31" pos:end="15:35">block</name> <operator pos:start="15:37" pos:end="15:37">+</operator> <literal type="number" pos:start="15:39" pos:end="15:40">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:17">code</name>   <init pos:start="17:21" pos:end="17:41">= <expr pos:start="17:23" pos:end="17:41"><call pos:start="17:23" pos:end="17:41"><name pos:start="17:23" pos:end="17:29">AV_RL32</name><argument_list pos:start="17:30" pos:end="17:41">(<argument pos:start="17:31" pos:end="17:40"><expr pos:start="17:31" pos:end="17:40"><name pos:start="17:31" pos:end="17:35">block</name> <operator pos:start="17:37" pos:end="17:37">+</operator> <literal type="number" pos:start="17:39" pos:end="17:40">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:18">alpha0</name>  <init pos:start="19:21" pos:end="19:30">= <expr pos:start="19:23" pos:end="19:30"><operator pos:start="19:23" pos:end="19:23">*</operator><operator pos:start="19:24" pos:end="19:24">(</operator><name pos:start="19:25" pos:end="19:29">block</name><operator pos:start="19:30" pos:end="19:30">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:18">alpha1</name>  <init pos:start="21:21" pos:end="21:34">= <expr pos:start="21:23" pos:end="21:34"><operator pos:start="21:23" pos:end="21:23">*</operator><operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:29">block</name> <operator pos:start="21:31" pos:end="21:31">+</operator> <literal type="number" pos:start="21:33" pos:end="21:33">1</literal><operator pos:start="21:34" pos:end="21:34">)</operator></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:49"><expr pos:start="25:5" pos:end="25:48"><call pos:start="25:5" pos:end="25:48"><name pos:start="25:5" pos:end="25:22">decompress_indices</name><argument_list pos:start="25:23" pos:end="25:48">(<argument pos:start="25:24" pos:end="25:36"><expr pos:start="25:24" pos:end="25:36"><name pos:start="25:24" pos:end="25:36">alpha_indices</name></expr></argument>, <argument pos:start="25:39" pos:end="25:47"><expr pos:start="25:39" pos:end="25:47"><name pos:start="25:39" pos:end="25:43">block</name> <operator pos:start="25:45" pos:end="25:45">+</operator> <literal type="number" pos:start="25:47" pos:end="25:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><call pos:start="29:5" pos:end="29:47"><name pos:start="29:5" pos:end="29:17">extract_color</name><argument_list pos:start="29:18" pos:end="29:47">(<argument pos:start="29:19" pos:end="29:24"><expr pos:start="29:19" pos:end="29:24"><name pos:start="29:19" pos:end="29:24">colors</name></expr></argument>, <argument pos:start="29:27" pos:end="29:32"><expr pos:start="29:27" pos:end="29:32"><name pos:start="29:27" pos:end="29:32">color0</name></expr></argument>, <argument pos:start="29:35" pos:end="29:40"><expr pos:start="29:35" pos:end="29:40"><name pos:start="29:35" pos:end="29:40">color1</name></expr></argument>, <argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><literal type="number" pos:start="29:43" pos:end="29:43">1</literal></expr></argument>, <argument pos:start="29:46" pos:end="29:46"><expr pos:start="29:46" pos:end="29:46"><literal type="number" pos:start="29:46" pos:end="29:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="33:5" pos:end="93:5">for <control pos:start="33:9" pos:end="33:27">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">y</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:21"><name pos:start="33:17" pos:end="33:17">y</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <literal type="number" pos:start="33:21" pos:end="33:21">4</literal></expr>;</condition> <incr pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:24">y</name><operator pos:start="33:25" pos:end="33:26">++</operator></expr></incr>)</control> <block pos:start="33:29" pos:end="93:5">{<block_content pos:start="35:9" pos:end="91:22">

        <for pos:start="35:9" pos:end="89:9">for <control pos:start="35:13" pos:end="35:31">(<init pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">x</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>;</init> <condition pos:start="35:21" pos:end="35:26"><expr pos:start="35:21" pos:end="35:25"><name pos:start="35:21" pos:end="35:21">x</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <literal type="number" pos:start="35:25" pos:end="35:25">4</literal></expr>;</condition> <incr pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:28">x</name><operator pos:start="35:29" pos:end="35:30">++</operator></expr></incr>)</control> <block pos:start="35:33" pos:end="89:9">{<block_content pos:start="37:13" pos:end="87:40">

            <decl_stmt pos:start="37:13" pos:end="37:54"><decl pos:start="37:13" pos:end="37:53"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:26">alpha_code</name> <init pos:start="37:28" pos:end="37:53">= <expr pos:start="37:30" pos:end="37:53"><name pos:start="37:30" pos:end="37:53"><name pos:start="37:30" pos:end="37:42">alpha_indices</name><index pos:start="37:43" pos:end="37:53">[<expr pos:start="37:44" pos:end="37:52"><name pos:start="37:44" pos:end="37:44">x</name> <operator pos:start="37:46" pos:end="37:46">+</operator> <name pos:start="37:48" pos:end="37:48">y</name> <operator pos:start="37:50" pos:end="37:50">*</operator> <literal type="number" pos:start="37:52" pos:end="37:52">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:27"><decl pos:start="39:13" pos:end="39:26"><type pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:20">uint32_t</name></type> <name pos:start="39:22" pos:end="39:26">pixel</name></decl>;</decl_stmt>

            <decl_stmt pos:start="41:13" pos:end="41:26"><decl pos:start="41:13" pos:end="41:25"><type pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:19">uint8_t</name></type> <name pos:start="41:21" pos:end="41:25">alpha</name></decl>;</decl_stmt>



            <if_stmt pos:start="45:13" pos:end="81:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:32">(<expr pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:26">alpha_code</name> <operator pos:start="45:28" pos:end="45:29">==</operator> <literal type="number" pos:start="45:31" pos:end="45:31">0</literal></expr>)</condition> <block pos:start="45:34" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:31">

                <expr_stmt pos:start="47:17" pos:end="47:31"><expr pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:21">alpha</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:30">alpha0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="49:15" pos:end="53:13">else if <condition pos:start="49:23" pos:end="49:39">(<expr pos:start="49:24" pos:end="49:38"><name pos:start="49:24" pos:end="49:33">alpha_code</name> <operator pos:start="49:35" pos:end="49:36">==</operator> <literal type="number" pos:start="49:38" pos:end="49:38">1</literal></expr>)</condition> <block pos:start="49:41" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:31">

                <expr_stmt pos:start="51:17" pos:end="51:31"><expr pos:start="51:17" pos:end="51:30"><name pos:start="51:17" pos:end="51:21">alpha</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:30">alpha1</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="53:15" pos:end="81:13">else <block pos:start="53:20" pos:end="81:13">{<block_content pos:start="55:17" pos:end="79:17">

                <if_stmt pos:start="55:17" pos:end="79:17"><if pos:start="55:17" pos:end="61:17">if <condition pos:start="55:20" pos:end="55:36">(<expr pos:start="55:21" pos:end="55:35"><name pos:start="55:21" pos:end="55:26">alpha0</name> <operator pos:start="55:28" pos:end="55:28">&gt;</operator> <name pos:start="55:30" pos:end="55:35">alpha1</name></expr>)</condition> <block pos:start="55:38" pos:end="61:17">{<block_content pos:start="57:21" pos:end="59:72">

                    <expr_stmt pos:start="57:21" pos:end="59:72"><expr pos:start="57:21" pos:end="59:71"><name pos:start="57:21" pos:end="57:25">alpha</name> <operator pos:start="57:27" pos:end="57:27">=</operator> <operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:36">uint8_t</name><operator pos:start="57:37" pos:end="57:37">)</operator> <operator pos:start="57:39" pos:end="57:39">(</operator><operator pos:start="57:40" pos:end="57:40">(</operator><operator pos:start="57:41" pos:end="57:41">(</operator><literal type="number" pos:start="57:42" pos:end="57:44">8</literal> <operator pos:start="57:44" pos:end="57:44">-</operator> <name pos:start="57:46" pos:end="57:55">alpha_code</name><operator pos:start="57:56" pos:end="57:56">)</operator> <operator pos:start="57:58" pos:end="57:58">*</operator> <name pos:start="57:60" pos:end="57:65">alpha0</name> <operator pos:start="57:67" pos:end="57:67">+</operator>

                                        <operator pos:start="59:41" pos:end="59:41">(</operator><name pos:start="59:42" pos:end="59:51">alpha_code</name> <operator pos:start="59:53" pos:end="59:53">-</operator> <literal type="number" pos:start="59:55" pos:end="59:55">1</literal><operator pos:start="59:56" pos:end="59:56">)</operator> <operator pos:start="59:58" pos:end="59:58">*</operator> <name pos:start="59:60" pos:end="59:65">alpha1</name><operator pos:start="59:66" pos:end="59:66">)</operator> <operator pos:start="59:68" pos:end="59:68">/</operator> <literal type="number" pos:start="59:70" pos:end="59:70">7</literal><operator pos:start="59:71" pos:end="59:71">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="61:19" pos:end="79:17">else <block pos:start="61:24" pos:end="79:17">{<block_content pos:start="63:21" pos:end="77:21">

                    <if_stmt pos:start="63:21" pos:end="77:21"><if pos:start="63:21" pos:end="67:21">if <condition pos:start="63:24" pos:end="63:40">(<expr pos:start="63:25" pos:end="63:39"><name pos:start="63:25" pos:end="63:34">alpha_code</name> <operator pos:start="63:36" pos:end="63:37">==</operator> <literal type="number" pos:start="63:39" pos:end="63:39">6</literal></expr>)</condition> <block pos:start="63:42" pos:end="67:21">{<block_content pos:start="65:25" pos:end="65:34">

                        <expr_stmt pos:start="65:25" pos:end="65:34"><expr pos:start="65:25" pos:end="65:33"><name pos:start="65:25" pos:end="65:29">alpha</name> <operator pos:start="65:31" pos:end="65:31">=</operator> <literal type="number" pos:start="65:33" pos:end="65:33">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="67:23" pos:end="71:21">else if <condition pos:start="67:31" pos:end="67:47">(<expr pos:start="67:32" pos:end="67:46"><name pos:start="67:32" pos:end="67:41">alpha_code</name> <operator pos:start="67:43" pos:end="67:44">==</operator> <literal type="number" pos:start="67:46" pos:end="67:46">7</literal></expr>)</condition> <block pos:start="67:49" pos:end="71:21">{<block_content pos:start="69:25" pos:end="69:36">

                        <expr_stmt pos:start="69:25" pos:end="69:36"><expr pos:start="69:25" pos:end="69:35"><name pos:start="69:25" pos:end="69:29">alpha</name> <operator pos:start="69:31" pos:end="69:31">=</operator> <literal type="number" pos:start="69:33" pos:end="69:35">255</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="71:23" pos:end="77:21">else <block pos:start="71:28" pos:end="77:21">{<block_content pos:start="73:25" pos:end="75:76">

                        <expr_stmt pos:start="73:25" pos:end="75:76"><expr pos:start="73:25" pos:end="75:75"><name pos:start="73:25" pos:end="73:29">alpha</name> <operator pos:start="73:31" pos:end="73:31">=</operator> <operator pos:start="73:33" pos:end="73:33">(</operator><name pos:start="73:34" pos:end="73:40">uint8_t</name><operator pos:start="73:41" pos:end="73:41">)</operator> <operator pos:start="73:43" pos:end="73:43">(</operator><operator pos:start="73:44" pos:end="73:44">(</operator><operator pos:start="73:45" pos:end="73:45">(</operator><literal type="number" pos:start="73:46" pos:end="73:48">6</literal> <operator pos:start="73:48" pos:end="73:48">-</operator> <name pos:start="73:50" pos:end="73:59">alpha_code</name><operator pos:start="73:60" pos:end="73:60">)</operator> <operator pos:start="73:62" pos:end="73:62">*</operator> <name pos:start="73:64" pos:end="73:69">alpha0</name> <operator pos:start="73:71" pos:end="73:71">+</operator>

                                            <operator pos:start="75:45" pos:end="75:45">(</operator><name pos:start="75:46" pos:end="75:55">alpha_code</name> <operator pos:start="75:57" pos:end="75:57">-</operator> <literal type="number" pos:start="75:59" pos:end="75:59">1</literal><operator pos:start="75:60" pos:end="75:60">)</operator> <operator pos:start="75:62" pos:end="75:62">*</operator> <name pos:start="75:64" pos:end="75:69">alpha1</name><operator pos:start="75:70" pos:end="75:70">)</operator> <operator pos:start="75:72" pos:end="75:72">/</operator> <literal type="number" pos:start="75:74" pos:end="75:74">5</literal><operator pos:start="75:75" pos:end="75:75">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:53"><expr pos:start="83:13" pos:end="83:52"><name pos:start="83:13" pos:end="83:17">pixel</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:36"><name pos:start="83:21" pos:end="83:26">colors</name><index pos:start="83:27" pos:end="83:36">[<expr pos:start="83:28" pos:end="83:35"><name pos:start="83:28" pos:end="83:31">code</name> <operator pos:start="83:33" pos:end="83:33">&amp;</operator> <literal type="number" pos:start="83:35" pos:end="83:35">3</literal></expr>]</index></name> <operator pos:start="83:38" pos:end="83:38">|</operator> <operator pos:start="83:40" pos:end="83:40">(</operator><name pos:start="83:41" pos:end="83:45">alpha</name> <operator pos:start="83:47" pos:end="83:48">&lt;&lt;</operator> <literal type="number" pos:start="83:50" pos:end="83:51">24</literal><operator pos:start="83:52" pos:end="83:52">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:23"><expr pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:16">code</name> <operator pos:start="85:18" pos:end="85:20">&gt;&gt;=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:40"><expr pos:start="87:13" pos:end="87:39"><call pos:start="87:13" pos:end="87:39"><name pos:start="87:13" pos:end="87:19">AV_WL32</name><argument_list pos:start="87:20" pos:end="87:39">(<argument pos:start="87:21" pos:end="87:31"><expr pos:start="87:21" pos:end="87:31"><name pos:start="87:21" pos:end="87:23">dst</name> <operator pos:start="87:25" pos:end="87:25">+</operator> <name pos:start="87:27" pos:end="87:27">x</name> <operator pos:start="87:29" pos:end="87:29">*</operator> <literal type="number" pos:start="87:31" pos:end="87:31">4</literal></expr></argument>, <argument pos:start="87:34" pos:end="87:38"><expr pos:start="87:34" pos:end="87:38"><name pos:start="87:34" pos:end="87:38">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="91:9" pos:end="91:22"><expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:11">dst</name> <operator pos:start="91:13" pos:end="91:14">+=</operator> <name pos:start="91:16" pos:end="91:21">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
