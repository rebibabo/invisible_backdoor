<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7612.c" pos:tabs="8"><function pos:start="1:1" pos:end="24:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">host_signal_handler</name><parameter_list pos:start="1:32" pos:end="2:42">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:47">host_signum</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:58">siginfo_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">info</name></decl></parameter>,
                                <parameter pos:start="2:33" pos:end="2:41"><decl pos:start="2:33" pos:end="2:41"><type pos:start="2:33" pos:end="2:41"><name pos:start="2:33" pos:end="2:36">void</name> <modifier pos:start="2:38" pos:end="2:38">*</modifier></type><name pos:start="2:39" pos:end="2:41">puc</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="24:1">{<block_content pos:start="4:5" pos:end="23:5">
    <decl_stmt pos:start="4:5" pos:end="4:44"><decl pos:start="4:5" pos:end="4:43"><type pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:16">CPUArchState</name> <modifier pos:start="4:18" pos:end="4:18">*</modifier></type><name pos:start="4:19" pos:end="4:21">env</name> <init pos:start="4:23" pos:end="4:43">= <expr pos:start="4:25" pos:end="4:43"><name pos:start="4:25" pos:end="4:43"><name pos:start="4:25" pos:end="4:34">thread_cpu</name><operator pos:start="4:35" pos:end="4:36">-&gt;</operator><name pos:start="4:37" pos:end="4:43">env_ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">sig</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:27"><decl pos:start="6:5" pos:end="6:26"><type pos:start="6:5" pos:end="6:20"><name pos:start="6:5" pos:end="6:20">target_siginfo_t</name></type> <name pos:start="6:22" pos:end="6:26">tinfo</name></decl>;</decl_stmt>
    <comment type="block" pos:start="7:5" pos:end="8:39">/* the CPU emulator uses some host signals to detect exceptions,
       we forward to it some signals */</comment>
    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="10:29">(<expr pos:start="9:9" pos:end="10:28"><operator pos:start="9:9" pos:end="9:9">(</operator><name pos:start="9:10" pos:end="9:20">host_signum</name> <operator pos:start="9:22" pos:end="9:23">==</operator> <name pos:start="9:25" pos:end="9:31">SIGSEGV</name> <operator pos:start="9:33" pos:end="9:34">||</operator> <name pos:start="9:36" pos:end="9:46">host_signum</name> <operator pos:start="9:48" pos:end="9:49">==</operator> <name pos:start="9:51" pos:end="9:56">SIGBUS</name><operator pos:start="9:57" pos:end="9:57">)</operator>
        <operator pos:start="10:9" pos:end="10:10">&amp;&amp;</operator> <name pos:start="10:12" pos:end="10:24"><name pos:start="10:12" pos:end="10:15">info</name><operator pos:start="10:16" pos:end="10:17">-&gt;</operator><name pos:start="10:18" pos:end="10:24">si_code</name></name> <operator pos:start="10:26" pos:end="10:26">&gt;</operator> <literal type="number" pos:start="10:28" pos:end="10:28">0</literal></expr>)</condition> <block pos:start="10:31" pos:end="13:5">{<block_content pos:start="11:9" pos:end="12:19">
        <if_stmt pos:start="11:9" pos:end="12:19"><if pos:start="11:9" pos:end="12:19">if <condition pos:start="11:12" pos:end="11:55">(<expr pos:start="11:13" pos:end="11:54"><call pos:start="11:13" pos:end="11:54"><name pos:start="11:13" pos:end="11:30">cpu_signal_handler</name><argument_list pos:start="11:31" pos:end="11:54">(<argument pos:start="11:32" pos:end="11:42"><expr pos:start="11:32" pos:end="11:42"><name pos:start="11:32" pos:end="11:42">host_signum</name></expr></argument>, <argument pos:start="11:45" pos:end="11:48"><expr pos:start="11:45" pos:end="11:48"><name pos:start="11:45" pos:end="11:48">info</name></expr></argument>, <argument pos:start="11:51" pos:end="11:53"><expr pos:start="11:51" pos:end="11:53"><name pos:start="11:51" pos:end="11:53">puc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="12:13" pos:end="12:19"><block_content pos:start="12:13" pos:end="12:19">
            <return pos:start="12:13" pos:end="12:19">return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="14:5" pos:end="14:34">/* get target signal number */</comment>
    <expr_stmt pos:start="15:5" pos:end="15:45"><expr pos:start="15:5" pos:end="15:44"><name pos:start="15:5" pos:end="15:7">sig</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:44"><name pos:start="15:11" pos:end="15:31">host_to_target_signal</name><argument_list pos:start="15:32" pos:end="15:44">(<argument pos:start="15:33" pos:end="15:43"><expr pos:start="15:33" pos:end="15:43"><name pos:start="15:33" pos:end="15:43">host_signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="17:15"><if pos:start="16:5" pos:end="17:15">if <condition pos:start="16:8" pos:end="16:37">(<expr pos:start="16:9" pos:end="16:36"><name pos:start="16:9" pos:end="16:24"><name pos:start="16:9" pos:end="16:11">sig</name> <argument_list type="generic" pos:start="16:13" pos:end="16:24">&lt; <argument pos:start="16:15" pos:end="16:22"><expr pos:start="16:15" pos:end="16:22"><literal type="number" pos:start="16:15" pos:end="16:15">1</literal> <operator pos:start="16:17" pos:end="16:18">||</operator> <name pos:start="16:20" pos:end="16:22">sig</name></expr></argument> &gt;</argument_list></name> <name pos:start="16:26" pos:end="16:36">TARGET_NSIG</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">
        <return pos:start="17:9" pos:end="17:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:50"><expr pos:start="18:5" pos:end="18:49"><call pos:start="18:5" pos:end="18:49"><name pos:start="18:5" pos:end="18:26">trace_user_host_signal</name><argument_list pos:start="18:27" pos:end="18:49">(<argument pos:start="18:28" pos:end="18:30"><expr pos:start="18:28" pos:end="18:30"><name pos:start="18:28" pos:end="18:30">env</name></expr></argument>, <argument pos:start="18:33" pos:end="18:43"><expr pos:start="18:33" pos:end="18:43"><name pos:start="18:33" pos:end="18:43">host_signum</name></expr></argument>, <argument pos:start="18:46" pos:end="18:48"><expr pos:start="18:46" pos:end="18:48"><name pos:start="18:46" pos:end="18:48">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><call pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:33">host_to_target_siginfo_noswap</name><argument_list pos:start="19:34" pos:end="19:47">(<argument pos:start="19:35" pos:end="19:40"><expr pos:start="19:35" pos:end="19:40"><operator pos:start="19:35" pos:end="19:35">&amp;</operator><name pos:start="19:36" pos:end="19:40">tinfo</name></expr></argument>, <argument pos:start="19:43" pos:end="19:46"><expr pos:start="19:43" pos:end="19:46"><name pos:start="19:43" pos:end="19:46">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="20:5" pos:end="23:5"><if pos:start="20:5" pos:end="23:5">if <condition pos:start="20:8" pos:end="20:44">(<expr pos:start="20:9" pos:end="20:43"><call pos:start="20:9" pos:end="20:38"><name pos:start="20:9" pos:end="20:20">queue_signal</name><argument_list pos:start="20:21" pos:end="20:38">(<argument pos:start="20:22" pos:end="20:24"><expr pos:start="20:22" pos:end="20:24"><name pos:start="20:22" pos:end="20:24">env</name></expr></argument>, <argument pos:start="20:27" pos:end="20:29"><expr pos:start="20:27" pos:end="20:29"><name pos:start="20:27" pos:end="20:29">sig</name></expr></argument>, <argument pos:start="20:32" pos:end="20:37"><expr pos:start="20:32" pos:end="20:37"><operator pos:start="20:32" pos:end="20:32">&amp;</operator><name pos:start="20:33" pos:end="20:37">tinfo</name></expr></argument>)</argument_list></call> <operator pos:start="20:40" pos:end="20:41">==</operator> <literal type="number" pos:start="20:43" pos:end="20:43">1</literal></expr>)</condition> <block pos:start="20:46" pos:end="23:5">{<block_content pos:start="22:9" pos:end="22:29">
        <comment type="block" pos:start="21:9" pos:end="21:59">/* interrupt the virtual CPU as soon as possible */</comment>
        <expr_stmt pos:start="22:9" pos:end="22:29"><expr pos:start="22:9" pos:end="22:28"><call pos:start="22:9" pos:end="22:28"><name pos:start="22:9" pos:end="22:16">cpu_exit</name><argument_list pos:start="22:17" pos:end="22:28">(<argument pos:start="22:18" pos:end="22:27"><expr pos:start="22:18" pos:end="22:27"><name pos:start="22:18" pos:end="22:27">thread_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></unit>
