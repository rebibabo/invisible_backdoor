<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26861.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">tcg_out_qemu_ld_slow_path</name><parameter_list pos:start="1:38" pos:end="1:73">(<parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:48">TCGContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><name pos:start="1:54" pos:end="1:69">TCGLabelQemuLdst</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:72">l</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:40">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">TCGMemOp</name></type> <name pos:start="5:14" pos:end="5:16">opc</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:20">l</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:25">opc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">TCGReg</name></type> <name pos:start="7:12" pos:end="7:19">data_reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier><modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:23">label_ptr</name> <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><operator pos:start="9:27" pos:end="9:27">&amp;</operator><name pos:start="9:28" pos:end="9:42"><name pos:start="9:28" pos:end="9:28">l</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:39">label_ptr</name><index pos:start="9:40" pos:end="9:42">[<expr pos:start="9:41" pos:end="9:41"><literal type="number" pos:start="9:41" pos:end="9:41">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:31">/* resolve label address */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:75"><expr pos:start="15:5" pos:end="15:74"><operator pos:start="15:5" pos:end="15:5">*</operator><operator pos:start="15:6" pos:end="15:6">(</operator><name pos:start="15:7" pos:end="15:14">uint32_t</name> <operator pos:start="15:16" pos:end="15:16">*</operator><operator pos:start="15:17" pos:end="15:17">)</operator><name pos:start="15:18" pos:end="15:29"><name pos:start="15:18" pos:end="15:26">label_ptr</name><index pos:start="15:27" pos:end="15:29">[<expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr>]</index></name> <operator pos:start="15:31" pos:end="15:31">=</operator> <operator pos:start="15:33" pos:end="15:33">(</operator><name pos:start="15:34" pos:end="15:41">uint32_t</name><operator pos:start="15:42" pos:end="15:42">)</operator><operator pos:start="15:43" pos:end="15:43">(</operator><name pos:start="15:44" pos:end="15:54"><name pos:start="15:44" pos:end="15:44">s</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:54">code_ptr</name></name> <operator pos:start="15:56" pos:end="15:56">-</operator> <name pos:start="15:58" pos:end="15:69"><name pos:start="15:58" pos:end="15:66">label_ptr</name><index pos:start="15:67" pos:end="15:69">[<expr pos:start="15:68" pos:end="15:68"><literal type="number" pos:start="15:68" pos:end="15:68">0</literal></expr>]</index></name> <operator pos:start="15:71" pos:end="15:71">-</operator> <literal type="number" pos:start="15:73" pos:end="15:73">4</literal><operator pos:start="15:74" pos:end="15:74">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:47">(<expr pos:start="17:9" pos:end="17:46"><name pos:start="17:9" pos:end="17:24">TARGET_LONG_BITS</name> <operator pos:start="17:26" pos:end="17:26">&gt;</operator> <name pos:start="17:28" pos:end="17:46">TCG_TARGET_REG_BITS</name></expr>)</condition> <block pos:start="17:49" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:79">

        <expr_stmt pos:start="19:9" pos:end="19:79"><expr pos:start="19:9" pos:end="19:78"><operator pos:start="19:9" pos:end="19:9">*</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:18">uint32_t</name> <operator pos:start="19:20" pos:end="19:20">*</operator><operator pos:start="19:21" pos:end="19:21">)</operator><name pos:start="19:22" pos:end="19:33"><name pos:start="19:22" pos:end="19:30">label_ptr</name><index pos:start="19:31" pos:end="19:33">[<expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">1</literal></expr>]</index></name> <operator pos:start="19:35" pos:end="19:35">=</operator> <operator pos:start="19:37" pos:end="19:37">(</operator><name pos:start="19:38" pos:end="19:45">uint32_t</name><operator pos:start="19:46" pos:end="19:46">)</operator><operator pos:start="19:47" pos:end="19:47">(</operator><name pos:start="19:48" pos:end="19:58"><name pos:start="19:48" pos:end="19:48">s</name><operator pos:start="19:49" pos:end="19:50">-&gt;</operator><name pos:start="19:51" pos:end="19:58">code_ptr</name></name> <operator pos:start="19:60" pos:end="19:60">-</operator> <name pos:start="19:62" pos:end="19:73"><name pos:start="19:62" pos:end="19:70">label_ptr</name><index pos:start="19:71" pos:end="19:73">[<expr pos:start="19:72" pos:end="19:72"><literal type="number" pos:start="19:72" pos:end="19:72">1</literal></expr>]</index></name> <operator pos:start="19:75" pos:end="19:75">-</operator> <literal type="number" pos:start="19:77" pos:end="19:77">4</literal><operator pos:start="19:78" pos:end="19:78">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="75:5"><if pos:start="25:5" pos:end="61:5">if <condition pos:start="25:8" pos:end="25:34">(<expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:27">TCG_TARGET_REG_BITS</name> <operator pos:start="25:29" pos:end="25:30">==</operator> <literal type="number" pos:start="25:32" pos:end="25:33">32</literal></expr>)</condition> <block pos:start="25:36" pos:end="61:5">{<block_content pos:start="27:9" pos:end="59:76">

        <decl_stmt pos:start="27:9" pos:end="27:20"><decl pos:start="27:9" pos:end="27:19"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:15">ofs</name> <init pos:start="27:17" pos:end="27:19">= <expr pos:start="27:19" pos:end="27:19"><literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:65"><expr pos:start="31:9" pos:end="31:64"><call pos:start="31:9" pos:end="31:64"><name pos:start="31:9" pos:end="31:18">tcg_out_st</name><argument_list pos:start="31:19" pos:end="31:64">(<argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><name pos:start="31:20" pos:end="31:20">s</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:45"><expr pos:start="31:37" pos:end="31:45"><name pos:start="31:37" pos:end="31:45">TCG_AREG0</name></expr></argument>, <argument pos:start="31:48" pos:end="31:58"><expr pos:start="31:48" pos:end="31:58"><name pos:start="31:48" pos:end="31:58">TCG_REG_ESP</name></expr></argument>, <argument pos:start="31:61" pos:end="31:63"><expr pos:start="31:61" pos:end="31:63"><name pos:start="31:61" pos:end="31:63">ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:17"><expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:11">ofs</name> <operator pos:start="33:13" pos:end="33:14">+=</operator> <literal type="number" pos:start="33:16" pos:end="33:16">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:69"><expr pos:start="37:9" pos:end="37:68"><call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:18">tcg_out_st</name><argument_list pos:start="37:19" pos:end="37:68">(<argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><name pos:start="37:20" pos:end="37:20">s</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="37:37" pos:end="37:49"><expr pos:start="37:37" pos:end="37:49"><name pos:start="37:37" pos:end="37:49"><name pos:start="37:37" pos:end="37:37">l</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:49">addrlo_reg</name></name></expr></argument>, <argument pos:start="37:52" pos:end="37:62"><expr pos:start="37:52" pos:end="37:62"><name pos:start="37:52" pos:end="37:62">TCG_REG_ESP</name></expr></argument>, <argument pos:start="37:65" pos:end="37:67"><expr pos:start="37:65" pos:end="37:67"><name pos:start="37:65" pos:end="37:67">ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:17"><expr pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:11">ofs</name> <operator pos:start="39:13" pos:end="39:14">+=</operator> <literal type="number" pos:start="39:16" pos:end="39:16">4</literal></expr>;</expr_stmt>



        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:35">(<expr pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:28">TARGET_LONG_BITS</name> <operator pos:start="43:30" pos:end="43:31">==</operator> <literal type="number" pos:start="43:33" pos:end="43:34">64</literal></expr>)</condition> <block pos:start="43:37" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:21">

            <expr_stmt pos:start="45:13" pos:end="45:73"><expr pos:start="45:13" pos:end="45:72"><call pos:start="45:13" pos:end="45:72"><name pos:start="45:13" pos:end="45:22">tcg_out_st</name><argument_list pos:start="45:23" pos:end="45:72">(<argument pos:start="45:24" pos:end="45:24"><expr pos:start="45:24" pos:end="45:24"><name pos:start="45:24" pos:end="45:24">s</name></expr></argument>, <argument pos:start="45:27" pos:end="45:38"><expr pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:38">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="45:41" pos:end="45:53"><expr pos:start="45:41" pos:end="45:53"><name pos:start="45:41" pos:end="45:53"><name pos:start="45:41" pos:end="45:41">l</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:53">addrhi_reg</name></name></expr></argument>, <argument pos:start="45:56" pos:end="45:66"><expr pos:start="45:56" pos:end="45:66"><name pos:start="45:56" pos:end="45:66">TCG_REG_ESP</name></expr></argument>, <argument pos:start="45:69" pos:end="45:71"><expr pos:start="45:69" pos:end="45:71"><name pos:start="45:69" pos:end="45:71">ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:21"><expr pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:15">ofs</name> <operator pos:start="47:17" pos:end="47:18">+=</operator> <literal type="number" pos:start="47:20" pos:end="47:20">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:69"><expr pos:start="53:9" pos:end="53:68"><call pos:start="53:9" pos:end="53:68"><name pos:start="53:9" pos:end="53:19">tcg_out_sti</name><argument_list pos:start="53:20" pos:end="53:68">(<argument pos:start="53:21" pos:end="53:21"><expr pos:start="53:21" pos:end="53:21"><name pos:start="53:21" pos:end="53:21">s</name></expr></argument>, <argument pos:start="53:24" pos:end="53:35"><expr pos:start="53:24" pos:end="53:35"><name pos:start="53:24" pos:end="53:35">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="53:38" pos:end="53:48"><expr pos:start="53:38" pos:end="53:48"><name pos:start="53:38" pos:end="53:48">TCG_REG_ESP</name></expr></argument>, <argument pos:start="53:51" pos:end="53:53"><expr pos:start="53:51" pos:end="53:53"><name pos:start="53:51" pos:end="53:53">ofs</name></expr></argument>, <argument pos:start="53:56" pos:end="53:67"><expr pos:start="53:56" pos:end="53:67"><name pos:start="53:56" pos:end="53:67"><name pos:start="53:56" pos:end="53:56">l</name><operator pos:start="53:57" pos:end="53:58">-&gt;</operator><name pos:start="53:59" pos:end="53:67">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:17"><expr pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:11">ofs</name> <operator pos:start="55:13" pos:end="55:14">+=</operator> <literal type="number" pos:start="55:16" pos:end="55:16">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:76"><expr pos:start="59:9" pos:end="59:75"><call pos:start="59:9" pos:end="59:75"><name pos:start="59:9" pos:end="59:19">tcg_out_sti</name><argument_list pos:start="59:20" pos:end="59:75">(<argument pos:start="59:21" pos:end="59:21"><expr pos:start="59:21" pos:end="59:21"><name pos:start="59:21" pos:end="59:21">s</name></expr></argument>, <argument pos:start="59:24" pos:end="59:35"><expr pos:start="59:24" pos:end="59:35"><name pos:start="59:24" pos:end="59:35">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="59:38" pos:end="59:48"><expr pos:start="59:38" pos:end="59:48"><name pos:start="59:38" pos:end="59:48">TCG_REG_ESP</name></expr></argument>, <argument pos:start="59:51" pos:end="59:53"><expr pos:start="59:51" pos:end="59:53"><name pos:start="59:51" pos:end="59:53">ofs</name></expr></argument>, <argument pos:start="59:56" pos:end="59:74"><expr pos:start="59:56" pos:end="59:74"><operator pos:start="59:56" pos:end="59:56">(</operator><name pos:start="59:57" pos:end="59:65">uintptr_t</name><operator pos:start="59:66" pos:end="59:66">)</operator><name pos:start="59:67" pos:end="59:74"><name pos:start="59:67" pos:end="59:67">l</name><operator pos:start="59:68" pos:end="59:69">-&gt;</operator><name pos:start="59:70" pos:end="59:74">raddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="75:5">else <block pos:start="61:12" pos:end="75:5">{<block_content pos:start="63:9" pos:end="73:42">

        <expr_stmt pos:start="63:9" pos:end="63:78"><expr pos:start="63:9" pos:end="63:77"><call pos:start="63:9" pos:end="63:77"><name pos:start="63:9" pos:end="63:19">tcg_out_mov</name><argument_list pos:start="63:20" pos:end="63:77">(<argument pos:start="63:21" pos:end="63:21"><expr pos:start="63:21" pos:end="63:21"><name pos:start="63:21" pos:end="63:21">s</name></expr></argument>, <argument pos:start="63:24" pos:end="63:35"><expr pos:start="63:24" pos:end="63:35"><name pos:start="63:24" pos:end="63:35">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="63:38" pos:end="63:65"><expr pos:start="63:38" pos:end="63:65"><name pos:start="63:38" pos:end="63:65"><name pos:start="63:38" pos:end="63:62">tcg_target_call_iarg_regs</name><index pos:start="63:63" pos:end="63:65">[<expr pos:start="63:64" pos:end="63:64"><literal type="number" pos:start="63:64" pos:end="63:64">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:68" pos:end="63:76"><expr pos:start="63:68" pos:end="63:76"><name pos:start="63:68" pos:end="63:76">TCG_AREG0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:65">/* The second argument is already loaded with addrlo.  */</comment>

        <expr_stmt pos:start="67:9" pos:end="69:35"><expr pos:start="67:9" pos:end="69:34"><call pos:start="67:9" pos:end="69:34"><name pos:start="67:9" pos:end="67:20">tcg_out_movi</name><argument_list pos:start="67:21" pos:end="69:34">(<argument pos:start="67:22" pos:end="67:22"><expr pos:start="67:22" pos:end="67:22"><name pos:start="67:22" pos:end="67:22">s</name></expr></argument>, <argument pos:start="67:25" pos:end="67:36"><expr pos:start="67:25" pos:end="67:36"><name pos:start="67:25" pos:end="67:36">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="67:39" pos:end="67:66"><expr pos:start="67:39" pos:end="67:66"><name pos:start="67:39" pos:end="67:66"><name pos:start="67:39" pos:end="67:63">tcg_target_call_iarg_regs</name><index pos:start="67:64" pos:end="67:66">[<expr pos:start="67:65" pos:end="67:65"><literal type="number" pos:start="67:65" pos:end="67:65">2</literal></expr>]</index></name></expr></argument>,

                     <argument pos:start="69:22" pos:end="69:33"><expr pos:start="69:22" pos:end="69:33"><name pos:start="69:22" pos:end="69:33"><name pos:start="69:22" pos:end="69:22">l</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:33">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:42"><expr pos:start="71:9" pos:end="73:41"><call pos:start="71:9" pos:end="73:41"><name pos:start="71:9" pos:end="71:20">tcg_out_movi</name><argument_list pos:start="71:21" pos:end="73:41">(<argument pos:start="71:22" pos:end="71:22"><expr pos:start="71:22" pos:end="71:22"><name pos:start="71:22" pos:end="71:22">s</name></expr></argument>, <argument pos:start="71:25" pos:end="71:36"><expr pos:start="71:25" pos:end="71:36"><name pos:start="71:25" pos:end="71:36">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="71:39" pos:end="71:66"><expr pos:start="71:39" pos:end="71:66"><name pos:start="71:39" pos:end="71:66"><name pos:start="71:39" pos:end="71:63">tcg_target_call_iarg_regs</name><index pos:start="71:64" pos:end="71:66">[<expr pos:start="71:65" pos:end="71:65"><literal type="number" pos:start="71:65" pos:end="71:65">3</literal></expr>]</index></name></expr></argument>,

                     <argument pos:start="73:22" pos:end="73:40"><expr pos:start="73:22" pos:end="73:40"><operator pos:start="73:22" pos:end="73:22">(</operator><name pos:start="73:23" pos:end="73:31">uintptr_t</name><operator pos:start="73:32" pos:end="73:32">)</operator><name pos:start="73:33" pos:end="73:40"><name pos:start="73:33" pos:end="73:33">l</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:40">raddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:65"><expr pos:start="79:5" pos:end="79:64"><call pos:start="79:5" pos:end="79:64"><name pos:start="79:5" pos:end="79:17">tcg_out_calli</name><argument_list pos:start="79:18" pos:end="79:64">(<argument pos:start="79:19" pos:end="79:19"><expr pos:start="79:19" pos:end="79:19"><name pos:start="79:19" pos:end="79:19">s</name></expr></argument>, <argument pos:start="79:22" pos:end="79:63"><expr pos:start="79:22" pos:end="79:63"><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:31">uintptr_t</name><operator pos:start="79:32" pos:end="79:32">)</operator><name pos:start="79:33" pos:end="79:63"><name pos:start="79:33" pos:end="79:47">qemu_ld_helpers</name><index pos:start="79:48" pos:end="79:63">[<expr pos:start="79:49" pos:end="79:62"><name pos:start="79:49" pos:end="79:51">opc</name> <operator pos:start="79:53" pos:end="79:53">&amp;</operator> <operator pos:start="79:55" pos:end="79:55">~</operator><name pos:start="79:56" pos:end="79:62">MO_SIGN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:29"><expr pos:start="83:5" pos:end="83:28"><name pos:start="83:5" pos:end="83:12">data_reg</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <name pos:start="83:16" pos:end="83:28"><name pos:start="83:16" pos:end="83:16">l</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:28">datalo_reg</name></name></expr>;</expr_stmt>

    <switch pos:start="85:5" pos:end="149:5">switch <condition pos:start="85:12" pos:end="85:27">(<expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:15">opc</name> <operator pos:start="85:17" pos:end="85:17">&amp;</operator> <name pos:start="85:19" pos:end="85:26">MO_SSIZE</name></expr>)</condition> <block pos:start="85:29" pos:end="149:5">{<block_content pos:start="87:5" pos:end="147:20">

    <case pos:start="87:5" pos:end="87:15">case <expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:14">MO_SB</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:56"><expr pos:start="89:9" pos:end="89:55"><call pos:start="89:9" pos:end="89:55"><name pos:start="89:9" pos:end="89:21">tcg_out_ext8s</name><argument_list pos:start="89:22" pos:end="89:55">(<argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><name pos:start="89:23" pos:end="89:23">s</name></expr></argument>, <argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33">data_reg</name></expr></argument>, <argument pos:start="89:36" pos:end="89:46"><expr pos:start="89:36" pos:end="89:46"><name pos:start="89:36" pos:end="89:46">TCG_REG_EAX</name></expr></argument>, <argument pos:start="89:49" pos:end="89:54"><expr pos:start="89:49" pos:end="89:54"><name pos:start="89:49" pos:end="89:54">P_REXW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:15">case <expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:14">MO_SW</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:57"><expr pos:start="95:9" pos:end="95:56"><call pos:start="95:9" pos:end="95:56"><name pos:start="95:9" pos:end="95:22">tcg_out_ext16s</name><argument_list pos:start="95:23" pos:end="95:56">(<argument pos:start="95:24" pos:end="95:24"><expr pos:start="95:24" pos:end="95:24"><name pos:start="95:24" pos:end="95:24">s</name></expr></argument>, <argument pos:start="95:27" pos:end="95:34"><expr pos:start="95:27" pos:end="95:34"><name pos:start="95:27" pos:end="95:34">data_reg</name></expr></argument>, <argument pos:start="95:37" pos:end="95:47"><expr pos:start="95:37" pos:end="95:47"><name pos:start="95:37" pos:end="95:47">TCG_REG_EAX</name></expr></argument>, <argument pos:start="95:50" pos:end="95:55"><expr pos:start="95:50" pos:end="95:55"><name pos:start="95:50" pos:end="95:55">P_REXW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="100:0">break;</break>

<cpp:if pos:start="99:1" pos:end="99:29">#<cpp:directive pos:start="99:2" pos:end="99:3">if</cpp:directive> <expr pos:start="99:5" pos:end="99:29"><name pos:start="99:5" pos:end="99:23">TCG_TARGET_REG_BITS</name> <operator pos:start="99:25" pos:end="99:26">==</operator> <literal type="number" pos:start="99:28" pos:end="99:29">64</literal></expr></cpp:if>

    <case pos:start="101:5" pos:end="101:15">case <expr pos:start="101:10" pos:end="101:14"><name pos:start="101:10" pos:end="101:14">MO_SL</name></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:49"><expr pos:start="103:9" pos:end="103:48"><call pos:start="103:9" pos:end="103:48"><name pos:start="103:9" pos:end="103:22">tcg_out_ext32s</name><argument_list pos:start="103:23" pos:end="103:48">(<argument pos:start="103:24" pos:end="103:24"><expr pos:start="103:24" pos:end="103:24"><name pos:start="103:24" pos:end="103:24">s</name></expr></argument>, <argument pos:start="103:27" pos:end="103:34"><expr pos:start="103:27" pos:end="103:34"><name pos:start="103:27" pos:end="103:34">data_reg</name></expr></argument>, <argument pos:start="103:37" pos:end="103:47"><expr pos:start="103:37" pos:end="103:47"><name pos:start="103:37" pos:end="103:47">TCG_REG_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="108:0">break;</break>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

    <case pos:start="109:5" pos:end="109:15">case <expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:14">MO_UB</name></expr>:</case>

    <case pos:start="111:5" pos:end="111:15">case <expr pos:start="111:10" pos:end="111:14"><name pos:start="111:10" pos:end="111:14">MO_UW</name></expr>:</case>

        <comment type="block" pos:start="113:9" pos:end="113:75">/* Note that the helpers have zero-extended to tcg_target_long.  */</comment>

    <case pos:start="115:5" pos:end="115:15">case <expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:14">MO_UL</name></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:60"><expr pos:start="117:9" pos:end="117:59"><call pos:start="117:9" pos:end="117:59"><name pos:start="117:9" pos:end="117:19">tcg_out_mov</name><argument_list pos:start="117:20" pos:end="117:59">(<argument pos:start="117:21" pos:end="117:21"><expr pos:start="117:21" pos:end="117:21"><name pos:start="117:21" pos:end="117:21">s</name></expr></argument>, <argument pos:start="117:24" pos:end="117:35"><expr pos:start="117:24" pos:end="117:35"><name pos:start="117:24" pos:end="117:35">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="117:38" pos:end="117:45"><expr pos:start="117:38" pos:end="117:45"><name pos:start="117:38" pos:end="117:45">data_reg</name></expr></argument>, <argument pos:start="117:48" pos:end="117:58"><expr pos:start="117:48" pos:end="117:58"><name pos:start="117:48" pos:end="117:58">TCG_REG_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:14">case <expr pos:start="121:10" pos:end="121:13"><name pos:start="121:10" pos:end="121:13">MO_Q</name></expr>:</case>

        <if_stmt pos:start="123:9" pos:end="141:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:38">(<expr pos:start="123:13" pos:end="123:37"><name pos:start="123:13" pos:end="123:31">TCG_TARGET_REG_BITS</name> <operator pos:start="123:33" pos:end="123:34">==</operator> <literal type="number" pos:start="123:36" pos:end="123:37">64</literal></expr>)</condition> <block pos:start="123:40" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:64">

            <expr_stmt pos:start="125:13" pos:end="125:64"><expr pos:start="125:13" pos:end="125:63"><call pos:start="125:13" pos:end="125:63"><name pos:start="125:13" pos:end="125:23">tcg_out_mov</name><argument_list pos:start="125:24" pos:end="125:63">(<argument pos:start="125:25" pos:end="125:25"><expr pos:start="125:25" pos:end="125:25"><name pos:start="125:25" pos:end="125:25">s</name></expr></argument>, <argument pos:start="125:28" pos:end="125:39"><expr pos:start="125:28" pos:end="125:39"><name pos:start="125:28" pos:end="125:39">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="125:42" pos:end="125:49"><expr pos:start="125:42" pos:end="125:49"><name pos:start="125:42" pos:end="125:49">data_reg</name></expr></argument>, <argument pos:start="125:52" pos:end="125:62"><expr pos:start="125:52" pos:end="125:62"><name pos:start="125:52" pos:end="125:62">TCG_REG_RAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="135:9">else if <condition pos:start="127:19" pos:end="127:43">(<expr pos:start="127:20" pos:end="127:42"><name pos:start="127:20" pos:end="127:27">data_reg</name> <operator pos:start="127:29" pos:end="127:30">==</operator> <name pos:start="127:32" pos:end="127:42">TCG_REG_EDX</name></expr>)</condition> <block pos:start="127:45" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:69">

            <comment type="block" pos:start="129:13" pos:end="129:33">/* xchg %edx, %eax */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:67"><expr pos:start="131:13" pos:end="131:66"><call pos:start="131:13" pos:end="131:66"><name pos:start="131:13" pos:end="131:23">tcg_out_opc</name><argument_list pos:start="131:24" pos:end="131:66">(<argument pos:start="131:25" pos:end="131:25"><expr pos:start="131:25" pos:end="131:25"><name pos:start="131:25" pos:end="131:25">s</name></expr></argument>, <argument pos:start="131:28" pos:end="131:56"><expr pos:start="131:28" pos:end="131:56"><name pos:start="131:28" pos:end="131:42">OPC_XCHG_ax_r32</name> <operator pos:start="131:44" pos:end="131:44">+</operator> <name pos:start="131:46" pos:end="131:56">TCG_REG_EDX</name></expr></argument>, <argument pos:start="131:59" pos:end="131:59"><expr pos:start="131:59" pos:end="131:59"><literal type="number" pos:start="131:59" pos:end="131:59">0</literal></expr></argument>, <argument pos:start="131:62" pos:end="131:62"><expr pos:start="131:62" pos:end="131:62"><literal type="number" pos:start="131:62" pos:end="131:62">0</literal></expr></argument>, <argument pos:start="131:65" pos:end="131:65"><expr pos:start="131:65" pos:end="131:65"><literal type="number" pos:start="131:65" pos:end="131:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:69"><expr pos:start="133:13" pos:end="133:68"><call pos:start="133:13" pos:end="133:68"><name pos:start="133:13" pos:end="133:23">tcg_out_mov</name><argument_list pos:start="133:24" pos:end="133:68">(<argument pos:start="133:25" pos:end="133:25"><expr pos:start="133:25" pos:end="133:25"><name pos:start="133:25" pos:end="133:25">s</name></expr></argument>, <argument pos:start="133:28" pos:end="133:39"><expr pos:start="133:28" pos:end="133:39"><name pos:start="133:28" pos:end="133:39">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="133:42" pos:end="133:54"><expr pos:start="133:42" pos:end="133:54"><name pos:start="133:42" pos:end="133:54"><name pos:start="133:42" pos:end="133:42">l</name><operator pos:start="133:43" pos:end="133:44">-&gt;</operator><name pos:start="133:45" pos:end="133:54">datahi_reg</name></name></expr></argument>, <argument pos:start="133:57" pos:end="133:67"><expr pos:start="133:57" pos:end="133:67"><name pos:start="133:57" pos:end="133:67">TCG_REG_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="141:9">else <block pos:start="135:16" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:69">

            <expr_stmt pos:start="137:13" pos:end="137:64"><expr pos:start="137:13" pos:end="137:63"><call pos:start="137:13" pos:end="137:63"><name pos:start="137:13" pos:end="137:23">tcg_out_mov</name><argument_list pos:start="137:24" pos:end="137:63">(<argument pos:start="137:25" pos:end="137:25"><expr pos:start="137:25" pos:end="137:25"><name pos:start="137:25" pos:end="137:25">s</name></expr></argument>, <argument pos:start="137:28" pos:end="137:39"><expr pos:start="137:28" pos:end="137:39"><name pos:start="137:28" pos:end="137:39">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="137:42" pos:end="137:49"><expr pos:start="137:42" pos:end="137:49"><name pos:start="137:42" pos:end="137:49">data_reg</name></expr></argument>, <argument pos:start="137:52" pos:end="137:62"><expr pos:start="137:52" pos:end="137:62"><name pos:start="137:52" pos:end="137:62">TCG_REG_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:69"><expr pos:start="139:13" pos:end="139:68"><call pos:start="139:13" pos:end="139:68"><name pos:start="139:13" pos:end="139:23">tcg_out_mov</name><argument_list pos:start="139:24" pos:end="139:68">(<argument pos:start="139:25" pos:end="139:25"><expr pos:start="139:25" pos:end="139:25"><name pos:start="139:25" pos:end="139:25">s</name></expr></argument>, <argument pos:start="139:28" pos:end="139:39"><expr pos:start="139:28" pos:end="139:39"><name pos:start="139:28" pos:end="139:39">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="139:42" pos:end="139:54"><expr pos:start="139:42" pos:end="139:54"><name pos:start="139:42" pos:end="139:54"><name pos:start="139:42" pos:end="139:42">l</name><operator pos:start="139:43" pos:end="139:44">-&gt;</operator><name pos:start="139:45" pos:end="139:54">datahi_reg</name></name></expr></argument>, <argument pos:start="139:57" pos:end="139:67"><expr pos:start="139:57" pos:end="139:67"><name pos:start="139:57" pos:end="139:67">TCG_REG_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <default pos:start="145:5" pos:end="145:12">default:</default>

        <expr_stmt pos:start="147:9" pos:end="147:20"><expr pos:start="147:9" pos:end="147:19"><call pos:start="147:9" pos:end="147:19"><name pos:start="147:9" pos:end="147:17">tcg_abort</name><argument_list pos:start="147:18" pos:end="147:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="153:5" pos:end="153:62">/* Jump to the code corresponding to next IR of qemu_st */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:40"><expr pos:start="155:5" pos:end="155:39"><call pos:start="155:5" pos:end="155:39"><name pos:start="155:5" pos:end="155:15">tcg_out_jmp</name><argument_list pos:start="155:16" pos:end="155:39">(<argument pos:start="155:17" pos:end="155:17"><expr pos:start="155:17" pos:end="155:17"><name pos:start="155:17" pos:end="155:17">s</name></expr></argument>, <argument pos:start="155:20" pos:end="155:38"><expr pos:start="155:20" pos:end="155:38"><operator pos:start="155:20" pos:end="155:20">(</operator><name pos:start="155:21" pos:end="155:29">uintptr_t</name><operator pos:start="155:30" pos:end="155:30">)</operator><name pos:start="155:31" pos:end="155:38"><name pos:start="155:31" pos:end="155:31">l</name><operator pos:start="155:32" pos:end="155:33">-&gt;</operator><name pos:start="155:34" pos:end="155:38">raddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
