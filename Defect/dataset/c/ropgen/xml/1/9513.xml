<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9513.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">qemu_irq</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:19">mpic_init</name> <parameter_list pos:start="1:21" pos:end="3:58">(<parameter pos:start="1:22" pos:end="1:44"><decl pos:start="1:22" pos:end="1:44"><type pos:start="1:22" pos:end="1:44"><name pos:start="1:22" pos:end="1:39">target_phys_addr_t</name></type> <name pos:start="1:41" pos:end="1:44">base</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:57">nb_cpus</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">qemu_irq</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier><modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">irqs</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:57"><decl pos:start="3:42" pos:end="3:57"><type pos:start="3:42" pos:end="3:57"><name pos:start="3:42" pos:end="3:49">qemu_irq</name></type> <name pos:start="3:51" pos:end="3:57">irq_out</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:16">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">openpic_t</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">mpp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <struct pos:start="11:5" pos:end="37:6">struct <block pos:start="11:12" pos:end="21:5">{

        <decl_stmt pos:start="13:9" pos:end="13:40"><decl pos:start="13:9" pos:end="13:39"><type pos:start="13:9" pos:end="13:35"><name pos:start="13:9" pos:end="13:25">CPUReadMemoryFunc</name> <modifier pos:start="13:27" pos:end="13:27">*</modifier> <specifier pos:start="13:29" pos:end="13:33">const</specifier> <modifier pos:start="13:35" pos:end="13:35">*</modifier></type><name pos:start="13:36" pos:end="13:39">read</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:42"><decl pos:start="15:9" pos:end="15:41"><type pos:start="15:9" pos:end="15:36"><name pos:start="15:9" pos:end="15:26">CPUWriteMemoryFunc</name> <modifier pos:start="15:28" pos:end="15:28">*</modifier> <specifier pos:start="15:30" pos:end="15:34">const</specifier> <modifier pos:start="15:36" pos:end="15:36">*</modifier></type><name pos:start="15:37" pos:end="15:41">write</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:38"><decl pos:start="17:9" pos:end="17:37"><type pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:26">target_phys_addr_t</name></type> <name pos:start="17:28" pos:end="17:37">start_addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:24"><decl pos:start="19:9" pos:end="19:23"><type pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:18">ram_addr_t</name></type> <name pos:start="19:20" pos:end="19:23">size</name></decl>;</decl_stmt>

    }</block> <decl pos:start="21:7" pos:end="37:5">const <name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:16">list</name><index pos:start="21:17" pos:end="21:18">[]</index></name> <init pos:start="21:20" pos:end="37:5">= <expr pos:start="21:22" pos:end="37:5"><block pos:start="21:22" pos:end="37:5">{

        <expr pos:start="23:9" pos:end="23:78"><block pos:start="23:9" pos:end="23:78">{<expr pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:22">mpic_glb_read</name></expr>, <expr pos:start="23:25" pos:end="23:38"><name pos:start="23:25" pos:end="23:38">mpic_glb_write</name></expr>, <expr pos:start="23:41" pos:end="23:58"><name pos:start="23:41" pos:end="23:58">MPIC_GLB_REG_START</name></expr>, <expr pos:start="23:61" pos:end="23:77"><name pos:start="23:61" pos:end="23:77">MPIC_GLB_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="25:9" pos:end="25:78"><block pos:start="25:9" pos:end="25:78">{<expr pos:start="25:10" pos:end="25:22"><name pos:start="25:10" pos:end="25:22">mpic_tmr_read</name></expr>, <expr pos:start="25:25" pos:end="25:38"><name pos:start="25:25" pos:end="25:38">mpic_tmr_write</name></expr>, <expr pos:start="25:41" pos:end="25:58"><name pos:start="25:41" pos:end="25:58">MPIC_TMR_REG_START</name></expr>, <expr pos:start="25:61" pos:end="25:77"><name pos:start="25:61" pos:end="25:77">MPIC_TMR_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="27:9" pos:end="27:78"><block pos:start="27:9" pos:end="27:78">{<expr pos:start="27:10" pos:end="27:22"><name pos:start="27:10" pos:end="27:22">mpic_ext_read</name></expr>, <expr pos:start="27:25" pos:end="27:38"><name pos:start="27:25" pos:end="27:38">mpic_ext_write</name></expr>, <expr pos:start="27:41" pos:end="27:58"><name pos:start="27:41" pos:end="27:58">MPIC_EXT_REG_START</name></expr>, <expr pos:start="27:61" pos:end="27:77"><name pos:start="27:61" pos:end="27:77">MPIC_EXT_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="29:9" pos:end="29:78"><block pos:start="29:9" pos:end="29:78">{<expr pos:start="29:10" pos:end="29:22"><name pos:start="29:10" pos:end="29:22">mpic_int_read</name></expr>, <expr pos:start="29:25" pos:end="29:38"><name pos:start="29:25" pos:end="29:38">mpic_int_write</name></expr>, <expr pos:start="29:41" pos:end="29:58"><name pos:start="29:41" pos:end="29:58">MPIC_INT_REG_START</name></expr>, <expr pos:start="29:61" pos:end="29:77"><name pos:start="29:61" pos:end="29:77">MPIC_INT_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="31:9" pos:end="31:78"><block pos:start="31:9" pos:end="31:78">{<expr pos:start="31:10" pos:end="31:22"><name pos:start="31:10" pos:end="31:22">mpic_msg_read</name></expr>, <expr pos:start="31:25" pos:end="31:38"><name pos:start="31:25" pos:end="31:38">mpic_msg_write</name></expr>, <expr pos:start="31:41" pos:end="31:58"><name pos:start="31:41" pos:end="31:58">MPIC_MSG_REG_START</name></expr>, <expr pos:start="31:61" pos:end="31:77"><name pos:start="31:61" pos:end="31:77">MPIC_MSG_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="33:9" pos:end="33:78"><block pos:start="33:9" pos:end="33:78">{<expr pos:start="33:10" pos:end="33:22"><name pos:start="33:10" pos:end="33:22">mpic_msi_read</name></expr>, <expr pos:start="33:25" pos:end="33:38"><name pos:start="33:25" pos:end="33:38">mpic_msi_write</name></expr>, <expr pos:start="33:41" pos:end="33:58"><name pos:start="33:41" pos:end="33:58">MPIC_MSI_REG_START</name></expr>, <expr pos:start="33:61" pos:end="33:77"><name pos:start="33:61" pos:end="33:77">MPIC_MSI_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="35:9" pos:end="35:78"><block pos:start="35:9" pos:end="35:78">{<expr pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:22">mpic_cpu_read</name></expr>, <expr pos:start="35:25" pos:end="35:38"><name pos:start="35:25" pos:end="35:38">mpic_cpu_write</name></expr>, <expr pos:start="35:41" pos:end="35:58"><name pos:start="35:41" pos:end="35:58">MPIC_CPU_REG_START</name></expr>, <expr pos:start="35:61" pos:end="35:77"><name pos:start="35:61" pos:end="35:77">MPIC_CPU_REG_SIZE</name></expr>}</block></expr>,

    }</block></expr></init></decl>;</struct>



    <comment type="block" pos:start="41:5" pos:end="41:49">/* XXX: for now, only one CPU is supported */</comment>

    <if_stmt pos:start="43:5" pos:end="45:20"><if pos:start="43:5" pos:end="45:20">if <condition pos:start="43:8" pos:end="43:21">(<expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:15">nb_cpus</name> <operator pos:start="43:17" pos:end="43:18">!=</operator> <literal type="number" pos:start="43:20" pos:end="43:20">1</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:20"><block_content pos:start="45:9" pos:end="45:20">

        <return pos:start="45:9" pos:end="45:20">return <expr pos:start="45:16" pos:end="45:19"><name pos:start="45:16" pos:end="45:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:7">mpp</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:38"><name pos:start="49:11" pos:end="49:19">g_malloc0</name><argument_list pos:start="49:20" pos:end="49:38">(<argument pos:start="49:21" pos:end="49:37"><expr pos:start="49:21" pos:end="49:37"><sizeof pos:start="49:21" pos:end="49:37">sizeof<argument_list pos:start="49:27" pos:end="49:37">(<argument pos:start="49:28" pos:end="49:36"><expr pos:start="49:28" pos:end="49:36"><name pos:start="49:28" pos:end="49:36">openpic_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="53:5" pos:end="73:5">for <control pos:start="53:9" pos:end="53:54">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:49"><expr pos:start="53:17" pos:end="53:48"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <sizeof pos:start="53:21" pos:end="53:32">sizeof<argument_list pos:start="53:27" pos:end="53:32">(<argument pos:start="53:28" pos:end="53:31"><expr pos:start="53:28" pos:end="53:31"><name pos:start="53:28" pos:end="53:31">list</name></expr></argument>)</argument_list></sizeof><operator pos:start="53:33" pos:end="53:33">/</operator><sizeof pos:start="53:34" pos:end="53:48">sizeof<argument_list pos:start="53:40" pos:end="53:48">(<argument pos:start="53:41" pos:end="53:47"><expr pos:start="53:41" pos:end="53:47"><name pos:start="53:41" pos:end="53:47"><name pos:start="53:41" pos:end="53:44">list</name><index pos:start="53:45" pos:end="53:47">[<expr pos:start="53:46" pos:end="53:46"><literal type="number" pos:start="53:46" pos:end="53:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr pos:start="53:51" pos:end="53:53"><expr pos:start="53:51" pos:end="53:53"><name pos:start="53:51" pos:end="53:51">i</name><operator pos:start="53:52" pos:end="53:53">++</operator></expr></incr>)</control> <block pos:start="53:56" pos:end="73:5">{<block_content pos:start="55:9" pos:end="71:62">

        <decl_stmt pos:start="55:9" pos:end="55:22"><decl pos:start="55:9" pos:end="55:21"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:21">mem_index</name></decl>;</decl_stmt>



        <expr_stmt pos:start="59:9" pos:end="61:62"><expr pos:start="59:9" pos:end="61:61"><name pos:start="59:9" pos:end="59:17">mem_index</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="61:61"><name pos:start="59:21" pos:end="59:42">cpu_register_io_memory</name><argument_list pos:start="59:43" pos:end="61:61">(<argument pos:start="59:44" pos:end="59:55"><expr pos:start="59:44" pos:end="59:55"><name pos:start="59:44" pos:end="59:50"><name pos:start="59:44" pos:end="59:47">list</name><index pos:start="59:48" pos:end="59:50">[<expr pos:start="59:49" pos:end="59:49"><name pos:start="59:49" pos:end="59:49">i</name></expr>]</index></name><operator pos:start="59:51" pos:end="59:51">.</operator><name pos:start="59:52" pos:end="59:55">read</name></expr></argument>, <argument pos:start="59:58" pos:end="59:70"><expr pos:start="59:58" pos:end="59:70"><name pos:start="59:58" pos:end="59:64"><name pos:start="59:58" pos:end="59:61">list</name><index pos:start="59:62" pos:end="59:64">[<expr pos:start="59:63" pos:end="59:63"><name pos:start="59:63" pos:end="59:63">i</name></expr>]</index></name><operator pos:start="59:65" pos:end="59:65">.</operator><name pos:start="59:66" pos:end="59:70">write</name></expr></argument>, <argument pos:start="59:73" pos:end="59:75"><expr pos:start="59:73" pos:end="59:75"><name pos:start="59:73" pos:end="59:75">mpp</name></expr></argument>,

                                           <argument pos:start="61:44" pos:end="61:60"><expr pos:start="61:44" pos:end="61:60"><name pos:start="61:44" pos:end="61:60">DEVICE_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:26">(<expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:21">mem_index</name> <operator pos:start="63:23" pos:end="63:23">&lt;</operator> <literal type="number" pos:start="63:25" pos:end="63:25">0</literal></expr>)</condition> <block pos:start="63:28" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:22">

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">free</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:62"><expr pos:start="69:9" pos:end="71:61"><call pos:start="69:9" pos:end="71:61"><name pos:start="69:9" pos:end="69:36">cpu_register_physical_memory</name><argument_list pos:start="69:37" pos:end="71:61">(<argument pos:start="69:38" pos:end="69:62"><expr pos:start="69:38" pos:end="69:62"><name pos:start="69:38" pos:end="69:41">base</name> <operator pos:start="69:43" pos:end="69:43">+</operator> <name pos:start="69:45" pos:end="69:51"><name pos:start="69:45" pos:end="69:48">list</name><index pos:start="69:49" pos:end="69:51">[<expr pos:start="69:50" pos:end="69:50"><name pos:start="69:50" pos:end="69:50">i</name></expr>]</index></name><operator pos:start="69:52" pos:end="69:52">.</operator><name pos:start="69:53" pos:end="69:62">start_addr</name></expr></argument>,

                                     <argument pos:start="71:38" pos:end="71:49"><expr pos:start="71:38" pos:end="71:49"><name pos:start="71:38" pos:end="71:44"><name pos:start="71:38" pos:end="71:41">list</name><index pos:start="71:42" pos:end="71:44">[<expr pos:start="71:43" pos:end="71:43"><name pos:start="71:43" pos:end="71:43">i</name></expr>]</index></name><operator pos:start="71:45" pos:end="71:45">.</operator><name pos:start="71:46" pos:end="71:49">size</name></expr></argument>, <argument pos:start="71:52" pos:end="71:60"><expr pos:start="71:52" pos:end="71:60"><name pos:start="71:52" pos:end="71:60">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="77:5" pos:end="77:27"><expr pos:start="77:5" pos:end="77:26"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:7">mpp</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:16">nb_cpus</name></name> <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:26">nb_cpus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:32"><expr pos:start="79:5" pos:end="79:31"><name pos:start="79:5" pos:end="79:16"><name pos:start="79:5" pos:end="79:7">mpp</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:16">max_irq</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:31">MPIC_MAX_IRQ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:33"><expr pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:17"><name pos:start="81:5" pos:end="81:7">mpp</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:17">irq_ipi0</name></name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:32">MPIC_IPI_IRQ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:17"><name pos:start="83:5" pos:end="83:7">mpp</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:17">irq_tim0</name></name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:32">MPIC_TMR_IRQ</name></expr>;</expr_stmt>



    <for pos:start="87:5" pos:end="89:35">for <control pos:start="87:9" pos:end="87:33">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:28"><expr pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:27">nb_cpus</name></expr>;</condition> <incr pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><name pos:start="87:30" pos:end="87:30">i</name><operator pos:start="87:31" pos:end="87:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="89:9" pos:end="89:35"><block_content pos:start="89:9" pos:end="89:35">

        <expr_stmt pos:start="89:9" pos:end="89:35"><expr pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:11">mpp</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:16">dst</name><index pos:start="89:17" pos:end="89:19">[<expr pos:start="89:18" pos:end="89:18"><name pos:start="89:18" pos:end="89:18">i</name></expr>]</index></name><operator pos:start="89:20" pos:end="89:20">.</operator><name pos:start="89:21" pos:end="89:24">irqs</name> <operator pos:start="89:26" pos:end="89:26">=</operator> <name pos:start="89:28" pos:end="89:34"><name pos:start="89:28" pos:end="89:31">irqs</name><index pos:start="89:32" pos:end="89:34">[<expr pos:start="89:33" pos:end="89:33"><name pos:start="89:33" pos:end="89:33">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="91:5" pos:end="91:27"><expr pos:start="91:5" pos:end="91:26"><name pos:start="91:5" pos:end="91:16"><name pos:start="91:5" pos:end="91:7">mpp</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:16">irq_out</name></name> <operator pos:start="91:18" pos:end="91:18">=</operator> <name pos:start="91:20" pos:end="91:26">irq_out</name></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:36"><expr pos:start="95:5" pos:end="95:35"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:7">mpp</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:18">irq_raise</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:35">mpic_irq_raise</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:14"><name pos:start="97:5" pos:end="97:7">mpp</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:14">reset</name></name> <operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:27">mpic_reset</name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:73"><expr pos:start="101:5" pos:end="101:72"><call pos:start="101:5" pos:end="101:72"><name pos:start="101:5" pos:end="101:19">register_savevm</name><argument_list pos:start="101:20" pos:end="101:72">(<argument pos:start="101:21" pos:end="101:24"><expr pos:start="101:21" pos:end="101:24"><name pos:start="101:21" pos:end="101:24">NULL</name></expr></argument>, <argument pos:start="101:27" pos:end="101:32"><expr pos:start="101:27" pos:end="101:32"><literal type="string" pos:start="101:27" pos:end="101:32">"mpic"</literal></expr></argument>, <argument pos:start="101:35" pos:end="101:35"><expr pos:start="101:35" pos:end="101:35"><literal type="number" pos:start="101:35" pos:end="101:35">0</literal></expr></argument>, <argument pos:start="101:38" pos:end="101:38"><expr pos:start="101:38" pos:end="101:38"><literal type="number" pos:start="101:38" pos:end="101:38">2</literal></expr></argument>, <argument pos:start="101:41" pos:end="101:52"><expr pos:start="101:41" pos:end="101:52"><name pos:start="101:41" pos:end="101:52">openpic_save</name></expr></argument>, <argument pos:start="101:55" pos:end="101:66"><expr pos:start="101:55" pos:end="101:66"><name pos:start="101:55" pos:end="101:66">openpic_load</name></expr></argument>, <argument pos:start="101:69" pos:end="101:71"><expr pos:start="101:69" pos:end="101:71"><name pos:start="101:69" pos:end="101:71">mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><call pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:23">qemu_register_reset</name><argument_list pos:start="103:24" pos:end="103:40">(<argument pos:start="103:25" pos:end="103:34"><expr pos:start="103:25" pos:end="103:34"><name pos:start="103:25" pos:end="103:34">mpic_reset</name></expr></argument>, <argument pos:start="103:37" pos:end="103:39"><expr pos:start="103:37" pos:end="103:39"><name pos:start="103:37" pos:end="103:39">mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="107:5" pos:end="107:66">return <expr pos:start="107:12" pos:end="107:65"><call pos:start="107:12" pos:end="107:65"><name pos:start="107:12" pos:end="107:29">qemu_allocate_irqs</name><argument_list pos:start="107:30" pos:end="107:65">(<argument pos:start="107:31" pos:end="107:45"><expr pos:start="107:31" pos:end="107:45"><name pos:start="107:31" pos:end="107:45">openpic_set_irq</name></expr></argument>, <argument pos:start="107:48" pos:end="107:50"><expr pos:start="107:48" pos:end="107:50"><name pos:start="107:48" pos:end="107:50">mpp</name></expr></argument>, <argument pos:start="107:53" pos:end="107:64"><expr pos:start="107:53" pos:end="107:64"><name pos:start="107:53" pos:end="107:64"><name pos:start="107:53" pos:end="107:55">mpp</name><operator pos:start="107:56" pos:end="107:57">-&gt;</operator><name pos:start="107:58" pos:end="107:64">max_irq</name></name></expr></argument>)</argument_list></call></expr>;</return>



<label pos:start="111:1" pos:end="111:5"><name pos:start="111:1" pos:end="111:4">free</name>:</label>

    <expr_stmt pos:start="113:5" pos:end="113:16"><expr pos:start="113:5" pos:end="113:15"><call pos:start="113:5" pos:end="113:15"><name pos:start="113:5" pos:end="113:10">g_free</name><argument_list pos:start="113:11" pos:end="113:15">(<argument pos:start="113:12" pos:end="113:14"><expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:16">return <expr pos:start="115:12" pos:end="115:15"><name pos:start="115:12" pos:end="115:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
