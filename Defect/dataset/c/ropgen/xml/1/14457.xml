<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14457.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">pc_dimm_plug</name><parameter_list pos:start="1:25" pos:end="3:56">(<parameter pos:start="1:26" pos:end="1:52"><decl pos:start="1:26" pos:end="1:52"><type pos:start="1:26" pos:end="1:52"><name pos:start="1:26" pos:end="1:39">HotplugHandler</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">hotplug_dev</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:41"><decl pos:start="3:26" pos:end="3:41"><type pos:start="3:26" pos:end="3:41"><name pos:start="3:26" pos:end="3:36">DeviceState</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:41">dev</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:48">Error</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier><modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:37">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">HotplugHandlerClass</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:28">hhc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:51"><decl pos:start="11:5" pos:end="11:50"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">PCMachineState</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:24">pcms</name> <init pos:start="11:26" pos:end="11:50">= <expr pos:start="11:28" pos:end="11:50"><call pos:start="11:28" pos:end="11:50"><name pos:start="11:28" pos:end="11:37">PC_MACHINE</name><argument_list pos:start="11:38" pos:end="11:50">(<argument pos:start="11:39" pos:end="11:49"><expr pos:start="11:39" pos:end="11:49"><name pos:start="11:39" pos:end="11:49">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:54"><decl pos:start="13:5" pos:end="13:53"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">PCMachineClass</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:24">pcmc</name> <init pos:start="13:26" pos:end="13:53">= <expr pos:start="13:28" pos:end="13:53"><call pos:start="13:28" pos:end="13:53"><name pos:start="13:28" pos:end="13:47">PC_MACHINE_GET_CLASS</name><argument_list pos:start="13:48" pos:end="13:53">(<argument pos:start="13:49" pos:end="13:52"><expr pos:start="13:49" pos:end="13:52"><name pos:start="13:49" pos:end="13:52">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">PCDIMMDevice</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:22">dimm</name> <init pos:start="15:24" pos:end="15:37">= <expr pos:start="15:26" pos:end="15:37"><call pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:32">PC_DIMM</name><argument_list pos:start="15:33" pos:end="15:37">(<argument pos:start="15:34" pos:end="15:36"><expr pos:start="15:34" pos:end="15:36"><name pos:start="15:34" pos:end="15:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:21">PCDIMMDeviceClass</name> <modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:26">ddc</name> <init pos:start="17:28" pos:end="17:52">= <expr pos:start="17:30" pos:end="17:52"><call pos:start="17:30" pos:end="17:52"><name pos:start="17:30" pos:end="17:46">PC_DIMM_GET_CLASS</name><argument_list pos:start="17:47" pos:end="17:52">(<argument pos:start="17:48" pos:end="17:51"><expr pos:start="17:48" pos:end="17:51"><name pos:start="17:48" pos:end="17:51">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:52"><decl pos:start="19:5" pos:end="19:51"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:20">mr</name> <init pos:start="19:22" pos:end="19:51">= <expr pos:start="19:24" pos:end="19:51"><call pos:start="19:24" pos:end="19:51"><name pos:start="19:24" pos:end="19:45"><name pos:start="19:24" pos:end="19:26">ddc</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:45">get_memory_region</name></name><argument_list pos:start="19:46" pos:end="19:51">(<argument pos:start="19:47" pos:end="19:50"><expr pos:start="19:47" pos:end="19:50"><name pos:start="19:47" pos:end="19:50">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:38"><decl pos:start="21:5" pos:end="21:37"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:18">align</name> <init pos:start="21:20" pos:end="21:37">= <expr pos:start="21:22" pos:end="21:37"><name pos:start="21:22" pos:end="21:37">TARGET_PAGE_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:67"><decl pos:start="23:5" pos:end="23:66"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:18">is_nvdimm</name> <init pos:start="23:20" pos:end="23:66">= <expr pos:start="23:22" pos:end="23:66"><call pos:start="23:22" pos:end="23:66"><name pos:start="23:22" pos:end="23:40">object_dynamic_cast</name><argument_list pos:start="23:41" pos:end="23:66">(<argument pos:start="23:42" pos:end="23:52"><expr pos:start="23:42" pos:end="23:52"><call pos:start="23:42" pos:end="23:52"><name pos:start="23:42" pos:end="23:47">OBJECT</name><argument_list pos:start="23:48" pos:end="23:52">(<argument pos:start="23:49" pos:end="23:51"><expr pos:start="23:49" pos:end="23:51"><name pos:start="23:49" pos:end="23:51">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="23:55" pos:end="23:65"><expr pos:start="23:55" pos:end="23:65"><name pos:start="23:55" pos:end="23:65">TYPE_NVDIMM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:70">(<expr pos:start="27:9" pos:end="27:69"><call pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:35">memory_region_get_alignment</name><argument_list pos:start="27:36" pos:end="27:39">(<argument pos:start="27:37" pos:end="27:38"><expr pos:start="27:37" pos:end="27:38"><name pos:start="27:37" pos:end="27:38">mr</name></expr></argument>)</argument_list></call> <operator pos:start="27:41" pos:end="27:42">&amp;&amp;</operator> <name pos:start="27:44" pos:end="27:69"><name pos:start="27:44" pos:end="27:47">pcmc</name><operator pos:start="27:48" pos:end="27:49">-&gt;</operator><name pos:start="27:50" pos:end="27:69">enforce_aligned_dimm</name></name></expr>)</condition> <block pos:start="27:72" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:48">

        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:13">align</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:47"><name pos:start="29:17" pos:end="29:43">memory_region_get_alignment</name><argument_list pos:start="29:44" pos:end="29:47">(<argument pos:start="29:45" pos:end="29:46"><expr pos:start="29:45" pos:end="29:46"><name pos:start="29:45" pos:end="29:46">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:24">(<expr pos:start="35:9" pos:end="35:23"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:13">pcms</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:23">acpi_dev</name></name></expr>)</condition> <block pos:start="35:26" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:17">

        <expr_stmt pos:start="37:9" pos:end="39:73"><expr pos:start="37:9" pos:end="39:72"><call pos:start="37:9" pos:end="39:72"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="39:72">(<argument pos:start="37:20" pos:end="37:29"><expr pos:start="37:20" pos:end="37:29"><operator pos:start="37:20" pos:end="37:20">&amp;</operator><name pos:start="37:21" pos:end="37:29">local_err</name></expr></argument>,

                   <argument pos:start="39:20" pos:end="39:71"><expr pos:start="39:20" pos:end="39:71"><literal type="string" pos:start="39:20" pos:end="39:71">"memory hotplug is not enabled: missing acpi device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:57">(<expr pos:start="47:9" pos:end="47:56"><name pos:start="47:9" pos:end="47:17">is_nvdimm</name> <operator pos:start="47:19" pos:end="47:20">&amp;&amp;</operator> <operator pos:start="47:22" pos:end="47:22">!</operator><name pos:start="47:23" pos:end="47:56"><name pos:start="47:23" pos:end="47:26">pcms</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:45">acpi_nvdimm_state</name><operator pos:start="47:46" pos:end="47:46">.</operator><name pos:start="47:47" pos:end="47:56">is_enabled</name></name></expr>)</condition> <block pos:start="47:59" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:17">

        <expr_stmt pos:start="49:9" pos:end="51:70"><expr pos:start="49:9" pos:end="51:69"><call pos:start="49:9" pos:end="51:69"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="51:69">(<argument pos:start="49:20" pos:end="49:29"><expr pos:start="49:20" pos:end="49:29"><operator pos:start="49:20" pos:end="49:20">&amp;</operator><name pos:start="49:21" pos:end="49:29">local_err</name></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:68"><expr pos:start="51:20" pos:end="51:68"><literal type="string" pos:start="51:20" pos:end="51:68">"nvdimm is not enabled: missing 'nvdimm' in '-M'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:17">goto <name pos:start="53:14" pos:end="53:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:75"><expr pos:start="59:5" pos:end="59:74"><call pos:start="59:5" pos:end="59:74"><name pos:start="59:5" pos:end="59:23">pc_dimm_memory_plug</name><argument_list pos:start="59:24" pos:end="59:74">(<argument pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><name pos:start="59:25" pos:end="59:27">dev</name></expr></argument>, <argument pos:start="59:30" pos:end="59:50"><expr pos:start="59:30" pos:end="59:50"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:50"><name pos:start="59:31" pos:end="59:34">pcms</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:50">hotplug_memory</name></name></expr></argument>, <argument pos:start="59:53" pos:end="59:54"><expr pos:start="59:53" pos:end="59:54"><name pos:start="59:53" pos:end="59:54">mr</name></expr></argument>, <argument pos:start="59:57" pos:end="59:61"><expr pos:start="59:57" pos:end="59:61"><name pos:start="59:57" pos:end="59:61">align</name></expr></argument>, <argument pos:start="59:64" pos:end="59:73"><expr pos:start="59:64" pos:end="59:73"><operator pos:start="59:64" pos:end="59:64">&amp;</operator><name pos:start="59:65" pos:end="59:73">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:18">(<expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:17">local_err</name></expr>)</condition> <block pos:start="61:20" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:17">

        <goto pos:start="63:9" pos:end="63:17">goto <name pos:start="63:14" pos:end="63:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:18">(<expr pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:17">is_nvdimm</name></expr>)</condition> <block pos:start="69:20" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:46">

        <expr_stmt pos:start="71:9" pos:end="71:46"><expr pos:start="71:9" pos:end="71:45"><call pos:start="71:9" pos:end="71:45"><name pos:start="71:9" pos:end="71:19">nvdimm_plug</name><argument_list pos:start="71:20" pos:end="71:45">(<argument pos:start="71:21" pos:end="71:44"><expr pos:start="71:21" pos:end="71:44"><operator pos:start="71:21" pos:end="71:21">&amp;</operator><name pos:start="71:22" pos:end="71:44"><name pos:start="71:22" pos:end="71:25">pcms</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:44">acpi_nvdimm_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:52"><expr pos:start="77:5" pos:end="77:51"><name pos:start="77:5" pos:end="77:7">hhc</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:51"><name pos:start="77:11" pos:end="77:35">HOTPLUG_HANDLER_GET_CLASS</name><argument_list pos:start="77:36" pos:end="77:51">(<argument pos:start="77:37" pos:end="77:50"><expr pos:start="77:37" pos:end="77:50"><name pos:start="77:37" pos:end="77:50"><name pos:start="77:37" pos:end="77:40">pcms</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:50">acpi_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:66"><expr pos:start="79:5" pos:end="79:65"><call pos:start="79:5" pos:end="79:65"><name pos:start="79:5" pos:end="79:13"><name pos:start="79:5" pos:end="79:7">hhc</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:13">plug</name></name><argument_list pos:start="79:14" pos:end="79:65">(<argument pos:start="79:15" pos:end="79:45"><expr pos:start="79:15" pos:end="79:45"><call pos:start="79:15" pos:end="79:45"><name pos:start="79:15" pos:end="79:29">HOTPLUG_HANDLER</name><argument_list pos:start="79:30" pos:end="79:45">(<argument pos:start="79:31" pos:end="79:44"><expr pos:start="79:31" pos:end="79:44"><name pos:start="79:31" pos:end="79:44"><name pos:start="79:31" pos:end="79:34">pcms</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:44">acpi_dev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:48" pos:end="79:50"><expr pos:start="79:48" pos:end="79:50"><name pos:start="79:48" pos:end="79:50">dev</name></expr></argument>, <argument pos:start="79:53" pos:end="79:64"><expr pos:start="79:53" pos:end="79:64"><operator pos:start="79:53" pos:end="79:53">&amp;</operator><name pos:start="79:54" pos:end="79:64">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="81:1" pos:end="81:4"><name pos:start="81:1" pos:end="81:3">out</name>:</label>

    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><call pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:19">error_propagate</name><argument_list pos:start="83:20" pos:end="83:36">(<argument pos:start="83:21" pos:end="83:24"><expr pos:start="83:21" pos:end="83:24"><name pos:start="83:21" pos:end="83:24">errp</name></expr></argument>, <argument pos:start="83:27" pos:end="83:35"><expr pos:start="83:27" pos:end="83:35"><name pos:start="83:27" pos:end="83:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
