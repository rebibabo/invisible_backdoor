<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15317.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:45">qio_channel_websock_handshake_read</name><parameter_list pos:start="1:46" pos:end="3:59">(<parameter pos:start="1:47" pos:end="1:68"><decl pos:start="1:47" pos:end="1:68"><type pos:start="1:47" pos:end="1:68"><name pos:start="1:47" pos:end="1:63">QIOChannelWebsock</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">ioc</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:51">Error</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier><modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:13">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:23">handshake_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="13:53">/* Typical HTTP headers from novnc are 512 bytes, so limiting

     * total header size to 4096 is easily enough. */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:45"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:15">want</name> <init pos:start="15:17" pos:end="15:45">= <expr pos:start="15:19" pos:end="15:45"><literal type="number" pos:start="15:19" pos:end="15:24">4096</literal> <operator pos:start="15:24" pos:end="15:24">-</operator> <name pos:start="15:26" pos:end="15:45"><name pos:start="15:26" pos:end="15:28">ioc</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:38">encinput</name><operator pos:start="15:39" pos:end="15:39">.</operator><name pos:start="15:40" pos:end="15:45">offset</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><call pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:18">buffer_reserve</name><argument_list pos:start="17:19" pos:end="17:40">(<argument pos:start="17:20" pos:end="17:33"><expr pos:start="17:20" pos:end="17:33"><operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:33"><name pos:start="17:21" pos:end="17:23">ioc</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:33">encinput</name></name></expr></argument>, <argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:75"><expr pos:start="19:5" pos:end="21:74"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="21:74"><name pos:start="19:11" pos:end="19:26">qio_channel_read</name><argument_list pos:start="19:27" pos:end="21:74">(<argument pos:start="19:28" pos:end="19:38"><expr pos:start="19:28" pos:end="19:38"><name pos:start="19:28" pos:end="19:38"><name pos:start="19:28" pos:end="19:30">ioc</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:38">master</name></name></expr></argument>,

                           <argument pos:start="21:28" pos:end="21:61"><expr pos:start="21:28" pos:end="21:61"><operator pos:start="21:28" pos:end="21:28">(</operator><name pos:start="21:29" pos:end="21:32">char</name> <operator pos:start="21:34" pos:end="21:34">*</operator><operator pos:start="21:35" pos:end="21:35">)</operator><call pos:start="21:36" pos:end="21:61"><name pos:start="21:36" pos:end="21:45">buffer_end</name><argument_list pos:start="21:46" pos:end="21:61">(<argument pos:start="21:47" pos:end="21:60"><expr pos:start="21:47" pos:end="21:60"><operator pos:start="21:47" pos:end="21:47">&amp;</operator><name pos:start="21:48" pos:end="21:60"><name pos:start="21:48" pos:end="21:50">ioc</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:60">encinput</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:64" pos:end="21:67"><expr pos:start="21:64" pos:end="21:67"><name pos:start="21:64" pos:end="21:67">want</name></expr></argument>, <argument pos:start="21:70" pos:end="21:73"><expr pos:start="21:70" pos:end="21:73"><name pos:start="21:70" pos:end="21:73">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:7">ioc</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:17">encinput</name><operator pos:start="29:18" pos:end="29:18">.</operator><name pos:start="29:19" pos:end="29:24">offset</name></name> <operator pos:start="29:26" pos:end="29:27">+=</operator> <name pos:start="29:29" pos:end="29:31">ret</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="37:68"><expr pos:start="33:5" pos:end="37:67"><name pos:start="33:5" pos:end="33:17">handshake_end</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <call pos:start="33:21" pos:end="37:67"><name pos:start="33:21" pos:end="33:32">g_strstr_len</name><argument_list pos:start="33:33" pos:end="37:67">(<argument pos:start="33:34" pos:end="33:61"><expr pos:start="33:34" pos:end="33:61"><operator pos:start="33:34" pos:end="33:34">(</operator><name pos:start="33:35" pos:end="33:38">char</name> <operator pos:start="33:40" pos:end="33:40">*</operator><operator pos:start="33:41" pos:end="33:41">)</operator><name pos:start="33:42" pos:end="33:61"><name pos:start="33:42" pos:end="33:44">ioc</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:54">encinput</name><operator pos:start="33:55" pos:end="33:55">.</operator><name pos:start="33:56" pos:end="33:61">buffer</name></name></expr></argument>,

                                 <argument pos:start="35:34" pos:end="35:53"><expr pos:start="35:34" pos:end="35:53"><name pos:start="35:34" pos:end="35:53"><name pos:start="35:34" pos:end="35:36">ioc</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:46">encinput</name><operator pos:start="35:47" pos:end="35:47">.</operator><name pos:start="35:48" pos:end="35:53">offset</name></name></expr></argument>,

                                 <argument pos:start="37:34" pos:end="37:66"><expr pos:start="37:34" pos:end="37:66"><name pos:start="37:34" pos:end="37:66">QIO_CHANNEL_WEBSOCK_HANDSHAKE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="55:5"><if pos:start="39:5" pos:end="55:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:22">handshake_end</name></expr>)</condition> <block pos:start="39:25" pos:end="55:5">{<block_content pos:start="41:9" pos:end="53:9">

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:41">(<expr pos:start="41:13" pos:end="41:40"><name pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:15">ioc</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:25">encinput</name><operator pos:start="41:26" pos:end="41:26">.</operator><name pos:start="41:27" pos:end="41:32">offset</name></name> <operator pos:start="41:34" pos:end="41:35">&gt;=</operator> <literal type="number" pos:start="41:37" pos:end="41:40">4096</literal></expr>)</condition> <block pos:start="41:43" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:22">

            <expr_stmt pos:start="43:13" pos:end="45:71"><expr pos:start="43:13" pos:end="45:70"><call pos:start="43:13" pos:end="45:70"><name pos:start="43:13" pos:end="43:22">error_setg</name><argument_list pos:start="43:23" pos:end="45:70">(<argument pos:start="43:24" pos:end="43:27"><expr pos:start="43:24" pos:end="43:27"><name pos:start="43:24" pos:end="43:27">errp</name></expr></argument>,

                       <argument pos:start="45:24" pos:end="45:69"><expr pos:start="45:24" pos:end="45:69"><literal type="string" pos:start="45:24" pos:end="45:69">"End of headers not found in first 4096 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="53:9">else <block pos:start="49:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:21">

            <return pos:start="51:13" pos:end="51:21">return <expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">0</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><operator pos:start="57:5" pos:end="57:5">*</operator><name pos:start="57:6" pos:end="57:18">handshake_end</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="char" pos:start="57:22" pos:end="57:25">'\0'</literal></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="65:56">(<expr pos:start="61:9" pos:end="65:55"><call pos:start="61:9" pos:end="65:51"><name pos:start="61:9" pos:end="61:45">qio_channel_websock_handshake_process</name><argument_list pos:start="61:46" pos:end="65:51">(<argument pos:start="61:47" pos:end="61:49"><expr pos:start="61:47" pos:end="61:49"><name pos:start="61:47" pos:end="61:49">ioc</name></expr></argument>,

                                              <argument pos:start="63:47" pos:end="63:74"><expr pos:start="63:47" pos:end="63:74"><operator pos:start="63:47" pos:end="63:47">(</operator><name pos:start="63:48" pos:end="63:51">char</name> <operator pos:start="63:53" pos:end="63:53">*</operator><operator pos:start="63:54" pos:end="63:54">)</operator><name pos:start="63:55" pos:end="63:74"><name pos:start="63:55" pos:end="63:57">ioc</name><operator pos:start="63:58" pos:end="63:59">-&gt;</operator><name pos:start="63:60" pos:end="63:67">encinput</name><operator pos:start="63:68" pos:end="63:68">.</operator><name pos:start="63:69" pos:end="63:74">buffer</name></name></expr></argument>,

                                              <argument pos:start="65:47" pos:end="65:50"><expr pos:start="65:47" pos:end="65:50"><name pos:start="65:47" pos:end="65:50">errp</name></expr></argument>)</argument_list></call> <operator pos:start="65:53" pos:end="65:53">&lt;</operator> <literal type="number" pos:start="65:55" pos:end="65:55">0</literal></expr>)</condition> <block pos:start="65:58" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:18">

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="77:62"><expr pos:start="73:5" pos:end="77:61"><call pos:start="73:5" pos:end="77:61"><name pos:start="73:5" pos:end="73:18">buffer_advance</name><argument_list pos:start="73:19" pos:end="77:61">(<argument pos:start="73:20" pos:end="73:33"><expr pos:start="73:20" pos:end="73:33"><operator pos:start="73:20" pos:end="73:20">&amp;</operator><name pos:start="73:21" pos:end="73:33"><name pos:start="73:21" pos:end="73:23">ioc</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:33">encinput</name></name></expr></argument>,

                   <argument pos:start="75:20" pos:end="77:60"><expr pos:start="75:20" pos:end="77:60"><name pos:start="75:20" pos:end="75:32">handshake_end</name> <operator pos:start="75:34" pos:end="75:34">-</operator> <operator pos:start="75:36" pos:end="75:36">(</operator><name pos:start="75:37" pos:end="75:40">char</name> <operator pos:start="75:42" pos:end="75:42">*</operator><operator pos:start="75:43" pos:end="75:43">)</operator><name pos:start="75:44" pos:end="75:63"><name pos:start="75:44" pos:end="75:46">ioc</name><operator pos:start="75:47" pos:end="75:48">-&gt;</operator><name pos:start="75:49" pos:end="75:56">encinput</name><operator pos:start="75:57" pos:end="75:57">.</operator><name pos:start="75:58" pos:end="75:63">buffer</name></name> <operator pos:start="75:65" pos:end="75:65">+</operator>

                   <call pos:start="77:20" pos:end="77:60"><name pos:start="77:20" pos:end="77:25">strlen</name><argument_list pos:start="77:26" pos:end="77:60">(<argument pos:start="77:27" pos:end="77:59"><expr pos:start="77:27" pos:end="77:59"><name pos:start="77:27" pos:end="77:59">QIO_CHANNEL_WEBSOCK_HANDSHAKE_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
