<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22802.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">boot_sector_init</name><parameter_list pos:start="1:21" pos:end="1:39">(<parameter pos:start="1:22" pos:end="1:38"><decl pos:start="1:22" pos:end="1:38"><type pos:start="1:22" pos:end="1:33"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:38">fname</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">FILE</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">f</name> <init pos:start="5:13" pos:end="5:31">= <expr pos:start="5:15" pos:end="5:31"><call pos:start="5:15" pos:end="5:31"><name pos:start="5:15" pos:end="5:19">fopen</name><argument_list pos:start="5:20" pos:end="5:31">(<argument pos:start="5:21" pos:end="5:25"><expr pos:start="5:21" pos:end="5:25"><name pos:start="5:21" pos:end="5:25">fname</name></expr></argument>, <argument pos:start="5:28" pos:end="5:30"><expr pos:start="5:28" pos:end="5:30"><literal type="string" pos:start="5:28" pos:end="5:30">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:14">len</name> <init pos:start="7:16" pos:end="7:35">= <expr pos:start="7:18" pos:end="7:35"><sizeof pos:start="7:18" pos:end="7:35">sizeof <name pos:start="7:25" pos:end="7:35">boot_sector</name></sizeof></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:11">(<expr pos:start="11:9" pos:end="11:10"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:10">f</name></expr>)</condition> <block pos:start="11:13" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:17">

        <expr_stmt pos:start="13:9" pos:end="13:76"><expr pos:start="13:9" pos:end="13:75"><call pos:start="13:9" pos:end="13:75"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="13:75">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="13:50"><expr pos:start="13:25" pos:end="13:50"><literal type="string" pos:start="13:25" pos:end="13:50">"Couldn't open \"%s\": %s"</literal></expr></argument>, <argument pos:start="13:53" pos:end="13:57"><expr pos:start="13:53" pos:end="13:57"><name pos:start="13:53" pos:end="13:57">fname</name></expr></argument>, <argument pos:start="13:60" pos:end="13:74"><expr pos:start="13:60" pos:end="13:74"><call pos:start="13:60" pos:end="13:74"><name pos:start="13:60" pos:end="13:67">strerror</name><argument_list pos:start="13:68" pos:end="13:74">(<argument pos:start="13:69" pos:end="13:73"><expr pos:start="13:69" pos:end="13:73"><name pos:start="13:69" pos:end="13:73">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:75">/* For Open Firmware based system, we can use a Forth script instead */</comment>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:47">(<expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:14">strcmp</name><argument_list pos:start="23:15" pos:end="23:41">(<argument pos:start="23:16" pos:end="23:31"><expr pos:start="23:16" pos:end="23:31"><call pos:start="23:16" pos:end="23:31"><name pos:start="23:16" pos:end="23:29">qtest_get_arch</name><argument_list pos:start="23:30" pos:end="23:31">()</argument_list></call></expr></argument>, <argument pos:start="23:34" pos:end="23:40"><expr pos:start="23:34" pos:end="23:40"><literal type="string" pos:start="23:34" pos:end="23:40">"ppc64"</literal></expr></argument>)</argument_list></call> <operator pos:start="23:43" pos:end="23:44">==</operator> <literal type="number" pos:start="23:46" pos:end="23:46">0</literal></expr>)</condition> <block pos:start="23:49" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:77">

        <expr_stmt pos:start="25:9" pos:end="29:77"><expr pos:start="25:9" pos:end="29:76"><name pos:start="25:9" pos:end="25:11">len</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="29:76"><name pos:start="25:15" pos:end="25:21">sprintf</name><argument_list pos:start="25:22" pos:end="29:76">(<argument pos:start="25:23" pos:end="25:41"><expr pos:start="25:23" pos:end="25:41"><operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:27">char</name> <operator pos:start="25:29" pos:end="25:29">*</operator><operator pos:start="25:30" pos:end="25:30">)</operator><name pos:start="25:31" pos:end="25:41">boot_sector</name></expr></argument>, <argument pos:start="25:44" pos:end="25:79"><expr pos:start="25:44" pos:end="25:79"><literal type="string" pos:start="25:44" pos:end="25:79">"\\ Bootscript\n%x %x c! %x %x c!\n"</literal></expr></argument>,

                <argument pos:start="27:17" pos:end="27:30"><expr pos:start="27:17" pos:end="27:30"><call pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:19">LOW</name><argument_list pos:start="27:20" pos:end="27:30">(<argument pos:start="27:21" pos:end="27:29"><expr pos:start="27:21" pos:end="27:29"><name pos:start="27:21" pos:end="27:29">SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:33" pos:end="27:70"><expr pos:start="27:33" pos:end="27:70"><name pos:start="27:33" pos:end="27:51">BOOT_SECTOR_ADDRESS</name> <operator pos:start="27:53" pos:end="27:53">+</operator> <name pos:start="27:55" pos:end="27:70">SIGNATURE_OFFSET</name></expr></argument>,

                <argument pos:start="29:17" pos:end="29:31"><expr pos:start="29:17" pos:end="29:31"><call pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:20">HIGH</name><argument_list pos:start="29:21" pos:end="29:31">(<argument pos:start="29:22" pos:end="29:30"><expr pos:start="29:22" pos:end="29:30"><name pos:start="29:22" pos:end="29:30">SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="29:34" pos:end="29:75"><expr pos:start="29:34" pos:end="29:75"><name pos:start="29:34" pos:end="29:52">BOOT_SECTOR_ADDRESS</name> <operator pos:start="29:54" pos:end="29:54">+</operator> <name pos:start="29:56" pos:end="29:71">SIGNATURE_OFFSET</name> <operator pos:start="29:73" pos:end="29:73">+</operator> <literal type="number" pos:start="29:75" pos:end="29:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:10">fwrite</name><argument_list pos:start="35:11" pos:end="35:34">(<argument pos:start="35:12" pos:end="35:22"><expr pos:start="35:12" pos:end="35:22"><name pos:start="35:12" pos:end="35:22">boot_sector</name></expr></argument>, <argument pos:start="35:25" pos:end="35:25"><expr pos:start="35:25" pos:end="35:25"><literal type="number" pos:start="35:25" pos:end="35:25">1</literal></expr></argument>, <argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">len</name></expr></argument>, <argument pos:start="35:33" pos:end="35:33"><expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><call pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:10">fclose</name><argument_list pos:start="37:11" pos:end="37:13">(<argument pos:start="37:12" pos:end="37:12"><expr pos:start="37:12" pos:end="37:12"><name pos:start="37:12" pos:end="37:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
