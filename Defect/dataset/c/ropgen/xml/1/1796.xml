<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1796.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:30">dvdsub_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">DVDSubContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">ctx</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:14">data</name></decl>, <decl pos:start="7:17" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">cur</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:52">(<expr pos:start="11:9" pos:end="11:51"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:25"><name pos:start="11:10" pos:end="11:14">avctx</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:25">extradata</name></name> <operator pos:start="11:27" pos:end="11:28">||</operator> <operator pos:start="11:30" pos:end="11:30">!</operator><name pos:start="11:31" pos:end="11:51"><name pos:start="11:31" pos:end="11:35">avctx</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:51">extradata_size</name></name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:48"><expr pos:start="17:5" pos:end="17:47"><name pos:start="17:5" pos:end="17:8">data</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:47"><name pos:start="17:12" pos:end="17:20">av_malloc</name><argument_list pos:start="17:21" pos:end="17:47">(<argument pos:start="17:22" pos:end="17:46"><expr pos:start="17:22" pos:end="17:46"><name pos:start="17:22" pos:end="17:42"><name pos:start="17:22" pos:end="17:26">avctx</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:42">extradata_size</name></name> <operator pos:start="17:44" pos:end="17:44">+</operator> <literal type="number" pos:start="17:46" pos:end="17:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:31"><if pos:start="19:5" pos:end="21:31">if <condition pos:start="19:8" pos:end="19:14">(<expr pos:start="19:9" pos:end="19:13"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:13">data</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:31"><block_content pos:start="21:9" pos:end="21:31">

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><call pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:10">memcpy</name><argument_list pos:start="23:11" pos:end="23:57">(<argument pos:start="23:12" pos:end="23:15"><expr pos:start="23:12" pos:end="23:15"><name pos:start="23:12" pos:end="23:15">data</name></expr></argument>, <argument pos:start="23:18" pos:end="23:33"><expr pos:start="23:18" pos:end="23:33"><name pos:start="23:18" pos:end="23:33"><name pos:start="23:18" pos:end="23:22">avctx</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:33">extradata</name></name></expr></argument>, <argument pos:start="23:36" pos:end="23:56"><expr pos:start="23:36" pos:end="23:56"><name pos:start="23:36" pos:end="23:56"><name pos:start="23:36" pos:end="23:40">avctx</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:56">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:39"><expr pos:start="25:5" pos:end="25:38"><name pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:8">data</name><index pos:start="25:9" pos:end="25:31">[<expr pos:start="25:10" pos:end="25:30"><name pos:start="25:10" pos:end="25:30"><name pos:start="25:10" pos:end="25:14">avctx</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:30">extradata_size</name></name></expr>]</index></name> <operator pos:start="25:33" pos:end="25:33">=</operator> <literal type="char" pos:start="25:35" pos:end="25:38">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:7">cur</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <name pos:start="27:11" pos:end="27:14">data</name></expr>;</expr_stmt>



    <while pos:start="31:5" pos:end="71:5">while <condition pos:start="31:11" pos:end="31:16">(<expr pos:start="31:12" pos:end="31:15"><operator pos:start="31:12" pos:end="31:12">*</operator><name pos:start="31:13" pos:end="31:15">cur</name></expr>)</condition> <block pos:start="31:18" pos:end="71:5">{<block_content pos:start="33:9" pos:end="69:35">

        <if_stmt pos:start="33:9" pos:end="65:9"><if pos:start="33:9" pos:end="51:9">if <condition pos:start="33:12" pos:end="33:45">(<expr pos:start="33:13" pos:end="33:44"><call pos:start="33:13" pos:end="33:39"><name pos:start="33:13" pos:end="33:19">strncmp</name><argument_list pos:start="33:20" pos:end="33:39">(<argument pos:start="33:21" pos:end="33:30"><expr pos:start="33:21" pos:end="33:30"><literal type="string" pos:start="33:21" pos:end="33:30">"palette:"</literal></expr></argument>, <argument pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><name pos:start="33:33" pos:end="33:35">cur</name></expr></argument>, <argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><literal type="number" pos:start="33:38" pos:end="33:38">8</literal></expr></argument>)</argument_list></call> <operator pos:start="33:41" pos:end="33:42">==</operator> <literal type="number" pos:start="33:44" pos:end="33:44">0</literal></expr>)</condition> <block pos:start="33:47" pos:end="51:9">{<block_content pos:start="35:13" pos:end="49:13">

            <decl_stmt pos:start="35:13" pos:end="35:18"><decl pos:start="35:13" pos:end="35:17"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:30"><decl pos:start="37:13" pos:end="37:29"><type pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:16">char</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:19">p</name> <init pos:start="37:21" pos:end="37:29">= <expr pos:start="37:23" pos:end="37:29"><name pos:start="37:23" pos:end="37:25">cur</name> <operator pos:start="37:27" pos:end="37:27">+</operator> <literal type="number" pos:start="37:29" pos:end="37:29">8</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:32"><name pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:15">ctx</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:28">has_palette</name></name> <operator pos:start="39:30" pos:end="39:30">=</operator> <literal type="number" pos:start="39:32" pos:end="39:32">1</literal></expr>;</expr_stmt>

            <for pos:start="41:13" pos:end="49:13">for <control pos:start="41:17" pos:end="41:36">(<init pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:18">i</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</init> <condition pos:start="41:25" pos:end="41:31"><expr pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:25">i</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <literal type="number" pos:start="41:29" pos:end="41:30">16</literal></expr>;</condition> <incr pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:33">i</name><operator pos:start="41:34" pos:end="41:35">++</operator></expr></incr>)</control> <block pos:start="41:38" pos:end="49:13">{<block_content pos:start="43:17" pos:end="47:24">

                <expr_stmt pos:start="43:17" pos:end="43:53"><expr pos:start="43:17" pos:end="43:52"><name pos:start="43:17" pos:end="43:31"><name pos:start="43:17" pos:end="43:19">ctx</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:28">palette</name><index pos:start="43:29" pos:end="43:31">[<expr pos:start="43:30" pos:end="43:30"><name pos:start="43:30" pos:end="43:30">i</name></expr>]</index></name> <operator pos:start="43:33" pos:end="43:33">=</operator> <call pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:41">strtoul</name><argument_list pos:start="43:42" pos:end="43:52">(<argument pos:start="43:43" pos:end="43:43"><expr pos:start="43:43" pos:end="43:43"><name pos:start="43:43" pos:end="43:43">p</name></expr></argument>, <argument pos:start="43:46" pos:end="43:47"><expr pos:start="43:46" pos:end="43:47"><operator pos:start="43:46" pos:end="43:46">&amp;</operator><name pos:start="43:47" pos:end="43:47">p</name></expr></argument>, <argument pos:start="43:50" pos:end="43:51"><expr pos:start="43:50" pos:end="43:51"><literal type="number" pos:start="43:50" pos:end="43:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while pos:start="45:17" pos:end="47:24">while <condition pos:start="45:23" pos:end="45:51">(<expr pos:start="45:24" pos:end="45:50"><operator pos:start="45:24" pos:end="45:24">*</operator><name pos:start="45:25" pos:end="45:25">p</name> <operator pos:start="45:27" pos:end="45:28">==</operator> <literal type="char" pos:start="45:30" pos:end="45:32">','</literal> <operator pos:start="45:34" pos:end="45:35">||</operator> <call pos:start="45:37" pos:end="45:50"><name pos:start="45:37" pos:end="45:46">av_isspace</name><argument_list pos:start="45:47" pos:end="45:50">(<argument pos:start="45:48" pos:end="45:49"><expr pos:start="45:48" pos:end="45:49"><operator pos:start="45:48" pos:end="45:48">*</operator><name pos:start="45:49" pos:end="45:49">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:21" pos:end="47:24"><block_content pos:start="47:21" pos:end="47:24">

                    <expr_stmt pos:start="47:21" pos:end="47:24"><expr pos:start="47:21" pos:end="47:23"><name pos:start="47:21" pos:end="47:21">p</name><operator pos:start="47:22" pos:end="47:23">++</operator></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="51:11" pos:end="65:9">else if <condition pos:start="51:19" pos:end="51:45">(<expr pos:start="51:20" pos:end="51:44"><operator pos:start="51:20" pos:end="51:20">!</operator><call pos:start="51:21" pos:end="51:44"><name pos:start="51:21" pos:end="51:27">strncmp</name><argument_list pos:start="51:28" pos:end="51:44">(<argument pos:start="51:29" pos:end="51:35"><expr pos:start="51:29" pos:end="51:35"><literal type="string" pos:start="51:29" pos:end="51:35">"size:"</literal></expr></argument>, <argument pos:start="51:38" pos:end="51:40"><expr pos:start="51:38" pos:end="51:40"><name pos:start="51:38" pos:end="51:40">cur</name></expr></argument>, <argument pos:start="51:43" pos:end="51:43"><expr pos:start="51:43" pos:end="51:43"><literal type="number" pos:start="51:43" pos:end="51:43">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:47" pos:end="65:9">{<block_content pos:start="53:13" pos:end="63:13">

            <decl_stmt pos:start="53:13" pos:end="53:21"><decl pos:start="53:13" pos:end="53:17"><type pos:start="53:13" pos:end="53:15"><name pos:start="53:13" pos:end="53:15">int</name></type> <name pos:start="53:17" pos:end="53:17">w</name></decl>, <decl pos:start="53:20" pos:end="53:20"><type ref="prev" pos:start="53:13" pos:end="53:15"/><name pos:start="53:20" pos:end="53:20">h</name></decl>;</decl_stmt>

            <if_stmt pos:start="55:13" pos:end="63:13"><if pos:start="55:13" pos:end="63:13">if <condition pos:start="55:16" pos:end="55:54">(<expr pos:start="55:17" pos:end="55:53"><call pos:start="55:17" pos:end="55:48"><name pos:start="55:17" pos:end="55:22">sscanf</name><argument_list pos:start="55:23" pos:end="55:48">(<argument pos:start="55:24" pos:end="55:30"><expr pos:start="55:24" pos:end="55:30"><name pos:start="55:24" pos:end="55:26">cur</name> <operator pos:start="55:28" pos:end="55:28">+</operator> <literal type="number" pos:start="55:30" pos:end="55:30">5</literal></expr></argument>, <argument pos:start="55:33" pos:end="55:39"><expr pos:start="55:33" pos:end="55:39"><literal type="string" pos:start="55:33" pos:end="55:39">"%dx%d"</literal></expr></argument>, <argument pos:start="55:42" pos:end="55:43"><expr pos:start="55:42" pos:end="55:43"><operator pos:start="55:42" pos:end="55:42">&amp;</operator><name pos:start="55:43" pos:end="55:43">w</name></expr></argument>, <argument pos:start="55:46" pos:end="55:47"><expr pos:start="55:46" pos:end="55:47"><operator pos:start="55:46" pos:end="55:46">&amp;</operator><name pos:start="55:47" pos:end="55:47">h</name></expr></argument>)</argument_list></call> <operator pos:start="55:50" pos:end="55:51">==</operator> <literal type="number" pos:start="55:53" pos:end="55:53">2</literal></expr>)</condition> <block pos:start="55:56" pos:end="63:13">{<block_content pos:start="57:16" pos:end="61:30">

               <decl_stmt pos:start="57:16" pos:end="57:56"><decl pos:start="57:16" pos:end="57:55"><type pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">int</name></type> <name pos:start="57:20" pos:end="57:22">ret</name> <init pos:start="57:24" pos:end="57:55">= <expr pos:start="57:26" pos:end="57:55"><call pos:start="57:26" pos:end="57:55"><name pos:start="57:26" pos:end="57:42">ff_set_dimensions</name><argument_list pos:start="57:43" pos:end="57:55">(<argument pos:start="57:44" pos:end="57:48"><expr pos:start="57:44" pos:end="57:48"><name pos:start="57:44" pos:end="57:48">avctx</name></expr></argument>, <argument pos:start="57:51" pos:end="57:51"><expr pos:start="57:51" pos:end="57:51"><name pos:start="57:51" pos:end="57:51">w</name></expr></argument>, <argument pos:start="57:54" pos:end="57:54"><expr pos:start="57:54" pos:end="57:54"><name pos:start="57:54" pos:end="57:54">h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

               <if_stmt pos:start="59:16" pos:end="61:30"><if pos:start="59:16" pos:end="61:30">if <condition pos:start="59:19" pos:end="59:27">(<expr pos:start="59:20" pos:end="59:26"><name pos:start="59:20" pos:end="59:22">ret</name> <operator pos:start="59:24" pos:end="59:24">&lt;</operator> <literal type="number" pos:start="59:26" pos:end="59:26">0</literal></expr>)</condition><block type="pseudo" pos:start="61:20" pos:end="61:30"><block_content pos:start="61:20" pos:end="61:30">

                   <return pos:start="61:20" pos:end="61:30">return <expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:11">cur</name> <operator pos:start="67:13" pos:end="67:14">+=</operator> <call pos:start="67:16" pos:end="67:35"><name pos:start="67:16" pos:end="67:22">strcspn</name><argument_list pos:start="67:23" pos:end="67:35">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">cur</name></expr></argument>, <argument pos:start="67:29" pos:end="67:34"><expr pos:start="67:29" pos:end="67:34"><literal type="string" pos:start="67:29" pos:end="67:34">"\n\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:11">cur</name> <operator pos:start="69:13" pos:end="69:14">+=</operator> <call pos:start="69:16" pos:end="69:34"><name pos:start="69:16" pos:end="69:21">strspn</name><argument_list pos:start="69:22" pos:end="69:34">(<argument pos:start="69:23" pos:end="69:25"><expr pos:start="69:23" pos:end="69:25"><name pos:start="69:23" pos:end="69:25">cur</name></expr></argument>, <argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><literal type="string" pos:start="69:28" pos:end="69:33">"\n\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="73:5" pos:end="73:18"><expr pos:start="73:5" pos:end="73:17"><call pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:11">av_free</name><argument_list pos:start="73:12" pos:end="73:17">(<argument pos:start="73:13" pos:end="73:16"><expr pos:start="73:13" pos:end="73:16"><name pos:start="73:13" pos:end="73:16">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
