<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20880.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">get_pixels_altivec</name><parameter_list pos:start="1:31" pos:end="3:51">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><name pos:start="1:32" pos:end="1:38">int16_t</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier><specifier pos:start="1:41" pos:end="1:48">restrict</specifier></type> <name pos:start="1:50" pos:end="1:54">block</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:77"><decl pos:start="1:57" pos:end="1:77"><type pos:start="1:57" pos:end="1:77"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:69">uint8_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:77">pixels</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:50"><decl pos:start="3:32" pos:end="3:50"><type pos:start="3:32" pos:end="3:50"><name pos:start="3:32" pos:end="3:40">ptrdiff_t</name></type> <name pos:start="3:42" pos:end="3:50">line_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:5">

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">vec_u8</name></type> <name pos:start="9:12" pos:end="9:15">perm</name> <init pos:start="9:17" pos:end="9:37">= <expr pos:start="9:19" pos:end="9:37"><call pos:start="9:19" pos:end="9:37"><name pos:start="9:19" pos:end="9:26">vec_lvsl</name><argument_list pos:start="9:27" pos:end="9:37">(<argument pos:start="9:28" pos:end="9:28"><expr pos:start="9:28" pos:end="9:28"><literal type="number" pos:start="9:28" pos:end="9:28">0</literal></expr></argument>, <argument pos:start="9:31" pos:end="9:36"><expr pos:start="9:31" pos:end="9:36"><name pos:start="9:31" pos:end="9:36">pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:16">vec_u8</name></type> <name pos:start="11:18" pos:end="11:21">zero</name> <init pos:start="11:23" pos:end="11:53">= <expr pos:start="11:25" pos:end="11:53"><operator pos:start="11:25" pos:end="11:25">(</operator><specifier pos:start="11:26" pos:end="11:30">const</specifier> <name pos:start="11:32" pos:end="11:37">vec_u8</name><operator pos:start="11:38" pos:end="11:38">)</operator><call pos:start="11:39" pos:end="11:53"><name pos:start="11:39" pos:end="11:50">vec_splat_u8</name><argument_list pos:start="11:51" pos:end="11:53">(<argument pos:start="11:52" pos:end="11:52"><expr pos:start="11:52" pos:end="11:52"><literal type="number" pos:start="11:52" pos:end="11:52">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="45:5">for <control pos:start="15:9" pos:end="15:27">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:21"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <literal type="number" pos:start="15:21" pos:end="15:21">8</literal></expr>;</condition> <incr pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:24">i</name><operator pos:start="15:25" pos:end="15:26">++</operator></expr></incr>)</control> <block pos:start="15:29" pos:end="45:5">{<block_content pos:start="23:9" pos:end="43:28">

        <comment type="block" pos:start="17:9" pos:end="21:46">/* Read potentially unaligned pixels.

         * We're reading 16 pixels, and actually only want 8,

         * but we simply ignore the extras. */</comment>

        <decl_stmt pos:start="23:9" pos:end="23:40"><decl pos:start="23:9" pos:end="23:39"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">vec_u8</name></type> <name pos:start="23:16" pos:end="23:19">pixl</name> <init pos:start="23:21" pos:end="23:39">= <expr pos:start="23:23" pos:end="23:39"><call pos:start="23:23" pos:end="23:39"><name pos:start="23:23" pos:end="23:28">vec_ld</name><argument_list pos:start="23:29" pos:end="23:39">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr></argument>, <argument pos:start="23:33" pos:end="23:38"><expr pos:start="23:33" pos:end="23:38"><name pos:start="23:33" pos:end="23:38">pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:40"><decl pos:start="25:9" pos:end="25:39"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:14">vec_u8</name></type> <name pos:start="25:16" pos:end="25:19">pixr</name> <init pos:start="25:21" pos:end="25:39">= <expr pos:start="25:23" pos:end="25:39"><call pos:start="25:23" pos:end="25:39"><name pos:start="25:23" pos:end="25:28">vec_ld</name><argument_list pos:start="25:29" pos:end="25:39">(<argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">7</literal></expr></argument>, <argument pos:start="25:33" pos:end="25:38"><expr pos:start="25:33" pos:end="25:38"><name pos:start="25:33" pos:end="25:38">pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:50"><decl pos:start="27:9" pos:end="27:49"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">vec_u8</name></type> <name pos:start="27:16" pos:end="27:20">bytes</name> <init pos:start="27:22" pos:end="27:49">= <expr pos:start="27:24" pos:end="27:49"><call pos:start="27:24" pos:end="27:49"><name pos:start="27:24" pos:end="27:31">vec_perm</name><argument_list pos:start="27:32" pos:end="27:49">(<argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">pixl</name></expr></argument>, <argument pos:start="27:39" pos:end="27:42"><expr pos:start="27:39" pos:end="27:42"><name pos:start="27:39" pos:end="27:42">pixr</name></expr></argument>, <argument pos:start="27:45" pos:end="27:48"><expr pos:start="27:45" pos:end="27:48"><name pos:start="27:45" pos:end="27:48">perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="31:9" pos:end="31:41">// Convert the bytes into shorts.</comment>

        <decl_stmt pos:start="33:9" pos:end="33:58"><decl pos:start="33:9" pos:end="33:57"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">vec_s16</name></type> <name pos:start="33:17" pos:end="33:22">shorts</name> <init pos:start="33:24" pos:end="33:57">= <expr pos:start="33:26" pos:end="33:57"><operator pos:start="33:26" pos:end="33:26">(</operator><name pos:start="33:27" pos:end="33:33">vec_s16</name><operator pos:start="33:34" pos:end="33:34">)</operator><call pos:start="33:35" pos:end="33:57"><name pos:start="33:35" pos:end="33:44">vec_mergeh</name><argument_list pos:start="33:45" pos:end="33:57">(<argument pos:start="33:46" pos:end="33:49"><expr pos:start="33:46" pos:end="33:49"><name pos:start="33:46" pos:end="33:49">zero</name></expr></argument>, <argument pos:start="33:52" pos:end="33:56"><expr pos:start="33:52" pos:end="33:56"><name pos:start="33:52" pos:end="33:56">bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="37:9" pos:end="37:78">// Save the data to the block, we assume the block is 16-byte aligned.</comment>

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><call pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:14">vec_st</name><argument_list pos:start="39:15" pos:end="39:48">(<argument pos:start="39:16" pos:end="39:21"><expr pos:start="39:16" pos:end="39:21"><name pos:start="39:16" pos:end="39:21">shorts</name></expr></argument>, <argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:24">i</name> <operator pos:start="39:26" pos:end="39:26">*</operator> <literal type="number" pos:start="39:28" pos:end="39:29">16</literal></expr></argument>, <argument pos:start="39:32" pos:end="39:47"><expr pos:start="39:32" pos:end="39:47"><operator pos:start="39:32" pos:end="39:32">(</operator><name pos:start="39:33" pos:end="39:39">vec_s16</name> <operator pos:start="39:41" pos:end="39:41">*</operator><operator pos:start="39:42" pos:end="39:42">)</operator><name pos:start="39:43" pos:end="39:47">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:28"><expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:14">pixels</name> <operator pos:start="43:16" pos:end="43:17">+=</operator> <name pos:start="43:19" pos:end="43:27">line_size</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
