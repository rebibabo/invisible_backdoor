<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13221.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">qemu_rbd_send_pipe</name><parameter_list pos:start="1:30" pos:end="1:60">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:42">BDRVRBDState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:54">RADOSCB</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">rcb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <while pos:start="7:5" pos:end="51:5">while <condition pos:start="7:11" pos:end="7:13">(<expr pos:start="7:12" pos:end="7:12"><literal type="number" pos:start="7:12" pos:end="7:12">1</literal></expr>)</condition> <block pos:start="7:15" pos:end="51:5">{<block_content pos:start="9:9" pos:end="49:44">

        <decl_stmt pos:start="9:9" pos:end="9:19"><decl pos:start="9:9" pos:end="9:18"><type pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:14">fd_set</name></type> <name pos:start="9:16" pos:end="9:18">wfd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:38"><decl pos:start="11:9" pos:end="11:37"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:14">fd</name> <init pos:start="11:16" pos:end="11:37">= <expr pos:start="11:18" pos:end="11:37"><name pos:start="11:18" pos:end="11:37"><name pos:start="11:18" pos:end="11:18">s</name><operator pos:start="11:19" pos:end="11:20">-&gt;</operator><name pos:start="11:21" pos:end="11:23">fds</name><index pos:start="11:24" pos:end="11:37">[<expr pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:36">RBD_FD_WRITE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="15:9" pos:end="17:76">/* send the op pointer to the qemu thread that is responsible

           for the aio/op completion. Must do it in a qemu thread context */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:51"><expr pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:50"><name pos:start="19:15" pos:end="19:19">write</name><argument_list pos:start="19:20" pos:end="19:50">(<argument pos:start="19:21" pos:end="19:22"><expr pos:start="19:21" pos:end="19:22"><name pos:start="19:21" pos:end="19:22">fd</name></expr></argument>, <argument pos:start="19:25" pos:end="19:36"><expr pos:start="19:25" pos:end="19:36"><operator pos:start="19:25" pos:end="19:25">(</operator><name pos:start="19:26" pos:end="19:29">void</name> <operator pos:start="19:31" pos:end="19:31">*</operator><operator pos:start="19:32" pos:end="19:32">)</operator><operator pos:start="19:33" pos:end="19:33">&amp;</operator><name pos:start="19:34" pos:end="19:36">rcb</name></expr></argument>, <argument pos:start="19:39" pos:end="19:49"><expr pos:start="19:39" pos:end="19:49"><sizeof pos:start="19:39" pos:end="19:49">sizeof<argument_list pos:start="19:45" pos:end="19:49">(<argument pos:start="19:46" pos:end="19:48"><expr pos:start="19:46" pos:end="19:48"><name pos:start="19:46" pos:end="19:48">rcb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:21">(<expr pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:18">&gt;=</operator> <literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr>)</condition> <block pos:start="21:23" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:27">(<expr pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:17">errno</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:26">EINTR</name></expr>)</condition> <block pos:start="27:29" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:21">

            <continue pos:start="29:13" pos:end="29:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:28">(<expr pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:17">errno</name> <operator pos:start="33:19" pos:end="33:20">!=</operator> <name pos:start="33:22" pos:end="33:27">EAGAIN</name></expr>)</condition> <block pos:start="33:30" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><call pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:15">FD_ZERO</name><argument_list pos:start="41:16" pos:end="41:21">(<argument pos:start="41:17" pos:end="41:20"><expr pos:start="41:17" pos:end="41:20"><operator pos:start="41:17" pos:end="41:17">&amp;</operator><name pos:start="41:18" pos:end="41:20">wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><call pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:14">FD_SET</name><argument_list pos:start="43:15" pos:end="43:24">(<argument pos:start="43:16" pos:end="43:17"><expr pos:start="43:16" pos:end="43:17"><name pos:start="43:16" pos:end="43:17">fd</name></expr></argument>, <argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><operator pos:start="43:20" pos:end="43:20">&amp;</operator><name pos:start="43:21" pos:end="43:23">wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="45:9" pos:end="49:44">do <block pos:start="45:12" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:57">

            <expr_stmt pos:start="47:13" pos:end="47:57"><expr pos:start="47:13" pos:end="47:56"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:56"><name pos:start="47:19" pos:end="47:24">select</name><argument_list pos:start="47:25" pos:end="47:56">(<argument pos:start="47:26" pos:end="47:31"><expr pos:start="47:26" pos:end="47:31"><name pos:start="47:26" pos:end="47:27">fd</name> <operator pos:start="47:29" pos:end="47:29">+</operator> <literal type="number" pos:start="47:31" pos:end="47:31">1</literal></expr></argument>, <argument pos:start="47:34" pos:end="47:37"><expr pos:start="47:34" pos:end="47:37"><name pos:start="47:34" pos:end="47:37">NULL</name></expr></argument>, <argument pos:start="47:40" pos:end="47:43"><expr pos:start="47:40" pos:end="47:43"><operator pos:start="47:40" pos:end="47:40">&amp;</operator><name pos:start="47:41" pos:end="47:43">wfd</name></expr></argument>, <argument pos:start="47:46" pos:end="47:49"><expr pos:start="47:46" pos:end="47:49"><name pos:start="47:46" pos:end="47:49">NULL</name></expr></argument>, <argument pos:start="47:52" pos:end="47:55"><expr pos:start="47:52" pos:end="47:55"><name pos:start="47:52" pos:end="47:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="49:17" pos:end="49:43">(<expr pos:start="49:18" pos:end="49:42"><name pos:start="49:18" pos:end="49:20">ret</name> <operator pos:start="49:22" pos:end="49:22">&lt;</operator> <literal type="number" pos:start="49:24" pos:end="49:24">0</literal> <operator pos:start="49:26" pos:end="49:27">&amp;&amp;</operator> <name pos:start="49:29" pos:end="49:33">errno</name> <operator pos:start="49:35" pos:end="49:36">==</operator> <name pos:start="49:38" pos:end="49:42">EINTR</name></expr>)</condition>;</do>

    </block_content>}</block></while>



    <return pos:start="55:5" pos:end="55:15">return <expr pos:start="55:12" pos:end="55:14"><name pos:start="55:12" pos:end="55:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
