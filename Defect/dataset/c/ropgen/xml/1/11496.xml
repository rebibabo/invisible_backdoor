<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11496.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:31">handle_apdu_thread</name><parameter_list pos:start="1:32" pos:end="1:42">(<parameter pos:start="1:33" pos:end="1:41"><decl pos:start="1:33" pos:end="1:41"><type pos:start="1:33" pos:end="1:37"><name pos:start="1:33" pos:end="1:36">void</name><modifier pos:start="1:37" pos:end="1:37">*</modifier></type> <name pos:start="1:39" pos:end="1:41">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:16">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">EmulatedState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">card</name> <init pos:start="5:25" pos:end="5:29">= <expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:36"><name pos:start="7:13" pos:end="7:21">recv_data</name><index pos:start="7:22" pos:end="7:36">[<expr pos:start="7:23" pos:end="7:35"><name pos:start="7:23" pos:end="7:35">APDU_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">recv_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">VReaderStatus</name></type> <name pos:start="11:19" pos:end="11:31">reader_status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">EmulEvent</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:20">event</name></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="89:5">while <condition pos:start="17:11" pos:end="17:13">(<expr pos:start="17:12" pos:end="17:12"><literal type="number" pos:start="17:12" pos:end="17:12">1</literal></expr>)</condition> <block pos:start="17:15" pos:end="89:5">{<block_content pos:start="19:9" pos:end="87:48">

        <expr_stmt pos:start="19:9" pos:end="19:50"><expr pos:start="19:9" pos:end="19:49"><call pos:start="19:9" pos:end="19:49"><name pos:start="19:9" pos:end="19:23">qemu_mutex_lock</name><argument_list pos:start="19:24" pos:end="19:49">(<argument pos:start="19:25" pos:end="19:48"><expr pos:start="19:25" pos:end="19:48"><operator pos:start="19:25" pos:end="19:25">&amp;</operator><name pos:start="19:26" pos:end="19:48"><name pos:start="19:26" pos:end="19:29">card</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:48">handle_apdu_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:74"><expr pos:start="21:9" pos:end="21:73"><call pos:start="21:9" pos:end="21:73"><name pos:start="21:9" pos:end="21:22">qemu_cond_wait</name><argument_list pos:start="21:23" pos:end="21:73">(<argument pos:start="21:24" pos:end="21:46"><expr pos:start="21:24" pos:end="21:46"><operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:46"><name pos:start="21:25" pos:end="21:28">card</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:46">handle_apdu_cond</name></name></expr></argument>, <argument pos:start="21:49" pos:end="21:72"><expr pos:start="21:49" pos:end="21:72"><operator pos:start="21:49" pos:end="21:49">&amp;</operator><name pos:start="21:50" pos:end="21:72"><name pos:start="21:50" pos:end="21:53">card</name><operator pos:start="21:54" pos:end="21:55">-&gt;</operator><name pos:start="21:56" pos:end="21:72">handle_apdu_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:52"><expr pos:start="23:9" pos:end="23:51"><call pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:25">qemu_mutex_unlock</name><argument_list pos:start="23:26" pos:end="23:51">(<argument pos:start="23:27" pos:end="23:50"><expr pos:start="23:27" pos:end="23:50"><operator pos:start="23:27" pos:end="23:27">&amp;</operator><name pos:start="23:28" pos:end="23:50"><name pos:start="23:28" pos:end="23:31">card</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:50">handle_apdu_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:35">(<expr pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:16">card</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:34">quit_apdu_thread</name></name></expr>)</condition> <block pos:start="25:37" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:18">

            <expr_stmt pos:start="27:13" pos:end="27:39"><expr pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:16">card</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:34">quit_apdu_thread</name></name> <operator pos:start="27:36" pos:end="27:36">=</operator> <literal type="number" pos:start="27:38" pos:end="27:38">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="27:41" pos:end="27:55">/* debugging */</comment>

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><call pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:23">qemu_mutex_lock</name><argument_list pos:start="33:24" pos:end="33:45">(<argument pos:start="33:25" pos:end="33:44"><expr pos:start="33:25" pos:end="33:44"><operator pos:start="33:25" pos:end="33:25">&amp;</operator><name pos:start="33:26" pos:end="33:44"><name pos:start="33:26" pos:end="33:29">card</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:44">vreader_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="35:9" pos:end="85:9">while <condition pos:start="35:15" pos:end="35:55">(<expr pos:start="35:16" pos:end="35:54"><operator pos:start="35:16" pos:end="35:16">!</operator><call pos:start="35:17" pos:end="35:54"><name pos:start="35:17" pos:end="35:30">QSIMPLEQ_EMPTY</name><argument_list pos:start="35:31" pos:end="35:54">(<argument pos:start="35:32" pos:end="35:53"><expr pos:start="35:32" pos:end="35:53"><operator pos:start="35:32" pos:end="35:32">&amp;</operator><name pos:start="35:33" pos:end="35:53"><name pos:start="35:33" pos:end="35:36">card</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:53">guest_apdu_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:57" pos:end="85:9">{<block_content pos:start="37:13" pos:end="83:26">

            <expr_stmt pos:start="37:13" pos:end="37:59"><expr pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:17">event</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <call pos:start="37:21" pos:end="37:58"><name pos:start="37:21" pos:end="37:34">QSIMPLEQ_FIRST</name><argument_list pos:start="37:35" pos:end="37:58">(<argument pos:start="37:36" pos:end="37:57"><expr pos:start="37:36" pos:end="37:57"><operator pos:start="37:36" pos:end="37:36">&amp;</operator><name pos:start="37:37" pos:end="37:57"><name pos:start="37:37" pos:end="37:40">card</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:57">guest_apdu_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:48"><expr pos:start="39:13" pos:end="39:47"><call pos:start="39:13" pos:end="39:47"><name pos:start="39:13" pos:end="39:18">assert</name><argument_list pos:start="39:19" pos:end="39:47">(<argument pos:start="39:20" pos:end="39:46"><expr pos:start="39:20" pos:end="39:46"><operator pos:start="39:20" pos:end="39:20">(</operator><name pos:start="39:21" pos:end="39:28">unsigned</name> <name pos:start="39:30" pos:end="39:33">long</name><operator pos:start="39:34" pos:end="39:34">)</operator><name pos:start="39:35" pos:end="39:39">event</name> <operator pos:start="39:41" pos:end="39:41">&gt;</operator> <literal type="number" pos:start="39:43" pos:end="39:46">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:64"><expr pos:start="41:13" pos:end="41:63"><call pos:start="41:13" pos:end="41:63"><name pos:start="41:13" pos:end="41:32">QSIMPLEQ_REMOVE_HEAD</name><argument_list pos:start="41:33" pos:end="41:63">(<argument pos:start="41:34" pos:end="41:55"><expr pos:start="41:34" pos:end="41:55"><operator pos:start="41:34" pos:end="41:34">&amp;</operator><name pos:start="41:35" pos:end="41:55"><name pos:start="41:35" pos:end="41:38">card</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:55">guest_apdu_list</name></name></expr></argument>, <argument pos:start="41:58" pos:end="41:62"><expr pos:start="41:58" pos:end="41:62"><name pos:start="41:58" pos:end="41:62">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="51:13"><if pos:start="43:13" pos:end="51:13">if <condition pos:start="43:16" pos:end="43:54">(<expr pos:start="43:17" pos:end="43:53"><name pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:21">event</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:24">p</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:29">data</name><operator pos:start="43:30" pos:end="43:30">.</operator><name pos:start="43:31" pos:end="43:34">type</name></name> <operator pos:start="43:36" pos:end="43:37">!=</operator> <name pos:start="43:39" pos:end="43:53">EMUL_GUEST_APDU</name></expr>)</condition> <block pos:start="43:56" pos:end="51:13">{<block_content pos:start="45:17" pos:end="49:25">

                <expr_stmt pos:start="45:17" pos:end="45:79"><expr pos:start="45:17" pos:end="45:78"><call pos:start="45:17" pos:end="45:78"><name pos:start="45:17" pos:end="45:23">DPRINTF</name><argument_list pos:start="45:24" pos:end="45:78">(<argument pos:start="45:25" pos:end="45:28"><expr pos:start="45:25" pos:end="45:28"><name pos:start="45:25" pos:end="45:28">card</name></expr></argument>, <argument pos:start="45:31" pos:end="45:31"><expr pos:start="45:31" pos:end="45:31"><literal type="number" pos:start="45:31" pos:end="45:31">1</literal></expr></argument>, <argument pos:start="45:34" pos:end="45:77"><expr pos:start="45:34" pos:end="45:77"><literal type="string" pos:start="45:34" pos:end="45:77">"unexpected message in handle_apdu_thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:30"><expr pos:start="47:17" pos:end="47:29"><call pos:start="47:17" pos:end="47:29"><name pos:start="47:17" pos:end="47:22">g_free</name><argument_list pos:start="47:23" pos:end="47:29">(<argument pos:start="47:24" pos:end="47:28"><expr pos:start="47:24" pos:end="47:28"><name pos:start="47:24" pos:end="47:28">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="49:17" pos:end="49:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="53:13" pos:end="61:13"><if pos:start="53:13" pos:end="61:13">if <condition pos:start="53:16" pos:end="53:37">(<expr pos:start="53:17" pos:end="53:36"><name pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:20">card</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:28">reader</name></name> <operator pos:start="53:30" pos:end="53:31">==</operator> <name pos:start="53:33" pos:end="53:36">NULL</name></expr>)</condition> <block pos:start="53:39" pos:end="61:13">{<block_content pos:start="55:17" pos:end="59:25">

                <expr_stmt pos:start="55:17" pos:end="55:53"><expr pos:start="55:17" pos:end="55:52"><call pos:start="55:17" pos:end="55:52"><name pos:start="55:17" pos:end="55:23">DPRINTF</name><argument_list pos:start="55:24" pos:end="55:52">(<argument pos:start="55:25" pos:end="55:28"><expr pos:start="55:25" pos:end="55:28"><name pos:start="55:25" pos:end="55:28">card</name></expr></argument>, <argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">1</literal></expr></argument>, <argument pos:start="55:34" pos:end="55:51"><expr pos:start="55:34" pos:end="55:51"><literal type="string" pos:start="55:34" pos:end="55:51">"reader is NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:30"><expr pos:start="57:17" pos:end="57:29"><call pos:start="57:17" pos:end="57:29"><name pos:start="57:17" pos:end="57:22">g_free</name><argument_list pos:start="57:23" pos:end="57:29">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="59:17" pos:end="59:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:41"><expr pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:20">recv_len</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <sizeof pos:start="63:24" pos:end="63:40">sizeof<argument_list pos:start="63:30" pos:end="63:40">(<argument pos:start="63:31" pos:end="63:39"><expr pos:start="63:31" pos:end="63:39"><name pos:start="63:31" pos:end="63:39">recv_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="69:42"><expr pos:start="65:13" pos:end="69:41"><name pos:start="65:13" pos:end="65:25">reader_status</name> <operator pos:start="65:27" pos:end="65:27">=</operator> <call pos:start="65:29" pos:end="69:41"><name pos:start="65:29" pos:end="65:45">vreader_xfr_bytes</name><argument_list pos:start="65:46" pos:end="69:41">(<argument pos:start="65:47" pos:end="65:58"><expr pos:start="65:47" pos:end="65:58"><name pos:start="65:47" pos:end="65:58"><name pos:start="65:47" pos:end="65:50">card</name><operator pos:start="65:51" pos:end="65:52">-&gt;</operator><name pos:start="65:53" pos:end="65:58">reader</name></name></expr></argument>,

                    <argument pos:start="67:21" pos:end="67:38"><expr pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:25">event</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:28">p</name><operator pos:start="67:29" pos:end="67:29">.</operator><name pos:start="67:30" pos:end="67:33">data</name><operator pos:start="67:34" pos:end="67:34">.</operator><name pos:start="67:35" pos:end="67:38">data</name></name></expr></argument>, <argument pos:start="67:41" pos:end="67:57"><expr pos:start="67:41" pos:end="67:57"><name pos:start="67:41" pos:end="67:57"><name pos:start="67:41" pos:end="67:45">event</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:48">p</name><operator pos:start="67:49" pos:end="67:49">.</operator><name pos:start="67:50" pos:end="67:53">data</name><operator pos:start="67:54" pos:end="67:54">.</operator><name pos:start="67:55" pos:end="67:57">len</name></name></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:29"><expr pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:29">recv_data</name></expr></argument>, <argument pos:start="69:32" pos:end="69:40"><expr pos:start="69:32" pos:end="69:40"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:40">recv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:71"><expr pos:start="71:13" pos:end="71:70"><call pos:start="71:13" pos:end="71:70"><name pos:start="71:13" pos:end="71:19">DPRINTF</name><argument_list pos:start="71:20" pos:end="71:70">(<argument pos:start="71:21" pos:end="71:24"><expr pos:start="71:21" pos:end="71:24"><name pos:start="71:21" pos:end="71:24">card</name></expr></argument>, <argument pos:start="71:27" pos:end="71:27"><expr pos:start="71:27" pos:end="71:27"><literal type="number" pos:start="71:27" pos:end="71:27">2</literal></expr></argument>, <argument pos:start="71:30" pos:end="71:59"><expr pos:start="71:30" pos:end="71:59"><literal type="string" pos:start="71:30" pos:end="71:59">"got back apdu of length %d\n"</literal></expr></argument>, <argument pos:start="71:62" pos:end="71:69"><expr pos:start="71:62" pos:end="71:69"><name pos:start="71:62" pos:end="71:69">recv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="81:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:44">(<expr pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:29">reader_status</name> <operator pos:start="73:31" pos:end="73:32">==</operator> <name pos:start="73:34" pos:end="73:43">VREADER_OK</name></expr>)</condition> <block pos:start="73:46" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:71">

                <expr_stmt pos:start="75:17" pos:end="75:71"><expr pos:start="75:17" pos:end="75:70"><call pos:start="75:17" pos:end="75:70"><name pos:start="75:17" pos:end="75:43">emulated_push_response_apdu</name><argument_list pos:start="75:44" pos:end="75:70">(<argument pos:start="75:45" pos:end="75:48"><expr pos:start="75:45" pos:end="75:48"><name pos:start="75:45" pos:end="75:48">card</name></expr></argument>, <argument pos:start="75:51" pos:end="75:59"><expr pos:start="75:51" pos:end="75:59"><name pos:start="75:51" pos:end="75:59">recv_data</name></expr></argument>, <argument pos:start="75:62" pos:end="75:69"><expr pos:start="75:62" pos:end="75:69"><name pos:start="75:62" pos:end="75:69">recv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="77:15" pos:end="81:13">else <block pos:start="77:20" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:57">

                <expr_stmt pos:start="79:17" pos:end="79:57"><expr pos:start="79:17" pos:end="79:56"><call pos:start="79:17" pos:end="79:56"><name pos:start="79:17" pos:end="79:35">emulated_push_error</name><argument_list pos:start="79:36" pos:end="79:56">(<argument pos:start="79:37" pos:end="79:40"><expr pos:start="79:37" pos:end="79:40"><name pos:start="79:37" pos:end="79:40">card</name></expr></argument>, <argument pos:start="79:43" pos:end="79:55"><expr pos:start="79:43" pos:end="79:55"><name pos:start="79:43" pos:end="79:55">reader_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:26"><expr pos:start="83:13" pos:end="83:25"><call pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:18">g_free</name><argument_list pos:start="83:19" pos:end="83:25">(<argument pos:start="83:20" pos:end="83:24"><expr pos:start="83:20" pos:end="83:24"><name pos:start="83:20" pos:end="83:24">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="87:9" pos:end="87:48"><expr pos:start="87:9" pos:end="87:47"><call pos:start="87:9" pos:end="87:47"><name pos:start="87:9" pos:end="87:25">qemu_mutex_unlock</name><argument_list pos:start="87:26" pos:end="87:47">(<argument pos:start="87:27" pos:end="87:46"><expr pos:start="87:27" pos:end="87:46"><operator pos:start="87:27" pos:end="87:27">&amp;</operator><name pos:start="87:28" pos:end="87:46"><name pos:start="87:28" pos:end="87:31">card</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:46">vreader_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="91:5" pos:end="91:51"><expr pos:start="91:5" pos:end="91:50"><call pos:start="91:5" pos:end="91:50"><name pos:start="91:5" pos:end="91:19">qemu_mutex_lock</name><argument_list pos:start="91:20" pos:end="91:50">(<argument pos:start="91:21" pos:end="91:49"><expr pos:start="91:21" pos:end="91:49"><operator pos:start="91:21" pos:end="91:21">&amp;</operator><name pos:start="91:22" pos:end="91:49"><name pos:start="91:22" pos:end="91:25">card</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:49">apdu_thread_quit_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:51"><expr pos:start="93:5" pos:end="93:50"><call pos:start="93:5" pos:end="93:50"><name pos:start="93:5" pos:end="93:20">qemu_cond_signal</name><argument_list pos:start="93:21" pos:end="93:50">(<argument pos:start="93:22" pos:end="93:49"><expr pos:start="93:22" pos:end="93:49"><operator pos:start="93:22" pos:end="93:22">&amp;</operator><name pos:start="93:23" pos:end="93:49"><name pos:start="93:23" pos:end="93:26">card</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:49">apdu_thread_quit_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:53"><expr pos:start="95:5" pos:end="95:52"><call pos:start="95:5" pos:end="95:52"><name pos:start="95:5" pos:end="95:21">qemu_mutex_unlock</name><argument_list pos:start="95:22" pos:end="95:52">(<argument pos:start="95:23" pos:end="95:51"><expr pos:start="95:23" pos:end="95:51"><operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:51"><name pos:start="95:24" pos:end="95:27">card</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:51">apdu_thread_quit_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="97:5" pos:end="97:16">return <expr pos:start="97:12" pos:end="97:15"><name pos:start="97:12" pos:end="97:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
