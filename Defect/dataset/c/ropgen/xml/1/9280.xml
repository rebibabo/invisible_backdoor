<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9280.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">BlockDriverAIOCB</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:42">rbd_aio_rw_vector</name><parameter_list pos:start="1:43" pos:end="11:67">(<parameter pos:start="1:44" pos:end="1:63"><decl pos:start="1:44" pos:end="1:63"><type pos:start="1:44" pos:end="1:63"><name pos:start="1:44" pos:end="1:59">BlockDriverState</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:63">bs</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:61"><decl pos:start="3:44" pos:end="3:61"><type pos:start="3:44" pos:end="3:61"><name pos:start="3:44" pos:end="3:50">int64_t</name></type> <name pos:start="3:52" pos:end="3:61">sector_num</name></decl></parameter>,

                                           <parameter pos:start="5:44" pos:end="5:61"><decl pos:start="5:44" pos:end="5:61"><type pos:start="5:44" pos:end="5:61"><name pos:start="5:44" pos:end="5:55">QEMUIOVector</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:61">qiov</name></decl></parameter>,

                                           <parameter pos:start="7:44" pos:end="7:57"><decl pos:start="7:44" pos:end="7:57"><type pos:start="7:44" pos:end="7:57"><name pos:start="7:44" pos:end="7:46">int</name></type> <name pos:start="7:48" pos:end="7:57">nb_sectors</name></decl></parameter>,

                                           <parameter pos:start="9:44" pos:end="9:72"><decl pos:start="9:44" pos:end="9:72"><type pos:start="9:44" pos:end="9:72"><name pos:start="9:44" pos:end="9:68">BlockDriverCompletionFunc</name> <modifier pos:start="9:70" pos:end="9:70">*</modifier></type><name pos:start="9:71" pos:end="9:72">cb</name></decl></parameter>,

                                           <parameter pos:start="11:44" pos:end="11:55"><decl pos:start="11:44" pos:end="11:55"><type pos:start="11:44" pos:end="11:55"><name pos:start="11:44" pos:end="11:47">void</name> <modifier pos:start="11:49" pos:end="11:49">*</modifier></type><name pos:start="11:50" pos:end="11:55">opaque</name></decl></parameter>, <parameter pos:start="11:58" pos:end="11:66"><decl pos:start="11:58" pos:end="11:66"><type pos:start="11:58" pos:end="11:66"><name pos:start="11:58" pos:end="11:60">int</name></type> <name pos:start="11:62" pos:end="11:66">write</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="105:1">{<block_content pos:start="15:5" pos:end="103:24">

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">RBDAIOCB</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">RADOSCB</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">rcb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:20">rbd_completion_t</name></type> <name pos:start="19:22" pos:end="19:22">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:15">off</name></decl>, <decl pos:start="21:18" pos:end="21:21"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:18" pos:end="21:21">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">buf</name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:33"><decl pos:start="27:5" pos:end="27:32"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">BDRVRBDState</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:19">s</name> <init pos:start="27:21" pos:end="27:32">= <expr pos:start="27:23" pos:end="27:32"><name pos:start="27:23" pos:end="27:32"><name pos:start="27:23" pos:end="27:24">bs</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:32">opaque</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:54"><expr pos:start="31:5" pos:end="31:53"><name pos:start="31:5" pos:end="31:7">acb</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:53"><name pos:start="31:11" pos:end="31:22">qemu_aio_get</name><argument_list pos:start="31:23" pos:end="31:53">(<argument pos:start="31:24" pos:end="31:36"><expr pos:start="31:24" pos:end="31:36"><operator pos:start="31:24" pos:end="31:24">&amp;</operator><name pos:start="31:25" pos:end="31:36">rbd_aio_pool</name></expr></argument>, <argument pos:start="31:39" pos:end="31:40"><expr pos:start="31:39" pos:end="31:40"><name pos:start="31:39" pos:end="31:40">bs</name></expr></argument>, <argument pos:start="31:43" pos:end="31:44"><expr pos:start="31:43" pos:end="31:44"><name pos:start="31:43" pos:end="31:44">cb</name></expr></argument>, <argument pos:start="31:47" pos:end="31:52"><expr pos:start="31:47" pos:end="31:52"><name pos:start="31:47" pos:end="31:52">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:7">acb</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:14">write</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:22">write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:7">acb</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:13">qiov</name></name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:20">qiov</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:7">acb</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:15">bounce</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:49"><name pos:start="37:19" pos:end="37:33">qemu_blockalign</name><argument_list pos:start="37:34" pos:end="37:49">(<argument pos:start="37:35" pos:end="37:36"><expr pos:start="37:35" pos:end="37:36"><name pos:start="37:35" pos:end="37:36">bs</name></expr></argument>, <argument pos:start="37:39" pos:end="37:48"><expr pos:start="37:39" pos:end="37:48"><name pos:start="37:39" pos:end="37:48"><name pos:start="37:39" pos:end="37:42">qiov</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:48">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:7">acb</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:12">ret</name></name> <operator pos:start="39:14" pos:end="39:14">=</operator> <literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:19"><expr pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:7">acb</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:14">error</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:15"><expr pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:7">acb</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:10">s</name></name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:14">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:23"><expr pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:7">acb</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:18">cancelled</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:19"><expr pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:7">acb</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:11">bh</name></name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:18">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:14">(<expr pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:13">write</name></expr>)</condition> <block pos:start="51:16" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:53">

        <expr_stmt pos:start="53:9" pos:end="53:53"><expr pos:start="53:9" pos:end="53:52"><call pos:start="53:9" pos:end="53:52"><name pos:start="53:9" pos:end="53:28">qemu_iovec_to_buffer</name><argument_list pos:start="53:29" pos:end="53:52">(<argument pos:start="53:30" pos:end="53:38"><expr pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:32">acb</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:38">qiov</name></name></expr></argument>, <argument pos:start="53:41" pos:end="53:51"><expr pos:start="53:41" pos:end="53:51"><name pos:start="53:41" pos:end="53:51"><name pos:start="53:41" pos:end="53:43">acb</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:51">bounce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:22"><expr pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:7">buf</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <name pos:start="59:11" pos:end="59:21"><name pos:start="59:11" pos:end="59:13">acb</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:21">bounce</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:7">off</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:20">sector_num</name> <operator pos:start="63:22" pos:end="63:22">*</operator> <name pos:start="63:24" pos:end="63:39">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:41"><expr pos:start="65:5" pos:end="65:40"><name pos:start="65:5" pos:end="65:8">size</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <name pos:start="65:12" pos:end="65:21">nb_sectors</name> <operator pos:start="65:23" pos:end="65:23">*</operator> <name pos:start="65:25" pos:end="65:40">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:24"><expr pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:21">qemu_aio_count</name></name><operator pos:start="69:22" pos:end="69:23">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="69:26" pos:end="69:46">/* All the RADOSCB */</comment>



    <expr_stmt pos:start="73:5" pos:end="73:39"><expr pos:start="73:5" pos:end="73:38"><name pos:start="73:5" pos:end="73:7">rcb</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:38"><name pos:start="73:11" pos:end="73:21">qemu_malloc</name><argument_list pos:start="73:22" pos:end="73:38">(<argument pos:start="73:23" pos:end="73:37"><expr pos:start="73:23" pos:end="73:37"><sizeof pos:start="73:23" pos:end="73:37">sizeof<argument_list pos:start="73:29" pos:end="73:37">(<argument pos:start="73:30" pos:end="73:36"><expr pos:start="73:30" pos:end="73:36"><name pos:start="73:30" pos:end="73:36">RADOSCB</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:18"><expr pos:start="75:5" pos:end="75:17"><name pos:start="75:5" pos:end="75:13"><name pos:start="75:5" pos:end="75:7">rcb</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:13">done</name></name> <operator pos:start="75:15" pos:end="75:15">=</operator> <literal type="number" pos:start="75:17" pos:end="75:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:19"><expr pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:7">rcb</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:12">acb</name></name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:18">acb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:19"><expr pos:start="79:5" pos:end="79:18"><name pos:start="79:5" pos:end="79:12"><name pos:start="79:5" pos:end="79:7">rcb</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:12">buf</name></name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:18">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:20"><expr pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:10"><name pos:start="81:5" pos:end="81:7">rcb</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:10">s</name></name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:19"><name pos:start="81:14" pos:end="81:16">acb</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:19">s</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:13"><name pos:start="83:5" pos:end="83:7">rcb</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:13">size</name></name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:20">size</name></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:14">(<expr pos:start="87:9" pos:end="87:13"><name pos:start="87:9" pos:end="87:13">write</name></expr>)</condition> <block pos:start="87:16" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:51">

        <expr_stmt pos:start="89:9" pos:end="89:78"><expr pos:start="89:9" pos:end="89:77"><call pos:start="89:9" pos:end="89:77"><name pos:start="89:9" pos:end="89:33">rbd_aio_create_completion</name><argument_list pos:start="89:34" pos:end="89:77">(<argument pos:start="89:35" pos:end="89:37"><expr pos:start="89:35" pos:end="89:37"><name pos:start="89:35" pos:end="89:37">rcb</name></expr></argument>, <argument pos:start="89:40" pos:end="89:72"><expr pos:start="89:40" pos:end="89:72"><operator pos:start="89:40" pos:end="89:40">(</operator><name pos:start="89:41" pos:end="89:54">rbd_callback_t</name><operator pos:start="89:55" pos:end="89:55">)</operator> <name pos:start="89:57" pos:end="89:72">rbd_finish_aiocb</name></expr></argument>, <argument pos:start="89:75" pos:end="89:76"><expr pos:start="89:75" pos:end="89:76"><operator pos:start="89:75" pos:end="89:75">&amp;</operator><name pos:start="89:76" pos:end="89:76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:51"><expr pos:start="91:9" pos:end="91:50"><call pos:start="91:9" pos:end="91:50"><name pos:start="91:9" pos:end="91:21">rbd_aio_write</name><argument_list pos:start="91:22" pos:end="91:50">(<argument pos:start="91:23" pos:end="91:30"><expr pos:start="91:23" pos:end="91:30"><name pos:start="91:23" pos:end="91:30"><name pos:start="91:23" pos:end="91:23">s</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:30">image</name></name></expr></argument>, <argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">off</name></expr></argument>, <argument pos:start="91:38" pos:end="91:41"><expr pos:start="91:38" pos:end="91:41"><name pos:start="91:38" pos:end="91:41">size</name></expr></argument>, <argument pos:start="91:44" pos:end="91:46"><expr pos:start="91:44" pos:end="91:46"><name pos:start="91:44" pos:end="91:46">buf</name></expr></argument>, <argument pos:start="91:49" pos:end="91:49"><expr pos:start="91:49" pos:end="91:49"><name pos:start="91:49" pos:end="91:49">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="99:5">else <block pos:start="93:12" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:50">

        <expr_stmt pos:start="95:9" pos:end="95:78"><expr pos:start="95:9" pos:end="95:77"><call pos:start="95:9" pos:end="95:77"><name pos:start="95:9" pos:end="95:33">rbd_aio_create_completion</name><argument_list pos:start="95:34" pos:end="95:77">(<argument pos:start="95:35" pos:end="95:37"><expr pos:start="95:35" pos:end="95:37"><name pos:start="95:35" pos:end="95:37">rcb</name></expr></argument>, <argument pos:start="95:40" pos:end="95:72"><expr pos:start="95:40" pos:end="95:72"><operator pos:start="95:40" pos:end="95:40">(</operator><name pos:start="95:41" pos:end="95:54">rbd_callback_t</name><operator pos:start="95:55" pos:end="95:55">)</operator> <name pos:start="95:57" pos:end="95:72">rbd_finish_aiocb</name></expr></argument>, <argument pos:start="95:75" pos:end="95:76"><expr pos:start="95:75" pos:end="95:76"><operator pos:start="95:75" pos:end="95:75">&amp;</operator><name pos:start="95:76" pos:end="95:76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:50"><expr pos:start="97:9" pos:end="97:49"><call pos:start="97:9" pos:end="97:49"><name pos:start="97:9" pos:end="97:20">rbd_aio_read</name><argument_list pos:start="97:21" pos:end="97:49">(<argument pos:start="97:22" pos:end="97:29"><expr pos:start="97:22" pos:end="97:29"><name pos:start="97:22" pos:end="97:29"><name pos:start="97:22" pos:end="97:22">s</name><operator pos:start="97:23" pos:end="97:24">-&gt;</operator><name pos:start="97:25" pos:end="97:29">image</name></name></expr></argument>, <argument pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:34">off</name></expr></argument>, <argument pos:start="97:37" pos:end="97:40"><expr pos:start="97:37" pos:end="97:40"><name pos:start="97:37" pos:end="97:40">size</name></expr></argument>, <argument pos:start="97:43" pos:end="97:45"><expr pos:start="97:43" pos:end="97:45"><name pos:start="97:43" pos:end="97:45">buf</name></expr></argument>, <argument pos:start="97:48" pos:end="97:48"><expr pos:start="97:48" pos:end="97:48"><name pos:start="97:48" pos:end="97:48">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="103:5" pos:end="103:24">return <expr pos:start="103:12" pos:end="103:23"><operator pos:start="103:12" pos:end="103:12">&amp;</operator><name pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:15">acb</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:23">common</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
