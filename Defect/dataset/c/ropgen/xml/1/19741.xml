<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19741.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">svq1_decode_block_intra</name><parameter_list pos:start="1:35" pos:end="3:51">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:48">GetBitContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">bitbuf</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:73"><decl pos:start="1:59" pos:end="1:73"><type pos:start="1:59" pos:end="1:73"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:73">pixels</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:44">ptrdiff_t</name></type> <name pos:start="3:46" pos:end="3:50">pitch</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:13">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:22">bit_cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21"><name pos:start="9:14" pos:end="9:17">list</name><index pos:start="9:18" pos:end="9:21">[<expr pos:start="9:19" pos:end="9:20"><literal type="number" pos:start="9:19" pos:end="9:20">63</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:20"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint32_t</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:28">codebook</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:15">entries</name><index pos:start="15:16" pos:end="15:18">[<expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>, <decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">m</name></decl>, <decl pos:start="17:18" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:18">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">stages</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:17">mean</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">unsigned</name></type> <name pos:start="23:14" pos:end="23:14">x</name></decl>, <decl pos:start="23:17" pos:end="23:17"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:17" pos:end="23:17">y</name></decl>, <decl pos:start="23:20" pos:end="23:24"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:20" pos:end="23:24">width</name></decl>, <decl pos:start="23:27" pos:end="23:32"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:27" pos:end="23:32">height</name></decl>, <decl pos:start="23:35" pos:end="23:39"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:35" pos:end="23:39">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:15">n1</name></decl>, <decl pos:start="25:18" pos:end="25:19"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:18" pos:end="25:19">n2</name></decl>, <decl pos:start="25:22" pos:end="25:23"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:22" pos:end="25:23">n3</name></decl>, <decl pos:start="25:26" pos:end="25:27"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:26" pos:end="25:27">n4</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:65">/* initialize list for breadth first processing of vectors */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:8">list</name><index pos:start="31:9" pos:end="31:11">[<expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>]</index></name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:20">pixels</name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:36">/* recursively process vector */</comment>

    <for pos:start="37:5" pos:end="125:5">for <control pos:start="37:9" pos:end="37:52">(<init pos:start="37:10" pos:end="37:40"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr><operator pos:start="37:15" pos:end="37:15">,</operator> <expr pos:start="37:17" pos:end="37:21"><name pos:start="37:17" pos:end="37:17">m</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr><operator pos:start="37:22" pos:end="37:22">,</operator> <expr pos:start="37:24" pos:end="37:28"><name pos:start="37:24" pos:end="37:24">n</name> <operator pos:start="37:26" pos:end="37:26">=</operator> <literal type="number" pos:start="37:28" pos:end="37:28">1</literal></expr><operator pos:start="37:29" pos:end="37:29">,</operator> <expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:35">level</name> <operator pos:start="37:37" pos:end="37:37">=</operator> <literal type="number" pos:start="37:39" pos:end="37:39">5</literal></expr>;</init> <condition pos:start="37:42" pos:end="37:47"><expr pos:start="37:42" pos:end="37:46"><name pos:start="37:42" pos:end="37:42">i</name> <operator pos:start="37:44" pos:end="37:44">&lt;</operator> <name pos:start="37:46" pos:end="37:46">n</name></expr>;</condition> <incr pos:start="37:49" pos:end="37:51"><expr pos:start="37:49" pos:end="37:51"><name pos:start="37:49" pos:end="37:49">i</name><operator pos:start="37:50" pos:end="37:51">++</operator></expr></incr>)</control> <block pos:start="37:54" pos:end="125:5">{<block_content pos:start="39:9" pos:end="123:9">

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><call pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:27">SVQ1_PROCESS_VECTOR</name><argument_list pos:start="39:28" pos:end="39:29">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="43:9" pos:end="43:49">/* destination address and vector size */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:11">dst</name>    <operator pos:start="45:16" pos:end="45:16">=</operator> <operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:26">uint32_t</name> <operator pos:start="45:28" pos:end="45:28">*</operator><operator pos:start="45:29" pos:end="45:29">)</operator><name pos:start="45:30" pos:end="45:36"><name pos:start="45:30" pos:end="45:33">list</name><index pos:start="45:34" pos:end="45:36">[<expr pos:start="45:35" pos:end="45:35"><name pos:start="45:35" pos:end="45:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:13">width</name>  <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">1</literal> <operator pos:start="47:20" pos:end="47:21">&lt;&lt;</operator> <operator pos:start="47:23" pos:end="47:23">(</operator><operator pos:start="47:24" pos:end="47:24">(</operator><literal type="number" pos:start="47:25" pos:end="47:27">4</literal> <operator pos:start="47:27" pos:end="47:27">+</operator> <name pos:start="47:29" pos:end="47:33">level</name><operator pos:start="47:34" pos:end="47:34">)</operator> <operator pos:start="47:36" pos:end="47:36">/</operator> <literal type="number" pos:start="47:38" pos:end="47:38">2</literal><operator pos:start="47:39" pos:end="47:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:14">height</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">1</literal> <operator pos:start="49:20" pos:end="49:21">&lt;&lt;</operator> <operator pos:start="49:23" pos:end="49:23">(</operator><operator pos:start="49:24" pos:end="49:24">(</operator><literal type="number" pos:start="49:25" pos:end="49:27">3</literal> <operator pos:start="49:27" pos:end="49:27">+</operator> <name pos:start="49:29" pos:end="49:33">level</name><operator pos:start="49:34" pos:end="49:34">)</operator> <operator pos:start="49:36" pos:end="49:36">/</operator> <literal type="number" pos:start="49:38" pos:end="49:38">2</literal><operator pos:start="49:39" pos:end="49:39">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:69">/* get number of stages (-1 skips vector, 0 for mean only) */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:80"><expr pos:start="55:9" pos:end="55:79"><name pos:start="55:9" pos:end="55:14">stages</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:75"><name pos:start="55:18" pos:end="55:25">get_vlc2</name><argument_list pos:start="55:26" pos:end="55:75">(<argument pos:start="55:27" pos:end="55:32"><expr pos:start="55:27" pos:end="55:32"><name pos:start="55:27" pos:end="55:32">bitbuf</name></expr></argument>, <argument pos:start="55:35" pos:end="55:68"><expr pos:start="55:35" pos:end="55:68"><name pos:start="55:35" pos:end="55:62"><name pos:start="55:35" pos:end="55:55">svq1_intra_multistage</name><index pos:start="55:56" pos:end="55:62">[<expr pos:start="55:57" pos:end="55:61"><name pos:start="55:57" pos:end="55:61">level</name></expr>]</index></name><operator pos:start="55:63" pos:end="55:63">.</operator><name pos:start="55:64" pos:end="55:68">table</name></expr></argument>, <argument pos:start="55:71" pos:end="55:71"><expr pos:start="55:71" pos:end="55:71"><literal type="number" pos:start="55:71" pos:end="55:71">3</literal></expr></argument>, <argument pos:start="55:74" pos:end="55:74"><expr pos:start="55:74" pos:end="55:74"><literal type="number" pos:start="55:74" pos:end="55:74">3</literal></expr></argument>)</argument_list></call> <operator pos:start="55:77" pos:end="55:77">-</operator> <literal type="number" pos:start="55:79" pos:end="55:79">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:25">(<expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:18">stages</name> <operator pos:start="59:20" pos:end="59:21">==</operator> <operator pos:start="59:23" pos:end="59:23">-</operator><literal type="number" pos:start="59:24" pos:end="59:24">1</literal></expr>)</condition> <block pos:start="59:27" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:21">

            <for pos:start="61:13" pos:end="63:56">for <control pos:start="61:17" pos:end="61:40">(<init pos:start="61:18" pos:end="61:23"><expr pos:start="61:18" pos:end="61:22"><name pos:start="61:18" pos:end="61:18">y</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">0</literal></expr>;</init> <condition pos:start="61:25" pos:end="61:35"><expr pos:start="61:25" pos:end="61:34"><name pos:start="61:25" pos:end="61:25">y</name> <operator pos:start="61:27" pos:end="61:27">&lt;</operator> <name pos:start="61:29" pos:end="61:34">height</name></expr>;</condition> <incr pos:start="61:37" pos:end="61:39"><expr pos:start="61:37" pos:end="61:39"><name pos:start="61:37" pos:end="61:37">y</name><operator pos:start="61:38" pos:end="61:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="63:17" pos:end="63:56"><block_content pos:start="63:17" pos:end="63:56">

                <expr_stmt pos:start="63:17" pos:end="63:56"><expr pos:start="63:17" pos:end="63:55"><call pos:start="63:17" pos:end="63:55"><name pos:start="63:17" pos:end="63:22">memset</name><argument_list pos:start="63:23" pos:end="63:55">(<argument pos:start="63:24" pos:end="63:44"><expr pos:start="63:24" pos:end="63:44"><operator pos:start="63:24" pos:end="63:24">&amp;</operator><name pos:start="63:25" pos:end="63:44"><name pos:start="63:25" pos:end="63:27">dst</name><index pos:start="63:28" pos:end="63:44">[<expr pos:start="63:29" pos:end="63:43"><name pos:start="63:29" pos:end="63:29">y</name> <operator pos:start="63:31" pos:end="63:31">*</operator> <operator pos:start="63:33" pos:end="63:33">(</operator><name pos:start="63:34" pos:end="63:38">pitch</name> <operator pos:start="63:40" pos:end="63:40">/</operator> <literal type="number" pos:start="63:42" pos:end="63:42">4</literal><operator pos:start="63:43" pos:end="63:43">)</operator></expr>]</index></name></expr></argument>, <argument pos:start="63:47" pos:end="63:47"><expr pos:start="63:47" pos:end="63:47"><literal type="number" pos:start="63:47" pos:end="63:47">0</literal></expr></argument>, <argument pos:start="63:50" pos:end="63:54"><expr pos:start="63:50" pos:end="63:54"><name pos:start="63:50" pos:end="63:54">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <continue pos:start="65:13" pos:end="65:21">continue;</continue>   <comment type="block" pos:start="65:25" pos:end="65:41">/* skip vector */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:39">(<expr pos:start="71:13" pos:end="71:38"><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:19">stages</name> <operator pos:start="71:21" pos:end="71:21">&gt;</operator> <literal type="number" pos:start="71:23" pos:end="71:23">0</literal> <operator pos:start="71:25" pos:end="71:26">&amp;&amp;</operator> <name pos:start="71:28" pos:end="71:32">level</name> <operator pos:start="71:34" pos:end="71:35">&gt;=</operator> <literal type="number" pos:start="71:37" pos:end="71:37">4</literal><operator pos:start="71:38" pos:end="71:38">)</operator></expr>)</condition> <block pos:start="71:41" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:39">

            <expr_stmt pos:start="73:13" pos:end="77:35"><expr pos:start="73:13" pos:end="77:34"><call pos:start="73:13" pos:end="77:34"><name pos:start="73:13" pos:end="73:19">ff_dlog</name><argument_list pos:start="73:20" pos:end="77:34">(<argument pos:start="73:21" pos:end="73:24"><expr pos:start="73:21" pos:end="73:24"><name pos:start="73:21" pos:end="73:24">NULL</name></expr></argument>,

                    <argument pos:start="75:21" pos:end="75:91"><expr pos:start="75:21" pos:end="75:91"><literal type="string" pos:start="75:21" pos:end="75:91">"Error (svq1_decode_block_intra): invalid vector: stages=%i level=%i\n"</literal></expr></argument>,

                    <argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stages</name></expr></argument>, <argument pos:start="77:29" pos:end="77:33"><expr pos:start="77:29" pos:end="77:33"><name pos:start="77:29" pos:end="77:33">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:39">return <expr pos:start="79:20" pos:end="79:38"><name pos:start="79:20" pos:end="79:38">AVERROR_INVALIDDATA</name></expr>;</return>  <comment type="block" pos:start="79:42" pos:end="79:61">/* invalid vector */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><call pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:18">av_assert0</name><argument_list pos:start="83:19" pos:end="83:31">(<argument pos:start="83:20" pos:end="83:30"><expr pos:start="83:20" pos:end="83:30"><name pos:start="83:20" pos:end="83:25">stages</name> <operator pos:start="83:27" pos:end="83:28">&gt;=</operator> <literal type="number" pos:start="83:30" pos:end="83:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:61"><expr pos:start="87:9" pos:end="87:60"><name pos:start="87:9" pos:end="87:12">mean</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:60"><name pos:start="87:16" pos:end="87:23">get_vlc2</name><argument_list pos:start="87:24" pos:end="87:60">(<argument pos:start="87:25" pos:end="87:30"><expr pos:start="87:25" pos:end="87:30"><name pos:start="87:25" pos:end="87:30">bitbuf</name></expr></argument>, <argument pos:start="87:33" pos:end="87:53"><expr pos:start="87:33" pos:end="87:53"><name pos:start="87:33" pos:end="87:53"><name pos:start="87:33" pos:end="87:47">svq1_intra_mean</name><operator pos:start="87:48" pos:end="87:48">.</operator><name pos:start="87:49" pos:end="87:53">table</name></name></expr></argument>, <argument pos:start="87:56" pos:end="87:56"><expr pos:start="87:56" pos:end="87:56"><literal type="number" pos:start="87:56" pos:end="87:56">8</literal></expr></argument>, <argument pos:start="87:59" pos:end="87:59"><expr pos:start="87:59" pos:end="87:59"><literal type="number" pos:start="87:59" pos:end="87:59">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="123:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:24">(<expr pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:18">stages</name> <operator pos:start="91:20" pos:end="91:21">==</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>)</condition> <block pos:start="91:26" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:59">

            <for pos:start="93:13" pos:end="95:59">for <control pos:start="93:17" pos:end="93:40">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">y</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:35"><expr pos:start="93:25" pos:end="93:34"><name pos:start="93:25" pos:end="93:25">y</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <name pos:start="93:29" pos:end="93:34">height</name></expr>;</condition> <incr pos:start="93:37" pos:end="93:39"><expr pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:37">y</name><operator pos:start="93:38" pos:end="93:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="95:17" pos:end="95:59"><block_content pos:start="95:17" pos:end="95:59">

                <expr_stmt pos:start="95:17" pos:end="95:59"><expr pos:start="95:17" pos:end="95:58"><call pos:start="95:17" pos:end="95:58"><name pos:start="95:17" pos:end="95:22">memset</name><argument_list pos:start="95:23" pos:end="95:58">(<argument pos:start="95:24" pos:end="95:44"><expr pos:start="95:24" pos:end="95:44"><operator pos:start="95:24" pos:end="95:24">&amp;</operator><name pos:start="95:25" pos:end="95:44"><name pos:start="95:25" pos:end="95:27">dst</name><index pos:start="95:28" pos:end="95:44">[<expr pos:start="95:29" pos:end="95:43"><name pos:start="95:29" pos:end="95:29">y</name> <operator pos:start="95:31" pos:end="95:31">*</operator> <operator pos:start="95:33" pos:end="95:33">(</operator><name pos:start="95:34" pos:end="95:38">pitch</name> <operator pos:start="95:40" pos:end="95:40">/</operator> <literal type="number" pos:start="95:42" pos:end="95:42">4</literal><operator pos:start="95:43" pos:end="95:43">)</operator></expr>]</index></name></expr></argument>, <argument pos:start="95:47" pos:end="95:50"><expr pos:start="95:47" pos:end="95:50"><name pos:start="95:47" pos:end="95:50">mean</name></expr></argument>, <argument pos:start="95:53" pos:end="95:57"><expr pos:start="95:53" pos:end="95:57"><name pos:start="95:53" pos:end="95:57">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="123:9">else <block pos:start="97:16" pos:end="123:9">{<block_content pos:start="99:13" pos:end="121:13">

            <expr_stmt pos:start="99:13" pos:end="99:64"><expr pos:start="99:13" pos:end="99:63"><call pos:start="99:13" pos:end="99:63"><name pos:start="99:13" pos:end="99:38">SVQ1_CALC_CODEBOOK_ENTRIES</name><argument_list pos:start="99:39" pos:end="99:63">(<argument pos:start="99:40" pos:end="99:62"><expr pos:start="99:40" pos:end="99:62"><name pos:start="99:40" pos:end="99:62">ff_svq1_intra_codebooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="103:13" pos:end="121:13">for <control pos:start="103:17" pos:end="103:40">(<init pos:start="103:18" pos:end="103:23"><expr pos:start="103:18" pos:end="103:22"><name pos:start="103:18" pos:end="103:18">y</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">0</literal></expr>;</init> <condition pos:start="103:25" pos:end="103:35"><expr pos:start="103:25" pos:end="103:34"><name pos:start="103:25" pos:end="103:25">y</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <name pos:start="103:29" pos:end="103:34">height</name></expr>;</condition> <incr pos:start="103:37" pos:end="103:39"><expr pos:start="103:37" pos:end="103:39"><name pos:start="103:37" pos:end="103:37">y</name><operator pos:start="103:38" pos:end="103:39">++</operator></expr></incr>)</control> <block pos:start="103:42" pos:end="121:13">{<block_content pos:start="105:17" pos:end="119:33">

                <for pos:start="105:17" pos:end="117:17">for <control pos:start="105:21" pos:end="105:59">(<init pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:26"><name pos:start="105:22" pos:end="105:22">x</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>;</init> <condition pos:start="105:29" pos:end="105:42"><expr pos:start="105:29" pos:end="105:41"><name pos:start="105:29" pos:end="105:29">x</name> <operator pos:start="105:31" pos:end="105:31">&lt;</operator> <name pos:start="105:33" pos:end="105:37">width</name> <operator pos:start="105:39" pos:end="105:39">/</operator> <literal type="number" pos:start="105:41" pos:end="105:41">4</literal></expr>;</condition> <incr pos:start="105:44" pos:end="105:58"><expr pos:start="105:44" pos:end="105:46"><name pos:start="105:44" pos:end="105:44">x</name><operator pos:start="105:45" pos:end="105:46">++</operator></expr><operator pos:start="105:47" pos:end="105:47">,</operator> <expr pos:start="105:49" pos:end="105:58"><name pos:start="105:49" pos:end="105:56">codebook</name><operator pos:start="105:57" pos:end="105:58">++</operator></expr></incr>)</control> <block pos:start="105:61" pos:end="117:17">{<block_content pos:start="107:21" pos:end="115:42">

                    <expr_stmt pos:start="107:21" pos:end="107:28"><expr pos:start="107:21" pos:end="107:27"><name pos:start="107:21" pos:end="107:22">n1</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <name pos:start="107:26" pos:end="107:27">n4</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:28"><expr pos:start="109:21" pos:end="109:27"><name pos:start="109:21" pos:end="109:22">n2</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:27">n4</name></expr>;</expr_stmt>

                    <macro pos:start="111:21" pos:end="111:39"><name pos:start="111:21" pos:end="111:37">SVQ1_ADD_CODEBOOK</name><argument_list pos:start="111:38" pos:end="111:39">()</argument_list></macro>

                    <comment type="block" pos:start="113:21" pos:end="113:38">/* store result */</comment>

                    <expr_stmt pos:start="115:21" pos:end="115:42"><expr pos:start="115:21" pos:end="115:41"><name pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:23">dst</name><index pos:start="115:24" pos:end="115:26">[<expr pos:start="115:25" pos:end="115:25"><name pos:start="115:25" pos:end="115:25">x</name></expr>]</index></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:31">n1</name> <operator pos:start="115:33" pos:end="115:34">&lt;&lt;</operator> <literal type="number" pos:start="115:36" pos:end="115:36">8</literal> <operator pos:start="115:38" pos:end="115:38">|</operator> <name pos:start="115:40" pos:end="115:41">n2</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="119:17" pos:end="119:33"><expr pos:start="119:17" pos:end="119:32"><name pos:start="119:17" pos:end="119:19">dst</name> <operator pos:start="119:21" pos:end="119:22">+=</operator> <name pos:start="119:24" pos:end="119:28">pitch</name> <operator pos:start="119:30" pos:end="119:30">/</operator> <literal type="number" pos:start="119:32" pos:end="119:32">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
