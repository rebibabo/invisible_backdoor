<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10908.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">spapr_core_plug</name><parameter_list pos:start="1:28" pos:end="3:41">(<parameter pos:start="1:29" pos:end="1:55"><decl pos:start="1:29" pos:end="1:55"><type pos:start="1:29" pos:end="1:55"><name pos:start="1:29" pos:end="1:42">HotplugHandler</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:55">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:73"><decl pos:start="1:58" pos:end="1:73"><type pos:start="1:58" pos:end="1:73"><name pos:start="1:58" pos:end="1:68">DeviceState</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">dev</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:33">Error</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier><modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:5">

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRMachineState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">spapr</name> <init pos:start="7:30" pos:end="7:65">= <expr pos:start="7:32" pos:end="7:65"><call pos:start="7:32" pos:end="7:65"><name pos:start="7:32" pos:end="7:44">SPAPR_MACHINE</name><argument_list pos:start="7:45" pos:end="7:65">(<argument pos:start="7:46" pos:end="7:64"><expr pos:start="7:46" pos:end="7:64"><call pos:start="7:46" pos:end="7:64"><name pos:start="7:46" pos:end="7:51">OBJECT</name><argument_list pos:start="7:52" pos:end="7:64">(<argument pos:start="7:53" pos:end="7:63"><expr pos:start="7:53" pos:end="7:63"><name pos:start="7:53" pos:end="7:63">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineClass</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">mc</name> <init pos:start="9:22" pos:end="9:47">= <expr pos:start="9:24" pos:end="9:47"><call pos:start="9:24" pos:end="9:47"><name pos:start="9:24" pos:end="9:40">MACHINE_GET_CLASS</name><argument_list pos:start="9:41" pos:end="9:47">(<argument pos:start="9:42" pos:end="9:46"><expr pos:start="9:42" pos:end="9:46"><name pos:start="9:42" pos:end="9:46">spapr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">sPAPRMachineClass</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:26">smc</name> <init pos:start="11:28" pos:end="11:52">= <expr pos:start="11:30" pos:end="11:52"><call pos:start="11:30" pos:end="11:52"><name pos:start="11:30" pos:end="11:48">SPAPR_MACHINE_CLASS</name><argument_list pos:start="11:49" pos:end="11:52">(<argument pos:start="11:50" pos:end="11:51"><expr pos:start="11:50" pos:end="11:51"><name pos:start="11:50" pos:end="11:51">mc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">sPAPRCPUCore</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:22">core</name> <init pos:start="13:24" pos:end="13:52">= <expr pos:start="13:26" pos:end="13:52"><call pos:start="13:26" pos:end="13:52"><name pos:start="13:26" pos:end="13:39">SPAPR_CPU_CORE</name><argument_list pos:start="13:40" pos:end="13:52">(<argument pos:start="13:41" pos:end="13:51"><expr pos:start="13:41" pos:end="13:51"><call pos:start="13:41" pos:end="13:51"><name pos:start="13:41" pos:end="13:46">OBJECT</name><argument_list pos:start="13:47" pos:end="13:51">(<argument pos:start="13:48" pos:end="13:50"><expr pos:start="13:48" pos:end="13:50"><name pos:start="13:48" pos:end="13:50">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">CPUCore</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:15">cc</name> <init pos:start="15:17" pos:end="15:31">= <expr pos:start="15:19" pos:end="15:31"><call pos:start="15:19" pos:end="15:31"><name pos:start="15:19" pos:end="15:26">CPU_CORE</name><argument_list pos:start="15:27" pos:end="15:31">(<argument pos:start="15:28" pos:end="15:30"><expr pos:start="15:28" pos:end="15:30"><name pos:start="15:28" pos:end="15:30">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">cs</name> <init pos:start="17:18" pos:end="17:37">= <expr pos:start="17:20" pos:end="17:37"><call pos:start="17:20" pos:end="17:37"><name pos:start="17:20" pos:end="17:22">CPU</name><argument_list pos:start="17:23" pos:end="17:37">(<argument pos:start="17:24" pos:end="17:36"><expr pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:27">core</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:36">threads</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">sPAPRDRConnector</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">fdt</name> <init pos:start="23:15" pos:end="23:20">= <expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">fdt_offset</name> <init pos:start="25:20" pos:end="25:22">= <expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:35"><decl pos:start="27:5" pos:end="27:34"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">smt</name> <init pos:start="27:13" pos:end="27:34">= <expr pos:start="27:15" pos:end="27:34"><call pos:start="27:15" pos:end="27:34"><name pos:start="27:15" pos:end="27:32">kvmppc_smt_threads</name><argument_list pos:start="27:33" pos:end="27:34">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:13">CPUArchId</name> <modifier pos:start="29:15" pos:end="29:15">*</modifier></type><name pos:start="29:16" pos:end="29:24">core_slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:14"><decl pos:start="31:5" pos:end="31:13"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:48"><decl pos:start="33:5" pos:end="33:47"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">bool</name></type> <name pos:start="33:10" pos:end="33:19">hotplugged</name> <init pos:start="33:21" pos:end="33:47">= <expr pos:start="33:23" pos:end="33:47"><call pos:start="33:23" pos:end="33:47"><name pos:start="33:23" pos:end="33:42">spapr_drc_hotplugged</name><argument_list pos:start="33:43" pos:end="33:47">(<argument pos:start="33:44" pos:end="33:46"><expr pos:start="33:44" pos:end="33:46"><name pos:start="33:44" pos:end="33:46">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:79"><expr pos:start="37:5" pos:end="37:78"><name pos:start="37:5" pos:end="37:13">core_slot</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:78"><name pos:start="37:17" pos:end="37:35">spapr_find_cpu_slot</name><argument_list pos:start="37:36" pos:end="37:78">(<argument pos:start="37:37" pos:end="37:56"><expr pos:start="37:37" pos:end="37:56"><call pos:start="37:37" pos:end="37:56"><name pos:start="37:37" pos:end="37:43">MACHINE</name><argument_list pos:start="37:44" pos:end="37:56">(<argument pos:start="37:45" pos:end="37:55"><expr pos:start="37:45" pos:end="37:55"><name pos:start="37:45" pos:end="37:55">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:59" pos:end="37:69"><expr pos:start="37:59" pos:end="37:69"><name pos:start="37:59" pos:end="37:69"><name pos:start="37:59" pos:end="37:60">cc</name><operator pos:start="37:61" pos:end="37:62">-&gt;</operator><name pos:start="37:63" pos:end="37:69">core_id</name></name></expr></argument>, <argument pos:start="37:72" pos:end="37:77"><expr pos:start="37:72" pos:end="37:77"><operator pos:start="37:72" pos:end="37:72">&amp;</operator><name pos:start="37:73" pos:end="37:77">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:18">core_slot</name></expr>)</condition> <block pos:start="39:21" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:15">

        <expr_stmt pos:start="41:9" pos:end="43:32"><expr pos:start="41:9" pos:end="43:31"><call pos:start="41:9" pos:end="43:31"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="43:31">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:67"><expr pos:start="41:26" pos:end="41:67"><literal type="string" pos:start="41:26" pos:end="41:67">"Unable to find CPU core with core-id: %d"</literal></expr></argument>,

                   <argument pos:start="43:20" pos:end="43:30"><expr pos:start="43:20" pos:end="43:30"><name pos:start="43:20" pos:end="43:30"><name pos:start="43:20" pos:end="43:21">cc</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:30">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:59"><expr pos:start="49:5" pos:end="49:58"><name pos:start="49:5" pos:end="49:7">drc</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:58"><name pos:start="49:11" pos:end="49:25">spapr_drc_by_id</name><argument_list pos:start="49:26" pos:end="49:58">(<argument pos:start="49:27" pos:end="49:44"><expr pos:start="49:27" pos:end="49:44"><name pos:start="49:27" pos:end="49:44">TYPE_SPAPR_DRC_CPU</name></expr></argument>, <argument pos:start="49:47" pos:end="49:57"><expr pos:start="49:47" pos:end="49:57"><name pos:start="49:47" pos:end="49:51">index</name> <operator pos:start="49:53" pos:end="49:53">*</operator> <name pos:start="49:55" pos:end="49:57">smt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:48"><expr pos:start="53:5" pos:end="53:47"><call pos:start="53:5" pos:end="53:47"><name pos:start="53:5" pos:end="53:12">g_assert</name><argument_list pos:start="53:13" pos:end="53:47">(<argument pos:start="53:14" pos:end="53:46"><expr pos:start="53:14" pos:end="53:46"><name pos:start="53:14" pos:end="53:16">drc</name> <operator pos:start="53:18" pos:end="53:19">||</operator> <operator pos:start="53:21" pos:end="53:21">!</operator><name pos:start="53:22" pos:end="53:46"><name pos:start="53:22" pos:end="53:23">mc</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:46">has_hotpluggable_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:64"><expr pos:start="57:5" pos:end="57:63"><name pos:start="57:5" pos:end="57:7">fdt</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:63"><name pos:start="57:11" pos:end="57:39">spapr_populate_hotplug_cpu_dt</name><argument_list pos:start="57:40" pos:end="57:63">(<argument pos:start="57:41" pos:end="57:42"><expr pos:start="57:41" pos:end="57:42"><name pos:start="57:41" pos:end="57:42">cs</name></expr></argument>, <argument pos:start="57:45" pos:end="57:55"><expr pos:start="57:45" pos:end="57:55"><operator pos:start="57:45" pos:end="57:45">&amp;</operator><name pos:start="57:46" pos:end="57:55">fdt_offset</name></expr></argument>, <argument pos:start="57:58" pos:end="57:62"><expr pos:start="57:58" pos:end="57:62"><name pos:start="57:58" pos:end="57:62">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="95:5"><if pos:start="61:5" pos:end="95:5">if <condition pos:start="61:8" pos:end="61:12">(<expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">drc</name></expr>)</condition> <block pos:start="61:14" pos:end="95:5">{<block_content pos:start="63:9" pos:end="93:9">

        <expr_stmt pos:start="63:9" pos:end="63:64"><expr pos:start="63:9" pos:end="63:63"><call pos:start="63:9" pos:end="63:63"><name pos:start="63:9" pos:end="63:24">spapr_drc_attach</name><argument_list pos:start="63:25" pos:end="63:63">(<argument pos:start="63:26" pos:end="63:28"><expr pos:start="63:26" pos:end="63:28"><name pos:start="63:26" pos:end="63:28">drc</name></expr></argument>, <argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">dev</name></expr></argument>, <argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:38">fdt</name></expr></argument>, <argument pos:start="63:41" pos:end="63:50"><expr pos:start="63:41" pos:end="63:50"><name pos:start="63:41" pos:end="63:50">fdt_offset</name></expr></argument>, <argument pos:start="63:53" pos:end="63:62"><expr pos:start="63:53" pos:end="63:62"><operator pos:start="63:53" pos:end="63:53">&amp;</operator><name pos:start="63:54" pos:end="63:62">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:21">local_err</name></expr>)</condition> <block pos:start="65:24" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:19">

            <expr_stmt pos:start="67:13" pos:end="67:24"><expr pos:start="67:13" pos:end="67:23"><call pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:18">g_free</name><argument_list pos:start="67:19" pos:end="67:23">(<argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:45"><expr pos:start="69:13" pos:end="69:44"><call pos:start="69:13" pos:end="69:44"><name pos:start="69:13" pos:end="69:27">error_propagate</name><argument_list pos:start="69:28" pos:end="69:44">(<argument pos:start="69:29" pos:end="69:32"><expr pos:start="69:29" pos:end="69:32"><name pos:start="69:29" pos:end="69:32">errp</name></expr></argument>, <argument pos:start="69:35" pos:end="69:43"><expr pos:start="69:35" pos:end="69:43"><name pos:start="69:35" pos:end="69:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="77:9" pos:end="93:9"><if pos:start="77:9" pos:end="89:9">if <condition pos:start="77:12" pos:end="77:23">(<expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:22">hotplugged</name></expr>)</condition> <block pos:start="77:25" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:48">

            <comment type="block" pos:start="79:13" pos:end="85:15">/*

             * Send hotplug notification interrupt to the guest only

             * in case of hotplugged CPUs.

             */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:48"><expr pos:start="87:13" pos:end="87:47"><call pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:42">spapr_hotplug_req_add_by_index</name><argument_list pos:start="87:43" pos:end="87:47">(<argument pos:start="87:44" pos:end="87:46"><expr pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="93:9">else <block pos:start="89:16" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:33">

            <expr_stmt pos:start="91:13" pos:end="91:33"><expr pos:start="91:13" pos:end="91:32"><call pos:start="91:13" pos:end="91:32"><name pos:start="91:13" pos:end="91:27">spapr_drc_reset</name><argument_list pos:start="91:28" pos:end="91:32">(<argument pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><name pos:start="91:29" pos:end="91:31">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:33"><expr pos:start="99:5" pos:end="99:32"><name pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:13">core_slot</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:18">cpu</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <call pos:start="99:22" pos:end="99:32"><name pos:start="99:22" pos:end="99:27">OBJECT</name><argument_list pos:start="99:28" pos:end="99:32">(<argument pos:start="99:29" pos:end="99:31"><expr pos:start="99:29" pos:end="99:31"><name pos:start="99:29" pos:end="99:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="129:5"><if pos:start="103:5" pos:end="129:5">if <condition pos:start="103:8" pos:end="103:38">(<expr pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:11">smc</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:37">pre_2_10_has_unused_icps</name></name></expr>)</condition> <block pos:start="103:40" pos:end="129:5">{<block_content pos:start="105:9" pos:end="127:9">

        <decl_stmt pos:start="105:9" pos:end="105:70"><decl pos:start="105:9" pos:end="105:69"><type pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:25">sPAPRCPUCoreClass</name> <modifier pos:start="105:27" pos:end="105:27">*</modifier></type><name pos:start="105:28" pos:end="105:30">scc</name> <init pos:start="105:32" pos:end="105:69">= <expr pos:start="105:34" pos:end="105:69"><call pos:start="105:34" pos:end="105:69"><name pos:start="105:34" pos:end="105:57">SPAPR_CPU_CORE_GET_CLASS</name><argument_list pos:start="105:58" pos:end="105:69">(<argument pos:start="105:59" pos:end="105:68"><expr pos:start="105:59" pos:end="105:68"><call pos:start="105:59" pos:end="105:68"><name pos:start="105:59" pos:end="105:64">OBJECT</name><argument_list pos:start="105:65" pos:end="105:68">(<argument pos:start="105:66" pos:end="105:67"><expr pos:start="105:66" pos:end="105:67"><name pos:start="105:66" pos:end="105:67">cc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:69"><decl pos:start="107:9" pos:end="107:68"><type pos:start="107:9" pos:end="107:20"><specifier pos:start="107:9" pos:end="107:13">const</specifier> <name pos:start="107:15" pos:end="107:18">char</name> <modifier pos:start="107:20" pos:end="107:20">*</modifier></type><name pos:start="107:21" pos:end="107:28">typename</name> <init pos:start="107:30" pos:end="107:68">= <expr pos:start="107:32" pos:end="107:68"><call pos:start="107:32" pos:end="107:68"><name pos:start="107:32" pos:end="107:52">object_class_get_name</name><argument_list pos:start="107:53" pos:end="107:68">(<argument pos:start="107:54" pos:end="107:67"><expr pos:start="107:54" pos:end="107:67"><name pos:start="107:54" pos:end="107:67"><name pos:start="107:54" pos:end="107:56">scc</name><operator pos:start="107:57" pos:end="107:58">-&gt;</operator><name pos:start="107:59" pos:end="107:67">cpu_class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:62"><decl pos:start="109:9" pos:end="109:61"><type pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:14">size_t</name></type> <name pos:start="109:16" pos:end="109:19">size</name> <init pos:start="109:21" pos:end="109:61">= <expr pos:start="109:23" pos:end="109:61"><call pos:start="109:23" pos:end="109:61"><name pos:start="109:23" pos:end="109:51">object_type_get_instance_size</name><argument_list pos:start="109:52" pos:end="109:61">(<argument pos:start="109:53" pos:end="109:60"><expr pos:start="109:53" pos:end="109:60"><name pos:start="109:53" pos:end="109:60">typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:14"><decl pos:start="111:9" pos:end="111:13"><type pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">int</name></type> <name pos:start="111:13" pos:end="111:13">i</name></decl>;</decl_stmt>



        <for pos:start="115:9" pos:end="127:9">for <control pos:start="115:13" pos:end="115:44">(<init pos:start="115:14" pos:end="115:19"><expr pos:start="115:14" pos:end="115:18"><name pos:start="115:14" pos:end="115:14">i</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <literal type="number" pos:start="115:18" pos:end="115:18">0</literal></expr>;</init> <condition pos:start="115:21" pos:end="115:39"><expr pos:start="115:21" pos:end="115:38"><name pos:start="115:21" pos:end="115:21">i</name> <operator pos:start="115:23" pos:end="115:23">&lt;</operator> <name pos:start="115:25" pos:end="115:38"><name pos:start="115:25" pos:end="115:26">cc</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:38">nr_threads</name></name></expr>;</condition> <incr pos:start="115:41" pos:end="115:43"><expr pos:start="115:41" pos:end="115:43"><name pos:start="115:41" pos:end="115:41">i</name><operator pos:start="115:42" pos:end="115:43">++</operator></expr></incr>)</control> <block pos:start="115:46" pos:end="127:9">{<block_content pos:start="117:13" pos:end="125:65">

            <decl_stmt pos:start="117:13" pos:end="117:51"><decl pos:start="117:13" pos:end="117:50"><type pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:24">sPAPRCPUCore</name> <modifier pos:start="117:26" pos:end="117:26">*</modifier></type><name pos:start="117:27" pos:end="117:28">sc</name> <init pos:start="117:30" pos:end="117:50">= <expr pos:start="117:32" pos:end="117:50"><call pos:start="117:32" pos:end="117:50"><name pos:start="117:32" pos:end="117:45">SPAPR_CPU_CORE</name><argument_list pos:start="117:46" pos:end="117:50">(<argument pos:start="117:47" pos:end="117:49"><expr pos:start="117:47" pos:end="117:49"><name pos:start="117:47" pos:end="117:49">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:47"><decl pos:start="119:13" pos:end="119:46"><type pos:start="119:13" pos:end="119:18"><name pos:start="119:13" pos:end="119:16">void</name> <modifier pos:start="119:18" pos:end="119:18">*</modifier></type><name pos:start="119:19" pos:end="119:21">obj</name> <init pos:start="119:23" pos:end="119:46">= <expr pos:start="119:25" pos:end="119:46"><name pos:start="119:25" pos:end="119:35"><name pos:start="119:25" pos:end="119:26">sc</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:35">threads</name></name> <operator pos:start="119:37" pos:end="119:37">+</operator> <name pos:start="119:39" pos:end="119:39">i</name> <operator pos:start="119:41" pos:end="119:41">*</operator> <name pos:start="119:43" pos:end="119:46">size</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:14">cs</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <call pos:start="123:18" pos:end="123:25"><name pos:start="123:18" pos:end="123:20">CPU</name><argument_list pos:start="123:21" pos:end="123:25">(<argument pos:start="123:22" pos:end="123:24"><expr pos:start="123:22" pos:end="123:24"><name pos:start="123:22" pos:end="123:24">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:65"><expr pos:start="125:13" pos:end="125:64"><call pos:start="125:13" pos:end="125:64"><name pos:start="125:13" pos:end="125:49">pre_2_10_vmstate_unregister_dummy_icp</name><argument_list pos:start="125:50" pos:end="125:64">(<argument pos:start="125:51" pos:end="125:63"><expr pos:start="125:51" pos:end="125:63"><name pos:start="125:51" pos:end="125:63"><name pos:start="125:51" pos:end="125:52">cs</name><operator pos:start="125:53" pos:end="125:54">-&gt;</operator><name pos:start="125:55" pos:end="125:63">cpu_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
