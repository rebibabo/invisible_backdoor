<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13614.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">libx265_encode_frame</name><parameter_list pos:start="1:32" pos:end="2:68">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:63">AVPacket</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">pkt</name></decl></parameter>,
                                <parameter pos:start="2:33" pos:end="2:50"><decl pos:start="2:33" pos:end="2:50"><type pos:start="2:33" pos:end="2:50"><specifier pos:start="2:33" pos:end="2:37">const</specifier> <name pos:start="2:39" pos:end="2:45">AVFrame</name> <modifier pos:start="2:47" pos:end="2:47">*</modifier></type><name pos:start="2:48" pos:end="2:50">pic</name></decl></parameter>, <parameter pos:start="2:53" pos:end="2:67"><decl pos:start="2:53" pos:end="2:67"><type pos:start="2:53" pos:end="2:67"><name pos:start="2:53" pos:end="2:55">int</name> <modifier pos:start="2:57" pos:end="2:57">*</modifier></type><name pos:start="2:58" pos:end="2:67">got_packet</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="4:5" pos:end="50:13">
    <decl_stmt pos:start="4:5" pos:end="4:43"><decl pos:start="4:5" pos:end="4:42"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">libx265Context</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:23">ctx</name> <init pos:start="4:25" pos:end="4:42">= <expr pos:start="4:27" pos:end="4:42"><name pos:start="4:27" pos:end="4:42"><name pos:start="4:27" pos:end="4:31">avctx</name><operator pos:start="4:32" pos:end="4:33">-&gt;</operator><name pos:start="4:34" pos:end="4:42">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">x265_picture</name></type> <name pos:start="5:18" pos:end="5:24">x265pic</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:41"><decl pos:start="6:5" pos:end="6:40"><type pos:start="6:5" pos:end="6:16"><name pos:start="6:5" pos:end="6:16">x265_picture</name></type> <name pos:start="6:18" pos:end="6:28">x265pic_out</name> <init pos:start="6:30" pos:end="6:40">= <expr pos:start="6:32" pos:end="6:40"><block pos:start="6:32" pos:end="6:40">{ <expr pos:start="6:34" pos:end="6:38"><block pos:start="6:34" pos:end="6:38">{ <expr pos:start="6:36" pos:end="6:36"><literal type="number" pos:start="6:36" pos:end="6:36">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">x265_nal</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">nal</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:17"><decl pos:start="8:5" pos:end="8:16"><type pos:start="8:5" pos:end="8:13"><name pos:start="8:5" pos:end="8:11">uint8_t</name> <modifier pos:start="8:13" pos:end="8:13">*</modifier></type><name pos:start="8:14" pos:end="8:16">dst</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">payload</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:13"><decl pos:start="10:5" pos:end="10:12"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:12">nnal</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:10"><decl pos:start="12:5" pos:end="12:9"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:9">i</name></decl>;</decl_stmt>
    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:12">(<expr pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">pic</name></expr>)</condition> <block pos:start="13:14" pos:end="19:5">{<block_content pos:start="14:9" pos:end="18:31">
        <for pos:start="14:9" pos:end="17:9">for <control pos:start="14:13" pos:end="14:31">(<init pos:start="14:14" pos:end="14:19"><expr pos:start="14:14" pos:end="14:18"><name pos:start="14:14" pos:end="14:14">i</name> <operator pos:start="14:16" pos:end="14:16">=</operator> <literal type="number" pos:start="14:18" pos:end="14:18">0</literal></expr>;</init> <condition pos:start="14:21" pos:end="14:26"><expr pos:start="14:21" pos:end="14:25"><name pos:start="14:21" pos:end="14:21">i</name> <operator pos:start="14:23" pos:end="14:23">&lt;</operator> <literal type="number" pos:start="14:25" pos:end="14:25">3</literal></expr>;</condition> <incr pos:start="14:28" pos:end="14:30"><expr pos:start="14:28" pos:end="14:30"><name pos:start="14:28" pos:end="14:28">i</name><operator pos:start="14:29" pos:end="14:30">++</operator></expr></incr>)</control> <block pos:start="14:33" pos:end="17:9">{<block_content pos:start="15:12" pos:end="16:48">
           <expr_stmt pos:start="15:12" pos:end="15:44"><expr pos:start="15:12" pos:end="15:43"><name pos:start="15:12" pos:end="15:28"><name pos:start="15:12" pos:end="15:18">x265pic</name><operator pos:start="15:19" pos:end="15:19">.</operator><name pos:start="15:20" pos:end="15:25">planes</name><index pos:start="15:26" pos:end="15:28">[<expr pos:start="15:27" pos:end="15:27"><name pos:start="15:27" pos:end="15:27">i</name></expr>]</index></name> <operator pos:start="15:30" pos:end="15:30">=</operator> <name pos:start="15:32" pos:end="15:43"><name pos:start="15:32" pos:end="15:34">pic</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:40">data</name><index pos:start="15:41" pos:end="15:43">[<expr pos:start="15:42" pos:end="15:42"><name pos:start="15:42" pos:end="15:42">i</name></expr>]</index></name></expr>;</expr_stmt>
           <expr_stmt pos:start="16:12" pos:end="16:48"><expr pos:start="16:12" pos:end="16:47"><name pos:start="16:12" pos:end="16:28"><name pos:start="16:12" pos:end="16:18">x265pic</name><operator pos:start="16:19" pos:end="16:19">.</operator><name pos:start="16:20" pos:end="16:25">stride</name><index pos:start="16:26" pos:end="16:28">[<expr pos:start="16:27" pos:end="16:27"><name pos:start="16:27" pos:end="16:27">i</name></expr>]</index></name> <operator pos:start="16:30" pos:end="16:30">=</operator> <name pos:start="16:32" pos:end="16:47"><name pos:start="16:32" pos:end="16:34">pic</name><operator pos:start="16:35" pos:end="16:36">-&gt;</operator><name pos:start="16:37" pos:end="16:44">linesize</name><index pos:start="16:45" pos:end="16:47">[<expr pos:start="16:46" pos:end="16:46"><name pos:start="16:46" pos:end="16:46">i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="18:9" pos:end="18:31"><expr pos:start="18:9" pos:end="18:30"><name pos:start="18:9" pos:end="18:19"><name pos:start="18:9" pos:end="18:15">x265pic</name><operator pos:start="18:16" pos:end="18:16">.</operator><name pos:start="18:17" pos:end="18:19">pts</name></name> <operator pos:start="18:21" pos:end="18:21">=</operator> <name pos:start="18:23" pos:end="18:30"><name pos:start="18:23" pos:end="18:25">pic</name><operator pos:start="18:26" pos:end="18:27">-&gt;</operator><name pos:start="18:28" pos:end="18:30">pts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="20:5" pos:end="21:67"><expr pos:start="20:5" pos:end="21:66"><name pos:start="20:5" pos:end="20:7">ret</name> <operator pos:start="20:9" pos:end="20:9">=</operator> <call pos:start="20:11" pos:end="21:66"><name pos:start="20:11" pos:end="20:29">x265_encoder_encode</name><argument_list pos:start="20:30" pos:end="21:66">(<argument pos:start="20:31" pos:end="20:42"><expr pos:start="20:31" pos:end="20:42"><name pos:start="20:31" pos:end="20:42"><name pos:start="20:31" pos:end="20:33">ctx</name><operator pos:start="20:34" pos:end="20:35">-&gt;</operator><name pos:start="20:36" pos:end="20:42">encoder</name></name></expr></argument>, <argument pos:start="20:45" pos:end="20:48"><expr pos:start="20:45" pos:end="20:48"><operator pos:start="20:45" pos:end="20:45">&amp;</operator><name pos:start="20:46" pos:end="20:48">nal</name></expr></argument>, <argument pos:start="20:51" pos:end="20:55"><expr pos:start="20:51" pos:end="20:55"><operator pos:start="20:51" pos:end="20:51">&amp;</operator><name pos:start="20:52" pos:end="20:55">nnal</name></expr></argument>,
                              <argument pos:start="21:31" pos:end="21:51"><expr pos:start="21:31" pos:end="21:51"><ternary pos:start="21:31" pos:end="21:51"><condition pos:start="21:31" pos:end="21:35"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">pic</name></expr> ?</condition><then pos:start="21:37" pos:end="21:44"> <expr pos:start="21:37" pos:end="21:44"><operator pos:start="21:37" pos:end="21:37">&amp;</operator><name pos:start="21:38" pos:end="21:44">x265pic</name></expr> </then><else pos:start="21:46" pos:end="21:51">: <expr pos:start="21:48" pos:end="21:51"><name pos:start="21:48" pos:end="21:51">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="21:54" pos:end="21:65"><expr pos:start="21:54" pos:end="21:65"><operator pos:start="21:54" pos:end="21:54">&amp;</operator><name pos:start="21:55" pos:end="21:65">x265pic_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="23:31"><if pos:start="22:5" pos:end="23:31">if <condition pos:start="22:8" pos:end="22:16">(<expr pos:start="22:9" pos:end="22:15"><name pos:start="22:9" pos:end="22:11">ret</name> <operator pos:start="22:13" pos:end="22:13">&lt;</operator> <literal type="number" pos:start="22:15" pos:end="22:15">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">
        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:30">AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="24:5" pos:end="25:17"><if pos:start="24:5" pos:end="25:17">if <condition pos:start="24:8" pos:end="24:14">(<expr pos:start="24:9" pos:end="24:13"><operator pos:start="24:9" pos:end="24:9">!</operator><name pos:start="24:10" pos:end="24:13">nnal</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:17"><block_content pos:start="25:9" pos:end="25:17">
        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <for pos:start="26:5" pos:end="27:36">for <control pos:start="26:9" pos:end="26:30">(<init pos:start="26:10" pos:end="26:15"><expr pos:start="26:10" pos:end="26:14"><name pos:start="26:10" pos:end="26:10">i</name> <operator pos:start="26:12" pos:end="26:12">=</operator> <literal type="number" pos:start="26:14" pos:end="26:14">0</literal></expr>;</init> <condition pos:start="26:17" pos:end="26:25"><expr pos:start="26:17" pos:end="26:24"><name pos:start="26:17" pos:end="26:17">i</name> <operator pos:start="26:19" pos:end="26:19">&lt;</operator> <name pos:start="26:21" pos:end="26:24">nnal</name></expr>;</condition> <incr pos:start="26:27" pos:end="26:29"><expr pos:start="26:27" pos:end="26:29"><name pos:start="26:27" pos:end="26:27">i</name><operator pos:start="26:28" pos:end="26:29">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:9" pos:end="27:36"><block_content pos:start="27:9" pos:end="27:36">
        <expr_stmt pos:start="27:9" pos:end="27:36"><expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:15">payload</name> <operator pos:start="27:17" pos:end="27:18">+=</operator> <name pos:start="27:20" pos:end="27:25"><name pos:start="27:20" pos:end="27:22">nal</name><index pos:start="27:23" pos:end="27:25">[<expr pos:start="27:24" pos:end="27:24"><name pos:start="27:24" pos:end="27:24">i</name></expr>]</index></name><operator pos:start="27:26" pos:end="27:26">.</operator><name pos:start="27:27" pos:end="27:35">sizeBytes</name></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt pos:start="28:5" pos:end="28:32"><expr pos:start="28:5" pos:end="28:31"><name pos:start="28:5" pos:end="28:11">payload</name> <operator pos:start="28:13" pos:end="28:14">+=</operator> <name pos:start="28:16" pos:end="28:31"><name pos:start="28:16" pos:end="28:18">ctx</name><operator pos:start="28:19" pos:end="28:20">-&gt;</operator><name pos:start="28:21" pos:end="28:31">header_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:39"><name pos:start="29:11" pos:end="29:25">ff_alloc_packet</name><argument_list pos:start="29:26" pos:end="29:39">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">pkt</name></expr></argument>, <argument pos:start="29:32" pos:end="29:38"><expr pos:start="29:32" pos:end="29:38"><name pos:start="29:32" pos:end="29:38">payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="33:5"><if pos:start="30:5" pos:end="33:5">if <condition pos:start="30:8" pos:end="30:16">(<expr pos:start="30:9" pos:end="30:15"><name pos:start="30:9" pos:end="30:11">ret</name> <operator pos:start="30:13" pos:end="30:13">&lt;</operator> <literal type="number" pos:start="30:15" pos:end="30:15">0</literal></expr>)</condition> <block pos:start="30:18" pos:end="33:5">{<block_content pos:start="31:9" pos:end="32:19">
        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:69">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:68"><expr pos:start="31:37" pos:end="31:68"><literal type="string" pos:start="31:37" pos:end="31:68">"Error getting output packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="32:9" pos:end="32:19">return <expr pos:start="32:16" pos:end="32:18"><name pos:start="32:16" pos:end="32:18">ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:20"><expr pos:start="34:5" pos:end="34:19"><name pos:start="34:5" pos:end="34:7">dst</name> <operator pos:start="34:9" pos:end="34:9">=</operator> <name pos:start="34:11" pos:end="34:19"><name pos:start="34:11" pos:end="34:13">pkt</name><operator pos:start="34:14" pos:end="34:15">-&gt;</operator><name pos:start="34:16" pos:end="34:19">data</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="35:5" pos:end="40:5"><if pos:start="35:5" pos:end="40:5">if <condition pos:start="35:8" pos:end="35:20">(<expr pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:11">ctx</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:19">header</name></name></expr>)</condition> <block pos:start="35:22" pos:end="40:5">{<block_content pos:start="36:9" pos:end="39:29">
        <expr_stmt pos:start="36:9" pos:end="36:51"><expr pos:start="36:9" pos:end="36:50"><call pos:start="36:9" pos:end="36:50"><name pos:start="36:9" pos:end="36:14">memcpy</name><argument_list pos:start="36:15" pos:end="36:50">(<argument pos:start="36:16" pos:end="36:18"><expr pos:start="36:16" pos:end="36:18"><name pos:start="36:16" pos:end="36:18">dst</name></expr></argument>, <argument pos:start="36:21" pos:end="36:31"><expr pos:start="36:21" pos:end="36:31"><name pos:start="36:21" pos:end="36:31"><name pos:start="36:21" pos:end="36:23">ctx</name><operator pos:start="36:24" pos:end="36:25">-&gt;</operator><name pos:start="36:26" pos:end="36:31">header</name></name></expr></argument>, <argument pos:start="36:34" pos:end="36:49"><expr pos:start="36:34" pos:end="36:49"><name pos:start="36:34" pos:end="36:49"><name pos:start="36:34" pos:end="36:36">ctx</name><operator pos:start="36:37" pos:end="36:38">-&gt;</operator><name pos:start="36:39" pos:end="36:49">header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:11">dst</name> <operator pos:start="37:13" pos:end="37:14">+=</operator> <name pos:start="37:16" pos:end="37:31"><name pos:start="37:16" pos:end="37:18">ctx</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:31">header_size</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="38:9" pos:end="38:31"><expr pos:start="38:9" pos:end="38:30"><call pos:start="38:9" pos:end="38:30"><name pos:start="38:9" pos:end="38:16">av_freep</name><argument_list pos:start="38:17" pos:end="38:30">(<argument pos:start="38:18" pos:end="38:29"><expr pos:start="38:18" pos:end="38:29"><operator pos:start="38:18" pos:end="38:18">&amp;</operator><name pos:start="38:19" pos:end="38:29"><name pos:start="38:19" pos:end="38:21">ctx</name><operator pos:start="38:22" pos:end="38:23">-&gt;</operator><name pos:start="38:24" pos:end="38:29">header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:11">ctx</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:24">header_size</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for pos:start="41:5" pos:end="46:5">for <control pos:start="41:9" pos:end="41:30">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:25"><expr pos:start="41:17" pos:end="41:24"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:24">nnal</name></expr>;</condition> <incr pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:27">i</name><operator pos:start="41:28" pos:end="41:29">++</operator></expr></incr>)</control> <block pos:start="41:32" pos:end="46:5">{<block_content pos:start="42:9" pos:end="45:42">
        <expr_stmt pos:start="42:9" pos:end="42:54"><expr pos:start="42:9" pos:end="42:53"><call pos:start="42:9" pos:end="42:53"><name pos:start="42:9" pos:end="42:14">memcpy</name><argument_list pos:start="42:15" pos:end="42:53">(<argument pos:start="42:16" pos:end="42:18"><expr pos:start="42:16" pos:end="42:18"><name pos:start="42:16" pos:end="42:18">dst</name></expr></argument>, <argument pos:start="42:21" pos:end="42:34"><expr pos:start="42:21" pos:end="42:34"><name pos:start="42:21" pos:end="42:26"><name pos:start="42:21" pos:end="42:23">nal</name><index pos:start="42:24" pos:end="42:26">[<expr pos:start="42:25" pos:end="42:25"><name pos:start="42:25" pos:end="42:25">i</name></expr>]</index></name><operator pos:start="42:27" pos:end="42:27">.</operator><name pos:start="42:28" pos:end="42:34">payload</name></expr></argument>, <argument pos:start="42:37" pos:end="42:52"><expr pos:start="42:37" pos:end="42:52"><name pos:start="42:37" pos:end="42:42"><name pos:start="42:37" pos:end="42:39">nal</name><index pos:start="42:40" pos:end="42:42">[<expr pos:start="42:41" pos:end="42:41"><name pos:start="42:41" pos:end="42:41">i</name></expr>]</index></name><operator pos:start="42:43" pos:end="42:43">.</operator><name pos:start="42:44" pos:end="42:52">sizeBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:11">dst</name> <operator pos:start="43:13" pos:end="43:14">+=</operator> <name pos:start="43:16" pos:end="43:21"><name pos:start="43:16" pos:end="43:18">nal</name><index pos:start="43:19" pos:end="43:21">[<expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">i</name></expr>]</index></name><operator pos:start="43:22" pos:end="43:22">.</operator><name pos:start="43:23" pos:end="43:31">sizeBytes</name></expr>;</expr_stmt>
        <if_stmt pos:start="44:9" pos:end="45:42"><if pos:start="44:9" pos:end="45:42">if <condition pos:start="44:12" pos:end="44:37">(<expr pos:start="44:13" pos:end="44:36"><call pos:start="44:13" pos:end="44:36"><name pos:start="44:13" pos:end="44:23">is_keyframe</name><argument_list pos:start="44:24" pos:end="44:36">(<argument pos:start="44:25" pos:end="44:35"><expr pos:start="44:25" pos:end="44:35"><name pos:start="44:25" pos:end="44:30"><name pos:start="44:25" pos:end="44:27">nal</name><index pos:start="44:28" pos:end="44:30">[<expr pos:start="44:29" pos:end="44:29"><name pos:start="44:29" pos:end="44:29">i</name></expr>]</index></name><operator pos:start="44:31" pos:end="44:31">.</operator><name pos:start="44:32" pos:end="44:35">type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:42"><block_content pos:start="45:13" pos:end="45:42">
            <expr_stmt pos:start="45:13" pos:end="45:42"><expr pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:15">pkt</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:22">flags</name></name> <operator pos:start="45:24" pos:end="45:25">|=</operator> <name pos:start="45:27" pos:end="45:41">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:7">pkt</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:12">pts</name></name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:30"><name pos:start="47:16" pos:end="47:26">x265pic_out</name><operator pos:start="47:27" pos:end="47:27">.</operator><name pos:start="47:28" pos:end="47:30">pts</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:31"><expr pos:start="48:5" pos:end="48:30"><name pos:start="48:5" pos:end="48:12"><name pos:start="48:5" pos:end="48:7">pkt</name><operator pos:start="48:8" pos:end="48:9">-&gt;</operator><name pos:start="48:10" pos:end="48:12">dts</name></name> <operator pos:start="48:14" pos:end="48:14">=</operator> <name pos:start="48:16" pos:end="48:30"><name pos:start="48:16" pos:end="48:26">x265pic_out</name><operator pos:start="48:27" pos:end="48:27">.</operator><name pos:start="48:28" pos:end="48:30">dts</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><operator pos:start="49:5" pos:end="49:5">*</operator><name pos:start="49:6" pos:end="49:15">got_packet</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">1</literal></expr>;</expr_stmt>
    <return pos:start="50:5" pos:end="50:13">return <expr pos:start="50:12" pos:end="50:12"><literal type="number" pos:start="50:12" pos:end="50:12">0</literal></expr>;</return>
</block_content>}</block></function></unit>
