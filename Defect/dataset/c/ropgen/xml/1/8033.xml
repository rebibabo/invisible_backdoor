<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8033.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:5"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vc9_decode_init</name><parameter_list pos:start="1:27" pos:end="1:49">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:5">{<block_content pos:start="5:5" pos:end="139:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VC9Context</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">v</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:25">avctx</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:26">v</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">GetBitContext</name></type> <name pos:start="9:19" pos:end="9:20">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="13:63"><if pos:start="13:5" pos:end="13:63">if <condition pos:start="13:8" pos:end="13:52">(<expr pos:start="13:9" pos:end="13:51"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:30"><name pos:start="13:10" pos:end="13:14">avctx</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:30">extradata_size</name></name> <operator pos:start="13:32" pos:end="13:33">||</operator> <operator pos:start="13:35" pos:end="13:35">!</operator><name pos:start="13:36" pos:end="13:51"><name pos:start="13:36" pos:end="13:40">avctx</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:51">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="13:54" pos:end="13:63"><block_content pos:start="13:54" pos:end="13:63"> <return pos:start="13:54" pos:end="13:63">return <expr pos:start="13:61" pos:end="13:62"><operator pos:start="13:61" pos:end="13:61">-</operator><literal type="number" pos:start="13:62" pos:end="13:62">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:9">avctx</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:18">pix_fmt</name></name> <operator pos:start="15:20" pos:end="15:20">=</operator> <name pos:start="15:22" pos:end="15:36">PIX_FMT_YUV420P</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:5">v</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:8">s</name><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:14">avctx</name></name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:22">avctx</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="23:18"><if pos:start="21:5" pos:end="23:18">if<condition pos:start="21:7" pos:end="21:38">(<expr pos:start="21:8" pos:end="21:37"><call pos:start="21:8" pos:end="21:33"><name pos:start="21:8" pos:end="21:26">ff_h263_decode_init</name><argument_list pos:start="21:27" pos:end="21:33">(<argument pos:start="21:28" pos:end="21:32"><expr pos:start="21:28" pos:end="21:32"><name pos:start="21:28" pos:end="21:32">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="21:35" pos:end="21:35">&lt;</operator> <literal type="number" pos:start="21:37" pos:end="21:37">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:18"><block_content pos:start="23:9" pos:end="23:18">

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="25:42"><if pos:start="25:5" pos:end="25:42">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><call pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:23">vc9_init_common</name><argument_list pos:start="25:24" pos:end="25:26">(<argument pos:start="25:25" pos:end="25:25"><expr pos:start="25:25" pos:end="25:25"><name pos:start="25:25" pos:end="25:25">v</name></expr></argument>)</argument_list></call> <operator pos:start="25:28" pos:end="25:28">&lt;</operator> <literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>)</condition><block type="pseudo" pos:start="25:33" pos:end="25:42"><block_content pos:start="25:33" pos:end="25:42"> <return pos:start="25:33" pos:end="25:42">return <expr pos:start="25:40" pos:end="25:41"><operator pos:start="25:40" pos:end="25:40">-</operator><literal type="number" pos:start="25:41" pos:end="25:41">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:9">avctx</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:22">coded_width</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:37"><name pos:start="29:26" pos:end="29:30">avctx</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:37">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:9">avctx</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:23">coded_height</name></name> <operator pos:start="31:25" pos:end="31:25">=</operator> <name pos:start="31:27" pos:end="31:39"><name pos:start="31:27" pos:end="31:31">avctx</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:39">height</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="79:5"><if pos:start="33:5" pos:end="79:5">if <condition pos:start="33:8" pos:end="33:41">(<expr pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:13">avctx</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:23">codec_id</name></name> <operator pos:start="33:25" pos:end="33:26">==</operator> <name pos:start="33:28" pos:end="33:40">CODEC_ID_WMV3</name></expr>)</condition>

    <block pos:start="35:5" pos:end="79:5">{<block_content pos:start="37:9" pos:end="77:9">

        <decl_stmt pos:start="37:9" pos:end="37:22"><decl pos:start="37:9" pos:end="37:21"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:17">count</name> <init pos:start="37:19" pos:end="37:21">= <expr pos:start="37:21" pos:end="37:21"><literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="41:9" pos:end="41:72">// looks like WMV3 has a sequence header stored in the extradata</comment>

        <comment type="line" pos:start="43:9" pos:end="43:65">// advanced sequence header may be before the first frame</comment>

        <comment type="line" pos:start="45:9" pos:end="45:72">// the last byte of the extradata is a version number, 1 for the</comment>

        <comment type="line" pos:start="47:9" pos:end="47:32">// samples we can decode</comment>



        <expr_stmt pos:start="51:9" pos:end="51:68"><expr pos:start="51:9" pos:end="51:67"><call pos:start="51:9" pos:end="51:67"><name pos:start="51:9" pos:end="51:21">init_get_bits</name><argument_list pos:start="51:22" pos:end="51:67">(<argument pos:start="51:23" pos:end="51:25"><expr pos:start="51:23" pos:end="51:25"><operator pos:start="51:23" pos:end="51:23">&amp;</operator><name pos:start="51:24" pos:end="51:25">gb</name></expr></argument>, <argument pos:start="51:28" pos:end="51:43"><expr pos:start="51:28" pos:end="51:43"><name pos:start="51:28" pos:end="51:43"><name pos:start="51:28" pos:end="51:32">avctx</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:43">extradata</name></name></expr></argument>, <argument pos:start="51:46" pos:end="51:66"><expr pos:start="51:46" pos:end="51:66"><name pos:start="51:46" pos:end="51:66"><name pos:start="51:46" pos:end="51:50">avctx</name><operator pos:start="51:51" pos:end="51:52">-&gt;</operator><name pos:start="51:53" pos:end="51:66">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><call pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:30">decode_sequence_header</name><argument_list pos:start="55:31" pos:end="55:42">(<argument pos:start="55:32" pos:end="55:36"><expr pos:start="55:32" pos:end="55:36"><name pos:start="55:32" pos:end="55:36">avctx</name></expr></argument>, <argument pos:start="55:39" pos:end="55:41"><expr pos:start="55:39" pos:end="55:41"><operator pos:start="55:39" pos:end="55:39">&amp;</operator><name pos:start="55:40" pos:end="55:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:62"><expr pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:13">count</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:37"><name pos:start="59:17" pos:end="59:21">avctx</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:37">extradata_size</name></name><operator pos:start="59:38" pos:end="59:38">*</operator><literal type="number" pos:start="59:39" pos:end="59:41">8</literal> <operator pos:start="59:41" pos:end="59:41">-</operator> <call pos:start="59:43" pos:end="59:61"><name pos:start="59:43" pos:end="59:56">get_bits_count</name><argument_list pos:start="59:57" pos:end="59:61">(<argument pos:start="59:58" pos:end="59:60"><expr pos:start="59:58" pos:end="59:60"><operator pos:start="59:58" pos:end="59:58">&amp;</operator><name pos:start="59:59" pos:end="59:60">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="77:9"><if pos:start="61:9" pos:end="69:9">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:17">count</name><operator pos:start="61:18" pos:end="61:18">&gt;</operator><literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>)</condition>

        <block pos:start="63:9" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:48">

            <expr_stmt pos:start="65:13" pos:end="67:48"><expr pos:start="65:13" pos:end="67:47"><call pos:start="65:13" pos:end="67:47"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="67:47">(<argument pos:start="65:20" pos:end="65:24"><expr pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:24">avctx</name></expr></argument>, <argument pos:start="65:27" pos:end="65:37"><expr pos:start="65:27" pos:end="65:37"><name pos:start="65:27" pos:end="65:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="65:40" pos:end="65:78"><expr pos:start="65:40" pos:end="65:78"><literal type="string" pos:start="65:40" pos:end="65:78">"Extra data: %i bits left, value: %X\n"</literal></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:24"><expr pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:24">count</name></expr></argument>, <argument pos:start="67:27" pos:end="67:46"><expr pos:start="67:27" pos:end="67:46"><call pos:start="67:27" pos:end="67:46"><name pos:start="67:27" pos:end="67:34">get_bits</name><argument_list pos:start="67:35" pos:end="67:46">(<argument pos:start="67:36" pos:end="67:38"><expr pos:start="67:36" pos:end="67:38"><operator pos:start="67:36" pos:end="67:36">&amp;</operator><name pos:start="67:37" pos:end="67:38">gb</name></expr></argument>, <argument pos:start="67:41" pos:end="67:45"><expr pos:start="67:41" pos:end="67:45"><name pos:start="67:41" pos:end="67:45">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="71:9" pos:end="77:9">else

        <block pos:start="73:9" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:77">

            <expr_stmt pos:start="75:13" pos:end="75:77"><expr pos:start="75:13" pos:end="75:76"><call pos:start="75:13" pos:end="75:76"><name pos:start="75:13" pos:end="75:18">av_log</name><argument_list pos:start="75:19" pos:end="75:76">(<argument pos:start="75:20" pos:end="75:24"><expr pos:start="75:20" pos:end="75:24"><name pos:start="75:20" pos:end="75:24">avctx</name></expr></argument>, <argument pos:start="75:27" pos:end="75:37"><expr pos:start="75:27" pos:end="75:37"><name pos:start="75:27" pos:end="75:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="75:40" pos:end="75:67"><expr pos:start="75:40" pos:end="75:67"><literal type="string" pos:start="75:40" pos:end="75:67">"Read %i bits in overflow\n"</literal></expr></argument>, <argument pos:start="75:70" pos:end="75:75"><expr pos:start="75:70" pos:end="75:75"><operator pos:start="75:70" pos:end="75:70">-</operator><name pos:start="75:71" pos:end="75:75">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:49"><expr pos:start="81:5" pos:end="81:48"><name pos:start="81:5" pos:end="81:23"><name pos:start="81:5" pos:end="81:9">avctx</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:23">has_b_frames</name></name><operator pos:start="81:24" pos:end="81:24">=</operator> <operator pos:start="81:26" pos:end="81:26">!</operator><operator pos:start="81:27" pos:end="81:27">!</operator><operator pos:start="81:28" pos:end="81:28">(</operator><name pos:start="81:29" pos:end="81:47"><name pos:start="81:29" pos:end="81:33">avctx</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:47">max_b_frames</name></name><operator pos:start="81:48" pos:end="81:48">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:45"><expr pos:start="85:5" pos:end="85:44"><name pos:start="85:5" pos:end="85:15"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:15">mb_width</name></name> <operator pos:start="85:17" pos:end="85:17">=</operator> <operator pos:start="85:19" pos:end="85:19">(</operator><name pos:start="85:20" pos:end="85:37"><name pos:start="85:20" pos:end="85:24">avctx</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:37">coded_width</name></name><operator pos:start="85:38" pos:end="85:38">+</operator><literal type="number" pos:start="85:39" pos:end="85:40">15</literal><operator pos:start="85:41" pos:end="85:41">)</operator><operator pos:start="85:42" pos:end="85:43">&gt;&gt;</operator><literal type="number" pos:start="85:44" pos:end="85:44">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:47"><expr pos:start="87:5" pos:end="87:46"><name pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:16">mb_height</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <operator pos:start="87:20" pos:end="87:20">(</operator><name pos:start="87:21" pos:end="87:39"><name pos:start="87:21" pos:end="87:25">avctx</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:39">coded_height</name></name><operator pos:start="87:40" pos:end="87:40">+</operator><literal type="number" pos:start="87:41" pos:end="87:42">15</literal><operator pos:start="87:43" pos:end="87:43">)</operator><operator pos:start="87:44" pos:end="87:45">&gt;&gt;</operator><literal type="number" pos:start="87:46" pos:end="87:46">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:31">/* Allocate mb bitplanes */</comment>

    <if_stmt pos:start="93:5" pos:end="95:18"><if pos:start="93:5" pos:end="95:18">if <condition pos:start="93:8" pos:end="93:76">(<expr pos:start="93:9" pos:end="93:75"><call pos:start="93:9" pos:end="93:71"><name pos:start="93:9" pos:end="93:22">alloc_bitplane</name><argument_list pos:start="93:23" pos:end="93:71">(<argument pos:start="93:24" pos:end="93:43"><expr pos:start="93:24" pos:end="93:43"><operator pos:start="93:24" pos:end="93:24">&amp;</operator><name pos:start="93:25" pos:end="93:43"><name pos:start="93:25" pos:end="93:25">v</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:43">mv_type_mb_plane</name></name></expr></argument>, <argument pos:start="93:46" pos:end="93:56"><expr pos:start="93:46" pos:end="93:56"><name pos:start="93:46" pos:end="93:56"><name pos:start="93:46" pos:end="93:46">s</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:56">mb_width</name></name></expr></argument>, <argument pos:start="93:59" pos:end="93:70"><expr pos:start="93:59" pos:end="93:70"><name pos:start="93:59" pos:end="93:70"><name pos:start="93:59" pos:end="93:59">s</name><operator pos:start="93:60" pos:end="93:61">-&gt;</operator><name pos:start="93:62" pos:end="93:70">mb_height</name></name></expr></argument>)</argument_list></call> <operator pos:start="93:73" pos:end="93:73">&lt;</operator> <literal type="number" pos:start="93:75" pos:end="93:75">0</literal></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:18"><block_content pos:start="95:9" pos:end="95:18">

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="99:18"><if pos:start="97:5" pos:end="99:18">if <condition pos:start="97:8" pos:end="97:76">(<expr pos:start="97:9" pos:end="97:75"><call pos:start="97:9" pos:end="97:71"><name pos:start="97:9" pos:end="97:22">alloc_bitplane</name><argument_list pos:start="97:23" pos:end="97:71">(<argument pos:start="97:24" pos:end="97:43"><expr pos:start="97:24" pos:end="97:43"><operator pos:start="97:24" pos:end="97:24">&amp;</operator><name pos:start="97:25" pos:end="97:43"><name pos:start="97:25" pos:end="97:25">v</name><operator pos:start="97:26" pos:end="97:27">-&gt;</operator><name pos:start="97:28" pos:end="97:43">mv_type_mb_plane</name></name></expr></argument>, <argument pos:start="97:46" pos:end="97:56"><expr pos:start="97:46" pos:end="97:56"><name pos:start="97:46" pos:end="97:56"><name pos:start="97:46" pos:end="97:46">s</name><operator pos:start="97:47" pos:end="97:48">-&gt;</operator><name pos:start="97:49" pos:end="97:56">mb_width</name></name></expr></argument>, <argument pos:start="97:59" pos:end="97:70"><expr pos:start="97:59" pos:end="97:70"><name pos:start="97:59" pos:end="97:70"><name pos:start="97:59" pos:end="97:59">s</name><operator pos:start="97:60" pos:end="97:61">-&gt;</operator><name pos:start="97:62" pos:end="97:70">mb_height</name></name></expr></argument>)</argument_list></call> <operator pos:start="97:73" pos:end="97:73">&lt;</operator> <literal type="number" pos:start="97:75" pos:end="97:75">0</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:18"><block_content pos:start="99:9" pos:end="99:18">

        <return pos:start="99:9" pos:end="99:18">return <expr pos:start="99:16" pos:end="99:17"><operator pos:start="99:16" pos:end="99:16">-</operator><literal type="number" pos:start="99:17" pos:end="99:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="103:18"><if pos:start="101:5" pos:end="103:18">if <condition pos:start="101:8" pos:end="101:73">(<expr pos:start="101:9" pos:end="101:72"><call pos:start="101:9" pos:end="101:68"><name pos:start="101:9" pos:end="101:22">alloc_bitplane</name><argument_list pos:start="101:23" pos:end="101:68">(<argument pos:start="101:24" pos:end="101:40"><expr pos:start="101:24" pos:end="101:40"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:40"><name pos:start="101:25" pos:end="101:25">v</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:40">skip_mb_plane</name></name></expr></argument>, <argument pos:start="101:43" pos:end="101:53"><expr pos:start="101:43" pos:end="101:53"><name pos:start="101:43" pos:end="101:53"><name pos:start="101:43" pos:end="101:43">s</name><operator pos:start="101:44" pos:end="101:45">-&gt;</operator><name pos:start="101:46" pos:end="101:53">mb_width</name></name></expr></argument>, <argument pos:start="101:56" pos:end="101:67"><expr pos:start="101:56" pos:end="101:67"><name pos:start="101:56" pos:end="101:67"><name pos:start="101:56" pos:end="101:56">s</name><operator pos:start="101:57" pos:end="101:58">-&gt;</operator><name pos:start="101:59" pos:end="101:67">mb_height</name></name></expr></argument>)</argument_list></call> <operator pos:start="101:70" pos:end="101:70">&lt;</operator> <literal type="number" pos:start="101:72" pos:end="101:72">0</literal></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:18"><block_content pos:start="103:9" pos:end="103:18">

        <return pos:start="103:9" pos:end="103:18">return <expr pos:start="103:16" pos:end="103:17"><operator pos:start="103:16" pos:end="103:16">-</operator><literal type="number" pos:start="103:17" pos:end="103:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="107:18"><if pos:start="105:5" pos:end="107:18">if <condition pos:start="105:8" pos:end="105:75">(<expr pos:start="105:9" pos:end="105:74"><call pos:start="105:9" pos:end="105:70"><name pos:start="105:9" pos:end="105:22">alloc_bitplane</name><argument_list pos:start="105:23" pos:end="105:70">(<argument pos:start="105:24" pos:end="105:42"><expr pos:start="105:24" pos:end="105:42"><operator pos:start="105:24" pos:end="105:24">&amp;</operator><name pos:start="105:25" pos:end="105:42"><name pos:start="105:25" pos:end="105:25">v</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:42">direct_mb_plane</name></name></expr></argument>, <argument pos:start="105:45" pos:end="105:55"><expr pos:start="105:45" pos:end="105:55"><name pos:start="105:45" pos:end="105:55"><name pos:start="105:45" pos:end="105:45">s</name><operator pos:start="105:46" pos:end="105:47">-&gt;</operator><name pos:start="105:48" pos:end="105:55">mb_width</name></name></expr></argument>, <argument pos:start="105:58" pos:end="105:69"><expr pos:start="105:58" pos:end="105:69"><name pos:start="105:58" pos:end="105:69"><name pos:start="105:58" pos:end="105:58">s</name><operator pos:start="105:59" pos:end="105:60">-&gt;</operator><name pos:start="105:61" pos:end="105:69">mb_height</name></name></expr></argument>)</argument_list></call> <operator pos:start="105:72" pos:end="105:72">&lt;</operator> <literal type="number" pos:start="105:74" pos:end="105:74">0</literal></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:18"><block_content pos:start="107:9" pos:end="107:18">

        <return pos:start="107:9" pos:end="107:18">return <expr pos:start="107:16" pos:end="107:17"><operator pos:start="107:16" pos:end="107:16">-</operator><literal type="number" pos:start="107:17" pos:end="107:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:24">/* For predictors */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:66"><expr pos:start="113:5" pos:end="113:65"><name pos:start="113:5" pos:end="113:26"><name pos:start="113:5" pos:end="113:5">v</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:26">previous_line_cbpcy</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <operator pos:start="113:30" pos:end="113:30">(</operator><name pos:start="113:31" pos:end="113:37">uint8_t</name> <operator pos:start="113:39" pos:end="113:39">*</operator><operator pos:start="113:40" pos:end="113:40">)</operator><call pos:start="113:41" pos:end="113:65"><name pos:start="113:41" pos:end="113:49">av_malloc</name><argument_list pos:start="113:50" pos:end="113:65">(<argument pos:start="113:51" pos:end="113:64"><expr pos:start="113:51" pos:end="113:64"><name pos:start="113:51" pos:end="113:62"><name pos:start="113:51" pos:end="113:51">s</name><operator pos:start="113:52" pos:end="113:53">-&gt;</operator><name pos:start="113:54" pos:end="113:62">mb_stride</name></name><operator pos:start="113:63" pos:end="113:63">*</operator><literal type="number" pos:start="113:64" pos:end="113:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="120:0"><if pos:start="115:5" pos:end="120:0">if <condition pos:start="115:8" pos:end="115:32">(<expr pos:start="115:9" pos:end="115:31"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:31"><name pos:start="115:10" pos:end="115:10">v</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:31">previous_line_cbpcy</name></name></expr>)</condition><block type="pseudo" pos:start="115:34" pos:end="120:0"><block_content pos:start="115:34" pos:end="120:0"> <return pos:start="115:34" pos:end="120:0">return <expr pos:start="115:41" pos:end="115:42"><operator pos:start="115:41" pos:end="115:41">-</operator><literal type="number" pos:start="115:42" pos:end="115:42">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="119:1" pos:end="119:24">#<cpp:directive pos:start="119:2" pos:end="119:3">if</cpp:directive> <expr pos:start="119:5" pos:end="119:24"><name pos:start="119:5" pos:end="119:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

    <if_stmt pos:start="121:5" pos:end="136:0"><if pos:start="121:5" pos:end="136:0">if <condition pos:start="121:8" pos:end="121:34">(<expr pos:start="121:9" pos:end="121:33"><name pos:start="121:9" pos:end="121:18"><name pos:start="121:9" pos:end="121:9">v</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:18">profile</name></name> <operator pos:start="121:20" pos:end="121:20">&gt;</operator> <name pos:start="121:22" pos:end="121:33">PROFILE_MAIN</name></expr>)</condition>

    <block pos:start="123:5" pos:end="136:0">{<block_content pos:start="125:9" pos:end="131:22">

        <if_stmt pos:start="125:9" pos:end="127:22"><if pos:start="125:9" pos:end="127:22">if <condition pos:start="125:12" pos:end="125:80">(<expr pos:start="125:13" pos:end="125:79"><call pos:start="125:13" pos:end="125:75"><name pos:start="125:13" pos:end="125:26">alloc_bitplane</name><argument_list pos:start="125:27" pos:end="125:75">(<argument pos:start="125:28" pos:end="125:47"><expr pos:start="125:28" pos:end="125:47"><operator pos:start="125:28" pos:end="125:28">&amp;</operator><name pos:start="125:29" pos:end="125:47"><name pos:start="125:29" pos:end="125:29">v</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:47">over_flags_plane</name></name></expr></argument>, <argument pos:start="125:50" pos:end="125:60"><expr pos:start="125:50" pos:end="125:60"><name pos:start="125:50" pos:end="125:60"><name pos:start="125:50" pos:end="125:50">s</name><operator pos:start="125:51" pos:end="125:52">-&gt;</operator><name pos:start="125:53" pos:end="125:60">mb_width</name></name></expr></argument>, <argument pos:start="125:63" pos:end="125:74"><expr pos:start="125:63" pos:end="125:74"><name pos:start="125:63" pos:end="125:74"><name pos:start="125:63" pos:end="125:63">s</name><operator pos:start="125:64" pos:end="125:65">-&gt;</operator><name pos:start="125:66" pos:end="125:74">mb_height</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:77" pos:end="125:77">&lt;</operator> <literal type="number" pos:start="125:79" pos:end="125:79">0</literal></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:22"><block_content pos:start="127:13" pos:end="127:22">

            <return pos:start="127:13" pos:end="127:22">return <expr pos:start="127:20" pos:end="127:21"><operator pos:start="127:20" pos:end="127:20">-</operator><literal type="number" pos:start="127:21" pos:end="127:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="131:22"><if pos:start="129:9" pos:end="131:22">if <condition pos:start="129:12" pos:end="129:77">(<expr pos:start="129:13" pos:end="129:76"><call pos:start="129:13" pos:end="129:72"><name pos:start="129:13" pos:end="129:26">alloc_bitplane</name><argument_list pos:start="129:27" pos:end="129:72">(<argument pos:start="129:28" pos:end="129:44"><expr pos:start="129:28" pos:end="129:44"><operator pos:start="129:28" pos:end="129:28">&amp;</operator><name pos:start="129:29" pos:end="129:44"><name pos:start="129:29" pos:end="129:29">v</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:44">ac_pred_plane</name></name></expr></argument>, <argument pos:start="129:47" pos:end="129:57"><expr pos:start="129:47" pos:end="129:57"><name pos:start="129:47" pos:end="129:57"><name pos:start="129:47" pos:end="129:47">s</name><operator pos:start="129:48" pos:end="129:49">-&gt;</operator><name pos:start="129:50" pos:end="129:57">mb_width</name></name></expr></argument>, <argument pos:start="129:60" pos:end="129:71"><expr pos:start="129:60" pos:end="129:71"><name pos:start="129:60" pos:end="129:71"><name pos:start="129:60" pos:end="129:60">s</name><operator pos:start="129:61" pos:end="129:62">-&gt;</operator><name pos:start="129:63" pos:end="129:71">mb_height</name></name></expr></argument>)</argument_list></call> <operator pos:start="129:74" pos:end="129:74">&lt;</operator> <literal type="number" pos:start="129:76" pos:end="129:76">0</literal></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:22"><block_content pos:start="131:13" pos:end="131:22">

            <return pos:start="131:13" pos:end="131:22">return <expr pos:start="131:20" pos:end="131:21"><operator pos:start="131:20" pos:end="131:20">-</operator><literal type="number" pos:start="131:21" pos:end="131:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="135:1" pos:end="135:6">#<cpp:directive pos:start="135:2" pos:end="135:6">endif</cpp:directive></cpp:endif>



    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

    </block_content>}</block></function>
</unit>
