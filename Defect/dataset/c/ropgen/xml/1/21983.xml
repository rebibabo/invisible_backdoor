<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21983.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:33">ff_v4l2_m2m_codec_full_reinit</name><parameter_list pos:start="1:34" pos:end="1:52">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:48">V4L2m2mContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="159:1">{<block_content pos:start="5:5" pos:end="157:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:17">log_ctx</name> <init pos:start="5:19" pos:end="5:28">= <expr pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:21">s</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:28">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:66"><expr pos:start="11:5" pos:end="11:65"><call pos:start="11:5" pos:end="11:65"><name pos:start="11:5" pos:end="11:10">av_log</name><argument_list pos:start="11:11" pos:end="11:65">(<argument pos:start="11:12" pos:end="11:18"><expr pos:start="11:12" pos:end="11:18"><name pos:start="11:12" pos:end="11:18">log_ctx</name></expr></argument>, <argument pos:start="11:21" pos:end="11:32"><expr pos:start="11:21" pos:end="11:32"><name pos:start="11:21" pos:end="11:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="11:35" pos:end="11:52"><expr pos:start="11:35" pos:end="11:52"><literal type="string" pos:start="11:35" pos:end="11:52">"%s full reinit\n"</literal></expr></argument>, <argument pos:start="11:55" pos:end="11:64"><expr pos:start="11:55" pos:end="11:64"><name pos:start="11:55" pos:end="11:64"><name pos:start="11:55" pos:end="11:55">s</name><operator pos:start="11:56" pos:end="11:57">-&gt;</operator><name pos:start="11:58" pos:end="11:64">devname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:44">/* wait for pending buffer references */</comment>

    <if_stmt pos:start="17:5" pos:end="19:61"><if pos:start="17:5" pos:end="19:61">if <condition pos:start="17:8" pos:end="17:34">(<expr pos:start="17:9" pos:end="17:33"><call pos:start="17:9" pos:end="17:33"><name pos:start="17:9" pos:end="17:19">atomic_load</name><argument_list pos:start="17:20" pos:end="17:33">(<argument pos:start="17:21" pos:end="17:32"><expr pos:start="17:21" pos:end="17:32"><operator pos:start="17:21" pos:end="17:21">&amp;</operator><name pos:start="17:22" pos:end="17:32"><name pos:start="17:22" pos:end="17:22">s</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:32">refcount</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:61"><block_content pos:start="19:9" pos:end="19:61">

        <while pos:start="19:9" pos:end="19:61">while<condition pos:start="19:14" pos:end="19:60">(<expr pos:start="19:15" pos:end="19:59"><call pos:start="19:15" pos:end="19:35"><name pos:start="19:15" pos:end="19:22">sem_wait</name><argument_list pos:start="19:23" pos:end="19:35">(<argument pos:start="19:24" pos:end="19:34"><expr pos:start="19:24" pos:end="19:34"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:34"><name pos:start="19:25" pos:end="19:25">s</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:34">refsync</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:37" pos:end="19:38">==</operator> <operator pos:start="19:40" pos:end="19:40">-</operator><literal type="number" pos:start="19:41" pos:end="19:41">1</literal> <operator pos:start="19:43" pos:end="19:44">&amp;&amp;</operator> <name pos:start="19:46" pos:end="19:50">errno</name> <operator pos:start="19:52" pos:end="19:53">==</operator> <name pos:start="19:55" pos:end="19:59">EINTR</name></expr>)</condition><block type="pseudo" pos:start="19:61" pos:end="19:61"><block_content pos:start="19:61" pos:end="19:61"><empty_stmt pos:start="19:61" pos:end="19:61">;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:26">/* close the driver */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:25">ff_v4l2_m2m_codec_end</name><argument_list pos:start="25:26" pos:end="25:35">(<argument pos:start="25:27" pos:end="25:34"><expr pos:start="25:27" pos:end="25:34"><name pos:start="25:27" pos:end="25:34"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:34">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:60">/* start again now that we know the stream dimensions */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:20"><expr pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:15">draining</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:18"><expr pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:13">reinit</name></name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:53"><expr pos:start="37:5" pos:end="37:52"><name pos:start="37:5" pos:end="37:9"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:9">fd</name></name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:52"><name pos:start="37:13" pos:end="37:16">open</name><argument_list pos:start="37:17" pos:end="37:52">(<argument pos:start="37:18" pos:end="37:27"><expr pos:start="37:18" pos:end="37:27"><name pos:start="37:18" pos:end="37:27"><name pos:start="37:18" pos:end="37:18">s</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:27">devname</name></name></expr></argument>, <argument pos:start="37:30" pos:end="37:48"><expr pos:start="37:30" pos:end="37:48"><name pos:start="37:30" pos:end="37:35">O_RDWR</name> <operator pos:start="37:37" pos:end="37:37">|</operator> <name pos:start="37:39" pos:end="37:48">O_NONBLOCK</name></expr></argument>, <argument pos:start="37:51" pos:end="37:51"><expr pos:start="37:51" pos:end="37:51"><literal type="number" pos:start="37:51" pos:end="37:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:30"><if pos:start="39:5" pos:end="41:30">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:13">fd</name></name> <operator pos:start="39:15" pos:end="39:15">&lt;</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:30"><block_content pos:start="41:9" pos:end="41:30">

        <return pos:start="41:9" pos:end="41:30">return <expr pos:start="41:16" pos:end="41:29"><call pos:start="41:16" pos:end="41:29"><name pos:start="41:16" pos:end="41:22">AVERROR</name><argument_list pos:start="41:23" pos:end="41:29">(<argument pos:start="41:24" pos:end="41:28"><expr pos:start="41:24" pos:end="41:28"><name pos:start="41:24" pos:end="41:28">errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:35"><expr pos:start="45:5" pos:end="45:34"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:34"><name pos:start="45:11" pos:end="45:31">v4l2_prepare_contexts</name><argument_list pos:start="45:32" pos:end="45:34">(<argument pos:start="45:33" pos:end="45:33"><expr pos:start="45:33" pos:end="45:33"><name pos:start="45:33" pos:end="45:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:19"><if pos:start="47:5" pos:end="49:19">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:19"><block_content pos:start="49:9" pos:end="49:19">

        <goto pos:start="49:9" pos:end="49:19">goto <name pos:start="49:14" pos:end="49:18">error</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="57:7">/* if a full re-init was requested - probe didn't run - we need to populate

     * the format for each context

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:49"><expr pos:start="59:5" pos:end="59:48"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:48"><name pos:start="59:11" pos:end="59:36">ff_v4l2_context_get_format</name><argument_list pos:start="59:37" pos:end="59:48">(<argument pos:start="59:38" pos:end="59:47"><expr pos:start="59:38" pos:end="59:47"><operator pos:start="59:38" pos:end="59:38">&amp;</operator><name pos:start="59:39" pos:end="59:47"><name pos:start="59:39" pos:end="59:39">s</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:47">output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:12">(<expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">ret</name></expr>)</condition> <block pos:start="61:14" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:19">

        <expr_stmt pos:start="63:9" pos:end="63:76"><expr pos:start="63:9" pos:end="63:75"><call pos:start="63:9" pos:end="63:75"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:75">(<argument pos:start="63:16" pos:end="63:22"><expr pos:start="63:16" pos:end="63:22"><name pos:start="63:16" pos:end="63:22">log_ctx</name></expr></argument>, <argument pos:start="63:25" pos:end="63:36"><expr pos:start="63:25" pos:end="63:36"><name pos:start="63:25" pos:end="63:36">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="63:39" pos:end="63:74"><expr pos:start="63:39" pos:end="63:74"><literal type="string" pos:start="63:39" pos:end="63:74">"v4l2 output format not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:19">goto <name pos:start="65:14" pos:end="65:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:49"><name pos:start="71:11" pos:end="71:36">ff_v4l2_context_get_format</name><argument_list pos:start="71:37" pos:end="71:49">(<argument pos:start="71:38" pos:end="71:48"><expr pos:start="71:38" pos:end="71:48"><operator pos:start="71:38" pos:end="71:38">&amp;</operator><name pos:start="71:39" pos:end="71:48"><name pos:start="71:39" pos:end="71:39">s</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:48">capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:12">(<expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">ret</name></expr>)</condition> <block pos:start="73:14" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:19">

        <expr_stmt pos:start="75:9" pos:end="75:77"><expr pos:start="75:9" pos:end="75:76"><call pos:start="75:9" pos:end="75:76"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="75:76">(<argument pos:start="75:16" pos:end="75:22"><expr pos:start="75:16" pos:end="75:22"><name pos:start="75:16" pos:end="75:22">log_ctx</name></expr></argument>, <argument pos:start="75:25" pos:end="75:36"><expr pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:36">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="75:39" pos:end="75:75"><expr pos:start="75:39" pos:end="75:75"><literal type="string" pos:start="75:39" pos:end="75:75">"v4l2 capture format not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:19">goto <name pos:start="77:14" pos:end="77:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:49"><expr pos:start="83:5" pos:end="83:48"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:48"><name pos:start="83:11" pos:end="83:36">ff_v4l2_context_set_format</name><argument_list pos:start="83:37" pos:end="83:48">(<argument pos:start="83:38" pos:end="83:47"><expr pos:start="83:38" pos:end="83:47"><operator pos:start="83:38" pos:end="83:38">&amp;</operator><name pos:start="83:39" pos:end="83:47"><name pos:start="83:39" pos:end="83:39">s</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:47">output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:12">(<expr pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">ret</name></expr>)</condition> <block pos:start="85:14" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:72"><expr pos:start="87:9" pos:end="87:71"><call pos:start="87:9" pos:end="87:71"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:71">(<argument pos:start="87:16" pos:end="87:22"><expr pos:start="87:16" pos:end="87:22"><name pos:start="87:16" pos:end="87:22">log_ctx</name></expr></argument>, <argument pos:start="87:25" pos:end="87:36"><expr pos:start="87:25" pos:end="87:36"><name pos:start="87:25" pos:end="87:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:39" pos:end="87:70"><expr pos:start="87:39" pos:end="87:70"><literal type="string" pos:start="87:39" pos:end="87:70">"can't set v4l2 output format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:19">goto <name pos:start="89:14" pos:end="89:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:50"><expr pos:start="95:5" pos:end="95:49"><name pos:start="95:5" pos:end="95:7">ret</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:49"><name pos:start="95:11" pos:end="95:36">ff_v4l2_context_set_format</name><argument_list pos:start="95:37" pos:end="95:49">(<argument pos:start="95:38" pos:end="95:48"><expr pos:start="95:38" pos:end="95:48"><operator pos:start="95:38" pos:end="95:38">&amp;</operator><name pos:start="95:39" pos:end="95:48"><name pos:start="95:39" pos:end="95:39">s</name><operator pos:start="95:40" pos:end="95:41">-&gt;</operator><name pos:start="95:42" pos:end="95:48">capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:12">(<expr pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">ret</name></expr>)</condition> <block pos:start="97:14" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:19">

        <expr_stmt pos:start="99:9" pos:end="99:76"><expr pos:start="99:9" pos:end="99:75"><call pos:start="99:9" pos:end="99:75"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:75">(<argument pos:start="99:16" pos:end="99:22"><expr pos:start="99:16" pos:end="99:22"><name pos:start="99:16" pos:end="99:22">log_ctx</name></expr></argument>, <argument pos:start="99:25" pos:end="99:36"><expr pos:start="99:25" pos:end="99:36"><name pos:start="99:25" pos:end="99:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:39" pos:end="99:74"><expr pos:start="99:39" pos:end="99:74"><literal type="string" pos:start="99:39" pos:end="99:74">"can't to set v4l2 capture format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:19">goto <name pos:start="101:14" pos:end="101:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:43"><expr pos:start="107:5" pos:end="107:42"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="107:42"><name pos:start="107:11" pos:end="107:30">ff_v4l2_context_init</name><argument_list pos:start="107:31" pos:end="107:42">(<argument pos:start="107:32" pos:end="107:41"><expr pos:start="107:32" pos:end="107:41"><operator pos:start="107:32" pos:end="107:32">&amp;</operator><name pos:start="107:33" pos:end="107:41"><name pos:start="107:33" pos:end="107:33">s</name><operator pos:start="107:34" pos:end="107:35">-&gt;</operator><name pos:start="107:36" pos:end="107:41">output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:12">(<expr pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">ret</name></expr>)</condition> <block pos:start="109:14" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:19">

        <expr_stmt pos:start="111:9" pos:end="111:76"><expr pos:start="111:9" pos:end="111:75"><call pos:start="111:9" pos:end="111:75"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="111:75">(<argument pos:start="111:16" pos:end="111:22"><expr pos:start="111:16" pos:end="111:22"><name pos:start="111:16" pos:end="111:22">log_ctx</name></expr></argument>, <argument pos:start="111:25" pos:end="111:36"><expr pos:start="111:25" pos:end="111:36"><name pos:start="111:25" pos:end="111:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:39" pos:end="111:74"><expr pos:start="111:39" pos:end="111:74"><literal type="string" pos:start="111:39" pos:end="111:74">"no v4l2 output context's buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:19">goto <name pos:start="113:14" pos:end="113:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:63">/* decoder's buffers need to be updated at a later stage */</comment>

    <if_stmt pos:start="121:5" pos:end="133:5"><if pos:start="121:5" pos:end="133:5">if <condition pos:start="121:8" pos:end="121:46">(<expr pos:start="121:9" pos:end="121:45"><operator pos:start="121:9" pos:end="121:9">!</operator><call pos:start="121:10" pos:end="121:45"><name pos:start="121:10" pos:end="121:28">av_codec_is_decoder</name><argument_list pos:start="121:29" pos:end="121:45">(<argument pos:start="121:30" pos:end="121:44"><expr pos:start="121:30" pos:end="121:44"><name pos:start="121:30" pos:end="121:44"><name pos:start="121:30" pos:end="121:30">s</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:37">avctx</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:44">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:48" pos:end="133:5">{<block_content pos:start="123:9" pos:end="131:9">

        <expr_stmt pos:start="123:9" pos:end="123:48"><expr pos:start="123:9" pos:end="123:47"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="123:47"><name pos:start="123:15" pos:end="123:34">ff_v4l2_context_init</name><argument_list pos:start="123:35" pos:end="123:47">(<argument pos:start="123:36" pos:end="123:46"><expr pos:start="123:36" pos:end="123:46"><operator pos:start="123:36" pos:end="123:36">&amp;</operator><name pos:start="123:37" pos:end="123:46"><name pos:start="123:37" pos:end="123:37">s</name><operator pos:start="123:38" pos:end="123:39">-&gt;</operator><name pos:start="123:40" pos:end="123:46">capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="125:16">(<expr pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:15">ret</name></expr>)</condition> <block pos:start="125:18" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:23">

            <expr_stmt pos:start="127:13" pos:end="127:81"><expr pos:start="127:13" pos:end="127:80"><call pos:start="127:13" pos:end="127:80"><name pos:start="127:13" pos:end="127:18">av_log</name><argument_list pos:start="127:19" pos:end="127:80">(<argument pos:start="127:20" pos:end="127:26"><expr pos:start="127:20" pos:end="127:26"><name pos:start="127:20" pos:end="127:26">log_ctx</name></expr></argument>, <argument pos:start="127:29" pos:end="127:40"><expr pos:start="127:29" pos:end="127:40"><name pos:start="127:29" pos:end="127:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:43" pos:end="127:79"><expr pos:start="127:43" pos:end="127:79"><literal type="string" pos:start="127:43" pos:end="127:79">"no v4l2 capture context's buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:23">goto <name pos:start="129:18" pos:end="129:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="137:5" pos:end="137:13">return <expr pos:start="137:12" pos:end="137:12"><literal type="number" pos:start="137:12" pos:end="137:12">0</literal></expr>;</return>



<label pos:start="141:1" pos:end="141:6"><name pos:start="141:1" pos:end="141:5">error</name>:</label>

    <if_stmt pos:start="143:5" pos:end="151:5"><if pos:start="143:5" pos:end="151:5">if <condition pos:start="143:8" pos:end="143:25">(<expr pos:start="143:9" pos:end="143:24"><call pos:start="143:9" pos:end="143:20"><name pos:start="143:9" pos:end="143:13">close</name><argument_list pos:start="143:14" pos:end="143:20">(<argument pos:start="143:15" pos:end="143:19"><expr pos:start="143:15" pos:end="143:19"><name pos:start="143:15" pos:end="143:19"><name pos:start="143:15" pos:end="143:15">s</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:19">fd</name></name></expr></argument>)</argument_list></call> <operator pos:start="143:22" pos:end="143:22">&lt;</operator> <literal type="number" pos:start="143:24" pos:end="143:24">0</literal></expr>)</condition> <block pos:start="143:27" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:52">

        <expr_stmt pos:start="145:9" pos:end="145:29"><expr pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="145:28"><name pos:start="145:15" pos:end="145:21">AVERROR</name><argument_list pos:start="145:22" pos:end="145:28">(<argument pos:start="145:23" pos:end="145:27"><expr pos:start="145:23" pos:end="145:27"><name pos:start="145:23" pos:end="145:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="149:52"><expr pos:start="147:9" pos:end="149:51"><call pos:start="147:9" pos:end="149:51"><name pos:start="147:9" pos:end="147:14">av_log</name><argument_list pos:start="147:15" pos:end="149:51">(<argument pos:start="147:16" pos:end="147:22"><expr pos:start="147:16" pos:end="147:22"><name pos:start="147:16" pos:end="147:22">log_ctx</name></expr></argument>, <argument pos:start="147:25" pos:end="147:36"><expr pos:start="147:25" pos:end="147:36"><name pos:start="147:25" pos:end="147:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:39" pos:end="147:63"><expr pos:start="147:39" pos:end="147:63"><literal type="string" pos:start="147:39" pos:end="147:63">"error closing %s (%s)\n"</literal></expr></argument>,

            <argument pos:start="149:13" pos:end="149:22"><expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:13">s</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:22">devname</name></name></expr></argument>, <argument pos:start="149:25" pos:end="149:50"><expr pos:start="149:25" pos:end="149:50"><call pos:start="149:25" pos:end="149:50"><name pos:start="149:25" pos:end="149:34">av_err2str</name><argument_list pos:start="149:35" pos:end="149:50">(<argument pos:start="149:36" pos:end="149:49"><expr pos:start="149:36" pos:end="149:49"><call pos:start="149:36" pos:end="149:49"><name pos:start="149:36" pos:end="149:42">AVERROR</name><argument_list pos:start="149:43" pos:end="149:49">(<argument pos:start="149:44" pos:end="149:48"><expr pos:start="149:44" pos:end="149:48"><name pos:start="149:44" pos:end="149:48">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:15"><expr pos:start="153:5" pos:end="153:14"><name pos:start="153:5" pos:end="153:9"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:9">fd</name></name> <operator pos:start="153:11" pos:end="153:11">=</operator> <operator pos:start="153:13" pos:end="153:13">-</operator><literal type="number" pos:start="153:14" pos:end="153:14">1</literal></expr>;</expr_stmt>



    <return pos:start="157:5" pos:end="157:15">return <expr pos:start="157:12" pos:end="157:14"><name pos:start="157:12" pos:end="157:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
