<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1413.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">vga_common_init</name><parameter_list pos:start="1:21" pos:end="1:73">(<parameter pos:start="1:22" pos:end="1:38"><decl pos:start="1:22" pos:end="1:38"><type pos:start="1:22" pos:end="1:38"><name pos:start="1:22" pos:end="1:35">VGACommonState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:51"><decl pos:start="1:41" pos:end="1:51"><type pos:start="1:41" pos:end="1:51"><name pos:start="1:41" pos:end="1:46">Object</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">obj</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><name pos:start="1:54" pos:end="1:57">bool</name></type> <name pos:start="1:59" pos:end="1:72">global_vmstate</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:27">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">v</name></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">b</name></decl>;</decl_stmt>



    <for pos:start="9:5" pos:end="33:5">for<control pos:start="9:8" pos:end="9:27">(<init pos:start="9:9" pos:end="9:14"><expr pos:start="9:9" pos:end="9:13"><name pos:start="9:9" pos:end="9:9">i</name> <operator pos:start="9:11" pos:end="9:11">=</operator> <literal type="number" pos:start="9:13" pos:end="9:13">0</literal></expr>;</init><condition pos:start="9:15" pos:end="9:22"><expr pos:start="9:15" pos:end="9:21"><name pos:start="9:15" pos:end="9:15">i</name> <operator pos:start="9:17" pos:end="9:17">&lt;</operator> <literal type="number" pos:start="9:19" pos:end="9:21">256</literal></expr>;</condition> <incr pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:24">i</name><operator pos:start="9:25" pos:end="9:26">++</operator></expr></incr>)</control> <block pos:start="9:29" pos:end="33:5">{<block_content pos:start="11:9" pos:end="31:23">

        <expr_stmt pos:start="11:9" pos:end="11:14"><expr pos:start="11:9" pos:end="11:13"><name pos:start="11:9" pos:end="11:9">v</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">0</literal></expr>;</expr_stmt>

        <for pos:start="13:9" pos:end="17:9">for<control pos:start="13:12" pos:end="13:30">(<init pos:start="13:13" pos:end="13:18"><expr pos:start="13:13" pos:end="13:17"><name pos:start="13:13" pos:end="13:13">j</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr>;</init> <condition pos:start="13:20" pos:end="13:25"><expr pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:20">j</name> <operator pos:start="13:22" pos:end="13:22">&lt;</operator> <literal type="number" pos:start="13:24" pos:end="13:24">8</literal></expr>;</condition> <incr pos:start="13:27" pos:end="13:29"><expr pos:start="13:27" pos:end="13:29"><name pos:start="13:27" pos:end="13:27">j</name><operator pos:start="13:28" pos:end="13:29">++</operator></expr></incr>)</control> <block pos:start="13:32" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:43">

            <expr_stmt pos:start="15:13" pos:end="15:43"><expr pos:start="15:13" pos:end="15:42"><name pos:start="15:13" pos:end="15:13">v</name> <operator pos:start="15:15" pos:end="15:16">|=</operator> <operator pos:start="15:18" pos:end="15:18">(</operator><operator pos:start="15:19" pos:end="15:19">(</operator><name pos:start="15:20" pos:end="15:20">i</name> <operator pos:start="15:22" pos:end="15:23">&gt;&gt;</operator> <name pos:start="15:25" pos:end="15:25">j</name><operator pos:start="15:26" pos:end="15:26">)</operator> <operator pos:start="15:28" pos:end="15:28">&amp;</operator> <literal type="number" pos:start="15:30" pos:end="15:30">1</literal><operator pos:start="15:31" pos:end="15:31">)</operator> <operator pos:start="15:33" pos:end="15:34">&lt;&lt;</operator> <operator pos:start="15:36" pos:end="15:36">(</operator><name pos:start="15:37" pos:end="15:37">j</name> <operator pos:start="15:39" pos:end="15:39">*</operator> <literal type="number" pos:start="15:41" pos:end="15:41">4</literal><operator pos:start="15:42" pos:end="15:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="19:9" pos:end="19:23"><expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:15">expand4</name><index pos:start="19:16" pos:end="19:18">[<expr pos:start="19:17" pos:end="19:17"><name pos:start="19:17" pos:end="19:17">i</name></expr>]</index></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:22">v</name></expr>;</expr_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:14"><expr pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:9">v</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <literal type="number" pos:start="23:13" pos:end="23:13">0</literal></expr>;</expr_stmt>

        <for pos:start="25:9" pos:end="29:9">for<control pos:start="25:12" pos:end="25:30">(<init pos:start="25:13" pos:end="25:18"><expr pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:13">j</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr>;</init> <condition pos:start="25:20" pos:end="25:25"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:20">j</name> <operator pos:start="25:22" pos:end="25:22">&lt;</operator> <literal type="number" pos:start="25:24" pos:end="25:24">4</literal></expr>;</condition> <incr pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:27">j</name><operator pos:start="25:28" pos:end="25:29">++</operator></expr></incr>)</control> <block pos:start="25:32" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:49">

            <expr_stmt pos:start="27:13" pos:end="27:49"><expr pos:start="27:13" pos:end="27:48"><name pos:start="27:13" pos:end="27:13">v</name> <operator pos:start="27:15" pos:end="27:16">|=</operator> <operator pos:start="27:18" pos:end="27:18">(</operator><operator pos:start="27:19" pos:end="27:19">(</operator><name pos:start="27:20" pos:end="27:20">i</name> <operator pos:start="27:22" pos:end="27:23">&gt;&gt;</operator> <operator pos:start="27:25" pos:end="27:25">(</operator><literal type="number" pos:start="27:26" pos:end="27:26">2</literal> <operator pos:start="27:28" pos:end="27:28">*</operator> <name pos:start="27:30" pos:end="27:30">j</name><operator pos:start="27:31" pos:end="27:31">)</operator><operator pos:start="27:32" pos:end="27:32">)</operator> <operator pos:start="27:34" pos:end="27:34">&amp;</operator> <literal type="number" pos:start="27:36" pos:end="27:36">3</literal><operator pos:start="27:37" pos:end="27:37">)</operator> <operator pos:start="27:39" pos:end="27:40">&lt;&lt;</operator> <operator pos:start="27:42" pos:end="27:42">(</operator><name pos:start="27:43" pos:end="27:43">j</name> <operator pos:start="27:45" pos:end="27:45">*</operator> <literal type="number" pos:start="27:47" pos:end="27:47">4</literal><operator pos:start="27:48" pos:end="27:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:15">expand2</name><index pos:start="31:16" pos:end="31:18">[<expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">i</name></expr>]</index></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <name pos:start="31:22" pos:end="31:22">v</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="35:5" pos:end="51:5">for<control pos:start="35:8" pos:end="35:27">(<init pos:start="35:9" pos:end="35:14"><expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">i</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <literal type="number" pos:start="35:13" pos:end="35:13">0</literal></expr>;</init> <condition pos:start="35:16" pos:end="35:22"><expr pos:start="35:16" pos:end="35:21"><name pos:start="35:16" pos:end="35:16">i</name> <operator pos:start="35:18" pos:end="35:18">&lt;</operator> <literal type="number" pos:start="35:20" pos:end="35:21">16</literal></expr>;</condition> <incr pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:24">i</name><operator pos:start="35:25" pos:end="35:26">++</operator></expr></incr>)</control> <block pos:start="35:29" pos:end="51:5">{<block_content pos:start="37:9" pos:end="49:26">

        <expr_stmt pos:start="37:9" pos:end="37:14"><expr pos:start="37:9" pos:end="37:13"><name pos:start="37:9" pos:end="37:9">v</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="47:9">for<control pos:start="39:12" pos:end="39:30">(<init pos:start="39:13" pos:end="39:18"><expr pos:start="39:13" pos:end="39:17"><name pos:start="39:13" pos:end="39:13">j</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</init> <condition pos:start="39:20" pos:end="39:25"><expr pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:20">j</name> <operator pos:start="39:22" pos:end="39:22">&lt;</operator> <literal type="number" pos:start="39:24" pos:end="39:24">4</literal></expr>;</condition> <incr pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:27">j</name><operator pos:start="39:28" pos:end="39:29">++</operator></expr></incr>)</control> <block pos:start="39:32" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:34">

            <expr_stmt pos:start="41:13" pos:end="41:31"><expr pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:13">b</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <operator pos:start="41:17" pos:end="41:17">(</operator><operator pos:start="41:18" pos:end="41:18">(</operator><name pos:start="41:19" pos:end="41:19">i</name> <operator pos:start="41:21" pos:end="41:22">&gt;&gt;</operator> <name pos:start="41:24" pos:end="41:24">j</name><operator pos:start="41:25" pos:end="41:25">)</operator> <operator pos:start="41:27" pos:end="41:27">&amp;</operator> <literal type="number" pos:start="41:29" pos:end="41:29">1</literal><operator pos:start="41:30" pos:end="41:30">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:30"><expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:13">v</name> <operator pos:start="43:15" pos:end="43:16">|=</operator> <name pos:start="43:18" pos:end="43:18">b</name> <operator pos:start="43:20" pos:end="43:21">&lt;&lt;</operator> <operator pos:start="43:23" pos:end="43:23">(</operator><literal type="number" pos:start="43:24" pos:end="43:24">2</literal> <operator pos:start="43:26" pos:end="43:26">*</operator> <name pos:start="43:28" pos:end="43:28">j</name><operator pos:start="43:29" pos:end="43:29">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:13">v</name> <operator pos:start="45:15" pos:end="45:16">|=</operator> <name pos:start="45:18" pos:end="45:18">b</name> <operator pos:start="45:20" pos:end="45:21">&lt;&lt;</operator> <operator pos:start="45:23" pos:end="45:23">(</operator><literal type="number" pos:start="45:24" pos:end="45:24">2</literal> <operator pos:start="45:26" pos:end="45:26">*</operator> <name pos:start="45:28" pos:end="45:28">j</name> <operator pos:start="45:30" pos:end="45:30">+</operator> <literal type="number" pos:start="45:32" pos:end="45:32">1</literal><operator pos:start="45:33" pos:end="45:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="49:9" pos:end="49:26"><expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:18">expand4to8</name><index pos:start="49:19" pos:end="49:21">[<expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">i</name></expr>]</index></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:25">v</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="55:5" pos:end="55:58"><expr pos:start="55:5" pos:end="55:57"><name pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:19">vram_size_mb</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:57"><name pos:start="55:23" pos:end="55:32">uint_clamp</name><argument_list pos:start="55:33" pos:end="55:57">(<argument pos:start="55:34" pos:end="55:48"><expr pos:start="55:34" pos:end="55:48"><name pos:start="55:34" pos:end="55:48"><name pos:start="55:34" pos:end="55:34">s</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:48">vram_size_mb</name></name></expr></argument>, <argument pos:start="55:51" pos:end="55:51"><expr pos:start="55:51" pos:end="55:51"><literal type="number" pos:start="55:51" pos:end="55:51">1</literal></expr></argument>, <argument pos:start="55:54" pos:end="55:56"><expr pos:start="55:54" pos:end="55:56"><literal type="number" pos:start="55:54" pos:end="55:56">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:48"><expr pos:start="57:5" pos:end="57:47"><name pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:19">vram_size_mb</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:47"><name pos:start="57:23" pos:end="57:30">pow2ceil</name><argument_list pos:start="57:31" pos:end="57:47">(<argument pos:start="57:32" pos:end="57:46"><expr pos:start="57:32" pos:end="57:46"><name pos:start="57:32" pos:end="57:46"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:46">vram_size_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:16"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:16">vram_size</name></name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:34"><name pos:start="59:20" pos:end="59:20">s</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:34">vram_size_mb</name></name> <operator pos:start="59:36" pos:end="59:37">&lt;&lt;</operator> <literal type="number" pos:start="59:39" pos:end="59:40">20</literal></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:21">(<expr pos:start="63:9" pos:end="63:20"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:20"><name pos:start="63:10" pos:end="63:10">s</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:20">vbe_size</name></name></expr>)</condition> <block pos:start="63:23" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:35">

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:19">vbe_size</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:23">s</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:34">vram_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:26"><expr pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:21">is_vbe_vmstate</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="75:41"><expr pos:start="73:5" pos:end="75:40"><call pos:start="73:5" pos:end="75:40"><name pos:start="73:5" pos:end="73:26">memory_region_init_ram</name><argument_list pos:start="73:27" pos:end="75:40">(<argument pos:start="73:28" pos:end="73:35"><expr pos:start="73:28" pos:end="73:35"><operator pos:start="73:28" pos:end="73:28">&amp;</operator><name pos:start="73:29" pos:end="73:35"><name pos:start="73:29" pos:end="73:29">s</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:35">vram</name></name></expr></argument>, <argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><name pos:start="73:38" pos:end="73:40">obj</name></expr></argument>, <argument pos:start="73:43" pos:end="73:52"><expr pos:start="73:43" pos:end="73:52"><literal type="string" pos:start="73:43" pos:end="73:52">"vga.vram"</literal></expr></argument>, <argument pos:start="73:55" pos:end="73:66"><expr pos:start="73:55" pos:end="73:66"><name pos:start="73:55" pos:end="73:66"><name pos:start="73:55" pos:end="73:55">s</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:66">vram_size</name></name></expr></argument>,

                           <argument pos:start="75:28" pos:end="75:39"><expr pos:start="75:28" pos:end="75:39"><operator pos:start="75:28" pos:end="75:28">&amp;</operator><name pos:start="75:29" pos:end="75:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:72"><expr pos:start="77:5" pos:end="77:71"><call pos:start="77:5" pos:end="77:71"><name pos:start="77:5" pos:end="77:24">vmstate_register_ram</name><argument_list pos:start="77:25" pos:end="77:71">(<argument pos:start="77:26" pos:end="77:33"><expr pos:start="77:26" pos:end="77:33"><operator pos:start="77:26" pos:end="77:26">&amp;</operator><name pos:start="77:27" pos:end="77:33"><name pos:start="77:27" pos:end="77:27">s</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:33">vram</name></name></expr></argument>, <argument pos:start="77:36" pos:end="77:70"><expr pos:start="77:36" pos:end="77:70"><ternary pos:start="77:36" pos:end="77:70"><condition pos:start="77:36" pos:end="77:51"><expr pos:start="77:36" pos:end="77:49"><name pos:start="77:36" pos:end="77:49">global_vmstate</name></expr> ?</condition><then pos:start="77:53" pos:end="77:56"> <expr pos:start="77:53" pos:end="77:56"><name pos:start="77:53" pos:end="77:56">NULL</name></expr> </then><else pos:start="77:58" pos:end="77:70">: <expr pos:start="77:60" pos:end="77:70"><call pos:start="77:60" pos:end="77:70"><name pos:start="77:60" pos:end="77:65">DEVICE</name><argument_list pos:start="77:66" pos:end="77:70">(<argument pos:start="77:67" pos:end="77:69"><expr pos:start="77:67" pos:end="77:69"><name pos:start="77:67" pos:end="77:69">obj</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><call pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:28">xen_register_framebuffer</name><argument_list pos:start="79:29" pos:end="79:38">(<argument pos:start="79:30" pos:end="79:37"><expr pos:start="79:30" pos:end="79:37"><operator pos:start="79:30" pos:end="79:30">&amp;</operator><name pos:start="79:31" pos:end="79:37"><name pos:start="79:31" pos:end="79:31">s</name><operator pos:start="79:32" pos:end="79:33">-&gt;</operator><name pos:start="79:34" pos:end="79:37">vram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:54"><expr pos:start="81:5" pos:end="81:53"><name pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:15">vram_ptr</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:53"><name pos:start="81:19" pos:end="81:43">memory_region_get_ram_ptr</name><argument_list pos:start="81:44" pos:end="81:53">(<argument pos:start="81:45" pos:end="81:52"><expr pos:start="81:45" pos:end="81:52"><operator pos:start="81:45" pos:end="81:45">&amp;</operator><name pos:start="81:46" pos:end="81:52"><name pos:start="81:46" pos:end="81:46">s</name><operator pos:start="81:47" pos:end="81:48">-&gt;</operator><name pos:start="81:49" pos:end="81:52">vram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:29"><expr pos:start="83:5" pos:end="83:28"><name pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:14">get_bpp</name></name> <operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:28">vga_get_bpp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:37"><expr pos:start="85:5" pos:end="85:36"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:18">get_offsets</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <name pos:start="85:22" pos:end="85:36">vga_get_offsets</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:43"><expr pos:start="87:5" pos:end="87:42"><name pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:21">get_resolution</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:42">vga_get_resolution</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:25"><expr pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:13"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:13">hw_ops</name></name> <operator pos:start="89:15" pos:end="89:15">=</operator> <operator pos:start="89:17" pos:end="89:17">&amp;</operator><name pos:start="89:18" pos:end="89:24">vga_ops</name></expr>;</expr_stmt>

    <switch pos:start="91:5" pos:end="126:0">switch <condition pos:start="91:12" pos:end="91:31">(<expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:30">vga_retrace_method</name></expr>)</condition> <block pos:start="91:33" pos:end="126:0">{<block_content pos:start="93:5" pos:end="109:14">

    <case pos:start="93:5" pos:end="93:26">case <expr pos:start="93:10" pos:end="93:25"><name pos:start="93:10" pos:end="93:25">VGA_RETRACE_DUMB</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:38"><expr pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:18">retrace</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:37">vga_dumb_retrace</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:62"><expr pos:start="97:9" pos:end="97:61"><name pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:30">update_retrace_info</name></name> <operator pos:start="97:32" pos:end="97:32">=</operator> <name pos:start="97:34" pos:end="97:61">vga_dumb_update_retrace_info</name></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>



    <case pos:start="103:5" pos:end="103:29">case <expr pos:start="103:10" pos:end="103:28"><name pos:start="103:10" pos:end="103:28">VGA_RETRACE_PRECISE</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:41"><expr pos:start="105:9" pos:end="105:40"><name pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:18">retrace</name></name> <operator pos:start="105:20" pos:end="105:20">=</operator> <name pos:start="105:22" pos:end="105:40">vga_precise_retrace</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:65"><expr pos:start="107:9" pos:end="107:64"><name pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:30">update_retrace_info</name></name> <operator pos:start="107:32" pos:end="107:32">=</operator> <name pos:start="107:34" pos:end="107:64">vga_precise_update_retrace_info</name></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="115:5" pos:end="123:7">/*

     * Set default fb endian based on target, could probably be turned

     * into a device attribute set by the machine/platform to remove

     * all target endian dependencies from this file.

     */</comment>

<cpp:ifdef pos:start="125:1" pos:end="125:29">#<cpp:directive pos:start="125:2" pos:end="125:6">ifdef</cpp:directive> <name pos:start="125:8" pos:end="125:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="127:5" pos:end="130:0"><expr pos:start="127:5" pos:end="127:31"><name pos:start="127:5" pos:end="127:24"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:24">default_endian_fb</name></name> <operator pos:start="127:26" pos:end="127:26">=</operator> <name pos:start="127:28" pos:end="127:31">true</name></expr>;</expr_stmt>

<cpp:else pos:start="129:1" pos:end="129:5">#<cpp:directive pos:start="129:2" pos:end="129:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="131:5" pos:end="134:0"><expr pos:start="131:5" pos:end="131:32"><name pos:start="131:5" pos:end="131:24"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:24">default_endian_fb</name></name> <operator pos:start="131:26" pos:end="131:26">=</operator> <name pos:start="131:28" pos:end="131:32">false</name></expr>;</expr_stmt>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="135:5" pos:end="135:27"><expr pos:start="135:5" pos:end="135:26"><call pos:start="135:5" pos:end="135:26"><name pos:start="135:5" pos:end="135:23">vga_dirty_log_start</name><argument_list pos:start="135:24" pos:end="135:26">(<argument pos:start="135:25" pos:end="135:25"><expr pos:start="135:25" pos:end="135:25"><name pos:start="135:25" pos:end="135:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
