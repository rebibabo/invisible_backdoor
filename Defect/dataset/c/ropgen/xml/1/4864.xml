<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4864.c" pos:tabs="8"><function pos:start="1:1" pos:end="50:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">QTestState</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:44">qtest_init_without_qmp_handshake</name><parameter_list pos:start="1:45" pos:end="1:68">(<parameter pos:start="1:46" pos:end="1:67"><decl pos:start="1:46" pos:end="1:67"><type pos:start="1:46" pos:end="1:57"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:67">extra_args</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="50:1">{<block_content pos:start="3:5" pos:end="49:13">
    <decl_stmt pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:17"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">QTestState</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:17">s</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:25"><decl pos:start="4:5" pos:end="4:12"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:12">sock</name></decl>, <decl pos:start="4:15" pos:end="4:21"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:15" pos:end="4:21">qmpsock</name></decl>, <decl pos:start="4:24" pos:end="4:24"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:24" pos:end="4:24">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">gchar</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:22">socket_path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:27"><decl pos:start="6:5" pos:end="6:26"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:9">gchar</name> <modifier pos:start="6:11" pos:end="6:11">*</modifier></type><name pos:start="6:12" pos:end="6:26">qmp_socket_path</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">gchar</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:18">command</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:16"><specifier pos:start="8:5" pos:end="8:9">const</specifier> <name pos:start="8:11" pos:end="8:14">char</name> <modifier pos:start="8:16" pos:end="8:16">*</modifier></type><name pos:start="8:17" pos:end="8:27">qemu_binary</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:46"><expr pos:start="9:5" pos:end="9:45"><name pos:start="9:5" pos:end="9:15">qemu_binary</name> <operator pos:start="9:17" pos:end="9:17">=</operator> <call pos:start="9:19" pos:end="9:45"><name pos:start="9:19" pos:end="9:24">getenv</name><argument_list pos:start="9:25" pos:end="9:45">(<argument pos:start="9:26" pos:end="9:44"><expr pos:start="9:26" pos:end="9:44"><literal type="string" pos:start="9:26" pos:end="9:44">"QTEST_QEMU_BINARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:34"><expr pos:start="10:5" pos:end="10:33"><call pos:start="10:5" pos:end="10:33"><name pos:start="10:5" pos:end="10:12">g_assert</name><argument_list pos:start="10:13" pos:end="10:33">(<argument pos:start="10:14" pos:end="10:32"><expr pos:start="10:14" pos:end="10:32"><name pos:start="10:14" pos:end="10:24">qemu_binary</name> <operator pos:start="10:26" pos:end="10:27">!=</operator> <name pos:start="10:29" pos:end="10:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:29"><expr pos:start="11:5" pos:end="11:28"><name pos:start="11:5" pos:end="11:5">s</name> <operator pos:start="11:7" pos:end="11:7">=</operator> <call pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:16">g_malloc</name><argument_list pos:start="11:17" pos:end="11:28">(<argument pos:start="11:18" pos:end="11:27"><expr pos:start="11:18" pos:end="11:27"><sizeof pos:start="11:18" pos:end="11:27">sizeof<argument_list pos:start="11:24" pos:end="11:27">(<argument pos:start="11:25" pos:end="11:26"><expr pos:start="11:25" pos:end="11:26"><operator pos:start="11:25" pos:end="11:25">*</operator><name pos:start="11:26" pos:end="11:26">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:66"><expr pos:start="12:5" pos:end="12:65"><name pos:start="12:5" pos:end="12:15">socket_path</name> <operator pos:start="12:17" pos:end="12:17">=</operator> <call pos:start="12:19" pos:end="12:65"><name pos:start="12:19" pos:end="12:33">g_strdup_printf</name><argument_list pos:start="12:34" pos:end="12:65">(<argument pos:start="12:35" pos:end="12:54"><expr pos:start="12:35" pos:end="12:54"><literal type="string" pos:start="12:35" pos:end="12:54">"/tmp/qtest-%d.sock"</literal></expr></argument>, <argument pos:start="12:57" pos:end="12:64"><expr pos:start="12:57" pos:end="12:64"><call pos:start="12:57" pos:end="12:64"><name pos:start="12:57" pos:end="12:62">getpid</name><argument_list pos:start="12:63" pos:end="12:64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:69"><expr pos:start="13:5" pos:end="13:68"><name pos:start="13:5" pos:end="13:19">qmp_socket_path</name> <operator pos:start="13:21" pos:end="13:21">=</operator> <call pos:start="13:23" pos:end="13:68"><name pos:start="13:23" pos:end="13:37">g_strdup_printf</name><argument_list pos:start="13:38" pos:end="13:68">(<argument pos:start="13:39" pos:end="13:57"><expr pos:start="13:39" pos:end="13:57"><literal type="string" pos:start="13:39" pos:end="13:57">"/tmp/qtest-%d.qmp"</literal></expr></argument>, <argument pos:start="13:60" pos:end="13:67"><expr pos:start="13:60" pos:end="13:67"><call pos:start="13:60" pos:end="13:67"><name pos:start="13:60" pos:end="13:65">getpid</name><argument_list pos:start="13:66" pos:end="13:67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:36"><expr pos:start="14:5" pos:end="14:35"><name pos:start="14:5" pos:end="14:8">sock</name> <operator pos:start="14:10" pos:end="14:10">=</operator> <call pos:start="14:12" pos:end="14:35"><name pos:start="14:12" pos:end="14:22">init_socket</name><argument_list pos:start="14:23" pos:end="14:35">(<argument pos:start="14:24" pos:end="14:34"><expr pos:start="14:24" pos:end="14:34"><name pos:start="14:24" pos:end="14:34">socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:11">qmpsock</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:42"><name pos:start="15:15" pos:end="15:25">init_socket</name><argument_list pos:start="15:26" pos:end="15:42">(<argument pos:start="15:27" pos:end="15:41"><expr pos:start="15:27" pos:end="15:41"><name pos:start="15:27" pos:end="15:41">qmp_socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:51"><expr pos:start="16:5" pos:end="16:50"><call pos:start="16:5" pos:end="16:50"><name pos:start="16:5" pos:end="16:26">qtest_add_abrt_handler</name><argument_list pos:start="16:27" pos:end="16:50">(<argument pos:start="16:28" pos:end="16:46"><expr pos:start="16:28" pos:end="16:46"><name pos:start="16:28" pos:end="16:46">kill_qemu_hook_func</name></expr></argument>, <argument pos:start="16:49" pos:end="16:49"><expr pos:start="16:49" pos:end="16:49"><name pos:start="16:49" pos:end="16:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:15">qemu_pid</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="17:24"><name pos:start="17:19" pos:end="17:22">fork</name><argument_list pos:start="17:23" pos:end="17:24">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="32:5"><if pos:start="18:5" pos:end="32:5">if <condition pos:start="18:8" pos:end="18:25">(<expr pos:start="18:9" pos:end="18:24"><name pos:start="18:9" pos:end="18:19"><name pos:start="18:9" pos:end="18:9">s</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:19">qemu_pid</name></name> <operator pos:start="18:21" pos:end="18:22">==</operator> <literal type="number" pos:start="18:24" pos:end="18:24">0</literal></expr>)</condition> <block pos:start="18:27" pos:end="32:5">{<block_content pos:start="19:9" pos:end="31:16">
        <expr_stmt pos:start="19:9" pos:end="19:47"><expr pos:start="19:9" pos:end="19:46"><call pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:14">setenv</name><argument_list pos:start="19:15" pos:end="19:46">(<argument pos:start="19:16" pos:end="19:31"><expr pos:start="19:16" pos:end="19:31"><literal type="string" pos:start="19:16" pos:end="19:31">"QEMU_AUDIO_DRV"</literal></expr></argument>, <argument pos:start="19:34" pos:end="19:39"><expr pos:start="19:34" pos:end="19:39"><literal type="string" pos:start="19:34" pos:end="19:39">"none"</literal></expr></argument>, <argument pos:start="19:42" pos:end="19:45"><expr pos:start="19:42" pos:end="19:45"><name pos:start="19:42" pos:end="19:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="29:52"><expr pos:start="20:9" pos:end="29:51"><name pos:start="20:9" pos:end="20:15">command</name> <operator pos:start="20:17" pos:end="20:17">=</operator> <call pos:start="20:19" pos:end="29:51"><name pos:start="20:19" pos:end="20:33">g_strdup_printf</name><argument_list pos:start="20:34" pos:end="29:51">(<argument pos:start="20:35" pos:end="26:38"><expr pos:start="20:35" pos:end="26:38"><literal type="string" pos:start="20:35" pos:end="20:44">"exec %s "</literal>
                                  <literal type="string" pos:start="21:35" pos:end="21:58">"-qtest unix:%s,nowait "</literal>
                                  <literal type="string" pos:start="22:35" pos:end="22:50">"-qtest-log %s "</literal>
                                  <literal type="string" pos:start="23:35" pos:end="23:56">"-qmp unix:%s,nowait "</literal>
                                  <literal type="string" pos:start="24:35" pos:end="24:57">"-machine accel=qtest "</literal>
                                  <literal type="string" pos:start="25:35" pos:end="25:50">"-display none "</literal>
                                  <literal type="string" pos:start="26:35" pos:end="26:38">"%s"</literal></expr></argument>, <argument pos:start="26:41" pos:end="26:51"><expr pos:start="26:41" pos:end="26:51"><name pos:start="26:41" pos:end="26:51">qemu_binary</name></expr></argument>, <argument pos:start="26:54" pos:end="26:64"><expr pos:start="26:54" pos:end="26:64"><name pos:start="26:54" pos:end="26:64">socket_path</name></expr></argument>,
                                  <argument pos:start="27:35" pos:end="27:81"><expr pos:start="27:35" pos:end="27:81"><ternary pos:start="27:35" pos:end="27:81"><condition pos:start="27:35" pos:end="27:55"><expr pos:start="27:35" pos:end="27:53"><call pos:start="27:35" pos:end="27:53"><name pos:start="27:35" pos:end="27:40">getenv</name><argument_list pos:start="27:41" pos:end="27:53">(<argument pos:start="27:42" pos:end="27:52"><expr pos:start="27:42" pos:end="27:52"><literal type="string" pos:start="27:42" pos:end="27:52">"QTEST_LOG"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="27:57" pos:end="27:67"> <expr pos:start="27:57" pos:end="27:67"><literal type="string" pos:start="27:57" pos:end="27:67">"/dev/fd/2"</literal></expr> </then><else pos:start="27:69" pos:end="27:81">: <expr pos:start="27:71" pos:end="27:81"><literal type="string" pos:start="27:71" pos:end="27:81">"/dev/null"</literal></expr></else></ternary></expr></argument>,
                                  <argument pos:start="28:35" pos:end="28:49"><expr pos:start="28:35" pos:end="28:49"><name pos:start="28:35" pos:end="28:49">qmp_socket_path</name></expr></argument>,
                                  <argument pos:start="29:35" pos:end="29:50"><expr pos:start="29:35" pos:end="29:50"><ternary pos:start="29:35" pos:end="29:50"><condition pos:start="29:35" pos:end="29:46"><expr pos:start="29:35" pos:end="29:44"><name pos:start="29:35" pos:end="29:44">extra_args</name></expr> ?</condition><then/><else pos:start="29:47" pos:end="29:50">: <expr pos:start="29:49" pos:end="29:50"><literal type="string" pos:start="29:49" pos:end="29:50">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:53"><expr pos:start="30:9" pos:end="30:52"><call pos:start="30:9" pos:end="30:52"><name pos:start="30:9" pos:end="30:14">execlp</name><argument_list pos:start="30:15" pos:end="30:52">(<argument pos:start="30:16" pos:end="30:24"><expr pos:start="30:16" pos:end="30:24"><literal type="string" pos:start="30:16" pos:end="30:24">"/bin/sh"</literal></expr></argument>, <argument pos:start="30:27" pos:end="30:30"><expr pos:start="30:27" pos:end="30:30"><literal type="string" pos:start="30:27" pos:end="30:30">"sh"</literal></expr></argument>, <argument pos:start="30:33" pos:end="30:36"><expr pos:start="30:33" pos:end="30:36"><literal type="string" pos:start="30:33" pos:end="30:36">"-c"</literal></expr></argument>, <argument pos:start="30:39" pos:end="30:45"><expr pos:start="30:39" pos:end="30:45"><name pos:start="30:39" pos:end="30:45">command</name></expr></argument>, <argument pos:start="30:48" pos:end="30:51"><expr pos:start="30:48" pos:end="30:51"><name pos:start="30:48" pos:end="30:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><call pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">exit</name><argument_list pos:start="31:13" pos:end="31:15">(<argument pos:start="31:14" pos:end="31:14"><expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:9">fd</name></name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:25">socket_accept</name><argument_list pos:start="33:26" pos:end="33:31">(<argument pos:start="33:27" pos:end="33:30"><expr pos:start="33:27" pos:end="33:30"><name pos:start="33:27" pos:end="33:30">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="34:5" pos:end="36:5"><if pos:start="34:5" pos:end="36:5">if <condition pos:start="34:8" pos:end="34:19">(<expr pos:start="34:9" pos:end="34:18"><name pos:start="34:9" pos:end="34:13"><name pos:start="34:9" pos:end="34:9">s</name><operator pos:start="34:10" pos:end="34:11">-&gt;</operator><name pos:start="34:12" pos:end="34:13">fd</name></name> <operator pos:start="34:15" pos:end="34:16">&gt;=</operator> <literal type="number" pos:start="34:18" pos:end="34:18">0</literal></expr>)</condition> <block pos:start="34:21" pos:end="36:5">{<block_content pos:start="35:9" pos:end="35:43">
        <expr_stmt pos:start="35:9" pos:end="35:43"><expr pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">qmp_fd</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <call pos:start="35:21" pos:end="35:42"><name pos:start="35:21" pos:end="35:33">socket_accept</name><argument_list pos:start="35:34" pos:end="35:42">(<argument pos:start="35:35" pos:end="35:41"><expr pos:start="35:35" pos:end="35:41"><name pos:start="35:35" pos:end="35:41">qmpsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:24"><expr pos:start="37:5" pos:end="37:23"><call pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:10">g_free</name><argument_list pos:start="37:11" pos:end="37:23">(<argument pos:start="37:12" pos:end="37:22"><expr pos:start="37:12" pos:end="37:22"><name pos:start="37:12" pos:end="37:22">socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:28"><expr pos:start="38:5" pos:end="38:27"><call pos:start="38:5" pos:end="38:27"><name pos:start="38:5" pos:end="38:10">g_free</name><argument_list pos:start="38:11" pos:end="38:27">(<argument pos:start="38:12" pos:end="38:26"><expr pos:start="38:12" pos:end="38:26"><name pos:start="38:12" pos:end="38:26">qmp_socket_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><call pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:12">g_assert</name><argument_list pos:start="39:13" pos:end="39:42">(<argument pos:start="39:14" pos:end="39:41"><expr pos:start="39:14" pos:end="39:41"><name pos:start="39:14" pos:end="39:18"><name pos:start="39:14" pos:end="39:14">s</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:18">fd</name></name> <operator pos:start="39:20" pos:end="39:21">&gt;=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">0</literal> <operator pos:start="39:25" pos:end="39:26">&amp;&amp;</operator> <name pos:start="39:28" pos:end="39:36"><name pos:start="39:28" pos:end="39:28">s</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:36">qmp_fd</name></name> <operator pos:start="39:38" pos:end="39:39">&gt;=</operator> <literal type="number" pos:start="39:41" pos:end="39:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:29"><expr pos:start="40:5" pos:end="40:28"><name pos:start="40:5" pos:end="40:9"><name pos:start="40:5" pos:end="40:5">s</name><operator pos:start="40:6" pos:end="40:7">-&gt;</operator><name pos:start="40:8" pos:end="40:9">rx</name></name> <operator pos:start="40:11" pos:end="40:11">=</operator> <call pos:start="40:13" pos:end="40:28"><name pos:start="40:13" pos:end="40:24">g_string_new</name><argument_list pos:start="40:25" pos:end="40:28">(<argument pos:start="40:26" pos:end="40:27"><expr pos:start="40:26" pos:end="40:27"><literal type="string" pos:start="40:26" pos:end="40:27">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="41:5" pos:end="43:5">for <control pos:start="41:9" pos:end="41:33">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:28"><expr pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:27">MAX_IRQ</name></expr>;</condition> <incr pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:30">i</name><operator pos:start="41:31" pos:end="41:32">++</operator></expr></incr>)</control> <block pos:start="41:35" pos:end="43:5">{<block_content pos:start="42:9" pos:end="42:32">
        <expr_stmt pos:start="42:9" pos:end="42:32"><expr pos:start="42:9" pos:end="42:31"><name pos:start="42:9" pos:end="42:23"><name pos:start="42:9" pos:end="42:9">s</name><operator pos:start="42:10" pos:end="42:11">-&gt;</operator><name pos:start="42:12" pos:end="42:20">irq_level</name><index pos:start="42:21" pos:end="42:23">[<expr pos:start="42:22" pos:end="42:22"><name pos:start="42:22" pos:end="42:22">i</name></expr>]</index></name> <operator pos:start="42:25" pos:end="42:25">=</operator> <name pos:start="42:27" pos:end="42:31">false</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="44:5" pos:end="46:5"><if pos:start="44:5" pos:end="46:5">if <condition pos:start="44:8" pos:end="44:29">(<expr pos:start="44:9" pos:end="44:28"><call pos:start="44:9" pos:end="44:28"><name pos:start="44:9" pos:end="44:14">getenv</name><argument_list pos:start="44:15" pos:end="44:28">(<argument pos:start="44:16" pos:end="44:27"><expr pos:start="44:16" pos:end="44:27"><literal type="string" pos:start="44:16" pos:end="44:27">"QTEST_STOP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="44:31" pos:end="46:5">{<block_content pos:start="45:9" pos:end="45:35">
        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><call pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:12">kill</name><argument_list pos:start="45:13" pos:end="45:34">(<argument pos:start="45:14" pos:end="45:24"><expr pos:start="45:14" pos:end="45:24"><name pos:start="45:14" pos:end="45:24"><name pos:start="45:14" pos:end="45:14">s</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:24">qemu_pid</name></name></expr></argument>, <argument pos:start="45:27" pos:end="45:33"><expr pos:start="45:27" pos:end="45:33"><name pos:start="45:27" pos:end="45:33">SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="47:5" pos:end="47:38">/* ask endianness of the target */</comment>
    <expr_stmt pos:start="48:5" pos:end="48:53"><expr pos:start="48:5" pos:end="48:52"><name pos:start="48:5" pos:end="48:17"><name pos:start="48:5" pos:end="48:5">s</name><operator pos:start="48:6" pos:end="48:7">-&gt;</operator><name pos:start="48:8" pos:end="48:17">big_endian</name></name> <operator pos:start="48:19" pos:end="48:19">=</operator> <call pos:start="48:21" pos:end="48:52"><name pos:start="48:21" pos:end="48:49">qtest_query_target_endianness</name><argument_list pos:start="48:50" pos:end="48:52">(<argument pos:start="48:51" pos:end="48:51"><expr pos:start="48:51" pos:end="48:51"><name pos:start="48:51" pos:end="48:51">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><name pos:start="49:12" pos:end="49:12">s</name></expr>;</return>
</block_content>}</block></function></unit>
