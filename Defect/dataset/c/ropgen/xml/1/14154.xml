<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14154.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">combine_residual_frame</name><parameter_list pos:start="1:34" pos:end="1:67">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:47">DCAXllDecoder</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:63">DCAXllChSet</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:66">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">DCAContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dca</name> <init pos:start="5:21" pos:end="5:41">= <expr pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">ch</name></decl>, <decl pos:start="7:13" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:20">nsamples</name> <init pos:start="7:22" pos:end="7:39">= <expr pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:24">s</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:39">nframesamples</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">DCAXllChSet</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">o</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:37">// Verify that core is compatible</comment>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><operator pos:start="15:9" pos:end="15:9">!</operator><operator pos:start="15:10" pos:end="15:10">(</operator><name pos:start="15:11" pos:end="15:21"><name pos:start="15:11" pos:end="15:13">dca</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:21">packet</name></name> <operator pos:start="15:23" pos:end="15:23">&amp;</operator> <name pos:start="15:25" pos:end="15:39">DCA_PACKET_CORE</name><operator pos:start="15:40" pos:end="15:40">)</operator></expr>)</condition> <block pos:start="15:43" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:31">

        <expr_stmt pos:start="17:9" pos:end="17:95"><expr pos:start="17:9" pos:end="17:94"><call pos:start="17:9" pos:end="17:94"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:94">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:16">s</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">avctx</name></name></expr></argument>, <argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:40" pos:end="17:93"><expr pos:start="17:40" pos:end="17:93"><literal type="string" pos:start="17:40" pos:end="17:93">"Residual encoded channels are present without core\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:41">(<expr pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:9">c</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:15">freq</name></name> <operator pos:start="25:17" pos:end="25:18">!=</operator> <name pos:start="25:20" pos:end="25:40"><name pos:start="25:20" pos:end="25:22">dca</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:28">core</name><operator pos:start="25:29" pos:end="25:29">.</operator><name pos:start="25:30" pos:end="25:40">output_rate</name></name></expr>)</condition> <block pos:start="25:43" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:35">

        <expr_stmt pos:start="27:9" pos:end="27:136"><expr pos:start="27:9" pos:end="27:135"><call pos:start="27:9" pos:end="27:135"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:135">(<argument pos:start="27:16" pos:end="27:23"><expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">avctx</name></name></expr></argument>, <argument pos:start="27:26" pos:end="27:39"><expr pos:start="27:26" pos:end="27:39"><name pos:start="27:26" pos:end="27:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="27:42" pos:end="27:102"><expr pos:start="27:42" pos:end="27:102"><literal type="string" pos:start="27:42" pos:end="27:102">"Sample rate mismatch between core (%d Hz) and XLL (%d Hz)\n"</literal></expr></argument>, <argument pos:start="27:105" pos:end="27:125"><expr pos:start="27:105" pos:end="27:125"><name pos:start="27:105" pos:end="27:125"><name pos:start="27:105" pos:end="27:107">dca</name><operator pos:start="27:108" pos:end="27:109">-&gt;</operator><name pos:start="27:110" pos:end="27:113">core</name><operator pos:start="27:114" pos:end="27:114">.</operator><name pos:start="27:115" pos:end="27:125">output_rate</name></name></expr></argument>, <argument pos:start="27:128" pos:end="27:134"><expr pos:start="27:128" pos:end="27:134"><name pos:start="27:128" pos:end="27:134"><name pos:start="27:128" pos:end="27:128">c</name><operator pos:start="27:129" pos:end="27:130">-&gt;</operator><name pos:start="27:131" pos:end="27:134">freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:42">(<expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:16">nsamples</name> <operator pos:start="35:18" pos:end="35:19">!=</operator> <name pos:start="35:21" pos:end="35:41"><name pos:start="35:21" pos:end="35:23">dca</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:29">core</name><operator pos:start="35:30" pos:end="35:30">.</operator><name pos:start="35:31" pos:end="35:41">npcmsamples</name></name></expr>)</condition> <block pos:start="35:44" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:35">

        <expr_stmt pos:start="37:9" pos:end="37:147"><expr pos:start="37:9" pos:end="37:146"><call pos:start="37:9" pos:end="37:146"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:146">(<argument pos:start="37:16" pos:end="37:23"><expr pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:23">avctx</name></name></expr></argument>, <argument pos:start="37:26" pos:end="37:39"><expr pos:start="37:26" pos:end="37:39"><name pos:start="37:26" pos:end="37:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="37:42" pos:end="37:112"><expr pos:start="37:42" pos:end="37:112"><literal type="string" pos:start="37:42" pos:end="37:112">"Number of samples per frame mismatch between core (%d) and XLL (%d)\n"</literal></expr></argument>, <argument pos:start="37:115" pos:end="37:135"><expr pos:start="37:115" pos:end="37:135"><name pos:start="37:115" pos:end="37:135"><name pos:start="37:115" pos:end="37:117">dca</name><operator pos:start="37:118" pos:end="37:119">-&gt;</operator><name pos:start="37:120" pos:end="37:123">core</name><operator pos:start="37:124" pos:end="37:124">.</operator><name pos:start="37:125" pos:end="37:135">npcmsamples</name></name></expr></argument>, <argument pos:start="37:138" pos:end="37:145"><expr pos:start="37:138" pos:end="37:145"><name pos:start="37:138" pos:end="37:145">nsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="45:5" pos:end="45:76">// See if this channel set is downmixed and find the next channel set in</comment>

    <comment type="line" pos:start="47:5" pos:end="47:75">// hierarchy. If downmixed, undo core pre-scaling before combining with</comment>

    <comment type="line" pos:start="49:5" pos:end="49:41">// residual (residual is not scaled).</comment>

    <expr_stmt pos:start="51:5" pos:end="51:40"><expr pos:start="51:5" pos:end="51:39"><name pos:start="51:5" pos:end="51:5">o</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <call pos:start="51:9" pos:end="51:39"><name pos:start="51:9" pos:end="51:33">find_next_hier_dmix_chset</name><argument_list pos:start="51:34" pos:end="51:39">(<argument pos:start="51:35" pos:end="51:35"><expr pos:start="51:35" pos:end="51:35"><name pos:start="51:35" pos:end="51:35">s</name></expr></argument>, <argument pos:start="51:38" pos:end="51:38"><expr pos:start="51:38" pos:end="51:38"><name pos:start="51:38" pos:end="51:38">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="55:5" pos:end="55:54">// Reduce core bit width and combine with residual</comment>

    <for pos:start="57:5" pos:end="127:5">for <control pos:start="57:9" pos:end="57:41">(<init pos:start="57:10" pos:end="57:16"><expr pos:start="57:10" pos:end="57:15"><name pos:start="57:10" pos:end="57:11">ch</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>;</init> <condition pos:start="57:18" pos:end="57:35"><expr pos:start="57:18" pos:end="57:34"><name pos:start="57:18" pos:end="57:19">ch</name> <operator pos:start="57:21" pos:end="57:21">&lt;</operator> <name pos:start="57:23" pos:end="57:34"><name pos:start="57:23" pos:end="57:23">c</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:34">nchannels</name></name></expr>;</condition> <incr pos:start="57:37" pos:end="57:40"><expr pos:start="57:37" pos:end="57:40"><name pos:start="57:37" pos:end="57:38">ch</name><operator pos:start="57:39" pos:end="57:40">++</operator></expr></incr>)</control> <block pos:start="57:43" pos:end="127:5">{<block_content pos:start="59:9" pos:end="125:9">

        <decl_stmt pos:start="59:9" pos:end="59:34"><decl pos:start="59:9" pos:end="59:13"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:13">n</name></decl>, <decl pos:start="59:16" pos:end="59:19"><type ref="prev" pos:start="59:9" pos:end="59:11"/><name pos:start="59:16" pos:end="59:19">spkr</name></decl>, <decl pos:start="59:22" pos:end="59:26"><type ref="prev" pos:start="59:9" pos:end="59:11"/><name pos:start="59:22" pos:end="59:26">shift</name></decl>, <decl pos:start="59:29" pos:end="59:33"><type ref="prev" pos:start="59:9" pos:end="59:11"/><name pos:start="59:29" pos:end="59:33">round</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:27"><decl pos:start="61:9" pos:end="61:20"><type pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:15">int32_t</name> <modifier pos:start="61:17" pos:end="61:17">*</modifier></type><name pos:start="61:18" pos:end="61:20">src</name></decl>, <decl pos:start="61:23" pos:end="61:26"><type ref="prev" pos:start="61:9" pos:end="61:17"><modifier pos:start="61:23" pos:end="61:23">*</modifier></type><name pos:start="61:24" pos:end="61:26">dst</name></decl>;</decl_stmt>



        <if_stmt pos:start="65:9" pos:end="67:21"><if pos:start="65:9" pos:end="67:21">if <condition pos:start="65:12" pos:end="65:43">(<expr pos:start="65:13" pos:end="65:42"><name pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:13">c</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:30">residual_encode</name></name> <operator pos:start="65:32" pos:end="65:32">&amp;</operator> <operator pos:start="65:34" pos:end="65:34">(</operator><literal type="number" pos:start="65:35" pos:end="65:35">1</literal> <operator pos:start="65:37" pos:end="65:38">&lt;&lt;</operator> <name pos:start="65:40" pos:end="65:41">ch</name><operator pos:start="65:42" pos:end="65:42">)</operator></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:21"><block_content pos:start="67:13" pos:end="67:21">

            <continue pos:start="67:13" pos:end="67:21">continue;</continue></block_content></block></if></if_stmt>



        <comment type="line" pos:start="71:9" pos:end="71:43">// Map this channel to core speaker</comment>

        <expr_stmt pos:start="73:9" pos:end="73:65"><expr pos:start="73:9" pos:end="73:64"><name pos:start="73:9" pos:end="73:12">spkr</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:64"><name pos:start="73:16" pos:end="73:35">ff_dca_core_map_spkr</name><argument_list pos:start="73:36" pos:end="73:64">(<argument pos:start="73:37" pos:end="73:46"><expr pos:start="73:37" pos:end="73:46"><operator pos:start="73:37" pos:end="73:37">&amp;</operator><name pos:start="73:38" pos:end="73:46"><name pos:start="73:38" pos:end="73:40">dca</name><operator pos:start="73:41" pos:end="73:42">-&gt;</operator><name pos:start="73:43" pos:end="73:46">core</name></name></expr></argument>, <argument pos:start="73:49" pos:end="73:63"><expr pos:start="73:49" pos:end="73:63"><name pos:start="73:49" pos:end="73:63"><name pos:start="73:49" pos:end="73:49">c</name><operator pos:start="73:50" pos:end="73:51">-&gt;</operator><name pos:start="73:52" pos:end="73:59">ch_remap</name><index pos:start="73:60" pos:end="73:63">[<expr pos:start="73:61" pos:end="73:62"><name pos:start="73:61" pos:end="73:62">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:21">(<expr pos:start="75:13" pos:end="75:20"><name pos:start="75:13" pos:end="75:16">spkr</name> <operator pos:start="75:18" pos:end="75:18">&lt;</operator> <literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr>)</condition> <block pos:start="75:23" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:39">

            <expr_stmt pos:start="77:13" pos:end="77:133"><expr pos:start="77:13" pos:end="77:132"><call pos:start="77:13" pos:end="77:132"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:132">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:20">s</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:27">avctx</name></name></expr></argument>, <argument pos:start="77:30" pos:end="77:43"><expr pos:start="77:30" pos:end="77:43"><name pos:start="77:30" pos:end="77:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="77:46" pos:end="77:114"><expr pos:start="77:46" pos:end="77:114"><literal type="string" pos:start="77:46" pos:end="77:114">"Residual encoded channel (%d) references unavailable core channel\n"</literal></expr></argument>, <argument pos:start="77:117" pos:end="77:131"><expr pos:start="77:117" pos:end="77:131"><name pos:start="77:117" pos:end="77:131"><name pos:start="77:117" pos:end="77:117">c</name><operator pos:start="77:118" pos:end="77:119">-&gt;</operator><name pos:start="77:120" pos:end="77:127">ch_remap</name><index pos:start="77:128" pos:end="77:131">[<expr pos:start="77:129" pos:end="77:130"><name pos:start="77:129" pos:end="77:130">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:39">return <expr pos:start="79:20" pos:end="79:38"><name pos:start="79:20" pos:end="79:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="85:9" pos:end="85:32">// Account for LSB width</comment>

        <expr_stmt pos:start="87:9" pos:end="87:69"><expr pos:start="87:9" pos:end="87:68"><name pos:start="87:9" pos:end="87:13">shift</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="number" pos:start="87:17" pos:end="87:20">24</literal> <operator pos:start="87:20" pos:end="87:20">-</operator> <name pos:start="87:22" pos:end="87:35"><name pos:start="87:22" pos:end="87:22">c</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:35">pcm_bit_res</name></name> <operator pos:start="87:37" pos:end="87:37">+</operator> <call pos:start="87:39" pos:end="87:68"><name pos:start="87:39" pos:end="87:55">chs_get_lsb_width</name><argument_list pos:start="87:56" pos:end="87:68">(<argument pos:start="87:57" pos:end="87:57"><expr pos:start="87:57" pos:end="87:57"><name pos:start="87:57" pos:end="87:57">s</name></expr></argument>, <argument pos:start="87:60" pos:end="87:60"><expr pos:start="87:60" pos:end="87:60"><name pos:start="87:60" pos:end="87:60">c</name></expr></argument>, <argument pos:start="87:63" pos:end="87:63"><expr pos:start="87:63" pos:end="87:63"><literal type="number" pos:start="87:63" pos:end="87:63">0</literal></expr></argument>, <argument pos:start="87:66" pos:end="87:67"><expr pos:start="87:66" pos:end="87:67"><name pos:start="87:66" pos:end="87:67">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:23">(<expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:17">shift</name> <operator pos:start="89:19" pos:end="89:19">&gt;</operator> <literal type="number" pos:start="89:21" pos:end="89:22">24</literal></expr>)</condition> <block pos:start="89:25" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:39">

            <expr_stmt pos:start="91:13" pos:end="91:86"><expr pos:start="91:13" pos:end="91:85"><call pos:start="91:13" pos:end="91:85"><name pos:start="91:13" pos:end="91:18">av_log</name><argument_list pos:start="91:19" pos:end="91:85">(<argument pos:start="91:20" pos:end="91:27"><expr pos:start="91:20" pos:end="91:27"><name pos:start="91:20" pos:end="91:27"><name pos:start="91:20" pos:end="91:20">s</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:27">avctx</name></name></expr></argument>, <argument pos:start="91:30" pos:end="91:43"><expr pos:start="91:30" pos:end="91:43"><name pos:start="91:30" pos:end="91:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="91:46" pos:end="91:77"><expr pos:start="91:46" pos:end="91:77"><literal type="string" pos:start="91:46" pos:end="91:77">"Invalid core shift (%d bits)\n"</literal></expr></argument>, <argument pos:start="91:80" pos:end="91:84"><expr pos:start="91:80" pos:end="91:84"><name pos:start="91:80" pos:end="91:84">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:39">return <expr pos:start="93:20" pos:end="93:38"><name pos:start="93:20" pos:end="93:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:49"><expr pos:start="99:9" pos:end="99:48"><name pos:start="99:9" pos:end="99:13">round</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <ternary pos:start="99:17" pos:end="99:48"><condition pos:start="99:17" pos:end="99:27"><expr pos:start="99:17" pos:end="99:25"><name pos:start="99:17" pos:end="99:21">shift</name> <operator pos:start="99:23" pos:end="99:23">&gt;</operator> <literal type="number" pos:start="99:25" pos:end="99:25">0</literal></expr> ?</condition><then pos:start="99:29" pos:end="99:44"> <expr pos:start="99:29" pos:end="99:44"><literal type="number" pos:start="99:29" pos:end="99:29">1</literal> <operator pos:start="99:31" pos:end="99:32">&lt;&lt;</operator> <operator pos:start="99:34" pos:end="99:34">(</operator><name pos:start="99:35" pos:end="99:39">shift</name> <operator pos:start="99:41" pos:end="99:41">-</operator> <literal type="number" pos:start="99:43" pos:end="99:43">1</literal><operator pos:start="99:44" pos:end="99:44">)</operator></expr> </then><else pos:start="99:46" pos:end="99:48">: <expr pos:start="99:48" pos:end="99:48"><literal type="number" pos:start="99:48" pos:end="99:48">0</literal></expr></else></ternary></expr>;</expr_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:45"><expr pos:start="103:9" pos:end="103:44"><name pos:start="103:9" pos:end="103:11">src</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <name pos:start="103:15" pos:end="103:44"><name pos:start="103:15" pos:end="103:17">dca</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:23">core</name><operator pos:start="103:24" pos:end="103:24">.</operator><name pos:start="103:25" pos:end="103:38">output_samples</name><index pos:start="103:39" pos:end="103:44">[<expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">spkr</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:48"><expr pos:start="105:9" pos:end="105:47"><name pos:start="105:9" pos:end="105:11">dst</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:25"><name pos:start="105:15" pos:end="105:15">c</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:22">bands</name><index pos:start="105:23" pos:end="105:25">[<expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>]</index></name><operator pos:start="105:26" pos:end="105:26">.</operator><name pos:start="105:27" pos:end="105:47"><name pos:start="105:27" pos:end="105:43">msb_sample_buffer</name><index pos:start="105:44" pos:end="105:47">[<expr pos:start="105:45" pos:end="105:46"><name pos:start="105:45" pos:end="105:46">ch</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="125:9"><if pos:start="107:9" pos:end="117:9">if <condition pos:start="107:12" pos:end="107:14">(<expr pos:start="107:13" pos:end="107:13"><name pos:start="107:13" pos:end="107:13">o</name></expr>)</condition> <block pos:start="107:16" pos:end="117:9">{<block_content pos:start="111:13" pos:end="115:85">

            <comment type="line" pos:start="109:13" pos:end="109:53">// Undo embedded core downmix pre-scaling</comment>

            <decl_stmt pos:start="111:13" pos:end="111:64"><decl pos:start="111:13" pos:end="111:63"><type pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">int</name></type> <name pos:start="111:17" pos:end="111:25">scale_inv</name> <init pos:start="111:27" pos:end="111:63">= <expr pos:start="111:29" pos:end="111:63"><name pos:start="111:29" pos:end="111:63"><name pos:start="111:29" pos:end="111:29">o</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:45">dmix_scale_inv</name><index pos:start="111:46" pos:end="111:63">[<expr pos:start="111:47" pos:end="111:62"><name pos:start="111:47" pos:end="111:57"><name pos:start="111:47" pos:end="111:47">c</name><operator pos:start="111:48" pos:end="111:49">-&gt;</operator><name pos:start="111:50" pos:end="111:57">hier_ofs</name></name> <operator pos:start="111:59" pos:end="111:59">+</operator> <name pos:start="111:61" pos:end="111:62">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="113:13" pos:end="115:85">for <control pos:start="113:17" pos:end="113:42">(<init pos:start="113:18" pos:end="113:23"><expr pos:start="113:18" pos:end="113:22"><name pos:start="113:18" pos:end="113:18">n</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>;</init> <condition pos:start="113:25" pos:end="113:37"><expr pos:start="113:25" pos:end="113:36"><name pos:start="113:25" pos:end="113:25">n</name> <operator pos:start="113:27" pos:end="113:27">&lt;</operator> <name pos:start="113:29" pos:end="113:36">nsamples</name></expr>;</condition> <incr pos:start="113:39" pos:end="113:41"><expr pos:start="113:39" pos:end="113:41"><name pos:start="113:39" pos:end="113:39">n</name><operator pos:start="113:40" pos:end="113:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="115:17" pos:end="115:85"><block_content pos:start="115:17" pos:end="115:85">

                <expr_stmt pos:start="115:17" pos:end="115:85"><expr pos:start="115:17" pos:end="115:84"><name pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:19">dst</name><index pos:start="115:20" pos:end="115:22">[<expr pos:start="115:21" pos:end="115:21"><name pos:start="115:21" pos:end="115:21">n</name></expr>]</index></name> <operator pos:start="115:24" pos:end="115:25">+=</operator> <operator pos:start="115:27" pos:end="115:27">(</operator><name pos:start="115:28" pos:end="115:32">SUINT</name><operator pos:start="115:33" pos:end="115:33">)</operator><call pos:start="115:34" pos:end="115:84"><name pos:start="115:34" pos:end="115:39">clip23</name><argument_list pos:start="115:40" pos:end="115:84">(<argument pos:start="115:41" pos:end="115:83"><expr pos:start="115:41" pos:end="115:83"><operator pos:start="115:41" pos:end="115:41">(</operator><call pos:start="115:42" pos:end="115:65"><name pos:start="115:42" pos:end="115:46">mul16</name><argument_list pos:start="115:47" pos:end="115:65">(<argument pos:start="115:48" pos:end="115:53"><expr pos:start="115:48" pos:end="115:53"><name pos:start="115:48" pos:end="115:53"><name pos:start="115:48" pos:end="115:50">src</name><index pos:start="115:51" pos:end="115:53">[<expr pos:start="115:52" pos:end="115:52"><name pos:start="115:52" pos:end="115:52">n</name></expr>]</index></name></expr></argument>, <argument pos:start="115:56" pos:end="115:64"><expr pos:start="115:56" pos:end="115:64"><name pos:start="115:56" pos:end="115:64">scale_inv</name></expr></argument>)</argument_list></call> <operator pos:start="115:67" pos:end="115:67">+</operator> <name pos:start="115:69" pos:end="115:73">round</name><operator pos:start="115:74" pos:end="115:74">)</operator> <operator pos:start="115:76" pos:end="115:77">&gt;&gt;</operator> <name pos:start="115:79" pos:end="115:83">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="117:11" pos:end="125:9">else <block pos:start="117:16" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:52">

            <comment type="line" pos:start="119:13" pos:end="119:33">// No downmix scaling</comment>

            <for pos:start="121:13" pos:end="123:52">for <control pos:start="121:17" pos:end="121:42">(<init pos:start="121:18" pos:end="121:23"><expr pos:start="121:18" pos:end="121:22"><name pos:start="121:18" pos:end="121:18">n</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <literal type="number" pos:start="121:22" pos:end="121:22">0</literal></expr>;</init> <condition pos:start="121:25" pos:end="121:37"><expr pos:start="121:25" pos:end="121:36"><name pos:start="121:25" pos:end="121:25">n</name> <operator pos:start="121:27" pos:end="121:27">&lt;</operator> <name pos:start="121:29" pos:end="121:36">nsamples</name></expr>;</condition> <incr pos:start="121:39" pos:end="121:41"><expr pos:start="121:39" pos:end="121:41"><name pos:start="121:39" pos:end="121:39">n</name><operator pos:start="121:40" pos:end="121:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:17" pos:end="123:52"><block_content pos:start="123:17" pos:end="123:52">

                <expr_stmt pos:start="123:17" pos:end="123:52"><expr pos:start="123:17" pos:end="123:51"><name pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:19">dst</name><index pos:start="123:20" pos:end="123:22">[<expr pos:start="123:21" pos:end="123:21"><name pos:start="123:21" pos:end="123:21">n</name></expr>]</index></name> <operator pos:start="123:24" pos:end="123:25">+=</operator> <operator pos:start="123:27" pos:end="123:27">(</operator><name pos:start="123:28" pos:end="123:33"><name pos:start="123:28" pos:end="123:30">src</name><index pos:start="123:31" pos:end="123:33">[<expr pos:start="123:32" pos:end="123:32"><name pos:start="123:32" pos:end="123:32">n</name></expr>]</index></name> <operator pos:start="123:35" pos:end="123:35">+</operator> <name pos:start="123:37" pos:end="123:41">round</name><operator pos:start="123:42" pos:end="123:42">)</operator> <operator pos:start="123:44" pos:end="123:45">&gt;&gt;</operator> <name pos:start="123:47" pos:end="123:51">shift</name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
