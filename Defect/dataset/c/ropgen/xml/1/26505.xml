<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26505.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:60"><name pos:start="1:1" pos:end="1:14">vorbis_comment</name><argument_list pos:start="1:15" pos:end="1:60">(<argument pos:start="1:16" pos:end="1:35">AVFormatContext * as</argument>, <argument pos:start="1:38" pos:end="1:49">uint8_t *buf</argument>, <argument pos:start="1:52" pos:end="1:59">int size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:13">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">p</name> <init pos:start="5:22" pos:end="5:26">= <expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">end</name> <init pos:start="7:24" pos:end="7:35">= <expr pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:28">buf</name> <operator pos:start="7:30" pos:end="7:30">+</operator> <name pos:start="7:32" pos:end="7:35">size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:14">s</name></decl>, <decl pos:start="9:17" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:17" pos:end="9:17">n</name></decl>, <decl pos:start="9:20" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:20" pos:end="9:20">j</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:18"><if pos:start="13:5" pos:end="15:18">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:12">size</name> <operator pos:start="13:14" pos:end="13:14">&lt;</operator> <literal type="number" pos:start="13:16" pos:end="13:16">8</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:18"><block_content pos:start="15:9" pos:end="15:18"> <comment type="block" pos:start="13:19" pos:end="13:76">/* must have vendor_length and user_comment_list_length */</comment>

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:5">s</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <call pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:27">bytestream_get_le32</name><argument_list pos:start="19:28" pos:end="19:31">(<argument pos:start="19:29" pos:end="19:30"><expr pos:start="19:29" pos:end="19:30"><operator pos:start="19:29" pos:end="19:29">&amp;</operator><name pos:start="19:30" pos:end="19:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if <condition pos:start="23:8" pos:end="23:20">(<expr pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:11">end</name> <operator pos:start="23:13" pos:end="23:13">-</operator> <name pos:start="23:15" pos:end="23:15">p</name> <operator pos:start="23:17" pos:end="23:17">&lt;</operator> <name pos:start="23:19" pos:end="23:19">s</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:11"><expr pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:5">p</name> <operator pos:start="29:7" pos:end="29:8">+=</operator> <name pos:start="29:10" pos:end="29:10">s</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:5">n</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:27">bytestream_get_le32</name><argument_list pos:start="33:28" pos:end="33:31">(<argument pos:start="33:29" pos:end="33:30"><expr pos:start="33:29" pos:end="33:30"><operator pos:start="33:29" pos:end="33:29">&amp;</operator><name pos:start="33:30" pos:end="33:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="37:5" pos:end="127:5">while <condition pos:start="37:11" pos:end="37:28">(<expr pos:start="37:12" pos:end="37:27"><name pos:start="37:12" pos:end="37:25"><name pos:start="37:12" pos:end="37:12">p</name> <argument_list type="generic" pos:start="37:14" pos:end="37:25">&lt; <argument pos:start="37:16" pos:end="37:23"><expr pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:18">end</name> <operator pos:start="37:20" pos:end="37:21">&amp;&amp;</operator> <name pos:start="37:23" pos:end="37:23">n</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="37:27" pos:end="37:27">0</literal></expr>)</condition> <block pos:start="37:30" pos:end="127:5">{<block_content pos:start="39:9" pos:end="125:9">

        <decl_stmt pos:start="39:9" pos:end="39:26"><decl pos:start="39:9" pos:end="39:21"><type pos:start="39:9" pos:end="39:20"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:18">char</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:21">t</name></decl>, <decl pos:start="39:24" pos:end="39:25"><type ref="prev" pos:start="39:9" pos:end="39:20"><modifier pos:start="39:24" pos:end="39:24">*</modifier></type><name pos:start="39:25" pos:end="39:25">v</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:19"><decl pos:start="41:9" pos:end="41:14"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:14">tl</name></decl>, <decl pos:start="41:17" pos:end="41:18"><type ref="prev" pos:start="41:9" pos:end="41:11"/><name pos:start="41:17" pos:end="41:18">vl</name></decl>;</decl_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:9">s</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:31">bytestream_get_le32</name><argument_list pos:start="45:32" pos:end="45:35">(<argument pos:start="45:33" pos:end="45:34"><expr pos:start="45:33" pos:end="45:34"><operator pos:start="45:33" pos:end="45:33">&amp;</operator><name pos:start="45:34" pos:end="45:34">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="51:18"><if pos:start="49:9" pos:end="51:18">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:15">end</name> <operator pos:start="49:17" pos:end="49:17">-</operator> <name pos:start="49:19" pos:end="49:19">p</name> <operator pos:start="49:21" pos:end="49:21">&lt;</operator> <name pos:start="49:23" pos:end="49:23">s</name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:18"><block_content pos:start="51:13" pos:end="51:18">

            <break pos:start="51:13" pos:end="51:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:14"><expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:9">t</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <name pos:start="55:13" pos:end="55:13">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:15"><expr pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:9">p</name> <operator pos:start="57:11" pos:end="57:12">+=</operator> <name pos:start="57:14" pos:end="57:14">s</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:12"><expr pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:9">n</name><operator pos:start="59:10" pos:end="59:11">--</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:30"><expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:9">v</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:18">memchr</name><argument_list pos:start="63:19" pos:end="63:29">(<argument pos:start="63:20" pos:end="63:20"><expr pos:start="63:20" pos:end="63:20"><name pos:start="63:20" pos:end="63:20">t</name></expr></argument>, <argument pos:start="63:23" pos:end="63:25"><expr pos:start="63:23" pos:end="63:25"><literal type="char" pos:start="63:23" pos:end="63:25">'='</literal></expr></argument>, <argument pos:start="63:28" pos:end="63:28"><expr pos:start="63:28" pos:end="63:28"><name pos:start="63:28" pos:end="63:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:21"><if pos:start="65:9" pos:end="67:21">if <condition pos:start="65:12" pos:end="65:15">(<expr pos:start="65:13" pos:end="65:14"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:14">v</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:21"><block_content pos:start="67:13" pos:end="67:21">

            <continue pos:start="67:13" pos:end="67:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:19"><expr pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:10">tl</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <name pos:start="71:14" pos:end="71:14">v</name> <operator pos:start="71:16" pos:end="71:16">-</operator> <name pos:start="71:18" pos:end="71:18">t</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:10">vl</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <name pos:start="73:14" pos:end="73:14">s</name> <operator pos:start="73:16" pos:end="73:16">-</operator> <name pos:start="73:18" pos:end="73:19">tl</name> <operator pos:start="73:21" pos:end="73:21">-</operator> <literal type="number" pos:start="73:23" pos:end="73:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:12"><expr pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:9">v</name><operator pos:start="75:10" pos:end="75:11">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="125:9"><if pos:start="79:9" pos:end="125:9">if <condition pos:start="79:12" pos:end="79:21">(<expr pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:14">tl</name> <operator pos:start="79:16" pos:end="79:17">&amp;&amp;</operator> <name pos:start="79:19" pos:end="79:20">vl</name></expr>)</condition> <block pos:start="79:23" pos:end="125:9">{<block_content pos:start="81:13" pos:end="123:26">

            <decl_stmt pos:start="81:13" pos:end="81:26"><decl pos:start="81:13" pos:end="81:20"><type pos:start="81:13" pos:end="81:18"><name pos:start="81:13" pos:end="81:16">char</name> <modifier pos:start="81:18" pos:end="81:18">*</modifier></type><name pos:start="81:19" pos:end="81:20">tt</name></decl>, <decl pos:start="81:23" pos:end="81:25"><type ref="prev" pos:start="81:13" pos:end="81:18"><modifier pos:start="81:23" pos:end="81:23">*</modifier></type><name pos:start="81:24" pos:end="81:25">ct</name></decl>;</decl_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:35"><expr pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:14">tt</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <call pos:start="85:18" pos:end="85:34"><name pos:start="85:18" pos:end="85:26">av_malloc</name><argument_list pos:start="85:27" pos:end="85:34">(<argument pos:start="85:28" pos:end="85:33"><expr pos:start="85:28" pos:end="85:33"><name pos:start="85:28" pos:end="85:29">tl</name> <operator pos:start="85:31" pos:end="85:31">+</operator> <literal type="number" pos:start="85:33" pos:end="85:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:14">ct</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:34"><name pos:start="87:18" pos:end="87:26">av_malloc</name><argument_list pos:start="87:27" pos:end="87:34">(<argument pos:start="87:28" pos:end="87:33"><expr pos:start="87:28" pos:end="87:33"><name pos:start="87:28" pos:end="87:29">vl</name> <operator pos:start="87:31" pos:end="87:31">+</operator> <literal type="number" pos:start="87:33" pos:end="87:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="99:13"><if pos:start="89:13" pos:end="99:13">if <condition pos:start="89:16" pos:end="89:27">(<expr pos:start="89:17" pos:end="89:26"><operator pos:start="89:17" pos:end="89:17">!</operator><name pos:start="89:18" pos:end="89:19">tt</name> <operator pos:start="89:21" pos:end="89:22">||</operator> <operator pos:start="89:24" pos:end="89:24">!</operator><name pos:start="89:25" pos:end="89:26">ct</name></expr>)</condition> <block pos:start="89:29" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:25">

                <expr_stmt pos:start="91:17" pos:end="91:30"><expr pos:start="91:17" pos:end="91:29"><call pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:24">av_freep</name><argument_list pos:start="91:25" pos:end="91:29">(<argument pos:start="91:26" pos:end="91:28"><expr pos:start="91:26" pos:end="91:28"><operator pos:start="91:26" pos:end="91:26">&amp;</operator><name pos:start="91:27" pos:end="91:28">tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:30"><expr pos:start="93:17" pos:end="93:29"><call pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:24">av_freep</name><argument_list pos:start="93:25" pos:end="93:29">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><operator pos:start="93:26" pos:end="93:26">&amp;</operator><name pos:start="93:27" pos:end="93:28">ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:97"><expr pos:start="95:17" pos:end="95:96"><call pos:start="95:17" pos:end="95:96"><name pos:start="95:17" pos:end="95:22">av_log</name><argument_list pos:start="95:23" pos:end="95:96">(<argument pos:start="95:24" pos:end="95:25"><expr pos:start="95:24" pos:end="95:25"><name pos:start="95:24" pos:end="95:25">as</name></expr></argument>, <argument pos:start="95:28" pos:end="95:41"><expr pos:start="95:28" pos:end="95:41"><name pos:start="95:28" pos:end="95:41">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="95:44" pos:end="95:95"><expr pos:start="95:44" pos:end="95:95"><literal type="string" pos:start="95:44" pos:end="95:95">"out-of-memory error. skipping VorbisComment tag.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="97:17" pos:end="97:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <for pos:start="103:13" pos:end="105:38">for <control pos:start="103:17" pos:end="103:36">(<init pos:start="103:18" pos:end="103:23"><expr pos:start="103:18" pos:end="103:22"><name pos:start="103:18" pos:end="103:18">j</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">0</literal></expr>;</init> <condition pos:start="103:25" pos:end="103:31"><expr pos:start="103:25" pos:end="103:30"><name pos:start="103:25" pos:end="103:25">j</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <name pos:start="103:29" pos:end="103:30">tl</name></expr>;</condition> <incr pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:33">j</name><operator pos:start="103:34" pos:end="103:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="105:17" pos:end="105:38"><block_content pos:start="105:17" pos:end="105:38">

                <expr_stmt pos:start="105:17" pos:end="105:38"><expr pos:start="105:17" pos:end="105:37"><name pos:start="105:17" pos:end="105:21"><name pos:start="105:17" pos:end="105:18">tt</name><index pos:start="105:19" pos:end="105:21">[<expr pos:start="105:20" pos:end="105:20"><name pos:start="105:20" pos:end="105:20">j</name></expr>]</index></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:37"><name pos:start="105:25" pos:end="105:31">toupper</name><argument_list pos:start="105:32" pos:end="105:37">(<argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><name pos:start="105:33" pos:end="105:36"><name pos:start="105:33" pos:end="105:33">t</name><index pos:start="105:34" pos:end="105:36">[<expr pos:start="105:35" pos:end="105:35"><name pos:start="105:35" pos:end="105:35">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="107:13" pos:end="107:23"><expr pos:start="107:13" pos:end="107:22"><name pos:start="107:13" pos:end="107:18"><name pos:start="107:13" pos:end="107:14">tt</name><index pos:start="107:15" pos:end="107:18">[<expr pos:start="107:16" pos:end="107:17"><name pos:start="107:16" pos:end="107:17">tl</name></expr>]</index></name> <operator pos:start="107:20" pos:end="107:20">=</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:30"><expr pos:start="111:13" pos:end="111:29"><call pos:start="111:13" pos:end="111:29"><name pos:start="111:13" pos:end="111:18">memcpy</name><argument_list pos:start="111:19" pos:end="111:29">(<argument pos:start="111:20" pos:end="111:21"><expr pos:start="111:20" pos:end="111:21"><name pos:start="111:20" pos:end="111:21">ct</name></expr></argument>, <argument pos:start="111:24" pos:end="111:24"><expr pos:start="111:24" pos:end="111:24"><name pos:start="111:24" pos:end="111:24">v</name></expr></argument>, <argument pos:start="111:27" pos:end="111:28"><expr pos:start="111:27" pos:end="111:28"><name pos:start="111:27" pos:end="111:28">vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:23"><expr pos:start="113:13" pos:end="113:22"><name pos:start="113:13" pos:end="113:18"><name pos:start="113:13" pos:end="113:14">ct</name><index pos:start="113:15" pos:end="113:18">[<expr pos:start="113:16" pos:end="113:17"><name pos:start="113:16" pos:end="113:17">vl</name></expr>]</index></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:51"><expr pos:start="117:13" pos:end="117:50"><call pos:start="117:13" pos:end="117:50"><name pos:start="117:13" pos:end="117:27">av_metadata_set</name><argument_list pos:start="117:28" pos:end="117:50">(<argument pos:start="117:29" pos:end="117:41"><expr pos:start="117:29" pos:end="117:41"><operator pos:start="117:29" pos:end="117:29">&amp;</operator><name pos:start="117:30" pos:end="117:41"><name pos:start="117:30" pos:end="117:31">as</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:41">metadata</name></name></expr></argument>, <argument pos:start="117:44" pos:end="117:45"><expr pos:start="117:44" pos:end="117:45"><name pos:start="117:44" pos:end="117:45">tt</name></expr></argument>, <argument pos:start="117:48" pos:end="117:49"><expr pos:start="117:48" pos:end="117:49"><name pos:start="117:48" pos:end="117:49">ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:26"><expr pos:start="121:13" pos:end="121:25"><call pos:start="121:13" pos:end="121:25"><name pos:start="121:13" pos:end="121:20">av_freep</name><argument_list pos:start="121:21" pos:end="121:25">(<argument pos:start="121:22" pos:end="121:24"><expr pos:start="121:22" pos:end="121:24"><operator pos:start="121:22" pos:end="121:22">&amp;</operator><name pos:start="121:23" pos:end="121:24">tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><call pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:20">av_freep</name><argument_list pos:start="123:21" pos:end="123:25">(<argument pos:start="123:22" pos:end="123:24"><expr pos:start="123:22" pos:end="123:24"><operator pos:start="123:22" pos:end="123:22">&amp;</operator><name pos:start="123:23" pos:end="123:24">ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="131:5" pos:end="133:79"><if pos:start="131:5" pos:end="133:79">if <condition pos:start="131:8" pos:end="131:17">(<expr pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:9">p</name> <operator pos:start="131:11" pos:end="131:12">!=</operator> <name pos:start="131:14" pos:end="131:16">end</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:79"><block_content pos:start="133:9" pos:end="133:79">

        <expr_stmt pos:start="133:9" pos:end="133:79"><expr pos:start="133:9" pos:end="133:78"><call pos:start="133:9" pos:end="133:78"><name pos:start="133:9" pos:end="133:14">av_log</name><argument_list pos:start="133:15" pos:end="133:78">(<argument pos:start="133:16" pos:end="133:17"><expr pos:start="133:16" pos:end="133:17"><name pos:start="133:16" pos:end="133:17">as</name></expr></argument>, <argument pos:start="133:20" pos:end="133:30"><expr pos:start="133:20" pos:end="133:30"><name pos:start="133:20" pos:end="133:30">AV_LOG_INFO</name></expr></argument>, <argument pos:start="133:33" pos:end="133:70"><expr pos:start="133:33" pos:end="133:70"><literal type="string" pos:start="133:33" pos:end="133:70">"%ti bytes of comment header remain\n"</literal></expr></argument>, <argument pos:start="133:73" pos:end="133:77"><expr pos:start="133:73" pos:end="133:77"><name pos:start="133:73" pos:end="133:75">end</name><operator pos:start="133:76" pos:end="133:76">-</operator><name pos:start="133:77" pos:end="133:77">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="139:71"><if pos:start="135:5" pos:end="139:71">if <condition pos:start="135:8" pos:end="135:14">(<expr pos:start="135:9" pos:end="135:13"><name pos:start="135:9" pos:end="135:9">n</name> <operator pos:start="135:11" pos:end="135:11">&gt;</operator> <literal type="number" pos:start="135:13" pos:end="135:13">0</literal></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="139:71"><block_content pos:start="137:9" pos:end="139:71">

        <expr_stmt pos:start="137:9" pos:end="139:71"><expr pos:start="137:9" pos:end="139:70"><call pos:start="137:9" pos:end="139:70"><name pos:start="137:9" pos:end="137:14">av_log</name><argument_list pos:start="137:15" pos:end="139:70">(<argument pos:start="137:16" pos:end="137:17"><expr pos:start="137:16" pos:end="137:17"><name pos:start="137:16" pos:end="137:17">as</name></expr></argument>, <argument pos:start="137:20" pos:end="137:30"><expr pos:start="137:20" pos:end="137:30"><name pos:start="137:20" pos:end="137:30">AV_LOG_INFO</name></expr></argument>,

               <argument pos:start="139:16" pos:end="139:66"><expr pos:start="139:16" pos:end="139:66"><literal type="string" pos:start="139:16" pos:end="139:66">"truncated comment header, %i comments not found\n"</literal></expr></argument>, <argument pos:start="139:69" pos:end="139:69"><expr pos:start="139:69" pos:end="139:69"><name pos:start="139:69" pos:end="139:69">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="143:5" pos:end="143:13">return <expr pos:start="143:12" pos:end="143:12"><literal type="number" pos:start="143:12" pos:end="143:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
