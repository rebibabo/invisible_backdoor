<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3136.c" pos:tabs="8"><function pos:start="1:1" pos:end="60:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">cpu_physical_memory_unmap</name><parameter_list pos:start="1:31" pos:end="3:75">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">buffer</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:67"><decl pos:start="1:46" pos:end="1:67"><type pos:start="1:46" pos:end="1:67"><name pos:start="1:46" pos:end="1:63">target_phys_addr_t</name></type> <name pos:start="1:65" pos:end="1:67">len</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:43">is_write</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:74"><decl pos:start="3:46" pos:end="3:74"><type pos:start="3:46" pos:end="3:74"><name pos:start="3:46" pos:end="3:63">target_phys_addr_t</name></type> <name pos:start="3:65" pos:end="3:74">access_len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="60:1">{<block_content pos:start="7:5" pos:end="57:25">

    <if_stmt pos:start="7:5" pos:end="47:5"><if pos:start="7:5" pos:end="47:5">if <condition pos:start="7:8" pos:end="7:32">(<expr pos:start="7:9" pos:end="7:31"><name pos:start="7:9" pos:end="7:14">buffer</name> <operator pos:start="7:16" pos:end="7:17">!=</operator> <name pos:start="7:19" pos:end="7:31"><name pos:start="7:19" pos:end="7:24">bounce</name><operator pos:start="7:25" pos:end="7:25">.</operator><name pos:start="7:26" pos:end="7:31">buffer</name></name></expr>)</condition> <block pos:start="7:34" pos:end="47:5">{<block_content pos:start="9:9" pos:end="45:15">

        <if_stmt pos:start="9:9" pos:end="43:9"><if pos:start="9:9" pos:end="43:9">if <condition pos:start="9:12" pos:end="9:21">(<expr pos:start="9:13" pos:end="9:20"><name pos:start="9:13" pos:end="9:20">is_write</name></expr>)</condition> <block pos:start="9:23" pos:end="43:9">{<block_content pos:start="11:13" pos:end="41:13">

            <decl_stmt pos:start="11:13" pos:end="11:68"><decl pos:start="11:13" pos:end="11:67"><type pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:20">unsigned</name> <name pos:start="11:22" pos:end="11:25">long</name></type> <name pos:start="11:27" pos:end="11:31">addr1</name> <init pos:start="11:33" pos:end="11:67">= <expr pos:start="11:35" pos:end="11:67"><operator pos:start="11:35" pos:end="11:35">(</operator><name pos:start="11:36" pos:end="11:42">uint8_t</name> <operator pos:start="11:44" pos:end="11:44">*</operator><operator pos:start="11:45" pos:end="11:45">)</operator><name pos:start="11:46" pos:end="11:51">buffer</name> <operator pos:start="11:53" pos:end="11:53">-</operator> <name pos:start="11:55" pos:end="11:67">phys_ram_base</name></expr></init></decl>;</decl_stmt>

            <while pos:start="13:13" pos:end="41:13">while <condition pos:start="13:19" pos:end="13:30">(<expr pos:start="13:20" pos:end="13:29"><name pos:start="13:20" pos:end="13:29">access_len</name></expr>)</condition> <block pos:start="13:32" pos:end="41:13">{<block_content pos:start="15:17" pos:end="39:32">

                <decl_stmt pos:start="15:17" pos:end="15:27"><decl pos:start="15:17" pos:end="15:26"><type pos:start="15:17" pos:end="15:24"><name pos:start="15:17" pos:end="15:24">unsigned</name></type> <name pos:start="15:26" pos:end="15:26">l</name></decl>;</decl_stmt>

                <expr_stmt pos:start="17:17" pos:end="17:37"><expr pos:start="17:17" pos:end="17:36"><name pos:start="17:17" pos:end="17:17">l</name> <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:36">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

                <if_stmt pos:start="19:17" pos:end="21:35"><if pos:start="19:17" pos:end="21:35">if <condition pos:start="19:20" pos:end="19:35">(<expr pos:start="19:21" pos:end="19:34"><name pos:start="19:21" pos:end="19:21">l</name> <operator pos:start="19:23" pos:end="19:23">&gt;</operator> <name pos:start="19:25" pos:end="19:34">access_len</name></expr>)</condition><block type="pseudo" pos:start="21:21" pos:end="21:35"><block_content pos:start="21:21" pos:end="21:35">

                    <expr_stmt pos:start="21:21" pos:end="21:35"><expr pos:start="21:21" pos:end="21:34"><name pos:start="21:21" pos:end="21:21">l</name> <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:34">access_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="23:17" pos:end="35:17"><if pos:start="23:17" pos:end="35:17">if <condition pos:start="23:20" pos:end="23:57">(<expr pos:start="23:21" pos:end="23:56"><operator pos:start="23:21" pos:end="23:21">!</operator><call pos:start="23:22" pos:end="23:56"><name pos:start="23:22" pos:end="23:49">cpu_physical_memory_is_dirty</name><argument_list pos:start="23:50" pos:end="23:56">(<argument pos:start="23:51" pos:end="23:55"><expr pos:start="23:51" pos:end="23:55"><name pos:start="23:51" pos:end="23:55">addr1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:59" pos:end="35:17">{<block_content pos:start="27:21" pos:end="33:50">

                    <comment type="block" pos:start="25:21" pos:end="25:41">/* invalidate code */</comment>

                    <expr_stmt pos:start="27:21" pos:end="27:71"><expr pos:start="27:21" pos:end="27:70"><call pos:start="27:21" pos:end="27:70"><name pos:start="27:21" pos:end="27:49">tb_invalidate_phys_page_range</name><argument_list pos:start="27:50" pos:end="27:70">(<argument pos:start="27:51" pos:end="27:55"><expr pos:start="27:51" pos:end="27:55"><name pos:start="27:51" pos:end="27:55">addr1</name></expr></argument>, <argument pos:start="27:58" pos:end="27:66"><expr pos:start="27:58" pos:end="27:66"><name pos:start="27:58" pos:end="27:62">addr1</name> <operator pos:start="27:64" pos:end="27:64">+</operator> <name pos:start="27:66" pos:end="27:66">l</name></expr></argument>, <argument pos:start="27:69" pos:end="27:69"><expr pos:start="27:69" pos:end="27:69"><literal type="number" pos:start="27:69" pos:end="27:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="29:21" pos:end="29:39">/* set dirty bit */</comment>

                    <expr_stmt pos:start="31:21" pos:end="33:50"><expr pos:start="31:21" pos:end="33:49"><name pos:start="31:21" pos:end="31:61"><name pos:start="31:21" pos:end="31:34">phys_ram_dirty</name><index pos:start="31:35" pos:end="31:61">[<expr pos:start="31:36" pos:end="31:60"><name pos:start="31:36" pos:end="31:40">addr1</name> <operator pos:start="31:42" pos:end="31:43">&gt;&gt;</operator> <name pos:start="31:45" pos:end="31:60">TARGET_PAGE_BITS</name></expr>]</index></name> <operator pos:start="31:63" pos:end="31:64">|=</operator>

                        <operator pos:start="33:25" pos:end="33:25">(</operator><literal type="number" pos:start="33:26" pos:end="33:29">0xff</literal> <operator pos:start="33:31" pos:end="33:31">&amp;</operator> <operator pos:start="33:33" pos:end="33:33">~</operator><name pos:start="33:34" pos:end="33:48">CODE_DIRTY_FLAG</name><operator pos:start="33:49" pos:end="33:49">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:27"><expr pos:start="37:17" pos:end="37:26"><name pos:start="37:17" pos:end="37:21">addr1</name> <operator pos:start="37:23" pos:end="37:24">+=</operator> <name pos:start="37:26" pos:end="37:26">l</name></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:32"><expr pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:26">access_len</name> <operator pos:start="39:28" pos:end="39:29">-=</operator> <name pos:start="39:31" pos:end="39:31">l</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">is_write</name></expr>)</condition> <block pos:start="49:19" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:74">

        <expr_stmt pos:start="51:9" pos:end="51:74"><expr pos:start="51:9" pos:end="51:73"><call pos:start="51:9" pos:end="51:73"><name pos:start="51:9" pos:end="51:33">cpu_physical_memory_write</name><argument_list pos:start="51:34" pos:end="51:73">(<argument pos:start="51:35" pos:end="51:45"><expr pos:start="51:35" pos:end="51:45"><name pos:start="51:35" pos:end="51:45"><name pos:start="51:35" pos:end="51:40">bounce</name><operator pos:start="51:41" pos:end="51:41">.</operator><name pos:start="51:42" pos:end="51:45">addr</name></name></expr></argument>, <argument pos:start="51:48" pos:end="51:60"><expr pos:start="51:48" pos:end="51:60"><name pos:start="51:48" pos:end="51:60"><name pos:start="51:48" pos:end="51:53">bounce</name><operator pos:start="51:54" pos:end="51:54">.</operator><name pos:start="51:55" pos:end="51:60">buffer</name></name></expr></argument>, <argument pos:start="51:63" pos:end="51:72"><expr pos:start="51:63" pos:end="51:72"><name pos:start="51:63" pos:end="51:72">access_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:29"><expr pos:start="55:5" pos:end="55:28"><call pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:13">qemu_free</name><argument_list pos:start="55:14" pos:end="55:28">(<argument pos:start="55:15" pos:end="55:27"><expr pos:start="55:15" pos:end="55:27"><name pos:start="55:15" pos:end="55:27"><name pos:start="55:15" pos:end="55:20">bounce</name><operator pos:start="55:21" pos:end="55:21">.</operator><name pos:start="55:22" pos:end="55:27">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:25"><expr pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:10">bounce</name><operator pos:start="57:11" pos:end="57:11">.</operator><name pos:start="57:12" pos:end="57:17">buffer</name></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:24">NULL</name></expr>;</expr_stmt>


</block_content>}</block></function></unit>
