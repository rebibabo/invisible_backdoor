<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5431.c" pos:tabs="8"><function pos:start="1:1" pos:end="242:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">overlay_opencl_blend</name><parameter_list pos:start="1:32" pos:end="1:48">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:43">FFFrameSync</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">fs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="242:1">{<block_content pos:start="5:5" pos:end="240:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:19">AVFilterContext</name>    <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:29">avctx</name> <init pos:start="5:31" pos:end="5:42">= <expr pos:start="5:33" pos:end="5:42"><name pos:start="5:33" pos:end="5:42"><name pos:start="5:33" pos:end="5:34">fs</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:42">parent</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:16">AVFilterLink</name>     <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:29">outlink</name> <init pos:start="7:31" pos:end="7:49">= <expr pos:start="7:33" pos:end="7:49"><name pos:start="7:33" pos:end="7:49"><name pos:start="7:33" pos:end="7:37">avctx</name><operator pos:start="7:38" pos:end="7:39">-&gt;</operator><name pos:start="7:40" pos:end="7:46">outputs</name><index pos:start="7:47" pos:end="7:49">[<expr pos:start="7:48" pos:end="7:48"><literal type="number" pos:start="7:48" pos:end="7:48">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24">OverlayOpenCLContext</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:29">ctx</name> <init pos:start="9:31" pos:end="9:43">= <expr pos:start="9:33" pos:end="9:43"><name pos:start="9:33" pos:end="9:43"><name pos:start="9:33" pos:end="9:37">avctx</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:43">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:23">input_main</name></decl>, <decl pos:start="11:26" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:39">input_overlay</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">cl_mem</name></type> <name pos:start="15:12" pos:end="15:14">mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">cl_int</name></type> <name pos:start="17:12" pos:end="17:14">cle</name></decl>, <decl pos:start="17:17" pos:end="17:17"><type ref="prev" pos:start="17:5" pos:end="17:10"/><name pos:start="17:17" pos:end="17:17">x</name></decl>, <decl pos:start="17:20" pos:end="17:20"><type ref="prev" pos:start="17:5" pos:end="17:10"/><name pos:start="17:20" pos:end="17:20">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:25"><name pos:start="19:12" pos:end="19:22">global_work</name><index pos:start="19:23" pos:end="19:25">[<expr pos:start="19:24" pos:end="19:24"><literal type="number" pos:start="19:24" pos:end="19:24">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">kernel_arg</name> <init pos:start="21:20" pos:end="21:22">= <expr pos:start="21:22" pos:end="21:22"><literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">err</name></decl>, <decl pos:start="23:14" pos:end="23:18"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:14" pos:end="23:18">plane</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:56"><expr pos:start="27:5" pos:end="27:55"><name pos:start="27:5" pos:end="27:7">err</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:55"><name pos:start="27:11" pos:end="27:32">ff_framesync_get_frame</name><argument_list pos:start="27:33" pos:end="27:55">(<argument pos:start="27:34" pos:end="27:35"><expr pos:start="27:34" pos:end="27:35"><name pos:start="27:34" pos:end="27:35">fs</name></expr></argument>, <argument pos:start="27:38" pos:end="27:38"><expr pos:start="27:38" pos:end="27:38"><literal type="number" pos:start="27:38" pos:end="27:38">0</literal></expr></argument>, <argument pos:start="27:41" pos:end="27:51"><expr pos:start="27:41" pos:end="27:51"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:51">input_main</name></expr></argument>, <argument pos:start="27:54" pos:end="27:54"><expr pos:start="27:54" pos:end="27:54"><literal type="number" pos:start="27:54" pos:end="27:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:19"><if pos:start="29:5" pos:end="31:19">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">err</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:19"><block_content pos:start="31:9" pos:end="31:19">

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">err</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:59"><expr pos:start="33:5" pos:end="33:58"><name pos:start="33:5" pos:end="33:7">err</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:58"><name pos:start="33:11" pos:end="33:32">ff_framesync_get_frame</name><argument_list pos:start="33:33" pos:end="33:58">(<argument pos:start="33:34" pos:end="33:35"><expr pos:start="33:34" pos:end="33:35"><name pos:start="33:34" pos:end="33:35">fs</name></expr></argument>, <argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><literal type="number" pos:start="33:38" pos:end="33:38">1</literal></expr></argument>, <argument pos:start="33:41" pos:end="33:54"><expr pos:start="33:41" pos:end="33:54"><operator pos:start="33:41" pos:end="33:41">&amp;</operator><name pos:start="33:42" pos:end="33:54">input_overlay</name></expr></argument>, <argument pos:start="33:57" pos:end="33:57"><expr pos:start="33:57" pos:end="33:57"><literal type="number" pos:start="33:57" pos:end="33:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:19"><if pos:start="35:5" pos:end="37:19">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">err</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:19"><block_content pos:start="37:9" pos:end="37:19">

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="61:5"><if pos:start="41:5" pos:end="61:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:25"><name pos:start="41:10" pos:end="41:12">ctx</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:25">initialised</name></name></expr>)</condition> <block pos:start="41:28" pos:end="61:5">{<block_content pos:start="43:9" pos:end="59:23">

        <decl_stmt pos:start="43:9" pos:end="45:64"><decl pos:start="43:9" pos:end="45:63"><type pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:25">AVHWFramesContext</name> <modifier pos:start="43:27" pos:end="43:27">*</modifier></type><name pos:start="43:28" pos:end="43:34">main_fc</name> <init pos:start="43:36" pos:end="45:63">=

            <expr pos:start="45:13" pos:end="45:63"><operator pos:start="45:13" pos:end="45:13">(</operator><name pos:start="45:14" pos:end="45:30">AVHWFramesContext</name><operator pos:start="45:31" pos:end="45:31">*</operator><operator pos:start="45:32" pos:end="45:32">)</operator><name pos:start="45:33" pos:end="45:63"><name pos:start="45:33" pos:end="45:42">input_main</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:57">hw_frames_ctx</name><operator pos:start="45:58" pos:end="45:59">-&gt;</operator><name pos:start="45:60" pos:end="45:63">data</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="49:67"><decl pos:start="47:9" pos:end="49:66"><type pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:25">AVHWFramesContext</name> <modifier pos:start="47:27" pos:end="47:27">*</modifier></type><name pos:start="47:28" pos:end="47:37">overlay_fc</name> <init pos:start="47:39" pos:end="49:66">=

            <expr pos:start="49:13" pos:end="49:66"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:30">AVHWFramesContext</name><operator pos:start="49:31" pos:end="49:31">*</operator><operator pos:start="49:32" pos:end="49:32">)</operator><name pos:start="49:33" pos:end="49:66"><name pos:start="49:33" pos:end="49:45">input_overlay</name><operator pos:start="49:46" pos:end="49:47">-&gt;</operator><name pos:start="49:48" pos:end="49:60">hw_frames_ctx</name><operator pos:start="49:61" pos:end="49:62">-&gt;</operator><name pos:start="49:63" pos:end="49:66">data</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="55:57"><expr pos:start="53:9" pos:end="55:56"><name pos:start="53:9" pos:end="53:11">err</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="55:56"><name pos:start="53:15" pos:end="53:33">overlay_opencl_load</name><argument_list pos:start="53:34" pos:end="55:56">(<argument pos:start="53:35" pos:end="53:39"><expr pos:start="53:35" pos:end="53:39"><name pos:start="53:35" pos:end="53:39">avctx</name></expr></argument>, <argument pos:start="53:42" pos:end="53:59"><expr pos:start="53:42" pos:end="53:59"><name pos:start="53:42" pos:end="53:59"><name pos:start="53:42" pos:end="53:48">main_fc</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:59">sw_format</name></name></expr></argument>,

                                  <argument pos:start="55:35" pos:end="55:55"><expr pos:start="55:35" pos:end="55:55"><name pos:start="55:35" pos:end="55:55"><name pos:start="55:35" pos:end="55:44">overlay_fc</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:55">sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="59:23"><if pos:start="57:9" pos:end="59:23">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">err</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:23"><block_content pos:start="59:13" pos:end="59:23">

            <return pos:start="59:13" pos:end="59:23">return <expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">err</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:66"><expr pos:start="65:5" pos:end="65:65"><name pos:start="65:5" pos:end="65:10">output</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:65"><name pos:start="65:14" pos:end="65:32">ff_get_video_buffer</name><argument_list pos:start="65:33" pos:end="65:65">(<argument pos:start="65:34" pos:end="65:40"><expr pos:start="65:34" pos:end="65:40"><name pos:start="65:34" pos:end="65:40">outlink</name></expr></argument>, <argument pos:start="65:43" pos:end="65:52"><expr pos:start="65:43" pos:end="65:52"><name pos:start="65:43" pos:end="65:52"><name pos:start="65:43" pos:end="65:49">outlink</name><operator pos:start="65:50" pos:end="65:51">-&gt;</operator><name pos:start="65:52" pos:end="65:52">w</name></name></expr></argument>, <argument pos:start="65:55" pos:end="65:64"><expr pos:start="65:55" pos:end="65:64"><name pos:start="65:55" pos:end="65:64"><name pos:start="65:55" pos:end="65:61">outlink</name><operator pos:start="65:62" pos:end="65:63">-&gt;</operator><name pos:start="65:64" pos:end="65:64">h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:15">output</name></expr>)</condition> <block pos:start="67:18" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:18">

        <expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:11">err</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:29"><name pos:start="69:15" pos:end="69:21">AVERROR</name><argument_list pos:start="69:22" pos:end="69:29">(<argument pos:start="69:23" pos:end="69:28"><expr pos:start="69:23" pos:end="69:28"><name pos:start="69:23" pos:end="69:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="77:5" pos:end="193:5">for <control pos:start="77:9" pos:end="77:52">(<init pos:start="77:10" pos:end="77:19"><expr pos:start="77:10" pos:end="77:18"><name pos:start="77:10" pos:end="77:14">plane</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:43"><expr pos:start="77:21" pos:end="77:42"><name pos:start="77:21" pos:end="77:25">plane</name> <operator pos:start="77:27" pos:end="77:27">&lt;</operator> <name pos:start="77:29" pos:end="77:42"><name pos:start="77:29" pos:end="77:31">ctx</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:42">nb_planes</name></name></expr>;</condition> <incr pos:start="77:45" pos:end="77:51"><expr pos:start="77:45" pos:end="77:51"><name pos:start="77:45" pos:end="77:49">plane</name><operator pos:start="77:50" pos:end="77:51">++</operator></expr></incr>)</control> <block pos:start="77:54" pos:end="193:5">{<block_content pos:start="79:9" pos:end="191:9">

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:18">kernel_arg</name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:22">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:42"><expr pos:start="83:9" pos:end="83:41"><name pos:start="83:9" pos:end="83:11">mem</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">(</operator><name pos:start="83:16" pos:end="83:21">cl_mem</name><operator pos:start="83:22" pos:end="83:22">)</operator><name pos:start="83:23" pos:end="83:41"><name pos:start="83:23" pos:end="83:28">output</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:34">data</name><index pos:start="83:35" pos:end="83:41">[<expr pos:start="83:36" pos:end="83:40"><name pos:start="83:36" pos:end="83:40">plane</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:78"><expr pos:start="85:9" pos:end="85:77"><name pos:start="85:9" pos:end="85:11">cle</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:77"><name pos:start="85:15" pos:end="85:28">clSetKernelArg</name><argument_list pos:start="85:29" pos:end="85:77">(<argument pos:start="85:30" pos:end="85:40"><expr pos:start="85:30" pos:end="85:40"><name pos:start="85:30" pos:end="85:40"><name pos:start="85:30" pos:end="85:32">ctx</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:40">kernel</name></name></expr></argument>, <argument pos:start="85:43" pos:end="85:54"><expr pos:start="85:43" pos:end="85:54"><name pos:start="85:43" pos:end="85:52">kernel_arg</name><operator pos:start="85:53" pos:end="85:54">++</operator></expr></argument>, <argument pos:start="85:57" pos:end="85:70"><expr pos:start="85:57" pos:end="85:70"><sizeof pos:start="85:57" pos:end="85:70">sizeof<argument_list pos:start="85:63" pos:end="85:70">(<argument pos:start="85:64" pos:end="85:69"><expr pos:start="85:64" pos:end="85:69"><name pos:start="85:64" pos:end="85:69">cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="85:73" pos:end="85:76"><expr pos:start="85:73" pos:end="85:76"><operator pos:start="85:73" pos:end="85:73">&amp;</operator><name pos:start="85:74" pos:end="85:76">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:33"><if pos:start="87:9" pos:end="89:33">if <condition pos:start="87:12" pos:end="87:30">(<expr pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:15">cle</name> <operator pos:start="87:17" pos:end="87:18">!=</operator> <name pos:start="87:20" pos:end="87:29">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:33"><block_content pos:start="89:13" pos:end="89:33">

            <goto pos:start="89:13" pos:end="89:33">goto <name pos:start="89:18" pos:end="89:32">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:11">mem</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <operator pos:start="93:15" pos:end="93:15">(</operator><name pos:start="93:16" pos:end="93:21">cl_mem</name><operator pos:start="93:22" pos:end="93:22">)</operator><name pos:start="93:23" pos:end="93:45"><name pos:start="93:23" pos:end="93:32">input_main</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:38">data</name><index pos:start="93:39" pos:end="93:45">[<expr pos:start="93:40" pos:end="93:44"><name pos:start="93:40" pos:end="93:44">plane</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:78"><expr pos:start="95:9" pos:end="95:77"><name pos:start="95:9" pos:end="95:11">cle</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:77"><name pos:start="95:15" pos:end="95:28">clSetKernelArg</name><argument_list pos:start="95:29" pos:end="95:77">(<argument pos:start="95:30" pos:end="95:40"><expr pos:start="95:30" pos:end="95:40"><name pos:start="95:30" pos:end="95:40"><name pos:start="95:30" pos:end="95:32">ctx</name><operator pos:start="95:33" pos:end="95:34">-&gt;</operator><name pos:start="95:35" pos:end="95:40">kernel</name></name></expr></argument>, <argument pos:start="95:43" pos:end="95:54"><expr pos:start="95:43" pos:end="95:54"><name pos:start="95:43" pos:end="95:52">kernel_arg</name><operator pos:start="95:53" pos:end="95:54">++</operator></expr></argument>, <argument pos:start="95:57" pos:end="95:70"><expr pos:start="95:57" pos:end="95:70"><sizeof pos:start="95:57" pos:end="95:70">sizeof<argument_list pos:start="95:63" pos:end="95:70">(<argument pos:start="95:64" pos:end="95:69"><expr pos:start="95:64" pos:end="95:69"><name pos:start="95:64" pos:end="95:69">cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:73" pos:end="95:76"><expr pos:start="95:73" pos:end="95:76"><operator pos:start="95:73" pos:end="95:73">&amp;</operator><name pos:start="95:74" pos:end="95:76">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="99:33"><if pos:start="97:9" pos:end="99:33">if <condition pos:start="97:12" pos:end="97:30">(<expr pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:15">cle</name> <operator pos:start="97:17" pos:end="97:18">!=</operator> <name pos:start="97:20" pos:end="97:29">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:33"><block_content pos:start="99:13" pos:end="99:33">

            <goto pos:start="99:13" pos:end="99:33">goto <name pos:start="99:18" pos:end="99:32">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:49"><expr pos:start="103:9" pos:end="103:48"><name pos:start="103:9" pos:end="103:11">mem</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <operator pos:start="103:15" pos:end="103:15">(</operator><name pos:start="103:16" pos:end="103:21">cl_mem</name><operator pos:start="103:22" pos:end="103:22">)</operator><name pos:start="103:23" pos:end="103:48"><name pos:start="103:23" pos:end="103:35">input_overlay</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:41">data</name><index pos:start="103:42" pos:end="103:48">[<expr pos:start="103:43" pos:end="103:47"><name pos:start="103:43" pos:end="103:47">plane</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:78"><expr pos:start="105:9" pos:end="105:77"><name pos:start="105:9" pos:end="105:11">cle</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:77"><name pos:start="105:15" pos:end="105:28">clSetKernelArg</name><argument_list pos:start="105:29" pos:end="105:77">(<argument pos:start="105:30" pos:end="105:40"><expr pos:start="105:30" pos:end="105:40"><name pos:start="105:30" pos:end="105:40"><name pos:start="105:30" pos:end="105:32">ctx</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:40">kernel</name></name></expr></argument>, <argument pos:start="105:43" pos:end="105:54"><expr pos:start="105:43" pos:end="105:54"><name pos:start="105:43" pos:end="105:52">kernel_arg</name><operator pos:start="105:53" pos:end="105:54">++</operator></expr></argument>, <argument pos:start="105:57" pos:end="105:70"><expr pos:start="105:57" pos:end="105:70"><sizeof pos:start="105:57" pos:end="105:70">sizeof<argument_list pos:start="105:63" pos:end="105:70">(<argument pos:start="105:64" pos:end="105:69"><expr pos:start="105:64" pos:end="105:69"><name pos:start="105:64" pos:end="105:69">cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:73" pos:end="105:76"><expr pos:start="105:73" pos:end="105:76"><operator pos:start="105:73" pos:end="105:73">&amp;</operator><name pos:start="105:74" pos:end="105:76">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:33"><if pos:start="107:9" pos:end="109:33">if <condition pos:start="107:12" pos:end="107:30">(<expr pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:15">cle</name> <operator pos:start="107:17" pos:end="107:18">!=</operator> <name pos:start="107:20" pos:end="107:29">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:33"><block_content pos:start="109:13" pos:end="109:33">

            <goto pos:start="109:13" pos:end="109:33">goto <name pos:start="109:18" pos:end="109:32">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="113:32">(<expr pos:start="113:13" pos:end="113:31"><name pos:start="113:13" pos:end="113:31"><name pos:start="113:13" pos:end="113:15">ctx</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:31">alpha_separate</name></name></expr>)</condition> <block pos:start="113:34" pos:end="123:9">{<block_content pos:start="115:13" pos:end="121:37">

            <expr_stmt pos:start="115:13" pos:end="115:62"><expr pos:start="115:13" pos:end="115:61"><name pos:start="115:13" pos:end="115:15">mem</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <operator pos:start="115:19" pos:end="115:19">(</operator><name pos:start="115:20" pos:end="115:25">cl_mem</name><operator pos:start="115:26" pos:end="115:26">)</operator><name pos:start="115:27" pos:end="115:61"><name pos:start="115:27" pos:end="115:39">input_overlay</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:45">data</name><index pos:start="115:46" pos:end="115:61">[<expr pos:start="115:47" pos:end="115:60"><name pos:start="115:47" pos:end="115:60"><name pos:start="115:47" pos:end="115:49">ctx</name><operator pos:start="115:50" pos:end="115:51">-&gt;</operator><name pos:start="115:52" pos:end="115:60">nb_planes</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:82"><expr pos:start="117:13" pos:end="117:81"><name pos:start="117:13" pos:end="117:15">cle</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="117:81"><name pos:start="117:19" pos:end="117:32">clSetKernelArg</name><argument_list pos:start="117:33" pos:end="117:81">(<argument pos:start="117:34" pos:end="117:44"><expr pos:start="117:34" pos:end="117:44"><name pos:start="117:34" pos:end="117:44"><name pos:start="117:34" pos:end="117:36">ctx</name><operator pos:start="117:37" pos:end="117:38">-&gt;</operator><name pos:start="117:39" pos:end="117:44">kernel</name></name></expr></argument>, <argument pos:start="117:47" pos:end="117:58"><expr pos:start="117:47" pos:end="117:58"><name pos:start="117:47" pos:end="117:56">kernel_arg</name><operator pos:start="117:57" pos:end="117:58">++</operator></expr></argument>, <argument pos:start="117:61" pos:end="117:74"><expr pos:start="117:61" pos:end="117:74"><sizeof pos:start="117:61" pos:end="117:74">sizeof<argument_list pos:start="117:67" pos:end="117:74">(<argument pos:start="117:68" pos:end="117:73"><expr pos:start="117:68" pos:end="117:73"><name pos:start="117:68" pos:end="117:73">cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="117:77" pos:end="117:80"><expr pos:start="117:77" pos:end="117:80"><operator pos:start="117:77" pos:end="117:77">&amp;</operator><name pos:start="117:78" pos:end="117:80">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="119:13" pos:end="121:37"><if pos:start="119:13" pos:end="121:37">if <condition pos:start="119:16" pos:end="119:34">(<expr pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:19">cle</name> <operator pos:start="119:21" pos:end="119:22">!=</operator> <name pos:start="119:24" pos:end="119:33">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:37"><block_content pos:start="121:17" pos:end="121:37">

                <goto pos:start="121:17" pos:end="121:37">goto <name pos:start="121:22" pos:end="121:36">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:66"><expr pos:start="127:9" pos:end="127:65"><name pos:start="127:9" pos:end="127:9">x</name> <operator pos:start="127:11" pos:end="127:11">=</operator> <name pos:start="127:13" pos:end="127:27"><name pos:start="127:13" pos:end="127:15">ctx</name><operator pos:start="127:16" pos:end="127:17">-&gt;</operator><name pos:start="127:18" pos:end="127:27">x_position</name></name> <operator pos:start="127:29" pos:end="127:29">/</operator> <operator pos:start="127:31" pos:end="127:31">(</operator><ternary pos:start="127:32" pos:end="127:64"><condition pos:start="127:32" pos:end="127:43"><expr pos:start="127:32" pos:end="127:41"><name pos:start="127:32" pos:end="127:36">plane</name> <operator pos:start="127:38" pos:end="127:39">==</operator> <literal type="number" pos:start="127:41" pos:end="127:41">0</literal></expr> ?</condition><then pos:start="127:45" pos:end="127:45"> <expr pos:start="127:45" pos:end="127:45"><literal type="number" pos:start="127:45" pos:end="127:45">1</literal></expr> </then><else pos:start="127:47" pos:end="127:64">: <expr pos:start="127:49" pos:end="127:64"><name pos:start="127:49" pos:end="127:64"><name pos:start="127:49" pos:end="127:51">ctx</name><operator pos:start="127:52" pos:end="127:53">-&gt;</operator><name pos:start="127:54" pos:end="127:64">x_subsample</name></name></expr></else></ternary><operator pos:start="127:65" pos:end="127:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:66"><expr pos:start="129:9" pos:end="129:65"><name pos:start="129:9" pos:end="129:9">y</name> <operator pos:start="129:11" pos:end="129:11">=</operator> <name pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:15">ctx</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:27">y_position</name></name> <operator pos:start="129:29" pos:end="129:29">/</operator> <operator pos:start="129:31" pos:end="129:31">(</operator><ternary pos:start="129:32" pos:end="129:64"><condition pos:start="129:32" pos:end="129:43"><expr pos:start="129:32" pos:end="129:41"><name pos:start="129:32" pos:end="129:36">plane</name> <operator pos:start="129:38" pos:end="129:39">==</operator> <literal type="number" pos:start="129:41" pos:end="129:41">0</literal></expr> ?</condition><then pos:start="129:45" pos:end="129:45"> <expr pos:start="129:45" pos:end="129:45"><literal type="number" pos:start="129:45" pos:end="129:45">1</literal></expr> </then><else pos:start="129:47" pos:end="129:64">: <expr pos:start="129:49" pos:end="129:64"><name pos:start="129:49" pos:end="129:64"><name pos:start="129:49" pos:end="129:51">ctx</name><operator pos:start="129:52" pos:end="129:53">-&gt;</operator><name pos:start="129:54" pos:end="129:64">y_subsample</name></name></expr></else></ternary><operator pos:start="129:65" pos:end="129:65">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:76"><expr pos:start="133:9" pos:end="133:75"><name pos:start="133:9" pos:end="133:11">cle</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <call pos:start="133:15" pos:end="133:75"><name pos:start="133:15" pos:end="133:28">clSetKernelArg</name><argument_list pos:start="133:29" pos:end="133:75">(<argument pos:start="133:30" pos:end="133:40"><expr pos:start="133:30" pos:end="133:40"><name pos:start="133:30" pos:end="133:40"><name pos:start="133:30" pos:end="133:32">ctx</name><operator pos:start="133:33" pos:end="133:34">-&gt;</operator><name pos:start="133:35" pos:end="133:40">kernel</name></name></expr></argument>, <argument pos:start="133:43" pos:end="133:54"><expr pos:start="133:43" pos:end="133:54"><name pos:start="133:43" pos:end="133:52">kernel_arg</name><operator pos:start="133:53" pos:end="133:54">++</operator></expr></argument>, <argument pos:start="133:57" pos:end="133:70"><expr pos:start="133:57" pos:end="133:70"><sizeof pos:start="133:57" pos:end="133:70">sizeof<argument_list pos:start="133:63" pos:end="133:70">(<argument pos:start="133:64" pos:end="133:69"><expr pos:start="133:64" pos:end="133:69"><name pos:start="133:64" pos:end="133:69">cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="133:73" pos:end="133:74"><expr pos:start="133:73" pos:end="133:74"><operator pos:start="133:73" pos:end="133:73">&amp;</operator><name pos:start="133:74" pos:end="133:74">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="137:33"><if pos:start="135:9" pos:end="137:33">if <condition pos:start="135:12" pos:end="135:30">(<expr pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:15">cle</name> <operator pos:start="135:17" pos:end="135:18">!=</operator> <name pos:start="135:20" pos:end="135:29">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:33"><block_content pos:start="137:13" pos:end="137:33">

            <goto pos:start="137:13" pos:end="137:33">goto <name pos:start="137:18" pos:end="137:32">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:76"><expr pos:start="139:9" pos:end="139:75"><name pos:start="139:9" pos:end="139:11">cle</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:75"><name pos:start="139:15" pos:end="139:28">clSetKernelArg</name><argument_list pos:start="139:29" pos:end="139:75">(<argument pos:start="139:30" pos:end="139:40"><expr pos:start="139:30" pos:end="139:40"><name pos:start="139:30" pos:end="139:40"><name pos:start="139:30" pos:end="139:32">ctx</name><operator pos:start="139:33" pos:end="139:34">-&gt;</operator><name pos:start="139:35" pos:end="139:40">kernel</name></name></expr></argument>, <argument pos:start="139:43" pos:end="139:54"><expr pos:start="139:43" pos:end="139:54"><name pos:start="139:43" pos:end="139:52">kernel_arg</name><operator pos:start="139:53" pos:end="139:54">++</operator></expr></argument>, <argument pos:start="139:57" pos:end="139:70"><expr pos:start="139:57" pos:end="139:70"><sizeof pos:start="139:57" pos:end="139:70">sizeof<argument_list pos:start="139:63" pos:end="139:70">(<argument pos:start="139:64" pos:end="139:69"><expr pos:start="139:64" pos:end="139:69"><name pos:start="139:64" pos:end="139:69">cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:73" pos:end="139:74"><expr pos:start="139:73" pos:end="139:74"><operator pos:start="139:73" pos:end="139:73">&amp;</operator><name pos:start="139:74" pos:end="139:74">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="143:33"><if pos:start="141:9" pos:end="143:33">if <condition pos:start="141:12" pos:end="141:30">(<expr pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:15">cle</name> <operator pos:start="141:17" pos:end="141:18">!=</operator> <name pos:start="141:20" pos:end="141:29">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:33"><block_content pos:start="143:13" pos:end="143:33">

            <goto pos:start="143:13" pos:end="143:33">goto <name pos:start="143:18" pos:end="143:32">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="147:9" pos:end="167:9"><if pos:start="147:9" pos:end="167:9">if <condition pos:start="147:12" pos:end="147:32">(<expr pos:start="147:13" pos:end="147:31"><name pos:start="147:13" pos:end="147:31"><name pos:start="147:13" pos:end="147:15">ctx</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:31">alpha_separate</name></name></expr>)</condition> <block pos:start="147:34" pos:end="167:9">{<block_content pos:start="149:13" pos:end="165:37">

            <decl_stmt pos:start="149:13" pos:end="149:67"><decl pos:start="149:13" pos:end="149:66"><type pos:start="149:13" pos:end="149:18"><name pos:start="149:13" pos:end="149:18">cl_int</name></type> <name pos:start="149:20" pos:end="149:30">alpha_adj_x</name> <init pos:start="149:32" pos:end="149:66">= <expr pos:start="149:34" pos:end="149:66"><ternary pos:start="149:34" pos:end="149:66"><condition pos:start="149:34" pos:end="149:45"><expr pos:start="149:34" pos:end="149:43"><name pos:start="149:34" pos:end="149:38">plane</name> <operator pos:start="149:40" pos:end="149:41">==</operator> <literal type="number" pos:start="149:43" pos:end="149:43">0</literal></expr> ?</condition><then pos:start="149:47" pos:end="149:47"> <expr pos:start="149:47" pos:end="149:47"><literal type="number" pos:start="149:47" pos:end="149:47">1</literal></expr> </then><else pos:start="149:49" pos:end="149:66">: <expr pos:start="149:51" pos:end="149:66"><name pos:start="149:51" pos:end="149:66"><name pos:start="149:51" pos:end="149:53">ctx</name><operator pos:start="149:54" pos:end="149:55">-&gt;</operator><name pos:start="149:56" pos:end="149:66">x_subsample</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="151:13" pos:end="151:67"><decl pos:start="151:13" pos:end="151:66"><type pos:start="151:13" pos:end="151:18"><name pos:start="151:13" pos:end="151:18">cl_int</name></type> <name pos:start="151:20" pos:end="151:30">alpha_adj_y</name> <init pos:start="151:32" pos:end="151:66">= <expr pos:start="151:34" pos:end="151:66"><ternary pos:start="151:34" pos:end="151:66"><condition pos:start="151:34" pos:end="151:45"><expr pos:start="151:34" pos:end="151:43"><name pos:start="151:34" pos:end="151:38">plane</name> <operator pos:start="151:40" pos:end="151:41">==</operator> <literal type="number" pos:start="151:43" pos:end="151:43">0</literal></expr> ?</condition><then pos:start="151:47" pos:end="151:47"> <expr pos:start="151:47" pos:end="151:47"><literal type="number" pos:start="151:47" pos:end="151:47">1</literal></expr> </then><else pos:start="151:49" pos:end="151:66">: <expr pos:start="151:51" pos:end="151:66"><name pos:start="151:51" pos:end="151:66"><name pos:start="151:51" pos:end="151:53">ctx</name><operator pos:start="151:54" pos:end="151:55">-&gt;</operator><name pos:start="151:56" pos:end="151:66">y_subsample</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="155:13" pos:end="155:90"><expr pos:start="155:13" pos:end="155:89"><name pos:start="155:13" pos:end="155:15">cle</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:89"><name pos:start="155:19" pos:end="155:32">clSetKernelArg</name><argument_list pos:start="155:33" pos:end="155:89">(<argument pos:start="155:34" pos:end="155:44"><expr pos:start="155:34" pos:end="155:44"><name pos:start="155:34" pos:end="155:44"><name pos:start="155:34" pos:end="155:36">ctx</name><operator pos:start="155:37" pos:end="155:38">-&gt;</operator><name pos:start="155:39" pos:end="155:44">kernel</name></name></expr></argument>, <argument pos:start="155:47" pos:end="155:58"><expr pos:start="155:47" pos:end="155:58"><name pos:start="155:47" pos:end="155:56">kernel_arg</name><operator pos:start="155:57" pos:end="155:58">++</operator></expr></argument>, <argument pos:start="155:61" pos:end="155:74"><expr pos:start="155:61" pos:end="155:74"><sizeof pos:start="155:61" pos:end="155:74">sizeof<argument_list pos:start="155:67" pos:end="155:74">(<argument pos:start="155:68" pos:end="155:73"><expr pos:start="155:68" pos:end="155:73"><name pos:start="155:68" pos:end="155:73">cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="155:77" pos:end="155:88"><expr pos:start="155:77" pos:end="155:88"><operator pos:start="155:77" pos:end="155:77">&amp;</operator><name pos:start="155:78" pos:end="155:88">alpha_adj_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="157:13" pos:end="159:37"><if pos:start="157:13" pos:end="159:37">if <condition pos:start="157:16" pos:end="157:34">(<expr pos:start="157:17" pos:end="157:33"><name pos:start="157:17" pos:end="157:19">cle</name> <operator pos:start="157:21" pos:end="157:22">!=</operator> <name pos:start="157:24" pos:end="157:33">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="159:17" pos:end="159:37"><block_content pos:start="159:17" pos:end="159:37">

                <goto pos:start="159:17" pos:end="159:37">goto <name pos:start="159:22" pos:end="159:36">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:90"><expr pos:start="161:13" pos:end="161:89"><name pos:start="161:13" pos:end="161:15">cle</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:89"><name pos:start="161:19" pos:end="161:32">clSetKernelArg</name><argument_list pos:start="161:33" pos:end="161:89">(<argument pos:start="161:34" pos:end="161:44"><expr pos:start="161:34" pos:end="161:44"><name pos:start="161:34" pos:end="161:44"><name pos:start="161:34" pos:end="161:36">ctx</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:44">kernel</name></name></expr></argument>, <argument pos:start="161:47" pos:end="161:58"><expr pos:start="161:47" pos:end="161:58"><name pos:start="161:47" pos:end="161:56">kernel_arg</name><operator pos:start="161:57" pos:end="161:58">++</operator></expr></argument>, <argument pos:start="161:61" pos:end="161:74"><expr pos:start="161:61" pos:end="161:74"><sizeof pos:start="161:61" pos:end="161:74">sizeof<argument_list pos:start="161:67" pos:end="161:74">(<argument pos:start="161:68" pos:end="161:73"><expr pos:start="161:68" pos:end="161:73"><name pos:start="161:68" pos:end="161:73">cl_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="161:77" pos:end="161:88"><expr pos:start="161:77" pos:end="161:88"><operator pos:start="161:77" pos:end="161:77">&amp;</operator><name pos:start="161:78" pos:end="161:88">alpha_adj_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="165:37"><if pos:start="163:13" pos:end="165:37">if <condition pos:start="163:16" pos:end="163:34">(<expr pos:start="163:17" pos:end="163:33"><name pos:start="163:17" pos:end="163:19">cle</name> <operator pos:start="163:21" pos:end="163:22">!=</operator> <name pos:start="163:24" pos:end="163:33">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="165:17" pos:end="165:37"><block_content pos:start="165:17" pos:end="165:37">

                <goto pos:start="165:17" pos:end="165:37">goto <name pos:start="165:22" pos:end="165:36">fail_kernel_arg</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:39"><expr pos:start="171:9" pos:end="171:38"><name pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:19">global_work</name><index pos:start="171:20" pos:end="171:22">[<expr pos:start="171:21" pos:end="171:21"><literal type="number" pos:start="171:21" pos:end="171:21">0</literal></expr>]</index></name> <operator pos:start="171:24" pos:end="171:24">=</operator> <name pos:start="171:26" pos:end="171:38"><name pos:start="171:26" pos:end="171:31">output</name><operator pos:start="171:32" pos:end="171:33">-&gt;</operator><name pos:start="171:34" pos:end="171:38">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:40"><expr pos:start="173:9" pos:end="173:39"><name pos:start="173:9" pos:end="173:22"><name pos:start="173:9" pos:end="173:19">global_work</name><index pos:start="173:20" pos:end="173:22">[<expr pos:start="173:21" pos:end="173:21"><literal type="number" pos:start="173:21" pos:end="173:21">1</literal></expr>]</index></name> <operator pos:start="173:24" pos:end="173:24">=</operator> <name pos:start="173:26" pos:end="173:39"><name pos:start="173:26" pos:end="173:31">output</name><operator pos:start="173:32" pos:end="173:33">-&gt;</operator><name pos:start="173:34" pos:end="173:39">height</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="177:9" pos:end="179:71"><expr pos:start="177:9" pos:end="179:70"><name pos:start="177:9" pos:end="177:11">cle</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <call pos:start="177:15" pos:end="179:70"><name pos:start="177:15" pos:end="177:36">clEnqueueNDRangeKernel</name><argument_list pos:start="177:37" pos:end="179:70">(<argument pos:start="177:38" pos:end="177:55"><expr pos:start="177:38" pos:end="177:55"><name pos:start="177:38" pos:end="177:55"><name pos:start="177:38" pos:end="177:40">ctx</name><operator pos:start="177:41" pos:end="177:42">-&gt;</operator><name pos:start="177:43" pos:end="177:55">command_queue</name></name></expr></argument>, <argument pos:start="177:58" pos:end="177:68"><expr pos:start="177:58" pos:end="177:68"><name pos:start="177:58" pos:end="177:68"><name pos:start="177:58" pos:end="177:60">ctx</name><operator pos:start="177:61" pos:end="177:62">-&gt;</operator><name pos:start="177:63" pos:end="177:68">kernel</name></name></expr></argument>, <argument pos:start="177:71" pos:end="177:71"><expr pos:start="177:71" pos:end="177:71"><literal type="number" pos:start="177:71" pos:end="177:71">2</literal></expr></argument>, <argument pos:start="177:74" pos:end="177:77"><expr pos:start="177:74" pos:end="177:77"><name pos:start="177:74" pos:end="177:77">NULL</name></expr></argument>,

                                     <argument pos:start="179:38" pos:end="179:48"><expr pos:start="179:38" pos:end="179:48"><name pos:start="179:38" pos:end="179:48">global_work</name></expr></argument>, <argument pos:start="179:51" pos:end="179:54"><expr pos:start="179:51" pos:end="179:54"><name pos:start="179:51" pos:end="179:54">NULL</name></expr></argument>, <argument pos:start="179:57" pos:end="179:57"><expr pos:start="179:57" pos:end="179:57"><literal type="number" pos:start="179:57" pos:end="179:57">0</literal></expr></argument>, <argument pos:start="179:60" pos:end="179:63"><expr pos:start="179:60" pos:end="179:63"><name pos:start="179:60" pos:end="179:63">NULL</name></expr></argument>, <argument pos:start="179:66" pos:end="179:69"><expr pos:start="179:66" pos:end="179:69"><name pos:start="179:66" pos:end="179:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="191:9"><if pos:start="181:9" pos:end="191:9">if <condition pos:start="181:12" pos:end="181:30">(<expr pos:start="181:13" pos:end="181:29"><name pos:start="181:13" pos:end="181:15">cle</name> <operator pos:start="181:17" pos:end="181:18">!=</operator> <name pos:start="181:20" pos:end="181:29">CL_SUCCESS</name></expr>)</condition> <block pos:start="181:32" pos:end="191:9">{<block_content pos:start="183:13" pos:end="189:22">

            <expr_stmt pos:start="183:13" pos:end="185:69"><expr pos:start="183:13" pos:end="185:68"><call pos:start="183:13" pos:end="185:68"><name pos:start="183:13" pos:end="183:18">av_log</name><argument_list pos:start="183:19" pos:end="185:68">(<argument pos:start="183:20" pos:end="183:24"><expr pos:start="183:20" pos:end="183:24"><name pos:start="183:20" pos:end="183:24">avctx</name></expr></argument>, <argument pos:start="183:27" pos:end="183:38"><expr pos:start="183:27" pos:end="183:38"><name pos:start="183:27" pos:end="183:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="183:41" pos:end="185:55"><expr pos:start="183:41" pos:end="185:55"><literal type="string" pos:start="183:41" pos:end="183:60">"Failed to enqueue "</literal>

                   <literal type="string" pos:start="185:20" pos:end="185:55">"overlay kernel for plane %d: %d.\n"</literal></expr></argument>, <argument pos:start="185:58" pos:end="185:60"><expr pos:start="185:58" pos:end="185:60"><name pos:start="185:58" pos:end="185:60">cle</name></expr></argument>, <argument pos:start="185:63" pos:end="185:67"><expr pos:start="185:63" pos:end="185:67"><name pos:start="185:63" pos:end="185:67">plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:15">err</name> <operator pos:start="187:17" pos:end="187:17">=</operator> <call pos:start="187:19" pos:end="187:30"><name pos:start="187:19" pos:end="187:25">AVERROR</name><argument_list pos:start="187:26" pos:end="187:30">(<argument pos:start="187:27" pos:end="187:29"><expr pos:start="187:27" pos:end="187:29"><name pos:start="187:27" pos:end="187:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="189:13" pos:end="189:22">goto <name pos:start="189:18" pos:end="189:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="197:5" pos:end="197:39"><expr pos:start="197:5" pos:end="197:38"><name pos:start="197:5" pos:end="197:7">cle</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <call pos:start="197:11" pos:end="197:38"><name pos:start="197:11" pos:end="197:18">clFinish</name><argument_list pos:start="197:19" pos:end="197:38">(<argument pos:start="197:20" pos:end="197:37"><expr pos:start="197:20" pos:end="197:37"><name pos:start="197:20" pos:end="197:37"><name pos:start="197:20" pos:end="197:22">ctx</name><operator pos:start="197:23" pos:end="197:24">-&gt;</operator><name pos:start="197:25" pos:end="197:37">command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="209:5"><if pos:start="199:5" pos:end="209:5">if <condition pos:start="199:8" pos:end="199:26">(<expr pos:start="199:9" pos:end="199:25"><name pos:start="199:9" pos:end="199:11">cle</name> <operator pos:start="199:13" pos:end="199:14">!=</operator> <name pos:start="199:16" pos:end="199:25">CL_SUCCESS</name></expr>)</condition> <block pos:start="199:28" pos:end="209:5">{<block_content pos:start="201:9" pos:end="207:18">

        <expr_stmt pos:start="201:9" pos:end="203:44"><expr pos:start="201:9" pos:end="203:43"><call pos:start="201:9" pos:end="203:43"><name pos:start="201:9" pos:end="201:14">av_log</name><argument_list pos:start="201:15" pos:end="203:43">(<argument pos:start="201:16" pos:end="201:20"><expr pos:start="201:16" pos:end="201:20"><name pos:start="201:16" pos:end="201:20">avctx</name></expr></argument>, <argument pos:start="201:23" pos:end="201:34"><expr pos:start="201:23" pos:end="201:34"><name pos:start="201:23" pos:end="201:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="201:37" pos:end="203:37"><expr pos:start="201:37" pos:end="203:37"><literal type="string" pos:start="201:37" pos:end="201:55">"Failed to finish "</literal>

               <literal type="string" pos:start="203:16" pos:end="203:37">"command queue: %d.\n"</literal></expr></argument>, <argument pos:start="203:40" pos:end="203:42"><expr pos:start="203:40" pos:end="203:42"><name pos:start="203:40" pos:end="203:42">cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:27"><expr pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:11">err</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="205:26"><name pos:start="205:15" pos:end="205:21">AVERROR</name><argument_list pos:start="205:22" pos:end="205:26">(<argument pos:start="205:23" pos:end="205:25"><expr pos:start="205:23" pos:end="205:25"><name pos:start="205:23" pos:end="205:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="207:9" pos:end="207:18">goto <name pos:start="207:14" pos:end="207:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:50"><expr pos:start="213:5" pos:end="213:49"><name pos:start="213:5" pos:end="213:7">err</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:49"><name pos:start="213:11" pos:end="213:29">av_frame_copy_props</name><argument_list pos:start="213:30" pos:end="213:49">(<argument pos:start="213:31" pos:end="213:36"><expr pos:start="213:31" pos:end="213:36"><name pos:start="213:31" pos:end="213:36">output</name></expr></argument>, <argument pos:start="213:39" pos:end="213:48"><expr pos:start="213:39" pos:end="213:48"><name pos:start="213:39" pos:end="213:48">input_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="221:55"><expr pos:start="217:5" pos:end="221:54"><call pos:start="217:5" pos:end="221:54"><name pos:start="217:5" pos:end="217:10">av_log</name><argument_list pos:start="217:11" pos:end="221:54">(<argument pos:start="217:12" pos:end="217:16"><expr pos:start="217:12" pos:end="217:16"><name pos:start="217:12" pos:end="217:16">avctx</name></expr></argument>, <argument pos:start="217:19" pos:end="217:30"><expr pos:start="217:19" pos:end="217:30"><name pos:start="217:19" pos:end="217:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="217:33" pos:end="217:73"><expr pos:start="217:33" pos:end="217:73"><literal type="string" pos:start="217:33" pos:end="217:61">"Filter output: %s, %ux%u (%"</literal><name pos:start="217:62" pos:end="217:67">PRId64</name><literal type="string" pos:start="217:68" pos:end="217:73">").\n"</literal></expr></argument>,

           <argument pos:start="219:12" pos:end="219:46"><expr pos:start="219:12" pos:end="219:46"><call pos:start="219:12" pos:end="219:46"><name pos:start="219:12" pos:end="219:30">av_get_pix_fmt_name</name><argument_list pos:start="219:31" pos:end="219:46">(<argument pos:start="219:32" pos:end="219:45"><expr pos:start="219:32" pos:end="219:45"><name pos:start="219:32" pos:end="219:45"><name pos:start="219:32" pos:end="219:37">output</name><operator pos:start="219:38" pos:end="219:39">-&gt;</operator><name pos:start="219:40" pos:end="219:45">format</name></name></expr></argument>)</argument_list></call></expr></argument>,

           <argument pos:start="221:12" pos:end="221:24"><expr pos:start="221:12" pos:end="221:24"><name pos:start="221:12" pos:end="221:24"><name pos:start="221:12" pos:end="221:17">output</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:24">width</name></name></expr></argument>, <argument pos:start="221:27" pos:end="221:40"><expr pos:start="221:27" pos:end="221:40"><name pos:start="221:27" pos:end="221:40"><name pos:start="221:27" pos:end="221:32">output</name><operator pos:start="221:33" pos:end="221:34">-&gt;</operator><name pos:start="221:35" pos:end="221:40">height</name></name></expr></argument>, <argument pos:start="221:43" pos:end="221:53"><expr pos:start="221:43" pos:end="221:53"><name pos:start="221:43" pos:end="221:53"><name pos:start="221:43" pos:end="221:48">output</name><operator pos:start="221:49" pos:end="221:50">-&gt;</operator><name pos:start="221:51" pos:end="221:53">pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="225:5" pos:end="225:44">return <expr pos:start="225:12" pos:end="225:43"><call pos:start="225:12" pos:end="225:43"><name pos:start="225:12" pos:end="225:26">ff_filter_frame</name><argument_list pos:start="225:27" pos:end="225:43">(<argument pos:start="225:28" pos:end="225:34"><expr pos:start="225:28" pos:end="225:34"><name pos:start="225:28" pos:end="225:34">outlink</name></expr></argument>, <argument pos:start="225:37" pos:end="225:42"><expr pos:start="225:37" pos:end="225:42"><name pos:start="225:37" pos:end="225:42">output</name></expr></argument>)</argument_list></call></expr>;</return>



<label pos:start="229:1" pos:end="229:16"><name pos:start="229:1" pos:end="229:15">fail_kernel_arg</name>:</label>

    <expr_stmt pos:start="231:5" pos:end="233:28"><expr pos:start="231:5" pos:end="233:27"><call pos:start="231:5" pos:end="233:27"><name pos:start="231:5" pos:end="231:10">av_log</name><argument_list pos:start="231:11" pos:end="233:27">(<argument pos:start="231:12" pos:end="231:16"><expr pos:start="231:12" pos:end="231:16"><name pos:start="231:12" pos:end="231:16">avctx</name></expr></argument>, <argument pos:start="231:19" pos:end="231:30"><expr pos:start="231:19" pos:end="231:30"><name pos:start="231:19" pos:end="231:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:33" pos:end="231:68"><expr pos:start="231:33" pos:end="231:68"><literal type="string" pos:start="231:33" pos:end="231:68">"Failed to set kernel arg %d: %d.\n"</literal></expr></argument>,

           <argument pos:start="233:12" pos:end="233:21"><expr pos:start="233:12" pos:end="233:21"><name pos:start="233:12" pos:end="233:21">kernel_arg</name></expr></argument>, <argument pos:start="233:24" pos:end="233:26"><expr pos:start="233:24" pos:end="233:26"><name pos:start="233:24" pos:end="233:26">cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:23"><expr pos:start="235:5" pos:end="235:22"><name pos:start="235:5" pos:end="235:7">err</name> <operator pos:start="235:9" pos:end="235:9">=</operator> <call pos:start="235:11" pos:end="235:22"><name pos:start="235:11" pos:end="235:17">AVERROR</name><argument_list pos:start="235:18" pos:end="235:22">(<argument pos:start="235:19" pos:end="235:21"><expr pos:start="235:19" pos:end="235:21"><name pos:start="235:19" pos:end="235:21">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="237:1" pos:end="237:5"><name pos:start="237:1" pos:end="237:4">fail</name>:</label>


    <return pos:start="240:5" pos:end="240:15">return <expr pos:start="240:12" pos:end="240:14"><name pos:start="240:12" pos:end="240:14">err</name></expr>;</return>

</block_content>}</block></function></unit>
