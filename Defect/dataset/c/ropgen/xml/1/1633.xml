<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1633.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:25"><name pos:start="1:1" pos:end="1:10">do_command</name><argument_list pos:start="1:11" pos:end="5:25">(<argument pos:start="1:12" pos:end="1:29">GIOChannel *source</argument>,

           <argument pos:start="3:12" pos:end="3:33">GIOCondition condition</argument>,

           <argument pos:start="5:12" pos:end="5:24">gpointer data</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="266:1">{<block_content pos:start="9:5" pos:end="264:16">

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:16">string</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18">VCardEmulError</name></type> <name pos:start="11:20" pos:end="11:24">error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:23"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:19">unsigned</name> <name pos:start="13:21" pos:end="13:23">int</name></type> <name pos:start="13:25" pos:end="13:41">default_reader_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:26">reader_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">VReader</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:19">reader</name> <init pos:start="17:21" pos:end="17:26">= <expr pos:start="17:23" pos:end="17:26"><name pos:start="17:23" pos:end="17:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">GError</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:15">err</name> <init pos:start="19:17" pos:end="19:22">= <expr pos:start="19:19" pos:end="19:22"><name pos:start="19:19" pos:end="19:22">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><call pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:12">g_assert</name><argument_list pos:start="23:13" pos:end="23:33">(<argument pos:start="23:14" pos:end="23:32"><expr pos:start="23:14" pos:end="23:32"><name pos:start="23:14" pos:end="23:22">condition</name> <operator pos:start="23:24" pos:end="23:24">&amp;</operator> <name pos:start="23:26" pos:end="23:32">G_IO_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:13">reader_id</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:33">default_reader_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:62"><expr pos:start="29:5" pos:end="29:61"><call pos:start="29:5" pos:end="29:61"><name pos:start="29:5" pos:end="29:26">g_io_channel_read_line</name><argument_list pos:start="29:27" pos:end="29:61">(<argument pos:start="29:28" pos:end="29:33"><expr pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:33">source</name></expr></argument>, <argument pos:start="29:36" pos:end="29:42"><expr pos:start="29:36" pos:end="29:42"><operator pos:start="29:36" pos:end="29:36">&amp;</operator><name pos:start="29:37" pos:end="29:42">string</name></expr></argument>, <argument pos:start="29:45" pos:end="29:48"><expr pos:start="29:45" pos:end="29:48"><name pos:start="29:45" pos:end="29:48">NULL</name></expr></argument>, <argument pos:start="29:51" pos:end="29:54"><expr pos:start="29:51" pos:end="29:54"><name pos:start="29:51" pos:end="29:54">NULL</name></expr></argument>, <argument pos:start="29:57" pos:end="29:60"><expr pos:start="29:57" pos:end="29:60"><operator pos:start="29:57" pos:end="29:57">&amp;</operator><name pos:start="29:58" pos:end="29:60">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">err</name> <operator pos:start="31:13" pos:end="31:14">!=</operator> <name pos:start="31:16" pos:end="31:19">NULL</name></expr>)</condition> <block pos:start="31:22" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:65">

        <expr_stmt pos:start="33:9" pos:end="33:65"><expr pos:start="33:9" pos:end="33:64"><call pos:start="33:9" pos:end="33:64"><name pos:start="33:9" pos:end="33:15">g_error</name><argument_list pos:start="33:16" pos:end="33:64">(<argument pos:start="33:17" pos:end="33:49"><expr pos:start="33:17" pos:end="33:49"><literal type="string" pos:start="33:17" pos:end="33:49">"Error while reading command: %s"</literal></expr></argument>, <argument pos:start="33:52" pos:end="33:63"><expr pos:start="33:52" pos:end="33:63"><name pos:start="33:52" pos:end="33:63"><name pos:start="33:52" pos:end="33:54">err</name><operator pos:start="33:55" pos:end="33:56">-&gt;</operator><name pos:start="33:57" pos:end="33:63">message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="254:5"><if pos:start="39:5" pos:end="254:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:14">string</name> <operator pos:start="39:16" pos:end="39:17">!=</operator> <name pos:start="39:19" pos:end="39:22">NULL</name></expr>)</condition> <block pos:start="39:25" pos:end="254:5">{<block_content pos:start="41:9" pos:end="252:9">

        <if_stmt pos:start="41:9" pos:end="252:9"><if pos:start="41:9" pos:end="83:9">if <condition pos:start="41:12" pos:end="41:44">(<expr pos:start="41:13" pos:end="41:43"><call pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:19">strncmp</name><argument_list pos:start="41:20" pos:end="41:38">(<argument pos:start="41:21" pos:end="41:26"><expr pos:start="41:21" pos:end="41:26"><name pos:start="41:21" pos:end="41:26">string</name></expr></argument>, <argument pos:start="41:29" pos:end="41:34"><expr pos:start="41:29" pos:end="41:34"><literal type="string" pos:start="41:29" pos:end="41:34">"exit"</literal></expr></argument>, <argument pos:start="41:37" pos:end="41:37"><expr pos:start="41:37" pos:end="41:37"><literal type="number" pos:start="41:37" pos:end="41:37">4</literal></expr></argument>)</argument_list></call> <operator pos:start="41:40" pos:end="41:41">==</operator> <literal type="number" pos:start="41:43" pos:end="41:43">0</literal></expr>)</condition> <block pos:start="41:46" pos:end="83:9">{<block_content pos:start="45:13" pos:end="81:20">

            <comment type="block" pos:start="43:13" pos:end="43:40">/* remove all the readers */</comment>

            <decl_stmt pos:start="45:13" pos:end="45:58"><decl pos:start="45:13" pos:end="45:57"><type pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:23">VReaderList</name> <modifier pos:start="45:25" pos:end="45:25">*</modifier></type><name pos:start="45:26" pos:end="45:29">list</name> <init pos:start="45:31" pos:end="45:57">= <expr pos:start="45:33" pos:end="45:57"><call pos:start="45:33" pos:end="45:57"><name pos:start="45:33" pos:end="45:55">vreader_get_reader_list</name><argument_list pos:start="45:56" pos:end="45:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="47:13" pos:end="47:43"><decl pos:start="47:13" pos:end="47:42"><type pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:28">VReaderListEntry</name> <modifier pos:start="47:30" pos:end="47:30">*</modifier></type><name pos:start="47:31" pos:end="47:42">reader_entry</name></decl>;</decl_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:40"><expr pos:start="49:13" pos:end="49:39"><call pos:start="49:13" pos:end="49:39"><name pos:start="49:13" pos:end="49:18">printf</name><argument_list pos:start="49:19" pos:end="49:39">(<argument pos:start="49:20" pos:end="49:38"><expr pos:start="49:20" pos:end="49:38"><literal type="string" pos:start="49:20" pos:end="49:38">"Active Readers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="51:13" pos:end="79:13">for <control pos:start="51:17" pos:end="53:68">(<init pos:start="51:18" pos:end="51:61"><expr pos:start="51:18" pos:end="51:60"><name pos:start="51:18" pos:end="51:29">reader_entry</name> <operator pos:start="51:31" pos:end="51:31">=</operator> <call pos:start="51:33" pos:end="51:60"><name pos:start="51:33" pos:end="51:54">vreader_list_get_first</name><argument_list pos:start="51:55" pos:end="51:60">(<argument pos:start="51:56" pos:end="51:59"><expr pos:start="51:56" pos:end="51:59"><name pos:start="51:56" pos:end="51:59">list</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="51:63" pos:end="51:75"><expr pos:start="51:63" pos:end="51:74"><name pos:start="51:63" pos:end="51:74">reader_entry</name></expr>;</condition>

                 <incr pos:start="53:18" pos:end="53:67"><expr pos:start="53:18" pos:end="53:67"><name pos:start="53:18" pos:end="53:29">reader_entry</name> <operator pos:start="53:31" pos:end="53:31">=</operator> <call pos:start="53:33" pos:end="53:67"><name pos:start="53:33" pos:end="53:53">vreader_list_get_next</name><argument_list pos:start="53:54" pos:end="53:67">(<argument pos:start="53:55" pos:end="53:66"><expr pos:start="53:55" pos:end="53:66"><name pos:start="53:55" pos:end="53:66">reader_entry</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="53:70" pos:end="79:13">{<block_content pos:start="55:17" pos:end="77:63">

                <decl_stmt pos:start="55:17" pos:end="55:72"><decl pos:start="55:17" pos:end="55:71"><type pos:start="55:17" pos:end="55:25"><name pos:start="55:17" pos:end="55:23">VReader</name> <modifier pos:start="55:25" pos:end="55:25">*</modifier></type><name pos:start="55:26" pos:end="55:31">reader</name> <init pos:start="55:33" pos:end="55:71">= <expr pos:start="55:35" pos:end="55:71"><call pos:start="55:35" pos:end="55:71"><name pos:start="55:35" pos:end="55:57">vreader_list_get_reader</name><argument_list pos:start="55:58" pos:end="55:71">(<argument pos:start="55:59" pos:end="55:70"><expr pos:start="55:59" pos:end="55:70"><name pos:start="55:59" pos:end="55:70">reader_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="57:17" pos:end="57:39"><decl pos:start="57:17" pos:end="57:38"><type pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:28">vreader_id_t</name></type> <name pos:start="57:30" pos:end="57:38">reader_id</name></decl>;</decl_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:51"><expr pos:start="59:17" pos:end="59:50"><name pos:start="59:17" pos:end="59:25">reader_id</name> <operator pos:start="59:27" pos:end="59:27">=</operator> <call pos:start="59:29" pos:end="59:50"><name pos:start="59:29" pos:end="59:42">vreader_get_id</name><argument_list pos:start="59:43" pos:end="59:50">(<argument pos:start="59:44" pos:end="59:49"><expr pos:start="59:44" pos:end="59:49"><name pos:start="59:44" pos:end="59:49">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="61:17" pos:end="65:17"><if pos:start="61:17" pos:end="65:17">if <condition pos:start="61:20" pos:end="61:36">(<expr pos:start="61:21" pos:end="61:35"><name pos:start="61:21" pos:end="61:29">reader_id</name> <operator pos:start="61:31" pos:end="61:32">==</operator> <operator pos:start="61:34" pos:end="61:34">-</operator><literal type="number" pos:start="61:35" pos:end="61:35">1</literal></expr>)</condition> <block pos:start="61:38" pos:end="65:17">{<block_content pos:start="63:21" pos:end="63:29">

                    <continue pos:start="63:21" pos:end="63:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="67:17" pos:end="69:37">/* be nice and signal card removal first (qemu probably should

                 * do this itself) */</comment>

                <if_stmt pos:start="71:17" pos:end="75:17"><if pos:start="71:17" pos:end="75:17">if <condition pos:start="71:20" pos:end="71:66">(<expr pos:start="71:21" pos:end="71:65"><call pos:start="71:21" pos:end="71:51"><name pos:start="71:21" pos:end="71:43">vreader_card_is_present</name><argument_list pos:start="71:44" pos:end="71:51">(<argument pos:start="71:45" pos:end="71:50"><expr pos:start="71:45" pos:end="71:50"><name pos:start="71:45" pos:end="71:50">reader</name></expr></argument>)</argument_list></call> <operator pos:start="71:53" pos:end="71:54">==</operator> <name pos:start="71:56" pos:end="71:65">VREADER_OK</name></expr>)</condition> <block pos:start="71:68" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:65">

                    <expr_stmt pos:start="73:21" pos:end="73:65"><expr pos:start="73:21" pos:end="73:64"><call pos:start="73:21" pos:end="73:64"><name pos:start="73:21" pos:end="73:28">send_msg</name><argument_list pos:start="73:29" pos:end="73:64">(<argument pos:start="73:30" pos:end="73:43"><expr pos:start="73:30" pos:end="73:43"><name pos:start="73:30" pos:end="73:43">VSC_CardRemove</name></expr></argument>, <argument pos:start="73:46" pos:end="73:54"><expr pos:start="73:46" pos:end="73:54"><name pos:start="73:46" pos:end="73:54">reader_id</name></expr></argument>, <argument pos:start="73:57" pos:end="73:60"><expr pos:start="73:57" pos:end="73:60"><name pos:start="73:57" pos:end="73:60">NULL</name></expr></argument>, <argument pos:start="73:63" pos:end="73:63"><expr pos:start="73:63" pos:end="73:63"><literal type="number" pos:start="73:63" pos:end="73:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:63"><expr pos:start="77:17" pos:end="77:62"><call pos:start="77:17" pos:end="77:62"><name pos:start="77:17" pos:end="77:24">send_msg</name><argument_list pos:start="77:25" pos:end="77:62">(<argument pos:start="77:26" pos:end="77:41"><expr pos:start="77:26" pos:end="77:41"><name pos:start="77:26" pos:end="77:41">VSC_ReaderRemove</name></expr></argument>, <argument pos:start="77:44" pos:end="77:52"><expr pos:start="77:44" pos:end="77:52"><name pos:start="77:44" pos:end="77:52">reader_id</name></expr></argument>, <argument pos:start="77:55" pos:end="77:58"><expr pos:start="77:55" pos:end="77:58"><name pos:start="77:55" pos:end="77:58">NULL</name></expr></argument>, <argument pos:start="77:61" pos:end="77:61"><expr pos:start="77:61" pos:end="77:61"><literal type="number" pos:start="77:61" pos:end="77:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="81:13" pos:end="81:20"><expr pos:start="81:13" pos:end="81:19"><call pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:16">exit</name><argument_list pos:start="81:17" pos:end="81:19">(<argument pos:start="81:18" pos:end="81:18"><expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="107:9">else if <condition pos:start="83:19" pos:end="83:53">(<expr pos:start="83:20" pos:end="83:52"><call pos:start="83:20" pos:end="83:47"><name pos:start="83:20" pos:end="83:26">strncmp</name><argument_list pos:start="83:27" pos:end="83:47">(<argument pos:start="83:28" pos:end="83:33"><expr pos:start="83:28" pos:end="83:33"><name pos:start="83:28" pos:end="83:33">string</name></expr></argument>, <argument pos:start="83:36" pos:end="83:43"><expr pos:start="83:36" pos:end="83:43"><literal type="string" pos:start="83:36" pos:end="83:43">"insert"</literal></expr></argument>, <argument pos:start="83:46" pos:end="83:46"><expr pos:start="83:46" pos:end="83:46"><literal type="number" pos:start="83:46" pos:end="83:46">6</literal></expr></argument>)</argument_list></call> <operator pos:start="83:49" pos:end="83:50">==</operator> <literal type="number" pos:start="83:52" pos:end="83:52">0</literal></expr>)</condition> <block pos:start="83:55" pos:end="107:9">{<block_content pos:start="85:13" pos:end="105:13">

            <if_stmt pos:start="85:13" pos:end="89:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:33">(<expr pos:start="85:17" pos:end="85:32"><name pos:start="85:17" pos:end="85:25"><name pos:start="85:17" pos:end="85:22">string</name><index pos:start="85:23" pos:end="85:25">[<expr pos:start="85:24" pos:end="85:24"><literal type="number" pos:start="85:24" pos:end="85:24">6</literal></expr>]</index></name> <operator pos:start="85:27" pos:end="85:28">==</operator> <literal type="char" pos:start="85:30" pos:end="85:32">' '</literal></expr>)</condition> <block pos:start="85:35" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:70">

                <expr_stmt pos:start="87:17" pos:end="87:70"><expr pos:start="87:17" pos:end="87:69"><name pos:start="87:17" pos:end="87:25">reader_id</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <call pos:start="87:29" pos:end="87:69"><name pos:start="87:29" pos:end="87:46">get_id_from_string</name><argument_list pos:start="87:47" pos:end="87:69">(<argument pos:start="87:48" pos:end="87:57"><expr pos:start="87:48" pos:end="87:57"><operator pos:start="87:48" pos:end="87:48">&amp;</operator><name pos:start="87:49" pos:end="87:57"><name pos:start="87:49" pos:end="87:54">string</name><index pos:start="87:55" pos:end="87:57">[<expr pos:start="87:56" pos:end="87:56"><literal type="number" pos:start="87:56" pos:end="87:56">7</literal></expr>]</index></name></expr></argument>, <argument pos:start="87:60" pos:end="87:68"><expr pos:start="87:60" pos:end="87:68"><name pos:start="87:60" pos:end="87:68">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:57"><expr pos:start="91:13" pos:end="91:56"><name pos:start="91:13" pos:end="91:18">reader</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <call pos:start="91:22" pos:end="91:56"><name pos:start="91:22" pos:end="91:45">vreader_get_reader_by_id</name><argument_list pos:start="91:46" pos:end="91:56">(<argument pos:start="91:47" pos:end="91:55"><expr pos:start="91:47" pos:end="91:55"><name pos:start="91:47" pos:end="91:55">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="105:13"><if pos:start="93:13" pos:end="101:13">if <condition pos:start="93:16" pos:end="93:31">(<expr pos:start="93:17" pos:end="93:30"><name pos:start="93:17" pos:end="93:22">reader</name> <operator pos:start="93:24" pos:end="93:25">!=</operator> <name pos:start="93:27" pos:end="93:30">NULL</name></expr>)</condition> <block pos:start="93:33" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:56">

                <expr_stmt pos:start="95:17" pos:end="95:61"><expr pos:start="95:17" pos:end="95:60"><name pos:start="95:17" pos:end="95:21">error</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <call pos:start="95:25" pos:end="95:60"><name pos:start="95:25" pos:end="95:52">vcard_emul_force_card_insert</name><argument_list pos:start="95:53" pos:end="95:60">(<argument pos:start="95:54" pos:end="95:59"><expr pos:start="95:54" pos:end="95:59"><name pos:start="95:54" pos:end="95:59">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="99:56"><expr pos:start="97:17" pos:end="99:55"><call pos:start="97:17" pos:end="99:55"><name pos:start="97:17" pos:end="97:22">printf</name><argument_list pos:start="97:23" pos:end="99:55">(<argument pos:start="97:24" pos:end="97:49"><expr pos:start="97:24" pos:end="97:49"><literal type="string" pos:start="97:24" pos:end="97:49">"insert %s, returned %d\n"</literal></expr></argument>,

                       <argument pos:start="99:24" pos:end="99:47"><expr pos:start="99:24" pos:end="99:47"><call pos:start="99:24" pos:end="99:47"><name pos:start="99:24" pos:end="99:39">vreader_get_name</name><argument_list pos:start="99:40" pos:end="99:47">(<argument pos:start="99:41" pos:end="99:46"><expr pos:start="99:41" pos:end="99:46"><name pos:start="99:41" pos:end="99:46">reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:50" pos:end="99:54"><expr pos:start="99:50" pos:end="99:54"><name pos:start="99:50" pos:end="99:54">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="105:13">else <block pos:start="101:20" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:64">

                <expr_stmt pos:start="103:17" pos:end="103:64"><expr pos:start="103:17" pos:end="103:63"><call pos:start="103:17" pos:end="103:63"><name pos:start="103:17" pos:end="103:22">printf</name><argument_list pos:start="103:23" pos:end="103:63">(<argument pos:start="103:24" pos:end="103:51"><expr pos:start="103:24" pos:end="103:51"><literal type="string" pos:start="103:24" pos:end="103:51">"no reader by id %u found\n"</literal></expr></argument>, <argument pos:start="103:54" pos:end="103:62"><expr pos:start="103:54" pos:end="103:62"><name pos:start="103:54" pos:end="103:62">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="131:9">else if <condition pos:start="107:19" pos:end="107:53">(<expr pos:start="107:20" pos:end="107:52"><call pos:start="107:20" pos:end="107:47"><name pos:start="107:20" pos:end="107:26">strncmp</name><argument_list pos:start="107:27" pos:end="107:47">(<argument pos:start="107:28" pos:end="107:33"><expr pos:start="107:28" pos:end="107:33"><name pos:start="107:28" pos:end="107:33">string</name></expr></argument>, <argument pos:start="107:36" pos:end="107:43"><expr pos:start="107:36" pos:end="107:43"><literal type="string" pos:start="107:36" pos:end="107:43">"remove"</literal></expr></argument>, <argument pos:start="107:46" pos:end="107:46"><expr pos:start="107:46" pos:end="107:46"><literal type="number" pos:start="107:46" pos:end="107:46">6</literal></expr></argument>)</argument_list></call> <operator pos:start="107:49" pos:end="107:50">==</operator> <literal type="number" pos:start="107:52" pos:end="107:52">0</literal></expr>)</condition> <block pos:start="107:55" pos:end="131:9">{<block_content pos:start="109:13" pos:end="129:13">

            <if_stmt pos:start="109:13" pos:end="113:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:33">(<expr pos:start="109:17" pos:end="109:32"><name pos:start="109:17" pos:end="109:25"><name pos:start="109:17" pos:end="109:22">string</name><index pos:start="109:23" pos:end="109:25">[<expr pos:start="109:24" pos:end="109:24"><literal type="number" pos:start="109:24" pos:end="109:24">6</literal></expr>]</index></name> <operator pos:start="109:27" pos:end="109:28">==</operator> <literal type="char" pos:start="109:30" pos:end="109:32">' '</literal></expr>)</condition> <block pos:start="109:35" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:70">

                <expr_stmt pos:start="111:17" pos:end="111:70"><expr pos:start="111:17" pos:end="111:69"><name pos:start="111:17" pos:end="111:25">reader_id</name> <operator pos:start="111:27" pos:end="111:27">=</operator> <call pos:start="111:29" pos:end="111:69"><name pos:start="111:29" pos:end="111:46">get_id_from_string</name><argument_list pos:start="111:47" pos:end="111:69">(<argument pos:start="111:48" pos:end="111:57"><expr pos:start="111:48" pos:end="111:57"><operator pos:start="111:48" pos:end="111:48">&amp;</operator><name pos:start="111:49" pos:end="111:57"><name pos:start="111:49" pos:end="111:54">string</name><index pos:start="111:55" pos:end="111:57">[<expr pos:start="111:56" pos:end="111:56"><literal type="number" pos:start="111:56" pos:end="111:56">7</literal></expr>]</index></name></expr></argument>, <argument pos:start="111:60" pos:end="111:68"><expr pos:start="111:60" pos:end="111:68"><name pos:start="111:60" pos:end="111:68">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:57"><expr pos:start="115:13" pos:end="115:56"><name pos:start="115:13" pos:end="115:18">reader</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <call pos:start="115:22" pos:end="115:56"><name pos:start="115:22" pos:end="115:45">vreader_get_reader_by_id</name><argument_list pos:start="115:46" pos:end="115:56">(<argument pos:start="115:47" pos:end="115:55"><expr pos:start="115:47" pos:end="115:55"><name pos:start="115:47" pos:end="115:55">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="129:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:31">(<expr pos:start="117:17" pos:end="117:30"><name pos:start="117:17" pos:end="117:22">reader</name> <operator pos:start="117:24" pos:end="117:25">!=</operator> <name pos:start="117:27" pos:end="117:30">NULL</name></expr>)</condition> <block pos:start="117:33" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:56">

                <expr_stmt pos:start="119:17" pos:end="119:61"><expr pos:start="119:17" pos:end="119:60"><name pos:start="119:17" pos:end="119:21">error</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="119:60"><name pos:start="119:25" pos:end="119:52">vcard_emul_force_card_remove</name><argument_list pos:start="119:53" pos:end="119:60">(<argument pos:start="119:54" pos:end="119:59"><expr pos:start="119:54" pos:end="119:59"><name pos:start="119:54" pos:end="119:59">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="123:56"><expr pos:start="121:17" pos:end="123:55"><call pos:start="121:17" pos:end="123:55"><name pos:start="121:17" pos:end="121:22">printf</name><argument_list pos:start="121:23" pos:end="123:55">(<argument pos:start="121:24" pos:end="121:49"><expr pos:start="121:24" pos:end="121:49"><literal type="string" pos:start="121:24" pos:end="121:49">"remove %s, returned %d\n"</literal></expr></argument>,

                       <argument pos:start="123:24" pos:end="123:47"><expr pos:start="123:24" pos:end="123:47"><call pos:start="123:24" pos:end="123:47"><name pos:start="123:24" pos:end="123:39">vreader_get_name</name><argument_list pos:start="123:40" pos:end="123:47">(<argument pos:start="123:41" pos:end="123:46"><expr pos:start="123:41" pos:end="123:46"><name pos:start="123:41" pos:end="123:46">reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:50" pos:end="123:54"><expr pos:start="123:50" pos:end="123:54"><name pos:start="123:50" pos:end="123:54">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="129:13">else <block pos:start="125:20" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:64">

                <expr_stmt pos:start="127:17" pos:end="127:64"><expr pos:start="127:17" pos:end="127:63"><call pos:start="127:17" pos:end="127:63"><name pos:start="127:17" pos:end="127:22">printf</name><argument_list pos:start="127:23" pos:end="127:63">(<argument pos:start="127:24" pos:end="127:51"><expr pos:start="127:24" pos:end="127:51"><literal type="string" pos:start="127:24" pos:end="127:51">"no reader by id %u found\n"</literal></expr></argument>, <argument pos:start="127:54" pos:end="127:62"><expr pos:start="127:54" pos:end="127:62"><name pos:start="127:54" pos:end="127:62">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="131:11" pos:end="161:9">else if <condition pos:start="131:19" pos:end="131:53">(<expr pos:start="131:20" pos:end="131:52"><call pos:start="131:20" pos:end="131:47"><name pos:start="131:20" pos:end="131:26">strncmp</name><argument_list pos:start="131:27" pos:end="131:47">(<argument pos:start="131:28" pos:end="131:33"><expr pos:start="131:28" pos:end="131:33"><name pos:start="131:28" pos:end="131:33">string</name></expr></argument>, <argument pos:start="131:36" pos:end="131:43"><expr pos:start="131:36" pos:end="131:43"><literal type="string" pos:start="131:36" pos:end="131:43">"select"</literal></expr></argument>, <argument pos:start="131:46" pos:end="131:46"><expr pos:start="131:46" pos:end="131:46"><literal type="number" pos:start="131:46" pos:end="131:46">6</literal></expr></argument>)</argument_list></call> <operator pos:start="131:49" pos:end="131:50">==</operator> <literal type="number" pos:start="131:52" pos:end="131:52">0</literal></expr>)</condition> <block pos:start="131:55" pos:end="161:9">{<block_content pos:start="133:13" pos:end="159:13">

            <if_stmt pos:start="133:13" pos:end="139:13"><if pos:start="133:13" pos:end="139:13">if <condition pos:start="133:16" pos:end="133:33">(<expr pos:start="133:17" pos:end="133:32"><name pos:start="133:17" pos:end="133:25"><name pos:start="133:17" pos:end="133:22">string</name><index pos:start="133:23" pos:end="133:25">[<expr pos:start="133:24" pos:end="133:24"><literal type="number" pos:start="133:24" pos:end="133:24">6</literal></expr>]</index></name> <operator pos:start="133:27" pos:end="133:28">==</operator> <literal type="char" pos:start="133:30" pos:end="133:32">' '</literal></expr>)</condition> <block pos:start="133:35" pos:end="139:13">{<block_content pos:start="135:17" pos:end="137:75">

                <expr_stmt pos:start="135:17" pos:end="137:75"><expr pos:start="135:17" pos:end="137:74"><name pos:start="135:17" pos:end="135:25">reader_id</name> <operator pos:start="135:27" pos:end="135:27">=</operator> <call pos:start="135:29" pos:end="137:74"><name pos:start="135:29" pos:end="135:46">get_id_from_string</name><argument_list pos:start="135:47" pos:end="137:74">(<argument pos:start="135:48" pos:end="135:57"><expr pos:start="135:48" pos:end="135:57"><operator pos:start="135:48" pos:end="135:48">&amp;</operator><name pos:start="135:49" pos:end="135:57"><name pos:start="135:49" pos:end="135:54">string</name><index pos:start="135:55" pos:end="135:57">[<expr pos:start="135:56" pos:end="135:56"><literal type="number" pos:start="135:56" pos:end="135:56">7</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="137:48" pos:end="137:73"><expr pos:start="137:48" pos:end="137:73"><name pos:start="137:48" pos:end="137:73">VSCARD_UNDEFINED_READER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="141:13" pos:end="145:13"><if pos:start="141:13" pos:end="145:13">if <condition pos:start="141:16" pos:end="141:56">(<expr pos:start="141:17" pos:end="141:55"><name pos:start="141:17" pos:end="141:25">reader_id</name> <operator pos:start="141:27" pos:end="141:28">!=</operator> <name pos:start="141:30" pos:end="141:55">VSCARD_UNDEFINED_READER_ID</name></expr>)</condition> <block pos:start="141:58" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:61">

                <expr_stmt pos:start="143:17" pos:end="143:61"><expr pos:start="143:17" pos:end="143:60"><name pos:start="143:17" pos:end="143:22">reader</name> <operator pos:start="143:24" pos:end="143:24">=</operator> <call pos:start="143:26" pos:end="143:60"><name pos:start="143:26" pos:end="143:49">vreader_get_reader_by_id</name><argument_list pos:start="143:50" pos:end="143:60">(<argument pos:start="143:51" pos:end="143:59"><expr pos:start="143:51" pos:end="143:59"><name pos:start="143:51" pos:end="143:59">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="147:13" pos:end="159:13"><if pos:start="147:13" pos:end="155:13">if <condition pos:start="147:16" pos:end="147:23">(<expr pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:22">reader</name></expr>)</condition> <block pos:start="147:25" pos:end="155:13">{<block_content pos:start="149:17" pos:end="153:46">

                <expr_stmt pos:start="149:17" pos:end="151:50"><expr pos:start="149:17" pos:end="151:49"><call pos:start="149:17" pos:end="151:49"><name pos:start="149:17" pos:end="149:22">printf</name><argument_list pos:start="149:23" pos:end="151:49">(<argument pos:start="149:24" pos:end="149:50"><expr pos:start="149:24" pos:end="149:50"><literal type="string" pos:start="149:24" pos:end="149:50">"Selecting reader %u, %s\n"</literal></expr></argument>, <argument pos:start="149:53" pos:end="149:61"><expr pos:start="149:53" pos:end="149:61"><name pos:start="149:53" pos:end="149:61">reader_id</name></expr></argument>,

                        <argument pos:start="151:25" pos:end="151:48"><expr pos:start="151:25" pos:end="151:48"><call pos:start="151:25" pos:end="151:48"><name pos:start="151:25" pos:end="151:40">vreader_get_name</name><argument_list pos:start="151:41" pos:end="151:48">(<argument pos:start="151:42" pos:end="151:47"><expr pos:start="151:42" pos:end="151:47"><name pos:start="151:42" pos:end="151:47">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:46"><expr pos:start="153:17" pos:end="153:45"><name pos:start="153:17" pos:end="153:33">default_reader_id</name> <operator pos:start="153:35" pos:end="153:35">=</operator> <name pos:start="153:37" pos:end="153:45">reader_id</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="155:15" pos:end="159:13">else <block pos:start="155:20" pos:end="159:13">{<block_content pos:start="157:17" pos:end="157:67">

                <expr_stmt pos:start="157:17" pos:end="157:67"><expr pos:start="157:17" pos:end="157:66"><call pos:start="157:17" pos:end="157:66"><name pos:start="157:17" pos:end="157:22">printf</name><argument_list pos:start="157:23" pos:end="157:66">(<argument pos:start="157:24" pos:end="157:54"><expr pos:start="157:24" pos:end="157:54"><literal type="string" pos:start="157:24" pos:end="157:54">"Reader with id %u not found\n"</literal></expr></argument>, <argument pos:start="157:57" pos:end="157:65"><expr pos:start="157:57" pos:end="157:65"><name pos:start="157:57" pos:end="157:65">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="161:11" pos:end="171:9">else if <condition pos:start="161:19" pos:end="161:52">(<expr pos:start="161:20" pos:end="161:51"><call pos:start="161:20" pos:end="161:46"><name pos:start="161:20" pos:end="161:26">strncmp</name><argument_list pos:start="161:27" pos:end="161:46">(<argument pos:start="161:28" pos:end="161:33"><expr pos:start="161:28" pos:end="161:33"><name pos:start="161:28" pos:end="161:33">string</name></expr></argument>, <argument pos:start="161:36" pos:end="161:42"><expr pos:start="161:36" pos:end="161:42"><literal type="string" pos:start="161:36" pos:end="161:42">"debug"</literal></expr></argument>, <argument pos:start="161:45" pos:end="161:45"><expr pos:start="161:45" pos:end="161:45"><literal type="number" pos:start="161:45" pos:end="161:45">5</literal></expr></argument>)</argument_list></call> <operator pos:start="161:48" pos:end="161:49">==</operator> <literal type="number" pos:start="161:51" pos:end="161:51">0</literal></expr>)</condition> <block pos:start="161:54" pos:end="171:9">{<block_content pos:start="163:13" pos:end="169:50">

            <if_stmt pos:start="163:13" pos:end="167:13"><if pos:start="163:13" pos:end="167:13">if <condition pos:start="163:16" pos:end="163:33">(<expr pos:start="163:17" pos:end="163:32"><name pos:start="163:17" pos:end="163:25"><name pos:start="163:17" pos:end="163:22">string</name><index pos:start="163:23" pos:end="163:25">[<expr pos:start="163:24" pos:end="163:24"><literal type="number" pos:start="163:24" pos:end="163:24">5</literal></expr>]</index></name> <operator pos:start="163:27" pos:end="163:28">==</operator> <literal type="char" pos:start="163:30" pos:end="163:32">' '</literal></expr>)</condition> <block pos:start="163:35" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:60">

                <expr_stmt pos:start="165:17" pos:end="165:60"><expr pos:start="165:17" pos:end="165:59"><name pos:start="165:17" pos:end="165:23">verbose</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <call pos:start="165:27" pos:end="165:59"><name pos:start="165:27" pos:end="165:44">get_id_from_string</name><argument_list pos:start="165:45" pos:end="165:59">(<argument pos:start="165:46" pos:end="165:55"><expr pos:start="165:46" pos:end="165:55"><operator pos:start="165:46" pos:end="165:46">&amp;</operator><name pos:start="165:47" pos:end="165:55"><name pos:start="165:47" pos:end="165:52">string</name><index pos:start="165:53" pos:end="165:55">[<expr pos:start="165:54" pos:end="165:54"><literal type="number" pos:start="165:54" pos:end="165:54">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:58" pos:end="165:58"><expr pos:start="165:58" pos:end="165:58"><literal type="number" pos:start="165:58" pos:end="165:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:50"><expr pos:start="169:13" pos:end="169:49"><call pos:start="169:13" pos:end="169:49"><name pos:start="169:13" pos:end="169:18">printf</name><argument_list pos:start="169:19" pos:end="169:49">(<argument pos:start="169:20" pos:end="169:39"><expr pos:start="169:20" pos:end="169:39"><literal type="string" pos:start="169:20" pos:end="169:39">"debug level = %d\n"</literal></expr></argument>, <argument pos:start="169:42" pos:end="169:48"><expr pos:start="169:42" pos:end="169:48"><name pos:start="169:42" pos:end="169:48">verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="171:11" pos:end="236:9">else if <condition pos:start="171:19" pos:end="171:51">(<expr pos:start="171:20" pos:end="171:50"><call pos:start="171:20" pos:end="171:45"><name pos:start="171:20" pos:end="171:26">strncmp</name><argument_list pos:start="171:27" pos:end="171:45">(<argument pos:start="171:28" pos:end="171:33"><expr pos:start="171:28" pos:end="171:33"><name pos:start="171:28" pos:end="171:33">string</name></expr></argument>, <argument pos:start="171:36" pos:end="171:41"><expr pos:start="171:36" pos:end="171:41"><literal type="string" pos:start="171:36" pos:end="171:41">"list"</literal></expr></argument>, <argument pos:start="171:44" pos:end="171:44"><expr pos:start="171:44" pos:end="171:44"><literal type="number" pos:start="171:44" pos:end="171:44">4</literal></expr></argument>)</argument_list></call> <operator pos:start="171:47" pos:end="171:48">==</operator> <literal type="number" pos:start="171:50" pos:end="171:50">0</literal></expr>)</condition> <block pos:start="171:53" pos:end="236:9">{<block_content pos:start="173:13" pos:end="233:13">

            <decl_stmt pos:start="173:13" pos:end="173:58"><decl pos:start="173:13" pos:end="173:57"><type pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:23">VReaderList</name> <modifier pos:start="173:25" pos:end="173:25">*</modifier></type><name pos:start="173:26" pos:end="173:29">list</name> <init pos:start="173:31" pos:end="173:57">= <expr pos:start="173:33" pos:end="173:57"><call pos:start="173:33" pos:end="173:57"><name pos:start="173:33" pos:end="173:55">vreader_get_reader_list</name><argument_list pos:start="173:56" pos:end="173:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="175:13" pos:end="175:43"><decl pos:start="175:13" pos:end="175:42"><type pos:start="175:13" pos:end="175:30"><name pos:start="175:13" pos:end="175:28">VReaderListEntry</name> <modifier pos:start="175:30" pos:end="175:30">*</modifier></type><name pos:start="175:31" pos:end="175:42">reader_entry</name></decl>;</decl_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:40"><expr pos:start="177:13" pos:end="177:39"><call pos:start="177:13" pos:end="177:39"><name pos:start="177:13" pos:end="177:18">printf</name><argument_list pos:start="177:19" pos:end="177:39">(<argument pos:start="177:20" pos:end="177:38"><expr pos:start="177:20" pos:end="177:38"><literal type="string" pos:start="177:20" pos:end="177:38">"Active Readers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="179:13" pos:end="203:13">for <control pos:start="179:17" pos:end="181:68">(<init pos:start="179:18" pos:end="179:61"><expr pos:start="179:18" pos:end="179:60"><name pos:start="179:18" pos:end="179:29">reader_entry</name> <operator pos:start="179:31" pos:end="179:31">=</operator> <call pos:start="179:33" pos:end="179:60"><name pos:start="179:33" pos:end="179:54">vreader_list_get_first</name><argument_list pos:start="179:55" pos:end="179:60">(<argument pos:start="179:56" pos:end="179:59"><expr pos:start="179:56" pos:end="179:59"><name pos:start="179:56" pos:end="179:59">list</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="179:63" pos:end="179:75"><expr pos:start="179:63" pos:end="179:74"><name pos:start="179:63" pos:end="179:74">reader_entry</name></expr>;</condition>

                 <incr pos:start="181:18" pos:end="181:67"><expr pos:start="181:18" pos:end="181:67"><name pos:start="181:18" pos:end="181:29">reader_entry</name> <operator pos:start="181:31" pos:end="181:31">=</operator> <call pos:start="181:33" pos:end="181:67"><name pos:start="181:33" pos:end="181:53">vreader_list_get_next</name><argument_list pos:start="181:54" pos:end="181:67">(<argument pos:start="181:55" pos:end="181:66"><expr pos:start="181:55" pos:end="181:66"><name pos:start="181:55" pos:end="181:66">reader_entry</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="181:70" pos:end="203:13">{<block_content pos:start="183:17" pos:end="201:49">

                <decl_stmt pos:start="183:17" pos:end="183:72"><decl pos:start="183:17" pos:end="183:71"><type pos:start="183:17" pos:end="183:25"><name pos:start="183:17" pos:end="183:23">VReader</name> <modifier pos:start="183:25" pos:end="183:25">*</modifier></type><name pos:start="183:26" pos:end="183:31">reader</name> <init pos:start="183:33" pos:end="183:71">= <expr pos:start="183:35" pos:end="183:71"><call pos:start="183:35" pos:end="183:71"><name pos:start="183:35" pos:end="183:57">vreader_list_get_reader</name><argument_list pos:start="183:58" pos:end="183:71">(<argument pos:start="183:59" pos:end="183:70"><expr pos:start="183:59" pos:end="183:70"><name pos:start="183:59" pos:end="183:70">reader_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="185:17" pos:end="185:39"><decl pos:start="185:17" pos:end="185:38"><type pos:start="185:17" pos:end="185:28"><name pos:start="185:17" pos:end="185:28">vreader_id_t</name></type> <name pos:start="185:30" pos:end="185:38">reader_id</name></decl>;</decl_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:51"><expr pos:start="187:17" pos:end="187:50"><name pos:start="187:17" pos:end="187:25">reader_id</name> <operator pos:start="187:27" pos:end="187:27">=</operator> <call pos:start="187:29" pos:end="187:50"><name pos:start="187:29" pos:end="187:42">vreader_get_id</name><argument_list pos:start="187:43" pos:end="187:50">(<argument pos:start="187:44" pos:end="187:49"><expr pos:start="187:44" pos:end="187:49"><name pos:start="187:44" pos:end="187:49">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="189:17" pos:end="193:17"><if pos:start="189:17" pos:end="193:17">if <condition pos:start="189:20" pos:end="189:36">(<expr pos:start="189:21" pos:end="189:35"><name pos:start="189:21" pos:end="189:29">reader_id</name> <operator pos:start="189:31" pos:end="189:32">==</operator> <operator pos:start="189:34" pos:end="189:34">-</operator><literal type="number" pos:start="189:35" pos:end="189:35">1</literal></expr>)</condition> <block pos:start="189:38" pos:end="193:17">{<block_content pos:start="191:21" pos:end="191:29">

                    <continue pos:start="191:21" pos:end="191:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="195:17" pos:end="201:49"><expr pos:start="195:17" pos:end="201:48"><call pos:start="195:17" pos:end="201:48"><name pos:start="195:17" pos:end="195:22">printf</name><argument_list pos:start="195:23" pos:end="201:48">(<argument pos:start="195:24" pos:end="195:36"><expr pos:start="195:24" pos:end="195:36"><literal type="string" pos:start="195:24" pos:end="195:36">"%3u %s %s\n"</literal></expr></argument>, <argument pos:start="195:39" pos:end="195:47"><expr pos:start="195:39" pos:end="195:47"><name pos:start="195:39" pos:end="195:47">reader_id</name></expr></argument>,

                       <argument pos:start="197:24" pos:end="199:54"><expr pos:start="197:24" pos:end="199:54"><ternary pos:start="197:24" pos:end="199:54"><condition pos:start="197:24" pos:end="197:70"><expr pos:start="197:24" pos:end="197:68"><call pos:start="197:24" pos:end="197:54"><name pos:start="197:24" pos:end="197:46">vreader_card_is_present</name><argument_list pos:start="197:47" pos:end="197:54">(<argument pos:start="197:48" pos:end="197:53"><expr pos:start="197:48" pos:end="197:53"><name pos:start="197:48" pos:end="197:53">reader</name></expr></argument>)</argument_list></call> <operator pos:start="197:56" pos:end="197:57">==</operator> <name pos:start="197:59" pos:end="197:68">VREADER_OK</name></expr> ?</condition><then pos:start="199:24" pos:end="199:37">

                       <expr pos:start="199:24" pos:end="199:37"><literal type="string" pos:start="199:24" pos:end="199:37">"CARD_PRESENT"</literal></expr> </then><else pos:start="199:39" pos:end="199:54">: <expr pos:start="199:41" pos:end="199:54"><literal type="string" pos:start="199:41" pos:end="199:54">"            "</literal></expr></else></ternary></expr></argument>,

                       <argument pos:start="201:24" pos:end="201:47"><expr pos:start="201:24" pos:end="201:47"><call pos:start="201:24" pos:end="201:47"><name pos:start="201:24" pos:end="201:39">vreader_get_name</name><argument_list pos:start="201:40" pos:end="201:47">(<argument pos:start="201:41" pos:end="201:46"><expr pos:start="201:41" pos:end="201:46"><name pos:start="201:41" pos:end="201:46">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="205:13" pos:end="205:42"><expr pos:start="205:13" pos:end="205:41"><call pos:start="205:13" pos:end="205:41"><name pos:start="205:13" pos:end="205:18">printf</name><argument_list pos:start="205:19" pos:end="205:41">(<argument pos:start="205:20" pos:end="205:40"><expr pos:start="205:20" pos:end="205:40"><literal type="string" pos:start="205:20" pos:end="205:40">"Inactive Readers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="207:13" pos:end="233:13">for <control pos:start="207:17" pos:end="209:68">(<init pos:start="207:18" pos:end="207:61"><expr pos:start="207:18" pos:end="207:60"><name pos:start="207:18" pos:end="207:29">reader_entry</name> <operator pos:start="207:31" pos:end="207:31">=</operator> <call pos:start="207:33" pos:end="207:60"><name pos:start="207:33" pos:end="207:54">vreader_list_get_first</name><argument_list pos:start="207:55" pos:end="207:60">(<argument pos:start="207:56" pos:end="207:59"><expr pos:start="207:56" pos:end="207:59"><name pos:start="207:56" pos:end="207:59">list</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="207:63" pos:end="207:75"><expr pos:start="207:63" pos:end="207:74"><name pos:start="207:63" pos:end="207:74">reader_entry</name></expr>;</condition>

                 <incr pos:start="209:18" pos:end="209:67"><expr pos:start="209:18" pos:end="209:67"><name pos:start="209:18" pos:end="209:29">reader_entry</name> <operator pos:start="209:31" pos:end="209:31">=</operator> <call pos:start="209:33" pos:end="209:67"><name pos:start="209:33" pos:end="209:53">vreader_list_get_next</name><argument_list pos:start="209:54" pos:end="209:67">(<argument pos:start="209:55" pos:end="209:66"><expr pos:start="209:55" pos:end="209:66"><name pos:start="209:55" pos:end="209:66">reader_entry</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="209:70" pos:end="233:13">{<block_content pos:start="211:17" pos:end="231:49">

                <decl_stmt pos:start="211:17" pos:end="211:72"><decl pos:start="211:17" pos:end="211:71"><type pos:start="211:17" pos:end="211:25"><name pos:start="211:17" pos:end="211:23">VReader</name> <modifier pos:start="211:25" pos:end="211:25">*</modifier></type><name pos:start="211:26" pos:end="211:31">reader</name> <init pos:start="211:33" pos:end="211:71">= <expr pos:start="211:35" pos:end="211:71"><call pos:start="211:35" pos:end="211:71"><name pos:start="211:35" pos:end="211:57">vreader_list_get_reader</name><argument_list pos:start="211:58" pos:end="211:71">(<argument pos:start="211:59" pos:end="211:70"><expr pos:start="211:59" pos:end="211:70"><name pos:start="211:59" pos:end="211:70">reader_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="213:17" pos:end="213:39"><decl pos:start="213:17" pos:end="213:38"><type pos:start="213:17" pos:end="213:28"><name pos:start="213:17" pos:end="213:28">vreader_id_t</name></type> <name pos:start="213:30" pos:end="213:38">reader_id</name></decl>;</decl_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:51"><expr pos:start="215:17" pos:end="215:50"><name pos:start="215:17" pos:end="215:25">reader_id</name> <operator pos:start="215:27" pos:end="215:27">=</operator> <call pos:start="215:29" pos:end="215:50"><name pos:start="215:29" pos:end="215:42">vreader_get_id</name><argument_list pos:start="215:43" pos:end="215:50">(<argument pos:start="215:44" pos:end="215:49"><expr pos:start="215:44" pos:end="215:49"><name pos:start="215:44" pos:end="215:49">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="217:17" pos:end="221:17"><if pos:start="217:17" pos:end="221:17">if <condition pos:start="217:20" pos:end="217:36">(<expr pos:start="217:21" pos:end="217:35"><name pos:start="217:21" pos:end="217:29">reader_id</name> <operator pos:start="217:31" pos:end="217:32">!=</operator> <operator pos:start="217:34" pos:end="217:34">-</operator><literal type="number" pos:start="217:35" pos:end="217:35">1</literal></expr>)</condition> <block pos:start="217:38" pos:end="221:17">{<block_content pos:start="219:21" pos:end="219:29">

                    <continue pos:start="219:21" pos:end="219:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="225:17" pos:end="231:49"><expr pos:start="225:17" pos:end="231:48"><call pos:start="225:17" pos:end="231:48"><name pos:start="225:17" pos:end="225:22">printf</name><argument_list pos:start="225:23" pos:end="231:48">(<argument pos:start="225:24" pos:end="225:36"><expr pos:start="225:24" pos:end="225:36"><literal type="string" pos:start="225:24" pos:end="225:36">"INA %s %s\n"</literal></expr></argument>,

                       <argument pos:start="227:24" pos:end="229:54"><expr pos:start="227:24" pos:end="229:54"><ternary pos:start="227:24" pos:end="229:54"><condition pos:start="227:24" pos:end="227:70"><expr pos:start="227:24" pos:end="227:68"><call pos:start="227:24" pos:end="227:54"><name pos:start="227:24" pos:end="227:46">vreader_card_is_present</name><argument_list pos:start="227:47" pos:end="227:54">(<argument pos:start="227:48" pos:end="227:53"><expr pos:start="227:48" pos:end="227:53"><name pos:start="227:48" pos:end="227:53">reader</name></expr></argument>)</argument_list></call> <operator pos:start="227:56" pos:end="227:57">==</operator> <name pos:start="227:59" pos:end="227:68">VREADER_OK</name></expr> ?</condition><then pos:start="229:24" pos:end="229:37">

                       <expr pos:start="229:24" pos:end="229:37"><literal type="string" pos:start="229:24" pos:end="229:37">"CARD_PRESENT"</literal></expr> </then><else pos:start="229:39" pos:end="229:54">: <expr pos:start="229:41" pos:end="229:54"><literal type="string" pos:start="229:41" pos:end="229:54">"            "</literal></expr></else></ternary></expr></argument>,

                       <argument pos:start="231:24" pos:end="231:47"><expr pos:start="231:24" pos:end="231:47"><call pos:start="231:24" pos:end="231:47"><name pos:start="231:24" pos:end="231:39">vreader_get_name</name><argument_list pos:start="231:40" pos:end="231:47">(<argument pos:start="231:41" pos:end="231:46"><expr pos:start="231:41" pos:end="231:46"><name pos:start="231:41" pos:end="231:46">reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>


        </block_content>}</block></if> <if type="elseif" pos:start="236:11" pos:end="252:9">else if <condition pos:start="236:19" pos:end="236:32">(<expr pos:start="236:20" pos:end="236:31"><operator pos:start="236:20" pos:end="236:20">*</operator><name pos:start="236:21" pos:end="236:26">string</name> <operator pos:start="236:28" pos:end="236:29">!=</operator> <literal type="number" pos:start="236:31" pos:end="236:31">0</literal></expr>)</condition> <block pos:start="236:34" pos:end="252:9">{<block_content pos:start="238:13" pos:end="250:29">

            <expr_stmt pos:start="238:13" pos:end="238:40"><expr pos:start="238:13" pos:end="238:39"><call pos:start="238:13" pos:end="238:39"><name pos:start="238:13" pos:end="238:18">printf</name><argument_list pos:start="238:19" pos:end="238:39">(<argument pos:start="238:20" pos:end="238:38"><expr pos:start="238:20" pos:end="238:38"><literal type="string" pos:start="238:20" pos:end="238:38">"valid commands:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="240:13" pos:end="240:43"><expr pos:start="240:13" pos:end="240:42"><call pos:start="240:13" pos:end="240:42"><name pos:start="240:13" pos:end="240:18">printf</name><argument_list pos:start="240:19" pos:end="240:42">(<argument pos:start="240:20" pos:end="240:41"><expr pos:start="240:20" pos:end="240:41"><literal type="string" pos:start="240:20" pos:end="240:41">"insert [reader_id]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="242:13" pos:end="242:43"><expr pos:start="242:13" pos:end="242:42"><call pos:start="242:13" pos:end="242:42"><name pos:start="242:13" pos:end="242:18">printf</name><argument_list pos:start="242:19" pos:end="242:42">(<argument pos:start="242:20" pos:end="242:41"><expr pos:start="242:20" pos:end="242:41"><literal type="string" pos:start="242:20" pos:end="242:41">"remove [reader_id]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="244:13" pos:end="244:41"><expr pos:start="244:13" pos:end="244:40"><call pos:start="244:13" pos:end="244:40"><name pos:start="244:13" pos:end="244:18">printf</name><argument_list pos:start="244:19" pos:end="244:40">(<argument pos:start="244:20" pos:end="244:39"><expr pos:start="244:20" pos:end="244:39"><literal type="string" pos:start="244:20" pos:end="244:39">"select reader_id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="246:13" pos:end="246:29"><expr pos:start="246:13" pos:end="246:28"><call pos:start="246:13" pos:end="246:28"><name pos:start="246:13" pos:end="246:18">printf</name><argument_list pos:start="246:19" pos:end="246:28">(<argument pos:start="246:20" pos:end="246:27"><expr pos:start="246:20" pos:end="246:27"><literal type="string" pos:start="246:20" pos:end="246:27">"list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="248:13" pos:end="248:38"><expr pos:start="248:13" pos:end="248:37"><call pos:start="248:13" pos:end="248:37"><name pos:start="248:13" pos:end="248:18">printf</name><argument_list pos:start="248:19" pos:end="248:37">(<argument pos:start="248:20" pos:end="248:36"><expr pos:start="248:20" pos:end="248:36"><literal type="string" pos:start="248:20" pos:end="248:36">"debug [level]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="250:13" pos:end="250:29"><expr pos:start="250:13" pos:end="250:28"><call pos:start="250:13" pos:end="250:28"><name pos:start="250:13" pos:end="250:18">printf</name><argument_list pos:start="250:19" pos:end="250:28">(<argument pos:start="250:20" pos:end="250:27"><expr pos:start="250:20" pos:end="250:27"><literal type="string" pos:start="250:20" pos:end="250:27">"exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="256:5" pos:end="256:25"><expr pos:start="256:5" pos:end="256:24"><call pos:start="256:5" pos:end="256:24"><name pos:start="256:5" pos:end="256:16">vreader_free</name><argument_list pos:start="256:17" pos:end="256:24">(<argument pos:start="256:18" pos:end="256:23"><expr pos:start="256:18" pos:end="256:23"><name pos:start="256:18" pos:end="256:23">reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="258:5" pos:end="258:17"><expr pos:start="258:5" pos:end="258:16"><call pos:start="258:5" pos:end="258:16"><name pos:start="258:5" pos:end="258:10">printf</name><argument_list pos:start="258:11" pos:end="258:16">(<argument pos:start="258:12" pos:end="258:15"><expr pos:start="258:12" pos:end="258:15"><literal type="string" pos:start="258:12" pos:end="258:15">"&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="260:5" pos:end="260:19"><expr pos:start="260:5" pos:end="260:18"><call pos:start="260:5" pos:end="260:18"><name pos:start="260:5" pos:end="260:10">fflush</name><argument_list pos:start="260:11" pos:end="260:18">(<argument pos:start="260:12" pos:end="260:17"><expr pos:start="260:12" pos:end="260:17"><name pos:start="260:12" pos:end="260:17">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="264:5" pos:end="264:16">return <expr pos:start="264:12" pos:end="264:15"><name pos:start="264:12" pos:end="264:15">TRUE</name></expr>;</return>

</block_content>}</block></unit>
