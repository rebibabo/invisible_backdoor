<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23660.c" pos:tabs="8"><function pos:start="1:1" pos:end="733:73"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">rtl8139_do_receive</name><parameter_list pos:start="1:34" pos:end="1:105">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:48">NetClientState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">nc</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:72"><decl pos:start="1:55" pos:end="1:72"><type pos:start="1:55" pos:end="1:72"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:67">uint8_t</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">buf</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:86"><decl pos:start="1:75" pos:end="1:86"><type pos:start="1:75" pos:end="1:86"><name pos:start="1:75" pos:end="1:80">size_t</name></type> <name pos:start="1:82" pos:end="1:86">size_</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:104"><decl pos:start="1:89" pos:end="1:104"><type pos:start="1:89" pos:end="1:104"><name pos:start="1:89" pos:end="1:91">int</name></type> <name pos:start="1:93" pos:end="1:104">do_interrupt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="733:73">{<block_content pos:start="5:5" pos:end="733:73">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">RTL8139State</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:45">= <expr pos:start="5:23" pos:end="5:45"><call pos:start="5:23" pos:end="5:45"><name pos:start="5:23" pos:end="5:41">qemu_get_nic_opaque</name><argument_list pos:start="5:42" pos:end="5:45">(<argument pos:start="5:43" pos:end="5:44"><expr pos:start="5:43" pos:end="5:44"><name pos:start="5:43" pos:end="5:44">nc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">d</name> <init pos:start="7:18" pos:end="7:32">= <expr pos:start="7:20" pos:end="7:32"><call pos:start="7:20" pos:end="7:32"><name pos:start="7:20" pos:end="7:29">PCI_DEVICE</name><argument_list pos:start="7:30" pos:end="7:32">(<argument pos:start="7:31" pos:end="7:31"><expr pos:start="7:31" pos:end="7:31"><name pos:start="7:31" pos:end="7:31">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="9:5" pos:end="9:63">/* size is the length of the buffer passed to the driver */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name> <init pos:start="11:14" pos:end="11:20">= <expr pos:start="11:16" pos:end="11:20"><name pos:start="11:16" pos:end="11:20">size_</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:28">dot1q_buf</name> <init pos:start="13:30" pos:end="13:35">= <expr pos:start="13:32" pos:end="13:35"><name pos:start="13:32" pos:end="13:35">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:26">packet_header</name> <init pos:start="17:28" pos:end="17:30">= <expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:43"><decl pos:start="21:5" pos:end="21:42"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:42"><name pos:start="21:13" pos:end="21:16">buf1</name><index pos:start="21:17" pos:end="21:42">[<expr pos:start="21:18" pos:end="21:41"><name pos:start="21:18" pos:end="21:29">MIN_BUF_SIZE</name> <operator pos:start="21:31" pos:end="21:31">+</operator> <name pos:start="21:33" pos:end="21:41">VLAN_HLEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="25:47"><decl pos:start="23:5" pos:end="25:46"><type pos:start="23:5" pos:end="23:24"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <specifier pos:start="23:12" pos:end="23:16">const</specifier> <name pos:start="23:18" pos:end="23:24">uint8_t</name></type> <name pos:start="23:26" pos:end="23:45"><name pos:start="23:26" pos:end="23:42">broadcast_macaddr</name><index pos:start="23:43" pos:end="23:45">[<expr pos:start="23:44" pos:end="23:44"><literal type="number" pos:start="23:44" pos:end="23:44">6</literal></expr>]</index></name> <init pos:start="23:47" pos:end="25:46">=

        <expr pos:start="25:9" pos:end="25:46"><block pos:start="25:9" pos:end="25:46">{ <expr pos:start="25:11" pos:end="25:14"><literal type="number" pos:start="25:11" pos:end="25:14">0xff</literal></expr>, <expr pos:start="25:17" pos:end="25:20"><literal type="number" pos:start="25:17" pos:end="25:20">0xff</literal></expr>, <expr pos:start="25:23" pos:end="25:26"><literal type="number" pos:start="25:23" pos:end="25:26">0xff</literal></expr>, <expr pos:start="25:29" pos:end="25:32"><literal type="number" pos:start="25:29" pos:end="25:32">0xff</literal></expr>, <expr pos:start="25:35" pos:end="25:38"><literal type="number" pos:start="25:35" pos:end="25:38">0xff</literal></expr>, <expr pos:start="25:41" pos:end="25:44"><literal type="number" pos:start="25:41" pos:end="25:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:43"><expr pos:start="29:5" pos:end="29:42"><call pos:start="29:5" pos:end="29:42"><name pos:start="29:5" pos:end="29:11">DPRINTF</name><argument_list pos:start="29:12" pos:end="29:42">(<argument pos:start="29:13" pos:end="29:35"><expr pos:start="29:13" pos:end="29:35"><literal type="string" pos:start="29:13" pos:end="29:35">"&gt;&gt;&gt; received len=%d\n"</literal></expr></argument>, <argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><name pos:start="29:38" pos:end="29:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:40">/* test if board clock is stopped */</comment>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:26">(<expr pos:start="35:9" pos:end="35:25"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:25"><name pos:start="35:10" pos:end="35:10">s</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:25">clock_enabled</name></name></expr>)</condition>

    <block pos:start="37:5" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:56"><expr pos:start="39:9" pos:end="39:55"><call pos:start="39:9" pos:end="39:55"><name pos:start="39:9" pos:end="39:15">DPRINTF</name><argument_list pos:start="39:16" pos:end="39:55">(<argument pos:start="39:17" pos:end="39:54"><expr pos:start="39:17" pos:end="39:54"><literal type="string" pos:start="39:17" pos:end="39:54">"stopped ==========================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:44">/* first check if receiver is enabled */</comment>



    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:37">(<expr pos:start="51:9" pos:end="51:36"><operator pos:start="51:9" pos:end="51:9">!</operator><call pos:start="51:10" pos:end="51:36"><name pos:start="51:10" pos:end="51:33">rtl8139_receiver_enabled</name><argument_list pos:start="51:34" pos:end="51:36">(<argument pos:start="51:35" pos:end="51:35"><expr pos:start="51:35" pos:end="51:35"><name pos:start="51:35" pos:end="51:35">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="53:5" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:56"><expr pos:start="55:9" pos:end="55:55"><call pos:start="55:9" pos:end="55:55"><name pos:start="55:9" pos:end="55:15">DPRINTF</name><argument_list pos:start="55:16" pos:end="55:55">(<argument pos:start="55:17" pos:end="55:54"><expr pos:start="55:17" pos:end="55:54"><literal type="string" pos:start="55:17" pos:end="55:54">"receiver disabled ================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:25">/* XXX: check this */</comment>

    <if_stmt pos:start="65:5" pos:end="241:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:36">(<expr pos:start="65:9" pos:end="65:35"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:19">RxConfig</name></name> <operator pos:start="65:21" pos:end="65:21">&amp;</operator> <name pos:start="65:23" pos:end="65:35">AcceptAllPhys</name></expr>)</condition> <block pos:start="65:38" pos:end="73:5">{<block_content pos:start="69:9" pos:end="69:61">

        <comment type="block" pos:start="67:9" pos:end="67:38">/* promiscuous: receive all */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><call pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:15">DPRINTF</name><argument_list pos:start="69:16" pos:end="69:60">(<argument pos:start="69:17" pos:end="69:59"><expr pos:start="69:17" pos:end="69:59"><literal type="string" pos:start="69:17" pos:end="69:59">"&gt;&gt;&gt; packet received in promiscuous mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="73:7" pos:end="241:5">else <block pos:start="73:12" pos:end="241:5">{<block_content pos:start="75:9" pos:end="239:9">

        <if_stmt pos:start="75:9" pos:end="239:9"><if pos:start="75:9" pos:end="113:9">if <condition pos:start="75:12" pos:end="75:48">(<expr pos:start="75:13" pos:end="75:47"><operator pos:start="75:13" pos:end="75:13">!</operator><call pos:start="75:14" pos:end="75:47"><name pos:start="75:14" pos:end="75:19">memcmp</name><argument_list pos:start="75:20" pos:end="75:47">(<argument pos:start="75:21" pos:end="75:23"><expr pos:start="75:21" pos:end="75:23"><name pos:start="75:21" pos:end="75:23">buf</name></expr></argument>,  <argument pos:start="75:27" pos:end="75:43"><expr pos:start="75:27" pos:end="75:43"><name pos:start="75:27" pos:end="75:43">broadcast_macaddr</name></expr></argument>, <argument pos:start="75:46" pos:end="75:46"><expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:50" pos:end="113:9">{<block_content pos:start="79:13" pos:end="109:40">

            <comment type="block" pos:start="77:13" pos:end="77:35">/* broadcast address */</comment>

            <if_stmt pos:start="79:13" pos:end="95:13"><if pos:start="79:13" pos:end="95:13">if <condition pos:start="79:16" pos:end="79:49">(<expr pos:start="79:17" pos:end="79:48"><operator pos:start="79:17" pos:end="79:17">!</operator><operator pos:start="79:18" pos:end="79:18">(</operator><name pos:start="79:19" pos:end="79:29"><name pos:start="79:19" pos:end="79:19">s</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:29">RxConfig</name></name> <operator pos:start="79:31" pos:end="79:31">&amp;</operator> <name pos:start="79:33" pos:end="79:47">AcceptBroadcast</name><operator pos:start="79:48" pos:end="79:48">)</operator></expr>)</condition>

            <block pos:start="81:13" pos:end="95:13">{<block_content pos:start="83:17" pos:end="93:28">

                <expr_stmt pos:start="83:17" pos:end="83:59"><expr pos:start="83:17" pos:end="83:58"><call pos:start="83:17" pos:end="83:58"><name pos:start="83:17" pos:end="83:23">DPRINTF</name><argument_list pos:start="83:24" pos:end="83:58">(<argument pos:start="83:25" pos:end="83:57"><expr pos:start="83:25" pos:end="83:57"><literal type="string" pos:start="83:25" pos:end="83:57">"&gt;&gt;&gt; broadcast packet rejected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="87:17" pos:end="87:42">/* update tally counter */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:42"><expr pos:start="89:17" pos:end="89:41"><operator pos:start="89:17" pos:end="89:18">++</operator><name pos:start="89:19" pos:end="89:41"><name pos:start="89:19" pos:end="89:19">s</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:35">tally_counters</name><operator pos:start="89:36" pos:end="89:36">.</operator><name pos:start="89:37" pos:end="89:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="93:17" pos:end="93:28">return <expr pos:start="93:24" pos:end="93:27"><name pos:start="93:24" pos:end="93:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:41"><expr pos:start="99:13" pos:end="99:40"><name pos:start="99:13" pos:end="99:25">packet_header</name> <operator pos:start="99:27" pos:end="99:28">|=</operator> <name pos:start="99:30" pos:end="99:40">RxBroadcast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:54"><call pos:start="103:13" pos:end="103:54"><name pos:start="103:13" pos:end="103:19">DPRINTF</name><argument_list pos:start="103:20" pos:end="103:54">(<argument pos:start="103:21" pos:end="103:53"><expr pos:start="103:21" pos:end="103:53"><literal type="string" pos:start="103:21" pos:end="103:53">"&gt;&gt;&gt; broadcast packet received\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="107:13" pos:end="107:38">/* update tally counter */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:40"><expr pos:start="109:13" pos:end="109:39"><operator pos:start="109:13" pos:end="109:14">++</operator><name pos:start="109:15" pos:end="109:39"><name pos:start="109:15" pos:end="109:15">s</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:31">tally_counters</name><operator pos:start="109:32" pos:end="109:32">.</operator><name pos:start="109:33" pos:end="109:39">RxOkBrd</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="175:9">else if <condition pos:start="113:19" pos:end="113:33">(<expr pos:start="113:20" pos:end="113:32"><name pos:start="113:20" pos:end="113:25"><name pos:start="113:20" pos:end="113:22">buf</name><index pos:start="113:23" pos:end="113:25">[<expr pos:start="113:24" pos:end="113:24"><literal type="number" pos:start="113:24" pos:end="113:24">0</literal></expr>]</index></name> <operator pos:start="113:27" pos:end="113:27">&amp;</operator> <literal type="number" pos:start="113:29" pos:end="113:32">0x01</literal></expr>)</condition> <block pos:start="113:35" pos:end="175:9">{<block_content pos:start="117:13" pos:end="171:40">

            <comment type="block" pos:start="115:13" pos:end="115:27">/* multicast */</comment>

            <if_stmt pos:start="117:13" pos:end="133:13"><if pos:start="117:13" pos:end="133:13">if <condition pos:start="117:16" pos:end="117:49">(<expr pos:start="117:17" pos:end="117:48"><operator pos:start="117:17" pos:end="117:17">!</operator><operator pos:start="117:18" pos:end="117:18">(</operator><name pos:start="117:19" pos:end="117:29"><name pos:start="117:19" pos:end="117:19">s</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:29">RxConfig</name></name> <operator pos:start="117:31" pos:end="117:31">&amp;</operator> <name pos:start="117:33" pos:end="117:47">AcceptMulticast</name><operator pos:start="117:48" pos:end="117:48">)</operator></expr>)</condition>

            <block pos:start="119:13" pos:end="133:13">{<block_content pos:start="121:17" pos:end="131:28">

                <expr_stmt pos:start="121:17" pos:end="121:59"><expr pos:start="121:17" pos:end="121:58"><call pos:start="121:17" pos:end="121:58"><name pos:start="121:17" pos:end="121:23">DPRINTF</name><argument_list pos:start="121:24" pos:end="121:58">(<argument pos:start="121:25" pos:end="121:57"><expr pos:start="121:25" pos:end="121:57"><literal type="string" pos:start="121:25" pos:end="121:57">"&gt;&gt;&gt; multicast packet rejected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="125:17" pos:end="125:42">/* update tally counter */</comment>

                <expr_stmt pos:start="127:17" pos:end="127:42"><expr pos:start="127:17" pos:end="127:41"><operator pos:start="127:17" pos:end="127:18">++</operator><name pos:start="127:19" pos:end="127:41"><name pos:start="127:19" pos:end="127:19">s</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:35">tally_counters</name><operator pos:start="127:36" pos:end="127:36">.</operator><name pos:start="127:37" pos:end="127:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="131:17" pos:end="131:28">return <expr pos:start="131:24" pos:end="131:27"><name pos:start="131:24" pos:end="131:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <decl_stmt pos:start="137:13" pos:end="137:51"><decl pos:start="137:13" pos:end="137:50"><type pos:start="137:13" pos:end="137:15"><name pos:start="137:13" pos:end="137:15">int</name></type> <name pos:start="137:17" pos:end="137:25">mcast_idx</name> <init pos:start="137:27" pos:end="137:50">= <expr pos:start="137:29" pos:end="137:50"><call pos:start="137:29" pos:end="137:50"><name pos:start="137:29" pos:end="137:45">compute_mcast_idx</name><argument_list pos:start="137:46" pos:end="137:50">(<argument pos:start="137:47" pos:end="137:49"><expr pos:start="137:47" pos:end="137:49"><name pos:start="137:47" pos:end="137:49">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="141:13" pos:end="157:13"><if pos:start="141:13" pos:end="157:13">if <condition pos:start="141:16" pos:end="141:68">(<expr pos:start="141:17" pos:end="141:67"><operator pos:start="141:17" pos:end="141:17">!</operator><operator pos:start="141:18" pos:end="141:18">(</operator><name pos:start="141:19" pos:end="141:41"><name pos:start="141:19" pos:end="141:19">s</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:25">mult</name><index pos:start="141:26" pos:end="141:41">[<expr pos:start="141:27" pos:end="141:40"><name pos:start="141:27" pos:end="141:35">mcast_idx</name> <operator pos:start="141:37" pos:end="141:38">&gt;&gt;</operator> <literal type="number" pos:start="141:40" pos:end="141:40">3</literal></expr>]</index></name> <operator pos:start="141:43" pos:end="141:43">&amp;</operator> <operator pos:start="141:45" pos:end="141:45">(</operator><literal type="number" pos:start="141:46" pos:end="141:46">1</literal> <operator pos:start="141:48" pos:end="141:49">&lt;&lt;</operator> <operator pos:start="141:51" pos:end="141:51">(</operator><name pos:start="141:52" pos:end="141:60">mcast_idx</name> <operator pos:start="141:62" pos:end="141:62">&amp;</operator> <literal type="number" pos:start="141:64" pos:end="141:64">7</literal><operator pos:start="141:65" pos:end="141:65">)</operator><operator pos:start="141:66" pos:end="141:66">)</operator><operator pos:start="141:67" pos:end="141:67">)</operator></expr>)</condition>

            <block pos:start="143:13" pos:end="157:13">{<block_content pos:start="145:17" pos:end="155:28">

                <expr_stmt pos:start="145:17" pos:end="145:60"><expr pos:start="145:17" pos:end="145:59"><call pos:start="145:17" pos:end="145:59"><name pos:start="145:17" pos:end="145:23">DPRINTF</name><argument_list pos:start="145:24" pos:end="145:59">(<argument pos:start="145:25" pos:end="145:58"><expr pos:start="145:25" pos:end="145:58"><literal type="string" pos:start="145:25" pos:end="145:58">"&gt;&gt;&gt; multicast address mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="149:17" pos:end="149:42">/* update tally counter */</comment>

                <expr_stmt pos:start="151:17" pos:end="151:42"><expr pos:start="151:17" pos:end="151:41"><operator pos:start="151:17" pos:end="151:18">++</operator><name pos:start="151:19" pos:end="151:41"><name pos:start="151:19" pos:end="151:19">s</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:35">tally_counters</name><operator pos:start="151:36" pos:end="151:36">.</operator><name pos:start="151:37" pos:end="151:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="155:17" pos:end="155:28">return <expr pos:start="155:24" pos:end="155:27"><name pos:start="155:24" pos:end="155:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="161:13" pos:end="161:41"><expr pos:start="161:13" pos:end="161:40"><name pos:start="161:13" pos:end="161:25">packet_header</name> <operator pos:start="161:27" pos:end="161:28">|=</operator> <name pos:start="161:30" pos:end="161:40">RxMulticast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="165:13" pos:end="165:55"><expr pos:start="165:13" pos:end="165:54"><call pos:start="165:13" pos:end="165:54"><name pos:start="165:13" pos:end="165:19">DPRINTF</name><argument_list pos:start="165:20" pos:end="165:54">(<argument pos:start="165:21" pos:end="165:53"><expr pos:start="165:21" pos:end="165:53"><literal type="string" pos:start="165:21" pos:end="165:53">"&gt;&gt;&gt; multicast packet received\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="169:13" pos:end="169:38">/* update tally counter */</comment>

            <expr_stmt pos:start="171:13" pos:end="171:40"><expr pos:start="171:13" pos:end="171:39"><operator pos:start="171:13" pos:end="171:14">++</operator><name pos:start="171:15" pos:end="171:39"><name pos:start="171:15" pos:end="171:15">s</name><operator pos:start="171:16" pos:end="171:17">-&gt;</operator><name pos:start="171:18" pos:end="171:31">tally_counters</name><operator pos:start="171:32" pos:end="171:32">.</operator><name pos:start="171:33" pos:end="171:39">RxOkMul</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="175:11" pos:end="223:9">else if <condition pos:start="175:19" pos:end="185:40">(<expr pos:start="175:20" pos:end="185:39"><name pos:start="175:20" pos:end="175:29"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:26">phys</name><index pos:start="175:27" pos:end="175:29">[<expr pos:start="175:28" pos:end="175:28"><literal type="number" pos:start="175:28" pos:end="175:28">0</literal></expr>]</index></name> <operator pos:start="175:31" pos:end="175:32">==</operator> <name pos:start="175:34" pos:end="175:39"><name pos:start="175:34" pos:end="175:36">buf</name><index pos:start="175:37" pos:end="175:39">[<expr pos:start="175:38" pos:end="175:38"><literal type="number" pos:start="175:38" pos:end="175:38">0</literal></expr>]</index></name> <operator pos:start="175:41" pos:end="175:42">&amp;&amp;</operator>

                   <name pos:start="177:20" pos:end="177:29"><name pos:start="177:20" pos:end="177:20">s</name><operator pos:start="177:21" pos:end="177:22">-&gt;</operator><name pos:start="177:23" pos:end="177:26">phys</name><index pos:start="177:27" pos:end="177:29">[<expr pos:start="177:28" pos:end="177:28"><literal type="number" pos:start="177:28" pos:end="177:28">1</literal></expr>]</index></name> <operator pos:start="177:31" pos:end="177:32">==</operator> <name pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:36">buf</name><index pos:start="177:37" pos:end="177:39">[<expr pos:start="177:38" pos:end="177:38"><literal type="number" pos:start="177:38" pos:end="177:38">1</literal></expr>]</index></name> <operator pos:start="177:41" pos:end="177:42">&amp;&amp;</operator>

                   <name pos:start="179:20" pos:end="179:29"><name pos:start="179:20" pos:end="179:20">s</name><operator pos:start="179:21" pos:end="179:22">-&gt;</operator><name pos:start="179:23" pos:end="179:26">phys</name><index pos:start="179:27" pos:end="179:29">[<expr pos:start="179:28" pos:end="179:28"><literal type="number" pos:start="179:28" pos:end="179:28">2</literal></expr>]</index></name> <operator pos:start="179:31" pos:end="179:32">==</operator> <name pos:start="179:34" pos:end="179:39"><name pos:start="179:34" pos:end="179:36">buf</name><index pos:start="179:37" pos:end="179:39">[<expr pos:start="179:38" pos:end="179:38"><literal type="number" pos:start="179:38" pos:end="179:38">2</literal></expr>]</index></name> <operator pos:start="179:41" pos:end="179:42">&amp;&amp;</operator>

                   <name pos:start="181:20" pos:end="181:29"><name pos:start="181:20" pos:end="181:20">s</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:26">phys</name><index pos:start="181:27" pos:end="181:29">[<expr pos:start="181:28" pos:end="181:28"><literal type="number" pos:start="181:28" pos:end="181:28">3</literal></expr>]</index></name> <operator pos:start="181:31" pos:end="181:32">==</operator> <name pos:start="181:34" pos:end="181:39"><name pos:start="181:34" pos:end="181:36">buf</name><index pos:start="181:37" pos:end="181:39">[<expr pos:start="181:38" pos:end="181:38"><literal type="number" pos:start="181:38" pos:end="181:38">3</literal></expr>]</index></name> <operator pos:start="181:41" pos:end="181:42">&amp;&amp;</operator>

                   <name pos:start="183:20" pos:end="183:29"><name pos:start="183:20" pos:end="183:20">s</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:26">phys</name><index pos:start="183:27" pos:end="183:29">[<expr pos:start="183:28" pos:end="183:28"><literal type="number" pos:start="183:28" pos:end="183:28">4</literal></expr>]</index></name> <operator pos:start="183:31" pos:end="183:32">==</operator> <name pos:start="183:34" pos:end="183:39"><name pos:start="183:34" pos:end="183:36">buf</name><index pos:start="183:37" pos:end="183:39">[<expr pos:start="183:38" pos:end="183:38"><literal type="number" pos:start="183:38" pos:end="183:38">4</literal></expr>]</index></name> <operator pos:start="183:41" pos:end="183:42">&amp;&amp;</operator>

                   <name pos:start="185:20" pos:end="185:29"><name pos:start="185:20" pos:end="185:20">s</name><operator pos:start="185:21" pos:end="185:22">-&gt;</operator><name pos:start="185:23" pos:end="185:26">phys</name><index pos:start="185:27" pos:end="185:29">[<expr pos:start="185:28" pos:end="185:28"><literal type="number" pos:start="185:28" pos:end="185:28">5</literal></expr>]</index></name> <operator pos:start="185:31" pos:end="185:32">==</operator> <name pos:start="185:34" pos:end="185:39"><name pos:start="185:34" pos:end="185:36">buf</name><index pos:start="185:37" pos:end="185:39">[<expr pos:start="185:38" pos:end="185:38"><literal type="number" pos:start="185:38" pos:end="185:38">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="185:42" pos:end="223:9">{<block_content pos:start="189:13" pos:end="219:40">

            <comment type="block" pos:start="187:13" pos:end="187:23">/* match */</comment>

            <if_stmt pos:start="189:13" pos:end="205:13"><if pos:start="189:13" pos:end="205:13">if <condition pos:start="189:16" pos:end="189:46">(<expr pos:start="189:17" pos:end="189:45"><operator pos:start="189:17" pos:end="189:17">!</operator><operator pos:start="189:18" pos:end="189:18">(</operator><name pos:start="189:19" pos:end="189:29"><name pos:start="189:19" pos:end="189:19">s</name><operator pos:start="189:20" pos:end="189:21">-&gt;</operator><name pos:start="189:22" pos:end="189:29">RxConfig</name></name> <operator pos:start="189:31" pos:end="189:31">&amp;</operator> <name pos:start="189:33" pos:end="189:44">AcceptMyPhys</name><operator pos:start="189:45" pos:end="189:45">)</operator></expr>)</condition>

            <block pos:start="191:13" pos:end="205:13">{<block_content pos:start="193:17" pos:end="203:28">

                <expr_stmt pos:start="193:17" pos:end="193:76"><expr pos:start="193:17" pos:end="193:75"><call pos:start="193:17" pos:end="193:75"><name pos:start="193:17" pos:end="193:23">DPRINTF</name><argument_list pos:start="193:24" pos:end="193:75">(<argument pos:start="193:25" pos:end="193:74"><expr pos:start="193:25" pos:end="193:74"><literal type="string" pos:start="193:25" pos:end="193:74">"&gt;&gt;&gt; rejecting physical address matching packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="197:17" pos:end="197:42">/* update tally counter */</comment>

                <expr_stmt pos:start="199:17" pos:end="199:42"><expr pos:start="199:17" pos:end="199:41"><operator pos:start="199:17" pos:end="199:18">++</operator><name pos:start="199:19" pos:end="199:41"><name pos:start="199:19" pos:end="199:19">s</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:35">tally_counters</name><operator pos:start="199:36" pos:end="199:36">.</operator><name pos:start="199:37" pos:end="199:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="203:17" pos:end="203:28">return <expr pos:start="203:24" pos:end="203:27"><name pos:start="203:24" pos:end="203:27">size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="209:13" pos:end="209:40"><expr pos:start="209:13" pos:end="209:39"><name pos:start="209:13" pos:end="209:25">packet_header</name> <operator pos:start="209:27" pos:end="209:28">|=</operator> <name pos:start="209:30" pos:end="209:39">RxPhysical</name></expr>;</expr_stmt>



            <expr_stmt pos:start="213:13" pos:end="213:71"><expr pos:start="213:13" pos:end="213:70"><call pos:start="213:13" pos:end="213:70"><name pos:start="213:13" pos:end="213:19">DPRINTF</name><argument_list pos:start="213:20" pos:end="213:70">(<argument pos:start="213:21" pos:end="213:69"><expr pos:start="213:21" pos:end="213:69"><literal type="string" pos:start="213:21" pos:end="213:69">"&gt;&gt;&gt; physical address matching packet received\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="217:13" pos:end="217:38">/* update tally counter */</comment>

            <expr_stmt pos:start="219:13" pos:end="219:40"><expr pos:start="219:13" pos:end="219:39"><operator pos:start="219:13" pos:end="219:14">++</operator><name pos:start="219:15" pos:end="219:39"><name pos:start="219:15" pos:end="219:15">s</name><operator pos:start="219:16" pos:end="219:17">-&gt;</operator><name pos:start="219:18" pos:end="219:31">tally_counters</name><operator pos:start="219:32" pos:end="219:32">.</operator><name pos:start="219:33" pos:end="219:39">RxOkPhy</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="223:11" pos:end="239:9">else <block pos:start="223:16" pos:end="239:9">{<block_content pos:start="227:13" pos:end="237:24">



            <expr_stmt pos:start="227:13" pos:end="227:44"><expr pos:start="227:13" pos:end="227:43"><call pos:start="227:13" pos:end="227:43"><name pos:start="227:13" pos:end="227:19">DPRINTF</name><argument_list pos:start="227:20" pos:end="227:43">(<argument pos:start="227:21" pos:end="227:42"><expr pos:start="227:21" pos:end="227:42"><literal type="string" pos:start="227:21" pos:end="227:42">"&gt;&gt;&gt; unknown packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="231:13" pos:end="231:38">/* update tally counter */</comment>

            <expr_stmt pos:start="233:13" pos:end="233:38"><expr pos:start="233:13" pos:end="233:37"><operator pos:start="233:13" pos:end="233:14">++</operator><name pos:start="233:15" pos:end="233:37"><name pos:start="233:15" pos:end="233:15">s</name><operator pos:start="233:16" pos:end="233:17">-&gt;</operator><name pos:start="233:18" pos:end="233:31">tally_counters</name><operator pos:start="233:32" pos:end="233:32">.</operator><name pos:start="233:33" pos:end="233:37">RxERR</name></name></expr>;</expr_stmt>



            <return pos:start="237:13" pos:end="237:24">return <expr pos:start="237:20" pos:end="237:23"><name pos:start="237:20" pos:end="237:23">size</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="245:5" pos:end="247:68">/* if too small buffer, then expand it

     * Include some tailroom in case a vlan tag is later removed. */</comment>

    <if_stmt pos:start="249:5" pos:end="263:5"><if pos:start="249:5" pos:end="263:5">if <condition pos:start="249:8" pos:end="249:40">(<expr pos:start="249:9" pos:end="249:39"><name pos:start="249:9" pos:end="249:12">size</name> <operator pos:start="249:14" pos:end="249:14">&lt;</operator> <name pos:start="249:16" pos:end="249:27">MIN_BUF_SIZE</name> <operator pos:start="249:29" pos:end="249:29">+</operator> <name pos:start="249:31" pos:end="249:39">VLAN_HLEN</name></expr>)</condition> <block pos:start="249:42" pos:end="263:5">{<block_content pos:start="251:9" pos:end="261:9">

        <expr_stmt pos:start="251:9" pos:end="251:32"><expr pos:start="251:9" pos:end="251:31"><call pos:start="251:9" pos:end="251:31"><name pos:start="251:9" pos:end="251:14">memcpy</name><argument_list pos:start="251:15" pos:end="251:31">(<argument pos:start="251:16" pos:end="251:19"><expr pos:start="251:16" pos:end="251:19"><name pos:start="251:16" pos:end="251:19">buf1</name></expr></argument>, <argument pos:start="251:22" pos:end="251:24"><expr pos:start="251:22" pos:end="251:24"><name pos:start="251:22" pos:end="251:24">buf</name></expr></argument>, <argument pos:start="251:27" pos:end="251:30"><expr pos:start="251:27" pos:end="251:30"><name pos:start="251:27" pos:end="251:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:64"><expr pos:start="253:9" pos:end="253:63"><call pos:start="253:9" pos:end="253:63"><name pos:start="253:9" pos:end="253:14">memset</name><argument_list pos:start="253:15" pos:end="253:63">(<argument pos:start="253:16" pos:end="253:26"><expr pos:start="253:16" pos:end="253:26"><name pos:start="253:16" pos:end="253:19">buf1</name> <operator pos:start="253:21" pos:end="253:21">+</operator> <name pos:start="253:23" pos:end="253:26">size</name></expr></argument>, <argument pos:start="253:29" pos:end="253:29"><expr pos:start="253:29" pos:end="253:29"><literal type="number" pos:start="253:29" pos:end="253:29">0</literal></expr></argument>, <argument pos:start="253:32" pos:end="253:62"><expr pos:start="253:32" pos:end="253:62"><name pos:start="253:32" pos:end="253:43">MIN_BUF_SIZE</name> <operator pos:start="253:45" pos:end="253:45">+</operator> <name pos:start="253:47" pos:end="253:55">VLAN_HLEN</name> <operator pos:start="253:57" pos:end="253:57">-</operator> <name pos:start="253:59" pos:end="253:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:19"><expr pos:start="255:9" pos:end="255:18"><name pos:start="255:9" pos:end="255:11">buf</name> <operator pos:start="255:13" pos:end="255:13">=</operator> <name pos:start="255:15" pos:end="255:18">buf1</name></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="261:9"><if pos:start="257:9" pos:end="261:9">if <condition pos:start="257:12" pos:end="257:32">(<expr pos:start="257:13" pos:end="257:31"><name pos:start="257:13" pos:end="257:16">size</name> <operator pos:start="257:18" pos:end="257:18">&lt;</operator> <name pos:start="257:20" pos:end="257:31">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="257:34" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:32">

            <expr_stmt pos:start="259:13" pos:end="259:32"><expr pos:start="259:13" pos:end="259:31"><name pos:start="259:13" pos:end="259:16">size</name> <operator pos:start="259:18" pos:end="259:18">=</operator> <name pos:start="259:20" pos:end="259:31">MIN_BUF_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="733:73"><if pos:start="267:5" pos:end="733:73">if <condition pos:start="267:8" pos:end="267:39">(<expr pos:start="267:9" pos:end="267:38"><call pos:start="267:9" pos:end="267:38"><name pos:start="267:9" pos:end="267:35">rtl8139_cp_receiver_enabled</name><argument_list pos:start="267:36" pos:end="267:38">(<argument pos:start="267:37" pos:end="267:37"><expr pos:start="267:37" pos:end="267:37"><name pos:start="267:37" pos:end="267:37">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="269:5" pos:end="733:73">{<block_content pos:start="271:9" pos:end="733:73">

        <if_stmt pos:start="271:9" pos:end="275:9"><if pos:start="271:9" pos:end="275:9">if <condition pos:start="271:12" pos:end="271:36">(<expr pos:start="271:13" pos:end="271:35"><operator pos:start="271:13" pos:end="271:13">!</operator><call pos:start="271:14" pos:end="271:35"><name pos:start="271:14" pos:end="271:32">rtl8139_cp_rx_valid</name><argument_list pos:start="271:33" pos:end="271:35">(<argument pos:start="271:34" pos:end="271:34"><expr pos:start="271:34" pos:end="271:34"><name pos:start="271:34" pos:end="271:34">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="271:38" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:24">

            <return pos:start="273:13" pos:end="273:24">return <expr pos:start="273:20" pos:end="273:23"><name pos:start="273:20" pos:end="273:23">size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="279:9" pos:end="306:0"><expr pos:start="279:9" pos:end="279:51"><call pos:start="279:9" pos:end="279:51"><name pos:start="279:9" pos:end="279:15">DPRINTF</name><argument_list pos:start="279:16" pos:end="279:51">(<argument pos:start="279:17" pos:end="279:50"><expr pos:start="279:17" pos:end="279:50"><literal type="string" pos:start="279:17" pos:end="279:50">"in C+ Rx mode ================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="283:9" pos:end="283:36">/* begin C+ receiver mode */</comment>



<comment type="block" pos:start="287:1" pos:end="287:23">/* w0 ownership flag */</comment>

<cpp:define pos:start="289:1" pos:end="289:25">#<cpp:directive pos:start="289:2" pos:end="289:7">define</cpp:directive> <cpp:macro pos:start="289:9" pos:end="289:17"><name pos:start="289:9" pos:end="289:17">CP_RX_OWN</name></cpp:macro> <cpp:value pos:start="289:19" pos:end="289:25">(1&lt;&lt;31)</cpp:value></cpp:define>

<comment type="block" pos:start="291:1" pos:end="291:25">/* w0 end of ring flag */</comment>

<cpp:define pos:start="293:1" pos:end="293:25">#<cpp:directive pos:start="293:2" pos:end="293:7">define</cpp:directive> <cpp:macro pos:start="293:9" pos:end="293:17"><name pos:start="293:9" pos:end="293:17">CP_RX_EOR</name></cpp:macro> <cpp:value pos:start="293:19" pos:end="293:25">(1&lt;&lt;30)</cpp:value></cpp:define>

<comment type="block" pos:start="295:1" pos:end="295:34">/* w0 bits 0...12 : buffer size */</comment>

<cpp:define pos:start="297:1" pos:end="297:44">#<cpp:directive pos:start="297:2" pos:end="297:7">define</cpp:directive> <cpp:macro pos:start="297:9" pos:end="297:30"><name pos:start="297:9" pos:end="297:30">CP_RX_BUFFER_SIZE_MASK</name></cpp:macro> <cpp:value pos:start="297:32" pos:end="297:44">((1&lt;&lt;13) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="299:1" pos:end="299:27">/* w1 tag available flag */</comment>

<cpp:define pos:start="301:1" pos:end="301:26">#<cpp:directive pos:start="301:2" pos:end="301:7">define</cpp:directive> <cpp:macro pos:start="301:9" pos:end="301:18"><name pos:start="301:9" pos:end="301:18">CP_RX_TAVA</name></cpp:macro> <cpp:value pos:start="301:20" pos:end="301:26">(1&lt;&lt;16)</cpp:value></cpp:define>

<comment type="block" pos:start="303:1" pos:end="303:31">/* w1 bits 0...15 : VLAN tag */</comment>

<cpp:define pos:start="305:1" pos:end="305:41">#<cpp:directive pos:start="305:2" pos:end="305:7">define</cpp:directive> <cpp:macro pos:start="305:9" pos:end="305:27"><name pos:start="305:9" pos:end="305:27">CP_RX_VLAN_TAG_MASK</name></cpp:macro> <cpp:value pos:start="305:29" pos:end="305:41">((1&lt;&lt;16) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="307:1" pos:end="307:36">/* w2 low  32bit of Rx buffer ptr */</comment>

<comment type="block" pos:start="309:1" pos:end="309:36">/* w3 high 32bit of Rx buffer ptr */</comment>



        <decl_stmt pos:start="313:9" pos:end="313:44"><decl pos:start="313:9" pos:end="313:43"><type pos:start="313:9" pos:end="313:11"><name pos:start="313:9" pos:end="313:11">int</name></type> <name pos:start="313:13" pos:end="313:22">descriptor</name> <init pos:start="313:24" pos:end="313:43">= <expr pos:start="313:26" pos:end="313:43"><name pos:start="313:26" pos:end="313:43"><name pos:start="313:26" pos:end="313:26">s</name><operator pos:start="313:27" pos:end="313:28">-&gt;</operator><name pos:start="313:29" pos:end="313:43">currCPlusRxDesc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="315:9" pos:end="315:38"><decl pos:start="315:9" pos:end="315:37"><type pos:start="315:9" pos:end="315:18"><name pos:start="315:9" pos:end="315:18">dma_addr_t</name></type> <name pos:start="315:20" pos:end="315:37">cplus_rx_ring_desc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="319:9" pos:end="319:78"><expr pos:start="319:9" pos:end="319:77"><name pos:start="319:9" pos:end="319:26">cplus_rx_ring_desc</name> <operator pos:start="319:28" pos:end="319:28">=</operator> <call pos:start="319:30" pos:end="319:77"><name pos:start="319:30" pos:end="319:43">rtl8139_addr64</name><argument_list pos:start="319:44" pos:end="319:77">(<argument pos:start="319:45" pos:end="319:59"><expr pos:start="319:45" pos:end="319:59"><name pos:start="319:45" pos:end="319:59"><name pos:start="319:45" pos:end="319:45">s</name><operator pos:start="319:46" pos:end="319:47">-&gt;</operator><name pos:start="319:48" pos:end="319:59">RxRingAddrLO</name></name></expr></argument>, <argument pos:start="319:62" pos:end="319:76"><expr pos:start="319:62" pos:end="319:76"><name pos:start="319:62" pos:end="319:76"><name pos:start="319:62" pos:end="319:62">s</name><operator pos:start="319:63" pos:end="319:64">-&gt;</operator><name pos:start="319:65" pos:end="319:76">RxRingAddrHI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:46"><expr pos:start="321:9" pos:end="321:45"><name pos:start="321:9" pos:end="321:26">cplus_rx_ring_desc</name> <operator pos:start="321:28" pos:end="321:29">+=</operator> <literal type="number" pos:start="321:31" pos:end="321:32">16</literal> <operator pos:start="321:34" pos:end="321:34">*</operator> <name pos:start="321:36" pos:end="321:45">descriptor</name></expr>;</expr_stmt>



        <expr_stmt pos:start="325:9" pos:end="329:49"><expr pos:start="325:9" pos:end="329:48"><call pos:start="325:9" pos:end="329:48"><name pos:start="325:9" pos:end="325:15">DPRINTF</name><argument_list pos:start="325:16" pos:end="329:48">(<argument pos:start="325:17" pos:end="327:42"><expr pos:start="325:17" pos:end="327:42"><literal type="string" pos:start="325:17" pos:end="325:75">"+++ C+ mode reading RX descriptor %d from host memory at "</literal>

            <literal type="string" pos:start="327:13" pos:end="327:26">"%08x %08x = "</literal><name pos:start="327:27" pos:end="327:38">DMA_ADDR_FMT</name><literal type="string" pos:start="327:39" pos:end="327:42">"\n"</literal></expr></argument>, <argument pos:start="327:45" pos:end="327:54"><expr pos:start="327:45" pos:end="327:54"><name pos:start="327:45" pos:end="327:54">descriptor</name></expr></argument>, <argument pos:start="327:57" pos:end="327:71"><expr pos:start="327:57" pos:end="327:71"><name pos:start="327:57" pos:end="327:71"><name pos:start="327:57" pos:end="327:57">s</name><operator pos:start="327:58" pos:end="327:59">-&gt;</operator><name pos:start="327:60" pos:end="327:71">RxRingAddrHI</name></name></expr></argument>,

            <argument pos:start="329:13" pos:end="329:27"><expr pos:start="329:13" pos:end="329:27"><name pos:start="329:13" pos:end="329:27"><name pos:start="329:13" pos:end="329:13">s</name><operator pos:start="329:14" pos:end="329:15">-&gt;</operator><name pos:start="329:16" pos:end="329:27">RxRingAddrLO</name></name></expr></argument>, <argument pos:start="329:30" pos:end="329:47"><expr pos:start="329:30" pos:end="329:47"><name pos:start="329:30" pos:end="329:47">cplus_rx_ring_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="333:9" pos:end="333:50"><decl pos:start="333:9" pos:end="333:20"><type pos:start="333:9" pos:end="333:16"><name pos:start="333:9" pos:end="333:16">uint32_t</name></type> <name pos:start="333:18" pos:end="333:20">val</name></decl>, <decl pos:start="333:23" pos:end="333:27"><type ref="prev" pos:start="333:9" pos:end="333:16"/><name pos:start="333:23" pos:end="333:27">rxdw0</name></decl>,<decl pos:start="333:29" pos:end="333:33"><type ref="prev" pos:start="333:9" pos:end="333:16"/><name pos:start="333:29" pos:end="333:33">rxdw1</name></decl>,<decl pos:start="333:35" pos:end="333:41"><type ref="prev" pos:start="333:9" pos:end="333:16"/><name pos:start="333:35" pos:end="333:41">rxbufLO</name></decl>,<decl pos:start="333:43" pos:end="333:49"><type ref="prev" pos:start="333:9" pos:end="333:16"/><name pos:start="333:43" pos:end="333:49">rxbufHI</name></decl>;</decl_stmt>



        <expr_stmt pos:start="337:9" pos:end="337:53"><expr pos:start="337:9" pos:end="337:52"><call pos:start="337:9" pos:end="337:52"><name pos:start="337:9" pos:end="337:20">pci_dma_read</name><argument_list pos:start="337:21" pos:end="337:52">(<argument pos:start="337:22" pos:end="337:22"><expr pos:start="337:22" pos:end="337:22"><name pos:start="337:22" pos:end="337:22">d</name></expr></argument>, <argument pos:start="337:25" pos:end="337:42"><expr pos:start="337:25" pos:end="337:42"><name pos:start="337:25" pos:end="337:42">cplus_rx_ring_desc</name></expr></argument>, <argument pos:start="337:45" pos:end="337:48"><expr pos:start="337:45" pos:end="337:48"><operator pos:start="337:45" pos:end="337:45">&amp;</operator><name pos:start="337:46" pos:end="337:48">val</name></expr></argument>, <argument pos:start="337:51" pos:end="337:51"><expr pos:start="337:51" pos:end="337:51"><literal type="number" pos:start="337:51" pos:end="337:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:33"><expr pos:start="339:9" pos:end="339:32"><name pos:start="339:9" pos:end="339:13">rxdw0</name> <operator pos:start="339:15" pos:end="339:15">=</operator> <call pos:start="339:17" pos:end="339:32"><name pos:start="339:17" pos:end="339:27">le32_to_cpu</name><argument_list pos:start="339:28" pos:end="339:32">(<argument pos:start="339:29" pos:end="339:31"><expr pos:start="339:29" pos:end="339:31"><name pos:start="339:29" pos:end="339:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:55"><expr pos:start="341:9" pos:end="341:54"><call pos:start="341:9" pos:end="341:54"><name pos:start="341:9" pos:end="341:20">pci_dma_read</name><argument_list pos:start="341:21" pos:end="341:54">(<argument pos:start="341:22" pos:end="341:22"><expr pos:start="341:22" pos:end="341:22"><name pos:start="341:22" pos:end="341:22">d</name></expr></argument>, <argument pos:start="341:25" pos:end="341:44"><expr pos:start="341:25" pos:end="341:44"><name pos:start="341:25" pos:end="341:42">cplus_rx_ring_desc</name><operator pos:start="341:43" pos:end="341:43">+</operator><literal type="number" pos:start="341:44" pos:end="341:44">4</literal></expr></argument>, <argument pos:start="341:47" pos:end="341:50"><expr pos:start="341:47" pos:end="341:50"><operator pos:start="341:47" pos:end="341:47">&amp;</operator><name pos:start="341:48" pos:end="341:50">val</name></expr></argument>, <argument pos:start="341:53" pos:end="341:53"><expr pos:start="341:53" pos:end="341:53"><literal type="number" pos:start="341:53" pos:end="341:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:33"><expr pos:start="343:9" pos:end="343:32"><name pos:start="343:9" pos:end="343:13">rxdw1</name> <operator pos:start="343:15" pos:end="343:15">=</operator> <call pos:start="343:17" pos:end="343:32"><name pos:start="343:17" pos:end="343:27">le32_to_cpu</name><argument_list pos:start="343:28" pos:end="343:32">(<argument pos:start="343:29" pos:end="343:31"><expr pos:start="343:29" pos:end="343:31"><name pos:start="343:29" pos:end="343:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:55"><expr pos:start="345:9" pos:end="345:54"><call pos:start="345:9" pos:end="345:54"><name pos:start="345:9" pos:end="345:20">pci_dma_read</name><argument_list pos:start="345:21" pos:end="345:54">(<argument pos:start="345:22" pos:end="345:22"><expr pos:start="345:22" pos:end="345:22"><name pos:start="345:22" pos:end="345:22">d</name></expr></argument>, <argument pos:start="345:25" pos:end="345:44"><expr pos:start="345:25" pos:end="345:44"><name pos:start="345:25" pos:end="345:42">cplus_rx_ring_desc</name><operator pos:start="345:43" pos:end="345:43">+</operator><literal type="number" pos:start="345:44" pos:end="345:44">8</literal></expr></argument>, <argument pos:start="345:47" pos:end="345:50"><expr pos:start="345:47" pos:end="345:50"><operator pos:start="345:47" pos:end="345:47">&amp;</operator><name pos:start="345:48" pos:end="345:50">val</name></expr></argument>, <argument pos:start="345:53" pos:end="345:53"><expr pos:start="345:53" pos:end="345:53"><literal type="number" pos:start="345:53" pos:end="345:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:35"><expr pos:start="347:9" pos:end="347:34"><name pos:start="347:9" pos:end="347:15">rxbufLO</name> <operator pos:start="347:17" pos:end="347:17">=</operator> <call pos:start="347:19" pos:end="347:34"><name pos:start="347:19" pos:end="347:29">le32_to_cpu</name><argument_list pos:start="347:30" pos:end="347:34">(<argument pos:start="347:31" pos:end="347:33"><expr pos:start="347:31" pos:end="347:33"><name pos:start="347:31" pos:end="347:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:56"><expr pos:start="349:9" pos:end="349:55"><call pos:start="349:9" pos:end="349:55"><name pos:start="349:9" pos:end="349:20">pci_dma_read</name><argument_list pos:start="349:21" pos:end="349:55">(<argument pos:start="349:22" pos:end="349:22"><expr pos:start="349:22" pos:end="349:22"><name pos:start="349:22" pos:end="349:22">d</name></expr></argument>, <argument pos:start="349:25" pos:end="349:45"><expr pos:start="349:25" pos:end="349:45"><name pos:start="349:25" pos:end="349:42">cplus_rx_ring_desc</name><operator pos:start="349:43" pos:end="349:43">+</operator><literal type="number" pos:start="349:44" pos:end="349:45">12</literal></expr></argument>, <argument pos:start="349:48" pos:end="349:51"><expr pos:start="349:48" pos:end="349:51"><operator pos:start="349:48" pos:end="349:48">&amp;</operator><name pos:start="349:49" pos:end="349:51">val</name></expr></argument>, <argument pos:start="349:54" pos:end="349:54"><expr pos:start="349:54" pos:end="349:54"><literal type="number" pos:start="349:54" pos:end="349:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:35"><expr pos:start="351:9" pos:end="351:34"><name pos:start="351:9" pos:end="351:15">rxbufHI</name> <operator pos:start="351:17" pos:end="351:17">=</operator> <call pos:start="351:19" pos:end="351:34"><name pos:start="351:19" pos:end="351:29">le32_to_cpu</name><argument_list pos:start="351:30" pos:end="351:34">(<argument pos:start="351:31" pos:end="351:33"><expr pos:start="351:31" pos:end="351:33"><name pos:start="351:31" pos:end="351:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="355:9" pos:end="357:56"><expr pos:start="355:9" pos:end="357:55"><call pos:start="355:9" pos:end="357:55"><name pos:start="355:9" pos:end="355:15">DPRINTF</name><argument_list pos:start="355:16" pos:end="357:55">(<argument pos:start="355:17" pos:end="355:68"><expr pos:start="355:17" pos:end="355:68"><literal type="string" pos:start="355:17" pos:end="355:68">"+++ C+ mode RX descriptor %d %08x %08x %08x %08x\n"</literal></expr></argument>,

            <argument pos:start="357:13" pos:end="357:22"><expr pos:start="357:13" pos:end="357:22"><name pos:start="357:13" pos:end="357:22">descriptor</name></expr></argument>, <argument pos:start="357:25" pos:end="357:29"><expr pos:start="357:25" pos:end="357:29"><name pos:start="357:25" pos:end="357:29">rxdw0</name></expr></argument>, <argument pos:start="357:32" pos:end="357:36"><expr pos:start="357:32" pos:end="357:36"><name pos:start="357:32" pos:end="357:36">rxdw1</name></expr></argument>, <argument pos:start="357:39" pos:end="357:45"><expr pos:start="357:39" pos:end="357:45"><name pos:start="357:39" pos:end="357:45">rxbufLO</name></expr></argument>, <argument pos:start="357:48" pos:end="357:54"><expr pos:start="357:48" pos:end="357:54"><name pos:start="357:48" pos:end="357:54">rxbufHI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="361:9" pos:end="389:9"><if pos:start="361:9" pos:end="389:9">if <condition pos:start="361:12" pos:end="361:33">(<expr pos:start="361:13" pos:end="361:32"><operator pos:start="361:13" pos:end="361:13">!</operator><operator pos:start="361:14" pos:end="361:14">(</operator><name pos:start="361:15" pos:end="361:19">rxdw0</name> <operator pos:start="361:21" pos:end="361:21">&amp;</operator> <name pos:start="361:23" pos:end="361:31">CP_RX_OWN</name><operator pos:start="361:32" pos:end="361:32">)</operator></expr>)</condition>

        <block pos:start="363:9" pos:end="389:9">{<block_content pos:start="365:13" pos:end="387:25">

            <expr_stmt pos:start="365:13" pos:end="367:28"><expr pos:start="365:13" pos:end="367:27"><call pos:start="365:13" pos:end="367:27"><name pos:start="365:13" pos:end="365:19">DPRINTF</name><argument_list pos:start="365:20" pos:end="367:27">(<argument pos:start="365:21" pos:end="365:67"><expr pos:start="365:21" pos:end="365:67"><literal type="string" pos:start="365:21" pos:end="365:67">"C+ Rx mode : descriptor %d is owned by host\n"</literal></expr></argument>,

                <argument pos:start="367:17" pos:end="367:26"><expr pos:start="367:17" pos:end="367:26"><name pos:start="367:17" pos:end="367:26">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="371:13" pos:end="371:40"><expr pos:start="371:13" pos:end="371:39"><name pos:start="371:13" pos:end="371:25"><name pos:start="371:13" pos:end="371:13">s</name><operator pos:start="371:14" pos:end="371:15">-&gt;</operator><name pos:start="371:16" pos:end="371:25">IntrStatus</name></name> <operator pos:start="371:27" pos:end="371:28">|=</operator> <name pos:start="371:30" pos:end="371:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:26"><expr pos:start="373:13" pos:end="373:25"><operator pos:start="373:13" pos:end="373:14">++</operator><name pos:start="373:15" pos:end="373:25"><name pos:start="373:15" pos:end="373:15">s</name><operator pos:start="373:16" pos:end="373:17">-&gt;</operator><name pos:start="373:18" pos:end="373:25">RxMissed</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="377:13" pos:end="377:38">/* update tally counter */</comment>

            <expr_stmt pos:start="379:13" pos:end="379:38"><expr pos:start="379:13" pos:end="379:37"><operator pos:start="379:13" pos:end="379:14">++</operator><name pos:start="379:15" pos:end="379:37"><name pos:start="379:15" pos:end="379:15">s</name><operator pos:start="379:16" pos:end="379:17">-&gt;</operator><name pos:start="379:18" pos:end="379:31">tally_counters</name><operator pos:start="379:32" pos:end="379:32">.</operator><name pos:start="379:33" pos:end="379:37">RxERR</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:40"><expr pos:start="381:13" pos:end="381:39"><operator pos:start="381:13" pos:end="381:14">++</operator><name pos:start="381:15" pos:end="381:39"><name pos:start="381:15" pos:end="381:15">s</name><operator pos:start="381:16" pos:end="381:17">-&gt;</operator><name pos:start="381:18" pos:end="381:31">tally_counters</name><operator pos:start="381:32" pos:end="381:32">.</operator><name pos:start="381:33" pos:end="381:39">MissPkt</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="385:13" pos:end="385:34"><expr pos:start="385:13" pos:end="385:33"><call pos:start="385:13" pos:end="385:33"><name pos:start="385:13" pos:end="385:30">rtl8139_update_irq</name><argument_list pos:start="385:31" pos:end="385:33">(<argument pos:start="385:32" pos:end="385:32"><expr pos:start="385:32" pos:end="385:32"><name pos:start="385:32" pos:end="385:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="387:13" pos:end="387:25">return <expr pos:start="387:20" pos:end="387:24"><name pos:start="387:20" pos:end="387:24">size_</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="393:9" pos:end="393:59"><decl pos:start="393:9" pos:end="393:58"><type pos:start="393:9" pos:end="393:16"><name pos:start="393:9" pos:end="393:16">uint32_t</name></type> <name pos:start="393:18" pos:end="393:25">rx_space</name> <init pos:start="393:27" pos:end="393:58">= <expr pos:start="393:29" pos:end="393:58"><name pos:start="393:29" pos:end="393:33">rxdw0</name> <operator pos:start="393:35" pos:end="393:35">&amp;</operator> <name pos:start="393:37" pos:end="393:58">CP_RX_BUFFER_SIZE_MASK</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="397:9" pos:end="397:54">/* write VLAN info to descriptor variables. */</comment>

        <if_stmt pos:start="399:9" pos:end="733:73"><if pos:start="399:9" pos:end="733:73">if <condition pos:start="399:12" pos:end="401:50">(<expr pos:start="399:13" pos:end="401:49"><name pos:start="399:13" pos:end="399:20"><name pos:start="399:13" pos:end="399:13">s</name><operator pos:start="399:14" pos:end="399:15">-&gt;</operator><name pos:start="399:16" pos:end="399:20">CpCmd</name></name> <operator pos:start="399:22" pos:end="399:22">&amp;</operator> <name pos:start="399:24" pos:end="399:34">CPlusRxVLAN</name> <operator pos:start="399:36" pos:end="399:37">&amp;&amp;</operator> <call pos:start="399:39" pos:end="401:35"><name pos:start="399:39" pos:end="399:50">be16_to_cpup</name><argument_list pos:start="399:51" pos:end="401:35">(<argument pos:start="399:52" pos:end="401:34"><expr pos:start="399:52" pos:end="401:34"><operator pos:start="399:52" pos:end="399:52">(</operator><name pos:start="399:53" pos:end="399:60">uint16_t</name> <operator pos:start="399:62" pos:end="399:62">*</operator><operator pos:start="399:63" pos:end="399:63">)</operator>

                <operator pos:start="401:17" pos:end="401:17">&amp;</operator><name pos:start="401:18" pos:end="401:34"><name pos:start="401:18" pos:end="401:20">buf</name><index pos:start="401:21" pos:end="401:34">[<expr pos:start="401:22" pos:end="401:33"><name pos:start="401:22" pos:end="401:29">ETH_ALEN</name> <operator pos:start="401:31" pos:end="401:31">*</operator> <literal type="number" pos:start="401:33" pos:end="401:33">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="401:37" pos:end="401:38">==</operator> <name pos:start="401:40" pos:end="401:49">ETH_P_VLAN</name></expr>)</condition> <block pos:start="401:52" pos:end="733:73">{<block_content pos:start="403:13" pos:end="733:73">

            <expr_stmt pos:start="403:13" pos:end="403:43"><expr pos:start="403:13" pos:end="403:42"><name pos:start="403:13" pos:end="403:21">dot1q_buf</name> <operator pos:start="403:23" pos:end="403:23">=</operator> <operator pos:start="403:25" pos:end="403:25">&amp;</operator><name pos:start="403:26" pos:end="403:42"><name pos:start="403:26" pos:end="403:28">buf</name><index pos:start="403:29" pos:end="403:42">[<expr pos:start="403:30" pos:end="403:41"><name pos:start="403:30" pos:end="403:37">ETH_ALEN</name> <operator pos:start="403:39" pos:end="403:39">*</operator> <literal type="number" pos:start="403:41" pos:end="403:41">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:30"><expr pos:start="405:13" pos:end="405:29"><name pos:start="405:13" pos:end="405:16">size</name> <operator pos:start="405:18" pos:end="405:19">-=</operator> <name pos:start="405:21" pos:end="405:29">VLAN_HLEN</name></expr>;</expr_stmt>

            <comment type="block" pos:start="407:13" pos:end="407:77">/* if too small buffer, use the tailroom added duing expansion */</comment>

            <if_stmt pos:start="409:13" pos:end="413:13"><if pos:start="409:13" pos:end="413:13">if <condition pos:start="409:16" pos:end="409:36">(<expr pos:start="409:17" pos:end="409:35"><name pos:start="409:17" pos:end="409:20">size</name> <operator pos:start="409:22" pos:end="409:22">&lt;</operator> <name pos:start="409:24" pos:end="409:35">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="409:38" pos:end="413:13">{<block_content pos:start="411:17" pos:end="411:36">

                <expr_stmt pos:start="411:17" pos:end="411:36"><expr pos:start="411:17" pos:end="411:35"><name pos:start="411:17" pos:end="411:20">size</name> <operator pos:start="411:22" pos:end="411:22">=</operator> <name pos:start="411:24" pos:end="411:35">MIN_BUF_SIZE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="417:13" pos:end="417:42"><expr pos:start="417:13" pos:end="417:41"><name pos:start="417:13" pos:end="417:17">rxdw1</name> <operator pos:start="417:19" pos:end="417:20">&amp;=</operator> <operator pos:start="417:22" pos:end="417:22">~</operator><name pos:start="417:23" pos:end="417:41">CP_RX_VLAN_TAG_MASK</name></expr>;</expr_stmt>

            <comment type="block" pos:start="419:13" pos:end="419:55">/* BE + ~le_to_cpu()~ + cpu_to_le() = BE */</comment>

            <expr_stmt pos:start="421:13" pos:end="423:44"><expr pos:start="421:13" pos:end="423:43"><name pos:start="421:13" pos:end="421:17">rxdw1</name> <operator pos:start="421:19" pos:end="421:20">|=</operator> <name pos:start="421:22" pos:end="421:31">CP_RX_TAVA</name> <operator pos:start="421:33" pos:end="421:33">|</operator> <call pos:start="421:35" pos:end="423:43"><name pos:start="421:35" pos:end="421:46">le16_to_cpup</name><argument_list pos:start="421:47" pos:end="423:43">(<argument pos:start="421:48" pos:end="423:42"><expr pos:start="421:48" pos:end="423:42"><operator pos:start="421:48" pos:end="421:48">(</operator><name pos:start="421:49" pos:end="421:56">uint16_t</name> <operator pos:start="421:58" pos:end="421:58">*</operator><operator pos:start="421:59" pos:end="421:59">)</operator>

                <operator pos:start="423:17" pos:end="423:17">&amp;</operator><name pos:start="423:18" pos:end="423:42"><name pos:start="423:18" pos:end="423:26">dot1q_buf</name><index pos:start="423:27" pos:end="423:42">[<expr pos:start="423:28" pos:end="423:41"><name pos:start="423:28" pos:end="423:41">ETHER_TYPE_LEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <macro pos:start="427:13" pos:end="733:73"><name pos:start="427:13" pos:end="427:19">DPRINTF</name><argument_list pos:start="427:20" pos:end="733:73">(<argument pos:start="427:21" pos:end="733:73"><literal type="string" pos:start="427:21" pos:end="427:65">"C+ Rx mode : extracted vlan tag with tci: ""</literal>%u\n<literal type="string" pos:start="427:70" pos:end="449:21">",

                be16_to_cpup((uint16_t *)&amp;dot1q_buf[ETHER_TYPE_LEN]));

        } else {

            /* reset VLAN tag flag */

            rxdw1 &amp;= ~CP_RX_TAVA;

        }



        /* TODO: scatter the packet over available receive ring descriptors space */



        if (size+4 &gt; rx_space)

        {

            DPRINTF("</literal>C+ Rx mode : descriptor %d size %d received %d + <literal type="number" pos:start="449:71" pos:end="449:71">4</literal>\n<literal type="string" pos:start="449:74" pos:end="641:17">",

                descriptor, rx_space, size);



            s-&gt;IntrStatus |= RxOverflow;

            ++s-&gt;RxMissed;



            /* update tally counter */

            ++s-&gt;tally_counters.RxERR;

            ++s-&gt;tally_counters.MissPkt;



            rtl8139_update_irq(s);

            return size_;

        }



        dma_addr_t rx_addr = rtl8139_addr64(rxbufLO, rxbufHI);



        /* receive/copy to target memory */

        if (dot1q_buf) {

            pci_dma_write(d, rx_addr, buf, 2 * ETH_ALEN);

            pci_dma_write(d, rx_addr + 2 * ETH_ALEN,

                          buf + 2 * ETH_ALEN + VLAN_HLEN,

                          size - 2 * ETH_ALEN);

        } else {

            pci_dma_write(d, rx_addr, buf, size);

        }



        if (s-&gt;CpCmd &amp; CPlusRxChkSum)

        {

            /* do some packet checksumming */

        }



        /* write checksum */

        val = cpu_to_le32(crc32(0, buf, size_));

        pci_dma_write(d, rx_addr+size, (uint8_t *)&amp;val, 4);



/* first segment of received packet flag */

#define CP_RX_STATUS_FS (1&lt;&lt;29)

/* last segment of received packet flag */

#define CP_RX_STATUS_LS (1&lt;&lt;28)

/* multicast packet flag */

#define CP_RX_STATUS_MAR (1&lt;&lt;26)

/* physical-matching packet flag */

#define CP_RX_STATUS_PAM (1&lt;&lt;25)

/* broadcast packet flag */

#define CP_RX_STATUS_BAR (1&lt;&lt;24)

/* runt packet flag */

#define CP_RX_STATUS_RUNT (1&lt;&lt;19)

/* crc error flag */

#define CP_RX_STATUS_CRC (1&lt;&lt;18)

/* IP checksum error flag */

#define CP_RX_STATUS_IPF (1&lt;&lt;15)

/* UDP checksum error flag */

#define CP_RX_STATUS_UDPF (1&lt;&lt;14)

/* TCP checksum error flag */

#define CP_RX_STATUS_TCPF (1&lt;&lt;13)



        /* transfer ownership to target */

        rxdw0 &amp;= ~CP_RX_OWN;



        /* set first segment bit */

        rxdw0 |= CP_RX_STATUS_FS;



        /* set last segment bit */

        rxdw0 |= CP_RX_STATUS_LS;



        /* set received packet type flags */

        if (packet_header &amp; RxBroadcast)

            rxdw0 |= CP_RX_STATUS_BAR;

        if (packet_header &amp; RxMulticast)

            rxdw0 |= CP_RX_STATUS_MAR;

        if (packet_header &amp; RxPhysical)

            rxdw0 |= CP_RX_STATUS_PAM;



        /* set received size */

        rxdw0 &amp;= ~CP_RX_BUFFER_SIZE_MASK;

        rxdw0 |= (size+4);



        /* update ring data */

        val = cpu_to_le32(rxdw0);

        pci_dma_write(d, cplus_rx_ring_desc, (uint8_t *)&amp;val, 4);

        val = cpu_to_le32(rxdw1);

        pci_dma_write(d, cplus_rx_ring_desc+4, (uint8_t *)&amp;val, 4);



        /* update tally counter */

        ++s-&gt;tally_counters.RxOk;



        /* seek to next Rx descriptor */

        if (rxdw0 &amp; CP_RX_EOR)

        {

            s-&gt;currCPlusRxDesc = 0;

        }

        else

        {

            ++s-&gt;currCPlusRxDesc;

        }



        DPRINTF("</literal>done C+ Rx mode ----------------\n<literal type="string" pos:start="641:52" pos:end="651:17">");



    }

    else

    {

        DPRINTF("</literal>in ring Rx mode ================\n<literal type="string" pos:start="651:52" pos:end="673:21">");



        /* begin ring receiver mode */

        int avail = MOD2(s-&gt;RxBufferSize + s-&gt;RxBufPtr - s-&gt;RxBufAddr, s-&gt;RxBufferSize);



        /* if receiver buffer is empty then avail == 0 */



#define RX_ALIGN(x) (((x) + 3) &amp; ~0x3)



        if (avail != 0 &amp;&amp; RX_ALIGN(size + 8) &gt;= avail)

        {

            DPRINTF("</literal>rx overflow: rx buffer length %d head <literal type="number" pos:start="673:60" pos:end="673:61">0x</literal>%<literal type="number" pos:start="673:63" pos:end="673:65">04x</literal> <literal type="string" pos:start="673:67" pos:end="675:17">"

                "</literal>read <literal type="number" pos:start="675:23" pos:end="675:24">0x</literal>%<literal type="number" pos:start="675:26" pos:end="675:28">04x</literal> === available <literal type="number" pos:start="675:44" pos:end="675:45">0x</literal>%<literal type="number" pos:start="675:47" pos:end="675:49">04x</literal> need <literal type="number" pos:start="675:56" pos:end="675:57">0x</literal>%<literal type="number" pos:start="675:59" pos:end="675:61">04x</literal>\n<literal type="string" pos:start="675:64" pos:end="733:17">",

                s-&gt;RxBufferSize, s-&gt;RxBufAddr, s-&gt;RxBufPtr, avail, size + 8);



            s-&gt;IntrStatus |= RxOverflow;

            ++s-&gt;RxMissed;

            rtl8139_update_irq(s);

            return size_;

        }



        packet_header |= RxStatusOK;



        packet_header |= (((size+4) &lt;&lt; 16) &amp; 0xffff0000);



        /* write header */

        uint32_t val = cpu_to_le32(packet_header);



        rtl8139_write_buffer(s, (uint8_t *)&amp;val, 4);



        rtl8139_write_buffer(s, buf, size);



        /* write checksum */

        val = cpu_to_le32(crc32(0, buf, size));

        rtl8139_write_buffer(s, (uint8_t *)&amp;val, 4);



        /* correct buffer write pointer */

        s-&gt;RxBufAddr = MOD2(RX_ALIGN(s-&gt;RxBufAddr), s-&gt;RxBufferSize);



        /* now we can signal we have received something */



        DPRINTF("</literal>received: rx buffer length %d head <literal type="number" pos:start="733:53" pos:end="733:54">0x</literal>%<literal type="number" pos:start="733:56" pos:end="733:58">04x</literal> read <literal type="number" pos:start="733:65" pos:end="733:66">0x</literal>%<literal type="number" pos:start="733:68" pos:end="733:70">04x</literal>\n<literal type="string" pos:start="733:73" pos:end="733:73">"</literal></argument></argument_list></macro></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>,

            s-&gt;RxBufferSize, s-&gt;RxBufAddr, s-&gt;RxBufPtr);

    }



    s-&gt;IntrStatus |= RxOK;



    if (do_interrupt)

    {

        rtl8139_update_irq(s);

    }



    return size_;

}
</unit>
