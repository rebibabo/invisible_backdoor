<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4863.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">seqvideo_decode</name><parameter_list pos:start="1:27" pos:end="1:90">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:42">SeqVideoContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">seq</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:74"><decl pos:start="1:50" pos:end="1:74"><type pos:start="1:50" pos:end="1:74"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:63">unsigned</name> <name pos:start="1:65" pos:end="1:68">char</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">data</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:89"><decl pos:start="1:77" pos:end="1:89"><type pos:start="1:77" pos:end="1:89"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:89">data_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:13">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:25"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">unsigned</name> <name pos:start="5:20" pos:end="5:23">char</name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:33">data_end</name> <init pos:start="5:35" pos:end="5:52">= <expr pos:start="5:37" pos:end="5:52"><name pos:start="5:37" pos:end="5:40">data</name> <operator pos:start="5:42" pos:end="5:42">+</operator> <name pos:start="5:44" pos:end="5:52">data_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">flags</name></decl>, <decl pos:start="9:16" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">i</name></decl>, <decl pos:start="9:19" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:19">j</name></decl>, <decl pos:start="9:22" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:22">x</name></decl>, <decl pos:start="9:25" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:25">y</name></decl>, <decl pos:start="9:28" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:29">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:22"><name pos:start="11:19" pos:end="11:19">c</name><index pos:start="11:20" pos:end="11:22">[<expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:21">palette</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:20"><expr pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:9">flags</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <operator pos:start="19:13" pos:end="19:13">*</operator><name pos:start="19:14" pos:end="19:17">data</name><operator pos:start="19:18" pos:end="19:19">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="43:5"><if pos:start="23:5" pos:end="43:5">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:13">flags</name> <operator pos:start="23:15" pos:end="23:15">&amp;</operator> <literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>)</condition> <block pos:start="23:20" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:43">

        <expr_stmt pos:start="25:9" pos:end="25:49"><expr pos:start="25:9" pos:end="25:48"><name pos:start="25:9" pos:end="25:15">palette</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <operator pos:start="25:19" pos:end="25:19">(</operator><name pos:start="25:20" pos:end="25:27">uint32_t</name> <operator pos:start="25:29" pos:end="25:29">*</operator><operator pos:start="25:30" pos:end="25:30">)</operator><name pos:start="25:31" pos:end="25:48"><name pos:start="25:31" pos:end="25:33">seq</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:40">frame</name><operator pos:start="25:41" pos:end="25:41">.</operator><name pos:start="25:42" pos:end="25:45">data</name><index pos:start="25:46" pos:end="25:48">[<expr pos:start="25:47" pos:end="25:47"><literal type="number" pos:start="25:47" pos:end="25:47">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="29:39"><if pos:start="27:9" pos:end="29:39">if <condition pos:start="27:12" pos:end="27:38">(<expr pos:start="27:13" pos:end="27:37"><name pos:start="27:13" pos:end="27:20">data_end</name> <operator pos:start="27:22" pos:end="27:22">-</operator> <name pos:start="27:24" pos:end="27:27">data</name> <operator pos:start="27:29" pos:end="27:29">&lt;</operator> <literal type="number" pos:start="27:31" pos:end="27:33">256</literal> <operator pos:start="27:35" pos:end="27:35">*</operator> <literal type="number" pos:start="27:37" pos:end="27:37">3</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:39"><block_content pos:start="29:13" pos:end="29:39">

            <return pos:start="29:13" pos:end="29:39">return <expr pos:start="29:20" pos:end="29:38"><name pos:start="29:20" pos:end="29:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <for pos:start="31:9" pos:end="39:9">for <control pos:start="31:13" pos:end="31:33">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">i</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:28"><expr pos:start="31:21" pos:end="31:27"><name pos:start="31:21" pos:end="31:21">i</name> <operator pos:start="31:23" pos:end="31:23">&lt;</operator> <literal type="number" pos:start="31:25" pos:end="31:27">256</literal></expr>;</condition> <incr pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:30">i</name><operator pos:start="31:31" pos:end="31:32">++</operator></expr></incr>)</control> <block pos:start="31:35" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:49">

            <for pos:start="33:13" pos:end="35:51">for <control pos:start="33:17" pos:end="33:43">(<init pos:start="33:18" pos:end="33:23"><expr pos:start="33:18" pos:end="33:22"><name pos:start="33:18" pos:end="33:18">j</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>;</init> <condition pos:start="33:25" pos:end="33:30"><expr pos:start="33:25" pos:end="33:29"><name pos:start="33:25" pos:end="33:25">j</name> <operator pos:start="33:27" pos:end="33:27">&lt;</operator> <literal type="number" pos:start="33:29" pos:end="33:29">3</literal></expr>;</condition> <incr pos:start="33:32" pos:end="33:42"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:32">j</name><operator pos:start="33:33" pos:end="33:34">++</operator></expr><operator pos:start="33:35" pos:end="33:35">,</operator> <expr pos:start="33:37" pos:end="33:42"><name pos:start="33:37" pos:end="33:40">data</name><operator pos:start="33:41" pos:end="33:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="35:17" pos:end="35:51"><block_content pos:start="35:17" pos:end="35:51">

                <expr_stmt pos:start="35:17" pos:end="35:51"><expr pos:start="35:17" pos:end="35:50"><name pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:17">c</name><index pos:start="35:18" pos:end="35:20">[<expr pos:start="35:19" pos:end="35:19"><name pos:start="35:19" pos:end="35:19">j</name></expr>]</index></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <operator pos:start="35:24" pos:end="35:24">(</operator><operator pos:start="35:25" pos:end="35:25">*</operator><name pos:start="35:26" pos:end="35:29">data</name> <operator pos:start="35:31" pos:end="35:32">&lt;&lt;</operator> <literal type="number" pos:start="35:34" pos:end="35:34">2</literal><operator pos:start="35:35" pos:end="35:35">)</operator> <operator pos:start="35:37" pos:end="35:37">|</operator> <operator pos:start="35:39" pos:end="35:39">(</operator><operator pos:start="35:40" pos:end="35:40">*</operator><name pos:start="35:41" pos:end="35:44">data</name> <operator pos:start="35:46" pos:end="35:47">&gt;&gt;</operator> <literal type="number" pos:start="35:49" pos:end="35:49">4</literal><operator pos:start="35:50" pos:end="35:50">)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="37:13" pos:end="37:49"><expr pos:start="37:13" pos:end="37:48"><name pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:19">palette</name><index pos:start="37:20" pos:end="37:22">[<expr pos:start="37:21" pos:end="37:21"><name pos:start="37:21" pos:end="37:21">i</name></expr>]</index></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <literal type="number" pos:start="37:26" pos:end="37:29">0xFF</literal> <operator pos:start="37:31" pos:end="37:32">&lt;&lt;</operator> <literal type="number" pos:start="37:34" pos:end="37:35">24</literal> <operator pos:start="37:37" pos:end="37:37">|</operator> <call pos:start="37:39" pos:end="37:48"><name pos:start="37:39" pos:end="37:45">AV_RB24</name><argument_list pos:start="37:46" pos:end="37:48">(<argument pos:start="37:47" pos:end="37:47"><expr pos:start="37:47" pos:end="37:47"><name pos:start="37:47" pos:end="37:47">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:11">seq</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:18">frame</name><operator pos:start="41:19" pos:end="41:19">.</operator><name pos:start="41:20" pos:end="41:38">palette_has_changed</name></name> <operator pos:start="41:40" pos:end="41:40">=</operator> <literal type="number" pos:start="41:42" pos:end="41:42">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="91:5"><if pos:start="47:5" pos:end="91:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:13">flags</name> <operator pos:start="47:15" pos:end="47:15">&amp;</operator> <literal type="number" pos:start="47:17" pos:end="47:17">2</literal></expr>)</condition> <block pos:start="47:20" pos:end="91:5">{<block_content pos:start="49:9" pos:end="89:13">

        <if_stmt pos:start="49:9" pos:end="51:39"><if pos:start="49:9" pos:end="51:39">if <condition pos:start="49:12" pos:end="49:34">(<expr pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:20">data_end</name> <operator pos:start="49:22" pos:end="49:22">-</operator> <name pos:start="49:24" pos:end="49:27">data</name> <operator pos:start="49:29" pos:end="49:29">&lt;</operator> <literal type="number" pos:start="49:31" pos:end="49:33">128</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:39"><block_content pos:start="51:13" pos:end="51:39">

            <return pos:start="51:13" pos:end="51:39">return <expr pos:start="51:20" pos:end="51:38"><name pos:start="51:20" pos:end="51:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><call pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:21">init_get_bits</name><argument_list pos:start="53:22" pos:end="53:41">(<argument pos:start="53:23" pos:end="53:25"><expr pos:start="53:23" pos:end="53:25"><operator pos:start="53:23" pos:end="53:23">&amp;</operator><name pos:start="53:24" pos:end="53:25">gb</name></expr></argument>, <argument pos:start="53:28" pos:end="53:31"><expr pos:start="53:28" pos:end="53:31"><name pos:start="53:28" pos:end="53:31">data</name></expr></argument>, <argument pos:start="53:34" pos:end="53:40"><expr pos:start="53:34" pos:end="53:40"><literal type="number" pos:start="53:34" pos:end="53:36">128</literal> <operator pos:start="53:38" pos:end="53:38">*</operator> <literal type="number" pos:start="53:40" pos:end="53:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="53:44" pos:end="53:55"><expr pos:start="53:44" pos:end="53:54"><name pos:start="53:44" pos:end="53:47">data</name> <operator pos:start="53:49" pos:end="53:50">+=</operator> <literal type="number" pos:start="53:52" pos:end="53:54">128</literal></expr>;</expr_stmt>

        <for pos:start="55:9" pos:end="89:13">for <control pos:start="55:13" pos:end="55:36">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">y</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:21">y</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <literal type="number" pos:start="55:25" pos:end="55:27">128</literal></expr>;</condition> <incr pos:start="55:30" pos:end="55:35"><expr pos:start="55:30" pos:end="55:35"><name pos:start="55:30" pos:end="55:30">y</name> <operator pos:start="55:32" pos:end="55:33">+=</operator> <literal type="number" pos:start="55:35" pos:end="55:35">8</literal></expr></incr>)</control><block type="pseudo" pos:start="57:13" pos:end="89:13"><block_content pos:start="57:13" pos:end="89:13">

            <for pos:start="57:13" pos:end="89:13">for <control pos:start="57:17" pos:end="57:40">(<init pos:start="57:18" pos:end="57:23"><expr pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:18">x</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>;</init> <condition pos:start="57:25" pos:end="57:32"><expr pos:start="57:25" pos:end="57:31"><name pos:start="57:25" pos:end="57:25">x</name> <operator pos:start="57:27" pos:end="57:27">&lt;</operator> <literal type="number" pos:start="57:29" pos:end="57:31">256</literal></expr>;</condition> <incr pos:start="57:34" pos:end="57:39"><expr pos:start="57:34" pos:end="57:39"><name pos:start="57:34" pos:end="57:34">x</name> <operator pos:start="57:36" pos:end="57:37">+=</operator> <literal type="number" pos:start="57:39" pos:end="57:39">8</literal></expr></incr>)</control> <block pos:start="57:42" pos:end="89:13">{<block_content pos:start="59:17" pos:end="87:47">

                <expr_stmt pos:start="59:17" pos:end="59:74"><expr pos:start="59:17" pos:end="59:73"><name pos:start="59:17" pos:end="59:19">dst</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <operator pos:start="59:23" pos:end="59:23">&amp;</operator><name pos:start="59:24" pos:end="59:73"><name pos:start="59:24" pos:end="59:26">seq</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:33">frame</name><operator pos:start="59:34" pos:end="59:34">.</operator><name pos:start="59:35" pos:end="59:38">data</name><index pos:start="59:39" pos:end="59:41">[<expr pos:start="59:40" pos:end="59:40"><literal type="number" pos:start="59:40" pos:end="59:40">0</literal></expr>]</index><index pos:start="59:42" pos:end="59:73">[<expr pos:start="59:43" pos:end="59:72"><name pos:start="59:43" pos:end="59:43">y</name> <operator pos:start="59:45" pos:end="59:45">*</operator> <name pos:start="59:47" pos:end="59:68"><name pos:start="59:47" pos:end="59:49">seq</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:56">frame</name><operator pos:start="59:57" pos:end="59:57">.</operator><name pos:start="59:58" pos:end="59:65">linesize</name><index pos:start="59:66" pos:end="59:68">[<expr pos:start="59:67" pos:end="59:67"><literal type="number" pos:start="59:67" pos:end="59:67">0</literal></expr>]</index></name> <operator pos:start="59:70" pos:end="59:70">+</operator> <name pos:start="59:72" pos:end="59:72">x</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:38"><expr pos:start="61:17" pos:end="61:37"><name pos:start="61:17" pos:end="61:18">op</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="61:37"><name pos:start="61:22" pos:end="61:29">get_bits</name><argument_list pos:start="61:30" pos:end="61:37">(<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><operator pos:start="61:31" pos:end="61:31">&amp;</operator><name pos:start="61:32" pos:end="61:33">gb</name></expr></argument>, <argument pos:start="61:36" pos:end="61:36"><expr pos:start="61:36" pos:end="61:36"><literal type="number" pos:start="61:36" pos:end="61:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="63:17" pos:end="83:17">switch <condition pos:start="63:24" pos:end="63:27">(<expr pos:start="63:25" pos:end="63:26"><name pos:start="63:25" pos:end="63:26">op</name></expr>)</condition> <block pos:start="63:29" pos:end="83:17">{<block_content pos:start="65:17" pos:end="81:26">

                <case pos:start="65:17" pos:end="65:23">case <expr pos:start="65:22" pos:end="65:22"><literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="67:21" pos:end="67:68"><expr pos:start="67:21" pos:end="67:67"><name pos:start="67:21" pos:end="67:24">data</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <call pos:start="67:28" pos:end="67:67"><name pos:start="67:28" pos:end="67:41">seq_decode_op1</name><argument_list pos:start="67:42" pos:end="67:67">(<argument pos:start="67:43" pos:end="67:45"><expr pos:start="67:43" pos:end="67:45"><name pos:start="67:43" pos:end="67:45">seq</name></expr></argument>, <argument pos:start="67:48" pos:end="67:51"><expr pos:start="67:48" pos:end="67:51"><name pos:start="67:48" pos:end="67:51">data</name></expr></argument>, <argument pos:start="67:54" pos:end="67:61"><expr pos:start="67:54" pos:end="67:61"><name pos:start="67:54" pos:end="67:61">data_end</name></expr></argument>, <argument pos:start="67:64" pos:end="67:66"><expr pos:start="67:64" pos:end="67:66"><name pos:start="67:64" pos:end="67:66">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="69:21" pos:end="69:26">break;</break>

                <case pos:start="71:17" pos:end="71:23">case <expr pos:start="71:22" pos:end="71:22"><literal type="number" pos:start="71:22" pos:end="71:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="73:21" pos:end="73:68"><expr pos:start="73:21" pos:end="73:67"><name pos:start="73:21" pos:end="73:24">data</name> <operator pos:start="73:26" pos:end="73:26">=</operator> <call pos:start="73:28" pos:end="73:67"><name pos:start="73:28" pos:end="73:41">seq_decode_op2</name><argument_list pos:start="73:42" pos:end="73:67">(<argument pos:start="73:43" pos:end="73:45"><expr pos:start="73:43" pos:end="73:45"><name pos:start="73:43" pos:end="73:45">seq</name></expr></argument>, <argument pos:start="73:48" pos:end="73:51"><expr pos:start="73:48" pos:end="73:51"><name pos:start="73:48" pos:end="73:51">data</name></expr></argument>, <argument pos:start="73:54" pos:end="73:61"><expr pos:start="73:54" pos:end="73:61"><name pos:start="73:54" pos:end="73:61">data_end</name></expr></argument>, <argument pos:start="73:64" pos:end="73:66"><expr pos:start="73:64" pos:end="73:66"><name pos:start="73:64" pos:end="73:66">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="75:21" pos:end="75:26">break;</break>

                <case pos:start="77:17" pos:end="77:23">case <expr pos:start="77:22" pos:end="77:22"><literal type="number" pos:start="77:22" pos:end="77:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="79:21" pos:end="79:68"><expr pos:start="79:21" pos:end="79:67"><name pos:start="79:21" pos:end="79:24">data</name> <operator pos:start="79:26" pos:end="79:26">=</operator> <call pos:start="79:28" pos:end="79:67"><name pos:start="79:28" pos:end="79:41">seq_decode_op3</name><argument_list pos:start="79:42" pos:end="79:67">(<argument pos:start="79:43" pos:end="79:45"><expr pos:start="79:43" pos:end="79:45"><name pos:start="79:43" pos:end="79:45">seq</name></expr></argument>, <argument pos:start="79:48" pos:end="79:51"><expr pos:start="79:48" pos:end="79:51"><name pos:start="79:48" pos:end="79:51">data</name></expr></argument>, <argument pos:start="79:54" pos:end="79:61"><expr pos:start="79:54" pos:end="79:61"><name pos:start="79:54" pos:end="79:61">data_end</name></expr></argument>, <argument pos:start="79:64" pos:end="79:66"><expr pos:start="79:64" pos:end="79:66"><name pos:start="79:64" pos:end="79:66">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="81:21" pos:end="81:26">break;</break>

                </block_content>}</block></switch>

                <if_stmt pos:start="85:17" pos:end="87:47"><if pos:start="85:17" pos:end="87:47">if <condition pos:start="85:20" pos:end="85:26">(<expr pos:start="85:21" pos:end="85:25"><operator pos:start="85:21" pos:end="85:21">!</operator><name pos:start="85:22" pos:end="85:25">data</name></expr>)</condition><block type="pseudo" pos:start="87:21" pos:end="87:47"><block_content pos:start="87:21" pos:end="87:47">

                    <return pos:start="87:21" pos:end="87:47">return <expr pos:start="87:28" pos:end="87:46"><name pos:start="87:28" pos:end="87:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></for></block_content></block></for>

    </block_content>}</block></if></if_stmt>

    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
