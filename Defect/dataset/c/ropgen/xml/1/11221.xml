<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11221.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:32"><name pos:start="1:1" pos:end="1:9">type_init</name><argument_list pos:start="1:10" pos:end="1:32">(<argument pos:start="1:11" pos:end="1:31">boston_register_types</argument>)</argument_list></macro>



<function pos:start="5:1" pos:end="137:1"><type pos:start="5:1" pos:end="5:11"><specifier pos:start="5:1" pos:end="5:6">static</specifier> <name pos:start="5:8" pos:end="5:11">void</name></type> <name pos:start="5:13" pos:end="5:24">gen_firmware</name><parameter_list pos:start="5:25" pos:end="7:37">(<parameter pos:start="5:26" pos:end="5:36"><decl pos:start="5:26" pos:end="5:36"><type pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:33">uint32_t</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:36">p</name></decl></parameter>, <parameter pos:start="5:39" pos:end="5:57"><decl pos:start="5:39" pos:end="5:57"><type pos:start="5:39" pos:end="5:57"><name pos:start="5:39" pos:end="5:44">hwaddr</name></type> <name pos:start="5:46" pos:end="5:57">kernel_entry</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:74"><decl pos:start="5:60" pos:end="5:74"><type pos:start="5:60" pos:end="5:74"><name pos:start="5:60" pos:end="5:65">hwaddr</name></type> <name pos:start="5:67" pos:end="5:74">fdt_addr</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:36"><decl pos:start="7:26" pos:end="7:36"><type pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:29">bool</name></type> <name pos:start="7:31" pos:end="7:36">is_64b</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="137:1">{<block_content pos:start="11:5" pos:end="135:27">

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:18"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:18">uint32_t</name></type> <name pos:start="11:20" pos:end="11:26">cm_base</name> <init pos:start="11:28" pos:end="11:39">= <expr pos:start="11:30" pos:end="11:39"><literal type="number" pos:start="11:30" pos:end="11:39">0x16100000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:18"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint32_t</name></type> <name pos:start="13:20" pos:end="13:27">gic_base</name> <init pos:start="13:29" pos:end="13:40">= <expr pos:start="13:31" pos:end="13:40"><literal type="number" pos:start="13:31" pos:end="13:40">0x16120000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:18"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:18">uint32_t</name></type> <name pos:start="15:20" pos:end="15:27">cpc_base</name> <init pos:start="15:29" pos:end="15:40">= <expr pos:start="15:31" pos:end="15:40"><literal type="number" pos:start="15:31" pos:end="15:40">0x16200000</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:22">/* Move CM GCRs */</comment>

    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:15">(<expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:14">is_64b</name></expr>)</condition> <block pos:start="21:17" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:31">

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><call pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:13">stl_p</name><argument_list pos:start="23:14" pos:end="23:30">(<argument pos:start="23:15" pos:end="23:17"><expr pos:start="23:15" pos:end="23:17"><name pos:start="23:15" pos:end="23:15">p</name><operator pos:start="23:16" pos:end="23:17">++</operator></expr></argument>, <argument pos:start="23:20" pos:end="23:29"><expr pos:start="23:20" pos:end="23:29"><literal type="number" pos:start="23:20" pos:end="23:29">0x40287803</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="23:49" pos:end="23:73">/* dmfc0 $8, CMGCRBase */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><call pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:13">stl_p</name><argument_list pos:start="25:14" pos:end="25:30">(<argument pos:start="25:15" pos:end="25:17"><expr pos:start="25:15" pos:end="25:17"><name pos:start="25:15" pos:end="25:15">p</name><operator pos:start="25:16" pos:end="25:17">++</operator></expr></argument>, <argument pos:start="25:20" pos:end="25:29"><expr pos:start="25:20" pos:end="25:29"><literal type="number" pos:start="25:20" pos:end="25:29">0x00084138</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="25:49" pos:end="25:68">/* dsll $8, $8, 4 */</comment>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="33:5">else <block pos:start="27:12" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:31">

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><call pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:13">stl_p</name><argument_list pos:start="29:14" pos:end="29:30">(<argument pos:start="29:15" pos:end="29:17"><expr pos:start="29:15" pos:end="29:17"><name pos:start="29:15" pos:end="29:15">p</name><operator pos:start="29:16" pos:end="29:17">++</operator></expr></argument>, <argument pos:start="29:20" pos:end="29:29"><expr pos:start="29:20" pos:end="29:29"><literal type="number" pos:start="29:20" pos:end="29:29">0x40087803</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="29:49" pos:end="29:72">/* mfc0 $8, CMGCRBase */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><call pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:13">stl_p</name><argument_list pos:start="31:14" pos:end="31:30">(<argument pos:start="31:15" pos:end="31:17"><expr pos:start="31:15" pos:end="31:17"><name pos:start="31:15" pos:end="31:15">p</name><operator pos:start="31:16" pos:end="31:17">++</operator></expr></argument>, <argument pos:start="31:20" pos:end="31:29"><expr pos:start="31:20" pos:end="31:29"><literal type="number" pos:start="31:20" pos:end="31:29">0x00084100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="31:49" pos:end="31:68">/* sll  $8, $8, 4 */</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><call pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:9">stl_p</name><argument_list pos:start="35:10" pos:end="35:26">(<argument pos:start="35:11" pos:end="35:13"><expr pos:start="35:11" pos:end="35:13"><name pos:start="35:11" pos:end="35:11">p</name><operator pos:start="35:12" pos:end="35:13">++</operator></expr></argument>, <argument pos:start="35:16" pos:end="35:25"><expr pos:start="35:16" pos:end="35:25"><literal type="number" pos:start="35:16" pos:end="35:25">0x3c09a000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="35:49" pos:end="35:69">/* lui  $9, 0xa000 */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><call pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:9">stl_p</name><argument_list pos:start="37:10" pos:end="37:26">(<argument pos:start="37:11" pos:end="37:13"><expr pos:start="37:11" pos:end="37:13"><name pos:start="37:11" pos:end="37:11">p</name><operator pos:start="37:12" pos:end="37:13">++</operator></expr></argument>, <argument pos:start="37:16" pos:end="37:25"><expr pos:start="37:16" pos:end="37:25"><literal type="number" pos:start="37:16" pos:end="37:25">0x01094025</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="37:49" pos:end="37:65">/* or   $8, $9 */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:45"><expr pos:start="39:5" pos:end="39:44"><call pos:start="39:5" pos:end="39:44"><name pos:start="39:5" pos:end="39:9">stl_p</name><argument_list pos:start="39:10" pos:end="39:44">(<argument pos:start="39:11" pos:end="39:13"><expr pos:start="39:11" pos:end="39:13"><name pos:start="39:11" pos:end="39:11">p</name><operator pos:start="39:12" pos:end="39:13">++</operator></expr></argument>, <argument pos:start="39:16" pos:end="39:43"><expr pos:start="39:16" pos:end="39:43"><literal type="number" pos:start="39:16" pos:end="39:25">0x3c0a0000</literal> <operator pos:start="39:27" pos:end="39:27">|</operator> <operator pos:start="39:29" pos:end="39:29">(</operator><name pos:start="39:30" pos:end="39:36">cm_base</name> <operator pos:start="39:38" pos:end="39:39">&gt;&gt;</operator> <literal type="number" pos:start="39:41" pos:end="39:42">16</literal><operator pos:start="39:43" pos:end="39:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="39:49" pos:end="39:77">/* lui  $10, cm_base &gt;&gt; 16 */</comment>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:14">is_64b</name></expr>)</condition> <block pos:start="41:17" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:31">

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><call pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:13">stl_p</name><argument_list pos:start="43:14" pos:end="43:30">(<argument pos:start="43:15" pos:end="43:17"><expr pos:start="43:15" pos:end="43:17"><name pos:start="43:15" pos:end="43:15">p</name><operator pos:start="43:16" pos:end="43:17">++</operator></expr></argument>, <argument pos:start="43:20" pos:end="43:29"><expr pos:start="43:20" pos:end="43:29"><literal type="number" pos:start="43:20" pos:end="43:29">0xfd0a0008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="43:49" pos:end="43:71">/* sd   $10, 0x8($8) */</comment>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="49:5">else <block pos:start="45:12" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:31">

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><call pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:13">stl_p</name><argument_list pos:start="47:14" pos:end="47:30">(<argument pos:start="47:15" pos:end="47:17"><expr pos:start="47:15" pos:end="47:17"><name pos:start="47:15" pos:end="47:15">p</name><operator pos:start="47:16" pos:end="47:17">++</operator></expr></argument>, <argument pos:start="47:20" pos:end="47:29"><expr pos:start="47:20" pos:end="47:29"><literal type="number" pos:start="47:20" pos:end="47:29">0xad0a0008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="47:49" pos:end="47:71">/* sw   $10, 0x8($8) */</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><call pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:9">stl_p</name><argument_list pos:start="51:10" pos:end="51:26">(<argument pos:start="51:11" pos:end="51:13"><expr pos:start="51:11" pos:end="51:13"><name pos:start="51:11" pos:end="51:11">p</name><operator pos:start="51:12" pos:end="51:13">++</operator></expr></argument>, <argument pos:start="51:16" pos:end="51:25"><expr pos:start="51:16" pos:end="51:25"><literal type="number" pos:start="51:16" pos:end="51:25">0x012a4025</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="51:49" pos:end="51:66">/* or   $8, $10 */</comment>



    <comment type="block" pos:start="55:5" pos:end="55:32">/* Move &amp; enable GIC GCRs */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><call pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:9">stl_p</name><argument_list pos:start="57:10" pos:end="57:45">(<argument pos:start="57:11" pos:end="57:13"><expr pos:start="57:11" pos:end="57:13"><name pos:start="57:11" pos:end="57:11">p</name><operator pos:start="57:12" pos:end="57:13">++</operator></expr></argument>, <argument pos:start="57:16" pos:end="57:44"><expr pos:start="57:16" pos:end="57:44"><literal type="number" pos:start="57:16" pos:end="57:25">0x3c090000</literal> <operator pos:start="57:27" pos:end="57:27">|</operator> <operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:37">gic_base</name> <operator pos:start="57:39" pos:end="57:40">&gt;&gt;</operator> <literal type="number" pos:start="57:42" pos:end="57:43">16</literal><operator pos:start="57:44" pos:end="57:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="57:49" pos:end="57:77">/* lui  $9, gic_base &gt;&gt; 16 */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><call pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:9">stl_p</name><argument_list pos:start="59:10" pos:end="59:26">(<argument pos:start="59:11" pos:end="59:13"><expr pos:start="59:11" pos:end="59:13"><name pos:start="59:11" pos:end="59:11">p</name><operator pos:start="59:12" pos:end="59:13">++</operator></expr></argument>, <argument pos:start="59:16" pos:end="59:25"><expr pos:start="59:16" pos:end="59:25"><literal type="number" pos:start="59:16" pos:end="59:25">0x35290001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="59:49" pos:end="59:66">/* ori  $9, 0x1 */</comment>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:15">(<expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:14">is_64b</name></expr>)</condition> <block pos:start="61:17" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:31">

        <expr_stmt pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><call pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:13">stl_p</name><argument_list pos:start="63:14" pos:end="63:30">(<argument pos:start="63:15" pos:end="63:17"><expr pos:start="63:15" pos:end="63:17"><name pos:start="63:15" pos:end="63:15">p</name><operator pos:start="63:16" pos:end="63:17">++</operator></expr></argument>, <argument pos:start="63:20" pos:end="63:29"><expr pos:start="63:20" pos:end="63:29"><literal type="number" pos:start="63:20" pos:end="63:29">0xfd090080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="63:49" pos:end="63:71">/* sd   $9, 0x80($8) */</comment>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="69:5">else <block pos:start="65:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:31">

        <expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><call pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:13">stl_p</name><argument_list pos:start="67:14" pos:end="67:30">(<argument pos:start="67:15" pos:end="67:17"><expr pos:start="67:15" pos:end="67:17"><name pos:start="67:15" pos:end="67:15">p</name><operator pos:start="67:16" pos:end="67:17">++</operator></expr></argument>, <argument pos:start="67:20" pos:end="67:29"><expr pos:start="67:20" pos:end="67:29"><literal type="number" pos:start="67:20" pos:end="67:29">0xad090080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="67:49" pos:end="67:71">/* sw   $9, 0x80($8) */</comment>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:32">/* Move &amp; enable CPC GCRs */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:46"><expr pos:start="75:5" pos:end="75:45"><call pos:start="75:5" pos:end="75:45"><name pos:start="75:5" pos:end="75:9">stl_p</name><argument_list pos:start="75:10" pos:end="75:45">(<argument pos:start="75:11" pos:end="75:13"><expr pos:start="75:11" pos:end="75:13"><name pos:start="75:11" pos:end="75:11">p</name><operator pos:start="75:12" pos:end="75:13">++</operator></expr></argument>, <argument pos:start="75:16" pos:end="75:44"><expr pos:start="75:16" pos:end="75:44"><literal type="number" pos:start="75:16" pos:end="75:25">0x3c090000</literal> <operator pos:start="75:27" pos:end="75:27">|</operator> <operator pos:start="75:29" pos:end="75:29">(</operator><name pos:start="75:30" pos:end="75:37">cpc_base</name> <operator pos:start="75:39" pos:end="75:40">&gt;&gt;</operator> <literal type="number" pos:start="75:42" pos:end="75:43">16</literal><operator pos:start="75:44" pos:end="75:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="75:49" pos:end="75:77">/* lui  $9, cpc_base &gt;&gt; 16 */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:27"><expr pos:start="77:5" pos:end="77:26"><call pos:start="77:5" pos:end="77:26"><name pos:start="77:5" pos:end="77:9">stl_p</name><argument_list pos:start="77:10" pos:end="77:26">(<argument pos:start="77:11" pos:end="77:13"><expr pos:start="77:11" pos:end="77:13"><name pos:start="77:11" pos:end="77:11">p</name><operator pos:start="77:12" pos:end="77:13">++</operator></expr></argument>, <argument pos:start="77:16" pos:end="77:25"><expr pos:start="77:16" pos:end="77:25"><literal type="number" pos:start="77:16" pos:end="77:25">0x35290001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="77:49" pos:end="77:66">/* ori  $9, 0x1 */</comment>

    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:15">(<expr pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:14">is_64b</name></expr>)</condition> <block pos:start="79:17" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:31">

        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><call pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:13">stl_p</name><argument_list pos:start="81:14" pos:end="81:30">(<argument pos:start="81:15" pos:end="81:17"><expr pos:start="81:15" pos:end="81:17"><name pos:start="81:15" pos:end="81:15">p</name><operator pos:start="81:16" pos:end="81:17">++</operator></expr></argument>, <argument pos:start="81:20" pos:end="81:29"><expr pos:start="81:20" pos:end="81:29"><literal type="number" pos:start="81:20" pos:end="81:29">0xfd090088</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="81:49" pos:end="81:71">/* sd   $9, 0x88($8) */</comment>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="87:5">else <block pos:start="83:12" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:31">

        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><call pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:13">stl_p</name><argument_list pos:start="85:14" pos:end="85:30">(<argument pos:start="85:15" pos:end="85:17"><expr pos:start="85:15" pos:end="85:17"><name pos:start="85:15" pos:end="85:15">p</name><operator pos:start="85:16" pos:end="85:17">++</operator></expr></argument>, <argument pos:start="85:20" pos:end="85:29"><expr pos:start="85:20" pos:end="85:29"><literal type="number" pos:start="85:20" pos:end="85:29">0xad090088</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block" pos:start="85:49" pos:end="85:71">/* sw   $9, 0x88($8) */</comment>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="105:7">/*

     * Setup argument registers to follow the UHI boot protocol:

     *

     * a0/$4 = -2

     * a1/$5 = virtual address of FDT

     * a2/$6 = 0

     * a3/$7 = 0

     */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:27"><expr pos:start="107:5" pos:end="107:26"><call pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:9">stl_p</name><argument_list pos:start="107:10" pos:end="107:26">(<argument pos:start="107:11" pos:end="107:13"><expr pos:start="107:11" pos:end="107:13"><name pos:start="107:11" pos:end="107:11">p</name><operator pos:start="107:12" pos:end="107:13">++</operator></expr></argument>, <argument pos:start="107:16" pos:end="107:25"><expr pos:start="107:16" pos:end="107:25"><literal type="number" pos:start="107:16" pos:end="107:25">0x2404fffe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="107:49" pos:end="107:65">/* li   $4, -2 */</comment>

                                                <comment type="block" pos:start="109:49" pos:end="109:75">/* lui  $5, hi(fdt_addr) */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:57"><expr pos:start="111:5" pos:end="111:56"><call pos:start="111:5" pos:end="111:56"><name pos:start="111:5" pos:end="111:9">stl_p</name><argument_list pos:start="111:10" pos:end="111:56">(<argument pos:start="111:11" pos:end="111:13"><expr pos:start="111:11" pos:end="111:13"><name pos:start="111:11" pos:end="111:11">p</name><operator pos:start="111:12" pos:end="111:13">++</operator></expr></argument>, <argument pos:start="111:16" pos:end="111:55"><expr pos:start="111:16" pos:end="111:55"><literal type="number" pos:start="111:16" pos:end="111:25">0x3c050000</literal> <operator pos:start="111:27" pos:end="111:27">|</operator> <operator pos:start="111:29" pos:end="111:29">(</operator><operator pos:start="111:30" pos:end="111:30">(</operator><name pos:start="111:31" pos:end="111:38">fdt_addr</name> <operator pos:start="111:40" pos:end="111:41">&gt;&gt;</operator> <literal type="number" pos:start="111:43" pos:end="111:44">16</literal><operator pos:start="111:45" pos:end="111:45">)</operator> <operator pos:start="111:47" pos:end="111:47">&amp;</operator> <literal type="number" pos:start="111:49" pos:end="111:54">0xffff</literal><operator pos:start="111:55" pos:end="111:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:26">(<expr pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:16">fdt_addr</name> <operator pos:start="113:18" pos:end="113:18">&amp;</operator> <literal type="number" pos:start="113:20" pos:end="113:25">0xffff</literal></expr>)</condition> <block pos:start="113:28" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:53">                    <comment type="block" pos:start="113:49" pos:end="113:75">/* ori  $5, lo(fdt_addr) */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:53"><expr pos:start="115:9" pos:end="115:52"><call pos:start="115:9" pos:end="115:52"><name pos:start="115:9" pos:end="115:13">stl_p</name><argument_list pos:start="115:14" pos:end="115:52">(<argument pos:start="115:15" pos:end="115:17"><expr pos:start="115:15" pos:end="115:17"><name pos:start="115:15" pos:end="115:15">p</name><operator pos:start="115:16" pos:end="115:17">++</operator></expr></argument>, <argument pos:start="115:20" pos:end="115:51"><expr pos:start="115:20" pos:end="115:51"><literal type="number" pos:start="115:20" pos:end="115:29">0x34a50000</literal> <operator pos:start="115:31" pos:end="115:31">|</operator> <operator pos:start="115:33" pos:end="115:33">(</operator><name pos:start="115:34" pos:end="115:41">fdt_addr</name> <operator pos:start="115:43" pos:end="115:43">&amp;</operator> <literal type="number" pos:start="115:45" pos:end="115:50">0xffff</literal><operator pos:start="115:51" pos:end="115:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:27"><expr pos:start="119:5" pos:end="119:26"><call pos:start="119:5" pos:end="119:26"><name pos:start="119:5" pos:end="119:9">stl_p</name><argument_list pos:start="119:10" pos:end="119:26">(<argument pos:start="119:11" pos:end="119:13"><expr pos:start="119:11" pos:end="119:13"><name pos:start="119:11" pos:end="119:11">p</name><operator pos:start="119:12" pos:end="119:13">++</operator></expr></argument>, <argument pos:start="119:16" pos:end="119:25"><expr pos:start="119:16" pos:end="119:25"><literal type="number" pos:start="119:16" pos:end="119:25">0x34060000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="119:49" pos:end="119:64">/* li   $6, 0 */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:27"><expr pos:start="121:5" pos:end="121:26"><call pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:9">stl_p</name><argument_list pos:start="121:10" pos:end="121:26">(<argument pos:start="121:11" pos:end="121:13"><expr pos:start="121:11" pos:end="121:13"><name pos:start="121:11" pos:end="121:11">p</name><operator pos:start="121:12" pos:end="121:13">++</operator></expr></argument>, <argument pos:start="121:16" pos:end="121:25"><expr pos:start="121:16" pos:end="121:25"><literal type="number" pos:start="121:16" pos:end="121:25">0x34070000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="121:49" pos:end="121:64">/* li   $7, 0 */</comment>



    <comment type="block" pos:start="125:5" pos:end="125:48">/* Load kernel entry address &amp; jump to it */</comment>

                                                <comment type="block" pos:start="127:49" pos:end="127:80">/* lui  $25, hi(kernel_entry) */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:61"><expr pos:start="129:5" pos:end="129:60"><call pos:start="129:5" pos:end="129:60"><name pos:start="129:5" pos:end="129:9">stl_p</name><argument_list pos:start="129:10" pos:end="129:60">(<argument pos:start="129:11" pos:end="129:13"><expr pos:start="129:11" pos:end="129:13"><name pos:start="129:11" pos:end="129:11">p</name><operator pos:start="129:12" pos:end="129:13">++</operator></expr></argument>, <argument pos:start="129:16" pos:end="129:59"><expr pos:start="129:16" pos:end="129:59"><literal type="number" pos:start="129:16" pos:end="129:25">0x3c190000</literal> <operator pos:start="129:27" pos:end="129:27">|</operator> <operator pos:start="129:29" pos:end="129:29">(</operator><operator pos:start="129:30" pos:end="129:30">(</operator><name pos:start="129:31" pos:end="129:42">kernel_entry</name> <operator pos:start="129:44" pos:end="129:45">&gt;&gt;</operator> <literal type="number" pos:start="129:47" pos:end="129:48">16</literal><operator pos:start="129:49" pos:end="129:49">)</operator> <operator pos:start="129:51" pos:end="129:51">&amp;</operator> <literal type="number" pos:start="129:53" pos:end="129:58">0xffff</literal><operator pos:start="129:59" pos:end="129:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                                <comment type="block" pos:start="131:49" pos:end="131:80">/* ori  $25, lo(kernel_entry) */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:53"><expr pos:start="133:5" pos:end="133:52"><call pos:start="133:5" pos:end="133:52"><name pos:start="133:5" pos:end="133:9">stl_p</name><argument_list pos:start="133:10" pos:end="133:52">(<argument pos:start="133:11" pos:end="133:13"><expr pos:start="133:11" pos:end="133:13"><name pos:start="133:11" pos:end="133:11">p</name><operator pos:start="133:12" pos:end="133:13">++</operator></expr></argument>, <argument pos:start="133:16" pos:end="133:51"><expr pos:start="133:16" pos:end="133:51"><literal type="number" pos:start="133:16" pos:end="133:25">0x37390000</literal> <operator pos:start="133:27" pos:end="133:27">|</operator> <operator pos:start="133:29" pos:end="133:29">(</operator><name pos:start="133:30" pos:end="133:41">kernel_entry</name> <operator pos:start="133:43" pos:end="133:43">&amp;</operator> <literal type="number" pos:start="133:45" pos:end="133:50">0xffff</literal><operator pos:start="133:51" pos:end="133:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:27"><expr pos:start="135:5" pos:end="135:26"><call pos:start="135:5" pos:end="135:26"><name pos:start="135:5" pos:end="135:9">stl_p</name><argument_list pos:start="135:10" pos:end="135:26">(<argument pos:start="135:11" pos:end="135:13"><expr pos:start="135:11" pos:end="135:13"><name pos:start="135:11" pos:end="135:11">p</name><operator pos:start="135:12" pos:end="135:13">++</operator></expr></argument>, <argument pos:start="135:16" pos:end="135:25"><expr pos:start="135:16" pos:end="135:25"><literal type="number" pos:start="135:16" pos:end="135:25">0x03200009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block" pos:start="135:49" pos:end="135:62">/* jr   $25 */</comment>

</block_content>}</block></function>
</unit>
