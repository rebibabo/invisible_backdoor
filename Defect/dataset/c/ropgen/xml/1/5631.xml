<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5631.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">update_pam</name><parameter_list pos:start="1:23" pos:end="3:44">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:37">PCII440FXState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">d</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:50">uint32_t</name></type> <name pos:start="1:52" pos:end="1:56">start</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:66">uint32_t</name></type> <name pos:start="1:68" pos:end="1:70">end</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:77"><decl pos:start="1:73" pos:end="1:77"><type pos:start="1:73" pos:end="1:77"><name pos:start="1:73" pos:end="1:75">int</name></type> <name pos:start="1:77" pos:end="1:77">r</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:43"><decl pos:start="3:24" pos:end="3:43"><type pos:start="3:24" pos:end="3:43"><name pos:start="3:24" pos:end="3:38">PAMMemoryRegion</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:43">mem</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:28">

    <if_stmt pos:start="7:5" pos:end="13:5"><if pos:start="7:5" pos:end="13:5">if <condition pos:start="7:8" pos:end="7:25">(<expr pos:start="7:9" pos:end="7:24"><name pos:start="7:9" pos:end="7:24"><name pos:start="7:9" pos:end="7:11">mem</name><operator pos:start="7:12" pos:end="7:13">-&gt;</operator><name pos:start="7:14" pos:end="7:24">initialized</name></name></expr>)</condition> <block pos:start="7:27" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:41">

        <expr_stmt pos:start="9:9" pos:end="9:65"><expr pos:start="9:9" pos:end="9:64"><call pos:start="9:9" pos:end="9:64"><name pos:start="9:9" pos:end="9:35">memory_region_del_subregion</name><argument_list pos:start="9:36" pos:end="9:64">(<argument pos:start="9:37" pos:end="9:52"><expr pos:start="9:37" pos:end="9:52"><name pos:start="9:37" pos:end="9:52"><name pos:start="9:37" pos:end="9:37">d</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:52">system_memory</name></name></expr></argument>, <argument pos:start="9:55" pos:end="9:63"><expr pos:start="9:55" pos:end="9:63"><operator pos:start="9:55" pos:end="9:55">&amp;</operator><name pos:start="9:56" pos:end="9:63"><name pos:start="9:56" pos:end="9:58">mem</name><operator pos:start="9:59" pos:end="9:60">-&gt;</operator><name pos:start="9:61" pos:end="9:63">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="11:9" pos:end="11:41"><expr pos:start="11:9" pos:end="11:40"><call pos:start="11:9" pos:end="11:40"><name pos:start="11:9" pos:end="11:29">memory_region_destroy</name><argument_list pos:start="11:30" pos:end="11:40">(<argument pos:start="11:31" pos:end="11:39"><expr pos:start="11:31" pos:end="11:39"><operator pos:start="11:31" pos:end="11:31">&amp;</operator><name pos:start="11:32" pos:end="11:39"><name pos:start="11:32" pos:end="11:34">mem</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:39">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="17:5" pos:end="17:65">//    printf("ISA mapping %08x-0x%08x: %d\n", start, end, r);</comment>

    <switch pos:start="19:5" pos:end="55:5">switch<condition pos:start="19:11" pos:end="19:13">(<expr pos:start="19:12" pos:end="19:12"><name pos:start="19:12" pos:end="19:12">r</name></expr>)</condition> <block pos:start="19:15" pos:end="55:5">{<block_content pos:start="21:5" pos:end="53:14">

    <case pos:start="21:5" pos:end="21:11">case <expr pos:start="21:10" pos:end="21:10"><literal type="number" pos:start="21:10" pos:end="21:10">3</literal></expr>:</case>

        <comment type="block" pos:start="23:9" pos:end="23:17">/* RAM */</comment>

        <expr_stmt pos:start="25:9" pos:end="27:53"><expr pos:start="25:9" pos:end="27:52"><call pos:start="25:9" pos:end="27:52"><name pos:start="25:9" pos:end="25:32">memory_region_init_alias</name><argument_list pos:start="25:33" pos:end="27:52">(<argument pos:start="25:34" pos:end="25:42"><expr pos:start="25:34" pos:end="25:42"><operator pos:start="25:34" pos:end="25:34">&amp;</operator><name pos:start="25:35" pos:end="25:42"><name pos:start="25:35" pos:end="25:37">mem</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:42">mem</name></name></expr></argument>, <argument pos:start="25:45" pos:end="25:53"><expr pos:start="25:45" pos:end="25:53"><literal type="string" pos:start="25:45" pos:end="25:53">"pam-ram"</literal></expr></argument>, <argument pos:start="25:56" pos:end="25:68"><expr pos:start="25:56" pos:end="25:68"><name pos:start="25:56" pos:end="25:68"><name pos:start="25:56" pos:end="25:56">d</name><operator pos:start="25:57" pos:end="25:58">-&gt;</operator><name pos:start="25:59" pos:end="25:68">ram_memory</name></name></expr></argument>,

                                 <argument pos:start="27:34" pos:end="27:38"><expr pos:start="27:34" pos:end="27:38"><name pos:start="27:34" pos:end="27:38">start</name></expr></argument>, <argument pos:start="27:41" pos:end="27:51"><expr pos:start="27:41" pos:end="27:51"><name pos:start="27:41" pos:end="27:43">end</name> <operator pos:start="27:45" pos:end="27:45">-</operator> <name pos:start="27:47" pos:end="27:51">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">1</literal></expr>:</case>

        <comment type="block" pos:start="33:9" pos:end="33:42">/* ROM (XXX: not quite correct) */</comment>

        <expr_stmt pos:start="35:9" pos:end="37:53"><expr pos:start="35:9" pos:end="37:52"><call pos:start="35:9" pos:end="37:52"><name pos:start="35:9" pos:end="35:32">memory_region_init_alias</name><argument_list pos:start="35:33" pos:end="37:52">(<argument pos:start="35:34" pos:end="35:42"><expr pos:start="35:34" pos:end="35:42"><operator pos:start="35:34" pos:end="35:34">&amp;</operator><name pos:start="35:35" pos:end="35:42"><name pos:start="35:35" pos:end="35:37">mem</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:42">mem</name></name></expr></argument>, <argument pos:start="35:45" pos:end="35:53"><expr pos:start="35:45" pos:end="35:53"><literal type="string" pos:start="35:45" pos:end="35:53">"pam-rom"</literal></expr></argument>, <argument pos:start="35:56" pos:end="35:68"><expr pos:start="35:56" pos:end="35:68"><name pos:start="35:56" pos:end="35:68"><name pos:start="35:56" pos:end="35:56">d</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:68">ram_memory</name></name></expr></argument>,

                                 <argument pos:start="37:34" pos:end="37:38"><expr pos:start="37:34" pos:end="37:38"><name pos:start="37:34" pos:end="37:38">start</name></expr></argument>, <argument pos:start="37:41" pos:end="37:51"><expr pos:start="37:41" pos:end="37:51"><name pos:start="37:41" pos:end="37:43">end</name> <operator pos:start="37:45" pos:end="37:45">-</operator> <name pos:start="37:47" pos:end="37:51">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:52"><expr pos:start="39:9" pos:end="39:51"><call pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:34">memory_region_set_readonly</name><argument_list pos:start="39:35" pos:end="39:51">(<argument pos:start="39:36" pos:end="39:44"><expr pos:start="39:36" pos:end="39:44"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:44"><name pos:start="39:37" pos:end="39:39">mem</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:44">mem</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:50"><expr pos:start="39:47" pos:end="39:50"><name pos:start="39:47" pos:end="39:50">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">2</literal></expr>:</case>

    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">0</literal></expr>:</case>

        <comment type="block" pos:start="47:9" pos:end="47:54">/* XXX: should distinguish read/write cases */</comment>

        <expr_stmt pos:start="49:9" pos:end="51:53"><expr pos:start="49:9" pos:end="51:52"><call pos:start="49:9" pos:end="51:52"><name pos:start="49:9" pos:end="49:32">memory_region_init_alias</name><argument_list pos:start="49:33" pos:end="51:52">(<argument pos:start="49:34" pos:end="49:42"><expr pos:start="49:34" pos:end="49:42"><operator pos:start="49:34" pos:end="49:34">&amp;</operator><name pos:start="49:35" pos:end="49:42"><name pos:start="49:35" pos:end="49:37">mem</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:42">mem</name></name></expr></argument>, <argument pos:start="49:45" pos:end="49:53"><expr pos:start="49:45" pos:end="49:53"><literal type="string" pos:start="49:45" pos:end="49:53">"pam-pci"</literal></expr></argument>, <argument pos:start="49:56" pos:end="49:75"><expr pos:start="49:56" pos:end="49:75"><name pos:start="49:56" pos:end="49:75"><name pos:start="49:56" pos:end="49:56">d</name><operator pos:start="49:57" pos:end="49:58">-&gt;</operator><name pos:start="49:59" pos:end="49:75">pci_address_space</name></name></expr></argument>,

                                 <argument pos:start="51:34" pos:end="51:38"><expr pos:start="51:34" pos:end="51:38"><name pos:start="51:34" pos:end="51:38">start</name></expr></argument>, <argument pos:start="51:41" pos:end="51:51"><expr pos:start="51:41" pos:end="51:51"><name pos:start="51:41" pos:end="51:43">end</name> <operator pos:start="51:45" pos:end="51:45">-</operator> <name pos:start="51:47" pos:end="51:51">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="57:5" pos:end="59:61"><expr pos:start="57:5" pos:end="59:60"><call pos:start="57:5" pos:end="59:60"><name pos:start="57:5" pos:end="57:39">memory_region_add_subregion_overlap</name><argument_list pos:start="57:40" pos:end="59:60">(<argument pos:start="57:41" pos:end="57:56"><expr pos:start="57:41" pos:end="57:56"><name pos:start="57:41" pos:end="57:56"><name pos:start="57:41" pos:end="57:41">d</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:56">system_memory</name></name></expr></argument>,

                                        <argument pos:start="59:41" pos:end="59:45"><expr pos:start="59:41" pos:end="59:45"><name pos:start="59:41" pos:end="59:45">start</name></expr></argument>, <argument pos:start="59:48" pos:end="59:56"><expr pos:start="59:48" pos:end="59:56"><operator pos:start="59:48" pos:end="59:48">&amp;</operator><name pos:start="59:49" pos:end="59:56"><name pos:start="59:49" pos:end="59:51">mem</name><operator pos:start="59:52" pos:end="59:53">-&gt;</operator><name pos:start="59:54" pos:end="59:56">mem</name></name></expr></argument>, <argument pos:start="59:59" pos:end="59:59"><expr pos:start="59:59" pos:end="59:59"><literal type="number" pos:start="59:59" pos:end="59:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:28"><expr pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:7">mem</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:20">initialized</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:27">true</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
