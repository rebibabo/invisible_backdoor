<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2962.c" pos:tabs="8"><function pos:start="1:1" pos:end="94:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">rtp_parse_mp4_au</name><parameter_list pos:start="1:28" pos:end="1:67">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">RTPDemuxContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="94:13">{<block_content pos:start="5:5" pos:end="94:13">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:25">au_headers_length</name></decl>, <decl pos:start="5:28" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:41">au_header_size</name></decl>, <decl pos:start="5:44" pos:end="5:44"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:44" pos:end="5:44">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:31">getbitcontext</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">RTPPayloadData</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">infos</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:9">infos</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:31"><name pos:start="13:13" pos:end="13:13">s</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:31">rtp_payload_data</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="19:18"><if pos:start="17:5" pos:end="19:18">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:13">infos</name> <operator pos:start="17:15" pos:end="17:16">==</operator> <name pos:start="17:18" pos:end="17:21">NULL</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:18"><block_content pos:start="19:9" pos:end="19:18">

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="25:24">/* decode the first 2 bytes where the AUHeader sections are stored

       length in bits */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:21">au_headers_length</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:31">AV_RB16</name><argument_list pos:start="27:32" pos:end="27:36">(<argument pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="33:16"><if pos:start="31:5" pos:end="33:16">if <condition pos:start="31:8" pos:end="31:50">(<expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:25">au_headers_length</name> <operator pos:start="31:27" pos:end="31:27">&gt;</operator> <name pos:start="31:29" pos:end="31:49">RTP_MAX_PACKET_LENGTH</name></expr>)</condition><block type="pseudo" pos:start="33:7" pos:end="33:16"><block_content pos:start="33:7" pos:end="33:16">

      <return pos:start="33:7" pos:end="33:16">return <expr pos:start="33:14" pos:end="33:15"><operator pos:start="33:14" pos:end="33:14">-</operator><literal type="number" pos:start="33:15" pos:end="33:15">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:65"><expr pos:start="37:5" pos:end="37:64"><name pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:9">infos</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:34">au_headers_length_bytes</name></name> <operator pos:start="37:36" pos:end="37:36">=</operator> <operator pos:start="37:38" pos:end="37:38">(</operator><name pos:start="37:39" pos:end="37:55">au_headers_length</name> <operator pos:start="37:57" pos:end="37:57">+</operator> <literal type="number" pos:start="37:59" pos:end="37:59">7</literal><operator pos:start="37:60" pos:end="37:60">)</operator> <operator pos:start="37:62" pos:end="37:62">/</operator> <literal type="number" pos:start="37:64" pos:end="37:64">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:50">/* skip AU headers length section (2 bytes) */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:13"><expr pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:7">buf</name> <operator pos:start="43:9" pos:end="43:10">+=</operator> <literal type="number" pos:start="43:12" pos:end="43:12">2</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:75"><expr pos:start="47:5" pos:end="47:74"><call pos:start="47:5" pos:end="47:74"><name pos:start="47:5" pos:end="47:17">init_get_bits</name><argument_list pos:start="47:18" pos:end="47:74">(<argument pos:start="47:19" pos:end="47:32"><expr pos:start="47:19" pos:end="47:32"><operator pos:start="47:19" pos:end="47:19">&amp;</operator><name pos:start="47:20" pos:end="47:32">getbitcontext</name></expr></argument>, <argument pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:37">buf</name></expr></argument>, <argument pos:start="47:40" pos:end="47:73"><expr pos:start="47:40" pos:end="47:73"><name pos:start="47:40" pos:end="47:69"><name pos:start="47:40" pos:end="47:44">infos</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:69">au_headers_length_bytes</name></name> <operator pos:start="47:71" pos:end="47:71">*</operator> <literal type="number" pos:start="47:73" pos:end="47:73">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:83">/* XXX: Wrong if optionnal additional sections are present (cts, dts etc...) */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:60"><expr pos:start="53:5" pos:end="53:59"><name pos:start="53:5" pos:end="53:18">au_header_size</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:38"><name pos:start="53:22" pos:end="53:26">infos</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:38">sizelength</name></name> <operator pos:start="53:40" pos:end="53:40">+</operator> <name pos:start="53:42" pos:end="53:59"><name pos:start="53:42" pos:end="53:46">infos</name><operator pos:start="53:47" pos:end="53:48">-&gt;</operator><name pos:start="53:49" pos:end="53:59">indexlength</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:18"><if pos:start="55:5" pos:end="57:18">if <condition pos:start="55:8" pos:end="55:73">(<expr pos:start="55:9" pos:end="55:72"><name pos:start="55:9" pos:end="55:22">au_header_size</name> <operator pos:start="55:24" pos:end="55:25">&lt;=</operator> <literal type="number" pos:start="55:27" pos:end="55:27">0</literal> <operator pos:start="55:29" pos:end="55:30">||</operator> <operator pos:start="55:32" pos:end="55:32">(</operator><name pos:start="55:33" pos:end="55:49">au_headers_length</name> <operator pos:start="55:51" pos:end="55:51">%</operator> <name pos:start="55:53" pos:end="55:66">au_header_size</name> <operator pos:start="55:68" pos:end="55:69">!=</operator> <literal type="number" pos:start="55:71" pos:end="55:71">0</literal><operator pos:start="55:72" pos:end="55:72">)</operator></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:18"><block_content pos:start="57:9" pos:end="57:18">

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:62"><expr pos:start="61:5" pos:end="61:61"><name pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:9">infos</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:24">nb_au_headers</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <name pos:start="61:28" pos:end="61:44">au_headers_length</name> <operator pos:start="61:46" pos:end="61:46">/</operator> <name pos:start="61:48" pos:end="61:61">au_header_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:83"><expr pos:start="65:5" pos:end="65:82"><name pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:9">infos</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:21">au_headers</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:82"><name pos:start="65:25" pos:end="65:33">av_malloc</name><argument_list pos:start="65:34" pos:end="65:82">(<argument pos:start="65:35" pos:end="65:81"><expr pos:start="65:35" pos:end="65:81"><sizeof pos:start="65:35" pos:end="65:58">sizeof<argument_list pos:start="65:41" pos:end="65:58">(<argument pos:start="65:42" pos:end="65:57"><expr pos:start="65:42" pos:end="65:57">struct <name pos:start="65:49" pos:end="65:57">AUHeaders</name></expr></argument>)</argument_list></sizeof> <operator pos:start="65:60" pos:end="65:60">*</operator> <name pos:start="65:62" pos:end="65:81"><name pos:start="65:62" pos:end="65:66">infos</name><operator pos:start="65:67" pos:end="65:68">-&gt;</operator><name pos:start="65:69" pos:end="65:81">nb_au_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="71:5" pos:end="75:63">/* XXX: We handle multiple AU Section as only one (need to fix this for interleaving)

       In my test, the FAAD decoder does not behave correctly when sending each AU one by one

       but does when sending the whole as one big packet...  */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:24"><name pos:start="77:5" pos:end="77:9">infos</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:21">au_headers</name><index pos:start="77:22" pos:end="77:24">[<expr pos:start="77:23" pos:end="77:23"><literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>]</index></name><operator pos:start="77:25" pos:end="77:25">.</operator><name pos:start="77:26" pos:end="77:29">size</name> <operator pos:start="77:31" pos:end="77:31">=</operator> <literal type="number" pos:start="77:33" pos:end="77:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:35"><expr pos:start="79:5" pos:end="79:34"><name pos:start="79:5" pos:end="79:24"><name pos:start="79:5" pos:end="79:9">infos</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:21">au_headers</name><index pos:start="79:22" pos:end="79:24">[<expr pos:start="79:23" pos:end="79:23"><literal type="number" pos:start="79:23" pos:end="79:23">0</literal></expr>]</index></name><operator pos:start="79:25" pos:end="79:25">.</operator><name pos:start="79:26" pos:end="79:30">index</name> <operator pos:start="79:32" pos:end="79:32">=</operator> <literal type="number" pos:start="79:34" pos:end="79:34">0</literal></expr>;</expr_stmt>

    <for pos:start="81:5" pos:end="94:13">for <control pos:start="81:9" pos:end="81:46">(<init pos:start="81:10" pos:end="81:15"><expr pos:start="81:10" pos:end="81:14"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>;</init> <condition pos:start="81:17" pos:end="81:41"><expr pos:start="81:17" pos:end="81:40"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <name pos:start="81:21" pos:end="81:40"><name pos:start="81:21" pos:end="81:25">infos</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:40">nb_au_headers</name></name></expr>;</condition> <incr pos:start="81:43" pos:end="81:45"><expr pos:start="81:43" pos:end="81:45"><operator pos:start="81:43" pos:end="81:44">++</operator><name pos:start="81:45" pos:end="81:45">i</name></expr></incr>)</control> <block pos:start="81:48" pos:end="94:13">{<block_content pos:start="83:9" pos:end="94:13">

        <expr_stmt pos:start="83:9" pos:end="83:86"><expr pos:start="83:9" pos:end="83:85"><name pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:13">infos</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:25">au_headers</name><index pos:start="83:26" pos:end="83:28">[<expr pos:start="83:27" pos:end="83:27"><literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>]</index></name><operator pos:start="83:29" pos:end="83:29">.</operator><name pos:start="83:30" pos:end="83:33">size</name> <operator pos:start="83:35" pos:end="83:36">+=</operator> <call pos:start="83:38" pos:end="83:85"><name pos:start="83:38" pos:end="83:50">get_bits_long</name><argument_list pos:start="83:51" pos:end="83:85">(<argument pos:start="83:52" pos:end="83:65"><expr pos:start="83:52" pos:end="83:65"><operator pos:start="83:52" pos:end="83:52">&amp;</operator><name pos:start="83:53" pos:end="83:65">getbitcontext</name></expr></argument>, <argument pos:start="83:68" pos:end="83:84"><expr pos:start="83:68" pos:end="83:84"><name pos:start="83:68" pos:end="83:84"><name pos:start="83:68" pos:end="83:72">infos</name><operator pos:start="83:73" pos:end="83:74">-&gt;</operator><name pos:start="83:75" pos:end="83:84">sizelength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:87"><expr pos:start="85:9" pos:end="85:86"><name pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:13">infos</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:25">au_headers</name><index pos:start="85:26" pos:end="85:28">[<expr pos:start="85:27" pos:end="85:27"><literal type="number" pos:start="85:27" pos:end="85:27">0</literal></expr>]</index></name><operator pos:start="85:29" pos:end="85:29">.</operator><name pos:start="85:30" pos:end="85:34">index</name> <operator pos:start="85:36" pos:end="85:36">=</operator> <call pos:start="85:38" pos:end="85:86"><name pos:start="85:38" pos:end="85:50">get_bits_long</name><argument_list pos:start="85:51" pos:end="85:86">(<argument pos:start="85:52" pos:end="85:65"><expr pos:start="85:52" pos:end="85:65"><operator pos:start="85:52" pos:end="85:52">&amp;</operator><name pos:start="85:53" pos:end="85:65">getbitcontext</name></expr></argument>, <argument pos:start="85:68" pos:end="85:85"><expr pos:start="85:68" pos:end="85:85"><name pos:start="85:68" pos:end="85:85"><name pos:start="85:68" pos:end="85:72">infos</name><operator pos:start="85:73" pos:end="85:74">-&gt;</operator><name pos:start="85:75" pos:end="85:85">indexlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="90:5" pos:end="90:29"><expr pos:start="90:5" pos:end="90:28"><name pos:start="90:5" pos:end="90:24"><name pos:start="90:5" pos:end="90:9">infos</name><operator pos:start="90:10" pos:end="90:11">-&gt;</operator><name pos:start="90:12" pos:end="90:24">nb_au_headers</name></name> <operator pos:start="90:26" pos:end="90:26">=</operator> <literal type="number" pos:start="90:28" pos:end="90:28">1</literal></expr>;</expr_stmt>



    <return pos:start="94:5" pos:end="94:13">return <expr pos:start="94:12" pos:end="94:12"><literal type="number" pos:start="94:12" pos:end="94:12">0</literal></expr>;</return></block_content></block></for></block_content></block></function>
</unit>
