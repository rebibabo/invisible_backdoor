<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5916.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">kvm_handle_debug</name><parameter_list pos:start="1:28" pos:end="1:65">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:38">PowerPCCPU</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">cpu</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:64"><decl pos:start="1:46" pos:end="1:64"><type pos:start="1:46" pos:end="1:64"><name pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:51">struct</name> <name pos:start="1:53" pos:end="1:59">kvm_run</name></name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">run</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:18">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUPPCState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:61"><decl pos:start="9:5" pos:end="9:60"><type pos:start="9:5" pos:end="9:32"><name pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:30">kvm_debug_exit_arch</name></name> <modifier pos:start="9:32" pos:end="9:32">*</modifier></type><name pos:start="9:33" pos:end="9:41">arch_info</name> <init pos:start="9:43" pos:end="9:60">= <expr pos:start="9:45" pos:end="9:60"><operator pos:start="9:45" pos:end="9:45">&amp;</operator><name pos:start="9:46" pos:end="9:60"><name pos:start="9:46" pos:end="9:48">run</name><operator pos:start="9:49" pos:end="9:50">-&gt;</operator><name pos:start="9:51" pos:end="9:55">debug</name><operator pos:start="9:56" pos:end="9:56">.</operator><name pos:start="9:57" pos:end="9:60">arch</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">handle</name> <init pos:start="11:16" pos:end="11:18">= <expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="57:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:55">(<expr pos:start="15:9" pos:end="15:54"><call pos:start="15:9" pos:end="15:54"><name pos:start="15:9" pos:end="15:30">kvm_find_sw_breakpoint</name><argument_list pos:start="15:31" pos:end="15:54">(<argument pos:start="15:32" pos:end="15:33"><expr pos:start="15:32" pos:end="15:33"><name pos:start="15:32" pos:end="15:33">cs</name></expr></argument>, <argument pos:start="15:36" pos:end="15:53"><expr pos:start="15:36" pos:end="15:53"><name pos:start="15:36" pos:end="15:53"><name pos:start="15:36" pos:end="15:44">arch_info</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:53">address</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:57" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <expr_stmt pos:start="17:9" pos:end="17:19"><expr pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:14">handle</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="57:5">else <block pos:start="19:12" pos:end="57:5">{<block_content pos:start="41:9" pos:end="55:33">

        <comment type="block" pos:start="21:9" pos:end="37:11">/* QEMU is not able to handle debug exception, so inject

         * program exception to guest;

         * Yes program exception NOT debug exception !!

         * For software breakpoint QEMU uses a privileged instruction;

         * So there cannot be any reason that we are here for guest

         * set debug exception, only possibility is guest executed a

         * privileged / illegal instruction and that's why we are

         * injecting a program interrupt.

         */</comment>



        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><call pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:29">cpu_synchronize_state</name><argument_list pos:start="41:30" pos:end="41:33">(<argument pos:start="41:31" pos:end="41:32"><expr pos:start="41:31" pos:end="41:32"><name pos:start="41:31" pos:end="41:32">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="47:11">/* env-&gt;nip is PC, so increment this by 4 to use

         * ppc_cpu_do_interrupt(), which set srr0 = env-&gt;nip - 4.

         */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:11">env</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:16">nip</name></name> <operator pos:start="49:18" pos:end="49:19">+=</operator> <literal type="number" pos:start="49:21" pos:end="49:21">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:10">cs</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:27">exception_index</name></name> <operator pos:start="51:29" pos:end="51:29">=</operator> <name pos:start="51:31" pos:end="51:50">POWERPC_EXCP_PROGRAM</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:45"><expr pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:11">env</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:23">error_code</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:44">POWERPC_EXCP_INVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><call pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:28">ppc_cpu_do_interrupt</name><argument_list pos:start="55:29" pos:end="55:32">(<argument pos:start="55:30" pos:end="55:31"><expr pos:start="55:30" pos:end="55:31"><name pos:start="55:30" pos:end="55:31">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="61:5" pos:end="61:18">return <expr pos:start="61:12" pos:end="61:17"><name pos:start="61:12" pos:end="61:17">handle</name></expr>;</return>

</block_content>}</block></function>
</unit>
