<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1471.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">MMSSCPacketType</name></type> <name pos:start="1:24" pos:end="1:46">get_tcp_server_response</name><parameter_list pos:start="1:47" pos:end="1:65">(<parameter pos:start="1:48" pos:end="1:64"><decl pos:start="1:48" pos:end="1:64"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:58">MMSTContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">mmst</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="267:1">{<block_content pos:start="5:5" pos:end="265:5">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">read_result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19">MMSSCPacketType</name></type> <name pos:start="7:21" pos:end="7:31">packet_type</name><init pos:start="7:32" pos:end="7:35">= <expr pos:start="7:34" pos:end="7:35"><operator pos:start="7:34" pos:end="7:34">-</operator><literal type="number" pos:start="7:35" pos:end="7:35">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">MMSContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">mms</name> <init pos:start="9:21" pos:end="9:32">= <expr pos:start="9:23" pos:end="9:32"><operator pos:start="9:23" pos:end="9:23">&amp;</operator><name pos:start="9:24" pos:end="9:32"><name pos:start="9:24" pos:end="9:27">mmst</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">mms</name></name></expr></init></decl>;</decl_stmt>

    <for pos:start="11:5" pos:end="265:5">for<control pos:start="11:8" pos:end="11:11">(<init pos:start="11:9" pos:end="11:9">;</init><condition pos:start="11:10" pos:end="11:10">;</condition><incr/>)</control> <block pos:start="11:13" pos:end="265:5">{<block_content pos:start="13:9" pos:end="263:27">

        <expr_stmt pos:start="13:9" pos:end="13:72"><expr pos:start="13:9" pos:end="13:71"><name pos:start="13:9" pos:end="13:19">read_result</name> <operator pos:start="13:21" pos:end="13:21">=</operator> <call pos:start="13:23" pos:end="13:71"><name pos:start="13:23" pos:end="13:39">url_read_complete</name><argument_list pos:start="13:40" pos:end="13:71">(<argument pos:start="13:41" pos:end="13:51"><expr pos:start="13:41" pos:end="13:51"><name pos:start="13:41" pos:end="13:51"><name pos:start="13:41" pos:end="13:43">mms</name><operator pos:start="13:44" pos:end="13:45">-&gt;</operator><name pos:start="13:46" pos:end="13:51">mms_hd</name></name></expr></argument>, <argument pos:start="13:54" pos:end="13:67"><expr pos:start="13:54" pos:end="13:67"><name pos:start="13:54" pos:end="13:67"><name pos:start="13:54" pos:end="13:56">mms</name><operator pos:start="13:57" pos:end="13:58">-&gt;</operator><name pos:start="13:59" pos:end="13:67">in_buffer</name></name></expr></argument>, <argument pos:start="13:70" pos:end="13:70"><expr pos:start="13:70" pos:end="13:70"><literal type="number" pos:start="13:70" pos:end="13:70">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="39:9"><if pos:start="15:9" pos:end="39:9">if <condition pos:start="15:12" pos:end="15:29">(<expr pos:start="15:13" pos:end="15:28"><name pos:start="15:13" pos:end="15:23">read_result</name> <operator pos:start="15:25" pos:end="15:26">!=</operator> <literal type="number" pos:start="15:28" pos:end="15:28">8</literal></expr>)</condition> <block pos:start="15:31" pos:end="39:9">{<block_content pos:start="17:13" pos:end="37:31">

            <if_stmt pos:start="17:13" pos:end="35:13"><if pos:start="17:13" pos:end="27:13">if<condition pos:start="17:15" pos:end="17:31">(<expr pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:26">read_result</name> <operator pos:start="17:28" pos:end="17:28">&lt;</operator> <literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr>)</condition> <block pos:start="17:33" pos:end="27:13">{<block_content pos:start="19:17" pos:end="25:44">

                <expr_stmt pos:start="19:17" pos:end="23:59"><expr pos:start="19:17" pos:end="23:58"><call pos:start="19:17" pos:end="23:58"><name pos:start="19:17" pos:end="19:22">av_log</name><argument_list pos:start="19:23" pos:end="23:58">(<argument pos:start="19:24" pos:end="19:27"><expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></argument>, <argument pos:start="19:30" pos:end="19:41"><expr pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="21:24" pos:end="21:63"><expr pos:start="21:24" pos:end="21:63"><literal type="string" pos:start="21:24" pos:end="21:63">"Error reading packet header: %d (%s)\n"</literal></expr></argument>,

                       <argument pos:start="23:24" pos:end="23:34"><expr pos:start="23:24" pos:end="23:34"><name pos:start="23:24" pos:end="23:34">read_result</name></expr></argument>, <argument pos:start="23:37" pos:end="23:57"><expr pos:start="23:37" pos:end="23:57"><call pos:start="23:37" pos:end="23:57"><name pos:start="23:37" pos:end="23:44">strerror</name><argument_list pos:start="23:45" pos:end="23:57">(<argument pos:start="23:46" pos:end="23:56"><expr pos:start="23:46" pos:end="23:56"><name pos:start="23:46" pos:end="23:56">read_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="25:17" pos:end="25:44"><expr pos:start="25:17" pos:end="25:43"><name pos:start="25:17" pos:end="25:27">packet_type</name> <operator pos:start="25:29" pos:end="25:29">=</operator> <name pos:start="25:31" pos:end="25:43">SC_PKT_CANCEL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="27:15" pos:end="35:13">else <block pos:start="27:20" pos:end="35:13">{<block_content pos:start="29:17" pos:end="33:45">

                <expr_stmt pos:start="29:17" pos:end="31:61"><expr pos:start="29:17" pos:end="31:60"><call pos:start="29:17" pos:end="31:60"><name pos:start="29:17" pos:end="29:22">av_log</name><argument_list pos:start="29:23" pos:end="31:60">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">NULL</name></expr></argument>, <argument pos:start="29:30" pos:end="29:41"><expr pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="31:24" pos:end="31:59"><expr pos:start="31:24" pos:end="31:59"><literal type="string" pos:start="31:24" pos:end="31:59">"The server closed the connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:45"><expr pos:start="33:17" pos:end="33:44"><name pos:start="33:17" pos:end="33:27">packet_type</name> <operator pos:start="33:29" pos:end="33:29">=</operator> <name pos:start="33:31" pos:end="33:44">SC_PKT_NO_DATA</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <return pos:start="37:13" pos:end="37:31">return <expr pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:30">packet_type</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="43:9" pos:end="43:33">// handle command packet.</comment>

        <if_stmt pos:start="45:9" pos:end="241:9"><if pos:start="45:9" pos:end="127:9">if<condition pos:start="45:11" pos:end="45:51">(<expr pos:start="45:12" pos:end="45:50"><call pos:start="45:12" pos:end="45:38"><name pos:start="45:12" pos:end="45:18">AV_RL32</name><argument_list pos:start="45:19" pos:end="45:38">(<argument pos:start="45:20" pos:end="45:37"><expr pos:start="45:20" pos:end="45:37"><name pos:start="45:20" pos:end="45:33"><name pos:start="45:20" pos:end="45:22">mms</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:33">in_buffer</name></name> <operator pos:start="45:35" pos:end="45:35">+</operator> <literal type="number" pos:start="45:37" pos:end="45:37">4</literal></expr></argument>)</argument_list></call><operator pos:start="45:39" pos:end="45:40">==</operator><literal type="number" pos:start="45:41" pos:end="45:50">0xb00bface</literal></expr>)</condition> <block pos:start="45:53" pos:end="127:9">{<block_content pos:start="47:13" pos:end="125:13">

            <decl_stmt pos:start="47:13" pos:end="47:37"><decl pos:start="47:13" pos:end="47:32"><type pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">int</name></type> <name pos:start="47:17" pos:end="47:32">length_remaining</name></decl>, <decl pos:start="47:35" pos:end="47:36"><type ref="prev" pos:start="47:13" pos:end="47:15"/><name pos:start="47:35" pos:end="47:36">hr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="51:13" pos:end="51:52"><expr pos:start="51:13" pos:end="51:51"><name pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:16">mmst</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:32">incoming_flags</name></name><operator pos:start="51:33" pos:end="51:33">=</operator> <name pos:start="51:35" pos:end="51:51"><name pos:start="51:35" pos:end="51:37">mms</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:48">in_buffer</name><index pos:start="51:49" pos:end="51:51">[<expr pos:start="51:50" pos:end="51:50"><literal type="number" pos:start="51:50" pos:end="51:50">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:77"><expr pos:start="53:13" pos:end="53:76"><name pos:start="53:13" pos:end="53:23">read_result</name><operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="53:76"><name pos:start="53:26" pos:end="53:42">url_read_complete</name><argument_list pos:start="53:43" pos:end="53:76">(<argument pos:start="53:44" pos:end="53:54"><expr pos:start="53:44" pos:end="53:54"><name pos:start="53:44" pos:end="53:54"><name pos:start="53:44" pos:end="53:46">mms</name><operator pos:start="53:47" pos:end="53:48">-&gt;</operator><name pos:start="53:49" pos:end="53:54">mms_hd</name></name></expr></argument>, <argument pos:start="53:57" pos:end="53:72"><expr pos:start="53:57" pos:end="53:72"><name pos:start="53:57" pos:end="53:70"><name pos:start="53:57" pos:end="53:59">mms</name><operator pos:start="53:60" pos:end="53:61">-&gt;</operator><name pos:start="53:62" pos:end="53:70">in_buffer</name></name><operator pos:start="53:71" pos:end="53:71">+</operator><literal type="number" pos:start="53:72" pos:end="53:72">8</literal></expr></argument>, <argument pos:start="53:75" pos:end="53:75"><expr pos:start="53:75" pos:end="53:75"><literal type="number" pos:start="53:75" pos:end="53:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="69:13"><if pos:start="55:13" pos:end="69:13">if<condition pos:start="55:15" pos:end="55:32">(<expr pos:start="55:16" pos:end="55:31"><name pos:start="55:16" pos:end="55:26">read_result</name> <operator pos:start="55:28" pos:end="55:29">!=</operator> <literal type="number" pos:start="55:31" pos:end="55:31">4</literal></expr>)</condition> <block pos:start="55:34" pos:end="69:13">{<block_content pos:start="57:17" pos:end="67:66">

                <expr_stmt pos:start="57:17" pos:end="65:63"><expr pos:start="57:17" pos:end="65:62"><call pos:start="57:17" pos:end="65:62"><name pos:start="57:17" pos:end="57:22">av_log</name><argument_list pos:start="57:23" pos:end="65:62">(<argument pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">NULL</name></expr></argument>, <argument pos:start="57:30" pos:end="57:41"><expr pos:start="57:30" pos:end="57:41"><name pos:start="57:30" pos:end="57:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="59:24" pos:end="59:72"><expr pos:start="59:24" pos:end="59:72"><literal type="string" pos:start="59:24" pos:end="59:72">"Reading command packet length failed: %d (%s)\n"</literal></expr></argument>,

                       <argument pos:start="61:24" pos:end="61:34"><expr pos:start="61:24" pos:end="61:34"><name pos:start="61:24" pos:end="61:34">read_result</name></expr></argument>,

                       <argument pos:start="63:24" pos:end="65:61"><expr pos:start="63:24" pos:end="65:61"><ternary pos:start="63:24" pos:end="65:61"><condition pos:start="63:24" pos:end="63:40"><expr pos:start="63:24" pos:end="63:38"><name pos:start="63:24" pos:end="63:34">read_result</name> <operator pos:start="63:36" pos:end="63:36">&lt;</operator> <literal type="number" pos:start="63:38" pos:end="63:38">0</literal></expr> ?</condition><then pos:start="63:42" pos:end="63:62"> <expr pos:start="63:42" pos:end="63:62"><call pos:start="63:42" pos:end="63:62"><name pos:start="63:42" pos:end="63:49">strerror</name><argument_list pos:start="63:50" pos:end="63:62">(<argument pos:start="63:51" pos:end="63:61"><expr pos:start="63:51" pos:end="63:61"><name pos:start="63:51" pos:end="63:61">read_result</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="63:64" pos:end="65:61">:

                           <expr pos:start="65:28" pos:end="65:61"><literal type="string" pos:start="65:28" pos:end="65:61">"The server closed the connection"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="67:17" pos:end="67:66">return <expr pos:start="67:24" pos:end="67:65"><ternary pos:start="67:24" pos:end="67:65"><condition pos:start="67:24" pos:end="67:40"><expr pos:start="67:24" pos:end="67:38"><name pos:start="67:24" pos:end="67:34">read_result</name> <operator pos:start="67:36" pos:end="67:36">&lt;</operator> <literal type="number" pos:start="67:38" pos:end="67:38">0</literal></expr> ?</condition><then pos:start="67:42" pos:end="67:52"> <expr pos:start="67:42" pos:end="67:52"><name pos:start="67:42" pos:end="67:52">read_result</name></expr> </then><else pos:start="67:54" pos:end="67:65">: <expr pos:start="67:56" pos:end="67:65"><name pos:start="67:56" pos:end="67:65">AVERROR_IO</name></expr></else></ternary></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:60"><expr pos:start="73:13" pos:end="73:59"><name pos:start="73:13" pos:end="73:28">length_remaining</name><operator pos:start="73:29" pos:end="73:29">=</operator> <call pos:start="73:31" pos:end="73:55"><name pos:start="73:31" pos:end="73:37">AV_RL32</name><argument_list pos:start="73:38" pos:end="73:55">(<argument pos:start="73:39" pos:end="73:54"><expr pos:start="73:39" pos:end="73:54"><name pos:start="73:39" pos:end="73:52"><name pos:start="73:39" pos:end="73:41">mms</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:52">in_buffer</name></name><operator pos:start="73:53" pos:end="73:53">+</operator><literal type="number" pos:start="73:54" pos:end="73:54">8</literal></expr></argument>)</argument_list></call> <operator pos:start="73:57" pos:end="73:57">+</operator> <literal type="number" pos:start="73:59" pos:end="73:59">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:72"><expr pos:start="75:13" pos:end="75:71"><call pos:start="75:13" pos:end="75:71"><name pos:start="75:13" pos:end="75:19">av_dlog</name><argument_list pos:start="75:20" pos:end="75:71">(<argument pos:start="75:21" pos:end="75:24"><expr pos:start="75:21" pos:end="75:24"><name pos:start="75:21" pos:end="75:24">NULL</name></expr></argument>, <argument pos:start="75:27" pos:end="75:52"><expr pos:start="75:27" pos:end="75:52"><literal type="string" pos:start="75:27" pos:end="75:52">"Length remaining is %d\n"</literal></expr></argument>, <argument pos:start="75:55" pos:end="75:70"><expr pos:start="75:55" pos:end="75:70"><name pos:start="75:55" pos:end="75:70">length_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="77:13" pos:end="77:43">// read the rest of the packet.</comment>

            <if_stmt pos:start="79:13" pos:end="91:13"><if pos:start="79:13" pos:end="91:13">if <condition pos:start="79:16" pos:end="81:66">(<expr pos:start="79:17" pos:end="81:65"><name pos:start="79:17" pos:end="81:37"><name pos:start="79:17" pos:end="79:32">length_remaining</name> <argument_list type="generic" pos:start="79:34" pos:end="81:37">&lt; <argument pos:start="79:36" pos:end="81:35"><expr pos:start="79:36" pos:end="81:35"><literal type="number" pos:start="79:36" pos:end="79:36">0</literal>

                <operator pos:start="81:17" pos:end="81:18">||</operator> <name pos:start="81:20" pos:end="81:35">length_remaining</name></expr></argument> &gt;</argument_list></name> <sizeof pos:start="81:39" pos:end="81:60">sizeof<argument_list pos:start="81:45" pos:end="81:60">(<argument pos:start="81:46" pos:end="81:59"><expr pos:start="81:46" pos:end="81:59"><name pos:start="81:46" pos:end="81:59"><name pos:start="81:46" pos:end="81:48">mms</name><operator pos:start="81:49" pos:end="81:50">-&gt;</operator><name pos:start="81:51" pos:end="81:59">in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="81:62" pos:end="81:62">-</operator> <literal type="number" pos:start="81:64" pos:end="81:65">12</literal></expr>)</condition> <block pos:start="81:68" pos:end="91:13">{<block_content pos:start="83:17" pos:end="89:43">

                <expr_stmt pos:start="83:17" pos:end="87:70"><expr pos:start="83:17" pos:end="87:69"><call pos:start="83:17" pos:end="87:69"><name pos:start="83:17" pos:end="83:22">av_log</name><argument_list pos:start="83:23" pos:end="87:69">(<argument pos:start="83:24" pos:end="83:27"><expr pos:start="83:24" pos:end="83:27"><name pos:start="83:24" pos:end="83:27">NULL</name></expr></argument>, <argument pos:start="83:30" pos:end="83:41"><expr pos:start="83:30" pos:end="83:41"><name pos:start="83:30" pos:end="83:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="85:24" pos:end="85:72"><expr pos:start="85:24" pos:end="85:72"><literal type="string" pos:start="85:24" pos:end="85:72">"Incoming packet length %d exceeds bufsize %zu\n"</literal></expr></argument>,

                       <argument pos:start="87:24" pos:end="87:39"><expr pos:start="87:24" pos:end="87:39"><name pos:start="87:24" pos:end="87:39">length_remaining</name></expr></argument>, <argument pos:start="87:42" pos:end="87:68"><expr pos:start="87:42" pos:end="87:68"><sizeof pos:start="87:42" pos:end="87:63">sizeof<argument_list pos:start="87:48" pos:end="87:63">(<argument pos:start="87:49" pos:end="87:62"><expr pos:start="87:49" pos:end="87:62"><name pos:start="87:49" pos:end="87:62"><name pos:start="87:49" pos:end="87:51">mms</name><operator pos:start="87:52" pos:end="87:53">-&gt;</operator><name pos:start="87:54" pos:end="87:62">in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="87:65" pos:end="87:65">-</operator> <literal type="number" pos:start="87:67" pos:end="87:68">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="89:17" pos:end="89:43">return <expr pos:start="89:24" pos:end="89:42"><name pos:start="89:24" pos:end="89:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="95:63"><expr pos:start="93:13" pos:end="95:61"><name pos:start="93:13" pos:end="93:23">read_result</name> <operator pos:start="93:25" pos:end="93:25">=</operator> <call pos:start="93:27" pos:end="95:61"><name pos:start="93:27" pos:end="93:43">url_read_complete</name><argument_list pos:start="93:44" pos:end="95:61">(<argument pos:start="93:45" pos:end="93:55"><expr pos:start="93:45" pos:end="93:55"><name pos:start="93:45" pos:end="93:55"><name pos:start="93:45" pos:end="93:47">mms</name><operator pos:start="93:48" pos:end="93:49">-&gt;</operator><name pos:start="93:50" pos:end="93:55">mms_hd</name></name></expr></argument>, <argument pos:start="93:58" pos:end="93:76"><expr pos:start="93:58" pos:end="93:76"><name pos:start="93:58" pos:end="93:71"><name pos:start="93:58" pos:end="93:60">mms</name><operator pos:start="93:61" pos:end="93:62">-&gt;</operator><name pos:start="93:63" pos:end="93:71">in_buffer</name></name> <operator pos:start="93:73" pos:end="93:73">+</operator> <literal type="number" pos:start="93:75" pos:end="93:76">12</literal></expr></argument>,

                                            <argument pos:start="95:45" pos:end="95:60"><expr pos:start="95:45" pos:end="95:60"><name pos:start="95:45" pos:end="95:60">length_remaining</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="111:13"><if pos:start="97:13" pos:end="111:13">if <condition pos:start="97:16" pos:end="97:48">(<expr pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:27">read_result</name> <operator pos:start="97:29" pos:end="97:30">!=</operator> <name pos:start="97:32" pos:end="97:47">length_remaining</name></expr>)</condition> <block pos:start="97:50" pos:end="111:13">{<block_content pos:start="99:17" pos:end="109:66">

                <expr_stmt pos:start="99:17" pos:end="107:63"><expr pos:start="99:17" pos:end="107:62"><call pos:start="99:17" pos:end="107:62"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="107:62">(<argument pos:start="99:24" pos:end="99:27"><expr pos:start="99:24" pos:end="99:27"><name pos:start="99:24" pos:end="99:27">NULL</name></expr></argument>, <argument pos:start="99:30" pos:end="99:41"><expr pos:start="99:30" pos:end="99:41"><name pos:start="99:30" pos:end="99:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="101:24" pos:end="101:71"><expr pos:start="101:24" pos:end="101:71"><literal type="string" pos:start="101:24" pos:end="101:71">"Reading pkt data (length=%d) failed: %d (%s)\n"</literal></expr></argument>,

                       <argument pos:start="103:24" pos:end="103:39"><expr pos:start="103:24" pos:end="103:39"><name pos:start="103:24" pos:end="103:39">length_remaining</name></expr></argument>, <argument pos:start="103:42" pos:end="103:52"><expr pos:start="103:42" pos:end="103:52"><name pos:start="103:42" pos:end="103:52">read_result</name></expr></argument>,

                       <argument pos:start="105:24" pos:end="107:61"><expr pos:start="105:24" pos:end="107:61"><ternary pos:start="105:24" pos:end="107:61"><condition pos:start="105:24" pos:end="105:40"><expr pos:start="105:24" pos:end="105:38"><name pos:start="105:24" pos:end="105:34">read_result</name> <operator pos:start="105:36" pos:end="105:36">&lt;</operator> <literal type="number" pos:start="105:38" pos:end="105:38">0</literal></expr> ?</condition><then pos:start="105:42" pos:end="105:62"> <expr pos:start="105:42" pos:end="105:62"><call pos:start="105:42" pos:end="105:62"><name pos:start="105:42" pos:end="105:49">strerror</name><argument_list pos:start="105:50" pos:end="105:62">(<argument pos:start="105:51" pos:end="105:61"><expr pos:start="105:51" pos:end="105:61"><name pos:start="105:51" pos:end="105:61">read_result</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="105:64" pos:end="107:61">:

                           <expr pos:start="107:28" pos:end="107:61"><literal type="string" pos:start="107:28" pos:end="107:61">"The server closed the connection"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="109:17" pos:end="109:66">return <expr pos:start="109:24" pos:end="109:65"><ternary pos:start="109:24" pos:end="109:65"><condition pos:start="109:24" pos:end="109:40"><expr pos:start="109:24" pos:end="109:38"><name pos:start="109:24" pos:end="109:34">read_result</name> <operator pos:start="109:36" pos:end="109:36">&lt;</operator> <literal type="number" pos:start="109:38" pos:end="109:38">0</literal></expr> ?</condition><then pos:start="109:42" pos:end="109:52"> <expr pos:start="109:42" pos:end="109:52"><name pos:start="109:42" pos:end="109:52">read_result</name></expr> </then><else pos:start="109:54" pos:end="109:65">: <expr pos:start="109:56" pos:end="109:65"><name pos:start="109:56" pos:end="109:65">AVERROR_IO</name></expr></else></ternary></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:52"><expr pos:start="113:13" pos:end="113:51"><name pos:start="113:13" pos:end="113:23">packet_type</name><operator pos:start="113:24" pos:end="113:24">=</operator> <call pos:start="113:26" pos:end="113:51"><name pos:start="113:26" pos:end="113:32">AV_RL16</name><argument_list pos:start="113:33" pos:end="113:51">(<argument pos:start="113:34" pos:end="113:50"><expr pos:start="113:34" pos:end="113:50"><name pos:start="113:34" pos:end="113:47"><name pos:start="113:34" pos:end="113:36">mms</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:47">in_buffer</name></name><operator pos:start="113:48" pos:end="113:48">+</operator><literal type="number" pos:start="113:49" pos:end="113:50">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:46"><expr pos:start="115:13" pos:end="115:45"><name pos:start="115:13" pos:end="115:14">hr</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <call pos:start="115:18" pos:end="115:45"><name pos:start="115:18" pos:end="115:24">AV_RL32</name><argument_list pos:start="115:25" pos:end="115:45">(<argument pos:start="115:26" pos:end="115:44"><expr pos:start="115:26" pos:end="115:44"><name pos:start="115:26" pos:end="115:39"><name pos:start="115:26" pos:end="115:28">mms</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:39">in_buffer</name></name> <operator pos:start="115:41" pos:end="115:41">+</operator> <literal type="number" pos:start="115:43" pos:end="115:44">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:19">(<expr pos:start="117:17" pos:end="117:18"><name pos:start="117:17" pos:end="117:18">hr</name></expr>)</condition> <block pos:start="117:21" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:39">

                <expr_stmt pos:start="119:17" pos:end="121:118"><expr pos:start="119:17" pos:end="121:117"><call pos:start="119:17" pos:end="121:117"><name pos:start="119:17" pos:end="119:22">av_log</name><argument_list pos:start="119:23" pos:end="121:117">(<argument pos:start="119:24" pos:end="119:27"><expr pos:start="119:24" pos:end="119:27"><name pos:start="119:24" pos:end="119:27">NULL</name></expr></argument>, <argument pos:start="119:30" pos:end="119:41"><expr pos:start="119:30" pos:end="119:41"><name pos:start="119:30" pos:end="119:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="121:24" pos:end="121:99"><expr pos:start="121:24" pos:end="121:99"><literal type="string" pos:start="121:24" pos:end="121:99">"Server sent a message with packet type 0x%x and error status code 0x%08x\n"</literal></expr></argument>, <argument pos:start="121:102" pos:end="121:112"><expr pos:start="121:102" pos:end="121:112"><name pos:start="121:102" pos:end="121:112">packet_type</name></expr></argument>, <argument pos:start="121:115" pos:end="121:116"><expr pos:start="121:115" pos:end="121:116"><name pos:start="121:115" pos:end="121:116">hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="123:17" pos:end="123:39">return <expr pos:start="123:24" pos:end="123:38"><name pos:start="123:24" pos:end="123:38">AVERROR_UNKNOWN</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="241:9">else <block pos:start="127:16" pos:end="241:9">{<block_content pos:start="129:13" pos:end="239:13">

            <decl_stmt pos:start="129:13" pos:end="129:33"><decl pos:start="129:13" pos:end="129:32"><type pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">int</name></type> <name pos:start="129:17" pos:end="129:32">length_remaining</name></decl>;</decl_stmt>

            <decl_stmt pos:start="131:13" pos:end="131:31"><decl pos:start="131:13" pos:end="131:30"><type pos:start="131:13" pos:end="131:15"><name pos:start="131:13" pos:end="131:15">int</name></type> <name pos:start="131:17" pos:end="131:30">packet_id_type</name></decl>;</decl_stmt>

            <decl_stmt pos:start="133:13" pos:end="133:20"><decl pos:start="133:13" pos:end="133:19"><type pos:start="133:13" pos:end="133:15"><name pos:start="133:13" pos:end="133:15">int</name></type> <name pos:start="133:17" pos:end="133:19">tmp</name></decl>;</decl_stmt>



            <comment type="line" pos:start="137:13" pos:end="137:47">// note we cache the first 8 bytes,</comment>

            <comment type="line" pos:start="139:13" pos:end="139:54">// then fill up the buffer with the others</comment>

            <expr_stmt pos:start="141:13" pos:end="141:68"><expr pos:start="141:13" pos:end="141:67"><name pos:start="141:13" pos:end="141:15">tmp</name>                       <operator pos:start="141:39" pos:end="141:39">=</operator> <call pos:start="141:41" pos:end="141:67"><name pos:start="141:41" pos:end="141:47">AV_RL16</name><argument_list pos:start="141:48" pos:end="141:67">(<argument pos:start="141:49" pos:end="141:66"><expr pos:start="141:49" pos:end="141:66"><name pos:start="141:49" pos:end="141:62"><name pos:start="141:49" pos:end="141:51">mms</name><operator pos:start="141:52" pos:end="141:53">-&gt;</operator><name pos:start="141:54" pos:end="141:62">in_buffer</name></name> <operator pos:start="141:64" pos:end="141:64">+</operator> <literal type="number" pos:start="141:66" pos:end="141:66">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:59"><expr pos:start="143:13" pos:end="143:58"><name pos:start="143:13" pos:end="143:28">length_remaining</name>          <operator pos:start="143:39" pos:end="143:39">=</operator> <operator pos:start="143:41" pos:end="143:41">(</operator><name pos:start="143:42" pos:end="143:44">tmp</name> <operator pos:start="143:46" pos:end="143:46">-</operator> <literal type="number" pos:start="143:48" pos:end="143:48">8</literal><operator pos:start="143:49" pos:end="143:49">)</operator> <operator pos:start="143:51" pos:end="143:51">&amp;</operator> <literal type="number" pos:start="143:53" pos:end="143:58">0xffff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:64"><expr pos:start="145:13" pos:end="145:63"><name pos:start="145:13" pos:end="145:37"><name pos:start="145:13" pos:end="145:16">mmst</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:37">incoming_packet_seq</name></name> <operator pos:start="145:39" pos:end="145:39">=</operator> <call pos:start="145:41" pos:end="145:63"><name pos:start="145:41" pos:end="145:47">AV_RL32</name><argument_list pos:start="145:48" pos:end="145:63">(<argument pos:start="145:49" pos:end="145:62"><expr pos:start="145:49" pos:end="145:62"><name pos:start="145:49" pos:end="145:62"><name pos:start="145:49" pos:end="145:51">mms</name><operator pos:start="145:52" pos:end="145:53">-&gt;</operator><name pos:start="145:54" pos:end="145:62">in_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:58"><expr pos:start="147:13" pos:end="147:57"><name pos:start="147:13" pos:end="147:26">packet_id_type</name>            <operator pos:start="147:39" pos:end="147:39">=</operator> <name pos:start="147:41" pos:end="147:57"><name pos:start="147:41" pos:end="147:43">mms</name><operator pos:start="147:44" pos:end="147:45">-&gt;</operator><name pos:start="147:46" pos:end="147:54">in_buffer</name><index pos:start="147:55" pos:end="147:57">[<expr pos:start="147:56" pos:end="147:56"><literal type="number" pos:start="147:56" pos:end="147:56">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:58"><expr pos:start="149:13" pos:end="149:57"><name pos:start="149:13" pos:end="149:32"><name pos:start="149:13" pos:end="149:16">mmst</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:32">incoming_flags</name></name>      <operator pos:start="149:39" pos:end="149:39">=</operator> <name pos:start="149:41" pos:end="149:57"><name pos:start="149:41" pos:end="149:43">mms</name><operator pos:start="149:44" pos:end="149:45">-&gt;</operator><name pos:start="149:46" pos:end="149:54">in_buffer</name><index pos:start="149:55" pos:end="149:57">[<expr pos:start="149:56" pos:end="149:56"><literal type="number" pos:start="149:56" pos:end="149:56">5</literal></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="153:13" pos:end="165:13"><if pos:start="153:13" pos:end="165:13">if <condition pos:start="153:16" pos:end="155:65">(<expr pos:start="153:17" pos:end="155:64"><name pos:start="153:17" pos:end="155:37"><name pos:start="153:17" pos:end="153:32">length_remaining</name> <argument_list type="generic" pos:start="153:34" pos:end="155:37">&lt; <argument pos:start="153:36" pos:end="155:35"><expr pos:start="153:36" pos:end="155:35"><literal type="number" pos:start="153:36" pos:end="153:36">0</literal>

                <operator pos:start="155:17" pos:end="155:18">||</operator> <name pos:start="155:20" pos:end="155:35">length_remaining</name></expr></argument> &gt;</argument_list></name> <sizeof pos:start="155:39" pos:end="155:60">sizeof<argument_list pos:start="155:45" pos:end="155:60">(<argument pos:start="155:46" pos:end="155:59"><expr pos:start="155:46" pos:end="155:59"><name pos:start="155:46" pos:end="155:59"><name pos:start="155:46" pos:end="155:48">mms</name><operator pos:start="155:49" pos:end="155:50">-&gt;</operator><name pos:start="155:51" pos:end="155:59">in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="155:62" pos:end="155:62">-</operator> <literal type="number" pos:start="155:64" pos:end="155:64">8</literal></expr>)</condition> <block pos:start="155:67" pos:end="165:13">{<block_content pos:start="157:17" pos:end="163:43">

                <expr_stmt pos:start="157:17" pos:end="161:65"><expr pos:start="157:17" pos:end="161:64"><call pos:start="157:17" pos:end="161:64"><name pos:start="157:17" pos:end="157:22">av_log</name><argument_list pos:start="157:23" pos:end="161:64">(<argument pos:start="157:24" pos:end="157:27"><expr pos:start="157:24" pos:end="157:27"><name pos:start="157:24" pos:end="157:27">NULL</name></expr></argument>, <argument pos:start="157:30" pos:end="157:41"><expr pos:start="157:30" pos:end="157:41"><name pos:start="157:30" pos:end="157:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="159:24" pos:end="159:75"><expr pos:start="159:24" pos:end="159:75"><literal type="string" pos:start="159:24" pos:end="159:75">"Data length %d is invalid or too large (max=%zu)\n"</literal></expr></argument>,

                       <argument pos:start="161:24" pos:end="161:39"><expr pos:start="161:24" pos:end="161:39"><name pos:start="161:24" pos:end="161:39">length_remaining</name></expr></argument>, <argument pos:start="161:42" pos:end="161:63"><expr pos:start="161:42" pos:end="161:63"><sizeof pos:start="161:42" pos:end="161:63">sizeof<argument_list pos:start="161:48" pos:end="161:63">(<argument pos:start="161:49" pos:end="161:62"><expr pos:start="161:49" pos:end="161:62"><name pos:start="161:49" pos:end="161:62"><name pos:start="161:49" pos:end="161:51">mms</name><operator pos:start="161:52" pos:end="161:53">-&gt;</operator><name pos:start="161:54" pos:end="161:62">in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="163:17" pos:end="163:43">return <expr pos:start="163:24" pos:end="163:42"><name pos:start="163:24" pos:end="163:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:56"><expr pos:start="167:13" pos:end="167:55"><name pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:15">mms</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:33">remaining_in_len</name></name>    <operator pos:start="167:38" pos:end="167:38">=</operator> <name pos:start="167:40" pos:end="167:55">length_remaining</name></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:54"><expr pos:start="169:13" pos:end="169:53"><name pos:start="169:13" pos:end="169:28"><name pos:start="169:13" pos:end="169:15">mms</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:28">read_in_ptr</name></name>         <operator pos:start="169:38" pos:end="169:38">=</operator> <name pos:start="169:40" pos:end="169:53"><name pos:start="169:40" pos:end="169:42">mms</name><operator pos:start="169:43" pos:end="169:44">-&gt;</operator><name pos:start="169:45" pos:end="169:53">in_buffer</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:90"><expr pos:start="171:13" pos:end="171:89"><name pos:start="171:13" pos:end="171:23">read_result</name><operator pos:start="171:24" pos:end="171:24">=</operator> <call pos:start="171:26" pos:end="171:89"><name pos:start="171:26" pos:end="171:42">url_read_complete</name><argument_list pos:start="171:43" pos:end="171:89">(<argument pos:start="171:44" pos:end="171:54"><expr pos:start="171:44" pos:end="171:54"><name pos:start="171:44" pos:end="171:54"><name pos:start="171:44" pos:end="171:46">mms</name><operator pos:start="171:47" pos:end="171:48">-&gt;</operator><name pos:start="171:49" pos:end="171:54">mms_hd</name></name></expr></argument>, <argument pos:start="171:57" pos:end="171:70"><expr pos:start="171:57" pos:end="171:70"><name pos:start="171:57" pos:end="171:70"><name pos:start="171:57" pos:end="171:59">mms</name><operator pos:start="171:60" pos:end="171:61">-&gt;</operator><name pos:start="171:62" pos:end="171:70">in_buffer</name></name></expr></argument>, <argument pos:start="171:73" pos:end="171:88"><expr pos:start="171:73" pos:end="171:88"><name pos:start="171:73" pos:end="171:88">length_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="187:13"><if pos:start="173:13" pos:end="187:13">if<condition pos:start="173:15" pos:end="173:47">(<expr pos:start="173:16" pos:end="173:46"><name pos:start="173:16" pos:end="173:26">read_result</name> <operator pos:start="173:28" pos:end="173:29">!=</operator> <name pos:start="173:31" pos:end="173:46">length_remaining</name></expr>)</condition> <block pos:start="173:49" pos:end="187:13">{<block_content pos:start="175:17" pos:end="185:66">

                <expr_stmt pos:start="175:17" pos:end="183:63"><expr pos:start="175:17" pos:end="183:62"><call pos:start="175:17" pos:end="183:62"><name pos:start="175:17" pos:end="175:22">av_log</name><argument_list pos:start="175:23" pos:end="183:62">(<argument pos:start="175:24" pos:end="175:27"><expr pos:start="175:24" pos:end="175:27"><name pos:start="175:24" pos:end="175:27">NULL</name></expr></argument>, <argument pos:start="175:30" pos:end="175:41"><expr pos:start="175:30" pos:end="175:41"><name pos:start="175:30" pos:end="175:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="177:24" pos:end="177:73"><expr pos:start="177:24" pos:end="177:73"><literal type="string" pos:start="177:24" pos:end="177:73">"Failed to read packet data of size %d: %d (%s)\n"</literal></expr></argument>,

                       <argument pos:start="179:24" pos:end="179:39"><expr pos:start="179:24" pos:end="179:39"><name pos:start="179:24" pos:end="179:39">length_remaining</name></expr></argument>, <argument pos:start="179:42" pos:end="179:52"><expr pos:start="179:42" pos:end="179:52"><name pos:start="179:42" pos:end="179:52">read_result</name></expr></argument>,

                       <argument pos:start="181:24" pos:end="183:61"><expr pos:start="181:24" pos:end="183:61"><ternary pos:start="181:24" pos:end="183:61"><condition pos:start="181:24" pos:end="181:40"><expr pos:start="181:24" pos:end="181:38"><name pos:start="181:24" pos:end="181:34">read_result</name> <operator pos:start="181:36" pos:end="181:36">&lt;</operator> <literal type="number" pos:start="181:38" pos:end="181:38">0</literal></expr> ?</condition><then pos:start="181:42" pos:end="181:62"> <expr pos:start="181:42" pos:end="181:62"><call pos:start="181:42" pos:end="181:62"><name pos:start="181:42" pos:end="181:49">strerror</name><argument_list pos:start="181:50" pos:end="181:62">(<argument pos:start="181:51" pos:end="181:61"><expr pos:start="181:51" pos:end="181:61"><name pos:start="181:51" pos:end="181:61">read_result</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="181:64" pos:end="183:61">:

                           <expr pos:start="183:28" pos:end="183:61"><literal type="string" pos:start="183:28" pos:end="183:61">"The server closed the connection"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="185:17" pos:end="185:66">return <expr pos:start="185:24" pos:end="185:65"><ternary pos:start="185:24" pos:end="185:65"><condition pos:start="185:24" pos:end="185:40"><expr pos:start="185:24" pos:end="185:38"><name pos:start="185:24" pos:end="185:34">read_result</name> <operator pos:start="185:36" pos:end="185:36">&lt;</operator> <literal type="number" pos:start="185:38" pos:end="185:38">0</literal></expr> ?</condition><then pos:start="185:42" pos:end="185:52"> <expr pos:start="185:42" pos:end="185:52"><name pos:start="185:42" pos:end="185:52">read_result</name></expr> </then><else pos:start="185:54" pos:end="185:65">: <expr pos:start="185:56" pos:end="185:65"><name pos:start="185:56" pos:end="185:65">AVERROR_IO</name></expr></else></ternary></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="191:13" pos:end="191:50">// if we successfully read everything.</comment>

            <if_stmt pos:start="193:13" pos:end="239:13"><if pos:start="193:13" pos:end="229:13">if<condition pos:start="193:15" pos:end="193:56">(<expr pos:start="193:16" pos:end="193:55"><name pos:start="193:16" pos:end="193:29">packet_id_type</name> <operator pos:start="193:31" pos:end="193:32">==</operator> <name pos:start="193:34" pos:end="193:55"><name pos:start="193:34" pos:end="193:37">mmst</name><operator pos:start="193:38" pos:end="193:39">-&gt;</operator><name pos:start="193:40" pos:end="193:55">header_packet_id</name></name></expr>)</condition> <block pos:start="193:58" pos:end="229:13">{<block_content pos:start="195:17" pos:end="227:29">

                <expr_stmt pos:start="195:17" pos:end="195:48"><expr pos:start="195:17" pos:end="195:47"><name pos:start="195:17" pos:end="195:27">packet_type</name> <operator pos:start="195:29" pos:end="195:29">=</operator> <name pos:start="195:31" pos:end="195:47">SC_PKT_ASF_HEADER</name></expr>;</expr_stmt>

                <comment type="line" pos:start="197:17" pos:end="197:39">// Store the asf header</comment>

                <if_stmt pos:start="199:17" pos:end="221:17"><if pos:start="199:17" pos:end="221:17">if<condition pos:start="199:19" pos:end="199:39">(<expr pos:start="199:20" pos:end="199:38"><operator pos:start="199:20" pos:end="199:20">!</operator><name pos:start="199:21" pos:end="199:38"><name pos:start="199:21" pos:end="199:23">mms</name><operator pos:start="199:24" pos:end="199:25">-&gt;</operator><name pos:start="199:26" pos:end="199:38">header_parsed</name></name></expr>)</condition> <block pos:start="199:41" pos:end="221:17">{<block_content pos:start="201:21" pos:end="219:66">

                    <decl_stmt pos:start="201:21" pos:end="203:80"><decl pos:start="201:21" pos:end="203:79"><type pos:start="201:21" pos:end="201:26"><name pos:start="201:21" pos:end="201:24">void</name> <modifier pos:start="201:26" pos:end="201:26">*</modifier></type><name pos:start="201:27" pos:end="201:27">p</name> <init pos:start="201:29" pos:end="203:79">= <expr pos:start="201:31" pos:end="203:79"><call pos:start="201:31" pos:end="203:79"><name pos:start="201:31" pos:end="201:40">av_realloc</name><argument_list pos:start="201:41" pos:end="203:79">(<argument pos:start="201:42" pos:end="201:56"><expr pos:start="201:42" pos:end="201:56"><name pos:start="201:42" pos:end="201:56"><name pos:start="201:42" pos:end="201:44">mms</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:56">asf_header</name></name></expr></argument>,

                                  <argument pos:start="203:35" pos:end="203:78"><expr pos:start="203:35" pos:end="203:78"><name pos:start="203:35" pos:end="203:54"><name pos:start="203:35" pos:end="203:37">mms</name><operator pos:start="203:38" pos:end="203:39">-&gt;</operator><name pos:start="203:40" pos:end="203:54">asf_header_size</name></name> <operator pos:start="203:56" pos:end="203:56">+</operator> <name pos:start="203:58" pos:end="203:78"><name pos:start="203:58" pos:end="203:60">mms</name><operator pos:start="203:61" pos:end="203:62">-&gt;</operator><name pos:start="203:63" pos:end="203:78">remaining_in_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="205:21" pos:end="211:21"><if pos:start="205:21" pos:end="211:21">if <condition pos:start="205:24" pos:end="205:27">(<expr pos:start="205:25" pos:end="205:26"><operator pos:start="205:25" pos:end="205:25">!</operator><name pos:start="205:26" pos:end="205:26">p</name></expr>)</condition> <block pos:start="205:29" pos:end="211:21">{<block_content pos:start="207:25" pos:end="209:47">

                        <expr_stmt pos:start="207:25" pos:end="207:51"><expr pos:start="207:25" pos:end="207:50"><call pos:start="207:25" pos:end="207:50"><name pos:start="207:25" pos:end="207:32">av_freep</name><argument_list pos:start="207:33" pos:end="207:50">(<argument pos:start="207:34" pos:end="207:49"><expr pos:start="207:34" pos:end="207:49"><operator pos:start="207:34" pos:end="207:34">&amp;</operator><name pos:start="207:35" pos:end="207:49"><name pos:start="207:35" pos:end="207:37">mms</name><operator pos:start="207:38" pos:end="207:39">-&gt;</operator><name pos:start="207:40" pos:end="207:49">asf_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="209:25" pos:end="209:47">return <expr pos:start="209:32" pos:end="209:46"><call pos:start="209:32" pos:end="209:46"><name pos:start="209:32" pos:end="209:38">AVERROR</name><argument_list pos:start="209:39" pos:end="209:46">(<argument pos:start="209:40" pos:end="209:45"><expr pos:start="209:40" pos:end="209:45"><name pos:start="209:40" pos:end="209:45">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="213:21" pos:end="213:40"><expr pos:start="213:21" pos:end="213:39"><name pos:start="213:21" pos:end="213:35"><name pos:start="213:21" pos:end="213:23">mms</name><operator pos:start="213:24" pos:end="213:25">-&gt;</operator><name pos:start="213:26" pos:end="213:35">asf_header</name></name> <operator pos:start="213:37" pos:end="213:37">=</operator> <name pos:start="213:39" pos:end="213:39">p</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="215:21" pos:end="217:68"><expr pos:start="215:21" pos:end="217:67"><call pos:start="215:21" pos:end="217:67"><name pos:start="215:21" pos:end="215:26">memcpy</name><argument_list pos:start="215:27" pos:end="217:67">(<argument pos:start="215:28" pos:end="215:65"><expr pos:start="215:28" pos:end="215:65"><name pos:start="215:28" pos:end="215:42"><name pos:start="215:28" pos:end="215:30">mms</name><operator pos:start="215:31" pos:end="215:32">-&gt;</operator><name pos:start="215:33" pos:end="215:42">asf_header</name></name> <operator pos:start="215:44" pos:end="215:44">+</operator> <name pos:start="215:46" pos:end="215:65"><name pos:start="215:46" pos:end="215:48">mms</name><operator pos:start="215:49" pos:end="215:50">-&gt;</operator><name pos:start="215:51" pos:end="215:65">asf_header_size</name></name></expr></argument>,

                           <argument pos:start="217:28" pos:end="217:43"><expr pos:start="217:28" pos:end="217:43"><name pos:start="217:28" pos:end="217:43"><name pos:start="217:28" pos:end="217:30">mms</name><operator pos:start="217:31" pos:end="217:32">-&gt;</operator><name pos:start="217:33" pos:end="217:43">read_in_ptr</name></name></expr></argument>, <argument pos:start="217:46" pos:end="217:66"><expr pos:start="217:46" pos:end="217:66"><name pos:start="217:46" pos:end="217:66"><name pos:start="217:46" pos:end="217:48">mms</name><operator pos:start="217:49" pos:end="217:50">-&gt;</operator><name pos:start="217:51" pos:end="217:66">remaining_in_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="219:21" pos:end="219:66"><expr pos:start="219:21" pos:end="219:65"><name pos:start="219:21" pos:end="219:40"><name pos:start="219:21" pos:end="219:23">mms</name><operator pos:start="219:24" pos:end="219:25">-&gt;</operator><name pos:start="219:26" pos:end="219:40">asf_header_size</name></name> <operator pos:start="219:42" pos:end="219:43">+=</operator> <name pos:start="219:45" pos:end="219:65"><name pos:start="219:45" pos:end="219:47">mms</name><operator pos:start="219:48" pos:end="219:49">-&gt;</operator><name pos:start="219:50" pos:end="219:65">remaining_in_len</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="223:17" pos:end="223:69">// 0x04 means asf header is sent in multiple packets.</comment>

                <if_stmt pos:start="225:17" pos:end="227:29"><if pos:start="225:17" pos:end="227:29">if <condition pos:start="225:20" pos:end="225:49">(<expr pos:start="225:21" pos:end="225:48"><name pos:start="225:21" pos:end="225:40"><name pos:start="225:21" pos:end="225:24">mmst</name><operator pos:start="225:25" pos:end="225:26">-&gt;</operator><name pos:start="225:27" pos:end="225:40">incoming_flags</name></name> <operator pos:start="225:42" pos:end="225:43">==</operator> <literal type="number" pos:start="225:45" pos:end="225:48">0x04</literal></expr>)</condition><block type="pseudo" pos:start="227:21" pos:end="227:29"><block_content pos:start="227:21" pos:end="227:29">

                    <continue pos:start="227:21" pos:end="227:29">continue;</continue></block_content></block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="229:15" pos:end="233:13">else if<condition pos:start="229:22" pos:end="229:56">(<expr pos:start="229:23" pos:end="229:55"><name pos:start="229:23" pos:end="229:36">packet_id_type</name> <operator pos:start="229:38" pos:end="229:39">==</operator> <name pos:start="229:41" pos:end="229:55"><name pos:start="229:41" pos:end="229:44">mmst</name><operator pos:start="229:45" pos:end="229:46">-&gt;</operator><name pos:start="229:47" pos:end="229:55">packet_id</name></name></expr>)</condition> <block pos:start="229:58" pos:end="233:13">{<block_content pos:start="231:17" pos:end="231:47">

                <expr_stmt pos:start="231:17" pos:end="231:47"><expr pos:start="231:17" pos:end="231:46"><name pos:start="231:17" pos:end="231:27">packet_type</name> <operator pos:start="231:29" pos:end="231:29">=</operator> <name pos:start="231:31" pos:end="231:46">SC_PKT_ASF_MEDIA</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="233:15" pos:end="239:13">else <block pos:start="233:20" pos:end="239:13">{<block_content pos:start="235:17" pos:end="237:25">

                <expr_stmt pos:start="235:17" pos:end="235:75"><expr pos:start="235:17" pos:end="235:74"><call pos:start="235:17" pos:end="235:74"><name pos:start="235:17" pos:end="235:23">av_dlog</name><argument_list pos:start="235:24" pos:end="235:74">(<argument pos:start="235:25" pos:end="235:28"><expr pos:start="235:25" pos:end="235:28"><name pos:start="235:25" pos:end="235:28">NULL</name></expr></argument>, <argument pos:start="235:31" pos:end="235:57"><expr pos:start="235:31" pos:end="235:57"><literal type="string" pos:start="235:31" pos:end="235:57">"packet id type %d is old."</literal></expr></argument>, <argument pos:start="235:60" pos:end="235:73"><expr pos:start="235:60" pos:end="235:73"><name pos:start="235:60" pos:end="235:73">packet_id_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="237:17" pos:end="237:25">continue;</continue>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="line" pos:start="245:9" pos:end="245:38">// preprocess some packet type</comment>

        <if_stmt pos:start="247:9" pos:end="261:9"><if pos:start="247:9" pos:end="253:9">if<condition pos:start="247:11" pos:end="247:43">(<expr pos:start="247:12" pos:end="247:42"><name pos:start="247:12" pos:end="247:22">packet_type</name> <operator pos:start="247:24" pos:end="247:25">==</operator> <name pos:start="247:27" pos:end="247:42">SC_PKT_KEEPALIVE</name></expr>)</condition> <block pos:start="247:45" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:21">

            <expr_stmt pos:start="249:13" pos:end="249:40"><expr pos:start="249:13" pos:end="249:39"><call pos:start="249:13" pos:end="249:39"><name pos:start="249:13" pos:end="249:33">send_keepalive_packet</name><argument_list pos:start="249:34" pos:end="249:39">(<argument pos:start="249:35" pos:end="249:38"><expr pos:start="249:35" pos:end="249:38"><name pos:start="249:35" pos:end="249:38">mmst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="251:13" pos:end="251:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="253:11" pos:end="257:9">else if<condition pos:start="253:18" pos:end="253:56">(<expr pos:start="253:19" pos:end="253:55"><name pos:start="253:19" pos:end="253:29">packet_type</name> <operator pos:start="253:31" pos:end="253:32">==</operator> <name pos:start="253:34" pos:end="253:55">SC_PKT_STREAM_CHANGING</name></expr>)</condition> <block pos:start="253:58" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:53">

            <expr_stmt pos:start="255:13" pos:end="255:53"><expr pos:start="255:13" pos:end="255:52"><call pos:start="255:13" pos:end="255:52"><name pos:start="255:13" pos:end="255:46">handle_packet_stream_changing_type</name><argument_list pos:start="255:47" pos:end="255:52">(<argument pos:start="255:48" pos:end="255:51"><expr pos:start="255:48" pos:end="255:51"><name pos:start="255:48" pos:end="255:51">mmst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="257:11" pos:end="261:9">else if<condition pos:start="257:18" pos:end="257:50">(<expr pos:start="257:19" pos:end="257:49"><name pos:start="257:19" pos:end="257:29">packet_type</name> <operator pos:start="257:31" pos:end="257:32">==</operator> <name pos:start="257:34" pos:end="257:49">SC_PKT_ASF_MEDIA</name></expr>)</condition> <block pos:start="257:52" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:34">

            <expr_stmt pos:start="259:13" pos:end="259:34"><expr pos:start="259:13" pos:end="259:33"><call pos:start="259:13" pos:end="259:33"><name pos:start="259:13" pos:end="259:28">pad_media_packet</name><argument_list pos:start="259:29" pos:end="259:33">(<argument pos:start="259:30" pos:end="259:32"><expr pos:start="259:30" pos:end="259:32"><name pos:start="259:30" pos:end="259:32">mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="263:9" pos:end="263:27">return <expr pos:start="263:16" pos:end="263:26"><name pos:start="263:16" pos:end="263:26">packet_type</name></expr>;</return>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
