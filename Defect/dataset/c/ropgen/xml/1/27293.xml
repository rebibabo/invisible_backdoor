<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27293.c" pos:tabs="8"><function pos:start="1:1" pos:end="460:34"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mpegts_write_pes</name><parameter_list pos:start="1:29" pos:end="5:63">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:57">AVStream</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:61">st</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:51"><decl pos:start="3:30" pos:end="3:51"><type pos:start="3:30" pos:end="3:51"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:51">payload</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:69"><decl pos:start="3:54" pos:end="3:69"><type pos:start="3:54" pos:end="3:69"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:69">payload_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:40"><decl pos:start="5:30" pos:end="5:40"><type pos:start="5:30" pos:end="5:40"><name pos:start="5:30" pos:end="5:36">int64_t</name></type> <name pos:start="5:38" pos:end="5:40">pts</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:53"><decl pos:start="5:43" pos:end="5:53"><type pos:start="5:43" pos:end="5:53"><name pos:start="5:43" pos:end="5:49">int64_t</name></type> <name pos:start="5:51" pos:end="5:53">dts</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:62"><decl pos:start="5:56" pos:end="5:62"><type pos:start="5:56" pos:end="5:62"><name pos:start="5:56" pos:end="5:58">int</name></type> <name pos:start="5:60" pos:end="5:62">key</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="460:34">{<block_content pos:start="9:5" pos:end="460:34">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">MpegTSWriteStream</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:28">ts_st</name> <init pos:start="9:30" pos:end="9:44">= <expr pos:start="9:32" pos:end="9:44"><name pos:start="9:32" pos:end="9:44"><name pos:start="9:32" pos:end="9:33">st</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">MpegTSWrite</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:19">ts</name> <init pos:start="11:21" pos:end="11:34">= <expr pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:23">s</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:31"><name pos:start="13:13" pos:end="13:15">buf</name><index pos:start="13:16" pos:end="13:31">[<expr pos:start="13:17" pos:end="13:30"><name pos:start="13:17" pos:end="13:30">TS_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:14">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:91"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">val</name></decl>, <decl pos:start="17:14" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:21">is_start</name></decl>, <decl pos:start="17:24" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:24" pos:end="17:26">len</name></decl>, <decl pos:start="17:29" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:29" pos:end="17:38">header_len</name></decl>, <decl pos:start="17:41" pos:end="17:49"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:41" pos:end="17:49">write_pcr</name></decl>, <decl pos:start="17:52" pos:end="17:66"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:52" pos:end="17:66">is_dvb_subtitle</name></decl>, <decl pos:start="17:69" pos:end="17:83"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:69" pos:end="17:83">is_dvb_teletext</name></decl>, <decl pos:start="17:86" pos:end="17:90"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:86" pos:end="17:90">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">afc_len</name></decl>, <decl pos:start="19:18" pos:end="19:29"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:18" pos:end="19:29">stuffing_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:15">pcr</name> <init pos:start="21:17" pos:end="21:20">= <expr pos:start="21:19" pos:end="21:20"><operator pos:start="21:19" pos:end="21:19">-</operator><literal type="number" pos:start="21:20" pos:end="21:20">1</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="21:23" pos:end="21:41">/* avoid warning */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:66"><decl pos:start="23:5" pos:end="23:65"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:17">delay</name> <init pos:start="23:19" pos:end="23:65">= <expr pos:start="23:21" pos:end="23:65"><call pos:start="23:21" pos:end="23:65"><name pos:start="23:21" pos:end="23:30">av_rescale</name><argument_list pos:start="23:31" pos:end="23:65">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:32">s</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:43">max_delay</name></name></expr></argument>, <argument pos:start="23:46" pos:end="23:50"><expr pos:start="23:46" pos:end="23:50"><literal type="number" pos:start="23:46" pos:end="23:50">90000</literal></expr></argument>, <argument pos:start="23:53" pos:end="23:64"><expr pos:start="23:53" pos:end="23:64"><name pos:start="23:53" pos:end="23:64">AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:99"><decl pos:start="25:5" pos:end="25:98"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">force_pat</name> <init pos:start="25:19" pos:end="25:98">= <expr pos:start="25:21" pos:end="25:98"><name pos:start="25:21" pos:end="25:41"><name pos:start="25:21" pos:end="25:22">st</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:29">codec</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:41">codec_type</name></name> <operator pos:start="25:43" pos:end="25:44">==</operator> <name pos:start="25:46" pos:end="25:63">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="25:65" pos:end="25:66">&amp;&amp;</operator> <name pos:start="25:68" pos:end="25:70">key</name> <operator pos:start="25:72" pos:end="25:73">&amp;&amp;</operator> <operator pos:start="25:75" pos:end="25:75">!</operator><name pos:start="25:76" pos:end="25:98"><name pos:start="25:76" pos:end="25:80">ts_st</name><operator pos:start="25:81" pos:end="25:82">-&gt;</operator><name pos:start="25:83" pos:end="25:98">prev_payload_key</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">is_start</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <literal type="number" pos:start="29:16" pos:end="29:16">1</literal></expr>;</expr_stmt>

    <while pos:start="31:5" pos:end="460:34">while <condition pos:start="31:11" pos:end="31:28">(<expr pos:start="31:12" pos:end="31:27"><name pos:start="31:12" pos:end="31:23">payload_size</name> <operator pos:start="31:25" pos:end="31:25">&gt;</operator> <literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr>)</condition> <block pos:start="31:30" pos:end="460:34">{<block_content pos:start="33:9" pos:end="460:34">

        <expr_stmt pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:26">retransmit_si_info</name><argument_list pos:start="33:27" pos:end="33:40">(<argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">s</name></expr></argument>, <argument pos:start="33:31" pos:end="33:39"><expr pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:39">force_pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:17">force_pat</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:22"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:17">write_pcr</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="460:34"><if pos:start="41:9" pos:end="460:34">if <condition pos:start="41:12" pos:end="41:50">(<expr pos:start="41:13" pos:end="41:49"><name pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:17">ts_st</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:22">pid</name></name> <operator pos:start="41:24" pos:end="41:25">==</operator> <name pos:start="41:27" pos:end="41:49"><name pos:start="41:27" pos:end="41:31">ts_st</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:40">service</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:49">pcr_pid</name></name></expr>)</condition> <block pos:start="41:52" pos:end="460:34">{<block_content pos:start="43:13" pos:end="460:34">

            <if_stmt pos:start="43:13" pos:end="45:51"><if pos:start="43:13" pos:end="45:51">if <condition pos:start="43:16" pos:end="43:45">(<expr pos:start="43:17" pos:end="43:44"><name pos:start="43:17" pos:end="43:28"><name pos:start="43:17" pos:end="43:18">ts</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:28">mux_rate</name></name> <operator pos:start="43:30" pos:end="43:30">&gt;</operator> <literal type="number" pos:start="43:32" pos:end="43:32">1</literal> <operator pos:start="43:34" pos:end="43:35">||</operator> <name pos:start="43:37" pos:end="43:44">is_start</name></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:51"><block_content pos:start="45:17" pos:end="45:51"> <comment type="line" pos:start="43:47" pos:end="43:82">// VBR pcr period is based on frames</comment>

                <expr_stmt pos:start="45:17" pos:end="45:51"><expr pos:start="45:17" pos:end="45:50"><name pos:start="45:17" pos:end="45:48"><name pos:start="45:17" pos:end="45:21">ts_st</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:30">service</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:48">pcr_packet_count</name></name><operator pos:start="45:49" pos:end="45:50">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="47:13" pos:end="460:34"><if pos:start="47:13" pos:end="460:34">if <condition pos:start="47:16" pos:end="49:50">(<expr pos:start="47:17" pos:end="49:49"><name pos:start="47:17" pos:end="47:48"><name pos:start="47:17" pos:end="47:21">ts_st</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:30">service</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:48">pcr_packet_count</name></name> <operator pos:start="47:50" pos:end="47:51">&gt;=</operator>

                <name pos:start="49:17" pos:end="49:49"><name pos:start="49:17" pos:end="49:21">ts_st</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:30">service</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:49">pcr_packet_period</name></name></expr>)</condition> <block pos:start="49:52" pos:end="460:34">{<block_content pos:start="51:17" pos:end="460:34">

                <expr_stmt pos:start="51:17" pos:end="51:53"><expr pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:48"><name pos:start="51:17" pos:end="51:21">ts_st</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:30">service</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:48">pcr_packet_count</name></name> <operator pos:start="51:50" pos:end="51:50">=</operator> <literal type="number" pos:start="51:52" pos:end="51:52">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:30"><expr pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:25">write_pcr</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">1</literal></expr>;</expr_stmt>





        <if_stmt pos:start="59:9" pos:end="460:34"><if pos:start="59:9" pos:end="460:34">if <condition pos:start="59:12" pos:end="61:51">(<expr pos:start="59:13" pos:end="61:50"><name pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:14">ts</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:24">mux_rate</name></name> <operator pos:start="59:26" pos:end="59:26">&gt;</operator> <literal type="number" pos:start="59:28" pos:end="59:28">1</literal> <operator pos:start="59:30" pos:end="59:31">&amp;&amp;</operator> <name pos:start="59:33" pos:end="59:35">dts</name> <operator pos:start="59:37" pos:end="59:38">!=</operator> <name pos:start="59:40" pos:end="59:53">AV_NOPTS_VALUE</name> <operator pos:start="59:55" pos:end="59:56">&amp;&amp;</operator>

            <operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:16">dts</name> <operator pos:start="61:18" pos:end="61:18">-</operator> <call pos:start="61:20" pos:end="61:37"><name pos:start="61:20" pos:end="61:26">get_pcr</name><argument_list pos:start="61:27" pos:end="61:37">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">ts</name></expr></argument>, <argument pos:start="61:32" pos:end="61:36"><expr pos:start="61:32" pos:end="61:36"><name pos:start="61:32" pos:end="61:36"><name pos:start="61:32" pos:end="61:32">s</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:36">pb</name></name></expr></argument>)</argument_list></call><operator pos:start="61:38" pos:end="61:38">/</operator><literal type="number" pos:start="61:39" pos:end="61:41">300</literal><operator pos:start="61:42" pos:end="61:42">)</operator> <operator pos:start="61:44" pos:end="61:44">&gt;</operator> <name pos:start="61:46" pos:end="61:50">delay</name></expr>)</condition> <block pos:start="61:53" pos:end="460:34">{<block_content pos:start="65:13" pos:end="460:34">

            <comment type="block" pos:start="63:13" pos:end="63:66">/* pcr insert gets priority over null packet insert */</comment>

            <if_stmt pos:start="65:13" pos:end="71:45"><if pos:start="65:13" pos:end="67:46">if <condition pos:start="65:16" pos:end="65:26">(<expr pos:start="65:17" pos:end="65:25"><name pos:start="65:17" pos:end="65:25">write_pcr</name></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:46"><block_content pos:start="67:17" pos:end="67:46">

                <expr_stmt pos:start="67:17" pos:end="67:46"><expr pos:start="67:17" pos:end="67:45"><call pos:start="67:17" pos:end="67:45"><name pos:start="67:17" pos:end="67:38">mpegts_insert_pcr_only</name><argument_list pos:start="67:39" pos:end="67:45">(<argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><name pos:start="67:40" pos:end="67:40">s</name></expr></argument>, <argument pos:start="67:43" pos:end="67:44"><expr pos:start="67:43" pos:end="67:44"><name pos:start="67:43" pos:end="67:44">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="69:13" pos:end="71:45">else<block type="pseudo" pos:start="71:17" pos:end="71:45"><block_content pos:start="71:17" pos:end="71:45">

                <expr_stmt pos:start="71:17" pos:end="71:45"><expr pos:start="71:17" pos:end="71:44"><call pos:start="71:17" pos:end="71:44"><name pos:start="71:17" pos:end="71:41">mpegts_insert_null_packet</name><argument_list pos:start="71:42" pos:end="71:44">(<argument pos:start="71:43" pos:end="71:43"><expr pos:start="71:43" pos:end="71:43"><name pos:start="71:43" pos:end="71:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <continue pos:start="73:13" pos:end="73:21">continue;</continue> <comment type="block" pos:start="73:23" pos:end="73:81">/* recalculate write_pcr and possibly retransmit si_info */</comment>




        <comment type="block" pos:start="78:9" pos:end="78:35">/* prepare packet header */</comment>

        <expr_stmt pos:start="80:9" pos:end="80:16"><expr pos:start="80:9" pos:end="80:15"><name pos:start="80:9" pos:end="80:9">q</name> <operator pos:start="80:11" pos:end="80:11">=</operator> <name pos:start="80:13" pos:end="80:15">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="82:9" pos:end="82:20"><expr pos:start="82:9" pos:end="82:19"><operator pos:start="82:9" pos:end="82:9">*</operator><name pos:start="82:10" pos:end="82:10">q</name><operator pos:start="82:11" pos:end="82:12">++</operator> <operator pos:start="82:14" pos:end="82:14">=</operator> <literal type="number" pos:start="82:16" pos:end="82:19">0x47</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="84:9" pos:end="84:32"><expr pos:start="84:9" pos:end="84:31"><name pos:start="84:9" pos:end="84:11">val</name> <operator pos:start="84:13" pos:end="84:13">=</operator> <operator pos:start="84:15" pos:end="84:15">(</operator><name pos:start="84:16" pos:end="84:25"><name pos:start="84:16" pos:end="84:20">ts_st</name><operator pos:start="84:21" pos:end="84:22">-&gt;</operator><name pos:start="84:23" pos:end="84:25">pid</name></name> <operator pos:start="84:27" pos:end="84:28">&gt;&gt;</operator> <literal type="number" pos:start="84:30" pos:end="84:30">8</literal><operator pos:start="84:31" pos:end="84:31">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="86:9" pos:end="88:24"><if pos:start="86:9" pos:end="88:24">if <condition pos:start="86:12" pos:end="86:21">(<expr pos:start="86:13" pos:end="86:20"><name pos:start="86:13" pos:end="86:20">is_start</name></expr>)</condition><block type="pseudo" pos:start="88:13" pos:end="88:24"><block_content pos:start="88:13" pos:end="88:24">

            <expr_stmt pos:start="88:13" pos:end="88:24"><expr pos:start="88:13" pos:end="88:23"><name pos:start="88:13" pos:end="88:15">val</name> <operator pos:start="88:17" pos:end="88:18">|=</operator> <literal type="number" pos:start="88:20" pos:end="88:23">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="90:9" pos:end="90:19"><expr pos:start="90:9" pos:end="90:18"><operator pos:start="90:9" pos:end="90:9">*</operator><name pos:start="90:10" pos:end="90:10">q</name><operator pos:start="90:11" pos:end="90:12">++</operator> <operator pos:start="90:14" pos:end="90:14">=</operator> <name pos:start="90:16" pos:end="90:18">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="92:9" pos:end="92:26"><expr pos:start="92:9" pos:end="92:25"><operator pos:start="92:9" pos:end="92:9">*</operator><name pos:start="92:10" pos:end="92:10">q</name><operator pos:start="92:11" pos:end="92:12">++</operator> <operator pos:start="92:14" pos:end="92:14">=</operator> <name pos:start="92:16" pos:end="92:25"><name pos:start="92:16" pos:end="92:20">ts_st</name><operator pos:start="92:21" pos:end="92:22">-&gt;</operator><name pos:start="92:23" pos:end="92:25">pid</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="94:9" pos:end="94:42"><expr pos:start="94:9" pos:end="94:41"><name pos:start="94:9" pos:end="94:17"><name pos:start="94:9" pos:end="94:13">ts_st</name><operator pos:start="94:14" pos:end="94:15">-&gt;</operator><name pos:start="94:16" pos:end="94:17">cc</name></name> <operator pos:start="94:19" pos:end="94:19">=</operator> <operator pos:start="94:21" pos:end="94:21">(</operator><name pos:start="94:22" pos:end="94:30"><name pos:start="94:22" pos:end="94:26">ts_st</name><operator pos:start="94:27" pos:end="94:28">-&gt;</operator><name pos:start="94:29" pos:end="94:30">cc</name></name> <operator pos:start="94:32" pos:end="94:32">+</operator> <literal type="number" pos:start="94:34" pos:end="94:34">1</literal><operator pos:start="94:35" pos:end="94:35">)</operator> <operator pos:start="94:37" pos:end="94:37">&amp;</operator> <literal type="number" pos:start="94:39" pos:end="94:41">0xf</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="96:9" pos:end="96:32"><expr pos:start="96:9" pos:end="96:31"><operator pos:start="96:9" pos:end="96:9">*</operator><name pos:start="96:10" pos:end="96:10">q</name><operator pos:start="96:11" pos:end="96:12">++</operator> <operator pos:start="96:14" pos:end="96:14">=</operator> <literal type="number" pos:start="96:16" pos:end="96:19">0x10</literal> <operator pos:start="96:21" pos:end="96:21">|</operator> <name pos:start="96:23" pos:end="96:31"><name pos:start="96:23" pos:end="96:27">ts_st</name><operator pos:start="96:28" pos:end="96:29">-&gt;</operator><name pos:start="96:30" pos:end="96:31">cc</name></name></expr>;</expr_stmt> <comment type="line" pos:start="96:34" pos:end="96:58">// payload indicator + CC</comment>

        <if_stmt pos:start="98:9" pos:end="460:34"><if pos:start="98:9" pos:end="460:34">if <condition pos:start="98:12" pos:end="98:53">(<expr pos:start="98:13" pos:end="98:52"><name pos:start="98:13" pos:end="98:15">key</name> <operator pos:start="98:17" pos:end="98:18">&amp;&amp;</operator> <name pos:start="98:20" pos:end="98:27">is_start</name> <operator pos:start="98:29" pos:end="98:30">&amp;&amp;</operator> <name pos:start="98:32" pos:end="98:34">pts</name> <operator pos:start="98:36" pos:end="98:37">!=</operator> <name pos:start="98:39" pos:end="98:52">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="98:55" pos:end="460:34">{<block_content pos:start="102:13" pos:end="460:34">

            <comment type="line" pos:start="100:13" pos:end="100:47">// set Random Access for key frames</comment>

            <if_stmt pos:start="102:13" pos:end="104:30"><if pos:start="102:13" pos:end="104:30">if <condition pos:start="102:16" pos:end="102:54">(<expr pos:start="102:17" pos:end="102:53"><name pos:start="102:17" pos:end="102:26"><name pos:start="102:17" pos:end="102:21">ts_st</name><operator pos:start="102:22" pos:end="102:23">-&gt;</operator><name pos:start="102:24" pos:end="102:26">pid</name></name> <operator pos:start="102:28" pos:end="102:29">==</operator> <name pos:start="102:31" pos:end="102:53"><name pos:start="102:31" pos:end="102:35">ts_st</name><operator pos:start="102:36" pos:end="102:37">-&gt;</operator><name pos:start="102:38" pos:end="102:44">service</name><operator pos:start="102:45" pos:end="102:46">-&gt;</operator><name pos:start="102:47" pos:end="102:53">pcr_pid</name></name></expr>)</condition><block type="pseudo" pos:start="104:17" pos:end="104:30"><block_content pos:start="104:17" pos:end="104:30">

                <expr_stmt pos:start="104:17" pos:end="104:30"><expr pos:start="104:17" pos:end="104:29"><name pos:start="104:17" pos:end="104:25">write_pcr</name> <operator pos:start="104:27" pos:end="104:27">=</operator> <literal type="number" pos:start="104:29" pos:end="104:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="106:13" pos:end="106:35"><expr pos:start="106:13" pos:end="106:34"><call pos:start="106:13" pos:end="106:34"><name pos:start="106:13" pos:end="106:23">set_af_flag</name><argument_list pos:start="106:24" pos:end="106:34">(<argument pos:start="106:25" pos:end="106:27"><expr pos:start="106:25" pos:end="106:27"><name pos:start="106:25" pos:end="106:27">buf</name></expr></argument>, <argument pos:start="106:30" pos:end="106:33"><expr pos:start="106:30" pos:end="106:33"><literal type="number" pos:start="106:30" pos:end="106:33">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="108:13" pos:end="108:42"><expr pos:start="108:13" pos:end="108:41"><name pos:start="108:13" pos:end="108:13">q</name> <operator pos:start="108:15" pos:end="108:15">=</operator> <call pos:start="108:17" pos:end="108:41"><name pos:start="108:17" pos:end="108:36">get_ts_payload_start</name><argument_list pos:start="108:37" pos:end="108:41">(<argument pos:start="108:38" pos:end="108:40"><expr pos:start="108:38" pos:end="108:40"><name pos:start="108:38" pos:end="108:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <if_stmt pos:start="111:9" pos:end="460:34"><if pos:start="111:9" pos:end="460:34">if <condition pos:start="111:12" pos:end="111:22">(<expr pos:start="111:13" pos:end="111:21"><name pos:start="111:13" pos:end="111:21">write_pcr</name></expr>)</condition> <block pos:start="111:24" pos:end="460:34">{<block_content pos:start="113:13" pos:end="460:34">

            <expr_stmt pos:start="113:13" pos:end="113:35"><expr pos:start="113:13" pos:end="113:34"><call pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:23">set_af_flag</name><argument_list pos:start="113:24" pos:end="113:34">(<argument pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:27">buf</name></expr></argument>, <argument pos:start="113:30" pos:end="113:33"><expr pos:start="113:30" pos:end="113:33"><literal type="number" pos:start="113:30" pos:end="113:33">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:42"><expr pos:start="115:13" pos:end="115:41"><name pos:start="115:13" pos:end="115:13">q</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <call pos:start="115:17" pos:end="115:41"><name pos:start="115:17" pos:end="115:36">get_ts_payload_start</name><argument_list pos:start="115:37" pos:end="115:41">(<argument pos:start="115:38" pos:end="115:40"><expr pos:start="115:38" pos:end="115:40"><name pos:start="115:38" pos:end="115:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="117:13" pos:end="117:83">// add 11, pcr references the last byte of program clock reference base</comment>

            <if_stmt pos:start="119:13" pos:end="125:40"><if pos:start="119:13" pos:end="121:41">if <condition pos:start="119:16" pos:end="119:33">(<expr pos:start="119:17" pos:end="119:32"><name pos:start="119:17" pos:end="119:28"><name pos:start="119:17" pos:end="119:18">ts</name><operator pos:start="119:19" pos:end="119:20">-&gt;</operator><name pos:start="119:21" pos:end="119:28">mux_rate</name></name> <operator pos:start="119:30" pos:end="119:30">&gt;</operator> <literal type="number" pos:start="119:32" pos:end="119:32">1</literal></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:41"><block_content pos:start="121:17" pos:end="121:41">

                <expr_stmt pos:start="121:17" pos:end="121:41"><expr pos:start="121:17" pos:end="121:40"><name pos:start="121:17" pos:end="121:19">pcr</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <call pos:start="121:23" pos:end="121:40"><name pos:start="121:23" pos:end="121:29">get_pcr</name><argument_list pos:start="121:30" pos:end="121:40">(<argument pos:start="121:31" pos:end="121:32"><expr pos:start="121:31" pos:end="121:32"><name pos:start="121:31" pos:end="121:32">ts</name></expr></argument>, <argument pos:start="121:35" pos:end="121:39"><expr pos:start="121:35" pos:end="121:39"><name pos:start="121:35" pos:end="121:39"><name pos:start="121:35" pos:end="121:35">s</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:39">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="123:13" pos:end="125:40">else<block type="pseudo" pos:start="125:17" pos:end="125:40"><block_content pos:start="125:17" pos:end="125:40">

                <expr_stmt pos:start="125:17" pos:end="125:40"><expr pos:start="125:17" pos:end="125:39"><name pos:start="125:17" pos:end="125:19">pcr</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <operator pos:start="125:23" pos:end="125:23">(</operator><name pos:start="125:24" pos:end="125:26">dts</name> <operator pos:start="125:28" pos:end="125:28">-</operator> <name pos:start="125:30" pos:end="125:34">delay</name><operator pos:start="125:35" pos:end="125:35">)</operator><operator pos:start="125:36" pos:end="125:36">*</operator><literal type="number" pos:start="125:37" pos:end="125:39">300</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="127:13" pos:end="129:72"><if pos:start="127:13" pos:end="129:72">if <condition pos:start="127:16" pos:end="127:57">(<expr pos:start="127:17" pos:end="127:56"><name pos:start="127:17" pos:end="127:19">dts</name> <operator pos:start="127:21" pos:end="127:22">!=</operator> <name pos:start="127:24" pos:end="127:37">AV_NOPTS_VALUE</name> <operator pos:start="127:39" pos:end="127:40">&amp;&amp;</operator> <name pos:start="127:42" pos:end="127:44">dts</name> <operator pos:start="127:46" pos:end="127:46">&lt;</operator> <name pos:start="127:48" pos:end="127:50">pcr</name> <operator pos:start="127:52" pos:end="127:52">/</operator> <literal type="number" pos:start="127:54" pos:end="127:56">300</literal></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:72"><block_content pos:start="129:17" pos:end="129:72">

                <expr_stmt pos:start="129:17" pos:end="129:72"><expr pos:start="129:17" pos:end="129:71"><call pos:start="129:17" pos:end="129:71"><name pos:start="129:17" pos:end="129:22">av_log</name><argument_list pos:start="129:23" pos:end="129:71">(<argument pos:start="129:24" pos:end="129:24"><expr pos:start="129:24" pos:end="129:24"><name pos:start="129:24" pos:end="129:24">s</name></expr></argument>, <argument pos:start="129:27" pos:end="129:40"><expr pos:start="129:27" pos:end="129:40"><name pos:start="129:27" pos:end="129:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="129:43" pos:end="129:70"><expr pos:start="129:43" pos:end="129:70"><literal type="string" pos:start="129:43" pos:end="129:70">"dts &lt; pcr, TS is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:51"><expr pos:start="131:13" pos:end="131:50"><call pos:start="131:13" pos:end="131:50"><name pos:start="131:13" pos:end="131:21">extend_af</name><argument_list pos:start="131:22" pos:end="131:50">(<argument pos:start="131:23" pos:end="131:25"><expr pos:start="131:23" pos:end="131:25"><name pos:start="131:23" pos:end="131:25">buf</name></expr></argument>, <argument pos:start="131:28" pos:end="131:49"><expr pos:start="131:28" pos:end="131:49"><call pos:start="131:28" pos:end="131:49"><name pos:start="131:28" pos:end="131:41">write_pcr_bits</name><argument_list pos:start="131:42" pos:end="131:49">(<argument pos:start="131:43" pos:end="131:43"><expr pos:start="131:43" pos:end="131:43"><name pos:start="131:43" pos:end="131:43">q</name></expr></argument>, <argument pos:start="131:46" pos:end="131:48"><expr pos:start="131:46" pos:end="131:48"><name pos:start="131:46" pos:end="131:48">pcr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:42"><expr pos:start="133:13" pos:end="133:41"><name pos:start="133:13" pos:end="133:13">q</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <call pos:start="133:17" pos:end="133:41"><name pos:start="133:17" pos:end="133:36">get_ts_payload_start</name><argument_list pos:start="133:37" pos:end="133:41">(<argument pos:start="133:38" pos:end="133:40"><expr pos:start="133:38" pos:end="133:40"><name pos:start="133:38" pos:end="133:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <if_stmt pos:start="136:9" pos:end="460:34"><if pos:start="136:9" pos:end="163:13">if <condition pos:start="136:12" pos:end="136:21">(<expr pos:start="136:13" pos:end="136:20"><name pos:start="136:13" pos:end="136:20">is_start</name></expr>)</condition> <block pos:start="136:23" pos:end="163:13">{<block_content pos:start="138:13" pos:end="161:32">

            <decl_stmt pos:start="138:13" pos:end="138:34"><decl pos:start="138:13" pos:end="138:33"><type pos:start="138:13" pos:end="138:15"><name pos:start="138:13" pos:end="138:15">int</name></type> <name pos:start="138:17" pos:end="138:29">pes_extension</name> <init pos:start="138:31" pos:end="138:33">= <expr pos:start="138:33" pos:end="138:33"><literal type="number" pos:start="138:33" pos:end="138:33">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="140:13" pos:end="140:46"><decl pos:start="140:13" pos:end="140:45"><type pos:start="140:13" pos:end="140:15"><name pos:start="140:13" pos:end="140:15">int</name></type> <name pos:start="140:17" pos:end="140:41">pes_header_stuffing_bytes</name> <init pos:start="140:43" pos:end="140:45">= <expr pos:start="140:45" pos:end="140:45"><literal type="number" pos:start="140:45" pos:end="140:45">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="142:13" pos:end="142:34">/* write PES header */</comment>

            <expr_stmt pos:start="144:13" pos:end="144:24"><expr pos:start="144:13" pos:end="144:23"><operator pos:start="144:13" pos:end="144:13">*</operator><name pos:start="144:14" pos:end="144:14">q</name><operator pos:start="144:15" pos:end="144:16">++</operator> <operator pos:start="144:18" pos:end="144:18">=</operator> <literal type="number" pos:start="144:20" pos:end="144:23">0x00</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="146:13" pos:end="146:24"><expr pos:start="146:13" pos:end="146:23"><operator pos:start="146:13" pos:end="146:13">*</operator><name pos:start="146:14" pos:end="146:14">q</name><operator pos:start="146:15" pos:end="146:16">++</operator> <operator pos:start="146:18" pos:end="146:18">=</operator> <literal type="number" pos:start="146:20" pos:end="146:23">0x00</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="148:13" pos:end="148:24"><expr pos:start="148:13" pos:end="148:23"><operator pos:start="148:13" pos:end="148:13">*</operator><name pos:start="148:14" pos:end="148:14">q</name><operator pos:start="148:15" pos:end="148:16">++</operator> <operator pos:start="148:18" pos:end="148:18">=</operator> <literal type="number" pos:start="148:20" pos:end="148:23">0x01</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="150:13" pos:end="150:32"><expr pos:start="150:13" pos:end="150:31"><name pos:start="150:13" pos:end="150:27">is_dvb_subtitle</name> <operator pos:start="150:29" pos:end="150:29">=</operator> <literal type="number" pos:start="150:31" pos:end="150:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="152:13" pos:end="152:32"><expr pos:start="152:13" pos:end="152:31"><name pos:start="152:13" pos:end="152:27">is_dvb_teletext</name> <operator pos:start="152:29" pos:end="152:29">=</operator> <literal type="number" pos:start="152:31" pos:end="152:31">0</literal></expr>;</expr_stmt>


                <if_stmt pos:start="155:17" pos:end="161:32"><if pos:start="155:17" pos:end="159:17">if <condition pos:start="155:20" pos:end="155:61">(<expr pos:start="155:21" pos:end="155:60"><name pos:start="155:21" pos:end="155:39"><name pos:start="155:21" pos:end="155:22">st</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:29">codec</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:39">codec_id</name></name> <operator pos:start="155:41" pos:end="155:42">==</operator> <name pos:start="155:44" pos:end="155:60">AV_CODEC_ID_DIRAC</name></expr>)</condition> <block pos:start="155:63" pos:end="159:17">{<block_content pos:start="157:21" pos:end="157:32">

                    <expr_stmt pos:start="157:21" pos:end="157:32"><expr pos:start="157:21" pos:end="157:31"><operator pos:start="157:21" pos:end="157:21">*</operator><name pos:start="157:22" pos:end="157:22">q</name><operator pos:start="157:23" pos:end="157:24">++</operator> <operator pos:start="157:26" pos:end="157:26">=</operator> <literal type="number" pos:start="157:28" pos:end="157:31">0xfd</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="159:19" pos:end="161:32">else<block type="pseudo" pos:start="161:21" pos:end="161:32"><block_content pos:start="161:21" pos:end="161:32">

                    <expr_stmt pos:start="161:21" pos:end="161:32"><expr pos:start="161:21" pos:end="161:31"><operator pos:start="161:21" pos:end="161:21">*</operator><name pos:start="161:22" pos:end="161:22">q</name><operator pos:start="161:23" pos:end="161:24">++</operator> <operator pos:start="161:26" pos:end="161:26">=</operator> <literal type="number" pos:start="161:28" pos:end="161:31">0xe0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="163:15" pos:end="173:13">else if <condition pos:start="163:23" pos:end="169:64">(<expr pos:start="163:24" pos:end="169:63"><name pos:start="163:24" pos:end="163:44"><name pos:start="163:24" pos:end="163:25">st</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:32">codec</name><operator pos:start="163:33" pos:end="163:34">-&gt;</operator><name pos:start="163:35" pos:end="163:44">codec_type</name></name> <operator pos:start="163:46" pos:end="163:47">==</operator> <name pos:start="163:49" pos:end="163:66">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="163:68" pos:end="163:69">&amp;&amp;</operator>

                       <operator pos:start="165:24" pos:end="165:24">(</operator><name pos:start="165:25" pos:end="165:43"><name pos:start="165:25" pos:end="165:26">st</name><operator pos:start="165:27" pos:end="165:28">-&gt;</operator><name pos:start="165:29" pos:end="165:33">codec</name><operator pos:start="165:34" pos:end="165:35">-&gt;</operator><name pos:start="165:36" pos:end="165:43">codec_id</name></name> <operator pos:start="165:45" pos:end="165:46">==</operator> <name pos:start="165:48" pos:end="165:62">AV_CODEC_ID_MP2</name> <operator pos:start="165:64" pos:end="165:65">||</operator>

                        <name pos:start="167:25" pos:end="167:43"><name pos:start="167:25" pos:end="167:26">st</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:33">codec</name><operator pos:start="167:34" pos:end="167:35">-&gt;</operator><name pos:start="167:36" pos:end="167:43">codec_id</name></name> <operator pos:start="167:45" pos:end="167:46">==</operator> <name pos:start="167:48" pos:end="167:62">AV_CODEC_ID_MP3</name> <operator pos:start="167:64" pos:end="167:65">||</operator>

                        <name pos:start="169:25" pos:end="169:43"><name pos:start="169:25" pos:end="169:26">st</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:33">codec</name><operator pos:start="169:34" pos:end="169:35">-&gt;</operator><name pos:start="169:36" pos:end="169:43">codec_id</name></name> <operator pos:start="169:45" pos:end="169:46">==</operator> <name pos:start="169:48" pos:end="169:62">AV_CODEC_ID_AAC</name><operator pos:start="169:63" pos:end="169:63">)</operator></expr>)</condition> <block pos:start="169:66" pos:end="173:13">{<block_content pos:start="171:17" pos:end="171:28">

                <expr_stmt pos:start="171:17" pos:end="171:28"><expr pos:start="171:17" pos:end="171:27"><operator pos:start="171:17" pos:end="171:17">*</operator><name pos:start="171:18" pos:end="171:18">q</name><operator pos:start="171:19" pos:end="171:20">++</operator> <operator pos:start="171:22" pos:end="171:22">=</operator> <literal type="number" pos:start="171:24" pos:end="171:27">0xc0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="173:15" pos:end="181:13">else if <condition pos:start="173:23" pos:end="177:38">(<expr pos:start="173:24" pos:end="177:37"><name pos:start="173:24" pos:end="173:44"><name pos:start="173:24" pos:end="173:25">st</name><operator pos:start="173:26" pos:end="173:27">-&gt;</operator><name pos:start="173:28" pos:end="173:32">codec</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:44">codec_type</name></name> <operator pos:start="173:46" pos:end="173:47">==</operator> <name pos:start="173:49" pos:end="173:66">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="173:68" pos:end="173:69">&amp;&amp;</operator>

                        <name pos:start="175:25" pos:end="175:43"><name pos:start="175:25" pos:end="175:26">st</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:33">codec</name><operator pos:start="175:34" pos:end="175:35">-&gt;</operator><name pos:start="175:36" pos:end="175:43">codec_id</name></name> <operator pos:start="175:45" pos:end="175:46">==</operator> <name pos:start="175:48" pos:end="175:62">AV_CODEC_ID_AC3</name> <operator pos:start="175:64" pos:end="175:65">&amp;&amp;</operator>

                        <name pos:start="177:25" pos:end="177:37"><name pos:start="177:25" pos:end="177:26">ts</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:37">m2ts_mode</name></name></expr>)</condition> <block pos:start="177:40" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:28">

                <expr_stmt pos:start="179:17" pos:end="179:28"><expr pos:start="179:17" pos:end="179:27"><operator pos:start="179:17" pos:end="179:17">*</operator><name pos:start="179:18" pos:end="179:18">q</name><operator pos:start="179:19" pos:end="179:20">++</operator> <operator pos:start="179:22" pos:end="179:22">=</operator> <literal type="number" pos:start="179:24" pos:end="179:27">0xfd</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="181:15" pos:end="460:34">else <block pos:start="181:20" pos:end="460:34">{<block_content pos:start="183:17" pos:end="460:34">

                <expr_stmt pos:start="183:17" pos:end="183:28"><expr pos:start="183:17" pos:end="183:27"><operator pos:start="183:17" pos:end="183:17">*</operator><name pos:start="183:18" pos:end="183:18">q</name><operator pos:start="183:19" pos:end="183:20">++</operator> <operator pos:start="183:22" pos:end="183:22">=</operator> <literal type="number" pos:start="183:24" pos:end="183:27">0xbd</literal></expr>;</expr_stmt>

                <if_stmt pos:start="185:17" pos:end="460:34"><if pos:start="185:17" pos:end="460:34">if<condition pos:start="185:19" pos:end="185:66">(<expr pos:start="185:20" pos:end="185:65"><name pos:start="185:20" pos:end="185:40"><name pos:start="185:20" pos:end="185:21">st</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:28">codec</name><operator pos:start="185:29" pos:end="185:30">-&gt;</operator><name pos:start="185:31" pos:end="185:40">codec_type</name></name> <operator pos:start="185:42" pos:end="185:43">==</operator> <name pos:start="185:45" pos:end="185:65">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block pos:start="185:68" pos:end="460:34">{<block_content pos:start="187:21" pos:end="460:34">

                    <if_stmt pos:start="187:21" pos:end="460:34"><if pos:start="187:21" pos:end="191:21">if <condition pos:start="187:24" pos:end="187:72">(<expr pos:start="187:25" pos:end="187:71"><name pos:start="187:25" pos:end="187:43"><name pos:start="187:25" pos:end="187:26">st</name><operator pos:start="187:27" pos:end="187:28">-&gt;</operator><name pos:start="187:29" pos:end="187:33">codec</name><operator pos:start="187:34" pos:end="187:35">-&gt;</operator><name pos:start="187:36" pos:end="187:43">codec_id</name></name> <operator pos:start="187:45" pos:end="187:46">==</operator> <name pos:start="187:48" pos:end="187:71">AV_CODEC_ID_DVB_SUBTITLE</name></expr>)</condition> <block pos:start="187:74" pos:end="191:21">{<block_content pos:start="189:25" pos:end="189:44">

                        <expr_stmt pos:start="189:25" pos:end="189:44"><expr pos:start="189:25" pos:end="189:43"><name pos:start="189:25" pos:end="189:39">is_dvb_subtitle</name> <operator pos:start="189:41" pos:end="189:41">=</operator> <literal type="number" pos:start="189:43" pos:end="189:43">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="191:23" pos:end="460:34">else if <condition pos:start="191:31" pos:end="191:79">(<expr pos:start="191:32" pos:end="191:78"><name pos:start="191:32" pos:end="191:50"><name pos:start="191:32" pos:end="191:33">st</name><operator pos:start="191:34" pos:end="191:35">-&gt;</operator><name pos:start="191:36" pos:end="191:40">codec</name><operator pos:start="191:41" pos:end="191:42">-&gt;</operator><name pos:start="191:43" pos:end="191:50">codec_id</name></name> <operator pos:start="191:52" pos:end="191:53">==</operator> <name pos:start="191:55" pos:end="191:78">AV_CODEC_ID_DVB_TELETEXT</name></expr>)</condition> <block pos:start="191:81" pos:end="460:34">{<block_content pos:start="193:25" pos:end="460:34">

                        <expr_stmt pos:start="193:25" pos:end="193:44"><expr pos:start="193:25" pos:end="193:43"><name pos:start="193:25" pos:end="193:39">is_dvb_teletext</name> <operator pos:start="193:41" pos:end="193:41">=</operator> <literal type="number" pos:start="193:43" pos:end="193:43">1</literal></expr>;</expr_stmt>




            <expr_stmt pos:start="198:13" pos:end="198:27"><expr pos:start="198:13" pos:end="198:26"><name pos:start="198:13" pos:end="198:22">header_len</name> <operator pos:start="198:24" pos:end="198:24">=</operator> <literal type="number" pos:start="198:26" pos:end="198:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="200:13" pos:end="200:22"><expr pos:start="200:13" pos:end="200:21"><name pos:start="200:13" pos:end="200:17">flags</name> <operator pos:start="200:19" pos:end="200:19">=</operator> <literal type="number" pos:start="200:21" pos:end="200:21">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="202:13" pos:end="460:34"><if pos:start="202:13" pos:end="460:34">if <condition pos:start="202:16" pos:end="202:38">(<expr pos:start="202:17" pos:end="202:37"><name pos:start="202:17" pos:end="202:19">pts</name> <operator pos:start="202:21" pos:end="202:22">!=</operator> <name pos:start="202:24" pos:end="202:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="202:40" pos:end="460:34">{<block_content pos:start="204:17" pos:end="460:34">

                <expr_stmt pos:start="204:17" pos:end="204:32"><expr pos:start="204:17" pos:end="204:31"><name pos:start="204:17" pos:end="204:26">header_len</name> <operator pos:start="204:28" pos:end="204:29">+=</operator> <literal type="number" pos:start="204:31" pos:end="204:31">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="206:17" pos:end="206:30"><expr pos:start="206:17" pos:end="206:29"><name pos:start="206:17" pos:end="206:21">flags</name> <operator pos:start="206:23" pos:end="206:24">|=</operator> <literal type="number" pos:start="206:26" pos:end="206:29">0x80</literal></expr>;</expr_stmt>


            <if_stmt pos:start="209:13" pos:end="460:34"><if pos:start="209:13" pos:end="460:34">if <condition pos:start="209:16" pos:end="209:77">(<expr pos:start="209:17" pos:end="209:76"><name pos:start="209:17" pos:end="209:19">dts</name> <operator pos:start="209:21" pos:end="209:22">!=</operator> <name pos:start="209:24" pos:end="209:37">AV_NOPTS_VALUE</name> <operator pos:start="209:39" pos:end="209:40">&amp;&amp;</operator> <name pos:start="209:42" pos:end="209:44">pts</name> <operator pos:start="209:46" pos:end="209:47">!=</operator> <name pos:start="209:49" pos:end="209:62">AV_NOPTS_VALUE</name> <operator pos:start="209:64" pos:end="209:65">&amp;&amp;</operator> <name pos:start="209:67" pos:end="209:69">dts</name> <operator pos:start="209:71" pos:end="209:72">!=</operator> <name pos:start="209:74" pos:end="209:76">pts</name></expr>)</condition> <block pos:start="209:79" pos:end="460:34">{<block_content pos:start="211:17" pos:end="460:34">

                <expr_stmt pos:start="211:17" pos:end="211:32"><expr pos:start="211:17" pos:end="211:31"><name pos:start="211:17" pos:end="211:26">header_len</name> <operator pos:start="211:28" pos:end="211:29">+=</operator> <literal type="number" pos:start="211:31" pos:end="211:31">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:30"><expr pos:start="213:17" pos:end="213:29"><name pos:start="213:17" pos:end="213:21">flags</name> <operator pos:start="213:23" pos:end="213:24">|=</operator> <literal type="number" pos:start="213:26" pos:end="213:29">0x40</literal></expr>;</expr_stmt>


            <if_stmt pos:start="216:13" pos:end="460:34"><if pos:start="216:13" pos:end="460:34">if <condition pos:start="216:16" pos:end="218:57">(<expr pos:start="216:17" pos:end="218:56"><name pos:start="216:17" pos:end="216:37"><name pos:start="216:17" pos:end="216:18">st</name><operator pos:start="216:19" pos:end="216:20">-&gt;</operator><name pos:start="216:21" pos:end="216:25">codec</name><operator pos:start="216:26" pos:end="216:27">-&gt;</operator><name pos:start="216:28" pos:end="216:37">codec_type</name></name> <operator pos:start="216:39" pos:end="216:40">==</operator> <name pos:start="216:42" pos:end="216:59">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="216:61" pos:end="216:62">&amp;&amp;</operator>

                <name pos:start="218:17" pos:end="218:35"><name pos:start="218:17" pos:end="218:18">st</name><operator pos:start="218:19" pos:end="218:20">-&gt;</operator><name pos:start="218:21" pos:end="218:25">codec</name><operator pos:start="218:26" pos:end="218:27">-&gt;</operator><name pos:start="218:28" pos:end="218:35">codec_id</name></name> <operator pos:start="218:37" pos:end="218:38">==</operator> <name pos:start="218:40" pos:end="218:56">AV_CODEC_ID_DIRAC</name></expr>)</condition> <block pos:start="218:59" pos:end="460:34">{<block_content pos:start="222:17" pos:end="460:34">

                <comment type="block" pos:start="220:17" pos:end="220:44">/* set PES_extension_flag */</comment>

                <expr_stmt pos:start="222:17" pos:end="222:34"><expr pos:start="222:17" pos:end="222:33"><name pos:start="222:17" pos:end="222:29">pes_extension</name> <operator pos:start="222:31" pos:end="222:31">=</operator> <literal type="number" pos:start="222:33" pos:end="222:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="224:17" pos:end="224:30"><expr pos:start="224:17" pos:end="224:29"><name pos:start="224:17" pos:end="224:21">flags</name> <operator pos:start="224:23" pos:end="224:24">|=</operator> <literal type="number" pos:start="224:26" pos:end="224:29">0x01</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="228:17" pos:end="236:18">/*

                * One byte for PES2 extension flag +

                * one byte for extension length +

                * one byte for extension id

                */</comment>

                <expr_stmt pos:start="238:17" pos:end="238:32"><expr pos:start="238:17" pos:end="238:31"><name pos:start="238:17" pos:end="238:26">header_len</name> <operator pos:start="238:28" pos:end="238:29">+=</operator> <literal type="number" pos:start="238:31" pos:end="238:31">3</literal></expr>;</expr_stmt>


            <comment type="block" pos:start="241:13" pos:end="245:15">/* for Blu-ray AC3 Audio the PES Extension flag should be as follow

             * otherwise it will not play sound on blu-ray

             */</comment>

            <if_stmt pos:start="247:13" pos:end="460:34"><if pos:start="247:13" pos:end="460:34">if <condition pos:start="247:16" pos:end="251:55">(<expr pos:start="247:17" pos:end="251:54"><name pos:start="247:17" pos:end="247:29"><name pos:start="247:17" pos:end="247:18">ts</name><operator pos:start="247:19" pos:end="247:20">-&gt;</operator><name pos:start="247:21" pos:end="247:29">m2ts_mode</name></name> <operator pos:start="247:31" pos:end="247:32">&amp;&amp;</operator>

                <name pos:start="249:17" pos:end="249:37"><name pos:start="249:17" pos:end="249:18">st</name><operator pos:start="249:19" pos:end="249:20">-&gt;</operator><name pos:start="249:21" pos:end="249:25">codec</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:37">codec_type</name></name> <operator pos:start="249:39" pos:end="249:40">==</operator> <name pos:start="249:42" pos:end="249:59">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="249:61" pos:end="249:62">&amp;&amp;</operator>

                <name pos:start="251:17" pos:end="251:35"><name pos:start="251:17" pos:end="251:18">st</name><operator pos:start="251:19" pos:end="251:20">-&gt;</operator><name pos:start="251:21" pos:end="251:25">codec</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:35">codec_id</name></name> <operator pos:start="251:37" pos:end="251:38">==</operator> <name pos:start="251:40" pos:end="251:54">AV_CODEC_ID_AC3</name></expr>)</condition> <block pos:start="251:57" pos:end="460:34">{<block_content pos:start="255:25" pos:end="460:34">

                        <comment type="block" pos:start="253:25" pos:end="253:52">/* set PES_extension_flag */</comment>

                        <expr_stmt pos:start="255:25" pos:end="255:42"><expr pos:start="255:25" pos:end="255:41"><name pos:start="255:25" pos:end="255:37">pes_extension</name> <operator pos:start="255:39" pos:end="255:39">=</operator> <literal type="number" pos:start="255:41" pos:end="255:41">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="257:25" pos:end="257:38"><expr pos:start="257:25" pos:end="257:37"><name pos:start="257:25" pos:end="257:29">flags</name> <operator pos:start="257:31" pos:end="257:32">|=</operator> <literal type="number" pos:start="257:34" pos:end="257:37">0x01</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="259:25" pos:end="259:40"><expr pos:start="259:25" pos:end="259:39"><name pos:start="259:25" pos:end="259:34">header_len</name> <operator pos:start="259:36" pos:end="259:37">+=</operator> <literal type="number" pos:start="259:39" pos:end="259:39">3</literal></expr>;</expr_stmt>


            <if_stmt pos:start="262:13" pos:end="460:34"><if pos:start="262:13" pos:end="460:34">if <condition pos:start="262:16" pos:end="262:32">(<expr pos:start="262:17" pos:end="262:31"><name pos:start="262:17" pos:end="262:31">is_dvb_teletext</name></expr>)</condition> <block pos:start="262:34" pos:end="460:34">{<block_content pos:start="264:17" pos:end="460:34">

                <expr_stmt pos:start="264:17" pos:end="264:62"><expr pos:start="264:17" pos:end="264:61"><name pos:start="264:17" pos:end="264:41">pes_header_stuffing_bytes</name> <operator pos:start="264:43" pos:end="264:43">=</operator> <literal type="number" pos:start="264:45" pos:end="264:50">0x24</literal> <operator pos:start="264:50" pos:end="264:50">-</operator> <name pos:start="264:52" pos:end="264:61">header_len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="266:17" pos:end="266:34"><expr pos:start="266:17" pos:end="266:33"><name pos:start="266:17" pos:end="266:26">header_len</name> <operator pos:start="266:28" pos:end="266:28">=</operator> <literal type="number" pos:start="266:30" pos:end="266:33">0x24</literal></expr>;</expr_stmt>


            <expr_stmt pos:start="269:13" pos:end="269:48"><expr pos:start="269:13" pos:end="269:47"><name pos:start="269:13" pos:end="269:15">len</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <name pos:start="269:19" pos:end="269:30">payload_size</name> <operator pos:start="269:32" pos:end="269:32">+</operator> <name pos:start="269:34" pos:end="269:43">header_len</name> <operator pos:start="269:45" pos:end="269:45">+</operator> <literal type="number" pos:start="269:47" pos:end="269:47">3</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="271:13" pos:end="271:117">/* 3 extra bytes should be added to DVB subtitle payload: 0x20 0x00 at the beginning and trailing 0xff */</comment>

            <if_stmt pos:start="273:13" pos:end="460:34"><if pos:start="273:13" pos:end="460:34">if <condition pos:start="273:16" pos:end="273:32">(<expr pos:start="273:17" pos:end="273:31"><name pos:start="273:17" pos:end="273:31">is_dvb_subtitle</name></expr>)</condition> <block pos:start="273:34" pos:end="460:34">{<block_content pos:start="275:17" pos:end="460:34">

                <expr_stmt pos:start="275:17" pos:end="275:25"><expr pos:start="275:17" pos:end="275:24"><name pos:start="275:17" pos:end="275:19">len</name> <operator pos:start="275:21" pos:end="275:22">+=</operator> <literal type="number" pos:start="275:24" pos:end="275:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:31"><expr pos:start="277:17" pos:end="277:30"><name pos:start="277:17" pos:end="277:28">payload_size</name><operator pos:start="277:29" pos:end="277:30">++</operator></expr>;</expr_stmt>


            <if_stmt pos:start="280:13" pos:end="286:28"><if pos:start="280:13" pos:end="286:28">if <condition pos:start="280:16" pos:end="280:29">(<expr pos:start="280:17" pos:end="280:28"><name pos:start="280:17" pos:end="280:19">len</name> <operator pos:start="280:21" pos:end="280:21">&gt;</operator> <literal type="number" pos:start="280:23" pos:end="280:28">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="286:13" pos:end="286:28"><block_content pos:start="286:13" pos:end="286:28">





            <expr_stmt pos:start="286:13" pos:end="286:28"><expr pos:start="286:13" pos:end="286:27"><operator pos:start="286:13" pos:end="286:13">*</operator><name pos:start="286:14" pos:end="286:14">q</name><operator pos:start="286:15" pos:end="286:16">++</operator> <operator pos:start="286:18" pos:end="286:18">=</operator> <name pos:start="286:20" pos:end="286:22">len</name> <operator pos:start="286:24" pos:end="286:25">&gt;&gt;</operator> <literal type="number" pos:start="286:27" pos:end="286:27">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="288:13" pos:end="288:23"><expr pos:start="288:13" pos:end="288:22"><operator pos:start="288:13" pos:end="288:13">*</operator><name pos:start="288:14" pos:end="288:14">q</name><operator pos:start="288:15" pos:end="288:16">++</operator> <operator pos:start="288:18" pos:end="288:18">=</operator> <name pos:start="288:20" pos:end="288:22">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="290:13" pos:end="290:23"><expr pos:start="290:13" pos:end="290:22"><name pos:start="290:13" pos:end="290:15">val</name> <operator pos:start="290:17" pos:end="290:17">=</operator> <literal type="number" pos:start="290:19" pos:end="290:22">0x80</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="292:13" pos:end="292:84">/* data alignment indicator is required for subtitle and data streams */</comment>

            <if_stmt pos:start="294:13" pos:end="296:28"><if pos:start="294:13" pos:end="296:28">if <condition pos:start="294:16" pos:end="294:109">(<expr pos:start="294:17" pos:end="294:108"><name pos:start="294:17" pos:end="294:37"><name pos:start="294:17" pos:end="294:18">st</name><operator pos:start="294:19" pos:end="294:20">-&gt;</operator><name pos:start="294:21" pos:end="294:25">codec</name><operator pos:start="294:26" pos:end="294:27">-&gt;</operator><name pos:start="294:28" pos:end="294:37">codec_type</name></name> <operator pos:start="294:39" pos:end="294:40">==</operator> <name pos:start="294:42" pos:end="294:62">AVMEDIA_TYPE_SUBTITLE</name> <operator pos:start="294:64" pos:end="294:65">||</operator> <name pos:start="294:67" pos:end="294:87"><name pos:start="294:67" pos:end="294:68">st</name><operator pos:start="294:69" pos:end="294:70">-&gt;</operator><name pos:start="294:71" pos:end="294:75">codec</name><operator pos:start="294:76" pos:end="294:77">-&gt;</operator><name pos:start="294:78" pos:end="294:87">codec_type</name></name> <operator pos:start="294:89" pos:end="294:90">==</operator> <name pos:start="294:92" pos:end="294:108">AVMEDIA_TYPE_DATA</name></expr>)</condition><block type="pseudo" pos:start="296:17" pos:end="296:28"><block_content pos:start="296:17" pos:end="296:28">

                <expr_stmt pos:start="296:17" pos:end="296:28"><expr pos:start="296:17" pos:end="296:27"><name pos:start="296:17" pos:end="296:19">val</name> <operator pos:start="296:21" pos:end="296:22">|=</operator> <literal type="number" pos:start="296:24" pos:end="296:27">0x04</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="298:13" pos:end="298:23"><expr pos:start="298:13" pos:end="298:22"><operator pos:start="298:13" pos:end="298:13">*</operator><name pos:start="298:14" pos:end="298:14">q</name><operator pos:start="298:15" pos:end="298:16">++</operator> <operator pos:start="298:18" pos:end="298:18">=</operator> <name pos:start="298:20" pos:end="298:22">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="300:13" pos:end="300:25"><expr pos:start="300:13" pos:end="300:24"><operator pos:start="300:13" pos:end="300:13">*</operator><name pos:start="300:14" pos:end="300:14">q</name><operator pos:start="300:15" pos:end="300:16">++</operator> <operator pos:start="300:18" pos:end="300:18">=</operator> <name pos:start="300:20" pos:end="300:24">flags</name></expr>;</expr_stmt>

            <expr_stmt pos:start="302:13" pos:end="302:30"><expr pos:start="302:13" pos:end="302:29"><operator pos:start="302:13" pos:end="302:13">*</operator><name pos:start="302:14" pos:end="302:14">q</name><operator pos:start="302:15" pos:end="302:16">++</operator> <operator pos:start="302:18" pos:end="302:18">=</operator> <name pos:start="302:20" pos:end="302:29">header_len</name></expr>;</expr_stmt>

            <if_stmt pos:start="304:13" pos:end="460:34"><if pos:start="304:13" pos:end="460:34">if <condition pos:start="304:16" pos:end="304:38">(<expr pos:start="304:17" pos:end="304:37"><name pos:start="304:17" pos:end="304:19">pts</name> <operator pos:start="304:21" pos:end="304:22">!=</operator> <name pos:start="304:24" pos:end="304:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="304:40" pos:end="460:34">{<block_content pos:start="306:17" pos:end="460:34">

                <expr_stmt pos:start="306:17" pos:end="306:46"><expr pos:start="306:17" pos:end="306:45"><call pos:start="306:17" pos:end="306:45"><name pos:start="306:17" pos:end="306:25">write_pts</name><argument_list pos:start="306:26" pos:end="306:45">(<argument pos:start="306:27" pos:end="306:27"><expr pos:start="306:27" pos:end="306:27"><name pos:start="306:27" pos:end="306:27">q</name></expr></argument>, <argument pos:start="306:30" pos:end="306:39"><expr pos:start="306:30" pos:end="306:39"><name pos:start="306:30" pos:end="306:34">flags</name> <operator pos:start="306:36" pos:end="306:37">&gt;&gt;</operator> <literal type="number" pos:start="306:39" pos:end="306:39">6</literal></expr></argument>, <argument pos:start="306:42" pos:end="306:44"><expr pos:start="306:42" pos:end="306:44"><name pos:start="306:42" pos:end="306:44">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="308:17" pos:end="308:23"><expr pos:start="308:17" pos:end="308:22"><name pos:start="308:17" pos:end="308:17">q</name> <operator pos:start="308:19" pos:end="308:20">+=</operator> <literal type="number" pos:start="308:22" pos:end="308:22">5</literal></expr>;</expr_stmt>


            <if_stmt pos:start="311:13" pos:end="460:34"><if pos:start="311:13" pos:end="460:34">if <condition pos:start="311:16" pos:end="311:77">(<expr pos:start="311:17" pos:end="311:76"><name pos:start="311:17" pos:end="311:19">dts</name> <operator pos:start="311:21" pos:end="311:22">!=</operator> <name pos:start="311:24" pos:end="311:37">AV_NOPTS_VALUE</name> <operator pos:start="311:39" pos:end="311:40">&amp;&amp;</operator> <name pos:start="311:42" pos:end="311:44">pts</name> <operator pos:start="311:46" pos:end="311:47">!=</operator> <name pos:start="311:49" pos:end="311:62">AV_NOPTS_VALUE</name> <operator pos:start="311:64" pos:end="311:65">&amp;&amp;</operator> <name pos:start="311:67" pos:end="311:69">dts</name> <operator pos:start="311:71" pos:end="311:72">!=</operator> <name pos:start="311:74" pos:end="311:76">pts</name></expr>)</condition> <block pos:start="311:79" pos:end="460:34">{<block_content pos:start="313:17" pos:end="460:34">

                <expr_stmt pos:start="313:17" pos:end="313:37"><expr pos:start="313:17" pos:end="313:36"><call pos:start="313:17" pos:end="313:36"><name pos:start="313:17" pos:end="313:25">write_pts</name><argument_list pos:start="313:26" pos:end="313:36">(<argument pos:start="313:27" pos:end="313:27"><expr pos:start="313:27" pos:end="313:27"><name pos:start="313:27" pos:end="313:27">q</name></expr></argument>, <argument pos:start="313:30" pos:end="313:30"><expr pos:start="313:30" pos:end="313:30"><literal type="number" pos:start="313:30" pos:end="313:30">1</literal></expr></argument>, <argument pos:start="313:33" pos:end="313:35"><expr pos:start="313:33" pos:end="313:35"><name pos:start="313:33" pos:end="313:35">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:23"><expr pos:start="315:17" pos:end="315:22"><name pos:start="315:17" pos:end="315:17">q</name> <operator pos:start="315:19" pos:end="315:20">+=</operator> <literal type="number" pos:start="315:22" pos:end="315:22">5</literal></expr>;</expr_stmt>


            <if_stmt pos:start="318:13" pos:end="460:34"><if pos:start="318:13" pos:end="460:34">if <condition pos:start="318:16" pos:end="318:74">(<expr pos:start="318:17" pos:end="318:73"><name pos:start="318:17" pos:end="318:29">pes_extension</name> <operator pos:start="318:31" pos:end="318:32">&amp;&amp;</operator> <name pos:start="318:34" pos:end="318:52"><name pos:start="318:34" pos:end="318:35">st</name><operator pos:start="318:36" pos:end="318:37">-&gt;</operator><name pos:start="318:38" pos:end="318:42">codec</name><operator pos:start="318:43" pos:end="318:44">-&gt;</operator><name pos:start="318:45" pos:end="318:52">codec_id</name></name> <operator pos:start="318:54" pos:end="318:55">==</operator> <name pos:start="318:57" pos:end="318:73">AV_CODEC_ID_DIRAC</name></expr>)</condition> <block pos:start="318:76" pos:end="460:34">{<block_content pos:start="320:17" pos:end="460:34">

                <expr_stmt pos:start="320:17" pos:end="320:29"><expr pos:start="320:17" pos:end="320:28"><name pos:start="320:17" pos:end="320:21">flags</name> <operator pos:start="320:23" pos:end="320:23">=</operator> <literal type="number" pos:start="320:25" pos:end="320:28">0x01</literal></expr>;</expr_stmt>  <comment type="block" pos:start="320:32" pos:end="320:61">/* set PES_extension_flag_2 */</comment>

                <expr_stmt pos:start="322:17" pos:end="322:29"><expr pos:start="322:17" pos:end="322:28"><operator pos:start="322:17" pos:end="322:17">*</operator><name pos:start="322:18" pos:end="322:18">q</name><operator pos:start="322:19" pos:end="322:20">++</operator> <operator pos:start="322:22" pos:end="322:22">=</operator> <name pos:start="322:24" pos:end="322:28">flags</name></expr>;</expr_stmt>

                <expr_stmt pos:start="324:17" pos:end="324:35"><expr pos:start="324:17" pos:end="324:34"><operator pos:start="324:17" pos:end="324:17">*</operator><name pos:start="324:18" pos:end="324:18">q</name><operator pos:start="324:19" pos:end="324:20">++</operator> <operator pos:start="324:22" pos:end="324:22">=</operator> <literal type="number" pos:start="324:24" pos:end="324:27">0x80</literal> <operator pos:start="324:29" pos:end="324:29">|</operator> <literal type="number" pos:start="324:31" pos:end="324:34">0x01</literal></expr>;</expr_stmt>  <comment type="block" pos:start="324:38" pos:end="324:72">/* marker bit + extension length */</comment>

                <comment type="block" pos:start="326:17" pos:end="332:18">/*

                * Set the stream id extension flag bit to 0 and

                * write the extended stream id

                */</comment>

                <expr_stmt pos:start="334:17" pos:end="334:35"><expr pos:start="334:17" pos:end="334:34"><operator pos:start="334:17" pos:end="334:17">*</operator><name pos:start="334:18" pos:end="334:18">q</name><operator pos:start="334:19" pos:end="334:20">++</operator> <operator pos:start="334:22" pos:end="334:22">=</operator> <literal type="number" pos:start="334:24" pos:end="334:27">0x00</literal> <operator pos:start="334:29" pos:end="334:29">|</operator> <literal type="number" pos:start="334:31" pos:end="334:34">0x60</literal></expr>;</expr_stmt>


            <comment type="block" pos:start="337:13" pos:end="337:62">/* For Blu-ray AC3 Audio Setting extended flags */</comment>

          <if_stmt pos:start="339:11" pos:end="460:34"><if pos:start="339:11" pos:end="460:34">if <condition pos:start="339:14" pos:end="343:53">(<expr pos:start="339:15" pos:end="343:52"><name pos:start="339:15" pos:end="339:27"><name pos:start="339:15" pos:end="339:16">ts</name><operator pos:start="339:17" pos:end="339:18">-&gt;</operator><name pos:start="339:19" pos:end="339:27">m2ts_mode</name></name> <operator pos:start="339:29" pos:end="339:30">&amp;&amp;</operator>

              <name pos:start="341:15" pos:end="341:27">pes_extension</name> <operator pos:start="341:29" pos:end="341:30">&amp;&amp;</operator>

              <name pos:start="343:15" pos:end="343:33"><name pos:start="343:15" pos:end="343:16">st</name><operator pos:start="343:17" pos:end="343:18">-&gt;</operator><name pos:start="343:19" pos:end="343:23">codec</name><operator pos:start="343:24" pos:end="343:25">-&gt;</operator><name pos:start="343:26" pos:end="343:33">codec_id</name></name> <operator pos:start="343:35" pos:end="343:36">==</operator> <name pos:start="343:38" pos:end="343:52">AV_CODEC_ID_AC3</name></expr>)</condition> <block pos:start="343:55" pos:end="460:34">{<block_content pos:start="345:23" pos:end="460:34">

                      <expr_stmt pos:start="345:23" pos:end="345:35"><expr pos:start="345:23" pos:end="345:34"><name pos:start="345:23" pos:end="345:27">flags</name> <operator pos:start="345:29" pos:end="345:29">=</operator> <literal type="number" pos:start="345:31" pos:end="345:34">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="345:37" pos:end="345:66">/* set PES_extension_flag_2 */</comment>

                      <expr_stmt pos:start="347:23" pos:end="347:35"><expr pos:start="347:23" pos:end="347:34"><operator pos:start="347:23" pos:end="347:23">*</operator><name pos:start="347:24" pos:end="347:24">q</name><operator pos:start="347:25" pos:end="347:26">++</operator> <operator pos:start="347:28" pos:end="347:28">=</operator> <name pos:start="347:30" pos:end="347:34">flags</name></expr>;</expr_stmt>

                      <expr_stmt pos:start="349:23" pos:end="349:41"><expr pos:start="349:23" pos:end="349:40"><operator pos:start="349:23" pos:end="349:23">*</operator><name pos:start="349:24" pos:end="349:24">q</name><operator pos:start="349:25" pos:end="349:26">++</operator> <operator pos:start="349:28" pos:end="349:28">=</operator> <literal type="number" pos:start="349:30" pos:end="349:33">0x80</literal> <operator pos:start="349:35" pos:end="349:35">|</operator> <literal type="number" pos:start="349:37" pos:end="349:40">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="349:43" pos:end="349:77">/* marker bit + extension length */</comment>

                      <expr_stmt pos:start="351:23" pos:end="351:41"><expr pos:start="351:23" pos:end="351:40"><operator pos:start="351:23" pos:end="351:23">*</operator><name pos:start="351:24" pos:end="351:24">q</name><operator pos:start="351:25" pos:end="351:26">++</operator> <operator pos:start="351:28" pos:end="351:28">=</operator> <literal type="number" pos:start="351:30" pos:end="351:33">0x00</literal> <operator pos:start="351:35" pos:end="351:35">|</operator> <literal type="number" pos:start="351:37" pos:end="351:40">0x71</literal></expr>;</expr_stmt> <comment type="block" pos:start="351:43" pos:end="351:89">/* for AC3 Audio (specifically on blue-rays) */</comment>






            <if_stmt pos:start="358:13" pos:end="460:34"><if pos:start="358:13" pos:end="460:34">if <condition pos:start="358:16" pos:end="358:32">(<expr pos:start="358:17" pos:end="358:31"><name pos:start="358:17" pos:end="358:31">is_dvb_subtitle</name></expr>)</condition> <block pos:start="358:34" pos:end="460:34">{<block_content pos:start="366:17" pos:end="460:34">

                <comment type="block" pos:start="360:17" pos:end="364:103">/* First two fields of DVB subtitles PES data:

                 * data_identifier: for DVB subtitle streams shall be coded with the value 0x20

                 * subtitle_stream_id: for DVB subtitle stream shall be identified by the value 0x00 */</comment>

                <expr_stmt pos:start="366:17" pos:end="366:28"><expr pos:start="366:17" pos:end="366:27"><operator pos:start="366:17" pos:end="366:17">*</operator><name pos:start="366:18" pos:end="366:18">q</name><operator pos:start="366:19" pos:end="366:20">++</operator> <operator pos:start="366:22" pos:end="366:22">=</operator> <literal type="number" pos:start="366:24" pos:end="366:27">0x20</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="368:17" pos:end="368:28"><expr pos:start="368:17" pos:end="368:27"><operator pos:start="368:17" pos:end="368:17">*</operator><name pos:start="368:18" pos:end="368:18">q</name><operator pos:start="368:19" pos:end="368:20">++</operator> <operator pos:start="368:22" pos:end="368:22">=</operator> <literal type="number" pos:start="368:24" pos:end="368:27">0x00</literal></expr>;</expr_stmt>


            <if_stmt pos:start="371:13" pos:end="460:34"><if pos:start="371:13" pos:end="460:34">if <condition pos:start="371:16" pos:end="371:32">(<expr pos:start="371:17" pos:end="371:31"><name pos:start="371:17" pos:end="371:31">is_dvb_teletext</name></expr>)</condition> <block pos:start="371:34" pos:end="460:34">{<block_content pos:start="373:17" pos:end="460:34">

                <expr_stmt pos:start="373:17" pos:end="373:59"><expr pos:start="373:17" pos:end="373:58"><call pos:start="373:17" pos:end="373:58"><name pos:start="373:17" pos:end="373:22">memset</name><argument_list pos:start="373:23" pos:end="373:58">(<argument pos:start="373:24" pos:end="373:24"><expr pos:start="373:24" pos:end="373:24"><name pos:start="373:24" pos:end="373:24">q</name></expr></argument>, <argument pos:start="373:27" pos:end="373:30"><expr pos:start="373:27" pos:end="373:30"><literal type="number" pos:start="373:27" pos:end="373:30">0xff</literal></expr></argument>, <argument pos:start="373:33" pos:end="373:57"><expr pos:start="373:33" pos:end="373:57"><name pos:start="373:33" pos:end="373:57">pes_header_stuffing_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:47"><expr pos:start="375:17" pos:end="375:46"><name pos:start="375:17" pos:end="375:17">q</name> <operator pos:start="375:19" pos:end="375:20">+=</operator> <name pos:start="375:22" pos:end="375:46">pes_header_stuffing_bytes</name></expr>;</expr_stmt>


            <expr_stmt pos:start="378:13" pos:end="378:25"><expr pos:start="378:13" pos:end="378:24"><name pos:start="378:13" pos:end="378:20">is_start</name> <operator pos:start="378:22" pos:end="378:22">=</operator> <literal type="number" pos:start="378:24" pos:end="378:24">0</literal></expr>;</expr_stmt>


        <comment type="block" pos:start="381:9" pos:end="381:25">/* header size */</comment>

        <expr_stmt pos:start="383:9" pos:end="383:29"><expr pos:start="383:9" pos:end="383:28"><name pos:start="383:9" pos:end="383:18">header_len</name> <operator pos:start="383:20" pos:end="383:20">=</operator> <name pos:start="383:22" pos:end="383:22">q</name> <operator pos:start="383:24" pos:end="383:24">-</operator> <name pos:start="383:26" pos:end="383:28">buf</name></expr>;</expr_stmt>

        <comment type="block" pos:start="385:9" pos:end="385:22">/* data len */</comment>

        <expr_stmt pos:start="387:9" pos:end="387:42"><expr pos:start="387:9" pos:end="387:41"><name pos:start="387:9" pos:end="387:11">len</name> <operator pos:start="387:13" pos:end="387:13">=</operator> <name pos:start="387:15" pos:end="387:28">TS_PACKET_SIZE</name> <operator pos:start="387:30" pos:end="387:30">-</operator> <name pos:start="387:32" pos:end="387:41">header_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="389:9" pos:end="391:31"><if pos:start="389:9" pos:end="391:31">if <condition pos:start="389:12" pos:end="389:31">(<expr pos:start="389:13" pos:end="389:30"><name pos:start="389:13" pos:end="389:15">len</name> <operator pos:start="389:17" pos:end="389:17">&gt;</operator> <name pos:start="389:19" pos:end="389:30">payload_size</name></expr>)</condition><block type="pseudo" pos:start="391:13" pos:end="391:31"><block_content pos:start="391:13" pos:end="391:31">

            <expr_stmt pos:start="391:13" pos:end="391:31"><expr pos:start="391:13" pos:end="391:30"><name pos:start="391:13" pos:end="391:15">len</name> <operator pos:start="391:17" pos:end="391:17">=</operator> <name pos:start="391:19" pos:end="391:30">payload_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:57"><expr pos:start="393:9" pos:end="393:56"><name pos:start="393:9" pos:end="393:20">stuffing_len</name> <operator pos:start="393:22" pos:end="393:22">=</operator> <name pos:start="393:24" pos:end="393:37">TS_PACKET_SIZE</name> <operator pos:start="393:39" pos:end="393:39">-</operator> <name pos:start="393:41" pos:end="393:50">header_len</name> <operator pos:start="393:52" pos:end="393:52">-</operator> <name pos:start="393:54" pos:end="393:56">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="395:9" pos:end="460:34"><if pos:start="395:9" pos:end="460:34">if <condition pos:start="395:12" pos:end="395:29">(<expr pos:start="395:13" pos:end="395:28"><name pos:start="395:13" pos:end="395:24">stuffing_len</name> <operator pos:start="395:26" pos:end="395:26">&gt;</operator> <literal type="number" pos:start="395:28" pos:end="395:28">0</literal></expr>)</condition> <block pos:start="395:31" pos:end="460:34">{<block_content pos:start="399:13" pos:end="460:34">

            <comment type="block" pos:start="397:13" pos:end="397:39">/* add stuffing with AFC */</comment>

            <if_stmt pos:start="399:13" pos:end="460:34"><if pos:start="399:13" pos:end="415:13">if <condition pos:start="399:16" pos:end="399:30">(<expr pos:start="399:17" pos:end="399:29"><name pos:start="399:17" pos:end="399:22"><name pos:start="399:17" pos:end="399:19">buf</name><index pos:start="399:20" pos:end="399:22">[<expr pos:start="399:21" pos:end="399:21"><literal type="number" pos:start="399:21" pos:end="399:21">3</literal></expr>]</index></name> <operator pos:start="399:24" pos:end="399:24">&amp;</operator> <literal type="number" pos:start="399:26" pos:end="399:29">0x20</literal></expr>)</condition> <block pos:start="399:32" pos:end="415:13">{<block_content pos:start="403:17" pos:end="413:62">

                <comment type="block" pos:start="401:17" pos:end="401:65">/* stuffing already present: increase its size */</comment>

                <expr_stmt pos:start="403:17" pos:end="403:37"><expr pos:start="403:17" pos:end="403:36"><name pos:start="403:17" pos:end="403:23">afc_len</name> <operator pos:start="403:25" pos:end="403:25">=</operator> <name pos:start="403:27" pos:end="403:32"><name pos:start="403:27" pos:end="403:29">buf</name><index pos:start="403:30" pos:end="403:32">[<expr pos:start="403:31" pos:end="403:31"><literal type="number" pos:start="403:31" pos:end="403:31">4</literal></expr>]</index></name> <operator pos:start="403:34" pos:end="403:34">+</operator> <literal type="number" pos:start="403:36" pos:end="403:36">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="405:17" pos:end="409:52"><expr pos:start="405:17" pos:end="409:51"><call pos:start="405:17" pos:end="409:51"><name pos:start="405:17" pos:end="405:23">memmove</name><argument_list pos:start="405:24" pos:end="409:51">(<argument pos:start="405:25" pos:end="405:56"><expr pos:start="405:25" pos:end="405:56"><name pos:start="405:25" pos:end="405:27">buf</name> <operator pos:start="405:29" pos:end="405:29">+</operator> <literal type="number" pos:start="405:31" pos:end="405:33">4</literal> <operator pos:start="405:33" pos:end="405:33">+</operator> <name pos:start="405:35" pos:end="405:41">afc_len</name> <operator pos:start="405:43" pos:end="405:43">+</operator> <name pos:start="405:45" pos:end="405:56">stuffing_len</name></expr></argument>,

                        <argument pos:start="407:25" pos:end="407:41"><expr pos:start="407:25" pos:end="407:41"><name pos:start="407:25" pos:end="407:27">buf</name> <operator pos:start="407:29" pos:end="407:29">+</operator> <literal type="number" pos:start="407:31" pos:end="407:33">4</literal> <operator pos:start="407:33" pos:end="407:33">+</operator> <name pos:start="407:35" pos:end="407:41">afc_len</name></expr></argument>,

                        <argument pos:start="409:25" pos:end="409:50"><expr pos:start="409:25" pos:end="409:50"><name pos:start="409:25" pos:end="409:34">header_len</name> <operator pos:start="409:36" pos:end="409:36">-</operator> <operator pos:start="409:38" pos:end="409:38">(</operator><literal type="number" pos:start="409:39" pos:end="409:41">4</literal> <operator pos:start="409:41" pos:end="409:41">+</operator> <name pos:start="409:43" pos:end="409:49">afc_len</name><operator pos:start="409:50" pos:end="409:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="411:17" pos:end="411:39"><expr pos:start="411:17" pos:end="411:38"><name pos:start="411:17" pos:end="411:22"><name pos:start="411:17" pos:end="411:19">buf</name><index pos:start="411:20" pos:end="411:22">[<expr pos:start="411:21" pos:end="411:21"><literal type="number" pos:start="411:21" pos:end="411:21">4</literal></expr>]</index></name> <operator pos:start="411:24" pos:end="411:25">+=</operator> <name pos:start="411:27" pos:end="411:38">stuffing_len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="413:17" pos:end="413:62"><expr pos:start="413:17" pos:end="413:61"><call pos:start="413:17" pos:end="413:61"><name pos:start="413:17" pos:end="413:22">memset</name><argument_list pos:start="413:23" pos:end="413:61">(<argument pos:start="413:24" pos:end="413:40"><expr pos:start="413:24" pos:end="413:40"><name pos:start="413:24" pos:end="413:26">buf</name> <operator pos:start="413:28" pos:end="413:28">+</operator> <literal type="number" pos:start="413:30" pos:end="413:32">4</literal> <operator pos:start="413:32" pos:end="413:32">+</operator> <name pos:start="413:34" pos:end="413:40">afc_len</name></expr></argument>, <argument pos:start="413:43" pos:end="413:46"><expr pos:start="413:43" pos:end="413:46"><literal type="number" pos:start="413:43" pos:end="413:46">0xff</literal></expr></argument>, <argument pos:start="413:49" pos:end="413:60"><expr pos:start="413:49" pos:end="413:60"><name pos:start="413:49" pos:end="413:60">stuffing_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="415:15" pos:end="460:34">else <block pos:start="415:20" pos:end="460:34">{<block_content pos:start="419:17" pos:end="460:34">

                <comment type="block" pos:start="417:17" pos:end="417:34">/* add stuffing */</comment>

                <expr_stmt pos:start="419:17" pos:end="419:73"><expr pos:start="419:17" pos:end="419:72"><call pos:start="419:17" pos:end="419:72"><name pos:start="419:17" pos:end="419:23">memmove</name><argument_list pos:start="419:24" pos:end="419:72">(<argument pos:start="419:25" pos:end="419:46"><expr pos:start="419:25" pos:end="419:46"><name pos:start="419:25" pos:end="419:27">buf</name> <operator pos:start="419:29" pos:end="419:29">+</operator> <literal type="number" pos:start="419:31" pos:end="419:33">4</literal> <operator pos:start="419:33" pos:end="419:33">+</operator> <name pos:start="419:35" pos:end="419:46">stuffing_len</name></expr></argument>, <argument pos:start="419:49" pos:end="419:55"><expr pos:start="419:49" pos:end="419:55"><name pos:start="419:49" pos:end="419:51">buf</name> <operator pos:start="419:53" pos:end="419:53">+</operator> <literal type="number" pos:start="419:55" pos:end="419:55">4</literal></expr></argument>, <argument pos:start="419:58" pos:end="419:71"><expr pos:start="419:58" pos:end="419:71"><name pos:start="419:58" pos:end="419:67">header_len</name> <operator pos:start="419:69" pos:end="419:69">-</operator> <literal type="number" pos:start="419:71" pos:end="419:71">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="421:17" pos:end="421:31"><expr pos:start="421:17" pos:end="421:30"><name pos:start="421:17" pos:end="421:22"><name pos:start="421:17" pos:end="421:19">buf</name><index pos:start="421:20" pos:end="421:22">[<expr pos:start="421:21" pos:end="421:21"><literal type="number" pos:start="421:21" pos:end="421:21">3</literal></expr>]</index></name> <operator pos:start="421:24" pos:end="421:25">|=</operator> <literal type="number" pos:start="421:27" pos:end="421:30">0x20</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:42"><expr pos:start="423:17" pos:end="423:41"><name pos:start="423:17" pos:end="423:22"><name pos:start="423:17" pos:end="423:19">buf</name><index pos:start="423:20" pos:end="423:22">[<expr pos:start="423:21" pos:end="423:21"><literal type="number" pos:start="423:21" pos:end="423:21">4</literal></expr>]</index></name> <operator pos:start="423:24" pos:end="423:24">=</operator> <name pos:start="423:26" pos:end="423:37">stuffing_len</name> <operator pos:start="423:39" pos:end="423:39">-</operator> <literal type="number" pos:start="423:41" pos:end="423:41">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="425:17" pos:end="460:34"><if pos:start="425:17" pos:end="460:34">if <condition pos:start="425:20" pos:end="425:38">(<expr pos:start="425:21" pos:end="425:37"><name pos:start="425:21" pos:end="425:32">stuffing_len</name> <operator pos:start="425:34" pos:end="425:35">&gt;=</operator> <literal type="number" pos:start="425:37" pos:end="425:37">2</literal></expr>)</condition> <block pos:start="425:40" pos:end="460:34">{<block_content pos:start="427:21" pos:end="460:34">

                    <expr_stmt pos:start="427:21" pos:end="427:34"><expr pos:start="427:21" pos:end="427:33"><name pos:start="427:21" pos:end="427:26"><name pos:start="427:21" pos:end="427:23">buf</name><index pos:start="427:24" pos:end="427:26">[<expr pos:start="427:25" pos:end="427:25"><literal type="number" pos:start="427:25" pos:end="427:25">5</literal></expr>]</index></name> <operator pos:start="427:28" pos:end="427:28">=</operator> <literal type="number" pos:start="427:30" pos:end="427:33">0x00</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="429:21" pos:end="429:60"><expr pos:start="429:21" pos:end="429:59"><call pos:start="429:21" pos:end="429:59"><name pos:start="429:21" pos:end="429:26">memset</name><argument_list pos:start="429:27" pos:end="429:59">(<argument pos:start="429:28" pos:end="429:34"><expr pos:start="429:28" pos:end="429:34"><name pos:start="429:28" pos:end="429:30">buf</name> <operator pos:start="429:32" pos:end="429:32">+</operator> <literal type="number" pos:start="429:34" pos:end="429:34">6</literal></expr></argument>, <argument pos:start="429:37" pos:end="429:40"><expr pos:start="429:37" pos:end="429:40"><literal type="number" pos:start="429:37" pos:end="429:40">0xff</literal></expr></argument>, <argument pos:start="429:43" pos:end="429:58"><expr pos:start="429:43" pos:end="429:58"><name pos:start="429:43" pos:end="429:54">stuffing_len</name> <operator pos:start="429:56" pos:end="429:56">-</operator> <literal type="number" pos:start="429:58" pos:end="429:58">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






        <if_stmt pos:start="436:9" pos:end="460:34"><if pos:start="436:9" pos:end="442:9">if <condition pos:start="436:12" pos:end="436:51">(<expr pos:start="436:13" pos:end="436:50"><name pos:start="436:13" pos:end="436:27">is_dvb_subtitle</name> <operator pos:start="436:29" pos:end="436:30">&amp;&amp;</operator> <name pos:start="436:32" pos:end="436:43">payload_size</name> <operator pos:start="436:45" pos:end="436:46">==</operator> <name pos:start="436:48" pos:end="436:50">len</name></expr>)</condition> <block pos:start="436:53" pos:end="442:9">{<block_content pos:start="438:13" pos:end="440:43">

            <expr_stmt pos:start="438:13" pos:end="438:65"><expr pos:start="438:13" pos:end="438:64"><call pos:start="438:13" pos:end="438:64"><name pos:start="438:13" pos:end="438:18">memcpy</name><argument_list pos:start="438:19" pos:end="438:64">(<argument pos:start="438:20" pos:end="438:45"><expr pos:start="438:20" pos:end="438:45"><name pos:start="438:20" pos:end="438:22">buf</name> <operator pos:start="438:24" pos:end="438:24">+</operator> <name pos:start="438:26" pos:end="438:39">TS_PACKET_SIZE</name> <operator pos:start="438:41" pos:end="438:41">-</operator> <name pos:start="438:43" pos:end="438:45">len</name></expr></argument>, <argument pos:start="438:48" pos:end="438:54"><expr pos:start="438:48" pos:end="438:54"><name pos:start="438:48" pos:end="438:54">payload</name></expr></argument>, <argument pos:start="438:57" pos:end="438:63"><expr pos:start="438:57" pos:end="438:63"><name pos:start="438:57" pos:end="438:59">len</name> <operator pos:start="438:61" pos:end="438:61">-</operator> <literal type="number" pos:start="438:63" pos:end="438:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="440:13" pos:end="440:43"><expr pos:start="440:13" pos:end="440:42"><name pos:start="440:13" pos:end="440:35"><name pos:start="440:13" pos:end="440:15">buf</name><index pos:start="440:16" pos:end="440:35">[<expr pos:start="440:17" pos:end="440:34"><name pos:start="440:17" pos:end="440:30">TS_PACKET_SIZE</name> <operator pos:start="440:32" pos:end="440:32">-</operator> <literal type="number" pos:start="440:34" pos:end="440:34">1</literal></expr>]</index></name> <operator pos:start="440:37" pos:end="440:37">=</operator> <literal type="number" pos:start="440:39" pos:end="440:42">0xff</literal></expr>;</expr_stmt> <comment type="block" pos:start="440:45" pos:end="440:136">/* end_of_PES_data_field_marker: an 8-bit field with fixed contents 0xff for DVB subtitle */</comment>

        </block_content>}</block></if> <else pos:start="442:11" pos:end="460:34">else <block pos:start="442:16" pos:end="460:34">{<block_content pos:start="444:13" pos:end="460:34">

            <expr_stmt pos:start="444:13" pos:end="444:61"><expr pos:start="444:13" pos:end="444:60"><call pos:start="444:13" pos:end="444:60"><name pos:start="444:13" pos:end="444:18">memcpy</name><argument_list pos:start="444:19" pos:end="444:60">(<argument pos:start="444:20" pos:end="444:45"><expr pos:start="444:20" pos:end="444:45"><name pos:start="444:20" pos:end="444:22">buf</name> <operator pos:start="444:24" pos:end="444:24">+</operator> <name pos:start="444:26" pos:end="444:39">TS_PACKET_SIZE</name> <operator pos:start="444:41" pos:end="444:41">-</operator> <name pos:start="444:43" pos:end="444:45">len</name></expr></argument>, <argument pos:start="444:48" pos:end="444:54"><expr pos:start="444:48" pos:end="444:54"><name pos:start="444:48" pos:end="444:54">payload</name></expr></argument>, <argument pos:start="444:57" pos:end="444:59"><expr pos:start="444:57" pos:end="444:59"><name pos:start="444:57" pos:end="444:59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




        <expr_stmt pos:start="449:9" pos:end="449:23"><expr pos:start="449:9" pos:end="449:22"><name pos:start="449:9" pos:end="449:15">payload</name> <operator pos:start="449:17" pos:end="449:18">+=</operator> <name pos:start="449:20" pos:end="449:22">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="451:9" pos:end="451:28"><expr pos:start="451:9" pos:end="451:27"><name pos:start="451:9" pos:end="451:20">payload_size</name> <operator pos:start="451:22" pos:end="451:23">-=</operator> <name pos:start="451:25" pos:end="451:27">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:37"><expr pos:start="453:9" pos:end="453:36"><call pos:start="453:9" pos:end="453:36"><name pos:start="453:9" pos:end="453:33">mpegts_prefix_m2ts_header</name><argument_list pos:start="453:34" pos:end="453:36">(<argument pos:start="453:35" pos:end="453:35"><expr pos:start="453:35" pos:end="453:35"><name pos:start="453:35" pos:end="453:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:47"><expr pos:start="455:9" pos:end="455:46"><call pos:start="455:9" pos:end="455:46"><name pos:start="455:9" pos:end="455:18">avio_write</name><argument_list pos:start="455:19" pos:end="455:46">(<argument pos:start="455:20" pos:end="455:24"><expr pos:start="455:20" pos:end="455:24"><name pos:start="455:20" pos:end="455:24"><name pos:start="455:20" pos:end="455:20">s</name><operator pos:start="455:21" pos:end="455:22">-&gt;</operator><name pos:start="455:23" pos:end="455:24">pb</name></name></expr></argument>, <argument pos:start="455:27" pos:end="455:29"><expr pos:start="455:27" pos:end="455:29"><name pos:start="455:27" pos:end="455:29">buf</name></expr></argument>, <argument pos:start="455:32" pos:end="455:45"><expr pos:start="455:32" pos:end="455:45"><name pos:start="455:32" pos:end="455:45">TS_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="458:5" pos:end="458:22"><expr pos:start="458:5" pos:end="458:21"><call pos:start="458:5" pos:end="458:21"><name pos:start="458:5" pos:end="458:14">avio_flush</name><argument_list pos:start="458:15" pos:end="458:21">(<argument pos:start="458:16" pos:end="458:20"><expr pos:start="458:16" pos:end="458:20"><name pos:start="458:16" pos:end="458:20"><name pos:start="458:16" pos:end="458:16">s</name><operator pos:start="458:17" pos:end="458:18">-&gt;</operator><name pos:start="458:19" pos:end="458:20">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="460:5" pos:end="460:34"><expr pos:start="460:5" pos:end="460:33"><name pos:start="460:5" pos:end="460:27"><name pos:start="460:5" pos:end="460:9">ts_st</name><operator pos:start="460:10" pos:end="460:11">-&gt;</operator><name pos:start="460:12" pos:end="460:27">prev_payload_key</name></name> <operator pos:start="460:29" pos:end="460:29">=</operator> <name pos:start="460:31" pos:end="460:33">key</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function>
</unit>
