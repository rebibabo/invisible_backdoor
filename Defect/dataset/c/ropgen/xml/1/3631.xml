<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3631.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">xen_init_pv</name><parameter_list pos:start="1:24" pos:end="1:50">(<parameter pos:start="1:25" pos:end="1:49"><decl pos:start="1:25" pos:end="1:49"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:43">QEMUMachineInitArgs</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:32">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:43">= <expr pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:32">args</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:55">= <expr pos:start="7:35" pos:end="7:55"><name pos:start="7:35" pos:end="7:55"><name pos:start="7:35" pos:end="7:38">args</name><operator pos:start="7:39" pos:end="7:40">-&gt;</operator><name pos:start="7:41" pos:end="7:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:53">= <expr pos:start="9:34" pos:end="9:53"><name pos:start="9:34" pos:end="9:53"><name pos:start="9:34" pos:end="9:37">args</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:55">= <expr pos:start="11:35" pos:end="11:55"><name pos:start="11:35" pos:end="11:55"><name pos:start="11:35" pos:end="11:38">args</name><operator pos:start="11:39" pos:end="11:40">-&gt;</operator><name pos:start="11:41" pos:end="11:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">X86CPU</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:16">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">DriveInfo</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:32">/* Initialize a dummy CPU */</comment>

    <if_stmt pos:start="25:5" pos:end="37:5"><if pos:start="25:5" pos:end="37:5">if <condition pos:start="25:8" pos:end="25:26">(<expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:17">cpu_model</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:25">NULL</name></expr>)</condition> <block pos:start="25:28" pos:end="37:5">{<block_content pos:start="29:9" pos:end="36:0">

<cpp:ifdef pos:start="27:1" pos:end="27:20">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:20">TARGET_X86_64</name></cpp:ifdef>

        <expr_stmt pos:start="29:9" pos:end="32:0"><expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:17">cpu_model</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="string" pos:start="29:21" pos:end="29:28">"qemu64"</literal></expr>;</expr_stmt>

<cpp:else pos:start="31:1" pos:end="31:5">#<cpp:directive pos:start="31:2" pos:end="31:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="33:9" pos:end="36:0"><expr pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="string" pos:start="33:21" pos:end="33:28">"qemu32"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:7">cpu</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:33"><name pos:start="39:11" pos:end="39:22">cpu_x86_init</name><argument_list pos:start="39:23" pos:end="39:33">(<argument pos:start="39:24" pos:end="39:32"><expr pos:start="39:24" pos:end="39:32"><name pos:start="39:24" pos:end="39:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:18"><expr pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:6">cs</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <call pos:start="41:10" pos:end="41:17"><name pos:start="41:10" pos:end="41:12">CPU</name><argument_list pos:start="41:13" pos:end="41:17">(<argument pos:start="41:14" pos:end="41:16"><expr pos:start="41:14" pos:end="41:16"><name pos:start="41:14" pos:end="41:16">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:6">cs</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:14">halted</name></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:43">/* Initialize backend core &amp; drivers */</comment>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:27">(<expr pos:start="49:9" pos:end="49:26"><call pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:19">xen_be_init</name><argument_list pos:start="49:20" pos:end="49:21">()</argument_list></call> <operator pos:start="49:23" pos:end="49:24">!=</operator> <literal type="number" pos:start="49:26" pos:end="49:26">0</literal></expr>)</condition> <block pos:start="49:29" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:16">

        <expr_stmt pos:start="51:9" pos:end="51:77"><expr pos:start="51:9" pos:end="51:76"><call pos:start="51:9" pos:end="51:76"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:76">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:61"><expr pos:start="51:25" pos:end="51:61"><literal type="string" pos:start="51:25" pos:end="51:61">"%s: xen backend core setup failed\n"</literal></expr></argument>, <argument pos:start="51:64" pos:end="51:75"><expr pos:start="51:64" pos:end="51:75"><name pos:start="51:64" pos:end="51:75">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><call pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">exit</name><argument_list pos:start="53:13" pos:end="53:15">(<argument pos:start="53:14" pos:end="53:14"><expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="59:5" pos:end="89:5">switch <condition pos:start="59:12" pos:end="59:21">(<expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:20">xen_mode</name></expr>)</condition> <block pos:start="59:23" pos:end="89:5">{<block_content pos:start="61:5" pos:end="87:14">

    <case pos:start="61:5" pos:end="61:20">case <expr pos:start="61:10" pos:end="61:19"><name pos:start="61:10" pos:end="61:19">XEN_ATTACH</name></expr>:</case>

        <comment type="block" pos:start="63:9" pos:end="63:52">/* nothing to do, xend handles everything */</comment>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:20">case <expr pos:start="67:10" pos:end="67:19"><name pos:start="67:10" pos:end="67:19">XEN_CREATE</name></expr>:</case>

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="71:52">(<expr pos:start="69:13" pos:end="71:51"><call pos:start="69:13" pos:end="71:47"><name pos:start="69:13" pos:end="69:31">xen_domain_build_pv</name><argument_list pos:start="69:32" pos:end="71:47">(<argument pos:start="69:33" pos:end="69:47"><expr pos:start="69:33" pos:end="69:47"><name pos:start="69:33" pos:end="69:47">kernel_filename</name></expr></argument>, <argument pos:start="69:50" pos:end="69:64"><expr pos:start="69:50" pos:end="69:64"><name pos:start="69:50" pos:end="69:64">initrd_filename</name></expr></argument>,

                                <argument pos:start="71:33" pos:end="71:46"><expr pos:start="71:33" pos:end="71:46"><name pos:start="71:33" pos:end="71:46">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="71:49" pos:end="71:49">&lt;</operator> <literal type="number" pos:start="71:51" pos:end="71:51">0</literal></expr>)</condition> <block pos:start="71:54" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:20">

            <expr_stmt pos:start="73:13" pos:end="73:63"><expr pos:start="73:13" pos:end="73:62"><call pos:start="73:13" pos:end="73:62"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="73:62">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="73:61"><expr pos:start="73:29" pos:end="73:61"><literal type="string" pos:start="73:29" pos:end="73:61">"xen pv domain creation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:20"><expr pos:start="75:13" pos:end="75:19"><call pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">exit</name><argument_list pos:start="75:17" pos:end="75:19">(<argument pos:start="75:18" pos:end="75:18"><expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:21">case <expr pos:start="81:10" pos:end="81:20"><name pos:start="81:10" pos:end="81:20">XEN_EMULATE</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:65"><expr pos:start="83:9" pos:end="83:64"><call pos:start="83:9" pos:end="83:64"><name pos:start="83:9" pos:end="83:15">fprintf</name><argument_list pos:start="83:16" pos:end="83:64">(<argument pos:start="83:17" pos:end="83:22"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:22">stderr</name></expr></argument>, <argument pos:start="83:25" pos:end="83:63"><expr pos:start="83:25" pos:end="83:63"><literal type="string" pos:start="83:25" pos:end="83:63">"xen emulation not implemented (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:16"><expr pos:start="85:9" pos:end="85:15"><call pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:12">exit</name><argument_list pos:start="85:13" pos:end="85:15">(<argument pos:start="85:14" pos:end="85:14"><expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="93:5" pos:end="93:49"><expr pos:start="93:5" pos:end="93:48"><call pos:start="93:5" pos:end="93:48"><name pos:start="93:5" pos:end="93:19">xen_be_register</name><argument_list pos:start="93:20" pos:end="93:48">(<argument pos:start="93:21" pos:end="93:29"><expr pos:start="93:21" pos:end="93:29"><literal type="string" pos:start="93:21" pos:end="93:29">"console"</literal></expr></argument>, <argument pos:start="93:32" pos:end="93:47"><expr pos:start="93:32" pos:end="93:47"><operator pos:start="93:32" pos:end="93:32">&amp;</operator><name pos:start="93:33" pos:end="93:47">xen_console_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:47"><expr pos:start="95:5" pos:end="95:46"><call pos:start="95:5" pos:end="95:46"><name pos:start="95:5" pos:end="95:19">xen_be_register</name><argument_list pos:start="95:20" pos:end="95:46">(<argument pos:start="95:21" pos:end="95:26"><expr pos:start="95:21" pos:end="95:26"><literal type="string" pos:start="95:21" pos:end="95:26">"vkbd"</literal></expr></argument>, <argument pos:start="95:29" pos:end="95:45"><expr pos:start="95:29" pos:end="95:45"><operator pos:start="95:29" pos:end="95:29">&amp;</operator><name pos:start="95:30" pos:end="95:45">xen_kbdmouse_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:49"><expr pos:start="97:5" pos:end="97:48"><call pos:start="97:5" pos:end="97:48"><name pos:start="97:5" pos:end="97:19">xen_be_register</name><argument_list pos:start="97:20" pos:end="97:48">(<argument pos:start="97:21" pos:end="97:25"><expr pos:start="97:21" pos:end="97:25"><literal type="string" pos:start="97:21" pos:end="97:25">"vfb"</literal></expr></argument>, <argument pos:start="97:28" pos:end="97:47"><expr pos:start="97:28" pos:end="97:47"><operator pos:start="97:28" pos:end="97:28">&amp;</operator><name pos:start="97:29" pos:end="97:47">xen_framebuffer_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:46"><expr pos:start="99:5" pos:end="99:45"><call pos:start="99:5" pos:end="99:45"><name pos:start="99:5" pos:end="99:19">xen_be_register</name><argument_list pos:start="99:20" pos:end="99:45">(<argument pos:start="99:21" pos:end="99:27"><expr pos:start="99:21" pos:end="99:27"><literal type="string" pos:start="99:21" pos:end="99:27">"qdisk"</literal></expr></argument>, <argument pos:start="99:30" pos:end="99:44"><expr pos:start="99:30" pos:end="99:44"><operator pos:start="99:30" pos:end="99:30">&amp;</operator><name pos:start="99:31" pos:end="99:44">xen_blkdev_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:45"><expr pos:start="101:5" pos:end="101:44"><call pos:start="101:5" pos:end="101:44"><name pos:start="101:5" pos:end="101:19">xen_be_register</name><argument_list pos:start="101:20" pos:end="101:44">(<argument pos:start="101:21" pos:end="101:26"><expr pos:start="101:21" pos:end="101:26"><literal type="string" pos:start="101:21" pos:end="101:26">"qnic"</literal></expr></argument>, <argument pos:start="101:29" pos:end="101:43"><expr pos:start="101:29" pos:end="101:43"><operator pos:start="101:29" pos:end="101:29">&amp;</operator><name pos:start="101:30" pos:end="101:43">xen_netdev_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:31">/* configure framebuffer */</comment>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:22">(<expr pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:21">xenfb_enabled</name></expr>)</condition> <block pos:start="107:24" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:31">

        <expr_stmt pos:start="109:9" pos:end="109:37"><expr pos:start="109:9" pos:end="109:36"><call pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:26">xen_config_dev_vfb</name><argument_list pos:start="109:27" pos:end="109:36">(<argument pos:start="109:28" pos:end="109:28"><expr pos:start="109:28" pos:end="109:28"><literal type="number" pos:start="109:28" pos:end="109:28">0</literal></expr></argument>, <argument pos:start="109:31" pos:end="109:35"><expr pos:start="109:31" pos:end="109:35"><literal type="string" pos:start="109:31" pos:end="109:35">"vnc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><call pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:27">xen_config_dev_vkbd</name><argument_list pos:start="111:28" pos:end="111:30">(<argument pos:start="111:29" pos:end="111:29"><expr pos:start="111:29" pos:end="111:29"><literal type="number" pos:start="111:29" pos:end="111:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:25">/* configure disks */</comment>

    <for pos:start="119:5" pos:end="129:5">for <control pos:start="119:9" pos:end="119:28">(<init pos:start="119:10" pos:end="119:15"><expr pos:start="119:10" pos:end="119:14"><name pos:start="119:10" pos:end="119:10">i</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <literal type="number" pos:start="119:14" pos:end="119:14">0</literal></expr>;</init> <condition pos:start="119:17" pos:end="119:23"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:17">i</name> <operator pos:start="119:19" pos:end="119:19">&lt;</operator> <literal type="number" pos:start="119:21" pos:end="119:22">16</literal></expr>;</condition> <incr pos:start="119:25" pos:end="119:27"><expr pos:start="119:25" pos:end="119:27"><name pos:start="119:25" pos:end="119:25">i</name><operator pos:start="119:26" pos:end="119:27">++</operator></expr></incr>)</control> <block pos:start="119:30" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:34">

        <expr_stmt pos:start="121:9" pos:end="121:40"><expr pos:start="121:9" pos:end="121:39"><name pos:start="121:9" pos:end="121:13">dinfo</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <call pos:start="121:17" pos:end="121:39"><name pos:start="121:17" pos:end="121:25">drive_get</name><argument_list pos:start="121:26" pos:end="121:39">(<argument pos:start="121:27" pos:end="121:32"><expr pos:start="121:27" pos:end="121:32"><name pos:start="121:27" pos:end="121:32">IF_XEN</name></expr></argument>, <argument pos:start="121:35" pos:end="121:35"><expr pos:start="121:35" pos:end="121:35"><literal type="number" pos:start="121:35" pos:end="121:35">0</literal></expr></argument>, <argument pos:start="121:38" pos:end="121:38"><expr pos:start="121:38" pos:end="121:38"><name pos:start="121:38" pos:end="121:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="125:21"><if pos:start="123:9" pos:end="125:21">if <condition pos:start="123:12" pos:end="123:19">(<expr pos:start="123:13" pos:end="123:18"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:18">dinfo</name></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:21"><block_content pos:start="125:13" pos:end="125:21">

            <continue pos:start="125:13" pos:end="125:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:34"><expr pos:start="127:9" pos:end="127:33"><call pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:26">xen_config_dev_blk</name><argument_list pos:start="127:27" pos:end="127:33">(<argument pos:start="127:28" pos:end="127:32"><expr pos:start="127:28" pos:end="127:32"><name pos:start="127:28" pos:end="127:32">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="133:5" pos:end="133:24">/* configure nics */</comment>

    <for pos:start="135:5" pos:end="143:5">for <control pos:start="135:9" pos:end="135:33">(<init pos:start="135:10" pos:end="135:15"><expr pos:start="135:10" pos:end="135:14"><name pos:start="135:10" pos:end="135:10">i</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <literal type="number" pos:start="135:14" pos:end="135:14">0</literal></expr>;</init> <condition pos:start="135:17" pos:end="135:28"><expr pos:start="135:17" pos:end="135:27"><name pos:start="135:17" pos:end="135:17">i</name> <operator pos:start="135:19" pos:end="135:19">&lt;</operator> <name pos:start="135:21" pos:end="135:27">nb_nics</name></expr>;</condition> <incr pos:start="135:30" pos:end="135:32"><expr pos:start="135:30" pos:end="135:32"><name pos:start="135:30" pos:end="135:30">i</name><operator pos:start="135:31" pos:end="135:32">++</operator></expr></incr>)</control> <block pos:start="135:35" pos:end="143:5">{<block_content pos:start="137:9" pos:end="141:41">

        <if_stmt pos:start="137:9" pos:end="139:21"><if pos:start="137:9" pos:end="139:21">if <condition pos:start="137:12" pos:end="137:72">(<expr pos:start="137:13" pos:end="137:71"><operator pos:start="137:13" pos:end="137:13">!</operator><name pos:start="137:14" pos:end="137:24"><name pos:start="137:14" pos:end="137:21">nd_table</name><index pos:start="137:22" pos:end="137:24">[<expr pos:start="137:23" pos:end="137:23"><name pos:start="137:23" pos:end="137:23">i</name></expr>]</index></name><operator pos:start="137:25" pos:end="137:25">.</operator><name pos:start="137:26" pos:end="137:30">model</name> <operator pos:start="137:32" pos:end="137:33">||</operator> <literal type="number" pos:start="137:35" pos:end="137:35">0</literal> <operator pos:start="137:37" pos:end="137:38">!=</operator> <call pos:start="137:40" pos:end="137:71"><name pos:start="137:40" pos:end="137:45">strcmp</name><argument_list pos:start="137:46" pos:end="137:71">(<argument pos:start="137:47" pos:end="137:63"><expr pos:start="137:47" pos:end="137:63"><name pos:start="137:47" pos:end="137:57"><name pos:start="137:47" pos:end="137:54">nd_table</name><index pos:start="137:55" pos:end="137:57">[<expr pos:start="137:56" pos:end="137:56"><name pos:start="137:56" pos:end="137:56">i</name></expr>]</index></name><operator pos:start="137:58" pos:end="137:58">.</operator><name pos:start="137:59" pos:end="137:63">model</name></expr></argument>, <argument pos:start="137:66" pos:end="137:70"><expr pos:start="137:66" pos:end="137:70"><literal type="string" pos:start="137:66" pos:end="137:70">"xen"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:21"><block_content pos:start="139:13" pos:end="139:21">

            <continue pos:start="139:13" pos:end="139:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:41"><expr pos:start="141:9" pos:end="141:40"><call pos:start="141:9" pos:end="141:40"><name pos:start="141:9" pos:end="141:26">xen_config_dev_nic</name><argument_list pos:start="141:27" pos:end="141:40">(<argument pos:start="141:28" pos:end="141:39"><expr pos:start="141:28" pos:end="141:39"><name pos:start="141:28" pos:end="141:35">nd_table</name> <operator pos:start="141:37" pos:end="141:37">+</operator> <name pos:start="141:39" pos:end="141:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="147:5" pos:end="147:29">/* config cleanup hook */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:31"><expr pos:start="149:5" pos:end="149:30"><call pos:start="149:5" pos:end="149:30"><name pos:start="149:5" pos:end="149:10">atexit</name><argument_list pos:start="149:11" pos:end="149:30">(<argument pos:start="149:12" pos:end="149:29"><expr pos:start="149:12" pos:end="149:29"><name pos:start="149:12" pos:end="149:29">xen_config_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:27">/* setup framebuffer */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:32"><expr pos:start="155:5" pos:end="155:31"><call pos:start="155:5" pos:end="155:31"><name pos:start="155:5" pos:end="155:20">xen_init_display</name><argument_list pos:start="155:21" pos:end="155:31">(<argument pos:start="155:22" pos:end="155:30"><expr pos:start="155:22" pos:end="155:30"><name pos:start="155:22" pos:end="155:30">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
