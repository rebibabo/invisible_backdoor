<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26052.c" pos:tabs="8"><function pos:start="1:1" pos:end="68:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">kvm_arch_on_sigbus_vcpu</name><parameter_list pos:start="1:28" pos:end="1:64">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:36">CPUState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">env</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:51"><decl pos:start="1:44" pos:end="1:51"><type pos:start="1:44" pos:end="1:51"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:51">code</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="68:1">{<block_content pos:start="7:5" pos:end="66:13">

<cpp:ifdef pos:start="5:1" pos:end="5:18">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:18">KVM_CAP_MCE</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">ram_addr_t</name></type> <name pos:start="7:16" pos:end="7:23">ram_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:28">paddr</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="64:5"><if pos:start="13:5" pos:end="44:5">if <condition pos:start="13:8" pos:end="15:60">(<expr pos:start="13:9" pos:end="15:59"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:12">env</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:21">mcg_cap</name></name> <operator pos:start="13:23" pos:end="13:23">&amp;</operator> <name pos:start="13:25" pos:end="13:33">MCG_SER_P</name><operator pos:start="13:34" pos:end="13:34">)</operator> <operator pos:start="13:36" pos:end="13:37">&amp;&amp;</operator> <name pos:start="13:39" pos:end="13:42">addr</name>

        <operator pos:start="15:9" pos:end="15:10">&amp;&amp;</operator> <operator pos:start="15:12" pos:end="15:12">(</operator><name pos:start="15:13" pos:end="15:16">code</name> <operator pos:start="15:18" pos:end="15:19">==</operator> <name pos:start="15:21" pos:end="15:33">BUS_MCEERR_AR</name> <operator pos:start="15:35" pos:end="15:36">||</operator> <name pos:start="15:38" pos:end="15:41">code</name> <operator pos:start="15:43" pos:end="15:44">==</operator> <name pos:start="15:46" pos:end="15:58">BUS_MCEERR_AO</name><operator pos:start="15:59" pos:end="15:59">)</operator></expr>)</condition> <block pos:start="15:62" pos:end="44:5">{<block_content pos:start="17:9" pos:end="42:41">

        <if_stmt pos:start="17:9" pos:end="39:9"><if pos:start="17:9" pos:end="39:9">if <condition pos:start="17:12" pos:end="21:55">(<expr pos:start="17:13" pos:end="21:54"><call pos:start="17:13" pos:end="17:52"><name pos:start="17:13" pos:end="17:35">qemu_ram_addr_from_host</name><argument_list pos:start="17:36" pos:end="17:52">(<argument pos:start="17:37" pos:end="17:40"><expr pos:start="17:37" pos:end="17:40"><name pos:start="17:37" pos:end="17:40">addr</name></expr></argument>, <argument pos:start="17:43" pos:end="17:51"><expr pos:start="17:43" pos:end="17:51"><operator pos:start="17:43" pos:end="17:43">&amp;</operator><name pos:start="17:44" pos:end="17:51">ram_addr</name></expr></argument>)</argument_list></call> <operator pos:start="17:54" pos:end="17:55">||</operator>

            <operator pos:start="19:13" pos:end="19:13">!</operator><call pos:start="19:14" pos:end="21:54"><name pos:start="19:14" pos:end="19:46">kvm_physical_memory_addr_from_ram</name><argument_list pos:start="19:47" pos:end="21:54">(<argument pos:start="19:48" pos:end="19:61"><expr pos:start="19:48" pos:end="19:61"><name pos:start="19:48" pos:end="19:61"><name pos:start="19:48" pos:end="19:50">env</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:61">kvm_state</name></name></expr></argument>, <argument pos:start="19:64" pos:end="19:71"><expr pos:start="19:64" pos:end="19:71"><name pos:start="19:64" pos:end="19:71">ram_addr</name></expr></argument>,

                                               <argument pos:start="21:48" pos:end="21:53"><expr pos:start="21:48" pos:end="21:53"><operator pos:start="21:48" pos:end="21:48">&amp;</operator><name pos:start="21:49" pos:end="21:53">paddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:57" pos:end="39:9">{<block_content pos:start="23:13" pos:end="37:13">

            <expr_stmt pos:start="23:13" pos:end="25:62"><expr pos:start="23:13" pos:end="25:61"><call pos:start="23:13" pos:end="25:61"><name pos:start="23:13" pos:end="23:19">fprintf</name><argument_list pos:start="23:20" pos:end="25:61">(<argument pos:start="23:21" pos:end="23:26"><expr pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:26">stderr</name></expr></argument>, <argument pos:start="23:29" pos:end="25:60"><expr pos:start="23:29" pos:end="25:60"><literal type="string" pos:start="23:29" pos:end="23:71">"Hardware memory error for memory used by "</literal>

                    <literal type="string" pos:start="25:21" pos:end="25:60">"QEMU itself instead of guest system!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="27:13" pos:end="27:46">/* Hope we are lucky for AO MCE */</comment>

            <if_stmt pos:start="29:13" pos:end="37:13"><if pos:start="29:13" pos:end="33:13">if <condition pos:start="29:16" pos:end="29:38">(<expr pos:start="29:17" pos:end="29:37"><name pos:start="29:17" pos:end="29:20">code</name> <operator pos:start="29:22" pos:end="29:23">==</operator> <name pos:start="29:25" pos:end="29:37">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="29:40" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:25">

                <return pos:start="31:17" pos:end="31:25">return <expr pos:start="31:24" pos:end="31:24"><literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>;</return>

            </block_content>}</block></if> <else pos:start="33:15" pos:end="37:13">else <block pos:start="33:20" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:40">

                <expr_stmt pos:start="35:17" pos:end="35:40"><expr pos:start="35:17" pos:end="35:39"><call pos:start="35:17" pos:end="35:39"><name pos:start="35:17" pos:end="35:37">hardware_memory_error</name><argument_list pos:start="35:38" pos:end="35:39">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>


        <expr_stmt pos:start="42:9" pos:end="42:41"><expr pos:start="42:9" pos:end="42:40"><call pos:start="42:9" pos:end="42:40"><name pos:start="42:9" pos:end="42:22">kvm_mce_inject</name><argument_list pos:start="42:23" pos:end="42:40">(<argument pos:start="42:24" pos:end="42:26"><expr pos:start="42:24" pos:end="42:26"><name pos:start="42:24" pos:end="42:26">env</name></expr></argument>, <argument pos:start="42:29" pos:end="42:33"><expr pos:start="42:29" pos:end="42:33"><name pos:start="42:29" pos:end="42:33">paddr</name></expr></argument>, <argument pos:start="42:36" pos:end="42:39"><expr pos:start="42:36" pos:end="42:39"><name pos:start="42:36" pos:end="42:39">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="44:7" pos:end="64:5">else

<cpp:endif pos:start="46:1" pos:end="46:6">#<cpp:directive pos:start="46:2" pos:end="46:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="46:8" pos:end="46:24">/* KVM_CAP_MCE */</comment>

    <block pos:start="48:5" pos:end="64:5">{<block_content pos:start="50:9" pos:end="62:9">

        <if_stmt pos:start="50:9" pos:end="62:9"><if pos:start="50:9" pos:end="54:9">if <condition pos:start="50:12" pos:end="50:34">(<expr pos:start="50:13" pos:end="50:33"><name pos:start="50:13" pos:end="50:16">code</name> <operator pos:start="50:18" pos:end="50:19">==</operator> <name pos:start="50:21" pos:end="50:33">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="50:36" pos:end="54:9">{<block_content pos:start="52:13" pos:end="52:21">

            <return pos:start="52:13" pos:end="52:21">return <expr pos:start="52:20" pos:end="52:20"><literal type="number" pos:start="52:20" pos:end="52:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="54:11" pos:end="58:9">else if <condition pos:start="54:19" pos:end="54:41">(<expr pos:start="54:20" pos:end="54:40"><name pos:start="54:20" pos:end="54:23">code</name> <operator pos:start="54:25" pos:end="54:26">==</operator> <name pos:start="54:28" pos:end="54:40">BUS_MCEERR_AR</name></expr>)</condition> <block pos:start="54:43" pos:end="58:9">{<block_content pos:start="56:13" pos:end="56:36">

            <expr_stmt pos:start="56:13" pos:end="56:36"><expr pos:start="56:13" pos:end="56:35"><call pos:start="56:13" pos:end="56:35"><name pos:start="56:13" pos:end="56:33">hardware_memory_error</name><argument_list pos:start="56:34" pos:end="56:35">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="58:11" pos:end="62:9">else <block pos:start="58:16" pos:end="62:9">{<block_content pos:start="60:13" pos:end="60:21">

            <return pos:start="60:13" pos:end="60:21">return <expr pos:start="60:20" pos:end="60:20"><literal type="number" pos:start="60:20" pos:end="60:20">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="66:5" pos:end="66:13">return <expr pos:start="66:12" pos:end="66:12"><literal type="number" pos:start="66:12" pos:end="66:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
