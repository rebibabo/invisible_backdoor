<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18507.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:16"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_refcounts_l2</name><parameter_list pos:start="1:30" pos:end="3:21">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>,
    <parameter pos:start="2:5" pos:end="2:28"><decl pos:start="2:5" pos:end="2:28"><type pos:start="2:5" pos:end="2:28"><name pos:start="2:5" pos:end="2:12">uint16_t</name> <modifier pos:start="2:14" pos:end="2:14">*</modifier></type><name pos:start="2:15" pos:end="2:28">refcount_table</name></decl></parameter>, <parameter pos:start="2:31" pos:end="2:53"><decl pos:start="2:31" pos:end="2:53"><type pos:start="2:31" pos:end="2:53"><name pos:start="2:31" pos:end="2:33">int</name></type> <name pos:start="2:35" pos:end="2:53">refcount_table_size</name></decl></parameter>, <parameter pos:start="2:56" pos:end="2:72"><decl pos:start="2:56" pos:end="2:72"><type pos:start="2:56" pos:end="2:72"><name pos:start="2:56" pos:end="2:62">int64_t</name></type> <name pos:start="2:64" pos:end="2:72">l2_offset</name></decl></parameter>,
    <parameter pos:start="3:5" pos:end="3:20"><decl pos:start="3:5" pos:end="3:20"><type pos:start="3:5" pos:end="3:20"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:20">check_copied</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="51:16">{<block_content pos:start="5:5" pos:end="51:16">
    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:31"><decl pos:start="6:5" pos:end="6:22"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">uint64_t</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:22">l2_table</name></decl>, <decl pos:start="6:25" pos:end="6:30"><type ref="prev" pos:start="6:5" pos:end="6:14"/><name pos:start="6:25" pos:end="6:30">offset</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:18">l2_size</name></decl>, <decl pos:start="7:21" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:31">nb_csectors</name></decl>, <decl pos:start="7:34" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:41">refcount</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:19"><decl pos:start="8:5" pos:end="8:18"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:14">errors</name> <init pos:start="8:16" pos:end="8:18">= <expr pos:start="8:18" pos:end="8:18"><literal type="number" pos:start="8:18" pos:end="8:18">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="9:5" pos:end="9:33">/* Read L2 table from disk */</comment>
    <expr_stmt pos:start="10:5" pos:end="10:44"><expr pos:start="10:5" pos:end="10:43"><name pos:start="10:5" pos:end="10:11">l2_size</name> <operator pos:start="10:13" pos:end="10:13">=</operator> <name pos:start="10:15" pos:end="10:24"><name pos:start="10:15" pos:end="10:15">s</name><operator pos:start="10:16" pos:end="10:17">-&gt;</operator><name pos:start="10:18" pos:end="10:24">l2_size</name></name> <operator pos:start="10:26" pos:end="10:26">*</operator> <sizeof pos:start="10:28" pos:end="10:43">sizeof<argument_list pos:start="10:34" pos:end="10:43">(<argument pos:start="10:35" pos:end="10:42"><expr pos:start="10:35" pos:end="10:42"><name pos:start="10:35" pos:end="10:42">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:36"><expr pos:start="11:5" pos:end="11:35"><name pos:start="11:5" pos:end="11:12">l2_table</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <call pos:start="11:16" pos:end="11:35"><name pos:start="11:16" pos:end="11:26">qemu_malloc</name><argument_list pos:start="11:27" pos:end="11:35">(<argument pos:start="11:28" pos:end="11:34"><expr pos:start="11:28" pos:end="11:34"><name pos:start="11:28" pos:end="11:34">l2_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="12:5" pos:end="13:18"><if pos:start="12:5" pos:end="13:18">if <condition pos:start="12:8" pos:end="12:67">(<expr pos:start="12:9" pos:end="12:66"><call pos:start="12:9" pos:end="12:55"><name pos:start="12:9" pos:end="12:18">bdrv_pread</name><argument_list pos:start="12:19" pos:end="12:55">(<argument pos:start="12:20" pos:end="12:24"><expr pos:start="12:20" pos:end="12:24"><name pos:start="12:20" pos:end="12:24"><name pos:start="12:20" pos:end="12:20">s</name><operator pos:start="12:21" pos:end="12:22">-&gt;</operator><name pos:start="12:23" pos:end="12:24">hd</name></name></expr></argument>, <argument pos:start="12:27" pos:end="12:35"><expr pos:start="12:27" pos:end="12:35"><name pos:start="12:27" pos:end="12:35">l2_offset</name></expr></argument>, <argument pos:start="12:38" pos:end="12:45"><expr pos:start="12:38" pos:end="12:45"><name pos:start="12:38" pos:end="12:45">l2_table</name></expr></argument>, <argument pos:start="12:48" pos:end="12:54"><expr pos:start="12:48" pos:end="12:54"><name pos:start="12:48" pos:end="12:54">l2_size</name></expr></argument>)</argument_list></call> <operator pos:start="12:57" pos:end="12:58">!=</operator> <name pos:start="12:60" pos:end="12:66">l2_size</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:18"><block_content pos:start="13:9" pos:end="13:18">
        <goto pos:start="13:9" pos:end="13:18">goto <name pos:start="13:14" pos:end="13:17">fail</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block" pos:start="14:5" pos:end="14:30">/* Do the actual checks */</comment>
    <for pos:start="15:5" pos:end="51:16">for<control pos:start="15:8" pos:end="15:35">(<init pos:start="15:9" pos:end="15:14"><expr pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:9">i</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr>;</init> <condition pos:start="15:16" pos:end="15:30"><expr pos:start="15:16" pos:end="15:29"><name pos:start="15:16" pos:end="15:16">i</name> <operator pos:start="15:18" pos:end="15:18">&lt;</operator> <name pos:start="15:20" pos:end="15:29"><name pos:start="15:20" pos:end="15:20">s</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:29">l2_size</name></name></expr>;</condition> <incr pos:start="15:32" pos:end="15:34"><expr pos:start="15:32" pos:end="15:34"><name pos:start="15:32" pos:end="15:32">i</name><operator pos:start="15:33" pos:end="15:34">++</operator></expr></incr>)</control> <block pos:start="15:37" pos:end="51:16">{<block_content pos:start="16:9" pos:end="51:16">
        <expr_stmt pos:start="16:9" pos:end="16:42"><expr pos:start="16:9" pos:end="16:41"><name pos:start="16:9" pos:end="16:14">offset</name> <operator pos:start="16:16" pos:end="16:16">=</operator> <call pos:start="16:18" pos:end="16:41"><name pos:start="16:18" pos:end="16:28">be64_to_cpu</name><argument_list pos:start="16:29" pos:end="16:41">(<argument pos:start="16:30" pos:end="16:40"><expr pos:start="16:30" pos:end="16:40"><name pos:start="16:30" pos:end="16:40"><name pos:start="16:30" pos:end="16:37">l2_table</name><index pos:start="16:38" pos:end="16:40">[<expr pos:start="16:39" pos:end="16:39"><name pos:start="16:39" pos:end="16:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="17:9" pos:end="51:16"><if pos:start="17:9" pos:end="51:16">if <condition pos:start="17:12" pos:end="17:24">(<expr pos:start="17:13" pos:end="17:23"><name pos:start="17:13" pos:end="17:18">offset</name> <operator pos:start="17:20" pos:end="17:21">!=</operator> <literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr>)</condition> <block pos:start="17:26" pos:end="51:16">{<block_content pos:start="18:13" pos:end="51:16">
            <if_stmt pos:start="18:13" pos:end="51:16"><if pos:start="18:13" pos:end="51:16">if <condition pos:start="18:16" pos:end="18:47">(<expr pos:start="18:17" pos:end="18:46"><name pos:start="18:17" pos:end="18:22">offset</name> <operator pos:start="18:24" pos:end="18:24">&amp;</operator> <name pos:start="18:26" pos:end="18:46">QCOW_OFLAG_COMPRESSED</name></expr>)</condition> <block pos:start="18:49" pos:end="51:16">{<block_content pos:start="20:17" pos:end="51:16">
                <comment type="block" pos:start="19:17" pos:end="19:70">/* Compressed clusters don't have QCOW_OFLAG_COPIED */</comment>
                <if_stmt pos:start="20:17" pos:end="51:16"><if pos:start="20:17" pos:end="32:13">if <condition pos:start="20:20" pos:end="20:47">(<expr pos:start="20:21" pos:end="20:46"><name pos:start="20:21" pos:end="20:26">offset</name> <operator pos:start="20:28" pos:end="20:28">&amp;</operator> <name pos:start="20:30" pos:end="20:46">QCOW_OFLAG_COPIED</name></expr>)</condition> <block pos:start="20:49" pos:end="32:13">{<block_content pos:start="21:21" pos:end="31:64">
                    <expr_stmt pos:start="21:21" pos:end="23:65"><expr pos:start="21:21" pos:end="23:64"><call pos:start="21:21" pos:end="23:64"><name pos:start="21:21" pos:end="21:27">fprintf</name><argument_list pos:start="21:28" pos:end="23:64">(<argument pos:start="21:29" pos:end="21:34"><expr pos:start="21:29" pos:end="21:34"><name pos:start="21:29" pos:end="21:34">stderr</name></expr></argument>, <argument pos:start="21:37" pos:end="23:36"><expr pos:start="21:37" pos:end="23:36"><literal type="string" pos:start="21:37" pos:end="21:54">"ERROR: cluster %"</literal> <name pos:start="21:56" pos:end="21:61">PRId64</name> <literal type="string" pos:start="21:63" pos:end="21:66">": "</literal>
                        <literal type="string" pos:start="22:25" pos:end="22:71">"copied flag must never be set for compressed "</literal>
                        <literal type="string" pos:start="23:25" pos:end="23:36">"clusters\n"</literal></expr></argument>, <argument pos:start="23:39" pos:end="23:63"><expr pos:start="23:39" pos:end="23:63"><name pos:start="23:39" pos:end="23:44">offset</name> <operator pos:start="23:46" pos:end="23:47">&gt;&gt;</operator> <name pos:start="23:49" pos:end="23:63"><name pos:start="23:49" pos:end="23:49">s</name><operator pos:start="23:50" pos:end="23:51">-&gt;</operator><name pos:start="23:52" pos:end="23:63">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="24:21" pos:end="24:49"><expr pos:start="24:21" pos:end="24:48"><name pos:start="24:21" pos:end="24:26">offset</name> <operator pos:start="24:28" pos:end="24:29">&amp;=</operator> <operator pos:start="24:31" pos:end="24:31">~</operator><name pos:start="24:32" pos:end="24:48">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>
                <comment type="block" pos:start="25:17" pos:end="25:42">/* Mark cluster as used */</comment>
                <expr_stmt pos:start="26:17" pos:end="27:50"><expr pos:start="26:17" pos:end="27:49"><name pos:start="26:17" pos:end="26:27">nb_csectors</name> <operator pos:start="26:29" pos:end="26:29">=</operator> <operator pos:start="26:31" pos:end="26:31">(</operator><operator pos:start="26:32" pos:end="26:32">(</operator><name pos:start="26:33" pos:end="26:38">offset</name> <operator pos:start="26:40" pos:end="26:41">&gt;&gt;</operator> <name pos:start="26:43" pos:end="26:56"><name pos:start="26:43" pos:end="26:43">s</name><operator pos:start="26:44" pos:end="26:45">-&gt;</operator><name pos:start="26:46" pos:end="26:56">csize_shift</name></name><operator pos:start="26:57" pos:end="26:57">)</operator> <operator pos:start="26:59" pos:end="26:59">&amp;</operator>
                               <name pos:start="27:32" pos:end="27:44"><name pos:start="27:32" pos:end="27:32">s</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:44">csize_mask</name></name><operator pos:start="27:45" pos:end="27:45">)</operator> <operator pos:start="27:47" pos:end="27:47">+</operator> <literal type="number" pos:start="27:49" pos:end="27:49">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="28:17" pos:end="28:49"><expr pos:start="28:17" pos:end="28:48"><name pos:start="28:17" pos:end="28:22">offset</name> <operator pos:start="28:24" pos:end="28:25">&amp;=</operator> <name pos:start="28:27" pos:end="28:48"><name pos:start="28:27" pos:end="28:27">s</name><operator pos:start="28:28" pos:end="28:29">-&gt;</operator><name pos:start="28:30" pos:end="28:48">cluster_offset_mask</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="29:17" pos:end="31:64"><expr pos:start="29:17" pos:end="31:63"><name pos:start="29:17" pos:end="29:22">errors</name> <operator pos:start="29:24" pos:end="29:25">+=</operator> <call pos:start="29:27" pos:end="31:63"><name pos:start="29:27" pos:end="29:39">inc_refcounts</name><argument_list pos:start="29:40" pos:end="31:63">(<argument pos:start="29:41" pos:end="29:42"><expr pos:start="29:41" pos:end="29:42"><name pos:start="29:41" pos:end="29:42">bs</name></expr></argument>, <argument pos:start="29:45" pos:end="29:58"><expr pos:start="29:45" pos:end="29:58"><name pos:start="29:45" pos:end="29:58">refcount_table</name></expr></argument>,
                              <argument pos:start="30:31" pos:end="30:49"><expr pos:start="30:31" pos:end="30:49"><name pos:start="30:31" pos:end="30:49">refcount_table_size</name></expr></argument>,
                              <argument pos:start="31:31" pos:end="31:43"><expr pos:start="31:31" pos:end="31:43"><name pos:start="31:31" pos:end="31:36">offset</name> <operator pos:start="31:38" pos:end="31:38">&amp;</operator> <operator pos:start="31:40" pos:end="31:40">~</operator><literal type="number" pos:start="31:41" pos:end="31:43">511</literal></expr></argument>, <argument pos:start="31:46" pos:end="31:62"><expr pos:start="31:46" pos:end="31:62"><name pos:start="31:46" pos:end="31:56">nb_csectors</name> <operator pos:start="31:58" pos:end="31:58">*</operator> <literal type="number" pos:start="31:60" pos:end="31:62">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="32:15" pos:end="51:16">else <block pos:start="32:20" pos:end="51:16">{<block_content pos:start="34:17" pos:end="51:16">
                <comment type="block" pos:start="33:17" pos:end="33:69">/* QCOW_OFLAG_COPIED must be set iff refcount == 1 */</comment>
                <if_stmt pos:start="34:17" pos:end="51:16"><if pos:start="34:17" pos:end="51:16">if <condition pos:start="34:20" pos:end="34:33">(<expr pos:start="34:21" pos:end="34:32"><name pos:start="34:21" pos:end="34:32">check_copied</name></expr>)</condition> <block pos:start="34:35" pos:end="51:16">{<block_content pos:start="35:21" pos:end="51:16">
                    <decl_stmt pos:start="35:21" pos:end="35:44"><decl pos:start="35:21" pos:end="35:43"><type pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28">uint64_t</name></type> <name pos:start="35:30" pos:end="35:34">entry</name> <init pos:start="35:36" pos:end="35:43">= <expr pos:start="35:38" pos:end="35:43"><name pos:start="35:38" pos:end="35:43">offset</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="36:21" pos:end="36:49"><expr pos:start="36:21" pos:end="36:48"><name pos:start="36:21" pos:end="36:26">offset</name> <operator pos:start="36:28" pos:end="36:29">&amp;=</operator> <operator pos:start="36:31" pos:end="36:31">~</operator><name pos:start="36:32" pos:end="36:48">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="37:21" pos:end="37:75"><expr pos:start="37:21" pos:end="37:74"><name pos:start="37:21" pos:end="37:28">refcount</name> <operator pos:start="37:30" pos:end="37:30">=</operator> <call pos:start="37:32" pos:end="37:74"><name pos:start="37:32" pos:end="37:43">get_refcount</name><argument_list pos:start="37:44" pos:end="37:74">(<argument pos:start="37:45" pos:end="37:46"><expr pos:start="37:45" pos:end="37:46"><name pos:start="37:45" pos:end="37:46">bs</name></expr></argument>, <argument pos:start="37:49" pos:end="37:73"><expr pos:start="37:49" pos:end="37:73"><name pos:start="37:49" pos:end="37:54">offset</name> <operator pos:start="37:56" pos:end="37:57">&gt;&gt;</operator> <name pos:start="37:59" pos:end="37:73"><name pos:start="37:59" pos:end="37:59">s</name><operator pos:start="37:60" pos:end="37:61">-&gt;</operator><name pos:start="37:62" pos:end="37:73">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="38:21" pos:end="51:16"><if pos:start="38:21" pos:end="51:16">if <condition pos:start="38:24" pos:end="38:78">(<expr pos:start="38:25" pos:end="38:77"><operator pos:start="38:25" pos:end="38:25">(</operator><name pos:start="38:26" pos:end="38:33">refcount</name> <operator pos:start="38:35" pos:end="38:36">==</operator> <literal type="number" pos:start="38:38" pos:end="38:38">1</literal><operator pos:start="38:39" pos:end="38:39">)</operator> <operator pos:start="38:41" pos:end="38:42">!=</operator> <operator pos:start="38:44" pos:end="38:44">(</operator><operator pos:start="38:45" pos:end="38:45">(</operator><name pos:start="38:46" pos:end="38:50">entry</name> <operator pos:start="38:52" pos:end="38:52">&amp;</operator> <name pos:start="38:54" pos:end="38:70">QCOW_OFLAG_COPIED</name><operator pos:start="38:71" pos:end="38:71">)</operator> <operator pos:start="38:73" pos:end="38:74">!=</operator> <literal type="number" pos:start="38:76" pos:end="38:76">0</literal><operator pos:start="38:77" pos:end="38:77">)</operator></expr>)</condition> <block pos:start="38:80" pos:end="51:16">{<block_content pos:start="39:25" pos:end="51:16">
                        <expr_stmt pos:start="39:25" pos:end="40:70"><expr pos:start="39:25" pos:end="40:69"><call pos:start="39:25" pos:end="40:69"><name pos:start="39:25" pos:end="39:31">fprintf</name><argument_list pos:start="39:32" pos:end="40:69">(<argument pos:start="39:33" pos:end="39:38"><expr pos:start="39:33" pos:end="39:38"><name pos:start="39:33" pos:end="39:38">stderr</name></expr></argument>, <argument pos:start="39:41" pos:end="40:51"><expr pos:start="39:41" pos:end="40:51"><literal type="string" pos:start="39:41" pos:end="39:70">"ERROR OFLAG_COPIED: offset=%"</literal>
                            <name pos:start="40:29" pos:end="40:34">PRIx64</name> <literal type="string" pos:start="40:36" pos:end="40:51">" refcount=%d\n"</literal></expr></argument>, <argument pos:start="40:54" pos:end="40:58"><expr pos:start="40:54" pos:end="40:58"><name pos:start="40:54" pos:end="40:58">entry</name></expr></argument>, <argument pos:start="40:61" pos:end="40:68"><expr pos:start="40:61" pos:end="40:68"><name pos:start="40:61" pos:end="40:68">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="41:17" pos:end="41:42">/* Mark cluster as used */</comment>
                <expr_stmt pos:start="42:17" pos:end="42:45"><expr pos:start="42:17" pos:end="42:44"><name pos:start="42:17" pos:end="42:22">offset</name> <operator pos:start="42:24" pos:end="42:25">&amp;=</operator> <operator pos:start="42:27" pos:end="42:27">~</operator><name pos:start="42:28" pos:end="42:44">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>
                <expr_stmt pos:start="43:17" pos:end="45:55"><expr pos:start="43:17" pos:end="45:54"><name pos:start="43:17" pos:end="43:22">errors</name> <operator pos:start="43:24" pos:end="43:25">+=</operator> <call pos:start="43:27" pos:end="45:54"><name pos:start="43:27" pos:end="43:39">inc_refcounts</name><argument_list pos:start="43:40" pos:end="45:54">(<argument pos:start="43:41" pos:end="43:42"><expr pos:start="43:41" pos:end="43:42"><name pos:start="43:41" pos:end="43:42">bs</name></expr></argument>, <argument pos:start="43:45" pos:end="43:58"><expr pos:start="43:45" pos:end="43:58"><name pos:start="43:45" pos:end="43:58">refcount_table</name></expr></argument>,
                              <argument pos:start="44:31" pos:end="44:49"><expr pos:start="44:31" pos:end="44:49"><name pos:start="44:31" pos:end="44:49">refcount_table_size</name></expr></argument>,
                              <argument pos:start="45:31" pos:end="45:36"><expr pos:start="45:31" pos:end="45:36"><name pos:start="45:31" pos:end="45:36">offset</name></expr></argument>, <argument pos:start="45:39" pos:end="45:53"><expr pos:start="45:39" pos:end="45:53"><name pos:start="45:39" pos:end="45:53"><name pos:start="45:39" pos:end="45:39">s</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:53">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:24"><expr pos:start="46:5" pos:end="46:23"><call pos:start="46:5" pos:end="46:23"><name pos:start="46:5" pos:end="46:13">qemu_free</name><argument_list pos:start="46:14" pos:end="46:23">(<argument pos:start="46:15" pos:end="46:22"><expr pos:start="46:15" pos:end="46:22"><name pos:start="46:15" pos:end="46:22">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="47:5" pos:end="47:18">return <expr pos:start="47:12" pos:end="47:17"><name pos:start="47:12" pos:end="47:17">errors</name></expr>;</return>
<label pos:start="48:1" pos:end="48:5"><name pos:start="48:1" pos:end="48:4">fail</name>:</label>
    <expr_stmt pos:start="49:5" pos:end="49:64"><expr pos:start="49:5" pos:end="49:63"><call pos:start="49:5" pos:end="49:63"><name pos:start="49:5" pos:end="49:11">fprintf</name><argument_list pos:start="49:12" pos:end="49:63">(<argument pos:start="49:13" pos:end="49:18"><expr pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:18">stderr</name></expr></argument>, <argument pos:start="49:21" pos:end="49:62"><expr pos:start="49:21" pos:end="49:62"><literal type="string" pos:start="49:21" pos:end="49:62">"ERROR: I/O error in check_refcounts_l1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:24"><expr pos:start="50:5" pos:end="50:23"><call pos:start="50:5" pos:end="50:23"><name pos:start="50:5" pos:end="50:13">qemu_free</name><argument_list pos:start="50:14" pos:end="50:23">(<argument pos:start="50:15" pos:end="50:22"><expr pos:start="50:15" pos:end="50:22"><name pos:start="50:15" pos:end="50:22">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="51:5" pos:end="51:16">return <expr pos:start="51:12" pos:end="51:15"><operator pos:start="51:12" pos:end="51:12">-</operator><name pos:start="51:13" pos:end="51:15">EIO</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function></unit>
