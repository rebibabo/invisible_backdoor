<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4777.c" pos:tabs="8"><function pos:start="1:1" pos:end="122:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">output_packet</name><parameter_list pos:start="1:26" pos:end="1:75">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:36">OutputFile</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">of</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">AVPacket</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">pkt</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:74"><decl pos:start="1:58" pos:end="1:74"><type pos:start="1:58" pos:end="1:74"><name pos:start="1:58" pos:end="1:69">OutputStream</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">ost</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="122:1">{<block_content pos:start="5:5" pos:end="120:5">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:52">/* apply the output bitstream filters, if any */</comment>

    <if_stmt pos:start="11:5" pos:end="104:35"><if pos:start="11:5" pos:end="102:5">if <condition pos:start="11:8" pos:end="11:34">(<expr pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:11">ost</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:33">nb_bitstream_filters</name></name></expr>)</condition> <block pos:start="11:36" pos:end="102:5">{<block_content pos:start="13:9" pos:end="100:9">

        <decl_stmt pos:start="13:9" pos:end="13:16"><decl pos:start="13:9" pos:end="13:15"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:15">idx</name></decl>;</decl_stmt>




        <expr_stmt pos:start="18:9" pos:end="18:55"><expr pos:start="18:9" pos:end="18:54"><name pos:start="18:9" pos:end="18:11">ret</name> <operator pos:start="18:13" pos:end="18:13">=</operator> <call pos:start="18:15" pos:end="18:54"><name pos:start="18:15" pos:end="18:32">av_bsf_send_packet</name><argument_list pos:start="18:33" pos:end="18:54">(<argument pos:start="18:34" pos:end="18:48"><expr pos:start="18:34" pos:end="18:48"><name pos:start="18:34" pos:end="18:48"><name pos:start="18:34" pos:end="18:36">ost</name><operator pos:start="18:37" pos:end="18:38">-&gt;</operator><name pos:start="18:39" pos:end="18:45">bsf_ctx</name><index pos:start="18:46" pos:end="18:48">[<expr pos:start="18:47" pos:end="18:47"><literal type="number" pos:start="18:47" pos:end="18:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="18:51" pos:end="18:53"><expr pos:start="18:51" pos:end="18:53"><name pos:start="18:51" pos:end="18:53">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="20:9" pos:end="22:24"><if pos:start="20:9" pos:end="22:24">if <condition pos:start="20:12" pos:end="20:20">(<expr pos:start="20:13" pos:end="20:19"><name pos:start="20:13" pos:end="20:15">ret</name> <operator pos:start="20:17" pos:end="20:17">&lt;</operator> <literal type="number" pos:start="20:19" pos:end="20:19">0</literal></expr>)</condition><block type="pseudo" pos:start="22:13" pos:end="22:24"><block_content pos:start="22:13" pos:end="22:24">

            <goto pos:start="22:13" pos:end="22:24">goto <name pos:start="22:18" pos:end="22:23">finish</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="26:9" pos:end="26:16"><expr pos:start="26:9" pos:end="26:15"><name pos:start="26:9" pos:end="26:11">idx</name> <operator pos:start="26:13" pos:end="26:13">=</operator> <literal type="number" pos:start="26:15" pos:end="26:15">1</literal></expr>;</expr_stmt>

        <while pos:start="28:9" pos:end="100:9">while <condition pos:start="28:15" pos:end="28:19">(<expr pos:start="28:16" pos:end="28:18"><name pos:start="28:16" pos:end="28:18">idx</name></expr>)</condition> <block pos:start="28:21" pos:end="100:9">{<block_content pos:start="32:13" pos:end="98:43">

            <comment type="block" pos:start="30:13" pos:end="30:68">/* get a packet from the previous filter up the chain */</comment>

            <expr_stmt pos:start="32:13" pos:end="32:68"><expr pos:start="32:13" pos:end="32:67"><name pos:start="32:13" pos:end="32:15">ret</name> <operator pos:start="32:17" pos:end="32:17">=</operator> <call pos:start="32:19" pos:end="32:67"><name pos:start="32:19" pos:end="32:39">av_bsf_receive_packet</name><argument_list pos:start="32:40" pos:end="32:67">(<argument pos:start="32:41" pos:end="32:61"><expr pos:start="32:41" pos:end="32:61"><name pos:start="32:41" pos:end="32:61"><name pos:start="32:41" pos:end="32:43">ost</name><operator pos:start="32:44" pos:end="32:45">-&gt;</operator><name pos:start="32:46" pos:end="32:52">bsf_ctx</name><index pos:start="32:53" pos:end="32:61">[<expr pos:start="32:54" pos:end="32:60"><name pos:start="32:54" pos:end="32:56">idx</name> <operator pos:start="32:58" pos:end="32:58">-</operator> <literal type="number" pos:start="32:60" pos:end="32:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="32:64" pos:end="32:66"><expr pos:start="32:64" pos:end="32:66"><name pos:start="32:64" pos:end="32:66">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="34:13" pos:end="42:85">/* HACK! - aac_adtstoasc updates extradata after filtering the first frame when

             * the api states this shouldn't happen after init(). Propagate it here to the

             * muxer and to the next filters in the chain to workaround this.

             * TODO/FIXME - Make aac_adtstoasc use new packet side data instead of changing

             * par_out-&gt;extradata and adapt muxers accordingly to get rid of this. */</comment>

            <if_stmt pos:start="44:13" pos:end="54:13"><if pos:start="44:13" pos:end="54:13">if <condition pos:start="44:16" pos:end="44:59">(<expr pos:start="44:17" pos:end="44:58"><operator pos:start="44:17" pos:end="44:17">!</operator><operator pos:start="44:18" pos:end="44:18">(</operator><name pos:start="44:19" pos:end="44:53"><name pos:start="44:19" pos:end="44:21">ost</name><operator pos:start="44:22" pos:end="44:23">-&gt;</operator><name pos:start="44:24" pos:end="44:44">bsf_extradata_updated</name><index pos:start="44:45" pos:end="44:53">[<expr pos:start="44:46" pos:end="44:52"><name pos:start="44:46" pos:end="44:48">idx</name> <operator pos:start="44:50" pos:end="44:50">-</operator> <literal type="number" pos:start="44:52" pos:end="44:52">1</literal></expr>]</index></name> <operator pos:start="44:55" pos:end="44:55">&amp;</operator> <literal type="number" pos:start="44:57" pos:end="44:57">1</literal><operator pos:start="44:58" pos:end="44:58">)</operator></expr>)</condition> <block pos:start="44:61" pos:end="54:13">{<block_content pos:start="46:17" pos:end="52:57">

                <expr_stmt pos:start="46:17" pos:end="46:97"><expr pos:start="46:17" pos:end="46:96"><name pos:start="46:17" pos:end="46:19">ret</name> <operator pos:start="46:21" pos:end="46:21">=</operator> <call pos:start="46:23" pos:end="46:96"><name pos:start="46:23" pos:end="46:45">avcodec_parameters_copy</name><argument_list pos:start="46:46" pos:end="46:96">(<argument pos:start="46:47" pos:end="46:63"><expr pos:start="46:47" pos:end="46:63"><name pos:start="46:47" pos:end="46:63"><name pos:start="46:47" pos:end="46:49">ost</name><operator pos:start="46:50" pos:end="46:51">-&gt;</operator><name pos:start="46:52" pos:end="46:53">st</name><operator pos:start="46:54" pos:end="46:55">-&gt;</operator><name pos:start="46:56" pos:end="46:63">codecpar</name></name></expr></argument>, <argument pos:start="46:66" pos:end="46:95"><expr pos:start="46:66" pos:end="46:95"><name pos:start="46:66" pos:end="46:86"><name pos:start="46:66" pos:end="46:68">ost</name><operator pos:start="46:69" pos:end="46:70">-&gt;</operator><name pos:start="46:71" pos:end="46:77">bsf_ctx</name><index pos:start="46:78" pos:end="46:86">[<expr pos:start="46:79" pos:end="46:85"><name pos:start="46:79" pos:end="46:81">idx</name> <operator pos:start="46:83" pos:end="46:83">-</operator> <literal type="number" pos:start="46:85" pos:end="46:85">1</literal></expr>]</index></name><operator pos:start="46:87" pos:end="46:88">-&gt;</operator><name pos:start="46:89" pos:end="46:95">par_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="48:17" pos:end="50:32"><if pos:start="48:17" pos:end="50:32">if <condition pos:start="48:20" pos:end="48:28">(<expr pos:start="48:21" pos:end="48:27"><name pos:start="48:21" pos:end="48:23">ret</name> <operator pos:start="48:25" pos:end="48:25">&lt;</operator> <literal type="number" pos:start="48:27" pos:end="48:27">0</literal></expr>)</condition><block type="pseudo" pos:start="50:21" pos:end="50:32"><block_content pos:start="50:21" pos:end="50:32">

                    <goto pos:start="50:21" pos:end="50:32">goto <name pos:start="50:26" pos:end="50:31">finish</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="52:17" pos:end="52:57"><expr pos:start="52:17" pos:end="52:56"><name pos:start="52:17" pos:end="52:51"><name pos:start="52:17" pos:end="52:19">ost</name><operator pos:start="52:20" pos:end="52:21">-&gt;</operator><name pos:start="52:22" pos:end="52:42">bsf_extradata_updated</name><index pos:start="52:43" pos:end="52:51">[<expr pos:start="52:44" pos:end="52:50"><name pos:start="52:44" pos:end="52:46">idx</name> <operator pos:start="52:48" pos:end="52:48">-</operator> <literal type="number" pos:start="52:50" pos:end="52:50">1</literal></expr>]</index></name> <operator pos:start="52:53" pos:end="52:54">|=</operator> <literal type="number" pos:start="52:56" pos:end="52:56">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="56:13" pos:end="66:28"><if pos:start="56:13" pos:end="64:13">if <condition pos:start="56:16" pos:end="56:39">(<expr pos:start="56:17" pos:end="56:38"><name pos:start="56:17" pos:end="56:19">ret</name> <operator pos:start="56:21" pos:end="56:22">==</operator> <call pos:start="56:24" pos:end="56:38"><name pos:start="56:24" pos:end="56:30">AVERROR</name><argument_list pos:start="56:31" pos:end="56:38">(<argument pos:start="56:32" pos:end="56:37"><expr pos:start="56:32" pos:end="56:37"><name pos:start="56:32" pos:end="56:37">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="56:41" pos:end="64:13">{<block_content pos:start="58:17" pos:end="62:25">

                <expr_stmt pos:start="58:17" pos:end="58:24"><expr pos:start="58:17" pos:end="58:23"><name pos:start="58:17" pos:end="58:19">ret</name> <operator pos:start="58:21" pos:end="58:21">=</operator> <literal type="number" pos:start="58:23" pos:end="58:23">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="60:17" pos:end="60:22"><expr pos:start="60:17" pos:end="60:21"><name pos:start="60:17" pos:end="60:19">idx</name><operator pos:start="60:20" pos:end="60:21">--</operator></expr>;</expr_stmt>

                <continue pos:start="62:17" pos:end="62:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="64:15" pos:end="66:28">else if <condition pos:start="64:23" pos:end="64:31">(<expr pos:start="64:24" pos:end="64:30"><name pos:start="64:24" pos:end="64:26">ret</name> <operator pos:start="64:28" pos:end="64:28">&lt;</operator> <literal type="number" pos:start="64:30" pos:end="64:30">0</literal></expr>)</condition><block type="pseudo" pos:start="66:17" pos:end="66:28"><block_content pos:start="66:17" pos:end="66:28">

                <goto pos:start="66:17" pos:end="66:28">goto <name pos:start="66:22" pos:end="66:27">finish</name>;</goto></block_content></block></if></if_stmt>



            <comment type="block" pos:start="70:13" pos:end="70:75">/* send it to the next filter down the chain or to the muxer */</comment>

            <if_stmt pos:start="72:13" pos:end="98:43"><if pos:start="72:13" pos:end="96:13">if <condition pos:start="72:16" pos:end="72:48">(<expr pos:start="72:17" pos:end="72:47"><name pos:start="72:17" pos:end="72:19">idx</name> <operator pos:start="72:21" pos:end="72:21">&lt;</operator> <name pos:start="72:23" pos:end="72:47"><name pos:start="72:23" pos:end="72:25">ost</name><operator pos:start="72:26" pos:end="72:27">-&gt;</operator><name pos:start="72:28" pos:end="72:47">nb_bitstream_filters</name></name></expr>)</condition> <block pos:start="72:50" pos:end="96:13">{<block_content pos:start="76:17" pos:end="94:22">

                <comment type="block" pos:start="74:17" pos:end="74:45">/* HACK/FIXME! - See above */</comment>

                <if_stmt pos:start="76:17" pos:end="86:17"><if pos:start="76:17" pos:end="86:17">if <condition pos:start="76:20" pos:end="76:59">(<expr pos:start="76:21" pos:end="76:58"><operator pos:start="76:21" pos:end="76:21">!</operator><operator pos:start="76:22" pos:end="76:22">(</operator><name pos:start="76:23" pos:end="76:53"><name pos:start="76:23" pos:end="76:25">ost</name><operator pos:start="76:26" pos:end="76:27">-&gt;</operator><name pos:start="76:28" pos:end="76:48">bsf_extradata_updated</name><index pos:start="76:49" pos:end="76:53">[<expr pos:start="76:50" pos:end="76:52"><name pos:start="76:50" pos:end="76:52">idx</name></expr>]</index></name> <operator pos:start="76:55" pos:end="76:55">&amp;</operator> <literal type="number" pos:start="76:57" pos:end="76:57">2</literal><operator pos:start="76:58" pos:end="76:58">)</operator></expr>)</condition> <block pos:start="76:61" pos:end="86:17">{<block_content pos:start="78:21" pos:end="84:57">

                    <expr_stmt pos:start="78:21" pos:end="78:110"><expr pos:start="78:21" pos:end="78:109"><name pos:start="78:21" pos:end="78:23">ret</name> <operator pos:start="78:25" pos:end="78:25">=</operator> <call pos:start="78:27" pos:end="78:109"><name pos:start="78:27" pos:end="78:49">avcodec_parameters_copy</name><argument_list pos:start="78:50" pos:end="78:109">(<argument pos:start="78:51" pos:end="78:76"><expr pos:start="78:51" pos:end="78:76"><name pos:start="78:51" pos:end="78:67"><name pos:start="78:51" pos:end="78:53">ost</name><operator pos:start="78:54" pos:end="78:55">-&gt;</operator><name pos:start="78:56" pos:end="78:62">bsf_ctx</name><index pos:start="78:63" pos:end="78:67">[<expr pos:start="78:64" pos:end="78:66"><name pos:start="78:64" pos:end="78:66">idx</name></expr>]</index></name><operator pos:start="78:68" pos:end="78:69">-&gt;</operator><name pos:start="78:70" pos:end="78:76">par_out</name></expr></argument>, <argument pos:start="78:79" pos:end="78:108"><expr pos:start="78:79" pos:end="78:108"><name pos:start="78:79" pos:end="78:99"><name pos:start="78:79" pos:end="78:81">ost</name><operator pos:start="78:82" pos:end="78:83">-&gt;</operator><name pos:start="78:84" pos:end="78:90">bsf_ctx</name><index pos:start="78:91" pos:end="78:99">[<expr pos:start="78:92" pos:end="78:98"><name pos:start="78:92" pos:end="78:94">idx</name> <operator pos:start="78:96" pos:end="78:96">-</operator> <literal type="number" pos:start="78:98" pos:end="78:98">1</literal></expr>]</index></name><operator pos:start="78:100" pos:end="78:101">-&gt;</operator><name pos:start="78:102" pos:end="78:108">par_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="80:21" pos:end="82:36"><if pos:start="80:21" pos:end="82:36">if <condition pos:start="80:24" pos:end="80:32">(<expr pos:start="80:25" pos:end="80:31"><name pos:start="80:25" pos:end="80:27">ret</name> <operator pos:start="80:29" pos:end="80:29">&lt;</operator> <literal type="number" pos:start="80:31" pos:end="80:31">0</literal></expr>)</condition><block type="pseudo" pos:start="82:25" pos:end="82:36"><block_content pos:start="82:25" pos:end="82:36">

                        <goto pos:start="82:25" pos:end="82:36">goto <name pos:start="82:30" pos:end="82:35">finish</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="84:21" pos:end="84:57"><expr pos:start="84:21" pos:end="84:56"><name pos:start="84:21" pos:end="84:51"><name pos:start="84:21" pos:end="84:23">ost</name><operator pos:start="84:24" pos:end="84:25">-&gt;</operator><name pos:start="84:26" pos:end="84:46">bsf_extradata_updated</name><index pos:start="84:47" pos:end="84:51">[<expr pos:start="84:48" pos:end="84:50"><name pos:start="84:48" pos:end="84:50">idx</name></expr>]</index></name> <operator pos:start="84:53" pos:end="84:54">|=</operator> <literal type="number" pos:start="84:56" pos:end="84:56">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="88:17" pos:end="88:65"><expr pos:start="88:17" pos:end="88:64"><name pos:start="88:17" pos:end="88:19">ret</name> <operator pos:start="88:21" pos:end="88:21">=</operator> <call pos:start="88:23" pos:end="88:64"><name pos:start="88:23" pos:end="88:40">av_bsf_send_packet</name><argument_list pos:start="88:41" pos:end="88:64">(<argument pos:start="88:42" pos:end="88:58"><expr pos:start="88:42" pos:end="88:58"><name pos:start="88:42" pos:end="88:58"><name pos:start="88:42" pos:end="88:44">ost</name><operator pos:start="88:45" pos:end="88:46">-&gt;</operator><name pos:start="88:47" pos:end="88:53">bsf_ctx</name><index pos:start="88:54" pos:end="88:58">[<expr pos:start="88:55" pos:end="88:57"><name pos:start="88:55" pos:end="88:57">idx</name></expr>]</index></name></expr></argument>, <argument pos:start="88:61" pos:end="88:63"><expr pos:start="88:61" pos:end="88:63"><name pos:start="88:61" pos:end="88:63">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="90:17" pos:end="92:32"><if pos:start="90:17" pos:end="92:32">if <condition pos:start="90:20" pos:end="90:28">(<expr pos:start="90:21" pos:end="90:27"><name pos:start="90:21" pos:end="90:23">ret</name> <operator pos:start="90:25" pos:end="90:25">&lt;</operator> <literal type="number" pos:start="90:27" pos:end="90:27">0</literal></expr>)</condition><block type="pseudo" pos:start="92:21" pos:end="92:32"><block_content pos:start="92:21" pos:end="92:32">

                    <goto pos:start="92:21" pos:end="92:32">goto <name pos:start="92:26" pos:end="92:31">finish</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="94:17" pos:end="94:22"><expr pos:start="94:17" pos:end="94:21"><name pos:start="94:17" pos:end="94:19">idx</name><operator pos:start="94:20" pos:end="94:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="96:15" pos:end="98:43">else<block type="pseudo" pos:start="98:17" pos:end="98:43"><block_content pos:start="98:17" pos:end="98:43">

                <expr_stmt pos:start="98:17" pos:end="98:43"><expr pos:start="98:17" pos:end="98:42"><call pos:start="98:17" pos:end="98:42"><name pos:start="98:17" pos:end="98:28">write_packet</name><argument_list pos:start="98:29" pos:end="98:42">(<argument pos:start="98:30" pos:end="98:31"><expr pos:start="98:30" pos:end="98:31"><name pos:start="98:30" pos:end="98:31">of</name></expr></argument>, <argument pos:start="98:34" pos:end="98:36"><expr pos:start="98:34" pos:end="98:36"><name pos:start="98:34" pos:end="98:36">pkt</name></expr></argument>, <argument pos:start="98:39" pos:end="98:41"><expr pos:start="98:39" pos:end="98:41"><name pos:start="98:39" pos:end="98:41">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="102:7" pos:end="104:35">else<block type="pseudo" pos:start="104:9" pos:end="104:35"><block_content pos:start="104:9" pos:end="104:35">

        <expr_stmt pos:start="104:9" pos:end="104:35"><expr pos:start="104:9" pos:end="104:34"><call pos:start="104:9" pos:end="104:34"><name pos:start="104:9" pos:end="104:20">write_packet</name><argument_list pos:start="104:21" pos:end="104:34">(<argument pos:start="104:22" pos:end="104:23"><expr pos:start="104:22" pos:end="104:23"><name pos:start="104:22" pos:end="104:23">of</name></expr></argument>, <argument pos:start="104:26" pos:end="104:28"><expr pos:start="104:26" pos:end="104:28"><name pos:start="104:26" pos:end="104:28">pkt</name></expr></argument>, <argument pos:start="104:31" pos:end="104:33"><expr pos:start="104:31" pos:end="104:33"><name pos:start="104:31" pos:end="104:33">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<label pos:start="108:1" pos:end="108:7"><name pos:start="108:1" pos:end="108:6">finish</name>:</label>

    <if_stmt pos:start="110:5" pos:end="120:5"><if pos:start="110:5" pos:end="120:5">if <condition pos:start="110:8" pos:end="110:38">(<expr pos:start="110:9" pos:end="110:37"><name pos:start="110:9" pos:end="110:11">ret</name> <operator pos:start="110:13" pos:end="110:13">&lt;</operator> <literal type="number" pos:start="110:15" pos:end="110:15">0</literal> <operator pos:start="110:17" pos:end="110:18">&amp;&amp;</operator> <name pos:start="110:20" pos:end="110:22">ret</name> <operator pos:start="110:24" pos:end="110:25">!=</operator> <name pos:start="110:27" pos:end="110:37">AVERROR_EOF</name></expr>)</condition> <block pos:start="110:40" pos:end="120:5">{<block_content pos:start="112:9" pos:end="118:28">

        <expr_stmt pos:start="112:9" pos:end="114:75"><expr pos:start="112:9" pos:end="114:74"><call pos:start="112:9" pos:end="114:74"><name pos:start="112:9" pos:end="112:14">av_log</name><argument_list pos:start="112:15" pos:end="114:74">(<argument pos:start="112:16" pos:end="112:19"><expr pos:start="112:16" pos:end="112:19"><name pos:start="112:16" pos:end="112:19">NULL</name></expr></argument>, <argument pos:start="112:22" pos:end="112:33"><expr pos:start="112:22" pos:end="112:33"><name pos:start="112:22" pos:end="112:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="112:36" pos:end="114:44"><expr pos:start="112:36" pos:end="114:44"><literal type="string" pos:start="112:36" pos:end="112:83">"Error applying bitstream filters to an output "</literal>

               <literal type="string" pos:start="114:16" pos:end="114:44">"packet for stream #%d:%d.\n"</literal></expr></argument>, <argument pos:start="114:47" pos:end="114:61"><expr pos:start="114:47" pos:end="114:61"><name pos:start="114:47" pos:end="114:61"><name pos:start="114:47" pos:end="114:49">ost</name><operator pos:start="114:50" pos:end="114:51">-&gt;</operator><name pos:start="114:52" pos:end="114:61">file_index</name></name></expr></argument>, <argument pos:start="114:64" pos:end="114:73"><expr pos:start="114:64" pos:end="114:73"><name pos:start="114:64" pos:end="114:73"><name pos:start="114:64" pos:end="114:66">ost</name><operator pos:start="114:67" pos:end="114:68">-&gt;</operator><name pos:start="114:69" pos:end="114:73">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="116:9" pos:end="118:28"><if pos:start="116:9" pos:end="118:28">if<condition pos:start="116:11" pos:end="116:25">(<expr pos:start="116:12" pos:end="116:24"><name pos:start="116:12" pos:end="116:24">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="118:13" pos:end="118:28"><block_content pos:start="118:13" pos:end="118:28">

            <expr_stmt pos:start="118:13" pos:end="118:28"><expr pos:start="118:13" pos:end="118:27"><call pos:start="118:13" pos:end="118:27"><name pos:start="118:13" pos:end="118:24">exit_program</name><argument_list pos:start="118:25" pos:end="118:27">(<argument pos:start="118:26" pos:end="118:26"><expr pos:start="118:26" pos:end="118:26"><literal type="number" pos:start="118:26" pos:end="118:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
