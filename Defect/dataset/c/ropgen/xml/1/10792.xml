<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10792.c" pos:tabs="8"><function pos:start="1:1" pos:end="325:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">ivi_decode_blocks</name><parameter_list pos:start="1:29" pos:end="3:51">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:42">GetBitContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">gb</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><name pos:start="1:49" pos:end="1:59">IVIBandDesc</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">band</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:80"><decl pos:start="1:68" pos:end="1:80"><type pos:start="1:68" pos:end="1:80"><name pos:start="1:68" pos:end="1:74">IVITile</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:80">tile</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:50"><decl pos:start="3:30" pos:end="3:50"><type pos:start="3:30" pos:end="3:50"><name pos:start="3:30" pos:end="3:43">AVCodecContext</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:50">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="325:1">{<block_content pos:start="7:5" pos:end="323:13">

    <decl_stmt pos:start="7:5" pos:end="9:65"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type>         <name pos:start="7:17" pos:end="7:19">mbn</name></decl>, <decl pos:start="7:22" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:24">blk</name></decl>, <decl pos:start="7:27" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:36">num_blocks</name></decl>, <decl pos:start="7:39" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:39" pos:end="7:48">num_coeffs</name></decl>, <decl pos:start="7:51" pos:end="7:58"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:51" pos:end="7:58">blk_size</name></decl>, <decl pos:start="7:61" pos:end="7:68"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:61" pos:end="7:68">scan_pos</name></decl>, <decl pos:start="7:71" pos:end="7:73"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:71" pos:end="7:73">run</name></decl>, <decl pos:start="7:76" pos:end="7:78"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:76" pos:end="7:78">val</name></decl>,

                <decl pos:start="9:17" pos:end="9:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="9:17" pos:end="9:19">pos</name></decl>, <decl pos:start="9:22" pos:end="9:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="9:22" pos:end="9:29">is_intra</name></decl>, <decl pos:start="9:32" pos:end="9:42"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="9:32" pos:end="9:38">mc_type</name> <init pos:start="9:40" pos:end="9:42">= <expr pos:start="9:42" pos:end="9:42"><literal type="number" pos:start="9:42" pos:end="9:42">0</literal></expr></init></decl>, <decl pos:start="9:45" pos:end="9:48"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="9:45" pos:end="9:48">mv_x</name></decl>, <decl pos:start="9:51" pos:end="9:54"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="9:51" pos:end="9:54">mv_y</name></decl>, <decl pos:start="9:57" pos:end="9:64"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="9:57" pos:end="9:64">col_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type>     <name pos:start="11:17" pos:end="11:28"><name pos:start="11:17" pos:end="11:25">col_flags</name><index pos:start="11:26" pos:end="11:28">[<expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int32_t</name></type>     <name pos:start="13:17" pos:end="13:23">prev_dc</name></decl>, <decl pos:start="13:26" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:30">trvec</name><index pos:start="13:31" pos:end="13:34">[<expr pos:start="13:32" pos:end="13:33"><literal type="number" pos:start="13:32" pos:end="13:33">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:53"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type>    <name pos:start="15:17" pos:end="15:19">cbp</name></decl>, <decl pos:start="15:22" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:22" pos:end="15:24">sym</name></decl>, <decl pos:start="15:27" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:27" pos:end="15:28">lo</name></decl>, <decl pos:start="15:31" pos:end="15:32"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:31" pos:end="15:32">hi</name></decl>, <decl pos:start="15:35" pos:end="15:39"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:35" pos:end="15:39">quant</name></decl>, <decl pos:start="15:42" pos:end="15:49"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:42" pos:end="15:49">buf_offs</name></decl>, <decl pos:start="15:52" pos:end="15:52"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:52" pos:end="15:52">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:13">IVIMbInfo</name>   <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:19">mb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:38"><decl pos:start="19:5" pos:end="19:37"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:13">RVMapDesc</name>   <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:22">rvmap</name> <init pos:start="19:24" pos:end="19:37">= <expr pos:start="19:26" pos:end="19:37"><name pos:start="19:26" pos:end="19:37"><name pos:start="19:26" pos:end="19:29">band</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:37">rv_map</name></name></expr></init></decl>;</decl_stmt>

    <function_decl pos:start="21:5" pos:end="21:98"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">void</name></type> (<modifier pos:start="21:11" pos:end="21:11">*</modifier><name pos:start="21:12" pos:end="21:29">mc_with_delta_func</name>)<parameter_list pos:start="21:31" pos:end="21:97">(<parameter pos:start="21:32" pos:end="21:43"><decl pos:start="21:32" pos:end="21:43"><type pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:38">int16_t</name> <modifier pos:start="21:40" pos:end="21:40">*</modifier></type><name pos:start="21:41" pos:end="21:43">buf</name></decl></parameter>, <parameter pos:start="21:46" pos:end="21:67"><decl pos:start="21:46" pos:end="21:67"><type pos:start="21:46" pos:end="21:67"><specifier pos:start="21:46" pos:end="21:50">const</specifier> <name pos:start="21:52" pos:end="21:58">int16_t</name> <modifier pos:start="21:60" pos:end="21:60">*</modifier></type><name pos:start="21:61" pos:end="21:67">ref_buf</name></decl></parameter>, <parameter pos:start="21:70" pos:end="21:83"><decl pos:start="21:70" pos:end="21:83"><type pos:start="21:70" pos:end="21:83"><name pos:start="21:70" pos:end="21:77">uint32_t</name></type> <name pos:start="21:79" pos:end="21:83">pitch</name></decl></parameter>, <parameter pos:start="21:86" pos:end="21:96"><decl pos:start="21:86" pos:end="21:96"><type pos:start="21:86" pos:end="21:96"><name pos:start="21:86" pos:end="21:88">int</name></type> <name pos:start="21:90" pos:end="21:96">mc_type</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="23:5" pos:end="23:98"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">void</name></type> (<modifier pos:start="23:11" pos:end="23:11">*</modifier><name pos:start="23:12" pos:end="23:27">mc_no_delta_func</name>)  <parameter_list pos:start="23:31" pos:end="23:97">(<parameter pos:start="23:32" pos:end="23:43"><decl pos:start="23:32" pos:end="23:43"><type pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:38">int16_t</name> <modifier pos:start="23:40" pos:end="23:40">*</modifier></type><name pos:start="23:41" pos:end="23:43">buf</name></decl></parameter>, <parameter pos:start="23:46" pos:end="23:67"><decl pos:start="23:46" pos:end="23:67"><type pos:start="23:46" pos:end="23:67"><specifier pos:start="23:46" pos:end="23:50">const</specifier> <name pos:start="23:52" pos:end="23:58">int16_t</name> <modifier pos:start="23:60" pos:end="23:60">*</modifier></type><name pos:start="23:61" pos:end="23:67">ref_buf</name></decl></parameter>, <parameter pos:start="23:70" pos:end="23:83"><decl pos:start="23:70" pos:end="23:83"><type pos:start="23:70" pos:end="23:83"><name pos:start="23:70" pos:end="23:77">uint32_t</name></type> <name pos:start="23:79" pos:end="23:83">pitch</name></decl></parameter>, <parameter pos:start="23:86" pos:end="23:96"><decl pos:start="23:86" pos:end="23:96"><type pos:start="23:86" pos:end="23:96"><name pos:start="23:86" pos:end="23:88">int</name></type> <name pos:start="23:90" pos:end="23:96">mc_type</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:21"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:18">uint16_t</name>  <modifier pos:start="25:21" pos:end="25:21">*</modifier></type><name pos:start="25:22" pos:end="25:29">base_tab</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:21"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:17">uint8_t</name>   <modifier pos:start="27:21" pos:end="27:21">*</modifier></type><name pos:start="27:22" pos:end="27:30">scale_tab</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:16"><expr pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:11">prev_dc</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="31:18" pos:end="31:67">/* init intra prediction for the DC coefficient */</comment>



    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:12">blk_size</name>   <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:31"><name pos:start="35:18" pos:end="35:21">band</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:31">blk_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:12">col_mask</name>   <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:25">blk_size</name> <operator pos:start="37:27" pos:end="37:27">-</operator> <literal type="number" pos:start="37:29" pos:end="37:29">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="37:32" pos:end="37:77">/* column mask for tracking non-zero coeffs */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:53"><expr pos:start="39:5" pos:end="39:52"><name pos:start="39:5" pos:end="39:14">num_blocks</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <ternary pos:start="39:18" pos:end="39:52"><condition pos:start="39:18" pos:end="39:46"><expr pos:start="39:18" pos:end="39:44"><operator pos:start="39:18" pos:end="39:18">(</operator><name pos:start="39:19" pos:end="39:31"><name pos:start="39:19" pos:end="39:22">band</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:31">mb_size</name></name> <operator pos:start="39:33" pos:end="39:34">!=</operator> <name pos:start="39:36" pos:end="39:43">blk_size</name><operator pos:start="39:44" pos:end="39:44">)</operator></expr> ?</condition><then pos:start="39:48" pos:end="39:48"> <expr pos:start="39:48" pos:end="39:48"><literal type="number" pos:start="39:48" pos:end="39:48">4</literal></expr> </then><else pos:start="39:50" pos:end="39:52">: <expr pos:start="39:52" pos:end="39:52"><literal type="number" pos:start="39:52" pos:end="39:52">1</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block" pos:start="39:55" pos:end="39:83">/* number of blocks per mb */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:14">num_coeffs</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:25">blk_size</name> <operator pos:start="41:27" pos:end="41:27">*</operator> <name pos:start="41:29" pos:end="41:36">blk_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="55:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:22">(<expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:16">blk_size</name> <operator pos:start="43:18" pos:end="43:19">==</operator> <literal type="number" pos:start="43:21" pos:end="43:21">8</literal></expr>)</condition> <block pos:start="43:24" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:52">

        <expr_stmt pos:start="45:9" pos:end="45:49"><expr pos:start="45:9" pos:end="45:48"><name pos:start="45:9" pos:end="45:26">mc_with_delta_func</name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:48">ff_ivi_mc_8x8_delta</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:24">mc_no_delta_func</name>   <operator pos:start="47:28" pos:end="47:28">=</operator> <name pos:start="47:30" pos:end="47:51">ff_ivi_mc_8x8_no_delta</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="55:5">else <block pos:start="49:12" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:52">

        <expr_stmt pos:start="51:9" pos:end="51:49"><expr pos:start="51:9" pos:end="51:48"><name pos:start="51:9" pos:end="51:26">mc_with_delta_func</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:48">ff_ivi_mc_4x4_delta</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:52"><expr pos:start="53:9" pos:end="53:51"><name pos:start="53:9" pos:end="53:24">mc_no_delta_func</name>   <operator pos:start="53:28" pos:end="53:28">=</operator> <name pos:start="53:30" pos:end="53:51">ff_ivi_mc_4x4_no_delta</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="59:5" pos:end="315:5">for <control pos:start="59:9" pos:end="59:67">(<init pos:start="59:10" pos:end="59:33"><expr pos:start="59:10" pos:end="59:16"><name pos:start="59:10" pos:end="59:12">mbn</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr><operator pos:start="59:17" pos:end="59:17">,</operator> <expr pos:start="59:19" pos:end="59:32"><name pos:start="59:19" pos:end="59:20">mb</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:27">tile</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:32">mbs</name></name></expr>;</init> <condition pos:start="59:35" pos:end="59:54"><expr pos:start="59:35" pos:end="59:53"><name pos:start="59:35" pos:end="59:37">mbn</name> <operator pos:start="59:39" pos:end="59:39">&lt;</operator> <name pos:start="59:41" pos:end="59:53"><name pos:start="59:41" pos:end="59:44">tile</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:53">num_MBs</name></name></expr>;</condition> <incr pos:start="59:56" pos:end="59:66"><expr pos:start="59:56" pos:end="59:59"><name pos:start="59:56" pos:end="59:57">mb</name><operator pos:start="59:58" pos:end="59:59">++</operator></expr><operator pos:start="59:60" pos:end="59:60">,</operator> <expr pos:start="59:62" pos:end="59:66"><name pos:start="59:62" pos:end="59:64">mbn</name><operator pos:start="59:65" pos:end="59:66">++</operator></expr></incr>)</control> <block pos:start="59:69" pos:end="315:5">{<block_content pos:start="61:9" pos:end="313:9">

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:16">is_intra</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <operator pos:start="61:20" pos:end="61:20">!</operator><name pos:start="61:21" pos:end="61:28"><name pos:start="61:21" pos:end="61:22">mb</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:28">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:27"><expr pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:11">cbp</name>      <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:26"><name pos:start="63:20" pos:end="63:21">mb</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:26">cbp</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:32"><expr pos:start="65:9" pos:end="65:31"><name pos:start="65:9" pos:end="65:16">buf_offs</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:31"><name pos:start="65:20" pos:end="65:21">mb</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:31">buf_offs</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:63"><expr pos:start="69:9" pos:end="69:62"><name pos:start="69:9" pos:end="69:13">quant</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <call pos:start="69:17" pos:end="69:62"><name pos:start="69:17" pos:end="69:23">av_clip</name><argument_list pos:start="69:24" pos:end="69:62">(<argument pos:start="69:25" pos:end="69:54"><expr pos:start="69:25" pos:end="69:54"><name pos:start="69:25" pos:end="69:40"><name pos:start="69:25" pos:end="69:28">band</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:40">glob_quant</name></name> <operator pos:start="69:42" pos:end="69:42">+</operator> <name pos:start="69:44" pos:end="69:54"><name pos:start="69:44" pos:end="69:45">mb</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:54">q_delta</name></name></expr></argument>, <argument pos:start="69:57" pos:end="69:57"><expr pos:start="69:57" pos:end="69:57"><literal type="number" pos:start="69:57" pos:end="69:57">0</literal></expr></argument>, <argument pos:start="69:60" pos:end="69:61"><expr pos:start="69:60" pos:end="69:61"><literal type="number" pos:start="69:60" pos:end="69:61">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:68"><expr pos:start="73:9" pos:end="73:67"><name pos:start="73:9" pos:end="73:16">base_tab</name>  <operator pos:start="73:19" pos:end="73:19">=</operator> <ternary pos:start="73:21" pos:end="73:67"><condition pos:start="73:21" pos:end="73:30"><expr pos:start="73:21" pos:end="73:28"><name pos:start="73:21" pos:end="73:28">is_intra</name></expr> ?</condition><then pos:start="73:32" pos:end="73:47"> <expr pos:start="73:32" pos:end="73:47"><name pos:start="73:32" pos:end="73:47"><name pos:start="73:32" pos:end="73:35">band</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:47">intra_base</name></name></expr>  </then><else pos:start="73:50" pos:end="73:67">: <expr pos:start="73:52" pos:end="73:67"><name pos:start="73:52" pos:end="73:67"><name pos:start="73:52" pos:end="73:55">band</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:67">inter_base</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:69"><expr pos:start="75:9" pos:end="75:68"><name pos:start="75:9" pos:end="75:17">scale_tab</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <ternary pos:start="75:21" pos:end="75:68"><condition pos:start="75:21" pos:end="75:30"><expr pos:start="75:21" pos:end="75:28"><name pos:start="75:21" pos:end="75:28">is_intra</name></expr> ?</condition><then pos:start="75:32" pos:end="75:48"> <expr pos:start="75:32" pos:end="75:48"><name pos:start="75:32" pos:end="75:48"><name pos:start="75:32" pos:end="75:35">band</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:48">intra_scale</name></name></expr> </then><else pos:start="75:50" pos:end="75:68">: <expr pos:start="75:52" pos:end="75:68"><name pos:start="75:52" pos:end="75:68"><name pos:start="75:52" pos:end="75:55">band</name><operator pos:start="75:56" pos:end="75:57">-&gt;</operator><name pos:start="75:58" pos:end="75:68">inter_scale</name></name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:37"><if pos:start="77:9" pos:end="79:37">if <condition pos:start="77:12" pos:end="77:22">(<expr pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:21">scale_tab</name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:37"><block_content pos:start="79:13" pos:end="79:37">

            <expr_stmt pos:start="79:13" pos:end="79:37"><expr pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:17">quant</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:36"><name pos:start="79:21" pos:end="79:29">scale_tab</name><index pos:start="79:30" pos:end="79:36">[<expr pos:start="79:31" pos:end="79:35"><name pos:start="79:31" pos:end="79:35">quant</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="129:9"><if pos:start="83:9" pos:end="129:9">if <condition pos:start="83:12" pos:end="83:22">(<expr pos:start="83:13" pos:end="83:21"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:21">is_intra</name></expr>)</condition> <block pos:start="83:24" pos:end="129:9">{<block_content pos:start="85:13" pos:end="127:13">

            <expr_stmt pos:start="85:13" pos:end="85:28"><expr pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:16">mv_x</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:21">mb</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:27">mv_x</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:16">mv_y</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:21">mb</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:27">mv_y</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="97:13"><if pos:start="89:13" pos:end="97:13">if <condition pos:start="89:16" pos:end="89:33">(<expr pos:start="89:17" pos:end="89:32"><name pos:start="89:17" pos:end="89:32"><name pos:start="89:17" pos:end="89:20">band</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:32">is_halfpel</name></name></expr>)</condition> <block pos:start="89:35" pos:end="97:13">{<block_content pos:start="91:17" pos:end="95:27">

                <expr_stmt pos:start="91:17" pos:end="91:57"><expr pos:start="91:17" pos:end="91:56"><name pos:start="91:17" pos:end="91:23">mc_type</name> <operator pos:start="91:25" pos:end="91:25">=</operator> <operator pos:start="91:27" pos:end="91:27">(</operator><operator pos:start="91:28" pos:end="91:28">(</operator><name pos:start="91:29" pos:end="91:32">mv_y</name> <operator pos:start="91:34" pos:end="91:34">&amp;</operator> <literal type="number" pos:start="91:36" pos:end="91:36">1</literal><operator pos:start="91:37" pos:end="91:37">)</operator> <operator pos:start="91:39" pos:end="91:40">&lt;&lt;</operator> <literal type="number" pos:start="91:42" pos:end="91:42">1</literal><operator pos:start="91:43" pos:end="91:43">)</operator> <operator pos:start="91:45" pos:end="91:45">|</operator> <operator pos:start="91:47" pos:end="91:47">(</operator><name pos:start="91:48" pos:end="91:51">mv_x</name> <operator pos:start="91:53" pos:end="91:53">&amp;</operator> <literal type="number" pos:start="91:55" pos:end="91:55">1</literal><operator pos:start="91:56" pos:end="91:56">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:27"><expr pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:20">mv_x</name> <operator pos:start="93:22" pos:end="93:24">&gt;&gt;=</operator> <literal type="number" pos:start="93:26" pos:end="93:26">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:27"><expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:20">mv_y</name> <operator pos:start="95:22" pos:end="95:24">&gt;&gt;=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="95:29" pos:end="95:75">/* convert halfpel vectors into fullpel ones */</comment>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="99:13" pos:end="127:13"><if pos:start="99:13" pos:end="127:13">if <condition pos:start="99:16" pos:end="99:25">(<expr pos:start="99:17" pos:end="99:24"><name pos:start="99:17" pos:end="99:24"><name pos:start="99:17" pos:end="99:18">mb</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:24">type</name></name></expr>)</condition> <block pos:start="99:27" pos:end="127:13">{<block_content pos:start="101:17" pos:end="125:17">

                <decl_stmt pos:start="101:17" pos:end="101:41"><decl pos:start="101:17" pos:end="101:25"><type pos:start="101:17" pos:end="101:19"><name pos:start="101:17" pos:end="101:19">int</name></type> <name pos:start="101:21" pos:end="101:25">dmv_x</name></decl>, <decl pos:start="101:28" pos:end="101:32"><type ref="prev" pos:start="101:17" pos:end="101:19"/><name pos:start="101:28" pos:end="101:32">dmv_y</name></decl>, <decl pos:start="101:35" pos:end="101:36"><type ref="prev" pos:start="101:17" pos:end="101:19"/><name pos:start="101:35" pos:end="101:36">cx</name></decl>, <decl pos:start="101:39" pos:end="101:40"><type ref="prev" pos:start="101:17" pos:end="101:19"/><name pos:start="101:39" pos:end="101:40">cy</name></decl>;</decl_stmt>



                <expr_stmt pos:start="105:17" pos:end="105:53"><expr pos:start="105:17" pos:end="105:52"><name pos:start="105:17" pos:end="105:21">dmv_x</name> <operator pos:start="105:23" pos:end="105:23">=</operator> <name pos:start="105:25" pos:end="105:32"><name pos:start="105:25" pos:end="105:26">mb</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:32">mv_x</name></name> <operator pos:start="105:34" pos:end="105:35">&gt;&gt;</operator> <name pos:start="105:37" pos:end="105:52"><name pos:start="105:37" pos:end="105:40">band</name><operator pos:start="105:41" pos:end="105:42">-&gt;</operator><name pos:start="105:43" pos:end="105:52">is_halfpel</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:53"><expr pos:start="107:17" pos:end="107:52"><name pos:start="107:17" pos:end="107:21">dmv_y</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:32"><name pos:start="107:25" pos:end="107:26">mb</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:32">mv_y</name></name> <operator pos:start="107:34" pos:end="107:35">&gt;&gt;</operator> <name pos:start="107:37" pos:end="107:52"><name pos:start="107:37" pos:end="107:40">band</name><operator pos:start="107:41" pos:end="107:42">-&gt;</operator><name pos:start="107:43" pos:end="107:52">is_halfpel</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:53"><expr pos:start="109:17" pos:end="109:52"><name pos:start="109:17" pos:end="109:18">cx</name>    <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:32"><name pos:start="109:25" pos:end="109:26">mb</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:32">mv_x</name></name> <operator pos:start="109:34" pos:end="109:34">&amp;</operator>  <name pos:start="109:37" pos:end="109:52"><name pos:start="109:37" pos:end="109:40">band</name><operator pos:start="109:41" pos:end="109:42">-&gt;</operator><name pos:start="109:43" pos:end="109:52">is_halfpel</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:53"><expr pos:start="111:17" pos:end="111:52"><name pos:start="111:17" pos:end="111:18">cy</name>    <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:32"><name pos:start="111:25" pos:end="111:26">mb</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:32">mv_y</name></name> <operator pos:start="111:34" pos:end="111:34">&amp;</operator>  <name pos:start="111:37" pos:end="111:52"><name pos:start="111:37" pos:end="111:40">band</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:52">is_halfpel</name></name></expr>;</expr_stmt>



                <if_stmt pos:start="115:17" pos:end="125:17"><if pos:start="115:17" pos:end="125:17">if <condition pos:start="115:20" pos:end="121:77">(   <expr pos:start="115:24" pos:end="121:76"><name pos:start="115:24" pos:end="115:31"><name pos:start="115:24" pos:end="115:25">mb</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:31">xpos</name></name> <operator pos:start="115:33" pos:end="115:33">+</operator> <name pos:start="115:35" pos:end="117:62"><name pos:start="115:35" pos:end="115:39">dmv_x</name> <argument_list type="generic" pos:start="115:41" pos:end="117:62">&lt; <argument pos:start="115:43" pos:end="117:60"><expr pos:start="115:43" pos:end="117:60"><literal type="number" pos:start="115:43" pos:end="115:43">0</literal>

                    <operator pos:start="117:21" pos:end="117:22">||</operator> <name pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:25">mb</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:31">xpos</name></name> <operator pos:start="117:33" pos:end="117:33">+</operator> <name pos:start="117:35" pos:end="117:39">dmv_x</name> <operator pos:start="117:41" pos:end="117:41">+</operator> <name pos:start="117:43" pos:end="117:55"><name pos:start="117:43" pos:end="117:46">band</name><operator pos:start="117:47" pos:end="117:48">-&gt;</operator><name pos:start="117:49" pos:end="117:55">mb_size</name></name> <operator pos:start="117:57" pos:end="117:57">+</operator> <name pos:start="117:59" pos:end="117:60">cx</name></expr></argument> &gt;</argument_list></name> <name pos:start="117:64" pos:end="117:74"><name pos:start="117:64" pos:end="117:67">band</name><operator pos:start="117:68" pos:end="117:69">-&gt;</operator><name pos:start="117:70" pos:end="117:74">pitch</name></name>

                    <operator pos:start="119:21" pos:end="119:22">||</operator> <name pos:start="119:24" pos:end="119:31"><name pos:start="119:24" pos:end="119:25">mb</name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:31">ypos</name></name> <operator pos:start="119:33" pos:end="119:33">+</operator> <name pos:start="119:35" pos:end="121:62"><name pos:start="119:35" pos:end="119:39">dmv_y</name> <argument_list type="generic" pos:start="119:41" pos:end="121:62">&lt; <argument pos:start="119:43" pos:end="121:60"><expr pos:start="119:43" pos:end="121:60"><literal type="number" pos:start="119:43" pos:end="119:43">0</literal>

                    <operator pos:start="121:21" pos:end="121:22">||</operator> <name pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:25">mb</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:31">ypos</name></name> <operator pos:start="121:33" pos:end="121:33">+</operator> <name pos:start="121:35" pos:end="121:39">dmv_y</name> <operator pos:start="121:41" pos:end="121:41">+</operator> <name pos:start="121:43" pos:end="121:55"><name pos:start="121:43" pos:end="121:46">band</name><operator pos:start="121:47" pos:end="121:48">-&gt;</operator><name pos:start="121:49" pos:end="121:55">mb_size</name></name> <operator pos:start="121:57" pos:end="121:57">+</operator> <name pos:start="121:59" pos:end="121:60">cy</name></expr></argument> &gt;</argument_list></name> <name pos:start="121:64" pos:end="121:76"><name pos:start="121:64" pos:end="121:67">band</name><operator pos:start="121:68" pos:end="121:69">-&gt;</operator><name pos:start="121:70" pos:end="121:76">aheight</name></name></expr>)</condition> <block pos:start="121:79" pos:end="125:17">{<block_content pos:start="123:21" pos:end="123:47">

                    <return pos:start="123:21" pos:end="123:47">return <expr pos:start="123:28" pos:end="123:46"><name pos:start="123:28" pos:end="123:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="133:9" pos:end="313:9">for <control pos:start="133:13" pos:end="133:46">(<init pos:start="133:14" pos:end="133:21"><expr pos:start="133:14" pos:end="133:20"><name pos:start="133:14" pos:end="133:16">blk</name> <operator pos:start="133:18" pos:end="133:18">=</operator> <literal type="number" pos:start="133:20" pos:end="133:20">0</literal></expr>;</init> <condition pos:start="133:23" pos:end="133:39"><expr pos:start="133:23" pos:end="133:38"><name pos:start="133:23" pos:end="133:25">blk</name> <operator pos:start="133:27" pos:end="133:27">&lt;</operator> <name pos:start="133:29" pos:end="133:38">num_blocks</name></expr>;</condition> <incr pos:start="133:41" pos:end="133:45"><expr pos:start="133:41" pos:end="133:45"><name pos:start="133:41" pos:end="133:43">blk</name><operator pos:start="133:44" pos:end="133:45">++</operator></expr></incr>)</control> <block pos:start="133:48" pos:end="313:9">{<block_content pos:start="137:13" pos:end="311:22">

            <comment type="block" pos:start="135:13" pos:end="135:77">/* adjust block position in the buffer according to its number */</comment>

            <if_stmt pos:start="137:13" pos:end="147:13"><if pos:start="137:13" pos:end="141:13">if <condition pos:start="137:16" pos:end="137:24">(<expr pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:19">blk</name> <operator pos:start="137:21" pos:end="137:21">&amp;</operator> <literal type="number" pos:start="137:23" pos:end="137:23">1</literal></expr>)</condition> <block pos:start="137:26" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:37">

                <expr_stmt pos:start="139:17" pos:end="139:37"><expr pos:start="139:17" pos:end="139:36"><name pos:start="139:17" pos:end="139:24">buf_offs</name> <operator pos:start="139:26" pos:end="139:27">+=</operator> <name pos:start="139:29" pos:end="139:36">blk_size</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="141:15" pos:end="147:13">else if <condition pos:start="141:23" pos:end="141:32">(<expr pos:start="141:24" pos:end="141:31"><name pos:start="141:24" pos:end="141:26">blk</name> <operator pos:start="141:28" pos:end="141:29">==</operator> <literal type="number" pos:start="141:31" pos:end="141:31">2</literal></expr>)</condition> <block pos:start="141:34" pos:end="147:13">{<block_content pos:start="143:17" pos:end="145:51">

                <expr_stmt pos:start="143:17" pos:end="143:37"><expr pos:start="143:17" pos:end="143:36"><name pos:start="143:17" pos:end="143:24">buf_offs</name> <operator pos:start="143:26" pos:end="143:27">-=</operator> <name pos:start="143:29" pos:end="143:36">blk_size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:51"><expr pos:start="145:17" pos:end="145:50"><name pos:start="145:17" pos:end="145:24">buf_offs</name> <operator pos:start="145:26" pos:end="145:27">+=</operator> <name pos:start="145:29" pos:end="145:36">blk_size</name> <operator pos:start="145:38" pos:end="145:38">*</operator> <name pos:start="145:40" pos:end="145:50"><name pos:start="145:40" pos:end="145:43">band</name><operator pos:start="145:44" pos:end="145:45">-&gt;</operator><name pos:start="145:46" pos:end="145:50">pitch</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="151:13" pos:end="307:13"><if pos:start="151:13" pos:end="285:13">if <condition pos:start="151:16" pos:end="151:24">(<expr pos:start="151:17" pos:end="151:23"><name pos:start="151:17" pos:end="151:19">cbp</name> <operator pos:start="151:21" pos:end="151:21">&amp;</operator> <literal type="number" pos:start="151:23" pos:end="151:23">1</literal></expr>)</condition> <block pos:start="151:26" pos:end="285:13">{<block_content pos:start="153:17" pos:end="283:61"> <comment type="block" pos:start="151:28" pos:end="151:46">/* block coded ? */</comment>

                <if_stmt pos:start="153:17" pos:end="159:17"><if pos:start="153:17" pos:end="159:17">if <condition pos:start="153:20" pos:end="153:32">(<expr pos:start="153:21" pos:end="153:31"><operator pos:start="153:21" pos:end="153:21">!</operator><name pos:start="153:22" pos:end="153:31"><name pos:start="153:22" pos:end="153:25">band</name><operator pos:start="153:26" pos:end="153:27">-&gt;</operator><name pos:start="153:28" pos:end="153:31">scan</name></name></expr>)</condition> <block pos:start="153:34" pos:end="159:17">{<block_content pos:start="155:21" pos:end="157:47">

                    <expr_stmt pos:start="155:21" pos:end="155:78"><expr pos:start="155:21" pos:end="155:77"><call pos:start="155:21" pos:end="155:77"><name pos:start="155:21" pos:end="155:26">av_log</name><argument_list pos:start="155:27" pos:end="155:77">(<argument pos:start="155:28" pos:end="155:32"><expr pos:start="155:28" pos:end="155:32"><name pos:start="155:28" pos:end="155:32">avctx</name></expr></argument>, <argument pos:start="155:35" pos:end="155:46"><expr pos:start="155:35" pos:end="155:46"><name pos:start="155:35" pos:end="155:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:49" pos:end="155:76"><expr pos:start="155:49" pos:end="155:76"><literal type="string" pos:start="155:49" pos:end="155:76">"Scan pattern is not set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="157:21" pos:end="157:47">return <expr pos:start="157:28" pos:end="157:46"><name pos:start="157:28" pos:end="157:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="163:17" pos:end="163:30"><expr pos:start="163:17" pos:end="163:29"><name pos:start="163:17" pos:end="163:24">scan_pos</name> <operator pos:start="163:26" pos:end="163:26">=</operator> <operator pos:start="163:28" pos:end="163:28">-</operator><literal type="number" pos:start="163:29" pos:end="163:29">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:62"><expr pos:start="165:17" pos:end="165:61"><call pos:start="165:17" pos:end="165:61"><name pos:start="165:17" pos:end="165:22">memset</name><argument_list pos:start="165:23" pos:end="165:61">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">trvec</name></expr></argument>, <argument pos:start="165:31" pos:end="165:31"><expr pos:start="165:31" pos:end="165:31"><literal type="number" pos:start="165:31" pos:end="165:31">0</literal></expr></argument>, <argument pos:start="165:34" pos:end="165:60"><expr pos:start="165:34" pos:end="165:60"><name pos:start="165:34" pos:end="165:43">num_coeffs</name><operator pos:start="165:44" pos:end="165:44">*</operator><sizeof pos:start="165:45" pos:end="165:60">sizeof<argument_list pos:start="165:51" pos:end="165:60">(<argument pos:start="165:52" pos:end="165:59"><expr pos:start="165:52" pos:end="165:59"><name pos:start="165:52" pos:end="165:59"><name pos:start="165:52" pos:end="165:56">trvec</name><index pos:start="165:57" pos:end="165:59">[<expr pos:start="165:58" pos:end="165:58"><literal type="number" pos:start="165:58" pos:end="165:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="165:64" pos:end="165:90">/* zero transform vector */</comment>

                <expr_stmt pos:start="167:17" pos:end="167:56"><expr pos:start="167:17" pos:end="167:55"><call pos:start="167:17" pos:end="167:55"><name pos:start="167:17" pos:end="167:22">memset</name><argument_list pos:start="167:23" pos:end="167:55">(<argument pos:start="167:24" pos:end="167:32"><expr pos:start="167:24" pos:end="167:32"><name pos:start="167:24" pos:end="167:32">col_flags</name></expr></argument>, <argument pos:start="167:35" pos:end="167:35"><expr pos:start="167:35" pos:end="167:35"><literal type="number" pos:start="167:35" pos:end="167:35">0</literal></expr></argument>, <argument pos:start="167:38" pos:end="167:54"><expr pos:start="167:38" pos:end="167:54"><sizeof pos:start="167:38" pos:end="167:54">sizeof<argument_list pos:start="167:44" pos:end="167:54">(<argument pos:start="167:45" pos:end="167:53"><expr pos:start="167:45" pos:end="167:53"><name pos:start="167:45" pos:end="167:53">col_flags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="167:63" pos:end="167:85">/* zero column flags */</comment>



                <while pos:start="171:17" pos:end="237:17">while <condition pos:start="171:23" pos:end="171:46">(<expr pos:start="171:24" pos:end="171:45"><name pos:start="171:24" pos:end="171:31">scan_pos</name> <operator pos:start="171:33" pos:end="171:34">&lt;=</operator> <name pos:start="171:36" pos:end="171:45">num_coeffs</name></expr>)</condition> <block pos:start="171:48" pos:end="237:17">{<block_content pos:start="173:21" pos:end="235:55">

                    <expr_stmt pos:start="173:21" pos:end="173:82"><expr pos:start="173:21" pos:end="173:81"><name pos:start="173:21" pos:end="173:23">sym</name> <operator pos:start="173:25" pos:end="173:25">=</operator> <call pos:start="173:27" pos:end="173:81"><name pos:start="173:27" pos:end="173:34">get_vlc2</name><argument_list pos:start="173:35" pos:end="173:81">(<argument pos:start="173:36" pos:end="173:37"><expr pos:start="173:36" pos:end="173:37"><name pos:start="173:36" pos:end="173:37">gb</name></expr></argument>, <argument pos:start="173:40" pos:end="173:63"><expr pos:start="173:40" pos:end="173:63"><name pos:start="173:40" pos:end="173:63"><name pos:start="173:40" pos:end="173:43">band</name><operator pos:start="173:44" pos:end="173:45">-&gt;</operator><name pos:start="173:46" pos:end="173:52">blk_vlc</name><operator pos:start="173:53" pos:end="173:53">.</operator><name pos:start="173:54" pos:end="173:56">tab</name><operator pos:start="173:57" pos:end="173:58">-&gt;</operator><name pos:start="173:59" pos:end="173:63">table</name></name></expr></argument>, <argument pos:start="173:66" pos:end="173:77"><expr pos:start="173:66" pos:end="173:77"><name pos:start="173:66" pos:end="173:77">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="173:80" pos:end="173:80"><expr pos:start="173:80" pos:end="173:80"><literal type="number" pos:start="173:80" pos:end="173:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="175:21" pos:end="177:30"><if pos:start="175:21" pos:end="177:30">if <condition pos:start="175:24" pos:end="175:46">(<expr pos:start="175:25" pos:end="175:45"><name pos:start="175:25" pos:end="175:27">sym</name> <operator pos:start="175:29" pos:end="175:30">==</operator> <name pos:start="175:32" pos:end="175:45"><name pos:start="175:32" pos:end="175:36">rvmap</name><operator pos:start="175:37" pos:end="175:38">-&gt;</operator><name pos:start="175:39" pos:end="175:45">eob_sym</name></name></expr>)</condition><block type="pseudo" pos:start="177:25" pos:end="177:30"><block_content pos:start="177:25" pos:end="177:30">

                        <break pos:start="177:25" pos:end="177:30">break;</break></block_content></block></if></if_stmt> <comment type="block" pos:start="177:32" pos:end="177:49">/* End of block */</comment>



                    <if_stmt pos:start="181:21" pos:end="205:21"><if pos:start="181:21" pos:end="191:21">if <condition pos:start="181:24" pos:end="181:46">(<expr pos:start="181:25" pos:end="181:45"><name pos:start="181:25" pos:end="181:27">sym</name> <operator pos:start="181:29" pos:end="181:30">==</operator> <name pos:start="181:32" pos:end="181:45"><name pos:start="181:32" pos:end="181:36">rvmap</name><operator pos:start="181:37" pos:end="181:38">-&gt;</operator><name pos:start="181:39" pos:end="181:45">esc_sym</name></name></expr>)</condition> <block pos:start="181:48" pos:end="191:21">{<block_content pos:start="183:25" pos:end="189:59"> <comment type="block" pos:start="181:50" pos:end="181:106">/* Escape - run/val explicitly coded using 3 vlc codes */</comment>

                        <expr_stmt pos:start="183:25" pos:end="183:90"><expr pos:start="183:25" pos:end="183:89"><name pos:start="183:25" pos:end="183:27">run</name> <operator pos:start="183:29" pos:end="183:29">=</operator> <call pos:start="183:31" pos:end="183:85"><name pos:start="183:31" pos:end="183:38">get_vlc2</name><argument_list pos:start="183:39" pos:end="183:85">(<argument pos:start="183:40" pos:end="183:41"><expr pos:start="183:40" pos:end="183:41"><name pos:start="183:40" pos:end="183:41">gb</name></expr></argument>, <argument pos:start="183:44" pos:end="183:67"><expr pos:start="183:44" pos:end="183:67"><name pos:start="183:44" pos:end="183:67"><name pos:start="183:44" pos:end="183:47">band</name><operator pos:start="183:48" pos:end="183:49">-&gt;</operator><name pos:start="183:50" pos:end="183:56">blk_vlc</name><operator pos:start="183:57" pos:end="183:57">.</operator><name pos:start="183:58" pos:end="183:60">tab</name><operator pos:start="183:61" pos:end="183:62">-&gt;</operator><name pos:start="183:63" pos:end="183:67">table</name></name></expr></argument>, <argument pos:start="183:70" pos:end="183:81"><expr pos:start="183:70" pos:end="183:81"><name pos:start="183:70" pos:end="183:81">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="183:84" pos:end="183:84"><expr pos:start="183:84" pos:end="183:84"><literal type="number" pos:start="183:84" pos:end="183:84">1</literal></expr></argument>)</argument_list></call> <operator pos:start="183:87" pos:end="183:87">+</operator> <literal type="number" pos:start="183:89" pos:end="183:89">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="185:25" pos:end="185:86"><expr pos:start="185:25" pos:end="185:85"><name pos:start="185:25" pos:end="185:26">lo</name>  <operator pos:start="185:29" pos:end="185:29">=</operator> <call pos:start="185:31" pos:end="185:85"><name pos:start="185:31" pos:end="185:38">get_vlc2</name><argument_list pos:start="185:39" pos:end="185:85">(<argument pos:start="185:40" pos:end="185:41"><expr pos:start="185:40" pos:end="185:41"><name pos:start="185:40" pos:end="185:41">gb</name></expr></argument>, <argument pos:start="185:44" pos:end="185:67"><expr pos:start="185:44" pos:end="185:67"><name pos:start="185:44" pos:end="185:67"><name pos:start="185:44" pos:end="185:47">band</name><operator pos:start="185:48" pos:end="185:49">-&gt;</operator><name pos:start="185:50" pos:end="185:56">blk_vlc</name><operator pos:start="185:57" pos:end="185:57">.</operator><name pos:start="185:58" pos:end="185:60">tab</name><operator pos:start="185:61" pos:end="185:62">-&gt;</operator><name pos:start="185:63" pos:end="185:67">table</name></name></expr></argument>, <argument pos:start="185:70" pos:end="185:81"><expr pos:start="185:70" pos:end="185:81"><name pos:start="185:70" pos:end="185:81">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="185:84" pos:end="185:84"><expr pos:start="185:84" pos:end="185:84"><literal type="number" pos:start="185:84" pos:end="185:84">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="187:25" pos:end="187:86"><expr pos:start="187:25" pos:end="187:85"><name pos:start="187:25" pos:end="187:26">hi</name>  <operator pos:start="187:29" pos:end="187:29">=</operator> <call pos:start="187:31" pos:end="187:85"><name pos:start="187:31" pos:end="187:38">get_vlc2</name><argument_list pos:start="187:39" pos:end="187:85">(<argument pos:start="187:40" pos:end="187:41"><expr pos:start="187:40" pos:end="187:41"><name pos:start="187:40" pos:end="187:41">gb</name></expr></argument>, <argument pos:start="187:44" pos:end="187:67"><expr pos:start="187:44" pos:end="187:67"><name pos:start="187:44" pos:end="187:67"><name pos:start="187:44" pos:end="187:47">band</name><operator pos:start="187:48" pos:end="187:49">-&gt;</operator><name pos:start="187:50" pos:end="187:56">blk_vlc</name><operator pos:start="187:57" pos:end="187:57">.</operator><name pos:start="187:58" pos:end="187:60">tab</name><operator pos:start="187:61" pos:end="187:62">-&gt;</operator><name pos:start="187:63" pos:end="187:67">table</name></name></expr></argument>, <argument pos:start="187:70" pos:end="187:81"><expr pos:start="187:70" pos:end="187:81"><name pos:start="187:70" pos:end="187:81">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="187:84" pos:end="187:84"><expr pos:start="187:84" pos:end="187:84"><literal type="number" pos:start="187:84" pos:end="187:84">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="189:25" pos:end="189:59"><expr pos:start="189:25" pos:end="189:58"><name pos:start="189:25" pos:end="189:27">val</name> <operator pos:start="189:29" pos:end="189:29">=</operator> <call pos:start="189:31" pos:end="189:58"><name pos:start="189:31" pos:end="189:42">IVI_TOSIGNED</name><argument_list pos:start="189:43" pos:end="189:58">(<argument pos:start="189:44" pos:end="189:57"><expr pos:start="189:44" pos:end="189:57"><operator pos:start="189:44" pos:end="189:44">(</operator><name pos:start="189:45" pos:end="189:46">hi</name> <operator pos:start="189:48" pos:end="189:49">&lt;&lt;</operator> <literal type="number" pos:start="189:51" pos:end="189:51">6</literal><operator pos:start="189:52" pos:end="189:52">)</operator> <operator pos:start="189:54" pos:end="189:54">|</operator> <name pos:start="189:56" pos:end="189:57">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="189:61" pos:end="189:104">/* merge them and convert into signed val */</comment>

                    </block_content>}</block></if> <else pos:start="191:23" pos:end="205:21">else <block pos:start="191:28" pos:end="205:21">{<block_content pos:start="193:25" pos:end="203:49">

                        <if_stmt pos:start="193:25" pos:end="199:25"><if pos:start="193:25" pos:end="199:25">if <condition pos:start="193:28" pos:end="193:40">(<expr pos:start="193:29" pos:end="193:39"><name pos:start="193:29" pos:end="193:31">sym</name> <operator pos:start="193:33" pos:end="193:34">&gt;=</operator> <literal type="number" pos:start="193:36" pos:end="193:39">256U</literal></expr>)</condition> <block pos:start="193:42" pos:end="199:25">{<block_content pos:start="195:29" pos:end="197:38">

                            <expr_stmt pos:start="195:29" pos:end="195:95"><expr pos:start="195:29" pos:end="195:94"><call pos:start="195:29" pos:end="195:94"><name pos:start="195:29" pos:end="195:34">av_log</name><argument_list pos:start="195:35" pos:end="195:94">(<argument pos:start="195:36" pos:end="195:40"><expr pos:start="195:36" pos:end="195:40"><name pos:start="195:36" pos:end="195:40">avctx</name></expr></argument>, <argument pos:start="195:43" pos:end="195:54"><expr pos:start="195:43" pos:end="195:54"><name pos:start="195:43" pos:end="195:54">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="195:57" pos:end="195:88"><expr pos:start="195:57" pos:end="195:88"><literal type="string" pos:start="195:57" pos:end="195:88">"Invalid sym encountered: %d.\n"</literal></expr></argument>, <argument pos:start="195:91" pos:end="195:93"><expr pos:start="195:91" pos:end="195:93"><name pos:start="195:91" pos:end="195:93">sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="197:29" pos:end="197:38">return <expr pos:start="197:36" pos:end="197:37"><operator pos:start="197:36" pos:end="197:36">-</operator><literal type="number" pos:start="197:37" pos:end="197:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="201:25" pos:end="201:49"><expr pos:start="201:25" pos:end="201:48"><name pos:start="201:25" pos:end="201:27">run</name> <operator pos:start="201:29" pos:end="201:29">=</operator> <name pos:start="201:31" pos:end="201:48"><name pos:start="201:31" pos:end="201:35">rvmap</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:43">runtab</name><index pos:start="201:44" pos:end="201:48">[<expr pos:start="201:45" pos:end="201:47"><name pos:start="201:45" pos:end="201:47">sym</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="203:25" pos:end="203:49"><expr pos:start="203:25" pos:end="203:48"><name pos:start="203:25" pos:end="203:27">val</name> <operator pos:start="203:29" pos:end="203:29">=</operator> <name pos:start="203:31" pos:end="203:48"><name pos:start="203:31" pos:end="203:35">rvmap</name><operator pos:start="203:36" pos:end="203:37">-&gt;</operator><name pos:start="203:38" pos:end="203:43">valtab</name><index pos:start="203:44" pos:end="203:48">[<expr pos:start="203:45" pos:end="203:47"><name pos:start="203:45" pos:end="203:47">sym</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <comment type="block" pos:start="209:21" pos:end="209:50">/* de-zigzag and dequantize */</comment>

                    <expr_stmt pos:start="211:21" pos:end="211:36"><expr pos:start="211:21" pos:end="211:35"><name pos:start="211:21" pos:end="211:28">scan_pos</name> <operator pos:start="211:30" pos:end="211:31">+=</operator> <name pos:start="211:33" pos:end="211:35">run</name></expr>;</expr_stmt>

                    <if_stmt pos:start="213:21" pos:end="215:30"><if pos:start="213:21" pos:end="215:30">if <condition pos:start="213:24" pos:end="213:57">(<expr pos:start="213:25" pos:end="213:56"><name pos:start="213:25" pos:end="213:32">scan_pos</name> <operator pos:start="213:34" pos:end="213:35">&gt;=</operator> <operator pos:start="213:37" pos:end="213:37">(</operator><name pos:start="213:38" pos:end="213:45">unsigned</name><operator pos:start="213:46" pos:end="213:46">)</operator><name pos:start="213:47" pos:end="213:56">num_coeffs</name></expr>)</condition><block type="pseudo" pos:start="215:25" pos:end="215:30"><block_content pos:start="215:25" pos:end="215:30">

                        <break pos:start="215:25" pos:end="215:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:47"><expr pos:start="217:21" pos:end="217:46"><name pos:start="217:21" pos:end="217:23">pos</name> <operator pos:start="217:25" pos:end="217:25">=</operator> <name pos:start="217:27" pos:end="217:46"><name pos:start="217:27" pos:end="217:30">band</name><operator pos:start="217:31" pos:end="217:32">-&gt;</operator><name pos:start="217:33" pos:end="217:36">scan</name><index pos:start="217:37" pos:end="217:46">[<expr pos:start="217:38" pos:end="217:45"><name pos:start="217:38" pos:end="217:45">scan_pos</name></expr>]</index></name></expr>;</expr_stmt>



                    <if_stmt pos:start="221:21" pos:end="223:65"><if pos:start="221:21" pos:end="223:65">if <condition pos:start="221:24" pos:end="221:29">(<expr pos:start="221:25" pos:end="221:28"><operator pos:start="221:25" pos:end="221:25">!</operator><name pos:start="221:26" pos:end="221:28">val</name></expr>)</condition><block type="pseudo" pos:start="223:25" pos:end="223:65"><block_content pos:start="223:25" pos:end="223:65">

                        <expr_stmt pos:start="223:25" pos:end="223:65"><expr pos:start="223:25" pos:end="223:64"><call pos:start="223:25" pos:end="223:64"><name pos:start="223:25" pos:end="223:31">av_dlog</name><argument_list pos:start="223:32" pos:end="223:64">(<argument pos:start="223:33" pos:end="223:37"><expr pos:start="223:33" pos:end="223:37"><name pos:start="223:33" pos:end="223:37">avctx</name></expr></argument>, <argument pos:start="223:40" pos:end="223:63"><expr pos:start="223:40" pos:end="223:63"><literal type="string" pos:start="223:40" pos:end="223:63">"Val = 0 encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="227:21" pos:end="227:53"><expr pos:start="227:21" pos:end="227:52"><name pos:start="227:21" pos:end="227:21">q</name> <operator pos:start="227:23" pos:end="227:23">=</operator> <operator pos:start="227:25" pos:end="227:25">(</operator><name pos:start="227:26" pos:end="227:38"><name pos:start="227:26" pos:end="227:33">base_tab</name><index pos:start="227:34" pos:end="227:38">[<expr pos:start="227:35" pos:end="227:37"><name pos:start="227:35" pos:end="227:37">pos</name></expr>]</index></name> <operator pos:start="227:40" pos:end="227:40">*</operator> <name pos:start="227:42" pos:end="227:46">quant</name><operator pos:start="227:47" pos:end="227:47">)</operator> <operator pos:start="227:49" pos:end="227:50">&gt;&gt;</operator> <literal type="number" pos:start="227:52" pos:end="227:52">9</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="229:21" pos:end="231:75"><if pos:start="229:21" pos:end="231:75">if <condition pos:start="229:24" pos:end="229:30">(<expr pos:start="229:25" pos:end="229:29"><name pos:start="229:25" pos:end="229:25">q</name> <operator pos:start="229:27" pos:end="229:27">&gt;</operator> <literal type="number" pos:start="229:29" pos:end="229:29">1</literal></expr>)</condition><block type="pseudo" pos:start="231:25" pos:end="231:75"><block_content pos:start="231:25" pos:end="231:75">

                        <expr_stmt pos:start="231:25" pos:end="231:75"><expr pos:start="231:25" pos:end="231:74"><name pos:start="231:25" pos:end="231:27">val</name> <operator pos:start="231:29" pos:end="231:29">=</operator> <name pos:start="231:31" pos:end="231:33">val</name> <operator pos:start="231:35" pos:end="231:35">*</operator> <name pos:start="231:37" pos:end="231:37">q</name> <operator pos:start="231:39" pos:end="231:39">+</operator> <call pos:start="231:41" pos:end="231:51"><name pos:start="231:41" pos:end="231:46">FFSIGN</name><argument_list pos:start="231:47" pos:end="231:51">(<argument pos:start="231:48" pos:end="231:50"><expr pos:start="231:48" pos:end="231:50"><name pos:start="231:48" pos:end="231:50">val</name></expr></argument>)</argument_list></call> <operator pos:start="231:53" pos:end="231:53">*</operator> <operator pos:start="231:55" pos:end="231:55">(</operator><operator pos:start="231:56" pos:end="231:56">(</operator><operator pos:start="231:57" pos:end="231:57">(</operator><name pos:start="231:58" pos:end="231:58">q</name> <operator pos:start="231:60" pos:end="231:60">^</operator> <literal type="number" pos:start="231:62" pos:end="231:62">1</literal><operator pos:start="231:63" pos:end="231:63">)</operator> <operator pos:start="231:65" pos:end="231:65">-</operator> <literal type="number" pos:start="231:67" pos:end="231:67">1</literal><operator pos:start="231:68" pos:end="231:68">)</operator> <operator pos:start="231:70" pos:end="231:71">&gt;&gt;</operator> <literal type="number" pos:start="231:73" pos:end="231:73">1</literal><operator pos:start="231:74" pos:end="231:74">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:37"><expr pos:start="233:21" pos:end="233:36"><name pos:start="233:21" pos:end="233:30"><name pos:start="233:21" pos:end="233:25">trvec</name><index pos:start="233:26" pos:end="233:30">[<expr pos:start="233:27" pos:end="233:29"><name pos:start="233:27" pos:end="233:29">pos</name></expr>]</index></name> <operator pos:start="233:32" pos:end="233:32">=</operator> <name pos:start="233:34" pos:end="233:36">val</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:55"><expr pos:start="235:21" pos:end="235:54"><name pos:start="235:21" pos:end="235:45"><name pos:start="235:21" pos:end="235:29">col_flags</name><index pos:start="235:30" pos:end="235:45">[<expr pos:start="235:31" pos:end="235:44"><name pos:start="235:31" pos:end="235:33">pos</name> <operator pos:start="235:35" pos:end="235:35">&amp;</operator> <name pos:start="235:37" pos:end="235:44">col_mask</name></expr>]</index></name> <operator pos:start="235:47" pos:end="235:48">|=</operator> <operator pos:start="235:50" pos:end="235:50">!</operator><operator pos:start="235:51" pos:end="235:51">!</operator><name pos:start="235:52" pos:end="235:54">val</name></expr>;</expr_stmt> <comment type="block" pos:start="235:57" pos:end="235:102">/* track columns containing non-zero coeffs */</comment>

                </block_content>}</block></while><comment type="line" pos:start="237:18" pos:end="237:25">// while</comment>



                <if_stmt pos:start="241:17" pos:end="243:30"><if pos:start="241:17" pos:end="243:30">if <condition pos:start="241:20" pos:end="241:68">(<expr pos:start="241:21" pos:end="241:67"><name pos:start="241:21" pos:end="241:28">scan_pos</name> <operator pos:start="241:30" pos:end="241:31">&gt;=</operator> <name pos:start="241:33" pos:end="241:42">num_coeffs</name> <operator pos:start="241:44" pos:end="241:45">&amp;&amp;</operator> <name pos:start="241:47" pos:end="241:49">sym</name> <operator pos:start="241:51" pos:end="241:52">!=</operator> <name pos:start="241:54" pos:end="241:67"><name pos:start="241:54" pos:end="241:58">rvmap</name><operator pos:start="241:59" pos:end="241:60">-&gt;</operator><name pos:start="241:61" pos:end="241:67">eob_sym</name></name></expr>)</condition><block type="pseudo" pos:start="243:21" pos:end="243:30"><block_content pos:start="243:21" pos:end="243:30">

                    <return pos:start="243:21" pos:end="243:30">return <expr pos:start="243:28" pos:end="243:29"><operator pos:start="243:28" pos:end="243:28">-</operator><literal type="number" pos:start="243:29" pos:end="243:29">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="243:32" pos:end="243:55">/* corrupt block data */</comment>



                <comment type="block" pos:start="247:17" pos:end="247:66">/* undoing DC coeff prediction for intra-blocks */</comment>

                <if_stmt pos:start="249:17" pos:end="257:17"><if pos:start="249:17" pos:end="257:17">if <condition pos:start="249:20" pos:end="249:50">(<expr pos:start="249:21" pos:end="249:49"><name pos:start="249:21" pos:end="249:28">is_intra</name> <operator pos:start="249:30" pos:end="249:31">&amp;&amp;</operator> <name pos:start="249:33" pos:end="249:49"><name pos:start="249:33" pos:end="249:36">band</name><operator pos:start="249:37" pos:end="249:38">-&gt;</operator><name pos:start="249:39" pos:end="249:49">is_2d_trans</name></name></expr>)</condition> <block pos:start="249:52" pos:end="257:17">{<block_content pos:start="251:21" pos:end="255:46">

                    <expr_stmt pos:start="251:21" pos:end="251:45"><expr pos:start="251:21" pos:end="251:44"><name pos:start="251:21" pos:end="251:27">prev_dc</name>      <operator pos:start="251:34" pos:end="251:35">+=</operator> <name pos:start="251:37" pos:end="251:44"><name pos:start="251:37" pos:end="251:41">trvec</name><index pos:start="251:42" pos:end="251:44">[<expr pos:start="251:43" pos:end="251:43"><literal type="number" pos:start="251:43" pos:end="251:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="253:21" pos:end="253:44"><expr pos:start="253:21" pos:end="253:43"><name pos:start="253:21" pos:end="253:28"><name pos:start="253:21" pos:end="253:25">trvec</name><index pos:start="253:26" pos:end="253:28">[<expr pos:start="253:27" pos:end="253:27"><literal type="number" pos:start="253:27" pos:end="253:27">0</literal></expr>]</index></name>      <operator pos:start="253:35" pos:end="253:35">=</operator> <name pos:start="253:37" pos:end="253:43">prev_dc</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="255:21" pos:end="255:46"><expr pos:start="255:21" pos:end="255:45"><name pos:start="255:21" pos:end="255:32"><name pos:start="255:21" pos:end="255:29">col_flags</name><index pos:start="255:30" pos:end="255:32">[<expr pos:start="255:31" pos:end="255:31"><literal type="number" pos:start="255:31" pos:end="255:31">0</literal></expr>]</index></name> <operator pos:start="255:34" pos:end="255:35">|=</operator> <operator pos:start="255:37" pos:end="255:37">!</operator><operator pos:start="255:38" pos:end="255:38">!</operator><name pos:start="255:39" pos:end="255:45">prev_dc</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="259:17" pos:end="265:17"><if pos:start="259:17" pos:end="265:17">if<condition pos:start="259:19" pos:end="259:57">(<expr pos:start="259:20" pos:end="259:56"><name pos:start="259:20" pos:end="259:39"><name pos:start="259:20" pos:end="259:23">band</name><operator pos:start="259:24" pos:end="259:25">-&gt;</operator><name pos:start="259:26" pos:end="259:39">transform_size</name></name> <operator pos:start="259:41" pos:end="259:41">&gt;</operator> <name pos:start="259:43" pos:end="259:56"><name pos:start="259:43" pos:end="259:46">band</name><operator pos:start="259:47" pos:end="259:48">-&gt;</operator><name pos:start="259:49" pos:end="259:56">blk_size</name></name></expr>)</condition><block pos:start="259:58" pos:end="265:17">{<block_content pos:start="261:21" pos:end="263:47">

                    <expr_stmt pos:start="261:21" pos:end="261:72"><expr pos:start="261:21" pos:end="261:71"><call pos:start="261:21" pos:end="261:71"><name pos:start="261:21" pos:end="261:26">av_log</name><argument_list pos:start="261:27" pos:end="261:71">(<argument pos:start="261:28" pos:end="261:31"><expr pos:start="261:28" pos:end="261:31"><name pos:start="261:28" pos:end="261:31">NULL</name></expr></argument>, <argument pos:start="261:34" pos:end="261:45"><expr pos:start="261:34" pos:end="261:45"><name pos:start="261:34" pos:end="261:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="261:48" pos:end="261:70"><expr pos:start="261:48" pos:end="261:70"><literal type="string" pos:start="261:48" pos:end="261:70">"Too large transform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="263:21" pos:end="263:47">return <expr pos:start="263:28" pos:end="263:46"><name pos:start="263:28" pos:end="263:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="267:17" pos:end="267:45">/* apply inverse transform */</comment>

                <expr_stmt pos:start="269:17" pos:end="271:60"><expr pos:start="269:17" pos:end="271:59"><call pos:start="269:17" pos:end="271:59"><name pos:start="269:17" pos:end="269:35"><name pos:start="269:17" pos:end="269:20">band</name><operator pos:start="269:21" pos:end="269:22">-&gt;</operator><name pos:start="269:23" pos:end="269:35">inv_transform</name></name><argument_list pos:start="269:36" pos:end="271:59">(<argument pos:start="269:37" pos:end="269:41"><expr pos:start="269:37" pos:end="269:41"><name pos:start="269:37" pos:end="269:41">trvec</name></expr></argument>, <argument pos:start="269:44" pos:end="269:63"><expr pos:start="269:44" pos:end="269:63"><name pos:start="269:44" pos:end="269:52"><name pos:start="269:44" pos:end="269:47">band</name><operator pos:start="269:48" pos:end="269:49">-&gt;</operator><name pos:start="269:50" pos:end="269:52">buf</name></name> <operator pos:start="269:54" pos:end="269:54">+</operator> <name pos:start="269:56" pos:end="269:63">buf_offs</name></expr></argument>,

                                    <argument pos:start="271:37" pos:end="271:47"><expr pos:start="271:37" pos:end="271:47"><name pos:start="271:37" pos:end="271:47"><name pos:start="271:37" pos:end="271:40">band</name><operator pos:start="271:41" pos:end="271:42">-&gt;</operator><name pos:start="271:43" pos:end="271:47">pitch</name></name></expr></argument>, <argument pos:start="271:50" pos:end="271:58"><expr pos:start="271:50" pos:end="271:58"><name pos:start="271:50" pos:end="271:58">col_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="275:17" pos:end="275:47">/* apply motion compensation */</comment>

                <if_stmt pos:start="277:17" pos:end="283:61"><if pos:start="277:17" pos:end="283:61">if <condition pos:start="277:20" pos:end="277:30">(<expr pos:start="277:21" pos:end="277:29"><operator pos:start="277:21" pos:end="277:21">!</operator><name pos:start="277:22" pos:end="277:29">is_intra</name></expr>)</condition><block type="pseudo" pos:start="279:21" pos:end="283:61"><block_content pos:start="279:21" pos:end="283:61">

                    <expr_stmt pos:start="279:21" pos:end="283:61"><expr pos:start="279:21" pos:end="283:60"><call pos:start="279:21" pos:end="283:60"><name pos:start="279:21" pos:end="279:38">mc_with_delta_func</name><argument_list pos:start="279:39" pos:end="283:60">(<argument pos:start="279:40" pos:end="279:59"><expr pos:start="279:40" pos:end="279:59"><name pos:start="279:40" pos:end="279:48"><name pos:start="279:40" pos:end="279:43">band</name><operator pos:start="279:44" pos:end="279:45">-&gt;</operator><name pos:start="279:46" pos:end="279:48">buf</name></name> <operator pos:start="279:50" pos:end="279:50">+</operator> <name pos:start="279:52" pos:end="279:59">buf_offs</name></expr></argument>,

                                       <argument pos:start="281:40" pos:end="281:91"><expr pos:start="281:40" pos:end="281:91"><name pos:start="281:40" pos:end="281:52"><name pos:start="281:40" pos:end="281:43">band</name><operator pos:start="281:44" pos:end="281:45">-&gt;</operator><name pos:start="281:46" pos:end="281:52">ref_buf</name></name> <operator pos:start="281:54" pos:end="281:54">+</operator> <name pos:start="281:56" pos:end="281:63">buf_offs</name> <operator pos:start="281:65" pos:end="281:65">+</operator> <name pos:start="281:67" pos:end="281:70">mv_y</name> <operator pos:start="281:72" pos:end="281:72">*</operator> <name pos:start="281:74" pos:end="281:84"><name pos:start="281:74" pos:end="281:77">band</name><operator pos:start="281:78" pos:end="281:79">-&gt;</operator><name pos:start="281:80" pos:end="281:84">pitch</name></name> <operator pos:start="281:86" pos:end="281:86">+</operator> <name pos:start="281:88" pos:end="281:91">mv_x</name></expr></argument>,

                                       <argument pos:start="283:40" pos:end="283:50"><expr pos:start="283:40" pos:end="283:50"><name pos:start="283:40" pos:end="283:50"><name pos:start="283:40" pos:end="283:43">band</name><operator pos:start="283:44" pos:end="283:45">-&gt;</operator><name pos:start="283:46" pos:end="283:50">pitch</name></name></expr></argument>, <argument pos:start="283:53" pos:end="283:59"><expr pos:start="283:53" pos:end="283:59"><name pos:start="283:53" pos:end="283:59">mc_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="285:15" pos:end="307:13">else <block pos:start="285:20" pos:end="307:13">{<block_content pos:start="293:17" pos:end="305:59">

                <comment type="block" pos:start="287:17" pos:end="287:37">/* block not coded */</comment>

                <comment type="block" pos:start="289:17" pos:end="289:67">/* for intra blocks apply the dc slant transform */</comment>

                <comment type="block" pos:start="291:17" pos:end="291:79">/* for inter - perform the motion compensation without delta */</comment>

                <if_stmt pos:start="293:17" pos:end="305:59"><if pos:start="293:17" pos:end="299:17">if <condition pos:start="293:20" pos:end="293:29">(<expr pos:start="293:21" pos:end="293:28"><name pos:start="293:21" pos:end="293:28">is_intra</name></expr>)</condition> <block pos:start="293:31" pos:end="299:17">{<block_content pos:start="295:21" pos:end="297:62">

                    <expr_stmt pos:start="295:21" pos:end="297:62"><expr pos:start="295:21" pos:end="297:61"><call pos:start="295:21" pos:end="297:61"><name pos:start="295:21" pos:end="295:38"><name pos:start="295:21" pos:end="295:24">band</name><operator pos:start="295:25" pos:end="295:26">-&gt;</operator><name pos:start="295:27" pos:end="295:38">dc_transform</name></name><argument_list pos:start="295:39" pos:end="297:61">(<argument pos:start="295:40" pos:end="295:47"><expr pos:start="295:40" pos:end="295:47"><operator pos:start="295:40" pos:end="295:40">&amp;</operator><name pos:start="295:41" pos:end="295:47">prev_dc</name></expr></argument>, <argument pos:start="295:50" pos:end="295:69"><expr pos:start="295:50" pos:end="295:69"><name pos:start="295:50" pos:end="295:58"><name pos:start="295:50" pos:end="295:53">band</name><operator pos:start="295:54" pos:end="295:55">-&gt;</operator><name pos:start="295:56" pos:end="295:58">buf</name></name> <operator pos:start="295:60" pos:end="295:60">+</operator> <name pos:start="295:62" pos:end="295:69">buf_offs</name></expr></argument>,

                                       <argument pos:start="297:40" pos:end="297:50"><expr pos:start="297:40" pos:end="297:50"><name pos:start="297:40" pos:end="297:50"><name pos:start="297:40" pos:end="297:43">band</name><operator pos:start="297:44" pos:end="297:45">-&gt;</operator><name pos:start="297:46" pos:end="297:50">pitch</name></name></expr></argument>, <argument pos:start="297:53" pos:end="297:60"><expr pos:start="297:53" pos:end="297:60"><name pos:start="297:53" pos:end="297:60">blk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="299:19" pos:end="305:59">else<block type="pseudo" pos:start="301:21" pos:end="305:59"><block_content pos:start="301:21" pos:end="305:59">

                    <expr_stmt pos:start="301:21" pos:end="305:59"><expr pos:start="301:21" pos:end="305:58"><call pos:start="301:21" pos:end="305:58"><name pos:start="301:21" pos:end="301:36">mc_no_delta_func</name><argument_list pos:start="301:37" pos:end="305:58">(<argument pos:start="301:38" pos:end="301:57"><expr pos:start="301:38" pos:end="301:57"><name pos:start="301:38" pos:end="301:46"><name pos:start="301:38" pos:end="301:41">band</name><operator pos:start="301:42" pos:end="301:43">-&gt;</operator><name pos:start="301:44" pos:end="301:46">buf</name></name> <operator pos:start="301:48" pos:end="301:48">+</operator> <name pos:start="301:50" pos:end="301:57">buf_offs</name></expr></argument>,

                                     <argument pos:start="303:38" pos:end="303:89"><expr pos:start="303:38" pos:end="303:89"><name pos:start="303:38" pos:end="303:50"><name pos:start="303:38" pos:end="303:41">band</name><operator pos:start="303:42" pos:end="303:43">-&gt;</operator><name pos:start="303:44" pos:end="303:50">ref_buf</name></name> <operator pos:start="303:52" pos:end="303:52">+</operator> <name pos:start="303:54" pos:end="303:61">buf_offs</name> <operator pos:start="303:63" pos:end="303:63">+</operator> <name pos:start="303:65" pos:end="303:68">mv_y</name> <operator pos:start="303:70" pos:end="303:70">*</operator> <name pos:start="303:72" pos:end="303:82"><name pos:start="303:72" pos:end="303:75">band</name><operator pos:start="303:76" pos:end="303:77">-&gt;</operator><name pos:start="303:78" pos:end="303:82">pitch</name></name> <operator pos:start="303:84" pos:end="303:84">+</operator> <name pos:start="303:86" pos:end="303:89">mv_x</name></expr></argument>,

                                     <argument pos:start="305:38" pos:end="305:48"><expr pos:start="305:38" pos:end="305:48"><name pos:start="305:38" pos:end="305:48"><name pos:start="305:38" pos:end="305:41">band</name><operator pos:start="305:42" pos:end="305:43">-&gt;</operator><name pos:start="305:44" pos:end="305:48">pitch</name></name></expr></argument>, <argument pos:start="305:51" pos:end="305:57"><expr pos:start="305:51" pos:end="305:57"><name pos:start="305:51" pos:end="305:57">mc_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="311:13" pos:end="311:22"><expr pos:start="311:13" pos:end="311:21"><name pos:start="311:13" pos:end="311:15">cbp</name> <operator pos:start="311:17" pos:end="311:19">&gt;&gt;=</operator> <literal type="number" pos:start="311:21" pos:end="311:21">1</literal></expr>;</expr_stmt>

        </block_content>}</block></for><comment type="line" pos:start="313:10" pos:end="313:19">// for blk</comment>

    </block_content>}</block></for><comment type="line" pos:start="315:6" pos:end="315:15">// for mbn</comment>



    <expr_stmt pos:start="319:5" pos:end="319:23"><expr pos:start="319:5" pos:end="319:22"><call pos:start="319:5" pos:end="319:22"><name pos:start="319:5" pos:end="319:18">align_get_bits</name><argument_list pos:start="319:19" pos:end="319:22">(<argument pos:start="319:20" pos:end="319:21"><expr pos:start="319:20" pos:end="319:21"><name pos:start="319:20" pos:end="319:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="323:5" pos:end="323:13">return <expr pos:start="323:12" pos:end="323:12"><literal type="number" pos:start="323:12" pos:end="323:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
