<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17228.c" pos:tabs="8"><function pos:start="1:1" pos:end="130:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:32">check_physical</name><parameter_list pos:start="1:33" pos:end="3:60">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">CPUPPCState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:60">mmu_ctx_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">ctx</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:45">target_ulong</name></type> <name pos:start="3:47" pos:end="3:51">eaddr</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:59"><decl pos:start="3:54" pos:end="3:59"><type pos:start="3:54" pos:end="3:59"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:59">rw</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="130:1">{<block_content pos:start="7:5" pos:end="128:15">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">in_plb</name></decl>, <decl pos:start="7:17" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:19">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:23"><expr pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:7">ctx</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:14">raddr</name></name> <operator pos:start="11:16" pos:end="11:16">=</operator> <name pos:start="11:18" pos:end="11:22">eaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:7">ctx</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:13">prot</name></name> <operator pos:start="13:15" pos:end="13:15">=</operator> <name pos:start="13:17" pos:end="13:25">PAGE_READ</name> <operator pos:start="13:27" pos:end="13:27">|</operator> <name pos:start="13:29" pos:end="13:37">PAGE_EXEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:12"><expr pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="124:5">switch <condition pos:start="17:12" pos:end="17:27">(<expr pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:15">env</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:26">mmu_model</name></name></expr>)</condition> <block pos:start="17:29" pos:end="124:5">{<block_content pos:start="19:5" pos:end="122:18">

    <case pos:start="19:5" pos:end="19:25">case <expr pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:24">POWERPC_MMU_32B</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:25">case <expr pos:start="21:10" pos:end="21:24"><name pos:start="21:10" pos:end="21:24">POWERPC_MMU_601</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:30">case <expr pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:29">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:31">case <expr pos:start="25:10" pos:end="25:30"><name pos:start="25:10" pos:end="25:30">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:30">case <expr pos:start="27:10" pos:end="27:29"><name pos:start="27:10" pos:end="27:29">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:26">case <expr pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:25">POWERPC_MMU_REAL</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:27">case <expr pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:26">POWERPC_MMU_BOOKE</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:11">ctx</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:17">prot</name></name> <operator pos:start="33:19" pos:end="33:20">|=</operator> <name pos:start="33:22" pos:end="33:31">PAGE_WRITE</name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="38:0">break;</break>

<cpp:if pos:start="37:1" pos:end="37:25">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:25"><call pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:11">defined</name><argument_list pos:start="37:12" pos:end="37:25">(<argument pos:start="37:13" pos:end="37:24"><expr pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="39:5" pos:end="39:25">case <expr pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:24">POWERPC_MMU_620</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:25">case <expr pos:start="41:10" pos:end="41:24"><name pos:start="41:10" pos:end="41:24">POWERPC_MMU_64B</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:26">case <expr pos:start="43:10" pos:end="43:25"><name pos:start="43:10" pos:end="43:25">POWERPC_MMU_2_06</name></expr>:</case>


        <comment type="block" pos:start="46:9" pos:end="46:43">/* Real address are 60 bits long */</comment>

        <expr_stmt pos:start="48:9" pos:end="48:44"><expr pos:start="48:9" pos:end="48:43"><name pos:start="48:9" pos:end="48:18"><name pos:start="48:9" pos:end="48:11">ctx</name><operator pos:start="48:12" pos:end="48:13">-&gt;</operator><name pos:start="48:14" pos:end="48:18">raddr</name></name> <operator pos:start="48:20" pos:end="48:21">&amp;=</operator> <literal type="number" pos:start="48:23" pos:end="48:43">0x0FFFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="50:9" pos:end="50:32"><expr pos:start="50:9" pos:end="50:31"><name pos:start="50:9" pos:end="50:17"><name pos:start="50:9" pos:end="50:11">ctx</name><operator pos:start="50:12" pos:end="50:13">-&gt;</operator><name pos:start="50:14" pos:end="50:17">prot</name></name> <operator pos:start="50:19" pos:end="50:20">|=</operator> <name pos:start="50:22" pos:end="50:31">PAGE_WRITE</name></expr>;</expr_stmt>

        <break pos:start="52:9" pos:end="55:0">break;</break>

<cpp:endif pos:start="54:1" pos:end="54:6">#<cpp:directive pos:start="54:2" pos:end="54:6">endif</cpp:directive></cpp:endif>

    <case pos:start="56:5" pos:end="56:32">case <expr pos:start="56:10" pos:end="56:31"><name pos:start="56:10" pos:end="56:31">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

        <if_stmt pos:start="58:9" pos:end="100:9"><if pos:start="58:9" pos:end="100:9">if <condition pos:start="58:12" pos:end="58:34">(<expr pos:start="58:13" pos:end="58:33"><call pos:start="58:13" pos:end="58:33"><name pos:start="58:13" pos:end="58:20">unlikely</name><argument_list pos:start="58:21" pos:end="58:33">(<argument pos:start="58:22" pos:end="58:32"><expr pos:start="58:22" pos:end="58:32"><name pos:start="58:22" pos:end="58:27">msr_pe</name> <operator pos:start="58:29" pos:end="58:30">!=</operator> <literal type="number" pos:start="58:32" pos:end="58:32">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="58:36" pos:end="100:9">{<block_content pos:start="66:13" pos:end="98:13">

            <comment type="block" pos:start="60:13" pos:end="64:15">/* 403 family add some particular protections,

             * using PBL/PBU registers for accesses with no translation.

             */</comment>

            <expr_stmt pos:start="66:13" pos:end="78:68"><expr pos:start="66:13" pos:end="78:67"><name pos:start="66:13" pos:end="66:18">in_plb</name> <operator pos:start="66:20" pos:end="66:20">=</operator>

                <comment type="block" pos:start="68:17" pos:end="68:40">/* Check PLB validity */</comment>

                <ternary pos:start="70:17" pos:end="78:67"><condition pos:start="70:17" pos:end="78:61"><expr pos:start="70:17" pos:end="78:59"><operator pos:start="70:17" pos:end="70:17">(</operator><name pos:start="70:18" pos:end="70:27"><name pos:start="70:18" pos:end="70:20">env</name><operator pos:start="70:21" pos:end="70:22">-&gt;</operator><name pos:start="70:23" pos:end="70:24">pb</name><index pos:start="70:25" pos:end="70:27">[<expr pos:start="70:26" pos:end="70:26"><literal type="number" pos:start="70:26" pos:end="70:26">0</literal></expr>]</index></name> <operator pos:start="70:29" pos:end="70:29">&lt;</operator> <name pos:start="70:31" pos:end="70:40"><name pos:start="70:31" pos:end="70:33">env</name><operator pos:start="70:34" pos:end="70:35">-&gt;</operator><name pos:start="70:36" pos:end="70:37">pb</name><index pos:start="70:38" pos:end="70:40">[<expr pos:start="70:39" pos:end="70:39"><literal type="number" pos:start="70:39" pos:end="70:39">1</literal></expr>]</index></name> <operator pos:start="70:42" pos:end="70:43">&amp;&amp;</operator>

                 <comment type="block" pos:start="72:18" pos:end="72:46">/* and address in plb area */</comment>

                 <name pos:start="74:18" pos:end="74:22">eaddr</name> <operator pos:start="74:24" pos:end="74:25">&gt;=</operator> <name pos:start="74:27" pos:end="74:36"><name pos:start="74:27" pos:end="74:29">env</name><operator pos:start="74:30" pos:end="74:31">-&gt;</operator><name pos:start="74:32" pos:end="74:33">pb</name><index pos:start="74:34" pos:end="74:36">[<expr pos:start="74:35" pos:end="74:35"><literal type="number" pos:start="74:35" pos:end="74:35">0</literal></expr>]</index></name> <operator pos:start="74:38" pos:end="74:39">&amp;&amp;</operator> <name pos:start="74:41" pos:end="74:45">eaddr</name> <operator pos:start="74:47" pos:end="74:47">&lt;</operator> <name pos:start="74:49" pos:end="74:58"><name pos:start="74:49" pos:end="74:51">env</name><operator pos:start="74:52" pos:end="74:53">-&gt;</operator><name pos:start="74:54" pos:end="74:55">pb</name><index pos:start="74:56" pos:end="74:58">[<expr pos:start="74:57" pos:end="74:57"><literal type="number" pos:start="74:57" pos:end="74:57">1</literal></expr>]</index></name><operator pos:start="74:59" pos:end="74:59">)</operator> <operator pos:start="74:61" pos:end="74:62">||</operator>

                <operator pos:start="76:17" pos:end="76:17">(</operator><name pos:start="76:18" pos:end="76:27"><name pos:start="76:18" pos:end="76:20">env</name><operator pos:start="76:21" pos:end="76:22">-&gt;</operator><name pos:start="76:23" pos:end="76:24">pb</name><index pos:start="76:25" pos:end="76:27">[<expr pos:start="76:26" pos:end="76:26"><literal type="number" pos:start="76:26" pos:end="76:26">2</literal></expr>]</index></name> <operator pos:start="76:29" pos:end="76:29">&lt;</operator> <name pos:start="76:31" pos:end="76:40"><name pos:start="76:31" pos:end="76:33">env</name><operator pos:start="76:34" pos:end="76:35">-&gt;</operator><name pos:start="76:36" pos:end="76:37">pb</name><index pos:start="76:38" pos:end="76:40">[<expr pos:start="76:39" pos:end="76:39"><literal type="number" pos:start="76:39" pos:end="76:39">3</literal></expr>]</index></name> <operator pos:start="76:42" pos:end="76:43">&amp;&amp;</operator>

                 <name pos:start="78:18" pos:end="78:22">eaddr</name> <operator pos:start="78:24" pos:end="78:25">&gt;=</operator> <name pos:start="78:27" pos:end="78:36"><name pos:start="78:27" pos:end="78:29">env</name><operator pos:start="78:30" pos:end="78:31">-&gt;</operator><name pos:start="78:32" pos:end="78:33">pb</name><index pos:start="78:34" pos:end="78:36">[<expr pos:start="78:35" pos:end="78:35"><literal type="number" pos:start="78:35" pos:end="78:35">2</literal></expr>]</index></name> <operator pos:start="78:38" pos:end="78:39">&amp;&amp;</operator> <name pos:start="78:41" pos:end="78:45">eaddr</name> <operator pos:start="78:47" pos:end="78:47">&lt;</operator> <name pos:start="78:49" pos:end="78:58"><name pos:start="78:49" pos:end="78:51">env</name><operator pos:start="78:52" pos:end="78:53">-&gt;</operator><name pos:start="78:54" pos:end="78:55">pb</name><index pos:start="78:56" pos:end="78:58">[<expr pos:start="78:57" pos:end="78:57"><literal type="number" pos:start="78:57" pos:end="78:57">3</literal></expr>]</index></name><operator pos:start="78:59" pos:end="78:59">)</operator></expr> ?</condition><then pos:start="78:63" pos:end="78:63"> <expr pos:start="78:63" pos:end="78:63"><literal type="number" pos:start="78:63" pos:end="78:63">1</literal></expr> </then><else pos:start="78:65" pos:end="78:67">: <expr pos:start="78:67" pos:end="78:67"><literal type="number" pos:start="78:67" pos:end="78:67">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="80:13" pos:end="98:13"><if pos:start="80:13" pos:end="92:13">if <condition pos:start="80:16" pos:end="80:32">(<expr pos:start="80:17" pos:end="80:31"><name pos:start="80:17" pos:end="80:22">in_plb</name> <operator pos:start="80:24" pos:end="80:24">^</operator> <name pos:start="80:26" pos:end="80:31">msr_px</name></expr>)</condition> <block pos:start="80:34" pos:end="92:13">{<block_content pos:start="84:17" pos:end="90:17">

                <comment type="block" pos:start="82:17" pos:end="82:46">/* Access in protected area */</comment>

                <if_stmt pos:start="84:17" pos:end="90:17"><if pos:start="84:17" pos:end="90:17">if <condition pos:start="84:20" pos:end="84:28">(<expr pos:start="84:21" pos:end="84:27"><name pos:start="84:21" pos:end="84:22">rw</name> <operator pos:start="84:24" pos:end="84:25">==</operator> <literal type="number" pos:start="84:27" pos:end="84:27">1</literal></expr>)</condition> <block pos:start="84:30" pos:end="90:17">{<block_content pos:start="88:21" pos:end="88:29">

                    <comment type="block" pos:start="86:21" pos:end="86:47">/* Access is not allowed */</comment>

                    <expr_stmt pos:start="88:21" pos:end="88:29"><expr pos:start="88:21" pos:end="88:28"><name pos:start="88:21" pos:end="88:23">ret</name> <operator pos:start="88:25" pos:end="88:25">=</operator> <operator pos:start="88:27" pos:end="88:27">-</operator><literal type="number" pos:start="88:28" pos:end="88:28">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="92:15" pos:end="98:13">else <block pos:start="92:20" pos:end="98:13">{<block_content pos:start="96:17" pos:end="96:40">

                <comment type="block" pos:start="94:17" pos:end="94:50">/* Read-write access is allowed */</comment>

                <expr_stmt pos:start="96:17" pos:end="96:40"><expr pos:start="96:17" pos:end="96:39"><name pos:start="96:17" pos:end="96:25"><name pos:start="96:17" pos:end="96:19">ctx</name><operator pos:start="96:20" pos:end="96:21">-&gt;</operator><name pos:start="96:22" pos:end="96:25">prot</name></name> <operator pos:start="96:27" pos:end="96:28">|=</operator> <name pos:start="96:30" pos:end="96:39">PAGE_WRITE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="102:9" pos:end="102:14">break;</break>

    <case pos:start="104:5" pos:end="104:28">case <expr pos:start="104:10" pos:end="104:27"><name pos:start="104:10" pos:end="104:27">POWERPC_MMU_MPC8xx</name></expr>:</case>

        <comment type="block" pos:start="106:9" pos:end="106:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="108:9" pos:end="108:64"><expr pos:start="108:9" pos:end="108:63"><call pos:start="108:9" pos:end="108:63"><name pos:start="108:9" pos:end="108:17">cpu_abort</name><argument_list pos:start="108:18" pos:end="108:63">(<argument pos:start="108:19" pos:end="108:21"><expr pos:start="108:19" pos:end="108:21"><name pos:start="108:19" pos:end="108:21">env</name></expr></argument>, <argument pos:start="108:24" pos:end="108:62"><expr pos:start="108:24" pos:end="108:62"><literal type="string" pos:start="108:24" pos:end="108:62">"MPC8xx MMU model is not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="110:9" pos:end="110:14">break;</break>

    <case pos:start="112:5" pos:end="112:30">case <expr pos:start="112:10" pos:end="112:29"><name pos:start="112:10" pos:end="112:29">POWERPC_MMU_BOOKE206</name></expr>:</case>

        <expr_stmt pos:start="114:9" pos:end="114:75"><expr pos:start="114:9" pos:end="114:74"><call pos:start="114:9" pos:end="114:74"><name pos:start="114:9" pos:end="114:17">cpu_abort</name><argument_list pos:start="114:18" pos:end="114:74">(<argument pos:start="114:19" pos:end="114:21"><expr pos:start="114:19" pos:end="114:21"><name pos:start="114:19" pos:end="114:21">env</name></expr></argument>, <argument pos:start="114:24" pos:end="114:73"><expr pos:start="114:24" pos:end="114:73"><literal type="string" pos:start="114:24" pos:end="114:73">"BookE 2.06 MMU doesn't have physical real mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="116:9" pos:end="116:14">break;</break>

    <default pos:start="118:5" pos:end="118:12">default:</default>

        <expr_stmt pos:start="120:9" pos:end="120:57"><expr pos:start="120:9" pos:end="120:56"><call pos:start="120:9" pos:end="120:56"><name pos:start="120:9" pos:end="120:17">cpu_abort</name><argument_list pos:start="120:18" pos:end="120:56">(<argument pos:start="120:19" pos:end="120:21"><expr pos:start="120:19" pos:end="120:21"><name pos:start="120:19" pos:end="120:21">env</name></expr></argument>, <argument pos:start="120:24" pos:end="120:55"><expr pos:start="120:24" pos:end="120:55"><literal type="string" pos:start="120:24" pos:end="120:55">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="122:9" pos:end="122:18">return <expr pos:start="122:16" pos:end="122:17"><operator pos:start="122:16" pos:end="122:16">-</operator><literal type="number" pos:start="122:17" pos:end="122:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="128:5" pos:end="128:15">return <expr pos:start="128:12" pos:end="128:14"><name pos:start="128:12" pos:end="128:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
