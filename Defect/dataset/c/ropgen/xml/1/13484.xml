<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13484.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">hmp_sendkey</name><parameter_list pos:start="1:17" pos:end="1:50">(<parameter pos:start="1:18" pos:end="1:29"><decl pos:start="1:18" pos:end="1:29"><type pos:start="1:18" pos:end="1:29"><name pos:start="1:18" pos:end="1:24">Monitor</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:29">mon</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:42">QDict</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:13">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">keys</name> <init pos:start="5:22" pos:end="5:51">= <expr pos:start="5:24" pos:end="5:51"><call pos:start="5:24" pos:end="5:51"><name pos:start="5:24" pos:end="5:36">qdict_get_str</name><argument_list pos:start="5:37" pos:end="5:51">(<argument pos:start="5:38" pos:end="5:42"><expr pos:start="5:38" pos:end="5:42"><name pos:start="5:38" pos:end="5:42">qdict</name></expr></argument>, <argument pos:start="5:45" pos:end="5:50"><expr pos:start="5:45" pos:end="5:50"><literal type="string" pos:start="5:45" pos:end="5:50">"keys"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">KeyValueList</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">keylist</name></decl>, <decl pos:start="7:28" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:18"><modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:32">head</name> <init pos:start="7:34" pos:end="7:39">= <expr pos:start="7:36" pos:end="7:39"><name pos:start="7:36" pos:end="7:39">NULL</name></expr></init></decl>, <decl pos:start="7:42" pos:end="7:52"><type ref="prev" pos:start="7:5" pos:end="7:18"><modifier pos:start="7:42" pos:end="7:42">*</modifier></type><name pos:start="7:43" pos:end="7:45">tmp</name> <init pos:start="7:47" pos:end="7:52">= <expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">has_hold_time</name> <init pos:start="9:23" pos:end="9:56">= <expr pos:start="9:25" pos:end="9:56"><call pos:start="9:25" pos:end="9:56"><name pos:start="9:25" pos:end="9:36">qdict_haskey</name><argument_list pos:start="9:37" pos:end="9:56">(<argument pos:start="9:38" pos:end="9:42"><expr pos:start="9:38" pos:end="9:42"><name pos:start="9:38" pos:end="9:42">qdict</name></expr></argument>, <argument pos:start="9:45" pos:end="9:55"><expr pos:start="9:45" pos:end="9:55"><literal type="string" pos:start="9:45" pos:end="9:55">"hold-time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:62"><decl pos:start="11:5" pos:end="11:61"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">hold_time</name> <init pos:start="11:19" pos:end="11:61">= <expr pos:start="11:21" pos:end="11:61"><call pos:start="11:21" pos:end="11:61"><name pos:start="11:21" pos:end="11:37">qdict_get_try_int</name><argument_list pos:start="11:38" pos:end="11:61">(<argument pos:start="11:39" pos:end="11:43"><expr pos:start="11:39" pos:end="11:43"><name pos:start="11:39" pos:end="11:43">qdict</name></expr></argument>, <argument pos:start="11:46" pos:end="11:56"><expr pos:start="11:46" pos:end="11:56"><literal type="string" pos:start="11:46" pos:end="11:56">"hold-time"</literal></expr></argument>, <argument pos:start="11:59" pos:end="11:60"><expr pos:start="11:59" pos:end="11:60"><operator pos:start="11:59" pos:end="11:59">-</operator><literal type="number" pos:start="11:60" pos:end="11:60">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:21">= <expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:24"><name pos:start="15:10" pos:end="15:20">keyname_buf</name><index pos:start="15:21" pos:end="15:24">[<expr pos:start="15:22" pos:end="15:23"><literal type="number" pos:start="15:22" pos:end="15:23">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:19">separator</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">keyname_len</name></decl>;</decl_stmt>



    <while pos:start="23:5" pos:end="111:5">while <condition pos:start="23:11" pos:end="23:13">(<expr pos:start="23:12" pos:end="23:12"><literal type="number" pos:start="23:12" pos:end="23:12">1</literal></expr>)</condition> <block pos:start="23:15" pos:end="111:5">{<block_content pos:start="25:9" pos:end="109:29">

        <expr_stmt pos:start="25:9" pos:end="25:38"><expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:17">separator</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:37"><name pos:start="25:21" pos:end="25:26">strchr</name><argument_list pos:start="25:27" pos:end="25:37">(<argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">keys</name></expr></argument>, <argument pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><literal type="char" pos:start="25:34" pos:end="25:36">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:66"><expr pos:start="27:9" pos:end="27:65"><name pos:start="27:9" pos:end="27:19">keyname_len</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <ternary pos:start="27:23" pos:end="27:65"><condition pos:start="27:23" pos:end="27:33"><expr pos:start="27:23" pos:end="27:31"><name pos:start="27:23" pos:end="27:31">separator</name></expr> ?</condition><then pos:start="27:35" pos:end="27:50"> <expr pos:start="27:35" pos:end="27:50"><name pos:start="27:35" pos:end="27:43">separator</name> <operator pos:start="27:45" pos:end="27:45">-</operator> <name pos:start="27:47" pos:end="27:50">keys</name></expr> </then><else pos:start="27:52" pos:end="27:65">: <expr pos:start="27:54" pos:end="27:65"><call pos:start="27:54" pos:end="27:65"><name pos:start="27:54" pos:end="27:59">strlen</name><argument_list pos:start="27:60" pos:end="27:65">(<argument pos:start="27:61" pos:end="27:64"><expr pos:start="27:61" pos:end="27:64"><name pos:start="27:61" pos:end="27:64">keys</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:56"><expr pos:start="29:9" pos:end="29:55"><call pos:start="29:9" pos:end="29:55"><name pos:start="29:9" pos:end="29:15">pstrcpy</name><argument_list pos:start="29:16" pos:end="29:55">(<argument pos:start="29:17" pos:end="29:27"><expr pos:start="29:17" pos:end="29:27"><name pos:start="29:17" pos:end="29:27">keyname_buf</name></expr></argument>, <argument pos:start="29:30" pos:end="29:48"><expr pos:start="29:30" pos:end="29:48"><sizeof pos:start="29:30" pos:end="29:48">sizeof<argument_list pos:start="29:36" pos:end="29:48">(<argument pos:start="29:37" pos:end="29:47"><expr pos:start="29:37" pos:end="29:47"><name pos:start="29:37" pos:end="29:47">keyname_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:51" pos:end="29:54"><expr pos:start="29:51" pos:end="29:54"><name pos:start="29:51" pos:end="29:54">keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:73">/* Be compatible with old interface, convert user inputted "&lt;" */</comment>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:62">(<expr pos:start="35:13" pos:end="35:61"><operator pos:start="35:13" pos:end="35:13">!</operator><call pos:start="35:14" pos:end="35:41"><name pos:start="35:14" pos:end="35:20">strncmp</name><argument_list pos:start="35:21" pos:end="35:41">(<argument pos:start="35:22" pos:end="35:32"><expr pos:start="35:22" pos:end="35:32"><name pos:start="35:22" pos:end="35:32">keyname_buf</name></expr></argument>, <argument pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><literal type="string" pos:start="35:35" pos:end="35:37">"&lt;"</literal></expr></argument>, <argument pos:start="35:40" pos:end="35:40"><expr pos:start="35:40" pos:end="35:40"><literal type="number" pos:start="35:40" pos:end="35:40">1</literal></expr></argument>)</argument_list></call> <operator pos:start="35:43" pos:end="35:44">&amp;&amp;</operator> <name pos:start="35:46" pos:end="35:56">keyname_len</name> <operator pos:start="35:58" pos:end="35:59">==</operator> <literal type="number" pos:start="35:61" pos:end="35:61">1</literal></expr>)</condition> <block pos:start="35:64" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:28">

            <expr_stmt pos:start="37:13" pos:end="37:62"><expr pos:start="37:13" pos:end="37:61"><call pos:start="37:13" pos:end="37:61"><name pos:start="37:13" pos:end="37:19">pstrcpy</name><argument_list pos:start="37:20" pos:end="37:61">(<argument pos:start="37:21" pos:end="37:31"><expr pos:start="37:21" pos:end="37:31"><name pos:start="37:21" pos:end="37:31">keyname_buf</name></expr></argument>, <argument pos:start="37:34" pos:end="37:52"><expr pos:start="37:34" pos:end="37:52"><sizeof pos:start="37:34" pos:end="37:52">sizeof<argument_list pos:start="37:40" pos:end="37:52">(<argument pos:start="37:41" pos:end="37:51"><expr pos:start="37:41" pos:end="37:51"><name pos:start="37:41" pos:end="37:51">keyname_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:55" pos:end="37:60"><expr pos:start="37:55" pos:end="37:60"><literal type="string" pos:start="37:55" pos:end="37:60">"less"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:28"><expr pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:23">keyname_len</name> <operator pos:start="39:25" pos:end="39:25">=</operator> <literal type="number" pos:start="39:27" pos:end="39:27">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:37"><expr pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:19">keyname_buf</name><index pos:start="43:20" pos:end="43:32">[<expr pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:31">keyname_len</name></expr>]</index></name> <operator pos:start="43:34" pos:end="43:34">=</operator> <literal type="number" pos:start="43:36" pos:end="43:36">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:46"><expr pos:start="47:9" pos:end="47:45"><name pos:start="47:9" pos:end="47:15">keylist</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:45"><name pos:start="47:19" pos:end="47:27">g_malloc0</name><argument_list pos:start="47:28" pos:end="47:45">(<argument pos:start="47:29" pos:end="47:44"><expr pos:start="47:29" pos:end="47:44"><sizeof pos:start="47:29" pos:end="47:44">sizeof<argument_list pos:start="47:35" pos:end="47:44">(<argument pos:start="47:36" pos:end="47:43"><expr pos:start="47:36" pos:end="47:43"><operator pos:start="47:36" pos:end="47:36">*</operator><name pos:start="47:37" pos:end="47:43">keylist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:60"><expr pos:start="49:9" pos:end="49:59"><name pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:15">keylist</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:22">value</name></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <call pos:start="49:26" pos:end="49:59"><name pos:start="49:26" pos:end="49:34">g_malloc0</name><argument_list pos:start="49:35" pos:end="49:59">(<argument pos:start="49:36" pos:end="49:58"><expr pos:start="49:36" pos:end="49:58"><sizeof pos:start="49:36" pos:end="49:58">sizeof<argument_list pos:start="49:42" pos:end="49:58">(<argument pos:start="49:43" pos:end="49:57"><expr pos:start="49:43" pos:end="49:57"><operator pos:start="49:43" pos:end="49:43">*</operator><name pos:start="49:44" pos:end="49:57"><name pos:start="49:44" pos:end="49:50">keylist</name><operator pos:start="49:51" pos:end="49:52">-&gt;</operator><name pos:start="49:53" pos:end="49:57">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:18">(<expr pos:start="53:13" pos:end="53:17"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:17">head</name></expr>)</condition> <block pos:start="53:20" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:27">

            <expr_stmt pos:start="55:13" pos:end="55:27"><expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:16">head</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:26">keylist</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:16">(<expr pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">tmp</name></expr>)</condition> <block pos:start="59:18" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:32">

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:15">tmp</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:21">next</name></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:31">keylist</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">tmp</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:21">keylist</name></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="99:9"><if pos:start="69:9" pos:end="85:9">if <condition pos:start="69:12" pos:end="69:46">(<expr pos:start="69:13" pos:end="69:45"><call pos:start="69:13" pos:end="69:45"><name pos:start="69:13" pos:end="69:20">strstart</name><argument_list pos:start="69:21" pos:end="69:45">(<argument pos:start="69:22" pos:end="69:32"><expr pos:start="69:22" pos:end="69:32"><name pos:start="69:22" pos:end="69:32">keyname_buf</name></expr></argument>, <argument pos:start="69:35" pos:end="69:38"><expr pos:start="69:35" pos:end="69:38"><literal type="string" pos:start="69:35" pos:end="69:38">"0x"</literal></expr></argument>, <argument pos:start="69:41" pos:end="69:44"><expr pos:start="69:41" pos:end="69:44"><name pos:start="69:41" pos:end="69:44">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:48" pos:end="85:9">{<block_content pos:start="71:13" pos:end="83:45">

            <decl_stmt pos:start="71:13" pos:end="71:23"><decl pos:start="71:13" pos:end="71:22"><type pos:start="71:13" pos:end="71:18"><name pos:start="71:13" pos:end="71:16">char</name> <modifier pos:start="71:18" pos:end="71:18">*</modifier></type><name pos:start="71:19" pos:end="71:22">endp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:55"><decl pos:start="73:13" pos:end="73:54"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:21">value</name> <init pos:start="73:23" pos:end="73:54">= <expr pos:start="73:25" pos:end="73:54"><call pos:start="73:25" pos:end="73:54"><name pos:start="73:25" pos:end="73:31">strtoul</name><argument_list pos:start="73:32" pos:end="73:54">(<argument pos:start="73:33" pos:end="73:43"><expr pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:43">keyname_buf</name></expr></argument>, <argument pos:start="73:46" pos:end="73:50"><expr pos:start="73:46" pos:end="73:50"><operator pos:start="73:46" pos:end="73:46">&amp;</operator><name pos:start="73:47" pos:end="73:50">endp</name></expr></argument>, <argument pos:start="73:53" pos:end="73:53"><expr pos:start="73:53" pos:end="73:53"><literal type="number" pos:start="73:53" pos:end="73:53">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="75:13" pos:end="79:13"><if pos:start="75:13" pos:end="79:13">if <condition pos:start="75:16" pos:end="75:30">(<expr pos:start="75:17" pos:end="75:29"><operator pos:start="75:17" pos:end="75:17">*</operator><name pos:start="75:18" pos:end="75:21">endp</name> <operator pos:start="75:23" pos:end="75:24">!=</operator> <literal type="char" pos:start="75:26" pos:end="75:29">'\0'</literal></expr>)</condition> <block pos:start="75:32" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:29">

                <goto pos:start="77:17" pos:end="77:29">goto <name pos:start="77:22" pos:end="77:28">err_out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:57"><expr pos:start="81:13" pos:end="81:56"><name pos:start="81:13" pos:end="81:32"><name pos:start="81:13" pos:end="81:19">keylist</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:26">value</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:32">type</name></name> <operator pos:start="81:34" pos:end="81:34">=</operator> <name pos:start="81:36" pos:end="81:56">KEY_VALUE_KIND_NUMBER</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:45"><expr pos:start="83:13" pos:end="83:44"><name pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:19">keylist</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:26">value</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:29">u</name><operator pos:start="83:30" pos:end="83:30">.</operator><name pos:start="83:31" pos:end="83:36">number</name></name> <operator pos:start="83:38" pos:end="83:38">=</operator> <name pos:start="83:40" pos:end="83:44">value</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="99:9">else <block pos:start="85:16" pos:end="99:9">{<block_content pos:start="87:13" pos:end="97:42">

            <decl_stmt pos:start="87:13" pos:end="87:50"><decl pos:start="87:13" pos:end="87:49"><type pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">int</name></type> <name pos:start="87:17" pos:end="87:19">idx</name> <init pos:start="87:21" pos:end="87:49">= <expr pos:start="87:23" pos:end="87:49"><call pos:start="87:23" pos:end="87:49"><name pos:start="87:23" pos:end="87:36">index_from_key</name><argument_list pos:start="87:37" pos:end="87:49">(<argument pos:start="87:38" pos:end="87:48"><expr pos:start="87:38" pos:end="87:48"><name pos:start="87:38" pos:end="87:48">keyname_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="89:13" pos:end="93:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:39">(<expr pos:start="89:17" pos:end="89:38"><name pos:start="89:17" pos:end="89:19">idx</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <name pos:start="89:24" pos:end="89:38">Q_KEY_CODE__MAX</name></expr>)</condition> <block pos:start="89:41" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:29">

                <goto pos:start="91:17" pos:end="91:29">goto <name pos:start="91:22" pos:end="91:28">err_out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:56"><expr pos:start="95:13" pos:end="95:55"><name pos:start="95:13" pos:end="95:32"><name pos:start="95:13" pos:end="95:19">keylist</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:26">value</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:32">type</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <name pos:start="95:36" pos:end="95:55">KEY_VALUE_KIND_QCODE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:42"><expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:35"><name pos:start="97:13" pos:end="97:19">keylist</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:26">value</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:29">u</name><operator pos:start="97:30" pos:end="97:30">.</operator><name pos:start="97:31" pos:end="97:35">qcode</name></name> <operator pos:start="97:37" pos:end="97:37">=</operator> <name pos:start="97:39" pos:end="97:41">idx</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:23">(<expr pos:start="103:13" pos:end="103:22"><operator pos:start="103:13" pos:end="103:13">!</operator><name pos:start="103:14" pos:end="103:22">separator</name></expr>)</condition> <block pos:start="103:25" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:18">

            <break pos:start="105:13" pos:end="105:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:29"><expr pos:start="109:9" pos:end="109:28"><name pos:start="109:9" pos:end="109:12">keys</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <name pos:start="109:16" pos:end="109:24">separator</name> <operator pos:start="109:26" pos:end="109:26">+</operator> <literal type="number" pos:start="109:28" pos:end="109:28">1</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="115:5" pos:end="115:55"><expr pos:start="115:5" pos:end="115:54"><call pos:start="115:5" pos:end="115:54"><name pos:start="115:5" pos:end="115:16">qmp_send_key</name><argument_list pos:start="115:17" pos:end="115:54">(<argument pos:start="115:18" pos:end="115:21"><expr pos:start="115:18" pos:end="115:21"><name pos:start="115:18" pos:end="115:21">head</name></expr></argument>, <argument pos:start="115:24" pos:end="115:36"><expr pos:start="115:24" pos:end="115:36"><name pos:start="115:24" pos:end="115:36">has_hold_time</name></expr></argument>, <argument pos:start="115:39" pos:end="115:47"><expr pos:start="115:39" pos:end="115:47"><name pos:start="115:39" pos:end="115:47">hold_time</name></expr></argument>, <argument pos:start="115:50" pos:end="115:53"><expr pos:start="115:50" pos:end="115:53"><operator pos:start="115:50" pos:end="115:50">&amp;</operator><name pos:start="115:51" pos:end="115:53">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:32"><expr pos:start="117:5" pos:end="117:31"><call pos:start="117:5" pos:end="117:31"><name pos:start="117:5" pos:end="117:20">hmp_handle_error</name><argument_list pos:start="117:21" pos:end="117:31">(<argument pos:start="117:22" pos:end="117:24"><expr pos:start="117:22" pos:end="117:24"><name pos:start="117:22" pos:end="117:24">mon</name></expr></argument>, <argument pos:start="117:27" pos:end="117:30"><expr pos:start="117:27" pos:end="117:30"><operator pos:start="117:27" pos:end="117:27">&amp;</operator><name pos:start="117:28" pos:end="117:30">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="121:1" pos:end="121:4"><name pos:start="121:1" pos:end="121:3">out</name>:</label>

    <expr_stmt pos:start="123:5" pos:end="123:33"><expr pos:start="123:5" pos:end="123:32"><call pos:start="123:5" pos:end="123:32"><name pos:start="123:5" pos:end="123:26">qapi_free_KeyValueList</name><argument_list pos:start="123:27" pos:end="123:32">(<argument pos:start="123:28" pos:end="123:31"><expr pos:start="123:28" pos:end="123:31"><name pos:start="123:28" pos:end="123:31">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:11">return;</return>



<label pos:start="129:1" pos:end="129:8"><name pos:start="129:1" pos:end="129:7">err_out</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="131:64"><expr pos:start="131:5" pos:end="131:63"><call pos:start="131:5" pos:end="131:63"><name pos:start="131:5" pos:end="131:18">monitor_printf</name><argument_list pos:start="131:19" pos:end="131:63">(<argument pos:start="131:20" pos:end="131:22"><expr pos:start="131:20" pos:end="131:22"><name pos:start="131:20" pos:end="131:22">mon</name></expr></argument>, <argument pos:start="131:25" pos:end="131:49"><expr pos:start="131:25" pos:end="131:49"><literal type="string" pos:start="131:25" pos:end="131:49">"invalid parameter: %s\n"</literal></expr></argument>, <argument pos:start="131:52" pos:end="131:62"><expr pos:start="131:52" pos:end="131:62"><name pos:start="131:52" pos:end="131:62">keyname_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <goto pos:start="133:5" pos:end="133:13">goto <name pos:start="133:10" pos:end="133:12">out</name>;</goto>

</block_content>}</block></function>
</unit>
