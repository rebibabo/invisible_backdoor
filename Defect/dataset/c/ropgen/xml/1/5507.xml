<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5507.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">ff_h264_decode_extradata</name><parameter_list pos:start="1:29" pos:end="1:74">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:40">H264Context</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">h</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:63"><decl pos:start="1:46" pos:end="1:63"><type pos:start="1:46" pos:end="1:63"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:58">uint8_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">buf</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:73"><decl pos:start="1:66" pos:end="1:73"><type pos:start="1:66" pos:end="1:73"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:16">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">avctx</name> <init pos:start="5:27" pos:end="5:38">= <expr pos:start="5:29" pos:end="5:38"><name pos:start="5:29" pos:end="5:38"><name pos:start="5:29" pos:end="5:29">h</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:33">.</operator><name pos:start="5:34" pos:end="5:38">avctx</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:18"><if pos:start="9:5" pos:end="11:18">if <condition pos:start="9:8" pos:end="9:26">(<expr pos:start="9:9" pos:end="9:25"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:12">buf</name> <operator pos:start="9:14" pos:end="9:15">||</operator> <name pos:start="9:17" pos:end="9:20">size</name> <operator pos:start="9:22" pos:end="9:23">&lt;=</operator> <literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:18"><block_content pos:start="11:9" pos:end="11:18">

        <return pos:start="11:9" pos:end="11:18">return <expr pos:start="11:16" pos:end="11:17"><operator pos:start="11:16" pos:end="11:16">-</operator><literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="107:5"><if pos:start="15:5" pos:end="99:5">if <condition pos:start="15:8" pos:end="15:20">(<expr pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:11">buf</name><index pos:start="15:12" pos:end="15:14">[<expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr>]</index></name> <operator pos:start="15:16" pos:end="15:17">==</operator> <literal type="number" pos:start="15:19" pos:end="15:19">1</literal></expr>)</condition> <block pos:start="15:22" pos:end="99:5">{<block_content pos:start="17:9" pos:end="97:49">

        <decl_stmt pos:start="17:9" pos:end="17:28"><decl pos:start="17:9" pos:end="17:13"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:13">i</name></decl>, <decl pos:start="17:16" pos:end="17:18"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:16" pos:end="17:18">cnt</name></decl>, <decl pos:start="17:21" pos:end="17:27"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:21" pos:end="17:27">nalsize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:37"><decl pos:start="19:9" pos:end="19:36"><type pos:start="19:9" pos:end="19:29"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:22">unsigned</name> <name pos:start="19:24" pos:end="19:27">char</name> <modifier pos:start="19:29" pos:end="19:29">*</modifier></type><name pos:start="19:30" pos:end="19:30">p</name> <init pos:start="19:32" pos:end="19:36">= <expr pos:start="19:34" pos:end="19:36"><name pos:start="19:34" pos:end="19:36">buf</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:22"><expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">h</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">is_avc</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:21">(<expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:16">size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <literal type="number" pos:start="27:20" pos:end="27:20">7</literal></expr>)</condition> <block pos:start="27:23" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:22">

            <expr_stmt pos:start="29:13" pos:end="29:60"><expr pos:start="29:13" pos:end="29:59"><call pos:start="29:13" pos:end="29:59"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="29:59">(<argument pos:start="29:20" pos:end="29:24"><expr pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:24">avctx</name></expr></argument>, <argument pos:start="29:27" pos:end="29:38"><expr pos:start="29:27" pos:end="29:38"><name pos:start="29:27" pos:end="29:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:41" pos:end="29:58"><expr pos:start="29:41" pos:end="29:58"><literal type="string" pos:start="29:41" pos:end="29:58">"avcC too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="35:9" pos:end="37:66">/* sps and pps in the avcC always have length coded with 2 bytes,

         * so put a fake nal_length_size = 2 while parsing them */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:31"><expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:9">h</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:26">nal_length_size</name></name> <operator pos:start="39:28" pos:end="39:28">=</operator> <literal type="number" pos:start="39:30" pos:end="39:30">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="41:9" pos:end="41:31">// Decode sps from avcC</comment>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:11">cnt</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">*</operator><operator pos:start="43:16" pos:end="43:16">(</operator><name pos:start="43:17" pos:end="43:17">p</name> <operator pos:start="43:19" pos:end="43:19">+</operator> <literal type="number" pos:start="43:21" pos:end="43:21">5</literal><operator pos:start="43:22" pos:end="43:22">)</operator> <operator pos:start="43:24" pos:end="43:24">&amp;</operator> <literal type="number" pos:start="43:26" pos:end="43:29">0x1f</literal></expr>;</expr_stmt> <comment type="line" pos:start="43:32" pos:end="43:47">// Number of sps</comment>

        <expr_stmt pos:start="45:9" pos:end="45:16"><expr pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:9">p</name>  <operator pos:start="45:12" pos:end="45:13">+=</operator> <literal type="number" pos:start="45:15" pos:end="45:15">6</literal></expr>;</expr_stmt>

        <for pos:start="47:9" pos:end="67:9">for <control pos:start="47:13" pos:end="47:33">(<init pos:start="47:14" pos:end="47:19"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:14">i</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>;</init> <condition pos:start="47:21" pos:end="47:28"><expr pos:start="47:21" pos:end="47:27"><name pos:start="47:21" pos:end="47:21">i</name> <operator pos:start="47:23" pos:end="47:23">&lt;</operator> <name pos:start="47:25" pos:end="47:27">cnt</name></expr>;</condition> <incr pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:30">i</name><operator pos:start="47:31" pos:end="47:32">++</operator></expr></incr>)</control> <block pos:start="47:35" pos:end="67:9">{<block_content pos:start="49:13" pos:end="65:25">

            <expr_stmt pos:start="49:13" pos:end="49:37"><expr pos:start="49:13" pos:end="49:36"><name pos:start="49:13" pos:end="49:19">nalsize</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <call pos:start="49:23" pos:end="49:32"><name pos:start="49:23" pos:end="49:29">AV_RB16</name><argument_list pos:start="49:30" pos:end="49:32">(<argument pos:start="49:31" pos:end="49:31"><expr pos:start="49:31" pos:end="49:31"><name pos:start="49:31" pos:end="49:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="49:34" pos:end="49:34">+</operator> <literal type="number" pos:start="49:36" pos:end="49:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="53:26"><if pos:start="51:13" pos:end="53:26">if<condition pos:start="51:15" pos:end="51:40">(<expr pos:start="51:16" pos:end="51:39"><name pos:start="51:16" pos:end="51:22">nalsize</name> <operator pos:start="51:24" pos:end="51:24">&gt;</operator> <name pos:start="51:26" pos:end="51:29">size</name> <operator pos:start="51:31" pos:end="51:31">-</operator> <operator pos:start="51:33" pos:end="51:33">(</operator><name pos:start="51:34" pos:end="51:34">p</name><operator pos:start="51:35" pos:end="51:35">-</operator><name pos:start="51:36" pos:end="51:38">buf</name><operator pos:start="51:39" pos:end="51:39">)</operator></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:26"><block_content pos:start="53:17" pos:end="53:26">

                <return pos:start="53:17" pos:end="53:26">return <expr pos:start="53:24" pos:end="53:25"><operator pos:start="53:24" pos:end="53:24">-</operator><literal type="number" pos:start="53:25" pos:end="53:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="55:13" pos:end="63:13"><if pos:start="55:13" pos:end="63:13">if <condition pos:start="55:16" pos:end="55:52">(<expr pos:start="55:17" pos:end="55:51"><call pos:start="55:17" pos:end="55:47"><name pos:start="55:17" pos:end="55:32">decode_nal_units</name><argument_list pos:start="55:33" pos:end="55:47">(<argument pos:start="55:34" pos:end="55:34"><expr pos:start="55:34" pos:end="55:34"><name pos:start="55:34" pos:end="55:34">h</name></expr></argument>, <argument pos:start="55:37" pos:end="55:37"><expr pos:start="55:37" pos:end="55:37"><name pos:start="55:37" pos:end="55:37">p</name></expr></argument>, <argument pos:start="55:40" pos:end="55:46"><expr pos:start="55:40" pos:end="55:46"><name pos:start="55:40" pos:end="55:46">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="55:49" pos:end="55:49">&lt;</operator> <literal type="number" pos:start="55:51" pos:end="55:51">0</literal></expr>)</condition> <block pos:start="55:54" pos:end="63:13">{<block_content pos:start="57:17" pos:end="61:26">

                <expr_stmt pos:start="57:17" pos:end="59:64"><expr pos:start="57:17" pos:end="59:63"><call pos:start="57:17" pos:end="59:63"><name pos:start="57:17" pos:end="57:22">av_log</name><argument_list pos:start="57:23" pos:end="59:63">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">avctx</name></expr></argument>, <argument pos:start="57:31" pos:end="57:42"><expr pos:start="57:31" pos:end="57:42"><name pos:start="57:31" pos:end="57:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="59:24" pos:end="59:59"><expr pos:start="59:24" pos:end="59:59"><literal type="string" pos:start="59:24" pos:end="59:59">"Decoding sps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="59:62" pos:end="59:62"><expr pos:start="59:62" pos:end="59:62"><name pos:start="59:62" pos:end="59:62">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="61:17" pos:end="61:26">return <expr pos:start="61:24" pos:end="61:25"><operator pos:start="61:24" pos:end="61:24">-</operator><literal type="number" pos:start="61:25" pos:end="61:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:25"><expr pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:13">p</name> <operator pos:start="65:15" pos:end="65:16">+=</operator> <name pos:start="65:18" pos:end="65:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="69:9" pos:end="69:31">// Decode pps from avcC</comment>

        <expr_stmt pos:start="71:9" pos:end="71:21"><expr pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">cnt</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">*</operator><operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:17">p</name><operator pos:start="71:18" pos:end="71:19">++</operator><operator pos:start="71:20" pos:end="71:20">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="71:23" pos:end="71:38">// Number of pps</comment>

        <for pos:start="73:9" pos:end="93:9">for <control pos:start="73:13" pos:end="73:33">(<init pos:start="73:14" pos:end="73:19"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">i</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</init> <condition pos:start="73:21" pos:end="73:28"><expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:21">i</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:27">cnt</name></expr>;</condition> <incr pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><name pos:start="73:30" pos:end="73:30">i</name><operator pos:start="73:31" pos:end="73:32">++</operator></expr></incr>)</control> <block pos:start="73:35" pos:end="93:9">{<block_content pos:start="75:13" pos:end="91:25">

            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:19">nalsize</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:32"><name pos:start="75:23" pos:end="75:29">AV_RB16</name><argument_list pos:start="75:30" pos:end="75:32">(<argument pos:start="75:31" pos:end="75:31"><expr pos:start="75:31" pos:end="75:31"><name pos:start="75:31" pos:end="75:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="75:34" pos:end="75:34">+</operator> <literal type="number" pos:start="75:36" pos:end="75:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="79:26"><if pos:start="77:13" pos:end="79:26">if<condition pos:start="77:15" pos:end="77:40">(<expr pos:start="77:16" pos:end="77:39"><name pos:start="77:16" pos:end="77:22">nalsize</name> <operator pos:start="77:24" pos:end="77:24">&gt;</operator> <name pos:start="77:26" pos:end="77:29">size</name> <operator pos:start="77:31" pos:end="77:31">-</operator> <operator pos:start="77:33" pos:end="77:33">(</operator><name pos:start="77:34" pos:end="77:34">p</name><operator pos:start="77:35" pos:end="77:35">-</operator><name pos:start="77:36" pos:end="77:38">buf</name><operator pos:start="77:39" pos:end="77:39">)</operator></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:26"><block_content pos:start="79:17" pos:end="79:26">

                <return pos:start="79:17" pos:end="79:26">return <expr pos:start="79:24" pos:end="79:25"><operator pos:start="79:24" pos:end="79:24">-</operator><literal type="number" pos:start="79:25" pos:end="79:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="81:13" pos:end="89:13"><if pos:start="81:13" pos:end="89:13">if <condition pos:start="81:16" pos:end="81:52">(<expr pos:start="81:17" pos:end="81:51"><call pos:start="81:17" pos:end="81:47"><name pos:start="81:17" pos:end="81:32">decode_nal_units</name><argument_list pos:start="81:33" pos:end="81:47">(<argument pos:start="81:34" pos:end="81:34"><expr pos:start="81:34" pos:end="81:34"><name pos:start="81:34" pos:end="81:34">h</name></expr></argument>, <argument pos:start="81:37" pos:end="81:37"><expr pos:start="81:37" pos:end="81:37"><name pos:start="81:37" pos:end="81:37">p</name></expr></argument>, <argument pos:start="81:40" pos:end="81:46"><expr pos:start="81:40" pos:end="81:46"><name pos:start="81:40" pos:end="81:46">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="81:49" pos:end="81:49">&lt;</operator> <literal type="number" pos:start="81:51" pos:end="81:51">0</literal></expr>)</condition> <block pos:start="81:54" pos:end="89:13">{<block_content pos:start="83:17" pos:end="87:26">

                <expr_stmt pos:start="83:17" pos:end="85:64"><expr pos:start="83:17" pos:end="85:63"><call pos:start="83:17" pos:end="85:63"><name pos:start="83:17" pos:end="83:22">av_log</name><argument_list pos:start="83:23" pos:end="85:63">(<argument pos:start="83:24" pos:end="83:28"><expr pos:start="83:24" pos:end="83:28"><name pos:start="83:24" pos:end="83:28">avctx</name></expr></argument>, <argument pos:start="83:31" pos:end="83:42"><expr pos:start="83:31" pos:end="83:42"><name pos:start="83:31" pos:end="83:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="85:24" pos:end="85:59"><expr pos:start="85:24" pos:end="85:59"><literal type="string" pos:start="85:24" pos:end="85:59">"Decoding pps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="85:62" pos:end="85:62"><expr pos:start="85:62" pos:end="85:62"><name pos:start="85:62" pos:end="85:62">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:26">return <expr pos:start="87:24" pos:end="87:25"><operator pos:start="87:24" pos:end="87:24">-</operator><literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:25"><expr pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:13">p</name> <operator pos:start="91:15" pos:end="91:16">+=</operator> <name pos:start="91:18" pos:end="91:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="95:9" pos:end="95:85">// Now store right nal length size, that will be used to parse all other nals</comment>

        <expr_stmt pos:start="97:9" pos:end="97:49"><expr pos:start="97:9" pos:end="97:48"><name pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:9">h</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:26">nal_length_size</name></name> <operator pos:start="97:28" pos:end="97:28">=</operator> <operator pos:start="97:30" pos:end="97:30">(</operator><name pos:start="97:31" pos:end="97:36"><name pos:start="97:31" pos:end="97:33">buf</name><index pos:start="97:34" pos:end="97:36">[<expr pos:start="97:35" pos:end="97:35"><literal type="number" pos:start="97:35" pos:end="97:35">4</literal></expr>]</index></name> <operator pos:start="97:38" pos:end="97:38">&amp;</operator> <literal type="number" pos:start="97:40" pos:end="97:43">0x03</literal><operator pos:start="97:44" pos:end="97:44">)</operator> <operator pos:start="97:46" pos:end="97:46">+</operator> <literal type="number" pos:start="97:48" pos:end="97:48">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="107:5">else <block pos:start="99:12" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:22">

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:9">h</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:17">is_avc</name></name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="105:22"><if pos:start="103:9" pos:end="105:22">if <condition pos:start="103:12" pos:end="103:47">(<expr pos:start="103:13" pos:end="103:46"><call pos:start="103:13" pos:end="103:42"><name pos:start="103:13" pos:end="103:28">decode_nal_units</name><argument_list pos:start="103:29" pos:end="103:42">(<argument pos:start="103:30" pos:end="103:30"><expr pos:start="103:30" pos:end="103:30"><name pos:start="103:30" pos:end="103:30">h</name></expr></argument>, <argument pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:35">buf</name></expr></argument>, <argument pos:start="103:38" pos:end="103:41"><expr pos:start="103:38" pos:end="103:41"><name pos:start="103:38" pos:end="103:41">size</name></expr></argument>)</argument_list></call> <operator pos:start="103:44" pos:end="103:44">&lt;</operator> <literal type="number" pos:start="103:46" pos:end="103:46">0</literal></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:22"><block_content pos:start="105:13" pos:end="105:22">

            <return pos:start="105:13" pos:end="105:22">return <expr pos:start="105:20" pos:end="105:21"><operator pos:start="105:20" pos:end="105:20">-</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="109:5" pos:end="109:16">return <expr pos:start="109:12" pos:end="109:15"><name pos:start="109:12" pos:end="109:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
