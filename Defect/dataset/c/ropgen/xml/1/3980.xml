<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3980.c" pos:tabs="8"><function pos:start="1:1" pos:end="246:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">svq1_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="246:1">{<block_content pos:start="9:3" pos:end="244:16">

  <decl_stmt pos:start="9:3" pos:end="9:35"><decl pos:start="9:3" pos:end="9:34"><type pos:start="9:3" pos:end="9:17"><specifier pos:start="9:3" pos:end="9:7">const</specifier> <name pos:start="9:9" pos:end="9:15">uint8_t</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">buf</name> <init pos:start="9:22" pos:end="9:34">= <expr pos:start="9:24" pos:end="9:34"><name pos:start="9:24" pos:end="9:34"><name pos:start="9:24" pos:end="9:28">avpkt</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:34">data</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:29"><decl pos:start="11:3" pos:end="11:28"><type pos:start="11:3" pos:end="11:5"><name pos:start="11:3" pos:end="11:5">int</name></type> <name pos:start="11:7" pos:end="11:14">buf_size</name> <init pos:start="11:16" pos:end="11:28">= <expr pos:start="11:18" pos:end="11:28"><name pos:start="11:18" pos:end="11:28"><name pos:start="11:18" pos:end="11:22">avpkt</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:28">size</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="13:3" pos:end="13:37"><decl pos:start="13:3" pos:end="13:36"><type pos:start="13:3" pos:end="13:18"><name pos:start="13:3" pos:end="13:16">MpegEncContext</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:19">s</name><init pos:start="13:20" pos:end="13:36">=<expr pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="15:3" pos:end="15:37"><decl pos:start="15:3" pos:end="15:25"><type pos:start="15:3" pos:end="15:18"><name pos:start="15:3" pos:end="15:9">uint8_t</name>        <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:25">current</name></decl>, <decl pos:start="15:28" pos:end="15:36"><type ref="prev" pos:start="15:3" pos:end="15:18"><modifier pos:start="15:28" pos:end="15:28">*</modifier></type><name pos:start="15:29" pos:end="15:36">previous</name></decl>;</decl_stmt>

  <decl_stmt pos:start="17:3" pos:end="17:49"><decl pos:start="17:3" pos:end="17:24"><type pos:start="17:3" pos:end="17:5"><name pos:start="17:3" pos:end="17:5">int</name></type>             <name pos:start="17:19" pos:end="17:24">result</name></decl>, <decl pos:start="17:27" pos:end="17:27"><type ref="prev" pos:start="17:3" pos:end="17:5"/><name pos:start="17:27" pos:end="17:27">i</name></decl>, <decl pos:start="17:30" pos:end="17:30"><type ref="prev" pos:start="17:3" pos:end="17:5"/><name pos:start="17:30" pos:end="17:30">x</name></decl>, <decl pos:start="17:33" pos:end="17:33"><type ref="prev" pos:start="17:3" pos:end="17:5"/><name pos:start="17:33" pos:end="17:33">y</name></decl>, <decl pos:start="17:36" pos:end="17:40"><type ref="prev" pos:start="17:3" pos:end="17:5"/><name pos:start="17:36" pos:end="17:40">width</name></decl>, <decl pos:start="17:43" pos:end="17:48"><type ref="prev" pos:start="17:3" pos:end="17:5"/><name pos:start="17:43" pos:end="17:48">height</name></decl>;</decl_stmt>

  <decl_stmt pos:start="19:3" pos:end="19:23"><decl pos:start="19:3" pos:end="19:22"><type pos:start="19:3" pos:end="19:11"><name pos:start="19:3" pos:end="19:9">AVFrame</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:15">pict</name> <init pos:start="19:17" pos:end="19:22">= <expr pos:start="19:19" pos:end="19:22"><name pos:start="19:19" pos:end="19:22">data</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="21:3" pos:end="21:16"><decl pos:start="21:3" pos:end="21:15"><type pos:start="21:3" pos:end="21:12"><name pos:start="21:3" pos:end="21:10">svq1_pmv</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:15">pmv</name></decl>;</decl_stmt>



  <comment type="block" pos:start="25:3" pos:end="25:29">/* initialize bit buffer */</comment>

  <expr_stmt pos:start="27:3" pos:end="27:39"><expr pos:start="27:3" pos:end="27:38"><call pos:start="27:3" pos:end="27:38"><name pos:start="27:3" pos:end="27:15">init_get_bits</name><argument_list pos:start="27:16" pos:end="27:38">(<argument pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:22"><operator pos:start="27:17" pos:end="27:17">&amp;</operator><name pos:start="27:18" pos:end="27:22"><name pos:start="27:18" pos:end="27:18">s</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:22">gb</name></name></expr></argument>,<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">buf</name></expr></argument>,<argument pos:start="27:28" pos:end="27:37"><expr pos:start="27:28" pos:end="27:37"><name pos:start="27:28" pos:end="27:35">buf_size</name><operator pos:start="27:36" pos:end="27:36">*</operator><literal type="number" pos:start="27:37" pos:end="27:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <comment type="block" pos:start="31:3" pos:end="31:27">/* decode frame header */</comment>

  <expr_stmt pos:start="33:3" pos:end="33:36"><expr pos:start="33:3" pos:end="33:35"><name pos:start="33:3" pos:end="33:11"><name pos:start="33:3" pos:end="33:3">s</name><operator pos:start="33:4" pos:end="33:5">-&gt;</operator><name pos:start="33:6" pos:end="33:11">f_code</name></name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:35"><name pos:start="33:15" pos:end="33:22">get_bits</name> <argument_list pos:start="33:24" pos:end="33:35">(<argument pos:start="33:25" pos:end="33:30"><expr pos:start="33:25" pos:end="33:30"><operator pos:start="33:25" pos:end="33:25">&amp;</operator><name pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:26">s</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:30">gb</name></name></expr></argument>, <argument pos:start="33:33" pos:end="33:34"><expr pos:start="33:33" pos:end="33:34"><literal type="number" pos:start="33:33" pos:end="33:34">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="37:3" pos:end="39:14"><if pos:start="37:3" pos:end="39:14">if <condition pos:start="37:6" pos:end="37:49">(<expr pos:start="37:7" pos:end="37:48"><operator pos:start="37:7" pos:end="37:7">(</operator><name pos:start="37:8" pos:end="37:16"><name pos:start="37:8" pos:end="37:8">s</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:16">f_code</name></name> <operator pos:start="37:18" pos:end="37:18">&amp;</operator> <operator pos:start="37:20" pos:end="37:20">~</operator><literal type="number" pos:start="37:21" pos:end="37:24">0x70</literal><operator pos:start="37:25" pos:end="37:25">)</operator> <operator pos:start="37:27" pos:end="37:28">||</operator> <operator pos:start="37:30" pos:end="37:30">!</operator><operator pos:start="37:31" pos:end="37:31">(</operator><name pos:start="37:32" pos:end="37:40"><name pos:start="37:32" pos:end="37:32">s</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:40">f_code</name></name> <operator pos:start="37:42" pos:end="37:42">&amp;</operator> <literal type="number" pos:start="37:44" pos:end="37:47">0x60</literal><operator pos:start="37:48" pos:end="37:48">)</operator></expr>)</condition><block type="pseudo" pos:start="39:5" pos:end="39:14"><block_content pos:start="39:5" pos:end="39:14">

    <return pos:start="39:5" pos:end="39:14">return <expr pos:start="39:12" pos:end="39:13"><operator pos:start="39:12" pos:end="39:12">-</operator><literal type="number" pos:start="39:13" pos:end="39:13">1</literal></expr>;</return></block_content></block></if></if_stmt>



  <comment type="block" pos:start="43:3" pos:end="43:37">/* swap some header bytes (why?) */</comment>

  <if_stmt pos:start="45:3" pos:end="57:3"><if pos:start="45:3" pos:end="57:3">if <condition pos:start="45:6" pos:end="45:24">(<expr pos:start="45:7" pos:end="45:23"><name pos:start="45:7" pos:end="45:15"><name pos:start="45:7" pos:end="45:7">s</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:15">f_code</name></name> <operator pos:start="45:17" pos:end="45:18">!=</operator> <literal type="number" pos:start="45:20" pos:end="45:23">0x20</literal></expr>)</condition> <block pos:start="45:26" pos:end="57:3">{<block_content pos:start="47:5" pos:end="55:5">

    <decl_stmt pos:start="47:5" pos:end="47:43"><decl pos:start="47:5" pos:end="47:42"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">uint32_t</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:17">src</name> <init pos:start="47:19" pos:end="47:42">= <expr pos:start="47:21" pos:end="47:42"><operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:29">uint32_t</name> <operator pos:start="47:31" pos:end="47:31">*</operator><operator pos:start="47:32" pos:end="47:32">)</operator> <operator pos:start="47:34" pos:end="47:34">(</operator><name pos:start="47:35" pos:end="47:37">buf</name> <operator pos:start="47:39" pos:end="47:39">+</operator> <literal type="number" pos:start="47:41" pos:end="47:41">4</literal><operator pos:start="47:42" pos:end="47:42">)</operator></expr></init></decl>;</decl_stmt>



    <for pos:start="51:5" pos:end="55:5">for <control pos:start="51:9" pos:end="51:25">(<init pos:start="51:10" pos:end="51:13"><expr pos:start="51:10" pos:end="51:12"><name pos:start="51:10" pos:end="51:10">i</name><operator pos:start="51:11" pos:end="51:11">=</operator><literal type="number" pos:start="51:12" pos:end="51:12">0</literal></expr>;</init> <condition pos:start="51:15" pos:end="51:20"><expr pos:start="51:15" pos:end="51:19"><name pos:start="51:15" pos:end="51:15">i</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <literal type="number" pos:start="51:19" pos:end="51:19">4</literal></expr>;</condition> <incr pos:start="51:22" pos:end="51:24"><expr pos:start="51:22" pos:end="51:24"><name pos:start="51:22" pos:end="51:22">i</name><operator pos:start="51:23" pos:end="51:24">++</operator></expr></incr>)</control> <block pos:start="51:27" pos:end="55:5">{<block_content pos:start="53:7" pos:end="53:62">

      <expr_stmt pos:start="53:7" pos:end="53:62"><expr pos:start="53:7" pos:end="53:61"><name pos:start="53:7" pos:end="53:12"><name pos:start="53:7" pos:end="53:9">src</name><index pos:start="53:10" pos:end="53:12">[<expr pos:start="53:11" pos:end="53:11"><name pos:start="53:11" pos:end="53:11">i</name></expr>]</index></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <operator pos:start="53:16" pos:end="53:16">(</operator><operator pos:start="53:17" pos:end="53:17">(</operator><name pos:start="53:18" pos:end="53:23"><name pos:start="53:18" pos:end="53:20">src</name><index pos:start="53:21" pos:end="53:23">[<expr pos:start="53:22" pos:end="53:22"><name pos:start="53:22" pos:end="53:22">i</name></expr>]</index></name> <operator pos:start="53:25" pos:end="53:26">&lt;&lt;</operator> <literal type="number" pos:start="53:28" pos:end="53:29">16</literal><operator pos:start="53:30" pos:end="53:30">)</operator> <operator pos:start="53:32" pos:end="53:32">|</operator> <operator pos:start="53:34" pos:end="53:34">(</operator><name pos:start="53:35" pos:end="53:40"><name pos:start="53:35" pos:end="53:37">src</name><index pos:start="53:38" pos:end="53:40">[<expr pos:start="53:39" pos:end="53:39"><name pos:start="53:39" pos:end="53:39">i</name></expr>]</index></name> <operator pos:start="53:42" pos:end="53:43">&gt;&gt;</operator> <literal type="number" pos:start="53:45" pos:end="53:46">16</literal><operator pos:start="53:47" pos:end="53:47">)</operator><operator pos:start="53:48" pos:end="53:48">)</operator> <operator pos:start="53:50" pos:end="53:50">^</operator> <name pos:start="53:52" pos:end="53:61"><name pos:start="53:52" pos:end="53:54">src</name><index pos:start="53:55" pos:end="53:61">[<expr pos:start="53:56" pos:end="53:60"><literal type="number" pos:start="53:56" pos:end="53:56">7</literal> <operator pos:start="53:58" pos:end="53:58">-</operator> <name pos:start="53:60" pos:end="53:60">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

  </block_content>}</block></if></if_stmt>



  <expr_stmt pos:start="61:3" pos:end="61:48"><expr pos:start="61:3" pos:end="61:47"><name pos:start="61:3" pos:end="61:8">result</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <call pos:start="61:12" pos:end="61:47"><name pos:start="61:12" pos:end="61:35">svq1_decode_frame_header</name> <argument_list pos:start="61:37" pos:end="61:47">(<argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><operator pos:start="61:38" pos:end="61:38">&amp;</operator><name pos:start="61:39" pos:end="61:43"><name pos:start="61:39" pos:end="61:39">s</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:43">gb</name></name></expr></argument>, <argument pos:start="61:46" pos:end="61:46"><expr pos:start="61:46" pos:end="61:46"><name pos:start="61:46" pos:end="61:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="65:3" pos:end="73:3"><if pos:start="65:3" pos:end="73:3">if <condition pos:start="65:6" pos:end="65:18">(<expr pos:start="65:7" pos:end="65:17"><name pos:start="65:7" pos:end="65:12">result</name> <operator pos:start="65:14" pos:end="65:15">!=</operator> <literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr>)</condition>

  <block pos:start="67:3" pos:end="73:3">{<block_content pos:start="69:5" pos:end="71:18">

    <expr_stmt pos:start="69:5" pos:end="69:71"><expr pos:start="69:5" pos:end="69:70"><call pos:start="69:5" pos:end="69:70"><name pos:start="69:5" pos:end="69:11">av_dlog</name><argument_list pos:start="69:12" pos:end="69:70">(<argument pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:20">avctx</name></name></expr></argument>, <argument pos:start="69:23" pos:end="69:62"><expr pos:start="69:23" pos:end="69:62"><literal type="string" pos:start="69:23" pos:end="69:62">"Error in svq1_decode_frame_header %i\n"</literal></expr></argument>,<argument pos:start="69:64" pos:end="69:69"><expr pos:start="69:64" pos:end="69:69"><name pos:start="69:64" pos:end="69:69">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:18">return <expr pos:start="71:12" pos:end="71:17"><name pos:start="71:12" pos:end="71:17">result</name></expr>;</return>

  </block_content>}</block></if></if_stmt>




  <comment type="line" pos:start="78:3" pos:end="78:72">//FIXME this avoids some confusion for "B frames" without 2 references</comment>

  <comment type="line" pos:start="80:3" pos:end="80:93">//this should be removed after libavcodec can handle more flexible picture types &amp; ordering</comment>

  <if_stmt pos:start="82:3" pos:end="82:83"><if pos:start="82:3" pos:end="82:83">if<condition pos:start="82:5" pos:end="82:66">(<expr pos:start="82:6" pos:end="82:65"><name pos:start="82:6" pos:end="82:17"><name pos:start="82:6" pos:end="82:6">s</name><operator pos:start="82:7" pos:end="82:8">-&gt;</operator><name pos:start="82:9" pos:end="82:17">pict_type</name></name><operator pos:start="82:18" pos:end="82:19">==</operator><name pos:start="82:20" pos:end="82:36">AV_PICTURE_TYPE_B</name> <operator pos:start="82:38" pos:end="82:39">&amp;&amp;</operator> <name pos:start="82:41" pos:end="82:59"><name pos:start="82:41" pos:end="82:41">s</name><operator pos:start="82:42" pos:end="82:43">-&gt;</operator><name pos:start="82:44" pos:end="82:59">last_picture_ptr</name></name><operator pos:start="82:60" pos:end="82:61">==</operator><name pos:start="82:62" pos:end="82:65">NULL</name></expr>)</condition><block type="pseudo" pos:start="82:68" pos:end="82:83"><block_content pos:start="82:68" pos:end="82:83"> <return pos:start="82:68" pos:end="82:83">return <expr pos:start="82:75" pos:end="82:82"><name pos:start="82:75" pos:end="82:82">buf_size</name></expr>;</return></block_content></block></if></if_stmt>



  <if_stmt pos:start="86:3" pos:end="92:22"><if pos:start="86:3" pos:end="92:22">if<condition pos:start="86:5" pos:end="90:43">(  <expr pos:start="86:8" pos:end="90:42"><operator pos:start="86:8" pos:end="86:8">(</operator><name pos:start="86:9" pos:end="86:25"><name pos:start="86:9" pos:end="86:13">avctx</name><operator pos:start="86:14" pos:end="86:15">-&gt;</operator><name pos:start="86:16" pos:end="86:25">skip_frame</name></name> <operator pos:start="86:27" pos:end="86:28">&gt;=</operator> <name pos:start="86:30" pos:end="86:45">AVDISCARD_NONREF</name> <operator pos:start="86:47" pos:end="86:48">&amp;&amp;</operator> <name pos:start="86:50" pos:end="86:61"><name pos:start="86:50" pos:end="86:50">s</name><operator pos:start="86:51" pos:end="86:52">-&gt;</operator><name pos:start="86:53" pos:end="86:61">pict_type</name></name><operator pos:start="86:62" pos:end="86:63">==</operator><name pos:start="86:64" pos:end="86:80">AV_PICTURE_TYPE_B</name><operator pos:start="86:81" pos:end="86:81">)</operator>

     <operator pos:start="88:6" pos:end="88:7">||</operator><operator pos:start="88:8" pos:end="88:8">(</operator><name pos:start="88:9" pos:end="88:25"><name pos:start="88:9" pos:end="88:13">avctx</name><operator pos:start="88:14" pos:end="88:15">-&gt;</operator><name pos:start="88:16" pos:end="88:25">skip_frame</name></name> <operator pos:start="88:27" pos:end="88:28">&gt;=</operator> <name pos:start="88:30" pos:end="88:45">AVDISCARD_NONKEY</name> <operator pos:start="88:47" pos:end="88:48">&amp;&amp;</operator> <name pos:start="88:50" pos:end="88:61"><name pos:start="88:50" pos:end="88:50">s</name><operator pos:start="88:51" pos:end="88:52">-&gt;</operator><name pos:start="88:53" pos:end="88:61">pict_type</name></name><operator pos:start="88:62" pos:end="88:63">!=</operator><name pos:start="88:64" pos:end="88:80">AV_PICTURE_TYPE_I</name><operator pos:start="88:81" pos:end="88:81">)</operator>

     <operator pos:start="90:6" pos:end="90:7">||</operator> <name pos:start="90:9" pos:end="90:25"><name pos:start="90:9" pos:end="90:13">avctx</name><operator pos:start="90:14" pos:end="90:15">-&gt;</operator><name pos:start="90:16" pos:end="90:25">skip_frame</name></name> <operator pos:start="90:27" pos:end="90:28">&gt;=</operator> <name pos:start="90:30" pos:end="90:42">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="92:7" pos:end="92:22"><block_content pos:start="92:7" pos:end="92:22">

      <return pos:start="92:7" pos:end="92:22">return <expr pos:start="92:14" pos:end="92:21"><name pos:start="92:14" pos:end="92:21">buf_size</name></expr>;</return></block_content></block></if></if_stmt>



  <if_stmt pos:start="96:3" pos:end="98:16"><if pos:start="96:3" pos:end="98:16">if<condition pos:start="96:5" pos:end="96:35">(<expr pos:start="96:6" pos:end="96:34"><call pos:start="96:6" pos:end="96:30"><name pos:start="96:6" pos:end="96:20">MPV_frame_start</name><argument_list pos:start="96:21" pos:end="96:30">(<argument pos:start="96:22" pos:end="96:22"><expr pos:start="96:22" pos:end="96:22"><name pos:start="96:22" pos:end="96:22">s</name></expr></argument>, <argument pos:start="96:25" pos:end="96:29"><expr pos:start="96:25" pos:end="96:29"><name pos:start="96:25" pos:end="96:29">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="96:32" pos:end="96:32">&lt;</operator> <literal type="number" pos:start="96:34" pos:end="96:34">0</literal></expr>)</condition><block type="pseudo" pos:start="98:7" pos:end="98:16"><block_content pos:start="98:7" pos:end="98:16">

      <return pos:start="98:7" pos:end="98:16">return <expr pos:start="98:14" pos:end="98:15"><operator pos:start="98:14" pos:end="98:14">-</operator><literal type="number" pos:start="98:15" pos:end="98:15">1</literal></expr>;</return></block_content></block></if></if_stmt>



  <expr_stmt pos:start="102:3" pos:end="102:64"><expr pos:start="102:3" pos:end="102:63"><name pos:start="102:3" pos:end="102:5">pmv</name> <operator pos:start="102:7" pos:end="102:7">=</operator> <call pos:start="102:9" pos:end="102:63"><name pos:start="102:9" pos:end="102:17">av_malloc</name><argument_list pos:start="102:18" pos:end="102:63">(<argument pos:start="102:19" pos:end="102:62"><expr pos:start="102:19" pos:end="102:62"><operator pos:start="102:19" pos:end="102:19">(</operator><call pos:start="102:20" pos:end="102:40"><name pos:start="102:20" pos:end="102:26">FFALIGN</name><argument_list pos:start="102:27" pos:end="102:40">(<argument pos:start="102:28" pos:end="102:35"><expr pos:start="102:28" pos:end="102:35"><name pos:start="102:28" pos:end="102:35"><name pos:start="102:28" pos:end="102:28">s</name><operator pos:start="102:29" pos:end="102:30">-&gt;</operator><name pos:start="102:31" pos:end="102:35">width</name></name></expr></argument>, <argument pos:start="102:38" pos:end="102:39"><expr pos:start="102:38" pos:end="102:39"><literal type="number" pos:start="102:38" pos:end="102:39">16</literal></expr></argument>)</argument_list></call><operator pos:start="102:41" pos:end="102:41">/</operator><literal type="number" pos:start="102:42" pos:end="102:44">8</literal> <operator pos:start="102:44" pos:end="102:44">+</operator> <literal type="number" pos:start="102:46" pos:end="102:46">3</literal><operator pos:start="102:47" pos:end="102:47">)</operator> <operator pos:start="102:49" pos:end="102:49">*</operator> <sizeof pos:start="102:51" pos:end="102:62">sizeof<argument_list pos:start="102:57" pos:end="102:62">(<argument pos:start="102:58" pos:end="102:61"><expr pos:start="102:58" pos:end="102:61"><operator pos:start="102:58" pos:end="102:58">*</operator><name pos:start="102:59" pos:end="102:61">pmv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt pos:start="104:3" pos:end="106:16"><if pos:start="104:3" pos:end="106:16">if <condition pos:start="104:6" pos:end="104:11">(<expr pos:start="104:7" pos:end="104:10"><operator pos:start="104:7" pos:end="104:7">!</operator><name pos:start="104:8" pos:end="104:10">pmv</name></expr>)</condition><block type="pseudo" pos:start="106:7" pos:end="106:16"><block_content pos:start="106:7" pos:end="106:16">

      <return pos:start="106:7" pos:end="106:16">return <expr pos:start="106:14" pos:end="106:15"><operator pos:start="106:14" pos:end="106:14">-</operator><literal type="number" pos:start="106:15" pos:end="106:15">1</literal></expr>;</return></block_content></block></if></if_stmt>



  <comment type="block" pos:start="110:3" pos:end="110:36">/* decode y, u and v components */</comment>

  <for pos:start="112:3" pos:end="222:3">for <control pos:start="112:7" pos:end="112:23">(<init pos:start="112:8" pos:end="112:11"><expr pos:start="112:8" pos:end="112:10"><name pos:start="112:8" pos:end="112:8">i</name><operator pos:start="112:9" pos:end="112:9">=</operator><literal type="number" pos:start="112:10" pos:end="112:10">0</literal></expr>;</init> <condition pos:start="112:13" pos:end="112:18"><expr pos:start="112:13" pos:end="112:17"><name pos:start="112:13" pos:end="112:13">i</name> <operator pos:start="112:15" pos:end="112:15">&lt;</operator> <literal type="number" pos:start="112:17" pos:end="112:17">3</literal></expr>;</condition> <incr pos:start="112:20" pos:end="112:22"><expr pos:start="112:20" pos:end="112:22"><name pos:start="112:20" pos:end="112:20">i</name><operator pos:start="112:21" pos:end="112:22">++</operator></expr></incr>)</control> <block pos:start="112:25" pos:end="222:3">{<block_content pos:start="114:5" pos:end="220:5">

    <decl_stmt pos:start="114:5" pos:end="114:17"><decl pos:start="114:5" pos:end="114:16"><type pos:start="114:5" pos:end="114:7"><name pos:start="114:5" pos:end="114:7">int</name></type> <name pos:start="114:9" pos:end="114:16">linesize</name></decl>;</decl_stmt>

    <if_stmt pos:start="116:5" pos:end="134:5"><if pos:start="116:5" pos:end="124:5">if <condition pos:start="116:8" pos:end="116:15">(<expr pos:start="116:9" pos:end="116:14"><name pos:start="116:9" pos:end="116:9">i</name> <operator pos:start="116:11" pos:end="116:12">==</operator> <literal type="number" pos:start="116:14" pos:end="116:14">0</literal></expr>)</condition> <block pos:start="116:17" pos:end="124:5">{<block_content pos:start="118:7" pos:end="122:28">

      <expr_stmt pos:start="118:7" pos:end="118:37"><expr pos:start="118:7" pos:end="118:36"><name pos:start="118:7" pos:end="118:11">width</name>  <operator pos:start="118:14" pos:end="118:14">=</operator> <call pos:start="118:16" pos:end="118:36"><name pos:start="118:16" pos:end="118:22">FFALIGN</name><argument_list pos:start="118:23" pos:end="118:36">(<argument pos:start="118:24" pos:end="118:31"><expr pos:start="118:24" pos:end="118:31"><name pos:start="118:24" pos:end="118:31"><name pos:start="118:24" pos:end="118:24">s</name><operator pos:start="118:25" pos:end="118:26">-&gt;</operator><name pos:start="118:27" pos:end="118:31">width</name></name></expr></argument>, <argument pos:start="118:34" pos:end="118:35"><expr pos:start="118:34" pos:end="118:35"><literal type="number" pos:start="118:34" pos:end="118:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="120:7" pos:end="120:38"><expr pos:start="120:7" pos:end="120:37"><name pos:start="120:7" pos:end="120:12">height</name> <operator pos:start="120:14" pos:end="120:14">=</operator> <call pos:start="120:16" pos:end="120:37"><name pos:start="120:16" pos:end="120:22">FFALIGN</name><argument_list pos:start="120:23" pos:end="120:37">(<argument pos:start="120:24" pos:end="120:32"><expr pos:start="120:24" pos:end="120:32"><name pos:start="120:24" pos:end="120:32"><name pos:start="120:24" pos:end="120:24">s</name><operator pos:start="120:25" pos:end="120:26">-&gt;</operator><name pos:start="120:27" pos:end="120:32">height</name></name></expr></argument>, <argument pos:start="120:35" pos:end="120:36"><expr pos:start="120:35" pos:end="120:36"><literal type="number" pos:start="120:35" pos:end="120:36">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="122:7" pos:end="122:28"><expr pos:start="122:7" pos:end="122:27"><name pos:start="122:7" pos:end="122:14">linesize</name><operator pos:start="122:15" pos:end="122:15">=</operator> <name pos:start="122:17" pos:end="122:27"><name pos:start="122:17" pos:end="122:17">s</name><operator pos:start="122:18" pos:end="122:19">-&gt;</operator><name pos:start="122:20" pos:end="122:27">linesize</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="124:7" pos:end="134:5">else <block pos:start="124:12" pos:end="134:5">{<block_content pos:start="126:7" pos:end="132:30">

      <if_stmt pos:start="126:7" pos:end="126:41"><if pos:start="126:7" pos:end="126:41">if<condition pos:start="126:9" pos:end="126:34">(<expr pos:start="126:10" pos:end="126:33"><name pos:start="126:10" pos:end="126:17"><name pos:start="126:10" pos:end="126:10">s</name><operator pos:start="126:11" pos:end="126:12">-&gt;</operator><name pos:start="126:13" pos:end="126:17">flags</name></name><operator pos:start="126:18" pos:end="126:18">&amp;</operator><name pos:start="126:19" pos:end="126:33">CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo" pos:start="126:36" pos:end="126:41"><block_content pos:start="126:36" pos:end="126:41"> <break pos:start="126:36" pos:end="126:41">break;</break></block_content></block></if></if_stmt>

      <expr_stmt pos:start="128:7" pos:end="128:39"><expr pos:start="128:7" pos:end="128:38"><name pos:start="128:7" pos:end="128:11">width</name>  <operator pos:start="128:14" pos:end="128:14">=</operator> <call pos:start="128:16" pos:end="128:38"><name pos:start="128:16" pos:end="128:22">FFALIGN</name><argument_list pos:start="128:23" pos:end="128:38">(<argument pos:start="128:24" pos:end="128:33"><expr pos:start="128:24" pos:end="128:33"><name pos:start="128:24" pos:end="128:31"><name pos:start="128:24" pos:end="128:24">s</name><operator pos:start="128:25" pos:end="128:26">-&gt;</operator><name pos:start="128:27" pos:end="128:31">width</name></name><operator pos:start="128:32" pos:end="128:32">/</operator><literal type="number" pos:start="128:33" pos:end="128:33">4</literal></expr></argument>, <argument pos:start="128:36" pos:end="128:37"><expr pos:start="128:36" pos:end="128:37"><literal type="number" pos:start="128:36" pos:end="128:37">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="130:7" pos:end="130:40"><expr pos:start="130:7" pos:end="130:39"><name pos:start="130:7" pos:end="130:12">height</name> <operator pos:start="130:14" pos:end="130:14">=</operator> <call pos:start="130:16" pos:end="130:39"><name pos:start="130:16" pos:end="130:22">FFALIGN</name><argument_list pos:start="130:23" pos:end="130:39">(<argument pos:start="130:24" pos:end="130:34"><expr pos:start="130:24" pos:end="130:34"><name pos:start="130:24" pos:end="130:32"><name pos:start="130:24" pos:end="130:24">s</name><operator pos:start="130:25" pos:end="130:26">-&gt;</operator><name pos:start="130:27" pos:end="130:32">height</name></name><operator pos:start="130:33" pos:end="130:33">/</operator><literal type="number" pos:start="130:34" pos:end="130:34">4</literal></expr></argument>, <argument pos:start="130:37" pos:end="130:38"><expr pos:start="130:37" pos:end="130:38"><literal type="number" pos:start="130:37" pos:end="130:38">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="132:7" pos:end="132:30"><expr pos:start="132:7" pos:end="132:29"><name pos:start="132:7" pos:end="132:14">linesize</name><operator pos:start="132:15" pos:end="132:15">=</operator> <name pos:start="132:17" pos:end="132:29"><name pos:start="132:17" pos:end="132:17">s</name><operator pos:start="132:18" pos:end="132:19">-&gt;</operator><name pos:start="132:20" pos:end="132:29">uvlinesize</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="138:5" pos:end="138:43"><expr pos:start="138:5" pos:end="138:42"><name pos:start="138:5" pos:end="138:11">current</name> <operator pos:start="138:13" pos:end="138:13">=</operator> <name pos:start="138:15" pos:end="138:42"><name pos:start="138:15" pos:end="138:15">s</name><operator pos:start="138:16" pos:end="138:17">-&gt;</operator><name pos:start="138:18" pos:end="138:32">current_picture</name><operator pos:start="138:33" pos:end="138:33">.</operator><name pos:start="138:34" pos:end="138:34">f</name><operator pos:start="138:35" pos:end="138:35">.</operator><name pos:start="138:36" pos:end="138:39">data</name><index pos:start="138:40" pos:end="138:42">[<expr pos:start="138:41" pos:end="138:41"><name pos:start="138:41" pos:end="138:41">i</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="142:5" pos:end="150:5"><if pos:start="142:5" pos:end="146:5">if<condition pos:start="142:7" pos:end="142:39">(<expr pos:start="142:8" pos:end="142:38"><name pos:start="142:8" pos:end="142:19"><name pos:start="142:8" pos:end="142:8">s</name><operator pos:start="142:9" pos:end="142:10">-&gt;</operator><name pos:start="142:11" pos:end="142:19">pict_type</name></name><operator pos:start="142:20" pos:end="142:21">==</operator><name pos:start="142:22" pos:end="142:38">AV_PICTURE_TYPE_B</name></expr>)</condition><block pos:start="142:40" pos:end="146:5">{<block_content pos:start="144:9" pos:end="144:45">

        <expr_stmt pos:start="144:9" pos:end="144:45"><expr pos:start="144:9" pos:end="144:44"><name pos:start="144:9" pos:end="144:16">previous</name> <operator pos:start="144:18" pos:end="144:18">=</operator> <name pos:start="144:20" pos:end="144:44"><name pos:start="144:20" pos:end="144:20">s</name><operator pos:start="144:21" pos:end="144:22">-&gt;</operator><name pos:start="144:23" pos:end="144:34">next_picture</name><operator pos:start="144:35" pos:end="144:35">.</operator><name pos:start="144:36" pos:end="144:36">f</name><operator pos:start="144:37" pos:end="144:37">.</operator><name pos:start="144:38" pos:end="144:41">data</name><index pos:start="144:42" pos:end="144:44">[<expr pos:start="144:43" pos:end="144:43"><name pos:start="144:43" pos:end="144:43">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="146:6" pos:end="150:5">else<block pos:start="146:10" pos:end="150:5">{<block_content pos:start="148:9" pos:end="148:45">

        <expr_stmt pos:start="148:9" pos:end="148:45"><expr pos:start="148:9" pos:end="148:44"><name pos:start="148:9" pos:end="148:16">previous</name> <operator pos:start="148:18" pos:end="148:18">=</operator> <name pos:start="148:20" pos:end="148:44"><name pos:start="148:20" pos:end="148:20">s</name><operator pos:start="148:21" pos:end="148:22">-&gt;</operator><name pos:start="148:23" pos:end="148:34">last_picture</name><operator pos:start="148:35" pos:end="148:35">.</operator><name pos:start="148:36" pos:end="148:36">f</name><operator pos:start="148:37" pos:end="148:37">.</operator><name pos:start="148:38" pos:end="148:41">data</name><index pos:start="148:42" pos:end="148:44">[<expr pos:start="148:43" pos:end="148:43"><name pos:start="148:43" pos:end="148:43">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="154:5" pos:end="220:5"><if pos:start="154:5" pos:end="180:5">if <condition pos:start="154:8" pos:end="154:42">(<expr pos:start="154:9" pos:end="154:41"><name pos:start="154:9" pos:end="154:20"><name pos:start="154:9" pos:end="154:9">s</name><operator pos:start="154:10" pos:end="154:11">-&gt;</operator><name pos:start="154:12" pos:end="154:20">pict_type</name></name> <operator pos:start="154:22" pos:end="154:23">==</operator> <name pos:start="154:25" pos:end="154:41">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="154:44" pos:end="180:5">{<block_content pos:start="158:7" pos:end="178:7">

      <comment type="block" pos:start="156:7" pos:end="156:20">/* keyframe */</comment>

      <for pos:start="158:7" pos:end="178:7">for <control pos:start="158:11" pos:end="158:34">(<init pos:start="158:12" pos:end="158:15"><expr pos:start="158:12" pos:end="158:14"><name pos:start="158:12" pos:end="158:12">y</name><operator pos:start="158:13" pos:end="158:13">=</operator><literal type="number" pos:start="158:14" pos:end="158:14">0</literal></expr>;</init> <condition pos:start="158:17" pos:end="158:27"><expr pos:start="158:17" pos:end="158:26"><name pos:start="158:17" pos:end="158:17">y</name> <operator pos:start="158:19" pos:end="158:19">&lt;</operator> <name pos:start="158:21" pos:end="158:26">height</name></expr>;</condition> <incr pos:start="158:29" pos:end="158:33"><expr pos:start="158:29" pos:end="158:33"><name pos:start="158:29" pos:end="158:29">y</name><operator pos:start="158:30" pos:end="158:31">+=</operator><literal type="number" pos:start="158:32" pos:end="158:33">16</literal></expr></incr>)</control> <block pos:start="158:36" pos:end="178:7">{<block_content pos:start="160:9" pos:end="176:31">

        <for pos:start="160:9" pos:end="174:9">for <control pos:start="160:13" pos:end="160:35">(<init pos:start="160:14" pos:end="160:17"><expr pos:start="160:14" pos:end="160:16"><name pos:start="160:14" pos:end="160:14">x</name><operator pos:start="160:15" pos:end="160:15">=</operator><literal type="number" pos:start="160:16" pos:end="160:16">0</literal></expr>;</init> <condition pos:start="160:19" pos:end="160:28"><expr pos:start="160:19" pos:end="160:27"><name pos:start="160:19" pos:end="160:19">x</name> <operator pos:start="160:21" pos:end="160:21">&lt;</operator> <name pos:start="160:23" pos:end="160:27">width</name></expr>;</condition> <incr pos:start="160:30" pos:end="160:34"><expr pos:start="160:30" pos:end="160:34"><name pos:start="160:30" pos:end="160:30">x</name><operator pos:start="160:31" pos:end="160:32">+=</operator><literal type="number" pos:start="160:33" pos:end="160:34">16</literal></expr></incr>)</control> <block pos:start="160:37" pos:end="174:9">{<block_content pos:start="162:11" pos:end="172:11">

          <expr_stmt pos:start="162:11" pos:end="162:75"><expr pos:start="162:11" pos:end="162:74"><name pos:start="162:11" pos:end="162:16">result</name> <operator pos:start="162:18" pos:end="162:18">=</operator> <call pos:start="162:20" pos:end="162:74"><name pos:start="162:20" pos:end="162:42">svq1_decode_block_intra</name> <argument_list pos:start="162:44" pos:end="162:74">(<argument pos:start="162:45" pos:end="162:50"><expr pos:start="162:45" pos:end="162:50"><operator pos:start="162:45" pos:end="162:45">&amp;</operator><name pos:start="162:46" pos:end="162:50"><name pos:start="162:46" pos:end="162:46">s</name><operator pos:start="162:47" pos:end="162:48">-&gt;</operator><name pos:start="162:49" pos:end="162:50">gb</name></name></expr></argument>, <argument pos:start="162:53" pos:end="162:63"><expr pos:start="162:53" pos:end="162:63"><operator pos:start="162:53" pos:end="162:53">&amp;</operator><name pos:start="162:54" pos:end="162:63"><name pos:start="162:54" pos:end="162:60">current</name><index pos:start="162:61" pos:end="162:63">[<expr pos:start="162:62" pos:end="162:62"><name pos:start="162:62" pos:end="162:62">x</name></expr>]</index></name></expr></argument>, <argument pos:start="162:66" pos:end="162:73"><expr pos:start="162:66" pos:end="162:73"><name pos:start="162:66" pos:end="162:73">linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt pos:start="164:11" pos:end="172:11"><if pos:start="164:11" pos:end="172:11">if <condition pos:start="164:14" pos:end="164:26">(<expr pos:start="164:15" pos:end="164:25"><name pos:start="164:15" pos:end="164:20">result</name> <operator pos:start="164:22" pos:end="164:23">!=</operator> <literal type="number" pos:start="164:25" pos:end="164:25">0</literal></expr>)</condition>

          <block pos:start="166:11" pos:end="172:11">{<block_content pos:start="168:13" pos:end="170:21">

            <expr_stmt pos:start="168:13" pos:end="168:95"><expr pos:start="168:13" pos:end="168:94"><call pos:start="168:13" pos:end="168:94"><name pos:start="168:13" pos:end="168:18">av_log</name><argument_list pos:start="168:19" pos:end="168:94">(<argument pos:start="168:20" pos:end="168:27"><expr pos:start="168:20" pos:end="168:27"><name pos:start="168:20" pos:end="168:27"><name pos:start="168:20" pos:end="168:20">s</name><operator pos:start="168:21" pos:end="168:22">-&gt;</operator><name pos:start="168:23" pos:end="168:27">avctx</name></name></expr></argument>, <argument pos:start="168:30" pos:end="168:40"><expr pos:start="168:30" pos:end="168:40"><name pos:start="168:30" pos:end="168:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="168:43" pos:end="168:86"><expr pos:start="168:43" pos:end="168:86"><literal type="string" pos:start="168:43" pos:end="168:86">"Error in svq1_decode_block %i (keyframe)\n"</literal></expr></argument>,<argument pos:start="168:88" pos:end="168:93"><expr pos:start="168:88" pos:end="168:93"><name pos:start="168:88" pos:end="168:93">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="170:13" pos:end="170:21">goto <name pos:start="170:18" pos:end="170:20">err</name>;</goto>

          </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="176:9" pos:end="176:31"><expr pos:start="176:9" pos:end="176:30"><name pos:start="176:9" pos:end="176:15">current</name> <operator pos:start="176:17" pos:end="176:18">+=</operator> <literal type="number" pos:start="176:20" pos:end="176:21">16</literal><operator pos:start="176:22" pos:end="176:22">*</operator><name pos:start="176:23" pos:end="176:30">linesize</name></expr>;</expr_stmt>

      </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="180:7" pos:end="220:5">else <block pos:start="180:12" pos:end="220:5">{<block_content pos:start="184:7" pos:end="218:7">

      <comment type="block" pos:start="182:7" pos:end="182:23">/* delta frame */</comment>

      <expr_stmt pos:start="184:7" pos:end="184:60"><expr pos:start="184:7" pos:end="184:59"><call pos:start="184:7" pos:end="184:59"><name pos:start="184:7" pos:end="184:12">memset</name> <argument_list pos:start="184:14" pos:end="184:59">(<argument pos:start="184:15" pos:end="184:17"><expr pos:start="184:15" pos:end="184:17"><name pos:start="184:15" pos:end="184:17">pmv</name></expr></argument>, <argument pos:start="184:20" pos:end="184:20"><expr pos:start="184:20" pos:end="184:20"><literal type="number" pos:start="184:20" pos:end="184:20">0</literal></expr></argument>, <argument pos:start="184:23" pos:end="184:58"><expr pos:start="184:23" pos:end="184:58"><operator pos:start="184:23" pos:end="184:23">(</operator><operator pos:start="184:24" pos:end="184:24">(</operator><name pos:start="184:25" pos:end="184:29">width</name> <operator pos:start="184:31" pos:end="184:31">/</operator> <literal type="number" pos:start="184:33" pos:end="184:33">8</literal><operator pos:start="184:34" pos:end="184:34">)</operator> <operator pos:start="184:36" pos:end="184:36">+</operator> <literal type="number" pos:start="184:38" pos:end="184:38">3</literal><operator pos:start="184:39" pos:end="184:39">)</operator> <operator pos:start="184:41" pos:end="184:41">*</operator> <sizeof pos:start="184:43" pos:end="184:58">sizeof<argument_list pos:start="184:49" pos:end="184:58">(<argument pos:start="184:50" pos:end="184:57"><expr pos:start="184:50" pos:end="184:57"><name pos:start="184:50" pos:end="184:57">svq1_pmv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



      <for pos:start="188:7" pos:end="218:7">for <control pos:start="188:11" pos:end="188:34">(<init pos:start="188:12" pos:end="188:15"><expr pos:start="188:12" pos:end="188:14"><name pos:start="188:12" pos:end="188:12">y</name><operator pos:start="188:13" pos:end="188:13">=</operator><literal type="number" pos:start="188:14" pos:end="188:14">0</literal></expr>;</init> <condition pos:start="188:17" pos:end="188:27"><expr pos:start="188:17" pos:end="188:26"><name pos:start="188:17" pos:end="188:17">y</name> <operator pos:start="188:19" pos:end="188:19">&lt;</operator> <name pos:start="188:21" pos:end="188:26">height</name></expr>;</condition> <incr pos:start="188:29" pos:end="188:33"><expr pos:start="188:29" pos:end="188:33"><name pos:start="188:29" pos:end="188:29">y</name><operator pos:start="188:30" pos:end="188:31">+=</operator><literal type="number" pos:start="188:32" pos:end="188:33">16</literal></expr></incr>)</control> <block pos:start="188:36" pos:end="218:7">{<block_content pos:start="190:9" pos:end="216:31">

        <for pos:start="190:9" pos:end="206:9">for <control pos:start="190:13" pos:end="190:35">(<init pos:start="190:14" pos:end="190:17"><expr pos:start="190:14" pos:end="190:16"><name pos:start="190:14" pos:end="190:14">x</name><operator pos:start="190:15" pos:end="190:15">=</operator><literal type="number" pos:start="190:16" pos:end="190:16">0</literal></expr>;</init> <condition pos:start="190:19" pos:end="190:28"><expr pos:start="190:19" pos:end="190:27"><name pos:start="190:19" pos:end="190:19">x</name> <operator pos:start="190:21" pos:end="190:21">&lt;</operator> <name pos:start="190:23" pos:end="190:27">width</name></expr>;</condition> <incr pos:start="190:30" pos:end="190:34"><expr pos:start="190:30" pos:end="190:34"><name pos:start="190:30" pos:end="190:30">x</name><operator pos:start="190:31" pos:end="190:32">+=</operator><literal type="number" pos:start="190:33" pos:end="190:34">16</literal></expr></incr>)</control> <block pos:start="190:37" pos:end="206:9">{<block_content pos:start="192:11" pos:end="204:11">

          <expr_stmt pos:start="192:11" pos:end="194:65"><expr pos:start="192:11" pos:end="194:64"><name pos:start="192:11" pos:end="192:16">result</name> <operator pos:start="192:18" pos:end="192:18">=</operator> <call pos:start="192:20" pos:end="194:64"><name pos:start="192:20" pos:end="192:42">svq1_decode_delta_block</name> <argument_list pos:start="192:44" pos:end="194:64">(<argument pos:start="192:45" pos:end="192:45"><expr pos:start="192:45" pos:end="192:45"><name pos:start="192:45" pos:end="192:45">s</name></expr></argument>, <argument pos:start="192:48" pos:end="192:53"><expr pos:start="192:48" pos:end="192:53"><operator pos:start="192:48" pos:end="192:48">&amp;</operator><name pos:start="192:49" pos:end="192:53"><name pos:start="192:49" pos:end="192:49">s</name><operator pos:start="192:50" pos:end="192:51">-&gt;</operator><name pos:start="192:52" pos:end="192:53">gb</name></name></expr></argument>, <argument pos:start="192:56" pos:end="192:66"><expr pos:start="192:56" pos:end="192:66"><operator pos:start="192:56" pos:end="192:56">&amp;</operator><name pos:start="192:57" pos:end="192:66"><name pos:start="192:57" pos:end="192:63">current</name><index pos:start="192:64" pos:end="192:66">[<expr pos:start="192:65" pos:end="192:65"><name pos:start="192:65" pos:end="192:65">x</name></expr>]</index></name></expr></argument>, <argument pos:start="192:69" pos:end="192:76"><expr pos:start="192:69" pos:end="192:76"><name pos:start="192:69" pos:end="192:76">previous</name></expr></argument>,

                                            <argument pos:start="194:45" pos:end="194:52"><expr pos:start="194:45" pos:end="194:52"><name pos:start="194:45" pos:end="194:52">linesize</name></expr></argument>, <argument pos:start="194:55" pos:end="194:57"><expr pos:start="194:55" pos:end="194:57"><name pos:start="194:55" pos:end="194:57">pmv</name></expr></argument>, <argument pos:start="194:60" pos:end="194:60"><expr pos:start="194:60" pos:end="194:60"><name pos:start="194:60" pos:end="194:60">x</name></expr></argument>, <argument pos:start="194:63" pos:end="194:63"><expr pos:start="194:63" pos:end="194:63"><name pos:start="194:63" pos:end="194:63">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt pos:start="196:11" pos:end="204:11"><if pos:start="196:11" pos:end="204:11">if <condition pos:start="196:14" pos:end="196:26">(<expr pos:start="196:15" pos:end="196:25"><name pos:start="196:15" pos:end="196:20">result</name> <operator pos:start="196:22" pos:end="196:23">!=</operator> <literal type="number" pos:start="196:25" pos:end="196:25">0</literal></expr>)</condition>

          <block pos:start="198:11" pos:end="204:11">{<block_content pos:start="200:13" pos:end="202:21">

            <expr_stmt pos:start="200:13" pos:end="200:78"><expr pos:start="200:13" pos:end="200:77"><call pos:start="200:13" pos:end="200:77"><name pos:start="200:13" pos:end="200:19">av_dlog</name><argument_list pos:start="200:20" pos:end="200:77">(<argument pos:start="200:21" pos:end="200:28"><expr pos:start="200:21" pos:end="200:28"><name pos:start="200:21" pos:end="200:28"><name pos:start="200:21" pos:end="200:21">s</name><operator pos:start="200:22" pos:end="200:23">-&gt;</operator><name pos:start="200:24" pos:end="200:28">avctx</name></name></expr></argument>, <argument pos:start="200:31" pos:end="200:69"><expr pos:start="200:31" pos:end="200:69"><literal type="string" pos:start="200:31" pos:end="200:69">"Error in svq1_decode_delta_block %i\n"</literal></expr></argument>,<argument pos:start="200:71" pos:end="200:76"><expr pos:start="200:71" pos:end="200:76"><name pos:start="200:71" pos:end="200:76">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="202:13" pos:end="202:21">goto <name pos:start="202:18" pos:end="202:20">err</name>;</goto>

          </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="210:9" pos:end="212:21"><expr pos:start="210:9" pos:end="212:20"><name pos:start="210:9" pos:end="210:14"><name pos:start="210:9" pos:end="210:11">pmv</name><index pos:start="210:12" pos:end="210:14">[<expr pos:start="210:13" pos:end="210:13"><literal type="number" pos:start="210:13" pos:end="210:13">0</literal></expr>]</index></name><operator pos:start="210:15" pos:end="210:15">.</operator><name pos:start="210:16" pos:end="210:16">x</name> <operator pos:start="210:18" pos:end="210:18">=</operator>

        <name pos:start="212:9" pos:end="212:14"><name pos:start="212:9" pos:end="212:11">pmv</name><index pos:start="212:12" pos:end="212:14">[<expr pos:start="212:13" pos:end="212:13"><literal type="number" pos:start="212:13" pos:end="212:13">0</literal></expr>]</index></name><operator pos:start="212:15" pos:end="212:15">.</operator><name pos:start="212:16" pos:end="212:16">y</name> <operator pos:start="212:18" pos:end="212:18">=</operator> <literal type="number" pos:start="212:20" pos:end="212:20">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="216:9" pos:end="216:31"><expr pos:start="216:9" pos:end="216:30"><name pos:start="216:9" pos:end="216:15">current</name> <operator pos:start="216:17" pos:end="216:18">+=</operator> <literal type="number" pos:start="216:20" pos:end="216:21">16</literal><operator pos:start="216:22" pos:end="216:22">*</operator><name pos:start="216:23" pos:end="216:30">linesize</name></expr>;</expr_stmt>

      </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

  </block_content>}</block></for>



  <expr_stmt pos:start="226:3" pos:end="226:41"><expr pos:start="226:3" pos:end="226:40"><operator pos:start="226:3" pos:end="226:3">*</operator><name pos:start="226:4" pos:end="226:7">pict</name> <operator pos:start="226:9" pos:end="226:9">=</operator> <operator pos:start="226:11" pos:end="226:11">*</operator><operator pos:start="226:12" pos:end="226:12">(</operator><name pos:start="226:13" pos:end="226:19">AVFrame</name><operator pos:start="226:20" pos:end="226:20">*</operator><operator pos:start="226:21" pos:end="226:21">)</operator><operator pos:start="226:22" pos:end="226:22">&amp;</operator><name pos:start="226:23" pos:end="226:40"><name pos:start="226:23" pos:end="226:23">s</name><operator pos:start="226:24" pos:end="226:25">-&gt;</operator><name pos:start="226:26" pos:end="226:40">current_picture</name></name></expr>;</expr_stmt>





  <expr_stmt pos:start="232:3" pos:end="232:19"><expr pos:start="232:3" pos:end="232:18"><call pos:start="232:3" pos:end="232:18"><name pos:start="232:3" pos:end="232:15">MPV_frame_end</name><argument_list pos:start="232:16" pos:end="232:18">(<argument pos:start="232:17" pos:end="232:17"><expr pos:start="232:17" pos:end="232:17"><name pos:start="232:17" pos:end="232:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <expr_stmt pos:start="236:3" pos:end="236:29"><expr pos:start="236:3" pos:end="236:28"><operator pos:start="236:3" pos:end="236:3">*</operator><name pos:start="236:4" pos:end="236:12">data_size</name><operator pos:start="236:13" pos:end="236:13">=</operator><sizeof pos:start="236:14" pos:end="236:28">sizeof<argument_list pos:start="236:20" pos:end="236:28">(<argument pos:start="236:21" pos:end="236:27"><expr pos:start="236:21" pos:end="236:27"><name pos:start="236:21" pos:end="236:27">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt pos:start="238:3" pos:end="238:20"><expr pos:start="238:3" pos:end="238:19"><name pos:start="238:3" pos:end="238:8">result</name> <operator pos:start="238:10" pos:end="238:10">=</operator> <name pos:start="238:12" pos:end="238:19">buf_size</name></expr>;</expr_stmt>

<label pos:start="240:1" pos:end="240:4"><name pos:start="240:1" pos:end="240:3">err</name>:</label>

  <expr_stmt pos:start="242:3" pos:end="242:15"><expr pos:start="242:3" pos:end="242:14"><call pos:start="242:3" pos:end="242:14"><name pos:start="242:3" pos:end="242:9">av_free</name><argument_list pos:start="242:10" pos:end="242:14">(<argument pos:start="242:11" pos:end="242:13"><expr pos:start="242:11" pos:end="242:13"><name pos:start="242:11" pos:end="242:13">pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return pos:start="244:3" pos:end="244:16">return <expr pos:start="244:10" pos:end="244:15"><name pos:start="244:10" pos:end="244:15">result</name></expr>;</return>

</block_content>}</block></function></unit>
