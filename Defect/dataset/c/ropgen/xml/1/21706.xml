<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21706.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">vfio_platform_eoi</name><parameter_list pos:start="1:30" pos:end="1:51">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:40">VFIODevice</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">vbasedev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:41">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">VFIOINTp</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">intp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="9:61"><decl pos:start="7:5" pos:end="9:60"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">VFIOPlatformDevice</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">vdev</name> <init pos:start="7:30" pos:end="9:60">=

        <expr pos:start="9:9" pos:end="9:60"><call pos:start="9:9" pos:end="9:60"><name pos:start="9:9" pos:end="9:20">container_of</name><argument_list pos:start="9:21" pos:end="9:60">(<argument pos:start="9:22" pos:end="9:29"><expr pos:start="9:22" pos:end="9:29"><name pos:start="9:22" pos:end="9:29">vbasedev</name></expr></argument>, <argument pos:start="9:32" pos:end="9:49"><expr pos:start="9:32" pos:end="9:49"><name pos:start="9:32" pos:end="9:49">VFIOPlatformDevice</name></expr></argument>, <argument pos:start="9:52" pos:end="9:59"><expr pos:start="9:52" pos:end="9:59"><name pos:start="9:52" pos:end="9:59">vbasedev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><call pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:19">qemu_mutex_lock</name><argument_list pos:start="13:20" pos:end="13:38">(<argument pos:start="13:21" pos:end="13:37"><expr pos:start="13:21" pos:end="13:37"><operator pos:start="13:21" pos:end="13:21">&amp;</operator><name pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:25">vdev</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:37">intp_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="15:5" pos:end="15:47"><name pos:start="15:5" pos:end="15:17">QLIST_FOREACH</name><argument_list pos:start="15:18" pos:end="15:47">(<argument pos:start="15:19" pos:end="15:22">intp</argument>, <argument pos:start="15:25" pos:end="15:40">&amp;vdev-&gt;intp_list</argument>, <argument pos:start="15:43" pos:end="15:46">next</argument>)</argument_list></macro> <block pos:start="15:49" pos:end="49:5">{<block_content pos:start="17:9" pos:end="47:9">

        <if_stmt pos:start="17:9" pos:end="47:9"><if pos:start="17:9" pos:end="47:9">if <condition pos:start="17:12" pos:end="17:43">(<expr pos:start="17:13" pos:end="17:42"><name pos:start="17:13" pos:end="17:23"><name pos:start="17:13" pos:end="17:16">intp</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">state</name></name> <operator pos:start="17:25" pos:end="17:26">==</operator> <name pos:start="17:28" pos:end="17:42">VFIO_IRQ_ACTIVE</name></expr>)</condition> <block pos:start="17:45" pos:end="47:9">{<block_content pos:start="19:13" pos:end="45:18">

            <expr_stmt pos:start="19:13" pos:end="21:72"><expr pos:start="19:13" pos:end="21:71"><call pos:start="19:13" pos:end="21:71"><name pos:start="19:13" pos:end="19:35">trace_vfio_platform_eoi</name><argument_list pos:start="19:36" pos:end="21:71">(<argument pos:start="19:37" pos:end="19:45"><expr pos:start="19:37" pos:end="19:45"><name pos:start="19:37" pos:end="19:45"><name pos:start="19:37" pos:end="19:40">intp</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:45">pin</name></name></expr></argument>,

                                <argument pos:start="21:33" pos:end="21:70"><expr pos:start="21:33" pos:end="21:70"><call pos:start="21:33" pos:end="21:70"><name pos:start="21:33" pos:end="21:53">event_notifier_get_fd</name><argument_list pos:start="21:54" pos:end="21:70">(<argument pos:start="21:55" pos:end="21:69"><expr pos:start="21:55" pos:end="21:69"><name pos:start="21:55" pos:end="21:69"><name pos:start="21:55" pos:end="21:58">intp</name><operator pos:start="21:59" pos:end="21:60">-&gt;</operator><name pos:start="21:61" pos:end="21:69">interrupt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:44"><expr pos:start="23:13" pos:end="23:43"><name pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:16">intp</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:23">state</name></name> <operator pos:start="23:25" pos:end="23:25">=</operator> <name pos:start="23:27" pos:end="23:43">VFIO_IRQ_INACTIVE</name></expr>;</expr_stmt>



            <comment type="block" pos:start="27:13" pos:end="27:42">/* deassert the virtual IRQ */</comment>

            <expr_stmt pos:start="29:13" pos:end="29:43"><expr pos:start="29:13" pos:end="29:42"><call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:24">qemu_set_irq</name><argument_list pos:start="29:25" pos:end="29:42">(<argument pos:start="29:26" pos:end="29:38"><expr pos:start="29:26" pos:end="29:38"><name pos:start="29:26" pos:end="29:38"><name pos:start="29:26" pos:end="29:29">intp</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:38">qemuirq</name></name></expr></argument>, <argument pos:start="29:41" pos:end="29:41"><expr pos:start="29:41" pos:end="29:41"><literal type="number" pos:start="29:41" pos:end="29:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="33:13" pos:end="39:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:55">(<expr pos:start="33:17" pos:end="33:54"><name pos:start="33:17" pos:end="33:27"><name pos:start="33:17" pos:end="33:20">intp</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:27">flags</name></name> <operator pos:start="33:29" pos:end="33:29">&amp;</operator> <name pos:start="33:31" pos:end="33:54">VFIO_IRQ_INFO_AUTOMASKED</name></expr>)</condition> <block pos:start="33:57" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:65">

                <comment type="block" pos:start="35:17" pos:end="35:62">/* unmasks the physical level-sensitive IRQ */</comment>

                <expr_stmt pos:start="37:17" pos:end="37:65"><expr pos:start="37:17" pos:end="37:64"><call pos:start="37:17" pos:end="37:64"><name pos:start="37:17" pos:end="37:43">vfio_unmask_single_irqindex</name><argument_list pos:start="37:44" pos:end="37:64">(<argument pos:start="37:45" pos:end="37:52"><expr pos:start="37:45" pos:end="37:52"><name pos:start="37:45" pos:end="37:52">vbasedev</name></expr></argument>, <argument pos:start="37:55" pos:end="37:63"><expr pos:start="37:55" pos:end="37:63"><name pos:start="37:55" pos:end="37:63"><name pos:start="37:55" pos:end="37:58">intp</name><operator pos:start="37:59" pos:end="37:60">-&gt;</operator><name pos:start="37:61" pos:end="37:63">pin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="43:13" pos:end="43:54">/* a single IRQ can be active at a time */</comment>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <comment type="block" pos:start="51:5" pos:end="51:62">/* in case there are pending IRQs, handle the first one */</comment>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:51">(<expr pos:start="53:9" pos:end="53:50"><operator pos:start="53:9" pos:end="53:9">!</operator><call pos:start="53:10" pos:end="53:50"><name pos:start="53:10" pos:end="53:23">QSIMPLEQ_EMPTY</name><argument_list pos:start="53:24" pos:end="53:50">(<argument pos:start="53:25" pos:end="53:49"><expr pos:start="53:25" pos:end="53:49"><operator pos:start="53:25" pos:end="53:25">&amp;</operator><name pos:start="53:26" pos:end="53:49"><name pos:start="53:26" pos:end="53:29">vdev</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:49">pending_intp_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:53" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:64">

        <expr_stmt pos:start="55:9" pos:end="55:57"><expr pos:start="55:9" pos:end="55:56"><name pos:start="55:9" pos:end="55:12">intp</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:56"><name pos:start="55:16" pos:end="55:29">QSIMPLEQ_FIRST</name><argument_list pos:start="55:30" pos:end="55:56">(<argument pos:start="55:31" pos:end="55:55"><expr pos:start="55:31" pos:end="55:55"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:55"><name pos:start="55:32" pos:end="55:35">vdev</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:55">pending_intp_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:48"><expr pos:start="57:9" pos:end="57:47"><call pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:41">vfio_intp_inject_pending_lockheld</name><argument_list pos:start="57:42" pos:end="57:47">(<argument pos:start="57:43" pos:end="57:46"><expr pos:start="57:43" pos:end="57:46"><name pos:start="57:43" pos:end="57:46">intp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:64"><expr pos:start="59:9" pos:end="59:63"><call pos:start="59:9" pos:end="59:63"><name pos:start="59:9" pos:end="59:28">QSIMPLEQ_REMOVE_HEAD</name><argument_list pos:start="59:29" pos:end="59:63">(<argument pos:start="59:30" pos:end="59:54"><expr pos:start="59:30" pos:end="59:54"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:54"><name pos:start="59:31" pos:end="59:34">vdev</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:54">pending_intp_queue</name></name></expr></argument>, <argument pos:start="59:57" pos:end="59:62"><expr pos:start="59:57" pos:end="59:62"><name pos:start="59:57" pos:end="59:62">pqnext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:41"><expr pos:start="63:5" pos:end="63:40"><call pos:start="63:5" pos:end="63:40"><name pos:start="63:5" pos:end="63:21">qemu_mutex_unlock</name><argument_list pos:start="63:22" pos:end="63:40">(<argument pos:start="63:23" pos:end="63:39"><expr pos:start="63:23" pos:end="63:39"><operator pos:start="63:23" pos:end="63:23">&amp;</operator><name pos:start="63:24" pos:end="63:39"><name pos:start="63:24" pos:end="63:27">vdev</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:39">intp_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
