<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8438.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:23">init</name><parameter_list pos:start="1:24" pos:end="1:45">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:41"><name pos:start="1:25" pos:end="1:39">AVFilterContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:13">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">SendCmdContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:27">sendcmd</name> <init pos:start="5:29" pos:end="5:39">= <expr pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:33">ctx</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:39">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:17">j</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:60">(<expr pos:start="11:9" pos:end="11:59"><name pos:start="11:9" pos:end="11:34"><name pos:start="11:9" pos:end="11:15">sendcmd</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:34">commands_filename</name></name> <operator pos:start="11:36" pos:end="11:37">&amp;&amp;</operator> <name pos:start="11:39" pos:end="11:59"><name pos:start="11:39" pos:end="11:45">sendcmd</name><operator pos:start="11:46" pos:end="11:47">-&gt;</operator><name pos:start="11:48" pos:end="11:59">commands_str</name></name></expr>)</condition> <block pos:start="11:62" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:31">

        <expr_stmt pos:start="13:9" pos:end="15:83"><expr pos:start="13:9" pos:end="15:82"><call pos:start="13:9" pos:end="15:82"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="15:82">(<argument pos:start="13:16" pos:end="13:18"><expr pos:start="13:16" pos:end="13:18"><name pos:start="13:16" pos:end="13:18">ctx</name></expr></argument>, <argument pos:start="13:21" pos:end="13:32"><expr pos:start="13:21" pos:end="13:32"><name pos:start="13:21" pos:end="13:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="15:16" pos:end="15:81"><expr pos:start="15:16" pos:end="15:81"><literal type="string" pos:start="15:16" pos:end="15:81">"Only one of the filename or commands options must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="59:5"><if pos:start="23:5" pos:end="59:5">if <condition pos:start="23:8" pos:end="23:35">(<expr pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:15">sendcmd</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:34">commands_filename</name></name></expr>)</condition> <block pos:start="23:37" pos:end="59:5">{<block_content pos:start="25:9" pos:end="57:36">

        <decl_stmt pos:start="25:9" pos:end="25:32"><decl pos:start="25:9" pos:end="25:25"><type pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:15">uint8_t</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:25">file_buf</name></decl>, <decl pos:start="25:28" pos:end="25:31"><type ref="prev" pos:start="25:9" pos:end="25:17"><modifier pos:start="25:28" pos:end="25:28">*</modifier></type><name pos:start="25:29" pos:end="25:31">buf</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:28"><decl pos:start="27:9" pos:end="27:27"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">size_t</name></type> <name pos:start="27:16" pos:end="27:27">file_bufsize</name></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="31:60"><expr pos:start="29:9" pos:end="31:59"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="31:59"><name pos:start="29:15" pos:end="29:25">av_file_map</name><argument_list pos:start="29:26" pos:end="31:59">(<argument pos:start="29:27" pos:end="29:52"><expr pos:start="29:27" pos:end="29:52"><name pos:start="29:27" pos:end="29:52"><name pos:start="29:27" pos:end="29:33">sendcmd</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:52">commands_filename</name></name></expr></argument>,

                          <argument pos:start="31:27" pos:end="31:35"><expr pos:start="31:27" pos:end="31:35"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:35">file_buf</name></expr></argument>, <argument pos:start="31:38" pos:end="31:50"><expr pos:start="31:38" pos:end="31:50"><operator pos:start="31:38" pos:end="31:38">&amp;</operator><name pos:start="31:39" pos:end="31:50">file_bufsize</name></expr></argument>, <argument pos:start="31:53" pos:end="31:53"><expr pos:start="31:53" pos:end="31:53"><literal type="number" pos:start="31:53" pos:end="31:53">0</literal></expr></argument>, <argument pos:start="31:56" pos:end="31:58"><expr pos:start="31:56" pos:end="31:58"><name pos:start="31:56" pos:end="31:58">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:23"><if pos:start="33:9" pos:end="35:23">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">&lt;</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:23"><block_content pos:start="35:13" pos:end="35:23">

            <return pos:start="35:13" pos:end="35:23">return <expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:65">/* create a 0-terminated string based on the read file */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:42"><expr pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:11">buf</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:41"><name pos:start="41:15" pos:end="41:23">av_malloc</name><argument_list pos:start="41:24" pos:end="41:41">(<argument pos:start="41:25" pos:end="41:40"><expr pos:start="41:25" pos:end="41:40"><name pos:start="41:25" pos:end="41:36">file_bufsize</name> <operator pos:start="41:38" pos:end="41:38">+</operator> <literal type="number" pos:start="41:40" pos:end="41:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:17">(<expr pos:start="43:13" pos:end="43:16"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:16">buf</name></expr>)</condition> <block pos:start="43:19" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:35">

            <expr_stmt pos:start="45:13" pos:end="45:50"><expr pos:start="45:13" pos:end="45:49"><call pos:start="45:13" pos:end="45:49"><name pos:start="45:13" pos:end="45:25">av_file_unmap</name><argument_list pos:start="45:26" pos:end="45:49">(<argument pos:start="45:27" pos:end="45:34"><expr pos:start="45:27" pos:end="45:34"><name pos:start="45:27" pos:end="45:34">file_buf</name></expr></argument>, <argument pos:start="45:37" pos:end="45:48"><expr pos:start="45:37" pos:end="45:48"><name pos:start="45:37" pos:end="45:48">file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:35">return <expr pos:start="47:20" pos:end="47:34"><call pos:start="47:20" pos:end="47:34"><name pos:start="47:20" pos:end="47:26">AVERROR</name><argument_list pos:start="47:27" pos:end="47:34">(<argument pos:start="47:28" pos:end="47:33"><expr pos:start="47:28" pos:end="47:33"><name pos:start="47:28" pos:end="47:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><call pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:14">memcpy</name><argument_list pos:start="51:15" pos:end="51:43">(<argument pos:start="51:16" pos:end="51:18"><expr pos:start="51:16" pos:end="51:18"><name pos:start="51:16" pos:end="51:18">buf</name></expr></argument>, <argument pos:start="51:21" pos:end="51:28"><expr pos:start="51:21" pos:end="51:28"><name pos:start="51:21" pos:end="51:28">file_buf</name></expr></argument>, <argument pos:start="51:31" pos:end="51:42"><expr pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:42">file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:11">buf</name><index pos:start="53:12" pos:end="53:25">[<expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:24">file_bufsize</name></expr>]</index></name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:46"><expr pos:start="55:9" pos:end="55:45"><call pos:start="55:9" pos:end="55:45"><name pos:start="55:9" pos:end="55:21">av_file_unmap</name><argument_list pos:start="55:22" pos:end="55:45">(<argument pos:start="55:23" pos:end="55:30"><expr pos:start="55:23" pos:end="55:30"><name pos:start="55:23" pos:end="55:30">file_buf</name></expr></argument>, <argument pos:start="55:33" pos:end="55:44"><expr pos:start="55:33" pos:end="55:44"><name pos:start="55:33" pos:end="55:44">file_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:15">sendcmd</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:29">commands_str</name></name> <operator pos:start="57:31" pos:end="57:31">=</operator> <name pos:start="57:33" pos:end="57:35">buf</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="67:19"><if pos:start="63:5" pos:end="67:19">if <condition pos:start="63:8" pos:end="65:64">(<expr pos:start="63:9" pos:end="65:63"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:12">ret</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="65:58"><name pos:start="63:16" pos:end="63:30">parse_intervals</name><argument_list pos:start="63:31" pos:end="65:58">(<argument pos:start="63:32" pos:end="63:50"><expr pos:start="63:32" pos:end="63:50"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:50"><name pos:start="63:33" pos:end="63:39">sendcmd</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:50">intervals</name></name></expr></argument>, <argument pos:start="63:53" pos:end="63:74"><expr pos:start="63:53" pos:end="63:74"><operator pos:start="63:53" pos:end="63:53">&amp;</operator><name pos:start="63:54" pos:end="63:74"><name pos:start="63:54" pos:end="63:60">sendcmd</name><operator pos:start="63:61" pos:end="63:62">-&gt;</operator><name pos:start="63:63" pos:end="63:74">nb_intervals</name></name></expr></argument>,

                               <argument pos:start="65:32" pos:end="65:52"><expr pos:start="65:32" pos:end="65:52"><name pos:start="65:32" pos:end="65:52"><name pos:start="65:32" pos:end="65:38">sendcmd</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:52">commands_str</name></name></expr></argument>, <argument pos:start="65:55" pos:end="65:57"><expr pos:start="65:55" pos:end="65:57"><name pos:start="65:55" pos:end="65:57">ctx</name></expr></argument>)</argument_list></call><operator pos:start="65:59" pos:end="65:59">)</operator> <operator pos:start="65:61" pos:end="65:61">&lt;</operator> <literal type="number" pos:start="65:63" pos:end="65:63">0</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:19"><block_content pos:start="67:9" pos:end="67:19">

        <return pos:start="67:9" pos:end="67:19">return <expr pos:start="67:16" pos:end="67:18"><name pos:start="67:16" pos:end="67:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:35">(<expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:15">sendcmd</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:29">nb_intervals</name></name> <operator pos:start="71:31" pos:end="71:32">==</operator> <literal type="number" pos:start="71:34" pos:end="71:34">0</literal></expr>)</condition> <block pos:start="71:37" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:31">

        <expr_stmt pos:start="73:9" pos:end="73:51"><expr pos:start="73:9" pos:end="73:50"><call pos:start="73:9" pos:end="73:50"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:50">(<argument pos:start="73:16" pos:end="73:18"><expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ctx</name></expr></argument>, <argument pos:start="73:21" pos:end="73:32"><expr pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:35" pos:end="73:49"><expr pos:start="73:35" pos:end="73:49"><literal type="string" pos:start="73:35" pos:end="73:49">"No commands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:31">return <expr pos:start="75:16" pos:end="75:30"><call pos:start="75:16" pos:end="75:30"><name pos:start="75:16" pos:end="75:22">AVERROR</name><argument_list pos:start="75:23" pos:end="75:30">(<argument pos:start="75:24" pos:end="75:29"><expr pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:86"><expr pos:start="81:5" pos:end="81:85"><call pos:start="81:5" pos:end="81:85"><name pos:start="81:5" pos:end="81:9">qsort</name><argument_list pos:start="81:10" pos:end="81:85">(<argument pos:start="81:11" pos:end="81:28"><expr pos:start="81:11" pos:end="81:28"><name pos:start="81:11" pos:end="81:28"><name pos:start="81:11" pos:end="81:17">sendcmd</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:28">intervals</name></name></expr></argument>, <argument pos:start="81:31" pos:end="81:51"><expr pos:start="81:31" pos:end="81:51"><name pos:start="81:31" pos:end="81:51"><name pos:start="81:31" pos:end="81:37">sendcmd</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:51">nb_intervals</name></name></expr></argument>, <argument pos:start="81:54" pos:end="81:69"><expr pos:start="81:54" pos:end="81:69"><sizeof pos:start="81:54" pos:end="81:69">sizeof<argument_list pos:start="81:60" pos:end="81:69">(<argument pos:start="81:61" pos:end="81:68"><expr pos:start="81:61" pos:end="81:68"><name pos:start="81:61" pos:end="81:68">Interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:72" pos:end="81:84"><expr pos:start="81:72" pos:end="81:84"><name pos:start="81:72" pos:end="81:84">cmp_intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:52"><expr pos:start="85:5" pos:end="85:51"><call pos:start="85:5" pos:end="85:51"><name pos:start="85:5" pos:end="85:10">av_log</name><argument_list pos:start="85:11" pos:end="85:51">(<argument pos:start="85:12" pos:end="85:14"><expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">ctx</name></expr></argument>, <argument pos:start="85:17" pos:end="85:28"><expr pos:start="85:17" pos:end="85:28"><name pos:start="85:17" pos:end="85:28">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="85:31" pos:end="85:50"><expr pos:start="85:31" pos:end="85:50"><literal type="string" pos:start="85:31" pos:end="85:50">"Parsed commands:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="109:5">for <control pos:start="87:9" pos:end="87:47">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:42"><expr pos:start="87:17" pos:end="87:41"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:41"><name pos:start="87:21" pos:end="87:27">sendcmd</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:41">nb_intervals</name></name></expr>;</condition> <incr pos:start="87:44" pos:end="87:46"><expr pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:44">i</name><operator pos:start="87:45" pos:end="87:46">++</operator></expr></incr>)</control> <block pos:start="87:49" pos:end="109:5">{<block_content pos:start="89:9" pos:end="107:9">

        <decl_stmt pos:start="89:9" pos:end="89:22"><decl pos:start="89:9" pos:end="89:21"><type pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:16">AVBPrint</name></type> <name pos:start="89:18" pos:end="89:21">pbuf</name></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:52"><decl pos:start="91:9" pos:end="91:51"><type pos:start="91:9" pos:end="91:18"><name pos:start="91:9" pos:end="91:16">Interval</name> <modifier pos:start="91:18" pos:end="91:18">*</modifier></type><name pos:start="91:19" pos:end="91:26">interval</name> <init pos:start="91:28" pos:end="91:51">= <expr pos:start="91:30" pos:end="91:51"><operator pos:start="91:30" pos:end="91:30">&amp;</operator><name pos:start="91:31" pos:end="91:51"><name pos:start="91:31" pos:end="91:37">sendcmd</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:48">intervals</name><index pos:start="91:49" pos:end="91:51">[<expr pos:start="91:50" pos:end="91:50"><name pos:start="91:50" pos:end="91:50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="95:102"><expr pos:start="93:9" pos:end="95:101"><call pos:start="93:9" pos:end="95:101"><name pos:start="93:9" pos:end="93:14">av_log</name><argument_list pos:start="93:15" pos:end="95:101">(<argument pos:start="93:16" pos:end="93:18"><expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ctx</name></expr></argument>, <argument pos:start="93:21" pos:end="93:34"><expr pos:start="93:21" pos:end="93:34"><name pos:start="93:21" pos:end="93:34">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="93:37" pos:end="93:74"><expr pos:start="93:37" pos:end="93:74"><literal type="string" pos:start="93:37" pos:end="93:74">"start_time:%f end_time:%f index:%d\n"</literal></expr></argument>,

               <argument pos:start="95:16" pos:end="95:49"><expr pos:start="95:16" pos:end="95:49"><operator pos:start="95:16" pos:end="95:16">(</operator><name pos:start="95:17" pos:end="95:22">double</name><operator pos:start="95:23" pos:end="95:23">)</operator><name pos:start="95:24" pos:end="95:41"><name pos:start="95:24" pos:end="95:31">interval</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:41">start_ts</name></name><operator pos:start="95:42" pos:end="95:42">/</operator><literal type="number" pos:start="95:43" pos:end="95:49">1000000</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:83"><expr pos:start="95:52" pos:end="95:83"><operator pos:start="95:52" pos:end="95:52">(</operator><name pos:start="95:53" pos:end="95:58">double</name><operator pos:start="95:59" pos:end="95:59">)</operator><name pos:start="95:60" pos:end="95:75"><name pos:start="95:60" pos:end="95:67">interval</name><operator pos:start="95:68" pos:end="95:69">-&gt;</operator><name pos:start="95:70" pos:end="95:75">end_ts</name></name><operator pos:start="95:76" pos:end="95:76">/</operator><literal type="number" pos:start="95:77" pos:end="95:83">1000000</literal></expr></argument>, <argument pos:start="95:86" pos:end="95:100"><expr pos:start="95:86" pos:end="95:100"><name pos:start="95:86" pos:end="95:100"><name pos:start="95:86" pos:end="95:93">interval</name><operator pos:start="95:94" pos:end="95:95">-&gt;</operator><name pos:start="95:96" pos:end="95:100">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="97:9" pos:end="107:9">for <control pos:start="97:13" pos:end="97:51">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">j</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:46"><expr pos:start="97:21" pos:end="97:45"><name pos:start="97:21" pos:end="97:21">j</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <name pos:start="97:25" pos:end="97:45"><name pos:start="97:25" pos:end="97:32">interval</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:45">nb_commands</name></name></expr>;</condition> <incr pos:start="97:48" pos:end="97:50"><expr pos:start="97:48" pos:end="97:50"><name pos:start="97:48" pos:end="97:48">j</name><operator pos:start="97:49" pos:end="97:50">++</operator></expr></incr>)</control> <block pos:start="97:53" pos:end="107:9">{<block_content pos:start="99:13" pos:end="105:111">

            <decl_stmt pos:start="99:13" pos:end="99:50"><decl pos:start="99:13" pos:end="99:49"><type pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:19">Command</name> <modifier pos:start="99:21" pos:end="99:21">*</modifier></type><name pos:start="99:22" pos:end="99:24">cmd</name> <init pos:start="99:26" pos:end="99:49">= <expr pos:start="99:28" pos:end="99:49"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:49"><name pos:start="99:29" pos:end="99:36">interval</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:46">commands</name><index pos:start="99:47" pos:end="99:49">[<expr pos:start="99:48" pos:end="99:48"><name pos:start="99:48" pos:end="99:48">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="101:13" pos:end="105:111"><expr pos:start="101:13" pos:end="105:110"><call pos:start="101:13" pos:end="105:110"><name pos:start="101:13" pos:end="101:18">av_log</name><argument_list pos:start="101:19" pos:end="105:110">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">ctx</name></expr></argument>, <argument pos:start="101:25" pos:end="101:38"><expr pos:start="101:25" pos:end="101:38"><name pos:start="101:25" pos:end="101:38">AV_LOG_VERBOSE</name></expr></argument>,

                   <argument pos:start="103:20" pos:end="103:68"><expr pos:start="103:20" pos:end="103:68"><literal type="string" pos:start="103:20" pos:end="103:68">"    [%s] target:%s command:%s arg:%s index:%d\n"</literal></expr></argument>,

                   <argument pos:start="105:20" pos:end="105:60"><expr pos:start="105:20" pos:end="105:60"><call pos:start="105:20" pos:end="105:60"><name pos:start="105:20" pos:end="105:41">make_command_flags_str</name><argument_list pos:start="105:42" pos:end="105:60">(<argument pos:start="105:43" pos:end="105:47"><expr pos:start="105:43" pos:end="105:47"><operator pos:start="105:43" pos:end="105:43">&amp;</operator><name pos:start="105:44" pos:end="105:47">pbuf</name></expr></argument>, <argument pos:start="105:50" pos:end="105:59"><expr pos:start="105:50" pos:end="105:59"><name pos:start="105:50" pos:end="105:59"><name pos:start="105:50" pos:end="105:52">cmd</name><operator pos:start="105:53" pos:end="105:54">-&gt;</operator><name pos:start="105:55" pos:end="105:59">flags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="105:63" pos:end="105:73"><expr pos:start="105:63" pos:end="105:73"><name pos:start="105:63" pos:end="105:73"><name pos:start="105:63" pos:end="105:65">cmd</name><operator pos:start="105:66" pos:end="105:67">-&gt;</operator><name pos:start="105:68" pos:end="105:73">target</name></name></expr></argument>, <argument pos:start="105:76" pos:end="105:87"><expr pos:start="105:76" pos:end="105:87"><name pos:start="105:76" pos:end="105:87"><name pos:start="105:76" pos:end="105:78">cmd</name><operator pos:start="105:79" pos:end="105:80">-&gt;</operator><name pos:start="105:81" pos:end="105:87">command</name></name></expr></argument>, <argument pos:start="105:90" pos:end="105:97"><expr pos:start="105:90" pos:end="105:97"><name pos:start="105:90" pos:end="105:97"><name pos:start="105:90" pos:end="105:92">cmd</name><operator pos:start="105:93" pos:end="105:94">-&gt;</operator><name pos:start="105:95" pos:end="105:97">arg</name></name></expr></argument>, <argument pos:start="105:100" pos:end="105:109"><expr pos:start="105:100" pos:end="105:109"><name pos:start="105:100" pos:end="105:109"><name pos:start="105:100" pos:end="105:102">cmd</name><operator pos:start="105:103" pos:end="105:104">-&gt;</operator><name pos:start="105:105" pos:end="105:109">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
