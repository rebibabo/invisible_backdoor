<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18293.c" pos:tabs="8"><function pos:start="1:1" pos:end="377:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">vc1_decode_i_block_adv</name><parameter_list pos:start="1:34" pos:end="1:112">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:44">VC1Context</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">v</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:66"><decl pos:start="1:50" pos:end="1:66"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:56">DCTELEM</name></type> <name pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:62">block</name><index pos:start="1:63" pos:end="1:66">[<expr pos:start="1:64" pos:end="1:65"><literal type="number" pos:start="1:64" pos:end="1:65">64</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:73"><decl pos:start="1:69" pos:end="1:73"><type pos:start="1:69" pos:end="1:73"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:73">n</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:84"><decl pos:start="1:76" pos:end="1:84"><type pos:start="1:76" pos:end="1:84"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:84">coded</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:99"><decl pos:start="1:87" pos:end="1:99"><type pos:start="1:87" pos:end="1:99"><name pos:start="1:87" pos:end="1:89">int</name></type> <name pos:start="1:91" pos:end="1:99">codingset</name></decl></parameter>, <parameter pos:start="1:102" pos:end="1:111"><decl pos:start="1:102" pos:end="1:111"><type pos:start="1:102" pos:end="1:111"><name pos:start="1:102" pos:end="1:104">int</name></type> <name pos:start="1:106" pos:end="1:111">mquant</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="377:1">{<block_content pos:start="5:5" pos:end="375:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GetBitContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:32">= <expr pos:start="5:25" pos:end="5:32"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:32"><name pos:start="5:26" pos:end="5:26">v</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:30">.</operator><name pos:start="5:31" pos:end="5:32">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:26">v</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">dc_pred_dir</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="9:26" pos:end="9:66">/* Direction of the DC prediction used */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">run_diff</name></decl>, <decl pos:start="11:19" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:19">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int16_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">dc_val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:19">ac_val</name></decl>, <decl pos:start="15:22" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:29">ac_val2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">dcdiff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:51"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">a_avail</name> <init pos:start="19:17" pos:end="19:28">= <expr pos:start="19:19" pos:end="19:28"><name pos:start="19:19" pos:end="19:28"><name pos:start="19:19" pos:end="19:19">v</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:28">a_avail</name></name></expr></init></decl>, <decl pos:start="19:31" pos:end="19:50"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:31" pos:end="19:37">c_avail</name> <init pos:start="19:39" pos:end="19:50">= <expr pos:start="19:41" pos:end="19:50"><name pos:start="19:41" pos:end="19:50"><name pos:start="19:41" pos:end="19:41">v</name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator><name pos:start="19:44" pos:end="19:50">c_avail</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">use_pred</name> <init pos:start="21:18" pos:end="21:29">= <expr pos:start="21:20" pos:end="21:29"><name pos:start="21:20" pos:end="21:29"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:29">ac_pred</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:13">scale</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:10"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:10">q1</name></decl>, <decl pos:start="25:13" pos:end="25:18"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:13" pos:end="25:14">q2</name> <init pos:start="25:16" pos:end="25:18">= <expr pos:start="25:18" pos:end="25:18"><literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:50"><decl pos:start="27:5" pos:end="27:49"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:14">mb_pos</name> <init pos:start="27:16" pos:end="27:49">= <expr pos:start="27:18" pos:end="27:49"><name pos:start="27:18" pos:end="27:24"><name pos:start="27:18" pos:end="27:18">s</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:24">mb_x</name></name> <operator pos:start="27:26" pos:end="27:26">+</operator> <name pos:start="27:28" pos:end="27:34"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:34">mb_y</name></name> <operator pos:start="27:36" pos:end="27:36">*</operator> <name pos:start="27:38" pos:end="27:49"><name pos:start="27:38" pos:end="27:38">s</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:49">mb_stride</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:29">/* Get DC differential */</comment>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:14">(<expr pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:9">n</name> <operator pos:start="33:11" pos:end="33:11">&lt;</operator> <literal type="number" pos:start="33:13" pos:end="33:13">4</literal></expr>)</condition> <block pos:start="33:16" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:97">

        <expr_stmt pos:start="35:9" pos:end="35:97"><expr pos:start="35:9" pos:end="35:96"><name pos:start="35:9" pos:end="35:14">dcdiff</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:96"><name pos:start="35:18" pos:end="35:25">get_vlc2</name><argument_list pos:start="35:26" pos:end="35:96">(<argument pos:start="35:27" pos:end="35:32"><expr pos:start="35:27" pos:end="35:32"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:32"><name pos:start="35:28" pos:end="35:28">s</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:32">gb</name></name></expr></argument>, <argument pos:start="35:35" pos:end="35:79"><expr pos:start="35:35" pos:end="35:79"><name pos:start="35:35" pos:end="35:73"><name pos:start="35:35" pos:end="35:54">ff_msmp4_dc_luma_vlc</name><index pos:start="35:55" pos:end="35:73">[<expr pos:start="35:56" pos:end="35:72"><name pos:start="35:56" pos:end="35:72"><name pos:start="35:56" pos:end="35:56">s</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:72">dc_table_index</name></name></expr>]</index></name><operator pos:start="35:74" pos:end="35:74">.</operator><name pos:start="35:75" pos:end="35:79">table</name></expr></argument>, <argument pos:start="35:82" pos:end="35:92"><expr pos:start="35:82" pos:end="35:92"><name pos:start="35:82" pos:end="35:92">DC_VLC_BITS</name></expr></argument>, <argument pos:start="35:95" pos:end="35:95"><expr pos:start="35:95" pos:end="35:95"><literal type="number" pos:start="35:95" pos:end="35:95">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="41:5">else <block pos:start="37:12" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:99">

        <expr_stmt pos:start="39:9" pos:end="39:99"><expr pos:start="39:9" pos:end="39:98"><name pos:start="39:9" pos:end="39:14">dcdiff</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:98"><name pos:start="39:18" pos:end="39:25">get_vlc2</name><argument_list pos:start="39:26" pos:end="39:98">(<argument pos:start="39:27" pos:end="39:32"><expr pos:start="39:27" pos:end="39:32"><operator pos:start="39:27" pos:end="39:27">&amp;</operator><name pos:start="39:28" pos:end="39:32"><name pos:start="39:28" pos:end="39:28">s</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:32">gb</name></name></expr></argument>, <argument pos:start="39:35" pos:end="39:81"><expr pos:start="39:35" pos:end="39:81"><name pos:start="39:35" pos:end="39:75"><name pos:start="39:35" pos:end="39:56">ff_msmp4_dc_chroma_vlc</name><index pos:start="39:57" pos:end="39:75">[<expr pos:start="39:58" pos:end="39:74"><name pos:start="39:58" pos:end="39:74"><name pos:start="39:58" pos:end="39:58">s</name><operator pos:start="39:59" pos:end="39:60">-&gt;</operator><name pos:start="39:61" pos:end="39:74">dc_table_index</name></name></expr>]</index></name><operator pos:start="39:76" pos:end="39:76">.</operator><name pos:start="39:77" pos:end="39:81">table</name></expr></argument>, <argument pos:start="39:84" pos:end="39:94"><expr pos:start="39:84" pos:end="39:94"><name pos:start="39:84" pos:end="39:94">DC_VLC_BITS</name></expr></argument>, <argument pos:start="39:97" pos:end="39:97"><expr pos:start="39:97" pos:end="39:97"><literal type="number" pos:start="39:97" pos:end="39:97">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:14">dcdiff</name> <operator pos:start="43:16" pos:end="43:16">&lt;</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>)</condition><block pos:start="43:20" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <expr_stmt pos:start="45:9" pos:end="45:59"><expr pos:start="45:9" pos:end="45:58"><call pos:start="45:9" pos:end="45:58"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:58">(<argument pos:start="45:16" pos:end="45:23"><expr pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:16">s</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:23">avctx</name></name></expr></argument>, <argument pos:start="45:26" pos:end="45:37"><expr pos:start="45:26" pos:end="45:37"><name pos:start="45:26" pos:end="45:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:40" pos:end="45:57"><expr pos:start="45:40" pos:end="45:57"><literal type="string" pos:start="45:40" pos:end="45:57">"Illegal DC VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="87:5"><if pos:start="51:5" pos:end="87:5">if <condition pos:start="51:8" pos:end="51:15">(<expr pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:14">dcdiff</name></expr>)</condition>

    <block pos:start="53:5" pos:end="87:5">{<block_content pos:start="55:9" pos:end="85:29">

        <if_stmt pos:start="55:9" pos:end="81:9"><if pos:start="55:9" pos:end="67:9">if <condition pos:start="55:12" pos:end="55:48">(<expr pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:18">dcdiff</name> <operator pos:start="55:20" pos:end="55:21">==</operator> <literal type="number" pos:start="55:23" pos:end="55:25">119</literal></expr> <comment type="block" pos:start="55:27" pos:end="55:47">/* ESC index value */</comment>)</condition>

        <block pos:start="57:9" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:42">

            <comment type="block" pos:start="59:13" pos:end="59:32">/* TODO: Optimize */</comment>

            <if_stmt pos:start="61:13" pos:end="65:42"><if pos:start="61:13" pos:end="61:55">if <condition pos:start="61:16" pos:end="61:28">(<expr pos:start="61:17" pos:end="61:27"><name pos:start="61:17" pos:end="61:22">mquant</name> <operator pos:start="61:24" pos:end="61:25">==</operator> <literal type="number" pos:start="61:27" pos:end="61:27">1</literal></expr>)</condition><block type="pseudo" pos:start="61:30" pos:end="61:55"><block_content pos:start="61:30" pos:end="61:55"> <expr_stmt pos:start="61:30" pos:end="61:55"><expr pos:start="61:30" pos:end="61:54"><name pos:start="61:30" pos:end="61:35">dcdiff</name> <operator pos:start="61:37" pos:end="61:37">=</operator> <call pos:start="61:39" pos:end="61:54"><name pos:start="61:39" pos:end="61:46">get_bits</name><argument_list pos:start="61:47" pos:end="61:54">(<argument pos:start="61:48" pos:end="61:49"><expr pos:start="61:48" pos:end="61:49"><name pos:start="61:48" pos:end="61:49">gb</name></expr></argument>, <argument pos:start="61:52" pos:end="61:53"><expr pos:start="61:52" pos:end="61:53"><literal type="number" pos:start="61:52" pos:end="61:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="63:13" pos:end="63:59">else if <condition pos:start="63:21" pos:end="63:33">(<expr pos:start="63:22" pos:end="63:32"><name pos:start="63:22" pos:end="63:27">mquant</name> <operator pos:start="63:29" pos:end="63:30">==</operator> <literal type="number" pos:start="63:32" pos:end="63:32">2</literal></expr>)</condition><block type="pseudo" pos:start="63:35" pos:end="63:59"><block_content pos:start="63:35" pos:end="63:59"> <expr_stmt pos:start="63:35" pos:end="63:59"><expr pos:start="63:35" pos:end="63:58"><name pos:start="63:35" pos:end="63:40">dcdiff</name> <operator pos:start="63:42" pos:end="63:42">=</operator> <call pos:start="63:44" pos:end="63:58"><name pos:start="63:44" pos:end="63:51">get_bits</name><argument_list pos:start="63:52" pos:end="63:58">(<argument pos:start="63:53" pos:end="63:54"><expr pos:start="63:53" pos:end="63:54"><name pos:start="63:53" pos:end="63:54">gb</name></expr></argument>, <argument pos:start="63:57" pos:end="63:57"><expr pos:start="63:57" pos:end="63:57"><literal type="number" pos:start="63:57" pos:end="63:57">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="65:13" pos:end="65:42">else<block type="pseudo" pos:start="65:18" pos:end="65:42"><block_content pos:start="65:18" pos:end="65:42"> <expr_stmt pos:start="65:18" pos:end="65:42"><expr pos:start="65:18" pos:end="65:41"><name pos:start="65:18" pos:end="65:23">dcdiff</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:41"><name pos:start="65:27" pos:end="65:34">get_bits</name><argument_list pos:start="65:35" pos:end="65:41">(<argument pos:start="65:36" pos:end="65:37"><expr pos:start="65:36" pos:end="65:37"><name pos:start="65:36" pos:end="65:37">gb</name></expr></argument>, <argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><literal type="number" pos:start="65:40" pos:end="65:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if>

        <else pos:start="69:9" pos:end="81:9">else

        <block pos:start="71:9" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:59">

            <if_stmt pos:start="73:13" pos:end="79:59"><if pos:start="73:13" pos:end="75:59">if <condition pos:start="73:16" pos:end="73:28">(<expr pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:22">mquant</name> <operator pos:start="73:24" pos:end="73:25">==</operator> <literal type="number" pos:start="73:27" pos:end="73:27">1</literal></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:59"><block_content pos:start="75:17" pos:end="75:59">

                <expr_stmt pos:start="75:17" pos:end="75:59"><expr pos:start="75:17" pos:end="75:58"><name pos:start="75:17" pos:end="75:22">dcdiff</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <operator pos:start="75:26" pos:end="75:26">(</operator><name pos:start="75:27" pos:end="75:32">dcdiff</name><operator pos:start="75:33" pos:end="75:34">&lt;&lt;</operator><literal type="number" pos:start="75:35" pos:end="75:35">2</literal><operator pos:start="75:36" pos:end="75:36">)</operator> <operator pos:start="75:38" pos:end="75:38">+</operator> <call pos:start="75:40" pos:end="75:54"><name pos:start="75:40" pos:end="75:47">get_bits</name><argument_list pos:start="75:48" pos:end="75:54">(<argument pos:start="75:49" pos:end="75:50"><expr pos:start="75:49" pos:end="75:50"><name pos:start="75:49" pos:end="75:50">gb</name></expr></argument>, <argument pos:start="75:53" pos:end="75:53"><expr pos:start="75:53" pos:end="75:53"><literal type="number" pos:start="75:53" pos:end="75:53">2</literal></expr></argument>)</argument_list></call> <operator pos:start="75:56" pos:end="75:56">-</operator> <literal type="number" pos:start="75:58" pos:end="75:58">3</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="77:13" pos:end="79:59">else if <condition pos:start="77:21" pos:end="77:33">(<expr pos:start="77:22" pos:end="77:32"><name pos:start="77:22" pos:end="77:27">mquant</name> <operator pos:start="77:29" pos:end="77:30">==</operator> <literal type="number" pos:start="77:32" pos:end="77:32">2</literal></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:59"><block_content pos:start="79:17" pos:end="79:59">

                <expr_stmt pos:start="79:17" pos:end="79:59"><expr pos:start="79:17" pos:end="79:58"><name pos:start="79:17" pos:end="79:22">dcdiff</name> <operator pos:start="79:24" pos:end="79:24">=</operator> <operator pos:start="79:26" pos:end="79:26">(</operator><name pos:start="79:27" pos:end="79:32">dcdiff</name><operator pos:start="79:33" pos:end="79:34">&lt;&lt;</operator><literal type="number" pos:start="79:35" pos:end="79:35">1</literal><operator pos:start="79:36" pos:end="79:36">)</operator> <operator pos:start="79:38" pos:end="79:38">+</operator> <call pos:start="79:40" pos:end="79:54"><name pos:start="79:40" pos:end="79:47">get_bits</name><argument_list pos:start="79:48" pos:end="79:54">(<argument pos:start="79:49" pos:end="79:50"><expr pos:start="79:49" pos:end="79:50"><name pos:start="79:49" pos:end="79:50">gb</name></expr></argument>, <argument pos:start="79:53" pos:end="79:53"><expr pos:start="79:53" pos:end="79:53"><literal type="number" pos:start="79:53" pos:end="79:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="79:56" pos:end="79:56">-</operator> <literal type="number" pos:start="79:58" pos:end="79:58">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="83:9" pos:end="85:29"><if pos:start="83:9" pos:end="85:29">if <condition pos:start="83:12" pos:end="83:28">(<expr pos:start="83:13" pos:end="83:27"><call pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:20">get_bits</name><argument_list pos:start="83:21" pos:end="83:27">(<argument pos:start="83:22" pos:end="83:23"><expr pos:start="83:22" pos:end="83:23"><name pos:start="83:22" pos:end="83:23">gb</name></expr></argument>, <argument pos:start="83:26" pos:end="83:26"><expr pos:start="83:26" pos:end="83:26"><literal type="number" pos:start="83:26" pos:end="83:26">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:29"><block_content pos:start="85:13" pos:end="85:29">

            <expr_stmt pos:start="85:13" pos:end="85:29"><expr pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:18">dcdiff</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <operator pos:start="85:22" pos:end="85:22">-</operator><name pos:start="85:23" pos:end="85:28">dcdiff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:20">/* Prediction */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:103"><expr pos:start="93:5" pos:end="93:102"><name pos:start="93:5" pos:end="93:10">dcdiff</name> <operator pos:start="93:12" pos:end="93:13">+=</operator> <call pos:start="93:15" pos:end="93:102"><name pos:start="93:15" pos:end="93:25">vc1_pred_dc</name><argument_list pos:start="93:26" pos:end="93:102">(<argument pos:start="93:27" pos:end="93:31"><expr pos:start="93:27" pos:end="93:31"><operator pos:start="93:27" pos:end="93:27">&amp;</operator><name pos:start="93:28" pos:end="93:31"><name pos:start="93:28" pos:end="93:28">v</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:31">s</name></name></expr></argument>, <argument pos:start="93:34" pos:end="93:43"><expr pos:start="93:34" pos:end="93:43"><name pos:start="93:34" pos:end="93:43"><name pos:start="93:34" pos:end="93:34">v</name><operator pos:start="93:35" pos:end="93:36">-&gt;</operator><name pos:start="93:37" pos:end="93:43">overlap</name></name></expr></argument>, <argument pos:start="93:46" pos:end="93:51"><expr pos:start="93:46" pos:end="93:51"><name pos:start="93:46" pos:end="93:51">mquant</name></expr></argument>, <argument pos:start="93:54" pos:end="93:54"><expr pos:start="93:54" pos:end="93:54"><name pos:start="93:54" pos:end="93:54">n</name></expr></argument>, <argument pos:start="93:57" pos:end="93:66"><expr pos:start="93:57" pos:end="93:66"><name pos:start="93:57" pos:end="93:66"><name pos:start="93:57" pos:end="93:57">v</name><operator pos:start="93:58" pos:end="93:59">-&gt;</operator><name pos:start="93:60" pos:end="93:66">a_avail</name></name></expr></argument>, <argument pos:start="93:69" pos:end="93:78"><expr pos:start="93:69" pos:end="93:78"><name pos:start="93:69" pos:end="93:78"><name pos:start="93:69" pos:end="93:69">v</name><operator pos:start="93:70" pos:end="93:71">-&gt;</operator><name pos:start="93:72" pos:end="93:78">c_avail</name></name></expr></argument>, <argument pos:start="93:81" pos:end="93:87"><expr pos:start="93:81" pos:end="93:87"><operator pos:start="93:81" pos:end="93:81">&amp;</operator><name pos:start="93:82" pos:end="93:87">dc_val</name></expr></argument>, <argument pos:start="93:90" pos:end="93:101"><expr pos:start="93:90" pos:end="93:101"><operator pos:start="93:90" pos:end="93:90">&amp;</operator><name pos:start="93:91" pos:end="93:101">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:21"><expr pos:start="95:5" pos:end="95:20"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:11">dc_val</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <name pos:start="95:15" pos:end="95:20">dcdiff</name></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:59">/* Store the quantized DC coeff, used for prediction */</comment>

    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:14">(<expr pos:start="101:9" pos:end="101:13"><name pos:start="101:9" pos:end="101:9">n</name> <operator pos:start="101:11" pos:end="101:11">&lt;</operator> <literal type="number" pos:start="101:13" pos:end="101:13">4</literal></expr>)</condition> <block pos:start="101:16" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:42">

        <expr_stmt pos:start="103:9" pos:end="103:42"><expr pos:start="103:9" pos:end="103:41"><name pos:start="103:9" pos:end="103:16"><name pos:start="103:9" pos:end="103:13">block</name><index pos:start="103:14" pos:end="103:16">[<expr pos:start="103:15" pos:end="103:15"><literal type="number" pos:start="103:15" pos:end="103:15">0</literal></expr>]</index></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <name pos:start="103:20" pos:end="103:25">dcdiff</name> <operator pos:start="103:27" pos:end="103:27">*</operator> <name pos:start="103:29" pos:end="103:41"><name pos:start="103:29" pos:end="103:29">s</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:41">y_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="109:5">else <block pos:start="105:12" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:42">

        <expr_stmt pos:start="107:9" pos:end="107:42"><expr pos:start="107:9" pos:end="107:41"><name pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:13">block</name><index pos:start="107:14" pos:end="107:16">[<expr pos:start="107:15" pos:end="107:15"><literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>]</index></name> <operator pos:start="107:18" pos:end="107:18">=</operator> <name pos:start="107:20" pos:end="107:25">dcdiff</name> <operator pos:start="107:27" pos:end="107:27">*</operator> <name pos:start="107:29" pos:end="107:41"><name pos:start="107:29" pos:end="107:29">s</name><operator pos:start="107:30" pos:end="107:31">-&gt;</operator><name pos:start="107:32" pos:end="107:41">c_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="111:5" pos:end="111:16">/* Skip ? */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:17"><expr pos:start="113:5" pos:end="113:16"><name pos:start="113:5" pos:end="113:12">run_diff</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <literal type="number" pos:start="113:16" pos:end="113:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:10"><expr pos:start="115:5" pos:end="115:9"><name pos:start="115:5" pos:end="115:5">i</name> <operator pos:start="115:7" pos:end="115:7">=</operator> <literal type="number" pos:start="115:9" pos:end="115:9">0</literal></expr>;</expr_stmt>



    <comment type="line" pos:start="119:5" pos:end="119:17">//AC Decoding</comment>

    <expr_stmt pos:start="121:5" pos:end="121:10"><expr pos:start="121:5" pos:end="121:9"><name pos:start="121:5" pos:end="121:5">i</name> <operator pos:start="121:7" pos:end="121:7">=</operator> <literal type="number" pos:start="121:9" pos:end="121:9">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:69">/* check if AC is needed at all and adjust direction if needed */</comment>

    <if_stmt pos:start="127:5" pos:end="127:33"><if pos:start="127:5" pos:end="127:33">if<condition pos:start="127:7" pos:end="127:16">(<expr pos:start="127:8" pos:end="127:15"><operator pos:start="127:8" pos:end="127:8">!</operator><name pos:start="127:9" pos:end="127:15">a_avail</name></expr>)</condition><block type="pseudo" pos:start="127:18" pos:end="127:33"><block_content pos:start="127:18" pos:end="127:33"> <expr_stmt pos:start="127:18" pos:end="127:33"><expr pos:start="127:18" pos:end="127:32"><name pos:start="127:18" pos:end="127:28">dc_pred_dir</name> <operator pos:start="127:30" pos:end="127:30">=</operator> <literal type="number" pos:start="127:32" pos:end="127:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="129:33"><if pos:start="129:5" pos:end="129:33">if<condition pos:start="129:7" pos:end="129:16">(<expr pos:start="129:8" pos:end="129:15"><operator pos:start="129:8" pos:end="129:8">!</operator><name pos:start="129:9" pos:end="129:15">c_avail</name></expr>)</condition><block type="pseudo" pos:start="129:18" pos:end="129:33"><block_content pos:start="129:18" pos:end="129:33"> <expr_stmt pos:start="129:18" pos:end="129:33"><expr pos:start="129:18" pos:end="129:32"><name pos:start="129:18" pos:end="129:28">dc_pred_dir</name> <operator pos:start="129:30" pos:end="129:30">=</operator> <literal type="number" pos:start="129:32" pos:end="129:32">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="131:42"><if pos:start="131:5" pos:end="131:42">if<condition pos:start="131:7" pos:end="131:28">(<expr pos:start="131:8" pos:end="131:27"><operator pos:start="131:8" pos:end="131:8">!</operator><name pos:start="131:9" pos:end="131:15">a_avail</name> <operator pos:start="131:17" pos:end="131:18">&amp;&amp;</operator> <operator pos:start="131:20" pos:end="131:20">!</operator><name pos:start="131:21" pos:end="131:27">c_avail</name></expr>)</condition><block type="pseudo" pos:start="131:30" pos:end="131:42"><block_content pos:start="131:30" pos:end="131:42"> <expr_stmt pos:start="131:30" pos:end="131:42"><expr pos:start="131:30" pos:end="131:41"><name pos:start="131:30" pos:end="131:37">use_pred</name> <operator pos:start="131:39" pos:end="131:39">=</operator> <literal type="number" pos:start="131:41" pos:end="131:41">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:54"><expr pos:start="133:5" pos:end="133:53"><name pos:start="133:5" pos:end="133:10">ac_val</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <name pos:start="133:14" pos:end="133:28"><name pos:start="133:14" pos:end="133:14">s</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:22">ac_val</name><index pos:start="133:23" pos:end="133:25">[<expr pos:start="133:24" pos:end="133:24"><literal type="number" pos:start="133:24" pos:end="133:24">0</literal></expr>]</index><index pos:start="133:26" pos:end="133:28">[<expr pos:start="133:27" pos:end="133:27"><literal type="number" pos:start="133:27" pos:end="133:27">0</literal></expr>]</index></name> <operator pos:start="133:30" pos:end="133:30">+</operator> <name pos:start="133:32" pos:end="133:48"><name pos:start="133:32" pos:end="133:32">s</name><operator pos:start="133:33" pos:end="133:34">-&gt;</operator><name pos:start="133:35" pos:end="133:45">block_index</name><index pos:start="133:46" pos:end="133:48">[<expr pos:start="133:47" pos:end="133:47"><name pos:start="133:47" pos:end="133:47">n</name></expr>]</index></name> <operator pos:start="133:50" pos:end="133:50">*</operator> <literal type="number" pos:start="133:52" pos:end="133:53">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:11">ac_val2</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <name pos:start="135:15" pos:end="135:20">ac_val</name></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:35"><expr pos:start="139:5" pos:end="139:34"><name pos:start="139:5" pos:end="139:9">scale</name> <operator pos:start="139:11" pos:end="139:11">=</operator> <name pos:start="139:13" pos:end="139:18">mquant</name> <operator pos:start="139:20" pos:end="139:20">*</operator> <literal type="number" pos:start="139:22" pos:end="139:24">2</literal> <operator pos:start="139:24" pos:end="139:24">+</operator> <name pos:start="139:26" pos:end="139:34"><name pos:start="139:26" pos:end="139:26">v</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:34">halfpq</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="143:5" pos:end="149:40"><if pos:start="143:5" pos:end="145:21">if<condition pos:start="143:7" pos:end="143:19">(<expr pos:start="143:8" pos:end="143:18"><name pos:start="143:8" pos:end="143:18">dc_pred_dir</name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:21"><block_content pos:start="145:9" pos:end="145:21"> <comment type="line" pos:start="143:21" pos:end="143:26">//left</comment>

        <expr_stmt pos:start="145:9" pos:end="145:21"><expr pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:14">ac_val</name> <operator pos:start="145:16" pos:end="145:17">-=</operator> <literal type="number" pos:start="145:19" pos:end="145:20">16</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="147:5" pos:end="149:40">else<block type="pseudo" pos:start="149:9" pos:end="149:40"><block_content pos:start="149:9" pos:end="149:40"> <comment type="line" pos:start="147:10" pos:end="147:14">//top</comment>

        <expr_stmt pos:start="149:9" pos:end="149:40"><expr pos:start="149:9" pos:end="149:39"><name pos:start="149:9" pos:end="149:14">ac_val</name> <operator pos:start="149:16" pos:end="149:17">-=</operator> <literal type="number" pos:start="149:19" pos:end="149:20">16</literal> <operator pos:start="149:22" pos:end="149:22">*</operator> <name pos:start="149:24" pos:end="149:39"><name pos:start="149:24" pos:end="149:24">s</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:36">block_wrap</name><index pos:start="149:37" pos:end="149:39">[<expr pos:start="149:38" pos:end="149:38"><name pos:start="149:38" pos:end="149:38">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:49"><expr pos:start="153:5" pos:end="153:48"><name pos:start="153:5" pos:end="153:6">q1</name> <operator pos:start="153:8" pos:end="153:8">=</operator> <name pos:start="153:10" pos:end="153:48"><name pos:start="153:10" pos:end="153:10">s</name><operator pos:start="153:11" pos:end="153:12">-&gt;</operator><name pos:start="153:13" pos:end="153:27">current_picture</name><operator pos:start="153:28" pos:end="153:28">.</operator><name pos:start="153:29" pos:end="153:40">qscale_table</name><index pos:start="153:41" pos:end="153:48">[<expr pos:start="153:42" pos:end="153:47"><name pos:start="153:42" pos:end="153:47">mb_pos</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="155:80"><if pos:start="155:5" pos:end="155:80">if<condition pos:start="155:7" pos:end="155:30">(<expr pos:start="155:8" pos:end="155:29"><name pos:start="155:8" pos:end="155:18">dc_pred_dir</name> <operator pos:start="155:20" pos:end="155:21">&amp;&amp;</operator> <name pos:start="155:23" pos:end="155:29">c_avail</name></expr>)</condition><block type="pseudo" pos:start="155:32" pos:end="155:80"><block_content pos:start="155:32" pos:end="155:80"> <expr_stmt pos:start="155:32" pos:end="155:80"><expr pos:start="155:32" pos:end="155:79"><name pos:start="155:32" pos:end="155:33">q2</name> <operator pos:start="155:35" pos:end="155:35">=</operator> <name pos:start="155:37" pos:end="155:79"><name pos:start="155:37" pos:end="155:37">s</name><operator pos:start="155:38" pos:end="155:39">-&gt;</operator><name pos:start="155:40" pos:end="155:54">current_picture</name><operator pos:start="155:55" pos:end="155:55">.</operator><name pos:start="155:56" pos:end="155:67">qscale_table</name><index pos:start="155:68" pos:end="155:79">[<expr pos:start="155:69" pos:end="155:78"><name pos:start="155:69" pos:end="155:74">mb_pos</name> <operator pos:start="155:76" pos:end="155:76">-</operator> <literal type="number" pos:start="155:78" pos:end="155:78">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="157:5" pos:end="157:92"><if pos:start="157:5" pos:end="157:92">if<condition pos:start="157:7" pos:end="157:31">(<expr pos:start="157:8" pos:end="157:30"><operator pos:start="157:8" pos:end="157:8">!</operator><name pos:start="157:9" pos:end="157:19">dc_pred_dir</name> <operator pos:start="157:21" pos:end="157:22">&amp;&amp;</operator> <name pos:start="157:24" pos:end="157:30">a_avail</name></expr>)</condition><block type="pseudo" pos:start="157:33" pos:end="157:92"><block_content pos:start="157:33" pos:end="157:92"> <expr_stmt pos:start="157:33" pos:end="157:92"><expr pos:start="157:33" pos:end="157:91"><name pos:start="157:33" pos:end="157:34">q2</name> <operator pos:start="157:36" pos:end="157:36">=</operator> <name pos:start="157:38" pos:end="157:91"><name pos:start="157:38" pos:end="157:38">s</name><operator pos:start="157:39" pos:end="157:40">-&gt;</operator><name pos:start="157:41" pos:end="157:55">current_picture</name><operator pos:start="157:56" pos:end="157:56">.</operator><name pos:start="157:57" pos:end="157:68">qscale_table</name><index pos:start="157:69" pos:end="157:91">[<expr pos:start="157:70" pos:end="157:90"><name pos:start="157:70" pos:end="157:75">mb_pos</name> <operator pos:start="157:77" pos:end="157:77">-</operator> <name pos:start="157:79" pos:end="157:90"><name pos:start="157:79" pos:end="157:79">s</name><operator pos:start="157:80" pos:end="157:81">-&gt;</operator><name pos:start="157:82" pos:end="157:90">mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="159:5" pos:end="159:25"><if pos:start="159:5" pos:end="159:25">if<condition pos:start="159:7" pos:end="159:16">(<expr pos:start="159:8" pos:end="159:15"><name pos:start="159:8" pos:end="159:8">n</name> <operator pos:start="159:10" pos:end="159:11">&amp;&amp;</operator> <name pos:start="159:13" pos:end="159:13">n</name><operator pos:start="159:14" pos:end="159:14">&lt;</operator><literal type="number" pos:start="159:15" pos:end="159:15">4</literal></expr>)</condition><block type="pseudo" pos:start="159:18" pos:end="159:25"><block_content pos:start="159:18" pos:end="159:25"> <expr_stmt pos:start="159:18" pos:end="159:25"><expr pos:start="159:18" pos:end="159:24"><name pos:start="159:18" pos:end="159:19">q2</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <name pos:start="159:23" pos:end="159:24">q1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="163:5" pos:end="369:5"><if pos:start="163:5" pos:end="283:5">if<condition pos:start="163:7" pos:end="163:13">(<expr pos:start="163:8" pos:end="163:12"><name pos:start="163:8" pos:end="163:12">coded</name></expr>)</condition> <block pos:start="163:15" pos:end="283:5">{<block_content pos:start="165:9" pos:end="281:28">

        <decl_stmt pos:start="165:9" pos:end="165:34"><decl pos:start="165:9" pos:end="165:20"><type pos:start="165:9" pos:end="165:11"><name pos:start="165:9" pos:end="165:11">int</name></type> <name pos:start="165:13" pos:end="165:16">last</name> <init pos:start="165:18" pos:end="165:20">= <expr pos:start="165:20" pos:end="165:20"><literal type="number" pos:start="165:20" pos:end="165:20">0</literal></expr></init></decl>, <decl pos:start="165:23" pos:end="165:26"><type ref="prev" pos:start="165:9" pos:end="165:11"/><name pos:start="165:23" pos:end="165:26">skip</name></decl>, <decl pos:start="165:29" pos:end="165:33"><type ref="prev" pos:start="165:9" pos:end="165:11"/><name pos:start="165:29" pos:end="165:33">value</name></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="167:31"><decl pos:start="167:9" pos:end="167:30"><type pos:start="167:9" pos:end="167:22"><specifier pos:start="167:9" pos:end="167:13">const</specifier> <name pos:start="167:15" pos:end="167:20">int8_t</name> <modifier pos:start="167:22" pos:end="167:22">*</modifier></type><name pos:start="167:23" pos:end="167:30">zz_table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="169:9" pos:end="169:14"><decl pos:start="169:9" pos:end="169:13"><type pos:start="169:9" pos:end="169:11"><name pos:start="169:9" pos:end="169:11">int</name></type> <name pos:start="169:13" pos:end="169:13">k</name></decl>;</decl_stmt>



        <if_stmt pos:start="173:9" pos:end="185:37"><if pos:start="173:9" pos:end="183:9">if<condition pos:start="173:11" pos:end="173:24">(<expr pos:start="173:12" pos:end="173:23"><name pos:start="173:12" pos:end="173:23"><name pos:start="173:12" pos:end="173:12">v</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:15">s</name><operator pos:start="173:16" pos:end="173:16">.</operator><name pos:start="173:17" pos:end="173:23">ac_pred</name></name></expr>)</condition> <block pos:start="173:26" pos:end="183:9">{<block_content pos:start="175:13" pos:end="181:43">

            <if_stmt pos:start="175:13" pos:end="181:43"><if pos:start="175:13" pos:end="177:45">if<condition pos:start="175:15" pos:end="175:28">(<expr pos:start="175:16" pos:end="175:27"><operator pos:start="175:16" pos:end="175:16">!</operator><name pos:start="175:17" pos:end="175:27">dc_pred_dir</name></expr>)</condition><block type="pseudo" pos:start="177:17" pos:end="177:45"><block_content pos:start="177:17" pos:end="177:45">

                <expr_stmt pos:start="177:17" pos:end="177:45"><expr pos:start="177:17" pos:end="177:44"><name pos:start="177:17" pos:end="177:24">zz_table</name> <operator pos:start="177:26" pos:end="177:26">=</operator> <name pos:start="177:28" pos:end="177:44">vc1_horizontal_zz</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="179:13" pos:end="181:43">else<block type="pseudo" pos:start="181:17" pos:end="181:43"><block_content pos:start="181:17" pos:end="181:43">

                <expr_stmt pos:start="181:17" pos:end="181:43"><expr pos:start="181:17" pos:end="181:42"><name pos:start="181:17" pos:end="181:24">zz_table</name> <operator pos:start="181:26" pos:end="181:26">=</operator> <name pos:start="181:28" pos:end="181:42">vc1_vertical_zz</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="183:11" pos:end="185:37">else<block type="pseudo" pos:start="185:13" pos:end="185:37"><block_content pos:start="185:13" pos:end="185:37">

            <expr_stmt pos:start="185:13" pos:end="185:37"><expr pos:start="185:13" pos:end="185:36"><name pos:start="185:13" pos:end="185:20">zz_table</name> <operator pos:start="185:22" pos:end="185:22">=</operator> <name pos:start="185:24" pos:end="185:36">vc1_normal_zz</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <while pos:start="189:9" pos:end="201:9">while <condition pos:start="189:15" pos:end="189:21">(<expr pos:start="189:16" pos:end="189:20"><operator pos:start="189:16" pos:end="189:16">!</operator><name pos:start="189:17" pos:end="189:20">last</name></expr>)</condition> <block pos:start="189:23" pos:end="201:9">{<block_content pos:start="191:13" pos:end="199:41">

            <expr_stmt pos:start="191:13" pos:end="191:68"><expr pos:start="191:13" pos:end="191:67"><call pos:start="191:13" pos:end="191:67"><name pos:start="191:13" pos:end="191:31">vc1_decode_ac_coeff</name><argument_list pos:start="191:32" pos:end="191:67">(<argument pos:start="191:33" pos:end="191:33"><expr pos:start="191:33" pos:end="191:33"><name pos:start="191:33" pos:end="191:33">v</name></expr></argument>, <argument pos:start="191:36" pos:end="191:40"><expr pos:start="191:36" pos:end="191:40"><operator pos:start="191:36" pos:end="191:36">&amp;</operator><name pos:start="191:37" pos:end="191:40">last</name></expr></argument>, <argument pos:start="191:43" pos:end="191:47"><expr pos:start="191:43" pos:end="191:47"><operator pos:start="191:43" pos:end="191:43">&amp;</operator><name pos:start="191:44" pos:end="191:47">skip</name></expr></argument>, <argument pos:start="191:50" pos:end="191:55"><expr pos:start="191:50" pos:end="191:55"><operator pos:start="191:50" pos:end="191:50">&amp;</operator><name pos:start="191:51" pos:end="191:55">value</name></expr></argument>, <argument pos:start="191:58" pos:end="191:66"><expr pos:start="191:58" pos:end="191:66"><name pos:start="191:58" pos:end="191:66">codingset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:22"><expr pos:start="193:13" pos:end="193:21"><name pos:start="193:13" pos:end="193:13">i</name> <operator pos:start="193:15" pos:end="193:16">+=</operator> <name pos:start="193:18" pos:end="193:21">skip</name></expr>;</expr_stmt>

            <if_stmt pos:start="195:13" pos:end="197:22"><if pos:start="195:13" pos:end="197:22">if<condition pos:start="195:15" pos:end="195:22">(<expr pos:start="195:16" pos:end="195:21"><name pos:start="195:16" pos:end="195:16">i</name> <operator pos:start="195:18" pos:end="195:18">&gt;</operator> <literal type="number" pos:start="195:20" pos:end="195:21">63</literal></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:22"><block_content pos:start="197:17" pos:end="197:22">

                <break pos:start="197:17" pos:end="197:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:41"><expr pos:start="199:13" pos:end="199:40"><name pos:start="199:13" pos:end="199:32"><name pos:start="199:13" pos:end="199:17">block</name><index pos:start="199:18" pos:end="199:32">[<expr pos:start="199:19" pos:end="199:31"><name pos:start="199:19" pos:end="199:31"><name pos:start="199:19" pos:end="199:26">zz_table</name><index pos:start="199:27" pos:end="199:31">[<expr pos:start="199:28" pos:end="199:30"><name pos:start="199:28" pos:end="199:28">i</name><operator pos:start="199:29" pos:end="199:30">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="199:34" pos:end="199:34">=</operator> <name pos:start="199:36" pos:end="199:40">value</name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <comment type="block" pos:start="205:9" pos:end="205:43">/* apply AC prediction if needed */</comment>

        <if_stmt pos:start="207:9" pos:end="251:9"><if pos:start="207:9" pos:end="251:9">if<condition pos:start="207:11" pos:end="207:20">(<expr pos:start="207:12" pos:end="207:19"><name pos:start="207:12" pos:end="207:19">use_pred</name></expr>)</condition> <block pos:start="207:22" pos:end="251:9">{<block_content pos:start="211:13" pos:end="249:13">

            <comment type="block" pos:start="209:13" pos:end="209:43">/* scale predictors if needed*/</comment>

            <if_stmt pos:start="211:13" pos:end="249:13"><if pos:start="211:13" pos:end="233:13">if<condition pos:start="211:15" pos:end="211:28">(<expr pos:start="211:16" pos:end="211:27"><name pos:start="211:16" pos:end="211:17">q2</name> <operator pos:start="211:19" pos:end="211:20">&amp;&amp;</operator> <name pos:start="211:22" pos:end="211:23">q1</name><operator pos:start="211:24" pos:end="211:25">!=</operator><name pos:start="211:26" pos:end="211:27">q2</name></expr>)</condition> <block pos:start="211:30" pos:end="233:13">{<block_content pos:start="213:17" pos:end="231:17">

                <expr_stmt pos:start="213:17" pos:end="213:66"><expr pos:start="213:17" pos:end="213:65"><name pos:start="213:17" pos:end="213:18">q1</name> <operator pos:start="213:20" pos:end="213:20">=</operator> <name pos:start="213:22" pos:end="213:23">q1</name> <operator pos:start="213:25" pos:end="213:25">*</operator> <literal type="number" pos:start="213:27" pos:end="213:29">2</literal> <operator pos:start="213:29" pos:end="213:29">+</operator> <operator pos:start="213:31" pos:end="213:31">(</operator><ternary pos:start="213:32" pos:end="213:60"><condition pos:start="213:32" pos:end="213:46"><expr pos:start="213:32" pos:end="213:44"><operator pos:start="213:32" pos:end="213:32">(</operator><name pos:start="213:33" pos:end="213:34">q1</name> <operator pos:start="213:36" pos:end="213:37">==</operator> <name pos:start="213:39" pos:end="213:43"><name pos:start="213:39" pos:end="213:39">v</name><operator pos:start="213:40" pos:end="213:41">-&gt;</operator><name pos:start="213:42" pos:end="213:43">pq</name></name><operator pos:start="213:44" pos:end="213:44">)</operator></expr> ?</condition><then pos:start="213:48" pos:end="213:56"> <expr pos:start="213:48" pos:end="213:56"><name pos:start="213:48" pos:end="213:56"><name pos:start="213:48" pos:end="213:48">v</name><operator pos:start="213:49" pos:end="213:50">-&gt;</operator><name pos:start="213:51" pos:end="213:56">halfpq</name></name></expr> </then><else pos:start="213:58" pos:end="213:60">: <expr pos:start="213:60" pos:end="213:60"><literal type="number" pos:start="213:60" pos:end="213:60">0</literal></expr></else></ternary><operator pos:start="213:61" pos:end="213:61">)</operator> <operator pos:start="213:63" pos:end="213:63">-</operator> <literal type="number" pos:start="213:65" pos:end="213:65">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:66"><expr pos:start="215:17" pos:end="215:65"><name pos:start="215:17" pos:end="215:18">q2</name> <operator pos:start="215:20" pos:end="215:20">=</operator> <name pos:start="215:22" pos:end="215:23">q2</name> <operator pos:start="215:25" pos:end="215:25">*</operator> <literal type="number" pos:start="215:27" pos:end="215:29">2</literal> <operator pos:start="215:29" pos:end="215:29">+</operator> <operator pos:start="215:31" pos:end="215:31">(</operator><ternary pos:start="215:32" pos:end="215:60"><condition pos:start="215:32" pos:end="215:46"><expr pos:start="215:32" pos:end="215:44"><operator pos:start="215:32" pos:end="215:32">(</operator><name pos:start="215:33" pos:end="215:34">q2</name> <operator pos:start="215:36" pos:end="215:37">==</operator> <name pos:start="215:39" pos:end="215:43"><name pos:start="215:39" pos:end="215:39">v</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:43">pq</name></name><operator pos:start="215:44" pos:end="215:44">)</operator></expr> ?</condition><then pos:start="215:48" pos:end="215:56"> <expr pos:start="215:48" pos:end="215:56"><name pos:start="215:48" pos:end="215:56"><name pos:start="215:48" pos:end="215:48">v</name><operator pos:start="215:49" pos:end="215:50">-&gt;</operator><name pos:start="215:51" pos:end="215:56">halfpq</name></name></expr> </then><else pos:start="215:58" pos:end="215:60">: <expr pos:start="215:60" pos:end="215:60"><literal type="number" pos:start="215:60" pos:end="215:60">0</literal></expr></else></ternary><operator pos:start="215:61" pos:end="215:61">)</operator> <operator pos:start="215:63" pos:end="215:63">-</operator> <literal type="number" pos:start="215:65" pos:end="215:65">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="219:17" pos:end="231:17"><if pos:start="219:17" pos:end="225:17">if<condition pos:start="219:19" pos:end="219:31">(<expr pos:start="219:20" pos:end="219:30"><name pos:start="219:20" pos:end="219:30">dc_pred_dir</name></expr>)</condition> <block pos:start="219:33" pos:end="225:17">{<block_content pos:start="221:21" pos:end="223:96"> <comment type="line" pos:start="219:35" pos:end="219:40">//left</comment>

                    <for pos:start="221:21" pos:end="223:96">for<control pos:start="221:24" pos:end="221:42">(<init pos:start="221:25" pos:end="221:30"><expr pos:start="221:25" pos:end="221:29"><name pos:start="221:25" pos:end="221:25">k</name> <operator pos:start="221:27" pos:end="221:27">=</operator> <literal type="number" pos:start="221:29" pos:end="221:29">1</literal></expr>;</init> <condition pos:start="221:32" pos:end="221:37"><expr pos:start="221:32" pos:end="221:36"><name pos:start="221:32" pos:end="221:32">k</name> <operator pos:start="221:34" pos:end="221:34">&lt;</operator> <literal type="number" pos:start="221:36" pos:end="221:36">8</literal></expr>;</condition> <incr pos:start="221:39" pos:end="221:41"><expr pos:start="221:39" pos:end="221:41"><name pos:start="221:39" pos:end="221:39">k</name><operator pos:start="221:40" pos:end="221:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="223:25" pos:end="223:96"><block_content pos:start="223:25" pos:end="223:96">

                        <expr_stmt pos:start="223:25" pos:end="223:96"><expr pos:start="223:25" pos:end="223:95"><name pos:start="223:25" pos:end="223:37"><name pos:start="223:25" pos:end="223:29">block</name><index pos:start="223:30" pos:end="223:37">[<expr pos:start="223:31" pos:end="223:36"><name pos:start="223:31" pos:end="223:31">k</name> <operator pos:start="223:33" pos:end="223:34">&lt;&lt;</operator> <literal type="number" pos:start="223:36" pos:end="223:36">3</literal></expr>]</index></name> <operator pos:start="223:39" pos:end="223:40">+=</operator> <operator pos:start="223:42" pos:end="223:42">(</operator><name pos:start="223:43" pos:end="223:51"><name pos:start="223:43" pos:end="223:48">ac_val</name><index pos:start="223:49" pos:end="223:51">[<expr pos:start="223:50" pos:end="223:50"><name pos:start="223:50" pos:end="223:50">k</name></expr>]</index></name> <operator pos:start="223:53" pos:end="223:53">*</operator> <name pos:start="223:55" pos:end="223:56">q2</name> <operator pos:start="223:58" pos:end="223:58">*</operator> <name pos:start="223:60" pos:end="223:78"><name pos:start="223:60" pos:end="223:70">vc1_dqscale</name><index pos:start="223:71" pos:end="223:78">[<expr pos:start="223:72" pos:end="223:77"><name pos:start="223:72" pos:end="223:73">q1</name> <operator pos:start="223:75" pos:end="223:75">-</operator> <literal type="number" pos:start="223:77" pos:end="223:77">1</literal></expr>]</index></name> <operator pos:start="223:80" pos:end="223:80">+</operator> <literal type="number" pos:start="223:82" pos:end="223:88">0x20000</literal><operator pos:start="223:89" pos:end="223:89">)</operator> <operator pos:start="223:91" pos:end="223:92">&gt;&gt;</operator> <literal type="number" pos:start="223:94" pos:end="223:95">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="225:19" pos:end="231:17">else <block pos:start="225:24" pos:end="231:17">{<block_content pos:start="227:21" pos:end="229:95"> <comment type="line" pos:start="225:26" pos:end="225:30">//top</comment>

                    <for pos:start="227:21" pos:end="229:95">for<control pos:start="227:24" pos:end="227:42">(<init pos:start="227:25" pos:end="227:30"><expr pos:start="227:25" pos:end="227:29"><name pos:start="227:25" pos:end="227:25">k</name> <operator pos:start="227:27" pos:end="227:27">=</operator> <literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>;</init> <condition pos:start="227:32" pos:end="227:37"><expr pos:start="227:32" pos:end="227:36"><name pos:start="227:32" pos:end="227:32">k</name> <operator pos:start="227:34" pos:end="227:34">&lt;</operator> <literal type="number" pos:start="227:36" pos:end="227:36">8</literal></expr>;</condition> <incr pos:start="227:39" pos:end="227:41"><expr pos:start="227:39" pos:end="227:41"><name pos:start="227:39" pos:end="227:39">k</name><operator pos:start="227:40" pos:end="227:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="229:25" pos:end="229:95"><block_content pos:start="229:25" pos:end="229:95">

                        <expr_stmt pos:start="229:25" pos:end="229:95"><expr pos:start="229:25" pos:end="229:94"><name pos:start="229:25" pos:end="229:32"><name pos:start="229:25" pos:end="229:29">block</name><index pos:start="229:30" pos:end="229:32">[<expr pos:start="229:31" pos:end="229:31"><name pos:start="229:31" pos:end="229:31">k</name></expr>]</index></name> <operator pos:start="229:34" pos:end="229:35">+=</operator> <operator pos:start="229:37" pos:end="229:37">(</operator><name pos:start="229:38" pos:end="229:50"><name pos:start="229:38" pos:end="229:43">ac_val</name><index pos:start="229:44" pos:end="229:50">[<expr pos:start="229:45" pos:end="229:49"><name pos:start="229:45" pos:end="229:45">k</name> <operator pos:start="229:47" pos:end="229:47">+</operator> <literal type="number" pos:start="229:49" pos:end="229:49">8</literal></expr>]</index></name> <operator pos:start="229:52" pos:end="229:52">*</operator> <name pos:start="229:54" pos:end="229:55">q2</name> <operator pos:start="229:57" pos:end="229:57">*</operator> <name pos:start="229:59" pos:end="229:77"><name pos:start="229:59" pos:end="229:69">vc1_dqscale</name><index pos:start="229:70" pos:end="229:77">[<expr pos:start="229:71" pos:end="229:76"><name pos:start="229:71" pos:end="229:72">q1</name> <operator pos:start="229:74" pos:end="229:74">-</operator> <literal type="number" pos:start="229:76" pos:end="229:76">1</literal></expr>]</index></name> <operator pos:start="229:79" pos:end="229:79">+</operator> <literal type="number" pos:start="229:81" pos:end="229:87">0x20000</literal><operator pos:start="229:88" pos:end="229:88">)</operator> <operator pos:start="229:90" pos:end="229:91">&gt;&gt;</operator> <literal type="number" pos:start="229:93" pos:end="229:94">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="233:15" pos:end="249:13">else <block pos:start="233:20" pos:end="249:13">{<block_content pos:start="235:17" pos:end="247:17">

                <if_stmt pos:start="235:17" pos:end="247:17"><if pos:start="235:17" pos:end="241:17">if<condition pos:start="235:19" pos:end="235:31">(<expr pos:start="235:20" pos:end="235:30"><name pos:start="235:20" pos:end="235:30">dc_pred_dir</name></expr>)</condition> <block pos:start="235:33" pos:end="241:17">{<block_content pos:start="237:21" pos:end="239:51"> <comment type="line" pos:start="235:35" pos:end="235:40">//left</comment>

                    <for pos:start="237:21" pos:end="239:51">for<control pos:start="237:24" pos:end="237:42">(<init pos:start="237:25" pos:end="237:30"><expr pos:start="237:25" pos:end="237:29"><name pos:start="237:25" pos:end="237:25">k</name> <operator pos:start="237:27" pos:end="237:27">=</operator> <literal type="number" pos:start="237:29" pos:end="237:29">1</literal></expr>;</init> <condition pos:start="237:32" pos:end="237:37"><expr pos:start="237:32" pos:end="237:36"><name pos:start="237:32" pos:end="237:32">k</name> <operator pos:start="237:34" pos:end="237:34">&lt;</operator> <literal type="number" pos:start="237:36" pos:end="237:36">8</literal></expr>;</condition> <incr pos:start="237:39" pos:end="237:41"><expr pos:start="237:39" pos:end="237:41"><name pos:start="237:39" pos:end="237:39">k</name><operator pos:start="237:40" pos:end="237:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="239:25" pos:end="239:51"><block_content pos:start="239:25" pos:end="239:51">

                        <expr_stmt pos:start="239:25" pos:end="239:51"><expr pos:start="239:25" pos:end="239:50"><name pos:start="239:25" pos:end="239:37"><name pos:start="239:25" pos:end="239:29">block</name><index pos:start="239:30" pos:end="239:37">[<expr pos:start="239:31" pos:end="239:36"><name pos:start="239:31" pos:end="239:31">k</name> <operator pos:start="239:33" pos:end="239:34">&lt;&lt;</operator> <literal type="number" pos:start="239:36" pos:end="239:36">3</literal></expr>]</index></name> <operator pos:start="239:39" pos:end="239:40">+=</operator> <name pos:start="239:42" pos:end="239:50"><name pos:start="239:42" pos:end="239:47">ac_val</name><index pos:start="239:48" pos:end="239:50">[<expr pos:start="239:49" pos:end="239:49"><name pos:start="239:49" pos:end="239:49">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="241:19" pos:end="247:17">else <block pos:start="241:24" pos:end="247:17">{<block_content pos:start="243:21" pos:end="245:50"> <comment type="line" pos:start="241:26" pos:end="241:30">//top</comment>

                    <for pos:start="243:21" pos:end="245:50">for<control pos:start="243:24" pos:end="243:42">(<init pos:start="243:25" pos:end="243:30"><expr pos:start="243:25" pos:end="243:29"><name pos:start="243:25" pos:end="243:25">k</name> <operator pos:start="243:27" pos:end="243:27">=</operator> <literal type="number" pos:start="243:29" pos:end="243:29">1</literal></expr>;</init> <condition pos:start="243:32" pos:end="243:37"><expr pos:start="243:32" pos:end="243:36"><name pos:start="243:32" pos:end="243:32">k</name> <operator pos:start="243:34" pos:end="243:34">&lt;</operator> <literal type="number" pos:start="243:36" pos:end="243:36">8</literal></expr>;</condition> <incr pos:start="243:39" pos:end="243:41"><expr pos:start="243:39" pos:end="243:41"><name pos:start="243:39" pos:end="243:39">k</name><operator pos:start="243:40" pos:end="243:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="245:25" pos:end="245:50"><block_content pos:start="245:25" pos:end="245:50">

                        <expr_stmt pos:start="245:25" pos:end="245:50"><expr pos:start="245:25" pos:end="245:49"><name pos:start="245:25" pos:end="245:32"><name pos:start="245:25" pos:end="245:29">block</name><index pos:start="245:30" pos:end="245:32">[<expr pos:start="245:31" pos:end="245:31"><name pos:start="245:31" pos:end="245:31">k</name></expr>]</index></name> <operator pos:start="245:34" pos:end="245:35">+=</operator> <name pos:start="245:37" pos:end="245:49"><name pos:start="245:37" pos:end="245:42">ac_val</name><index pos:start="245:43" pos:end="245:49">[<expr pos:start="245:44" pos:end="245:48"><name pos:start="245:44" pos:end="245:44">k</name> <operator pos:start="245:46" pos:end="245:46">+</operator> <literal type="number" pos:start="245:48" pos:end="245:48">8</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="253:9" pos:end="253:51">/* save AC coeffs for further prediction */</comment>

        <for pos:start="255:9" pos:end="261:9">for<control pos:start="255:12" pos:end="255:30">(<init pos:start="255:13" pos:end="255:18"><expr pos:start="255:13" pos:end="255:17"><name pos:start="255:13" pos:end="255:13">k</name> <operator pos:start="255:15" pos:end="255:15">=</operator> <literal type="number" pos:start="255:17" pos:end="255:17">1</literal></expr>;</init> <condition pos:start="255:20" pos:end="255:25"><expr pos:start="255:20" pos:end="255:24"><name pos:start="255:20" pos:end="255:20">k</name> <operator pos:start="255:22" pos:end="255:22">&lt;</operator> <literal type="number" pos:start="255:24" pos:end="255:24">8</literal></expr>;</condition> <incr pos:start="255:27" pos:end="255:29"><expr pos:start="255:27" pos:end="255:29"><name pos:start="255:27" pos:end="255:27">k</name><operator pos:start="255:28" pos:end="255:29">++</operator></expr></incr>)</control> <block pos:start="255:32" pos:end="261:9">{<block_content pos:start="257:13" pos:end="259:38">

            <expr_stmt pos:start="257:13" pos:end="257:39"><expr pos:start="257:13" pos:end="257:38"><name pos:start="257:13" pos:end="257:22"><name pos:start="257:13" pos:end="257:19">ac_val2</name><index pos:start="257:20" pos:end="257:22">[<expr pos:start="257:21" pos:end="257:21"><name pos:start="257:21" pos:end="257:21">k</name></expr>]</index></name> <operator pos:start="257:24" pos:end="257:24">=</operator> <name pos:start="257:26" pos:end="257:38"><name pos:start="257:26" pos:end="257:30">block</name><index pos:start="257:31" pos:end="257:38">[<expr pos:start="257:32" pos:end="257:37"><name pos:start="257:32" pos:end="257:32">k</name> <operator pos:start="257:34" pos:end="257:35">&lt;&lt;</operator> <literal type="number" pos:start="257:37" pos:end="257:37">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:38"><expr pos:start="259:13" pos:end="259:37"><name pos:start="259:13" pos:end="259:26"><name pos:start="259:13" pos:end="259:19">ac_val2</name><index pos:start="259:20" pos:end="259:26">[<expr pos:start="259:21" pos:end="259:25"><name pos:start="259:21" pos:end="259:21">k</name> <operator pos:start="259:23" pos:end="259:23">+</operator> <literal type="number" pos:start="259:25" pos:end="259:25">8</literal></expr>]</index></name> <operator pos:start="259:28" pos:end="259:28">=</operator> <name pos:start="259:30" pos:end="259:37"><name pos:start="259:30" pos:end="259:34">block</name><index pos:start="259:35" pos:end="259:37">[<expr pos:start="259:36" pos:end="259:36"><name pos:start="259:36" pos:end="259:36">k</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="265:9" pos:end="265:29">/* scale AC coeffs */</comment>

        <for pos:start="267:9" pos:end="277:13">for<control pos:start="267:12" pos:end="267:31">(<init pos:start="267:13" pos:end="267:18"><expr pos:start="267:13" pos:end="267:17"><name pos:start="267:13" pos:end="267:13">k</name> <operator pos:start="267:15" pos:end="267:15">=</operator> <literal type="number" pos:start="267:17" pos:end="267:17">1</literal></expr>;</init> <condition pos:start="267:20" pos:end="267:26"><expr pos:start="267:20" pos:end="267:25"><name pos:start="267:20" pos:end="267:20">k</name> <operator pos:start="267:22" pos:end="267:22">&lt;</operator> <literal type="number" pos:start="267:24" pos:end="267:25">64</literal></expr>;</condition> <incr pos:start="267:28" pos:end="267:30"><expr pos:start="267:28" pos:end="267:30"><name pos:start="267:28" pos:end="267:28">k</name><operator pos:start="267:29" pos:end="267:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="269:13" pos:end="277:13"><block_content pos:start="269:13" pos:end="277:13">

            <if_stmt pos:start="269:13" pos:end="277:13"><if pos:start="269:13" pos:end="277:13">if<condition pos:start="269:15" pos:end="269:24">(<expr pos:start="269:16" pos:end="269:23"><name pos:start="269:16" pos:end="269:23"><name pos:start="269:16" pos:end="269:20">block</name><index pos:start="269:21" pos:end="269:23">[<expr pos:start="269:22" pos:end="269:22"><name pos:start="269:22" pos:end="269:22">k</name></expr>]</index></name></expr>)</condition> <block pos:start="269:26" pos:end="277:13">{<block_content pos:start="271:17" pos:end="275:66">

                <expr_stmt pos:start="271:17" pos:end="271:34"><expr pos:start="271:17" pos:end="271:33"><name pos:start="271:17" pos:end="271:24"><name pos:start="271:17" pos:end="271:21">block</name><index pos:start="271:22" pos:end="271:24">[<expr pos:start="271:23" pos:end="271:23"><name pos:start="271:23" pos:end="271:23">k</name></expr>]</index></name> <operator pos:start="271:26" pos:end="271:27">*=</operator> <name pos:start="271:29" pos:end="271:33">scale</name></expr>;</expr_stmt>

                <if_stmt pos:start="273:17" pos:end="275:66"><if pos:start="273:17" pos:end="275:66">if<condition pos:start="273:19" pos:end="273:34">(<expr pos:start="273:20" pos:end="273:33"><operator pos:start="273:20" pos:end="273:20">!</operator><name pos:start="273:21" pos:end="273:33"><name pos:start="273:21" pos:end="273:21">v</name><operator pos:start="273:22" pos:end="273:23">-&gt;</operator><name pos:start="273:24" pos:end="273:33">pquantizer</name></name></expr>)</condition><block type="pseudo" pos:start="275:21" pos:end="275:66"><block_content pos:start="275:21" pos:end="275:66">

                    <expr_stmt pos:start="275:21" pos:end="275:66"><expr pos:start="275:21" pos:end="275:65"><name pos:start="275:21" pos:end="275:28"><name pos:start="275:21" pos:end="275:25">block</name><index pos:start="275:26" pos:end="275:28">[<expr pos:start="275:27" pos:end="275:27"><name pos:start="275:27" pos:end="275:27">k</name></expr>]</index></name> <operator pos:start="275:30" pos:end="275:31">+=</operator> <ternary pos:start="275:33" pos:end="275:65"><condition pos:start="275:33" pos:end="275:48"><expr pos:start="275:33" pos:end="275:46"><operator pos:start="275:33" pos:end="275:33">(</operator><name pos:start="275:34" pos:end="275:41"><name pos:start="275:34" pos:end="275:38">block</name><index pos:start="275:39" pos:end="275:41">[<expr pos:start="275:40" pos:end="275:40"><name pos:start="275:40" pos:end="275:40">k</name></expr>]</index></name> <operator pos:start="275:43" pos:end="275:43">&lt;</operator> <literal type="number" pos:start="275:45" pos:end="275:45">0</literal><operator pos:start="275:46" pos:end="275:46">)</operator></expr> ?</condition><then pos:start="275:50" pos:end="275:56"> <expr pos:start="275:50" pos:end="275:56"><operator pos:start="275:50" pos:end="275:50">-</operator><name pos:start="275:51" pos:end="275:56">mquant</name></expr> </then><else pos:start="275:58" pos:end="275:65">: <expr pos:start="275:60" pos:end="275:65"><name pos:start="275:60" pos:end="275:65">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <if_stmt pos:start="281:9" pos:end="281:28"><if pos:start="281:9" pos:end="281:28">if<condition pos:start="281:11" pos:end="281:20">(<expr pos:start="281:12" pos:end="281:19"><name pos:start="281:12" pos:end="281:19">use_pred</name></expr>)</condition><block type="pseudo" pos:start="281:22" pos:end="281:28"><block_content pos:start="281:22" pos:end="281:28"> <expr_stmt pos:start="281:22" pos:end="281:28"><expr pos:start="281:22" pos:end="281:27"><name pos:start="281:22" pos:end="281:22">i</name> <operator pos:start="281:24" pos:end="281:24">=</operator> <literal type="number" pos:start="281:26" pos:end="281:27">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="283:7" pos:end="369:5">else <block pos:start="283:12" pos:end="369:5">{<block_content pos:start="285:9" pos:end="367:9"> <comment type="line" pos:start="283:14" pos:end="283:28">// no AC coeffs</comment>

        <decl_stmt pos:start="285:9" pos:end="285:14"><decl pos:start="285:9" pos:end="285:13"><type pos:start="285:9" pos:end="285:11"><name pos:start="285:9" pos:end="285:11">int</name></type> <name pos:start="285:13" pos:end="285:13">k</name></decl>;</decl_stmt>



        <expr_stmt pos:start="289:9" pos:end="289:35"><expr pos:start="289:9" pos:end="289:34"><call pos:start="289:9" pos:end="289:34"><name pos:start="289:9" pos:end="289:14">memset</name><argument_list pos:start="289:15" pos:end="289:34">(<argument pos:start="289:16" pos:end="289:22"><expr pos:start="289:16" pos:end="289:22"><name pos:start="289:16" pos:end="289:22">ac_val2</name></expr></argument>, <argument pos:start="289:25" pos:end="289:25"><expr pos:start="289:25" pos:end="289:25"><literal type="number" pos:start="289:25" pos:end="289:25">0</literal></expr></argument>, <argument pos:start="289:28" pos:end="289:33"><expr pos:start="289:28" pos:end="289:33"><literal type="number" pos:start="289:28" pos:end="289:29">16</literal> <operator pos:start="289:31" pos:end="289:31">*</operator> <literal type="number" pos:start="289:33" pos:end="289:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="291:9" pos:end="331:9"><if pos:start="291:9" pos:end="311:9">if<condition pos:start="291:11" pos:end="291:23">(<expr pos:start="291:12" pos:end="291:22"><name pos:start="291:12" pos:end="291:22">dc_pred_dir</name></expr>)</condition> <block pos:start="291:25" pos:end="311:9">{<block_content pos:start="293:13" pos:end="309:13"><comment type="line" pos:start="291:26" pos:end="291:31">//left</comment>

            <if_stmt pos:start="293:13" pos:end="309:13"><if pos:start="293:13" pos:end="309:13">if<condition pos:start="293:15" pos:end="293:24">(<expr pos:start="293:16" pos:end="293:23"><name pos:start="293:16" pos:end="293:23">use_pred</name></expr>)</condition> <block pos:start="293:26" pos:end="309:13">{<block_content pos:start="295:17" pos:end="307:17">

                <expr_stmt pos:start="295:17" pos:end="295:47"><expr pos:start="295:17" pos:end="295:46"><call pos:start="295:17" pos:end="295:46"><name pos:start="295:17" pos:end="295:22">memcpy</name><argument_list pos:start="295:23" pos:end="295:46">(<argument pos:start="295:24" pos:end="295:30"><expr pos:start="295:24" pos:end="295:30"><name pos:start="295:24" pos:end="295:30">ac_val2</name></expr></argument>, <argument pos:start="295:33" pos:end="295:38"><expr pos:start="295:33" pos:end="295:38"><name pos:start="295:33" pos:end="295:38">ac_val</name></expr></argument>, <argument pos:start="295:41" pos:end="295:45"><expr pos:start="295:41" pos:end="295:45"><literal type="number" pos:start="295:41" pos:end="295:41">8</literal> <operator pos:start="295:43" pos:end="295:43">*</operator> <literal type="number" pos:start="295:45" pos:end="295:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="297:17" pos:end="307:17"><if pos:start="297:17" pos:end="307:17">if<condition pos:start="297:19" pos:end="297:32">(<expr pos:start="297:20" pos:end="297:31"><name pos:start="297:20" pos:end="297:21">q2</name> <operator pos:start="297:23" pos:end="297:24">&amp;&amp;</operator> <name pos:start="297:26" pos:end="297:27">q1</name><operator pos:start="297:28" pos:end="297:29">!=</operator><name pos:start="297:30" pos:end="297:31">q2</name></expr>)</condition> <block pos:start="297:34" pos:end="307:17">{<block_content pos:start="299:21" pos:end="305:93">

                    <expr_stmt pos:start="299:21" pos:end="299:70"><expr pos:start="299:21" pos:end="299:69"><name pos:start="299:21" pos:end="299:22">q1</name> <operator pos:start="299:24" pos:end="299:24">=</operator> <name pos:start="299:26" pos:end="299:27">q1</name> <operator pos:start="299:29" pos:end="299:29">*</operator> <literal type="number" pos:start="299:31" pos:end="299:33">2</literal> <operator pos:start="299:33" pos:end="299:33">+</operator> <operator pos:start="299:35" pos:end="299:35">(</operator><ternary pos:start="299:36" pos:end="299:64"><condition pos:start="299:36" pos:end="299:50"><expr pos:start="299:36" pos:end="299:48"><operator pos:start="299:36" pos:end="299:36">(</operator><name pos:start="299:37" pos:end="299:38">q1</name> <operator pos:start="299:40" pos:end="299:41">==</operator> <name pos:start="299:43" pos:end="299:47"><name pos:start="299:43" pos:end="299:43">v</name><operator pos:start="299:44" pos:end="299:45">-&gt;</operator><name pos:start="299:46" pos:end="299:47">pq</name></name><operator pos:start="299:48" pos:end="299:48">)</operator></expr> ?</condition><then pos:start="299:52" pos:end="299:60"> <expr pos:start="299:52" pos:end="299:60"><name pos:start="299:52" pos:end="299:60"><name pos:start="299:52" pos:end="299:52">v</name><operator pos:start="299:53" pos:end="299:54">-&gt;</operator><name pos:start="299:55" pos:end="299:60">halfpq</name></name></expr> </then><else pos:start="299:62" pos:end="299:64">: <expr pos:start="299:64" pos:end="299:64"><literal type="number" pos:start="299:64" pos:end="299:64">0</literal></expr></else></ternary><operator pos:start="299:65" pos:end="299:65">)</operator> <operator pos:start="299:67" pos:end="299:67">-</operator> <literal type="number" pos:start="299:69" pos:end="299:69">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:70"><expr pos:start="301:21" pos:end="301:69"><name pos:start="301:21" pos:end="301:22">q2</name> <operator pos:start="301:24" pos:end="301:24">=</operator> <name pos:start="301:26" pos:end="301:27">q2</name> <operator pos:start="301:29" pos:end="301:29">*</operator> <literal type="number" pos:start="301:31" pos:end="301:33">2</literal> <operator pos:start="301:33" pos:end="301:33">+</operator> <operator pos:start="301:35" pos:end="301:35">(</operator><ternary pos:start="301:36" pos:end="301:64"><condition pos:start="301:36" pos:end="301:50"><expr pos:start="301:36" pos:end="301:48"><operator pos:start="301:36" pos:end="301:36">(</operator><name pos:start="301:37" pos:end="301:38">q2</name> <operator pos:start="301:40" pos:end="301:41">==</operator> <name pos:start="301:43" pos:end="301:47"><name pos:start="301:43" pos:end="301:43">v</name><operator pos:start="301:44" pos:end="301:45">-&gt;</operator><name pos:start="301:46" pos:end="301:47">pq</name></name><operator pos:start="301:48" pos:end="301:48">)</operator></expr> ?</condition><then pos:start="301:52" pos:end="301:60"> <expr pos:start="301:52" pos:end="301:60"><name pos:start="301:52" pos:end="301:60"><name pos:start="301:52" pos:end="301:52">v</name><operator pos:start="301:53" pos:end="301:54">-&gt;</operator><name pos:start="301:55" pos:end="301:60">halfpq</name></name></expr> </then><else pos:start="301:62" pos:end="301:64">: <expr pos:start="301:64" pos:end="301:64"><literal type="number" pos:start="301:64" pos:end="301:64">0</literal></expr></else></ternary><operator pos:start="301:65" pos:end="301:65">)</operator> <operator pos:start="301:67" pos:end="301:67">-</operator> <literal type="number" pos:start="301:69" pos:end="301:69">1</literal></expr>;</expr_stmt>

                    <for pos:start="303:21" pos:end="305:93">for<control pos:start="303:24" pos:end="303:42">(<init pos:start="303:25" pos:end="303:30"><expr pos:start="303:25" pos:end="303:29"><name pos:start="303:25" pos:end="303:25">k</name> <operator pos:start="303:27" pos:end="303:27">=</operator> <literal type="number" pos:start="303:29" pos:end="303:29">1</literal></expr>;</init> <condition pos:start="303:32" pos:end="303:37"><expr pos:start="303:32" pos:end="303:36"><name pos:start="303:32" pos:end="303:32">k</name> <operator pos:start="303:34" pos:end="303:34">&lt;</operator> <literal type="number" pos:start="303:36" pos:end="303:36">8</literal></expr>;</condition> <incr pos:start="303:39" pos:end="303:41"><expr pos:start="303:39" pos:end="303:41"><name pos:start="303:39" pos:end="303:39">k</name><operator pos:start="303:40" pos:end="303:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="305:25" pos:end="305:93"><block_content pos:start="305:25" pos:end="305:93">

                        <expr_stmt pos:start="305:25" pos:end="305:93"><expr pos:start="305:25" pos:end="305:92"><name pos:start="305:25" pos:end="305:34"><name pos:start="305:25" pos:end="305:31">ac_val2</name><index pos:start="305:32" pos:end="305:34">[<expr pos:start="305:33" pos:end="305:33"><name pos:start="305:33" pos:end="305:33">k</name></expr>]</index></name> <operator pos:start="305:36" pos:end="305:36">=</operator> <operator pos:start="305:38" pos:end="305:38">(</operator><name pos:start="305:39" pos:end="305:48"><name pos:start="305:39" pos:end="305:45">ac_val2</name><index pos:start="305:46" pos:end="305:48">[<expr pos:start="305:47" pos:end="305:47"><name pos:start="305:47" pos:end="305:47">k</name></expr>]</index></name> <operator pos:start="305:50" pos:end="305:50">*</operator> <name pos:start="305:52" pos:end="305:53">q2</name> <operator pos:start="305:55" pos:end="305:55">*</operator> <name pos:start="305:57" pos:end="305:75"><name pos:start="305:57" pos:end="305:67">vc1_dqscale</name><index pos:start="305:68" pos:end="305:75">[<expr pos:start="305:69" pos:end="305:74"><name pos:start="305:69" pos:end="305:70">q1</name> <operator pos:start="305:72" pos:end="305:72">-</operator> <literal type="number" pos:start="305:74" pos:end="305:74">1</literal></expr>]</index></name> <operator pos:start="305:77" pos:end="305:77">+</operator> <literal type="number" pos:start="305:79" pos:end="305:85">0x20000</literal><operator pos:start="305:86" pos:end="305:86">)</operator> <operator pos:start="305:88" pos:end="305:89">&gt;&gt;</operator> <literal type="number" pos:start="305:91" pos:end="305:92">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="311:11" pos:end="331:9">else <block pos:start="311:16" pos:end="331:9">{<block_content pos:start="313:13" pos:end="329:13"><comment type="line" pos:start="311:17" pos:end="311:21">//top</comment>

            <if_stmt pos:start="313:13" pos:end="329:13"><if pos:start="313:13" pos:end="329:13">if<condition pos:start="313:15" pos:end="313:24">(<expr pos:start="313:16" pos:end="313:23"><name pos:start="313:16" pos:end="313:23">use_pred</name></expr>)</condition> <block pos:start="313:26" pos:end="329:13">{<block_content pos:start="315:17" pos:end="327:17">

                <expr_stmt pos:start="315:17" pos:end="315:55"><expr pos:start="315:17" pos:end="315:54"><call pos:start="315:17" pos:end="315:54"><name pos:start="315:17" pos:end="315:22">memcpy</name><argument_list pos:start="315:23" pos:end="315:54">(<argument pos:start="315:24" pos:end="315:34"><expr pos:start="315:24" pos:end="315:34"><name pos:start="315:24" pos:end="315:30">ac_val2</name> <operator pos:start="315:32" pos:end="315:32">+</operator> <literal type="number" pos:start="315:34" pos:end="315:34">8</literal></expr></argument>, <argument pos:start="315:37" pos:end="315:46"><expr pos:start="315:37" pos:end="315:46"><name pos:start="315:37" pos:end="315:42">ac_val</name> <operator pos:start="315:44" pos:end="315:44">+</operator> <literal type="number" pos:start="315:46" pos:end="315:46">8</literal></expr></argument>, <argument pos:start="315:49" pos:end="315:53"><expr pos:start="315:49" pos:end="315:53"><literal type="number" pos:start="315:49" pos:end="315:49">8</literal> <operator pos:start="315:51" pos:end="315:51">*</operator> <literal type="number" pos:start="315:53" pos:end="315:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="317:17" pos:end="327:17"><if pos:start="317:17" pos:end="327:17">if<condition pos:start="317:19" pos:end="317:32">(<expr pos:start="317:20" pos:end="317:31"><name pos:start="317:20" pos:end="317:21">q2</name> <operator pos:start="317:23" pos:end="317:24">&amp;&amp;</operator> <name pos:start="317:26" pos:end="317:27">q1</name><operator pos:start="317:28" pos:end="317:29">!=</operator><name pos:start="317:30" pos:end="317:31">q2</name></expr>)</condition> <block pos:start="317:34" pos:end="327:17">{<block_content pos:start="319:21" pos:end="325:101">

                    <expr_stmt pos:start="319:21" pos:end="319:70"><expr pos:start="319:21" pos:end="319:69"><name pos:start="319:21" pos:end="319:22">q1</name> <operator pos:start="319:24" pos:end="319:24">=</operator> <name pos:start="319:26" pos:end="319:27">q1</name> <operator pos:start="319:29" pos:end="319:29">*</operator> <literal type="number" pos:start="319:31" pos:end="319:33">2</literal> <operator pos:start="319:33" pos:end="319:33">+</operator> <operator pos:start="319:35" pos:end="319:35">(</operator><ternary pos:start="319:36" pos:end="319:64"><condition pos:start="319:36" pos:end="319:50"><expr pos:start="319:36" pos:end="319:48"><operator pos:start="319:36" pos:end="319:36">(</operator><name pos:start="319:37" pos:end="319:38">q1</name> <operator pos:start="319:40" pos:end="319:41">==</operator> <name pos:start="319:43" pos:end="319:47"><name pos:start="319:43" pos:end="319:43">v</name><operator pos:start="319:44" pos:end="319:45">-&gt;</operator><name pos:start="319:46" pos:end="319:47">pq</name></name><operator pos:start="319:48" pos:end="319:48">)</operator></expr> ?</condition><then pos:start="319:52" pos:end="319:60"> <expr pos:start="319:52" pos:end="319:60"><name pos:start="319:52" pos:end="319:60"><name pos:start="319:52" pos:end="319:52">v</name><operator pos:start="319:53" pos:end="319:54">-&gt;</operator><name pos:start="319:55" pos:end="319:60">halfpq</name></name></expr> </then><else pos:start="319:62" pos:end="319:64">: <expr pos:start="319:64" pos:end="319:64"><literal type="number" pos:start="319:64" pos:end="319:64">0</literal></expr></else></ternary><operator pos:start="319:65" pos:end="319:65">)</operator> <operator pos:start="319:67" pos:end="319:67">-</operator> <literal type="number" pos:start="319:69" pos:end="319:69">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="321:21" pos:end="321:70"><expr pos:start="321:21" pos:end="321:69"><name pos:start="321:21" pos:end="321:22">q2</name> <operator pos:start="321:24" pos:end="321:24">=</operator> <name pos:start="321:26" pos:end="321:27">q2</name> <operator pos:start="321:29" pos:end="321:29">*</operator> <literal type="number" pos:start="321:31" pos:end="321:33">2</literal> <operator pos:start="321:33" pos:end="321:33">+</operator> <operator pos:start="321:35" pos:end="321:35">(</operator><ternary pos:start="321:36" pos:end="321:64"><condition pos:start="321:36" pos:end="321:50"><expr pos:start="321:36" pos:end="321:48"><operator pos:start="321:36" pos:end="321:36">(</operator><name pos:start="321:37" pos:end="321:38">q2</name> <operator pos:start="321:40" pos:end="321:41">==</operator> <name pos:start="321:43" pos:end="321:47"><name pos:start="321:43" pos:end="321:43">v</name><operator pos:start="321:44" pos:end="321:45">-&gt;</operator><name pos:start="321:46" pos:end="321:47">pq</name></name><operator pos:start="321:48" pos:end="321:48">)</operator></expr> ?</condition><then pos:start="321:52" pos:end="321:60"> <expr pos:start="321:52" pos:end="321:60"><name pos:start="321:52" pos:end="321:60"><name pos:start="321:52" pos:end="321:52">v</name><operator pos:start="321:53" pos:end="321:54">-&gt;</operator><name pos:start="321:55" pos:end="321:60">halfpq</name></name></expr> </then><else pos:start="321:62" pos:end="321:64">: <expr pos:start="321:64" pos:end="321:64"><literal type="number" pos:start="321:64" pos:end="321:64">0</literal></expr></else></ternary><operator pos:start="321:65" pos:end="321:65">)</operator> <operator pos:start="321:67" pos:end="321:67">-</operator> <literal type="number" pos:start="321:69" pos:end="321:69">1</literal></expr>;</expr_stmt>

                    <for pos:start="323:21" pos:end="325:101">for<control pos:start="323:24" pos:end="323:42">(<init pos:start="323:25" pos:end="323:30"><expr pos:start="323:25" pos:end="323:29"><name pos:start="323:25" pos:end="323:25">k</name> <operator pos:start="323:27" pos:end="323:27">=</operator> <literal type="number" pos:start="323:29" pos:end="323:29">1</literal></expr>;</init> <condition pos:start="323:32" pos:end="323:37"><expr pos:start="323:32" pos:end="323:36"><name pos:start="323:32" pos:end="323:32">k</name> <operator pos:start="323:34" pos:end="323:34">&lt;</operator> <literal type="number" pos:start="323:36" pos:end="323:36">8</literal></expr>;</condition> <incr pos:start="323:39" pos:end="323:41"><expr pos:start="323:39" pos:end="323:41"><name pos:start="323:39" pos:end="323:39">k</name><operator pos:start="323:40" pos:end="323:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="325:25" pos:end="325:101"><block_content pos:start="325:25" pos:end="325:101">

                        <expr_stmt pos:start="325:25" pos:end="325:101"><expr pos:start="325:25" pos:end="325:100"><name pos:start="325:25" pos:end="325:38"><name pos:start="325:25" pos:end="325:31">ac_val2</name><index pos:start="325:32" pos:end="325:38">[<expr pos:start="325:33" pos:end="325:37"><name pos:start="325:33" pos:end="325:33">k</name> <operator pos:start="325:35" pos:end="325:35">+</operator> <literal type="number" pos:start="325:37" pos:end="325:37">8</literal></expr>]</index></name> <operator pos:start="325:40" pos:end="325:40">=</operator> <operator pos:start="325:42" pos:end="325:42">(</operator><name pos:start="325:43" pos:end="325:56"><name pos:start="325:43" pos:end="325:49">ac_val2</name><index pos:start="325:50" pos:end="325:56">[<expr pos:start="325:51" pos:end="325:55"><name pos:start="325:51" pos:end="325:51">k</name> <operator pos:start="325:53" pos:end="325:53">+</operator> <literal type="number" pos:start="325:55" pos:end="325:55">8</literal></expr>]</index></name> <operator pos:start="325:58" pos:end="325:58">*</operator> <name pos:start="325:60" pos:end="325:61">q2</name> <operator pos:start="325:63" pos:end="325:63">*</operator> <name pos:start="325:65" pos:end="325:83"><name pos:start="325:65" pos:end="325:75">vc1_dqscale</name><index pos:start="325:76" pos:end="325:83">[<expr pos:start="325:77" pos:end="325:82"><name pos:start="325:77" pos:end="325:78">q1</name> <operator pos:start="325:80" pos:end="325:80">-</operator> <literal type="number" pos:start="325:82" pos:end="325:82">1</literal></expr>]</index></name> <operator pos:start="325:85" pos:end="325:85">+</operator> <literal type="number" pos:start="325:87" pos:end="325:93">0x20000</literal><operator pos:start="325:94" pos:end="325:94">)</operator> <operator pos:start="325:96" pos:end="325:97">&gt;&gt;</operator> <literal type="number" pos:start="325:99" pos:end="325:100">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="335:9" pos:end="335:43">/* apply AC prediction if needed */</comment>

        <if_stmt pos:start="337:9" pos:end="367:9"><if pos:start="337:9" pos:end="367:9">if<condition pos:start="337:11" pos:end="337:20">(<expr pos:start="337:12" pos:end="337:19"><name pos:start="337:12" pos:end="337:19">use_pred</name></expr>)</condition> <block pos:start="337:22" pos:end="367:9">{<block_content pos:start="339:13" pos:end="365:19">

            <if_stmt pos:start="339:13" pos:end="363:13"><if pos:start="339:13" pos:end="351:13">if<condition pos:start="339:15" pos:end="339:27">(<expr pos:start="339:16" pos:end="339:26"><name pos:start="339:16" pos:end="339:26">dc_pred_dir</name></expr>)</condition> <block pos:start="339:29" pos:end="351:13">{<block_content pos:start="341:17" pos:end="349:17"> <comment type="line" pos:start="339:31" pos:end="339:36">//left</comment>

                <for pos:start="341:17" pos:end="349:17">for<control pos:start="341:20" pos:end="341:38">(<init pos:start="341:21" pos:end="341:26"><expr pos:start="341:21" pos:end="341:25"><name pos:start="341:21" pos:end="341:21">k</name> <operator pos:start="341:23" pos:end="341:23">=</operator> <literal type="number" pos:start="341:25" pos:end="341:25">1</literal></expr>;</init> <condition pos:start="341:28" pos:end="341:33"><expr pos:start="341:28" pos:end="341:32"><name pos:start="341:28" pos:end="341:28">k</name> <operator pos:start="341:30" pos:end="341:30">&lt;</operator> <literal type="number" pos:start="341:32" pos:end="341:32">8</literal></expr>;</condition> <incr pos:start="341:35" pos:end="341:37"><expr pos:start="341:35" pos:end="341:37"><name pos:start="341:35" pos:end="341:35">k</name><operator pos:start="341:36" pos:end="341:37">++</operator></expr></incr>)</control> <block pos:start="341:40" pos:end="349:17">{<block_content pos:start="343:21" pos:end="347:80">

                    <expr_stmt pos:start="343:21" pos:end="343:55"><expr pos:start="343:21" pos:end="343:54"><name pos:start="343:21" pos:end="343:33"><name pos:start="343:21" pos:end="343:25">block</name><index pos:start="343:26" pos:end="343:33">[<expr pos:start="343:27" pos:end="343:32"><name pos:start="343:27" pos:end="343:27">k</name> <operator pos:start="343:29" pos:end="343:30">&lt;&lt;</operator> <literal type="number" pos:start="343:32" pos:end="343:32">3</literal></expr>]</index></name> <operator pos:start="343:35" pos:end="343:35">=</operator> <name pos:start="343:37" pos:end="343:46"><name pos:start="343:37" pos:end="343:43">ac_val2</name><index pos:start="343:44" pos:end="343:46">[<expr pos:start="343:45" pos:end="343:45"><name pos:start="343:45" pos:end="343:45">k</name></expr>]</index></name> <operator pos:start="343:48" pos:end="343:48">*</operator> <name pos:start="343:50" pos:end="343:54">scale</name></expr>;</expr_stmt>

                    <if_stmt pos:start="345:21" pos:end="347:80"><if pos:start="345:21" pos:end="347:80">if<condition pos:start="345:23" pos:end="345:55">(<expr pos:start="345:24" pos:end="345:54"><operator pos:start="345:24" pos:end="345:24">!</operator><name pos:start="345:25" pos:end="345:37"><name pos:start="345:25" pos:end="345:25">v</name><operator pos:start="345:26" pos:end="345:27">-&gt;</operator><name pos:start="345:28" pos:end="345:37">pquantizer</name></name> <operator pos:start="345:39" pos:end="345:40">&amp;&amp;</operator> <name pos:start="345:42" pos:end="345:54"><name pos:start="345:42" pos:end="345:46">block</name><index pos:start="345:47" pos:end="345:54">[<expr pos:start="345:48" pos:end="345:53"><name pos:start="345:48" pos:end="345:48">k</name> <operator pos:start="345:50" pos:end="345:51">&lt;&lt;</operator> <literal type="number" pos:start="345:53" pos:end="345:53">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="347:25" pos:end="347:80"><block_content pos:start="347:25" pos:end="347:80">

                        <expr_stmt pos:start="347:25" pos:end="347:80"><expr pos:start="347:25" pos:end="347:79"><name pos:start="347:25" pos:end="347:37"><name pos:start="347:25" pos:end="347:29">block</name><index pos:start="347:30" pos:end="347:37">[<expr pos:start="347:31" pos:end="347:36"><name pos:start="347:31" pos:end="347:31">k</name> <operator pos:start="347:33" pos:end="347:34">&lt;&lt;</operator> <literal type="number" pos:start="347:36" pos:end="347:36">3</literal></expr>]</index></name> <operator pos:start="347:39" pos:end="347:40">+=</operator> <ternary pos:start="347:42" pos:end="347:79"><condition pos:start="347:42" pos:end="347:62"><expr pos:start="347:42" pos:end="347:60"><operator pos:start="347:42" pos:end="347:42">(</operator><name pos:start="347:43" pos:end="347:55"><name pos:start="347:43" pos:end="347:47">block</name><index pos:start="347:48" pos:end="347:55">[<expr pos:start="347:49" pos:end="347:54"><name pos:start="347:49" pos:end="347:49">k</name> <operator pos:start="347:51" pos:end="347:52">&lt;&lt;</operator> <literal type="number" pos:start="347:54" pos:end="347:54">3</literal></expr>]</index></name> <operator pos:start="347:57" pos:end="347:57">&lt;</operator> <literal type="number" pos:start="347:59" pos:end="347:59">0</literal><operator pos:start="347:60" pos:end="347:60">)</operator></expr> ?</condition><then pos:start="347:64" pos:end="347:70"> <expr pos:start="347:64" pos:end="347:70"><operator pos:start="347:64" pos:end="347:64">-</operator><name pos:start="347:65" pos:end="347:70">mquant</name></expr> </then><else pos:start="347:72" pos:end="347:79">: <expr pos:start="347:74" pos:end="347:79"><name pos:start="347:74" pos:end="347:79">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="351:15" pos:end="363:13">else <block pos:start="351:20" pos:end="363:13">{<block_content pos:start="353:17" pos:end="361:17"> <comment type="line" pos:start="351:22" pos:end="351:26">//top</comment>

                <for pos:start="353:17" pos:end="361:17">for<control pos:start="353:20" pos:end="353:38">(<init pos:start="353:21" pos:end="353:26"><expr pos:start="353:21" pos:end="353:25"><name pos:start="353:21" pos:end="353:21">k</name> <operator pos:start="353:23" pos:end="353:23">=</operator> <literal type="number" pos:start="353:25" pos:end="353:25">1</literal></expr>;</init> <condition pos:start="353:28" pos:end="353:33"><expr pos:start="353:28" pos:end="353:32"><name pos:start="353:28" pos:end="353:28">k</name> <operator pos:start="353:30" pos:end="353:30">&lt;</operator> <literal type="number" pos:start="353:32" pos:end="353:32">8</literal></expr>;</condition> <incr pos:start="353:35" pos:end="353:37"><expr pos:start="353:35" pos:end="353:37"><name pos:start="353:35" pos:end="353:35">k</name><operator pos:start="353:36" pos:end="353:37">++</operator></expr></incr>)</control> <block pos:start="353:40" pos:end="361:17">{<block_content pos:start="355:21" pos:end="359:70">

                    <expr_stmt pos:start="355:21" pos:end="355:54"><expr pos:start="355:21" pos:end="355:53"><name pos:start="355:21" pos:end="355:28"><name pos:start="355:21" pos:end="355:25">block</name><index pos:start="355:26" pos:end="355:28">[<expr pos:start="355:27" pos:end="355:27"><name pos:start="355:27" pos:end="355:27">k</name></expr>]</index></name> <operator pos:start="355:30" pos:end="355:30">=</operator> <name pos:start="355:32" pos:end="355:45"><name pos:start="355:32" pos:end="355:38">ac_val2</name><index pos:start="355:39" pos:end="355:45">[<expr pos:start="355:40" pos:end="355:44"><name pos:start="355:40" pos:end="355:40">k</name> <operator pos:start="355:42" pos:end="355:42">+</operator> <literal type="number" pos:start="355:44" pos:end="355:44">8</literal></expr>]</index></name> <operator pos:start="355:47" pos:end="355:47">*</operator> <name pos:start="355:49" pos:end="355:53">scale</name></expr>;</expr_stmt>

                    <if_stmt pos:start="357:21" pos:end="359:70"><if pos:start="357:21" pos:end="359:70">if<condition pos:start="357:23" pos:end="357:50">(<expr pos:start="357:24" pos:end="357:49"><operator pos:start="357:24" pos:end="357:24">!</operator><name pos:start="357:25" pos:end="357:37"><name pos:start="357:25" pos:end="357:25">v</name><operator pos:start="357:26" pos:end="357:27">-&gt;</operator><name pos:start="357:28" pos:end="357:37">pquantizer</name></name> <operator pos:start="357:39" pos:end="357:40">&amp;&amp;</operator> <name pos:start="357:42" pos:end="357:49"><name pos:start="357:42" pos:end="357:46">block</name><index pos:start="357:47" pos:end="357:49">[<expr pos:start="357:48" pos:end="357:48"><name pos:start="357:48" pos:end="357:48">k</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="359:25" pos:end="359:70"><block_content pos:start="359:25" pos:end="359:70">

                        <expr_stmt pos:start="359:25" pos:end="359:70"><expr pos:start="359:25" pos:end="359:69"><name pos:start="359:25" pos:end="359:32"><name pos:start="359:25" pos:end="359:29">block</name><index pos:start="359:30" pos:end="359:32">[<expr pos:start="359:31" pos:end="359:31"><name pos:start="359:31" pos:end="359:31">k</name></expr>]</index></name> <operator pos:start="359:34" pos:end="359:35">+=</operator> <ternary pos:start="359:37" pos:end="359:69"><condition pos:start="359:37" pos:end="359:52"><expr pos:start="359:37" pos:end="359:50"><operator pos:start="359:37" pos:end="359:37">(</operator><name pos:start="359:38" pos:end="359:45"><name pos:start="359:38" pos:end="359:42">block</name><index pos:start="359:43" pos:end="359:45">[<expr pos:start="359:44" pos:end="359:44"><name pos:start="359:44" pos:end="359:44">k</name></expr>]</index></name> <operator pos:start="359:47" pos:end="359:47">&lt;</operator> <literal type="number" pos:start="359:49" pos:end="359:49">0</literal><operator pos:start="359:50" pos:end="359:50">)</operator></expr> ?</condition><then pos:start="359:54" pos:end="359:60"> <expr pos:start="359:54" pos:end="359:60"><operator pos:start="359:54" pos:end="359:54">-</operator><name pos:start="359:55" pos:end="359:60">mquant</name></expr> </then><else pos:start="359:62" pos:end="359:69">: <expr pos:start="359:64" pos:end="359:69"><name pos:start="359:64" pos:end="359:69">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="365:13" pos:end="365:19"><expr pos:start="365:13" pos:end="365:18"><name pos:start="365:13" pos:end="365:13">i</name> <operator pos:start="365:15" pos:end="365:15">=</operator> <literal type="number" pos:start="365:17" pos:end="365:18">63</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:31"><expr pos:start="371:5" pos:end="371:30"><name pos:start="371:5" pos:end="371:26"><name pos:start="371:5" pos:end="371:5">s</name><operator pos:start="371:6" pos:end="371:7">-&gt;</operator><name pos:start="371:8" pos:end="371:23">block_last_index</name><index pos:start="371:24" pos:end="371:26">[<expr pos:start="371:25" pos:end="371:25"><name pos:start="371:25" pos:end="371:25">n</name></expr>]</index></name> <operator pos:start="371:28" pos:end="371:28">=</operator> <name pos:start="371:30" pos:end="371:30">i</name></expr>;</expr_stmt>



    <return pos:start="375:5" pos:end="375:13">return <expr pos:start="375:12" pos:end="375:12"><literal type="number" pos:start="375:12" pos:end="375:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
