<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12088.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:22">abi_long</name></type> <name pos:start="1:24" pos:end="1:32">do_msgrcv</name><parameter_list pos:start="1:33" pos:end="5:44">(<parameter pos:start="1:34" pos:end="1:42"><decl pos:start="1:34" pos:end="1:42"><type pos:start="1:34" pos:end="1:42"><name pos:start="1:34" pos:end="1:36">int</name></type> <name pos:start="1:38" pos:end="1:42">msqid</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:57"><decl pos:start="1:45" pos:end="1:57"><type pos:start="1:45" pos:end="1:57"><name pos:start="1:45" pos:end="1:52">abi_long</name></type> <name pos:start="1:54" pos:end="1:57">msgp</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:41">unsigned</name> <name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:51">msgsz</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:61">abi_long</name></type> <name pos:start="3:63" pos:end="3:68">msgtyp</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:43"><decl pos:start="5:34" pos:end="5:43"><type pos:start="5:34" pos:end="5:43"><name pos:start="5:34" pos:end="5:36">int</name></type> <name pos:start="5:38" pos:end="5:43">msgflg</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="67:1">{<block_content pos:start="9:5" pos:end="65:15">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:24">target_msgbuf</name></name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:35">target_mb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:22">target_mtext</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:17">msgbuf</name></name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">host_mb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">abi_long</name></type> <name pos:start="15:14" pos:end="15:16">ret</name> <init pos:start="15:18" pos:end="15:20">= <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:30"><if pos:start="19:5" pos:end="21:30">if <condition pos:start="19:8" pos:end="19:60">(<expr pos:start="19:9" pos:end="19:59"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:59"><name pos:start="19:10" pos:end="19:25">lock_user_struct</name><argument_list pos:start="19:26" pos:end="19:59">(<argument pos:start="19:27" pos:end="19:38"><expr pos:start="19:27" pos:end="19:38"><name pos:start="19:27" pos:end="19:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="19:41" pos:end="19:49"><expr pos:start="19:41" pos:end="19:49"><name pos:start="19:41" pos:end="19:49">target_mb</name></expr></argument>, <argument pos:start="19:52" pos:end="19:55"><expr pos:start="19:52" pos:end="19:55"><name pos:start="19:52" pos:end="19:55">msgp</name></expr></argument>, <argument pos:start="19:58" pos:end="19:58"><expr pos:start="19:58" pos:end="19:58"><literal type="number" pos:start="19:58" pos:end="19:58">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:30"><block_content pos:start="21:9" pos:end="21:30">

        <return pos:start="21:9" pos:end="21:30">return <expr pos:start="21:16" pos:end="21:29"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:29">TARGET_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:11">host_mb</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:40"><name pos:start="25:15" pos:end="25:20">malloc</name><argument_list pos:start="25:21" pos:end="25:40">(<argument pos:start="25:22" pos:end="25:39"><expr pos:start="25:22" pos:end="25:39"><name pos:start="25:22" pos:end="25:26">msgsz</name><operator pos:start="25:27" pos:end="25:27">+</operator><sizeof pos:start="25:28" pos:end="25:39">sizeof<argument_list pos:start="25:34" pos:end="25:39">(<argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><name pos:start="25:35" pos:end="25:38">long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:76"><expr pos:start="27:5" pos:end="27:75"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:75"><name pos:start="27:11" pos:end="27:19">get_errno</name><argument_list pos:start="27:20" pos:end="27:75">(<argument pos:start="27:21" pos:end="27:74"><expr pos:start="27:21" pos:end="27:74"><call pos:start="27:21" pos:end="27:74"><name pos:start="27:21" pos:end="27:26">msgrcv</name><argument_list pos:start="27:27" pos:end="27:74">(<argument pos:start="27:28" pos:end="27:32"><expr pos:start="27:28" pos:end="27:32"><name pos:start="27:28" pos:end="27:32">msqid</name></expr></argument>, <argument pos:start="27:35" pos:end="27:41"><expr pos:start="27:35" pos:end="27:41"><name pos:start="27:35" pos:end="27:41">host_mb</name></expr></argument>, <argument pos:start="27:44" pos:end="27:48"><expr pos:start="27:44" pos:end="27:48"><name pos:start="27:44" pos:end="27:48">msgsz</name></expr></argument>, <argument pos:start="27:51" pos:end="27:65"><expr pos:start="27:51" pos:end="27:65"><call pos:start="27:51" pos:end="27:65"><name pos:start="27:51" pos:end="27:57">tswapal</name><argument_list pos:start="27:58" pos:end="27:65">(<argument pos:start="27:59" pos:end="27:64"><expr pos:start="27:59" pos:end="27:64"><name pos:start="27:59" pos:end="27:64">msgtyp</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:68" pos:end="27:73"><expr pos:start="27:68" pos:end="27:73"><name pos:start="27:68" pos:end="27:73">msgflg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="49:5"><if pos:start="31:5" pos:end="49:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&gt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="49:5">{<block_content pos:start="33:9" pos:end="47:58">

        <decl_stmt pos:start="33:9" pos:end="33:63"><decl pos:start="33:9" pos:end="33:62"><type pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:17">abi_ulong</name></type> <name pos:start="33:19" pos:end="33:35">target_mtext_addr</name> <init pos:start="33:37" pos:end="33:62">= <expr pos:start="33:39" pos:end="33:62"><name pos:start="33:39" pos:end="33:42">msgp</name> <operator pos:start="33:44" pos:end="33:44">+</operator> <sizeof pos:start="33:46" pos:end="33:62">sizeof<argument_list pos:start="33:52" pos:end="33:62">(<argument pos:start="33:53" pos:end="33:61"><expr pos:start="33:53" pos:end="33:61"><name pos:start="33:53" pos:end="33:61">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:74"><expr pos:start="35:9" pos:end="35:73"><name pos:start="35:9" pos:end="35:20">target_mtext</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:73"><name pos:start="35:24" pos:end="35:32">lock_user</name><argument_list pos:start="35:33" pos:end="35:73">(<argument pos:start="35:34" pos:end="35:45"><expr pos:start="35:34" pos:end="35:45"><name pos:start="35:34" pos:end="35:45">VERIFY_WRITE</name></expr></argument>, <argument pos:start="35:48" pos:end="35:64"><expr pos:start="35:48" pos:end="35:64"><name pos:start="35:48" pos:end="35:64">target_mtext_addr</name></expr></argument>, <argument pos:start="35:67" pos:end="35:69"><expr pos:start="35:67" pos:end="35:69"><name pos:start="35:67" pos:end="35:69">ret</name></expr></argument>, <argument pos:start="35:72" pos:end="35:72"><expr pos:start="35:72" pos:end="35:72"><literal type="number" pos:start="35:72" pos:end="35:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:26">(<expr pos:start="37:13" pos:end="37:25"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:25">target_mtext</name></expr>)</condition> <block pos:start="37:28" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:21">

            <expr_stmt pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:32"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">-</operator><name pos:start="39:20" pos:end="39:32">TARGET_EFAULT</name></expr>;</expr_stmt>

            <goto pos:start="41:13" pos:end="41:21">goto <name pos:start="41:18" pos:end="41:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:54"><expr pos:start="45:9" pos:end="45:53"><call pos:start="45:9" pos:end="45:53"><name pos:start="45:9" pos:end="45:14">memcpy</name><argument_list pos:start="45:15" pos:end="45:53">(<argument pos:start="45:16" pos:end="45:31"><expr pos:start="45:16" pos:end="45:31"><name pos:start="45:16" pos:end="45:31"><name pos:start="45:16" pos:end="45:24">target_mb</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:31">mtext</name></name></expr></argument>, <argument pos:start="45:34" pos:end="45:47"><expr pos:start="45:34" pos:end="45:47"><name pos:start="45:34" pos:end="45:47"><name pos:start="45:34" pos:end="45:40">host_mb</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:47">mtext</name></name></expr></argument>, <argument pos:start="45:50" pos:end="45:52"><expr pos:start="45:50" pos:end="45:52"><name pos:start="45:50" pos:end="45:52">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:58"><expr pos:start="47:9" pos:end="47:57"><call pos:start="47:9" pos:end="47:57"><name pos:start="47:9" pos:end="47:19">unlock_user</name><argument_list pos:start="47:20" pos:end="47:57">(<argument pos:start="47:21" pos:end="47:32"><expr pos:start="47:21" pos:end="47:32"><name pos:start="47:21" pos:end="47:32">target_mtext</name></expr></argument>, <argument pos:start="47:35" pos:end="47:51"><expr pos:start="47:35" pos:end="47:51"><name pos:start="47:35" pos:end="47:51">target_mtext_addr</name></expr></argument>, <argument pos:start="47:54" pos:end="47:56"><expr pos:start="47:54" pos:end="47:56"><name pos:start="47:54" pos:end="47:56">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:47"><expr pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:13">target_mb</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">mtype</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <call pos:start="53:24" pos:end="53:46"><name pos:start="53:24" pos:end="53:30">tswapal</name><argument_list pos:start="53:31" pos:end="53:46">(<argument pos:start="53:32" pos:end="53:45"><expr pos:start="53:32" pos:end="53:45"><name pos:start="53:32" pos:end="53:45"><name pos:start="53:32" pos:end="53:38">host_mb</name><operator pos:start="53:39" pos:end="53:40">-&gt;</operator><name pos:start="53:41" pos:end="53:45">mtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><call pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:8">free</name><argument_list pos:start="55:9" pos:end="55:17">(<argument pos:start="55:10" pos:end="55:16"><expr pos:start="55:10" pos:end="55:16"><name pos:start="55:10" pos:end="55:16">host_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="59:1" pos:end="59:4"><name pos:start="59:1" pos:end="59:3">end</name>:</label>

    <if_stmt pos:start="61:5" pos:end="63:47"><if pos:start="61:5" pos:end="63:47">if <condition pos:start="61:8" pos:end="61:18">(<expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:17">target_mb</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:47"><block_content pos:start="63:9" pos:end="63:47">

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><call pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:26">unlock_user_struct</name><argument_list pos:start="63:27" pos:end="63:46">(<argument pos:start="63:28" pos:end="63:36"><expr pos:start="63:28" pos:end="63:36"><name pos:start="63:28" pos:end="63:36">target_mb</name></expr></argument>, <argument pos:start="63:39" pos:end="63:42"><expr pos:start="63:39" pos:end="63:42"><name pos:start="63:39" pos:end="63:42">msgp</name></expr></argument>, <argument pos:start="63:45" pos:end="63:45"><expr pos:start="63:45" pos:end="63:45"><literal type="number" pos:start="63:45" pos:end="63:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="65:5" pos:end="65:15">return <expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
