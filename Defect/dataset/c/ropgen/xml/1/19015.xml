<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19015.c" pos:tabs="8"><function pos:start="1:1" pos:end="188:13"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:29">cpu_ppc_register_internal</name> <parameter_list pos:start="1:31" pos:end="1:70">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:42">CPUPPCState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:64">ppc_def_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">def</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="188:13">{<block_content pos:start="3:5" pos:end="188:13">
    <expr_stmt pos:start="3:5" pos:end="3:34"><expr pos:start="3:5" pos:end="3:33"><name pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:7">env</name><operator pos:start="3:8" pos:end="3:9">-&gt;</operator><name pos:start="3:10" pos:end="3:17">msr_mask</name></name> <operator pos:start="3:19" pos:end="3:19">=</operator> <name pos:start="3:21" pos:end="3:33"><name pos:start="3:21" pos:end="3:23">def</name><operator pos:start="3:24" pos:end="3:25">-&gt;</operator><name pos:start="3:26" pos:end="3:33">msr_mask</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="4:5" pos:end="4:36"><expr pos:start="4:5" pos:end="4:35"><name pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:7">env</name><operator pos:start="4:8" pos:end="4:9">-&gt;</operator><name pos:start="4:10" pos:end="4:18">mmu_model</name></name> <operator pos:start="4:20" pos:end="4:20">=</operator> <name pos:start="4:22" pos:end="4:35"><name pos:start="4:22" pos:end="4:24">def</name><operator pos:start="4:25" pos:end="4:26">-&gt;</operator><name pos:start="4:27" pos:end="4:35">mmu_model</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="5:5" pos:end="5:38"><expr pos:start="5:5" pos:end="5:37"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:7">env</name><operator pos:start="5:8" pos:end="5:9">-&gt;</operator><name pos:start="5:10" pos:end="5:19">excp_model</name></name> <operator pos:start="5:21" pos:end="5:21">=</operator> <name pos:start="5:23" pos:end="5:37"><name pos:start="5:23" pos:end="5:25">def</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:37">excp_model</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:36"><expr pos:start="6:5" pos:end="6:35"><name pos:start="6:5" pos:end="6:18"><name pos:start="6:5" pos:end="6:7">env</name><operator pos:start="6:8" pos:end="6:9">-&gt;</operator><name pos:start="6:10" pos:end="6:18">bus_model</name></name> <operator pos:start="6:20" pos:end="6:20">=</operator> <name pos:start="6:22" pos:end="6:35"><name pos:start="6:22" pos:end="6:24">def</name><operator pos:start="6:25" pos:end="6:26">-&gt;</operator><name pos:start="6:27" pos:end="6:35">bus_model</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:40"><expr pos:start="7:5" pos:end="7:39"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:7">env</name><operator pos:start="7:8" pos:end="7:9">-&gt;</operator><name pos:start="7:10" pos:end="7:20">insns_flags</name></name> <operator pos:start="7:22" pos:end="7:22">=</operator> <name pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:26">def</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:39">insns_flags</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:42"><expr pos:start="8:5" pos:end="8:41"><name pos:start="8:5" pos:end="8:21"><name pos:start="8:5" pos:end="8:7">env</name><operator pos:start="8:8" pos:end="8:9">-&gt;</operator><name pos:start="8:10" pos:end="8:21">insns_flags2</name></name> <operator pos:start="8:23" pos:end="8:23">=</operator> <name pos:start="8:25" pos:end="8:41"><name pos:start="8:25" pos:end="8:27">def</name><operator pos:start="8:28" pos:end="8:29">-&gt;</operator><name pos:start="8:30" pos:end="8:41">insns_flags2</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:28"><expr pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:7">env</name><operator pos:start="9:8" pos:end="9:9">-&gt;</operator><name pos:start="9:10" pos:end="9:14">flags</name></name> <operator pos:start="9:16" pos:end="9:16">=</operator> <name pos:start="9:18" pos:end="9:27"><name pos:start="9:18" pos:end="9:20">def</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:27">flags</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:34"><expr pos:start="10:5" pos:end="10:33"><name pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:7">env</name><operator pos:start="10:8" pos:end="10:9">-&gt;</operator><name pos:start="10:10" pos:end="10:17">bfd_mach</name></name> <operator pos:start="10:19" pos:end="10:19">=</operator> <name pos:start="10:21" pos:end="10:33"><name pos:start="10:21" pos:end="10:23">def</name><operator pos:start="10:24" pos:end="10:25">-&gt;</operator><name pos:start="10:26" pos:end="10:33">bfd_mach</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:36"><expr pos:start="11:5" pos:end="11:35"><name pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:7">env</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:18">check_pow</name></name> <operator pos:start="11:20" pos:end="11:20">=</operator> <name pos:start="11:22" pos:end="11:35"><name pos:start="11:22" pos:end="11:24">def</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:35">check_pow</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="12:5" pos:end="188:13"><if pos:start="12:5" pos:end="188:13">if <condition pos:start="12:8" pos:end="12:22">(<expr pos:start="12:9" pos:end="12:21"><call pos:start="12:9" pos:end="12:21"><name pos:start="12:9" pos:end="12:19">kvm_enabled</name><argument_list pos:start="12:20" pos:end="12:21">()</argument_list></call></expr>)</condition> <block pos:start="12:24" pos:end="188:13">{<block_content pos:start="13:9" pos:end="188:13">
        <if_stmt pos:start="13:9" pos:end="188:13"><if pos:start="13:9" pos:end="16:5">if <condition pos:start="13:12" pos:end="13:39">(<expr pos:start="13:13" pos:end="13:38"><call pos:start="13:13" pos:end="13:33"><name pos:start="13:13" pos:end="13:28">kvmppc_fixup_cpu</name><argument_list pos:start="13:29" pos:end="13:33">(<argument pos:start="13:30" pos:end="13:32"><expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:32">env</name></expr></argument>)</argument_list></call> <operator pos:start="13:35" pos:end="13:36">!=</operator> <literal type="number" pos:start="13:38" pos:end="13:38">0</literal></expr>)</condition> <block pos:start="13:41" pos:end="16:5">{<block_content pos:start="14:13" pos:end="15:20">
            <expr_stmt pos:start="14:13" pos:end="14:76"><expr pos:start="14:13" pos:end="14:75"><call pos:start="14:13" pos:end="14:75"><name pos:start="14:13" pos:end="14:19">fprintf</name><argument_list pos:start="14:20" pos:end="14:75">(<argument pos:start="14:21" pos:end="14:26"><expr pos:start="14:21" pos:end="14:26"><name pos:start="14:21" pos:end="14:26">stderr</name></expr></argument>, <argument pos:start="14:29" pos:end="14:74"><expr pos:start="14:29" pos:end="14:74"><literal type="string" pos:start="14:29" pos:end="14:74">"Unable to virtualize selected CPU with KVM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="15:13" pos:end="15:20"><expr pos:start="15:13" pos:end="15:19"><call pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:16">exit</name><argument_list pos:start="15:17" pos:end="15:19">(<argument pos:start="15:18" pos:end="15:18"><expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="16:7" pos:end="188:13">else <block pos:start="16:12" pos:end="188:13">{<block_content pos:start="17:9" pos:end="188:13">
        <if_stmt pos:start="17:9" pos:end="188:13"><if pos:start="17:9" pos:end="188:13">if <condition pos:start="17:12" pos:end="17:36">(<expr pos:start="17:13" pos:end="17:35"><call pos:start="17:13" pos:end="17:30"><name pos:start="17:13" pos:end="17:25">ppc_fixup_cpu</name><argument_list pos:start="17:26" pos:end="17:30">(<argument pos:start="17:27" pos:end="17:29"><expr pos:start="17:27" pos:end="17:29"><name pos:start="17:27" pos:end="17:29">env</name></expr></argument>)</argument_list></call> <operator pos:start="17:32" pos:end="17:33">!=</operator> <literal type="number" pos:start="17:35" pos:end="17:35">0</literal></expr>)</condition> <block pos:start="17:38" pos:end="188:13">{<block_content pos:start="18:13" pos:end="188:13">
            <expr_stmt pos:start="18:13" pos:end="18:73"><expr pos:start="18:13" pos:end="18:72"><call pos:start="18:13" pos:end="18:72"><name pos:start="18:13" pos:end="18:19">fprintf</name><argument_list pos:start="18:20" pos:end="18:72">(<argument pos:start="18:21" pos:end="18:26"><expr pos:start="18:21" pos:end="18:26"><name pos:start="18:21" pos:end="18:26">stderr</name></expr></argument>, <argument pos:start="18:29" pos:end="18:71"><expr pos:start="18:29" pos:end="18:71"><literal type="string" pos:start="18:29" pos:end="18:71">"Unable to emulate selected CPU with TCG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="19:13" pos:end="19:20"><expr pos:start="19:13" pos:end="19:19"><call pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:16">exit</name><argument_list pos:start="19:17" pos:end="19:19">(<argument pos:start="19:18" pos:end="19:18"><expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="20:5" pos:end="21:18"><if pos:start="20:5" pos:end="21:18">if <condition pos:start="20:8" pos:end="20:41">(<expr pos:start="20:9" pos:end="20:40"><call pos:start="20:9" pos:end="20:36"><name pos:start="20:9" pos:end="20:26">create_ppc_opcodes</name><argument_list pos:start="20:27" pos:end="20:36">(<argument pos:start="20:28" pos:end="20:30"><expr pos:start="20:28" pos:end="20:30"><name pos:start="20:28" pos:end="20:30">env</name></expr></argument>, <argument pos:start="20:33" pos:end="20:35"><expr pos:start="20:33" pos:end="20:35"><name pos:start="20:33" pos:end="20:35">def</name></expr></argument>)</argument_list></call> <operator pos:start="20:38" pos:end="20:38">&lt;</operator> <literal type="number" pos:start="20:40" pos:end="20:40">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:18"><block_content pos:start="21:9" pos:end="21:18">
        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:28"><expr pos:start="22:5" pos:end="22:27"><call pos:start="22:5" pos:end="22:27"><name pos:start="22:5" pos:end="22:17">init_ppc_proc</name><argument_list pos:start="22:18" pos:end="22:27">(<argument pos:start="22:19" pos:end="22:21"><expr pos:start="22:19" pos:end="22:21"><name pos:start="22:19" pos:end="22:21">env</name></expr></argument>, <argument pos:start="22:24" pos:end="22:26"><expr pos:start="22:24" pos:end="22:26"><name pos:start="22:24" pos:end="22:26">def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="23:5" pos:end="188:13"><if pos:start="23:5" pos:end="188:13">if <condition pos:start="23:8" pos:end="23:37">(<expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:11">def</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:24">insns_flags</name></name> <operator pos:start="23:26" pos:end="23:26">&amp;</operator> <name pos:start="23:28" pos:end="23:36">PPC_FLOAT</name></expr>)</condition> <block pos:start="23:39" pos:end="188:13">{<block_content pos:start="24:9" pos:end="188:13">
        <expr_stmt pos:start="24:9" pos:end="25:57"><expr pos:start="24:9" pos:end="25:56"><call pos:start="24:9" pos:end="25:56"><name pos:start="24:9" pos:end="24:32">gdb_register_coprocessor</name><argument_list pos:start="24:33" pos:end="25:56">(<argument pos:start="24:34" pos:end="24:36"><expr pos:start="24:34" pos:end="24:36"><name pos:start="24:34" pos:end="24:36">env</name></expr></argument>, <argument pos:start="24:39" pos:end="24:55"><expr pos:start="24:39" pos:end="24:55"><name pos:start="24:39" pos:end="24:55">gdb_get_float_reg</name></expr></argument>, <argument pos:start="24:58" pos:end="24:74"><expr pos:start="24:58" pos:end="24:74"><name pos:start="24:58" pos:end="24:74">gdb_set_float_reg</name></expr></argument>,
                                 <argument pos:start="25:34" pos:end="25:35"><expr pos:start="25:34" pos:end="25:35"><literal type="number" pos:start="25:34" pos:end="25:35">33</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:52"><expr pos:start="25:38" pos:end="25:52"><literal type="string" pos:start="25:38" pos:end="25:52">"power-fpu.xml"</literal></expr></argument>, <argument pos:start="25:55" pos:end="25:55"><expr pos:start="25:55" pos:end="25:55"><literal type="number" pos:start="25:55" pos:end="25:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="188:13"><if pos:start="26:5" pos:end="188:13">if <condition pos:start="26:8" pos:end="26:39">(<expr pos:start="26:9" pos:end="26:38"><name pos:start="26:9" pos:end="26:24"><name pos:start="26:9" pos:end="26:11">def</name><operator pos:start="26:12" pos:end="26:13">-&gt;</operator><name pos:start="26:14" pos:end="26:24">insns_flags</name></name> <operator pos:start="26:26" pos:end="26:26">&amp;</operator> <name pos:start="26:28" pos:end="26:38">PPC_ALTIVEC</name></expr>)</condition> <block pos:start="26:41" pos:end="188:13">{<block_content pos:start="27:9" pos:end="188:13">
        <expr_stmt pos:start="27:9" pos:end="28:61"><expr pos:start="27:9" pos:end="28:60"><call pos:start="27:9" pos:end="28:60"><name pos:start="27:9" pos:end="27:32">gdb_register_coprocessor</name><argument_list pos:start="27:33" pos:end="28:60">(<argument pos:start="27:34" pos:end="27:36"><expr pos:start="27:34" pos:end="27:36"><name pos:start="27:34" pos:end="27:36">env</name></expr></argument>, <argument pos:start="27:39" pos:end="27:53"><expr pos:start="27:39" pos:end="27:53"><name pos:start="27:39" pos:end="27:53">gdb_get_avr_reg</name></expr></argument>, <argument pos:start="27:56" pos:end="27:70"><expr pos:start="27:56" pos:end="27:70"><name pos:start="27:56" pos:end="27:70">gdb_set_avr_reg</name></expr></argument>,
                                 <argument pos:start="28:34" pos:end="28:35"><expr pos:start="28:34" pos:end="28:35"><literal type="number" pos:start="28:34" pos:end="28:35">34</literal></expr></argument>, <argument pos:start="28:38" pos:end="28:56"><expr pos:start="28:38" pos:end="28:56"><literal type="string" pos:start="28:38" pos:end="28:56">"power-altivec.xml"</literal></expr></argument>, <argument pos:start="28:59" pos:end="28:59"><expr pos:start="28:59" pos:end="28:59"><literal type="number" pos:start="28:59" pos:end="28:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="188:13"><if pos:start="29:5" pos:end="188:13">if <condition pos:start="29:8" pos:end="29:35">(<expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:11">def</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:24">insns_flags</name></name> <operator pos:start="29:26" pos:end="29:26">&amp;</operator> <name pos:start="29:28" pos:end="29:34">PPC_SPE</name></expr>)</condition> <block pos:start="29:37" pos:end="188:13">{<block_content pos:start="30:9" pos:end="188:13">
        <expr_stmt pos:start="30:9" pos:end="33:0"><expr pos:start="30:9" pos:end="31:56"><call pos:start="30:9" pos:end="31:56"><name pos:start="30:9" pos:end="30:32">gdb_register_coprocessor</name><argument_list pos:start="30:33" pos:end="31:56">(<argument pos:start="30:34" pos:end="30:36"><expr pos:start="30:34" pos:end="30:36"><name pos:start="30:34" pos:end="30:36">env</name></expr></argument>, <argument pos:start="30:39" pos:end="30:53"><expr pos:start="30:39" pos:end="30:53"><name pos:start="30:39" pos:end="30:53">gdb_get_spe_reg</name></expr></argument>, <argument pos:start="30:56" pos:end="30:70"><expr pos:start="30:56" pos:end="30:70"><name pos:start="30:56" pos:end="30:70">gdb_set_spe_reg</name></expr></argument>,
                                 <argument pos:start="31:34" pos:end="31:35"><expr pos:start="31:34" pos:end="31:35"><literal type="number" pos:start="31:34" pos:end="31:35">34</literal></expr></argument>, <argument pos:start="31:38" pos:end="31:52"><expr pos:start="31:38" pos:end="31:52"><literal type="string" pos:start="31:38" pos:end="31:52">"power-spe.xml"</literal></expr></argument>, <argument pos:start="31:55" pos:end="31:55"><expr pos:start="31:55" pos:end="31:55"><literal type="number" pos:start="31:55" pos:end="31:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="32:1" pos:end="32:25">#<cpp:directive pos:start="32:2" pos:end="32:3">if</cpp:directive> <expr pos:start="32:5" pos:end="32:25"><call pos:start="32:5" pos:end="32:25"><name pos:start="32:5" pos:end="32:11">defined</name><argument_list pos:start="32:12" pos:end="32:25">(<argument pos:start="32:13" pos:end="32:24"><expr pos:start="32:13" pos:end="32:24"><name pos:start="32:13" pos:end="32:24">PPC_DUMP_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <block pos:start="33:5" pos:end="188:13">{<block_content pos:start="34:9" pos:end="188:13">
        <decl_stmt pos:start="34:9" pos:end="34:55"><decl pos:start="34:9" pos:end="34:29"><type pos:start="34:9" pos:end="34:20"><specifier pos:start="34:9" pos:end="34:13">const</specifier> <name pos:start="34:15" pos:end="34:18">char</name> <modifier pos:start="34:20" pos:end="34:20">*</modifier></type><name pos:start="34:21" pos:end="34:29">mmu_model</name></decl>, <decl pos:start="34:32" pos:end="34:42"><type ref="prev" pos:start="34:9" pos:end="34:20"><modifier pos:start="34:32" pos:end="34:32">*</modifier></type><name pos:start="34:33" pos:end="34:42">excp_model</name></decl>, <decl pos:start="34:45" pos:end="34:54"><type ref="prev" pos:start="34:9" pos:end="34:20"><modifier pos:start="34:45" pos:end="34:45">*</modifier></type><name pos:start="34:46" pos:end="34:54">bus_model</name></decl>;</decl_stmt>
        <switch pos:start="35:9" pos:end="188:13">switch <condition pos:start="35:16" pos:end="35:31">(<expr pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:19">env</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:30">mmu_model</name></name></expr>)</condition> <block pos:start="35:33" pos:end="188:13">{<block_content pos:start="36:9" pos:end="188:13">
        <case pos:start="36:9" pos:end="36:29">case <expr pos:start="36:14" pos:end="36:28"><name pos:start="36:14" pos:end="36:28">POWERPC_MMU_32B</name></expr>:</case>
            <expr_stmt pos:start="37:13" pos:end="37:37"><expr pos:start="37:13" pos:end="37:36"><name pos:start="37:13" pos:end="37:21">mmu_model</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <literal type="string" pos:start="37:25" pos:end="37:36">"PowerPC 32"</literal></expr>;</expr_stmt>
            <break pos:start="38:13" pos:end="38:18">break;</break>
        <case pos:start="39:9" pos:end="39:34">case <expr pos:start="39:14" pos:end="39:33"><name pos:start="39:14" pos:end="39:33">POWERPC_MMU_SOFT_6xx</name></expr>:</case>
            <expr_stmt pos:start="40:13" pos:end="40:68"><expr pos:start="40:13" pos:end="40:67"><name pos:start="40:13" pos:end="40:21">mmu_model</name> <operator pos:start="40:23" pos:end="40:23">=</operator> <literal type="string" pos:start="40:25" pos:end="40:67">"PowerPC 6xx/7xx with software driven TLBs"</literal></expr>;</expr_stmt>
            <break pos:start="41:13" pos:end="41:18">break;</break>
        <case pos:start="42:9" pos:end="42:35">case <expr pos:start="42:14" pos:end="42:34"><name pos:start="42:14" pos:end="42:34">POWERPC_MMU_SOFT_74xx</name></expr>:</case>
            <expr_stmt pos:start="43:13" pos:end="43:65"><expr pos:start="43:13" pos:end="43:64"><name pos:start="43:13" pos:end="43:21">mmu_model</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="string" pos:start="43:25" pos:end="43:64">"PowerPC 74xx with software driven TLBs"</literal></expr>;</expr_stmt>
            <break pos:start="44:13" pos:end="44:18">break;</break>
        <case pos:start="45:9" pos:end="45:34">case <expr pos:start="45:14" pos:end="45:33"><name pos:start="45:14" pos:end="45:33">POWERPC_MMU_SOFT_4xx</name></expr>:</case>
            <expr_stmt pos:start="46:13" pos:end="46:64"><expr pos:start="46:13" pos:end="46:63"><name pos:start="46:13" pos:end="46:21">mmu_model</name> <operator pos:start="46:23" pos:end="46:23">=</operator> <literal type="string" pos:start="46:25" pos:end="46:63">"PowerPC 4xx with software driven TLBs"</literal></expr>;</expr_stmt>
            <break pos:start="47:13" pos:end="47:18">break;</break>
        <case pos:start="48:9" pos:end="48:36">case <expr pos:start="48:14" pos:end="48:35"><name pos:start="48:14" pos:end="48:35">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>
            <expr_stmt pos:start="49:13" pos:end="50:40"><expr pos:start="49:13" pos:end="50:39"><name pos:start="49:13" pos:end="49:21">mmu_model</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <literal type="string" pos:start="49:25" pos:end="49:64">"PowerPC 4xx with software driven TLBs "</literal>
                <literal type="string" pos:start="50:17" pos:end="50:39">"and zones protections"</literal></expr>;</expr_stmt>
            <break pos:start="51:13" pos:end="51:18">break;</break>
        <case pos:start="52:9" pos:end="52:30">case <expr pos:start="52:14" pos:end="52:29"><name pos:start="52:14" pos:end="52:29">POWERPC_MMU_REAL</name></expr>:</case>
            <expr_stmt pos:start="53:13" pos:end="53:49"><expr pos:start="53:13" pos:end="53:48"><name pos:start="53:13" pos:end="53:21">mmu_model</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <literal type="string" pos:start="53:25" pos:end="53:48">"PowerPC real mode only"</literal></expr>;</expr_stmt>
            <break pos:start="54:13" pos:end="54:18">break;</break>
        <case pos:start="55:9" pos:end="55:32">case <expr pos:start="55:14" pos:end="55:31"><name pos:start="55:14" pos:end="55:31">POWERPC_MMU_MPC8xx</name></expr>:</case>
            <expr_stmt pos:start="56:13" pos:end="56:41"><expr pos:start="56:13" pos:end="56:40"><name pos:start="56:13" pos:end="56:21">mmu_model</name> <operator pos:start="56:23" pos:end="56:23">=</operator> <literal type="string" pos:start="56:25" pos:end="56:40">"PowerPC MPC8xx"</literal></expr>;</expr_stmt>
            <break pos:start="57:13" pos:end="57:18">break;</break>
        <case pos:start="58:9" pos:end="58:31">case <expr pos:start="58:14" pos:end="58:30"><name pos:start="58:14" pos:end="58:30">POWERPC_MMU_BOOKE</name></expr>:</case>
            <expr_stmt pos:start="59:13" pos:end="59:40"><expr pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:21">mmu_model</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <literal type="string" pos:start="59:25" pos:end="59:39">"PowerPC BookE"</literal></expr>;</expr_stmt>
            <break pos:start="60:13" pos:end="60:18">break;</break>
        <case pos:start="61:9" pos:end="61:34">case <expr pos:start="61:14" pos:end="61:33"><name pos:start="61:14" pos:end="61:33">POWERPC_MMU_BOOKE206</name></expr>:</case>
            <expr_stmt pos:start="62:13" pos:end="62:45"><expr pos:start="62:13" pos:end="62:44"><name pos:start="62:13" pos:end="62:21">mmu_model</name> <operator pos:start="62:23" pos:end="62:23">=</operator> <literal type="string" pos:start="62:25" pos:end="62:44">"PowerPC BookE 2.06"</literal></expr>;</expr_stmt>
            <break pos:start="63:13" pos:end="63:18">break;</break>
        <case pos:start="64:9" pos:end="64:29">case <expr pos:start="64:14" pos:end="64:28"><name pos:start="64:14" pos:end="64:28">POWERPC_MMU_601</name></expr>:</case>
            <expr_stmt pos:start="65:13" pos:end="65:38"><expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:21">mmu_model</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="string" pos:start="65:25" pos:end="65:37">"PowerPC 601"</literal></expr>;</expr_stmt>
            <break pos:start="66:13" pos:end="68:0">break;</break>
<cpp:if pos:start="67:1" pos:end="67:26">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:26"><call pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:11">defined</name> <argument_list pos:start="67:13" pos:end="67:26">(<argument pos:start="67:14" pos:end="67:25"><expr pos:start="67:14" pos:end="67:25"><name pos:start="67:14" pos:end="67:25">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case pos:start="68:9" pos:end="68:29">case <expr pos:start="68:14" pos:end="68:28"><name pos:start="68:14" pos:end="68:28">POWERPC_MMU_64B</name></expr>:</case>
            <expr_stmt pos:start="69:13" pos:end="69:37"><expr pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:21">mmu_model</name> <operator pos:start="69:23" pos:end="69:23">=</operator> <literal type="string" pos:start="69:25" pos:end="69:36">"PowerPC 64"</literal></expr>;</expr_stmt>
            <break pos:start="70:13" pos:end="70:18">break;</break>
        <case pos:start="71:9" pos:end="71:29">case <expr pos:start="71:14" pos:end="71:28"><name pos:start="71:14" pos:end="71:28">POWERPC_MMU_620</name></expr>:</case>
            <expr_stmt pos:start="72:13" pos:end="72:38"><expr pos:start="72:13" pos:end="72:37"><name pos:start="72:13" pos:end="72:21">mmu_model</name> <operator pos:start="72:23" pos:end="72:23">=</operator> <literal type="string" pos:start="72:25" pos:end="72:37">"PowerPC 620"</literal></expr>;</expr_stmt>
            <break pos:start="73:13" pos:end="75:0">break;</break>
<cpp:endif pos:start="74:1" pos:end="74:6">#<cpp:directive pos:start="74:2" pos:end="74:6">endif</cpp:directive></cpp:endif>
        <default pos:start="75:9" pos:end="75:16">default:</default>
            <expr_stmt pos:start="76:13" pos:end="76:45"><expr pos:start="76:13" pos:end="76:44"><name pos:start="76:13" pos:end="76:21">mmu_model</name> <operator pos:start="76:23" pos:end="76:23">=</operator> <literal type="string" pos:start="76:25" pos:end="76:44">"Unknown or invalid"</literal></expr>;</expr_stmt>
            <break pos:start="77:13" pos:end="77:18">break;</break>
        <switch pos:start="78:9" pos:end="188:13">switch <condition pos:start="78:16" pos:end="78:32">(<expr pos:start="78:17" pos:end="78:31"><name pos:start="78:17" pos:end="78:31"><name pos:start="78:17" pos:end="78:19">env</name><operator pos:start="78:20" pos:end="78:21">-&gt;</operator><name pos:start="78:22" pos:end="78:31">excp_model</name></name></expr>)</condition> <block pos:start="78:34" pos:end="188:13">{<block_content pos:start="79:9" pos:end="188:13">
        <case pos:start="79:9" pos:end="79:30">case <expr pos:start="79:14" pos:end="79:29"><name pos:start="79:14" pos:end="79:29">POWERPC_EXCP_STD</name></expr>:</case>
            <expr_stmt pos:start="80:13" pos:end="80:35"><expr pos:start="80:13" pos:end="80:34"><name pos:start="80:13" pos:end="80:22">excp_model</name> <operator pos:start="80:24" pos:end="80:24">=</operator> <literal type="string" pos:start="80:26" pos:end="80:34">"PowerPC"</literal></expr>;</expr_stmt>
            <break pos:start="81:13" pos:end="81:18">break;</break>
        <case pos:start="82:9" pos:end="82:30">case <expr pos:start="82:14" pos:end="82:29"><name pos:start="82:14" pos:end="82:29">POWERPC_EXCP_40x</name></expr>:</case>
            <expr_stmt pos:start="83:13" pos:end="83:39"><expr pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:22">excp_model</name> <operator pos:start="83:24" pos:end="83:24">=</operator> <literal type="string" pos:start="83:26" pos:end="83:38">"PowerPC 40x"</literal></expr>;</expr_stmt>
            <break pos:start="84:13" pos:end="84:18">break;</break>
        <case pos:start="85:9" pos:end="85:30">case <expr pos:start="85:14" pos:end="85:29"><name pos:start="85:14" pos:end="85:29">POWERPC_EXCP_601</name></expr>:</case>
            <expr_stmt pos:start="86:13" pos:end="86:39"><expr pos:start="86:13" pos:end="86:38"><name pos:start="86:13" pos:end="86:22">excp_model</name> <operator pos:start="86:24" pos:end="86:24">=</operator> <literal type="string" pos:start="86:26" pos:end="86:38">"PowerPC 601"</literal></expr>;</expr_stmt>
            <break pos:start="87:13" pos:end="87:18">break;</break>
        <case pos:start="88:9" pos:end="88:30">case <expr pos:start="88:14" pos:end="88:29"><name pos:start="88:14" pos:end="88:29">POWERPC_EXCP_602</name></expr>:</case>
            <expr_stmt pos:start="89:13" pos:end="89:39"><expr pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:22">excp_model</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <literal type="string" pos:start="89:26" pos:end="89:38">"PowerPC 602"</literal></expr>;</expr_stmt>
            <break pos:start="90:13" pos:end="90:18">break;</break>
        <case pos:start="91:9" pos:end="91:30">case <expr pos:start="91:14" pos:end="91:29"><name pos:start="91:14" pos:end="91:29">POWERPC_EXCP_603</name></expr>:</case>
            <expr_stmt pos:start="92:13" pos:end="92:39"><expr pos:start="92:13" pos:end="92:38"><name pos:start="92:13" pos:end="92:22">excp_model</name> <operator pos:start="92:24" pos:end="92:24">=</operator> <literal type="string" pos:start="92:26" pos:end="92:38">"PowerPC 603"</literal></expr>;</expr_stmt>
            <break pos:start="93:13" pos:end="93:18">break;</break>
        <case pos:start="94:9" pos:end="94:31">case <expr pos:start="94:14" pos:end="94:30"><name pos:start="94:14" pos:end="94:30">POWERPC_EXCP_603E</name></expr>:</case>
            <expr_stmt pos:start="95:13" pos:end="95:40"><expr pos:start="95:13" pos:end="95:39"><name pos:start="95:13" pos:end="95:22">excp_model</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="string" pos:start="95:26" pos:end="95:39">"PowerPC 603e"</literal></expr>;</expr_stmt>
            <break pos:start="96:13" pos:end="96:18">break;</break>
        <case pos:start="97:9" pos:end="97:30">case <expr pos:start="97:14" pos:end="97:29"><name pos:start="97:14" pos:end="97:29">POWERPC_EXCP_604</name></expr>:</case>
            <expr_stmt pos:start="98:13" pos:end="98:39"><expr pos:start="98:13" pos:end="98:38"><name pos:start="98:13" pos:end="98:22">excp_model</name> <operator pos:start="98:24" pos:end="98:24">=</operator> <literal type="string" pos:start="98:26" pos:end="98:38">"PowerPC 604"</literal></expr>;</expr_stmt>
            <break pos:start="99:13" pos:end="99:18">break;</break>
        <case pos:start="100:9" pos:end="100:30">case <expr pos:start="100:14" pos:end="100:29"><name pos:start="100:14" pos:end="100:29">POWERPC_EXCP_7x0</name></expr>:</case>
            <expr_stmt pos:start="101:13" pos:end="101:43"><expr pos:start="101:13" pos:end="101:42"><name pos:start="101:13" pos:end="101:22">excp_model</name> <operator pos:start="101:24" pos:end="101:24">=</operator> <literal type="string" pos:start="101:26" pos:end="101:42">"PowerPC 740/750"</literal></expr>;</expr_stmt>
            <break pos:start="102:13" pos:end="102:18">break;</break>
        <case pos:start="103:9" pos:end="103:30">case <expr pos:start="103:14" pos:end="103:29"><name pos:start="103:14" pos:end="103:29">POWERPC_EXCP_7x5</name></expr>:</case>
            <expr_stmt pos:start="104:13" pos:end="104:43"><expr pos:start="104:13" pos:end="104:42"><name pos:start="104:13" pos:end="104:22">excp_model</name> <operator pos:start="104:24" pos:end="104:24">=</operator> <literal type="string" pos:start="104:26" pos:end="104:42">"PowerPC 745/755"</literal></expr>;</expr_stmt>
            <break pos:start="105:13" pos:end="105:18">break;</break>
        <case pos:start="106:9" pos:end="106:31">case <expr pos:start="106:14" pos:end="106:30"><name pos:start="106:14" pos:end="106:30">POWERPC_EXCP_74xx</name></expr>:</case>
            <expr_stmt pos:start="107:13" pos:end="107:40"><expr pos:start="107:13" pos:end="107:39"><name pos:start="107:13" pos:end="107:22">excp_model</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <literal type="string" pos:start="107:26" pos:end="107:39">"PowerPC 74xx"</literal></expr>;</expr_stmt>
            <break pos:start="108:13" pos:end="108:18">break;</break>
        <case pos:start="109:9" pos:end="109:32">case <expr pos:start="109:14" pos:end="109:31"><name pos:start="109:14" pos:end="109:31">POWERPC_EXCP_BOOKE</name></expr>:</case>
            <expr_stmt pos:start="110:13" pos:end="110:41"><expr pos:start="110:13" pos:end="110:40"><name pos:start="110:13" pos:end="110:22">excp_model</name> <operator pos:start="110:24" pos:end="110:24">=</operator> <literal type="string" pos:start="110:26" pos:end="110:40">"PowerPC BookE"</literal></expr>;</expr_stmt>
            <break pos:start="111:13" pos:end="113:0">break;</break>
<cpp:if pos:start="112:1" pos:end="112:26">#<cpp:directive pos:start="112:2" pos:end="112:3">if</cpp:directive> <expr pos:start="112:5" pos:end="112:26"><call pos:start="112:5" pos:end="112:26"><name pos:start="112:5" pos:end="112:11">defined</name> <argument_list pos:start="112:13" pos:end="112:26">(<argument pos:start="112:14" pos:end="112:25"><expr pos:start="112:14" pos:end="112:25"><name pos:start="112:14" pos:end="112:25">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case pos:start="113:9" pos:end="113:30">case <expr pos:start="113:14" pos:end="113:29"><name pos:start="113:14" pos:end="113:29">POWERPC_EXCP_970</name></expr>:</case>
            <expr_stmt pos:start="114:13" pos:end="114:39"><expr pos:start="114:13" pos:end="114:38"><name pos:start="114:13" pos:end="114:22">excp_model</name> <operator pos:start="114:24" pos:end="114:24">=</operator> <literal type="string" pos:start="114:26" pos:end="114:38">"PowerPC 970"</literal></expr>;</expr_stmt>
            <break pos:start="115:13" pos:end="117:0">break;</break>
<cpp:endif pos:start="116:1" pos:end="116:6">#<cpp:directive pos:start="116:2" pos:end="116:6">endif</cpp:directive></cpp:endif>
        <default pos:start="117:9" pos:end="117:16">default:</default>
            <expr_stmt pos:start="118:13" pos:end="118:46"><expr pos:start="118:13" pos:end="118:45"><name pos:start="118:13" pos:end="118:22">excp_model</name> <operator pos:start="118:24" pos:end="118:24">=</operator> <literal type="string" pos:start="118:26" pos:end="118:45">"Unknown or invalid"</literal></expr>;</expr_stmt>
            <break pos:start="119:13" pos:end="119:18">break;</break>
        <switch pos:start="120:9" pos:end="188:13">switch <condition pos:start="120:16" pos:end="120:31">(<expr pos:start="120:17" pos:end="120:30"><name pos:start="120:17" pos:end="120:30"><name pos:start="120:17" pos:end="120:19">env</name><operator pos:start="120:20" pos:end="120:21">-&gt;</operator><name pos:start="120:22" pos:end="120:30">bus_model</name></name></expr>)</condition> <block pos:start="120:33" pos:end="188:13">{<block_content pos:start="121:9" pos:end="188:13">
        <case pos:start="121:9" pos:end="121:33">case <expr pos:start="121:14" pos:end="121:32"><name pos:start="121:14" pos:end="121:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>
            <expr_stmt pos:start="122:13" pos:end="122:38"><expr pos:start="122:13" pos:end="122:37"><name pos:start="122:13" pos:end="122:21">bus_model</name> <operator pos:start="122:23" pos:end="122:23">=</operator> <literal type="string" pos:start="122:25" pos:end="122:37">"PowerPC 6xx"</literal></expr>;</expr_stmt>
            <break pos:start="123:13" pos:end="123:18">break;</break>
        <case pos:start="124:9" pos:end="124:35">case <expr pos:start="124:14" pos:end="124:34"><name pos:start="124:14" pos:end="124:34">PPC_FLAGS_INPUT_BookE</name></expr>:</case>
            <expr_stmt pos:start="125:13" pos:end="125:40"><expr pos:start="125:13" pos:end="125:39"><name pos:start="125:13" pos:end="125:21">bus_model</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <literal type="string" pos:start="125:25" pos:end="125:39">"PowerPC BookE"</literal></expr>;</expr_stmt>
            <break pos:start="126:13" pos:end="126:18">break;</break>
        <case pos:start="127:9" pos:end="127:33">case <expr pos:start="127:14" pos:end="127:32"><name pos:start="127:14" pos:end="127:32">PPC_FLAGS_INPUT_405</name></expr>:</case>
            <expr_stmt pos:start="128:13" pos:end="128:38"><expr pos:start="128:13" pos:end="128:37"><name pos:start="128:13" pos:end="128:21">bus_model</name> <operator pos:start="128:23" pos:end="128:23">=</operator> <literal type="string" pos:start="128:25" pos:end="128:37">"PowerPC 405"</literal></expr>;</expr_stmt>
            <break pos:start="129:13" pos:end="129:18">break;</break>
        <case pos:start="130:9" pos:end="130:33">case <expr pos:start="130:14" pos:end="130:32"><name pos:start="130:14" pos:end="130:32">PPC_FLAGS_INPUT_401</name></expr>:</case>
            <expr_stmt pos:start="131:13" pos:end="131:42"><expr pos:start="131:13" pos:end="131:41"><name pos:start="131:13" pos:end="131:21">bus_model</name> <operator pos:start="131:23" pos:end="131:23">=</operator> <literal type="string" pos:start="131:25" pos:end="131:41">"PowerPC 401/403"</literal></expr>;</expr_stmt>
            <break pos:start="132:13" pos:end="132:18">break;</break>
        <case pos:start="133:9" pos:end="133:34">case <expr pos:start="133:14" pos:end="133:33"><name pos:start="133:14" pos:end="133:33">PPC_FLAGS_INPUT_RCPU</name></expr>:</case>
            <expr_stmt pos:start="134:13" pos:end="134:40"><expr pos:start="134:13" pos:end="134:39"><name pos:start="134:13" pos:end="134:21">bus_model</name> <operator pos:start="134:23" pos:end="134:23">=</operator> <literal type="string" pos:start="134:25" pos:end="134:39">"RCPU / MPC8xx"</literal></expr>;</expr_stmt>
            <break pos:start="135:13" pos:end="137:0">break;</break>
<cpp:if pos:start="136:1" pos:end="136:26">#<cpp:directive pos:start="136:2" pos:end="136:3">if</cpp:directive> <expr pos:start="136:5" pos:end="136:26"><call pos:start="136:5" pos:end="136:26"><name pos:start="136:5" pos:end="136:11">defined</name> <argument_list pos:start="136:13" pos:end="136:26">(<argument pos:start="136:14" pos:end="136:25"><expr pos:start="136:14" pos:end="136:25"><name pos:start="136:14" pos:end="136:25">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case pos:start="137:9" pos:end="137:33">case <expr pos:start="137:14" pos:end="137:32"><name pos:start="137:14" pos:end="137:32">PPC_FLAGS_INPUT_970</name></expr>:</case>
            <expr_stmt pos:start="138:13" pos:end="138:38"><expr pos:start="138:13" pos:end="138:37"><name pos:start="138:13" pos:end="138:21">bus_model</name> <operator pos:start="138:23" pos:end="138:23">=</operator> <literal type="string" pos:start="138:25" pos:end="138:37">"PowerPC 970"</literal></expr>;</expr_stmt>
            <break pos:start="139:13" pos:end="141:0">break;</break>
<cpp:endif pos:start="140:1" pos:end="140:6">#<cpp:directive pos:start="140:2" pos:end="140:6">endif</cpp:directive></cpp:endif>
        <default pos:start="141:9" pos:end="141:16">default:</default>
            <expr_stmt pos:start="142:13" pos:end="142:45"><expr pos:start="142:13" pos:end="142:44"><name pos:start="142:13" pos:end="142:21">bus_model</name> <operator pos:start="142:23" pos:end="142:23">=</operator> <literal type="string" pos:start="142:25" pos:end="142:44">"Unknown or invalid"</literal></expr>;</expr_stmt>
            <break pos:start="143:13" pos:end="143:18">break;</break>
        <expr_stmt pos:start="144:9" pos:end="148:0"><expr pos:start="144:9" pos:end="146:61"><call pos:start="144:9" pos:end="146:61"><name pos:start="144:9" pos:end="144:14">printf</name><argument_list pos:start="144:15" pos:end="146:61">(<argument pos:start="144:16" pos:end="145:44"><expr pos:start="144:16" pos:end="145:44"><literal type="string" pos:start="144:16" pos:end="144:50">"PowerPC %-12s : PVR %08x MSR %016"</literal> <name pos:start="144:52" pos:end="144:57">PRIx64</name> <literal type="string" pos:start="144:59" pos:end="144:62">"\n"</literal>
               <literal type="string" pos:start="145:16" pos:end="145:44">"    MMU model        : %s\n"</literal></expr></argument>,
               <argument pos:start="146:16" pos:end="146:24"><expr pos:start="146:16" pos:end="146:24"><name pos:start="146:16" pos:end="146:24"><name pos:start="146:16" pos:end="146:18">def</name><operator pos:start="146:19" pos:end="146:20">-&gt;</operator><name pos:start="146:21" pos:end="146:24">name</name></name></expr></argument>, <argument pos:start="146:27" pos:end="146:34"><expr pos:start="146:27" pos:end="146:34"><name pos:start="146:27" pos:end="146:34"><name pos:start="146:27" pos:end="146:29">def</name><operator pos:start="146:30" pos:end="146:31">-&gt;</operator><name pos:start="146:32" pos:end="146:34">pvr</name></name></expr></argument>, <argument pos:start="146:37" pos:end="146:49"><expr pos:start="146:37" pos:end="146:49"><name pos:start="146:37" pos:end="146:49"><name pos:start="146:37" pos:end="146:39">def</name><operator pos:start="146:40" pos:end="146:41">-&gt;</operator><name pos:start="146:42" pos:end="146:49">msr_mask</name></name></expr></argument>, <argument pos:start="146:52" pos:end="146:60"><expr pos:start="146:52" pos:end="146:60"><name pos:start="146:52" pos:end="146:60">mmu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="147:1" pos:end="147:30">#<cpp:directive pos:start="147:2" pos:end="147:3">if</cpp:directive> <expr pos:start="147:5" pos:end="147:30"><operator pos:start="147:5" pos:end="147:5">!</operator><call pos:start="147:6" pos:end="147:30"><name pos:start="147:6" pos:end="147:12">defined</name><argument_list pos:start="147:13" pos:end="147:30">(<argument pos:start="147:14" pos:end="147:29"><expr pos:start="147:14" pos:end="147:29"><name pos:start="147:14" pos:end="147:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt pos:start="148:9" pos:end="188:13"><if pos:start="148:9" pos:end="188:13">if <condition pos:start="148:12" pos:end="148:29">(<expr pos:start="148:13" pos:end="148:28"><name pos:start="148:13" pos:end="148:20"><name pos:start="148:13" pos:end="148:15">env</name><operator pos:start="148:16" pos:end="148:17">-&gt;</operator><name pos:start="148:18" pos:end="148:20">tlb</name></name> <operator pos:start="148:22" pos:end="148:23">!=</operator> <name pos:start="148:25" pos:end="148:28">NULL</name></expr>)</condition> <block pos:start="148:31" pos:end="188:13">{<block_content pos:start="149:13" pos:end="188:13">
            <expr_stmt pos:start="149:13" pos:end="153:0"><expr pos:start="149:13" pos:end="151:32"><call pos:start="149:13" pos:end="151:32"><name pos:start="149:13" pos:end="149:18">printf</name><argument_list pos:start="149:19" pos:end="151:32">(<argument pos:start="149:20" pos:end="149:66"><expr pos:start="149:20" pos:end="149:66"><literal type="string" pos:start="149:20" pos:end="149:66">"                       %d %s TLB in %d ways\n"</literal></expr></argument>,
                   <argument pos:start="150:20" pos:end="150:30"><expr pos:start="150:20" pos:end="150:30"><name pos:start="150:20" pos:end="150:30"><name pos:start="150:20" pos:end="150:22">env</name><operator pos:start="150:23" pos:end="150:24">-&gt;</operator><name pos:start="150:25" pos:end="150:30">nb_tlb</name></name></expr></argument>, <argument pos:start="150:33" pos:end="150:68"><expr pos:start="150:33" pos:end="150:68"><ternary pos:start="150:33" pos:end="150:68"><condition pos:start="150:33" pos:end="150:46"><expr pos:start="150:33" pos:end="150:44"><name pos:start="150:33" pos:end="150:44"><name pos:start="150:33" pos:end="150:35">env</name><operator pos:start="150:36" pos:end="150:37">-&gt;</operator><name pos:start="150:38" pos:end="150:44">id_tlbs</name></name></expr> ?</condition><then pos:start="150:48" pos:end="150:57"> <expr pos:start="150:48" pos:end="150:57"><literal type="string" pos:start="150:48" pos:end="150:57">"splitted"</literal></expr> </then><else pos:start="150:59" pos:end="150:68">: <expr pos:start="150:61" pos:end="150:68"><literal type="string" pos:start="150:61" pos:end="150:68">"merged"</literal></expr></else></ternary></expr></argument>,
                   <argument pos:start="151:20" pos:end="151:31"><expr pos:start="151:20" pos:end="151:31"><name pos:start="151:20" pos:end="151:31"><name pos:start="151:20" pos:end="151:22">env</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:31">nb_ways</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="152:1" pos:end="152:6">#<cpp:directive pos:start="152:2" pos:end="152:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="153:9" pos:end="155:38"><expr pos:start="153:9" pos:end="155:37"><call pos:start="153:9" pos:end="155:37"><name pos:start="153:9" pos:end="153:14">printf</name><argument_list pos:start="153:15" pos:end="155:37">(<argument pos:start="153:16" pos:end="154:44"><expr pos:start="153:16" pos:end="154:44"><literal type="string" pos:start="153:16" pos:end="153:44">"    Exceptions model : %s\n"</literal>
               <literal type="string" pos:start="154:16" pos:end="154:44">"    Bus model        : %s\n"</literal></expr></argument>,
               <argument pos:start="155:16" pos:end="155:25"><expr pos:start="155:16" pos:end="155:25"><name pos:start="155:16" pos:end="155:25">excp_model</name></expr></argument>, <argument pos:start="155:28" pos:end="155:36"><expr pos:start="155:28" pos:end="155:36"><name pos:start="155:28" pos:end="155:36">bus_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="156:9" pos:end="156:43"><expr pos:start="156:9" pos:end="156:42"><call pos:start="156:9" pos:end="156:42"><name pos:start="156:9" pos:end="156:14">printf</name><argument_list pos:start="156:15" pos:end="156:42">(<argument pos:start="156:16" pos:end="156:41"><expr pos:start="156:16" pos:end="156:41"><literal type="string" pos:start="156:16" pos:end="156:41">"    MSR features     :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="157:9" pos:end="161:72"><if pos:start="157:9" pos:end="159:25">if <condition pos:start="157:12" pos:end="157:42">(<expr pos:start="157:13" pos:end="157:41"><name pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:15">env</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:22">flags</name></name> <operator pos:start="157:24" pos:end="157:24">&amp;</operator> <name pos:start="157:26" pos:end="157:41">POWERPC_FLAG_SPE</name></expr>)</condition><block type="pseudo" pos:start="158:13" pos:end="159:25"><block_content pos:start="158:13" pos:end="159:25">
            <expr_stmt pos:start="158:13" pos:end="159:25"><expr pos:start="158:13" pos:end="159:24"><call pos:start="158:13" pos:end="159:24"><name pos:start="158:13" pos:end="158:18">printf</name><argument_list pos:start="158:19" pos:end="159:24">(<argument pos:start="158:20" pos:end="159:23"><expr pos:start="158:20" pos:end="159:23"><literal type="string" pos:start="158:20" pos:end="158:76">"                        signal processing engine enable"</literal>
                   <literal type="string" pos:start="159:20" pos:end="159:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="160:9" pos:end="161:72">else if <condition pos:start="160:17" pos:end="160:47">(<expr pos:start="160:18" pos:end="160:46"><name pos:start="160:18" pos:end="160:27"><name pos:start="160:18" pos:end="160:20">env</name><operator pos:start="160:21" pos:end="160:22">-&gt;</operator><name pos:start="160:23" pos:end="160:27">flags</name></name> <operator pos:start="160:29" pos:end="160:29">&amp;</operator> <name pos:start="160:31" pos:end="160:46">POWERPC_FLAG_VRE</name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:72"><block_content pos:start="161:13" pos:end="161:72">
            <expr_stmt pos:start="161:13" pos:end="161:72"><expr pos:start="161:13" pos:end="161:71"><call pos:start="161:13" pos:end="161:71"><name pos:start="161:13" pos:end="161:18">printf</name><argument_list pos:start="161:19" pos:end="161:71">(<argument pos:start="161:20" pos:end="161:70"><expr pos:start="161:20" pos:end="161:70"><literal type="string" pos:start="161:20" pos:end="161:70">"                        vector processor enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="162:9" pos:end="165:70"><if pos:start="162:9" pos:end="163:63">if <condition pos:start="162:12" pos:end="162:43">(<expr pos:start="162:13" pos:end="162:42"><name pos:start="162:13" pos:end="162:22"><name pos:start="162:13" pos:end="162:15">env</name><operator pos:start="162:16" pos:end="162:17">-&gt;</operator><name pos:start="162:18" pos:end="162:22">flags</name></name> <operator pos:start="162:24" pos:end="162:24">&amp;</operator> <name pos:start="162:26" pos:end="162:42">POWERPC_FLAG_TGPR</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:63"><block_content pos:start="163:13" pos:end="163:63">
            <expr_stmt pos:start="163:13" pos:end="163:63"><expr pos:start="163:13" pos:end="163:62"><call pos:start="163:13" pos:end="163:62"><name pos:start="163:13" pos:end="163:18">printf</name><argument_list pos:start="163:19" pos:end="163:62">(<argument pos:start="163:20" pos:end="163:61"><expr pos:start="163:20" pos:end="163:61"><literal type="string" pos:start="163:20" pos:end="163:61">"                        temporary GPRs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="164:9" pos:end="165:70">else if <condition pos:start="164:17" pos:end="164:46">(<expr pos:start="164:18" pos:end="164:45"><name pos:start="164:18" pos:end="164:27"><name pos:start="164:18" pos:end="164:20">env</name><operator pos:start="164:21" pos:end="164:22">-&gt;</operator><name pos:start="164:23" pos:end="164:27">flags</name></name> <operator pos:start="164:29" pos:end="164:29">&amp;</operator> <name pos:start="164:31" pos:end="164:45">POWERPC_FLAG_CE</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:70"><block_content pos:start="165:13" pos:end="165:70">
            <expr_stmt pos:start="165:13" pos:end="165:70"><expr pos:start="165:13" pos:end="165:69"><call pos:start="165:13" pos:end="165:69"><name pos:start="165:13" pos:end="165:18">printf</name><argument_list pos:start="165:19" pos:end="165:69">(<argument pos:start="165:20" pos:end="165:68"><expr pos:start="165:20" pos:end="165:68"><literal type="string" pos:start="165:20" pos:end="165:68">"                        critical input enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="166:9" pos:end="171:69"><if pos:start="166:9" pos:end="167:71">if <condition pos:start="166:12" pos:end="166:41">(<expr pos:start="166:13" pos:end="166:40"><name pos:start="166:13" pos:end="166:22"><name pos:start="166:13" pos:end="166:15">env</name><operator pos:start="166:16" pos:end="166:17">-&gt;</operator><name pos:start="166:18" pos:end="166:22">flags</name></name> <operator pos:start="166:24" pos:end="166:24">&amp;</operator> <name pos:start="166:26" pos:end="166:40">POWERPC_FLAG_SE</name></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:71"><block_content pos:start="167:13" pos:end="167:71">
            <expr_stmt pos:start="167:13" pos:end="167:71"><expr pos:start="167:13" pos:end="167:70"><call pos:start="167:13" pos:end="167:70"><name pos:start="167:13" pos:end="167:18">printf</name><argument_list pos:start="167:19" pos:end="167:70">(<argument pos:start="167:20" pos:end="167:69"><expr pos:start="167:20" pos:end="167:69"><literal type="string" pos:start="167:20" pos:end="167:69">"                        single-step trace mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="168:9" pos:end="169:66">else if <condition pos:start="168:17" pos:end="168:47">(<expr pos:start="168:18" pos:end="168:46"><name pos:start="168:18" pos:end="168:27"><name pos:start="168:18" pos:end="168:20">env</name><operator pos:start="168:21" pos:end="168:22">-&gt;</operator><name pos:start="168:23" pos:end="168:27">flags</name></name> <operator pos:start="168:29" pos:end="168:29">&amp;</operator> <name pos:start="168:31" pos:end="168:46">POWERPC_FLAG_DWE</name></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:66"><block_content pos:start="169:13" pos:end="169:66">
            <expr_stmt pos:start="169:13" pos:end="169:66"><expr pos:start="169:13" pos:end="169:65"><call pos:start="169:13" pos:end="169:65"><name pos:start="169:13" pos:end="169:18">printf</name><argument_list pos:start="169:19" pos:end="169:65">(<argument pos:start="169:20" pos:end="169:64"><expr pos:start="169:20" pos:end="169:64"><literal type="string" pos:start="169:20" pos:end="169:64">"                        debug wait enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="170:9" pos:end="171:69">else if <condition pos:start="170:17" pos:end="170:48">(<expr pos:start="170:18" pos:end="170:47"><name pos:start="170:18" pos:end="170:27"><name pos:start="170:18" pos:end="170:20">env</name><operator pos:start="170:21" pos:end="170:22">-&gt;</operator><name pos:start="170:23" pos:end="170:27">flags</name></name> <operator pos:start="170:29" pos:end="170:29">&amp;</operator> <name pos:start="170:31" pos:end="170:47">POWERPC_FLAG_UBLE</name></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:69"><block_content pos:start="171:13" pos:end="171:69">
            <expr_stmt pos:start="171:13" pos:end="171:69"><expr pos:start="171:13" pos:end="171:68"><call pos:start="171:13" pos:end="171:68"><name pos:start="171:13" pos:end="171:18">printf</name><argument_list pos:start="171:19" pos:end="171:68">(<argument pos:start="171:20" pos:end="171:67"><expr pos:start="171:20" pos:end="171:67"><literal type="string" pos:start="171:20" pos:end="171:67">"                        user BTB lock enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="172:9" pos:end="175:71"><if pos:start="172:9" pos:end="173:71">if <condition pos:start="172:12" pos:end="172:41">(<expr pos:start="172:13" pos:end="172:40"><name pos:start="172:13" pos:end="172:22"><name pos:start="172:13" pos:end="172:15">env</name><operator pos:start="172:16" pos:end="172:17">-&gt;</operator><name pos:start="172:18" pos:end="172:22">flags</name></name> <operator pos:start="172:24" pos:end="172:24">&amp;</operator> <name pos:start="172:26" pos:end="172:40">POWERPC_FLAG_BE</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:71"><block_content pos:start="173:13" pos:end="173:71">
            <expr_stmt pos:start="173:13" pos:end="173:71"><expr pos:start="173:13" pos:end="173:70"><call pos:start="173:13" pos:end="173:70"><name pos:start="173:13" pos:end="173:18">printf</name><argument_list pos:start="173:19" pos:end="173:70">(<argument pos:start="173:20" pos:end="173:69"><expr pos:start="173:20" pos:end="173:69"><literal type="string" pos:start="173:20" pos:end="173:69">"                        branch-step trace mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="174:9" pos:end="175:71">else if <condition pos:start="174:17" pos:end="174:46">(<expr pos:start="174:18" pos:end="174:45"><name pos:start="174:18" pos:end="174:27"><name pos:start="174:18" pos:end="174:20">env</name><operator pos:start="174:21" pos:end="174:22">-&gt;</operator><name pos:start="174:23" pos:end="174:27">flags</name></name> <operator pos:start="174:29" pos:end="174:29">&amp;</operator> <name pos:start="174:31" pos:end="174:45">POWERPC_FLAG_DE</name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:71"><block_content pos:start="175:13" pos:end="175:71">
            <expr_stmt pos:start="175:13" pos:end="175:71"><expr pos:start="175:13" pos:end="175:70"><call pos:start="175:13" pos:end="175:70"><name pos:start="175:13" pos:end="175:18">printf</name><argument_list pos:start="175:19" pos:end="175:70">(<argument pos:start="175:20" pos:end="175:69"><expr pos:start="175:20" pos:end="175:69"><literal type="string" pos:start="175:20" pos:end="175:69">"                        debug interrupt enable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="176:9" pos:end="179:73"><if pos:start="176:9" pos:end="177:69">if <condition pos:start="176:12" pos:end="176:41">(<expr pos:start="176:13" pos:end="176:40"><name pos:start="176:13" pos:end="176:22"><name pos:start="176:13" pos:end="176:15">env</name><operator pos:start="176:16" pos:end="176:17">-&gt;</operator><name pos:start="176:18" pos:end="176:22">flags</name></name> <operator pos:start="176:24" pos:end="176:24">&amp;</operator> <name pos:start="176:26" pos:end="176:40">POWERPC_FLAG_PX</name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:69"><block_content pos:start="177:13" pos:end="177:69">
            <expr_stmt pos:start="177:13" pos:end="177:69"><expr pos:start="177:13" pos:end="177:68"><call pos:start="177:13" pos:end="177:68"><name pos:start="177:13" pos:end="177:18">printf</name><argument_list pos:start="177:19" pos:end="177:68">(<argument pos:start="177:20" pos:end="177:67"><expr pos:start="177:20" pos:end="177:67"><literal type="string" pos:start="177:20" pos:end="177:67">"                        inclusive protection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="178:9" pos:end="179:73">else if <condition pos:start="178:17" pos:end="178:47">(<expr pos:start="178:18" pos:end="178:46"><name pos:start="178:18" pos:end="178:27"><name pos:start="178:18" pos:end="178:20">env</name><operator pos:start="178:21" pos:end="178:22">-&gt;</operator><name pos:start="178:23" pos:end="178:27">flags</name></name> <operator pos:start="178:29" pos:end="178:29">&amp;</operator> <name pos:start="178:31" pos:end="178:46">POWERPC_FLAG_PMM</name></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:73"><block_content pos:start="179:13" pos:end="179:73">
            <expr_stmt pos:start="179:13" pos:end="179:73"><expr pos:start="179:13" pos:end="179:72"><call pos:start="179:13" pos:end="179:72"><name pos:start="179:13" pos:end="179:18">printf</name><argument_list pos:start="179:19" pos:end="179:72">(<argument pos:start="179:20" pos:end="179:71"><expr pos:start="179:20" pos:end="179:71"><literal type="string" pos:start="179:20" pos:end="179:71">"                        performance monitor mark\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="180:9" pos:end="181:53"><if pos:start="180:9" pos:end="181:53">if <condition pos:start="180:12" pos:end="180:44">(<expr pos:start="180:13" pos:end="180:43"><name pos:start="180:13" pos:end="180:22"><name pos:start="180:13" pos:end="180:15">env</name><operator pos:start="180:16" pos:end="180:17">-&gt;</operator><name pos:start="180:18" pos:end="180:22">flags</name></name> <operator pos:start="180:24" pos:end="180:25">==</operator> <name pos:start="180:27" pos:end="180:43">POWERPC_FLAG_NONE</name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:53"><block_content pos:start="181:13" pos:end="181:53">
            <expr_stmt pos:start="181:13" pos:end="181:53"><expr pos:start="181:13" pos:end="181:52"><call pos:start="181:13" pos:end="181:52"><name pos:start="181:13" pos:end="181:18">printf</name><argument_list pos:start="181:19" pos:end="181:52">(<argument pos:start="181:20" pos:end="181:51"><expr pos:start="181:20" pos:end="181:51"><literal type="string" pos:start="181:20" pos:end="181:51">"                        none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="182:9" pos:end="183:78"><expr pos:start="182:9" pos:end="183:77"><call pos:start="182:9" pos:end="183:77"><name pos:start="182:9" pos:end="182:14">printf</name><argument_list pos:start="182:15" pos:end="183:77">(<argument pos:start="182:16" pos:end="182:61"><expr pos:start="182:16" pos:end="182:61"><literal type="string" pos:start="182:16" pos:end="182:61">"    Time-base/decrementer clock source: %s\n"</literal></expr></argument>,
               <argument pos:start="183:16" pos:end="183:76"><expr pos:start="183:16" pos:end="183:76"><ternary pos:start="183:16" pos:end="183:76"><condition pos:start="183:16" pos:end="183:50"><expr pos:start="183:16" pos:end="183:48"><name pos:start="183:16" pos:end="183:25"><name pos:start="183:16" pos:end="183:18">env</name><operator pos:start="183:19" pos:end="183:20">-&gt;</operator><name pos:start="183:21" pos:end="183:25">flags</name></name> <operator pos:start="183:27" pos:end="183:27">&amp;</operator> <name pos:start="183:29" pos:end="183:48">POWERPC_FLAG_RTC_CLK</name></expr> ?</condition><then pos:start="183:52" pos:end="183:62"> <expr pos:start="183:52" pos:end="183:62"><literal type="string" pos:start="183:52" pos:end="183:62">"RTC clock"</literal></expr> </then><else pos:start="183:64" pos:end="183:76">: <expr pos:start="183:66" pos:end="183:76"><literal type="string" pos:start="183:66" pos:end="183:76">"bus clock"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="184:5" pos:end="184:24"><expr pos:start="184:5" pos:end="184:23"><call pos:start="184:5" pos:end="184:23"><name pos:start="184:5" pos:end="184:18">dump_ppc_insns</name><argument_list pos:start="184:19" pos:end="184:23">(<argument pos:start="184:20" pos:end="184:22"><expr pos:start="184:20" pos:end="184:22"><name pos:start="184:20" pos:end="184:22">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="185:5" pos:end="185:23"><expr pos:start="185:5" pos:end="185:22"><call pos:start="185:5" pos:end="185:22"><name pos:start="185:5" pos:end="185:17">dump_ppc_sprs</name><argument_list pos:start="185:18" pos:end="185:22">(<argument pos:start="185:19" pos:end="185:21"><expr pos:start="185:19" pos:end="185:21"><name pos:start="185:19" pos:end="185:21">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="186:5" pos:end="188:0"><expr pos:start="186:5" pos:end="186:18"><call pos:start="186:5" pos:end="186:18"><name pos:start="186:5" pos:end="186:10">fflush</name><argument_list pos:start="186:11" pos:end="186:18">(<argument pos:start="186:12" pos:end="186:17"><expr pos:start="186:12" pos:end="186:17"><name pos:start="186:12" pos:end="186:17">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="187:1" pos:end="187:6">#<cpp:directive pos:start="187:2" pos:end="187:6">endif</cpp:directive></cpp:endif>
    <return pos:start="188:5" pos:end="188:13">return <expr pos:start="188:12" pos:end="188:12"><literal type="number" pos:start="188:12" pos:end="188:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></switch></block_content></block></switch></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
