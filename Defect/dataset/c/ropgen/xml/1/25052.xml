<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25052.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:70"><name pos:start="1:1" pos:end="1:12">create_iovec</name><argument_list pos:start="1:13" pos:end="1:70">(<argument pos:start="1:14" pos:end="1:31">QEMUIOVector *qiov</argument>, <argument pos:start="1:34" pos:end="1:44">char **argv</argument>, <argument pos:start="1:47" pos:end="1:56">int nr_iov</argument>, <argument pos:start="1:59" pos:end="1:69">int pattern</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:9" pos:end="87:19">

	<decl_stmt pos:start="5:9" pos:end="5:55"><decl pos:start="5:9" pos:end="5:54"><type pos:start="5:9" pos:end="5:16"><name pos:start="5:9" pos:end="5:14">size_t</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">sizes</name> <init pos:start="5:23" pos:end="5:54">= <expr pos:start="5:25" pos:end="5:54"><call pos:start="5:25" pos:end="5:54"><name pos:start="5:25" pos:end="5:30">calloc</name><argument_list pos:start="5:31" pos:end="5:54">(<argument pos:start="5:32" pos:end="5:37"><expr pos:start="5:32" pos:end="5:37"><name pos:start="5:32" pos:end="5:37">nr_iov</name></expr></argument>, <argument pos:start="5:40" pos:end="5:53"><expr pos:start="5:40" pos:end="5:53"><sizeof pos:start="5:40" pos:end="5:53">sizeof<argument_list pos:start="5:46" pos:end="5:53">(<argument pos:start="5:47" pos:end="5:52"><expr pos:start="5:47" pos:end="5:52"><name pos:start="5:47" pos:end="5:52">size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:25"><decl pos:start="7:9" pos:end="7:24"><type pos:start="7:9" pos:end="7:14"><name pos:start="7:9" pos:end="7:14">size_t</name></type> <name pos:start="7:16" pos:end="7:20">count</name> <init pos:start="7:22" pos:end="7:24">= <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:22"><decl pos:start="9:9" pos:end="9:17"><type pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:12">void</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">buf</name></decl>, <decl pos:start="9:20" pos:end="9:21"><type ref="prev" pos:start="9:9" pos:end="9:14"><modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">p</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:14"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>;</decl_stmt>



	<for pos:start="15:9" pos:end="63:9">for <control pos:start="15:13" pos:end="15:36">(<init pos:start="15:14" pos:end="15:19"><expr pos:start="15:14" pos:end="15:18"><name pos:start="15:14" pos:end="15:14">i</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>;</init> <condition pos:start="15:21" pos:end="15:31"><expr pos:start="15:21" pos:end="15:30"><name pos:start="15:21" pos:end="15:21">i</name> <operator pos:start="15:23" pos:end="15:23">&lt;</operator> <name pos:start="15:25" pos:end="15:30">nr_iov</name></expr>;</condition> <incr pos:start="15:33" pos:end="15:35"><expr pos:start="15:33" pos:end="15:35"><name pos:start="15:33" pos:end="15:33">i</name><operator pos:start="15:34" pos:end="15:35">++</operator></expr></incr>)</control> <block pos:start="15:38" pos:end="63:9">{<block_content pos:start="17:17" pos:end="61:29">

		<decl_stmt pos:start="17:17" pos:end="17:36"><decl pos:start="17:17" pos:end="17:35"><type pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:20">char</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:25">arg</name> <init pos:start="17:27" pos:end="17:35">= <expr pos:start="17:29" pos:end="17:35"><name pos:start="17:29" pos:end="17:35"><name pos:start="17:29" pos:end="17:32">argv</name><index pos:start="17:33" pos:end="17:35">[<expr pos:start="17:34" pos:end="17:34"><name pos:start="17:34" pos:end="17:34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="19:17" pos:end="19:30"><decl pos:start="19:17" pos:end="19:29"><type pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:20">long</name> <name pos:start="19:22" pos:end="19:25">long</name></type> <name pos:start="19:27" pos:end="19:29">len</name></decl>;</decl_stmt>



		<expr_stmt pos:start="23:17" pos:end="23:34"><expr pos:start="23:17" pos:end="23:33"><name pos:start="23:17" pos:end="23:19">len</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:33"><name pos:start="23:23" pos:end="23:28">cvtnum</name><argument_list pos:start="23:29" pos:end="23:33">(<argument pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><name pos:start="23:30" pos:end="23:32">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="25:17" pos:end="31:17"><if pos:start="25:17" pos:end="31:17">if <condition pos:start="25:20" pos:end="25:28">(<expr pos:start="25:21" pos:end="25:27"><name pos:start="25:21" pos:end="25:23">len</name> <operator pos:start="25:25" pos:end="25:25">&lt;</operator> <literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr>)</condition> <block pos:start="25:30" pos:end="31:17">{<block_content pos:start="27:25" pos:end="29:36">

			<expr_stmt pos:start="27:25" pos:end="27:75"><expr pos:start="27:25" pos:end="27:74"><call pos:start="27:25" pos:end="27:74"><name pos:start="27:25" pos:end="27:30">printf</name><argument_list pos:start="27:31" pos:end="27:74">(<argument pos:start="27:32" pos:end="27:68"><expr pos:start="27:32" pos:end="27:68"><literal type="string" pos:start="27:32" pos:end="27:68">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="27:71" pos:end="27:73"><expr pos:start="27:71" pos:end="27:73"><name pos:start="27:71" pos:end="27:73">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="29:25" pos:end="29:36">return <expr pos:start="29:32" pos:end="29:35"><name pos:start="29:32" pos:end="29:35">NULL</name></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<comment type="block" pos:start="35:17" pos:end="35:66">/* should be SIZE_T_MAX, but that doesn't exist */</comment>

		<if_stmt pos:start="37:17" pos:end="43:17"><if pos:start="37:17" pos:end="43:17">if <condition pos:start="37:20" pos:end="37:35">(<expr pos:start="37:21" pos:end="37:34"><name pos:start="37:21" pos:end="37:23">len</name> <operator pos:start="37:25" pos:end="37:25">&gt;</operator> <name pos:start="37:27" pos:end="37:34">UINT_MAX</name></expr>)</condition> <block pos:start="37:37" pos:end="43:17">{<block_content pos:start="39:25" pos:end="41:36">

			<expr_stmt pos:start="39:25" pos:end="39:73"><expr pos:start="39:25" pos:end="39:72"><call pos:start="39:25" pos:end="39:72"><name pos:start="39:25" pos:end="39:30">printf</name><argument_list pos:start="39:31" pos:end="39:72">(<argument pos:start="39:32" pos:end="39:66"><expr pos:start="39:32" pos:end="39:66"><literal type="string" pos:start="39:32" pos:end="39:66">"too large length argument -- %s\n"</literal></expr></argument>, <argument pos:start="39:69" pos:end="39:71"><expr pos:start="39:69" pos:end="39:71"><name pos:start="39:69" pos:end="39:71">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="41:25" pos:end="41:36">return <expr pos:start="41:32" pos:end="41:35"><name pos:start="41:32" pos:end="41:35">NULL</name></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<if_stmt pos:start="47:17" pos:end="55:17"><if pos:start="47:17" pos:end="55:17">if <condition pos:start="47:20" pos:end="47:32">(<expr pos:start="47:21" pos:end="47:31"><name pos:start="47:21" pos:end="47:23">len</name> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <literal type="number" pos:start="47:27" pos:end="47:31">0x1ff</literal></expr>)</condition> <block pos:start="47:34" pos:end="55:17">{<block_content pos:start="49:25" pos:end="53:36">

			<expr_stmt pos:start="49:25" pos:end="51:37"><expr pos:start="49:25" pos:end="51:36"><call pos:start="49:25" pos:end="51:36"><name pos:start="49:25" pos:end="49:30">printf</name><argument_list pos:start="49:31" pos:end="51:36">(<argument pos:start="49:32" pos:end="49:77"><expr pos:start="49:32" pos:end="49:77"><literal type="string" pos:start="49:32" pos:end="49:77">"length argument %lld is not sector aligned\n"</literal></expr></argument>,

				<argument pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="53:25" pos:end="53:36">return <expr pos:start="53:32" pos:end="53:35"><name pos:start="53:32" pos:end="53:35">NULL</name></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<expr_stmt pos:start="59:17" pos:end="59:31"><expr pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:24"><name pos:start="59:17" pos:end="59:21">sizes</name><index pos:start="59:22" pos:end="59:24">[<expr pos:start="59:23" pos:end="59:23"><name pos:start="59:23" pos:end="59:23">i</name></expr>]</index></name> <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:30">len</name></expr>;</expr_stmt>

		<expr_stmt pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:21">count</name> <operator pos:start="61:23" pos:end="61:24">+=</operator> <name pos:start="61:26" pos:end="61:28">len</name></expr>;</expr_stmt>

	</block_content>}</block></for>



	<expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><call pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:23">qemu_iovec_init</name><argument_list pos:start="67:24" pos:end="67:37">(<argument pos:start="67:25" pos:end="67:28"><expr pos:start="67:25" pos:end="67:28"><name pos:start="67:25" pos:end="67:28">qiov</name></expr></argument>, <argument pos:start="67:31" pos:end="67:36"><expr pos:start="67:31" pos:end="67:36"><name pos:start="67:31" pos:end="67:36">nr_iov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:11">buf</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:15">p</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:47"><name pos:start="71:19" pos:end="71:31">qemu_io_alloc</name><argument_list pos:start="71:32" pos:end="71:47">(<argument pos:start="71:33" pos:end="71:37"><expr pos:start="71:33" pos:end="71:37"><name pos:start="71:33" pos:end="71:37">count</name></expr></argument>, <argument pos:start="71:40" pos:end="71:46"><expr pos:start="71:40" pos:end="71:46"><name pos:start="71:40" pos:end="71:46">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<for pos:start="75:9" pos:end="81:9">for <control pos:start="75:13" pos:end="75:36">(<init pos:start="75:14" pos:end="75:19"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:14">i</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:31"><expr pos:start="75:21" pos:end="75:30"><name pos:start="75:21" pos:end="75:21">i</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:30">nr_iov</name></expr>;</condition> <incr pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:33">i</name><operator pos:start="75:34" pos:end="75:35">++</operator></expr></incr>)</control> <block pos:start="75:38" pos:end="81:9">{<block_content pos:start="77:17" pos:end="79:30">

		<expr_stmt pos:start="77:17" pos:end="77:50"><expr pos:start="77:17" pos:end="77:49"><call pos:start="77:17" pos:end="77:49"><name pos:start="77:17" pos:end="77:30">qemu_iovec_add</name><argument_list pos:start="77:31" pos:end="77:49">(<argument pos:start="77:32" pos:end="77:35"><expr pos:start="77:32" pos:end="77:35"><name pos:start="77:32" pos:end="77:35">qiov</name></expr></argument>, <argument pos:start="77:38" pos:end="77:38"><expr pos:start="77:38" pos:end="77:38"><name pos:start="77:38" pos:end="77:38">p</name></expr></argument>, <argument pos:start="77:41" pos:end="77:48"><expr pos:start="77:41" pos:end="77:48"><name pos:start="77:41" pos:end="77:48"><name pos:start="77:41" pos:end="77:45">sizes</name><index pos:start="77:46" pos:end="77:48">[<expr pos:start="77:47" pos:end="77:47"><name pos:start="77:47" pos:end="77:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="79:17" pos:end="79:30"><expr pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:17">p</name> <operator pos:start="79:19" pos:end="79:20">+=</operator> <name pos:start="79:22" pos:end="79:29"><name pos:start="79:22" pos:end="79:26">sizes</name><index pos:start="79:27" pos:end="79:29">[<expr pos:start="79:28" pos:end="79:28"><name pos:start="79:28" pos:end="79:28">i</name></expr>]</index></name></expr>;</expr_stmt>

	</block_content>}</block></for>



	<expr_stmt pos:start="85:9" pos:end="85:20"><expr pos:start="85:9" pos:end="85:19"><call pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:12">free</name><argument_list pos:start="85:13" pos:end="85:19">(<argument pos:start="85:14" pos:end="85:18"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:18">sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="87:9" pos:end="87:19">return <expr pos:start="87:16" pos:end="87:18"><name pos:start="87:16" pos:end="87:18">buf</name></expr>;</return>

</block_content>}</block>
</unit>
