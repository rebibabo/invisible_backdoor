<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23305.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">mpegts_handle_packet</name><parameter_list pos:start="1:32" pos:end="7:42">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:47">AVFormatContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">ctx</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:74"><decl pos:start="1:55" pos:end="1:74"><type pos:start="1:55" pos:end="1:74"><name pos:start="1:55" pos:end="1:68">PayloadContext</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:40">AVStream</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:44">st</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:54">AVPacket</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:59">pkt</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:80"><decl pos:start="3:62" pos:end="3:80"><type pos:start="3:62" pos:end="3:80"><name pos:start="3:62" pos:end="3:69">uint32_t</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:80">timestamp</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:50"><decl pos:start="5:33" pos:end="5:50"><type pos:start="5:33" pos:end="5:50"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:45">uint8_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:50">buf</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:59"><decl pos:start="5:53" pos:end="5:59"><type pos:start="5:53" pos:end="5:59"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:59">len</name></decl></parameter>, <parameter pos:start="5:62" pos:end="5:73"><decl pos:start="5:62" pos:end="5:73"><type pos:start="5:62" pos:end="5:73"><name pos:start="5:62" pos:end="5:69">uint16_t</name></type> <name pos:start="5:71" pos:end="5:73">seq</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:41"><decl pos:start="7:33" pos:end="7:41"><type pos:start="7:33" pos:end="7:41"><name pos:start="7:33" pos:end="7:35">int</name></type> <name pos:start="7:37" pos:end="7:41">flags</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="87:1">{<block_content pos:start="11:5" pos:end="85:13">

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <comment type="line" pos:start="15:5" pos:end="15:76">// We don't want to use the RTP timestamps at all. If the mpegts demuxer</comment>

    <comment type="line" pos:start="17:5" pos:end="17:72">// doesn't set any pts/dts, the generic rtpdec code shouldn't try to</comment>

    <comment type="line" pos:start="19:5" pos:end="19:76">// fill it in either, since the mpegts and RTP timestamps are in totally</comment>

    <comment type="line" pos:start="21:5" pos:end="21:24">// different ranges.</comment>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:14">timestamp</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:31">RTP_NOTS_VALUE</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="29:31"><if pos:start="27:5" pos:end="29:31">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:17"><name pos:start="27:10" pos:end="27:13">data</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:17">ts</name></name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:31"><block_content pos:start="29:9" pos:end="29:31">

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="57:5"><if pos:start="33:5" pos:end="57:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">buf</name></expr>)</condition> <block pos:start="33:15" pos:end="57:5">{<block_content pos:start="35:9" pos:end="55:21">

        <if_stmt pos:start="35:9" pos:end="37:35"><if pos:start="35:9" pos:end="37:35">if <condition pos:start="35:12" pos:end="35:56">(<expr pos:start="35:13" pos:end="35:55"><name pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:16">data</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:32">read_buf_index</name></name> <operator pos:start="35:34" pos:end="35:35">&gt;=</operator> <name pos:start="35:37" pos:end="35:55"><name pos:start="35:37" pos:end="35:40">data</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:55">read_buf_size</name></name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:35"><block_content pos:start="37:13" pos:end="37:35">

            <return pos:start="37:13" pos:end="37:35">return <expr pos:start="37:20" pos:end="37:34"><call pos:start="37:20" pos:end="37:34"><name pos:start="37:20" pos:end="37:26">AVERROR</name><argument_list pos:start="37:27" pos:end="37:34">(<argument pos:start="37:28" pos:end="37:33"><expr pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="41:81"><expr pos:start="39:9" pos:end="41:80"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="41:80"><name pos:start="39:15" pos:end="39:36">ff_mpegts_parse_packet</name><argument_list pos:start="39:37" pos:end="41:80">(<argument pos:start="39:38" pos:end="39:45"><expr pos:start="39:38" pos:end="39:45"><name pos:start="39:38" pos:end="39:45"><name pos:start="39:38" pos:end="39:41">data</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:45">ts</name></name></expr></argument>, <argument pos:start="39:48" pos:end="39:50"><expr pos:start="39:48" pos:end="39:50"><name pos:start="39:48" pos:end="39:50">pkt</name></expr></argument>, <argument pos:start="39:53" pos:end="39:84"><expr pos:start="39:53" pos:end="39:84"><name pos:start="39:53" pos:end="39:61"><name pos:start="39:53" pos:end="39:56">data</name><operator pos:start="39:57" pos:end="39:58">-&gt;</operator><name pos:start="39:59" pos:end="39:61">buf</name></name> <operator pos:start="39:63" pos:end="39:63">+</operator> <name pos:start="39:65" pos:end="39:84"><name pos:start="39:65" pos:end="39:68">data</name><operator pos:start="39:69" pos:end="39:70">-&gt;</operator><name pos:start="39:71" pos:end="39:84">read_buf_index</name></name></expr></argument>,

                                     <argument pos:start="41:38" pos:end="41:79"><expr pos:start="41:38" pos:end="41:79"><name pos:start="41:38" pos:end="41:56"><name pos:start="41:38" pos:end="41:41">data</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:56">read_buf_size</name></name> <operator pos:start="41:58" pos:end="41:58">-</operator> <name pos:start="41:60" pos:end="41:79"><name pos:start="41:60" pos:end="41:63">data</name><operator pos:start="41:64" pos:end="41:65">-&gt;</operator><name pos:start="41:66" pos:end="41:79">read_buf_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:35"><if pos:start="43:9" pos:end="45:35">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:35"><block_content pos:start="45:13" pos:end="45:35">

            <return pos:start="45:13" pos:end="45:35">return <expr pos:start="45:20" pos:end="45:34"><call pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:26">AVERROR</name><argument_list pos:start="45:27" pos:end="45:34">(<argument pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:12">data</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:28">read_buf_index</name></name> <operator pos:start="47:30" pos:end="47:31">+=</operator> <name pos:start="47:33" pos:end="47:35">ret</name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:21"><if pos:start="49:9" pos:end="51:21">if <condition pos:start="49:12" pos:end="49:55">(<expr pos:start="49:13" pos:end="49:54"><name pos:start="49:13" pos:end="49:32"><name pos:start="49:13" pos:end="49:16">data</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:32">read_buf_index</name></name> <operator pos:start="49:34" pos:end="49:34">&lt;</operator> <name pos:start="49:36" pos:end="49:54"><name pos:start="49:36" pos:end="49:39">data</name><operator pos:start="49:40" pos:end="49:41">-&gt;</operator><name pos:start="49:42" pos:end="49:54">read_buf_size</name></name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:21"><block_content pos:start="51:13" pos:end="51:21">

            <return pos:start="51:13" pos:end="51:21">return <expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">1</literal></expr>;</return></block_content></block></if>

        <else pos:start="53:9" pos:end="55:21">else<block type="pseudo" pos:start="55:13" pos:end="55:21"><block_content pos:start="55:13" pos:end="55:21">

            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</return></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:58"><expr pos:start="61:5" pos:end="61:57"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:57"><name pos:start="61:11" pos:end="61:32">ff_mpegts_parse_packet</name><argument_list pos:start="61:33" pos:end="61:57">(<argument pos:start="61:34" pos:end="61:41"><expr pos:start="61:34" pos:end="61:41"><name pos:start="61:34" pos:end="61:41"><name pos:start="61:34" pos:end="61:37">data</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:41">ts</name></name></expr></argument>, <argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><name pos:start="61:44" pos:end="61:46">pkt</name></expr></argument>, <argument pos:start="61:49" pos:end="61:51"><expr pos:start="61:49" pos:end="61:51"><name pos:start="61:49" pos:end="61:51">buf</name></expr></argument>, <argument pos:start="61:54" pos:end="61:56"><expr pos:start="61:54" pos:end="61:56"><name pos:start="61:54" pos:end="61:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="67:40">/* The only error that can be returned from ff_mpegts_parse_packet

     * is "no more data to return from the provided buffer", so return

     * AVERROR(EAGAIN) for all errors */</comment>

    <if_stmt pos:start="69:5" pos:end="71:31"><if pos:start="69:5" pos:end="71:31">if <condition pos:start="69:8" pos:end="69:16">(<expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:31"><block_content pos:start="71:9" pos:end="71:31">

        <return pos:start="71:9" pos:end="71:31">return <expr pos:start="71:16" pos:end="71:30"><call pos:start="71:16" pos:end="71:30"><name pos:start="71:16" pos:end="71:22">AVERROR</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="83:5"><if pos:start="73:5" pos:end="83:5">if <condition pos:start="73:8" pos:end="73:18">(<expr pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <name pos:start="73:15" pos:end="73:17">len</name></expr>)</condition> <block pos:start="73:20" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:17">

        <expr_stmt pos:start="75:9" pos:end="75:66"><expr pos:start="75:9" pos:end="75:65"><name pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:12">data</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:27">read_buf_size</name></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <call pos:start="75:31" pos:end="75:65"><name pos:start="75:31" pos:end="75:35">FFMIN</name><argument_list pos:start="75:36" pos:end="75:65">(<argument pos:start="75:37" pos:end="75:45"><expr pos:start="75:37" pos:end="75:45"><name pos:start="75:37" pos:end="75:39">len</name> <operator pos:start="75:41" pos:end="75:41">-</operator> <name pos:start="75:43" pos:end="75:45">ret</name></expr></argument>, <argument pos:start="75:48" pos:end="75:64"><expr pos:start="75:48" pos:end="75:64"><sizeof pos:start="75:48" pos:end="75:64">sizeof<argument_list pos:start="75:54" pos:end="75:64">(<argument pos:start="75:55" pos:end="75:63"><expr pos:start="75:55" pos:end="75:63"><name pos:start="75:55" pos:end="75:63"><name pos:start="75:55" pos:end="75:58">data</name><operator pos:start="75:59" pos:end="75:60">-&gt;</operator><name pos:start="75:61" pos:end="75:63">buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:58"><expr pos:start="77:9" pos:end="77:57"><call pos:start="77:9" pos:end="77:57"><name pos:start="77:9" pos:end="77:14">memcpy</name><argument_list pos:start="77:15" pos:end="77:57">(<argument pos:start="77:16" pos:end="77:24"><expr pos:start="77:16" pos:end="77:24"><name pos:start="77:16" pos:end="77:24"><name pos:start="77:16" pos:end="77:19">data</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:24">buf</name></name></expr></argument>, <argument pos:start="77:27" pos:end="77:35"><expr pos:start="77:27" pos:end="77:35"><name pos:start="77:27" pos:end="77:29">buf</name> <operator pos:start="77:31" pos:end="77:31">+</operator> <name pos:start="77:33" pos:end="77:35">ret</name></expr></argument>, <argument pos:start="77:38" pos:end="77:56"><expr pos:start="77:38" pos:end="77:56"><name pos:start="77:38" pos:end="77:56"><name pos:start="77:38" pos:end="77:41">data</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:56">read_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:12">data</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:28">read_buf_index</name></name> <operator pos:start="79:30" pos:end="79:30">=</operator> <literal type="number" pos:start="79:32" pos:end="79:32">0</literal></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:17">return <expr pos:start="81:16" pos:end="81:16"><literal type="number" pos:start="81:16" pos:end="81:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="85:5" pos:end="85:13">return <expr pos:start="85:12" pos:end="85:12"><literal type="number" pos:start="85:12" pos:end="85:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
