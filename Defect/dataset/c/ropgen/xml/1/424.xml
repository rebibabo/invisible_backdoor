<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/424.c" pos:tabs="8"><function pos:start="1:1" pos:end="78:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">cpu_exec_init</name><parameter_list pos:start="1:19" pos:end="1:37">(<parameter pos:start="1:20" pos:end="1:36"><decl pos:start="1:20" pos:end="1:36"><type pos:start="1:20" pos:end="1:33"><name pos:start="1:20" pos:end="1:31">CPUArchState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="78:1">{<block_content pos:start="5:5" pos:end="76:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><call pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:31">ENV_GET_CPU</name><argument_list pos:start="5:32" pos:end="5:36">(<argument pos:start="5:33" pos:end="5:35"><expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><call pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:32">CPU_GET_CLASS</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:22">some_cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">cpu_index</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:29">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:29"><call pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:29">(<argument pos:start="15:13" pos:end="15:28"><expr pos:start="15:13" pos:end="15:28"><name pos:start="15:13" pos:end="15:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:19"><call pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">cpu_list_lock</name><argument_list pos:start="17:18" pos:end="17:19">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:18"><expr pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:13">cpu_index</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>;</expr_stmt>

    <macro pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:15">CPU_FOREACH</name><argument_list pos:start="23:16" pos:end="23:25">(<argument pos:start="23:17" pos:end="23:24">some_cpu</argument>)</argument_list></macro> <block pos:start="23:27" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <expr_stmt pos:start="25:9" pos:end="25:20"><expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:17">cpu_index</name><operator pos:start="25:18" pos:end="25:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:7">cpu</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:18">cpu_index</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:30">cpu_index</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:7">cpu</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:18">numa_node</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><call pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:15">QTAILQ_INIT</name><argument_list pos:start="33:16" pos:end="33:34">(<argument pos:start="33:17" pos:end="33:33"><expr pos:start="33:17" pos:end="33:33"><operator pos:start="33:17" pos:end="33:17">&amp;</operator><name pos:start="33:18" pos:end="33:33"><name pos:start="33:18" pos:end="33:20">cpu</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:33">breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:15">QTAILQ_INIT</name><argument_list pos:start="35:16" pos:end="35:34">(<argument pos:start="35:17" pos:end="35:33"><expr pos:start="35:17" pos:end="35:33"><operator pos:start="35:17" pos:end="35:17">&amp;</operator><name pos:start="35:18" pos:end="35:33"><name pos:start="35:18" pos:end="35:20">cpu</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:33">watchpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="37:1" pos:end="37:24">#<cpp:directive pos:start="37:2" pos:end="37:7">ifndef</cpp:directive> <name pos:start="37:9" pos:end="37:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:7">cpu</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:11">as</name></name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">&amp;</operator><name pos:start="39:16" pos:end="39:35">address_space_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="45:0"><expr pos:start="41:5" pos:end="41:41"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:7">cpu</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:18">thread_id</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:41"><name pos:start="41:22" pos:end="41:39">qemu_get_thread_id</name><argument_list pos:start="41:40" pos:end="41:41">()</argument_list></call></expr>;</expr_stmt>


<cpp:endif pos:start="44:1" pos:end="44:6">#<cpp:directive pos:start="44:2" pos:end="44:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="46:5" pos:end="49:0"><expr pos:start="46:5" pos:end="46:40"><call pos:start="46:5" pos:end="46:40"><name pos:start="46:5" pos:end="46:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="46:23" pos:end="46:40">(<argument pos:start="46:24" pos:end="46:28"><expr pos:start="46:24" pos:end="46:28"><operator pos:start="46:24" pos:end="46:24">&amp;</operator><name pos:start="46:25" pos:end="46:28">cpus</name></expr></argument>, <argument pos:start="46:31" pos:end="46:33"><expr pos:start="46:31" pos:end="46:33"><name pos:start="46:31" pos:end="46:33">cpu</name></expr></argument>, <argument pos:start="46:36" pos:end="46:39"><expr pos:start="46:36" pos:end="46:39"><name pos:start="46:36" pos:end="46:39">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="48:1" pos:end="48:29">#<cpp:directive pos:start="48:2" pos:end="48:3">if</cpp:directive> <expr pos:start="48:5" pos:end="48:29"><call pos:start="48:5" pos:end="48:29"><name pos:start="48:5" pos:end="48:11">defined</name><argument_list pos:start="48:12" pos:end="48:29">(<argument pos:start="48:13" pos:end="48:28"><expr pos:start="48:13" pos:end="48:28"><name pos:start="48:13" pos:end="48:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="50:5" pos:end="53:0"><expr pos:start="50:5" pos:end="50:21"><call pos:start="50:5" pos:end="50:21"><name pos:start="50:5" pos:end="50:19">cpu_list_unlock</name><argument_list pos:start="50:20" pos:end="50:21">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="52:1" pos:end="52:6">#<cpp:directive pos:start="52:2" pos:end="52:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="54:5" pos:end="61:0"><if pos:start="54:5" pos:end="61:0">if <condition pos:start="54:8" pos:end="54:43">(<expr pos:start="54:9" pos:end="54:42"><call pos:start="54:9" pos:end="54:34"><name pos:start="54:9" pos:end="54:21">qdev_get_vmsd</name><argument_list pos:start="54:22" pos:end="54:34">(<argument pos:start="54:23" pos:end="54:33"><expr pos:start="54:23" pos:end="54:33"><call pos:start="54:23" pos:end="54:33"><name pos:start="54:23" pos:end="54:28">DEVICE</name><argument_list pos:start="54:29" pos:end="54:33">(<argument pos:start="54:30" pos:end="54:32"><expr pos:start="54:30" pos:end="54:32"><name pos:start="54:30" pos:end="54:32">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="54:36" pos:end="54:37">==</operator> <name pos:start="54:39" pos:end="54:42">NULL</name></expr>)</condition> <block pos:start="54:45" pos:end="61:0">{<block_content pos:start="56:9" pos:end="56:68">

        <expr_stmt pos:start="56:9" pos:end="56:68"><expr pos:start="56:9" pos:end="56:67"><call pos:start="56:9" pos:end="56:67"><name pos:start="56:9" pos:end="56:24">vmstate_register</name><argument_list pos:start="56:25" pos:end="56:67">(<argument pos:start="56:26" pos:end="56:29"><expr pos:start="56:26" pos:end="56:29"><name pos:start="56:26" pos:end="56:29">NULL</name></expr></argument>, <argument pos:start="56:32" pos:end="56:40"><expr pos:start="56:32" pos:end="56:40"><name pos:start="56:32" pos:end="56:40">cpu_index</name></expr></argument>, <argument pos:start="56:43" pos:end="56:61"><expr pos:start="56:43" pos:end="56:61"><operator pos:start="56:43" pos:end="56:43">&amp;</operator><name pos:start="56:44" pos:end="56:61">vmstate_cpu_common</name></expr></argument>, <argument pos:start="56:64" pos:end="56:66"><expr pos:start="56:64" pos:end="56:66"><name pos:start="56:64" pos:end="56:66">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="60:1" pos:end="60:59">#<cpp:directive pos:start="60:2" pos:end="60:3">if</cpp:directive> <expr pos:start="60:5" pos:end="60:59"><call pos:start="60:5" pos:end="60:29"><name pos:start="60:5" pos:end="60:11">defined</name><argument_list pos:start="60:12" pos:end="60:29">(<argument pos:start="60:13" pos:end="60:28"><expr pos:start="60:13" pos:end="60:28"><name pos:start="60:13" pos:end="60:28">CPU_SAVE_VERSION</name></expr></argument>)</argument_list></call> <operator pos:start="60:31" pos:end="60:32">&amp;&amp;</operator> <operator pos:start="60:34" pos:end="60:34">!</operator><call pos:start="60:35" pos:end="60:59"><name pos:start="60:35" pos:end="60:41">defined</name><argument_list pos:start="60:42" pos:end="60:59">(<argument pos:start="60:43" pos:end="60:58"><expr pos:start="60:43" pos:end="60:58"><name pos:start="60:43" pos:end="60:58">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="62:5" pos:end="64:45"><expr pos:start="62:5" pos:end="64:44"><call pos:start="62:5" pos:end="64:44"><name pos:start="62:5" pos:end="62:19">register_savevm</name><argument_list pos:start="62:20" pos:end="64:44">(<argument pos:start="62:21" pos:end="62:24"><expr pos:start="62:21" pos:end="62:24"><name pos:start="62:21" pos:end="62:24">NULL</name></expr></argument>, <argument pos:start="62:27" pos:end="62:31"><expr pos:start="62:27" pos:end="62:31"><literal type="string" pos:start="62:27" pos:end="62:31">"cpu"</literal></expr></argument>, <argument pos:start="62:34" pos:end="62:42"><expr pos:start="62:34" pos:end="62:42"><name pos:start="62:34" pos:end="62:42">cpu_index</name></expr></argument>, <argument pos:start="62:45" pos:end="62:60"><expr pos:start="62:45" pos:end="62:60"><name pos:start="62:45" pos:end="62:60">CPU_SAVE_VERSION</name></expr></argument>,

                    <argument pos:start="64:21" pos:end="64:28"><expr pos:start="64:21" pos:end="64:28"><name pos:start="64:21" pos:end="64:28">cpu_save</name></expr></argument>, <argument pos:start="64:31" pos:end="64:38"><expr pos:start="64:31" pos:end="64:38"><name pos:start="64:31" pos:end="64:38">cpu_load</name></expr></argument>, <argument pos:start="64:41" pos:end="64:43"><expr pos:start="64:41" pos:end="64:43"><name pos:start="64:41" pos:end="64:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="66:5" pos:end="66:29"><expr pos:start="66:5" pos:end="66:28"><call pos:start="66:5" pos:end="66:28"><name pos:start="66:5" pos:end="66:10">assert</name><argument_list pos:start="66:11" pos:end="66:28">(<argument pos:start="66:12" pos:end="66:27"><expr pos:start="66:12" pos:end="66:27"><name pos:start="66:12" pos:end="66:19"><name pos:start="66:12" pos:end="66:13">cc</name><operator pos:start="66:14" pos:end="66:15">-&gt;</operator><name pos:start="66:16" pos:end="66:19">vmsd</name></name> <operator pos:start="66:21" pos:end="66:22">==</operator> <name pos:start="66:24" pos:end="66:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="68:5" pos:end="71:0"><expr pos:start="68:5" pos:end="68:46"><call pos:start="68:5" pos:end="68:46"><name pos:start="68:5" pos:end="68:10">assert</name><argument_list pos:start="68:11" pos:end="68:46">(<argument pos:start="68:12" pos:end="68:45"><expr pos:start="68:12" pos:end="68:45"><call pos:start="68:12" pos:end="68:37"><name pos:start="68:12" pos:end="68:24">qdev_get_vmsd</name><argument_list pos:start="68:25" pos:end="68:37">(<argument pos:start="68:26" pos:end="68:36"><expr pos:start="68:26" pos:end="68:36"><call pos:start="68:26" pos:end="68:36"><name pos:start="68:26" pos:end="68:31">DEVICE</name><argument_list pos:start="68:32" pos:end="68:36">(<argument pos:start="68:33" pos:end="68:35"><expr pos:start="68:33" pos:end="68:35"><name pos:start="68:33" pos:end="68:35">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="68:39" pos:end="68:40">==</operator> <name pos:start="68:42" pos:end="68:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="70:1" pos:end="70:6">#<cpp:directive pos:start="70:2" pos:end="70:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="72:5" pos:end="76:5"><if pos:start="72:5" pos:end="76:5">if <condition pos:start="72:8" pos:end="72:25">(<expr pos:start="72:9" pos:end="72:24"><name pos:start="72:9" pos:end="72:16"><name pos:start="72:9" pos:end="72:10">cc</name><operator pos:start="72:11" pos:end="72:12">-&gt;</operator><name pos:start="72:13" pos:end="72:16">vmsd</name></name> <operator pos:start="72:18" pos:end="72:19">!=</operator> <name pos:start="72:21" pos:end="72:24">NULL</name></expr>)</condition> <block pos:start="72:27" pos:end="76:5">{<block_content pos:start="74:9" pos:end="74:57">

        <expr_stmt pos:start="74:9" pos:end="74:57"><expr pos:start="74:9" pos:end="74:56"><call pos:start="74:9" pos:end="74:56"><name pos:start="74:9" pos:end="74:24">vmstate_register</name><argument_list pos:start="74:25" pos:end="74:56">(<argument pos:start="74:26" pos:end="74:29"><expr pos:start="74:26" pos:end="74:29"><name pos:start="74:26" pos:end="74:29">NULL</name></expr></argument>, <argument pos:start="74:32" pos:end="74:40"><expr pos:start="74:32" pos:end="74:40"><name pos:start="74:32" pos:end="74:40">cpu_index</name></expr></argument>, <argument pos:start="74:43" pos:end="74:50"><expr pos:start="74:43" pos:end="74:50"><name pos:start="74:43" pos:end="74:50"><name pos:start="74:43" pos:end="74:44">cc</name><operator pos:start="74:45" pos:end="74:46">-&gt;</operator><name pos:start="74:47" pos:end="74:50">vmsd</name></name></expr></argument>, <argument pos:start="74:53" pos:end="74:55"><expr pos:start="74:53" pos:end="74:55"><name pos:start="74:53" pos:end="74:55">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
