<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23777.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">spapr_dt_ov5_platform_support</name><parameter_list pos:start="1:42" pos:end="1:64">(<parameter pos:start="1:43" pos:end="1:51"><decl pos:start="1:43" pos:end="1:51"><type pos:start="1:43" pos:end="1:51"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">fdt</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:63">chosen</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:40">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PowerPCCPU</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:29">first_ppc_cpu</name> <init pos:start="5:31" pos:end="5:54">= <expr pos:start="5:33" pos:end="5:54"><call pos:start="5:33" pos:end="5:54"><name pos:start="5:33" pos:end="5:43">POWERPC_CPU</name><argument_list pos:start="5:44" pos:end="5:54">(<argument pos:start="5:45" pos:end="5:53"><expr pos:start="5:45" pos:end="5:53"><name pos:start="5:45" pos:end="5:53">first_cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="9:5" pos:end="19:6"><decl pos:start="9:5" pos:end="19:5"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:19"><name pos:start="9:10" pos:end="9:12">val</name><index pos:start="9:13" pos:end="9:19">[<expr pos:start="9:14" pos:end="9:18"><literal type="number" pos:start="9:14" pos:end="9:14">2</literal> <operator pos:start="9:16" pos:end="9:16">*</operator> <literal type="number" pos:start="9:18" pos:end="9:18">4</literal></expr>]</index></name> <init pos:start="9:21" pos:end="19:5">= <expr pos:start="9:23" pos:end="19:5"><block pos:start="9:23" pos:end="19:5">{

        <expr pos:start="11:9" pos:end="11:10"><literal type="number" pos:start="11:9" pos:end="11:10">23</literal></expr>, <expr pos:start="11:13" pos:end="11:16"><literal type="number" pos:start="11:13" pos:end="11:16">0x00</literal></expr>, <comment type="block" pos:start="11:19" pos:end="11:79">/* Xive mode: 0 = legacy (as in ISA 2.7), 1 = Exploitation */</comment>

        <expr pos:start="13:9" pos:end="13:10"><literal type="number" pos:start="13:9" pos:end="13:10">24</literal></expr>, <expr pos:start="13:13" pos:end="13:16"><literal type="number" pos:start="13:13" pos:end="13:16">0x00</literal></expr>, <comment type="block" pos:start="13:19" pos:end="13:52">/* Hash/Radix, filled in below. */</comment>

        <expr pos:start="15:9" pos:end="15:10"><literal type="number" pos:start="15:9" pos:end="15:10">25</literal></expr>, <expr pos:start="15:13" pos:end="15:16"><literal type="number" pos:start="15:13" pos:end="15:16">0x00</literal></expr>, <comment type="block" pos:start="15:19" pos:end="15:71">/* Hash options: Segment Tables == no, GTSE == no. */</comment>

        <expr pos:start="17:9" pos:end="17:10"><literal type="number" pos:start="17:9" pos:end="17:10">26</literal></expr>, <expr pos:start="17:13" pos:end="17:16"><literal type="number" pos:start="17:13" pos:end="17:16">0x40</literal></expr>, <comment type="block" pos:start="17:19" pos:end="17:51">/* Radix options: GTSE == yes. */</comment>

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="55:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:19">kvm_enabled</name><argument_list pos:start="23:20" pos:end="23:21">()</argument_list></call></expr>)</condition> <block pos:start="23:24" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:9">

        <if_stmt pos:start="25:9" pos:end="37:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:71">(<expr pos:start="25:13" pos:end="25:70"><call pos:start="25:13" pos:end="25:38"><name pos:start="25:13" pos:end="25:36">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="25:37" pos:end="25:38">()</argument_list></call> <operator pos:start="25:40" pos:end="25:41">&amp;&amp;</operator> <call pos:start="25:43" pos:end="25:70"><name pos:start="25:43" pos:end="25:68">kvmppc_has_cap_mmu_hash_v3</name><argument_list pos:start="25:69" pos:end="25:70">()</argument_list></call></expr>)</condition> <block pos:start="25:73" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:26">

            <expr_stmt pos:start="27:13" pos:end="27:26"><expr pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:15">val</name><index pos:start="27:16" pos:end="27:18">[<expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">3</literal></expr>]</index></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <literal type="number" pos:start="27:22" pos:end="27:25">0x80</literal></expr>;</expr_stmt> <comment type="block" pos:start="27:28" pos:end="27:45">/* OV5_MMU_BOTH */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="29:11" pos:end="33:9">else if <condition pos:start="29:19" pos:end="29:46">(<expr pos:start="29:20" pos:end="29:45"><call pos:start="29:20" pos:end="29:45"><name pos:start="29:20" pos:end="29:43">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="29:44" pos:end="29:45">()</argument_list></call></expr>)</condition> <block pos:start="29:48" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:26">

            <expr_stmt pos:start="31:13" pos:end="31:26"><expr pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:18"><name pos:start="31:13" pos:end="31:15">val</name><index pos:start="31:16" pos:end="31:18">[<expr pos:start="31:17" pos:end="31:17"><literal type="number" pos:start="31:17" pos:end="31:17">3</literal></expr>]</index></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:25">0x40</literal></expr>;</expr_stmt> <comment type="block" pos:start="31:28" pos:end="31:50">/* OV5_MMU_RADIX_300 */</comment>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="37:9">else <block pos:start="33:16" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:26">

            <expr_stmt pos:start="35:13" pos:end="35:26"><expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:18"><name pos:start="35:13" pos:end="35:15">val</name><index pos:start="35:16" pos:end="35:18">[<expr pos:start="35:17" pos:end="35:17"><literal type="number" pos:start="35:17" pos:end="35:17">3</literal></expr>]</index></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <literal type="number" pos:start="35:22" pos:end="35:25">0x00</literal></expr>;</expr_stmt> <comment type="block" pos:start="35:28" pos:end="35:37">/* Hash */</comment>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="55:5">else <block pos:start="39:12" pos:end="55:5">{<block_content pos:start="41:9" pos:end="53:9">

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:58">(<expr pos:start="41:13" pos:end="41:57"><name pos:start="41:13" pos:end="41:40"><name pos:start="41:13" pos:end="41:25">first_ppc_cpu</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:30">env</name><operator pos:start="41:31" pos:end="41:31">.</operator><name pos:start="41:32" pos:end="41:40">mmu_model</name></name> <operator pos:start="41:42" pos:end="41:42">&amp;</operator> <name pos:start="41:44" pos:end="41:57">POWERPC_MMU_V3</name></expr>)</condition> <block pos:start="41:60" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:26">

            <comment type="block" pos:start="43:13" pos:end="43:78">/* V3 MMU supports both hash and radix (with dynamic switching) */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:26"><expr pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:15">val</name><index pos:start="45:16" pos:end="45:18">[<expr pos:start="45:17" pos:end="45:17"><literal type="number" pos:start="45:17" pos:end="45:17">3</literal></expr>]</index></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:25">0xC0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="53:9">else <block pos:start="47:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:26">

            <comment type="block" pos:start="49:13" pos:end="49:47">/* Otherwise we can only do hash */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:26"><expr pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:15">val</name><index pos:start="51:16" pos:end="51:18">[<expr pos:start="51:17" pos:end="51:17"><literal type="number" pos:start="51:17" pos:end="51:17">3</literal></expr>]</index></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:25">0x00</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:40"><expr pos:start="57:5" pos:end="59:39"><call pos:start="57:5" pos:end="59:39"><name pos:start="57:5" pos:end="57:8">_FDT</name><argument_list pos:start="57:9" pos:end="59:39">(<argument pos:start="57:10" pos:end="59:38"><expr pos:start="57:10" pos:end="59:38"><call pos:start="57:10" pos:end="59:38"><name pos:start="57:10" pos:end="57:20">fdt_setprop</name><argument_list pos:start="57:21" pos:end="59:38">(<argument pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:24">fdt</name></expr></argument>, <argument pos:start="57:27" pos:end="57:32"><expr pos:start="57:27" pos:end="57:32"><name pos:start="57:27" pos:end="57:32">chosen</name></expr></argument>, <argument pos:start="57:35" pos:end="57:67"><expr pos:start="57:35" pos:end="57:67"><literal type="string" pos:start="57:35" pos:end="57:67">"ibm,arch-vec-5-platform-support"</literal></expr></argument>,

                     <argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><name pos:start="59:22" pos:end="59:24">val</name></expr></argument>, <argument pos:start="59:27" pos:end="59:37"><expr pos:start="59:27" pos:end="59:37"><sizeof pos:start="59:27" pos:end="59:37">sizeof<argument_list pos:start="59:33" pos:end="59:37">(<argument pos:start="59:34" pos:end="59:36"><expr pos:start="59:34" pos:end="59:36"><name pos:start="59:34" pos:end="59:36">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
