<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16681.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:45">nbd_co_receive_offset_data_payload</name><parameter_list pos:start="1:46" pos:end="5:79">(<parameter pos:start="1:47" pos:end="1:65"><decl pos:start="1:47" pos:end="1:65"><type pos:start="1:47" pos:end="1:65"><name pos:start="1:47" pos:end="1:62">NBDClientSession</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:65">s</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:66"><decl pos:start="3:47" pos:end="3:66"><type pos:start="3:47" pos:end="3:66"><name pos:start="3:47" pos:end="3:54">uint64_t</name></type> <name pos:start="3:56" pos:end="3:66">orig_offset</name></decl></parameter>,

                                              <parameter pos:start="5:47" pos:end="5:64"><decl pos:start="5:47" pos:end="5:64"><type pos:start="5:47" pos:end="5:64"><name pos:start="5:47" pos:end="5:58">QEMUIOVector</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:64">qiov</name></decl></parameter>, <parameter pos:start="5:67" pos:end="5:78"><decl pos:start="5:67" pos:end="5:78"><type pos:start="5:67" pos:end="5:78"><name pos:start="5:67" pos:end="5:71">Error</name> <modifier pos:start="5:73" pos:end="5:73">*</modifier><modifier pos:start="5:74" pos:end="5:74">*</modifier></type><name pos:start="5:75" pos:end="5:78">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="75:1">{<block_content pos:start="9:5" pos:end="73:30">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">QEMUIOVector</name></type> <name pos:start="9:18" pos:end="9:25">sub_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:20">data_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:58"><decl pos:start="17:5" pos:end="17:57"><type pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:27">NBDStructuredReplyChunk</name> <modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:34">chunk</name> <init pos:start="17:36" pos:end="17:57">= <expr pos:start="17:38" pos:end="17:57"><operator pos:start="17:38" pos:end="17:38">&amp;</operator><name pos:start="17:39" pos:end="17:57"><name pos:start="17:39" pos:end="17:39">s</name><operator pos:start="17:40" pos:end="17:41">-&gt;</operator><name pos:start="17:42" pos:end="17:46">reply</name><operator pos:start="17:47" pos:end="17:47">.</operator><name pos:start="17:48" pos:end="17:57">structured</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><call pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:46">(<argument pos:start="21:12" pos:end="21:45"><expr pos:start="21:12" pos:end="21:45"><call pos:start="21:12" pos:end="21:45"><name pos:start="21:12" pos:end="21:34">nbd_reply_is_structured</name><argument_list pos:start="21:35" pos:end="21:45">(<argument pos:start="21:36" pos:end="21:44"><expr pos:start="21:36" pos:end="21:44"><operator pos:start="21:36" pos:end="21:36">&amp;</operator><name pos:start="21:37" pos:end="21:44"><name pos:start="21:37" pos:end="21:37">s</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:44">reply</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:39">(<expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:13">chunk</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:21">length</name></name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <sizeof pos:start="25:25" pos:end="25:38">sizeof<argument_list pos:start="25:31" pos:end="25:38">(<argument pos:start="25:32" pos:end="25:37"><expr pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:37">offset</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="25:41" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:23">

        <expr_stmt pos:start="27:9" pos:end="29:55"><expr pos:start="27:9" pos:end="29:54"><call pos:start="27:9" pos:end="29:54"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="29:54">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">errp</name></expr></argument>, <argument pos:start="27:26" pos:end="29:53"><expr pos:start="27:26" pos:end="29:53"><literal type="string" pos:start="27:26" pos:end="27:63">"Protocol error: invalid payload for "</literal>

                         <literal type="string" pos:start="29:26" pos:end="29:53">"NBD_REPLY_TYPE_OFFSET_DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:23">return <expr pos:start="31:16" pos:end="31:22"><operator pos:start="31:16" pos:end="31:16">-</operator><name pos:start="31:17" pos:end="31:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:60">(<expr pos:start="37:9" pos:end="37:59"><call pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:16">nbd_read</name><argument_list pos:start="37:17" pos:end="37:55">(<argument pos:start="37:18" pos:end="37:23"><expr pos:start="37:18" pos:end="37:23"><name pos:start="37:18" pos:end="37:23"><name pos:start="37:18" pos:end="37:18">s</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:23">ioc</name></name></expr></argument>, <argument pos:start="37:26" pos:end="37:32"><expr pos:start="37:26" pos:end="37:32"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:32">offset</name></expr></argument>, <argument pos:start="37:35" pos:end="37:48"><expr pos:start="37:35" pos:end="37:48"><sizeof pos:start="37:35" pos:end="37:48">sizeof<argument_list pos:start="37:41" pos:end="37:48">(<argument pos:start="37:42" pos:end="37:47"><expr pos:start="37:42" pos:end="37:47"><name pos:start="37:42" pos:end="37:47">offset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:51" pos:end="37:54"><expr pos:start="37:51" pos:end="37:54"><name pos:start="37:51" pos:end="37:54">errp</name></expr></argument>)</argument_list></call> <operator pos:start="37:57" pos:end="37:57">&lt;</operator> <literal type="number" pos:start="37:59" pos:end="37:59">0</literal></expr>)</condition> <block pos:start="37:62" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:20">

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:26"><expr pos:start="43:5" pos:end="43:25"><call pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:16">be64_to_cpus</name><argument_list pos:start="43:17" pos:end="43:25">(<argument pos:start="43:18" pos:end="43:24"><expr pos:start="43:18" pos:end="43:24"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:24">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:13">data_size</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:29"><name pos:start="47:17" pos:end="47:21">chunk</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:29">length</name></name> <operator pos:start="47:31" pos:end="47:31">-</operator> <sizeof pos:start="47:33" pos:end="47:46">sizeof<argument_list pos:start="47:39" pos:end="47:46">(<argument pos:start="47:40" pos:end="47:45"><expr pos:start="47:40" pos:end="47:45"><name pos:start="47:40" pos:end="47:45">offset</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="59:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="51:54">(<expr pos:start="49:9" pos:end="51:53"><name pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:14">offset</name> <argument_list type="generic" pos:start="49:16" pos:end="49:43">&lt; <argument pos:start="49:18" pos:end="49:41"><expr pos:start="49:18" pos:end="49:41"><name pos:start="49:18" pos:end="49:28">orig_offset</name> <operator pos:start="49:30" pos:end="49:31">||</operator> <name pos:start="49:33" pos:end="49:41">data_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="49:45" pos:end="49:54"><name pos:start="49:45" pos:end="49:48">qiov</name><operator pos:start="49:49" pos:end="49:50">-&gt;</operator><name pos:start="49:51" pos:end="49:54">size</name></name> <operator pos:start="49:56" pos:end="49:57">||</operator>

        <name pos:start="51:9" pos:end="51:14">offset</name> <operator pos:start="51:16" pos:end="51:16">&gt;</operator> <name pos:start="51:18" pos:end="51:28">orig_offset</name> <operator pos:start="51:30" pos:end="51:30">+</operator> <name pos:start="51:32" pos:end="51:41"><name pos:start="51:32" pos:end="51:35">qiov</name><operator pos:start="51:36" pos:end="51:37">-&gt;</operator><name pos:start="51:38" pos:end="51:41">size</name></name> <operator pos:start="51:43" pos:end="51:43">-</operator> <name pos:start="51:45" pos:end="51:53">data_size</name></expr>)</condition> <block pos:start="51:56" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:23">

        <expr_stmt pos:start="53:9" pos:end="55:36"><expr pos:start="53:9" pos:end="55:35"><call pos:start="53:9" pos:end="55:35"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="55:35">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">errp</name></expr></argument>, <argument pos:start="53:26" pos:end="55:34"><expr pos:start="53:26" pos:end="55:34"><literal type="string" pos:start="53:26" pos:end="53:80">"Protocol error: server sent chunk exceeding requested"</literal>

                         <literal type="string" pos:start="55:26" pos:end="55:34">" region"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:23">return <expr pos:start="57:16" pos:end="57:22"><operator pos:start="57:16" pos:end="57:16">-</operator><name pos:start="57:17" pos:end="57:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><call pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:19">qemu_iovec_init</name><argument_list pos:start="63:20" pos:end="63:42">(<argument pos:start="63:21" pos:end="63:29"><expr pos:start="63:21" pos:end="63:29"><operator pos:start="63:21" pos:end="63:21">&amp;</operator><name pos:start="63:22" pos:end="63:29">sub_qiov</name></expr></argument>, <argument pos:start="63:32" pos:end="63:41"><expr pos:start="63:32" pos:end="63:41"><name pos:start="63:32" pos:end="63:41"><name pos:start="63:32" pos:end="63:35">qiov</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:41">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:72"><expr pos:start="65:5" pos:end="65:71"><call pos:start="65:5" pos:end="65:71"><name pos:start="65:5" pos:end="65:21">qemu_iovec_concat</name><argument_list pos:start="65:22" pos:end="65:71">(<argument pos:start="65:23" pos:end="65:31"><expr pos:start="65:23" pos:end="65:31"><operator pos:start="65:23" pos:end="65:23">&amp;</operator><name pos:start="65:24" pos:end="65:31">sub_qiov</name></expr></argument>, <argument pos:start="65:34" pos:end="65:37"><expr pos:start="65:34" pos:end="65:37"><name pos:start="65:34" pos:end="65:37">qiov</name></expr></argument>, <argument pos:start="65:40" pos:end="65:59"><expr pos:start="65:40" pos:end="65:59"><name pos:start="65:40" pos:end="65:45">offset</name> <operator pos:start="65:47" pos:end="65:47">-</operator> <name pos:start="65:49" pos:end="65:59">orig_offset</name></expr></argument>, <argument pos:start="65:62" pos:end="65:70"><expr pos:start="65:62" pos:end="65:70"><name pos:start="65:62" pos:end="65:70">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:75"><expr pos:start="67:5" pos:end="67:74"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:74"><name pos:start="67:11" pos:end="67:31">qio_channel_readv_all</name><argument_list pos:start="67:32" pos:end="67:74">(<argument pos:start="67:33" pos:end="67:38"><expr pos:start="67:33" pos:end="67:38"><name pos:start="67:33" pos:end="67:38"><name pos:start="67:33" pos:end="67:33">s</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:38">ioc</name></name></expr></argument>, <argument pos:start="67:41" pos:end="67:52"><expr pos:start="67:41" pos:end="67:52"><name pos:start="67:41" pos:end="67:52"><name pos:start="67:41" pos:end="67:48">sub_qiov</name><operator pos:start="67:49" pos:end="67:49">.</operator><name pos:start="67:50" pos:end="67:52">iov</name></name></expr></argument>, <argument pos:start="67:55" pos:end="67:67"><expr pos:start="67:55" pos:end="67:67"><name pos:start="67:55" pos:end="67:67"><name pos:start="67:55" pos:end="67:62">sub_qiov</name><operator pos:start="67:63" pos:end="67:63">.</operator><name pos:start="67:64" pos:end="67:67">niov</name></name></expr></argument>, <argument pos:start="67:70" pos:end="67:73"><expr pos:start="67:70" pos:end="67:73"><name pos:start="67:70" pos:end="67:73">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:34"><expr pos:start="69:5" pos:end="69:33"><call pos:start="69:5" pos:end="69:33"><name pos:start="69:5" pos:end="69:22">qemu_iovec_destroy</name><argument_list pos:start="69:23" pos:end="69:33">(<argument pos:start="69:24" pos:end="69:32"><expr pos:start="69:24" pos:end="69:32"><operator pos:start="69:24" pos:end="69:24">&amp;</operator><name pos:start="69:25" pos:end="69:32">sub_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="73:5" pos:end="73:30">return <expr pos:start="73:12" pos:end="73:29"><ternary pos:start="73:12" pos:end="73:29"><condition pos:start="73:12" pos:end="73:20"><expr pos:start="73:12" pos:end="73:18"><name pos:start="73:12" pos:end="73:14">ret</name> <operator pos:start="73:16" pos:end="73:16">&lt;</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr> ?</condition><then pos:start="73:22" pos:end="73:25"> <expr pos:start="73:22" pos:end="73:25"><operator pos:start="73:22" pos:end="73:22">-</operator><name pos:start="73:23" pos:end="73:25">EIO</name></expr> </then><else pos:start="73:27" pos:end="73:29">: <expr pos:start="73:29" pos:end="73:29"><literal type="number" pos:start="73:29" pos:end="73:29">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
