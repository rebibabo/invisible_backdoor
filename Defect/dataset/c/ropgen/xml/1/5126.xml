<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5126.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:30"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:30">tcg_target_ulong</name></type> <name pos:start="1:32" pos:end="1:42">cpu_tb_exec</name><parameter_list pos:start="1:43" pos:end="1:80">(<parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">CPUState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">cpu</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:79"><decl pos:start="1:59" pos:end="1:79"><type pos:start="1:59" pos:end="1:79"><name pos:start="1:59" pos:end="1:74">TranslationBlock</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:79">itb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:15">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CPUArchState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">env</name> <init pos:start="5:23" pos:end="5:36">= <expr pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">TranslationBlock</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:29">last_tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">tb_exit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">tb_ptr</name> <init pos:start="13:21" pos:end="13:33">= <expr pos:start="13:23" pos:end="13:33"><name pos:start="13:23" pos:end="13:33"><name pos:start="13:23" pos:end="13:25">itb</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:33">tc_ptr</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="26:0"><expr pos:start="17:5" pos:end="21:72"><call pos:start="17:5" pos:end="21:72"><name pos:start="17:5" pos:end="17:26">qemu_log_mask_and_addr</name><argument_list pos:start="17:27" pos:end="21:72">(<argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">CPU_LOG_EXEC</name></expr></argument>, <argument pos:start="17:42" pos:end="17:48"><expr pos:start="17:42" pos:end="17:48"><name pos:start="17:42" pos:end="17:48"><name pos:start="17:42" pos:end="17:44">itb</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:48">pc</name></name></expr></argument>,

                           <argument pos:start="19:28" pos:end="19:62"><expr pos:start="19:28" pos:end="19:62"><literal type="string" pos:start="19:28" pos:end="19:39">"Trace %p ["</literal> <name pos:start="19:41" pos:end="19:53">TARGET_FMT_lx</name> <literal type="string" pos:start="19:55" pos:end="19:62">"] %s\n"</literal></expr></argument>,

                           <argument pos:start="21:28" pos:end="21:38"><expr pos:start="21:28" pos:end="21:38"><name pos:start="21:28" pos:end="21:38"><name pos:start="21:28" pos:end="21:30">itb</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:38">tc_ptr</name></name></expr></argument>, <argument pos:start="21:41" pos:end="21:47"><expr pos:start="21:41" pos:end="21:47"><name pos:start="21:41" pos:end="21:47"><name pos:start="21:41" pos:end="21:43">itb</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:47">pc</name></name></expr></argument>, <argument pos:start="21:50" pos:end="21:71"><expr pos:start="21:50" pos:end="21:71"><call pos:start="21:50" pos:end="21:71"><name pos:start="21:50" pos:end="21:62">lookup_symbol</name><argument_list pos:start="21:63" pos:end="21:71">(<argument pos:start="21:64" pos:end="21:70"><expr pos:start="21:64" pos:end="21:70"><name pos:start="21:64" pos:end="21:70"><name pos:start="21:64" pos:end="21:66">itb</name><operator pos:start="21:67" pos:end="21:68">-&gt;</operator><name pos:start="21:69" pos:end="21:70">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="25:1" pos:end="25:24">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:24"><call pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:11">defined</name><argument_list pos:start="25:12" pos:end="25:24">(<argument pos:start="25:13" pos:end="25:23"><expr pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:23">DEBUG_DISAS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="27:5" pos:end="56:0"><if pos:start="27:5" pos:end="56:0">if <condition pos:start="27:8" pos:end="29:43">(<expr pos:start="27:9" pos:end="29:42"><call pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:26">qemu_loglevel_mask</name><argument_list pos:start="27:27" pos:end="27:42">(<argument pos:start="27:28" pos:end="27:41"><expr pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:41">CPU_LOG_TB_CPU</name></expr></argument>)</argument_list></call>

        <operator pos:start="29:9" pos:end="29:10">&amp;&amp;</operator> <call pos:start="29:12" pos:end="29:42"><name pos:start="29:12" pos:end="29:33">qemu_log_in_addr_range</name><argument_list pos:start="29:34" pos:end="29:42">(<argument pos:start="29:35" pos:end="29:41"><expr pos:start="29:35" pos:end="29:41"><name pos:start="29:35" pos:end="29:41"><name pos:start="29:35" pos:end="29:37">itb</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:41">pc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:45" pos:end="56:0">{<block_content pos:start="33:9" pos:end="52:0">

<cpp:if pos:start="31:1" pos:end="31:24">#<cpp:directive pos:start="31:2" pos:end="31:3">if</cpp:directive> <expr pos:start="31:5" pos:end="31:24"><call pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:11">defined</name><argument_list pos:start="31:12" pos:end="31:24">(<argument pos:start="31:13" pos:end="31:23"><expr pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="33:9" pos:end="36:0"><expr pos:start="33:9" pos:end="33:41"><call pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:21">log_cpu_state</name><argument_list pos:start="33:22" pos:end="33:41">(<argument pos:start="33:23" pos:end="33:25"><expr pos:start="33:23" pos:end="33:25"><name pos:start="33:23" pos:end="33:25">cpu</name></expr></argument>, <argument pos:start="33:28" pos:end="33:40"><expr pos:start="33:28" pos:end="33:40"><name pos:start="33:28" pos:end="33:40">CPU_DUMP_CCOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="35:1" pos:end="35:26">#<cpp:directive pos:start="35:2" pos:end="35:5">elif</cpp:directive> <expr pos:start="35:7" pos:end="35:26"><call pos:start="35:7" pos:end="35:26"><name pos:start="35:7" pos:end="35:13">defined</name><argument_list pos:start="35:14" pos:end="35:26">(<argument pos:start="35:15" pos:end="35:25"><expr pos:start="35:15" pos:end="35:25"><name pos:start="35:15" pos:end="35:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <comment type="block" pos:start="37:9" pos:end="37:59">/* ??? Should not modify env state for dumping.  */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:46"><expr pos:start="39:9" pos:end="39:45"><call pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:28">cpu_m68k_flush_flags</name><argument_list pos:start="39:29" pos:end="39:45">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:32">env</name></expr></argument>, <argument pos:start="39:35" pos:end="39:44"><expr pos:start="39:35" pos:end="39:44"><name pos:start="39:35" pos:end="39:44"><name pos:start="39:35" pos:end="39:37">env</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:44">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:11">env</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:18">cc_op</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:32">CC_OP_FLAGS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:71"><expr pos:start="43:9" pos:end="43:70"><name pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">env</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:15">sr</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <operator pos:start="43:19" pos:end="43:19">(</operator><name pos:start="43:20" pos:end="43:26"><name pos:start="43:20" pos:end="43:22">env</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:26">sr</name></name> <operator pos:start="43:28" pos:end="43:28">&amp;</operator> <literal type="number" pos:start="43:30" pos:end="43:35">0xffe0</literal><operator pos:start="43:36" pos:end="43:36">)</operator> <operator pos:start="43:38" pos:end="43:38">|</operator> <name pos:start="43:40" pos:end="43:51"><name pos:start="43:40" pos:end="43:42">env</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:51">cc_dest</name></name> <operator pos:start="43:53" pos:end="43:53">|</operator> <operator pos:start="43:55" pos:end="43:55">(</operator><name pos:start="43:56" pos:end="43:64"><name pos:start="43:56" pos:end="43:58">env</name><operator pos:start="43:59" pos:end="43:60">-&gt;</operator><name pos:start="43:61" pos:end="43:64">cc_x</name></name> <operator pos:start="43:66" pos:end="43:67">&lt;&lt;</operator> <literal type="number" pos:start="43:69" pos:end="43:69">4</literal><operator pos:start="43:70" pos:end="43:70">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="48:0"><expr pos:start="45:9" pos:end="45:29"><call pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:21">log_cpu_state</name><argument_list pos:start="45:22" pos:end="45:29">(<argument pos:start="45:23" pos:end="45:25"><expr pos:start="45:23" pos:end="45:25"><name pos:start="45:23" pos:end="45:25">cpu</name></expr></argument>, <argument pos:start="45:28" pos:end="45:28"><expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="49:9" pos:end="52:0"><expr pos:start="49:9" pos:end="49:29"><call pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:21">log_cpu_state</name><argument_list pos:start="49:22" pos:end="49:29">(<argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><name pos:start="49:23" pos:end="49:25">cpu</name></expr></argument>, <argument pos:start="49:28" pos:end="49:28"><expr pos:start="49:28" pos:end="49:28"><literal type="number" pos:start="49:28" pos:end="49:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="55:8" pos:end="55:24">/* DEBUG_DISAS */</comment>



    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:7">cpu</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:18">can_do_io</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <operator pos:start="59:22" pos:end="59:22">!</operator><name pos:start="59:23" pos:end="59:32">use_icount</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:40"><expr pos:start="61:5" pos:end="61:39"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:39"><name pos:start="61:11" pos:end="61:26">tcg_qemu_tb_exec</name><argument_list pos:start="61:27" pos:end="61:39">(<argument pos:start="61:28" pos:end="61:30"><expr pos:start="61:28" pos:end="61:30"><name pos:start="61:28" pos:end="61:30">env</name></expr></argument>, <argument pos:start="61:33" pos:end="61:38"><expr pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:23"><expr pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:7">cpu</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:18">can_do_io</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:56"><expr pos:start="65:5" pos:end="65:55"><name pos:start="65:5" pos:end="65:11">last_tb</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">(</operator><name pos:start="65:16" pos:end="65:31">TranslationBlock</name> <operator pos:start="65:33" pos:end="65:33">*</operator><operator pos:start="65:34" pos:end="65:34">)</operator><operator pos:start="65:35" pos:end="65:35">(</operator><name pos:start="65:36" pos:end="65:38">ret</name> <operator pos:start="65:40" pos:end="65:40">&amp;</operator> <operator pos:start="65:42" pos:end="65:42">~</operator><name pos:start="65:43" pos:end="65:54">TB_EXIT_MASK</name><operator pos:start="65:55" pos:end="65:55">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:33"><expr pos:start="67:5" pos:end="67:32"><name pos:start="67:5" pos:end="67:11">tb_exit</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:17">ret</name> <operator pos:start="67:19" pos:end="67:19">&amp;</operator> <name pos:start="67:21" pos:end="67:32">TB_EXIT_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><call pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:22">trace_exec_tb_exit</name><argument_list pos:start="69:23" pos:end="69:40">(<argument pos:start="69:24" pos:end="69:30"><expr pos:start="69:24" pos:end="69:30"><name pos:start="69:24" pos:end="69:30">last_tb</name></expr></argument>, <argument pos:start="69:33" pos:end="69:39"><expr pos:start="69:33" pos:end="69:39"><name pos:start="69:33" pos:end="69:39">tb_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="107:5"><if pos:start="73:5" pos:end="107:5">if <condition pos:start="73:8" pos:end="73:31">(<expr pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:15">tb_exit</name> <operator pos:start="73:17" pos:end="73:17">&gt;</operator> <name pos:start="73:19" pos:end="73:30">TB_EXIT_IDX1</name></expr>)</condition> <block pos:start="73:33" pos:end="107:5">{<block_content pos:start="83:9" pos:end="105:9">

        <comment type="block" pos:start="75:9" pos:end="81:11">/* We didn't start executing this TB (eg because the instruction

         * counter hit zero); we must restore the guest PC to the address

         * of the start of the TB.

         */</comment>

        <decl_stmt pos:start="83:9" pos:end="83:42"><decl pos:start="83:9" pos:end="83:41"><type pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:16">CPUClass</name> <modifier pos:start="83:18" pos:end="83:18">*</modifier></type><name pos:start="83:19" pos:end="83:20">cc</name> <init pos:start="83:22" pos:end="83:41">= <expr pos:start="83:24" pos:end="83:41"><call pos:start="83:24" pos:end="83:41"><name pos:start="83:24" pos:end="83:36">CPU_GET_CLASS</name><argument_list pos:start="83:37" pos:end="83:41">(<argument pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:40">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="85:9" pos:end="93:59"><expr pos:start="85:9" pos:end="93:58"><call pos:start="85:9" pos:end="93:58"><name pos:start="85:9" pos:end="85:30">qemu_log_mask_and_addr</name><argument_list pos:start="85:31" pos:end="93:58">(<argument pos:start="85:32" pos:end="85:43"><expr pos:start="85:32" pos:end="85:43"><name pos:start="85:32" pos:end="85:43">CPU_LOG_EXEC</name></expr></argument>, <argument pos:start="85:46" pos:end="85:56"><expr pos:start="85:46" pos:end="85:56"><name pos:start="85:46" pos:end="85:56"><name pos:start="85:46" pos:end="85:52">last_tb</name><operator pos:start="85:53" pos:end="85:54">-&gt;</operator><name pos:start="85:55" pos:end="85:56">pc</name></name></expr></argument>,

                               <argument pos:start="87:32" pos:end="89:53"><expr pos:start="87:32" pos:end="89:53"><literal type="string" pos:start="87:32" pos:end="87:74">"Stopped execution of TB chain before %p ["</literal>

                               <name pos:start="89:32" pos:end="89:44">TARGET_FMT_lx</name> <literal type="string" pos:start="89:46" pos:end="89:53">"] %s\n"</literal></expr></argument>,

                               <argument pos:start="91:32" pos:end="91:46"><expr pos:start="91:32" pos:end="91:46"><name pos:start="91:32" pos:end="91:46"><name pos:start="91:32" pos:end="91:38">last_tb</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:46">tc_ptr</name></name></expr></argument>, <argument pos:start="91:49" pos:end="91:59"><expr pos:start="91:49" pos:end="91:59"><name pos:start="91:49" pos:end="91:59"><name pos:start="91:49" pos:end="91:55">last_tb</name><operator pos:start="91:56" pos:end="91:57">-&gt;</operator><name pos:start="91:58" pos:end="91:59">pc</name></name></expr></argument>,

                               <argument pos:start="93:32" pos:end="93:57"><expr pos:start="93:32" pos:end="93:57"><call pos:start="93:32" pos:end="93:57"><name pos:start="93:32" pos:end="93:44">lookup_symbol</name><argument_list pos:start="93:45" pos:end="93:57">(<argument pos:start="93:46" pos:end="93:56"><expr pos:start="93:46" pos:end="93:56"><name pos:start="93:46" pos:end="93:56"><name pos:start="93:46" pos:end="93:52">last_tb</name><operator pos:start="93:53" pos:end="93:54">-&gt;</operator><name pos:start="93:55" pos:end="93:56">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="105:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:36">(<expr pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:14">cc</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:35">synchronize_from_tb</name></name></expr>)</condition> <block pos:start="95:38" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:50">

            <expr_stmt pos:start="97:13" pos:end="97:50"><expr pos:start="97:13" pos:end="97:49"><call pos:start="97:13" pos:end="97:49"><name pos:start="97:13" pos:end="97:35"><name pos:start="97:13" pos:end="97:14">cc</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:35">synchronize_from_tb</name></name><argument_list pos:start="97:36" pos:end="97:49">(<argument pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><name pos:start="97:37" pos:end="97:39">cpu</name></expr></argument>, <argument pos:start="97:42" pos:end="97:48"><expr pos:start="97:42" pos:end="97:48"><name pos:start="97:42" pos:end="97:48">last_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="105:9">else <block pos:start="99:16" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:41">

            <expr_stmt pos:start="101:13" pos:end="101:31"><expr pos:start="101:13" pos:end="101:30"><call pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:18">assert</name><argument_list pos:start="101:19" pos:end="101:30">(<argument pos:start="101:20" pos:end="101:29"><expr pos:start="101:20" pos:end="101:29"><name pos:start="101:20" pos:end="101:29"><name pos:start="101:20" pos:end="101:21">cc</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:29">set_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:41"><expr pos:start="103:13" pos:end="103:40"><call pos:start="103:13" pos:end="103:40"><name pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:14">cc</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:22">set_pc</name></name><argument_list pos:start="103:23" pos:end="103:40">(<argument pos:start="103:24" pos:end="103:26"><expr pos:start="103:24" pos:end="103:26"><name pos:start="103:24" pos:end="103:26">cpu</name></expr></argument>, <argument pos:start="103:29" pos:end="103:39"><expr pos:start="103:29" pos:end="103:39"><name pos:start="103:29" pos:end="103:39"><name pos:start="103:29" pos:end="103:35">last_tb</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:37">(<expr pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:15">tb_exit</name> <operator pos:start="109:17" pos:end="109:18">==</operator> <name pos:start="109:20" pos:end="109:36">TB_EXIT_REQUESTED</name></expr>)</condition> <block pos:start="109:39" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:30">

        <comment type="block" pos:start="111:9" pos:end="115:11">/* We were asked to stop executing TBs (probably a pending

         * interrupt. We've now stopped, so clear the flag.

         */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:11">cpu</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:25">tcg_exit_req</name></name> <operator pos:start="117:27" pos:end="117:27">=</operator> <literal type="number" pos:start="117:29" pos:end="117:29">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="121:5" pos:end="121:15">return <expr pos:start="121:12" pos:end="121:14"><name pos:start="121:12" pos:end="121:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
