<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/720.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">check_watchpoint</name><parameter_list pos:start="1:29" pos:end="1:78">(<parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:39">offset</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:48"><decl pos:start="1:42" pos:end="1:48"><type pos:start="1:42" pos:end="1:48"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:48">len</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:60">MemTxAttrs</name></type> <name pos:start="1:62" pos:end="1:66">attrs</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:77"><decl pos:start="1:69" pos:end="1:77"><type pos:start="1:69" pos:end="1:77"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:77">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31">current_cpu</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><call pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:32">CPU_GET_CLASS</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">CPUArchState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">env</name> <init pos:start="9:23" pos:end="9:36">= <expr pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:19">pc</name></decl>, <decl pos:start="11:22" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:22" pos:end="11:28">cs_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:22">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUWatchpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">wp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22">cpu_flags</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="33:5">if <condition pos:start="21:8" pos:end="21:28">(<expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:11">cpu</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:27">watchpoint_hit</name></name></expr>)</condition> <block pos:start="21:30" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:15">

        <comment type="block" pos:start="23:9" pos:end="27:34">/* We re-entered the check after replacing the TB. Now raise

         * the debug interrupt so that is will trigger after the

         * current instruction. */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><call pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:21">cpu_interrupt</name><argument_list pos:start="29:22" pos:end="29:47">(<argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">cpu</name></expr></argument>, <argument pos:start="29:28" pos:end="29:46"><expr pos:start="29:28" pos:end="29:46"><name pos:start="29:28" pos:end="29:46">CPU_INTERRUPT_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:60"><expr pos:start="35:5" pos:end="35:59"><name pos:start="35:5" pos:end="35:9">vaddr</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:30"><name pos:start="35:14" pos:end="35:16">cpu</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:30">mem_io_vaddr</name></name> <operator pos:start="35:32" pos:end="35:32">&amp;</operator> <name pos:start="35:34" pos:end="35:49">TARGET_PAGE_MASK</name><operator pos:start="35:50" pos:end="35:50">)</operator> <operator pos:start="35:52" pos:end="35:52">+</operator> <name pos:start="35:54" pos:end="35:59">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:59"><expr pos:start="37:5" pos:end="37:58"><name pos:start="37:5" pos:end="37:9">vaddr</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:41"><name pos:start="37:13" pos:end="37:14">cc</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:41">adjust_watchpoint_address</name></name><argument_list pos:start="37:42" pos:end="37:58">(<argument pos:start="37:43" pos:end="37:45"><expr pos:start="37:43" pos:end="37:45"><name pos:start="37:43" pos:end="37:45">cpu</name></expr></argument>, <argument pos:start="37:48" pos:end="37:52"><expr pos:start="37:48" pos:end="37:52"><name pos:start="37:48" pos:end="37:52">vaddr</name></expr></argument>, <argument pos:start="37:55" pos:end="37:57"><expr pos:start="37:55" pos:end="37:57"><name pos:start="37:55" pos:end="37:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="39:5" pos:end="39:48"><name pos:start="39:5" pos:end="39:18">QTAILQ_FOREACH</name><argument_list pos:start="39:19" pos:end="39:48">(<argument pos:start="39:20" pos:end="39:21">wp</argument>, <argument pos:start="39:24" pos:end="39:40">&amp;cpu-&gt;watchpoints</argument>, <argument pos:start="39:43" pos:end="39:47">entry</argument>)</argument_list></macro> <block pos:start="39:50" pos:end="111:5">{<block_content pos:start="41:9" pos:end="109:9">

        <if_stmt pos:start="41:9" pos:end="109:9"><if pos:start="41:9" pos:end="105:9">if <condition pos:start="41:12" pos:end="43:35">(<expr pos:start="41:13" pos:end="43:34"><call pos:start="41:13" pos:end="41:58"><name pos:start="41:13" pos:end="41:42">cpu_watchpoint_address_matches</name><argument_list pos:start="41:43" pos:end="41:58">(<argument pos:start="41:44" pos:end="41:45"><expr pos:start="41:44" pos:end="41:45"><name pos:start="41:44" pos:end="41:45">wp</name></expr></argument>, <argument pos:start="41:48" pos:end="41:52"><expr pos:start="41:48" pos:end="41:52"><name pos:start="41:48" pos:end="41:52">vaddr</name></expr></argument>, <argument pos:start="41:55" pos:end="41:57"><expr pos:start="41:55" pos:end="41:57"><name pos:start="41:55" pos:end="41:57">len</name></expr></argument>)</argument_list></call>

            <operator pos:start="43:13" pos:end="43:14">&amp;&amp;</operator> <operator pos:start="43:16" pos:end="43:16">(</operator><name pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:18">wp</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:25">flags</name></name> <operator pos:start="43:27" pos:end="43:27">&amp;</operator> <name pos:start="43:29" pos:end="43:33">flags</name><operator pos:start="43:34" pos:end="43:34">)</operator></expr>)</condition> <block pos:start="43:37" pos:end="105:9">{<block_content pos:start="45:13" pos:end="103:13">

            <if_stmt pos:start="45:13" pos:end="53:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:37">(<expr pos:start="45:17" pos:end="45:36"><name pos:start="45:17" pos:end="45:21">flags</name> <operator pos:start="45:23" pos:end="45:24">==</operator> <name pos:start="45:26" pos:end="45:36">BP_MEM_READ</name></expr>)</condition> <block pos:start="45:39" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:52">

                <expr_stmt pos:start="47:17" pos:end="47:52"><expr pos:start="47:17" pos:end="47:51"><name pos:start="47:17" pos:end="47:25"><name pos:start="47:17" pos:end="47:18">wp</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:25">flags</name></name> <operator pos:start="47:27" pos:end="47:28">|=</operator> <name pos:start="47:30" pos:end="47:51">BP_WATCHPOINT_HIT_READ</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="49:15" pos:end="53:13">else <block pos:start="49:20" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:53">

                <expr_stmt pos:start="51:17" pos:end="51:53"><expr pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:18">wp</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:25">flags</name></name> <operator pos:start="51:27" pos:end="51:28">|=</operator> <name pos:start="51:30" pos:end="51:52">BP_WATCHPOINT_HIT_WRITE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:32"><expr pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:14">wp</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:23">hitaddr</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:31">vaddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:33"><expr pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:14">wp</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:24">hitattrs</name></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:32">attrs</name></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="103:13"><if pos:start="59:13" pos:end="103:13">if <condition pos:start="59:16" pos:end="59:37">(<expr pos:start="59:17" pos:end="59:36"><operator pos:start="59:17" pos:end="59:17">!</operator><name pos:start="59:18" pos:end="59:36"><name pos:start="59:18" pos:end="59:20">cpu</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:36">watchpoint_hit</name></name></expr>)</condition> <block pos:start="59:39" pos:end="103:13">{<block_content pos:start="61:17" pos:end="101:17">

                <if_stmt pos:start="61:17" pos:end="69:17"><if pos:start="61:17" pos:end="69:17">if <condition pos:start="61:20" pos:end="63:57">(<expr pos:start="61:21" pos:end="63:56"><name pos:start="61:21" pos:end="61:29"><name pos:start="61:21" pos:end="61:22">wp</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:29">flags</name></name> <operator pos:start="61:31" pos:end="61:31">&amp;</operator> <name pos:start="61:33" pos:end="61:38">BP_CPU</name> <operator pos:start="61:40" pos:end="61:41">&amp;&amp;</operator>

                    <operator pos:start="63:21" pos:end="63:21">!</operator><call pos:start="63:22" pos:end="63:56"><name pos:start="63:22" pos:end="63:47"><name pos:start="63:22" pos:end="63:23">cc</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:47">debug_check_watchpoint</name></name><argument_list pos:start="63:48" pos:end="63:56">(<argument pos:start="63:49" pos:end="63:51"><expr pos:start="63:49" pos:end="63:51"><name pos:start="63:49" pos:end="63:51">cpu</name></expr></argument>, <argument pos:start="63:54" pos:end="63:55"><expr pos:start="63:54" pos:end="63:55"><name pos:start="63:54" pos:end="63:55">wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:59" pos:end="69:17">{<block_content pos:start="65:21" pos:end="67:29">

                    <expr_stmt pos:start="65:21" pos:end="65:52"><expr pos:start="65:21" pos:end="65:51"><name pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:22">wp</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:29">flags</name></name> <operator pos:start="65:31" pos:end="65:32">&amp;=</operator> <operator pos:start="65:34" pos:end="65:34">~</operator><name pos:start="65:35" pos:end="65:51">BP_WATCHPOINT_HIT</name></expr>;</expr_stmt>

                    <continue pos:start="67:21" pos:end="67:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:41"><expr pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:19">cpu</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:35">watchpoint_hit</name></name> <operator pos:start="71:37" pos:end="71:37">=</operator> <name pos:start="71:39" pos:end="71:40">wp</name></expr>;</expr_stmt>



                <comment type="block" pos:start="75:17" pos:end="81:19">/* The tb_lock will be reset when cpu_loop_exit or

                 * cpu_loop_exit_noexc longjmp back into the cpu_exec

                 * main loop.

                 */</comment>

                <expr_stmt pos:start="83:17" pos:end="83:26"><expr pos:start="83:17" pos:end="83:25"><call pos:start="83:17" pos:end="83:25"><name pos:start="83:17" pos:end="83:23">tb_lock</name><argument_list pos:start="83:24" pos:end="83:25">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:41"><expr pos:start="85:17" pos:end="85:40"><call pos:start="85:17" pos:end="85:40"><name pos:start="85:17" pos:end="85:35">tb_check_watchpoint</name><argument_list pos:start="85:36" pos:end="85:40">(<argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><name pos:start="85:37" pos:end="85:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="87:17" pos:end="101:17"><if pos:start="87:17" pos:end="93:17">if <condition pos:start="87:20" pos:end="87:54">(<expr pos:start="87:21" pos:end="87:53"><name pos:start="87:21" pos:end="87:29"><name pos:start="87:21" pos:end="87:22">wp</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:29">flags</name></name> <operator pos:start="87:31" pos:end="87:31">&amp;</operator> <name pos:start="87:33" pos:end="87:53">BP_STOP_BEFORE_ACCESS</name></expr>)</condition> <block pos:start="87:56" pos:end="93:17">{<block_content pos:start="89:21" pos:end="91:39">

                    <expr_stmt pos:start="89:21" pos:end="89:54"><expr pos:start="89:21" pos:end="89:53"><name pos:start="89:21" pos:end="89:40"><name pos:start="89:21" pos:end="89:23">cpu</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:40">exception_index</name></name> <operator pos:start="89:42" pos:end="89:42">=</operator> <name pos:start="89:44" pos:end="89:53">EXCP_DEBUG</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:39"><expr pos:start="91:21" pos:end="91:38"><call pos:start="91:21" pos:end="91:38"><name pos:start="91:21" pos:end="91:33">cpu_loop_exit</name><argument_list pos:start="91:34" pos:end="91:38">(<argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="93:19" pos:end="101:17">else <block pos:start="93:24" pos:end="101:17">{<block_content pos:start="95:21" pos:end="99:45">

                    <expr_stmt pos:start="95:21" pos:end="95:73"><expr pos:start="95:21" pos:end="95:72"><call pos:start="95:21" pos:end="95:72"><name pos:start="95:21" pos:end="95:40">cpu_get_tb_cpu_state</name><argument_list pos:start="95:41" pos:end="95:72">(<argument pos:start="95:42" pos:end="95:44"><expr pos:start="95:42" pos:end="95:44"><name pos:start="95:42" pos:end="95:44">env</name></expr></argument>, <argument pos:start="95:47" pos:end="95:49"><expr pos:start="95:47" pos:end="95:49"><operator pos:start="95:47" pos:end="95:47">&amp;</operator><name pos:start="95:48" pos:end="95:49">pc</name></expr></argument>, <argument pos:start="95:52" pos:end="95:59"><expr pos:start="95:52" pos:end="95:59"><operator pos:start="95:52" pos:end="95:52">&amp;</operator><name pos:start="95:53" pos:end="95:59">cs_base</name></expr></argument>, <argument pos:start="95:62" pos:end="95:71"><expr pos:start="95:62" pos:end="95:71"><operator pos:start="95:62" pos:end="95:62">&amp;</operator><name pos:start="95:63" pos:end="95:71">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:64"><expr pos:start="97:21" pos:end="97:63"><call pos:start="97:21" pos:end="97:63"><name pos:start="97:21" pos:end="97:31">tb_gen_code</name><argument_list pos:start="97:32" pos:end="97:63">(<argument pos:start="97:33" pos:end="97:35"><expr pos:start="97:33" pos:end="97:35"><name pos:start="97:33" pos:end="97:35">cpu</name></expr></argument>, <argument pos:start="97:38" pos:end="97:39"><expr pos:start="97:38" pos:end="97:39"><name pos:start="97:38" pos:end="97:39">pc</name></expr></argument>, <argument pos:start="97:42" pos:end="97:48"><expr pos:start="97:42" pos:end="97:48"><name pos:start="97:42" pos:end="97:48">cs_base</name></expr></argument>, <argument pos:start="97:51" pos:end="97:59"><expr pos:start="97:51" pos:end="97:59"><name pos:start="97:51" pos:end="97:59">cpu_flags</name></expr></argument>, <argument pos:start="97:62" pos:end="97:62"><expr pos:start="97:62" pos:end="97:62"><literal type="number" pos:start="97:62" pos:end="97:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:45"><expr pos:start="99:21" pos:end="99:44"><call pos:start="99:21" pos:end="99:44"><name pos:start="99:21" pos:end="99:39">cpu_loop_exit_noexc</name><argument_list pos:start="99:40" pos:end="99:44">(<argument pos:start="99:41" pos:end="99:43"><expr pos:start="99:41" pos:end="99:43"><name pos:start="99:41" pos:end="99:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="109:9">else <block pos:start="105:16" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:44">

            <expr_stmt pos:start="107:13" pos:end="107:44"><expr pos:start="107:13" pos:end="107:43"><name pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:14">wp</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:21">flags</name></name> <operator pos:start="107:23" pos:end="107:24">&amp;=</operator> <operator pos:start="107:26" pos:end="107:26">~</operator><name pos:start="107:27" pos:end="107:43">BP_WATCHPOINT_HIT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
