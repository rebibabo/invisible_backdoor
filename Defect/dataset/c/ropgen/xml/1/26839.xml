<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26839.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">synth_block_fcb_acb</name><parameter_list pos:start="1:32" pos:end="9:50">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:47">WMAVoiceContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:69"><decl pos:start="1:53" pos:end="1:69"><type pos:start="1:53" pos:end="1:69"><name pos:start="1:53" pos:end="1:65">GetBitContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">gb</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:45">block_idx</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:55"><decl pos:start="3:48" pos:end="3:55"><type pos:start="3:48" pos:end="3:55"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:55">size</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:51"><decl pos:start="5:33" pos:end="5:51"><type pos:start="5:33" pos:end="5:51"><name pos:start="5:33" pos:end="5:35">int</name></type> <name pos:start="5:37" pos:end="5:51">block_pitch_sh2</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:72"><decl pos:start="7:33" pos:end="7:72"><type pos:start="7:33" pos:end="7:72"><specifier pos:start="7:33" pos:end="7:37">const</specifier> <name pos:start="7:39" pos:end="7:60"><name pos:start="7:39" pos:end="7:44">struct</name> <name pos:start="7:46" pos:end="7:60">frame_type_desc</name></name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:72">frame_desc</name></decl></parameter>,

                                <parameter pos:start="9:33" pos:end="9:49"><decl pos:start="9:33" pos:end="9:49"><type pos:start="9:33" pos:end="9:49"><name pos:start="9:33" pos:end="9:37">float</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:49">excitation</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="213:1">{<block_content pos:start="13:5" pos:end="211:54">

    <decl_stmt pos:start="13:5" pos:end="17:6"><decl pos:start="13:5" pos:end="17:5"><type pos:start="13:5" pos:end="13:22"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <specifier pos:start="13:12" pos:end="13:16">const</specifier> <name pos:start="13:18" pos:end="13:22">float</name></type> <name pos:start="13:24" pos:end="13:36"><name pos:start="13:24" pos:end="13:33">gain_coeff</name><index pos:start="13:34" pos:end="13:36">[<expr pos:start="13:35" pos:end="13:35"><literal type="number" pos:start="13:35" pos:end="13:35">6</literal></expr>]</index></name> <init pos:start="13:38" pos:end="17:5">= <expr pos:start="13:40" pos:end="17:5"><block pos:start="13:40" pos:end="17:5">{

        <expr pos:start="15:9" pos:end="15:14"><literal type="number" pos:start="15:9" pos:end="15:14">0.8169</literal></expr>, <expr pos:start="15:17" pos:end="15:24"><operator pos:start="15:17" pos:end="15:17">-</operator><literal type="number" pos:start="15:18" pos:end="15:24">0.06545</literal></expr>, <expr pos:start="15:27" pos:end="15:32"><literal type="number" pos:start="15:27" pos:end="15:32">0.1726</literal></expr>, <expr pos:start="15:35" pos:end="15:40"><literal type="number" pos:start="15:35" pos:end="15:40">0.0185</literal></expr>, <expr pos:start="15:43" pos:end="15:49"><operator pos:start="15:43" pos:end="15:43">-</operator><literal type="number" pos:start="15:44" pos:end="15:49">0.0359</literal></expr>, <expr pos:start="15:52" pos:end="15:57"><literal type="number" pos:start="15:52" pos:end="15:57">0.0458</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:66"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:35"><name pos:start="19:11" pos:end="19:16">pulses</name><index pos:start="19:17" pos:end="19:35">[<expr pos:start="19:18" pos:end="19:34"><name pos:start="19:18" pos:end="19:30">MAX_FRAMESIZE</name> <operator pos:start="19:32" pos:end="19:32">/</operator> <literal type="number" pos:start="19:34" pos:end="19:34">2</literal></expr>]</index></name></decl>, <decl pos:start="19:38" pos:end="19:45"><type ref="prev" pos:start="19:5" pos:end="19:9"/><name pos:start="19:38" pos:end="19:45">pred_err</name></decl>, <decl pos:start="19:48" pos:end="19:55"><type ref="prev" pos:start="19:5" pos:end="19:9"/><name pos:start="19:48" pos:end="19:55">acb_gain</name></decl>, <decl pos:start="19:58" pos:end="19:65"><type ref="prev" pos:start="19:5" pos:end="19:9"/><name pos:start="19:58" pos:end="19:65">fcb_gain</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">n</name></decl>, <decl pos:start="21:12" pos:end="21:14"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:14">idx</name></decl>, <decl pos:start="21:17" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:17" pos:end="21:27">gain_weight</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">AMRFixed</name></type> <name pos:start="23:14" pos:end="23:16">fcb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><call pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:37">(<argument pos:start="27:12" pos:end="27:36"><expr pos:start="27:12" pos:end="27:36"><name pos:start="27:12" pos:end="27:15">size</name> <operator pos:start="27:17" pos:end="27:18">&lt;=</operator> <name pos:start="27:20" pos:end="27:32">MAX_FRAMESIZE</name> <operator pos:start="27:34" pos:end="27:34">/</operator> <literal type="number" pos:start="27:36" pos:end="27:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><call pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:10">memset</name><argument_list pos:start="29:11" pos:end="29:45">(<argument pos:start="29:12" pos:end="29:17"><expr pos:start="29:12" pos:end="29:17"><name pos:start="29:12" pos:end="29:17">pulses</name></expr></argument>, <argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr></argument>, <argument pos:start="29:23" pos:end="29:44"><expr pos:start="29:23" pos:end="29:44"><sizeof pos:start="29:23" pos:end="29:37">sizeof<argument_list pos:start="29:29" pos:end="29:37">(<argument pos:start="29:30" pos:end="29:36"><expr pos:start="29:30" pos:end="29:36"><operator pos:start="29:30" pos:end="29:30">*</operator><name pos:start="29:31" pos:end="29:36">pulses</name></expr></argument>)</argument_list></sizeof> <operator pos:start="29:39" pos:end="29:39">*</operator> <name pos:start="29:41" pos:end="29:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:7">fcb</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:17">pitch_lag</name></name>      <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:40">block_pitch_sh2</name> <operator pos:start="33:42" pos:end="33:43">&gt;&gt;</operator> <literal type="number" pos:start="33:45" pos:end="33:45">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:7">fcb</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:17">pitch_fac</name></name>      <operator pos:start="35:24" pos:end="35:24">=</operator> <literal type="number" pos:start="35:26" pos:end="35:28">1.0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:7">fcb</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:22">no_repeat_mask</name></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:27"><expr pos:start="39:5" pos:end="39:26"><name pos:start="39:5" pos:end="39:9"><name pos:start="39:5" pos:end="39:7">fcb</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:9">n</name></name>              <operator pos:start="39:24" pos:end="39:24">=</operator> <literal type="number" pos:start="39:26" pos:end="39:26">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:55">/* For the other frame types, this is where we apply the innovation

     * (fixed) codebook pulses of the speech signal. */</comment>

    <if_stmt pos:start="47:5" pos:end="93:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:51">(<expr pos:start="47:9" pos:end="47:50"><name pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:18">frame_desc</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:28">fcb_type</name></name> <operator pos:start="47:30" pos:end="47:31">==</operator> <name pos:start="47:33" pos:end="47:50">FCB_TYPE_AW_PULSES</name></expr>)</condition> <block pos:start="47:53" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:46">

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><call pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:21">aw_pulse_set1</name><argument_list pos:start="49:22" pos:end="49:45">(<argument pos:start="49:23" pos:end="49:23"><expr pos:start="49:23" pos:end="49:23"><name pos:start="49:23" pos:end="49:23">s</name></expr></argument>, <argument pos:start="49:26" pos:end="49:27"><expr pos:start="49:26" pos:end="49:27"><name pos:start="49:26" pos:end="49:27">gb</name></expr></argument>, <argument pos:start="49:30" pos:end="49:38"><expr pos:start="49:30" pos:end="49:38"><name pos:start="49:30" pos:end="49:38">block_idx</name></expr></argument>, <argument pos:start="49:41" pos:end="49:44"><expr pos:start="49:41" pos:end="49:44"><operator pos:start="49:41" pos:end="49:41">&amp;</operator><name pos:start="49:42" pos:end="49:44">fcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><call pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:21">aw_pulse_set2</name><argument_list pos:start="51:22" pos:end="51:45">(<argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><name pos:start="51:23" pos:end="51:23">s</name></expr></argument>, <argument pos:start="51:26" pos:end="51:27"><expr pos:start="51:26" pos:end="51:27"><name pos:start="51:26" pos:end="51:27">gb</name></expr></argument>, <argument pos:start="51:30" pos:end="51:38"><expr pos:start="51:30" pos:end="51:38"><name pos:start="51:30" pos:end="51:38">block_idx</name></expr></argument>, <argument pos:start="51:41" pos:end="51:44"><expr pos:start="51:41" pos:end="51:44"><operator pos:start="51:41" pos:end="51:41">&amp;</operator><name pos:start="51:42" pos:end="51:44">fcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="93:5">else <comment type="block" pos:start="53:12" pos:end="53:36">/* FCB_TYPE_EXC_PULSES */</comment> <block pos:start="53:38" pos:end="93:5">{<block_content pos:start="55:9" pos:end="91:9">

        <decl_stmt pos:start="55:9" pos:end="55:56"><decl pos:start="55:9" pos:end="55:55"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:24">offset_nbits</name> <init pos:start="55:26" pos:end="55:55">= <expr pos:start="55:28" pos:end="55:55"><literal type="number" pos:start="55:28" pos:end="55:30">5</literal> <operator pos:start="55:30" pos:end="55:30">-</operator> <name pos:start="55:32" pos:end="55:55"><name pos:start="55:32" pos:end="55:41">frame_desc</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:55">log_n_blocks</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:32"><expr pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:11">fcb</name><operator pos:start="59:12" pos:end="59:12">.</operator><name pos:start="59:13" pos:end="59:26">no_repeat_mask</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <operator pos:start="59:30" pos:end="59:30">-</operator><literal type="number" pos:start="59:31" pos:end="59:31">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="61:9" pos:end="63:56">/* similar to ff_decode_10_pulses_35bits(), but with single pulses

         * (instead of double) for a subset of pulses */</comment>

        <for pos:start="65:9" pos:end="91:9">for <control pos:start="65:13" pos:end="65:31">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">n</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:25"><name pos:start="65:21" pos:end="65:21">n</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <literal type="number" pos:start="65:25" pos:end="65:25">5</literal></expr>;</condition> <incr pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:28">n</name><operator pos:start="65:29" pos:end="65:30">++</operator></expr></incr>)</control> <block pos:start="65:33" pos:end="91:9">{<block_content pos:start="67:13" pos:end="89:13">

            <decl_stmt pos:start="67:13" pos:end="67:23"><decl pos:start="67:13" pos:end="67:22"><type pos:start="67:13" pos:end="67:17"><name pos:start="67:13" pos:end="67:17">float</name></type> <name pos:start="67:19" pos:end="67:22">sign</name></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:27"><decl pos:start="69:13" pos:end="69:20"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:20">pos1</name></decl>, <decl pos:start="69:23" pos:end="69:26"><type ref="prev" pos:start="69:13" pos:end="69:15"/><name pos:start="69:23" pos:end="69:26">pos2</name></decl>;</decl_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:56"><expr pos:start="73:13" pos:end="73:55"><name pos:start="73:13" pos:end="73:16">sign</name>           <operator pos:start="73:28" pos:end="73:28">=</operator> <ternary pos:start="73:30" pos:end="73:55"><condition pos:start="73:30" pos:end="73:44"><expr pos:start="73:30" pos:end="73:42"><call pos:start="73:30" pos:end="73:42"><name pos:start="73:30" pos:end="73:38">get_bits1</name><argument_list pos:start="73:39" pos:end="73:42">(<argument pos:start="73:40" pos:end="73:41"><expr pos:start="73:40" pos:end="73:41"><name pos:start="73:40" pos:end="73:41">gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="73:46" pos:end="73:48"> <expr pos:start="73:46" pos:end="73:48"><literal type="number" pos:start="73:46" pos:end="73:48">1.0</literal></expr> </then><else pos:start="73:50" pos:end="73:55">: <expr pos:start="73:52" pos:end="73:55"><operator pos:start="73:52" pos:end="73:52">-</operator><literal type="number" pos:start="73:53" pos:end="73:55">1.0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:56"><expr pos:start="75:13" pos:end="75:55"><name pos:start="75:13" pos:end="75:16">pos1</name>           <operator pos:start="75:28" pos:end="75:28">=</operator> <call pos:start="75:30" pos:end="75:55"><name pos:start="75:30" pos:end="75:37">get_bits</name><argument_list pos:start="75:38" pos:end="75:55">(<argument pos:start="75:39" pos:end="75:40"><expr pos:start="75:39" pos:end="75:40"><name pos:start="75:39" pos:end="75:40">gb</name></expr></argument>, <argument pos:start="75:43" pos:end="75:54"><expr pos:start="75:43" pos:end="75:54"><name pos:start="75:43" pos:end="75:54">offset_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:42"><expr pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:15">fcb</name><operator pos:start="77:16" pos:end="77:16">.</operator><name pos:start="77:17" pos:end="77:17">x</name><index pos:start="77:18" pos:end="77:24">[<expr pos:start="77:19" pos:end="77:23"><name pos:start="77:19" pos:end="77:23"><name pos:start="77:19" pos:end="77:21">fcb</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:23">n</name></name></expr>]</index></name>   <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:30">n</name> <operator pos:start="77:32" pos:end="77:32">+</operator> <literal type="number" pos:start="77:34" pos:end="77:34">5</literal> <operator pos:start="77:36" pos:end="77:36">*</operator> <name pos:start="77:38" pos:end="77:41">pos1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:34"><expr pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:15">fcb</name><operator pos:start="79:16" pos:end="79:16">.</operator><name pos:start="79:17" pos:end="79:17">y</name><index pos:start="79:18" pos:end="79:26">[<expr pos:start="79:19" pos:end="79:25"><name pos:start="79:19" pos:end="79:23"><name pos:start="79:19" pos:end="79:21">fcb</name><operator pos:start="79:22" pos:end="79:22">.</operator><name pos:start="79:23" pos:end="79:23">n</name></name><operator pos:start="79:24" pos:end="79:25">++</operator></expr>]</index></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <name pos:start="79:30" pos:end="79:33">sign</name></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="89:13"><if pos:start="81:13" pos:end="89:13">if <condition pos:start="81:16" pos:end="81:43">(<expr pos:start="81:17" pos:end="81:42"><name pos:start="81:17" pos:end="81:17">n</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <name pos:start="81:21" pos:end="81:42"><name pos:start="81:21" pos:end="81:30">frame_desc</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:42">dbl_pulses</name></name></expr>)</condition> <block pos:start="81:45" pos:end="89:13">{<block_content pos:start="83:17" pos:end="87:62">

                <expr_stmt pos:start="83:17" pos:end="83:60"><expr pos:start="83:17" pos:end="83:59"><name pos:start="83:17" pos:end="83:20">pos2</name>           <operator pos:start="83:32" pos:end="83:32">=</operator> <call pos:start="83:34" pos:end="83:59"><name pos:start="83:34" pos:end="83:41">get_bits</name><argument_list pos:start="83:42" pos:end="83:59">(<argument pos:start="83:43" pos:end="83:44"><expr pos:start="83:43" pos:end="83:44"><name pos:start="83:43" pos:end="83:44">gb</name></expr></argument>, <argument pos:start="83:47" pos:end="83:58"><expr pos:start="83:47" pos:end="83:58"><name pos:start="83:47" pos:end="83:58">offset_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:46"><expr pos:start="85:17" pos:end="85:45"><name pos:start="85:17" pos:end="85:28"><name pos:start="85:17" pos:end="85:19">fcb</name><operator pos:start="85:20" pos:end="85:20">.</operator><name pos:start="85:21" pos:end="85:21">x</name><index pos:start="85:22" pos:end="85:28">[<expr pos:start="85:23" pos:end="85:27"><name pos:start="85:23" pos:end="85:27"><name pos:start="85:23" pos:end="85:25">fcb</name><operator pos:start="85:26" pos:end="85:26">.</operator><name pos:start="85:27" pos:end="85:27">n</name></name></expr>]</index></name>   <operator pos:start="85:32" pos:end="85:32">=</operator> <name pos:start="85:34" pos:end="85:34">n</name> <operator pos:start="85:36" pos:end="85:36">+</operator> <literal type="number" pos:start="85:38" pos:end="85:38">5</literal> <operator pos:start="85:40" pos:end="85:40">*</operator> <name pos:start="85:42" pos:end="85:45">pos2</name></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:62"><expr pos:start="87:17" pos:end="87:61"><name pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:19">fcb</name><operator pos:start="87:20" pos:end="87:20">.</operator><name pos:start="87:21" pos:end="87:21">y</name><index pos:start="87:22" pos:end="87:30">[<expr pos:start="87:23" pos:end="87:29"><name pos:start="87:23" pos:end="87:27"><name pos:start="87:23" pos:end="87:25">fcb</name><operator pos:start="87:26" pos:end="87:26">.</operator><name pos:start="87:27" pos:end="87:27">n</name></name><operator pos:start="87:28" pos:end="87:29">++</operator></expr>]</index></name> <operator pos:start="87:32" pos:end="87:32">=</operator> <ternary pos:start="87:34" pos:end="87:61"><condition pos:start="87:34" pos:end="87:48"><expr pos:start="87:34" pos:end="87:46"><operator pos:start="87:34" pos:end="87:34">(</operator><name pos:start="87:35" pos:end="87:38">pos1</name> <operator pos:start="87:40" pos:end="87:40">&lt;</operator> <name pos:start="87:42" pos:end="87:45">pos2</name><operator pos:start="87:46" pos:end="87:46">)</operator></expr> ?</condition><then pos:start="87:50" pos:end="87:54"> <expr pos:start="87:50" pos:end="87:54"><operator pos:start="87:50" pos:end="87:50">-</operator><name pos:start="87:51" pos:end="87:54">sign</name></expr> </then><else pos:start="87:56" pos:end="87:61">: <expr pos:start="87:58" pos:end="87:61"><name pos:start="87:58" pos:end="87:61">sign</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:49"><expr pos:start="95:5" pos:end="95:48"><call pos:start="95:5" pos:end="95:48"><name pos:start="95:5" pos:end="95:23">ff_set_fixed_vector</name><argument_list pos:start="95:24" pos:end="95:48">(<argument pos:start="95:25" pos:end="95:30"><expr pos:start="95:25" pos:end="95:30"><name pos:start="95:25" pos:end="95:30">pulses</name></expr></argument>, <argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><operator pos:start="95:33" pos:end="95:33">&amp;</operator><name pos:start="95:34" pos:end="95:36">fcb</name></expr></argument>, <argument pos:start="95:39" pos:end="95:41"><expr pos:start="95:39" pos:end="95:41"><literal type="number" pos:start="95:39" pos:end="95:41">1.0</literal></expr></argument>, <argument pos:start="95:44" pos:end="95:47"><expr pos:start="95:44" pos:end="95:47"><name pos:start="95:44" pos:end="95:47">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="101:38">/* Calculate gain for adaptive &amp; fixed codebook signal.

     * see ff_amr_set_fixed_gain(). */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:26"><expr pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:7">idx</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="103:25"><name pos:start="103:11" pos:end="103:18">get_bits</name><argument_list pos:start="103:19" pos:end="103:25">(<argument pos:start="103:20" pos:end="103:21"><expr pos:start="103:20" pos:end="103:21"><name pos:start="103:20" pos:end="103:21">gb</name></expr></argument>, <argument pos:start="103:24" pos:end="103:24"><expr pos:start="103:24" pos:end="103:24"><literal type="number" pos:start="103:24" pos:end="103:24">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="109:68"><expr pos:start="105:5" pos:end="109:67"><name pos:start="105:5" pos:end="105:12">fcb_gain</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="109:67"><name pos:start="105:16" pos:end="105:19">expf</name><argument_list pos:start="105:20" pos:end="109:67">(<argument pos:start="105:21" pos:end="109:66"><expr pos:start="105:21" pos:end="109:66"><call pos:start="105:21" pos:end="107:63"><name pos:start="105:21" pos:end="105:48">avpriv_scalarproduct_float_c</name><argument_list pos:start="105:49" pos:end="107:63">(<argument pos:start="105:50" pos:end="105:65"><expr pos:start="105:50" pos:end="105:65"><name pos:start="105:50" pos:end="105:65"><name pos:start="105:50" pos:end="105:50">s</name><operator pos:start="105:51" pos:end="105:52">-&gt;</operator><name pos:start="105:53" pos:end="105:65">gain_pred_err</name></name></expr></argument>,

                                                 <argument pos:start="107:50" pos:end="107:59"><expr pos:start="107:50" pos:end="107:59"><name pos:start="107:50" pos:end="107:59">gain_coeff</name></expr></argument>, <argument pos:start="107:62" pos:end="107:62"><expr pos:start="107:62" pos:end="107:62"><literal type="number" pos:start="107:62" pos:end="107:62">6</literal></expr></argument>)</argument_list></call> <operator pos:start="107:65" pos:end="107:65">-</operator>

                    <literal type="number" pos:start="109:21" pos:end="109:34">5.2409161640</literal> <operator pos:start="109:34" pos:end="109:34">+</operator> <name pos:start="109:36" pos:end="109:66"><name pos:start="109:36" pos:end="109:61">wmavoice_gain_codebook_fcb</name><index pos:start="109:62" pos:end="109:66">[<expr pos:start="109:63" pos:end="109:65"><name pos:start="109:63" pos:end="109:65">idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:47"><expr pos:start="111:5" pos:end="111:46"><name pos:start="111:5" pos:end="111:12">acb_gain</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <name pos:start="111:16" pos:end="111:46"><name pos:start="111:16" pos:end="111:41">wmavoice_gain_codebook_acb</name><index pos:start="111:42" pos:end="111:46">[<expr pos:start="111:43" pos:end="111:45"><name pos:start="111:43" pos:end="111:45">idx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="117:55"><expr pos:start="113:5" pos:end="117:54"><name pos:start="113:5" pos:end="113:12">pred_err</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="117:54"><name pos:start="113:16" pos:end="113:23">av_clipf</name><argument_list pos:start="113:24" pos:end="117:54">(<argument pos:start="113:25" pos:end="113:55"><expr pos:start="113:25" pos:end="113:55"><name pos:start="113:25" pos:end="113:55"><name pos:start="113:25" pos:end="113:50">wmavoice_gain_codebook_fcb</name><index pos:start="113:51" pos:end="113:55">[<expr pos:start="113:52" pos:end="113:54"><name pos:start="113:52" pos:end="113:54">idx</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="115:25" pos:end="115:37"><expr pos:start="115:25" pos:end="115:37"><operator pos:start="115:25" pos:end="115:25">-</operator><literal type="number" pos:start="115:26" pos:end="115:37">2.9957322736</literal></expr></argument> <comment type="block" pos:start="115:39" pos:end="115:53">/* log(0.05) */</comment>,

                         <argument pos:start="117:26" pos:end="117:37"><expr pos:start="117:26" pos:end="117:37"><literal type="number" pos:start="117:26" pos:end="117:37">1.6094379124</literal></expr></argument> <comment type="block" pos:start="117:39" pos:end="117:53">/* log(5.0)  */</comment>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:48"><expr pos:start="121:5" pos:end="121:47"><name pos:start="121:5" pos:end="121:15">gain_weight</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <literal type="number" pos:start="121:19" pos:end="121:19">8</literal> <operator pos:start="121:21" pos:end="121:22">&gt;&gt;</operator> <name pos:start="121:24" pos:end="121:47"><name pos:start="121:24" pos:end="121:33">frame_desc</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:47">log_n_blocks</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="125:59"><expr pos:start="123:5" pos:end="125:58"><call pos:start="123:5" pos:end="125:58"><name pos:start="123:5" pos:end="123:11">memmove</name><argument_list pos:start="123:12" pos:end="125:58">(<argument pos:start="123:13" pos:end="123:42"><expr pos:start="123:13" pos:end="123:42"><operator pos:start="123:13" pos:end="123:13">&amp;</operator><name pos:start="123:14" pos:end="123:42"><name pos:start="123:14" pos:end="123:14">s</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:29">gain_pred_err</name><index pos:start="123:30" pos:end="123:42">[<expr pos:start="123:31" pos:end="123:41"><name pos:start="123:31" pos:end="123:41">gain_weight</name></expr>]</index></name></expr></argument>, <argument pos:start="123:45" pos:end="123:60"><expr pos:start="123:45" pos:end="123:60"><name pos:start="123:45" pos:end="123:60"><name pos:start="123:45" pos:end="123:45">s</name><operator pos:start="123:46" pos:end="123:47">-&gt;</operator><name pos:start="123:48" pos:end="123:60">gain_pred_err</name></name></expr></argument>,

            <argument pos:start="125:13" pos:end="125:57"><expr pos:start="125:13" pos:end="125:57"><sizeof pos:start="125:13" pos:end="125:37">sizeof<argument_list pos:start="125:19" pos:end="125:37">(<argument pos:start="125:20" pos:end="125:36"><expr pos:start="125:20" pos:end="125:36"><operator pos:start="125:20" pos:end="125:20">*</operator><name pos:start="125:21" pos:end="125:36"><name pos:start="125:21" pos:end="125:21">s</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:36">gain_pred_err</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="125:39" pos:end="125:39">*</operator> <operator pos:start="125:41" pos:end="125:41">(</operator><literal type="number" pos:start="125:42" pos:end="125:44">6</literal> <operator pos:start="125:44" pos:end="125:44">-</operator> <name pos:start="125:46" pos:end="125:56">gain_weight</name><operator pos:start="125:57" pos:end="125:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="127:5" pos:end="129:39">for <control pos:start="127:9" pos:end="127:37">(<init pos:start="127:10" pos:end="127:15"><expr pos:start="127:10" pos:end="127:14"><name pos:start="127:10" pos:end="127:10">n</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>;</init> <condition pos:start="127:17" pos:end="127:32"><expr pos:start="127:17" pos:end="127:31"><name pos:start="127:17" pos:end="127:17">n</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <name pos:start="127:21" pos:end="127:31">gain_weight</name></expr>;</condition> <incr pos:start="127:34" pos:end="127:36"><expr pos:start="127:34" pos:end="127:36"><name pos:start="127:34" pos:end="127:34">n</name><operator pos:start="127:35" pos:end="127:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:9" pos:end="129:39"><block_content pos:start="129:9" pos:end="129:39">

        <expr_stmt pos:start="129:9" pos:end="129:39"><expr pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:24">gain_pred_err</name><index pos:start="129:25" pos:end="129:27">[<expr pos:start="129:26" pos:end="129:26"><name pos:start="129:26" pos:end="129:26">n</name></expr>]</index></name> <operator pos:start="129:29" pos:end="129:29">=</operator> <name pos:start="129:31" pos:end="129:38">pred_err</name></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="133:5" pos:end="133:42">/* Calculation of adaptive codebook */</comment>

    <if_stmt pos:start="135:5" pos:end="203:5"><if pos:start="135:5" pos:end="183:5">if <condition pos:start="135:8" pos:end="135:52">(<expr pos:start="135:9" pos:end="135:51"><name pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:18">frame_desc</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:28">acb_type</name></name> <operator pos:start="135:30" pos:end="135:31">==</operator> <name pos:start="135:33" pos:end="135:51">ACB_TYPE_ASYMMETRIC</name></expr>)</condition> <block pos:start="135:54" pos:end="183:5">{<block_content pos:start="137:9" pos:end="181:9">

        <decl_stmt pos:start="137:9" pos:end="137:16"><decl pos:start="137:9" pos:end="137:15"><type pos:start="137:9" pos:end="137:11"><name pos:start="137:9" pos:end="137:11">int</name></type> <name pos:start="137:13" pos:end="137:15">len</name></decl>;</decl_stmt>

        <for pos:start="139:9" pos:end="181:9">for <control pos:start="139:13" pos:end="139:39">(<init pos:start="139:14" pos:end="139:19"><expr pos:start="139:14" pos:end="139:18"><name pos:start="139:14" pos:end="139:14">n</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>;</init> <condition pos:start="139:21" pos:end="139:29"><expr pos:start="139:21" pos:end="139:28"><name pos:start="139:21" pos:end="139:21">n</name> <operator pos:start="139:23" pos:end="139:23">&lt;</operator> <name pos:start="139:25" pos:end="139:28">size</name></expr>;</condition> <incr pos:start="139:31" pos:end="139:38"><expr pos:start="139:31" pos:end="139:38"><name pos:start="139:31" pos:end="139:31">n</name> <operator pos:start="139:33" pos:end="139:34">+=</operator> <name pos:start="139:36" pos:end="139:38">len</name></expr></incr>)</control> <block pos:start="139:41" pos:end="181:9">{<block_content pos:start="141:13" pos:end="179:47">

            <decl_stmt pos:start="141:13" pos:end="141:30"><decl pos:start="141:13" pos:end="141:29"><type pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:15">int</name></type> <name pos:start="141:17" pos:end="141:29">next_idx_sh16</name></decl>;</decl_stmt>

            <decl_stmt pos:start="143:13" pos:end="143:50"><decl pos:start="143:13" pos:end="143:49"><type pos:start="143:13" pos:end="143:15"><name pos:start="143:13" pos:end="143:15">int</name></type> <name pos:start="143:17" pos:end="143:23">abs_idx</name>    <init pos:start="143:28" pos:end="143:49">= <expr pos:start="143:30" pos:end="143:49"><name pos:start="143:30" pos:end="143:38">block_idx</name> <operator pos:start="143:40" pos:end="143:40">*</operator> <name pos:start="143:42" pos:end="143:45">size</name> <operator pos:start="143:47" pos:end="143:47">+</operator> <name pos:start="143:49" pos:end="143:49">n</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="145:13" pos:end="147:58"><decl pos:start="145:13" pos:end="147:57"><type pos:start="145:13" pos:end="145:15"><name pos:start="145:13" pos:end="145:15">int</name></type> <name pos:start="145:17" pos:end="145:26">pitch_sh16</name> <init pos:start="145:28" pos:end="147:57">= <expr pos:start="145:30" pos:end="147:57"><operator pos:start="145:30" pos:end="145:30">(</operator><name pos:start="145:31" pos:end="145:47"><name pos:start="145:31" pos:end="145:31">s</name><operator pos:start="145:32" pos:end="145:33">-&gt;</operator><name pos:start="145:34" pos:end="145:47">last_pitch_val</name></name> <operator pos:start="145:49" pos:end="145:50">&lt;&lt;</operator> <literal type="number" pos:start="145:52" pos:end="145:53">16</literal><operator pos:start="145:54" pos:end="145:54">)</operator> <operator pos:start="145:56" pos:end="145:56">+</operator>

                             <name pos:start="147:30" pos:end="147:47"><name pos:start="147:30" pos:end="147:30">s</name><operator pos:start="147:31" pos:end="147:32">-&gt;</operator><name pos:start="147:33" pos:end="147:47">pitch_diff_sh16</name></name> <operator pos:start="147:49" pos:end="147:49">*</operator> <name pos:start="147:51" pos:end="147:57">abs_idx</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="149:13" pos:end="149:57"><decl pos:start="149:13" pos:end="149:56"><type pos:start="149:13" pos:end="149:15"><name pos:start="149:13" pos:end="149:15">int</name></type> <name pos:start="149:17" pos:end="149:21">pitch</name>      <init pos:start="149:28" pos:end="149:56">= <expr pos:start="149:30" pos:end="149:56"><operator pos:start="149:30" pos:end="149:30">(</operator><name pos:start="149:31" pos:end="149:40">pitch_sh16</name> <operator pos:start="149:42" pos:end="149:42">+</operator> <literal type="number" pos:start="149:44" pos:end="149:49">0x6FFF</literal><operator pos:start="149:50" pos:end="149:50">)</operator> <operator pos:start="149:52" pos:end="149:53">&gt;&gt;</operator> <literal type="number" pos:start="149:55" pos:end="149:56">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="151:13" pos:end="151:72"><decl pos:start="151:13" pos:end="151:71"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:24">idx_sh16</name>   <init pos:start="151:28" pos:end="151:71">= <expr pos:start="151:30" pos:end="151:71"><operator pos:start="151:30" pos:end="151:30">(</operator><operator pos:start="151:31" pos:end="151:31">(</operator><name pos:start="151:32" pos:end="151:36">pitch</name> <operator pos:start="151:38" pos:end="151:39">&lt;&lt;</operator> <literal type="number" pos:start="151:41" pos:end="151:42">16</literal><operator pos:start="151:43" pos:end="151:43">)</operator> <operator pos:start="151:45" pos:end="151:45">-</operator> <name pos:start="151:47" pos:end="151:56">pitch_sh16</name><operator pos:start="151:57" pos:end="151:57">)</operator> <operator pos:start="151:59" pos:end="151:59">*</operator> <literal type="number" pos:start="151:61" pos:end="151:63">8</literal> <operator pos:start="151:63" pos:end="151:63">+</operator> <literal type="number" pos:start="151:65" pos:end="151:71">0x58000</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:44"><expr pos:start="153:13" pos:end="153:43"><name pos:start="153:13" pos:end="153:15">idx</name>            <operator pos:start="153:28" pos:end="153:28">=</operator> <name pos:start="153:30" pos:end="153:37">idx_sh16</name> <operator pos:start="153:39" pos:end="153:40">&gt;&gt;</operator> <literal type="number" pos:start="153:42" pos:end="153:43">16</literal></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="171:27"><if pos:start="155:13" pos:end="169:13">if <condition pos:start="155:16" pos:end="155:35">(<expr pos:start="155:17" pos:end="155:34"><name pos:start="155:17" pos:end="155:34"><name pos:start="155:17" pos:end="155:17">s</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:34">pitch_diff_sh16</name></name></expr>)</condition> <block pos:start="155:37" pos:end="169:13">{<block_content pos:start="157:17" pos:end="167:43">

                <if_stmt pos:start="157:17" pos:end="163:67"><if pos:start="157:17" pos:end="161:17">if <condition pos:start="157:20" pos:end="157:43">(<expr pos:start="157:21" pos:end="157:42"><name pos:start="157:21" pos:end="157:38"><name pos:start="157:21" pos:end="157:21">s</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:38">pitch_diff_sh16</name></name> <operator pos:start="157:40" pos:end="157:40">&gt;</operator> <literal type="number" pos:start="157:42" pos:end="157:42">0</literal></expr>)</condition> <block pos:start="157:45" pos:end="161:17">{<block_content pos:start="159:21" pos:end="159:57">

                    <expr_stmt pos:start="159:21" pos:end="159:57"><expr pos:start="159:21" pos:end="159:56"><name pos:start="159:21" pos:end="159:33">next_idx_sh16</name> <operator pos:start="159:35" pos:end="159:35">=</operator> <operator pos:start="159:37" pos:end="159:37">(</operator><name pos:start="159:38" pos:end="159:45">idx_sh16</name><operator pos:start="159:46" pos:end="159:46">)</operator> <operator pos:start="159:48" pos:end="159:48">&amp;</operator><operator pos:start="159:49" pos:end="159:49">~</operator> <literal type="number" pos:start="159:51" pos:end="159:56">0xFFFF</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="161:19" pos:end="163:67">else<block type="pseudo" pos:start="163:21" pos:end="163:67"><block_content pos:start="163:21" pos:end="163:67">

                    <expr_stmt pos:start="163:21" pos:end="163:67"><expr pos:start="163:21" pos:end="163:66"><name pos:start="163:21" pos:end="163:33">next_idx_sh16</name> <operator pos:start="163:35" pos:end="163:35">=</operator> <operator pos:start="163:37" pos:end="163:37">(</operator><name pos:start="163:38" pos:end="163:45">idx_sh16</name> <operator pos:start="163:47" pos:end="163:47">+</operator> <literal type="number" pos:start="163:49" pos:end="163:55">0x10000</literal><operator pos:start="163:56" pos:end="163:56">)</operator> <operator pos:start="163:58" pos:end="163:58">&amp;</operator><operator pos:start="163:59" pos:end="163:59">~</operator> <literal type="number" pos:start="163:61" pos:end="163:66">0xFFFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="165:17" pos:end="167:43"><expr pos:start="165:17" pos:end="167:42"><name pos:start="165:17" pos:end="165:19">len</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <call pos:start="165:23" pos:end="167:42"><name pos:start="165:23" pos:end="165:29">av_clip</name><argument_list pos:start="165:30" pos:end="167:42">(<argument pos:start="165:31" pos:end="165:81"><expr pos:start="165:31" pos:end="165:81"><operator pos:start="165:31" pos:end="165:31">(</operator><name pos:start="165:32" pos:end="165:39">idx_sh16</name> <operator pos:start="165:41" pos:end="165:41">-</operator> <name pos:start="165:43" pos:end="165:55">next_idx_sh16</name><operator pos:start="165:56" pos:end="165:56">)</operator> <operator pos:start="165:58" pos:end="165:58">/</operator> <name pos:start="165:60" pos:end="165:77"><name pos:start="165:60" pos:end="165:60">s</name><operator pos:start="165:61" pos:end="165:62">-&gt;</operator><name pos:start="165:63" pos:end="165:77">pitch_diff_sh16</name></name> <operator pos:start="165:79" pos:end="165:79">/</operator> <literal type="number" pos:start="165:81" pos:end="165:81">8</literal></expr></argument>,

                              <argument pos:start="167:31" pos:end="167:31"><expr pos:start="167:31" pos:end="167:31"><literal type="number" pos:start="167:31" pos:end="167:31">1</literal></expr></argument>, <argument pos:start="167:34" pos:end="167:41"><expr pos:start="167:34" pos:end="167:41"><name pos:start="167:34" pos:end="167:37">size</name> <operator pos:start="167:39" pos:end="167:39">-</operator> <name pos:start="167:41" pos:end="167:41">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="169:15" pos:end="171:27">else<block type="pseudo" pos:start="171:17" pos:end="171:27"><block_content pos:start="171:17" pos:end="171:27">

                <expr_stmt pos:start="171:17" pos:end="171:27"><expr pos:start="171:17" pos:end="171:26"><name pos:start="171:17" pos:end="171:19">len</name> <operator pos:start="171:21" pos:end="171:21">=</operator> <name pos:start="171:23" pos:end="171:26">size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="175:13" pos:end="179:47"><expr pos:start="175:13" pos:end="179:46"><call pos:start="175:13" pos:end="179:46"><name pos:start="175:13" pos:end="175:33">ff_acelp_interpolatef</name><argument_list pos:start="175:34" pos:end="179:46">(<argument pos:start="175:35" pos:end="175:48"><expr pos:start="175:35" pos:end="175:48"><operator pos:start="175:35" pos:end="175:35">&amp;</operator><name pos:start="175:36" pos:end="175:48"><name pos:start="175:36" pos:end="175:45">excitation</name><index pos:start="175:46" pos:end="175:48">[<expr pos:start="175:47" pos:end="175:47"><name pos:start="175:47" pos:end="175:47">n</name></expr>]</index></name></expr></argument>, <argument pos:start="175:51" pos:end="175:72"><expr pos:start="175:51" pos:end="175:72"><operator pos:start="175:51" pos:end="175:51">&amp;</operator><name pos:start="175:52" pos:end="175:72"><name pos:start="175:52" pos:end="175:61">excitation</name><index pos:start="175:62" pos:end="175:72">[<expr pos:start="175:63" pos:end="175:71"><name pos:start="175:63" pos:end="175:63">n</name> <operator pos:start="175:65" pos:end="175:65">-</operator> <name pos:start="175:67" pos:end="175:71">pitch</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="177:35" pos:end="177:55"><expr pos:start="177:35" pos:end="177:55"><name pos:start="177:35" pos:end="177:55">wmavoice_ipol1_coeffs</name></expr></argument>, <argument pos:start="177:58" pos:end="177:59"><expr pos:start="177:58" pos:end="177:59"><literal type="number" pos:start="177:58" pos:end="177:59">17</literal></expr></argument>,

                                  <argument pos:start="179:35" pos:end="179:37"><expr pos:start="179:35" pos:end="179:37"><name pos:start="179:35" pos:end="179:37">idx</name></expr></argument>, <argument pos:start="179:40" pos:end="179:40"><expr pos:start="179:40" pos:end="179:40"><literal type="number" pos:start="179:40" pos:end="179:40">9</literal></expr></argument>, <argument pos:start="179:43" pos:end="179:45"><expr pos:start="179:43" pos:end="179:45"><name pos:start="179:43" pos:end="179:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="203:5">else <comment type="block" pos:start="183:12" pos:end="183:33">/* ACB_TYPE_HAMMING */</comment> <block pos:start="183:35" pos:end="203:5">{<block_content pos:start="185:9" pos:end="201:52">

        <decl_stmt pos:start="185:9" pos:end="185:47"><decl pos:start="185:9" pos:end="185:46"><type pos:start="185:9" pos:end="185:11"><name pos:start="185:9" pos:end="185:11">int</name></type> <name pos:start="185:13" pos:end="185:23">block_pitch</name> <init pos:start="185:25" pos:end="185:46">= <expr pos:start="185:27" pos:end="185:46"><name pos:start="185:27" pos:end="185:41">block_pitch_sh2</name> <operator pos:start="185:43" pos:end="185:44">&gt;&gt;</operator> <literal type="number" pos:start="185:46" pos:end="185:46">2</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:46"><expr pos:start="187:9" pos:end="187:45"><name pos:start="187:9" pos:end="187:11">idx</name>             <operator pos:start="187:25" pos:end="187:25">=</operator> <name pos:start="187:27" pos:end="187:41">block_pitch_sh2</name> <operator pos:start="187:43" pos:end="187:43">&amp;</operator> <literal type="number" pos:start="187:45" pos:end="187:45">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="201:52"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:16">(<expr pos:start="189:13" pos:end="189:15"><name pos:start="189:13" pos:end="189:15">idx</name></expr>)</condition> <block pos:start="189:18" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:48">

            <expr_stmt pos:start="191:13" pos:end="195:48"><expr pos:start="191:13" pos:end="195:47"><call pos:start="191:13" pos:end="195:47"><name pos:start="191:13" pos:end="191:33">ff_acelp_interpolatef</name><argument_list pos:start="191:34" pos:end="195:47">(<argument pos:start="191:35" pos:end="191:44"><expr pos:start="191:35" pos:end="191:44"><name pos:start="191:35" pos:end="191:44">excitation</name></expr></argument>, <argument pos:start="191:47" pos:end="191:71"><expr pos:start="191:47" pos:end="191:71"><operator pos:start="191:47" pos:end="191:47">&amp;</operator><name pos:start="191:48" pos:end="191:71"><name pos:start="191:48" pos:end="191:57">excitation</name><index pos:start="191:58" pos:end="191:71">[<expr pos:start="191:59" pos:end="191:70"><operator pos:start="191:59" pos:end="191:59">-</operator><name pos:start="191:60" pos:end="191:70">block_pitch</name></expr>]</index></name></expr></argument>,

                                  <argument pos:start="193:35" pos:end="193:55"><expr pos:start="193:35" pos:end="193:55"><name pos:start="193:35" pos:end="193:55">wmavoice_ipol2_coeffs</name></expr></argument>, <argument pos:start="193:58" pos:end="193:58"><expr pos:start="193:58" pos:end="193:58"><literal type="number" pos:start="193:58" pos:end="193:58">4</literal></expr></argument>,

                                  <argument pos:start="195:35" pos:end="195:37"><expr pos:start="195:35" pos:end="195:37"><name pos:start="195:35" pos:end="195:37">idx</name></expr></argument>, <argument pos:start="195:40" pos:end="195:40"><expr pos:start="195:40" pos:end="195:40"><literal type="number" pos:start="195:40" pos:end="195:40">8</literal></expr></argument>, <argument pos:start="195:43" pos:end="195:46"><expr pos:start="195:43" pos:end="195:46"><name pos:start="195:43" pos:end="195:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="197:11" pos:end="201:52">else<block type="pseudo" pos:start="199:13" pos:end="201:52"><block_content pos:start="199:13" pos:end="201:52">

            <expr_stmt pos:start="199:13" pos:end="201:52"><expr pos:start="199:13" pos:end="201:51"><call pos:start="199:13" pos:end="201:51"><name pos:start="199:13" pos:end="199:29">av_memcpy_backptr</name><argument_list pos:start="199:30" pos:end="201:51">(<argument pos:start="199:31" pos:end="199:52"><expr pos:start="199:31" pos:end="199:52"><operator pos:start="199:31" pos:end="199:31">(</operator><name pos:start="199:32" pos:end="199:38">uint8_t</name> <operator pos:start="199:40" pos:end="199:40">*</operator><operator pos:start="199:41" pos:end="199:41">)</operator> <name pos:start="199:43" pos:end="199:52">excitation</name></expr></argument>, <argument pos:start="199:55" pos:end="199:81"><expr pos:start="199:55" pos:end="199:81"><sizeof pos:start="199:55" pos:end="199:67">sizeof<argument_list pos:start="199:61" pos:end="199:67">(<argument pos:start="199:62" pos:end="199:66"><expr pos:start="199:62" pos:end="199:66"><name pos:start="199:62" pos:end="199:66">float</name></expr></argument>)</argument_list></sizeof> <operator pos:start="199:69" pos:end="199:69">*</operator> <name pos:start="199:71" pos:end="199:81">block_pitch</name></expr></argument>,

                              <argument pos:start="201:31" pos:end="201:50"><expr pos:start="201:31" pos:end="201:50"><sizeof pos:start="201:31" pos:end="201:43">sizeof<argument_list pos:start="201:37" pos:end="201:43">(<argument pos:start="201:38" pos:end="201:42"><expr pos:start="201:38" pos:end="201:42"><name pos:start="201:38" pos:end="201:42">float</name></expr></argument>)</argument_list></sizeof> <operator pos:start="201:45" pos:end="201:45">*</operator> <name pos:start="201:47" pos:end="201:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:58">/* Interpolate ACB/FCB and use as excitation signal */</comment>

    <expr_stmt pos:start="209:5" pos:end="211:54"><expr pos:start="209:5" pos:end="211:53"><call pos:start="209:5" pos:end="211:53"><name pos:start="209:5" pos:end="209:27">ff_weighted_vector_sumf</name><argument_list pos:start="209:28" pos:end="211:53">(<argument pos:start="209:29" pos:end="209:38"><expr pos:start="209:29" pos:end="209:38"><name pos:start="209:29" pos:end="209:38">excitation</name></expr></argument>, <argument pos:start="209:41" pos:end="209:50"><expr pos:start="209:41" pos:end="209:50"><name pos:start="209:41" pos:end="209:50">excitation</name></expr></argument>, <argument pos:start="209:53" pos:end="209:58"><expr pos:start="209:53" pos:end="209:58"><name pos:start="209:53" pos:end="209:58">pulses</name></expr></argument>,

                            <argument pos:start="211:29" pos:end="211:36"><expr pos:start="211:29" pos:end="211:36"><name pos:start="211:29" pos:end="211:36">acb_gain</name></expr></argument>, <argument pos:start="211:39" pos:end="211:46"><expr pos:start="211:39" pos:end="211:46"><name pos:start="211:39" pos:end="211:46">fcb_gain</name></expr></argument>, <argument pos:start="211:49" pos:end="211:52"><expr pos:start="211:49" pos:end="211:52"><name pos:start="211:49" pos:end="211:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
