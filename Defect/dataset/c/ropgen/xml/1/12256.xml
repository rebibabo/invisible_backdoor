<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12256.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">i6300esb_pc_init</name><parameter_list pos:start="1:29" pos:end="1:45">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:37"><name pos:start="1:30" pos:end="1:35">PCIBus</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:44">pci_bus</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:54">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">I6300State</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">pci_conf</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:17">(<expr pos:start="11:9" pos:end="11:16"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:16">pci_bus</name></expr>)</condition> <block pos:start="11:19" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:15">

        <expr_stmt pos:start="13:9" pos:end="13:70"><expr pos:start="13:9" pos:end="13:69"><call pos:start="13:9" pos:end="13:69"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="13:69">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="13:68"><expr pos:start="13:25" pos:end="13:68"><literal type="string" pos:start="13:25" pos:end="13:68">"wdt_i6300esb: no PCI bus in this machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="27:74"><expr pos:start="21:5" pos:end="27:73"><name pos:start="21:5" pos:end="21:5">d</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:19">I6300State</name> <operator pos:start="21:21" pos:end="21:21">*</operator><operator pos:start="21:22" pos:end="21:22">)</operator>

        <call pos:start="23:9" pos:end="27:73"><name pos:start="23:9" pos:end="23:27">pci_register_device</name> <argument_list pos:start="23:29" pos:end="27:73">(<argument pos:start="23:30" pos:end="23:36"><expr pos:start="23:30" pos:end="23:36"><name pos:start="23:30" pos:end="23:36">pci_bus</name></expr></argument>, <argument pos:start="23:39" pos:end="23:52"><expr pos:start="23:39" pos:end="23:52"><literal type="string" pos:start="23:39" pos:end="23:52">"i6300esb_wdt"</literal></expr></argument>, <argument pos:start="23:55" pos:end="23:73"><expr pos:start="23:55" pos:end="23:73"><sizeof pos:start="23:55" pos:end="23:73">sizeof <argument_list pos:start="23:62" pos:end="23:73">(<argument pos:start="23:63" pos:end="23:72"><expr pos:start="23:63" pos:end="23:72"><name pos:start="23:63" pos:end="23:72">I6300State</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                             <argument pos:start="25:30" pos:end="25:31"><expr pos:start="25:30" pos:end="25:31"><operator pos:start="25:30" pos:end="25:30">-</operator><literal type="number" pos:start="25:31" pos:end="25:31">1</literal></expr></argument>,

                             <argument pos:start="27:30" pos:end="27:49"><expr pos:start="27:30" pos:end="27:49"><name pos:start="27:30" pos:end="27:49">i6300esb_config_read</name></expr></argument>, <argument pos:start="27:52" pos:end="27:72"><expr pos:start="27:52" pos:end="27:72"><name pos:start="27:52" pos:end="27:72">i6300esb_config_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:5">d</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:21">reboot_enabled</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <literal type="number" pos:start="31:25" pos:end="31:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:5">d</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:18">clock_scale</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:37">CLOCK_SCALE_1KHZ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:5">d</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:15">int_type</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:30">INT_TYPE_IRQ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:20"><expr pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:5">d</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:15">free_run</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:5">d</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:13">locked</name></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:19"><expr pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:5">d</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:14">enabled</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:67"><expr pos:start="43:5" pos:end="43:66"><name pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:5">d</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:12">timer</name></name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:66"><name pos:start="43:16" pos:end="43:29">qemu_new_timer</name><argument_list pos:start="43:30" pos:end="43:66">(<argument pos:start="43:31" pos:end="43:38"><expr pos:start="43:31" pos:end="43:38"><name pos:start="43:31" pos:end="43:38">vm_clock</name></expr></argument>, <argument pos:start="43:41" pos:end="43:62"><expr pos:start="43:41" pos:end="43:62"><name pos:start="43:41" pos:end="43:62">i6300esb_timer_expired</name></expr></argument>, <argument pos:start="43:65" pos:end="43:65"><expr pos:start="43:65" pos:end="43:65"><name pos:start="43:65" pos:end="43:65">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:32"><expr pos:start="45:5" pos:end="45:31"><name pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:5">d</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:21">timer1_preload</name></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <literal type="number" pos:start="45:25" pos:end="45:31">0xfffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:5">d</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:21">timer2_preload</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <literal type="number" pos:start="47:25" pos:end="47:31">0xfffff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:17"><expr pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:5">d</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:12">stage</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <literal type="number" pos:start="49:16" pos:end="49:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:5">d</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:19">unlock_state</name></name> <operator pos:start="51:21" pos:end="51:21">=</operator> <literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:5">d</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:27">previous_reboot_flag</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <literal type="number" pos:start="53:31" pos:end="53:31">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:12">pci_conf</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:28"><name pos:start="57:16" pos:end="57:16">d</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:21">dev</name><operator pos:start="57:22" pos:end="57:22">.</operator><name pos:start="57:23" pos:end="57:28">config</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:60"><expr pos:start="59:5" pos:end="59:59"><call pos:start="59:5" pos:end="59:59"><name pos:start="59:5" pos:end="59:28">pci_config_set_vendor_id</name><argument_list pos:start="59:29" pos:end="59:59">(<argument pos:start="59:30" pos:end="59:37"><expr pos:start="59:30" pos:end="59:37"><name pos:start="59:30" pos:end="59:37">pci_conf</name></expr></argument>, <argument pos:start="59:40" pos:end="59:58"><expr pos:start="59:40" pos:end="59:58"><name pos:start="59:40" pos:end="59:58">PCI_VENDOR_ID_INTEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:66"><expr pos:start="61:5" pos:end="61:65"><call pos:start="61:5" pos:end="61:65"><name pos:start="61:5" pos:end="61:28">pci_config_set_device_id</name><argument_list pos:start="61:29" pos:end="61:65">(<argument pos:start="61:30" pos:end="61:37"><expr pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:37">pci_conf</name></expr></argument>, <argument pos:start="61:40" pos:end="61:64"><expr pos:start="61:40" pos:end="61:64"><name pos:start="61:40" pos:end="61:64">PCI_DEVICE_ID_INTEL_ESB_9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:59"><expr pos:start="63:5" pos:end="63:58"><call pos:start="63:5" pos:end="63:58"><name pos:start="63:5" pos:end="63:24">pci_config_set_class</name><argument_list pos:start="63:25" pos:end="63:58">(<argument pos:start="63:26" pos:end="63:33"><expr pos:start="63:26" pos:end="63:33"><name pos:start="63:26" pos:end="63:33">pci_conf</name></expr></argument>, <argument pos:start="63:36" pos:end="63:57"><expr pos:start="63:36" pos:end="63:57"><name pos:start="63:36" pos:end="63:57">PCI_CLASS_SYSTEM_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:12">pci_conf</name><index pos:start="65:13" pos:end="65:18">[<expr pos:start="65:14" pos:end="65:17"><literal type="number" pos:start="65:14" pos:end="65:17">0x0e</literal></expr>]</index></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:25">0x00</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="71:65"><expr pos:start="69:5" pos:end="71:64"><call pos:start="69:5" pos:end="71:64"><name pos:start="69:5" pos:end="69:20">pci_register_bar</name><argument_list pos:start="69:21" pos:end="71:64">(<argument pos:start="69:22" pos:end="69:28"><expr pos:start="69:22" pos:end="69:28"><operator pos:start="69:22" pos:end="69:22">&amp;</operator><name pos:start="69:23" pos:end="69:28"><name pos:start="69:23" pos:end="69:23">d</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:28">dev</name></name></expr></argument>, <argument pos:start="69:31" pos:end="69:31"><expr pos:start="69:31" pos:end="69:31"><literal type="number" pos:start="69:31" pos:end="69:31">0</literal></expr></argument>, <argument pos:start="69:34" pos:end="69:37"><expr pos:start="69:34" pos:end="69:37"><literal type="number" pos:start="69:34" pos:end="69:37">0x10</literal></expr></argument>,

                            <argument pos:start="71:29" pos:end="71:49"><expr pos:start="71:29" pos:end="71:49"><name pos:start="71:29" pos:end="71:49">PCI_ADDRESS_SPACE_MEM</name></expr></argument>, <argument pos:start="71:52" pos:end="71:63"><expr pos:start="71:52" pos:end="71:63"><name pos:start="71:52" pos:end="71:63">i6300esb_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="77:54"><expr pos:start="75:5" pos:end="77:53"><call pos:start="75:5" pos:end="77:53"><name pos:start="75:5" pos:end="75:19">register_savevm</name><argument_list pos:start="75:20" pos:end="77:53">(<argument pos:start="75:21" pos:end="75:34"><expr pos:start="75:21" pos:end="75:34"><literal type="string" pos:start="75:21" pos:end="75:34">"i6300esb_wdt"</literal></expr></argument>, <argument pos:start="75:37" pos:end="75:38"><expr pos:start="75:37" pos:end="75:38"><operator pos:start="75:37" pos:end="75:37">-</operator><literal type="number" pos:start="75:38" pos:end="75:38">1</literal></expr></argument>, <argument pos:start="75:41" pos:end="75:58"><expr pos:start="75:41" pos:end="75:58"><sizeof pos:start="75:41" pos:end="75:58">sizeof<argument_list pos:start="75:47" pos:end="75:58">(<argument pos:start="75:48" pos:end="75:57"><expr pos:start="75:48" pos:end="75:57"><name pos:start="75:48" pos:end="75:57">I6300State</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                     <argument pos:start="77:22" pos:end="77:34"><expr pos:start="77:22" pos:end="77:34"><name pos:start="77:22" pos:end="77:34">i6300esb_save</name></expr></argument>, <argument pos:start="77:37" pos:end="77:49"><expr pos:start="77:37" pos:end="77:49"><name pos:start="77:37" pos:end="77:49">i6300esb_load</name></expr></argument>, <argument pos:start="77:52" pos:end="77:52"><expr pos:start="77:52" pos:end="77:52"><name pos:start="77:52" pos:end="77:52">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
