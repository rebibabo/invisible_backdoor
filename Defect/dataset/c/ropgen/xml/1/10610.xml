<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10610.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">vhost_dev_sync_region</name><parameter_list pos:start="1:34" pos:end="7:66">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:50">vhost_dev</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">dev</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:62"><decl pos:start="3:35" pos:end="3:62"><type pos:start="3:35" pos:end="3:62"><name pos:start="3:35" pos:end="3:53">MemoryRegionSection</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:62">section</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:49"><decl pos:start="5:35" pos:end="5:49"><type pos:start="5:35" pos:end="5:49"><name pos:start="5:35" pos:end="5:42">uint64_t</name></type> <name pos:start="5:44" pos:end="5:49">mfirst</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:65"><decl pos:start="5:52" pos:end="5:65"><type pos:start="5:52" pos:end="5:65"><name pos:start="5:52" pos:end="5:59">uint64_t</name></type> <name pos:start="5:61" pos:end="5:65">mlast</name></decl></parameter>,

                                  <parameter pos:start="7:35" pos:end="7:49"><decl pos:start="7:35" pos:end="7:49"><type pos:start="7:35" pos:end="7:49"><name pos:start="7:35" pos:end="7:42">uint64_t</name></type> <name pos:start="7:44" pos:end="7:49">rfirst</name></decl></parameter>, <parameter pos:start="7:52" pos:end="7:65"><decl pos:start="7:52" pos:end="7:65"><type pos:start="7:52" pos:end="7:65"><name pos:start="7:52" pos:end="7:59">uint64_t</name></type> <name pos:start="7:61" pos:end="7:65">rlast</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="83:1">{<block_content pos:start="11:5" pos:end="81:5">

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">start</name> <init pos:start="11:20" pos:end="11:40">= <expr pos:start="11:22" pos:end="11:40"><call pos:start="11:22" pos:end="11:40"><name pos:start="11:22" pos:end="11:24">MAX</name><argument_list pos:start="11:25" pos:end="11:40">(<argument pos:start="11:26" pos:end="11:31"><expr pos:start="11:26" pos:end="11:31"><name pos:start="11:26" pos:end="11:31">mfirst</name></expr></argument>, <argument pos:start="11:34" pos:end="11:39"><expr pos:start="11:34" pos:end="11:39"><name pos:start="11:34" pos:end="11:39">rfirst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:16">end</name> <init pos:start="13:18" pos:end="13:36">= <expr pos:start="13:20" pos:end="13:36"><call pos:start="13:20" pos:end="13:36"><name pos:start="13:20" pos:end="13:22">MIN</name><argument_list pos:start="13:23" pos:end="13:36">(<argument pos:start="13:24" pos:end="13:28"><expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28">mlast</name></expr></argument>, <argument pos:start="13:31" pos:end="13:35"><expr pos:start="13:31" pos:end="13:35"><name pos:start="13:31" pos:end="13:35">rlast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:65"><decl pos:start="15:5" pos:end="15:64"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:21">vhost_log_chunk_t</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:27">from</name> <init pos:start="15:29" pos:end="15:64">= <expr pos:start="15:31" pos:end="15:64"><name pos:start="15:31" pos:end="15:38"><name pos:start="15:31" pos:end="15:33">dev</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:38">log</name></name> <operator pos:start="15:40" pos:end="15:40">+</operator> <name pos:start="15:42" pos:end="15:46">start</name> <operator pos:start="15:48" pos:end="15:48">/</operator> <name pos:start="15:50" pos:end="15:64">VHOST_LOG_CHUNK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:65"><decl pos:start="17:5" pos:end="17:64"><type pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:21">vhost_log_chunk_t</name> <modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:25">to</name> <init pos:start="17:27" pos:end="17:64">= <expr pos:start="17:29" pos:end="17:64"><name pos:start="17:29" pos:end="17:36"><name pos:start="17:29" pos:end="17:31">dev</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:36">log</name></name> <operator pos:start="17:38" pos:end="17:38">+</operator> <name pos:start="17:40" pos:end="17:42">end</name> <operator pos:start="17:44" pos:end="17:44">/</operator> <name pos:start="17:46" pos:end="17:60">VHOST_LOG_CHUNK</name> <operator pos:start="17:62" pos:end="17:62">+</operator> <literal type="number" pos:start="17:64" pos:end="17:64">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:64"><decl pos:start="19:5" pos:end="19:63"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:17">addr</name> <init pos:start="19:19" pos:end="19:63">= <expr pos:start="19:21" pos:end="19:63"><operator pos:start="19:21" pos:end="19:21">(</operator><name pos:start="19:22" pos:end="19:26">start</name> <operator pos:start="19:28" pos:end="19:28">/</operator> <name pos:start="19:30" pos:end="19:44">VHOST_LOG_CHUNK</name><operator pos:start="19:45" pos:end="19:45">)</operator> <operator pos:start="19:47" pos:end="19:47">*</operator> <name pos:start="19:49" pos:end="19:63">VHOST_LOG_CHUNK</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:20">(<expr pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:11">end</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <name pos:start="23:15" pos:end="23:19">start</name></expr>)</condition> <block pos:start="23:22" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><call pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:49">(<argument pos:start="29:12" pos:end="29:48"><expr pos:start="29:12" pos:end="29:48"><name pos:start="29:12" pos:end="29:14">end</name> <operator pos:start="29:16" pos:end="29:16">/</operator> <name pos:start="29:18" pos:end="29:32">VHOST_LOG_CHUNK</name> <operator pos:start="29:34" pos:end="29:34">&lt;</operator> <name pos:start="29:36" pos:end="29:48"><name pos:start="29:36" pos:end="29:38">dev</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:48">log_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><call pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:51">(<argument pos:start="31:12" pos:end="31:50"><expr pos:start="31:12" pos:end="31:50"><name pos:start="31:12" pos:end="31:16">start</name> <operator pos:start="31:18" pos:end="31:18">/</operator> <name pos:start="31:20" pos:end="31:34">VHOST_LOG_CHUNK</name> <operator pos:start="31:36" pos:end="31:36">&lt;</operator> <name pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:40">dev</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:50">log_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="35:5" pos:end="81:5">for <control pos:start="35:9" pos:end="35:28">(<init pos:start="35:10" pos:end="35:10">;</init><condition pos:start="35:11" pos:end="35:20"><expr pos:start="35:11" pos:end="35:19"><name pos:start="35:11" pos:end="35:14">from</name> <operator pos:start="35:16" pos:end="35:16">&lt;</operator> <name pos:start="35:18" pos:end="35:19">to</name></expr>;</condition> <incr pos:start="35:22" pos:end="35:27"><expr pos:start="35:22" pos:end="35:27"><operator pos:start="35:22" pos:end="35:23">++</operator><name pos:start="35:24" pos:end="35:27">from</name></expr></incr>)</control> <block pos:start="35:30" pos:end="81:5">{<block_content pos:start="37:9" pos:end="79:32">

        <decl_stmt pos:start="37:9" pos:end="37:30"><decl pos:start="37:9" pos:end="37:29"><type pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:25">vhost_log_chunk_t</name></type> <name pos:start="37:27" pos:end="37:29">log</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:16"><decl pos:start="39:9" pos:end="39:15"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:15">bit</name></decl>;</decl_stmt>

        <comment type="block" pos:start="41:9" pos:end="43:60">/* We first check with non-atomic: much cheaper,

         * and we expect non-dirty to be the common case. */</comment>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:19">(<expr pos:start="45:13" pos:end="45:18"><operator pos:start="45:13" pos:end="45:13">!</operator><operator pos:start="45:14" pos:end="45:14">*</operator><name pos:start="45:15" pos:end="45:18">from</name></expr>)</condition> <block pos:start="45:21" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:21">

            <expr_stmt pos:start="47:13" pos:end="47:36"><expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:16">addr</name> <operator pos:start="47:18" pos:end="47:19">+=</operator> <name pos:start="47:21" pos:end="47:35">VHOST_LOG_CHUNK</name></expr>;</expr_stmt>

            <continue pos:start="49:13" pos:end="49:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="53:9" pos:end="59:27">/* Data must be read atomically. We don't really

         * need the barrier semantics of __sync

         * builtins, but it's easier to use them than

         * roll our own. */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:44"><expr pos:start="61:9" pos:end="61:43"><name pos:start="61:9" pos:end="61:11">log</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:43"><name pos:start="61:15" pos:end="61:34">__sync_fetch_and_and</name><argument_list pos:start="61:35" pos:end="61:43">(<argument pos:start="61:36" pos:end="61:39"><expr pos:start="61:36" pos:end="61:39"><name pos:start="61:36" pos:end="61:39">from</name></expr></argument>, <argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="63:9" pos:end="77:9">while <condition pos:start="63:15" pos:end="65:39">(<expr pos:start="63:16" pos:end="65:38"><operator pos:start="63:16" pos:end="63:16">(</operator><name pos:start="63:17" pos:end="63:19">bit</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <ternary pos:start="63:23" pos:end="65:37"><condition pos:start="63:23" pos:end="63:49"><expr pos:start="63:23" pos:end="63:47"><sizeof pos:start="63:23" pos:end="63:33">sizeof<argument_list pos:start="63:29" pos:end="63:33">(<argument pos:start="63:30" pos:end="63:32"><expr pos:start="63:30" pos:end="63:32"><name pos:start="63:30" pos:end="63:32">log</name></expr></argument>)</argument_list></sizeof> <operator pos:start="63:35" pos:end="63:35">&gt;</operator> <sizeof pos:start="63:37" pos:end="63:47">sizeof<argument_list pos:start="63:43" pos:end="63:47">(<argument pos:start="63:44" pos:end="63:46"><expr pos:start="63:44" pos:end="63:46"><name pos:start="63:44" pos:end="63:46">int</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then pos:start="65:17" pos:end="65:26">

                <expr pos:start="65:17" pos:end="65:26"><call pos:start="65:17" pos:end="65:26"><name pos:start="65:17" pos:end="65:21">ffsll</name><argument_list pos:start="65:22" pos:end="65:26">(<argument pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><name pos:start="65:23" pos:end="65:25">log</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="65:28" pos:end="65:37">: <expr pos:start="65:30" pos:end="65:37"><call pos:start="65:30" pos:end="65:37"><name pos:start="65:30" pos:end="65:32">ffs</name><argument_list pos:start="65:33" pos:end="65:37">(<argument pos:start="65:34" pos:end="65:36"><expr pos:start="65:34" pos:end="65:36"><name pos:start="65:34" pos:end="65:36">log</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="65:38" pos:end="65:38">)</operator></expr>)</condition> <block pos:start="65:41" pos:end="77:9">{<block_content pos:start="67:13" pos:end="75:36">

            <decl_stmt pos:start="67:13" pos:end="67:32"><decl pos:start="67:13" pos:end="67:31"><type pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:22">ram_addr_t</name></type> <name pos:start="67:24" pos:end="67:31">ram_addr</name></decl>;</decl_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:21"><expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:15">bit</name> <operator pos:start="69:17" pos:end="69:18">-=</operator> <literal type="number" pos:start="69:20" pos:end="69:20">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:76"><expr pos:start="71:13" pos:end="71:75"><name pos:start="71:13" pos:end="71:20">ram_addr</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:52"><name pos:start="71:24" pos:end="71:30">section</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:52">offset_within_region</name></name> <operator pos:start="71:54" pos:end="71:54">+</operator> <name pos:start="71:56" pos:end="71:58">bit</name> <operator pos:start="71:60" pos:end="71:60">*</operator> <name pos:start="71:62" pos:end="71:75">VHOST_LOG_PAGE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:75"><expr pos:start="73:13" pos:end="73:74"><call pos:start="73:13" pos:end="73:74"><name pos:start="73:13" pos:end="73:35">memory_region_set_dirty</name><argument_list pos:start="73:36" pos:end="73:74">(<argument pos:start="73:37" pos:end="73:47"><expr pos:start="73:37" pos:end="73:47"><name pos:start="73:37" pos:end="73:47"><name pos:start="73:37" pos:end="73:43">section</name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:47">mr</name></name></expr></argument>, <argument pos:start="73:50" pos:end="73:57"><expr pos:start="73:50" pos:end="73:57"><name pos:start="73:50" pos:end="73:57">ram_addr</name></expr></argument>, <argument pos:start="73:60" pos:end="73:73"><expr pos:start="73:60" pos:end="73:73"><name pos:start="73:60" pos:end="73:73">VHOST_LOG_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:36"><expr pos:start="75:13" pos:end="75:35"><name pos:start="75:13" pos:end="75:15">log</name> <operator pos:start="75:17" pos:end="75:18">&amp;=</operator> <operator pos:start="75:20" pos:end="75:20">~</operator><operator pos:start="75:21" pos:end="75:21">(</operator><literal type="number" pos:start="75:22" pos:end="75:27">0x1ull</literal> <operator pos:start="75:29" pos:end="75:30">&lt;&lt;</operator> <name pos:start="75:32" pos:end="75:34">bit</name><operator pos:start="75:35" pos:end="75:35">)</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:12">addr</name> <operator pos:start="79:14" pos:end="79:15">+=</operator> <name pos:start="79:17" pos:end="79:31">VHOST_LOG_CHUNK</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
