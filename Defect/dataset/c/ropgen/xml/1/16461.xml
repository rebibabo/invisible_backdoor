<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16461.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">ide_atapi_cmd</name><parameter_list pos:start="1:19" pos:end="1:31">(<parameter pos:start="1:20" pos:end="1:30"><decl pos:start="1:20" pos:end="1:30"><type pos:start="1:20" pos:end="1:29"><name pos:start="1:20" pos:end="1:27">IDEState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:30">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:64">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">buf</name> <init pos:start="5:18" pos:end="5:31">= <expr pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:20">s</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:31">io_buffer</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:66"><type pos:start="7:5" pos:end="7:27"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:25"><name pos:start="7:11" pos:end="7:16">struct</name> <name pos:start="7:18" pos:end="7:25">AtapiCmd</name></name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">cmd</name> <init pos:start="7:32" pos:end="7:66">= <expr pos:start="7:34" pos:end="7:66"><operator pos:start="7:34" pos:end="7:34">&amp;</operator><name pos:start="7:35" pos:end="7:66"><name pos:start="7:35" pos:end="7:49">atapi_cmd_table</name><index pos:start="7:50" pos:end="7:66">[<expr pos:start="7:51" pos:end="7:65"><name pos:start="7:51" pos:end="7:65"><name pos:start="7:51" pos:end="7:51">s</name><operator pos:start="7:52" pos:end="7:53">-&gt;</operator><name pos:start="7:54" pos:end="7:62">io_buffer</name><index pos:start="7:63" pos:end="7:65">[<expr pos:start="7:64" pos:end="7:64"><literal type="number" pos:start="7:64" pos:end="7:64">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:22">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

    <block pos:start="13:5" pos:end="30:0">{<block_content pos:start="15:9" pos:end="25:21">

        <decl_stmt pos:start="15:9" pos:end="15:14"><decl pos:start="15:9" pos:end="15:13"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:69"><expr pos:start="17:9" pos:end="17:68"><call pos:start="17:9" pos:end="17:68"><name pos:start="17:9" pos:end="17:14">printf</name><argument_list pos:start="17:15" pos:end="17:68">(<argument pos:start="17:16" pos:end="17:41"><expr pos:start="17:16" pos:end="17:41"><literal type="string" pos:start="17:16" pos:end="17:41">"ATAPI limit=0x%x packet:"</literal></expr></argument>, <argument pos:start="17:44" pos:end="17:67"><expr pos:start="17:44" pos:end="17:67"><name pos:start="17:44" pos:end="17:50"><name pos:start="17:44" pos:end="17:44">s</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:50">lcyl</name></name> <operator pos:start="17:52" pos:end="17:52">|</operator> <operator pos:start="17:54" pos:end="17:54">(</operator><name pos:start="17:55" pos:end="17:61"><name pos:start="17:55" pos:end="17:55">s</name><operator pos:start="17:56" pos:end="17:57">-&gt;</operator><name pos:start="17:58" pos:end="17:61">hcyl</name></name> <operator pos:start="17:63" pos:end="17:64">&lt;&lt;</operator> <literal type="number" pos:start="17:66" pos:end="17:66">8</literal><operator pos:start="17:67" pos:end="17:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="19:9" pos:end="23:9">for<control pos:start="19:12" pos:end="19:46">(<init pos:start="19:13" pos:end="19:18"><expr pos:start="19:13" pos:end="19:17"><name pos:start="19:13" pos:end="19:13">i</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>;</init> <condition pos:start="19:20" pos:end="19:41"><expr pos:start="19:20" pos:end="19:40"><name pos:start="19:20" pos:end="19:20">i</name> <operator pos:start="19:22" pos:end="19:22">&lt;</operator> <name pos:start="19:24" pos:end="19:40">ATAPI_PACKET_SIZE</name></expr>;</condition> <incr pos:start="19:43" pos:end="19:45"><expr pos:start="19:43" pos:end="19:45"><name pos:start="19:43" pos:end="19:43">i</name><operator pos:start="19:44" pos:end="19:45">++</operator></expr></incr>)</control> <block pos:start="19:48" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:36">

            <expr_stmt pos:start="21:13" pos:end="21:36"><expr pos:start="21:13" pos:end="21:35"><call pos:start="21:13" pos:end="21:35"><name pos:start="21:13" pos:end="21:18">printf</name><argument_list pos:start="21:19" pos:end="21:35">(<argument pos:start="21:20" pos:end="21:26"><expr pos:start="21:20" pos:end="21:26"><literal type="string" pos:start="21:20" pos:end="21:26">" %02x"</literal></expr></argument>, <argument pos:start="21:29" pos:end="21:34"><expr pos:start="21:29" pos:end="21:34"><name pos:start="21:29" pos:end="21:34"><name pos:start="21:29" pos:end="21:31">buf</name><index pos:start="21:32" pos:end="21:34">[<expr pos:start="21:33" pos:end="21:33"><name pos:start="21:33" pos:end="21:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><call pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:14">printf</name><argument_list pos:start="25:15" pos:end="25:20">(<argument pos:start="25:16" pos:end="25:19"><expr pos:start="25:16" pos:end="25:19"><literal type="string" pos:start="25:16" pos:end="25:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="33:5" pos:end="43:7">/*

     * If there's a UNIT_ATTENTION condition pending, only command flagged with

     * ALLOW_UA are allowed to complete. with other commands getting a CHECK

     * condition response unless a higher priority status, defined by the drive

     * here, is pending.

     */</comment>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:67">(<expr pos:start="45:9" pos:end="45:66"><name pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:20">sense_key</name></name> <operator pos:start="45:22" pos:end="45:23">==</operator> <name pos:start="45:25" pos:end="45:38">UNIT_ATTENTION</name> <operator pos:start="45:40" pos:end="45:41">&amp;&amp;</operator> <operator pos:start="45:43" pos:end="45:43">!</operator><operator pos:start="45:44" pos:end="45:44">(</operator><name pos:start="45:45" pos:end="45:54"><name pos:start="45:45" pos:end="45:47">cmd</name><operator pos:start="45:48" pos:end="45:49">-&gt;</operator><name pos:start="45:50" pos:end="45:54">flags</name></name> <operator pos:start="45:56" pos:end="45:56">&amp;</operator> <name pos:start="45:58" pos:end="45:65">ALLOW_UA</name><operator pos:start="45:66" pos:end="45:66">)</operator></expr>)</condition> <block pos:start="45:69" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:15">

        <expr_stmt pos:start="47:9" pos:end="47:38"><expr pos:start="47:9" pos:end="47:37"><call pos:start="47:9" pos:end="47:37"><name pos:start="47:9" pos:end="47:34">ide_atapi_cmd_check_status</name><argument_list pos:start="47:35" pos:end="47:37">(<argument pos:start="47:36" pos:end="47:36"><expr pos:start="47:36" pos:end="47:36"><name pos:start="47:36" pos:end="47:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="53:5" pos:end="65:7">/*

     * When a CD gets changed, we have to report an ejected state and

     * then a loaded state to guests so that they detect tray

     * open/close and media change events.  Guests that do not use

     * GET_EVENT_STATUS_NOTIFICATION to detect such tray open/close

     * states rely on this behavior.

     */</comment>

    <if_stmt pos:start="67:5" pos:end="91:5"><if pos:start="67:5" pos:end="91:5">if <condition pos:start="67:8" pos:end="69:69">(<expr pos:start="67:9" pos:end="69:68"><operator pos:start="67:9" pos:end="67:9">!</operator><operator pos:start="67:10" pos:end="67:10">(</operator><name pos:start="67:11" pos:end="67:20"><name pos:start="67:11" pos:end="67:13">cmd</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:20">flags</name></name> <operator pos:start="67:22" pos:end="67:22">&amp;</operator> <name pos:start="67:24" pos:end="67:31">ALLOW_UA</name><operator pos:start="67:32" pos:end="67:32">)</operator> <operator pos:start="67:34" pos:end="67:35">&amp;&amp;</operator>

        <operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:21"><name pos:start="69:10" pos:end="69:10">s</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:21">tray_open</name></name> <operator pos:start="69:23" pos:end="69:24">&amp;&amp;</operator> <call pos:start="69:26" pos:end="69:48"><name pos:start="69:26" pos:end="69:40">blk_is_inserted</name><argument_list pos:start="69:41" pos:end="69:48">(<argument pos:start="69:42" pos:end="69:47"><expr pos:start="69:42" pos:end="69:47"><name pos:start="69:42" pos:end="69:47"><name pos:start="69:42" pos:end="69:42">s</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:47">blk</name></name></expr></argument>)</argument_list></call> <operator pos:start="69:50" pos:end="69:51">&amp;&amp;</operator> <name pos:start="69:53" pos:end="69:68"><name pos:start="69:53" pos:end="69:53">s</name><operator pos:start="69:54" pos:end="69:55">-&gt;</operator><name pos:start="69:56" pos:end="69:68">cdrom_changed</name></name></expr>)</condition> <block pos:start="69:71" pos:end="91:5">{<block_content pos:start="73:9" pos:end="89:15">



        <if_stmt pos:start="73:9" pos:end="85:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:34">(<expr pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:28">cdrom_changed</name></name> <operator pos:start="73:30" pos:end="73:31">==</operator> <literal type="number" pos:start="73:33" pos:end="73:33">1</literal></expr>)</condition> <block pos:start="73:36" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:33">

            <expr_stmt pos:start="75:13" pos:end="75:70"><expr pos:start="75:13" pos:end="75:69"><call pos:start="75:13" pos:end="75:69"><name pos:start="75:13" pos:end="75:31">ide_atapi_cmd_error</name><argument_list pos:start="75:32" pos:end="75:69">(<argument pos:start="75:33" pos:end="75:33"><expr pos:start="75:33" pos:end="75:33"><name pos:start="75:33" pos:end="75:33">s</name></expr></argument>, <argument pos:start="75:36" pos:end="75:44"><expr pos:start="75:36" pos:end="75:44"><name pos:start="75:36" pos:end="75:44">NOT_READY</name></expr></argument>, <argument pos:start="75:47" pos:end="75:68"><expr pos:start="75:47" pos:end="75:68"><name pos:start="75:47" pos:end="75:68">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:33"><expr pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:28">cdrom_changed</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <literal type="number" pos:start="77:32" pos:end="77:32">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="85:9">else <block pos:start="79:16" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:33">

            <expr_stmt pos:start="81:13" pos:end="81:80"><expr pos:start="81:13" pos:end="81:79"><call pos:start="81:13" pos:end="81:79"><name pos:start="81:13" pos:end="81:31">ide_atapi_cmd_error</name><argument_list pos:start="81:32" pos:end="81:79">(<argument pos:start="81:33" pos:end="81:33"><expr pos:start="81:33" pos:end="81:33"><name pos:start="81:33" pos:end="81:33">s</name></expr></argument>, <argument pos:start="81:36" pos:end="81:49"><expr pos:start="81:36" pos:end="81:49"><name pos:start="81:36" pos:end="81:49">UNIT_ATTENTION</name></expr></argument>, <argument pos:start="81:52" pos:end="81:78"><expr pos:start="81:52" pos:end="81:78"><name pos:start="81:52" pos:end="81:78">ASC_MEDIUM_MAY_HAVE_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:28">cdrom_changed</name></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <literal type="number" pos:start="83:32" pos:end="83:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:69">/* Report a Not Ready condition if appropriate for the command */</comment>

    <if_stmt pos:start="97:5" pos:end="107:5"><if pos:start="97:5" pos:end="107:5">if <condition pos:start="97:8" pos:end="99:56">(<expr pos:start="97:9" pos:end="99:55"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:19"><name pos:start="97:10" pos:end="97:12">cmd</name><operator pos:start="97:13" pos:end="97:14">-&gt;</operator><name pos:start="97:15" pos:end="97:19">flags</name></name> <operator pos:start="97:21" pos:end="97:21">&amp;</operator> <name pos:start="97:23" pos:end="97:33">CHECK_READY</name><operator pos:start="97:34" pos:end="97:34">)</operator> <operator pos:start="97:36" pos:end="97:37">&amp;&amp;</operator>

        <operator pos:start="99:9" pos:end="99:9">(</operator><operator pos:start="99:10" pos:end="99:10">!</operator><call pos:start="99:11" pos:end="99:26"><name pos:start="99:11" pos:end="99:23">media_present</name><argument_list pos:start="99:24" pos:end="99:26">(<argument pos:start="99:25" pos:end="99:25"><expr pos:start="99:25" pos:end="99:25"><name pos:start="99:25" pos:end="99:25">s</name></expr></argument>)</argument_list></call> <operator pos:start="99:28" pos:end="99:29">||</operator> <operator pos:start="99:31" pos:end="99:31">!</operator><call pos:start="99:32" pos:end="99:54"><name pos:start="99:32" pos:end="99:46">blk_is_inserted</name><argument_list pos:start="99:47" pos:end="99:54">(<argument pos:start="99:48" pos:end="99:53"><expr pos:start="99:48" pos:end="99:53"><name pos:start="99:48" pos:end="99:53"><name pos:start="99:48" pos:end="99:48">s</name><operator pos:start="99:49" pos:end="99:50">-&gt;</operator><name pos:start="99:51" pos:end="99:53">blk</name></name></expr></argument>)</argument_list></call><operator pos:start="99:55" pos:end="99:55">)</operator></expr>)</condition>

    <block pos:start="101:5" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:15">

        <expr_stmt pos:start="103:9" pos:end="103:66"><expr pos:start="103:9" pos:end="103:65"><call pos:start="103:9" pos:end="103:65"><name pos:start="103:9" pos:end="103:27">ide_atapi_cmd_error</name><argument_list pos:start="103:28" pos:end="103:65">(<argument pos:start="103:29" pos:end="103:29"><expr pos:start="103:29" pos:end="103:29"><name pos:start="103:29" pos:end="103:29">s</name></expr></argument>, <argument pos:start="103:32" pos:end="103:40"><expr pos:start="103:32" pos:end="103:40"><name pos:start="103:32" pos:end="103:40">NOT_READY</name></expr></argument>, <argument pos:start="103:43" pos:end="103:64"><expr pos:start="103:43" pos:end="103:64"><name pos:start="103:43" pos:end="103:64">ASC_MEDIUM_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="117:52">/* Nondata commands permit the byte_count_limit to be 0.

     * If this is a data-transferring PIO command and BCL is 0,

     * we abort at the /ATA/ level, not the ATAPI level.

     * See ATA8 ACS3 section 7.17.6.49 and 7.21.5 */</comment>

    <if_stmt pos:start="119:5" pos:end="133:5"><if pos:start="119:5" pos:end="133:5">if <condition pos:start="119:8" pos:end="119:48">(<expr pos:start="119:9" pos:end="119:47"><name pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:11">cmd</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:20">handler</name></name> <operator pos:start="119:22" pos:end="119:23">&amp;&amp;</operator> <operator pos:start="119:25" pos:end="119:25">!</operator><operator pos:start="119:26" pos:end="119:26">(</operator><name pos:start="119:27" pos:end="119:36"><name pos:start="119:27" pos:end="119:29">cmd</name><operator pos:start="119:30" pos:end="119:31">-&gt;</operator><name pos:start="119:32" pos:end="119:36">flags</name></name> <operator pos:start="119:38" pos:end="119:38">&amp;</operator> <name pos:start="119:40" pos:end="119:46">NONDATA</name><operator pos:start="119:47" pos:end="119:47">)</operator></expr>)</condition> <block pos:start="119:50" pos:end="133:5">{<block_content pos:start="123:9" pos:end="131:9">

        <comment type="block" pos:start="121:9" pos:end="121:78">/* TODO: Check IDENTIFY data word 125 for default BCL (currently 0) */</comment>

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="123:57">(<expr pos:start="123:13" pos:end="123:56"><operator pos:start="123:13" pos:end="123:13">!</operator><operator pos:start="123:14" pos:end="123:14">(</operator><call pos:start="123:15" pos:end="123:39"><name pos:start="123:15" pos:end="123:36">atapi_byte_count_limit</name><argument_list pos:start="123:37" pos:end="123:39">(<argument pos:start="123:38" pos:end="123:38"><expr pos:start="123:38" pos:end="123:38"><name pos:start="123:38" pos:end="123:38">s</name></expr></argument>)</argument_list></call> <operator pos:start="123:41" pos:end="123:42">||</operator> <name pos:start="123:44" pos:end="123:55"><name pos:start="123:44" pos:end="123:44">s</name><operator pos:start="123:45" pos:end="123:46">-&gt;</operator><name pos:start="123:47" pos:end="123:55">atapi_dma</name></name><operator pos:start="123:56" pos:end="123:56">)</operator></expr>)</condition> <block pos:start="123:59" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:19">

            <comment type="block" pos:start="125:13" pos:end="125:80">/* TODO: Move abort back into core.c and make static inline again */</comment>

            <expr_stmt pos:start="127:13" pos:end="127:33"><expr pos:start="127:13" pos:end="127:32"><call pos:start="127:13" pos:end="127:32"><name pos:start="127:13" pos:end="127:29">ide_abort_command</name><argument_list pos:start="127:30" pos:end="127:32">(<argument pos:start="127:31" pos:end="127:31"><expr pos:start="127:31" pos:end="127:31"><name pos:start="127:31" pos:end="127:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="129:13" pos:end="129:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:29">/* Execute the command */</comment>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:21">(<expr pos:start="139:9" pos:end="139:20"><name pos:start="139:9" pos:end="139:20"><name pos:start="139:9" pos:end="139:11">cmd</name><operator pos:start="139:12" pos:end="139:13">-&gt;</operator><name pos:start="139:14" pos:end="139:20">handler</name></name></expr>)</condition> <block pos:start="139:23" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:15">

        <expr_stmt pos:start="141:9" pos:end="141:29"><expr pos:start="141:9" pos:end="141:28"><call pos:start="141:9" pos:end="141:28"><name pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:11">cmd</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:20">handler</name></name><argument_list pos:start="141:21" pos:end="141:28">(<argument pos:start="141:22" pos:end="141:22"><expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">s</name></expr></argument>, <argument pos:start="141:25" pos:end="141:27"><expr pos:start="141:25" pos:end="141:27"><name pos:start="141:25" pos:end="141:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:64"><expr pos:start="149:5" pos:end="149:63"><call pos:start="149:5" pos:end="149:63"><name pos:start="149:5" pos:end="149:23">ide_atapi_cmd_error</name><argument_list pos:start="149:24" pos:end="149:63">(<argument pos:start="149:25" pos:end="149:25"><expr pos:start="149:25" pos:end="149:25"><name pos:start="149:25" pos:end="149:25">s</name></expr></argument>, <argument pos:start="149:28" pos:end="149:42"><expr pos:start="149:28" pos:end="149:42"><name pos:start="149:28" pos:end="149:42">ILLEGAL_REQUEST</name></expr></argument>, <argument pos:start="149:45" pos:end="149:62"><expr pos:start="149:45" pos:end="149:62"><name pos:start="149:45" pos:end="149:62">ASC_ILLEGAL_OPCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
