<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/688.c" pos:tabs="8"><function pos:start="1:1" pos:end="236:42"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">mips_r4k_init</name> <parameter_list pos:start="1:20" pos:end="7:71">(<parameter pos:start="1:21" pos:end="1:39"><decl pos:start="1:21" pos:end="1:39"><type pos:start="1:21" pos:end="1:39"><name pos:start="1:21" pos:end="1:30">ram_addr_t</name></type> <name pos:start="1:32" pos:end="1:39">ram_size</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:57">vga_ram_size</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:43"><decl pos:start="3:21" pos:end="3:43"><type pos:start="3:21" pos:end="3:43"><specifier pos:start="3:21" pos:end="3:25">const</specifier> <name pos:start="3:27" pos:end="3:30">char</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:43">boot_device</name></decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:47"><decl pos:start="5:21" pos:end="5:47"><type pos:start="5:21" pos:end="5:47"><specifier pos:start="5:21" pos:end="5:25">const</specifier> <name pos:start="5:27" pos:end="5:30">char</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:47">kernel_filename</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:75"><decl pos:start="5:50" pos:end="5:75"><type pos:start="5:50" pos:end="5:75"><specifier pos:start="5:50" pos:end="5:54">const</specifier> <name pos:start="5:56" pos:end="5:59">char</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:75">kernel_cmdline</name></decl></parameter>,

                    <parameter pos:start="7:21" pos:end="7:47"><decl pos:start="7:21" pos:end="7:47"><type pos:start="7:21" pos:end="7:47"><specifier pos:start="7:21" pos:end="7:25">const</specifier> <name pos:start="7:27" pos:end="7:30">char</name> <modifier pos:start="7:32" pos:end="7:32">*</modifier></type><name pos:start="7:33" pos:end="7:47">initrd_filename</name></decl></parameter>, <parameter pos:start="7:50" pos:end="7:70"><decl pos:start="7:50" pos:end="7:70"><type pos:start="7:50" pos:end="7:70"><specifier pos:start="7:50" pos:end="7:54">const</specifier> <name pos:start="7:56" pos:end="7:59">char</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:70">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="236:42">{<block_content pos:start="11:5" pos:end="236:42">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:29">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">RTCState</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:23">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:53"><decl pos:start="27:5" pos:end="27:52"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:20">BlockDriverState</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:52"><name pos:start="27:23" pos:end="27:24">hd</name><index pos:start="27:25" pos:end="27:52">[<expr pos:start="27:26" pos:end="27:51"><name pos:start="27:26" pos:end="27:36">MAX_IDE_BUS</name> <operator pos:start="27:38" pos:end="27:38">*</operator> <name pos:start="27:40" pos:end="27:51">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:19">/* init CPUs */</comment>

    <if_stmt pos:start="33:5" pos:end="236:42"><if pos:start="33:5" pos:end="236:42">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <name pos:start="33:22" pos:end="33:25">NULL</name></expr>)</condition> <block pos:start="33:28" pos:end="236:42">{<block_content pos:start="37:9" pos:end="236:42">

<cpp:ifdef pos:start="35:1" pos:end="35:20">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="37:9" pos:end="40:0"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:27">"R4000"</literal></expr>;</expr_stmt>

<cpp:else pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="41:9" pos:end="44:0"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="string" pos:start="41:21" pos:end="41:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>


    <expr_stmt pos:start="46:5" pos:end="46:30"><expr pos:start="46:5" pos:end="46:29"><name pos:start="46:5" pos:end="46:7">env</name> <operator pos:start="46:9" pos:end="46:9">=</operator> <call pos:start="46:11" pos:end="46:29"><name pos:start="46:11" pos:end="46:18">cpu_init</name><argument_list pos:start="46:19" pos:end="46:29">(<argument pos:start="46:20" pos:end="46:28"><expr pos:start="46:20" pos:end="46:28"><name pos:start="46:20" pos:end="46:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="48:5" pos:end="236:42"><if pos:start="48:5" pos:end="236:42">if <condition pos:start="48:8" pos:end="48:13">(<expr pos:start="48:9" pos:end="48:12"><operator pos:start="48:9" pos:end="48:9">!</operator><name pos:start="48:10" pos:end="48:12">env</name></expr>)</condition> <block pos:start="48:15" pos:end="236:42">{<block_content pos:start="50:9" pos:end="236:42">

        <expr_stmt pos:start="50:9" pos:end="50:59"><expr pos:start="50:9" pos:end="50:58"><call pos:start="50:9" pos:end="50:58"><name pos:start="50:9" pos:end="50:15">fprintf</name><argument_list pos:start="50:16" pos:end="50:58">(<argument pos:start="50:17" pos:end="50:22"><expr pos:start="50:17" pos:end="50:22"><name pos:start="50:17" pos:end="50:22">stderr</name></expr></argument>, <argument pos:start="50:25" pos:end="50:57"><expr pos:start="50:25" pos:end="50:57"><literal type="string" pos:start="50:25" pos:end="50:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="54:5" pos:end="54:45"><expr pos:start="54:5" pos:end="54:44"><call pos:start="54:5" pos:end="54:44"><name pos:start="54:5" pos:end="54:23">qemu_register_reset</name><argument_list pos:start="54:24" pos:end="54:44">(<argument pos:start="54:25" pos:end="54:38"><expr pos:start="54:25" pos:end="54:38"><name pos:start="54:25" pos:end="54:38">main_cpu_reset</name></expr></argument>, <argument pos:start="54:41" pos:end="54:43"><expr pos:start="54:41" pos:end="54:43"><name pos:start="54:41" pos:end="54:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="58:5" pos:end="58:22">/* allocate RAM */</comment>







    <expr_stmt pos:start="66:5" pos:end="66:58"><expr pos:start="66:5" pos:end="66:57"><call pos:start="66:5" pos:end="66:57"><name pos:start="66:5" pos:end="66:32">cpu_register_physical_memory</name><argument_list pos:start="66:33" pos:end="66:57">(<argument pos:start="66:34" pos:end="66:34"><expr pos:start="66:34" pos:end="66:34"><literal type="number" pos:start="66:34" pos:end="66:34">0</literal></expr></argument>, <argument pos:start="66:37" pos:end="66:44"><expr pos:start="66:37" pos:end="66:44"><name pos:start="66:37" pos:end="66:44">ram_size</name></expr></argument>, <argument pos:start="66:47" pos:end="66:56"><expr pos:start="66:47" pos:end="66:56"><name pos:start="66:47" pos:end="66:56">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="70:5" pos:end="236:42"><if pos:start="70:5" pos:end="236:42">if <condition pos:start="70:8" pos:end="70:29">(<expr pos:start="70:9" pos:end="70:28"><operator pos:start="70:9" pos:end="70:9">!</operator><name pos:start="70:10" pos:end="70:28">mips_qemu_iomemtype</name></expr>)</condition> <block pos:start="70:31" pos:end="236:42">{<block_content pos:start="72:9" pos:end="236:42">

        <expr_stmt pos:start="72:9" pos:end="74:76"><expr pos:start="72:9" pos:end="74:75"><name pos:start="72:9" pos:end="72:27">mips_qemu_iomemtype</name> <operator pos:start="72:29" pos:end="72:29">=</operator> <call pos:start="72:31" pos:end="74:75"><name pos:start="72:31" pos:end="72:52">cpu_register_io_memory</name><argument_list pos:start="72:53" pos:end="74:75">(<argument pos:start="72:54" pos:end="72:54"><expr pos:start="72:54" pos:end="72:54"><literal type="number" pos:start="72:54" pos:end="72:54">0</literal></expr></argument>, <argument pos:start="72:57" pos:end="72:70"><expr pos:start="72:57" pos:end="72:70"><name pos:start="72:57" pos:end="72:70">mips_qemu_read</name></expr></argument>,

                                                     <argument pos:start="74:54" pos:end="74:68"><expr pos:start="74:54" pos:end="74:68"><name pos:start="74:54" pos:end="74:68">mips_qemu_write</name></expr></argument>, <argument pos:start="74:71" pos:end="74:74"><expr pos:start="74:71" pos:end="74:74"><name pos:start="74:71" pos:end="74:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="77:5" pos:end="77:75"><expr pos:start="77:5" pos:end="77:74"><call pos:start="77:5" pos:end="77:74"><name pos:start="77:5" pos:end="77:32">cpu_register_physical_memory</name><argument_list pos:start="77:33" pos:end="77:74">(<argument pos:start="77:34" pos:end="77:43"><expr pos:start="77:34" pos:end="77:43"><literal type="number" pos:start="77:34" pos:end="77:43">0x1fbf0000</literal></expr></argument>, <argument pos:start="77:46" pos:end="77:52"><expr pos:start="77:46" pos:end="77:52"><literal type="number" pos:start="77:46" pos:end="77:52">0x10000</literal></expr></argument>, <argument pos:start="77:55" pos:end="77:73"><expr pos:start="77:55" pos:end="77:73"><name pos:start="77:55" pos:end="77:73">mips_qemu_iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="87:14">/* Try to load a BIOS image. If this fails, we continue regardless,

       but initialize the hardware ourselves. When a kernel gets

       preloaded we also initialize the hardware, since the BIOS wasn't

       run. */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:42"><expr pos:start="89:5" pos:end="89:41"><name pos:start="89:5" pos:end="89:15">bios_offset</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:26">ram_size</name> <operator pos:start="89:28" pos:end="89:28">+</operator> <name pos:start="89:30" pos:end="89:41">vga_ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="93:34"><if pos:start="91:5" pos:end="93:34">if <condition pos:start="91:8" pos:end="91:26">(<expr pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:17">bios_name</name> <operator pos:start="91:19" pos:end="91:20">==</operator> <name pos:start="91:22" pos:end="91:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:34"><block_content pos:start="93:9" pos:end="93:34">

        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:17">bios_name</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:61"><expr pos:start="95:5" pos:end="95:60"><call pos:start="95:5" pos:end="95:60"><name pos:start="95:5" pos:end="95:12">snprintf</name><argument_list pos:start="95:13" pos:end="95:60">(<argument pos:start="95:14" pos:end="95:16"><expr pos:start="95:14" pos:end="95:16"><name pos:start="95:14" pos:end="95:16">buf</name></expr></argument>, <argument pos:start="95:19" pos:end="95:29"><expr pos:start="95:19" pos:end="95:29"><sizeof pos:start="95:19" pos:end="95:29">sizeof<argument_list pos:start="95:25" pos:end="95:29">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><name pos:start="95:26" pos:end="95:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:32" pos:end="95:38"><expr pos:start="95:32" pos:end="95:38"><literal type="string" pos:start="95:32" pos:end="95:38">"%s/%s"</literal></expr></argument>, <argument pos:start="95:41" pos:end="95:48"><expr pos:start="95:41" pos:end="95:48"><name pos:start="95:41" pos:end="95:48">bios_dir</name></expr></argument>, <argument pos:start="95:51" pos:end="95:59"><expr pos:start="95:51" pos:end="95:59"><name pos:start="95:51" pos:end="95:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:61"><expr pos:start="97:5" pos:end="97:60"><name pos:start="97:5" pos:end="97:13">bios_size</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <call pos:start="97:17" pos:end="97:60"><name pos:start="97:17" pos:end="97:26">load_image</name><argument_list pos:start="97:27" pos:end="97:60">(<argument pos:start="97:28" pos:end="97:30"><expr pos:start="97:28" pos:end="97:30"><name pos:start="97:28" pos:end="97:30">buf</name></expr></argument>, <argument pos:start="97:33" pos:end="97:59"><expr pos:start="97:33" pos:end="97:59"><name pos:start="97:33" pos:end="97:45">phys_ram_base</name> <operator pos:start="97:47" pos:end="97:47">+</operator> <name pos:start="97:49" pos:end="97:59">bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="236:42"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:52">(<expr pos:start="99:9" pos:end="99:51"><operator pos:start="99:9" pos:end="99:9">(</operator><name pos:start="99:10" pos:end="99:18">bios_size</name> <operator pos:start="99:20" pos:end="99:20">&gt;</operator> <literal type="number" pos:start="99:22" pos:end="99:22">0</literal><operator pos:start="99:23" pos:end="99:23">)</operator> <operator pos:start="99:25" pos:end="99:26">&amp;&amp;</operator> <operator pos:start="99:28" pos:end="99:28">(</operator><name pos:start="99:29" pos:end="99:37">bios_size</name> <operator pos:start="99:39" pos:end="99:40">&lt;=</operator> <name pos:start="99:42" pos:end="99:50">BIOS_SIZE</name><operator pos:start="99:51" pos:end="99:51">)</operator></expr>)</condition> <block pos:start="99:54" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:74">

	<expr_stmt pos:start="101:9" pos:end="103:74"><expr pos:start="101:9" pos:end="103:73"><call pos:start="101:9" pos:end="103:73"><name pos:start="101:9" pos:end="101:36">cpu_register_physical_memory</name><argument_list pos:start="101:37" pos:end="103:73">(<argument pos:start="101:38" pos:end="101:47"><expr pos:start="101:38" pos:end="101:47"><literal type="number" pos:start="101:38" pos:end="101:47">0x1fc00000</literal></expr></argument>,

				     <argument pos:start="103:38" pos:end="103:46"><expr pos:start="103:38" pos:end="103:46"><name pos:start="103:38" pos:end="103:46">BIOS_SIZE</name></expr></argument>, <argument pos:start="103:49" pos:end="103:72"><expr pos:start="103:49" pos:end="103:72"><name pos:start="103:49" pos:end="103:59">bios_offset</name> <operator pos:start="103:61" pos:end="103:61">|</operator> <name pos:start="103:63" pos:end="103:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="105:7" pos:end="236:42">else if <condition pos:start="105:15" pos:end="105:63">(<expr pos:start="105:16" pos:end="105:62"><operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:21">index</name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:56"><name pos:start="105:25" pos:end="105:39">drive_get_index</name><argument_list pos:start="105:40" pos:end="105:56">(<argument pos:start="105:41" pos:end="105:49"><expr pos:start="105:41" pos:end="105:49"><name pos:start="105:41" pos:end="105:49">IF_PFLASH</name></expr></argument>, <argument pos:start="105:52" pos:end="105:52"><expr pos:start="105:52" pos:end="105:52"><literal type="number" pos:start="105:52" pos:end="105:52">0</literal></expr></argument>, <argument pos:start="105:55" pos:end="105:55"><expr pos:start="105:55" pos:end="105:55"><literal type="number" pos:start="105:55" pos:end="105:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="105:57" pos:end="105:57">)</operator> <operator pos:start="105:59" pos:end="105:59">&gt;</operator> <operator pos:start="105:61" pos:end="105:61">-</operator><literal type="number" pos:start="105:62" pos:end="105:62">1</literal></expr>)</condition> <block pos:start="105:65" pos:end="236:42">{<block_content pos:start="107:9" pos:end="236:42">

        <decl_stmt pos:start="107:9" pos:end="107:39"><decl pos:start="107:9" pos:end="107:38"><type pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:16">uint32_t</name></type> <name pos:start="107:18" pos:end="107:25">mips_rom</name> <init pos:start="107:27" pos:end="107:38">= <expr pos:start="107:29" pos:end="107:38"><literal type="number" pos:start="107:29" pos:end="107:38">0x00400000</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="109:9" pos:end="111:68"><expr pos:start="109:9" pos:end="111:67"><call pos:start="109:9" pos:end="111:67"><name pos:start="109:9" pos:end="109:36">cpu_register_physical_memory</name><argument_list pos:start="109:37" pos:end="111:67">(<argument pos:start="109:38" pos:end="109:47"><expr pos:start="109:38" pos:end="109:47"><literal type="number" pos:start="109:38" pos:end="109:47">0x1fc00000</literal></expr></argument>, <argument pos:start="109:50" pos:end="109:57"><expr pos:start="109:50" pos:end="109:57"><name pos:start="109:50" pos:end="109:57">mips_rom</name></expr></argument>,

	                     <argument pos:start="111:30" pos:end="111:66"><expr pos:start="111:30" pos:end="111:66"><call pos:start="111:30" pos:end="111:53"><name pos:start="111:30" pos:end="111:43">qemu_ram_alloc</name><argument_list pos:start="111:44" pos:end="111:53">(<argument pos:start="111:45" pos:end="111:52"><expr pos:start="111:45" pos:end="111:52"><name pos:start="111:45" pos:end="111:52">mips_rom</name></expr></argument>)</argument_list></call> <operator pos:start="111:55" pos:end="111:55">|</operator> <name pos:start="111:57" pos:end="111:66">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="236:42"><if pos:start="113:9" pos:end="236:42">if <condition pos:start="113:12" pos:end="117:27">(<expr pos:start="113:13" pos:end="117:26"><operator pos:start="113:13" pos:end="113:13">!</operator><call pos:start="113:14" pos:end="117:26"><name pos:start="113:14" pos:end="113:34">pflash_cfi01_register</name><argument_list pos:start="113:35" pos:end="117:26">(<argument pos:start="113:36" pos:end="113:45"><expr pos:start="113:36" pos:end="113:45"><literal type="number" pos:start="113:36" pos:end="113:45">0x1fc00000</literal></expr></argument>, <argument pos:start="113:48" pos:end="113:71"><expr pos:start="113:48" pos:end="113:71"><call pos:start="113:48" pos:end="113:71"><name pos:start="113:48" pos:end="113:61">qemu_ram_alloc</name><argument_list pos:start="113:62" pos:end="113:71">(<argument pos:start="113:63" pos:end="113:70"><expr pos:start="113:63" pos:end="113:70"><name pos:start="113:63" pos:end="113:70">mips_rom</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="115:13" pos:end="115:36"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:31"><name pos:start="115:13" pos:end="115:24">drives_table</name><index pos:start="115:25" pos:end="115:31">[<expr pos:start="115:26" pos:end="115:30"><name pos:start="115:26" pos:end="115:30">index</name></expr>]</index></name><operator pos:start="115:32" pos:end="115:32">.</operator><name pos:start="115:33" pos:end="115:36">bdrv</name></expr></argument>, <argument pos:start="115:39" pos:end="115:48"><expr pos:start="115:39" pos:end="115:48"><name pos:start="115:39" pos:end="115:48">sector_len</name></expr></argument>, <argument pos:start="115:51" pos:end="115:71"><expr pos:start="115:51" pos:end="115:71"><name pos:start="115:51" pos:end="115:58">mips_rom</name> <operator pos:start="115:60" pos:end="115:60">/</operator> <name pos:start="115:62" pos:end="115:71">sector_len</name></expr></argument>,

            <argument pos:start="117:13" pos:end="117:13"><expr pos:start="117:13" pos:end="117:13"><literal type="number" pos:start="117:13" pos:end="117:13">4</literal></expr></argument>, <argument pos:start="117:16" pos:end="117:16"><expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">0</literal></expr></argument>, <argument pos:start="117:19" pos:end="117:19"><expr pos:start="117:19" pos:end="117:19"><literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr></argument>, <argument pos:start="117:22" pos:end="117:22"><expr pos:start="117:22" pos:end="117:22"><literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr></argument>, <argument pos:start="117:25" pos:end="117:25"><expr pos:start="117:25" pos:end="117:25"><literal type="number" pos:start="117:25" pos:end="117:25">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:29" pos:end="236:42">{<block_content pos:start="119:13" pos:end="236:42">

            <expr_stmt pos:start="119:13" pos:end="119:71"><expr pos:start="119:13" pos:end="119:70"><call pos:start="119:13" pos:end="119:70"><name pos:start="119:13" pos:end="119:19">fprintf</name><argument_list pos:start="119:20" pos:end="119:70">(<argument pos:start="119:21" pos:end="119:26"><expr pos:start="119:21" pos:end="119:26"><name pos:start="119:21" pos:end="119:26">stderr</name></expr></argument>, <argument pos:start="119:29" pos:end="119:69"><expr pos:start="119:29" pos:end="119:69"><literal type="string" pos:start="119:29" pos:end="119:69">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="236:42"><else pos:start="123:5" pos:end="236:42">else <block pos:start="123:10" pos:end="236:42">{<block_content pos:start="127:9" pos:end="236:42">

	<comment type="block" pos:start="125:9" pos:end="125:23">/* not fatal */</comment>

        <expr_stmt pos:start="127:9" pos:end="129:21"><expr pos:start="127:9" pos:end="129:20"><call pos:start="127:9" pos:end="129:20"><name pos:start="127:9" pos:end="127:15">fprintf</name><argument_list pos:start="127:16" pos:end="129:20">(<argument pos:start="127:17" pos:end="127:22"><expr pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:22">stderr</name></expr></argument>, <argument pos:start="127:25" pos:end="127:72"><expr pos:start="127:25" pos:end="127:72"><literal type="string" pos:start="127:25" pos:end="127:72">"qemu: Warning, could not load MIPS bios '%s'\n"</literal></expr></argument>,

		<argument pos:start="129:17" pos:end="129:19"><expr pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <if_stmt pos:start="134:5" pos:end="236:42"><if pos:start="134:5" pos:end="236:42">if <condition pos:start="134:8" pos:end="134:24">(<expr pos:start="134:9" pos:end="134:23"><name pos:start="134:9" pos:end="134:23">kernel_filename</name></expr>)</condition> <block pos:start="134:26" pos:end="236:42">{<block_content pos:start="136:9" pos:end="236:42">

        <expr_stmt pos:start="136:9" pos:end="136:41"><expr pos:start="136:9" pos:end="136:40"><name pos:start="136:9" pos:end="136:29"><name pos:start="136:9" pos:end="136:20">loaderparams</name><operator pos:start="136:21" pos:end="136:21">.</operator><name pos:start="136:22" pos:end="136:29">ram_size</name></name> <operator pos:start="136:31" pos:end="136:31">=</operator> <name pos:start="136:33" pos:end="136:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="138:9" pos:end="138:55"><expr pos:start="138:9" pos:end="138:54"><name pos:start="138:9" pos:end="138:36"><name pos:start="138:9" pos:end="138:20">loaderparams</name><operator pos:start="138:21" pos:end="138:21">.</operator><name pos:start="138:22" pos:end="138:36">kernel_filename</name></name> <operator pos:start="138:38" pos:end="138:38">=</operator> <name pos:start="138:40" pos:end="138:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="140:9" pos:end="140:53"><expr pos:start="140:9" pos:end="140:52"><name pos:start="140:9" pos:end="140:35"><name pos:start="140:9" pos:end="140:20">loaderparams</name><operator pos:start="140:21" pos:end="140:21">.</operator><name pos:start="140:22" pos:end="140:35">kernel_cmdline</name></name> <operator pos:start="140:37" pos:end="140:37">=</operator> <name pos:start="140:39" pos:end="140:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="142:9" pos:end="142:55"><expr pos:start="142:9" pos:end="142:54"><name pos:start="142:9" pos:end="142:36"><name pos:start="142:9" pos:end="142:20">loaderparams</name><operator pos:start="142:21" pos:end="142:21">.</operator><name pos:start="142:22" pos:end="142:36">initrd_filename</name></name> <operator pos:start="142:38" pos:end="142:38">=</operator> <name pos:start="142:40" pos:end="142:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="144:9" pos:end="144:26"><expr pos:start="144:9" pos:end="144:25"><call pos:start="144:9" pos:end="144:25"><name pos:start="144:9" pos:end="144:19">load_kernel</name> <argument_list pos:start="144:21" pos:end="144:25">(<argument pos:start="144:22" pos:end="144:24"><expr pos:start="144:22" pos:end="144:24"><name pos:start="144:22" pos:end="144:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="149:5" pos:end="149:35">/* Init CPU internal devices */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:31"><expr pos:start="151:5" pos:end="151:30"><call pos:start="151:5" pos:end="151:30"><name pos:start="151:5" pos:end="151:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="151:26" pos:end="151:30">(<argument pos:start="151:27" pos:end="151:29"><expr pos:start="151:27" pos:end="151:29"><name pos:start="151:27" pos:end="151:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:29"><expr pos:start="153:5" pos:end="153:28"><call pos:start="153:5" pos:end="153:28"><name pos:start="153:5" pos:end="153:23">cpu_mips_clock_init</name><argument_list pos:start="153:24" pos:end="153:28">(<argument pos:start="153:25" pos:end="153:27"><expr pos:start="153:25" pos:end="153:27"><name pos:start="153:25" pos:end="153:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:54">/* The PIC is attached to the MIPS CPU INT0 pin */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:36"><expr pos:start="159:5" pos:end="159:35"><name pos:start="159:5" pos:end="159:9">i8259</name> <operator pos:start="159:11" pos:end="159:11">=</operator> <call pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:22">i8259_init</name><argument_list pos:start="159:23" pos:end="159:35">(<argument pos:start="159:24" pos:end="159:34"><expr pos:start="159:24" pos:end="159:34"><name pos:start="159:24" pos:end="159:34"><name pos:start="159:24" pos:end="159:26">env</name><operator pos:start="159:27" pos:end="159:28">-&gt;</operator><name pos:start="159:29" pos:end="159:31">irq</name><index pos:start="159:32" pos:end="159:34">[<expr pos:start="159:33" pos:end="159:33"><literal type="number" pos:start="159:33" pos:end="159:33">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:41"><expr pos:start="163:5" pos:end="163:40"><name pos:start="163:5" pos:end="163:13">rtc_state</name> <operator pos:start="163:15" pos:end="163:15">=</operator> <call pos:start="163:17" pos:end="163:40"><name pos:start="163:17" pos:end="163:24">rtc_init</name><argument_list pos:start="163:25" pos:end="163:40">(<argument pos:start="163:26" pos:end="163:29"><expr pos:start="163:26" pos:end="163:29"><literal type="number" pos:start="163:26" pos:end="163:29">0x70</literal></expr></argument>, <argument pos:start="163:32" pos:end="163:39"><expr pos:start="163:32" pos:end="163:39"><name pos:start="163:32" pos:end="163:39"><name pos:start="163:32" pos:end="163:36">i8259</name><index pos:start="163:37" pos:end="163:39">[<expr pos:start="163:38" pos:end="163:38"><literal type="number" pos:start="163:38" pos:end="163:38">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:54">/* Register 64 KB of ISA IO space at 0x14000000 */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:42"><expr pos:start="169:5" pos:end="169:41"><call pos:start="169:5" pos:end="169:41"><name pos:start="169:5" pos:end="169:17">isa_mmio_init</name><argument_list pos:start="169:18" pos:end="169:41">(<argument pos:start="169:19" pos:end="169:28"><expr pos:start="169:19" pos:end="169:28"><literal type="number" pos:start="169:19" pos:end="169:28">0x14000000</literal></expr></argument>, <argument pos:start="169:31" pos:end="169:40"><expr pos:start="169:31" pos:end="169:40"><literal type="number" pos:start="169:31" pos:end="169:40">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:30"><expr pos:start="171:5" pos:end="171:29"><name pos:start="171:5" pos:end="171:16">isa_mem_base</name> <operator pos:start="171:18" pos:end="171:18">=</operator> <literal type="number" pos:start="171:20" pos:end="171:29">0x10000000</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:35"><expr pos:start="175:5" pos:end="175:34"><name pos:start="175:5" pos:end="175:7">pit</name> <operator pos:start="175:9" pos:end="175:9">=</operator> <call pos:start="175:11" pos:end="175:34"><name pos:start="175:11" pos:end="175:18">pit_init</name><argument_list pos:start="175:19" pos:end="175:34">(<argument pos:start="175:20" pos:end="175:23"><expr pos:start="175:20" pos:end="175:23"><literal type="number" pos:start="175:20" pos:end="175:23">0x40</literal></expr></argument>, <argument pos:start="175:26" pos:end="175:33"><expr pos:start="175:26" pos:end="175:33"><name pos:start="175:26" pos:end="175:33"><name pos:start="175:26" pos:end="175:30">i8259</name><index pos:start="175:31" pos:end="175:33">[<expr pos:start="175:32" pos:end="175:32"><literal type="number" pos:start="175:32" pos:end="175:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="179:5" pos:end="236:42">for<control pos:start="179:8" pos:end="179:41">(<init pos:start="179:9" pos:end="179:14"><expr pos:start="179:9" pos:end="179:13"><name pos:start="179:9" pos:end="179:9">i</name> <operator pos:start="179:11" pos:end="179:11">=</operator> <literal type="number" pos:start="179:13" pos:end="179:13">0</literal></expr>;</init> <condition pos:start="179:16" pos:end="179:36"><expr pos:start="179:16" pos:end="179:35"><name pos:start="179:16" pos:end="179:16">i</name> <operator pos:start="179:18" pos:end="179:18">&lt;</operator> <name pos:start="179:20" pos:end="179:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="179:38" pos:end="179:40"><expr pos:start="179:38" pos:end="179:40"><name pos:start="179:38" pos:end="179:38">i</name><operator pos:start="179:39" pos:end="179:40">++</operator></expr></incr>)</control> <block pos:start="179:43" pos:end="236:42">{<block_content pos:start="181:9" pos:end="236:42">

        <if_stmt pos:start="181:9" pos:end="236:42"><if pos:start="181:9" pos:end="236:42">if <condition pos:start="181:12" pos:end="181:26">(<expr pos:start="181:13" pos:end="181:25"><name pos:start="181:13" pos:end="181:25"><name pos:start="181:13" pos:end="181:22">serial_hds</name><index pos:start="181:23" pos:end="181:25">[<expr pos:start="181:24" pos:end="181:24"><name pos:start="181:24" pos:end="181:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="181:28" pos:end="236:42">{<block_content pos:start="183:13" pos:end="236:42">

            <expr_stmt pos:start="183:13" pos:end="185:39"><expr pos:start="183:13" pos:end="185:38"><call pos:start="183:13" pos:end="185:38"><name pos:start="183:13" pos:end="183:23">serial_init</name><argument_list pos:start="183:24" pos:end="185:38">(<argument pos:start="183:25" pos:end="183:36"><expr pos:start="183:25" pos:end="183:36"><name pos:start="183:25" pos:end="183:36"><name pos:start="183:25" pos:end="183:33">serial_io</name><index pos:start="183:34" pos:end="183:36">[<expr pos:start="183:35" pos:end="183:35"><name pos:start="183:35" pos:end="183:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="183:39" pos:end="183:58"><expr pos:start="183:39" pos:end="183:58"><name pos:start="183:39" pos:end="183:58"><name pos:start="183:39" pos:end="183:43">i8259</name><index pos:start="183:44" pos:end="183:58">[<expr pos:start="183:45" pos:end="183:57"><name pos:start="183:45" pos:end="183:57"><name pos:start="183:45" pos:end="183:54">serial_irq</name><index pos:start="183:55" pos:end="183:57">[<expr pos:start="183:56" pos:end="183:56"><name pos:start="183:56" pos:end="183:56">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="183:61" pos:end="183:66"><expr pos:start="183:61" pos:end="183:66"><literal type="number" pos:start="183:61" pos:end="183:66">115200</literal></expr></argument>,

                        <argument pos:start="185:25" pos:end="185:37"><expr pos:start="185:25" pos:end="185:37"><name pos:start="185:25" pos:end="185:37"><name pos:start="185:25" pos:end="185:34">serial_hds</name><index pos:start="185:35" pos:end="185:37">[<expr pos:start="185:36" pos:end="185:36"><name pos:start="185:36" pos:end="185:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="191:5" pos:end="193:31"><expr pos:start="191:5" pos:end="193:30"><call pos:start="191:5" pos:end="193:30"><name pos:start="191:5" pos:end="191:16">isa_vga_init</name><argument_list pos:start="191:17" pos:end="193:30">(<argument pos:start="191:18" pos:end="191:41"><expr pos:start="191:18" pos:end="191:41"><name pos:start="191:18" pos:end="191:30">phys_ram_base</name> <operator pos:start="191:32" pos:end="191:32">+</operator> <name pos:start="191:34" pos:end="191:41">ram_size</name></expr></argument>, <argument pos:start="191:44" pos:end="191:51"><expr pos:start="191:44" pos:end="191:51"><name pos:start="191:44" pos:end="191:51">ram_size</name></expr></argument>,

                 <argument pos:start="193:18" pos:end="193:29"><expr pos:start="193:18" pos:end="193:29"><name pos:start="193:18" pos:end="193:29">vga_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="199:55"><if pos:start="197:5" pos:end="199:55">if <condition pos:start="197:8" pos:end="197:25">(<expr pos:start="197:9" pos:end="197:24"><name pos:start="197:9" pos:end="197:19"><name pos:start="197:9" pos:end="197:16">nd_table</name><index pos:start="197:17" pos:end="197:19">[<expr pos:start="197:18" pos:end="197:18"><literal type="number" pos:start="197:18" pos:end="197:18">0</literal></expr>]</index></name><operator pos:start="197:20" pos:end="197:20">.</operator><name pos:start="197:21" pos:end="197:24">vlan</name></expr>)</condition><block type="pseudo" pos:start="199:9" pos:end="199:55"><block_content pos:start="199:9" pos:end="199:55">

        <expr_stmt pos:start="199:9" pos:end="199:55"><expr pos:start="199:9" pos:end="199:54"><call pos:start="199:9" pos:end="199:54"><name pos:start="199:9" pos:end="199:23">isa_ne2000_init</name><argument_list pos:start="199:24" pos:end="199:54">(<argument pos:start="199:25" pos:end="199:29"><expr pos:start="199:25" pos:end="199:29"><literal type="number" pos:start="199:25" pos:end="199:29">0x300</literal></expr></argument>, <argument pos:start="199:32" pos:end="199:39"><expr pos:start="199:32" pos:end="199:39"><name pos:start="199:32" pos:end="199:39"><name pos:start="199:32" pos:end="199:36">i8259</name><index pos:start="199:37" pos:end="199:39">[<expr pos:start="199:38" pos:end="199:38"><literal type="number" pos:start="199:38" pos:end="199:38">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="199:42" pos:end="199:53"><expr pos:start="199:42" pos:end="199:53"><operator pos:start="199:42" pos:end="199:42">&amp;</operator><name pos:start="199:43" pos:end="199:53"><name pos:start="199:43" pos:end="199:50">nd_table</name><index pos:start="199:51" pos:end="199:53">[<expr pos:start="199:52" pos:end="199:52"><literal type="number" pos:start="199:52" pos:end="199:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="203:5" pos:end="236:42"><if pos:start="203:5" pos:end="236:42">if <condition pos:start="203:8" pos:end="203:49">(<expr pos:start="203:9" pos:end="203:48"><call pos:start="203:9" pos:end="203:33"><name pos:start="203:9" pos:end="203:25">drive_get_max_bus</name><argument_list pos:start="203:26" pos:end="203:33">(<argument pos:start="203:27" pos:end="203:32"><expr pos:start="203:27" pos:end="203:32"><name pos:start="203:27" pos:end="203:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="203:35" pos:end="203:36">&gt;=</operator> <name pos:start="203:38" pos:end="203:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="203:51" pos:end="236:42">{<block_content pos:start="205:9" pos:end="236:42">

        <expr_stmt pos:start="205:9" pos:end="205:52"><expr pos:start="205:9" pos:end="205:51"><call pos:start="205:9" pos:end="205:51"><name pos:start="205:9" pos:end="205:15">fprintf</name><argument_list pos:start="205:16" pos:end="205:51">(<argument pos:start="205:17" pos:end="205:22"><expr pos:start="205:17" pos:end="205:22"><name pos:start="205:17" pos:end="205:22">stderr</name></expr></argument>, <argument pos:start="205:25" pos:end="205:50"><expr pos:start="205:25" pos:end="205:50"><literal type="string" pos:start="205:25" pos:end="205:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <for pos:start="211:5" pos:end="236:42">for<control pos:start="211:8" pos:end="211:51">(<init pos:start="211:9" pos:end="211:14"><expr pos:start="211:9" pos:end="211:13"><name pos:start="211:9" pos:end="211:9">i</name> <operator pos:start="211:11" pos:end="211:11">=</operator> <literal type="number" pos:start="211:13" pos:end="211:13">0</literal></expr>;</init> <condition pos:start="211:16" pos:end="211:46"><expr pos:start="211:16" pos:end="211:45"><name pos:start="211:16" pos:end="211:16">i</name> <operator pos:start="211:18" pos:end="211:18">&lt;</operator> <name pos:start="211:20" pos:end="211:30">MAX_IDE_BUS</name> <operator pos:start="211:32" pos:end="211:32">*</operator> <name pos:start="211:34" pos:end="211:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="211:48" pos:end="211:50"><expr pos:start="211:48" pos:end="211:50"><name pos:start="211:48" pos:end="211:48">i</name><operator pos:start="211:49" pos:end="211:50">++</operator></expr></incr>)</control> <block pos:start="211:53" pos:end="236:42">{<block_content pos:start="213:9" pos:end="236:42">

        <expr_stmt pos:start="213:9" pos:end="213:76"><expr pos:start="213:9" pos:end="213:75"><name pos:start="213:9" pos:end="213:13">index</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <call pos:start="213:17" pos:end="213:75"><name pos:start="213:17" pos:end="213:31">drive_get_index</name><argument_list pos:start="213:32" pos:end="213:75">(<argument pos:start="213:33" pos:end="213:38"><expr pos:start="213:33" pos:end="213:38"><name pos:start="213:33" pos:end="213:38">IF_IDE</name></expr></argument>, <argument pos:start="213:41" pos:end="213:56"><expr pos:start="213:41" pos:end="213:56"><name pos:start="213:41" pos:end="213:41">i</name> <operator pos:start="213:43" pos:end="213:43">/</operator> <name pos:start="213:45" pos:end="213:56">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="213:59" pos:end="213:74"><expr pos:start="213:59" pos:end="213:74"><name pos:start="213:59" pos:end="213:59">i</name> <operator pos:start="213:61" pos:end="213:61">%</operator> <name pos:start="213:63" pos:end="213:74">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="221:25"><if pos:start="215:9" pos:end="217:45">if <condition pos:start="215:12" pos:end="215:24">(<expr pos:start="215:13" pos:end="215:23"><name pos:start="215:13" pos:end="215:17">index</name> <operator pos:start="215:19" pos:end="215:20">!=</operator> <operator pos:start="215:22" pos:end="215:22">-</operator><literal type="number" pos:start="215:23" pos:end="215:23">1</literal></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="217:45"><block_content pos:start="217:13" pos:end="217:45">

            <expr_stmt pos:start="217:13" pos:end="217:45"><expr pos:start="217:13" pos:end="217:44"><name pos:start="217:13" pos:end="217:17"><name pos:start="217:13" pos:end="217:14">hd</name><index pos:start="217:15" pos:end="217:17">[<expr pos:start="217:16" pos:end="217:16"><name pos:start="217:16" pos:end="217:16">i</name></expr>]</index></name> <operator pos:start="217:19" pos:end="217:19">=</operator> <name pos:start="217:21" pos:end="217:39"><name pos:start="217:21" pos:end="217:32">drives_table</name><index pos:start="217:33" pos:end="217:39">[<expr pos:start="217:34" pos:end="217:38"><name pos:start="217:34" pos:end="217:38">index</name></expr>]</index></name><operator pos:start="217:40" pos:end="217:40">.</operator><name pos:start="217:41" pos:end="217:44">bdrv</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="219:9" pos:end="221:25">else<block type="pseudo" pos:start="221:13" pos:end="221:25"><block_content pos:start="221:13" pos:end="221:25">

            <expr_stmt pos:start="221:13" pos:end="221:25"><expr pos:start="221:13" pos:end="221:24"><name pos:start="221:13" pos:end="221:17"><name pos:start="221:13" pos:end="221:14">hd</name><index pos:start="221:15" pos:end="221:17">[<expr pos:start="221:16" pos:end="221:16"><name pos:start="221:16" pos:end="221:16">i</name></expr>]</index></name> <operator pos:start="221:19" pos:end="221:19">=</operator> <name pos:start="221:21" pos:end="221:24">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




    <for pos:start="226:5" pos:end="232:47">for<control pos:start="226:8" pos:end="226:36">(<init pos:start="226:9" pos:end="226:14"><expr pos:start="226:9" pos:end="226:13"><name pos:start="226:9" pos:end="226:9">i</name> <operator pos:start="226:11" pos:end="226:11">=</operator> <literal type="number" pos:start="226:13" pos:end="226:13">0</literal></expr>;</init> <condition pos:start="226:16" pos:end="226:31"><expr pos:start="226:16" pos:end="226:30"><name pos:start="226:16" pos:end="226:16">i</name> <operator pos:start="226:18" pos:end="226:18">&lt;</operator> <name pos:start="226:20" pos:end="226:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="226:33" pos:end="226:35"><expr pos:start="226:33" pos:end="226:35"><name pos:start="226:33" pos:end="226:33">i</name><operator pos:start="226:34" pos:end="226:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="228:9" pos:end="232:47"><block_content pos:start="228:9" pos:end="232:47">

        <expr_stmt pos:start="228:9" pos:end="232:47"><expr pos:start="228:9" pos:end="232:46"><call pos:start="228:9" pos:end="232:46"><name pos:start="228:9" pos:end="228:20">isa_ide_init</name><argument_list pos:start="228:21" pos:end="232:46">(<argument pos:start="228:22" pos:end="228:34"><expr pos:start="228:22" pos:end="228:34"><name pos:start="228:22" pos:end="228:34"><name pos:start="228:22" pos:end="228:31">ide_iobase</name><index pos:start="228:32" pos:end="228:34">[<expr pos:start="228:33" pos:end="228:33"><name pos:start="228:33" pos:end="228:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="228:37" pos:end="228:50"><expr pos:start="228:37" pos:end="228:50"><name pos:start="228:37" pos:end="228:50"><name pos:start="228:37" pos:end="228:47">ide_iobase2</name><index pos:start="228:48" pos:end="228:50">[<expr pos:start="228:49" pos:end="228:49"><name pos:start="228:49" pos:end="228:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="228:53" pos:end="228:69"><expr pos:start="228:53" pos:end="228:69"><name pos:start="228:53" pos:end="228:69"><name pos:start="228:53" pos:end="228:57">i8259</name><index pos:start="228:58" pos:end="228:69">[<expr pos:start="228:59" pos:end="228:68"><name pos:start="228:59" pos:end="228:68"><name pos:start="228:59" pos:end="228:65">ide_irq</name><index pos:start="228:66" pos:end="228:68">[<expr pos:start="228:67" pos:end="228:67"><name pos:start="228:67" pos:end="228:67">i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

                     <argument pos:start="230:22" pos:end="230:41"><expr pos:start="230:22" pos:end="230:41"><name pos:start="230:22" pos:end="230:41"><name pos:start="230:22" pos:end="230:23">hd</name><index pos:start="230:24" pos:end="230:41">[<expr pos:start="230:25" pos:end="230:40"><name pos:start="230:25" pos:end="230:36">MAX_IDE_DEVS</name> <operator pos:start="230:38" pos:end="230:38">*</operator> <name pos:start="230:40" pos:end="230:40">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="232:22" pos:end="232:45"><expr pos:start="232:22" pos:end="232:45"><name pos:start="232:22" pos:end="232:45"><name pos:start="232:22" pos:end="232:23">hd</name><index pos:start="232:24" pos:end="232:45">[<expr pos:start="232:25" pos:end="232:44"><name pos:start="232:25" pos:end="232:36">MAX_IDE_DEVS</name> <operator pos:start="232:38" pos:end="232:38">*</operator> <name pos:start="232:40" pos:end="232:40">i</name> <operator pos:start="232:42" pos:end="232:42">+</operator> <literal type="number" pos:start="232:44" pos:end="232:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="236:5" pos:end="236:42"><expr pos:start="236:5" pos:end="236:41"><call pos:start="236:5" pos:end="236:41"><name pos:start="236:5" pos:end="236:14">i8042_init</name><argument_list pos:start="236:15" pos:end="236:41">(<argument pos:start="236:16" pos:end="236:23"><expr pos:start="236:16" pos:end="236:23"><name pos:start="236:16" pos:end="236:23"><name pos:start="236:16" pos:end="236:20">i8259</name><index pos:start="236:21" pos:end="236:23">[<expr pos:start="236:22" pos:end="236:22"><literal type="number" pos:start="236:22" pos:end="236:22">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="236:26" pos:end="236:34"><expr pos:start="236:26" pos:end="236:34"><name pos:start="236:26" pos:end="236:34"><name pos:start="236:26" pos:end="236:30">i8259</name><index pos:start="236:31" pos:end="236:34">[<expr pos:start="236:32" pos:end="236:33"><literal type="number" pos:start="236:32" pos:end="236:33">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="236:37" pos:end="236:40"><expr pos:start="236:37" pos:end="236:40"><literal type="number" pos:start="236:37" pos:end="236:40">0x60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
