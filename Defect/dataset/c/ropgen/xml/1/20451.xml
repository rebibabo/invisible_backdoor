<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20451.c" pos:tabs="8"><function pos:start="1:1" pos:end="80:15"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">TCGv</name></type> <name pos:start="1:13" pos:end="1:27">gen_lea_indexed</name><parameter_list pos:start="1:28" pos:end="1:74">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:40">CPUM68KState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><name pos:start="1:48" pos:end="1:59">DisasContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">s</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:73"><decl pos:start="1:65" pos:end="1:73"><type pos:start="1:65" pos:end="1:73"><name pos:start="1:65" pos:end="1:68">TCGv</name></type> <name pos:start="1:70" pos:end="1:73">base</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="80:15">{<block_content pos:start="3:5" pos:end="80:15">
    <decl_stmt pos:start="3:5" pos:end="3:20"><decl pos:start="3:5" pos:end="3:19"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:12">uint32_t</name></type> <name pos:start="3:14" pos:end="3:19">offset</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:17"><decl pos:start="4:5" pos:end="4:16"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:12">uint16_t</name></type> <name pos:start="4:14" pos:end="4:16">ext</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">TCGv</name></type> <name pos:start="5:10" pos:end="5:12">add</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:13"><decl pos:start="6:5" pos:end="6:12"><type pos:start="6:5" pos:end="6:8"><name pos:start="6:5" pos:end="6:8">TCGv</name></type> <name pos:start="6:10" pos:end="6:12">tmp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">bd</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">od</name></decl>;</decl_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:19"><expr pos:start="8:5" pos:end="8:18"><name pos:start="8:5" pos:end="8:10">offset</name> <operator pos:start="8:12" pos:end="8:12">=</operator> <name pos:start="8:14" pos:end="8:18"><name pos:start="8:14" pos:end="8:14">s</name><operator pos:start="8:15" pos:end="8:16">-&gt;</operator><name pos:start="8:17" pos:end="8:18">pc</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:36"><expr pos:start="9:5" pos:end="9:35"><name pos:start="9:5" pos:end="9:7">ext</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:35"><name pos:start="9:11" pos:end="9:23">cpu_lduw_code</name><argument_list pos:start="9:24" pos:end="9:35">(<argument pos:start="9:25" pos:end="9:27"><expr pos:start="9:25" pos:end="9:27"><name pos:start="9:25" pos:end="9:27">env</name></expr></argument>, <argument pos:start="9:30" pos:end="9:34"><expr pos:start="9:30" pos:end="9:34"><name pos:start="9:30" pos:end="9:34"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:34">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:15"><expr pos:start="10:5" pos:end="10:14"><name pos:start="10:5" pos:end="10:9"><name pos:start="10:5" pos:end="10:5">s</name><operator pos:start="10:6" pos:end="10:7">-&gt;</operator><name pos:start="10:8" pos:end="10:9">pc</name></name> <operator pos:start="10:11" pos:end="10:12">+=</operator> <literal type="number" pos:start="10:14" pos:end="10:14">2</literal></expr>;</expr_stmt>
    <if_stmt pos:start="11:5" pos:end="12:25"><if pos:start="11:5" pos:end="12:25">if <condition pos:start="11:8" pos:end="11:77">(<expr pos:start="11:9" pos:end="11:76"><operator pos:start="11:9" pos:end="11:9">(</operator><name pos:start="11:10" pos:end="11:12">ext</name> <operator pos:start="11:14" pos:end="11:14">&amp;</operator> <literal type="number" pos:start="11:16" pos:end="11:20">0x800</literal><operator pos:start="11:21" pos:end="11:21">)</operator> <operator pos:start="11:23" pos:end="11:24">==</operator> <literal type="number" pos:start="11:26" pos:end="11:26">0</literal> <operator pos:start="11:28" pos:end="11:29">&amp;&amp;</operator> <operator pos:start="11:31" pos:end="11:31">!</operator><call pos:start="11:32" pos:end="11:76"><name pos:start="11:32" pos:end="11:43">m68k_feature</name><argument_list pos:start="11:44" pos:end="11:76">(<argument pos:start="11:45" pos:end="11:50"><expr pos:start="11:45" pos:end="11:50"><name pos:start="11:45" pos:end="11:50"><name pos:start="11:45" pos:end="11:45">s</name><operator pos:start="11:46" pos:end="11:47">-&gt;</operator><name pos:start="11:48" pos:end="11:50">env</name></name></expr></argument>, <argument pos:start="11:53" pos:end="11:75"><expr pos:start="11:53" pos:end="11:75"><name pos:start="11:53" pos:end="11:75">M68K_FEATURE_WORD_INDEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="12:9" pos:end="12:25"><block_content pos:start="12:9" pos:end="12:25">
        <return pos:start="12:9" pos:end="12:25">return <expr pos:start="12:16" pos:end="12:24"><name pos:start="12:16" pos:end="12:24">NULL_QREG</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="13:5" pos:end="80:15"><if pos:start="13:5" pos:end="80:15">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:11">ext</name> <operator pos:start="13:13" pos:end="13:13">&amp;</operator> <literal type="number" pos:start="13:15" pos:end="13:19">0x100</literal></expr>)</condition> <block pos:start="13:22" pos:end="80:15">{<block_content pos:start="15:9" pos:end="80:15">
        <comment type="block" pos:start="14:9" pos:end="14:40">/* full extension word format */</comment>
        <if_stmt pos:start="15:9" pos:end="16:29"><if pos:start="15:9" pos:end="16:29">if <condition pos:start="15:12" pos:end="15:57">(<expr pos:start="15:13" pos:end="15:56"><operator pos:start="15:13" pos:end="15:13">!</operator><call pos:start="15:14" pos:end="15:56"><name pos:start="15:14" pos:end="15:25">m68k_feature</name><argument_list pos:start="15:26" pos:end="15:56">(<argument pos:start="15:27" pos:end="15:32"><expr pos:start="15:27" pos:end="15:32"><name pos:start="15:27" pos:end="15:32"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:32">env</name></name></expr></argument>, <argument pos:start="15:35" pos:end="15:55"><expr pos:start="15:35" pos:end="15:55"><name pos:start="15:35" pos:end="15:55">M68K_FEATURE_EXT_FULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="16:13" pos:end="16:29"><block_content pos:start="16:13" pos:end="16:29">
            <return pos:start="16:13" pos:end="16:29">return <expr pos:start="16:20" pos:end="16:28"><name pos:start="16:20" pos:end="16:28">NULL_QREG</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="17:9" pos:end="80:15"><if pos:start="17:9" pos:end="80:15">if <condition pos:start="17:12" pos:end="17:32">(<expr pos:start="17:13" pos:end="17:31"><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:16">ext</name> <operator pos:start="17:18" pos:end="17:18">&amp;</operator> <literal type="number" pos:start="17:20" pos:end="17:23">0x30</literal><operator pos:start="17:24" pos:end="17:24">)</operator> <operator pos:start="17:26" pos:end="17:26">&gt;</operator> <literal type="number" pos:start="17:28" pos:end="17:31">0x10</literal></expr>)</condition> <block pos:start="17:34" pos:end="80:15">{<block_content pos:start="19:13" pos:end="80:15">
            <comment type="block" pos:start="18:13" pos:end="18:35">/* base displacement */</comment>
            <if_stmt pos:start="19:13" pos:end="24:9"><if pos:start="19:13" pos:end="22:13">if <condition pos:start="19:16" pos:end="19:37">(<expr pos:start="19:17" pos:end="19:36"><operator pos:start="19:17" pos:end="19:17">(</operator><name pos:start="19:18" pos:end="19:20">ext</name> <operator pos:start="19:22" pos:end="19:22">&amp;</operator> <literal type="number" pos:start="19:24" pos:end="19:27">0x30</literal><operator pos:start="19:28" pos:end="19:28">)</operator> <operator pos:start="19:30" pos:end="19:31">==</operator> <literal type="number" pos:start="19:33" pos:end="19:36">0x20</literal></expr>)</condition> <block pos:start="19:39" pos:end="22:13">{<block_content pos:start="20:17" pos:end="21:27">
                <expr_stmt pos:start="20:17" pos:end="20:56"><expr pos:start="20:17" pos:end="20:55"><name pos:start="20:17" pos:end="20:18">bd</name> <operator pos:start="20:20" pos:end="20:20">=</operator> <operator pos:start="20:22" pos:end="20:22">(</operator><name pos:start="20:23" pos:end="20:29">int16_t</name><operator pos:start="20:30" pos:end="20:30">)</operator><call pos:start="20:31" pos:end="20:55"><name pos:start="20:31" pos:end="20:43">cpu_lduw_code</name><argument_list pos:start="20:44" pos:end="20:55">(<argument pos:start="20:45" pos:end="20:47"><expr pos:start="20:45" pos:end="20:47"><name pos:start="20:45" pos:end="20:47">env</name></expr></argument>, <argument pos:start="20:50" pos:end="20:54"><expr pos:start="20:50" pos:end="20:54"><name pos:start="20:50" pos:end="20:54"><name pos:start="20:50" pos:end="20:50">s</name><operator pos:start="20:51" pos:end="20:52">-&gt;</operator><name pos:start="20:53" pos:end="20:54">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="21:17" pos:end="21:27"><expr pos:start="21:17" pos:end="21:26"><name pos:start="21:17" pos:end="21:21"><name pos:start="21:17" pos:end="21:17">s</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">pc</name></name> <operator pos:start="21:23" pos:end="21:24">+=</operator> <literal type="number" pos:start="21:26" pos:end="21:26">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="22:15" pos:end="24:9">else <block pos:start="22:20" pos:end="24:9">{<block_content pos:start="23:17" pos:end="23:39">
                <expr_stmt pos:start="23:17" pos:end="23:39"><expr pos:start="23:17" pos:end="23:38"><name pos:start="23:17" pos:end="23:18">bd</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <call pos:start="23:22" pos:end="23:38"><name pos:start="23:22" pos:end="23:30">read_im32</name><argument_list pos:start="23:31" pos:end="23:38">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">env</name></expr></argument>, <argument pos:start="23:37" pos:end="23:37"><expr pos:start="23:37" pos:end="23:37"><name pos:start="23:37" pos:end="23:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> <if_stmt pos:start="24:11" pos:end="80:15"><else pos:start="24:11" pos:end="80:15">else <block pos:start="24:16" pos:end="80:15">{<block_content pos:start="25:13" pos:end="80:15">
            <expr_stmt pos:start="25:13" pos:end="25:19"><expr pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:14">bd</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:29"><expr pos:start="26:9" pos:end="26:28"><name pos:start="26:9" pos:end="26:11">tmp</name> <operator pos:start="26:13" pos:end="26:13">=</operator> <call pos:start="26:15" pos:end="26:28"><name pos:start="26:15" pos:end="26:26">tcg_temp_new</name><argument_list pos:start="26:27" pos:end="26:28">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="27:9" pos:end="80:15"><if pos:start="27:9" pos:end="30:9">if <condition pos:start="27:12" pos:end="27:30">(<expr pos:start="27:13" pos:end="27:29"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:16">ext</name> <operator pos:start="27:18" pos:end="27:18">&amp;</operator> <literal type="number" pos:start="27:20" pos:end="27:23">0x44</literal><operator pos:start="27:24" pos:end="27:24">)</operator> <operator pos:start="27:26" pos:end="27:27">==</operator> <literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr>)</condition> <block pos:start="27:32" pos:end="30:9">{<block_content pos:start="29:13" pos:end="29:43">
            <comment type="block" pos:start="28:13" pos:end="28:27">/* pre-index */</comment>
            <expr_stmt pos:start="29:13" pos:end="29:43"><expr pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:15">add</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:42"><name pos:start="29:19" pos:end="29:32">gen_addr_index</name><argument_list pos:start="29:33" pos:end="29:42">(<argument pos:start="29:34" pos:end="29:36"><expr pos:start="29:34" pos:end="29:36"><name pos:start="29:34" pos:end="29:36">ext</name></expr></argument>, <argument pos:start="29:39" pos:end="29:41"><expr pos:start="29:39" pos:end="29:41"><name pos:start="29:39" pos:end="29:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="30:11" pos:end="80:15">else <block pos:start="30:16" pos:end="80:15">{<block_content pos:start="31:13" pos:end="80:15">
            <expr_stmt pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:15">add</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:27">NULL_QREG</name></expr>;</expr_stmt>
        <if_stmt pos:start="32:9" pos:end="80:15"><if pos:start="32:9" pos:end="80:15">if <condition pos:start="32:12" pos:end="32:30">(<expr pos:start="32:13" pos:end="32:29"><operator pos:start="32:13" pos:end="32:13">(</operator><name pos:start="32:14" pos:end="32:16">ext</name> <operator pos:start="32:18" pos:end="32:18">&amp;</operator> <literal type="number" pos:start="32:20" pos:end="32:23">0x80</literal><operator pos:start="32:24" pos:end="32:24">)</operator> <operator pos:start="32:26" pos:end="32:27">==</operator> <literal type="number" pos:start="32:29" pos:end="32:29">0</literal></expr>)</condition> <block pos:start="32:32" pos:end="80:15">{<block_content pos:start="34:13" pos:end="80:15">
            <comment type="block" pos:start="33:13" pos:end="33:37">/* base not suppressed */</comment>
            <if_stmt pos:start="34:13" pos:end="80:15"><if pos:start="34:13" pos:end="80:15">if <condition pos:start="34:16" pos:end="34:35">(<expr pos:start="34:17" pos:end="34:34"><call pos:start="34:17" pos:end="34:34"><name pos:start="34:17" pos:end="34:28">IS_NULL_QREG</name><argument_list pos:start="34:29" pos:end="34:34">(<argument pos:start="34:30" pos:end="34:33"><expr pos:start="34:30" pos:end="34:33"><name pos:start="34:30" pos:end="34:33">base</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="34:37" pos:end="80:15">{<block_content pos:start="35:17" pos:end="80:15">
                <expr_stmt pos:start="35:17" pos:end="35:50"><expr pos:start="35:17" pos:end="35:49"><name pos:start="35:17" pos:end="35:20">base</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:49"><name pos:start="35:24" pos:end="35:36">tcg_const_i32</name><argument_list pos:start="35:37" pos:end="35:49">(<argument pos:start="35:38" pos:end="35:48"><expr pos:start="35:38" pos:end="35:48"><name pos:start="35:38" pos:end="35:43">offset</name> <operator pos:start="35:45" pos:end="35:45">+</operator> <name pos:start="35:47" pos:end="35:48">bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="36:17" pos:end="36:23"><expr pos:start="36:17" pos:end="36:22"><name pos:start="36:17" pos:end="36:18">bd</name> <operator pos:start="36:20" pos:end="36:20">=</operator> <literal type="number" pos:start="36:22" pos:end="36:22">0</literal></expr>;</expr_stmt>
            <if_stmt pos:start="37:13" pos:end="80:15"><if pos:start="37:13" pos:end="40:13">if <condition pos:start="37:16" pos:end="37:35">(<expr pos:start="37:17" pos:end="37:34"><operator pos:start="37:17" pos:end="37:17">!</operator><call pos:start="37:18" pos:end="37:34"><name pos:start="37:18" pos:end="37:29">IS_NULL_QREG</name><argument_list pos:start="37:30" pos:end="37:34">(<argument pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:33">add</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:37" pos:end="40:13">{<block_content pos:start="38:17" pos:end="39:26">
                <expr_stmt pos:start="38:17" pos:end="38:48"><expr pos:start="38:17" pos:end="38:47"><call pos:start="38:17" pos:end="38:47"><name pos:start="38:17" pos:end="38:31">tcg_gen_add_i32</name><argument_list pos:start="38:32" pos:end="38:47">(<argument pos:start="38:33" pos:end="38:35"><expr pos:start="38:33" pos:end="38:35"><name pos:start="38:33" pos:end="38:35">tmp</name></expr></argument>, <argument pos:start="38:38" pos:end="38:40"><expr pos:start="38:38" pos:end="38:40"><name pos:start="38:38" pos:end="38:40">add</name></expr></argument>, <argument pos:start="38:43" pos:end="38:46"><expr pos:start="38:43" pos:end="38:46"><name pos:start="38:43" pos:end="38:46">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="39:17" pos:end="39:26"><expr pos:start="39:17" pos:end="39:25"><name pos:start="39:17" pos:end="39:19">add</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:25">tmp</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="40:15" pos:end="80:15">else <block pos:start="40:20" pos:end="80:15">{<block_content pos:start="41:17" pos:end="80:15">
                <expr_stmt pos:start="41:17" pos:end="41:27"><expr pos:start="41:17" pos:end="41:26"><name pos:start="41:17" pos:end="41:19">add</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:26">base</name></expr>;</expr_stmt>
        <if_stmt pos:start="42:9" pos:end="80:15"><if pos:start="42:9" pos:end="80:15">if <condition pos:start="42:12" pos:end="42:31">(<expr pos:start="42:13" pos:end="42:30"><operator pos:start="42:13" pos:end="42:13">!</operator><call pos:start="42:14" pos:end="42:30"><name pos:start="42:14" pos:end="42:25">IS_NULL_QREG</name><argument_list pos:start="42:26" pos:end="42:30">(<argument pos:start="42:27" pos:end="42:29"><expr pos:start="42:27" pos:end="42:29"><name pos:start="42:27" pos:end="42:29">add</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="42:33" pos:end="80:15">{<block_content pos:start="43:13" pos:end="80:15">
            <if_stmt pos:start="43:13" pos:end="80:15"><if pos:start="43:13" pos:end="46:9">if <condition pos:start="43:16" pos:end="43:24">(<expr pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:18">bd</name> <operator pos:start="43:20" pos:end="43:21">!=</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>)</condition> <block pos:start="43:26" pos:end="46:9">{<block_content pos:start="44:17" pos:end="45:26">
                <expr_stmt pos:start="44:17" pos:end="44:47"><expr pos:start="44:17" pos:end="44:46"><call pos:start="44:17" pos:end="44:46"><name pos:start="44:17" pos:end="44:32">tcg_gen_addi_i32</name><argument_list pos:start="44:33" pos:end="44:46">(<argument pos:start="44:34" pos:end="44:36"><expr pos:start="44:34" pos:end="44:36"><name pos:start="44:34" pos:end="44:36">tmp</name></expr></argument>, <argument pos:start="44:39" pos:end="44:41"><expr pos:start="44:39" pos:end="44:41"><name pos:start="44:39" pos:end="44:41">add</name></expr></argument>, <argument pos:start="44:44" pos:end="44:45"><expr pos:start="44:44" pos:end="44:45"><name pos:start="44:44" pos:end="44:45">bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="45:17" pos:end="45:26"><expr pos:start="45:17" pos:end="45:25"><name pos:start="45:17" pos:end="45:19">add</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:25">tmp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="46:11" pos:end="80:15">else <block pos:start="46:16" pos:end="80:15">{<block_content pos:start="47:13" pos:end="80:15">
            <expr_stmt pos:start="47:13" pos:end="47:36"><expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:15">add</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:35"><name pos:start="47:19" pos:end="47:31">tcg_const_i32</name><argument_list pos:start="47:32" pos:end="47:35">(<argument pos:start="47:33" pos:end="47:34"><expr pos:start="47:33" pos:end="47:34"><name pos:start="47:33" pos:end="47:34">bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="48:9" pos:end="80:15"><if pos:start="48:9" pos:end="80:15">if <condition pos:start="48:12" pos:end="48:27">(<expr pos:start="48:13" pos:end="48:26"><operator pos:start="48:13" pos:end="48:13">(</operator><name pos:start="48:14" pos:end="48:16">ext</name> <operator pos:start="48:18" pos:end="48:18">&amp;</operator> <literal type="number" pos:start="48:20" pos:end="48:20">3</literal><operator pos:start="48:21" pos:end="48:21">)</operator> <operator pos:start="48:23" pos:end="48:24">!=</operator> <literal type="number" pos:start="48:26" pos:end="48:26">0</literal></expr>)</condition> <block pos:start="48:29" pos:end="80:15">{<block_content pos:start="50:13" pos:end="80:15">
            <comment type="block" pos:start="49:13" pos:end="49:33">/* memory indirect */</comment>
            <expr_stmt pos:start="50:13" pos:end="50:48"><expr pos:start="50:13" pos:end="50:47"><name pos:start="50:13" pos:end="50:16">base</name> <operator pos:start="50:18" pos:end="50:18">=</operator> <call pos:start="50:20" pos:end="50:47"><name pos:start="50:20" pos:end="50:27">gen_load</name><argument_list pos:start="50:28" pos:end="50:47">(<argument pos:start="50:29" pos:end="50:29"><expr pos:start="50:29" pos:end="50:29"><name pos:start="50:29" pos:end="50:29">s</name></expr></argument>, <argument pos:start="50:32" pos:end="50:38"><expr pos:start="50:32" pos:end="50:38"><name pos:start="50:32" pos:end="50:38">OS_LONG</name></expr></argument>, <argument pos:start="50:41" pos:end="50:43"><expr pos:start="50:41" pos:end="50:43"><name pos:start="50:41" pos:end="50:43">add</name></expr></argument>, <argument pos:start="50:46" pos:end="50:46"><expr pos:start="50:46" pos:end="50:46"><literal type="number" pos:start="50:46" pos:end="50:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="51:13" pos:end="80:15"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:34">(<expr pos:start="51:17" pos:end="51:33"><operator pos:start="51:17" pos:end="51:17">(</operator><name pos:start="51:18" pos:end="51:20">ext</name> <operator pos:start="51:22" pos:end="51:22">&amp;</operator> <literal type="number" pos:start="51:24" pos:end="51:27">0x44</literal><operator pos:start="51:28" pos:end="51:28">)</operator> <operator pos:start="51:30" pos:end="51:31">==</operator> <literal type="number" pos:start="51:33" pos:end="51:33">4</literal></expr>)</condition> <block pos:start="51:36" pos:end="55:13">{<block_content pos:start="52:17" pos:end="54:26">
                <expr_stmt pos:start="52:17" pos:end="52:47"><expr pos:start="52:17" pos:end="52:46"><name pos:start="52:17" pos:end="52:19">add</name> <operator pos:start="52:21" pos:end="52:21">=</operator> <call pos:start="52:23" pos:end="52:46"><name pos:start="52:23" pos:end="52:36">gen_addr_index</name><argument_list pos:start="52:37" pos:end="52:46">(<argument pos:start="52:38" pos:end="52:40"><expr pos:start="52:38" pos:end="52:40"><name pos:start="52:38" pos:end="52:40">ext</name></expr></argument>, <argument pos:start="52:43" pos:end="52:45"><expr pos:start="52:43" pos:end="52:45"><name pos:start="52:43" pos:end="52:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="53:17" pos:end="53:48"><expr pos:start="53:17" pos:end="53:47"><call pos:start="53:17" pos:end="53:47"><name pos:start="53:17" pos:end="53:31">tcg_gen_add_i32</name><argument_list pos:start="53:32" pos:end="53:47">(<argument pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><name pos:start="53:33" pos:end="53:35">tmp</name></expr></argument>, <argument pos:start="53:38" pos:end="53:40"><expr pos:start="53:38" pos:end="53:40"><name pos:start="53:38" pos:end="53:40">add</name></expr></argument>, <argument pos:start="53:43" pos:end="53:46"><expr pos:start="53:43" pos:end="53:46"><name pos:start="53:43" pos:end="53:46">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="54:17" pos:end="54:26"><expr pos:start="54:17" pos:end="54:25"><name pos:start="54:17" pos:end="54:19">add</name> <operator pos:start="54:21" pos:end="54:21">=</operator> <name pos:start="54:23" pos:end="54:25">tmp</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="55:15" pos:end="80:15">else <block pos:start="55:20" pos:end="80:15">{<block_content pos:start="56:17" pos:end="80:15">
                <expr_stmt pos:start="56:17" pos:end="56:27"><expr pos:start="56:17" pos:end="56:26"><name pos:start="56:17" pos:end="56:19">add</name> <operator pos:start="56:21" pos:end="56:21">=</operator> <name pos:start="56:23" pos:end="56:26">base</name></expr>;</expr_stmt>
            <if_stmt pos:start="57:13" pos:end="80:15"><if pos:start="57:13" pos:end="80:15">if <condition pos:start="57:16" pos:end="57:30">(<expr pos:start="57:17" pos:end="57:29"><operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:20">ext</name> <operator pos:start="57:22" pos:end="57:22">&amp;</operator> <literal type="number" pos:start="57:24" pos:end="57:24">3</literal><operator pos:start="57:25" pos:end="57:25">)</operator> <operator pos:start="57:27" pos:end="57:27">&gt;</operator> <literal type="number" pos:start="57:29" pos:end="57:29">1</literal></expr>)</condition> <block pos:start="57:32" pos:end="80:15">{<block_content pos:start="59:17" pos:end="80:15">
                <comment type="block" pos:start="58:17" pos:end="58:40">/* outer displacement */</comment>
                <if_stmt pos:start="59:17" pos:end="64:13"><if pos:start="59:17" pos:end="62:17">if <condition pos:start="59:20" pos:end="59:35">(<expr pos:start="59:21" pos:end="59:34"><operator pos:start="59:21" pos:end="59:21">(</operator><name pos:start="59:22" pos:end="59:24">ext</name> <operator pos:start="59:26" pos:end="59:26">&amp;</operator> <literal type="number" pos:start="59:28" pos:end="59:28">3</literal><operator pos:start="59:29" pos:end="59:29">)</operator> <operator pos:start="59:31" pos:end="59:32">==</operator> <literal type="number" pos:start="59:34" pos:end="59:34">2</literal></expr>)</condition> <block pos:start="59:37" pos:end="62:17">{<block_content pos:start="60:21" pos:end="61:31">
                    <expr_stmt pos:start="60:21" pos:end="60:60"><expr pos:start="60:21" pos:end="60:59"><name pos:start="60:21" pos:end="60:22">od</name> <operator pos:start="60:24" pos:end="60:24">=</operator> <operator pos:start="60:26" pos:end="60:26">(</operator><name pos:start="60:27" pos:end="60:33">int16_t</name><operator pos:start="60:34" pos:end="60:34">)</operator><call pos:start="60:35" pos:end="60:59"><name pos:start="60:35" pos:end="60:47">cpu_lduw_code</name><argument_list pos:start="60:48" pos:end="60:59">(<argument pos:start="60:49" pos:end="60:51"><expr pos:start="60:49" pos:end="60:51"><name pos:start="60:49" pos:end="60:51">env</name></expr></argument>, <argument pos:start="60:54" pos:end="60:58"><expr pos:start="60:54" pos:end="60:58"><name pos:start="60:54" pos:end="60:58"><name pos:start="60:54" pos:end="60:54">s</name><operator pos:start="60:55" pos:end="60:56">-&gt;</operator><name pos:start="60:57" pos:end="60:58">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="61:21" pos:end="61:31"><expr pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:25"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:25">pc</name></name> <operator pos:start="61:27" pos:end="61:28">+=</operator> <literal type="number" pos:start="61:30" pos:end="61:30">2</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="62:19" pos:end="64:13">else <block pos:start="62:24" pos:end="64:13">{<block_content pos:start="63:21" pos:end="63:43">
                    <expr_stmt pos:start="63:21" pos:end="63:43"><expr pos:start="63:21" pos:end="63:42"><name pos:start="63:21" pos:end="63:22">od</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <call pos:start="63:26" pos:end="63:42"><name pos:start="63:26" pos:end="63:34">read_im32</name><argument_list pos:start="63:35" pos:end="63:42">(<argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:38">env</name></expr></argument>, <argument pos:start="63:41" pos:end="63:41"><expr pos:start="63:41" pos:end="63:41"><name pos:start="63:41" pos:end="63:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="64:15" pos:end="80:15"><else pos:start="64:15" pos:end="80:15">else <block pos:start="64:20" pos:end="80:15">{<block_content pos:start="65:17" pos:end="80:15">
                <expr_stmt pos:start="65:17" pos:end="65:23"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:18">od</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">0</literal></expr>;</expr_stmt>
            <if_stmt pos:start="66:13" pos:end="80:15"><if pos:start="66:13" pos:end="69:5">if <condition pos:start="66:16" pos:end="66:24">(<expr pos:start="66:17" pos:end="66:23"><name pos:start="66:17" pos:end="66:18">od</name> <operator pos:start="66:20" pos:end="66:21">!=</operator> <literal type="number" pos:start="66:23" pos:end="66:23">0</literal></expr>)</condition> <block pos:start="66:26" pos:end="69:5">{<block_content pos:start="67:17" pos:end="68:26">
                <expr_stmt pos:start="67:17" pos:end="67:47"><expr pos:start="67:17" pos:end="67:46"><call pos:start="67:17" pos:end="67:46"><name pos:start="67:17" pos:end="67:32">tcg_gen_addi_i32</name><argument_list pos:start="67:33" pos:end="67:46">(<argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><name pos:start="67:34" pos:end="67:36">tmp</name></expr></argument>, <argument pos:start="67:39" pos:end="67:41"><expr pos:start="67:39" pos:end="67:41"><name pos:start="67:39" pos:end="67:41">add</name></expr></argument>, <argument pos:start="67:44" pos:end="67:45"><expr pos:start="67:44" pos:end="67:45"><name pos:start="67:44" pos:end="67:45">od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="68:17" pos:end="68:26"><expr pos:start="68:17" pos:end="68:25"><name pos:start="68:17" pos:end="68:19">add</name> <operator pos:start="68:21" pos:end="68:21">=</operator> <name pos:start="68:23" pos:end="68:25">tmp</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="69:7" pos:end="80:15">else <block pos:start="69:12" pos:end="80:15">{<block_content pos:start="71:9" pos:end="80:15">
        <comment type="block" pos:start="70:9" pos:end="70:41">/* brief extension word format */</comment>
        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:11">tmp</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:28"><name pos:start="71:15" pos:end="71:26">tcg_temp_new</name><argument_list pos:start="71:27" pos:end="71:28">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="72:9" pos:end="72:39"><expr pos:start="72:9" pos:end="72:38"><name pos:start="72:9" pos:end="72:11">add</name> <operator pos:start="72:13" pos:end="72:13">=</operator> <call pos:start="72:15" pos:end="72:38"><name pos:start="72:15" pos:end="72:28">gen_addr_index</name><argument_list pos:start="72:29" pos:end="72:38">(<argument pos:start="72:30" pos:end="72:32"><expr pos:start="72:30" pos:end="72:32"><name pos:start="72:30" pos:end="72:32">ext</name></expr></argument>, <argument pos:start="72:35" pos:end="72:37"><expr pos:start="72:35" pos:end="72:37"><name pos:start="72:35" pos:end="72:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="73:9" pos:end="80:15"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:32">(<expr pos:start="73:13" pos:end="73:31"><operator pos:start="73:13" pos:end="73:13">!</operator><call pos:start="73:14" pos:end="73:31"><name pos:start="73:14" pos:end="73:25">IS_NULL_QREG</name><argument_list pos:start="73:26" pos:end="73:31">(<argument pos:start="73:27" pos:end="73:30"><expr pos:start="73:27" pos:end="73:30"><name pos:start="73:27" pos:end="73:30">base</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:34" pos:end="77:9">{<block_content pos:start="74:13" pos:end="76:56">
            <expr_stmt pos:start="74:13" pos:end="74:44"><expr pos:start="74:13" pos:end="74:43"><call pos:start="74:13" pos:end="74:43"><name pos:start="74:13" pos:end="74:27">tcg_gen_add_i32</name><argument_list pos:start="74:28" pos:end="74:43">(<argument pos:start="74:29" pos:end="74:31"><expr pos:start="74:29" pos:end="74:31"><name pos:start="74:29" pos:end="74:31">tmp</name></expr></argument>, <argument pos:start="74:34" pos:end="74:36"><expr pos:start="74:34" pos:end="74:36"><name pos:start="74:34" pos:end="74:36">add</name></expr></argument>, <argument pos:start="74:39" pos:end="74:42"><expr pos:start="74:39" pos:end="74:42"><name pos:start="74:39" pos:end="74:42">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="75:13" pos:end="76:56"><if pos:start="75:13" pos:end="76:56">if <condition pos:start="75:16" pos:end="75:28">(<expr pos:start="75:17" pos:end="75:27"><operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:23">int8_t</name><operator pos:start="75:24" pos:end="75:24">)</operator><name pos:start="75:25" pos:end="75:27">ext</name></expr>)</condition><block type="pseudo" pos:start="76:17" pos:end="76:56"><block_content pos:start="76:17" pos:end="76:56">
                <expr_stmt pos:start="76:17" pos:end="76:56"><expr pos:start="76:17" pos:end="76:55"><call pos:start="76:17" pos:end="76:55"><name pos:start="76:17" pos:end="76:32">tcg_gen_addi_i32</name><argument_list pos:start="76:33" pos:end="76:55">(<argument pos:start="76:34" pos:end="76:36"><expr pos:start="76:34" pos:end="76:36"><name pos:start="76:34" pos:end="76:36">tmp</name></expr></argument>, <argument pos:start="76:39" pos:end="76:41"><expr pos:start="76:39" pos:end="76:41"><name pos:start="76:39" pos:end="76:41">tmp</name></expr></argument>, <argument pos:start="76:44" pos:end="76:54"><expr pos:start="76:44" pos:end="76:54"><operator pos:start="76:44" pos:end="76:44">(</operator><name pos:start="76:45" pos:end="76:50">int8_t</name><operator pos:start="76:51" pos:end="76:51">)</operator><name pos:start="76:52" pos:end="76:54">ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="77:11" pos:end="80:15">else <block pos:start="77:16" pos:end="80:15">{<block_content pos:start="78:13" pos:end="80:15">
            <expr_stmt pos:start="78:13" pos:end="78:61"><expr pos:start="78:13" pos:end="78:60"><call pos:start="78:13" pos:end="78:60"><name pos:start="78:13" pos:end="78:28">tcg_gen_addi_i32</name><argument_list pos:start="78:29" pos:end="78:60">(<argument pos:start="78:30" pos:end="78:32"><expr pos:start="78:30" pos:end="78:32"><name pos:start="78:30" pos:end="78:32">tmp</name></expr></argument>, <argument pos:start="78:35" pos:end="78:37"><expr pos:start="78:35" pos:end="78:37"><name pos:start="78:35" pos:end="78:37">add</name></expr></argument>, <argument pos:start="78:40" pos:end="78:59"><expr pos:start="78:40" pos:end="78:59"><name pos:start="78:40" pos:end="78:45">offset</name> <operator pos:start="78:47" pos:end="78:47">+</operator> <operator pos:start="78:49" pos:end="78:49">(</operator><name pos:start="78:50" pos:end="78:55">int8_t</name><operator pos:start="78:56" pos:end="78:56">)</operator><name pos:start="78:57" pos:end="78:59">ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:18"><expr pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:11">add</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:17">tmp</name></expr>;</expr_stmt>
    <return pos:start="80:5" pos:end="80:15">return <expr pos:start="80:12" pos:end="80:14"><name pos:start="80:12" pos:end="80:14">add</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
