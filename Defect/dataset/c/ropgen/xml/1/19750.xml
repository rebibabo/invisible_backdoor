<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19750.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">vmxnet3_process_tx_queue</name><parameter_list pos:start="1:37" pos:end="1:63">(<parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:49">VMXNET3State</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:62"><decl pos:start="1:55" pos:end="1:62"><type pos:start="1:55" pos:end="1:62"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:62">qidx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:25">Vmxnet3_TxDesc</name></name></type> <name pos:start="5:27" pos:end="5:29">txd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:20">txd_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:21">data_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:18">data_pa</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="95:5">for <control pos:start="15:9" pos:end="15:12">(<init pos:start="15:10" pos:end="15:10">;</init><condition pos:start="15:11" pos:end="15:11">;</condition><incr/>)</control> <block pos:start="15:14" pos:end="95:5">{<block_content pos:start="17:9" pos:end="93:9">

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:64">(<expr pos:start="17:13" pos:end="17:63"><operator pos:start="17:13" pos:end="17:13">!</operator><call pos:start="17:14" pos:end="17:63"><name pos:start="17:14" pos:end="17:38">vmxnet3_pop_next_tx_descr</name><argument_list pos:start="17:39" pos:end="17:63">(<argument pos:start="17:40" pos:end="17:40"><expr pos:start="17:40" pos:end="17:40"><name pos:start="17:40" pos:end="17:40">s</name></expr></argument>, <argument pos:start="17:43" pos:end="17:46"><expr pos:start="17:43" pos:end="17:46"><name pos:start="17:43" pos:end="17:46">qidx</name></expr></argument>, <argument pos:start="17:49" pos:end="17:52"><expr pos:start="17:49" pos:end="17:52"><operator pos:start="17:49" pos:end="17:49">&amp;</operator><name pos:start="17:50" pos:end="17:52">txd</name></expr></argument>, <argument pos:start="17:55" pos:end="17:62"><expr pos:start="17:55" pos:end="17:62"><operator pos:start="17:55" pos:end="17:55">&amp;</operator><name pos:start="17:56" pos:end="17:62">txd_idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:66" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:18">

            <break pos:start="19:13" pos:end="19:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><call pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:29">vmxnet3_dump_tx_descr</name><argument_list pos:start="25:30" pos:end="25:35">(<argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><operator pos:start="25:31" pos:end="25:31">&amp;</operator><name pos:start="25:32" pos:end="25:34">txd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="29:9" pos:end="47:9"><if pos:start="29:9" pos:end="47:9">if <condition pos:start="29:12" pos:end="29:36">(<expr pos:start="29:13" pos:end="29:35"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:35"><name pos:start="29:14" pos:end="29:14">s</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:35">skip_current_tx_pkt</name></name></expr>)</condition> <block pos:start="29:38" pos:end="47:9">{<block_content pos:start="31:13" pos:end="45:13">

            <expr_stmt pos:start="31:13" pos:end="31:73"><expr pos:start="31:13" pos:end="31:72"><name pos:start="31:13" pos:end="31:20">data_len</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <ternary pos:start="31:24" pos:end="31:72"><condition pos:start="31:24" pos:end="31:38"><expr pos:start="31:24" pos:end="31:36"><operator pos:start="31:24" pos:end="31:24">(</operator><name pos:start="31:25" pos:end="31:31"><name pos:start="31:25" pos:end="31:27">txd</name><operator pos:start="31:28" pos:end="31:28">.</operator><name pos:start="31:29" pos:end="31:31">len</name></name> <operator pos:start="31:33" pos:end="31:33">&gt;</operator> <literal type="number" pos:start="31:35" pos:end="31:35">0</literal><operator pos:start="31:36" pos:end="31:36">)</operator></expr> ?</condition><then pos:start="31:40" pos:end="31:46"> <expr pos:start="31:40" pos:end="31:46"><name pos:start="31:40" pos:end="31:46"><name pos:start="31:40" pos:end="31:42">txd</name><operator pos:start="31:43" pos:end="31:43">.</operator><name pos:start="31:44" pos:end="31:46">len</name></name></expr> </then><else pos:start="31:48" pos:end="31:72">: <expr pos:start="31:50" pos:end="31:72"><name pos:start="31:50" pos:end="31:72">VMXNET3_MAX_TX_BUF_SIZE</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:44"><expr pos:start="33:13" pos:end="33:43"><name pos:start="33:13" pos:end="33:19">data_pa</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:43"><name pos:start="33:23" pos:end="33:33">le64_to_cpu</name><argument_list pos:start="33:34" pos:end="33:43">(<argument pos:start="33:35" pos:end="33:42"><expr pos:start="33:35" pos:end="33:42"><name pos:start="33:35" pos:end="33:42"><name pos:start="33:35" pos:end="33:37">txd</name><operator pos:start="33:38" pos:end="33:38">.</operator><name pos:start="33:39" pos:end="33:42">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="37:13" pos:end="45:13"><if pos:start="37:13" pos:end="45:13">if <condition pos:start="37:16" pos:end="41:58">(<expr pos:start="37:17" pos:end="41:57"><operator pos:start="37:17" pos:end="37:17">!</operator><call pos:start="37:18" pos:end="41:57"><name pos:start="37:18" pos:end="37:44">net_tx_pkt_add_raw_fragment</name><argument_list pos:start="37:45" pos:end="41:57">(<argument pos:start="37:46" pos:end="37:54"><expr pos:start="37:46" pos:end="37:54"><name pos:start="37:46" pos:end="37:54"><name pos:start="37:46" pos:end="37:46">s</name><operator pos:start="37:47" pos:end="37:48">-&gt;</operator><name pos:start="37:49" pos:end="37:54">tx_pkt</name></name></expr></argument>,

                                                <argument pos:start="39:49" pos:end="39:55"><expr pos:start="39:49" pos:end="39:55"><name pos:start="39:49" pos:end="39:55">data_pa</name></expr></argument>,

                                                <argument pos:start="41:49" pos:end="41:56"><expr pos:start="41:49" pos:end="41:56"><name pos:start="41:49" pos:end="41:56">data_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:60" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:46">

                <expr_stmt pos:start="43:17" pos:end="43:46"><expr pos:start="43:17" pos:end="43:45"><name pos:start="43:17" pos:end="43:38"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:38">skip_current_tx_pkt</name></name> <operator pos:start="43:40" pos:end="43:40">=</operator> <name pos:start="43:42" pos:end="43:45">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:22">(<expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">tx_sop</name></name></expr>)</condition> <block pos:start="51:24" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:30">

            <expr_stmt pos:start="53:13" pos:end="53:50"><expr pos:start="53:13" pos:end="53:49"><call pos:start="53:13" pos:end="53:49"><name pos:start="53:13" pos:end="53:40">vmxnet3_tx_retrieve_metadata</name><argument_list pos:start="53:41" pos:end="53:49">(<argument pos:start="53:42" pos:end="53:42"><expr pos:start="53:42" pos:end="53:42"><name pos:start="53:42" pos:end="53:42">s</name></expr></argument>, <argument pos:start="53:45" pos:end="53:48"><expr pos:start="53:45" pos:end="53:48"><operator pos:start="53:45" pos:end="53:45">&amp;</operator><name pos:start="53:46" pos:end="53:48">txd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:30"><expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:21">tx_sop</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:29">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="61:9" pos:end="93:9"><if pos:start="61:9" pos:end="93:9">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">txd</name><operator pos:start="61:16" pos:end="61:16">.</operator><name pos:start="61:17" pos:end="61:19">eop</name></name></expr>)</condition> <block pos:start="61:22" pos:end="93:9">{<block_content pos:start="63:13" pos:end="91:40">

            <if_stmt pos:start="63:13" pos:end="81:13"><if pos:start="63:13" pos:end="75:13">if <condition pos:start="63:16" pos:end="63:71">(<expr pos:start="63:17" pos:end="63:70"><operator pos:start="63:17" pos:end="63:17">!</operator><name pos:start="63:18" pos:end="63:39"><name pos:start="63:18" pos:end="63:18">s</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:39">skip_current_tx_pkt</name></name> <operator pos:start="63:41" pos:end="63:42">&amp;&amp;</operator> <call pos:start="63:44" pos:end="63:70"><name pos:start="63:44" pos:end="63:59">net_tx_pkt_parse</name><argument_list pos:start="63:60" pos:end="63:70">(<argument pos:start="63:61" pos:end="63:69"><expr pos:start="63:61" pos:end="63:69"><name pos:start="63:61" pos:end="63:69"><name pos:start="63:61" pos:end="63:61">s</name><operator pos:start="63:62" pos:end="63:63">-&gt;</operator><name pos:start="63:64" pos:end="63:69">tx_pkt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:73" pos:end="75:13">{<block_content pos:start="65:17" pos:end="73:45">

                <if_stmt pos:start="65:17" pos:end="69:17"><if pos:start="65:17" pos:end="69:17">if <condition pos:start="65:20" pos:end="65:34">(<expr pos:start="65:21" pos:end="65:33"><name pos:start="65:21" pos:end="65:33"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:33">needs_vlan</name></name></expr>)</condition> <block pos:start="65:36" pos:end="69:17">{<block_content pos:start="67:21" pos:end="67:68">

                    <expr_stmt pos:start="67:21" pos:end="67:68"><expr pos:start="67:21" pos:end="67:67"><call pos:start="67:21" pos:end="67:67"><name pos:start="67:21" pos:end="67:48">net_tx_pkt_setup_vlan_header</name><argument_list pos:start="67:49" pos:end="67:67">(<argument pos:start="67:50" pos:end="67:58"><expr pos:start="67:50" pos:end="67:58"><name pos:start="67:50" pos:end="67:58"><name pos:start="67:50" pos:end="67:50">s</name><operator pos:start="67:51" pos:end="67:52">-&gt;</operator><name pos:start="67:53" pos:end="67:58">tx_pkt</name></name></expr></argument>, <argument pos:start="67:61" pos:end="67:66"><expr pos:start="67:61" pos:end="67:66"><name pos:start="67:61" pos:end="67:66"><name pos:start="67:61" pos:end="67:61">s</name><operator pos:start="67:62" pos:end="67:63">-&gt;</operator><name pos:start="67:64" pos:end="67:66">tci</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="73:17" pos:end="73:45"><expr pos:start="73:17" pos:end="73:44"><call pos:start="73:17" pos:end="73:44"><name pos:start="73:17" pos:end="73:35">vmxnet3_send_packet</name><argument_list pos:start="73:36" pos:end="73:44">(<argument pos:start="73:37" pos:end="73:37"><expr pos:start="73:37" pos:end="73:37"><name pos:start="73:37" pos:end="73:37">s</name></expr></argument>, <argument pos:start="73:40" pos:end="73:43"><expr pos:start="73:40" pos:end="73:43"><name pos:start="73:40" pos:end="73:43">qidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="81:13">else <block pos:start="75:20" pos:end="81:13">{<block_content pos:start="77:17" pos:end="79:74">

                <expr_stmt pos:start="77:17" pos:end="79:74"><expr pos:start="77:17" pos:end="79:73"><call pos:start="77:17" pos:end="79:73"><name pos:start="77:17" pos:end="77:47">vmxnet3_on_tx_done_update_stats</name><argument_list pos:start="77:48" pos:end="79:73">(<argument pos:start="77:49" pos:end="77:49"><expr pos:start="77:49" pos:end="77:49"><name pos:start="77:49" pos:end="77:49">s</name></expr></argument>, <argument pos:start="77:52" pos:end="77:55"><expr pos:start="77:52" pos:end="77:55"><name pos:start="77:52" pos:end="77:55">qidx</name></expr></argument>,

                                                <argument pos:start="79:49" pos:end="79:72"><expr pos:start="79:49" pos:end="79:72"><name pos:start="79:49" pos:end="79:72">VMXNET3_PKT_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:54"><expr pos:start="85:13" pos:end="85:53"><call pos:start="85:13" pos:end="85:53"><name pos:start="85:13" pos:end="85:35">vmxnet3_complete_packet</name><argument_list pos:start="85:36" pos:end="85:53">(<argument pos:start="85:37" pos:end="85:37"><expr pos:start="85:37" pos:end="85:37"><name pos:start="85:37" pos:end="85:37">s</name></expr></argument>, <argument pos:start="85:40" pos:end="85:43"><expr pos:start="85:40" pos:end="85:43"><name pos:start="85:40" pos:end="85:43">qidx</name></expr></argument>, <argument pos:start="85:46" pos:end="85:52"><expr pos:start="85:46" pos:end="85:52"><name pos:start="85:46" pos:end="85:52">txd_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:29"><expr pos:start="87:13" pos:end="87:28"><name pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:21">tx_sop</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:28">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:43"><expr pos:start="89:13" pos:end="89:42"><name pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:34">skip_current_tx_pkt</name></name> <operator pos:start="89:36" pos:end="89:36">=</operator> <name pos:start="89:38" pos:end="89:42">false</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:40"><expr pos:start="91:13" pos:end="91:39"><call pos:start="91:13" pos:end="91:39"><name pos:start="91:13" pos:end="91:28">net_tx_pkt_reset</name><argument_list pos:start="91:29" pos:end="91:39">(<argument pos:start="91:30" pos:end="91:38"><expr pos:start="91:30" pos:end="91:38"><name pos:start="91:30" pos:end="91:38"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:38">tx_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
