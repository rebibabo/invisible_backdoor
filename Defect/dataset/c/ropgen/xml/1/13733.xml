<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13733.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">parse_object_segment</name><parameter_list pos:start="1:32" pos:end="2:67">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,
                                  <parameter pos:start="2:35" pos:end="2:52"><decl pos:start="2:35" pos:end="2:52"><type pos:start="2:35" pos:end="2:52"><specifier pos:start="2:35" pos:end="2:39">const</specifier> <name pos:start="2:41" pos:end="2:47">uint8_t</name> <modifier pos:start="2:49" pos:end="2:49">*</modifier></type><name pos:start="2:50" pos:end="2:52">buf</name></decl></parameter>, <parameter pos:start="2:55" pos:end="2:66"><decl pos:start="2:55" pos:end="2:66"><type pos:start="2:55" pos:end="2:66"><name pos:start="2:55" pos:end="2:57">int</name></type> <name pos:start="2:59" pos:end="2:66">buf_size</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="47:13">{<block_content pos:start="4:5" pos:end="47:13">
    <decl_stmt pos:start="4:5" pos:end="4:42"><decl pos:start="4:5" pos:end="4:41"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:17">PGSSubContext</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:22">ctx</name> <init pos:start="4:24" pos:end="4:41">= <expr pos:start="4:26" pos:end="4:41"><name pos:start="4:26" pos:end="4:41"><name pos:start="4:26" pos:end="4:30">avctx</name><operator pos:start="4:31" pos:end="4:32">-&gt;</operator><name pos:start="4:33" pos:end="4:41">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">PGSSubObject</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:24">object</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:26"><decl pos:start="6:5" pos:end="6:25"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:11">uint8_t</name></type> <name pos:start="6:13" pos:end="6:25">sequence_desc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:31">rle_bitmap_len</name></decl>, <decl pos:start="7:34" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:34" pos:end="7:38">width</name></decl>, <decl pos:start="7:41" pos:end="7:46"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:41" pos:end="7:46">height</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:11"><decl pos:start="8:5" pos:end="8:10"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:10">id</name></decl>;</decl_stmt>
    <if_stmt pos:start="9:5" pos:end="10:18"><if pos:start="9:5" pos:end="10:18">if <condition pos:start="9:8" pos:end="9:22">(<expr pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:16">buf_size</name> <operator pos:start="9:18" pos:end="9:19">&lt;=</operator> <literal type="number" pos:start="9:21" pos:end="9:21">4</literal></expr>)</condition><block type="pseudo" pos:start="10:5" pos:end="10:18"><block_content pos:start="10:5" pos:end="10:18">
    <expr_stmt pos:start="10:5" pos:end="10:18"><expr pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:12">buf_size</name> <operator pos:start="10:14" pos:end="10:15">-=</operator> <literal type="number" pos:start="10:17" pos:end="10:17">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:35"><expr pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:6">id</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:34"><name pos:start="11:10" pos:end="11:28">bytestream_get_be16</name><argument_list pos:start="11:29" pos:end="11:34">(<argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><operator pos:start="11:30" pos:end="11:30">&amp;</operator><name pos:start="11:31" pos:end="11:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:44"><expr pos:start="12:5" pos:end="12:43"><name pos:start="12:5" pos:end="12:10">object</name> <operator pos:start="12:12" pos:end="12:12">=</operator> <call pos:start="12:14" pos:end="12:43"><name pos:start="12:14" pos:end="12:24">find_object</name><argument_list pos:start="12:25" pos:end="12:43">(<argument pos:start="12:26" pos:end="12:27"><expr pos:start="12:26" pos:end="12:27"><name pos:start="12:26" pos:end="12:27">id</name></expr></argument>, <argument pos:start="12:30" pos:end="12:42"><expr pos:start="12:30" pos:end="12:42"><operator pos:start="12:30" pos:end="12:30">&amp;</operator><name pos:start="12:31" pos:end="12:42"><name pos:start="12:31" pos:end="12:33">ctx</name><operator pos:start="12:34" pos:end="12:35">-&gt;</operator><name pos:start="12:36" pos:end="12:42">objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="13:5" pos:end="47:13"><if pos:start="13:5" pos:end="47:13">if <condition pos:start="13:8" pos:end="13:16">(<expr pos:start="13:9" pos:end="13:15"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:15">object</name></expr>)</condition> <block pos:start="13:18" pos:end="47:13">{<block_content pos:start="14:9" pos:end="47:13">
        <if_stmt pos:start="14:9" pos:end="47:13"><if pos:start="14:9" pos:end="47:13">if <condition pos:start="14:12" pos:end="14:52">(<expr pos:start="14:13" pos:end="14:51"><name pos:start="14:13" pos:end="14:30"><name pos:start="14:13" pos:end="14:15">ctx</name><operator pos:start="14:16" pos:end="14:17">-&gt;</operator><name pos:start="14:18" pos:end="14:24">objects</name><operator pos:start="14:25" pos:end="14:25">.</operator><name pos:start="14:26" pos:end="14:30">count</name></name> <operator pos:start="14:32" pos:end="14:33">&gt;=</operator> <name pos:start="14:35" pos:end="14:51">MAX_EPOCH_OBJECTS</name></expr>)</condition> <block pos:start="14:54" pos:end="47:13">{<block_content pos:start="15:13" pos:end="47:13">
            <expr_stmt pos:start="15:13" pos:end="15:71"><expr pos:start="15:13" pos:end="15:70"><call pos:start="15:13" pos:end="15:70"><name pos:start="15:13" pos:end="15:18">av_log</name><argument_list pos:start="15:19" pos:end="15:70">(<argument pos:start="15:20" pos:end="15:24"><expr pos:start="15:20" pos:end="15:24"><name pos:start="15:20" pos:end="15:24">avctx</name></expr></argument>, <argument pos:start="15:27" pos:end="15:38"><expr pos:start="15:27" pos:end="15:38"><name pos:start="15:27" pos:end="15:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:41" pos:end="15:69"><expr pos:start="15:41" pos:end="15:69"><literal type="string" pos:start="15:41" pos:end="15:69">"Too many objects in epoch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:60"><expr pos:start="16:9" pos:end="16:59"><name pos:start="16:9" pos:end="16:14">object</name> <operator pos:start="16:16" pos:end="16:16">=</operator> <operator pos:start="16:18" pos:end="16:18">&amp;</operator><name pos:start="16:19" pos:end="16:59"><name pos:start="16:19" pos:end="16:21">ctx</name><operator pos:start="16:22" pos:end="16:23">-&gt;</operator><name pos:start="16:24" pos:end="16:30">objects</name><operator pos:start="16:31" pos:end="16:31">.</operator><name pos:start="16:32" pos:end="16:37">object</name><index pos:start="16:38" pos:end="16:59">[<expr pos:start="16:39" pos:end="16:58"><name pos:start="16:39" pos:end="16:56"><name pos:start="16:39" pos:end="16:41">ctx</name><operator pos:start="16:42" pos:end="16:43">-&gt;</operator><name pos:start="16:44" pos:end="16:50">objects</name><operator pos:start="16:51" pos:end="16:51">.</operator><name pos:start="16:52" pos:end="16:56">count</name></name><operator pos:start="16:57" pos:end="16:58">++</operator></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:24"><expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:14">object</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:18">id</name></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:23">id</name></expr>;</expr_stmt>
    <comment type="block" pos:start="18:5" pos:end="18:36">/* skip object version number */</comment>
    <expr_stmt pos:start="19:5" pos:end="19:13"><expr pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:7">buf</name> <operator pos:start="19:9" pos:end="19:10">+=</operator> <literal type="number" pos:start="19:12" pos:end="19:12">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="20:5" pos:end="20:101">/* Read the Sequence Description to determine if start of RLE data or appended to previous RLE */</comment>
    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:17">sequence_desc</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:45"><name pos:start="21:21" pos:end="21:39">bytestream_get_byte</name><argument_list pos:start="21:40" pos:end="21:45">(<argument pos:start="21:41" pos:end="21:44"><expr pos:start="21:41" pos:end="21:44"><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="47:13"><if pos:start="22:5" pos:end="47:13">if <condition pos:start="22:8" pos:end="22:32">(<expr pos:start="22:9" pos:end="22:31"><operator pos:start="22:9" pos:end="22:9">!</operator><operator pos:start="22:10" pos:end="22:10">(</operator><name pos:start="22:11" pos:end="22:23">sequence_desc</name> <operator pos:start="22:25" pos:end="22:25">&amp;</operator> <literal type="number" pos:start="22:27" pos:end="22:30">0x80</literal><operator pos:start="22:31" pos:end="22:31">)</operator></expr>)</condition> <block pos:start="22:34" pos:end="47:13">{<block_content pos:start="24:9" pos:end="47:13">
        <comment type="block" pos:start="23:9" pos:end="23:33">/* Additional RLE data */</comment>
        <if_stmt pos:start="24:9" pos:end="25:66"><if pos:start="24:9" pos:end="25:66">if <condition pos:start="24:12" pos:end="24:49">(<expr pos:start="24:13" pos:end="24:48"><name pos:start="24:13" pos:end="24:20">buf_size</name> <operator pos:start="24:22" pos:end="24:22">&gt;</operator> <name pos:start="24:24" pos:end="24:48"><name pos:start="24:24" pos:end="24:29">object</name><operator pos:start="24:30" pos:end="24:31">-&gt;</operator><name pos:start="24:32" pos:end="24:48">rle_remaining_len</name></name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:66"><block_content pos:start="25:9" pos:end="25:66">
        <expr_stmt pos:start="25:9" pos:end="25:66"><expr pos:start="25:9" pos:end="25:65"><call pos:start="25:9" pos:end="25:65"><name pos:start="25:9" pos:end="25:14">memcpy</name><argument_list pos:start="25:15" pos:end="25:65">(<argument pos:start="25:16" pos:end="25:49"><expr pos:start="25:16" pos:end="25:49"><name pos:start="25:16" pos:end="25:26"><name pos:start="25:16" pos:end="25:21">object</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:26">rle</name></name> <operator pos:start="25:28" pos:end="25:28">+</operator> <name pos:start="25:30" pos:end="25:49"><name pos:start="25:30" pos:end="25:35">object</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:49">rle_data_len</name></name></expr></argument>, <argument pos:start="25:52" pos:end="25:54"><expr pos:start="25:52" pos:end="25:54"><name pos:start="25:52" pos:end="25:54">buf</name></expr></argument>, <argument pos:start="25:57" pos:end="25:64"><expr pos:start="25:57" pos:end="25:64"><name pos:start="25:57" pos:end="25:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:41"><expr pos:start="26:9" pos:end="26:40"><name pos:start="26:9" pos:end="26:28"><name pos:start="26:9" pos:end="26:14">object</name><operator pos:start="26:15" pos:end="26:16">-&gt;</operator><name pos:start="26:17" pos:end="26:28">rle_data_len</name></name> <operator pos:start="26:30" pos:end="26:31">+=</operator> <name pos:start="26:33" pos:end="26:40">buf_size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:46"><expr pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:14">object</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:33">rle_remaining_len</name></name> <operator pos:start="27:35" pos:end="27:36">-=</operator> <name pos:start="27:38" pos:end="27:45">buf_size</name></expr>;</expr_stmt>
        <return pos:start="28:9" pos:end="28:17">return <expr pos:start="28:16" pos:end="28:16"><literal type="number" pos:start="28:16" pos:end="28:16">0</literal></expr>;</return>
    <if_stmt pos:start="29:5" pos:end="30:18"><if pos:start="29:5" pos:end="30:18">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">buf_size</name> <operator pos:start="29:18" pos:end="29:19">&lt;=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">7</literal></expr>)</condition><block type="pseudo" pos:start="30:5" pos:end="30:18"><block_content pos:start="30:5" pos:end="30:18">
    <expr_stmt pos:start="30:5" pos:end="30:18"><expr pos:start="30:5" pos:end="30:17"><name pos:start="30:5" pos:end="30:12">buf_size</name> <operator pos:start="30:14" pos:end="30:15">-=</operator> <literal type="number" pos:start="30:17" pos:end="30:17">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="31:5" pos:end="31:74">/* Decode rle bitmap length, stored size includes width/height data */</comment>
    <expr_stmt pos:start="32:5" pos:end="32:53"><expr pos:start="32:5" pos:end="32:52"><name pos:start="32:5" pos:end="32:18">rle_bitmap_len</name> <operator pos:start="32:20" pos:end="32:20">=</operator> <call pos:start="32:22" pos:end="32:46"><name pos:start="32:22" pos:end="32:40">bytestream_get_be24</name><argument_list pos:start="32:41" pos:end="32:46">(<argument pos:start="32:42" pos:end="32:45"><expr pos:start="32:42" pos:end="32:45"><operator pos:start="32:42" pos:end="32:42">&amp;</operator><name pos:start="32:43" pos:end="32:45">buf</name></expr></argument>)</argument_list></call> <operator pos:start="32:48" pos:end="32:48">-</operator> <literal type="number" pos:start="32:50" pos:end="32:50">2</literal><operator pos:start="32:51" pos:end="32:51">*</operator><literal type="number" pos:start="32:52" pos:end="32:52">2</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="33:5" pos:end="33:41">/* Get bitmap dimensions from data */</comment>
    <expr_stmt pos:start="34:5" pos:end="34:39"><expr pos:start="34:5" pos:end="34:38"><name pos:start="34:5" pos:end="34:9">width</name>  <operator pos:start="34:12" pos:end="34:12">=</operator> <call pos:start="34:14" pos:end="34:38"><name pos:start="34:14" pos:end="34:32">bytestream_get_be16</name><argument_list pos:start="34:33" pos:end="34:38">(<argument pos:start="34:34" pos:end="34:37"><expr pos:start="34:34" pos:end="34:37"><operator pos:start="34:34" pos:end="34:34">&amp;</operator><name pos:start="34:35" pos:end="34:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:10">height</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:38"><name pos:start="35:14" pos:end="35:32">bytestream_get_be16</name><argument_list pos:start="35:33" pos:end="35:38">(<argument pos:start="35:34" pos:end="35:37"><expr pos:start="35:34" pos:end="35:37"><operator pos:start="35:34" pos:end="35:34">&amp;</operator><name pos:start="35:35" pos:end="35:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="36:5" pos:end="36:47">/* Make sure the bitmap is not too large */</comment>
    <if_stmt pos:start="37:5" pos:end="47:13"><if pos:start="37:5" pos:end="47:13">if <condition pos:start="37:8" pos:end="37:55">(<expr pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">width</name></name> <operator pos:start="37:22" pos:end="37:22">&lt;</operator> <name pos:start="37:24" pos:end="37:28">width</name> <operator pos:start="37:30" pos:end="37:31">||</operator> <name pos:start="37:33" pos:end="37:45"><name pos:start="37:33" pos:end="37:37">avctx</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:45">height</name></name> <operator pos:start="37:47" pos:end="37:47">&lt;</operator> <name pos:start="37:49" pos:end="37:54">height</name></expr>)</condition> <block pos:start="37:57" pos:end="47:13">{<block_content pos:start="38:9" pos:end="47:13">
        <expr_stmt pos:start="38:9" pos:end="38:78"><expr pos:start="38:9" pos:end="38:77"><call pos:start="38:9" pos:end="38:77"><name pos:start="38:9" pos:end="38:14">av_log</name><argument_list pos:start="38:15" pos:end="38:77">(<argument pos:start="38:16" pos:end="38:20"><expr pos:start="38:16" pos:end="38:20"><name pos:start="38:16" pos:end="38:20">avctx</name></expr></argument>, <argument pos:start="38:23" pos:end="38:34"><expr pos:start="38:23" pos:end="38:34"><name pos:start="38:23" pos:end="38:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="38:37" pos:end="38:76"><expr pos:start="38:37" pos:end="38:76"><literal type="string" pos:start="38:37" pos:end="38:76">"Bitmap dimensions larger than video.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:22"><expr pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:10">object</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:13">w</name></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:21">width</name></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:23"><expr pos:start="40:5" pos:end="40:22"><name pos:start="40:5" pos:end="40:13"><name pos:start="40:5" pos:end="40:10">object</name><operator pos:start="40:11" pos:end="40:12">-&gt;</operator><name pos:start="40:13" pos:end="40:13">h</name></name> <operator pos:start="40:15" pos:end="40:15">=</operator> <name pos:start="40:17" pos:end="40:22">height</name></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:75"><expr pos:start="41:5" pos:end="41:74"><call pos:start="41:5" pos:end="41:74"><name pos:start="41:5" pos:end="41:18">av_fast_malloc</name><argument_list pos:start="41:19" pos:end="41:74">(<argument pos:start="41:20" pos:end="41:31"><expr pos:start="41:20" pos:end="41:31"><operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:26">object</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:31">rle</name></name></expr></argument>, <argument pos:start="41:34" pos:end="41:57"><expr pos:start="41:34" pos:end="41:57"><operator pos:start="41:34" pos:end="41:34">&amp;</operator><name pos:start="41:35" pos:end="41:57"><name pos:start="41:35" pos:end="41:40">object</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:57">rle_buffer_size</name></name></expr></argument>, <argument pos:start="41:60" pos:end="41:73"><expr pos:start="41:60" pos:end="41:73"><name pos:start="41:60" pos:end="41:73">rle_bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="42:5" pos:end="43:31"><if pos:start="42:5" pos:end="43:31">if <condition pos:start="42:8" pos:end="42:21">(<expr pos:start="42:9" pos:end="42:20"><operator pos:start="42:9" pos:end="42:9">!</operator><name pos:start="42:10" pos:end="42:20"><name pos:start="42:10" pos:end="42:15">object</name><operator pos:start="42:16" pos:end="42:17">-&gt;</operator><name pos:start="42:18" pos:end="42:20">rle</name></name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:31"><block_content pos:start="43:9" pos:end="43:31">
        <return pos:start="43:9" pos:end="43:31">return <expr pos:start="43:16" pos:end="43:30"><call pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:39"><expr pos:start="44:5" pos:end="44:38"><call pos:start="44:5" pos:end="44:38"><name pos:start="44:5" pos:end="44:10">memcpy</name><argument_list pos:start="44:11" pos:end="44:38">(<argument pos:start="44:12" pos:end="44:22"><expr pos:start="44:12" pos:end="44:22"><name pos:start="44:12" pos:end="44:22"><name pos:start="44:12" pos:end="44:17">object</name><operator pos:start="44:18" pos:end="44:19">-&gt;</operator><name pos:start="44:20" pos:end="44:22">rle</name></name></expr></argument>, <argument pos:start="44:25" pos:end="44:27"><expr pos:start="44:25" pos:end="44:27"><name pos:start="44:25" pos:end="44:27">buf</name></expr></argument>, <argument pos:start="44:30" pos:end="44:37"><expr pos:start="44:30" pos:end="44:37"><name pos:start="44:30" pos:end="44:37">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:36"><expr pos:start="45:5" pos:end="45:35"><name pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:10">object</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:24">rle_data_len</name></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <name pos:start="45:28" pos:end="45:35">buf_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:58"><expr pos:start="46:5" pos:end="46:57"><name pos:start="46:5" pos:end="46:29"><name pos:start="46:5" pos:end="46:10">object</name><operator pos:start="46:11" pos:end="46:12">-&gt;</operator><name pos:start="46:13" pos:end="46:29">rle_remaining_len</name></name> <operator pos:start="46:31" pos:end="46:31">=</operator> <name pos:start="46:33" pos:end="46:46">rle_bitmap_len</name> <operator pos:start="46:48" pos:end="46:48">-</operator> <name pos:start="46:50" pos:end="46:57">buf_size</name></expr>;</expr_stmt>
    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
