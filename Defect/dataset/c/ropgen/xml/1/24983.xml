<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24983.c" pos:tabs="8"><function pos:start="1:1" pos:end="265:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_drive_mirror</name><parameter_list pos:start="1:22" pos:end="19:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">target</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:37"><decl pos:start="3:23" pos:end="3:37"><type pos:start="3:23" pos:end="3:37"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:37">has_format</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">format</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:46"><decl pos:start="5:23" pos:end="5:46"><type pos:start="5:23" pos:end="5:46"><name pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:26">enum</name> <name pos:start="5:28" pos:end="5:41">MirrorSyncMode</name></name></type> <name pos:start="5:43" pos:end="5:46">sync</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:35"><decl pos:start="7:23" pos:end="7:35"><type pos:start="7:23" pos:end="7:35"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:35">has_mode</name></decl></parameter>, <parameter pos:start="7:38" pos:end="7:59"><decl pos:start="7:38" pos:end="7:59"><type pos:start="7:38" pos:end="7:59"><name pos:start="7:38" pos:end="7:54"><name pos:start="7:38" pos:end="7:41">enum</name> <name pos:start="7:43" pos:end="7:54">NewImageMode</name></name></type> <name pos:start="7:56" pos:end="7:59">mode</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:36"><decl pos:start="9:23" pos:end="9:36"><type pos:start="9:23" pos:end="9:36"><name pos:start="9:23" pos:end="9:26">bool</name></type> <name pos:start="9:28" pos:end="9:36">has_speed</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:51"><decl pos:start="9:39" pos:end="9:51"><type pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:45">int64_t</name></type> <name pos:start="9:47" pos:end="9:51">speed</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:42"><decl pos:start="11:23" pos:end="11:42"><type pos:start="11:23" pos:end="11:42"><name pos:start="11:23" pos:end="11:26">bool</name></type> <name pos:start="11:28" pos:end="11:42">has_granularity</name></decl></parameter>, <parameter pos:start="11:45" pos:end="11:64"><decl pos:start="11:45" pos:end="11:64"><type pos:start="11:45" pos:end="11:64"><name pos:start="11:45" pos:end="11:52">uint32_t</name></type> <name pos:start="11:54" pos:end="11:64">granularity</name></decl></parameter>,

                      <parameter pos:start="13:23" pos:end="13:39"><decl pos:start="13:23" pos:end="13:39"><type pos:start="13:23" pos:end="13:39"><name pos:start="13:23" pos:end="13:26">bool</name></type> <name pos:start="13:28" pos:end="13:39">has_buf_size</name></decl></parameter>, <parameter pos:start="13:42" pos:end="13:57"><decl pos:start="13:42" pos:end="13:57"><type pos:start="13:42" pos:end="13:57"><name pos:start="13:42" pos:end="13:48">int64_t</name></type> <name pos:start="13:50" pos:end="13:57">buf_size</name></decl></parameter>,

                      <parameter pos:start="15:23" pos:end="15:46"><decl pos:start="15:23" pos:end="15:46"><type pos:start="15:23" pos:end="15:46"><name pos:start="15:23" pos:end="15:26">bool</name></type> <name pos:start="15:28" pos:end="15:46">has_on_source_error</name></decl></parameter>, <parameter pos:start="15:49" pos:end="15:79"><decl pos:start="15:49" pos:end="15:79"><type pos:start="15:49" pos:end="15:79"><name pos:start="15:49" pos:end="15:63">BlockdevOnError</name></type> <name pos:start="15:65" pos:end="15:79">on_source_error</name></decl></parameter>,

                      <parameter pos:start="17:23" pos:end="17:46"><decl pos:start="17:23" pos:end="17:46"><type pos:start="17:23" pos:end="17:46"><name pos:start="17:23" pos:end="17:26">bool</name></type> <name pos:start="17:28" pos:end="17:46">has_on_target_error</name></decl></parameter>, <parameter pos:start="17:49" pos:end="17:79"><decl pos:start="17:49" pos:end="17:79"><type pos:start="17:49" pos:end="17:79"><name pos:start="17:49" pos:end="17:63">BlockdevOnError</name></type> <name pos:start="17:65" pos:end="17:79">on_target_error</name></decl></parameter>,

                      <parameter pos:start="19:23" pos:end="19:34"><decl pos:start="19:23" pos:end="19:34"><type pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:27">Error</name> <modifier pos:start="19:29" pos:end="19:29">*</modifier><modifier pos:start="19:30" pos:end="19:30">*</modifier></type><name pos:start="19:31" pos:end="19:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="21:1" pos:end="265:1">{<block_content pos:start="23:5" pos:end="263:5">

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:20">BlockDriverState</name> <modifier pos:start="23:22" pos:end="23:22">*</modifier></type><name pos:start="23:23" pos:end="23:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:20">BlockDriverState</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:28">source</name></decl>, <decl pos:start="25:31" pos:end="25:40"><type ref="prev" pos:start="25:5" pos:end="25:22"><modifier pos:start="25:31" pos:end="25:31">*</modifier></type><name pos:start="25:32" pos:end="25:40">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">BlockDriver</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:20">drv</name> <init pos:start="27:22" pos:end="27:27">= <expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9">Error</name> <modifier pos:start="29:11" pos:end="29:11">*</modifier></type><name pos:start="29:12" pos:end="29:20">local_err</name> <init pos:start="29:22" pos:end="29:27">= <expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:14"><decl pos:start="31:5" pos:end="31:13"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:17"><decl pos:start="33:5" pos:end="33:16"><type pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:11">int64_t</name></type> <name pos:start="33:13" pos:end="33:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:12"><decl pos:start="35:5" pos:end="35:11"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:18">has_speed</name></expr>)</condition> <block pos:start="39:21" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:18">

        <expr_stmt pos:start="41:9" pos:end="41:18"><expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:13">speed</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:29">(<expr pos:start="45:9" pos:end="45:28"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:28">has_on_source_error</name></expr>)</condition> <block pos:start="45:31" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:51">

        <expr_stmt pos:start="47:9" pos:end="47:51"><expr pos:start="47:9" pos:end="47:50"><name pos:start="47:9" pos:end="47:23">on_source_error</name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:29">(<expr pos:start="51:9" pos:end="51:28"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:28">has_on_target_error</name></expr>)</condition> <block pos:start="51:31" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:51">

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:23">on_target_error</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:18">(<expr pos:start="57:9" pos:end="57:17"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:17">has_mode</name></expr>)</condition> <block pos:start="57:20" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:45">

        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:12">mode</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:44">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:25">(<expr pos:start="63:9" pos:end="63:24"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:24">has_granularity</name></expr>)</condition> <block pos:start="63:27" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:24">

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:19">granularity</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <literal type="number" pos:start="65:23" pos:end="65:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:21">has_buf_size</name></expr>)</condition> <block pos:start="69:24" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:43">

        <expr_stmt pos:start="71:9" pos:end="71:43"><expr pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:16">buf_size</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <name pos:start="71:20" pos:end="71:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:78">(<expr pos:start="77:9" pos:end="77:77"><name pos:start="77:9" pos:end="77:19">granularity</name> <operator pos:start="77:21" pos:end="77:22">!=</operator> <literal type="number" pos:start="77:24" pos:end="77:24">0</literal> <operator pos:start="77:26" pos:end="77:27">&amp;&amp;</operator> <operator pos:start="77:29" pos:end="77:29">(</operator><name pos:start="77:30" pos:end="77:63"><name pos:start="77:30" pos:end="77:40">granularity</name> <argument_list type="generic" pos:start="77:42" pos:end="77:63">&lt; <argument pos:start="77:44" pos:end="77:61"><expr pos:start="77:44" pos:end="77:61"><literal type="number" pos:start="77:44" pos:end="77:46">512</literal> <operator pos:start="77:48" pos:end="77:49">||</operator> <name pos:start="77:51" pos:end="77:61">granularity</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="77:65" pos:end="77:71">1048576</literal> <operator pos:start="77:73" pos:end="77:73">*</operator> <literal type="number" pos:start="77:75" pos:end="77:76">64</literal><operator pos:start="77:77" pos:end="77:77">)</operator></expr>)</condition> <block pos:start="77:80" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:15">

        <expr_stmt pos:start="79:9" pos:end="79:56"><expr pos:start="79:9" pos:end="79:55"><call pos:start="79:9" pos:end="79:55"><name pos:start="79:9" pos:end="79:17">error_set</name><argument_list pos:start="79:18" pos:end="79:55">(<argument pos:start="79:19" pos:end="79:22"><expr pos:start="79:19" pos:end="79:22"><name pos:start="79:19" pos:end="79:22">errp</name></expr></argument>, <argument pos:start="79:25" pos:end="79:46"><expr pos:start="79:25" pos:end="79:46"><name pos:start="79:25" pos:end="79:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="79:49" pos:end="79:54"><expr pos:start="79:49" pos:end="79:54"><name pos:start="79:49" pos:end="79:54">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:40">(<expr pos:start="85:9" pos:end="85:39"><name pos:start="85:9" pos:end="85:19">granularity</name> <operator pos:start="85:21" pos:end="85:21">&amp;</operator> <operator pos:start="85:23" pos:end="85:23">(</operator><name pos:start="85:24" pos:end="85:34">granularity</name> <operator pos:start="85:36" pos:end="85:36">-</operator> <literal type="number" pos:start="85:38" pos:end="85:38">1</literal><operator pos:start="85:39" pos:end="85:39">)</operator></expr>)</condition> <block pos:start="85:42" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:15">

        <expr_stmt pos:start="87:9" pos:end="87:56"><expr pos:start="87:9" pos:end="87:55"><call pos:start="87:9" pos:end="87:55"><name pos:start="87:9" pos:end="87:17">error_set</name><argument_list pos:start="87:18" pos:end="87:55">(<argument pos:start="87:19" pos:end="87:22"><expr pos:start="87:19" pos:end="87:22"><name pos:start="87:19" pos:end="87:22">errp</name></expr></argument>, <argument pos:start="87:25" pos:end="87:46"><expr pos:start="87:25" pos:end="87:46"><name pos:start="87:25" pos:end="87:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="87:49" pos:end="87:54"><expr pos:start="87:49" pos:end="87:54"><name pos:start="87:49" pos:end="87:54">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:6">bs</name> <operator pos:start="95:8" pos:end="95:8">=</operator> <call pos:start="95:10" pos:end="95:26"><name pos:start="95:10" pos:end="95:18">bdrv_find</name><argument_list pos:start="95:19" pos:end="95:26">(<argument pos:start="95:20" pos:end="95:25"><expr pos:start="95:20" pos:end="95:25"><name pos:start="95:20" pos:end="95:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:12">(<expr pos:start="97:9" pos:end="97:11"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:11">bs</name></expr>)</condition> <block pos:start="97:14" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:15">

        <expr_stmt pos:start="99:9" pos:end="99:55"><expr pos:start="99:9" pos:end="99:54"><call pos:start="99:9" pos:end="99:54"><name pos:start="99:9" pos:end="99:17">error_set</name><argument_list pos:start="99:18" pos:end="99:54">(<argument pos:start="99:19" pos:end="99:22"><expr pos:start="99:19" pos:end="99:22"><name pos:start="99:19" pos:end="99:22">errp</name></expr></argument>, <argument pos:start="99:25" pos:end="99:45"><expr pos:start="99:25" pos:end="99:45"><name pos:start="99:25" pos:end="99:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="99:48" pos:end="99:53"><expr pos:start="99:48" pos:end="99:53"><name pos:start="99:48" pos:end="99:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:30">(<expr pos:start="107:9" pos:end="107:29"><operator pos:start="107:9" pos:end="107:9">!</operator><call pos:start="107:10" pos:end="107:29"><name pos:start="107:10" pos:end="107:25">bdrv_is_inserted</name><argument_list pos:start="107:26" pos:end="107:29">(<argument pos:start="107:27" pos:end="107:28"><expr pos:start="107:27" pos:end="107:28"><name pos:start="107:27" pos:end="107:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:32" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:15">

        <expr_stmt pos:start="109:9" pos:end="109:59"><expr pos:start="109:9" pos:end="109:58"><call pos:start="109:9" pos:end="109:58"><name pos:start="109:9" pos:end="109:17">error_set</name><argument_list pos:start="109:18" pos:end="109:58">(<argument pos:start="109:19" pos:end="109:22"><expr pos:start="109:19" pos:end="109:22"><name pos:start="109:19" pos:end="109:22">errp</name></expr></argument>, <argument pos:start="109:25" pos:end="109:49"><expr pos:start="109:25" pos:end="109:49"><name pos:start="109:25" pos:end="109:49">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="109:52" pos:end="109:57"><expr pos:start="109:52" pos:end="109:57"><name pos:start="109:52" pos:end="109:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:20">(<expr pos:start="117:9" pos:end="117:19"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:19">has_format</name></expr>)</condition> <block pos:start="117:22" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:79">

        <expr_stmt pos:start="119:9" pos:end="119:79"><expr pos:start="119:9" pos:end="119:78"><name pos:start="119:9" pos:end="119:14">format</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <ternary pos:start="119:18" pos:end="119:78"><condition pos:start="119:18" pos:end="119:50"><expr pos:start="119:18" pos:end="119:48"><name pos:start="119:18" pos:end="119:21">mode</name> <operator pos:start="119:23" pos:end="119:24">==</operator> <name pos:start="119:26" pos:end="119:48">NEW_IMAGE_MODE_EXISTING</name></expr> ?</condition><then pos:start="119:52" pos:end="119:55"> <expr pos:start="119:52" pos:end="119:55"><name pos:start="119:52" pos:end="119:55">NULL</name></expr> </then><else pos:start="119:57" pos:end="119:78">: <expr pos:start="119:59" pos:end="119:78"><name pos:start="119:59" pos:end="119:78"><name pos:start="119:59" pos:end="119:60">bs</name><operator pos:start="119:61" pos:end="119:62">-&gt;</operator><name pos:start="119:63" pos:end="119:65">drv</name><operator pos:start="119:66" pos:end="119:67">-&gt;</operator><name pos:start="119:68" pos:end="119:78">format_name</name></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="123:5" pos:end="135:5"><if pos:start="123:5" pos:end="135:5">if <condition pos:start="123:8" pos:end="123:15">(<expr pos:start="123:9" pos:end="123:14"><name pos:start="123:9" pos:end="123:14">format</name></expr>)</condition> <block pos:start="123:17" pos:end="135:5">{<block_content pos:start="125:9" pos:end="133:9">

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:11">drv</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="125:38"><name pos:start="125:15" pos:end="125:30">bdrv_find_format</name><argument_list pos:start="125:31" pos:end="125:38">(<argument pos:start="125:32" pos:end="125:37"><expr pos:start="125:32" pos:end="125:37"><name pos:start="125:32" pos:end="125:37">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:17">(<expr pos:start="127:13" pos:end="127:16"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:16">drv</name></expr>)</condition> <block pos:start="127:19" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:19">

            <expr_stmt pos:start="129:13" pos:end="129:63"><expr pos:start="129:13" pos:end="129:62"><call pos:start="129:13" pos:end="129:62"><name pos:start="129:13" pos:end="129:21">error_set</name><argument_list pos:start="129:22" pos:end="129:62">(<argument pos:start="129:23" pos:end="129:26"><expr pos:start="129:23" pos:end="129:26"><name pos:start="129:23" pos:end="129:26">errp</name></expr></argument>, <argument pos:start="129:29" pos:end="129:53"><expr pos:start="129:29" pos:end="129:53"><name pos:start="129:29" pos:end="129:53">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="129:56" pos:end="129:61"><expr pos:start="129:56" pos:end="129:61"><name pos:start="129:56" pos:end="129:61">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:24">(<expr pos:start="139:9" pos:end="139:23"><call pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:19">bdrv_in_use</name><argument_list pos:start="139:20" pos:end="139:23">(<argument pos:start="139:21" pos:end="139:22"><expr pos:start="139:21" pos:end="139:22"><name pos:start="139:21" pos:end="139:22">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:26" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:15">

        <expr_stmt pos:start="141:9" pos:end="141:52"><expr pos:start="141:9" pos:end="141:51"><call pos:start="141:9" pos:end="141:51"><name pos:start="141:9" pos:end="141:17">error_set</name><argument_list pos:start="141:18" pos:end="141:51">(<argument pos:start="141:19" pos:end="141:22"><expr pos:start="141:19" pos:end="141:22"><name pos:start="141:19" pos:end="141:22">errp</name></expr></argument>, <argument pos:start="141:25" pos:end="141:42"><expr pos:start="141:25" pos:end="141:42"><name pos:start="141:25" pos:end="141:42">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="141:45" pos:end="141:50"><expr pos:start="141:45" pos:end="141:50"><name pos:start="141:45" pos:end="141:50">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:41"><expr pos:start="149:5" pos:end="149:40"><name pos:start="149:5" pos:end="149:9">flags</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <name pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:14">bs</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:26">open_flags</name></name> <operator pos:start="149:28" pos:end="149:28">|</operator> <name pos:start="149:30" pos:end="149:40">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:28"><expr pos:start="151:5" pos:end="151:27"><name pos:start="151:5" pos:end="151:10">source</name> <operator pos:start="151:12" pos:end="151:12">=</operator> <name pos:start="151:14" pos:end="151:27"><name pos:start="151:14" pos:end="151:15">bs</name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:27">backing_hd</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="157:5"><if pos:start="153:5" pos:end="157:5">if <condition pos:start="153:8" pos:end="153:48">(<expr pos:start="153:9" pos:end="153:47"><operator pos:start="153:9" pos:end="153:9">!</operator><name pos:start="153:10" pos:end="153:15">source</name> <operator pos:start="153:17" pos:end="153:18">&amp;&amp;</operator> <name pos:start="153:20" pos:end="153:23">sync</name> <operator pos:start="153:25" pos:end="153:26">==</operator> <name pos:start="153:28" pos:end="153:47">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="153:50" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:37">

        <expr_stmt pos:start="155:9" pos:end="155:37"><expr pos:start="155:9" pos:end="155:36"><name pos:start="155:9" pos:end="155:12">sync</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <name pos:start="155:16" pos:end="155:36">MIRROR_SYNC_MODE_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:30"><expr pos:start="161:5" pos:end="161:29"><name pos:start="161:5" pos:end="161:8">size</name> <operator pos:start="161:10" pos:end="161:10">=</operator> <call pos:start="161:12" pos:end="161:29"><name pos:start="161:12" pos:end="161:25">bdrv_getlength</name><argument_list pos:start="161:26" pos:end="161:29">(<argument pos:start="161:27" pos:end="161:28"><expr pos:start="161:27" pos:end="161:28"><name pos:start="161:27" pos:end="161:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:17">(<expr pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:12">size</name> <operator pos:start="163:14" pos:end="163:14">&lt;</operator> <literal type="number" pos:start="163:16" pos:end="163:16">0</literal></expr>)</condition> <block pos:start="163:19" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:15">

        <expr_stmt pos:start="165:9" pos:end="165:63"><expr pos:start="165:9" pos:end="165:62"><call pos:start="165:9" pos:end="165:62"><name pos:start="165:9" pos:end="165:24">error_setg_errno</name><argument_list pos:start="165:25" pos:end="165:62">(<argument pos:start="165:26" pos:end="165:29"><expr pos:start="165:26" pos:end="165:29"><name pos:start="165:26" pos:end="165:29">errp</name></expr></argument>, <argument pos:start="165:32" pos:end="165:36"><expr pos:start="165:32" pos:end="165:36"><operator pos:start="165:32" pos:end="165:32">-</operator><name pos:start="165:33" pos:end="165:36">size</name></expr></argument>, <argument pos:start="165:39" pos:end="165:61"><expr pos:start="165:39" pos:end="165:61"><literal type="string" pos:start="165:39" pos:end="165:61">"bdrv_getlength failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="211:5"><if pos:start="173:5" pos:end="183:5">if <condition pos:start="173:8" pos:end="173:73">(<expr pos:start="173:9" pos:end="173:72"><name pos:start="173:9" pos:end="173:12">sync</name> <operator pos:start="173:14" pos:end="173:15">==</operator> <name pos:start="173:17" pos:end="173:37">MIRROR_SYNC_MODE_FULL</name> <operator pos:start="173:39" pos:end="173:40">&amp;&amp;</operator> <name pos:start="173:42" pos:end="173:45">mode</name> <operator pos:start="173:47" pos:end="173:48">!=</operator> <name pos:start="173:50" pos:end="173:72">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="173:75" pos:end="183:5">{<block_content pos:start="177:9" pos:end="181:74">

        <comment type="block" pos:start="175:9" pos:end="175:47">/* create new image w/o backing file */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:30"><expr pos:start="177:9" pos:end="177:29"><call pos:start="177:9" pos:end="177:29"><name pos:start="177:9" pos:end="177:14">assert</name><argument_list pos:start="177:15" pos:end="177:29">(<argument pos:start="177:16" pos:end="177:28"><expr pos:start="177:16" pos:end="177:28"><name pos:start="177:16" pos:end="177:21">format</name> <operator pos:start="177:23" pos:end="177:24">&amp;&amp;</operator> <name pos:start="177:26" pos:end="177:28">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="181:74"><expr pos:start="179:9" pos:end="181:73"><call pos:start="179:9" pos:end="181:73"><name pos:start="179:9" pos:end="179:23">bdrv_img_create</name><argument_list pos:start="179:24" pos:end="181:73">(<argument pos:start="179:25" pos:end="179:30"><expr pos:start="179:25" pos:end="179:30"><name pos:start="179:25" pos:end="179:30">target</name></expr></argument>, <argument pos:start="179:33" pos:end="179:38"><expr pos:start="179:33" pos:end="179:38"><name pos:start="179:33" pos:end="179:38">format</name></expr></argument>,

                        <argument pos:start="181:25" pos:end="181:28"><expr pos:start="181:25" pos:end="181:28"><name pos:start="181:25" pos:end="181:28">NULL</name></expr></argument>, <argument pos:start="181:31" pos:end="181:34"><expr pos:start="181:31" pos:end="181:34"><name pos:start="181:31" pos:end="181:34">NULL</name></expr></argument>, <argument pos:start="181:37" pos:end="181:40"><expr pos:start="181:37" pos:end="181:40"><name pos:start="181:37" pos:end="181:40">NULL</name></expr></argument>, <argument pos:start="181:43" pos:end="181:46"><expr pos:start="181:43" pos:end="181:46"><name pos:start="181:43" pos:end="181:46">size</name></expr></argument>, <argument pos:start="181:49" pos:end="181:53"><expr pos:start="181:49" pos:end="181:53"><name pos:start="181:49" pos:end="181:53">flags</name></expr></argument>, <argument pos:start="181:56" pos:end="181:65"><expr pos:start="181:56" pos:end="181:65"><operator pos:start="181:56" pos:end="181:56">&amp;</operator><name pos:start="181:57" pos:end="181:65">local_err</name></expr></argument>, <argument pos:start="181:68" pos:end="181:72"><expr pos:start="181:68" pos:end="181:72"><name pos:start="181:68" pos:end="181:72">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="211:5">else <block pos:start="183:12" pos:end="211:5">{<block_content pos:start="185:9" pos:end="209:9">

        <switch pos:start="185:9" pos:end="209:9">switch <condition pos:start="185:16" pos:end="185:21">(<expr pos:start="185:17" pos:end="185:20"><name pos:start="185:17" pos:end="185:20">mode</name></expr>)</condition> <block pos:start="185:23" pos:end="209:9">{<block_content pos:start="187:9" pos:end="207:20">

        <case pos:start="187:9" pos:end="187:37">case <expr pos:start="187:14" pos:end="187:36"><name pos:start="187:14" pos:end="187:36">NEW_IMAGE_MODE_EXISTING</name></expr>:</case>

            <break pos:start="189:13" pos:end="189:18">break;</break>

        <case pos:start="191:9" pos:end="191:43">case <expr pos:start="191:14" pos:end="191:42"><name pos:start="191:14" pos:end="191:42">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>:</case>

            <comment type="block" pos:start="193:13" pos:end="193:52">/* create new image with backing file */</comment>

            <expr_stmt pos:start="195:13" pos:end="201:66"><expr pos:start="195:13" pos:end="201:65"><call pos:start="195:13" pos:end="201:65"><name pos:start="195:13" pos:end="195:27">bdrv_img_create</name><argument_list pos:start="195:28" pos:end="201:65">(<argument pos:start="195:29" pos:end="195:34"><expr pos:start="195:29" pos:end="195:34"><name pos:start="195:29" pos:end="195:34">target</name></expr></argument>, <argument pos:start="195:37" pos:end="195:42"><expr pos:start="195:37" pos:end="195:42"><name pos:start="195:37" pos:end="195:42">format</name></expr></argument>,

                            <argument pos:start="197:29" pos:end="197:44"><expr pos:start="197:29" pos:end="197:44"><name pos:start="197:29" pos:end="197:44"><name pos:start="197:29" pos:end="197:34">source</name><operator pos:start="197:35" pos:end="197:36">-&gt;</operator><name pos:start="197:37" pos:end="197:44">filename</name></name></expr></argument>,

                            <argument pos:start="199:29" pos:end="199:52"><expr pos:start="199:29" pos:end="199:52"><name pos:start="199:29" pos:end="199:52"><name pos:start="199:29" pos:end="199:34">source</name><operator pos:start="199:35" pos:end="199:36">-&gt;</operator><name pos:start="199:37" pos:end="199:39">drv</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:52">format_name</name></name></expr></argument>,

                            <argument pos:start="201:29" pos:end="201:32"><expr pos:start="201:29" pos:end="201:32"><name pos:start="201:29" pos:end="201:32">NULL</name></expr></argument>, <argument pos:start="201:35" pos:end="201:38"><expr pos:start="201:35" pos:end="201:38"><name pos:start="201:35" pos:end="201:38">size</name></expr></argument>, <argument pos:start="201:41" pos:end="201:45"><expr pos:start="201:41" pos:end="201:45"><name pos:start="201:41" pos:end="201:45">flags</name></expr></argument>, <argument pos:start="201:48" pos:end="201:57"><expr pos:start="201:48" pos:end="201:57"><operator pos:start="201:48" pos:end="201:48">&amp;</operator><name pos:start="201:49" pos:end="201:57">local_err</name></expr></argument>, <argument pos:start="201:60" pos:end="201:64"><expr pos:start="201:60" pos:end="201:64"><name pos:start="201:60" pos:end="201:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="203:13" pos:end="203:18">break;</break>

        <default pos:start="205:9" pos:end="205:16">default:</default>

            <expr_stmt pos:start="207:13" pos:end="207:20"><expr pos:start="207:13" pos:end="207:19"><call pos:start="207:13" pos:end="207:19"><name pos:start="207:13" pos:end="207:17">abort</name><argument_list pos:start="207:18" pos:end="207:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="215:5" pos:end="221:5"><if pos:start="215:5" pos:end="221:5">if <condition pos:start="215:8" pos:end="215:33">(<expr pos:start="215:9" pos:end="215:32"><call pos:start="215:9" pos:end="215:32"><name pos:start="215:9" pos:end="215:20">error_is_set</name><argument_list pos:start="215:21" pos:end="215:32">(<argument pos:start="215:22" pos:end="215:31"><expr pos:start="215:22" pos:end="215:31"><operator pos:start="215:22" pos:end="215:22">&amp;</operator><name pos:start="215:23" pos:end="215:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="215:35" pos:end="221:5">{<block_content pos:start="217:9" pos:end="219:15">

        <expr_stmt pos:start="217:9" pos:end="217:41"><expr pos:start="217:9" pos:end="217:40"><call pos:start="217:9" pos:end="217:40"><name pos:start="217:9" pos:end="217:23">error_propagate</name><argument_list pos:start="217:24" pos:end="217:40">(<argument pos:start="217:25" pos:end="217:28"><expr pos:start="217:25" pos:end="217:28"><name pos:start="217:25" pos:end="217:28">errp</name></expr></argument>, <argument pos:start="217:31" pos:end="217:39"><expr pos:start="217:31" pos:end="217:39"><name pos:start="217:31" pos:end="217:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="219:9" pos:end="219:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="225:5" pos:end="229:7">/* Mirroring takes care of copy-on-write using the source's backing

     * file.

     */</comment>

    <expr_stmt pos:start="231:5" pos:end="231:29"><expr pos:start="231:5" pos:end="231:28"><name pos:start="231:5" pos:end="231:13">target_bs</name> <operator pos:start="231:15" pos:end="231:15">=</operator> <call pos:start="231:17" pos:end="231:28"><name pos:start="231:17" pos:end="231:24">bdrv_new</name><argument_list pos:start="231:25" pos:end="231:28">(<argument pos:start="231:26" pos:end="231:27"><expr pos:start="231:26" pos:end="231:27"><literal type="string" pos:start="231:26" pos:end="231:27">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="235:32"><expr pos:start="233:5" pos:end="235:31"><name pos:start="233:5" pos:end="233:7">ret</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="235:31"><name pos:start="233:11" pos:end="233:19">bdrv_open</name><argument_list pos:start="233:20" pos:end="235:31">(<argument pos:start="233:21" pos:end="233:29"><expr pos:start="233:21" pos:end="233:29"><name pos:start="233:21" pos:end="233:29">target_bs</name></expr></argument>, <argument pos:start="233:32" pos:end="233:37"><expr pos:start="233:32" pos:end="233:37"><name pos:start="233:32" pos:end="233:37">target</name></expr></argument>, <argument pos:start="233:40" pos:end="233:43"><expr pos:start="233:40" pos:end="233:43"><name pos:start="233:40" pos:end="233:43">NULL</name></expr></argument>, <argument pos:start="233:46" pos:end="233:70"><expr pos:start="233:46" pos:end="233:70"><name pos:start="233:46" pos:end="233:50">flags</name> <operator pos:start="233:52" pos:end="233:52">|</operator> <name pos:start="233:54" pos:end="233:70">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="233:73" pos:end="233:75"><expr pos:start="233:73" pos:end="233:75"><name pos:start="233:73" pos:end="233:75">drv</name></expr></argument>,

                    <argument pos:start="235:21" pos:end="235:30"><expr pos:start="235:21" pos:end="235:30"><operator pos:start="235:21" pos:end="235:21">&amp;</operator><name pos:start="235:22" pos:end="235:30">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="245:5"><if pos:start="237:5" pos:end="245:5">if <condition pos:start="237:8" pos:end="237:16">(<expr pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">&lt;</operator> <literal type="number" pos:start="237:15" pos:end="237:15">0</literal></expr>)</condition> <block pos:start="237:18" pos:end="245:5">{<block_content pos:start="239:9" pos:end="243:15">

        <expr_stmt pos:start="239:9" pos:end="239:30"><expr pos:start="239:9" pos:end="239:29"><call pos:start="239:9" pos:end="239:29"><name pos:start="239:9" pos:end="239:18">bdrv_unref</name><argument_list pos:start="239:19" pos:end="239:29">(<argument pos:start="239:20" pos:end="239:28"><expr pos:start="239:20" pos:end="239:28"><name pos:start="239:20" pos:end="239:28">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:41"><expr pos:start="241:9" pos:end="241:40"><call pos:start="241:9" pos:end="241:40"><name pos:start="241:9" pos:end="241:23">error_propagate</name><argument_list pos:start="241:24" pos:end="241:40">(<argument pos:start="241:25" pos:end="241:28"><expr pos:start="241:25" pos:end="241:28"><name pos:start="241:25" pos:end="241:28">errp</name></expr></argument>, <argument pos:start="241:31" pos:end="241:39"><expr pos:start="241:31" pos:end="241:39"><name pos:start="241:31" pos:end="241:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="243:9" pos:end="243:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="249:5" pos:end="253:47"><expr pos:start="249:5" pos:end="253:46"><call pos:start="249:5" pos:end="253:46"><name pos:start="249:5" pos:end="249:16">mirror_start</name><argument_list pos:start="249:17" pos:end="253:46">(<argument pos:start="249:18" pos:end="249:19"><expr pos:start="249:18" pos:end="249:19"><name pos:start="249:18" pos:end="249:19">bs</name></expr></argument>, <argument pos:start="249:22" pos:end="249:30"><expr pos:start="249:22" pos:end="249:30"><name pos:start="249:22" pos:end="249:30">target_bs</name></expr></argument>, <argument pos:start="249:33" pos:end="249:37"><expr pos:start="249:33" pos:end="249:37"><name pos:start="249:33" pos:end="249:37">speed</name></expr></argument>, <argument pos:start="249:40" pos:end="249:50"><expr pos:start="249:40" pos:end="249:50"><name pos:start="249:40" pos:end="249:50">granularity</name></expr></argument>, <argument pos:start="249:53" pos:end="249:60"><expr pos:start="249:53" pos:end="249:60"><name pos:start="249:53" pos:end="249:60">buf_size</name></expr></argument>, <argument pos:start="249:63" pos:end="249:66"><expr pos:start="249:63" pos:end="249:66"><name pos:start="249:63" pos:end="249:66">sync</name></expr></argument>,

                 <argument pos:start="251:18" pos:end="251:32"><expr pos:start="251:18" pos:end="251:32"><name pos:start="251:18" pos:end="251:32">on_source_error</name></expr></argument>, <argument pos:start="251:35" pos:end="251:49"><expr pos:start="251:35" pos:end="251:49"><name pos:start="251:35" pos:end="251:49">on_target_error</name></expr></argument>,

                 <argument pos:start="253:18" pos:end="253:29"><expr pos:start="253:18" pos:end="253:29"><name pos:start="253:18" pos:end="253:29">block_job_cb</name></expr></argument>, <argument pos:start="253:32" pos:end="253:33"><expr pos:start="253:32" pos:end="253:33"><name pos:start="253:32" pos:end="253:33">bs</name></expr></argument>, <argument pos:start="253:36" pos:end="253:45"><expr pos:start="253:36" pos:end="253:45"><operator pos:start="253:36" pos:end="253:36">&amp;</operator><name pos:start="253:37" pos:end="253:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="255:5" pos:end="263:5"><if pos:start="255:5" pos:end="263:5">if <condition pos:start="255:8" pos:end="255:26">(<expr pos:start="255:9" pos:end="255:25"><name pos:start="255:9" pos:end="255:17">local_err</name> <operator pos:start="255:19" pos:end="255:20">!=</operator> <name pos:start="255:22" pos:end="255:25">NULL</name></expr>)</condition> <block pos:start="255:28" pos:end="263:5">{<block_content pos:start="257:9" pos:end="261:15">

        <expr_stmt pos:start="257:9" pos:end="257:30"><expr pos:start="257:9" pos:end="257:29"><call pos:start="257:9" pos:end="257:29"><name pos:start="257:9" pos:end="257:18">bdrv_unref</name><argument_list pos:start="257:19" pos:end="257:29">(<argument pos:start="257:20" pos:end="257:28"><expr pos:start="257:20" pos:end="257:28"><name pos:start="257:20" pos:end="257:28">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:41"><expr pos:start="259:9" pos:end="259:40"><call pos:start="259:9" pos:end="259:40"><name pos:start="259:9" pos:end="259:23">error_propagate</name><argument_list pos:start="259:24" pos:end="259:40">(<argument pos:start="259:25" pos:end="259:28"><expr pos:start="259:25" pos:end="259:28"><name pos:start="259:25" pos:end="259:28">errp</name></expr></argument>, <argument pos:start="259:31" pos:end="259:39"><expr pos:start="259:31" pos:end="259:39"><name pos:start="259:31" pos:end="259:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="261:9" pos:end="261:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
