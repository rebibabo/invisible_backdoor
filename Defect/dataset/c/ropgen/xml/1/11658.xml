<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11658.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">vnc_client_read</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:36">VncState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">vs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">ssize_t</name></type> <name pos:start="5:13" pos:end="5:15">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="9:1" pos:end="9:22">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <if_stmt pos:start="11:5" pos:end="19:40"><if pos:start="11:5" pos:end="13:39">if <condition pos:start="11:8" pos:end="11:41">(<expr pos:start="11:9" pos:end="11:40"><name pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:10">vs</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:16">sasl</name><operator pos:start="11:17" pos:end="11:17">.</operator><name pos:start="11:18" pos:end="11:21">conn</name></name> <operator pos:start="11:23" pos:end="11:24">&amp;&amp;</operator> <name pos:start="11:26" pos:end="11:40"><name pos:start="11:26" pos:end="11:27">vs</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:33">sasl</name><operator pos:start="11:34" pos:end="11:34">.</operator><name pos:start="11:35" pos:end="11:40">runSSF</name></name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:39"><block_content pos:start="13:9" pos:end="13:39">

        <expr_stmt pos:start="13:9" pos:end="13:39"><expr pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="13:38"><name pos:start="13:15" pos:end="13:34">vnc_client_read_sasl</name><argument_list pos:start="13:35" pos:end="13:38">(<argument pos:start="13:36" pos:end="13:37"><expr pos:start="13:36" pos:end="13:37"><name pos:start="13:36" pos:end="13:37">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="15:5" pos:end="19:40">else<block type="pseudo" pos:start="19:9" pos:end="19:40"><block_content pos:start="19:9" pos:end="19:40">

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="17:8" pos:end="17:28">/* CONFIG_VNC_SASL */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:40"><expr pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:39"><name pos:start="19:15" pos:end="19:35">vnc_client_read_plain</name><argument_list pos:start="19:36" pos:end="19:39">(<argument pos:start="19:37" pos:end="19:38"><expr pos:start="19:37" pos:end="19:38"><name pos:start="19:37" pos:end="19:38">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">ret</name></expr>)</condition> <block pos:start="21:15" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:15">

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:30">(<expr pos:start="23:13" pos:end="23:29"><name pos:start="23:13" pos:end="23:29"><name pos:start="23:13" pos:end="23:14">vs</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:29">disconnecting</name></name></expr>)</condition> <block pos:start="23:32" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:38">

            <expr_stmt pos:start="25:13" pos:end="25:38"><expr pos:start="25:13" pos:end="25:37"><call pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:33">vnc_disconnect_finish</name><argument_list pos:start="25:34" pos:end="25:37">(<argument pos:start="25:35" pos:end="25:36"><expr pos:start="25:35" pos:end="25:36"><name pos:start="25:35" pos:end="25:36">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="35:5" pos:end="65:5">while <condition pos:start="35:11" pos:end="35:75">(<expr pos:start="35:12" pos:end="35:74"><name pos:start="35:12" pos:end="35:27"><name pos:start="35:12" pos:end="35:13">vs</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:27">read_handler</name></name> <operator pos:start="35:29" pos:end="35:30">&amp;&amp;</operator> <name pos:start="35:32" pos:end="35:47"><name pos:start="35:32" pos:end="35:33">vs</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:40">input</name><operator pos:start="35:41" pos:end="35:41">.</operator><name pos:start="35:42" pos:end="35:47">offset</name></name> <operator pos:start="35:49" pos:end="35:50">&gt;=</operator> <name pos:start="35:52" pos:end="35:74"><name pos:start="35:52" pos:end="35:53">vs</name><operator pos:start="35:54" pos:end="35:55">-&gt;</operator><name pos:start="35:56" pos:end="35:74">read_handler_expect</name></name></expr>)</condition> <block pos:start="35:77" pos:end="65:5">{<block_content pos:start="37:9" pos:end="63:9">

        <decl_stmt pos:start="37:9" pos:end="37:45"><decl pos:start="37:9" pos:end="37:44"><type pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:14">size_t</name></type> <name pos:start="37:16" pos:end="37:18">len</name> <init pos:start="37:20" pos:end="37:44">= <expr pos:start="37:22" pos:end="37:44"><name pos:start="37:22" pos:end="37:44"><name pos:start="37:22" pos:end="37:23">vs</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:44">read_handler_expect</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:16"><decl pos:start="39:9" pos:end="39:15"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:58"><expr pos:start="43:9" pos:end="43:57"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:57"><name pos:start="43:15" pos:end="43:30"><name pos:start="43:15" pos:end="43:16">vs</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:30">read_handler</name></name><argument_list pos:start="43:31" pos:end="43:57">(<argument pos:start="43:32" pos:end="43:33"><expr pos:start="43:32" pos:end="43:33"><name pos:start="43:32" pos:end="43:33">vs</name></expr></argument>, <argument pos:start="43:36" pos:end="43:51"><expr pos:start="43:36" pos:end="43:51"><name pos:start="43:36" pos:end="43:51"><name pos:start="43:36" pos:end="43:37">vs</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:44">input</name><operator pos:start="43:45" pos:end="43:45">.</operator><name pos:start="43:46" pos:end="43:51">buffer</name></name></expr></argument>, <argument pos:start="43:54" pos:end="43:56"><expr pos:start="43:54" pos:end="43:56"><name pos:start="43:54" pos:end="43:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:30">(<expr pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:14">vs</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:29">disconnecting</name></name></expr>)</condition> <block pos:start="45:32" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:19">

            <expr_stmt pos:start="47:13" pos:end="47:38"><expr pos:start="47:13" pos:end="47:37"><call pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:33">vnc_disconnect_finish</name><argument_list pos:start="47:34" pos:end="47:37">(<argument pos:start="47:35" pos:end="47:36"><expr pos:start="47:35" pos:end="47:36"><name pos:start="47:35" pos:end="47:36">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:17">(<expr pos:start="55:13" pos:end="55:16"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:16">ret</name></expr>)</condition> <block pos:start="55:19" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:44">

            <expr_stmt pos:start="57:13" pos:end="57:44"><expr pos:start="57:13" pos:end="57:43"><call pos:start="57:13" pos:end="57:43"><name pos:start="57:13" pos:end="57:26">buffer_advance</name><argument_list pos:start="57:27" pos:end="57:43">(<argument pos:start="57:28" pos:end="57:37"><expr pos:start="57:28" pos:end="57:37"><operator pos:start="57:28" pos:end="57:28">&amp;</operator><name pos:start="57:29" pos:end="57:37"><name pos:start="57:29" pos:end="57:30">vs</name><operator pos:start="57:31" pos:end="57:32">-&gt;</operator><name pos:start="57:33" pos:end="57:37">input</name></name></expr></argument>, <argument pos:start="57:40" pos:end="57:42"><expr pos:start="57:40" pos:end="57:42"><name pos:start="57:40" pos:end="57:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="63:9">else <block pos:start="59:16" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:42">

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:14">vs</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:35">read_handler_expect</name></name> <operator pos:start="61:37" pos:end="61:37">=</operator> <name pos:start="61:39" pos:end="61:41">ret</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
