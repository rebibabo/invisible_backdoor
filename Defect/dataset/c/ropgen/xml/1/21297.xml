<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21297.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">TRBCCode</name></type> <name pos:start="1:17" pos:end="1:29">xhci_reset_ep</name><parameter_list pos:start="1:30" pos:end="3:48">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:39">XHCIState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">xhci</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><name pos:start="1:48" pos:end="1:55">unsigned</name> <name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:66">slotid</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:47"><decl pos:start="3:31" pos:end="3:47"><type pos:start="3:31" pos:end="3:47"><name pos:start="3:31" pos:end="3:38">unsigned</name> <name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:47">epid</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:22">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">XHCISlot</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">XHCIEPContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">epctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">USBDevice</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">dev</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><call pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:27">trace_usb_xhci_ep_reset</name><argument_list pos:start="15:28" pos:end="15:41">(<argument pos:start="15:29" pos:end="15:34"><expr pos:start="15:29" pos:end="15:34"><name pos:start="15:29" pos:end="15:34">slotid</name></expr></argument>, <argument pos:start="15:37" pos:end="15:40"><expr pos:start="15:37" pos:end="15:40"><name pos:start="15:37" pos:end="15:40">epid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:52"><expr pos:start="17:5" pos:end="17:51"><call pos:start="17:5" pos:end="17:51"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:51">(<argument pos:start="17:12" pos:end="17:50"><expr pos:start="17:12" pos:end="17:50"><name pos:start="17:12" pos:end="17:17">slotid</name> <operator pos:start="17:19" pos:end="17:20">&gt;=</operator> <literal type="number" pos:start="17:22" pos:end="17:22">1</literal> <operator pos:start="17:24" pos:end="17:25">&amp;&amp;</operator> <name pos:start="17:27" pos:end="17:32">slotid</name> <operator pos:start="17:34" pos:end="17:35">&lt;=</operator> <name pos:start="17:37" pos:end="17:50"><name pos:start="17:37" pos:end="17:40">xhci</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:50">numslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:30">(<expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:12">epid</name> <argument_list type="generic" pos:start="21:14" pos:end="21:26">&lt; <argument pos:start="21:16" pos:end="21:24"><expr pos:start="21:16" pos:end="21:24"><literal type="number" pos:start="21:16" pos:end="21:16">1</literal> <operator pos:start="21:18" pos:end="21:19">||</operator> <name pos:start="21:21" pos:end="21:24">epid</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="21:28" pos:end="21:29">31</literal></expr>)</condition> <block pos:start="21:32" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:28">

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><call pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="23:50">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:43"><expr pos:start="23:25" pos:end="23:43"><literal type="string" pos:start="23:25" pos:end="23:43">"xhci: bad ep %d\n"</literal></expr></argument>, <argument pos:start="23:46" pos:end="23:49"><expr pos:start="23:46" pos:end="23:49"><name pos:start="23:46" pos:end="23:49">epid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:28">return <expr pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:27">CC_TRB_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:8">slot</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <operator pos:start="31:12" pos:end="31:12">&amp;</operator><name pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:16">xhci</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:23">slots</name><index pos:start="31:24" pos:end="31:33">[<expr pos:start="31:25" pos:end="31:32"><name pos:start="31:25" pos:end="31:30">slotid</name><operator pos:start="31:31" pos:end="31:31">-</operator><literal type="number" pos:start="31:32" pos:end="31:32">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:27">(<expr pos:start="35:9" pos:end="35:26"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:26"><name pos:start="35:10" pos:end="35:13">slot</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">eps</name><index pos:start="35:19" pos:end="35:26">[<expr pos:start="35:20" pos:end="35:25"><name pos:start="35:20" pos:end="35:23">epid</name><operator pos:start="35:24" pos:end="35:24">-</operator><literal type="number" pos:start="35:25" pos:end="35:25">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="35:29" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:39">

        <expr_stmt pos:start="37:9" pos:end="37:67"><expr pos:start="37:9" pos:end="37:66"><call pos:start="37:9" pos:end="37:66"><name pos:start="37:9" pos:end="37:15">DPRINTF</name><argument_list pos:start="37:16" pos:end="37:66">(<argument pos:start="37:17" pos:end="37:51"><expr pos:start="37:17" pos:end="37:51"><literal type="string" pos:start="37:17" pos:end="37:51">"xhci: slot %d ep %d not enabled\n"</literal></expr></argument>, <argument pos:start="37:54" pos:end="37:59"><expr pos:start="37:54" pos:end="37:59"><name pos:start="37:54" pos:end="37:59">slotid</name></expr></argument>, <argument pos:start="37:62" pos:end="37:65"><expr pos:start="37:62" pos:end="37:65"><name pos:start="37:62" pos:end="37:65">epid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:39">return <expr pos:start="39:16" pos:end="39:38"><name pos:start="39:16" pos:end="39:38">CC_EP_NOT_ENABLED_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:9">epctx</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:16">slot</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:21">eps</name><index pos:start="45:22" pos:end="45:29">[<expr pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:26">epid</name><operator pos:start="45:27" pos:end="45:27">-</operator><literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:13">epctx</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:20">state</name></name> <operator pos:start="49:22" pos:end="49:23">!=</operator> <name pos:start="49:25" pos:end="49:33">EP_HALTED</name></expr>)</condition> <block pos:start="49:36" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:38">

        <expr_stmt pos:start="51:9" pos:end="53:36"><expr pos:start="51:9" pos:end="53:35"><call pos:start="51:9" pos:end="53:35"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="53:35">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:70"><expr pos:start="51:25" pos:end="51:70"><literal type="string" pos:start="51:25" pos:end="51:70">"xhci: reset EP while EP %d not halted (%d)\n"</literal></expr></argument>,

                <argument pos:start="53:17" pos:end="53:20"><expr pos:start="53:17" pos:end="53:20"><name pos:start="53:17" pos:end="53:20">epid</name></expr></argument>, <argument pos:start="53:23" pos:end="53:34"><expr pos:start="53:23" pos:end="53:34"><name pos:start="53:23" pos:end="53:34"><name pos:start="53:23" pos:end="53:27">epctx</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:34">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:38">return <expr pos:start="55:16" pos:end="55:37"><name pos:start="55:16" pos:end="55:37">CC_CONTEXT_STATE_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:51">(<expr pos:start="61:9" pos:end="61:50"><call pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:26">xhci_ep_nuke_xfers</name><argument_list pos:start="61:27" pos:end="61:46">(<argument pos:start="61:28" pos:end="61:31"><expr pos:start="61:28" pos:end="61:31"><name pos:start="61:28" pos:end="61:31">xhci</name></expr></argument>, <argument pos:start="61:34" pos:end="61:39"><expr pos:start="61:34" pos:end="61:39"><name pos:start="61:34" pos:end="61:39">slotid</name></expr></argument>, <argument pos:start="61:42" pos:end="61:45"><expr pos:start="61:42" pos:end="61:45"><name pos:start="61:42" pos:end="61:45">epid</name></expr></argument>)</argument_list></call> <operator pos:start="61:48" pos:end="61:48">&gt;</operator> <literal type="number" pos:start="61:50" pos:end="61:50">0</literal></expr>)</condition> <block pos:start="61:53" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:40">

        <expr_stmt pos:start="63:9" pos:end="65:40"><expr pos:start="63:9" pos:end="65:39"><call pos:start="63:9" pos:end="65:39"><name pos:start="63:9" pos:end="63:15">fprintf</name><argument_list pos:start="63:16" pos:end="65:39">(<argument pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">stderr</name></expr></argument>, <argument pos:start="63:25" pos:end="65:38"><expr pos:start="63:25" pos:end="65:38"><literal type="string" pos:start="63:25" pos:end="63:72">"xhci: FIXME: endpoint reset w/ xfers running, "</literal>

                <literal type="string" pos:start="65:17" pos:end="65:38">"data might be lost\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <decl_stmt pos:start="71:5" pos:end="71:25"><decl pos:start="71:5" pos:end="71:24"><type pos:start="71:5" pos:end="71:11"><name pos:start="71:5" pos:end="71:11">uint8_t</name></type> <name pos:start="71:13" pos:end="71:14">ep</name> <init pos:start="71:16" pos:end="71:24">= <expr pos:start="71:18" pos:end="71:24"><name pos:start="71:18" pos:end="71:21">epid</name><operator pos:start="71:22" pos:end="71:23">&gt;&gt;</operator><literal type="number" pos:start="71:24" pos:end="71:24">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:17">(<expr pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:12">epid</name> <operator pos:start="75:14" pos:end="75:14">&amp;</operator> <literal type="number" pos:start="75:16" pos:end="75:16">1</literal></expr>)</condition> <block pos:start="75:19" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:19">

        <expr_stmt pos:start="77:9" pos:end="77:19"><expr pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:10">ep</name> <operator pos:start="77:12" pos:end="77:13">|=</operator> <literal type="number" pos:start="77:15" pos:end="77:18">0x80</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:43"><expr pos:start="83:5" pos:end="83:42"><name pos:start="83:5" pos:end="83:7">dev</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <name pos:start="83:11" pos:end="83:31"><name pos:start="83:11" pos:end="83:14">xhci</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:21">slots</name><index pos:start="83:22" pos:end="83:31">[<expr pos:start="83:23" pos:end="83:30"><name pos:start="83:23" pos:end="83:28">slotid</name><operator pos:start="83:29" pos:end="83:29">-</operator><literal type="number" pos:start="83:30" pos:end="83:30">1</literal></expr>]</index></name><operator pos:start="83:32" pos:end="83:32">.</operator><name pos:start="83:33" pos:end="83:42"><name pos:start="83:33" pos:end="83:37">uport</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:42">dev</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:13">(<expr pos:start="85:9" pos:end="85:12"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:12">dev</name></expr>)</condition> <block pos:start="85:15" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:40">

        <return pos:start="87:9" pos:end="87:40">return <expr pos:start="87:16" pos:end="87:39"><name pos:start="87:16" pos:end="87:39">CC_USB_TRANSACTION_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:53"><expr pos:start="93:5" pos:end="93:52"><call pos:start="93:5" pos:end="93:52"><name pos:start="93:5" pos:end="93:21">xhci_set_ep_state</name><argument_list pos:start="93:22" pos:end="93:52">(<argument pos:start="93:23" pos:end="93:26"><expr pos:start="93:23" pos:end="93:26"><name pos:start="93:23" pos:end="93:26">xhci</name></expr></argument>, <argument pos:start="93:29" pos:end="93:33"><expr pos:start="93:29" pos:end="93:33"><name pos:start="93:29" pos:end="93:33">epctx</name></expr></argument>, <argument pos:start="93:36" pos:end="93:39"><expr pos:start="93:36" pos:end="93:39"><name pos:start="93:36" pos:end="93:39">NULL</name></expr></argument>, <argument pos:start="93:42" pos:end="93:51"><expr pos:start="93:42" pos:end="93:51"><name pos:start="93:42" pos:end="93:51">EP_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:27">(<expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:13">epctx</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:26">nr_pstreams</name></name></expr>)</condition> <block pos:start="97:29" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:34">

        <expr_stmt pos:start="99:9" pos:end="99:34"><expr pos:start="99:9" pos:end="99:33"><call pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:26">xhci_reset_streams</name><argument_list pos:start="99:27" pos:end="99:33">(<argument pos:start="99:28" pos:end="99:32"><expr pos:start="99:28" pos:end="99:32"><name pos:start="99:28" pos:end="99:32">epctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="105:5" pos:end="105:22">return <expr pos:start="105:12" pos:end="105:21"><name pos:start="105:12" pos:end="105:21">CC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
