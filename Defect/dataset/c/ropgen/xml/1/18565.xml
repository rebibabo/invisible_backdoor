<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18565.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">esp_do_dma</name><parameter_list pos:start="1:23" pos:end="1:35">(<parameter pos:start="1:24" pos:end="1:34"><decl pos:start="1:24" pos:end="1:34"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:31">ESPState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">to_device</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:33"><expr pos:start="11:5" pos:end="11:32"><name pos:start="11:5" pos:end="11:13">to_device</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <operator pos:start="11:17" pos:end="11:17">(</operator><name pos:start="11:18" pos:end="11:27"><name pos:start="11:18" pos:end="11:18">s</name><operator pos:start="11:19" pos:end="11:20">-&gt;</operator><name pos:start="11:21" pos:end="11:27">ti_size</name></name> <operator pos:start="11:29" pos:end="11:29">&lt;</operator> <literal type="number" pos:start="11:31" pos:end="11:31">0</literal><operator pos:start="11:32" pos:end="11:32">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:7">len</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:21"><name pos:start="13:11" pos:end="13:11">s</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:21">dma_left</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="31:5"><if pos:start="15:5" pos:end="31:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:17">do_cmd</name></name></expr>)</condition> <block pos:start="15:20" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:15">

        <expr_stmt pos:start="17:9" pos:end="17:57"><expr pos:start="17:9" pos:end="17:56"><call pos:start="17:9" pos:end="17:56"><name pos:start="17:9" pos:end="17:15">DPRINTF</name><argument_list pos:start="17:16" pos:end="17:56">(<argument pos:start="17:17" pos:end="17:39"><expr pos:start="17:17" pos:end="17:39"><literal type="string" pos:start="17:17" pos:end="17:39">"command len %d + %d\n"</literal></expr></argument>, <argument pos:start="17:42" pos:end="17:50"><expr pos:start="17:42" pos:end="17:50"><name pos:start="17:42" pos:end="17:50"><name pos:start="17:42" pos:end="17:42">s</name><operator pos:start="17:43" pos:end="17:44">-&gt;</operator><name pos:start="17:45" pos:end="17:50">cmdlen</name></name></expr></argument>, <argument pos:start="17:53" pos:end="17:55"><expr pos:start="17:53" pos:end="17:55"><name pos:start="17:53" pos:end="17:55">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:70"><expr pos:start="19:9" pos:end="19:69"><call pos:start="19:9" pos:end="19:69"><name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:26">dma_memory_read</name></name><argument_list pos:start="19:27" pos:end="19:69">(<argument pos:start="19:28" pos:end="19:40"><expr pos:start="19:28" pos:end="19:40"><name pos:start="19:28" pos:end="19:40"><name pos:start="19:28" pos:end="19:28">s</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:40">dma_opaque</name></name></expr></argument>, <argument pos:start="19:43" pos:end="19:63"><expr pos:start="19:43" pos:end="19:63"><operator pos:start="19:43" pos:end="19:43">&amp;</operator><name pos:start="19:44" pos:end="19:63"><name pos:start="19:44" pos:end="19:44">s</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:52">cmdbuf</name><index pos:start="19:53" pos:end="19:63">[<expr pos:start="19:54" pos:end="19:62"><name pos:start="19:54" pos:end="19:62"><name pos:start="19:54" pos:end="19:54">s</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:62">cmdlen</name></name></expr>]</index></name></expr></argument>, <argument pos:start="19:66" pos:end="19:68"><expr pos:start="19:66" pos:end="19:68"><name pos:start="19:66" pos:end="19:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:18">ti_size</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:22"><expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">cmdlen</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:22"><expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">do_cmd</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:14">do_cmd</name><argument_list pos:start="27:15" pos:end="27:28">(<argument pos:start="27:16" pos:end="27:16"><expr pos:start="27:16" pos:end="27:16"><name pos:start="27:16" pos:end="27:16">s</name></expr></argument>, <argument pos:start="27:19" pos:end="27:27"><expr pos:start="27:19" pos:end="27:27"><name pos:start="27:19" pos:end="27:27"><name pos:start="27:19" pos:end="27:19">s</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:27">cmdbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:20">async_len</name></name> <operator pos:start="33:22" pos:end="33:23">==</operator> <literal type="number" pos:start="33:25" pos:end="33:25">0</literal></expr>)</condition> <block pos:start="33:28" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:15">

        <comment type="block" pos:start="35:9" pos:end="35:45">/* Defer until data is available.  */</comment>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:27">(<expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:11">len</name> <operator pos:start="41:13" pos:end="41:13">&gt;</operator> <name pos:start="41:15" pos:end="41:26"><name pos:start="41:15" pos:end="41:15">s</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:26">async_len</name></name></expr>)</condition> <block pos:start="41:29" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:27">

        <expr_stmt pos:start="43:9" pos:end="43:27"><expr pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:11">len</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:26"><name pos:start="43:15" pos:end="43:15">s</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:26">async_len</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:17">to_device</name></expr>)</condition> <block pos:start="47:20" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:61">

        <expr_stmt pos:start="49:9" pos:end="49:61"><expr pos:start="49:9" pos:end="49:60"><call pos:start="49:9" pos:end="49:60"><name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:26">dma_memory_read</name></name><argument_list pos:start="49:27" pos:end="49:60">(<argument pos:start="49:28" pos:end="49:40"><expr pos:start="49:28" pos:end="49:40"><name pos:start="49:28" pos:end="49:40"><name pos:start="49:28" pos:end="49:28">s</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:40">dma_opaque</name></name></expr></argument>, <argument pos:start="49:43" pos:end="49:54"><expr pos:start="49:43" pos:end="49:54"><name pos:start="49:43" pos:end="49:54"><name pos:start="49:43" pos:end="49:43">s</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:54">async_buf</name></name></expr></argument>, <argument pos:start="49:57" pos:end="49:59"><expr pos:start="49:57" pos:end="49:59"><name pos:start="49:57" pos:end="49:59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:62">

        <expr_stmt pos:start="53:9" pos:end="53:62"><expr pos:start="53:9" pos:end="53:61"><call pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:27">dma_memory_write</name></name><argument_list pos:start="53:28" pos:end="53:61">(<argument pos:start="53:29" pos:end="53:41"><expr pos:start="53:29" pos:end="53:41"><name pos:start="53:29" pos:end="53:41"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:41">dma_opaque</name></name></expr></argument>, <argument pos:start="53:44" pos:end="53:55"><expr pos:start="53:44" pos:end="53:55"><name pos:start="53:44" pos:end="53:55"><name pos:start="53:44" pos:end="53:44">s</name><operator pos:start="53:45" pos:end="53:46">-&gt;</operator><name pos:start="53:47" pos:end="53:55">async_buf</name></name></expr></argument>, <argument pos:start="53:58" pos:end="53:60"><expr pos:start="53:58" pos:end="53:60"><name pos:start="53:58" pos:end="53:60">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:23"><expr pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:15">dma_left</name></name> <operator pos:start="57:17" pos:end="57:18">-=</operator> <name pos:start="57:20" pos:end="57:22">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:16"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:16">async_buf</name></name> <operator pos:start="59:18" pos:end="59:19">+=</operator> <name pos:start="59:21" pos:end="59:23">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:24"><expr pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:16">async_len</name></name> <operator pos:start="61:18" pos:end="61:19">-=</operator> <name pos:start="61:21" pos:end="61:23">len</name></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:26"><if pos:start="63:5" pos:end="65:26">if <condition pos:start="63:8" pos:end="63:18">(<expr pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:17">to_device</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:26"><block_content pos:start="65:9" pos:end="65:26">

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:18">ti_size</name></name> <operator pos:start="65:20" pos:end="65:21">+=</operator> <name pos:start="65:23" pos:end="65:25">len</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="67:5" pos:end="69:26">else<block type="pseudo" pos:start="69:9" pos:end="69:26"><block_content pos:start="69:9" pos:end="69:26">

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">ti_size</name></name> <operator pos:start="69:20" pos:end="69:21">-=</operator> <name pos:start="69:23" pos:end="69:25">len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="71:5" pos:end="103:5"><if pos:start="71:5" pos:end="97:5">if <condition pos:start="71:8" pos:end="71:26">(<expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:20">async_len</name></name> <operator pos:start="71:22" pos:end="71:23">==</operator> <literal type="number" pos:start="71:25" pos:end="71:25">0</literal></expr>)</condition> <block pos:start="71:28" pos:end="97:5">{<block_content pos:start="73:9" pos:end="95:9">

        <if_stmt pos:start="73:9" pos:end="95:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:22">(<expr pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:21">to_device</name></expr>)</condition> <block pos:start="73:24" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:64">

            <comment type="line" pos:start="75:13" pos:end="75:34">// ti_size is negative</comment>

            <expr_stmt pos:start="77:13" pos:end="77:64"><expr pos:start="77:13" pos:end="77:63"><call pos:start="77:13" pos:end="77:63"><name pos:start="77:13" pos:end="77:44"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:26">current_dev</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:32">info</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:44">write_data</name></name><argument_list pos:start="77:45" pos:end="77:63">(<argument pos:start="77:46" pos:end="77:59"><expr pos:start="77:46" pos:end="77:59"><name pos:start="77:46" pos:end="77:59"><name pos:start="77:46" pos:end="77:46">s</name><operator pos:start="77:47" pos:end="77:48">-&gt;</operator><name pos:start="77:49" pos:end="77:59">current_dev</name></name></expr></argument>, <argument pos:start="77:62" pos:end="77:62"><expr pos:start="77:62" pos:end="77:62"><literal type="number" pos:start="77:62" pos:end="77:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="95:9">else <block pos:start="79:16" pos:end="95:9">{<block_content pos:start="81:13" pos:end="93:13">

            <expr_stmt pos:start="81:13" pos:end="81:63"><expr pos:start="81:13" pos:end="81:62"><call pos:start="81:13" pos:end="81:62"><name pos:start="81:13" pos:end="81:43"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:26">current_dev</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:32">info</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:43">read_data</name></name><argument_list pos:start="81:44" pos:end="81:62">(<argument pos:start="81:45" pos:end="81:58"><expr pos:start="81:45" pos:end="81:58"><name pos:start="81:45" pos:end="81:58"><name pos:start="81:45" pos:end="81:45">s</name><operator pos:start="81:46" pos:end="81:47">-&gt;</operator><name pos:start="81:48" pos:end="81:58">current_dev</name></name></expr></argument>, <argument pos:start="81:61" pos:end="81:61"><expr pos:start="81:61" pos:end="81:61"><literal type="number" pos:start="81:61" pos:end="81:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="83:13" pos:end="87:54">/* If there is still data to be read from the device then

               complete the DMA operation immediately.  Otherwise defer

               until the scsi layer has completed.  */</comment>

            <if_stmt pos:start="89:13" pos:end="93:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:51">(<expr pos:start="89:17" pos:end="89:50"><name pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:27">dma_left</name></name> <operator pos:start="89:29" pos:end="89:30">==</operator> <literal type="number" pos:start="89:32" pos:end="89:32">0</literal> <operator pos:start="89:34" pos:end="89:35">&amp;&amp;</operator> <name pos:start="89:37" pos:end="89:46"><name pos:start="89:37" pos:end="89:37">s</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:46">ti_size</name></name> <operator pos:start="89:48" pos:end="89:48">&gt;</operator> <literal type="number" pos:start="89:50" pos:end="89:50">0</literal></expr>)</condition> <block pos:start="89:53" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:32">

                <expr_stmt pos:start="91:17" pos:end="91:32"><expr pos:start="91:17" pos:end="91:31"><call pos:start="91:17" pos:end="91:31"><name pos:start="91:17" pos:end="91:28">esp_dma_done</name><argument_list pos:start="91:29" pos:end="91:31">(<argument pos:start="91:30" pos:end="91:30"><expr pos:start="91:30" pos:end="91:30"><name pos:start="91:30" pos:end="91:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="103:5">else <block pos:start="97:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:24">

        <comment type="block" pos:start="99:9" pos:end="99:68">/* Partially filled a scsi buffer. Complete immediately.  */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:24"><expr pos:start="101:9" pos:end="101:23"><call pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:20">esp_dma_done</name><argument_list pos:start="101:21" pos:end="101:23">(<argument pos:start="101:22" pos:end="101:22"><expr pos:start="101:22" pos:end="101:22"><name pos:start="101:22" pos:end="101:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
