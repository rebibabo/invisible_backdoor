<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22323.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">raw_create</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:52">QemuOpts</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">opts</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="221:1">{<block_content pos:start="5:5" pos:end="219:18">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">result</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:22">total_size</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:14">nocow</name> <init pos:start="11:16" pos:end="11:22">= <expr pos:start="11:18" pos:end="11:22"><name pos:start="11:18" pos:end="11:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">PreallocMode</name></type> <name pos:start="13:18" pos:end="13:25">prealloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">buf</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:20">local_err</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><call pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:12">strstart</name><argument_list pos:start="21:13" pos:end="21:42">(<argument pos:start="21:14" pos:end="21:21"><expr pos:start="21:14" pos:end="21:21"><name pos:start="21:14" pos:end="21:21">filename</name></expr></argument>, <argument pos:start="21:24" pos:end="21:30"><expr pos:start="21:24" pos:end="21:30"><literal type="string" pos:start="21:24" pos:end="21:30">"file:"</literal></expr></argument>, <argument pos:start="21:33" pos:end="21:41"><expr pos:start="21:33" pos:end="21:41"><operator pos:start="21:33" pos:end="21:33">&amp;</operator><name pos:start="21:34" pos:end="21:41">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:26">/* Read out options */</comment>

    <expr_stmt pos:start="27:5" pos:end="29:44"><expr pos:start="27:5" pos:end="29:43"><name pos:start="27:5" pos:end="27:14">total_size</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="29:43"><name pos:start="27:18" pos:end="27:25">ROUND_UP</name><argument_list pos:start="27:26" pos:end="29:43">(<argument pos:start="27:27" pos:end="27:72"><expr pos:start="27:27" pos:end="27:72"><call pos:start="27:27" pos:end="27:72"><name pos:start="27:27" pos:end="27:47">qemu_opt_get_size_del</name><argument_list pos:start="27:48" pos:end="27:72">(<argument pos:start="27:49" pos:end="27:52"><expr pos:start="27:49" pos:end="27:52"><name pos:start="27:49" pos:end="27:52">opts</name></expr></argument>, <argument pos:start="27:55" pos:end="27:68"><expr pos:start="27:55" pos:end="27:68"><name pos:start="27:55" pos:end="27:68">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="27:71" pos:end="27:71"><expr pos:start="27:71" pos:end="27:71"><literal type="number" pos:start="27:71" pos:end="27:71">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="29:27" pos:end="29:42"><expr pos:start="29:27" pos:end="29:42"><name pos:start="29:27" pos:end="29:42">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:60"><expr pos:start="31:5" pos:end="31:59"><name pos:start="31:5" pos:end="31:9">nocow</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:59"><name pos:start="31:13" pos:end="31:29">qemu_opt_get_bool</name><argument_list pos:start="31:30" pos:end="31:59">(<argument pos:start="31:31" pos:end="31:34"><expr pos:start="31:31" pos:end="31:34"><name pos:start="31:31" pos:end="31:34">opts</name></expr></argument>, <argument pos:start="31:37" pos:end="31:51"><expr pos:start="31:37" pos:end="31:51"><name pos:start="31:37" pos:end="31:51">BLOCK_OPT_NOCOW</name></expr></argument>, <argument pos:start="31:54" pos:end="31:58"><expr pos:start="31:54" pos:end="31:58"><name pos:start="31:54" pos:end="31:58">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:53"><expr pos:start="33:5" pos:end="33:52"><name pos:start="33:5" pos:end="33:7">buf</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:52"><name pos:start="33:11" pos:end="33:26">qemu_opt_get_del</name><argument_list pos:start="33:27" pos:end="33:52">(<argument pos:start="33:28" pos:end="33:31"><expr pos:start="33:28" pos:end="33:31"><name pos:start="33:28" pos:end="33:31">opts</name></expr></argument>, <argument pos:start="33:34" pos:end="33:51"><expr pos:start="33:34" pos:end="33:51"><name pos:start="33:34" pos:end="33:51">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="39:43"><expr pos:start="35:5" pos:end="39:42"><name pos:start="35:5" pos:end="35:12">prealloc</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="39:42"><name pos:start="35:16" pos:end="35:30">qapi_enum_parse</name><argument_list pos:start="35:31" pos:end="39:42">(<argument pos:start="35:32" pos:end="35:50"><expr pos:start="35:32" pos:end="35:50"><name pos:start="35:32" pos:end="35:50">PreallocMode_lookup</name></expr></argument>, <argument pos:start="35:53" pos:end="35:55"><expr pos:start="35:53" pos:end="35:55"><name pos:start="35:53" pos:end="35:55">buf</name></expr></argument>,

                               <argument pos:start="37:32" pos:end="37:49"><expr pos:start="37:32" pos:end="37:49"><name pos:start="37:32" pos:end="37:49">PREALLOC_MODE__MAX</name></expr></argument>, <argument pos:start="37:52" pos:end="37:68"><expr pos:start="37:52" pos:end="37:68"><name pos:start="37:52" pos:end="37:68">PREALLOC_MODE_OFF</name></expr></argument>,

                               <argument pos:start="39:32" pos:end="39:41"><expr pos:start="39:32" pos:end="39:41"><operator pos:start="39:32" pos:end="39:32">&amp;</operator><name pos:start="39:33" pos:end="39:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:16"><expr pos:start="41:5" pos:end="41:15"><call pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:10">g_free</name><argument_list pos:start="41:11" pos:end="41:15">(<argument pos:start="41:12" pos:end="41:14"><expr pos:start="41:12" pos:end="41:14"><name pos:start="41:12" pos:end="41:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:18">(<expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:17">local_err</name></expr>)</condition> <block pos:start="43:20" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:17">

        <expr_stmt pos:start="45:9" pos:end="45:41"><expr pos:start="45:9" pos:end="45:40"><call pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:23">error_propagate</name><argument_list pos:start="45:24" pos:end="45:40">(<argument pos:start="45:25" pos:end="45:28"><expr pos:start="45:25" pos:end="45:28"><name pos:start="45:25" pos:end="45:28">errp</name></expr></argument>, <argument pos:start="45:31" pos:end="45:39"><expr pos:start="45:31" pos:end="45:39"><name pos:start="45:31" pos:end="45:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:14">result</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">-</operator><name pos:start="47:19" pos:end="47:24">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:17">goto <name pos:start="49:14" pos:end="49:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:25"><expr pos:start="55:5" pos:end="57:24"><name pos:start="55:5" pos:end="55:6">fd</name> <operator pos:start="55:8" pos:end="55:8">=</operator> <call pos:start="55:10" pos:end="57:24"><name pos:start="55:10" pos:end="55:18">qemu_open</name><argument_list pos:start="55:19" pos:end="57:24">(<argument pos:start="55:20" pos:end="55:27"><expr pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:27">filename</name></expr></argument>, <argument pos:start="55:30" pos:end="55:66"><expr pos:start="55:30" pos:end="55:66"><name pos:start="55:30" pos:end="55:35">O_RDWR</name> <operator pos:start="55:37" pos:end="55:37">|</operator> <name pos:start="55:39" pos:end="55:45">O_CREAT</name> <operator pos:start="55:47" pos:end="55:47">|</operator> <name pos:start="55:49" pos:end="55:55">O_TRUNC</name> <operator pos:start="55:57" pos:end="55:57">|</operator> <name pos:start="55:59" pos:end="55:66">O_BINARY</name></expr></argument>,

                   <argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><literal type="number" pos:start="57:20" pos:end="57:23">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:15">(<expr pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:10">fd</name> <operator pos:start="59:12" pos:end="59:12">&lt;</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>)</condition> <block pos:start="59:17" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:17">

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:14">result</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <operator pos:start="61:18" pos:end="61:18">-</operator><name pos:start="61:19" pos:end="61:23">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><call pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:24">error_setg_errno</name><argument_list pos:start="63:25" pos:end="63:64">(<argument pos:start="63:26" pos:end="63:29"><expr pos:start="63:26" pos:end="63:29"><name pos:start="63:26" pos:end="63:29">errp</name></expr></argument>, <argument pos:start="63:32" pos:end="63:38"><expr pos:start="63:32" pos:end="63:38"><operator pos:start="63:32" pos:end="63:32">-</operator><name pos:start="63:33" pos:end="63:38">result</name></expr></argument>, <argument pos:start="63:41" pos:end="63:63"><expr pos:start="63:41" pos:end="63:63"><literal type="string" pos:start="63:41" pos:end="63:63">"Could not create file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="97:5"><if pos:start="71:5" pos:end="97:5">if <condition pos:start="71:8" pos:end="71:14">(<expr pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:13">nocow</name></expr>)</condition> <block pos:start="71:16" pos:end="97:5">{<block_content pos:start="85:9" pos:end="96:0">

<cpp:ifdef pos:start="73:1" pos:end="73:16">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:16">__linux__</name></cpp:ifdef>

        <comment type="block" pos:start="75:9" pos:end="83:11">/* Set NOCOW flag to solve performance issue on fs like btrfs.

         * This is an optimisation. The FS_IOC_SETFLAGS ioctl return value

         * will be ignored since any failure of this operation should not

         * block the left work.

         */</comment>

        <decl_stmt pos:start="85:9" pos:end="85:17"><decl pos:start="85:9" pos:end="85:16"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:16">attr</name></decl>;</decl_stmt>

        <if_stmt pos:start="87:9" pos:end="96:0"><if pos:start="87:9" pos:end="96:0">if <condition pos:start="87:12" pos:end="87:51">(<expr pos:start="87:13" pos:end="87:50"><call pos:start="87:13" pos:end="87:45"><name pos:start="87:13" pos:end="87:17">ioctl</name><argument_list pos:start="87:18" pos:end="87:45">(<argument pos:start="87:19" pos:end="87:20"><expr pos:start="87:19" pos:end="87:20"><name pos:start="87:19" pos:end="87:20">fd</name></expr></argument>, <argument pos:start="87:23" pos:end="87:37"><expr pos:start="87:23" pos:end="87:37"><name pos:start="87:23" pos:end="87:37">FS_IOC_GETFLAGS</name></expr></argument>, <argument pos:start="87:40" pos:end="87:44"><expr pos:start="87:40" pos:end="87:44"><operator pos:start="87:40" pos:end="87:40">&amp;</operator><name pos:start="87:41" pos:end="87:44">attr</name></expr></argument>)</argument_list></call> <operator pos:start="87:47" pos:end="87:48">==</operator> <literal type="number" pos:start="87:50" pos:end="87:50">0</literal></expr>)</condition> <block pos:start="87:53" pos:end="96:0">{<block_content pos:start="89:13" pos:end="91:46">

            <expr_stmt pos:start="89:13" pos:end="89:32"><expr pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:16">attr</name> <operator pos:start="89:18" pos:end="89:19">|=</operator> <name pos:start="89:21" pos:end="89:31">FS_NOCOW_FL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:46"><expr pos:start="91:13" pos:end="91:45"><call pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:17">ioctl</name><argument_list pos:start="91:18" pos:end="91:45">(<argument pos:start="91:19" pos:end="91:20"><expr pos:start="91:19" pos:end="91:20"><name pos:start="91:19" pos:end="91:20">fd</name></expr></argument>, <argument pos:start="91:23" pos:end="91:37"><expr pos:start="91:23" pos:end="91:37"><name pos:start="91:23" pos:end="91:37">FS_IOC_SETFLAGS</name></expr></argument>, <argument pos:start="91:40" pos:end="91:44"><expr pos:start="91:40" pos:end="91:44"><operator pos:start="91:40" pos:end="91:40">&amp;</operator><name pos:start="91:41" pos:end="91:44">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:39">(<expr pos:start="101:9" pos:end="101:38"><call pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:17">ftruncate</name><argument_list pos:start="101:18" pos:end="101:33">(<argument pos:start="101:19" pos:end="101:20"><expr pos:start="101:19" pos:end="101:20"><name pos:start="101:19" pos:end="101:20">fd</name></expr></argument>, <argument pos:start="101:23" pos:end="101:32"><expr pos:start="101:23" pos:end="101:32"><name pos:start="101:23" pos:end="101:32">total_size</name></expr></argument>)</argument_list></call> <operator pos:start="101:35" pos:end="101:36">!=</operator> <literal type="number" pos:start="101:38" pos:end="101:38">0</literal></expr>)</condition> <block pos:start="101:41" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:23">

        <expr_stmt pos:start="103:9" pos:end="103:24"><expr pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:14">result</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <operator pos:start="103:18" pos:end="103:18">-</operator><name pos:start="103:19" pos:end="103:23">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:65"><expr pos:start="105:9" pos:end="105:64"><call pos:start="105:9" pos:end="105:64"><name pos:start="105:9" pos:end="105:24">error_setg_errno</name><argument_list pos:start="105:25" pos:end="105:64">(<argument pos:start="105:26" pos:end="105:29"><expr pos:start="105:26" pos:end="105:29"><name pos:start="105:26" pos:end="105:29">errp</name></expr></argument>, <argument pos:start="105:32" pos:end="105:38"><expr pos:start="105:32" pos:end="105:38"><operator pos:start="105:32" pos:end="105:32">-</operator><name pos:start="105:33" pos:end="105:38">result</name></expr></argument>, <argument pos:start="105:41" pos:end="105:63"><expr pos:start="105:41" pos:end="105:63"><literal type="string" pos:start="105:41" pos:end="105:63">"Could not resize file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:23">goto <name pos:start="107:14" pos:end="107:22">out_close</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="113:5" pos:end="203:5">switch <condition pos:start="113:12" pos:end="113:21">(<expr pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:20">prealloc</name></expr>)</condition> <block pos:start="113:23" pos:end="203:5">{<block_content pos:start="117:5" pos:end="201:14">

<cpp:ifdef pos:start="115:1" pos:end="115:29">#<cpp:directive pos:start="115:2" pos:end="115:6">ifdef</cpp:directive> <name pos:start="115:8" pos:end="115:29">CONFIG_POSIX_FALLOCATE</name></cpp:ifdef>

    <case pos:start="117:5" pos:end="117:30">case <expr pos:start="117:10" pos:end="117:29"><name pos:start="117:10" pos:end="117:29">PREALLOC_MODE_FALLOC</name></expr>:</case>

        <comment type="block" pos:start="119:9" pos:end="119:50">/* posix_fallocate() doesn't set errno. */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:53"><expr pos:start="121:9" pos:end="121:52"><name pos:start="121:9" pos:end="121:14">result</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <operator pos:start="121:18" pos:end="121:18">-</operator><call pos:start="121:19" pos:end="121:52"><name pos:start="121:19" pos:end="121:33">posix_fallocate</name><argument_list pos:start="121:34" pos:end="121:52">(<argument pos:start="121:35" pos:end="121:36"><expr pos:start="121:35" pos:end="121:36"><name pos:start="121:35" pos:end="121:36">fd</name></expr></argument>, <argument pos:start="121:39" pos:end="121:39"><expr pos:start="121:39" pos:end="121:39"><literal type="number" pos:start="121:39" pos:end="121:39">0</literal></expr></argument>, <argument pos:start="121:42" pos:end="121:51"><expr pos:start="121:42" pos:end="121:51"><name pos:start="121:42" pos:end="121:51">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:24">(<expr pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:18">result</name> <operator pos:start="123:20" pos:end="123:21">!=</operator> <literal type="number" pos:start="123:23" pos:end="123:23">0</literal></expr>)</condition> <block pos:start="123:26" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:76">

            <expr_stmt pos:start="125:13" pos:end="127:76"><expr pos:start="125:13" pos:end="127:75"><call pos:start="125:13" pos:end="127:75"><name pos:start="125:13" pos:end="125:28">error_setg_errno</name><argument_list pos:start="125:29" pos:end="127:75">(<argument pos:start="125:30" pos:end="125:33"><expr pos:start="125:30" pos:end="125:33"><name pos:start="125:30" pos:end="125:33">errp</name></expr></argument>, <argument pos:start="125:36" pos:end="125:42"><expr pos:start="125:36" pos:end="125:42"><operator pos:start="125:36" pos:end="125:36">-</operator><name pos:start="125:37" pos:end="125:42">result</name></expr></argument>,

                             <argument pos:start="127:30" pos:end="127:74"><expr pos:start="127:30" pos:end="127:74"><literal type="string" pos:start="127:30" pos:end="127:74">"Could not preallocate data for the new file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="131:9" pos:end="134:0">break;</break>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

    <case pos:start="135:5" pos:end="135:28">case <expr pos:start="135:10" pos:end="135:27"><name pos:start="135:10" pos:end="135:27">PREALLOC_MODE_FULL</name></expr>:</case>

    <block pos:start="137:5" pos:end="187:5">{<block_content pos:start="139:9" pos:end="185:14">

        <decl_stmt pos:start="139:9" pos:end="139:43"><decl pos:start="139:9" pos:end="139:23"><type pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:15">int64_t</name></type> <name pos:start="139:17" pos:end="139:19">num</name> <init pos:start="139:21" pos:end="139:23">= <expr pos:start="139:23" pos:end="139:23"><literal type="number" pos:start="139:23" pos:end="139:23">0</literal></expr></init></decl>, <decl pos:start="139:26" pos:end="139:42"><type ref="prev" pos:start="139:9" pos:end="139:15"/><name pos:start="139:26" pos:end="139:29">left</name> <init pos:start="139:31" pos:end="139:42">= <expr pos:start="139:33" pos:end="139:42"><name pos:start="139:33" pos:end="139:42">total_size</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:31"><expr pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:11">buf</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="141:30"><name pos:start="141:15" pos:end="141:23">g_malloc0</name><argument_list pos:start="141:24" pos:end="141:30">(<argument pos:start="141:25" pos:end="141:29"><expr pos:start="141:25" pos:end="141:29"><literal type="number" pos:start="141:25" pos:end="141:29">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="145:9" pos:end="165:9">while <condition pos:start="145:15" pos:end="145:24">(<expr pos:start="145:16" pos:end="145:23"><name pos:start="145:16" pos:end="145:19">left</name> <operator pos:start="145:21" pos:end="145:21">&gt;</operator> <literal type="number" pos:start="145:23" pos:end="145:23">0</literal></expr>)</condition> <block pos:start="145:26" pos:end="165:9">{<block_content pos:start="147:13" pos:end="163:27">

            <expr_stmt pos:start="147:13" pos:end="147:35"><expr pos:start="147:13" pos:end="147:34"><name pos:start="147:13" pos:end="147:15">num</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <call pos:start="147:19" pos:end="147:34"><name pos:start="147:19" pos:end="147:21">MIN</name><argument_list pos:start="147:22" pos:end="147:34">(<argument pos:start="147:23" pos:end="147:26"><expr pos:start="147:23" pos:end="147:26"><name pos:start="147:23" pos:end="147:26">left</name></expr></argument>, <argument pos:start="147:29" pos:end="147:33"><expr pos:start="147:29" pos:end="147:33"><literal type="number" pos:start="147:29" pos:end="147:33">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:41"><expr pos:start="149:13" pos:end="149:40"><name pos:start="149:13" pos:end="149:18">result</name> <operator pos:start="149:20" pos:end="149:20">=</operator> <call pos:start="149:22" pos:end="149:40"><name pos:start="149:22" pos:end="149:26">write</name><argument_list pos:start="149:27" pos:end="149:40">(<argument pos:start="149:28" pos:end="149:29"><expr pos:start="149:28" pos:end="149:29"><name pos:start="149:28" pos:end="149:29">fd</name></expr></argument>, <argument pos:start="149:32" pos:end="149:34"><expr pos:start="149:32" pos:end="149:34"><name pos:start="149:32" pos:end="149:34">buf</name></expr></argument>, <argument pos:start="149:37" pos:end="149:39"><expr pos:start="149:37" pos:end="149:39"><name pos:start="149:37" pos:end="149:39">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="151:13" pos:end="161:13"><if pos:start="151:13" pos:end="161:13">if <condition pos:start="151:16" pos:end="151:27">(<expr pos:start="151:17" pos:end="151:26"><name pos:start="151:17" pos:end="151:22">result</name> <operator pos:start="151:24" pos:end="151:24">&lt;</operator> <literal type="number" pos:start="151:26" pos:end="151:26">0</literal></expr>)</condition> <block pos:start="151:29" pos:end="161:13">{<block_content pos:start="153:17" pos:end="159:22">

                <expr_stmt pos:start="153:17" pos:end="153:32"><expr pos:start="153:17" pos:end="153:31"><name pos:start="153:17" pos:end="153:22">result</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <operator pos:start="153:26" pos:end="153:26">-</operator><name pos:start="153:27" pos:end="153:31">errno</name></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="157:68"><expr pos:start="155:17" pos:end="157:67"><call pos:start="155:17" pos:end="157:67"><name pos:start="155:17" pos:end="155:32">error_setg_errno</name><argument_list pos:start="155:33" pos:end="157:67">(<argument pos:start="155:34" pos:end="155:37"><expr pos:start="155:34" pos:end="155:37"><name pos:start="155:34" pos:end="155:37">errp</name></expr></argument>, <argument pos:start="155:40" pos:end="155:46"><expr pos:start="155:40" pos:end="155:46"><operator pos:start="155:40" pos:end="155:40">-</operator><name pos:start="155:41" pos:end="155:46">result</name></expr></argument>,

                                 <argument pos:start="157:34" pos:end="157:66"><expr pos:start="157:34" pos:end="157:66"><literal type="string" pos:start="157:34" pos:end="157:66">"Could not write to the new file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="159:17" pos:end="159:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:27"><expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:16">left</name> <operator pos:start="163:18" pos:end="163:19">-=</operator> <name pos:start="163:21" pos:end="163:26">result</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="167:9" pos:end="181:9"><if pos:start="167:9" pos:end="181:9">if <condition pos:start="167:12" pos:end="167:24">(<expr pos:start="167:13" pos:end="167:23"><name pos:start="167:13" pos:end="167:18">result</name> <operator pos:start="167:20" pos:end="167:21">&gt;=</operator> <literal type="number" pos:start="167:23" pos:end="167:23">0</literal></expr>)</condition> <block pos:start="167:26" pos:end="181:9">{<block_content pos:start="169:13" pos:end="179:13">

            <expr_stmt pos:start="169:13" pos:end="169:31"><expr pos:start="169:13" pos:end="169:30"><name pos:start="169:13" pos:end="169:18">result</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <call pos:start="169:22" pos:end="169:30"><name pos:start="169:22" pos:end="169:26">fsync</name><argument_list pos:start="169:27" pos:end="169:30">(<argument pos:start="169:28" pos:end="169:29"><expr pos:start="169:28" pos:end="169:29"><name pos:start="169:28" pos:end="169:29">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="171:13" pos:end="179:13"><if pos:start="171:13" pos:end="179:13">if <condition pos:start="171:16" pos:end="171:27">(<expr pos:start="171:17" pos:end="171:26"><name pos:start="171:17" pos:end="171:22">result</name> <operator pos:start="171:24" pos:end="171:24">&lt;</operator> <literal type="number" pos:start="171:26" pos:end="171:26">0</literal></expr>)</condition> <block pos:start="171:29" pos:end="179:13">{<block_content pos:start="173:17" pos:end="177:69">

                <expr_stmt pos:start="173:17" pos:end="173:32"><expr pos:start="173:17" pos:end="173:31"><name pos:start="173:17" pos:end="173:22">result</name> <operator pos:start="173:24" pos:end="173:24">=</operator> <operator pos:start="173:26" pos:end="173:26">-</operator><name pos:start="173:27" pos:end="173:31">errno</name></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="177:69"><expr pos:start="175:17" pos:end="177:68"><call pos:start="175:17" pos:end="177:68"><name pos:start="175:17" pos:end="175:32">error_setg_errno</name><argument_list pos:start="175:33" pos:end="177:68">(<argument pos:start="175:34" pos:end="175:37"><expr pos:start="175:34" pos:end="175:37"><name pos:start="175:34" pos:end="175:37">errp</name></expr></argument>, <argument pos:start="175:40" pos:end="175:46"><expr pos:start="175:40" pos:end="175:46"><operator pos:start="175:40" pos:end="175:40">-</operator><name pos:start="175:41" pos:end="175:46">result</name></expr></argument>,

                                 <argument pos:start="177:34" pos:end="177:67"><expr pos:start="177:34" pos:end="177:67"><literal type="string" pos:start="177:34" pos:end="177:67">"Could not flush new file to disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:20"><expr pos:start="183:9" pos:end="183:19"><call pos:start="183:9" pos:end="183:19"><name pos:start="183:9" pos:end="183:14">g_free</name><argument_list pos:start="183:15" pos:end="183:19">(<argument pos:start="183:16" pos:end="183:18"><expr pos:start="183:16" pos:end="183:18"><name pos:start="183:16" pos:end="183:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    </block_content>}</block>

    <case pos:start="189:5" pos:end="189:27">case <expr pos:start="189:10" pos:end="189:26"><name pos:start="189:10" pos:end="189:26">PREALLOC_MODE_OFF</name></expr>:</case>

        <break pos:start="191:9" pos:end="191:14">break;</break>

    <default pos:start="193:5" pos:end="193:12">default:</default>

        <expr_stmt pos:start="195:9" pos:end="195:25"><expr pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:14">result</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <operator pos:start="195:18" pos:end="195:18">-</operator><name pos:start="195:19" pos:end="195:24">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="199:50"><expr pos:start="197:9" pos:end="199:49"><call pos:start="197:9" pos:end="199:49"><name pos:start="197:9" pos:end="197:18">error_setg</name><argument_list pos:start="197:19" pos:end="199:49">(<argument pos:start="197:20" pos:end="197:23"><expr pos:start="197:20" pos:end="197:23"><name pos:start="197:20" pos:end="197:23">errp</name></expr></argument>, <argument pos:start="197:26" pos:end="197:61"><expr pos:start="197:26" pos:end="197:61"><literal type="string" pos:start="197:26" pos:end="197:61">"Unsupported preallocation mode: %s"</literal></expr></argument>,

                   <argument pos:start="199:20" pos:end="199:48"><expr pos:start="199:20" pos:end="199:48"><name pos:start="199:20" pos:end="199:48"><name pos:start="199:20" pos:end="199:38">PreallocMode_lookup</name><index pos:start="199:39" pos:end="199:48">[<expr pos:start="199:40" pos:end="199:47"><name pos:start="199:40" pos:end="199:47">prealloc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    </block_content>}</block></switch>



<label pos:start="207:1" pos:end="207:10"><name pos:start="207:1" pos:end="207:9">out_close</name>:</label>

    <if_stmt pos:start="209:5" pos:end="215:5"><if pos:start="209:5" pos:end="215:5">if <condition pos:start="209:8" pos:end="209:43">(<expr pos:start="209:9" pos:end="209:42"><call pos:start="209:9" pos:end="209:22"><name pos:start="209:9" pos:end="209:18">qemu_close</name><argument_list pos:start="209:19" pos:end="209:22">(<argument pos:start="209:20" pos:end="209:21"><expr pos:start="209:20" pos:end="209:21"><name pos:start="209:20" pos:end="209:21">fd</name></expr></argument>)</argument_list></call> <operator pos:start="209:24" pos:end="209:25">!=</operator> <literal type="number" pos:start="209:27" pos:end="209:27">0</literal> <operator pos:start="209:29" pos:end="209:30">&amp;&amp;</operator> <name pos:start="209:32" pos:end="209:37">result</name> <operator pos:start="209:39" pos:end="209:40">==</operator> <literal type="number" pos:start="209:42" pos:end="209:42">0</literal></expr>)</condition> <block pos:start="209:45" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:72">

        <expr_stmt pos:start="211:9" pos:end="211:24"><expr pos:start="211:9" pos:end="211:23"><name pos:start="211:9" pos:end="211:14">result</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <operator pos:start="211:18" pos:end="211:18">-</operator><name pos:start="211:19" pos:end="211:23">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:72"><expr pos:start="213:9" pos:end="213:71"><call pos:start="213:9" pos:end="213:71"><name pos:start="213:9" pos:end="213:24">error_setg_errno</name><argument_list pos:start="213:25" pos:end="213:71">(<argument pos:start="213:26" pos:end="213:29"><expr pos:start="213:26" pos:end="213:29"><name pos:start="213:26" pos:end="213:29">errp</name></expr></argument>, <argument pos:start="213:32" pos:end="213:38"><expr pos:start="213:32" pos:end="213:38"><operator pos:start="213:32" pos:end="213:32">-</operator><name pos:start="213:33" pos:end="213:38">result</name></expr></argument>, <argument pos:start="213:41" pos:end="213:70"><expr pos:start="213:41" pos:end="213:70"><literal type="string" pos:start="213:41" pos:end="213:70">"Could not close the new file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="217:1" pos:end="217:4"><name pos:start="217:1" pos:end="217:3">out</name>:</label>

    <return pos:start="219:5" pos:end="219:18">return <expr pos:start="219:12" pos:end="219:17"><name pos:start="219:12" pos:end="219:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
