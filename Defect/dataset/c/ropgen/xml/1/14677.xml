<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14677.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">qemu_rdma_block_for_wrid</name><parameter_list pos:start="1:36" pos:end="3:55">(<parameter pos:start="1:37" pos:end="1:53"><decl pos:start="1:37" pos:end="1:53"><type pos:start="1:37" pos:end="1:53"><name pos:start="1:37" pos:end="1:47">RDMAContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">rdma</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:73">wrid_requested</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:54"><decl pos:start="3:37" pos:end="3:54"><type pos:start="3:37" pos:end="3:54"><name pos:start="3:37" pos:end="3:44">uint32_t</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:54">byte_len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:21">num_cq_events</name> <init pos:start="7:23" pos:end="7:25">= <expr pos:start="7:25" pos:end="7:25"><literal type="number" pos:start="7:25" pos:end="7:25">0</literal></expr></init></decl>, <decl pos:start="7:28" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">ret</name> <init pos:start="7:32" pos:end="7:34">= <expr pos:start="7:34" pos:end="7:34"><literal type="number" pos:start="7:34" pos:end="7:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">ibv_cq</name></name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">cq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:16">cq_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">wr_id</name> <init pos:start="13:20" pos:end="13:35">= <expr pos:start="13:22" pos:end="13:35"><name pos:start="13:22" pos:end="13:35">RDMA_WRID_NONE</name></expr></init></decl>, <decl pos:start="13:38" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:38" pos:end="13:45">wr_id_in</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:39">(<expr pos:start="17:9" pos:end="17:38"><call pos:start="17:9" pos:end="17:38"><name pos:start="17:9" pos:end="17:25">ibv_req_notify_cq</name><argument_list pos:start="17:26" pos:end="17:38">(<argument pos:start="17:27" pos:end="17:34"><expr pos:start="17:27" pos:end="17:34"><name pos:start="17:27" pos:end="17:34"><name pos:start="17:27" pos:end="17:30">rdma</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:34">cq</name></name></expr></argument>, <argument pos:start="17:37" pos:end="17:37"><expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:41" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:18">

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:23">/* poll cq first */</comment>

    <while pos:start="25:5" pos:end="57:5">while <condition pos:start="25:11" pos:end="25:35">(<expr pos:start="25:12" pos:end="25:34"><name pos:start="25:12" pos:end="25:16">wr_id</name> <operator pos:start="25:18" pos:end="25:19">!=</operator> <name pos:start="25:21" pos:end="25:34">wrid_requested</name></expr>)</condition> <block pos:start="25:37" pos:end="57:5">{<block_content pos:start="27:9" pos:end="55:9">

        <expr_stmt pos:start="27:9" pos:end="27:56"><expr pos:start="27:9" pos:end="27:55"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:55"><name pos:start="27:15" pos:end="27:28">qemu_rdma_poll</name><argument_list pos:start="27:29" pos:end="27:55">(<argument pos:start="27:30" pos:end="27:33"><expr pos:start="27:30" pos:end="27:33"><name pos:start="27:30" pos:end="27:33">rdma</name></expr></argument>, <argument pos:start="27:36" pos:end="27:44"><expr pos:start="27:36" pos:end="27:44"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:44">wr_id_in</name></expr></argument>, <argument pos:start="27:47" pos:end="27:54"><expr pos:start="27:47" pos:end="27:54"><name pos:start="27:47" pos:end="27:54">byte_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">&lt;</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>)</condition> <block pos:start="29:22" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:23">

            <return pos:start="31:13" pos:end="31:23">return <expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:47"><expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:13">wr_id</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:24">wr_id_in</name> <operator pos:start="37:26" pos:end="37:26">&amp;</operator> <name pos:start="37:28" pos:end="37:46">RDMA_WRID_TYPE_MASK</name></expr>;</expr_stmt>



        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:36">(<expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:17">wr_id</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:35">RDMA_WRID_NONE</name></expr>)</condition> <block pos:start="41:38" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:18">

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:36">(<expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:17">wr_id</name> <operator pos:start="47:19" pos:end="47:20">!=</operator> <name pos:start="47:22" pos:end="47:35">wrid_requested</name></expr>)</condition> <block pos:start="47:38" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:58">

            <expr_stmt pos:start="49:13" pos:end="53:58"><expr pos:start="49:13" pos:end="53:57"><call pos:start="49:13" pos:end="53:57"><name pos:start="49:13" pos:end="49:21">DDDPRINTF</name><argument_list pos:start="49:22" pos:end="53:57">(<argument pos:start="49:23" pos:end="49:72"><expr pos:start="49:23" pos:end="49:72"><literal type="string" pos:start="49:23" pos:end="49:59">"A Wanted wrid %s (%d) but got %s (%"</literal> <name pos:start="49:61" pos:end="49:66">PRIu64</name> <literal type="string" pos:start="49:68" pos:end="49:72">")\n"</literal></expr></argument>,

                <argument pos:start="51:17" pos:end="51:42"><expr pos:start="51:17" pos:end="51:42"><call pos:start="51:17" pos:end="51:42"><name pos:start="51:17" pos:end="51:26">print_wrid</name><argument_list pos:start="51:27" pos:end="51:42">(<argument pos:start="51:28" pos:end="51:41"><expr pos:start="51:28" pos:end="51:41"><name pos:start="51:28" pos:end="51:41">wrid_requested</name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="53:17" pos:end="53:30"><expr pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:30">wrid_requested</name></expr></argument>, <argument pos:start="53:33" pos:end="53:49"><expr pos:start="53:33" pos:end="53:49"><call pos:start="53:33" pos:end="53:49"><name pos:start="53:33" pos:end="53:42">print_wrid</name><argument_list pos:start="53:43" pos:end="53:49">(<argument pos:start="53:44" pos:end="53:48"><expr pos:start="53:44" pos:end="53:48"><name pos:start="53:44" pos:end="53:48">wr_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:52" pos:end="53:56"><expr pos:start="53:52" pos:end="53:56"><name pos:start="53:52" pos:end="53:56">wr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:32">(<expr pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:13">wr_id</name> <operator pos:start="61:15" pos:end="61:16">==</operator> <name pos:start="61:18" pos:end="61:31">wrid_requested</name></expr>)</condition> <block pos:start="61:34" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:17">

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="69:5" pos:end="151:5">while <condition pos:start="69:11" pos:end="69:13">(<expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">1</literal></expr>)</condition> <block pos:start="69:15" pos:end="151:5">{<block_content pos:start="79:9" pos:end="149:9">

        <comment type="block" pos:start="71:9" pos:end="77:11">/*

         * Coroutine doesn't start until process_incoming_migration()

         * so don't yield unless we know we're running inside of a coroutine.

         */</comment>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:51">(<expr pos:start="79:13" pos:end="79:50"><name pos:start="79:13" pos:end="79:50"><name pos:start="79:13" pos:end="79:16">rdma</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:50">migration_started_on_destination</name></name></expr>)</condition> <block pos:start="79:53" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:60">

            <expr_stmt pos:start="81:13" pos:end="81:60"><expr pos:start="81:13" pos:end="81:59"><call pos:start="81:13" pos:end="81:59"><name pos:start="81:13" pos:end="81:35">yield_until_fd_readable</name><argument_list pos:start="81:36" pos:end="81:59">(<argument pos:start="81:37" pos:end="81:58"><expr pos:start="81:37" pos:end="81:58"><name pos:start="81:37" pos:end="81:58"><name pos:start="81:37" pos:end="81:40">rdma</name><operator pos:start="81:41" pos:end="81:42">-&gt;</operator><name pos:start="81:43" pos:end="81:54">comp_channel</name><operator pos:start="81:55" pos:end="81:56">-&gt;</operator><name pos:start="81:57" pos:end="81:58">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:63">(<expr pos:start="87:13" pos:end="87:62"><call pos:start="87:13" pos:end="87:62"><name pos:start="87:13" pos:end="87:28">ibv_get_cq_event</name><argument_list pos:start="87:29" pos:end="87:62">(<argument pos:start="87:30" pos:end="87:47"><expr pos:start="87:30" pos:end="87:47"><name pos:start="87:30" pos:end="87:47"><name pos:start="87:30" pos:end="87:33">rdma</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:47">comp_channel</name></name></expr></argument>, <argument pos:start="87:50" pos:end="87:52"><expr pos:start="87:50" pos:end="87:52"><operator pos:start="87:50" pos:end="87:50">&amp;</operator><name pos:start="87:51" pos:end="87:52">cq</name></expr></argument>, <argument pos:start="87:55" pos:end="87:61"><expr pos:start="87:55" pos:end="87:61"><operator pos:start="87:55" pos:end="87:55">&amp;</operator><name pos:start="87:56" pos:end="87:61">cq_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:65" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:36">

            <expr_stmt pos:start="89:13" pos:end="89:39"><expr pos:start="89:13" pos:end="89:38"><call pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:18">perror</name><argument_list pos:start="89:19" pos:end="89:38">(<argument pos:start="89:20" pos:end="89:37"><expr pos:start="89:20" pos:end="89:37"><literal type="string" pos:start="89:20" pos:end="89:37">"ibv_get_cq_event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="91:13" pos:end="91:36">goto <name pos:start="91:18" pos:end="91:35">err_block_for_wrid</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:24"><expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:21">num_cq_events</name><operator pos:start="97:22" pos:end="97:23">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:37">(<expr pos:start="101:13" pos:end="101:36"><call pos:start="101:13" pos:end="101:36"><name pos:start="101:13" pos:end="101:29">ibv_req_notify_cq</name><argument_list pos:start="101:30" pos:end="101:36">(<argument pos:start="101:31" pos:end="101:32"><expr pos:start="101:31" pos:end="101:32"><name pos:start="101:31" pos:end="101:32">cq</name></expr></argument>, <argument pos:start="101:35" pos:end="101:35"><expr pos:start="101:35" pos:end="101:35"><literal type="number" pos:start="101:35" pos:end="101:35">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:39" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:36">

            <goto pos:start="103:13" pos:end="103:36">goto <name pos:start="103:18" pos:end="103:35">err_block_for_wrid</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <while pos:start="109:9" pos:end="141:9">while <condition pos:start="109:15" pos:end="109:39">(<expr pos:start="109:16" pos:end="109:38"><name pos:start="109:16" pos:end="109:20">wr_id</name> <operator pos:start="109:22" pos:end="109:23">!=</operator> <name pos:start="109:25" pos:end="109:38">wrid_requested</name></expr>)</condition> <block pos:start="109:41" pos:end="141:9">{<block_content pos:start="111:13" pos:end="139:13">

            <expr_stmt pos:start="111:13" pos:end="111:60"><expr pos:start="111:13" pos:end="111:59"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:59"><name pos:start="111:19" pos:end="111:32">qemu_rdma_poll</name><argument_list pos:start="111:33" pos:end="111:59">(<argument pos:start="111:34" pos:end="111:37"><expr pos:start="111:34" pos:end="111:37"><name pos:start="111:34" pos:end="111:37">rdma</name></expr></argument>, <argument pos:start="111:40" pos:end="111:48"><expr pos:start="111:40" pos:end="111:48"><operator pos:start="111:40" pos:end="111:40">&amp;</operator><name pos:start="111:41" pos:end="111:48">wr_id_in</name></expr></argument>, <argument pos:start="111:51" pos:end="111:58"><expr pos:start="111:51" pos:end="111:58"><name pos:start="111:51" pos:end="111:58">byte_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="117:13"><if pos:start="113:13" pos:end="117:13">if <condition pos:start="113:16" pos:end="113:24">(<expr pos:start="113:17" pos:end="113:23"><name pos:start="113:17" pos:end="113:19">ret</name> <operator pos:start="113:21" pos:end="113:21">&lt;</operator> <literal type="number" pos:start="113:23" pos:end="113:23">0</literal></expr>)</condition> <block pos:start="113:26" pos:end="117:13">{<block_content pos:start="115:17" pos:end="115:40">

                <goto pos:start="115:17" pos:end="115:40">goto <name pos:start="115:22" pos:end="115:39">err_block_for_wrid</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:51"><expr pos:start="121:13" pos:end="121:50"><name pos:start="121:13" pos:end="121:17">wr_id</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <name pos:start="121:21" pos:end="121:28">wr_id_in</name> <operator pos:start="121:30" pos:end="121:30">&amp;</operator> <name pos:start="121:32" pos:end="121:50">RDMA_WRID_TYPE_MASK</name></expr>;</expr_stmt>



            <if_stmt pos:start="125:13" pos:end="129:13"><if pos:start="125:13" pos:end="129:13">if <condition pos:start="125:16" pos:end="125:40">(<expr pos:start="125:17" pos:end="125:39"><name pos:start="125:17" pos:end="125:21">wr_id</name> <operator pos:start="125:23" pos:end="125:24">==</operator> <name pos:start="125:26" pos:end="125:39">RDMA_WRID_NONE</name></expr>)</condition> <block pos:start="125:42" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:22">

                <break pos:start="127:17" pos:end="127:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="131:13" pos:end="139:13"><if pos:start="131:13" pos:end="139:13">if <condition pos:start="131:16" pos:end="131:40">(<expr pos:start="131:17" pos:end="131:39"><name pos:start="131:17" pos:end="131:21">wr_id</name> <operator pos:start="131:23" pos:end="131:24">!=</operator> <name pos:start="131:26" pos:end="131:39">wrid_requested</name></expr>)</condition> <block pos:start="131:42" pos:end="139:13">{<block_content pos:start="133:17" pos:end="137:46">

                <expr_stmt pos:start="133:17" pos:end="137:46"><expr pos:start="133:17" pos:end="137:45"><call pos:start="133:17" pos:end="137:45"><name pos:start="133:17" pos:end="133:25">DDDPRINTF</name><argument_list pos:start="133:26" pos:end="137:45">(<argument pos:start="133:27" pos:end="133:76"><expr pos:start="133:27" pos:end="133:76"><literal type="string" pos:start="133:27" pos:end="133:63">"B Wanted wrid %s (%d) but got %s (%"</literal> <name pos:start="133:65" pos:end="133:70">PRIu64</name> <literal type="string" pos:start="133:72" pos:end="133:76">")\n"</literal></expr></argument>,

                    <argument pos:start="135:21" pos:end="135:46"><expr pos:start="135:21" pos:end="135:46"><call pos:start="135:21" pos:end="135:46"><name pos:start="135:21" pos:end="135:30">print_wrid</name><argument_list pos:start="135:31" pos:end="135:46">(<argument pos:start="135:32" pos:end="135:45"><expr pos:start="135:32" pos:end="135:45"><name pos:start="135:32" pos:end="135:45">wrid_requested</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="135:49" pos:end="135:62"><expr pos:start="135:49" pos:end="135:62"><name pos:start="135:49" pos:end="135:62">wrid_requested</name></expr></argument>,

                    <argument pos:start="137:21" pos:end="137:37"><expr pos:start="137:21" pos:end="137:37"><call pos:start="137:21" pos:end="137:37"><name pos:start="137:21" pos:end="137:30">print_wrid</name><argument_list pos:start="137:31" pos:end="137:37">(<argument pos:start="137:32" pos:end="137:36"><expr pos:start="137:32" pos:end="137:36"><name pos:start="137:32" pos:end="137:36">wr_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="137:40" pos:end="137:44"><expr pos:start="137:40" pos:end="137:44"><name pos:start="137:40" pos:end="137:44">wr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:36">(<expr pos:start="145:13" pos:end="145:35"><name pos:start="145:13" pos:end="145:17">wr_id</name> <operator pos:start="145:19" pos:end="145:20">==</operator> <name pos:start="145:22" pos:end="145:35">wrid_requested</name></expr>)</condition> <block pos:start="145:38" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:40">

            <goto pos:start="147:13" pos:end="147:40">goto <name pos:start="147:18" pos:end="147:39">success_block_for_wrid</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



<label pos:start="155:1" pos:end="155:23"><name pos:start="155:1" pos:end="155:22">success_block_for_wrid</name>:</label>

    <if_stmt pos:start="157:5" pos:end="161:5"><if pos:start="157:5" pos:end="161:5">if <condition pos:start="157:8" pos:end="157:22">(<expr pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:21">num_cq_events</name></expr>)</condition> <block pos:start="157:24" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:45">

        <expr_stmt pos:start="159:9" pos:end="159:45"><expr pos:start="159:9" pos:end="159:44"><call pos:start="159:9" pos:end="159:44"><name pos:start="159:9" pos:end="159:25">ibv_ack_cq_events</name><argument_list pos:start="159:26" pos:end="159:44">(<argument pos:start="159:27" pos:end="159:28"><expr pos:start="159:27" pos:end="159:28"><name pos:start="159:27" pos:end="159:28">cq</name></expr></argument>, <argument pos:start="159:31" pos:end="159:43"><expr pos:start="159:31" pos:end="159:43"><name pos:start="159:31" pos:end="159:43">num_cq_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>



<label pos:start="167:1" pos:end="167:19"><name pos:start="167:1" pos:end="167:18">err_block_for_wrid</name>:</label>

    <if_stmt pos:start="169:5" pos:end="173:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:22">(<expr pos:start="169:9" pos:end="169:21"><name pos:start="169:9" pos:end="169:21">num_cq_events</name></expr>)</condition> <block pos:start="169:24" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:45">

        <expr_stmt pos:start="171:9" pos:end="171:45"><expr pos:start="171:9" pos:end="171:44"><call pos:start="171:9" pos:end="171:44"><name pos:start="171:9" pos:end="171:25">ibv_ack_cq_events</name><argument_list pos:start="171:26" pos:end="171:44">(<argument pos:start="171:27" pos:end="171:28"><expr pos:start="171:27" pos:end="171:28"><name pos:start="171:27" pos:end="171:28">cq</name></expr></argument>, <argument pos:start="171:31" pos:end="171:43"><expr pos:start="171:31" pos:end="171:43"><name pos:start="171:31" pos:end="171:43">num_cq_events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="175:5" pos:end="175:15">return <expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
