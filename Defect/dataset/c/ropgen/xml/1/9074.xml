<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9074.c" pos:tabs="8"><function pos:start="1:1" pos:end="228:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">leon3_generic_hw_init</name><parameter_list pos:start="1:34" pos:end="1:56">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:46">MachineState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="228:1">{<block_content pos:start="5:5" pos:end="226:5">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">SPARCCPU</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:17">CPUSPARCState</name>   <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:24">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:58"><decl pos:start="15:5" pos:end="15:57"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:35">address_space_mem</name> <init pos:start="15:37" pos:end="15:57">= <expr pos:start="15:39" pos:end="15:57"><call pos:start="15:39" pos:end="15:57"><name pos:start="15:39" pos:end="15:55">get_system_memory</name><argument_list pos:start="15:56" pos:end="15:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">ram</name> <init pos:start="17:23" pos:end="17:46">= <expr pos:start="17:25" pos:end="17:46"><call pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:29">g_new</name><argument_list pos:start="17:30" pos:end="17:46">(<argument pos:start="17:31" pos:end="17:42"><expr pos:start="17:31" pos:end="17:42"><name pos:start="17:31" pos:end="17:42">MemoryRegion</name></expr></argument>, <argument pos:start="17:45" pos:end="17:45"><expr pos:start="17:45" pos:end="17:45"><literal type="number" pos:start="17:45" pos:end="17:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:48"><decl pos:start="19:5" pos:end="19:47"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:22">prom</name> <init pos:start="19:24" pos:end="19:47">= <expr pos:start="19:26" pos:end="19:47"><call pos:start="19:26" pos:end="19:47"><name pos:start="19:26" pos:end="19:30">g_new</name><argument_list pos:start="19:31" pos:end="19:47">(<argument pos:start="19:32" pos:end="19:43"><expr pos:start="19:32" pos:end="19:43"><name pos:start="19:32" pos:end="19:43">MemoryRegion</name></expr></argument>, <argument pos:start="19:46" pos:end="19:46"><expr pos:start="19:46" pos:end="19:46"><literal type="number" pos:start="19:46" pos:end="19:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type>         <name pos:start="21:17" pos:end="21:19">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">char</name>       <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">qemu_irq</name>   <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:24">cpu_irqs</name> <init pos:start="25:26" pos:end="25:31">= <expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type>         <name pos:start="27:17" pos:end="27:25">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type>         <name pos:start="29:17" pos:end="29:25">prom_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:26"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:13">ResetData</name>  <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:26">reset_info</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:18">/* Init CPU */</comment>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18">cpu_model</name></expr>)</condition> <block pos:start="37:21" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:28">

        <expr_stmt pos:start="39:9" pos:end="39:28"><expr pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="string" pos:start="39:21" pos:end="39:27">"LEON3"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:36"><expr pos:start="45:5" pos:end="45:35"><name pos:start="45:5" pos:end="45:7">cpu</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:35"><name pos:start="45:11" pos:end="45:24">cpu_sparc_init</name><argument_list pos:start="45:25" pos:end="45:35">(<argument pos:start="45:26" pos:end="45:34"><expr pos:start="45:26" pos:end="45:34"><name pos:start="45:26" pos:end="45:34">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:11">cpu</name> <operator pos:start="47:13" pos:end="47:14">==</operator> <name pos:start="47:16" pos:end="47:19">NULL</name></expr>)</condition> <block pos:start="47:22" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:16">

        <expr_stmt pos:start="49:9" pos:end="49:71"><expr pos:start="49:9" pos:end="49:70"><call pos:start="49:9" pos:end="49:70"><name pos:start="49:9" pos:end="49:15">fprintf</name><argument_list pos:start="49:16" pos:end="49:70">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">stderr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:69"><expr pos:start="49:25" pos:end="49:69"><literal type="string" pos:start="49:25" pos:end="49:69">"qemu: Unable to find Sparc CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:16"><expr pos:start="51:9" pos:end="51:15"><call pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:12">exit</name><argument_list pos:start="51:13" pos:end="51:15">(<argument pos:start="51:14" pos:end="51:14"><expr pos:start="51:14" pos:end="51:14"><literal type="number" pos:start="51:14" pos:end="51:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:7">env</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <operator pos:start="55:11" pos:end="55:11">&amp;</operator><name pos:start="55:12" pos:end="55:19"><name pos:start="55:12" pos:end="55:14">cpu</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><call pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:20">cpu_sparc_set_id</name><argument_list pos:start="59:21" pos:end="59:28">(<argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><name pos:start="59:22" pos:end="59:24">env</name></expr></argument>, <argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:20">/* Reset data */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:53"><expr pos:start="65:5" pos:end="65:52"><name pos:start="65:5" pos:end="65:14">reset_info</name>        <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:52"><name pos:start="65:25" pos:end="65:33">g_malloc0</name><argument_list pos:start="65:34" pos:end="65:52">(<argument pos:start="65:35" pos:end="65:51"><expr pos:start="65:35" pos:end="65:51"><sizeof pos:start="65:35" pos:end="65:51">sizeof<argument_list pos:start="65:41" pos:end="65:51">(<argument pos:start="65:42" pos:end="65:50"><expr pos:start="65:42" pos:end="65:50"><name pos:start="65:42" pos:end="65:50">ResetData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:14">reset_info</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:19">cpu</name></name>   <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:27">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:46"><expr pos:start="69:5" pos:end="69:45"><name pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:14">reset_info</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:18">sp</name></name>    <operator pos:start="69:23" pos:end="69:23">=</operator> <literal type="number" pos:start="69:25" pos:end="69:36">0x40000000</literal> <operator pos:start="69:36" pos:end="69:36">+</operator> <name pos:start="69:38" pos:end="69:45">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:52"><expr pos:start="71:5" pos:end="71:51"><call pos:start="71:5" pos:end="71:51"><name pos:start="71:5" pos:end="71:23">qemu_register_reset</name><argument_list pos:start="71:24" pos:end="71:51">(<argument pos:start="71:25" pos:end="71:38"><expr pos:start="71:25" pos:end="71:38"><name pos:start="71:25" pos:end="71:38">main_cpu_reset</name></expr></argument>, <argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><name pos:start="71:41" pos:end="71:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:30">/* Allocate IRQ manager */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:80"><expr pos:start="77:5" pos:end="77:79"><call pos:start="77:5" pos:end="77:79"><name pos:start="77:5" pos:end="77:22">grlib_irqmp_create</name><argument_list pos:start="77:23" pos:end="77:79">(<argument pos:start="77:24" pos:end="77:33"><expr pos:start="77:24" pos:end="77:33"><literal type="number" pos:start="77:24" pos:end="77:33">0x80000200</literal></expr></argument>, <argument pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><name pos:start="77:36" pos:end="77:38">env</name></expr></argument>, <argument pos:start="77:41" pos:end="77:49"><expr pos:start="77:41" pos:end="77:49"><operator pos:start="77:41" pos:end="77:41">&amp;</operator><name pos:start="77:42" pos:end="77:49">cpu_irqs</name></expr></argument>, <argument pos:start="77:52" pos:end="77:59"><expr pos:start="77:52" pos:end="77:59"><name pos:start="77:52" pos:end="77:59">MAX_PILS</name></expr></argument>, <argument pos:start="77:62" pos:end="77:78"><expr pos:start="77:62" pos:end="77:78"><operator pos:start="77:62" pos:end="77:62">&amp;</operator><name pos:start="77:63" pos:end="77:78">leon3_set_pil_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:7">env</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:21">qemu_irq_ack</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:41">leon3_irq_manager</name></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:22">/* Allocate RAM */</comment>

    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:41">(<expr pos:start="87:9" pos:end="87:40"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:17">uint64_t</name><operator pos:start="87:18" pos:end="87:18">)</operator><name pos:start="87:19" pos:end="87:26">ram_size</name> <operator pos:start="87:28" pos:end="87:28">&gt;</operator> <operator pos:start="87:30" pos:end="87:30">(</operator><literal type="number" pos:start="87:31" pos:end="87:33">1UL</literal> <operator pos:start="87:35" pos:end="87:36">&lt;&lt;</operator> <literal type="number" pos:start="87:38" pos:end="87:39">30</literal><operator pos:start="87:40" pos:end="87:40">)</operator></expr>)</condition> <block pos:start="87:43" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:16">

        <expr_stmt pos:start="89:9" pos:end="93:58"><expr pos:start="89:9" pos:end="93:57"><call pos:start="89:9" pos:end="93:57"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="93:57">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>,

                <argument pos:start="91:17" pos:end="91:74"><expr pos:start="91:17" pos:end="91:74"><literal type="string" pos:start="91:17" pos:end="91:74">"qemu: Too much memory for this machine: %d, maximum 1G\n"</literal></expr></argument>,

                <argument pos:start="93:17" pos:end="93:56"><expr pos:start="93:17" pos:end="93:56"><operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:25">unsigned</name> <name pos:start="93:27" pos:end="93:29">int</name><operator pos:start="93:30" pos:end="93:30">)</operator><operator pos:start="93:31" pos:end="93:31">(</operator><name pos:start="93:32" pos:end="93:39">ram_size</name> <operator pos:start="93:41" pos:end="93:41">/</operator> <operator pos:start="93:43" pos:end="93:43">(</operator><literal type="number" pos:start="93:44" pos:end="93:47">1024</literal> <operator pos:start="93:49" pos:end="93:49">*</operator> <literal type="number" pos:start="93:51" pos:end="93:54">1024</literal><operator pos:start="93:55" pos:end="93:55">)</operator><operator pos:start="93:56" pos:end="93:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:16"><expr pos:start="95:9" pos:end="95:15"><call pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:12">exit</name><argument_list pos:start="95:13" pos:end="95:15">(<argument pos:start="95:14" pos:end="95:14"><expr pos:start="95:14" pos:end="95:14"><literal type="number" pos:start="95:14" pos:end="95:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:75"><expr pos:start="101:5" pos:end="101:74"><call pos:start="101:5" pos:end="101:74"><name pos:start="101:5" pos:end="101:26">memory_region_init_ram</name><argument_list pos:start="101:27" pos:end="101:74">(<argument pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:30">ram</name></expr></argument>, <argument pos:start="101:33" pos:end="101:36"><expr pos:start="101:33" pos:end="101:36"><name pos:start="101:33" pos:end="101:36">NULL</name></expr></argument>, <argument pos:start="101:39" pos:end="101:49"><expr pos:start="101:39" pos:end="101:49"><literal type="string" pos:start="101:39" pos:end="101:49">"leon3.ram"</literal></expr></argument>, <argument pos:start="101:52" pos:end="101:59"><expr pos:start="101:52" pos:end="101:59"><name pos:start="101:52" pos:end="101:59">ram_size</name></expr></argument>, <argument pos:start="101:62" pos:end="101:73"><expr pos:start="101:62" pos:end="101:73"><operator pos:start="101:62" pos:end="101:62">&amp;</operator><name pos:start="101:63" pos:end="101:73">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:37"><expr pos:start="103:5" pos:end="103:36"><call pos:start="103:5" pos:end="103:36"><name pos:start="103:5" pos:end="103:31">vmstate_register_ram_global</name><argument_list pos:start="103:32" pos:end="103:36">(<argument pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:68"><expr pos:start="105:5" pos:end="105:67"><call pos:start="105:5" pos:end="105:67"><name pos:start="105:5" pos:end="105:31">memory_region_add_subregion</name><argument_list pos:start="105:32" pos:end="105:67">(<argument pos:start="105:33" pos:end="105:49"><expr pos:start="105:33" pos:end="105:49"><name pos:start="105:33" pos:end="105:49">address_space_mem</name></expr></argument>, <argument pos:start="105:52" pos:end="105:61"><expr pos:start="105:52" pos:end="105:61"><literal type="number" pos:start="105:52" pos:end="105:61">0x40000000</literal></expr></argument>, <argument pos:start="105:64" pos:end="105:66"><expr pos:start="105:64" pos:end="105:66"><name pos:start="105:64" pos:end="105:66">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:23">/* Allocate BIOS */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:32"><expr pos:start="111:5" pos:end="111:31"><name pos:start="111:5" pos:end="111:13">prom_size</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <literal type="number" pos:start="111:17" pos:end="111:17">8</literal> <operator pos:start="111:19" pos:end="111:19">*</operator> <literal type="number" pos:start="111:21" pos:end="111:24">1024</literal> <operator pos:start="111:26" pos:end="111:26">*</operator> <literal type="number" pos:start="111:28" pos:end="111:31">1024</literal></expr>;</expr_stmt> <comment type="block" pos:start="111:34" pos:end="111:42">/* 8Mb */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:78"><expr pos:start="113:5" pos:end="113:77"><call pos:start="113:5" pos:end="113:77"><name pos:start="113:5" pos:end="113:26">memory_region_init_ram</name><argument_list pos:start="113:27" pos:end="113:77">(<argument pos:start="113:28" pos:end="113:31"><expr pos:start="113:28" pos:end="113:31"><name pos:start="113:28" pos:end="113:31">prom</name></expr></argument>, <argument pos:start="113:34" pos:end="113:37"><expr pos:start="113:34" pos:end="113:37"><name pos:start="113:34" pos:end="113:37">NULL</name></expr></argument>, <argument pos:start="113:40" pos:end="113:51"><expr pos:start="113:40" pos:end="113:51"><literal type="string" pos:start="113:40" pos:end="113:51">"Leon3.bios"</literal></expr></argument>, <argument pos:start="113:54" pos:end="113:62"><expr pos:start="113:54" pos:end="113:62"><name pos:start="113:54" pos:end="113:62">prom_size</name></expr></argument>, <argument pos:start="113:65" pos:end="113:76"><expr pos:start="113:65" pos:end="113:76"><operator pos:start="113:65" pos:end="113:65">&amp;</operator><name pos:start="113:66" pos:end="113:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:38"><expr pos:start="115:5" pos:end="115:37"><call pos:start="115:5" pos:end="115:37"><name pos:start="115:5" pos:end="115:31">vmstate_register_ram_global</name><argument_list pos:start="115:32" pos:end="115:37">(<argument pos:start="115:33" pos:end="115:36"><expr pos:start="115:33" pos:end="115:36"><name pos:start="115:33" pos:end="115:36">prom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:43"><expr pos:start="117:5" pos:end="117:42"><call pos:start="117:5" pos:end="117:42"><name pos:start="117:5" pos:end="117:30">memory_region_set_readonly</name><argument_list pos:start="117:31" pos:end="117:42">(<argument pos:start="117:32" pos:end="117:35"><expr pos:start="117:32" pos:end="117:35"><name pos:start="117:32" pos:end="117:35">prom</name></expr></argument>, <argument pos:start="117:38" pos:end="117:41"><expr pos:start="117:38" pos:end="117:41"><name pos:start="117:38" pos:end="117:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:69"><expr pos:start="119:5" pos:end="119:68"><call pos:start="119:5" pos:end="119:68"><name pos:start="119:5" pos:end="119:31">memory_region_add_subregion</name><argument_list pos:start="119:32" pos:end="119:68">(<argument pos:start="119:33" pos:end="119:49"><expr pos:start="119:33" pos:end="119:49"><name pos:start="119:33" pos:end="119:49">address_space_mem</name></expr></argument>, <argument pos:start="119:52" pos:end="119:61"><expr pos:start="119:52" pos:end="119:61"><literal type="number" pos:start="119:52" pos:end="119:61">0x00000000</literal></expr></argument>, <argument pos:start="119:64" pos:end="119:67"><expr pos:start="119:64" pos:end="119:67"><name pos:start="119:64" pos:end="119:67">prom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:24">/* Load boot prom */</comment>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:26">(<expr pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:17">bios_name</name> <operator pos:start="125:19" pos:end="125:20">==</operator> <name pos:start="125:22" pos:end="125:25">NULL</name></expr>)</condition> <block pos:start="125:28" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:34">

        <expr_stmt pos:start="127:9" pos:end="127:34"><expr pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:17">bios_name</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:33">PROM_FILENAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:62"><expr pos:start="131:5" pos:end="131:61"><name pos:start="131:5" pos:end="131:12">filename</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:61"><name pos:start="131:16" pos:end="131:29">qemu_find_file</name><argument_list pos:start="131:30" pos:end="131:61">(<argument pos:start="131:31" pos:end="131:49"><expr pos:start="131:31" pos:end="131:49"><name pos:start="131:31" pos:end="131:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="131:52" pos:end="131:60"><expr pos:start="131:52" pos:end="131:60"><name pos:start="131:52" pos:end="131:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:41"><expr pos:start="135:5" pos:end="135:40"><name pos:start="135:5" pos:end="135:13">bios_size</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <call pos:start="135:17" pos:end="135:40"><name pos:start="135:17" pos:end="135:30">get_image_size</name><argument_list pos:start="135:31" pos:end="135:40">(<argument pos:start="135:32" pos:end="135:39"><expr pos:start="135:32" pos:end="135:39"><name pos:start="135:32" pos:end="135:39">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:30">(<expr pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:17">bios_size</name> <operator pos:start="139:19" pos:end="139:19">&gt;</operator> <name pos:start="139:21" pos:end="139:29">prom_size</name></expr>)</condition> <block pos:start="139:32" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:16">

        <expr_stmt pos:start="141:9" pos:end="143:26"><expr pos:start="141:9" pos:end="143:25"><call pos:start="141:9" pos:end="143:25"><name pos:start="141:9" pos:end="141:15">fprintf</name><argument_list pos:start="141:16" pos:end="143:25">(<argument pos:start="141:17" pos:end="141:22"><expr pos:start="141:17" pos:end="141:22"><name pos:start="141:17" pos:end="141:22">stderr</name></expr></argument>, <argument pos:start="141:25" pos:end="141:72"><expr pos:start="141:25" pos:end="141:72"><literal type="string" pos:start="141:25" pos:end="141:72">"qemu: could not load prom '%s': file too big\n"</literal></expr></argument>,

                <argument pos:start="143:17" pos:end="143:24"><expr pos:start="143:17" pos:end="143:24"><name pos:start="143:17" pos:end="143:24">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:16"><expr pos:start="145:9" pos:end="145:15"><call pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:12">exit</name><argument_list pos:start="145:13" pos:end="145:15">(<argument pos:start="145:14" pos:end="145:14"><expr pos:start="145:14" pos:end="145:14"><literal type="number" pos:start="145:14" pos:end="145:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="151:5" pos:end="169:5"><if pos:start="151:5" pos:end="163:5">if <condition pos:start="151:8" pos:end="151:22">(<expr pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:17">bios_size</name> <operator pos:start="151:19" pos:end="151:19">&gt;</operator> <literal type="number" pos:start="151:21" pos:end="151:21">0</literal></expr>)</condition> <block pos:start="151:24" pos:end="163:5">{<block_content pos:start="153:9" pos:end="161:9">

        <expr_stmt pos:start="153:9" pos:end="153:67"><expr pos:start="153:9" pos:end="153:66"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:66"><name pos:start="153:15" pos:end="153:33">load_image_targphys</name><argument_list pos:start="153:34" pos:end="153:66">(<argument pos:start="153:35" pos:end="153:42"><expr pos:start="153:35" pos:end="153:42"><name pos:start="153:35" pos:end="153:42">filename</name></expr></argument>, <argument pos:start="153:45" pos:end="153:54"><expr pos:start="153:45" pos:end="153:54"><literal type="number" pos:start="153:45" pos:end="153:54">0x00000000</literal></expr></argument>, <argument pos:start="153:57" pos:end="153:65"><expr pos:start="153:57" pos:end="153:65"><name pos:start="153:57" pos:end="153:65">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:39">(<expr pos:start="155:13" pos:end="155:38"><name pos:start="155:13" pos:end="155:28"><name pos:start="155:13" pos:end="155:15">ret</name> <argument_list type="generic" pos:start="155:17" pos:end="155:28">&lt; <argument pos:start="155:19" pos:end="155:26"><expr pos:start="155:19" pos:end="155:26"><literal type="number" pos:start="155:19" pos:end="155:19">0</literal> <operator pos:start="155:21" pos:end="155:22">||</operator> <name pos:start="155:24" pos:end="155:26">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="155:30" pos:end="155:38">prom_size</name></expr>)</condition> <block pos:start="155:41" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:20">

            <expr_stmt pos:start="157:13" pos:end="157:74"><expr pos:start="157:13" pos:end="157:73"><call pos:start="157:13" pos:end="157:73"><name pos:start="157:13" pos:end="157:19">fprintf</name><argument_list pos:start="157:20" pos:end="157:73">(<argument pos:start="157:21" pos:end="157:26"><expr pos:start="157:21" pos:end="157:26"><name pos:start="157:21" pos:end="157:26">stderr</name></expr></argument>, <argument pos:start="157:29" pos:end="157:62"><expr pos:start="157:29" pos:end="157:62"><literal type="string" pos:start="157:29" pos:end="157:62">"qemu: could not load prom '%s'\n"</literal></expr></argument>, <argument pos:start="157:65" pos:end="157:72"><expr pos:start="157:65" pos:end="157:72"><name pos:start="157:65" pos:end="157:72">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:20"><expr pos:start="159:13" pos:end="159:19"><call pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:16">exit</name><argument_list pos:start="159:17" pos:end="159:19">(<argument pos:start="159:18" pos:end="159:18"><expr pos:start="159:18" pos:end="159:18"><literal type="number" pos:start="159:18" pos:end="159:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="163:7" pos:end="169:5">else if <condition pos:start="163:15" pos:end="163:59">(<expr pos:start="163:16" pos:end="163:58"><name pos:start="163:16" pos:end="163:30">kernel_filename</name> <operator pos:start="163:32" pos:end="163:33">==</operator> <name pos:start="163:35" pos:end="163:38">NULL</name> <operator pos:start="163:40" pos:end="163:41">&amp;&amp;</operator> <operator pos:start="163:43" pos:end="163:43">!</operator><call pos:start="163:44" pos:end="163:58"><name pos:start="163:44" pos:end="163:56">qtest_enabled</name><argument_list pos:start="163:57" pos:end="163:58">()</argument_list></call></expr>)</condition> <block pos:start="163:61" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:16">

        <expr_stmt pos:start="165:9" pos:end="165:64"><expr pos:start="165:9" pos:end="165:63"><call pos:start="165:9" pos:end="165:63"><name pos:start="165:9" pos:end="165:15">fprintf</name><argument_list pos:start="165:16" pos:end="165:63">(<argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">stderr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:52"><expr pos:start="165:25" pos:end="165:52"><literal type="string" pos:start="165:25" pos:end="165:52">"Can't read bios image %s\n"</literal></expr></argument>, <argument pos:start="165:55" pos:end="165:62"><expr pos:start="165:55" pos:end="165:62"><name pos:start="165:55" pos:end="165:62">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:16"><expr pos:start="167:9" pos:end="167:15"><call pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:12">exit</name><argument_list pos:start="167:13" pos:end="167:15">(<argument pos:start="167:14" pos:end="167:14"><expr pos:start="167:14" pos:end="167:14"><literal type="number" pos:start="167:14" pos:end="167:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>




    <comment type="block" pos:start="174:5" pos:end="174:43">/* Can directly load an application. */</comment>

    <if_stmt pos:start="176:5" pos:end="210:5"><if pos:start="176:5" pos:end="210:5">if <condition pos:start="176:8" pos:end="176:32">(<expr pos:start="176:9" pos:end="176:31"><name pos:start="176:9" pos:end="176:23">kernel_filename</name> <operator pos:start="176:25" pos:end="176:26">!=</operator> <name pos:start="176:28" pos:end="176:31">NULL</name></expr>)</condition> <block pos:start="176:34" pos:end="210:5">{<block_content pos:start="178:9" pos:end="208:9">

        <decl_stmt pos:start="178:9" pos:end="178:29"><decl pos:start="178:9" pos:end="178:28"><type pos:start="178:9" pos:end="178:12"><name pos:start="178:9" pos:end="178:12">long</name></type>     <name pos:start="178:18" pos:end="178:28">kernel_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="180:9" pos:end="180:23"><decl pos:start="180:9" pos:end="180:22"><type pos:start="180:9" pos:end="180:16"><name pos:start="180:9" pos:end="180:16">uint64_t</name></type> <name pos:start="180:18" pos:end="180:22">entry</name></decl>;</decl_stmt>



        <expr_stmt pos:start="184:9" pos:end="186:67"><expr pos:start="184:9" pos:end="186:66"><name pos:start="184:9" pos:end="184:19">kernel_size</name> <operator pos:start="184:21" pos:end="184:21">=</operator> <call pos:start="184:23" pos:end="186:66"><name pos:start="184:23" pos:end="184:30">load_elf</name><argument_list pos:start="184:31" pos:end="186:66">(<argument pos:start="184:32" pos:end="184:46"><expr pos:start="184:32" pos:end="184:46"><name pos:start="184:32" pos:end="184:46">kernel_filename</name></expr></argument>, <argument pos:start="184:49" pos:end="184:52"><expr pos:start="184:49" pos:end="184:52"><name pos:start="184:49" pos:end="184:52">NULL</name></expr></argument>, <argument pos:start="184:55" pos:end="184:58"><expr pos:start="184:55" pos:end="184:58"><name pos:start="184:55" pos:end="184:58">NULL</name></expr></argument>, <argument pos:start="184:61" pos:end="184:66"><expr pos:start="184:61" pos:end="184:66"><operator pos:start="184:61" pos:end="184:61">&amp;</operator><name pos:start="184:62" pos:end="184:66">entry</name></expr></argument>, <argument pos:start="184:69" pos:end="184:72"><expr pos:start="184:69" pos:end="184:72"><name pos:start="184:69" pos:end="184:72">NULL</name></expr></argument>, <argument pos:start="184:75" pos:end="184:78"><expr pos:start="184:75" pos:end="184:78"><name pos:start="184:75" pos:end="184:78">NULL</name></expr></argument>,

                               <argument pos:start="186:32" pos:end="186:32"><expr pos:start="186:32" pos:end="186:32"><literal type="number" pos:start="186:32" pos:end="186:32">1</literal></expr></argument> <comment type="block" pos:start="186:34" pos:end="186:49">/* big endian */</comment>, <argument pos:start="186:52" pos:end="186:62"><expr pos:start="186:52" pos:end="186:62"><name pos:start="186:52" pos:end="186:62">ELF_MACHINE</name></expr></argument>, <argument pos:start="186:65" pos:end="186:65"><expr pos:start="186:65" pos:end="186:65"><literal type="number" pos:start="186:65" pos:end="186:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="188:9" pos:end="196:9"><if pos:start="188:9" pos:end="196:9">if <condition pos:start="188:12" pos:end="188:28">(<expr pos:start="188:13" pos:end="188:27"><name pos:start="188:13" pos:end="188:23">kernel_size</name> <operator pos:start="188:25" pos:end="188:25">&lt;</operator> <literal type="number" pos:start="188:27" pos:end="188:27">0</literal></expr>)</condition> <block pos:start="188:30" pos:end="196:9">{<block_content pos:start="190:13" pos:end="194:20">

            <expr_stmt pos:start="190:13" pos:end="192:37"><expr pos:start="190:13" pos:end="192:36"><call pos:start="190:13" pos:end="192:36"><name pos:start="190:13" pos:end="190:19">fprintf</name><argument_list pos:start="190:20" pos:end="192:36">(<argument pos:start="190:21" pos:end="190:26"><expr pos:start="190:21" pos:end="190:26"><name pos:start="190:21" pos:end="190:26">stderr</name></expr></argument>, <argument pos:start="190:29" pos:end="190:64"><expr pos:start="190:29" pos:end="190:64"><literal type="string" pos:start="190:29" pos:end="190:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="192:21" pos:end="192:35"><expr pos:start="192:21" pos:end="192:35"><name pos:start="192:21" pos:end="192:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="194:13" pos:end="194:20"><expr pos:start="194:13" pos:end="194:19"><call pos:start="194:13" pos:end="194:19"><name pos:start="194:13" pos:end="194:16">exit</name><argument_list pos:start="194:17" pos:end="194:19">(<argument pos:start="194:18" pos:end="194:18"><expr pos:start="194:18" pos:end="194:18"><literal type="number" pos:start="194:18" pos:end="194:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="198:9" pos:end="208:9"><if pos:start="198:9" pos:end="208:9">if <condition pos:start="198:12" pos:end="198:27">(<expr pos:start="198:13" pos:end="198:26"><name pos:start="198:13" pos:end="198:21">bios_size</name> <operator pos:start="198:23" pos:end="198:24">&lt;=</operator> <literal type="number" pos:start="198:26" pos:end="198:26">0</literal></expr>)</condition> <block pos:start="198:29" pos:end="208:9">{<block_content pos:start="202:13" pos:end="206:38">

            <comment type="block" pos:start="200:13" pos:end="200:70">/* If there is no bios/monitor, start the application.  */</comment>

            <expr_stmt pos:start="202:13" pos:end="202:28"><expr pos:start="202:13" pos:end="202:27"><name pos:start="202:13" pos:end="202:19"><name pos:start="202:13" pos:end="202:15">env</name><operator pos:start="202:16" pos:end="202:17">-&gt;</operator><name pos:start="202:18" pos:end="202:19">pc</name></name> <operator pos:start="202:21" pos:end="202:21">=</operator> <name pos:start="202:23" pos:end="202:27">entry</name></expr>;</expr_stmt>

            <expr_stmt pos:start="204:13" pos:end="204:33"><expr pos:start="204:13" pos:end="204:32"><name pos:start="204:13" pos:end="204:20"><name pos:start="204:13" pos:end="204:15">env</name><operator pos:start="204:16" pos:end="204:17">-&gt;</operator><name pos:start="204:18" pos:end="204:20">npc</name></name> <operator pos:start="204:22" pos:end="204:22">=</operator> <name pos:start="204:24" pos:end="204:28">entry</name> <operator pos:start="204:30" pos:end="204:30">+</operator> <literal type="number" pos:start="204:32" pos:end="204:32">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="206:13" pos:end="206:38"><expr pos:start="206:13" pos:end="206:37"><name pos:start="206:13" pos:end="206:29"><name pos:start="206:13" pos:end="206:22">reset_info</name><operator pos:start="206:23" pos:end="206:24">-&gt;</operator><name pos:start="206:25" pos:end="206:29">entry</name></name> <operator pos:start="206:31" pos:end="206:31">=</operator> <name pos:start="206:33" pos:end="206:37">entry</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="214:5" pos:end="214:25">/* Allocate timers */</comment>

    <expr_stmt pos:start="216:5" pos:end="216:62"><expr pos:start="216:5" pos:end="216:61"><call pos:start="216:5" pos:end="216:61"><name pos:start="216:5" pos:end="216:24">grlib_gptimer_create</name><argument_list pos:start="216:25" pos:end="216:61">(<argument pos:start="216:26" pos:end="216:35"><expr pos:start="216:26" pos:end="216:35"><literal type="number" pos:start="216:26" pos:end="216:35">0x80000300</literal></expr></argument>, <argument pos:start="216:38" pos:end="216:38"><expr pos:start="216:38" pos:end="216:38"><literal type="number" pos:start="216:38" pos:end="216:38">2</literal></expr></argument>, <argument pos:start="216:41" pos:end="216:47"><expr pos:start="216:41" pos:end="216:47"><name pos:start="216:41" pos:end="216:47">CPU_CLK</name></expr></argument>, <argument pos:start="216:50" pos:end="216:57"><expr pos:start="216:50" pos:end="216:57"><name pos:start="216:50" pos:end="216:57">cpu_irqs</name></expr></argument>, <argument pos:start="216:60" pos:end="216:60"><expr pos:start="216:60" pos:end="216:60"><literal type="number" pos:start="216:60" pos:end="216:60">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="220:5" pos:end="220:23">/* Allocate uart */</comment>

    <if_stmt pos:start="222:5" pos:end="226:5"><if pos:start="222:5" pos:end="226:5">if <condition pos:start="222:8" pos:end="222:22">(<expr pos:start="222:9" pos:end="222:21"><name pos:start="222:9" pos:end="222:21"><name pos:start="222:9" pos:end="222:18">serial_hds</name><index pos:start="222:19" pos:end="222:21">[<expr pos:start="222:20" pos:end="222:20"><literal type="number" pos:start="222:20" pos:end="222:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="222:24" pos:end="226:5">{<block_content pos:start="224:9" pos:end="224:69">

        <expr_stmt pos:start="224:9" pos:end="224:69"><expr pos:start="224:9" pos:end="224:68"><call pos:start="224:9" pos:end="224:68"><name pos:start="224:9" pos:end="224:28">grlib_apbuart_create</name><argument_list pos:start="224:29" pos:end="224:68">(<argument pos:start="224:30" pos:end="224:39"><expr pos:start="224:30" pos:end="224:39"><literal type="number" pos:start="224:30" pos:end="224:39">0x80000100</literal></expr></argument>, <argument pos:start="224:42" pos:end="224:54"><expr pos:start="224:42" pos:end="224:54"><name pos:start="224:42" pos:end="224:54"><name pos:start="224:42" pos:end="224:51">serial_hds</name><index pos:start="224:52" pos:end="224:54">[<expr pos:start="224:53" pos:end="224:53"><literal type="number" pos:start="224:53" pos:end="224:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="224:57" pos:end="224:67"><expr pos:start="224:57" pos:end="224:67"><name pos:start="224:57" pos:end="224:67"><name pos:start="224:57" pos:end="224:64">cpu_irqs</name><index pos:start="224:65" pos:end="224:67">[<expr pos:start="224:66" pos:end="224:66"><literal type="number" pos:start="224:66" pos:end="224:66">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
