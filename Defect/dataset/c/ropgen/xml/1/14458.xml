<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14458.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:40">doVertLowPass_altivec</name><parameter_list pos:start="1:41" pos:end="1:80">(<parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:48">uint8_t</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">src</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:65">stride</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:79"><decl pos:start="1:68" pos:end="1:79"><type pos:start="1:68" pos:end="1:79"><name pos:start="1:68" pos:end="1:76">PPContext</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:79">c</name></decl></parameter>)</parameter_list> <block pos:start="1:82" pos:end="389:1">{<block_content pos:start="19:5" pos:end="387:5">

    <comment type="block" pos:start="3:5" pos:end="17:6">/*

    this code makes no assumption on src or stride.

    One could remove the recomputation of the perm

    vector by assuming (stride % 16) == 0, unfortunately

    this is not always true. Quite a lot of load/stores

    can be removed by assuming proper alignment of

    src &amp; stride :-(

    */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:17">src2</name> <init pos:start="19:19" pos:end="19:23">= <expr pos:start="19:21" pos:end="19:23"><name pos:start="19:21" pos:end="19:23">src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:27"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:16">vector</name> <name pos:start="21:18" pos:end="21:23">signed</name> <name pos:start="21:25" pos:end="21:27">int</name></type> <name pos:start="21:29" pos:end="21:32">zero</name> <init pos:start="21:34" pos:end="21:51">= <expr pos:start="21:36" pos:end="21:51"><call pos:start="21:36" pos:end="21:51"><name pos:start="21:36" pos:end="21:48">vec_splat_s32</name><argument_list pos:start="21:49" pos:end="21:51">(<argument pos:start="21:50" pos:end="21:50"><expr pos:start="21:50" pos:end="21:50"><literal type="number" pos:start="21:50" pos:end="21:50">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:43"><decl pos:start="23:5" pos:end="23:42"><type pos:start="23:5" pos:end="23:13"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:13">int</name></type> <name pos:start="23:15" pos:end="23:26">properStride</name> <init pos:start="23:28" pos:end="23:42">= <expr pos:start="23:30" pos:end="23:42"><operator pos:start="23:30" pos:end="23:30">(</operator><name pos:start="23:31" pos:end="23:36">stride</name> <operator pos:start="23:38" pos:end="23:38">%</operator> <literal type="number" pos:start="23:40" pos:end="23:41">16</literal><operator pos:start="23:42" pos:end="23:42">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:52"><decl pos:start="25:5" pos:end="25:51"><type pos:start="25:5" pos:end="25:13"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:13">int</name></type> <name pos:start="25:15" pos:end="25:22">srcAlign</name> <init pos:start="25:24" pos:end="25:51">= <expr pos:start="25:26" pos:end="25:51"><operator pos:start="25:26" pos:end="25:26">(</operator><operator pos:start="25:27" pos:end="25:27">(</operator><name pos:start="25:28" pos:end="25:35">unsigned</name> <name pos:start="25:37" pos:end="25:40">long</name><operator pos:start="25:41" pos:end="25:41">)</operator><name pos:start="25:42" pos:end="25:45">src2</name> <operator pos:start="25:47" pos:end="25:47">%</operator> <literal type="number" pos:start="25:49" pos:end="25:50">16</literal><operator pos:start="25:51" pos:end="25:51">)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:48"><expr pos:start="27:5" pos:end="27:47"><call pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:19">DECLARE_ALIGNED</name><argument_list pos:start="27:20" pos:end="27:37">(<argument pos:start="27:21" pos:end="27:22"><expr pos:start="27:21" pos:end="27:22"><literal type="number" pos:start="27:21" pos:end="27:22">16</literal></expr></argument>, <argument pos:start="27:25" pos:end="27:29"><expr pos:start="27:25" pos:end="27:29"><name pos:start="27:25" pos:end="27:29">short</name></expr></argument>, <argument pos:start="27:32" pos:end="27:36"><expr pos:start="27:32" pos:end="27:36"><name pos:start="27:32" pos:end="27:36"><name pos:start="27:32" pos:end="27:33">qp</name><index pos:start="27:34" pos:end="27:36">[<expr pos:start="27:35" pos:end="27:35"><literal type="number" pos:start="27:35" pos:end="27:35">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="27:39" pos:end="27:39">=</operator> <block pos:start="27:41" pos:end="27:47">{<expr pos:start="27:42" pos:end="27:46"><name pos:start="27:42" pos:end="27:46"><name pos:start="27:42" pos:end="27:42">c</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:46">QP</name></name></expr>}</block></expr>;</expr_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:44"><decl pos:start="29:5" pos:end="29:43"><type pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:10">vector</name> <name pos:start="29:12" pos:end="29:17">signed</name> <name pos:start="29:19" pos:end="29:23">short</name></type> <name pos:start="29:25" pos:end="29:27">vqp</name> <init pos:start="29:29" pos:end="29:43">= <expr pos:start="29:31" pos:end="29:43"><call pos:start="29:31" pos:end="29:43"><name pos:start="29:31" pos:end="29:36">vec_ld</name><argument_list pos:start="29:37" pos:end="29:43">(<argument pos:start="29:38" pos:end="29:38"><expr pos:start="29:38" pos:end="29:38"><literal type="number" pos:start="29:38" pos:end="29:38">0</literal></expr></argument>, <argument pos:start="29:41" pos:end="29:42"><expr pos:start="29:41" pos:end="29:42"><name pos:start="29:41" pos:end="29:42">qp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:73"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:10">vector</name> <name pos:start="31:12" pos:end="31:17">signed</name> <name pos:start="31:19" pos:end="31:23">short</name></type> <name pos:start="31:25" pos:end="31:27">vb0</name></decl>, <decl pos:start="31:30" pos:end="31:32"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:30" pos:end="31:32">vb1</name></decl>, <decl pos:start="31:35" pos:end="31:37"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:35" pos:end="31:37">vb2</name></decl>, <decl pos:start="31:40" pos:end="31:42"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:40" pos:end="31:42">vb3</name></decl>, <decl pos:start="31:45" pos:end="31:47"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:45" pos:end="31:47">vb4</name></decl>, <decl pos:start="31:50" pos:end="31:52"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:50" pos:end="31:52">vb5</name></decl>, <decl pos:start="31:55" pos:end="31:57"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:55" pos:end="31:57">vb6</name></decl>, <decl pos:start="31:60" pos:end="31:62"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:60" pos:end="31:62">vb7</name></decl>, <decl pos:start="31:65" pos:end="31:67"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:65" pos:end="31:67">vb8</name></decl>, <decl pos:start="31:70" pos:end="31:72"><type ref="prev" pos:start="31:5" pos:end="31:23"/><name pos:start="31:70" pos:end="31:72">vb9</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:84"><decl pos:start="33:5" pos:end="33:29"><type pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:10">vector</name> <name pos:start="33:12" pos:end="33:19">unsigned</name> <name pos:start="33:21" pos:end="33:24">char</name></type> <name pos:start="33:26" pos:end="33:29">vbA0</name></decl>, <decl pos:start="33:32" pos:end="33:35"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:32" pos:end="33:35">vbA1</name></decl>, <decl pos:start="33:38" pos:end="33:41"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:38" pos:end="33:41">vbA2</name></decl>, <decl pos:start="33:44" pos:end="33:47"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:44" pos:end="33:47">vbA3</name></decl>, <decl pos:start="33:50" pos:end="33:53"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:50" pos:end="33:53">vbA4</name></decl>, <decl pos:start="33:56" pos:end="33:59"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:56" pos:end="33:59">vbA5</name></decl>, <decl pos:start="33:62" pos:end="33:65"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:62" pos:end="33:65">vbA6</name></decl>, <decl pos:start="33:68" pos:end="33:71"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:68" pos:end="33:71">vbA7</name></decl>, <decl pos:start="33:74" pos:end="33:77"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:74" pos:end="33:77">vbA8</name></decl>, <decl pos:start="33:80" pos:end="33:83"><type ref="prev" pos:start="33:5" pos:end="33:24"/><name pos:start="33:80" pos:end="33:83">vbA9</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:84"><decl pos:start="35:5" pos:end="35:29"><type pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:10">vector</name> <name pos:start="35:12" pos:end="35:19">unsigned</name> <name pos:start="35:21" pos:end="35:24">char</name></type> <name pos:start="35:26" pos:end="35:29">vbB0</name></decl>, <decl pos:start="35:32" pos:end="35:35"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:32" pos:end="35:35">vbB1</name></decl>, <decl pos:start="35:38" pos:end="35:41"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:38" pos:end="35:41">vbB2</name></decl>, <decl pos:start="35:44" pos:end="35:47"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:44" pos:end="35:47">vbB3</name></decl>, <decl pos:start="35:50" pos:end="35:53"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:50" pos:end="35:53">vbB4</name></decl>, <decl pos:start="35:56" pos:end="35:59"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:56" pos:end="35:59">vbB5</name></decl>, <decl pos:start="35:62" pos:end="35:65"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:62" pos:end="35:65">vbB6</name></decl>, <decl pos:start="35:68" pos:end="35:71"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:68" pos:end="35:71">vbB7</name></decl>, <decl pos:start="35:74" pos:end="35:77"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:74" pos:end="35:77">vbB8</name></decl>, <decl pos:start="35:80" pos:end="35:83"><type ref="prev" pos:start="35:5" pos:end="35:24"/><name pos:start="35:80" pos:end="35:83">vbB9</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:84"><decl pos:start="37:5" pos:end="37:29"><type pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:10">vector</name> <name pos:start="37:12" pos:end="37:19">unsigned</name> <name pos:start="37:21" pos:end="37:24">char</name></type> <name pos:start="37:26" pos:end="37:29">vbT0</name></decl>, <decl pos:start="37:32" pos:end="37:35"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:32" pos:end="37:35">vbT1</name></decl>, <decl pos:start="37:38" pos:end="37:41"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:38" pos:end="37:41">vbT2</name></decl>, <decl pos:start="37:44" pos:end="37:47"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:44" pos:end="37:47">vbT3</name></decl>, <decl pos:start="37:50" pos:end="37:53"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:50" pos:end="37:53">vbT4</name></decl>, <decl pos:start="37:56" pos:end="37:59"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:56" pos:end="37:59">vbT5</name></decl>, <decl pos:start="37:62" pos:end="37:65"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:62" pos:end="37:65">vbT6</name></decl>, <decl pos:start="37:68" pos:end="37:71"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:68" pos:end="37:71">vbT7</name></decl>, <decl pos:start="37:74" pos:end="37:77"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:74" pos:end="37:77">vbT8</name></decl>, <decl pos:start="37:80" pos:end="37:83"><type ref="prev" pos:start="37:5" pos:end="37:24"/><name pos:start="37:80" pos:end="37:83">vbT9</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="41:64"><decl pos:start="39:5" pos:end="39:31"><type pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:10">vector</name> <name pos:start="39:12" pos:end="39:19">unsigned</name> <name pos:start="39:21" pos:end="39:24">char</name></type> <name pos:start="39:26" pos:end="39:31">perml0</name></decl>, <decl pos:start="39:34" pos:end="39:39"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="39:34" pos:end="39:39">perml1</name></decl>, <decl pos:start="39:42" pos:end="39:47"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="39:42" pos:end="39:47">perml2</name></decl>, <decl pos:start="39:50" pos:end="39:55"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="39:50" pos:end="39:55">perml3</name></decl>, <decl pos:start="39:58" pos:end="39:63"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="39:58" pos:end="39:63">perml4</name></decl>,

                         <decl pos:start="41:26" pos:end="41:31"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="41:26" pos:end="41:31">perml5</name></decl>, <decl pos:start="41:34" pos:end="41:39"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="41:34" pos:end="41:39">perml6</name></decl>, <decl pos:start="41:42" pos:end="41:47"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="41:42" pos:end="41:47">perml7</name></decl>, <decl pos:start="41:50" pos:end="41:55"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="41:50" pos:end="41:55">perml8</name></decl>, <decl pos:start="41:58" pos:end="41:63"><type ref="prev" pos:start="39:5" pos:end="39:24"/><name pos:start="41:58" pos:end="41:63">perml9</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="61:33"><decl pos:start="43:5" pos:end="43:23"><type pos:start="43:5" pos:end="43:16"><specifier pos:start="43:5" pos:end="43:12">register</specifier> <name pos:start="43:14" pos:end="43:16">int</name></type> <name pos:start="43:18" pos:end="43:19">j0</name> <init pos:start="43:21" pos:end="43:23">= <expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr></init></decl>,

                 <decl pos:start="45:18" pos:end="45:28"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="45:18" pos:end="45:19">j1</name> <init pos:start="45:21" pos:end="45:28">= <expr pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:28">stride</name></expr></init></decl>,

                 <decl pos:start="47:18" pos:end="47:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="47:18" pos:end="47:19">j2</name> <init pos:start="47:21" pos:end="47:32">= <expr pos:start="47:23" pos:end="47:32"><literal type="number" pos:start="47:23" pos:end="47:23">2</literal> <operator pos:start="47:25" pos:end="47:25">*</operator> <name pos:start="47:27" pos:end="47:32">stride</name></expr></init></decl>,

                 <decl pos:start="49:18" pos:end="49:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="49:18" pos:end="49:19">j3</name> <init pos:start="49:21" pos:end="49:32">= <expr pos:start="49:23" pos:end="49:32"><literal type="number" pos:start="49:23" pos:end="49:23">3</literal> <operator pos:start="49:25" pos:end="49:25">*</operator> <name pos:start="49:27" pos:end="49:32">stride</name></expr></init></decl>,

                 <decl pos:start="51:18" pos:end="51:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="51:18" pos:end="51:19">j4</name> <init pos:start="51:21" pos:end="51:32">= <expr pos:start="51:23" pos:end="51:32"><literal type="number" pos:start="51:23" pos:end="51:23">4</literal> <operator pos:start="51:25" pos:end="51:25">*</operator> <name pos:start="51:27" pos:end="51:32">stride</name></expr></init></decl>,

                 <decl pos:start="53:18" pos:end="53:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="53:18" pos:end="53:19">j5</name> <init pos:start="53:21" pos:end="53:32">= <expr pos:start="53:23" pos:end="53:32"><literal type="number" pos:start="53:23" pos:end="53:23">5</literal> <operator pos:start="53:25" pos:end="53:25">*</operator> <name pos:start="53:27" pos:end="53:32">stride</name></expr></init></decl>,

                 <decl pos:start="55:18" pos:end="55:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="55:18" pos:end="55:19">j6</name> <init pos:start="55:21" pos:end="55:32">= <expr pos:start="55:23" pos:end="55:32"><literal type="number" pos:start="55:23" pos:end="55:23">6</literal> <operator pos:start="55:25" pos:end="55:25">*</operator> <name pos:start="55:27" pos:end="55:32">stride</name></expr></init></decl>,

                 <decl pos:start="57:18" pos:end="57:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="57:18" pos:end="57:19">j7</name> <init pos:start="57:21" pos:end="57:32">= <expr pos:start="57:23" pos:end="57:32"><literal type="number" pos:start="57:23" pos:end="57:23">7</literal> <operator pos:start="57:25" pos:end="57:25">*</operator> <name pos:start="57:27" pos:end="57:32">stride</name></expr></init></decl>,

                 <decl pos:start="59:18" pos:end="59:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="59:18" pos:end="59:19">j8</name> <init pos:start="59:21" pos:end="59:32">= <expr pos:start="59:23" pos:end="59:32"><literal type="number" pos:start="59:23" pos:end="59:23">8</literal> <operator pos:start="59:25" pos:end="59:25">*</operator> <name pos:start="59:27" pos:end="59:32">stride</name></expr></init></decl>,

                 <decl pos:start="61:18" pos:end="61:32"><type ref="prev" pos:start="43:5" pos:end="43:16"/><name pos:start="61:18" pos:end="61:19">j9</name> <init pos:start="61:21" pos:end="61:32">= <expr pos:start="61:23" pos:end="61:32"><literal type="number" pos:start="61:23" pos:end="61:23">9</literal> <operator pos:start="61:25" pos:end="61:25">*</operator> <name pos:start="61:27" pos:end="61:32">stride</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:28"><expr pos:start="65:5" pos:end="65:27"><name pos:start="65:5" pos:end="65:7">vqp</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:27"><name pos:start="65:11" pos:end="65:19">vec_splat</name><argument_list pos:start="65:20" pos:end="65:27">(<argument pos:start="65:21" pos:end="65:23"><expr pos:start="65:21" pos:end="65:23"><name pos:start="65:21" pos:end="65:23">vqp</name></expr></argument>, <argument pos:start="65:26" pos:end="65:26"><expr pos:start="65:26" pos:end="65:26"><literal type="number" pos:start="65:26" pos:end="65:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="100:0"><expr pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:8">src2</name> <operator pos:start="69:10" pos:end="69:11">+=</operator> <name pos:start="69:13" pos:end="69:18">stride</name><operator pos:start="69:19" pos:end="69:19">*</operator><literal type="number" pos:start="69:20" pos:end="69:20">3</literal></expr>;</expr_stmt>



<cpp:define pos:start="73:1" pos:end="87:69">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:17">LOAD_LINE</name><parameter_list pos:start="73:18" pos:end="73:20">(<parameter pos:start="73:19" pos:end="73:19"><type pos:start="73:19" pos:end="73:19"><name pos:start="73:19" pos:end="73:19">i</name></type></parameter>)</parameter_list></cpp:macro>                                                    \

    <cpp:value pos:start="75:5" pos:end="87:69">perml##i = vec_lvsl(i * stride, src2);                              \

    vbA##i = vec_ld(i * stride, src2);                                  \

    vbB##i = vec_ld(i * stride + 16, src2);                             \

    vbT##i = vec_perm(vbA##i, vbB##i, perml##i);                        \

    vb##i =                                                             \

        (vector signed short)vec_mergeh((vector unsigned char)zero,     \

                                        (vector unsigned char)vbT##i)</cpp:value></cpp:define>



<cpp:define pos:start="91:1" pos:end="99:67">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:25">LOAD_LINE_ALIGNED</name><parameter_list pos:start="91:26" pos:end="91:28">(<parameter pos:start="91:27" pos:end="91:27"><type pos:start="91:27" pos:end="91:27"><name pos:start="91:27" pos:end="91:27">i</name></type></parameter>)</parameter_list></cpp:macro>                                            \

    <cpp:value pos:start="93:5" pos:end="99:67">vbT##i = vec_ld(j##i, src2);                                        \

    vb##i =                                                             \

        (vector signed short)vec_mergeh((vector signed char)zero,       \

                                        (vector signed char)vbT##i)</cpp:value></cpp:define>



      <comment type="block" pos:start="103:7" pos:end="107:55">/* Special-casing the aligned case is worthwhile, as all calls from

       * the (transposed) horizontable deblocks will be aligned, in addition

       * to the naturally aligned vertical deblocks. */</comment>

    <if_stmt pos:start="109:5" pos:end="158:0"><if pos:start="109:5" pos:end="131:5">if <condition pos:start="109:8" pos:end="109:33">(<expr pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:20">properStride</name> <operator pos:start="109:22" pos:end="109:23">&amp;&amp;</operator> <name pos:start="109:25" pos:end="109:32">srcAlign</name></expr>)</condition> <block pos:start="109:35" pos:end="131:5">{<block_content pos:start="111:11" pos:end="129:31">

          <expr_stmt pos:start="111:11" pos:end="111:31"><expr pos:start="111:11" pos:end="111:30"><call pos:start="111:11" pos:end="111:30"><name pos:start="111:11" pos:end="111:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="111:28" pos:end="111:30">(<argument pos:start="111:29" pos:end="111:29"><expr pos:start="111:29" pos:end="111:29"><literal type="number" pos:start="111:29" pos:end="111:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="113:11" pos:end="113:31"><expr pos:start="113:11" pos:end="113:30"><call pos:start="113:11" pos:end="113:30"><name pos:start="113:11" pos:end="113:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="113:28" pos:end="113:30">(<argument pos:start="113:29" pos:end="113:29"><expr pos:start="113:29" pos:end="113:29"><literal type="number" pos:start="113:29" pos:end="113:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="115:11" pos:end="115:31"><expr pos:start="115:11" pos:end="115:30"><call pos:start="115:11" pos:end="115:30"><name pos:start="115:11" pos:end="115:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="115:28" pos:end="115:30">(<argument pos:start="115:29" pos:end="115:29"><expr pos:start="115:29" pos:end="115:29"><literal type="number" pos:start="115:29" pos:end="115:29">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="117:11" pos:end="117:31"><expr pos:start="117:11" pos:end="117:30"><call pos:start="117:11" pos:end="117:30"><name pos:start="117:11" pos:end="117:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="117:28" pos:end="117:30">(<argument pos:start="117:29" pos:end="117:29"><expr pos:start="117:29" pos:end="117:29"><literal type="number" pos:start="117:29" pos:end="117:29">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="119:11" pos:end="119:31"><expr pos:start="119:11" pos:end="119:30"><call pos:start="119:11" pos:end="119:30"><name pos:start="119:11" pos:end="119:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="119:28" pos:end="119:30">(<argument pos:start="119:29" pos:end="119:29"><expr pos:start="119:29" pos:end="119:29"><literal type="number" pos:start="119:29" pos:end="119:29">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="121:11" pos:end="121:31"><expr pos:start="121:11" pos:end="121:30"><call pos:start="121:11" pos:end="121:30"><name pos:start="121:11" pos:end="121:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="121:28" pos:end="121:30">(<argument pos:start="121:29" pos:end="121:29"><expr pos:start="121:29" pos:end="121:29"><literal type="number" pos:start="121:29" pos:end="121:29">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="123:11" pos:end="123:31"><expr pos:start="123:11" pos:end="123:30"><call pos:start="123:11" pos:end="123:30"><name pos:start="123:11" pos:end="123:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="123:28" pos:end="123:30">(<argument pos:start="123:29" pos:end="123:29"><expr pos:start="123:29" pos:end="123:29"><literal type="number" pos:start="123:29" pos:end="123:29">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="125:11" pos:end="125:31"><expr pos:start="125:11" pos:end="125:30"><call pos:start="125:11" pos:end="125:30"><name pos:start="125:11" pos:end="125:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="125:28" pos:end="125:30">(<argument pos:start="125:29" pos:end="125:29"><expr pos:start="125:29" pos:end="125:29"><literal type="number" pos:start="125:29" pos:end="125:29">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="127:11" pos:end="127:31"><expr pos:start="127:11" pos:end="127:30"><call pos:start="127:11" pos:end="127:30"><name pos:start="127:11" pos:end="127:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="127:28" pos:end="127:30">(<argument pos:start="127:29" pos:end="127:29"><expr pos:start="127:29" pos:end="127:29"><literal type="number" pos:start="127:29" pos:end="127:29">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="129:11" pos:end="129:31"><expr pos:start="129:11" pos:end="129:30"><call pos:start="129:11" pos:end="129:30"><name pos:start="129:11" pos:end="129:27">LOAD_LINE_ALIGNED</name><argument_list pos:start="129:28" pos:end="129:30">(<argument pos:start="129:29" pos:end="129:29"><expr pos:start="129:29" pos:end="129:29"><literal type="number" pos:start="129:29" pos:end="129:29">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="158:0">else <block pos:start="131:12" pos:end="158:0">{<block_content pos:start="133:11" pos:end="151:23">

          <expr_stmt pos:start="133:11" pos:end="133:23"><expr pos:start="133:11" pos:end="133:22"><call pos:start="133:11" pos:end="133:22"><name pos:start="133:11" pos:end="133:19">LOAD_LINE</name><argument_list pos:start="133:20" pos:end="133:22">(<argument pos:start="133:21" pos:end="133:21"><expr pos:start="133:21" pos:end="133:21"><literal type="number" pos:start="133:21" pos:end="133:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="135:11" pos:end="135:23"><expr pos:start="135:11" pos:end="135:22"><call pos:start="135:11" pos:end="135:22"><name pos:start="135:11" pos:end="135:19">LOAD_LINE</name><argument_list pos:start="135:20" pos:end="135:22">(<argument pos:start="135:21" pos:end="135:21"><expr pos:start="135:21" pos:end="135:21"><literal type="number" pos:start="135:21" pos:end="135:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="137:11" pos:end="137:23"><expr pos:start="137:11" pos:end="137:22"><call pos:start="137:11" pos:end="137:22"><name pos:start="137:11" pos:end="137:19">LOAD_LINE</name><argument_list pos:start="137:20" pos:end="137:22">(<argument pos:start="137:21" pos:end="137:21"><expr pos:start="137:21" pos:end="137:21"><literal type="number" pos:start="137:21" pos:end="137:21">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="139:11" pos:end="139:23"><expr pos:start="139:11" pos:end="139:22"><call pos:start="139:11" pos:end="139:22"><name pos:start="139:11" pos:end="139:19">LOAD_LINE</name><argument_list pos:start="139:20" pos:end="139:22">(<argument pos:start="139:21" pos:end="139:21"><expr pos:start="139:21" pos:end="139:21"><literal type="number" pos:start="139:21" pos:end="139:21">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="141:11" pos:end="141:23"><expr pos:start="141:11" pos:end="141:22"><call pos:start="141:11" pos:end="141:22"><name pos:start="141:11" pos:end="141:19">LOAD_LINE</name><argument_list pos:start="141:20" pos:end="141:22">(<argument pos:start="141:21" pos:end="141:21"><expr pos:start="141:21" pos:end="141:21"><literal type="number" pos:start="141:21" pos:end="141:21">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="143:11" pos:end="143:23"><expr pos:start="143:11" pos:end="143:22"><call pos:start="143:11" pos:end="143:22"><name pos:start="143:11" pos:end="143:19">LOAD_LINE</name><argument_list pos:start="143:20" pos:end="143:22">(<argument pos:start="143:21" pos:end="143:21"><expr pos:start="143:21" pos:end="143:21"><literal type="number" pos:start="143:21" pos:end="143:21">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="145:11" pos:end="145:23"><expr pos:start="145:11" pos:end="145:22"><call pos:start="145:11" pos:end="145:22"><name pos:start="145:11" pos:end="145:19">LOAD_LINE</name><argument_list pos:start="145:20" pos:end="145:22">(<argument pos:start="145:21" pos:end="145:21"><expr pos:start="145:21" pos:end="145:21"><literal type="number" pos:start="145:21" pos:end="145:21">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="147:11" pos:end="147:23"><expr pos:start="147:11" pos:end="147:22"><call pos:start="147:11" pos:end="147:22"><name pos:start="147:11" pos:end="147:19">LOAD_LINE</name><argument_list pos:start="147:20" pos:end="147:22">(<argument pos:start="147:21" pos:end="147:21"><expr pos:start="147:21" pos:end="147:21"><literal type="number" pos:start="147:21" pos:end="147:21">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="149:11" pos:end="149:23"><expr pos:start="149:11" pos:end="149:22"><call pos:start="149:11" pos:end="149:22"><name pos:start="149:11" pos:end="149:19">LOAD_LINE</name><argument_list pos:start="149:20" pos:end="149:22">(<argument pos:start="149:21" pos:end="149:21"><expr pos:start="149:21" pos:end="149:21"><literal type="number" pos:start="149:21" pos:end="149:21">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="151:11" pos:end="151:23"><expr pos:start="151:11" pos:end="151:22"><call pos:start="151:11" pos:end="151:22"><name pos:start="151:11" pos:end="151:19">LOAD_LINE</name><argument_list pos:start="151:20" pos:end="151:22">(<argument pos:start="151:21" pos:end="151:21"><expr pos:start="151:21" pos:end="151:21"><literal type="number" pos:start="151:21" pos:end="151:21">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:undef pos:start="155:1" pos:end="155:16">#<cpp:directive pos:start="155:2" pos:end="155:6">undef</cpp:directive> <name pos:start="155:8" pos:end="155:16">LOAD_LINE</name></cpp:undef>

<cpp:undef pos:start="157:1" pos:end="157:24">#<cpp:directive pos:start="157:2" pos:end="157:6">undef</cpp:directive> <name pos:start="157:8" pos:end="157:24">LOAD_LINE_ALIGNED</name></cpp:undef>

    <block pos:start="159:5" pos:end="387:5">{<block_content pos:start="161:9" pos:end="386:0">

        <decl_stmt pos:start="161:9" pos:end="161:59"><decl pos:start="161:9" pos:end="161:58"><type pos:start="161:9" pos:end="161:35"><specifier pos:start="161:9" pos:end="161:13">const</specifier> <name pos:start="161:15" pos:end="161:20">vector</name> <name pos:start="161:22" pos:end="161:29">unsigned</name> <name pos:start="161:31" pos:end="161:35">short</name></type> <name pos:start="161:37" pos:end="161:39">v_2</name> <init pos:start="161:41" pos:end="161:58">= <expr pos:start="161:43" pos:end="161:58"><call pos:start="161:43" pos:end="161:58"><name pos:start="161:43" pos:end="161:55">vec_splat_u16</name><argument_list pos:start="161:56" pos:end="161:58">(<argument pos:start="161:57" pos:end="161:57"><expr pos:start="161:57" pos:end="161:57"><literal type="number" pos:start="161:57" pos:end="161:57">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:59"><decl pos:start="163:9" pos:end="163:58"><type pos:start="163:9" pos:end="163:35"><specifier pos:start="163:9" pos:end="163:13">const</specifier> <name pos:start="163:15" pos:end="163:20">vector</name> <name pos:start="163:22" pos:end="163:29">unsigned</name> <name pos:start="163:31" pos:end="163:35">short</name></type> <name pos:start="163:37" pos:end="163:39">v_4</name> <init pos:start="163:41" pos:end="163:58">= <expr pos:start="163:43" pos:end="163:58"><call pos:start="163:43" pos:end="163:58"><name pos:start="163:43" pos:end="163:55">vec_splat_u16</name><argument_list pos:start="163:56" pos:end="163:58">(<argument pos:start="163:57" pos:end="163:57"><expr pos:start="163:57" pos:end="163:57"><literal type="number" pos:start="163:57" pos:end="163:57">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="167:9" pos:end="167:63"><decl pos:start="167:9" pos:end="167:62"><type pos:start="167:9" pos:end="167:33"><specifier pos:start="167:9" pos:end="167:13">const</specifier> <name pos:start="167:15" pos:end="167:20">vector</name> <name pos:start="167:22" pos:end="167:27">signed</name> <name pos:start="167:29" pos:end="167:33">short</name></type> <name pos:start="167:35" pos:end="167:42">v_diff01</name> <init pos:start="167:44" pos:end="167:62">= <expr pos:start="167:46" pos:end="167:62"><call pos:start="167:46" pos:end="167:62"><name pos:start="167:46" pos:end="167:52">vec_sub</name><argument_list pos:start="167:53" pos:end="167:62">(<argument pos:start="167:54" pos:end="167:56"><expr pos:start="167:54" pos:end="167:56"><name pos:start="167:54" pos:end="167:56">vb0</name></expr></argument>, <argument pos:start="167:59" pos:end="167:61"><expr pos:start="167:59" pos:end="167:61"><name pos:start="167:59" pos:end="167:61">vb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="169:9" pos:end="171:76"><decl pos:start="169:9" pos:end="171:75"><type pos:start="169:9" pos:end="169:35"><specifier pos:start="169:9" pos:end="169:13">const</specifier> <name pos:start="169:15" pos:end="169:20">vector</name> <name pos:start="169:22" pos:end="169:29">unsigned</name> <name pos:start="169:31" pos:end="169:35">short</name></type> <name pos:start="169:37" pos:end="169:43">v_cmp01</name> <init pos:start="169:45" pos:end="171:75">=

            <expr pos:start="171:13" pos:end="171:75"><operator pos:start="171:13" pos:end="171:13">(</operator><specifier pos:start="171:14" pos:end="171:18">const</specifier> <name pos:start="171:20" pos:end="171:25">vector</name> <name pos:start="171:27" pos:end="171:34">unsigned</name> <name pos:start="171:36" pos:end="171:40">short</name><operator pos:start="171:41" pos:end="171:41">)</operator> <call pos:start="171:43" pos:end="171:75"><name pos:start="171:43" pos:end="171:51">vec_cmplt</name><argument_list pos:start="171:52" pos:end="171:75">(<argument pos:start="171:53" pos:end="171:69"><expr pos:start="171:53" pos:end="171:69"><call pos:start="171:53" pos:end="171:69"><name pos:start="171:53" pos:end="171:59">vec_abs</name><argument_list pos:start="171:60" pos:end="171:69">(<argument pos:start="171:61" pos:end="171:68"><expr pos:start="171:61" pos:end="171:68"><name pos:start="171:61" pos:end="171:68">v_diff01</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:72" pos:end="171:74"><expr pos:start="171:72" pos:end="171:74"><name pos:start="171:72" pos:end="171:74">vqp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="173:71"><decl pos:start="173:9" pos:end="173:70"><type pos:start="173:9" pos:end="173:33"><specifier pos:start="173:9" pos:end="173:13">const</specifier> <name pos:start="173:15" pos:end="173:20">vector</name> <name pos:start="173:22" pos:end="173:27">signed</name> <name pos:start="173:29" pos:end="173:33">short</name></type> <name pos:start="173:35" pos:end="173:41">v_first</name> <init pos:start="173:43" pos:end="173:70">= <expr pos:start="173:45" pos:end="173:70"><call pos:start="173:45" pos:end="173:70"><name pos:start="173:45" pos:end="173:51">vec_sel</name><argument_list pos:start="173:52" pos:end="173:70">(<argument pos:start="173:53" pos:end="173:55"><expr pos:start="173:53" pos:end="173:55"><name pos:start="173:53" pos:end="173:55">vb1</name></expr></argument>, <argument pos:start="173:58" pos:end="173:60"><expr pos:start="173:58" pos:end="173:60"><name pos:start="173:58" pos:end="173:60">vb0</name></expr></argument>, <argument pos:start="173:63" pos:end="173:69"><expr pos:start="173:63" pos:end="173:69"><name pos:start="173:63" pos:end="173:69">v_cmp01</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="175:9" pos:end="175:63"><decl pos:start="175:9" pos:end="175:62"><type pos:start="175:9" pos:end="175:33"><specifier pos:start="175:9" pos:end="175:13">const</specifier> <name pos:start="175:15" pos:end="175:20">vector</name> <name pos:start="175:22" pos:end="175:27">signed</name> <name pos:start="175:29" pos:end="175:33">short</name></type> <name pos:start="175:35" pos:end="175:42">v_diff89</name> <init pos:start="175:44" pos:end="175:62">= <expr pos:start="175:46" pos:end="175:62"><call pos:start="175:46" pos:end="175:62"><name pos:start="175:46" pos:end="175:52">vec_sub</name><argument_list pos:start="175:53" pos:end="175:62">(<argument pos:start="175:54" pos:end="175:56"><expr pos:start="175:54" pos:end="175:56"><name pos:start="175:54" pos:end="175:56">vb8</name></expr></argument>, <argument pos:start="175:59" pos:end="175:61"><expr pos:start="175:59" pos:end="175:61"><name pos:start="175:59" pos:end="175:61">vb9</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="177:9" pos:end="179:76"><decl pos:start="177:9" pos:end="179:75"><type pos:start="177:9" pos:end="177:35"><specifier pos:start="177:9" pos:end="177:13">const</specifier> <name pos:start="177:15" pos:end="177:20">vector</name> <name pos:start="177:22" pos:end="177:29">unsigned</name> <name pos:start="177:31" pos:end="177:35">short</name></type> <name pos:start="177:37" pos:end="177:43">v_cmp89</name> <init pos:start="177:45" pos:end="179:75">=

            <expr pos:start="179:13" pos:end="179:75"><operator pos:start="179:13" pos:end="179:13">(</operator><specifier pos:start="179:14" pos:end="179:18">const</specifier> <name pos:start="179:20" pos:end="179:25">vector</name> <name pos:start="179:27" pos:end="179:34">unsigned</name> <name pos:start="179:36" pos:end="179:40">short</name><operator pos:start="179:41" pos:end="179:41">)</operator> <call pos:start="179:43" pos:end="179:75"><name pos:start="179:43" pos:end="179:51">vec_cmplt</name><argument_list pos:start="179:52" pos:end="179:75">(<argument pos:start="179:53" pos:end="179:69"><expr pos:start="179:53" pos:end="179:69"><call pos:start="179:53" pos:end="179:69"><name pos:start="179:53" pos:end="179:59">vec_abs</name><argument_list pos:start="179:60" pos:end="179:69">(<argument pos:start="179:61" pos:end="179:68"><expr pos:start="179:61" pos:end="179:68"><name pos:start="179:61" pos:end="179:68">v_diff89</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:72" pos:end="179:74"><expr pos:start="179:72" pos:end="179:74"><name pos:start="179:72" pos:end="179:74">vqp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="181:9" pos:end="181:70"><decl pos:start="181:9" pos:end="181:69"><type pos:start="181:9" pos:end="181:33"><specifier pos:start="181:9" pos:end="181:13">const</specifier> <name pos:start="181:15" pos:end="181:20">vector</name> <name pos:start="181:22" pos:end="181:27">signed</name> <name pos:start="181:29" pos:end="181:33">short</name></type> <name pos:start="181:35" pos:end="181:40">v_last</name> <init pos:start="181:42" pos:end="181:69">= <expr pos:start="181:44" pos:end="181:69"><call pos:start="181:44" pos:end="181:69"><name pos:start="181:44" pos:end="181:50">vec_sel</name><argument_list pos:start="181:51" pos:end="181:69">(<argument pos:start="181:52" pos:end="181:54"><expr pos:start="181:52" pos:end="181:54"><name pos:start="181:52" pos:end="181:54">vb8</name></expr></argument>, <argument pos:start="181:57" pos:end="181:59"><expr pos:start="181:57" pos:end="181:59"><name pos:start="181:57" pos:end="181:59">vb9</name></expr></argument>, <argument pos:start="181:62" pos:end="181:68"><expr pos:start="181:62" pos:end="181:68"><name pos:start="181:62" pos:end="181:68">v_cmp89</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="185:9" pos:end="185:93"><decl pos:start="185:9" pos:end="185:92"><type pos:start="185:9" pos:end="185:33"><specifier pos:start="185:9" pos:end="185:13">const</specifier> <name pos:start="185:15" pos:end="185:20">vector</name> <name pos:start="185:22" pos:end="185:27">signed</name> <name pos:start="185:29" pos:end="185:33">short</name></type> <name pos:start="185:35" pos:end="185:40">temp01</name> <init pos:start="185:42" pos:end="185:92">= <expr pos:start="185:44" pos:end="185:92"><call pos:start="185:44" pos:end="185:92"><name pos:start="185:44" pos:end="185:52">vec_mladd</name><argument_list pos:start="185:53" pos:end="185:92">(<argument pos:start="185:54" pos:end="185:60"><expr pos:start="185:54" pos:end="185:60"><name pos:start="185:54" pos:end="185:60">v_first</name></expr></argument>, <argument pos:start="185:63" pos:end="185:86"><expr pos:start="185:63" pos:end="185:86"><operator pos:start="185:63" pos:end="185:63">(</operator><name pos:start="185:64" pos:end="185:69">vector</name> <name pos:start="185:71" pos:end="185:76">signed</name> <name pos:start="185:78" pos:end="185:82">short</name><operator pos:start="185:83" pos:end="185:83">)</operator><name pos:start="185:84" pos:end="185:86">v_4</name></expr></argument>, <argument pos:start="185:89" pos:end="185:91"><expr pos:start="185:89" pos:end="185:91"><name pos:start="185:89" pos:end="185:91">vb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="187:9" pos:end="187:61"><decl pos:start="187:9" pos:end="187:60"><type pos:start="187:9" pos:end="187:33"><specifier pos:start="187:9" pos:end="187:13">const</specifier> <name pos:start="187:15" pos:end="187:20">vector</name> <name pos:start="187:22" pos:end="187:27">signed</name> <name pos:start="187:29" pos:end="187:33">short</name></type> <name pos:start="187:35" pos:end="187:40">temp02</name> <init pos:start="187:42" pos:end="187:60">= <expr pos:start="187:44" pos:end="187:60"><call pos:start="187:44" pos:end="187:60"><name pos:start="187:44" pos:end="187:50">vec_add</name><argument_list pos:start="187:51" pos:end="187:60">(<argument pos:start="187:52" pos:end="187:54"><expr pos:start="187:52" pos:end="187:54"><name pos:start="187:52" pos:end="187:54">vb2</name></expr></argument>, <argument pos:start="187:57" pos:end="187:59"><expr pos:start="187:57" pos:end="187:59"><name pos:start="187:57" pos:end="187:59">vb3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="189:9" pos:end="189:85"><decl pos:start="189:9" pos:end="189:84"><type pos:start="189:9" pos:end="189:33"><specifier pos:start="189:9" pos:end="189:13">const</specifier> <name pos:start="189:15" pos:end="189:20">vector</name> <name pos:start="189:22" pos:end="189:27">signed</name> <name pos:start="189:29" pos:end="189:33">short</name></type> <name pos:start="189:35" pos:end="189:40">temp03</name> <init pos:start="189:42" pos:end="189:84">= <expr pos:start="189:44" pos:end="189:84"><call pos:start="189:44" pos:end="189:84"><name pos:start="189:44" pos:end="189:50">vec_add</name><argument_list pos:start="189:51" pos:end="189:84">(<argument pos:start="189:52" pos:end="189:57"><expr pos:start="189:52" pos:end="189:57"><name pos:start="189:52" pos:end="189:57">temp01</name></expr></argument>, <argument pos:start="189:60" pos:end="189:83"><expr pos:start="189:60" pos:end="189:83"><operator pos:start="189:60" pos:end="189:60">(</operator><name pos:start="189:61" pos:end="189:66">vector</name> <name pos:start="189:68" pos:end="189:73">signed</name> <name pos:start="189:75" pos:end="189:79">short</name><operator pos:start="189:80" pos:end="189:80">)</operator><name pos:start="189:81" pos:end="189:83">v_4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:69"><decl pos:start="191:9" pos:end="191:68"><type pos:start="191:9" pos:end="191:33"><specifier pos:start="191:9" pos:end="191:13">const</specifier> <name pos:start="191:15" pos:end="191:20">vector</name> <name pos:start="191:22" pos:end="191:27">signed</name> <name pos:start="191:29" pos:end="191:33">short</name></type> <name pos:start="191:35" pos:end="191:42">v_sumsB0</name> <init pos:start="191:44" pos:end="191:68">= <expr pos:start="191:46" pos:end="191:68"><call pos:start="191:46" pos:end="191:68"><name pos:start="191:46" pos:end="191:52">vec_add</name><argument_list pos:start="191:53" pos:end="191:68">(<argument pos:start="191:54" pos:end="191:59"><expr pos:start="191:54" pos:end="191:59"><name pos:start="191:54" pos:end="191:59">temp02</name></expr></argument>, <argument pos:start="191:62" pos:end="191:67"><expr pos:start="191:62" pos:end="191:67"><name pos:start="191:62" pos:end="191:67">temp03</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="195:9" pos:end="195:70"><decl pos:start="195:9" pos:end="195:69"><type pos:start="195:9" pos:end="195:33"><specifier pos:start="195:9" pos:end="195:13">const</specifier> <name pos:start="195:15" pos:end="195:20">vector</name> <name pos:start="195:22" pos:end="195:27">signed</name> <name pos:start="195:29" pos:end="195:33">short</name></type> <name pos:start="195:35" pos:end="195:40">temp11</name> <init pos:start="195:42" pos:end="195:69">= <expr pos:start="195:44" pos:end="195:69"><call pos:start="195:44" pos:end="195:69"><name pos:start="195:44" pos:end="195:50">vec_sub</name><argument_list pos:start="195:51" pos:end="195:69">(<argument pos:start="195:52" pos:end="195:59"><expr pos:start="195:52" pos:end="195:59"><name pos:start="195:52" pos:end="195:59">v_sumsB0</name></expr></argument>, <argument pos:start="195:62" pos:end="195:68"><expr pos:start="195:62" pos:end="195:68"><name pos:start="195:62" pos:end="195:68">v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="197:9" pos:end="197:66"><decl pos:start="197:9" pos:end="197:65"><type pos:start="197:9" pos:end="197:33"><specifier pos:start="197:9" pos:end="197:13">const</specifier> <name pos:start="197:15" pos:end="197:20">vector</name> <name pos:start="197:22" pos:end="197:27">signed</name> <name pos:start="197:29" pos:end="197:33">short</name></type> <name pos:start="197:35" pos:end="197:42">v_sumsB1</name> <init pos:start="197:44" pos:end="197:65">= <expr pos:start="197:46" pos:end="197:65"><call pos:start="197:46" pos:end="197:65"><name pos:start="197:46" pos:end="197:52">vec_add</name><argument_list pos:start="197:53" pos:end="197:65">(<argument pos:start="197:54" pos:end="197:59"><expr pos:start="197:54" pos:end="197:59"><name pos:start="197:54" pos:end="197:59">temp11</name></expr></argument>, <argument pos:start="197:62" pos:end="197:64"><expr pos:start="197:62" pos:end="197:64"><name pos:start="197:62" pos:end="197:64">vb4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="201:9" pos:end="201:70"><decl pos:start="201:9" pos:end="201:69"><type pos:start="201:9" pos:end="201:33"><specifier pos:start="201:9" pos:end="201:13">const</specifier> <name pos:start="201:15" pos:end="201:20">vector</name> <name pos:start="201:22" pos:end="201:27">signed</name> <name pos:start="201:29" pos:end="201:33">short</name></type> <name pos:start="201:35" pos:end="201:40">temp21</name> <init pos:start="201:42" pos:end="201:69">= <expr pos:start="201:44" pos:end="201:69"><call pos:start="201:44" pos:end="201:69"><name pos:start="201:44" pos:end="201:50">vec_sub</name><argument_list pos:start="201:51" pos:end="201:69">(<argument pos:start="201:52" pos:end="201:59"><expr pos:start="201:52" pos:end="201:59"><name pos:start="201:52" pos:end="201:59">v_sumsB1</name></expr></argument>, <argument pos:start="201:62" pos:end="201:68"><expr pos:start="201:62" pos:end="201:68"><name pos:start="201:62" pos:end="201:68">v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="203:9" pos:end="203:66"><decl pos:start="203:9" pos:end="203:65"><type pos:start="203:9" pos:end="203:33"><specifier pos:start="203:9" pos:end="203:13">const</specifier> <name pos:start="203:15" pos:end="203:20">vector</name> <name pos:start="203:22" pos:end="203:27">signed</name> <name pos:start="203:29" pos:end="203:33">short</name></type> <name pos:start="203:35" pos:end="203:42">v_sumsB2</name> <init pos:start="203:44" pos:end="203:65">= <expr pos:start="203:46" pos:end="203:65"><call pos:start="203:46" pos:end="203:65"><name pos:start="203:46" pos:end="203:52">vec_add</name><argument_list pos:start="203:53" pos:end="203:65">(<argument pos:start="203:54" pos:end="203:59"><expr pos:start="203:54" pos:end="203:59"><name pos:start="203:54" pos:end="203:59">temp21</name></expr></argument>, <argument pos:start="203:62" pos:end="203:64"><expr pos:start="203:62" pos:end="203:64"><name pos:start="203:62" pos:end="203:64">vb5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="207:9" pos:end="207:70"><decl pos:start="207:9" pos:end="207:69"><type pos:start="207:9" pos:end="207:33"><specifier pos:start="207:9" pos:end="207:13">const</specifier> <name pos:start="207:15" pos:end="207:20">vector</name> <name pos:start="207:22" pos:end="207:27">signed</name> <name pos:start="207:29" pos:end="207:33">short</name></type> <name pos:start="207:35" pos:end="207:40">temp31</name> <init pos:start="207:42" pos:end="207:69">= <expr pos:start="207:44" pos:end="207:69"><call pos:start="207:44" pos:end="207:69"><name pos:start="207:44" pos:end="207:50">vec_sub</name><argument_list pos:start="207:51" pos:end="207:69">(<argument pos:start="207:52" pos:end="207:59"><expr pos:start="207:52" pos:end="207:59"><name pos:start="207:52" pos:end="207:59">v_sumsB2</name></expr></argument>, <argument pos:start="207:62" pos:end="207:68"><expr pos:start="207:62" pos:end="207:68"><name pos:start="207:62" pos:end="207:68">v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="209:9" pos:end="209:66"><decl pos:start="209:9" pos:end="209:65"><type pos:start="209:9" pos:end="209:33"><specifier pos:start="209:9" pos:end="209:13">const</specifier> <name pos:start="209:15" pos:end="209:20">vector</name> <name pos:start="209:22" pos:end="209:27">signed</name> <name pos:start="209:29" pos:end="209:33">short</name></type> <name pos:start="209:35" pos:end="209:42">v_sumsB3</name> <init pos:start="209:44" pos:end="209:65">= <expr pos:start="209:46" pos:end="209:65"><call pos:start="209:46" pos:end="209:65"><name pos:start="209:46" pos:end="209:52">vec_add</name><argument_list pos:start="209:53" pos:end="209:65">(<argument pos:start="209:54" pos:end="209:59"><expr pos:start="209:54" pos:end="209:59"><name pos:start="209:54" pos:end="209:59">temp31</name></expr></argument>, <argument pos:start="209:62" pos:end="209:64"><expr pos:start="209:62" pos:end="209:64"><name pos:start="209:62" pos:end="209:64">vb6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="213:9" pos:end="213:70"><decl pos:start="213:9" pos:end="213:69"><type pos:start="213:9" pos:end="213:33"><specifier pos:start="213:9" pos:end="213:13">const</specifier> <name pos:start="213:15" pos:end="213:20">vector</name> <name pos:start="213:22" pos:end="213:27">signed</name> <name pos:start="213:29" pos:end="213:33">short</name></type> <name pos:start="213:35" pos:end="213:40">temp41</name> <init pos:start="213:42" pos:end="213:69">= <expr pos:start="213:44" pos:end="213:69"><call pos:start="213:44" pos:end="213:69"><name pos:start="213:44" pos:end="213:50">vec_sub</name><argument_list pos:start="213:51" pos:end="213:69">(<argument pos:start="213:52" pos:end="213:59"><expr pos:start="213:52" pos:end="213:59"><name pos:start="213:52" pos:end="213:59">v_sumsB3</name></expr></argument>, <argument pos:start="213:62" pos:end="213:68"><expr pos:start="213:62" pos:end="213:68"><name pos:start="213:62" pos:end="213:68">v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:66"><decl pos:start="215:9" pos:end="215:65"><type pos:start="215:9" pos:end="215:33"><specifier pos:start="215:9" pos:end="215:13">const</specifier> <name pos:start="215:15" pos:end="215:20">vector</name> <name pos:start="215:22" pos:end="215:27">signed</name> <name pos:start="215:29" pos:end="215:33">short</name></type> <name pos:start="215:35" pos:end="215:42">v_sumsB4</name> <init pos:start="215:44" pos:end="215:65">= <expr pos:start="215:46" pos:end="215:65"><call pos:start="215:46" pos:end="215:65"><name pos:start="215:46" pos:end="215:52">vec_add</name><argument_list pos:start="215:53" pos:end="215:65">(<argument pos:start="215:54" pos:end="215:59"><expr pos:start="215:54" pos:end="215:59"><name pos:start="215:54" pos:end="215:59">temp41</name></expr></argument>, <argument pos:start="215:62" pos:end="215:64"><expr pos:start="215:62" pos:end="215:64"><name pos:start="215:62" pos:end="215:64">vb7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="219:9" pos:end="219:66"><decl pos:start="219:9" pos:end="219:65"><type pos:start="219:9" pos:end="219:33"><specifier pos:start="219:9" pos:end="219:13">const</specifier> <name pos:start="219:15" pos:end="219:20">vector</name> <name pos:start="219:22" pos:end="219:27">signed</name> <name pos:start="219:29" pos:end="219:33">short</name></type> <name pos:start="219:35" pos:end="219:40">temp51</name> <init pos:start="219:42" pos:end="219:65">= <expr pos:start="219:44" pos:end="219:65"><call pos:start="219:44" pos:end="219:65"><name pos:start="219:44" pos:end="219:50">vec_sub</name><argument_list pos:start="219:51" pos:end="219:65">(<argument pos:start="219:52" pos:end="219:59"><expr pos:start="219:52" pos:end="219:59"><name pos:start="219:52" pos:end="219:59">v_sumsB4</name></expr></argument>, <argument pos:start="219:62" pos:end="219:64"><expr pos:start="219:62" pos:end="219:64"><name pos:start="219:62" pos:end="219:64">vb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="221:9" pos:end="221:66"><decl pos:start="221:9" pos:end="221:65"><type pos:start="221:9" pos:end="221:33"><specifier pos:start="221:9" pos:end="221:13">const</specifier> <name pos:start="221:15" pos:end="221:20">vector</name> <name pos:start="221:22" pos:end="221:27">signed</name> <name pos:start="221:29" pos:end="221:33">short</name></type> <name pos:start="221:35" pos:end="221:42">v_sumsB5</name> <init pos:start="221:44" pos:end="221:65">= <expr pos:start="221:46" pos:end="221:65"><call pos:start="221:46" pos:end="221:65"><name pos:start="221:46" pos:end="221:52">vec_add</name><argument_list pos:start="221:53" pos:end="221:65">(<argument pos:start="221:54" pos:end="221:59"><expr pos:start="221:54" pos:end="221:59"><name pos:start="221:54" pos:end="221:59">temp51</name></expr></argument>, <argument pos:start="221:62" pos:end="221:64"><expr pos:start="221:62" pos:end="221:64"><name pos:start="221:62" pos:end="221:64">vb8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="225:9" pos:end="225:66"><decl pos:start="225:9" pos:end="225:65"><type pos:start="225:9" pos:end="225:33"><specifier pos:start="225:9" pos:end="225:13">const</specifier> <name pos:start="225:15" pos:end="225:20">vector</name> <name pos:start="225:22" pos:end="225:27">signed</name> <name pos:start="225:29" pos:end="225:33">short</name></type> <name pos:start="225:35" pos:end="225:40">temp61</name> <init pos:start="225:42" pos:end="225:65">= <expr pos:start="225:44" pos:end="225:65"><call pos:start="225:44" pos:end="225:65"><name pos:start="225:44" pos:end="225:50">vec_sub</name><argument_list pos:start="225:51" pos:end="225:65">(<argument pos:start="225:52" pos:end="225:59"><expr pos:start="225:52" pos:end="225:59"><name pos:start="225:52" pos:end="225:59">v_sumsB5</name></expr></argument>, <argument pos:start="225:62" pos:end="225:64"><expr pos:start="225:62" pos:end="225:64"><name pos:start="225:62" pos:end="225:64">vb2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="227:9" pos:end="227:69"><decl pos:start="227:9" pos:end="227:68"><type pos:start="227:9" pos:end="227:33"><specifier pos:start="227:9" pos:end="227:13">const</specifier> <name pos:start="227:15" pos:end="227:20">vector</name> <name pos:start="227:22" pos:end="227:27">signed</name> <name pos:start="227:29" pos:end="227:33">short</name></type> <name pos:start="227:35" pos:end="227:42">v_sumsB6</name> <init pos:start="227:44" pos:end="227:68">= <expr pos:start="227:46" pos:end="227:68"><call pos:start="227:46" pos:end="227:68"><name pos:start="227:46" pos:end="227:52">vec_add</name><argument_list pos:start="227:53" pos:end="227:68">(<argument pos:start="227:54" pos:end="227:59"><expr pos:start="227:54" pos:end="227:59"><name pos:start="227:54" pos:end="227:59">temp61</name></expr></argument>, <argument pos:start="227:62" pos:end="227:67"><expr pos:start="227:62" pos:end="227:67"><name pos:start="227:62" pos:end="227:67">v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="231:9" pos:end="231:66"><decl pos:start="231:9" pos:end="231:65"><type pos:start="231:9" pos:end="231:33"><specifier pos:start="231:9" pos:end="231:13">const</specifier> <name pos:start="231:15" pos:end="231:20">vector</name> <name pos:start="231:22" pos:end="231:27">signed</name> <name pos:start="231:29" pos:end="231:33">short</name></type> <name pos:start="231:35" pos:end="231:40">temp71</name> <init pos:start="231:42" pos:end="231:65">= <expr pos:start="231:44" pos:end="231:65"><call pos:start="231:44" pos:end="231:65"><name pos:start="231:44" pos:end="231:50">vec_sub</name><argument_list pos:start="231:51" pos:end="231:65">(<argument pos:start="231:52" pos:end="231:59"><expr pos:start="231:52" pos:end="231:59"><name pos:start="231:52" pos:end="231:59">v_sumsB6</name></expr></argument>, <argument pos:start="231:62" pos:end="231:64"><expr pos:start="231:62" pos:end="231:64"><name pos:start="231:62" pos:end="231:64">vb3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="233:9" pos:end="233:69"><decl pos:start="233:9" pos:end="233:68"><type pos:start="233:9" pos:end="233:33"><specifier pos:start="233:9" pos:end="233:13">const</specifier> <name pos:start="233:15" pos:end="233:20">vector</name> <name pos:start="233:22" pos:end="233:27">signed</name> <name pos:start="233:29" pos:end="233:33">short</name></type> <name pos:start="233:35" pos:end="233:42">v_sumsB7</name> <init pos:start="233:44" pos:end="233:68">= <expr pos:start="233:46" pos:end="233:68"><call pos:start="233:46" pos:end="233:68"><name pos:start="233:46" pos:end="233:52">vec_add</name><argument_list pos:start="233:53" pos:end="233:68">(<argument pos:start="233:54" pos:end="233:59"><expr pos:start="233:54" pos:end="233:59"><name pos:start="233:54" pos:end="233:59">temp71</name></expr></argument>, <argument pos:start="233:62" pos:end="233:67"><expr pos:start="233:62" pos:end="233:67"><name pos:start="233:62" pos:end="233:67">v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="237:9" pos:end="237:66"><decl pos:start="237:9" pos:end="237:65"><type pos:start="237:9" pos:end="237:33"><specifier pos:start="237:9" pos:end="237:13">const</specifier> <name pos:start="237:15" pos:end="237:20">vector</name> <name pos:start="237:22" pos:end="237:27">signed</name> <name pos:start="237:29" pos:end="237:33">short</name></type> <name pos:start="237:35" pos:end="237:40">temp81</name> <init pos:start="237:42" pos:end="237:65">= <expr pos:start="237:44" pos:end="237:65"><call pos:start="237:44" pos:end="237:65"><name pos:start="237:44" pos:end="237:50">vec_sub</name><argument_list pos:start="237:51" pos:end="237:65">(<argument pos:start="237:52" pos:end="237:59"><expr pos:start="237:52" pos:end="237:59"><name pos:start="237:52" pos:end="237:59">v_sumsB7</name></expr></argument>, <argument pos:start="237:62" pos:end="237:64"><expr pos:start="237:62" pos:end="237:64"><name pos:start="237:62" pos:end="237:64">vb4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="239:9" pos:end="239:69"><decl pos:start="239:9" pos:end="239:68"><type pos:start="239:9" pos:end="239:33"><specifier pos:start="239:9" pos:end="239:13">const</specifier> <name pos:start="239:15" pos:end="239:20">vector</name> <name pos:start="239:22" pos:end="239:27">signed</name> <name pos:start="239:29" pos:end="239:33">short</name></type> <name pos:start="239:35" pos:end="239:42">v_sumsB8</name> <init pos:start="239:44" pos:end="239:68">= <expr pos:start="239:46" pos:end="239:68"><call pos:start="239:46" pos:end="239:68"><name pos:start="239:46" pos:end="239:52">vec_add</name><argument_list pos:start="239:53" pos:end="239:68">(<argument pos:start="239:54" pos:end="239:59"><expr pos:start="239:54" pos:end="239:59"><name pos:start="239:54" pos:end="239:59">temp81</name></expr></argument>, <argument pos:start="239:62" pos:end="239:67"><expr pos:start="239:62" pos:end="239:67"><name pos:start="239:62" pos:end="239:67">v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="243:9" pos:end="243:66"><decl pos:start="243:9" pos:end="243:65"><type pos:start="243:9" pos:end="243:33"><specifier pos:start="243:9" pos:end="243:13">const</specifier> <name pos:start="243:15" pos:end="243:20">vector</name> <name pos:start="243:22" pos:end="243:27">signed</name> <name pos:start="243:29" pos:end="243:33">short</name></type> <name pos:start="243:35" pos:end="243:40">temp91</name> <init pos:start="243:42" pos:end="243:65">= <expr pos:start="243:44" pos:end="243:65"><call pos:start="243:44" pos:end="243:65"><name pos:start="243:44" pos:end="243:50">vec_sub</name><argument_list pos:start="243:51" pos:end="243:65">(<argument pos:start="243:52" pos:end="243:59"><expr pos:start="243:52" pos:end="243:59"><name pos:start="243:52" pos:end="243:59">v_sumsB8</name></expr></argument>, <argument pos:start="243:62" pos:end="243:64"><expr pos:start="243:62" pos:end="243:64"><name pos:start="243:62" pos:end="243:64">vb5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="245:9" pos:end="260:0"><decl pos:start="245:9" pos:end="245:68"><type pos:start="245:9" pos:end="245:33"><specifier pos:start="245:9" pos:end="245:13">const</specifier> <name pos:start="245:15" pos:end="245:20">vector</name> <name pos:start="245:22" pos:end="245:27">signed</name> <name pos:start="245:29" pos:end="245:33">short</name></type> <name pos:start="245:35" pos:end="245:42">v_sumsB9</name> <init pos:start="245:44" pos:end="245:68">= <expr pos:start="245:46" pos:end="245:68"><call pos:start="245:46" pos:end="245:68"><name pos:start="245:46" pos:end="245:52">vec_add</name><argument_list pos:start="245:53" pos:end="245:68">(<argument pos:start="245:54" pos:end="245:59"><expr pos:start="245:54" pos:end="245:59"><name pos:start="245:54" pos:end="245:59">temp91</name></expr></argument>, <argument pos:start="245:62" pos:end="245:67"><expr pos:start="245:62" pos:end="245:67"><name pos:start="245:62" pos:end="245:67">v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <cpp:define pos:start="249:5" pos:end="259:66">#<cpp:directive pos:start="249:6" pos:end="249:11">define</cpp:directive> <cpp:macro pos:start="249:13" pos:end="249:31"><name pos:start="249:13" pos:end="249:22">COMPUTE_VR</name><parameter_list pos:start="249:23" pos:end="249:31">(<parameter pos:start="249:24" pos:end="249:24"><type pos:start="249:24" pos:end="249:24"><name pos:start="249:24" pos:end="249:24">i</name></type></parameter>, <parameter pos:start="249:27" pos:end="249:27"><type pos:start="249:27" pos:end="249:27"><name pos:start="249:27" pos:end="249:27">j</name></type></parameter>, <parameter pos:start="249:30" pos:end="249:30"><type pos:start="249:30" pos:end="249:30"><name pos:start="249:30" pos:end="249:30">k</name></type></parameter>)</parameter_list></cpp:macro>                                             \

        <cpp:value pos:start="251:9" pos:end="259:66">const vector signed short temps1##i =                               \

            vec_add(v_sumsB##i, v_sumsB##k);                                \

        const vector signed short temps2##i =                               \

            vec_mladd(vb##j, (vector signed short)v_2, temps1##i);          \

        const vector signed short  vr##j = vec_sra(temps2##i, v_4)</cpp:value></cpp:define>



        <expr_stmt pos:start="263:9" pos:end="263:28"><expr pos:start="263:9" pos:end="263:27"><call pos:start="263:9" pos:end="263:27"><name pos:start="263:9" pos:end="263:18">COMPUTE_VR</name><argument_list pos:start="263:19" pos:end="263:27">(<argument pos:start="263:20" pos:end="263:20"><expr pos:start="263:20" pos:end="263:20"><literal type="number" pos:start="263:20" pos:end="263:20">0</literal></expr></argument>, <argument pos:start="263:23" pos:end="263:23"><expr pos:start="263:23" pos:end="263:23"><literal type="number" pos:start="263:23" pos:end="263:23">1</literal></expr></argument>, <argument pos:start="263:26" pos:end="263:26"><expr pos:start="263:26" pos:end="263:26"><literal type="number" pos:start="263:26" pos:end="263:26">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:28"><expr pos:start="265:9" pos:end="265:27"><call pos:start="265:9" pos:end="265:27"><name pos:start="265:9" pos:end="265:18">COMPUTE_VR</name><argument_list pos:start="265:19" pos:end="265:27">(<argument pos:start="265:20" pos:end="265:20"><expr pos:start="265:20" pos:end="265:20"><literal type="number" pos:start="265:20" pos:end="265:20">1</literal></expr></argument>, <argument pos:start="265:23" pos:end="265:23"><expr pos:start="265:23" pos:end="265:23"><literal type="number" pos:start="265:23" pos:end="265:23">2</literal></expr></argument>, <argument pos:start="265:26" pos:end="265:26"><expr pos:start="265:26" pos:end="265:26"><literal type="number" pos:start="265:26" pos:end="265:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:28"><expr pos:start="267:9" pos:end="267:27"><call pos:start="267:9" pos:end="267:27"><name pos:start="267:9" pos:end="267:18">COMPUTE_VR</name><argument_list pos:start="267:19" pos:end="267:27">(<argument pos:start="267:20" pos:end="267:20"><expr pos:start="267:20" pos:end="267:20"><literal type="number" pos:start="267:20" pos:end="267:20">2</literal></expr></argument>, <argument pos:start="267:23" pos:end="267:23"><expr pos:start="267:23" pos:end="267:23"><literal type="number" pos:start="267:23" pos:end="267:23">3</literal></expr></argument>, <argument pos:start="267:26" pos:end="267:26"><expr pos:start="267:26" pos:end="267:26"><literal type="number" pos:start="267:26" pos:end="267:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:28"><expr pos:start="269:9" pos:end="269:27"><call pos:start="269:9" pos:end="269:27"><name pos:start="269:9" pos:end="269:18">COMPUTE_VR</name><argument_list pos:start="269:19" pos:end="269:27">(<argument pos:start="269:20" pos:end="269:20"><expr pos:start="269:20" pos:end="269:20"><literal type="number" pos:start="269:20" pos:end="269:20">3</literal></expr></argument>, <argument pos:start="269:23" pos:end="269:23"><expr pos:start="269:23" pos:end="269:23"><literal type="number" pos:start="269:23" pos:end="269:23">4</literal></expr></argument>, <argument pos:start="269:26" pos:end="269:26"><expr pos:start="269:26" pos:end="269:26"><literal type="number" pos:start="269:26" pos:end="269:26">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:28"><expr pos:start="271:9" pos:end="271:27"><call pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:18">COMPUTE_VR</name><argument_list pos:start="271:19" pos:end="271:27">(<argument pos:start="271:20" pos:end="271:20"><expr pos:start="271:20" pos:end="271:20"><literal type="number" pos:start="271:20" pos:end="271:20">4</literal></expr></argument>, <argument pos:start="271:23" pos:end="271:23"><expr pos:start="271:23" pos:end="271:23"><literal type="number" pos:start="271:23" pos:end="271:23">5</literal></expr></argument>, <argument pos:start="271:26" pos:end="271:26"><expr pos:start="271:26" pos:end="271:26"><literal type="number" pos:start="271:26" pos:end="271:26">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:28"><expr pos:start="273:9" pos:end="273:27"><call pos:start="273:9" pos:end="273:27"><name pos:start="273:9" pos:end="273:18">COMPUTE_VR</name><argument_list pos:start="273:19" pos:end="273:27">(<argument pos:start="273:20" pos:end="273:20"><expr pos:start="273:20" pos:end="273:20"><literal type="number" pos:start="273:20" pos:end="273:20">5</literal></expr></argument>, <argument pos:start="273:23" pos:end="273:23"><expr pos:start="273:23" pos:end="273:23"><literal type="number" pos:start="273:23" pos:end="273:23">6</literal></expr></argument>, <argument pos:start="273:26" pos:end="273:26"><expr pos:start="273:26" pos:end="273:26"><literal type="number" pos:start="273:26" pos:end="273:26">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:28"><expr pos:start="275:9" pos:end="275:27"><call pos:start="275:9" pos:end="275:27"><name pos:start="275:9" pos:end="275:18">COMPUTE_VR</name><argument_list pos:start="275:19" pos:end="275:27">(<argument pos:start="275:20" pos:end="275:20"><expr pos:start="275:20" pos:end="275:20"><literal type="number" pos:start="275:20" pos:end="275:20">6</literal></expr></argument>, <argument pos:start="275:23" pos:end="275:23"><expr pos:start="275:23" pos:end="275:23"><literal type="number" pos:start="275:23" pos:end="275:23">7</literal></expr></argument>, <argument pos:start="275:26" pos:end="275:26"><expr pos:start="275:26" pos:end="275:26"><literal type="number" pos:start="275:26" pos:end="275:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:28"><expr pos:start="277:9" pos:end="277:27"><call pos:start="277:9" pos:end="277:27"><name pos:start="277:9" pos:end="277:18">COMPUTE_VR</name><argument_list pos:start="277:19" pos:end="277:27">(<argument pos:start="277:20" pos:end="277:20"><expr pos:start="277:20" pos:end="277:20"><literal type="number" pos:start="277:20" pos:end="277:20">7</literal></expr></argument>, <argument pos:start="277:23" pos:end="277:23"><expr pos:start="277:23" pos:end="277:23"><literal type="number" pos:start="277:23" pos:end="277:23">8</literal></expr></argument>, <argument pos:start="277:26" pos:end="277:26"><expr pos:start="277:26" pos:end="277:26"><literal type="number" pos:start="277:26" pos:end="277:26">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="281:9" pos:end="281:57"><decl pos:start="281:9" pos:end="281:56"><type pos:start="281:9" pos:end="281:32"><specifier pos:start="281:9" pos:end="281:13">const</specifier> <name pos:start="281:15" pos:end="281:20">vector</name> <name pos:start="281:22" pos:end="281:27">signed</name> <name pos:start="281:29" pos:end="281:32">char</name></type> <name pos:start="281:34" pos:end="281:37">neg1</name> <init pos:start="281:39" pos:end="281:56">= <expr pos:start="281:41" pos:end="281:56"><call pos:start="281:41" pos:end="281:56"><name pos:start="281:41" pos:end="281:52">vec_splat_s8</name><argument_list pos:start="281:53" pos:end="281:56">(<argument pos:start="281:54" pos:end="281:55"><expr pos:start="281:54" pos:end="281:55"><operator pos:start="281:54" pos:end="281:54">-</operator><literal type="number" pos:start="281:55" pos:end="281:55">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="283:9" pos:end="336:0"><decl pos:start="283:9" pos:end="285:120"><type pos:start="283:9" pos:end="283:34"><specifier pos:start="283:9" pos:end="283:13">const</specifier> <name pos:start="283:15" pos:end="283:20">vector</name> <name pos:start="283:22" pos:end="283:29">unsigned</name> <name pos:start="283:31" pos:end="283:34">char</name></type> <name pos:start="283:36" pos:end="283:41">permHH</name> <init pos:start="283:43" pos:end="285:120">= <expr pos:start="283:45" pos:end="285:120"><operator pos:start="283:45" pos:end="283:45">(</operator><specifier pos:start="283:46" pos:end="283:50">const</specifier> <name pos:start="283:52" pos:end="283:57">vector</name> <name pos:start="283:59" pos:end="283:66">unsigned</name> <name pos:start="283:68" pos:end="283:71">char</name><operator pos:start="283:72" pos:end="283:72">)</operator><block pos:start="283:73" pos:end="285:120">{<expr pos:start="283:74" pos:end="283:77"><literal type="number" pos:start="283:74" pos:end="283:77">0x00</literal></expr>, <expr pos:start="283:80" pos:end="283:83"><literal type="number" pos:start="283:80" pos:end="283:83">0x01</literal></expr>, <expr pos:start="283:86" pos:end="283:89"><literal type="number" pos:start="283:86" pos:end="283:89">0x02</literal></expr>, <expr pos:start="283:92" pos:end="283:95"><literal type="number" pos:start="283:92" pos:end="283:95">0x03</literal></expr>, <expr pos:start="283:98" pos:end="283:101"><literal type="number" pos:start="283:98" pos:end="283:101">0x04</literal></expr>, <expr pos:start="283:104" pos:end="283:107"><literal type="number" pos:start="283:104" pos:end="283:107">0x05</literal></expr>, <expr pos:start="283:110" pos:end="283:113"><literal type="number" pos:start="283:110" pos:end="283:113">0x06</literal></expr>, <expr pos:start="283:116" pos:end="283:119"><literal type="number" pos:start="283:116" pos:end="283:119">0x07</literal></expr>,

                                                                         <expr pos:start="285:74" pos:end="285:77"><literal type="number" pos:start="285:74" pos:end="285:77">0x18</literal></expr>, <expr pos:start="285:80" pos:end="285:83"><literal type="number" pos:start="285:80" pos:end="285:83">0x19</literal></expr>, <expr pos:start="285:86" pos:end="285:89"><literal type="number" pos:start="285:86" pos:end="285:89">0x1A</literal></expr>, <expr pos:start="285:92" pos:end="285:95"><literal type="number" pos:start="285:92" pos:end="285:95">0x1B</literal></expr>, <expr pos:start="285:98" pos:end="285:101"><literal type="number" pos:start="285:98" pos:end="285:101">0x1C</literal></expr>, <expr pos:start="285:104" pos:end="285:107"><literal type="number" pos:start="285:104" pos:end="285:107">0x1D</literal></expr>, <expr pos:start="285:110" pos:end="285:113"><literal type="number" pos:start="285:110" pos:end="285:113">0x1E</literal></expr>, <expr pos:start="285:116" pos:end="285:119"><literal type="number" pos:start="285:116" pos:end="285:119">0x1F</literal></expr>}</block></expr></init></decl>;</decl_stmt>



<cpp:define pos:start="289:1" pos:end="321:43">#<cpp:directive pos:start="289:2" pos:end="289:7">define</cpp:directive> <cpp:macro pos:start="289:9" pos:end="289:25"><name pos:start="289:9" pos:end="289:22">PACK_AND_STORE</name><parameter_list pos:start="289:23" pos:end="289:25">(<parameter pos:start="289:24" pos:end="289:24"><type pos:start="289:24" pos:end="289:24"><name pos:start="289:24" pos:end="289:24">i</name></type></parameter>)</parameter_list></cpp:macro>                                       \

<cpp:value pos:start="291:1" pos:end="321:43">{   const vector unsigned char perms##i =                       \

        vec_lvsr(i * stride, src2);                             \

    const vector unsigned char vf##i =                          \

        vec_packsu(vr##i, (vector signed short)zero);           \

    const vector unsigned char vg##i =                          \

        vec_perm(vf##i, vbT##i, permHH);                        \

    const vector unsigned char mask##i =                        \

        vec_perm((vector unsigned char)zero, (vector unsigned char)neg1, perms##i); \

    const vector unsigned char vg2##i =                         \

        vec_perm(vg##i, vg##i, perms##i);                       \

    const vector unsigned char svA##i =                         \

        vec_sel(vbA##i, vg2##i, mask##i);                       \

    const vector unsigned char svB##i =                         \

        vec_sel(vg2##i, vbB##i, mask##i);                       \

    vec_st(svA##i, i * stride, src2);                           \

    vec_st(svB##i, i * stride + 16, src2);}</cpp:value></cpp:define>



<cpp:define pos:start="325:1" pos:end="335:37">#<cpp:directive pos:start="325:2" pos:end="325:7">define</cpp:directive> <cpp:macro pos:start="325:9" pos:end="325:33"><name pos:start="325:9" pos:end="325:30">PACK_AND_STORE_ALIGNED</name><parameter_list pos:start="325:31" pos:end="325:33">(<parameter pos:start="325:32" pos:end="325:32"><type pos:start="325:32" pos:end="325:32"><name pos:start="325:32" pos:end="325:32">i</name></type></parameter>)</parameter_list></cpp:macro>                               \

<cpp:value pos:start="327:1" pos:end="335:37">{   const vector unsigned char vf##i =                          \

        vec_packsu(vr##i, (vector signed short)zero);           \

    const vector unsigned char vg##i =                          \

        vec_perm(vf##i, vbT##i, permHH);                        \

    vec_st(vg##i, i * stride, src2);}</cpp:value></cpp:define>



        <comment type="block" pos:start="339:9" pos:end="343:57">/* Special-casing the aligned case is worthwhile, as all calls from

         * the (transposed) horizontable deblocks will be aligned, in addition

         * to the naturally aligned vertical deblocks. */</comment>

        <if_stmt pos:start="345:9" pos:end="386:0"><if pos:start="345:9" pos:end="363:9">if <condition pos:start="345:12" pos:end="345:37">(<expr pos:start="345:13" pos:end="345:36"><name pos:start="345:13" pos:end="345:24">properStride</name> <operator pos:start="345:26" pos:end="345:27">&amp;&amp;</operator> <name pos:start="345:29" pos:end="345:36">srcAlign</name></expr>)</condition> <block pos:start="345:39" pos:end="363:9">{<block_content pos:start="347:13" pos:end="361:37">

            <macro pos:start="347:13" pos:end="347:37"><name pos:start="347:13" pos:end="347:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="347:35" pos:end="347:37">(<argument pos:start="347:36" pos:end="347:36"><literal type="number" pos:start="347:36" pos:end="347:36">1</literal></argument>)</argument_list></macro>

            <macro pos:start="349:13" pos:end="349:37"><name pos:start="349:13" pos:end="349:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="349:35" pos:end="349:37">(<argument pos:start="349:36" pos:end="349:36"><literal type="number" pos:start="349:36" pos:end="349:36">2</literal></argument>)</argument_list></macro>

            <macro pos:start="351:13" pos:end="351:37"><name pos:start="351:13" pos:end="351:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="351:35" pos:end="351:37">(<argument pos:start="351:36" pos:end="351:36"><literal type="number" pos:start="351:36" pos:end="351:36">3</literal></argument>)</argument_list></macro>

            <macro pos:start="353:13" pos:end="353:37"><name pos:start="353:13" pos:end="353:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="353:35" pos:end="353:37">(<argument pos:start="353:36" pos:end="353:36"><literal type="number" pos:start="353:36" pos:end="353:36">4</literal></argument>)</argument_list></macro>

            <macro pos:start="355:13" pos:end="355:37"><name pos:start="355:13" pos:end="355:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="355:35" pos:end="355:37">(<argument pos:start="355:36" pos:end="355:36"><literal type="number" pos:start="355:36" pos:end="355:36">5</literal></argument>)</argument_list></macro>

            <macro pos:start="357:13" pos:end="357:37"><name pos:start="357:13" pos:end="357:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="357:35" pos:end="357:37">(<argument pos:start="357:36" pos:end="357:36"><literal type="number" pos:start="357:36" pos:end="357:36">6</literal></argument>)</argument_list></macro>

            <macro pos:start="359:13" pos:end="359:37"><name pos:start="359:13" pos:end="359:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="359:35" pos:end="359:37">(<argument pos:start="359:36" pos:end="359:36"><literal type="number" pos:start="359:36" pos:end="359:36">7</literal></argument>)</argument_list></macro>

            <macro pos:start="361:13" pos:end="361:37"><name pos:start="361:13" pos:end="361:34">PACK_AND_STORE_ALIGNED</name><argument_list pos:start="361:35" pos:end="361:37">(<argument pos:start="361:36" pos:end="361:36"><literal type="number" pos:start="361:36" pos:end="361:36">8</literal></argument>)</argument_list></macro>

        </block_content>}</block></if> <else pos:start="363:11" pos:end="386:0">else <block pos:start="363:16" pos:end="386:0">{<block_content pos:start="365:13" pos:end="379:29">

            <macro pos:start="365:13" pos:end="365:29"><name pos:start="365:13" pos:end="365:26">PACK_AND_STORE</name><argument_list pos:start="365:27" pos:end="365:29">(<argument pos:start="365:28" pos:end="365:28"><literal type="number" pos:start="365:28" pos:end="365:28">1</literal></argument>)</argument_list></macro>

            <macro pos:start="367:13" pos:end="367:29"><name pos:start="367:13" pos:end="367:26">PACK_AND_STORE</name><argument_list pos:start="367:27" pos:end="367:29">(<argument pos:start="367:28" pos:end="367:28"><literal type="number" pos:start="367:28" pos:end="367:28">2</literal></argument>)</argument_list></macro>

            <macro pos:start="369:13" pos:end="369:29"><name pos:start="369:13" pos:end="369:26">PACK_AND_STORE</name><argument_list pos:start="369:27" pos:end="369:29">(<argument pos:start="369:28" pos:end="369:28"><literal type="number" pos:start="369:28" pos:end="369:28">3</literal></argument>)</argument_list></macro>

            <macro pos:start="371:13" pos:end="371:29"><name pos:start="371:13" pos:end="371:26">PACK_AND_STORE</name><argument_list pos:start="371:27" pos:end="371:29">(<argument pos:start="371:28" pos:end="371:28"><literal type="number" pos:start="371:28" pos:end="371:28">4</literal></argument>)</argument_list></macro>

            <macro pos:start="373:13" pos:end="373:29"><name pos:start="373:13" pos:end="373:26">PACK_AND_STORE</name><argument_list pos:start="373:27" pos:end="373:29">(<argument pos:start="373:28" pos:end="373:28"><literal type="number" pos:start="373:28" pos:end="373:28">5</literal></argument>)</argument_list></macro>

            <macro pos:start="375:13" pos:end="375:29"><name pos:start="375:13" pos:end="375:26">PACK_AND_STORE</name><argument_list pos:start="375:27" pos:end="375:29">(<argument pos:start="375:28" pos:end="375:28"><literal type="number" pos:start="375:28" pos:end="375:28">6</literal></argument>)</argument_list></macro>

            <macro pos:start="377:13" pos:end="377:29"><name pos:start="377:13" pos:end="377:26">PACK_AND_STORE</name><argument_list pos:start="377:27" pos:end="377:29">(<argument pos:start="377:28" pos:end="377:28"><literal type="number" pos:start="377:28" pos:end="377:28">7</literal></argument>)</argument_list></macro>

            <macro pos:start="379:13" pos:end="379:29"><name pos:start="379:13" pos:end="379:26">PACK_AND_STORE</name><argument_list pos:start="379:27" pos:end="379:29">(<argument pos:start="379:28" pos:end="379:28"><literal type="number" pos:start="379:28" pos:end="379:28">8</literal></argument>)</argument_list></macro>

        </block_content>}</block></else></if_stmt>

    <cpp:undef pos:start="383:5" pos:end="383:25">#<cpp:directive pos:start="383:6" pos:end="383:10">undef</cpp:directive> <name pos:start="383:12" pos:end="383:25">PACK_AND_STORE</name></cpp:undef>

    <cpp:undef pos:start="385:5" pos:end="385:33">#<cpp:directive pos:start="385:6" pos:end="385:10">undef</cpp:directive> <name pos:start="385:12" pos:end="385:33">PACK_AND_STORE_ALIGNED</name></cpp:undef>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
