<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25910.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">cloop_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="193:1">{<block_content pos:start="7:5" pos:end="191:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVCloopState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:60"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:25">offsets_size</name></decl>, <decl pos:start="9:28" pos:end="9:56"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:28" pos:end="9:52">max_compressed_block_size</name> <init pos:start="9:54" pos:end="9:56">= <expr pos:start="9:56" pos:end="9:56"><literal type="number" pos:start="9:56" pos:end="9:56">1</literal></expr></init></decl>, <decl pos:start="9:59" pos:end="9:59"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:59" pos:end="9:59">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:6">bs</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:17">read_only</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <literal type="number" pos:start="15:21" pos:end="15:21">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:21">/* read header */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:55"><expr pos:start="21:5" pos:end="21:54"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:54"><name pos:start="21:11" pos:end="21:20">bdrv_pread</name><argument_list pos:start="21:21" pos:end="21:54">(<argument pos:start="21:22" pos:end="21:29"><expr pos:start="21:22" pos:end="21:29"><name pos:start="21:22" pos:end="21:29"><name pos:start="21:22" pos:end="21:23">bs</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:29">file</name></name></expr></argument>, <argument pos:start="21:32" pos:end="21:34"><expr pos:start="21:32" pos:end="21:34"><literal type="number" pos:start="21:32" pos:end="21:34">128</literal></expr></argument>, <argument pos:start="21:37" pos:end="21:50"><expr pos:start="21:37" pos:end="21:50"><operator pos:start="21:37" pos:end="21:37">&amp;</operator><name pos:start="21:38" pos:end="21:50"><name pos:start="21:38" pos:end="21:38">s</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:50">block_size</name></name></expr></argument>, <argument pos:start="21:53" pos:end="21:53"><expr pos:start="21:53" pos:end="21:53"><literal type="number" pos:start="21:53" pos:end="21:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:19">

        <return pos:start="25:9" pos:end="25:19">return <expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:17">block_size</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <call pos:start="29:21" pos:end="29:46"><name pos:start="29:21" pos:end="29:31">be32_to_cpu</name><argument_list pos:start="29:32" pos:end="29:46">(<argument pos:start="29:33" pos:end="29:45"><expr pos:start="29:33" pos:end="29:45"><name pos:start="29:33" pos:end="29:45"><name pos:start="29:33" pos:end="29:33">s</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:45">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:28">(<expr pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:21">block_size</name></name> <operator pos:start="31:23" pos:end="31:23">%</operator> <literal type="number" pos:start="31:25" pos:end="31:27">512</literal></expr>)</condition> <block pos:start="31:30" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:23">

        <expr_stmt pos:start="33:9" pos:end="35:34"><expr pos:start="33:9" pos:end="35:33"><call pos:start="33:9" pos:end="35:33"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="35:33">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:66"><expr pos:start="33:26" pos:end="33:66"><literal type="string" pos:start="33:26" pos:end="33:66">"block_size %u must be a multiple of 512"</literal></expr></argument>,

                   <argument pos:start="35:20" pos:end="35:32"><expr pos:start="35:20" pos:end="35:32"><name pos:start="35:20" pos:end="35:32"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:32">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:23">return <expr pos:start="37:16" pos:end="37:22"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:27">(<expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:21">block_size</name></name> <operator pos:start="41:23" pos:end="41:24">==</operator> <literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr>)</condition> <block pos:start="41:29" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:23">

        <expr_stmt pos:start="43:9" pos:end="43:54"><expr pos:start="43:9" pos:end="43:53"><call pos:start="43:9" pos:end="43:53"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:53">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:52"><expr pos:start="43:26" pos:end="43:52"><literal type="string" pos:start="43:26" pos:end="43:52">"block_size cannot be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:23">return <expr pos:start="45:16" pos:end="45:22"><operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="57:7">/* cloop's create_compressed_fs.c warns about block sizes beyond 256 KB but

     * we can accept more.  Prevent ridiculous values like 4 GB - 1 since we

     * need a buffer this big.

     */</comment>

    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:39">(<expr pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:21">block_size</name></name> <operator pos:start="59:23" pos:end="59:23">&gt;</operator> <name pos:start="59:25" pos:end="59:38">MAX_BLOCK_SIZE</name></expr>)</condition> <block pos:start="59:41" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:23">

        <expr_stmt pos:start="61:9" pos:end="65:51"><expr pos:start="61:9" pos:end="65:50"><call pos:start="61:9" pos:end="65:50"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="65:50">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:62"><expr pos:start="61:26" pos:end="61:62"><literal type="string" pos:start="61:26" pos:end="61:62">"block_size %u must be %u MB or less"</literal></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:32"><expr pos:start="63:20" pos:end="63:32"><name pos:start="63:20" pos:end="63:32"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:32">block_size</name></name></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:49"><expr pos:start="65:20" pos:end="65:49"><name pos:start="65:20" pos:end="65:33">MAX_BLOCK_SIZE</name> <operator pos:start="65:35" pos:end="65:35">/</operator> <operator pos:start="65:37" pos:end="65:37">(</operator><literal type="number" pos:start="65:38" pos:end="65:41">1024</literal> <operator pos:start="65:43" pos:end="65:43">*</operator> <literal type="number" pos:start="65:45" pos:end="65:48">1024</literal><operator pos:start="65:49" pos:end="65:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:23">return <expr pos:start="67:16" pos:end="67:22"><operator pos:start="67:16" pos:end="67:16">-</operator><name pos:start="67:17" pos:end="67:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:57"><expr pos:start="73:5" pos:end="73:56"><name pos:start="73:5" pos:end="73:7">ret</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:56"><name pos:start="73:11" pos:end="73:20">bdrv_pread</name><argument_list pos:start="73:21" pos:end="73:56">(<argument pos:start="73:22" pos:end="73:29"><expr pos:start="73:22" pos:end="73:29"><name pos:start="73:22" pos:end="73:29"><name pos:start="73:22" pos:end="73:23">bs</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:29">file</name></name></expr></argument>, <argument pos:start="73:32" pos:end="73:38"><expr pos:start="73:32" pos:end="73:38"><literal type="number" pos:start="73:32" pos:end="73:36">128</literal> <operator pos:start="73:36" pos:end="73:36">+</operator> <literal type="number" pos:start="73:38" pos:end="73:38">4</literal></expr></argument>, <argument pos:start="73:41" pos:end="73:52"><expr pos:start="73:41" pos:end="73:52"><operator pos:start="73:41" pos:end="73:41">&amp;</operator><name pos:start="73:42" pos:end="73:52"><name pos:start="73:42" pos:end="73:42">s</name><operator pos:start="73:43" pos:end="73:44">-&gt;</operator><name pos:start="73:45" pos:end="73:52">n_blocks</name></name></expr></argument>, <argument pos:start="73:55" pos:end="73:55"><expr pos:start="73:55" pos:end="73:55"><literal type="number" pos:start="73:55" pos:end="73:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>)</condition> <block pos:start="75:18" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:19">

        <return pos:start="77:9" pos:end="77:19">return <expr pos:start="77:16" pos:end="77:18"><name pos:start="77:16" pos:end="77:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:43"><expr pos:start="81:5" pos:end="81:42"><name pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:15">n_blocks</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:42"><name pos:start="81:19" pos:end="81:29">be32_to_cpu</name><argument_list pos:start="81:30" pos:end="81:42">(<argument pos:start="81:31" pos:end="81:41"><expr pos:start="81:31" pos:end="81:41"><name pos:start="81:31" pos:end="81:41"><name pos:start="81:31" pos:end="81:31">s</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:41">n_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:22">/* read offsets */</comment>

    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="99:5">if <condition pos:start="87:8" pos:end="87:52">(<expr pos:start="87:9" pos:end="87:51"><name pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:19">n_blocks</name></name> <operator pos:start="87:21" pos:end="87:21">&gt;</operator> <name pos:start="87:23" pos:end="87:32">UINT32_MAX</name> <operator pos:start="87:34" pos:end="87:34">/</operator> <sizeof pos:start="87:36" pos:end="87:51">sizeof<argument_list pos:start="87:42" pos:end="87:51">(<argument pos:start="87:43" pos:end="87:50"><expr pos:start="87:43" pos:end="87:50"><name pos:start="87:43" pos:end="87:50">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="87:54" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:23">

        <comment type="block" pos:start="89:9" pos:end="89:38">/* Prevent integer overflow */</comment>

        <expr_stmt pos:start="91:9" pos:end="95:50"><expr pos:start="91:9" pos:end="95:49"><call pos:start="91:9" pos:end="95:49"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="95:49">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>, <argument pos:start="91:26" pos:end="91:58"><expr pos:start="91:26" pos:end="91:58"><literal type="string" pos:start="91:26" pos:end="91:58">"n_blocks %u must be %zu or less"</literal></expr></argument>,

                   <argument pos:start="93:20" pos:end="93:30"><expr pos:start="93:20" pos:end="93:30"><name pos:start="93:20" pos:end="93:30"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:30">n_blocks</name></name></expr></argument>,

                   <argument pos:start="95:20" pos:end="95:48"><expr pos:start="95:20" pos:end="95:48"><name pos:start="95:20" pos:end="95:29">UINT32_MAX</name> <operator pos:start="95:31" pos:end="95:31">/</operator> <sizeof pos:start="95:33" pos:end="95:48">sizeof<argument_list pos:start="95:39" pos:end="95:48">(<argument pos:start="95:40" pos:end="95:47"><expr pos:start="95:40" pos:end="95:47"><name pos:start="95:40" pos:end="95:47">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:23">return <expr pos:start="97:16" pos:end="97:22"><operator pos:start="97:16" pos:end="97:16">-</operator><name pos:start="97:17" pos:end="97:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:50"><expr pos:start="101:5" pos:end="101:49"><name pos:start="101:5" pos:end="101:16">offsets_size</name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:30"><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:30">n_blocks</name></name> <operator pos:start="101:32" pos:end="101:32">*</operator> <sizeof pos:start="101:34" pos:end="101:49">sizeof<argument_list pos:start="101:40" pos:end="101:49">(<argument pos:start="101:41" pos:end="101:48"><expr pos:start="101:41" pos:end="101:48"><name pos:start="101:41" pos:end="101:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="119:5"><if pos:start="103:5" pos:end="119:5">if <condition pos:start="103:8" pos:end="103:41">(<expr pos:start="103:9" pos:end="103:40"><name pos:start="103:9" pos:end="103:20">offsets_size</name> <operator pos:start="103:22" pos:end="103:22">&gt;</operator> <literal type="number" pos:start="103:24" pos:end="103:26">512</literal> <operator pos:start="103:28" pos:end="103:28">*</operator> <literal type="number" pos:start="103:30" pos:end="103:33">1024</literal> <operator pos:start="103:35" pos:end="103:35">*</operator> <literal type="number" pos:start="103:37" pos:end="103:40">1024</literal></expr>)</condition> <block pos:start="103:43" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:23">

        <comment type="block" pos:start="105:9" pos:end="111:11">/* Prevent ridiculous offsets_size which causes memory allocation to

         * fail or overflows bdrv_pread() size.  In practice the 512 MB

         * offsets[] limit supports 16 TB images at 256 KB block size.

         */</comment>

        <expr_stmt pos:start="113:9" pos:end="115:48"><expr pos:start="113:9" pos:end="115:47"><call pos:start="113:9" pos:end="115:47"><name pos:start="113:9" pos:end="113:18">error_setg</name><argument_list pos:start="113:19" pos:end="115:47">(<argument pos:start="113:20" pos:end="113:23"><expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">errp</name></expr></argument>, <argument pos:start="113:26" pos:end="115:46"><expr pos:start="113:26" pos:end="115:46"><literal type="string" pos:start="113:26" pos:end="113:60">"image requires too many offsets, "</literal>

                   <literal type="string" pos:start="115:20" pos:end="115:46">"try increasing block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:23">return <expr pos:start="117:16" pos:end="117:22"><operator pos:start="117:16" pos:end="117:16">-</operator><name pos:start="117:17" pos:end="117:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:40"><expr pos:start="121:5" pos:end="121:39"><name pos:start="121:5" pos:end="121:14"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:14">offsets</name></name> <operator pos:start="121:16" pos:end="121:16">=</operator> <call pos:start="121:18" pos:end="121:39"><name pos:start="121:18" pos:end="121:25">g_malloc</name><argument_list pos:start="121:26" pos:end="121:39">(<argument pos:start="121:27" pos:end="121:38"><expr pos:start="121:27" pos:end="121:38"><name pos:start="121:27" pos:end="121:38">offsets_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:70"><expr pos:start="125:5" pos:end="125:69"><name pos:start="125:5" pos:end="125:7">ret</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:69"><name pos:start="125:11" pos:end="125:20">bdrv_pread</name><argument_list pos:start="125:21" pos:end="125:69">(<argument pos:start="125:22" pos:end="125:29"><expr pos:start="125:22" pos:end="125:29"><name pos:start="125:22" pos:end="125:29"><name pos:start="125:22" pos:end="125:23">bs</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:29">file</name></name></expr></argument>, <argument pos:start="125:32" pos:end="125:42"><expr pos:start="125:32" pos:end="125:42"><literal type="number" pos:start="125:32" pos:end="125:36">128</literal> <operator pos:start="125:36" pos:end="125:36">+</operator> <literal type="number" pos:start="125:38" pos:end="125:40">4</literal> <operator pos:start="125:40" pos:end="125:40">+</operator> <literal type="number" pos:start="125:42" pos:end="125:42">4</literal></expr></argument>, <argument pos:start="125:45" pos:end="125:54"><expr pos:start="125:45" pos:end="125:54"><name pos:start="125:45" pos:end="125:54"><name pos:start="125:45" pos:end="125:45">s</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:54">offsets</name></name></expr></argument>, <argument pos:start="125:57" pos:end="125:68"><expr pos:start="125:57" pos:end="125:68"><name pos:start="125:57" pos:end="125:68">offsets_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="131:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:16">(<expr pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">&lt;</operator> <literal type="number" pos:start="127:15" pos:end="127:15">0</literal></expr>)</condition> <block pos:start="127:18" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:18">

        <goto pos:start="129:9" pos:end="129:18">goto <name pos:start="129:14" pos:end="129:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="135:5" pos:end="151:5">for<control pos:start="135:8" pos:end="135:30">(<init pos:start="135:9" pos:end="135:12"><expr pos:start="135:9" pos:end="135:11"><name pos:start="135:9" pos:end="135:9">i</name><operator pos:start="135:10" pos:end="135:10">=</operator><literal type="number" pos:start="135:11" pos:end="135:11">0</literal></expr>;</init><condition pos:start="135:13" pos:end="135:26"><expr pos:start="135:13" pos:end="135:25"><name pos:start="135:13" pos:end="135:13">i</name><operator pos:start="135:14" pos:end="135:14">&lt;</operator><name pos:start="135:15" pos:end="135:25"><name pos:start="135:15" pos:end="135:15">s</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:25">n_blocks</name></name></expr>;</condition><incr pos:start="135:27" pos:end="135:29"><expr pos:start="135:27" pos:end="135:29"><name pos:start="135:27" pos:end="135:27">i</name><operator pos:start="135:28" pos:end="135:29">++</operator></expr></incr>)</control> <block pos:start="135:32" pos:end="151:5">{<block_content pos:start="137:9" pos:end="149:9">

        <expr_stmt pos:start="137:9" pos:end="137:51"><expr pos:start="137:9" pos:end="137:50"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">offsets</name><index pos:start="137:19" pos:end="137:21">[<expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">i</name></expr>]</index></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <call pos:start="137:25" pos:end="137:50"><name pos:start="137:25" pos:end="137:35">be64_to_cpu</name><argument_list pos:start="137:36" pos:end="137:50">(<argument pos:start="137:37" pos:end="137:49"><expr pos:start="137:37" pos:end="137:49"><name pos:start="137:37" pos:end="137:49"><name pos:start="137:37" pos:end="137:37">s</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:46">offsets</name><index pos:start="137:47" pos:end="137:49">[<expr pos:start="137:48" pos:end="137:48"><name pos:start="137:48" pos:end="137:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="149:9"><if pos:start="139:9" pos:end="149:9">if <condition pos:start="139:12" pos:end="139:18">(<expr pos:start="139:13" pos:end="139:17"><name pos:start="139:13" pos:end="139:13">i</name> <operator pos:start="139:15" pos:end="139:15">&gt;</operator> <literal type="number" pos:start="139:17" pos:end="139:17">0</literal></expr>)</condition> <block pos:start="139:20" pos:end="149:9">{<block_content pos:start="141:13" pos:end="147:13">

            <decl_stmt pos:start="141:13" pos:end="141:62"><decl pos:start="141:13" pos:end="141:61"><type pos:start="141:13" pos:end="141:20"><name pos:start="141:13" pos:end="141:20">uint32_t</name></type> <name pos:start="141:22" pos:end="141:25">size</name> <init pos:start="141:27" pos:end="141:61">= <expr pos:start="141:29" pos:end="141:61"><name pos:start="141:29" pos:end="141:41"><name pos:start="141:29" pos:end="141:29">s</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:38">offsets</name><index pos:start="141:39" pos:end="141:41">[<expr pos:start="141:40" pos:end="141:40"><name pos:start="141:40" pos:end="141:40">i</name></expr>]</index></name> <operator pos:start="141:43" pos:end="141:43">-</operator> <name pos:start="141:45" pos:end="141:61"><name pos:start="141:45" pos:end="141:45">s</name><operator pos:start="141:46" pos:end="141:47">-&gt;</operator><name pos:start="141:48" pos:end="141:54">offsets</name><index pos:start="141:55" pos:end="141:61">[<expr pos:start="141:56" pos:end="141:60"><name pos:start="141:56" pos:end="141:56">i</name> <operator pos:start="141:58" pos:end="141:58">-</operator> <literal type="number" pos:start="141:60" pos:end="141:60">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="143:13" pos:end="147:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:49">(<expr pos:start="143:17" pos:end="143:48"><name pos:start="143:17" pos:end="143:20">size</name> <operator pos:start="143:22" pos:end="143:22">&gt;</operator> <name pos:start="143:24" pos:end="143:48">max_compressed_block_size</name></expr>)</condition> <block pos:start="143:51" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:49">

                <expr_stmt pos:start="145:17" pos:end="145:49"><expr pos:start="145:17" pos:end="145:48"><name pos:start="145:17" pos:end="145:41">max_compressed_block_size</name> <operator pos:start="145:43" pos:end="145:43">=</operator> <name pos:start="145:45" pos:end="145:48">size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="155:5" pos:end="155:32">/* initialize zlib engine */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:66"><expr pos:start="157:5" pos:end="157:65"><name pos:start="157:5" pos:end="157:23"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:23">compressed_block</name></name> <operator pos:start="157:25" pos:end="157:25">=</operator> <call pos:start="157:27" pos:end="157:65"><name pos:start="157:27" pos:end="157:34">g_malloc</name><argument_list pos:start="157:35" pos:end="157:65">(<argument pos:start="157:36" pos:end="157:64"><expr pos:start="157:36" pos:end="157:64"><name pos:start="157:36" pos:end="157:60">max_compressed_block_size</name> <operator pos:start="157:62" pos:end="157:62">+</operator> <literal type="number" pos:start="157:64" pos:end="157:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:52"><expr pos:start="159:5" pos:end="159:51"><name pos:start="159:5" pos:end="159:25"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:25">uncompressed_block</name></name> <operator pos:start="159:27" pos:end="159:27">=</operator> <call pos:start="159:29" pos:end="159:51"><name pos:start="159:29" pos:end="159:36">g_malloc</name><argument_list pos:start="159:37" pos:end="159:51">(<argument pos:start="159:38" pos:end="159:50"><expr pos:start="159:38" pos:end="159:50"><name pos:start="159:38" pos:end="159:50"><name pos:start="159:38" pos:end="159:38">s</name><operator pos:start="159:39" pos:end="159:40">-&gt;</operator><name pos:start="159:41" pos:end="159:50">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:41">(<expr pos:start="161:9" pos:end="161:40"><call pos:start="161:9" pos:end="161:32"><name pos:start="161:9" pos:end="161:19">inflateInit</name><argument_list pos:start="161:20" pos:end="161:32">(<argument pos:start="161:21" pos:end="161:31"><expr pos:start="161:21" pos:end="161:31"><operator pos:start="161:21" pos:end="161:21">&amp;</operator><name pos:start="161:22" pos:end="161:31"><name pos:start="161:22" pos:end="161:22">s</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:31">zstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:34" pos:end="161:35">!=</operator> <name pos:start="161:37" pos:end="161:40">Z_OK</name></expr>)</condition> <block pos:start="161:43" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:18">

        <expr_stmt pos:start="163:9" pos:end="163:22"><expr pos:start="163:9" pos:end="163:21"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <operator pos:start="163:15" pos:end="163:15">-</operator><name pos:start="163:16" pos:end="163:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="165:9" pos:end="165:18">goto <name pos:start="165:14" pos:end="165:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:35"><expr pos:start="169:5" pos:end="169:34"><name pos:start="169:5" pos:end="169:20"><name pos:start="169:5" pos:end="169:5">s</name><operator pos:start="169:6" pos:end="169:7">-&gt;</operator><name pos:start="169:8" pos:end="169:20">current_block</name></name> <operator pos:start="169:22" pos:end="169:22">=</operator> <name pos:start="169:24" pos:end="169:34"><name pos:start="169:24" pos:end="169:24">s</name><operator pos:start="169:25" pos:end="169:26">-&gt;</operator><name pos:start="169:27" pos:end="169:34">n_blocks</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:45"><expr pos:start="173:5" pos:end="173:44"><name pos:start="173:5" pos:end="173:24"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:24">sectors_per_block</name></name> <operator pos:start="173:26" pos:end="173:26">=</operator> <name pos:start="173:28" pos:end="173:40"><name pos:start="173:28" pos:end="173:28">s</name><operator pos:start="173:29" pos:end="173:30">-&gt;</operator><name pos:start="173:31" pos:end="173:40">block_size</name></name><operator pos:start="173:41" pos:end="173:41">/</operator><literal type="number" pos:start="173:42" pos:end="173:44">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:59"><expr pos:start="175:5" pos:end="175:58"><name pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:6">bs</name><operator pos:start="175:7" pos:end="175:8">-&gt;</operator><name pos:start="175:9" pos:end="175:21">total_sectors</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <name pos:start="175:25" pos:end="175:35"><name pos:start="175:25" pos:end="175:25">s</name><operator pos:start="175:26" pos:end="175:27">-&gt;</operator><name pos:start="175:28" pos:end="175:35">n_blocks</name></name> <operator pos:start="175:37" pos:end="175:37">*</operator> <name pos:start="175:39" pos:end="175:58"><name pos:start="175:39" pos:end="175:39">s</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:58">sectors_per_block</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:33"><expr pos:start="177:5" pos:end="177:32"><call pos:start="177:5" pos:end="177:32"><name pos:start="177:5" pos:end="177:22">qemu_co_mutex_init</name><argument_list pos:start="177:23" pos:end="177:32">(<argument pos:start="177:24" pos:end="177:31"><expr pos:start="177:24" pos:end="177:31"><operator pos:start="177:24" pos:end="177:24">&amp;</operator><name pos:start="177:25" pos:end="177:31"><name pos:start="177:25" pos:end="177:25">s</name><operator pos:start="177:26" pos:end="177:27">-&gt;</operator><name pos:start="177:28" pos:end="177:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="179:5" pos:end="179:13">return <expr pos:start="179:12" pos:end="179:12"><literal type="number" pos:start="179:12" pos:end="179:12">0</literal></expr>;</return>



<label pos:start="183:1" pos:end="183:5"><name pos:start="183:1" pos:end="183:4">fail</name>:</label>

    <expr_stmt pos:start="185:5" pos:end="185:23"><expr pos:start="185:5" pos:end="185:22"><call pos:start="185:5" pos:end="185:22"><name pos:start="185:5" pos:end="185:10">g_free</name><argument_list pos:start="185:11" pos:end="185:22">(<argument pos:start="185:12" pos:end="185:21"><expr pos:start="185:12" pos:end="185:21"><name pos:start="185:12" pos:end="185:21"><name pos:start="185:12" pos:end="185:12">s</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:21">offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:32"><expr pos:start="187:5" pos:end="187:31"><call pos:start="187:5" pos:end="187:31"><name pos:start="187:5" pos:end="187:10">g_free</name><argument_list pos:start="187:11" pos:end="187:31">(<argument pos:start="187:12" pos:end="187:30"><expr pos:start="187:12" pos:end="187:30"><name pos:start="187:12" pos:end="187:30"><name pos:start="187:12" pos:end="187:12">s</name><operator pos:start="187:13" pos:end="187:14">-&gt;</operator><name pos:start="187:15" pos:end="187:30">compressed_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:34"><expr pos:start="189:5" pos:end="189:33"><call pos:start="189:5" pos:end="189:33"><name pos:start="189:5" pos:end="189:10">g_free</name><argument_list pos:start="189:11" pos:end="189:33">(<argument pos:start="189:12" pos:end="189:32"><expr pos:start="189:12" pos:end="189:32"><name pos:start="189:12" pos:end="189:32"><name pos:start="189:12" pos:end="189:12">s</name><operator pos:start="189:13" pos:end="189:14">-&gt;</operator><name pos:start="189:15" pos:end="189:32">uncompressed_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="191:5" pos:end="191:15">return <expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
