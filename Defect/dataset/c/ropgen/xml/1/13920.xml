<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13920.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">lag_decode_arith_plane</name><parameter_list pos:start="1:34" pos:end="5:67">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:49">LagarithContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">l</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">dst</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:43"><decl pos:start="3:35" pos:end="3:43"><type pos:start="3:35" pos:end="3:43"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:43">width</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:55"><decl pos:start="3:46" pos:end="3:55"><type pos:start="3:46" pos:end="3:55"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:55">height</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:67"><decl pos:start="3:58" pos:end="3:67"><type pos:start="3:58" pos:end="3:67"><name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:67">stride</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:52"><decl pos:start="5:35" pos:end="5:52"><type pos:start="5:35" pos:end="5:52"><specifier pos:start="5:35" pos:end="5:39">const</specifier> <name pos:start="5:41" pos:end="5:47">uint8_t</name> <modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:52">src</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:66"><decl pos:start="5:55" pos:end="5:66"><type pos:start="5:55" pos:end="5:66"><name pos:start="5:55" pos:end="5:57">int</name></type> <name pos:start="5:59" pos:end="5:66">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="143:1">{<block_content pos:start="9:5" pos:end="141:13">

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name> <init pos:start="9:11" pos:end="9:13">= <expr pos:start="9:13" pos:end="9:13"><literal type="number" pos:start="9:13" pos:end="9:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">read</name> <init pos:start="11:14" pos:end="11:16">= <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">offset</name> <init pos:start="15:21" pos:end="15:23">= <expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">esc_count</name> <init pos:start="17:19" pos:end="17:26">= <expr pos:start="17:21" pos:end="17:26"><name pos:start="17:21" pos:end="17:26"><name pos:start="17:21" pos:end="17:23">src</name><index pos:start="17:24" pos:end="17:26">[<expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17">GetBitContext</name></type> <name pos:start="19:19" pos:end="19:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">lag_rac</name></type> <name pos:start="21:13" pos:end="21:15">rac</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:7">rac</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:13">avctx</name></name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:24"><name pos:start="25:17" pos:end="25:17">l</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:24">avctx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:5">l</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:12">zeros</name></name> <operator pos:start="27:14" pos:end="27:14">=</operator> <literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="127:5"><if pos:start="31:5" pos:end="75:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:17">esc_count</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <literal type="number" pos:start="31:21" pos:end="31:21">4</literal></expr>)</condition> <block pos:start="31:24" pos:end="75:5">{<block_content pos:start="33:9" pos:end="73:27">

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:14">length</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:22">width</name> <operator pos:start="33:24" pos:end="33:24">*</operator> <name pos:start="33:26" pos:end="33:31">height</name></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:51">(<expr pos:start="35:13" pos:end="35:50"><name pos:start="35:13" pos:end="35:21">esc_count</name> <operator pos:start="35:23" pos:end="35:24">&amp;&amp;</operator> <call pos:start="35:26" pos:end="35:41"><name pos:start="35:26" pos:end="35:32">AV_RL32</name><argument_list pos:start="35:33" pos:end="35:41">(<argument pos:start="35:34" pos:end="35:40"><expr pos:start="35:34" pos:end="35:40"><name pos:start="35:34" pos:end="35:36">src</name> <operator pos:start="35:38" pos:end="35:38">+</operator> <literal type="number" pos:start="35:40" pos:end="35:40">1</literal></expr></argument>)</argument_list></call> <operator pos:start="35:43" pos:end="35:43">&lt;</operator> <name pos:start="35:45" pos:end="35:50">length</name></expr>)</condition> <block pos:start="35:53" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:24">

            <expr_stmt pos:start="37:13" pos:end="37:38"><expr pos:start="37:13" pos:end="37:37"><name pos:start="37:13" pos:end="37:18">length</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <call pos:start="37:22" pos:end="37:37"><name pos:start="37:22" pos:end="37:28">AV_RL32</name><argument_list pos:start="37:29" pos:end="37:37">(<argument pos:start="37:30" pos:end="37:36"><expr pos:start="37:30" pos:end="37:36"><name pos:start="37:30" pos:end="37:32">src</name> <operator pos:start="37:34" pos:end="37:34">+</operator> <literal type="number" pos:start="37:36" pos:end="37:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:24"><expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:18">offset</name> <operator pos:start="39:20" pos:end="39:21">+=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:55"><expr pos:start="45:9" pos:end="45:54"><call pos:start="45:9" pos:end="45:54"><name pos:start="45:9" pos:end="45:21">init_get_bits</name><argument_list pos:start="45:22" pos:end="45:54">(<argument pos:start="45:23" pos:end="45:25"><expr pos:start="45:23" pos:end="45:25"><operator pos:start="45:23" pos:end="45:23">&amp;</operator><name pos:start="45:24" pos:end="45:25">gb</name></expr></argument>, <argument pos:start="45:28" pos:end="45:39"><expr pos:start="45:28" pos:end="45:39"><name pos:start="45:28" pos:end="45:30">src</name> <operator pos:start="45:32" pos:end="45:32">+</operator> <name pos:start="45:34" pos:end="45:39">offset</name></expr></argument>, <argument pos:start="45:42" pos:end="45:53"><expr pos:start="45:42" pos:end="45:53"><name pos:start="45:42" pos:end="45:49">src_size</name> <operator pos:start="45:51" pos:end="45:51">*</operator> <literal type="number" pos:start="45:53" pos:end="45:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="51:22"><if pos:start="49:9" pos:end="51:22">if <condition pos:start="49:12" pos:end="49:48">(<expr pos:start="49:13" pos:end="49:47"><call pos:start="49:13" pos:end="49:43"><name pos:start="49:13" pos:end="49:32">lag_read_prob_header</name><argument_list pos:start="49:33" pos:end="49:43">(<argument pos:start="49:34" pos:end="49:37"><expr pos:start="49:34" pos:end="49:37"><operator pos:start="49:34" pos:end="49:34">&amp;</operator><name pos:start="49:35" pos:end="49:37">rac</name></expr></argument>, <argument pos:start="49:40" pos:end="49:42"><expr pos:start="49:40" pos:end="49:42"><operator pos:start="49:40" pos:end="49:40">&amp;</operator><name pos:start="49:41" pos:end="49:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="49:45" pos:end="49:45">&lt;</operator> <literal type="number" pos:start="49:47" pos:end="49:47">0</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:22"><block_content pos:start="51:13" pos:end="51:22">

            <return pos:start="51:13" pos:end="51:22">return <expr pos:start="51:20" pos:end="51:21"><operator pos:start="51:20" pos:end="51:20">-</operator><literal type="number" pos:start="51:21" pos:end="51:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:52"><expr pos:start="55:9" pos:end="55:51"><call pos:start="55:9" pos:end="55:51"><name pos:start="55:9" pos:end="55:23">ff_lag_rac_init</name><argument_list pos:start="55:24" pos:end="55:51">(<argument pos:start="55:25" pos:end="55:28"><expr pos:start="55:25" pos:end="55:28"><operator pos:start="55:25" pos:end="55:25">&amp;</operator><name pos:start="55:26" pos:end="55:28">rac</name></expr></argument>, <argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:33">gb</name></expr></argument>, <argument pos:start="55:36" pos:end="55:50"><expr pos:start="55:36" pos:end="55:50"><name pos:start="55:36" pos:end="55:41">length</name> <operator pos:start="55:43" pos:end="55:43">-</operator> <name pos:start="55:45" pos:end="55:50">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="59:9" pos:end="63:55">for <control pos:start="59:13" pos:end="59:36">(<init pos:start="59:14" pos:end="59:19"><expr pos:start="59:14" pos:end="59:18"><name pos:start="59:14" pos:end="59:14">i</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>;</init> <condition pos:start="59:21" pos:end="59:31"><expr pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:21">i</name> <operator pos:start="59:23" pos:end="59:23">&lt;</operator> <name pos:start="59:25" pos:end="59:30">height</name></expr>;</condition> <incr pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:33">i</name><operator pos:start="59:34" pos:end="59:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="61:13" pos:end="63:55"><block_content pos:start="61:13" pos:end="63:55">

            <expr_stmt pos:start="61:13" pos:end="63:55"><expr pos:start="61:13" pos:end="63:54"><name pos:start="61:13" pos:end="61:16">read</name> <operator pos:start="61:18" pos:end="61:19">+=</operator> <call pos:start="61:21" pos:end="63:54"><name pos:start="61:21" pos:end="61:35">lag_decode_line</name><argument_list pos:start="61:36" pos:end="63:54">(<argument pos:start="61:37" pos:end="61:37"><expr pos:start="61:37" pos:end="61:37"><name pos:start="61:37" pos:end="61:37">l</name></expr></argument>, <argument pos:start="61:40" pos:end="61:43"><expr pos:start="61:40" pos:end="61:43"><operator pos:start="61:40" pos:end="61:40">&amp;</operator><name pos:start="61:41" pos:end="61:43">rac</name></expr></argument>, <argument pos:start="61:46" pos:end="61:63"><expr pos:start="61:46" pos:end="61:63"><name pos:start="61:46" pos:end="61:48">dst</name> <operator pos:start="61:50" pos:end="61:50">+</operator> <operator pos:start="61:52" pos:end="61:52">(</operator><name pos:start="61:53" pos:end="61:53">i</name> <operator pos:start="61:55" pos:end="61:55">*</operator> <name pos:start="61:57" pos:end="61:62">stride</name><operator pos:start="61:63" pos:end="61:63">)</operator></expr></argument>, <argument pos:start="61:66" pos:end="61:70"><expr pos:start="61:66" pos:end="61:70"><name pos:start="61:66" pos:end="61:70">width</name></expr></argument>,

                                    <argument pos:start="63:37" pos:end="63:42"><expr pos:start="63:37" pos:end="63:42"><name pos:start="63:37" pos:end="63:42">stride</name></expr></argument>, <argument pos:start="63:45" pos:end="63:53"><expr pos:start="63:45" pos:end="63:53"><name pos:start="63:45" pos:end="63:53">esc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="67:9" pos:end="73:27"><if pos:start="67:9" pos:end="73:27">if <condition pos:start="67:12" pos:end="67:26">(<expr pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:16">read</name> <operator pos:start="67:18" pos:end="67:18">&gt;</operator> <name pos:start="67:20" pos:end="67:25">length</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="73:27"><block_content pos:start="69:13" pos:end="73:27">

            <expr_stmt pos:start="69:13" pos:end="73:27"><expr pos:start="69:13" pos:end="73:26"><call pos:start="69:13" pos:end="73:26"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="73:26">(<argument pos:start="69:20" pos:end="69:27"><expr pos:start="69:20" pos:end="69:27"><name pos:start="69:20" pos:end="69:27"><name pos:start="69:20" pos:end="69:20">l</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:27">avctx</name></name></expr></argument>, <argument pos:start="69:30" pos:end="69:43"><expr pos:start="69:30" pos:end="69:43"><name pos:start="69:30" pos:end="69:43">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="71:20" pos:end="71:63"><expr pos:start="71:20" pos:end="71:63"><literal type="string" pos:start="71:20" pos:end="71:63">"Output more bytes than length (%d of %d)\n"</literal></expr></argument>, <argument pos:start="71:66" pos:end="71:69"><expr pos:start="71:66" pos:end="71:69"><name pos:start="71:66" pos:end="71:69">read</name></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:25"><expr pos:start="73:20" pos:end="73:25"><name pos:start="73:20" pos:end="73:25">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="75:7" pos:end="103:5">else if <condition pos:start="75:15" pos:end="75:29">(<expr pos:start="75:16" pos:end="75:28"><name pos:start="75:16" pos:end="75:24">esc_count</name> <operator pos:start="75:26" pos:end="75:26">&lt;</operator> <literal type="number" pos:start="75:28" pos:end="75:28">8</literal></expr>)</condition> <block pos:start="75:31" pos:end="103:5">{<block_content pos:start="77:9" pos:end="101:9">

        <expr_stmt pos:start="77:9" pos:end="77:23"><expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:17">esc_count</name> <operator pos:start="77:19" pos:end="77:20">-=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="101:9"><if pos:start="79:9" pos:end="89:9">if <condition pos:start="79:12" pos:end="79:26">(<expr pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:21">esc_count</name> <operator pos:start="79:23" pos:end="79:23">&gt;</operator> <literal type="number" pos:start="79:25" pos:end="79:25">0</literal></expr>)</condition> <block pos:start="79:28" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:66">

            <comment type="block" pos:start="81:13" pos:end="81:56">/* Zero run coding only, no range coding. */</comment>

            <for pos:start="83:13" pos:end="87:66">for <control pos:start="83:17" pos:end="83:40">(<init pos:start="83:18" pos:end="83:23"><expr pos:start="83:18" pos:end="83:22"><name pos:start="83:18" pos:end="83:18">i</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:22">0</literal></expr>;</init> <condition pos:start="83:25" pos:end="83:35"><expr pos:start="83:25" pos:end="83:34"><name pos:start="83:25" pos:end="83:25">i</name> <operator pos:start="83:27" pos:end="83:27">&lt;</operator> <name pos:start="83:29" pos:end="83:34">height</name></expr>;</condition> <incr pos:start="83:37" pos:end="83:39"><expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:37">i</name><operator pos:start="83:38" pos:end="83:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:17" pos:end="87:66"><block_content pos:start="85:17" pos:end="87:66">

                <expr_stmt pos:start="85:17" pos:end="87:66"><expr pos:start="85:17" pos:end="87:65"><name pos:start="85:17" pos:end="85:19">src</name> <operator pos:start="85:21" pos:end="85:22">+=</operator> <call pos:start="85:24" pos:end="87:65"><name pos:start="85:24" pos:end="85:47">lag_decode_zero_run_line</name><argument_list pos:start="85:48" pos:end="87:65">(<argument pos:start="85:49" pos:end="85:49"><expr pos:start="85:49" pos:end="85:49"><name pos:start="85:49" pos:end="85:49">l</name></expr></argument>, <argument pos:start="85:52" pos:end="85:69"><expr pos:start="85:52" pos:end="85:69"><name pos:start="85:52" pos:end="85:54">dst</name> <operator pos:start="85:56" pos:end="85:56">+</operator> <operator pos:start="85:58" pos:end="85:58">(</operator><name pos:start="85:59" pos:end="85:59">i</name> <operator pos:start="85:61" pos:end="85:61">*</operator> <name pos:start="85:63" pos:end="85:68">stride</name><operator pos:start="85:69" pos:end="85:69">)</operator></expr></argument>, <argument pos:start="85:72" pos:end="85:74"><expr pos:start="85:72" pos:end="85:74"><name pos:start="85:72" pos:end="85:74">src</name></expr></argument>,

                                                <argument pos:start="87:49" pos:end="87:53"><expr pos:start="87:49" pos:end="87:53"><name pos:start="87:49" pos:end="87:53">width</name></expr></argument>, <argument pos:start="87:56" pos:end="87:64"><expr pos:start="87:56" pos:end="87:64"><name pos:start="87:56" pos:end="87:64">esc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="101:9">else <block pos:start="89:16" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:13">

            <comment type="block" pos:start="91:13" pos:end="91:46">/* Plane is stored uncompressed */</comment>

            <for pos:start="93:13" pos:end="99:13">for <control pos:start="93:17" pos:end="93:40">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">i</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:35"><expr pos:start="93:25" pos:end="93:34"><name pos:start="93:25" pos:end="93:25">i</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <name pos:start="93:29" pos:end="93:34">height</name></expr>;</condition> <incr pos:start="93:37" pos:end="93:39"><expr pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:37">i</name><operator pos:start="93:38" pos:end="93:39">++</operator></expr></incr>)</control> <block pos:start="93:42" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:29">

                <expr_stmt pos:start="95:17" pos:end="95:55"><expr pos:start="95:17" pos:end="95:54"><call pos:start="95:17" pos:end="95:54"><name pos:start="95:17" pos:end="95:22">memcpy</name><argument_list pos:start="95:23" pos:end="95:54">(<argument pos:start="95:24" pos:end="95:41"><expr pos:start="95:24" pos:end="95:41"><name pos:start="95:24" pos:end="95:26">dst</name> <operator pos:start="95:28" pos:end="95:28">+</operator> <operator pos:start="95:30" pos:end="95:30">(</operator><name pos:start="95:31" pos:end="95:31">i</name> <operator pos:start="95:33" pos:end="95:33">*</operator> <name pos:start="95:35" pos:end="95:40">stride</name><operator pos:start="95:41" pos:end="95:41">)</operator></expr></argument>, <argument pos:start="95:44" pos:end="95:46"><expr pos:start="95:44" pos:end="95:46"><name pos:start="95:44" pos:end="95:46">src</name></expr></argument>, <argument pos:start="95:49" pos:end="95:53"><expr pos:start="95:49" pos:end="95:53"><name pos:start="95:49" pos:end="95:53">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:29"><expr pos:start="97:17" pos:end="97:28"><name pos:start="97:17" pos:end="97:19">src</name> <operator pos:start="97:21" pos:end="97:22">+=</operator> <name pos:start="97:24" pos:end="97:28">width</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="103:7" pos:end="119:5">else if <condition pos:start="103:15" pos:end="103:33">(<expr pos:start="103:16" pos:end="103:32"><name pos:start="103:16" pos:end="103:24">esc_count</name> <operator pos:start="103:26" pos:end="103:27">==</operator> <literal type="number" pos:start="103:29" pos:end="103:32">0xff</literal></expr>)</condition> <block pos:start="103:35" pos:end="119:5">{<block_content pos:start="107:9" pos:end="117:17">

        <comment type="block" pos:start="105:9" pos:end="105:49">/* Plane is a solid run of given value */</comment>

        <for pos:start="107:9" pos:end="109:52">for <control pos:start="107:13" pos:end="107:36">(<init pos:start="107:14" pos:end="107:19"><expr pos:start="107:14" pos:end="107:18"><name pos:start="107:14" pos:end="107:14">i</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>;</init> <condition pos:start="107:21" pos:end="107:31"><expr pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:21">i</name> <operator pos:start="107:23" pos:end="107:23">&lt;</operator> <name pos:start="107:25" pos:end="107:30">height</name></expr>;</condition> <incr pos:start="107:33" pos:end="107:35"><expr pos:start="107:33" pos:end="107:35"><name pos:start="107:33" pos:end="107:33">i</name><operator pos:start="107:34" pos:end="107:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="109:13" pos:end="109:52"><block_content pos:start="109:13" pos:end="109:52">

            <expr_stmt pos:start="109:13" pos:end="109:52"><expr pos:start="109:13" pos:end="109:51"><call pos:start="109:13" pos:end="109:51"><name pos:start="109:13" pos:end="109:18">memset</name><argument_list pos:start="109:19" pos:end="109:51">(<argument pos:start="109:20" pos:end="109:35"><expr pos:start="109:20" pos:end="109:35"><name pos:start="109:20" pos:end="109:22">dst</name> <operator pos:start="109:24" pos:end="109:24">+</operator> <name pos:start="109:26" pos:end="109:26">i</name> <operator pos:start="109:28" pos:end="109:28">*</operator> <name pos:start="109:30" pos:end="109:35">stride</name></expr></argument>, <argument pos:start="109:38" pos:end="109:43"><expr pos:start="109:38" pos:end="109:43"><name pos:start="109:38" pos:end="109:43"><name pos:start="109:38" pos:end="109:40">src</name><index pos:start="109:41" pos:end="109:43">[<expr pos:start="109:42" pos:end="109:42"><literal type="number" pos:start="109:42" pos:end="109:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:46" pos:end="109:50"><expr pos:start="109:46" pos:end="109:50"><name pos:start="109:46" pos:end="109:50">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="block" pos:start="111:9" pos:end="115:60">/* Do not apply prediction.

           Note: memset to 0 above, setting first value to src[1]

           and applying prediction gives the same result. */</comment>

        <return pos:start="117:9" pos:end="117:17">return <expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">0</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="127:5">else <block pos:start="119:12" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:18">

        <expr_stmt pos:start="121:9" pos:end="123:67"><expr pos:start="121:9" pos:end="123:66"><call pos:start="121:9" pos:end="123:66"><name pos:start="121:9" pos:end="121:14">av_log</name><argument_list pos:start="121:15" pos:end="123:66">(<argument pos:start="121:16" pos:end="121:23"><expr pos:start="121:16" pos:end="121:23"><name pos:start="121:16" pos:end="121:23"><name pos:start="121:16" pos:end="121:16">l</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:23">avctx</name></name></expr></argument>, <argument pos:start="121:26" pos:end="121:37"><expr pos:start="121:26" pos:end="121:37"><name pos:start="121:26" pos:end="121:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="123:16" pos:end="123:54"><expr pos:start="123:16" pos:end="123:54"><literal type="string" pos:start="123:16" pos:end="123:54">"Invalid zero run escape code! (%#x)\n"</literal></expr></argument>, <argument pos:start="123:57" pos:end="123:65"><expr pos:start="123:57" pos:end="123:65"><name pos:start="123:57" pos:end="123:65">esc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:18">return <expr pos:start="125:16" pos:end="125:17"><operator pos:start="125:16" pos:end="125:16">-</operator><literal type="number" pos:start="125:17" pos:end="125:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <for pos:start="131:5" pos:end="137:5">for <control pos:start="131:9" pos:end="131:32">(<init pos:start="131:10" pos:end="131:15"><expr pos:start="131:10" pos:end="131:14"><name pos:start="131:10" pos:end="131:10">i</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <literal type="number" pos:start="131:14" pos:end="131:14">0</literal></expr>;</init> <condition pos:start="131:17" pos:end="131:27"><expr pos:start="131:17" pos:end="131:26"><name pos:start="131:17" pos:end="131:17">i</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <name pos:start="131:21" pos:end="131:26">height</name></expr>;</condition> <incr pos:start="131:29" pos:end="131:31"><expr pos:start="131:29" pos:end="131:31"><name pos:start="131:29" pos:end="131:29">i</name><operator pos:start="131:30" pos:end="131:31">++</operator></expr></incr>)</control> <block pos:start="131:34" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:22">

        <expr_stmt pos:start="133:9" pos:end="133:48"><expr pos:start="133:9" pos:end="133:47"><call pos:start="133:9" pos:end="133:47"><name pos:start="133:9" pos:end="133:21">lag_pred_line</name><argument_list pos:start="133:22" pos:end="133:47">(<argument pos:start="133:23" pos:end="133:23"><expr pos:start="133:23" pos:end="133:23"><name pos:start="133:23" pos:end="133:23">l</name></expr></argument>, <argument pos:start="133:26" pos:end="133:28"><expr pos:start="133:26" pos:end="133:28"><name pos:start="133:26" pos:end="133:28">dst</name></expr></argument>, <argument pos:start="133:31" pos:end="133:35"><expr pos:start="133:31" pos:end="133:35"><name pos:start="133:31" pos:end="133:35">width</name></expr></argument>, <argument pos:start="133:38" pos:end="133:43"><expr pos:start="133:38" pos:end="133:43"><name pos:start="133:38" pos:end="133:43">stride</name></expr></argument>, <argument pos:start="133:46" pos:end="133:46"><expr pos:start="133:46" pos:end="133:46"><name pos:start="133:46" pos:end="133:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:22"><expr pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:11">dst</name> <operator pos:start="135:13" pos:end="135:14">+=</operator> <name pos:start="135:16" pos:end="135:21">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
