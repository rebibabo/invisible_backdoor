<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3890.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">AudioState</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:20">AUD_init</name> <parameter_list pos:start="1:22" pos:end="1:27">(<parameter pos:start="1:23" pos:end="1:26"><decl pos:start="1:23" pos:end="1:26"><type pos:start="1:23" pos:end="1:26"><name pos:start="1:23" pos:end="1:26">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="211:1">{<block_content pos:start="5:5" pos:end="209:13">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">done</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:23">drvname</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">AudioState</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name> <init pos:start="11:19" pos:end="11:37">= <expr pos:start="11:21" pos:end="11:37"><operator pos:start="11:21" pos:end="11:21">&amp;</operator><name pos:start="11:22" pos:end="11:37">glob_audio_state</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:32"><expr pos:start="15:5" pos:end="15:31"><call pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:13">LIST_INIT</name> <argument_list pos:start="15:15" pos:end="15:31">(<argument pos:start="15:16" pos:end="15:30"><expr pos:start="15:16" pos:end="15:30"><operator pos:start="15:16" pos:end="15:16">&amp;</operator><name pos:start="15:17" pos:end="15:30"><name pos:start="15:17" pos:end="15:17">s</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:30">hw_head_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><call pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:13">LIST_INIT</name> <argument_list pos:start="17:15" pos:end="17:30">(<argument pos:start="17:16" pos:end="17:29"><expr pos:start="17:16" pos:end="17:29"><operator pos:start="17:16" pos:end="17:16">&amp;</operator><name pos:start="17:17" pos:end="17:29"><name pos:start="17:17" pos:end="17:17">s</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:29">hw_head_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><call pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:13">LIST_INIT</name> <argument_list pos:start="19:15" pos:end="19:28">(<argument pos:start="19:16" pos:end="19:27"><expr pos:start="19:16" pos:end="19:27"><operator pos:start="19:16" pos:end="19:16">&amp;</operator><name pos:start="19:17" pos:end="19:27"><name pos:start="19:17" pos:end="19:17">s</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:27">cap_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:10">atexit</name> <argument_list pos:start="21:12" pos:end="21:25">(<argument pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:24">audio_atexit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:54"><expr pos:start="25:5" pos:end="25:53"><name pos:start="25:5" pos:end="25:9"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:9">ts</name></name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:53"><name pos:start="25:13" pos:end="25:26">qemu_new_timer</name> <argument_list pos:start="25:28" pos:end="25:53">(<argument pos:start="25:29" pos:end="25:36"><expr pos:start="25:29" pos:end="25:36"><name pos:start="25:29" pos:end="25:36">vm_clock</name></expr></argument>, <argument pos:start="25:39" pos:end="25:49"><expr pos:start="25:39" pos:end="25:49"><name pos:start="25:39" pos:end="25:49">audio_timer</name></expr></argument>, <argument pos:start="25:52" pos:end="25:52"><expr pos:start="25:52" pos:end="25:52"><name pos:start="25:52" pos:end="25:52">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">s</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:14">ts</name></name></expr>)</condition> <block pos:start="27:17" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:49"><expr pos:start="29:9" pos:end="29:48"><call pos:start="29:9" pos:end="29:48"><name pos:start="29:9" pos:end="29:13">dolog</name> <argument_list pos:start="29:15" pos:end="29:48">(<argument pos:start="29:16" pos:end="29:47"><expr pos:start="29:16" pos:end="29:47"><literal type="string" pos:start="29:16" pos:end="29:47">"Could not create audio timer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:20">return <expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><call pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:25">audio_process_options</name> <argument_list pos:start="37:27" pos:end="37:50">(<argument pos:start="37:28" pos:end="37:34"><expr pos:start="37:28" pos:end="37:34"><literal type="string" pos:start="37:28" pos:end="37:34">"AUDIO"</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:49"><expr pos:start="37:37" pos:end="37:49"><name pos:start="37:37" pos:end="37:49">audio_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:23">nb_hw_voices_out</name></name> <operator pos:start="41:25" pos:end="41:25">=</operator> <name pos:start="41:27" pos:end="41:50"><name pos:start="41:27" pos:end="41:30">conf</name><operator pos:start="41:31" pos:end="41:31">.</operator><name pos:start="41:32" pos:end="41:40">fixed_out</name><operator pos:start="41:41" pos:end="41:41">.</operator><name pos:start="41:42" pos:end="41:50">nb_voices</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:49"><expr pos:start="43:5" pos:end="43:48"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:22">nb_hw_voices_in</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:48"><name pos:start="43:26" pos:end="43:29">conf</name><operator pos:start="43:30" pos:end="43:30">.</operator><name pos:start="43:31" pos:end="43:38">fixed_in</name><operator pos:start="43:39" pos:end="43:39">.</operator><name pos:start="43:40" pos:end="43:48">nb_voices</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:33">(<expr pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:27">nb_hw_voices_out</name></name> <operator pos:start="47:29" pos:end="47:30">&lt;=</operator> <literal type="number" pos:start="47:32" pos:end="47:32">0</literal></expr>)</condition> <block pos:start="47:35" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:32">

        <expr_stmt pos:start="49:9" pos:end="51:36"><expr pos:start="49:9" pos:end="51:35"><call pos:start="49:9" pos:end="51:35"><name pos:start="49:9" pos:end="49:13">dolog</name> <argument_list pos:start="49:15" pos:end="51:35">(<argument pos:start="49:16" pos:end="49:67"><expr pos:start="49:16" pos:end="49:67"><literal type="string" pos:start="49:16" pos:end="49:67">"Bogus number of playback voices %d, setting to 1\n"</literal></expr></argument>,

               <argument pos:start="51:16" pos:end="51:34"><expr pos:start="51:16" pos:end="51:34"><name pos:start="51:16" pos:end="51:34"><name pos:start="51:16" pos:end="51:16">s</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:34">nb_hw_voices_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:27">nb_hw_voices_out</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <literal type="number" pos:start="53:31" pos:end="53:31">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:32">(<expr pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:26">nb_hw_voices_in</name></name> <operator pos:start="59:28" pos:end="59:29">&lt;=</operator> <literal type="number" pos:start="59:31" pos:end="59:31">0</literal></expr>)</condition> <block pos:start="59:34" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:31">

        <expr_stmt pos:start="61:9" pos:end="63:35"><expr pos:start="61:9" pos:end="63:34"><call pos:start="61:9" pos:end="63:34"><name pos:start="61:9" pos:end="61:13">dolog</name> <argument_list pos:start="61:15" pos:end="63:34">(<argument pos:start="61:16" pos:end="61:66"><expr pos:start="61:16" pos:end="61:66"><literal type="string" pos:start="61:16" pos:end="61:66">"Bogus number of capture voices %d, setting to 0\n"</literal></expr></argument>,

               <argument pos:start="63:16" pos:end="63:33"><expr pos:start="63:16" pos:end="63:33"><name pos:start="63:16" pos:end="63:33"><name pos:start="63:16" pos:end="63:16">s</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:33">nb_hw_voices_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:31"><expr pos:start="65:9" pos:end="65:30"><name pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:26">nb_hw_voices_in</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <literal type="number" pos:start="65:30" pos:end="65:30">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <block pos:start="71:5" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:68">

        <decl_stmt pos:start="73:9" pos:end="73:16"><decl pos:start="73:9" pos:end="73:15"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:15">def</name></decl>;</decl_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:68"><expr pos:start="75:9" pos:end="75:67"><name pos:start="75:9" pos:end="75:15">drvname</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:67"><name pos:start="75:19" pos:end="75:36">audio_get_conf_str</name> <argument_list pos:start="75:38" pos:end="75:67">(<argument pos:start="75:39" pos:end="75:54"><expr pos:start="75:39" pos:end="75:54"><literal type="string" pos:start="75:39" pos:end="75:54">"QEMU_AUDIO_DRV"</literal></expr></argument>, <argument pos:start="75:57" pos:end="75:60"><expr pos:start="75:57" pos:end="75:60"><name pos:start="75:57" pos:end="75:60">NULL</name></expr></argument>, <argument pos:start="75:63" pos:end="75:66"><expr pos:start="75:63" pos:end="75:66"><operator pos:start="75:63" pos:end="75:63">&amp;</operator><name pos:start="75:64" pos:end="75:66">def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="81:5" pos:end="111:5"><if pos:start="81:5" pos:end="111:5">if <condition pos:start="81:8" pos:end="81:16">(<expr pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:15">drvname</name></expr>)</condition> <block pos:start="81:18" pos:end="111:5">{<block_content pos:start="83:9" pos:end="109:9">

        <decl_stmt pos:start="83:9" pos:end="83:22"><decl pos:start="83:9" pos:end="83:21"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:17">found</name> <init pos:start="83:19" pos:end="83:21">= <expr pos:start="83:21" pos:end="83:21"><literal type="number" pos:start="83:21" pos:end="83:21">0</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="87:9" pos:end="99:9">for <control pos:start="87:13" pos:end="87:49">(<init pos:start="87:14" pos:end="87:19"><expr pos:start="87:14" pos:end="87:18"><name pos:start="87:14" pos:end="87:14">i</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>;</init> <condition pos:start="87:21" pos:end="87:44"><expr pos:start="87:21" pos:end="87:43"><name pos:start="87:21" pos:end="87:21">i</name> <operator pos:start="87:23" pos:end="87:23">&lt;</operator> <call pos:start="87:25" pos:end="87:43"><name pos:start="87:25" pos:end="87:34">ARRAY_SIZE</name> <argument_list pos:start="87:36" pos:end="87:43">(<argument pos:start="87:37" pos:end="87:42"><expr pos:start="87:37" pos:end="87:42"><name pos:start="87:37" pos:end="87:42">drvtab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="87:46" pos:end="87:48"><expr pos:start="87:46" pos:end="87:48"><name pos:start="87:46" pos:end="87:46">i</name><operator pos:start="87:47" pos:end="87:48">++</operator></expr></incr>)</control> <block pos:start="87:51" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:13">

            <if_stmt pos:start="89:13" pos:end="97:13"><if pos:start="89:13" pos:end="97:13">if <condition pos:start="89:16" pos:end="89:51">(<expr pos:start="89:17" pos:end="89:50"><operator pos:start="89:17" pos:end="89:17">!</operator><call pos:start="89:18" pos:end="89:50"><name pos:start="89:18" pos:end="89:23">strcmp</name> <argument_list pos:start="89:25" pos:end="89:50">(<argument pos:start="89:26" pos:end="89:32"><expr pos:start="89:26" pos:end="89:32"><name pos:start="89:26" pos:end="89:32">drvname</name></expr></argument>, <argument pos:start="89:35" pos:end="89:49"><expr pos:start="89:35" pos:end="89:49"><name pos:start="89:35" pos:end="89:43"><name pos:start="89:35" pos:end="89:40">drvtab</name><index pos:start="89:41" pos:end="89:43">[<expr pos:start="89:42" pos:end="89:42"><name pos:start="89:42" pos:end="89:42">i</name></expr>]</index></name><operator pos:start="89:44" pos:end="89:45">-&gt;</operator><name pos:start="89:46" pos:end="89:49">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:53" pos:end="97:13">{<block_content pos:start="91:17" pos:end="95:22">

                <expr_stmt pos:start="91:17" pos:end="91:57"><expr pos:start="91:17" pos:end="91:56"><name pos:start="91:17" pos:end="91:20">done</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <operator pos:start="91:24" pos:end="91:24">!</operator><call pos:start="91:25" pos:end="91:56"><name pos:start="91:25" pos:end="91:41">audio_driver_init</name> <argument_list pos:start="91:43" pos:end="91:56">(<argument pos:start="91:44" pos:end="91:44"><expr pos:start="91:44" pos:end="91:44"><name pos:start="91:44" pos:end="91:44">s</name></expr></argument>, <argument pos:start="91:47" pos:end="91:55"><expr pos:start="91:47" pos:end="91:55"><name pos:start="91:47" pos:end="91:55"><name pos:start="91:47" pos:end="91:52">drvtab</name><index pos:start="91:53" pos:end="91:55">[<expr pos:start="91:54" pos:end="91:54"><name pos:start="91:54" pos:end="91:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:26"><expr pos:start="93:17" pos:end="93:25"><name pos:start="93:17" pos:end="93:21">found</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <literal type="number" pos:start="93:25" pos:end="93:25">1</literal></expr>;</expr_stmt>

                <break pos:start="95:17" pos:end="95:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:19">(<expr pos:start="103:13" pos:end="103:18"><operator pos:start="103:13" pos:end="103:13">!</operator><name pos:start="103:14" pos:end="103:18">found</name></expr>)</condition> <block pos:start="103:21" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:71">

            <expr_stmt pos:start="105:13" pos:end="105:59"><expr pos:start="105:13" pos:end="105:58"><call pos:start="105:13" pos:end="105:58"><name pos:start="105:13" pos:end="105:17">dolog</name> <argument_list pos:start="105:19" pos:end="105:58">(<argument pos:start="105:20" pos:end="105:48"><expr pos:start="105:20" pos:end="105:48"><literal type="string" pos:start="105:20" pos:end="105:48">"Unknown audio driver `%s'\n"</literal></expr></argument>, <argument pos:start="105:51" pos:end="105:57"><expr pos:start="105:51" pos:end="105:57"><name pos:start="105:51" pos:end="105:57">drvname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:71"><expr pos:start="107:13" pos:end="107:70"><call pos:start="107:13" pos:end="107:70"><name pos:start="107:13" pos:end="107:17">dolog</name> <argument_list pos:start="107:19" pos:end="107:70">(<argument pos:start="107:20" pos:end="107:69"><expr pos:start="107:20" pos:end="107:69"><literal type="string" pos:start="107:20" pos:end="107:69">"Run with -audio-help to list available drivers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="127:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:14">(<expr pos:start="115:9" pos:end="115:13"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:13">done</name></expr>)</condition> <block pos:start="115:16" pos:end="127:5">{<block_content pos:start="117:9" pos:end="125:9">

        <for pos:start="117:9" pos:end="125:9">for <control pos:start="117:13" pos:end="117:58">(<init pos:start="117:14" pos:end="117:19"><expr pos:start="117:14" pos:end="117:18"><name pos:start="117:14" pos:end="117:14">i</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">0</literal></expr>;</init> <condition pos:start="117:21" pos:end="117:53"><expr pos:start="117:21" pos:end="117:52"><operator pos:start="117:21" pos:end="117:21">!</operator><name pos:start="117:22" pos:end="117:25">done</name> <operator pos:start="117:27" pos:end="117:28">&amp;&amp;</operator> <name pos:start="117:30" pos:end="117:30">i</name> <operator pos:start="117:32" pos:end="117:32">&lt;</operator> <call pos:start="117:34" pos:end="117:52"><name pos:start="117:34" pos:end="117:43">ARRAY_SIZE</name> <argument_list pos:start="117:45" pos:end="117:52">(<argument pos:start="117:46" pos:end="117:51"><expr pos:start="117:46" pos:end="117:51"><name pos:start="117:46" pos:end="117:51">drvtab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="117:55" pos:end="117:57"><expr pos:start="117:55" pos:end="117:57"><name pos:start="117:55" pos:end="117:55">i</name><operator pos:start="117:56" pos:end="117:57">++</operator></expr></incr>)</control> <block pos:start="117:60" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:13">

            <if_stmt pos:start="119:13" pos:end="123:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:42">(<expr pos:start="119:17" pos:end="119:41"><name pos:start="119:17" pos:end="119:25"><name pos:start="119:17" pos:end="119:22">drvtab</name><index pos:start="119:23" pos:end="119:25">[<expr pos:start="119:24" pos:end="119:24"><name pos:start="119:24" pos:end="119:24">i</name></expr>]</index></name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:41">can_be_default</name></expr>)</condition> <block pos:start="119:44" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:57">

                <expr_stmt pos:start="121:17" pos:end="121:57"><expr pos:start="121:17" pos:end="121:56"><name pos:start="121:17" pos:end="121:20">done</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <operator pos:start="121:24" pos:end="121:24">!</operator><call pos:start="121:25" pos:end="121:56"><name pos:start="121:25" pos:end="121:41">audio_driver_init</name> <argument_list pos:start="121:43" pos:end="121:56">(<argument pos:start="121:44" pos:end="121:44"><expr pos:start="121:44" pos:end="121:44"><name pos:start="121:44" pos:end="121:44">s</name></expr></argument>, <argument pos:start="121:47" pos:end="121:55"><expr pos:start="121:47" pos:end="121:55"><name pos:start="121:47" pos:end="121:55"><name pos:start="121:47" pos:end="121:52">drvtab</name><index pos:start="121:53" pos:end="121:55">[<expr pos:start="121:54" pos:end="121:54"><name pos:start="121:54" pos:end="121:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="131:5" pos:end="147:5"><if pos:start="131:5" pos:end="147:5">if <condition pos:start="131:8" pos:end="131:14">(<expr pos:start="131:9" pos:end="131:13"><operator pos:start="131:9" pos:end="131:9">!</operator><name pos:start="131:10" pos:end="131:13">done</name></expr>)</condition> <block pos:start="131:16" pos:end="147:5">{<block_content pos:start="133:9" pos:end="145:9">

        <expr_stmt pos:start="133:9" pos:end="133:56"><expr pos:start="133:9" pos:end="133:55"><name pos:start="133:9" pos:end="133:12">done</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <operator pos:start="133:16" pos:end="133:16">!</operator><call pos:start="133:17" pos:end="133:55"><name pos:start="133:17" pos:end="133:33">audio_driver_init</name> <argument_list pos:start="133:35" pos:end="133:55">(<argument pos:start="133:36" pos:end="133:36"><expr pos:start="133:36" pos:end="133:36"><name pos:start="133:36" pos:end="133:36">s</name></expr></argument>, <argument pos:start="133:39" pos:end="133:54"><expr pos:start="133:39" pos:end="133:54"><operator pos:start="133:39" pos:end="133:39">&amp;</operator><name pos:start="133:40" pos:end="133:54">no_audio_driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="145:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:18">(<expr pos:start="135:13" pos:end="135:17"><operator pos:start="135:13" pos:end="135:13">!</operator><name pos:start="135:14" pos:end="135:17">done</name></expr>)</condition> <block pos:start="135:20" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:61">

            <expr_stmt pos:start="137:13" pos:end="137:61"><expr pos:start="137:13" pos:end="137:60"><call pos:start="137:13" pos:end="137:60"><name pos:start="137:13" pos:end="137:17">dolog</name> <argument_list pos:start="137:19" pos:end="137:60">(<argument pos:start="137:20" pos:end="137:59"><expr pos:start="137:20" pos:end="137:59"><literal type="string" pos:start="137:20" pos:end="137:59">"Could not initialize audio subsystem\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="141:9" pos:end="145:9">else <block pos:start="141:14" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:67">

            <expr_stmt pos:start="143:13" pos:end="143:67"><expr pos:start="143:13" pos:end="143:66"><call pos:start="143:13" pos:end="143:66"><name pos:start="143:13" pos:end="143:17">dolog</name> <argument_list pos:start="143:19" pos:end="143:66">(<argument pos:start="143:20" pos:end="143:65"><expr pos:start="143:20" pos:end="143:65"><literal type="string" pos:start="143:20" pos:end="143:65">"warning: Using timer based audio emulation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="151:5" pos:end="199:5"><if pos:start="151:5" pos:end="191:5">if <condition pos:start="151:8" pos:end="151:13">(<expr pos:start="151:9" pos:end="151:12"><name pos:start="151:9" pos:end="151:12">done</name></expr>)</condition> <block pos:start="151:15" pos:end="191:5">{<block_content pos:start="153:9" pos:end="189:9">

        <decl_stmt pos:start="153:9" pos:end="153:30"><decl pos:start="153:9" pos:end="153:29"><type pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:26">VMChangeStateEntry</name> <modifier pos:start="153:28" pos:end="153:28">*</modifier></type><name pos:start="153:29" pos:end="153:29">e</name></decl>;</decl_stmt>



        <if_stmt pos:start="157:9" pos:end="177:9"><if pos:start="157:9" pos:end="171:9">if <condition pos:start="157:12" pos:end="157:35">(<expr pos:start="157:13" pos:end="157:34"><name pos:start="157:13" pos:end="157:29"><name pos:start="157:13" pos:end="157:16">conf</name><operator pos:start="157:17" pos:end="157:17">.</operator><name pos:start="157:18" pos:end="157:23">period</name><operator pos:start="157:24" pos:end="157:24">.</operator><name pos:start="157:25" pos:end="157:29">hertz</name></name> <operator pos:start="157:31" pos:end="157:32">&lt;=</operator> <literal type="number" pos:start="157:34" pos:end="157:34">0</literal></expr>)</condition> <block pos:start="157:37" pos:end="171:9">{<block_content pos:start="159:13" pos:end="169:34">

            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="167:13">if <condition pos:start="159:16" pos:end="159:38">(<expr pos:start="159:17" pos:end="159:37"><name pos:start="159:17" pos:end="159:33"><name pos:start="159:17" pos:end="159:20">conf</name><operator pos:start="159:21" pos:end="159:21">.</operator><name pos:start="159:22" pos:end="159:27">period</name><operator pos:start="159:28" pos:end="159:28">.</operator><name pos:start="159:29" pos:end="159:33">hertz</name></name> <operator pos:start="159:35" pos:end="159:35">&lt;</operator> <literal type="number" pos:start="159:37" pos:end="159:37">0</literal></expr>)</condition> <block pos:start="159:40" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:42">

                <expr_stmt pos:start="161:17" pos:end="165:42"><expr pos:start="161:17" pos:end="165:41"><call pos:start="161:17" pos:end="165:41"><name pos:start="161:17" pos:end="161:21">dolog</name> <argument_list pos:start="161:23" pos:end="165:41">(<argument pos:start="161:24" pos:end="163:43"><expr pos:start="161:24" pos:end="163:43"><literal type="string" pos:start="161:24" pos:end="161:64">"warning: Timer period is negative - %d "</literal>

                       <literal type="string" pos:start="163:24" pos:end="163:43">"treating as zero\n"</literal></expr></argument>,

                       <argument pos:start="165:24" pos:end="165:40"><expr pos:start="165:24" pos:end="165:40"><name pos:start="165:24" pos:end="165:40"><name pos:start="165:24" pos:end="165:27">conf</name><operator pos:start="165:28" pos:end="165:28">.</operator><name pos:start="165:29" pos:end="165:34">period</name><operator pos:start="165:35" pos:end="165:35">.</operator><name pos:start="165:36" pos:end="165:40">hertz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:34"><expr pos:start="169:13" pos:end="169:33"><name pos:start="169:13" pos:end="169:29"><name pos:start="169:13" pos:end="169:16">conf</name><operator pos:start="169:17" pos:end="169:17">.</operator><name pos:start="169:18" pos:end="169:23">period</name><operator pos:start="169:24" pos:end="169:24">.</operator><name pos:start="169:25" pos:end="169:29">ticks</name></name> <operator pos:start="169:31" pos:end="169:31">=</operator> <literal type="number" pos:start="169:33" pos:end="169:33">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="173:9" pos:end="177:9">else <block pos:start="173:14" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:66">

            <expr_stmt pos:start="175:13" pos:end="175:66"><expr pos:start="175:13" pos:end="175:65"><name pos:start="175:13" pos:end="175:29"><name pos:start="175:13" pos:end="175:16">conf</name><operator pos:start="175:17" pos:end="175:17">.</operator><name pos:start="175:18" pos:end="175:23">period</name><operator pos:start="175:24" pos:end="175:24">.</operator><name pos:start="175:25" pos:end="175:29">ticks</name></name> <operator pos:start="175:31" pos:end="175:31">=</operator> <name pos:start="175:33" pos:end="175:45">ticks_per_sec</name> <operator pos:start="175:47" pos:end="175:47">/</operator> <name pos:start="175:49" pos:end="175:65"><name pos:start="175:49" pos:end="175:52">conf</name><operator pos:start="175:53" pos:end="175:53">.</operator><name pos:start="175:54" pos:end="175:59">period</name><operator pos:start="175:60" pos:end="175:60">.</operator><name pos:start="175:61" pos:end="175:65">hertz</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:80"><expr pos:start="181:9" pos:end="181:79"><name pos:start="181:9" pos:end="181:9">e</name> <operator pos:start="181:11" pos:end="181:11">=</operator> <call pos:start="181:13" pos:end="181:79"><name pos:start="181:13" pos:end="181:44">qemu_add_vm_change_state_handler</name> <argument_list pos:start="181:46" pos:end="181:79">(<argument pos:start="181:47" pos:end="181:75"><expr pos:start="181:47" pos:end="181:75"><name pos:start="181:47" pos:end="181:75">audio_vm_change_state_handler</name></expr></argument>, <argument pos:start="181:78" pos:end="181:78"><expr pos:start="181:78" pos:end="181:78"><name pos:start="181:78" pos:end="181:78">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:15">(<expr pos:start="183:13" pos:end="183:14"><operator pos:start="183:13" pos:end="183:13">!</operator><name pos:start="183:14" pos:end="183:14">e</name></expr>)</condition> <block pos:start="183:17" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:80">

            <expr_stmt pos:start="185:13" pos:end="187:80"><expr pos:start="185:13" pos:end="187:79"><call pos:start="185:13" pos:end="187:79"><name pos:start="185:13" pos:end="185:17">dolog</name> <argument_list pos:start="185:19" pos:end="187:79">(<argument pos:start="185:20" pos:end="187:78"><expr pos:start="185:20" pos:end="187:78"><literal type="string" pos:start="185:20" pos:end="185:71">"warning: Could not register change state handler\n"</literal>

                   <literal type="string" pos:start="187:20" pos:end="187:78">"(Audio can continue looping even after stopping the VM)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>

    <else pos:start="193:5" pos:end="199:5">else <block pos:start="193:10" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:20">

        <expr_stmt pos:start="195:9" pos:end="195:31"><expr pos:start="195:9" pos:end="195:30"><call pos:start="195:9" pos:end="195:30"><name pos:start="195:9" pos:end="195:22">qemu_del_timer</name> <argument_list pos:start="195:24" pos:end="195:30">(<argument pos:start="195:25" pos:end="195:29"><expr pos:start="195:25" pos:end="195:29"><name pos:start="195:25" pos:end="195:29"><name pos:start="195:25" pos:end="195:25">s</name><operator pos:start="195:26" pos:end="195:27">-&gt;</operator><name pos:start="195:28" pos:end="195:29">ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="197:9" pos:end="197:20">return <expr pos:start="197:16" pos:end="197:19"><name pos:start="197:16" pos:end="197:19">NULL</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:30"><expr pos:start="203:5" pos:end="203:29"><call pos:start="203:5" pos:end="203:29"><name pos:start="203:5" pos:end="203:13">LIST_INIT</name> <argument_list pos:start="203:15" pos:end="203:29">(<argument pos:start="203:16" pos:end="203:28"><expr pos:start="203:16" pos:end="203:28"><operator pos:start="203:16" pos:end="203:16">&amp;</operator><name pos:start="203:17" pos:end="203:28"><name pos:start="203:17" pos:end="203:17">s</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:28">card_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:63"><expr pos:start="205:5" pos:end="205:62"><call pos:start="205:5" pos:end="205:62"><name pos:start="205:5" pos:end="205:19">register_savevm</name> <argument_list pos:start="205:21" pos:end="205:62">(<argument pos:start="205:22" pos:end="205:28"><expr pos:start="205:22" pos:end="205:28"><literal type="string" pos:start="205:22" pos:end="205:28">"audio"</literal></expr></argument>, <argument pos:start="205:31" pos:end="205:31"><expr pos:start="205:31" pos:end="205:31"><literal type="number" pos:start="205:31" pos:end="205:31">0</literal></expr></argument>, <argument pos:start="205:34" pos:end="205:34"><expr pos:start="205:34" pos:end="205:34"><literal type="number" pos:start="205:34" pos:end="205:34">1</literal></expr></argument>, <argument pos:start="205:37" pos:end="205:46"><expr pos:start="205:37" pos:end="205:46"><name pos:start="205:37" pos:end="205:46">audio_save</name></expr></argument>, <argument pos:start="205:49" pos:end="205:58"><expr pos:start="205:49" pos:end="205:58"><name pos:start="205:49" pos:end="205:58">audio_load</name></expr></argument>, <argument pos:start="205:61" pos:end="205:61"><expr pos:start="205:61" pos:end="205:61"><name pos:start="205:61" pos:end="205:61">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:74"><expr pos:start="207:5" pos:end="207:73"><call pos:start="207:5" pos:end="207:73"><name pos:start="207:5" pos:end="207:18">qemu_mod_timer</name> <argument_list pos:start="207:20" pos:end="207:73">(<argument pos:start="207:21" pos:end="207:25"><expr pos:start="207:21" pos:end="207:25"><name pos:start="207:21" pos:end="207:25"><name pos:start="207:21" pos:end="207:21">s</name><operator pos:start="207:22" pos:end="207:23">-&gt;</operator><name pos:start="207:24" pos:end="207:25">ts</name></name></expr></argument>, <argument pos:start="207:28" pos:end="207:72"><expr pos:start="207:28" pos:end="207:72"><call pos:start="207:28" pos:end="207:52"><name pos:start="207:28" pos:end="207:41">qemu_get_clock</name> <argument_list pos:start="207:43" pos:end="207:52">(<argument pos:start="207:44" pos:end="207:51"><expr pos:start="207:44" pos:end="207:51"><name pos:start="207:44" pos:end="207:51">vm_clock</name></expr></argument>)</argument_list></call> <operator pos:start="207:54" pos:end="207:54">+</operator> <name pos:start="207:56" pos:end="207:72"><name pos:start="207:56" pos:end="207:59">conf</name><operator pos:start="207:60" pos:end="207:60">.</operator><name pos:start="207:61" pos:end="207:66">period</name><operator pos:start="207:67" pos:end="207:67">.</operator><name pos:start="207:68" pos:end="207:72">ticks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="209:5" pos:end="209:13">return <expr pos:start="209:12" pos:end="209:12"><name pos:start="209:12" pos:end="209:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
