<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13531.c" pos:tabs="8"><function pos:start="1:1" pos:end="281:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_bmv_frame</name><parameter_list pos:start="1:28" pos:end="1:94">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:41">uint8_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">source</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:62">src_len</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:78">frame</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:93"><decl pos:start="1:81" pos:end="1:93"><type pos:start="1:81" pos:end="1:93"><name pos:start="1:81" pos:end="1:83">int</name></type> <name pos:start="1:85" pos:end="1:93">frame_off</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="281:1">{<block_content pos:start="5:5" pos:end="279:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">unsigned</name></type> <name pos:start="5:14" pos:end="5:16">val</name></decl>, <decl pos:start="5:19" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:19" pos:end="5:27">saved_val</name> <init pos:start="5:29" pos:end="5:31">= <expr pos:start="5:31" pos:end="5:31"><literal type="number" pos:start="5:31" pos:end="5:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">tmplen</name> <init pos:start="7:16" pos:end="7:24">= <expr pos:start="7:18" pos:end="7:24"><name pos:start="7:18" pos:end="7:24">src_len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">src</name></decl>, <decl pos:start="9:25" pos:end="9:54"><type ref="prev" pos:start="9:5" pos:end="9:19"><modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:35">source_end</name> <init pos:start="9:37" pos:end="9:54">= <expr pos:start="9:39" pos:end="9:54"><name pos:start="9:39" pos:end="9:44">source</name> <operator pos:start="9:46" pos:end="9:46">+</operator> <name pos:start="9:48" pos:end="9:54">src_len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:22">frame_end</name> <init pos:start="11:24" pos:end="11:58">= <expr pos:start="11:26" pos:end="11:58"><name pos:start="11:26" pos:end="11:30">frame</name> <operator pos:start="11:32" pos:end="11:32">+</operator> <name pos:start="11:34" pos:end="11:44">SCREEN_WIDE</name> <operator pos:start="11:46" pos:end="11:46">*</operator> <name pos:start="11:48" pos:end="11:58">SCREEN_HIGH</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">dst</name></decl>, <decl pos:start="13:19" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">dst_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">len</name></decl>, <decl pos:start="15:14" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:17">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:66"><decl pos:start="17:5" pos:end="17:65"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">forward</name> <init pos:start="17:17" pos:end="17:65">= <expr pos:start="17:19" pos:end="17:65"><operator pos:start="17:19" pos:end="17:19">(</operator><name pos:start="17:20" pos:end="17:28">frame_off</name> <operator pos:start="17:30" pos:end="17:31">&lt;=</operator> <operator pos:start="17:33" pos:end="17:33">-</operator><name pos:start="17:34" pos:end="17:44">SCREEN_WIDE</name><operator pos:start="17:45" pos:end="17:45">)</operator> <operator pos:start="17:47" pos:end="17:48">||</operator> <operator pos:start="17:50" pos:end="17:50">(</operator><name pos:start="17:51" pos:end="17:59">frame_off</name> <operator pos:start="17:61" pos:end="17:62">&gt;=</operator> <literal type="number" pos:start="17:64" pos:end="17:64">0</literal><operator pos:start="17:65" pos:end="17:65">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:24">read_two_nibbles</name></decl>, <decl pos:start="19:27" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:27" pos:end="19:30">flag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">advance_mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">mode</name> <init pos:start="23:14" pos:end="23:16">= <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:35"><if pos:start="29:5" pos:end="31:35">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:15">src_len</name> <operator pos:start="29:17" pos:end="29:18">&lt;=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:35"><block_content pos:start="31:9" pos:end="31:35">

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="51:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">forward</name></expr>)</condition> <block pos:start="35:18" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:28">

        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:11">src</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:20">source</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:20"><expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:11">dst</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:19">frame</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:15">dst_end</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:27">frame_end</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="51:5">else <block pos:start="43:12" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:28">

        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:11">src</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:20">source</name> <operator pos:start="45:22" pos:end="45:22">+</operator> <name pos:start="45:24" pos:end="45:30">src_len</name> <operator pos:start="45:32" pos:end="45:32">-</operator> <literal type="number" pos:start="45:34" pos:end="45:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:28"><expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:11">dst</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:23">frame_end</name> <operator pos:start="47:25" pos:end="47:25">-</operator> <literal type="number" pos:start="47:27" pos:end="47:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:15">dst_end</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:23">frame</name> <operator pos:start="49:25" pos:end="49:25">-</operator> <literal type="number" pos:start="49:27" pos:end="49:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <for pos:start="53:5" pos:end="279:5">for <control pos:start="53:9" pos:end="53:12">(<init pos:start="53:10" pos:end="53:10">;</init><condition pos:start="53:11" pos:end="53:11">;</condition><incr/>)</control> <block pos:start="53:14" pos:end="279:5">{<block_content pos:start="55:9" pos:end="277:21">

        <decl_stmt pos:start="55:9" pos:end="55:22"><decl pos:start="55:9" pos:end="55:21"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:17">shift</name> <init pos:start="55:19" pos:end="55:21">= <expr pos:start="55:21" pos:end="55:21"><literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:17"><expr pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:12">flag</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="73:11">/* The mode/len decoding is a bit strange:

         * values are coded as variable-length codes with nibble units,

         * code end is signalled by two top bits in the nibble being nonzero.

         * And since data is bytepacked and we read two nibbles at a time,

         * we may get a nibble belonging to the next code.

         * Hence this convoluted loop.

         */</comment>

        <if_stmt pos:start="75:9" pos:end="91:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:35">(<expr pos:start="75:13" pos:end="75:34"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:17">mode</name> <operator pos:start="75:19" pos:end="75:20">||</operator> <operator pos:start="75:22" pos:end="75:22">(</operator><name pos:start="75:23" pos:end="75:28">tmplen</name> <operator pos:start="75:30" pos:end="75:31">==</operator> <literal type="number" pos:start="75:33" pos:end="75:33">4</literal><operator pos:start="75:34" pos:end="75:34">)</operator></expr>)</condition> <block pos:start="75:37" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:33">

            <if_stmt pos:start="77:13" pos:end="79:43"><if pos:start="77:13" pos:end="79:43">if <condition pos:start="77:16" pos:end="77:50">(<expr pos:start="77:17" pos:end="77:49"><name pos:start="77:17" pos:end="77:19">src</name> <operator pos:start="77:21" pos:end="77:21">&lt;</operator> <name pos:start="77:23" pos:end="77:28">source</name> <operator pos:start="77:30" pos:end="77:31">||</operator> <name pos:start="77:33" pos:end="77:35">src</name> <operator pos:start="77:37" pos:end="77:38">&gt;=</operator> <name pos:start="77:40" pos:end="77:49">source_end</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:43"><block_content pos:start="79:17" pos:end="79:43">

                <return pos:start="79:17" pos:end="79:43">return <expr pos:start="79:24" pos:end="79:42"><name pos:start="79:24" pos:end="79:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:23"><expr pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:15">val</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <operator pos:start="81:19" pos:end="81:19">*</operator><name pos:start="81:20" pos:end="81:22">src</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:28">read_two_nibbles</name> <operator pos:start="83:30" pos:end="83:30">=</operator> <literal type="number" pos:start="83:32" pos:end="83:32">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="91:9">else <block pos:start="85:16" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:33">

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:15">val</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:27">saved_val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:33"><expr pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:28">read_two_nibbles</name> <operator pos:start="89:30" pos:end="89:30">=</operator> <literal type="number" pos:start="89:32" pos:end="89:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="93:9" pos:end="145:9"><if pos:start="93:9" pos:end="141:9">if <condition pos:start="93:12" pos:end="93:25">(<expr pos:start="93:13" pos:end="93:24"><operator pos:start="93:13" pos:end="93:13">!</operator><operator pos:start="93:14" pos:end="93:14">(</operator><name pos:start="93:15" pos:end="93:17">val</name> <operator pos:start="93:19" pos:end="93:19">&amp;</operator> <literal type="number" pos:start="93:21" pos:end="93:23">0xC</literal><operator pos:start="93:24" pos:end="93:24">)</operator></expr>)</condition> <block pos:start="93:27" pos:end="141:9">{<block_content pos:start="95:13" pos:end="139:13">

            <for pos:start="95:13" pos:end="139:13">for <control pos:start="95:17" pos:end="95:20">(<init pos:start="95:18" pos:end="95:18">;</init><condition pos:start="95:19" pos:end="95:19">;</condition><incr/>)</control> <block pos:start="95:22" pos:end="139:13">{<block_content pos:start="97:17" pos:end="137:17">

                <if_stmt pos:start="97:17" pos:end="99:30"><if pos:start="97:17" pos:end="99:30">if<condition pos:start="97:19" pos:end="97:28">(<expr pos:start="97:20" pos:end="97:27"><name pos:start="97:20" pos:end="97:24">shift</name><operator pos:start="97:25" pos:end="97:25">&gt;</operator><literal type="number" pos:start="97:26" pos:end="97:27">22</literal></expr>)</condition><block type="pseudo" pos:start="99:21" pos:end="99:30"><block_content pos:start="99:21" pos:end="99:30">

                    <return pos:start="99:21" pos:end="99:30">return <expr pos:start="99:28" pos:end="99:29"><operator pos:start="99:28" pos:end="99:28">-</operator><literal type="number" pos:start="99:29" pos:end="99:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="101:17" pos:end="115:17"><if pos:start="101:17" pos:end="115:17">if <condition pos:start="101:20" pos:end="101:38">(<expr pos:start="101:21" pos:end="101:37"><operator pos:start="101:21" pos:end="101:21">!</operator><name pos:start="101:22" pos:end="101:37">read_two_nibbles</name></expr>)</condition> <block pos:start="101:40" pos:end="115:17">{<block_content pos:start="103:21" pos:end="113:30">

                    <if_stmt pos:start="103:21" pos:end="105:51"><if pos:start="103:21" pos:end="105:51">if <condition pos:start="103:24" pos:end="103:58">(<expr pos:start="103:25" pos:end="103:57"><name pos:start="103:25" pos:end="103:27">src</name> <operator pos:start="103:29" pos:end="103:29">&lt;</operator> <name pos:start="103:31" pos:end="103:36">source</name> <operator pos:start="103:38" pos:end="103:39">||</operator> <name pos:start="103:41" pos:end="103:43">src</name> <operator pos:start="103:45" pos:end="103:46">&gt;=</operator> <name pos:start="103:48" pos:end="103:57">source_end</name></expr>)</condition><block type="pseudo" pos:start="105:25" pos:end="105:51"><block_content pos:start="105:25" pos:end="105:51">

                        <return pos:start="105:25" pos:end="105:51">return <expr pos:start="105:32" pos:end="105:50"><name pos:start="105:32" pos:end="105:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:31"><expr pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:25">shift</name> <operator pos:start="107:27" pos:end="107:28">+=</operator> <literal type="number" pos:start="107:30" pos:end="107:30">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:41"><expr pos:start="109:21" pos:end="109:40"><name pos:start="109:21" pos:end="109:23">val</name> <operator pos:start="109:25" pos:end="109:26">|=</operator> <operator pos:start="109:28" pos:end="109:28">*</operator><name pos:start="109:29" pos:end="109:31">src</name> <operator pos:start="109:33" pos:end="109:34">&lt;&lt;</operator> <name pos:start="109:36" pos:end="109:40">shift</name></expr>;</expr_stmt>

                    <if_stmt pos:start="111:21" pos:end="113:30"><if pos:start="111:21" pos:end="113:30">if <condition pos:start="111:24" pos:end="111:35">(<expr pos:start="111:25" pos:end="111:34"><operator pos:start="111:25" pos:end="111:25">*</operator><name pos:start="111:26" pos:end="111:28">src</name> <operator pos:start="111:30" pos:end="111:30">&amp;</operator> <literal type="number" pos:start="111:32" pos:end="111:34">0xC</literal></expr>)</condition><block type="pseudo" pos:start="113:25" pos:end="113:30"><block_content pos:start="113:25" pos:end="113:30">

                        <break pos:start="113:25" pos:end="113:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="117:17" pos:end="117:56">// two upper bits of the nibble is zero,</comment>

                <comment type="line" pos:start="119:17" pos:end="119:66">// so shift top nibble value down into their place</comment>

                <expr_stmt pos:start="121:17" pos:end="121:37"><expr pos:start="121:17" pos:end="121:36"><name pos:start="121:17" pos:end="121:32">read_two_nibbles</name> <operator pos:start="121:34" pos:end="121:34">=</operator> <literal type="number" pos:start="121:36" pos:end="121:36">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:27"><expr pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:21">shift</name> <operator pos:start="123:23" pos:end="123:24">+=</operator> <literal type="number" pos:start="123:26" pos:end="123:26">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:40"><expr pos:start="125:17" pos:end="125:39"><name pos:start="125:17" pos:end="125:20">mask</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <operator pos:start="125:24" pos:end="125:24">(</operator><literal type="number" pos:start="125:25" pos:end="125:25">1</literal> <operator pos:start="125:27" pos:end="125:28">&lt;&lt;</operator> <name pos:start="125:30" pos:end="125:34">shift</name><operator pos:start="125:35" pos:end="125:35">)</operator> <operator pos:start="125:37" pos:end="125:37">-</operator> <literal type="number" pos:start="125:39" pos:end="125:39">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:58"><expr pos:start="127:17" pos:end="127:57"><name pos:start="127:17" pos:end="127:19">val</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <operator pos:start="127:23" pos:end="127:23">(</operator><operator pos:start="127:24" pos:end="127:24">(</operator><name pos:start="127:25" pos:end="127:27">val</name> <operator pos:start="127:29" pos:end="127:30">&gt;&gt;</operator> <literal type="number" pos:start="127:32" pos:end="127:32">2</literal><operator pos:start="127:33" pos:end="127:33">)</operator> <operator pos:start="127:35" pos:end="127:35">&amp;</operator> <operator pos:start="127:37" pos:end="127:37">~</operator><name pos:start="127:38" pos:end="127:41">mask</name><operator pos:start="127:42" pos:end="127:42">)</operator> <operator pos:start="127:44" pos:end="127:44">|</operator> <operator pos:start="127:46" pos:end="127:46">(</operator><name pos:start="127:47" pos:end="127:49">val</name> <operator pos:start="127:51" pos:end="127:51">&amp;</operator> <name pos:start="127:53" pos:end="127:56">mask</name><operator pos:start="127:57" pos:end="127:57">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:31"><expr pos:start="129:17" pos:end="129:30"><call pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:25">NEXT_BYTE</name><argument_list pos:start="129:26" pos:end="129:30">(<argument pos:start="129:27" pos:end="129:29"><expr pos:start="129:27" pos:end="129:29"><name pos:start="129:27" pos:end="129:29">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="131:17" pos:end="137:17"><if pos:start="131:17" pos:end="137:17">if <condition pos:start="131:20" pos:end="131:43">(<expr pos:start="131:21" pos:end="131:42"><operator pos:start="131:21" pos:end="131:21">(</operator><name pos:start="131:22" pos:end="131:24">val</name> <operator pos:start="131:26" pos:end="131:26">&amp;</operator> <operator pos:start="131:28" pos:end="131:28">(</operator><literal type="number" pos:start="131:29" pos:end="131:31">0xC</literal> <operator pos:start="131:33" pos:end="131:34">&lt;&lt;</operator> <name pos:start="131:36" pos:end="131:40">shift</name><operator pos:start="131:41" pos:end="131:41">)</operator><operator pos:start="131:42" pos:end="131:42">)</operator></expr>)</condition> <block pos:start="131:45" pos:end="137:17">{<block_content pos:start="133:21" pos:end="135:26">

                    <expr_stmt pos:start="133:21" pos:end="133:29"><expr pos:start="133:21" pos:end="133:28"><name pos:start="133:21" pos:end="133:24">flag</name> <operator pos:start="133:26" pos:end="133:26">=</operator> <literal type="number" pos:start="133:28" pos:end="133:28">1</literal></expr>;</expr_stmt>

                    <break pos:start="135:21" pos:end="135:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="145:9">else if <condition pos:start="141:19" pos:end="141:24">(<expr pos:start="141:20" pos:end="141:23"><name pos:start="141:20" pos:end="141:23">mode</name></expr>)</condition> <block pos:start="141:26" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:31">

            <expr_stmt pos:start="143:13" pos:end="143:31"><expr pos:start="143:13" pos:end="143:30"><name pos:start="143:13" pos:end="143:16">flag</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <name pos:start="143:20" pos:end="143:25">tmplen</name> <operator pos:start="143:27" pos:end="143:28">!=</operator> <literal type="number" pos:start="143:30" pos:end="143:30">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="147:9" pos:end="161:9"><if pos:start="147:9" pos:end="151:9">if <condition pos:start="147:12" pos:end="147:17">(<expr pos:start="147:13" pos:end="147:16"><name pos:start="147:13" pos:end="147:16">flag</name></expr>)</condition> <block pos:start="147:19" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:23">

            <expr_stmt pos:start="149:13" pos:end="149:23"><expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:18">tmplen</name> <operator pos:start="149:20" pos:end="149:20">=</operator> <literal type="number" pos:start="149:22" pos:end="149:22">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="151:11" pos:end="161:9">else <block pos:start="151:16" pos:end="161:9">{<block_content pos:start="153:13" pos:end="159:27">

            <expr_stmt pos:start="153:13" pos:end="153:43"><expr pos:start="153:13" pos:end="153:42"><name pos:start="153:13" pos:end="153:21">saved_val</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <name pos:start="153:25" pos:end="153:27">val</name> <operator pos:start="153:29" pos:end="153:30">&gt;&gt;</operator> <operator pos:start="153:32" pos:end="153:32">(</operator><literal type="number" pos:start="153:33" pos:end="153:35">4</literal> <operator pos:start="153:35" pos:end="153:35">+</operator> <name pos:start="153:37" pos:end="153:41">shift</name><operator pos:start="153:42" pos:end="153:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:23"><expr pos:start="155:13" pos:end="155:22"><name pos:start="155:13" pos:end="155:18">tmplen</name> <operator pos:start="155:20" pos:end="155:20">=</operator> <literal type="number" pos:start="155:22" pos:end="155:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:42"><expr pos:start="157:13" pos:end="157:41"><name pos:start="157:13" pos:end="157:15">val</name> <operator pos:start="157:17" pos:end="157:18">&amp;=</operator> <operator pos:start="157:20" pos:end="157:20">(</operator><literal type="number" pos:start="157:21" pos:end="157:21">1</literal> <operator pos:start="157:23" pos:end="157:24">&lt;&lt;</operator> <operator pos:start="157:26" pos:end="157:26">(</operator><name pos:start="157:27" pos:end="157:31">shift</name> <operator pos:start="157:33" pos:end="157:33">+</operator> <literal type="number" pos:start="157:35" pos:end="157:35">4</literal><operator pos:start="157:36" pos:end="157:36">)</operator><operator pos:start="157:37" pos:end="157:37">)</operator> <operator pos:start="157:39" pos:end="157:39">-</operator> <literal type="number" pos:start="157:41" pos:end="157:41">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:26"><call pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:21">NEXT_BYTE</name><argument_list pos:start="159:22" pos:end="159:26">(<argument pos:start="159:23" pos:end="159:25"><expr pos:start="159:23" pos:end="159:25"><name pos:start="159:23" pos:end="159:25">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:31"><expr pos:start="163:9" pos:end="163:30"><name pos:start="163:9" pos:end="163:20">advance_mode</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:26">val</name> <operator pos:start="163:28" pos:end="163:28">&amp;</operator> <literal type="number" pos:start="163:30" pos:end="163:30">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:29"><expr pos:start="165:9" pos:end="165:28"><name pos:start="165:9" pos:end="165:11">len</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <operator pos:start="165:15" pos:end="165:15">(</operator><name pos:start="165:16" pos:end="165:18">val</name> <operator pos:start="165:20" pos:end="165:21">&gt;&gt;</operator> <literal type="number" pos:start="165:23" pos:end="165:23">1</literal><operator pos:start="165:24" pos:end="165:24">)</operator> <operator pos:start="165:26" pos:end="165:26">-</operator> <literal type="number" pos:start="165:28" pos:end="165:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:26"><expr pos:start="167:9" pos:end="167:25"><call pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:18">av_assert0</name><argument_list pos:start="167:19" pos:end="167:25">(<argument pos:start="167:20" pos:end="167:24"><expr pos:start="167:20" pos:end="167:24"><name pos:start="167:20" pos:end="167:22">len</name><operator pos:start="167:23" pos:end="167:23">&gt;</operator><literal type="number" pos:start="167:24" pos:end="167:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:33"><expr pos:start="169:9" pos:end="169:32"><name pos:start="169:9" pos:end="169:12">mode</name> <operator pos:start="169:14" pos:end="169:15">+=</operator> <literal type="number" pos:start="169:17" pos:end="169:19">1</literal> <operator pos:start="169:19" pos:end="169:19">+</operator> <name pos:start="169:21" pos:end="169:32">advance_mode</name></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="173:22"><if pos:start="171:9" pos:end="173:22">if <condition pos:start="171:12" pos:end="171:22">(<expr pos:start="171:13" pos:end="171:21"><name pos:start="171:13" pos:end="171:16">mode</name> <operator pos:start="171:18" pos:end="171:19">&gt;=</operator> <literal type="number" pos:start="171:21" pos:end="171:21">4</literal></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:22"><block_content pos:start="173:13" pos:end="173:22">

            <expr_stmt pos:start="173:13" pos:end="173:22"><expr pos:start="173:13" pos:end="173:21"><name pos:start="173:13" pos:end="173:16">mode</name> <operator pos:start="173:18" pos:end="173:19">-=</operator> <literal type="number" pos:start="173:21" pos:end="173:21">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="175:9" pos:end="177:39"><if pos:start="175:9" pos:end="177:39">if <condition pos:start="175:12" pos:end="175:51">(<expr pos:start="175:13" pos:end="175:50"><name pos:start="175:13" pos:end="175:15">len</name> <operator pos:start="175:17" pos:end="175:18">&lt;=</operator> <literal type="number" pos:start="175:20" pos:end="175:20">0</literal> <operator pos:start="175:22" pos:end="175:23">||</operator> <call pos:start="175:25" pos:end="175:44"><name pos:start="175:25" pos:end="175:29">FFABS</name><argument_list pos:start="175:30" pos:end="175:44">(<argument pos:start="175:31" pos:end="175:43"><expr pos:start="175:31" pos:end="175:43"><name pos:start="175:31" pos:end="175:37">dst_end</name> <operator pos:start="175:39" pos:end="175:39">-</operator> <name pos:start="175:41" pos:end="175:43">dst</name></expr></argument>)</argument_list></call> <operator pos:start="175:46" pos:end="175:46">&lt;</operator> <name pos:start="175:48" pos:end="175:50">len</name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:39"><block_content pos:start="177:13" pos:end="177:39">

            <return pos:start="177:13" pos:end="177:39">return <expr pos:start="177:20" pos:end="177:38"><name pos:start="177:20" pos:end="177:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <switch pos:start="179:9" pos:end="273:9">switch <condition pos:start="179:16" pos:end="179:21">(<expr pos:start="179:17" pos:end="179:20"><name pos:start="179:17" pos:end="179:20">mode</name></expr>)</condition> <block pos:start="179:23" pos:end="273:9">{<block_content pos:start="181:9" pos:end="271:18">

        <case pos:start="181:9" pos:end="181:15">case <expr pos:start="181:14" pos:end="181:14"><literal type="number" pos:start="181:14" pos:end="181:14">1</literal></expr>:</case>

            <if_stmt pos:start="183:13" pos:end="219:13"><if pos:start="183:13" pos:end="201:13">if <condition pos:start="183:16" pos:end="183:24">(<expr pos:start="183:17" pos:end="183:23"><name pos:start="183:17" pos:end="183:23">forward</name></expr>)</condition> <block pos:start="183:26" pos:end="201:13">{<block_content pos:start="185:17" pos:end="199:27">

                <if_stmt pos:start="185:17" pos:end="193:47"><if pos:start="185:17" pos:end="193:47">if <condition pos:start="185:20" pos:end="191:46">(<expr pos:start="185:21" pos:end="191:45"><name pos:start="185:21" pos:end="185:23">dst</name> <operator pos:start="185:25" pos:end="185:25">-</operator> <name pos:start="185:27" pos:end="185:31">frame</name> <operator pos:start="185:33" pos:end="185:33">+</operator> <name pos:start="185:35" pos:end="185:45">SCREEN_WIDE</name> <operator pos:start="185:47" pos:end="185:47">&lt;</operator> <name pos:start="185:49" pos:end="185:57">frame_off</name> <operator pos:start="185:59" pos:end="185:60">||</operator>

                        <name pos:start="187:25" pos:end="187:27">dst</name> <operator pos:start="187:29" pos:end="187:29">-</operator> <name pos:start="187:31" pos:end="187:35">frame</name> <operator pos:start="187:37" pos:end="187:37">+</operator> <name pos:start="187:39" pos:end="187:49">SCREEN_WIDE</name> <operator pos:start="187:51" pos:end="187:51">+</operator> <name pos:start="187:53" pos:end="187:61">frame_off</name> <operator pos:start="187:63" pos:end="187:63">&lt;</operator> <literal type="number" pos:start="187:65" pos:end="187:65">0</literal> <operator pos:start="187:67" pos:end="187:68">||</operator>

                        <name pos:start="189:25" pos:end="189:33">frame_end</name> <operator pos:start="189:35" pos:end="189:35">-</operator> <name pos:start="189:37" pos:end="189:39">dst</name> <operator pos:start="189:41" pos:end="189:41">&lt;</operator> <name pos:start="189:43" pos:end="189:51">frame_off</name> <operator pos:start="189:53" pos:end="189:53">+</operator> <name pos:start="189:55" pos:end="189:57">len</name> <operator pos:start="189:59" pos:end="189:60">||</operator>

                        <name pos:start="191:25" pos:end="191:33">frame_end</name> <operator pos:start="191:35" pos:end="191:35">-</operator> <name pos:start="191:37" pos:end="191:39">dst</name> <operator pos:start="191:41" pos:end="191:41">&lt;</operator> <name pos:start="191:43" pos:end="191:45">len</name></expr>)</condition><block type="pseudo" pos:start="193:21" pos:end="193:47"><block_content pos:start="193:21" pos:end="193:47">

                    <return pos:start="193:21" pos:end="193:47">return <expr pos:start="193:28" pos:end="193:46"><name pos:start="193:28" pos:end="193:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <for pos:start="195:17" pos:end="197:48">for <control pos:start="195:21" pos:end="195:41">(<init pos:start="195:22" pos:end="195:27"><expr pos:start="195:22" pos:end="195:26"><name pos:start="195:22" pos:end="195:22">i</name> <operator pos:start="195:24" pos:end="195:24">=</operator> <literal type="number" pos:start="195:26" pos:end="195:26">0</literal></expr>;</init> <condition pos:start="195:29" pos:end="195:36"><expr pos:start="195:29" pos:end="195:35"><name pos:start="195:29" pos:end="195:29">i</name> <operator pos:start="195:31" pos:end="195:31">&lt;</operator> <name pos:start="195:33" pos:end="195:35">len</name></expr>;</condition> <incr pos:start="195:38" pos:end="195:40"><expr pos:start="195:38" pos:end="195:40"><name pos:start="195:38" pos:end="195:38">i</name><operator pos:start="195:39" pos:end="195:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="197:21" pos:end="197:48"><block_content pos:start="197:21" pos:end="197:48">

                    <expr_stmt pos:start="197:21" pos:end="197:48"><expr pos:start="197:21" pos:end="197:47"><name pos:start="197:21" pos:end="197:26"><name pos:start="197:21" pos:end="197:23">dst</name><index pos:start="197:24" pos:end="197:26">[<expr pos:start="197:25" pos:end="197:25"><name pos:start="197:25" pos:end="197:25">i</name></expr>]</index></name> <operator pos:start="197:28" pos:end="197:28">=</operator> <name pos:start="197:30" pos:end="197:47"><name pos:start="197:30" pos:end="197:32">dst</name><index pos:start="197:33" pos:end="197:47">[<expr pos:start="197:34" pos:end="197:46"><name pos:start="197:34" pos:end="197:42">frame_off</name> <operator pos:start="197:44" pos:end="197:44">+</operator> <name pos:start="197:46" pos:end="197:46">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="199:17" pos:end="199:27"><expr pos:start="199:17" pos:end="199:26"><name pos:start="199:17" pos:end="199:19">dst</name> <operator pos:start="199:21" pos:end="199:22">+=</operator> <name pos:start="199:24" pos:end="199:26">len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="201:15" pos:end="219:13">else <block pos:start="201:20" pos:end="219:13">{<block_content pos:start="203:17" pos:end="217:48">

                <expr_stmt pos:start="203:17" pos:end="203:27"><expr pos:start="203:17" pos:end="203:26"><name pos:start="203:17" pos:end="203:19">dst</name> <operator pos:start="203:21" pos:end="203:22">-=</operator> <name pos:start="203:24" pos:end="203:26">len</name></expr>;</expr_stmt>

                <if_stmt pos:start="205:17" pos:end="213:47"><if pos:start="205:17" pos:end="213:47">if <condition pos:start="205:20" pos:end="211:46">(<expr pos:start="205:21" pos:end="211:45"><name pos:start="205:21" pos:end="205:23">dst</name> <operator pos:start="205:25" pos:end="205:25">-</operator> <name pos:start="205:27" pos:end="205:31">frame</name> <operator pos:start="205:33" pos:end="205:33">+</operator> <name pos:start="205:35" pos:end="205:45">SCREEN_WIDE</name> <operator pos:start="205:47" pos:end="205:47">&lt;</operator> <name pos:start="205:49" pos:end="205:57">frame_off</name> <operator pos:start="205:59" pos:end="205:60">||</operator>

                        <name pos:start="207:25" pos:end="207:27">dst</name> <operator pos:start="207:29" pos:end="207:29">-</operator> <name pos:start="207:31" pos:end="207:35">frame</name> <operator pos:start="207:37" pos:end="207:37">+</operator> <name pos:start="207:39" pos:end="207:49">SCREEN_WIDE</name> <operator pos:start="207:51" pos:end="207:51">+</operator> <name pos:start="207:53" pos:end="207:61">frame_off</name> <operator pos:start="207:63" pos:end="207:63">&lt;</operator> <literal type="number" pos:start="207:65" pos:end="207:65">0</literal> <operator pos:start="207:67" pos:end="207:68">||</operator>

                        <name pos:start="209:25" pos:end="209:33">frame_end</name> <operator pos:start="209:35" pos:end="209:35">-</operator> <name pos:start="209:37" pos:end="209:39">dst</name> <operator pos:start="209:41" pos:end="209:41">&lt;</operator> <name pos:start="209:43" pos:end="209:51">frame_off</name> <operator pos:start="209:53" pos:end="209:53">+</operator> <name pos:start="209:55" pos:end="209:57">len</name> <operator pos:start="209:59" pos:end="209:60">||</operator>

                        <name pos:start="211:25" pos:end="211:33">frame_end</name> <operator pos:start="211:35" pos:end="211:35">-</operator> <name pos:start="211:37" pos:end="211:39">dst</name> <operator pos:start="211:41" pos:end="211:41">&lt;</operator> <name pos:start="211:43" pos:end="211:45">len</name></expr>)</condition><block type="pseudo" pos:start="213:21" pos:end="213:47"><block_content pos:start="213:21" pos:end="213:47">

                    <return pos:start="213:21" pos:end="213:47">return <expr pos:start="213:28" pos:end="213:46"><name pos:start="213:28" pos:end="213:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <for pos:start="215:17" pos:end="217:48">for <control pos:start="215:21" pos:end="215:46">(<init pos:start="215:22" pos:end="215:33"><expr pos:start="215:22" pos:end="215:32"><name pos:start="215:22" pos:end="215:22">i</name> <operator pos:start="215:24" pos:end="215:24">=</operator> <name pos:start="215:26" pos:end="215:28">len</name> <operator pos:start="215:30" pos:end="215:30">-</operator> <literal type="number" pos:start="215:32" pos:end="215:32">1</literal></expr>;</init> <condition pos:start="215:35" pos:end="215:41"><expr pos:start="215:35" pos:end="215:40"><name pos:start="215:35" pos:end="215:35">i</name> <operator pos:start="215:37" pos:end="215:38">&gt;=</operator> <literal type="number" pos:start="215:40" pos:end="215:40">0</literal></expr>;</condition> <incr pos:start="215:43" pos:end="215:45"><expr pos:start="215:43" pos:end="215:45"><name pos:start="215:43" pos:end="215:43">i</name><operator pos:start="215:44" pos:end="215:45">--</operator></expr></incr>)</control><block type="pseudo" pos:start="217:21" pos:end="217:48"><block_content pos:start="217:21" pos:end="217:48">

                    <expr_stmt pos:start="217:21" pos:end="217:48"><expr pos:start="217:21" pos:end="217:47"><name pos:start="217:21" pos:end="217:26"><name pos:start="217:21" pos:end="217:23">dst</name><index pos:start="217:24" pos:end="217:26">[<expr pos:start="217:25" pos:end="217:25"><name pos:start="217:25" pos:end="217:25">i</name></expr>]</index></name> <operator pos:start="217:28" pos:end="217:28">=</operator> <name pos:start="217:30" pos:end="217:47"><name pos:start="217:30" pos:end="217:32">dst</name><index pos:start="217:33" pos:end="217:47">[<expr pos:start="217:34" pos:end="217:46"><name pos:start="217:34" pos:end="217:42">frame_off</name> <operator pos:start="217:44" pos:end="217:44">+</operator> <name pos:start="217:46" pos:end="217:46">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="221:13" pos:end="221:18">break;</break>

        <case pos:start="223:9" pos:end="223:15">case <expr pos:start="223:14" pos:end="223:14"><literal type="number" pos:start="223:14" pos:end="223:14">2</literal></expr>:</case>

            <if_stmt pos:start="225:13" pos:end="249:13"><if pos:start="225:13" pos:end="237:13">if <condition pos:start="225:16" pos:end="225:24">(<expr pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:23">forward</name></expr>)</condition> <block pos:start="225:26" pos:end="237:13">{<block_content pos:start="227:17" pos:end="235:27">

                <if_stmt pos:start="227:17" pos:end="229:47"><if pos:start="227:17" pos:end="229:47">if <condition pos:start="227:20" pos:end="227:49">(<expr pos:start="227:21" pos:end="227:48"><name pos:start="227:21" pos:end="227:26">source</name> <operator pos:start="227:28" pos:end="227:28">+</operator> <name pos:start="227:30" pos:end="227:36">src_len</name> <operator pos:start="227:38" pos:end="227:38">-</operator> <name pos:start="227:40" pos:end="227:42">src</name> <operator pos:start="227:44" pos:end="227:44">&lt;</operator> <name pos:start="227:46" pos:end="227:48">len</name></expr>)</condition><block type="pseudo" pos:start="229:21" pos:end="229:47"><block_content pos:start="229:21" pos:end="229:47">

                    <return pos:start="229:21" pos:end="229:47">return <expr pos:start="229:28" pos:end="229:46"><name pos:start="229:28" pos:end="229:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:38"><expr pos:start="231:17" pos:end="231:37"><call pos:start="231:17" pos:end="231:37"><name pos:start="231:17" pos:end="231:22">memcpy</name><argument_list pos:start="231:23" pos:end="231:37">(<argument pos:start="231:24" pos:end="231:26"><expr pos:start="231:24" pos:end="231:26"><name pos:start="231:24" pos:end="231:26">dst</name></expr></argument>, <argument pos:start="231:29" pos:end="231:31"><expr pos:start="231:29" pos:end="231:31"><name pos:start="231:29" pos:end="231:31">src</name></expr></argument>, <argument pos:start="231:34" pos:end="231:36"><expr pos:start="231:34" pos:end="231:36"><name pos:start="231:34" pos:end="231:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:27"><expr pos:start="233:17" pos:end="233:26"><name pos:start="233:17" pos:end="233:19">dst</name> <operator pos:start="233:21" pos:end="233:22">+=</operator> <name pos:start="233:24" pos:end="233:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:27"><expr pos:start="235:17" pos:end="235:26"><name pos:start="235:17" pos:end="235:19">src</name> <operator pos:start="235:21" pos:end="235:22">+=</operator> <name pos:start="235:24" pos:end="235:26">len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="237:15" pos:end="249:13">else <block pos:start="237:20" pos:end="249:13">{<block_content pos:start="239:17" pos:end="247:38">

                <if_stmt pos:start="239:17" pos:end="241:47"><if pos:start="239:17" pos:end="241:47">if <condition pos:start="239:20" pos:end="239:39">(<expr pos:start="239:21" pos:end="239:38"><name pos:start="239:21" pos:end="239:23">src</name> <operator pos:start="239:25" pos:end="239:25">-</operator> <name pos:start="239:27" pos:end="239:32">source</name> <operator pos:start="239:34" pos:end="239:34">&lt;</operator> <name pos:start="239:36" pos:end="239:38">len</name></expr>)</condition><block type="pseudo" pos:start="241:21" pos:end="241:47"><block_content pos:start="241:21" pos:end="241:47">

                    <return pos:start="241:21" pos:end="241:47">return <expr pos:start="241:28" pos:end="241:46"><name pos:start="241:28" pos:end="241:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:27"><expr pos:start="243:17" pos:end="243:26"><name pos:start="243:17" pos:end="243:19">dst</name> <operator pos:start="243:21" pos:end="243:22">-=</operator> <name pos:start="243:24" pos:end="243:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:27"><expr pos:start="245:17" pos:end="245:26"><name pos:start="245:17" pos:end="245:19">src</name> <operator pos:start="245:21" pos:end="245:22">-=</operator> <name pos:start="245:24" pos:end="245:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:38"><expr pos:start="247:17" pos:end="247:37"><call pos:start="247:17" pos:end="247:37"><name pos:start="247:17" pos:end="247:22">memcpy</name><argument_list pos:start="247:23" pos:end="247:37">(<argument pos:start="247:24" pos:end="247:26"><expr pos:start="247:24" pos:end="247:26"><name pos:start="247:24" pos:end="247:26">dst</name></expr></argument>, <argument pos:start="247:29" pos:end="247:31"><expr pos:start="247:29" pos:end="247:31"><name pos:start="247:29" pos:end="247:31">src</name></expr></argument>, <argument pos:start="247:34" pos:end="247:36"><expr pos:start="247:34" pos:end="247:36"><name pos:start="247:34" pos:end="247:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        <case pos:start="253:9" pos:end="253:15">case <expr pos:start="253:14" pos:end="253:14"><literal type="number" pos:start="253:14" pos:end="253:14">3</literal></expr>:</case>

            <expr_stmt pos:start="255:13" pos:end="255:45"><expr pos:start="255:13" pos:end="255:44"><name pos:start="255:13" pos:end="255:15">val</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <ternary pos:start="255:19" pos:end="255:44"><condition pos:start="255:19" pos:end="255:27"><expr pos:start="255:19" pos:end="255:25"><name pos:start="255:19" pos:end="255:25">forward</name></expr> ?</condition><then pos:start="255:29" pos:end="255:35"> <expr pos:start="255:29" pos:end="255:35"><name pos:start="255:29" pos:end="255:35"><name pos:start="255:29" pos:end="255:31">dst</name><index pos:start="255:32" pos:end="255:35">[<expr pos:start="255:33" pos:end="255:34"><operator pos:start="255:33" pos:end="255:33">-</operator><literal type="number" pos:start="255:34" pos:end="255:34">1</literal></expr>]</index></name></expr> </then><else pos:start="255:37" pos:end="255:44">: <expr pos:start="255:39" pos:end="255:44"><name pos:start="255:39" pos:end="255:44"><name pos:start="255:39" pos:end="255:41">dst</name><index pos:start="255:42" pos:end="255:44">[<expr pos:start="255:43" pos:end="255:43"><literal type="number" pos:start="255:43" pos:end="255:43">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="257:13" pos:end="269:13"><if pos:start="257:13" pos:end="263:13">if <condition pos:start="257:16" pos:end="257:24">(<expr pos:start="257:17" pos:end="257:23"><name pos:start="257:17" pos:end="257:23">forward</name></expr>)</condition> <block pos:start="257:26" pos:end="263:13">{<block_content pos:start="259:17" pos:end="261:27">

                <expr_stmt pos:start="259:17" pos:end="259:38"><expr pos:start="259:17" pos:end="259:37"><call pos:start="259:17" pos:end="259:37"><name pos:start="259:17" pos:end="259:22">memset</name><argument_list pos:start="259:23" pos:end="259:37">(<argument pos:start="259:24" pos:end="259:26"><expr pos:start="259:24" pos:end="259:26"><name pos:start="259:24" pos:end="259:26">dst</name></expr></argument>, <argument pos:start="259:29" pos:end="259:31"><expr pos:start="259:29" pos:end="259:31"><name pos:start="259:29" pos:end="259:31">val</name></expr></argument>, <argument pos:start="259:34" pos:end="259:36"><expr pos:start="259:34" pos:end="259:36"><name pos:start="259:34" pos:end="259:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:27"><expr pos:start="261:17" pos:end="261:26"><name pos:start="261:17" pos:end="261:19">dst</name> <operator pos:start="261:21" pos:end="261:22">+=</operator> <name pos:start="261:24" pos:end="261:26">len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="263:15" pos:end="269:13">else <block pos:start="263:20" pos:end="269:13">{<block_content pos:start="265:17" pos:end="267:38">

                <expr_stmt pos:start="265:17" pos:end="265:27"><expr pos:start="265:17" pos:end="265:26"><name pos:start="265:17" pos:end="265:19">dst</name> <operator pos:start="265:21" pos:end="265:22">-=</operator> <name pos:start="265:24" pos:end="265:26">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:38"><expr pos:start="267:17" pos:end="267:37"><call pos:start="267:17" pos:end="267:37"><name pos:start="267:17" pos:end="267:22">memset</name><argument_list pos:start="267:23" pos:end="267:37">(<argument pos:start="267:24" pos:end="267:26"><expr pos:start="267:24" pos:end="267:26"><name pos:start="267:24" pos:end="267:26">dst</name></expr></argument>, <argument pos:start="267:29" pos:end="267:31"><expr pos:start="267:29" pos:end="267:31"><name pos:start="267:29" pos:end="267:31">val</name></expr></argument>, <argument pos:start="267:34" pos:end="267:36"><expr pos:start="267:34" pos:end="267:36"><name pos:start="267:34" pos:end="267:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="275:9" pos:end="277:21"><if pos:start="275:9" pos:end="277:21">if <condition pos:start="275:12" pos:end="275:27">(<expr pos:start="275:13" pos:end="275:26"><name pos:start="275:13" pos:end="275:15">dst</name> <operator pos:start="275:17" pos:end="275:18">==</operator> <name pos:start="275:20" pos:end="275:26">dst_end</name></expr>)</condition><block type="pseudo" pos:start="277:13" pos:end="277:21"><block_content pos:start="277:13" pos:end="277:21">

            <return pos:start="277:13" pos:end="277:21">return <expr pos:start="277:20" pos:end="277:20"><literal type="number" pos:start="277:20" pos:end="277:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
