<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24560.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:21">gunzip</name><parameter_list pos:start="1:22" pos:end="3:36">(<parameter pos:start="1:23" pos:end="1:31"><decl pos:start="1:23" pos:end="1:31"><type pos:start="1:23" pos:end="1:31"><name pos:start="1:23" pos:end="1:26">void</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">dst</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:39">size_t</name></type> <name pos:start="1:41" pos:end="1:46">dstlen</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:55">uint8_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">src</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:28">size_t</name></type> <name pos:start="3:30" pos:end="3:35">srclen</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:20">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">z_stream</name></type> <name pos:start="7:14" pos:end="7:14">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:20">dstbytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">r</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">i</name></decl>, <decl pos:start="11:15" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:19">flags</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:21">/* skip header */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:11"><expr pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:5">i</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <literal type="number" pos:start="17:9" pos:end="17:10">10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:19"><expr pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:9">flags</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:15">src</name><index pos:start="19:16" pos:end="19:18">[<expr pos:start="19:17" pos:end="19:17"><literal type="number" pos:start="19:17" pos:end="19:17">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:54">(<expr pos:start="21:9" pos:end="21:53"><name pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:11">src</name><index pos:start="21:12" pos:end="21:14">[<expr pos:start="21:13" pos:end="21:13"><literal type="number" pos:start="21:13" pos:end="21:13">2</literal></expr>]</index></name> <operator pos:start="21:16" pos:end="21:17">!=</operator> <name pos:start="21:19" pos:end="21:26">DEFLATED</name> <operator pos:start="21:28" pos:end="21:29">||</operator> <operator pos:start="21:31" pos:end="21:31">(</operator><name pos:start="21:32" pos:end="21:36">flags</name> <operator pos:start="21:38" pos:end="21:38">&amp;</operator> <name pos:start="21:40" pos:end="21:47">RESERVED</name><operator pos:start="21:48" pos:end="21:48">)</operator> <operator pos:start="21:50" pos:end="21:51">!=</operator> <literal type="number" pos:start="21:53" pos:end="21:53">0</literal></expr>)</condition> <block pos:start="21:56" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:43"><expr pos:start="23:9" pos:end="23:42"><call pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:12">puts</name> <argument_list pos:start="23:14" pos:end="23:42">(<argument pos:start="23:15" pos:end="23:41"><expr pos:start="23:15" pos:end="23:41"><literal type="string" pos:start="23:15" pos:end="23:41">"Error: Bad gzipped data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="31:42"><if pos:start="29:5" pos:end="31:42">if <condition pos:start="29:8" pos:end="29:35">(<expr pos:start="29:9" pos:end="29:34"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:14">flags</name> <operator pos:start="29:16" pos:end="29:16">&amp;</operator> <name pos:start="29:18" pos:end="29:28">EXTRA_FIELD</name><operator pos:start="29:29" pos:end="29:29">)</operator> <operator pos:start="29:31" pos:end="29:32">!=</operator> <literal type="number" pos:start="29:34" pos:end="29:34">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:42"><block_content pos:start="31:9" pos:end="31:42">

        <expr_stmt pos:start="31:9" pos:end="31:42"><expr pos:start="31:9" pos:end="31:41"><name pos:start="31:9" pos:end="31:9">i</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:16">12</literal> <operator pos:start="31:16" pos:end="31:16">+</operator> <name pos:start="31:18" pos:end="31:24"><name pos:start="31:18" pos:end="31:20">src</name><index pos:start="31:21" pos:end="31:24">[<expr pos:start="31:22" pos:end="31:23"><literal type="number" pos:start="31:22" pos:end="31:23">10</literal></expr>]</index></name> <operator pos:start="31:26" pos:end="31:26">+</operator> <operator pos:start="31:28" pos:end="31:28">(</operator><name pos:start="31:29" pos:end="31:35"><name pos:start="31:29" pos:end="31:31">src</name><index pos:start="31:32" pos:end="31:35">[<expr pos:start="31:33" pos:end="31:34"><literal type="number" pos:start="31:33" pos:end="31:34">11</literal></expr>]</index></name> <operator pos:start="31:37" pos:end="31:38">&lt;&lt;</operator> <literal type="number" pos:start="31:40" pos:end="31:40">8</literal><operator pos:start="31:41" pos:end="31:41">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:13"><if pos:start="33:5" pos:end="37:13">if <condition pos:start="33:8" pos:end="33:33">(<expr pos:start="33:9" pos:end="33:32"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:14">flags</name> <operator pos:start="33:16" pos:end="33:16">&amp;</operator> <name pos:start="33:18" pos:end="33:26">ORIG_NAME</name><operator pos:start="33:27" pos:end="33:27">)</operator> <operator pos:start="33:29" pos:end="33:30">!=</operator> <literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="37:13"><block_content pos:start="35:9" pos:end="37:13">

        <while pos:start="35:9" pos:end="37:13">while <condition pos:start="35:15" pos:end="35:29">(<expr pos:start="35:16" pos:end="35:28"><name pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:18">src</name><index pos:start="35:19" pos:end="35:23">[<expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:20">i</name><operator pos:start="35:21" pos:end="35:22">++</operator></expr>]</index></name> <operator pos:start="35:25" pos:end="35:26">!=</operator> <literal type="number" pos:start="35:28" pos:end="35:28">0</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:13"><block_content pos:start="37:13" pos:end="37:13">

            <empty_stmt pos:start="37:13" pos:end="37:13">;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="43:13"><if pos:start="39:5" pos:end="43:13">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:14">flags</name> <operator pos:start="39:16" pos:end="39:16">&amp;</operator> <name pos:start="39:18" pos:end="39:24">COMMENT</name><operator pos:start="39:25" pos:end="39:25">)</operator> <operator pos:start="39:27" pos:end="39:28">!=</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="43:13"><block_content pos:start="41:9" pos:end="43:13">

        <while pos:start="41:9" pos:end="43:13">while <condition pos:start="41:15" pos:end="41:29">(<expr pos:start="41:16" pos:end="41:28"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:18">src</name><index pos:start="41:19" pos:end="41:23">[<expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:20">i</name><operator pos:start="41:21" pos:end="41:22">++</operator></expr>]</index></name> <operator pos:start="41:25" pos:end="41:26">!=</operator> <literal type="number" pos:start="41:28" pos:end="41:28">0</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:13"><block_content pos:start="43:13" pos:end="43:13">

            <empty_stmt pos:start="43:13" pos:end="43:13">;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="47:15"><if pos:start="45:5" pos:end="47:15">if <condition pos:start="45:8" pos:end="45:32">(<expr pos:start="45:9" pos:end="45:31"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:14">flags</name> <operator pos:start="45:16" pos:end="45:16">&amp;</operator> <name pos:start="45:18" pos:end="45:25">HEAD_CRC</name><operator pos:start="45:26" pos:end="45:26">)</operator> <operator pos:start="45:28" pos:end="45:29">!=</operator> <literal type="number" pos:start="45:31" pos:end="45:31">0</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:15"><block_content pos:start="47:9" pos:end="47:15">

        <expr_stmt pos:start="47:9" pos:end="47:15"><expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:9">i</name> <operator pos:start="47:11" pos:end="47:12">+=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:20">(<expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:9">i</name> <operator pos:start="49:11" pos:end="49:12">&gt;=</operator> <name pos:start="49:14" pos:end="49:19">srclen</name></expr>)</condition> <block pos:start="49:22" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:55"><expr pos:start="51:9" pos:end="51:54"><call pos:start="51:9" pos:end="51:54"><name pos:start="51:9" pos:end="51:12">puts</name> <argument_list pos:start="51:14" pos:end="51:54">(<argument pos:start="51:15" pos:end="51:53"><expr pos:start="51:15" pos:end="51:53"><literal type="string" pos:start="51:15" pos:end="51:53">"Error: gunzip out of data in header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:22"><expr pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:6">.</operator><name pos:start="59:7" pos:end="59:12">zalloc</name></name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:21">zalloc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:20"><expr pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:11"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:6">.</operator><name pos:start="61:7" pos:end="61:11">zfree</name></name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:19">zfree</name></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:37"><expr pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:5">r</name> <operator pos:start="65:7" pos:end="65:7">=</operator> <call pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:20">inflateInit2</name><argument_list pos:start="65:21" pos:end="65:36">(<argument pos:start="65:22" pos:end="65:23"><expr pos:start="65:22" pos:end="65:23"><operator pos:start="65:22" pos:end="65:22">&amp;</operator><name pos:start="65:23" pos:end="65:23">s</name></expr></argument>, <argument pos:start="65:26" pos:end="65:35"><expr pos:start="65:26" pos:end="65:35"><operator pos:start="65:26" pos:end="65:26">-</operator><name pos:start="65:27" pos:end="65:35">MAX_WBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:9">r</name> <operator pos:start="67:11" pos:end="67:12">!=</operator> <name pos:start="67:14" pos:end="67:17">Z_OK</name></expr>)</condition> <block pos:start="67:20" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:20">

        <expr_stmt pos:start="69:9" pos:end="69:58"><expr pos:start="69:9" pos:end="69:57"><call pos:start="69:9" pos:end="69:57"><name pos:start="69:9" pos:end="69:14">printf</name> <argument_list pos:start="69:16" pos:end="69:57">(<argument pos:start="69:17" pos:end="69:53"><expr pos:start="69:17" pos:end="69:53"><literal type="string" pos:start="69:17" pos:end="69:53">"Error: inflateInit2() returned %d\n"</literal></expr></argument>, <argument pos:start="69:56" pos:end="69:56"><expr pos:start="69:56" pos:end="69:56"><name pos:start="69:56" pos:end="69:56">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:20">return <expr pos:start="71:16" pos:end="71:19"><operator pos:start="71:16" pos:end="71:16">(</operator><operator pos:start="71:17" pos:end="71:17">-</operator><literal type="number" pos:start="71:18" pos:end="71:18">1</literal><operator pos:start="71:19" pos:end="71:19">)</operator></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:13"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:6">.</operator><name pos:start="75:7" pos:end="75:13">next_in</name></name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:19">src</name> <operator pos:start="75:21" pos:end="75:21">+</operator> <name pos:start="75:23" pos:end="75:23">i</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:28"><expr pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:14"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:6">.</operator><name pos:start="77:7" pos:end="77:14">avail_in</name></name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:23">srclen</name> <operator pos:start="77:25" pos:end="77:25">-</operator> <name pos:start="77:27" pos:end="77:27">i</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:21"><expr pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:14"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:6">.</operator><name pos:start="79:7" pos:end="79:14">next_out</name></name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:20">dst</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:25"><expr pos:start="81:5" pos:end="81:24"><name pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:6">.</operator><name pos:start="81:7" pos:end="81:15">avail_out</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:24">dstlen</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:30"><expr pos:start="83:5" pos:end="83:29"><name pos:start="83:5" pos:end="83:5">r</name> <operator pos:start="83:7" pos:end="83:7">=</operator> <call pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:15">inflate</name><argument_list pos:start="83:16" pos:end="83:29">(<argument pos:start="83:17" pos:end="83:18"><expr pos:start="83:17" pos:end="83:18"><operator pos:start="83:17" pos:end="83:17">&amp;</operator><name pos:start="83:18" pos:end="83:18">s</name></expr></argument>, <argument pos:start="83:21" pos:end="83:28"><expr pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:28">Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:39">(<expr pos:start="85:9" pos:end="85:38"><name pos:start="85:9" pos:end="85:9">r</name> <operator pos:start="85:11" pos:end="85:12">!=</operator> <name pos:start="85:14" pos:end="85:17">Z_OK</name> <operator pos:start="85:19" pos:end="85:20">&amp;&amp;</operator> <name pos:start="85:22" pos:end="85:22">r</name> <operator pos:start="85:24" pos:end="85:25">!=</operator> <name pos:start="85:27" pos:end="85:38">Z_STREAM_END</name></expr>)</condition> <block pos:start="85:41" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:18">

        <expr_stmt pos:start="87:9" pos:end="87:53"><expr pos:start="87:9" pos:end="87:52"><call pos:start="87:9" pos:end="87:52"><name pos:start="87:9" pos:end="87:14">printf</name> <argument_list pos:start="87:16" pos:end="87:52">(<argument pos:start="87:17" pos:end="87:48"><expr pos:start="87:17" pos:end="87:48"><literal type="string" pos:start="87:17" pos:end="87:48">"Error: inflate() returned %d\n"</literal></expr></argument>, <argument pos:start="87:51" pos:end="87:51"><expr pos:start="87:51" pos:end="87:51"><name pos:start="87:51" pos:end="87:51">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:18">return <expr pos:start="89:16" pos:end="89:17"><operator pos:start="89:16" pos:end="89:16">-</operator><literal type="number" pos:start="89:17" pos:end="89:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:50"><expr pos:start="93:5" pos:end="93:49"><name pos:start="93:5" pos:end="93:12">dstbytes</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <name pos:start="93:16" pos:end="93:25"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:17">.</operator><name pos:start="93:18" pos:end="93:25">next_out</name></name> <operator pos:start="93:27" pos:end="93:27">-</operator> <operator pos:start="93:29" pos:end="93:29">(</operator><name pos:start="93:30" pos:end="93:37">unsigned</name> <name pos:start="93:39" pos:end="93:42">char</name> <operator pos:start="93:44" pos:end="93:44">*</operator><operator pos:start="93:45" pos:end="93:45">)</operator> <name pos:start="93:47" pos:end="93:49">dst</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><call pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:14">inflateEnd</name><argument_list pos:start="95:15" pos:end="95:18">(<argument pos:start="95:16" pos:end="95:17"><expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">&amp;</operator><name pos:start="95:17" pos:end="95:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="99:5" pos:end="99:20">return <expr pos:start="99:12" pos:end="99:19"><name pos:start="99:12" pos:end="99:19">dstbytes</name></expr>;</return>

</block_content>}</block></function>
</unit>
