<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11989.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">host_x86_cpu_class_init</name><parameter_list pos:start="1:36" pos:end="1:64">(<parameter pos:start="1:37" pos:end="1:51"><decl pos:start="1:37" pos:end="1:51"><type pos:start="1:37" pos:end="1:51"><name pos:start="1:37" pos:end="1:47">ObjectClass</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">oc</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="51:40">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DeviceClass</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">dc</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><call pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:34">DEVICE_CLASS</name><argument_list pos:start="5:35" pos:end="5:38">(<argument pos:start="5:36" pos:end="5:37"><expr pos:start="5:36" pos:end="5:37"><name pos:start="5:36" pos:end="5:37">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">X86CPUClass</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">xcc</name> <init pos:start="7:22" pos:end="7:40">= <expr pos:start="7:24" pos:end="7:40"><call pos:start="7:24" pos:end="7:40"><name pos:start="7:24" pos:end="7:36">X86_CPU_CLASS</name><argument_list pos:start="7:37" pos:end="7:40">(<argument pos:start="7:38" pos:end="7:39"><expr pos:start="7:38" pos:end="7:39"><name pos:start="7:38" pos:end="7:39">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">eax</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>, <decl pos:start="9:23" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:23" pos:end="9:25">ebx</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>, <decl pos:start="9:32" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:32" pos:end="9:34">ecx</name> <init pos:start="9:36" pos:end="9:38">= <expr pos:start="9:38" pos:end="9:38"><literal type="number" pos:start="9:38" pos:end="9:38">0</literal></expr></init></decl>, <decl pos:start="9:41" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:41" pos:end="9:43">edx</name> <init pos:start="9:45" pos:end="9:47">= <expr pos:start="9:47" pos:end="9:47"><literal type="number" pos:start="9:47" pos:end="9:47">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:7">xcc</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:21">kvm_required</name></name> <operator pos:start="13:23" pos:end="13:23">=</operator> <name pos:start="13:25" pos:end="13:28">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:47"><expr pos:start="17:5" pos:end="17:46"><call pos:start="17:5" pos:end="17:46"><name pos:start="17:5" pos:end="17:14">host_cpuid</name><argument_list pos:start="17:15" pos:end="17:46">(<argument pos:start="17:16" pos:end="17:18"><expr pos:start="17:16" pos:end="17:18"><literal type="number" pos:start="17:16" pos:end="17:18">0x0</literal></expr></argument>, <argument pos:start="17:21" pos:end="17:21"><expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></argument>, <argument pos:start="17:24" pos:end="17:27"><expr pos:start="17:24" pos:end="17:27"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:27">eax</name></expr></argument>, <argument pos:start="17:30" pos:end="17:33"><expr pos:start="17:30" pos:end="17:33"><operator pos:start="17:30" pos:end="17:30">&amp;</operator><name pos:start="17:31" pos:end="17:33">ebx</name></expr></argument>, <argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><operator pos:start="17:36" pos:end="17:36">&amp;</operator><name pos:start="17:37" pos:end="17:39">ecx</name></expr></argument>, <argument pos:start="17:42" pos:end="17:45"><expr pos:start="17:42" pos:end="17:45"><operator pos:start="17:42" pos:end="17:42">&amp;</operator><name pos:start="17:43" pos:end="17:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:64"><expr pos:start="19:5" pos:end="19:63"><call pos:start="19:5" pos:end="19:63"><name pos:start="19:5" pos:end="19:28">x86_cpu_vendor_words2str</name><argument_list pos:start="19:29" pos:end="19:63">(<argument pos:start="19:30" pos:end="19:47"><expr pos:start="19:30" pos:end="19:47"><name pos:start="19:30" pos:end="19:47"><name pos:start="19:30" pos:end="19:40">host_cpudef</name><operator pos:start="19:41" pos:end="19:41">.</operator><name pos:start="19:42" pos:end="19:47">vendor</name></name></expr></argument>, <argument pos:start="19:50" pos:end="19:52"><expr pos:start="19:50" pos:end="19:52"><name pos:start="19:50" pos:end="19:52">ebx</name></expr></argument>, <argument pos:start="19:55" pos:end="19:57"><expr pos:start="19:55" pos:end="19:57"><name pos:start="19:55" pos:end="19:57">edx</name></expr></argument>, <argument pos:start="19:60" pos:end="19:62"><expr pos:start="19:60" pos:end="19:62"><name pos:start="19:60" pos:end="19:62">ecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><call pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:14">host_cpuid</name><argument_list pos:start="23:15" pos:end="23:46">(<argument pos:start="23:16" pos:end="23:18"><expr pos:start="23:16" pos:end="23:18"><literal type="number" pos:start="23:16" pos:end="23:18">0x1</literal></expr></argument>, <argument pos:start="23:21" pos:end="23:21"><expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr></argument>, <argument pos:start="23:24" pos:end="23:27"><expr pos:start="23:24" pos:end="23:27"><operator pos:start="23:24" pos:end="23:24">&amp;</operator><name pos:start="23:25" pos:end="23:27">eax</name></expr></argument>, <argument pos:start="23:30" pos:end="23:33"><expr pos:start="23:30" pos:end="23:33"><operator pos:start="23:30" pos:end="23:30">&amp;</operator><name pos:start="23:31" pos:end="23:33">ebx</name></expr></argument>, <argument pos:start="23:36" pos:end="23:39"><expr pos:start="23:36" pos:end="23:39"><operator pos:start="23:36" pos:end="23:36">&amp;</operator><name pos:start="23:37" pos:end="23:39">ecx</name></expr></argument>, <argument pos:start="23:42" pos:end="23:45"><expr pos:start="23:42" pos:end="23:45"><operator pos:start="23:42" pos:end="23:42">&amp;</operator><name pos:start="23:43" pos:end="23:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:68"><expr pos:start="25:5" pos:end="25:67"><name pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:15">host_cpudef</name><operator pos:start="25:16" pos:end="25:16">.</operator><name pos:start="25:17" pos:end="25:22">family</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <operator pos:start="25:26" pos:end="25:26">(</operator><operator pos:start="25:27" pos:end="25:27">(</operator><name pos:start="25:28" pos:end="25:30">eax</name> <operator pos:start="25:32" pos:end="25:33">&gt;&gt;</operator> <literal type="number" pos:start="25:35" pos:end="25:35">8</literal><operator pos:start="25:36" pos:end="25:36">)</operator> <operator pos:start="25:38" pos:end="25:38">&amp;</operator> <literal type="number" pos:start="25:40" pos:end="25:43">0x0F</literal><operator pos:start="25:44" pos:end="25:44">)</operator> <operator pos:start="25:46" pos:end="25:46">+</operator> <operator pos:start="25:48" pos:end="25:48">(</operator><operator pos:start="25:49" pos:end="25:49">(</operator><name pos:start="25:50" pos:end="25:52">eax</name> <operator pos:start="25:54" pos:end="25:55">&gt;&gt;</operator> <literal type="number" pos:start="25:57" pos:end="25:58">20</literal><operator pos:start="25:59" pos:end="25:59">)</operator> <operator pos:start="25:61" pos:end="25:61">&amp;</operator> <literal type="number" pos:start="25:63" pos:end="25:66">0xFF</literal><operator pos:start="25:67" pos:end="25:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:70"><expr pos:start="27:5" pos:end="27:69"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:15">host_cpudef</name><operator pos:start="27:16" pos:end="27:16">.</operator><name pos:start="27:17" pos:end="27:21">model</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <operator pos:start="27:25" pos:end="27:25">(</operator><operator pos:start="27:26" pos:end="27:26">(</operator><name pos:start="27:27" pos:end="27:29">eax</name> <operator pos:start="27:31" pos:end="27:32">&gt;&gt;</operator> <literal type="number" pos:start="27:34" pos:end="27:34">4</literal><operator pos:start="27:35" pos:end="27:35">)</operator> <operator pos:start="27:37" pos:end="27:37">&amp;</operator> <literal type="number" pos:start="27:39" pos:end="27:42">0x0F</literal><operator pos:start="27:43" pos:end="27:43">)</operator> <operator pos:start="27:45" pos:end="27:45">|</operator> <operator pos:start="27:47" pos:end="27:47">(</operator><operator pos:start="27:48" pos:end="27:48">(</operator><name pos:start="27:49" pos:end="27:51">eax</name> <operator pos:start="27:53" pos:end="27:53">&amp;</operator> <literal type="number" pos:start="27:55" pos:end="27:61">0xF0000</literal><operator pos:start="27:62" pos:end="27:62">)</operator> <operator pos:start="27:64" pos:end="27:65">&gt;&gt;</operator> <literal type="number" pos:start="27:67" pos:end="27:68">12</literal><operator pos:start="27:69" pos:end="27:69">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:15">host_cpudef</name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:24">stepping</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <name pos:start="29:28" pos:end="29:30">eax</name> <operator pos:start="29:32" pos:end="29:32">&amp;</operator> <literal type="number" pos:start="29:34" pos:end="29:37">0x0F</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><call pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:25">cpu_x86_fill_model_id</name><argument_list pos:start="33:26" pos:end="33:47">(<argument pos:start="33:27" pos:end="33:46"><expr pos:start="33:27" pos:end="33:46"><name pos:start="33:27" pos:end="33:46"><name pos:start="33:27" pos:end="33:37">host_cpudef</name><operator pos:start="33:38" pos:end="33:38">.</operator><name pos:start="33:39" pos:end="33:46">model_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:7">xcc</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:16">cpu_def</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <operator pos:start="37:20" pos:end="37:20">&amp;</operator><name pos:start="37:21" pos:end="37:31">host_cpudef</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:38"><name pos:start="39:5" pos:end="39:15">host_cpudef</name><operator pos:start="39:16" pos:end="39:16">.</operator><name pos:start="39:17" pos:end="39:38">cache_info_passthrough</name></name> <operator pos:start="39:40" pos:end="39:40">=</operator> <name pos:start="39:42" pos:end="39:45">true</name></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="47:7">/* level, xlevel, xlevel2, and the feature words are initialized on

     * instance_init, because they require KVM to be initialized.

     */</comment>



    <expr_stmt pos:start="51:5" pos:end="51:40"><expr pos:start="51:5" pos:end="51:39"><name pos:start="51:5" pos:end="51:13"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:13">props</name></name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:39">host_x86_cpu_properties</name></expr>;</expr_stmt>



</block_content>}</block></function></unit>
