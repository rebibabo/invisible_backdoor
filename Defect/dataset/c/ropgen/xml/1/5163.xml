<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5163.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:27">file_ram_alloc</name><parameter_list pos:start="1:28" pos:end="7:41">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:36">RAMBlock</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:43">block</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:45"><decl pos:start="3:29" pos:end="3:45"><type pos:start="3:29" pos:end="3:45"><name pos:start="3:29" pos:end="3:38">ram_addr_t</name></type> <name pos:start="3:40" pos:end="3:45">memory</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:44"><decl pos:start="5:29" pos:end="5:44"><type pos:start="5:29" pos:end="5:44"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:38">char</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:44">path</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:40"><decl pos:start="7:29" pos:end="7:40"><type pos:start="7:29" pos:end="7:40"><name pos:start="7:29" pos:end="7:33">Error</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier><modifier pos:start="7:36" pos:end="7:36">*</modifier></type><name pos:start="7:37" pos:end="7:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="279:1">{<block_content pos:start="11:5" pos:end="277:16">

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:24">unlink_on_error</name> <init pos:start="11:26" pos:end="11:32">= <expr pos:start="11:28" pos:end="11:32"><name pos:start="11:28" pos:end="11:32">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:24">sanitized_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:11">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:14">area</name> <init pos:start="19:16" pos:end="19:27">= <expr pos:start="19:18" pos:end="19:27"><name pos:start="19:18" pos:end="19:27">MAP_FAILED</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">fd</name> <init pos:start="21:12" pos:end="21:15">= <expr pos:start="21:14" pos:end="21:15"><operator pos:start="21:14" pos:end="21:14">-</operator><literal type="number" pos:start="21:15" pos:end="21:15">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:21">file_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:45">(<expr pos:start="27:9" pos:end="27:44"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:19">kvm_enabled</name><argument_list pos:start="27:20" pos:end="27:21">()</argument_list></call> <operator pos:start="27:23" pos:end="27:24">&amp;&amp;</operator> <operator pos:start="27:26" pos:end="27:26">!</operator><call pos:start="27:27" pos:end="27:44"><name pos:start="27:27" pos:end="27:42">kvm_has_sync_mmu</name><argument_list pos:start="27:43" pos:end="27:44">()</argument_list></call></expr>)</condition> <block pos:start="27:47" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:20">

        <expr_stmt pos:start="29:9" pos:end="31:74"><expr pos:start="29:9" pos:end="31:73"><call pos:start="29:9" pos:end="31:73"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="31:73">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>,

                   <argument pos:start="31:20" pos:end="31:72"><expr pos:start="31:20" pos:end="31:72"><literal type="string" pos:start="31:20" pos:end="31:72">"host lacks kvm mmu notifiers, -mem-path unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:20">return <expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="39:5" pos:end="129:5">for <control pos:start="39:9" pos:end="39:12">(<init pos:start="39:10" pos:end="39:10">;</init><condition pos:start="39:11" pos:end="39:11">;</condition><incr/>)</control> <block pos:start="39:14" pos:end="129:5">{<block_content pos:start="41:9" pos:end="119:9">

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:10">fd</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:31"><name pos:start="41:14" pos:end="41:17">open</name><argument_list pos:start="41:18" pos:end="41:31">(<argument pos:start="41:19" pos:end="41:22"><expr pos:start="41:19" pos:end="41:22"><name pos:start="41:19" pos:end="41:22">path</name></expr></argument>, <argument pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:30">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:14">fd</name> <operator pos:start="43:16" pos:end="43:17">&gt;=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:18">

            <comment type="block" pos:start="45:13" pos:end="45:54">/* @path names an existing file, use it */</comment>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="107:9"><if pos:start="51:9" pos:end="65:9">if <condition pos:start="51:12" pos:end="51:28">(<expr pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:17">errno</name> <operator pos:start="51:19" pos:end="51:20">==</operator> <name pos:start="51:22" pos:end="51:27">ENOENT</name></expr>)</condition> <block pos:start="51:30" pos:end="65:9">{<block_content pos:start="55:13" pos:end="63:13">

            <comment type="block" pos:start="53:13" pos:end="53:66">/* @path names a file that doesn't exist, create it */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:61"><expr pos:start="55:13" pos:end="55:60"><name pos:start="55:13" pos:end="55:14">fd</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:60"><name pos:start="55:18" pos:end="55:21">open</name><argument_list pos:start="55:22" pos:end="55:60">(<argument pos:start="55:23" pos:end="55:26"><expr pos:start="55:23" pos:end="55:26"><name pos:start="55:23" pos:end="55:26">path</name></expr></argument>, <argument pos:start="55:29" pos:end="55:53"><expr pos:start="55:29" pos:end="55:53"><name pos:start="55:29" pos:end="55:34">O_RDWR</name> <operator pos:start="55:36" pos:end="55:36">|</operator> <name pos:start="55:38" pos:end="55:44">O_CREAT</name> <operator pos:start="55:46" pos:end="55:46">|</operator> <name pos:start="55:48" pos:end="55:53">O_EXCL</name></expr></argument>, <argument pos:start="55:56" pos:end="55:59"><expr pos:start="55:56" pos:end="55:59"><literal type="number" pos:start="55:56" pos:end="55:59">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="63:13"><if pos:start="57:13" pos:end="63:13">if <condition pos:start="57:16" pos:end="57:24">(<expr pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:18">fd</name> <operator pos:start="57:20" pos:end="57:21">&gt;=</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition> <block pos:start="57:26" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:22">

                <expr_stmt pos:start="59:17" pos:end="59:39"><expr pos:start="59:17" pos:end="59:38"><name pos:start="59:17" pos:end="59:31">unlink_on_error</name> <operator pos:start="59:33" pos:end="59:33">=</operator> <name pos:start="59:35" pos:end="59:38">true</name></expr>;</expr_stmt>

                <break pos:start="61:17" pos:end="61:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="107:9">else if <condition pos:start="65:19" pos:end="65:35">(<expr pos:start="65:20" pos:end="65:34"><name pos:start="65:20" pos:end="65:24">errno</name> <operator pos:start="65:26" pos:end="65:27">==</operator> <name pos:start="65:29" pos:end="65:34">EISDIR</name></expr>)</condition> <block pos:start="65:37" pos:end="107:9">{<block_content pos:start="71:13" pos:end="105:29">

            <comment type="block" pos:start="67:13" pos:end="67:62">/* @path names a directory, create a file there */</comment>

            <comment type="block" pos:start="69:13" pos:end="69:79">/* Make name safe to use with mkstemp by replacing '/' with '_'. */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:69"><expr pos:start="71:13" pos:end="71:68"><name pos:start="71:13" pos:end="71:26">sanitized_name</name> <operator pos:start="71:28" pos:end="71:28">=</operator> <call pos:start="71:30" pos:end="71:68"><name pos:start="71:30" pos:end="71:37">g_strdup</name><argument_list pos:start="71:38" pos:end="71:68">(<argument pos:start="71:39" pos:end="71:67"><expr pos:start="71:39" pos:end="71:67"><call pos:start="71:39" pos:end="71:67"><name pos:start="71:39" pos:end="71:56">memory_region_name</name><argument_list pos:start="71:57" pos:end="71:67">(<argument pos:start="71:58" pos:end="71:66"><expr pos:start="71:58" pos:end="71:66"><name pos:start="71:58" pos:end="71:66"><name pos:start="71:58" pos:end="71:62">block</name><operator pos:start="71:63" pos:end="71:64">-&gt;</operator><name pos:start="71:65" pos:end="71:66">mr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="73:13" pos:end="81:13">for <control pos:start="73:17" pos:end="73:53">(<init pos:start="73:18" pos:end="73:36"><expr pos:start="73:18" pos:end="73:35"><name pos:start="73:18" pos:end="73:18">c</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <name pos:start="73:22" pos:end="73:35">sanitized_name</name></expr>;</init> <condition pos:start="73:38" pos:end="73:48"><expr pos:start="73:38" pos:end="73:47"><operator pos:start="73:38" pos:end="73:38">*</operator><name pos:start="73:39" pos:end="73:39">c</name> <operator pos:start="73:41" pos:end="73:42">!=</operator> <literal type="char" pos:start="73:44" pos:end="73:47">'\0'</literal></expr>;</condition> <incr pos:start="73:50" pos:end="73:52"><expr pos:start="73:50" pos:end="73:52"><name pos:start="73:50" pos:end="73:50">c</name><operator pos:start="73:51" pos:end="73:52">++</operator></expr></incr>)</control> <block pos:start="73:55" pos:end="81:13">{<block_content pos:start="75:17" pos:end="79:17">

                <if_stmt pos:start="75:17" pos:end="79:17"><if pos:start="75:17" pos:end="79:17">if <condition pos:start="75:20" pos:end="75:30">(<expr pos:start="75:21" pos:end="75:29"><operator pos:start="75:21" pos:end="75:21">*</operator><name pos:start="75:22" pos:end="75:22">c</name> <operator pos:start="75:24" pos:end="75:25">==</operator> <literal type="char" pos:start="75:27" pos:end="75:29">'/'</literal></expr>)</condition> <block pos:start="75:32" pos:end="79:17">{<block_content pos:start="77:21" pos:end="77:29">

                    <expr_stmt pos:start="77:21" pos:end="77:29"><expr pos:start="77:21" pos:end="77:28"><operator pos:start="77:21" pos:end="77:21">*</operator><name pos:start="77:22" pos:end="77:22">c</name> <operator pos:start="77:24" pos:end="77:24">=</operator> <literal type="char" pos:start="77:26" pos:end="77:28">'_'</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="85:13" pos:end="87:55"><expr pos:start="85:13" pos:end="87:54"><name pos:start="85:13" pos:end="85:20">filename</name> <operator pos:start="85:22" pos:end="85:22">=</operator> <call pos:start="85:24" pos:end="87:54"><name pos:start="85:24" pos:end="85:38">g_strdup_printf</name><argument_list pos:start="85:39" pos:end="87:54">(<argument pos:start="85:40" pos:end="85:67"><expr pos:start="85:40" pos:end="85:67"><literal type="string" pos:start="85:40" pos:end="85:67">"%s/qemu_back_mem.%s.XXXXXX"</literal></expr></argument>, <argument pos:start="85:70" pos:end="85:73"><expr pos:start="85:70" pos:end="85:73"><name pos:start="85:70" pos:end="85:73">path</name></expr></argument>,

                                       <argument pos:start="87:40" pos:end="87:53"><expr pos:start="87:40" pos:end="87:53"><name pos:start="87:40" pos:end="87:53">sanitized_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><call pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:18">g_free</name><argument_list pos:start="89:19" pos:end="89:34">(<argument pos:start="89:20" pos:end="89:33"><expr pos:start="89:20" pos:end="89:33"><name pos:start="89:20" pos:end="89:33">sanitized_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:35"><expr pos:start="93:13" pos:end="93:34"><name pos:start="93:13" pos:end="93:14">fd</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <call pos:start="93:18" pos:end="93:34"><name pos:start="93:18" pos:end="93:24">mkstemp</name><argument_list pos:start="93:25" pos:end="93:34">(<argument pos:start="93:26" pos:end="93:33"><expr pos:start="93:26" pos:end="93:33"><name pos:start="93:26" pos:end="93:33">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="103:13"><if pos:start="95:13" pos:end="103:13">if <condition pos:start="95:16" pos:end="95:24">(<expr pos:start="95:17" pos:end="95:23"><name pos:start="95:17" pos:end="95:18">fd</name> <operator pos:start="95:20" pos:end="95:21">&gt;=</operator> <literal type="number" pos:start="95:23" pos:end="95:23">0</literal></expr>)</condition> <block pos:start="95:26" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:22">

                <expr_stmt pos:start="97:17" pos:end="97:33"><expr pos:start="97:17" pos:end="97:32"><call pos:start="97:17" pos:end="97:32"><name pos:start="97:17" pos:end="97:22">unlink</name><argument_list pos:start="97:23" pos:end="97:32">(<argument pos:start="97:24" pos:end="97:31"><expr pos:start="97:24" pos:end="97:31"><name pos:start="97:24" pos:end="97:31">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:33"><expr pos:start="99:17" pos:end="99:32"><call pos:start="99:17" pos:end="99:32"><name pos:start="99:17" pos:end="99:22">g_free</name><argument_list pos:start="99:23" pos:end="99:32">(<argument pos:start="99:24" pos:end="99:31"><expr pos:start="99:24" pos:end="99:31"><name pos:start="99:24" pos:end="99:31">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="101:17" pos:end="101:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:29"><expr pos:start="105:13" pos:end="105:28"><call pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:18">g_free</name><argument_list pos:start="105:19" pos:end="105:28">(<argument pos:start="105:20" pos:end="105:27"><expr pos:start="105:20" pos:end="105:27"><name pos:start="105:20" pos:end="105:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="119:9"><if pos:start="109:9" pos:end="119:9">if <condition pos:start="109:12" pos:end="109:46">(<expr pos:start="109:13" pos:end="109:45"><name pos:start="109:13" pos:end="109:17">errno</name> <operator pos:start="109:19" pos:end="109:20">!=</operator> <name pos:start="109:22" pos:end="109:27">EEXIST</name> <operator pos:start="109:29" pos:end="109:30">&amp;&amp;</operator> <name pos:start="109:32" pos:end="109:36">errno</name> <operator pos:start="109:38" pos:end="109:39">!=</operator> <name pos:start="109:41" pos:end="109:45">EINTR</name></expr>)</condition> <block pos:start="109:48" pos:end="119:9">{<block_content pos:start="111:13" pos:end="117:23">

            <expr_stmt pos:start="111:13" pos:end="115:35"><expr pos:start="111:13" pos:end="115:34"><call pos:start="111:13" pos:end="115:34"><name pos:start="111:13" pos:end="111:28">error_setg_errno</name><argument_list pos:start="111:29" pos:end="115:34">(<argument pos:start="111:30" pos:end="111:33"><expr pos:start="111:30" pos:end="111:33"><name pos:start="111:30" pos:end="111:33">errp</name></expr></argument>, <argument pos:start="111:36" pos:end="111:40"><expr pos:start="111:36" pos:end="111:40"><name pos:start="111:36" pos:end="111:40">errno</name></expr></argument>,

                             <argument pos:start="113:30" pos:end="113:72"><expr pos:start="113:30" pos:end="113:72"><literal type="string" pos:start="113:30" pos:end="113:72">"can't open backing store %s for guest RAM"</literal></expr></argument>,

                             <argument pos:start="115:30" pos:end="115:33"><expr pos:start="115:30" pos:end="115:33"><name pos:start="115:30" pos:end="115:33">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="117:13" pos:end="117:23">goto <name pos:start="117:18" pos:end="117:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="121:9" pos:end="127:11">/*

         * Try again on EINTR and EEXIST.  The latter happens when

         * something else creates the file between our two open().

         */</comment>

    </block_content>}</block></for>



    <expr_stmt pos:start="133:5" pos:end="133:47"><expr pos:start="133:5" pos:end="133:46"><name pos:start="133:5" pos:end="133:20"><name pos:start="133:5" pos:end="133:9">block</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:20">page_size</name></name> <operator pos:start="133:22" pos:end="133:22">=</operator> <call pos:start="133:24" pos:end="133:46"><name pos:start="133:24" pos:end="133:42">qemu_fd_getpagesize</name><argument_list pos:start="133:43" pos:end="133:46">(<argument pos:start="133:44" pos:end="133:45"><expr pos:start="133:44" pos:end="133:45"><name pos:start="133:44" pos:end="133:45">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="138:0"><expr pos:start="135:5" pos:end="135:39"><name pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:9">block</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:13">mr</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:20">align</name></name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:39"><name pos:start="135:24" pos:end="135:28">block</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:39">page_size</name></name></expr>;</expr_stmt>

<cpp:if pos:start="137:1" pos:end="137:22">#<cpp:directive pos:start="137:2" pos:end="137:3">if</cpp:directive> <expr pos:start="137:5" pos:end="137:22"><call pos:start="137:5" pos:end="137:22"><name pos:start="137:5" pos:end="137:11">defined</name><argument_list pos:start="137:12" pos:end="137:22">(<argument pos:start="137:13" pos:end="137:21"><expr pos:start="137:13" pos:end="137:21"><name pos:start="137:13" pos:end="137:21">__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="139:5" pos:end="146:0"><if pos:start="139:5" pos:end="146:0">if <condition pos:start="139:8" pos:end="139:22">(<expr pos:start="139:9" pos:end="139:21"><call pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:19">kvm_enabled</name><argument_list pos:start="139:20" pos:end="139:21">()</argument_list></call></expr>)</condition> <block pos:start="139:24" pos:end="146:0">{<block_content pos:start="141:9" pos:end="141:69">

        <expr_stmt pos:start="141:9" pos:end="141:69"><expr pos:start="141:9" pos:end="141:68"><name pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:13">block</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:17">mr</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:24">align</name></name> <operator pos:start="141:26" pos:end="141:26">=</operator> <call pos:start="141:28" pos:end="141:68"><name pos:start="141:28" pos:end="141:30">MAX</name><argument_list pos:start="141:31" pos:end="141:68">(<argument pos:start="141:32" pos:end="141:47"><expr pos:start="141:32" pos:end="141:47"><name pos:start="141:32" pos:end="141:47"><name pos:start="141:32" pos:end="141:36">block</name><operator pos:start="141:37" pos:end="141:38">-&gt;</operator><name pos:start="141:39" pos:end="141:40">mr</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:47">align</name></name></expr></argument>, <argument pos:start="141:50" pos:end="141:67"><expr pos:start="141:50" pos:end="141:67"><name pos:start="141:50" pos:end="141:67">QEMU_VMALLOC_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="149:5" pos:end="149:34"><expr pos:start="149:5" pos:end="149:33"><name pos:start="149:5" pos:end="149:13">file_size</name> <operator pos:start="149:15" pos:end="149:15">=</operator> <call pos:start="149:17" pos:end="149:33"><name pos:start="149:17" pos:end="149:29">get_file_size</name><argument_list pos:start="149:30" pos:end="149:33">(<argument pos:start="149:31" pos:end="149:32"><expr pos:start="149:31" pos:end="149:32"><name pos:start="149:31" pos:end="149:32">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="153:5" pos:end="163:5"><if pos:start="153:5" pos:end="163:5">if <condition pos:start="153:8" pos:end="153:34">(<expr pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:14">memory</name> <operator pos:start="153:16" pos:end="153:16">&lt;</operator> <name pos:start="153:18" pos:end="153:33"><name pos:start="153:18" pos:end="153:22">block</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:33">page_size</name></name></expr>)</condition> <block pos:start="153:36" pos:end="163:5">{<block_content pos:start="155:9" pos:end="161:19">

        <expr_stmt pos:start="155:9" pos:end="159:45"><expr pos:start="155:9" pos:end="159:44"><call pos:start="155:9" pos:end="159:44"><name pos:start="155:9" pos:end="155:18">error_setg</name><argument_list pos:start="155:19" pos:end="159:44">(<argument pos:start="155:20" pos:end="155:23"><expr pos:start="155:20" pos:end="155:23"><name pos:start="155:20" pos:end="155:23">errp</name></expr></argument>, <argument pos:start="155:26" pos:end="157:51"><expr pos:start="155:26" pos:end="157:51"><literal type="string" pos:start="155:26" pos:end="155:41">"memory size 0x"</literal> <name pos:start="155:43" pos:end="155:54">RAM_ADDR_FMT</name> <literal type="string" pos:start="155:56" pos:end="155:75">" must be equal to "</literal>

                   <literal type="string" pos:start="157:20" pos:end="157:51">"or larger than page size 0x%zx"</literal></expr></argument>,

                   <argument pos:start="159:20" pos:end="159:25"><expr pos:start="159:20" pos:end="159:25"><name pos:start="159:20" pos:end="159:25">memory</name></expr></argument>, <argument pos:start="159:28" pos:end="159:43"><expr pos:start="159:28" pos:end="159:43"><name pos:start="159:28" pos:end="159:43"><name pos:start="159:28" pos:end="159:32">block</name><operator pos:start="159:33" pos:end="159:34">-&gt;</operator><name pos:start="159:35" pos:end="159:43">page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:19">goto <name pos:start="161:14" pos:end="161:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="177:5"><if pos:start="167:5" pos:end="177:5">if <condition pos:start="167:8" pos:end="167:44">(<expr pos:start="167:9" pos:end="167:43"><name pos:start="167:9" pos:end="167:17">file_size</name> <operator pos:start="167:19" pos:end="167:19">&gt;</operator> <literal type="number" pos:start="167:21" pos:end="167:21">0</literal> <operator pos:start="167:23" pos:end="167:24">&amp;&amp;</operator> <name pos:start="167:26" pos:end="167:34">file_size</name> <operator pos:start="167:36" pos:end="167:36">&lt;</operator> <name pos:start="167:38" pos:end="167:43">memory</name></expr>)</condition> <block pos:start="167:46" pos:end="177:5">{<block_content pos:start="169:9" pos:end="175:19">

        <expr_stmt pos:start="169:9" pos:end="173:44"><expr pos:start="169:9" pos:end="173:43"><call pos:start="169:9" pos:end="173:43"><name pos:start="169:9" pos:end="169:18">error_setg</name><argument_list pos:start="169:19" pos:end="173:43">(<argument pos:start="169:20" pos:end="169:23"><expr pos:start="169:20" pos:end="169:23"><name pos:start="169:20" pos:end="169:23">errp</name></expr></argument>, <argument pos:start="169:26" pos:end="171:66"><expr pos:start="169:26" pos:end="171:66"><literal type="string" pos:start="169:26" pos:end="169:52">"backing store %s size 0x%"</literal> <name pos:start="169:54" pos:end="169:59">PRIx64</name>

                   <literal type="string" pos:start="171:20" pos:end="171:53">" does not match 'size' option 0x"</literal> <name pos:start="171:55" pos:end="171:66">RAM_ADDR_FMT</name></expr></argument>,

                   <argument pos:start="173:20" pos:end="173:23"><expr pos:start="173:20" pos:end="173:23"><name pos:start="173:20" pos:end="173:23">path</name></expr></argument>, <argument pos:start="173:26" pos:end="173:34"><expr pos:start="173:26" pos:end="173:34"><name pos:start="173:26" pos:end="173:34">file_size</name></expr></argument>, <argument pos:start="173:37" pos:end="173:42"><expr pos:start="173:37" pos:end="173:42"><name pos:start="173:37" pos:end="173:42">memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="175:9" pos:end="175:19">goto <name pos:start="175:14" pos:end="175:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:48"><expr pos:start="181:5" pos:end="181:47"><name pos:start="181:5" pos:end="181:10">memory</name> <operator pos:start="181:12" pos:end="181:12">=</operator> <call pos:start="181:14" pos:end="181:47"><name pos:start="181:14" pos:end="181:21">ROUND_UP</name><argument_list pos:start="181:22" pos:end="181:47">(<argument pos:start="181:23" pos:end="181:28"><expr pos:start="181:23" pos:end="181:28"><name pos:start="181:23" pos:end="181:28">memory</name></expr></argument>, <argument pos:start="181:31" pos:end="181:46"><expr pos:start="181:31" pos:end="181:46"><name pos:start="181:31" pos:end="181:46"><name pos:start="181:31" pos:end="181:35">block</name><operator pos:start="181:36" pos:end="181:37">-&gt;</operator><name pos:start="181:38" pos:end="181:46">page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="211:7">/*

     * ftruncate is not supported by hugetlbfs in older

     * hosts, so don't bother bailing out on errors.

     * If anything goes wrong with it under other filesystems,

     * mmap will fail.

     *

     * Do not truncate the non-empty backend file to avoid corrupting

     * the existing data in the file. Disabling shrinking is not

     * enough. For example, the current vNVDIMM implementation stores

     * the guest NVDIMM labels at the end of the backend file. If the

     * backend file is later extended, QEMU will not be able to find

     * those labels. Therefore, extending the non-empty backend file

     * is disabled as well.

     */</comment>

    <if_stmt pos:start="213:5" pos:end="217:5"><if pos:start="213:5" pos:end="217:5">if <condition pos:start="213:8" pos:end="213:44">(<expr pos:start="213:9" pos:end="213:43"><operator pos:start="213:9" pos:end="213:9">!</operator><name pos:start="213:10" pos:end="213:18">file_size</name> <operator pos:start="213:20" pos:end="213:21">&amp;&amp;</operator> <call pos:start="213:23" pos:end="213:43"><name pos:start="213:23" pos:end="213:31">ftruncate</name><argument_list pos:start="213:32" pos:end="213:43">(<argument pos:start="213:33" pos:end="213:34"><expr pos:start="213:33" pos:end="213:34"><name pos:start="213:33" pos:end="213:34">fd</name></expr></argument>, <argument pos:start="213:37" pos:end="213:42"><expr pos:start="213:37" pos:end="213:42"><name pos:start="213:37" pos:end="213:42">memory</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="213:46" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:28">

        <expr_stmt pos:start="215:9" pos:end="215:28"><expr pos:start="215:9" pos:end="215:27"><call pos:start="215:9" pos:end="215:27"><name pos:start="215:9" pos:end="215:14">perror</name><argument_list pos:start="215:15" pos:end="215:27">(<argument pos:start="215:16" pos:end="215:26"><expr pos:start="215:16" pos:end="215:26"><literal type="string" pos:start="215:16" pos:end="215:26">"ftruncate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="223:52"><expr pos:start="221:5" pos:end="223:51"><name pos:start="221:5" pos:end="221:8">area</name> <operator pos:start="221:10" pos:end="221:10">=</operator> <call pos:start="221:12" pos:end="223:51"><name pos:start="221:12" pos:end="221:24">qemu_ram_mmap</name><argument_list pos:start="221:25" pos:end="223:51">(<argument pos:start="221:26" pos:end="221:27"><expr pos:start="221:26" pos:end="221:27"><name pos:start="221:26" pos:end="221:27">fd</name></expr></argument>, <argument pos:start="221:30" pos:end="221:35"><expr pos:start="221:30" pos:end="221:35"><name pos:start="221:30" pos:end="221:35">memory</name></expr></argument>, <argument pos:start="221:38" pos:end="221:53"><expr pos:start="221:38" pos:end="221:53"><name pos:start="221:38" pos:end="221:53"><name pos:start="221:38" pos:end="221:42">block</name><operator pos:start="221:43" pos:end="221:44">-&gt;</operator><name pos:start="221:45" pos:end="221:46">mr</name><operator pos:start="221:47" pos:end="221:48">-&gt;</operator><name pos:start="221:49" pos:end="221:53">align</name></name></expr></argument>,

                         <argument pos:start="223:26" pos:end="223:50"><expr pos:start="223:26" pos:end="223:50"><name pos:start="223:26" pos:end="223:37"><name pos:start="223:26" pos:end="223:30">block</name><operator pos:start="223:31" pos:end="223:32">-&gt;</operator><name pos:start="223:33" pos:end="223:37">flags</name></name> <operator pos:start="223:39" pos:end="223:39">&amp;</operator> <name pos:start="223:41" pos:end="223:50">RAM_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="233:5"><if pos:start="225:5" pos:end="233:5">if <condition pos:start="225:8" pos:end="225:27">(<expr pos:start="225:9" pos:end="225:26"><name pos:start="225:9" pos:end="225:12">area</name> <operator pos:start="225:14" pos:end="225:15">==</operator> <name pos:start="225:17" pos:end="225:26">MAP_FAILED</name></expr>)</condition> <block pos:start="225:29" pos:end="233:5">{<block_content pos:start="227:9" pos:end="231:19">

        <expr_stmt pos:start="227:9" pos:end="229:70"><expr pos:start="227:9" pos:end="229:69"><call pos:start="227:9" pos:end="229:69"><name pos:start="227:9" pos:end="227:24">error_setg_errno</name><argument_list pos:start="227:25" pos:end="229:69">(<argument pos:start="227:26" pos:end="227:29"><expr pos:start="227:26" pos:end="227:29"><name pos:start="227:26" pos:end="227:29">errp</name></expr></argument>, <argument pos:start="227:32" pos:end="227:36"><expr pos:start="227:32" pos:end="227:36"><name pos:start="227:32" pos:end="227:36">errno</name></expr></argument>,

                         <argument pos:start="229:26" pos:end="229:68"><expr pos:start="229:26" pos:end="229:68"><literal type="string" pos:start="229:26" pos:end="229:68">"unable to map backing store for guest RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="231:9" pos:end="231:19">goto <name pos:start="231:14" pos:end="231:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="237:5" pos:end="247:5"><if pos:start="237:5" pos:end="247:5">if <condition pos:start="237:8" pos:end="237:21">(<expr pos:start="237:9" pos:end="237:20"><name pos:start="237:9" pos:end="237:20">mem_prealloc</name></expr>)</condition> <block pos:start="237:23" pos:end="247:5">{<block_content pos:start="239:9" pos:end="245:9">

        <expr_stmt pos:start="239:9" pos:end="239:48"><expr pos:start="239:9" pos:end="239:47"><call pos:start="239:9" pos:end="239:47"><name pos:start="239:9" pos:end="239:23">os_mem_prealloc</name><argument_list pos:start="239:24" pos:end="239:47">(<argument pos:start="239:25" pos:end="239:26"><expr pos:start="239:25" pos:end="239:26"><name pos:start="239:25" pos:end="239:26">fd</name></expr></argument>, <argument pos:start="239:29" pos:end="239:32"><expr pos:start="239:29" pos:end="239:32"><name pos:start="239:29" pos:end="239:32">area</name></expr></argument>, <argument pos:start="239:35" pos:end="239:40"><expr pos:start="239:35" pos:end="239:40"><name pos:start="239:35" pos:end="239:40">memory</name></expr></argument>, <argument pos:start="239:43" pos:end="239:46"><expr pos:start="239:43" pos:end="239:46"><name pos:start="239:43" pos:end="239:46">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="241:9" pos:end="245:9"><if pos:start="241:9" pos:end="245:9">if <condition pos:start="241:12" pos:end="241:26">(<expr pos:start="241:13" pos:end="241:25"><name pos:start="241:13" pos:end="241:16">errp</name> <operator pos:start="241:18" pos:end="241:19">&amp;&amp;</operator> <operator pos:start="241:21" pos:end="241:21">*</operator><name pos:start="241:22" pos:end="241:25">errp</name></expr>)</condition> <block pos:start="241:28" pos:end="245:9">{<block_content pos:start="243:13" pos:end="243:23">

            <goto pos:start="243:13" pos:end="243:23">goto <name pos:start="243:18" pos:end="243:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:19"><expr pos:start="251:5" pos:end="251:18"><name pos:start="251:5" pos:end="251:13"><name pos:start="251:5" pos:end="251:9">block</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:13">fd</name></name> <operator pos:start="251:15" pos:end="251:15">=</operator> <name pos:start="251:17" pos:end="251:18">fd</name></expr>;</expr_stmt>

    <return pos:start="253:5" pos:end="253:16">return <expr pos:start="253:12" pos:end="253:15"><name pos:start="253:12" pos:end="253:15">area</name></expr>;</return>



<label pos:start="257:1" pos:end="257:6"><name pos:start="257:1" pos:end="257:5">error</name>:</label>

    <if_stmt pos:start="259:5" pos:end="263:5"><if pos:start="259:5" pos:end="263:5">if <condition pos:start="259:8" pos:end="259:27">(<expr pos:start="259:9" pos:end="259:26"><name pos:start="259:9" pos:end="259:12">area</name> <operator pos:start="259:14" pos:end="259:15">!=</operator> <name pos:start="259:17" pos:end="259:26">MAP_FAILED</name></expr>)</condition> <block pos:start="259:29" pos:end="263:5">{<block_content pos:start="261:9" pos:end="261:38">

        <expr_stmt pos:start="261:9" pos:end="261:38"><expr pos:start="261:9" pos:end="261:37"><call pos:start="261:9" pos:end="261:37"><name pos:start="261:9" pos:end="261:23">qemu_ram_munmap</name><argument_list pos:start="261:24" pos:end="261:37">(<argument pos:start="261:25" pos:end="261:28"><expr pos:start="261:25" pos:end="261:28"><name pos:start="261:25" pos:end="261:28">area</name></expr></argument>, <argument pos:start="261:31" pos:end="261:36"><expr pos:start="261:31" pos:end="261:36"><name pos:start="261:31" pos:end="261:36">memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="265:5" pos:end="269:5"><if pos:start="265:5" pos:end="269:5">if <condition pos:start="265:8" pos:end="265:24">(<expr pos:start="265:9" pos:end="265:23"><name pos:start="265:9" pos:end="265:23">unlink_on_error</name></expr>)</condition> <block pos:start="265:26" pos:end="269:5">{<block_content pos:start="267:9" pos:end="267:21">

        <expr_stmt pos:start="267:9" pos:end="267:21"><expr pos:start="267:9" pos:end="267:20"><call pos:start="267:9" pos:end="267:20"><name pos:start="267:9" pos:end="267:14">unlink</name><argument_list pos:start="267:15" pos:end="267:20">(<argument pos:start="267:16" pos:end="267:19"><expr pos:start="267:16" pos:end="267:19"><name pos:start="267:16" pos:end="267:19">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="271:5" pos:end="275:5"><if pos:start="271:5" pos:end="275:5">if <condition pos:start="271:8" pos:end="271:17">(<expr pos:start="271:9" pos:end="271:16"><name pos:start="271:9" pos:end="271:10">fd</name> <operator pos:start="271:12" pos:end="271:13">!=</operator> <operator pos:start="271:15" pos:end="271:15">-</operator><literal type="number" pos:start="271:16" pos:end="271:16">1</literal></expr>)</condition> <block pos:start="271:19" pos:end="275:5">{<block_content pos:start="273:9" pos:end="273:18">

        <expr_stmt pos:start="273:9" pos:end="273:18"><expr pos:start="273:9" pos:end="273:17"><call pos:start="273:9" pos:end="273:17"><name pos:start="273:9" pos:end="273:13">close</name><argument_list pos:start="273:14" pos:end="273:17">(<argument pos:start="273:15" pos:end="273:16"><expr pos:start="273:15" pos:end="273:16"><name pos:start="273:15" pos:end="273:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="277:5" pos:end="277:16">return <expr pos:start="277:12" pos:end="277:15"><name pos:start="277:12" pos:end="277:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
