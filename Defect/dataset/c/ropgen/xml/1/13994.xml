<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13994.c" pos:tabs="8"><function pos:start="1:1" pos:end="46:45"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">gdb_vm_stopped</name><parameter_list pos:start="1:27" pos:end="1:52">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:51">reason</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="46:45">{<block_content pos:start="5:5" pos:end="46:45">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">GDBState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:17">[<expr pos:start="7:14" pos:end="7:16"><literal type="number" pos:start="7:14" pos:end="7:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="20:31"><if pos:start="13:5" pos:end="20:31">if <condition pos:start="13:8" pos:end="13:31">(<expr pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:16">state</name></name> <operator pos:start="13:18" pos:end="13:19">==</operator> <name pos:start="13:21" pos:end="13:30">RS_SYSCALL</name></expr>)</condition><block type="pseudo" pos:start="20:5" pos:end="20:31"><block_content pos:start="20:5" pos:end="20:31">




    <comment type="block" pos:start="18:5" pos:end="18:46">/* disable single step if it was enable */</comment>

    <expr_stmt pos:start="20:5" pos:end="20:31"><expr pos:start="20:5" pos:end="20:30"><call pos:start="20:5" pos:end="20:30"><name pos:start="20:5" pos:end="20:19">cpu_single_step</name><argument_list pos:start="20:20" pos:end="20:30">(<argument pos:start="20:21" pos:end="20:26"><expr pos:start="20:21" pos:end="20:26"><name pos:start="20:21" pos:end="20:26"><name pos:start="20:21" pos:end="20:21">s</name><operator pos:start="20:22" pos:end="20:23">-&gt;</operator><name pos:start="20:24" pos:end="20:26">env</name></name></expr></argument>, <argument pos:start="20:29" pos:end="20:29"><expr pos:start="20:29" pos:end="20:29"><literal type="number" pos:start="20:29" pos:end="20:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="24:5" pos:end="46:45"><if pos:start="24:5" pos:end="37:5">if <condition pos:start="24:8" pos:end="24:29">(<expr pos:start="24:9" pos:end="24:28"><name pos:start="24:9" pos:end="24:14">reason</name> <operator pos:start="24:16" pos:end="24:17">==</operator> <name pos:start="24:19" pos:end="24:28">EXCP_DEBUG</name></expr>)</condition> <block pos:start="24:31" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:22">








	<expr_stmt pos:start="33:9" pos:end="33:25"><expr pos:start="33:9" pos:end="33:24"><call pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:16">tb_flush</name><argument_list pos:start="33:17" pos:end="33:24">(<argument pos:start="33:18" pos:end="33:23"><expr pos:start="33:18" pos:end="33:23"><name pos:start="33:18" pos:end="33:23"><name pos:start="33:18" pos:end="33:18">s</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:23">env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:21">SIGTRAP</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="37:7" pos:end="41:5">else if <condition pos:start="37:15" pos:end="37:40">(<expr pos:start="37:16" pos:end="37:39"><name pos:start="37:16" pos:end="37:21">reason</name> <operator pos:start="37:23" pos:end="37:24">==</operator> <name pos:start="37:26" pos:end="37:39">EXCP_INTERRUPT</name></expr>)</condition> <block pos:start="37:42" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:21">

        <expr_stmt pos:start="39:9" pos:end="39:21"><expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:20">SIGINT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="46:45">else <block pos:start="41:12" pos:end="46:45">{<block_content pos:start="43:9" pos:end="46:45">

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>;</expr_stmt>


    <expr_stmt pos:start="46:5" pos:end="46:45"><expr pos:start="46:5" pos:end="46:44"><call pos:start="46:5" pos:end="46:44"><name pos:start="46:5" pos:end="46:12">snprintf</name><argument_list pos:start="46:13" pos:end="46:44">(<argument pos:start="46:14" pos:end="46:16"><expr pos:start="46:14" pos:end="46:16"><name pos:start="46:14" pos:end="46:16">buf</name></expr></argument>, <argument pos:start="46:19" pos:end="46:29"><expr pos:start="46:19" pos:end="46:29"><sizeof pos:start="46:19" pos:end="46:29">sizeof<argument_list pos:start="46:25" pos:end="46:29">(<argument pos:start="46:26" pos:end="46:28"><expr pos:start="46:26" pos:end="46:28"><name pos:start="46:26" pos:end="46:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="46:32" pos:end="46:38"><expr pos:start="46:32" pos:end="46:38"><literal type="string" pos:start="46:32" pos:end="46:38">"S%02x"</literal></expr></argument>, <argument pos:start="46:41" pos:end="46:43"><expr pos:start="46:41" pos:end="46:43"><name pos:start="46:41" pos:end="46:43">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></function>

</unit>
