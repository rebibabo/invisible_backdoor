<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25875.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:20"><name pos:start="1:1" pos:end="1:6">struct</name> <name pos:start="1:8" pos:end="1:20">GuestFileRead</name></name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:41">qmp_guest_file_read</name><parameter_list pos:start="1:42" pos:end="3:70">(<parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:49">int64_t</name></type> <name pos:start="1:51" pos:end="1:56">handle</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:62">bool</name></type> <name pos:start="1:64" pos:end="1:72">has_count</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:55"><decl pos:start="3:43" pos:end="3:55"><type pos:start="3:43" pos:end="3:55"><name pos:start="3:43" pos:end="3:49">int64_t</name></type> <name pos:start="3:51" pos:end="3:55">count</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:69"><decl pos:start="3:58" pos:end="3:69"><type pos:start="3:58" pos:end="3:69"><name pos:start="3:58" pos:end="3:62">Error</name> <modifier pos:start="3:64" pos:end="3:64">*</modifier><modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:69">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:21">

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">GuestFileHandle</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">gfh</name> <init pos:start="7:26" pos:end="7:63">= <expr pos:start="7:28" pos:end="7:63"><call pos:start="7:28" pos:end="7:63"><name pos:start="7:28" pos:end="7:49">guest_file_handle_find</name><argument_list pos:start="7:50" pos:end="7:63">(<argument pos:start="7:51" pos:end="7:56"><expr pos:start="7:51" pos:end="7:56"><name pos:start="7:51" pos:end="7:56">handle</name></expr></argument>, <argument pos:start="7:59" pos:end="7:62"><expr pos:start="7:59" pos:end="7:62"><name pos:start="7:59" pos:end="7:62">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GuestFileRead</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:28">read_data</name> <init pos:start="9:30" pos:end="9:35">= <expr pos:start="9:32" pos:end="9:35"><name pos:start="9:32" pos:end="9:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">guchar</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:15">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">FILE</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:12">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:21">read_count</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">gfh</name></expr>)</condition> <block pos:start="19:15" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:20">

        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:18">has_count</name></expr>)</condition> <block pos:start="27:21" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:39">

        <expr_stmt pos:start="29:9" pos:end="29:39"><expr pos:start="29:9" pos:end="29:38"><name pos:start="29:9" pos:end="29:13">count</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:38">QGA_READ_COUNT_DEFAULT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="31:7" pos:end="39:5">else if <condition pos:start="31:15" pos:end="31:25">(<expr pos:start="31:16" pos:end="31:24"><name pos:start="31:16" pos:end="31:20">count</name> <operator pos:start="31:22" pos:end="31:22">&lt;</operator> <literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>)</condition> <block pos:start="31:27" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:20">

        <expr_stmt pos:start="33:9" pos:end="35:26"><expr pos:start="33:9" pos:end="35:25"><call pos:start="33:9" pos:end="35:25"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="35:25">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:76"><expr pos:start="33:26" pos:end="33:76"><literal type="string" pos:start="33:26" pos:end="33:35">"value '%"</literal> <name pos:start="33:37" pos:end="33:42">PRId64</name> <literal type="string" pos:start="33:44" pos:end="33:76">"' is invalid for argument count"</literal></expr></argument>,

                   <argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:6">fh</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <name pos:start="43:10" pos:end="43:16"><name pos:start="43:10" pos:end="43:12">gfh</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:16">fh</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:7">buf</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:28"><name pos:start="45:11" pos:end="45:19">g_malloc0</name><argument_list pos:start="45:20" pos:end="45:28">(<argument pos:start="45:21" pos:end="45:27"><expr pos:start="45:21" pos:end="45:27"><name pos:start="45:21" pos:end="45:25">count</name><operator pos:start="45:26" pos:end="45:26">+</operator><literal type="number" pos:start="45:27" pos:end="45:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:14">read_count</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:41"><name pos:start="47:18" pos:end="47:22">fread</name><argument_list pos:start="47:23" pos:end="47:41">(<argument pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><name pos:start="47:24" pos:end="47:26">buf</name></expr></argument>, <argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><literal type="number" pos:start="47:29" pos:end="47:29">1</literal></expr></argument>, <argument pos:start="47:32" pos:end="47:36"><expr pos:start="47:32" pos:end="47:36"><name pos:start="47:32" pos:end="47:36">count</name></expr></argument>, <argument pos:start="47:39" pos:end="47:40"><expr pos:start="47:39" pos:end="47:40"><name pos:start="47:39" pos:end="47:40">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="71:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:19">(<expr pos:start="49:9" pos:end="49:18"><call pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:14">ferror</name><argument_list pos:start="49:15" pos:end="49:18">(<argument pos:start="49:16" pos:end="49:17"><expr pos:start="49:16" pos:end="49:17"><name pos:start="49:16" pos:end="49:17">fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:21" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:65">

        <expr_stmt pos:start="51:9" pos:end="51:61"><expr pos:start="51:9" pos:end="51:60"><call pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:24">error_setg_errno</name><argument_list pos:start="51:25" pos:end="51:60">(<argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">errp</name></expr></argument>, <argument pos:start="51:32" pos:end="51:36"><expr pos:start="51:32" pos:end="51:36"><name pos:start="51:32" pos:end="51:36">errno</name></expr></argument>, <argument pos:start="51:39" pos:end="51:59"><expr pos:start="51:39" pos:end="51:59"><literal type="string" pos:start="51:39" pos:end="51:59">"failed to read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:65"><expr pos:start="53:9" pos:end="53:64"><call pos:start="53:9" pos:end="53:64"><name pos:start="53:9" pos:end="53:12">slog</name><argument_list pos:start="53:13" pos:end="53:64">(<argument pos:start="53:14" pos:end="53:55"><expr pos:start="53:14" pos:end="53:55"><literal type="string" pos:start="53:14" pos:end="53:48">"guest-file-read failed, handle: %"</literal> <name pos:start="53:50" pos:end="53:55">PRId64</name></expr></argument>, <argument pos:start="53:58" pos:end="53:63"><expr pos:start="53:58" pos:end="53:63"><name pos:start="53:58" pos:end="53:63">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="71:5">else <block pos:start="55:12" pos:end="71:5">{<block_content pos:start="57:9" pos:end="69:9">

        <expr_stmt pos:start="57:9" pos:end="57:28"><expr pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:11">buf</name><index pos:start="57:12" pos:end="57:23">[<expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:22">read_count</name></expr>]</index></name> <operator pos:start="57:25" pos:end="57:25">=</operator> <literal type="number" pos:start="57:27" pos:end="57:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:53"><expr pos:start="59:9" pos:end="59:52"><name pos:start="59:9" pos:end="59:17">read_data</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:52"><name pos:start="59:21" pos:end="59:29">g_malloc0</name><argument_list pos:start="59:30" pos:end="59:52">(<argument pos:start="59:31" pos:end="59:51"><expr pos:start="59:31" pos:end="59:51"><sizeof pos:start="59:31" pos:end="59:51">sizeof<argument_list pos:start="59:37" pos:end="59:51">(<argument pos:start="59:38" pos:end="59:50"><expr pos:start="59:38" pos:end="59:50"><name pos:start="59:38" pos:end="59:50">GuestFileRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:17">read_data</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:24">count</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <name pos:start="61:28" pos:end="61:37">read_count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:17">read_data</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:22">eof</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <call pos:start="63:26" pos:end="63:33"><name pos:start="63:26" pos:end="63:29">feof</name><argument_list pos:start="63:30" pos:end="63:33">(<argument pos:start="63:31" pos:end="63:32"><expr pos:start="63:31" pos:end="63:32"><name pos:start="63:31" pos:end="63:32">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:23">(<expr pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:22">read_count</name></expr>)</condition> <block pos:start="65:25" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:66">

            <expr_stmt pos:start="67:13" pos:end="67:66"><expr pos:start="67:13" pos:end="67:65"><name pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:21">read_data</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:30">buf_b64</name></name> <operator pos:start="67:32" pos:end="67:32">=</operator> <call pos:start="67:34" pos:end="67:65"><name pos:start="67:34" pos:end="67:48">g_base64_encode</name><argument_list pos:start="67:49" pos:end="67:65">(<argument pos:start="67:50" pos:end="67:52"><expr pos:start="67:50" pos:end="67:52"><name pos:start="67:50" pos:end="67:52">buf</name></expr></argument>, <argument pos:start="67:55" pos:end="67:64"><expr pos:start="67:55" pos:end="67:64"><name pos:start="67:55" pos:end="67:64">read_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:16"><expr pos:start="73:5" pos:end="73:15"><call pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:15">(<argument pos:start="73:12" pos:end="73:14"><expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:17"><expr pos:start="75:5" pos:end="75:16"><call pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:12">clearerr</name><argument_list pos:start="75:13" pos:end="75:16">(<argument pos:start="75:14" pos:end="75:15"><expr pos:start="75:14" pos:end="75:15"><name pos:start="75:14" pos:end="75:15">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:21">return <expr pos:start="79:12" pos:end="79:20"><name pos:start="79:12" pos:end="79:20">read_data</name></expr>;</return>

</block_content>}</block></function>
</unit>
