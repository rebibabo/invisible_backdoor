<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17556.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">build_table</name><parameter_list pos:start="1:23" pos:end="11:69">(<parameter pos:start="1:24" pos:end="1:31"><decl pos:start="1:24" pos:end="1:31"><type pos:start="1:24" pos:end="1:31"><name pos:start="1:24" pos:end="1:26">VLC</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">vlc</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:36">int</name></type> <name pos:start="1:38" pos:end="1:50">table_nb_bits</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:26">int</name></type> <name pos:start="3:28" pos:end="3:35">nb_codes</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:39"><decl pos:start="5:24" pos:end="5:39"><type pos:start="5:24" pos:end="5:39"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:33">void</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:39">bits</name></decl></parameter>, <parameter pos:start="5:42" pos:end="5:54"><decl pos:start="5:42" pos:end="5:54"><type pos:start="5:42" pos:end="5:54"><name pos:start="5:42" pos:end="5:44">int</name></type> <name pos:start="5:46" pos:end="5:54">bits_wrap</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:69"><decl pos:start="5:57" pos:end="5:69"><type pos:start="5:57" pos:end="5:69"><name pos:start="5:57" pos:end="5:59">int</name></type> <name pos:start="5:61" pos:end="5:69">bits_size</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:40"><decl pos:start="7:24" pos:end="7:40"><type pos:start="7:24" pos:end="7:40"><specifier pos:start="7:24" pos:end="7:28">const</specifier> <name pos:start="7:30" pos:end="7:33">void</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:40">codes</name></decl></parameter>, <parameter pos:start="7:43" pos:end="7:56"><decl pos:start="7:43" pos:end="7:56"><type pos:start="7:43" pos:end="7:56"><name pos:start="7:43" pos:end="7:45">int</name></type> <name pos:start="7:47" pos:end="7:56">codes_wrap</name></decl></parameter>, <parameter pos:start="7:59" pos:end="7:72"><decl pos:start="7:59" pos:end="7:72"><type pos:start="7:59" pos:end="7:72"><name pos:start="7:59" pos:end="7:61">int</name></type> <name pos:start="7:63" pos:end="7:72">codes_size</name></decl></parameter>,

                       <parameter pos:start="9:24" pos:end="9:42"><decl pos:start="9:24" pos:end="9:42"><type pos:start="9:24" pos:end="9:42"><specifier pos:start="9:24" pos:end="9:28">const</specifier> <name pos:start="9:30" pos:end="9:33">void</name> <modifier pos:start="9:35" pos:end="9:35">*</modifier></type><name pos:start="9:36" pos:end="9:42">symbols</name></decl></parameter>, <parameter pos:start="9:45" pos:end="9:60"><decl pos:start="9:45" pos:end="9:60"><type pos:start="9:45" pos:end="9:60"><name pos:start="9:45" pos:end="9:47">int</name></type> <name pos:start="9:49" pos:end="9:60">symbols_wrap</name></decl></parameter>, <parameter pos:start="9:63" pos:end="9:78"><decl pos:start="9:63" pos:end="9:78"><type pos:start="9:63" pos:end="9:78"><name pos:start="9:63" pos:end="9:65">int</name></type> <name pos:start="9:67" pos:end="9:78">symbols_size</name></decl></parameter>,

                       <parameter pos:start="11:24" pos:end="11:43"><decl pos:start="11:24" pos:end="11:43"><type pos:start="11:24" pos:end="11:43"><name pos:start="11:24" pos:end="11:31">uint32_t</name></type> <name pos:start="11:33" pos:end="11:43">code_prefix</name></decl></parameter>, <parameter pos:start="11:46" pos:end="11:57"><decl pos:start="11:46" pos:end="11:57"><type pos:start="11:46" pos:end="11:57"><name pos:start="11:46" pos:end="11:48">int</name></type> <name pos:start="11:50" pos:end="11:57">n_prefix</name></decl></parameter>, <parameter pos:start="11:60" pos:end="11:68"><decl pos:start="11:60" pos:end="11:68"><type pos:start="11:60" pos:end="11:68"><name pos:start="11:60" pos:end="11:62">int</name></type> <name pos:start="11:64" pos:end="11:68">flags</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="211:1">{<block_content pos:start="15:5" pos:end="209:23">

    <decl_stmt pos:start="15:5" pos:end="15:81"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">j</name></decl>, <decl pos:start="15:15" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:15">k</name></decl>, <decl pos:start="15:18" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:18">n</name></decl>, <decl pos:start="15:21" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:30">table_size</name></decl>, <decl pos:start="15:33" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:33" pos:end="15:43">table_index</name></decl>, <decl pos:start="15:46" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:46" pos:end="15:47">nb</name></decl>, <decl pos:start="15:50" pos:end="15:51"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:50" pos:end="15:51">n1</name></decl>, <decl pos:start="15:54" pos:end="15:58"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:54" pos:end="15:58">index</name></decl>, <decl pos:start="15:61" pos:end="15:72"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:61" pos:end="15:72">code_prefix2</name></decl>, <decl pos:start="15:75" pos:end="15:80"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:75" pos:end="15:80">symbol</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:17">code</name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><call pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:12">VLC_TYPE</name> <argument_list pos:start="19:14" pos:end="19:21">(<argument pos:start="19:15" pos:end="19:20"><expr pos:start="19:15" pos:end="19:20"><operator pos:start="19:15" pos:end="19:15">*</operator><name pos:start="19:16" pos:end="19:20">table</name></expr></argument>)</argument_list></call><index pos:start="19:22" pos:end="19:24">[<expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">2</literal></expr>]</index></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:14">table_size</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">1</literal> <operator pos:start="23:20" pos:end="23:21">&lt;&lt;</operator> <name pos:start="23:23" pos:end="23:35">table_nb_bits</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:79"><name pos:start="25:5" pos:end="25:15">table_index</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:79"><name pos:start="25:19" pos:end="25:29">alloc_table</name><argument_list pos:start="25:30" pos:end="25:79">(<argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">vlc</name></expr></argument>, <argument pos:start="25:36" pos:end="25:45"><expr pos:start="25:36" pos:end="25:45"><name pos:start="25:36" pos:end="25:45">table_size</name></expr></argument>, <argument pos:start="25:48" pos:end="25:78"><expr pos:start="25:48" pos:end="25:78"><name pos:start="25:48" pos:end="25:52">flags</name> <operator pos:start="25:54" pos:end="25:54">&amp;</operator> <name pos:start="25:56" pos:end="25:78">INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="27:1" pos:end="27:16">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:16">DEBUG_VLC</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="34:0"><expr pos:start="29:5" pos:end="31:58"><call pos:start="29:5" pos:end="31:58"><name pos:start="29:5" pos:end="29:10">av_log</name><argument_list pos:start="29:11" pos:end="31:58">(<argument pos:start="29:12" pos:end="29:15"><expr pos:start="29:12" pos:end="29:15"><name pos:start="29:12" pos:end="29:15">NULL</name></expr></argument>,<argument pos:start="29:17" pos:end="29:28"><expr pos:start="29:17" pos:end="29:28"><name pos:start="29:17" pos:end="29:28">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="29:30" pos:end="29:79"><expr pos:start="29:30" pos:end="29:79"><literal type="string" pos:start="29:30" pos:end="29:79">"new table index=%d size=%d code_prefix=%x n=%d\n"</literal></expr></argument>,

           <argument pos:start="31:12" pos:end="31:22"><expr pos:start="31:12" pos:end="31:22"><name pos:start="31:12" pos:end="31:22">table_index</name></expr></argument>, <argument pos:start="31:25" pos:end="31:34"><expr pos:start="31:25" pos:end="31:34"><name pos:start="31:25" pos:end="31:34">table_size</name></expr></argument>, <argument pos:start="31:37" pos:end="31:47"><expr pos:start="31:37" pos:end="31:47"><name pos:start="31:37" pos:end="31:47">code_prefix</name></expr></argument>, <argument pos:start="31:50" pos:end="31:57"><expr pos:start="31:50" pos:end="31:57"><name pos:start="31:50" pos:end="31:57">n_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="35:5" pos:end="37:18"><if pos:start="35:5" pos:end="37:18">if <condition pos:start="35:8" pos:end="35:24">(<expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:19">table_index</name> <operator pos:start="35:21" pos:end="35:21">&lt;</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:18"><block_content pos:start="37:9" pos:end="37:18">

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:9">table</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <operator pos:start="39:13" pos:end="39:13">&amp;</operator><name pos:start="39:14" pos:end="39:36"><name pos:start="39:14" pos:end="39:16">vlc</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:23">table</name><index pos:start="39:24" pos:end="39:36">[<expr pos:start="39:25" pos:end="39:35"><name pos:start="39:25" pos:end="39:35">table_index</name></expr>]</index></name></expr>;</expr_stmt>



    <for pos:start="43:5" pos:end="49:5">for<control pos:start="43:8" pos:end="43:29">(<init pos:start="43:9" pos:end="43:12"><expr pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:9">i</name><operator pos:start="43:10" pos:end="43:10">=</operator><literal type="number" pos:start="43:11" pos:end="43:11">0</literal></expr>;</init><condition pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:13">i</name><operator pos:start="43:14" pos:end="43:14">&lt;</operator><name pos:start="43:15" pos:end="43:24">table_size</name></expr>;</condition><incr pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:26">i</name><operator pos:start="43:27" pos:end="43:28">++</operator></expr></incr>)</control> <block pos:start="43:31" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:25">

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:13">table</name><index pos:start="45:14" pos:end="45:16">[<expr pos:start="45:15" pos:end="45:15"><name pos:start="45:15" pos:end="45:15">i</name></expr>]</index><index pos:start="45:17" pos:end="45:19">[<expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">1</literal></expr>]</index></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="45:26" pos:end="45:31">//bits</comment>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:13">table</name><index pos:start="47:14" pos:end="47:16">[<expr pos:start="47:15" pos:end="47:15"><name pos:start="47:15" pos:end="47:15">i</name></expr>]</index><index pos:start="47:17" pos:end="47:19">[<expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>]</index></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <operator pos:start="47:23" pos:end="47:23">-</operator><literal type="number" pos:start="47:24" pos:end="47:24">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="47:27" pos:end="47:33">//codes</comment>

    </block_content>}</block></for>



    <comment type="block" pos:start="53:5" pos:end="53:65">/* first pass: map codes and compute auxillary table sizes */</comment>

    <for pos:start="55:5" pos:end="161:5">for<control pos:start="55:8" pos:end="55:27">(<init pos:start="55:9" pos:end="55:12"><expr pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:9">i</name><operator pos:start="55:10" pos:end="55:10">=</operator><literal type="number" pos:start="55:11" pos:end="55:11">0</literal></expr>;</init><condition pos:start="55:13" pos:end="55:23"><expr pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:13">i</name><operator pos:start="55:14" pos:end="55:14">&lt;</operator><name pos:start="55:15" pos:end="55:22">nb_codes</name></expr>;</condition><incr pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><name pos:start="55:24" pos:end="55:24">i</name><operator pos:start="55:25" pos:end="55:26">++</operator></expr></incr>)</control> <block pos:start="55:29" pos:end="161:5">{<block_content pos:start="57:9" pos:end="159:9">

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><call pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:16">GET_DATA</name><argument_list pos:start="57:17" pos:end="57:50">(<argument pos:start="57:18" pos:end="57:18"><expr pos:start="57:18" pos:end="57:18"><name pos:start="57:18" pos:end="57:18">n</name></expr></argument>, <argument pos:start="57:21" pos:end="57:24"><expr pos:start="57:21" pos:end="57:24"><name pos:start="57:21" pos:end="57:24">bits</name></expr></argument>, <argument pos:start="57:27" pos:end="57:27"><expr pos:start="57:27" pos:end="57:27"><name pos:start="57:27" pos:end="57:27">i</name></expr></argument>, <argument pos:start="57:30" pos:end="57:38"><expr pos:start="57:30" pos:end="57:38"><name pos:start="57:30" pos:end="57:38">bits_wrap</name></expr></argument>, <argument pos:start="57:41" pos:end="57:49"><expr pos:start="57:41" pos:end="57:49"><name pos:start="57:41" pos:end="57:49">bits_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><call pos:start="59:9" pos:end="59:56"><name pos:start="59:9" pos:end="59:16">GET_DATA</name><argument_list pos:start="59:17" pos:end="59:56">(<argument pos:start="59:18" pos:end="59:21"><expr pos:start="59:18" pos:end="59:21"><name pos:start="59:18" pos:end="59:21">code</name></expr></argument>, <argument pos:start="59:24" pos:end="59:28"><expr pos:start="59:24" pos:end="59:28"><name pos:start="59:24" pos:end="59:28">codes</name></expr></argument>, <argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><name pos:start="59:31" pos:end="59:31">i</name></expr></argument>, <argument pos:start="59:34" pos:end="59:43"><expr pos:start="59:34" pos:end="59:43"><name pos:start="59:34" pos:end="59:43">codes_wrap</name></expr></argument>, <argument pos:start="59:46" pos:end="59:55"><expr pos:start="59:46" pos:end="59:55"><name pos:start="59:46" pos:end="59:55">codes_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="61:9" pos:end="61:41">/* we accept tables with holes */</comment>

        <if_stmt pos:start="63:9" pos:end="65:21"><if pos:start="63:9" pos:end="65:21">if <condition pos:start="63:12" pos:end="63:19">(<expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:13">n</name> <operator pos:start="63:15" pos:end="63:16">&lt;=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:21"><block_content pos:start="65:13" pos:end="65:21">

            <continue pos:start="65:13" pos:end="65:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="76:0"><if pos:start="67:9" pos:end="69:23">if <condition pos:start="67:12" pos:end="67:21">(<expr pos:start="67:13" pos:end="67:20"><operator pos:start="67:13" pos:end="67:13">!</operator><name pos:start="67:14" pos:end="67:20">symbols</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:23"><block_content pos:start="69:13" pos:end="69:23">

            <expr_stmt pos:start="69:13" pos:end="69:23"><expr pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:18">symbol</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:22">i</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="71:9" pos:end="76:0">else<block type="pseudo" pos:start="73:13" pos:end="76:0"><block_content pos:start="73:13" pos:end="76:0">

            <expr_stmt pos:start="73:13" pos:end="76:0"><expr pos:start="73:13" pos:end="73:68"><call pos:start="73:13" pos:end="73:68"><name pos:start="73:13" pos:end="73:20">GET_DATA</name><argument_list pos:start="73:21" pos:end="73:68">(<argument pos:start="73:22" pos:end="73:27"><expr pos:start="73:22" pos:end="73:27"><name pos:start="73:22" pos:end="73:27">symbol</name></expr></argument>, <argument pos:start="73:30" pos:end="73:36"><expr pos:start="73:30" pos:end="73:36"><name pos:start="73:30" pos:end="73:36">symbols</name></expr></argument>, <argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><name pos:start="73:39" pos:end="73:39">i</name></expr></argument>, <argument pos:start="73:42" pos:end="73:53"><expr pos:start="73:42" pos:end="73:53"><name pos:start="73:42" pos:end="73:53">symbols_wrap</name></expr></argument>, <argument pos:start="73:56" pos:end="73:67"><expr pos:start="73:56" pos:end="73:67"><name pos:start="73:56" pos:end="73:67">symbols_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if pos:start="75:1" pos:end="75:27">#<cpp:directive pos:start="75:2" pos:end="75:3">if</cpp:directive> <expr pos:start="75:5" pos:end="75:27"><call pos:start="75:5" pos:end="75:22"><name pos:start="75:5" pos:end="75:11">defined</name><argument_list pos:start="75:12" pos:end="75:22">(<argument pos:start="75:13" pos:end="75:21"><expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:21">DEBUG_VLC</name></expr></argument>)</argument_list></call> <operator pos:start="75:24" pos:end="75:25">&amp;&amp;</operator> <literal type="number" pos:start="75:27" pos:end="75:27">0</literal></expr></cpp:if>

        <expr_stmt pos:start="77:9" pos:end="80:0"><expr pos:start="77:9" pos:end="77:69"><call pos:start="77:9" pos:end="77:69"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:69">(<argument pos:start="77:16" pos:end="77:19"><expr pos:start="77:16" pos:end="77:19"><name pos:start="77:16" pos:end="77:19">NULL</name></expr></argument>,<argument pos:start="77:21" pos:end="77:32"><expr pos:start="77:21" pos:end="77:32"><name pos:start="77:21" pos:end="77:32">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="77:34" pos:end="77:56"><expr pos:start="77:34" pos:end="77:56"><literal type="string" pos:start="77:34" pos:end="77:56">"i=%d n=%d code=0x%x\n"</literal></expr></argument>, <argument pos:start="77:59" pos:end="77:59"><expr pos:start="77:59" pos:end="77:59"><name pos:start="77:59" pos:end="77:59">i</name></expr></argument>, <argument pos:start="77:62" pos:end="77:62"><expr pos:start="77:62" pos:end="77:62"><name pos:start="77:62" pos:end="77:62">n</name></expr></argument>, <argument pos:start="77:65" pos:end="77:68"><expr pos:start="77:65" pos:end="77:68"><name pos:start="77:65" pos:end="77:68">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="81:9" pos:end="81:60">/* if code matches the prefix, it is in the table */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:9">n</name> <operator pos:start="83:11" pos:end="83:12">-=</operator> <name pos:start="83:14" pos:end="83:21">n_prefix</name></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="91:36"><if pos:start="85:9" pos:end="87:81">if<condition pos:start="85:11" pos:end="85:31">(<expr pos:start="85:12" pos:end="85:30"><name pos:start="85:12" pos:end="85:16">flags</name> <operator pos:start="85:18" pos:end="85:18">&amp;</operator> <name pos:start="85:20" pos:end="85:30">INIT_VLC_LE</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:81"><block_content pos:start="87:13" pos:end="87:81">

            <expr_stmt pos:start="87:13" pos:end="87:81"><expr pos:start="87:13" pos:end="87:80"><name pos:start="87:13" pos:end="87:24">code_prefix2</name><operator pos:start="87:25" pos:end="87:25">=</operator> <name pos:start="87:27" pos:end="87:30">code</name> <operator pos:start="87:32" pos:end="87:32">&amp;</operator> <operator pos:start="87:34" pos:end="87:34">(</operator><ternary pos:start="87:35" pos:end="87:79"><condition pos:start="87:35" pos:end="87:48"><expr pos:start="87:35" pos:end="87:46"><name pos:start="87:35" pos:end="87:42">n_prefix</name><operator pos:start="87:43" pos:end="87:44">&gt;=</operator><literal type="number" pos:start="87:45" pos:end="87:46">32</literal></expr> ?</condition><then pos:start="87:50" pos:end="87:59"> <expr pos:start="87:50" pos:end="87:59"><literal type="number" pos:start="87:50" pos:end="87:59">0xffffffff</literal></expr> </then><else pos:start="87:61" pos:end="87:79">: <expr pos:start="87:63" pos:end="87:79"><operator pos:start="87:63" pos:end="87:63">(</operator><literal type="number" pos:start="87:64" pos:end="87:64">1</literal> <operator pos:start="87:66" pos:end="87:67">&lt;&lt;</operator> <name pos:start="87:69" pos:end="87:76">n_prefix</name><operator pos:start="87:77" pos:end="87:77">)</operator><operator pos:start="87:78" pos:end="87:78">-</operator><literal type="number" pos:start="87:79" pos:end="87:79">1</literal></expr></else></ternary><operator pos:start="87:80" pos:end="87:80">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="89:9" pos:end="91:36">else<block type="pseudo" pos:start="91:13" pos:end="91:36"><block_content pos:start="91:13" pos:end="91:36">

            <expr_stmt pos:start="91:13" pos:end="91:36"><expr pos:start="91:13" pos:end="91:35"><name pos:start="91:13" pos:end="91:24">code_prefix2</name><operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:30">code</name> <operator pos:start="91:32" pos:end="91:33">&gt;&gt;</operator> <name pos:start="91:35" pos:end="91:35">n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="93:9" pos:end="159:9"><if pos:start="93:9" pos:end="159:9">if <condition pos:start="93:12" pos:end="93:49">(<expr pos:start="93:13" pos:end="93:48"><name pos:start="93:13" pos:end="93:13">n</name> <operator pos:start="93:15" pos:end="93:15">&gt;</operator> <literal type="number" pos:start="93:17" pos:end="93:17">0</literal> <operator pos:start="93:19" pos:end="93:20">&amp;&amp;</operator> <name pos:start="93:22" pos:end="93:33">code_prefix2</name> <operator pos:start="93:35" pos:end="93:36">==</operator> <name pos:start="93:38" pos:end="93:48">code_prefix</name></expr>)</condition> <block pos:start="93:51" pos:end="159:9">{<block_content pos:start="95:13" pos:end="157:13">

            <if_stmt pos:start="95:13" pos:end="157:13"><if pos:start="95:13" pos:end="133:13">if <condition pos:start="95:16" pos:end="95:35">(<expr pos:start="95:17" pos:end="95:34"><name pos:start="95:17" pos:end="95:17">n</name> <operator pos:start="95:19" pos:end="95:20">&lt;=</operator> <name pos:start="95:22" pos:end="95:34">table_nb_bits</name></expr>)</condition> <block pos:start="95:37" pos:end="133:13">{<block_content pos:start="99:17" pos:end="131:17">

                <comment type="block" pos:start="97:17" pos:end="97:50">/* no need to add another table */</comment>

                <expr_stmt pos:start="99:17" pos:end="99:69"><expr pos:start="99:17" pos:end="99:68"><name pos:start="99:17" pos:end="99:17">j</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <operator pos:start="99:21" pos:end="99:21">(</operator><name pos:start="99:22" pos:end="99:25">code</name> <operator pos:start="99:27" pos:end="99:28">&lt;&lt;</operator> <operator pos:start="99:30" pos:end="99:30">(</operator><name pos:start="99:31" pos:end="99:43">table_nb_bits</name> <operator pos:start="99:45" pos:end="99:45">-</operator> <name pos:start="99:47" pos:end="99:47">n</name><operator pos:start="99:48" pos:end="99:48">)</operator><operator pos:start="99:49" pos:end="99:49">)</operator> <operator pos:start="99:51" pos:end="99:51">&amp;</operator> <operator pos:start="99:53" pos:end="99:53">(</operator><name pos:start="99:54" pos:end="99:63">table_size</name> <operator pos:start="99:65" pos:end="99:65">-</operator> <literal type="number" pos:start="99:67" pos:end="99:67">1</literal><operator pos:start="99:68" pos:end="99:68">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:46"><expr pos:start="101:17" pos:end="101:45"><name pos:start="101:17" pos:end="101:18">nb</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">1</literal> <operator pos:start="101:24" pos:end="101:25">&lt;&lt;</operator> <operator pos:start="101:27" pos:end="101:27">(</operator><name pos:start="101:28" pos:end="101:40">table_nb_bits</name> <operator pos:start="101:42" pos:end="101:42">-</operator> <name pos:start="101:44" pos:end="101:44">n</name><operator pos:start="101:45" pos:end="101:45">)</operator></expr>;</expr_stmt>

                <for pos:start="103:17" pos:end="131:17">for<control pos:start="103:20" pos:end="103:33">(<init pos:start="103:21" pos:end="103:24"><expr pos:start="103:21" pos:end="103:23"><name pos:start="103:21" pos:end="103:21">k</name><operator pos:start="103:22" pos:end="103:22">=</operator><literal type="number" pos:start="103:23" pos:end="103:23">0</literal></expr>;</init><condition pos:start="103:25" pos:end="103:29"><expr pos:start="103:25" pos:end="103:28"><name pos:start="103:25" pos:end="103:25">k</name><operator pos:start="103:26" pos:end="103:26">&lt;</operator><name pos:start="103:27" pos:end="103:28">nb</name></expr>;</condition><incr pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><name pos:start="103:30" pos:end="103:30">k</name><operator pos:start="103:31" pos:end="103:32">++</operator></expr></incr>)</control> <block pos:start="103:35" pos:end="131:17">{<block_content pos:start="105:21" pos:end="129:24">

                    <if_stmt pos:start="105:21" pos:end="110:0"><if pos:start="105:21" pos:end="110:0">if<condition pos:start="105:23" pos:end="105:43">(<expr pos:start="105:24" pos:end="105:42"><name pos:start="105:24" pos:end="105:28">flags</name> <operator pos:start="105:30" pos:end="105:30">&amp;</operator> <name pos:start="105:32" pos:end="105:42">INIT_VLC_LE</name></expr>)</condition><block type="pseudo" pos:start="107:25" pos:end="110:0"><block_content pos:start="107:25" pos:end="110:0">

                        <expr_stmt pos:start="107:25" pos:end="110:0"><expr pos:start="107:25" pos:end="107:55"><name pos:start="107:25" pos:end="107:25">j</name> <operator pos:start="107:27" pos:end="107:27">=</operator> <operator pos:start="107:29" pos:end="107:29">(</operator><name pos:start="107:30" pos:end="107:33">code</name> <operator pos:start="107:35" pos:end="107:36">&gt;&gt;</operator> <name pos:start="107:38" pos:end="107:45">n_prefix</name><operator pos:start="107:46" pos:end="107:46">)</operator> <operator pos:start="107:48" pos:end="107:48">+</operator> <operator pos:start="107:50" pos:end="107:50">(</operator><name pos:start="107:51" pos:end="107:51">k</name><operator pos:start="107:52" pos:end="107:53">&lt;&lt;</operator><name pos:start="107:54" pos:end="107:54">n</name><operator pos:start="107:55" pos:end="107:55">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="109:1" pos:end="109:16">#<cpp:directive pos:start="109:2" pos:end="109:6">ifdef</cpp:directive> <name pos:start="109:8" pos:end="109:16">DEBUG_VLC</name></cpp:ifdef>

                    <expr_stmt pos:start="111:21" pos:end="116:0"><expr pos:start="111:21" pos:end="113:35"><call pos:start="111:21" pos:end="113:35"><name pos:start="111:21" pos:end="111:26">av_log</name><argument_list pos:start="111:27" pos:end="113:35">(<argument pos:start="111:28" pos:end="111:31"><expr pos:start="111:28" pos:end="111:31"><name pos:start="111:28" pos:end="111:31">NULL</name></expr></argument>, <argument pos:start="111:34" pos:end="111:45"><expr pos:start="111:34" pos:end="111:45"><name pos:start="111:34" pos:end="111:45">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="111:48" pos:end="111:68"><expr pos:start="111:48" pos:end="111:68"><literal type="string" pos:start="111:48" pos:end="111:68">"%4x: code=%d n=%d\n"</literal></expr></argument>,

                           <argument pos:start="113:28" pos:end="113:28"><expr pos:start="113:28" pos:end="113:28"><name pos:start="113:28" pos:end="113:28">j</name></expr></argument>, <argument pos:start="113:31" pos:end="113:31"><expr pos:start="113:31" pos:end="113:31"><name pos:start="113:31" pos:end="113:31">i</name></expr></argument>, <argument pos:start="113:34" pos:end="113:34"><expr pos:start="113:34" pos:end="113:34"><name pos:start="113:34" pos:end="113:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="117:21" pos:end="123:21"><if pos:start="117:21" pos:end="123:21">if <condition pos:start="117:24" pos:end="117:50">(<expr pos:start="117:25" pos:end="117:49"><name pos:start="117:25" pos:end="117:35"><name pos:start="117:25" pos:end="117:29">table</name><index pos:start="117:30" pos:end="117:32">[<expr pos:start="117:31" pos:end="117:31"><name pos:start="117:31" pos:end="117:31">j</name></expr>]</index><index pos:start="117:33" pos:end="117:35">[<expr pos:start="117:34" pos:end="117:34"><literal type="number" pos:start="117:34" pos:end="117:34">1</literal></expr>]</index></name> <comment type="block" pos:start="117:37" pos:end="117:44">/*bits*/</comment> <operator pos:start="117:46" pos:end="117:47">!=</operator> <literal type="number" pos:start="117:49" pos:end="117:49">0</literal></expr>)</condition> <block pos:start="117:52" pos:end="123:21">{<block_content pos:start="119:25" pos:end="121:34">

                        <expr_stmt pos:start="119:25" pos:end="119:72"><expr pos:start="119:25" pos:end="119:71"><call pos:start="119:25" pos:end="119:71"><name pos:start="119:25" pos:end="119:30">av_log</name><argument_list pos:start="119:31" pos:end="119:71">(<argument pos:start="119:32" pos:end="119:35"><expr pos:start="119:32" pos:end="119:35"><name pos:start="119:32" pos:end="119:35">NULL</name></expr></argument>, <argument pos:start="119:38" pos:end="119:49"><expr pos:start="119:38" pos:end="119:49"><name pos:start="119:38" pos:end="119:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:52" pos:end="119:70"><expr pos:start="119:52" pos:end="119:70"><literal type="string" pos:start="119:52" pos:end="119:70">"incorrect codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="121:25" pos:end="121:34">return <expr pos:start="121:32" pos:end="121:33"><operator pos:start="121:32" pos:end="121:32">-</operator><literal type="number" pos:start="121:33" pos:end="121:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:36"><expr pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:31"><name pos:start="125:21" pos:end="125:25">table</name><index pos:start="125:26" pos:end="125:28">[<expr pos:start="125:27" pos:end="125:27"><name pos:start="125:27" pos:end="125:27">j</name></expr>]</index><index pos:start="125:29" pos:end="125:31">[<expr pos:start="125:30" pos:end="125:30"><literal type="number" pos:start="125:30" pos:end="125:30">1</literal></expr>]</index></name> <operator pos:start="125:33" pos:end="125:33">=</operator> <name pos:start="125:35" pos:end="125:35">n</name></expr>;</expr_stmt> <comment type="line" pos:start="125:38" pos:end="125:43">//bits</comment>

                    <expr_stmt pos:start="127:21" pos:end="127:41"><expr pos:start="127:21" pos:end="127:40"><name pos:start="127:21" pos:end="127:31"><name pos:start="127:21" pos:end="127:25">table</name><index pos:start="127:26" pos:end="127:28">[<expr pos:start="127:27" pos:end="127:27"><name pos:start="127:27" pos:end="127:27">j</name></expr>]</index><index pos:start="127:29" pos:end="127:31">[<expr pos:start="127:30" pos:end="127:30"><literal type="number" pos:start="127:30" pos:end="127:30">0</literal></expr>]</index></name> <operator pos:start="127:33" pos:end="127:33">=</operator> <name pos:start="127:35" pos:end="127:40">symbol</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:24"><expr pos:start="129:21" pos:end="129:23"><name pos:start="129:21" pos:end="129:21">j</name><operator pos:start="129:22" pos:end="129:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="133:15" pos:end="157:13">else <block pos:start="133:20" pos:end="157:13">{<block_content pos:start="135:17" pos:end="155:34">

                <expr_stmt pos:start="135:17" pos:end="135:35"><expr pos:start="135:17" pos:end="135:34"><name pos:start="135:17" pos:end="135:17">n</name> <operator pos:start="135:19" pos:end="135:20">-=</operator> <name pos:start="135:22" pos:end="135:34">table_nb_bits</name></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="140:0"><expr pos:start="137:17" pos:end="137:97"><name pos:start="137:17" pos:end="137:17">j</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <operator pos:start="137:21" pos:end="137:21">(</operator><name pos:start="137:22" pos:end="137:25">code</name> <operator pos:start="137:27" pos:end="137:28">&gt;&gt;</operator> <operator pos:start="137:30" pos:end="137:30">(</operator><ternary pos:start="137:31" pos:end="137:66"><condition pos:start="137:31" pos:end="137:53"><expr pos:start="137:31" pos:end="137:51"><operator pos:start="137:31" pos:end="137:31">(</operator><name pos:start="137:32" pos:end="137:36">flags</name> <operator pos:start="137:38" pos:end="137:38">&amp;</operator> <name pos:start="137:40" pos:end="137:50">INIT_VLC_LE</name><operator pos:start="137:51" pos:end="137:51">)</operator></expr> ?</condition><then pos:start="137:55" pos:end="137:62"> <expr pos:start="137:55" pos:end="137:62"><name pos:start="137:55" pos:end="137:62">n_prefix</name></expr> </then><else pos:start="137:64" pos:end="137:66">: <expr pos:start="137:66" pos:end="137:66"><name pos:start="137:66" pos:end="137:66">n</name></expr></else></ternary><operator pos:start="137:67" pos:end="137:67">)</operator><operator pos:start="137:68" pos:end="137:68">)</operator> <operator pos:start="137:70" pos:end="137:70">&amp;</operator> <operator pos:start="137:72" pos:end="137:72">(</operator><operator pos:start="137:73" pos:end="137:73">(</operator><literal type="number" pos:start="137:74" pos:end="137:74">1</literal> <operator pos:start="137:76" pos:end="137:77">&lt;&lt;</operator> <name pos:start="137:79" pos:end="137:91">table_nb_bits</name><operator pos:start="137:92" pos:end="137:92">)</operator> <operator pos:start="137:94" pos:end="137:94">-</operator> <literal type="number" pos:start="137:96" pos:end="137:96">1</literal><operator pos:start="137:97" pos:end="137:97">)</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="139:1" pos:end="139:16">#<cpp:directive pos:start="139:2" pos:end="139:6">ifdef</cpp:directive> <name pos:start="139:8" pos:end="139:16">DEBUG_VLC</name></cpp:ifdef>

                <expr_stmt pos:start="141:17" pos:end="146:0"><expr pos:start="141:17" pos:end="143:28"><call pos:start="141:17" pos:end="143:28"><name pos:start="141:17" pos:end="141:22">av_log</name><argument_list pos:start="141:23" pos:end="143:28">(<argument pos:start="141:24" pos:end="141:27"><expr pos:start="141:24" pos:end="141:27"><name pos:start="141:24" pos:end="141:27">NULL</name></expr></argument>,<argument pos:start="141:29" pos:end="141:40"><expr pos:start="141:29" pos:end="141:40"><name pos:start="141:29" pos:end="141:40">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="141:42" pos:end="141:65"><expr pos:start="141:42" pos:end="141:65"><literal type="string" pos:start="141:42" pos:end="141:65">"%4x: n=%d (subtable)\n"</literal></expr></argument>,

                       <argument pos:start="143:24" pos:end="143:24"><expr pos:start="143:24" pos:end="143:24"><name pos:start="143:24" pos:end="143:24">j</name></expr></argument>, <argument pos:start="143:27" pos:end="143:27"><expr pos:start="143:27" pos:end="143:27"><name pos:start="143:27" pos:end="143:27">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

                <comment type="block" pos:start="147:17" pos:end="147:40">/* compute table size */</comment>

                <expr_stmt pos:start="149:17" pos:end="149:34"><expr pos:start="149:17" pos:end="149:33"><name pos:start="149:17" pos:end="149:18">n1</name> <operator pos:start="149:20" pos:end="149:20">=</operator> <operator pos:start="149:22" pos:end="149:22">-</operator><name pos:start="149:23" pos:end="149:33"><name pos:start="149:23" pos:end="149:27">table</name><index pos:start="149:28" pos:end="149:30">[<expr pos:start="149:29" pos:end="149:29"><name pos:start="149:29" pos:end="149:29">j</name></expr>]</index><index pos:start="149:31" pos:end="149:33">[<expr pos:start="149:32" pos:end="149:32"><literal type="number" pos:start="149:32" pos:end="149:32">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="line" pos:start="149:36" pos:end="149:41">//bits</comment>

                <if_stmt pos:start="151:17" pos:end="153:27"><if pos:start="151:17" pos:end="153:27">if <condition pos:start="151:20" pos:end="151:27">(<expr pos:start="151:21" pos:end="151:26"><name pos:start="151:21" pos:end="151:21">n</name> <operator pos:start="151:23" pos:end="151:23">&gt;</operator> <name pos:start="151:25" pos:end="151:26">n1</name></expr>)</condition><block type="pseudo" pos:start="153:21" pos:end="153:27"><block_content pos:start="153:21" pos:end="153:27">

                    <expr_stmt pos:start="153:21" pos:end="153:27"><expr pos:start="153:21" pos:end="153:26"><name pos:start="153:21" pos:end="153:22">n1</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <name pos:start="153:26" pos:end="153:26">n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:34"><expr pos:start="155:17" pos:end="155:33"><name pos:start="155:17" pos:end="155:27"><name pos:start="155:17" pos:end="155:21">table</name><index pos:start="155:22" pos:end="155:24">[<expr pos:start="155:23" pos:end="155:23"><name pos:start="155:23" pos:end="155:23">j</name></expr>]</index><index pos:start="155:25" pos:end="155:27">[<expr pos:start="155:26" pos:end="155:26"><literal type="number" pos:start="155:26" pos:end="155:26">1</literal></expr>]</index></name> <operator pos:start="155:29" pos:end="155:29">=</operator> <operator pos:start="155:31" pos:end="155:31">-</operator><name pos:start="155:32" pos:end="155:33">n1</name></expr>;</expr_stmt> <comment type="line" pos:start="155:36" pos:end="155:41">//bits</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="165:5" pos:end="165:57">/* second pass : fill auxillary tables recursively */</comment>

    <for pos:start="167:5" pos:end="207:5">for<control pos:start="167:8" pos:end="167:29">(<init pos:start="167:9" pos:end="167:12"><expr pos:start="167:9" pos:end="167:11"><name pos:start="167:9" pos:end="167:9">i</name><operator pos:start="167:10" pos:end="167:10">=</operator><literal type="number" pos:start="167:11" pos:end="167:11">0</literal></expr>;</init><condition pos:start="167:13" pos:end="167:25"><expr pos:start="167:13" pos:end="167:24"><name pos:start="167:13" pos:end="167:13">i</name><operator pos:start="167:14" pos:end="167:14">&lt;</operator><name pos:start="167:15" pos:end="167:24">table_size</name></expr>;</condition><incr pos:start="167:26" pos:end="167:28"><expr pos:start="167:26" pos:end="167:28"><name pos:start="167:26" pos:end="167:26">i</name><operator pos:start="167:27" pos:end="167:28">++</operator></expr></incr>)</control> <block pos:start="167:31" pos:end="207:5">{<block_content pos:start="169:9" pos:end="205:9">

        <expr_stmt pos:start="169:9" pos:end="169:24"><expr pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:9">n</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <name pos:start="169:13" pos:end="169:23"><name pos:start="169:13" pos:end="169:17">table</name><index pos:start="169:18" pos:end="169:20">[<expr pos:start="169:19" pos:end="169:19"><name pos:start="169:19" pos:end="169:19">i</name></expr>]</index><index pos:start="169:21" pos:end="169:23">[<expr pos:start="169:22" pos:end="169:22"><literal type="number" pos:start="169:22" pos:end="169:22">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="line" pos:start="169:26" pos:end="169:31">//bits</comment>

        <if_stmt pos:start="171:9" pos:end="205:9"><if pos:start="171:9" pos:end="205:9">if <condition pos:start="171:12" pos:end="171:18">(<expr pos:start="171:13" pos:end="171:17"><name pos:start="171:13" pos:end="171:13">n</name> <operator pos:start="171:15" pos:end="171:15">&lt;</operator> <literal type="number" pos:start="171:17" pos:end="171:17">0</literal></expr>)</condition> <block pos:start="171:20" pos:end="205:9">{<block_content pos:start="173:13" pos:end="203:32">

            <expr_stmt pos:start="173:13" pos:end="173:19"><expr pos:start="173:13" pos:end="173:18"><name pos:start="173:13" pos:end="173:13">n</name> <operator pos:start="173:15" pos:end="173:15">=</operator> <operator pos:start="173:17" pos:end="173:17">-</operator><name pos:start="173:18" pos:end="173:18">n</name></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="181:13"><if pos:start="175:13" pos:end="181:13">if <condition pos:start="175:16" pos:end="175:34">(<expr pos:start="175:17" pos:end="175:33"><name pos:start="175:17" pos:end="175:17">n</name> <operator pos:start="175:19" pos:end="175:19">&gt;</operator> <name pos:start="175:21" pos:end="175:33">table_nb_bits</name></expr>)</condition> <block pos:start="175:36" pos:end="181:13">{<block_content pos:start="177:17" pos:end="179:33">

                <expr_stmt pos:start="177:17" pos:end="177:34"><expr pos:start="177:17" pos:end="177:33"><name pos:start="177:17" pos:end="177:17">n</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <name pos:start="177:21" pos:end="177:33">table_nb_bits</name></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:33"><expr pos:start="179:17" pos:end="179:32"><name pos:start="179:17" pos:end="179:27"><name pos:start="179:17" pos:end="179:21">table</name><index pos:start="179:22" pos:end="179:24">[<expr pos:start="179:23" pos:end="179:23"><name pos:start="179:23" pos:end="179:23">i</name></expr>]</index><index pos:start="179:25" pos:end="179:27">[<expr pos:start="179:26" pos:end="179:26"><literal type="number" pos:start="179:26" pos:end="179:26">1</literal></expr>]</index></name> <operator pos:start="179:29" pos:end="179:29">=</operator> <operator pos:start="179:31" pos:end="179:31">-</operator><name pos:start="179:32" pos:end="179:32">n</name></expr>;</expr_stmt> <comment type="line" pos:start="179:35" pos:end="179:40">//bits</comment>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="183:13" pos:end="193:65"><expr pos:start="183:13" pos:end="193:64"><name pos:start="183:13" pos:end="183:17">index</name> <operator pos:start="183:19" pos:end="183:19">=</operator> <call pos:start="183:21" pos:end="193:64"><name pos:start="183:21" pos:end="183:31">build_table</name><argument_list pos:start="183:32" pos:end="193:64">(<argument pos:start="183:33" pos:end="183:35"><expr pos:start="183:33" pos:end="183:35"><name pos:start="183:33" pos:end="183:35">vlc</name></expr></argument>, <argument pos:start="183:38" pos:end="183:38"><expr pos:start="183:38" pos:end="183:38"><name pos:start="183:38" pos:end="183:38">n</name></expr></argument>, <argument pos:start="183:41" pos:end="183:48"><expr pos:start="183:41" pos:end="183:48"><name pos:start="183:41" pos:end="183:48">nb_codes</name></expr></argument>,

                                <argument pos:start="185:33" pos:end="185:36"><expr pos:start="185:33" pos:end="185:36"><name pos:start="185:33" pos:end="185:36">bits</name></expr></argument>, <argument pos:start="185:39" pos:end="185:47"><expr pos:start="185:39" pos:end="185:47"><name pos:start="185:39" pos:end="185:47">bits_wrap</name></expr></argument>, <argument pos:start="185:50" pos:end="185:58"><expr pos:start="185:50" pos:end="185:58"><name pos:start="185:50" pos:end="185:58">bits_size</name></expr></argument>,

                                <argument pos:start="187:33" pos:end="187:37"><expr pos:start="187:33" pos:end="187:37"><name pos:start="187:33" pos:end="187:37">codes</name></expr></argument>, <argument pos:start="187:40" pos:end="187:49"><expr pos:start="187:40" pos:end="187:49"><name pos:start="187:40" pos:end="187:49">codes_wrap</name></expr></argument>, <argument pos:start="187:52" pos:end="187:61"><expr pos:start="187:52" pos:end="187:61"><name pos:start="187:52" pos:end="187:61">codes_size</name></expr></argument>,

                                <argument pos:start="189:33" pos:end="189:39"><expr pos:start="189:33" pos:end="189:39"><name pos:start="189:33" pos:end="189:39">symbols</name></expr></argument>, <argument pos:start="189:42" pos:end="189:53"><expr pos:start="189:42" pos:end="189:53"><name pos:start="189:42" pos:end="189:53">symbols_wrap</name></expr></argument>, <argument pos:start="189:56" pos:end="189:67"><expr pos:start="189:56" pos:end="189:67"><name pos:start="189:56" pos:end="189:67">symbols_size</name></expr></argument>,

                                <argument pos:start="191:33" pos:end="191:126"><expr pos:start="191:33" pos:end="191:126"><ternary pos:start="191:33" pos:end="191:126"><condition pos:start="191:33" pos:end="191:55"><expr pos:start="191:33" pos:end="191:53"><operator pos:start="191:33" pos:end="191:33">(</operator><name pos:start="191:34" pos:end="191:38">flags</name> <operator pos:start="191:40" pos:end="191:40">&amp;</operator> <name pos:start="191:42" pos:end="191:52">INIT_VLC_LE</name><operator pos:start="191:53" pos:end="191:53">)</operator></expr> ?</condition><then pos:start="191:57" pos:end="191:87"> <expr pos:start="191:57" pos:end="191:87"><operator pos:start="191:57" pos:end="191:57">(</operator><name pos:start="191:58" pos:end="191:68">code_prefix</name> <operator pos:start="191:70" pos:end="191:70">|</operator> <operator pos:start="191:72" pos:end="191:72">(</operator><name pos:start="191:73" pos:end="191:73">i</name> <operator pos:start="191:75" pos:end="191:76">&lt;&lt;</operator> <name pos:start="191:78" pos:end="191:85">n_prefix</name><operator pos:start="191:86" pos:end="191:86">)</operator><operator pos:start="191:87" pos:end="191:87">)</operator></expr> </then><else pos:start="191:89" pos:end="191:126">: <expr pos:start="191:91" pos:end="191:126"><operator pos:start="191:91" pos:end="191:91">(</operator><operator pos:start="191:92" pos:end="191:92">(</operator><name pos:start="191:93" pos:end="191:103">code_prefix</name> <operator pos:start="191:105" pos:end="191:106">&lt;&lt;</operator> <name pos:start="191:108" pos:end="191:120">table_nb_bits</name><operator pos:start="191:121" pos:end="191:121">)</operator> <operator pos:start="191:123" pos:end="191:123">|</operator> <name pos:start="191:125" pos:end="191:125">i</name><operator pos:start="191:126" pos:end="191:126">)</operator></expr></else></ternary></expr></argument>,

                                <argument pos:start="193:33" pos:end="193:56"><expr pos:start="193:33" pos:end="193:56"><name pos:start="193:33" pos:end="193:40">n_prefix</name> <operator pos:start="193:42" pos:end="193:42">+</operator> <name pos:start="193:44" pos:end="193:56">table_nb_bits</name></expr></argument>, <argument pos:start="193:59" pos:end="193:63"><expr pos:start="193:59" pos:end="193:63"><name pos:start="193:59" pos:end="193:63">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="195:13" pos:end="197:26"><if pos:start="195:13" pos:end="197:26">if <condition pos:start="195:16" pos:end="195:26">(<expr pos:start="195:17" pos:end="195:25"><name pos:start="195:17" pos:end="195:21">index</name> <operator pos:start="195:23" pos:end="195:23">&lt;</operator> <literal type="number" pos:start="195:25" pos:end="195:25">0</literal></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:26"><block_content pos:start="197:17" pos:end="197:26">

                <return pos:start="197:17" pos:end="197:26">return <expr pos:start="197:24" pos:end="197:25"><operator pos:start="197:24" pos:end="197:24">-</operator><literal type="number" pos:start="197:25" pos:end="197:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="199:13" pos:end="199:63">/* note: realloc has been done, so reload tables */</comment>

            <expr_stmt pos:start="201:13" pos:end="201:45"><expr pos:start="201:13" pos:end="201:44"><name pos:start="201:13" pos:end="201:17">table</name> <operator pos:start="201:19" pos:end="201:19">=</operator> <operator pos:start="201:21" pos:end="201:21">&amp;</operator><name pos:start="201:22" pos:end="201:44"><name pos:start="201:22" pos:end="201:24">vlc</name><operator pos:start="201:25" pos:end="201:26">-&gt;</operator><name pos:start="201:27" pos:end="201:31">table</name><index pos:start="201:32" pos:end="201:44">[<expr pos:start="201:33" pos:end="201:43"><name pos:start="201:33" pos:end="201:43">table_index</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:32"><expr pos:start="203:13" pos:end="203:31"><name pos:start="203:13" pos:end="203:23"><name pos:start="203:13" pos:end="203:17">table</name><index pos:start="203:18" pos:end="203:20">[<expr pos:start="203:19" pos:end="203:19"><name pos:start="203:19" pos:end="203:19">i</name></expr>]</index><index pos:start="203:21" pos:end="203:23">[<expr pos:start="203:22" pos:end="203:22"><literal type="number" pos:start="203:22" pos:end="203:22">0</literal></expr>]</index></name> <operator pos:start="203:25" pos:end="203:25">=</operator> <name pos:start="203:27" pos:end="203:31">index</name></expr>;</expr_stmt> <comment type="line" pos:start="203:34" pos:end="203:39">//code</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="209:5" pos:end="209:23">return <expr pos:start="209:12" pos:end="209:22"><name pos:start="209:12" pos:end="209:22">table_index</name></expr>;</return>

</block_content>}</block></function>
</unit>
