<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3135.c" pos:tabs="8"><function pos:start="1:1" pos:end="563:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">ppc_core99_init</name> <parameter_list pos:start="1:29" pos:end="11:51">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:48"><name pos:start="1:30" pos:end="1:39">ram_addr_t</name></type> <name pos:start="1:41" pos:end="1:48">ram_size</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:52"><decl pos:start="3:30" pos:end="3:52"><type pos:start="3:30" pos:end="3:52"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:39">char</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:52">boot_device</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:56"><decl pos:start="5:30" pos:end="5:56"><type pos:start="5:30" pos:end="5:56"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:56">kernel_filename</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:55"><decl pos:start="7:30" pos:end="7:55"><type pos:start="7:30" pos:end="7:55"><specifier pos:start="7:30" pos:end="7:34">const</specifier> <name pos:start="7:36" pos:end="7:39">char</name> <modifier pos:start="7:41" pos:end="7:41">*</modifier></type><name pos:start="7:42" pos:end="7:55">kernel_cmdline</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:56"><decl pos:start="9:30" pos:end="9:56"><type pos:start="9:30" pos:end="9:56"><specifier pos:start="9:30" pos:end="9:34">const</specifier> <name pos:start="9:36" pos:end="9:39">char</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:56">initrd_filename</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:50"><decl pos:start="11:30" pos:end="11:50"><type pos:start="11:30" pos:end="11:50"><specifier pos:start="11:30" pos:end="11:34">const</specifier> <name pos:start="11:36" pos:end="11:39">char</name> <modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:50">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="563:1">{<block_content pos:start="15:5" pos:end="561:52">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">pic</name></decl>, <decl pos:start="19:20" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:20" pos:end="19:20">*</modifier><modifier pos:start="19:21" pos:end="19:21">*</modifier></type><name pos:start="19:22" pos:end="19:33">openpic_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">unin_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">linux_boot</name></decl>, <decl pos:start="23:21" pos:end="23:21"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:21" pos:end="23:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:39"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:14">ram_addr_t</name></type> <name pos:start="25:16" pos:end="25:25">ram_offset</name></decl>, <decl pos:start="25:28" pos:end="25:38"><type ref="prev" pos:start="25:5" pos:end="25:14"/><name pos:start="25:28" pos:end="25:38">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:66"><decl pos:start="27:5" pos:end="27:34"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:22">target_phys_addr_t</name></type> <name pos:start="27:24" pos:end="27:34">kernel_base</name></decl>, <decl pos:start="27:37" pos:end="27:47"><type ref="prev" pos:start="27:5" pos:end="27:22"/><name pos:start="27:37" pos:end="27:47">initrd_base</name></decl>, <decl pos:start="27:50" pos:end="27:65"><type ref="prev" pos:start="27:5" pos:end="27:22"/><name pos:start="27:50" pos:end="27:61">cmdline_base</name> <init pos:start="27:63" pos:end="27:65">= <expr pos:start="27:65" pos:end="27:65"><literal type="number" pos:start="27:65" pos:end="27:65">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:34"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">long</name></type> <name pos:start="29:10" pos:end="29:20">kernel_size</name></decl>, <decl pos:start="29:23" pos:end="29:33"><type ref="prev" pos:start="29:5" pos:end="29:8"/><name pos:start="29:23" pos:end="29:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">PCIBus</name> <modifier pos:start="31:12" pos:end="31:12">*</modifier></type><name pos:start="31:13" pos:end="31:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:25"><decl pos:start="33:5" pos:end="33:24"><type pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:19">MacIONVRAMState</name> <modifier pos:start="33:21" pos:end="33:21">*</modifier></type><name pos:start="33:22" pos:end="33:24">nvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:60"><decl pos:start="37:5" pos:end="37:25"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">MemoryRegion</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:25">pic_mem</name></decl>, <decl pos:start="37:28" pos:end="37:37"><type ref="prev" pos:start="37:5" pos:end="37:18"><modifier pos:start="37:28" pos:end="37:28">*</modifier></type><name pos:start="37:29" pos:end="37:37">dbdma_mem</name></decl>, <decl pos:start="37:40" pos:end="37:48"><type ref="prev" pos:start="37:5" pos:end="37:18"><modifier pos:start="37:40" pos:end="37:40">*</modifier></type><name pos:start="37:41" pos:end="37:48">cuda_mem</name></decl>, <decl pos:start="37:51" pos:end="37:59"><type ref="prev" pos:start="37:5" pos:end="37:18"><modifier pos:start="37:51" pos:end="37:51">*</modifier></type><name pos:start="37:52" pos:end="37:59">escc_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:29"><decl pos:start="39:5" pos:end="39:28"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MemoryRegion</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:28"><name pos:start="39:19" pos:end="39:25">ide_mem</name><index pos:start="39:26" pos:end="39:28">[<expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:24"><decl pos:start="41:5" pos:end="41:23"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:46"><decl pos:start="43:5" pos:end="43:45"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:17">hd</name><index pos:start="43:18" pos:end="43:45">[<expr pos:start="43:19" pos:end="43:44"><name pos:start="43:19" pos:end="43:29">MAX_IDE_BUS</name> <operator pos:start="43:31" pos:end="43:31">*</operator> <name pos:start="43:33" pos:end="43:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:17"><decl pos:start="45:5" pos:end="45:16"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">void</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:16"><decl pos:start="47:5" pos:end="47:15"><type pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:8">void</name> <modifier pos:start="47:10" pos:end="47:10">*</modifier></type><name pos:start="47:11" pos:end="47:15">dbdma</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:21"><decl pos:start="49:5" pos:end="49:20"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:20">machine_arch</name></decl>;</decl_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:43"><expr pos:start="53:5" pos:end="53:42"><name pos:start="53:5" pos:end="53:14">linux_boot</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:33">kernel_filename</name> <operator pos:start="53:35" pos:end="53:36">!=</operator> <name pos:start="53:38" pos:end="53:41">NULL</name><operator pos:start="53:42" pos:end="53:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:19">/* init CPUs */</comment>

    <if_stmt pos:start="59:5" pos:end="66:0"><if pos:start="59:5" pos:end="66:0">if <condition pos:start="59:8" pos:end="62:0">(<expr pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:17">cpu_model</name> <operator pos:start="59:19" pos:end="59:20">==</operator> <name pos:start="59:22" pos:end="59:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="66:0"><block_content pos:start="63:9" pos:end="66:0">

<cpp:ifdef pos:start="61:1" pos:end="61:19">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:19">TARGET_PPC64</name></cpp:ifdef>

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="string" pos:start="63:21" pos:end="63:27">"970fx"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else pos:start="65:1" pos:end="65:5">#<cpp:directive pos:start="65:2" pos:end="65:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="67:9" pos:end="70:0"><expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:17">cpu_model</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="string" pos:start="67:21" pos:end="67:24">"G4"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

    <for pos:start="71:5" pos:end="89:5">for <control pos:start="71:9" pos:end="71:34">(<init pos:start="71:10" pos:end="71:15"><expr pos:start="71:10" pos:end="71:14"><name pos:start="71:10" pos:end="71:10">i</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>;</init> <condition pos:start="71:17" pos:end="71:29"><expr pos:start="71:17" pos:end="71:28"><name pos:start="71:17" pos:end="71:17">i</name> <operator pos:start="71:19" pos:end="71:19">&lt;</operator> <name pos:start="71:21" pos:end="71:28">smp_cpus</name></expr>;</condition> <incr pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:31">i</name><operator pos:start="71:32" pos:end="71:33">++</operator></expr></incr>)</control> <block pos:start="71:36" pos:end="89:5">{<block_content pos:start="73:9" pos:end="87:64">

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:11">env</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:33"><name pos:start="73:15" pos:end="73:22">cpu_init</name><argument_list pos:start="73:23" pos:end="73:33">(<argument pos:start="73:24" pos:end="73:32"><expr pos:start="73:24" pos:end="73:32"><name pos:start="73:24" pos:end="73:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:17">(<expr pos:start="75:13" pos:end="75:16"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:16">env</name></expr>)</condition> <block pos:start="75:19" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:20">

            <expr_stmt pos:start="77:13" pos:end="77:71"><expr pos:start="77:13" pos:end="77:70"><call pos:start="77:13" pos:end="77:70"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="77:70">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>, <argument pos:start="77:29" pos:end="77:69"><expr pos:start="77:29" pos:end="77:69"><literal type="string" pos:start="77:29" pos:end="77:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:20"><expr pos:start="79:13" pos:end="79:19"><call pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:16">exit</name><argument_list pos:start="79:17" pos:end="79:19">(<argument pos:start="79:18" pos:end="79:18"><expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="83:9" pos:end="83:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:54"><expr pos:start="85:9" pos:end="85:53"><call pos:start="85:9" pos:end="85:53"><name pos:start="85:9" pos:end="85:23">cpu_ppc_tb_init</name><argument_list pos:start="85:24" pos:end="85:53">(<argument pos:start="85:25" pos:end="85:27"><expr pos:start="85:25" pos:end="85:27"><name pos:start="85:25" pos:end="85:27">env</name></expr></argument>, <argument pos:start="85:30" pos:end="85:52"><expr pos:start="85:30" pos:end="85:52"><literal type="number" pos:start="85:30" pos:end="85:34">100UL</literal> <operator pos:start="85:36" pos:end="85:36">*</operator> <literal type="number" pos:start="85:38" pos:end="85:43">1000UL</literal> <operator pos:start="85:45" pos:end="85:45">*</operator> <literal type="number" pos:start="85:47" pos:end="85:52">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:64"><expr pos:start="87:9" pos:end="87:63"><call pos:start="87:9" pos:end="87:63"><name pos:start="87:9" pos:end="87:27">qemu_register_reset</name><argument_list pos:start="87:28" pos:end="87:63">(<argument pos:start="87:29" pos:end="87:57"><expr pos:start="87:29" pos:end="87:57"><operator pos:start="87:29" pos:end="87:29">(</operator><name pos:start="87:30" pos:end="87:45">QEMUResetHandler</name><operator pos:start="87:46" pos:end="87:46">*</operator><operator pos:start="87:47" pos:end="87:47">)</operator><operator pos:start="87:48" pos:end="87:48">&amp;</operator><name pos:start="87:49" pos:end="87:57">cpu_reset</name></expr></argument>, <argument pos:start="87:60" pos:end="87:62"><expr pos:start="87:60" pos:end="87:62"><name pos:start="87:60" pos:end="87:62">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="93:5" pos:end="93:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:66"><expr pos:start="95:5" pos:end="95:65"><name pos:start="95:5" pos:end="95:14">ram_offset</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:65"><name pos:start="95:18" pos:end="95:31">qemu_ram_alloc</name><argument_list pos:start="95:32" pos:end="95:65">(<argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><name pos:start="95:33" pos:end="95:36">NULL</name></expr></argument>, <argument pos:start="95:39" pos:end="95:54"><expr pos:start="95:39" pos:end="95:54"><literal type="string" pos:start="95:39" pos:end="95:54">"ppc_core99.ram"</literal></expr></argument>, <argument pos:start="95:57" pos:end="95:64"><expr pos:start="95:57" pos:end="95:64"><name pos:start="95:57" pos:end="95:64">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:58"><expr pos:start="97:5" pos:end="97:57"><call pos:start="97:5" pos:end="97:57"><name pos:start="97:5" pos:end="97:32">cpu_register_physical_memory</name><argument_list pos:start="97:33" pos:end="97:57">(<argument pos:start="97:34" pos:end="97:34"><expr pos:start="97:34" pos:end="97:34"><literal type="number" pos:start="97:34" pos:end="97:34">0</literal></expr></argument>, <argument pos:start="97:37" pos:end="97:44"><expr pos:start="97:37" pos:end="97:44"><name pos:start="97:37" pos:end="97:44">ram_size</name></expr></argument>, <argument pos:start="97:47" pos:end="97:56"><expr pos:start="97:47" pos:end="97:56"><name pos:start="97:47" pos:end="97:56">ram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:69"><expr pos:start="103:5" pos:end="103:68"><name pos:start="103:5" pos:end="103:15">bios_offset</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:68"><name pos:start="103:19" pos:end="103:32">qemu_ram_alloc</name><argument_list pos:start="103:33" pos:end="103:68">(<argument pos:start="103:34" pos:end="103:37"><expr pos:start="103:34" pos:end="103:37"><name pos:start="103:34" pos:end="103:37">NULL</name></expr></argument>, <argument pos:start="103:40" pos:end="103:56"><expr pos:start="103:40" pos:end="103:56"><literal type="string" pos:start="103:40" pos:end="103:56">"ppc_core99.bios"</literal></expr></argument>, <argument pos:start="103:59" pos:end="103:67"><expr pos:start="103:59" pos:end="103:67"><name pos:start="103:59" pos:end="103:67">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="107:34"><if pos:start="105:5" pos:end="107:34">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:17">bios_name</name> <operator pos:start="105:19" pos:end="105:20">==</operator> <name pos:start="105:22" pos:end="105:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:34"><block_content pos:start="107:9" pos:end="107:34">

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:17">bios_name</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:62"><expr pos:start="109:5" pos:end="109:61"><name pos:start="109:5" pos:end="109:12">filename</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <call pos:start="109:16" pos:end="109:61"><name pos:start="109:16" pos:end="109:29">qemu_find_file</name><argument_list pos:start="109:30" pos:end="109:61">(<argument pos:start="109:31" pos:end="109:49"><expr pos:start="109:31" pos:end="109:49"><name pos:start="109:31" pos:end="109:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="109:52" pos:end="109:60"><expr pos:start="109:52" pos:end="109:60"><name pos:start="109:52" pos:end="109:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:81"><expr pos:start="111:5" pos:end="111:80"><call pos:start="111:5" pos:end="111:80"><name pos:start="111:5" pos:end="111:32">cpu_register_physical_memory</name><argument_list pos:start="111:33" pos:end="111:80">(<argument pos:start="111:34" pos:end="111:42"><expr pos:start="111:34" pos:end="111:42"><name pos:start="111:34" pos:end="111:42">PROM_ADDR</name></expr></argument>, <argument pos:start="111:45" pos:end="111:53"><expr pos:start="111:45" pos:end="111:53"><name pos:start="111:45" pos:end="111:53">BIOS_SIZE</name></expr></argument>, <argument pos:start="111:56" pos:end="111:79"><expr pos:start="111:56" pos:end="111:79"><name pos:start="111:56" pos:end="111:66">bios_offset</name> <operator pos:start="111:68" pos:end="111:68">|</operator> <name pos:start="111:70" pos:end="111:79">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="117:5" pos:end="131:5"><if pos:start="117:5" pos:end="127:5">if <condition pos:start="117:8" pos:end="117:17">(<expr pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:16">filename</name></expr>)</condition> <block pos:start="117:19" pos:end="127:5">{<block_content pos:start="119:9" pos:end="125:25">

        <expr_stmt pos:start="119:9" pos:end="121:60"><expr pos:start="119:9" pos:end="121:59"><name pos:start="119:9" pos:end="119:17">bios_size</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <call pos:start="119:21" pos:end="121:59"><name pos:start="119:21" pos:end="119:28">load_elf</name><argument_list pos:start="119:29" pos:end="121:59">(<argument pos:start="119:30" pos:end="119:37"><expr pos:start="119:30" pos:end="119:37"><name pos:start="119:30" pos:end="119:37">filename</name></expr></argument>, <argument pos:start="119:40" pos:end="119:43"><expr pos:start="119:40" pos:end="119:43"><name pos:start="119:40" pos:end="119:43">NULL</name></expr></argument>, <argument pos:start="119:46" pos:end="119:49"><expr pos:start="119:46" pos:end="119:49"><name pos:start="119:46" pos:end="119:49">NULL</name></expr></argument>, <argument pos:start="119:52" pos:end="119:55"><expr pos:start="119:52" pos:end="119:55"><name pos:start="119:52" pos:end="119:55">NULL</name></expr></argument>,

                             <argument pos:start="121:30" pos:end="121:33"><expr pos:start="121:30" pos:end="121:33"><name pos:start="121:30" pos:end="121:33">NULL</name></expr></argument>, <argument pos:start="121:36" pos:end="121:39"><expr pos:start="121:36" pos:end="121:39"><name pos:start="121:36" pos:end="121:39">NULL</name></expr></argument>, <argument pos:start="121:42" pos:end="121:42"><expr pos:start="121:42" pos:end="121:42"><literal type="number" pos:start="121:42" pos:end="121:42">1</literal></expr></argument>, <argument pos:start="121:45" pos:end="121:55"><expr pos:start="121:45" pos:end="121:55"><name pos:start="121:45" pos:end="121:55">ELF_MACHINE</name></expr></argument>, <argument pos:start="121:58" pos:end="121:58"><expr pos:start="121:58" pos:end="121:58"><literal type="number" pos:start="121:58" pos:end="121:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:25"><expr pos:start="125:9" pos:end="125:24"><call pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:14">g_free</name><argument_list pos:start="125:15" pos:end="125:24">(<argument pos:start="125:16" pos:end="125:23"><expr pos:start="125:16" pos:end="125:23"><name pos:start="125:16" pos:end="125:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="131:5">else <block pos:start="127:12" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:23">

        <expr_stmt pos:start="129:9" pos:end="129:23"><expr pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:17">bios_size</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <operator pos:start="129:21" pos:end="129:21">-</operator><literal type="number" pos:start="129:22" pos:end="129:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:47">(<expr pos:start="133:9" pos:end="133:46"><name pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:17">bios_size</name> <argument_list type="generic" pos:start="133:19" pos:end="133:36">&lt; <argument pos:start="133:21" pos:end="133:34"><expr pos:start="133:21" pos:end="133:34"><literal type="number" pos:start="133:21" pos:end="133:21">0</literal> <operator pos:start="133:23" pos:end="133:24">||</operator> <name pos:start="133:26" pos:end="133:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="133:38" pos:end="133:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="133:49" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:16">

        <expr_stmt pos:start="135:9" pos:end="135:72"><expr pos:start="135:9" pos:end="135:71"><call pos:start="135:9" pos:end="135:71"><name pos:start="135:9" pos:end="135:16">hw_error</name><argument_list pos:start="135:17" pos:end="135:71">(<argument pos:start="135:18" pos:end="135:59"><expr pos:start="135:18" pos:end="135:59"><literal type="string" pos:start="135:18" pos:end="135:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="135:62" pos:end="135:70"><expr pos:start="135:62" pos:end="135:70"><name pos:start="135:62" pos:end="135:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><call pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:12">exit</name><argument_list pos:start="137:13" pos:end="137:15">(<argument pos:start="137:14" pos:end="137:14"><expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="265:5"><if pos:start="143:5" pos:end="227:5">if <condition pos:start="143:8" pos:end="143:19">(<expr pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:18">linux_boot</name></expr>)</condition> <block pos:start="143:21" pos:end="227:5">{<block_content pos:start="145:9" pos:end="225:30">

        <decl_stmt pos:start="145:9" pos:end="145:29"><decl pos:start="145:9" pos:end="145:28"><type pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">uint64_t</name></type> <name pos:start="145:18" pos:end="145:24">lowaddr</name> <init pos:start="145:26" pos:end="145:28">= <expr pos:start="145:28" pos:end="145:28"><literal type="number" pos:start="145:28" pos:end="145:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="152:0"><decl pos:start="147:9" pos:end="147:24"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="151:1" pos:end="151:19">#<cpp:directive pos:start="151:2" pos:end="151:6">ifdef</cpp:directive> <name pos:start="151:8" pos:end="151:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="153:9" pos:end="156:0"><expr pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:20">bswap_needed</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <literal type="number" pos:start="153:24" pos:end="153:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="155:1" pos:end="155:5">#<cpp:directive pos:start="155:2" pos:end="155:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="157:9" pos:end="160:0"><expr pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:20">bswap_needed</name> <operator pos:start="157:22" pos:end="157:22">=</operator> <literal type="number" pos:start="157:24" pos:end="157:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="161:9" pos:end="161:39"><expr pos:start="161:9" pos:end="161:38"><name pos:start="161:9" pos:end="161:19">kernel_base</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <name pos:start="161:23" pos:end="161:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>



        <expr_stmt pos:start="165:9" pos:end="167:72"><expr pos:start="165:9" pos:end="167:71"><name pos:start="165:9" pos:end="165:19">kernel_size</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <call pos:start="165:23" pos:end="167:71"><name pos:start="165:23" pos:end="165:30">load_elf</name><argument_list pos:start="165:31" pos:end="167:71">(<argument pos:start="165:32" pos:end="165:46"><expr pos:start="165:32" pos:end="165:46"><name pos:start="165:32" pos:end="165:46">kernel_filename</name></expr></argument>, <argument pos:start="165:49" pos:end="165:72"><expr pos:start="165:49" pos:end="165:72"><name pos:start="165:49" pos:end="165:72">translate_kernel_address</name></expr></argument>, <argument pos:start="165:75" pos:end="165:78"><expr pos:start="165:75" pos:end="165:78"><name pos:start="165:75" pos:end="165:78">NULL</name></expr></argument>,

                               <argument pos:start="167:32" pos:end="167:35"><expr pos:start="167:32" pos:end="167:35"><name pos:start="167:32" pos:end="167:35">NULL</name></expr></argument>, <argument pos:start="167:38" pos:end="167:45"><expr pos:start="167:38" pos:end="167:45"><operator pos:start="167:38" pos:end="167:38">&amp;</operator><name pos:start="167:39" pos:end="167:45">lowaddr</name></expr></argument>, <argument pos:start="167:48" pos:end="167:51"><expr pos:start="167:48" pos:end="167:51"><name pos:start="167:48" pos:end="167:51">NULL</name></expr></argument>, <argument pos:start="167:54" pos:end="167:54"><expr pos:start="167:54" pos:end="167:54"><literal type="number" pos:start="167:54" pos:end="167:54">1</literal></expr></argument>, <argument pos:start="167:57" pos:end="167:67"><expr pos:start="167:57" pos:end="167:67"><name pos:start="167:57" pos:end="167:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="167:70" pos:end="167:70"><expr pos:start="167:70" pos:end="167:70"><literal type="number" pos:start="167:70" pos:end="167:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="175:54"><if pos:start="169:9" pos:end="175:54">if <condition pos:start="169:12" pos:end="169:28">(<expr pos:start="169:13" pos:end="169:27"><name pos:start="169:13" pos:end="169:23">kernel_size</name> <operator pos:start="169:25" pos:end="169:25">&lt;</operator> <literal type="number" pos:start="169:27" pos:end="169:27">0</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="175:54"><block_content pos:start="171:13" pos:end="175:54">

            <expr_stmt pos:start="171:13" pos:end="175:54"><expr pos:start="171:13" pos:end="175:53"><name pos:start="171:13" pos:end="171:23">kernel_size</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <call pos:start="171:27" pos:end="175:53"><name pos:start="171:27" pos:end="171:35">load_aout</name><argument_list pos:start="171:36" pos:end="175:53">(<argument pos:start="171:37" pos:end="171:51"><expr pos:start="171:37" pos:end="171:51"><name pos:start="171:37" pos:end="171:51">kernel_filename</name></expr></argument>, <argument pos:start="171:54" pos:end="171:64"><expr pos:start="171:54" pos:end="171:64"><name pos:start="171:54" pos:end="171:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="173:37" pos:end="173:58"><expr pos:start="173:37" pos:end="173:58"><name pos:start="173:37" pos:end="173:44">ram_size</name> <operator pos:start="173:46" pos:end="173:46">-</operator> <name pos:start="173:48" pos:end="173:58">kernel_base</name></expr></argument>, <argument pos:start="173:61" pos:end="173:72"><expr pos:start="173:61" pos:end="173:72"><name pos:start="173:61" pos:end="173:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="175:37" pos:end="175:52"><expr pos:start="175:37" pos:end="175:52"><name pos:start="175:37" pos:end="175:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="177:9" pos:end="183:70"><if pos:start="177:9" pos:end="183:70">if <condition pos:start="177:12" pos:end="177:28">(<expr pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:23">kernel_size</name> <operator pos:start="177:25" pos:end="177:25">&lt;</operator> <literal type="number" pos:start="177:27" pos:end="177:27">0</literal></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="183:70"><block_content pos:start="179:13" pos:end="183:70">

            <expr_stmt pos:start="179:13" pos:end="183:70"><expr pos:start="179:13" pos:end="183:69"><name pos:start="179:13" pos:end="179:23">kernel_size</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <call pos:start="179:27" pos:end="183:69"><name pos:start="179:27" pos:end="179:45">load_image_targphys</name><argument_list pos:start="179:46" pos:end="183:69">(<argument pos:start="179:47" pos:end="179:61"><expr pos:start="179:47" pos:end="179:61"><name pos:start="179:47" pos:end="179:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="181:47" pos:end="181:57"><expr pos:start="181:47" pos:end="181:57"><name pos:start="181:47" pos:end="181:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="183:47" pos:end="183:68"><expr pos:start="183:47" pos:end="183:68"><name pos:start="183:47" pos:end="183:54">ram_size</name> <operator pos:start="183:56" pos:end="183:56">-</operator> <name pos:start="183:58" pos:end="183:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="185:9" pos:end="191:9"><if pos:start="185:9" pos:end="191:9">if <condition pos:start="185:12" pos:end="185:28">(<expr pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:23">kernel_size</name> <operator pos:start="185:25" pos:end="185:25">&lt;</operator> <literal type="number" pos:start="185:27" pos:end="185:27">0</literal></expr>)</condition> <block pos:start="185:30" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:20">

            <expr_stmt pos:start="187:13" pos:end="187:76"><expr pos:start="187:13" pos:end="187:75"><call pos:start="187:13" pos:end="187:75"><name pos:start="187:13" pos:end="187:20">hw_error</name><argument_list pos:start="187:21" pos:end="187:75">(<argument pos:start="187:22" pos:end="187:57"><expr pos:start="187:22" pos:end="187:57"><literal type="string" pos:start="187:22" pos:end="187:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="187:60" pos:end="187:74"><expr pos:start="187:60" pos:end="187:74"><name pos:start="187:60" pos:end="187:74">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:20"><expr pos:start="189:13" pos:end="189:19"><call pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:16">exit</name><argument_list pos:start="189:17" pos:end="189:19">(<argument pos:start="189:18" pos:end="189:18"><expr pos:start="189:18" pos:end="189:18"><literal type="number" pos:start="189:18" pos:end="189:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="193:9" pos:end="193:25">/* load initrd */</comment>

        <if_stmt pos:start="195:9" pos:end="223:9"><if pos:start="195:9" pos:end="215:9">if <condition pos:start="195:12" pos:end="195:28">(<expr pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:27">initrd_filename</name></expr>)</condition> <block pos:start="195:30" pos:end="215:9">{<block_content pos:start="197:13" pos:end="213:65">

            <expr_stmt pos:start="197:13" pos:end="197:77"><expr pos:start="197:13" pos:end="197:76"><name pos:start="197:13" pos:end="197:23">initrd_base</name> <operator pos:start="197:25" pos:end="197:25">=</operator> <call pos:start="197:27" pos:end="197:76"><name pos:start="197:27" pos:end="197:36">round_page</name><argument_list pos:start="197:37" pos:end="197:76">(<argument pos:start="197:38" pos:end="197:75"><expr pos:start="197:38" pos:end="197:75"><name pos:start="197:38" pos:end="197:48">kernel_base</name> <operator pos:start="197:50" pos:end="197:50">+</operator> <name pos:start="197:52" pos:end="197:62">kernel_size</name> <operator pos:start="197:64" pos:end="197:64">+</operator> <name pos:start="197:66" pos:end="197:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="201:70"><expr pos:start="199:13" pos:end="201:69"><name pos:start="199:13" pos:end="199:23">initrd_size</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <call pos:start="199:27" pos:end="201:69"><name pos:start="199:27" pos:end="199:45">load_image_targphys</name><argument_list pos:start="199:46" pos:end="201:69">(<argument pos:start="199:47" pos:end="199:61"><expr pos:start="199:47" pos:end="199:61"><name pos:start="199:47" pos:end="199:61">initrd_filename</name></expr></argument>, <argument pos:start="199:64" pos:end="199:74"><expr pos:start="199:64" pos:end="199:74"><name pos:start="199:64" pos:end="199:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="201:47" pos:end="201:68"><expr pos:start="201:47" pos:end="201:68"><name pos:start="201:47" pos:end="201:54">ram_size</name> <operator pos:start="201:56" pos:end="201:56">-</operator> <name pos:start="201:58" pos:end="201:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="211:13"><if pos:start="203:13" pos:end="211:13">if <condition pos:start="203:16" pos:end="203:32">(<expr pos:start="203:17" pos:end="203:31"><name pos:start="203:17" pos:end="203:27">initrd_size</name> <operator pos:start="203:29" pos:end="203:29">&lt;</operator> <literal type="number" pos:start="203:31" pos:end="203:31">0</literal></expr>)</condition> <block pos:start="203:34" pos:end="211:13">{<block_content pos:start="205:17" pos:end="209:24">

                <expr_stmt pos:start="205:17" pos:end="207:42"><expr pos:start="205:17" pos:end="207:41"><call pos:start="205:17" pos:end="207:41"><name pos:start="205:17" pos:end="205:24">hw_error</name><argument_list pos:start="205:25" pos:end="207:41">(<argument pos:start="205:26" pos:end="205:71"><expr pos:start="205:26" pos:end="205:71"><literal type="string" pos:start="205:26" pos:end="205:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="207:26" pos:end="207:40"><expr pos:start="207:26" pos:end="207:40"><name pos:start="207:26" pos:end="207:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:24"><expr pos:start="209:17" pos:end="209:23"><call pos:start="209:17" pos:end="209:23"><name pos:start="209:17" pos:end="209:20">exit</name><argument_list pos:start="209:21" pos:end="209:23">(<argument pos:start="209:22" pos:end="209:22"><expr pos:start="209:22" pos:end="209:22"><literal type="number" pos:start="209:22" pos:end="209:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:65"><expr pos:start="213:13" pos:end="213:64"><name pos:start="213:13" pos:end="213:24">cmdline_base</name> <operator pos:start="213:26" pos:end="213:26">=</operator> <call pos:start="213:28" pos:end="213:64"><name pos:start="213:28" pos:end="213:37">round_page</name><argument_list pos:start="213:38" pos:end="213:64">(<argument pos:start="213:39" pos:end="213:63"><expr pos:start="213:39" pos:end="213:63"><name pos:start="213:39" pos:end="213:49">initrd_base</name> <operator pos:start="213:51" pos:end="213:51">+</operator> <name pos:start="213:53" pos:end="213:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="215:11" pos:end="223:9">else <block pos:start="215:16" pos:end="223:9">{<block_content pos:start="217:13" pos:end="221:78">

            <expr_stmt pos:start="217:13" pos:end="217:28"><expr pos:start="217:13" pos:end="217:27"><name pos:start="217:13" pos:end="217:23">initrd_base</name> <operator pos:start="217:25" pos:end="217:25">=</operator> <literal type="number" pos:start="217:27" pos:end="217:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:28"><expr pos:start="219:13" pos:end="219:27"><name pos:start="219:13" pos:end="219:23">initrd_size</name> <operator pos:start="219:25" pos:end="219:25">=</operator> <literal type="number" pos:start="219:27" pos:end="219:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:78"><expr pos:start="221:13" pos:end="221:77"><name pos:start="221:13" pos:end="221:24">cmdline_base</name> <operator pos:start="221:26" pos:end="221:26">=</operator> <call pos:start="221:28" pos:end="221:77"><name pos:start="221:28" pos:end="221:37">round_page</name><argument_list pos:start="221:38" pos:end="221:77">(<argument pos:start="221:39" pos:end="221:76"><expr pos:start="221:39" pos:end="221:76"><name pos:start="221:39" pos:end="221:49">kernel_base</name> <operator pos:start="221:51" pos:end="221:51">+</operator> <name pos:start="221:53" pos:end="221:63">kernel_size</name> <operator pos:start="221:65" pos:end="221:65">+</operator> <name pos:start="221:67" pos:end="221:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:30"><expr pos:start="225:9" pos:end="225:29"><name pos:start="225:9" pos:end="225:23">ppc_boot_device</name> <operator pos:start="225:25" pos:end="225:25">=</operator> <literal type="char" pos:start="225:27" pos:end="225:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="227:7" pos:end="265:5">else <block pos:start="227:12" pos:end="265:5">{<block_content pos:start="229:9" pos:end="263:9">

        <expr_stmt pos:start="229:9" pos:end="229:24"><expr pos:start="229:9" pos:end="229:23"><name pos:start="229:9" pos:end="229:19">kernel_base</name> <operator pos:start="229:21" pos:end="229:21">=</operator> <literal type="number" pos:start="229:23" pos:end="229:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:24"><expr pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:19">kernel_size</name> <operator pos:start="231:21" pos:end="231:21">=</operator> <literal type="number" pos:start="231:23" pos:end="231:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:24"><expr pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:19">initrd_base</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <literal type="number" pos:start="233:23" pos:end="233:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:24"><expr pos:start="235:9" pos:end="235:23"><name pos:start="235:9" pos:end="235:19">initrd_size</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <literal type="number" pos:start="235:23" pos:end="235:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:31"><expr pos:start="237:9" pos:end="237:30"><name pos:start="237:9" pos:end="237:23">ppc_boot_device</name> <operator pos:start="237:25" pos:end="237:25">=</operator> <literal type="char" pos:start="237:27" pos:end="237:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="239:9" pos:end="243:11">/* We consider that NewWorld PowerMac never have any floppy drive

         * For now, OHW cannot boot from the network.

         */</comment>

        <for pos:start="245:9" pos:end="255:9">for <control pos:start="245:13" pos:end="245:48">(<init pos:start="245:14" pos:end="245:19"><expr pos:start="245:14" pos:end="245:18"><name pos:start="245:14" pos:end="245:14">i</name> <operator pos:start="245:16" pos:end="245:16">=</operator> <literal type="number" pos:start="245:18" pos:end="245:18">0</literal></expr>;</init> <condition pos:start="245:21" pos:end="245:43"><expr pos:start="245:21" pos:end="245:42"><name pos:start="245:21" pos:end="245:34"><name pos:start="245:21" pos:end="245:31">boot_device</name><index pos:start="245:32" pos:end="245:34">[<expr pos:start="245:33" pos:end="245:33"><name pos:start="245:33" pos:end="245:33">i</name></expr>]</index></name> <operator pos:start="245:36" pos:end="245:37">!=</operator> <literal type="char" pos:start="245:39" pos:end="245:42">'\0'</literal></expr>;</condition> <incr pos:start="245:45" pos:end="245:47"><expr pos:start="245:45" pos:end="245:47"><name pos:start="245:45" pos:end="245:45">i</name><operator pos:start="245:46" pos:end="245:47">++</operator></expr></incr>)</control> <block pos:start="245:50" pos:end="255:9">{<block_content pos:start="247:13" pos:end="253:13">

            <if_stmt pos:start="247:13" pos:end="253:13"><if pos:start="247:13" pos:end="253:13">if <condition pos:start="247:16" pos:end="247:63">(<expr pos:start="247:17" pos:end="247:62"><name pos:start="247:17" pos:end="247:30"><name pos:start="247:17" pos:end="247:27">boot_device</name><index pos:start="247:28" pos:end="247:30">[<expr pos:start="247:29" pos:end="247:29"><name pos:start="247:29" pos:end="247:29">i</name></expr>]</index></name> <operator pos:start="247:32" pos:end="247:33">&gt;=</operator> <literal type="char" pos:start="247:35" pos:end="247:37">'c'</literal> <operator pos:start="247:39" pos:end="247:40">&amp;&amp;</operator> <name pos:start="247:42" pos:end="247:55"><name pos:start="247:42" pos:end="247:52">boot_device</name><index pos:start="247:53" pos:end="247:55">[<expr pos:start="247:54" pos:end="247:54"><name pos:start="247:54" pos:end="247:54">i</name></expr>]</index></name> <operator pos:start="247:57" pos:end="247:58">&lt;=</operator> <literal type="char" pos:start="247:60" pos:end="247:62">'f'</literal></expr>)</condition> <block pos:start="247:65" pos:end="253:13">{<block_content pos:start="249:17" pos:end="251:22">

                <expr_stmt pos:start="249:17" pos:end="249:49"><expr pos:start="249:17" pos:end="249:48"><name pos:start="249:17" pos:end="249:31">ppc_boot_device</name> <operator pos:start="249:33" pos:end="249:33">=</operator> <name pos:start="249:35" pos:end="249:48"><name pos:start="249:35" pos:end="249:45">boot_device</name><index pos:start="249:46" pos:end="249:48">[<expr pos:start="249:47" pos:end="249:47"><name pos:start="249:47" pos:end="249:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="251:17" pos:end="251:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="257:9" pos:end="263:9"><if pos:start="257:9" pos:end="263:9">if <condition pos:start="257:12" pos:end="257:36">(<expr pos:start="257:13" pos:end="257:35"><name pos:start="257:13" pos:end="257:27">ppc_boot_device</name> <operator pos:start="257:29" pos:end="257:30">==</operator> <literal type="char" pos:start="257:32" pos:end="257:35">'\0'</literal></expr>)</condition> <block pos:start="257:38" pos:end="263:9">{<block_content pos:start="259:13" pos:end="261:20">

            <expr_stmt pos:start="259:13" pos:end="259:72"><expr pos:start="259:13" pos:end="259:71"><call pos:start="259:13" pos:end="259:71"><name pos:start="259:13" pos:end="259:19">fprintf</name><argument_list pos:start="259:20" pos:end="259:71">(<argument pos:start="259:21" pos:end="259:26"><expr pos:start="259:21" pos:end="259:26"><name pos:start="259:21" pos:end="259:26">stderr</name></expr></argument>, <argument pos:start="259:29" pos:end="259:70"><expr pos:start="259:29" pos:end="259:70"><literal type="string" pos:start="259:29" pos:end="259:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:20"><expr pos:start="261:13" pos:end="261:19"><call pos:start="261:13" pos:end="261:19"><name pos:start="261:13" pos:end="261:16">exit</name><argument_list pos:start="261:17" pos:end="261:19">(<argument pos:start="261:18" pos:end="261:18"><expr pos:start="261:18" pos:end="261:18"><literal type="number" pos:start="261:18" pos:end="261:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:30"><expr pos:start="269:5" pos:end="269:29"><name pos:start="269:5" pos:end="269:16">isa_mem_base</name> <operator pos:start="269:18" pos:end="269:18">=</operator> <literal type="number" pos:start="269:20" pos:end="269:29">0x80000000</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="273:5" pos:end="273:39">/* Register 8 MB of ISA IO space */</comment>

    <expr_stmt pos:start="275:5" pos:end="275:42"><expr pos:start="275:5" pos:end="275:41"><call pos:start="275:5" pos:end="275:41"><name pos:start="275:5" pos:end="275:17">isa_mmio_init</name><argument_list pos:start="275:18" pos:end="275:41">(<argument pos:start="275:19" pos:end="275:28"><expr pos:start="275:19" pos:end="275:28"><literal type="number" pos:start="275:19" pos:end="275:28">0xf2000000</literal></expr></argument>, <argument pos:start="275:31" pos:end="275:40"><expr pos:start="275:31" pos:end="275:40"><literal type="number" pos:start="275:31" pos:end="275:40">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="279:5" pos:end="279:19">/* UniN init */</comment>

    <expr_stmt pos:start="281:5" pos:end="283:63"><expr pos:start="281:5" pos:end="283:62"><name pos:start="281:5" pos:end="281:15">unin_memory</name> <operator pos:start="281:17" pos:end="281:17">=</operator> <call pos:start="281:19" pos:end="283:62"><name pos:start="281:19" pos:end="281:40">cpu_register_io_memory</name><argument_list pos:start="281:41" pos:end="283:62">(<argument pos:start="281:42" pos:end="281:50"><expr pos:start="281:42" pos:end="281:50"><name pos:start="281:42" pos:end="281:50">unin_read</name></expr></argument>, <argument pos:start="281:53" pos:end="281:62"><expr pos:start="281:53" pos:end="281:62"><name pos:start="281:53" pos:end="281:62">unin_write</name></expr></argument>, <argument pos:start="281:65" pos:end="281:68"><expr pos:start="281:65" pos:end="281:68"><name pos:start="281:65" pos:end="281:68">NULL</name></expr></argument>,

                                         <argument pos:start="283:42" pos:end="283:61"><expr pos:start="283:42" pos:end="283:61"><name pos:start="283:42" pos:end="283:61">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:70"><expr pos:start="285:5" pos:end="285:69"><call pos:start="285:5" pos:end="285:69"><name pos:start="285:5" pos:end="285:32">cpu_register_physical_memory</name><argument_list pos:start="285:33" pos:end="285:69">(<argument pos:start="285:34" pos:end="285:43"><expr pos:start="285:34" pos:end="285:43"><literal type="number" pos:start="285:34" pos:end="285:43">0xf8000000</literal></expr></argument>, <argument pos:start="285:46" pos:end="285:55"><expr pos:start="285:46" pos:end="285:55"><literal type="number" pos:start="285:46" pos:end="285:55">0x00001000</literal></expr></argument>, <argument pos:start="285:58" pos:end="285:68"><expr pos:start="285:58" pos:end="285:68"><name pos:start="285:58" pos:end="285:68">unin_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="289:5" pos:end="289:60"><expr pos:start="289:5" pos:end="289:59"><name pos:start="289:5" pos:end="289:16">openpic_irqs</name> <operator pos:start="289:18" pos:end="289:18">=</operator> <call pos:start="289:20" pos:end="289:59"><name pos:start="289:20" pos:end="289:28">g_malloc0</name><argument_list pos:start="289:29" pos:end="289:59">(<argument pos:start="289:30" pos:end="289:58"><expr pos:start="289:30" pos:end="289:58"><name pos:start="289:30" pos:end="289:37">smp_cpus</name> <operator pos:start="289:39" pos:end="289:39">*</operator> <sizeof pos:start="289:41" pos:end="289:58">sizeof<argument_list pos:start="289:47" pos:end="289:58">(<argument pos:start="289:48" pos:end="289:57"><expr pos:start="289:48" pos:end="289:57"><name pos:start="289:48" pos:end="289:55">qemu_irq</name> <operator pos:start="289:57" pos:end="289:57">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="293:67"><expr pos:start="291:5" pos:end="293:66"><name pos:start="291:5" pos:end="291:19"><name pos:start="291:5" pos:end="291:16">openpic_irqs</name><index pos:start="291:17" pos:end="291:19">[<expr pos:start="291:18" pos:end="291:18"><literal type="number" pos:start="291:18" pos:end="291:18">0</literal></expr>]</index></name> <operator pos:start="291:21" pos:end="291:21">=</operator>

        <call pos:start="293:9" pos:end="293:66"><name pos:start="293:9" pos:end="293:17">g_malloc0</name><argument_list pos:start="293:18" pos:end="293:66">(<argument pos:start="293:19" pos:end="293:65"><expr pos:start="293:19" pos:end="293:65"><name pos:start="293:19" pos:end="293:26">smp_cpus</name> <operator pos:start="293:28" pos:end="293:28">*</operator> <sizeof pos:start="293:30" pos:end="293:45">sizeof<argument_list pos:start="293:36" pos:end="293:45">(<argument pos:start="293:37" pos:end="293:44"><expr pos:start="293:37" pos:end="293:44"><name pos:start="293:37" pos:end="293:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="293:47" pos:end="293:47">*</operator> <name pos:start="293:49" pos:end="293:65">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="295:5" pos:end="373:5">for <control pos:start="295:9" pos:end="295:34">(<init pos:start="295:10" pos:end="295:15"><expr pos:start="295:10" pos:end="295:14"><name pos:start="295:10" pos:end="295:10">i</name> <operator pos:start="295:12" pos:end="295:12">=</operator> <literal type="number" pos:start="295:14" pos:end="295:14">0</literal></expr>;</init> <condition pos:start="295:17" pos:end="295:29"><expr pos:start="295:17" pos:end="295:28"><name pos:start="295:17" pos:end="295:17">i</name> <operator pos:start="295:19" pos:end="295:19">&lt;</operator> <name pos:start="295:21" pos:end="295:28">smp_cpus</name></expr>;</condition> <incr pos:start="295:31" pos:end="295:33"><expr pos:start="295:31" pos:end="295:33"><name pos:start="295:31" pos:end="295:31">i</name><operator pos:start="295:32" pos:end="295:33">++</operator></expr></incr>)</control> <block pos:start="295:36" pos:end="373:5">{<block_content pos:start="303:9" pos:end="371:9">

        <comment type="block" pos:start="297:9" pos:end="301:11">/* Mac99 IRQ connection between OpenPIC outputs pins

         * and PowerPC input pins

         */</comment>

        <switch pos:start="303:9" pos:end="371:9">switch <condition pos:start="303:16" pos:end="303:31">(<expr pos:start="303:17" pos:end="303:30"><call pos:start="303:17" pos:end="303:30"><name pos:start="303:17" pos:end="303:25">PPC_INPUT</name><argument_list pos:start="303:26" pos:end="303:30">(<argument pos:start="303:27" pos:end="303:29"><expr pos:start="303:27" pos:end="303:29"><name pos:start="303:27" pos:end="303:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:33" pos:end="371:9">{<block_content pos:start="305:9" pos:end="369:20">

        <case pos:start="305:9" pos:end="305:33">case <expr pos:start="305:14" pos:end="305:32"><name pos:start="305:14" pos:end="305:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="307:13" pos:end="307:72"><expr pos:start="307:13" pos:end="307:71"><name pos:start="307:13" pos:end="307:27"><name pos:start="307:13" pos:end="307:24">openpic_irqs</name><index pos:start="307:25" pos:end="307:27">[<expr pos:start="307:26" pos:end="307:26"><name pos:start="307:26" pos:end="307:26">i</name></expr>]</index></name> <operator pos:start="307:29" pos:end="307:29">=</operator> <name pos:start="307:31" pos:end="307:45"><name pos:start="307:31" pos:end="307:42">openpic_irqs</name><index pos:start="307:43" pos:end="307:45">[<expr pos:start="307:44" pos:end="307:44"><literal type="number" pos:start="307:44" pos:end="307:44">0</literal></expr>]</index></name> <operator pos:start="307:47" pos:end="307:47">+</operator> <operator pos:start="307:49" pos:end="307:49">(</operator><name pos:start="307:50" pos:end="307:50">i</name> <operator pos:start="307:52" pos:end="307:52">*</operator> <name pos:start="307:54" pos:end="307:70">OPENPIC_OUTPUT_NB</name><operator pos:start="307:71" pos:end="307:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="311:64"><expr pos:start="309:13" pos:end="311:63"><name pos:start="309:13" pos:end="309:47"><name pos:start="309:13" pos:end="309:24">openpic_irqs</name><index pos:start="309:25" pos:end="309:27">[<expr pos:start="309:26" pos:end="309:26"><name pos:start="309:26" pos:end="309:26">i</name></expr>]</index><index pos:start="309:28" pos:end="309:47">[<expr pos:start="309:29" pos:end="309:46"><name pos:start="309:29" pos:end="309:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="309:49" pos:end="309:49">=</operator>

                <operator pos:start="311:17" pos:end="311:17">(</operator><operator pos:start="311:18" pos:end="311:18">(</operator><name pos:start="311:19" pos:end="311:26">qemu_irq</name> <operator pos:start="311:28" pos:end="311:28">*</operator><operator pos:start="311:29" pos:end="311:29">)</operator><name pos:start="311:30" pos:end="311:44"><name pos:start="311:30" pos:end="311:32">env</name><operator pos:start="311:33" pos:end="311:34">-&gt;</operator><name pos:start="311:35" pos:end="311:44">irq_inputs</name></name><operator pos:start="311:45" pos:end="311:45">)</operator><index pos:start="311:46" pos:end="311:63">[<expr pos:start="311:47" pos:end="311:62"><name pos:start="311:47" pos:end="311:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="315:64"><expr pos:start="313:13" pos:end="315:63"><name pos:start="313:13" pos:end="313:48"><name pos:start="313:13" pos:end="313:24">openpic_irqs</name><index pos:start="313:25" pos:end="313:27">[<expr pos:start="313:26" pos:end="313:26"><name pos:start="313:26" pos:end="313:26">i</name></expr>]</index><index pos:start="313:28" pos:end="313:48">[<expr pos:start="313:29" pos:end="313:47"><name pos:start="313:29" pos:end="313:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="313:50" pos:end="313:50">=</operator>

                <operator pos:start="315:17" pos:end="315:17">(</operator><operator pos:start="315:18" pos:end="315:18">(</operator><name pos:start="315:19" pos:end="315:26">qemu_irq</name> <operator pos:start="315:28" pos:end="315:28">*</operator><operator pos:start="315:29" pos:end="315:29">)</operator><name pos:start="315:30" pos:end="315:44"><name pos:start="315:30" pos:end="315:32">env</name><operator pos:start="315:33" pos:end="315:34">-&gt;</operator><name pos:start="315:35" pos:end="315:44">irq_inputs</name></name><operator pos:start="315:45" pos:end="315:45">)</operator><index pos:start="315:46" pos:end="315:63">[<expr pos:start="315:47" pos:end="315:62"><name pos:start="315:47" pos:end="315:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="319:64"><expr pos:start="317:13" pos:end="319:63"><name pos:start="317:13" pos:end="317:47"><name pos:start="317:13" pos:end="317:24">openpic_irqs</name><index pos:start="317:25" pos:end="317:27">[<expr pos:start="317:26" pos:end="317:26"><name pos:start="317:26" pos:end="317:26">i</name></expr>]</index><index pos:start="317:28" pos:end="317:47">[<expr pos:start="317:29" pos:end="317:46"><name pos:start="317:29" pos:end="317:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="317:49" pos:end="317:49">=</operator>

                <operator pos:start="319:17" pos:end="319:17">(</operator><operator pos:start="319:18" pos:end="319:18">(</operator><name pos:start="319:19" pos:end="319:26">qemu_irq</name> <operator pos:start="319:28" pos:end="319:28">*</operator><operator pos:start="319:29" pos:end="319:29">)</operator><name pos:start="319:30" pos:end="319:44"><name pos:start="319:30" pos:end="319:32">env</name><operator pos:start="319:33" pos:end="319:34">-&gt;</operator><name pos:start="319:35" pos:end="319:44">irq_inputs</name></name><operator pos:start="319:45" pos:end="319:45">)</operator><index pos:start="319:46" pos:end="319:63">[<expr pos:start="319:47" pos:end="319:62"><name pos:start="319:47" pos:end="319:62">PPC6xx_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="321:13" pos:end="321:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="323:13" pos:end="323:57"><expr pos:start="323:13" pos:end="323:56"><name pos:start="323:13" pos:end="323:49"><name pos:start="323:13" pos:end="323:24">openpic_irqs</name><index pos:start="323:25" pos:end="323:27">[<expr pos:start="323:26" pos:end="323:26"><name pos:start="323:26" pos:end="323:26">i</name></expr>]</index><index pos:start="323:28" pos:end="323:49">[<expr pos:start="323:29" pos:end="323:48"><name pos:start="323:29" pos:end="323:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="323:51" pos:end="323:51">=</operator> <name pos:start="323:53" pos:end="323:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="325:13" pos:end="325:28">/* Check this */</comment>

            <expr_stmt pos:start="327:13" pos:end="329:67"><expr pos:start="327:13" pos:end="329:66"><name pos:start="327:13" pos:end="327:49"><name pos:start="327:13" pos:end="327:24">openpic_irqs</name><index pos:start="327:25" pos:end="327:27">[<expr pos:start="327:26" pos:end="327:26"><name pos:start="327:26" pos:end="327:26">i</name></expr>]</index><index pos:start="327:28" pos:end="327:49">[<expr pos:start="327:29" pos:end="327:48"><name pos:start="327:29" pos:end="327:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="327:51" pos:end="327:51">=</operator>

                <operator pos:start="329:17" pos:end="329:17">(</operator><operator pos:start="329:18" pos:end="329:18">(</operator><name pos:start="329:19" pos:end="329:26">qemu_irq</name> <operator pos:start="329:28" pos:end="329:28">*</operator><operator pos:start="329:29" pos:end="329:29">)</operator><name pos:start="329:30" pos:end="329:44"><name pos:start="329:30" pos:end="329:32">env</name><operator pos:start="329:33" pos:end="329:34">-&gt;</operator><name pos:start="329:35" pos:end="329:44">irq_inputs</name></name><operator pos:start="329:45" pos:end="329:45">)</operator><index pos:start="329:46" pos:end="329:66">[<expr pos:start="329:47" pos:end="329:65"><name pos:start="329:47" pos:end="329:65">PPC6xx_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="331:13" pos:end="334:0">break;</break>

<cpp:if pos:start="333:1" pos:end="333:25">#<cpp:directive pos:start="333:2" pos:end="333:3">if</cpp:directive> <expr pos:start="333:5" pos:end="333:25"><call pos:start="333:5" pos:end="333:25"><name pos:start="333:5" pos:end="333:11">defined</name><argument_list pos:start="333:12" pos:end="333:25">(<argument pos:start="333:13" pos:end="333:24"><expr pos:start="333:13" pos:end="333:24"><name pos:start="333:13" pos:end="333:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="335:9" pos:end="335:33">case <expr pos:start="335:14" pos:end="335:32"><name pos:start="335:14" pos:end="335:32">PPC_FLAGS_INPUT_970</name></expr>:</case>

            <expr_stmt pos:start="337:13" pos:end="337:72"><expr pos:start="337:13" pos:end="337:71"><name pos:start="337:13" pos:end="337:27"><name pos:start="337:13" pos:end="337:24">openpic_irqs</name><index pos:start="337:25" pos:end="337:27">[<expr pos:start="337:26" pos:end="337:26"><name pos:start="337:26" pos:end="337:26">i</name></expr>]</index></name> <operator pos:start="337:29" pos:end="337:29">=</operator> <name pos:start="337:31" pos:end="337:45"><name pos:start="337:31" pos:end="337:42">openpic_irqs</name><index pos:start="337:43" pos:end="337:45">[<expr pos:start="337:44" pos:end="337:44"><literal type="number" pos:start="337:44" pos:end="337:44">0</literal></expr>]</index></name> <operator pos:start="337:47" pos:end="337:47">+</operator> <operator pos:start="337:49" pos:end="337:49">(</operator><name pos:start="337:50" pos:end="337:50">i</name> <operator pos:start="337:52" pos:end="337:52">*</operator> <name pos:start="337:54" pos:end="337:70">OPENPIC_OUTPUT_NB</name><operator pos:start="337:71" pos:end="337:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="341:64"><expr pos:start="339:13" pos:end="341:63"><name pos:start="339:13" pos:end="339:47"><name pos:start="339:13" pos:end="339:24">openpic_irqs</name><index pos:start="339:25" pos:end="339:27">[<expr pos:start="339:26" pos:end="339:26"><name pos:start="339:26" pos:end="339:26">i</name></expr>]</index><index pos:start="339:28" pos:end="339:47">[<expr pos:start="339:29" pos:end="339:46"><name pos:start="339:29" pos:end="339:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="339:49" pos:end="339:49">=</operator>

                <operator pos:start="341:17" pos:end="341:17">(</operator><operator pos:start="341:18" pos:end="341:18">(</operator><name pos:start="341:19" pos:end="341:26">qemu_irq</name> <operator pos:start="341:28" pos:end="341:28">*</operator><operator pos:start="341:29" pos:end="341:29">)</operator><name pos:start="341:30" pos:end="341:44"><name pos:start="341:30" pos:end="341:32">env</name><operator pos:start="341:33" pos:end="341:34">-&gt;</operator><name pos:start="341:35" pos:end="341:44">irq_inputs</name></name><operator pos:start="341:45" pos:end="341:45">)</operator><index pos:start="341:46" pos:end="341:63">[<expr pos:start="341:47" pos:end="341:62"><name pos:start="341:47" pos:end="341:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="345:64"><expr pos:start="343:13" pos:end="345:63"><name pos:start="343:13" pos:end="343:48"><name pos:start="343:13" pos:end="343:24">openpic_irqs</name><index pos:start="343:25" pos:end="343:27">[<expr pos:start="343:26" pos:end="343:26"><name pos:start="343:26" pos:end="343:26">i</name></expr>]</index><index pos:start="343:28" pos:end="343:48">[<expr pos:start="343:29" pos:end="343:47"><name pos:start="343:29" pos:end="343:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="343:50" pos:end="343:50">=</operator>

                <operator pos:start="345:17" pos:end="345:17">(</operator><operator pos:start="345:18" pos:end="345:18">(</operator><name pos:start="345:19" pos:end="345:26">qemu_irq</name> <operator pos:start="345:28" pos:end="345:28">*</operator><operator pos:start="345:29" pos:end="345:29">)</operator><name pos:start="345:30" pos:end="345:44"><name pos:start="345:30" pos:end="345:32">env</name><operator pos:start="345:33" pos:end="345:34">-&gt;</operator><name pos:start="345:35" pos:end="345:44">irq_inputs</name></name><operator pos:start="345:45" pos:end="345:45">)</operator><index pos:start="345:46" pos:end="345:63">[<expr pos:start="345:47" pos:end="345:62"><name pos:start="345:47" pos:end="345:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="349:64"><expr pos:start="347:13" pos:end="349:63"><name pos:start="347:13" pos:end="347:47"><name pos:start="347:13" pos:end="347:24">openpic_irqs</name><index pos:start="347:25" pos:end="347:27">[<expr pos:start="347:26" pos:end="347:26"><name pos:start="347:26" pos:end="347:26">i</name></expr>]</index><index pos:start="347:28" pos:end="347:47">[<expr pos:start="347:29" pos:end="347:46"><name pos:start="347:29" pos:end="347:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="347:49" pos:end="347:49">=</operator>

                <operator pos:start="349:17" pos:end="349:17">(</operator><operator pos:start="349:18" pos:end="349:18">(</operator><name pos:start="349:19" pos:end="349:26">qemu_irq</name> <operator pos:start="349:28" pos:end="349:28">*</operator><operator pos:start="349:29" pos:end="349:29">)</operator><name pos:start="349:30" pos:end="349:44"><name pos:start="349:30" pos:end="349:32">env</name><operator pos:start="349:33" pos:end="349:34">-&gt;</operator><name pos:start="349:35" pos:end="349:44">irq_inputs</name></name><operator pos:start="349:45" pos:end="349:45">)</operator><index pos:start="349:46" pos:end="349:63">[<expr pos:start="349:47" pos:end="349:62"><name pos:start="349:47" pos:end="349:62">PPC970_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="351:13" pos:end="351:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="353:13" pos:end="353:57"><expr pos:start="353:13" pos:end="353:56"><name pos:start="353:13" pos:end="353:49"><name pos:start="353:13" pos:end="353:24">openpic_irqs</name><index pos:start="353:25" pos:end="353:27">[<expr pos:start="353:26" pos:end="353:26"><name pos:start="353:26" pos:end="353:26">i</name></expr>]</index><index pos:start="353:28" pos:end="353:49">[<expr pos:start="353:29" pos:end="353:48"><name pos:start="353:29" pos:end="353:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="353:51" pos:end="353:51">=</operator> <name pos:start="353:53" pos:end="353:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="355:13" pos:end="355:28">/* Check this */</comment>

            <expr_stmt pos:start="357:13" pos:end="359:67"><expr pos:start="357:13" pos:end="359:66"><name pos:start="357:13" pos:end="357:49"><name pos:start="357:13" pos:end="357:24">openpic_irqs</name><index pos:start="357:25" pos:end="357:27">[<expr pos:start="357:26" pos:end="357:26"><name pos:start="357:26" pos:end="357:26">i</name></expr>]</index><index pos:start="357:28" pos:end="357:49">[<expr pos:start="357:29" pos:end="357:48"><name pos:start="357:29" pos:end="357:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="357:51" pos:end="357:51">=</operator>

                <operator pos:start="359:17" pos:end="359:17">(</operator><operator pos:start="359:18" pos:end="359:18">(</operator><name pos:start="359:19" pos:end="359:26">qemu_irq</name> <operator pos:start="359:28" pos:end="359:28">*</operator><operator pos:start="359:29" pos:end="359:29">)</operator><name pos:start="359:30" pos:end="359:44"><name pos:start="359:30" pos:end="359:32">env</name><operator pos:start="359:33" pos:end="359:34">-&gt;</operator><name pos:start="359:35" pos:end="359:44">irq_inputs</name></name><operator pos:start="359:45" pos:end="359:45">)</operator><index pos:start="359:46" pos:end="359:66">[<expr pos:start="359:47" pos:end="359:65"><name pos:start="359:47" pos:end="359:65">PPC970_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="361:13" pos:end="364:0">break;</break>

<cpp:endif pos:start="363:1" pos:end="363:6">#<cpp:directive pos:start="363:2" pos:end="363:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="363:8" pos:end="363:34">/* defined(TARGET_PPC64) */</comment>

        <default pos:start="365:9" pos:end="365:16">default:</default>

            <expr_stmt pos:start="367:13" pos:end="367:67"><expr pos:start="367:13" pos:end="367:66"><call pos:start="367:13" pos:end="367:66"><name pos:start="367:13" pos:end="367:20">hw_error</name><argument_list pos:start="367:21" pos:end="367:66">(<argument pos:start="367:22" pos:end="367:65"><expr pos:start="367:22" pos:end="367:65"><literal type="string" pos:start="367:22" pos:end="367:65">"Bus model not supported on mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:20"><expr pos:start="369:13" pos:end="369:19"><call pos:start="369:13" pos:end="369:19"><name pos:start="369:13" pos:end="369:16">exit</name><argument_list pos:start="369:17" pos:end="369:19">(<argument pos:start="369:18" pos:end="369:18"><expr pos:start="369:18" pos:end="369:18"><literal type="number" pos:start="369:18" pos:end="369:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <expr_stmt pos:start="375:5" pos:end="375:69"><expr pos:start="375:5" pos:end="375:68"><name pos:start="375:5" pos:end="375:7">pic</name> <operator pos:start="375:9" pos:end="375:9">=</operator> <call pos:start="375:11" pos:end="375:68"><name pos:start="375:11" pos:end="375:22">openpic_init</name><argument_list pos:start="375:23" pos:end="375:68">(<argument pos:start="375:24" pos:end="375:27"><expr pos:start="375:24" pos:end="375:27"><name pos:start="375:24" pos:end="375:27">NULL</name></expr></argument>, <argument pos:start="375:30" pos:end="375:37"><expr pos:start="375:30" pos:end="375:37"><operator pos:start="375:30" pos:end="375:30">&amp;</operator><name pos:start="375:31" pos:end="375:37">pic_mem</name></expr></argument>, <argument pos:start="375:40" pos:end="375:47"><expr pos:start="375:40" pos:end="375:47"><name pos:start="375:40" pos:end="375:47">smp_cpus</name></expr></argument>, <argument pos:start="375:50" pos:end="375:61"><expr pos:start="375:50" pos:end="375:61"><name pos:start="375:50" pos:end="375:61">openpic_irqs</name></expr></argument>, <argument pos:start="375:64" pos:end="375:67"><expr pos:start="375:64" pos:end="375:67"><name pos:start="375:64" pos:end="375:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="377:5" pos:end="391:5"><if pos:start="377:5" pos:end="385:5">if <condition pos:start="377:8" pos:end="377:46">(<expr pos:start="377:9" pos:end="377:45"><call pos:start="377:9" pos:end="377:22"><name pos:start="377:9" pos:end="377:17">PPC_INPUT</name><argument_list pos:start="377:18" pos:end="377:22">(<argument pos:start="377:19" pos:end="377:21"><expr pos:start="377:19" pos:end="377:21"><name pos:start="377:19" pos:end="377:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="377:24" pos:end="377:25">==</operator> <name pos:start="377:27" pos:end="377:45">PPC_FLAGS_INPUT_970</name></expr>)</condition> <block pos:start="377:48" pos:end="385:5">{<block_content pos:start="381:9" pos:end="383:37">

        <comment type="block" pos:start="379:9" pos:end="379:31">/* 970 gets a U3 bus */</comment>

        <expr_stmt pos:start="381:9" pos:end="381:78"><expr pos:start="381:9" pos:end="381:77"><name pos:start="381:9" pos:end="381:15">pci_bus</name> <operator pos:start="381:17" pos:end="381:17">=</operator> <call pos:start="381:19" pos:end="381:77"><name pos:start="381:19" pos:end="381:34">pci_pmac_u3_init</name><argument_list pos:start="381:35" pos:end="381:77">(<argument pos:start="381:36" pos:end="381:38"><expr pos:start="381:36" pos:end="381:38"><name pos:start="381:36" pos:end="381:38">pic</name></expr></argument>, <argument pos:start="381:41" pos:end="381:59"><expr pos:start="381:41" pos:end="381:59"><call pos:start="381:41" pos:end="381:59"><name pos:start="381:41" pos:end="381:57">get_system_memory</name><argument_list pos:start="381:58" pos:end="381:59">()</argument_list></call></expr></argument>, <argument pos:start="381:62" pos:end="381:76"><expr pos:start="381:62" pos:end="381:76"><call pos:start="381:62" pos:end="381:76"><name pos:start="381:62" pos:end="381:74">get_system_io</name><argument_list pos:start="381:75" pos:end="381:76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:37"><expr pos:start="383:9" pos:end="383:36"><name pos:start="383:9" pos:end="383:20">machine_arch</name> <operator pos:start="383:22" pos:end="383:22">=</operator> <name pos:start="383:24" pos:end="383:36">ARCH_MAC99_U3</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="385:7" pos:end="391:5">else <block pos:start="385:12" pos:end="391:5">{<block_content pos:start="387:9" pos:end="389:34">

        <expr_stmt pos:start="387:9" pos:end="387:75"><expr pos:start="387:9" pos:end="387:74"><name pos:start="387:9" pos:end="387:15">pci_bus</name> <operator pos:start="387:17" pos:end="387:17">=</operator> <call pos:start="387:19" pos:end="387:74"><name pos:start="387:19" pos:end="387:31">pci_pmac_init</name><argument_list pos:start="387:32" pos:end="387:74">(<argument pos:start="387:33" pos:end="387:35"><expr pos:start="387:33" pos:end="387:35"><name pos:start="387:33" pos:end="387:35">pic</name></expr></argument>, <argument pos:start="387:38" pos:end="387:56"><expr pos:start="387:38" pos:end="387:56"><call pos:start="387:38" pos:end="387:56"><name pos:start="387:38" pos:end="387:54">get_system_memory</name><argument_list pos:start="387:55" pos:end="387:56">()</argument_list></call></expr></argument>, <argument pos:start="387:59" pos:end="387:73"><expr pos:start="387:59" pos:end="387:73"><call pos:start="387:59" pos:end="387:73"><name pos:start="387:59" pos:end="387:71">get_system_io</name><argument_list pos:start="387:72" pos:end="387:73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:34"><expr pos:start="389:9" pos:end="389:33"><name pos:start="389:9" pos:end="389:20">machine_arch</name> <operator pos:start="389:22" pos:end="389:22">=</operator> <name pos:start="389:24" pos:end="389:33">ARCH_MAC99</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="393:5" pos:end="393:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="395:5" pos:end="395:26"><expr pos:start="395:5" pos:end="395:25"><call pos:start="395:5" pos:end="395:25"><name pos:start="395:5" pos:end="395:16">pci_vga_init</name><argument_list pos:start="395:17" pos:end="395:25">(<argument pos:start="395:18" pos:end="395:24"><expr pos:start="395:18" pos:end="395:24"><name pos:start="395:18" pos:end="395:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="399:5" pos:end="401:70"><expr pos:start="399:5" pos:end="401:69"><name pos:start="399:5" pos:end="399:12">escc_mem</name> <operator pos:start="399:14" pos:end="399:14">=</operator> <call pos:start="399:16" pos:end="401:69"><name pos:start="399:16" pos:end="399:24">escc_init</name><argument_list pos:start="399:25" pos:end="401:69">(<argument pos:start="399:26" pos:end="399:35"><expr pos:start="399:26" pos:end="399:35"><literal type="number" pos:start="399:26" pos:end="399:35">0x80013000</literal></expr></argument>, <argument pos:start="399:38" pos:end="399:46"><expr pos:start="399:38" pos:end="399:46"><name pos:start="399:38" pos:end="399:46"><name pos:start="399:38" pos:end="399:40">pic</name><index pos:start="399:41" pos:end="399:46">[<expr pos:start="399:42" pos:end="399:45"><literal type="number" pos:start="399:42" pos:end="399:45">0x25</literal></expr>]</index></name></expr></argument>, <argument pos:start="399:49" pos:end="399:57"><expr pos:start="399:49" pos:end="399:57"><name pos:start="399:49" pos:end="399:57"><name pos:start="399:49" pos:end="399:51">pic</name><index pos:start="399:52" pos:end="399:57">[<expr pos:start="399:53" pos:end="399:56"><literal type="number" pos:start="399:53" pos:end="399:56">0x24</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="401:26" pos:end="401:38"><expr pos:start="401:26" pos:end="401:38"><name pos:start="401:26" pos:end="401:38"><name pos:start="401:26" pos:end="401:35">serial_hds</name><index pos:start="401:36" pos:end="401:38">[<expr pos:start="401:37" pos:end="401:37"><literal type="number" pos:start="401:37" pos:end="401:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="401:41" pos:end="401:53"><expr pos:start="401:41" pos:end="401:53"><name pos:start="401:41" pos:end="401:53"><name pos:start="401:41" pos:end="401:50">serial_hds</name><index pos:start="401:51" pos:end="401:53">[<expr pos:start="401:52" pos:end="401:52"><literal type="number" pos:start="401:52" pos:end="401:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="401:56" pos:end="401:65"><expr pos:start="401:56" pos:end="401:65"><name pos:start="401:56" pos:end="401:65">ESCC_CLOCK</name></expr></argument>, <argument pos:start="401:68" pos:end="401:68"><expr pos:start="401:68" pos:end="401:68"><literal type="number" pos:start="401:68" pos:end="401:68">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="405:5" pos:end="407:60">for<control pos:start="405:8" pos:end="405:32">(<init pos:start="405:9" pos:end="405:14"><expr pos:start="405:9" pos:end="405:13"><name pos:start="405:9" pos:end="405:9">i</name> <operator pos:start="405:11" pos:end="405:11">=</operator> <literal type="number" pos:start="405:13" pos:end="405:13">0</literal></expr>;</init> <condition pos:start="405:16" pos:end="405:27"><expr pos:start="405:16" pos:end="405:26"><name pos:start="405:16" pos:end="405:16">i</name> <operator pos:start="405:18" pos:end="405:18">&lt;</operator> <name pos:start="405:20" pos:end="405:26">nb_nics</name></expr>;</condition> <incr pos:start="405:29" pos:end="405:31"><expr pos:start="405:29" pos:end="405:31"><name pos:start="405:29" pos:end="405:29">i</name><operator pos:start="405:30" pos:end="405:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="407:9" pos:end="407:60"><block_content pos:start="407:9" pos:end="407:60">

        <expr_stmt pos:start="407:9" pos:end="407:60"><expr pos:start="407:9" pos:end="407:59"><call pos:start="407:9" pos:end="407:59"><name pos:start="407:9" pos:end="407:27">pci_nic_init_nofail</name><argument_list pos:start="407:28" pos:end="407:59">(<argument pos:start="407:29" pos:end="407:40"><expr pos:start="407:29" pos:end="407:40"><operator pos:start="407:29" pos:end="407:29">&amp;</operator><name pos:start="407:30" pos:end="407:40"><name pos:start="407:30" pos:end="407:37">nd_table</name><index pos:start="407:38" pos:end="407:40">[<expr pos:start="407:39" pos:end="407:39"><name pos:start="407:39" pos:end="407:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="407:43" pos:end="407:52"><expr pos:start="407:43" pos:end="407:52"><literal type="string" pos:start="407:43" pos:end="407:52">"ne2k_pci"</literal></expr></argument>, <argument pos:start="407:55" pos:end="407:58"><expr pos:start="407:55" pos:end="407:58"><name pos:start="407:55" pos:end="407:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="411:5" pos:end="411:35"><expr pos:start="411:5" pos:end="411:34"><call pos:start="411:5" pos:end="411:34"><name pos:start="411:5" pos:end="411:17">ide_drive_get</name><argument_list pos:start="411:18" pos:end="411:34">(<argument pos:start="411:19" pos:end="411:20"><expr pos:start="411:19" pos:end="411:20"><name pos:start="411:19" pos:end="411:20">hd</name></expr></argument>, <argument pos:start="411:23" pos:end="411:33"><expr pos:start="411:23" pos:end="411:33"><name pos:start="411:23" pos:end="411:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:35"><expr pos:start="413:5" pos:end="413:34"><name pos:start="413:5" pos:end="413:9">dbdma</name> <operator pos:start="413:11" pos:end="413:11">=</operator> <call pos:start="413:13" pos:end="413:34"><name pos:start="413:13" pos:end="413:22">DBDMA_init</name><argument_list pos:start="413:23" pos:end="413:34">(<argument pos:start="413:24" pos:end="413:33"><expr pos:start="413:24" pos:end="413:33"><operator pos:start="413:24" pos:end="413:24">&amp;</operator><name pos:start="413:25" pos:end="413:33">dbdma_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="417:5" pos:end="417:60">/* We only emulate 2 out of 3 IDE controllers for now */</comment>

    <expr_stmt pos:start="419:5" pos:end="419:22"><expr pos:start="419:5" pos:end="419:21"><name pos:start="419:5" pos:end="419:14"><name pos:start="419:5" pos:end="419:11">ide_mem</name><index pos:start="419:12" pos:end="419:14">[<expr pos:start="419:13" pos:end="419:13"><literal type="number" pos:start="419:13" pos:end="419:13">0</literal></expr>]</index></name> <operator pos:start="419:16" pos:end="419:16">=</operator> <name pos:start="419:18" pos:end="419:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:70"><expr pos:start="421:5" pos:end="421:69"><name pos:start="421:5" pos:end="421:14"><name pos:start="421:5" pos:end="421:11">ide_mem</name><index pos:start="421:12" pos:end="421:14">[<expr pos:start="421:13" pos:end="421:13"><literal type="number" pos:start="421:13" pos:end="421:13">1</literal></expr>]</index></name> <operator pos:start="421:16" pos:end="421:16">=</operator> <call pos:start="421:18" pos:end="421:69"><name pos:start="421:18" pos:end="421:30">pmac_ide_init</name><argument_list pos:start="421:31" pos:end="421:69">(<argument pos:start="421:32" pos:end="421:33"><expr pos:start="421:32" pos:end="421:33"><name pos:start="421:32" pos:end="421:33">hd</name></expr></argument>, <argument pos:start="421:36" pos:end="421:44"><expr pos:start="421:36" pos:end="421:44"><name pos:start="421:36" pos:end="421:44"><name pos:start="421:36" pos:end="421:38">pic</name><index pos:start="421:39" pos:end="421:44">[<expr pos:start="421:40" pos:end="421:43"><literal type="number" pos:start="421:40" pos:end="421:43">0x0d</literal></expr>]</index></name></expr></argument>, <argument pos:start="421:47" pos:end="421:51"><expr pos:start="421:47" pos:end="421:51"><name pos:start="421:47" pos:end="421:51">dbdma</name></expr></argument>, <argument pos:start="421:54" pos:end="421:57"><expr pos:start="421:54" pos:end="421:57"><literal type="number" pos:start="421:54" pos:end="421:57">0x16</literal></expr></argument>, <argument pos:start="421:60" pos:end="421:68"><expr pos:start="421:60" pos:end="421:68"><name pos:start="421:60" pos:end="421:68"><name pos:start="421:60" pos:end="421:62">pic</name><index pos:start="421:63" pos:end="421:68">[<expr pos:start="421:64" pos:end="421:67"><literal type="number" pos:start="421:64" pos:end="421:67">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:85"><expr pos:start="423:5" pos:end="423:84"><name pos:start="423:5" pos:end="423:14"><name pos:start="423:5" pos:end="423:11">ide_mem</name><index pos:start="423:12" pos:end="423:14">[<expr pos:start="423:13" pos:end="423:13"><literal type="number" pos:start="423:13" pos:end="423:13">2</literal></expr>]</index></name> <operator pos:start="423:16" pos:end="423:16">=</operator> <call pos:start="423:18" pos:end="423:84"><name pos:start="423:18" pos:end="423:30">pmac_ide_init</name><argument_list pos:start="423:31" pos:end="423:84">(<argument pos:start="423:32" pos:end="423:48"><expr pos:start="423:32" pos:end="423:48"><operator pos:start="423:32" pos:end="423:32">&amp;</operator><name pos:start="423:33" pos:end="423:48"><name pos:start="423:33" pos:end="423:34">hd</name><index pos:start="423:35" pos:end="423:48">[<expr pos:start="423:36" pos:end="423:47"><name pos:start="423:36" pos:end="423:47">MAX_IDE_DEVS</name></expr>]</index></name></expr></argument>, <argument pos:start="423:51" pos:end="423:59"><expr pos:start="423:51" pos:end="423:59"><name pos:start="423:51" pos:end="423:59"><name pos:start="423:51" pos:end="423:53">pic</name><index pos:start="423:54" pos:end="423:59">[<expr pos:start="423:55" pos:end="423:58"><literal type="number" pos:start="423:55" pos:end="423:58">0x0e</literal></expr>]</index></name></expr></argument>, <argument pos:start="423:62" pos:end="423:66"><expr pos:start="423:62" pos:end="423:66"><name pos:start="423:62" pos:end="423:66">dbdma</name></expr></argument>, <argument pos:start="423:69" pos:end="423:72"><expr pos:start="423:69" pos:end="423:72"><literal type="number" pos:start="423:69" pos:end="423:72">0x1a</literal></expr></argument>, <argument pos:start="423:75" pos:end="423:83"><expr pos:start="423:75" pos:end="423:83"><name pos:start="423:75" pos:end="423:83"><name pos:start="423:75" pos:end="423:77">pic</name><index pos:start="423:78" pos:end="423:83">[<expr pos:start="423:79" pos:end="423:82"><literal type="number" pos:start="423:79" pos:end="423:82">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="427:5" pos:end="427:34">/* cuda also initialize ADB */</comment>

    <if_stmt pos:start="429:5" pos:end="433:5"><if pos:start="429:5" pos:end="433:5">if <condition pos:start="429:8" pos:end="429:38">(<expr pos:start="429:9" pos:end="429:37"><name pos:start="429:9" pos:end="429:20">machine_arch</name> <operator pos:start="429:22" pos:end="429:23">==</operator> <name pos:start="429:25" pos:end="429:37">ARCH_MAC99_U3</name></expr>)</condition> <block pos:start="429:40" pos:end="433:5">{<block_content pos:start="431:9" pos:end="431:24">

        <expr_stmt pos:start="431:9" pos:end="431:24"><expr pos:start="431:9" pos:end="431:23"><name pos:start="431:9" pos:end="431:19">usb_enabled</name> <operator pos:start="431:21" pos:end="431:21">=</operator> <literal type="number" pos:start="431:23" pos:end="431:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:36"><expr pos:start="435:5" pos:end="435:35"><call pos:start="435:5" pos:end="435:35"><name pos:start="435:5" pos:end="435:13">cuda_init</name><argument_list pos:start="435:14" pos:end="435:35">(<argument pos:start="435:15" pos:end="435:23"><expr pos:start="435:15" pos:end="435:23"><operator pos:start="435:15" pos:end="435:15">&amp;</operator><name pos:start="435:16" pos:end="435:23">cuda_mem</name></expr></argument>, <argument pos:start="435:26" pos:end="435:34"><expr pos:start="435:26" pos:end="435:34"><name pos:start="435:26" pos:end="435:34"><name pos:start="435:26" pos:end="435:28">pic</name><index pos:start="435:29" pos:end="435:34">[<expr pos:start="435:30" pos:end="435:33"><literal type="number" pos:start="435:30" pos:end="435:33">0x19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="439:5" pos:end="439:27"><expr pos:start="439:5" pos:end="439:26"><call pos:start="439:5" pos:end="439:26"><name pos:start="439:5" pos:end="439:16">adb_kbd_init</name><argument_list pos:start="439:17" pos:end="439:26">(<argument pos:start="439:18" pos:end="439:25"><expr pos:start="439:18" pos:end="439:25"><operator pos:start="439:18" pos:end="439:18">&amp;</operator><name pos:start="439:19" pos:end="439:25">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:29"><expr pos:start="441:5" pos:end="441:28"><call pos:start="441:5" pos:end="441:28"><name pos:start="441:5" pos:end="441:18">adb_mouse_init</name><argument_list pos:start="441:19" pos:end="441:28">(<argument pos:start="441:20" pos:end="441:27"><expr pos:start="441:20" pos:end="441:27"><operator pos:start="441:20" pos:end="441:20">&amp;</operator><name pos:start="441:21" pos:end="441:27">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="445:5" pos:end="447:64"><expr pos:start="445:5" pos:end="447:63"><call pos:start="445:5" pos:end="447:63"><name pos:start="445:5" pos:end="445:14">macio_init</name><argument_list pos:start="445:15" pos:end="447:63">(<argument pos:start="445:16" pos:end="445:22"><expr pos:start="445:16" pos:end="445:22"><name pos:start="445:16" pos:end="445:22">pci_bus</name></expr></argument>, <argument pos:start="445:25" pos:end="445:54"><expr pos:start="445:25" pos:end="445:54"><name pos:start="445:25" pos:end="445:54">PCI_DEVICE_ID_APPLE_UNI_N_KEYL</name></expr></argument>, <argument pos:start="445:57" pos:end="445:57"><expr pos:start="445:57" pos:end="445:57"><literal type="number" pos:start="445:57" pos:end="445:57">0</literal></expr></argument>, <argument pos:start="445:60" pos:end="445:66"><expr pos:start="445:60" pos:end="445:66"><name pos:start="445:60" pos:end="445:66">pic_mem</name></expr></argument>,

               <argument pos:start="447:16" pos:end="447:24"><expr pos:start="447:16" pos:end="447:24"><name pos:start="447:16" pos:end="447:24">dbdma_mem</name></expr></argument>, <argument pos:start="447:27" pos:end="447:34"><expr pos:start="447:27" pos:end="447:34"><name pos:start="447:27" pos:end="447:34">cuda_mem</name></expr></argument>, <argument pos:start="447:37" pos:end="447:40"><expr pos:start="447:37" pos:end="447:40"><name pos:start="447:37" pos:end="447:40">NULL</name></expr></argument>, <argument pos:start="447:43" pos:end="447:43"><expr pos:start="447:43" pos:end="447:43"><literal type="number" pos:start="447:43" pos:end="447:43">3</literal></expr></argument>, <argument pos:start="447:46" pos:end="447:52"><expr pos:start="447:46" pos:end="447:52"><name pos:start="447:46" pos:end="447:52">ide_mem</name></expr></argument>, <argument pos:start="447:55" pos:end="447:62"><expr pos:start="447:55" pos:end="447:62"><name pos:start="447:55" pos:end="447:62">escc_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="451:5" pos:end="455:5"><if pos:start="451:5" pos:end="455:5">if <condition pos:start="451:8" pos:end="451:20">(<expr pos:start="451:9" pos:end="451:19"><name pos:start="451:9" pos:end="451:19">usb_enabled</name></expr>)</condition> <block pos:start="451:22" pos:end="455:5">{<block_content pos:start="453:9" pos:end="453:39">

        <expr_stmt pos:start="453:9" pos:end="453:39"><expr pos:start="453:9" pos:end="453:38"><call pos:start="453:9" pos:end="453:38"><name pos:start="453:9" pos:end="453:25">usb_ohci_init_pci</name><argument_list pos:start="453:26" pos:end="453:38">(<argument pos:start="453:27" pos:end="453:33"><expr pos:start="453:27" pos:end="453:33"><name pos:start="453:27" pos:end="453:33">pci_bus</name></expr></argument>, <argument pos:start="453:36" pos:end="453:37"><expr pos:start="453:36" pos:end="453:37"><operator pos:start="453:36" pos:end="453:36">-</operator><literal type="number" pos:start="453:37" pos:end="453:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="459:5" pos:end="461:18">/* U3 needs to use USB for input because Linux doesn't support via-cuda

       on PPC64 */</comment>

    <if_stmt pos:start="463:5" pos:end="469:5"><if pos:start="463:5" pos:end="469:5">if <condition pos:start="463:8" pos:end="463:38">(<expr pos:start="463:9" pos:end="463:37"><name pos:start="463:9" pos:end="463:20">machine_arch</name> <operator pos:start="463:22" pos:end="463:23">==</operator> <name pos:start="463:25" pos:end="463:37">ARCH_MAC99_U3</name></expr>)</condition> <block pos:start="463:40" pos:end="469:5">{<block_content pos:start="465:9" pos:end="467:34">

        <expr_stmt pos:start="465:9" pos:end="465:37"><expr pos:start="465:9" pos:end="465:36"><call pos:start="465:9" pos:end="465:36"><name pos:start="465:9" pos:end="465:24">usbdevice_create</name><argument_list pos:start="465:25" pos:end="465:36">(<argument pos:start="465:26" pos:end="465:35"><expr pos:start="465:26" pos:end="465:35"><literal type="string" pos:start="465:26" pos:end="465:35">"keyboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:34"><expr pos:start="467:9" pos:end="467:33"><call pos:start="467:9" pos:end="467:33"><name pos:start="467:9" pos:end="467:24">usbdevice_create</name><argument_list pos:start="467:25" pos:end="467:33">(<argument pos:start="467:26" pos:end="467:32"><expr pos:start="467:26" pos:end="467:32"><literal type="string" pos:start="467:26" pos:end="467:32">"mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="473:5" pos:end="475:27"><if pos:start="473:5" pos:end="475:27">if <condition pos:start="473:8" pos:end="473:73">(<expr pos:start="473:9" pos:end="473:72"><name pos:start="473:9" pos:end="473:21">graphic_depth</name> <operator pos:start="473:23" pos:end="473:24">!=</operator> <literal type="number" pos:start="473:26" pos:end="473:27">15</literal> <operator pos:start="473:29" pos:end="473:30">&amp;&amp;</operator> <name pos:start="473:32" pos:end="473:44">graphic_depth</name> <operator pos:start="473:46" pos:end="473:47">!=</operator> <literal type="number" pos:start="473:49" pos:end="473:50">32</literal> <operator pos:start="473:52" pos:end="473:53">&amp;&amp;</operator> <name pos:start="473:55" pos:end="473:67">graphic_depth</name> <operator pos:start="473:69" pos:end="473:70">!=</operator> <literal type="number" pos:start="473:72" pos:end="473:72">8</literal></expr>)</condition><block type="pseudo" pos:start="475:9" pos:end="475:27"><block_content pos:start="475:9" pos:end="475:27">

        <expr_stmt pos:start="475:9" pos:end="475:27"><expr pos:start="475:9" pos:end="475:26"><name pos:start="475:9" pos:end="475:21">graphic_depth</name> <operator pos:start="475:23" pos:end="475:23">=</operator> <literal type="number" pos:start="475:25" pos:end="475:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="479:5" pos:end="479:63">/* The NewWorld NVRAM is not located in the MacIO device */</comment>

    <expr_stmt pos:start="481:5" pos:end="481:38"><expr pos:start="481:5" pos:end="481:37"><name pos:start="481:5" pos:end="481:7">nvr</name> <operator pos:start="481:9" pos:end="481:9">=</operator> <call pos:start="481:11" pos:end="481:37"><name pos:start="481:11" pos:end="481:26">macio_nvram_init</name><argument_list pos:start="481:27" pos:end="481:37">(<argument pos:start="481:28" pos:end="481:33"><expr pos:start="481:28" pos:end="481:33"><literal type="number" pos:start="481:28" pos:end="481:33">0x2000</literal></expr></argument>, <argument pos:start="481:36" pos:end="481:36"><expr pos:start="481:36" pos:end="481:36"><literal type="number" pos:start="481:36" pos:end="481:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="483:5" pos:end="483:45"><expr pos:start="483:5" pos:end="483:44"><call pos:start="483:5" pos:end="483:44"><name pos:start="483:5" pos:end="483:31">pmac_format_nvram_partition</name><argument_list pos:start="483:32" pos:end="483:44">(<argument pos:start="483:33" pos:end="483:35"><expr pos:start="483:33" pos:end="483:35"><name pos:start="483:33" pos:end="483:35">nvr</name></expr></argument>, <argument pos:start="483:38" pos:end="483:43"><expr pos:start="483:38" pos:end="483:43"><literal type="number" pos:start="483:38" pos:end="483:43">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="485:5" pos:end="485:64"><expr pos:start="485:5" pos:end="485:63"><call pos:start="485:5" pos:end="485:63"><name pos:start="485:5" pos:end="485:25">macio_nvram_setup_bar</name><argument_list pos:start="485:26" pos:end="485:63">(<argument pos:start="485:27" pos:end="485:29"><expr pos:start="485:27" pos:end="485:29"><name pos:start="485:27" pos:end="485:29">nvr</name></expr></argument>, <argument pos:start="485:32" pos:end="485:50"><expr pos:start="485:32" pos:end="485:50"><call pos:start="485:32" pos:end="485:50"><name pos:start="485:32" pos:end="485:48">get_system_memory</name><argument_list pos:start="485:49" pos:end="485:50">()</argument_list></call></expr></argument>, <argument pos:start="485:53" pos:end="485:62"><expr pos:start="485:53" pos:end="485:62"><literal type="number" pos:start="485:53" pos:end="485:62">0xFFF04000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="487:5" pos:end="487:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="491:5" pos:end="491:55"><expr pos:start="491:5" pos:end="491:54"><name pos:start="491:5" pos:end="491:10">fw_cfg</name> <operator pos:start="491:12" pos:end="491:12">=</operator> <call pos:start="491:14" pos:end="491:54"><name pos:start="491:14" pos:end="491:24">fw_cfg_init</name><argument_list pos:start="491:25" pos:end="491:54">(<argument pos:start="491:26" pos:end="491:26"><expr pos:start="491:26" pos:end="491:26"><literal type="number" pos:start="491:26" pos:end="491:26">0</literal></expr></argument>, <argument pos:start="491:29" pos:end="491:29"><expr pos:start="491:29" pos:end="491:29"><literal type="number" pos:start="491:29" pos:end="491:29">0</literal></expr></argument>, <argument pos:start="491:32" pos:end="491:39"><expr pos:start="491:32" pos:end="491:39"><name pos:start="491:32" pos:end="491:39">CFG_ADDR</name></expr></argument>, <argument pos:start="491:42" pos:end="491:53"><expr pos:start="491:42" pos:end="491:53"><name pos:start="491:42" pos:end="491:49">CFG_ADDR</name> <operator pos:start="491:51" pos:end="491:51">+</operator> <literal type="number" pos:start="491:53" pos:end="491:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:41"><expr pos:start="493:5" pos:end="493:40"><call pos:start="493:5" pos:end="493:40"><name pos:start="493:5" pos:end="493:18">fw_cfg_add_i32</name><argument_list pos:start="493:19" pos:end="493:40">(<argument pos:start="493:20" pos:end="493:25"><expr pos:start="493:20" pos:end="493:25"><name pos:start="493:20" pos:end="493:25">fw_cfg</name></expr></argument>, <argument pos:start="493:28" pos:end="493:36"><expr pos:start="493:28" pos:end="493:36"><name pos:start="493:28" pos:end="493:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="493:39" pos:end="493:39"><expr pos:start="493:39" pos:end="493:39"><literal type="number" pos:start="493:39" pos:end="493:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="495:64"><expr pos:start="495:5" pos:end="495:63"><call pos:start="495:5" pos:end="495:63"><name pos:start="495:5" pos:end="495:18">fw_cfg_add_i64</name><argument_list pos:start="495:19" pos:end="495:63">(<argument pos:start="495:20" pos:end="495:25"><expr pos:start="495:20" pos:end="495:25"><name pos:start="495:20" pos:end="495:25">fw_cfg</name></expr></argument>, <argument pos:start="495:28" pos:end="495:42"><expr pos:start="495:28" pos:end="495:42"><name pos:start="495:28" pos:end="495:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="495:45" pos:end="495:62"><expr pos:start="495:45" pos:end="495:62"><operator pos:start="495:45" pos:end="495:45">(</operator><name pos:start="495:46" pos:end="495:53">uint64_t</name><operator pos:start="495:54" pos:end="495:54">)</operator><name pos:start="495:55" pos:end="495:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="497:5" pos:end="497:60"><expr pos:start="497:5" pos:end="497:59"><call pos:start="497:5" pos:end="497:59"><name pos:start="497:5" pos:end="497:18">fw_cfg_add_i16</name><argument_list pos:start="497:19" pos:end="497:59">(<argument pos:start="497:20" pos:end="497:25"><expr pos:start="497:20" pos:end="497:25"><name pos:start="497:20" pos:end="497:25">fw_cfg</name></expr></argument>, <argument pos:start="497:28" pos:end="497:44"><expr pos:start="497:28" pos:end="497:44"><name pos:start="497:28" pos:end="497:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="497:47" pos:end="497:58"><expr pos:start="497:47" pos:end="497:58"><name pos:start="497:47" pos:end="497:58">machine_arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:60"><expr pos:start="499:5" pos:end="499:59"><call pos:start="499:5" pos:end="499:59"><name pos:start="499:5" pos:end="499:18">fw_cfg_add_i32</name><argument_list pos:start="499:19" pos:end="499:59">(<argument pos:start="499:20" pos:end="499:25"><expr pos:start="499:20" pos:end="499:25"><name pos:start="499:20" pos:end="499:25">fw_cfg</name></expr></argument>, <argument pos:start="499:28" pos:end="499:45"><expr pos:start="499:28" pos:end="499:45"><name pos:start="499:28" pos:end="499:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="499:48" pos:end="499:58"><expr pos:start="499:48" pos:end="499:58"><name pos:start="499:48" pos:end="499:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:60"><expr pos:start="501:5" pos:end="501:59"><call pos:start="501:5" pos:end="501:59"><name pos:start="501:5" pos:end="501:18">fw_cfg_add_i32</name><argument_list pos:start="501:19" pos:end="501:59">(<argument pos:start="501:20" pos:end="501:25"><expr pos:start="501:20" pos:end="501:25"><name pos:start="501:20" pos:end="501:25">fw_cfg</name></expr></argument>, <argument pos:start="501:28" pos:end="501:45"><expr pos:start="501:28" pos:end="501:45"><name pos:start="501:28" pos:end="501:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="501:48" pos:end="501:58"><expr pos:start="501:48" pos:end="501:58"><name pos:start="501:48" pos:end="501:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="503:5" pos:end="513:5"><if pos:start="503:5" pos:end="509:5">if <condition pos:start="503:8" pos:end="503:23">(<expr pos:start="503:9" pos:end="503:22"><name pos:start="503:9" pos:end="503:22">kernel_cmdline</name></expr>)</condition> <block pos:start="503:25" pos:end="509:5">{<block_content pos:start="505:9" pos:end="507:84">

        <expr_stmt pos:start="505:9" pos:end="505:68"><expr pos:start="505:9" pos:end="505:67"><call pos:start="505:9" pos:end="505:67"><name pos:start="505:9" pos:end="505:22">fw_cfg_add_i32</name><argument_list pos:start="505:23" pos:end="505:67">(<argument pos:start="505:24" pos:end="505:29"><expr pos:start="505:24" pos:end="505:29"><name pos:start="505:24" pos:end="505:29">fw_cfg</name></expr></argument>, <argument pos:start="505:32" pos:end="505:52"><expr pos:start="505:32" pos:end="505:52"><name pos:start="505:32" pos:end="505:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="505:55" pos:end="505:66"><expr pos:start="505:55" pos:end="505:66"><name pos:start="505:55" pos:end="505:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="507:9" pos:end="507:84"><expr pos:start="507:9" pos:end="507:83"><call pos:start="507:9" pos:end="507:83"><name pos:start="507:9" pos:end="507:24">pstrcpy_targphys</name><argument_list pos:start="507:25" pos:end="507:83">(<argument pos:start="507:26" pos:end="507:34"><expr pos:start="507:26" pos:end="507:34"><literal type="string" pos:start="507:26" pos:end="507:34">"cmdline"</literal></expr></argument>, <argument pos:start="507:37" pos:end="507:48"><expr pos:start="507:37" pos:end="507:48"><name pos:start="507:37" pos:end="507:48">cmdline_base</name></expr></argument>, <argument pos:start="507:51" pos:end="507:66"><expr pos:start="507:51" pos:end="507:66"><name pos:start="507:51" pos:end="507:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="507:69" pos:end="507:82"><expr pos:start="507:69" pos:end="507:82"><name pos:start="507:69" pos:end="507:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="509:7" pos:end="513:5">else <block pos:start="509:12" pos:end="513:5">{<block_content pos:start="511:9" pos:end="511:57">

        <expr_stmt pos:start="511:9" pos:end="511:57"><expr pos:start="511:9" pos:end="511:56"><call pos:start="511:9" pos:end="511:56"><name pos:start="511:9" pos:end="511:22">fw_cfg_add_i32</name><argument_list pos:start="511:23" pos:end="511:56">(<argument pos:start="511:24" pos:end="511:29"><expr pos:start="511:24" pos:end="511:29"><name pos:start="511:24" pos:end="511:29">fw_cfg</name></expr></argument>, <argument pos:start="511:32" pos:end="511:52"><expr pos:start="511:32" pos:end="511:52"><name pos:start="511:32" pos:end="511:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="511:55" pos:end="511:55"><expr pos:start="511:55" pos:end="511:55"><literal type="number" pos:start="511:55" pos:end="511:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="515:5" pos:end="515:60"><expr pos:start="515:5" pos:end="515:59"><call pos:start="515:5" pos:end="515:59"><name pos:start="515:5" pos:end="515:18">fw_cfg_add_i32</name><argument_list pos:start="515:19" pos:end="515:59">(<argument pos:start="515:20" pos:end="515:25"><expr pos:start="515:20" pos:end="515:25"><name pos:start="515:20" pos:end="515:25">fw_cfg</name></expr></argument>, <argument pos:start="515:28" pos:end="515:45"><expr pos:start="515:28" pos:end="515:45"><name pos:start="515:28" pos:end="515:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="515:48" pos:end="515:58"><expr pos:start="515:48" pos:end="515:58"><name pos:start="515:48" pos:end="515:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="517:5" pos:end="517:60"><expr pos:start="517:5" pos:end="517:59"><call pos:start="517:5" pos:end="517:59"><name pos:start="517:5" pos:end="517:18">fw_cfg_add_i32</name><argument_list pos:start="517:19" pos:end="517:59">(<argument pos:start="517:20" pos:end="517:25"><expr pos:start="517:20" pos:end="517:25"><name pos:start="517:20" pos:end="517:25">fw_cfg</name></expr></argument>, <argument pos:start="517:28" pos:end="517:45"><expr pos:start="517:28" pos:end="517:45"><name pos:start="517:28" pos:end="517:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="517:48" pos:end="517:58"><expr pos:start="517:48" pos:end="517:58"><name pos:start="517:48" pos:end="517:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:64"><expr pos:start="519:5" pos:end="519:63"><call pos:start="519:5" pos:end="519:63"><name pos:start="519:5" pos:end="519:18">fw_cfg_add_i16</name><argument_list pos:start="519:19" pos:end="519:63">(<argument pos:start="519:20" pos:end="519:25"><expr pos:start="519:20" pos:end="519:25"><name pos:start="519:20" pos:end="519:25">fw_cfg</name></expr></argument>, <argument pos:start="519:28" pos:end="519:45"><expr pos:start="519:28" pos:end="519:45"><name pos:start="519:28" pos:end="519:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="519:48" pos:end="519:62"><expr pos:start="519:48" pos:end="519:62"><name pos:start="519:48" pos:end="519:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="523:5" pos:end="523:60"><expr pos:start="523:5" pos:end="523:59"><call pos:start="523:5" pos:end="523:59"><name pos:start="523:5" pos:end="523:18">fw_cfg_add_i16</name><argument_list pos:start="523:19" pos:end="523:59">(<argument pos:start="523:20" pos:end="523:25"><expr pos:start="523:20" pos:end="523:25"><name pos:start="523:20" pos:end="523:25">fw_cfg</name></expr></argument>, <argument pos:start="523:28" pos:end="523:43"><expr pos:start="523:28" pos:end="523:43"><name pos:start="523:28" pos:end="523:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="523:46" pos:end="523:58"><expr pos:start="523:46" pos:end="523:58"><name pos:start="523:46" pos:end="523:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="525:5" pos:end="525:62"><expr pos:start="525:5" pos:end="525:61"><call pos:start="525:5" pos:end="525:61"><name pos:start="525:5" pos:end="525:18">fw_cfg_add_i16</name><argument_list pos:start="525:19" pos:end="525:61">(<argument pos:start="525:20" pos:end="525:25"><expr pos:start="525:20" pos:end="525:25"><name pos:start="525:20" pos:end="525:25">fw_cfg</name></expr></argument>, <argument pos:start="525:28" pos:end="525:44"><expr pos:start="525:28" pos:end="525:44"><name pos:start="525:28" pos:end="525:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="525:47" pos:end="525:60"><expr pos:start="525:47" pos:end="525:60"><name pos:start="525:47" pos:end="525:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="527:5" pos:end="527:60"><expr pos:start="527:5" pos:end="527:59"><call pos:start="527:5" pos:end="527:59"><name pos:start="527:5" pos:end="527:18">fw_cfg_add_i16</name><argument_list pos:start="527:19" pos:end="527:59">(<argument pos:start="527:20" pos:end="527:25"><expr pos:start="527:20" pos:end="527:25"><name pos:start="527:20" pos:end="527:25">fw_cfg</name></expr></argument>, <argument pos:start="527:28" pos:end="527:43"><expr pos:start="527:28" pos:end="527:43"><name pos:start="527:28" pos:end="527:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="527:46" pos:end="527:58"><expr pos:start="527:46" pos:end="527:58"><name pos:start="527:46" pos:end="527:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="531:5" pos:end="531:61"><expr pos:start="531:5" pos:end="531:60"><call pos:start="531:5" pos:end="531:60"><name pos:start="531:5" pos:end="531:18">fw_cfg_add_i32</name><argument_list pos:start="531:19" pos:end="531:60">(<argument pos:start="531:20" pos:end="531:25"><expr pos:start="531:20" pos:end="531:25"><name pos:start="531:20" pos:end="531:25">fw_cfg</name></expr></argument>, <argument pos:start="531:28" pos:end="531:44"><expr pos:start="531:28" pos:end="531:44"><name pos:start="531:28" pos:end="531:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="531:47" pos:end="531:59"><expr pos:start="531:47" pos:end="531:59"><call pos:start="531:47" pos:end="531:59"><name pos:start="531:47" pos:end="531:57">kvm_enabled</name><argument_list pos:start="531:58" pos:end="531:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="533:5" pos:end="557:5"><if pos:start="533:5" pos:end="553:5">if <condition pos:start="533:8" pos:end="533:22">(<expr pos:start="533:9" pos:end="533:21"><call pos:start="533:9" pos:end="533:21"><name pos:start="533:9" pos:end="533:19">kvm_enabled</name><argument_list pos:start="533:20" pos:end="533:21">()</argument_list></call></expr>)</condition> <block pos:start="533:24" pos:end="553:5">{<block_content pos:start="537:9" pos:end="552:0">

<cpp:ifdef pos:start="535:1" pos:end="535:17">#<cpp:directive pos:start="535:2" pos:end="535:6">ifdef</cpp:directive> <name pos:start="535:8" pos:end="535:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="537:9" pos:end="537:27"><decl pos:start="537:9" pos:end="537:26"><type pos:start="537:9" pos:end="537:17"><name pos:start="537:9" pos:end="537:15">uint8_t</name> <modifier pos:start="537:17" pos:end="537:17">*</modifier></type><name pos:start="537:18" pos:end="537:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="541:9" pos:end="541:71"><expr pos:start="541:9" pos:end="541:70"><call pos:start="541:9" pos:end="541:70"><name pos:start="541:9" pos:end="541:22">fw_cfg_add_i32</name><argument_list pos:start="541:23" pos:end="541:70">(<argument pos:start="541:24" pos:end="541:29"><expr pos:start="541:24" pos:end="541:29"><name pos:start="541:24" pos:end="541:29">fw_cfg</name></expr></argument>, <argument pos:start="541:32" pos:end="541:48"><expr pos:start="541:32" pos:end="541:48"><name pos:start="541:32" pos:end="541:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="541:51" pos:end="541:69"><expr pos:start="541:51" pos:end="541:69"><call pos:start="541:51" pos:end="541:69"><name pos:start="541:51" pos:end="541:67">kvmppc_get_tbfreq</name><argument_list pos:start="541:68" pos:end="541:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="543:9" pos:end="543:33"><expr pos:start="543:9" pos:end="543:32"><name pos:start="543:9" pos:end="543:17">hypercall</name> <operator pos:start="543:19" pos:end="543:19">=</operator> <call pos:start="543:21" pos:end="543:32"><name pos:start="543:21" pos:end="543:28">g_malloc</name><argument_list pos:start="543:29" pos:end="543:32">(<argument pos:start="543:30" pos:end="543:31"><expr pos:start="543:30" pos:end="543:31"><literal type="number" pos:start="543:30" pos:end="543:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="545:9" pos:end="545:49"><expr pos:start="545:9" pos:end="545:48"><call pos:start="545:9" pos:end="545:48"><name pos:start="545:9" pos:end="545:28">kvmppc_get_hypercall</name><argument_list pos:start="545:29" pos:end="545:48">(<argument pos:start="545:30" pos:end="545:32"><expr pos:start="545:30" pos:end="545:32"><name pos:start="545:30" pos:end="545:32">env</name></expr></argument>, <argument pos:start="545:35" pos:end="545:43"><expr pos:start="545:35" pos:end="545:43"><name pos:start="545:35" pos:end="545:43">hypercall</name></expr></argument>, <argument pos:start="545:46" pos:end="545:47"><expr pos:start="545:46" pos:end="545:47"><literal type="number" pos:start="545:46" pos:end="545:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="547:9" pos:end="547:67"><expr pos:start="547:9" pos:end="547:66"><call pos:start="547:9" pos:end="547:66"><name pos:start="547:9" pos:end="547:24">fw_cfg_add_bytes</name><argument_list pos:start="547:25" pos:end="547:66">(<argument pos:start="547:26" pos:end="547:31"><expr pos:start="547:26" pos:end="547:31"><name pos:start="547:26" pos:end="547:31">fw_cfg</name></expr></argument>, <argument pos:start="547:34" pos:end="547:50"><expr pos:start="547:34" pos:end="547:50"><name pos:start="547:34" pos:end="547:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="547:53" pos:end="547:61"><expr pos:start="547:53" pos:end="547:61"><name pos:start="547:53" pos:end="547:61">hypercall</name></expr></argument>, <argument pos:start="547:64" pos:end="547:65"><expr pos:start="547:64" pos:end="547:65"><literal type="number" pos:start="547:64" pos:end="547:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="549:9" pos:end="552:0"><expr pos:start="549:9" pos:end="549:60"><call pos:start="549:9" pos:end="549:60"><name pos:start="549:9" pos:end="549:22">fw_cfg_add_i32</name><argument_list pos:start="549:23" pos:end="549:60">(<argument pos:start="549:24" pos:end="549:29"><expr pos:start="549:24" pos:end="549:29"><name pos:start="549:24" pos:end="549:29">fw_cfg</name></expr></argument>, <argument pos:start="549:32" pos:end="549:49"><expr pos:start="549:32" pos:end="549:49"><name pos:start="549:32" pos:end="549:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="549:52" pos:end="549:59"><expr pos:start="549:52" pos:end="549:59"><call pos:start="549:52" pos:end="549:59"><name pos:start="549:52" pos:end="549:57">getpid</name><argument_list pos:start="549:58" pos:end="549:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="551:1" pos:end="551:6">#<cpp:directive pos:start="551:2" pos:end="551:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="553:7" pos:end="557:5">else <block pos:start="553:12" pos:end="557:5">{<block_content pos:start="555:9" pos:end="555:71">

        <expr_stmt pos:start="555:9" pos:end="555:71"><expr pos:start="555:9" pos:end="555:70"><call pos:start="555:9" pos:end="555:70"><name pos:start="555:9" pos:end="555:22">fw_cfg_add_i32</name><argument_list pos:start="555:23" pos:end="555:70">(<argument pos:start="555:24" pos:end="555:29"><expr pos:start="555:24" pos:end="555:29"><name pos:start="555:24" pos:end="555:29">fw_cfg</name></expr></argument>, <argument pos:start="555:32" pos:end="555:48"><expr pos:start="555:32" pos:end="555:48"><name pos:start="555:32" pos:end="555:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="555:51" pos:end="555:69"><expr pos:start="555:51" pos:end="555:69"><call pos:start="555:51" pos:end="555:69"><name pos:start="555:51" pos:end="555:67">get_ticks_per_sec</name><argument_list pos:start="555:68" pos:end="555:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="561:5" pos:end="561:52"><expr pos:start="561:5" pos:end="561:51"><call pos:start="561:5" pos:end="561:51"><name pos:start="561:5" pos:end="561:26">qemu_register_boot_set</name><argument_list pos:start="561:27" pos:end="561:51">(<argument pos:start="561:28" pos:end="561:42"><expr pos:start="561:28" pos:end="561:42"><name pos:start="561:28" pos:end="561:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="561:45" pos:end="561:50"><expr pos:start="561:45" pos:end="561:50"><name pos:start="561:45" pos:end="561:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
