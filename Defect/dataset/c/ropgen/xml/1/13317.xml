<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13317.c" pos:tabs="8"><function pos:start="1:1" pos:end="120:20"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_frame_header</name><parameter_list pos:start="1:31" pos:end="3:74">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:44">ProresContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><specifier pos:start="1:52" pos:end="1:56">const</specifier> <name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">buf</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:50"><decl pos:start="3:32" pos:end="3:50"><type pos:start="3:32" pos:end="3:50"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:50">data_size</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:73"><decl pos:start="3:53" pos:end="3:73"><type pos:start="3:53" pos:end="3:73"><name pos:start="3:53" pos:end="3:66">AVCodecContext</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:73">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="120:20">{<block_content pos:start="7:5" pos:end="120:20">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">hdr_size</name></decl>, <decl pos:start="7:19" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:23">width</name></decl>, <decl pos:start="7:26" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:31">height</name></decl>, <decl pos:start="7:34" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:38">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:12">hdr_size</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:27"><name pos:start="15:16" pos:end="15:22">AV_RB16</name><argument_list pos:start="15:23" pos:end="15:27">(<argument pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:26">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:49"><expr pos:start="17:5" pos:end="17:48"><call pos:start="17:5" pos:end="17:48"><name pos:start="17:5" pos:end="17:11">av_dlog</name><argument_list pos:start="17:12" pos:end="17:48">(<argument pos:start="17:13" pos:end="17:17"><expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:17">avctx</name></expr></argument>, <argument pos:start="17:20" pos:end="17:37"><expr pos:start="17:20" pos:end="17:37"><literal type="string" pos:start="17:20" pos:end="17:37">"header size %d\n"</literal></expr></argument>, <argument pos:start="17:40" pos:end="17:47"><expr pos:start="17:40" pos:end="17:47"><name pos:start="17:40" pos:end="17:47">hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="120:20"><if pos:start="19:5" pos:end="120:20">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:16">hdr_size</name> <operator pos:start="19:18" pos:end="19:18">&gt;</operator> <name pos:start="19:20" pos:end="19:28">data_size</name></expr>)</condition> <block pos:start="19:31" pos:end="120:20">{<block_content pos:start="21:9" pos:end="120:20">

        <expr_stmt pos:start="21:9" pos:end="21:66"><expr pos:start="21:9" pos:end="21:65"><call pos:start="21:9" pos:end="21:65"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:65">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:64"><expr pos:start="21:37" pos:end="21:64"><literal type="string" pos:start="21:37" pos:end="21:64">"error, wrong header size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:11">version</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:30"><name pos:start="27:15" pos:end="27:21">AV_RB16</name><argument_list pos:start="27:22" pos:end="27:30">(<argument pos:start="27:23" pos:end="27:29"><expr pos:start="27:23" pos:end="27:29"><name pos:start="27:23" pos:end="27:25">buf</name> <operator pos:start="27:27" pos:end="27:27">+</operator> <literal type="number" pos:start="27:29" pos:end="27:29">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:56"><expr pos:start="29:5" pos:end="29:55"><call pos:start="29:5" pos:end="29:55"><name pos:start="29:5" pos:end="29:11">av_dlog</name><argument_list pos:start="29:12" pos:end="29:55">(<argument pos:start="29:13" pos:end="29:17"><expr pos:start="29:13" pos:end="29:17"><name pos:start="29:13" pos:end="29:17">avctx</name></expr></argument>, <argument pos:start="29:20" pos:end="29:38"><expr pos:start="29:20" pos:end="29:38"><literal type="string" pos:start="29:20" pos:end="29:38">"%.4s version %d\n"</literal></expr></argument>, <argument pos:start="29:41" pos:end="29:45"><expr pos:start="29:41" pos:end="29:45"><name pos:start="29:41" pos:end="29:43">buf</name><operator pos:start="29:44" pos:end="29:44">+</operator><literal type="number" pos:start="29:45" pos:end="29:45">4</literal></expr></argument>, <argument pos:start="29:48" pos:end="29:54"><expr pos:start="29:48" pos:end="29:54"><name pos:start="29:48" pos:end="29:54">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="120:20"><if pos:start="31:5" pos:end="120:20">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:15">version</name> <operator pos:start="31:17" pos:end="31:17">&gt;</operator> <literal type="number" pos:start="31:19" pos:end="31:19">1</literal></expr>)</condition> <block pos:start="31:22" pos:end="120:20">{<block_content pos:start="33:9" pos:end="120:20">

        <expr_stmt pos:start="33:9" pos:end="33:74"><expr pos:start="33:9" pos:end="33:73"><call pos:start="33:9" pos:end="33:73"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:73">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:37" pos:end="33:63"><expr pos:start="33:37" pos:end="33:63"><literal type="string" pos:start="33:37" pos:end="33:63">"unsupported version: %d\n"</literal></expr></argument>, <argument pos:start="33:66" pos:end="33:72"><expr pos:start="33:66" pos:end="33:72"><name pos:start="33:66" pos:end="33:72">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:9">width</name>  <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:29"><name pos:start="39:14" pos:end="39:20">AV_RB16</name><argument_list pos:start="39:21" pos:end="39:29">(<argument pos:start="39:22" pos:end="39:28"><expr pos:start="39:22" pos:end="39:28"><name pos:start="39:22" pos:end="39:24">buf</name> <operator pos:start="39:26" pos:end="39:26">+</operator> <literal type="number" pos:start="39:28" pos:end="39:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:10">height</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:30"><name pos:start="41:14" pos:end="41:20">AV_RB16</name><argument_list pos:start="41:21" pos:end="41:30">(<argument pos:start="41:22" pos:end="41:29"><expr pos:start="41:22" pos:end="41:29"><name pos:start="41:22" pos:end="41:24">buf</name> <operator pos:start="41:26" pos:end="41:26">+</operator> <literal type="number" pos:start="41:28" pos:end="41:29">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="120:20"><if pos:start="43:5" pos:end="120:20">if <condition pos:start="43:8" pos:end="43:57">(<expr pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:13">width</name> <operator pos:start="43:15" pos:end="43:16">!=</operator> <name pos:start="43:18" pos:end="43:29"><name pos:start="43:18" pos:end="43:22">avctx</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:29">width</name></name> <operator pos:start="43:31" pos:end="43:32">||</operator> <name pos:start="43:34" pos:end="43:39">height</name> <operator pos:start="43:41" pos:end="43:42">!=</operator> <name pos:start="43:44" pos:end="43:56"><name pos:start="43:44" pos:end="43:48">avctx</name><operator pos:start="43:49" pos:end="43:50">-&gt;</operator><name pos:start="43:51" pos:end="43:56">height</name></name></expr>)</condition> <block pos:start="43:59" pos:end="120:20">{<block_content pos:start="45:9" pos:end="120:20">

        <expr_stmt pos:start="45:9" pos:end="47:59"><expr pos:start="45:9" pos:end="47:58"><call pos:start="45:9" pos:end="47:58"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="47:58">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:37" pos:end="45:81"><expr pos:start="45:37" pos:end="45:81"><literal type="string" pos:start="45:37" pos:end="45:81">"picture resolution change: %dx%d -&gt; %dx%d\n"</literal></expr></argument>,

               <argument pos:start="47:16" pos:end="47:27"><expr pos:start="47:16" pos:end="47:27"><name pos:start="47:16" pos:end="47:27"><name pos:start="47:16" pos:end="47:20">avctx</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:27">width</name></name></expr></argument>, <argument pos:start="47:30" pos:end="47:42"><expr pos:start="47:30" pos:end="47:42"><name pos:start="47:30" pos:end="47:42"><name pos:start="47:30" pos:end="47:34">avctx</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:42">height</name></name></expr></argument>, <argument pos:start="47:45" pos:end="47:49"><expr pos:start="47:45" pos:end="47:49"><name pos:start="47:45" pos:end="47:49">width</name></expr></argument>, <argument pos:start="47:52" pos:end="47:57"><expr pos:start="47:52" pos:end="47:57"><name pos:start="47:52" pos:end="47:57">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="53:5" pos:end="53:41"><expr pos:start="53:5" pos:end="53:40"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:7">ctx</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:19">frame_type</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <operator pos:start="53:23" pos:end="53:23">(</operator><name pos:start="53:24" pos:end="53:30"><name pos:start="53:24" pos:end="53:26">buf</name><index pos:start="53:27" pos:end="53:30">[<expr pos:start="53:28" pos:end="53:29"><literal type="number" pos:start="53:28" pos:end="53:29">12</literal></expr>]</index></name> <operator pos:start="53:32" pos:end="53:33">&gt;&gt;</operator> <literal type="number" pos:start="53:35" pos:end="53:35">2</literal><operator pos:start="53:36" pos:end="53:36">)</operator> <operator pos:start="53:38" pos:end="53:38">&amp;</operator> <literal type="number" pos:start="53:40" pos:end="53:40">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:55"><expr pos:start="57:5" pos:end="57:54"><call pos:start="57:5" pos:end="57:54"><name pos:start="57:5" pos:end="57:11">av_dlog</name><argument_list pos:start="57:12" pos:end="57:54">(<argument pos:start="57:13" pos:end="57:17"><expr pos:start="57:13" pos:end="57:17"><name pos:start="57:13" pos:end="57:17">avctx</name></expr></argument>, <argument pos:start="57:20" pos:end="57:36"><expr pos:start="57:20" pos:end="57:36"><literal type="string" pos:start="57:20" pos:end="57:36">"frame type %d\n"</literal></expr></argument>, <argument pos:start="57:39" pos:end="57:53"><expr pos:start="57:39" pos:end="57:53"><name pos:start="57:39" pos:end="57:53"><name pos:start="57:39" pos:end="57:41">ctx</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:53">frame_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="120:20"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:29">(<expr pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:11">ctx</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:23">frame_type</name></name> <operator pos:start="61:25" pos:end="61:26">==</operator> <literal type="number" pos:start="61:28" pos:end="61:28">0</literal></expr>)</condition> <block pos:start="61:31" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:42">

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:11">ctx</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:17">scan</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:41"><name pos:start="63:21" pos:end="63:23">ctx</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:41">progressive_scan</name></name></expr>;</expr_stmt> <comment type="line" pos:start="63:44" pos:end="63:54">// permuted</comment>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="120:20">else <block pos:start="65:12" pos:end="120:20">{<block_content pos:start="67:9" pos:end="120:20">

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:11">ctx</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:17">scan</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:40"><name pos:start="67:21" pos:end="67:23">ctx</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:40">interlaced_scan</name></name></expr>;</expr_stmt> <comment type="line" pos:start="67:43" pos:end="67:53">// permuted</comment>

        <expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:11">ctx</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:18">frame</name><operator pos:start="69:19" pos:end="69:19">.</operator><name pos:start="69:20" pos:end="69:35">interlaced_frame</name></name> <operator pos:start="69:37" pos:end="69:37">=</operator> <literal type="number" pos:start="69:39" pos:end="69:39">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:58"><expr pos:start="71:9" pos:end="71:57"><name pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:11">ctx</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:18">frame</name><operator pos:start="71:19" pos:end="71:19">.</operator><name pos:start="71:20" pos:end="71:34">top_field_first</name></name> <operator pos:start="71:36" pos:end="71:36">=</operator> <name pos:start="71:38" pos:end="71:52"><name pos:start="71:38" pos:end="71:40">ctx</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:52">frame_type</name></name> <operator pos:start="71:54" pos:end="71:55">==</operator> <literal type="number" pos:start="71:57" pos:end="71:57">1</literal></expr>;</expr_stmt>




    <expr_stmt pos:start="76:5" pos:end="76:92"><expr pos:start="76:5" pos:end="76:91"><name pos:start="76:5" pos:end="76:18"><name pos:start="76:5" pos:end="76:9">avctx</name><operator pos:start="76:10" pos:end="76:11">-&gt;</operator><name pos:start="76:12" pos:end="76:18">pix_fmt</name></name> <operator pos:start="76:20" pos:end="76:20">=</operator> <ternary pos:start="76:22" pos:end="76:91"><condition pos:start="76:22" pos:end="76:47"><expr pos:start="76:22" pos:end="76:45"><operator pos:start="76:22" pos:end="76:22">(</operator><name pos:start="76:23" pos:end="76:29"><name pos:start="76:23" pos:end="76:25">buf</name><index pos:start="76:26" pos:end="76:29">[<expr pos:start="76:27" pos:end="76:28"><literal type="number" pos:start="76:27" pos:end="76:28">12</literal></expr>]</index></name> <operator pos:start="76:31" pos:end="76:31">&amp;</operator> <literal type="number" pos:start="76:33" pos:end="76:36">0xC0</literal><operator pos:start="76:37" pos:end="76:37">)</operator> <operator pos:start="76:39" pos:end="76:40">==</operator> <literal type="number" pos:start="76:42" pos:end="76:45">0xC0</literal></expr> ?</condition><then pos:start="76:49" pos:end="76:68"> <expr pos:start="76:49" pos:end="76:68"><name pos:start="76:49" pos:end="76:68">AV_PIX_FMT_YUV444P10</name></expr> </then><else pos:start="76:70" pos:end="76:91">: <expr pos:start="76:72" pos:end="76:91"><name pos:start="76:72" pos:end="76:91">AV_PIX_FMT_YUV422P10</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="80:5" pos:end="80:21"><expr pos:start="80:5" pos:end="80:20"><name pos:start="80:5" pos:end="80:7">ptr</name>   <operator pos:start="80:11" pos:end="80:11">=</operator> <name pos:start="80:13" pos:end="80:15">buf</name> <operator pos:start="80:17" pos:end="80:17">+</operator> <literal type="number" pos:start="80:19" pos:end="80:20">20</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="82:5" pos:end="82:20"><expr pos:start="82:5" pos:end="82:19"><name pos:start="82:5" pos:end="82:9">flags</name> <operator pos:start="82:11" pos:end="82:11">=</operator> <name pos:start="82:13" pos:end="82:19"><name pos:start="82:13" pos:end="82:15">buf</name><index pos:start="82:16" pos:end="82:19">[<expr pos:start="82:17" pos:end="82:18"><literal type="number" pos:start="82:17" pos:end="82:18">19</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="84:5" pos:end="84:40"><expr pos:start="84:5" pos:end="84:39"><call pos:start="84:5" pos:end="84:39"><name pos:start="84:5" pos:end="84:11">av_dlog</name><argument_list pos:start="84:12" pos:end="84:39">(<argument pos:start="84:13" pos:end="84:17"><expr pos:start="84:13" pos:end="84:17"><name pos:start="84:13" pos:end="84:17">avctx</name></expr></argument>, <argument pos:start="84:20" pos:end="84:31"><expr pos:start="84:20" pos:end="84:31"><literal type="string" pos:start="84:20" pos:end="84:31">"flags %x\n"</literal></expr></argument>, <argument pos:start="84:34" pos:end="84:38"><expr pos:start="84:34" pos:end="84:38"><name pos:start="84:34" pos:end="84:38">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="88:5" pos:end="120:20"><if pos:start="88:5" pos:end="98:5">if <condition pos:start="88:8" pos:end="88:18">(<expr pos:start="88:9" pos:end="88:17"><name pos:start="88:9" pos:end="88:13">flags</name> <operator pos:start="88:15" pos:end="88:15">&amp;</operator> <literal type="number" pos:start="88:17" pos:end="88:17">2</literal></expr>)</condition> <block pos:start="88:20" pos:end="98:5">{<block_content pos:start="94:9" pos:end="96:18">





        <expr_stmt pos:start="94:9" pos:end="94:67"><expr pos:start="94:9" pos:end="94:66"><call pos:start="94:9" pos:end="94:66"><name pos:start="94:9" pos:end="94:15">permute</name><argument_list pos:start="94:16" pos:end="94:66">(<argument pos:start="94:17" pos:end="94:30"><expr pos:start="94:17" pos:end="94:30"><name pos:start="94:17" pos:end="94:30"><name pos:start="94:17" pos:end="94:19">ctx</name><operator pos:start="94:20" pos:end="94:21">-&gt;</operator><name pos:start="94:22" pos:end="94:30">qmat_luma</name></name></expr></argument>, <argument pos:start="94:33" pos:end="94:60"><expr pos:start="94:33" pos:end="94:60"><name pos:start="94:33" pos:end="94:60"><name pos:start="94:33" pos:end="94:35">ctx</name><operator pos:start="94:36" pos:end="94:37">-&gt;</operator><name pos:start="94:38" pos:end="94:43">prodsp</name><operator pos:start="94:44" pos:end="94:44">.</operator><name pos:start="94:45" pos:end="94:60">idct_permutation</name></name></expr></argument>, <argument pos:start="94:63" pos:end="94:65"><expr pos:start="94:63" pos:end="94:65"><name pos:start="94:63" pos:end="94:65">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="96:9" pos:end="96:18"><expr pos:start="96:9" pos:end="96:17"><name pos:start="96:9" pos:end="96:11">ptr</name> <operator pos:start="96:13" pos:end="96:14">+=</operator> <literal type="number" pos:start="96:16" pos:end="96:17">64</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="98:7" pos:end="120:20">else <block pos:start="98:12" pos:end="120:20">{<block_content pos:start="100:9" pos:end="120:20">

        <expr_stmt pos:start="100:9" pos:end="100:38"><expr pos:start="100:9" pos:end="100:37"><call pos:start="100:9" pos:end="100:37"><name pos:start="100:9" pos:end="100:14">memset</name><argument_list pos:start="100:15" pos:end="100:37">(<argument pos:start="100:16" pos:end="100:29"><expr pos:start="100:16" pos:end="100:29"><name pos:start="100:16" pos:end="100:29"><name pos:start="100:16" pos:end="100:18">ctx</name><operator pos:start="100:19" pos:end="100:20">-&gt;</operator><name pos:start="100:21" pos:end="100:29">qmat_luma</name></name></expr></argument>, <argument pos:start="100:32" pos:end="100:32"><expr pos:start="100:32" pos:end="100:32"><literal type="number" pos:start="100:32" pos:end="100:32">4</literal></expr></argument>, <argument pos:start="100:35" pos:end="100:36"><expr pos:start="100:35" pos:end="100:36"><literal type="number" pos:start="100:35" pos:end="100:36">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <if_stmt pos:start="105:5" pos:end="120:20"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:18">(<expr pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:13">flags</name> <operator pos:start="105:15" pos:end="105:15">&amp;</operator> <literal type="number" pos:start="105:17" pos:end="105:17">1</literal></expr>)</condition> <block pos:start="105:20" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:69">





        <expr_stmt pos:start="111:9" pos:end="111:69"><expr pos:start="111:9" pos:end="111:68"><call pos:start="111:9" pos:end="111:68"><name pos:start="111:9" pos:end="111:15">permute</name><argument_list pos:start="111:16" pos:end="111:68">(<argument pos:start="111:17" pos:end="111:32"><expr pos:start="111:17" pos:end="111:32"><name pos:start="111:17" pos:end="111:32"><name pos:start="111:17" pos:end="111:19">ctx</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:32">qmat_chroma</name></name></expr></argument>, <argument pos:start="111:35" pos:end="111:62"><expr pos:start="111:35" pos:end="111:62"><name pos:start="111:35" pos:end="111:62"><name pos:start="111:35" pos:end="111:37">ctx</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:45">prodsp</name><operator pos:start="111:46" pos:end="111:46">.</operator><name pos:start="111:47" pos:end="111:62">idct_permutation</name></name></expr></argument>, <argument pos:start="111:65" pos:end="111:67"><expr pos:start="111:65" pos:end="111:67"><name pos:start="111:65" pos:end="111:67">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="120:20">else <block pos:start="113:12" pos:end="120:20">{<block_content pos:start="115:9" pos:end="120:20">

        <expr_stmt pos:start="115:9" pos:end="115:40"><expr pos:start="115:9" pos:end="115:39"><call pos:start="115:9" pos:end="115:39"><name pos:start="115:9" pos:end="115:14">memset</name><argument_list pos:start="115:15" pos:end="115:39">(<argument pos:start="115:16" pos:end="115:31"><expr pos:start="115:16" pos:end="115:31"><name pos:start="115:16" pos:end="115:31"><name pos:start="115:16" pos:end="115:18">ctx</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:31">qmat_chroma</name></name></expr></argument>, <argument pos:start="115:34" pos:end="115:34"><expr pos:start="115:34" pos:end="115:34"><literal type="number" pos:start="115:34" pos:end="115:34">4</literal></expr></argument>, <argument pos:start="115:37" pos:end="115:38"><expr pos:start="115:37" pos:end="115:38"><literal type="number" pos:start="115:37" pos:end="115:38">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <return pos:start="120:5" pos:end="120:20">return <expr pos:start="120:12" pos:end="120:19"><name pos:start="120:12" pos:end="120:19">hdr_size</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
