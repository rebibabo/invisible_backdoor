<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16113.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:10">cl_program</name></type> <name pos:start="1:12" pos:end="1:28">av_opencl_compile</name><parameter_list pos:start="1:29" pos:end="1:78">(<parameter pos:start="1:30" pos:end="1:53"><decl pos:start="1:30" pos:end="1:53"><type pos:start="1:30" pos:end="1:53"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:53">program_name</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:77"><decl pos:start="1:56" pos:end="1:77"><type pos:start="1:56" pos:end="1:77"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:65">char</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:77">build_opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:19">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">cl_int</name></type> <name pos:start="7:12" pos:end="7:17">status</name></decl>, <decl pos:start="7:20" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:20" pos:end="7:31">build_status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:23">kernel_code_idx</name> <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:29">kernel_source</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:26">kernel_code_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:8">char</name><modifier pos:start="15:9" pos:end="15:9">*</modifier></type> <name pos:start="15:11" pos:end="15:13">ptr</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">cl_program</name></type> <name pos:start="17:16" pos:end="17:22">program</name> <init pos:start="17:24" pos:end="17:29">= <expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:19">log_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:13">log</name> <init pos:start="21:15" pos:end="21:20">= <expr pos:start="21:17" pos:end="21:20"><name pos:start="21:17" pos:end="21:20">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:15">LOCK_OPENCL</name></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="45:5">for <control pos:start="27:9" pos:end="27:54">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:49"><expr pos:start="27:17" pos:end="27:48"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:48"><name pos:start="27:21" pos:end="27:30">opencl_ctx</name><operator pos:start="27:31" pos:end="27:31">.</operator><name pos:start="27:32" pos:end="27:48">kernel_code_count</name></name></expr>;</condition> <incr pos:start="27:51" pos:end="27:53"><expr pos:start="27:51" pos:end="27:53"><name pos:start="27:51" pos:end="27:51">i</name><operator pos:start="27:52" pos:end="27:53">++</operator></expr></incr>)</control> <block pos:start="27:56" pos:end="45:5">{<block_content pos:start="31:9" pos:end="43:9">

        <comment type="line" pos:start="29:9" pos:end="29:74">// identify a program using a unique name within the kernel source</comment>

        <expr_stmt pos:start="31:9" pos:end="31:80"><expr pos:start="31:9" pos:end="31:79"><name pos:start="31:9" pos:end="31:11">ptr</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:79"><name pos:start="31:15" pos:end="31:24">av_stristr</name><argument_list pos:start="31:25" pos:end="31:79">(<argument pos:start="31:26" pos:end="31:64"><expr pos:start="31:26" pos:end="31:64"><name pos:start="31:26" pos:end="31:50"><name pos:start="31:26" pos:end="31:35">opencl_ctx</name><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:47">kernel_code</name><index pos:start="31:48" pos:end="31:50">[<expr pos:start="31:49" pos:end="31:49"><name pos:start="31:49" pos:end="31:49">i</name></expr>]</index></name><operator pos:start="31:51" pos:end="31:51">.</operator><name pos:start="31:52" pos:end="31:64">kernel_string</name></expr></argument>, <argument pos:start="31:67" pos:end="31:78"><expr pos:start="31:67" pos:end="31:78"><name pos:start="31:67" pos:end="31:78">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="43:9"><if pos:start="33:9" pos:end="43:9">if <condition pos:start="33:12" pos:end="33:58">(<expr pos:start="33:13" pos:end="33:57"><name pos:start="33:13" pos:end="33:15">ptr</name> <operator pos:start="33:17" pos:end="33:18">&amp;&amp;</operator> <operator pos:start="33:20" pos:end="33:20">!</operator><name pos:start="33:21" pos:end="33:45"><name pos:start="33:21" pos:end="33:30">opencl_ctx</name><operator pos:start="33:31" pos:end="33:31">.</operator><name pos:start="33:32" pos:end="33:42">kernel_code</name><index pos:start="33:43" pos:end="33:45">[<expr pos:start="33:44" pos:end="33:44"><name pos:start="33:44" pos:end="33:44">i</name></expr>]</index></name><operator pos:start="33:46" pos:end="33:46">.</operator><name pos:start="33:47" pos:end="33:57">is_compiled</name></expr>)</condition> <block pos:start="33:60" pos:end="43:9">{<block_content pos:start="35:13" pos:end="41:18">

            <expr_stmt pos:start="35:13" pos:end="35:68"><expr pos:start="35:13" pos:end="35:67"><name pos:start="35:13" pos:end="35:25">kernel_source</name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:53"><name pos:start="35:29" pos:end="35:38">opencl_ctx</name><operator pos:start="35:39" pos:end="35:39">.</operator><name pos:start="35:40" pos:end="35:50">kernel_code</name><index pos:start="35:51" pos:end="35:53">[<expr pos:start="35:52" pos:end="35:52"><name pos:start="35:52" pos:end="35:52">i</name></expr>]</index></name><operator pos:start="35:54" pos:end="35:54">.</operator><name pos:start="35:55" pos:end="35:67">kernel_string</name></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:78"><expr pos:start="37:13" pos:end="37:77"><name pos:start="37:13" pos:end="37:27">kernel_code_len</name> <operator pos:start="37:29" pos:end="37:29">=</operator> <call pos:start="37:31" pos:end="37:77"><name pos:start="37:31" pos:end="37:36">strlen</name><argument_list pos:start="37:37" pos:end="37:77">(<argument pos:start="37:38" pos:end="37:76"><expr pos:start="37:38" pos:end="37:76"><name pos:start="37:38" pos:end="37:62"><name pos:start="37:38" pos:end="37:47">opencl_ctx</name><operator pos:start="37:48" pos:end="37:48">.</operator><name pos:start="37:49" pos:end="37:59">kernel_code</name><index pos:start="37:60" pos:end="37:62">[<expr pos:start="37:61" pos:end="37:61"><name pos:start="37:61" pos:end="37:61">i</name></expr>]</index></name><operator pos:start="37:63" pos:end="37:63">.</operator><name pos:start="37:64" pos:end="37:76">kernel_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:32"><expr pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:27">kernel_code_idx</name> <operator pos:start="39:29" pos:end="39:29">=</operator> <name pos:start="39:31" pos:end="39:31">i</name></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:23">(<expr pos:start="47:9" pos:end="47:22"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:22">kernel_source</name></expr>)</condition> <block pos:start="47:25" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:17">

        <expr_stmt pos:start="49:9" pos:end="51:75"><expr pos:start="49:9" pos:end="51:74"><call pos:start="49:9" pos:end="51:74"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="51:74">(<argument pos:start="49:16" pos:end="49:26"><expr pos:start="49:16" pos:end="49:26"><operator pos:start="49:16" pos:end="49:16">&amp;</operator><name pos:start="49:17" pos:end="49:26">opencl_ctx</name></expr></argument>, <argument pos:start="49:29" pos:end="49:40"><expr pos:start="49:29" pos:end="49:40"><name pos:start="49:29" pos:end="49:40">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="51:16" pos:end="51:59"><expr pos:start="51:16" pos:end="51:59"><literal type="string" pos:start="51:16" pos:end="51:59">"Unable to find OpenCL kernel source '%s'\n"</literal></expr></argument>, <argument pos:start="51:62" pos:end="51:73"><expr pos:start="51:62" pos:end="51:73"><name pos:start="51:62" pos:end="51:73">program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:17">goto <name pos:start="53:14" pos:end="53:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:48">/* create a CL program from kernel source */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:106"><expr pos:start="61:5" pos:end="61:105"><name pos:start="61:5" pos:end="61:11">program</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:105"><name pos:start="61:15" pos:end="61:39">clCreateProgramWithSource</name><argument_list pos:start="61:40" pos:end="61:105">(<argument pos:start="61:41" pos:end="61:58"><expr pos:start="61:41" pos:end="61:58"><name pos:start="61:41" pos:end="61:58"><name pos:start="61:41" pos:end="61:50">opencl_ctx</name><operator pos:start="61:51" pos:end="61:51">.</operator><name pos:start="61:52" pos:end="61:58">context</name></name></expr></argument>, <argument pos:start="61:61" pos:end="61:61"><expr pos:start="61:61" pos:end="61:61"><literal type="number" pos:start="61:61" pos:end="61:61">1</literal></expr></argument>, <argument pos:start="61:64" pos:end="61:77"><expr pos:start="61:64" pos:end="61:77"><operator pos:start="61:64" pos:end="61:64">&amp;</operator><name pos:start="61:65" pos:end="61:77">kernel_source</name></expr></argument>, <argument pos:start="61:80" pos:end="61:95"><expr pos:start="61:80" pos:end="61:95"><operator pos:start="61:80" pos:end="61:80">&amp;</operator><name pos:start="61:81" pos:end="61:95">kernel_code_len</name></expr></argument>, <argument pos:start="61:98" pos:end="61:104"><expr pos:start="61:98" pos:end="61:104"><operator pos:start="61:98" pos:end="61:98">&amp;</operator><name pos:start="61:99" pos:end="61:104">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if<condition pos:start="63:7" pos:end="63:28">(<expr pos:start="63:8" pos:end="63:27"><name pos:start="63:8" pos:end="63:13">status</name> <operator pos:start="63:15" pos:end="63:16">!=</operator> <name pos:start="63:18" pos:end="63:27">CL_SUCCESS</name></expr>)</condition> <block pos:start="63:30" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:17">

        <expr_stmt pos:start="65:9" pos:end="67:101"><expr pos:start="65:9" pos:end="67:100"><call pos:start="65:9" pos:end="67:100"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="67:100">(<argument pos:start="65:16" pos:end="65:26"><expr pos:start="65:16" pos:end="65:26"><operator pos:start="65:16" pos:end="65:16">&amp;</operator><name pos:start="65:17" pos:end="65:26">opencl_ctx</name></expr></argument>, <argument pos:start="65:29" pos:end="65:40"><expr pos:start="65:29" pos:end="65:40"><name pos:start="65:29" pos:end="65:40">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="67:16" pos:end="67:59"><expr pos:start="67:16" pos:end="67:59"><literal type="string" pos:start="67:16" pos:end="67:59">"Unable to create OpenCL program '%s': %s\n"</literal></expr></argument>, <argument pos:start="67:62" pos:end="67:73"><expr pos:start="67:62" pos:end="67:73"><name pos:start="67:62" pos:end="67:73">program_name</name></expr></argument>, <argument pos:start="67:76" pos:end="67:99"><expr pos:start="67:76" pos:end="67:99"><call pos:start="67:76" pos:end="67:99"><name pos:start="67:76" pos:end="67:91">av_opencl_errstr</name><argument_list pos:start="67:92" pos:end="67:99">(<argument pos:start="67:93" pos:end="67:98"><expr pos:start="67:93" pos:end="67:98"><name pos:start="67:93" pos:end="67:98">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:15">program</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:22">NULL</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:17">goto <name pos:start="71:14" pos:end="71:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:95"><expr pos:start="77:5" pos:end="77:94"><name pos:start="77:5" pos:end="77:16">build_status</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:94"><name pos:start="77:20" pos:end="77:33">clBuildProgram</name><argument_list pos:start="77:34" pos:end="77:94">(<argument pos:start="77:35" pos:end="77:41"><expr pos:start="77:35" pos:end="77:41"><name pos:start="77:35" pos:end="77:41">program</name></expr></argument>, <argument pos:start="77:44" pos:end="77:44"><expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">1</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:69"><expr pos:start="77:47" pos:end="77:69"><operator pos:start="77:47" pos:end="77:47">&amp;</operator><operator pos:start="77:48" pos:end="77:48">(</operator><name pos:start="77:49" pos:end="77:68"><name pos:start="77:49" pos:end="77:58">opencl_ctx</name><operator pos:start="77:59" pos:end="77:59">.</operator><name pos:start="77:60" pos:end="77:68">device_id</name></name><operator pos:start="77:69" pos:end="77:69">)</operator></expr></argument>, <argument pos:start="77:72" pos:end="77:81"><expr pos:start="77:72" pos:end="77:81"><name pos:start="77:72" pos:end="77:81">build_opts</name></expr></argument>, <argument pos:start="77:84" pos:end="77:87"><expr pos:start="77:84" pos:end="77:87"><name pos:start="77:84" pos:end="77:87">NULL</name></expr></argument>, <argument pos:start="77:90" pos:end="77:93"><expr pos:start="77:90" pos:end="77:93"><name pos:start="77:90" pos:end="77:93">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="81:77"><expr pos:start="79:5" pos:end="81:76"><name pos:start="79:5" pos:end="79:10">status</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="81:76"><name pos:start="79:14" pos:end="79:34">clGetProgramBuildInfo</name><argument_list pos:start="79:35" pos:end="81:76">(<argument pos:start="79:36" pos:end="79:42"><expr pos:start="79:36" pos:end="79:42"><name pos:start="79:36" pos:end="79:42">program</name></expr></argument>, <argument pos:start="79:45" pos:end="79:64"><expr pos:start="79:45" pos:end="79:64"><name pos:start="79:45" pos:end="79:64"><name pos:start="79:45" pos:end="79:54">opencl_ctx</name><operator pos:start="79:55" pos:end="79:55">.</operator><name pos:start="79:56" pos:end="79:64">device_id</name></name></expr></argument>,

                                   <argument pos:start="81:36" pos:end="81:55"><expr pos:start="81:36" pos:end="81:55"><name pos:start="81:36" pos:end="81:55">CL_PROGRAM_BUILD_LOG</name></expr></argument>, <argument pos:start="81:58" pos:end="81:58"><expr pos:start="81:58" pos:end="81:58"><literal type="number" pos:start="81:58" pos:end="81:58">0</literal></expr></argument>, <argument pos:start="81:61" pos:end="81:64"><expr pos:start="81:61" pos:end="81:64"><name pos:start="81:61" pos:end="81:64">NULL</name></expr></argument>, <argument pos:start="81:67" pos:end="81:75"><expr pos:start="81:67" pos:end="81:75"><operator pos:start="81:67" pos:end="81:67">&amp;</operator><name pos:start="81:68" pos:end="81:75">log_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="125:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:29">(<expr pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:14">status</name> <operator pos:start="83:16" pos:end="83:17">!=</operator> <name pos:start="83:19" pos:end="83:28">CL_SUCCESS</name></expr>)</condition> <block pos:start="83:31" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:41">

        <expr_stmt pos:start="85:9" pos:end="89:41"><expr pos:start="85:9" pos:end="89:40"><call pos:start="85:9" pos:end="89:40"><name pos:start="85:9" pos:end="85:14">av_log</name><argument_list pos:start="85:15" pos:end="89:40">(<argument pos:start="85:16" pos:end="85:26"><expr pos:start="85:16" pos:end="85:26"><operator pos:start="85:16" pos:end="85:16">&amp;</operator><name pos:start="85:17" pos:end="85:26">opencl_ctx</name></expr></argument>, <argument pos:start="85:29" pos:end="85:42"><expr pos:start="85:29" pos:end="85:42"><name pos:start="85:29" pos:end="85:42">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="87:16" pos:end="87:52"><expr pos:start="87:16" pos:end="87:52"><literal type="string" pos:start="87:16" pos:end="87:52">"Failed to get compilation log: %s\n"</literal></expr></argument>,

               <argument pos:start="89:16" pos:end="89:39"><expr pos:start="89:16" pos:end="89:39"><call pos:start="89:16" pos:end="89:39"><name pos:start="89:16" pos:end="89:31">av_opencl_errstr</name><argument_list pos:start="89:32" pos:end="89:39">(<argument pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><name pos:start="89:33" pos:end="89:38">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="125:5">else <block pos:start="91:12" pos:end="125:5">{<block_content pos:start="93:9" pos:end="123:23">

        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:11">log</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:33"><name pos:start="93:15" pos:end="93:23">av_malloc</name><argument_list pos:start="93:24" pos:end="93:33">(<argument pos:start="93:25" pos:end="93:32"><expr pos:start="93:25" pos:end="93:32"><name pos:start="93:25" pos:end="93:32">log_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="121:9"><if pos:start="95:9" pos:end="121:9">if <condition pos:start="95:12" pos:end="95:16">(<expr pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">log</name></expr>)</condition> <block pos:start="95:18" pos:end="121:9">{<block_content pos:start="97:13" pos:end="119:13">

            <expr_stmt pos:start="97:13" pos:end="101:54"><expr pos:start="97:13" pos:end="101:53"><name pos:start="97:13" pos:end="97:18">status</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="101:53"><name pos:start="97:22" pos:end="97:42">clGetProgramBuildInfo</name><argument_list pos:start="97:43" pos:end="101:53">(<argument pos:start="97:44" pos:end="97:50"><expr pos:start="97:44" pos:end="97:50"><name pos:start="97:44" pos:end="97:50">program</name></expr></argument>, <argument pos:start="97:53" pos:end="97:72"><expr pos:start="97:53" pos:end="97:72"><name pos:start="97:53" pos:end="97:72"><name pos:start="97:53" pos:end="97:62">opencl_ctx</name><operator pos:start="97:63" pos:end="97:63">.</operator><name pos:start="97:64" pos:end="97:72">device_id</name></name></expr></argument>,

                                           <argument pos:start="99:44" pos:end="99:63"><expr pos:start="99:44" pos:end="99:63"><name pos:start="99:44" pos:end="99:63">CL_PROGRAM_BUILD_LOG</name></expr></argument>, <argument pos:start="99:66" pos:end="99:73"><expr pos:start="99:66" pos:end="99:73"><name pos:start="99:66" pos:end="99:73">log_size</name></expr></argument>,

                                           <argument pos:start="101:44" pos:end="101:46"><expr pos:start="101:44" pos:end="101:46"><name pos:start="101:44" pos:end="101:46">log</name></expr></argument>, <argument pos:start="101:49" pos:end="101:52"><expr pos:start="101:49" pos:end="101:52"><name pos:start="101:49" pos:end="101:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="119:13"><if pos:start="103:13" pos:end="111:13">if <condition pos:start="103:16" pos:end="103:37">(<expr pos:start="103:17" pos:end="103:36"><name pos:start="103:17" pos:end="103:22">status</name> <operator pos:start="103:24" pos:end="103:25">!=</operator> <name pos:start="103:27" pos:end="103:36">CL_SUCCESS</name></expr>)</condition> <block pos:start="103:39" pos:end="111:13">{<block_content pos:start="105:17" pos:end="109:49">

                <expr_stmt pos:start="105:17" pos:end="109:49"><expr pos:start="105:17" pos:end="109:48"><call pos:start="105:17" pos:end="109:48"><name pos:start="105:17" pos:end="105:22">av_log</name><argument_list pos:start="105:23" pos:end="109:48">(<argument pos:start="105:24" pos:end="105:34"><expr pos:start="105:24" pos:end="105:34"><operator pos:start="105:24" pos:end="105:24">&amp;</operator><name pos:start="105:25" pos:end="105:34">opencl_ctx</name></expr></argument>, <argument pos:start="105:37" pos:end="105:50"><expr pos:start="105:37" pos:end="105:50"><name pos:start="105:37" pos:end="105:50">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="107:24" pos:end="107:60"><expr pos:start="107:24" pos:end="107:60"><literal type="string" pos:start="107:24" pos:end="107:60">"Failed to get compilation log: %s\n"</literal></expr></argument>,

                       <argument pos:start="109:24" pos:end="109:47"><expr pos:start="109:24" pos:end="109:47"><call pos:start="109:24" pos:end="109:47"><name pos:start="109:24" pos:end="109:39">av_opencl_errstr</name><argument_list pos:start="109:40" pos:end="109:47">(<argument pos:start="109:41" pos:end="109:46"><expr pos:start="109:41" pos:end="109:46"><name pos:start="109:41" pos:end="109:46">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="111:15" pos:end="119:13">else <block pos:start="111:20" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:74">

                <decl_stmt pos:start="113:17" pos:end="115:70"><decl pos:start="113:17" pos:end="115:69"><type pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">int</name></type> <name pos:start="113:21" pos:end="113:25">level</name> <init pos:start="113:27" pos:end="115:69">= <expr pos:start="113:29" pos:end="115:69"><ternary pos:start="113:29" pos:end="115:69"><condition pos:start="113:29" pos:end="113:56"><expr pos:start="113:29" pos:end="113:54"><name pos:start="113:29" pos:end="113:40">build_status</name> <operator pos:start="113:42" pos:end="113:43">==</operator> <name pos:start="113:45" pos:end="113:54">CL_SUCCESS</name></expr> ?</condition><then pos:start="113:58" pos:end="113:69"> <expr pos:start="113:58" pos:end="113:69"><name pos:start="113:58" pos:end="113:69">AV_LOG_DEBUG</name></expr> </then><else pos:start="113:71" pos:end="115:69">:

                                                         <expr pos:start="115:58" pos:end="115:69"><name pos:start="115:58" pos:end="115:69">AV_LOG_ERROR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:74"><expr pos:start="117:17" pos:end="117:73"><call pos:start="117:17" pos:end="117:73"><name pos:start="117:17" pos:end="117:22">av_log</name><argument_list pos:start="117:23" pos:end="117:73">(<argument pos:start="117:24" pos:end="117:34"><expr pos:start="117:24" pos:end="117:34"><operator pos:start="117:24" pos:end="117:24">&amp;</operator><name pos:start="117:25" pos:end="117:34">opencl_ctx</name></expr></argument>, <argument pos:start="117:37" pos:end="117:41"><expr pos:start="117:37" pos:end="117:41"><name pos:start="117:37" pos:end="117:41">level</name></expr></argument>, <argument pos:start="117:44" pos:end="117:67"><expr pos:start="117:44" pos:end="117:67"><literal type="string" pos:start="117:44" pos:end="117:67">"Compilation log:\n%s\n"</literal></expr></argument>, <argument pos:start="117:70" pos:end="117:72"><expr pos:start="117:70" pos:end="117:72"><name pos:start="117:70" pos:end="117:72">log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:23"><expr pos:start="123:9" pos:end="123:22"><call pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:16">av_freep</name><argument_list pos:start="123:17" pos:end="123:22">(<argument pos:start="123:18" pos:end="123:21"><expr pos:start="123:18" pos:end="123:21"><operator pos:start="123:18" pos:end="123:18">&amp;</operator><name pos:start="123:19" pos:end="123:21">log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="127:5" pos:end="139:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:35">(<expr pos:start="127:9" pos:end="127:34"><name pos:start="127:9" pos:end="127:20">build_status</name> <operator pos:start="127:22" pos:end="127:23">!=</operator> <name pos:start="127:25" pos:end="127:34">CL_SUCCESS</name></expr>)</condition> <block pos:start="127:37" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:17">

        <expr_stmt pos:start="129:9" pos:end="133:61"><expr pos:start="129:9" pos:end="133:60"><call pos:start="129:9" pos:end="133:60"><name pos:start="129:9" pos:end="129:14">av_log</name><argument_list pos:start="129:15" pos:end="133:60">(<argument pos:start="129:16" pos:end="129:26"><expr pos:start="129:16" pos:end="129:26"><operator pos:start="129:16" pos:end="129:16">&amp;</operator><name pos:start="129:17" pos:end="129:26">opencl_ctx</name></expr></argument>, <argument pos:start="129:29" pos:end="129:40"><expr pos:start="129:29" pos:end="129:40"><name pos:start="129:29" pos:end="129:40">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="131:16" pos:end="131:66"><expr pos:start="131:16" pos:end="131:66"><literal type="string" pos:start="131:16" pos:end="131:66">"Compilation failed with OpenCL program '%s': %s\n"</literal></expr></argument>,

               <argument pos:start="133:16" pos:end="133:27"><expr pos:start="133:16" pos:end="133:27"><name pos:start="133:16" pos:end="133:27">program_name</name></expr></argument>, <argument pos:start="133:30" pos:end="133:59"><expr pos:start="133:30" pos:end="133:59"><call pos:start="133:30" pos:end="133:59"><name pos:start="133:30" pos:end="133:45">av_opencl_errstr</name><argument_list pos:start="133:46" pos:end="133:59">(<argument pos:start="133:47" pos:end="133:58"><expr pos:start="133:47" pos:end="133:58"><name pos:start="133:47" pos:end="133:58">build_status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:23"><expr pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:15">program</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <name pos:start="135:19" pos:end="135:22">NULL</name></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:17">goto <name pos:start="137:14" pos:end="137:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:60"><expr pos:start="143:5" pos:end="143:59"><name pos:start="143:5" pos:end="143:43"><name pos:start="143:5" pos:end="143:14">opencl_ctx</name><operator pos:start="143:15" pos:end="143:15">.</operator><name pos:start="143:16" pos:end="143:26">kernel_code</name><index pos:start="143:27" pos:end="143:43">[<expr pos:start="143:28" pos:end="143:42"><name pos:start="143:28" pos:end="143:42">kernel_code_idx</name></expr>]</index></name><operator pos:start="143:44" pos:end="143:44">.</operator><name pos:start="143:45" pos:end="143:55">is_compiled</name> <operator pos:start="143:57" pos:end="143:57">=</operator> <literal type="number" pos:start="143:59" pos:end="143:59">1</literal></expr>;</expr_stmt>

<label pos:start="145:1" pos:end="145:4"><name pos:start="145:1" pos:end="145:3">end</name>:</label>

    <expr_stmt pos:start="147:5" pos:end="147:18"><expr pos:start="147:5" pos:end="147:17"><name pos:start="147:5" pos:end="147:17">UNLOCK_OPENCL</name></expr>;</expr_stmt>

    <return pos:start="149:5" pos:end="149:19">return <expr pos:start="149:12" pos:end="149:18"><name pos:start="149:12" pos:end="149:18">program</name></expr>;</return>

</block_content>}</block></function>
</unit>
