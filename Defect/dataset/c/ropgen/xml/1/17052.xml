<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17052.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">cpu_restore_state</name><parameter_list pos:start="1:22" pos:end="5:32">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">TranslationBlock</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">tb</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:30">CPUState</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:35">env</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:62"><decl pos:start="3:38" pos:end="3:62"><type pos:start="3:38" pos:end="3:62"><name pos:start="3:38" pos:end="3:45">unsigned</name> <name pos:start="3:47" pos:end="3:50">long</name></type> <name pos:start="3:52" pos:end="3:62">searched_pc</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:31"><decl pos:start="5:23" pos:end="5:31"><type pos:start="5:23" pos:end="5:31"><name pos:start="5:23" pos:end="5:26">void</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:31">puc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="279:1">{<block_content pos:start="9:5" pos:end="277:13">

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">TCGContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:28">= <expr pos:start="9:21" pos:end="9:28"><operator pos:start="9:21" pos:end="9:21">&amp;</operator><name pos:start="9:22" pos:end="9:28">tcg_ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:24">tc_ptr</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:22">CONFIG_PROFILER</name></cpp:ifdef>

    <decl_stmt pos:start="17:5" pos:end="24:0"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:14">ti</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="23:1" pos:end="23:22">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:6">ti</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:25">profile_getclock</name><argument_list pos:start="25:26" pos:end="25:27">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><call pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:18">tcg_func_start</name><argument_list pos:start="29:19" pos:end="29:21">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><name pos:start="29:20" pos:end="29:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="35:18"><if pos:start="33:5" pos:end="35:18">if <condition pos:start="33:8" pos:end="33:46">(<expr pos:start="33:9" pos:end="33:45"><call pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:32">gen_intermediate_code_pc</name><argument_list pos:start="33:33" pos:end="33:41">(<argument pos:start="33:34" pos:end="33:36"><expr pos:start="33:34" pos:end="33:36"><name pos:start="33:34" pos:end="33:36">env</name></expr></argument>, <argument pos:start="33:39" pos:end="33:40"><expr pos:start="33:39" pos:end="33:40"><name pos:start="33:39" pos:end="33:40">tb</name></expr></argument>)</argument_list></call> <operator pos:start="33:43" pos:end="33:43">&lt;</operator> <literal type="number" pos:start="33:45" pos:end="33:45">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:18"><block_content pos:start="35:9" pos:end="35:18">

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:51">/* find opc index corresponding to search_pc */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:39"><expr pos:start="41:5" pos:end="41:38"><name pos:start="41:5" pos:end="41:10">tc_ptr</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:22">unsigned</name> <name pos:start="41:24" pos:end="41:27">long</name><operator pos:start="41:28" pos:end="41:28">)</operator><name pos:start="41:29" pos:end="41:38"><name pos:start="41:29" pos:end="41:30">tb</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:38">tc_ptr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:18"><if pos:start="43:5" pos:end="45:18">if <condition pos:start="43:8" pos:end="43:29">(<expr pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:19">searched_pc</name> <operator pos:start="43:21" pos:end="43:21">&lt;</operator> <name pos:start="43:23" pos:end="43:28">tc_ptr</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:18"><block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:21">tb_next_offset</name></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:42"><name pos:start="49:25" pos:end="49:26">tb</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:42">tb_next_offset</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="51:1" pos:end="51:22">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:22">USE_DIRECT_JUMP</name></cpp:ifdef>

    <expr_stmt pos:start="53:5" pos:end="53:41"><expr pos:start="53:5" pos:end="53:40"><name pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:20">tb_jmp_offset</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:40"><name pos:start="53:24" pos:end="53:25">tb</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:40">tb_jmp_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="58:0"><expr pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:14"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:14">tb_next</name></name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:21">NULL</name></expr>;</expr_stmt>

<cpp:else pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:20">tb_jmp_offset</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:27">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:14">tb_next</name></name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:28"><name pos:start="61:18" pos:end="61:19">tb</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:28">tb_next</name></name></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="65:5" pos:end="67:51"><expr pos:start="65:5" pos:end="67:50"><name pos:start="65:5" pos:end="65:5">j</name> <operator pos:start="65:7" pos:end="65:7">=</operator> <call pos:start="65:9" pos:end="67:50"><name pos:start="65:9" pos:end="65:29">dyngen_code_search_pc</name><argument_list pos:start="65:30" pos:end="67:50">(<argument pos:start="65:31" pos:end="65:31"><expr pos:start="65:31" pos:end="65:31"><name pos:start="65:31" pos:end="65:31">s</name></expr></argument>, <argument pos:start="65:34" pos:end="65:50"><expr pos:start="65:34" pos:end="65:50"><operator pos:start="65:34" pos:end="65:34">(</operator><name pos:start="65:35" pos:end="65:41">uint8_t</name> <operator pos:start="65:43" pos:end="65:43">*</operator><operator pos:start="65:44" pos:end="65:44">)</operator><name pos:start="65:45" pos:end="65:50">tc_ptr</name></expr></argument>, 

                              <argument pos:start="67:31" pos:end="67:49"><expr pos:start="67:31" pos:end="67:49"><operator pos:start="67:31" pos:end="67:31">(</operator><name pos:start="67:32" pos:end="67:35">void</name> <operator pos:start="67:37" pos:end="67:37">*</operator><operator pos:start="67:38" pos:end="67:38">)</operator><name pos:start="67:39" pos:end="67:49">searched_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <if_stmt pos:start="69:5" pos:end="71:18"><if pos:start="69:5" pos:end="71:18">if <condition pos:start="69:8" pos:end="69:14">(<expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:9">j</name> <operator pos:start="69:11" pos:end="69:11">&lt;</operator> <literal type="number" pos:start="69:13" pos:end="69:13">0</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:18"><block_content pos:start="71:9" pos:end="71:18">

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:46">/* now find start of instruction before */</comment>

    <while pos:start="75:5" pos:end="80:0">while <condition pos:start="75:11" pos:end="75:39">(<expr pos:start="75:12" pos:end="75:38"><name pos:start="75:12" pos:end="75:33"><name pos:start="75:12" pos:end="75:30">gen_opc_instr_start</name><index pos:start="75:31" pos:end="75:33">[<expr pos:start="75:32" pos:end="75:32"><name pos:start="75:32" pos:end="75:32">j</name></expr>]</index></name> <operator pos:start="75:35" pos:end="75:36">==</operator> <literal type="number" pos:start="75:38" pos:end="75:38">0</literal></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="80:0"><block_content pos:start="77:9" pos:end="80:0">

        <expr_stmt pos:start="77:9" pos:end="80:0"><expr pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:9">j</name><operator pos:start="77:10" pos:end="77:11">--</operator></expr>;</expr_stmt></block_content></block></while>

<cpp:if pos:start="79:1" pos:end="79:24">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:24"><call pos:start="79:5" pos:end="79:24"><name pos:start="79:5" pos:end="79:11">defined</name><argument_list pos:start="79:12" pos:end="79:24">(<argument pos:start="79:13" pos:end="79:23"><expr pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <block pos:start="81:5" pos:end="124:0">{<block_content pos:start="83:9" pos:end="119:31">

        <decl_stmt pos:start="83:9" pos:end="86:0"><decl pos:start="83:9" pos:end="83:17"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:17">cc_op</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="85:1" pos:end="85:18">#<cpp:directive pos:start="85:2" pos:end="85:6">ifdef</cpp:directive> <name pos:start="85:8" pos:end="85:18">DEBUG_DISAS</name></cpp:ifdef>

        <if_stmt pos:start="87:9" pos:end="112:0"><if pos:start="87:9" pos:end="112:0">if <condition pos:start="87:12" pos:end="87:37">(<expr pos:start="87:13" pos:end="87:36"><name pos:start="87:13" pos:end="87:20">loglevel</name> <operator pos:start="87:22" pos:end="87:22">&amp;</operator> <name pos:start="87:24" pos:end="87:36">CPU_LOG_TB_OP</name></expr>)</condition> <block pos:start="87:39" pos:end="112:0">{<block_content pos:start="89:13" pos:end="107:43">

            <decl_stmt pos:start="89:13" pos:end="89:18"><decl pos:start="89:13" pos:end="89:17"><type pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">int</name></type> <name pos:start="89:17" pos:end="89:17">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:43"><expr pos:start="91:13" pos:end="91:42"><call pos:start="91:13" pos:end="91:42"><name pos:start="91:13" pos:end="91:19">fprintf</name><argument_list pos:start="91:20" pos:end="91:42">(<argument pos:start="91:21" pos:end="91:27"><expr pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:27">logfile</name></expr></argument>, <argument pos:start="91:30" pos:end="91:41"><expr pos:start="91:30" pos:end="91:41"><literal type="string" pos:start="91:30" pos:end="91:41">"RESTORE:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="93:13" pos:end="101:13">for<control pos:start="93:16" pos:end="93:30">(<init pos:start="93:17" pos:end="93:20"><expr pos:start="93:17" pos:end="93:19"><name pos:start="93:17" pos:end="93:17">i</name><operator pos:start="93:18" pos:end="93:18">=</operator><literal type="number" pos:start="93:19" pos:end="93:19">0</literal></expr>;</init><condition pos:start="93:21" pos:end="93:25"><expr pos:start="93:21" pos:end="93:24"><name pos:start="93:21" pos:end="93:21">i</name><operator pos:start="93:22" pos:end="93:23">&lt;=</operator><name pos:start="93:24" pos:end="93:24">j</name></expr>;</condition> <incr pos:start="93:27" pos:end="93:29"><expr pos:start="93:27" pos:end="93:29"><name pos:start="93:27" pos:end="93:27">i</name><operator pos:start="93:28" pos:end="93:29">++</operator></expr></incr>)</control> <block pos:start="93:32" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:17">

                <if_stmt pos:start="95:17" pos:end="99:17"><if pos:start="95:17" pos:end="99:17">if <condition pos:start="95:20" pos:end="95:43">(<expr pos:start="95:21" pos:end="95:42"><name pos:start="95:21" pos:end="95:42"><name pos:start="95:21" pos:end="95:39">gen_opc_instr_start</name><index pos:start="95:40" pos:end="95:42">[<expr pos:start="95:41" pos:end="95:41"><name pos:start="95:41" pos:end="95:41">i</name></expr>]</index></name></expr>)</condition> <block pos:start="95:45" pos:end="99:17">{<block_content pos:start="97:21" pos:end="97:86">

                    <expr_stmt pos:start="97:21" pos:end="97:86"><expr pos:start="97:21" pos:end="97:85"><call pos:start="97:21" pos:end="97:85"><name pos:start="97:21" pos:end="97:27">fprintf</name><argument_list pos:start="97:28" pos:end="97:85">(<argument pos:start="97:29" pos:end="97:35"><expr pos:start="97:29" pos:end="97:35"><name pos:start="97:29" pos:end="97:35">logfile</name></expr></argument>, <argument pos:start="97:38" pos:end="97:66"><expr pos:start="97:38" pos:end="97:66"><literal type="string" pos:start="97:38" pos:end="97:47">"0x%04x: "</literal> <name pos:start="97:49" pos:end="97:61">TARGET_FMT_lx</name> <literal type="string" pos:start="97:63" pos:end="97:66">"\n"</literal></expr></argument>, <argument pos:start="97:69" pos:end="97:69"><expr pos:start="97:69" pos:end="97:69"><name pos:start="97:69" pos:end="97:69">i</name></expr></argument>, <argument pos:start="97:72" pos:end="97:84"><expr pos:start="97:72" pos:end="97:84"><name pos:start="97:72" pos:end="97:84"><name pos:start="97:72" pos:end="97:81">gen_opc_pc</name><index pos:start="97:82" pos:end="97:84">[<expr pos:start="97:83" pos:end="97:83"><name pos:start="97:83" pos:end="97:83">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="103:13" pos:end="107:43"><expr pos:start="103:13" pos:end="107:42"><call pos:start="103:13" pos:end="107:42"><name pos:start="103:13" pos:end="103:19">fprintf</name><argument_list pos:start="103:20" pos:end="107:42">(<argument pos:start="103:21" pos:end="103:27"><expr pos:start="103:21" pos:end="103:27"><name pos:start="103:21" pos:end="103:27">logfile</name></expr></argument>, <argument pos:start="103:30" pos:end="103:84"><expr pos:start="103:30" pos:end="103:84"><literal type="string" pos:start="103:30" pos:end="103:54">"spc=0x%08lx j=0x%x eip="</literal> <name pos:start="103:56" pos:end="103:68">TARGET_FMT_lx</name> <literal type="string" pos:start="103:70" pos:end="103:84">" cs_base=%x\n"</literal></expr></argument>,

                    <argument pos:start="105:21" pos:end="105:31"><expr pos:start="105:21" pos:end="105:31"><name pos:start="105:21" pos:end="105:31">searched_pc</name></expr></argument>, <argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><name pos:start="105:34" pos:end="105:34">j</name></expr></argument>, <argument pos:start="105:37" pos:end="105:63"><expr pos:start="105:37" pos:end="105:63"><name pos:start="105:37" pos:end="105:49"><name pos:start="105:37" pos:end="105:46">gen_opc_pc</name><index pos:start="105:47" pos:end="105:49">[<expr pos:start="105:48" pos:end="105:48"><name pos:start="105:48" pos:end="105:48">j</name></expr>]</index></name> <operator pos:start="105:51" pos:end="105:51">-</operator> <name pos:start="105:53" pos:end="105:63"><name pos:start="105:53" pos:end="105:54">tb</name><operator pos:start="105:55" pos:end="105:56">-&gt;</operator><name pos:start="105:57" pos:end="105:63">cs_base</name></name></expr></argument>,

                    <argument pos:start="107:21" pos:end="107:41"><expr pos:start="107:21" pos:end="107:41"><operator pos:start="107:21" pos:end="107:21">(</operator><name pos:start="107:22" pos:end="107:29">uint32_t</name><operator pos:start="107:30" pos:end="107:30">)</operator><name pos:start="107:31" pos:end="107:41"><name pos:start="107:31" pos:end="107:32">tb</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:41">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="113:9" pos:end="113:47"><expr pos:start="113:9" pos:end="113:46"><name pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:11">env</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:16">eip</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:32"><name pos:start="113:20" pos:end="113:29">gen_opc_pc</name><index pos:start="113:30" pos:end="113:32">[<expr pos:start="113:31" pos:end="113:31"><name pos:start="113:31" pos:end="113:31">j</name></expr>]</index></name> <operator pos:start="113:34" pos:end="113:34">-</operator> <name pos:start="113:36" pos:end="113:46"><name pos:start="113:36" pos:end="113:37">tb</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:46">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:33"><expr pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:13">cc_op</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:32"><name pos:start="115:17" pos:end="115:29">gen_opc_cc_op</name><index pos:start="115:30" pos:end="115:32">[<expr pos:start="115:31" pos:end="115:31"><name pos:start="115:31" pos:end="115:31">j</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="119:31"><if pos:start="117:9" pos:end="119:31">if <condition pos:start="117:12" pos:end="117:35">(<expr pos:start="117:13" pos:end="117:34"><name pos:start="117:13" pos:end="117:17">cc_op</name> <operator pos:start="117:19" pos:end="117:20">!=</operator> <name pos:start="117:22" pos:end="117:34">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:31"><block_content pos:start="119:13" pos:end="119:31">

            <expr_stmt pos:start="119:13" pos:end="119:31"><expr pos:start="119:13" pos:end="119:30"><name pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:15">env</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:22">cc_op</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <name pos:start="119:26" pos:end="119:30">cc_op</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block>

<cpp:elif pos:start="123:1" pos:end="123:25">#<cpp:directive pos:start="123:2" pos:end="123:5">elif</cpp:directive> <expr pos:start="123:7" pos:end="123:25"><call pos:start="123:7" pos:end="123:25"><name pos:start="123:7" pos:end="123:13">defined</name><argument_list pos:start="123:14" pos:end="123:25">(<argument pos:start="123:15" pos:end="123:24"><expr pos:start="123:15" pos:end="123:24"><name pos:start="123:15" pos:end="123:24">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="125:5" pos:end="128:0"><expr pos:start="125:5" pos:end="125:33"><name pos:start="125:5" pos:end="125:17"><name pos:start="125:5" pos:end="125:7">env</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:13">regs</name><index pos:start="125:14" pos:end="125:17">[<expr pos:start="125:15" pos:end="125:16"><literal type="number" pos:start="125:15" pos:end="125:16">15</literal></expr>]</index></name> <operator pos:start="125:19" pos:end="125:19">=</operator> <name pos:start="125:21" pos:end="125:33"><name pos:start="125:21" pos:end="125:30">gen_opc_pc</name><index pos:start="125:31" pos:end="125:33">[<expr pos:start="125:32" pos:end="125:32"><name pos:start="125:32" pos:end="125:32">j</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif pos:start="127:1" pos:end="127:27">#<cpp:directive pos:start="127:2" pos:end="127:5">elif</cpp:directive> <expr pos:start="127:7" pos:end="127:27"><call pos:start="127:7" pos:end="127:27"><name pos:start="127:7" pos:end="127:13">defined</name><argument_list pos:start="127:14" pos:end="127:27">(<argument pos:start="127:15" pos:end="127:26"><expr pos:start="127:15" pos:end="127:26"><name pos:start="127:15" pos:end="127:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <block pos:start="129:5" pos:end="164:0">{<block_content pos:start="131:9" pos:end="159:9">

        <decl_stmt pos:start="131:9" pos:end="131:25"><decl pos:start="131:9" pos:end="131:24"><type pos:start="131:9" pos:end="131:20"><name pos:start="131:9" pos:end="131:20">target_ulong</name></type> <name pos:start="131:22" pos:end="131:24">npc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:32"><expr pos:start="133:9" pos:end="133:31"><name pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:11">env</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:15">pc</name></name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:31"><name pos:start="133:19" pos:end="133:28">gen_opc_pc</name><index pos:start="133:29" pos:end="133:31">[<expr pos:start="133:30" pos:end="133:30"><name pos:start="133:30" pos:end="133:30">j</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:29"><expr pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:11">npc</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <name pos:start="135:15" pos:end="135:28"><name pos:start="135:15" pos:end="135:25">gen_opc_npc</name><index pos:start="135:26" pos:end="135:28">[<expr pos:start="135:27" pos:end="135:27"><name pos:start="135:27" pos:end="135:27">j</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="159:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:21">(<expr pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:15">npc</name> <operator pos:start="137:17" pos:end="137:18">==</operator> <literal type="number" pos:start="137:20" pos:end="137:20">1</literal></expr>)</condition> <block pos:start="137:23" pos:end="141:9">{<block_content>

            <comment type="block" pos:start="139:13" pos:end="139:45">/* dynamic NPC: already stored */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="155:9">else if <condition pos:start="141:19" pos:end="141:28">(<expr pos:start="141:20" pos:end="141:27"><name pos:start="141:20" pos:end="141:22">npc</name> <operator pos:start="141:24" pos:end="141:25">==</operator> <literal type="number" pos:start="141:27" pos:end="141:27">2</literal></expr>)</condition> <block pos:start="141:30" pos:end="155:9">{<block_content pos:start="143:13" pos:end="153:46">

            <decl_stmt pos:start="143:13" pos:end="143:63"><decl pos:start="143:13" pos:end="143:62"><type pos:start="143:13" pos:end="143:24"><name pos:start="143:13" pos:end="143:24">target_ulong</name></type> <name pos:start="143:26" pos:end="143:27">t2</name> <init pos:start="143:29" pos:end="143:62">= <expr pos:start="143:31" pos:end="143:62"><operator pos:start="143:31" pos:end="143:31">(</operator><name pos:start="143:32" pos:end="143:43">target_ulong</name><operator pos:start="143:44" pos:end="143:44">)</operator><operator pos:start="143:45" pos:end="143:45">(</operator><name pos:start="143:46" pos:end="143:53">unsigned</name> <name pos:start="143:55" pos:end="143:58">long</name><operator pos:start="143:59" pos:end="143:59">)</operator><name pos:start="143:60" pos:end="143:62">puc</name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="145:13" pos:end="145:73">/* jump PC: use T2 and the jump targets of the translation */</comment>

            <if_stmt pos:start="147:13" pos:end="153:46"><if pos:start="147:13" pos:end="149:46">if <condition pos:start="147:16" pos:end="147:19">(<expr pos:start="147:17" pos:end="147:18"><name pos:start="147:17" pos:end="147:18">t2</name></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:46"><block_content pos:start="149:17" pos:end="149:46">

                <expr_stmt pos:start="149:17" pos:end="149:46"><expr pos:start="149:17" pos:end="149:45"><name pos:start="149:17" pos:end="149:24"><name pos:start="149:17" pos:end="149:19">env</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:24">npc</name></name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:45"><name pos:start="149:28" pos:end="149:42">gen_opc_jump_pc</name><index pos:start="149:43" pos:end="149:45">[<expr pos:start="149:44" pos:end="149:44"><literal type="number" pos:start="149:44" pos:end="149:44">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="151:13" pos:end="153:46">else<block type="pseudo" pos:start="153:17" pos:end="153:46"><block_content pos:start="153:17" pos:end="153:46">

                <expr_stmt pos:start="153:17" pos:end="153:46"><expr pos:start="153:17" pos:end="153:45"><name pos:start="153:17" pos:end="153:24"><name pos:start="153:17" pos:end="153:19">env</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:24">npc</name></name> <operator pos:start="153:26" pos:end="153:26">=</operator> <name pos:start="153:28" pos:end="153:45"><name pos:start="153:28" pos:end="153:42">gen_opc_jump_pc</name><index pos:start="153:43" pos:end="153:45">[<expr pos:start="153:44" pos:end="153:44"><literal type="number" pos:start="153:44" pos:end="153:44">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="155:11" pos:end="159:9">else <block pos:start="155:16" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:27">

            <expr_stmt pos:start="157:13" pos:end="157:27"><expr pos:start="157:13" pos:end="157:26"><name pos:start="157:13" pos:end="157:20"><name pos:start="157:13" pos:end="157:15">env</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:20">npc</name></name> <operator pos:start="157:22" pos:end="157:22">=</operator> <name pos:start="157:24" pos:end="157:26">npc</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>

<cpp:elif pos:start="163:1" pos:end="163:25">#<cpp:directive pos:start="163:2" pos:end="163:5">elif</cpp:directive> <expr pos:start="163:7" pos:end="163:25"><call pos:start="163:7" pos:end="163:25"><name pos:start="163:7" pos:end="163:13">defined</name><argument_list pos:start="163:14" pos:end="163:25">(<argument pos:start="163:15" pos:end="163:24"><expr pos:start="163:15" pos:end="163:24"><name pos:start="163:15" pos:end="163:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <block pos:start="165:5" pos:end="244:0">{<block_content pos:start="167:9" pos:end="239:32">

        <decl_stmt pos:start="167:9" pos:end="167:20"><decl pos:start="167:9" pos:end="167:16"><type pos:start="167:9" pos:end="167:11"><name pos:start="167:9" pos:end="167:11">int</name></type> <name pos:start="167:13" pos:end="167:16">type</name></decl>, <decl pos:start="167:19" pos:end="167:19"><type ref="prev" pos:start="167:9" pos:end="167:11"/><name pos:start="167:19" pos:end="167:19">c</name></decl>;</decl_stmt>

        <comment type="block" pos:start="169:9" pos:end="171:25">/* for PPC, we need to look at the micro operation to get the

           access type */</comment>

        <expr_stmt pos:start="173:9" pos:end="173:33"><expr pos:start="173:9" pos:end="173:32"><name pos:start="173:9" pos:end="173:16"><name pos:start="173:9" pos:end="173:11">env</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:16">nip</name></name> <operator pos:start="173:18" pos:end="173:18">=</operator> <name pos:start="173:20" pos:end="173:32"><name pos:start="173:20" pos:end="173:29">gen_opc_pc</name><index pos:start="173:30" pos:end="173:32">[<expr pos:start="173:31" pos:end="173:31"><name pos:start="173:31" pos:end="173:31">j</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:27"><expr pos:start="175:9" pos:end="175:26"><name pos:start="175:9" pos:end="175:9">c</name> <operator pos:start="175:11" pos:end="175:11">=</operator> <name pos:start="175:13" pos:end="175:26"><name pos:start="175:13" pos:end="175:23">gen_opc_buf</name><index pos:start="175:24" pos:end="175:26">[<expr pos:start="175:25" pos:end="175:25"><name pos:start="175:25" pos:end="175:25">j</name></expr>]</index></name></expr>;</expr_stmt>

        <switch pos:start="177:9" pos:end="237:9">switch<condition pos:start="177:15" pos:end="177:17">(<expr pos:start="177:16" pos:end="177:16"><name pos:start="177:16" pos:end="177:16">c</name></expr>)</condition> <block pos:start="177:19" pos:end="237:9">{<block_content pos:start="199:9" pos:end="235:18">

<cpp:if pos:start="179:1" pos:end="179:29">#<cpp:directive pos:start="179:2" pos:end="179:3">if</cpp:directive> <expr pos:start="179:5" pos:end="179:29"><call pos:start="179:5" pos:end="179:29"><name pos:start="179:5" pos:end="179:11">defined</name><argument_list pos:start="179:12" pos:end="179:29">(<argument pos:start="179:13" pos:end="179:28"><expr pos:start="179:13" pos:end="179:28"><name pos:start="179:13" pos:end="179:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define pos:start="181:1" pos:end="183:36">#<cpp:directive pos:start="181:2" pos:end="181:7">define</cpp:directive> <cpp:macro pos:start="181:9" pos:end="181:17"><name pos:start="181:9" pos:end="181:13">CASE3</name><parameter_list pos:start="181:14" pos:end="181:17">(<parameter pos:start="181:15" pos:end="181:16"><type pos:start="181:15" pos:end="181:16"><name pos:start="181:15" pos:end="181:16">op</name></type></parameter>)</parameter_list></cpp:macro>\

        <cpp:value pos:start="183:9" pos:end="183:36">case INDEX_op_ ## op ## _raw</cpp:value></cpp:define>

<cpp:else pos:start="185:1" pos:end="185:5">#<cpp:directive pos:start="185:2" pos:end="185:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="187:1" pos:end="193:37">#<cpp:directive pos:start="187:2" pos:end="187:7">define</cpp:directive> <cpp:macro pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:13">CASE3</name><parameter_list pos:start="187:14" pos:end="187:17">(<parameter pos:start="187:15" pos:end="187:16"><type pos:start="187:15" pos:end="187:16"><name pos:start="187:15" pos:end="187:16">op</name></type></parameter>)</parameter_list></cpp:macro>\

        <cpp:value pos:start="189:9" pos:end="193:37">case INDEX_op_ ## op ## _user:\

        case INDEX_op_ ## op ## _kernel:\

        case INDEX_op_ ## op ## _hypv</cpp:value></cpp:define>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="199:9" pos:end="207:32"><expr pos:start="199:9" pos:end="207:31"><call pos:start="199:9" pos:end="199:19"><name pos:start="199:9" pos:end="199:13">CASE3</name><argument_list pos:start="199:14" pos:end="199:19">(<argument pos:start="199:15" pos:end="199:18"><expr pos:start="199:15" pos:end="199:18"><name pos:start="199:15" pos:end="199:18">stfd</name></expr></argument>)</argument_list></call><operator pos:start="199:20" pos:end="199:20">:</operator>

        <call pos:start="201:9" pos:end="201:19"><name pos:start="201:9" pos:end="201:13">CASE3</name><argument_list pos:start="201:14" pos:end="201:19">(<argument pos:start="201:15" pos:end="201:18"><expr pos:start="201:15" pos:end="201:18"><name pos:start="201:15" pos:end="201:18">stfs</name></expr></argument>)</argument_list></call><operator pos:start="201:20" pos:end="201:20">:</operator>

        <call pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:13">CASE3</name><argument_list pos:start="203:14" pos:end="203:18">(<argument pos:start="203:15" pos:end="203:17"><expr pos:start="203:15" pos:end="203:17"><name pos:start="203:15" pos:end="203:17">lfd</name></expr></argument>)</argument_list></call><operator pos:start="203:19" pos:end="203:19">:</operator>

        <call pos:start="205:9" pos:end="205:18"><name pos:start="205:9" pos:end="205:13">CASE3</name><argument_list pos:start="205:14" pos:end="205:18">(<argument pos:start="205:15" pos:end="205:17"><expr pos:start="205:15" pos:end="205:17"><name pos:start="205:15" pos:end="205:17">lfs</name></expr></argument>)</argument_list></call><operator pos:start="205:19" pos:end="205:19">:</operator>

            <name pos:start="207:13" pos:end="207:16">type</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:31">ACCESS_FLOAT</name></expr>;</expr_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        <expr_stmt pos:start="211:9" pos:end="213:30"><expr pos:start="211:9" pos:end="213:29"><call pos:start="211:9" pos:end="211:20"><name pos:start="211:9" pos:end="211:13">CASE3</name><argument_list pos:start="211:14" pos:end="211:20">(<argument pos:start="211:15" pos:end="211:19"><expr pos:start="211:15" pos:end="211:19"><name pos:start="211:15" pos:end="211:19">lwarx</name></expr></argument>)</argument_list></call><operator pos:start="211:21" pos:end="211:21">:</operator>

            <name pos:start="213:13" pos:end="213:16">type</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <name pos:start="213:20" pos:end="213:29">ACCESS_RES</name></expr>;</expr_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <expr_stmt pos:start="217:9" pos:end="219:30"><expr pos:start="217:9" pos:end="219:29"><call pos:start="217:9" pos:end="217:20"><name pos:start="217:9" pos:end="217:13">CASE3</name><argument_list pos:start="217:14" pos:end="217:20">(<argument pos:start="217:15" pos:end="217:19"><expr pos:start="217:15" pos:end="217:19"><name pos:start="217:15" pos:end="217:19">stwcx</name></expr></argument>)</argument_list></call><operator pos:start="217:21" pos:end="217:21">:</operator>

            <name pos:start="219:13" pos:end="219:16">type</name> <operator pos:start="219:18" pos:end="219:18">=</operator> <name pos:start="219:20" pos:end="219:29">ACCESS_RES</name></expr>;</expr_stmt>

            <break pos:start="221:13" pos:end="221:18">break;</break>

        <expr_stmt pos:start="223:9" pos:end="227:30"><expr pos:start="223:9" pos:end="227:29"><call pos:start="223:9" pos:end="223:20"><name pos:start="223:9" pos:end="223:13">CASE3</name><argument_list pos:start="223:14" pos:end="223:20">(<argument pos:start="223:15" pos:end="223:19"><expr pos:start="223:15" pos:end="223:19"><name pos:start="223:15" pos:end="223:19">eciwx</name></expr></argument>)</argument_list></call><operator pos:start="223:21" pos:end="223:21">:</operator>

        <call pos:start="225:9" pos:end="225:20"><name pos:start="225:9" pos:end="225:13">CASE3</name><argument_list pos:start="225:14" pos:end="225:20">(<argument pos:start="225:15" pos:end="225:19"><expr pos:start="225:15" pos:end="225:19"><name pos:start="225:15" pos:end="225:19">ecowx</name></expr></argument>)</argument_list></call><operator pos:start="225:21" pos:end="225:21">:</operator>

            <name pos:start="227:13" pos:end="227:16">type</name> <operator pos:start="227:18" pos:end="227:18">=</operator> <name pos:start="227:20" pos:end="227:29">ACCESS_EXT</name></expr>;</expr_stmt>

            <break pos:start="229:13" pos:end="229:18">break;</break>

        <default pos:start="231:9" pos:end="231:16">default:</default>

            <expr_stmt pos:start="233:13" pos:end="233:30"><expr pos:start="233:13" pos:end="233:29"><name pos:start="233:13" pos:end="233:16">type</name> <operator pos:start="233:18" pos:end="233:18">=</operator> <name pos:start="233:20" pos:end="233:29">ACCESS_INT</name></expr>;</expr_stmt>

            <break pos:start="235:13" pos:end="235:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="239:9" pos:end="239:32"><expr pos:start="239:9" pos:end="239:31"><name pos:start="239:9" pos:end="239:24"><name pos:start="239:9" pos:end="239:11">env</name><operator pos:start="239:12" pos:end="239:13">-&gt;</operator><name pos:start="239:14" pos:end="239:24">access_type</name></name> <operator pos:start="239:26" pos:end="239:26">=</operator> <name pos:start="239:28" pos:end="239:31">type</name></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:elif pos:start="243:1" pos:end="243:26">#<cpp:directive pos:start="243:2" pos:end="243:5">elif</cpp:directive> <expr pos:start="243:7" pos:end="243:26"><call pos:start="243:7" pos:end="243:26"><name pos:start="243:7" pos:end="243:13">defined</name><argument_list pos:start="243:14" pos:end="243:26">(<argument pos:start="243:15" pos:end="243:25"><expr pos:start="243:15" pos:end="243:25"><name pos:start="243:15" pos:end="243:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="245:5" pos:end="248:0"><expr pos:start="245:5" pos:end="245:27"><name pos:start="245:5" pos:end="245:11"><name pos:start="245:5" pos:end="245:7">env</name><operator pos:start="245:8" pos:end="245:9">-&gt;</operator><name pos:start="245:10" pos:end="245:11">pc</name></name> <operator pos:start="245:13" pos:end="245:13">=</operator> <name pos:start="245:15" pos:end="245:27"><name pos:start="245:15" pos:end="245:24">gen_opc_pc</name><index pos:start="245:25" pos:end="245:27">[<expr pos:start="245:26" pos:end="245:26"><name pos:start="245:26" pos:end="245:26">j</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif pos:start="247:1" pos:end="247:26">#<cpp:directive pos:start="247:2" pos:end="247:5">elif</cpp:directive> <expr pos:start="247:7" pos:end="247:26"><call pos:start="247:7" pos:end="247:26"><name pos:start="247:7" pos:end="247:13">defined</name><argument_list pos:start="247:14" pos:end="247:26">(<argument pos:start="247:15" pos:end="247:25"><expr pos:start="247:15" pos:end="247:25"><name pos:start="247:15" pos:end="247:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="249:5" pos:end="249:45"><expr pos:start="249:5" pos:end="249:44"><name pos:start="249:5" pos:end="249:28"><name pos:start="249:5" pos:end="249:7">env</name><operator pos:start="249:8" pos:end="249:9">-&gt;</operator><name pos:start="249:10" pos:end="249:11">PC</name><index pos:start="249:12" pos:end="249:28">[<expr pos:start="249:13" pos:end="249:27"><name pos:start="249:13" pos:end="249:27"><name pos:start="249:13" pos:end="249:15">env</name><operator pos:start="249:16" pos:end="249:17">-&gt;</operator><name pos:start="249:18" pos:end="249:27">current_tc</name></name></expr>]</index></name> <operator pos:start="249:30" pos:end="249:30">=</operator> <name pos:start="249:32" pos:end="249:44"><name pos:start="249:32" pos:end="249:41">gen_opc_pc</name><index pos:start="249:42" pos:end="249:44">[<expr pos:start="249:43" pos:end="249:43"><name pos:start="249:43" pos:end="249:43">j</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:37"><expr pos:start="251:5" pos:end="251:36"><name pos:start="251:5" pos:end="251:15"><name pos:start="251:5" pos:end="251:7">env</name><operator pos:start="251:8" pos:end="251:9">-&gt;</operator><name pos:start="251:10" pos:end="251:15">hflags</name></name> <operator pos:start="251:17" pos:end="251:18">&amp;=</operator> <operator pos:start="251:20" pos:end="251:20">~</operator><name pos:start="251:21" pos:end="251:36">MIPS_HFLAG_BMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="256:0"><expr pos:start="253:5" pos:end="253:36"><name pos:start="253:5" pos:end="253:15"><name pos:start="253:5" pos:end="253:7">env</name><operator pos:start="253:8" pos:end="253:9">-&gt;</operator><name pos:start="253:10" pos:end="253:15">hflags</name></name> <operator pos:start="253:17" pos:end="253:18">|=</operator> <name pos:start="253:20" pos:end="253:36"><name pos:start="253:20" pos:end="253:33">gen_opc_hflags</name><index pos:start="253:34" pos:end="253:36">[<expr pos:start="253:35" pos:end="253:35"><name pos:start="253:35" pos:end="253:35">j</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif pos:start="255:1" pos:end="255:27">#<cpp:directive pos:start="255:2" pos:end="255:5">elif</cpp:directive> <expr pos:start="255:7" pos:end="255:27"><call pos:start="255:7" pos:end="255:27"><name pos:start="255:7" pos:end="255:13">defined</name><argument_list pos:start="255:14" pos:end="255:27">(<argument pos:start="255:15" pos:end="255:26"><expr pos:start="255:15" pos:end="255:26"><name pos:start="255:15" pos:end="255:26">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="257:5" pos:end="260:0"><expr pos:start="257:5" pos:end="257:27"><name pos:start="257:5" pos:end="257:11"><name pos:start="257:5" pos:end="257:7">env</name><operator pos:start="257:8" pos:end="257:9">-&gt;</operator><name pos:start="257:10" pos:end="257:11">pc</name></name> <operator pos:start="257:13" pos:end="257:13">=</operator> <name pos:start="257:15" pos:end="257:27"><name pos:start="257:15" pos:end="257:24">gen_opc_pc</name><index pos:start="257:25" pos:end="257:27">[<expr pos:start="257:26" pos:end="257:26"><name pos:start="257:26" pos:end="257:26">j</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif pos:start="259:1" pos:end="259:25">#<cpp:directive pos:start="259:2" pos:end="259:5">elif</cpp:directive> <expr pos:start="259:7" pos:end="259:25"><call pos:start="259:7" pos:end="259:25"><name pos:start="259:7" pos:end="259:13">defined</name><argument_list pos:start="259:14" pos:end="259:25">(<argument pos:start="259:15" pos:end="259:24"><expr pos:start="259:15" pos:end="259:24"><name pos:start="259:15" pos:end="259:24">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="261:5" pos:end="261:28"><expr pos:start="261:5" pos:end="261:27"><name pos:start="261:5" pos:end="261:11"><name pos:start="261:5" pos:end="261:7">env</name><operator pos:start="261:8" pos:end="261:9">-&gt;</operator><name pos:start="261:10" pos:end="261:11">pc</name></name> <operator pos:start="261:13" pos:end="261:13">=</operator> <name pos:start="261:15" pos:end="261:27"><name pos:start="261:15" pos:end="261:24">gen_opc_pc</name><index pos:start="261:25" pos:end="261:27">[<expr pos:start="261:26" pos:end="261:26"><name pos:start="261:26" pos:end="261:26">j</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="270:0"><expr pos:start="263:5" pos:end="263:34"><name pos:start="263:5" pos:end="263:14"><name pos:start="263:5" pos:end="263:7">env</name><operator pos:start="263:8" pos:end="263:9">-&gt;</operator><name pos:start="263:10" pos:end="263:14">flags</name></name> <operator pos:start="263:16" pos:end="263:16">=</operator> <name pos:start="263:18" pos:end="263:34"><name pos:start="263:18" pos:end="263:31">gen_opc_hflags</name><index pos:start="263:32" pos:end="263:34">[<expr pos:start="263:33" pos:end="263:33"><name pos:start="263:33" pos:end="263:33">j</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="265:1" pos:end="265:6">#<cpp:directive pos:start="265:2" pos:end="265:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="269:1" pos:end="269:22">#<cpp:directive pos:start="269:2" pos:end="269:6">ifdef</cpp:directive> <name pos:start="269:8" pos:end="269:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="271:5" pos:end="271:51"><expr pos:start="271:5" pos:end="271:50"><name pos:start="271:5" pos:end="271:23">dyngen_restore_time</name> <operator pos:start="271:25" pos:end="271:26">+=</operator> <call pos:start="271:28" pos:end="271:45"><name pos:start="271:28" pos:end="271:43">profile_getclock</name><argument_list pos:start="271:44" pos:end="271:45">()</argument_list></call> <operator pos:start="271:47" pos:end="271:47">-</operator> <name pos:start="271:49" pos:end="271:50">ti</name></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="276:0"><expr pos:start="273:5" pos:end="273:26"><name pos:start="273:5" pos:end="273:24">dyngen_restore_count</name><operator pos:start="273:25" pos:end="273:26">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="275:1" pos:end="275:6">#<cpp:directive pos:start="275:2" pos:end="275:6">endif</cpp:directive></cpp:endif>

    <return pos:start="277:5" pos:end="277:13">return <expr pos:start="277:12" pos:end="277:12"><literal type="number" pos:start="277:12" pos:end="277:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
