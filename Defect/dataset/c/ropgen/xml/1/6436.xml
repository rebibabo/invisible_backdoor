<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6436.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:41"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">qmp_migrate</name><parameter_list pos:start="1:17" pos:end="3:30">(<parameter pos:start="1:18" pos:end="1:32"><decl pos:start="1:18" pos:end="1:32"><type pos:start="1:18" pos:end="1:32"><specifier pos:start="1:18" pos:end="1:22">const</specifier> <name pos:start="1:24" pos:end="1:27">char</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">uri</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">bool</name></type> <name pos:start="1:40" pos:end="1:46">has_blk</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:52">bool</name></type> <name pos:start="1:54" pos:end="1:56">blk</name></decl></parameter>,
                 <parameter pos:start="2:18" pos:end="2:29"><decl pos:start="2:18" pos:end="2:29"><type pos:start="2:18" pos:end="2:29"><name pos:start="2:18" pos:end="2:21">bool</name></type> <name pos:start="2:23" pos:end="2:29">has_inc</name></decl></parameter>, <parameter pos:start="2:32" pos:end="2:39"><decl pos:start="2:32" pos:end="2:39"><type pos:start="2:32" pos:end="2:39"><name pos:start="2:32" pos:end="2:35">bool</name></type> <name pos:start="2:37" pos:end="2:39">inc</name></decl></parameter>, <parameter pos:start="2:42" pos:end="2:56"><decl pos:start="2:42" pos:end="2:56"><type pos:start="2:42" pos:end="2:56"><name pos:start="2:42" pos:end="2:45">bool</name></type> <name pos:start="2:47" pos:end="2:56">has_detach</name></decl></parameter>, <parameter pos:start="2:59" pos:end="2:69"><decl pos:start="2:59" pos:end="2:69"><type pos:start="2:59" pos:end="2:69"><name pos:start="2:59" pos:end="2:62">bool</name></type> <name pos:start="2:64" pos:end="2:69">detach</name></decl></parameter>,
                 <parameter pos:start="3:18" pos:end="3:29"><decl pos:start="3:18" pos:end="3:29"><type pos:start="3:18" pos:end="3:29"><name pos:start="3:18" pos:end="3:22">Error</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier><modifier pos:start="3:25" pos:end="3:25">*</modifier></type><name pos:start="3:26" pos:end="3:29">errp</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="37:41">{<block_content pos:start="5:5" pos:end="37:41">
    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:46"><decl pos:start="6:5" pos:end="6:45"><type pos:start="6:5" pos:end="6:20"><name pos:start="6:5" pos:end="6:18">MigrationState</name> <modifier pos:start="6:20" pos:end="6:20">*</modifier></type><name pos:start="6:21" pos:end="6:21">s</name> <init pos:start="6:23" pos:end="6:45">= <expr pos:start="6:25" pos:end="6:45"><call pos:start="6:25" pos:end="6:45"><name pos:start="6:25" pos:end="6:43">migrate_get_current</name><argument_list pos:start="6:44" pos:end="6:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19">MigrationParams</name></type> <name pos:start="7:21" pos:end="7:26">params</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:18"><decl pos:start="8:5" pos:end="8:17"><type pos:start="8:5" pos:end="8:16"><specifier pos:start="8:5" pos:end="8:9">const</specifier> <name pos:start="8:11" pos:end="8:14">char</name> <modifier pos:start="8:16" pos:end="8:16">*</modifier></type><name pos:start="8:17" pos:end="8:17">p</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:10">params</name><operator pos:start="9:11" pos:end="9:11">.</operator><name pos:start="9:12" pos:end="9:14">blk</name></name> <operator pos:start="9:16" pos:end="9:16">=</operator> <name pos:start="9:18" pos:end="9:24">has_blk</name> <operator pos:start="9:26" pos:end="9:27">&amp;&amp;</operator> <name pos:start="9:29" pos:end="9:31">blk</name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:35"><expr pos:start="10:5" pos:end="10:34"><name pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:10">params</name><operator pos:start="10:11" pos:end="10:11">.</operator><name pos:start="10:12" pos:end="10:17">shared</name></name> <operator pos:start="10:19" pos:end="10:19">=</operator> <name pos:start="10:21" pos:end="10:27">has_inc</name> <operator pos:start="10:29" pos:end="10:30">&amp;&amp;</operator> <name pos:start="10:32" pos:end="10:34">inc</name></expr>;</expr_stmt>
    <if_stmt pos:start="11:5" pos:end="37:41"><if pos:start="11:5" pos:end="37:41">if <condition pos:start="11:8" pos:end="12:41">(<expr pos:start="11:9" pos:end="12:40"><name pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:16">state</name></name> <operator pos:start="11:18" pos:end="11:19">==</operator> <name pos:start="11:21" pos:end="11:36">MIG_STATE_ACTIVE</name> <operator pos:start="11:38" pos:end="11:39">||</operator> <name pos:start="11:41" pos:end="11:48"><name pos:start="11:41" pos:end="11:41">s</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:48">state</name></name> <operator pos:start="11:50" pos:end="11:51">==</operator> <name pos:start="11:53" pos:end="11:67">MIG_STATE_SETUP</name> <operator pos:start="11:69" pos:end="11:70">||</operator>
        <name pos:start="12:9" pos:end="12:16"><name pos:start="12:9" pos:end="12:9">s</name><operator pos:start="12:10" pos:end="12:11">-&gt;</operator><name pos:start="12:12" pos:end="12:16">state</name></name> <operator pos:start="12:18" pos:end="12:19">==</operator> <name pos:start="12:21" pos:end="12:40">MIG_STATE_CANCELLING</name></expr>)</condition> <block pos:start="12:43" pos:end="37:41">{<block_content pos:start="13:9" pos:end="37:41">
        <expr_stmt pos:start="13:9" pos:end="13:47"><expr pos:start="13:9" pos:end="13:46"><call pos:start="13:9" pos:end="13:46"><name pos:start="13:9" pos:end="13:17">error_set</name><argument_list pos:start="13:18" pos:end="13:46">(<argument pos:start="13:19" pos:end="13:22"><expr pos:start="13:19" pos:end="13:22"><name pos:start="13:19" pos:end="13:22">errp</name></expr></argument>, <argument pos:start="13:25" pos:end="13:45"><expr pos:start="13:25" pos:end="13:45"><name pos:start="13:25" pos:end="13:45">QERR_MIGRATION_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="37:41"><if pos:start="14:5" pos:end="37:41">if <condition pos:start="14:8" pos:end="14:40">(<expr pos:start="14:9" pos:end="14:39"><call pos:start="14:9" pos:end="14:39"><name pos:start="14:9" pos:end="14:33">qemu_savevm_state_blocked</name><argument_list pos:start="14:34" pos:end="14:39">(<argument pos:start="14:35" pos:end="14:38"><expr pos:start="14:35" pos:end="14:38"><name pos:start="14:35" pos:end="14:38">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="14:42" pos:end="37:41">{<block_content pos:start="15:5" pos:end="37:41">
    <if_stmt pos:start="15:5" pos:end="37:41"><if pos:start="15:5" pos:end="37:41">if <condition pos:start="15:8" pos:end="15:27">(<expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:26">migration_blockers</name></expr>)</condition> <block pos:start="15:29" pos:end="37:41">{<block_content pos:start="16:9" pos:end="37:41">
        <expr_stmt pos:start="16:9" pos:end="16:53"><expr pos:start="16:9" pos:end="16:52"><operator pos:start="16:9" pos:end="16:9">*</operator><name pos:start="16:10" pos:end="16:13">errp</name> <operator pos:start="16:15" pos:end="16:15">=</operator> <call pos:start="16:17" pos:end="16:52"><name pos:start="16:17" pos:end="16:26">error_copy</name><argument_list pos:start="16:27" pos:end="16:52">(<argument pos:start="16:28" pos:end="16:51"><expr pos:start="16:28" pos:end="16:51"><name pos:start="16:28" pos:end="16:51"><name pos:start="16:28" pos:end="16:45">migration_blockers</name><operator pos:start="16:46" pos:end="16:47">-&gt;</operator><name pos:start="16:48" pos:end="16:51">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:5">s</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:20">migrate_init</name><argument_list pos:start="17:21" pos:end="17:29">(<argument pos:start="17:22" pos:end="17:28"><expr pos:start="17:22" pos:end="17:28"><operator pos:start="17:22" pos:end="17:22">&amp;</operator><name pos:start="17:23" pos:end="17:28">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="37:41"><if pos:start="18:5" pos:end="21:5">if <condition pos:start="18:8" pos:end="18:34">(<expr pos:start="18:9" pos:end="18:33"><call pos:start="18:9" pos:end="18:33"><name pos:start="18:9" pos:end="18:16">strstart</name><argument_list pos:start="18:17" pos:end="18:33">(<argument pos:start="18:18" pos:end="18:20"><expr pos:start="18:18" pos:end="18:20"><name pos:start="18:18" pos:end="18:20">uri</name></expr></argument>, <argument pos:start="18:23" pos:end="18:28"><expr pos:start="18:23" pos:end="18:28"><literal type="string" pos:start="18:23" pos:end="18:28">"tcp:"</literal></expr></argument>, <argument pos:start="18:31" pos:end="18:32"><expr pos:start="18:31" pos:end="18:32"><operator pos:start="18:31" pos:end="18:31">&amp;</operator><name pos:start="18:32" pos:end="18:32">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="18:36" pos:end="21:5">{<block_content pos:start="19:9" pos:end="21:0">
        <expr_stmt pos:start="19:9" pos:end="21:0"><expr pos:start="19:9" pos:end="19:54"><call pos:start="19:9" pos:end="19:54"><name pos:start="19:9" pos:end="19:36">tcp_start_outgoing_migration</name><argument_list pos:start="19:37" pos:end="19:54">(<argument pos:start="19:38" pos:end="19:38"><expr pos:start="19:38" pos:end="19:38"><name pos:start="19:38" pos:end="19:38">s</name></expr></argument>, <argument pos:start="19:41" pos:end="19:41"><expr pos:start="19:41" pos:end="19:41"><name pos:start="19:41" pos:end="19:41">p</name></expr></argument>, <argument pos:start="19:44" pos:end="19:53"><expr pos:start="19:44" pos:end="19:53"><operator pos:start="19:44" pos:end="19:44">&amp;</operator><name pos:start="19:45" pos:end="19:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="20:1" pos:end="20:18">#<cpp:directive pos:start="20:2" pos:end="20:6">ifdef</cpp:directive> <name pos:start="20:8" pos:end="20:18">CONFIG_RDMA</name></cpp:ifdef>
    </block_content>}</block></if> <if type="elseif" pos:start="21:7" pos:end="25:5">else if <condition pos:start="21:15" pos:end="21:42">(<expr pos:start="21:16" pos:end="21:41"><call pos:start="21:16" pos:end="21:41"><name pos:start="21:16" pos:end="21:23">strstart</name><argument_list pos:start="21:24" pos:end="21:41">(<argument pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:27">uri</name></expr></argument>, <argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><literal type="string" pos:start="21:30" pos:end="21:36">"rdma:"</literal></expr></argument>, <argument pos:start="21:39" pos:end="21:40"><expr pos:start="21:39" pos:end="21:40"><operator pos:start="21:39" pos:end="21:39">&amp;</operator><name pos:start="21:40" pos:end="21:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:44" pos:end="25:5">{<block_content pos:start="22:9" pos:end="25:0">
        <expr_stmt pos:start="22:9" pos:end="25:0"><expr pos:start="22:9" pos:end="22:55"><call pos:start="22:9" pos:end="22:55"><name pos:start="22:9" pos:end="22:37">rdma_start_outgoing_migration</name><argument_list pos:start="22:38" pos:end="22:55">(<argument pos:start="22:39" pos:end="22:39"><expr pos:start="22:39" pos:end="22:39"><name pos:start="22:39" pos:end="22:39">s</name></expr></argument>, <argument pos:start="22:42" pos:end="22:42"><expr pos:start="22:42" pos:end="22:42"><name pos:start="22:42" pos:end="22:42">p</name></expr></argument>, <argument pos:start="22:45" pos:end="22:54"><expr pos:start="22:45" pos:end="22:54"><operator pos:start="22:45" pos:end="22:45">&amp;</operator><name pos:start="22:46" pos:end="22:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>
<cpp:if pos:start="24:1" pos:end="24:19">#<cpp:directive pos:start="24:2" pos:end="24:3">if</cpp:directive> <expr pos:start="24:5" pos:end="24:19"><operator pos:start="24:5" pos:end="24:5">!</operator><call pos:start="24:6" pos:end="24:19"><name pos:start="24:6" pos:end="24:12">defined</name><argument_list pos:start="24:13" pos:end="24:19">(<argument pos:start="24:14" pos:end="24:18"><expr pos:start="24:14" pos:end="24:18"><name pos:start="24:14" pos:end="24:18">WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="27:5">else if <condition pos:start="25:15" pos:end="25:42">(<expr pos:start="25:16" pos:end="25:41"><call pos:start="25:16" pos:end="25:41"><name pos:start="25:16" pos:end="25:23">strstart</name><argument_list pos:start="25:24" pos:end="25:41">(<argument pos:start="25:25" pos:end="25:27"><expr pos:start="25:25" pos:end="25:27"><name pos:start="25:25" pos:end="25:27">uri</name></expr></argument>, <argument pos:start="25:30" pos:end="25:36"><expr pos:start="25:30" pos:end="25:36"><literal type="string" pos:start="25:30" pos:end="25:36">"exec:"</literal></expr></argument>, <argument pos:start="25:39" pos:end="25:40"><expr pos:start="25:39" pos:end="25:40"><operator pos:start="25:39" pos:end="25:39">&amp;</operator><name pos:start="25:40" pos:end="25:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:44" pos:end="27:5">{<block_content pos:start="26:9" pos:end="26:56">
        <expr_stmt pos:start="26:9" pos:end="26:56"><expr pos:start="26:9" pos:end="26:55"><call pos:start="26:9" pos:end="26:55"><name pos:start="26:9" pos:end="26:37">exec_start_outgoing_migration</name><argument_list pos:start="26:38" pos:end="26:55">(<argument pos:start="26:39" pos:end="26:39"><expr pos:start="26:39" pos:end="26:39"><name pos:start="26:39" pos:end="26:39">s</name></expr></argument>, <argument pos:start="26:42" pos:end="26:42"><expr pos:start="26:42" pos:end="26:42"><name pos:start="26:42" pos:end="26:42">p</name></expr></argument>, <argument pos:start="26:45" pos:end="26:54"><expr pos:start="26:45" pos:end="26:54"><operator pos:start="26:45" pos:end="26:45">&amp;</operator><name pos:start="26:46" pos:end="26:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="27:7" pos:end="29:5">else if <condition pos:start="27:15" pos:end="27:42">(<expr pos:start="27:16" pos:end="27:41"><call pos:start="27:16" pos:end="27:41"><name pos:start="27:16" pos:end="27:23">strstart</name><argument_list pos:start="27:24" pos:end="27:41">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><name pos:start="27:25" pos:end="27:27">uri</name></expr></argument>, <argument pos:start="27:30" pos:end="27:36"><expr pos:start="27:30" pos:end="27:36"><literal type="string" pos:start="27:30" pos:end="27:36">"unix:"</literal></expr></argument>, <argument pos:start="27:39" pos:end="27:40"><expr pos:start="27:39" pos:end="27:40"><operator pos:start="27:39" pos:end="27:39">&amp;</operator><name pos:start="27:40" pos:end="27:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:44" pos:end="29:5">{<block_content pos:start="28:9" pos:end="28:56">
        <expr_stmt pos:start="28:9" pos:end="28:56"><expr pos:start="28:9" pos:end="28:55"><call pos:start="28:9" pos:end="28:55"><name pos:start="28:9" pos:end="28:37">unix_start_outgoing_migration</name><argument_list pos:start="28:38" pos:end="28:55">(<argument pos:start="28:39" pos:end="28:39"><expr pos:start="28:39" pos:end="28:39"><name pos:start="28:39" pos:end="28:39">s</name></expr></argument>, <argument pos:start="28:42" pos:end="28:42"><expr pos:start="28:42" pos:end="28:42"><name pos:start="28:42" pos:end="28:42">p</name></expr></argument>, <argument pos:start="28:45" pos:end="28:54"><expr pos:start="28:45" pos:end="28:54"><operator pos:start="28:45" pos:end="28:45">&amp;</operator><name pos:start="28:46" pos:end="28:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="32:5">else if <condition pos:start="29:15" pos:end="29:40">(<expr pos:start="29:16" pos:end="29:39"><call pos:start="29:16" pos:end="29:39"><name pos:start="29:16" pos:end="29:23">strstart</name><argument_list pos:start="29:24" pos:end="29:39">(<argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">uri</name></expr></argument>, <argument pos:start="29:30" pos:end="29:34"><expr pos:start="29:30" pos:end="29:34"><literal type="string" pos:start="29:30" pos:end="29:34">"fd:"</literal></expr></argument>, <argument pos:start="29:37" pos:end="29:38"><expr pos:start="29:37" pos:end="29:38"><operator pos:start="29:37" pos:end="29:37">&amp;</operator><name pos:start="29:38" pos:end="29:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:42" pos:end="32:5">{<block_content pos:start="30:9" pos:end="32:0">
        <expr_stmt pos:start="30:9" pos:end="32:0"><expr pos:start="30:9" pos:end="30:53"><call pos:start="30:9" pos:end="30:53"><name pos:start="30:9" pos:end="30:35">fd_start_outgoing_migration</name><argument_list pos:start="30:36" pos:end="30:53">(<argument pos:start="30:37" pos:end="30:37"><expr pos:start="30:37" pos:end="30:37"><name pos:start="30:37" pos:end="30:37">s</name></expr></argument>, <argument pos:start="30:40" pos:end="30:40"><expr pos:start="30:40" pos:end="30:40"><name pos:start="30:40" pos:end="30:40">p</name></expr></argument>, <argument pos:start="30:43" pos:end="30:52"><expr pos:start="30:43" pos:end="30:52"><operator pos:start="30:43" pos:end="30:43">&amp;</operator><name pos:start="30:44" pos:end="30:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else pos:start="32:7" pos:end="37:41">else <block pos:start="32:12" pos:end="37:41">{<block_content pos:start="33:9" pos:end="37:41">
        <expr_stmt pos:start="33:9" pos:end="33:91"><expr pos:start="33:9" pos:end="33:90"><call pos:start="33:9" pos:end="33:90"><name pos:start="33:9" pos:end="33:17">error_set</name><argument_list pos:start="33:18" pos:end="33:90">(<argument pos:start="33:19" pos:end="33:22"><expr pos:start="33:19" pos:end="33:22"><name pos:start="33:19" pos:end="33:22">errp</name></expr></argument>, <argument pos:start="33:25" pos:end="33:52"><expr pos:start="33:25" pos:end="33:52"><name pos:start="33:25" pos:end="33:52">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="33:55" pos:end="33:59"><expr pos:start="33:55" pos:end="33:59"><literal type="string" pos:start="33:55" pos:end="33:59">"uri"</literal></expr></argument>, <argument pos:start="33:62" pos:end="33:89"><expr pos:start="33:62" pos:end="33:89"><literal type="string" pos:start="33:62" pos:end="33:89">"a valid migration protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:35"><expr pos:start="34:9" pos:end="34:34"><name pos:start="34:9" pos:end="34:16"><name pos:start="34:9" pos:end="34:9">s</name><operator pos:start="34:10" pos:end="34:11">-&gt;</operator><name pos:start="34:12" pos:end="34:16">state</name></name> <operator pos:start="34:18" pos:end="34:18">=</operator> <name pos:start="34:20" pos:end="34:34">MIG_STATE_ERROR</name></expr>;</expr_stmt>
    <if_stmt pos:start="35:5" pos:end="37:41"><if pos:start="35:5" pos:end="37:41">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">local_err</name></expr>)</condition> <block pos:start="35:20" pos:end="37:41">{<block_content pos:start="36:9" pos:end="37:41">
        <expr_stmt pos:start="36:9" pos:end="36:28"><expr pos:start="36:9" pos:end="36:27"><call pos:start="36:9" pos:end="36:27"><name pos:start="36:9" pos:end="36:24">migrate_fd_error</name><argument_list pos:start="36:25" pos:end="36:27">(<argument pos:start="36:26" pos:end="36:26"><expr pos:start="36:26" pos:end="36:26"><name pos:start="36:26" pos:end="36:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:23">error_propagate</name><argument_list pos:start="37:24" pos:end="37:40">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">errp</name></expr></argument>, <argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
