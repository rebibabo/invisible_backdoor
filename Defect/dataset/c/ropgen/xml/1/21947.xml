<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21947.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">xan_unpack_luma</name><parameter_list pos:start="1:27" pos:end="3:60">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:40">uint8_t</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">src</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:65">src_size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:34">uint8_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">dst</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:59"><decl pos:start="3:42" pos:end="3:59"><type pos:start="3:42" pos:end="3:59"><specifier pos:start="3:42" pos:end="3:46">const</specifier> <name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:59">dst_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:4" pos:end="77:25">

   <decl_stmt pos:start="7:4" pos:end="7:22"><decl pos:start="7:4" pos:end="7:16"><type pos:start="7:4" pos:end="7:6"><name pos:start="7:4" pos:end="7:6">int</name></type> <name pos:start="7:8" pos:end="7:16">tree_size</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:4" pos:end="7:6"/><name pos:start="7:19" pos:end="7:21">eof</name></decl>;</decl_stmt>

   <decl_stmt pos:start="9:4" pos:end="9:23"><decl pos:start="9:4" pos:end="9:22"><type pos:start="9:4" pos:end="9:18"><specifier pos:start="9:4" pos:end="9:8">const</specifier> <name pos:start="9:10" pos:end="9:16">uint8_t</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">tree</name></decl>;</decl_stmt>

   <decl_stmt pos:start="11:4" pos:end="11:18"><decl pos:start="11:4" pos:end="11:11"><type pos:start="11:4" pos:end="11:6"><name pos:start="11:4" pos:end="11:6">int</name></type> <name pos:start="11:8" pos:end="11:11">bits</name></decl>, <decl pos:start="11:14" pos:end="11:17"><type ref="prev" pos:start="11:4" pos:end="11:6"/><name pos:start="11:14" pos:end="11:17">mask</name></decl>;</decl_stmt>

   <decl_stmt pos:start="13:4" pos:end="13:23"><decl pos:start="13:4" pos:end="13:16"><type pos:start="13:4" pos:end="13:6"><name pos:start="13:4" pos:end="13:6">int</name></type> <name pos:start="13:8" pos:end="13:16">tree_root</name></decl>, <decl pos:start="13:19" pos:end="13:22"><type ref="prev" pos:start="13:4" pos:end="13:6"/><name pos:start="13:19" pos:end="13:22">node</name></decl>;</decl_stmt>

   <decl_stmt pos:start="15:4" pos:end="15:43"><decl pos:start="15:4" pos:end="15:42"><type pos:start="15:4" pos:end="15:18"><specifier pos:start="15:4" pos:end="15:8">const</specifier> <name pos:start="15:10" pos:end="15:16">uint8_t</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:25">dst_end</name> <init pos:start="15:27" pos:end="15:42">= <expr pos:start="15:29" pos:end="15:42"><name pos:start="15:29" pos:end="15:31">dst</name> <operator pos:start="15:33" pos:end="15:33">+</operator> <name pos:start="15:35" pos:end="15:42">dst_size</name></expr></init></decl>;</decl_stmt>

   <decl_stmt pos:start="17:4" pos:end="17:43"><decl pos:start="17:4" pos:end="17:42"><type pos:start="17:4" pos:end="17:18"><specifier pos:start="17:4" pos:end="17:8">const</specifier> <name pos:start="17:10" pos:end="17:16">uint8_t</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:25">src_end</name> <init pos:start="17:27" pos:end="17:42">= <expr pos:start="17:29" pos:end="17:42"><name pos:start="17:29" pos:end="17:31">src</name> <operator pos:start="17:33" pos:end="17:33">+</operator> <name pos:start="17:35" pos:end="17:42">src_size</name></expr></init></decl>;</decl_stmt>



   <expr_stmt pos:start="21:4" pos:end="21:22"><expr pos:start="21:4" pos:end="21:21"><name pos:start="21:4" pos:end="21:12">tree_size</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <operator pos:start="21:16" pos:end="21:16">*</operator><name pos:start="21:17" pos:end="21:19">src</name><operator pos:start="21:20" pos:end="21:21">++</operator></expr>;</expr_stmt>

   <expr_stmt pos:start="23:4" pos:end="23:22"><expr pos:start="23:4" pos:end="23:21"><name pos:start="23:4" pos:end="23:6">eof</name>       <operator pos:start="23:14" pos:end="23:14">=</operator> <operator pos:start="23:16" pos:end="23:16">*</operator><name pos:start="23:17" pos:end="23:19">src</name><operator pos:start="23:20" pos:end="23:21">++</operator></expr>;</expr_stmt>

   <expr_stmt pos:start="25:4" pos:end="25:33"><expr pos:start="25:4" pos:end="25:32"><name pos:start="25:4" pos:end="25:7">tree</name>      <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:18">src</name> <operator pos:start="25:20" pos:end="25:20">-</operator> <name pos:start="25:22" pos:end="25:24">eof</name> <operator pos:start="25:26" pos:end="25:26">*</operator> <literal type="number" pos:start="25:28" pos:end="25:30">2</literal> <operator pos:start="25:30" pos:end="25:30">-</operator> <literal type="number" pos:start="25:32" pos:end="25:32">2</literal></expr>;</expr_stmt>

   <expr_stmt pos:start="27:4" pos:end="27:31"><expr pos:start="27:4" pos:end="27:30"><name pos:start="27:4" pos:end="27:12">tree_root</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:18">eof</name> <operator pos:start="27:20" pos:end="27:20">+</operator> <name pos:start="27:22" pos:end="27:30">tree_size</name></expr>;</expr_stmt>

   <expr_stmt pos:start="29:4" pos:end="29:24"><expr pos:start="29:4" pos:end="29:23"><name pos:start="29:4" pos:end="29:6">src</name> <operator pos:start="29:8" pos:end="29:9">+=</operator> <name pos:start="29:11" pos:end="29:19">tree_size</name> <operator pos:start="29:21" pos:end="29:21">*</operator> <literal type="number" pos:start="29:23" pos:end="29:23">2</literal></expr>;</expr_stmt>



   <expr_stmt pos:start="33:4" pos:end="33:20"><expr pos:start="33:4" pos:end="33:19"><name pos:start="33:4" pos:end="33:7">node</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:19">tree_root</name></expr>;</expr_stmt>

   <expr_stmt pos:start="35:4" pos:end="35:17"><expr pos:start="35:4" pos:end="35:16"><name pos:start="35:4" pos:end="35:7">bits</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <operator pos:start="35:11" pos:end="35:11">*</operator><name pos:start="35:12" pos:end="35:14">src</name><operator pos:start="35:15" pos:end="35:16">++</operator></expr>;</expr_stmt>

   <expr_stmt pos:start="37:4" pos:end="37:15"><expr pos:start="37:4" pos:end="37:14"><name pos:start="37:4" pos:end="37:7">mask</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <literal type="number" pos:start="37:11" pos:end="37:14">0x80</literal></expr>;</expr_stmt>

   <for pos:start="39:4" pos:end="75:4">for <control pos:start="39:8" pos:end="39:11">(<init pos:start="39:9" pos:end="39:9">;</init><condition pos:start="39:10" pos:end="39:10">;</condition><incr/>)</control> <block pos:start="39:13" pos:end="75:4">{<block_content pos:start="41:8" pos:end="73:8">

       <decl_stmt pos:start="41:8" pos:end="41:33"><decl pos:start="41:8" pos:end="41:32"><type pos:start="41:8" pos:end="41:10"><name pos:start="41:8" pos:end="41:10">int</name></type> <name pos:start="41:12" pos:end="41:14">bit</name> <init pos:start="41:16" pos:end="41:32">= <expr pos:start="41:18" pos:end="41:32"><operator pos:start="41:18" pos:end="41:18">!</operator><operator pos:start="41:19" pos:end="41:19">!</operator><operator pos:start="41:20" pos:end="41:20">(</operator><name pos:start="41:21" pos:end="41:24">bits</name> <operator pos:start="41:26" pos:end="41:26">&amp;</operator> <name pos:start="41:28" pos:end="41:31">mask</name><operator pos:start="41:32" pos:end="41:32">)</operator></expr></init></decl>;</decl_stmt>

       <expr_stmt pos:start="43:8" pos:end="43:18"><expr pos:start="43:8" pos:end="43:17"><name pos:start="43:8" pos:end="43:11">mask</name> <operator pos:start="43:13" pos:end="43:15">&gt;&gt;=</operator> <literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</expr_stmt>

       <expr_stmt pos:start="45:8" pos:end="45:33"><expr pos:start="45:8" pos:end="45:32"><name pos:start="45:8" pos:end="45:11">node</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:32"><name pos:start="45:15" pos:end="45:18">tree</name><index pos:start="45:19" pos:end="45:32">[<expr pos:start="45:20" pos:end="45:31"><name pos:start="45:20" pos:end="45:23">node</name><operator pos:start="45:24" pos:end="45:24">*</operator><literal type="number" pos:start="45:25" pos:end="45:27">2</literal> <operator pos:start="45:27" pos:end="45:27">+</operator> <name pos:start="45:29" pos:end="45:31">bit</name></expr>]</index></name></expr>;</expr_stmt>

       <if_stmt pos:start="47:8" pos:end="49:17"><if pos:start="47:8" pos:end="49:17">if <condition pos:start="47:11" pos:end="47:23">(<expr pos:start="47:12" pos:end="47:22"><name pos:start="47:12" pos:end="47:15">node</name> <operator pos:start="47:17" pos:end="47:18">==</operator> <name pos:start="47:20" pos:end="47:22">eof</name></expr>)</condition><block type="pseudo" pos:start="49:12" pos:end="49:17"><block_content pos:start="49:12" pos:end="49:17">

           <break pos:start="49:12" pos:end="49:17">break;</break></block_content></block></if></if_stmt>

       <if_stmt pos:start="51:8" pos:end="61:8"><if pos:start="51:8" pos:end="61:8">if <condition pos:start="51:11" pos:end="51:22">(<expr pos:start="51:12" pos:end="51:21"><name pos:start="51:12" pos:end="51:15">node</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <name pos:start="51:19" pos:end="51:21">eof</name></expr>)</condition> <block pos:start="51:24" pos:end="61:8">{<block_content pos:start="53:12" pos:end="59:28">

           <expr_stmt pos:start="53:12" pos:end="53:25"><expr pos:start="53:12" pos:end="53:24"><operator pos:start="53:12" pos:end="53:12">*</operator><name pos:start="53:13" pos:end="53:15">dst</name><operator pos:start="53:16" pos:end="53:17">++</operator> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:24">node</name></expr>;</expr_stmt>

           <if_stmt pos:start="55:12" pos:end="57:21"><if pos:start="55:12" pos:end="57:21">if <condition pos:start="55:15" pos:end="55:29">(<expr pos:start="55:16" pos:end="55:28"><name pos:start="55:16" pos:end="55:18">dst</name> <operator pos:start="55:20" pos:end="55:20">&gt;</operator> <name pos:start="55:22" pos:end="55:28">dst_end</name></expr>)</condition><block type="pseudo" pos:start="57:16" pos:end="57:21"><block_content pos:start="57:16" pos:end="57:21">

               <break pos:start="57:16" pos:end="57:21">break;</break></block_content></block></if></if_stmt>

           <expr_stmt pos:start="59:12" pos:end="59:28"><expr pos:start="59:12" pos:end="59:27"><name pos:start="59:12" pos:end="59:15">node</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:27">tree_root</name></expr>;</expr_stmt>

       </block_content>}</block></if></if_stmt>

       <if_stmt pos:start="63:8" pos:end="73:8"><if pos:start="63:8" pos:end="73:8">if <condition pos:start="63:11" pos:end="63:17">(<expr pos:start="63:12" pos:end="63:16"><operator pos:start="63:12" pos:end="63:12">!</operator><name pos:start="63:13" pos:end="63:16">mask</name></expr>)</condition> <block pos:start="63:19" pos:end="73:8">{<block_content pos:start="65:12" pos:end="71:23">

           <expr_stmt pos:start="65:12" pos:end="65:25"><expr pos:start="65:12" pos:end="65:24"><name pos:start="65:12" pos:end="65:15">bits</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <operator pos:start="65:19" pos:end="65:19">*</operator><name pos:start="65:20" pos:end="65:22">src</name><operator pos:start="65:23" pos:end="65:24">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="67:12" pos:end="69:21"><if pos:start="67:12" pos:end="69:21">if <condition pos:start="67:15" pos:end="67:29">(<expr pos:start="67:16" pos:end="67:28"><name pos:start="67:16" pos:end="67:18">src</name> <operator pos:start="67:20" pos:end="67:20">&gt;</operator> <name pos:start="67:22" pos:end="67:28">src_end</name></expr>)</condition><block type="pseudo" pos:start="69:16" pos:end="69:21"><block_content pos:start="69:16" pos:end="69:21">

               <break pos:start="69:16" pos:end="69:21">break;</break></block_content></block></if></if_stmt>

           <expr_stmt pos:start="71:12" pos:end="71:23"><expr pos:start="71:12" pos:end="71:22"><name pos:start="71:12" pos:end="71:15">mask</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="number" pos:start="71:19" pos:end="71:22">0x80</literal></expr>;</expr_stmt>

       </block_content>}</block></if></if_stmt>

   </block_content>}</block></for>

   <return pos:start="77:4" pos:end="77:25">return <expr pos:start="77:11" pos:end="77:24"><name pos:start="77:11" pos:end="77:13">dst</name> <operator pos:start="77:15" pos:end="77:16">!=</operator> <name pos:start="77:18" pos:end="77:24">dst_end</name></expr>;</return>

</block_content>}</block></function>
</unit>
