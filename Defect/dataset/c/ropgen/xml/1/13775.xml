<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13775.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:36">silk_is_lpc_stable</name><parameter_list pos:start="1:37" pos:end="1:70">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:54"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">int16_t</name></type> <name pos:start="1:52" pos:end="1:58"><name pos:start="1:52" pos:end="1:54">lpc</name><index pos:start="1:55" pos:end="1:58">[<expr pos:start="1:56" pos:end="1:57"><literal type="number" pos:start="1:56" pos:end="1:57">16</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">order</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">k</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:21">DC_resp</name> <init pos:start="5:23" pos:end="5:25">= <expr pos:start="5:25" pos:end="5:25"><literal type="number" pos:start="5:25" pos:end="5:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int32_t</name></type> <name pos:start="7:13" pos:end="7:24"><name pos:start="7:13" pos:end="7:17">lpc32</name><index pos:start="7:18" pos:end="7:20">[<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">2</literal></expr>]</index><index pos:start="7:21" pos:end="7:24">[<expr pos:start="7:22" pos:end="7:23"><literal type="number" pos:start="7:22" pos:end="7:23">16</literal></expr>]</index></name></decl>;</decl_stmt>       <comment type="line" pos:start="7:33" pos:end="7:38">// Q24</comment>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">totalinvgain</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><literal type="number" pos:start="9:24" pos:end="9:24">1</literal> <operator pos:start="9:26" pos:end="9:27">&lt;&lt;</operator> <literal type="number" pos:start="9:29" pos:end="9:30">30</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="9:33" pos:end="9:45">// 1.0 in Q30</comment>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">int32_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">row</name> <init pos:start="11:18" pos:end="11:27">= <expr pos:start="11:20" pos:end="11:27"><name pos:start="11:20" pos:end="11:27"><name pos:start="11:20" pos:end="11:24">lpc32</name><index pos:start="11:25" pos:end="11:27">[<expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="11:30" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:37">prevrow</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:61">/* initialize the first row for the Levinson recursion */</comment>

    <for pos:start="17:5" pos:end="23:5">for <control pos:start="17:9" pos:end="17:31">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">k</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:26"><expr pos:start="17:17" pos:end="17:25"><name pos:start="17:17" pos:end="17:17">k</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:25">order</name></expr>;</condition> <incr pos:start="17:28" pos:end="17:30"><expr pos:start="17:28" pos:end="17:30"><name pos:start="17:28" pos:end="17:28">k</name><operator pos:start="17:29" pos:end="17:30">++</operator></expr></incr>)</control> <block pos:start="17:33" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:31">

        <expr_stmt pos:start="19:9" pos:end="19:26"><expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:15">DC_resp</name> <operator pos:start="19:17" pos:end="19:18">+=</operator> <name pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:22">lpc</name><index pos:start="19:23" pos:end="19:25">[<expr pos:start="19:24" pos:end="19:24"><name pos:start="19:24" pos:end="19:24">k</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:31"><expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:11">row</name><index pos:start="21:12" pos:end="21:14">[<expr pos:start="21:13" pos:end="21:13"><name pos:start="21:13" pos:end="21:13">k</name></expr>]</index></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:23"><name pos:start="21:18" pos:end="21:20">lpc</name><index pos:start="21:21" pos:end="21:23">[<expr pos:start="21:22" pos:end="21:22"><name pos:start="21:22" pos:end="21:22">k</name></expr>]</index></name> <operator pos:start="21:25" pos:end="21:25">*</operator> <literal type="number" pos:start="21:27" pos:end="21:30">4096</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="27:5" pos:end="29:17"><if pos:start="27:5" pos:end="29:17">if <condition pos:start="27:8" pos:end="27:24">(<expr pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:15">DC_resp</name> <operator pos:start="27:17" pos:end="27:18">&gt;=</operator> <literal type="number" pos:start="27:20" pos:end="27:23">4096</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:17"><block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:66">/* check if prediction gain pushes any coefficients too far */</comment>

    <for pos:start="35:5" pos:end="97:5">for <control pos:start="35:9" pos:end="35:31">(<init pos:start="35:10" pos:end="35:23"><expr pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:10">k</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:18">order</name> <operator pos:start="35:20" pos:end="35:20">-</operator> <literal type="number" pos:start="35:22" pos:end="35:22">1</literal></expr>;</init> <condition pos:start="35:25" pos:end="35:26"><expr pos:start="35:25" pos:end="35:25"><literal type="number" pos:start="35:25" pos:end="35:25">1</literal></expr>;</condition> <incr pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:28">k</name><operator pos:start="35:29" pos:end="35:30">--</operator></expr></incr>)</control> <block pos:start="35:33" pos:end="97:5">{<block_content pos:start="37:9" pos:end="95:9">

        <decl_stmt pos:start="37:9" pos:end="37:15"><decl pos:start="37:9" pos:end="37:14"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:14">rc</name></decl>;</decl_stmt>      <comment type="line" pos:start="37:22" pos:end="37:51">// Q31; reflection coefficient</comment>

        <decl_stmt pos:start="39:9" pos:end="39:20"><decl pos:start="39:9" pos:end="39:19"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:19">gaindiv</name></decl>;</decl_stmt> <comment type="line" pos:start="39:22" pos:end="39:62">// Q30; inverse of the gain (the divisor)</comment>

        <decl_stmt pos:start="41:9" pos:end="41:17"><decl pos:start="41:9" pos:end="41:16"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:16">gain</name></decl>;</decl_stmt>    <comment type="line" pos:start="41:22" pos:end="41:60">// gain for this reflection coefficient</comment>

        <decl_stmt pos:start="43:9" pos:end="43:18"><decl pos:start="43:9" pos:end="43:17"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:17">fbits</name></decl>;</decl_stmt>   <comment type="line" pos:start="43:22" pos:end="43:57">// fractional bits used for the gain</comment>

        <decl_stmt pos:start="45:9" pos:end="45:18"><decl pos:start="45:9" pos:end="45:17"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:17">error</name></decl>;</decl_stmt>   <comment type="line" pos:start="45:22" pos:end="45:87">// Q29; estimate of the error of our partial estimate of 1/gaindiv</comment>



        <if_stmt pos:start="49:9" pos:end="51:21"><if pos:start="49:9" pos:end="51:21">if <condition pos:start="49:12" pos:end="49:37">(<expr pos:start="49:13" pos:end="49:36"><call pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:17">FFABS</name><argument_list pos:start="49:18" pos:end="49:25">(<argument pos:start="49:19" pos:end="49:24"><expr pos:start="49:19" pos:end="49:24"><name pos:start="49:19" pos:end="49:24"><name pos:start="49:19" pos:end="49:21">row</name><index pos:start="49:22" pos:end="49:24">[<expr pos:start="49:23" pos:end="49:23"><name pos:start="49:23" pos:end="49:23">k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="49:27" pos:end="49:27">&gt;</operator> <literal type="number" pos:start="49:29" pos:end="49:36">16773022</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:21"><block_content pos:start="51:13" pos:end="51:21">

            <return pos:start="51:13" pos:end="51:21">return <expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:10">rc</name>      <operator pos:start="55:17" pos:end="55:17">=</operator> <operator pos:start="55:19" pos:end="55:19">-</operator><operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:23">row</name><index pos:start="55:24" pos:end="55:26">[<expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">k</name></expr>]</index></name> <operator pos:start="55:28" pos:end="55:28">*</operator> <literal type="number" pos:start="55:30" pos:end="55:32">128</literal><operator pos:start="55:33" pos:end="55:33">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:15">gaindiv</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <operator pos:start="57:19" pos:end="57:19">(</operator><literal type="number" pos:start="57:20" pos:end="57:20">1</literal> <operator pos:start="57:22" pos:end="57:23">&lt;&lt;</operator> <literal type="number" pos:start="57:25" pos:end="57:26">30</literal><operator pos:start="57:27" pos:end="57:27">)</operator> <operator pos:start="57:29" pos:end="57:29">-</operator> <call pos:start="57:31" pos:end="57:42"><name pos:start="57:31" pos:end="57:34">MULH</name><argument_list pos:start="57:35" pos:end="57:42">(<argument pos:start="57:36" pos:end="57:37"><expr pos:start="57:36" pos:end="57:37"><name pos:start="57:36" pos:end="57:37">rc</name></expr></argument>, <argument pos:start="57:40" pos:end="57:41"><expr pos:start="57:40" pos:end="57:41"><name pos:start="57:40" pos:end="57:41">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:56"><expr pos:start="61:9" pos:end="61:55"><name pos:start="61:9" pos:end="61:20">totalinvgain</name> <operator pos:start="61:22" pos:end="61:22">=</operator> <call pos:start="61:24" pos:end="61:50"><name pos:start="61:24" pos:end="61:27">MULH</name><argument_list pos:start="61:28" pos:end="61:50">(<argument pos:start="61:29" pos:end="61:40"><expr pos:start="61:29" pos:end="61:40"><name pos:start="61:29" pos:end="61:40">totalinvgain</name></expr></argument>, <argument pos:start="61:43" pos:end="61:49"><expr pos:start="61:43" pos:end="61:49"><name pos:start="61:43" pos:end="61:49">gaindiv</name></expr></argument>)</argument_list></call> <operator pos:start="61:52" pos:end="61:53">&lt;&lt;</operator> <literal type="number" pos:start="61:55" pos:end="61:55">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:44"><if pos:start="63:9" pos:end="65:44">if <condition pos:start="63:12" pos:end="63:19">(<expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:13">k</name> <operator pos:start="63:15" pos:end="63:16">==</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:44"><block_content pos:start="65:13" pos:end="65:44">

            <return pos:start="65:13" pos:end="65:44">return <expr pos:start="65:20" pos:end="65:43"><operator pos:start="65:20" pos:end="65:20">(</operator><name pos:start="65:21" pos:end="65:32">totalinvgain</name> <operator pos:start="65:34" pos:end="65:35">&gt;=</operator> <literal type="number" pos:start="65:37" pos:end="65:42">107374</literal><operator pos:start="65:43" pos:end="65:43">)</operator></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="69:9" pos:end="69:37">/* approximate 1.0/gaindiv */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:13">fbits</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:34"><name pos:start="71:17" pos:end="71:25">opus_ilog</name><argument_list pos:start="71:26" pos:end="71:34">(<argument pos:start="71:27" pos:end="71:33"><expr pos:start="71:27" pos:end="71:33"><name pos:start="71:27" pos:end="71:33">gaindiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:64"><expr pos:start="73:9" pos:end="73:63"><name pos:start="73:9" pos:end="73:12">gain</name>  <operator pos:start="73:15" pos:end="73:15">=</operator> <operator pos:start="73:17" pos:end="73:17">(</operator><operator pos:start="73:18" pos:end="73:18">(</operator><literal type="number" pos:start="73:19" pos:end="73:19">1</literal> <operator pos:start="73:21" pos:end="73:22">&lt;&lt;</operator> <literal type="number" pos:start="73:24" pos:end="73:25">29</literal><operator pos:start="73:26" pos:end="73:26">)</operator> <operator pos:start="73:28" pos:end="73:28">-</operator> <literal type="number" pos:start="73:30" pos:end="73:30">1</literal><operator pos:start="73:31" pos:end="73:31">)</operator> <operator pos:start="73:33" pos:end="73:33">/</operator> <operator pos:start="73:35" pos:end="73:35">(</operator><name pos:start="73:36" pos:end="73:42">gaindiv</name> <operator pos:start="73:44" pos:end="73:45">&gt;&gt;</operator> <operator pos:start="73:47" pos:end="73:47">(</operator><name pos:start="73:48" pos:end="73:52">fbits</name> <operator pos:start="73:54" pos:end="73:54">+</operator> <literal type="number" pos:start="73:56" pos:end="73:58">1</literal> <operator pos:start="73:58" pos:end="73:58">-</operator> <literal type="number" pos:start="73:60" pos:end="73:61">16</literal><operator pos:start="73:62" pos:end="73:62">)</operator><operator pos:start="73:63" pos:end="73:63">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="73:66" pos:end="73:79">// Q&lt;fbits-16&gt;</comment>

        <expr_stmt pos:start="75:9" pos:end="75:73"><expr pos:start="75:9" pos:end="75:72"><name pos:start="75:9" pos:end="75:13">error</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <operator pos:start="75:17" pos:end="75:17">(</operator><literal type="number" pos:start="75:18" pos:end="75:18">1</literal> <operator pos:start="75:20" pos:end="75:21">&lt;&lt;</operator> <literal type="number" pos:start="75:23" pos:end="75:24">29</literal><operator pos:start="75:25" pos:end="75:25">)</operator> <operator pos:start="75:27" pos:end="75:27">-</operator> <call pos:start="75:29" pos:end="75:72"><name pos:start="75:29" pos:end="75:32">MULL</name><argument_list pos:start="75:33" pos:end="75:72">(<argument pos:start="75:34" pos:end="75:61"><expr pos:start="75:34" pos:end="75:61"><name pos:start="75:34" pos:end="75:40">gaindiv</name> <operator pos:start="75:42" pos:end="75:43">&lt;&lt;</operator> <operator pos:start="75:45" pos:end="75:45">(</operator><literal type="number" pos:start="75:46" pos:end="75:49">15</literal> <operator pos:start="75:49" pos:end="75:49">+</operator> <literal type="number" pos:start="75:51" pos:end="75:54">16</literal> <operator pos:start="75:54" pos:end="75:54">-</operator> <name pos:start="75:56" pos:end="75:60">fbits</name><operator pos:start="75:61" pos:end="75:61">)</operator></expr></argument>, <argument pos:start="75:64" pos:end="75:67"><expr pos:start="75:64" pos:end="75:67"><name pos:start="75:64" pos:end="75:67">gain</name></expr></argument>, <argument pos:start="75:70" pos:end="75:71"><expr pos:start="75:70" pos:end="75:71"><literal type="number" pos:start="75:70" pos:end="75:71">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:54"><expr pos:start="77:9" pos:end="77:53"><name pos:start="77:9" pos:end="77:12">gain</name>  <operator pos:start="77:15" pos:end="77:15">=</operator> <operator pos:start="77:17" pos:end="77:17">(</operator><operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:22">gain</name> <operator pos:start="77:24" pos:end="77:25">&lt;&lt;</operator> <literal type="number" pos:start="77:27" pos:end="77:28">16</literal><operator pos:start="77:29" pos:end="77:29">)</operator> <operator pos:start="77:31" pos:end="77:31">+</operator> <operator pos:start="77:33" pos:end="77:33">(</operator><name pos:start="77:34" pos:end="77:38">error</name> <operator pos:start="77:40" pos:end="77:40">*</operator> <name pos:start="77:42" pos:end="77:45">gain</name> <operator pos:start="77:47" pos:end="77:48">&gt;&gt;</operator> <literal type="number" pos:start="77:50" pos:end="77:51">13</literal><operator pos:start="77:52" pos:end="77:52">)</operator><operator pos:start="77:53" pos:end="77:53">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="81:9" pos:end="81:60">/* switch to the next row of the LPC coefficients */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:15">prevrow</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <name pos:start="83:19" pos:end="83:21">row</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:11">row</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:26"><name pos:start="85:15" pos:end="85:19">lpc32</name><index pos:start="85:20" pos:end="85:26">[<expr pos:start="85:21" pos:end="85:25"><name pos:start="85:21" pos:end="85:21">k</name> <operator pos:start="85:23" pos:end="85:23">&amp;</operator> <literal type="number" pos:start="85:25" pos:end="85:25">1</literal></expr>]</index></name></expr>;</expr_stmt>



        <for pos:start="89:9" pos:end="95:9">for <control pos:start="89:13" pos:end="89:31">(<init pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">j</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</init> <condition pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:25"><name pos:start="89:21" pos:end="89:21">j</name> <operator pos:start="89:23" pos:end="89:23">&lt;</operator> <name pos:start="89:25" pos:end="89:25">k</name></expr>;</condition> <incr pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:28">j</name><operator pos:start="89:29" pos:end="89:30">++</operator></expr></incr>)</control> <block pos:start="89:33" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:48">

            <decl_stmt pos:start="91:13" pos:end="91:72"><decl pos:start="91:13" pos:end="91:71"><type pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:15">int</name></type> <name pos:start="91:17" pos:end="91:17">x</name> <init pos:start="91:19" pos:end="91:71">= <expr pos:start="91:21" pos:end="91:71"><name pos:start="91:21" pos:end="91:30"><name pos:start="91:21" pos:end="91:27">prevrow</name><index pos:start="91:28" pos:end="91:30">[<expr pos:start="91:29" pos:end="91:29"><name pos:start="91:29" pos:end="91:29">j</name></expr>]</index></name> <operator pos:start="91:32" pos:end="91:32">-</operator> <call pos:start="91:34" pos:end="91:71"><name pos:start="91:34" pos:end="91:43">ROUND_MULL</name><argument_list pos:start="91:44" pos:end="91:71">(<argument pos:start="91:45" pos:end="91:62"><expr pos:start="91:45" pos:end="91:62"><name pos:start="91:45" pos:end="91:62"><name pos:start="91:45" pos:end="91:51">prevrow</name><index pos:start="91:52" pos:end="91:62">[<expr pos:start="91:53" pos:end="91:61"><name pos:start="91:53" pos:end="91:53">k</name> <operator pos:start="91:55" pos:end="91:55">-</operator> <name pos:start="91:57" pos:end="91:57">j</name> <operator pos:start="91:59" pos:end="91:59">-</operator> <literal type="number" pos:start="91:61" pos:end="91:61">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="91:65" pos:end="91:66"><expr pos:start="91:65" pos:end="91:66"><name pos:start="91:65" pos:end="91:66">rc</name></expr></argument>, <argument pos:start="91:69" pos:end="91:70"><expr pos:start="91:69" pos:end="91:70"><literal type="number" pos:start="91:69" pos:end="91:70">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:48"><expr pos:start="93:13" pos:end="93:47"><name pos:start="93:13" pos:end="93:18"><name pos:start="93:13" pos:end="93:15">row</name><index pos:start="93:16" pos:end="93:18">[<expr pos:start="93:17" pos:end="93:17"><name pos:start="93:17" pos:end="93:17">j</name></expr>]</index></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <call pos:start="93:22" pos:end="93:47"><name pos:start="93:22" pos:end="93:31">ROUND_MULL</name><argument_list pos:start="93:32" pos:end="93:47">(<argument pos:start="93:33" pos:end="93:33"><expr pos:start="93:33" pos:end="93:33"><name pos:start="93:33" pos:end="93:33">x</name></expr></argument>, <argument pos:start="93:36" pos:end="93:39"><expr pos:start="93:36" pos:end="93:39"><name pos:start="93:36" pos:end="93:39">gain</name></expr></argument>, <argument pos:start="93:42" pos:end="93:46"><expr pos:start="93:42" pos:end="93:46"><name pos:start="93:42" pos:end="93:46">fbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
