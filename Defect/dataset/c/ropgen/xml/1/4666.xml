<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4666.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">lsi_scsi_init</name><parameter_list pos:start="1:26" pos:end="1:41">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:35">PCIDevice</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">dev</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="35:1">{<block_content pos:start="3:5" pos:end="34:46">
    <decl_stmt pos:start="3:5" pos:end="3:34"><decl pos:start="3:5" pos:end="3:33"><type pos:start="3:5" pos:end="3:14"><name pos:start="3:5" pos:end="3:12">LSIState</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:15">s</name> <init pos:start="3:17" pos:end="3:33">= <expr pos:start="3:19" pos:end="3:33"><operator pos:start="3:19" pos:end="3:19">(</operator><name pos:start="3:20" pos:end="3:27">LSIState</name> <operator pos:start="3:29" pos:end="3:29">*</operator><operator pos:start="3:30" pos:end="3:30">)</operator><name pos:start="3:31" pos:end="3:33">dev</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:22"><decl pos:start="4:5" pos:end="4:21"><type pos:start="4:5" pos:end="4:13"><name pos:start="4:5" pos:end="4:11">uint8_t</name> <modifier pos:start="4:13" pos:end="4:13">*</modifier></type><name pos:start="4:14" pos:end="4:21">pci_conf</name></decl>;</decl_stmt>
    <expr_stmt pos:start="5:5" pos:end="5:33"><expr pos:start="5:5" pos:end="5:32"><name pos:start="5:5" pos:end="5:12">pci_conf</name> <operator pos:start="5:14" pos:end="5:14">=</operator> <name pos:start="5:16" pos:end="5:32"><name pos:start="5:16" pos:end="5:16">s</name><operator pos:start="5:17" pos:end="5:18">-&gt;</operator><name pos:start="5:19" pos:end="5:25">pci_dev</name><operator pos:start="5:26" pos:end="5:26">.</operator><name pos:start="5:27" pos:end="5:32">config</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="6:5" pos:end="6:30">/* PCI Vendor ID (word) */</comment>
    <expr_stmt pos:start="7:5" pos:end="7:64"><expr pos:start="7:5" pos:end="7:63"><call pos:start="7:5" pos:end="7:63"><name pos:start="7:5" pos:end="7:28">pci_config_set_vendor_id</name><argument_list pos:start="7:29" pos:end="7:63">(<argument pos:start="7:30" pos:end="7:37"><expr pos:start="7:30" pos:end="7:37"><name pos:start="7:30" pos:end="7:37">pci_conf</name></expr></argument>, <argument pos:start="7:40" pos:end="7:62"><expr pos:start="7:40" pos:end="7:62"><name pos:start="7:40" pos:end="7:62">PCI_VENDOR_ID_LSI_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:30">/* PCI device ID (word) */</comment>
    <expr_stmt pos:start="9:5" pos:end="9:66"><expr pos:start="9:5" pos:end="9:65"><call pos:start="9:5" pos:end="9:65"><name pos:start="9:5" pos:end="9:28">pci_config_set_device_id</name><argument_list pos:start="9:29" pos:end="9:65">(<argument pos:start="9:30" pos:end="9:37"><expr pos:start="9:30" pos:end="9:37"><name pos:start="9:30" pos:end="9:37">pci_conf</name></expr></argument>, <argument pos:start="9:40" pos:end="9:64"><expr pos:start="9:40" pos:end="9:64"><name pos:start="9:40" pos:end="9:64">PCI_DEVICE_ID_LSI_53C895A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="10:5" pos:end="10:29">/* PCI base class code */</comment>
    <expr_stmt pos:start="11:5" pos:end="11:59"><expr pos:start="11:5" pos:end="11:58"><call pos:start="11:5" pos:end="11:58"><name pos:start="11:5" pos:end="11:24">pci_config_set_class</name><argument_list pos:start="11:25" pos:end="11:58">(<argument pos:start="11:26" pos:end="11:33"><expr pos:start="11:26" pos:end="11:33"><name pos:start="11:26" pos:end="11:33">pci_conf</name></expr></argument>, <argument pos:start="11:36" pos:end="11:57"><expr pos:start="11:36" pos:end="11:57"><name pos:start="11:36" pos:end="11:57">PCI_CLASS_STORAGE_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="12:5" pos:end="12:26">/* PCI subsystem ID */</comment>
    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:12">pci_conf</name><index pos:start="13:13" pos:end="13:18">[<expr pos:start="13:14" pos:end="13:17"><literal type="number" pos:start="13:14" pos:end="13:17">0x2e</literal></expr>]</index></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <literal type="number" pos:start="13:22" pos:end="13:25">0x00</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:26"><expr pos:start="14:5" pos:end="14:25"><name pos:start="14:5" pos:end="14:18"><name pos:start="14:5" pos:end="14:12">pci_conf</name><index pos:start="14:13" pos:end="14:18">[<expr pos:start="14:14" pos:end="14:17"><literal type="number" pos:start="14:14" pos:end="14:17">0x2f</literal></expr>]</index></name> <operator pos:start="14:20" pos:end="14:20">=</operator> <literal type="number" pos:start="14:22" pos:end="14:25">0x10</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="15:5" pos:end="15:33">/* PCI latency timer = 255 */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:26"><expr pos:start="16:5" pos:end="16:25"><name pos:start="16:5" pos:end="16:18"><name pos:start="16:5" pos:end="16:12">pci_conf</name><index pos:start="16:13" pos:end="16:18">[<expr pos:start="16:14" pos:end="16:17"><literal type="number" pos:start="16:14" pos:end="16:17">0x0d</literal></expr>]</index></name> <operator pos:start="16:20" pos:end="16:20">=</operator> <literal type="number" pos:start="16:22" pos:end="16:25">0xff</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="17:5" pos:end="17:25">/* Interrupt pin 1 */</comment>
    <expr_stmt pos:start="18:5" pos:end="18:26"><expr pos:start="18:5" pos:end="18:25"><name pos:start="18:5" pos:end="18:18"><name pos:start="18:5" pos:end="18:12">pci_conf</name><index pos:start="18:13" pos:end="18:18">[<expr pos:start="18:14" pos:end="18:17"><literal type="number" pos:start="18:14" pos:end="18:17">0x3d</literal></expr>]</index></name> <operator pos:start="18:20" pos:end="18:20">=</operator> <literal type="number" pos:start="18:22" pos:end="18:25">0x01</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="20:66"><expr pos:start="19:5" pos:end="20:65"><name pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:19">mmio_io_addr</name></name> <operator pos:start="19:21" pos:end="19:21">=</operator> <call pos:start="19:23" pos:end="20:65"><name pos:start="19:23" pos:end="19:44">cpu_register_io_memory</name><argument_list pos:start="19:45" pos:end="20:65">(<argument pos:start="19:46" pos:end="19:60"><expr pos:start="19:46" pos:end="19:60"><name pos:start="19:46" pos:end="19:60">lsi_mmio_readfn</name></expr></argument>,
                                             <argument pos:start="20:46" pos:end="20:61"><expr pos:start="20:46" pos:end="20:61"><name pos:start="20:46" pos:end="20:61">lsi_mmio_writefn</name></expr></argument>, <argument pos:start="20:64" pos:end="20:64"><expr pos:start="20:64" pos:end="20:64"><name pos:start="20:64" pos:end="20:64">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="22:64"><expr pos:start="21:5" pos:end="22:63"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:18">ram_io_addr</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <call pos:start="21:22" pos:end="22:63"><name pos:start="21:22" pos:end="21:43">cpu_register_io_memory</name><argument_list pos:start="21:44" pos:end="22:63">(<argument pos:start="21:45" pos:end="21:58"><expr pos:start="21:45" pos:end="21:58"><name pos:start="21:45" pos:end="21:58">lsi_ram_readfn</name></expr></argument>,
                                            <argument pos:start="22:45" pos:end="22:59"><expr pos:start="22:45" pos:end="22:59"><name pos:start="22:45" pos:end="22:59">lsi_ram_writefn</name></expr></argument>, <argument pos:start="22:62" pos:end="22:62"><expr pos:start="22:62" pos:end="22:62"><name pos:start="22:62" pos:end="22:62">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="24:65"><expr pos:start="23:5" pos:end="24:64"><call pos:start="23:5" pos:end="24:64"><name pos:start="23:5" pos:end="23:20">pci_register_bar</name><argument_list pos:start="23:21" pos:end="24:64">(<argument pos:start="23:22" pos:end="23:42"><expr pos:start="23:22" pos:end="23:42"><operator pos:start="23:22" pos:end="23:22">(</operator>struct <name pos:start="23:30" pos:end="23:38">PCIDevice</name> <operator pos:start="23:40" pos:end="23:40">*</operator><operator pos:start="23:41" pos:end="23:41">)</operator><name pos:start="23:42" pos:end="23:42">s</name></expr></argument>, <argument pos:start="23:45" pos:end="23:45"><expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">0</literal></expr></argument>, <argument pos:start="23:48" pos:end="23:50"><expr pos:start="23:48" pos:end="23:50"><literal type="number" pos:start="23:48" pos:end="23:50">256</literal></expr></argument>,
                           <argument pos:start="24:28" pos:end="24:47"><expr pos:start="24:28" pos:end="24:47"><name pos:start="24:28" pos:end="24:47">PCI_ADDRESS_SPACE_IO</name></expr></argument>, <argument pos:start="24:50" pos:end="24:63"><expr pos:start="24:50" pos:end="24:63"><name pos:start="24:50" pos:end="24:63">lsi_io_mapfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="26:68"><expr pos:start="25:5" pos:end="26:67"><call pos:start="25:5" pos:end="26:67"><name pos:start="25:5" pos:end="25:20">pci_register_bar</name><argument_list pos:start="25:21" pos:end="26:67">(<argument pos:start="25:22" pos:end="25:42"><expr pos:start="25:22" pos:end="25:42"><operator pos:start="25:22" pos:end="25:22">(</operator>struct <name pos:start="25:30" pos:end="25:38">PCIDevice</name> <operator pos:start="25:40" pos:end="25:40">*</operator><operator pos:start="25:41" pos:end="25:41">)</operator><name pos:start="25:42" pos:end="25:42">s</name></expr></argument>, <argument pos:start="25:45" pos:end="25:45"><expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">1</literal></expr></argument>, <argument pos:start="25:48" pos:end="25:52"><expr pos:start="25:48" pos:end="25:52"><literal type="number" pos:start="25:48" pos:end="25:52">0x400</literal></expr></argument>,
                           <argument pos:start="26:28" pos:end="26:48"><expr pos:start="26:28" pos:end="26:48"><name pos:start="26:28" pos:end="26:48">PCI_ADDRESS_SPACE_MEM</name></expr></argument>, <argument pos:start="26:51" pos:end="26:66"><expr pos:start="26:51" pos:end="26:66"><name pos:start="26:51" pos:end="26:66">lsi_mmio_mapfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="28:67"><expr pos:start="27:5" pos:end="28:66"><call pos:start="27:5" pos:end="28:66"><name pos:start="27:5" pos:end="27:20">pci_register_bar</name><argument_list pos:start="27:21" pos:end="28:66">(<argument pos:start="27:22" pos:end="27:42"><expr pos:start="27:22" pos:end="27:42"><operator pos:start="27:22" pos:end="27:22">(</operator>struct <name pos:start="27:30" pos:end="27:38">PCIDevice</name> <operator pos:start="27:40" pos:end="27:40">*</operator><operator pos:start="27:41" pos:end="27:41">)</operator><name pos:start="27:42" pos:end="27:42">s</name></expr></argument>, <argument pos:start="27:45" pos:end="27:45"><expr pos:start="27:45" pos:end="27:45"><literal type="number" pos:start="27:45" pos:end="27:45">2</literal></expr></argument>, <argument pos:start="27:48" pos:end="27:53"><expr pos:start="27:48" pos:end="27:53"><literal type="number" pos:start="27:48" pos:end="27:53">0x2000</literal></expr></argument>,
                           <argument pos:start="28:28" pos:end="28:48"><expr pos:start="28:28" pos:end="28:48"><name pos:start="28:28" pos:end="28:48">PCI_ADDRESS_SPACE_MEM</name></expr></argument>, <argument pos:start="28:51" pos:end="28:65"><expr pos:start="28:51" pos:end="28:65"><name pos:start="28:51" pos:end="28:65">lsi_ram_mapfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:12">queue</name></name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:45"><name pos:start="29:16" pos:end="29:26">qemu_malloc</name><argument_list pos:start="29:27" pos:end="29:45">(<argument pos:start="29:28" pos:end="29:44"><expr pos:start="29:28" pos:end="29:44"><sizeof pos:start="29:28" pos:end="29:44">sizeof<argument_list pos:start="29:34" pos:end="29:44">(<argument pos:start="29:35" pos:end="29:43"><expr pos:start="29:35" pos:end="29:43"><name pos:start="29:35" pos:end="29:43">lsi_queue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:21"><expr pos:start="30:5" pos:end="30:20"><name pos:start="30:5" pos:end="30:16"><name pos:start="30:5" pos:end="30:5">s</name><operator pos:start="30:6" pos:end="30:7">-&gt;</operator><name pos:start="30:8" pos:end="30:16">queue_len</name></name> <operator pos:start="30:18" pos:end="30:18">=</operator> <literal type="number" pos:start="30:20" pos:end="30:20">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:27"><expr pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:22">active_commands</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:44"><expr pos:start="32:5" pos:end="32:43"><name pos:start="32:5" pos:end="32:25"><name pos:start="32:5" pos:end="32:5">s</name><operator pos:start="32:6" pos:end="32:7">-&gt;</operator><name pos:start="32:8" pos:end="32:14">pci_dev</name><operator pos:start="32:15" pos:end="32:15">.</operator><name pos:start="32:16" pos:end="32:25">unregister</name></name> <operator pos:start="32:27" pos:end="32:27">=</operator> <name pos:start="32:29" pos:end="32:43">lsi_scsi_uninit</name></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><call pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:18">lsi_soft_reset</name><argument_list pos:start="33:19" pos:end="33:21">(<argument pos:start="33:20" pos:end="33:20"><expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:46"><expr pos:start="34:5" pos:end="34:45"><call pos:start="34:5" pos:end="34:45"><name pos:start="34:5" pos:end="34:16">scsi_bus_new</name><argument_list pos:start="34:17" pos:end="34:45">(<argument pos:start="34:18" pos:end="34:27"><expr pos:start="34:18" pos:end="34:27"><operator pos:start="34:18" pos:end="34:18">&amp;</operator><name pos:start="34:19" pos:end="34:27"><name pos:start="34:19" pos:end="34:21">dev</name><operator pos:start="34:22" pos:end="34:23">-&gt;</operator><name pos:start="34:24" pos:end="34:27">qdev</name></name></expr></argument>, <argument pos:start="34:30" pos:end="34:44"><expr pos:start="34:30" pos:end="34:44"><name pos:start="34:30" pos:end="34:44">lsi_scsi_attach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
