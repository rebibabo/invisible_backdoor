<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19394.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">qemu_irq</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:21">armv7m_init</name><parameter_list pos:start="1:22" pos:end="3:73">(<parameter pos:start="1:23" pos:end="1:49"><decl pos:start="1:23" pos:end="1:49"><type pos:start="1:23" pos:end="1:49"><name pos:start="1:23" pos:end="1:34">MemoryRegion</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:49">system_memory</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:63">mem_size</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:76"><decl pos:start="1:66" pos:end="1:76"><type pos:start="1:66" pos:end="1:76"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:76">num_irq</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:49"><decl pos:start="3:23" pos:end="3:49"><type pos:start="3:23" pos:end="3:49"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:49">kernel_filename</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:72"><decl pos:start="3:52" pos:end="3:72"><type pos:start="3:52" pos:end="3:72"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:72">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">ARMCPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUARMState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">DeviceState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">nvic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">pic</name> <init pos:start="13:19" pos:end="13:44">= <expr pos:start="13:21" pos:end="13:44"><call pos:start="13:21" pos:end="13:44"><name pos:start="13:21" pos:end="13:25">g_new</name><argument_list pos:start="13:26" pos:end="13:44">(<argument pos:start="13:27" pos:end="13:34"><expr pos:start="13:27" pos:end="13:34"><name pos:start="13:27" pos:end="13:34">qemu_irq</name></expr></argument>, <argument pos:start="13:37" pos:end="13:43"><expr pos:start="13:37" pos:end="13:43"><name pos:start="13:37" pos:end="13:43">num_irq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">image_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:18">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:20">lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">big_endian</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:48"><decl pos:start="25:5" pos:end="25:47"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:22">hack</name> <init pos:start="25:24" pos:end="25:47">= <expr pos:start="25:26" pos:end="25:47"><call pos:start="25:26" pos:end="25:47"><name pos:start="25:26" pos:end="25:30">g_new</name><argument_list pos:start="25:31" pos:end="25:47">(<argument pos:start="25:32" pos:end="25:43"><expr pos:start="25:32" pos:end="25:43"><name pos:start="25:32" pos:end="25:43">MemoryRegion</name></expr></argument>, <argument pos:start="25:46" pos:end="25:46"><expr pos:start="25:46" pos:end="25:46"><literal type="number" pos:start="25:46" pos:end="25:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:17">cpu_model</name> <operator pos:start="29:19" pos:end="29:20">==</operator> <name pos:start="29:22" pos:end="29:25">NULL</name></expr>)</condition> <block pos:start="29:28" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:32">

	<expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:17">cpu_model</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <literal type="string" pos:start="31:21" pos:end="31:31">"cortex-m3"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:7">cpu</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:33"><name pos:start="35:11" pos:end="35:22">cpu_arm_init</name><argument_list pos:start="35:23" pos:end="35:33">(<argument pos:start="35:24" pos:end="35:32"><expr pos:start="35:24" pos:end="35:32"><name pos:start="35:24" pos:end="35:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:20">(<expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:11">cpu</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <name pos:start="37:16" pos:end="37:19">NULL</name></expr>)</condition> <block pos:start="37:22" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:16">

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><call pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:15">fprintf</name><argument_list pos:start="39:16" pos:end="39:58">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">stderr</name></expr></argument>, <argument pos:start="39:25" pos:end="39:57"><expr pos:start="39:25" pos:end="39:57"><literal type="string" pos:start="39:25" pos:end="39:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:16"><expr pos:start="41:9" pos:end="41:15"><call pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:12">exit</name><argument_list pos:start="41:13" pos:end="41:15">(<argument pos:start="41:14" pos:end="41:14"><expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:7">env</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <operator pos:start="45:11" pos:end="45:11">&amp;</operator><name pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:14">cpu</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><call pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:23">armv7m_bitband_init</name><argument_list pos:start="49:24" pos:end="49:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:44"><expr pos:start="53:5" pos:end="53:43"><name pos:start="53:5" pos:end="53:8">nvic</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <call pos:start="53:12" pos:end="53:43"><name pos:start="53:12" pos:end="53:22">qdev_create</name><argument_list pos:start="53:23" pos:end="53:43">(<argument pos:start="53:24" pos:end="53:27"><expr pos:start="53:24" pos:end="53:27"><name pos:start="53:24" pos:end="53:27">NULL</name></expr></argument>, <argument pos:start="53:30" pos:end="53:42"><expr pos:start="53:30" pos:end="53:42"><literal type="string" pos:start="53:30" pos:end="53:42">"armv7m_nvic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:51"><expr pos:start="55:5" pos:end="55:50"><call pos:start="55:5" pos:end="55:50"><name pos:start="55:5" pos:end="55:24">qdev_prop_set_uint32</name><argument_list pos:start="55:25" pos:end="55:50">(<argument pos:start="55:26" pos:end="55:29"><expr pos:start="55:26" pos:end="55:29"><name pos:start="55:26" pos:end="55:29">nvic</name></expr></argument>, <argument pos:start="55:32" pos:end="55:40"><expr pos:start="55:32" pos:end="55:40"><literal type="string" pos:start="55:32" pos:end="55:40">"num-irq"</literal></expr></argument>, <argument pos:start="55:43" pos:end="55:49"><expr pos:start="55:43" pos:end="55:49"><name pos:start="55:43" pos:end="55:49">num_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:21"><expr pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:7">env</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:13">nvic</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:20">nvic</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><call pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:20">qdev_init_nofail</name><argument_list pos:start="59:21" pos:end="59:26">(<argument pos:start="59:22" pos:end="59:25"><expr pos:start="59:22" pos:end="59:25"><name pos:start="59:22" pos:end="59:25">nvic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:67"><expr pos:start="61:5" pos:end="63:66"><call pos:start="61:5" pos:end="63:66"><name pos:start="61:5" pos:end="61:22">sysbus_connect_irq</name><argument_list pos:start="61:23" pos:end="63:66">(<argument pos:start="61:24" pos:end="61:43"><expr pos:start="61:24" pos:end="61:43"><call pos:start="61:24" pos:end="61:43"><name pos:start="61:24" pos:end="61:37">SYS_BUS_DEVICE</name><argument_list pos:start="61:38" pos:end="61:43">(<argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><name pos:start="61:39" pos:end="61:42">nvic</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:46" pos:end="61:46"><expr pos:start="61:46" pos:end="61:46"><literal type="number" pos:start="61:46" pos:end="61:46">0</literal></expr></argument>,

                       <argument pos:start="63:24" pos:end="63:65"><expr pos:start="63:24" pos:end="63:65"><call pos:start="63:24" pos:end="63:65"><name pos:start="63:24" pos:end="63:39">qdev_get_gpio_in</name><argument_list pos:start="63:40" pos:end="63:65">(<argument pos:start="63:41" pos:end="63:51"><expr pos:start="63:41" pos:end="63:51"><call pos:start="63:41" pos:end="63:51"><name pos:start="63:41" pos:end="63:46">DEVICE</name><argument_list pos:start="63:47" pos:end="63:51">(<argument pos:start="63:48" pos:end="63:50"><expr pos:start="63:48" pos:end="63:50"><name pos:start="63:48" pos:end="63:50">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:54" pos:end="63:64"><expr pos:start="63:54" pos:end="63:64"><name pos:start="63:54" pos:end="63:64">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="65:5" pos:end="74:0">for <control pos:start="65:9" pos:end="65:33">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:28"><expr pos:start="65:17" pos:end="65:27"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:27">num_irq</name></expr>;</condition> <incr pos:start="65:30" pos:end="65:32"><expr pos:start="65:30" pos:end="65:32"><name pos:start="65:30" pos:end="65:30">i</name><operator pos:start="65:31" pos:end="65:32">++</operator></expr></incr>)</control> <block pos:start="65:35" pos:end="74:0">{<block_content pos:start="67:9" pos:end="67:43">

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:11">pic</name><index pos:start="67:12" pos:end="67:14">[<expr pos:start="67:13" pos:end="67:13"><name pos:start="67:13" pos:end="67:13">i</name></expr>]</index></name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:42"><name pos:start="67:18" pos:end="67:33">qdev_get_gpio_in</name><argument_list pos:start="67:34" pos:end="67:42">(<argument pos:start="67:35" pos:end="67:38"><expr pos:start="67:35" pos:end="67:38"><name pos:start="67:35" pos:end="67:38">nvic</name></expr></argument>, <argument pos:start="67:41" pos:end="67:41"><expr pos:start="67:41" pos:end="67:41"><name pos:start="67:41" pos:end="67:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<cpp:ifdef pos:start="73:1" pos:end="73:29">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="75:5" pos:end="78:0"><expr pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:14">big_endian</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="77:1" pos:end="77:5">#<cpp:directive pos:start="77:2" pos:end="77:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="79:5" pos:end="82:0"><expr pos:start="79:5" pos:end="79:18"><name pos:start="79:5" pos:end="79:14">big_endian</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <literal type="number" pos:start="79:18" pos:end="79:18">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:45">(<expr pos:start="85:9" pos:end="85:44"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:24">kernel_filename</name> <operator pos:start="85:26" pos:end="85:27">&amp;&amp;</operator> <operator pos:start="85:29" pos:end="85:29">!</operator><call pos:start="85:30" pos:end="85:44"><name pos:start="85:30" pos:end="85:42">qtest_enabled</name><argument_list pos:start="85:43" pos:end="85:44">()</argument_list></call></expr>)</condition> <block pos:start="85:47" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:16">

        <expr_stmt pos:start="87:9" pos:end="87:75"><expr pos:start="87:9" pos:end="87:74"><call pos:start="87:9" pos:end="87:74"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="87:74">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="87:73"><expr pos:start="87:25" pos:end="87:73"><literal type="string" pos:start="87:25" pos:end="87:73">"Guest image must be specified (using -kernel)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:16"><expr pos:start="89:9" pos:end="89:15"><call pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:12">exit</name><argument_list pos:start="89:13" pos:end="89:15">(<argument pos:start="89:14" pos:end="89:14"><expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="117:5"><if pos:start="95:5" pos:end="117:5">if <condition pos:start="95:8" pos:end="95:24">(<expr pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:23">kernel_filename</name></expr>)</condition> <block pos:start="95:26" pos:end="117:5">{<block_content pos:start="97:9" pos:end="115:9">

        <expr_stmt pos:start="97:9" pos:end="99:64"><expr pos:start="97:9" pos:end="99:63"><name pos:start="97:9" pos:end="97:18">image_size</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="99:63"><name pos:start="97:22" pos:end="97:29">load_elf</name><argument_list pos:start="97:30" pos:end="99:63">(<argument pos:start="97:31" pos:end="97:45"><expr pos:start="97:31" pos:end="97:45"><name pos:start="97:31" pos:end="97:45">kernel_filename</name></expr></argument>, <argument pos:start="97:48" pos:end="97:51"><expr pos:start="97:48" pos:end="97:51"><name pos:start="97:48" pos:end="97:51">NULL</name></expr></argument>, <argument pos:start="97:54" pos:end="97:57"><expr pos:start="97:54" pos:end="97:57"><name pos:start="97:54" pos:end="97:57">NULL</name></expr></argument>, <argument pos:start="97:60" pos:end="97:65"><expr pos:start="97:60" pos:end="97:65"><operator pos:start="97:60" pos:end="97:60">&amp;</operator><name pos:start="97:61" pos:end="97:65">entry</name></expr></argument>, <argument pos:start="97:68" pos:end="97:75"><expr pos:start="97:68" pos:end="97:75"><operator pos:start="97:68" pos:end="97:68">&amp;</operator><name pos:start="97:69" pos:end="97:75">lowaddr</name></expr></argument>,

                              <argument pos:start="99:31" pos:end="99:34"><expr pos:start="99:31" pos:end="99:34"><name pos:start="99:31" pos:end="99:34">NULL</name></expr></argument>, <argument pos:start="99:37" pos:end="99:46"><expr pos:start="99:37" pos:end="99:46"><name pos:start="99:37" pos:end="99:46">big_endian</name></expr></argument>, <argument pos:start="99:49" pos:end="99:59"><expr pos:start="99:49" pos:end="99:59"><name pos:start="99:49" pos:end="99:59">ELF_MACHINE</name></expr></argument>, <argument pos:start="99:62" pos:end="99:62"><expr pos:start="99:62" pos:end="99:62"><literal type="number" pos:start="99:62" pos:end="99:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:27">(<expr pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:22">image_size</name> <operator pos:start="101:24" pos:end="101:24">&lt;</operator> <literal type="number" pos:start="101:26" pos:end="101:26">0</literal></expr>)</condition> <block pos:start="101:29" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:24">

            <expr_stmt pos:start="103:13" pos:end="103:75"><expr pos:start="103:13" pos:end="103:74"><name pos:start="103:13" pos:end="103:22">image_size</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:74"><name pos:start="103:26" pos:end="103:44">load_image_targphys</name><argument_list pos:start="103:45" pos:end="103:74">(<argument pos:start="103:46" pos:end="103:60"><expr pos:start="103:46" pos:end="103:60"><name pos:start="103:46" pos:end="103:60">kernel_filename</name></expr></argument>, <argument pos:start="103:63" pos:end="103:63"><expr pos:start="103:63" pos:end="103:63"><literal type="number" pos:start="103:63" pos:end="103:63">0</literal></expr></argument>, <argument pos:start="103:66" pos:end="103:73"><expr pos:start="103:66" pos:end="103:73"><name pos:start="103:66" pos:end="103:73">mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:24"><expr pos:start="105:13" pos:end="105:23"><name pos:start="105:13" pos:end="105:19">lowaddr</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:27">(<expr pos:start="109:13" pos:end="109:26"><name pos:start="109:13" pos:end="109:22">image_size</name> <operator pos:start="109:24" pos:end="109:24">&lt;</operator> <literal type="number" pos:start="109:26" pos:end="109:26">0</literal></expr>)</condition> <block pos:start="109:29" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:20">

            <expr_stmt pos:start="111:13" pos:end="111:72"><expr pos:start="111:13" pos:end="111:71"><call pos:start="111:13" pos:end="111:71"><name pos:start="111:13" pos:end="111:24">error_report</name><argument_list pos:start="111:25" pos:end="111:71">(<argument pos:start="111:26" pos:end="111:53"><expr pos:start="111:26" pos:end="111:53"><literal type="string" pos:start="111:26" pos:end="111:53">"Could not load kernel '%s'"</literal></expr></argument>, <argument pos:start="111:56" pos:end="111:70"><expr pos:start="111:56" pos:end="111:70"><name pos:start="111:56" pos:end="111:70">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:20"><expr pos:start="113:13" pos:end="113:19"><call pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:16">exit</name><argument_list pos:start="113:17" pos:end="113:19">(<argument pos:start="113:18" pos:end="113:18"><expr pos:start="113:18" pos:end="113:18"><literal type="number" pos:start="113:18" pos:end="113:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="125:44">/* Hack to map an additional page of ram at the top of the address

       space.  This stops qemu complaining about executing code outside RAM

       when returning from an exception.  */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:76"><expr pos:start="127:5" pos:end="127:75"><call pos:start="127:5" pos:end="127:75"><name pos:start="127:5" pos:end="127:26">memory_region_init_ram</name><argument_list pos:start="127:27" pos:end="127:75">(<argument pos:start="127:28" pos:end="127:31"><expr pos:start="127:28" pos:end="127:31"><name pos:start="127:28" pos:end="127:31">hack</name></expr></argument>, <argument pos:start="127:34" pos:end="127:37"><expr pos:start="127:34" pos:end="127:37"><name pos:start="127:34" pos:end="127:37">NULL</name></expr></argument>, <argument pos:start="127:40" pos:end="127:52"><expr pos:start="127:40" pos:end="127:52"><literal type="string" pos:start="127:40" pos:end="127:52">"armv7m.hack"</literal></expr></argument>, <argument pos:start="127:55" pos:end="127:60"><expr pos:start="127:55" pos:end="127:60"><literal type="number" pos:start="127:55" pos:end="127:60">0x1000</literal></expr></argument>, <argument pos:start="127:63" pos:end="127:74"><expr pos:start="127:63" pos:end="127:74"><operator pos:start="127:63" pos:end="127:63">&amp;</operator><name pos:start="127:64" pos:end="127:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:38"><expr pos:start="129:5" pos:end="129:37"><call pos:start="129:5" pos:end="129:37"><name pos:start="129:5" pos:end="129:31">vmstate_register_ram_global</name><argument_list pos:start="129:32" pos:end="129:37">(<argument pos:start="129:33" pos:end="129:36"><expr pos:start="129:33" pos:end="129:36"><name pos:start="129:33" pos:end="129:36">hack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:65"><expr pos:start="131:5" pos:end="131:64"><call pos:start="131:5" pos:end="131:64"><name pos:start="131:5" pos:end="131:31">memory_region_add_subregion</name><argument_list pos:start="131:32" pos:end="131:64">(<argument pos:start="131:33" pos:end="131:45"><expr pos:start="131:33" pos:end="131:45"><name pos:start="131:33" pos:end="131:45">system_memory</name></expr></argument>, <argument pos:start="131:48" pos:end="131:57"><expr pos:start="131:48" pos:end="131:57"><literal type="number" pos:start="131:48" pos:end="131:57">0xfffff000</literal></expr></argument>, <argument pos:start="131:60" pos:end="131:63"><expr pos:start="131:60" pos:end="131:63"><name pos:start="131:60" pos:end="131:63">hack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:43"><expr pos:start="135:5" pos:end="135:42"><call pos:start="135:5" pos:end="135:42"><name pos:start="135:5" pos:end="135:23">qemu_register_reset</name><argument_list pos:start="135:24" pos:end="135:42">(<argument pos:start="135:25" pos:end="135:36"><expr pos:start="135:25" pos:end="135:36"><name pos:start="135:25" pos:end="135:36">armv7m_reset</name></expr></argument>, <argument pos:start="135:39" pos:end="135:41"><expr pos:start="135:39" pos:end="135:41"><name pos:start="135:39" pos:end="135:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="137:5" pos:end="137:15">return <expr pos:start="137:12" pos:end="137:14"><name pos:start="137:12" pos:end="137:14">pic</name></expr>;</return>

</block_content>}</block></function>
</unit>
