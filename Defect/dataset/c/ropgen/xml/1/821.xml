<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/821.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">http_connect</name><parameter_list pos:start="1:24" pos:end="3:60">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">URLContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">h</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">path</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:76"><decl pos:start="1:58" pos:end="1:76"><type pos:start="1:58" pos:end="1:76"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:76">hoststr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:40"><decl pos:start="3:25" pos:end="3:40"><type pos:start="3:25" pos:end="3:40"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">auth</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:59"><decl pos:start="3:43" pos:end="3:59"><type pos:start="3:43" pos:end="3:59"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:59">new_location</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="147:1">{<block_content pos:start="7:5" pos:end="145:36">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">HTTPContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:33">= <expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:22">h</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:33">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">post</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">err</name></decl>, <decl pos:start="9:20" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:21">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:19"><name pos:start="11:10" pos:end="11:13">line</name><index pos:start="11:14" pos:end="11:19">[<expr pos:start="11:15" pos:end="11:18"><literal type="number" pos:start="11:15" pos:end="11:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="11:22" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:8"><modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:18">auth_b64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">auth_b64_len</name> <init pos:start="15:22" pos:end="15:47">= <expr pos:start="15:24" pos:end="15:47"><call pos:start="15:24" pos:end="15:35"><name pos:start="15:24" pos:end="15:29">strlen</name><argument_list pos:start="15:30" pos:end="15:35">(<argument pos:start="15:31" pos:end="15:34"><expr pos:start="15:31" pos:end="15:34"><name pos:start="15:31" pos:end="15:34">auth</name></expr></argument>)</argument_list></call><operator pos:start="15:36" pos:end="15:36">*</operator> <literal type="number" pos:start="15:38" pos:end="15:38">4</literal> <operator pos:start="15:40" pos:end="15:40">/</operator> <literal type="number" pos:start="15:42" pos:end="15:44">3</literal> <operator pos:start="15:44" pos:end="15:44">+</operator> <literal type="number" pos:start="15:46" pos:end="15:47">12</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">off</name> <init pos:start="17:17" pos:end="17:24">= <expr pos:start="17:19" pos:end="17:24"><name pos:start="17:19" pos:end="17:24"><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:24">off</name></name></expr></init></decl>;</decl_stmt>





    <comment type="block" pos:start="23:5" pos:end="23:26">/* send http header */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:8">post</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <name pos:start="25:12" pos:end="25:19"><name pos:start="25:12" pos:end="25:12">h</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:19">flags</name></name> <operator pos:start="25:21" pos:end="25:21">&amp;</operator> <name pos:start="25:23" pos:end="25:32">URL_WRONLY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:12">auth_b64</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:38"><name pos:start="27:16" pos:end="27:24">av_malloc</name><argument_list pos:start="27:25" pos:end="27:38">(<argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">auth_b64_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:65"><expr pos:start="29:5" pos:end="29:64"><call pos:start="29:5" pos:end="29:64"><name pos:start="29:5" pos:end="29:20">av_base64_encode</name><argument_list pos:start="29:21" pos:end="29:64">(<argument pos:start="29:22" pos:end="29:29"><expr pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:29">auth_b64</name></expr></argument>, <argument pos:start="29:32" pos:end="29:43"><expr pos:start="29:32" pos:end="29:43"><name pos:start="29:32" pos:end="29:43">auth_b64_len</name></expr></argument>, <argument pos:start="29:46" pos:end="29:49"><expr pos:start="29:46" pos:end="29:49"><name pos:start="29:46" pos:end="29:49">auth</name></expr></argument>, <argument pos:start="29:52" pos:end="29:63"><expr pos:start="29:52" pos:end="29:63"><call pos:start="29:52" pos:end="29:63"><name pos:start="29:52" pos:end="29:57">strlen</name><argument_list pos:start="29:58" pos:end="29:63">(<argument pos:start="29:59" pos:end="29:62"><expr pos:start="29:59" pos:end="29:62"><name pos:start="29:59" pos:end="29:62">auth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="59:23"><expr pos:start="31:5" pos:end="59:22"><call pos:start="31:5" pos:end="59:22"><name pos:start="31:5" pos:end="31:12">snprintf</name><argument_list pos:start="31:13" pos:end="59:22">(<argument pos:start="31:14" pos:end="31:22"><expr pos:start="31:14" pos:end="31:22"><name pos:start="31:14" pos:end="31:22"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:22">buffer</name></name></expr></argument>, <argument pos:start="31:25" pos:end="31:41"><expr pos:start="31:25" pos:end="31:41"><sizeof pos:start="31:25" pos:end="31:41">sizeof<argument_list pos:start="31:31" pos:end="31:41">(<argument pos:start="31:32" pos:end="31:40"><expr pos:start="31:32" pos:end="31:40"><name pos:start="31:32" pos:end="31:40"><name pos:start="31:32" pos:end="31:32">s</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:40">buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="33:14" pos:end="47:19"><expr pos:start="33:14" pos:end="47:19"><literal type="string" pos:start="33:14" pos:end="33:33">"%s %s HTTP/1.1\r\n"</literal>

             <literal type="string" pos:start="35:14" pos:end="35:33">"User-Agent: %s\r\n"</literal>

             <literal type="string" pos:start="37:14" pos:end="37:30">"Accept: */*\r\n"</literal>

             <literal type="string" pos:start="39:14" pos:end="39:29">"Range: bytes=%"</literal><name pos:start="39:30" pos:end="39:35">PRId64</name><literal type="string" pos:start="39:36" pos:end="39:42">"-\r\n"</literal>

             <literal type="string" pos:start="41:14" pos:end="41:27">"Host: %s\r\n"</literal>

             <literal type="string" pos:start="43:14" pos:end="43:42">"Authorization: Basic %s\r\n"</literal>

             <literal type="string" pos:start="45:14" pos:end="45:36">"Connection: close\r\n"</literal>

             <literal type="string" pos:start="47:14" pos:end="47:19">"\r\n"</literal></expr></argument>,

             <argument pos:start="49:14" pos:end="49:34"><expr pos:start="49:14" pos:end="49:34"><ternary pos:start="49:14" pos:end="49:34"><condition pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:17"><name pos:start="49:14" pos:end="49:17">post</name></expr> ?</condition><then pos:start="49:21" pos:end="49:26"> <expr pos:start="49:21" pos:end="49:26"><literal type="string" pos:start="49:21" pos:end="49:26">"POST"</literal></expr> </then><else pos:start="49:28" pos:end="49:34">: <expr pos:start="49:30" pos:end="49:34"><literal type="string" pos:start="49:30" pos:end="49:34">"GET"</literal></expr></else></ternary></expr></argument>,

             <argument pos:start="51:14" pos:end="51:17"><expr pos:start="51:14" pos:end="51:17"><name pos:start="51:14" pos:end="51:17">path</name></expr></argument>,

             <argument pos:start="53:14" pos:end="53:30"><expr pos:start="53:14" pos:end="53:30"><name pos:start="53:14" pos:end="53:30">LIBAVFORMAT_IDENT</name></expr></argument>,

             <argument pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:19"><name pos:start="55:14" pos:end="55:19"><name pos:start="55:14" pos:end="55:14">s</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:19">off</name></name></expr></argument>,

             <argument pos:start="57:14" pos:end="57:20"><expr pos:start="57:14" pos:end="57:20"><name pos:start="57:14" pos:end="57:20">hoststr</name></expr></argument>,

             <argument pos:start="59:14" pos:end="59:21"><expr pos:start="59:14" pos:end="59:21"><name pos:start="59:14" pos:end="59:21">auth_b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><call pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:12">av_freep</name><argument_list pos:start="63:13" pos:end="63:23">(<argument pos:start="63:14" pos:end="63:22"><expr pos:start="63:14" pos:end="63:22"><operator pos:start="63:14" pos:end="63:14">&amp;</operator><name pos:start="63:15" pos:end="63:22">auth_b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="67:28"><if pos:start="65:5" pos:end="67:28">if <condition pos:start="65:8" pos:end="65:56">(<expr pos:start="65:9" pos:end="65:55"><call pos:start="65:9" pos:end="65:51"><name pos:start="65:9" pos:end="65:18">http_write</name><argument_list pos:start="65:19" pos:end="65:51">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">h</name></expr></argument>, <argument pos:start="65:23" pos:end="65:31"><expr pos:start="65:23" pos:end="65:31"><name pos:start="65:23" pos:end="65:31"><name pos:start="65:23" pos:end="65:23">s</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:31">buffer</name></name></expr></argument>, <argument pos:start="65:34" pos:end="65:50"><expr pos:start="65:34" pos:end="65:50"><call pos:start="65:34" pos:end="65:50"><name pos:start="65:34" pos:end="65:39">strlen</name><argument_list pos:start="65:40" pos:end="65:50">(<argument pos:start="65:41" pos:end="65:49"><expr pos:start="65:41" pos:end="65:49"><name pos:start="65:41" pos:end="65:49"><name pos:start="65:41" pos:end="65:41">s</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:49">buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="65:53" pos:end="65:53">&lt;</operator> <literal type="number" pos:start="65:55" pos:end="65:55">0</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:28"><block_content pos:start="67:9" pos:end="67:28">

        <return pos:start="67:9" pos:end="67:28">return <expr pos:start="67:16" pos:end="67:27"><call pos:start="67:16" pos:end="67:27"><name pos:start="67:16" pos:end="67:22">AVERROR</name><argument_list pos:start="67:23" pos:end="67:27">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:27">/* init input buffer */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:14">buf_ptr</name></name> <operator pos:start="73:16" pos:end="73:16">=</operator> <name pos:start="73:18" pos:end="73:26"><name pos:start="73:18" pos:end="73:18">s</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:26">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:27"><expr pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:14">buf_end</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:26"><name pos:start="75:18" pos:end="75:18">s</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:26">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:22"><expr pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:17">line_count</name></name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="number" pos:start="77:21" pos:end="77:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:15"><expr pos:start="79:5" pos:end="79:14"><name pos:start="79:5" pos:end="79:10"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:10">off</name></name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:21"><expr pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:15">filesize</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <operator pos:start="81:19" pos:end="81:19">-</operator><literal type="number" pos:start="81:20" pos:end="81:20">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:13">(<expr pos:start="83:9" pos:end="83:12"><name pos:start="83:9" pos:end="83:12">post</name></expr>)</condition> <block pos:start="83:15" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:17">

        <return pos:start="85:9" pos:end="85:17">return <expr pos:start="85:16" pos:end="85:16"><literal type="number" pos:start="85:16" pos:end="85:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:25">/* wait for header */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:13"><expr pos:start="93:5" pos:end="93:12"><name pos:start="93:5" pos:end="93:5">q</name> <operator pos:start="93:7" pos:end="93:7">=</operator> <name pos:start="93:9" pos:end="93:12">line</name></expr>;</expr_stmt>

    <for pos:start="95:5" pos:end="141:5">for<control pos:start="95:8" pos:end="95:11">(<init pos:start="95:9" pos:end="95:9">;</init><condition pos:start="95:10" pos:end="95:10">;</condition><incr/>)</control> <block pos:start="95:13" pos:end="141:5">{<block_content pos:start="97:9" pos:end="139:9">

        <expr_stmt pos:start="97:9" pos:end="97:26"><expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:10">ch</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <call pos:start="97:14" pos:end="97:25"><name pos:start="97:14" pos:end="97:22">http_getc</name><argument_list pos:start="97:23" pos:end="97:25">(<argument pos:start="97:24" pos:end="97:24"><expr pos:start="97:24" pos:end="97:24"><name pos:start="97:24" pos:end="97:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="101:32"><if pos:start="99:9" pos:end="101:32">if <condition pos:start="99:12" pos:end="99:19">(<expr pos:start="99:13" pos:end="99:18"><name pos:start="99:13" pos:end="99:14">ch</name> <operator pos:start="99:16" pos:end="99:16">&lt;</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:32"><block_content pos:start="101:13" pos:end="101:32">

            <return pos:start="101:13" pos:end="101:32">return <expr pos:start="101:20" pos:end="101:31"><call pos:start="101:20" pos:end="101:31"><name pos:start="101:20" pos:end="101:26">AVERROR</name><argument_list pos:start="101:27" pos:end="101:31">(<argument pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="103:9" pos:end="139:9"><if pos:start="103:9" pos:end="133:9">if <condition pos:start="103:12" pos:end="103:23">(<expr pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:14">ch</name> <operator pos:start="103:16" pos:end="103:17">==</operator> <literal type="char" pos:start="103:19" pos:end="103:22">'\n'</literal></expr>)</condition> <block pos:start="103:25" pos:end="133:9">{<block_content pos:start="107:13" pos:end="131:21">

            <comment type="block" pos:start="105:13" pos:end="105:30">/* process line */</comment>

            <if_stmt pos:start="107:13" pos:end="109:20"><if pos:start="107:13" pos:end="109:20">if <condition pos:start="107:16" pos:end="107:42">(<expr pos:start="107:17" pos:end="107:41"><name pos:start="107:17" pos:end="107:17">q</name> <operator pos:start="107:19" pos:end="107:19">&gt;</operator> <name pos:start="107:21" pos:end="107:24">line</name> <operator pos:start="107:26" pos:end="107:27">&amp;&amp;</operator> <name pos:start="107:29" pos:end="107:33"><name pos:start="107:29" pos:end="107:29">q</name><index pos:start="107:30" pos:end="107:33">[<expr pos:start="107:31" pos:end="107:32"><operator pos:start="107:31" pos:end="107:31">-</operator><literal type="number" pos:start="107:32" pos:end="107:32">1</literal></expr>]</index></name> <operator pos:start="107:35" pos:end="107:36">==</operator> <literal type="char" pos:start="107:38" pos:end="107:41">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:20"><block_content pos:start="109:17" pos:end="109:20">

                <expr_stmt pos:start="109:17" pos:end="109:20"><expr pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:17">q</name><operator pos:start="109:18" pos:end="109:19">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="114:0"><expr pos:start="111:13" pos:end="111:21"><operator pos:start="111:13" pos:end="111:13">*</operator><name pos:start="111:14" pos:end="111:14">q</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="char" pos:start="111:18" pos:end="111:21">'\0'</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="113:1" pos:end="113:12">#<cpp:directive pos:start="113:2" pos:end="113:6">ifdef</cpp:directive> <name pos:start="113:8" pos:end="113:12">DEBUG</name></cpp:ifdef>

            <expr_stmt pos:start="115:13" pos:end="118:0"><expr pos:start="115:13" pos:end="115:41"><call pos:start="115:13" pos:end="115:41"><name pos:start="115:13" pos:end="115:18">printf</name><argument_list pos:start="115:19" pos:end="115:41">(<argument pos:start="115:20" pos:end="115:34"><expr pos:start="115:20" pos:end="115:34"><literal type="string" pos:start="115:20" pos:end="115:34">"header='%s'\n"</literal></expr></argument>, <argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="119:13" pos:end="119:69"><expr pos:start="119:13" pos:end="119:68"><name pos:start="119:13" pos:end="119:15">err</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <call pos:start="119:19" pos:end="119:68"><name pos:start="119:19" pos:end="119:30">process_line</name><argument_list pos:start="119:31" pos:end="119:68">(<argument pos:start="119:32" pos:end="119:32"><expr pos:start="119:32" pos:end="119:32"><name pos:start="119:32" pos:end="119:32">h</name></expr></argument>, <argument pos:start="119:35" pos:end="119:38"><expr pos:start="119:35" pos:end="119:38"><name pos:start="119:35" pos:end="119:38">line</name></expr></argument>, <argument pos:start="119:41" pos:end="119:53"><expr pos:start="119:41" pos:end="119:53"><name pos:start="119:41" pos:end="119:53"><name pos:start="119:41" pos:end="119:41">s</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:53">line_count</name></name></expr></argument>, <argument pos:start="119:56" pos:end="119:67"><expr pos:start="119:56" pos:end="119:67"><name pos:start="119:56" pos:end="119:67">new_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="123:27"><if pos:start="121:13" pos:end="123:27">if <condition pos:start="121:16" pos:end="121:24">(<expr pos:start="121:17" pos:end="121:23"><name pos:start="121:17" pos:end="121:19">err</name> <operator pos:start="121:21" pos:end="121:21">&lt;</operator> <literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:27"><block_content pos:start="123:17" pos:end="123:27">

                <return pos:start="123:17" pos:end="123:27">return <expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:26">err</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="125:13" pos:end="127:22"><if pos:start="125:13" pos:end="127:22">if <condition pos:start="125:16" pos:end="125:25">(<expr pos:start="125:17" pos:end="125:24"><name pos:start="125:17" pos:end="125:19">err</name> <operator pos:start="125:21" pos:end="125:22">==</operator> <literal type="number" pos:start="125:24" pos:end="125:24">0</literal></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:22"><block_content pos:start="127:17" pos:end="127:22">

                <break pos:start="127:17" pos:end="127:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:28"><expr pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:13">s</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:25">line_count</name></name><operator pos:start="129:26" pos:end="129:27">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:21"><expr pos:start="131:13" pos:end="131:20"><name pos:start="131:13" pos:end="131:13">q</name> <operator pos:start="131:15" pos:end="131:15">=</operator> <name pos:start="131:17" pos:end="131:20">line</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="139:9">else <block pos:start="133:16" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:26">

            <if_stmt pos:start="135:13" pos:end="137:26"><if pos:start="135:13" pos:end="137:26">if <condition pos:start="135:16" pos:end="135:46">(<expr pos:start="135:17" pos:end="135:45"><operator pos:start="135:17" pos:end="135:17">(</operator><name pos:start="135:18" pos:end="135:18">q</name> <operator pos:start="135:20" pos:end="135:20">-</operator> <name pos:start="135:22" pos:end="135:25">line</name><operator pos:start="135:26" pos:end="135:26">)</operator> <operator pos:start="135:28" pos:end="135:28">&lt;</operator> <sizeof pos:start="135:30" pos:end="135:41">sizeof<argument_list pos:start="135:36" pos:end="135:41">(<argument pos:start="135:37" pos:end="135:40"><expr pos:start="135:37" pos:end="135:40"><name pos:start="135:37" pos:end="135:40">line</name></expr></argument>)</argument_list></sizeof> <operator pos:start="135:43" pos:end="135:43">-</operator> <literal type="number" pos:start="135:45" pos:end="135:45">1</literal></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:26"><block_content pos:start="137:17" pos:end="137:26">

                <expr_stmt pos:start="137:17" pos:end="137:26"><expr pos:start="137:17" pos:end="137:25"><operator pos:start="137:17" pos:end="137:17">*</operator><name pos:start="137:18" pos:end="137:18">q</name><operator pos:start="137:19" pos:end="137:20">++</operator> <operator pos:start="137:22" pos:end="137:22">=</operator> <name pos:start="137:24" pos:end="137:25">ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="145:5" pos:end="145:36">return <expr pos:start="145:12" pos:end="145:35"><ternary pos:start="145:12" pos:end="145:35"><condition pos:start="145:12" pos:end="145:28"><expr pos:start="145:12" pos:end="145:26"><operator pos:start="145:12" pos:end="145:12">(</operator><name pos:start="145:13" pos:end="145:15">off</name> <operator pos:start="145:17" pos:end="145:18">==</operator> <name pos:start="145:20" pos:end="145:25"><name pos:start="145:20" pos:end="145:20">s</name><operator pos:start="145:21" pos:end="145:22">-&gt;</operator><name pos:start="145:23" pos:end="145:25">off</name></name><operator pos:start="145:26" pos:end="145:26">)</operator></expr> ?</condition><then pos:start="145:30" pos:end="145:30"> <expr pos:start="145:30" pos:end="145:30"><literal type="number" pos:start="145:30" pos:end="145:30">0</literal></expr> </then><else pos:start="145:32" pos:end="145:35">: <expr pos:start="145:34" pos:end="145:35"><operator pos:start="145:34" pos:end="145:34">-</operator><literal type="number" pos:start="145:35" pos:end="145:35">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
