<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13687.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">test_ivshmem_single</name><parameter_list pos:start="1:32" pos:end="1:37">(<parameter pos:start="1:33" pos:end="1:36"><decl pos:start="1:33" pos:end="1:36"><type pos:start="1:33" pos:end="1:36"><name pos:start="1:33" pos:end="1:36">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:25">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">IVState</name></type> <name pos:start="5:13" pos:end="5:17">state</name></decl>, <decl pos:start="5:20" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:11"><modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:23"><name pos:start="7:14" pos:end="7:17">data</name><index pos:start="7:18" pos:end="7:23">[<expr pos:start="7:19" pos:end="7:22"><literal type="number" pos:start="7:19" pos:end="7:22">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><call pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:12">setup_vm</name><argument_list pos:start="13:13" pos:end="13:20">(<argument pos:start="13:14" pos:end="13:19"><expr pos:start="13:14" pos:end="13:19"><operator pos:start="13:14" pos:end="13:14">&amp;</operator><name pos:start="13:15" pos:end="13:19">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:5">s</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <operator pos:start="15:9" pos:end="15:9">&amp;</operator><name pos:start="15:10" pos:end="15:14">state</name></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:18">/* valid io */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:28"><expr pos:start="21:5" pos:end="21:27"><call pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:11">out_reg</name><argument_list pos:start="21:12" pos:end="21:27">(<argument pos:start="21:13" pos:end="21:13"><expr pos:start="21:13" pos:end="21:13"><name pos:start="21:13" pos:end="21:13">s</name></expr></argument>, <argument pos:start="21:16" pos:end="21:23"><expr pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:23">INTRMASK</name></expr></argument>, <argument pos:start="21:26" pos:end="21:26"><expr pos:start="21:26" pos:end="21:26"><literal type="number" pos:start="21:26" pos:end="21:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><call pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:10">in_reg</name><argument_list pos:start="23:11" pos:end="23:25">(<argument pos:start="23:12" pos:end="23:12"><expr pos:start="23:12" pos:end="23:12"><name pos:start="23:12" pos:end="23:12">s</name></expr></argument>, <argument pos:start="23:15" pos:end="23:24"><expr pos:start="23:15" pos:end="23:24"><name pos:start="23:15" pos:end="23:24">INTRSTATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:10">in_reg</name><argument_list pos:start="25:11" pos:end="25:25">(<argument pos:start="25:12" pos:end="25:12"><expr pos:start="25:12" pos:end="25:12"><name pos:start="25:12" pos:end="25:12">s</name></expr></argument>, <argument pos:start="25:15" pos:end="25:24"><expr pos:start="25:15" pos:end="25:24"><name pos:start="25:15" pos:end="25:24">IVPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:11">out_reg</name><argument_list pos:start="29:12" pos:end="29:36">(<argument pos:start="29:13" pos:end="29:13"><expr pos:start="29:13" pos:end="29:13"><name pos:start="29:13" pos:end="29:13">s</name></expr></argument>, <argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23">INTRMASK</name></expr></argument>, <argument pos:start="29:26" pos:end="29:35"><expr pos:start="29:26" pos:end="29:35"><literal type="number" pos:start="29:26" pos:end="29:35">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><call pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:20">g_assert_cmpuint</name><argument_list pos:start="31:21" pos:end="31:57">(<argument pos:start="31:22" pos:end="31:40"><expr pos:start="31:22" pos:end="31:40"><call pos:start="31:22" pos:end="31:40"><name pos:start="31:22" pos:end="31:27">in_reg</name><argument_list pos:start="31:28" pos:end="31:40">(<argument pos:start="31:29" pos:end="31:29"><expr pos:start="31:29" pos:end="31:29"><name pos:start="31:29" pos:end="31:29">s</name></expr></argument>, <argument pos:start="31:32" pos:end="31:39"><expr pos:start="31:32" pos:end="31:39"><name pos:start="31:32" pos:end="31:39">INTRMASK</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:43" pos:end="31:44"><expr pos:start="31:43" pos:end="31:44"><operator pos:start="31:43" pos:end="31:44">==</operator></expr></argument>, <argument pos:start="31:47" pos:end="31:56"><expr pos:start="31:47" pos:end="31:56"><literal type="number" pos:start="31:47" pos:end="31:56">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><call pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:11">out_reg</name><argument_list pos:start="33:12" pos:end="33:29">(<argument pos:start="33:13" pos:end="33:13"><expr pos:start="33:13" pos:end="33:13"><name pos:start="33:13" pos:end="33:13">s</name></expr></argument>, <argument pos:start="33:16" pos:end="33:25"><expr pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:25">INTRSTATUS</name></expr></argument>, <argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><literal type="number" pos:start="33:28" pos:end="33:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:46">/* XXX: intercept IRQ, not seen in resp */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><call pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:20">g_assert_cmpuint</name><argument_list pos:start="37:21" pos:end="37:50">(<argument pos:start="37:22" pos:end="37:42"><expr pos:start="37:22" pos:end="37:42"><call pos:start="37:22" pos:end="37:42"><name pos:start="37:22" pos:end="37:27">in_reg</name><argument_list pos:start="37:28" pos:end="37:42">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">s</name></expr></argument>, <argument pos:start="37:32" pos:end="37:41"><expr pos:start="37:32" pos:end="37:41"><name pos:start="37:32" pos:end="37:41">INTRSTATUS</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:45" pos:end="37:46"><expr pos:start="37:45" pos:end="37:46"><operator pos:start="37:45" pos:end="37:46">==</operator></expr></argument>, <argument pos:start="37:49" pos:end="37:49"><expr pos:start="37:49" pos:end="37:49"><literal type="number" pos:start="37:49" pos:end="37:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:20">/* invalid io */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><call pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:11">out_reg</name><argument_list pos:start="43:12" pos:end="43:29">(<argument pos:start="43:13" pos:end="43:13"><expr pos:start="43:13" pos:end="43:13"><name pos:start="43:13" pos:end="43:13">s</name></expr></argument>, <argument pos:start="43:16" pos:end="43:25"><expr pos:start="43:16" pos:end="43:25"><name pos:start="43:16" pos:end="43:25">IVPOSITION</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:34"><expr pos:start="45:5" pos:end="45:33"><call pos:start="45:5" pos:end="45:33"><name pos:start="45:5" pos:end="45:11">out_reg</name><argument_list pos:start="45:12" pos:end="45:33">(<argument pos:start="45:13" pos:end="45:13"><expr pos:start="45:13" pos:end="45:13"><name pos:start="45:13" pos:end="45:13">s</name></expr></argument>, <argument pos:start="45:16" pos:end="45:23"><expr pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:23">DOORBELL</name></expr></argument>, <argument pos:start="45:26" pos:end="45:32"><expr pos:start="45:26" pos:end="45:32"><literal type="number" pos:start="45:26" pos:end="45:26">8</literal> <operator pos:start="45:28" pos:end="45:29">&lt;&lt;</operator> <literal type="number" pos:start="45:31" pos:end="45:32">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="49:5" pos:end="53:5">for <control pos:start="49:9" pos:end="49:44">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:39"><expr pos:start="49:17" pos:end="49:38"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <call pos:start="49:21" pos:end="49:38"><name pos:start="49:21" pos:end="49:32">G_N_ELEMENTS</name><argument_list pos:start="49:33" pos:end="49:38">(<argument pos:start="49:34" pos:end="49:37"><expr pos:start="49:34" pos:end="49:37"><name pos:start="49:34" pos:end="49:37">data</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="49:41" pos:end="49:43"><expr pos:start="49:41" pos:end="49:43"><name pos:start="49:41" pos:end="49:41">i</name><operator pos:start="49:42" pos:end="49:43">++</operator></expr></incr>)</control> <block pos:start="49:46" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:20">

        <expr_stmt pos:start="51:9" pos:end="51:20"><expr pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:12">data</name><index pos:start="51:13" pos:end="51:15">[<expr pos:start="51:14" pos:end="51:14"><name pos:start="51:14" pos:end="51:14">i</name></expr>]</index></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:19">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="55:5" pos:end="55:73"><expr pos:start="55:5" pos:end="55:72"><call pos:start="55:5" pos:end="55:72"><name pos:start="55:5" pos:end="55:18">qtest_memwrite</name><argument_list pos:start="55:19" pos:end="55:72">(<argument pos:start="55:20" pos:end="55:27"><expr pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:20">s</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:27">qtest</name></name></expr></argument>, <argument pos:start="55:30" pos:end="55:51"><expr pos:start="55:30" pos:end="55:51"><operator pos:start="55:30" pos:end="55:30">(</operator><name pos:start="55:31" pos:end="55:39">uintptr_t</name><operator pos:start="55:40" pos:end="55:40">)</operator><name pos:start="55:41" pos:end="55:51"><name pos:start="55:41" pos:end="55:41">s</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:51">mem_base</name></name></expr></argument>, <argument pos:start="55:54" pos:end="55:57"><expr pos:start="55:54" pos:end="55:57"><name pos:start="55:54" pos:end="55:57">data</name></expr></argument>, <argument pos:start="55:60" pos:end="55:71"><expr pos:start="55:60" pos:end="55:71"><sizeof pos:start="55:60" pos:end="55:71">sizeof<argument_list pos:start="55:66" pos:end="55:71">(<argument pos:start="55:67" pos:end="55:70"><expr pos:start="55:67" pos:end="55:70"><name pos:start="55:67" pos:end="55:70">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="59:5" pos:end="63:5">for <control pos:start="59:9" pos:end="59:44">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:39"><expr pos:start="59:17" pos:end="59:38"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <call pos:start="59:21" pos:end="59:38"><name pos:start="59:21" pos:end="59:32">G_N_ELEMENTS</name><argument_list pos:start="59:33" pos:end="59:38">(<argument pos:start="59:34" pos:end="59:37"><expr pos:start="59:34" pos:end="59:37"><name pos:start="59:34" pos:end="59:37">data</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="59:41" pos:end="59:43"><expr pos:start="59:41" pos:end="59:43"><name pos:start="59:41" pos:end="59:41">i</name><operator pos:start="59:42" pos:end="59:43">++</operator></expr></incr>)</control> <block pos:start="59:46" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:59">

        <expr_stmt pos:start="61:9" pos:end="61:59"><expr pos:start="61:9" pos:end="61:58"><call pos:start="61:9" pos:end="61:58"><name pos:start="61:9" pos:end="61:24">g_assert_cmpuint</name><argument_list pos:start="61:25" pos:end="61:58">(<argument pos:start="61:26" pos:end="61:50"><expr pos:start="61:26" pos:end="61:50"><operator pos:start="61:26" pos:end="61:26">(</operator><operator pos:start="61:27" pos:end="61:27">(</operator><name pos:start="61:28" pos:end="61:35">uint32_t</name> <operator pos:start="61:37" pos:end="61:37">*</operator><operator pos:start="61:38" pos:end="61:38">)</operator><name pos:start="61:39" pos:end="61:46">tmpshmem</name><operator pos:start="61:47" pos:end="61:47">)</operator><index pos:start="61:48" pos:end="61:50">[<expr pos:start="61:49" pos:end="61:49"><name pos:start="61:49" pos:end="61:49">i</name></expr>]</index></expr></argument>, <argument pos:start="61:53" pos:end="61:54"><expr pos:start="61:53" pos:end="61:54"><operator pos:start="61:53" pos:end="61:54">==</operator></expr></argument>, <argument pos:start="61:57" pos:end="61:57"><expr pos:start="61:57" pos:end="61:57"><name pos:start="61:57" pos:end="61:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="67:5" pos:end="67:34"><expr pos:start="67:5" pos:end="67:33"><call pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:10">memset</name><argument_list pos:start="67:11" pos:end="67:33">(<argument pos:start="67:12" pos:end="67:15"><expr pos:start="67:12" pos:end="67:15"><name pos:start="67:12" pos:end="67:15">data</name></expr></argument>, <argument pos:start="67:18" pos:end="67:18"><expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr></argument>, <argument pos:start="67:21" pos:end="67:32"><expr pos:start="67:21" pos:end="67:32"><sizeof pos:start="67:21" pos:end="67:32">sizeof<argument_list pos:start="67:27" pos:end="67:32">(<argument pos:start="67:28" pos:end="67:31"><expr pos:start="67:28" pos:end="67:31"><name pos:start="67:28" pos:end="67:31">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:72"><expr pos:start="71:5" pos:end="71:71"><call pos:start="71:5" pos:end="71:71"><name pos:start="71:5" pos:end="71:17">qtest_memread</name><argument_list pos:start="71:18" pos:end="71:71">(<argument pos:start="71:19" pos:end="71:26"><expr pos:start="71:19" pos:end="71:26"><name pos:start="71:19" pos:end="71:26"><name pos:start="71:19" pos:end="71:19">s</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:26">qtest</name></name></expr></argument>, <argument pos:start="71:29" pos:end="71:50"><expr pos:start="71:29" pos:end="71:50"><operator pos:start="71:29" pos:end="71:29">(</operator><name pos:start="71:30" pos:end="71:38">uintptr_t</name><operator pos:start="71:39" pos:end="71:39">)</operator><name pos:start="71:40" pos:end="71:50"><name pos:start="71:40" pos:end="71:40">s</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:50">mem_base</name></name></expr></argument>, <argument pos:start="71:53" pos:end="71:56"><expr pos:start="71:53" pos:end="71:56"><name pos:start="71:53" pos:end="71:56">data</name></expr></argument>, <argument pos:start="71:59" pos:end="71:70"><expr pos:start="71:59" pos:end="71:70"><sizeof pos:start="71:59" pos:end="71:70">sizeof<argument_list pos:start="71:65" pos:end="71:70">(<argument pos:start="71:66" pos:end="71:69"><expr pos:start="71:66" pos:end="71:69"><name pos:start="71:66" pos:end="71:69">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="73:5" pos:end="77:5">for <control pos:start="73:9" pos:end="73:44">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:39"><expr pos:start="73:17" pos:end="73:38"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <call pos:start="73:21" pos:end="73:38"><name pos:start="73:21" pos:end="73:32">G_N_ELEMENTS</name><argument_list pos:start="73:33" pos:end="73:38">(<argument pos:start="73:34" pos:end="73:37"><expr pos:start="73:34" pos:end="73:37"><name pos:start="73:34" pos:end="73:37">data</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="73:41" pos:end="73:43"><expr pos:start="73:41" pos:end="73:43"><name pos:start="73:41" pos:end="73:41">i</name><operator pos:start="73:42" pos:end="73:43">++</operator></expr></incr>)</control> <block pos:start="73:46" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:41">

        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><call pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:24">g_assert_cmpuint</name><argument_list pos:start="75:25" pos:end="75:40">(<argument pos:start="75:26" pos:end="75:32"><expr pos:start="75:26" pos:end="75:32"><name pos:start="75:26" pos:end="75:32"><name pos:start="75:26" pos:end="75:29">data</name><index pos:start="75:30" pos:end="75:32">[<expr pos:start="75:31" pos:end="75:31"><name pos:start="75:31" pos:end="75:31">i</name></expr>]</index></name></expr></argument>, <argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><operator pos:start="75:35" pos:end="75:36">==</operator></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="81:5" pos:end="81:25"><expr pos:start="81:5" pos:end="81:24"><call pos:start="81:5" pos:end="81:24"><name pos:start="81:5" pos:end="81:14">qtest_quit</name><argument_list pos:start="81:15" pos:end="81:24">(<argument pos:start="81:16" pos:end="81:23"><expr pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:16">s</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:23">qtest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
