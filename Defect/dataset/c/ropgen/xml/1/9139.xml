<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9139.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">aio_bh_poll</name><parameter_list pos:start="1:16" pos:end="1:32">(<parameter pos:start="1:17" pos:end="1:31"><decl pos:start="1:17" pos:end="1:31"><type pos:start="1:17" pos:end="1:28"><name pos:start="1:17" pos:end="1:26">AioContext</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">QEMUBH</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:14">bh</name></decl>, <decl pos:start="5:17" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:12"><modifier pos:start="5:17" pos:end="5:17">*</modifier><modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">bhp</name></decl>, <decl pos:start="5:24" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:12"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:28">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:7">ctx</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:19">walking_bh</name></name><operator pos:start="11:20" pos:end="11:21">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:12"><expr pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="49:5">for <control pos:start="17:9" pos:end="17:43">(<init pos:start="17:10" pos:end="17:28"><expr pos:start="17:10" pos:end="17:27"><name pos:start="17:10" pos:end="17:11">bh</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:27"><name pos:start="17:15" pos:end="17:17">ctx</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:27">first_bh</name></name></expr>;</init> <condition pos:start="17:30" pos:end="17:32"><expr pos:start="17:30" pos:end="17:31"><name pos:start="17:30" pos:end="17:31">bh</name></expr>;</condition> <incr pos:start="17:34" pos:end="17:42"><expr pos:start="17:34" pos:end="17:42"><name pos:start="17:34" pos:end="17:35">bh</name> <operator pos:start="17:37" pos:end="17:37">=</operator> <name pos:start="17:39" pos:end="17:42">next</name></expr></incr>)</control> <block pos:start="17:45" pos:end="49:5">{<block_content pos:start="21:9" pos:end="47:9">

        <comment type="block" pos:start="19:9" pos:end="19:77">/* Make sure that fetching bh happens before accessing its members */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:35"><expr pos:start="21:9" pos:end="21:34"><call pos:start="21:9" pos:end="21:34"><name pos:start="21:9" pos:end="21:32">smp_read_barrier_depends</name><argument_list pos:start="21:33" pos:end="21:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:24"><expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:12">next</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:23"><name pos:start="23:16" pos:end="23:17">bh</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:23">next</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="25:9" pos:end="35:11">/* The atomic_xchg is paired with the one in qemu_bh_schedule.  The

         * implicit memory barrier ensures that the callback sees all writes

         * done by the scheduling thread.  It also ensures that the scheduling

         * thread sees the zero before bh-&gt;cb has run, and thus will call

         * aio_notify again if necessary.

         */</comment>

        <if_stmt pos:start="37:9" pos:end="47:9"><if pos:start="37:9" pos:end="47:9">if <condition pos:start="37:12" pos:end="37:59">(<expr pos:start="37:13" pos:end="37:58"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:24"><name pos:start="37:14" pos:end="37:15">bh</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:24">deleted</name></name> <operator pos:start="37:26" pos:end="37:27">&amp;&amp;</operator> <call pos:start="37:29" pos:end="37:58"><name pos:start="37:29" pos:end="37:39">atomic_xchg</name><argument_list pos:start="37:40" pos:end="37:58">(<argument pos:start="37:41" pos:end="37:54"><expr pos:start="37:41" pos:end="37:54"><operator pos:start="37:41" pos:end="37:41">&amp;</operator><name pos:start="37:42" pos:end="37:54"><name pos:start="37:42" pos:end="37:43">bh</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:54">scheduled</name></name></expr></argument>, <argument pos:start="37:57" pos:end="37:57"><expr pos:start="37:57" pos:end="37:57"><literal type="number" pos:start="37:57" pos:end="37:57">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:61" pos:end="47:9">{<block_content pos:start="39:13" pos:end="45:31">

            <if_stmt pos:start="39:13" pos:end="41:24"><if pos:start="39:13" pos:end="41:24">if <condition pos:start="39:16" pos:end="39:26">(<expr pos:start="39:17" pos:end="39:25"><operator pos:start="39:17" pos:end="39:17">!</operator><name pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:19">bh</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:25">idle</name></name></expr>)</condition><block type="pseudo" pos:start="41:17" pos:end="41:24"><block_content pos:start="41:17" pos:end="41:24">

                <expr_stmt pos:start="41:17" pos:end="41:24"><expr pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:19">ret</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <literal type="number" pos:start="41:23" pos:end="41:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:14">bh</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:20">idle</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:31"><expr pos:start="45:13" pos:end="45:30"><call pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:14">bh</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:18">cb</name></name><argument_list pos:start="45:19" pos:end="45:30">(<argument pos:start="45:20" pos:end="45:29"><expr pos:start="45:20" pos:end="45:29"><name pos:start="45:20" pos:end="45:29"><name pos:start="45:20" pos:end="45:21">bh</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:29">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:7">ctx</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:19">walking_bh</name></name><operator pos:start="53:20" pos:end="53:21">--</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:28">/* remove deleted bhs */</comment>

    <if_stmt pos:start="59:5" pos:end="85:5"><if pos:start="59:5" pos:end="85:5">if <condition pos:start="59:8" pos:end="59:25">(<expr pos:start="59:9" pos:end="59:24"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:24"><name pos:start="59:10" pos:end="59:12">ctx</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:24">walking_bh</name></name></expr>)</condition> <block pos:start="59:27" pos:end="85:5">{<block_content pos:start="61:9" pos:end="83:41">

        <expr_stmt pos:start="61:9" pos:end="61:39"><expr pos:start="61:9" pos:end="61:38"><call pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:23">qemu_mutex_lock</name><argument_list pos:start="61:24" pos:end="61:38">(<argument pos:start="61:25" pos:end="61:37"><expr pos:start="61:25" pos:end="61:37"><operator pos:start="61:25" pos:end="61:25">&amp;</operator><name pos:start="61:26" pos:end="61:37"><name pos:start="61:26" pos:end="61:28">ctx</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:37">bh_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:29"><expr pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:11">bhp</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">&amp;</operator><name pos:start="63:16" pos:end="63:28"><name pos:start="63:16" pos:end="63:18">ctx</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:28">first_bh</name></name></expr>;</expr_stmt>

        <while pos:start="65:9" pos:end="81:9">while <condition pos:start="65:15" pos:end="65:20">(<expr pos:start="65:16" pos:end="65:19"><operator pos:start="65:16" pos:end="65:16">*</operator><name pos:start="65:17" pos:end="65:19">bhp</name></expr>)</condition> <block pos:start="65:22" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:13">

            <expr_stmt pos:start="67:13" pos:end="67:22"><expr pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:14">bh</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <operator pos:start="67:18" pos:end="67:18">*</operator><name pos:start="67:19" pos:end="67:21">bhp</name></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="79:13"><if pos:start="69:13" pos:end="75:13">if <condition pos:start="69:16" pos:end="69:28">(<expr pos:start="69:17" pos:end="69:27"><name pos:start="69:17" pos:end="69:27"><name pos:start="69:17" pos:end="69:18">bh</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:27">deleted</name></name></expr>)</condition> <block pos:start="69:30" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:27">

                <expr_stmt pos:start="71:17" pos:end="71:32"><expr pos:start="71:17" pos:end="71:31"><operator pos:start="71:17" pos:end="71:17">*</operator><name pos:start="71:18" pos:end="71:20">bhp</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:31"><name pos:start="71:24" pos:end="71:25">bh</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:31">next</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:27"><expr pos:start="73:17" pos:end="73:26"><call pos:start="73:17" pos:end="73:26"><name pos:start="73:17" pos:end="73:22">g_free</name><argument_list pos:start="73:23" pos:end="73:26">(<argument pos:start="73:24" pos:end="73:25"><expr pos:start="73:24" pos:end="73:25"><name pos:start="73:24" pos:end="73:25">bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="79:13">else <block pos:start="75:20" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:32">

                <expr_stmt pos:start="77:17" pos:end="77:32"><expr pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:19">bhp</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <operator pos:start="77:23" pos:end="77:23">&amp;</operator><name pos:start="77:24" pos:end="77:31"><name pos:start="77:24" pos:end="77:25">bh</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:31">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="83:9" pos:end="83:41"><expr pos:start="83:9" pos:end="83:40"><call pos:start="83:9" pos:end="83:40"><name pos:start="83:9" pos:end="83:25">qemu_mutex_unlock</name><argument_list pos:start="83:26" pos:end="83:40">(<argument pos:start="83:27" pos:end="83:39"><expr pos:start="83:27" pos:end="83:39"><operator pos:start="83:27" pos:end="83:27">&amp;</operator><name pos:start="83:28" pos:end="83:39"><name pos:start="83:28" pos:end="83:30">ctx</name><operator pos:start="83:31" pos:end="83:32">-&gt;</operator><name pos:start="83:33" pos:end="83:39">bh_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="89:5" pos:end="89:15">return <expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
