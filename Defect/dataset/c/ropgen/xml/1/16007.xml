<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16007.c" pos:tabs="8"><function pos:start="1:1" pos:end="289:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">musicpal_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="289:1">{<block_content pos:start="5:5" pos:end="287:42">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">ARMCPU</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">qemu_irq</name></type> <name pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:16">pic</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:24">i2c_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">DeviceState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:24">lcd_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">DeviceState</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:24">key_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:15">DeviceState</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:27">wm8750_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">SysBusDevice</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:16"><decl pos:start="29:5" pos:end="29:15"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">I2CBus</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:15">i2c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:10"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:29"><decl pos:start="33:5" pos:end="33:28"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:12">unsigned</name> <name pos:start="33:14" pos:end="33:17">long</name></type> <name pos:start="33:19" pos:end="33:28">flash_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:21"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:13">DriveInfo</name> <modifier pos:start="35:15" pos:end="35:15">*</modifier></type><name pos:start="35:16" pos:end="35:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:58"><decl pos:start="37:5" pos:end="37:57"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">MemoryRegion</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:35">address_space_mem</name> <init pos:start="37:37" pos:end="37:57">= <expr pos:start="37:39" pos:end="37:57"><call pos:start="37:39" pos:end="37:57"><name pos:start="37:39" pos:end="37:55">get_system_memory</name><argument_list pos:start="37:56" pos:end="37:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:47"><decl pos:start="39:5" pos:end="39:46"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MemoryRegion</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:21">ram</name> <init pos:start="39:23" pos:end="39:46">= <expr pos:start="39:25" pos:end="39:46"><call pos:start="39:25" pos:end="39:46"><name pos:start="39:25" pos:end="39:29">g_new</name><argument_list pos:start="39:30" pos:end="39:46">(<argument pos:start="39:31" pos:end="39:42"><expr pos:start="39:31" pos:end="39:42"><name pos:start="39:31" pos:end="39:42">MemoryRegion</name></expr></argument>, <argument pos:start="39:45" pos:end="39:45"><expr pos:start="39:45" pos:end="39:45"><literal type="number" pos:start="39:45" pos:end="39:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:48"><decl pos:start="41:5" pos:end="41:47"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MemoryRegion</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:22">sram</name> <init pos:start="41:24" pos:end="41:47">= <expr pos:start="41:26" pos:end="41:47"><call pos:start="41:26" pos:end="41:47"><name pos:start="41:26" pos:end="41:30">g_new</name><argument_list pos:start="41:31" pos:end="41:47">(<argument pos:start="41:32" pos:end="41:43"><expr pos:start="41:32" pos:end="41:43"><name pos:start="41:32" pos:end="41:43">MemoryRegion</name></expr></argument>, <argument pos:start="41:46" pos:end="41:46"><expr pos:start="41:46" pos:end="41:46"><literal type="number" pos:start="41:46" pos:end="41:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:18">cpu_model</name></expr>)</condition> <block pos:start="45:21" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:29">

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:17">cpu_model</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="string" pos:start="47:21" pos:end="47:28">"arm926"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:61"><expr pos:start="51:5" pos:end="51:60"><name pos:start="51:5" pos:end="51:7">cpu</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:60"><name pos:start="51:11" pos:end="51:17">ARM_CPU</name><argument_list pos:start="51:18" pos:end="51:60">(<argument pos:start="51:19" pos:end="51:59"><expr pos:start="51:19" pos:end="51:59"><call pos:start="51:19" pos:end="51:59"><name pos:start="51:19" pos:end="51:34">cpu_generic_init</name><argument_list pos:start="51:35" pos:end="51:59">(<argument pos:start="51:36" pos:end="51:47"><expr pos:start="51:36" pos:end="51:47"><name pos:start="51:36" pos:end="51:47">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="51:50" pos:end="51:58"><expr pos:start="51:50" pos:end="51:58"><name pos:start="51:50" pos:end="51:58">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">cpu</name></expr>)</condition> <block pos:start="53:15" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:59"><expr pos:start="55:9" pos:end="55:58"><call pos:start="55:9" pos:end="55:58"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:58">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:57"><expr pos:start="55:25" pos:end="55:57"><literal type="string" pos:start="55:25" pos:end="55:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:58">/* For now we use a fixed - the original - RAM size */</comment>

    <expr_stmt pos:start="65:5" pos:end="67:62"><expr pos:start="65:5" pos:end="67:61"><call pos:start="65:5" pos:end="67:61"><name pos:start="65:5" pos:end="65:40">memory_region_allocate_system_memory</name><argument_list pos:start="65:41" pos:end="67:61">(<argument pos:start="65:42" pos:end="65:44"><expr pos:start="65:42" pos:end="65:44"><name pos:start="65:42" pos:end="65:44">ram</name></expr></argument>, <argument pos:start="65:47" pos:end="65:50"><expr pos:start="65:47" pos:end="65:50"><name pos:start="65:47" pos:end="65:50">NULL</name></expr></argument>, <argument pos:start="65:53" pos:end="65:66"><expr pos:start="65:53" pos:end="65:66"><literal type="string" pos:start="65:53" pos:end="65:66">"musicpal.ram"</literal></expr></argument>,

                                         <argument pos:start="67:42" pos:end="67:60"><expr pos:start="67:42" pos:end="67:60"><name pos:start="67:42" pos:end="67:60">MP_RAM_DEFAULT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:59"><expr pos:start="69:5" pos:end="69:58"><call pos:start="69:5" pos:end="69:58"><name pos:start="69:5" pos:end="69:31">memory_region_add_subregion</name><argument_list pos:start="69:32" pos:end="69:58">(<argument pos:start="69:33" pos:end="69:49"><expr pos:start="69:33" pos:end="69:49"><name pos:start="69:33" pos:end="69:49">address_space_mem</name></expr></argument>, <argument pos:start="69:52" pos:end="69:52"><expr pos:start="69:52" pos:end="69:52"><literal type="number" pos:start="69:52" pos:end="69:52">0</literal></expr></argument>, <argument pos:start="69:55" pos:end="69:57"><expr pos:start="69:55" pos:end="69:57"><name pos:start="69:55" pos:end="69:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="75:41"><expr pos:start="73:5" pos:end="75:40"><call pos:start="73:5" pos:end="75:40"><name pos:start="73:5" pos:end="73:26">memory_region_init_ram</name><argument_list pos:start="73:27" pos:end="75:40">(<argument pos:start="73:28" pos:end="73:31"><expr pos:start="73:28" pos:end="73:31"><name pos:start="73:28" pos:end="73:31">sram</name></expr></argument>, <argument pos:start="73:34" pos:end="73:37"><expr pos:start="73:34" pos:end="73:37"><name pos:start="73:34" pos:end="73:37">NULL</name></expr></argument>, <argument pos:start="73:40" pos:end="73:54"><expr pos:start="73:40" pos:end="73:54"><literal type="string" pos:start="73:40" pos:end="73:54">"musicpal.sram"</literal></expr></argument>, <argument pos:start="73:57" pos:end="73:68"><expr pos:start="73:57" pos:end="73:68"><name pos:start="73:57" pos:end="73:68">MP_SRAM_SIZE</name></expr></argument>,

                           <argument pos:start="75:28" pos:end="75:39"><expr pos:start="75:28" pos:end="75:39"><operator pos:start="75:28" pos:end="75:28">&amp;</operator><name pos:start="75:29" pos:end="75:39">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:71"><expr pos:start="77:5" pos:end="77:70"><call pos:start="77:5" pos:end="77:70"><name pos:start="77:5" pos:end="77:31">memory_region_add_subregion</name><argument_list pos:start="77:32" pos:end="77:70">(<argument pos:start="77:33" pos:end="77:49"><expr pos:start="77:33" pos:end="77:49"><name pos:start="77:33" pos:end="77:49">address_space_mem</name></expr></argument>, <argument pos:start="77:52" pos:end="77:63"><expr pos:start="77:52" pos:end="77:63"><name pos:start="77:52" pos:end="77:63">MP_SRAM_BASE</name></expr></argument>, <argument pos:start="77:66" pos:end="77:69"><expr pos:start="77:66" pos:end="77:69"><name pos:start="77:66" pos:end="77:69">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="83:75"><expr pos:start="81:5" pos:end="83:74"><name pos:start="81:5" pos:end="81:7">dev</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="83:74"><name pos:start="81:11" pos:end="81:30">sysbus_create_simple</name><argument_list pos:start="81:31" pos:end="83:74">(<argument pos:start="81:32" pos:end="81:49"><expr pos:start="81:32" pos:end="81:49"><name pos:start="81:32" pos:end="81:49">TYPE_MV88W8618_PIC</name></expr></argument>, <argument pos:start="81:52" pos:end="81:62"><expr pos:start="81:52" pos:end="81:62"><name pos:start="81:52" pos:end="81:62">MP_PIC_BASE</name></expr></argument>,

                               <argument pos:start="83:32" pos:end="83:73"><expr pos:start="83:32" pos:end="83:73"><call pos:start="83:32" pos:end="83:73"><name pos:start="83:32" pos:end="83:47">qdev_get_gpio_in</name><argument_list pos:start="83:48" pos:end="83:73">(<argument pos:start="83:49" pos:end="83:59"><expr pos:start="83:49" pos:end="83:59"><call pos:start="83:49" pos:end="83:59"><name pos:start="83:49" pos:end="83:54">DEVICE</name><argument_list pos:start="83:55" pos:end="83:59">(<argument pos:start="83:56" pos:end="83:58"><expr pos:start="83:56" pos:end="83:58"><name pos:start="83:56" pos:end="83:58">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:62" pos:end="83:72"><expr pos:start="83:62" pos:end="83:72"><name pos:start="83:62" pos:end="83:72">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="85:5" pos:end="89:5">for <control pos:start="85:9" pos:end="85:28">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:23"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <literal type="number" pos:start="85:21" pos:end="85:22">32</literal></expr>;</condition> <incr pos:start="85:25" pos:end="85:27"><expr pos:start="85:25" pos:end="85:27"><name pos:start="85:25" pos:end="85:25">i</name><operator pos:start="85:26" pos:end="85:27">++</operator></expr></incr>)</control> <block pos:start="85:30" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:42">

        <expr_stmt pos:start="87:9" pos:end="87:42"><expr pos:start="87:9" pos:end="87:41"><name pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:11">pic</name><index pos:start="87:12" pos:end="87:14">[<expr pos:start="87:13" pos:end="87:13"><name pos:start="87:13" pos:end="87:13">i</name></expr>]</index></name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:41"><name pos:start="87:18" pos:end="87:33">qdev_get_gpio_in</name><argument_list pos:start="87:34" pos:end="87:41">(<argument pos:start="87:35" pos:end="87:37"><expr pos:start="87:35" pos:end="87:37"><name pos:start="87:35" pos:end="87:37">dev</name></expr></argument>, <argument pos:start="87:40" pos:end="87:40"><expr pos:start="87:40" pos:end="87:40"><name pos:start="87:40" pos:end="87:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="91:5" pos:end="95:52"><expr pos:start="91:5" pos:end="95:51"><call pos:start="91:5" pos:end="95:51"><name pos:start="91:5" pos:end="91:25">sysbus_create_varargs</name><argument_list pos:start="91:26" pos:end="95:51">(<argument pos:start="91:27" pos:end="91:44"><expr pos:start="91:27" pos:end="91:44"><name pos:start="91:27" pos:end="91:44">TYPE_MV88W8618_PIT</name></expr></argument>, <argument pos:start="91:47" pos:end="91:57"><expr pos:start="91:47" pos:end="91:57"><name pos:start="91:47" pos:end="91:57">MP_PIT_BASE</name></expr></argument>, <argument pos:start="91:60" pos:end="91:77"><expr pos:start="91:60" pos:end="91:77"><name pos:start="91:60" pos:end="91:77"><name pos:start="91:60" pos:end="91:62">pic</name><index pos:start="91:63" pos:end="91:77">[<expr pos:start="91:64" pos:end="91:76"><name pos:start="91:64" pos:end="91:76">MP_TIMER1_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="93:27" pos:end="93:44"><expr pos:start="93:27" pos:end="93:44"><name pos:start="93:27" pos:end="93:44"><name pos:start="93:27" pos:end="93:29">pic</name><index pos:start="93:30" pos:end="93:44">[<expr pos:start="93:31" pos:end="93:43"><name pos:start="93:31" pos:end="93:43">MP_TIMER2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="93:47" pos:end="93:64"><expr pos:start="93:47" pos:end="93:64"><name pos:start="93:47" pos:end="93:64"><name pos:start="93:47" pos:end="93:49">pic</name><index pos:start="93:50" pos:end="93:64">[<expr pos:start="93:51" pos:end="93:63"><name pos:start="93:51" pos:end="93:63">MP_TIMER3_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="95:27" pos:end="95:44"><expr pos:start="95:27" pos:end="95:44"><name pos:start="95:27" pos:end="95:44"><name pos:start="95:27" pos:end="95:29">pic</name><index pos:start="95:30" pos:end="95:44">[<expr pos:start="95:31" pos:end="95:43"><name pos:start="95:31" pos:end="95:43">MP_TIMER4_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="95:47" pos:end="95:50"><expr pos:start="95:47" pos:end="95:50"><name pos:start="95:47" pos:end="95:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:22">(<expr pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:18">serial_hds</name><index pos:start="99:19" pos:end="99:21">[<expr pos:start="99:20" pos:end="99:20"><literal type="number" pos:start="99:20" pos:end="99:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="99:24" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:69">

        <expr_stmt pos:start="101:9" pos:end="103:69"><expr pos:start="101:9" pos:end="103:68"><call pos:start="101:9" pos:end="103:68"><name pos:start="101:9" pos:end="101:22">serial_mm_init</name><argument_list pos:start="101:23" pos:end="103:68">(<argument pos:start="101:24" pos:end="101:40"><expr pos:start="101:24" pos:end="101:40"><name pos:start="101:24" pos:end="101:40">address_space_mem</name></expr></argument>, <argument pos:start="101:43" pos:end="101:55"><expr pos:start="101:43" pos:end="101:55"><name pos:start="101:43" pos:end="101:55">MP_UART1_BASE</name></expr></argument>, <argument pos:start="101:58" pos:end="101:58"><expr pos:start="101:58" pos:end="101:58"><literal type="number" pos:start="101:58" pos:end="101:58">2</literal></expr></argument>, <argument pos:start="101:61" pos:end="101:77"><expr pos:start="101:61" pos:end="101:77"><name pos:start="101:61" pos:end="101:77"><name pos:start="101:61" pos:end="101:63">pic</name><index pos:start="101:64" pos:end="101:77">[<expr pos:start="101:65" pos:end="101:76"><name pos:start="101:65" pos:end="101:76">MP_UART1_IRQ</name></expr>]</index></name></expr></argument>,

                       <argument pos:start="103:24" pos:end="103:30"><expr pos:start="103:24" pos:end="103:30"><literal type="number" pos:start="103:24" pos:end="103:30">1825000</literal></expr></argument>, <argument pos:start="103:33" pos:end="103:45"><expr pos:start="103:33" pos:end="103:45"><name pos:start="103:33" pos:end="103:45"><name pos:start="103:33" pos:end="103:42">serial_hds</name><index pos:start="103:43" pos:end="103:45">[<expr pos:start="103:44" pos:end="103:44"><literal type="number" pos:start="103:44" pos:end="103:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:48" pos:end="103:67"><expr pos:start="103:48" pos:end="103:67"><name pos:start="103:48" pos:end="103:67">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:22">(<expr pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:18">serial_hds</name><index pos:start="107:19" pos:end="107:21">[<expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="107:24" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:69">

        <expr_stmt pos:start="109:9" pos:end="111:69"><expr pos:start="109:9" pos:end="111:68"><call pos:start="109:9" pos:end="111:68"><name pos:start="109:9" pos:end="109:22">serial_mm_init</name><argument_list pos:start="109:23" pos:end="111:68">(<argument pos:start="109:24" pos:end="109:40"><expr pos:start="109:24" pos:end="109:40"><name pos:start="109:24" pos:end="109:40">address_space_mem</name></expr></argument>, <argument pos:start="109:43" pos:end="109:55"><expr pos:start="109:43" pos:end="109:55"><name pos:start="109:43" pos:end="109:55">MP_UART2_BASE</name></expr></argument>, <argument pos:start="109:58" pos:end="109:58"><expr pos:start="109:58" pos:end="109:58"><literal type="number" pos:start="109:58" pos:end="109:58">2</literal></expr></argument>, <argument pos:start="109:61" pos:end="109:77"><expr pos:start="109:61" pos:end="109:77"><name pos:start="109:61" pos:end="109:77"><name pos:start="109:61" pos:end="109:63">pic</name><index pos:start="109:64" pos:end="109:77">[<expr pos:start="109:65" pos:end="109:76"><name pos:start="109:65" pos:end="109:76">MP_UART2_IRQ</name></expr>]</index></name></expr></argument>,

                       <argument pos:start="111:24" pos:end="111:30"><expr pos:start="111:24" pos:end="111:30"><literal type="number" pos:start="111:24" pos:end="111:30">1825000</literal></expr></argument>, <argument pos:start="111:33" pos:end="111:45"><expr pos:start="111:33" pos:end="111:45"><name pos:start="111:33" pos:end="111:45"><name pos:start="111:33" pos:end="111:42">serial_hds</name><index pos:start="111:43" pos:end="111:45">[<expr pos:start="111:44" pos:end="111:44"><literal type="number" pos:start="111:44" pos:end="111:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="111:48" pos:end="111:67"><expr pos:start="111:48" pos:end="111:67"><name pos:start="111:48" pos:end="111:67">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:24">/* Register flash */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:39"><expr pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:9">dinfo</name> <operator pos:start="119:11" pos:end="119:11">=</operator> <call pos:start="119:13" pos:end="119:38"><name pos:start="119:13" pos:end="119:21">drive_get</name><argument_list pos:start="119:22" pos:end="119:38">(<argument pos:start="119:23" pos:end="119:31"><expr pos:start="119:23" pos:end="119:31"><name pos:start="119:23" pos:end="119:31">IF_PFLASH</name></expr></argument>, <argument pos:start="119:34" pos:end="119:34"><expr pos:start="119:34" pos:end="119:34"><literal type="number" pos:start="119:34" pos:end="119:34">0</literal></expr></argument>, <argument pos:start="119:37" pos:end="119:37"><expr pos:start="119:37" pos:end="119:37"><literal type="number" pos:start="119:37" pos:end="119:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="183:5"><if pos:start="121:5" pos:end="183:5">if <condition pos:start="121:8" pos:end="121:14">(<expr pos:start="121:9" pos:end="121:13"><name pos:start="121:9" pos:end="121:13">dinfo</name></expr>)</condition> <block pos:start="121:16" pos:end="183:5">{<block_content pos:start="123:9" pos:end="180:0">

        <decl_stmt pos:start="123:9" pos:end="123:55"><decl pos:start="123:9" pos:end="123:54"><type pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:20">BlockBackend</name> <modifier pos:start="123:22" pos:end="123:22">*</modifier></type><name pos:start="123:23" pos:end="123:25">blk</name> <init pos:start="123:27" pos:end="123:54">= <expr pos:start="123:29" pos:end="123:54"><call pos:start="123:29" pos:end="123:54"><name pos:start="123:29" pos:end="123:47">blk_by_legacy_dinfo</name><argument_list pos:start="123:48" pos:end="123:54">(<argument pos:start="123:49" pos:end="123:53"><expr pos:start="123:49" pos:end="123:53"><name pos:start="123:49" pos:end="123:53">dinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:40"><expr pos:start="127:9" pos:end="127:39"><name pos:start="127:9" pos:end="127:18">flash_size</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:39"><name pos:start="127:22" pos:end="127:34">blk_getlength</name><argument_list pos:start="127:35" pos:end="127:39">(<argument pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:38">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="152:0"><if pos:start="129:9" pos:end="152:0">if <condition pos:start="129:12" pos:end="131:39">(<expr pos:start="129:13" pos:end="131:38"><name pos:start="129:13" pos:end="129:22">flash_size</name> <operator pos:start="129:24" pos:end="129:25">!=</operator> <literal type="number" pos:start="129:27" pos:end="129:27">8</literal><operator pos:start="129:28" pos:end="129:28">*</operator><literal type="number" pos:start="129:29" pos:end="129:32">1024</literal><operator pos:start="129:33" pos:end="129:33">*</operator><literal type="number" pos:start="129:34" pos:end="129:37">1024</literal> <operator pos:start="129:39" pos:end="129:40">&amp;&amp;</operator> <name pos:start="129:42" pos:end="129:51">flash_size</name> <operator pos:start="129:53" pos:end="129:54">!=</operator> <literal type="number" pos:start="129:56" pos:end="129:57">16</literal><operator pos:start="129:58" pos:end="129:58">*</operator><literal type="number" pos:start="129:59" pos:end="129:62">1024</literal><operator pos:start="129:63" pos:end="129:63">*</operator><literal type="number" pos:start="129:64" pos:end="129:67">1024</literal> <operator pos:start="129:69" pos:end="129:70">&amp;&amp;</operator>

            <name pos:start="131:13" pos:end="131:22">flash_size</name> <operator pos:start="131:24" pos:end="131:25">!=</operator> <literal type="number" pos:start="131:27" pos:end="131:28">32</literal><operator pos:start="131:29" pos:end="131:29">*</operator><literal type="number" pos:start="131:30" pos:end="131:33">1024</literal><operator pos:start="131:34" pos:end="131:34">*</operator><literal type="number" pos:start="131:35" pos:end="131:38">1024</literal></expr>)</condition> <block pos:start="131:41" pos:end="152:0">{<block_content pos:start="133:13" pos:end="135:20">

            <expr_stmt pos:start="133:13" pos:end="133:58"><expr pos:start="133:13" pos:end="133:57"><call pos:start="133:13" pos:end="133:57"><name pos:start="133:13" pos:end="133:19">fprintf</name><argument_list pos:start="133:20" pos:end="133:57">(<argument pos:start="133:21" pos:end="133:26"><expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:26">stderr</name></expr></argument>, <argument pos:start="133:29" pos:end="133:56"><expr pos:start="133:29" pos:end="133:56"><literal type="string" pos:start="133:29" pos:end="133:56">"Invalid flash image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:20"><expr pos:start="135:13" pos:end="135:19"><call pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:16">exit</name><argument_list pos:start="135:17" pos:end="135:19">(<argument pos:start="135:18" pos:end="135:18"><expr pos:start="135:18" pos:end="135:18"><literal type="number" pos:start="135:18" pos:end="135:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="141:9" pos:end="149:11">/*

         * The original U-Boot accesses the flash at 0xFE000000 instead of

         * 0xFF800000 (if there is 8 MB flash). So remap flash access if the

         * image is smaller than 32 MB.

         */</comment>

<cpp:ifdef pos:start="151:1" pos:end="151:29">#<cpp:directive pos:start="151:2" pos:end="151:6">ifdef</cpp:directive> <name pos:start="151:8" pos:end="151:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="153:9" pos:end="166:0"><expr pos:start="153:9" pos:end="163:48"><call pos:start="153:9" pos:end="163:48"><name pos:start="153:9" pos:end="153:29">pflash_cfi02_register</name><argument_list pos:start="153:30" pos:end="163:48">(<argument pos:start="153:31" pos:end="153:62"><expr pos:start="153:31" pos:end="153:62"><literal type="number" pos:start="153:31" pos:end="153:45">0x100000000ULL</literal><operator pos:start="153:45" pos:end="153:45">-</operator><name pos:start="153:46" pos:end="153:62">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="153:65" pos:end="153:68"><expr pos:start="153:65" pos:end="153:68"><name pos:start="153:65" pos:end="153:68">NULL</name></expr></argument>,

                              <argument pos:start="155:31" pos:end="155:46"><expr pos:start="155:31" pos:end="155:46"><literal type="string" pos:start="155:31" pos:end="155:46">"musicpal.flash"</literal></expr></argument>, <argument pos:start="155:49" pos:end="155:58"><expr pos:start="155:49" pos:end="155:58"><name pos:start="155:49" pos:end="155:58">flash_size</name></expr></argument>,

                              <argument pos:start="157:31" pos:end="157:33"><expr pos:start="157:31" pos:end="157:33"><name pos:start="157:31" pos:end="157:33">blk</name></expr></argument>, <argument pos:start="157:36" pos:end="157:42"><expr pos:start="157:36" pos:end="157:42"><literal type="number" pos:start="157:36" pos:end="157:42">0x10000</literal></expr></argument>, <argument pos:start="157:45" pos:end="157:71"><expr pos:start="157:45" pos:end="157:71"><operator pos:start="157:45" pos:end="157:45">(</operator><name pos:start="157:46" pos:end="157:55">flash_size</name> <operator pos:start="157:57" pos:end="157:57">+</operator> <literal type="number" pos:start="157:59" pos:end="157:64">0xffff</literal><operator pos:start="157:65" pos:end="157:65">)</operator> <operator pos:start="157:67" pos:end="157:68">&gt;&gt;</operator> <literal type="number" pos:start="157:70" pos:end="157:71">16</literal></expr></argument>,

                              <argument pos:start="159:31" pos:end="159:60"><expr pos:start="159:31" pos:end="159:60"><name pos:start="159:31" pos:end="159:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="159:49" pos:end="159:49">/</operator> <name pos:start="159:51" pos:end="159:60">flash_size</name></expr></argument>,

                              <argument pos:start="161:31" pos:end="161:31"><expr pos:start="161:31" pos:end="161:31"><literal type="number" pos:start="161:31" pos:end="161:31">2</literal></expr></argument>, <argument pos:start="161:34" pos:end="161:39"><expr pos:start="161:34" pos:end="161:39"><literal type="number" pos:start="161:34" pos:end="161:39">0x00BF</literal></expr></argument>, <argument pos:start="161:42" pos:end="161:47"><expr pos:start="161:42" pos:end="161:47"><literal type="number" pos:start="161:42" pos:end="161:47">0x236D</literal></expr></argument>, <argument pos:start="161:50" pos:end="161:55"><expr pos:start="161:50" pos:end="161:55"><literal type="number" pos:start="161:50" pos:end="161:55">0x0000</literal></expr></argument>, <argument pos:start="161:58" pos:end="161:63"><expr pos:start="161:58" pos:end="161:63"><literal type="number" pos:start="161:58" pos:end="161:63">0x0000</literal></expr></argument>,

                              <argument pos:start="163:31" pos:end="163:36"><expr pos:start="163:31" pos:end="163:36"><literal type="number" pos:start="163:31" pos:end="163:36">0x5555</literal></expr></argument>, <argument pos:start="163:39" pos:end="163:44"><expr pos:start="163:39" pos:end="163:44"><literal type="number" pos:start="163:39" pos:end="163:44">0x2AAA</literal></expr></argument>, <argument pos:start="163:47" pos:end="163:47"><expr pos:start="163:47" pos:end="163:47"><literal type="number" pos:start="163:47" pos:end="163:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="165:1" pos:end="165:5">#<cpp:directive pos:start="165:2" pos:end="165:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="167:9" pos:end="180:0"><expr pos:start="167:9" pos:end="177:48"><call pos:start="167:9" pos:end="177:48"><name pos:start="167:9" pos:end="167:29">pflash_cfi02_register</name><argument_list pos:start="167:30" pos:end="177:48">(<argument pos:start="167:31" pos:end="167:62"><expr pos:start="167:31" pos:end="167:62"><literal type="number" pos:start="167:31" pos:end="167:45">0x100000000ULL</literal><operator pos:start="167:45" pos:end="167:45">-</operator><name pos:start="167:46" pos:end="167:62">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="167:65" pos:end="167:68"><expr pos:start="167:65" pos:end="167:68"><name pos:start="167:65" pos:end="167:68">NULL</name></expr></argument>,

                              <argument pos:start="169:31" pos:end="169:46"><expr pos:start="169:31" pos:end="169:46"><literal type="string" pos:start="169:31" pos:end="169:46">"musicpal.flash"</literal></expr></argument>, <argument pos:start="169:49" pos:end="169:58"><expr pos:start="169:49" pos:end="169:58"><name pos:start="169:49" pos:end="169:58">flash_size</name></expr></argument>,

                              <argument pos:start="171:31" pos:end="171:33"><expr pos:start="171:31" pos:end="171:33"><name pos:start="171:31" pos:end="171:33">blk</name></expr></argument>, <argument pos:start="171:36" pos:end="171:42"><expr pos:start="171:36" pos:end="171:42"><literal type="number" pos:start="171:36" pos:end="171:42">0x10000</literal></expr></argument>, <argument pos:start="171:45" pos:end="171:71"><expr pos:start="171:45" pos:end="171:71"><operator pos:start="171:45" pos:end="171:45">(</operator><name pos:start="171:46" pos:end="171:55">flash_size</name> <operator pos:start="171:57" pos:end="171:57">+</operator> <literal type="number" pos:start="171:59" pos:end="171:64">0xffff</literal><operator pos:start="171:65" pos:end="171:65">)</operator> <operator pos:start="171:67" pos:end="171:68">&gt;&gt;</operator> <literal type="number" pos:start="171:70" pos:end="171:71">16</literal></expr></argument>,

                              <argument pos:start="173:31" pos:end="173:60"><expr pos:start="173:31" pos:end="173:60"><name pos:start="173:31" pos:end="173:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="173:49" pos:end="173:49">/</operator> <name pos:start="173:51" pos:end="173:60">flash_size</name></expr></argument>,

                              <argument pos:start="175:31" pos:end="175:31"><expr pos:start="175:31" pos:end="175:31"><literal type="number" pos:start="175:31" pos:end="175:31">2</literal></expr></argument>, <argument pos:start="175:34" pos:end="175:39"><expr pos:start="175:34" pos:end="175:39"><literal type="number" pos:start="175:34" pos:end="175:39">0x00BF</literal></expr></argument>, <argument pos:start="175:42" pos:end="175:47"><expr pos:start="175:42" pos:end="175:47"><literal type="number" pos:start="175:42" pos:end="175:47">0x236D</literal></expr></argument>, <argument pos:start="175:50" pos:end="175:55"><expr pos:start="175:50" pos:end="175:55"><literal type="number" pos:start="175:50" pos:end="175:55">0x0000</literal></expr></argument>, <argument pos:start="175:58" pos:end="175:63"><expr pos:start="175:58" pos:end="175:63"><literal type="number" pos:start="175:58" pos:end="175:63">0x0000</literal></expr></argument>,

                              <argument pos:start="177:31" pos:end="177:36"><expr pos:start="177:31" pos:end="177:36"><literal type="number" pos:start="177:31" pos:end="177:36">0x5555</literal></expr></argument>, <argument pos:start="177:39" pos:end="177:44"><expr pos:start="177:39" pos:end="177:44"><literal type="number" pos:start="177:39" pos:end="177:44">0x2AAA</literal></expr></argument>, <argument pos:start="177:47" pos:end="177:47"><expr pos:start="177:47" pos:end="177:47"><literal type="number" pos:start="177:47" pos:end="177:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>



    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:74"><expr pos:start="185:5" pos:end="185:73"><call pos:start="185:5" pos:end="185:73"><name pos:start="185:5" pos:end="185:24">sysbus_create_simple</name><argument_list pos:start="185:25" pos:end="185:73">(<argument pos:start="185:26" pos:end="185:48"><expr pos:start="185:26" pos:end="185:48"><name pos:start="185:26" pos:end="185:48">TYPE_MV88W8618_FLASHCFG</name></expr></argument>, <argument pos:start="185:51" pos:end="185:66"><expr pos:start="185:51" pos:end="185:66"><name pos:start="185:51" pos:end="185:66">MP_FLASHCFG_BASE</name></expr></argument>, <argument pos:start="185:69" pos:end="185:72"><expr pos:start="185:69" pos:end="185:72"><name pos:start="185:69" pos:end="185:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:52"><expr pos:start="189:5" pos:end="189:51"><call pos:start="189:5" pos:end="189:51"><name pos:start="189:5" pos:end="189:24">qemu_check_nic_model</name><argument_list pos:start="189:25" pos:end="189:51">(<argument pos:start="189:26" pos:end="189:37"><expr pos:start="189:26" pos:end="189:37"><operator pos:start="189:26" pos:end="189:26">&amp;</operator><name pos:start="189:27" pos:end="189:37"><name pos:start="189:27" pos:end="189:34">nd_table</name><index pos:start="189:35" pos:end="189:37">[<expr pos:start="189:36" pos:end="189:36"><literal type="number" pos:start="189:36" pos:end="189:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="189:40" pos:end="189:50"><expr pos:start="189:40" pos:end="189:50"><literal type="string" pos:start="189:40" pos:end="189:50">"mv88w8618"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:48"><expr pos:start="191:5" pos:end="191:47"><name pos:start="191:5" pos:end="191:7">dev</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <call pos:start="191:11" pos:end="191:47"><name pos:start="191:11" pos:end="191:21">qdev_create</name><argument_list pos:start="191:22" pos:end="191:47">(<argument pos:start="191:23" pos:end="191:26"><expr pos:start="191:23" pos:end="191:26"><name pos:start="191:23" pos:end="191:26">NULL</name></expr></argument>, <argument pos:start="191:29" pos:end="191:46"><expr pos:start="191:29" pos:end="191:46"><name pos:start="191:29" pos:end="191:46">TYPE_MV88W8618_ETH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:47"><expr pos:start="193:5" pos:end="193:46"><call pos:start="193:5" pos:end="193:46"><name pos:start="193:5" pos:end="193:27">qdev_set_nic_properties</name><argument_list pos:start="193:28" pos:end="193:46">(<argument pos:start="193:29" pos:end="193:31"><expr pos:start="193:29" pos:end="193:31"><name pos:start="193:29" pos:end="193:31">dev</name></expr></argument>, <argument pos:start="193:34" pos:end="193:45"><expr pos:start="193:34" pos:end="193:45"><operator pos:start="193:34" pos:end="193:34">&amp;</operator><name pos:start="193:35" pos:end="193:45"><name pos:start="193:35" pos:end="193:42">nd_table</name><index pos:start="193:43" pos:end="193:45">[<expr pos:start="193:44" pos:end="193:44"><literal type="number" pos:start="193:44" pos:end="193:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:26"><expr pos:start="195:5" pos:end="195:25"><call pos:start="195:5" pos:end="195:25"><name pos:start="195:5" pos:end="195:20">qdev_init_nofail</name><argument_list pos:start="195:21" pos:end="195:25">(<argument pos:start="195:22" pos:end="195:24"><expr pos:start="195:22" pos:end="195:24"><name pos:start="195:22" pos:end="195:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:57"><expr pos:start="197:5" pos:end="197:56"><call pos:start="197:5" pos:end="197:56"><name pos:start="197:5" pos:end="197:19">sysbus_mmio_map</name><argument_list pos:start="197:20" pos:end="197:56">(<argument pos:start="197:21" pos:end="197:39"><expr pos:start="197:21" pos:end="197:39"><call pos:start="197:21" pos:end="197:39"><name pos:start="197:21" pos:end="197:34">SYS_BUS_DEVICE</name><argument_list pos:start="197:35" pos:end="197:39">(<argument pos:start="197:36" pos:end="197:38"><expr pos:start="197:36" pos:end="197:38"><name pos:start="197:36" pos:end="197:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="197:42" pos:end="197:42"><expr pos:start="197:42" pos:end="197:42"><literal type="number" pos:start="197:42" pos:end="197:42">0</literal></expr></argument>, <argument pos:start="197:45" pos:end="197:55"><expr pos:start="197:45" pos:end="197:55"><name pos:start="197:45" pos:end="197:55">MP_ETH_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:64"><expr pos:start="199:5" pos:end="199:63"><call pos:start="199:5" pos:end="199:63"><name pos:start="199:5" pos:end="199:22">sysbus_connect_irq</name><argument_list pos:start="199:23" pos:end="199:63">(<argument pos:start="199:24" pos:end="199:42"><expr pos:start="199:24" pos:end="199:42"><call pos:start="199:24" pos:end="199:42"><name pos:start="199:24" pos:end="199:37">SYS_BUS_DEVICE</name><argument_list pos:start="199:38" pos:end="199:42">(<argument pos:start="199:39" pos:end="199:41"><expr pos:start="199:39" pos:end="199:41"><name pos:start="199:39" pos:end="199:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:45" pos:end="199:45"><expr pos:start="199:45" pos:end="199:45"><literal type="number" pos:start="199:45" pos:end="199:45">0</literal></expr></argument>, <argument pos:start="199:48" pos:end="199:62"><expr pos:start="199:48" pos:end="199:62"><name pos:start="199:48" pos:end="199:62"><name pos:start="199:48" pos:end="199:50">pic</name><index pos:start="199:51" pos:end="199:62">[<expr pos:start="199:52" pos:end="199:61"><name pos:start="199:52" pos:end="199:61">MP_ETH_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:63"><expr pos:start="203:5" pos:end="203:62"><call pos:start="203:5" pos:end="203:62"><name pos:start="203:5" pos:end="203:24">sysbus_create_simple</name><argument_list pos:start="203:25" pos:end="203:62">(<argument pos:start="203:26" pos:end="203:41"><expr pos:start="203:26" pos:end="203:41"><literal type="string" pos:start="203:26" pos:end="203:41">"mv88w8618_wlan"</literal></expr></argument>, <argument pos:start="203:44" pos:end="203:55"><expr pos:start="203:44" pos:end="203:55"><name pos:start="203:44" pos:end="203:55">MP_WLAN_BASE</name></expr></argument>, <argument pos:start="203:58" pos:end="203:61"><expr pos:start="203:58" pos:end="203:61"><name pos:start="203:58" pos:end="203:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:65"><expr pos:start="207:5" pos:end="207:64"><call pos:start="207:5" pos:end="207:64"><name pos:start="207:5" pos:end="207:24">sysbus_create_simple</name><argument_list pos:start="207:25" pos:end="207:64">(<argument pos:start="207:26" pos:end="207:43"><expr pos:start="207:26" pos:end="207:43"><name pos:start="207:26" pos:end="207:43">TYPE_MUSICPAL_MISC</name></expr></argument>, <argument pos:start="207:46" pos:end="207:57"><expr pos:start="207:46" pos:end="207:57"><name pos:start="207:46" pos:end="207:57">MP_MISC_BASE</name></expr></argument>, <argument pos:start="207:60" pos:end="207:63"><expr pos:start="207:60" pos:end="207:63"><name pos:start="207:60" pos:end="207:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="211:5" pos:end="213:49"><expr pos:start="211:5" pos:end="213:48"><name pos:start="211:5" pos:end="211:7">dev</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <call pos:start="211:11" pos:end="213:48"><name pos:start="211:11" pos:end="211:30">sysbus_create_simple</name><argument_list pos:start="211:31" pos:end="213:48">(<argument pos:start="211:32" pos:end="211:49"><expr pos:start="211:32" pos:end="211:49"><name pos:start="211:32" pos:end="211:49">TYPE_MUSICPAL_GPIO</name></expr></argument>, <argument pos:start="211:52" pos:end="211:63"><expr pos:start="211:52" pos:end="211:63"><name pos:start="211:52" pos:end="211:63">MP_GPIO_BASE</name></expr></argument>,

                               <argument pos:start="213:32" pos:end="213:47"><expr pos:start="213:32" pos:end="213:47"><name pos:start="213:32" pos:end="213:47"><name pos:start="213:32" pos:end="213:34">pic</name><index pos:start="213:35" pos:end="213:47">[<expr pos:start="213:36" pos:end="213:46"><name pos:start="213:36" pos:end="213:46">MP_GPIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:57"><expr pos:start="215:5" pos:end="215:56"><name pos:start="215:5" pos:end="215:11">i2c_dev</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <call pos:start="215:15" pos:end="215:56"><name pos:start="215:15" pos:end="215:34">sysbus_create_simple</name><argument_list pos:start="215:35" pos:end="215:56">(<argument pos:start="215:36" pos:end="215:45"><expr pos:start="215:36" pos:end="215:45"><literal type="string" pos:start="215:36" pos:end="215:45">"gpio_i2c"</literal></expr></argument>, <argument pos:start="215:48" pos:end="215:49"><expr pos:start="215:48" pos:end="215:49"><operator pos:start="215:48" pos:end="215:48">-</operator><literal type="number" pos:start="215:49" pos:end="215:49">1</literal></expr></argument>, <argument pos:start="215:52" pos:end="215:55"><expr pos:start="215:52" pos:end="215:55"><name pos:start="215:52" pos:end="215:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:55"><expr pos:start="217:5" pos:end="217:54"><name pos:start="217:5" pos:end="217:7">i2c</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <operator pos:start="217:11" pos:end="217:11">(</operator><name pos:start="217:12" pos:end="217:17">I2CBus</name> <operator pos:start="217:19" pos:end="217:19">*</operator><operator pos:start="217:20" pos:end="217:20">)</operator><call pos:start="217:21" pos:end="217:54"><name pos:start="217:21" pos:end="217:38">qdev_get_child_bus</name><argument_list pos:start="217:39" pos:end="217:54">(<argument pos:start="217:40" pos:end="217:46"><expr pos:start="217:40" pos:end="217:46"><name pos:start="217:40" pos:end="217:46">i2c_dev</name></expr></argument>, <argument pos:start="217:49" pos:end="217:53"><expr pos:start="217:49" pos:end="217:53"><literal type="string" pos:start="217:49" pos:end="217:53">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:73"><expr pos:start="221:5" pos:end="221:72"><name pos:start="221:5" pos:end="221:11">lcd_dev</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <call pos:start="221:15" pos:end="221:72"><name pos:start="221:15" pos:end="221:34">sysbus_create_simple</name><argument_list pos:start="221:35" pos:end="221:72">(<argument pos:start="221:36" pos:end="221:52"><expr pos:start="221:36" pos:end="221:52"><name pos:start="221:36" pos:end="221:52">TYPE_MUSICPAL_LCD</name></expr></argument>, <argument pos:start="221:55" pos:end="221:65"><expr pos:start="221:55" pos:end="221:65"><name pos:start="221:55" pos:end="221:65">MP_LCD_BASE</name></expr></argument>, <argument pos:start="221:68" pos:end="221:71"><expr pos:start="221:68" pos:end="221:71"><name pos:start="221:68" pos:end="221:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:64"><expr pos:start="223:5" pos:end="223:63"><name pos:start="223:5" pos:end="223:11">key_dev</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="223:63"><name pos:start="223:15" pos:end="223:34">sysbus_create_simple</name><argument_list pos:start="223:35" pos:end="223:63">(<argument pos:start="223:36" pos:end="223:52"><expr pos:start="223:36" pos:end="223:52"><name pos:start="223:36" pos:end="223:52">TYPE_MUSICPAL_KEY</name></expr></argument>, <argument pos:start="223:55" pos:end="223:56"><expr pos:start="223:55" pos:end="223:56"><operator pos:start="223:55" pos:end="223:55">-</operator><literal type="number" pos:start="223:56" pos:end="223:56">1</literal></expr></argument>, <argument pos:start="223:59" pos:end="223:62"><expr pos:start="223:59" pos:end="223:62"><name pos:start="223:59" pos:end="223:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:23">/* I2C read data */</comment>

    <expr_stmt pos:start="229:5" pos:end="231:71"><expr pos:start="229:5" pos:end="231:70"><call pos:start="229:5" pos:end="231:70"><name pos:start="229:5" pos:end="229:25">qdev_connect_gpio_out</name><argument_list pos:start="229:26" pos:end="231:70">(<argument pos:start="229:27" pos:end="229:33"><expr pos:start="229:27" pos:end="229:33"><name pos:start="229:27" pos:end="229:33">i2c_dev</name></expr></argument>, <argument pos:start="229:36" pos:end="229:36"><expr pos:start="229:36" pos:end="229:36"><literal type="number" pos:start="229:36" pos:end="229:36">0</literal></expr></argument>,

                          <argument pos:start="231:27" pos:end="231:69"><expr pos:start="231:27" pos:end="231:69"><call pos:start="231:27" pos:end="231:69"><name pos:start="231:27" pos:end="231:42">qdev_get_gpio_in</name><argument_list pos:start="231:43" pos:end="231:69">(<argument pos:start="231:44" pos:end="231:46"><expr pos:start="231:44" pos:end="231:46"><name pos:start="231:44" pos:end="231:46">dev</name></expr></argument>, <argument pos:start="231:49" pos:end="231:68"><expr pos:start="231:49" pos:end="231:68"><name pos:start="231:49" pos:end="231:68">MP_GPIO_I2C_DATA_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="233:5" pos:end="233:18">/* I2C data */</comment>

    <expr_stmt pos:start="235:5" pos:end="235:64"><expr pos:start="235:5" pos:end="235:63"><call pos:start="235:5" pos:end="235:63"><name pos:start="235:5" pos:end="235:25">qdev_connect_gpio_out</name><argument_list pos:start="235:26" pos:end="235:63">(<argument pos:start="235:27" pos:end="235:29"><expr pos:start="235:27" pos:end="235:29"><name pos:start="235:27" pos:end="235:29">dev</name></expr></argument>, <argument pos:start="235:32" pos:end="235:32"><expr pos:start="235:32" pos:end="235:32"><literal type="number" pos:start="235:32" pos:end="235:32">3</literal></expr></argument>, <argument pos:start="235:35" pos:end="235:62"><expr pos:start="235:35" pos:end="235:62"><call pos:start="235:35" pos:end="235:62"><name pos:start="235:35" pos:end="235:50">qdev_get_gpio_in</name><argument_list pos:start="235:51" pos:end="235:62">(<argument pos:start="235:52" pos:end="235:58"><expr pos:start="235:52" pos:end="235:58"><name pos:start="235:52" pos:end="235:58">i2c_dev</name></expr></argument>, <argument pos:start="235:61" pos:end="235:61"><expr pos:start="235:61" pos:end="235:61"><literal type="number" pos:start="235:61" pos:end="235:61">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="237:5" pos:end="237:19">/* I2C clock */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:64"><expr pos:start="239:5" pos:end="239:63"><call pos:start="239:5" pos:end="239:63"><name pos:start="239:5" pos:end="239:25">qdev_connect_gpio_out</name><argument_list pos:start="239:26" pos:end="239:63">(<argument pos:start="239:27" pos:end="239:29"><expr pos:start="239:27" pos:end="239:29"><name pos:start="239:27" pos:end="239:29">dev</name></expr></argument>, <argument pos:start="239:32" pos:end="239:32"><expr pos:start="239:32" pos:end="239:32"><literal type="number" pos:start="239:32" pos:end="239:32">4</literal></expr></argument>, <argument pos:start="239:35" pos:end="239:62"><expr pos:start="239:35" pos:end="239:62"><call pos:start="239:35" pos:end="239:62"><name pos:start="239:35" pos:end="239:50">qdev_get_gpio_in</name><argument_list pos:start="239:51" pos:end="239:62">(<argument pos:start="239:52" pos:end="239:58"><expr pos:start="239:52" pos:end="239:58"><name pos:start="239:52" pos:end="239:58">i2c_dev</name></expr></argument>, <argument pos:start="239:61" pos:end="239:61"><expr pos:start="239:61" pos:end="239:61"><literal type="number" pos:start="239:61" pos:end="239:61">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="243:5" pos:end="247:5">for <control pos:start="243:9" pos:end="243:27">(<init pos:start="243:10" pos:end="243:15"><expr pos:start="243:10" pos:end="243:14"><name pos:start="243:10" pos:end="243:10">i</name> <operator pos:start="243:12" pos:end="243:12">=</operator> <literal type="number" pos:start="243:14" pos:end="243:14">0</literal></expr>;</init> <condition pos:start="243:17" pos:end="243:22"><expr pos:start="243:17" pos:end="243:21"><name pos:start="243:17" pos:end="243:17">i</name> <operator pos:start="243:19" pos:end="243:19">&lt;</operator> <literal type="number" pos:start="243:21" pos:end="243:21">3</literal></expr>;</condition> <incr pos:start="243:24" pos:end="243:26"><expr pos:start="243:24" pos:end="243:26"><name pos:start="243:24" pos:end="243:24">i</name><operator pos:start="243:25" pos:end="243:26">++</operator></expr></incr>)</control> <block pos:start="243:29" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:68">

        <expr_stmt pos:start="245:9" pos:end="245:68"><expr pos:start="245:9" pos:end="245:67"><call pos:start="245:9" pos:end="245:67"><name pos:start="245:9" pos:end="245:29">qdev_connect_gpio_out</name><argument_list pos:start="245:30" pos:end="245:67">(<argument pos:start="245:31" pos:end="245:33"><expr pos:start="245:31" pos:end="245:33"><name pos:start="245:31" pos:end="245:33">dev</name></expr></argument>, <argument pos:start="245:36" pos:end="245:36"><expr pos:start="245:36" pos:end="245:36"><name pos:start="245:36" pos:end="245:36">i</name></expr></argument>, <argument pos:start="245:39" pos:end="245:66"><expr pos:start="245:39" pos:end="245:66"><call pos:start="245:39" pos:end="245:66"><name pos:start="245:39" pos:end="245:54">qdev_get_gpio_in</name><argument_list pos:start="245:55" pos:end="245:66">(<argument pos:start="245:56" pos:end="245:62"><expr pos:start="245:56" pos:end="245:62"><name pos:start="245:56" pos:end="245:62">lcd_dev</name></expr></argument>, <argument pos:start="245:65" pos:end="245:65"><expr pos:start="245:65" pos:end="245:65"><name pos:start="245:65" pos:end="245:65">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="249:5" pos:end="253:5">for <control pos:start="249:9" pos:end="249:27">(<init pos:start="249:10" pos:end="249:15"><expr pos:start="249:10" pos:end="249:14"><name pos:start="249:10" pos:end="249:10">i</name> <operator pos:start="249:12" pos:end="249:12">=</operator> <literal type="number" pos:start="249:14" pos:end="249:14">0</literal></expr>;</init> <condition pos:start="249:17" pos:end="249:22"><expr pos:start="249:17" pos:end="249:21"><name pos:start="249:17" pos:end="249:17">i</name> <operator pos:start="249:19" pos:end="249:19">&lt;</operator> <literal type="number" pos:start="249:21" pos:end="249:21">4</literal></expr>;</condition> <incr pos:start="249:24" pos:end="249:26"><expr pos:start="249:24" pos:end="249:26"><name pos:start="249:24" pos:end="249:24">i</name><operator pos:start="249:25" pos:end="249:26">++</operator></expr></incr>)</control> <block pos:start="249:29" pos:end="253:5">{<block_content pos:start="251:9" pos:end="251:72">

        <expr_stmt pos:start="251:9" pos:end="251:72"><expr pos:start="251:9" pos:end="251:71"><call pos:start="251:9" pos:end="251:71"><name pos:start="251:9" pos:end="251:29">qdev_connect_gpio_out</name><argument_list pos:start="251:30" pos:end="251:71">(<argument pos:start="251:31" pos:end="251:37"><expr pos:start="251:31" pos:end="251:37"><name pos:start="251:31" pos:end="251:37">key_dev</name></expr></argument>, <argument pos:start="251:40" pos:end="251:40"><expr pos:start="251:40" pos:end="251:40"><name pos:start="251:40" pos:end="251:40">i</name></expr></argument>, <argument pos:start="251:43" pos:end="251:70"><expr pos:start="251:43" pos:end="251:70"><call pos:start="251:43" pos:end="251:70"><name pos:start="251:43" pos:end="251:58">qdev_get_gpio_in</name><argument_list pos:start="251:59" pos:end="251:70">(<argument pos:start="251:60" pos:end="251:62"><expr pos:start="251:60" pos:end="251:62"><name pos:start="251:60" pos:end="251:62">dev</name></expr></argument>, <argument pos:start="251:65" pos:end="251:69"><expr pos:start="251:65" pos:end="251:69"><name pos:start="251:65" pos:end="251:65">i</name> <operator pos:start="251:67" pos:end="251:67">+</operator> <literal type="number" pos:start="251:69" pos:end="251:69">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="255:5" pos:end="259:5">for <control pos:start="255:9" pos:end="255:27">(<init pos:start="255:10" pos:end="255:15"><expr pos:start="255:10" pos:end="255:14"><name pos:start="255:10" pos:end="255:10">i</name> <operator pos:start="255:12" pos:end="255:12">=</operator> <literal type="number" pos:start="255:14" pos:end="255:14">4</literal></expr>;</init> <condition pos:start="255:17" pos:end="255:22"><expr pos:start="255:17" pos:end="255:21"><name pos:start="255:17" pos:end="255:17">i</name> <operator pos:start="255:19" pos:end="255:19">&lt;</operator> <literal type="number" pos:start="255:21" pos:end="255:21">8</literal></expr>;</condition> <incr pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:24">i</name><operator pos:start="255:25" pos:end="255:26">++</operator></expr></incr>)</control> <block pos:start="255:29" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:73">

        <expr_stmt pos:start="257:9" pos:end="257:73"><expr pos:start="257:9" pos:end="257:72"><call pos:start="257:9" pos:end="257:72"><name pos:start="257:9" pos:end="257:29">qdev_connect_gpio_out</name><argument_list pos:start="257:30" pos:end="257:72">(<argument pos:start="257:31" pos:end="257:37"><expr pos:start="257:31" pos:end="257:37"><name pos:start="257:31" pos:end="257:37">key_dev</name></expr></argument>, <argument pos:start="257:40" pos:end="257:40"><expr pos:start="257:40" pos:end="257:40"><name pos:start="257:40" pos:end="257:40">i</name></expr></argument>, <argument pos:start="257:43" pos:end="257:71"><expr pos:start="257:43" pos:end="257:71"><call pos:start="257:43" pos:end="257:71"><name pos:start="257:43" pos:end="257:58">qdev_get_gpio_in</name><argument_list pos:start="257:59" pos:end="257:71">(<argument pos:start="257:60" pos:end="257:62"><expr pos:start="257:60" pos:end="257:62"><name pos:start="257:60" pos:end="257:62">dev</name></expr></argument>, <argument pos:start="257:65" pos:end="257:70"><expr pos:start="257:65" pos:end="257:70"><name pos:start="257:65" pos:end="257:65">i</name> <operator pos:start="257:67" pos:end="257:67">+</operator> <literal type="number" pos:start="257:69" pos:end="257:70">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="263:5" pos:end="263:61"><expr pos:start="263:5" pos:end="263:60"><name pos:start="263:5" pos:end="263:14">wm8750_dev</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <call pos:start="263:18" pos:end="263:60"><name pos:start="263:18" pos:end="263:33">i2c_create_slave</name><argument_list pos:start="263:34" pos:end="263:60">(<argument pos:start="263:35" pos:end="263:37"><expr pos:start="263:35" pos:end="263:37"><name pos:start="263:35" pos:end="263:37">i2c</name></expr></argument>, <argument pos:start="263:40" pos:end="263:47"><expr pos:start="263:40" pos:end="263:47"><literal type="string" pos:start="263:40" pos:end="263:47">"wm8750"</literal></expr></argument>, <argument pos:start="263:50" pos:end="263:59"><expr pos:start="263:50" pos:end="263:59"><name pos:start="263:50" pos:end="263:59">MP_WM_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:47"><expr pos:start="265:5" pos:end="265:46"><name pos:start="265:5" pos:end="265:7">dev</name> <operator pos:start="265:9" pos:end="265:9">=</operator> <call pos:start="265:11" pos:end="265:46"><name pos:start="265:11" pos:end="265:21">qdev_create</name><argument_list pos:start="265:22" pos:end="265:46">(<argument pos:start="265:23" pos:end="265:26"><expr pos:start="265:23" pos:end="265:26"><name pos:start="265:23" pos:end="265:26">NULL</name></expr></argument>, <argument pos:start="265:29" pos:end="265:45"><expr pos:start="265:29" pos:end="265:45"><literal type="string" pos:start="265:29" pos:end="265:45">"mv88w8618_audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:28"><expr pos:start="267:5" pos:end="267:27"><name pos:start="267:5" pos:end="267:5">s</name> <operator pos:start="267:7" pos:end="267:7">=</operator> <call pos:start="267:9" pos:end="267:27"><name pos:start="267:9" pos:end="267:22">SYS_BUS_DEVICE</name><argument_list pos:start="267:23" pos:end="267:27">(<argument pos:start="267:24" pos:end="267:26"><expr pos:start="267:24" pos:end="267:26"><name pos:start="267:24" pos:end="267:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:49"><expr pos:start="269:5" pos:end="269:48"><call pos:start="269:5" pos:end="269:48"><name pos:start="269:5" pos:end="269:21">qdev_prop_set_ptr</name><argument_list pos:start="269:22" pos:end="269:48">(<argument pos:start="269:23" pos:end="269:25"><expr pos:start="269:23" pos:end="269:25"><name pos:start="269:23" pos:end="269:25">dev</name></expr></argument>, <argument pos:start="269:28" pos:end="269:35"><expr pos:start="269:28" pos:end="269:35"><literal type="string" pos:start="269:28" pos:end="269:35">"wm8750"</literal></expr></argument>, <argument pos:start="269:38" pos:end="269:47"><expr pos:start="269:38" pos:end="269:47"><name pos:start="269:38" pos:end="269:47">wm8750_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:26"><expr pos:start="271:5" pos:end="271:25"><call pos:start="271:5" pos:end="271:25"><name pos:start="271:5" pos:end="271:20">qdev_init_nofail</name><argument_list pos:start="271:21" pos:end="271:25">(<argument pos:start="271:22" pos:end="271:24"><expr pos:start="271:22" pos:end="271:24"><name pos:start="271:22" pos:end="271:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:41"><expr pos:start="273:5" pos:end="273:40"><call pos:start="273:5" pos:end="273:40"><name pos:start="273:5" pos:end="273:19">sysbus_mmio_map</name><argument_list pos:start="273:20" pos:end="273:40">(<argument pos:start="273:21" pos:end="273:21"><expr pos:start="273:21" pos:end="273:21"><name pos:start="273:21" pos:end="273:21">s</name></expr></argument>, <argument pos:start="273:24" pos:end="273:24"><expr pos:start="273:24" pos:end="273:24"><literal type="number" pos:start="273:24" pos:end="273:24">0</literal></expr></argument>, <argument pos:start="273:27" pos:end="273:39"><expr pos:start="273:27" pos:end="273:39"><name pos:start="273:27" pos:end="273:39">MP_AUDIO_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:48"><expr pos:start="275:5" pos:end="275:47"><call pos:start="275:5" pos:end="275:47"><name pos:start="275:5" pos:end="275:22">sysbus_connect_irq</name><argument_list pos:start="275:23" pos:end="275:47">(<argument pos:start="275:24" pos:end="275:24"><expr pos:start="275:24" pos:end="275:24"><name pos:start="275:24" pos:end="275:24">s</name></expr></argument>, <argument pos:start="275:27" pos:end="275:27"><expr pos:start="275:27" pos:end="275:27"><literal type="number" pos:start="275:27" pos:end="275:27">0</literal></expr></argument>, <argument pos:start="275:30" pos:end="275:46"><expr pos:start="275:30" pos:end="275:46"><name pos:start="275:30" pos:end="275:46"><name pos:start="275:30" pos:end="275:32">pic</name><index pos:start="275:33" pos:end="275:46">[<expr pos:start="275:34" pos:end="275:45"><name pos:start="275:34" pos:end="275:45">MP_AUDIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:50"><expr pos:start="279:5" pos:end="279:49"><name pos:start="279:5" pos:end="279:27"><name pos:start="279:5" pos:end="279:18">musicpal_binfo</name><operator pos:start="279:19" pos:end="279:19">.</operator><name pos:start="279:20" pos:end="279:27">ram_size</name></name> <operator pos:start="279:29" pos:end="279:29">=</operator> <name pos:start="279:31" pos:end="279:49">MP_RAM_DEFAULT_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:53"><expr pos:start="281:5" pos:end="281:52"><name pos:start="281:5" pos:end="281:34"><name pos:start="281:5" pos:end="281:18">musicpal_binfo</name><operator pos:start="281:19" pos:end="281:19">.</operator><name pos:start="281:20" pos:end="281:34">kernel_filename</name></name> <operator pos:start="281:36" pos:end="281:36">=</operator> <name pos:start="281:38" pos:end="281:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:51"><expr pos:start="283:5" pos:end="283:50"><name pos:start="283:5" pos:end="283:33"><name pos:start="283:5" pos:end="283:18">musicpal_binfo</name><operator pos:start="283:19" pos:end="283:19">.</operator><name pos:start="283:20" pos:end="283:33">kernel_cmdline</name></name> <operator pos:start="283:35" pos:end="283:35">=</operator> <name pos:start="283:37" pos:end="283:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:53"><expr pos:start="285:5" pos:end="285:52"><name pos:start="285:5" pos:end="285:34"><name pos:start="285:5" pos:end="285:18">musicpal_binfo</name><operator pos:start="285:19" pos:end="285:19">.</operator><name pos:start="285:20" pos:end="285:34">initrd_filename</name></name> <operator pos:start="285:36" pos:end="285:36">=</operator> <name pos:start="285:38" pos:end="285:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:42"><expr pos:start="287:5" pos:end="287:41"><call pos:start="287:5" pos:end="287:41"><name pos:start="287:5" pos:end="287:19">arm_load_kernel</name><argument_list pos:start="287:20" pos:end="287:41">(<argument pos:start="287:21" pos:end="287:23"><expr pos:start="287:21" pos:end="287:23"><name pos:start="287:21" pos:end="287:23">cpu</name></expr></argument>, <argument pos:start="287:26" pos:end="287:40"><expr pos:start="287:26" pos:end="287:40"><operator pos:start="287:26" pos:end="287:26">&amp;</operator><name pos:start="287:27" pos:end="287:40">musicpal_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
