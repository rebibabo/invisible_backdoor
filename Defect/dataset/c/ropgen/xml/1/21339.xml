<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21339.c" pos:tabs="8"><function pos:start="1:1" pos:end="226:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">extract_header</name><parameter_list pos:start="1:26" pos:end="3:54">(<parameter pos:start="1:27" pos:end="1:53"><decl pos:start="1:27" pos:end="1:53"><type pos:start="1:27" pos:end="1:53"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier><specifier pos:start="1:43" pos:end="1:47">const</specifier></type> <name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:53"><decl pos:start="3:27" pos:end="3:53"><type pos:start="3:27" pos:end="3:53"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:40">AVPacket</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier><specifier pos:start="3:43" pos:end="3:47">const</specifier></type> <name pos:start="3:49" pos:end="3:53">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="3:56" pos:end="226:13">{<block_content pos:start="5:5" pos:end="226:13">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:21">buf_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">IffContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">palette_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="226:13"><if pos:start="15:5" pos:end="226:13">if <condition pos:start="15:8" pos:end="15:34">(<expr pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:13">avctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:29">extradata_size</name></name> <operator pos:start="15:31" pos:end="15:31">&lt;</operator> <literal type="number" pos:start="15:33" pos:end="15:33">2</literal></expr>)</condition> <block pos:start="15:36" pos:end="226:13">{<block_content pos:start="17:9" pos:end="226:13">

        <expr_stmt pos:start="17:9" pos:end="17:62"><expr pos:start="17:9" pos:end="17:61"><call pos:start="17:9" pos:end="17:61"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:61">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:60"><expr pos:start="17:37" pos:end="17:60"><literal type="string" pos:start="17:37" pos:end="17:60">"not enough extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return>


    <expr_stmt pos:start="22:5" pos:end="22:69"><expr pos:start="22:5" pos:end="22:68"><name pos:start="22:5" pos:end="22:16">palette_size</name> <operator pos:start="22:18" pos:end="22:18">=</operator> <name pos:start="22:20" pos:end="22:40"><name pos:start="22:20" pos:end="22:24">avctx</name><operator pos:start="22:25" pos:end="22:26">-&gt;</operator><name pos:start="22:27" pos:end="22:40">extradata_size</name></name> <operator pos:start="22:42" pos:end="22:42">-</operator> <call pos:start="22:44" pos:end="22:68"><name pos:start="22:44" pos:end="22:50">AV_RB16</name><argument_list pos:start="22:51" pos:end="22:68">(<argument pos:start="22:52" pos:end="22:67"><expr pos:start="22:52" pos:end="22:67"><name pos:start="22:52" pos:end="22:67"><name pos:start="22:52" pos:end="22:56">avctx</name><operator pos:start="22:57" pos:end="22:58">-&gt;</operator><name pos:start="22:59" pos:end="22:67">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="26:5" pos:end="226:13"><if pos:start="26:5" pos:end="226:13">if <condition pos:start="26:8" pos:end="26:14">(<expr pos:start="26:9" pos:end="26:13"><name pos:start="26:9" pos:end="26:13">avpkt</name></expr>)</condition> <block pos:start="26:16" pos:end="226:13">{<block_content pos:start="28:9" pos:end="226:13">

        <decl_stmt pos:start="28:9" pos:end="28:23"><decl pos:start="28:9" pos:end="28:22"><type pos:start="28:9" pos:end="28:11"><name pos:start="28:9" pos:end="28:11">int</name></type> <name pos:start="28:13" pos:end="28:22">image_size</name></decl>;</decl_stmt>

        <if_stmt pos:start="30:9" pos:end="32:39"><if pos:start="30:9" pos:end="32:39">if <condition pos:start="30:12" pos:end="30:28">(<expr pos:start="30:13" pos:end="30:27"><name pos:start="30:13" pos:end="30:23"><name pos:start="30:13" pos:end="30:17">avpkt</name><operator pos:start="30:18" pos:end="30:19">-&gt;</operator><name pos:start="30:20" pos:end="30:23">size</name></name> <operator pos:start="30:25" pos:end="30:25">&lt;</operator> <literal type="number" pos:start="30:27" pos:end="30:27">2</literal></expr>)</condition><block type="pseudo" pos:start="32:13" pos:end="32:39"><block_content pos:start="32:13" pos:end="32:39">

            <return pos:start="32:13" pos:end="32:39">return <expr pos:start="32:20" pos:end="32:38"><name pos:start="32:20" pos:end="32:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="34:9" pos:end="34:56"><expr pos:start="34:9" pos:end="34:55"><name pos:start="34:9" pos:end="34:18">image_size</name> <operator pos:start="34:20" pos:end="34:20">=</operator> <name pos:start="34:22" pos:end="34:32"><name pos:start="34:22" pos:end="34:26">avpkt</name><operator pos:start="34:27" pos:end="34:28">-&gt;</operator><name pos:start="34:29" pos:end="34:32">size</name></name> <operator pos:start="34:34" pos:end="34:34">-</operator> <call pos:start="34:36" pos:end="34:55"><name pos:start="34:36" pos:end="34:42">AV_RB16</name><argument_list pos:start="34:43" pos:end="34:55">(<argument pos:start="34:44" pos:end="34:54"><expr pos:start="34:44" pos:end="34:54"><name pos:start="34:44" pos:end="34:54"><name pos:start="34:44" pos:end="34:48">avpkt</name><operator pos:start="34:49" pos:end="34:50">-&gt;</operator><name pos:start="34:51" pos:end="34:54">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="36:9" pos:end="36:26"><expr pos:start="36:9" pos:end="36:25"><name pos:start="36:9" pos:end="36:11">buf</name> <operator pos:start="36:13" pos:end="36:13">=</operator> <name pos:start="36:15" pos:end="36:25"><name pos:start="36:15" pos:end="36:19">avpkt</name><operator pos:start="36:20" pos:end="36:21">-&gt;</operator><name pos:start="36:22" pos:end="36:25">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="38:9" pos:end="38:45"><expr pos:start="38:9" pos:end="38:44"><name pos:start="38:9" pos:end="38:16">buf_size</name> <operator pos:start="38:18" pos:end="38:18">=</operator> <call pos:start="38:20" pos:end="38:44"><name pos:start="38:20" pos:end="38:38">bytestream_get_be16</name><argument_list pos:start="38:39" pos:end="38:44">(<argument pos:start="38:40" pos:end="38:43"><expr pos:start="38:40" pos:end="38:43"><operator pos:start="38:40" pos:end="38:40">&amp;</operator><name pos:start="38:41" pos:end="38:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="40:9" pos:end="226:13"><if pos:start="40:9" pos:end="51:5">if <condition pos:start="40:12" pos:end="40:45">(<expr pos:start="40:13" pos:end="40:44"><name pos:start="40:13" pos:end="40:20">buf_size</name> <operator pos:start="40:22" pos:end="40:23">&lt;=</operator> <literal type="number" pos:start="40:25" pos:end="40:25">1</literal> <operator pos:start="40:27" pos:end="40:28">||</operator> <name pos:start="40:30" pos:end="40:39">image_size</name> <operator pos:start="40:41" pos:end="40:42">&lt;=</operator> <literal type="number" pos:start="40:44" pos:end="40:44">1</literal></expr>)</condition> <block pos:start="40:47" pos:end="51:5">{<block_content pos:start="42:13" pos:end="48:39">

            <expr_stmt pos:start="42:13" pos:end="46:41"><expr pos:start="42:13" pos:end="46:40"><call pos:start="42:13" pos:end="46:40"><name pos:start="42:13" pos:end="42:18">av_log</name><argument_list pos:start="42:19" pos:end="46:40">(<argument pos:start="42:20" pos:end="42:24"><expr pos:start="42:20" pos:end="42:24"><name pos:start="42:20" pos:end="42:24">avctx</name></expr></argument>, <argument pos:start="42:27" pos:end="42:38"><expr pos:start="42:27" pos:end="42:38"><name pos:start="42:27" pos:end="42:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="44:20" pos:end="44:79"><expr pos:start="44:20" pos:end="44:79"><literal type="string" pos:start="44:20" pos:end="44:79">"Invalid image size received: %u -&gt; image data offset: %d\n"</literal></expr></argument>,

                   <argument pos:start="46:20" pos:end="46:27"><expr pos:start="46:20" pos:end="46:27"><name pos:start="46:20" pos:end="46:27">buf_size</name></expr></argument>, <argument pos:start="46:30" pos:end="46:39"><expr pos:start="46:30" pos:end="46:39"><name pos:start="46:30" pos:end="46:39">image_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="48:13" pos:end="48:39">return <expr pos:start="48:20" pos:end="48:38"><name pos:start="48:20" pos:end="48:38">AVERROR_INVALIDDATA</name></expr>;</return>


    </block_content>}</block></if> <else pos:start="51:7" pos:end="226:13">else <block pos:start="51:12" pos:end="226:13">{<block_content pos:start="53:9" pos:end="226:13">

        <expr_stmt pos:start="53:9" pos:end="53:31"><expr pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:11">buf</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <name pos:start="53:15" pos:end="53:30"><name pos:start="53:15" pos:end="53:19">avctx</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:30">extradata</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:16">buf_size</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:44"><name pos:start="55:20" pos:end="55:38">bytestream_get_be16</name><argument_list pos:start="55:39" pos:end="55:44">(<argument pos:start="55:40" pos:end="55:43"><expr pos:start="55:40" pos:end="55:43"><operator pos:start="55:40" pos:end="55:40">&amp;</operator><name pos:start="55:41" pos:end="55:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="226:13"><if pos:start="57:9" pos:end="226:13">if <condition pos:start="57:12" pos:end="57:46">(<expr pos:start="57:13" pos:end="57:45"><name pos:start="57:13" pos:end="57:20">buf_size</name> <operator pos:start="57:22" pos:end="57:23">&lt;=</operator> <literal type="number" pos:start="57:25" pos:end="57:25">1</literal> <operator pos:start="57:27" pos:end="57:28">||</operator> <name pos:start="57:30" pos:end="57:41">palette_size</name> <operator pos:start="57:43" pos:end="57:43">&lt;</operator> <literal type="number" pos:start="57:45" pos:end="57:45">0</literal></expr>)</condition> <block pos:start="57:48" pos:end="226:13">{<block_content pos:start="59:13" pos:end="226:13">

            <expr_stmt pos:start="59:13" pos:end="63:43"><expr pos:start="59:13" pos:end="63:42"><call pos:start="59:13" pos:end="63:42"><name pos:start="59:13" pos:end="59:18">av_log</name><argument_list pos:start="59:19" pos:end="63:42">(<argument pos:start="59:20" pos:end="59:24"><expr pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:24">avctx</name></expr></argument>, <argument pos:start="59:27" pos:end="59:38"><expr pos:start="59:27" pos:end="59:38"><name pos:start="59:27" pos:end="59:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="61:20" pos:end="61:83"><expr pos:start="61:20" pos:end="61:83"><literal type="string" pos:start="61:20" pos:end="61:83">"Invalid palette size received: %u -&gt; palette data offset: %d\n"</literal></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:27"><expr pos:start="63:20" pos:end="63:27"><name pos:start="63:20" pos:end="63:27">buf_size</name></expr></argument>, <argument pos:start="63:30" pos:end="63:41"><expr pos:start="63:30" pos:end="63:41"><name pos:start="63:30" pos:end="63:41">palette_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:39">return <expr pos:start="65:20" pos:end="65:38"><name pos:start="65:20" pos:end="65:38">AVERROR_INVALIDDATA</name></expr>;</return>





    <if_stmt pos:start="71:5" pos:end="226:13"><if pos:start="71:5" pos:end="226:13">if <condition pos:start="71:8" pos:end="71:21">(<expr pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:16">buf_size</name> <operator pos:start="71:18" pos:end="71:18">&gt;</operator> <literal type="number" pos:start="71:20" pos:end="71:20">8</literal></expr>)</condition> <block pos:start="71:23" pos:end="226:13">{<block_content pos:start="73:9" pos:end="226:13">

        <expr_stmt pos:start="73:9" pos:end="73:52"><expr pos:start="73:9" pos:end="73:51"><name pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:22">compression</name></name>  <operator pos:start="73:25" pos:end="73:25">=</operator> <call pos:start="73:27" pos:end="73:51"><name pos:start="73:27" pos:end="73:45">bytestream_get_byte</name><argument_list pos:start="73:46" pos:end="73:51">(<argument pos:start="73:47" pos:end="73:50"><expr pos:start="73:47" pos:end="73:50"><operator pos:start="73:47" pos:end="73:47">&amp;</operator><name pos:start="73:48" pos:end="73:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:52"><expr pos:start="75:9" pos:end="75:51"><name pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:14">bpp</name></name>          <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="75:51"><name pos:start="75:27" pos:end="75:45">bytestream_get_byte</name><argument_list pos:start="75:46" pos:end="75:51">(<argument pos:start="75:47" pos:end="75:50"><expr pos:start="75:47" pos:end="75:50"><operator pos:start="75:47" pos:end="75:47">&amp;</operator><name pos:start="75:48" pos:end="75:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:52"><expr pos:start="77:9" pos:end="77:51"><name pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:14">ham</name></name>          <operator pos:start="77:25" pos:end="77:25">=</operator> <call pos:start="77:27" pos:end="77:51"><name pos:start="77:27" pos:end="77:45">bytestream_get_byte</name><argument_list pos:start="77:46" pos:end="77:51">(<argument pos:start="77:47" pos:end="77:50"><expr pos:start="77:47" pos:end="77:50"><operator pos:start="77:47" pos:end="77:47">&amp;</operator><name pos:start="77:48" pos:end="77:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:52"><expr pos:start="79:9" pos:end="79:51"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">flags</name></name>        <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="79:51"><name pos:start="79:27" pos:end="79:45">bytestream_get_byte</name><argument_list pos:start="79:46" pos:end="79:51">(<argument pos:start="79:47" pos:end="79:50"><expr pos:start="79:47" pos:end="79:50"><operator pos:start="79:47" pos:end="79:47">&amp;</operator><name pos:start="79:48" pos:end="79:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:52"><expr pos:start="81:9" pos:end="81:51"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:23">transparency</name></name> <operator pos:start="81:25" pos:end="81:25">=</operator> <call pos:start="81:27" pos:end="81:51"><name pos:start="81:27" pos:end="81:45">bytestream_get_be16</name><argument_list pos:start="81:46" pos:end="81:51">(<argument pos:start="81:47" pos:end="81:50"><expr pos:start="81:47" pos:end="81:50"><operator pos:start="81:47" pos:end="81:47">&amp;</operator><name pos:start="81:48" pos:end="81:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:52"><expr pos:start="83:9" pos:end="83:51"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:18">masking</name></name>      <operator pos:start="83:25" pos:end="83:25">=</operator> <call pos:start="83:27" pos:end="83:51"><name pos:start="83:27" pos:end="83:45">bytestream_get_byte</name><argument_list pos:start="83:46" pos:end="83:51">(<argument pos:start="83:47" pos:end="83:50"><expr pos:start="83:47" pos:end="83:50"><operator pos:start="83:47" pos:end="83:47">&amp;</operator><name pos:start="83:48" pos:end="83:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="226:13"><if pos:start="85:9" pos:end="226:13">if <condition pos:start="85:12" pos:end="85:40">(<expr pos:start="85:13" pos:end="85:39"><name pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:22">masking</name></name> <operator pos:start="85:24" pos:end="85:25">==</operator> <name pos:start="85:27" pos:end="85:39">MASK_HAS_MASK</name></expr>)</condition> <block pos:start="85:42" pos:end="226:13">{<block_content pos:start="87:13" pos:end="226:13">

            <if_stmt pos:start="87:13" pos:end="226:13"><if pos:start="87:13" pos:end="226:13">if <condition pos:start="87:16" pos:end="87:28">(<expr pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:17">s</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:22">bpp</name></name> <operator pos:start="87:24" pos:end="87:25">&gt;=</operator> <literal type="number" pos:start="87:27" pos:end="87:27">8</literal></expr>)</condition> <block pos:start="87:30" pos:end="226:13">{<block_content pos:start="89:17" pos:end="226:13">

                <expr_stmt pos:start="89:17" pos:end="89:47"><expr pos:start="89:17" pos:end="89:46"><name pos:start="89:17" pos:end="89:30"><name pos:start="89:17" pos:end="89:21">avctx</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:30">pix_fmt</name></name> <operator pos:start="89:32" pos:end="89:32">=</operator> <name pos:start="89:34" pos:end="89:46">PIX_FMT_RGB32</name></expr>;</expr_stmt>


                <expr_stmt pos:start="92:17" pos:end="92:42"><expr pos:start="92:17" pos:end="92:41"><call pos:start="92:17" pos:end="92:41"><name pos:start="92:17" pos:end="92:24">av_freep</name><argument_list pos:start="92:25" pos:end="92:41">(<argument pos:start="92:26" pos:end="92:40"><expr pos:start="92:26" pos:end="92:40"><operator pos:start="92:26" pos:end="92:26">&amp;</operator><name pos:start="92:27" pos:end="92:40"><name pos:start="92:27" pos:end="92:27">s</name><operator pos:start="92:28" pos:end="92:29">-&gt;</operator><name pos:start="92:30" pos:end="92:40">mask_palbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="94:17" pos:end="94:92"><expr pos:start="94:17" pos:end="94:91"><name pos:start="94:17" pos:end="94:27"><name pos:start="94:17" pos:end="94:17">s</name><operator pos:start="94:18" pos:end="94:19">-&gt;</operator><name pos:start="94:20" pos:end="94:27">mask_buf</name></name> <operator pos:start="94:29" pos:end="94:29">=</operator> <call pos:start="94:31" pos:end="94:91"><name pos:start="94:31" pos:end="94:39">av_malloc</name><argument_list pos:start="94:40" pos:end="94:91">(<argument pos:start="94:41" pos:end="94:90"><expr pos:start="94:41" pos:end="94:90"><operator pos:start="94:41" pos:end="94:41">(</operator><name pos:start="94:42" pos:end="94:53"><name pos:start="94:42" pos:end="94:42">s</name><operator pos:start="94:43" pos:end="94:44">-&gt;</operator><name pos:start="94:45" pos:end="94:53">planesize</name></name> <operator pos:start="94:55" pos:end="94:55">*</operator> <literal type="number" pos:start="94:57" pos:end="94:58">32</literal><operator pos:start="94:59" pos:end="94:59">)</operator> <operator pos:start="94:61" pos:end="94:61">+</operator> <name pos:start="94:63" pos:end="94:90">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="96:17" pos:end="104:108"><if pos:start="96:17" pos:end="104:108">if <condition pos:start="96:20" pos:end="96:33">(<expr pos:start="96:21" pos:end="96:32"><operator pos:start="96:21" pos:end="96:21">!</operator><name pos:start="96:22" pos:end="96:32"><name pos:start="96:22" pos:end="96:22">s</name><operator pos:start="96:23" pos:end="96:24">-&gt;</operator><name pos:start="96:25" pos:end="96:32">mask_buf</name></name></expr>)</condition><block type="pseudo" pos:start="104:17" pos:end="104:108"><block_content pos:start="104:17" pos:end="104:108">







                <expr_stmt pos:start="104:17" pos:end="104:108"><expr pos:start="104:17" pos:end="104:107"><name pos:start="104:17" pos:end="104:30"><name pos:start="104:17" pos:end="104:17">s</name><operator pos:start="104:18" pos:end="104:19">-&gt;</operator><name pos:start="104:20" pos:end="104:30">mask_palbuf</name></name> <operator pos:start="104:32" pos:end="104:32">=</operator> <call pos:start="104:34" pos:end="104:107"><name pos:start="104:34" pos:end="104:42">av_malloc</name><argument_list pos:start="104:43" pos:end="104:107">(<argument pos:start="104:44" pos:end="104:106"><expr pos:start="104:44" pos:end="104:106"><operator pos:start="104:44" pos:end="104:44">(</operator><literal type="number" pos:start="104:45" pos:end="104:45">2</literal> <operator pos:start="104:47" pos:end="104:48">&lt;&lt;</operator> <name pos:start="104:50" pos:end="104:55"><name pos:start="104:50" pos:end="104:50">s</name><operator pos:start="104:51" pos:end="104:52">-&gt;</operator><name pos:start="104:53" pos:end="104:55">bpp</name></name><operator pos:start="104:56" pos:end="104:56">)</operator> <operator pos:start="104:58" pos:end="104:58">*</operator> <sizeof pos:start="104:60" pos:end="104:75">sizeof<argument_list pos:start="104:66" pos:end="104:75">(<argument pos:start="104:67" pos:end="104:74"><expr pos:start="104:67" pos:end="104:74"><name pos:start="104:67" pos:end="104:74">uint32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="104:77" pos:end="104:77">+</operator> <name pos:start="104:79" pos:end="104:106">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="106:17" pos:end="226:13"><if pos:start="106:17" pos:end="114:9">if <condition pos:start="106:20" pos:end="106:36">(<expr pos:start="106:21" pos:end="106:35"><operator pos:start="106:21" pos:end="106:21">!</operator><name pos:start="106:22" pos:end="106:35"><name pos:start="106:22" pos:end="106:22">s</name><operator pos:start="106:23" pos:end="106:24">-&gt;</operator><name pos:start="106:25" pos:end="106:35">mask_palbuf</name></name></expr>)</condition> <block pos:start="106:38" pos:end="114:9">{<block_content pos:start="112:13" pos:end="112:21">





            <expr_stmt pos:start="112:13" pos:end="112:21"><expr pos:start="112:13" pos:end="112:20"><name pos:start="112:13" pos:end="112:18"><name pos:start="112:13" pos:end="112:13">s</name><operator pos:start="112:14" pos:end="112:15">-&gt;</operator><name pos:start="112:16" pos:end="112:18">bpp</name></name><operator pos:start="112:19" pos:end="112:20">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="114:11" pos:end="226:13">else if <condition pos:start="114:19" pos:end="114:87">(<expr pos:start="114:20" pos:end="114:86"><name pos:start="114:20" pos:end="114:29"><name pos:start="114:20" pos:end="114:20">s</name><operator pos:start="114:21" pos:end="114:22">-&gt;</operator><name pos:start="114:23" pos:end="114:29">masking</name></name> <operator pos:start="114:31" pos:end="114:32">!=</operator> <name pos:start="114:34" pos:end="114:42">MASK_NONE</name> <operator pos:start="114:44" pos:end="114:45">&amp;&amp;</operator> <name pos:start="114:47" pos:end="114:56"><name pos:start="114:47" pos:end="114:47">s</name><operator pos:start="114:48" pos:end="114:49">-&gt;</operator><name pos:start="114:50" pos:end="114:56">masking</name></name> <operator pos:start="114:58" pos:end="114:59">!=</operator> <name pos:start="114:61" pos:end="114:86">MASK_HAS_TRANSPARENT_COLOR</name></expr>)</condition> <block pos:start="114:89" pos:end="226:13">{<block_content pos:start="116:13" pos:end="226:13">

            <expr_stmt pos:start="116:13" pos:end="116:67"><expr pos:start="116:13" pos:end="116:66"><call pos:start="116:13" pos:end="116:66"><name pos:start="116:13" pos:end="116:18">av_log</name><argument_list pos:start="116:19" pos:end="116:66">(<argument pos:start="116:20" pos:end="116:24"><expr pos:start="116:20" pos:end="116:24"><name pos:start="116:20" pos:end="116:24">avctx</name></expr></argument>, <argument pos:start="116:27" pos:end="116:38"><expr pos:start="116:27" pos:end="116:38"><name pos:start="116:27" pos:end="116:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="116:41" pos:end="116:65"><expr pos:start="116:41" pos:end="116:65"><literal type="string" pos:start="116:41" pos:end="116:65">"Masking not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="118:13" pos:end="118:40">return <expr pos:start="118:20" pos:end="118:39"><name pos:start="118:20" pos:end="118:39">AVERROR_PATCHWELCOME</name></expr>;</return>


        <if_stmt pos:start="121:9" pos:end="226:13"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:35">(<expr pos:start="121:13" pos:end="121:34"><operator pos:start="121:13" pos:end="121:13">!</operator><name pos:start="121:14" pos:end="121:19"><name pos:start="121:14" pos:end="121:14">s</name><operator pos:start="121:15" pos:end="121:16">-&gt;</operator><name pos:start="121:17" pos:end="121:19">bpp</name></name> <operator pos:start="121:21" pos:end="121:22">||</operator> <name pos:start="121:24" pos:end="121:29"><name pos:start="121:24" pos:end="121:24">s</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:29">bpp</name></name> <operator pos:start="121:31" pos:end="121:31">&gt;</operator> <literal type="number" pos:start="121:33" pos:end="121:34">32</literal></expr>)</condition> <block pos:start="121:37" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:39">

            <expr_stmt pos:start="123:13" pos:end="123:85"><expr pos:start="123:13" pos:end="123:84"><call pos:start="123:13" pos:end="123:84"><name pos:start="123:13" pos:end="123:18">av_log</name><argument_list pos:start="123:19" pos:end="123:84">(<argument pos:start="123:20" pos:end="123:24"><expr pos:start="123:20" pos:end="123:24"><name pos:start="123:20" pos:end="123:24">avctx</name></expr></argument>, <argument pos:start="123:27" pos:end="123:38"><expr pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="123:41" pos:end="123:75"><expr pos:start="123:41" pos:end="123:75"><literal type="string" pos:start="123:41" pos:end="123:75">"Invalid number of bitplanes: %u\n"</literal></expr></argument>, <argument pos:start="123:78" pos:end="123:83"><expr pos:start="123:78" pos:end="123:83"><name pos:start="123:78" pos:end="123:83"><name pos:start="123:78" pos:end="123:78">s</name><operator pos:start="123:79" pos:end="123:80">-&gt;</operator><name pos:start="123:81" pos:end="123:83">bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:39">return <expr pos:start="125:20" pos:end="125:38"><name pos:start="125:20" pos:end="125:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="226:13">else if <condition pos:start="127:19" pos:end="127:31">(<expr pos:start="127:20" pos:end="127:30"><name pos:start="127:20" pos:end="127:25"><name pos:start="127:20" pos:end="127:20">s</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:25">ham</name></name> <operator pos:start="127:27" pos:end="127:28">&gt;=</operator> <literal type="number" pos:start="127:30" pos:end="127:30">8</literal></expr>)</condition> <block pos:start="127:33" pos:end="226:13">{<block_content pos:start="129:13" pos:end="226:13">

            <expr_stmt pos:start="129:13" pos:end="129:93"><expr pos:start="129:13" pos:end="129:92"><call pos:start="129:13" pos:end="129:92"><name pos:start="129:13" pos:end="129:18">av_log</name><argument_list pos:start="129:19" pos:end="129:92">(<argument pos:start="129:20" pos:end="129:24"><expr pos:start="129:20" pos:end="129:24"><name pos:start="129:20" pos:end="129:24">avctx</name></expr></argument>, <argument pos:start="129:27" pos:end="129:38"><expr pos:start="129:27" pos:end="129:38"><name pos:start="129:27" pos:end="129:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:41" pos:end="129:83"><expr pos:start="129:41" pos:end="129:83"><literal type="string" pos:start="129:41" pos:end="129:83">"Invalid number of hold bits for HAM: %u\n"</literal></expr></argument>, <argument pos:start="129:86" pos:end="129:91"><expr pos:start="129:86" pos:end="129:91"><name pos:start="129:86" pos:end="129:91"><name pos:start="129:86" pos:end="129:86">s</name><operator pos:start="129:87" pos:end="129:88">-&gt;</operator><name pos:start="129:89" pos:end="129:91">ham</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:39">return <expr pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:38">AVERROR_INVALIDDATA</name></expr>;</return>




        <expr_stmt pos:start="136:9" pos:end="136:30"><expr pos:start="136:9" pos:end="136:29"><call pos:start="136:9" pos:end="136:29"><name pos:start="136:9" pos:end="136:16">av_freep</name><argument_list pos:start="136:17" pos:end="136:29">(<argument pos:start="136:18" pos:end="136:28"><expr pos:start="136:18" pos:end="136:28"><operator pos:start="136:18" pos:end="136:18">&amp;</operator><name pos:start="136:19" pos:end="136:28"><name pos:start="136:19" pos:end="136:19">s</name><operator pos:start="136:20" pos:end="136:21">-&gt;</operator><name pos:start="136:22" pos:end="136:28">ham_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="138:9" pos:end="138:33"><expr pos:start="138:9" pos:end="138:32"><call pos:start="138:9" pos:end="138:32"><name pos:start="138:9" pos:end="138:16">av_freep</name><argument_list pos:start="138:17" pos:end="138:32">(<argument pos:start="138:18" pos:end="138:31"><expr pos:start="138:18" pos:end="138:31"><operator pos:start="138:18" pos:end="138:18">&amp;</operator><name pos:start="138:19" pos:end="138:31"><name pos:start="138:19" pos:end="138:19">s</name><operator pos:start="138:20" pos:end="138:21">-&gt;</operator><name pos:start="138:22" pos:end="138:31">ham_palbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="142:9" pos:end="226:13"><if pos:start="142:9" pos:end="226:13">if <condition pos:start="142:12" pos:end="142:19">(<expr pos:start="142:13" pos:end="142:18"><name pos:start="142:13" pos:end="142:18"><name pos:start="142:13" pos:end="142:13">s</name><operator pos:start="142:14" pos:end="142:15">-&gt;</operator><name pos:start="142:16" pos:end="142:18">ham</name></name></expr>)</condition> <block pos:start="142:21" pos:end="226:13">{<block_content pos:start="144:13" pos:end="226:13">

            <decl_stmt pos:start="144:13" pos:end="144:64"><decl pos:start="144:13" pos:end="144:17"><type pos:start="144:13" pos:end="144:15"><name pos:start="144:13" pos:end="144:15">int</name></type> <name pos:start="144:17" pos:end="144:17">i</name></decl>, <decl pos:start="144:20" pos:end="144:63"><type ref="prev" pos:start="144:13" pos:end="144:15"/><name pos:start="144:20" pos:end="144:24">count</name> <init pos:start="144:26" pos:end="144:63">= <expr pos:start="144:28" pos:end="144:63"><call pos:start="144:28" pos:end="144:63"><name pos:start="144:28" pos:end="144:32">FFMIN</name><argument_list pos:start="144:33" pos:end="144:63">(<argument pos:start="144:34" pos:end="144:49"><expr pos:start="144:34" pos:end="144:49"><name pos:start="144:34" pos:end="144:45">palette_size</name> <operator pos:start="144:47" pos:end="144:47">/</operator> <literal type="number" pos:start="144:49" pos:end="144:49">3</literal></expr></argument>, <argument pos:start="144:52" pos:end="144:62"><expr pos:start="144:52" pos:end="144:62"><literal type="number" pos:start="144:52" pos:end="144:52">1</literal> <operator pos:start="144:54" pos:end="144:55">&lt;&lt;</operator> <name pos:start="144:57" pos:end="144:62"><name pos:start="144:57" pos:end="144:57">s</name><operator pos:start="144:58" pos:end="144:59">-&gt;</operator><name pos:start="144:60" pos:end="144:62">ham</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="146:13" pos:end="146:26"><decl pos:start="146:13" pos:end="146:25"><type pos:start="146:13" pos:end="146:15"><name pos:start="146:13" pos:end="146:15">int</name></type> <name pos:start="146:17" pos:end="146:25">ham_count</name></decl>;</decl_stmt>

            <decl_stmt pos:start="148:13" pos:end="148:88"><decl pos:start="148:13" pos:end="148:87"><type pos:start="148:13" pos:end="148:32"><specifier pos:start="148:13" pos:end="148:17">const</specifier> <name pos:start="148:19" pos:end="148:25">uint8_t</name> <modifier pos:start="148:27" pos:end="148:27">*</modifier><specifier pos:start="148:28" pos:end="148:32">const</specifier></type> <name pos:start="148:34" pos:end="148:40">palette</name> <init pos:start="148:42" pos:end="148:87">= <expr pos:start="148:44" pos:end="148:87"><name pos:start="148:44" pos:end="148:59"><name pos:start="148:44" pos:end="148:48">avctx</name><operator pos:start="148:49" pos:end="148:50">-&gt;</operator><name pos:start="148:51" pos:end="148:59">extradata</name></name> <operator pos:start="148:61" pos:end="148:61">+</operator> <call pos:start="148:63" pos:end="148:87"><name pos:start="148:63" pos:end="148:69">AV_RB16</name><argument_list pos:start="148:70" pos:end="148:87">(<argument pos:start="148:71" pos:end="148:86"><expr pos:start="148:71" pos:end="148:86"><name pos:start="148:71" pos:end="148:86"><name pos:start="148:71" pos:end="148:75">avctx</name><operator pos:start="148:76" pos:end="148:77">-&gt;</operator><name pos:start="148:78" pos:end="148:86">extradata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="152:13" pos:end="152:86"><expr pos:start="152:13" pos:end="152:85"><name pos:start="152:13" pos:end="152:22"><name pos:start="152:13" pos:end="152:13">s</name><operator pos:start="152:14" pos:end="152:15">-&gt;</operator><name pos:start="152:16" pos:end="152:22">ham_buf</name></name> <operator pos:start="152:24" pos:end="152:24">=</operator> <call pos:start="152:26" pos:end="152:85"><name pos:start="152:26" pos:end="152:34">av_malloc</name><argument_list pos:start="152:35" pos:end="152:85">(<argument pos:start="152:36" pos:end="152:84"><expr pos:start="152:36" pos:end="152:84"><operator pos:start="152:36" pos:end="152:36">(</operator><name pos:start="152:37" pos:end="152:48"><name pos:start="152:37" pos:end="152:37">s</name><operator pos:start="152:38" pos:end="152:39">-&gt;</operator><name pos:start="152:40" pos:end="152:48">planesize</name></name> <operator pos:start="152:50" pos:end="152:50">*</operator> <literal type="number" pos:start="152:52" pos:end="152:52">8</literal><operator pos:start="152:53" pos:end="152:53">)</operator> <operator pos:start="152:55" pos:end="152:55">+</operator> <name pos:start="152:57" pos:end="152:84">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="154:13" pos:end="159:42"><if pos:start="154:13" pos:end="159:42">if <condition pos:start="154:16" pos:end="154:28">(<expr pos:start="154:17" pos:end="154:27"><operator pos:start="154:17" pos:end="154:17">!</operator><name pos:start="154:18" pos:end="154:27"><name pos:start="154:18" pos:end="154:18">s</name><operator pos:start="154:19" pos:end="154:20">-&gt;</operator><name pos:start="154:21" pos:end="154:27">ham_buf</name></name></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:42"><block_content pos:start="159:13" pos:end="159:42">




            <expr_stmt pos:start="159:13" pos:end="159:42"><expr pos:start="159:13" pos:end="159:41"><name pos:start="159:13" pos:end="159:21">ham_count</name> <operator pos:start="159:23" pos:end="159:23">=</operator> <literal type="number" pos:start="159:25" pos:end="159:25">8</literal> <operator pos:start="159:27" pos:end="159:27">*</operator> <operator pos:start="159:29" pos:end="159:29">(</operator><literal type="number" pos:start="159:30" pos:end="159:30">1</literal> <operator pos:start="159:32" pos:end="159:33">&lt;&lt;</operator> <name pos:start="159:35" pos:end="159:40"><name pos:start="159:35" pos:end="159:35">s</name><operator pos:start="159:36" pos:end="159:37">-&gt;</operator><name pos:start="159:38" pos:end="159:40">ham</name></name><operator pos:start="159:41" pos:end="159:41">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:137"><expr pos:start="161:13" pos:end="161:136"><name pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:25">ham_palbuf</name></name> <operator pos:start="161:27" pos:end="161:27">=</operator> <call pos:start="161:29" pos:end="161:136"><name pos:start="161:29" pos:end="161:37">av_malloc</name><argument_list pos:start="161:38" pos:end="161:136">(<argument pos:start="161:39" pos:end="161:135"><expr pos:start="161:39" pos:end="161:135"><operator pos:start="161:39" pos:end="161:39">(</operator><name pos:start="161:40" pos:end="161:48">ham_count</name> <operator pos:start="161:50" pos:end="161:51">&lt;&lt;</operator> <operator pos:start="161:53" pos:end="161:53">!</operator><operator pos:start="161:54" pos:end="161:54">!</operator><operator pos:start="161:55" pos:end="161:55">(</operator><name pos:start="161:56" pos:end="161:65"><name pos:start="161:56" pos:end="161:56">s</name><operator pos:start="161:57" pos:end="161:58">-&gt;</operator><name pos:start="161:59" pos:end="161:65">masking</name></name> <operator pos:start="161:67" pos:end="161:68">==</operator> <name pos:start="161:70" pos:end="161:82">MASK_HAS_MASK</name><operator pos:start="161:83" pos:end="161:83">)</operator><operator pos:start="161:84" pos:end="161:84">)</operator> <operator pos:start="161:86" pos:end="161:86">*</operator> <sizeof pos:start="161:88" pos:end="161:104">sizeof <argument_list pos:start="161:95" pos:end="161:104">(<argument pos:start="161:96" pos:end="161:103"><expr pos:start="161:96" pos:end="161:103"><name pos:start="161:96" pos:end="161:103">uint32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="161:106" pos:end="161:106">+</operator> <name pos:start="161:108" pos:end="161:135">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="226:13"><if pos:start="163:13" pos:end="226:13">if <condition pos:start="163:16" pos:end="163:31">(<expr pos:start="163:17" pos:end="163:30"><operator pos:start="163:17" pos:end="163:17">!</operator><name pos:start="163:18" pos:end="163:30"><name pos:start="163:18" pos:end="163:18">s</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:30">ham_palbuf</name></name></expr>)</condition> <block pos:start="163:33" pos:end="226:13">{<block_content pos:start="165:17" pos:end="226:13">

                <expr_stmt pos:start="165:17" pos:end="165:38"><expr pos:start="165:17" pos:end="165:37"><call pos:start="165:17" pos:end="165:37"><name pos:start="165:17" pos:end="165:24">av_freep</name><argument_list pos:start="165:25" pos:end="165:37">(<argument pos:start="165:26" pos:end="165:36"><expr pos:start="165:26" pos:end="165:36"><operator pos:start="165:26" pos:end="165:26">&amp;</operator><name pos:start="165:27" pos:end="165:36"><name pos:start="165:27" pos:end="165:27">s</name><operator pos:start="165:28" pos:end="165:29">-&gt;</operator><name pos:start="165:30" pos:end="165:36">ham_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





            <if_stmt pos:start="171:13" pos:end="226:13"><if pos:start="171:13" pos:end="226:13">if <condition pos:start="171:16" pos:end="171:22">(<expr pos:start="171:17" pos:end="171:21"><name pos:start="171:17" pos:end="171:21">count</name></expr>)</condition> <block pos:start="171:24" pos:end="226:13">{<block_content pos:start="175:17" pos:end="226:13"> <comment type="line" pos:start="171:26" pos:end="171:59">// HAM with color palette attached</comment>

                <comment type="line" pos:start="173:17" pos:end="173:92">// prefill with black and palette and set HAM take direct value mask to zero</comment>

                <expr_stmt pos:start="175:17" pos:end="175:80"><expr pos:start="175:17" pos:end="175:79"><call pos:start="175:17" pos:end="175:79"><name pos:start="175:17" pos:end="175:22">memset</name><argument_list pos:start="175:23" pos:end="175:79">(<argument pos:start="175:24" pos:end="175:36"><expr pos:start="175:24" pos:end="175:36"><name pos:start="175:24" pos:end="175:36"><name pos:start="175:24" pos:end="175:24">s</name><operator pos:start="175:25" pos:end="175:26">-&gt;</operator><name pos:start="175:27" pos:end="175:36">ham_palbuf</name></name></expr></argument>, <argument pos:start="175:39" pos:end="175:39"><expr pos:start="175:39" pos:end="175:39"><literal type="number" pos:start="175:39" pos:end="175:39">0</literal></expr></argument>, <argument pos:start="175:42" pos:end="175:78"><expr pos:start="175:42" pos:end="175:78"><operator pos:start="175:42" pos:end="175:42">(</operator><literal type="number" pos:start="175:43" pos:end="175:43">1</literal> <operator pos:start="175:45" pos:end="175:46">&lt;&lt;</operator> <name pos:start="175:48" pos:end="175:53"><name pos:start="175:48" pos:end="175:48">s</name><operator pos:start="175:49" pos:end="175:50">-&gt;</operator><name pos:start="175:51" pos:end="175:53">ham</name></name><operator pos:start="175:54" pos:end="175:54">)</operator> <operator pos:start="175:56" pos:end="175:56">*</operator> <literal type="number" pos:start="175:58" pos:end="175:58">2</literal> <operator pos:start="175:60" pos:end="175:60">*</operator> <sizeof pos:start="175:62" pos:end="175:78">sizeof <argument_list pos:start="175:69" pos:end="175:78">(<argument pos:start="175:70" pos:end="175:77"><expr pos:start="175:70" pos:end="175:77"><name pos:start="175:70" pos:end="175:77">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="177:17" pos:end="184:13">for <control pos:start="177:21" pos:end="177:41">(<init pos:start="177:22" pos:end="177:25"><expr pos:start="177:22" pos:end="177:24"><name pos:start="177:22" pos:end="177:22">i</name><operator pos:start="177:23" pos:end="177:23">=</operator><literal type="number" pos:start="177:24" pos:end="177:24">0</literal></expr>;</init> <condition pos:start="177:27" pos:end="177:36"><expr pos:start="177:27" pos:end="177:35"><name pos:start="177:27" pos:end="177:27">i</name> <operator pos:start="177:29" pos:end="177:29">&lt;</operator> <name pos:start="177:31" pos:end="177:35">count</name></expr>;</condition> <incr pos:start="177:38" pos:end="177:40"><expr pos:start="177:38" pos:end="177:40"><name pos:start="177:38" pos:end="177:38">i</name><operator pos:start="177:39" pos:end="177:40">++</operator></expr></incr>)</control> <block pos:start="177:43" pos:end="184:13">{<block_content pos:start="179:21" pos:end="182:36">

                    <expr_stmt pos:start="179:21" pos:end="179:79"><expr pos:start="179:21" pos:end="179:78"><name pos:start="179:21" pos:end="179:40"><name pos:start="179:21" pos:end="179:21">s</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:33">ham_palbuf</name><index pos:start="179:34" pos:end="179:40">[<expr pos:start="179:35" pos:end="179:39"><name pos:start="179:35" pos:end="179:35">i</name><operator pos:start="179:36" pos:end="179:36">*</operator><literal type="number" pos:start="179:37" pos:end="179:37">2</literal><operator pos:start="179:38" pos:end="179:38">+</operator><literal type="number" pos:start="179:39" pos:end="179:39">1</literal></expr>]</index></name> <operator pos:start="179:42" pos:end="179:42">=</operator> <literal type="number" pos:start="179:44" pos:end="179:53">0xFF000000</literal> <operator pos:start="179:55" pos:end="179:55">|</operator> <call pos:start="179:57" pos:end="179:78"><name pos:start="179:57" pos:end="179:63">AV_RL24</name><argument_list pos:start="179:64" pos:end="179:78">(<argument pos:start="179:65" pos:end="179:77"><expr pos:start="179:65" pos:end="179:77"><name pos:start="179:65" pos:end="179:71">palette</name> <operator pos:start="179:73" pos:end="179:73">+</operator> <name pos:start="179:75" pos:end="179:75">i</name><operator pos:start="179:76" pos:end="179:76">*</operator><literal type="number" pos:start="179:77" pos:end="179:77">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <expr_stmt pos:start="182:17" pos:end="182:36"><expr pos:start="182:17" pos:end="182:35"><name pos:start="182:17" pos:end="182:21">count</name> <operator pos:start="182:23" pos:end="182:23">=</operator> <literal type="number" pos:start="182:25" pos:end="182:25">1</literal> <operator pos:start="182:27" pos:end="182:28">&lt;&lt;</operator> <name pos:start="182:30" pos:end="182:35"><name pos:start="182:30" pos:end="182:30">s</name><operator pos:start="182:31" pos:end="182:32">-&gt;</operator><name pos:start="182:33" pos:end="182:35">ham</name></name></expr>;</expr_stmt>

            </block_content>}</block></for> <if_stmt pos:start="184:15" pos:end="226:13"><else pos:start="184:15" pos:end="226:13">else <block pos:start="184:20" pos:end="226:13">{<block_content pos:start="186:17" pos:end="226:13"> <comment type="line" pos:start="184:22" pos:end="184:56">// HAM with grayscale color palette</comment>

                <expr_stmt pos:start="186:17" pos:end="186:36"><expr pos:start="186:17" pos:end="186:35"><name pos:start="186:17" pos:end="186:21">count</name> <operator pos:start="186:23" pos:end="186:23">=</operator> <literal type="number" pos:start="186:25" pos:end="186:25">1</literal> <operator pos:start="186:27" pos:end="186:28">&lt;&lt;</operator> <name pos:start="186:30" pos:end="186:35"><name pos:start="186:30" pos:end="186:30">s</name><operator pos:start="186:31" pos:end="186:32">-&gt;</operator><name pos:start="186:33" pos:end="186:35">ham</name></name></expr>;</expr_stmt>

                <for pos:start="188:17" pos:end="226:13">for <control pos:start="188:21" pos:end="188:41">(<init pos:start="188:22" pos:end="188:25"><expr pos:start="188:22" pos:end="188:24"><name pos:start="188:22" pos:end="188:22">i</name><operator pos:start="188:23" pos:end="188:23">=</operator><literal type="number" pos:start="188:24" pos:end="188:24">0</literal></expr>;</init> <condition pos:start="188:27" pos:end="188:36"><expr pos:start="188:27" pos:end="188:35"><name pos:start="188:27" pos:end="188:27">i</name> <operator pos:start="188:29" pos:end="188:29">&lt;</operator> <name pos:start="188:31" pos:end="188:35">count</name></expr>;</condition> <incr pos:start="188:38" pos:end="188:40"><expr pos:start="188:38" pos:end="188:40"><name pos:start="188:38" pos:end="188:38">i</name><operator pos:start="188:39" pos:end="188:40">++</operator></expr></incr>)</control> <block pos:start="188:43" pos:end="226:13">{<block_content pos:start="190:21" pos:end="226:13">

                    <expr_stmt pos:start="190:21" pos:end="190:54"><expr pos:start="190:21" pos:end="190:53"><name pos:start="190:21" pos:end="190:38"><name pos:start="190:21" pos:end="190:21">s</name><operator pos:start="190:22" pos:end="190:23">-&gt;</operator><name pos:start="190:24" pos:end="190:33">ham_palbuf</name><index pos:start="190:34" pos:end="190:38">[<expr pos:start="190:35" pos:end="190:37"><name pos:start="190:35" pos:end="190:35">i</name><operator pos:start="190:36" pos:end="190:36">*</operator><literal type="number" pos:start="190:37" pos:end="190:37">2</literal></expr>]</index></name>   <operator pos:start="190:42" pos:end="190:42">=</operator> <literal type="number" pos:start="190:44" pos:end="190:53">0xFF000000</literal></expr>;</expr_stmt> <comment type="line" pos:start="190:56" pos:end="190:94">// take direct color value from palette</comment>

                    <expr_stmt pos:start="192:21" pos:end="192:98"><expr pos:start="192:21" pos:end="192:97"><name pos:start="192:21" pos:end="192:40"><name pos:start="192:21" pos:end="192:21">s</name><operator pos:start="192:22" pos:end="192:23">-&gt;</operator><name pos:start="192:24" pos:end="192:33">ham_palbuf</name><index pos:start="192:34" pos:end="192:40">[<expr pos:start="192:35" pos:end="192:39"><name pos:start="192:35" pos:end="192:35">i</name><operator pos:start="192:36" pos:end="192:36">*</operator><literal type="number" pos:start="192:37" pos:end="192:37">2</literal><operator pos:start="192:38" pos:end="192:38">+</operator><literal type="number" pos:start="192:39" pos:end="192:39">1</literal></expr>]</index></name> <operator pos:start="192:42" pos:end="192:42">=</operator> <literal type="number" pos:start="192:44" pos:end="192:53">0xFF000000</literal> <operator pos:start="192:55" pos:end="192:55">|</operator> <call pos:start="192:57" pos:end="192:97"><name pos:start="192:57" pos:end="192:66">av_le2ne32</name><argument_list pos:start="192:67" pos:end="192:97">(<argument pos:start="192:68" pos:end="192:96"><expr pos:start="192:68" pos:end="192:96"><call pos:start="192:68" pos:end="192:96"><name pos:start="192:68" pos:end="192:75">gray2rgb</name><argument_list pos:start="192:76" pos:end="192:96">(<argument pos:start="192:77" pos:end="192:95"><expr pos:start="192:77" pos:end="192:95"><operator pos:start="192:77" pos:end="192:77">(</operator><name pos:start="192:78" pos:end="192:78">i</name> <operator pos:start="192:80" pos:end="192:80">*</operator> <literal type="number" pos:start="192:82" pos:end="192:84">255</literal><operator pos:start="192:85" pos:end="192:85">)</operator> <operator pos:start="192:87" pos:end="192:88">&gt;&gt;</operator> <name pos:start="192:90" pos:end="192:95"><name pos:start="192:90" pos:end="192:90">s</name><operator pos:start="192:91" pos:end="192:92">-&gt;</operator><name pos:start="192:93" pos:end="192:95">ham</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="196:13" pos:end="226:13">for <control pos:start="196:17" pos:end="196:37">(<init pos:start="196:18" pos:end="196:21"><expr pos:start="196:18" pos:end="196:20"><name pos:start="196:18" pos:end="196:18">i</name><operator pos:start="196:19" pos:end="196:19">=</operator><literal type="number" pos:start="196:20" pos:end="196:20">0</literal></expr>;</init> <condition pos:start="196:23" pos:end="196:32"><expr pos:start="196:23" pos:end="196:31"><name pos:start="196:23" pos:end="196:23">i</name> <operator pos:start="196:25" pos:end="196:25">&lt;</operator> <name pos:start="196:27" pos:end="196:31">count</name></expr>;</condition> <incr pos:start="196:34" pos:end="196:36"><expr pos:start="196:34" pos:end="196:36"><name pos:start="196:34" pos:end="196:34">i</name><operator pos:start="196:35" pos:end="196:36">++</operator></expr></incr>)</control> <block pos:start="196:39" pos:end="226:13">{<block_content pos:start="198:17" pos:end="226:13">

                <decl_stmt pos:start="198:17" pos:end="198:49"><decl pos:start="198:17" pos:end="198:48"><type pos:start="198:17" pos:end="198:24"><name pos:start="198:17" pos:end="198:24">uint32_t</name></type> <name pos:start="198:26" pos:end="198:28">tmp</name> <init pos:start="198:30" pos:end="198:48">= <expr pos:start="198:32" pos:end="198:48"><name pos:start="198:32" pos:end="198:32">i</name> <operator pos:start="198:34" pos:end="198:35">&lt;&lt;</operator> <operator pos:start="198:37" pos:end="198:37">(</operator><literal type="number" pos:start="198:38" pos:end="198:40">8</literal> <operator pos:start="198:40" pos:end="198:40">-</operator> <name pos:start="198:42" pos:end="198:47"><name pos:start="198:42" pos:end="198:42">s</name><operator pos:start="198:43" pos:end="198:44">-&gt;</operator><name pos:start="198:45" pos:end="198:47">ham</name></name><operator pos:start="198:48" pos:end="198:48">)</operator></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="200:17" pos:end="200:37"><expr pos:start="200:17" pos:end="200:36"><name pos:start="200:17" pos:end="200:19">tmp</name> <operator pos:start="200:21" pos:end="200:22">|=</operator> <name pos:start="200:24" pos:end="200:26">tmp</name> <operator pos:start="200:28" pos:end="200:29">&gt;&gt;</operator> <name pos:start="200:31" pos:end="200:36"><name pos:start="200:31" pos:end="200:31">s</name><operator pos:start="200:32" pos:end="200:33">-&gt;</operator><name pos:start="200:34" pos:end="200:36">ham</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="202:17" pos:end="202:60"><expr pos:start="202:17" pos:end="202:59"><name pos:start="202:17" pos:end="202:42"><name pos:start="202:17" pos:end="202:17">s</name><operator pos:start="202:18" pos:end="202:19">-&gt;</operator><name pos:start="202:20" pos:end="202:29">ham_palbuf</name><index pos:start="202:30" pos:end="202:42">[<expr pos:start="202:31" pos:end="202:41"><operator pos:start="202:31" pos:end="202:31">(</operator><name pos:start="202:32" pos:end="202:32">i</name><operator pos:start="202:33" pos:end="202:33">+</operator><name pos:start="202:34" pos:end="202:38">count</name><operator pos:start="202:39" pos:end="202:39">)</operator><operator pos:start="202:40" pos:end="202:40">*</operator><literal type="number" pos:start="202:41" pos:end="202:41">2</literal></expr>]</index></name>     <operator pos:start="202:48" pos:end="202:48">=</operator> <literal type="number" pos:start="202:50" pos:end="202:59">0xFF00FFFF</literal></expr>;</expr_stmt> <comment type="line" pos:start="202:62" pos:end="202:96">// just modify blue color component</comment>

                <expr_stmt pos:start="204:17" pos:end="204:60"><expr pos:start="204:17" pos:end="204:59"><name pos:start="204:17" pos:end="204:44"><name pos:start="204:17" pos:end="204:17">s</name><operator pos:start="204:18" pos:end="204:19">-&gt;</operator><name pos:start="204:20" pos:end="204:29">ham_palbuf</name><index pos:start="204:30" pos:end="204:44">[<expr pos:start="204:31" pos:end="204:43"><operator pos:start="204:31" pos:end="204:31">(</operator><name pos:start="204:32" pos:end="204:32">i</name><operator pos:start="204:33" pos:end="204:33">+</operator><name pos:start="204:34" pos:end="204:38">count</name><operator pos:start="204:39" pos:end="204:39">*</operator><literal type="number" pos:start="204:40" pos:end="204:40">2</literal><operator pos:start="204:41" pos:end="204:41">)</operator><operator pos:start="204:42" pos:end="204:42">*</operator><literal type="number" pos:start="204:43" pos:end="204:43">2</literal></expr>]</index></name>   <operator pos:start="204:48" pos:end="204:48">=</operator> <literal type="number" pos:start="204:50" pos:end="204:59">0xFFFFFF00</literal></expr>;</expr_stmt> <comment type="line" pos:start="204:62" pos:end="204:95">// just modify red color component</comment>

                <expr_stmt pos:start="206:17" pos:end="206:60"><expr pos:start="206:17" pos:end="206:59"><name pos:start="206:17" pos:end="206:44"><name pos:start="206:17" pos:end="206:17">s</name><operator pos:start="206:18" pos:end="206:19">-&gt;</operator><name pos:start="206:20" pos:end="206:29">ham_palbuf</name><index pos:start="206:30" pos:end="206:44">[<expr pos:start="206:31" pos:end="206:43"><operator pos:start="206:31" pos:end="206:31">(</operator><name pos:start="206:32" pos:end="206:32">i</name><operator pos:start="206:33" pos:end="206:33">+</operator><name pos:start="206:34" pos:end="206:38">count</name><operator pos:start="206:39" pos:end="206:39">*</operator><literal type="number" pos:start="206:40" pos:end="206:40">3</literal><operator pos:start="206:41" pos:end="206:41">)</operator><operator pos:start="206:42" pos:end="206:42">*</operator><literal type="number" pos:start="206:43" pos:end="206:43">2</literal></expr>]</index></name>   <operator pos:start="206:48" pos:end="206:48">=</operator> <literal type="number" pos:start="206:50" pos:end="206:59">0xFFFF00FF</literal></expr>;</expr_stmt> <comment type="line" pos:start="206:62" pos:end="206:97">// just modify green color component</comment>

                <expr_stmt pos:start="208:17" pos:end="208:72"><expr pos:start="208:17" pos:end="208:71"><name pos:start="208:17" pos:end="208:44"><name pos:start="208:17" pos:end="208:17">s</name><operator pos:start="208:18" pos:end="208:19">-&gt;</operator><name pos:start="208:20" pos:end="208:29">ham_palbuf</name><index pos:start="208:30" pos:end="208:44">[<expr pos:start="208:31" pos:end="208:43"><operator pos:start="208:31" pos:end="208:31">(</operator><name pos:start="208:32" pos:end="208:32">i</name><operator pos:start="208:33" pos:end="208:33">+</operator><name pos:start="208:34" pos:end="208:38">count</name><operator pos:start="208:39" pos:end="208:39">)</operator><operator pos:start="208:40" pos:end="208:40">*</operator><literal type="number" pos:start="208:41" pos:end="208:41">2</literal><operator pos:start="208:42" pos:end="208:42">+</operator><literal type="number" pos:start="208:43" pos:end="208:43">1</literal></expr>]</index></name>   <operator pos:start="208:48" pos:end="208:48">=</operator> <literal type="number" pos:start="208:50" pos:end="208:59">0xFF000000</literal> <operator pos:start="208:61" pos:end="208:61">|</operator> <name pos:start="208:63" pos:end="208:65">tmp</name> <operator pos:start="208:67" pos:end="208:68">&lt;&lt;</operator> <literal type="number" pos:start="208:70" pos:end="208:71">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="210:17" pos:end="210:66"><expr pos:start="210:17" pos:end="210:65"><name pos:start="210:17" pos:end="210:46"><name pos:start="210:17" pos:end="210:17">s</name><operator pos:start="210:18" pos:end="210:19">-&gt;</operator><name pos:start="210:20" pos:end="210:29">ham_palbuf</name><index pos:start="210:30" pos:end="210:46">[<expr pos:start="210:31" pos:end="210:45"><operator pos:start="210:31" pos:end="210:31">(</operator><name pos:start="210:32" pos:end="210:32">i</name><operator pos:start="210:33" pos:end="210:33">+</operator><name pos:start="210:34" pos:end="210:38">count</name><operator pos:start="210:39" pos:end="210:39">*</operator><literal type="number" pos:start="210:40" pos:end="210:40">2</literal><operator pos:start="210:41" pos:end="210:41">)</operator><operator pos:start="210:42" pos:end="210:42">*</operator><literal type="number" pos:start="210:43" pos:end="210:43">2</literal><operator pos:start="210:44" pos:end="210:44">+</operator><literal type="number" pos:start="210:45" pos:end="210:45">1</literal></expr>]</index></name> <operator pos:start="210:48" pos:end="210:48">=</operator> <literal type="number" pos:start="210:50" pos:end="210:59">0xFF000000</literal> <operator pos:start="210:61" pos:end="210:61">|</operator> <name pos:start="210:63" pos:end="210:65">tmp</name></expr>;</expr_stmt>

                <expr_stmt pos:start="212:17" pos:end="212:71"><expr pos:start="212:17" pos:end="212:70"><name pos:start="212:17" pos:end="212:46"><name pos:start="212:17" pos:end="212:17">s</name><operator pos:start="212:18" pos:end="212:19">-&gt;</operator><name pos:start="212:20" pos:end="212:29">ham_palbuf</name><index pos:start="212:30" pos:end="212:46">[<expr pos:start="212:31" pos:end="212:45"><operator pos:start="212:31" pos:end="212:31">(</operator><name pos:start="212:32" pos:end="212:32">i</name><operator pos:start="212:33" pos:end="212:33">+</operator><name pos:start="212:34" pos:end="212:38">count</name><operator pos:start="212:39" pos:end="212:39">*</operator><literal type="number" pos:start="212:40" pos:end="212:40">3</literal><operator pos:start="212:41" pos:end="212:41">)</operator><operator pos:start="212:42" pos:end="212:42">*</operator><literal type="number" pos:start="212:43" pos:end="212:43">2</literal><operator pos:start="212:44" pos:end="212:44">+</operator><literal type="number" pos:start="212:45" pos:end="212:45">1</literal></expr>]</index></name> <operator pos:start="212:48" pos:end="212:48">=</operator> <literal type="number" pos:start="212:50" pos:end="212:59">0xFF000000</literal> <operator pos:start="212:61" pos:end="212:61">|</operator> <name pos:start="212:63" pos:end="212:65">tmp</name> <operator pos:start="212:67" pos:end="212:68">&lt;&lt;</operator> <literal type="number" pos:start="212:70" pos:end="212:70">8</literal></expr>;</expr_stmt>


            <if_stmt pos:start="215:13" pos:end="226:13"><if pos:start="215:13" pos:end="226:13">if <condition pos:start="215:16" pos:end="215:44">(<expr pos:start="215:17" pos:end="215:43"><name pos:start="215:17" pos:end="215:26"><name pos:start="215:17" pos:end="215:17">s</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:26">masking</name></name> <operator pos:start="215:28" pos:end="215:29">==</operator> <name pos:start="215:31" pos:end="215:43">MASK_HAS_MASK</name></expr>)</condition> <block pos:start="215:46" pos:end="226:13">{<block_content pos:start="217:17" pos:end="226:13">

                <for pos:start="217:17" pos:end="219:85">for <control pos:start="217:21" pos:end="217:47">(<init pos:start="217:22" pos:end="217:27"><expr pos:start="217:22" pos:end="217:26"><name pos:start="217:22" pos:end="217:22">i</name> <operator pos:start="217:24" pos:end="217:24">=</operator> <literal type="number" pos:start="217:26" pos:end="217:26">0</literal></expr>;</init> <condition pos:start="217:29" pos:end="217:42"><expr pos:start="217:29" pos:end="217:41"><name pos:start="217:29" pos:end="217:29">i</name> <operator pos:start="217:31" pos:end="217:31">&lt;</operator> <name pos:start="217:33" pos:end="217:41">ham_count</name></expr>;</condition> <incr pos:start="217:44" pos:end="217:46"><expr pos:start="217:44" pos:end="217:46"><name pos:start="217:44" pos:end="217:44">i</name><operator pos:start="217:45" pos:end="217:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="219:21" pos:end="219:85"><block_content pos:start="219:21" pos:end="219:85">

                    <expr_stmt pos:start="219:21" pos:end="219:85"><expr pos:start="219:21" pos:end="219:84"><name pos:start="219:21" pos:end="219:52"><name pos:start="219:21" pos:end="219:21">s</name><operator pos:start="219:22" pos:end="219:23">-&gt;</operator><name pos:start="219:24" pos:end="219:33">ham_palbuf</name><index pos:start="219:34" pos:end="219:52">[<expr pos:start="219:35" pos:end="219:51"><operator pos:start="219:35" pos:end="219:35">(</operator><literal type="number" pos:start="219:36" pos:end="219:36">1</literal> <operator pos:start="219:38" pos:end="219:39">&lt;&lt;</operator> <name pos:start="219:41" pos:end="219:46"><name pos:start="219:41" pos:end="219:41">s</name><operator pos:start="219:42" pos:end="219:43">-&gt;</operator><name pos:start="219:44" pos:end="219:46">bpp</name></name><operator pos:start="219:47" pos:end="219:47">)</operator> <operator pos:start="219:49" pos:end="219:49">+</operator> <name pos:start="219:51" pos:end="219:51">i</name></expr>]</index></name> <operator pos:start="219:54" pos:end="219:54">=</operator> <name pos:start="219:56" pos:end="219:71"><name pos:start="219:56" pos:end="219:56">s</name><operator pos:start="219:57" pos:end="219:58">-&gt;</operator><name pos:start="219:59" pos:end="219:68">ham_palbuf</name><index pos:start="219:69" pos:end="219:71">[<expr pos:start="219:70" pos:end="219:70"><name pos:start="219:70" pos:end="219:70">i</name></expr>]</index></name> <operator pos:start="219:73" pos:end="219:73">|</operator> <literal type="number" pos:start="219:75" pos:end="219:84">0xFF000000</literal></expr>;</expr_stmt></block_content></block></for>






    <return pos:start="226:5" pos:end="226:13">return <expr pos:start="226:12" pos:end="226:12"><literal type="number" pos:start="226:12" pos:end="226:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
