<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/935.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">qemu_irq</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:22">openpic_init</name> <parameter_list pos:start="1:24" pos:end="3:58">(<parameter pos:start="1:25" pos:end="1:35"><decl pos:start="1:25" pos:end="1:35"><type pos:start="1:25" pos:end="1:35"><name pos:start="1:25" pos:end="1:30">PCIBus</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">bus</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:40">int</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:52">pmem_index</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:65">nb_cpus</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">qemu_irq</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier><modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">irqs</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:57"><decl pos:start="3:42" pos:end="3:57"><type pos:start="3:42" pos:end="3:57"><name pos:start="3:42" pos:end="3:49">qemu_irq</name></type> <name pos:start="3:51" pos:end="3:57">irq_out</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:66">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">openpic_t</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">opp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">pci_conf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">m</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:49">/* XXX: for now, only one CPU is supported */</comment>

    <if_stmt pos:start="17:5" pos:end="19:20"><if pos:start="17:5" pos:end="19:20">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:15">nb_cpus</name> <operator pos:start="17:17" pos:end="17:18">!=</operator> <literal type="number" pos:start="17:20" pos:end="17:20">1</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:20"><block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="55:5"><if pos:start="21:5" pos:end="51:5">if <condition pos:start="21:8" pos:end="21:12">(<expr pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">bus</name></expr>)</condition> <block pos:start="21:14" pos:end="51:5">{<block_content pos:start="23:9" pos:end="49:76">

        <expr_stmt pos:start="23:9" pos:end="25:63"><expr pos:start="23:9" pos:end="25:62"><name pos:start="23:9" pos:end="23:11">opp</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <operator pos:start="23:15" pos:end="23:15">(</operator><name pos:start="23:16" pos:end="23:24">openpic_t</name> <operator pos:start="23:26" pos:end="23:26">*</operator><operator pos:start="23:27" pos:end="23:27">)</operator><call pos:start="23:28" pos:end="25:62"><name pos:start="23:28" pos:end="23:46">pci_register_device</name><argument_list pos:start="23:47" pos:end="25:62">(<argument pos:start="23:48" pos:end="23:50"><expr pos:start="23:48" pos:end="23:50"><name pos:start="23:48" pos:end="23:50">bus</name></expr></argument>, <argument pos:start="23:53" pos:end="23:61"><expr pos:start="23:53" pos:end="23:61"><literal type="string" pos:start="23:53" pos:end="23:61">"OpenPIC"</literal></expr></argument>, <argument pos:start="23:64" pos:end="23:80"><expr pos:start="23:64" pos:end="23:80"><sizeof pos:start="23:64" pos:end="23:80">sizeof<argument_list pos:start="23:70" pos:end="23:80">(<argument pos:start="23:71" pos:end="23:79"><expr pos:start="23:71" pos:end="23:79"><name pos:start="23:71" pos:end="23:79">openpic_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                               <argument pos:start="25:48" pos:end="25:49"><expr pos:start="25:48" pos:end="25:49"><operator pos:start="25:48" pos:end="25:48">-</operator><literal type="number" pos:start="25:49" pos:end="25:49">1</literal></expr></argument>, <argument pos:start="25:52" pos:end="25:55"><expr pos:start="25:52" pos:end="25:55"><name pos:start="25:52" pos:end="25:55">NULL</name></expr></argument>, <argument pos:start="25:58" pos:end="25:61"><expr pos:start="25:58" pos:end="25:61"><name pos:start="25:58" pos:end="25:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="29:24"><if pos:start="27:9" pos:end="29:24">if <condition pos:start="27:12" pos:end="27:24">(<expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:15">opp</name> <operator pos:start="27:17" pos:end="27:18">==</operator> <name pos:start="27:20" pos:end="27:23">NULL</name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:24"><block_content pos:start="29:13" pos:end="29:24">

            <return pos:start="29:13" pos:end="29:24">return <expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:16">pci_conf</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:38"><name pos:start="31:20" pos:end="31:22">opp</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:31">pci_dev</name><operator pos:start="31:32" pos:end="31:32">.</operator><name pos:start="31:33" pos:end="31:38">config</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:62"><expr pos:start="33:9" pos:end="33:61"><call pos:start="33:9" pos:end="33:61"><name pos:start="33:9" pos:end="33:32">pci_config_set_vendor_id</name><argument_list pos:start="33:33" pos:end="33:61">(<argument pos:start="33:34" pos:end="33:41"><expr pos:start="33:34" pos:end="33:41"><name pos:start="33:34" pos:end="33:41">pci_conf</name></expr></argument>, <argument pos:start="33:44" pos:end="33:60"><expr pos:start="33:44" pos:end="33:60"><name pos:start="33:44" pos:end="33:60">PCI_VENDOR_ID_IBM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:71"><expr pos:start="35:9" pos:end="35:70"><call pos:start="35:9" pos:end="35:70"><name pos:start="35:9" pos:end="35:32">pci_config_set_device_id</name><argument_list pos:start="35:33" pos:end="35:70">(<argument pos:start="35:34" pos:end="35:41"><expr pos:start="35:34" pos:end="35:41"><name pos:start="35:34" pos:end="35:41">pci_conf</name></expr></argument>, <argument pos:start="35:44" pos:end="35:69"><expr pos:start="35:44" pos:end="35:69"><name pos:start="35:44" pos:end="35:69">PCI_DEVICE_ID_IBM_OPENPIC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:63"><expr pos:start="37:9" pos:end="37:62"><call pos:start="37:9" pos:end="37:62"><name pos:start="37:9" pos:end="37:28">pci_config_set_class</name><argument_list pos:start="37:29" pos:end="37:62">(<argument pos:start="37:30" pos:end="37:37"><expr pos:start="37:30" pos:end="37:37"><name pos:start="37:30" pos:end="37:37">pci_conf</name></expr></argument>, <argument pos:start="37:40" pos:end="37:61"><expr pos:start="37:40" pos:end="37:61"><name pos:start="37:40" pos:end="37:61">PCI_CLASS_SYSTEM_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="37:65" pos:end="37:73">// FIXME?</comment>

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:16">pci_conf</name><index pos:start="39:17" pos:end="39:33">[<expr pos:start="39:18" pos:end="39:32"><name pos:start="39:18" pos:end="39:32">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="39:35" pos:end="39:35">=</operator> <name pos:start="39:37" pos:end="39:58">PCI_HEADER_TYPE_NORMAL</name></expr>;</expr_stmt> <comment type="line" pos:start="39:61" pos:end="39:74">// header_type</comment>

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:16">pci_conf</name><index pos:start="41:17" pos:end="41:22">[<expr pos:start="41:18" pos:end="41:21"><literal type="number" pos:start="41:18" pos:end="41:21">0x3d</literal></expr>]</index></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:29">0x00</literal></expr>;</expr_stmt> <comment type="line" pos:start="41:32" pos:end="41:50">// no interrupt pin</comment>



        <comment type="block" pos:start="45:9" pos:end="45:33">/* Register I/O spaces */</comment>

        <expr_stmt pos:start="47:9" pos:end="49:76"><expr pos:start="47:9" pos:end="49:75"><call pos:start="47:9" pos:end="49:75"><name pos:start="47:9" pos:end="47:24">pci_register_bar</name><argument_list pos:start="47:25" pos:end="49:75">(<argument pos:start="47:26" pos:end="47:41"><expr pos:start="47:26" pos:end="47:41"><operator pos:start="47:26" pos:end="47:26">(</operator><name pos:start="47:27" pos:end="47:35">PCIDevice</name> <operator pos:start="47:37" pos:end="47:37">*</operator><operator pos:start="47:38" pos:end="47:38">)</operator><name pos:start="47:39" pos:end="47:41">opp</name></expr></argument>, <argument pos:start="47:44" pos:end="47:44"><expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:53"><expr pos:start="47:47" pos:end="47:53"><literal type="number" pos:start="47:47" pos:end="47:53">0x40000</literal></expr></argument>,

                               <argument pos:start="49:32" pos:end="49:60"><expr pos:start="49:32" pos:end="49:60"><name pos:start="49:32" pos:end="49:60">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="49:63" pos:end="49:74"><expr pos:start="49:63" pos:end="49:74"><operator pos:start="49:63" pos:end="49:63">&amp;</operator><name pos:start="49:64" pos:end="49:74">openpic_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:46">

        <expr_stmt pos:start="53:9" pos:end="53:46"><expr pos:start="53:9" pos:end="53:45"><name pos:start="53:9" pos:end="53:11">opp</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:45"><name pos:start="53:15" pos:end="53:26">qemu_mallocz</name><argument_list pos:start="53:27" pos:end="53:45">(<argument pos:start="53:28" pos:end="53:44"><expr pos:start="53:28" pos:end="53:44"><sizeof pos:start="53:28" pos:end="53:44">sizeof<argument_list pos:start="53:34" pos:end="53:44">(<argument pos:start="53:35" pos:end="53:43"><expr pos:start="53:35" pos:end="53:43"><name pos:start="53:35" pos:end="53:43">openpic_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:64"><expr pos:start="57:5" pos:end="59:63"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:7">opp</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:18">mem_index</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <call pos:start="57:22" pos:end="59:63"><name pos:start="57:22" pos:end="57:43">cpu_register_io_memory</name><argument_list pos:start="57:44" pos:end="59:63">(<argument pos:start="57:45" pos:end="57:56"><expr pos:start="57:45" pos:end="57:56"><name pos:start="57:45" pos:end="57:56">openpic_read</name></expr></argument>,

                                            <argument pos:start="59:45" pos:end="59:57"><expr pos:start="59:45" pos:end="59:57"><name pos:start="59:45" pos:end="59:57">openpic_write</name></expr></argument>, <argument pos:start="59:60" pos:end="59:62"><expr pos:start="59:60" pos:end="59:62"><name pos:start="59:60" pos:end="59:62">opp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="63:5" pos:end="63:33">//    isu_base &amp;= 0xFFFC0000;</comment>

    <expr_stmt pos:start="65:5" pos:end="65:27"><expr pos:start="65:5" pos:end="65:26"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:7">opp</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:16">nb_cpus</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:26">nb_cpus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:16"><name pos:start="67:5" pos:end="67:7">opp</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:16">max_irq</name></name> <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:34">OPENPIC_MAX_IRQ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:17"><name pos:start="69:5" pos:end="69:7">opp</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:17">irq_ipi0</name></name> <operator pos:start="69:19" pos:end="69:19">=</operator> <name pos:start="69:21" pos:end="69:36">OPENPIC_IRQ_IPI0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:7">opp</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:17">irq_tim0</name></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:36">OPENPIC_IRQ_TIM0</name></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:23">/* Set IRQ types */</comment>

    <for pos:start="75:5" pos:end="79:5">for <control pos:start="75:9" pos:end="75:41">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:36"><expr pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:17">i</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <name pos:start="75:21" pos:end="75:35">OPENPIC_EXT_IRQ</name></expr>;</condition> <incr pos:start="75:38" pos:end="75:40"><expr pos:start="75:38" pos:end="75:40"><name pos:start="75:38" pos:end="75:38">i</name><operator pos:start="75:39" pos:end="75:40">++</operator></expr></incr>)</control> <block pos:start="75:43" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:40">

        <expr_stmt pos:start="77:9" pos:end="77:40"><expr pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:11">opp</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:16">src</name><index pos:start="77:17" pos:end="77:19">[<expr pos:start="77:18" pos:end="77:18"><name pos:start="77:18" pos:end="77:18">i</name></expr>]</index></name><operator pos:start="77:20" pos:end="77:20">.</operator><name pos:start="77:21" pos:end="77:24">type</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <name pos:start="77:28" pos:end="77:39">IRQ_EXTERNAL</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="81:5" pos:end="88:0">for <control pos:start="81:9" pos:end="81:37">(<init pos:start="81:10" pos:end="81:10">;</init> <condition pos:start="81:12" pos:end="81:32"><expr pos:start="81:12" pos:end="81:31"><name pos:start="81:12" pos:end="81:12">i</name> <operator pos:start="81:14" pos:end="81:14">&lt;</operator> <name pos:start="81:16" pos:end="81:31">OPENPIC_IRQ_TIM0</name></expr>;</condition> <incr pos:start="81:34" pos:end="81:36"><expr pos:start="81:34" pos:end="81:36"><name pos:start="81:34" pos:end="81:34">i</name><operator pos:start="81:35" pos:end="81:36">++</operator></expr></incr>)</control> <block pos:start="81:39" pos:end="88:0">{<block_content pos:start="83:9" pos:end="83:39">

        <expr_stmt pos:start="83:9" pos:end="83:39"><expr pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:11">opp</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:16">src</name><index pos:start="83:17" pos:end="83:19">[<expr pos:start="83:18" pos:end="83:18"><name pos:start="83:18" pos:end="83:18">i</name></expr>]</index></name><operator pos:start="83:20" pos:end="83:20">.</operator><name pos:start="83:21" pos:end="83:24">type</name> <operator pos:start="83:26" pos:end="83:26">=</operator> <name pos:start="83:28" pos:end="83:38">IRQ_SPECIAL</name></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:if pos:start="87:1" pos:end="87:15">#<cpp:directive pos:start="87:2" pos:end="87:3">if</cpp:directive> <expr pos:start="87:5" pos:end="87:15"><name pos:start="87:5" pos:end="87:11">MAX_IPI</name> <operator pos:start="87:13" pos:end="87:13">&gt;</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr></cpp:if>

    <expr_stmt pos:start="89:5" pos:end="92:0"><expr pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:5">m</name> <operator pos:start="89:7" pos:end="89:7">=</operator> <name pos:start="89:9" pos:end="89:24">OPENPIC_IRQ_IPI0</name></expr>;</expr_stmt>

<cpp:else pos:start="91:1" pos:end="91:5">#<cpp:directive pos:start="91:2" pos:end="91:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="93:5" pos:end="96:0"><expr pos:start="93:5" pos:end="93:24"><name pos:start="93:5" pos:end="93:5">m</name> <operator pos:start="93:7" pos:end="93:7">=</operator> <name pos:start="93:9" pos:end="93:24">OPENPIC_IRQ_DBL0</name></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

    <for pos:start="97:5" pos:end="101:5">for <control pos:start="97:9" pos:end="97:22">(<init pos:start="97:10" pos:end="97:10">;</init> <condition pos:start="97:12" pos:end="97:17"><expr pos:start="97:12" pos:end="97:16"><name pos:start="97:12" pos:end="97:12">i</name> <operator pos:start="97:14" pos:end="97:14">&lt;</operator> <name pos:start="97:16" pos:end="97:16">m</name></expr>;</condition> <incr pos:start="97:19" pos:end="97:21"><expr pos:start="97:19" pos:end="97:21"><name pos:start="97:19" pos:end="97:19">i</name><operator pos:start="97:20" pos:end="97:21">++</operator></expr></incr>)</control> <block pos:start="97:24" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:37">

        <expr_stmt pos:start="99:9" pos:end="99:37"><expr pos:start="99:9" pos:end="99:36"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:11">opp</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:16">src</name><index pos:start="99:17" pos:end="99:19">[<expr pos:start="99:18" pos:end="99:18"><name pos:start="99:18" pos:end="99:18">i</name></expr>]</index></name><operator pos:start="99:20" pos:end="99:20">.</operator><name pos:start="99:21" pos:end="99:24">type</name> <operator pos:start="99:26" pos:end="99:26">=</operator> <name pos:start="99:28" pos:end="99:36">IRQ_TIMER</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="103:5" pos:end="107:5">for <control pos:start="103:9" pos:end="103:36">(<init pos:start="103:10" pos:end="103:10">;</init> <condition pos:start="103:12" pos:end="103:31"><expr pos:start="103:12" pos:end="103:30"><name pos:start="103:12" pos:end="103:12">i</name> <operator pos:start="103:14" pos:end="103:14">&lt;</operator> <name pos:start="103:16" pos:end="103:30">OPENPIC_MAX_IRQ</name></expr>;</condition> <incr pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:33">i</name><operator pos:start="103:34" pos:end="103:35">++</operator></expr></incr>)</control> <block pos:start="103:38" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:40">

        <expr_stmt pos:start="105:9" pos:end="105:40"><expr pos:start="105:9" pos:end="105:39"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:11">opp</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:16">src</name><index pos:start="105:17" pos:end="105:19">[<expr pos:start="105:18" pos:end="105:18"><name pos:start="105:18" pos:end="105:18">i</name></expr>]</index></name><operator pos:start="105:20" pos:end="105:20">.</operator><name pos:start="105:21" pos:end="105:24">type</name> <operator pos:start="105:26" pos:end="105:26">=</operator> <name pos:start="105:28" pos:end="105:39">IRQ_INTERNAL</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="109:5" pos:end="111:35">for <control pos:start="109:9" pos:end="109:33">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:28"><expr pos:start="109:17" pos:end="109:27"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:27">nb_cpus</name></expr>;</condition> <incr pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><name pos:start="109:30" pos:end="109:30">i</name><operator pos:start="109:31" pos:end="109:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:9" pos:end="111:35"><block_content pos:start="111:9" pos:end="111:35">

        <expr_stmt pos:start="111:9" pos:end="111:35"><expr pos:start="111:9" pos:end="111:34"><name pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:11">opp</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:16">dst</name><index pos:start="111:17" pos:end="111:19">[<expr pos:start="111:18" pos:end="111:18"><name pos:start="111:18" pos:end="111:18">i</name></expr>]</index></name><operator pos:start="111:20" pos:end="111:20">.</operator><name pos:start="111:21" pos:end="111:24">irqs</name> <operator pos:start="111:26" pos:end="111:26">=</operator> <name pos:start="111:28" pos:end="111:34"><name pos:start="111:28" pos:end="111:31">irqs</name><index pos:start="111:32" pos:end="111:34">[<expr pos:start="111:33" pos:end="111:33"><name pos:start="111:33" pos:end="111:33">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="113:5" pos:end="113:27"><expr pos:start="113:5" pos:end="113:26"><name pos:start="113:5" pos:end="113:16"><name pos:start="113:5" pos:end="113:7">opp</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:16">irq_out</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:26">irq_out</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:23"><expr pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:18"><name pos:start="115:5" pos:end="115:7">opp</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:18">need_swap</name></name> <operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:70"><expr pos:start="119:5" pos:end="119:69"><call pos:start="119:5" pos:end="119:69"><name pos:start="119:5" pos:end="119:19">register_savevm</name><argument_list pos:start="119:20" pos:end="119:69">(<argument pos:start="119:21" pos:end="119:29"><expr pos:start="119:21" pos:end="119:29"><literal type="string" pos:start="119:21" pos:end="119:29">"openpic"</literal></expr></argument>, <argument pos:start="119:32" pos:end="119:32"><expr pos:start="119:32" pos:end="119:32"><literal type="number" pos:start="119:32" pos:end="119:32">0</literal></expr></argument>, <argument pos:start="119:35" pos:end="119:35"><expr pos:start="119:35" pos:end="119:35"><literal type="number" pos:start="119:35" pos:end="119:35">2</literal></expr></argument>, <argument pos:start="119:38" pos:end="119:49"><expr pos:start="119:38" pos:end="119:49"><name pos:start="119:38" pos:end="119:49">openpic_save</name></expr></argument>, <argument pos:start="119:52" pos:end="119:63"><expr pos:start="119:52" pos:end="119:63"><name pos:start="119:52" pos:end="119:63">openpic_load</name></expr></argument>, <argument pos:start="119:66" pos:end="119:68"><expr pos:start="119:66" pos:end="119:68"><name pos:start="119:66" pos:end="119:68">opp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:44"><expr pos:start="121:5" pos:end="121:43"><call pos:start="121:5" pos:end="121:43"><name pos:start="121:5" pos:end="121:23">qemu_register_reset</name><argument_list pos:start="121:24" pos:end="121:43">(<argument pos:start="121:25" pos:end="121:37"><expr pos:start="121:25" pos:end="121:37"><name pos:start="121:25" pos:end="121:37">openpic_reset</name></expr></argument>, <argument pos:start="121:40" pos:end="121:42"><expr pos:start="121:40" pos:end="121:42"><name pos:start="121:40" pos:end="121:42">opp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:39"><expr pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:18"><name pos:start="125:5" pos:end="125:7">opp</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:18">irq_raise</name></name> <operator pos:start="125:20" pos:end="125:20">=</operator> <name pos:start="125:22" pos:end="125:38">openpic_irq_raise</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:31"><expr pos:start="127:5" pos:end="127:30"><name pos:start="127:5" pos:end="127:14"><name pos:start="127:5" pos:end="127:7">opp</name><operator pos:start="127:8" pos:end="127:9">-&gt;</operator><name pos:start="127:10" pos:end="127:14">reset</name></name> <operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:30">openpic_reset</name></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="133:37"><if pos:start="131:5" pos:end="133:37">if <condition pos:start="131:8" pos:end="131:19">(<expr pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:18">pmem_index</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:37"><block_content pos:start="133:9" pos:end="133:37">

        <expr_stmt pos:start="133:9" pos:end="133:37"><expr pos:start="133:9" pos:end="133:36"><operator pos:start="133:9" pos:end="133:9">*</operator><name pos:start="133:10" pos:end="133:19">pmem_index</name> <operator pos:start="133:21" pos:end="133:21">=</operator> <name pos:start="133:23" pos:end="133:36"><name pos:start="133:23" pos:end="133:25">opp</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:36">mem_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="137:5" pos:end="137:66">return <expr pos:start="137:12" pos:end="137:65"><call pos:start="137:12" pos:end="137:65"><name pos:start="137:12" pos:end="137:29">qemu_allocate_irqs</name><argument_list pos:start="137:30" pos:end="137:65">(<argument pos:start="137:31" pos:end="137:45"><expr pos:start="137:31" pos:end="137:45"><name pos:start="137:31" pos:end="137:45">openpic_set_irq</name></expr></argument>, <argument pos:start="137:48" pos:end="137:50"><expr pos:start="137:48" pos:end="137:50"><name pos:start="137:48" pos:end="137:50">opp</name></expr></argument>, <argument pos:start="137:53" pos:end="137:64"><expr pos:start="137:53" pos:end="137:64"><name pos:start="137:53" pos:end="137:64"><name pos:start="137:53" pos:end="137:55">opp</name><operator pos:start="137:56" pos:end="137:57">-&gt;</operator><name pos:start="137:58" pos:end="137:64">max_irq</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
