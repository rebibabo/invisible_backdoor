<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2356.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="1:42">(<parameter pos:start="1:25" pos:end="1:41"><decl pos:start="1:25" pos:end="1:41"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:38">WmallDecodeCtx</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:23">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:17">GetBitContext</name><modifier pos:start="5:18" pos:end="5:18">*</modifier></type> <name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:30"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">more_frames</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <comment type="block" format="doxygen" pos:start="15:5" pos:end="15:53">/** check for potential output buffer overflow */</comment>

    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="17:77">(<expr pos:start="17:9" pos:end="17:76"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:23">num_channels</name></name> <operator pos:start="17:25" pos:end="17:25">*</operator> <name pos:start="17:27" pos:end="17:46"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:46">samples_per_frame</name></name> <operator pos:start="17:48" pos:end="17:48">&gt;</operator> <name pos:start="17:50" pos:end="17:63"><name pos:start="17:50" pos:end="17:50">s</name><operator pos:start="17:51" pos:end="17:52">-&gt;</operator><name pos:start="17:53" pos:end="17:63">samples_end</name></name> <operator pos:start="17:65" pos:end="17:65">-</operator> <name pos:start="17:67" pos:end="17:76"><name pos:start="17:67" pos:end="17:67">s</name><operator pos:start="17:68" pos:end="17:69">-&gt;</operator><name pos:start="17:70" pos:end="17:76">samples</name></name></expr>)</condition> <block pos:start="17:79" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:17">

        <comment type="block" format="doxygen" pos:start="19:9" pos:end="19:66">/** return an error if no frame could be decoded at all */</comment>

        <expr_stmt pos:start="21:9" pos:end="23:60"><expr pos:start="21:9" pos:end="23:59"><call pos:start="21:9" pos:end="23:59"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="23:59">(<argument pos:start="21:16" pos:end="21:23"><expr pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:23">avctx</name></name></expr></argument>, <argument pos:start="21:26" pos:end="21:37"><expr pos:start="21:26" pos:end="21:37"><name pos:start="21:26" pos:end="21:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="23:16" pos:end="23:58"><expr pos:start="23:16" pos:end="23:58"><literal type="string" pos:start="23:16" pos:end="23:58">"not enough space for the output samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:22">packet_loss</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="33:5" pos:end="33:27">/** get frame length */</comment>

    <if_stmt pos:start="35:5" pos:end="37:47"><if pos:start="35:5" pos:end="37:47">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:21">len_prefix</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:47"><block_content pos:start="37:9" pos:end="37:47">

        <expr_stmt pos:start="37:9" pos:end="37:47"><expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:11">len</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:46"><name pos:start="37:15" pos:end="37:22">get_bits</name><argument_list pos:start="37:23" pos:end="37:46">(<argument pos:start="37:24" pos:end="37:25"><expr pos:start="37:24" pos:end="37:25"><name pos:start="37:24" pos:end="37:25">gb</name></expr></argument>, <argument pos:start="37:28" pos:end="37:45"><expr pos:start="37:28" pos:end="37:45"><name pos:start="37:28" pos:end="37:45"><name pos:start="37:28" pos:end="37:28">s</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:45">log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="41:5" pos:end="41:34">/** decode tile information */</comment>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:26">(<expr pos:start="43:9" pos:end="43:25"><call pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:22">decode_tilehdr</name><argument_list pos:start="43:23" pos:end="43:25">(<argument pos:start="43:24" pos:end="43:24"><expr pos:start="43:24" pos:end="43:24"><name pos:start="43:24" pos:end="43:24">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:28" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:17">

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:22">packet_loss</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">1</literal></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="53:5" pos:end="53:24">/** read drc info */</comment>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:37">(<expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:36">dynamic_range_compression</name></name></expr>)</condition> <block pos:start="55:39" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:38">

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">drc_gain</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:37"><name pos:start="57:23" pos:end="57:30">get_bits</name><argument_list pos:start="57:31" pos:end="57:37">(<argument pos:start="57:32" pos:end="57:33"><expr pos:start="57:32" pos:end="57:33"><name pos:start="57:32" pos:end="57:33">gb</name></expr></argument>, <argument pos:start="57:36" pos:end="57:36"><expr pos:start="57:36" pos:end="57:36"><literal type="number" pos:start="57:36" pos:end="57:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="63:5" pos:end="65:70">/** no idea what these are for, might be the number of samples

        that need to be skipped at the beginning or end of a stream */</comment>

    <if_stmt pos:start="67:5" pos:end="97:5"><if pos:start="67:5" pos:end="97:5">if <condition pos:start="67:8" pos:end="67:22">(<expr pos:start="67:9" pos:end="67:21"><call pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17">get_bits1</name><argument_list pos:start="67:18" pos:end="67:21">(<argument pos:start="67:19" pos:end="67:20"><expr pos:start="67:19" pos:end="67:20"><name pos:start="67:19" pos:end="67:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:24" pos:end="97:5">{<block_content pos:start="69:9" pos:end="93:9">

        <decl_stmt pos:start="69:9" pos:end="69:17"><decl pos:start="69:9" pos:end="69:16"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:16">skip</name></decl>;</decl_stmt>



        <comment type="block" format="doxygen" pos:start="73:9" pos:end="73:47">/** usually true for the first frame */</comment>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:26">(<expr pos:start="75:13" pos:end="75:25"><call pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:21">get_bits1</name><argument_list pos:start="75:22" pos:end="75:25">(<argument pos:start="75:23" pos:end="75:24"><expr pos:start="75:23" pos:end="75:24"><name pos:start="75:23" pos:end="75:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:28" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:56">

            <expr_stmt pos:start="77:13" pos:end="77:67"><expr pos:start="77:13" pos:end="77:66"><name pos:start="77:13" pos:end="77:16">skip</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:66"><name pos:start="77:20" pos:end="77:27">get_bits</name><argument_list pos:start="77:28" pos:end="77:66">(<argument pos:start="77:29" pos:end="77:30"><expr pos:start="77:29" pos:end="77:30"><name pos:start="77:29" pos:end="77:30">gb</name></expr></argument>, <argument pos:start="77:33" pos:end="77:65"><expr pos:start="77:33" pos:end="77:65"><call pos:start="77:33" pos:end="77:65"><name pos:start="77:33" pos:end="77:39">av_log2</name><argument_list pos:start="77:40" pos:end="77:65">(<argument pos:start="77:41" pos:end="77:64"><expr pos:start="77:41" pos:end="77:64"><name pos:start="77:41" pos:end="77:60"><name pos:start="77:41" pos:end="77:41">s</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:60">samples_per_frame</name></name> <operator pos:start="77:62" pos:end="77:62">*</operator> <literal type="number" pos:start="77:64" pos:end="77:64">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:56"><expr pos:start="79:13" pos:end="79:55"><call pos:start="79:13" pos:end="79:55"><name pos:start="79:13" pos:end="79:19">dprintf</name><argument_list pos:start="79:20" pos:end="79:55">(<argument pos:start="79:21" pos:end="79:28"><expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:21">s</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:28">avctx</name></name></expr></argument>, <argument pos:start="79:31" pos:end="79:48"><expr pos:start="79:31" pos:end="79:48"><literal type="string" pos:start="79:31" pos:end="79:48">"start skip: %i\n"</literal></expr></argument>, <argument pos:start="79:51" pos:end="79:54"><expr pos:start="79:51" pos:end="79:54"><name pos:start="79:51" pos:end="79:54">skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" format="doxygen" pos:start="85:9" pos:end="85:48">/** sometimes true for the last frame */</comment>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:26">(<expr pos:start="87:13" pos:end="87:25"><call pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:21">get_bits1</name><argument_list pos:start="87:22" pos:end="87:25">(<argument pos:start="87:23" pos:end="87:24"><expr pos:start="87:23" pos:end="87:24"><name pos:start="87:23" pos:end="87:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:28" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:54">

            <expr_stmt pos:start="89:13" pos:end="89:67"><expr pos:start="89:13" pos:end="89:66"><name pos:start="89:13" pos:end="89:16">skip</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:66"><name pos:start="89:20" pos:end="89:27">get_bits</name><argument_list pos:start="89:28" pos:end="89:66">(<argument pos:start="89:29" pos:end="89:30"><expr pos:start="89:29" pos:end="89:30"><name pos:start="89:29" pos:end="89:30">gb</name></expr></argument>, <argument pos:start="89:33" pos:end="89:65"><expr pos:start="89:33" pos:end="89:65"><call pos:start="89:33" pos:end="89:65"><name pos:start="89:33" pos:end="89:39">av_log2</name><argument_list pos:start="89:40" pos:end="89:65">(<argument pos:start="89:41" pos:end="89:64"><expr pos:start="89:41" pos:end="89:64"><name pos:start="89:41" pos:end="89:60"><name pos:start="89:41" pos:end="89:41">s</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:60">samples_per_frame</name></name> <operator pos:start="89:62" pos:end="89:62">*</operator> <literal type="number" pos:start="89:64" pos:end="89:64">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:54"><expr pos:start="91:13" pos:end="91:53"><call pos:start="91:13" pos:end="91:53"><name pos:start="91:13" pos:end="91:19">dprintf</name><argument_list pos:start="91:20" pos:end="91:53">(<argument pos:start="91:21" pos:end="91:28"><expr pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:21">s</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:28">avctx</name></name></expr></argument>, <argument pos:start="91:31" pos:end="91:46"><expr pos:start="91:31" pos:end="91:46"><literal type="string" pos:start="91:31" pos:end="91:46">"end skip: %i\n"</literal></expr></argument>, <argument pos:start="91:49" pos:end="91:52"><expr pos:start="91:49" pos:end="91:52"><name pos:start="91:49" pos:end="91:52">skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="101:5" pos:end="101:32">/** reset subframe states */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:32"><expr pos:start="103:5" pos:end="103:31"><name pos:start="103:5" pos:end="103:27"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:27">parsed_all_subframes</name></name> <operator pos:start="103:29" pos:end="103:29">=</operator> <literal type="number" pos:start="103:31" pos:end="103:31">0</literal></expr>;</expr_stmt>

    <for pos:start="105:5" pos:end="113:5">for <control pos:start="105:9" pos:end="105:41">(<init pos:start="105:10" pos:end="105:15"><expr pos:start="105:10" pos:end="105:14"><name pos:start="105:10" pos:end="105:10">i</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>;</init> <condition pos:start="105:17" pos:end="105:36"><expr pos:start="105:17" pos:end="105:35"><name pos:start="105:17" pos:end="105:17">i</name> <operator pos:start="105:19" pos:end="105:19">&lt;</operator> <name pos:start="105:21" pos:end="105:35"><name pos:start="105:21" pos:end="105:21">s</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:35">num_channels</name></name></expr>;</condition> <incr pos:start="105:38" pos:end="105:40"><expr pos:start="105:38" pos:end="105:40"><name pos:start="105:38" pos:end="105:38">i</name><operator pos:start="105:39" pos:end="105:40">++</operator></expr></incr>)</control> <block pos:start="105:43" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:42">

        <expr_stmt pos:start="107:9" pos:end="107:42"><expr pos:start="107:9" pos:end="107:41"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:18">channel</name><index pos:start="107:19" pos:end="107:21">[<expr pos:start="107:20" pos:end="107:20"><name pos:start="107:20" pos:end="107:20">i</name></expr>]</index></name><operator pos:start="107:22" pos:end="107:22">.</operator><name pos:start="107:23" pos:end="107:37">decoded_samples</name> <operator pos:start="107:39" pos:end="107:39">=</operator> <literal type="number" pos:start="107:41" pos:end="107:41">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:42"><expr pos:start="109:9" pos:end="109:41"><name pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:18">channel</name><index pos:start="109:19" pos:end="109:21">[<expr pos:start="109:20" pos:end="109:20"><name pos:start="109:20" pos:end="109:20">i</name></expr>]</index></name><operator pos:start="109:22" pos:end="109:22">.</operator><name pos:start="109:23" pos:end="109:34">cur_subframe</name>    <operator pos:start="109:39" pos:end="109:39">=</operator> <literal type="number" pos:start="109:41" pos:end="109:41">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:42"><expr pos:start="111:9" pos:end="111:41"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:18">channel</name><index pos:start="111:19" pos:end="111:21">[<expr pos:start="111:20" pos:end="111:20"><name pos:start="111:20" pos:end="111:20">i</name></expr>]</index></name><operator pos:start="111:22" pos:end="111:22">.</operator><name pos:start="111:23" pos:end="111:30">reuse_sf</name>        <operator pos:start="111:39" pos:end="111:39">=</operator> <literal type="number" pos:start="111:41" pos:end="111:41">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="117:5" pos:end="117:31">/** decode all subframes */</comment>

    <while pos:start="119:5" pos:end="129:5">while <condition pos:start="119:11" pos:end="119:36">(<expr pos:start="119:12" pos:end="119:35"><operator pos:start="119:12" pos:end="119:12">!</operator><name pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:35">parsed_all_subframes</name></name></expr>)</condition> <block pos:start="119:38" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:9">

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:35">(<expr pos:start="121:13" pos:end="121:34"><call pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:27">decode_subframe</name><argument_list pos:start="121:28" pos:end="121:30">(<argument pos:start="121:29" pos:end="121:29"><expr pos:start="121:29" pos:end="121:29"><name pos:start="121:29" pos:end="121:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="121:32" pos:end="121:32">&lt;</operator> <literal type="number" pos:start="121:34" pos:end="121:34">0</literal></expr>)</condition> <block pos:start="121:37" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:21">

            <expr_stmt pos:start="123:13" pos:end="123:31"><expr pos:start="123:13" pos:end="123:30"><name pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:26">packet_loss</name></name> <operator pos:start="123:28" pos:end="123:28">=</operator> <literal type="number" pos:start="123:30" pos:end="123:30">1</literal></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:21">return <expr pos:start="125:20" pos:end="125:20"><literal type="number" pos:start="125:20" pos:end="125:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="133:5" pos:end="133:38"><expr pos:start="133:5" pos:end="133:37"><call pos:start="133:5" pos:end="133:37"><name pos:start="133:5" pos:end="133:11">dprintf</name><argument_list pos:start="133:12" pos:end="133:37">(<argument pos:start="133:13" pos:end="133:20"><expr pos:start="133:13" pos:end="133:20"><name pos:start="133:13" pos:end="133:20"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:20">avctx</name></name></expr></argument>, <argument pos:start="133:23" pos:end="133:36"><expr pos:start="133:23" pos:end="133:36"><literal type="string" pos:start="133:23" pos:end="133:36">"Frame done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="143:61"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:22">(<expr pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:21">skip_frame</name></name></expr>)</condition> <block pos:start="137:24" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:26">

        <expr_stmt pos:start="139:9" pos:end="139:26"><expr pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:21">skip_frame</name></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <literal type="number" pos:start="139:25" pos:end="139:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="143:61">else<block type="pseudo" pos:start="143:9" pos:end="143:61"><block_content pos:start="143:9" pos:end="143:61">

        <expr_stmt pos:start="143:9" pos:end="143:61"><expr pos:start="143:9" pos:end="143:60"><name pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:18">samples</name></name> <operator pos:start="143:20" pos:end="143:21">+=</operator> <name pos:start="143:23" pos:end="143:37"><name pos:start="143:23" pos:end="143:23">s</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:37">num_channels</name></name> <operator pos:start="143:39" pos:end="143:39">*</operator> <name pos:start="143:41" pos:end="143:60"><name pos:start="143:41" pos:end="143:41">s</name><operator pos:start="143:42" pos:end="143:43">-&gt;</operator><name pos:start="143:44" pos:end="143:60">samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="147:5" pos:end="183:5"><if pos:start="147:5" pos:end="171:5">if <condition pos:start="147:8" pos:end="147:22">(<expr pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:21">len_prefix</name></name></expr>)</condition> <block pos:start="147:24" pos:end="171:5">{<block_content pos:start="149:9" pos:end="169:77">

        <if_stmt pos:start="149:9" pos:end="163:9"><if pos:start="149:9" pos:end="163:9">if <condition pos:start="149:12" pos:end="149:62">(<expr pos:start="149:13" pos:end="149:61"><name pos:start="149:13" pos:end="149:15">len</name> <operator pos:start="149:17" pos:end="149:18">!=</operator> <operator pos:start="149:20" pos:end="149:20">(</operator><call pos:start="149:21" pos:end="149:38"><name pos:start="149:21" pos:end="149:34">get_bits_count</name><argument_list pos:start="149:35" pos:end="149:38">(<argument pos:start="149:36" pos:end="149:37"><expr pos:start="149:36" pos:end="149:37"><name pos:start="149:36" pos:end="149:37">gb</name></expr></argument>)</argument_list></call> <operator pos:start="149:40" pos:end="149:40">-</operator> <name pos:start="149:42" pos:end="149:56"><name pos:start="149:42" pos:end="149:42">s</name><operator pos:start="149:43" pos:end="149:44">-&gt;</operator><name pos:start="149:45" pos:end="149:56">frame_offset</name></name><operator pos:start="149:57" pos:end="149:57">)</operator> <operator pos:start="149:59" pos:end="149:59">+</operator> <literal type="number" pos:start="149:61" pos:end="149:61">2</literal></expr>)</condition> <block pos:start="149:64" pos:end="163:9">{<block_content pos:start="153:13" pos:end="161:21">

            <comment type="block" format="doxygen" pos:start="151:13" pos:end="151:61">/** FIXME: not sure if this is always an error */</comment>

            <expr_stmt pos:start="153:13" pos:end="157:69"><expr pos:start="153:13" pos:end="157:68"><call pos:start="153:13" pos:end="157:68"><name pos:start="153:13" pos:end="153:18">av_log</name><argument_list pos:start="153:19" pos:end="157:68">(<argument pos:start="153:20" pos:end="153:27"><expr pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:20">s</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:27">avctx</name></name></expr></argument>, <argument pos:start="153:30" pos:end="153:41"><expr pos:start="153:30" pos:end="153:41"><name pos:start="153:30" pos:end="153:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="155:20" pos:end="155:59"><expr pos:start="155:20" pos:end="155:59"><literal type="string" pos:start="155:20" pos:end="155:59">"frame[%i] would have to skip %i bits\n"</literal></expr></argument>, <argument pos:start="155:62" pos:end="155:73"><expr pos:start="155:62" pos:end="155:73"><name pos:start="155:62" pos:end="155:73"><name pos:start="155:62" pos:end="155:62">s</name><operator pos:start="155:63" pos:end="155:64">-&gt;</operator><name pos:start="155:65" pos:end="155:73">frame_num</name></name></expr></argument>,

                   <argument pos:start="157:20" pos:end="157:67"><expr pos:start="157:20" pos:end="157:67"><name pos:start="157:20" pos:end="157:22">len</name> <operator pos:start="157:24" pos:end="157:24">-</operator> <operator pos:start="157:26" pos:end="157:26">(</operator><call pos:start="157:27" pos:end="157:44"><name pos:start="157:27" pos:end="157:40">get_bits_count</name><argument_list pos:start="157:41" pos:end="157:44">(<argument pos:start="157:42" pos:end="157:43"><expr pos:start="157:42" pos:end="157:43"><name pos:start="157:42" pos:end="157:43">gb</name></expr></argument>)</argument_list></call> <operator pos:start="157:46" pos:end="157:46">-</operator> <name pos:start="157:48" pos:end="157:62"><name pos:start="157:48" pos:end="157:48">s</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:62">frame_offset</name></name><operator pos:start="157:63" pos:end="157:63">)</operator> <operator pos:start="157:65" pos:end="157:65">-</operator> <literal type="number" pos:start="157:67" pos:end="157:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:31"><expr pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:26">packet_loss</name></name> <operator pos:start="159:28" pos:end="159:28">=</operator> <literal type="number" pos:start="159:30" pos:end="159:30">1</literal></expr>;</expr_stmt>

            <return pos:start="161:13" pos:end="161:21">return <expr pos:start="161:20" pos:end="161:20"><literal type="number" pos:start="161:20" pos:end="161:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" format="doxygen" pos:start="167:9" pos:end="167:46">/** skip the rest of the frame data */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:77"><expr pos:start="169:9" pos:end="169:76"><call pos:start="169:9" pos:end="169:76"><name pos:start="169:9" pos:end="169:22">skip_bits_long</name><argument_list pos:start="169:23" pos:end="169:76">(<argument pos:start="169:24" pos:end="169:25"><expr pos:start="169:24" pos:end="169:25"><name pos:start="169:24" pos:end="169:25">gb</name></expr></argument>, <argument pos:start="169:28" pos:end="169:75"><expr pos:start="169:28" pos:end="169:75"><name pos:start="169:28" pos:end="169:30">len</name> <operator pos:start="169:32" pos:end="169:32">-</operator> <operator pos:start="169:34" pos:end="169:34">(</operator><call pos:start="169:35" pos:end="169:52"><name pos:start="169:35" pos:end="169:48">get_bits_count</name><argument_list pos:start="169:49" pos:end="169:52">(<argument pos:start="169:50" pos:end="169:51"><expr pos:start="169:50" pos:end="169:51"><name pos:start="169:50" pos:end="169:51">gb</name></expr></argument>)</argument_list></call> <operator pos:start="169:54" pos:end="169:54">-</operator> <name pos:start="169:56" pos:end="169:70"><name pos:start="169:56" pos:end="169:56">s</name><operator pos:start="169:57" pos:end="169:58">-&gt;</operator><name pos:start="169:59" pos:end="169:70">frame_offset</name></name><operator pos:start="169:71" pos:end="169:71">)</operator> <operator pos:start="169:73" pos:end="169:73">-</operator> <literal type="number" pos:start="169:75" pos:end="169:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="171:7" pos:end="183:5">else <block pos:start="171:12" pos:end="183:5">{<block_content>

<comment type="block" pos:start="173:1" pos:end="181:2">/*

        while (get_bits_count(gb) &lt; s-&gt;num_saved_bits &amp;&amp; get_bits1(gb) == 0) {

	    dprintf(s-&gt;avctx, "skip1\n");

        }

*/</comment>

    </block_content>}</block></else></if_stmt>



    <comment type="block" format="doxygen" pos:start="187:5" pos:end="187:29">/** decode trailer bit */</comment>

    <expr_stmt pos:start="189:5" pos:end="189:32"><expr pos:start="189:5" pos:end="189:31"><name pos:start="189:5" pos:end="189:15">more_frames</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:31"><name pos:start="189:19" pos:end="189:27">get_bits1</name><argument_list pos:start="189:28" pos:end="189:31">(<argument pos:start="189:29" pos:end="189:30"><expr pos:start="189:29" pos:end="189:30"><name pos:start="189:29" pos:end="189:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:19"><expr pos:start="191:5" pos:end="191:18"><operator pos:start="191:5" pos:end="191:6">++</operator><name pos:start="191:7" pos:end="191:18"><name pos:start="191:7" pos:end="191:7">s</name><operator pos:start="191:8" pos:end="191:9">-&gt;</operator><name pos:start="191:10" pos:end="191:18">frame_num</name></name></expr>;</expr_stmt>

    <return pos:start="193:5" pos:end="193:23">return <expr pos:start="193:12" pos:end="193:22"><name pos:start="193:12" pos:end="193:22">more_frames</name></expr>;</return>

</block_content>}</block></function>
</unit>
