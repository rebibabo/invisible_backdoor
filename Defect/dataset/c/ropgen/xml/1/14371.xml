<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14371.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">patch_instruction</name><parameter_list pos:start="1:30" pos:end="1:77">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:43">VAPICROMState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:54">X86CPU</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">cpu</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><name pos:start="1:62" pos:end="1:73">target_ulong</name></type> <name pos:start="1:75" pos:end="1:76">ip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">VAPICHandlers</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:27">handlers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:18">opcode</name><index pos:start="11:19" pos:end="11:21">[<expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">imm32</name> <init pos:start="13:20" pos:end="13:22">= <expr pos:start="13:22" pos:end="13:22"><literal type="number" pos:start="13:22" pos:end="13:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:27">current_pc</name> <init pos:start="15:29" pos:end="15:31">= <expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:32">current_cs_base</name> <init pos:start="17:34" pos:end="17:36">= <expr pos:start="17:36" pos:end="17:36"><literal type="number" pos:start="17:36" pos:end="17:36">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:26">current_flags</name> <init pos:start="19:28" pos:end="19:30">= <expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:16">smp_cpus</name> <operator pos:start="23:18" pos:end="23:19">==</operator> <literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>)</condition> <block pos:start="23:24" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:36">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:16">handlers</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <operator pos:start="25:20" pos:end="25:20">&amp;</operator><name pos:start="25:21" pos:end="25:35"><name pos:start="25:21" pos:end="25:21">s</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:32">rom_state</name><operator pos:start="25:33" pos:end="25:33">.</operator><name pos:start="25:34" pos:end="25:35">up</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="31:5">else <block pos:start="27:12" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:36">

        <expr_stmt pos:start="29:9" pos:end="29:36"><expr pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:16">handlers</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:35"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:32">rom_state</name><operator pos:start="29:33" pos:end="29:33">.</operator><name pos:start="29:34" pos:end="29:35">mp</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="35:5" pos:end="53:5"><if pos:start="35:5" pos:end="53:5">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:20">kvm_enabled</name><argument_list pos:start="35:21" pos:end="35:22">()</argument_list></call></expr>)</condition> <block pos:start="35:25" pos:end="53:5">{<block_content pos:start="37:9" pos:end="51:9">

        <expr_stmt pos:start="37:9" pos:end="39:45"><expr pos:start="37:9" pos:end="39:44"><call pos:start="37:9" pos:end="39:44"><name pos:start="37:9" pos:end="37:28">cpu_get_tb_cpu_state</name><argument_list pos:start="37:29" pos:end="39:44">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">env</name></expr></argument>, <argument pos:start="37:35" pos:end="37:45"><expr pos:start="37:35" pos:end="37:45"><operator pos:start="37:35" pos:end="37:35">&amp;</operator><name pos:start="37:36" pos:end="37:45">current_pc</name></expr></argument>, <argument pos:start="37:48" pos:end="37:63"><expr pos:start="37:48" pos:end="37:63"><operator pos:start="37:48" pos:end="37:48">&amp;</operator><name pos:start="37:49" pos:end="37:63">current_cs_base</name></expr></argument>,

                             <argument pos:start="39:30" pos:end="39:43"><expr pos:start="39:30" pos:end="39:43"><operator pos:start="39:30" pos:end="39:30">&amp;</operator><name pos:start="39:31" pos:end="39:43">current_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="41:9" pos:end="45:54">/* Account this instruction, because we will exit the tb.

           This is the first instruction in the block. Therefore

           there is no need in restoring CPU state. */</comment>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:23">(<expr pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:22">use_icount</name></expr>)</condition> <block pos:start="47:25" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:38">

            <expr_stmt pos:start="49:13" pos:end="49:38"><expr pos:start="49:13" pos:end="49:37"><operator pos:start="49:13" pos:end="49:14">--</operator><name pos:start="49:15" pos:end="49:37"><name pos:start="49:15" pos:end="49:16">cs</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:29">icount_decr</name><operator pos:start="49:30" pos:end="49:30">.</operator><name pos:start="49:31" pos:end="49:33">u16</name><operator pos:start="49:34" pos:end="49:34">.</operator><name pos:start="49:35" pos:end="49:37">low</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><call pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:19">pause_all_vcpus</name><argument_list pos:start="57:20" pos:end="57:21">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:59"><expr pos:start="61:5" pos:end="61:58"><call pos:start="61:5" pos:end="61:58"><name pos:start="61:5" pos:end="61:23">cpu_memory_rw_debug</name><argument_list pos:start="61:24" pos:end="61:58">(<argument pos:start="61:25" pos:end="61:26"><expr pos:start="61:25" pos:end="61:26"><name pos:start="61:25" pos:end="61:26">cs</name></expr></argument>, <argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><name pos:start="61:29" pos:end="61:30">ip</name></expr></argument>, <argument pos:start="61:33" pos:end="61:38"><expr pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:38">opcode</name></expr></argument>, <argument pos:start="61:41" pos:end="61:54"><expr pos:start="61:41" pos:end="61:54"><sizeof pos:start="61:41" pos:end="61:54">sizeof<argument_list pos:start="61:47" pos:end="61:54">(<argument pos:start="61:48" pos:end="61:53"><expr pos:start="61:48" pos:end="61:53"><name pos:start="61:48" pos:end="61:53">opcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="61:57" pos:end="61:57"><expr pos:start="61:57" pos:end="61:57"><literal type="number" pos:start="61:57" pos:end="61:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="65:5" pos:end="119:5">switch <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:18">opcode</name><index pos:start="65:19" pos:end="65:21">[<expr pos:start="65:20" pos:end="65:20"><literal type="number" pos:start="65:20" pos:end="65:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="65:24" pos:end="119:5">{<block_content pos:start="67:5" pos:end="117:16">

    <case pos:start="67:5" pos:end="67:14">case <expr pos:start="67:10" pos:end="67:13"><literal type="number" pos:start="67:10" pos:end="67:13">0x89</literal></expr>:</case> <comment type="block" pos:start="67:16" pos:end="67:37">/* mov r32 to r/m32 */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:57"><expr pos:start="69:9" pos:end="69:56"><call pos:start="69:9" pos:end="69:56"><name pos:start="69:9" pos:end="69:18">patch_byte</name><argument_list pos:start="69:19" pos:end="69:56">(<argument pos:start="69:20" pos:end="69:22"><expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:22">cpu</name></expr></argument>, <argument pos:start="69:25" pos:end="69:26"><expr pos:start="69:25" pos:end="69:26"><name pos:start="69:25" pos:end="69:26">ip</name></expr></argument>, <argument pos:start="69:29" pos:end="69:55"><expr pos:start="69:29" pos:end="69:55"><literal type="number" pos:start="69:29" pos:end="69:34">0x50</literal> <operator pos:start="69:34" pos:end="69:34">+</operator> <call pos:start="69:36" pos:end="69:55"><name pos:start="69:36" pos:end="69:44">modrm_reg</name><argument_list pos:start="69:45" pos:end="69:55">(<argument pos:start="69:46" pos:end="69:54"><expr pos:start="69:46" pos:end="69:54"><name pos:start="69:46" pos:end="69:54"><name pos:start="69:46" pos:end="69:51">opcode</name><index pos:start="69:52" pos:end="69:54">[<expr pos:start="69:53" pos:end="69:53"><literal type="number" pos:start="69:53" pos:end="69:53">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="69:60" pos:end="69:73">/* push reg */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:54"><expr pos:start="71:9" pos:end="71:53"><call pos:start="71:9" pos:end="71:53"><name pos:start="71:9" pos:end="71:18">patch_call</name><argument_list pos:start="71:19" pos:end="71:53">(<argument pos:start="71:20" pos:end="71:20"><expr pos:start="71:20" pos:end="71:20"><name pos:start="71:20" pos:end="71:20">s</name></expr></argument>, <argument pos:start="71:23" pos:end="71:25"><expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">cpu</name></expr></argument>, <argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><name pos:start="71:28" pos:end="71:29">ip</name> <operator pos:start="71:31" pos:end="71:31">+</operator> <literal type="number" pos:start="71:33" pos:end="71:33">1</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:52"><expr pos:start="71:36" pos:end="71:52"><name pos:start="71:36" pos:end="71:52"><name pos:start="71:36" pos:end="71:43">handlers</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:52">set_tpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:14">case <expr pos:start="75:10" pos:end="75:13"><literal type="number" pos:start="75:10" pos:end="75:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="75:16" pos:end="75:37">/* mov r/m32 to r32 */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:34"><expr pos:start="77:9" pos:end="77:33"><call pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:18">patch_byte</name><argument_list pos:start="77:19" pos:end="77:33">(<argument pos:start="77:20" pos:end="77:22"><expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">cpu</name></expr></argument>, <argument pos:start="77:25" pos:end="77:26"><expr pos:start="77:25" pos:end="77:26"><name pos:start="77:25" pos:end="77:26">ip</name></expr></argument>, <argument pos:start="77:29" pos:end="77:32"><expr pos:start="77:29" pos:end="77:32"><literal type="number" pos:start="77:29" pos:end="77:32">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:76"><expr pos:start="79:9" pos:end="79:75"><call pos:start="79:9" pos:end="79:75"><name pos:start="79:9" pos:end="79:18">patch_call</name><argument_list pos:start="79:19" pos:end="79:75">(<argument pos:start="79:20" pos:end="79:20"><expr pos:start="79:20" pos:end="79:20"><name pos:start="79:20" pos:end="79:20">s</name></expr></argument>, <argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><name pos:start="79:23" pos:end="79:25">cpu</name></expr></argument>, <argument pos:start="79:28" pos:end="79:33"><expr pos:start="79:28" pos:end="79:33"><name pos:start="79:28" pos:end="79:29">ip</name> <operator pos:start="79:31" pos:end="79:31">+</operator> <literal type="number" pos:start="79:33" pos:end="79:33">1</literal></expr></argument>, <argument pos:start="79:36" pos:end="79:74"><expr pos:start="79:36" pos:end="79:74"><name pos:start="79:36" pos:end="79:74"><name pos:start="79:36" pos:end="79:43">handlers</name><operator pos:start="79:44" pos:end="79:45">-&gt;</operator><name pos:start="79:46" pos:end="79:52">get_tpr</name><index pos:start="79:53" pos:end="79:74">[<expr pos:start="79:54" pos:end="79:73"><call pos:start="79:54" pos:end="79:73"><name pos:start="79:54" pos:end="79:62">modrm_reg</name><argument_list pos:start="79:63" pos:end="79:73">(<argument pos:start="79:64" pos:end="79:72"><expr pos:start="79:64" pos:end="79:72"><name pos:start="79:64" pos:end="79:72"><name pos:start="79:64" pos:end="79:69">opcode</name><index pos:start="79:70" pos:end="79:72">[<expr pos:start="79:71" pos:end="79:71"><literal type="number" pos:start="79:71" pos:end="79:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0xa1</literal></expr>:</case> <comment type="block" pos:start="83:16" pos:end="83:35">/* mov abs to eax */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:53"><expr pos:start="85:9" pos:end="85:52"><call pos:start="85:9" pos:end="85:52"><name pos:start="85:9" pos:end="85:18">patch_call</name><argument_list pos:start="85:19" pos:end="85:52">(<argument pos:start="85:20" pos:end="85:20"><expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">s</name></expr></argument>, <argument pos:start="85:23" pos:end="85:25"><expr pos:start="85:23" pos:end="85:25"><name pos:start="85:23" pos:end="85:25">cpu</name></expr></argument>, <argument pos:start="85:28" pos:end="85:29"><expr pos:start="85:28" pos:end="85:29"><name pos:start="85:28" pos:end="85:29">ip</name></expr></argument>, <argument pos:start="85:32" pos:end="85:51"><expr pos:start="85:32" pos:end="85:51"><name pos:start="85:32" pos:end="85:51"><name pos:start="85:32" pos:end="85:39">handlers</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:48">get_tpr</name><index pos:start="85:49" pos:end="85:51">[<expr pos:start="85:50" pos:end="85:50"><literal type="number" pos:start="85:50" pos:end="85:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <case pos:start="89:5" pos:end="89:14">case <expr pos:start="89:10" pos:end="89:13"><literal type="number" pos:start="89:10" pos:end="89:13">0xa3</literal></expr>:</case> <comment type="block" pos:start="89:16" pos:end="89:35">/* mov eax to abs */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:54"><expr pos:start="91:9" pos:end="91:53"><call pos:start="91:9" pos:end="91:53"><name pos:start="91:9" pos:end="91:18">patch_call</name><argument_list pos:start="91:19" pos:end="91:53">(<argument pos:start="91:20" pos:end="91:20"><expr pos:start="91:20" pos:end="91:20"><name pos:start="91:20" pos:end="91:20">s</name></expr></argument>, <argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">cpu</name></expr></argument>, <argument pos:start="91:28" pos:end="91:29"><expr pos:start="91:28" pos:end="91:29"><name pos:start="91:28" pos:end="91:29">ip</name></expr></argument>, <argument pos:start="91:32" pos:end="91:52"><expr pos:start="91:32" pos:end="91:52"><name pos:start="91:32" pos:end="91:52"><name pos:start="91:32" pos:end="91:39">handlers</name><operator pos:start="91:40" pos:end="91:41">-&gt;</operator><name pos:start="91:42" pos:end="91:52">set_tpr_eax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:14">case <expr pos:start="95:10" pos:end="95:13"><literal type="number" pos:start="95:10" pos:end="95:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="95:16" pos:end="95:44">/* mov imm32, r/m32 (c7/0) */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:34"><expr pos:start="97:9" pos:end="97:33"><call pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:18">patch_byte</name><argument_list pos:start="97:19" pos:end="97:33">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">cpu</name></expr></argument>, <argument pos:start="97:25" pos:end="97:26"><expr pos:start="97:25" pos:end="97:26"><name pos:start="97:25" pos:end="97:26">ip</name></expr></argument>, <argument pos:start="97:29" pos:end="97:32"><expr pos:start="97:29" pos:end="97:32"><literal type="number" pos:start="97:29" pos:end="97:32">0x68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="97:37" pos:end="97:52">/* push imm32 */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:74"><expr pos:start="99:9" pos:end="99:73"><call pos:start="99:9" pos:end="99:73"><name pos:start="99:9" pos:end="99:27">cpu_memory_rw_debug</name><argument_list pos:start="99:28" pos:end="99:73">(<argument pos:start="99:29" pos:end="99:30"><expr pos:start="99:29" pos:end="99:30"><name pos:start="99:29" pos:end="99:30">cs</name></expr></argument>, <argument pos:start="99:33" pos:end="99:38"><expr pos:start="99:33" pos:end="99:38"><name pos:start="99:33" pos:end="99:34">ip</name> <operator pos:start="99:36" pos:end="99:36">+</operator> <literal type="number" pos:start="99:38" pos:end="99:38">6</literal></expr></argument>, <argument pos:start="99:41" pos:end="99:54"><expr pos:start="99:41" pos:end="99:54"><operator pos:start="99:41" pos:end="99:41">(</operator><name pos:start="99:42" pos:end="99:45">void</name> <operator pos:start="99:47" pos:end="99:47">*</operator><operator pos:start="99:48" pos:end="99:48">)</operator><operator pos:start="99:49" pos:end="99:49">&amp;</operator><name pos:start="99:50" pos:end="99:54">imm32</name></expr></argument>, <argument pos:start="99:57" pos:end="99:69"><expr pos:start="99:57" pos:end="99:69"><sizeof pos:start="99:57" pos:end="99:69">sizeof<argument_list pos:start="99:63" pos:end="99:69">(<argument pos:start="99:64" pos:end="99:68"><expr pos:start="99:64" pos:end="99:68"><name pos:start="99:64" pos:end="99:68">imm32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="99:72" pos:end="99:72"><expr pos:start="99:72" pos:end="99:72"><literal type="number" pos:start="99:72" pos:end="99:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:74"><expr pos:start="101:9" pos:end="101:73"><call pos:start="101:9" pos:end="101:73"><name pos:start="101:9" pos:end="101:27">cpu_memory_rw_debug</name><argument_list pos:start="101:28" pos:end="101:73">(<argument pos:start="101:29" pos:end="101:30"><expr pos:start="101:29" pos:end="101:30"><name pos:start="101:29" pos:end="101:30">cs</name></expr></argument>, <argument pos:start="101:33" pos:end="101:38"><expr pos:start="101:33" pos:end="101:38"><name pos:start="101:33" pos:end="101:34">ip</name> <operator pos:start="101:36" pos:end="101:36">+</operator> <literal type="number" pos:start="101:38" pos:end="101:38">1</literal></expr></argument>, <argument pos:start="101:41" pos:end="101:54"><expr pos:start="101:41" pos:end="101:54"><operator pos:start="101:41" pos:end="101:41">(</operator><name pos:start="101:42" pos:end="101:45">void</name> <operator pos:start="101:47" pos:end="101:47">*</operator><operator pos:start="101:48" pos:end="101:48">)</operator><operator pos:start="101:49" pos:end="101:49">&amp;</operator><name pos:start="101:50" pos:end="101:54">imm32</name></expr></argument>, <argument pos:start="101:57" pos:end="101:69"><expr pos:start="101:57" pos:end="101:69"><sizeof pos:start="101:57" pos:end="101:69">sizeof<argument_list pos:start="101:63" pos:end="101:69">(<argument pos:start="101:64" pos:end="101:68"><expr pos:start="101:64" pos:end="101:68"><name pos:start="101:64" pos:end="101:68">imm32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="101:72" pos:end="101:72"><expr pos:start="101:72" pos:end="101:72"><literal type="number" pos:start="101:72" pos:end="101:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:54"><expr pos:start="103:9" pos:end="103:53"><call pos:start="103:9" pos:end="103:53"><name pos:start="103:9" pos:end="103:18">patch_call</name><argument_list pos:start="103:19" pos:end="103:53">(<argument pos:start="103:20" pos:end="103:20"><expr pos:start="103:20" pos:end="103:20"><name pos:start="103:20" pos:end="103:20">s</name></expr></argument>, <argument pos:start="103:23" pos:end="103:25"><expr pos:start="103:23" pos:end="103:25"><name pos:start="103:23" pos:end="103:25">cpu</name></expr></argument>, <argument pos:start="103:28" pos:end="103:33"><expr pos:start="103:28" pos:end="103:33"><name pos:start="103:28" pos:end="103:29">ip</name> <operator pos:start="103:31" pos:end="103:31">+</operator> <literal type="number" pos:start="103:33" pos:end="103:33">5</literal></expr></argument>, <argument pos:start="103:36" pos:end="103:52"><expr pos:start="103:36" pos:end="103:52"><name pos:start="103:36" pos:end="103:52"><name pos:start="103:36" pos:end="103:43">handlers</name><operator pos:start="103:44" pos:end="103:45">-&gt;</operator><name pos:start="103:46" pos:end="103:52">set_tpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:14">case <expr pos:start="107:10" pos:end="107:13"><literal type="number" pos:start="107:10" pos:end="107:13">0xff</literal></expr>:</case> <comment type="block" pos:start="107:16" pos:end="107:31">/* push r/m32 */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:34"><expr pos:start="109:9" pos:end="109:33"><call pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:18">patch_byte</name><argument_list pos:start="109:19" pos:end="109:33">(<argument pos:start="109:20" pos:end="109:22"><expr pos:start="109:20" pos:end="109:22"><name pos:start="109:20" pos:end="109:22">cpu</name></expr></argument>, <argument pos:start="109:25" pos:end="109:26"><expr pos:start="109:25" pos:end="109:26"><name pos:start="109:25" pos:end="109:26">ip</name></expr></argument>, <argument pos:start="109:29" pos:end="109:32"><expr pos:start="109:29" pos:end="109:32"><literal type="number" pos:start="109:29" pos:end="109:32">0x50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:36" pos:end="109:49">/* push eax */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:60"><expr pos:start="111:9" pos:end="111:59"><call pos:start="111:9" pos:end="111:59"><name pos:start="111:9" pos:end="111:18">patch_call</name><argument_list pos:start="111:19" pos:end="111:59">(<argument pos:start="111:20" pos:end="111:20"><expr pos:start="111:20" pos:end="111:20"><name pos:start="111:20" pos:end="111:20">s</name></expr></argument>, <argument pos:start="111:23" pos:end="111:25"><expr pos:start="111:23" pos:end="111:25"><name pos:start="111:23" pos:end="111:25">cpu</name></expr></argument>, <argument pos:start="111:28" pos:end="111:33"><expr pos:start="111:28" pos:end="111:33"><name pos:start="111:28" pos:end="111:29">ip</name> <operator pos:start="111:31" pos:end="111:31">+</operator> <literal type="number" pos:start="111:33" pos:end="111:33">1</literal></expr></argument>, <argument pos:start="111:36" pos:end="111:58"><expr pos:start="111:36" pos:end="111:58"><name pos:start="111:36" pos:end="111:58"><name pos:start="111:36" pos:end="111:43">handlers</name><operator pos:start="111:44" pos:end="111:45">-&gt;</operator><name pos:start="111:46" pos:end="111:58">get_tpr_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <default pos:start="115:5" pos:end="115:12">default:</default>

        <expr_stmt pos:start="117:9" pos:end="117:16"><expr pos:start="117:9" pos:end="117:15"><call pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:13">abort</name><argument_list pos:start="117:14" pos:end="117:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="123:5" pos:end="123:23"><expr pos:start="123:5" pos:end="123:22"><call pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:20">resume_all_vcpus</name><argument_list pos:start="123:21" pos:end="123:22">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="139:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:23">(<expr pos:start="127:9" pos:end="127:22"><operator pos:start="127:9" pos:end="127:9">!</operator><call pos:start="127:10" pos:end="127:22"><name pos:start="127:10" pos:end="127:20">kvm_enabled</name><argument_list pos:start="127:21" pos:end="127:22">()</argument_list></call></expr>)</condition> <block pos:start="127:25" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:32">

        <comment type="block" pos:start="129:9" pos:end="131:42">/* tb_lock will be reset when cpu_loop_exit_noexc longjmps

         * back into the cpu_exec loop. */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:18"><expr pos:start="133:9" pos:end="133:17"><call pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:15">tb_lock</name><argument_list pos:start="133:16" pos:end="133:17">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:71"><expr pos:start="135:9" pos:end="135:70"><call pos:start="135:9" pos:end="135:70"><name pos:start="135:9" pos:end="135:19">tb_gen_code</name><argument_list pos:start="135:20" pos:end="135:70">(<argument pos:start="135:21" pos:end="135:22"><expr pos:start="135:21" pos:end="135:22"><name pos:start="135:21" pos:end="135:22">cs</name></expr></argument>, <argument pos:start="135:25" pos:end="135:34"><expr pos:start="135:25" pos:end="135:34"><name pos:start="135:25" pos:end="135:34">current_pc</name></expr></argument>, <argument pos:start="135:37" pos:end="135:51"><expr pos:start="135:37" pos:end="135:51"><name pos:start="135:37" pos:end="135:51">current_cs_base</name></expr></argument>, <argument pos:start="135:54" pos:end="135:66"><expr pos:start="135:54" pos:end="135:66"><name pos:start="135:54" pos:end="135:66">current_flags</name></expr></argument>, <argument pos:start="135:69" pos:end="135:69"><expr pos:start="135:69" pos:end="135:69"><literal type="number" pos:start="135:69" pos:end="135:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:32"><expr pos:start="137:9" pos:end="137:31"><call pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:27">cpu_loop_exit_noexc</name><argument_list pos:start="137:28" pos:end="137:31">(<argument pos:start="137:29" pos:end="137:30"><expr pos:start="137:29" pos:end="137:30"><name pos:start="137:29" pos:end="137:30">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
