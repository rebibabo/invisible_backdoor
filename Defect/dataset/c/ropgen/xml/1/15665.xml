<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15665.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">PCIDevice</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:40">do_pci_register_device</name><parameter_list pos:start="1:41" pos:end="9:61">(<parameter pos:start="1:42" pos:end="1:59"><decl pos:start="1:42" pos:end="1:59"><type pos:start="1:42" pos:end="1:59"><name pos:start="1:42" pos:end="1:50">PCIDevice</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:59">pci_dev</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:72"><decl pos:start="1:62" pos:end="1:72"><type pos:start="1:62" pos:end="1:72"><name pos:start="1:62" pos:end="1:67">PCIBus</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">bus</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:57"><decl pos:start="3:42" pos:end="3:57"><type pos:start="3:42" pos:end="3:57"><specifier pos:start="3:42" pos:end="3:46">const</specifier> <name pos:start="3:48" pos:end="3:51">char</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:57">name</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:68"><decl pos:start="3:60" pos:end="3:68"><type pos:start="3:60" pos:end="3:68"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:68">devfn</name></decl></parameter>,

                                         <parameter pos:start="5:42" pos:end="5:71"><decl pos:start="5:42" pos:end="5:71"><type pos:start="5:42" pos:end="5:71"><name pos:start="5:42" pos:end="5:58">PCIConfigReadFunc</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:71">config_read</name></decl></parameter>,

                                         <parameter pos:start="7:42" pos:end="7:73"><decl pos:start="7:42" pos:end="7:73"><type pos:start="7:42" pos:end="7:73"><name pos:start="7:42" pos:end="7:59">PCIConfigWriteFunc</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:73">config_write</name></decl></parameter>,

                                         <parameter pos:start="9:42" pos:end="9:60"><decl pos:start="9:42" pos:end="9:60"><type pos:start="9:42" pos:end="9:60"><name pos:start="9:42" pos:end="9:48">uint8_t</name></type> <name pos:start="9:50" pos:end="9:60">header_type</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="85:1">{<block_content pos:start="13:5" pos:end="83:19">

    <if_stmt pos:start="13:5" pos:end="31:5"><if pos:start="13:5" pos:end="27:5">if <condition pos:start="13:8" pos:end="13:18">(<expr pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:13">devfn</name> <operator pos:start="13:15" pos:end="13:15">&lt;</operator> <literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr>)</condition> <block pos:start="13:20" pos:end="27:5">{<block_content pos:start="15:9" pos:end="25:12">

        <for pos:start="15:9" pos:end="21:9">for<control pos:start="15:12" pos:end="15:61">(<init pos:start="15:13" pos:end="15:36"><expr pos:start="15:13" pos:end="15:34"><name pos:start="15:13" pos:end="15:17">devfn</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <name pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:23">bus</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:34">devfn_min</name></name></expr> ;</init> <condition pos:start="15:38" pos:end="15:49"><expr pos:start="15:38" pos:end="15:48"><name pos:start="15:38" pos:end="15:42">devfn</name> <operator pos:start="15:44" pos:end="15:44">&lt;</operator> <literal type="number" pos:start="15:46" pos:end="15:48">256</literal></expr>;</condition> <incr pos:start="15:51" pos:end="15:60"><expr pos:start="15:51" pos:end="15:60"><name pos:start="15:51" pos:end="15:55">devfn</name> <operator pos:start="15:57" pos:end="15:58">+=</operator> <literal type="number" pos:start="15:60" pos:end="15:60">8</literal></expr></incr>)</control> <block pos:start="15:63" pos:end="21:9">{<block_content pos:start="17:13" pos:end="19:27">

            <if_stmt pos:start="17:13" pos:end="19:27"><if pos:start="17:13" pos:end="19:27">if <condition pos:start="17:16" pos:end="17:37">(<expr pos:start="17:17" pos:end="17:36"><operator pos:start="17:17" pos:end="17:17">!</operator><name pos:start="17:18" pos:end="17:36"><name pos:start="17:18" pos:end="17:20">bus</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:29">devices</name><index pos:start="17:30" pos:end="17:36">[<expr pos:start="17:31" pos:end="17:35"><name pos:start="17:31" pos:end="17:35">devfn</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="19:17" pos:end="19:27"><block_content pos:start="19:17" pos:end="19:27">

                <goto pos:start="19:17" pos:end="19:27">goto <name pos:start="19:22" pos:end="19:26">found</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <return pos:start="23:9" pos:end="23:20">return <expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr>;</return>

    <label pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:9">found</name>:</label> <empty_stmt pos:start="25:12" pos:end="25:12">;</empty_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="27:7" pos:end="31:5">else if <condition pos:start="27:15" pos:end="27:35">(<expr pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:18">bus</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:27">devices</name><index pos:start="27:28" pos:end="27:34">[<expr pos:start="27:29" pos:end="27:33"><name pos:start="27:29" pos:end="27:33">devfn</name></expr>]</index></name></expr>)</condition> <block pos:start="27:37" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:20">

        <return pos:start="29:9" pos:end="29:20">return <expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:11">pci_dev</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:16">bus</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <name pos:start="33:20" pos:end="33:22">bus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:11">pci_dev</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:18">devfn</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:26">devfn</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:56"><expr pos:start="37:5" pos:end="37:55"><call pos:start="37:5" pos:end="37:55"><name pos:start="37:5" pos:end="37:11">pstrcpy</name><argument_list pos:start="37:12" pos:end="37:55">(<argument pos:start="37:13" pos:end="37:25"><expr pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:19">pci_dev</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:25">name</name></name></expr></argument>, <argument pos:start="37:28" pos:end="37:48"><expr pos:start="37:28" pos:end="37:48"><sizeof pos:start="37:28" pos:end="37:48">sizeof<argument_list pos:start="37:34" pos:end="37:48">(<argument pos:start="37:35" pos:end="37:47"><expr pos:start="37:35" pos:end="37:47"><name pos:start="37:35" pos:end="37:47"><name pos:start="37:35" pos:end="37:41">pci_dev</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:47">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:51" pos:end="37:54"><expr pos:start="37:51" pos:end="37:54"><name pos:start="37:51" pos:end="37:54">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:62"><expr pos:start="39:5" pos:end="39:61"><call pos:start="39:5" pos:end="39:61"><name pos:start="39:5" pos:end="39:10">memset</name><argument_list pos:start="39:11" pos:end="39:61">(<argument pos:start="39:12" pos:end="39:29"><expr pos:start="39:12" pos:end="39:29"><name pos:start="39:12" pos:end="39:29"><name pos:start="39:12" pos:end="39:18">pci_dev</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:29">irq_state</name></name></expr></argument>, <argument pos:start="39:32" pos:end="39:32"><expr pos:start="39:32" pos:end="39:32"><literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr></argument>, <argument pos:start="39:35" pos:end="39:60"><expr pos:start="39:35" pos:end="39:60"><sizeof pos:start="39:35" pos:end="39:60">sizeof<argument_list pos:start="39:41" pos:end="39:60">(<argument pos:start="39:42" pos:end="39:59"><expr pos:start="39:42" pos:end="39:59"><name pos:start="39:42" pos:end="39:59"><name pos:start="39:42" pos:end="39:48">pci_dev</name><operator pos:start="39:49" pos:end="39:50">-&gt;</operator><name pos:start="39:51" pos:end="39:59">irq_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><call pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:20">pci_config_alloc</name><argument_list pos:start="41:21" pos:end="41:29">(<argument pos:start="41:22" pos:end="41:28"><expr pos:start="41:22" pos:end="41:28"><name pos:start="41:22" pos:end="41:28">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:51"><expr pos:start="45:5" pos:end="45:50"><name pos:start="45:5" pos:end="45:15">header_type</name> <operator pos:start="45:17" pos:end="45:18">&amp;=</operator> <operator pos:start="45:20" pos:end="45:20">~</operator><name pos:start="45:21" pos:end="45:50">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:46">(<expr pos:start="47:9" pos:end="47:45"><name pos:start="47:9" pos:end="47:19">header_type</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <name pos:start="47:24" pos:end="47:45">PCI_HEADER_TYPE_NORMAL</name></expr>)</condition> <block pos:start="47:48" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:46">

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><call pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:36">pci_set_default_subsystem_id</name><argument_list pos:start="49:37" pos:end="49:45">(<argument pos:start="49:38" pos:end="49:44"><expr pos:start="49:38" pos:end="49:44"><name pos:start="49:38" pos:end="49:44">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:28"><expr pos:start="53:5" pos:end="53:27"><call pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:18">pci_init_cmask</name><argument_list pos:start="53:19" pos:end="53:27">(<argument pos:start="53:20" pos:end="53:26"><expr pos:start="53:20" pos:end="53:26"><name pos:start="53:20" pos:end="53:26">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><call pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:18">pci_init_wmask</name><argument_list pos:start="55:19" pos:end="55:27">(<argument pos:start="55:20" pos:end="55:26"><expr pos:start="55:20" pos:end="55:26"><name pos:start="55:20" pos:end="55:26">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:46">(<expr pos:start="57:9" pos:end="57:45"><name pos:start="57:9" pos:end="57:19">header_type</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <name pos:start="57:24" pos:end="57:45">PCI_HEADER_TYPE_BRIDGE</name></expr>)</condition> <block pos:start="57:48" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:39">

        <expr_stmt pos:start="59:9" pos:end="59:39"><expr pos:start="59:9" pos:end="59:38"><call pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:29">pci_init_wmask_bridge</name><argument_list pos:start="59:30" pos:end="59:38">(<argument pos:start="59:31" pos:end="59:37"><expr pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:37">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="67:46"><if pos:start="65:5" pos:end="67:46">if <condition pos:start="65:8" pos:end="65:21">(<expr pos:start="65:9" pos:end="65:20"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:20">config_read</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:46"><block_content pos:start="67:9" pos:end="67:46">

        <expr_stmt pos:start="67:9" pos:end="67:46"><expr pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:19">config_read</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:45">pci_default_read_config</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="71:48"><if pos:start="69:5" pos:end="71:48">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:21">config_write</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:48"><block_content pos:start="71:9" pos:end="71:48">

        <expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:20">config_write</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:47">pci_default_write_config</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:39"><expr pos:start="73:5" pos:end="73:38"><name pos:start="73:5" pos:end="73:24"><name pos:start="73:5" pos:end="73:11">pci_dev</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:24">config_read</name></name> <operator pos:start="73:26" pos:end="73:26">=</operator> <name pos:start="73:28" pos:end="73:38">config_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:41"><expr pos:start="75:5" pos:end="75:40"><name pos:start="75:5" pos:end="75:25"><name pos:start="75:5" pos:end="75:11">pci_dev</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:25">config_write</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <name pos:start="75:29" pos:end="75:40">config_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:7">bus</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:16">devices</name><index pos:start="77:17" pos:end="77:23">[<expr pos:start="77:18" pos:end="77:22"><name pos:start="77:18" pos:end="77:22">devfn</name></expr>]</index></name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:33">pci_dev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:74"><expr pos:start="79:5" pos:end="79:73"><name pos:start="79:5" pos:end="79:16"><name pos:start="79:5" pos:end="79:11">pci_dev</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:16">irq</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:73"><name pos:start="79:20" pos:end="79:37">qemu_allocate_irqs</name><argument_list pos:start="79:38" pos:end="79:73">(<argument pos:start="79:39" pos:end="79:49"><expr pos:start="79:39" pos:end="79:49"><name pos:start="79:39" pos:end="79:49">pci_set_irq</name></expr></argument>, <argument pos:start="79:52" pos:end="79:58"><expr pos:start="79:52" pos:end="79:58"><name pos:start="79:52" pos:end="79:58">pci_dev</name></expr></argument>, <argument pos:start="79:61" pos:end="79:72"><expr pos:start="79:61" pos:end="79:72"><name pos:start="79:61" pos:end="79:72">PCI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:28"><expr pos:start="81:5" pos:end="81:27"><name pos:start="81:5" pos:end="81:23"><name pos:start="81:5" pos:end="81:11">pci_dev</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:23">version_id</name></name> <operator pos:start="81:25" pos:end="81:25">=</operator> <literal type="number" pos:start="81:27" pos:end="81:27">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="81:30" pos:end="81:69">/* Current pci device vmstate version */</comment>

    <return pos:start="83:5" pos:end="83:19">return <expr pos:start="83:12" pos:end="83:18"><name pos:start="83:12" pos:end="83:18">pci_dev</name></expr>;</return>

</block_content>}</block></function>
</unit>
