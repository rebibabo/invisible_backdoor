<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20759.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">scsi_write_data</name><parameter_list pos:start="1:27" pos:end="1:44">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">SCSIRequest</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:13">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">SCSIDiskReq</name></expr></argument>, <argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">req</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:14">n</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:53">/* No data transfer may already be in progress */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:33"><expr pos:start="15:5" pos:end="15:32"><call pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:32">(<argument pos:start="15:12" pos:end="15:31"><expr pos:start="15:12" pos:end="15:31"><name pos:start="15:12" pos:end="15:23"><name pos:start="15:12" pos:end="15:12">r</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:17">req</name><operator pos:start="15:18" pos:end="15:18">.</operator><name pos:start="15:19" pos:end="15:23">aiocb</name></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <name pos:start="15:28" pos:end="15:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:5">n</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:9">r</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">iov</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:22">iov_len</name></name> <operator pos:start="19:24" pos:end="19:24">/</operator> <literal type="number" pos:start="19:26" pos:end="19:28">512</literal></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="41:5"><if pos:start="21:5" pos:end="35:5">if <condition pos:start="21:8" pos:end="21:10">(<expr pos:start="21:9" pos:end="21:9"><name pos:start="21:9" pos:end="21:9">n</name></expr>)</condition> <block pos:start="21:12" pos:end="35:5">{<block_content pos:start="23:9" pos:end="33:9">

        <expr_stmt pos:start="23:9" pos:end="23:55"><expr pos:start="23:9" pos:end="23:54"><call pos:start="23:9" pos:end="23:54"><name pos:start="23:9" pos:end="23:32">qemu_iovec_init_external</name><argument_list pos:start="23:33" pos:end="23:54">(<argument pos:start="23:34" pos:end="23:41"><expr pos:start="23:34" pos:end="23:41"><operator pos:start="23:34" pos:end="23:34">&amp;</operator><name pos:start="23:35" pos:end="23:41"><name pos:start="23:35" pos:end="23:35">r</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:41">qiov</name></name></expr></argument>, <argument pos:start="23:44" pos:end="23:50"><expr pos:start="23:44" pos:end="23:50"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:50"><name pos:start="23:45" pos:end="23:45">r</name><operator pos:start="23:46" pos:end="23:47">-&gt;</operator><name pos:start="23:48" pos:end="23:50">iov</name></name></expr></argument>, <argument pos:start="23:53" pos:end="23:53"><expr pos:start="23:53" pos:end="23:53"><literal type="number" pos:start="23:53" pos:end="23:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:59"><expr pos:start="25:9" pos:end="27:58"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:9">r</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">req</name><operator pos:start="25:15" pos:end="25:15">.</operator><name pos:start="25:16" pos:end="25:20">aiocb</name></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <call pos:start="25:24" pos:end="27:58"><name pos:start="25:24" pos:end="25:38">bdrv_aio_writev</name><argument_list pos:start="25:39" pos:end="27:58">(<argument pos:start="25:40" pos:end="25:44"><expr pos:start="25:40" pos:end="25:44"><name pos:start="25:40" pos:end="25:44"><name pos:start="25:40" pos:end="25:40">s</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:44">bs</name></name></expr></argument>, <argument pos:start="25:47" pos:end="25:55"><expr pos:start="25:47" pos:end="25:55"><name pos:start="25:47" pos:end="25:55"><name pos:start="25:47" pos:end="25:47">r</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:55">sector</name></name></expr></argument>, <argument pos:start="25:58" pos:end="25:65"><expr pos:start="25:58" pos:end="25:65"><operator pos:start="25:58" pos:end="25:58">&amp;</operator><name pos:start="25:59" pos:end="25:65"><name pos:start="25:59" pos:end="25:59">r</name><operator pos:start="25:60" pos:end="25:61">-&gt;</operator><name pos:start="25:62" pos:end="25:65">qiov</name></name></expr></argument>, <argument pos:start="25:68" pos:end="25:68"><expr pos:start="25:68" pos:end="25:68"><name pos:start="25:68" pos:end="25:68">n</name></expr></argument>,

                                   <argument pos:start="27:36" pos:end="27:54"><expr pos:start="27:36" pos:end="27:54"><name pos:start="27:36" pos:end="27:54">scsi_write_complete</name></expr></argument>, <argument pos:start="27:57" pos:end="27:57"><expr pos:start="27:57" pos:end="27:57"><name pos:start="27:57" pos:end="27:57">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:33">(<expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:13">r</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">req</name><operator pos:start="29:19" pos:end="29:19">.</operator><name pos:start="29:20" pos:end="29:24">aiocb</name></name> <operator pos:start="29:26" pos:end="29:27">==</operator> <name pos:start="29:29" pos:end="29:32">NULL</name></expr>)</condition> <block pos:start="29:35" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:41">

            <expr_stmt pos:start="31:13" pos:end="31:41"><expr pos:start="31:13" pos:end="31:40"><call pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:31">scsi_write_complete</name><argument_list pos:start="31:32" pos:end="31:40">(<argument pos:start="31:33" pos:end="31:33"><expr pos:start="31:33" pos:end="31:33"><name pos:start="31:33" pos:end="31:33">r</name></expr></argument>, <argument pos:start="31:36" pos:end="31:39"><expr pos:start="31:36" pos:end="31:39"><operator pos:start="31:36" pos:end="31:36">-</operator><name pos:start="31:37" pos:end="31:39">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="41:5">else <block pos:start="35:12" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:34">

        <comment type="block" pos:start="37:9" pos:end="37:65">/* Invoke completion routine to fetch data from host.  */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><call pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:27">scsi_write_complete</name><argument_list pos:start="39:28" pos:end="39:33">(<argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">r</name></expr></argument>, <argument pos:start="39:32" pos:end="39:32"><expr pos:start="39:32" pos:end="39:32"><literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="45:5" pos:end="45:13">return <expr pos:start="45:12" pos:end="45:12"><literal type="number" pos:start="45:12" pos:end="45:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
