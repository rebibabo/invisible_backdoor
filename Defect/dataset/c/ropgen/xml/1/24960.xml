<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24960.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">vmstate_save_state</name><parameter_list pos:start="1:24" pos:end="3:52">(<parameter pos:start="1:25" pos:end="1:35"><decl pos:start="1:25" pos:end="1:35"><type pos:start="1:25" pos:end="1:35"><name pos:start="1:25" pos:end="1:32">QEMUFile</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">f</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:67"><decl pos:start="1:38" pos:end="1:67"><type pos:start="1:38" pos:end="1:67"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:61">VMStateDescription</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">vmsd</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:28">void</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:36">opaque</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:43">QJSON</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:51">vmdesc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:53">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">VMStateField</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:23">field</name> <init pos:start="7:25" pos:end="7:38">= <expr pos:start="7:27" pos:end="7:38"><name pos:start="7:27" pos:end="7:38"><name pos:start="7:27" pos:end="7:30">vmsd</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:38">fields</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:45"><expr pos:start="11:5" pos:end="11:44"><call pos:start="11:5" pos:end="11:44"><name pos:start="11:5" pos:end="11:32">trace_vmstate_save_state_top</name><argument_list pos:start="11:33" pos:end="11:44">(<argument pos:start="11:34" pos:end="11:43"><expr pos:start="11:34" pos:end="11:43"><name pos:start="11:34" pos:end="11:43"><name pos:start="11:34" pos:end="11:37">vmsd</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:43">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:12">vmsd</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:22">pre_save</name></name></expr>)</condition> <block pos:start="15:25" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:31">

        <expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><call pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:12">vmsd</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:22">pre_save</name></name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">vmdesc</name></expr>)</condition> <block pos:start="23:17" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:43">

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><call pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:21">json_prop_str</name><argument_list pos:start="25:22" pos:end="25:54">(<argument pos:start="25:23" pos:end="25:28"><expr pos:start="25:23" pos:end="25:28"><name pos:start="25:23" pos:end="25:28">vmdesc</name></expr></argument>, <argument pos:start="25:31" pos:end="25:41"><expr pos:start="25:31" pos:end="25:41"><literal type="string" pos:start="25:31" pos:end="25:41">"vmsd_name"</literal></expr></argument>, <argument pos:start="25:44" pos:end="25:53"><expr pos:start="25:44" pos:end="25:53"><name pos:start="25:44" pos:end="25:53"><name pos:start="25:44" pos:end="25:47">vmsd</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:53">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:59"><expr pos:start="27:9" pos:end="27:58"><call pos:start="27:9" pos:end="27:58"><name pos:start="27:9" pos:end="27:21">json_prop_int</name><argument_list pos:start="27:22" pos:end="27:58">(<argument pos:start="27:23" pos:end="27:28"><expr pos:start="27:23" pos:end="27:28"><name pos:start="27:23" pos:end="27:28">vmdesc</name></expr></argument>, <argument pos:start="27:31" pos:end="27:39"><expr pos:start="27:31" pos:end="27:39"><literal type="string" pos:start="27:31" pos:end="27:39">"version"</literal></expr></argument>, <argument pos:start="27:42" pos:end="27:57"><expr pos:start="27:42" pos:end="27:57"><name pos:start="27:42" pos:end="27:57"><name pos:start="27:42" pos:end="27:45">vmsd</name><operator pos:start="27:46" pos:end="27:47">-&gt;</operator><name pos:start="27:48" pos:end="27:57">version_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><call pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:24">json_start_array</name><argument_list pos:start="29:25" pos:end="29:42">(<argument pos:start="29:26" pos:end="29:31"><expr pos:start="29:26" pos:end="29:31"><name pos:start="29:26" pos:end="29:31">vmdesc</name></expr></argument>, <argument pos:start="29:34" pos:end="29:41"><expr pos:start="29:34" pos:end="29:41"><literal type="string" pos:start="29:34" pos:end="29:41">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="35:5" pos:end="125:5">while <condition pos:start="35:11" pos:end="35:23">(<expr pos:start="35:12" pos:end="35:22"><name pos:start="35:12" pos:end="35:22"><name pos:start="35:12" pos:end="35:16">field</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:22">name</name></name></expr>)</condition> <block pos:start="35:25" pos:end="125:5">{<block_content pos:start="37:9" pos:end="123:16">

        <if_stmt pos:start="37:9" pos:end="121:9"><if pos:start="37:9" pos:end="109:9">if <condition pos:start="37:12" pos:end="39:58">(<expr pos:start="37:13" pos:end="39:57"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:32"><name pos:start="37:14" pos:end="37:18">field</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:32">field_exists</name></name> <operator pos:start="37:34" pos:end="37:35">||</operator>

            <call pos:start="39:13" pos:end="39:57"><name pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:17">field</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:31">field_exists</name></name><argument_list pos:start="39:32" pos:end="39:57">(<argument pos:start="39:33" pos:end="39:38"><expr pos:start="39:33" pos:end="39:38"><name pos:start="39:33" pos:end="39:38">opaque</name></expr></argument>, <argument pos:start="39:41" pos:end="39:56"><expr pos:start="39:41" pos:end="39:56"><name pos:start="39:41" pos:end="39:56"><name pos:start="39:41" pos:end="39:44">vmsd</name><operator pos:start="39:45" pos:end="39:46">-&gt;</operator><name pos:start="39:47" pos:end="39:56">version_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:60" pos:end="109:9">{<block_content pos:start="41:13" pos:end="107:13">

            <decl_stmt pos:start="41:13" pos:end="41:54"><decl pos:start="41:13" pos:end="41:53"><type pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:16">void</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:28">first_elem</name> <init pos:start="41:30" pos:end="41:53">= <expr pos:start="41:32" pos:end="41:53"><name pos:start="41:32" pos:end="41:37">opaque</name> <operator pos:start="41:39" pos:end="41:39">+</operator> <name pos:start="41:41" pos:end="41:53"><name pos:start="41:41" pos:end="41:45">field</name><operator pos:start="41:46" pos:end="41:47">-&gt;</operator><name pos:start="41:48" pos:end="41:53">offset</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="43:13" pos:end="43:60"><decl pos:start="43:13" pos:end="43:17"><type pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">int</name></type> <name pos:start="43:17" pos:end="43:17">i</name></decl>, <decl pos:start="43:20" pos:end="43:59"><type ref="prev" pos:start="43:13" pos:end="43:15"/><name pos:start="43:20" pos:end="43:26">n_elems</name> <init pos:start="43:28" pos:end="43:59">= <expr pos:start="43:30" pos:end="43:59"><call pos:start="43:30" pos:end="43:59"><name pos:start="43:30" pos:end="43:44">vmstate_n_elems</name><argument_list pos:start="43:45" pos:end="43:59">(<argument pos:start="43:46" pos:end="43:51"><expr pos:start="43:46" pos:end="43:51"><name pos:start="43:46" pos:end="43:51">opaque</name></expr></argument>, <argument pos:start="43:54" pos:end="43:58"><expr pos:start="43:54" pos:end="43:58"><name pos:start="43:54" pos:end="43:58">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="45:13" pos:end="45:51"><decl pos:start="45:13" pos:end="45:50"><type pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:15">int</name></type> <name pos:start="45:17" pos:end="45:20">size</name> <init pos:start="45:22" pos:end="45:50">= <expr pos:start="45:24" pos:end="45:50"><call pos:start="45:24" pos:end="45:50"><name pos:start="45:24" pos:end="45:35">vmstate_size</name><argument_list pos:start="45:36" pos:end="45:50">(<argument pos:start="45:37" pos:end="45:42"><expr pos:start="45:37" pos:end="45:42"><name pos:start="45:37" pos:end="45:42">opaque</name></expr></argument>, <argument pos:start="45:45" pos:end="45:49"><expr pos:start="45:45" pos:end="45:49"><name pos:start="45:45" pos:end="45:49">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="47:13" pos:end="47:46"><decl pos:start="47:13" pos:end="47:30"><type pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:19">int64_t</name></type> <name pos:start="47:21" pos:end="47:30">old_offset</name></decl>, <decl pos:start="47:33" pos:end="47:45"><type ref="prev" pos:start="47:13" pos:end="47:19"/><name pos:start="47:33" pos:end="47:45">written_bytes</name></decl>;</decl_stmt>

            <decl_stmt pos:start="49:13" pos:end="49:40"><decl pos:start="49:13" pos:end="49:39"><type pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:17">QJSON</name> <modifier pos:start="49:19" pos:end="49:19">*</modifier></type><name pos:start="49:20" pos:end="49:30">vmdesc_loop</name> <init pos:start="49:32" pos:end="49:39">= <expr pos:start="49:34" pos:end="49:39"><name pos:start="49:34" pos:end="49:39">vmdesc</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:76"><expr pos:start="53:13" pos:end="53:75"><call pos:start="53:13" pos:end="53:75"><name pos:start="53:13" pos:end="53:41">trace_vmstate_save_state_loop</name><argument_list pos:start="53:42" pos:end="53:75">(<argument pos:start="53:43" pos:end="53:52"><expr pos:start="53:43" pos:end="53:52"><name pos:start="53:43" pos:end="53:52"><name pos:start="53:43" pos:end="53:46">vmsd</name><operator pos:start="53:47" pos:end="53:48">-&gt;</operator><name pos:start="53:49" pos:end="53:52">name</name></name></expr></argument>, <argument pos:start="53:55" pos:end="53:65"><expr pos:start="53:55" pos:end="53:65"><name pos:start="53:55" pos:end="53:65"><name pos:start="53:55" pos:end="53:59">field</name><operator pos:start="53:60" pos:end="53:61">-&gt;</operator><name pos:start="53:62" pos:end="53:65">name</name></name></expr></argument>, <argument pos:start="53:68" pos:end="53:74"><expr pos:start="53:68" pos:end="53:74"><name pos:start="53:68" pos:end="53:74">n_elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="61:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:43">(<expr pos:start="55:17" pos:end="55:42"><name pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:21">field</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:28">flags</name></name> <operator pos:start="55:30" pos:end="55:30">&amp;</operator> <name pos:start="55:32" pos:end="55:42">VMS_POINTER</name></expr>)</condition> <block pos:start="55:45" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:48">

                <expr_stmt pos:start="57:17" pos:end="57:50"><expr pos:start="57:17" pos:end="57:49"><name pos:start="57:17" pos:end="57:26">first_elem</name> <operator pos:start="57:28" pos:end="57:28">=</operator> <operator pos:start="57:30" pos:end="57:30">*</operator><operator pos:start="57:31" pos:end="57:31">(</operator><name pos:start="57:32" pos:end="57:35">void</name> <operator pos:start="57:37" pos:end="57:37">*</operator><operator pos:start="57:38" pos:end="57:38">*</operator><operator pos:start="57:39" pos:end="57:39">)</operator><name pos:start="57:40" pos:end="57:49">first_elem</name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:48"><expr pos:start="59:17" pos:end="59:47"><call pos:start="59:17" pos:end="59:47"><name pos:start="59:17" pos:end="59:22">assert</name><argument_list pos:start="59:23" pos:end="59:47">(<argument pos:start="59:24" pos:end="59:46"><expr pos:start="59:24" pos:end="59:46"><name pos:start="59:24" pos:end="59:33">first_elem</name>  <operator pos:start="59:36" pos:end="59:37">||</operator> <operator pos:start="59:39" pos:end="59:39">!</operator><name pos:start="59:40" pos:end="59:46">n_elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <for pos:start="63:13" pos:end="107:13">for <control pos:start="63:17" pos:end="63:41">(<init pos:start="63:18" pos:end="63:23"><expr pos:start="63:18" pos:end="63:22"><name pos:start="63:18" pos:end="63:18">i</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>;</init> <condition pos:start="63:25" pos:end="63:36"><expr pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:25">i</name> <operator pos:start="63:27" pos:end="63:27">&lt;</operator> <name pos:start="63:29" pos:end="63:35">n_elems</name></expr>;</condition> <incr pos:start="63:38" pos:end="63:40"><expr pos:start="63:38" pos:end="63:40"><name pos:start="63:38" pos:end="63:38">i</name><operator pos:start="63:39" pos:end="63:40">++</operator></expr></incr>)</control> <block pos:start="63:43" pos:end="107:13">{<block_content pos:start="65:17" pos:end="105:17">

                <decl_stmt pos:start="65:17" pos:end="65:56"><decl pos:start="65:17" pos:end="65:55"><type pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:20">void</name> <modifier pos:start="65:22" pos:end="65:22">*</modifier></type><name pos:start="65:23" pos:end="65:31">curr_elem</name> <init pos:start="65:33" pos:end="65:55">= <expr pos:start="65:35" pos:end="65:55"><name pos:start="65:35" pos:end="65:44">first_elem</name> <operator pos:start="65:46" pos:end="65:46">+</operator> <name pos:start="65:48" pos:end="65:51">size</name> <operator pos:start="65:53" pos:end="65:53">*</operator> <name pos:start="65:55" pos:end="65:55">i</name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="69:17" pos:end="69:76"><expr pos:start="69:17" pos:end="69:75"><call pos:start="69:17" pos:end="69:75"><name pos:start="69:17" pos:end="69:37">vmsd_desc_field_start</name><argument_list pos:start="69:38" pos:end="69:75">(<argument pos:start="69:39" pos:end="69:42"><expr pos:start="69:39" pos:end="69:42"><name pos:start="69:39" pos:end="69:42">vmsd</name></expr></argument>, <argument pos:start="69:45" pos:end="69:55"><expr pos:start="69:45" pos:end="69:55"><name pos:start="69:45" pos:end="69:55">vmdesc_loop</name></expr></argument>, <argument pos:start="69:58" pos:end="69:62"><expr pos:start="69:58" pos:end="69:62"><name pos:start="69:58" pos:end="69:62">field</name></expr></argument>, <argument pos:start="69:65" pos:end="69:65"><expr pos:start="69:65" pos:end="69:65"><name pos:start="69:65" pos:end="69:65">i</name></expr></argument>, <argument pos:start="69:68" pos:end="69:74"><expr pos:start="69:68" pos:end="69:74"><name pos:start="69:68" pos:end="69:74">n_elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:48"><expr pos:start="71:17" pos:end="71:47"><name pos:start="71:17" pos:end="71:26">old_offset</name> <operator pos:start="71:28" pos:end="71:28">=</operator> <call pos:start="71:30" pos:end="71:47"><name pos:start="71:30" pos:end="71:44">qemu_ftell_fast</name><argument_list pos:start="71:45" pos:end="71:47">(<argument pos:start="71:46" pos:end="71:46"><expr pos:start="71:46" pos:end="71:46"><name pos:start="71:46" pos:end="71:46">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="73:17" pos:end="79:17"><if pos:start="73:17" pos:end="79:17">if <condition pos:start="73:20" pos:end="73:56">(<expr pos:start="73:21" pos:end="73:55"><name pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:25">field</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:32">flags</name></name> <operator pos:start="73:34" pos:end="73:34">&amp;</operator> <name pos:start="73:36" pos:end="73:55">VMS_ARRAY_OF_POINTER</name></expr>)</condition> <block pos:start="73:58" pos:end="79:17">{<block_content pos:start="75:21" pos:end="77:52">

                    <expr_stmt pos:start="75:21" pos:end="75:38"><expr pos:start="75:21" pos:end="75:37"><call pos:start="75:21" pos:end="75:37"><name pos:start="75:21" pos:end="75:26">assert</name><argument_list pos:start="75:27" pos:end="75:37">(<argument pos:start="75:28" pos:end="75:36"><expr pos:start="75:28" pos:end="75:36"><name pos:start="75:28" pos:end="75:36">curr_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:52"><expr pos:start="77:21" pos:end="77:51"><name pos:start="77:21" pos:end="77:29">curr_elem</name> <operator pos:start="77:31" pos:end="77:31">=</operator> <operator pos:start="77:33" pos:end="77:33">*</operator><operator pos:start="77:34" pos:end="77:34">(</operator><name pos:start="77:35" pos:end="77:38">void</name> <operator pos:start="77:40" pos:end="77:40">*</operator><operator pos:start="77:41" pos:end="77:41">*</operator><operator pos:start="77:42" pos:end="77:42">)</operator><name pos:start="77:43" pos:end="77:51">curr_elem</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="81:17" pos:end="89:17"><if pos:start="81:17" pos:end="85:17">if <condition pos:start="81:20" pos:end="81:46">(<expr pos:start="81:21" pos:end="81:45"><name pos:start="81:21" pos:end="81:32"><name pos:start="81:21" pos:end="81:25">field</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:32">flags</name></name> <operator pos:start="81:34" pos:end="81:34">&amp;</operator> <name pos:start="81:36" pos:end="81:45">VMS_STRUCT</name></expr>)</condition> <block pos:start="81:48" pos:end="85:17">{<block_content pos:start="83:21" pos:end="83:79">

                    <expr_stmt pos:start="83:21" pos:end="83:79"><expr pos:start="83:21" pos:end="83:78"><call pos:start="83:21" pos:end="83:78"><name pos:start="83:21" pos:end="83:38">vmstate_save_state</name><argument_list pos:start="83:39" pos:end="83:78">(<argument pos:start="83:40" pos:end="83:40"><expr pos:start="83:40" pos:end="83:40"><name pos:start="83:40" pos:end="83:40">f</name></expr></argument>, <argument pos:start="83:43" pos:end="83:53"><expr pos:start="83:43" pos:end="83:53"><name pos:start="83:43" pos:end="83:53"><name pos:start="83:43" pos:end="83:47">field</name><operator pos:start="83:48" pos:end="83:49">-&gt;</operator><name pos:start="83:50" pos:end="83:53">vmsd</name></name></expr></argument>, <argument pos:start="83:56" pos:end="83:64"><expr pos:start="83:56" pos:end="83:64"><name pos:start="83:56" pos:end="83:64">curr_elem</name></expr></argument>, <argument pos:start="83:67" pos:end="83:77"><expr pos:start="83:67" pos:end="83:77"><name pos:start="83:67" pos:end="83:77">vmdesc_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="85:19" pos:end="89:17">else <block pos:start="85:24" pos:end="89:17">{<block_content pos:start="87:21" pos:end="87:77">

                    <expr_stmt pos:start="87:21" pos:end="87:77"><expr pos:start="87:21" pos:end="87:76"><call pos:start="87:21" pos:end="87:76"><name pos:start="87:21" pos:end="87:36"><name pos:start="87:21" pos:end="87:25">field</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:31">info</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:36">put</name></name><argument_list pos:start="87:37" pos:end="87:76">(<argument pos:start="87:38" pos:end="87:38"><expr pos:start="87:38" pos:end="87:38"><name pos:start="87:38" pos:end="87:38">f</name></expr></argument>, <argument pos:start="87:41" pos:end="87:49"><expr pos:start="87:41" pos:end="87:49"><name pos:start="87:41" pos:end="87:49">curr_elem</name></expr></argument>, <argument pos:start="87:52" pos:end="87:55"><expr pos:start="87:52" pos:end="87:55"><name pos:start="87:52" pos:end="87:55">size</name></expr></argument>, <argument pos:start="87:58" pos:end="87:62"><expr pos:start="87:58" pos:end="87:62"><name pos:start="87:58" pos:end="87:62">field</name></expr></argument>, <argument pos:start="87:65" pos:end="87:75"><expr pos:start="87:65" pos:end="87:75"><name pos:start="87:65" pos:end="87:75">vmdesc_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="93:17" pos:end="93:64"><expr pos:start="93:17" pos:end="93:63"><name pos:start="93:17" pos:end="93:29">written_bytes</name> <operator pos:start="93:31" pos:end="93:31">=</operator> <call pos:start="93:33" pos:end="93:50"><name pos:start="93:33" pos:end="93:47">qemu_ftell_fast</name><argument_list pos:start="93:48" pos:end="93:50">(<argument pos:start="93:49" pos:end="93:49"><expr pos:start="93:49" pos:end="93:49"><name pos:start="93:49" pos:end="93:49">f</name></expr></argument>)</argument_list></call> <operator pos:start="93:52" pos:end="93:52">-</operator> <name pos:start="93:54" pos:end="93:63">old_offset</name></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:80"><expr pos:start="95:17" pos:end="95:79"><call pos:start="95:17" pos:end="95:79"><name pos:start="95:17" pos:end="95:35">vmsd_desc_field_end</name><argument_list pos:start="95:36" pos:end="95:79">(<argument pos:start="95:37" pos:end="95:40"><expr pos:start="95:37" pos:end="95:40"><name pos:start="95:37" pos:end="95:40">vmsd</name></expr></argument>, <argument pos:start="95:43" pos:end="95:53"><expr pos:start="95:43" pos:end="95:53"><name pos:start="95:43" pos:end="95:53">vmdesc_loop</name></expr></argument>, <argument pos:start="95:56" pos:end="95:60"><expr pos:start="95:56" pos:end="95:60"><name pos:start="95:56" pos:end="95:60">field</name></expr></argument>, <argument pos:start="95:63" pos:end="95:75"><expr pos:start="95:63" pos:end="95:75"><name pos:start="95:63" pos:end="95:75">written_bytes</name></expr></argument>, <argument pos:start="95:78" pos:end="95:78"><expr pos:start="95:78" pos:end="95:78"><name pos:start="95:78" pos:end="95:78">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="99:17" pos:end="99:73">/* Compressed arrays only care about the first element */</comment>

                <if_stmt pos:start="101:17" pos:end="105:17"><if pos:start="101:17" pos:end="105:17">if <condition pos:start="101:20" pos:end="101:60">(<expr pos:start="101:21" pos:end="101:59"><name pos:start="101:21" pos:end="101:31">vmdesc_loop</name> <operator pos:start="101:33" pos:end="101:34">&amp;&amp;</operator> <call pos:start="101:36" pos:end="101:59"><name pos:start="101:36" pos:end="101:52">vmsd_can_compress</name><argument_list pos:start="101:53" pos:end="101:59">(<argument pos:start="101:54" pos:end="101:58"><expr pos:start="101:54" pos:end="101:58"><name pos:start="101:54" pos:end="101:58">field</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:62" pos:end="105:17">{<block_content pos:start="103:21" pos:end="103:39">

                    <expr_stmt pos:start="103:21" pos:end="103:39"><expr pos:start="103:21" pos:end="103:38"><name pos:start="103:21" pos:end="103:31">vmdesc_loop</name> <operator pos:start="103:33" pos:end="103:33">=</operator> <name pos:start="103:35" pos:end="103:38">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="109:11" pos:end="121:9">else <block pos:start="109:16" pos:end="121:9">{<block_content pos:start="111:13" pos:end="119:13">

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:46">(<expr pos:start="111:17" pos:end="111:45"><name pos:start="111:17" pos:end="111:28"><name pos:start="111:17" pos:end="111:21">field</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:28">flags</name></name> <operator pos:start="111:30" pos:end="111:30">&amp;</operator> <name pos:start="111:32" pos:end="111:45">VMS_MUST_EXIST</name></expr>)</condition> <block pos:start="111:48" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:57">

                <expr_stmt pos:start="113:17" pos:end="115:49"><expr pos:start="113:17" pos:end="115:48"><call pos:start="113:17" pos:end="115:48"><name pos:start="113:17" pos:end="113:28">error_report</name><argument_list pos:start="113:29" pos:end="115:48">(<argument pos:start="113:30" pos:end="113:68"><expr pos:start="113:30" pos:end="113:68"><literal type="string" pos:start="113:30" pos:end="113:68">"Output state validation failed: %s/%s"</literal></expr></argument>,

                        <argument pos:start="115:25" pos:end="115:34"><expr pos:start="115:25" pos:end="115:34"><name pos:start="115:25" pos:end="115:34"><name pos:start="115:25" pos:end="115:28">vmsd</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:34">name</name></name></expr></argument>, <argument pos:start="115:37" pos:end="115:47"><expr pos:start="115:37" pos:end="115:47"><name pos:start="115:37" pos:end="115:47"><name pos:start="115:37" pos:end="115:41">field</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:47">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:57"><expr pos:start="117:17" pos:end="117:56"><call pos:start="117:17" pos:end="117:56"><name pos:start="117:17" pos:end="117:22">assert</name><argument_list pos:start="117:23" pos:end="117:56">(<argument pos:start="117:24" pos:end="117:55"><expr pos:start="117:24" pos:end="117:55"><operator pos:start="117:24" pos:end="117:24">!</operator><operator pos:start="117:25" pos:end="117:25">(</operator><name pos:start="117:26" pos:end="117:37"><name pos:start="117:26" pos:end="117:30">field</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:37">flags</name></name> <operator pos:start="117:39" pos:end="117:39">&amp;</operator> <name pos:start="117:41" pos:end="117:54">VMS_MUST_EXIST</name><operator pos:start="117:55" pos:end="117:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:16"><expr pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:13">field</name><operator pos:start="123:14" pos:end="123:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:15">(<expr pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:14">vmdesc</name></expr>)</condition> <block pos:start="129:17" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:31">

        <expr_stmt pos:start="131:9" pos:end="131:31"><expr pos:start="131:9" pos:end="131:30"><call pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:22">json_end_array</name><argument_list pos:start="131:23" pos:end="131:30">(<argument pos:start="131:24" pos:end="131:29"><expr pos:start="131:24" pos:end="131:29"><name pos:start="131:24" pos:end="131:29">vmdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:53"><expr pos:start="137:5" pos:end="137:52"><call pos:start="137:5" pos:end="137:52"><name pos:start="137:5" pos:end="137:27">vmstate_subsection_save</name><argument_list pos:start="137:28" pos:end="137:52">(<argument pos:start="137:29" pos:end="137:29"><expr pos:start="137:29" pos:end="137:29"><name pos:start="137:29" pos:end="137:29">f</name></expr></argument>, <argument pos:start="137:32" pos:end="137:35"><expr pos:start="137:32" pos:end="137:35"><name pos:start="137:32" pos:end="137:35">vmsd</name></expr></argument>, <argument pos:start="137:38" pos:end="137:43"><expr pos:start="137:38" pos:end="137:43"><name pos:start="137:38" pos:end="137:43">opaque</name></expr></argument>, <argument pos:start="137:46" pos:end="137:51"><expr pos:start="137:46" pos:end="137:51"><name pos:start="137:46" pos:end="137:51">vmdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
