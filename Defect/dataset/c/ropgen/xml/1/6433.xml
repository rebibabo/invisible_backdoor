<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6433.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">net_init_dump</name><parameter_list pos:start="1:18" pos:end="3:53">(<parameter pos:start="1:19" pos:end="1:46"><decl pos:start="1:19" pos:end="1:46"><type pos:start="1:19" pos:end="1:46"><specifier pos:start="1:19" pos:end="1:23">const</specifier> <name pos:start="1:25" pos:end="1:40">NetClientOptions</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">opts</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">name</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:38"><decl pos:start="3:19" pos:end="3:38"><type pos:start="3:19" pos:end="3:38"><name pos:start="3:19" pos:end="3:32">NetClientState</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">peer</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:52"><decl pos:start="3:41" pos:end="3:52"><type pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:45">Error</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier><modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:52">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="9:5" pos:end="75:56">

    <comment type="block" pos:start="7:5" pos:end="7:48">/* FIXME error_setg(errp, ...) on failure */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:20">file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:22"><name pos:start="13:10" pos:end="13:17">def_file</name><index pos:start="13:18" pos:end="13:22">[<expr pos:start="13:19" pos:end="13:21"><literal type="number" pos:start="13:19" pos:end="13:21">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:29"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:27">NetdevDumpOptions</name> <modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:33">dump</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:55"><expr pos:start="19:5" pos:end="19:54"><call pos:start="19:5" pos:end="19:54"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:54">(<argument pos:start="19:12" pos:end="19:53"><expr pos:start="19:12" pos:end="19:53"><name pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:15">opts</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:21">kind</name></name> <operator pos:start="19:23" pos:end="19:24">==</operator> <name pos:start="19:26" pos:end="19:53">NET_CLIENT_OPTIONS_KIND_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:8">dump</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <name pos:start="21:12" pos:end="21:21"><name pos:start="21:12" pos:end="21:15">opts</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:21">dump</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><call pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:16">(<argument pos:start="25:12" pos:end="25:15"><expr pos:start="25:12" pos:end="25:15"><name pos:start="25:12" pos:end="25:15">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="51:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:23">(<expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:12">dump</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:22">has_file</name></name></expr>)</condition> <block pos:start="29:25" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:26">

        <expr_stmt pos:start="31:9" pos:end="31:26"><expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:12">file</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:25"><name pos:start="31:16" pos:end="31:19">dump</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:25">file</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="51:5">else <block pos:start="33:12" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:24">

        <decl_stmt pos:start="35:9" pos:end="35:15"><decl pos:start="35:9" pos:end="35:14"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:14">id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:16"><decl pos:start="37:9" pos:end="37:15"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:47"><expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:46"><name pos:start="41:15" pos:end="41:35">net_hub_id_for_client</name><argument_list pos:start="41:36" pos:end="41:46">(<argument pos:start="41:37" pos:end="41:40"><expr pos:start="41:37" pos:end="41:40"><name pos:start="41:37" pos:end="41:40">peer</name></expr></argument>, <argument pos:start="41:43" pos:end="41:45"><expr pos:start="41:43" pos:end="41:45"><operator pos:start="41:43" pos:end="41:43">&amp;</operator><name pos:start="41:44" pos:end="41:45">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><call pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:14">assert</name><argument_list pos:start="43:15" pos:end="43:24">(<argument pos:start="43:16" pos:end="43:23"><expr pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:18">ret</name> <operator pos:start="43:20" pos:end="43:21">==</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:27" pos:end="43:53">/* peer must be on a hub */</comment>



        <expr_stmt pos:start="47:9" pos:end="47:69"><expr pos:start="47:9" pos:end="47:68"><call pos:start="47:9" pos:end="47:68"><name pos:start="47:9" pos:end="47:16">snprintf</name><argument_list pos:start="47:17" pos:end="47:68">(<argument pos:start="47:18" pos:end="47:25"><expr pos:start="47:18" pos:end="47:25"><name pos:start="47:18" pos:end="47:25">def_file</name></expr></argument>, <argument pos:start="47:28" pos:end="47:43"><expr pos:start="47:28" pos:end="47:43"><sizeof pos:start="47:28" pos:end="47:43">sizeof<argument_list pos:start="47:34" pos:end="47:43">(<argument pos:start="47:35" pos:end="47:42"><expr pos:start="47:35" pos:end="47:42"><name pos:start="47:35" pos:end="47:42">def_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:46" pos:end="47:63"><expr pos:start="47:46" pos:end="47:63"><literal type="string" pos:start="47:46" pos:end="47:63">"qemu-vlan%d.pcap"</literal></expr></argument>, <argument pos:start="47:66" pos:end="47:67"><expr pos:start="47:66" pos:end="47:67"><name pos:start="47:66" pos:end="47:67">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:24"><expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:12">file</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:23">def_file</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="55:5" pos:end="71:5"><if pos:start="55:5" pos:end="67:5">if <condition pos:start="55:8" pos:end="55:22">(<expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:12">dump</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:21">has_len</name></name></expr>)</condition> <block pos:start="55:24" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:24">

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:32">(<expr pos:start="57:13" pos:end="57:31"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:16">dump</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:21">len</name></name> <operator pos:start="57:23" pos:end="57:23">&gt;</operator> <name pos:start="57:25" pos:end="57:31">INT_MAX</name></expr>)</condition> <block pos:start="57:34" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:22">

            <expr_stmt pos:start="59:13" pos:end="59:63"><expr pos:start="59:13" pos:end="59:62"><call pos:start="59:13" pos:end="59:62"><name pos:start="59:13" pos:end="59:24">error_report</name><argument_list pos:start="59:25" pos:end="59:62">(<argument pos:start="59:26" pos:end="59:50"><expr pos:start="59:26" pos:end="59:50"><literal type="string" pos:start="59:26" pos:end="59:44">"invalid length: %"</literal><name pos:start="59:45" pos:end="59:50">PRIu64</name></expr></argument>, <argument pos:start="59:53" pos:end="59:61"><expr pos:start="59:53" pos:end="59:61"><name pos:start="59:53" pos:end="59:61"><name pos:start="59:53" pos:end="59:56">dump</name><operator pos:start="59:57" pos:end="59:58">-&gt;</operator><name pos:start="59:59" pos:end="59:61">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:22">return <expr pos:start="61:20" pos:end="61:21"><operator pos:start="61:20" pos:end="61:20">-</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">len</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:23"><name pos:start="65:15" pos:end="65:18">dump</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:23">len</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="71:5">else <block pos:start="67:12" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:20">

        <expr_stmt pos:start="69:9" pos:end="69:20"><expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:11">len</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <literal type="number" pos:start="69:15" pos:end="69:19">65536</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="75:5" pos:end="75:56">return <expr pos:start="75:12" pos:end="75:55"><call pos:start="75:12" pos:end="75:55"><name pos:start="75:12" pos:end="75:24">net_dump_init</name><argument_list pos:start="75:25" pos:end="75:55">(<argument pos:start="75:26" pos:end="75:29"><expr pos:start="75:26" pos:end="75:29"><name pos:start="75:26" pos:end="75:29">peer</name></expr></argument>, <argument pos:start="75:32" pos:end="75:37"><expr pos:start="75:32" pos:end="75:37"><literal type="string" pos:start="75:32" pos:end="75:37">"dump"</literal></expr></argument>, <argument pos:start="75:40" pos:end="75:43"><expr pos:start="75:40" pos:end="75:43"><name pos:start="75:40" pos:end="75:43">name</name></expr></argument>, <argument pos:start="75:46" pos:end="75:49"><expr pos:start="75:46" pos:end="75:49"><name pos:start="75:46" pos:end="75:49">file</name></expr></argument>, <argument pos:start="75:52" pos:end="75:54"><expr pos:start="75:52" pos:end="75:54"><name pos:start="75:52" pos:end="75:54">len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
