<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12980.c" pos:tabs="8"><function pos:start="1:1" pos:end="70:19"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">hmp_savevm</name><parameter_list pos:start="1:16" pos:end="1:49">(<parameter pos:start="1:17" pos:end="1:28"><decl pos:start="1:17" pos:end="1:28"><type pos:start="1:17" pos:end="1:28"><name pos:start="1:17" pos:end="1:23">Monitor</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:28">mon</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:41">QDict</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">qdict</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="70:19">{<block_content pos:start="3:5" pos:end="70:19">
    <decl_stmt pos:start="3:5" pos:end="3:31"><decl pos:start="3:5" pos:end="3:24"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:20">BlockDriverState</name> <modifier pos:start="3:22" pos:end="3:22">*</modifier></type><name pos:start="3:23" pos:end="3:24">bs</name></decl>, <decl pos:start="3:27" pos:end="3:30"><type ref="prev" pos:start="3:5" pos:end="3:22"><modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:30">bs1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:66"><decl pos:start="4:5" pos:end="4:24"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:20">QEMUSnapshotInfo</name></type> <name pos:start="4:22" pos:end="4:24">sn1</name></decl>, <decl pos:start="4:27" pos:end="4:36"><type ref="prev" pos:start="4:5" pos:end="4:20"><modifier pos:start="4:27" pos:end="4:27">*</modifier></type><name pos:start="4:28" pos:end="4:29">sn</name> <init pos:start="4:31" pos:end="4:36">= <expr pos:start="4:33" pos:end="4:36"><operator pos:start="4:33" pos:end="4:33">&amp;</operator><name pos:start="4:34" pos:end="4:36">sn1</name></expr></init></decl>, <decl pos:start="4:39" pos:end="4:45"><type ref="prev" pos:start="4:5" pos:end="4:20"/><name pos:start="4:39" pos:end="4:45">old_sn1</name></decl>, <decl pos:start="4:48" pos:end="4:65"><type ref="prev" pos:start="4:5" pos:end="4:20"><modifier pos:start="4:48" pos:end="4:48">*</modifier></type><name pos:start="4:49" pos:end="4:54">old_sn</name> <init pos:start="4:56" pos:end="4:65">= <expr pos:start="4:58" pos:end="4:65"><operator pos:start="4:58" pos:end="4:58">&amp;</operator><name pos:start="4:59" pos:end="4:65">old_sn1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:16"><decl pos:start="6:5" pos:end="6:15"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">QEMUFile</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:15">f</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:24">saved_vm_running</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:27"><decl pos:start="8:5" pos:end="8:26"><type pos:start="8:5" pos:end="8:12"><name pos:start="8:5" pos:end="8:12">uint64_t</name></type> <name pos:start="8:14" pos:end="8:26">vm_state_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">qemu_timeval</name></type> <name pos:start="9:18" pos:end="9:19">tv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:17"><decl pos:start="10:5" pos:end="10:16"><type pos:start="10:5" pos:end="10:13"><name pos:start="10:5" pos:end="10:13"><name pos:start="10:5" pos:end="10:10">struct</name> <name pos:start="10:12" pos:end="10:13">tm</name></name></type> <name pos:start="10:15" pos:end="10:16">tm</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:20">name</name> <init pos:start="11:22" pos:end="11:55">= <expr pos:start="11:24" pos:end="11:55"><call pos:start="11:24" pos:end="11:55"><name pos:start="11:24" pos:end="11:40">qdict_get_try_str</name><argument_list pos:start="11:41" pos:end="11:55">(<argument pos:start="11:42" pos:end="11:46"><expr pos:start="11:42" pos:end="11:46"><name pos:start="11:42" pos:end="11:46">qdict</name></expr></argument>, <argument pos:start="11:49" pos:end="11:54"><expr pos:start="11:49" pos:end="11:54"><literal type="string" pos:start="11:49" pos:end="11:54">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:28"><decl pos:start="12:5" pos:end="12:27"><type pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:9">Error</name> <modifier pos:start="12:11" pos:end="12:11">*</modifier></type><name pos:start="12:12" pos:end="12:20">local_err</name> <init pos:start="12:22" pos:end="12:27">= <expr pos:start="12:24" pos:end="12:27"><name pos:start="12:24" pos:end="12:27">NULL</name></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="13:5" pos:end="13:84">/* Verify if there is a device that doesn't support snapshots and is writable */</comment>
    <expr_stmt pos:start="14:5" pos:end="14:14"><expr pos:start="14:5" pos:end="14:13"><name pos:start="14:5" pos:end="14:6">bs</name> <operator pos:start="14:8" pos:end="14:8">=</operator> <name pos:start="14:10" pos:end="14:13">NULL</name></expr>;</expr_stmt>
    <while pos:start="15:5" pos:end="70:19">while <condition pos:start="15:11" pos:end="15:32">(<expr pos:start="15:12" pos:end="15:31"><operator pos:start="15:12" pos:end="15:12">(</operator><name pos:start="15:13" pos:end="15:14">bs</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <call pos:start="15:18" pos:end="15:30"><name pos:start="15:18" pos:end="15:26">bdrv_next</name><argument_list pos:start="15:27" pos:end="15:30">(<argument pos:start="15:28" pos:end="15:29"><expr pos:start="15:28" pos:end="15:29"><name pos:start="15:28" pos:end="15:29">bs</name></expr></argument>)</argument_list></call><operator pos:start="15:31" pos:end="15:31">)</operator></expr>)</condition> <block pos:start="15:34" pos:end="70:19">{<block_content pos:start="16:9" pos:end="70:19">
        <if_stmt pos:start="16:9" pos:end="70:19"><if pos:start="16:9" pos:end="70:19">if <condition pos:start="16:12" pos:end="16:59">(<expr pos:start="16:13" pos:end="16:58"><operator pos:start="16:13" pos:end="16:13">!</operator><call pos:start="16:14" pos:end="16:33"><name pos:start="16:14" pos:end="16:29">bdrv_is_inserted</name><argument_list pos:start="16:30" pos:end="16:33">(<argument pos:start="16:31" pos:end="16:32"><expr pos:start="16:31" pos:end="16:32"><name pos:start="16:31" pos:end="16:32">bs</name></expr></argument>)</argument_list></call> <operator pos:start="16:35" pos:end="16:36">||</operator> <call pos:start="16:38" pos:end="16:58"><name pos:start="16:38" pos:end="16:54">bdrv_is_read_only</name><argument_list pos:start="16:55" pos:end="16:58">(<argument pos:start="16:56" pos:end="16:57"><expr pos:start="16:56" pos:end="16:57"><name pos:start="16:56" pos:end="16:57">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="16:61" pos:end="70:19">{<block_content pos:start="17:13" pos:end="70:19">
            <continue pos:start="17:13" pos:end="17:21">continue;</continue>
        <if_stmt pos:start="18:9" pos:end="70:19"><if pos:start="18:9" pos:end="70:19">if <condition pos:start="18:12" pos:end="18:35">(<expr pos:start="18:13" pos:end="18:34"><operator pos:start="18:13" pos:end="18:13">!</operator><call pos:start="18:14" pos:end="18:34"><name pos:start="18:14" pos:end="18:30">bdrv_can_snapshot</name><argument_list pos:start="18:31" pos:end="18:34">(<argument pos:start="18:32" pos:end="18:33"><expr pos:start="18:32" pos:end="18:33"><name pos:start="18:32" pos:end="18:33">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="18:37" pos:end="70:19">{<block_content pos:start="19:13" pos:end="70:19">
            <expr_stmt pos:start="19:13" pos:end="20:57"><expr pos:start="19:13" pos:end="20:56"><call pos:start="19:13" pos:end="20:56"><name pos:start="19:13" pos:end="19:26">monitor_printf</name><argument_list pos:start="19:27" pos:end="20:56">(<argument pos:start="19:28" pos:end="19:30"><expr pos:start="19:28" pos:end="19:30"><name pos:start="19:28" pos:end="19:30">mon</name></expr></argument>, <argument pos:start="19:33" pos:end="19:91"><expr pos:start="19:33" pos:end="19:91"><literal type="string" pos:start="19:33" pos:end="19:91">"Device '%s' is writable but does not support snapshots.\n"</literal></expr></argument>,
                               <argument pos:start="20:32" pos:end="20:55"><expr pos:start="20:32" pos:end="20:55"><call pos:start="20:32" pos:end="20:55"><name pos:start="20:32" pos:end="20:51">bdrv_get_device_name</name><argument_list pos:start="20:52" pos:end="20:55">(<argument pos:start="20:53" pos:end="20:54"><expr pos:start="20:53" pos:end="20:54"><name pos:start="20:53" pos:end="20:54">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:6">bs</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <call pos:start="21:10" pos:end="21:26"><name pos:start="21:10" pos:end="21:24">find_vmstate_bs</name><argument_list pos:start="21:25" pos:end="21:26">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="70:19"><if pos:start="22:5" pos:end="70:19">if <condition pos:start="22:8" pos:end="22:12">(<expr pos:start="22:9" pos:end="22:11"><operator pos:start="22:9" pos:end="22:9">!</operator><name pos:start="22:10" pos:end="22:11">bs</name></expr>)</condition> <block pos:start="22:14" pos:end="70:19">{<block_content pos:start="23:9" pos:end="70:19">
        <expr_stmt pos:start="23:9" pos:end="23:70"><expr pos:start="23:9" pos:end="23:69"><call pos:start="23:9" pos:end="23:69"><name pos:start="23:9" pos:end="23:22">monitor_printf</name><argument_list pos:start="23:23" pos:end="23:69">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">mon</name></expr></argument>, <argument pos:start="23:29" pos:end="23:68"><expr pos:start="23:29" pos:end="23:68"><literal type="string" pos:start="23:29" pos:end="23:68">"No block device can accept snapshots\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:45"><expr pos:start="24:5" pos:end="24:44"><name pos:start="24:5" pos:end="24:20">saved_vm_running</name> <operator pos:start="24:22" pos:end="24:22">=</operator> <call pos:start="24:24" pos:end="24:44"><name pos:start="24:24" pos:end="24:42">runstate_is_running</name><argument_list pos:start="24:43" pos:end="24:44">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><call pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:11">vm_stop</name><argument_list pos:start="25:12" pos:end="25:30">(<argument pos:start="25:13" pos:end="25:29"><expr pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:29">RUN_STATE_SAVE_VM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:31"><expr pos:start="26:5" pos:end="26:30"><call pos:start="26:5" pos:end="26:30"><name pos:start="26:5" pos:end="26:10">memset</name><argument_list pos:start="26:11" pos:end="26:30">(<argument pos:start="26:12" pos:end="26:13"><expr pos:start="26:12" pos:end="26:13"><name pos:start="26:12" pos:end="26:13">sn</name></expr></argument>, <argument pos:start="26:16" pos:end="26:16"><expr pos:start="26:16" pos:end="26:16"><literal type="number" pos:start="26:16" pos:end="26:16">0</literal></expr></argument>, <argument pos:start="26:19" pos:end="26:29"><expr pos:start="26:19" pos:end="26:29"><sizeof pos:start="26:19" pos:end="26:29">sizeof<argument_list pos:start="26:25" pos:end="26:29">(<argument pos:start="26:26" pos:end="26:28"><expr pos:start="26:26" pos:end="26:28"><operator pos:start="26:26" pos:end="26:26">*</operator><name pos:start="26:27" pos:end="26:28">sn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="27:5" pos:end="27:31">/* fill auxiliary fields */</comment>
    <expr_stmt pos:start="28:5" pos:end="28:27"><expr pos:start="28:5" pos:end="28:26"><call pos:start="28:5" pos:end="28:26"><name pos:start="28:5" pos:end="28:21">qemu_gettimeofday</name><argument_list pos:start="28:22" pos:end="28:26">(<argument pos:start="28:23" pos:end="28:25"><expr pos:start="28:23" pos:end="28:25"><operator pos:start="28:23" pos:end="28:23">&amp;</operator><name pos:start="28:24" pos:end="28:25">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:6">sn</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:16">date_sec</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <name pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:21">tv</name><operator pos:start="29:22" pos:end="29:22">.</operator><name pos:start="29:23" pos:end="29:28">tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:38"><expr pos:start="30:5" pos:end="30:37"><name pos:start="30:5" pos:end="30:17"><name pos:start="30:5" pos:end="30:6">sn</name><operator pos:start="30:7" pos:end="30:8">-&gt;</operator><name pos:start="30:9" pos:end="30:17">date_nsec</name></name> <operator pos:start="30:19" pos:end="30:19">=</operator> <name pos:start="30:21" pos:end="30:30"><name pos:start="30:21" pos:end="30:22">tv</name><operator pos:start="30:23" pos:end="30:23">.</operator><name pos:start="30:24" pos:end="30:30">tv_usec</name></name> <operator pos:start="30:32" pos:end="30:32">*</operator> <literal type="number" pos:start="30:34" pos:end="30:37">1000</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:62"><expr pos:start="31:5" pos:end="31:61"><name pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:6">sn</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:21">vm_clock_nsec</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="31:61"><name pos:start="31:25" pos:end="31:41">qemu_clock_get_ns</name><argument_list pos:start="31:42" pos:end="31:61">(<argument pos:start="31:43" pos:end="31:60"><expr pos:start="31:43" pos:end="31:60"><name pos:start="31:43" pos:end="31:60">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="32:5" pos:end="70:19"><if pos:start="32:5" pos:end="70:19">if <condition pos:start="32:8" pos:end="32:13">(<expr pos:start="32:9" pos:end="32:12"><name pos:start="32:9" pos:end="32:12">name</name></expr>)</condition> <block pos:start="32:15" pos:end="70:19">{<block_content pos:start="33:9" pos:end="70:19">
        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:50"><name pos:start="33:15" pos:end="33:32">bdrv_snapshot_find</name><argument_list pos:start="33:33" pos:end="33:50">(<argument pos:start="33:34" pos:end="33:35"><expr pos:start="33:34" pos:end="33:35"><name pos:start="33:34" pos:end="33:35">bs</name></expr></argument>, <argument pos:start="33:38" pos:end="33:43"><expr pos:start="33:38" pos:end="33:43"><name pos:start="33:38" pos:end="33:43">old_sn</name></expr></argument>, <argument pos:start="33:46" pos:end="33:49"><expr pos:start="33:46" pos:end="33:49"><name pos:start="33:46" pos:end="33:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="34:9" pos:end="39:5"><if pos:start="34:9" pos:end="37:9">if <condition pos:start="34:12" pos:end="34:21">(<expr pos:start="34:13" pos:end="34:20"><name pos:start="34:13" pos:end="34:15">ret</name> <operator pos:start="34:17" pos:end="34:18">&gt;=</operator> <literal type="number" pos:start="34:20" pos:end="34:20">0</literal></expr>)</condition> <block pos:start="34:23" pos:end="37:9">{<block_content pos:start="35:13" pos:end="36:68">
            <expr_stmt pos:start="35:13" pos:end="35:62"><expr pos:start="35:13" pos:end="35:61"><call pos:start="35:13" pos:end="35:61"><name pos:start="35:13" pos:end="35:19">pstrcpy</name><argument_list pos:start="35:20" pos:end="35:61">(<argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:22">sn</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:28">name</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:46"><expr pos:start="35:31" pos:end="35:46"><sizeof pos:start="35:31" pos:end="35:46">sizeof<argument_list pos:start="35:37" pos:end="35:46">(<argument pos:start="35:38" pos:end="35:45"><expr pos:start="35:38" pos:end="35:45"><name pos:start="35:38" pos:end="35:45"><name pos:start="35:38" pos:end="35:39">sn</name><operator pos:start="35:40" pos:end="35:41">-&gt;</operator><name pos:start="35:42" pos:end="35:45">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:49" pos:end="35:60"><expr pos:start="35:49" pos:end="35:60"><name pos:start="35:49" pos:end="35:60"><name pos:start="35:49" pos:end="35:54">old_sn</name><operator pos:start="35:55" pos:end="35:56">-&gt;</operator><name pos:start="35:57" pos:end="35:60">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="36:13" pos:end="36:68"><expr pos:start="36:13" pos:end="36:67"><call pos:start="36:13" pos:end="36:67"><name pos:start="36:13" pos:end="36:19">pstrcpy</name><argument_list pos:start="36:20" pos:end="36:67">(<argument pos:start="36:21" pos:end="36:30"><expr pos:start="36:21" pos:end="36:30"><name pos:start="36:21" pos:end="36:30"><name pos:start="36:21" pos:end="36:22">sn</name><operator pos:start="36:23" pos:end="36:24">-&gt;</operator><name pos:start="36:25" pos:end="36:30">id_str</name></name></expr></argument>, <argument pos:start="36:33" pos:end="36:50"><expr pos:start="36:33" pos:end="36:50"><sizeof pos:start="36:33" pos:end="36:50">sizeof<argument_list pos:start="36:39" pos:end="36:50">(<argument pos:start="36:40" pos:end="36:49"><expr pos:start="36:40" pos:end="36:49"><name pos:start="36:40" pos:end="36:49"><name pos:start="36:40" pos:end="36:41">sn</name><operator pos:start="36:42" pos:end="36:43">-&gt;</operator><name pos:start="36:44" pos:end="36:49">id_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="36:53" pos:end="36:66"><expr pos:start="36:53" pos:end="36:66"><name pos:start="36:53" pos:end="36:66"><name pos:start="36:53" pos:end="36:58">old_sn</name><operator pos:start="36:59" pos:end="36:60">-&gt;</operator><name pos:start="36:61" pos:end="36:66">id_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="37:11" pos:end="39:5">else <block pos:start="37:16" pos:end="39:5">{<block_content pos:start="38:13" pos:end="38:54">
            <expr_stmt pos:start="38:13" pos:end="38:54"><expr pos:start="38:13" pos:end="38:53"><call pos:start="38:13" pos:end="38:53"><name pos:start="38:13" pos:end="38:19">pstrcpy</name><argument_list pos:start="38:20" pos:end="38:53">(<argument pos:start="38:21" pos:end="38:28"><expr pos:start="38:21" pos:end="38:28"><name pos:start="38:21" pos:end="38:28"><name pos:start="38:21" pos:end="38:22">sn</name><operator pos:start="38:23" pos:end="38:24">-&gt;</operator><name pos:start="38:25" pos:end="38:28">name</name></name></expr></argument>, <argument pos:start="38:31" pos:end="38:46"><expr pos:start="38:31" pos:end="38:46"><sizeof pos:start="38:31" pos:end="38:46">sizeof<argument_list pos:start="38:37" pos:end="38:46">(<argument pos:start="38:38" pos:end="38:45"><expr pos:start="38:38" pos:end="38:45"><name pos:start="38:38" pos:end="38:45"><name pos:start="38:38" pos:end="38:39">sn</name><operator pos:start="38:40" pos:end="38:41">-&gt;</operator><name pos:start="38:42" pos:end="38:45">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="38:49" pos:end="38:52"><expr pos:start="38:49" pos:end="38:52"><name pos:start="38:49" pos:end="38:52">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> <if_stmt pos:start="39:7" pos:end="70:19"><else pos:start="39:7" pos:end="70:19">else <block pos:start="39:12" pos:end="70:19">{<block_content pos:start="41:9" pos:end="70:19">
        <comment type="block" pos:start="40:9" pos:end="40:72">/* cast below needed for OpenBSD where tv_sec is still 'long' */</comment>
        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><call pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:19">localtime_r</name><argument_list pos:start="41:20" pos:end="41:52">(<argument pos:start="41:21" pos:end="41:46"><expr pos:start="41:21" pos:end="41:46"><operator pos:start="41:21" pos:end="41:21">(</operator><specifier pos:start="41:22" pos:end="41:26">const</specifier> <name pos:start="41:28" pos:end="41:33">time_t</name> <operator pos:start="41:35" pos:end="41:35">*</operator><operator pos:start="41:36" pos:end="41:36">)</operator><operator pos:start="41:37" pos:end="41:37">&amp;</operator><name pos:start="41:38" pos:end="41:46"><name pos:start="41:38" pos:end="41:39">tv</name><operator pos:start="41:40" pos:end="41:40">.</operator><name pos:start="41:41" pos:end="41:46">tv_sec</name></name></expr></argument>, <argument pos:start="41:49" pos:end="41:51"><expr pos:start="41:49" pos:end="41:51"><operator pos:start="41:49" pos:end="41:49">&amp;</operator><name pos:start="41:50" pos:end="41:51">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:69"><expr pos:start="42:9" pos:end="42:68"><call pos:start="42:9" pos:end="42:68"><name pos:start="42:9" pos:end="42:16">strftime</name><argument_list pos:start="42:17" pos:end="42:68">(<argument pos:start="42:18" pos:end="42:25"><expr pos:start="42:18" pos:end="42:25"><name pos:start="42:18" pos:end="42:25"><name pos:start="42:18" pos:end="42:19">sn</name><operator pos:start="42:20" pos:end="42:21">-&gt;</operator><name pos:start="42:22" pos:end="42:25">name</name></name></expr></argument>, <argument pos:start="42:28" pos:end="42:43"><expr pos:start="42:28" pos:end="42:43"><sizeof pos:start="42:28" pos:end="42:43">sizeof<argument_list pos:start="42:34" pos:end="42:43">(<argument pos:start="42:35" pos:end="42:42"><expr pos:start="42:35" pos:end="42:42"><name pos:start="42:35" pos:end="42:42"><name pos:start="42:35" pos:end="42:36">sn</name><operator pos:start="42:37" pos:end="42:38">-&gt;</operator><name pos:start="42:39" pos:end="42:42">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="42:46" pos:end="42:62"><expr pos:start="42:46" pos:end="42:62"><literal type="string" pos:start="42:46" pos:end="42:62">"vm-%Y%m%d%H%M%S"</literal></expr></argument>, <argument pos:start="42:65" pos:end="42:67"><expr pos:start="42:65" pos:end="42:67"><operator pos:start="42:65" pos:end="42:65">&amp;</operator><name pos:start="42:66" pos:end="42:67">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="43:5" pos:end="43:47">/* Delete old snapshots of the same name */</comment>
    <if_stmt pos:start="44:5" pos:end="70:19"><if pos:start="44:5" pos:end="70:19">if <condition pos:start="44:8" pos:end="44:54">(<expr pos:start="44:9" pos:end="44:53"><name pos:start="44:9" pos:end="44:12">name</name> <operator pos:start="44:14" pos:end="44:15">&amp;&amp;</operator> <call pos:start="44:17" pos:end="44:49"><name pos:start="44:17" pos:end="44:38">del_existing_snapshots</name><argument_list pos:start="44:39" pos:end="44:49">(<argument pos:start="44:40" pos:end="44:42"><expr pos:start="44:40" pos:end="44:42"><name pos:start="44:40" pos:end="44:42">mon</name></expr></argument>, <argument pos:start="44:45" pos:end="44:48"><expr pos:start="44:45" pos:end="44:48"><name pos:start="44:45" pos:end="44:48">name</name></expr></argument>)</argument_list></call> <operator pos:start="44:51" pos:end="44:51">&lt;</operator> <literal type="number" pos:start="44:53" pos:end="44:53">0</literal></expr>)</condition> <block pos:start="44:56" pos:end="70:19">{<block_content pos:start="45:9" pos:end="70:19">
        <goto pos:start="45:9" pos:end="45:21">goto <name pos:start="45:14" pos:end="45:20">the_end</name>;</goto>
    <comment type="block" pos:start="46:5" pos:end="46:27">/* save the VM state */</comment>
    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:5">f</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <call pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:23">qemu_fopen_bdrv</name><argument_list pos:start="47:24" pos:end="47:30">(<argument pos:start="47:25" pos:end="47:26"><expr pos:start="47:25" pos:end="47:26"><name pos:start="47:25" pos:end="47:26">bs</name></expr></argument>, <argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><literal type="number" pos:start="47:29" pos:end="47:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="48:5" pos:end="70:19"><if pos:start="48:5" pos:end="70:19">if <condition pos:start="48:8" pos:end="48:11">(<expr pos:start="48:9" pos:end="48:10"><operator pos:start="48:9" pos:end="48:9">!</operator><name pos:start="48:10" pos:end="48:10">f</name></expr>)</condition> <block pos:start="48:13" pos:end="70:19">{<block_content pos:start="49:9" pos:end="70:19">
        <expr_stmt pos:start="49:9" pos:end="49:62"><expr pos:start="49:9" pos:end="49:61"><call pos:start="49:9" pos:end="49:61"><name pos:start="49:9" pos:end="49:22">monitor_printf</name><argument_list pos:start="49:23" pos:end="49:61">(<argument pos:start="49:24" pos:end="49:26"><expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:26">mon</name></expr></argument>, <argument pos:start="49:29" pos:end="49:60"><expr pos:start="49:29" pos:end="49:60"><literal type="string" pos:start="49:29" pos:end="49:60">"Could not open VM state file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="50:9" pos:end="50:21">goto <name pos:start="50:14" pos:end="50:20">the_end</name>;</goto>
    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:42"><name pos:start="51:11" pos:end="51:27">qemu_savevm_state</name><argument_list pos:start="51:28" pos:end="51:42">(<argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><name pos:start="51:29" pos:end="51:29">f</name></expr></argument>, <argument pos:start="51:32" pos:end="51:41"><expr pos:start="51:32" pos:end="51:41"><operator pos:start="51:32" pos:end="51:32">&amp;</operator><name pos:start="51:33" pos:end="51:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:34"><expr pos:start="52:5" pos:end="52:33"><name pos:start="52:5" pos:end="52:17">vm_state_size</name> <operator pos:start="52:19" pos:end="52:19">=</operator> <call pos:start="52:21" pos:end="52:33"><name pos:start="52:21" pos:end="52:30">qemu_ftell</name><argument_list pos:start="52:31" pos:end="52:33">(<argument pos:start="52:32" pos:end="52:32"><expr pos:start="52:32" pos:end="52:32"><name pos:start="52:32" pos:end="52:32">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:19"><expr pos:start="53:5" pos:end="53:18"><call pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:15">qemu_fclose</name><argument_list pos:start="53:16" pos:end="53:18">(<argument pos:start="53:17" pos:end="53:17"><expr pos:start="53:17" pos:end="53:17"><name pos:start="53:17" pos:end="53:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="54:5" pos:end="70:19"><if pos:start="54:5" pos:end="70:19">if <condition pos:start="54:8" pos:end="54:16">(<expr pos:start="54:9" pos:end="54:15"><name pos:start="54:9" pos:end="54:11">ret</name> <operator pos:start="54:13" pos:end="54:13">&lt;</operator> <literal type="number" pos:start="54:15" pos:end="54:15">0</literal></expr>)</condition> <block pos:start="54:18" pos:end="70:19">{<block_content pos:start="55:9" pos:end="70:19">
        <expr_stmt pos:start="55:9" pos:end="55:65"><expr pos:start="55:9" pos:end="55:64"><call pos:start="55:9" pos:end="55:64"><name pos:start="55:9" pos:end="55:22">monitor_printf</name><argument_list pos:start="55:23" pos:end="55:64">(<argument pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><name pos:start="55:24" pos:end="55:26">mon</name></expr></argument>, <argument pos:start="55:29" pos:end="55:34"><expr pos:start="55:29" pos:end="55:34"><literal type="string" pos:start="55:29" pos:end="55:34">"%s\n"</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:63"><expr pos:start="55:37" pos:end="55:63"><call pos:start="55:37" pos:end="55:63"><name pos:start="55:37" pos:end="55:52">error_get_pretty</name><argument_list pos:start="55:53" pos:end="55:63">(<argument pos:start="55:54" pos:end="55:62"><expr pos:start="55:54" pos:end="55:62"><name pos:start="55:54" pos:end="55:62">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="56:9" pos:end="56:30"><expr pos:start="56:9" pos:end="56:29"><call pos:start="56:9" pos:end="56:29"><name pos:start="56:9" pos:end="56:18">error_free</name><argument_list pos:start="56:19" pos:end="56:29">(<argument pos:start="56:20" pos:end="56:28"><expr pos:start="56:20" pos:end="56:28"><name pos:start="56:20" pos:end="56:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="57:9" pos:end="57:21">goto <name pos:start="57:14" pos:end="57:20">the_end</name>;</goto>
    <comment type="block" pos:start="58:5" pos:end="58:30">/* create the snapshots */</comment>
    <expr_stmt pos:start="59:5" pos:end="59:15"><expr pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:7">bs1</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <name pos:start="59:11" pos:end="59:14">NULL</name></expr>;</expr_stmt>
    <while pos:start="60:5" pos:end="70:19">while <condition pos:start="60:11" pos:end="60:34">(<expr pos:start="60:12" pos:end="60:33"><operator pos:start="60:12" pos:end="60:12">(</operator><name pos:start="60:13" pos:end="60:15">bs1</name> <operator pos:start="60:17" pos:end="60:17">=</operator> <call pos:start="60:19" pos:end="60:32"><name pos:start="60:19" pos:end="60:27">bdrv_next</name><argument_list pos:start="60:28" pos:end="60:32">(<argument pos:start="60:29" pos:end="60:31"><expr pos:start="60:29" pos:end="60:31"><name pos:start="60:29" pos:end="60:31">bs1</name></expr></argument>)</argument_list></call><operator pos:start="60:33" pos:end="60:33">)</operator></expr>)</condition> <block pos:start="60:36" pos:end="70:19">{<block_content pos:start="61:9" pos:end="70:19">
        <if_stmt pos:start="61:9" pos:end="70:19"><if pos:start="61:9" pos:end="70:19">if <condition pos:start="61:12" pos:end="61:35">(<expr pos:start="61:13" pos:end="61:34"><call pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:29">bdrv_can_snapshot</name><argument_list pos:start="61:30" pos:end="61:34">(<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:33">bs1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:37" pos:end="70:19">{<block_content pos:start="63:13" pos:end="70:19">
            <comment type="block" pos:start="62:13" pos:end="62:79">/* Write VM state size only to the image that contains the state */</comment>
            <expr_stmt pos:start="63:13" pos:end="63:64"><expr pos:start="63:13" pos:end="63:63"><name pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:14">sn</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:29">vm_state_size</name></name> <operator pos:start="63:31" pos:end="63:31">=</operator> <operator pos:start="63:33" pos:end="63:33">(</operator><ternary pos:start="63:34" pos:end="63:62"><condition pos:start="63:34" pos:end="63:44"><expr pos:start="63:34" pos:end="63:42"><name pos:start="63:34" pos:end="63:35">bs</name> <operator pos:start="63:37" pos:end="63:38">==</operator> <name pos:start="63:40" pos:end="63:42">bs1</name></expr> ?</condition><then pos:start="63:46" pos:end="63:58"> <expr pos:start="63:46" pos:end="63:58"><name pos:start="63:46" pos:end="63:58">vm_state_size</name></expr> </then><else pos:start="63:60" pos:end="63:62">: <expr pos:start="63:62" pos:end="63:62"><literal type="number" pos:start="63:62" pos:end="63:62">0</literal></expr></else></ternary><operator pos:start="63:63" pos:end="63:63">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:48"><expr pos:start="64:13" pos:end="64:47"><name pos:start="64:13" pos:end="64:15">ret</name> <operator pos:start="64:17" pos:end="64:17">=</operator> <call pos:start="64:19" pos:end="64:47"><name pos:start="64:19" pos:end="64:38">bdrv_snapshot_create</name><argument_list pos:start="64:39" pos:end="64:47">(<argument pos:start="64:40" pos:end="64:42"><expr pos:start="64:40" pos:end="64:42"><name pos:start="64:40" pos:end="64:42">bs1</name></expr></argument>, <argument pos:start="64:45" pos:end="64:46"><expr pos:start="64:45" pos:end="64:46"><name pos:start="64:45" pos:end="64:46">sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="65:13" pos:end="70:19"><if pos:start="65:13" pos:end="70:19">if <condition pos:start="65:16" pos:end="65:24">(<expr pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:21">&lt;</operator> <literal type="number" pos:start="65:23" pos:end="65:23">0</literal></expr>)</condition> <block pos:start="65:26" pos:end="70:19">{<block_content pos:start="66:17" pos:end="70:19">
                <expr_stmt pos:start="66:17" pos:end="67:58"><expr pos:start="66:17" pos:end="67:57"><call pos:start="66:17" pos:end="67:57"><name pos:start="66:17" pos:end="66:30">monitor_printf</name><argument_list pos:start="66:31" pos:end="67:57">(<argument pos:start="66:32" pos:end="66:34"><expr pos:start="66:32" pos:end="66:34"><name pos:start="66:32" pos:end="66:34">mon</name></expr></argument>, <argument pos:start="66:37" pos:end="66:77"><expr pos:start="66:37" pos:end="66:77"><literal type="string" pos:start="66:37" pos:end="66:77">"Error while creating snapshot on '%s'\n"</literal></expr></argument>,
                               <argument pos:start="67:32" pos:end="67:56"><expr pos:start="67:32" pos:end="67:56"><call pos:start="67:32" pos:end="67:56"><name pos:start="67:32" pos:end="67:51">bdrv_get_device_name</name><argument_list pos:start="67:52" pos:end="67:56">(<argument pos:start="67:53" pos:end="67:55"><expr pos:start="67:53" pos:end="67:55"><name pos:start="67:53" pos:end="67:55">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <label pos:start="68:2" pos:end="68:9"><name pos:start="68:2" pos:end="68:8">the_end</name>:</label>
    <if_stmt pos:start="69:5" pos:end="70:19"><if pos:start="69:5" pos:end="70:19">if <condition pos:start="69:8" pos:end="69:25">(<expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:24">saved_vm_running</name></expr>)</condition> <block pos:start="69:27" pos:end="70:19">{<block_content pos:start="70:9" pos:end="70:19">
        <expr_stmt pos:start="70:9" pos:end="70:19"><expr pos:start="70:9" pos:end="70:18"><call pos:start="70:9" pos:end="70:18"><name pos:start="70:9" pos:end="70:16">vm_start</name><argument_list pos:start="70:17" pos:end="70:18">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function></unit>
