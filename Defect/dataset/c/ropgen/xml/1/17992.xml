<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17992.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">udp_socket_create</name><parameter_list pos:start="1:29" pos:end="3:72">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">UDPContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:73"><decl pos:start="1:45" pos:end="1:73"><type pos:start="1:45" pos:end="1:73"><name pos:start="1:45" pos:end="1:67"><name pos:start="1:45" pos:end="1:50">struct</name> <name pos:start="1:52" pos:end="1:67">sockaddr_storage</name></name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:48"><decl pos:start="3:30" pos:end="3:48"><type pos:start="3:30" pos:end="3:48"><name pos:start="3:30" pos:end="3:38">socklen_t</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:48">addr_len</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:71"><decl pos:start="3:51" pos:end="3:71"><type pos:start="3:51" pos:end="3:71"><specifier pos:start="3:51" pos:end="3:55">const</specifier> <name pos:start="3:57" pos:end="3:60">char</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:71">localaddr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:14">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">udp_fd</name> <init pos:start="7:16" pos:end="7:19">= <expr pos:start="7:18" pos:end="7:19"><operator pos:start="7:18" pos:end="7:18">-</operator><literal type="number" pos:start="7:19" pos:end="7:19">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:19">addrinfo</name></name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:25">res0</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><name pos:start="9:29" pos:end="9:32">NULL</name></expr></init></decl>, <decl pos:start="9:35" pos:end="9:45"><type ref="prev" pos:start="9:5" pos:end="9:21"><modifier pos:start="9:35" pos:end="9:35">*</modifier></type><name pos:start="9:36" pos:end="9:38">res</name> <init pos:start="9:40" pos:end="9:45">= <expr pos:start="9:42" pos:end="9:45"><name pos:start="9:42" pos:end="9:45">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">family</name> <init pos:start="11:16" pos:end="11:26">= <expr pos:start="11:18" pos:end="11:26"><name pos:start="11:18" pos:end="11:26">AF_UNSPEC</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:64"><if pos:start="15:5" pos:end="17:64">if <condition pos:start="15:8" pos:end="15:55">(<expr pos:start="15:9" pos:end="15:54"><operator pos:start="15:9" pos:end="15:9">(</operator><operator pos:start="15:10" pos:end="15:10">(</operator>struct <name pos:start="15:18" pos:end="15:25">sockaddr</name> <operator pos:start="15:27" pos:end="15:27">*</operator><operator pos:start="15:28" pos:end="15:28">)</operator> <operator pos:start="15:30" pos:end="15:30">&amp;</operator><name pos:start="15:31" pos:end="15:42"><name pos:start="15:31" pos:end="15:31">s</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:42">dest_addr</name></name><operator pos:start="15:43" pos:end="15:43">)</operator><operator pos:start="15:44" pos:end="15:45">-&gt;</operator><name pos:start="15:46" pos:end="15:54">sa_family</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:64"><block_content pos:start="17:9" pos:end="17:64">

        <expr_stmt pos:start="17:9" pos:end="17:64"><expr pos:start="17:9" pos:end="17:63"><name pos:start="17:9" pos:end="17:14">family</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <operator pos:start="17:18" pos:end="17:18">(</operator><operator pos:start="17:19" pos:end="17:19">(</operator>struct <name pos:start="17:27" pos:end="17:34">sockaddr</name> <operator pos:start="17:36" pos:end="17:36">*</operator><operator pos:start="17:37" pos:end="17:37">)</operator> <operator pos:start="17:39" pos:end="17:39">&amp;</operator><name pos:start="17:40" pos:end="17:51"><name pos:start="17:40" pos:end="17:40">s</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:51">dest_addr</name></name><operator pos:start="17:52" pos:end="17:52">)</operator><operator pos:start="17:53" pos:end="17:54">-&gt;</operator><name pos:start="17:55" pos:end="17:63">sa_family</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:60"><expr pos:start="19:5" pos:end="21:59"><name pos:start="19:5" pos:end="19:8">res0</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="21:59"><name pos:start="19:12" pos:end="19:27">udp_resolve_host</name><argument_list pos:start="19:28" pos:end="21:59">(<argument pos:start="19:29" pos:end="19:59"><expr pos:start="19:29" pos:end="19:59"><ternary pos:start="19:29" pos:end="19:59"><condition pos:start="19:29" pos:end="19:42"><expr pos:start="19:29" pos:end="19:40"><name pos:start="19:29" pos:end="19:40"><name pos:start="19:29" pos:end="19:37">localaddr</name><index pos:start="19:38" pos:end="19:40">[<expr pos:start="19:39" pos:end="19:39"><literal type="number" pos:start="19:39" pos:end="19:39">0</literal></expr>]</index></name></expr> ?</condition><then pos:start="19:44" pos:end="19:52"> <expr pos:start="19:44" pos:end="19:52"><name pos:start="19:44" pos:end="19:52">localaddr</name></expr> </then><else pos:start="19:54" pos:end="19:59">: <expr pos:start="19:56" pos:end="19:59"><name pos:start="19:56" pos:end="19:59">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="19:62" pos:end="19:74"><expr pos:start="19:62" pos:end="19:74"><name pos:start="19:62" pos:end="19:74"><name pos:start="19:62" pos:end="19:62">s</name><operator pos:start="19:63" pos:end="19:64">-&gt;</operator><name pos:start="19:65" pos:end="19:74">local_port</name></name></expr></argument>,

                            <argument pos:start="21:29" pos:end="21:38"><expr pos:start="21:29" pos:end="21:38"><name pos:start="21:29" pos:end="21:38">SOCK_DGRAM</name></expr></argument>, <argument pos:start="21:41" pos:end="21:46"><expr pos:start="21:41" pos:end="21:46"><name pos:start="21:41" pos:end="21:46">family</name></expr></argument>, <argument pos:start="21:49" pos:end="21:58"><expr pos:start="21:49" pos:end="21:58"><name pos:start="21:49" pos:end="21:58">AI_PASSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:12">res0</name> <operator pos:start="23:14" pos:end="23:15">==</operator> <literal type="number" pos:start="23:17" pos:end="23:17">0</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <goto pos:start="25:9" pos:end="25:18">goto <name pos:start="25:14" pos:end="25:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="27:5" pos:end="35:5">for <control pos:start="27:9" pos:end="27:43">(<init pos:start="27:10" pos:end="27:20"><expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:12">res</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:19">res0</name></expr>;</init> <condition pos:start="27:22" pos:end="27:25"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">res</name></expr>;</condition> <incr pos:start="27:27" pos:end="27:42"><expr pos:start="27:27" pos:end="27:42"><name pos:start="27:27" pos:end="27:29">res</name><operator pos:start="27:30" pos:end="27:30">=</operator><name pos:start="27:31" pos:end="27:42"><name pos:start="27:31" pos:end="27:33">res</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:42">ai_next</name></name></expr></incr>)</control> <block pos:start="27:45" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:52">

        <expr_stmt pos:start="29:9" pos:end="29:58"><expr pos:start="29:9" pos:end="29:57"><name pos:start="29:9" pos:end="29:14">udp_fd</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:57"><name pos:start="29:18" pos:end="29:26">ff_socket</name><argument_list pos:start="29:27" pos:end="29:57">(<argument pos:start="29:28" pos:end="29:41"><expr pos:start="29:28" pos:end="29:41"><name pos:start="29:28" pos:end="29:41"><name pos:start="29:28" pos:end="29:30">res</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:41">ai_family</name></name></expr></argument>, <argument pos:start="29:44" pos:end="29:53"><expr pos:start="29:44" pos:end="29:53"><name pos:start="29:44" pos:end="29:53">SOCK_DGRAM</name></expr></argument>, <argument pos:start="29:56" pos:end="29:56"><expr pos:start="29:56" pos:end="29:56"><literal type="number" pos:start="29:56" pos:end="29:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="31:32"><if pos:start="31:9" pos:end="31:32">if <condition pos:start="31:12" pos:end="31:25">(<expr pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:18">udp_fd</name> <operator pos:start="31:20" pos:end="31:21">!=</operator> <operator pos:start="31:23" pos:end="31:23">-</operator><literal type="number" pos:start="31:24" pos:end="31:24">1</literal></expr>)</condition><block type="pseudo" pos:start="31:27" pos:end="31:32"><block_content pos:start="31:27" pos:end="31:32"> <break pos:start="31:27" pos:end="31:32">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><call pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:21">log_net_error</name><argument_list pos:start="33:22" pos:end="33:51">(<argument pos:start="33:23" pos:end="33:26"><expr pos:start="33:23" pos:end="33:26"><name pos:start="33:23" pos:end="33:26">NULL</name></expr></argument>, <argument pos:start="33:29" pos:end="33:40"><expr pos:start="33:29" pos:end="33:40"><name pos:start="33:29" pos:end="33:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:43" pos:end="33:50"><expr pos:start="33:43" pos:end="33:50"><literal type="string" pos:start="33:43" pos:end="33:50">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="39:5" pos:end="41:18"><if pos:start="39:5" pos:end="41:18">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:14">udp_fd</name> <operator pos:start="39:16" pos:end="39:16">&lt;</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:18"><block_content pos:start="41:9" pos:end="41:18">

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:48"><expr pos:start="45:5" pos:end="45:47"><call pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:10">memcpy</name><argument_list pos:start="45:11" pos:end="45:47">(<argument pos:start="45:12" pos:end="45:15"><expr pos:start="45:12" pos:end="45:15"><name pos:start="45:12" pos:end="45:15">addr</name></expr></argument>, <argument pos:start="45:18" pos:end="45:29"><expr pos:start="45:18" pos:end="45:29"><name pos:start="45:18" pos:end="45:29"><name pos:start="45:18" pos:end="45:20">res</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:29">ai_addr</name></name></expr></argument>, <argument pos:start="45:32" pos:end="45:46"><expr pos:start="45:32" pos:end="45:46"><name pos:start="45:32" pos:end="45:46"><name pos:start="45:32" pos:end="45:34">res</name><operator pos:start="45:35" pos:end="45:36">-&gt;</operator><name pos:start="45:37" pos:end="45:46">ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><operator pos:start="47:5" pos:end="47:5">*</operator><name pos:start="47:6" pos:end="47:13">addr_len</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:19">res</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:31">ai_addrlen</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:23"><expr pos:start="51:5" pos:end="51:22"><call pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:16">freeaddrinfo</name><argument_list pos:start="51:17" pos:end="51:22">(<argument pos:start="51:18" pos:end="51:21"><expr pos:start="51:18" pos:end="51:21"><name pos:start="51:18" pos:end="51:21">res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="55:5" pos:end="55:18">return <expr pos:start="55:12" pos:end="55:17"><name pos:start="55:12" pos:end="55:17">udp_fd</name></expr>;</return>



 <label pos:start="59:2" pos:end="59:6"><name pos:start="59:2" pos:end="59:5">fail</name>:</label>

    <if_stmt pos:start="61:5" pos:end="63:28"><if pos:start="61:5" pos:end="63:28">if <condition pos:start="61:8" pos:end="61:20">(<expr pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:14">udp_fd</name> <operator pos:start="61:16" pos:end="61:17">&gt;=</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:28"><block_content pos:start="63:9" pos:end="63:28">

        <expr_stmt pos:start="63:9" pos:end="63:28"><expr pos:start="63:9" pos:end="63:27"><call pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:19">closesocket</name><argument_list pos:start="63:20" pos:end="63:27">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">udp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="67:27"><if pos:start="65:5" pos:end="67:27">if<condition pos:start="65:7" pos:end="65:12">(<expr pos:start="65:8" pos:end="65:11"><name pos:start="65:8" pos:end="65:11">res0</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:27"><block_content pos:start="67:9" pos:end="67:27">

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><call pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:20">freeaddrinfo</name><argument_list pos:start="67:21" pos:end="67:26">(<argument pos:start="67:22" pos:end="67:25"><expr pos:start="67:22" pos:end="67:25"><name pos:start="67:22" pos:end="67:25">res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="69:5" pos:end="69:14">return <expr pos:start="69:12" pos:end="69:13"><operator pos:start="69:12" pos:end="69:12">-</operator><literal type="number" pos:start="69:13" pos:end="69:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
