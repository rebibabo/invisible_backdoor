<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5599.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">query_facilities</name><parameter_list pos:start="1:29" pos:end="1:34">(<parameter pos:start="1:30" pos:end="1:33"><decl pos:start="1:30" pos:end="1:33"><type pos:start="1:30" pos:end="1:33"><name pos:start="1:30" pos:end="1:33">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:20">sigaction</name></name></type> <name pos:start="5:22" pos:end="5:27">sa_old</name></decl>, <decl pos:start="5:30" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:20"/><name pos:start="5:30" pos:end="5:35">sa_new</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:12">register</specifier> <name pos:start="7:14" pos:end="7:16">int</name> <name pos:start="7:18" pos:end="7:19">r0</name></type> <name pos:start="7:21" pos:end="7:27">__asm__</name><argument_list pos:start="7:28" pos:end="7:32">(<argument pos:start="7:29" pos:end="7:31"><expr pos:start="7:29" pos:end="7:31"><literal type="string" pos:start="7:29" pos:end="7:31">"0"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:12">register</specifier> <name pos:start="9:14" pos:end="9:17">void</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier><name pos:start="9:20" pos:end="9:21">r1</name></type> <name pos:start="9:23" pos:end="9:29">__asm__</name><argument_list pos:start="9:30" pos:end="9:34">(<argument pos:start="9:31" pos:end="9:33"><expr pos:start="9:31" pos:end="9:33"><literal type="string" pos:start="9:31" pos:end="9:33">"1"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">fail</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><call pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:10">memset</name><argument_list pos:start="15:11" pos:end="15:38">(<argument pos:start="15:12" pos:end="15:18"><expr pos:start="15:12" pos:end="15:18"><operator pos:start="15:12" pos:end="15:12">&amp;</operator><name pos:start="15:13" pos:end="15:18">sa_new</name></expr></argument>, <argument pos:start="15:21" pos:end="15:21"><expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></argument>, <argument pos:start="15:24" pos:end="15:37"><expr pos:start="15:24" pos:end="15:37"><sizeof pos:start="15:24" pos:end="15:37">sizeof<argument_list pos:start="15:30" pos:end="15:37">(<argument pos:start="15:31" pos:end="15:36"><expr pos:start="15:31" pos:end="15:36"><name pos:start="15:31" pos:end="15:36">sa_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:10">sa_new</name><operator pos:start="17:11" pos:end="17:11">.</operator><name pos:start="17:12" pos:end="17:21">sa_handler</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <name pos:start="17:25" pos:end="17:38">sigill_handler</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><call pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:13">sigaction</name><argument_list pos:start="19:14" pos:end="19:39">(<argument pos:start="19:15" pos:end="19:20"><expr pos:start="19:15" pos:end="19:20"><name pos:start="19:15" pos:end="19:20">SIGILL</name></expr></argument>, <argument pos:start="19:23" pos:end="19:29"><expr pos:start="19:23" pos:end="19:29"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:29">sa_new</name></expr></argument>, <argument pos:start="19:32" pos:end="19:38"><expr pos:start="19:32" pos:end="19:38"><operator pos:start="19:32" pos:end="19:32">&amp;</operator><name pos:start="19:33" pos:end="19:38">sa_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="29:68">/* First, try STORE FACILITY LIST EXTENDED.  If this is present, then

       we need not do any more probing.  Unfortunately, this itself is an

       extension and the original STORE FACILITY LIST instruction is

       kernel-only, storing its results at absolute address 200.  */</comment>

    <comment type="block" pos:start="31:5" pos:end="31:22">/* stfle 0(%r1) */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:6">r1</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <operator pos:start="33:10" pos:end="33:10">&amp;</operator><name pos:start="33:11" pos:end="33:20">facilities</name></expr>;</expr_stmt>

    <asm pos:start="35:5" pos:end="37:64">asm <specifier pos:start="35:9" pos:end="35:16">volatile</specifier>(".word 0xb2b0,0x1000"

                 : "=r"(r0) : "0"(0), "r"(r1) : "memory", "cc");</asm>



    <if_stmt pos:start="41:5" pos:end="121:5"><if pos:start="41:5" pos:end="121:5">if <condition pos:start="41:8" pos:end="41:19">(<expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:18">got_sigill</name></expr>)</condition> <block pos:start="41:21" pos:end="121:5">{<block_content pos:start="57:9" pos:end="119:9">

        <comment type="block" pos:start="43:9" pos:end="45:60">/* STORE FACILITY EXTENDED is not available.  Probe for one of each

           kind of instruction that we're interested in.  */</comment>

        <comment type="block" pos:start="47:9" pos:end="51:72">/* ??? Possibly some of these are in practice never present unless

           the store-facility-extended facility is also present.  But since

           that isn't documented it's just better to probe for each.  */</comment>



        <comment type="block" pos:start="55:9" pos:end="55:70">/* Test for z/Architecture.  Required even in 31-bit mode.  */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:18">got_sigill</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="59:25">/* agr %r0,%r0 */</comment>

        <asm pos:start="61:9" pos:end="61:64">asm <specifier pos:start="61:13" pos:end="61:20">volatile</specifier>(".word 0xb908,0x0000" : "=r"(r0) : : "cc");</asm>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:24">(<expr pos:start="63:13" pos:end="63:23"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:23">got_sigill</name></expr>)</condition> <block pos:start="63:26" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:48">

            <expr_stmt pos:start="65:13" pos:end="65:48"><expr pos:start="65:13" pos:end="65:47"><name pos:start="65:13" pos:end="65:22">facilities</name> <operator pos:start="65:24" pos:end="65:25">|=</operator> <name pos:start="65:27" pos:end="65:47">FACILITY_ZARCH_ACTIVE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="71:9" pos:end="71:42">/* Test for long displacement.  */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:18">got_sigill</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="75:9" pos:end="75:27">/* ly %r0,0(%r1) */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:25"><expr pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:10">r1</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <operator pos:start="77:14" pos:end="77:14">&amp;</operator><name pos:start="77:15" pos:end="77:24">facilities</name></expr>;</expr_stmt>

        <asm pos:start="79:9" pos:end="81:50">asm <specifier pos:start="79:13" pos:end="79:20">volatile</specifier>(".word 0xe300,0x1000,0x0058"

                     : "=r"(r0) : "r"(r1) : "cc");</asm>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:24">(<expr pos:start="83:13" pos:end="83:23"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:23">got_sigill</name></expr>)</condition> <block pos:start="83:26" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:45">

            <expr_stmt pos:start="85:13" pos:end="85:45"><expr pos:start="85:13" pos:end="85:44"><name pos:start="85:13" pos:end="85:22">facilities</name> <operator pos:start="85:24" pos:end="85:25">|=</operator> <name pos:start="85:27" pos:end="85:44">FACILITY_LONG_DISP</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="91:9" pos:end="91:44">/* Test for extended immediates.  */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:23"><expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:18">got_sigill</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="95:9" pos:end="95:23">/* afi %r0,0 */</comment>

        <asm pos:start="97:9" pos:end="97:62">asm <specifier pos:start="97:13" pos:end="97:20">volatile</specifier>(".word 0xc209,0x0000,0x0000" : : : "cc");</asm>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:24">(<expr pos:start="99:13" pos:end="99:23"><operator pos:start="99:13" pos:end="99:13">!</operator><name pos:start="99:14" pos:end="99:23">got_sigill</name></expr>)</condition> <block pos:start="99:26" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:43">

            <expr_stmt pos:start="101:13" pos:end="101:43"><expr pos:start="101:13" pos:end="101:42"><name pos:start="101:13" pos:end="101:22">facilities</name> <operator pos:start="101:24" pos:end="101:25">|=</operator> <name pos:start="101:27" pos:end="101:42">FACILITY_EXT_IMM</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="107:9" pos:end="107:55">/* Test for general-instructions-extension.  */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:23"><expr pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:18">got_sigill</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="111:9" pos:end="111:24">/* msfi %r0,1 */</comment>

        <asm pos:start="113:9" pos:end="113:51">asm <specifier pos:start="113:13" pos:end="113:20">volatile</specifier>(".word 0xc201,0x0000,0x0001");</asm>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:24">(<expr pos:start="115:13" pos:end="115:23"><operator pos:start="115:13" pos:end="115:13">!</operator><name pos:start="115:14" pos:end="115:23">got_sigill</name></expr>)</condition> <block pos:start="115:26" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:48">

            <expr_stmt pos:start="117:13" pos:end="117:48"><expr pos:start="117:13" pos:end="117:47"><name pos:start="117:13" pos:end="117:22">facilities</name> <operator pos:start="117:24" pos:end="117:25">|=</operator> <name pos:start="117:27" pos:end="117:47">FACILITY_GEN_INST_EXT</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:37"><expr pos:start="125:5" pos:end="125:36"><call pos:start="125:5" pos:end="125:36"><name pos:start="125:5" pos:end="125:13">sigaction</name><argument_list pos:start="125:14" pos:end="125:36">(<argument pos:start="125:15" pos:end="125:20"><expr pos:start="125:15" pos:end="125:20"><name pos:start="125:15" pos:end="125:20">SIGILL</name></expr></argument>, <argument pos:start="125:23" pos:end="125:29"><expr pos:start="125:23" pos:end="125:29"><operator pos:start="125:23" pos:end="125:23">&amp;</operator><name pos:start="125:24" pos:end="125:29">sa_old</name></expr></argument>, <argument pos:start="125:32" pos:end="125:35"><expr pos:start="125:32" pos:end="125:35"><name pos:start="125:32" pos:end="125:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="133:65">/* The translator currently uses these extensions unconditionally.

       Pruning this back to the base ESA/390 architecture doesn't seem

       worthwhile, since even the KVM target requires z/Arch.  */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:13"><expr pos:start="135:5" pos:end="135:12"><name pos:start="135:5" pos:end="135:8">fail</name> <operator pos:start="135:10" pos:end="135:10">=</operator> <literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if <condition pos:start="137:8" pos:end="137:50">(<expr pos:start="137:9" pos:end="137:49"><operator pos:start="137:9" pos:end="137:9">(</operator><name pos:start="137:10" pos:end="137:19">facilities</name> <operator pos:start="137:21" pos:end="137:21">&amp;</operator> <name pos:start="137:23" pos:end="137:43">FACILITY_ZARCH_ACTIVE</name><operator pos:start="137:44" pos:end="137:44">)</operator> <operator pos:start="137:46" pos:end="137:47">==</operator> <literal type="number" pos:start="137:49" pos:end="137:49">0</literal></expr>)</condition> <block pos:start="137:52" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:17">

        <expr_stmt pos:start="139:9" pos:end="139:63"><expr pos:start="139:9" pos:end="139:62"><call pos:start="139:9" pos:end="139:62"><name pos:start="139:9" pos:end="139:15">fprintf</name><argument_list pos:start="139:16" pos:end="139:62">(<argument pos:start="139:17" pos:end="139:22"><expr pos:start="139:17" pos:end="139:22"><name pos:start="139:17" pos:end="139:22">stderr</name></expr></argument>, <argument pos:start="139:25" pos:end="139:61"><expr pos:start="139:25" pos:end="139:61"><literal type="string" pos:start="139:25" pos:end="139:61">"TCG: z/Arch facility is required.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:69"><expr pos:start="141:9" pos:end="141:68"><call pos:start="141:9" pos:end="141:68"><name pos:start="141:9" pos:end="141:15">fprintf</name><argument_list pos:start="141:16" pos:end="141:68">(<argument pos:start="141:17" pos:end="141:22"><expr pos:start="141:17" pos:end="141:22"><name pos:start="141:17" pos:end="141:22">stderr</name></expr></argument>, <argument pos:start="141:25" pos:end="141:67"><expr pos:start="141:25" pos:end="141:67"><literal type="string" pos:start="141:25" pos:end="141:67">"TCG: Boot with a 64-bit enabled kernel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:17"><expr pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:12">fail</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <literal type="number" pos:start="143:16" pos:end="143:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:47">(<expr pos:start="147:9" pos:end="147:46"><operator pos:start="147:9" pos:end="147:9">(</operator><name pos:start="147:10" pos:end="147:19">facilities</name> <operator pos:start="147:21" pos:end="147:21">&amp;</operator> <name pos:start="147:23" pos:end="147:40">FACILITY_LONG_DISP</name><operator pos:start="147:41" pos:end="147:41">)</operator> <operator pos:start="147:43" pos:end="147:44">==</operator> <literal type="number" pos:start="147:46" pos:end="147:46">0</literal></expr>)</condition> <block pos:start="147:49" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:17">

        <expr_stmt pos:start="149:9" pos:end="149:74"><expr pos:start="149:9" pos:end="149:73"><call pos:start="149:9" pos:end="149:73"><name pos:start="149:9" pos:end="149:15">fprintf</name><argument_list pos:start="149:16" pos:end="149:73">(<argument pos:start="149:17" pos:end="149:22"><expr pos:start="149:17" pos:end="149:22"><name pos:start="149:17" pos:end="149:22">stderr</name></expr></argument>, <argument pos:start="149:25" pos:end="149:72"><expr pos:start="149:25" pos:end="149:72"><literal type="string" pos:start="149:25" pos:end="149:72">"TCG: long-displacement facility is required.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:17"><expr pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:12">fail</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <literal type="number" pos:start="151:16" pos:end="151:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="159:70">/* So far there's just enough support for 31-bit mode to let the

       compile succeed.  This is good enough to run QEMU with KVM.  */</comment>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:28">(<expr pos:start="161:9" pos:end="161:27"><sizeof pos:start="161:9" pos:end="161:22">sizeof<argument_list pos:start="161:15" pos:end="161:22">(<argument pos:start="161:16" pos:end="161:21"><expr pos:start="161:16" pos:end="161:21"><name pos:start="161:16" pos:end="161:19">void</name> <operator pos:start="161:21" pos:end="161:21">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="161:24" pos:end="161:25">!=</operator> <literal type="number" pos:start="161:27" pos:end="161:27">8</literal></expr>)</condition> <block pos:start="161:30" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:17">

        <expr_stmt pos:start="163:9" pos:end="163:64"><expr pos:start="163:9" pos:end="163:63"><call pos:start="163:9" pos:end="163:63"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="163:63">(<argument pos:start="163:17" pos:end="163:22"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:22">stderr</name></expr></argument>, <argument pos:start="163:25" pos:end="163:62"><expr pos:start="163:25" pos:end="163:62"><literal type="string" pos:start="163:25" pos:end="163:62">"TCG: 31-bit mode is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:17"><expr pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:12">fail</name> <operator pos:start="165:14" pos:end="165:14">=</operator> <literal type="number" pos:start="165:16" pos:end="165:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="171:5" pos:end="175:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:13">(<expr pos:start="171:9" pos:end="171:12"><name pos:start="171:9" pos:end="171:12">fail</name></expr>)</condition> <block pos:start="171:15" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:17">

        <expr_stmt pos:start="173:9" pos:end="173:17"><expr pos:start="173:9" pos:end="173:16"><call pos:start="173:9" pos:end="173:16"><name pos:start="173:9" pos:end="173:12">exit</name><argument_list pos:start="173:13" pos:end="173:16">(<argument pos:start="173:14" pos:end="173:15"><expr pos:start="173:14" pos:end="173:15"><operator pos:start="173:14" pos:end="173:14">-</operator><literal type="number" pos:start="173:15" pos:end="173:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
