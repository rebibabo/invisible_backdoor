<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19903.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_st</name><parameter_list pos:start="1:28" pos:end="1:74">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:55">TCGArg</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">args</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:73"><decl pos:start="1:64" pos:end="1:73"><type pos:start="1:64" pos:end="1:73"><name pos:start="1:64" pos:end="1:67">bool</name></type> <name pos:start="1:69" pos:end="1:73">is_64</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="130:0">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">TCGReg</name></type> <name pos:start="5:12" pos:end="5:17">datalo</name></decl>, <decl pos:start="5:20" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:20" pos:end="5:25">datahi</name></decl>, <decl pos:start="5:28" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:28" pos:end="5:33">addrlo</name></decl>, <decl pos:start="5:36" pos:end="5:40"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:36" pos:end="5:40">rbase</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">TCGReg</name> <name pos:start="7:12" pos:end="7:17">addrhi</name></type> <name pos:start="7:19" pos:end="7:31">__attribute__</name><argument_list pos:start="7:32" pos:end="7:41">(<argument pos:start="7:33" pos:end="7:40"><expr pos:start="7:33" pos:end="7:40"><operator pos:start="7:33" pos:end="7:33">(</operator><name pos:start="7:34" pos:end="7:39">unused</name><operator pos:start="7:40" pos:end="7:40">)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">TCGMemOpIdx</name></type> <name pos:start="9:17" pos:end="9:18">oi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGMemOp</name></type> <name pos:start="11:14" pos:end="11:16">opc</name></decl>, <decl pos:start="11:19" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:19" pos:end="11:24">s_bits</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="13:1" pos:end="13:21">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">mem_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">tcg_insn_unit</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:28">label_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:10">datalo</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <operator pos:start="23:14" pos:end="23:14">*</operator><name pos:start="23:15" pos:end="23:18">args</name><operator pos:start="23:19" pos:end="23:20">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:64"><expr pos:start="25:5" pos:end="25:63"><name pos:start="25:5" pos:end="25:10">datahi</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <operator pos:start="25:14" pos:end="25:14">(</operator><ternary pos:start="25:15" pos:end="25:62"><condition pos:start="25:15" pos:end="25:50"><expr pos:start="25:15" pos:end="25:48"><name pos:start="25:15" pos:end="25:33">TCG_TARGET_REG_BITS</name> <operator pos:start="25:35" pos:end="25:36">==</operator> <literal type="number" pos:start="25:38" pos:end="25:39">32</literal> <operator pos:start="25:41" pos:end="25:42">&amp;&amp;</operator> <name pos:start="25:44" pos:end="25:48">is_64</name></expr> ?</condition><then pos:start="25:52" pos:end="25:58"> <expr pos:start="25:52" pos:end="25:58"><operator pos:start="25:52" pos:end="25:52">*</operator><name pos:start="25:53" pos:end="25:56">args</name><operator pos:start="25:57" pos:end="25:58">++</operator></expr> </then><else pos:start="25:60" pos:end="25:62">: <expr pos:start="25:62" pos:end="25:62"><literal type="number" pos:start="25:62" pos:end="25:62">0</literal></expr></else></ternary><operator pos:start="25:63" pos:end="25:63">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:10">addrlo</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <operator pos:start="27:14" pos:end="27:14">*</operator><name pos:start="27:15" pos:end="27:18">args</name><operator pos:start="27:19" pos:end="27:20">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:68"><expr pos:start="29:5" pos:end="29:67"><name pos:start="29:5" pos:end="29:10">addrhi</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <operator pos:start="29:14" pos:end="29:14">(</operator><ternary pos:start="29:15" pos:end="29:66"><condition pos:start="29:15" pos:end="29:54"><expr pos:start="29:15" pos:end="29:52"><name pos:start="29:15" pos:end="29:33">TCG_TARGET_REG_BITS</name> <operator pos:start="29:35" pos:end="29:35">&lt;</operator> <name pos:start="29:37" pos:end="29:52">TARGET_LONG_BITS</name></expr> ?</condition><then pos:start="29:56" pos:end="29:62"> <expr pos:start="29:56" pos:end="29:62"><operator pos:start="29:56" pos:end="29:56">*</operator><name pos:start="29:57" pos:end="29:60">args</name><operator pos:start="29:61" pos:end="29:62">++</operator></expr> </then><else pos:start="29:64" pos:end="29:66">: <expr pos:start="29:66" pos:end="29:66"><literal type="number" pos:start="29:66" pos:end="29:66">0</literal></expr></else></ternary><operator pos:start="29:67" pos:end="29:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:6">oi</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <operator pos:start="31:10" pos:end="31:10">*</operator><name pos:start="31:11" pos:end="31:14">args</name><operator pos:start="31:15" pos:end="31:16">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:7">opc</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:23"><name pos:start="33:11" pos:end="33:19">get_memop</name><argument_list pos:start="33:20" pos:end="33:23">(<argument pos:start="33:21" pos:end="33:22"><expr pos:start="33:21" pos:end="33:22"><name pos:start="33:21" pos:end="33:22">oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="40:0"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:10">s_bits</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:16">opc</name> <operator pos:start="35:18" pos:end="35:18">&amp;</operator> <name pos:start="35:20" pos:end="35:26">MO_SIZE</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="39:1" pos:end="39:21">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:13">mem_index</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:26">get_mmuidx</name><argument_list pos:start="41:27" pos:end="41:30">(<argument pos:start="41:28" pos:end="41:29"><expr pos:start="41:28" pos:end="41:29"><name pos:start="41:28" pos:end="41:29">oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:75"><expr pos:start="43:5" pos:end="43:74"><name pos:start="43:5" pos:end="43:10">addrlo</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:74"><name pos:start="43:14" pos:end="43:29">tcg_out_tlb_read</name><argument_list pos:start="43:30" pos:end="43:74">(<argument pos:start="43:31" pos:end="43:31"><expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">s</name></expr></argument>, <argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><name pos:start="43:34" pos:end="43:39">s_bits</name></expr></argument>, <argument pos:start="43:42" pos:end="43:47"><expr pos:start="43:42" pos:end="43:47"><name pos:start="43:42" pos:end="43:47">addrlo</name></expr></argument>, <argument pos:start="43:50" pos:end="43:55"><expr pos:start="43:50" pos:end="43:55"><name pos:start="43:50" pos:end="43:55">addrhi</name></expr></argument>, <argument pos:start="43:58" pos:end="43:66"><expr pos:start="43:58" pos:end="43:66"><name pos:start="43:58" pos:end="43:66">mem_index</name></expr></argument>, <argument pos:start="43:69" pos:end="43:73"><expr pos:start="43:69" pos:end="43:73"><name pos:start="43:69" pos:end="43:73">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:75">/* Load a pointer into the current opcode w/conditional branch-link. */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:13">label_ptr</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:27"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:27">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:65"><expr pos:start="51:5" pos:end="51:64"><call pos:start="51:5" pos:end="51:64"><name pos:start="51:5" pos:end="51:21">tcg_out_bc_noaddr</name><argument_list pos:start="51:22" pos:end="51:64">(<argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><name pos:start="51:23" pos:end="51:23">s</name></expr></argument>, <argument pos:start="51:26" pos:end="51:63"><expr pos:start="51:26" pos:end="51:63"><name pos:start="51:26" pos:end="51:27">BC</name> <operator pos:start="51:29" pos:end="51:29">|</operator> <call pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:32">BI</name><argument_list pos:start="51:33" pos:end="51:42">(<argument pos:start="51:34" pos:end="51:34"><expr pos:start="51:34" pos:end="51:34"><literal type="number" pos:start="51:34" pos:end="51:34">7</literal></expr></argument>, <argument pos:start="51:37" pos:end="51:41"><expr pos:start="51:37" pos:end="51:41"><name pos:start="51:37" pos:end="51:41">CR_EQ</name></expr></argument>)</argument_list></call> <operator pos:start="51:44" pos:end="51:44">|</operator> <name pos:start="51:46" pos:end="51:58">BO_COND_FALSE</name> <operator pos:start="51:60" pos:end="51:60">|</operator> <name pos:start="51:62" pos:end="51:63">LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="58:0"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:9">rbase</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <name pos:start="55:13" pos:end="55:22">TCG_REG_R3</name></expr>;</expr_stmt>

<cpp:else pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:5">else</cpp:directive></cpp:else>  <comment type="block" pos:start="57:8" pos:end="57:28">/* !CONFIG_SOFTMMU */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:48"><expr pos:start="59:5" pos:end="59:47"><name pos:start="59:5" pos:end="59:9">rbase</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <ternary pos:start="59:13" pos:end="59:47"><condition pos:start="59:13" pos:end="59:24"><expr pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:22">GUEST_BASE</name></expr> ?</condition><then pos:start="59:26" pos:end="59:43"> <expr pos:start="59:26" pos:end="59:43"><name pos:start="59:26" pos:end="59:43">TCG_GUEST_BASE_REG</name></expr> </then><else pos:start="59:45" pos:end="59:47">: <expr pos:start="59:47" pos:end="59:47"><literal type="number" pos:start="59:47" pos:end="59:47">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="70:0"><if pos:start="61:5" pos:end="70:0">if <condition pos:start="61:8" pos:end="61:47">(<expr pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:27">TCG_TARGET_REG_BITS</name> <operator pos:start="61:29" pos:end="61:29">&gt;</operator> <name pos:start="61:31" pos:end="61:46">TARGET_LONG_BITS</name></expr>)</condition> <block pos:start="61:49" pos:end="70:0">{<block_content pos:start="63:9" pos:end="65:30">

        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><call pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:22">tcg_out_ext32u</name><argument_list pos:start="63:23" pos:end="63:47">(<argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">s</name></expr></argument>, <argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="63:41" pos:end="63:46"><expr pos:start="63:41" pos:end="63:46"><name pos:start="63:41" pos:end="63:46">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:14">addrlo</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:29">TCG_REG_TMP1</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="73:5" pos:end="124:0"><if pos:start="73:5" pos:end="99:5">if <condition pos:start="73:8" pos:end="73:53">(<expr pos:start="73:9" pos:end="73:52"><name pos:start="73:9" pos:end="73:27">TCG_TARGET_REG_BITS</name> <operator pos:start="73:29" pos:end="73:30">==</operator> <literal type="number" pos:start="73:32" pos:end="73:33">32</literal> <operator pos:start="73:35" pos:end="73:36">&amp;&amp;</operator> <name pos:start="73:38" pos:end="73:43">s_bits</name> <operator pos:start="73:45" pos:end="73:46">==</operator> <name pos:start="73:48" pos:end="73:52">MO_64</name></expr>)</condition> <block pos:start="73:55" pos:end="99:5">{<block_content pos:start="75:9" pos:end="97:9">

        <if_stmt pos:start="75:9" pos:end="97:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:27">(<expr pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:15">opc</name> <operator pos:start="75:17" pos:end="75:17">&amp;</operator> <name pos:start="75:19" pos:end="75:26">MO_BSWAP</name></expr>)</condition> <block pos:start="75:29" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:66">

            <expr_stmt pos:start="77:13" pos:end="77:60"><expr pos:start="77:13" pos:end="77:59"><call pos:start="77:13" pos:end="77:59"><name pos:start="77:13" pos:end="77:21">tcg_out32</name><argument_list pos:start="77:22" pos:end="77:59">(<argument pos:start="77:23" pos:end="77:23"><expr pos:start="77:23" pos:end="77:23"><name pos:start="77:23" pos:end="77:23">s</name></expr></argument>, <argument pos:start="77:26" pos:end="77:58"><expr pos:start="77:26" pos:end="77:58"><name pos:start="77:26" pos:end="77:29">ADDI</name> <operator pos:start="77:31" pos:end="77:31">|</operator> <call pos:start="77:33" pos:end="77:58"><name pos:start="77:33" pos:end="77:35">TAI</name><argument_list pos:start="77:36" pos:end="77:58">(<argument pos:start="77:37" pos:end="77:46"><expr pos:start="77:37" pos:end="77:46"><name pos:start="77:37" pos:end="77:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="77:49" pos:end="77:54"><expr pos:start="77:49" pos:end="77:54"><name pos:start="77:49" pos:end="77:54">addrlo</name></expr></argument>, <argument pos:start="77:57" pos:end="77:57"><expr pos:start="77:57" pos:end="77:57"><literal type="number" pos:start="77:57" pos:end="77:57">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:62"><expr pos:start="79:13" pos:end="79:61"><call pos:start="79:13" pos:end="79:61"><name pos:start="79:13" pos:end="79:21">tcg_out32</name><argument_list pos:start="79:22" pos:end="79:61">(<argument pos:start="79:23" pos:end="79:23"><expr pos:start="79:23" pos:end="79:23"><name pos:start="79:23" pos:end="79:23">s</name></expr></argument>, <argument pos:start="79:26" pos:end="79:60"><expr pos:start="79:26" pos:end="79:60"><name pos:start="79:26" pos:end="79:31">STWBRX</name> <operator pos:start="79:33" pos:end="79:33">|</operator> <call pos:start="79:35" pos:end="79:60"><name pos:start="79:35" pos:end="79:37">SAB</name><argument_list pos:start="79:38" pos:end="79:60">(<argument pos:start="79:39" pos:end="79:44"><expr pos:start="79:39" pos:end="79:44"><name pos:start="79:39" pos:end="79:44">datalo</name></expr></argument>, <argument pos:start="79:47" pos:end="79:51"><expr pos:start="79:47" pos:end="79:51"><name pos:start="79:47" pos:end="79:51">rbase</name></expr></argument>, <argument pos:start="79:54" pos:end="79:59"><expr pos:start="79:54" pos:end="79:59"><name pos:start="79:54" pos:end="79:59">addrlo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:66"><expr pos:start="81:13" pos:end="81:65"><call pos:start="81:13" pos:end="81:65"><name pos:start="81:13" pos:end="81:21">tcg_out32</name><argument_list pos:start="81:22" pos:end="81:65">(<argument pos:start="81:23" pos:end="81:23"><expr pos:start="81:23" pos:end="81:23"><name pos:start="81:23" pos:end="81:23">s</name></expr></argument>, <argument pos:start="81:26" pos:end="81:64"><expr pos:start="81:26" pos:end="81:64"><name pos:start="81:26" pos:end="81:31">STWBRX</name> <operator pos:start="81:33" pos:end="81:33">|</operator> <call pos:start="81:35" pos:end="81:64"><name pos:start="81:35" pos:end="81:37">SAB</name><argument_list pos:start="81:38" pos:end="81:64">(<argument pos:start="81:39" pos:end="81:44"><expr pos:start="81:39" pos:end="81:44"><name pos:start="81:39" pos:end="81:44">datahi</name></expr></argument>, <argument pos:start="81:47" pos:end="81:51"><expr pos:start="81:47" pos:end="81:51"><name pos:start="81:47" pos:end="81:51">rbase</name></expr></argument>, <argument pos:start="81:54" pos:end="81:63"><expr pos:start="81:54" pos:end="81:63"><name pos:start="81:54" pos:end="81:63">TCG_REG_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="91:9">else if <condition pos:start="83:19" pos:end="83:30">(<expr pos:start="83:20" pos:end="83:29"><name pos:start="83:20" pos:end="83:24">rbase</name> <operator pos:start="83:26" pos:end="83:27">!=</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>)</condition> <block pos:start="83:32" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:64">

            <expr_stmt pos:start="85:13" pos:end="85:60"><expr pos:start="85:13" pos:end="85:59"><call pos:start="85:13" pos:end="85:59"><name pos:start="85:13" pos:end="85:21">tcg_out32</name><argument_list pos:start="85:22" pos:end="85:59">(<argument pos:start="85:23" pos:end="85:23"><expr pos:start="85:23" pos:end="85:23"><name pos:start="85:23" pos:end="85:23">s</name></expr></argument>, <argument pos:start="85:26" pos:end="85:58"><expr pos:start="85:26" pos:end="85:58"><name pos:start="85:26" pos:end="85:29">ADDI</name> <operator pos:start="85:31" pos:end="85:31">|</operator> <call pos:start="85:33" pos:end="85:58"><name pos:start="85:33" pos:end="85:35">TAI</name><argument_list pos:start="85:36" pos:end="85:58">(<argument pos:start="85:37" pos:end="85:46"><expr pos:start="85:37" pos:end="85:46"><name pos:start="85:37" pos:end="85:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="85:49" pos:end="85:54"><expr pos:start="85:49" pos:end="85:54"><name pos:start="85:49" pos:end="85:54">addrlo</name></expr></argument>, <argument pos:start="85:57" pos:end="85:57"><expr pos:start="85:57" pos:end="85:57"><literal type="number" pos:start="85:57" pos:end="85:57">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:60"><expr pos:start="87:13" pos:end="87:59"><call pos:start="87:13" pos:end="87:59"><name pos:start="87:13" pos:end="87:21">tcg_out32</name><argument_list pos:start="87:22" pos:end="87:59">(<argument pos:start="87:23" pos:end="87:23"><expr pos:start="87:23" pos:end="87:23"><name pos:start="87:23" pos:end="87:23">s</name></expr></argument>, <argument pos:start="87:26" pos:end="87:58"><expr pos:start="87:26" pos:end="87:58"><name pos:start="87:26" pos:end="87:29">STWX</name> <operator pos:start="87:31" pos:end="87:31">|</operator> <call pos:start="87:33" pos:end="87:58"><name pos:start="87:33" pos:end="87:35">SAB</name><argument_list pos:start="87:36" pos:end="87:58">(<argument pos:start="87:37" pos:end="87:42"><expr pos:start="87:37" pos:end="87:42"><name pos:start="87:37" pos:end="87:42">datahi</name></expr></argument>, <argument pos:start="87:45" pos:end="87:49"><expr pos:start="87:45" pos:end="87:49"><name pos:start="87:45" pos:end="87:49">rbase</name></expr></argument>, <argument pos:start="87:52" pos:end="87:57"><expr pos:start="87:52" pos:end="87:57"><name pos:start="87:52" pos:end="87:57">addrlo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:64"><expr pos:start="89:13" pos:end="89:63"><call pos:start="89:13" pos:end="89:63"><name pos:start="89:13" pos:end="89:21">tcg_out32</name><argument_list pos:start="89:22" pos:end="89:63">(<argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><name pos:start="89:23" pos:end="89:23">s</name></expr></argument>, <argument pos:start="89:26" pos:end="89:62"><expr pos:start="89:26" pos:end="89:62"><name pos:start="89:26" pos:end="89:29">STWX</name> <operator pos:start="89:31" pos:end="89:31">|</operator> <call pos:start="89:33" pos:end="89:62"><name pos:start="89:33" pos:end="89:35">SAB</name><argument_list pos:start="89:36" pos:end="89:62">(<argument pos:start="89:37" pos:end="89:42"><expr pos:start="89:37" pos:end="89:42"><name pos:start="89:37" pos:end="89:42">datalo</name></expr></argument>, <argument pos:start="89:45" pos:end="89:49"><expr pos:start="89:45" pos:end="89:49"><name pos:start="89:45" pos:end="89:49">rbase</name></expr></argument>, <argument pos:start="89:52" pos:end="89:61"><expr pos:start="89:52" pos:end="89:61"><name pos:start="89:52" pos:end="89:61">TCG_REG_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="97:9">else <block pos:start="91:16" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:55">

            <expr_stmt pos:start="93:13" pos:end="93:55"><expr pos:start="93:13" pos:end="93:54"><call pos:start="93:13" pos:end="93:54"><name pos:start="93:13" pos:end="93:21">tcg_out32</name><argument_list pos:start="93:22" pos:end="93:54">(<argument pos:start="93:23" pos:end="93:23"><expr pos:start="93:23" pos:end="93:23"><name pos:start="93:23" pos:end="93:23">s</name></expr></argument>, <argument pos:start="93:26" pos:end="93:53"><expr pos:start="93:26" pos:end="93:53"><name pos:start="93:26" pos:end="93:28">STW</name> <operator pos:start="93:30" pos:end="93:30">|</operator> <call pos:start="93:32" pos:end="93:53"><name pos:start="93:32" pos:end="93:34">TAI</name><argument_list pos:start="93:35" pos:end="93:53">(<argument pos:start="93:36" pos:end="93:41"><expr pos:start="93:36" pos:end="93:41"><name pos:start="93:36" pos:end="93:41">datahi</name></expr></argument>, <argument pos:start="93:44" pos:end="93:49"><expr pos:start="93:44" pos:end="93:49"><name pos:start="93:44" pos:end="93:49">addrlo</name></expr></argument>, <argument pos:start="93:52" pos:end="93:52"><expr pos:start="93:52" pos:end="93:52"><literal type="number" pos:start="93:52" pos:end="93:52">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><call pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:21">tcg_out32</name><argument_list pos:start="95:22" pos:end="95:54">(<argument pos:start="95:23" pos:end="95:23"><expr pos:start="95:23" pos:end="95:23"><name pos:start="95:23" pos:end="95:23">s</name></expr></argument>, <argument pos:start="95:26" pos:end="95:53"><expr pos:start="95:26" pos:end="95:53"><name pos:start="95:26" pos:end="95:28">STW</name> <operator pos:start="95:30" pos:end="95:30">|</operator> <call pos:start="95:32" pos:end="95:53"><name pos:start="95:32" pos:end="95:34">TAI</name><argument_list pos:start="95:35" pos:end="95:53">(<argument pos:start="95:36" pos:end="95:41"><expr pos:start="95:36" pos:end="95:41"><name pos:start="95:36" pos:end="95:41">datalo</name></expr></argument>, <argument pos:start="95:44" pos:end="95:49"><expr pos:start="95:44" pos:end="95:49"><name pos:start="95:44" pos:end="95:49">addrlo</name></expr></argument>, <argument pos:start="95:52" pos:end="95:52"><expr pos:start="95:52" pos:end="95:52"><literal type="number" pos:start="95:52" pos:end="95:52">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="124:0">else <block pos:start="99:12" pos:end="124:0">{<block_content pos:start="101:9" pos:end="117:9">

        <decl_stmt pos:start="101:9" pos:end="101:65"><decl pos:start="101:9" pos:end="101:64"><type pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:16">uint32_t</name></type> <name pos:start="101:18" pos:end="101:21">insn</name> <init pos:start="101:23" pos:end="101:64">= <expr pos:start="101:25" pos:end="101:64"><name pos:start="101:25" pos:end="101:64"><name pos:start="101:25" pos:end="101:36">qemu_stx_opc</name><index pos:start="101:37" pos:end="101:64">[<expr pos:start="101:38" pos:end="101:63"><name pos:start="101:38" pos:end="101:40">opc</name> <operator pos:start="101:42" pos:end="101:42">&amp;</operator> <operator pos:start="101:44" pos:end="101:44">(</operator><name pos:start="101:45" pos:end="101:52">MO_BSWAP</name> <operator pos:start="101:54" pos:end="101:54">|</operator> <name pos:start="101:56" pos:end="101:62">MO_SIZE</name><operator pos:start="101:63" pos:end="101:63">)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="103:9" pos:end="117:9"><if pos:start="103:9" pos:end="113:9">if <condition pos:start="103:12" pos:end="103:45">(<expr pos:start="103:13" pos:end="103:44"><operator pos:start="103:13" pos:end="103:13">!</operator><name pos:start="103:14" pos:end="103:26">HAVE_ISA_2_06</name> <operator pos:start="103:28" pos:end="103:29">&amp;&amp;</operator> <name pos:start="103:31" pos:end="103:34">insn</name> <operator pos:start="103:36" pos:end="103:37">==</operator> <name pos:start="103:39" pos:end="103:44">STDBRX</name></expr>)</condition> <block pos:start="103:47" pos:end="113:9">{<block_content pos:start="105:13" pos:end="111:72">

            <expr_stmt pos:start="105:13" pos:end="105:62"><expr pos:start="105:13" pos:end="105:61"><call pos:start="105:13" pos:end="105:61"><name pos:start="105:13" pos:end="105:21">tcg_out32</name><argument_list pos:start="105:22" pos:end="105:61">(<argument pos:start="105:23" pos:end="105:23"><expr pos:start="105:23" pos:end="105:23"><name pos:start="105:23" pos:end="105:23">s</name></expr></argument>, <argument pos:start="105:26" pos:end="105:60"><expr pos:start="105:26" pos:end="105:60"><name pos:start="105:26" pos:end="105:31">STWBRX</name> <operator pos:start="105:33" pos:end="105:33">|</operator> <call pos:start="105:35" pos:end="105:60"><name pos:start="105:35" pos:end="105:37">SAB</name><argument_list pos:start="105:38" pos:end="105:60">(<argument pos:start="105:39" pos:end="105:44"><expr pos:start="105:39" pos:end="105:44"><name pos:start="105:39" pos:end="105:44">datalo</name></expr></argument>, <argument pos:start="105:47" pos:end="105:51"><expr pos:start="105:47" pos:end="105:51"><name pos:start="105:47" pos:end="105:51">rbase</name></expr></argument>, <argument pos:start="105:54" pos:end="105:59"><expr pos:start="105:54" pos:end="105:59"><name pos:start="105:54" pos:end="105:59">addrlo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:62"><expr pos:start="107:13" pos:end="107:61"><call pos:start="107:13" pos:end="107:61"><name pos:start="107:13" pos:end="107:21">tcg_out32</name><argument_list pos:start="107:22" pos:end="107:61">(<argument pos:start="107:23" pos:end="107:23"><expr pos:start="107:23" pos:end="107:23"><name pos:start="107:23" pos:end="107:23">s</name></expr></argument>, <argument pos:start="107:26" pos:end="107:60"><expr pos:start="107:26" pos:end="107:60"><name pos:start="107:26" pos:end="107:29">ADDI</name> <operator pos:start="107:31" pos:end="107:31">|</operator> <call pos:start="107:33" pos:end="107:60"><name pos:start="107:33" pos:end="107:35">TAI</name><argument_list pos:start="107:36" pos:end="107:60">(<argument pos:start="107:37" pos:end="107:48"><expr pos:start="107:37" pos:end="107:48"><name pos:start="107:37" pos:end="107:48">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="107:51" pos:end="107:56"><expr pos:start="107:51" pos:end="107:56"><name pos:start="107:51" pos:end="107:56">addrlo</name></expr></argument>, <argument pos:start="107:59" pos:end="107:59"><expr pos:start="107:59" pos:end="107:59"><literal type="number" pos:start="107:59" pos:end="107:59">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:54"><expr pos:start="109:13" pos:end="109:53"><call pos:start="109:13" pos:end="109:53"><name pos:start="109:13" pos:end="109:26">tcg_out_shri64</name><argument_list pos:start="109:27" pos:end="109:53">(<argument pos:start="109:28" pos:end="109:28"><expr pos:start="109:28" pos:end="109:28"><name pos:start="109:28" pos:end="109:28">s</name></expr></argument>, <argument pos:start="109:31" pos:end="109:40"><expr pos:start="109:31" pos:end="109:40"><name pos:start="109:31" pos:end="109:40">TCG_REG_R0</name></expr></argument>, <argument pos:start="109:43" pos:end="109:48"><expr pos:start="109:43" pos:end="109:48"><name pos:start="109:43" pos:end="109:48">datalo</name></expr></argument>, <argument pos:start="109:51" pos:end="109:52"><expr pos:start="109:51" pos:end="109:52"><literal type="number" pos:start="109:51" pos:end="109:52">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:72"><expr pos:start="111:13" pos:end="111:71"><call pos:start="111:13" pos:end="111:71"><name pos:start="111:13" pos:end="111:21">tcg_out32</name><argument_list pos:start="111:22" pos:end="111:71">(<argument pos:start="111:23" pos:end="111:23"><expr pos:start="111:23" pos:end="111:23"><name pos:start="111:23" pos:end="111:23">s</name></expr></argument>, <argument pos:start="111:26" pos:end="111:70"><expr pos:start="111:26" pos:end="111:70"><name pos:start="111:26" pos:end="111:31">STWBRX</name> <operator pos:start="111:33" pos:end="111:33">|</operator> <call pos:start="111:35" pos:end="111:70"><name pos:start="111:35" pos:end="111:37">SAB</name><argument_list pos:start="111:38" pos:end="111:70">(<argument pos:start="111:39" pos:end="111:48"><expr pos:start="111:39" pos:end="111:48"><name pos:start="111:39" pos:end="111:48">TCG_REG_R0</name></expr></argument>, <argument pos:start="111:51" pos:end="111:55"><expr pos:start="111:51" pos:end="111:55"><name pos:start="111:51" pos:end="111:55">rbase</name></expr></argument>, <argument pos:start="111:58" pos:end="111:69"><expr pos:start="111:58" pos:end="111:69"><name pos:start="111:58" pos:end="111:69">TCG_REG_TMP1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="113:11" pos:end="117:9">else <block pos:start="113:16" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:60">

            <expr_stmt pos:start="115:13" pos:end="115:60"><expr pos:start="115:13" pos:end="115:59"><call pos:start="115:13" pos:end="115:59"><name pos:start="115:13" pos:end="115:21">tcg_out32</name><argument_list pos:start="115:22" pos:end="115:59">(<argument pos:start="115:23" pos:end="115:23"><expr pos:start="115:23" pos:end="115:23"><name pos:start="115:23" pos:end="115:23">s</name></expr></argument>, <argument pos:start="115:26" pos:end="115:58"><expr pos:start="115:26" pos:end="115:58"><name pos:start="115:26" pos:end="115:29">insn</name> <operator pos:start="115:31" pos:end="115:31">|</operator> <call pos:start="115:33" pos:end="115:58"><name pos:start="115:33" pos:end="115:35">SAB</name><argument_list pos:start="115:36" pos:end="115:58">(<argument pos:start="115:37" pos:end="115:42"><expr pos:start="115:37" pos:end="115:42"><name pos:start="115:37" pos:end="115:42">datalo</name></expr></argument>, <argument pos:start="115:45" pos:end="115:49"><expr pos:start="115:45" pos:end="115:49"><name pos:start="115:45" pos:end="115:49">rbase</name></expr></argument>, <argument pos:start="115:52" pos:end="115:57"><expr pos:start="115:52" pos:end="115:57"><name pos:start="115:52" pos:end="115:57">addrlo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="123:1" pos:end="123:21">#<cpp:directive pos:start="123:2" pos:end="123:6">ifdef</cpp:directive> <name pos:start="123:8" pos:end="123:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <expr_stmt pos:start="125:5" pos:end="130:0"><expr pos:start="125:5" pos:end="127:47"><call pos:start="125:5" pos:end="127:47"><name pos:start="125:5" pos:end="125:23">add_qemu_ldst_label</name><argument_list pos:start="125:24" pos:end="127:47">(<argument pos:start="125:25" pos:end="125:25"><expr pos:start="125:25" pos:end="125:25"><name pos:start="125:25" pos:end="125:25">s</name></expr></argument>, <argument pos:start="125:28" pos:end="125:32"><expr pos:start="125:28" pos:end="125:32"><name pos:start="125:28" pos:end="125:32">false</name></expr></argument>, <argument pos:start="125:35" pos:end="125:36"><expr pos:start="125:35" pos:end="125:36"><name pos:start="125:35" pos:end="125:36">oi</name></expr></argument>, <argument pos:start="125:39" pos:end="125:44"><expr pos:start="125:39" pos:end="125:44"><name pos:start="125:39" pos:end="125:44">datalo</name></expr></argument>, <argument pos:start="125:47" pos:end="125:52"><expr pos:start="125:47" pos:end="125:52"><name pos:start="125:47" pos:end="125:52">datahi</name></expr></argument>, <argument pos:start="125:55" pos:end="125:60"><expr pos:start="125:55" pos:end="125:60"><name pos:start="125:55" pos:end="125:60">addrlo</name></expr></argument>, <argument pos:start="125:63" pos:end="125:68"><expr pos:start="125:63" pos:end="125:68"><name pos:start="125:63" pos:end="125:68">addrhi</name></expr></argument>,

                        <argument pos:start="127:25" pos:end="127:35"><expr pos:start="127:25" pos:end="127:35"><name pos:start="127:25" pos:end="127:35"><name pos:start="127:25" pos:end="127:25">s</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:35">code_ptr</name></name></expr></argument>, <argument pos:start="127:38" pos:end="127:46"><expr pos:start="127:38" pos:end="127:46"><name pos:start="127:38" pos:end="127:46">label_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="129:1" pos:end="129:6">#<cpp:directive pos:start="129:2" pos:end="129:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
