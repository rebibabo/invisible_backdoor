<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12965.c" pos:tabs="8"><function pos:start="1:1" pos:end="313:1"><type pos:start="1:1" pos:end="1:9"><name pos:start="1:1" pos:end="1:9">CFDataRef</name></type> <name pos:start="1:11" pos:end="1:47">ff_videotoolbox_hvcc_extradata_create</name><parameter_list pos:start="1:48" pos:end="1:70">(<parameter pos:start="1:49" pos:end="1:69"><decl pos:start="1:49" pos:end="1:69"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:62">AVCodecContext</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="313:1">{<block_content pos:start="5:5" pos:end="311:16">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">HEVCContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">h</name> <init pos:start="5:20" pos:end="5:37">= <expr pos:start="5:22" pos:end="5:37"><name pos:start="5:22" pos:end="5:37"><name pos:start="5:22" pos:end="5:26">avctx</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">HEVCVPS</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">vps</name> <init pos:start="7:24" pos:end="7:65">= <expr pos:start="7:26" pos:end="7:65"><operator pos:start="7:26" pos:end="7:26">(</operator><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:39">HEVCVPS</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator><name pos:start="7:43" pos:end="7:59"><name pos:start="7:43" pos:end="7:43">h</name><operator pos:start="7:44" pos:end="7:45">-&gt;</operator><name pos:start="7:46" pos:end="7:47">ps</name><operator pos:start="7:48" pos:end="7:48">.</operator><name pos:start="7:49" pos:end="7:56">vps_list</name><index pos:start="7:57" pos:end="7:59">[<expr pos:start="7:58" pos:end="7:58"><literal type="number" pos:start="7:58" pos:end="7:58">0</literal></expr>]</index></name><operator pos:start="7:60" pos:end="7:61">-&gt;</operator><name pos:start="7:62" pos:end="7:65">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:66"><decl pos:start="9:5" pos:end="9:65"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">HEVCSPS</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">sps</name> <init pos:start="9:24" pos:end="9:65">= <expr pos:start="9:26" pos:end="9:65"><operator pos:start="9:26" pos:end="9:26">(</operator><specifier pos:start="9:27" pos:end="9:31">const</specifier> <name pos:start="9:33" pos:end="9:39">HEVCSPS</name> <operator pos:start="9:41" pos:end="9:41">*</operator><operator pos:start="9:42" pos:end="9:42">)</operator><name pos:start="9:43" pos:end="9:59"><name pos:start="9:43" pos:end="9:43">h</name><operator pos:start="9:44" pos:end="9:45">-&gt;</operator><name pos:start="9:46" pos:end="9:47">ps</name><operator pos:start="9:48" pos:end="9:48">.</operator><name pos:start="9:49" pos:end="9:56">sps_list</name><index pos:start="9:57" pos:end="9:59">[<expr pos:start="9:58" pos:end="9:58"><literal type="number" pos:start="9:58" pos:end="9:58">0</literal></expr>]</index></name><operator pos:start="9:60" pos:end="9:61">-&gt;</operator><name pos:start="9:62" pos:end="9:65">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:18">num_pps</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">HEVCPPS</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">pps</name> <init pos:start="13:24" pos:end="13:34">= <expr pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:26">h</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:30">ps</name><operator pos:start="13:31" pos:end="13:31">.</operator><name pos:start="13:32" pos:end="13:34">pps</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">PTLCommon</name></type> <name pos:start="15:15" pos:end="15:18">ptlc</name> <init pos:start="15:20" pos:end="15:41">= <expr pos:start="15:22" pos:end="15:41"><name pos:start="15:22" pos:end="15:41"><name pos:start="15:22" pos:end="15:24">vps</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:29">ptl</name><operator pos:start="15:30" pos:end="15:30">.</operator><name pos:start="15:31" pos:end="15:41">general_ptl</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">VUI</name></type> <name pos:start="17:9" pos:end="17:11">vui</name> <init pos:start="17:13" pos:end="17:22">= <expr pos:start="17:15" pos:end="17:22"><name pos:start="17:15" pos:end="17:22"><name pos:start="17:15" pos:end="17:17">sps</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:22">vui</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:27">parallelismType</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">CFDataRef</name></type> <name pos:start="21:15" pos:end="21:18">data</name> <init pos:start="21:20" pos:end="21:25">= <expr pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:15"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:77"><decl pos:start="25:5" pos:end="25:76"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:25">vt_extradata_size</name> <init pos:start="25:27" pos:end="25:76">= <expr pos:start="25:29" pos:end="25:76"><literal type="number" pos:start="25:29" pos:end="25:32">23</literal> <operator pos:start="25:32" pos:end="25:32">+</operator> <literal type="number" pos:start="25:34" pos:end="25:36">5</literal> <operator pos:start="25:36" pos:end="25:36">+</operator> <name pos:start="25:38" pos:end="25:51"><name pos:start="25:38" pos:end="25:40">vps</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:51">data_size</name></name> <operator pos:start="25:53" pos:end="25:53">+</operator> <literal type="number" pos:start="25:55" pos:end="25:57">5</literal> <operator pos:start="25:57" pos:end="25:57">+</operator> <name pos:start="25:59" pos:end="25:72"><name pos:start="25:59" pos:end="25:61">sps</name><operator pos:start="25:62" pos:end="25:63">-&gt;</operator><name pos:start="25:64" pos:end="25:72">data_size</name></name> <operator pos:start="25:74" pos:end="25:74">+</operator> <literal type="number" pos:start="25:76" pos:end="25:76">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">uint8_t</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:25">vt_extradata</name></decl>;</decl_stmt>



    <for pos:start="31:5" pos:end="43:5">for <control pos:start="31:9" pos:end="31:39">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:34"><expr pos:start="31:17" pos:end="31:33"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:33">MAX_PPS_COUNT</name></expr>;</condition> <incr pos:start="31:36" pos:end="31:38"><expr pos:start="31:36" pos:end="31:38"><name pos:start="31:36" pos:end="31:36">i</name><operator pos:start="31:37" pos:end="31:38">++</operator></expr></incr>)</control> <block pos:start="31:41" pos:end="43:5">{<block_content pos:start="33:9" pos:end="41:9">

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:30">(<expr pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:13">h</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:17">ps</name><operator pos:start="33:18" pos:end="33:18">.</operator><name pos:start="33:19" pos:end="33:26">pps_list</name><index pos:start="33:27" pos:end="33:29">[<expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">i</name></expr>]</index></name></expr>)</condition> <block pos:start="33:32" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:22">

            <decl_stmt pos:start="35:13" pos:end="35:74"><decl pos:start="35:13" pos:end="35:73"><type pos:start="35:13" pos:end="35:27"><specifier pos:start="35:13" pos:end="35:17">const</specifier> <name pos:start="35:19" pos:end="35:25">HEVCPPS</name> <modifier pos:start="35:27" pos:end="35:27">*</modifier></type><name pos:start="35:28" pos:end="35:30">pps</name> <init pos:start="35:32" pos:end="35:73">= <expr pos:start="35:34" pos:end="35:73"><operator pos:start="35:34" pos:end="35:34">(</operator><specifier pos:start="35:35" pos:end="35:39">const</specifier> <name pos:start="35:41" pos:end="35:47">HEVCPPS</name> <operator pos:start="35:49" pos:end="35:49">*</operator><operator pos:start="35:50" pos:end="35:50">)</operator><name pos:start="35:51" pos:end="35:67"><name pos:start="35:51" pos:end="35:51">h</name><operator pos:start="35:52" pos:end="35:53">-&gt;</operator><name pos:start="35:54" pos:end="35:55">ps</name><operator pos:start="35:56" pos:end="35:56">.</operator><name pos:start="35:57" pos:end="35:64">pps_list</name><index pos:start="35:65" pos:end="35:67">[<expr pos:start="35:66" pos:end="35:66"><name pos:start="35:66" pos:end="35:66">i</name></expr>]</index></name><operator pos:start="35:68" pos:end="35:69">-&gt;</operator><name pos:start="35:70" pos:end="35:73">data</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:52"><expr pos:start="37:13" pos:end="37:51"><name pos:start="37:13" pos:end="37:29">vt_extradata_size</name> <operator pos:start="37:31" pos:end="37:32">+=</operator> <literal type="number" pos:start="37:34" pos:end="37:36">2</literal> <operator pos:start="37:36" pos:end="37:36">+</operator> <name pos:start="37:38" pos:end="37:51"><name pos:start="37:38" pos:end="37:40">pps</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:51">data_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:22"><expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:19">num_pps</name><operator pos:start="39:20" pos:end="39:21">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="47:5" pos:end="47:48"><expr pos:start="47:5" pos:end="47:47"><name pos:start="47:5" pos:end="47:16">vt_extradata</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:47"><name pos:start="47:20" pos:end="47:28">av_malloc</name><argument_list pos:start="47:29" pos:end="47:47">(<argument pos:start="47:30" pos:end="47:46"><expr pos:start="47:30" pos:end="47:46"><name pos:start="47:30" pos:end="47:46">vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="51:20"><if pos:start="49:5" pos:end="51:20">if <condition pos:start="49:8" pos:end="49:22">(<expr pos:start="49:9" pos:end="49:21"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:21">vt_extradata</name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:20"><block_content pos:start="51:9" pos:end="51:20">

        <return pos:start="51:9" pos:end="51:20">return <expr pos:start="51:16" pos:end="51:19"><name pos:start="51:16" pos:end="51:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:21"><expr pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:5">p</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <name pos:start="53:9" pos:end="53:20">vt_extradata</name></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:51">/* unsigned int(8) configurationVersion = 1; */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><call pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:9">AV_W8</name><argument_list pos:start="59:10" pos:end="59:19">(<argument pos:start="59:11" pos:end="59:15"><expr pos:start="59:11" pos:end="59:15"><name pos:start="59:11" pos:end="59:11">p</name> <operator pos:start="59:13" pos:end="59:13">+</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr></argument>, <argument pos:start="59:18" pos:end="59:18"><expr pos:start="59:18" pos:end="59:18"><literal type="number" pos:start="59:18" pos:end="59:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="71:7">/*

     * unsigned int(2) general_profile_space;

     * unsigned int(1) general_tier_flag;

     * unsigned int(5) general_profile_idc;

     */</comment>

    <expr_stmt pos:start="73:5" pos:end="77:35"><expr pos:start="73:5" pos:end="77:34"><call pos:start="73:5" pos:end="77:34"><name pos:start="73:5" pos:end="73:9">AV_W8</name><argument_list pos:start="73:10" pos:end="77:34">(<argument pos:start="73:11" pos:end="73:15"><expr pos:start="73:11" pos:end="73:15"><name pos:start="73:11" pos:end="73:11">p</name> <operator pos:start="73:13" pos:end="73:13">+</operator> <literal type="number" pos:start="73:15" pos:end="73:15">1</literal></expr></argument>, <argument pos:start="73:18" pos:end="77:33"><expr pos:start="73:18" pos:end="77:33"><name pos:start="73:18" pos:end="73:35"><name pos:start="73:18" pos:end="73:21">ptlc</name><operator pos:start="73:22" pos:end="73:22">.</operator><name pos:start="73:23" pos:end="73:35">profile_space</name></name> <operator pos:start="73:37" pos:end="73:38">&lt;&lt;</operator> <literal type="number" pos:start="73:40" pos:end="73:40">6</literal> <operator pos:start="73:42" pos:end="73:42">|</operator>

                 <name pos:start="75:18" pos:end="75:31"><name pos:start="75:18" pos:end="75:21">ptlc</name><operator pos:start="75:22" pos:end="75:22">.</operator><name pos:start="75:23" pos:end="75:31">tier_flag</name></name>     <operator pos:start="75:37" pos:end="75:38">&lt;&lt;</operator> <literal type="number" pos:start="75:40" pos:end="75:40">5</literal> <operator pos:start="75:42" pos:end="75:42">|</operator>

                 <name pos:start="77:18" pos:end="77:33"><name pos:start="77:18" pos:end="77:21">ptlc</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:33">profile_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:63">/* unsigned int(32) general_profile_compatibility_flags; */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:54"><expr pos:start="83:5" pos:end="83:53"><call pos:start="83:5" pos:end="83:53"><name pos:start="83:5" pos:end="83:10">memcpy</name><argument_list pos:start="83:11" pos:end="83:53">(<argument pos:start="83:12" pos:end="83:16"><expr pos:start="83:12" pos:end="83:16"><name pos:start="83:12" pos:end="83:12">p</name> <operator pos:start="83:14" pos:end="83:14">+</operator> <literal type="number" pos:start="83:16" pos:end="83:16">2</literal></expr></argument>, <argument pos:start="83:19" pos:end="83:49"><expr pos:start="83:19" pos:end="83:49"><name pos:start="83:19" pos:end="83:49"><name pos:start="83:19" pos:end="83:22">ptlc</name><operator pos:start="83:23" pos:end="83:23">.</operator><name pos:start="83:24" pos:end="83:49">profile_compatibility_flag</name></name></expr></argument>, <argument pos:start="83:52" pos:end="83:52"><expr pos:start="83:52" pos:end="83:52"><literal type="number" pos:start="83:52" pos:end="83:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:62">/* unsigned int(48) general_constraint_indicator_flags; */</comment>

    <expr_stmt pos:start="89:5" pos:end="95:55"><expr pos:start="89:5" pos:end="95:54"><call pos:start="89:5" pos:end="95:54"><name pos:start="89:5" pos:end="89:9">AV_W8</name><argument_list pos:start="89:10" pos:end="95:54">(<argument pos:start="89:11" pos:end="89:15"><expr pos:start="89:11" pos:end="89:15"><name pos:start="89:11" pos:end="89:11">p</name> <operator pos:start="89:13" pos:end="89:13">+</operator> <literal type="number" pos:start="89:15" pos:end="89:15">6</literal></expr></argument>, <argument pos:start="89:18" pos:end="95:53"><expr pos:start="89:18" pos:end="95:53"><name pos:start="89:18" pos:end="89:45"><name pos:start="89:18" pos:end="89:21">ptlc</name><operator pos:start="89:22" pos:end="89:22">.</operator><name pos:start="89:23" pos:end="89:45">progressive_source_flag</name></name>    <operator pos:start="89:50" pos:end="89:51">&lt;&lt;</operator> <literal type="number" pos:start="89:53" pos:end="89:53">7</literal> <operator pos:start="89:55" pos:end="89:55">|</operator>

                 <name pos:start="91:18" pos:end="91:44"><name pos:start="91:18" pos:end="91:21">ptlc</name><operator pos:start="91:22" pos:end="91:22">.</operator><name pos:start="91:23" pos:end="91:44">interlaced_source_flag</name></name>     <operator pos:start="91:50" pos:end="91:51">&lt;&lt;</operator> <literal type="number" pos:start="91:53" pos:end="91:53">6</literal> <operator pos:start="91:55" pos:end="91:55">|</operator>

                 <name pos:start="93:18" pos:end="93:48"><name pos:start="93:18" pos:end="93:21">ptlc</name><operator pos:start="93:22" pos:end="93:22">.</operator><name pos:start="93:23" pos:end="93:48">non_packed_constraint_flag</name></name> <operator pos:start="93:50" pos:end="93:51">&lt;&lt;</operator> <literal type="number" pos:start="93:53" pos:end="93:53">5</literal> <operator pos:start="93:55" pos:end="93:55">|</operator>

                 <name pos:start="95:18" pos:end="95:48"><name pos:start="95:18" pos:end="95:21">ptlc</name><operator pos:start="95:22" pos:end="95:22">.</operator><name pos:start="95:23" pos:end="95:48">frame_only_constraint_flag</name></name> <operator pos:start="95:50" pos:end="95:51">&lt;&lt;</operator> <literal type="number" pos:start="95:53" pos:end="95:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:20"><expr pos:start="97:5" pos:end="97:19"><call pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:9">AV_W8</name><argument_list pos:start="97:10" pos:end="97:19">(<argument pos:start="97:11" pos:end="97:15"><expr pos:start="97:11" pos:end="97:15"><name pos:start="97:11" pos:end="97:11">p</name> <operator pos:start="97:13" pos:end="97:13">+</operator> <literal type="number" pos:start="97:15" pos:end="97:15">7</literal></expr></argument>, <argument pos:start="97:18" pos:end="97:18"><expr pos:start="97:18" pos:end="97:18"><literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:22"><expr pos:start="99:5" pos:end="99:21"><call pos:start="99:5" pos:end="99:21"><name pos:start="99:5" pos:end="99:11">AV_WN32</name><argument_list pos:start="99:12" pos:end="99:21">(<argument pos:start="99:13" pos:end="99:17"><expr pos:start="99:13" pos:end="99:17"><name pos:start="99:13" pos:end="99:13">p</name> <operator pos:start="99:15" pos:end="99:15">+</operator> <literal type="number" pos:start="99:17" pos:end="99:17">8</literal></expr></argument>, <argument pos:start="99:20" pos:end="99:20"><expr pos:start="99:20" pos:end="99:20"><literal type="number" pos:start="99:20" pos:end="99:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:44">/* unsigned int(8) general_level_idc; */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:34"><expr pos:start="105:5" pos:end="105:33"><call pos:start="105:5" pos:end="105:33"><name pos:start="105:5" pos:end="105:9">AV_W8</name><argument_list pos:start="105:10" pos:end="105:33">(<argument pos:start="105:11" pos:end="105:16"><expr pos:start="105:11" pos:end="105:16"><name pos:start="105:11" pos:end="105:11">p</name> <operator pos:start="105:13" pos:end="105:13">+</operator> <literal type="number" pos:start="105:15" pos:end="105:16">12</literal></expr></argument>, <argument pos:start="105:19" pos:end="105:32"><expr pos:start="105:19" pos:end="105:32"><name pos:start="105:19" pos:end="105:32"><name pos:start="105:19" pos:end="105:22">ptlc</name><operator pos:start="105:23" pos:end="105:23">.</operator><name pos:start="105:24" pos:end="105:32">level_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="115:7">/*

     * bit(4) reserved = ‘1111’b;

     * unsigned int(12) min_spatial_segmentation_idc;

     */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:66"><expr pos:start="117:5" pos:end="117:65"><call pos:start="117:5" pos:end="117:65"><name pos:start="117:5" pos:end="117:9">AV_W8</name><argument_list pos:start="117:10" pos:end="117:65">(<argument pos:start="117:11" pos:end="117:16"><expr pos:start="117:11" pos:end="117:16"><name pos:start="117:11" pos:end="117:11">p</name> <operator pos:start="117:13" pos:end="117:13">+</operator> <literal type="number" pos:start="117:15" pos:end="117:16">13</literal></expr></argument>, <argument pos:start="117:19" pos:end="117:64"><expr pos:start="117:19" pos:end="117:64"><literal type="number" pos:start="117:19" pos:end="117:22">0xf0</literal> <operator pos:start="117:24" pos:end="117:24">|</operator> <operator pos:start="117:26" pos:end="117:26">(</operator><name pos:start="117:27" pos:end="117:58"><name pos:start="117:27" pos:end="117:29">vui</name><operator pos:start="117:30" pos:end="117:30">.</operator><name pos:start="117:31" pos:end="117:58">min_spatial_segmentation_idc</name></name> <operator pos:start="117:60" pos:end="117:61">&gt;&gt;</operator> <literal type="number" pos:start="117:63" pos:end="117:63">4</literal><operator pos:start="117:64" pos:end="117:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:59"><expr pos:start="119:5" pos:end="119:58"><call pos:start="119:5" pos:end="119:58"><name pos:start="119:5" pos:end="119:9">AV_W8</name><argument_list pos:start="119:10" pos:end="119:58">(<argument pos:start="119:11" pos:end="119:16"><expr pos:start="119:11" pos:end="119:16"><name pos:start="119:11" pos:end="119:11">p</name> <operator pos:start="119:13" pos:end="119:13">+</operator> <literal type="number" pos:start="119:15" pos:end="119:16">14</literal></expr></argument>, <argument pos:start="119:19" pos:end="119:57"><expr pos:start="119:19" pos:end="119:57"><name pos:start="119:19" pos:end="119:50"><name pos:start="119:19" pos:end="119:21">vui</name><operator pos:start="119:22" pos:end="119:22">.</operator><name pos:start="119:23" pos:end="119:50">min_spatial_segmentation_idc</name></name> <operator pos:start="119:52" pos:end="119:52">&amp;</operator> <literal type="number" pos:start="119:54" pos:end="119:57">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="129:7">/*

     * bit(6) reserved = ‘111111’b;

     * unsigned int(2) parallelismType;

     */</comment>

    <if_stmt pos:start="131:5" pos:end="149:28"><if pos:start="131:5" pos:end="133:28">if <condition pos:start="131:8" pos:end="131:42">(<expr pos:start="131:9" pos:end="131:41"><operator pos:start="131:9" pos:end="131:9">!</operator><name pos:start="131:10" pos:end="131:41"><name pos:start="131:10" pos:end="131:12">vui</name><operator pos:start="131:13" pos:end="131:13">.</operator><name pos:start="131:14" pos:end="131:41">min_spatial_segmentation_idc</name></name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:28"><block_content pos:start="133:9" pos:end="133:28">

        <expr_stmt pos:start="133:9" pos:end="133:28"><expr pos:start="133:9" pos:end="133:27"><name pos:start="133:9" pos:end="133:23">parallelismType</name> <operator pos:start="133:25" pos:end="133:25">=</operator> <literal type="number" pos:start="133:27" pos:end="133:27">0</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="135:5" pos:end="137:28">else if <condition pos:start="135:13" pos:end="135:78">(<expr pos:start="135:14" pos:end="135:77"><name pos:start="135:14" pos:end="135:50"><name pos:start="135:14" pos:end="135:16">pps</name><operator pos:start="135:17" pos:end="135:18">-&gt;</operator><name pos:start="135:19" pos:end="135:50">entropy_coding_sync_enabled_flag</name></name> <operator pos:start="135:52" pos:end="135:53">&amp;&amp;</operator> <name pos:start="135:55" pos:end="135:77"><name pos:start="135:55" pos:end="135:57">pps</name><operator pos:start="135:58" pos:end="135:59">-&gt;</operator><name pos:start="135:60" pos:end="135:77">tiles_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:28"><block_content pos:start="137:9" pos:end="137:28">

        <expr_stmt pos:start="137:9" pos:end="137:28"><expr pos:start="137:9" pos:end="137:27"><name pos:start="137:9" pos:end="137:23">parallelismType</name> <operator pos:start="137:25" pos:end="137:25">=</operator> <literal type="number" pos:start="137:27" pos:end="137:27">0</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="139:5" pos:end="141:28">else if <condition pos:start="139:13" pos:end="139:51">(<expr pos:start="139:14" pos:end="139:50"><name pos:start="139:14" pos:end="139:50"><name pos:start="139:14" pos:end="139:16">pps</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:50">entropy_coding_sync_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:28"><block_content pos:start="141:9" pos:end="141:28">

        <expr_stmt pos:start="141:9" pos:end="141:28"><expr pos:start="141:9" pos:end="141:27"><name pos:start="141:9" pos:end="141:23">parallelismType</name> <operator pos:start="141:25" pos:end="141:25">=</operator> <literal type="number" pos:start="141:27" pos:end="141:27">3</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="143:5" pos:end="145:28">else if <condition pos:start="143:13" pos:end="143:37">(<expr pos:start="143:14" pos:end="143:36"><name pos:start="143:14" pos:end="143:36"><name pos:start="143:14" pos:end="143:16">pps</name><operator pos:start="143:17" pos:end="143:18">-&gt;</operator><name pos:start="143:19" pos:end="143:36">tiles_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:28"><block_content pos:start="145:9" pos:end="145:28">

        <expr_stmt pos:start="145:9" pos:end="145:28"><expr pos:start="145:9" pos:end="145:27"><name pos:start="145:9" pos:end="145:23">parallelismType</name> <operator pos:start="145:25" pos:end="145:25">=</operator> <literal type="number" pos:start="145:27" pos:end="145:27">2</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="147:5" pos:end="149:28">else<block type="pseudo" pos:start="149:9" pos:end="149:28"><block_content pos:start="149:9" pos:end="149:28">

        <expr_stmt pos:start="149:9" pos:end="149:28"><expr pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:23">parallelismType</name> <operator pos:start="149:25" pos:end="149:25">=</operator> <literal type="number" pos:start="149:27" pos:end="149:27">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:42"><expr pos:start="151:5" pos:end="151:41"><call pos:start="151:5" pos:end="151:41"><name pos:start="151:5" pos:end="151:9">AV_W8</name><argument_list pos:start="151:10" pos:end="151:41">(<argument pos:start="151:11" pos:end="151:16"><expr pos:start="151:11" pos:end="151:16"><name pos:start="151:11" pos:end="151:11">p</name> <operator pos:start="151:13" pos:end="151:13">+</operator> <literal type="number" pos:start="151:15" pos:end="151:16">15</literal></expr></argument>, <argument pos:start="151:19" pos:end="151:40"><expr pos:start="151:19" pos:end="151:40"><literal type="number" pos:start="151:19" pos:end="151:22">0xfc</literal> <operator pos:start="151:24" pos:end="151:24">|</operator> <name pos:start="151:26" pos:end="151:40">parallelismType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="161:7">/*

     * bit(6) reserved = ‘111111’b;

     * unsigned int(2) chromaFormat;

     */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:49"><expr pos:start="163:5" pos:end="163:48"><call pos:start="163:5" pos:end="163:48"><name pos:start="163:5" pos:end="163:9">AV_W8</name><argument_list pos:start="163:10" pos:end="163:48">(<argument pos:start="163:11" pos:end="163:16"><expr pos:start="163:11" pos:end="163:16"><name pos:start="163:11" pos:end="163:11">p</name> <operator pos:start="163:13" pos:end="163:13">+</operator> <literal type="number" pos:start="163:15" pos:end="163:16">16</literal></expr></argument>, <argument pos:start="163:19" pos:end="163:47"><expr pos:start="163:19" pos:end="163:47"><name pos:start="163:19" pos:end="163:40"><name pos:start="163:19" pos:end="163:21">sps</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:40">chroma_format_idc</name></name> <operator pos:start="163:42" pos:end="163:42">|</operator> <literal type="number" pos:start="163:44" pos:end="163:47">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="167:5" pos:end="173:7">/*

     * bit(5) reserved = ‘11111’b;

     * unsigned int(3) bitDepthLumaMinus8;

     */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:47"><expr pos:start="175:5" pos:end="175:46"><call pos:start="175:5" pos:end="175:46"><name pos:start="175:5" pos:end="175:9">AV_W8</name><argument_list pos:start="175:10" pos:end="175:46">(<argument pos:start="175:11" pos:end="175:16"><expr pos:start="175:11" pos:end="175:16"><name pos:start="175:11" pos:end="175:11">p</name> <operator pos:start="175:13" pos:end="175:13">+</operator> <literal type="number" pos:start="175:15" pos:end="175:16">17</literal></expr></argument>, <argument pos:start="175:19" pos:end="175:45"><expr pos:start="175:19" pos:end="175:45"><operator pos:start="175:19" pos:end="175:19">(</operator><name pos:start="175:20" pos:end="175:33"><name pos:start="175:20" pos:end="175:22">sps</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:33">bit_depth</name></name> <operator pos:start="175:35" pos:end="175:35">-</operator> <literal type="number" pos:start="175:37" pos:end="175:37">8</literal><operator pos:start="175:38" pos:end="175:38">)</operator> <operator pos:start="175:40" pos:end="175:40">|</operator> <literal type="number" pos:start="175:42" pos:end="175:45">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="185:7">/*

     * bit(5) reserved = ‘11111’b;

     * unsigned int(3) bitDepthChromaMinus8;

     */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:54"><expr pos:start="187:5" pos:end="187:53"><call pos:start="187:5" pos:end="187:53"><name pos:start="187:5" pos:end="187:9">AV_W8</name><argument_list pos:start="187:10" pos:end="187:53">(<argument pos:start="187:11" pos:end="187:16"><expr pos:start="187:11" pos:end="187:16"><name pos:start="187:11" pos:end="187:11">p</name> <operator pos:start="187:13" pos:end="187:13">+</operator> <literal type="number" pos:start="187:15" pos:end="187:16">18</literal></expr></argument>, <argument pos:start="187:19" pos:end="187:52"><expr pos:start="187:19" pos:end="187:52"><operator pos:start="187:19" pos:end="187:19">(</operator><name pos:start="187:20" pos:end="187:40"><name pos:start="187:20" pos:end="187:22">sps</name><operator pos:start="187:23" pos:end="187:24">-&gt;</operator><name pos:start="187:25" pos:end="187:40">bit_depth_chroma</name></name> <operator pos:start="187:42" pos:end="187:42">-</operator> <literal type="number" pos:start="187:44" pos:end="187:44">8</literal><operator pos:start="187:45" pos:end="187:45">)</operator> <operator pos:start="187:47" pos:end="187:47">|</operator> <literal type="number" pos:start="187:49" pos:end="187:52">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:31">/* bit(16) avgFrameRate; */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:23"><expr pos:start="193:5" pos:end="193:22"><call pos:start="193:5" pos:end="193:22"><name pos:start="193:5" pos:end="193:11">AV_WB16</name><argument_list pos:start="193:12" pos:end="193:22">(<argument pos:start="193:13" pos:end="193:18"><expr pos:start="193:13" pos:end="193:18"><name pos:start="193:13" pos:end="193:13">p</name> <operator pos:start="193:15" pos:end="193:15">+</operator> <literal type="number" pos:start="193:17" pos:end="193:18">19</literal></expr></argument>, <argument pos:start="193:21" pos:end="193:21"><expr pos:start="193:21" pos:end="193:21"><literal type="number" pos:start="193:21" pos:end="193:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="197:5" pos:end="207:7">/*

     * bit(2) constantFrameRate;

     * bit(3) numTemporalLayers;

     * bit(1) temporalIdNested;

     * unsigned int(2) lengthSizeMinusOne;

     */</comment>

    <expr_stmt pos:start="209:5" pos:end="215:21"><expr pos:start="209:5" pos:end="215:20"><call pos:start="209:5" pos:end="215:20"><name pos:start="209:5" pos:end="209:9">AV_W8</name><argument_list pos:start="209:10" pos:end="215:20">(<argument pos:start="209:11" pos:end="209:16"><expr pos:start="209:11" pos:end="209:16"><name pos:start="209:11" pos:end="209:11">p</name> <operator pos:start="209:13" pos:end="209:13">+</operator> <literal type="number" pos:start="209:15" pos:end="209:16">21</literal></expr></argument>, <argument pos:start="209:19" pos:end="215:19"><expr pos:start="209:19" pos:end="215:19"><literal type="number" pos:start="209:19" pos:end="209:19">0</literal>                             <operator pos:start="209:49" pos:end="209:50">&lt;&lt;</operator> <literal type="number" pos:start="209:52" pos:end="209:52">6</literal> <operator pos:start="209:54" pos:end="209:54">|</operator>

                  <name pos:start="211:19" pos:end="211:37"><name pos:start="211:19" pos:end="211:21">sps</name><operator pos:start="211:22" pos:end="211:23">-&gt;</operator><name pos:start="211:24" pos:end="211:37">max_sub_layers</name></name>           <operator pos:start="211:49" pos:end="211:50">&lt;&lt;</operator> <literal type="number" pos:start="211:52" pos:end="211:52">3</literal> <operator pos:start="211:54" pos:end="211:54">|</operator>

                  <name pos:start="213:19" pos:end="213:47"><name pos:start="213:19" pos:end="213:21">sps</name><operator pos:start="213:22" pos:end="213:23">-&gt;</operator><name pos:start="213:24" pos:end="213:47">temporal_id_nesting_flag</name></name> <operator pos:start="213:49" pos:end="213:50">&lt;&lt;</operator> <literal type="number" pos:start="213:52" pos:end="213:52">2</literal> <operator pos:start="213:54" pos:end="213:54">|</operator>

                  <literal type="number" pos:start="215:19" pos:end="215:19">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="219:5" pos:end="219:38">/* unsigned int(8) numOfArrays; */</comment>

    <expr_stmt pos:start="221:5" pos:end="221:21"><expr pos:start="221:5" pos:end="221:20"><call pos:start="221:5" pos:end="221:20"><name pos:start="221:5" pos:end="221:9">AV_W8</name><argument_list pos:start="221:10" pos:end="221:20">(<argument pos:start="221:11" pos:end="221:16"><expr pos:start="221:11" pos:end="221:16"><name pos:start="221:11" pos:end="221:11">p</name> <operator pos:start="221:13" pos:end="221:13">+</operator> <literal type="number" pos:start="221:15" pos:end="221:16">22</literal></expr></argument>, <argument pos:start="221:19" pos:end="221:19"><expr pos:start="221:19" pos:end="221:19"><literal type="number" pos:start="221:19" pos:end="221:19">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:12"><expr pos:start="225:5" pos:end="225:11"><name pos:start="225:5" pos:end="225:5">p</name> <operator pos:start="225:7" pos:end="225:8">+=</operator> <literal type="number" pos:start="225:10" pos:end="225:11">23</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="227:5" pos:end="227:13">/* vps */</comment>

    <comment type="block" pos:start="229:5" pos:end="237:7">/*

     * bit(1) array_completeness;

     * unsigned int(1) reserved = 0;

     * unsigned int(6) NAL_unit_type;

     */</comment>

    <expr_stmt pos:start="239:5" pos:end="241:34"><expr pos:start="239:5" pos:end="241:33"><call pos:start="239:5" pos:end="241:33"><name pos:start="239:5" pos:end="239:9">AV_W8</name><argument_list pos:start="239:10" pos:end="241:33">(<argument pos:start="239:11" pos:end="239:11"><expr pos:start="239:11" pos:end="239:11"><name pos:start="239:11" pos:end="239:11">p</name></expr></argument>, <argument pos:start="239:14" pos:end="241:32"><expr pos:start="239:14" pos:end="241:32"><literal type="number" pos:start="239:14" pos:end="239:14">1</literal> <operator pos:start="239:16" pos:end="239:17">&lt;&lt;</operator> <literal type="number" pos:start="239:19" pos:end="239:19">7</literal> <operator pos:start="239:21" pos:end="239:21">|</operator>

             <name pos:start="241:14" pos:end="241:25">HEVC_NAL_VPS</name> <operator pos:start="241:27" pos:end="241:27">&amp;</operator> <literal type="number" pos:start="241:29" pos:end="241:32">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="243:5" pos:end="243:36">/* unsigned int(16) numNalus; */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:22"><expr pos:start="245:5" pos:end="245:21"><call pos:start="245:5" pos:end="245:21"><name pos:start="245:5" pos:end="245:11">AV_WB16</name><argument_list pos:start="245:12" pos:end="245:21">(<argument pos:start="245:13" pos:end="245:17"><expr pos:start="245:13" pos:end="245:17"><name pos:start="245:13" pos:end="245:13">p</name> <operator pos:start="245:15" pos:end="245:15">+</operator> <literal type="number" pos:start="245:17" pos:end="245:17">1</literal></expr></argument>, <argument pos:start="245:20" pos:end="245:20"><expr pos:start="245:20" pos:end="245:20"><literal type="number" pos:start="245:20" pos:end="245:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="247:5" pos:end="247:41">/* unsigned int(16) nalUnitLength; */</comment>

    <expr_stmt pos:start="249:5" pos:end="249:35"><expr pos:start="249:5" pos:end="249:34"><call pos:start="249:5" pos:end="249:34"><name pos:start="249:5" pos:end="249:11">AV_WB16</name><argument_list pos:start="249:12" pos:end="249:34">(<argument pos:start="249:13" pos:end="249:17"><expr pos:start="249:13" pos:end="249:17"><name pos:start="249:13" pos:end="249:13">p</name> <operator pos:start="249:15" pos:end="249:15">+</operator> <literal type="number" pos:start="249:17" pos:end="249:17">3</literal></expr></argument>, <argument pos:start="249:20" pos:end="249:33"><expr pos:start="249:20" pos:end="249:33"><name pos:start="249:20" pos:end="249:33"><name pos:start="249:20" pos:end="249:22">vps</name><operator pos:start="249:23" pos:end="249:24">-&gt;</operator><name pos:start="249:25" pos:end="249:33">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="251:5" pos:end="251:39">/* bit(8*nalUnitLength) nalUnit; */</comment>

    <expr_stmt pos:start="253:5" pos:end="253:45"><expr pos:start="253:5" pos:end="253:44"><call pos:start="253:5" pos:end="253:44"><name pos:start="253:5" pos:end="253:10">memcpy</name><argument_list pos:start="253:11" pos:end="253:44">(<argument pos:start="253:12" pos:end="253:16"><expr pos:start="253:12" pos:end="253:16"><name pos:start="253:12" pos:end="253:12">p</name> <operator pos:start="253:14" pos:end="253:14">+</operator> <literal type="number" pos:start="253:16" pos:end="253:16">5</literal></expr></argument>, <argument pos:start="253:19" pos:end="253:27"><expr pos:start="253:19" pos:end="253:27"><name pos:start="253:19" pos:end="253:27"><name pos:start="253:19" pos:end="253:21">vps</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:27">data</name></name></expr></argument>, <argument pos:start="253:30" pos:end="253:43"><expr pos:start="253:30" pos:end="253:43"><name pos:start="253:30" pos:end="253:43"><name pos:start="253:30" pos:end="253:32">vps</name><operator pos:start="253:33" pos:end="253:34">-&gt;</operator><name pos:start="253:35" pos:end="253:43">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:28"><expr pos:start="255:5" pos:end="255:27"><name pos:start="255:5" pos:end="255:5">p</name> <operator pos:start="255:7" pos:end="255:8">+=</operator> <literal type="number" pos:start="255:10" pos:end="255:12">5</literal> <operator pos:start="255:12" pos:end="255:12">+</operator> <name pos:start="255:14" pos:end="255:27"><name pos:start="255:14" pos:end="255:16">vps</name><operator pos:start="255:17" pos:end="255:18">-&gt;</operator><name pos:start="255:19" pos:end="255:27">data_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="259:5" pos:end="259:13">/* sps */</comment>

    <expr_stmt pos:start="261:5" pos:end="263:34"><expr pos:start="261:5" pos:end="263:33"><call pos:start="261:5" pos:end="263:33"><name pos:start="261:5" pos:end="261:9">AV_W8</name><argument_list pos:start="261:10" pos:end="263:33">(<argument pos:start="261:11" pos:end="261:11"><expr pos:start="261:11" pos:end="261:11"><name pos:start="261:11" pos:end="261:11">p</name></expr></argument>, <argument pos:start="261:14" pos:end="263:32"><expr pos:start="261:14" pos:end="263:32"><literal type="number" pos:start="261:14" pos:end="261:14">1</literal> <operator pos:start="261:16" pos:end="261:17">&lt;&lt;</operator> <literal type="number" pos:start="261:19" pos:end="261:19">7</literal> <operator pos:start="261:21" pos:end="261:21">|</operator>

             <name pos:start="263:14" pos:end="263:25">HEVC_NAL_SPS</name> <operator pos:start="263:27" pos:end="263:27">&amp;</operator> <literal type="number" pos:start="263:29" pos:end="263:32">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:22"><expr pos:start="265:5" pos:end="265:21"><call pos:start="265:5" pos:end="265:21"><name pos:start="265:5" pos:end="265:11">AV_WB16</name><argument_list pos:start="265:12" pos:end="265:21">(<argument pos:start="265:13" pos:end="265:17"><expr pos:start="265:13" pos:end="265:17"><name pos:start="265:13" pos:end="265:13">p</name> <operator pos:start="265:15" pos:end="265:15">+</operator> <literal type="number" pos:start="265:17" pos:end="265:17">1</literal></expr></argument>, <argument pos:start="265:20" pos:end="265:20"><expr pos:start="265:20" pos:end="265:20"><literal type="number" pos:start="265:20" pos:end="265:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:35"><expr pos:start="267:5" pos:end="267:34"><call pos:start="267:5" pos:end="267:34"><name pos:start="267:5" pos:end="267:11">AV_WB16</name><argument_list pos:start="267:12" pos:end="267:34">(<argument pos:start="267:13" pos:end="267:17"><expr pos:start="267:13" pos:end="267:17"><name pos:start="267:13" pos:end="267:13">p</name> <operator pos:start="267:15" pos:end="267:15">+</operator> <literal type="number" pos:start="267:17" pos:end="267:17">3</literal></expr></argument>, <argument pos:start="267:20" pos:end="267:33"><expr pos:start="267:20" pos:end="267:33"><name pos:start="267:20" pos:end="267:33"><name pos:start="267:20" pos:end="267:22">sps</name><operator pos:start="267:23" pos:end="267:24">-&gt;</operator><name pos:start="267:25" pos:end="267:33">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:45"><expr pos:start="269:5" pos:end="269:44"><call pos:start="269:5" pos:end="269:44"><name pos:start="269:5" pos:end="269:10">memcpy</name><argument_list pos:start="269:11" pos:end="269:44">(<argument pos:start="269:12" pos:end="269:16"><expr pos:start="269:12" pos:end="269:16"><name pos:start="269:12" pos:end="269:12">p</name> <operator pos:start="269:14" pos:end="269:14">+</operator> <literal type="number" pos:start="269:16" pos:end="269:16">5</literal></expr></argument>, <argument pos:start="269:19" pos:end="269:27"><expr pos:start="269:19" pos:end="269:27"><name pos:start="269:19" pos:end="269:27"><name pos:start="269:19" pos:end="269:21">sps</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:27">data</name></name></expr></argument>, <argument pos:start="269:30" pos:end="269:43"><expr pos:start="269:30" pos:end="269:43"><name pos:start="269:30" pos:end="269:43"><name pos:start="269:30" pos:end="269:32">sps</name><operator pos:start="269:33" pos:end="269:34">-&gt;</operator><name pos:start="269:35" pos:end="269:43">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:28"><expr pos:start="271:5" pos:end="271:27"><name pos:start="271:5" pos:end="271:5">p</name> <operator pos:start="271:7" pos:end="271:8">+=</operator> <literal type="number" pos:start="271:10" pos:end="271:12">5</literal> <operator pos:start="271:12" pos:end="271:12">+</operator> <name pos:start="271:14" pos:end="271:27"><name pos:start="271:14" pos:end="271:16">sps</name><operator pos:start="271:17" pos:end="271:18">-&gt;</operator><name pos:start="271:19" pos:end="271:27">data_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="275:5" pos:end="275:13">/* pps */</comment>

    <expr_stmt pos:start="277:5" pos:end="279:34"><expr pos:start="277:5" pos:end="279:33"><call pos:start="277:5" pos:end="279:33"><name pos:start="277:5" pos:end="277:9">AV_W8</name><argument_list pos:start="277:10" pos:end="279:33">(<argument pos:start="277:11" pos:end="277:11"><expr pos:start="277:11" pos:end="277:11"><name pos:start="277:11" pos:end="277:11">p</name></expr></argument>, <argument pos:start="277:14" pos:end="279:32"><expr pos:start="277:14" pos:end="279:32"><literal type="number" pos:start="277:14" pos:end="277:14">1</literal> <operator pos:start="277:16" pos:end="277:17">&lt;&lt;</operator> <literal type="number" pos:start="277:19" pos:end="277:19">7</literal> <operator pos:start="277:21" pos:end="277:21">|</operator>

             <name pos:start="279:14" pos:end="279:25">HEVC_NAL_PPS</name> <operator pos:start="279:27" pos:end="279:27">&amp;</operator> <literal type="number" pos:start="279:29" pos:end="279:32">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:28"><expr pos:start="281:5" pos:end="281:27"><call pos:start="281:5" pos:end="281:27"><name pos:start="281:5" pos:end="281:11">AV_WB16</name><argument_list pos:start="281:12" pos:end="281:27">(<argument pos:start="281:13" pos:end="281:17"><expr pos:start="281:13" pos:end="281:17"><name pos:start="281:13" pos:end="281:13">p</name> <operator pos:start="281:15" pos:end="281:15">+</operator> <literal type="number" pos:start="281:17" pos:end="281:17">1</literal></expr></argument>, <argument pos:start="281:20" pos:end="281:26"><expr pos:start="281:20" pos:end="281:26"><name pos:start="281:20" pos:end="281:26">num_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:11"><expr pos:start="283:5" pos:end="283:10"><name pos:start="283:5" pos:end="283:5">p</name> <operator pos:start="283:7" pos:end="283:8">+=</operator> <literal type="number" pos:start="283:10" pos:end="283:10">3</literal></expr>;</expr_stmt>

    <for pos:start="285:5" pos:end="299:5">for <control pos:start="285:9" pos:end="285:39">(<init pos:start="285:10" pos:end="285:15"><expr pos:start="285:10" pos:end="285:14"><name pos:start="285:10" pos:end="285:10">i</name> <operator pos:start="285:12" pos:end="285:12">=</operator> <literal type="number" pos:start="285:14" pos:end="285:14">0</literal></expr>;</init> <condition pos:start="285:17" pos:end="285:34"><expr pos:start="285:17" pos:end="285:33"><name pos:start="285:17" pos:end="285:17">i</name> <operator pos:start="285:19" pos:end="285:19">&lt;</operator> <name pos:start="285:21" pos:end="285:33">MAX_PPS_COUNT</name></expr>;</condition> <incr pos:start="285:36" pos:end="285:38"><expr pos:start="285:36" pos:end="285:38"><name pos:start="285:36" pos:end="285:36">i</name><operator pos:start="285:37" pos:end="285:38">++</operator></expr></incr>)</control> <block pos:start="285:41" pos:end="299:5">{<block_content pos:start="287:9" pos:end="297:9">

        <if_stmt pos:start="287:9" pos:end="297:9"><if pos:start="287:9" pos:end="297:9">if <condition pos:start="287:12" pos:end="287:30">(<expr pos:start="287:13" pos:end="287:29"><name pos:start="287:13" pos:end="287:29"><name pos:start="287:13" pos:end="287:13">h</name><operator pos:start="287:14" pos:end="287:15">-&gt;</operator><name pos:start="287:16" pos:end="287:17">ps</name><operator pos:start="287:18" pos:end="287:18">.</operator><name pos:start="287:19" pos:end="287:26">pps_list</name><index pos:start="287:27" pos:end="287:29">[<expr pos:start="287:28" pos:end="287:28"><name pos:start="287:28" pos:end="287:28">i</name></expr>]</index></name></expr>)</condition> <block pos:start="287:32" pos:end="297:9">{<block_content pos:start="289:13" pos:end="295:36">

            <decl_stmt pos:start="289:13" pos:end="289:74"><decl pos:start="289:13" pos:end="289:73"><type pos:start="289:13" pos:end="289:27"><specifier pos:start="289:13" pos:end="289:17">const</specifier> <name pos:start="289:19" pos:end="289:25">HEVCPPS</name> <modifier pos:start="289:27" pos:end="289:27">*</modifier></type><name pos:start="289:28" pos:end="289:30">pps</name> <init pos:start="289:32" pos:end="289:73">= <expr pos:start="289:34" pos:end="289:73"><operator pos:start="289:34" pos:end="289:34">(</operator><specifier pos:start="289:35" pos:end="289:39">const</specifier> <name pos:start="289:41" pos:end="289:47">HEVCPPS</name> <operator pos:start="289:49" pos:end="289:49">*</operator><operator pos:start="289:50" pos:end="289:50">)</operator><name pos:start="289:51" pos:end="289:67"><name pos:start="289:51" pos:end="289:51">h</name><operator pos:start="289:52" pos:end="289:53">-&gt;</operator><name pos:start="289:54" pos:end="289:55">ps</name><operator pos:start="289:56" pos:end="289:56">.</operator><name pos:start="289:57" pos:end="289:64">pps_list</name><index pos:start="289:65" pos:end="289:67">[<expr pos:start="289:66" pos:end="289:66"><name pos:start="289:66" pos:end="289:66">i</name></expr>]</index></name><operator pos:start="289:68" pos:end="289:69">-&gt;</operator><name pos:start="289:70" pos:end="289:73">data</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:39"><expr pos:start="291:13" pos:end="291:38"><call pos:start="291:13" pos:end="291:38"><name pos:start="291:13" pos:end="291:19">AV_WB16</name><argument_list pos:start="291:20" pos:end="291:38">(<argument pos:start="291:21" pos:end="291:21"><expr pos:start="291:21" pos:end="291:21"><name pos:start="291:21" pos:end="291:21">p</name></expr></argument>, <argument pos:start="291:24" pos:end="291:37"><expr pos:start="291:24" pos:end="291:37"><name pos:start="291:24" pos:end="291:37"><name pos:start="291:24" pos:end="291:26">pps</name><operator pos:start="291:27" pos:end="291:28">-&gt;</operator><name pos:start="291:29" pos:end="291:37">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:53"><expr pos:start="293:13" pos:end="293:52"><call pos:start="293:13" pos:end="293:52"><name pos:start="293:13" pos:end="293:18">memcpy</name><argument_list pos:start="293:19" pos:end="293:52">(<argument pos:start="293:20" pos:end="293:24"><expr pos:start="293:20" pos:end="293:24"><name pos:start="293:20" pos:end="293:20">p</name> <operator pos:start="293:22" pos:end="293:22">+</operator> <literal type="number" pos:start="293:24" pos:end="293:24">2</literal></expr></argument>, <argument pos:start="293:27" pos:end="293:35"><expr pos:start="293:27" pos:end="293:35"><name pos:start="293:27" pos:end="293:35"><name pos:start="293:27" pos:end="293:29">pps</name><operator pos:start="293:30" pos:end="293:31">-&gt;</operator><name pos:start="293:32" pos:end="293:35">data</name></name></expr></argument>, <argument pos:start="293:38" pos:end="293:51"><expr pos:start="293:38" pos:end="293:51"><name pos:start="293:38" pos:end="293:51"><name pos:start="293:38" pos:end="293:40">pps</name><operator pos:start="293:41" pos:end="293:42">-&gt;</operator><name pos:start="293:43" pos:end="293:51">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:36"><expr pos:start="295:13" pos:end="295:35"><name pos:start="295:13" pos:end="295:13">p</name> <operator pos:start="295:15" pos:end="295:16">+=</operator> <literal type="number" pos:start="295:18" pos:end="295:20">2</literal> <operator pos:start="295:20" pos:end="295:20">+</operator> <name pos:start="295:22" pos:end="295:35"><name pos:start="295:22" pos:end="295:24">pps</name><operator pos:start="295:25" pos:end="295:26">-&gt;</operator><name pos:start="295:27" pos:end="295:35">data_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="303:5" pos:end="303:54"><expr pos:start="303:5" pos:end="303:53"><call pos:start="303:5" pos:end="303:53"><name pos:start="303:5" pos:end="303:14">av_assert0</name><argument_list pos:start="303:15" pos:end="303:53">(<argument pos:start="303:16" pos:end="303:52"><expr pos:start="303:16" pos:end="303:52"><name pos:start="303:16" pos:end="303:16">p</name> <operator pos:start="303:18" pos:end="303:18">-</operator> <name pos:start="303:20" pos:end="303:31">vt_extradata</name> <operator pos:start="303:33" pos:end="303:34">==</operator> <name pos:start="303:36" pos:end="303:52">vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:78"><expr pos:start="307:5" pos:end="307:77"><name pos:start="307:5" pos:end="307:8">data</name> <operator pos:start="307:10" pos:end="307:10">=</operator> <call pos:start="307:12" pos:end="307:77"><name pos:start="307:12" pos:end="307:23">CFDataCreate</name><argument_list pos:start="307:24" pos:end="307:77">(<argument pos:start="307:25" pos:end="307:43"><expr pos:start="307:25" pos:end="307:43"><name pos:start="307:25" pos:end="307:43">kCFAllocatorDefault</name></expr></argument>, <argument pos:start="307:46" pos:end="307:57"><expr pos:start="307:46" pos:end="307:57"><name pos:start="307:46" pos:end="307:57">vt_extradata</name></expr></argument>, <argument pos:start="307:60" pos:end="307:76"><expr pos:start="307:60" pos:end="307:76"><name pos:start="307:60" pos:end="307:76">vt_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:26"><expr pos:start="309:5" pos:end="309:25"><call pos:start="309:5" pos:end="309:25"><name pos:start="309:5" pos:end="309:11">av_free</name><argument_list pos:start="309:12" pos:end="309:25">(<argument pos:start="309:13" pos:end="309:24"><expr pos:start="309:13" pos:end="309:24"><name pos:start="309:13" pos:end="309:24">vt_extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="311:5" pos:end="311:16">return <expr pos:start="311:12" pos:end="311:15"><name pos:start="311:12" pos:end="311:15">data</name></expr>;</return>

</block_content>}</block></function>
</unit>
