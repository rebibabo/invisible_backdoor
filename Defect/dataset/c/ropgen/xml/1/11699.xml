<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11699.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">set_sensor_evt_enable</name><parameter_list pos:start="1:34" pos:end="7:59">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:44">IPMIBmcSim</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ibs</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:41">uint8_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">cmd</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:68"><decl pos:start="3:49" pos:end="3:68"><type pos:start="3:49" pos:end="3:68"><name pos:start="3:49" pos:end="3:56">unsigned</name> <name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:68">cmd_len</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:46"><decl pos:start="5:35" pos:end="5:46"><type pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">rsp</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:69"><decl pos:start="5:49" pos:end="5:69"><type pos:start="5:49" pos:end="5:69"><name pos:start="5:49" pos:end="5:56">unsigned</name> <name pos:start="5:58" pos:end="5:60">int</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:69">rsp_len</name></decl></parameter>,

                                  <parameter pos:start="7:35" pos:end="7:58"><decl pos:start="7:35" pos:end="7:58"><type pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:42">unsigned</name> <name pos:start="7:44" pos:end="7:46">int</name></type> <name pos:start="7:48" pos:end="7:58">max_rsp_len</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="101:1">{<block_content pos:start="11:5" pos:end="99:45">

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">IPMISensor</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:20">sens</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:22">IPMI_CHECK_CMD_LEN</name><argument_list pos:start="15:23" pos:end="15:25">(<argument pos:start="15:24" pos:end="15:24"><expr pos:start="15:24" pos:end="15:24"><literal type="number" pos:start="15:24" pos:end="15:24">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="19:60">(<expr pos:start="17:9" pos:end="19:59"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:15"><name pos:start="17:10" pos:end="17:12">cmd</name><index pos:start="17:13" pos:end="17:15">[<expr pos:start="17:14" pos:end="17:14"><literal type="number" pos:start="17:14" pos:end="17:14">2</literal></expr>]</index></name> <operator pos:start="17:17" pos:end="17:17">&gt;</operator> <name pos:start="17:19" pos:end="17:29">MAX_SENSORS</name><operator pos:start="17:30" pos:end="17:30">)</operator> <operator pos:start="17:32" pos:end="17:33">||</operator>

            <operator pos:start="19:13" pos:end="19:13">!</operator><call pos:start="19:14" pos:end="19:59"><name pos:start="19:14" pos:end="19:36">IPMI_SENSOR_GET_PRESENT</name><argument_list pos:start="19:37" pos:end="19:59">(<argument pos:start="19:38" pos:end="19:58"><expr pos:start="19:38" pos:end="19:58"><name pos:start="19:38" pos:end="19:49"><name pos:start="19:38" pos:end="19:40">ibs</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:49">sensors</name></name> <operator pos:start="19:51" pos:end="19:51">+</operator> <name pos:start="19:53" pos:end="19:58"><name pos:start="19:53" pos:end="19:55">cmd</name><index pos:start="19:56" pos:end="19:58">[<expr pos:start="19:57" pos:end="19:57"><literal type="number" pos:start="19:57" pos:end="19:57">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:62" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:47"><expr pos:start="21:9" pos:end="21:46"><name pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:11">rsp</name><index pos:start="21:12" pos:end="21:14">[<expr pos:start="21:13" pos:end="21:13"><literal type="number" pos:start="21:13" pos:end="21:13">2</literal></expr>]</index></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:46">IPMI_CC_REQ_ENTRY_NOT_PRESENT</name></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:8">sens</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:23"><name pos:start="27:12" pos:end="27:14">ibs</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">sensors</name></name> <operator pos:start="27:25" pos:end="27:25">+</operator> <name pos:start="27:27" pos:end="27:32"><name pos:start="27:27" pos:end="27:29">cmd</name><index pos:start="27:30" pos:end="27:32">[<expr pos:start="27:31" pos:end="27:31"><literal type="number" pos:start="27:31" pos:end="27:31">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="97:5">switch <condition pos:start="29:12" pos:end="29:32">(<expr pos:start="29:13" pos:end="29:31"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:19"><name pos:start="29:14" pos:end="29:16">cmd</name><index pos:start="29:17" pos:end="29:19">[<expr pos:start="29:18" pos:end="29:18"><literal type="number" pos:start="29:18" pos:end="29:18">3</literal></expr>]</index></name> <operator pos:start="29:21" pos:end="29:22">&gt;&gt;</operator> <literal type="number" pos:start="29:24" pos:end="29:24">4</literal><operator pos:start="29:25" pos:end="29:25">)</operator> <operator pos:start="29:27" pos:end="29:27">&amp;</operator> <literal type="number" pos:start="29:29" pos:end="29:31">0x3</literal></expr>)</condition> <block pos:start="29:34" pos:end="97:5">{<block_content pos:start="31:5" pos:end="95:15">

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>:</case> <comment type="block" pos:start="31:13" pos:end="31:31">/* Do not change */</comment>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:11">case <expr pos:start="35:10" pos:end="35:10"><literal type="number" pos:start="35:10" pos:end="35:10">1</literal></expr>:</case> <comment type="block" pos:start="35:13" pos:end="35:29">/* Enable bits */</comment>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:24">(<expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:19">cmd_len</name> <operator pos:start="37:21" pos:end="37:21">&gt;</operator> <literal type="number" pos:start="37:23" pos:end="37:23">4</literal></expr>)</condition> <block pos:start="37:26" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:42">

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:16">sens</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:31">assert_enable</name></name> <operator pos:start="39:33" pos:end="39:34">|=</operator> <name pos:start="39:36" pos:end="39:41"><name pos:start="39:36" pos:end="39:38">cmd</name><index pos:start="39:39" pos:end="39:41">[<expr pos:start="39:40" pos:end="39:40"><literal type="number" pos:start="39:40" pos:end="39:40">4</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:19">cmd_len</name> <operator pos:start="43:21" pos:end="43:21">&gt;</operator> <literal type="number" pos:start="43:23" pos:end="43:23">5</literal></expr>)</condition> <block pos:start="43:26" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:47">

            <expr_stmt pos:start="45:13" pos:end="45:47"><expr pos:start="45:13" pos:end="45:46"><name pos:start="45:13" pos:end="45:31"><name pos:start="45:13" pos:end="45:16">sens</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:31">assert_enable</name></name> <operator pos:start="45:33" pos:end="45:34">|=</operator> <name pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:38">cmd</name><index pos:start="45:39" pos:end="45:41">[<expr pos:start="45:40" pos:end="45:40"><literal type="number" pos:start="45:40" pos:end="45:40">5</literal></expr>]</index></name> <operator pos:start="45:43" pos:end="45:44">&lt;&lt;</operator> <literal type="number" pos:start="45:46" pos:end="45:46">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:19">cmd_len</name> <operator pos:start="49:21" pos:end="49:21">&gt;</operator> <literal type="number" pos:start="49:23" pos:end="49:23">6</literal></expr>)</condition> <block pos:start="49:26" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:44">

            <expr_stmt pos:start="51:13" pos:end="51:44"><expr pos:start="51:13" pos:end="51:43"><name pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:16">sens</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:33">deassert_enable</name></name> <operator pos:start="51:35" pos:end="51:36">|=</operator> <name pos:start="51:38" pos:end="51:43"><name pos:start="51:38" pos:end="51:40">cmd</name><index pos:start="51:41" pos:end="51:43">[<expr pos:start="51:42" pos:end="51:42"><literal type="number" pos:start="51:42" pos:end="51:42">6</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:24">(<expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:19">cmd_len</name> <operator pos:start="55:21" pos:end="55:21">&gt;</operator> <literal type="number" pos:start="55:23" pos:end="55:23">7</literal></expr>)</condition> <block pos:start="55:26" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:49">

            <expr_stmt pos:start="57:13" pos:end="57:49"><expr pos:start="57:13" pos:end="57:48"><name pos:start="57:13" pos:end="57:33"><name pos:start="57:13" pos:end="57:16">sens</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:33">deassert_enable</name></name> <operator pos:start="57:35" pos:end="57:36">|=</operator> <name pos:start="57:38" pos:end="57:43"><name pos:start="57:38" pos:end="57:40">cmd</name><index pos:start="57:41" pos:end="57:43">[<expr pos:start="57:42" pos:end="57:42"><literal type="number" pos:start="57:42" pos:end="57:42">7</literal></expr>]</index></name> <operator pos:start="57:45" pos:end="57:46">&lt;&lt;</operator> <literal type="number" pos:start="57:48" pos:end="57:48">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:11">case <expr pos:start="63:10" pos:end="63:10"><literal type="number" pos:start="63:10" pos:end="63:10">2</literal></expr>:</case> <comment type="block" pos:start="63:13" pos:end="63:30">/* Disable bits */</comment>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:24">(<expr pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:19">cmd_len</name> <operator pos:start="65:21" pos:end="65:21">&gt;</operator> <literal type="number" pos:start="65:23" pos:end="65:23">4</literal></expr>)</condition> <block pos:start="65:26" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:43">

            <expr_stmt pos:start="67:13" pos:end="67:43"><expr pos:start="67:13" pos:end="67:42"><name pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:16">sens</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:31">assert_enable</name></name> <operator pos:start="67:33" pos:end="67:34">&amp;=</operator> <operator pos:start="67:36" pos:end="67:36">~</operator><name pos:start="67:37" pos:end="67:42"><name pos:start="67:37" pos:end="67:39">cmd</name><index pos:start="67:40" pos:end="67:42">[<expr pos:start="67:41" pos:end="67:41"><literal type="number" pos:start="67:41" pos:end="67:41">4</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:24">(<expr pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:19">cmd_len</name> <operator pos:start="71:21" pos:end="71:21">&gt;</operator> <literal type="number" pos:start="71:23" pos:end="71:23">5</literal></expr>)</condition> <block pos:start="71:26" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:50">

            <expr_stmt pos:start="73:13" pos:end="73:50"><expr pos:start="73:13" pos:end="73:49"><name pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:16">sens</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:31">assert_enable</name></name> <operator pos:start="73:33" pos:end="73:34">&amp;=</operator> <operator pos:start="73:36" pos:end="73:36">~</operator><operator pos:start="73:37" pos:end="73:37">(</operator><name pos:start="73:38" pos:end="73:43"><name pos:start="73:38" pos:end="73:40">cmd</name><index pos:start="73:41" pos:end="73:43">[<expr pos:start="73:42" pos:end="73:42"><literal type="number" pos:start="73:42" pos:end="73:42">5</literal></expr>]</index></name> <operator pos:start="73:45" pos:end="73:46">&lt;&lt;</operator> <literal type="number" pos:start="73:48" pos:end="73:48">8</literal><operator pos:start="73:49" pos:end="73:49">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:24">(<expr pos:start="77:13" pos:end="77:23"><name pos:start="77:13" pos:end="77:19">cmd_len</name> <operator pos:start="77:21" pos:end="77:21">&gt;</operator> <literal type="number" pos:start="77:23" pos:end="77:23">6</literal></expr>)</condition> <block pos:start="77:26" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:45">

            <expr_stmt pos:start="79:13" pos:end="79:45"><expr pos:start="79:13" pos:end="79:44"><name pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:16">sens</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:33">deassert_enable</name></name> <operator pos:start="79:35" pos:end="79:36">&amp;=</operator> <operator pos:start="79:38" pos:end="79:38">~</operator><name pos:start="79:39" pos:end="79:44"><name pos:start="79:39" pos:end="79:41">cmd</name><index pos:start="79:42" pos:end="79:44">[<expr pos:start="79:43" pos:end="79:43"><literal type="number" pos:start="79:43" pos:end="79:43">6</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:24">(<expr pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:19">cmd_len</name> <operator pos:start="83:21" pos:end="83:21">&gt;</operator> <literal type="number" pos:start="83:23" pos:end="83:23">7</literal></expr>)</condition> <block pos:start="83:26" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:52">

            <expr_stmt pos:start="85:13" pos:end="85:52"><expr pos:start="85:13" pos:end="85:51"><name pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:16">sens</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:33">deassert_enable</name></name> <operator pos:start="85:35" pos:end="85:36">&amp;=</operator> <operator pos:start="85:38" pos:end="85:38">~</operator><operator pos:start="85:39" pos:end="85:39">(</operator><name pos:start="85:40" pos:end="85:45"><name pos:start="85:40" pos:end="85:42">cmd</name><index pos:start="85:43" pos:end="85:45">[<expr pos:start="85:44" pos:end="85:44"><literal type="number" pos:start="85:44" pos:end="85:44">7</literal></expr>]</index></name> <operator pos:start="85:47" pos:end="85:48">&lt;&lt;</operator> <literal type="number" pos:start="85:50" pos:end="85:50">8</literal><operator pos:start="85:51" pos:end="85:51">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:11">case <expr pos:start="91:10" pos:end="91:10"><literal type="number" pos:start="91:10" pos:end="91:10">3</literal></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:44"><expr pos:start="93:9" pos:end="93:43"><name pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:11">rsp</name><index pos:start="93:12" pos:end="93:14">[<expr pos:start="93:13" pos:end="93:13"><literal type="number" pos:start="93:13" pos:end="93:13">2</literal></expr>]</index></name> <operator pos:start="93:16" pos:end="93:16">=</operator> <name pos:start="93:18" pos:end="93:43">IPMI_CC_INVALID_DATA_FIELD</name></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:15">return;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="99:5" pos:end="99:45"><expr pos:start="99:5" pos:end="99:44"><call pos:start="99:5" pos:end="99:44"><name pos:start="99:5" pos:end="99:30">IPMI_SENSOR_SET_RET_STATUS</name><argument_list pos:start="99:31" pos:end="99:44">(<argument pos:start="99:32" pos:end="99:35"><expr pos:start="99:32" pos:end="99:35"><name pos:start="99:32" pos:end="99:35">sens</name></expr></argument>, <argument pos:start="99:38" pos:end="99:43"><expr pos:start="99:38" pos:end="99:43"><name pos:start="99:38" pos:end="99:43"><name pos:start="99:38" pos:end="99:40">cmd</name><index pos:start="99:41" pos:end="99:43">[<expr pos:start="99:42" pos:end="99:42"><literal type="number" pos:start="99:42" pos:end="99:42">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
