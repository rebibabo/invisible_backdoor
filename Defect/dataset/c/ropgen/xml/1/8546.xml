<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8546.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">digic_uart_write</name><parameter_list pos:start="1:29" pos:end="3:43">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:49">hwaddr</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:70"><decl pos:start="1:57" pos:end="1:70"><type pos:start="1:57" pos:end="1:70"><name pos:start="1:57" pos:end="1:64">uint64_t</name></type> <name pos:start="1:66" pos:end="1:70">value</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:37">unsigned</name></type> <name pos:start="3:39" pos:end="3:42">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:5">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">DigicUartState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:20">ch</name> <init pos:start="9:22" pos:end="9:28">= <expr pos:start="9:24" pos:end="9:28"><name pos:start="9:24" pos:end="9:28">value</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:15"><expr pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:8">addr</name> <operator pos:start="13:10" pos:end="13:12">&gt;&gt;=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">2</literal></expr>;</expr_stmt>



    <switch pos:start="17:5" pos:end="69:5">switch <condition pos:start="17:12" pos:end="17:17">(<expr pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">addr</name></expr>)</condition> <block pos:start="17:19" pos:end="69:5">{<block_content pos:start="19:5" pos:end="67:49">

    <case pos:start="19:5" pos:end="19:14">case <expr pos:start="19:10" pos:end="19:13"><name pos:start="19:10" pos:end="19:13">R_TX</name></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:19">(<expr pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:18">chr</name></name></expr>)</condition> <block pos:start="21:21" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:50">



            <expr_stmt pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:49"><call pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:33">qemu_chr_fe_write_all</name><argument_list pos:start="25:34" pos:end="25:49">(<argument pos:start="25:35" pos:end="25:40"><expr pos:start="25:35" pos:end="25:40"><name pos:start="25:35" pos:end="25:40"><name pos:start="25:35" pos:end="25:35">s</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:40">chr</name></name></expr></argument>, <argument pos:start="25:43" pos:end="25:45"><expr pos:start="25:43" pos:end="25:45"><operator pos:start="25:43" pos:end="25:43">&amp;</operator><name pos:start="25:44" pos:end="25:45">ch</name></expr></argument>, <argument pos:start="25:48" pos:end="25:48"><expr pos:start="25:48" pos:end="25:48"><literal type="number" pos:start="25:48" pos:end="25:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>



    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><name pos:start="33:10" pos:end="33:13">R_ST</name></expr>:</case>

        <comment type="block" pos:start="35:9" pos:end="55:11">/*

         * Ignore write to R_ST.

         *

         * The point is that this register is actively used

         * during receiving and transmitting symbols,

         * but we don't know the function of most of bits.

         *

         * Ignoring writes to R_ST is only a simplification

         * of the model. It has no perceptible side effects

         * for existing guests.

         */</comment>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <default pos:start="61:5" pos:end="61:12">default:</default>

        <expr_stmt pos:start="63:9" pos:end="67:49"><expr pos:start="63:9" pos:end="67:48"><call pos:start="63:9" pos:end="67:48"><name pos:start="63:9" pos:end="63:21">qemu_log_mask</name><argument_list pos:start="63:22" pos:end="67:48">(<argument pos:start="63:23" pos:end="63:31"><expr pos:start="63:23" pos:end="63:31"><name pos:start="63:23" pos:end="63:31">LOG_UNIMP</name></expr></argument>,

                      <argument pos:start="65:23" pos:end="67:36"><expr pos:start="65:23" pos:end="67:36"><literal type="string" pos:start="65:23" pos:end="65:71">"digic-uart: write access to unknown register 0x"</literal>

                      <name pos:start="67:23" pos:end="67:36">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="67:39" pos:end="67:47"><expr pos:start="67:39" pos:end="67:47"><name pos:start="67:39" pos:end="67:42">addr</name> <operator pos:start="67:44" pos:end="67:45">&lt;&lt;</operator> <literal type="number" pos:start="67:47" pos:end="67:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function></unit>
