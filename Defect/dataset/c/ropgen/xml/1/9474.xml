<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9474.c" pos:tabs="8"><function pos:start="1:1" pos:end="271:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">encode_mode</name><parameter_list pos:start="1:23" pos:end="1:136">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><name pos:start="1:24" pos:end="1:40">CinepakEncContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:50"><decl pos:start="1:46" pos:end="1:50"><type pos:start="1:46" pos:end="1:50"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:50">h</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:75"><decl pos:start="1:53" pos:end="1:75"><type pos:start="1:53" pos:end="1:75"><name pos:start="1:53" pos:end="1:61">AVPicture</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:75">scratch_pict</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:97"><decl pos:start="1:78" pos:end="1:97"><type pos:start="1:78" pos:end="1:97"><name pos:start="1:78" pos:end="1:86">AVPicture</name> <modifier pos:start="1:88" pos:end="1:88">*</modifier></type><name pos:start="1:89" pos:end="1:97">last_pict</name></decl></parameter>, <parameter pos:start="1:100" pos:end="1:115"><decl pos:start="1:100" pos:end="1:115"><type pos:start="1:100" pos:end="1:115"><name pos:start="1:100" pos:end="1:109">strip_info</name> <modifier pos:start="1:111" pos:end="1:111">*</modifier></type><name pos:start="1:112" pos:end="1:115">info</name></decl></parameter>, <parameter pos:start="1:118" pos:end="1:135"><decl pos:start="1:118" pos:end="1:135"><type pos:start="1:118" pos:end="1:135"><name pos:start="1:118" pos:end="1:125">unsigned</name> <name pos:start="1:127" pos:end="1:130">char</name> <modifier pos:start="1:132" pos:end="1:132">*</modifier></type><name pos:start="1:133" pos:end="1:135">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="271:1">{<block_content pos:start="5:5" pos:end="269:15">

    <decl_stmt pos:start="5:5" pos:end="5:92"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">y</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">z</name></decl>, <decl pos:start="5:18" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:22">flags</name></decl>, <decl pos:start="5:25" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:28">bits</name></decl>, <decl pos:start="5:31" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:31" pos:end="5:39">temp_size</name></decl>, <decl pos:start="5:42" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:42" pos:end="5:51">header_ofs</name></decl>, <decl pos:start="5:54" pos:end="5:60"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:54" pos:end="5:56">ret</name> <init pos:start="5:58" pos:end="5:60">= <expr pos:start="5:60" pos:end="5:60"><literal type="number" pos:start="5:60" pos:end="5:60">0</literal></expr></init></decl>, <decl pos:start="5:63" pos:end="5:91"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:63" pos:end="5:70">mb_count</name> <init pos:start="5:72" pos:end="5:91">= <expr pos:start="5:74" pos:end="5:91"><name pos:start="5:74" pos:end="5:77"><name pos:start="5:74" pos:end="5:74">s</name><operator pos:start="5:75" pos:end="5:76">-&gt;</operator><name pos:start="5:77" pos:end="5:77">w</name></name> <operator pos:start="5:79" pos:end="5:79">*</operator> <name pos:start="5:81" pos:end="5:81">h</name> <operator pos:start="5:83" pos:end="5:83">/</operator> <name pos:start="5:85" pos:end="5:91">MB_AREA</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:23">needs_extra_bit</name></decl>, <decl pos:start="7:26" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:42">should_write_temp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:26"><name pos:start="9:19" pos:end="9:22">temp</name><index pos:start="9:23" pos:end="9:26">[<expr pos:start="9:24" pos:end="9:25"><literal type="number" pos:start="9:24" pos:end="9:25">64</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:start="9:29" pos:end="9:69">//32/2 = 16 V4 blocks at 4 B each -&gt; 64 B</comment>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">mb_info</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:15">mb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">AVPicture</name></type> <name pos:start="13:15" pos:end="13:25">sub_scratch</name></decl>, <decl pos:start="13:28" pos:end="13:35"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:28" pos:end="13:35">sub_last</name></decl>;</decl_stmt>



    <comment type="line" pos:start="17:5" pos:end="17:22">//encode codebooks</comment>

<comment type="line" format="doxygen" pos:start="19:1" pos:end="19:67">////// MacOS vintage decoder compatibility dictates the presence of</comment>

<comment type="line" format="doxygen" pos:start="21:1" pos:end="21:74">////// the codebook chunk even when the codebook is empty - pretty dumb...</comment>

<comment type="line" format="doxygen" pos:start="23:1" pos:end="23:62">////// and also the certain order of the codebook chunks -- rl</comment>

    <if_stmt pos:start="25:5" pos:end="27:91"><if pos:start="25:5" pos:end="27:91">if<condition pos:start="25:7" pos:end="25:42">(<expr pos:start="25:8" pos:end="25:41"><name pos:start="25:8" pos:end="25:20"><name pos:start="25:8" pos:end="25:11">info</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:20">v4_size</name></name> <operator pos:start="25:22" pos:end="25:23">||</operator> <operator pos:start="25:25" pos:end="25:25">!</operator><name pos:start="25:26" pos:end="25:41"><name pos:start="25:26" pos:end="25:26">s</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:41">skip_empty_cb</name></name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:91"><block_content pos:start="27:9" pos:end="27:91">

        <expr_stmt pos:start="27:9" pos:end="27:91"><expr pos:start="27:9" pos:end="27:90"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:14">+=</operator> <call pos:start="27:16" pos:end="27:90"><name pos:start="27:16" pos:end="27:30">encode_codebook</name><argument_list pos:start="27:31" pos:end="27:90">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">s</name></expr></argument>, <argument pos:start="27:35" pos:end="27:51"><expr pos:start="27:35" pos:end="27:51"><name pos:start="27:35" pos:end="27:51"><name pos:start="27:35" pos:end="27:38">info</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:51">v4_codebook</name></name></expr></argument>, <argument pos:start="27:54" pos:end="27:66"><expr pos:start="27:54" pos:end="27:66"><name pos:start="27:54" pos:end="27:66"><name pos:start="27:54" pos:end="27:57">info</name><operator pos:start="27:58" pos:end="27:59">-&gt;</operator><name pos:start="27:60" pos:end="27:66">v4_size</name></name></expr></argument>, <argument pos:start="27:69" pos:end="27:72"><expr pos:start="27:69" pos:end="27:72"><literal type="number" pos:start="27:69" pos:end="27:72">0x20</literal></expr></argument>, <argument pos:start="27:75" pos:end="27:78"><expr pos:start="27:75" pos:end="27:78"><literal type="number" pos:start="27:75" pos:end="27:78">0x24</literal></expr></argument>, <argument pos:start="27:81" pos:end="27:89"><expr pos:start="27:81" pos:end="27:89"><name pos:start="27:81" pos:end="27:83">buf</name> <operator pos:start="27:85" pos:end="27:85">+</operator> <name pos:start="27:87" pos:end="27:89">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="33:91"><if pos:start="31:5" pos:end="33:91">if<condition pos:start="31:7" pos:end="31:42">(<expr pos:start="31:8" pos:end="31:41"><name pos:start="31:8" pos:end="31:20"><name pos:start="31:8" pos:end="31:11">info</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:20">v1_size</name></name> <operator pos:start="31:22" pos:end="31:23">||</operator> <operator pos:start="31:25" pos:end="31:25">!</operator><name pos:start="31:26" pos:end="31:41"><name pos:start="31:26" pos:end="31:26">s</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:41">skip_empty_cb</name></name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:91"><block_content pos:start="33:9" pos:end="33:91">

        <expr_stmt pos:start="33:9" pos:end="33:91"><expr pos:start="33:9" pos:end="33:90"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:14">+=</operator> <call pos:start="33:16" pos:end="33:90"><name pos:start="33:16" pos:end="33:30">encode_codebook</name><argument_list pos:start="33:31" pos:end="33:90">(<argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><name pos:start="33:32" pos:end="33:32">s</name></expr></argument>, <argument pos:start="33:35" pos:end="33:51"><expr pos:start="33:35" pos:end="33:51"><name pos:start="33:35" pos:end="33:51"><name pos:start="33:35" pos:end="33:38">info</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:51">v1_codebook</name></name></expr></argument>, <argument pos:start="33:54" pos:end="33:66"><expr pos:start="33:54" pos:end="33:66"><name pos:start="33:54" pos:end="33:66"><name pos:start="33:54" pos:end="33:57">info</name><operator pos:start="33:58" pos:end="33:59">-&gt;</operator><name pos:start="33:60" pos:end="33:66">v1_size</name></name></expr></argument>, <argument pos:start="33:69" pos:end="33:72"><expr pos:start="33:69" pos:end="33:72"><literal type="number" pos:start="33:69" pos:end="33:72">0x22</literal></expr></argument>, <argument pos:start="33:75" pos:end="33:78"><expr pos:start="33:75" pos:end="33:78"><literal type="number" pos:start="33:75" pos:end="33:78">0x26</literal></expr></argument>, <argument pos:start="33:81" pos:end="33:89"><expr pos:start="33:81" pos:end="33:89"><name pos:start="33:81" pos:end="33:83">buf</name> <operator pos:start="33:85" pos:end="33:85">+</operator> <name pos:start="33:87" pos:end="33:89">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="37:5" pos:end="37:28">//update scratch picture</comment>

    <for pos:start="39:5" pos:end="67:5">for<control pos:start="39:8" pos:end="39:39">(<init pos:start="39:9" pos:end="39:18"><expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:9">z</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <name pos:start="39:13" pos:end="39:13">y</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</init> <condition pos:start="39:20" pos:end="39:25"><expr pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:20">y</name> <operator pos:start="39:22" pos:end="39:22">&lt;</operator> <name pos:start="39:24" pos:end="39:24">h</name></expr>;</condition> <incr pos:start="39:27" pos:end="39:38"><expr pos:start="39:27" pos:end="39:38"><name pos:start="39:27" pos:end="39:27">y</name> <operator pos:start="39:29" pos:end="39:30">+=</operator> <name pos:start="39:32" pos:end="39:38">MB_SIZE</name></expr></incr>)</control> <block pos:start="39:41" pos:end="67:5">{<block_content pos:start="41:9" pos:end="65:9">

        <for pos:start="41:9" pos:end="65:9">for<control pos:start="41:12" pos:end="41:47">(<init pos:start="41:13" pos:end="41:18"><expr pos:start="41:13" pos:end="41:17"><name pos:start="41:13" pos:end="41:13">x</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>;</init> <condition pos:start="41:20" pos:end="41:28"><expr pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:20">x</name> <operator pos:start="41:22" pos:end="41:22">&lt;</operator> <name pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:24">s</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:27">w</name></name></expr>;</condition> <incr pos:start="41:30" pos:end="41:46"><expr pos:start="41:30" pos:end="41:41"><name pos:start="41:30" pos:end="41:30">x</name> <operator pos:start="41:32" pos:end="41:33">+=</operator> <name pos:start="41:35" pos:end="41:41">MB_SIZE</name></expr><operator pos:start="41:42" pos:end="41:42">,</operator> <expr pos:start="41:44" pos:end="41:46"><name pos:start="41:44" pos:end="41:44">z</name><operator pos:start="41:45" pos:end="41:46">++</operator></expr></incr>)</control> <block pos:start="41:49" pos:end="65:9">{<block_content pos:start="43:13" pos:end="63:71">

            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:14">mb</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:26"><name pos:start="43:19" pos:end="43:19">s</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:23">mb</name><index pos:start="43:24" pos:end="43:26">[<expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">z</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="47:13" pos:end="47:65"><expr pos:start="47:13" pos:end="47:64"><call pos:start="47:13" pos:end="47:64"><name pos:start="47:13" pos:end="47:27">get_sub_picture</name><argument_list pos:start="47:28" pos:end="47:64">(<argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><name pos:start="47:29" pos:end="47:29">s</name></expr></argument>, <argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><name pos:start="47:32" pos:end="47:32">x</name></expr></argument>, <argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">y</name></expr></argument>, <argument pos:start="47:38" pos:end="47:49"><expr pos:start="47:38" pos:end="47:49"><name pos:start="47:38" pos:end="47:49">scratch_pict</name></expr></argument>, <argument pos:start="47:52" pos:end="47:63"><expr pos:start="47:52" pos:end="47:63"><operator pos:start="47:52" pos:end="47:52">&amp;</operator><name pos:start="47:53" pos:end="47:63">sub_scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="51:13" pos:end="63:71"><if pos:start="51:13" pos:end="57:13">if<condition pos:start="51:15" pos:end="51:70">(<expr pos:start="51:16" pos:end="51:69"><name pos:start="51:16" pos:end="51:25"><name pos:start="51:16" pos:end="51:19">info</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:25">mode</name></name> <operator pos:start="51:27" pos:end="51:28">==</operator> <name pos:start="51:30" pos:end="51:36">MODE_MC</name> <operator pos:start="51:38" pos:end="51:39">&amp;&amp;</operator> <name pos:start="51:41" pos:end="51:57"><name pos:start="51:41" pos:end="51:42">mb</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:57">best_encoding</name></name> <operator pos:start="51:59" pos:end="51:60">==</operator> <name pos:start="51:62" pos:end="51:69">ENC_SKIP</name></expr>)</condition> <block pos:start="51:72" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:52">

                <expr_stmt pos:start="53:17" pos:end="53:63"><expr pos:start="53:17" pos:end="53:62"><call pos:start="53:17" pos:end="53:62"><name pos:start="53:17" pos:end="53:31">get_sub_picture</name><argument_list pos:start="53:32" pos:end="53:62">(<argument pos:start="53:33" pos:end="53:33"><expr pos:start="53:33" pos:end="53:33"><name pos:start="53:33" pos:end="53:33">s</name></expr></argument>, <argument pos:start="53:36" pos:end="53:36"><expr pos:start="53:36" pos:end="53:36"><name pos:start="53:36" pos:end="53:36">x</name></expr></argument>, <argument pos:start="53:39" pos:end="53:39"><expr pos:start="53:39" pos:end="53:39"><name pos:start="53:39" pos:end="53:39">y</name></expr></argument>, <argument pos:start="53:42" pos:end="53:50"><expr pos:start="53:42" pos:end="53:50"><name pos:start="53:42" pos:end="53:50">last_pict</name></expr></argument>, <argument pos:start="53:53" pos:end="53:61"><expr pos:start="53:53" pos:end="53:61"><operator pos:start="53:53" pos:end="53:53">&amp;</operator><name pos:start="53:54" pos:end="53:61">sub_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:52"><expr pos:start="55:17" pos:end="55:51"><call pos:start="55:17" pos:end="55:51"><name pos:start="55:17" pos:end="55:23">copy_mb</name><argument_list pos:start="55:24" pos:end="55:51">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">s</name></expr></argument>, <argument pos:start="55:28" pos:end="55:39"><expr pos:start="55:28" pos:end="55:39"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:39">sub_scratch</name></expr></argument>, <argument pos:start="55:42" pos:end="55:50"><expr pos:start="55:42" pos:end="55:50"><operator pos:start="55:42" pos:end="55:42">&amp;</operator><name pos:start="55:43" pos:end="55:50">sub_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="59:71">else if<condition pos:start="57:22" pos:end="57:80">(<expr pos:start="57:23" pos:end="57:79"><name pos:start="57:23" pos:end="57:32"><name pos:start="57:23" pos:end="57:26">info</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:32">mode</name></name> <operator pos:start="57:34" pos:end="57:35">==</operator> <name pos:start="57:37" pos:end="57:48">MODE_V1_ONLY</name> <operator pos:start="57:50" pos:end="57:51">||</operator> <name pos:start="57:53" pos:end="57:69"><name pos:start="57:53" pos:end="57:54">mb</name><operator pos:start="57:55" pos:end="57:56">-&gt;</operator><name pos:start="57:57" pos:end="57:69">best_encoding</name></name> <operator pos:start="57:71" pos:end="57:72">==</operator> <name pos:start="57:74" pos:end="57:79">ENC_V1</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:71"><block_content pos:start="59:17" pos:end="59:71">

                <expr_stmt pos:start="59:17" pos:end="59:71"><expr pos:start="59:17" pos:end="59:70"><call pos:start="59:17" pos:end="59:70"><name pos:start="59:17" pos:end="59:32">decode_v1_vector</name><argument_list pos:start="59:33" pos:end="59:70">(<argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><name pos:start="59:34" pos:end="59:34">s</name></expr></argument>, <argument pos:start="59:37" pos:end="59:48"><expr pos:start="59:37" pos:end="59:48"><operator pos:start="59:37" pos:end="59:37">&amp;</operator><name pos:start="59:38" pos:end="59:48">sub_scratch</name></expr></argument>, <argument pos:start="59:51" pos:end="59:63"><expr pos:start="59:51" pos:end="59:63"><name pos:start="59:51" pos:end="59:63"><name pos:start="59:51" pos:end="59:52">mb</name><operator pos:start="59:53" pos:end="59:54">-&gt;</operator><name pos:start="59:55" pos:end="59:63">v1_vector</name></name></expr></argument>, <argument pos:start="59:66" pos:end="59:69"><expr pos:start="59:66" pos:end="59:69"><name pos:start="59:66" pos:end="59:69">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="61:13" pos:end="63:71">else<block type="pseudo" pos:start="63:17" pos:end="63:71"><block_content pos:start="63:17" pos:end="63:71">

                <expr_stmt pos:start="63:17" pos:end="63:71"><expr pos:start="63:17" pos:end="63:70"><call pos:start="63:17" pos:end="63:70"><name pos:start="63:17" pos:end="63:32">decode_v4_vector</name><argument_list pos:start="63:33" pos:end="63:70">(<argument pos:start="63:34" pos:end="63:34"><expr pos:start="63:34" pos:end="63:34"><name pos:start="63:34" pos:end="63:34">s</name></expr></argument>, <argument pos:start="63:37" pos:end="63:48"><expr pos:start="63:37" pos:end="63:48"><operator pos:start="63:37" pos:end="63:37">&amp;</operator><name pos:start="63:38" pos:end="63:48">sub_scratch</name></expr></argument>, <argument pos:start="63:51" pos:end="63:63"><expr pos:start="63:51" pos:end="63:63"><name pos:start="63:51" pos:end="63:63"><name pos:start="63:51" pos:end="63:52">mb</name><operator pos:start="63:53" pos:end="63:54">-&gt;</operator><name pos:start="63:55" pos:end="63:63">v4_vector</name></name></expr></argument>, <argument pos:start="63:66" pos:end="63:69"><expr pos:start="63:66" pos:end="63:69"><name pos:start="63:66" pos:end="63:69">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <switch pos:start="71:5" pos:end="265:5">switch<condition pos:start="71:11" pos:end="71:22">(<expr pos:start="71:12" pos:end="71:21"><name pos:start="71:12" pos:end="71:21"><name pos:start="71:12" pos:end="71:15">info</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:21">mode</name></name></expr>)</condition> <block pos:start="71:24" pos:end="265:5">{<block_content pos:start="73:5" pos:end="263:14">

    <case pos:start="73:5" pos:end="73:22">case <expr pos:start="73:10" pos:end="73:21"><name pos:start="73:10" pos:end="73:21">MODE_V1_ONLY</name></expr>:</case>

        <comment type="line" pos:start="75:9" pos:end="75:69">//av_log(s-&gt;avctx, AV_LOG_INFO, "mb_count = %i\n", mb_count);</comment>

        <expr_stmt pos:start="77:9" pos:end="77:61"><expr pos:start="77:9" pos:end="77:60"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:14">+=</operator> <call pos:start="77:16" pos:end="77:60"><name pos:start="77:16" pos:end="77:33">write_chunk_header</name><argument_list pos:start="77:34" pos:end="77:60">(<argument pos:start="77:35" pos:end="77:43"><expr pos:start="77:35" pos:end="77:43"><name pos:start="77:35" pos:end="77:37">buf</name> <operator pos:start="77:39" pos:end="77:39">+</operator> <name pos:start="77:41" pos:end="77:43">ret</name></expr></argument>, <argument pos:start="77:46" pos:end="77:49"><expr pos:start="77:46" pos:end="77:49"><literal type="number" pos:start="77:46" pos:end="77:49">0x32</literal></expr></argument>, <argument pos:start="77:52" pos:end="77:59"><expr pos:start="77:52" pos:end="77:59"><name pos:start="77:52" pos:end="77:59">mb_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="81:9" pos:end="83:44">for<control pos:start="81:12" pos:end="81:37">(<init pos:start="81:13" pos:end="81:18"><expr pos:start="81:13" pos:end="81:17"><name pos:start="81:13" pos:end="81:13">x</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <literal type="number" pos:start="81:17" pos:end="81:17">0</literal></expr>;</init> <condition pos:start="81:20" pos:end="81:32"><expr pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:20">x</name> <operator pos:start="81:22" pos:end="81:22">&lt;</operator> <name pos:start="81:24" pos:end="81:31">mb_count</name></expr>;</condition> <incr pos:start="81:34" pos:end="81:36"><expr pos:start="81:34" pos:end="81:36"><name pos:start="81:34" pos:end="81:34">x</name><operator pos:start="81:35" pos:end="81:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="83:13" pos:end="83:44"><block_content pos:start="83:13" pos:end="83:44">

            <expr_stmt pos:start="83:13" pos:end="83:44"><expr pos:start="83:13" pos:end="83:43"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:15">buf</name><index pos:start="83:16" pos:end="83:22">[<expr pos:start="83:17" pos:end="83:21"><name pos:start="83:17" pos:end="83:19">ret</name><operator pos:start="83:20" pos:end="83:21">++</operator></expr>]</index></name> <operator pos:start="83:24" pos:end="83:24">=</operator> <name pos:start="83:26" pos:end="83:33"><name pos:start="83:26" pos:end="83:26">s</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:30">mb</name><index pos:start="83:31" pos:end="83:33">[<expr pos:start="83:32" pos:end="83:32"><name pos:start="83:32" pos:end="83:32">x</name></expr>]</index></name><operator pos:start="83:34" pos:end="83:34">.</operator><name pos:start="83:35" pos:end="83:43">v1_vector</name></expr>;</expr_stmt></block_content></block></for>



        <break pos:start="87:9" pos:end="87:14">break;</break>

    <case pos:start="89:5" pos:end="89:20">case <expr pos:start="89:10" pos:end="89:19"><name pos:start="89:10" pos:end="89:19">MODE_V1_V4</name></expr>:</case>

        <comment type="line" pos:start="91:9" pos:end="91:34">//remember header position</comment>

        <expr_stmt pos:start="93:9" pos:end="93:25"><expr pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:18">header_ofs</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:24">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:14">+=</operator> <name pos:start="95:16" pos:end="95:32">CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>



        <for pos:start="99:9" pos:end="135:9">for<control pos:start="99:12" pos:end="99:41">(<init pos:start="99:13" pos:end="99:18"><expr pos:start="99:13" pos:end="99:17"><name pos:start="99:13" pos:end="99:13">x</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <literal type="number" pos:start="99:17" pos:end="99:17">0</literal></expr>;</init> <condition pos:start="99:20" pos:end="99:32"><expr pos:start="99:20" pos:end="99:31"><name pos:start="99:20" pos:end="99:20">x</name> <operator pos:start="99:22" pos:end="99:22">&lt;</operator> <name pos:start="99:24" pos:end="99:31">mb_count</name></expr>;</condition> <incr pos:start="99:34" pos:end="99:40"><expr pos:start="99:34" pos:end="99:40"><name pos:start="99:34" pos:end="99:34">x</name> <operator pos:start="99:36" pos:end="99:37">+=</operator> <literal type="number" pos:start="99:39" pos:end="99:40">32</literal></expr></incr>)</control> <block pos:start="99:43" pos:end="135:9">{<block_content pos:start="101:13" pos:end="133:13">

            <expr_stmt pos:start="101:13" pos:end="101:22"><expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:17">flags</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>;</expr_stmt>

            <for pos:start="103:13" pos:end="107:47">for<control pos:start="103:16" pos:end="103:54">(<init pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:21"><name pos:start="103:17" pos:end="103:17">y</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:21">x</name></expr>;</init> <condition pos:start="103:24" pos:end="103:49"><expr pos:start="103:24" pos:end="103:48"><name pos:start="103:24" pos:end="103:24">y</name> <operator pos:start="103:26" pos:end="103:26">&lt;</operator> <call pos:start="103:28" pos:end="103:48"><name pos:start="103:28" pos:end="103:32">FFMIN</name><argument_list pos:start="103:33" pos:end="103:48">(<argument pos:start="103:34" pos:end="103:37"><expr pos:start="103:34" pos:end="103:37"><name pos:start="103:34" pos:end="103:34">x</name><operator pos:start="103:35" pos:end="103:35">+</operator><literal type="number" pos:start="103:36" pos:end="103:37">32</literal></expr></argument>, <argument pos:start="103:40" pos:end="103:47"><expr pos:start="103:40" pos:end="103:47"><name pos:start="103:40" pos:end="103:47">mb_count</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="103:51" pos:end="103:53"><expr pos:start="103:51" pos:end="103:53"><name pos:start="103:51" pos:end="103:51">y</name><operator pos:start="103:52" pos:end="103:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="105:17" pos:end="107:47"><block_content pos:start="105:17" pos:end="107:47">

                <if_stmt pos:start="105:17" pos:end="107:47"><if pos:start="105:17" pos:end="107:47">if<condition pos:start="105:19" pos:end="105:52">(<expr pos:start="105:20" pos:end="105:51"><name pos:start="105:20" pos:end="105:27"><name pos:start="105:20" pos:end="105:20">s</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:24">mb</name><index pos:start="105:25" pos:end="105:27">[<expr pos:start="105:26" pos:end="105:26"><name pos:start="105:26" pos:end="105:26">y</name></expr>]</index></name><operator pos:start="105:28" pos:end="105:28">.</operator><name pos:start="105:29" pos:end="105:41">best_encoding</name> <operator pos:start="105:43" pos:end="105:44">==</operator> <name pos:start="105:46" pos:end="105:51">ENC_V4</name></expr>)</condition><block type="pseudo" pos:start="107:21" pos:end="107:47"><block_content pos:start="107:21" pos:end="107:47">

                    <expr_stmt pos:start="107:21" pos:end="107:47"><expr pos:start="107:21" pos:end="107:46"><name pos:start="107:21" pos:end="107:25">flags</name> <operator pos:start="107:27" pos:end="107:28">|=</operator> <literal type="number" pos:start="107:30" pos:end="107:30">1</literal> <operator pos:start="107:32" pos:end="107:33">&lt;&lt;</operator> <operator pos:start="107:35" pos:end="107:35">(</operator><literal type="number" pos:start="107:36" pos:end="107:39">31</literal> <operator pos:start="107:39" pos:end="107:39">-</operator> <name pos:start="107:41" pos:end="107:41">y</name> <operator pos:start="107:43" pos:end="107:43">+</operator> <name pos:start="107:45" pos:end="107:45">x</name><operator pos:start="107:46" pos:end="107:46">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



            <expr_stmt pos:start="111:13" pos:end="111:38"><expr pos:start="111:13" pos:end="111:37"><call pos:start="111:13" pos:end="111:37"><name pos:start="111:13" pos:end="111:19">AV_WB32</name><argument_list pos:start="111:20" pos:end="111:37">(<argument pos:start="111:21" pos:end="111:29"><expr pos:start="111:21" pos:end="111:29"><operator pos:start="111:21" pos:end="111:21">&amp;</operator><name pos:start="111:22" pos:end="111:29"><name pos:start="111:22" pos:end="111:24">buf</name><index pos:start="111:25" pos:end="111:29">[<expr pos:start="111:26" pos:end="111:28"><name pos:start="111:26" pos:end="111:28">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="111:32" pos:end="111:36"><expr pos:start="111:32" pos:end="111:36"><name pos:start="111:32" pos:end="111:36">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:21"><expr pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:15">ret</name> <operator pos:start="113:17" pos:end="113:18">+=</operator> <literal type="number" pos:start="113:20" pos:end="113:20">4</literal></expr>;</expr_stmt>



            <for pos:start="117:13" pos:end="133:13">for<control pos:start="117:16" pos:end="117:54">(<init pos:start="117:17" pos:end="117:22"><expr pos:start="117:17" pos:end="117:21"><name pos:start="117:17" pos:end="117:17">y</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:21">x</name></expr>;</init> <condition pos:start="117:24" pos:end="117:49"><expr pos:start="117:24" pos:end="117:48"><name pos:start="117:24" pos:end="117:24">y</name> <operator pos:start="117:26" pos:end="117:26">&lt;</operator> <call pos:start="117:28" pos:end="117:48"><name pos:start="117:28" pos:end="117:32">FFMIN</name><argument_list pos:start="117:33" pos:end="117:48">(<argument pos:start="117:34" pos:end="117:37"><expr pos:start="117:34" pos:end="117:37"><name pos:start="117:34" pos:end="117:34">x</name><operator pos:start="117:35" pos:end="117:35">+</operator><literal type="number" pos:start="117:36" pos:end="117:37">32</literal></expr></argument>, <argument pos:start="117:40" pos:end="117:47"><expr pos:start="117:40" pos:end="117:47"><name pos:start="117:40" pos:end="117:47">mb_count</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="117:51" pos:end="117:53"><expr pos:start="117:51" pos:end="117:53"><name pos:start="117:51" pos:end="117:51">y</name><operator pos:start="117:52" pos:end="117:53">++</operator></expr></incr>)</control> <block pos:start="117:56" pos:end="133:13">{<block_content pos:start="119:17" pos:end="131:54">

                <expr_stmt pos:start="119:17" pos:end="119:31"><expr pos:start="119:17" pos:end="119:30"><name pos:start="119:17" pos:end="119:18">mb</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <operator pos:start="119:22" pos:end="119:22">&amp;</operator><name pos:start="119:23" pos:end="119:30"><name pos:start="119:23" pos:end="119:23">s</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:27">mb</name><index pos:start="119:28" pos:end="119:30">[<expr pos:start="119:29" pos:end="119:29"><name pos:start="119:29" pos:end="119:29">y</name></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="123:17" pos:end="131:54"><if pos:start="123:17" pos:end="125:47">if<condition pos:start="123:19" pos:end="123:47">(<expr pos:start="123:20" pos:end="123:46"><name pos:start="123:20" pos:end="123:36"><name pos:start="123:20" pos:end="123:21">mb</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:36">best_encoding</name></name> <operator pos:start="123:38" pos:end="123:39">==</operator> <name pos:start="123:41" pos:end="123:46">ENC_V1</name></expr>)</condition><block type="pseudo" pos:start="125:21" pos:end="125:47"><block_content pos:start="125:21" pos:end="125:47">

                    <expr_stmt pos:start="125:21" pos:end="125:47"><expr pos:start="125:21" pos:end="125:46"><name pos:start="125:21" pos:end="125:30"><name pos:start="125:21" pos:end="125:23">buf</name><index pos:start="125:24" pos:end="125:30">[<expr pos:start="125:25" pos:end="125:29"><name pos:start="125:25" pos:end="125:27">ret</name><operator pos:start="125:28" pos:end="125:29">++</operator></expr>]</index></name> <operator pos:start="125:32" pos:end="125:32">=</operator> <name pos:start="125:34" pos:end="125:46"><name pos:start="125:34" pos:end="125:35">mb</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:46">v1_vector</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="127:17" pos:end="131:54">else<block type="pseudo" pos:start="129:21" pos:end="131:54"><block_content pos:start="129:21" pos:end="131:54">

                    <for pos:start="129:21" pos:end="131:54">for<control pos:start="129:24" pos:end="129:42">(<init pos:start="129:25" pos:end="129:30"><expr pos:start="129:25" pos:end="129:29"><name pos:start="129:25" pos:end="129:25">z</name> <operator pos:start="129:27" pos:end="129:27">=</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>;</init> <condition pos:start="129:32" pos:end="129:37"><expr pos:start="129:32" pos:end="129:36"><name pos:start="129:32" pos:end="129:32">z</name> <operator pos:start="129:34" pos:end="129:34">&lt;</operator> <literal type="number" pos:start="129:36" pos:end="129:36">4</literal></expr>;</condition> <incr pos:start="129:39" pos:end="129:41"><expr pos:start="129:39" pos:end="129:41"><name pos:start="129:39" pos:end="129:39">z</name><operator pos:start="129:40" pos:end="129:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="131:25" pos:end="131:54"><block_content pos:start="131:25" pos:end="131:54">

                        <expr_stmt pos:start="131:25" pos:end="131:54"><expr pos:start="131:25" pos:end="131:53"><name pos:start="131:25" pos:end="131:34"><name pos:start="131:25" pos:end="131:27">buf</name><index pos:start="131:28" pos:end="131:34">[<expr pos:start="131:29" pos:end="131:33"><name pos:start="131:29" pos:end="131:31">ret</name><operator pos:start="131:32" pos:end="131:33">++</operator></expr>]</index></name> <operator pos:start="131:36" pos:end="131:36">=</operator> <name pos:start="131:38" pos:end="131:53"><name pos:start="131:38" pos:end="131:39">mb</name><operator pos:start="131:40" pos:end="131:41">-&gt;</operator><name pos:start="131:42" pos:end="131:50">v4_vector</name><index pos:start="131:51" pos:end="131:53">[<expr pos:start="131:52" pos:end="131:52"><name pos:start="131:52" pos:end="131:52">z</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <expr_stmt pos:start="139:9" pos:end="139:89"><expr pos:start="139:9" pos:end="139:88"><call pos:start="139:9" pos:end="139:88"><name pos:start="139:9" pos:end="139:26">write_chunk_header</name><argument_list pos:start="139:27" pos:end="139:88">(<argument pos:start="139:28" pos:end="139:43"><expr pos:start="139:28" pos:end="139:43"><name pos:start="139:28" pos:end="139:30">buf</name> <operator pos:start="139:32" pos:end="139:32">+</operator> <name pos:start="139:34" pos:end="139:43">header_ofs</name></expr></argument>, <argument pos:start="139:46" pos:end="139:49"><expr pos:start="139:46" pos:end="139:49"><literal type="number" pos:start="139:46" pos:end="139:49">0x30</literal></expr></argument>, <argument pos:start="139:52" pos:end="139:87"><expr pos:start="139:52" pos:end="139:87"><name pos:start="139:52" pos:end="139:54">ret</name> <operator pos:start="139:56" pos:end="139:56">-</operator> <name pos:start="139:58" pos:end="139:67">header_ofs</name> <operator pos:start="139:69" pos:end="139:69">-</operator> <name pos:start="139:71" pos:end="139:87">CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:17">case <expr pos:start="145:10" pos:end="145:16"><name pos:start="145:10" pos:end="145:16">MODE_MC</name></expr>:</case>

        <comment type="line" pos:start="147:9" pos:end="147:34">//remember header position</comment>

        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:18">header_ofs</name> <operator pos:start="149:20" pos:end="149:20">=</operator> <name pos:start="149:22" pos:end="149:24">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:33"><expr pos:start="151:9" pos:end="151:32"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:14">+=</operator> <name pos:start="151:16" pos:end="151:32">CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:37"><expr pos:start="153:9" pos:end="153:36"><name pos:start="153:9" pos:end="153:13">flags</name> <operator pos:start="153:15" pos:end="153:15">=</operator> <name pos:start="153:17" pos:end="153:20">bits</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <name pos:start="153:24" pos:end="153:32">temp_size</name> <operator pos:start="153:34" pos:end="153:34">=</operator> <literal type="number" pos:start="153:36" pos:end="153:36">0</literal></expr>;</expr_stmt>



        <for pos:start="157:9" pos:end="241:9">for<control pos:start="157:12" pos:end="157:37">(<init pos:start="157:13" pos:end="157:18"><expr pos:start="157:13" pos:end="157:17"><name pos:start="157:13" pos:end="157:13">x</name> <operator pos:start="157:15" pos:end="157:15">=</operator> <literal type="number" pos:start="157:17" pos:end="157:17">0</literal></expr>;</init> <condition pos:start="157:20" pos:end="157:32"><expr pos:start="157:20" pos:end="157:31"><name pos:start="157:20" pos:end="157:20">x</name> <operator pos:start="157:22" pos:end="157:22">&lt;</operator> <name pos:start="157:24" pos:end="157:31">mb_count</name></expr>;</condition> <incr pos:start="157:34" pos:end="157:36"><expr pos:start="157:34" pos:end="157:36"><name pos:start="157:34" pos:end="157:34">x</name><operator pos:start="157:35" pos:end="157:36">++</operator></expr></incr>)</control> <block pos:start="157:39" pos:end="241:9">{<block_content pos:start="159:13" pos:end="239:13">

            <expr_stmt pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:14">mb</name> <operator pos:start="159:16" pos:end="159:16">=</operator> <operator pos:start="159:18" pos:end="159:18">&amp;</operator><name pos:start="159:19" pos:end="159:26"><name pos:start="159:19" pos:end="159:19">s</name><operator pos:start="159:20" pos:end="159:21">-&gt;</operator><name pos:start="159:22" pos:end="159:23">mb</name><index pos:start="159:24" pos:end="159:26">[<expr pos:start="159:25" pos:end="159:25"><name pos:start="159:25" pos:end="159:25">x</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:70"><expr pos:start="161:13" pos:end="161:69"><name pos:start="161:13" pos:end="161:17">flags</name> <operator pos:start="161:19" pos:end="161:20">|=</operator> <operator pos:start="161:22" pos:end="161:22">(</operator><name pos:start="161:23" pos:end="161:39"><name pos:start="161:23" pos:end="161:24">mb</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:39">best_encoding</name></name> <operator pos:start="161:41" pos:end="161:42">!=</operator> <name pos:start="161:44" pos:end="161:51">ENC_SKIP</name><operator pos:start="161:52" pos:end="161:52">)</operator> <operator pos:start="161:54" pos:end="161:55">&lt;&lt;</operator> <operator pos:start="161:57" pos:end="161:57">(</operator><literal type="number" pos:start="161:58" pos:end="161:61">31</literal> <operator pos:start="161:61" pos:end="161:61">-</operator> <name pos:start="161:63" pos:end="161:66">bits</name><operator pos:start="161:67" pos:end="161:68">++</operator><operator pos:start="161:69" pos:end="161:69">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:32"><expr pos:start="163:13" pos:end="163:31"><name pos:start="163:13" pos:end="163:27">needs_extra_bit</name> <operator pos:start="163:29" pos:end="163:29">=</operator> <literal type="number" pos:start="163:31" pos:end="163:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:34"><expr pos:start="165:13" pos:end="165:33"><name pos:start="165:13" pos:end="165:29">should_write_temp</name> <operator pos:start="165:31" pos:end="165:31">=</operator> <literal type="number" pos:start="165:33" pos:end="165:33">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="169:13" pos:end="179:13"><if pos:start="169:13" pos:end="179:13">if<condition pos:start="169:15" pos:end="169:45">(<expr pos:start="169:16" pos:end="169:44"><name pos:start="169:16" pos:end="169:32"><name pos:start="169:16" pos:end="169:17">mb</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:32">best_encoding</name></name> <operator pos:start="169:34" pos:end="169:35">!=</operator> <name pos:start="169:37" pos:end="169:44">ENC_SKIP</name></expr>)</condition> <block pos:start="169:47" pos:end="179:13">{<block_content pos:start="171:17" pos:end="177:40">

                <if_stmt pos:start="171:17" pos:end="177:40"><if pos:start="171:17" pos:end="173:76">if<condition pos:start="171:19" pos:end="171:29">(<expr pos:start="171:20" pos:end="171:28"><name pos:start="171:20" pos:end="171:23">bits</name> <operator pos:start="171:25" pos:end="171:25">&lt;</operator> <literal type="number" pos:start="171:27" pos:end="171:28">32</literal></expr>)</condition><block type="pseudo" pos:start="173:21" pos:end="173:76"><block_content pos:start="173:21" pos:end="173:76">

                    <expr_stmt pos:start="173:21" pos:end="173:76"><expr pos:start="173:21" pos:end="173:75"><name pos:start="173:21" pos:end="173:25">flags</name> <operator pos:start="173:27" pos:end="173:28">|=</operator> <operator pos:start="173:30" pos:end="173:30">(</operator><name pos:start="173:31" pos:end="173:47"><name pos:start="173:31" pos:end="173:32">mb</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:47">best_encoding</name></name> <operator pos:start="173:49" pos:end="173:50">==</operator> <name pos:start="173:52" pos:end="173:57">ENC_V4</name><operator pos:start="173:58" pos:end="173:58">)</operator> <operator pos:start="173:60" pos:end="173:61">&lt;&lt;</operator> <operator pos:start="173:63" pos:end="173:63">(</operator><literal type="number" pos:start="173:64" pos:end="173:67">31</literal> <operator pos:start="173:67" pos:end="173:67">-</operator> <name pos:start="173:69" pos:end="173:72">bits</name><operator pos:start="173:73" pos:end="173:74">++</operator><operator pos:start="173:75" pos:end="173:75">)</operator></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="175:17" pos:end="177:40">else<block type="pseudo" pos:start="177:21" pos:end="177:40"><block_content pos:start="177:21" pos:end="177:40">

                    <expr_stmt pos:start="177:21" pos:end="177:40"><expr pos:start="177:21" pos:end="177:39"><name pos:start="177:21" pos:end="177:35">needs_extra_bit</name> <operator pos:start="177:37" pos:end="177:37">=</operator> <literal type="number" pos:start="177:39" pos:end="177:39">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="183:13" pos:end="205:13"><if pos:start="183:13" pos:end="205:13">if<condition pos:start="183:15" pos:end="183:26">(<expr pos:start="183:16" pos:end="183:25"><name pos:start="183:16" pos:end="183:19">bits</name> <operator pos:start="183:21" pos:end="183:22">==</operator> <literal type="number" pos:start="183:24" pos:end="183:25">32</literal></expr>)</condition> <block pos:start="183:28" pos:end="205:13">{<block_content pos:start="185:17" pos:end="203:42">

                <expr_stmt pos:start="185:17" pos:end="185:42"><expr pos:start="185:17" pos:end="185:41"><call pos:start="185:17" pos:end="185:41"><name pos:start="185:17" pos:end="185:23">AV_WB32</name><argument_list pos:start="185:24" pos:end="185:41">(<argument pos:start="185:25" pos:end="185:33"><expr pos:start="185:25" pos:end="185:33"><operator pos:start="185:25" pos:end="185:25">&amp;</operator><name pos:start="185:26" pos:end="185:33"><name pos:start="185:26" pos:end="185:28">buf</name><index pos:start="185:29" pos:end="185:33">[<expr pos:start="185:30" pos:end="185:32"><name pos:start="185:30" pos:end="185:32">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="185:36" pos:end="185:40"><expr pos:start="185:36" pos:end="185:40"><name pos:start="185:36" pos:end="185:40">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:25"><expr pos:start="187:17" pos:end="187:24"><name pos:start="187:17" pos:end="187:19">ret</name> <operator pos:start="187:21" pos:end="187:22">+=</operator> <literal type="number" pos:start="187:24" pos:end="187:24">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:33"><expr pos:start="189:17" pos:end="189:32"><name pos:start="189:17" pos:end="189:21">flags</name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:28">bits</name> <operator pos:start="189:30" pos:end="189:30">=</operator> <literal type="number" pos:start="189:32" pos:end="189:32">0</literal></expr>;</expr_stmt>



                <if_stmt pos:start="193:17" pos:end="203:42"><if pos:start="193:17" pos:end="201:17">if<condition pos:start="193:19" pos:end="193:68">(<expr pos:start="193:20" pos:end="193:67"><name pos:start="193:20" pos:end="193:36"><name pos:start="193:20" pos:end="193:21">mb</name><operator pos:start="193:22" pos:end="193:23">-&gt;</operator><name pos:start="193:24" pos:end="193:36">best_encoding</name></name> <operator pos:start="193:38" pos:end="193:39">==</operator> <name pos:start="193:41" pos:end="193:48">ENC_SKIP</name> <operator pos:start="193:50" pos:end="193:51">||</operator> <name pos:start="193:53" pos:end="193:67">needs_extra_bit</name></expr>)</condition> <block pos:start="193:70" pos:end="201:17">{<block_content pos:start="195:21" pos:end="199:34">

                    <expr_stmt pos:start="195:21" pos:end="195:55"><expr pos:start="195:21" pos:end="195:54"><call pos:start="195:21" pos:end="195:54"><name pos:start="195:21" pos:end="195:26">memcpy</name><argument_list pos:start="195:27" pos:end="195:54">(<argument pos:start="195:28" pos:end="195:36"><expr pos:start="195:28" pos:end="195:36"><operator pos:start="195:28" pos:end="195:28">&amp;</operator><name pos:start="195:29" pos:end="195:36"><name pos:start="195:29" pos:end="195:31">buf</name><index pos:start="195:32" pos:end="195:36">[<expr pos:start="195:33" pos:end="195:35"><name pos:start="195:33" pos:end="195:35">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="195:39" pos:end="195:42"><expr pos:start="195:39" pos:end="195:42"><name pos:start="195:39" pos:end="195:42">temp</name></expr></argument>, <argument pos:start="195:45" pos:end="195:53"><expr pos:start="195:45" pos:end="195:53"><name pos:start="195:45" pos:end="195:53">temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:37"><expr pos:start="197:21" pos:end="197:36"><name pos:start="197:21" pos:end="197:23">ret</name> <operator pos:start="197:25" pos:end="197:26">+=</operator> <name pos:start="197:28" pos:end="197:36">temp_size</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="199:21" pos:end="199:34"><expr pos:start="199:21" pos:end="199:33"><name pos:start="199:21" pos:end="199:29">temp_size</name> <operator pos:start="199:31" pos:end="199:31">=</operator> <literal type="number" pos:start="199:33" pos:end="199:33">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="201:19" pos:end="203:42">else<block type="pseudo" pos:start="203:21" pos:end="203:42"><block_content pos:start="203:21" pos:end="203:42">

                    <expr_stmt pos:start="203:21" pos:end="203:42"><expr pos:start="203:21" pos:end="203:41"><name pos:start="203:21" pos:end="203:37">should_write_temp</name> <operator pos:start="203:39" pos:end="203:39">=</operator> <literal type="number" pos:start="203:41" pos:end="203:41">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="209:13" pos:end="215:13"><if pos:start="209:13" pos:end="215:13">if<condition pos:start="209:15" pos:end="209:31">(<expr pos:start="209:16" pos:end="209:30"><name pos:start="209:16" pos:end="209:30">needs_extra_bit</name></expr>)</condition> <block pos:start="209:33" pos:end="215:13">{<block_content pos:start="211:17" pos:end="213:25">

                <expr_stmt pos:start="211:17" pos:end="211:60"><expr pos:start="211:17" pos:end="211:59"><name pos:start="211:17" pos:end="211:21">flags</name> <operator pos:start="211:23" pos:end="211:23">=</operator> <operator pos:start="211:25" pos:end="211:25">(</operator><name pos:start="211:26" pos:end="211:42"><name pos:start="211:26" pos:end="211:27">mb</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:42">best_encoding</name></name> <operator pos:start="211:44" pos:end="211:45">==</operator> <name pos:start="211:47" pos:end="211:52">ENC_V4</name><operator pos:start="211:53" pos:end="211:53">)</operator> <operator pos:start="211:55" pos:end="211:56">&lt;&lt;</operator> <literal type="number" pos:start="211:58" pos:end="211:59">31</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:25"><expr pos:start="213:17" pos:end="213:24"><name pos:start="213:17" pos:end="213:20">bits</name> <operator pos:start="213:22" pos:end="213:22">=</operator> <literal type="number" pos:start="213:24" pos:end="213:24">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="219:13" pos:end="227:57"><if pos:start="219:13" pos:end="221:50">if<condition pos:start="219:15" pos:end="219:43">(<expr pos:start="219:16" pos:end="219:42"><name pos:start="219:16" pos:end="219:32"><name pos:start="219:16" pos:end="219:17">mb</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:32">best_encoding</name></name> <operator pos:start="219:34" pos:end="219:35">==</operator> <name pos:start="219:37" pos:end="219:42">ENC_V1</name></expr>)</condition><block type="pseudo" pos:start="221:17" pos:end="221:50"><block_content pos:start="221:17" pos:end="221:50">

                <expr_stmt pos:start="221:17" pos:end="221:50"><expr pos:start="221:17" pos:end="221:49"><name pos:start="221:17" pos:end="221:33"><name pos:start="221:17" pos:end="221:20">temp</name><index pos:start="221:21" pos:end="221:33">[<expr pos:start="221:22" pos:end="221:32"><name pos:start="221:22" pos:end="221:30">temp_size</name><operator pos:start="221:31" pos:end="221:32">++</operator></expr>]</index></name> <operator pos:start="221:35" pos:end="221:35">=</operator> <name pos:start="221:37" pos:end="221:49"><name pos:start="221:37" pos:end="221:38">mb</name><operator pos:start="221:39" pos:end="221:40">-&gt;</operator><name pos:start="221:41" pos:end="221:49">v1_vector</name></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="223:13" pos:end="227:57">else if<condition pos:start="223:20" pos:end="223:48">(<expr pos:start="223:21" pos:end="223:47"><name pos:start="223:21" pos:end="223:37"><name pos:start="223:21" pos:end="223:22">mb</name><operator pos:start="223:23" pos:end="223:24">-&gt;</operator><name pos:start="223:25" pos:end="223:37">best_encoding</name></name> <operator pos:start="223:39" pos:end="223:40">==</operator> <name pos:start="223:42" pos:end="223:47">ENC_V4</name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="227:57"><block_content pos:start="225:17" pos:end="227:57">

                <for pos:start="225:17" pos:end="227:57">for<control pos:start="225:20" pos:end="225:38">(<init pos:start="225:21" pos:end="225:26"><expr pos:start="225:21" pos:end="225:25"><name pos:start="225:21" pos:end="225:21">z</name> <operator pos:start="225:23" pos:end="225:23">=</operator> <literal type="number" pos:start="225:25" pos:end="225:25">0</literal></expr>;</init> <condition pos:start="225:28" pos:end="225:33"><expr pos:start="225:28" pos:end="225:32"><name pos:start="225:28" pos:end="225:28">z</name> <operator pos:start="225:30" pos:end="225:30">&lt;</operator> <literal type="number" pos:start="225:32" pos:end="225:32">4</literal></expr>;</condition> <incr pos:start="225:35" pos:end="225:37"><expr pos:start="225:35" pos:end="225:37"><name pos:start="225:35" pos:end="225:35">z</name><operator pos:start="225:36" pos:end="225:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="227:21" pos:end="227:57"><block_content pos:start="227:21" pos:end="227:57">

                    <expr_stmt pos:start="227:21" pos:end="227:57"><expr pos:start="227:21" pos:end="227:56"><name pos:start="227:21" pos:end="227:37"><name pos:start="227:21" pos:end="227:24">temp</name><index pos:start="227:25" pos:end="227:37">[<expr pos:start="227:26" pos:end="227:36"><name pos:start="227:26" pos:end="227:34">temp_size</name><operator pos:start="227:35" pos:end="227:36">++</operator></expr>]</index></name> <operator pos:start="227:39" pos:end="227:39">=</operator> <name pos:start="227:41" pos:end="227:56"><name pos:start="227:41" pos:end="227:42">mb</name><operator pos:start="227:43" pos:end="227:44">-&gt;</operator><name pos:start="227:45" pos:end="227:53">v4_vector</name><index pos:start="227:54" pos:end="227:56">[<expr pos:start="227:55" pos:end="227:55"><name pos:start="227:55" pos:end="227:55">z</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



            <if_stmt pos:start="231:13" pos:end="239:13"><if pos:start="231:13" pos:end="239:13">if<condition pos:start="231:15" pos:end="231:33">(<expr pos:start="231:16" pos:end="231:32"><name pos:start="231:16" pos:end="231:32">should_write_temp</name></expr>)</condition> <block pos:start="231:35" pos:end="239:13">{<block_content pos:start="233:17" pos:end="237:30">

                <expr_stmt pos:start="233:17" pos:end="233:51"><expr pos:start="233:17" pos:end="233:50"><call pos:start="233:17" pos:end="233:50"><name pos:start="233:17" pos:end="233:22">memcpy</name><argument_list pos:start="233:23" pos:end="233:50">(<argument pos:start="233:24" pos:end="233:32"><expr pos:start="233:24" pos:end="233:32"><operator pos:start="233:24" pos:end="233:24">&amp;</operator><name pos:start="233:25" pos:end="233:32"><name pos:start="233:25" pos:end="233:27">buf</name><index pos:start="233:28" pos:end="233:32">[<expr pos:start="233:29" pos:end="233:31"><name pos:start="233:29" pos:end="233:31">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="233:35" pos:end="233:38"><expr pos:start="233:35" pos:end="233:38"><name pos:start="233:35" pos:end="233:38">temp</name></expr></argument>, <argument pos:start="233:41" pos:end="233:49"><expr pos:start="233:41" pos:end="233:49"><name pos:start="233:41" pos:end="233:49">temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:33"><expr pos:start="235:17" pos:end="235:32"><name pos:start="235:17" pos:end="235:19">ret</name> <operator pos:start="235:21" pos:end="235:22">+=</operator> <name pos:start="235:24" pos:end="235:32">temp_size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:30"><expr pos:start="237:17" pos:end="237:29"><name pos:start="237:17" pos:end="237:25">temp_size</name> <operator pos:start="237:27" pos:end="237:27">=</operator> <literal type="number" pos:start="237:29" pos:end="237:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="245:9" pos:end="255:9"><if pos:start="245:9" pos:end="255:9">if<condition pos:start="245:11" pos:end="245:20">(<expr pos:start="245:12" pos:end="245:19"><name pos:start="245:12" pos:end="245:15">bits</name> <operator pos:start="245:17" pos:end="245:17">&gt;</operator> <literal type="number" pos:start="245:19" pos:end="245:19">0</literal></expr>)</condition> <block pos:start="245:22" pos:end="255:9">{<block_content pos:start="247:13" pos:end="253:29">

            <expr_stmt pos:start="247:13" pos:end="247:38"><expr pos:start="247:13" pos:end="247:37"><call pos:start="247:13" pos:end="247:37"><name pos:start="247:13" pos:end="247:19">AV_WB32</name><argument_list pos:start="247:20" pos:end="247:37">(<argument pos:start="247:21" pos:end="247:29"><expr pos:start="247:21" pos:end="247:29"><operator pos:start="247:21" pos:end="247:21">&amp;</operator><name pos:start="247:22" pos:end="247:29"><name pos:start="247:22" pos:end="247:24">buf</name><index pos:start="247:25" pos:end="247:29">[<expr pos:start="247:26" pos:end="247:28"><name pos:start="247:26" pos:end="247:28">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="247:32" pos:end="247:36"><expr pos:start="247:32" pos:end="247:36"><name pos:start="247:32" pos:end="247:36">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:21"><expr pos:start="249:13" pos:end="249:20"><name pos:start="249:13" pos:end="249:15">ret</name> <operator pos:start="249:17" pos:end="249:18">+=</operator> <literal type="number" pos:start="249:20" pos:end="249:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:47"><expr pos:start="251:13" pos:end="251:46"><call pos:start="251:13" pos:end="251:46"><name pos:start="251:13" pos:end="251:18">memcpy</name><argument_list pos:start="251:19" pos:end="251:46">(<argument pos:start="251:20" pos:end="251:28"><expr pos:start="251:20" pos:end="251:28"><operator pos:start="251:20" pos:end="251:20">&amp;</operator><name pos:start="251:21" pos:end="251:28"><name pos:start="251:21" pos:end="251:23">buf</name><index pos:start="251:24" pos:end="251:28">[<expr pos:start="251:25" pos:end="251:27"><name pos:start="251:25" pos:end="251:27">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="251:31" pos:end="251:34"><expr pos:start="251:31" pos:end="251:34"><name pos:start="251:31" pos:end="251:34">temp</name></expr></argument>, <argument pos:start="251:37" pos:end="251:45"><expr pos:start="251:37" pos:end="251:45"><name pos:start="251:37" pos:end="251:45">temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:29"><expr pos:start="253:13" pos:end="253:28"><name pos:start="253:13" pos:end="253:15">ret</name> <operator pos:start="253:17" pos:end="253:18">+=</operator> <name pos:start="253:20" pos:end="253:28">temp_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="259:9" pos:end="259:89"><expr pos:start="259:9" pos:end="259:88"><call pos:start="259:9" pos:end="259:88"><name pos:start="259:9" pos:end="259:26">write_chunk_header</name><argument_list pos:start="259:27" pos:end="259:88">(<argument pos:start="259:28" pos:end="259:43"><expr pos:start="259:28" pos:end="259:43"><name pos:start="259:28" pos:end="259:30">buf</name> <operator pos:start="259:32" pos:end="259:32">+</operator> <name pos:start="259:34" pos:end="259:43">header_ofs</name></expr></argument>, <argument pos:start="259:46" pos:end="259:49"><expr pos:start="259:46" pos:end="259:49"><literal type="number" pos:start="259:46" pos:end="259:49">0x31</literal></expr></argument>, <argument pos:start="259:52" pos:end="259:87"><expr pos:start="259:52" pos:end="259:87"><name pos:start="259:52" pos:end="259:54">ret</name> <operator pos:start="259:56" pos:end="259:56">-</operator> <name pos:start="259:58" pos:end="259:67">header_ofs</name> <operator pos:start="259:69" pos:end="259:69">-</operator> <name pos:start="259:71" pos:end="259:87">CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="263:9" pos:end="263:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="269:5" pos:end="269:15">return <expr pos:start="269:12" pos:end="269:14"><name pos:start="269:12" pos:end="269:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
