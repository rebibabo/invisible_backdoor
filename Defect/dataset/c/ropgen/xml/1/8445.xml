<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8445.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">read_block_types</name><parameter_list pos:start="1:28" pos:end="1:80">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:79"><decl pos:start="1:71" pos:end="1:79"><type pos:start="1:71" pos:end="1:79"><name pos:start="1:71" pos:end="1:76">Bundle</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:79">b</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:13">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">t</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">last</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:26">dec_end</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><call pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:18">CHECK_READ_VAL</name><argument_list pos:start="13:19" pos:end="13:28">(<argument pos:start="13:20" pos:end="13:21"><expr pos:start="13:20" pos:end="13:21"><name pos:start="13:20" pos:end="13:21">gb</name></expr></argument>, <argument pos:start="13:24" pos:end="13:24"><expr pos:start="13:24" pos:end="13:24"><name pos:start="13:24" pos:end="13:24">b</name></expr></argument>, <argument pos:start="13:27" pos:end="13:27"><expr pos:start="13:27" pos:end="13:27"><name pos:start="13:27" pos:end="13:27">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:11">dec_end</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:24"><name pos:start="15:15" pos:end="15:15">b</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:24">cur_dec</name></name> <operator pos:start="15:26" pos:end="15:26">+</operator> <name pos:start="15:28" pos:end="15:28">t</name></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:30">(<expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:15">dec_end</name> <operator pos:start="17:17" pos:end="17:17">&gt;</operator> <name pos:start="17:19" pos:end="17:29"><name pos:start="17:19" pos:end="17:19">b</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:29">data_end</name></name></expr>)</condition> <block pos:start="17:32" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:68"><expr pos:start="19:9" pos:end="19:67"><call pos:start="19:9" pos:end="19:67"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:67">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:66"><expr pos:start="19:37" pos:end="19:66"><literal type="string" pos:start="19:37" pos:end="19:66">"Too many block type values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="59:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><call pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:17">get_bits1</name><argument_list pos:start="25:18" pos:end="25:21">(<argument pos:start="25:19" pos:end="25:20"><expr pos:start="25:19" pos:end="25:20"><name pos:start="25:19" pos:end="25:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:24" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:24">

        <expr_stmt pos:start="27:9" pos:end="27:28"><expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:9">v</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:20">get_bits</name><argument_list pos:start="27:21" pos:end="27:27">(<argument pos:start="27:22" pos:end="27:23"><expr pos:start="27:22" pos:end="27:23"><name pos:start="27:22" pos:end="27:23">gb</name></expr></argument>, <argument pos:start="27:26" pos:end="27:26"><expr pos:start="27:26" pos:end="27:26"><literal type="number" pos:start="27:26" pos:end="27:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:14">memset</name><argument_list pos:start="29:15" pos:end="29:32">(<argument pos:start="29:16" pos:end="29:25"><expr pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:16">b</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:25">cur_dec</name></name></expr></argument>, <argument pos:start="29:28" pos:end="29:28"><expr pos:start="29:28" pos:end="29:28"><name pos:start="29:28" pos:end="29:28">v</name></expr></argument>, <argument pos:start="29:31" pos:end="29:31"><expr pos:start="29:31" pos:end="29:31"><name pos:start="29:31" pos:end="29:31">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:9">b</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:18">cur_dec</name></name> <operator pos:start="31:20" pos:end="31:21">+=</operator> <name pos:start="31:23" pos:end="31:23">t</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="59:5">else <block pos:start="33:12" pos:end="59:5">{<block_content pos:start="35:9" pos:end="57:39">

        <do pos:start="35:9" pos:end="57:39">do <block pos:start="35:12" pos:end="57:9">{<block_content pos:start="37:13" pos:end="55:13">

            <expr_stmt pos:start="37:13" pos:end="37:38"><expr pos:start="37:13" pos:end="37:37"><name pos:start="37:13" pos:end="37:13">v</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:37"><name pos:start="37:17" pos:end="37:24">GET_HUFF</name><argument_list pos:start="37:25" pos:end="37:37">(<argument pos:start="37:26" pos:end="37:27"><expr pos:start="37:26" pos:end="37:27"><name pos:start="37:26" pos:end="37:27">gb</name></expr></argument>, <argument pos:start="37:30" pos:end="37:36"><expr pos:start="37:30" pos:end="37:36"><name pos:start="37:30" pos:end="37:36"><name pos:start="37:30" pos:end="37:30">b</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:36">tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="55:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:23">(<expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:17">v</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <literal type="number" pos:start="39:21" pos:end="39:22">12</literal></expr>)</condition> <block pos:start="39:25" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:34">

                <expr_stmt pos:start="41:17" pos:end="41:25"><expr pos:start="41:17" pos:end="41:24"><name pos:start="41:17" pos:end="41:20">last</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <name pos:start="41:24" pos:end="41:24">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:34"><expr pos:start="43:17" pos:end="43:33"><operator pos:start="43:17" pos:end="43:17">*</operator><name pos:start="43:18" pos:end="43:27"><name pos:start="43:18" pos:end="43:18">b</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:27">cur_dec</name></name><operator pos:start="43:28" pos:end="43:29">++</operator> <operator pos:start="43:31" pos:end="43:31">=</operator> <name pos:start="43:33" pos:end="43:33">v</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="45:15" pos:end="55:13">else <block pos:start="45:20" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:34">

                <decl_stmt pos:start="47:17" pos:end="47:47"><decl pos:start="47:17" pos:end="47:46"><type pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">int</name></type> <name pos:start="47:21" pos:end="47:23">run</name> <init pos:start="47:25" pos:end="47:46">= <expr pos:start="47:27" pos:end="47:46"><name pos:start="47:27" pos:end="47:46"><name pos:start="47:27" pos:end="47:38">bink_rlelens</name><index pos:start="47:39" pos:end="47:46">[<expr pos:start="47:40" pos:end="47:45"><name pos:start="47:40" pos:end="47:40">v</name> <operator pos:start="47:42" pos:end="47:42">-</operator> <literal type="number" pos:start="47:44" pos:end="47:45">12</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="51:17" pos:end="51:46"><expr pos:start="51:17" pos:end="51:45"><call pos:start="51:17" pos:end="51:45"><name pos:start="51:17" pos:end="51:22">memset</name><argument_list pos:start="51:23" pos:end="51:45">(<argument pos:start="51:24" pos:end="51:33"><expr pos:start="51:24" pos:end="51:33"><name pos:start="51:24" pos:end="51:33"><name pos:start="51:24" pos:end="51:24">b</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:33">cur_dec</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:39"><expr pos:start="51:36" pos:end="51:39"><name pos:start="51:36" pos:end="51:39">last</name></expr></argument>, <argument pos:start="51:42" pos:end="51:44"><expr pos:start="51:42" pos:end="51:44"><name pos:start="51:42" pos:end="51:44">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:34"><expr pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:17">b</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:26">cur_dec</name></name> <operator pos:start="53:28" pos:end="53:29">+=</operator> <name pos:start="53:31" pos:end="53:33">run</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block> while <condition pos:start="57:17" pos:end="57:38">(<expr pos:start="57:18" pos:end="57:37"><name pos:start="57:18" pos:end="57:27"><name pos:start="57:18" pos:end="57:18">b</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:27">cur_dec</name></name> <operator pos:start="57:29" pos:end="57:29">&lt;</operator> <name pos:start="57:31" pos:end="57:37">dec_end</name></expr>)</condition>;</do>

    </block_content>}</block></else></if_stmt>

    <return pos:start="61:5" pos:end="61:13">return <expr pos:start="61:12" pos:end="61:12"><literal type="number" pos:start="61:12" pos:end="61:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
