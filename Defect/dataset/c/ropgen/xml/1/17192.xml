<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17192.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">int64_t</name></type> <name pos:start="1:9" pos:end="1:25">qcow2_alloc_bytes</name><parameter_list pos:start="1:26" pos:end="1:57">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:18">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:26">free_in_cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:55"><expr pos:start="15:5" pos:end="15:54"><call pos:start="15:5" pos:end="15:54"><name pos:start="15:5" pos:end="15:16">BLKDBG_EVENT</name><argument_list pos:start="15:17" pos:end="15:54">(<argument pos:start="15:18" pos:end="15:25"><expr pos:start="15:18" pos:end="15:25"><name pos:start="15:18" pos:end="15:25"><name pos:start="15:18" pos:end="15:19">bs</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:25">file</name></name></expr></argument>, <argument pos:start="15:28" pos:end="15:53"><expr pos:start="15:28" pos:end="15:53"><name pos:start="15:28" pos:end="15:53">BLKDBG_CLUSTER_ALLOC_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:48"><expr pos:start="17:5" pos:end="17:47"><call pos:start="17:5" pos:end="17:47"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:47">(<argument pos:start="17:12" pos:end="17:46"><expr pos:start="17:12" pos:end="17:46"><name pos:start="17:12" pos:end="17:15">size</name> <operator pos:start="17:17" pos:end="17:17">&gt;</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal> <operator pos:start="17:21" pos:end="17:22">&amp;&amp;</operator> <name pos:start="17:24" pos:end="17:27">size</name> <operator pos:start="17:29" pos:end="17:30">&lt;=</operator> <name pos:start="17:32" pos:end="17:46"><name pos:start="17:32" pos:end="17:32">s</name><operator pos:start="17:33" pos:end="17:34">-&gt;</operator><name pos:start="17:35" pos:end="17:46">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:80"><expr pos:start="19:5" pos:end="19:79"><call pos:start="19:5" pos:end="19:79"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:79">(<argument pos:start="19:12" pos:end="19:78"><expr pos:start="19:12" pos:end="19:78"><operator pos:start="19:12" pos:end="19:12">!</operator><name pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:31">free_byte_offset</name></name> <operator pos:start="19:33" pos:end="19:34">||</operator> <call pos:start="19:36" pos:end="19:78"><name pos:start="19:36" pos:end="19:54">offset_into_cluster</name><argument_list pos:start="19:55" pos:end="19:78">(<argument pos:start="19:56" pos:end="19:56"><expr pos:start="19:56" pos:end="19:56"><name pos:start="19:56" pos:end="19:56">s</name></expr></argument>, <argument pos:start="19:59" pos:end="19:77"><expr pos:start="19:59" pos:end="19:77"><name pos:start="19:59" pos:end="19:77"><name pos:start="19:59" pos:end="19:59">s</name><operator pos:start="19:60" pos:end="19:61">-&gt;</operator><name pos:start="19:62" pos:end="19:77">free_byte_offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:10">offset</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:32"><name pos:start="23:14" pos:end="23:14">s</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:32">free_byte_offset</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="47:5"><if pos:start="27:5" pos:end="47:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">offset</name></expr>)</condition> <block pos:start="27:17" pos:end="47:5">{<block_content pos:start="29:9" pos:end="45:9">

        <decl_stmt pos:start="29:9" pos:end="29:26"><decl pos:start="29:9" pos:end="29:25"><type pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16">uint64_t</name></type> <name pos:start="29:18" pos:end="29:25">refcount</name></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:75"><expr pos:start="31:9" pos:end="31:74"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:74"><name pos:start="31:15" pos:end="31:32">qcow2_get_refcount</name><argument_list pos:start="31:33" pos:end="31:74">(<argument pos:start="31:34" pos:end="31:35"><expr pos:start="31:34" pos:end="31:35"><name pos:start="31:34" pos:end="31:35">bs</name></expr></argument>, <argument pos:start="31:38" pos:end="31:62"><expr pos:start="31:38" pos:end="31:62"><name pos:start="31:38" pos:end="31:43">offset</name> <operator pos:start="31:45" pos:end="31:46">&gt;&gt;</operator> <name pos:start="31:48" pos:end="31:62"><name pos:start="31:48" pos:end="31:48">s</name><operator pos:start="31:49" pos:end="31:50">-&gt;</operator><name pos:start="31:51" pos:end="31:62">cluster_bits</name></name></expr></argument>, <argument pos:start="31:65" pos:end="31:73"><expr pos:start="31:65" pos:end="31:73"><operator pos:start="31:65" pos:end="31:65">&amp;</operator><name pos:start="31:66" pos:end="31:73">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">&lt;</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>)</condition> <block pos:start="33:22" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:23">

            <return pos:start="35:13" pos:end="35:23">return <expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:40">(<expr pos:start="41:13" pos:end="41:39"><name pos:start="41:13" pos:end="41:20">refcount</name> <operator pos:start="41:22" pos:end="41:23">==</operator> <name pos:start="41:25" pos:end="41:39"><name pos:start="41:25" pos:end="41:25">s</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:39">refcount_max</name></name></expr>)</condition> <block pos:start="41:42" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:23">

            <expr_stmt pos:start="43:13" pos:end="43:23"><expr pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:18">offset</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <literal type="number" pos:start="43:22" pos:end="43:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:71"><expr pos:start="51:5" pos:end="51:70"><name pos:start="51:5" pos:end="51:19">free_in_cluster</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:37"><name pos:start="51:23" pos:end="51:23">s</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:37">cluster_size</name></name> <operator pos:start="51:39" pos:end="51:39">-</operator> <call pos:start="51:41" pos:end="51:70"><name pos:start="51:41" pos:end="51:59">offset_into_cluster</name><argument_list pos:start="51:60" pos:end="51:70">(<argument pos:start="51:61" pos:end="51:61"><expr pos:start="51:61" pos:end="51:61"><name pos:start="51:61" pos:end="51:61">s</name></expr></argument>, <argument pos:start="51:64" pos:end="51:69"><expr pos:start="51:64" pos:end="51:69"><name pos:start="51:64" pos:end="51:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="71:5"><if pos:start="53:5" pos:end="71:5">if <condition pos:start="53:8" pos:end="53:42">(<expr pos:start="53:9" pos:end="53:41"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:15">offset</name> <operator pos:start="53:17" pos:end="53:18">||</operator> <name pos:start="53:20" pos:end="53:34">free_in_cluster</name> <operator pos:start="53:36" pos:end="53:36">&lt;</operator> <name pos:start="53:38" pos:end="53:41">size</name></expr>)</condition> <block pos:start="53:44" pos:end="71:5">{<block_content pos:start="55:9" pos:end="69:9">

        <decl_stmt pos:start="55:9" pos:end="55:72"><decl pos:start="55:9" pos:end="55:71"><type pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:15">int64_t</name></type> <name pos:start="55:17" pos:end="55:27">new_cluster</name> <init pos:start="55:29" pos:end="55:71">= <expr pos:start="55:31" pos:end="55:71"><call pos:start="55:31" pos:end="55:71"><name pos:start="55:31" pos:end="55:50">alloc_clusters_noref</name><argument_list pos:start="55:51" pos:end="55:71">(<argument pos:start="55:52" pos:end="55:53"><expr pos:start="55:52" pos:end="55:53"><name pos:start="55:52" pos:end="55:53">bs</name></expr></argument>, <argument pos:start="55:56" pos:end="55:70"><expr pos:start="55:56" pos:end="55:70"><name pos:start="55:56" pos:end="55:70"><name pos:start="55:56" pos:end="55:56">s</name><operator pos:start="55:57" pos:end="55:58">-&gt;</operator><name pos:start="55:59" pos:end="55:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:28">(<expr pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:23">new_cluster</name> <operator pos:start="57:25" pos:end="57:25">&lt;</operator> <literal type="number" pos:start="57:27" pos:end="57:27">0</literal></expr>)</condition> <block pos:start="57:30" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:31">

            <return pos:start="59:13" pos:end="59:31">return <expr pos:start="59:20" pos:end="59:30"><name pos:start="59:20" pos:end="59:30">new_cluster</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:72">(<expr pos:start="65:13" pos:end="65:71"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:19">offset</name> <operator pos:start="65:21" pos:end="65:22">||</operator> <call pos:start="65:24" pos:end="65:56"><name pos:start="65:24" pos:end="65:31">ROUND_UP</name><argument_list pos:start="65:32" pos:end="65:56">(<argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><name pos:start="65:33" pos:end="65:38">offset</name></expr></argument>, <argument pos:start="65:41" pos:end="65:55"><expr pos:start="65:41" pos:end="65:55"><name pos:start="65:41" pos:end="65:55"><name pos:start="65:41" pos:end="65:41">s</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:55">cluster_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="65:58" pos:end="65:59">!=</operator> <name pos:start="65:61" pos:end="65:71">new_cluster</name></expr>)</condition> <block pos:start="65:74" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:33">

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:18">offset</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:32">new_cluster</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:19"><expr pos:start="75:5" pos:end="75:18"><call pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:10">assert</name><argument_list pos:start="75:11" pos:end="75:18">(<argument pos:start="75:12" pos:end="75:17"><expr pos:start="75:12" pos:end="75:17"><name pos:start="75:12" pos:end="75:17">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:75"><expr pos:start="77:5" pos:end="77:74"><name pos:start="77:5" pos:end="77:7">ret</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:74"><name pos:start="77:11" pos:end="77:25">update_refcount</name><argument_list pos:start="77:26" pos:end="77:74">(<argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">bs</name></expr></argument>, <argument pos:start="77:31" pos:end="77:36"><expr pos:start="77:31" pos:end="77:36"><name pos:start="77:31" pos:end="77:36">offset</name></expr></argument>, <argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><name pos:start="77:39" pos:end="77:42">size</name></expr></argument>, <argument pos:start="77:45" pos:end="77:45"><expr pos:start="77:45" pos:end="77:45"><literal type="number" pos:start="77:45" pos:end="77:45">1</literal></expr></argument>, <argument pos:start="77:48" pos:end="77:52"><expr pos:start="77:48" pos:end="77:52"><name pos:start="77:48" pos:end="77:52">false</name></expr></argument>, <argument pos:start="77:55" pos:end="77:73"><expr pos:start="77:55" pos:end="77:73"><name pos:start="77:55" pos:end="77:73">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:19">

        <return pos:start="81:9" pos:end="81:19">return <expr pos:start="81:16" pos:end="81:18"><name pos:start="81:16" pos:end="81:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="89:47">/* The cluster refcount was incremented; refcount blocks must be flushed

     * before the caller's L2 table updates. */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:79"><expr pos:start="91:5" pos:end="91:78"><call pos:start="91:5" pos:end="91:78"><name pos:start="91:5" pos:end="91:30">qcow2_cache_set_dependency</name><argument_list pos:start="91:31" pos:end="91:78">(<argument pos:start="91:32" pos:end="91:33"><expr pos:start="91:32" pos:end="91:33"><name pos:start="91:32" pos:end="91:33">bs</name></expr></argument>, <argument pos:start="91:36" pos:end="91:52"><expr pos:start="91:36" pos:end="91:52"><name pos:start="91:36" pos:end="91:52"><name pos:start="91:36" pos:end="91:36">s</name><operator pos:start="91:37" pos:end="91:38">-&gt;</operator><name pos:start="91:39" pos:end="91:52">l2_table_cache</name></name></expr></argument>, <argument pos:start="91:55" pos:end="91:77"><expr pos:start="91:55" pos:end="91:77"><name pos:start="91:55" pos:end="91:77"><name pos:start="91:55" pos:end="91:55">s</name><operator pos:start="91:56" pos:end="91:57">-&gt;</operator><name pos:start="91:58" pos:end="91:77">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:40"><expr pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:23"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:23">free_byte_offset</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:32">offset</name> <operator pos:start="95:34" pos:end="95:34">+</operator> <name pos:start="95:36" pos:end="95:39">size</name></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:53">(<expr pos:start="97:9" pos:end="97:52"><operator pos:start="97:9" pos:end="97:9">!</operator><call pos:start="97:10" pos:end="97:52"><name pos:start="97:10" pos:end="97:28">offset_into_cluster</name><argument_list pos:start="97:29" pos:end="97:52">(<argument pos:start="97:30" pos:end="97:30"><expr pos:start="97:30" pos:end="97:30"><name pos:start="97:30" pos:end="97:30">s</name></expr></argument>, <argument pos:start="97:33" pos:end="97:51"><expr pos:start="97:33" pos:end="97:51"><name pos:start="97:33" pos:end="97:51"><name pos:start="97:33" pos:end="97:33">s</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:51">free_byte_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:55" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:32">

        <expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:27">free_byte_offset</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <literal type="number" pos:start="99:31" pos:end="99:31">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="105:5" pos:end="105:18">return <expr pos:start="105:12" pos:end="105:17"><name pos:start="105:12" pos:end="105:17">offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
