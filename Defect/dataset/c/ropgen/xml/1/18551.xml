<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18551.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">xhci_event</name><parameter_list pos:start="1:23" pos:end="1:64">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:32">XHCIState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">xhci</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:49">XHCIEvent</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">event</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:63"><decl pos:start="1:59" pos:end="1:63"><type pos:start="1:59" pos:end="1:63"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:63">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:29">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">XHCIInterrupter</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:25">intr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">dma_addr_t</name></type> <name pos:start="7:16" pos:end="7:19">erdp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:23">dp_idx</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:28">(<expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:9">v</name> <operator pos:start="13:11" pos:end="13:12">&gt;=</operator> <name pos:start="13:14" pos:end="13:27"><name pos:start="13:14" pos:end="13:17">xhci</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:27">numintrs</name></name></expr>)</condition> <block pos:start="13:30" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:72"><expr pos:start="15:9" pos:end="15:71"><call pos:start="15:9" pos:end="15:71"><name pos:start="15:9" pos:end="15:15">DPRINTF</name><argument_list pos:start="15:16" pos:end="15:71">(<argument pos:start="15:17" pos:end="15:51"><expr pos:start="15:17" pos:end="15:51"><literal type="string" pos:start="15:17" pos:end="15:51">"intr nr out of range (%d &gt;= %d)\n"</literal></expr></argument>, <argument pos:start="15:54" pos:end="15:54"><expr pos:start="15:54" pos:end="15:54"><name pos:start="15:54" pos:end="15:54">v</name></expr></argument>, <argument pos:start="15:57" pos:end="15:70"><expr pos:start="15:57" pos:end="15:70"><name pos:start="15:57" pos:end="15:70"><name pos:start="15:57" pos:end="15:60">xhci</name><operator pos:start="15:61" pos:end="15:62">-&gt;</operator><name pos:start="15:63" pos:end="15:70">numintrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:8">intr</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <operator pos:start="21:12" pos:end="21:12">&amp;</operator><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:16">xhci</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:22">intr</name><index pos:start="21:23" pos:end="21:25">[<expr pos:start="21:24" pos:end="21:24"><name pos:start="21:24" pos:end="21:24">v</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="47:5"><if pos:start="25:5" pos:end="47:5">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:12">intr</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:21">er_full</name></name></expr>)</condition> <block pos:start="25:24" pos:end="47:5">{<block_content pos:start="27:9" pos:end="45:15">

        <expr_stmt pos:start="27:9" pos:end="27:53"><expr pos:start="27:9" pos:end="27:52"><call pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:15">DPRINTF</name><argument_list pos:start="27:16" pos:end="27:52">(<argument pos:start="27:17" pos:end="27:51"><expr pos:start="27:17" pos:end="27:51"><literal type="string" pos:start="27:17" pos:end="27:51">"xhci_event(): ER full, queueing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:72">(<expr pos:start="29:13" pos:end="29:71"><operator pos:start="29:13" pos:end="29:13">(</operator><operator pos:start="29:14" pos:end="29:14">(</operator><name pos:start="29:15" pos:end="29:33"><name pos:start="29:15" pos:end="29:18">intr</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:33">ev_buffer_put</name></name><operator pos:start="29:34" pos:end="29:34">+</operator><literal type="number" pos:start="29:35" pos:end="29:35">1</literal><operator pos:start="29:36" pos:end="29:36">)</operator> <operator pos:start="29:38" pos:end="29:38">%</operator> <name pos:start="29:40" pos:end="29:47">EV_QUEUE</name><operator pos:start="29:48" pos:end="29:48">)</operator> <operator pos:start="29:50" pos:end="29:51">==</operator> <name pos:start="29:53" pos:end="29:71"><name pos:start="29:53" pos:end="29:56">intr</name><operator pos:start="29:57" pos:end="29:58">-&gt;</operator><name pos:start="29:59" pos:end="29:71">ev_buffer_get</name></name></expr>)</condition> <block pos:start="29:74" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:19">

            <expr_stmt pos:start="31:13" pos:end="31:65"><expr pos:start="31:13" pos:end="31:64"><call pos:start="31:13" pos:end="31:64"><name pos:start="31:13" pos:end="31:19">DPRINTF</name><argument_list pos:start="31:20" pos:end="31:64">(<argument pos:start="31:21" pos:end="31:63"><expr pos:start="31:21" pos:end="31:63"><literal type="string" pos:start="31:21" pos:end="31:63">"xhci: event queue full, dropping event!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:56"><expr pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:12">intr</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:23">ev_buffer</name><index pos:start="37:24" pos:end="37:46">[<expr pos:start="37:25" pos:end="37:45"><name pos:start="37:25" pos:end="37:43"><name pos:start="37:25" pos:end="37:28">intr</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:43">ev_buffer_put</name></name><operator pos:start="37:44" pos:end="37:45">++</operator></expr>]</index></name> <operator pos:start="37:48" pos:end="37:48">=</operator> <operator pos:start="37:50" pos:end="37:50">*</operator><name pos:start="37:51" pos:end="37:55">event</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:44">(<expr pos:start="39:13" pos:end="39:43"><name pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:16">intr</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:31">ev_buffer_put</name></name> <operator pos:start="39:33" pos:end="39:34">==</operator> <name pos:start="39:36" pos:end="39:43">EV_QUEUE</name></expr>)</condition> <block pos:start="39:46" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:36">

            <expr_stmt pos:start="41:13" pos:end="41:36"><expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:31"><name pos:start="41:13" pos:end="41:16">intr</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:31">ev_buffer_put</name></name> <operator pos:start="41:33" pos:end="41:33">=</operator> <literal type="number" pos:start="41:35" pos:end="41:35">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:56"><expr pos:start="51:5" pos:end="51:55"><name pos:start="51:5" pos:end="51:8">erdp</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:55"><name pos:start="51:12" pos:end="51:22">xhci_addr64</name><argument_list pos:start="51:23" pos:end="51:55">(<argument pos:start="51:24" pos:end="51:37"><expr pos:start="51:24" pos:end="51:37"><name pos:start="51:24" pos:end="51:37"><name pos:start="51:24" pos:end="51:27">intr</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:37">erdp_low</name></name></expr></argument>, <argument pos:start="51:40" pos:end="51:54"><expr pos:start="51:40" pos:end="51:54"><name pos:start="51:40" pos:end="51:54"><name pos:start="51:40" pos:end="51:43">intr</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:54">erdp_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="67:5"><if pos:start="53:5" pos:end="67:5">if <condition pos:start="53:8" pos:end="55:58">(<expr pos:start="53:9" pos:end="55:57"><name pos:start="53:9" pos:end="53:12">erdp</name> <operator pos:start="53:14" pos:end="53:14">&lt;</operator> <name pos:start="53:16" pos:end="53:29"><name pos:start="53:16" pos:end="53:19">intr</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:29">er_start</name></name> <operator pos:start="53:31" pos:end="53:32">||</operator>

        <name pos:start="55:9" pos:end="55:12">erdp</name> <operator pos:start="55:14" pos:end="55:15">&gt;=</operator> <operator pos:start="55:17" pos:end="55:17">(</operator><name pos:start="55:18" pos:end="55:31"><name pos:start="55:18" pos:end="55:21">intr</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:31">er_start</name></name> <operator pos:start="55:33" pos:end="55:33">+</operator> <name pos:start="55:35" pos:end="55:42">TRB_SIZE</name><operator pos:start="55:43" pos:end="55:43">*</operator><name pos:start="55:44" pos:end="55:56"><name pos:start="55:44" pos:end="55:47">intr</name><operator pos:start="55:48" pos:end="55:49">-&gt;</operator><name pos:start="55:50" pos:end="55:56">er_size</name></name><operator pos:start="55:57" pos:end="55:57">)</operator></expr>)</condition> <block pos:start="55:60" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:15">

        <expr_stmt pos:start="57:9" pos:end="57:68"><expr pos:start="57:9" pos:end="57:67"><call pos:start="57:9" pos:end="57:67"><name pos:start="57:9" pos:end="57:15">DPRINTF</name><argument_list pos:start="57:16" pos:end="57:67">(<argument pos:start="57:17" pos:end="57:60"><expr pos:start="57:17" pos:end="57:60"><literal type="string" pos:start="57:17" pos:end="57:44">"xhci: ERDP out of bounds: "</literal><name pos:start="57:45" pos:end="57:56">DMA_ADDR_FMT</name><literal type="string" pos:start="57:57" pos:end="57:60">"\n"</literal></expr></argument>, <argument pos:start="57:63" pos:end="57:66"><expr pos:start="57:63" pos:end="57:66"><name pos:start="57:63" pos:end="57:66">erdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="61:50"><expr pos:start="59:9" pos:end="61:49"><call pos:start="59:9" pos:end="61:49"><name pos:start="59:9" pos:end="59:15">DPRINTF</name><argument_list pos:start="59:16" pos:end="61:49">(<argument pos:start="59:17" pos:end="59:57"><expr pos:start="59:17" pos:end="59:57"><literal type="string" pos:start="59:17" pos:end="59:34">"xhci: ER[%d] at "</literal><name pos:start="59:35" pos:end="59:46">DMA_ADDR_FMT</name><literal type="string" pos:start="59:47" pos:end="59:57">" len %d\n"</literal></expr></argument>,

                <argument pos:start="61:17" pos:end="61:17"><expr pos:start="61:17" pos:end="61:17"><name pos:start="61:17" pos:end="61:17">v</name></expr></argument>, <argument pos:start="61:20" pos:end="61:33"><expr pos:start="61:20" pos:end="61:33"><name pos:start="61:20" pos:end="61:33"><name pos:start="61:20" pos:end="61:23">intr</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:33">er_start</name></name></expr></argument>, <argument pos:start="61:36" pos:end="61:48"><expr pos:start="61:36" pos:end="61:48"><name pos:start="61:36" pos:end="61:48"><name pos:start="61:36" pos:end="61:39">intr</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:48">er_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><call pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:16">xhci_die</name><argument_list pos:start="63:17" pos:end="63:22">(<argument pos:start="63:18" pos:end="63:21"><expr pos:start="63:18" pos:end="63:21"><name pos:start="63:18" pos:end="63:21">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:48"><expr pos:start="71:5" pos:end="71:47"><name pos:start="71:5" pos:end="71:10">dp_idx</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <operator pos:start="71:14" pos:end="71:14">(</operator><name pos:start="71:15" pos:end="71:18">erdp</name> <operator pos:start="71:20" pos:end="71:20">-</operator> <name pos:start="71:22" pos:end="71:35"><name pos:start="71:22" pos:end="71:25">intr</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:35">er_start</name></name><operator pos:start="71:36" pos:end="71:36">)</operator> <operator pos:start="71:38" pos:end="71:38">/</operator> <name pos:start="71:40" pos:end="71:47">TRB_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:35"><expr pos:start="73:5" pos:end="73:34"><call pos:start="73:5" pos:end="73:34"><name pos:start="73:5" pos:end="73:10">assert</name><argument_list pos:start="73:11" pos:end="73:34">(<argument pos:start="73:12" pos:end="73:33"><expr pos:start="73:12" pos:end="73:33"><name pos:start="73:12" pos:end="73:17">dp_idx</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:33"><name pos:start="73:21" pos:end="73:24">intr</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:33">er_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="111:5"><if pos:start="77:5" pos:end="107:5">if <condition pos:start="77:8" pos:end="77:54">(<expr pos:start="77:9" pos:end="77:53"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:24"><name pos:start="77:10" pos:end="77:13">intr</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:24">er_ep_idx</name></name><operator pos:start="77:25" pos:end="77:25">+</operator><literal type="number" pos:start="77:26" pos:end="77:26">1</literal><operator pos:start="77:27" pos:end="77:27">)</operator> <operator pos:start="77:29" pos:end="77:29">%</operator> <name pos:start="77:31" pos:end="77:43"><name pos:start="77:31" pos:end="77:34">intr</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:43">er_size</name></name> <operator pos:start="77:45" pos:end="77:46">==</operator> <name pos:start="77:48" pos:end="77:53">dp_idx</name></expr>)</condition> <block pos:start="77:56" pos:end="107:5">{<block_content pos:start="79:9" pos:end="105:9">

        <expr_stmt pos:start="79:9" pos:end="82:0"><expr pos:start="79:9" pos:end="79:52"><call pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:15">DPRINTF</name><argument_list pos:start="79:16" pos:end="79:52">(<argument pos:start="79:17" pos:end="79:51"><expr pos:start="79:17" pos:end="79:51"><literal type="string" pos:start="79:17" pos:end="79:51">"xhci_event(): ER full, queueing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="81:1" pos:end="81:20">#<cpp:directive pos:start="81:2" pos:end="81:7">ifndef</cpp:directive> <name pos:start="81:9" pos:end="81:20">ER_FULL_HACK</name></cpp:ifndef>

        <decl_stmt pos:start="83:9" pos:end="83:72"><decl pos:start="83:9" pos:end="83:71"><type pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:17">XHCIEvent</name></type> <name pos:start="83:19" pos:end="83:22">full</name> <init pos:start="83:24" pos:end="83:71">= <expr pos:start="83:26" pos:end="83:71"><block pos:start="83:26" pos:end="83:71">{<expr pos:start="83:27" pos:end="83:44"><name pos:start="83:27" pos:end="83:44">ER_HOST_CONTROLLER</name></expr>, <expr pos:start="83:47" pos:end="83:70"><name pos:start="83:47" pos:end="83:70">CC_EVENT_RING_FULL_ERROR</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="85:9" pos:end="88:0"><expr pos:start="85:9" pos:end="85:37"><call pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:24">xhci_write_event</name><argument_list pos:start="85:25" pos:end="85:37">(<argument pos:start="85:26" pos:end="85:29"><expr pos:start="85:26" pos:end="85:29"><name pos:start="85:26" pos:end="85:29">xhci</name></expr></argument>, <argument pos:start="85:32" pos:end="85:36"><expr pos:start="85:32" pos:end="85:36"><operator pos:start="85:32" pos:end="85:32">&amp;</operator><name pos:start="85:33" pos:end="85:36">full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="89:9" pos:end="89:26"><expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:12">intr</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:21">er_full</name></name> <operator pos:start="89:23" pos:end="89:23">=</operator> <literal type="number" pos:start="89:25" pos:end="89:25">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:72">(<expr pos:start="91:13" pos:end="91:71"><operator pos:start="91:13" pos:end="91:13">(</operator><operator pos:start="91:14" pos:end="91:14">(</operator><name pos:start="91:15" pos:end="91:33"><name pos:start="91:15" pos:end="91:18">intr</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:33">ev_buffer_put</name></name><operator pos:start="91:34" pos:end="91:34">+</operator><literal type="number" pos:start="91:35" pos:end="91:35">1</literal><operator pos:start="91:36" pos:end="91:36">)</operator> <operator pos:start="91:38" pos:end="91:38">%</operator> <name pos:start="91:40" pos:end="91:47">EV_QUEUE</name><operator pos:start="91:48" pos:end="91:48">)</operator> <operator pos:start="91:50" pos:end="91:51">==</operator> <name pos:start="91:53" pos:end="91:71"><name pos:start="91:53" pos:end="91:56">intr</name><operator pos:start="91:57" pos:end="91:58">-&gt;</operator><name pos:start="91:59" pos:end="91:71">ev_buffer_get</name></name></expr>)</condition> <block pos:start="91:74" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:19">

            <expr_stmt pos:start="93:13" pos:end="93:65"><expr pos:start="93:13" pos:end="93:64"><call pos:start="93:13" pos:end="93:64"><name pos:start="93:13" pos:end="93:19">DPRINTF</name><argument_list pos:start="93:20" pos:end="93:64">(<argument pos:start="93:21" pos:end="93:63"><expr pos:start="93:21" pos:end="93:63"><literal type="string" pos:start="93:21" pos:end="93:63">"xhci: event queue full, dropping event!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:56"><expr pos:start="99:9" pos:end="99:55"><name pos:start="99:9" pos:end="99:46"><name pos:start="99:9" pos:end="99:12">intr</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:23">ev_buffer</name><index pos:start="99:24" pos:end="99:46">[<expr pos:start="99:25" pos:end="99:45"><name pos:start="99:25" pos:end="99:43"><name pos:start="99:25" pos:end="99:28">intr</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:43">ev_buffer_put</name></name><operator pos:start="99:44" pos:end="99:45">++</operator></expr>]</index></name> <operator pos:start="99:48" pos:end="99:48">=</operator> <operator pos:start="99:50" pos:end="99:50">*</operator><name pos:start="99:51" pos:end="99:55">event</name></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:44">(<expr pos:start="101:13" pos:end="101:43"><name pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:16">intr</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:31">ev_buffer_put</name></name> <operator pos:start="101:33" pos:end="101:34">==</operator> <name pos:start="101:36" pos:end="101:43">EV_QUEUE</name></expr>)</condition> <block pos:start="101:46" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:36">

            <expr_stmt pos:start="103:13" pos:end="103:36"><expr pos:start="103:13" pos:end="103:35"><name pos:start="103:13" pos:end="103:31"><name pos:start="103:13" pos:end="103:16">intr</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:31">ev_buffer_put</name></name> <operator pos:start="103:33" pos:end="103:33">=</operator> <literal type="number" pos:start="103:35" pos:end="103:35">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:41">

        <expr_stmt pos:start="109:9" pos:end="109:41"><expr pos:start="109:9" pos:end="109:40"><call pos:start="109:9" pos:end="109:40"><name pos:start="109:9" pos:end="109:24">xhci_write_event</name><argument_list pos:start="109:25" pos:end="109:40">(<argument pos:start="109:26" pos:end="109:29"><expr pos:start="109:26" pos:end="109:29"><name pos:start="109:26" pos:end="109:29">xhci</name></expr></argument>, <argument pos:start="109:32" pos:end="109:36"><expr pos:start="109:32" pos:end="109:36"><name pos:start="109:32" pos:end="109:36">event</name></expr></argument>, <argument pos:start="109:39" pos:end="109:39"><expr pos:start="109:39" pos:end="109:39"><name pos:start="109:39" pos:end="109:39">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><call pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:19">xhci_intr_raise</name><argument_list pos:start="115:20" pos:end="115:28">(<argument pos:start="115:21" pos:end="115:24"><expr pos:start="115:21" pos:end="115:24"><name pos:start="115:21" pos:end="115:24">xhci</name></expr></argument>, <argument pos:start="115:27" pos:end="115:27"><expr pos:start="115:27" pos:end="115:27"><name pos:start="115:27" pos:end="115:27">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
