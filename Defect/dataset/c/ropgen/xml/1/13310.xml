<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13310.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:25">__stdcall</name></type> <name pos:start="1:27" pos:end="1:45">win32_start_routine</name><parameter_list pos:start="1:46" pos:end="1:56">(<parameter pos:start="1:47" pos:end="1:55"><decl pos:start="1:47" pos:end="1:55"><type pos:start="1:47" pos:end="1:52"><name pos:start="1:47" pos:end="1:50">void</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:12">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:25">QemuThreadData</name></name></type> <name pos:start="5:27" pos:end="5:30">data</name> <init pos:start="5:32" pos:end="5:63">= <expr pos:start="5:34" pos:end="5:63"><operator pos:start="5:34" pos:end="5:34">*</operator><operator pos:start="5:35" pos:end="5:35">(</operator>struct <name pos:start="5:43" pos:end="5:56">QemuThreadData</name> <operator pos:start="5:58" pos:end="5:58">*</operator><operator pos:start="5:59" pos:end="5:59">)</operator> <name pos:start="5:61" pos:end="5:63">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">QemuThread</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:22">thread</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:29">data</name><operator pos:start="7:30" pos:end="7:30">.</operator><name pos:start="7:31" pos:end="7:36">thread</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:14"><expr pos:start="11:5" pos:end="11:13"><call pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:8">free</name><argument_list pos:start="11:9" pos:end="11:13">(<argument pos:start="11:10" pos:end="11:12"><expr pos:start="11:10" pos:end="11:12"><name pos:start="11:10" pos:end="11:12">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><call pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:15">TlsSetValue</name><argument_list pos:start="13:16" pos:end="13:46">(<argument pos:start="13:17" pos:end="13:37"><expr pos:start="13:17" pos:end="13:37"><name pos:start="13:17" pos:end="13:37">qemu_thread_tls_index</name></expr></argument>, <argument pos:start="13:40" pos:end="13:45"><expr pos:start="13:40" pos:end="13:45"><name pos:start="13:40" pos:end="13:45">thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="25:7">/*

     * Use DuplicateHandle instead of assigning thread-&gt;thread in the

     * creating thread to avoid races.  It's simpler this way than with

     * synchronization.

     */</comment>

    <expr_stmt pos:start="27:5" pos:end="31:53"><expr pos:start="27:5" pos:end="31:52"><call pos:start="27:5" pos:end="31:52"><name pos:start="27:5" pos:end="27:19">DuplicateHandle</name><argument_list pos:start="27:20" pos:end="31:52">(<argument pos:start="27:21" pos:end="27:39"><expr pos:start="27:21" pos:end="27:39"><call pos:start="27:21" pos:end="27:39"><name pos:start="27:21" pos:end="27:37">GetCurrentProcess</name><argument_list pos:start="27:38" pos:end="27:39">()</argument_list></call></expr></argument>, <argument pos:start="27:42" pos:end="27:59"><expr pos:start="27:42" pos:end="27:59"><call pos:start="27:42" pos:end="27:59"><name pos:start="27:42" pos:end="27:57">GetCurrentThread</name><argument_list pos:start="27:58" pos:end="27:59">()</argument_list></call></expr></argument>,

                    <argument pos:start="29:21" pos:end="29:39"><expr pos:start="29:21" pos:end="29:39"><call pos:start="29:21" pos:end="29:39"><name pos:start="29:21" pos:end="29:37">GetCurrentProcess</name><argument_list pos:start="29:38" pos:end="29:39">()</argument_list></call></expr></argument>, <argument pos:start="29:42" pos:end="29:56"><expr pos:start="29:42" pos:end="29:56"><operator pos:start="29:42" pos:end="29:42">&amp;</operator><name pos:start="29:43" pos:end="29:56"><name pos:start="29:43" pos:end="29:48">thread</name><operator pos:start="29:49" pos:end="29:50">-&gt;</operator><name pos:start="29:51" pos:end="29:56">thread</name></name></expr></argument>,

                    <argument pos:start="31:21" pos:end="31:21"><expr pos:start="31:21" pos:end="31:21"><literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr></argument>, <argument pos:start="31:24" pos:end="31:28"><expr pos:start="31:24" pos:end="31:28"><name pos:start="31:24" pos:end="31:28">FALSE</name></expr></argument>, <argument pos:start="31:31" pos:end="31:51"><expr pos:start="31:31" pos:end="31:51"><name pos:start="31:31" pos:end="31:51">DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:51"><expr pos:start="35:5" pos:end="35:50"><call pos:start="35:5" pos:end="35:50"><name pos:start="35:5" pos:end="35:20">qemu_thread_exit</name><argument_list pos:start="35:21" pos:end="35:50">(<argument pos:start="35:22" pos:end="35:49"><expr pos:start="35:22" pos:end="35:49"><call pos:start="35:22" pos:end="35:49"><name pos:start="35:22" pos:end="35:39"><name pos:start="35:22" pos:end="35:25">data</name><operator pos:start="35:26" pos:end="35:26">.</operator><name pos:start="35:27" pos:end="35:39">start_routine</name></name><argument_list pos:start="35:40" pos:end="35:49">(<argument pos:start="35:41" pos:end="35:48"><expr pos:start="35:41" pos:end="35:48"><name pos:start="35:41" pos:end="35:48"><name pos:start="35:41" pos:end="35:44">data</name><operator pos:start="35:45" pos:end="35:45">.</operator><name pos:start="35:46" pos:end="35:48">arg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:12"><expr pos:start="37:5" pos:end="37:11"><call pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:9">abort</name><argument_list pos:start="37:10" pos:end="37:11">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
