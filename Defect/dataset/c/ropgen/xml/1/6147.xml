<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6147.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:48"><name pos:start="1:1" pos:end="1:12">vu_queue_pop</name><argument_list pos:start="1:13" pos:end="1:48">(<argument pos:start="1:14" pos:end="1:23">VuDev *dev</argument>, <argument pos:start="1:26" pos:end="1:36">VuVirtq *vq</argument>, <argument pos:start="1:39" pos:end="1:47">size_t sz</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="5:5" pos:end="179:16">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">i</name></decl>, <decl pos:start="5:21" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:21" pos:end="5:24">head</name></decl>, <decl pos:start="5:27" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:27" pos:end="5:29">max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">VuVirtqElement</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">elem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:20">out_num</name></decl>, <decl pos:start="9:23" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:23" pos:end="9:28">in_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:16">iovec</name></name></type> <name pos:start="11:18" pos:end="11:40"><name pos:start="11:18" pos:end="11:20">iov</name><index pos:start="11:21" pos:end="11:40">[<expr pos:start="11:22" pos:end="11:39"><name pos:start="11:22" pos:end="11:39">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:21">vring_desc</name></name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:27">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">rc</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:30">(<expr pos:start="19:9" pos:end="19:29"><call pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:16">unlikely</name><argument_list pos:start="19:17" pos:end="19:29">(<argument pos:start="19:18" pos:end="19:28"><expr pos:start="19:18" pos:end="19:28"><name pos:start="19:18" pos:end="19:28"><name pos:start="19:18" pos:end="19:20">dev</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:28">broken</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:32" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:20">

        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:32">(<expr pos:start="27:9" pos:end="27:31"><call pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:22">vu_queue_empty</name><argument_list pos:start="27:23" pos:end="27:31">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">dev</name></expr></argument>, <argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><name pos:start="27:29" pos:end="27:30">vq</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:34" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:20">

        <return pos:start="29:9" pos:end="29:20">return <expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="33:5" pos:end="35:32">/* Needed after virtio_queue_empty(), see comment in

     * virtqueue_num_heads(). */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><call pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">smp_rmb</name><argument_list pos:start="37:12" pos:end="37:13">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:66">/* When we start there are none of either input nor output. */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:11">out_num</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:20">in_num</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:24"><expr pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:7">max</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <name pos:start="47:11" pos:end="47:23"><name pos:start="47:11" pos:end="47:12">vq</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:19">vring</name><operator pos:start="47:20" pos:end="47:20">.</operator><name pos:start="47:21" pos:end="47:23">num</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:35">(<expr pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:10">vq</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:17">inuse</name></name> <operator pos:start="49:19" pos:end="49:20">&gt;=</operator> <name pos:start="49:22" pos:end="49:34"><name pos:start="49:22" pos:end="49:23">vq</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:30">vring</name><operator pos:start="49:31" pos:end="49:31">.</operator><name pos:start="49:32" pos:end="49:34">num</name></name></expr>)</condition> <block pos:start="49:37" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:20">

        <expr_stmt pos:start="51:9" pos:end="51:49"><expr pos:start="51:9" pos:end="51:48"><call pos:start="51:9" pos:end="51:48"><name pos:start="51:9" pos:end="51:16">vu_panic</name><argument_list pos:start="51:17" pos:end="51:48">(<argument pos:start="51:18" pos:end="51:20"><expr pos:start="51:18" pos:end="51:20"><name pos:start="51:18" pos:end="51:20">dev</name></expr></argument>, <argument pos:start="51:23" pos:end="51:47"><expr pos:start="51:23" pos:end="51:47"><literal type="string" pos:start="51:23" pos:end="51:47">"Virtqueue size exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:20">return <expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:66">(<expr pos:start="59:9" pos:end="59:65"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:65"><name pos:start="59:10" pos:end="59:27">virtqueue_get_head</name><argument_list pos:start="59:28" pos:end="59:65">(<argument pos:start="59:29" pos:end="59:31"><expr pos:start="59:29" pos:end="59:31"><name pos:start="59:29" pos:end="59:31">dev</name></expr></argument>, <argument pos:start="59:34" pos:end="59:35"><expr pos:start="59:34" pos:end="59:35"><name pos:start="59:34" pos:end="59:35">vq</name></expr></argument>, <argument pos:start="59:38" pos:end="59:57"><expr pos:start="59:38" pos:end="59:57"><name pos:start="59:38" pos:end="59:55"><name pos:start="59:38" pos:end="59:39">vq</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:55">last_avail_idx</name></name><operator pos:start="59:56" pos:end="59:57">++</operator></expr></argument>, <argument pos:start="59:60" pos:end="59:64"><expr pos:start="59:60" pos:end="59:64"><operator pos:start="59:60" pos:end="59:60">&amp;</operator><name pos:start="59:61" pos:end="59:64">head</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:68" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:20">

        <return pos:start="61:9" pos:end="61:20">return <expr pos:start="61:16" pos:end="61:19"><name pos:start="61:16" pos:end="61:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:53">(<expr pos:start="67:9" pos:end="67:52"><call pos:start="67:9" pos:end="67:52"><name pos:start="67:9" pos:end="67:22">vu_has_feature</name><argument_list pos:start="67:23" pos:end="67:52">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">dev</name></expr></argument>, <argument pos:start="67:29" pos:end="67:51"><expr pos:start="67:29" pos:end="67:51"><name pos:start="67:29" pos:end="67:51">VIRTIO_RING_F_EVENT_IDX</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:55" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:54">

        <expr_stmt pos:start="69:9" pos:end="69:54"><expr pos:start="69:9" pos:end="69:53"><call pos:start="69:9" pos:end="69:53"><name pos:start="69:9" pos:end="69:29">vring_set_avail_event</name><argument_list pos:start="69:30" pos:end="69:53">(<argument pos:start="69:31" pos:end="69:32"><expr pos:start="69:31" pos:end="69:32"><name pos:start="69:31" pos:end="69:32">vq</name></expr></argument>, <argument pos:start="69:35" pos:end="69:52"><expr pos:start="69:35" pos:end="69:52"><name pos:start="69:35" pos:end="69:52"><name pos:start="69:35" pos:end="69:36">vq</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:52">last_avail_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:13"><expr pos:start="75:5" pos:end="75:12"><name pos:start="75:5" pos:end="75:5">i</name> <operator pos:start="75:7" pos:end="75:7">=</operator> <name pos:start="75:9" pos:end="75:12">head</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:26"><expr pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:8">desc</name> <operator pos:start="77:10" pos:end="77:10">=</operator> <name pos:start="77:12" pos:end="77:25"><name pos:start="77:12" pos:end="77:13">vq</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:20">vring</name><operator pos:start="77:21" pos:end="77:21">.</operator><name pos:start="77:22" pos:end="77:25">desc</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="97:5"><if pos:start="79:5" pos:end="97:5">if <condition pos:start="79:8" pos:end="79:46">(<expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">desc</name><index pos:start="79:13" pos:end="79:15">[<expr pos:start="79:14" pos:end="79:14"><name pos:start="79:14" pos:end="79:14">i</name></expr>]</index></name><operator pos:start="79:16" pos:end="79:16">.</operator><name pos:start="79:17" pos:end="79:21">flags</name> <operator pos:start="79:23" pos:end="79:23">&amp;</operator> <name pos:start="79:25" pos:end="79:45">VRING_DESC_F_INDIRECT</name></expr>)</condition> <block pos:start="79:48" pos:end="97:5">{<block_content pos:start="81:9" pos:end="95:14">

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:52">(<expr pos:start="81:13" pos:end="81:51"><name pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:16">desc</name><index pos:start="81:17" pos:end="81:19">[<expr pos:start="81:18" pos:end="81:18"><name pos:start="81:18" pos:end="81:18">i</name></expr>]</index></name><operator pos:start="81:20" pos:end="81:20">.</operator><name pos:start="81:21" pos:end="81:23">len</name> <operator pos:start="81:25" pos:end="81:25">%</operator> <sizeof pos:start="81:27" pos:end="81:51">sizeof<argument_list pos:start="81:33" pos:end="81:51">(<argument pos:start="81:34" pos:end="81:50"><expr pos:start="81:34" pos:end="81:50">struct <name pos:start="81:41" pos:end="81:50">vring_desc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="81:54" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:68">

            <expr_stmt pos:start="83:13" pos:end="83:68"><expr pos:start="83:13" pos:end="83:67"><call pos:start="83:13" pos:end="83:67"><name pos:start="83:13" pos:end="83:20">vu_panic</name><argument_list pos:start="83:21" pos:end="83:67">(<argument pos:start="83:22" pos:end="83:24"><expr pos:start="83:22" pos:end="83:24"><name pos:start="83:22" pos:end="83:24">dev</name></expr></argument>, <argument pos:start="83:27" pos:end="83:66"><expr pos:start="83:27" pos:end="83:66"><literal type="string" pos:start="83:27" pos:end="83:66">"Invalid size for indirect buffer table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:53">/* loop over the indirect descriptor table */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:54"><expr pos:start="91:9" pos:end="91:53"><name pos:start="91:9" pos:end="91:11">max</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:21"><name pos:start="91:15" pos:end="91:18">desc</name><index pos:start="91:19" pos:end="91:21">[<expr pos:start="91:20" pos:end="91:20"><name pos:start="91:20" pos:end="91:20">i</name></expr>]</index></name><operator pos:start="91:22" pos:end="91:22">.</operator><name pos:start="91:23" pos:end="91:25">len</name> <operator pos:start="91:27" pos:end="91:27">/</operator> <sizeof pos:start="91:29" pos:end="91:53">sizeof<argument_list pos:start="91:35" pos:end="91:53">(<argument pos:start="91:36" pos:end="91:52"><expr pos:start="91:36" pos:end="91:52">struct <name pos:start="91:43" pos:end="91:52">vring_desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:47"><expr pos:start="93:9" pos:end="93:46"><name pos:start="93:9" pos:end="93:12">desc</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <call pos:start="93:16" pos:end="93:46"><name pos:start="93:16" pos:end="93:27">vu_gpa_to_va</name><argument_list pos:start="93:28" pos:end="93:46">(<argument pos:start="93:29" pos:end="93:31"><expr pos:start="93:29" pos:end="93:31"><name pos:start="93:29" pos:end="93:31">dev</name></expr></argument>, <argument pos:start="93:34" pos:end="93:45"><expr pos:start="93:34" pos:end="93:45"><name pos:start="93:34" pos:end="93:40"><name pos:start="93:34" pos:end="93:37">desc</name><index pos:start="93:38" pos:end="93:40">[<expr pos:start="93:39" pos:end="93:39"><name pos:start="93:39" pos:end="93:39">i</name></expr>]</index></name><operator pos:start="93:41" pos:end="93:41">.</operator><name pos:start="93:42" pos:end="93:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:14"><expr pos:start="95:9" pos:end="95:13"><name pos:start="95:9" pos:end="95:9">i</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <literal type="number" pos:start="95:13" pos:end="95:13">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:37">/* Collect all the descriptors */</comment>

    <do pos:start="103:5" pos:end="143:45">do <block pos:start="103:8" pos:end="143:5">{<block_content pos:start="105:9" pos:end="141:61">

        <if_stmt pos:start="105:9" pos:end="129:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:47">(<expr pos:start="105:13" pos:end="105:46"><name pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:16">desc</name><index pos:start="105:17" pos:end="105:19">[<expr pos:start="105:18" pos:end="105:18"><name pos:start="105:18" pos:end="105:18">i</name></expr>]</index></name><operator pos:start="105:20" pos:end="105:20">.</operator><name pos:start="105:21" pos:end="105:25">flags</name> <operator pos:start="105:27" pos:end="105:27">&amp;</operator> <name pos:start="105:29" pos:end="105:46">VRING_DESC_F_WRITE</name></expr>)</condition> <block pos:start="105:49" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:58">

            <expr_stmt pos:start="107:13" pos:end="111:58"><expr pos:start="107:13" pos:end="111:57"><call pos:start="107:13" pos:end="111:57"><name pos:start="107:13" pos:end="107:30">virtqueue_map_desc</name><argument_list pos:start="107:31" pos:end="111:57">(<argument pos:start="107:32" pos:end="107:34"><expr pos:start="107:32" pos:end="107:34"><name pos:start="107:32" pos:end="107:34">dev</name></expr></argument>, <argument pos:start="107:37" pos:end="107:43"><expr pos:start="107:37" pos:end="107:43"><operator pos:start="107:37" pos:end="107:37">&amp;</operator><name pos:start="107:38" pos:end="107:43">in_num</name></expr></argument>, <argument pos:start="107:46" pos:end="107:58"><expr pos:start="107:46" pos:end="107:58"><name pos:start="107:46" pos:end="107:48">iov</name> <operator pos:start="107:50" pos:end="107:50">+</operator> <name pos:start="107:52" pos:end="107:58">out_num</name></expr></argument>,

                               <argument pos:start="109:32" pos:end="109:59"><expr pos:start="109:32" pos:end="109:59"><name pos:start="109:32" pos:end="109:49">VIRTQUEUE_MAX_SIZE</name> <operator pos:start="109:51" pos:end="109:51">-</operator> <name pos:start="109:53" pos:end="109:59">out_num</name></expr></argument>, <argument pos:start="109:62" pos:end="109:65"><expr pos:start="109:62" pos:end="109:65"><name pos:start="109:62" pos:end="109:65">true</name></expr></argument>,

                               <argument pos:start="111:32" pos:end="111:43"><expr pos:start="111:32" pos:end="111:43"><name pos:start="111:32" pos:end="111:38"><name pos:start="111:32" pos:end="111:35">desc</name><index pos:start="111:36" pos:end="111:38">[<expr pos:start="111:37" pos:end="111:37"><name pos:start="111:37" pos:end="111:37">i</name></expr>]</index></name><operator pos:start="111:39" pos:end="111:39">.</operator><name pos:start="111:40" pos:end="111:43">addr</name></expr></argument>, <argument pos:start="111:46" pos:end="111:56"><expr pos:start="111:46" pos:end="111:56"><name pos:start="111:46" pos:end="111:52"><name pos:start="111:46" pos:end="111:49">desc</name><index pos:start="111:50" pos:end="111:52">[<expr pos:start="111:51" pos:end="111:51"><name pos:start="111:51" pos:end="111:51">i</name></expr>]</index></name><operator pos:start="111:53" pos:end="111:53">.</operator><name pos:start="111:54" pos:end="111:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="113:11" pos:end="129:9">else <block pos:start="113:16" pos:end="129:9">{<block_content pos:start="115:13" pos:end="127:58">

            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:23">(<expr pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:22">in_num</name></expr>)</condition> <block pos:start="115:25" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:28">

                <expr_stmt pos:start="117:17" pos:end="117:65"><expr pos:start="117:17" pos:end="117:64"><call pos:start="117:17" pos:end="117:64"><name pos:start="117:17" pos:end="117:24">vu_panic</name><argument_list pos:start="117:25" pos:end="117:64">(<argument pos:start="117:26" pos:end="117:28"><expr pos:start="117:26" pos:end="117:28"><name pos:start="117:26" pos:end="117:28">dev</name></expr></argument>, <argument pos:start="117:31" pos:end="117:63"><expr pos:start="117:31" pos:end="117:63"><literal type="string" pos:start="117:31" pos:end="117:63">"Incorrect order for descriptors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="119:17" pos:end="119:28">return <expr pos:start="119:24" pos:end="119:27"><name pos:start="119:24" pos:end="119:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="127:58"><expr pos:start="123:13" pos:end="127:57"><call pos:start="123:13" pos:end="127:57"><name pos:start="123:13" pos:end="123:30">virtqueue_map_desc</name><argument_list pos:start="123:31" pos:end="127:57">(<argument pos:start="123:32" pos:end="123:34"><expr pos:start="123:32" pos:end="123:34"><name pos:start="123:32" pos:end="123:34">dev</name></expr></argument>, <argument pos:start="123:37" pos:end="123:44"><expr pos:start="123:37" pos:end="123:44"><operator pos:start="123:37" pos:end="123:37">&amp;</operator><name pos:start="123:38" pos:end="123:44">out_num</name></expr></argument>, <argument pos:start="123:47" pos:end="123:49"><expr pos:start="123:47" pos:end="123:49"><name pos:start="123:47" pos:end="123:49">iov</name></expr></argument>,

                               <argument pos:start="125:32" pos:end="125:49"><expr pos:start="125:32" pos:end="125:49"><name pos:start="125:32" pos:end="125:49">VIRTQUEUE_MAX_SIZE</name></expr></argument>, <argument pos:start="125:52" pos:end="125:56"><expr pos:start="125:52" pos:end="125:56"><name pos:start="125:52" pos:end="125:56">false</name></expr></argument>,

                               <argument pos:start="127:32" pos:end="127:43"><expr pos:start="127:32" pos:end="127:43"><name pos:start="127:32" pos:end="127:38"><name pos:start="127:32" pos:end="127:35">desc</name><index pos:start="127:36" pos:end="127:38">[<expr pos:start="127:37" pos:end="127:37"><name pos:start="127:37" pos:end="127:37">i</name></expr>]</index></name><operator pos:start="127:39" pos:end="127:39">.</operator><name pos:start="127:40" pos:end="127:43">addr</name></expr></argument>, <argument pos:start="127:46" pos:end="127:56"><expr pos:start="127:46" pos:end="127:56"><name pos:start="127:46" pos:end="127:52"><name pos:start="127:46" pos:end="127:49">desc</name><index pos:start="127:50" pos:end="127:52">[<expr pos:start="127:51" pos:end="127:51"><name pos:start="127:51" pos:end="127:51">i</name></expr>]</index></name><operator pos:start="127:53" pos:end="127:53">.</operator><name pos:start="127:54" pos:end="127:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="133:9" pos:end="133:68">/* If we've got too many, that implies a descriptor loop. */</comment>

        <if_stmt pos:start="135:9" pos:end="139:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:37">(<expr pos:start="135:13" pos:end="135:36"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:19">in_num</name> <operator pos:start="135:21" pos:end="135:21">+</operator> <name pos:start="135:23" pos:end="135:29">out_num</name><operator pos:start="135:30" pos:end="135:30">)</operator> <operator pos:start="135:32" pos:end="135:32">&gt;</operator> <name pos:start="135:34" pos:end="135:36">max</name></expr>)</condition> <block pos:start="135:39" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:47">

            <expr_stmt pos:start="137:13" pos:end="137:47"><expr pos:start="137:13" pos:end="137:46"><call pos:start="137:13" pos:end="137:46"><name pos:start="137:13" pos:end="137:20">vu_panic</name><argument_list pos:start="137:21" pos:end="137:46">(<argument pos:start="137:22" pos:end="137:24"><expr pos:start="137:22" pos:end="137:24"><name pos:start="137:22" pos:end="137:24">dev</name></expr></argument>, <argument pos:start="137:27" pos:end="137:45"><expr pos:start="137:27" pos:end="137:45"><literal type="string" pos:start="137:27" pos:end="137:45">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:61"><expr pos:start="141:9" pos:end="141:60"><name pos:start="141:9" pos:end="141:10">rc</name> <operator pos:start="141:12" pos:end="141:12">=</operator> <call pos:start="141:14" pos:end="141:60"><name pos:start="141:14" pos:end="141:37">virtqueue_read_next_desc</name><argument_list pos:start="141:38" pos:end="141:60">(<argument pos:start="141:39" pos:end="141:41"><expr pos:start="141:39" pos:end="141:41"><name pos:start="141:39" pos:end="141:41">dev</name></expr></argument>, <argument pos:start="141:44" pos:end="141:47"><expr pos:start="141:44" pos:end="141:47"><name pos:start="141:44" pos:end="141:47">desc</name></expr></argument>, <argument pos:start="141:50" pos:end="141:50"><expr pos:start="141:50" pos:end="141:50"><name pos:start="141:50" pos:end="141:50">i</name></expr></argument>, <argument pos:start="141:53" pos:end="141:55"><expr pos:start="141:53" pos:end="141:55"><name pos:start="141:53" pos:end="141:55">max</name></expr></argument>, <argument pos:start="141:58" pos:end="141:59"><expr pos:start="141:58" pos:end="141:59"><operator pos:start="141:58" pos:end="141:58">&amp;</operator><name pos:start="141:59" pos:end="141:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="143:13" pos:end="143:44">(<expr pos:start="143:14" pos:end="143:43"><name pos:start="143:14" pos:end="143:15">rc</name> <operator pos:start="143:17" pos:end="143:18">==</operator> <name pos:start="143:20" pos:end="143:43">VIRTQUEUE_READ_DESC_MORE</name></expr>)</condition>;</do>



    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:40">(<expr pos:start="147:9" pos:end="147:39"><name pos:start="147:9" pos:end="147:10">rc</name> <operator pos:start="147:12" pos:end="147:13">==</operator> <name pos:start="147:15" pos:end="147:39">VIRTQUEUE_READ_DESC_ERROR</name></expr>)</condition> <block pos:start="147:42" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:20">

        <return pos:start="149:9" pos:end="149:20">return <expr pos:start="149:16" pos:end="149:19"><name pos:start="149:16" pos:end="149:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:52">/* Now copy what we have collected and mapped */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:56"><expr pos:start="157:5" pos:end="157:55"><name pos:start="157:5" pos:end="157:8">elem</name> <operator pos:start="157:10" pos:end="157:10">=</operator> <call pos:start="157:12" pos:end="157:55"><name pos:start="157:12" pos:end="157:34">virtqueue_alloc_element</name><argument_list pos:start="157:35" pos:end="157:55">(<argument pos:start="157:36" pos:end="157:37"><expr pos:start="157:36" pos:end="157:37"><name pos:start="157:36" pos:end="157:37">sz</name></expr></argument>, <argument pos:start="157:40" pos:end="157:46"><expr pos:start="157:40" pos:end="157:46"><name pos:start="157:40" pos:end="157:46">out_num</name></expr></argument>, <argument pos:start="157:49" pos:end="157:54"><expr pos:start="157:49" pos:end="157:54"><name pos:start="157:49" pos:end="157:54">in_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:23"><expr pos:start="159:5" pos:end="159:22"><name pos:start="159:5" pos:end="159:15"><name pos:start="159:5" pos:end="159:8">elem</name><operator pos:start="159:9" pos:end="159:10">-&gt;</operator><name pos:start="159:11" pos:end="159:15">index</name></name> <operator pos:start="159:17" pos:end="159:17">=</operator> <name pos:start="159:19" pos:end="159:22">head</name></expr>;</expr_stmt>

    <for pos:start="161:5" pos:end="165:5">for <control pos:start="161:9" pos:end="161:33">(<init pos:start="161:10" pos:end="161:15"><expr pos:start="161:10" pos:end="161:14"><name pos:start="161:10" pos:end="161:10">i</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <literal type="number" pos:start="161:14" pos:end="161:14">0</literal></expr>;</init> <condition pos:start="161:17" pos:end="161:28"><expr pos:start="161:17" pos:end="161:27"><name pos:start="161:17" pos:end="161:17">i</name> <operator pos:start="161:19" pos:end="161:19">&lt;</operator> <name pos:start="161:21" pos:end="161:27">out_num</name></expr>;</condition> <incr pos:start="161:30" pos:end="161:32"><expr pos:start="161:30" pos:end="161:32"><name pos:start="161:30" pos:end="161:30">i</name><operator pos:start="161:31" pos:end="161:32">++</operator></expr></incr>)</control> <block pos:start="161:35" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:33">

        <expr_stmt pos:start="163:9" pos:end="163:33"><expr pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:23"><name pos:start="163:9" pos:end="163:12">elem</name><operator pos:start="163:13" pos:end="163:14">-&gt;</operator><name pos:start="163:15" pos:end="163:20">out_sg</name><index pos:start="163:21" pos:end="163:23">[<expr pos:start="163:22" pos:end="163:22"><name pos:start="163:22" pos:end="163:22">i</name></expr>]</index></name> <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:32"><name pos:start="163:27" pos:end="163:29">iov</name><index pos:start="163:30" pos:end="163:32">[<expr pos:start="163:31" pos:end="163:31"><name pos:start="163:31" pos:end="163:31">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="167:5" pos:end="171:5">for <control pos:start="167:9" pos:end="167:32">(<init pos:start="167:10" pos:end="167:15"><expr pos:start="167:10" pos:end="167:14"><name pos:start="167:10" pos:end="167:10">i</name> <operator pos:start="167:12" pos:end="167:12">=</operator> <literal type="number" pos:start="167:14" pos:end="167:14">0</literal></expr>;</init> <condition pos:start="167:17" pos:end="167:27"><expr pos:start="167:17" pos:end="167:26"><name pos:start="167:17" pos:end="167:17">i</name> <operator pos:start="167:19" pos:end="167:19">&lt;</operator> <name pos:start="167:21" pos:end="167:26">in_num</name></expr>;</condition> <incr pos:start="167:29" pos:end="167:31"><expr pos:start="167:29" pos:end="167:31"><name pos:start="167:29" pos:end="167:29">i</name><operator pos:start="167:30" pos:end="167:31">++</operator></expr></incr>)</control> <block pos:start="167:34" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:42">

        <expr_stmt pos:start="169:9" pos:end="169:42"><expr pos:start="169:9" pos:end="169:41"><name pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:12">elem</name><operator pos:start="169:13" pos:end="169:14">-&gt;</operator><name pos:start="169:15" pos:end="169:19">in_sg</name><index pos:start="169:20" pos:end="169:22">[<expr pos:start="169:21" pos:end="169:21"><name pos:start="169:21" pos:end="169:21">i</name></expr>]</index></name> <operator pos:start="169:24" pos:end="169:24">=</operator> <name pos:start="169:26" pos:end="169:41"><name pos:start="169:26" pos:end="169:28">iov</name><index pos:start="169:29" pos:end="169:41">[<expr pos:start="169:30" pos:end="169:40"><name pos:start="169:30" pos:end="169:36">out_num</name> <operator pos:start="169:38" pos:end="169:38">+</operator> <name pos:start="169:40" pos:end="169:40">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="175:5" pos:end="175:16"><expr pos:start="175:5" pos:end="175:15"><name pos:start="175:5" pos:end="175:13"><name pos:start="175:5" pos:end="175:6">vq</name><operator pos:start="175:7" pos:end="175:8">-&gt;</operator><name pos:start="175:9" pos:end="175:13">inuse</name></name><operator pos:start="175:14" pos:end="175:15">++</operator></expr>;</expr_stmt>



    <return pos:start="179:5" pos:end="179:16">return <expr pos:start="179:12" pos:end="179:15"><name pos:start="179:12" pos:end="179:15">elem</name></expr>;</return>

</block_content>}</block>
</unit>
