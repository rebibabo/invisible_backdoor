<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22668.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">load_symbols</name><parameter_list pos:start="1:25" pos:end="1:73">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><name pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:31">struct</name> <name pos:start="1:33" pos:end="1:38">elfhdr</name></name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">hdr</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:51"><decl pos:start="1:46" pos:end="1:51"><type pos:start="1:46" pos:end="1:51"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:51">fd</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><name pos:start="1:54" pos:end="1:62">abi_ulong</name></type> <name pos:start="1:64" pos:end="1:72">load_bias</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:17">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:16">shnum</name></decl>, <decl pos:start="5:19" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:23">nsyms</name></decl>, <decl pos:start="5:26" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:26" pos:end="5:32">sym_idx</name> <init pos:start="5:34" pos:end="5:36">= <expr pos:start="5:36" pos:end="5:36"><literal type="number" pos:start="5:36" pos:end="5:36">0</literal></expr></init></decl>, <decl pos:start="5:39" pos:end="5:49"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:39" pos:end="5:45">str_idx</name> <init pos:start="5:47" pos:end="5:49">= <expr pos:start="5:49" pos:end="5:49"><literal type="number" pos:start="5:49" pos:end="5:49">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">elf_shdr</name></name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:25">shdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:17">strings</name> <init pos:start="9:19" pos:end="9:24">= <expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:18">syminfo</name></name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:28">= <expr pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:18">elf_sym</name></name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:28">new_syms</name></decl>, <decl pos:start="13:31" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:20"><modifier pos:start="13:31" pos:end="13:31">*</modifier></type><name pos:start="13:32" pos:end="13:35">syms</name> <init pos:start="13:37" pos:end="13:42">= <expr pos:start="13:39" pos:end="13:42"><name pos:start="13:39" pos:end="13:42">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:9">shnum</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <name pos:start="17:13" pos:end="17:24"><name pos:start="17:13" pos:end="17:15">hdr</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:24">e_shnum</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:5">i</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <name pos:start="19:9" pos:end="19:13">shnum</name> <operator pos:start="19:15" pos:end="19:15">*</operator> <sizeof pos:start="19:17" pos:end="19:39">sizeof<argument_list pos:start="19:23" pos:end="19:39">(<argument pos:start="19:24" pos:end="19:38"><expr pos:start="19:24" pos:end="19:38">struct <name pos:start="19:31" pos:end="19:38">elf_shdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:40"><expr pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:8">shdr</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <operator pos:start="21:12" pos:end="21:12">(</operator>struct <name pos:start="21:20" pos:end="21:27">elf_shdr</name> <operator pos:start="21:29" pos:end="21:29">*</operator><operator pos:start="21:30" pos:end="21:30">)</operator><call pos:start="21:31" pos:end="21:39"><name pos:start="21:31" pos:end="21:36">alloca</name><argument_list pos:start="21:37" pos:end="21:39">(<argument pos:start="21:38" pos:end="21:38"><expr pos:start="21:38" pos:end="21:38"><name pos:start="21:38" pos:end="21:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:46">(<expr pos:start="23:9" pos:end="23:45"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:13">pread</name><argument_list pos:start="23:14" pos:end="23:40">(<argument pos:start="23:15" pos:end="23:16"><expr pos:start="23:15" pos:end="23:16"><name pos:start="23:15" pos:end="23:16">fd</name></expr></argument>, <argument pos:start="23:19" pos:end="23:22"><expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">shdr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:25"><expr pos:start="23:25" pos:end="23:25"><name pos:start="23:25" pos:end="23:25">i</name></expr></argument>, <argument pos:start="23:28" pos:end="23:39"><expr pos:start="23:28" pos:end="23:39"><name pos:start="23:28" pos:end="23:39"><name pos:start="23:28" pos:end="23:30">hdr</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:39">e_shoff</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:42" pos:end="23:43">!=</operator> <name pos:start="23:45" pos:end="23:45">i</name></expr>)</condition> <block pos:start="23:48" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:28"><expr pos:start="31:5" pos:end="31:27"><call pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:14">bswap_shdr</name><argument_list pos:start="31:15" pos:end="31:27">(<argument pos:start="31:16" pos:end="31:19"><expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">shdr</name></expr></argument>, <argument pos:start="31:22" pos:end="31:26"><expr pos:start="31:22" pos:end="31:26"><name pos:start="31:22" pos:end="31:26">shnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="45:5">for <control pos:start="33:9" pos:end="33:31">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:26"><expr pos:start="33:17" pos:end="33:25"><name pos:start="33:17" pos:end="33:17">i</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <name pos:start="33:21" pos:end="33:25">shnum</name></expr>;</condition> <incr pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><operator pos:start="33:28" pos:end="33:29">++</operator><name pos:start="33:30" pos:end="33:30">i</name></expr></incr>)</control> <block pos:start="33:33" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:42">(<expr pos:start="35:13" pos:end="35:41"><name pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:16">shdr</name><index pos:start="35:17" pos:end="35:19">[<expr pos:start="35:18" pos:end="35:18"><name pos:start="35:18" pos:end="35:18">i</name></expr>]</index></name><operator pos:start="35:20" pos:end="35:20">.</operator><name pos:start="35:21" pos:end="35:27">sh_type</name> <operator pos:start="35:29" pos:end="35:30">==</operator> <name pos:start="35:32" pos:end="35:41">SHT_SYMTAB</name></expr>)</condition> <block pos:start="35:44" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:23">

            <expr_stmt pos:start="37:13" pos:end="37:24"><expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:19">sym_idx</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:23">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:38"><expr pos:start="39:13" pos:end="39:37"><name pos:start="39:13" pos:end="39:19">str_idx</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:29"><name pos:start="39:23" pos:end="39:26">shdr</name><index pos:start="39:27" pos:end="39:29">[<expr pos:start="39:28" pos:end="39:28"><name pos:start="39:28" pos:end="39:28">i</name></expr>]</index></name><operator pos:start="39:30" pos:end="39:30">.</operator><name pos:start="39:31" pos:end="39:37">sh_link</name></expr>;</expr_stmt>

            <goto pos:start="41:13" pos:end="41:23">goto <name pos:start="41:18" pos:end="41:22">found</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="49:5" pos:end="49:66">/* There will be no symbol table if the file was stripped.  */</comment>

    <return pos:start="51:5" pos:end="51:11">return;</return>



 <label pos:start="55:2" pos:end="55:7"><name pos:start="55:2" pos:end="55:6">found</name>:</label>

    <comment type="block" pos:start="57:5" pos:end="57:65">/* Now know where the strtab and symtab are.  Snarf them.  */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:5">s</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <call pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:17">g_try_new</name><argument_list pos:start="59:18" pos:end="59:36">(<argument pos:start="59:19" pos:end="59:32"><expr pos:start="59:19" pos:end="59:32">struct <name pos:start="59:26" pos:end="59:32">syminfo</name></expr></argument>, <argument pos:start="59:35" pos:end="59:35"><expr pos:start="59:35" pos:end="59:35"><literal type="number" pos:start="59:35" pos:end="59:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:11">(<expr pos:start="61:9" pos:end="61:10"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:10">s</name></expr>)</condition> <block pos:start="61:13" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:21">

        <goto pos:start="63:9" pos:end="63:21">goto <name pos:start="63:14" pos:end="63:20">give_up</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:30"><expr pos:start="69:5" pos:end="69:29"><name pos:start="69:5" pos:end="69:5">i</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <name pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:12">shdr</name><index pos:start="69:13" pos:end="69:21">[<expr pos:start="69:14" pos:end="69:20"><name pos:start="69:14" pos:end="69:20">str_idx</name></expr>]</index></name><operator pos:start="69:22" pos:end="69:22">.</operator><name pos:start="69:23" pos:end="69:29">sh_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:48"><expr pos:start="71:5" pos:end="71:47"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:19">disas_strtab</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <name pos:start="71:23" pos:end="71:29">strings</name> <operator pos:start="71:31" pos:end="71:31">=</operator> <call pos:start="71:33" pos:end="71:47"><name pos:start="71:33" pos:end="71:44">g_try_malloc</name><argument_list pos:start="71:45" pos:end="71:47">(<argument pos:start="71:46" pos:end="71:46"><expr pos:start="71:46" pos:end="71:46"><name pos:start="71:46" pos:end="71:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:72">(<expr pos:start="73:9" pos:end="73:71"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:16">strings</name> <operator pos:start="73:18" pos:end="73:19">||</operator> <call pos:start="73:21" pos:end="73:66"><name pos:start="73:21" pos:end="73:25">pread</name><argument_list pos:start="73:26" pos:end="73:66">(<argument pos:start="73:27" pos:end="73:28"><expr pos:start="73:27" pos:end="73:28"><name pos:start="73:27" pos:end="73:28">fd</name></expr></argument>, <argument pos:start="73:31" pos:end="73:37"><expr pos:start="73:31" pos:end="73:37"><name pos:start="73:31" pos:end="73:37">strings</name></expr></argument>, <argument pos:start="73:40" pos:end="73:40"><expr pos:start="73:40" pos:end="73:40"><name pos:start="73:40" pos:end="73:40">i</name></expr></argument>, <argument pos:start="73:43" pos:end="73:65"><expr pos:start="73:43" pos:end="73:65"><name pos:start="73:43" pos:end="73:55"><name pos:start="73:43" pos:end="73:46">shdr</name><index pos:start="73:47" pos:end="73:55">[<expr pos:start="73:48" pos:end="73:54"><name pos:start="73:48" pos:end="73:54">str_idx</name></expr>]</index></name><operator pos:start="73:56" pos:end="73:56">.</operator><name pos:start="73:57" pos:end="73:65">sh_offset</name></expr></argument>)</argument_list></call> <operator pos:start="73:68" pos:end="73:69">!=</operator> <name pos:start="73:71" pos:end="73:71">i</name></expr>)</condition> <block pos:start="73:74" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:21">

        <goto pos:start="75:9" pos:end="75:21">goto <name pos:start="75:14" pos:end="75:20">give_up</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:30"><expr pos:start="81:5" pos:end="81:29"><name pos:start="81:5" pos:end="81:5">i</name> <operator pos:start="81:7" pos:end="81:7">=</operator> <name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:12">shdr</name><index pos:start="81:13" pos:end="81:21">[<expr pos:start="81:14" pos:end="81:20"><name pos:start="81:14" pos:end="81:20">sym_idx</name></expr>]</index></name><operator pos:start="81:22" pos:end="81:22">.</operator><name pos:start="81:23" pos:end="81:29">sh_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:8">syms</name> <operator pos:start="83:10" pos:end="83:10">=</operator> <call pos:start="83:12" pos:end="83:26"><name pos:start="83:12" pos:end="83:23">g_try_malloc</name><argument_list pos:start="83:24" pos:end="83:26">(<argument pos:start="83:25" pos:end="83:25"><expr pos:start="83:25" pos:end="83:25"><name pos:start="83:25" pos:end="83:25">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:66">(<expr pos:start="85:9" pos:end="85:65"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:13">syms</name> <operator pos:start="85:15" pos:end="85:16">||</operator> <call pos:start="85:18" pos:end="85:60"><name pos:start="85:18" pos:end="85:22">pread</name><argument_list pos:start="85:23" pos:end="85:60">(<argument pos:start="85:24" pos:end="85:25"><expr pos:start="85:24" pos:end="85:25"><name pos:start="85:24" pos:end="85:25">fd</name></expr></argument>, <argument pos:start="85:28" pos:end="85:31"><expr pos:start="85:28" pos:end="85:31"><name pos:start="85:28" pos:end="85:31">syms</name></expr></argument>, <argument pos:start="85:34" pos:end="85:34"><expr pos:start="85:34" pos:end="85:34"><name pos:start="85:34" pos:end="85:34">i</name></expr></argument>, <argument pos:start="85:37" pos:end="85:59"><expr pos:start="85:37" pos:end="85:59"><name pos:start="85:37" pos:end="85:49"><name pos:start="85:37" pos:end="85:40">shdr</name><index pos:start="85:41" pos:end="85:49">[<expr pos:start="85:42" pos:end="85:48"><name pos:start="85:42" pos:end="85:48">sym_idx</name></expr>]</index></name><operator pos:start="85:50" pos:end="85:50">.</operator><name pos:start="85:51" pos:end="85:59">sh_offset</name></expr></argument>)</argument_list></call> <operator pos:start="85:62" pos:end="85:63">!=</operator> <name pos:start="85:65" pos:end="85:65">i</name></expr>)</condition> <block pos:start="85:68" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:21">

        <goto pos:start="87:9" pos:end="87:21">goto <name pos:start="87:14" pos:end="87:20">give_up</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:9">nsyms</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <name pos:start="93:13" pos:end="93:13">i</name> <operator pos:start="93:15" pos:end="93:15">/</operator> <sizeof pos:start="93:17" pos:end="93:38">sizeof<argument_list pos:start="93:23" pos:end="93:38">(<argument pos:start="93:24" pos:end="93:37"><expr pos:start="93:24" pos:end="93:37">struct <name pos:start="93:31" pos:end="93:37">elf_sym</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <for pos:start="95:5" pos:end="129:5">for <control pos:start="95:9" pos:end="95:28">(<init pos:start="95:10" pos:end="95:15"><expr pos:start="95:10" pos:end="95:14"><name pos:start="95:10" pos:end="95:10">i</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>;</init> <condition pos:start="95:17" pos:end="95:26"><expr pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:17">i</name> <operator pos:start="95:19" pos:end="95:19">&lt;</operator> <name pos:start="95:21" pos:end="95:25">nsyms</name></expr>;</condition> <incr/>)</control> <block pos:start="95:30" pos:end="129:5">{<block_content pos:start="97:9" pos:end="127:9">

        <expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><call pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:17">bswap_sym</name><argument_list pos:start="97:18" pos:end="97:27">(<argument pos:start="97:19" pos:end="97:26"><expr pos:start="97:19" pos:end="97:26"><name pos:start="97:19" pos:end="97:22">syms</name> <operator pos:start="97:24" pos:end="97:24">+</operator> <name pos:start="97:26" pos:end="97:26">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="99:9" pos:end="99:55">/* Throw away entries which we do not need.  */</comment>

        <if_stmt pos:start="101:9" pos:end="127:9"><if pos:start="101:9" pos:end="113:9">if <condition pos:start="101:12" pos:end="105:56">(<expr pos:start="101:13" pos:end="105:55"><name pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:16">syms</name><index pos:start="101:17" pos:end="101:19">[<expr pos:start="101:18" pos:end="101:18"><name pos:start="101:18" pos:end="101:18">i</name></expr>]</index></name><operator pos:start="101:20" pos:end="101:20">.</operator><name pos:start="101:21" pos:end="101:28">st_shndx</name> <operator pos:start="101:30" pos:end="101:31">==</operator> <name pos:start="101:33" pos:end="101:41">SHN_UNDEF</name>

            <operator pos:start="103:13" pos:end="103:14">||</operator> <name pos:start="103:16" pos:end="103:22"><name pos:start="103:16" pos:end="103:19">syms</name><index pos:start="103:20" pos:end="103:22">[<expr pos:start="103:21" pos:end="103:21"><name pos:start="103:21" pos:end="103:21">i</name></expr>]</index></name><operator pos:start="103:23" pos:end="103:23">.</operator><name pos:start="103:24" pos:end="103:31">st_shndx</name> <operator pos:start="103:33" pos:end="103:34">&gt;=</operator> <name pos:start="103:36" pos:end="103:48">SHN_LORESERVE</name>

            <operator pos:start="105:13" pos:end="105:14">||</operator> <call pos:start="105:16" pos:end="105:43"><name pos:start="105:16" pos:end="105:26">ELF_ST_TYPE</name><argument_list pos:start="105:27" pos:end="105:43">(<argument pos:start="105:28" pos:end="105:42"><expr pos:start="105:28" pos:end="105:42"><name pos:start="105:28" pos:end="105:34"><name pos:start="105:28" pos:end="105:31">syms</name><index pos:start="105:32" pos:end="105:34">[<expr pos:start="105:33" pos:end="105:33"><name pos:start="105:33" pos:end="105:33">i</name></expr>]</index></name><operator pos:start="105:35" pos:end="105:35">.</operator><name pos:start="105:36" pos:end="105:42">st_info</name></expr></argument>)</argument_list></call> <operator pos:start="105:45" pos:end="105:46">!=</operator> <name pos:start="105:48" pos:end="105:55">STT_FUNC</name></expr>)</condition> <block pos:start="105:58" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:13">

            <if_stmt pos:start="107:13" pos:end="111:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:28">(<expr pos:start="107:17" pos:end="107:27"><name pos:start="107:17" pos:end="107:17">i</name> <operator pos:start="107:19" pos:end="107:19">&lt;</operator> <operator pos:start="107:21" pos:end="107:22">--</operator><name pos:start="107:23" pos:end="107:27">nsyms</name></expr>)</condition> <block pos:start="107:30" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:38">

                <expr_stmt pos:start="109:17" pos:end="109:38"><expr pos:start="109:17" pos:end="109:37"><name pos:start="109:17" pos:end="109:23"><name pos:start="109:17" pos:end="109:20">syms</name><index pos:start="109:21" pos:end="109:23">[<expr pos:start="109:22" pos:end="109:22"><name pos:start="109:22" pos:end="109:22">i</name></expr>]</index></name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:37"><name pos:start="109:27" pos:end="109:30">syms</name><index pos:start="109:31" pos:end="109:37">[<expr pos:start="109:32" pos:end="109:36"><name pos:start="109:32" pos:end="109:36">nsyms</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="113:11" pos:end="127:9">else <block pos:start="113:16" pos:end="127:9">{<block_content pos:start="119:13" pos:end="125:16">

<cpp:if pos:start="115:1" pos:end="115:48">#<cpp:directive pos:start="115:2" pos:end="115:3">if</cpp:directive> <expr pos:start="115:5" pos:end="115:48"><call pos:start="115:5" pos:end="115:23"><name pos:start="115:5" pos:end="115:11">defined</name><argument_list pos:start="115:12" pos:end="115:23">(<argument pos:start="115:13" pos:end="115:22"><expr pos:start="115:13" pos:end="115:22"><name pos:start="115:13" pos:end="115:22">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="115:25" pos:end="115:26">||</operator> <call pos:start="115:28" pos:end="115:48"><name pos:start="115:28" pos:end="115:34">defined</name> <argument_list pos:start="115:36" pos:end="115:48">(<argument pos:start="115:37" pos:end="115:47"><expr pos:start="115:37" pos:end="115:47"><name pos:start="115:37" pos:end="115:47">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <comment type="block" pos:start="117:13" pos:end="117:73">/* The bottom address bit marks a Thumb or MIPS16 symbol.  */</comment>

            <expr_stmt pos:start="119:13" pos:end="122:0"><expr pos:start="119:13" pos:end="119:48"><name pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:16">syms</name><index pos:start="119:17" pos:end="119:19">[<expr pos:start="119:18" pos:end="119:18"><name pos:start="119:18" pos:end="119:18">i</name></expr>]</index></name><operator pos:start="119:20" pos:end="119:20">.</operator><name pos:start="119:21" pos:end="119:28">st_value</name> <operator pos:start="119:30" pos:end="119:31">&amp;=</operator> <operator pos:start="119:33" pos:end="119:33">~</operator><operator pos:start="119:34" pos:end="119:34">(</operator><name pos:start="119:35" pos:end="119:46">target_ulong</name><operator pos:start="119:47" pos:end="119:47">)</operator><literal type="number" pos:start="119:48" pos:end="119:48">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="123:13" pos:end="123:42"><expr pos:start="123:13" pos:end="123:41"><name pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:16">syms</name><index pos:start="123:17" pos:end="123:19">[<expr pos:start="123:18" pos:end="123:18"><name pos:start="123:18" pos:end="123:18">i</name></expr>]</index></name><operator pos:start="123:20" pos:end="123:20">.</operator><name pos:start="123:21" pos:end="123:28">st_value</name> <operator pos:start="123:30" pos:end="123:31">+=</operator> <name pos:start="123:33" pos:end="123:41">load_bias</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:16"><expr pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:13">i</name><operator pos:start="125:14" pos:end="125:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="133:5" pos:end="133:30">/* No "useful" symbol.  */</comment>

    <if_stmt pos:start="135:5" pos:end="139:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:19">(<expr pos:start="135:9" pos:end="135:18"><name pos:start="135:9" pos:end="135:13">nsyms</name> <operator pos:start="135:15" pos:end="135:16">==</operator> <literal type="number" pos:start="135:18" pos:end="135:18">0</literal></expr>)</condition> <block pos:start="135:21" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:21">

        <goto pos:start="137:9" pos:end="137:21">goto <name pos:start="137:14" pos:end="137:20">give_up</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="149:46">/* Attempt to free the storage associated with the local symbols

       that we threw away.  Whether or not this has any effect on the

       memory allocation depends on the malloc implementation and how

       many symbols we managed to discard.  */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:56"><expr pos:start="151:5" pos:end="151:55"><name pos:start="151:5" pos:end="151:12">new_syms</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:55"><name pos:start="151:16" pos:end="151:26">g_try_renew</name><argument_list pos:start="151:27" pos:end="151:55">(<argument pos:start="151:28" pos:end="151:41"><expr pos:start="151:28" pos:end="151:41">struct <name pos:start="151:35" pos:end="151:41">elf_sym</name></expr></argument>, <argument pos:start="151:44" pos:end="151:47"><expr pos:start="151:44" pos:end="151:47"><name pos:start="151:44" pos:end="151:47">syms</name></expr></argument>, <argument pos:start="151:50" pos:end="151:54"><expr pos:start="151:50" pos:end="151:54"><name pos:start="151:50" pos:end="151:54">nsyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="157:5"><if pos:start="153:5" pos:end="157:5">if <condition pos:start="153:8" pos:end="153:25">(<expr pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:16">new_syms</name> <operator pos:start="153:18" pos:end="153:19">==</operator> <name pos:start="153:21" pos:end="153:24">NULL</name></expr>)</condition> <block pos:start="153:27" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:21">

        <goto pos:start="155:9" pos:end="155:21">goto <name pos:start="155:14" pos:end="155:20">give_up</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:20"><expr pos:start="159:5" pos:end="159:19"><name pos:start="159:5" pos:end="159:8">syms</name> <operator pos:start="159:10" pos:end="159:10">=</operator> <name pos:start="159:12" pos:end="159:19">new_syms</name></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:46"><expr pos:start="163:5" pos:end="163:45"><call pos:start="163:5" pos:end="163:45"><name pos:start="163:5" pos:end="163:9">qsort</name><argument_list pos:start="163:10" pos:end="163:45">(<argument pos:start="163:11" pos:end="163:14"><expr pos:start="163:11" pos:end="163:14"><name pos:start="163:11" pos:end="163:14">syms</name></expr></argument>, <argument pos:start="163:17" pos:end="163:21"><expr pos:start="163:17" pos:end="163:21"><name pos:start="163:17" pos:end="163:21">nsyms</name></expr></argument>, <argument pos:start="163:24" pos:end="163:36"><expr pos:start="163:24" pos:end="163:36"><sizeof pos:start="163:24" pos:end="163:36">sizeof<argument_list pos:start="163:30" pos:end="163:36">(<argument pos:start="163:31" pos:end="163:35"><expr pos:start="163:31" pos:end="163:35"><operator pos:start="163:31" pos:end="163:31">*</operator><name pos:start="163:32" pos:end="163:35">syms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="163:39" pos:end="163:44"><expr pos:start="163:39" pos:end="163:44"><name pos:start="163:39" pos:end="163:44">symcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="170:0"><expr pos:start="167:5" pos:end="167:29"><name pos:start="167:5" pos:end="167:21"><name pos:start="167:5" pos:end="167:5">s</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:21">disas_num_syms</name></name> <operator pos:start="167:23" pos:end="167:23">=</operator> <name pos:start="167:25" pos:end="167:29">nsyms</name></expr>;</expr_stmt>

<cpp:if pos:start="169:1" pos:end="169:27">#<cpp:directive pos:start="169:2" pos:end="169:3">if</cpp:directive> <expr pos:start="169:5" pos:end="169:27"><name pos:start="169:5" pos:end="169:13">ELF_CLASS</name> <operator pos:start="169:15" pos:end="169:16">==</operator> <name pos:start="169:18" pos:end="169:27">ELFCLASS32</name></expr></cpp:if>

    <expr_stmt pos:start="171:5" pos:end="174:0"><expr pos:start="171:5" pos:end="171:32"><name pos:start="171:5" pos:end="171:25"><name pos:start="171:5" pos:end="171:5">s</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:19">disas_symtab</name><operator pos:start="171:20" pos:end="171:20">.</operator><name pos:start="171:21" pos:end="171:25">elf32</name></name> <operator pos:start="171:27" pos:end="171:27">=</operator> <name pos:start="171:29" pos:end="171:32">syms</name></expr>;</expr_stmt>

<cpp:else pos:start="173:1" pos:end="173:5">#<cpp:directive pos:start="173:2" pos:end="173:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="175:5" pos:end="178:0"><expr pos:start="175:5" pos:end="175:32"><name pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:19">disas_symtab</name><operator pos:start="175:20" pos:end="175:20">.</operator><name pos:start="175:21" pos:end="175:25">elf64</name></name> <operator pos:start="175:27" pos:end="175:27">=</operator> <name pos:start="175:29" pos:end="175:32">syms</name></expr>;</expr_stmt>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="179:5" pos:end="179:39"><expr pos:start="179:5" pos:end="179:38"><name pos:start="179:5" pos:end="179:20"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:20">lookup_symbol</name></name> <operator pos:start="179:22" pos:end="179:22">=</operator> <name pos:start="179:24" pos:end="179:38">lookup_symbolxx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:23"><expr pos:start="181:5" pos:end="181:22"><name pos:start="181:5" pos:end="181:11"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:11">next</name></name> <operator pos:start="181:13" pos:end="181:13">=</operator> <name pos:start="181:15" pos:end="181:22">syminfos</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:17"><expr pos:start="183:5" pos:end="183:16"><name pos:start="183:5" pos:end="183:12">syminfos</name> <operator pos:start="183:14" pos:end="183:14">=</operator> <name pos:start="183:16" pos:end="183:16">s</name></expr>;</expr_stmt>



    <return pos:start="187:5" pos:end="187:11">return;</return>



<label pos:start="191:1" pos:end="191:8"><name pos:start="191:1" pos:end="191:7">give_up</name>:</label>

    <expr_stmt pos:start="193:5" pos:end="193:14"><expr pos:start="193:5" pos:end="193:13"><call pos:start="193:5" pos:end="193:13"><name pos:start="193:5" pos:end="193:10">g_free</name><argument_list pos:start="193:11" pos:end="193:13">(<argument pos:start="193:12" pos:end="193:12"><expr pos:start="193:12" pos:end="193:12"><name pos:start="193:12" pos:end="193:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:20"><expr pos:start="195:5" pos:end="195:19"><call pos:start="195:5" pos:end="195:19"><name pos:start="195:5" pos:end="195:10">g_free</name><argument_list pos:start="195:11" pos:end="195:19">(<argument pos:start="195:12" pos:end="195:18"><expr pos:start="195:12" pos:end="195:18"><name pos:start="195:12" pos:end="195:18">strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:17"><expr pos:start="197:5" pos:end="197:16"><call pos:start="197:5" pos:end="197:16"><name pos:start="197:5" pos:end="197:10">g_free</name><argument_list pos:start="197:11" pos:end="197:16">(<argument pos:start="197:12" pos:end="197:15"><expr pos:start="197:12" pos:end="197:15"><name pos:start="197:12" pos:end="197:15">syms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
