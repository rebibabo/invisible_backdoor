<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3862.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:41">openpic_cpu_read_internal</name><parameter_list pos:start="1:42" pos:end="3:50">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:67"><decl pos:start="1:57" pos:end="1:67"><type pos:start="1:57" pos:end="1:67"><name pos:start="1:57" pos:end="1:62">hwaddr</name></type> <name pos:start="1:64" pos:end="1:67">addr</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:49"><decl pos:start="3:43" pos:end="3:49"><type pos:start="3:43" pos:end="3:49"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:49">idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="159:1">{<block_content pos:start="7:5" pos:end="157:18">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">OpenPICState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">opp</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">IRQ_src_t</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">IRQ_dst_t</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">n_IRQ</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:73"><expr pos:start="19:5" pos:end="19:72"><call pos:start="19:5" pos:end="19:72"><name pos:start="19:5" pos:end="19:11">DPRINTF</name><argument_list pos:start="19:12" pos:end="19:72">(<argument pos:start="19:13" pos:end="19:50"><expr pos:start="19:13" pos:end="19:50"><literal type="string" pos:start="19:13" pos:end="19:30">"%s: cpu %d addr "</literal> <name pos:start="19:32" pos:end="19:45">TARGET_FMT_plx</name> <literal type="string" pos:start="19:47" pos:end="19:50">"\n"</literal></expr></argument>, <argument pos:start="19:53" pos:end="19:60"><expr pos:start="19:53" pos:end="19:60"><name pos:start="19:53" pos:end="19:60">__func__</name></expr></argument>, <argument pos:start="19:63" pos:end="19:65"><expr pos:start="19:63" pos:end="19:65"><name pos:start="19:63" pos:end="19:65">idx</name></expr></argument>, <argument pos:start="19:68" pos:end="19:71"><expr pos:start="19:68" pos:end="19:71"><name pos:start="19:68" pos:end="19:71">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:10">retval</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:23">0xFFFFFFFF</literal></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">idx</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:22">

        <return pos:start="27:9" pos:end="27:22">return <expr pos:start="27:16" pos:end="27:21"><name pos:start="27:16" pos:end="27:21">retval</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="35:22"><if pos:start="33:5" pos:end="35:22">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:12">addr</name> <operator pos:start="33:14" pos:end="33:14">&amp;</operator> <literal type="number" pos:start="33:16" pos:end="33:18">0xF</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:22"><block_content pos:start="35:9" pos:end="35:22">

        <return pos:start="35:9" pos:end="35:22">return <expr pos:start="35:16" pos:end="35:21"><name pos:start="35:16" pos:end="35:21">retval</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:7">dst</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <operator pos:start="37:11" pos:end="37:11">&amp;</operator><name pos:start="37:12" pos:end="37:24"><name pos:start="37:12" pos:end="37:14">opp</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:19">dst</name><index pos:start="37:20" pos:end="37:24">[<expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">idx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:8">addr</name> <operator pos:start="39:10" pos:end="39:11">&amp;=</operator> <literal type="number" pos:start="39:13" pos:end="39:17">0xFF0</literal></expr>;</expr_stmt>

    <switch pos:start="41:5" pos:end="151:5">switch <condition pos:start="41:12" pos:end="41:17">(<expr pos:start="41:13" pos:end="41:16"><name pos:start="41:13" pos:end="41:16">addr</name></expr>)</condition> <block pos:start="41:19" pos:end="151:5">{<block_content pos:start="43:5" pos:end="149:14">

    <case pos:start="43:5" pos:end="43:14">case <expr pos:start="43:10" pos:end="43:13"><literal type="number" pos:start="43:10" pos:end="43:13">0x80</literal></expr>:</case> <comment type="block" pos:start="43:16" pos:end="43:25">/* PCTP */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:14">retval</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:26"><name pos:start="45:18" pos:end="45:20">dst</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:26">pctp</name></name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:14">case <expr pos:start="49:10" pos:end="49:13"><literal type="number" pos:start="49:10" pos:end="49:13">0x90</literal></expr>:</case> <comment type="block" pos:start="49:16" pos:end="49:27">/* WHOAMI */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:21"><expr pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:14">retval</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:20">idx</name></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><literal type="number" pos:start="55:10" pos:end="55:13">0xA0</literal></expr>:</case> <comment type="block" pos:start="55:16" pos:end="55:25">/* PIAC */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:46"><expr pos:start="57:9" pos:end="57:45"><call pos:start="57:9" pos:end="57:45"><name pos:start="57:9" pos:end="57:15">DPRINTF</name><argument_list pos:start="57:16" pos:end="57:45">(<argument pos:start="57:17" pos:end="57:44"><expr pos:start="57:17" pos:end="57:44"><literal type="string" pos:start="57:17" pos:end="57:44">"Lower OpenPIC INT output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:54"><expr pos:start="59:9" pos:end="59:53"><call pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:22">qemu_irq_lower</name><argument_list pos:start="59:23" pos:end="59:53">(<argument pos:start="59:24" pos:end="59:52"><expr pos:start="59:24" pos:end="59:52"><name pos:start="59:24" pos:end="59:52"><name pos:start="59:24" pos:end="59:26">dst</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:32">irqs</name><index pos:start="59:33" pos:end="59:52">[<expr pos:start="59:34" pos:end="59:51"><name pos:start="59:34" pos:end="59:51">OPENPIC_OUTPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:13">n_IRQ</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:47"><name pos:start="61:17" pos:end="61:28">IRQ_get_next</name><argument_list pos:start="61:29" pos:end="61:47">(<argument pos:start="61:30" pos:end="61:32"><expr pos:start="61:30" pos:end="61:32"><name pos:start="61:30" pos:end="61:32">opp</name></expr></argument>, <argument pos:start="61:35" pos:end="61:46"><expr pos:start="61:35" pos:end="61:46"><operator pos:start="61:35" pos:end="61:35">&amp;</operator><name pos:start="61:36" pos:end="61:46"><name pos:start="61:36" pos:end="61:38">dst</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:46">raised</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><call pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:15">DPRINTF</name><argument_list pos:start="63:16" pos:end="63:40">(<argument pos:start="63:17" pos:end="63:32"><expr pos:start="63:17" pos:end="63:32"><literal type="string" pos:start="63:17" pos:end="63:32">"PIAC: irq=%d\n"</literal></expr></argument>, <argument pos:start="63:35" pos:end="63:39"><expr pos:start="63:35" pos:end="63:39"><name pos:start="63:35" pos:end="63:39">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="137:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:24">(<expr pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:17">n_IRQ</name> <operator pos:start="65:19" pos:end="65:20">==</operator> <operator pos:start="65:22" pos:end="65:22">-</operator><literal type="number" pos:start="65:23" pos:end="65:23">1</literal></expr>)</condition> <block pos:start="65:26" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:31">

            <comment type="block" pos:start="67:13" pos:end="67:43">/* No more interrupt pending */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:31"><expr pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:18">retval</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:30"><name pos:start="69:22" pos:end="69:24">opp</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:30">spve</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="137:9">else <block pos:start="71:16" pos:end="137:9">{<block_content pos:start="73:13" pos:end="135:13">

            <expr_stmt pos:start="73:13" pos:end="73:35"><expr pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:15">src</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <operator pos:start="73:19" pos:end="73:19">&amp;</operator><name pos:start="73:20" pos:end="73:34"><name pos:start="73:20" pos:end="73:22">opp</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:27">src</name><index pos:start="73:28" pos:end="73:34">[<expr pos:start="73:29" pos:end="73:33"><name pos:start="73:29" pos:end="73:33">n_IRQ</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="99:13"><if pos:start="75:13" pos:end="91:13">if <condition pos:start="75:16" pos:end="77:56">(<expr pos:start="75:17" pos:end="77:55"><operator pos:start="75:17" pos:end="75:17">!</operator><operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:27"><name pos:start="75:19" pos:end="75:21">src</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:27">ipvp</name></name> <operator pos:start="75:29" pos:end="75:29">&amp;</operator> <name pos:start="75:31" pos:end="75:48">IPVP_ACTIVITY_MASK</name><operator pos:start="75:49" pos:end="75:49">)</operator> <operator pos:start="75:51" pos:end="75:52">||</operator>

                <operator pos:start="77:17" pos:end="77:17">!</operator><operator pos:start="77:18" pos:end="77:18">(</operator><call pos:start="77:19" pos:end="77:42"><name pos:start="77:19" pos:end="77:31">IPVP_PRIORITY</name><argument_list pos:start="77:32" pos:end="77:42">(<argument pos:start="77:33" pos:end="77:41"><expr pos:start="77:33" pos:end="77:41"><name pos:start="77:33" pos:end="77:41"><name pos:start="77:33" pos:end="77:35">src</name><operator pos:start="77:36" pos:end="77:37">-&gt;</operator><name pos:start="77:38" pos:end="77:41">ipvp</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:44" pos:end="77:44">&gt;</operator> <name pos:start="77:46" pos:end="77:54"><name pos:start="77:46" pos:end="77:48">dst</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:54">pctp</name></name><operator pos:start="77:55" pos:end="77:55">)</operator></expr>)</condition> <block pos:start="77:58" pos:end="91:13">{<block_content pos:start="87:17" pos:end="89:35">

                <comment type="block" pos:start="79:17" pos:end="85:19">/* - Spurious level-sensitive IRQ

                 * - Priorities has been changed

                 *   and the pending IRQ isn't allowed anymore

                 */</comment>

                <expr_stmt pos:start="87:17" pos:end="87:49"><expr pos:start="87:17" pos:end="87:48"><name pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:19">src</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:25">ipvp</name></name> <operator pos:start="87:27" pos:end="87:28">&amp;=</operator> <operator pos:start="87:30" pos:end="87:30">~</operator><name pos:start="87:31" pos:end="87:48">IPVP_ACTIVITY_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:35"><expr pos:start="89:17" pos:end="89:34"><name pos:start="89:17" pos:end="89:22">retval</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <name pos:start="89:26" pos:end="89:34"><name pos:start="89:26" pos:end="89:28">opp</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:34">spve</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="91:15" pos:end="99:13">else <block pos:start="91:20" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:53">

                <comment type="block" pos:start="93:17" pos:end="93:47">/* IRQ enter servicing state */</comment>

                <expr_stmt pos:start="95:17" pos:end="95:51"><expr pos:start="95:17" pos:end="95:50"><call pos:start="95:17" pos:end="95:50"><name pos:start="95:17" pos:end="95:26">IRQ_setbit</name><argument_list pos:start="95:27" pos:end="95:50">(<argument pos:start="95:28" pos:end="95:42"><expr pos:start="95:28" pos:end="95:42"><operator pos:start="95:28" pos:end="95:28">&amp;</operator><name pos:start="95:29" pos:end="95:42"><name pos:start="95:29" pos:end="95:31">dst</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:42">servicing</name></name></expr></argument>, <argument pos:start="95:45" pos:end="95:49"><expr pos:start="95:45" pos:end="95:49"><name pos:start="95:45" pos:end="95:49">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:53"><expr pos:start="97:17" pos:end="97:52"><name pos:start="97:17" pos:end="97:22">retval</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:52"><name pos:start="97:26" pos:end="97:36">IPVP_VECTOR</name><argument_list pos:start="97:37" pos:end="97:52">(<argument pos:start="97:38" pos:end="97:40"><expr pos:start="97:38" pos:end="97:40"><name pos:start="97:38" pos:end="97:40">opp</name></expr></argument>, <argument pos:start="97:43" pos:end="97:51"><expr pos:start="97:43" pos:end="97:51"><name pos:start="97:43" pos:end="97:51"><name pos:start="97:43" pos:end="97:45">src</name><operator pos:start="97:46" pos:end="97:47">-&gt;</operator><name pos:start="97:48" pos:end="97:51">ipvp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:46"><expr pos:start="101:13" pos:end="101:45"><call pos:start="101:13" pos:end="101:45"><name pos:start="101:13" pos:end="101:24">IRQ_resetbit</name><argument_list pos:start="101:25" pos:end="101:45">(<argument pos:start="101:26" pos:end="101:37"><expr pos:start="101:26" pos:end="101:37"><operator pos:start="101:26" pos:end="101:26">&amp;</operator><name pos:start="101:27" pos:end="101:37"><name pos:start="101:27" pos:end="101:29">dst</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:37">raised</name></name></expr></argument>, <argument pos:start="101:40" pos:end="101:44"><expr pos:start="101:40" pos:end="101:44"><name pos:start="101:40" pos:end="101:44">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:34"><expr pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:28"><name pos:start="103:13" pos:end="103:15">dst</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:23">raised</name><operator pos:start="103:24" pos:end="103:24">.</operator><name pos:start="103:25" pos:end="103:28">next</name></name> <operator pos:start="103:30" pos:end="103:30">=</operator> <operator pos:start="103:32" pos:end="103:32">-</operator><literal type="number" pos:start="103:33" pos:end="103:33">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="113:13"><if pos:start="105:13" pos:end="113:13">if <condition pos:start="105:16" pos:end="105:47">(<expr pos:start="105:17" pos:end="105:46"><operator pos:start="105:17" pos:end="105:17">!</operator><operator pos:start="105:18" pos:end="105:18">(</operator><name pos:start="105:19" pos:end="105:27"><name pos:start="105:19" pos:end="105:21">src</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:27">ipvp</name></name> <operator pos:start="105:29" pos:end="105:29">&amp;</operator> <name pos:start="105:31" pos:end="105:45">IPVP_SENSE_MASK</name><operator pos:start="105:46" pos:end="105:46">)</operator></expr>)</condition> <block pos:start="105:49" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:33">

                <comment type="block" pos:start="107:17" pos:end="107:40">/* edge-sensitive IRQ */</comment>

                <expr_stmt pos:start="109:17" pos:end="109:49"><expr pos:start="109:17" pos:end="109:48"><name pos:start="109:17" pos:end="109:25"><name pos:start="109:17" pos:end="109:19">src</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:25">ipvp</name></name> <operator pos:start="109:27" pos:end="109:28">&amp;=</operator> <operator pos:start="109:30" pos:end="109:30">~</operator><name pos:start="109:31" pos:end="109:48">IPVP_ACTIVITY_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:33"><expr pos:start="111:17" pos:end="111:32"><name pos:start="111:17" pos:end="111:28"><name pos:start="111:17" pos:end="111:19">src</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:28">pending</name></name> <operator pos:start="111:30" pos:end="111:30">=</operator> <literal type="number" pos:start="111:32" pos:end="111:32">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="117:13" pos:end="135:13"><if pos:start="117:13" pos:end="135:13">if <condition pos:start="117:16" pos:end="117:81">(<expr pos:start="117:17" pos:end="117:80"><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:22">n_IRQ</name> <operator pos:start="117:24" pos:end="117:25">&gt;=</operator> <name pos:start="117:27" pos:end="117:39"><name pos:start="117:27" pos:end="117:29">opp</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:39">irq_ipi0</name></name><operator pos:start="117:40" pos:end="117:40">)</operator> <operator pos:start="117:42" pos:end="117:43">&amp;&amp;</operator>  <operator pos:start="117:46" pos:end="117:46">(</operator><name pos:start="117:47" pos:end="117:51">n_IRQ</name> <operator pos:start="117:53" pos:end="117:53">&lt;</operator> <operator pos:start="117:55" pos:end="117:55">(</operator><name pos:start="117:56" pos:end="117:68"><name pos:start="117:56" pos:end="117:58">opp</name><operator pos:start="117:59" pos:end="117:60">-&gt;</operator><name pos:start="117:61" pos:end="117:68">irq_ipi0</name></name> <operator pos:start="117:70" pos:end="117:70">+</operator> <name pos:start="117:72" pos:end="117:78">MAX_IPI</name><operator pos:start="117:79" pos:end="117:79">)</operator><operator pos:start="117:80" pos:end="117:80">)</operator></expr>)</condition> <block pos:start="117:83" pos:end="135:13">{<block_content pos:start="119:17" pos:end="133:17">

                <expr_stmt pos:start="119:17" pos:end="119:40"><expr pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:24"><name pos:start="119:17" pos:end="119:19">src</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:24">ide</name></name> <operator pos:start="119:26" pos:end="119:27">&amp;=</operator> <operator pos:start="119:29" pos:end="119:29">~</operator><operator pos:start="119:30" pos:end="119:30">(</operator><literal type="number" pos:start="119:31" pos:end="119:31">1</literal> <operator pos:start="119:33" pos:end="119:34">&lt;&lt;</operator> <name pos:start="119:36" pos:end="119:38">idx</name><operator pos:start="119:39" pos:end="119:39">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="121:17" pos:end="133:17"><if pos:start="121:17" pos:end="133:17">if <condition pos:start="121:20" pos:end="121:63">(<expr pos:start="121:21" pos:end="121:62"><name pos:start="121:21" pos:end="121:28"><name pos:start="121:21" pos:end="121:23">src</name><operator pos:start="121:24" pos:end="121:25">-&gt;</operator><name pos:start="121:26" pos:end="121:28">ide</name></name> <operator pos:start="121:30" pos:end="121:31">&amp;&amp;</operator> <operator pos:start="121:33" pos:end="121:33">!</operator><operator pos:start="121:34" pos:end="121:34">(</operator><name pos:start="121:35" pos:end="121:43"><name pos:start="121:35" pos:end="121:37">src</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:43">ipvp</name></name> <operator pos:start="121:45" pos:end="121:45">&amp;</operator> <name pos:start="121:47" pos:end="121:61">IPVP_SENSE_MASK</name><operator pos:start="121:62" pos:end="121:62">)</operator></expr>)</condition> <block pos:start="121:65" pos:end="133:17">{<block_content pos:start="125:21" pos:end="131:52">

                    <comment type="block" pos:start="123:21" pos:end="123:71">/* trigger on CPUs that didn't know about it yet */</comment>

                    <expr_stmt pos:start="125:21" pos:end="125:51"><expr pos:start="125:21" pos:end="125:50"><call pos:start="125:21" pos:end="125:50"><name pos:start="125:21" pos:end="125:35">openpic_set_irq</name><argument_list pos:start="125:36" pos:end="125:50">(<argument pos:start="125:37" pos:end="125:39"><expr pos:start="125:37" pos:end="125:39"><name pos:start="125:37" pos:end="125:39">opp</name></expr></argument>, <argument pos:start="125:42" pos:end="125:46"><expr pos:start="125:42" pos:end="125:46"><name pos:start="125:42" pos:end="125:46">n_IRQ</name></expr></argument>, <argument pos:start="125:49" pos:end="125:49"><expr pos:start="125:49" pos:end="125:49"><literal type="number" pos:start="125:49" pos:end="125:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:51"><expr pos:start="127:21" pos:end="127:50"><call pos:start="127:21" pos:end="127:50"><name pos:start="127:21" pos:end="127:35">openpic_set_irq</name><argument_list pos:start="127:36" pos:end="127:50">(<argument pos:start="127:37" pos:end="127:39"><expr pos:start="127:37" pos:end="127:39"><name pos:start="127:37" pos:end="127:39">opp</name></expr></argument>, <argument pos:start="127:42" pos:end="127:46"><expr pos:start="127:42" pos:end="127:46"><name pos:start="127:42" pos:end="127:46">n_IRQ</name></expr></argument>, <argument pos:start="127:49" pos:end="127:49"><expr pos:start="127:49" pos:end="127:49"><literal type="number" pos:start="127:49" pos:end="127:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="129:21" pos:end="129:73">/* if all CPUs knew about it, set active bit again */</comment>

                    <expr_stmt pos:start="131:21" pos:end="131:52"><expr pos:start="131:21" pos:end="131:51"><name pos:start="131:21" pos:end="131:29"><name pos:start="131:21" pos:end="131:23">src</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:29">ipvp</name></name> <operator pos:start="131:31" pos:end="131:32">|=</operator> <name pos:start="131:34" pos:end="131:51">IPVP_ACTIVITY_MASK</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:14">case <expr pos:start="141:10" pos:end="141:13"><literal type="number" pos:start="141:10" pos:end="141:13">0xB0</literal></expr>:</case> <comment type="block" pos:start="141:16" pos:end="141:25">/* PEOI */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:19"><expr pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:14">retval</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <literal type="number" pos:start="143:18" pos:end="143:18">0</literal></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <default pos:start="147:5" pos:end="147:12">default:</default>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="153:5" pos:end="153:47"><expr pos:start="153:5" pos:end="153:46"><call pos:start="153:5" pos:end="153:46"><name pos:start="153:5" pos:end="153:11">DPRINTF</name><argument_list pos:start="153:12" pos:end="153:46">(<argument pos:start="153:13" pos:end="153:27"><expr pos:start="153:13" pos:end="153:27"><literal type="string" pos:start="153:13" pos:end="153:27">"%s: =&gt; %08x\n"</literal></expr></argument>, <argument pos:start="153:30" pos:end="153:37"><expr pos:start="153:30" pos:end="153:37"><name pos:start="153:30" pos:end="153:37">__func__</name></expr></argument>, <argument pos:start="153:40" pos:end="153:45"><expr pos:start="153:40" pos:end="153:45"><name pos:start="153:40" pos:end="153:45">retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="157:5" pos:end="157:18">return <expr pos:start="157:12" pos:end="157:17"><name pos:start="157:12" pos:end="157:17">retval</name></expr>;</return>

</block_content>}</block></function>
</unit>
