<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6367.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">gif_image_write_image</name><parameter_list pos:start="1:33" pos:end="5:79">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:46">ByteIOContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">pb</name></decl></parameter>, 

                                 <parameter pos:start="3:34" pos:end="3:39"><decl pos:start="3:34" pos:end="3:39"><type pos:start="3:34" pos:end="3:39"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:39">x1</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:47"><decl pos:start="3:42" pos:end="3:47"><type pos:start="3:42" pos:end="3:47"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:47">y1</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:58"><decl pos:start="3:50" pos:end="3:58"><type pos:start="3:50" pos:end="3:58"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:58">width</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:70"><decl pos:start="3:61" pos:end="3:70"><type pos:start="3:61" pos:end="3:70"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:70">height</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:51"><decl pos:start="5:34" pos:end="5:51"><type pos:start="5:34" pos:end="5:51"><specifier pos:start="5:34" pos:end="5:38">const</specifier> <name pos:start="5:40" pos:end="5:46">uint8_t</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:51">buf</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:65"><decl pos:start="5:54" pos:end="5:65"><type pos:start="5:54" pos:end="5:65"><name pos:start="5:54" pos:end="5:56">int</name></type> <name pos:start="5:58" pos:end="5:65">linesize</name></decl></parameter>, <parameter pos:start="5:68" pos:end="5:78"><decl pos:start="5:68" pos:end="5:78"><type pos:start="5:68" pos:end="5:78"><name pos:start="5:68" pos:end="5:70">int</name></type> <name pos:start="5:72" pos:end="5:78">pix_fmt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="131:1">{<block_content pos:start="9:5" pos:end="129:13">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">PutBitContext</name></type> <name pos:start="9:19" pos:end="9:19">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:23"><name pos:start="11:13" pos:end="11:18">buffer</name><index pos:start="11:19" pos:end="11:23">[<expr pos:start="11:20" pos:end="11:22"><literal type="number" pos:start="11:20" pos:end="11:22">200</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="11:26" pos:end="11:48">/* 100 * 9 / 8 = 113 */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:15">left</name></decl>, <decl pos:start="13:18" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:18">w</name></decl>, <decl pos:start="13:21" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:21">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">ptr</name></decl>;</decl_stmt>

    <comment type="block" pos:start="17:5" pos:end="17:21">/* image block */</comment>



    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><call pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:12">put_byte</name><argument_list pos:start="21:13" pos:end="21:22">(<argument pos:start="21:14" pos:end="21:15"><expr pos:start="21:14" pos:end="21:15"><name pos:start="21:14" pos:end="21:15">pb</name></expr></argument>, <argument pos:start="21:18" pos:end="21:21"><expr pos:start="21:18" pos:end="21:21"><literal type="number" pos:start="21:18" pos:end="21:21">0x2c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><call pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:12">put_le16</name><argument_list pos:start="23:13" pos:end="23:20">(<argument pos:start="23:14" pos:end="23:15"><expr pos:start="23:14" pos:end="23:15"><name pos:start="23:14" pos:end="23:15">pb</name></expr></argument>, <argument pos:start="23:18" pos:end="23:19"><expr pos:start="23:18" pos:end="23:19"><name pos:start="23:18" pos:end="23:19">x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><call pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:12">put_le16</name><argument_list pos:start="25:13" pos:end="25:20">(<argument pos:start="25:14" pos:end="25:15"><expr pos:start="25:14" pos:end="25:15"><name pos:start="25:14" pos:end="25:15">pb</name></expr></argument>, <argument pos:start="25:18" pos:end="25:19"><expr pos:start="25:18" pos:end="25:19"><name pos:start="25:18" pos:end="25:19">y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><call pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:12">put_le16</name><argument_list pos:start="27:13" pos:end="27:23">(<argument pos:start="27:14" pos:end="27:15"><expr pos:start="27:14" pos:end="27:15"><name pos:start="27:14" pos:end="27:15">pb</name></expr></argument>, <argument pos:start="27:18" pos:end="27:22"><expr pos:start="27:18" pos:end="27:22"><name pos:start="27:18" pos:end="27:22">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><call pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:12">put_le16</name><argument_list pos:start="29:13" pos:end="29:24">(<argument pos:start="29:14" pos:end="29:15"><expr pos:start="29:14" pos:end="29:15"><name pos:start="29:14" pos:end="29:15">pb</name></expr></argument>, <argument pos:start="29:18" pos:end="29:23"><expr pos:start="29:18" pos:end="29:23"><name pos:start="29:18" pos:end="29:23">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><call pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:12">put_byte</name><argument_list pos:start="31:13" pos:end="31:22">(<argument pos:start="31:14" pos:end="31:15"><expr pos:start="31:14" pos:end="31:15"><name pos:start="31:14" pos:end="31:15">pb</name></expr></argument>, <argument pos:start="31:18" pos:end="31:21"><expr pos:start="31:18" pos:end="31:21"><literal type="number" pos:start="31:18" pos:end="31:21">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="31:25" pos:end="31:35">/* flags */</comment>

    <comment type="block" pos:start="33:5" pos:end="33:23">/* no local clut */</comment>



    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><call pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:12">put_byte</name><argument_list pos:start="37:13" pos:end="37:22">(<argument pos:start="37:14" pos:end="37:15"><expr pos:start="37:14" pos:end="37:15"><name pos:start="37:14" pos:end="37:15">pb</name></expr></argument>, <argument pos:start="37:18" pos:end="37:21"><expr pos:start="37:18" pos:end="37:21"><literal type="number" pos:start="37:18" pos:end="37:21">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:8">left</name><operator pos:start="41:9" pos:end="41:9">=</operator> <name pos:start="41:11" pos:end="41:15">width</name> <operator pos:start="41:17" pos:end="41:17">*</operator> <name pos:start="41:19" pos:end="41:24">height</name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:35"><expr pos:start="45:5" pos:end="45:34"><call pos:start="45:5" pos:end="45:34"><name pos:start="45:5" pos:end="45:17">init_put_bits</name><argument_list pos:start="45:18" pos:end="45:34">(<argument pos:start="45:19" pos:end="45:20"><expr pos:start="45:19" pos:end="45:20"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:20">p</name></expr></argument>, <argument pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:28">buffer</name></expr></argument>, <argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><literal type="number" pos:start="45:31" pos:end="45:33">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="block" pos:start="49:1" pos:end="55:3">/*

 * the thing here is the bitstream is written as little packets, with a size byte before

 * but it's still the same bitstream between packets (no flush !)

 */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:14"><expr pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:7">ptr</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:13">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:14"><expr pos:start="59:5" pos:end="59:13"><name pos:start="59:5" pos:end="59:5">w</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <name pos:start="59:9" pos:end="59:13">width</name></expr>;</expr_stmt>

    <while pos:start="61:5" pos:end="127:5">while<condition pos:start="61:10" pos:end="61:17">(<expr pos:start="61:11" pos:end="61:16"><name pos:start="61:11" pos:end="61:14">left</name><operator pos:start="61:15" pos:end="61:15">&gt;</operator><literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>)</condition> <block pos:start="61:19" pos:end="127:5">{<block_content pos:start="65:9" pos:end="125:25">



        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:24">gif_put_bits_rev</name><argument_list pos:start="65:25" pos:end="65:39">(<argument pos:start="65:26" pos:end="65:27"><expr pos:start="65:26" pos:end="65:27"><operator pos:start="65:26" pos:end="65:26">&amp;</operator><name pos:start="65:27" pos:end="65:27">p</name></expr></argument>, <argument pos:start="65:30" pos:end="65:30"><expr pos:start="65:30" pos:end="65:30"><literal type="number" pos:start="65:30" pos:end="65:30">9</literal></expr></argument>, <argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><literal type="number" pos:start="65:33" pos:end="65:38">0x0100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="65:42" pos:end="65:57">/* clear code */</comment>



        <for pos:start="69:9" pos:end="95:9">for<control pos:start="69:12" pos:end="69:33">(<init pos:start="69:13" pos:end="69:16"><expr pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:13">i</name><operator pos:start="69:14" pos:end="69:14">=</operator><literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>;</init><condition pos:start="69:17" pos:end="69:29"><expr pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:17">i</name><operator pos:start="69:18" pos:end="69:18">&lt;</operator><name pos:start="69:19" pos:end="69:28">GIF_CHUNKS</name></expr>;</condition><incr pos:start="69:30" pos:end="69:32"><expr pos:start="69:30" pos:end="69:32"><name pos:start="69:30" pos:end="69:30">i</name><operator pos:start="69:31" pos:end="69:32">++</operator></expr></incr>)</control> <block pos:start="69:35" pos:end="95:9">{<block_content pos:start="71:13" pos:end="93:13">

            <if_stmt pos:start="71:13" pos:end="81:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="71:41">(<expr pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:23">pix_fmt</name> <operator pos:start="71:25" pos:end="71:26">==</operator> <name pos:start="71:28" pos:end="71:40">PIX_FMT_RGB24</name></expr>)</condition> <block pos:start="71:43" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:23">

                <expr_stmt pos:start="73:17" pos:end="73:59"><expr pos:start="73:17" pos:end="73:58"><name pos:start="73:17" pos:end="73:17">v</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <call pos:start="73:21" pos:end="73:58"><name pos:start="73:21" pos:end="73:34">gif_clut_index</name><argument_list pos:start="73:35" pos:end="73:58">(<argument pos:start="73:36" pos:end="73:41"><expr pos:start="73:36" pos:end="73:41"><name pos:start="73:36" pos:end="73:41"><name pos:start="73:36" pos:end="73:38">ptr</name><index pos:start="73:39" pos:end="73:41">[<expr pos:start="73:40" pos:end="73:40"><literal type="number" pos:start="73:40" pos:end="73:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:44" pos:end="73:49"><expr pos:start="73:44" pos:end="73:49"><name pos:start="73:44" pos:end="73:49"><name pos:start="73:44" pos:end="73:46">ptr</name><index pos:start="73:47" pos:end="73:49">[<expr pos:start="73:48" pos:end="73:48"><literal type="number" pos:start="73:48" pos:end="73:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:52" pos:end="73:57"><expr pos:start="73:52" pos:end="73:57"><name pos:start="73:52" pos:end="73:57"><name pos:start="73:52" pos:end="73:54">ptr</name><index pos:start="73:55" pos:end="73:57">[<expr pos:start="73:56" pos:end="73:56"><literal type="number" pos:start="73:56" pos:end="73:56">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:23"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:19">ptr</name><operator pos:start="75:20" pos:end="75:21">+=</operator><literal type="number" pos:start="75:22" pos:end="75:22">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="77:15" pos:end="81:13">else <block pos:start="77:20" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:27">

                <expr_stmt pos:start="79:17" pos:end="79:27"><expr pos:start="79:17" pos:end="79:26"><name pos:start="79:17" pos:end="79:17">v</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <operator pos:start="79:21" pos:end="79:21">*</operator><name pos:start="79:22" pos:end="79:24">ptr</name><operator pos:start="79:25" pos:end="79:26">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:39"><expr pos:start="83:13" pos:end="83:38"><call pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:28">gif_put_bits_rev</name><argument_list pos:start="83:29" pos:end="83:38">(<argument pos:start="83:30" pos:end="83:31"><expr pos:start="83:30" pos:end="83:31"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:31">p</name></expr></argument>, <argument pos:start="83:34" pos:end="83:34"><expr pos:start="83:34" pos:end="83:34"><literal type="number" pos:start="83:34" pos:end="83:34">9</literal></expr></argument>, <argument pos:start="83:37" pos:end="83:37"><expr pos:start="83:37" pos:end="83:37"><name pos:start="83:37" pos:end="83:37">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="93:13"><if pos:start="85:13" pos:end="93:13">if <condition pos:start="85:16" pos:end="85:25">(<expr pos:start="85:17" pos:end="85:24"><operator pos:start="85:17" pos:end="85:18">--</operator><name pos:start="85:19" pos:end="85:19">w</name> <operator pos:start="85:21" pos:end="85:22">==</operator> <literal type="number" pos:start="85:24" pos:end="85:24">0</literal></expr>)</condition> <block pos:start="85:27" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:26">

                <expr_stmt pos:start="87:17" pos:end="87:26"><expr pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:17">w</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:25">width</name></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:32"><expr pos:start="89:17" pos:end="89:31"><name pos:start="89:17" pos:end="89:19">buf</name> <operator pos:start="89:21" pos:end="89:22">+=</operator> <name pos:start="89:24" pos:end="89:31">linesize</name></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:26"><expr pos:start="91:17" pos:end="91:25"><name pos:start="91:17" pos:end="91:19">ptr</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <name pos:start="91:23" pos:end="91:25">buf</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if<condition pos:start="99:11" pos:end="99:28">(<expr pos:start="99:12" pos:end="99:27"><name pos:start="99:12" pos:end="99:15">left</name><operator pos:start="99:16" pos:end="99:17">&lt;=</operator><name pos:start="99:18" pos:end="99:27">GIF_CHUNKS</name></expr>)</condition> <block pos:start="99:30" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:39">

            <expr_stmt pos:start="101:13" pos:end="101:43"><expr pos:start="101:13" pos:end="101:42"><call pos:start="101:13" pos:end="101:42"><name pos:start="101:13" pos:end="101:28">gif_put_bits_rev</name><argument_list pos:start="101:29" pos:end="101:42">(<argument pos:start="101:30" pos:end="101:31"><expr pos:start="101:30" pos:end="101:31"><operator pos:start="101:30" pos:end="101:30">&amp;</operator><name pos:start="101:31" pos:end="101:31">p</name></expr></argument>, <argument pos:start="101:34" pos:end="101:34"><expr pos:start="101:34" pos:end="101:34"><literal type="number" pos:start="101:34" pos:end="101:34">9</literal></expr></argument>, <argument pos:start="101:37" pos:end="101:41"><expr pos:start="101:37" pos:end="101:41"><literal type="number" pos:start="101:37" pos:end="101:41">0x101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:45" pos:end="101:63">/* end of stream */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:39"><expr pos:start="103:13" pos:end="103:38"><call pos:start="103:13" pos:end="103:38"><name pos:start="103:13" pos:end="103:34">gif_flush_put_bits_rev</name><argument_list pos:start="103:35" pos:end="103:38">(<argument pos:start="103:36" pos:end="103:37"><expr pos:start="103:36" pos:end="103:37"><operator pos:start="103:36" pos:end="103:36">&amp;</operator><name pos:start="103:37" pos:end="103:37">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if<condition pos:start="107:11" pos:end="107:36">(<expr pos:start="107:12" pos:end="107:35"><call pos:start="107:12" pos:end="107:23"><name pos:start="107:12" pos:end="107:19">pbBufPtr</name><argument_list pos:start="107:20" pos:end="107:23">(<argument pos:start="107:21" pos:end="107:22"><expr pos:start="107:21" pos:end="107:22"><operator pos:start="107:21" pos:end="107:21">&amp;</operator><name pos:start="107:22" pos:end="107:22">p</name></expr></argument>)</argument_list></call> <operator pos:start="107:25" pos:end="107:25">-</operator> <name pos:start="107:27" pos:end="107:31"><name pos:start="107:27" pos:end="107:27">p</name><operator pos:start="107:28" pos:end="107:28">.</operator><name pos:start="107:29" pos:end="107:31">buf</name></name> <operator pos:start="107:33" pos:end="107:33">&gt;</operator> <literal type="number" pos:start="107:35" pos:end="107:35">0</literal></expr>)</condition> <block pos:start="107:38" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:30">

            <expr_stmt pos:start="109:13" pos:end="109:47"><expr pos:start="109:13" pos:end="109:46"><call pos:start="109:13" pos:end="109:46"><name pos:start="109:13" pos:end="109:20">put_byte</name><argument_list pos:start="109:21" pos:end="109:46">(<argument pos:start="109:22" pos:end="109:23"><expr pos:start="109:22" pos:end="109:23"><name pos:start="109:22" pos:end="109:23">pb</name></expr></argument>, <argument pos:start="109:26" pos:end="109:45"><expr pos:start="109:26" pos:end="109:45"><call pos:start="109:26" pos:end="109:37"><name pos:start="109:26" pos:end="109:33">pbBufPtr</name><argument_list pos:start="109:34" pos:end="109:37">(<argument pos:start="109:35" pos:end="109:36"><expr pos:start="109:35" pos:end="109:36"><operator pos:start="109:35" pos:end="109:35">&amp;</operator><name pos:start="109:36" pos:end="109:36">p</name></expr></argument>)</argument_list></call> <operator pos:start="109:39" pos:end="109:39">-</operator> <name pos:start="109:41" pos:end="109:45"><name pos:start="109:41" pos:end="109:41">p</name><operator pos:start="109:42" pos:end="109:42">.</operator><name pos:start="109:43" pos:end="109:45">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:49" pos:end="109:78">/* byte count of the packet */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:56"><expr pos:start="111:13" pos:end="111:55"><call pos:start="111:13" pos:end="111:55"><name pos:start="111:13" pos:end="111:22">put_buffer</name><argument_list pos:start="111:23" pos:end="111:55">(<argument pos:start="111:24" pos:end="111:25"><expr pos:start="111:24" pos:end="111:25"><name pos:start="111:24" pos:end="111:25">pb</name></expr></argument>, <argument pos:start="111:28" pos:end="111:32"><expr pos:start="111:28" pos:end="111:32"><name pos:start="111:28" pos:end="111:32"><name pos:start="111:28" pos:end="111:28">p</name><operator pos:start="111:29" pos:end="111:29">.</operator><name pos:start="111:30" pos:end="111:32">buf</name></name></expr></argument>, <argument pos:start="111:35" pos:end="111:54"><expr pos:start="111:35" pos:end="111:54"><call pos:start="111:35" pos:end="111:46"><name pos:start="111:35" pos:end="111:42">pbBufPtr</name><argument_list pos:start="111:43" pos:end="111:46">(<argument pos:start="111:44" pos:end="111:45"><expr pos:start="111:44" pos:end="111:45"><operator pos:start="111:44" pos:end="111:44">&amp;</operator><name pos:start="111:45" pos:end="111:45">p</name></expr></argument>)</argument_list></call> <operator pos:start="111:48" pos:end="111:48">-</operator> <name pos:start="111:50" pos:end="111:54"><name pos:start="111:50" pos:end="111:50">p</name><operator pos:start="111:51" pos:end="111:51">.</operator><name pos:start="111:52" pos:end="111:54">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="111:58" pos:end="111:80">/* the actual buffer */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:30"><expr pos:start="113:13" pos:end="113:29"><name pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:13">p</name><operator pos:start="113:14" pos:end="113:14">.</operator><name pos:start="113:15" pos:end="113:21">buf_ptr</name></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:29"><name pos:start="113:25" pos:end="113:25">p</name><operator pos:start="113:26" pos:end="113:26">.</operator><name pos:start="113:27" pos:end="113:29">buf</name></name></expr>;</expr_stmt> <comment type="block" pos:start="113:32" pos:end="113:72">/* dequeue the bytes off the bitstream */</comment>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if<condition pos:start="117:11" pos:end="117:28">(<expr pos:start="117:12" pos:end="117:27"><name pos:start="117:12" pos:end="117:15">left</name><operator pos:start="117:16" pos:end="117:17">&lt;=</operator><name pos:start="117:18" pos:end="117:27">GIF_CHUNKS</name></expr>)</condition> <block pos:start="117:30" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:31">

            <expr_stmt pos:start="119:13" pos:end="119:31"><expr pos:start="119:13" pos:end="119:30"><call pos:start="119:13" pos:end="119:30"><name pos:start="119:13" pos:end="119:20">put_byte</name><argument_list pos:start="119:21" pos:end="119:30">(<argument pos:start="119:22" pos:end="119:23"><expr pos:start="119:22" pos:end="119:23"><name pos:start="119:22" pos:end="119:23">pb</name></expr></argument>, <argument pos:start="119:26" pos:end="119:29"><expr pos:start="119:26" pos:end="119:29"><literal type="number" pos:start="119:26" pos:end="119:29">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="119:33" pos:end="119:56">/* end of image block */</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:25"><expr pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:12">left</name><operator pos:start="125:13" pos:end="125:14">-=</operator><name pos:start="125:15" pos:end="125:24">GIF_CHUNKS</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
