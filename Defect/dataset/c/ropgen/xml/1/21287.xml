<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21287.c" pos:tabs="8"><function pos:start="1:1" pos:end="102:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">connect_to_sdog</name><parameter_list pos:start="1:27" pos:end="1:62">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">addr</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">port</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="102:1">{<block_content pos:start="5:5" pos:end="100:14">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:25"><name pos:start="5:10" pos:end="5:13">hbuf</name><index pos:start="5:14" pos:end="5:25">[<expr pos:start="5:15" pos:end="5:24"><name pos:start="5:15" pos:end="5:24">NI_MAXHOST</name></expr>]</index></name></decl>, <decl pos:start="5:28" pos:end="5:43"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:28" pos:end="5:43"><name pos:start="5:28" pos:end="5:31">sbuf</name><index pos:start="5:32" pos:end="5:43">[<expr pos:start="5:33" pos:end="5:42"><name pos:start="5:33" pos:end="5:42">NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>, <decl pos:start="7:13" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:19">addrinfo</name></name></type> <name pos:start="9:21" pos:end="9:25">hints</name></decl>, <decl pos:start="9:28" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:19"><modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:31">res</name></decl>, <decl pos:start="9:34" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:19"><modifier pos:start="9:34" pos:end="9:34">*</modifier></type><name pos:start="9:35" pos:end="9:38">res0</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:14">(<expr pos:start="13:9" pos:end="13:13"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:13">addr</name></expr>)</condition> <block pos:start="13:16" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:31">

        <expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:12">addr</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <name pos:start="15:16" pos:end="15:30">SD_DEFAULT_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:12">port</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:30">SD_DEFAULT_PORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:37"><expr pos:start="23:5" pos:end="23:36"><call pos:start="23:5" pos:end="23:36"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:36">(<argument pos:start="23:12" pos:end="23:17"><expr pos:start="23:12" pos:end="23:17"><operator pos:start="23:12" pos:end="23:12">&amp;</operator><name pos:start="23:13" pos:end="23:17">hints</name></expr></argument>, <argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr></argument>, <argument pos:start="23:23" pos:end="23:35"><expr pos:start="23:23" pos:end="23:35"><sizeof pos:start="23:23" pos:end="23:35">sizeof<argument_list pos:start="23:29" pos:end="23:35">(<argument pos:start="23:30" pos:end="23:34"><expr pos:start="23:30" pos:end="23:34"><name pos:start="23:30" pos:end="23:34">hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:9">hints</name><operator pos:start="25:10" pos:end="25:10">.</operator><name pos:start="25:11" pos:end="25:21">ai_socktype</name></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:35">SOCK_STREAM</name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:49"><expr pos:start="29:5" pos:end="29:48"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:48"><name pos:start="29:11" pos:end="29:21">getaddrinfo</name><argument_list pos:start="29:22" pos:end="29:48">(<argument pos:start="29:23" pos:end="29:26"><expr pos:start="29:23" pos:end="29:26"><name pos:start="29:23" pos:end="29:26">addr</name></expr></argument>, <argument pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><name pos:start="29:29" pos:end="29:32">port</name></expr></argument>, <argument pos:start="29:35" pos:end="29:40"><expr pos:start="29:35" pos:end="29:40"><operator pos:start="29:35" pos:end="29:35">&amp;</operator><name pos:start="29:36" pos:end="29:40">hints</name></expr></argument>, <argument pos:start="29:43" pos:end="29:47"><expr pos:start="29:43" pos:end="29:47"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:47">res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:12">(<expr pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">ret</name></expr>)</condition> <block pos:start="31:14" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:22">

        <expr_stmt pos:start="33:9" pos:end="35:44"><expr pos:start="33:9" pos:end="35:43"><call pos:start="33:9" pos:end="35:43"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="35:43">(<argument pos:start="33:22" pos:end="33:56"><expr pos:start="33:22" pos:end="33:56"><literal type="string" pos:start="33:22" pos:end="33:56">"unable to get address info %s, %s"</literal></expr></argument>,

                     <argument pos:start="35:22" pos:end="35:25"><expr pos:start="35:22" pos:end="35:25"><name pos:start="35:22" pos:end="35:25">addr</name></expr></argument>, <argument pos:start="35:28" pos:end="35:42"><expr pos:start="35:28" pos:end="35:42"><call pos:start="35:28" pos:end="35:42"><name pos:start="35:28" pos:end="35:35">strerror</name><argument_list pos:start="35:36" pos:end="35:42">(<argument pos:start="35:37" pos:end="35:41"><expr pos:start="35:37" pos:end="35:41"><name pos:start="35:37" pos:end="35:41">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:22">return <expr pos:start="37:16" pos:end="37:21"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="43:5" pos:end="90:5">for <control pos:start="43:9" pos:end="43:45">(<init pos:start="43:10" pos:end="43:20"><expr pos:start="43:10" pos:end="43:19"><name pos:start="43:10" pos:end="43:12">res</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:19">res0</name></expr>;</init> <condition pos:start="43:22" pos:end="43:25"><expr pos:start="43:22" pos:end="43:24"><name pos:start="43:22" pos:end="43:24">res</name></expr>;</condition> <incr pos:start="43:27" pos:end="43:44"><expr pos:start="43:27" pos:end="43:44"><name pos:start="43:27" pos:end="43:29">res</name> <operator pos:start="43:31" pos:end="43:31">=</operator> <name pos:start="43:33" pos:end="43:44"><name pos:start="43:33" pos:end="43:35">res</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:44">ai_next</name></name></expr></incr>)</control> <block pos:start="43:47" pos:end="90:5">{<block_content pos:start="45:9" pos:end="88:21">

        <expr_stmt pos:start="45:9" pos:end="47:79"><expr pos:start="45:9" pos:end="47:78"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="47:78"><name pos:start="45:15" pos:end="45:25">getnameinfo</name><argument_list pos:start="45:26" pos:end="47:78">(<argument pos:start="45:27" pos:end="45:38"><expr pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:29">res</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:38">ai_addr</name></name></expr></argument>, <argument pos:start="45:41" pos:end="45:55"><expr pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:43">res</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:55">ai_addrlen</name></name></expr></argument>, <argument pos:start="45:58" pos:end="45:61"><expr pos:start="45:58" pos:end="45:61"><name pos:start="45:58" pos:end="45:61">hbuf</name></expr></argument>, <argument pos:start="45:64" pos:end="45:75"><expr pos:start="45:64" pos:end="45:75"><sizeof pos:start="45:64" pos:end="45:75">sizeof<argument_list pos:start="45:70" pos:end="45:75">(<argument pos:start="45:71" pos:end="45:74"><expr pos:start="45:71" pos:end="45:74"><name pos:start="45:71" pos:end="45:74">hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                          <argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">sbuf</name></expr></argument>, <argument pos:start="47:33" pos:end="47:44"><expr pos:start="47:33" pos:end="47:44"><sizeof pos:start="47:33" pos:end="47:44">sizeof<argument_list pos:start="47:39" pos:end="47:44">(<argument pos:start="47:40" pos:end="47:43"><expr pos:start="47:40" pos:end="47:43"><name pos:start="47:40" pos:end="47:43">sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:47" pos:end="47:77"><expr pos:start="47:47" pos:end="47:77"><name pos:start="47:47" pos:end="47:60">NI_NUMERICHOST</name> <operator pos:start="47:62" pos:end="47:62">|</operator> <name pos:start="47:64" pos:end="47:77">NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:16">(<expr pos:start="49:13" pos:end="49:15"><name pos:start="49:13" pos:end="49:15">ret</name></expr>)</condition> <block pos:start="49:18" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:21">

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:72"><expr pos:start="57:9" pos:end="57:71"><name pos:start="57:9" pos:end="57:10">fd</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:71"><name pos:start="57:14" pos:end="57:19">socket</name><argument_list pos:start="57:20" pos:end="57:71">(<argument pos:start="57:21" pos:end="57:34"><expr pos:start="57:21" pos:end="57:34"><name pos:start="57:21" pos:end="57:34"><name pos:start="57:21" pos:end="57:23">res</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:34">ai_family</name></name></expr></argument>, <argument pos:start="57:37" pos:end="57:52"><expr pos:start="57:37" pos:end="57:52"><name pos:start="57:37" pos:end="57:52"><name pos:start="57:37" pos:end="57:39">res</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:52">ai_socktype</name></name></expr></argument>, <argument pos:start="57:55" pos:end="57:70"><expr pos:start="57:55" pos:end="57:70"><name pos:start="57:55" pos:end="57:70"><name pos:start="57:55" pos:end="57:57">res</name><operator pos:start="57:58" pos:end="57:59">-&gt;</operator><name pos:start="57:60" pos:end="57:70">ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:19">(<expr pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:14">fd</name> <operator pos:start="59:16" pos:end="59:16">&lt;</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>)</condition> <block pos:start="59:21" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:21">

            <continue pos:start="61:13" pos:end="61:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



    <label pos:start="67:5" pos:end="67:14"><name pos:start="67:5" pos:end="67:13">reconnect</name>:</label>

        <expr_stmt pos:start="69:9" pos:end="69:57"><expr pos:start="69:9" pos:end="69:56"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:56"><name pos:start="69:15" pos:end="69:21">connect</name><argument_list pos:start="69:22" pos:end="69:56">(<argument pos:start="69:23" pos:end="69:24"><expr pos:start="69:23" pos:end="69:24"><name pos:start="69:23" pos:end="69:24">fd</name></expr></argument>, <argument pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:29">res</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:38">ai_addr</name></name></expr></argument>, <argument pos:start="69:41" pos:end="69:55"><expr pos:start="69:41" pos:end="69:55"><name pos:start="69:41" pos:end="69:55"><name pos:start="69:41" pos:end="69:43">res</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:55">ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="82:9"><if pos:start="71:9" pos:end="82:9">if <condition pos:start="71:12" pos:end="71:20">(<expr pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">&lt;</operator> <literal type="number" pos:start="71:19" pos:end="71:19">0</literal></expr>)</condition> <block pos:start="71:22" pos:end="82:9">{<block_content pos:start="73:13" pos:end="80:18">

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:31">(<expr pos:start="73:17" pos:end="73:30"><name pos:start="73:17" pos:end="73:21">errno</name> <operator pos:start="73:23" pos:end="73:24">==</operator> <name pos:start="73:26" pos:end="73:30">EINTR</name></expr>)</condition> <block pos:start="73:33" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:31">

                <goto pos:start="75:17" pos:end="75:31">goto <name pos:start="75:22" pos:end="75:30">reconnect</name>;</goto>

            </block_content>}</block></if></if_stmt>


            <break pos:start="80:13" pos:end="80:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="86:9" pos:end="86:52"><expr pos:start="86:9" pos:end="86:51"><call pos:start="86:9" pos:end="86:51"><name pos:start="86:9" pos:end="86:15">dprintf</name><argument_list pos:start="86:16" pos:end="86:51">(<argument pos:start="86:17" pos:end="86:38"><expr pos:start="86:17" pos:end="86:38"><literal type="string" pos:start="86:17" pos:end="86:38">"connected to %s:%s\n"</literal></expr></argument>, <argument pos:start="86:41" pos:end="86:44"><expr pos:start="86:41" pos:end="86:44"><name pos:start="86:41" pos:end="86:44">addr</name></expr></argument>, <argument pos:start="86:47" pos:end="86:50"><expr pos:start="86:47" pos:end="86:50"><name pos:start="86:47" pos:end="86:50">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="88:9" pos:end="88:21">goto <name pos:start="88:14" pos:end="88:20">success</name>;</goto>

    </block_content>}</block></for>

    <expr_stmt pos:start="92:5" pos:end="92:16"><expr pos:start="92:5" pos:end="92:15"><name pos:start="92:5" pos:end="92:6">fd</name> <operator pos:start="92:8" pos:end="92:8">=</operator> <operator pos:start="92:10" pos:end="92:10">-</operator><name pos:start="92:11" pos:end="92:15">errno</name></expr>;</expr_stmt>

    <expr_stmt pos:start="94:5" pos:end="94:56"><expr pos:start="94:5" pos:end="94:55"><call pos:start="94:5" pos:end="94:55"><name pos:start="94:5" pos:end="94:16">error_report</name><argument_list pos:start="94:17" pos:end="94:55">(<argument pos:start="94:18" pos:end="94:42"><expr pos:start="94:18" pos:end="94:42"><literal type="string" pos:start="94:18" pos:end="94:42">"failed connect to %s:%s"</literal></expr></argument>, <argument pos:start="94:45" pos:end="94:48"><expr pos:start="94:45" pos:end="94:48"><name pos:start="94:45" pos:end="94:48">addr</name></expr></argument>, <argument pos:start="94:51" pos:end="94:54"><expr pos:start="94:51" pos:end="94:54"><name pos:start="94:51" pos:end="94:54">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="96:1" pos:end="96:8"><name pos:start="96:1" pos:end="96:7">success</name>:</label>

    <expr_stmt pos:start="98:5" pos:end="98:23"><expr pos:start="98:5" pos:end="98:22"><call pos:start="98:5" pos:end="98:22"><name pos:start="98:5" pos:end="98:16">freeaddrinfo</name><argument_list pos:start="98:17" pos:end="98:22">(<argument pos:start="98:18" pos:end="98:21"><expr pos:start="98:18" pos:end="98:21"><name pos:start="98:18" pos:end="98:21">res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="100:5" pos:end="100:14">return <expr pos:start="100:12" pos:end="100:13"><name pos:start="100:12" pos:end="100:13">fd</name></expr>;</return>

</block_content>}</block></function></unit>
