<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/737.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">BlockDriverAIOCB</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:40">iscsi_aio_ioctl</name><parameter_list pos:start="1:41" pos:end="5:52">(<parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><name pos:start="1:42" pos:end="1:57">BlockDriverState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:61">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:29"><decl pos:start="3:9" pos:end="3:29"><type pos:start="3:9" pos:end="3:29"><name pos:start="3:9" pos:end="3:16">unsigned</name> <name pos:start="3:18" pos:end="3:21">long</name> <name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:29">req</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:40"><decl pos:start="3:32" pos:end="3:40"><type pos:start="3:32" pos:end="3:40"><name pos:start="3:32" pos:end="3:35">void</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:40">buf</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:37"><decl pos:start="5:9" pos:end="5:37"><type pos:start="5:9" pos:end="5:37"><name pos:start="5:9" pos:end="5:33">BlockDriverCompletionFunc</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:37">cb</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:51"><decl pos:start="5:40" pos:end="5:51"><type pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:43">void</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:51">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="205:1">{<block_content pos:start="9:5" pos:end="203:24">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">IscsiLun</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:22">iscsilun</name> <init pos:start="9:24" pos:end="9:35">= <expr pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:27">bs</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:24">iscsi_context</name></name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:31">iscsi</name> <init pos:start="11:33" pos:end="11:49">= <expr pos:start="11:35" pos:end="11:49"><name pos:start="11:35" pos:end="11:49"><name pos:start="11:35" pos:end="11:42">iscsilun</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:49">iscsi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:21">iscsi_data</name></name></type> <name pos:start="13:23" pos:end="13:26">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">IscsiAIOCB</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">acb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><call pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:24">(<argument pos:start="19:12" pos:end="19:23"><expr pos:start="19:12" pos:end="19:23"><name pos:start="19:12" pos:end="19:14">req</name> <operator pos:start="19:16" pos:end="19:17">==</operator> <name pos:start="19:19" pos:end="19:23">SG_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:7">acb</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:57"><name pos:start="23:11" pos:end="23:22">qemu_aio_get</name><argument_list pos:start="23:23" pos:end="23:57">(<argument pos:start="23:24" pos:end="23:40"><expr pos:start="23:24" pos:end="23:40"><operator pos:start="23:24" pos:end="23:24">&amp;</operator><name pos:start="23:25" pos:end="23:40">iscsi_aiocb_info</name></expr></argument>, <argument pos:start="23:43" pos:end="23:44"><expr pos:start="23:43" pos:end="23:44"><name pos:start="23:43" pos:end="23:44">bs</name></expr></argument>, <argument pos:start="23:47" pos:end="23:48"><expr pos:start="23:47" pos:end="23:48"><name pos:start="23:47" pos:end="23:48">cb</name></expr></argument>, <argument pos:start="23:51" pos:end="23:56"><expr pos:start="23:51" pos:end="23:56"><name pos:start="23:51" pos:end="23:56">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:7">acb</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:17">iscsilun</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:28">iscsilun</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:7">acb</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:17">canceled</name></name>    <operator pos:start="29:22" pos:end="29:22">=</operator> <literal type="number" pos:start="29:24" pos:end="29:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:28"><expr pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:7">acb</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:11">bh</name></name>          <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:27">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:7">acb</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:15">status</name></name>      <operator pos:start="33:22" pos:end="33:22">=</operator> <operator pos:start="33:24" pos:end="33:24">-</operator><name pos:start="33:25" pos:end="33:35">EINPROGRESS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:7">acb</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:12">buf</name></name>         <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:27">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:7">acb</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:12">ioh</name></name>         <operator pos:start="37:22" pos:end="37:22">=</operator> <name pos:start="37:24" pos:end="37:26">buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:49"><expr pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:7">acb</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:13">task</name></name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:48"><name pos:start="41:17" pos:end="41:22">malloc</name><argument_list pos:start="41:23" pos:end="41:48">(<argument pos:start="41:24" pos:end="41:47"><expr pos:start="41:24" pos:end="41:47"><sizeof pos:start="41:24" pos:end="41:47">sizeof<argument_list pos:start="41:30" pos:end="41:47">(<argument pos:start="41:31" pos:end="41:46"><expr pos:start="41:31" pos:end="41:46">struct <name pos:start="41:38" pos:end="41:46">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:26">(<expr pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:11">acb</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:17">task</name></name> <operator pos:start="43:19" pos:end="43:20">==</operator> <name pos:start="43:22" pos:end="43:25">NULL</name></expr>)</condition> <block pos:start="43:28" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:20">

        <expr_stmt pos:start="45:9" pos:end="47:45"><expr pos:start="45:9" pos:end="47:44"><call pos:start="45:9" pos:end="47:44"><name pos:start="45:9" pos:end="45:20">error_report</name><argument_list pos:start="45:21" pos:end="47:44">(<argument pos:start="45:22" pos:end="45:74"><expr pos:start="45:22" pos:end="45:74"><literal type="string" pos:start="45:22" pos:end="45:74">"iSCSI: Failed to allocate task for scsi command. %s"</literal></expr></argument>,

                     <argument pos:start="47:22" pos:end="47:43"><expr pos:start="47:22" pos:end="47:43"><call pos:start="47:22" pos:end="47:43"><name pos:start="47:22" pos:end="47:36">iscsi_get_error</name><argument_list pos:start="47:37" pos:end="47:43">(<argument pos:start="47:38" pos:end="47:42"><expr pos:start="47:38" pos:end="47:42"><name pos:start="47:38" pos:end="47:42">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><call pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:24">qemu_aio_release</name><argument_list pos:start="49:25" pos:end="49:29">(<argument pos:start="49:26" pos:end="49:28"><expr pos:start="49:26" pos:end="49:28"><name pos:start="49:26" pos:end="49:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:20">return <expr pos:start="51:16" pos:end="51:19"><name pos:start="51:16" pos:end="51:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:51"><expr pos:start="55:5" pos:end="55:50"><call pos:start="55:5" pos:end="55:50"><name pos:start="55:5" pos:end="55:10">memset</name><argument_list pos:start="55:11" pos:end="55:50">(<argument pos:start="55:12" pos:end="55:20"><expr pos:start="55:12" pos:end="55:20"><name pos:start="55:12" pos:end="55:20"><name pos:start="55:12" pos:end="55:14">acb</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:20">task</name></name></expr></argument>, <argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr></argument>, <argument pos:start="55:26" pos:end="55:49"><expr pos:start="55:26" pos:end="55:49"><sizeof pos:start="55:26" pos:end="55:49">sizeof<argument_list pos:start="55:32" pos:end="55:49">(<argument pos:start="55:33" pos:end="55:48"><expr pos:start="55:33" pos:end="55:48">struct <name pos:start="55:40" pos:end="55:48">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="59:5" pos:end="79:5">switch <condition pos:start="59:12" pos:end="59:38">(<expr pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:15">acb</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:20">ioh</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:37">dxfer_direction</name></name></expr>)</condition> <block pos:start="59:40" pos:end="79:5">{<block_content pos:start="61:5" pos:end="77:14">

    <case pos:start="61:5" pos:end="61:25">case <expr pos:start="61:10" pos:end="61:24"><name pos:start="61:10" pos:end="61:24">SG_DXFER_TO_DEV</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:46"><expr pos:start="63:9" pos:end="63:45"><name pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:11">acb</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:17">task</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:27">xfer_dir</name></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <name pos:start="63:31" pos:end="63:45">SCSI_XFER_WRITE</name></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:27">case <expr pos:start="67:10" pos:end="67:26"><name pos:start="67:10" pos:end="67:26">SG_DXFER_FROM_DEV</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:45"><expr pos:start="69:9" pos:end="69:44"><name pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:11">acb</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:17">task</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:27">xfer_dir</name></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:44">SCSI_XFER_READ</name></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <default pos:start="73:5" pos:end="73:12">default:</default>

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:11">acb</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:17">task</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:27">xfer_dir</name></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <name pos:start="75:31" pos:end="75:44">SCSI_XFER_NONE</name></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="83:5" pos:end="83:44"><expr pos:start="83:5" pos:end="83:43"><name pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:7">acb</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:13">task</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">cdb_size</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <name pos:start="83:27" pos:end="83:43"><name pos:start="83:27" pos:end="83:29">acb</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:34">ioh</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:43">cmd_len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:66"><expr pos:start="85:5" pos:end="85:65"><call pos:start="85:5" pos:end="85:65"><name pos:start="85:5" pos:end="85:10">memcpy</name><argument_list pos:start="85:11" pos:end="85:65">(<argument pos:start="85:12" pos:end="85:29"><expr pos:start="85:12" pos:end="85:29"><operator pos:start="85:12" pos:end="85:12">&amp;</operator><name pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:15">acb</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:21">task</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:26">cdb</name><index pos:start="85:27" pos:end="85:29">[<expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:32" pos:end="85:45"><expr pos:start="85:32" pos:end="85:45"><name pos:start="85:32" pos:end="85:45"><name pos:start="85:32" pos:end="85:34">acb</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:39">ioh</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:45">cmdp</name></name></expr></argument>, <argument pos:start="85:48" pos:end="85:64"><expr pos:start="85:48" pos:end="85:64"><name pos:start="85:48" pos:end="85:64"><name pos:start="85:48" pos:end="85:50">acb</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:55">ioh</name><operator pos:start="85:56" pos:end="85:57">-&gt;</operator><name pos:start="85:58" pos:end="85:64">cmd_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:48"><expr pos:start="87:5" pos:end="87:47"><name pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:7">acb</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:13">task</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:25">expxferlen</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <name pos:start="87:29" pos:end="87:47"><name pos:start="87:29" pos:end="87:31">acb</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:36">ioh</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:47">dxfer_len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:18"><expr pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:13"><name pos:start="91:5" pos:end="91:8">data</name><operator pos:start="91:9" pos:end="91:9">.</operator><name pos:start="91:10" pos:end="91:13">size</name></name> <operator pos:start="91:15" pos:end="91:15">=</operator> <literal type="number" pos:start="91:17" pos:end="91:17">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="129:5"><if pos:start="93:5" pos:end="129:5">if <condition pos:start="93:8" pos:end="93:47">(<expr pos:start="93:9" pos:end="93:46"><name pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:11">acb</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:17">task</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:27">xfer_dir</name></name> <operator pos:start="93:29" pos:end="93:30">==</operator> <name pos:start="93:32" pos:end="93:46">SCSI_XFER_WRITE</name></expr>)</condition> <block pos:start="93:49" pos:end="129:5">{<block_content pos:start="95:9" pos:end="127:9">

        <if_stmt pos:start="95:9" pos:end="127:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:39">(<expr pos:start="95:13" pos:end="95:38"><name pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:15">acb</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:20">ioh</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:33">iovec_count</name></name> <operator pos:start="95:35" pos:end="95:36">==</operator> <literal type="number" pos:start="95:38" pos:end="95:38">0</literal></expr>)</condition> <block pos:start="95:41" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:44">

            <expr_stmt pos:start="97:13" pos:end="97:41"><expr pos:start="97:13" pos:end="97:40"><name pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:16">data</name><operator pos:start="97:17" pos:end="97:17">.</operator><name pos:start="97:18" pos:end="97:21">data</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:40"><name pos:start="97:25" pos:end="97:27">acb</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:32">ioh</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:40">dxferp</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:44"><expr pos:start="99:13" pos:end="99:43"><name pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:16">data</name><operator pos:start="99:17" pos:end="99:17">.</operator><name pos:start="99:18" pos:end="99:21">size</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:43"><name pos:start="99:25" pos:end="99:27">acb</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:32">ioh</name><operator pos:start="99:33" pos:end="99:34">-&gt;</operator><name pos:start="99:35" pos:end="99:43">dxfer_len</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="127:9">else <block pos:start="101:16" pos:end="127:9">{<block_content pos:start="105:13" pos:end="126:0">

<cpp:if pos:start="103:1" pos:end="103:38">#<cpp:directive pos:start="103:2" pos:end="103:3">if</cpp:directive> <expr pos:start="103:5" pos:end="103:38"><call pos:start="103:5" pos:end="103:38"><name pos:start="103:5" pos:end="103:11">defined</name><argument_list pos:start="103:12" pos:end="103:38">(<argument pos:start="103:13" pos:end="103:37"><expr pos:start="103:13" pos:end="103:37"><name pos:start="103:13" pos:end="103:37">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="105:13" pos:end="112:0"><expr pos:start="105:13" pos:end="109:55"><call pos:start="105:13" pos:end="109:55"><name pos:start="105:13" pos:end="105:33">scsi_task_set_iov_out</name><argument_list pos:start="105:34" pos:end="109:55">(<argument pos:start="105:35" pos:end="105:43"><expr pos:start="105:35" pos:end="105:43"><name pos:start="105:35" pos:end="105:43"><name pos:start="105:35" pos:end="105:37">acb</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:43">task</name></name></expr></argument>,

                                 <argument pos:start="107:34" pos:end="107:71"><expr pos:start="107:34" pos:end="107:71"><operator pos:start="107:34" pos:end="107:34">(</operator>struct <name pos:start="107:42" pos:end="107:51">scsi_iovec</name> <operator pos:start="107:53" pos:end="107:53">*</operator><operator pos:start="107:54" pos:end="107:54">)</operator> <name pos:start="107:56" pos:end="107:71"><name pos:start="107:56" pos:end="107:58">acb</name><operator pos:start="107:59" pos:end="107:60">-&gt;</operator><name pos:start="107:61" pos:end="107:63">ioh</name><operator pos:start="107:64" pos:end="107:65">-&gt;</operator><name pos:start="107:66" pos:end="107:71">dxferp</name></name></expr></argument>,

                                 <argument pos:start="109:34" pos:end="109:54"><expr pos:start="109:34" pos:end="109:54"><name pos:start="109:34" pos:end="109:54"><name pos:start="109:34" pos:end="109:36">acb</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:41">ioh</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:54">iovec_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="111:1" pos:end="111:5">#<cpp:directive pos:start="111:2" pos:end="111:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="113:13" pos:end="113:65"><decl pos:start="113:13" pos:end="113:64"><type pos:start="113:13" pos:end="113:26"><name pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:18">struct</name> <name pos:start="113:20" pos:end="113:24">iovec</name></name> <modifier pos:start="113:26" pos:end="113:26">*</modifier></type><name pos:start="113:27" pos:end="113:29">iov</name> <init pos:start="113:31" pos:end="113:64">= <expr pos:start="113:33" pos:end="113:64"><operator pos:start="113:33" pos:end="113:33">(</operator>struct <name pos:start="113:41" pos:end="113:45">iovec</name> <operator pos:start="113:47" pos:end="113:47">*</operator><operator pos:start="113:48" pos:end="113:48">)</operator><name pos:start="113:49" pos:end="113:64"><name pos:start="113:49" pos:end="113:51">acb</name><operator pos:start="113:52" pos:end="113:53">-&gt;</operator><name pos:start="113:54" pos:end="113:56">ioh</name><operator pos:start="113:57" pos:end="113:58">-&gt;</operator><name pos:start="113:59" pos:end="113:64">dxferp</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:53"><expr pos:start="117:13" pos:end="117:52"><name pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:15">acb</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:20">buf</name></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="117:52"><name pos:start="117:24" pos:end="117:31">g_malloc</name><argument_list pos:start="117:32" pos:end="117:52">(<argument pos:start="117:33" pos:end="117:51"><expr pos:start="117:33" pos:end="117:51"><name pos:start="117:33" pos:end="117:51"><name pos:start="117:33" pos:end="117:35">acb</name><operator pos:start="117:36" pos:end="117:37">-&gt;</operator><name pos:start="117:38" pos:end="117:40">ioh</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:51">dxfer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:33"><expr pos:start="119:13" pos:end="119:32"><name pos:start="119:13" pos:end="119:21"><name pos:start="119:13" pos:end="119:16">data</name><operator pos:start="119:17" pos:end="119:17">.</operator><name pos:start="119:18" pos:end="119:21">data</name></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:32"><name pos:start="119:25" pos:end="119:27">acb</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:32">buf</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="126:0"><expr pos:start="121:13" pos:end="123:65"><name pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:16">data</name><operator pos:start="121:17" pos:end="121:17">.</operator><name pos:start="121:18" pos:end="121:21">size</name></name> <operator pos:start="121:23" pos:end="121:23">=</operator> <call pos:start="121:25" pos:end="123:65"><name pos:start="121:25" pos:end="121:34">iov_to_buf</name><argument_list pos:start="121:35" pos:end="123:65">(<argument pos:start="121:36" pos:end="121:38"><expr pos:start="121:36" pos:end="121:38"><name pos:start="121:36" pos:end="121:38">iov</name></expr></argument>, <argument pos:start="121:41" pos:end="121:61"><expr pos:start="121:41" pos:end="121:61"><name pos:start="121:41" pos:end="121:61"><name pos:start="121:41" pos:end="121:43">acb</name><operator pos:start="121:44" pos:end="121:45">-&gt;</operator><name pos:start="121:46" pos:end="121:48">ioh</name><operator pos:start="121:49" pos:end="121:50">-&gt;</operator><name pos:start="121:51" pos:end="121:61">iovec_count</name></name></expr></argument>, <argument pos:start="121:64" pos:end="121:64"><expr pos:start="121:64" pos:end="121:64"><literal type="number" pos:start="121:64" pos:end="121:64">0</literal></expr></argument>,

                                   <argument pos:start="123:36" pos:end="123:43"><expr pos:start="123:36" pos:end="123:43"><name pos:start="123:36" pos:end="123:43"><name pos:start="123:36" pos:end="123:38">acb</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:43">buf</name></name></expr></argument>, <argument pos:start="123:46" pos:end="123:64"><expr pos:start="123:46" pos:end="123:64"><name pos:start="123:46" pos:end="123:64"><name pos:start="123:46" pos:end="123:48">acb</name><operator pos:start="123:49" pos:end="123:50">-&gt;</operator><name pos:start="123:51" pos:end="123:53">ioh</name><operator pos:start="123:54" pos:end="123:55">-&gt;</operator><name pos:start="123:56" pos:end="123:64">dxfer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="147:5"><if pos:start="133:5" pos:end="147:5">if <condition pos:start="133:8" pos:end="139:43">(<expr pos:start="133:9" pos:end="139:42"><call pos:start="133:9" pos:end="139:37"><name pos:start="133:9" pos:end="133:32">iscsi_scsi_command_async</name><argument_list pos:start="133:33" pos:end="139:37">(<argument pos:start="133:34" pos:end="133:38"><expr pos:start="133:34" pos:end="133:38"><name pos:start="133:34" pos:end="133:38">iscsi</name></expr></argument>, <argument pos:start="133:41" pos:end="133:53"><expr pos:start="133:41" pos:end="133:53"><name pos:start="133:41" pos:end="133:53"><name pos:start="133:41" pos:end="133:48">iscsilun</name><operator pos:start="133:49" pos:end="133:50">-&gt;</operator><name pos:start="133:51" pos:end="133:53">lun</name></name></expr></argument>, <argument pos:start="133:56" pos:end="133:64"><expr pos:start="133:56" pos:end="133:64"><name pos:start="133:56" pos:end="133:64"><name pos:start="133:56" pos:end="133:58">acb</name><operator pos:start="133:59" pos:end="133:60">-&gt;</operator><name pos:start="133:61" pos:end="133:64">task</name></name></expr></argument>,

                                 <argument pos:start="135:34" pos:end="135:51"><expr pos:start="135:34" pos:end="135:51"><name pos:start="135:34" pos:end="135:51">iscsi_aio_ioctl_cb</name></expr></argument>,

                                 <argument pos:start="137:34" pos:end="137:63"><expr pos:start="137:34" pos:end="137:63"><ternary pos:start="137:34" pos:end="137:63"><condition pos:start="137:34" pos:end="137:50"><expr pos:start="137:34" pos:end="137:48"><operator pos:start="137:34" pos:end="137:34">(</operator><name pos:start="137:35" pos:end="137:43"><name pos:start="137:35" pos:end="137:38">data</name><operator pos:start="137:39" pos:end="137:39">.</operator><name pos:start="137:40" pos:end="137:43">size</name></name> <operator pos:start="137:45" pos:end="137:45">&gt;</operator> <literal type="number" pos:start="137:47" pos:end="137:47">0</literal><operator pos:start="137:48" pos:end="137:48">)</operator></expr> ?</condition><then pos:start="137:52" pos:end="137:56"> <expr pos:start="137:52" pos:end="137:56"><operator pos:start="137:52" pos:end="137:52">&amp;</operator><name pos:start="137:53" pos:end="137:56">data</name></expr> </then><else pos:start="137:58" pos:end="137:63">: <expr pos:start="137:60" pos:end="137:63"><name pos:start="137:60" pos:end="137:63">NULL</name></expr></else></ternary></expr></argument>,

                                 <argument pos:start="139:34" pos:end="139:36"><expr pos:start="139:34" pos:end="139:36"><name pos:start="139:34" pos:end="139:36">acb</name></expr></argument>)</argument_list></call> <operator pos:start="139:39" pos:end="139:40">!=</operator> <literal type="number" pos:start="139:42" pos:end="139:42">0</literal></expr>)</condition> <block pos:start="139:45" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:20">

        <expr_stmt pos:start="141:9" pos:end="141:39"><expr pos:start="141:9" pos:end="141:38"><call pos:start="141:9" pos:end="141:38"><name pos:start="141:9" pos:end="141:27">scsi_free_scsi_task</name><argument_list pos:start="141:28" pos:end="141:38">(<argument pos:start="141:29" pos:end="141:37"><expr pos:start="141:29" pos:end="141:37"><name pos:start="141:29" pos:end="141:37"><name pos:start="141:29" pos:end="141:31">acb</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:37">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:30"><expr pos:start="143:9" pos:end="143:29"><call pos:start="143:9" pos:end="143:29"><name pos:start="143:9" pos:end="143:24">qemu_aio_release</name><argument_list pos:start="143:25" pos:end="143:29">(<argument pos:start="143:26" pos:end="143:28"><expr pos:start="143:26" pos:end="143:28"><name pos:start="143:26" pos:end="143:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="145:9" pos:end="145:20">return <expr pos:start="145:16" pos:end="145:19"><name pos:start="145:16" pos:end="145:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:74">/* tell libiscsi to read straight into the buffer we got from ioctl */</comment>

    <if_stmt pos:start="153:5" pos:end="195:5"><if pos:start="153:5" pos:end="195:5">if <condition pos:start="153:8" pos:end="153:46">(<expr pos:start="153:9" pos:end="153:45"><name pos:start="153:9" pos:end="153:27"><name pos:start="153:9" pos:end="153:11">acb</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:17">task</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:27">xfer_dir</name></name> <operator pos:start="153:29" pos:end="153:30">==</operator> <name pos:start="153:32" pos:end="153:45">SCSI_XFER_READ</name></expr>)</condition> <block pos:start="153:48" pos:end="195:5">{<block_content pos:start="155:9" pos:end="193:9">

        <if_stmt pos:start="155:9" pos:end="193:9"><if pos:start="155:9" pos:end="163:9">if <condition pos:start="155:12" pos:end="155:39">(<expr pos:start="155:13" pos:end="155:38"><name pos:start="155:13" pos:end="155:33"><name pos:start="155:13" pos:end="155:15">acb</name><operator pos:start="155:16" pos:end="155:17">-&gt;</operator><name pos:start="155:18" pos:end="155:20">ioh</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:33">iovec_count</name></name> <operator pos:start="155:35" pos:end="155:36">==</operator> <literal type="number" pos:start="155:38" pos:end="155:38">0</literal></expr>)</condition> <block pos:start="155:41" pos:end="163:9">{<block_content pos:start="157:13" pos:end="161:59">

            <expr_stmt pos:start="157:13" pos:end="161:59"><expr pos:start="157:13" pos:end="161:58"><call pos:start="157:13" pos:end="161:58"><name pos:start="157:13" pos:end="157:40">scsi_task_add_data_in_buffer</name><argument_list pos:start="157:41" pos:end="161:58">(<argument pos:start="157:42" pos:end="157:50"><expr pos:start="157:42" pos:end="157:50"><name pos:start="157:42" pos:end="157:50"><name pos:start="157:42" pos:end="157:44">acb</name><operator pos:start="157:45" pos:end="157:46">-&gt;</operator><name pos:start="157:47" pos:end="157:50">task</name></name></expr></argument>,

                                         <argument pos:start="159:42" pos:end="159:60"><expr pos:start="159:42" pos:end="159:60"><name pos:start="159:42" pos:end="159:60"><name pos:start="159:42" pos:end="159:44">acb</name><operator pos:start="159:45" pos:end="159:46">-&gt;</operator><name pos:start="159:47" pos:end="159:49">ioh</name><operator pos:start="159:50" pos:end="159:51">-&gt;</operator><name pos:start="159:52" pos:end="159:60">dxfer_len</name></name></expr></argument>,

                                         <argument pos:start="161:42" pos:end="161:57"><expr pos:start="161:42" pos:end="161:57"><name pos:start="161:42" pos:end="161:57"><name pos:start="161:42" pos:end="161:44">acb</name><operator pos:start="161:45" pos:end="161:46">-&gt;</operator><name pos:start="161:47" pos:end="161:49">ioh</name><operator pos:start="161:50" pos:end="161:51">-&gt;</operator><name pos:start="161:52" pos:end="161:57">dxferp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="193:9">else <block pos:start="163:16" pos:end="193:9">{<block_content pos:start="167:13" pos:end="192:0">

<cpp:if pos:start="165:1" pos:end="165:38">#<cpp:directive pos:start="165:2" pos:end="165:3">if</cpp:directive> <expr pos:start="165:5" pos:end="165:38"><call pos:start="165:5" pos:end="165:38"><name pos:start="165:5" pos:end="165:11">defined</name><argument_list pos:start="165:12" pos:end="165:38">(<argument pos:start="165:13" pos:end="165:37"><expr pos:start="165:13" pos:end="165:37"><name pos:start="165:13" pos:end="165:37">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="167:13" pos:end="174:0"><expr pos:start="167:13" pos:end="171:55"><call pos:start="167:13" pos:end="171:55"><name pos:start="167:13" pos:end="167:32">scsi_task_set_iov_in</name><argument_list pos:start="167:33" pos:end="171:55">(<argument pos:start="167:34" pos:end="167:42"><expr pos:start="167:34" pos:end="167:42"><name pos:start="167:34" pos:end="167:42"><name pos:start="167:34" pos:end="167:36">acb</name><operator pos:start="167:37" pos:end="167:38">-&gt;</operator><name pos:start="167:39" pos:end="167:42">task</name></name></expr></argument>,

                                 <argument pos:start="169:34" pos:end="169:71"><expr pos:start="169:34" pos:end="169:71"><operator pos:start="169:34" pos:end="169:34">(</operator>struct <name pos:start="169:42" pos:end="169:51">scsi_iovec</name> <operator pos:start="169:53" pos:end="169:53">*</operator><operator pos:start="169:54" pos:end="169:54">)</operator> <name pos:start="169:56" pos:end="169:71"><name pos:start="169:56" pos:end="169:58">acb</name><operator pos:start="169:59" pos:end="169:60">-&gt;</operator><name pos:start="169:61" pos:end="169:63">ioh</name><operator pos:start="169:64" pos:end="169:65">-&gt;</operator><name pos:start="169:66" pos:end="169:71">dxferp</name></name></expr></argument>,

                                 <argument pos:start="171:34" pos:end="171:54"><expr pos:start="171:34" pos:end="171:54"><name pos:start="171:34" pos:end="171:54"><name pos:start="171:34" pos:end="171:36">acb</name><operator pos:start="171:37" pos:end="171:38">-&gt;</operator><name pos:start="171:39" pos:end="171:41">ioh</name><operator pos:start="171:42" pos:end="171:43">-&gt;</operator><name pos:start="171:44" pos:end="171:54">iovec_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="173:1" pos:end="173:5">#<cpp:directive pos:start="173:2" pos:end="173:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="175:13" pos:end="175:18"><decl pos:start="175:13" pos:end="175:17"><type pos:start="175:13" pos:end="175:15"><name pos:start="175:13" pos:end="175:15">int</name></type> <name pos:start="175:17" pos:end="175:17">i</name></decl>;</decl_stmt>

            <for pos:start="177:13" pos:end="192:0">for <control pos:start="177:17" pos:end="177:55">(<init pos:start="177:18" pos:end="177:23"><expr pos:start="177:18" pos:end="177:22"><name pos:start="177:18" pos:end="177:18">i</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <literal type="number" pos:start="177:22" pos:end="177:22">0</literal></expr>;</init> <condition pos:start="177:25" pos:end="177:50"><expr pos:start="177:25" pos:end="177:49"><name pos:start="177:25" pos:end="177:25">i</name> <operator pos:start="177:27" pos:end="177:27">&lt;</operator> <name pos:start="177:29" pos:end="177:49"><name pos:start="177:29" pos:end="177:31">acb</name><operator pos:start="177:32" pos:end="177:33">-&gt;</operator><name pos:start="177:34" pos:end="177:36">ioh</name><operator pos:start="177:37" pos:end="177:38">-&gt;</operator><name pos:start="177:39" pos:end="177:49">iovec_count</name></name></expr>;</condition> <incr pos:start="177:52" pos:end="177:54"><expr pos:start="177:52" pos:end="177:54"><name pos:start="177:52" pos:end="177:52">i</name><operator pos:start="177:53" pos:end="177:54">++</operator></expr></incr>)</control> <block pos:start="177:57" pos:end="192:0">{<block_content pos:start="179:17" pos:end="187:37">

                <decl_stmt pos:start="179:17" pos:end="179:69"><decl pos:start="179:17" pos:end="179:68"><type pos:start="179:17" pos:end="179:30"><name pos:start="179:17" pos:end="179:28"><name pos:start="179:17" pos:end="179:22">struct</name> <name pos:start="179:24" pos:end="179:28">iovec</name></name> <modifier pos:start="179:30" pos:end="179:30">*</modifier></type><name pos:start="179:31" pos:end="179:33">iov</name> <init pos:start="179:35" pos:end="179:68">= <expr pos:start="179:37" pos:end="179:68"><operator pos:start="179:37" pos:end="179:37">(</operator>struct <name pos:start="179:45" pos:end="179:49">iovec</name> <operator pos:start="179:51" pos:end="179:51">*</operator><operator pos:start="179:52" pos:end="179:52">)</operator><name pos:start="179:53" pos:end="179:68"><name pos:start="179:53" pos:end="179:55">acb</name><operator pos:start="179:56" pos:end="179:57">-&gt;</operator><name pos:start="179:58" pos:end="179:60">ioh</name><operator pos:start="179:61" pos:end="179:62">-&gt;</operator><name pos:start="179:63" pos:end="179:68">dxferp</name></name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="183:17" pos:end="187:37"><expr pos:start="183:17" pos:end="187:36"><call pos:start="183:17" pos:end="187:36"><name pos:start="183:17" pos:end="183:44">scsi_task_add_data_in_buffer</name><argument_list pos:start="183:45" pos:end="187:36">(<argument pos:start="183:46" pos:end="183:54"><expr pos:start="183:46" pos:end="183:54"><name pos:start="183:46" pos:end="183:54"><name pos:start="183:46" pos:end="183:48">acb</name><operator pos:start="183:49" pos:end="183:50">-&gt;</operator><name pos:start="183:51" pos:end="183:54">task</name></name></expr></argument>,

                    <argument pos:start="185:21" pos:end="185:34"><expr pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:26"><name pos:start="185:21" pos:end="185:23">iov</name><index pos:start="185:24" pos:end="185:26">[<expr pos:start="185:25" pos:end="185:25"><name pos:start="185:25" pos:end="185:25">i</name></expr>]</index></name><operator pos:start="185:27" pos:end="185:27">.</operator><name pos:start="185:28" pos:end="185:34">iov_len</name></expr></argument>,

                    <argument pos:start="187:21" pos:end="187:35"><expr pos:start="187:21" pos:end="187:35"><name pos:start="187:21" pos:end="187:26"><name pos:start="187:21" pos:end="187:23">iov</name><index pos:start="187:24" pos:end="187:26">[<expr pos:start="187:25" pos:end="187:25"><name pos:start="187:25" pos:end="187:25">i</name></expr>]</index></name><operator pos:start="187:27" pos:end="187:27">.</operator><name pos:start="187:28" pos:end="187:35">iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:31"><expr pos:start="199:5" pos:end="199:30"><call pos:start="199:5" pos:end="199:30"><name pos:start="199:5" pos:end="199:20">iscsi_set_events</name><argument_list pos:start="199:21" pos:end="199:30">(<argument pos:start="199:22" pos:end="199:29"><expr pos:start="199:22" pos:end="199:29"><name pos:start="199:22" pos:end="199:29">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="203:5" pos:end="203:24">return <expr pos:start="203:12" pos:end="203:23"><operator pos:start="203:12" pos:end="203:12">&amp;</operator><name pos:start="203:13" pos:end="203:23"><name pos:start="203:13" pos:end="203:15">acb</name><operator pos:start="203:16" pos:end="203:17">-&gt;</operator><name pos:start="203:18" pos:end="203:23">common</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
