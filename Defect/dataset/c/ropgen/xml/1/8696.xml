<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8696.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:6">hwaddr</name></type> <name pos:start="1:8" pos:end="1:34">ppc_cpu_get_phys_page_debug</name><parameter_list pos:start="1:35" pos:end="1:60">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:43">CPUState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">cs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:54">vaddr</name></type> <name pos:start="1:56" pos:end="1:59">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:40">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PowerPCCPU</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">cpu</name> <init pos:start="5:21" pos:end="5:37">= <expr pos:start="5:23" pos:end="5:37"><call pos:start="5:23" pos:end="5:37"><name pos:start="5:23" pos:end="5:33">POWERPC_CPU</name><argument_list pos:start="5:34" pos:end="5:37">(<argument pos:start="5:35" pos:end="5:36"><expr pos:start="5:35" pos:end="5:36"><name pos:start="5:35" pos:end="5:36">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUPPCState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">mmu_ctx_t</name></type> <name pos:start="9:15" pos:end="9:17">ctx</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="45:5">switch <condition pos:start="13:12" pos:end="13:27">(<expr pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:15">env</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:26">mmu_model</name></name></expr>)</condition> <block pos:start="13:29" pos:end="45:5">{<block_content pos:start="17:5" pos:end="43:9">

<cpp:if pos:start="15:1" pos:end="15:25">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:25">(<argument pos:start="15:13" pos:end="15:24"><expr pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="17:5" pos:end="17:25">case <expr pos:start="17:10" pos:end="17:24"><name pos:start="17:10" pos:end="17:24">POWERPC_MMU_64B</name></expr>:</case>

    <case pos:start="19:5" pos:end="19:26">case <expr pos:start="19:10" pos:end="19:25"><name pos:start="19:10" pos:end="19:25">POWERPC_MMU_2_03</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:26">case <expr pos:start="21:10" pos:end="21:25"><name pos:start="21:10" pos:end="21:25">POWERPC_MMU_2_06</name></expr>:</case>


    <case pos:start="24:5" pos:end="24:26">case <expr pos:start="24:10" pos:end="24:25"><name pos:start="24:10" pos:end="24:25">POWERPC_MMU_2_07</name></expr>:</case>


        <return pos:start="27:9" pos:end="30:0">return <expr pos:start="27:16" pos:end="27:56"><call pos:start="27:16" pos:end="27:56"><name pos:start="27:16" pos:end="27:45">ppc_hash64_get_phys_page_debug</name><argument_list pos:start="27:46" pos:end="27:56">(<argument pos:start="27:47" pos:end="27:49"><expr pos:start="27:47" pos:end="27:49"><name pos:start="27:47" pos:end="27:49">env</name></expr></argument>, <argument pos:start="27:52" pos:end="27:55"><expr pos:start="27:52" pos:end="27:55"><name pos:start="27:52" pos:end="27:55">addr</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">POWERPC_MMU_32B</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:25">case <expr pos:start="35:10" pos:end="35:24"><name pos:start="35:10" pos:end="35:24">POWERPC_MMU_601</name></expr>:</case>

        <return pos:start="37:9" pos:end="37:57">return <expr pos:start="37:16" pos:end="37:56"><call pos:start="37:16" pos:end="37:56"><name pos:start="37:16" pos:end="37:45">ppc_hash32_get_phys_page_debug</name><argument_list pos:start="37:46" pos:end="37:56">(<argument pos:start="37:47" pos:end="37:49"><expr pos:start="37:47" pos:end="37:49"><name pos:start="37:47" pos:end="37:49">env</name></expr></argument>, <argument pos:start="37:52" pos:end="37:55"><expr pos:start="37:52" pos:end="37:55"><name pos:start="37:52" pos:end="37:55">addr</name></expr></argument>)</argument_list></call></expr>;</return>



    <default pos:start="41:5" pos:end="41:12">default:</default>

        <empty_stmt pos:start="43:9" pos:end="43:9">;</empty_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="49:5" pos:end="69:5"><if pos:start="49:5" pos:end="69:5">if <condition pos:start="49:8" pos:end="49:76">(<expr pos:start="49:9" pos:end="49:75"><call pos:start="49:9" pos:end="49:75"><name pos:start="49:9" pos:end="49:16">unlikely</name><argument_list pos:start="49:17" pos:end="49:75">(<argument pos:start="49:18" pos:end="49:74"><expr pos:start="49:18" pos:end="49:74"><call pos:start="49:18" pos:end="49:69"><name pos:start="49:18" pos:end="49:37">get_physical_address</name><argument_list pos:start="49:38" pos:end="49:69">(<argument pos:start="49:39" pos:end="49:41"><expr pos:start="49:39" pos:end="49:41"><name pos:start="49:39" pos:end="49:41">env</name></expr></argument>, <argument pos:start="49:44" pos:end="49:47"><expr pos:start="49:44" pos:end="49:47"><operator pos:start="49:44" pos:end="49:44">&amp;</operator><name pos:start="49:45" pos:end="49:47">ctx</name></expr></argument>, <argument pos:start="49:50" pos:end="49:53"><expr pos:start="49:50" pos:end="49:53"><name pos:start="49:50" pos:end="49:53">addr</name></expr></argument>, <argument pos:start="49:56" pos:end="49:56"><expr pos:start="49:56" pos:end="49:56"><literal type="number" pos:start="49:56" pos:end="49:56">0</literal></expr></argument>, <argument pos:start="49:59" pos:end="49:68"><expr pos:start="49:59" pos:end="49:68"><name pos:start="49:59" pos:end="49:68">ACCESS_INT</name></expr></argument>)</argument_list></call> <operator pos:start="49:71" pos:end="49:72">!=</operator> <literal type="number" pos:start="49:74" pos:end="49:74">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:78" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:9">



        <comment type="block" pos:start="53:9" pos:end="59:11">/* Some MMUs have separate TLBs for code and data. If we only try an

         * ACCESS_INT, we may not be able to read instructions mapped by code

         * TLBs, so we also try a ACCESS_CODE.

         */</comment>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="63:61">(<expr pos:start="61:13" pos:end="63:60"><call pos:start="61:13" pos:end="63:60"><name pos:start="61:13" pos:end="61:20">unlikely</name><argument_list pos:start="61:21" pos:end="63:60">(<argument pos:start="61:22" pos:end="63:59"><expr pos:start="61:22" pos:end="63:59"><call pos:start="61:22" pos:end="63:54"><name pos:start="61:22" pos:end="61:41">get_physical_address</name><argument_list pos:start="61:42" pos:end="63:54">(<argument pos:start="61:43" pos:end="61:45"><expr pos:start="61:43" pos:end="61:45"><name pos:start="61:43" pos:end="61:45">env</name></expr></argument>, <argument pos:start="61:48" pos:end="61:51"><expr pos:start="61:48" pos:end="61:51"><operator pos:start="61:48" pos:end="61:48">&amp;</operator><name pos:start="61:49" pos:end="61:51">ctx</name></expr></argument>, <argument pos:start="61:54" pos:end="61:57"><expr pos:start="61:54" pos:end="61:57"><name pos:start="61:54" pos:end="61:57">addr</name></expr></argument>, <argument pos:start="61:60" pos:end="61:60"><expr pos:start="61:60" pos:end="61:60"><literal type="number" pos:start="61:60" pos:end="61:60">0</literal></expr></argument>,

                                          <argument pos:start="63:43" pos:end="63:53"><expr pos:start="63:43" pos:end="63:53"><name pos:start="63:43" pos:end="63:53">ACCESS_CODE</name></expr></argument>)</argument_list></call> <operator pos:start="63:56" pos:end="63:57">!=</operator> <literal type="number" pos:start="63:59" pos:end="63:59">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:63" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:22">

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="73:5" pos:end="73:40">return <expr pos:start="73:12" pos:end="73:39"><name pos:start="73:12" pos:end="73:20"><name pos:start="73:12" pos:end="73:14">ctx</name><operator pos:start="73:15" pos:end="73:15">.</operator><name pos:start="73:16" pos:end="73:20">raddr</name></name> <operator pos:start="73:22" pos:end="73:22">&amp;</operator> <name pos:start="73:24" pos:end="73:39">TARGET_PAGE_MASK</name></expr>;</return>

</block_content>}</block></function></unit>
