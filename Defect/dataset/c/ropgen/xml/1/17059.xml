<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17059.c" pos:tabs="8"><function pos:start="1:1" pos:end="566:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">flic_decode_frame_24BPP</name><parameter_list pos:start="1:35" pos:end="5:68">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:45"><decl pos:start="3:36" pos:end="3:45"><type pos:start="3:36" pos:end="3:45"><name pos:start="3:36" pos:end="3:39">void</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:45">data</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:61"><decl pos:start="3:48" pos:end="3:61"><type pos:start="3:48" pos:end="3:61"><name pos:start="3:48" pos:end="3:50">int</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:61">got_frame</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:53"><decl pos:start="5:36" pos:end="5:53"><type pos:start="5:36" pos:end="5:53"><specifier pos:start="5:36" pos:end="5:40">const</specifier> <name pos:start="5:42" pos:end="5:48">uint8_t</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:53">buf</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:67"><decl pos:start="5:56" pos:end="5:67"><type pos:start="5:56" pos:end="5:67"><name pos:start="5:56" pos:end="5:58">int</name></type> <name pos:start="5:60" pos:end="5:67">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="566:1">{<block_content pos:start="9:5" pos:end="564:20">

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">FlicDecodeContext</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">s</name> <init pos:start="9:26" pos:end="9:43">= <expr pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:32">avctx</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:43">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">GetByteContext</name></type> <name pos:start="13:20" pos:end="13:21">g2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">pixel_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">char</name></type> <name pos:start="17:19" pos:end="17:30">palette_idx1</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:27">frame_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">num_chunks</name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:12">unsigned</name> <name pos:start="27:14" pos:end="27:16">int</name></type> <name pos:start="27:18" pos:end="27:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">chunk_type</name></decl>;</decl_stmt>



    <decl_stmt pos:start="33:5" pos:end="33:18"><decl pos:start="33:5" pos:end="33:9"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:9">i</name></decl>, <decl pos:start="33:12" pos:end="33:12"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:12" pos:end="33:12">j</name></decl>, <decl pos:start="33:15" pos:end="33:17"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:15" pos:end="33:17">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="37:5" pos:end="37:14"><decl pos:start="37:5" pos:end="37:13"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:13">lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:25"><decl pos:start="39:5" pos:end="39:24"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:24">compressed_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:30"><decl pos:start="41:5" pos:end="41:29"><type pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:10">signed</name> <name pos:start="41:12" pos:end="41:16">short</name></type> <name pos:start="41:18" pos:end="41:29">line_packets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:14"><decl pos:start="43:5" pos:end="43:13"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:13">y_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:17"><decl pos:start="45:5" pos:end="45:16"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:16">byte_run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:19"><decl pos:start="47:5" pos:end="47:18"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:18">pixel_skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:24"><decl pos:start="49:5" pos:end="49:23"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:23">pixel_countdown</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:26"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:12">unsigned</name> <name pos:start="51:14" pos:end="51:17">char</name> <modifier pos:start="51:19" pos:end="51:19">*</modifier></type><name pos:start="51:20" pos:end="51:25">pixels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:14"><decl pos:start="53:5" pos:end="53:13"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:13">pixel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:29"><decl pos:start="55:5" pos:end="55:28"><type pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:12">unsigned</name> <name pos:start="55:14" pos:end="55:16">int</name></type> <name pos:start="55:18" pos:end="55:28">pixel_limit</name></decl>;</decl_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><call pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:20">bytestream2_init</name><argument_list pos:start="59:21" pos:end="59:40">(<argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><operator pos:start="59:22" pos:end="59:22">&amp;</operator><name pos:start="59:23" pos:end="59:24">g2</name></expr></argument>, <argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><name pos:start="59:27" pos:end="59:29">buf</name></expr></argument>, <argument pos:start="59:32" pos:end="59:39"><expr pos:start="59:32" pos:end="59:39"><name pos:start="59:32" pos:end="59:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="65:19"><if pos:start="63:5" pos:end="65:19">if <condition pos:start="63:8" pos:end="63:53">(<expr pos:start="63:9" pos:end="63:52"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:12">ret</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:47"><name pos:start="63:16" pos:end="63:30">ff_reget_buffer</name><argument_list pos:start="63:31" pos:end="63:47">(<argument pos:start="63:32" pos:end="63:36"><expr pos:start="63:32" pos:end="63:36"><name pos:start="63:32" pos:end="63:36">avctx</name></expr></argument>, <argument pos:start="63:39" pos:end="63:46"><expr pos:start="63:39" pos:end="63:46"><name pos:start="63:39" pos:end="63:46"><name pos:start="63:39" pos:end="63:39">s</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:46">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="63:48" pos:end="63:48">)</operator> <operator pos:start="63:50" pos:end="63:50">&lt;</operator> <literal type="number" pos:start="63:52" pos:end="63:52">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:19"><block_content pos:start="65:9" pos:end="65:19">

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:31"><expr pos:start="69:5" pos:end="69:30"><name pos:start="69:5" pos:end="69:10">pixels</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:30"><name pos:start="69:14" pos:end="69:14">s</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:21">frame</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:27">data</name><index pos:start="69:28" pos:end="69:30">[<expr pos:start="69:29" pos:end="69:29"><literal type="number" pos:start="69:29" pos:end="69:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:59"><expr pos:start="71:5" pos:end="71:58"><name pos:start="71:5" pos:end="71:15">pixel_limit</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:34"><name pos:start="71:19" pos:end="71:19">s</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:26">avctx</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:34">height</name></name> <operator pos:start="71:36" pos:end="71:36">*</operator> <name pos:start="71:38" pos:end="71:58"><name pos:start="71:38" pos:end="71:38">s</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:45">frame</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:55">linesize</name><index pos:start="71:56" pos:end="71:58">[<expr pos:start="71:57" pos:end="71:57"><literal type="number" pos:start="71:57" pos:end="71:57">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:43"><expr pos:start="75:5" pos:end="75:42"><name pos:start="75:5" pos:end="75:14">frame_size</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:42"><name pos:start="75:18" pos:end="75:37">bytestream2_get_le32</name><argument_list pos:start="75:38" pos:end="75:42">(<argument pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><operator pos:start="75:39" pos:end="75:39">&amp;</operator><name pos:start="75:40" pos:end="75:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:29"><expr pos:start="77:5" pos:end="77:28"><call pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:20">bytestream2_skip</name><argument_list pos:start="77:21" pos:end="77:28">(<argument pos:start="77:22" pos:end="77:24"><expr pos:start="77:22" pos:end="77:24"><operator pos:start="77:22" pos:end="77:22">&amp;</operator><name pos:start="77:23" pos:end="77:24">g2</name></expr></argument>, <argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><literal type="number" pos:start="77:27" pos:end="77:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="77:32" pos:end="77:58">/* skip the magic number */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:43"><expr pos:start="79:5" pos:end="79:42"><name pos:start="79:5" pos:end="79:14">num_chunks</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <call pos:start="79:18" pos:end="79:42"><name pos:start="79:18" pos:end="79:37">bytestream2_get_le16</name><argument_list pos:start="79:38" pos:end="79:42">(<argument pos:start="79:39" pos:end="79:41"><expr pos:start="79:39" pos:end="79:41"><operator pos:start="79:39" pos:end="79:39">&amp;</operator><name pos:start="79:40" pos:end="79:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><call pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:20">bytestream2_skip</name><argument_list pos:start="81:21" pos:end="81:28">(<argument pos:start="81:22" pos:end="81:24"><expr pos:start="81:22" pos:end="81:24"><operator pos:start="81:22" pos:end="81:22">&amp;</operator><name pos:start="81:23" pos:end="81:24">g2</name></expr></argument>, <argument pos:start="81:27" pos:end="81:27"><expr pos:start="81:27" pos:end="81:27"><literal type="number" pos:start="81:27" pos:end="81:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="81:32" pos:end="81:49">/* skip padding */</comment>

    <if_stmt pos:start="83:5" pos:end="85:30"><if pos:start="83:5" pos:end="85:30">if <condition pos:start="83:8" pos:end="83:30">(<expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:18">frame_size</name> <operator pos:start="83:20" pos:end="83:20">&gt;</operator> <name pos:start="83:22" pos:end="83:29">buf_size</name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:30"><block_content pos:start="85:9" pos:end="85:30">

        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:18">frame_size</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <name pos:start="85:22" pos:end="85:29">buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="92:21"><if pos:start="89:5" pos:end="92:21">if <condition pos:start="89:8" pos:end="89:24">(<expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:18">frame_size</name> <operator pos:start="89:20" pos:end="89:20">&lt;</operator> <literal type="number" pos:start="89:22" pos:end="89:23">16</literal></expr>)</condition><block type="pseudo" pos:start="92:5" pos:end="92:21"><block_content pos:start="92:5" pos:end="92:21">


    <expr_stmt pos:start="92:5" pos:end="92:21"><expr pos:start="92:5" pos:end="92:20"><name pos:start="92:5" pos:end="92:14">frame_size</name> <operator pos:start="92:16" pos:end="92:17">-=</operator> <literal type="number" pos:start="92:19" pos:end="92:20">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="96:5" pos:end="96:36">/* iterate through the chunks */</comment>

    <while pos:start="98:5" pos:end="538:5">while <condition pos:start="98:11" pos:end="100:49">(<expr pos:start="98:12" pos:end="100:48"><operator pos:start="98:12" pos:end="98:12">(</operator><name pos:start="98:13" pos:end="98:22">frame_size</name> <operator pos:start="98:24" pos:end="98:24">&gt;</operator> <literal type="number" pos:start="98:26" pos:end="98:26">0</literal><operator pos:start="98:27" pos:end="98:27">)</operator> <operator pos:start="98:29" pos:end="98:30">&amp;&amp;</operator> <operator pos:start="98:32" pos:end="98:32">(</operator><name pos:start="98:33" pos:end="98:42">num_chunks</name> <operator pos:start="98:44" pos:end="98:44">&gt;</operator> <literal type="number" pos:start="98:46" pos:end="98:46">0</literal><operator pos:start="98:47" pos:end="98:47">)</operator> <operator pos:start="98:49" pos:end="98:50">&amp;&amp;</operator>

            <call pos:start="100:13" pos:end="100:43"><name pos:start="100:13" pos:end="100:38">bytestream2_get_bytes_left</name><argument_list pos:start="100:39" pos:end="100:43">(<argument pos:start="100:40" pos:end="100:42"><expr pos:start="100:40" pos:end="100:42"><operator pos:start="100:40" pos:end="100:40">&amp;</operator><name pos:start="100:41" pos:end="100:42">g2</name></expr></argument>)</argument_list></call> <operator pos:start="100:45" pos:end="100:46">&gt;=</operator> <literal type="number" pos:start="100:48" pos:end="100:48">4</literal></expr>)</condition> <block pos:start="100:51" pos:end="538:5">{<block_content pos:start="102:9" pos:end="536:21">

        <decl_stmt pos:start="102:9" pos:end="102:35"><decl pos:start="102:9" pos:end="102:34"><type pos:start="102:9" pos:end="102:11"><name pos:start="102:9" pos:end="102:11">int</name></type> <name pos:start="102:13" pos:end="102:34">stream_ptr_after_chunk</name></decl>;</decl_stmt>

        <expr_stmt pos:start="104:9" pos:end="104:47"><expr pos:start="104:9" pos:end="104:46"><name pos:start="104:9" pos:end="104:18">chunk_size</name> <operator pos:start="104:20" pos:end="104:20">=</operator> <call pos:start="104:22" pos:end="104:46"><name pos:start="104:22" pos:end="104:41">bytestream2_get_le32</name><argument_list pos:start="104:42" pos:end="104:46">(<argument pos:start="104:43" pos:end="104:45"><expr pos:start="104:43" pos:end="104:45"><operator pos:start="104:43" pos:end="104:43">&amp;</operator><name pos:start="104:44" pos:end="104:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="106:9" pos:end="114:9"><if pos:start="106:9" pos:end="114:9">if <condition pos:start="106:12" pos:end="106:36">(<expr pos:start="106:13" pos:end="106:35"><name pos:start="106:13" pos:end="106:22">chunk_size</name> <operator pos:start="106:24" pos:end="106:24">&gt;</operator> <name pos:start="106:26" pos:end="106:35">frame_size</name></expr>)</condition> <block pos:start="106:38" pos:end="114:9">{<block_content pos:start="108:13" pos:end="112:36">

            <expr_stmt pos:start="108:13" pos:end="110:90"><expr pos:start="108:13" pos:end="110:89"><call pos:start="108:13" pos:end="110:89"><name pos:start="108:13" pos:end="108:18">av_log</name><argument_list pos:start="108:19" pos:end="110:89">(<argument pos:start="108:20" pos:end="108:24"><expr pos:start="108:20" pos:end="108:24"><name pos:start="108:20" pos:end="108:24">avctx</name></expr></argument>, <argument pos:start="108:27" pos:end="108:40"><expr pos:start="108:27" pos:end="108:40"><name pos:start="108:27" pos:end="108:40">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="110:20" pos:end="110:64"><expr pos:start="110:20" pos:end="110:64"><literal type="string" pos:start="110:20" pos:end="110:64">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument pos:start="110:67" pos:end="110:76"><expr pos:start="110:67" pos:end="110:76"><name pos:start="110:67" pos:end="110:76">chunk_size</name></expr></argument>, <argument pos:start="110:79" pos:end="110:88"><expr pos:start="110:79" pos:end="110:88"><name pos:start="110:79" pos:end="110:88">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="112:13" pos:end="112:36"><expr pos:start="112:13" pos:end="112:35"><name pos:start="112:13" pos:end="112:22">chunk_size</name> <operator pos:start="112:24" pos:end="112:24">=</operator> <name pos:start="112:26" pos:end="112:35">frame_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="116:9" pos:end="116:72"><expr pos:start="116:9" pos:end="116:71"><name pos:start="116:9" pos:end="116:30">stream_ptr_after_chunk</name> <operator pos:start="116:32" pos:end="116:32">=</operator> <call pos:start="116:34" pos:end="116:54"><name pos:start="116:34" pos:end="116:49">bytestream2_tell</name><argument_list pos:start="116:50" pos:end="116:54">(<argument pos:start="116:51" pos:end="116:53"><expr pos:start="116:51" pos:end="116:53"><operator pos:start="116:51" pos:end="116:51">&amp;</operator><name pos:start="116:52" pos:end="116:53">g2</name></expr></argument>)</argument_list></call> <operator pos:start="116:56" pos:end="116:56">-</operator> <literal type="number" pos:start="116:58" pos:end="116:60">4</literal> <operator pos:start="116:60" pos:end="116:60">+</operator> <name pos:start="116:62" pos:end="116:71">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="120:9" pos:end="120:47"><expr pos:start="120:9" pos:end="120:46"><name pos:start="120:9" pos:end="120:18">chunk_type</name> <operator pos:start="120:20" pos:end="120:20">=</operator> <call pos:start="120:22" pos:end="120:46"><name pos:start="120:22" pos:end="120:41">bytestream2_get_le16</name><argument_list pos:start="120:42" pos:end="120:46">(<argument pos:start="120:43" pos:end="120:45"><expr pos:start="120:43" pos:end="120:45"><operator pos:start="120:43" pos:end="120:43">&amp;</operator><name pos:start="120:44" pos:end="120:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <switch pos:start="126:9" pos:end="516:9">switch <condition pos:start="126:16" pos:end="126:27">(<expr pos:start="126:17" pos:end="126:26"><name pos:start="126:17" pos:end="126:26">chunk_type</name></expr>)</condition> <block pos:start="126:29" pos:end="516:9">{<block_content pos:start="128:9" pos:end="514:18">

        <case pos:start="128:9" pos:end="128:27">case <expr pos:start="128:14" pos:end="128:26"><name pos:start="128:14" pos:end="128:26">FLI_256_COLOR</name></expr>:</case>

        <case pos:start="130:9" pos:end="130:23">case <expr pos:start="130:14" pos:end="130:22"><name pos:start="130:14" pos:end="130:22">FLI_COLOR</name></expr>:</case>

            <comment type="block" pos:start="132:13" pos:end="136:64">/* For some reason, it seems that non-palettized flics do

             * include one of these chunks in their first frame.

             * Why I do not know, it seems rather extraneous. */</comment>

            <expr_stmt pos:start="138:13" pos:end="142:32"><expr pos:start="138:13" pos:end="142:31"><call pos:start="138:13" pos:end="142:31"><name pos:start="138:13" pos:end="138:19">ff_dlog</name><argument_list pos:start="138:20" pos:end="142:31">(<argument pos:start="138:21" pos:end="138:25"><expr pos:start="138:21" pos:end="138:25"><name pos:start="138:21" pos:end="138:25">avctx</name></expr></argument>,

                    <argument pos:start="140:21" pos:end="140:73"><expr pos:start="140:21" pos:end="140:73"><literal type="string" pos:start="140:21" pos:end="140:73">"Unexpected Palette chunk %d in non-palettized FLC\n"</literal></expr></argument>,

                    <argument pos:start="142:21" pos:end="142:30"><expr pos:start="142:21" pos:end="142:30"><name pos:start="142:21" pos:end="142:30">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="144:13" pos:end="144:50"><expr pos:start="144:13" pos:end="144:49"><call pos:start="144:13" pos:end="144:49"><name pos:start="144:13" pos:end="144:28">bytestream2_skip</name><argument_list pos:start="144:29" pos:end="144:49">(<argument pos:start="144:30" pos:end="144:32"><expr pos:start="144:30" pos:end="144:32"><operator pos:start="144:30" pos:end="144:30">&amp;</operator><name pos:start="144:31" pos:end="144:32">g2</name></expr></argument>, <argument pos:start="144:35" pos:end="144:48"><expr pos:start="144:35" pos:end="144:48"><name pos:start="144:35" pos:end="144:44">chunk_size</name> <operator pos:start="144:46" pos:end="144:46">-</operator> <literal type="number" pos:start="144:48" pos:end="144:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="146:13" pos:end="146:18">break;</break>



        <case pos:start="150:9" pos:end="150:23">case <expr pos:start="150:14" pos:end="150:22"><name pos:start="150:14" pos:end="150:22">FLI_DELTA</name></expr>:</case>

        <case pos:start="152:9" pos:end="152:24">case <expr pos:start="152:14" pos:end="152:23"><name pos:start="152:14" pos:end="152:23">FLI_DTA_LC</name></expr>:</case>

            <expr_stmt pos:start="154:13" pos:end="154:22"><expr pos:start="154:13" pos:end="154:21"><name pos:start="154:13" pos:end="154:17">y_ptr</name> <operator pos:start="154:19" pos:end="154:19">=</operator> <literal type="number" pos:start="154:21" pos:end="154:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="156:13" pos:end="156:57"><expr pos:start="156:13" pos:end="156:56"><name pos:start="156:13" pos:end="156:28">compressed_lines</name> <operator pos:start="156:30" pos:end="156:30">=</operator> <call pos:start="156:32" pos:end="156:56"><name pos:start="156:32" pos:end="156:51">bytestream2_get_le16</name><argument_list pos:start="156:52" pos:end="156:56">(<argument pos:start="156:53" pos:end="156:55"><expr pos:start="156:53" pos:end="156:55"><operator pos:start="156:53" pos:end="156:53">&amp;</operator><name pos:start="156:54" pos:end="156:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="158:13" pos:end="246:13">while <condition pos:start="158:19" pos:end="158:40">(<expr pos:start="158:20" pos:end="158:39"><name pos:start="158:20" pos:end="158:35">compressed_lines</name> <operator pos:start="158:37" pos:end="158:37">&gt;</operator> <literal type="number" pos:start="158:39" pos:end="158:39">0</literal></expr>)</condition> <block pos:start="158:42" pos:end="246:13">{<block_content pos:start="160:17" pos:end="244:17">

                <if_stmt pos:start="160:17" pos:end="162:26"><if pos:start="160:17" pos:end="162:26">if <condition pos:start="160:20" pos:end="160:71">(<expr pos:start="160:21" pos:end="160:70"><call pos:start="160:21" pos:end="160:41"><name pos:start="160:21" pos:end="160:36">bytestream2_tell</name><argument_list pos:start="160:37" pos:end="160:41">(<argument pos:start="160:38" pos:end="160:40"><expr pos:start="160:38" pos:end="160:40"><operator pos:start="160:38" pos:end="160:38">&amp;</operator><name pos:start="160:39" pos:end="160:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="160:43" pos:end="160:43">+</operator> <literal type="number" pos:start="160:45" pos:end="160:45">2</literal> <operator pos:start="160:47" pos:end="160:47">&gt;</operator> <name pos:start="160:49" pos:end="160:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="162:21" pos:end="162:26"><block_content pos:start="162:21" pos:end="162:26">

                    <break pos:start="162:21" pos:end="162:26">break;</break></block_content></block></if></if_stmt>



                <expr_stmt pos:start="166:17" pos:end="166:57"><expr pos:start="166:17" pos:end="166:56"><name pos:start="166:17" pos:end="166:28">line_packets</name> <operator pos:start="166:30" pos:end="166:30">=</operator> <call pos:start="166:32" pos:end="166:56"><name pos:start="166:32" pos:end="166:51">bytestream2_get_le16</name><argument_list pos:start="166:52" pos:end="166:56">(<argument pos:start="166:53" pos:end="166:55"><expr pos:start="166:53" pos:end="166:55"><operator pos:start="166:53" pos:end="166:53">&amp;</operator><name pos:start="166:54" pos:end="166:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="168:17" pos:end="244:17"><if pos:start="168:17" pos:end="176:17">if <condition pos:start="168:20" pos:end="168:37">(<expr pos:start="168:21" pos:end="168:36"><name pos:start="168:21" pos:end="168:32">line_packets</name> <operator pos:start="168:34" pos:end="168:34">&lt;</operator> <literal type="number" pos:start="168:36" pos:end="168:36">0</literal></expr>)</condition> <block pos:start="168:39" pos:end="176:17">{<block_content pos:start="170:21" pos:end="174:66">

                    <expr_stmt pos:start="170:21" pos:end="170:49"><expr pos:start="170:21" pos:end="170:48"><name pos:start="170:21" pos:end="170:32">line_packets</name> <operator pos:start="170:34" pos:end="170:34">=</operator> <operator pos:start="170:36" pos:end="170:36">-</operator><name pos:start="170:37" pos:end="170:48">line_packets</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="174:21" pos:end="174:66"><expr pos:start="174:21" pos:end="174:65"><name pos:start="174:21" pos:end="174:25">y_ptr</name> <operator pos:start="174:27" pos:end="174:28">+=</operator> <name pos:start="174:30" pos:end="174:41">line_packets</name> <operator pos:start="174:43" pos:end="174:43">*</operator> <name pos:start="174:45" pos:end="174:65"><name pos:start="174:45" pos:end="174:45">s</name><operator pos:start="174:46" pos:end="174:47">-&gt;</operator><name pos:start="174:48" pos:end="174:52">frame</name><operator pos:start="174:53" pos:end="174:54">-&gt;</operator><name pos:start="174:55" pos:end="174:62">linesize</name><index pos:start="174:63" pos:end="174:65">[<expr pos:start="174:64" pos:end="174:64"><literal type="number" pos:start="174:64" pos:end="174:64">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="176:19" pos:end="244:17">else <block pos:start="176:24" pos:end="244:17">{<block_content pos:start="178:21" pos:end="242:51">

                    <expr_stmt pos:start="178:21" pos:end="178:39"><expr pos:start="178:21" pos:end="178:38"><name pos:start="178:21" pos:end="178:36">compressed_lines</name><operator pos:start="178:37" pos:end="178:38">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="180:21" pos:end="180:38"><expr pos:start="180:21" pos:end="180:37"><name pos:start="180:21" pos:end="180:29">pixel_ptr</name> <operator pos:start="180:31" pos:end="180:31">=</operator> <name pos:start="180:33" pos:end="180:37">y_ptr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="182:21" pos:end="182:39"><expr pos:start="182:21" pos:end="182:38"><call pos:start="182:21" pos:end="182:38"><name pos:start="182:21" pos:end="182:35">CHECK_PIXEL_PTR</name><argument_list pos:start="182:36" pos:end="182:38">(<argument pos:start="182:37" pos:end="182:37"><expr pos:start="182:37" pos:end="182:37"><literal type="number" pos:start="182:37" pos:end="182:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="184:21" pos:end="184:54"><expr pos:start="184:21" pos:end="184:53"><name pos:start="184:21" pos:end="184:35">pixel_countdown</name> <operator pos:start="184:37" pos:end="184:37">=</operator> <name pos:start="184:39" pos:end="184:53"><name pos:start="184:39" pos:end="184:39">s</name><operator pos:start="184:40" pos:end="184:41">-&gt;</operator><name pos:start="184:42" pos:end="184:46">avctx</name><operator pos:start="184:47" pos:end="184:48">-&gt;</operator><name pos:start="184:49" pos:end="184:53">width</name></name></expr>;</expr_stmt>

                    <for pos:start="186:21" pos:end="238:21">for <control pos:start="186:25" pos:end="186:54">(<init pos:start="186:26" pos:end="186:31"><expr pos:start="186:26" pos:end="186:30"><name pos:start="186:26" pos:end="186:26">i</name> <operator pos:start="186:28" pos:end="186:28">=</operator> <literal type="number" pos:start="186:30" pos:end="186:30">0</literal></expr>;</init> <condition pos:start="186:33" pos:end="186:49"><expr pos:start="186:33" pos:end="186:48"><name pos:start="186:33" pos:end="186:33">i</name> <operator pos:start="186:35" pos:end="186:35">&lt;</operator> <name pos:start="186:37" pos:end="186:48">line_packets</name></expr>;</condition> <incr pos:start="186:51" pos:end="186:53"><expr pos:start="186:51" pos:end="186:53"><name pos:start="186:51" pos:end="186:51">i</name><operator pos:start="186:52" pos:end="186:53">++</operator></expr></incr>)</control> <block pos:start="186:56" pos:end="238:21">{<block_content pos:start="190:25" pos:end="236:25">

                        <comment type="block" pos:start="188:25" pos:end="188:56">/* account for the skip bytes */</comment>

                        <if_stmt pos:start="190:25" pos:end="192:34"><if pos:start="190:25" pos:end="192:34">if <condition pos:start="190:28" pos:end="190:79">(<expr pos:start="190:29" pos:end="190:78"><call pos:start="190:29" pos:end="190:49"><name pos:start="190:29" pos:end="190:44">bytestream2_tell</name><argument_list pos:start="190:45" pos:end="190:49">(<argument pos:start="190:46" pos:end="190:48"><expr pos:start="190:46" pos:end="190:48"><operator pos:start="190:46" pos:end="190:46">&amp;</operator><name pos:start="190:47" pos:end="190:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="190:51" pos:end="190:51">+</operator> <literal type="number" pos:start="190:53" pos:end="190:53">2</literal> <operator pos:start="190:55" pos:end="190:55">&gt;</operator> <name pos:start="190:57" pos:end="190:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="192:29" pos:end="192:34"><block_content pos:start="192:29" pos:end="192:34">

                            <break pos:start="192:29" pos:end="192:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="194:25" pos:end="194:63"><expr pos:start="194:25" pos:end="194:62"><name pos:start="194:25" pos:end="194:34">pixel_skip</name> <operator pos:start="194:36" pos:end="194:36">=</operator> <call pos:start="194:38" pos:end="194:62"><name pos:start="194:38" pos:end="194:57">bytestream2_get_byte</name><argument_list pos:start="194:58" pos:end="194:62">(<argument pos:start="194:59" pos:end="194:61"><expr pos:start="194:59" pos:end="194:61"><operator pos:start="194:59" pos:end="194:59">&amp;</operator><name pos:start="194:60" pos:end="194:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="196:25" pos:end="196:52"><expr pos:start="196:25" pos:end="196:51"><name pos:start="196:25" pos:end="196:33">pixel_ptr</name> <operator pos:start="196:35" pos:end="196:36">+=</operator> <operator pos:start="196:38" pos:end="196:38">(</operator><name pos:start="196:39" pos:end="196:48">pixel_skip</name><operator pos:start="196:49" pos:end="196:49">*</operator><literal type="number" pos:start="196:50" pos:end="196:50">3</literal><operator pos:start="196:51" pos:end="196:51">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="196:54" pos:end="196:80">/* Pixel is 3 bytes wide */</comment>

                        <expr_stmt pos:start="198:25" pos:end="198:54"><expr pos:start="198:25" pos:end="198:53"><name pos:start="198:25" pos:end="198:39">pixel_countdown</name> <operator pos:start="198:41" pos:end="198:42">-=</operator> <name pos:start="198:44" pos:end="198:53">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="200:25" pos:end="200:77"><expr pos:start="200:25" pos:end="200:76"><name pos:start="200:25" pos:end="200:32">byte_run</name> <operator pos:start="200:34" pos:end="200:34">=</operator> <call pos:start="200:36" pos:end="200:76"><name pos:start="200:36" pos:end="200:46">sign_extend</name><argument_list pos:start="200:47" pos:end="200:76">(<argument pos:start="200:48" pos:end="200:72"><expr pos:start="200:48" pos:end="200:72"><call pos:start="200:48" pos:end="200:72"><name pos:start="200:48" pos:end="200:67">bytestream2_get_byte</name><argument_list pos:start="200:68" pos:end="200:72">(<argument pos:start="200:69" pos:end="200:71"><expr pos:start="200:69" pos:end="200:71"><operator pos:start="200:69" pos:end="200:69">&amp;</operator><name pos:start="200:70" pos:end="200:71">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="200:75" pos:end="200:75"><expr pos:start="200:75" pos:end="200:75"><literal type="number" pos:start="200:75" pos:end="200:75">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="202:25" pos:end="236:25"><if pos:start="202:25" pos:end="218:25">if <condition pos:start="202:28" pos:end="202:41">(<expr pos:start="202:29" pos:end="202:40"><name pos:start="202:29" pos:end="202:36">byte_run</name> <operator pos:start="202:38" pos:end="202:38">&lt;</operator> <literal type="number" pos:start="202:40" pos:end="202:40">0</literal></expr>)</condition> <block pos:start="202:43" pos:end="218:25">{<block_content pos:start="204:29" pos:end="216:29">

                            <expr_stmt pos:start="204:29" pos:end="204:49"><expr pos:start="204:29" pos:end="204:48"><name pos:start="204:29" pos:end="204:36">byte_run</name> <operator pos:start="204:38" pos:end="204:38">=</operator> <operator pos:start="204:40" pos:end="204:40">-</operator><name pos:start="204:41" pos:end="204:48">byte_run</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="206:29" pos:end="206:65"><expr pos:start="206:29" pos:end="206:64"><name pos:start="206:29" pos:end="206:33">pixel</name>    <operator pos:start="206:38" pos:end="206:38">=</operator> <call pos:start="206:40" pos:end="206:64"><name pos:start="206:40" pos:end="206:59">bytestream2_get_le24</name><argument_list pos:start="206:60" pos:end="206:64">(<argument pos:start="206:61" pos:end="206:63"><expr pos:start="206:61" pos:end="206:63"><operator pos:start="206:61" pos:end="206:61">&amp;</operator><name pos:start="206:62" pos:end="206:63">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="208:29" pos:end="208:58"><expr pos:start="208:29" pos:end="208:57"><call pos:start="208:29" pos:end="208:57"><name pos:start="208:29" pos:end="208:43">CHECK_PIXEL_PTR</name><argument_list pos:start="208:44" pos:end="208:57">(<argument pos:start="208:45" pos:end="208:56"><expr pos:start="208:45" pos:end="208:56"><literal type="number" pos:start="208:45" pos:end="208:45">3</literal> <operator pos:start="208:47" pos:end="208:47">*</operator> <name pos:start="208:49" pos:end="208:56">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="210:29" pos:end="216:29">for <control pos:start="210:33" pos:end="210:80">(<init pos:start="210:34" pos:end="210:39"><expr pos:start="210:34" pos:end="210:38"><name pos:start="210:34" pos:end="210:34">j</name> <operator pos:start="210:36" pos:end="210:36">=</operator> <literal type="number" pos:start="210:38" pos:end="210:38">0</literal></expr>;</init> <condition pos:start="210:41" pos:end="210:53"><expr pos:start="210:41" pos:end="210:52"><name pos:start="210:41" pos:end="210:41">j</name> <operator pos:start="210:43" pos:end="210:43">&lt;</operator> <name pos:start="210:45" pos:end="210:52">byte_run</name></expr>;</condition> <incr pos:start="210:55" pos:end="210:79"><expr pos:start="210:55" pos:end="210:57"><name pos:start="210:55" pos:end="210:55">j</name><operator pos:start="210:56" pos:end="210:57">++</operator></expr><operator pos:start="210:58" pos:end="210:58">,</operator> <expr pos:start="210:60" pos:end="210:79"><name pos:start="210:60" pos:end="210:74">pixel_countdown</name> <operator pos:start="210:76" pos:end="210:77">-=</operator> <literal type="number" pos:start="210:79" pos:end="210:79">1</literal></expr></incr>)</control> <block pos:start="210:82" pos:end="216:29">{<block_content pos:start="212:33" pos:end="214:47">

                                <expr_stmt pos:start="212:33" pos:end="212:67"><expr pos:start="212:33" pos:end="212:66"><call pos:start="212:33" pos:end="212:66"><name pos:start="212:33" pos:end="212:39">AV_WL24</name><argument_list pos:start="212:40" pos:end="212:66">(<argument pos:start="212:41" pos:end="212:58"><expr pos:start="212:41" pos:end="212:58"><operator pos:start="212:41" pos:end="212:41">&amp;</operator><name pos:start="212:42" pos:end="212:58"><name pos:start="212:42" pos:end="212:47">pixels</name><index pos:start="212:48" pos:end="212:58">[<expr pos:start="212:49" pos:end="212:57"><name pos:start="212:49" pos:end="212:57">pixel_ptr</name></expr>]</index></name></expr></argument>, <argument pos:start="212:61" pos:end="212:65"><expr pos:start="212:61" pos:end="212:65"><name pos:start="212:61" pos:end="212:65">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="214:33" pos:end="214:47"><expr pos:start="214:33" pos:end="214:46"><name pos:start="214:33" pos:end="214:41">pixel_ptr</name> <operator pos:start="214:43" pos:end="214:44">+=</operator> <literal type="number" pos:start="214:46" pos:end="214:46">3</literal></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if> <else pos:start="218:27" pos:end="236:25">else <block pos:start="218:32" pos:end="236:25">{<block_content pos:start="220:29" pos:end="234:29">

                            <if_stmt pos:start="220:29" pos:end="222:38"><if pos:start="220:29" pos:end="222:38">if <condition pos:start="220:32" pos:end="220:92">(<expr pos:start="220:33" pos:end="220:91"><call pos:start="220:33" pos:end="220:53"><name pos:start="220:33" pos:end="220:48">bytestream2_tell</name><argument_list pos:start="220:49" pos:end="220:53">(<argument pos:start="220:50" pos:end="220:52"><expr pos:start="220:50" pos:end="220:52"><operator pos:start="220:50" pos:end="220:50">&amp;</operator><name pos:start="220:51" pos:end="220:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="220:55" pos:end="220:55">+</operator> <literal type="number" pos:start="220:57" pos:end="220:57">2</literal><operator pos:start="220:58" pos:end="220:58">*</operator><name pos:start="220:59" pos:end="220:66">byte_run</name> <operator pos:start="220:68" pos:end="220:68">&gt;</operator> <name pos:start="220:70" pos:end="220:91">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="222:33" pos:end="222:38"><block_content pos:start="222:33" pos:end="222:38">

                                <break pos:start="222:33" pos:end="222:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="224:29" pos:end="224:58"><expr pos:start="224:29" pos:end="224:57"><call pos:start="224:29" pos:end="224:57"><name pos:start="224:29" pos:end="224:43">CHECK_PIXEL_PTR</name><argument_list pos:start="224:44" pos:end="224:57">(<argument pos:start="224:45" pos:end="224:56"><expr pos:start="224:45" pos:end="224:56"><literal type="number" pos:start="224:45" pos:end="224:45">2</literal> <operator pos:start="224:47" pos:end="224:47">*</operator> <name pos:start="224:49" pos:end="224:56">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="226:29" pos:end="234:29">for <control pos:start="226:33" pos:end="226:77">(<init pos:start="226:34" pos:end="226:39"><expr pos:start="226:34" pos:end="226:38"><name pos:start="226:34" pos:end="226:34">j</name> <operator pos:start="226:36" pos:end="226:36">=</operator> <literal type="number" pos:start="226:38" pos:end="226:38">0</literal></expr>;</init> <condition pos:start="226:41" pos:end="226:53"><expr pos:start="226:41" pos:end="226:52"><name pos:start="226:41" pos:end="226:41">j</name> <operator pos:start="226:43" pos:end="226:43">&lt;</operator> <name pos:start="226:45" pos:end="226:52">byte_run</name></expr>;</condition> <incr pos:start="226:55" pos:end="226:76"><expr pos:start="226:55" pos:end="226:57"><name pos:start="226:55" pos:end="226:55">j</name><operator pos:start="226:56" pos:end="226:57">++</operator></expr><operator pos:start="226:58" pos:end="226:58">,</operator> <expr pos:start="226:60" pos:end="226:76"><name pos:start="226:60" pos:end="226:74">pixel_countdown</name><operator pos:start="226:75" pos:end="226:76">--</operator></expr></incr>)</control> <block pos:start="226:79" pos:end="234:29">{<block_content pos:start="228:33" pos:end="232:47">

                                <expr_stmt pos:start="228:33" pos:end="228:66"><expr pos:start="228:33" pos:end="228:65"><name pos:start="228:33" pos:end="228:37">pixel</name> <operator pos:start="228:39" pos:end="228:39">=</operator> <call pos:start="228:41" pos:end="228:65"><name pos:start="228:41" pos:end="228:60">bytestream2_get_le24</name><argument_list pos:start="228:61" pos:end="228:65">(<argument pos:start="228:62" pos:end="228:64"><expr pos:start="228:62" pos:end="228:64"><operator pos:start="228:62" pos:end="228:62">&amp;</operator><name pos:start="228:63" pos:end="228:64">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="230:33" pos:end="230:67"><expr pos:start="230:33" pos:end="230:66"><call pos:start="230:33" pos:end="230:66"><name pos:start="230:33" pos:end="230:39">AV_WL24</name><argument_list pos:start="230:40" pos:end="230:66">(<argument pos:start="230:41" pos:end="230:58"><expr pos:start="230:41" pos:end="230:58"><operator pos:start="230:41" pos:end="230:41">&amp;</operator><name pos:start="230:42" pos:end="230:58"><name pos:start="230:42" pos:end="230:47">pixels</name><index pos:start="230:48" pos:end="230:58">[<expr pos:start="230:49" pos:end="230:57"><name pos:start="230:49" pos:end="230:57">pixel_ptr</name></expr>]</index></name></expr></argument>, <argument pos:start="230:61" pos:end="230:65"><expr pos:start="230:61" pos:end="230:65"><name pos:start="230:61" pos:end="230:65">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="232:33" pos:end="232:47"><expr pos:start="232:33" pos:end="232:46"><name pos:start="232:33" pos:end="232:41">pixel_ptr</name> <operator pos:start="232:43" pos:end="232:44">+=</operator> <literal type="number" pos:start="232:46" pos:end="232:46">3</literal></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>



                    <expr_stmt pos:start="242:21" pos:end="242:51"><expr pos:start="242:21" pos:end="242:50"><name pos:start="242:21" pos:end="242:25">y_ptr</name> <operator pos:start="242:27" pos:end="242:28">+=</operator> <name pos:start="242:30" pos:end="242:50"><name pos:start="242:30" pos:end="242:30">s</name><operator pos:start="242:31" pos:end="242:32">-&gt;</operator><name pos:start="242:33" pos:end="242:37">frame</name><operator pos:start="242:38" pos:end="242:39">-&gt;</operator><name pos:start="242:40" pos:end="242:47">linesize</name><index pos:start="242:48" pos:end="242:50">[<expr pos:start="242:49" pos:end="242:49"><literal type="number" pos:start="242:49" pos:end="242:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></while>

            <break pos:start="248:13" pos:end="248:18">break;</break>



        <case pos:start="252:9" pos:end="252:20">case <expr pos:start="252:14" pos:end="252:19"><name pos:start="252:14" pos:end="252:19">FLI_LC</name></expr>:</case>

            <expr_stmt pos:start="254:13" pos:end="254:91"><expr pos:start="254:13" pos:end="254:90"><call pos:start="254:13" pos:end="254:90"><name pos:start="254:13" pos:end="254:18">av_log</name><argument_list pos:start="254:19" pos:end="254:90">(<argument pos:start="254:20" pos:end="254:24"><expr pos:start="254:20" pos:end="254:24"><name pos:start="254:20" pos:end="254:24">avctx</name></expr></argument>, <argument pos:start="254:27" pos:end="254:38"><expr pos:start="254:27" pos:end="254:38"><name pos:start="254:27" pos:end="254:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="254:41" pos:end="254:89"><expr pos:start="254:41" pos:end="254:89"><literal type="string" pos:start="254:41" pos:end="254:89">"Unexpected FLI_LC chunk in non-palettized FLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="256:13" pos:end="256:50"><expr pos:start="256:13" pos:end="256:49"><call pos:start="256:13" pos:end="256:49"><name pos:start="256:13" pos:end="256:28">bytestream2_skip</name><argument_list pos:start="256:29" pos:end="256:49">(<argument pos:start="256:30" pos:end="256:32"><expr pos:start="256:30" pos:end="256:32"><operator pos:start="256:30" pos:end="256:30">&amp;</operator><name pos:start="256:31" pos:end="256:32">g2</name></expr></argument>, <argument pos:start="256:35" pos:end="256:48"><expr pos:start="256:35" pos:end="256:48"><name pos:start="256:35" pos:end="256:44">chunk_size</name> <operator pos:start="256:46" pos:end="256:46">-</operator> <literal type="number" pos:start="256:48" pos:end="256:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="258:13" pos:end="258:18">break;</break>



        <case pos:start="262:9" pos:end="262:23">case <expr pos:start="262:14" pos:end="262:22"><name pos:start="262:14" pos:end="262:22">FLI_BLACK</name></expr>:</case>

            <comment type="block" pos:start="264:13" pos:end="264:77">/* set the whole frame to 0x00 which is black for 24 bit mode. */</comment>

            <expr_stmt pos:start="266:13" pos:end="268:61"><expr pos:start="266:13" pos:end="268:60"><call pos:start="266:13" pos:end="268:60"><name pos:start="266:13" pos:end="266:18">memset</name><argument_list pos:start="266:19" pos:end="268:60">(<argument pos:start="266:20" pos:end="266:25"><expr pos:start="266:20" pos:end="266:25"><name pos:start="266:20" pos:end="266:25">pixels</name></expr></argument>, <argument pos:start="266:28" pos:end="266:31"><expr pos:start="266:28" pos:end="266:31"><literal type="number" pos:start="266:28" pos:end="266:31">0x00</literal></expr></argument>,

                   <argument pos:start="268:20" pos:end="268:59"><expr pos:start="268:20" pos:end="268:59"><name pos:start="268:20" pos:end="268:40"><name pos:start="268:20" pos:end="268:20">s</name><operator pos:start="268:21" pos:end="268:22">-&gt;</operator><name pos:start="268:23" pos:end="268:27">frame</name><operator pos:start="268:28" pos:end="268:29">-&gt;</operator><name pos:start="268:30" pos:end="268:37">linesize</name><index pos:start="268:38" pos:end="268:40">[<expr pos:start="268:39" pos:end="268:39"><literal type="number" pos:start="268:39" pos:end="268:39">0</literal></expr>]</index></name> <operator pos:start="268:42" pos:end="268:42">*</operator> <name pos:start="268:44" pos:end="268:59"><name pos:start="268:44" pos:end="268:44">s</name><operator pos:start="268:45" pos:end="268:46">-&gt;</operator><name pos:start="268:47" pos:end="268:51">avctx</name><operator pos:start="268:52" pos:end="268:53">-&gt;</operator><name pos:start="268:54" pos:end="268:59">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="270:13" pos:end="270:18">break;</break>



        <case pos:start="274:9" pos:end="274:22">case <expr pos:start="274:14" pos:end="274:21"><name pos:start="274:14" pos:end="274:21">FLI_BRUN</name></expr>:</case>

            <expr_stmt pos:start="276:13" pos:end="276:22"><expr pos:start="276:13" pos:end="276:21"><name pos:start="276:13" pos:end="276:17">y_ptr</name> <operator pos:start="276:19" pos:end="276:19">=</operator> <literal type="number" pos:start="276:21" pos:end="276:21">0</literal></expr>;</expr_stmt>

            <for pos:start="278:13" pos:end="354:13">for <control pos:start="278:17" pos:end="278:62">(<init pos:start="278:18" pos:end="278:27"><expr pos:start="278:18" pos:end="278:26"><name pos:start="278:18" pos:end="278:22">lines</name> <operator pos:start="278:24" pos:end="278:24">=</operator> <literal type="number" pos:start="278:26" pos:end="278:26">0</literal></expr>;</init> <condition pos:start="278:29" pos:end="278:53"><expr pos:start="278:29" pos:end="278:52"><name pos:start="278:29" pos:end="278:33">lines</name> <operator pos:start="278:35" pos:end="278:35">&lt;</operator> <name pos:start="278:37" pos:end="278:52"><name pos:start="278:37" pos:end="278:37">s</name><operator pos:start="278:38" pos:end="278:39">-&gt;</operator><name pos:start="278:40" pos:end="278:44">avctx</name><operator pos:start="278:45" pos:end="278:46">-&gt;</operator><name pos:start="278:47" pos:end="278:52">height</name></name></expr>;</condition> <incr pos:start="278:55" pos:end="278:61"><expr pos:start="278:55" pos:end="278:61"><name pos:start="278:55" pos:end="278:59">lines</name><operator pos:start="278:60" pos:end="278:61">++</operator></expr></incr>)</control> <block pos:start="278:64" pos:end="354:13">{<block_content pos:start="280:17" pos:end="352:47">

                <expr_stmt pos:start="280:17" pos:end="280:34"><expr pos:start="280:17" pos:end="280:33"><name pos:start="280:17" pos:end="280:25">pixel_ptr</name> <operator pos:start="280:27" pos:end="280:27">=</operator> <name pos:start="280:29" pos:end="280:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="282:17" pos:end="284:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                <expr_stmt pos:start="286:17" pos:end="286:41"><expr pos:start="286:17" pos:end="286:40"><call pos:start="286:17" pos:end="286:40"><name pos:start="286:17" pos:end="286:32">bytestream2_skip</name><argument_list pos:start="286:33" pos:end="286:40">(<argument pos:start="286:34" pos:end="286:36"><expr pos:start="286:34" pos:end="286:36"><operator pos:start="286:34" pos:end="286:34">&amp;</operator><name pos:start="286:35" pos:end="286:36">g2</name></expr></argument>, <argument pos:start="286:39" pos:end="286:39"><expr pos:start="286:39" pos:end="286:39"><literal type="number" pos:start="286:39" pos:end="286:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="288:17" pos:end="288:56"><expr pos:start="288:17" pos:end="288:55"><name pos:start="288:17" pos:end="288:31">pixel_countdown</name> <operator pos:start="288:33" pos:end="288:33">=</operator> <operator pos:start="288:35" pos:end="288:35">(</operator><name pos:start="288:36" pos:end="288:50"><name pos:start="288:36" pos:end="288:36">s</name><operator pos:start="288:37" pos:end="288:38">-&gt;</operator><name pos:start="288:39" pos:end="288:43">avctx</name><operator pos:start="288:44" pos:end="288:45">-&gt;</operator><name pos:start="288:46" pos:end="288:50">width</name></name> <operator pos:start="288:52" pos:end="288:52">*</operator> <literal type="number" pos:start="288:54" pos:end="288:54">3</literal><operator pos:start="288:55" pos:end="288:55">)</operator></expr>;</expr_stmt>



                <while pos:start="292:17" pos:end="348:17">while <condition pos:start="292:23" pos:end="292:43">(<expr pos:start="292:24" pos:end="292:42"><name pos:start="292:24" pos:end="292:38">pixel_countdown</name> <operator pos:start="292:40" pos:end="292:40">&gt;</operator> <literal type="number" pos:start="292:42" pos:end="292:42">0</literal></expr>)</condition> <block pos:start="292:45" pos:end="348:17">{<block_content pos:start="294:21" pos:end="346:21">

                    <if_stmt pos:start="294:21" pos:end="296:30"><if pos:start="294:21" pos:end="296:30">if <condition pos:start="294:24" pos:end="294:75">(<expr pos:start="294:25" pos:end="294:74"><call pos:start="294:25" pos:end="294:45"><name pos:start="294:25" pos:end="294:40">bytestream2_tell</name><argument_list pos:start="294:41" pos:end="294:45">(<argument pos:start="294:42" pos:end="294:44"><expr pos:start="294:42" pos:end="294:44"><operator pos:start="294:42" pos:end="294:42">&amp;</operator><name pos:start="294:43" pos:end="294:44">g2</name></expr></argument>)</argument_list></call> <operator pos:start="294:47" pos:end="294:47">+</operator> <literal type="number" pos:start="294:49" pos:end="294:49">1</literal> <operator pos:start="294:51" pos:end="294:51">&gt;</operator> <name pos:start="294:53" pos:end="294:74">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="296:25" pos:end="296:30"><block_content pos:start="296:25" pos:end="296:30">

                        <break pos:start="296:25" pos:end="296:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="298:21" pos:end="298:73"><expr pos:start="298:21" pos:end="298:72"><name pos:start="298:21" pos:end="298:28">byte_run</name> <operator pos:start="298:30" pos:end="298:30">=</operator> <call pos:start="298:32" pos:end="298:72"><name pos:start="298:32" pos:end="298:42">sign_extend</name><argument_list pos:start="298:43" pos:end="298:72">(<argument pos:start="298:44" pos:end="298:68"><expr pos:start="298:44" pos:end="298:68"><call pos:start="298:44" pos:end="298:68"><name pos:start="298:44" pos:end="298:63">bytestream2_get_byte</name><argument_list pos:start="298:64" pos:end="298:68">(<argument pos:start="298:65" pos:end="298:67"><expr pos:start="298:65" pos:end="298:67"><operator pos:start="298:65" pos:end="298:65">&amp;</operator><name pos:start="298:66" pos:end="298:67">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="298:71" pos:end="298:71"><expr pos:start="298:71" pos:end="298:71"><literal type="number" pos:start="298:71" pos:end="298:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="300:21" pos:end="346:21"><if pos:start="300:21" pos:end="320:21">if <condition pos:start="300:24" pos:end="300:37">(<expr pos:start="300:25" pos:end="300:36"><name pos:start="300:25" pos:end="300:32">byte_run</name> <operator pos:start="300:34" pos:end="300:34">&gt;</operator> <literal type="number" pos:start="300:36" pos:end="300:36">0</literal></expr>)</condition> <block pos:start="300:39" pos:end="320:21">{<block_content pos:start="302:25" pos:end="318:25">

                        <expr_stmt pos:start="302:25" pos:end="302:65"><expr pos:start="302:25" pos:end="302:64"><name pos:start="302:25" pos:end="302:36">palette_idx1</name> <operator pos:start="302:38" pos:end="302:38">=</operator> <call pos:start="302:40" pos:end="302:64"><name pos:start="302:40" pos:end="302:59">bytestream2_get_byte</name><argument_list pos:start="302:60" pos:end="302:64">(<argument pos:start="302:61" pos:end="302:63"><expr pos:start="302:61" pos:end="302:63"><operator pos:start="302:61" pos:end="302:61">&amp;</operator><name pos:start="302:62" pos:end="302:63">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="304:25" pos:end="304:50"><expr pos:start="304:25" pos:end="304:49"><call pos:start="304:25" pos:end="304:49"><name pos:start="304:25" pos:end="304:39">CHECK_PIXEL_PTR</name><argument_list pos:start="304:40" pos:end="304:49">(<argument pos:start="304:41" pos:end="304:48"><expr pos:start="304:41" pos:end="304:48"><name pos:start="304:41" pos:end="304:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="306:25" pos:end="318:25">for <control pos:start="306:29" pos:end="306:54">(<init pos:start="306:30" pos:end="306:35"><expr pos:start="306:30" pos:end="306:34"><name pos:start="306:30" pos:end="306:30">j</name> <operator pos:start="306:32" pos:end="306:32">=</operator> <literal type="number" pos:start="306:34" pos:end="306:34">0</literal></expr>;</init> <condition pos:start="306:37" pos:end="306:49"><expr pos:start="306:37" pos:end="306:48"><name pos:start="306:37" pos:end="306:37">j</name> <operator pos:start="306:39" pos:end="306:39">&lt;</operator> <name pos:start="306:41" pos:end="306:48">byte_run</name></expr>;</condition> <incr pos:start="306:51" pos:end="306:53"><expr pos:start="306:51" pos:end="306:53"><name pos:start="306:51" pos:end="306:51">j</name><operator pos:start="306:52" pos:end="306:53">++</operator></expr></incr>)</control> <block pos:start="306:56" pos:end="318:25">{<block_content pos:start="308:29" pos:end="316:63">

                            <expr_stmt pos:start="308:29" pos:end="308:63"><expr pos:start="308:29" pos:end="308:62"><name pos:start="308:29" pos:end="308:47"><name pos:start="308:29" pos:end="308:34">pixels</name><index pos:start="308:35" pos:end="308:47">[<expr pos:start="308:36" pos:end="308:46"><name pos:start="308:36" pos:end="308:44">pixel_ptr</name><operator pos:start="308:45" pos:end="308:46">++</operator></expr>]</index></name> <operator pos:start="308:49" pos:end="308:49">=</operator> <name pos:start="308:51" pos:end="308:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="310:29" pos:end="310:46"><expr pos:start="310:29" pos:end="310:45"><name pos:start="310:29" pos:end="310:43">pixel_countdown</name><operator pos:start="310:44" pos:end="310:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="312:29" pos:end="316:63"><if pos:start="312:29" pos:end="316:63">if <condition pos:start="312:32" pos:end="312:52">(<expr pos:start="312:33" pos:end="312:51"><name pos:start="312:33" pos:end="312:47">pixel_countdown</name> <operator pos:start="312:49" pos:end="312:49">&lt;</operator> <literal type="number" pos:start="312:51" pos:end="312:51">0</literal></expr>)</condition><block type="pseudo" pos:start="314:33" pos:end="316:63"><block_content pos:start="314:33" pos:end="316:63">

                                <expr_stmt pos:start="314:33" pos:end="316:63"><expr pos:start="314:33" pos:end="316:62"><call pos:start="314:33" pos:end="316:62"><name pos:start="314:33" pos:end="314:38">av_log</name><argument_list pos:start="314:39" pos:end="316:62">(<argument pos:start="314:40" pos:end="314:44"><expr pos:start="314:40" pos:end="314:44"><name pos:start="314:40" pos:end="314:44">avctx</name></expr></argument>, <argument pos:start="314:47" pos:end="314:58"><expr pos:start="314:47" pos:end="314:58"><name pos:start="314:47" pos:end="314:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="314:61" pos:end="314:98"><expr pos:start="314:61" pos:end="314:98"><literal type="string" pos:start="314:61" pos:end="314:98">"pixel_countdown &lt; 0 (%d) (linea%d)\n"</literal></expr></argument>,

                                       <argument pos:start="316:40" pos:end="316:54"><expr pos:start="316:40" pos:end="316:54"><name pos:start="316:40" pos:end="316:54">pixel_countdown</name></expr></argument>, <argument pos:start="316:57" pos:end="316:61"><expr pos:start="316:57" pos:end="316:61"><name pos:start="316:57" pos:end="316:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="320:23" pos:end="346:21">else <block pos:start="320:28" pos:end="346:21">{<block_content pos:start="322:25" pos:end="344:25">  <comment type="block" pos:start="320:31" pos:end="320:62">/* copy bytes if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="322:25" pos:end="322:45"><expr pos:start="322:25" pos:end="322:44"><name pos:start="322:25" pos:end="322:32">byte_run</name> <operator pos:start="322:34" pos:end="322:34">=</operator> <operator pos:start="322:36" pos:end="322:36">-</operator><name pos:start="322:37" pos:end="322:44">byte_run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="324:25" pos:end="326:34"><if pos:start="324:25" pos:end="326:34">if <condition pos:start="324:28" pos:end="324:86">(<expr pos:start="324:29" pos:end="324:85"><call pos:start="324:29" pos:end="324:49"><name pos:start="324:29" pos:end="324:44">bytestream2_tell</name><argument_list pos:start="324:45" pos:end="324:49">(<argument pos:start="324:46" pos:end="324:48"><expr pos:start="324:46" pos:end="324:48"><operator pos:start="324:46" pos:end="324:46">&amp;</operator><name pos:start="324:47" pos:end="324:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="324:51" pos:end="324:51">+</operator> <name pos:start="324:53" pos:end="324:60">byte_run</name> <operator pos:start="324:62" pos:end="324:62">&gt;</operator> <name pos:start="324:64" pos:end="324:85">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="326:29" pos:end="326:34"><block_content pos:start="326:29" pos:end="326:34">

                            <break pos:start="326:29" pos:end="326:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="328:25" pos:end="328:50"><expr pos:start="328:25" pos:end="328:49"><call pos:start="328:25" pos:end="328:49"><name pos:start="328:25" pos:end="328:39">CHECK_PIXEL_PTR</name><argument_list pos:start="328:40" pos:end="328:49">(<argument pos:start="328:41" pos:end="328:48"><expr pos:start="328:41" pos:end="328:48"><name pos:start="328:41" pos:end="328:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="330:25" pos:end="344:25">for <control pos:start="330:29" pos:end="330:54">(<init pos:start="330:30" pos:end="330:35"><expr pos:start="330:30" pos:end="330:34"><name pos:start="330:30" pos:end="330:30">j</name> <operator pos:start="330:32" pos:end="330:32">=</operator> <literal type="number" pos:start="330:34" pos:end="330:34">0</literal></expr>;</init> <condition pos:start="330:37" pos:end="330:49"><expr pos:start="330:37" pos:end="330:48"><name pos:start="330:37" pos:end="330:37">j</name> <operator pos:start="330:39" pos:end="330:39">&lt;</operator> <name pos:start="330:41" pos:end="330:48">byte_run</name></expr>;</condition> <incr pos:start="330:51" pos:end="330:53"><expr pos:start="330:51" pos:end="330:53"><name pos:start="330:51" pos:end="330:51">j</name><operator pos:start="330:52" pos:end="330:53">++</operator></expr></incr>)</control> <block pos:start="330:56" pos:end="344:25">{<block_content pos:start="332:29" pos:end="342:63">

                            <expr_stmt pos:start="332:29" pos:end="332:69"><expr pos:start="332:29" pos:end="332:68"><name pos:start="332:29" pos:end="332:40">palette_idx1</name> <operator pos:start="332:42" pos:end="332:42">=</operator> <call pos:start="332:44" pos:end="332:68"><name pos:start="332:44" pos:end="332:63">bytestream2_get_byte</name><argument_list pos:start="332:64" pos:end="332:68">(<argument pos:start="332:65" pos:end="332:67"><expr pos:start="332:65" pos:end="332:67"><operator pos:start="332:65" pos:end="332:65">&amp;</operator><name pos:start="332:66" pos:end="332:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="334:29" pos:end="334:63"><expr pos:start="334:29" pos:end="334:62"><name pos:start="334:29" pos:end="334:47"><name pos:start="334:29" pos:end="334:34">pixels</name><index pos:start="334:35" pos:end="334:47">[<expr pos:start="334:36" pos:end="334:46"><name pos:start="334:36" pos:end="334:44">pixel_ptr</name><operator pos:start="334:45" pos:end="334:46">++</operator></expr>]</index></name> <operator pos:start="334:49" pos:end="334:49">=</operator> <name pos:start="334:51" pos:end="334:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="336:29" pos:end="336:46"><expr pos:start="336:29" pos:end="336:45"><name pos:start="336:29" pos:end="336:43">pixel_countdown</name><operator pos:start="336:44" pos:end="336:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="338:29" pos:end="342:63"><if pos:start="338:29" pos:end="342:63">if <condition pos:start="338:32" pos:end="338:52">(<expr pos:start="338:33" pos:end="338:51"><name pos:start="338:33" pos:end="338:47">pixel_countdown</name> <operator pos:start="338:49" pos:end="338:49">&lt;</operator> <literal type="number" pos:start="338:51" pos:end="338:51">0</literal></expr>)</condition><block type="pseudo" pos:start="340:33" pos:end="342:63"><block_content pos:start="340:33" pos:end="342:63">

                                <expr_stmt pos:start="340:33" pos:end="342:63"><expr pos:start="340:33" pos:end="342:62"><call pos:start="340:33" pos:end="342:62"><name pos:start="340:33" pos:end="340:38">av_log</name><argument_list pos:start="340:39" pos:end="342:62">(<argument pos:start="340:40" pos:end="340:44"><expr pos:start="340:40" pos:end="340:44"><name pos:start="340:40" pos:end="340:44">avctx</name></expr></argument>, <argument pos:start="340:47" pos:end="340:58"><expr pos:start="340:47" pos:end="340:58"><name pos:start="340:47" pos:end="340:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="340:61" pos:end="340:99"><expr pos:start="340:61" pos:end="340:99"><literal type="string" pos:start="340:61" pos:end="340:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

                                       <argument pos:start="342:40" pos:end="342:54"><expr pos:start="342:40" pos:end="342:54"><name pos:start="342:40" pos:end="342:54">pixel_countdown</name></expr></argument>, <argument pos:start="342:57" pos:end="342:61"><expr pos:start="342:57" pos:end="342:61"><name pos:start="342:57" pos:end="342:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <expr_stmt pos:start="352:17" pos:end="352:47"><expr pos:start="352:17" pos:end="352:46"><name pos:start="352:17" pos:end="352:21">y_ptr</name> <operator pos:start="352:23" pos:end="352:24">+=</operator> <name pos:start="352:26" pos:end="352:46"><name pos:start="352:26" pos:end="352:26">s</name><operator pos:start="352:27" pos:end="352:28">-&gt;</operator><name pos:start="352:29" pos:end="352:33">frame</name><operator pos:start="352:34" pos:end="352:35">-&gt;</operator><name pos:start="352:36" pos:end="352:43">linesize</name><index pos:start="352:44" pos:end="352:46">[<expr pos:start="352:45" pos:end="352:45"><literal type="number" pos:start="352:45" pos:end="352:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="356:13" pos:end="356:18">break;</break>



        <case pos:start="360:9" pos:end="360:26">case <expr pos:start="360:14" pos:end="360:25"><name pos:start="360:14" pos:end="360:25">FLI_DTA_BRUN</name></expr>:</case>

            <expr_stmt pos:start="362:13" pos:end="362:22"><expr pos:start="362:13" pos:end="362:21"><name pos:start="362:13" pos:end="362:17">y_ptr</name> <operator pos:start="362:19" pos:end="362:19">=</operator> <literal type="number" pos:start="362:21" pos:end="362:21">0</literal></expr>;</expr_stmt>

            <for pos:start="364:13" pos:end="444:13">for <control pos:start="364:17" pos:end="364:62">(<init pos:start="364:18" pos:end="364:27"><expr pos:start="364:18" pos:end="364:26"><name pos:start="364:18" pos:end="364:22">lines</name> <operator pos:start="364:24" pos:end="364:24">=</operator> <literal type="number" pos:start="364:26" pos:end="364:26">0</literal></expr>;</init> <condition pos:start="364:29" pos:end="364:53"><expr pos:start="364:29" pos:end="364:52"><name pos:start="364:29" pos:end="364:33">lines</name> <operator pos:start="364:35" pos:end="364:35">&lt;</operator> <name pos:start="364:37" pos:end="364:52"><name pos:start="364:37" pos:end="364:37">s</name><operator pos:start="364:38" pos:end="364:39">-&gt;</operator><name pos:start="364:40" pos:end="364:44">avctx</name><operator pos:start="364:45" pos:end="364:46">-&gt;</operator><name pos:start="364:47" pos:end="364:52">height</name></name></expr>;</condition> <incr pos:start="364:55" pos:end="364:61"><expr pos:start="364:55" pos:end="364:61"><name pos:start="364:55" pos:end="364:59">lines</name><operator pos:start="364:60" pos:end="364:61">++</operator></expr></incr>)</control> <block pos:start="364:64" pos:end="444:13">{<block_content pos:start="366:17" pos:end="442:47">

                <expr_stmt pos:start="366:17" pos:end="366:34"><expr pos:start="366:17" pos:end="366:33"><name pos:start="366:17" pos:end="366:25">pixel_ptr</name> <operator pos:start="366:27" pos:end="366:27">=</operator> <name pos:start="366:29" pos:end="366:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="368:17" pos:end="370:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                <expr_stmt pos:start="372:17" pos:end="372:41"><expr pos:start="372:17" pos:end="372:40"><call pos:start="372:17" pos:end="372:40"><name pos:start="372:17" pos:end="372:32">bytestream2_skip</name><argument_list pos:start="372:33" pos:end="372:40">(<argument pos:start="372:34" pos:end="372:36"><expr pos:start="372:34" pos:end="372:36"><operator pos:start="372:34" pos:end="372:34">&amp;</operator><name pos:start="372:35" pos:end="372:36">g2</name></expr></argument>, <argument pos:start="372:39" pos:end="372:39"><expr pos:start="372:39" pos:end="372:39"><literal type="number" pos:start="372:39" pos:end="372:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="374:17" pos:end="374:50"><expr pos:start="374:17" pos:end="374:49"><name pos:start="374:17" pos:end="374:31">pixel_countdown</name> <operator pos:start="374:33" pos:end="374:33">=</operator> <name pos:start="374:35" pos:end="374:49"><name pos:start="374:35" pos:end="374:35">s</name><operator pos:start="374:36" pos:end="374:37">-&gt;</operator><name pos:start="374:38" pos:end="374:42">avctx</name><operator pos:start="374:43" pos:end="374:44">-&gt;</operator><name pos:start="374:45" pos:end="374:49">width</name></name></expr>;</expr_stmt> <comment type="block" pos:start="374:52" pos:end="374:86">/* Width is in pixels, not bytes */</comment>



                <while pos:start="378:17" pos:end="438:17">while <condition pos:start="378:23" pos:end="378:43">(<expr pos:start="378:24" pos:end="378:42"><name pos:start="378:24" pos:end="378:38">pixel_countdown</name> <operator pos:start="378:40" pos:end="378:40">&gt;</operator> <literal type="number" pos:start="378:42" pos:end="378:42">0</literal></expr>)</condition> <block pos:start="378:45" pos:end="438:17">{<block_content pos:start="380:21" pos:end="436:21">

                    <if_stmt pos:start="380:21" pos:end="382:30"><if pos:start="380:21" pos:end="382:30">if <condition pos:start="380:24" pos:end="380:75">(<expr pos:start="380:25" pos:end="380:74"><call pos:start="380:25" pos:end="380:45"><name pos:start="380:25" pos:end="380:40">bytestream2_tell</name><argument_list pos:start="380:41" pos:end="380:45">(<argument pos:start="380:42" pos:end="380:44"><expr pos:start="380:42" pos:end="380:44"><operator pos:start="380:42" pos:end="380:42">&amp;</operator><name pos:start="380:43" pos:end="380:44">g2</name></expr></argument>)</argument_list></call> <operator pos:start="380:47" pos:end="380:47">+</operator> <literal type="number" pos:start="380:49" pos:end="380:49">1</literal> <operator pos:start="380:51" pos:end="380:51">&gt;</operator> <name pos:start="380:53" pos:end="380:74">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="382:25" pos:end="382:30"><block_content pos:start="382:25" pos:end="382:30">

                        <break pos:start="382:25" pos:end="382:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="384:21" pos:end="384:73"><expr pos:start="384:21" pos:end="384:72"><name pos:start="384:21" pos:end="384:28">byte_run</name> <operator pos:start="384:30" pos:end="384:30">=</operator> <call pos:start="384:32" pos:end="384:72"><name pos:start="384:32" pos:end="384:42">sign_extend</name><argument_list pos:start="384:43" pos:end="384:72">(<argument pos:start="384:44" pos:end="384:68"><expr pos:start="384:44" pos:end="384:68"><call pos:start="384:44" pos:end="384:68"><name pos:start="384:44" pos:end="384:63">bytestream2_get_byte</name><argument_list pos:start="384:64" pos:end="384:68">(<argument pos:start="384:65" pos:end="384:67"><expr pos:start="384:65" pos:end="384:67"><operator pos:start="384:65" pos:end="384:65">&amp;</operator><name pos:start="384:66" pos:end="384:67">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="384:71" pos:end="384:71"><expr pos:start="384:71" pos:end="384:71"><literal type="number" pos:start="384:71" pos:end="384:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="386:21" pos:end="436:21"><if pos:start="386:21" pos:end="408:21">if <condition pos:start="386:24" pos:end="386:37">(<expr pos:start="386:25" pos:end="386:36"><name pos:start="386:25" pos:end="386:32">byte_run</name> <operator pos:start="386:34" pos:end="386:34">&gt;</operator> <literal type="number" pos:start="386:36" pos:end="386:36">0</literal></expr>)</condition> <block pos:start="386:39" pos:end="408:21">{<block_content pos:start="388:25" pos:end="406:25">

                        <expr_stmt pos:start="388:25" pos:end="388:58"><expr pos:start="388:25" pos:end="388:57"><name pos:start="388:25" pos:end="388:29">pixel</name> <operator pos:start="388:31" pos:end="388:31">=</operator> <call pos:start="388:33" pos:end="388:57"><name pos:start="388:33" pos:end="388:52">bytestream2_get_le24</name><argument_list pos:start="388:53" pos:end="388:57">(<argument pos:start="388:54" pos:end="388:56"><expr pos:start="388:54" pos:end="388:56"><operator pos:start="388:54" pos:end="388:54">&amp;</operator><name pos:start="388:55" pos:end="388:56">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="390:25" pos:end="390:54"><expr pos:start="390:25" pos:end="390:53"><call pos:start="390:25" pos:end="390:53"><name pos:start="390:25" pos:end="390:39">CHECK_PIXEL_PTR</name><argument_list pos:start="390:40" pos:end="390:53">(<argument pos:start="390:41" pos:end="390:52"><expr pos:start="390:41" pos:end="390:52"><literal type="number" pos:start="390:41" pos:end="390:41">3</literal> <operator pos:start="390:43" pos:end="390:43">*</operator> <name pos:start="390:45" pos:end="390:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="392:25" pos:end="406:25">for <control pos:start="392:29" pos:end="392:54">(<init pos:start="392:30" pos:end="392:35"><expr pos:start="392:30" pos:end="392:34"><name pos:start="392:30" pos:end="392:30">j</name> <operator pos:start="392:32" pos:end="392:32">=</operator> <literal type="number" pos:start="392:34" pos:end="392:34">0</literal></expr>;</init> <condition pos:start="392:37" pos:end="392:49"><expr pos:start="392:37" pos:end="392:48"><name pos:start="392:37" pos:end="392:37">j</name> <operator pos:start="392:39" pos:end="392:39">&lt;</operator> <name pos:start="392:41" pos:end="392:48">byte_run</name></expr>;</condition> <incr pos:start="392:51" pos:end="392:53"><expr pos:start="392:51" pos:end="392:53"><name pos:start="392:51" pos:end="392:51">j</name><operator pos:start="392:52" pos:end="392:53">++</operator></expr></incr>)</control> <block pos:start="392:56" pos:end="406:25">{<block_content pos:start="394:29" pos:end="404:56">

                            <expr_stmt pos:start="394:29" pos:end="394:63"><expr pos:start="394:29" pos:end="394:62"><call pos:start="394:29" pos:end="394:62"><name pos:start="394:29" pos:end="394:35">AV_WL24</name><argument_list pos:start="394:36" pos:end="394:62">(<argument pos:start="394:37" pos:end="394:54"><expr pos:start="394:37" pos:end="394:54"><name pos:start="394:37" pos:end="394:42">pixels</name> <operator pos:start="394:44" pos:end="394:44">+</operator> <name pos:start="394:46" pos:end="394:54">pixel_ptr</name></expr></argument>, <argument pos:start="394:57" pos:end="394:61"><expr pos:start="394:57" pos:end="394:61"><name pos:start="394:57" pos:end="394:61">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="396:29" pos:end="396:43"><expr pos:start="396:29" pos:end="396:42"><name pos:start="396:29" pos:end="396:37">pixel_ptr</name> <operator pos:start="396:39" pos:end="396:40">+=</operator> <literal type="number" pos:start="396:42" pos:end="396:42">3</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="398:29" pos:end="398:46"><expr pos:start="398:29" pos:end="398:45"><name pos:start="398:29" pos:end="398:43">pixel_countdown</name><operator pos:start="398:44" pos:end="398:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="400:29" pos:end="404:56"><if pos:start="400:29" pos:end="404:56">if <condition pos:start="400:32" pos:end="400:52">(<expr pos:start="400:33" pos:end="400:51"><name pos:start="400:33" pos:end="400:47">pixel_countdown</name> <operator pos:start="400:49" pos:end="400:49">&lt;</operator> <literal type="number" pos:start="400:51" pos:end="400:51">0</literal></expr>)</condition><block type="pseudo" pos:start="402:33" pos:end="404:56"><block_content pos:start="402:33" pos:end="404:56">

                                <expr_stmt pos:start="402:33" pos:end="404:56"><expr pos:start="402:33" pos:end="404:55"><call pos:start="402:33" pos:end="404:55"><name pos:start="402:33" pos:end="402:38">av_log</name><argument_list pos:start="402:39" pos:end="404:55">(<argument pos:start="402:40" pos:end="402:44"><expr pos:start="402:40" pos:end="402:44"><name pos:start="402:40" pos:end="402:44">avctx</name></expr></argument>, <argument pos:start="402:47" pos:end="402:58"><expr pos:start="402:47" pos:end="402:58"><name pos:start="402:47" pos:end="402:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="402:61" pos:end="402:88"><expr pos:start="402:61" pos:end="402:88"><literal type="string" pos:start="402:61" pos:end="402:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="404:40" pos:end="404:54"><expr pos:start="404:40" pos:end="404:54"><name pos:start="404:40" pos:end="404:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="408:23" pos:end="436:21">else <block pos:start="408:28" pos:end="436:21">{<block_content pos:start="410:25" pos:end="434:25">  <comment type="block" pos:start="408:31" pos:end="408:63">/* copy pixels if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="410:25" pos:end="410:45"><expr pos:start="410:25" pos:end="410:44"><name pos:start="410:25" pos:end="410:32">byte_run</name> <operator pos:start="410:34" pos:end="410:34">=</operator> <operator pos:start="410:36" pos:end="410:36">-</operator><name pos:start="410:37" pos:end="410:44">byte_run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="412:25" pos:end="414:34"><if pos:start="412:25" pos:end="414:34">if <condition pos:start="412:28" pos:end="412:90">(<expr pos:start="412:29" pos:end="412:89"><call pos:start="412:29" pos:end="412:49"><name pos:start="412:29" pos:end="412:44">bytestream2_tell</name><argument_list pos:start="412:45" pos:end="412:49">(<argument pos:start="412:46" pos:end="412:48"><expr pos:start="412:46" pos:end="412:48"><operator pos:start="412:46" pos:end="412:46">&amp;</operator><name pos:start="412:47" pos:end="412:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="412:51" pos:end="412:51">+</operator> <literal type="number" pos:start="412:53" pos:end="412:53">3</literal> <operator pos:start="412:55" pos:end="412:55">*</operator> <name pos:start="412:57" pos:end="412:64">byte_run</name> <operator pos:start="412:66" pos:end="412:66">&gt;</operator> <name pos:start="412:68" pos:end="412:89">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="414:29" pos:end="414:34"><block_content pos:start="414:29" pos:end="414:34">

                            <break pos:start="414:29" pos:end="414:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="416:25" pos:end="416:54"><expr pos:start="416:25" pos:end="416:53"><call pos:start="416:25" pos:end="416:53"><name pos:start="416:25" pos:end="416:39">CHECK_PIXEL_PTR</name><argument_list pos:start="416:40" pos:end="416:53">(<argument pos:start="416:41" pos:end="416:52"><expr pos:start="416:41" pos:end="416:52"><literal type="number" pos:start="416:41" pos:end="416:41">3</literal> <operator pos:start="416:43" pos:end="416:43">*</operator> <name pos:start="416:45" pos:end="416:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="418:25" pos:end="434:25">for <control pos:start="418:29" pos:end="418:54">(<init pos:start="418:30" pos:end="418:35"><expr pos:start="418:30" pos:end="418:34"><name pos:start="418:30" pos:end="418:30">j</name> <operator pos:start="418:32" pos:end="418:32">=</operator> <literal type="number" pos:start="418:34" pos:end="418:34">0</literal></expr>;</init> <condition pos:start="418:37" pos:end="418:49"><expr pos:start="418:37" pos:end="418:48"><name pos:start="418:37" pos:end="418:37">j</name> <operator pos:start="418:39" pos:end="418:39">&lt;</operator> <name pos:start="418:41" pos:end="418:48">byte_run</name></expr>;</condition> <incr pos:start="418:51" pos:end="418:53"><expr pos:start="418:51" pos:end="418:53"><name pos:start="418:51" pos:end="418:51">j</name><operator pos:start="418:52" pos:end="418:53">++</operator></expr></incr>)</control> <block pos:start="418:56" pos:end="434:25">{<block_content pos:start="420:29" pos:end="432:56">

                            <expr_stmt pos:start="420:29" pos:end="420:62"><expr pos:start="420:29" pos:end="420:61"><name pos:start="420:29" pos:end="420:33">pixel</name> <operator pos:start="420:35" pos:end="420:35">=</operator> <call pos:start="420:37" pos:end="420:61"><name pos:start="420:37" pos:end="420:56">bytestream2_get_le24</name><argument_list pos:start="420:57" pos:end="420:61">(<argument pos:start="420:58" pos:end="420:60"><expr pos:start="420:58" pos:end="420:60"><operator pos:start="420:58" pos:end="420:58">&amp;</operator><name pos:start="420:59" pos:end="420:60">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="422:29" pos:end="422:63"><expr pos:start="422:29" pos:end="422:62"><call pos:start="422:29" pos:end="422:62"><name pos:start="422:29" pos:end="422:35">AV_WL24</name><argument_list pos:start="422:36" pos:end="422:62">(<argument pos:start="422:37" pos:end="422:54"><expr pos:start="422:37" pos:end="422:54"><name pos:start="422:37" pos:end="422:42">pixels</name> <operator pos:start="422:44" pos:end="422:44">+</operator> <name pos:start="422:46" pos:end="422:54">pixel_ptr</name></expr></argument>, <argument pos:start="422:57" pos:end="422:61"><expr pos:start="422:57" pos:end="422:61"><name pos:start="422:57" pos:end="422:61">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="424:29" pos:end="424:44"><expr pos:start="424:29" pos:end="424:43"><name pos:start="424:29" pos:end="424:37">pixel_ptr</name>  <operator pos:start="424:40" pos:end="424:41">+=</operator> <literal type="number" pos:start="424:43" pos:end="424:43">3</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="426:29" pos:end="426:46"><expr pos:start="426:29" pos:end="426:45"><name pos:start="426:29" pos:end="426:43">pixel_countdown</name><operator pos:start="426:44" pos:end="426:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="428:29" pos:end="432:56"><if pos:start="428:29" pos:end="432:56">if <condition pos:start="428:32" pos:end="428:52">(<expr pos:start="428:33" pos:end="428:51"><name pos:start="428:33" pos:end="428:47">pixel_countdown</name> <operator pos:start="428:49" pos:end="428:49">&lt;</operator> <literal type="number" pos:start="428:51" pos:end="428:51">0</literal></expr>)</condition><block type="pseudo" pos:start="430:33" pos:end="432:56"><block_content pos:start="430:33" pos:end="432:56">

                                <expr_stmt pos:start="430:33" pos:end="432:56"><expr pos:start="430:33" pos:end="432:55"><call pos:start="430:33" pos:end="432:55"><name pos:start="430:33" pos:end="430:38">av_log</name><argument_list pos:start="430:39" pos:end="432:55">(<argument pos:start="430:40" pos:end="430:44"><expr pos:start="430:40" pos:end="430:44"><name pos:start="430:40" pos:end="430:44">avctx</name></expr></argument>, <argument pos:start="430:47" pos:end="430:58"><expr pos:start="430:47" pos:end="430:58"><name pos:start="430:47" pos:end="430:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="430:61" pos:end="430:88"><expr pos:start="430:61" pos:end="430:88"><literal type="string" pos:start="430:61" pos:end="430:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="432:40" pos:end="432:54"><expr pos:start="432:40" pos:end="432:54"><name pos:start="432:40" pos:end="432:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <expr_stmt pos:start="442:17" pos:end="442:47"><expr pos:start="442:17" pos:end="442:46"><name pos:start="442:17" pos:end="442:21">y_ptr</name> <operator pos:start="442:23" pos:end="442:24">+=</operator> <name pos:start="442:26" pos:end="442:46"><name pos:start="442:26" pos:end="442:26">s</name><operator pos:start="442:27" pos:end="442:28">-&gt;</operator><name pos:start="442:29" pos:end="442:33">frame</name><operator pos:start="442:34" pos:end="442:35">-&gt;</operator><name pos:start="442:36" pos:end="442:43">linesize</name><index pos:start="442:44" pos:end="442:46">[<expr pos:start="442:45" pos:end="442:45"><literal type="number" pos:start="442:45" pos:end="442:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="446:13" pos:end="446:18">break;</break>



        <case pos:start="450:9" pos:end="450:22">case <expr pos:start="450:14" pos:end="450:21"><name pos:start="450:14" pos:end="450:21">FLI_COPY</name></expr>:</case>

        <case pos:start="452:9" pos:end="452:26">case <expr pos:start="452:14" pos:end="452:25"><name pos:start="452:14" pos:end="452:25">FLI_DTA_COPY</name></expr>:</case>

            <comment type="block" pos:start="454:13" pos:end="454:53">/* copy the chunk (uncompressed frame) */</comment>

            <if_stmt pos:start="456:13" pos:end="494:13"><if pos:start="456:13" pos:end="464:13">if <condition pos:start="456:16" pos:end="456:98">(<expr pos:start="456:17" pos:end="456:97"><name pos:start="456:17" pos:end="456:26">chunk_size</name> <operator pos:start="456:28" pos:end="456:28">-</operator> <literal type="number" pos:start="456:30" pos:end="456:30">6</literal> <operator pos:start="456:32" pos:end="456:32">&gt;</operator> <operator pos:start="456:34" pos:end="456:34">(</operator><name pos:start="456:35" pos:end="456:42">unsigned</name> <name pos:start="456:44" pos:end="456:46">int</name><operator pos:start="456:47" pos:end="456:47">)</operator><operator pos:start="456:48" pos:end="456:48">(</operator><call pos:start="456:49" pos:end="456:75"><name pos:start="456:49" pos:end="456:55">FFALIGN</name><argument_list pos:start="456:56" pos:end="456:75">(<argument pos:start="456:57" pos:end="456:71"><expr pos:start="456:57" pos:end="456:71"><name pos:start="456:57" pos:end="456:71"><name pos:start="456:57" pos:end="456:57">s</name><operator pos:start="456:58" pos:end="456:59">-&gt;</operator><name pos:start="456:60" pos:end="456:64">avctx</name><operator pos:start="456:65" pos:end="456:66">-&gt;</operator><name pos:start="456:67" pos:end="456:71">width</name></name></expr></argument>, <argument pos:start="456:74" pos:end="456:74"><expr pos:start="456:74" pos:end="456:74"><literal type="number" pos:start="456:74" pos:end="456:74">2</literal></expr></argument>)</argument_list></call> <operator pos:start="456:77" pos:end="456:77">*</operator> <name pos:start="456:79" pos:end="456:94"><name pos:start="456:79" pos:end="456:79">s</name><operator pos:start="456:80" pos:end="456:81">-&gt;</operator><name pos:start="456:82" pos:end="456:86">avctx</name><operator pos:start="456:87" pos:end="456:88">-&gt;</operator><name pos:start="456:89" pos:end="456:94">height</name></name><operator pos:start="456:95" pos:end="456:95">)</operator><operator pos:start="456:96" pos:end="456:96">*</operator><literal type="number" pos:start="456:97" pos:end="456:97">3</literal></expr>)</condition> <block pos:start="456:100" pos:end="464:13">{<block_content pos:start="458:17" pos:end="462:54">

                <expr_stmt pos:start="458:17" pos:end="460:78"><expr pos:start="458:17" pos:end="460:77"><call pos:start="458:17" pos:end="460:77"><name pos:start="458:17" pos:end="458:22">av_log</name><argument_list pos:start="458:23" pos:end="460:77">(<argument pos:start="458:24" pos:end="458:28"><expr pos:start="458:24" pos:end="458:28"><name pos:start="458:24" pos:end="458:28">avctx</name></expr></argument>, <argument pos:start="458:31" pos:end="458:42"><expr pos:start="458:31" pos:end="458:42"><name pos:start="458:31" pos:end="458:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="458:45" pos:end="460:60"><expr pos:start="458:45" pos:end="460:60"><literal type="string" pos:start="458:45" pos:end="458:89">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

                       <literal type="string" pos:start="460:24" pos:end="460:60">"bigger than image, skipping chunk\n"</literal></expr></argument>, <argument pos:start="460:63" pos:end="460:76"><expr pos:start="460:63" pos:end="460:76"><name pos:start="460:63" pos:end="460:72">chunk_size</name> <operator pos:start="460:74" pos:end="460:74">-</operator> <literal type="number" pos:start="460:76" pos:end="460:76">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="462:17" pos:end="462:54"><expr pos:start="462:17" pos:end="462:53"><call pos:start="462:17" pos:end="462:53"><name pos:start="462:17" pos:end="462:32">bytestream2_skip</name><argument_list pos:start="462:33" pos:end="462:53">(<argument pos:start="462:34" pos:end="462:36"><expr pos:start="462:34" pos:end="462:36"><operator pos:start="462:34" pos:end="462:34">&amp;</operator><name pos:start="462:35" pos:end="462:36">g2</name></expr></argument>, <argument pos:start="462:39" pos:end="462:52"><expr pos:start="462:39" pos:end="462:52"><name pos:start="462:39" pos:end="462:48">chunk_size</name> <operator pos:start="462:50" pos:end="462:50">-</operator> <literal type="number" pos:start="462:52" pos:end="462:52">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="464:15" pos:end="494:13">else <block pos:start="464:20" pos:end="494:13">{<block_content pos:start="466:17" pos:end="492:17">

                <for pos:start="466:17" pos:end="492:17">for <control pos:start="466:21" pos:end="468:52">(<init pos:start="466:22" pos:end="466:31"><expr pos:start="466:22" pos:end="466:30"><name pos:start="466:22" pos:end="466:26">y_ptr</name> <operator pos:start="466:28" pos:end="466:28">=</operator> <literal type="number" pos:start="466:30" pos:end="466:30">0</literal></expr>;</init> <condition pos:start="466:33" pos:end="466:81"><expr pos:start="466:33" pos:end="466:80"><name pos:start="466:33" pos:end="466:37">y_ptr</name> <operator pos:start="466:39" pos:end="466:39">&lt;</operator> <name pos:start="466:41" pos:end="466:61"><name pos:start="466:41" pos:end="466:41">s</name><operator pos:start="466:42" pos:end="466:43">-&gt;</operator><name pos:start="466:44" pos:end="466:48">frame</name><operator pos:start="466:49" pos:end="466:50">-&gt;</operator><name pos:start="466:51" pos:end="466:58">linesize</name><index pos:start="466:59" pos:end="466:61">[<expr pos:start="466:60" pos:end="466:60"><literal type="number" pos:start="466:60" pos:end="466:60">0</literal></expr>]</index></name> <operator pos:start="466:63" pos:end="466:63">*</operator> <name pos:start="466:65" pos:end="466:80"><name pos:start="466:65" pos:end="466:65">s</name><operator pos:start="466:66" pos:end="466:67">-&gt;</operator><name pos:start="466:68" pos:end="466:72">avctx</name><operator pos:start="466:73" pos:end="466:74">-&gt;</operator><name pos:start="466:75" pos:end="466:80">height</name></name></expr>;</condition>

                     <incr pos:start="468:22" pos:end="468:51"><expr pos:start="468:22" pos:end="468:51"><name pos:start="468:22" pos:end="468:26">y_ptr</name> <operator pos:start="468:28" pos:end="468:29">+=</operator> <name pos:start="468:31" pos:end="468:51"><name pos:start="468:31" pos:end="468:31">s</name><operator pos:start="468:32" pos:end="468:33">-&gt;</operator><name pos:start="468:34" pos:end="468:38">frame</name><operator pos:start="468:39" pos:end="468:40">-&gt;</operator><name pos:start="468:41" pos:end="468:48">linesize</name><index pos:start="468:49" pos:end="468:51">[<expr pos:start="468:50" pos:end="468:50"><literal type="number" pos:start="468:50" pos:end="468:50">0</literal></expr>]</index></name></expr></incr>)</control> <block pos:start="468:54" pos:end="492:17">{<block_content pos:start="472:21" pos:end="490:49">



                    <expr_stmt pos:start="472:21" pos:end="472:54"><expr pos:start="472:21" pos:end="472:53"><name pos:start="472:21" pos:end="472:35">pixel_countdown</name> <operator pos:start="472:37" pos:end="472:37">=</operator> <name pos:start="472:39" pos:end="472:53"><name pos:start="472:39" pos:end="472:39">s</name><operator pos:start="472:40" pos:end="472:41">-&gt;</operator><name pos:start="472:42" pos:end="472:46">avctx</name><operator pos:start="472:47" pos:end="472:48">-&gt;</operator><name pos:start="472:49" pos:end="472:53">width</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="474:21" pos:end="474:34"><expr pos:start="474:21" pos:end="474:33"><name pos:start="474:21" pos:end="474:29">pixel_ptr</name> <operator pos:start="474:31" pos:end="474:31">=</operator> <literal type="number" pos:start="474:33" pos:end="474:33">0</literal></expr>;</expr_stmt>

                    <while pos:start="476:21" pos:end="486:21">while <condition pos:start="476:27" pos:end="476:47">(<expr pos:start="476:28" pos:end="476:46"><name pos:start="476:28" pos:end="476:42">pixel_countdown</name> <operator pos:start="476:44" pos:end="476:44">&gt;</operator> <literal type="number" pos:start="476:46" pos:end="476:46">0</literal></expr>)</condition> <block pos:start="476:49" pos:end="486:21">{<block_content pos:start="478:25" pos:end="484:42">

                        <expr_stmt pos:start="478:25" pos:end="478:58"><expr pos:start="478:25" pos:end="478:57"><name pos:start="478:25" pos:end="478:29">pixel</name> <operator pos:start="478:31" pos:end="478:31">=</operator> <call pos:start="478:33" pos:end="478:57"><name pos:start="478:33" pos:end="478:52">bytestream2_get_le24</name><argument_list pos:start="478:53" pos:end="478:57">(<argument pos:start="478:54" pos:end="478:56"><expr pos:start="478:54" pos:end="478:56"><operator pos:start="478:54" pos:end="478:54">&amp;</operator><name pos:start="478:55" pos:end="478:56">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="480:25" pos:end="480:67"><expr pos:start="480:25" pos:end="480:66"><call pos:start="480:25" pos:end="480:66"><name pos:start="480:25" pos:end="480:31">AV_WL24</name><argument_list pos:start="480:32" pos:end="480:66">(<argument pos:start="480:33" pos:end="480:58"><expr pos:start="480:33" pos:end="480:58"><operator pos:start="480:33" pos:end="480:33">&amp;</operator><name pos:start="480:34" pos:end="480:58"><name pos:start="480:34" pos:end="480:39">pixels</name><index pos:start="480:40" pos:end="480:58">[<expr pos:start="480:41" pos:end="480:57"><name pos:start="480:41" pos:end="480:45">y_ptr</name> <operator pos:start="480:47" pos:end="480:47">+</operator> <name pos:start="480:49" pos:end="480:57">pixel_ptr</name></expr>]</index></name></expr></argument>, <argument pos:start="480:61" pos:end="480:65"><expr pos:start="480:61" pos:end="480:65"><name pos:start="480:61" pos:end="480:65">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="482:25" pos:end="482:39"><expr pos:start="482:25" pos:end="482:38"><name pos:start="482:25" pos:end="482:33">pixel_ptr</name> <operator pos:start="482:35" pos:end="482:36">+=</operator> <literal type="number" pos:start="482:38" pos:end="482:38">3</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="484:25" pos:end="484:42"><expr pos:start="484:25" pos:end="484:41"><name pos:start="484:25" pos:end="484:39">pixel_countdown</name><operator pos:start="484:40" pos:end="484:41">--</operator></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <if_stmt pos:start="488:21" pos:end="490:49"><if pos:start="488:21" pos:end="490:49">if <condition pos:start="488:24" pos:end="488:44">(<expr pos:start="488:25" pos:end="488:43"><name pos:start="488:25" pos:end="488:39"><name pos:start="488:25" pos:end="488:25">s</name><operator pos:start="488:26" pos:end="488:27">-&gt;</operator><name pos:start="488:28" pos:end="488:32">avctx</name><operator pos:start="488:33" pos:end="488:34">-&gt;</operator><name pos:start="488:35" pos:end="488:39">width</name></name> <operator pos:start="488:41" pos:end="488:41">&amp;</operator> <literal type="number" pos:start="488:43" pos:end="488:43">1</literal></expr>)</condition><block type="pseudo" pos:start="490:25" pos:end="490:49"><block_content pos:start="490:25" pos:end="490:49">

                        <expr_stmt pos:start="490:25" pos:end="490:49"><expr pos:start="490:25" pos:end="490:48"><call pos:start="490:25" pos:end="490:48"><name pos:start="490:25" pos:end="490:40">bytestream2_skip</name><argument_list pos:start="490:41" pos:end="490:48">(<argument pos:start="490:42" pos:end="490:44"><expr pos:start="490:42" pos:end="490:44"><operator pos:start="490:42" pos:end="490:42">&amp;</operator><name pos:start="490:43" pos:end="490:44">g2</name></expr></argument>, <argument pos:start="490:47" pos:end="490:47"><expr pos:start="490:47" pos:end="490:47"><literal type="number" pos:start="490:47" pos:end="490:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="496:13" pos:end="496:18">break;</break>



        <case pos:start="500:9" pos:end="500:22">case <expr pos:start="500:14" pos:end="500:21"><name pos:start="500:14" pos:end="500:21">FLI_MINI</name></expr>:</case>

            <comment type="block" pos:start="502:13" pos:end="502:67">/* some sort of a thumbnail? disregard this chunk... */</comment>

            <expr_stmt pos:start="504:13" pos:end="504:50"><expr pos:start="504:13" pos:end="504:49"><call pos:start="504:13" pos:end="504:49"><name pos:start="504:13" pos:end="504:28">bytestream2_skip</name><argument_list pos:start="504:29" pos:end="504:49">(<argument pos:start="504:30" pos:end="504:32"><expr pos:start="504:30" pos:end="504:32"><operator pos:start="504:30" pos:end="504:30">&amp;</operator><name pos:start="504:31" pos:end="504:32">g2</name></expr></argument>, <argument pos:start="504:35" pos:end="504:48"><expr pos:start="504:35" pos:end="504:48"><name pos:start="504:35" pos:end="504:44">chunk_size</name> <operator pos:start="504:46" pos:end="504:46">-</operator> <literal type="number" pos:start="504:48" pos:end="504:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="506:13" pos:end="506:18">break;</break>



        <default pos:start="510:9" pos:end="510:16">default:</default>

            <expr_stmt pos:start="512:13" pos:end="512:85"><expr pos:start="512:13" pos:end="512:84"><call pos:start="512:13" pos:end="512:84"><name pos:start="512:13" pos:end="512:18">av_log</name><argument_list pos:start="512:19" pos:end="512:84">(<argument pos:start="512:20" pos:end="512:24"><expr pos:start="512:20" pos:end="512:24"><name pos:start="512:20" pos:end="512:24">avctx</name></expr></argument>, <argument pos:start="512:27" pos:end="512:38"><expr pos:start="512:27" pos:end="512:38"><name pos:start="512:27" pos:end="512:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="512:41" pos:end="512:71"><expr pos:start="512:41" pos:end="512:71"><literal type="string" pos:start="512:41" pos:end="512:71">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument pos:start="512:74" pos:end="512:83"><expr pos:start="512:74" pos:end="512:83"><name pos:start="512:74" pos:end="512:83">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="514:13" pos:end="514:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="520:9" pos:end="530:9"><if pos:start="520:9" pos:end="524:9">if <condition pos:start="520:12" pos:end="520:64">(<expr pos:start="520:13" pos:end="520:63"><name pos:start="520:13" pos:end="520:34">stream_ptr_after_chunk</name> <operator pos:start="520:36" pos:end="520:36">-</operator> <call pos:start="520:38" pos:end="520:58"><name pos:start="520:38" pos:end="520:53">bytestream2_tell</name><argument_list pos:start="520:54" pos:end="520:58">(<argument pos:start="520:55" pos:end="520:57"><expr pos:start="520:55" pos:end="520:57"><operator pos:start="520:55" pos:end="520:55">&amp;</operator><name pos:start="520:56" pos:end="520:57">g2</name></expr></argument>)</argument_list></call> <operator pos:start="520:60" pos:end="520:61">&gt;=</operator> <literal type="number" pos:start="520:63" pos:end="520:63">0</literal></expr>)</condition> <block pos:start="520:66" pos:end="524:9">{<block_content pos:start="522:13" pos:end="522:82">

            <expr_stmt pos:start="522:13" pos:end="522:82"><expr pos:start="522:13" pos:end="522:81"><call pos:start="522:13" pos:end="522:81"><name pos:start="522:13" pos:end="522:28">bytestream2_skip</name><argument_list pos:start="522:29" pos:end="522:81">(<argument pos:start="522:30" pos:end="522:32"><expr pos:start="522:30" pos:end="522:32"><operator pos:start="522:30" pos:end="522:30">&amp;</operator><name pos:start="522:31" pos:end="522:32">g2</name></expr></argument>, <argument pos:start="522:35" pos:end="522:80"><expr pos:start="522:35" pos:end="522:80"><name pos:start="522:35" pos:end="522:56">stream_ptr_after_chunk</name> <operator pos:start="522:58" pos:end="522:58">-</operator> <call pos:start="522:60" pos:end="522:80"><name pos:start="522:60" pos:end="522:75">bytestream2_tell</name><argument_list pos:start="522:76" pos:end="522:80">(<argument pos:start="522:77" pos:end="522:79"><expr pos:start="522:77" pos:end="522:79"><operator pos:start="522:77" pos:end="522:77">&amp;</operator><name pos:start="522:78" pos:end="522:79">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="524:11" pos:end="530:9">else <block pos:start="524:16" pos:end="530:9">{<block_content pos:start="526:13" pos:end="528:18">

            <expr_stmt pos:start="526:13" pos:end="526:60"><expr pos:start="526:13" pos:end="526:59"><call pos:start="526:13" pos:end="526:59"><name pos:start="526:13" pos:end="526:18">av_log</name><argument_list pos:start="526:19" pos:end="526:59">(<argument pos:start="526:20" pos:end="526:24"><expr pos:start="526:20" pos:end="526:24"><name pos:start="526:20" pos:end="526:24">avctx</name></expr></argument>, <argument pos:start="526:27" pos:end="526:38"><expr pos:start="526:27" pos:end="526:38"><name pos:start="526:27" pos:end="526:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="526:41" pos:end="526:58"><expr pos:start="526:41" pos:end="526:58"><literal type="string" pos:start="526:41" pos:end="526:58">"Chunk overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="528:13" pos:end="528:18">break;</break>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="534:9" pos:end="534:33"><expr pos:start="534:9" pos:end="534:32"><name pos:start="534:9" pos:end="534:18">frame_size</name> <operator pos:start="534:20" pos:end="534:21">-=</operator> <name pos:start="534:23" pos:end="534:32">chunk_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="536:9" pos:end="536:21"><expr pos:start="536:9" pos:end="536:20"><name pos:start="536:9" pos:end="536:18">num_chunks</name><operator pos:start="536:19" pos:end="536:20">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="542:5" pos:end="544:66">/* by the end of the chunk, the stream ptr should equal the frame

     * size (minus 1, possibly); if it doesn't, issue a warning */</comment>

    <if_stmt pos:start="546:5" pos:end="550:78"><if pos:start="546:5" pos:end="550:78">if <condition pos:start="546:8" pos:end="546:89">(<expr pos:start="546:9" pos:end="546:88"><operator pos:start="546:9" pos:end="546:9">(</operator><call pos:start="546:10" pos:end="546:40"><name pos:start="546:10" pos:end="546:35">bytestream2_get_bytes_left</name><argument_list pos:start="546:36" pos:end="546:40">(<argument pos:start="546:37" pos:end="546:39"><expr pos:start="546:37" pos:end="546:39"><operator pos:start="546:37" pos:end="546:37">&amp;</operator><name pos:start="546:38" pos:end="546:39">g2</name></expr></argument>)</argument_list></call> <operator pos:start="546:42" pos:end="546:43">!=</operator> <literal type="number" pos:start="546:45" pos:end="546:45">0</literal><operator pos:start="546:46" pos:end="546:46">)</operator> <operator pos:start="546:48" pos:end="546:49">&amp;&amp;</operator> <operator pos:start="546:51" pos:end="546:51">(</operator><call pos:start="546:52" pos:end="546:82"><name pos:start="546:52" pos:end="546:77">bytestream2_get_bytes_left</name><argument_list pos:start="546:78" pos:end="546:82">(<argument pos:start="546:79" pos:end="546:81"><expr pos:start="546:79" pos:end="546:81"><operator pos:start="546:79" pos:end="546:79">&amp;</operator><name pos:start="546:80" pos:end="546:81">g2</name></expr></argument>)</argument_list></call> <operator pos:start="546:84" pos:end="546:85">!=</operator> <literal type="number" pos:start="546:87" pos:end="546:87">1</literal><operator pos:start="546:88" pos:end="546:88">)</operator></expr>)</condition><block type="pseudo" pos:start="548:9" pos:end="550:78"><block_content pos:start="548:9" pos:end="550:78">

        <expr_stmt pos:start="548:9" pos:end="550:78"><expr pos:start="548:9" pos:end="550:77"><call pos:start="548:9" pos:end="550:77"><name pos:start="548:9" pos:end="548:14">av_log</name><argument_list pos:start="548:15" pos:end="550:77">(<argument pos:start="548:16" pos:end="548:20"><expr pos:start="548:16" pos:end="548:20"><name pos:start="548:16" pos:end="548:20">avctx</name></expr></argument>, <argument pos:start="548:23" pos:end="548:34"><expr pos:start="548:23" pos:end="548:34"><name pos:start="548:23" pos:end="548:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="548:37" pos:end="550:43"><expr pos:start="548:37" pos:end="550:43"><literal type="string" pos:start="548:37" pos:end="548:80">"Processed FLI chunk where chunk size = %d "</literal> \

               <literal type="string" pos:start="550:16" pos:end="550:43">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument pos:start="550:46" pos:end="550:53"><expr pos:start="550:46" pos:end="550:53"><name pos:start="550:46" pos:end="550:53">buf_size</name></expr></argument>, <argument pos:start="550:56" pos:end="550:76"><expr pos:start="550:56" pos:end="550:76"><call pos:start="550:56" pos:end="550:76"><name pos:start="550:56" pos:end="550:71">bytestream2_tell</name><argument_list pos:start="550:72" pos:end="550:76">(<argument pos:start="550:73" pos:end="550:75"><expr pos:start="550:73" pos:end="550:75"><operator pos:start="550:73" pos:end="550:73">&amp;</operator><name pos:start="550:74" pos:end="550:75">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="554:5" pos:end="556:19"><if pos:start="554:5" pos:end="556:19">if <condition pos:start="554:8" pos:end="554:49">(<expr pos:start="554:9" pos:end="554:48"><operator pos:start="554:9" pos:end="554:9">(</operator><name pos:start="554:10" pos:end="554:12">ret</name> <operator pos:start="554:14" pos:end="554:14">=</operator> <call pos:start="554:16" pos:end="554:43"><name pos:start="554:16" pos:end="554:27">av_frame_ref</name><argument_list pos:start="554:28" pos:end="554:43">(<argument pos:start="554:29" pos:end="554:32"><expr pos:start="554:29" pos:end="554:32"><name pos:start="554:29" pos:end="554:32">data</name></expr></argument>, <argument pos:start="554:35" pos:end="554:42"><expr pos:start="554:35" pos:end="554:42"><name pos:start="554:35" pos:end="554:42"><name pos:start="554:35" pos:end="554:35">s</name><operator pos:start="554:36" pos:end="554:37">-&gt;</operator><name pos:start="554:38" pos:end="554:42">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="554:44" pos:end="554:44">)</operator> <operator pos:start="554:46" pos:end="554:46">&lt;</operator> <literal type="number" pos:start="554:48" pos:end="554:48">0</literal></expr>)</condition><block type="pseudo" pos:start="556:9" pos:end="556:19"><block_content pos:start="556:9" pos:end="556:19">

        <return pos:start="556:9" pos:end="556:19">return <expr pos:start="556:16" pos:end="556:18"><name pos:start="556:16" pos:end="556:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="560:5" pos:end="560:19"><expr pos:start="560:5" pos:end="560:18"><operator pos:start="560:5" pos:end="560:5">*</operator><name pos:start="560:6" pos:end="560:14">got_frame</name> <operator pos:start="560:16" pos:end="560:16">=</operator> <literal type="number" pos:start="560:18" pos:end="560:18">1</literal></expr>;</expr_stmt>



    <return pos:start="564:5" pos:end="564:20">return <expr pos:start="564:12" pos:end="564:19"><name pos:start="564:12" pos:end="564:19">buf_size</name></expr>;</return>

</block_content>}</block></function></unit>
