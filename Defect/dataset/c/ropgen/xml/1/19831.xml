<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19831.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">parse_host_src_port</name><parameter_list pos:start="1:24" pos:end="5:46">(<parameter pos:start="1:25" pos:end="1:49"><decl pos:start="1:25" pos:end="1:49"><type pos:start="1:25" pos:end="1:49"><name pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:30">struct</name> <name pos:start="1:32" pos:end="1:42">sockaddr_in</name></name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">haddr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:49"><decl pos:start="3:25" pos:end="3:49"><type pos:start="3:25" pos:end="3:49"><name pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:30">struct</name> <name pos:start="3:32" pos:end="3:42">sockaddr_in</name></name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:49">saddr</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:45"><decl pos:start="5:25" pos:end="5:45"><type pos:start="5:25" pos:end="5:45"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:45">input_str</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="79:1">{<block_content pos:start="9:5" pos:end="77:14">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">str</name> <init pos:start="9:15" pos:end="9:33">= <expr pos:start="9:17" pos:end="9:33"><call pos:start="9:17" pos:end="9:33"><name pos:start="9:17" pos:end="9:22">strdup</name><argument_list pos:start="9:23" pos:end="9:33">(<argument pos:start="9:24" pos:end="9:32"><expr pos:start="9:24" pos:end="9:32"><name pos:start="9:24" pos:end="9:32">input_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">host_str</name> <init pos:start="11:20" pos:end="11:24">= <expr pos:start="11:22" pos:end="11:24"><name pos:start="11:22" pos:end="11:24">str</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:17">src_str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:24">src_str2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">ptr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="29:7">/*

     * Chop off any extra arguments at the end of the string which

     * would start with a comma, then fill in the src port information

     * if it was provided else use the "any address" and "any port".

     */</comment>

    <if_stmt pos:start="31:5" pos:end="33:20"><if pos:start="31:5" pos:end="33:20">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:12">ptr</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:21">strchr</name><argument_list pos:start="31:22" pos:end="31:30">(<argument pos:start="31:23" pos:end="31:25"><expr pos:start="31:23" pos:end="31:25"><name pos:start="31:23" pos:end="31:25">str</name></expr></argument>,<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><literal type="char" pos:start="31:27" pos:end="31:29">','</literal></expr></argument>)</argument_list></call><operator pos:start="31:31" pos:end="31:31">)</operator></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:20"><block_content pos:start="33:9" pos:end="33:20">

        <expr_stmt pos:start="33:9" pos:end="33:20"><expr pos:start="33:9" pos:end="33:19"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:12">ptr</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <literal type="char" pos:start="33:16" pos:end="33:19">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:42">(<expr pos:start="37:9" pos:end="37:41"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:16">src_str</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:40"><name pos:start="37:20" pos:end="37:25">strchr</name><argument_list pos:start="37:26" pos:end="37:40">(<argument pos:start="37:27" pos:end="37:35"><expr pos:start="37:27" pos:end="37:35"><name pos:start="37:27" pos:end="37:35">input_str</name></expr></argument>,<argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><literal type="char" pos:start="37:37" pos:end="37:39">'@'</literal></expr></argument>)</argument_list></call><operator pos:start="37:41" pos:end="37:41">)</operator></expr>)</condition> <block pos:start="37:44" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:16">src_str</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <literal type="char" pos:start="39:20" pos:end="39:23">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:18"><expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:15">src_str</name><operator pos:start="41:16" pos:end="41:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="49:18"><if pos:start="47:5" pos:end="49:18">if <condition pos:start="47:8" pos:end="47:45">(<expr pos:start="47:9" pos:end="47:44"><call pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:23">parse_host_port</name><argument_list pos:start="47:24" pos:end="47:40">(<argument pos:start="47:25" pos:end="47:29"><expr pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:29">haddr</name></expr></argument>, <argument pos:start="47:32" pos:end="47:39"><expr pos:start="47:32" pos:end="47:39"><name pos:start="47:32" pos:end="47:39">host_str</name></expr></argument>)</argument_list></call> <operator pos:start="47:42" pos:end="47:42">&lt;</operator> <literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:18"><block_content pos:start="49:9" pos:end="49:18">

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:23"><expr pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:12">src_str2</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <name pos:start="53:16" pos:end="53:22">src_str</name></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:24"><if pos:start="55:5" pos:end="57:24">if <condition pos:start="55:8" pos:end="55:37">(<expr pos:start="55:9" pos:end="55:36"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:16">src_str</name> <operator pos:start="55:18" pos:end="55:19">||</operator> <operator pos:start="55:21" pos:end="55:21">*</operator><name pos:start="55:22" pos:end="55:28">src_str</name> <operator pos:start="55:30" pos:end="55:31">==</operator> <literal type="char" pos:start="55:33" pos:end="55:36">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:24"><block_content pos:start="57:9" pos:end="57:24">

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:16">src_str2</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <literal type="string" pos:start="57:20" pos:end="57:23">":0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="63:18"><if pos:start="61:5" pos:end="63:18">if <condition pos:start="61:8" pos:end="61:45">(<expr pos:start="61:9" pos:end="61:44"><call pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:23">parse_host_port</name><argument_list pos:start="61:24" pos:end="61:40">(<argument pos:start="61:25" pos:end="61:29"><expr pos:start="61:25" pos:end="61:29"><name pos:start="61:25" pos:end="61:29">saddr</name></expr></argument>, <argument pos:start="61:32" pos:end="61:39"><expr pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:39">src_str2</name></expr></argument>)</argument_list></call> <operator pos:start="61:42" pos:end="61:42">&lt;</operator> <literal type="number" pos:start="61:44" pos:end="61:44">0</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:18"><block_content pos:start="63:9" pos:end="63:18">

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:14"><expr pos:start="67:5" pos:end="67:13"><call pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:8">free</name><argument_list pos:start="67:9" pos:end="67:13">(<argument pos:start="67:10" pos:end="67:12"><expr pos:start="67:10" pos:end="67:12"><name pos:start="67:10" pos:end="67:12">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:14">return<expr pos:start="69:11" pos:end="69:13"><operator pos:start="69:11" pos:end="69:11">(</operator><literal type="number" pos:start="69:12" pos:end="69:12">0</literal><operator pos:start="69:13" pos:end="69:13">)</operator></expr>;</return>



<label pos:start="73:1" pos:end="73:5"><name pos:start="73:1" pos:end="73:4">fail</name>:</label>

    <expr_stmt pos:start="75:5" pos:end="75:14"><expr pos:start="75:5" pos:end="75:13"><call pos:start="75:5" pos:end="75:13"><name pos:start="75:5" pos:end="75:8">free</name><argument_list pos:start="75:9" pos:end="75:13">(<argument pos:start="75:10" pos:end="75:12"><expr pos:start="75:10" pos:end="75:12"><name pos:start="75:10" pos:end="75:12">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:14">return <expr pos:start="77:12" pos:end="77:13"><operator pos:start="77:12" pos:end="77:12">-</operator><literal type="number" pos:start="77:13" pos:end="77:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
