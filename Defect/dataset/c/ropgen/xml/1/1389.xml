<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1389.c" pos:tabs="8"><function pos:start="1:1" pos:end="411:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">kvm_init</name><parameter_list pos:start="1:13" pos:end="1:30">(<parameter pos:start="1:14" pos:end="1:29"><decl pos:start="1:14" pos:end="1:29"><type pos:start="1:14" pos:end="1:27"><name pos:start="1:14" pos:end="1:25">MachineClass</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:29">mc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="411:1">{<block_content pos:start="5:5" pos:end="409:15">

    <decl_stmt pos:start="5:5" pos:end="9:55"><decl pos:start="5:5" pos:end="9:54"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name></type> <name pos:start="5:23" pos:end="5:36"><name pos:start="5:23" pos:end="5:34">upgrade_note</name><index pos:start="5:35" pos:end="5:36">[]</index></name> <init pos:start="5:38" pos:end="9:54">=

        <expr pos:start="7:9" pos:end="9:54"><literal type="string" pos:start="7:9" pos:end="7:71">"Please upgrade to at least kernel 2.6.29 or recent kvm-kmod\n"</literal>

        <literal type="string" pos:start="9:9" pos:end="9:54">"(see http://sourceforge.net/projects/kvm).\n"</literal></expr></init></decl>;</decl_stmt>

    <struct pos:start="11:5" pos:end="25:22">struct <block pos:start="11:12" pos:end="17:5">{

        <decl_stmt pos:start="13:9" pos:end="13:25"><decl pos:start="13:9" pos:end="13:24"><type pos:start="13:9" pos:end="13:20"><specifier pos:start="13:9" pos:end="13:13">const</specifier> <name pos:start="13:15" pos:end="13:18">char</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:24">name</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:16"><decl pos:start="15:9" pos:end="15:15"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">num</name></decl>;</decl_stmt>

    }</block> <decl pos:start="17:7" pos:end="25:5"><name pos:start="17:7" pos:end="17:16"><name pos:start="17:7" pos:end="17:14">num_cpus</name><index pos:start="17:15" pos:end="17:16">[]</index></name> <init pos:start="17:18" pos:end="25:5">= <expr pos:start="17:20" pos:end="25:5"><block pos:start="17:20" pos:end="25:5">{

        <expr pos:start="19:9" pos:end="19:36"><block pos:start="19:9" pos:end="19:36">{ <expr pos:start="19:11" pos:end="19:15"><literal type="string" pos:start="19:11" pos:end="19:15">"SMP"</literal></expr>,          <expr pos:start="19:27" pos:end="19:34"><name pos:start="19:27" pos:end="19:34">smp_cpus</name></expr> }</block></expr>,

        <expr pos:start="21:9" pos:end="21:36"><block pos:start="21:9" pos:end="21:36">{ <expr pos:start="21:11" pos:end="21:24"><literal type="string" pos:start="21:11" pos:end="21:24">"hotpluggable"</literal></expr>, <expr pos:start="21:27" pos:end="21:34"><name pos:start="21:27" pos:end="21:34">max_cpus</name></expr> }</block></expr>,

        <expr pos:start="23:9" pos:end="23:17"><block pos:start="23:9" pos:end="23:17">{ <expr pos:start="23:11" pos:end="23:14"><name pos:start="23:11" pos:end="23:14">NULL</name></expr>, }</block></expr>

    }</block></expr></init></decl>, <decl pos:start="25:8" pos:end="25:21"><type ref="prev" pos:start="15:9" pos:end="15:11"><modifier pos:start="25:8" pos:end="25:8">*</modifier></type><name pos:start="25:9" pos:end="25:10">nc</name> <init pos:start="25:12" pos:end="25:21">= <expr pos:start="25:14" pos:end="25:21"><name pos:start="25:14" pos:end="25:21">num_cpus</name></expr></init></decl>;</struct>

    <decl_stmt pos:start="27:5" pos:end="27:43"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:24">soft_vcpus_limit</name></decl>, <decl pos:start="27:27" pos:end="27:42"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:27" pos:end="27:42">hard_vcpus_limit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:16"><decl pos:start="29:5" pos:end="29:15"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">KVMState</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:41"><decl pos:start="31:5" pos:end="31:40"><type pos:start="31:5" pos:end="31:29"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:27">KVMCapabilityInfo</name> <modifier pos:start="31:29" pos:end="31:29">*</modifier></type><name pos:start="31:30" pos:end="31:40">missing_cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:12"><decl pos:start="33:5" pos:end="33:11"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:20"><decl pos:start="35:5" pos:end="35:9"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">i</name></decl>, <decl pos:start="35:12" pos:end="35:19"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:12" pos:end="35:15">type</name> <init pos:start="35:17" pos:end="35:19">= <expr pos:start="35:19" pos:end="35:19"><literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:25"><decl pos:start="37:5" pos:end="37:24"><type pos:start="37:5" pos:end="37:16"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:14">char</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:24">kvm_type</name></decl>;</decl_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:36"><expr pos:start="41:5" pos:end="41:35"><name pos:start="41:5" pos:end="41:5">s</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <call pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:17">g_malloc0</name><argument_list pos:start="41:18" pos:end="41:35">(<argument pos:start="41:19" pos:end="41:34"><expr pos:start="41:19" pos:end="41:34"><sizeof pos:start="41:19" pos:end="41:34">sizeof<argument_list pos:start="41:25" pos:end="41:34">(<argument pos:start="41:26" pos:end="41:33"><expr pos:start="41:26" pos:end="41:33"><name pos:start="41:26" pos:end="41:33">KVMState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="55:7">/*

     * On systems where the kernel can support different base page

     * sizes, host page size may be different from TARGET_PAGE_SIZE,

     * even with KVM.  TARGET_PAGE_SIZE is assumed to be the minimum

     * page size for the system though.

     */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><call pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:10">assert</name><argument_list pos:start="57:11" pos:end="57:45">(<argument pos:start="57:12" pos:end="57:44"><expr pos:start="57:12" pos:end="57:44"><name pos:start="57:12" pos:end="57:27">TARGET_PAGE_SIZE</name> <operator pos:start="57:29" pos:end="57:30">&lt;=</operator> <call pos:start="57:32" pos:end="57:44"><name pos:start="57:32" pos:end="57:42">getpagesize</name><argument_list pos:start="57:43" pos:end="57:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="64:0"><expr pos:start="59:5" pos:end="59:20"><call pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:18">page_size_init</name><argument_list pos:start="59:19" pos:end="59:20">()</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="63:1" pos:end="63:30">#<cpp:directive pos:start="63:2" pos:end="63:6">ifdef</cpp:directive> <name pos:start="63:8" pos:end="63:30">KVM_CAP_SET_GUEST_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:39"><call pos:start="65:5" pos:end="65:39"><name pos:start="65:5" pos:end="65:15">QTAILQ_INIT</name><argument_list pos:start="65:16" pos:end="65:39">(<argument pos:start="65:17" pos:end="65:38"><expr pos:start="65:17" pos:end="65:38"><operator pos:start="65:17" pos:end="65:17">&amp;</operator><name pos:start="65:18" pos:end="65:38"><name pos:start="65:18" pos:end="65:18">s</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:38">kvm_sw_breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="69:5" pos:end="69:17"><expr pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:11"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:11">vmfd</name></name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">-</operator><literal type="number" pos:start="69:16" pos:end="69:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:42"><expr pos:start="71:5" pos:end="71:41"><name pos:start="71:5" pos:end="71:9"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:9">fd</name></name> <operator pos:start="71:11" pos:end="71:11">=</operator> <call pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:21">qemu_open</name><argument_list pos:start="71:22" pos:end="71:41">(<argument pos:start="71:23" pos:end="71:32"><expr pos:start="71:23" pos:end="71:32"><literal type="string" pos:start="71:23" pos:end="71:32">"/dev/kvm"</literal></expr></argument>, <argument pos:start="71:35" pos:end="71:40"><expr pos:start="71:35" pos:end="71:40"><name pos:start="71:35" pos:end="71:40">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:20">(<expr pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:13">fd</name></name> <operator pos:start="73:15" pos:end="73:16">==</operator> <operator pos:start="73:18" pos:end="73:18">-</operator><literal type="number" pos:start="73:19" pos:end="73:19">1</literal></expr>)</condition> <block pos:start="73:22" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:17">

        <expr_stmt pos:start="75:9" pos:end="75:68"><expr pos:start="75:9" pos:end="75:67"><call pos:start="75:9" pos:end="75:67"><name pos:start="75:9" pos:end="75:15">fprintf</name><argument_list pos:start="75:16" pos:end="75:67">(<argument pos:start="75:17" pos:end="75:22"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:22">stderr</name></expr></argument>, <argument pos:start="75:25" pos:end="75:66"><expr pos:start="75:25" pos:end="75:66"><literal type="string" pos:start="75:25" pos:end="75:66">"Could not access KVM kernel module: %m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:21"><expr pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <operator pos:start="77:15" pos:end="77:15">-</operator><name pos:start="77:16" pos:end="77:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:17">goto <name pos:start="79:14" pos:end="79:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:47"><expr pos:start="85:5" pos:end="85:46"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:46"><name pos:start="85:11" pos:end="85:19">kvm_ioctl</name><argument_list pos:start="85:20" pos:end="85:46">(<argument pos:start="85:21" pos:end="85:21"><expr pos:start="85:21" pos:end="85:21"><name pos:start="85:21" pos:end="85:21">s</name></expr></argument>, <argument pos:start="85:24" pos:end="85:42"><expr pos:start="85:24" pos:end="85:42"><name pos:start="85:24" pos:end="85:42">KVM_GET_API_VERSION</name></expr></argument>, <argument pos:start="85:45" pos:end="85:45"><expr pos:start="85:45" pos:end="85:45"><literal type="number" pos:start="85:45" pos:end="85:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="99:5">if <condition pos:start="87:8" pos:end="87:30">(<expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">&lt;</operator> <name pos:start="87:15" pos:end="87:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="87:32" pos:end="99:5">{<block_content pos:start="89:9" pos:end="97:17">

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:20">(<expr pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">&gt;</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>)</condition> <block pos:start="89:22" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:26">

            <expr_stmt pos:start="91:13" pos:end="91:26"><expr pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <operator pos:start="91:19" pos:end="91:19">-</operator><name pos:start="91:20" pos:end="91:25">EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:49"><expr pos:start="95:9" pos:end="95:48"><call pos:start="95:9" pos:end="95:48"><name pos:start="95:9" pos:end="95:15">fprintf</name><argument_list pos:start="95:16" pos:end="95:48">(<argument pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">stderr</name></expr></argument>, <argument pos:start="95:25" pos:end="95:47"><expr pos:start="95:25" pos:end="95:47"><literal type="string" pos:start="95:25" pos:end="95:47">"kvm version too old\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:17">goto <name pos:start="97:14" pos:end="97:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="111:5">if <condition pos:start="103:8" pos:end="103:30">(<expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">&gt;</operator> <name pos:start="103:15" pos:end="103:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="103:32" pos:end="111:5">{<block_content pos:start="105:9" pos:end="109:17">

        <expr_stmt pos:start="105:9" pos:end="105:22"><expr pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">-</operator><name pos:start="105:16" pos:end="105:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:55"><expr pos:start="107:9" pos:end="107:54"><call pos:start="107:9" pos:end="107:54"><name pos:start="107:9" pos:end="107:15">fprintf</name><argument_list pos:start="107:16" pos:end="107:54">(<argument pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22">stderr</name></expr></argument>, <argument pos:start="107:25" pos:end="107:53"><expr pos:start="107:25" pos:end="107:53"><literal type="string" pos:start="107:25" pos:end="107:53">"kvm version not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:62"><expr pos:start="115:5" pos:end="115:61"><name pos:start="115:5" pos:end="115:15"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:15">nr_slots</name></name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:61"><name pos:start="115:19" pos:end="115:37">kvm_check_extension</name><argument_list pos:start="115:38" pos:end="115:61">(<argument pos:start="115:39" pos:end="115:39"><expr pos:start="115:39" pos:end="115:39"><name pos:start="115:39" pos:end="115:39">s</name></expr></argument>, <argument pos:start="115:42" pos:end="115:60"><expr pos:start="115:42" pos:end="115:60"><name pos:start="115:42" pos:end="115:60">KVM_CAP_NR_MEMSLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:47">/* If unspecified, use the default value */</comment>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:21">(<expr pos:start="121:9" pos:end="121:20"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:20"><name pos:start="121:10" pos:end="121:10">s</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:20">nr_slots</name></name></expr>)</condition> <block pos:start="121:23" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:25">

        <expr_stmt pos:start="123:9" pos:end="123:25"><expr pos:start="123:9" pos:end="123:24"><name pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:19">nr_slots</name></name> <operator pos:start="123:21" pos:end="123:21">=</operator> <literal type="number" pos:start="123:23" pos:end="123:24">32</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:56"><expr pos:start="129:5" pos:end="129:55"><name pos:start="129:5" pos:end="129:12"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:12">slots</name></name> <operator pos:start="129:14" pos:end="129:14">=</operator> <call pos:start="129:16" pos:end="129:55"><name pos:start="129:16" pos:end="129:24">g_malloc0</name><argument_list pos:start="129:25" pos:end="129:55">(<argument pos:start="129:26" pos:end="129:54"><expr pos:start="129:26" pos:end="129:54"><name pos:start="129:26" pos:end="129:36"><name pos:start="129:26" pos:end="129:26">s</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:36">nr_slots</name></name> <operator pos:start="129:38" pos:end="129:38">*</operator> <sizeof pos:start="129:40" pos:end="129:54">sizeof<argument_list pos:start="129:46" pos:end="129:54">(<argument pos:start="129:47" pos:end="129:53"><expr pos:start="129:47" pos:end="129:53"><name pos:start="129:47" pos:end="129:53">KVMSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="133:5" pos:end="137:5">for <control pos:start="133:9" pos:end="133:37">(<init pos:start="133:10" pos:end="133:15"><expr pos:start="133:10" pos:end="133:14"><name pos:start="133:10" pos:end="133:10">i</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <literal type="number" pos:start="133:14" pos:end="133:14">0</literal></expr>;</init> <condition pos:start="133:17" pos:end="133:32"><expr pos:start="133:17" pos:end="133:31"><name pos:start="133:17" pos:end="133:17">i</name> <operator pos:start="133:19" pos:end="133:19">&lt;</operator> <name pos:start="133:21" pos:end="133:31"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:31">nr_slots</name></name></expr>;</condition> <incr pos:start="133:34" pos:end="133:36"><expr pos:start="133:34" pos:end="133:36"><name pos:start="133:34" pos:end="133:34">i</name><operator pos:start="133:35" pos:end="133:36">++</operator></expr></incr>)</control> <block pos:start="133:39" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:29">

        <expr_stmt pos:start="135:9" pos:end="135:29"><expr pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:19"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:16">slots</name><index pos:start="135:17" pos:end="135:19">[<expr pos:start="135:18" pos:end="135:18"><name pos:start="135:18" pos:end="135:18">i</name></expr>]</index></name><operator pos:start="135:20" pos:end="135:20">.</operator><name pos:start="135:21" pos:end="135:24">slot</name> <operator pos:start="135:26" pos:end="135:26">=</operator> <name pos:start="135:28" pos:end="135:28">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="141:5" pos:end="141:31">/* check the vcpu limits */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:48"><expr pos:start="143:5" pos:end="143:47"><name pos:start="143:5" pos:end="143:20">soft_vcpus_limit</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <call pos:start="143:24" pos:end="143:47"><name pos:start="143:24" pos:end="143:44">kvm_recommended_vcpus</name><argument_list pos:start="143:45" pos:end="143:47">(<argument pos:start="143:46" pos:end="143:46"><expr pos:start="143:46" pos:end="143:46"><name pos:start="143:46" pos:end="143:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:40"><expr pos:start="145:5" pos:end="145:39"><name pos:start="145:5" pos:end="145:20">hard_vcpus_limit</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <call pos:start="145:24" pos:end="145:39"><name pos:start="145:24" pos:end="145:36">kvm_max_vcpus</name><argument_list pos:start="145:37" pos:end="145:39">(<argument pos:start="145:38" pos:end="145:38"><expr pos:start="145:38" pos:end="145:38"><name pos:start="145:38" pos:end="145:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="149:5" pos:end="179:5">while <condition pos:start="149:11" pos:end="149:20">(<expr pos:start="149:12" pos:end="149:19"><name pos:start="149:12" pos:end="149:19"><name pos:start="149:12" pos:end="149:13">nc</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:19">name</name></name></expr>)</condition> <block pos:start="149:22" pos:end="179:5">{<block_content pos:start="151:9" pos:end="177:13">

        <if_stmt pos:start="151:9" pos:end="175:9"><if pos:start="151:9" pos:end="175:9">if <condition pos:start="151:12" pos:end="151:39">(<expr pos:start="151:13" pos:end="151:38"><name pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:14">nc</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:19">num</name></name> <operator pos:start="151:21" pos:end="151:21">&gt;</operator> <name pos:start="151:23" pos:end="151:38">soft_vcpus_limit</name></expr>)</condition> <block pos:start="151:41" pos:end="175:9">{<block_content pos:start="153:13" pos:end="173:13">

            <expr_stmt pos:start="153:13" pos:end="159:57"><expr pos:start="153:13" pos:end="159:56"><call pos:start="153:13" pos:end="159:56"><name pos:start="153:13" pos:end="153:19">fprintf</name><argument_list pos:start="153:20" pos:end="159:56">(<argument pos:start="153:21" pos:end="153:26"><expr pos:start="153:21" pos:end="153:26"><name pos:start="153:21" pos:end="153:26">stderr</name></expr></argument>,

                    <argument pos:start="155:21" pos:end="157:66"><expr pos:start="155:21" pos:end="157:66"><literal type="string" pos:start="155:21" pos:end="155:72">"Warning: Number of %s cpus requested (%d) exceeds "</literal>

                    <literal type="string" pos:start="157:21" pos:end="157:66">"the recommended cpus supported by KVM (%d)\n"</literal></expr></argument>,

                    <argument pos:start="159:21" pos:end="159:28"><expr pos:start="159:21" pos:end="159:28"><name pos:start="159:21" pos:end="159:28"><name pos:start="159:21" pos:end="159:22">nc</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:28">name</name></name></expr></argument>, <argument pos:start="159:31" pos:end="159:37"><expr pos:start="159:31" pos:end="159:37"><name pos:start="159:31" pos:end="159:37"><name pos:start="159:31" pos:end="159:32">nc</name><operator pos:start="159:33" pos:end="159:34">-&gt;</operator><name pos:start="159:35" pos:end="159:37">num</name></name></expr></argument>, <argument pos:start="159:40" pos:end="159:55"><expr pos:start="159:40" pos:end="159:55"><name pos:start="159:40" pos:end="159:55">soft_vcpus_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="163:13" pos:end="173:13"><if pos:start="163:13" pos:end="173:13">if <condition pos:start="163:16" pos:end="163:43">(<expr pos:start="163:17" pos:end="163:42"><name pos:start="163:17" pos:end="163:23"><name pos:start="163:17" pos:end="163:18">nc</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:23">num</name></name> <operator pos:start="163:25" pos:end="163:25">&gt;</operator> <name pos:start="163:27" pos:end="163:42">hard_vcpus_limit</name></expr>)</condition> <block pos:start="163:45" pos:end="173:13">{<block_content pos:start="165:17" pos:end="171:24">

                <expr_stmt pos:start="165:17" pos:end="169:61"><expr pos:start="165:17" pos:end="169:60"><call pos:start="165:17" pos:end="169:60"><name pos:start="165:17" pos:end="165:23">fprintf</name><argument_list pos:start="165:24" pos:end="169:60">(<argument pos:start="165:25" pos:end="165:30"><expr pos:start="165:25" pos:end="165:30"><name pos:start="165:25" pos:end="165:30">stderr</name></expr></argument>, <argument pos:start="165:33" pos:end="167:66"><expr pos:start="165:33" pos:end="167:66"><literal type="string" pos:start="165:33" pos:end="165:75">"Number of %s cpus requested (%d) exceeds "</literal>

                        <literal type="string" pos:start="167:25" pos:end="167:66">"the maximum cpus supported by KVM (%d)\n"</literal></expr></argument>,

                        <argument pos:start="169:25" pos:end="169:32"><expr pos:start="169:25" pos:end="169:32"><name pos:start="169:25" pos:end="169:32"><name pos:start="169:25" pos:end="169:26">nc</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:32">name</name></name></expr></argument>, <argument pos:start="169:35" pos:end="169:41"><expr pos:start="169:35" pos:end="169:41"><name pos:start="169:35" pos:end="169:41"><name pos:start="169:35" pos:end="169:36">nc</name><operator pos:start="169:37" pos:end="169:38">-&gt;</operator><name pos:start="169:39" pos:end="169:41">num</name></name></expr></argument>, <argument pos:start="169:44" pos:end="169:59"><expr pos:start="169:44" pos:end="169:59"><name pos:start="169:44" pos:end="169:59">hard_vcpus_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:24"><expr pos:start="171:17" pos:end="171:23"><call pos:start="171:17" pos:end="171:23"><name pos:start="171:17" pos:end="171:20">exit</name><argument_list pos:start="171:21" pos:end="171:23">(<argument pos:start="171:22" pos:end="171:22"><expr pos:start="171:22" pos:end="171:22"><literal type="number" pos:start="171:22" pos:end="171:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:13"><expr pos:start="177:9" pos:end="177:12"><name pos:start="177:9" pos:end="177:10">nc</name><operator pos:start="177:11" pos:end="177:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="183:5" pos:end="183:65"><expr pos:start="183:5" pos:end="183:64"><name pos:start="183:5" pos:end="183:12">kvm_type</name> <operator pos:start="183:14" pos:end="183:14">=</operator> <call pos:start="183:16" pos:end="183:64"><name pos:start="183:16" pos:end="183:27">qemu_opt_get</name><argument_list pos:start="183:28" pos:end="183:64">(<argument pos:start="183:29" pos:end="183:51"><expr pos:start="183:29" pos:end="183:51"><call pos:start="183:29" pos:end="183:51"><name pos:start="183:29" pos:end="183:49">qemu_get_machine_opts</name><argument_list pos:start="183:50" pos:end="183:51">()</argument_list></call></expr></argument>, <argument pos:start="183:54" pos:end="183:63"><expr pos:start="183:54" pos:end="183:63"><literal type="string" pos:start="183:54" pos:end="183:63">"kvm-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="195:5"><if pos:start="185:5" pos:end="189:5">if <condition pos:start="185:8" pos:end="185:21">(<expr pos:start="185:9" pos:end="185:20"><name pos:start="185:9" pos:end="185:20"><name pos:start="185:9" pos:end="185:10">mc</name><operator pos:start="185:11" pos:end="185:12">-&gt;</operator><name pos:start="185:13" pos:end="185:20">kvm_type</name></name></expr>)</condition> <block pos:start="185:23" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:38">

        <expr_stmt pos:start="187:9" pos:end="187:38"><expr pos:start="187:9" pos:end="187:37"><name pos:start="187:9" pos:end="187:12">type</name> <operator pos:start="187:14" pos:end="187:14">=</operator> <call pos:start="187:16" pos:end="187:37"><name pos:start="187:16" pos:end="187:27"><name pos:start="187:16" pos:end="187:17">mc</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:27">kvm_type</name></name><argument_list pos:start="187:28" pos:end="187:37">(<argument pos:start="187:29" pos:end="187:36"><expr pos:start="187:29" pos:end="187:36"><name pos:start="187:29" pos:end="187:36">kvm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="189:7" pos:end="195:5">else if <condition pos:start="189:15" pos:end="189:24">(<expr pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:23">kvm_type</name></expr>)</condition> <block pos:start="189:26" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:17">

        <expr_stmt pos:start="191:9" pos:end="191:68"><expr pos:start="191:9" pos:end="191:67"><call pos:start="191:9" pos:end="191:67"><name pos:start="191:9" pos:end="191:15">fprintf</name><argument_list pos:start="191:16" pos:end="191:67">(<argument pos:start="191:17" pos:end="191:22"><expr pos:start="191:17" pos:end="191:22"><name pos:start="191:17" pos:end="191:22">stderr</name></expr></argument>, <argument pos:start="191:25" pos:end="191:56"><expr pos:start="191:25" pos:end="191:56"><literal type="string" pos:start="191:25" pos:end="191:56">"Invalid argument kvm-type=%s\n"</literal></expr></argument>, <argument pos:start="191:59" pos:end="191:66"><expr pos:start="191:59" pos:end="191:66"><name pos:start="191:59" pos:end="191:66">kvm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="193:9" pos:end="193:17">goto <name pos:start="193:14" pos:end="193:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <do pos:start="199:5" pos:end="203:28">do <block pos:start="199:8" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:48">

        <expr_stmt pos:start="201:9" pos:end="201:48"><expr pos:start="201:9" pos:end="201:47"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <call pos:start="201:15" pos:end="201:47"><name pos:start="201:15" pos:end="201:23">kvm_ioctl</name><argument_list pos:start="201:24" pos:end="201:47">(<argument pos:start="201:25" pos:end="201:25"><expr pos:start="201:25" pos:end="201:25"><name pos:start="201:25" pos:end="201:25">s</name></expr></argument>, <argument pos:start="201:28" pos:end="201:40"><expr pos:start="201:28" pos:end="201:40"><name pos:start="201:28" pos:end="201:40">KVM_CREATE_VM</name></expr></argument>, <argument pos:start="201:43" pos:end="201:46"><expr pos:start="201:43" pos:end="201:46"><name pos:start="201:43" pos:end="201:46">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="203:13" pos:end="203:27">(<expr pos:start="203:14" pos:end="203:26"><name pos:start="203:14" pos:end="203:16">ret</name> <operator pos:start="203:18" pos:end="203:19">==</operator> <operator pos:start="203:21" pos:end="203:21">-</operator><name pos:start="203:22" pos:end="203:26">EINTR</name></expr>)</condition>;</do>



    <if_stmt pos:start="207:5" pos:end="225:5"><if pos:start="207:5" pos:end="225:5">if <condition pos:start="207:8" pos:end="207:16">(<expr pos:start="207:9" pos:end="207:15"><name pos:start="207:9" pos:end="207:11">ret</name> <operator pos:start="207:13" pos:end="207:13">&lt;</operator> <literal type="number" pos:start="207:15" pos:end="207:15">0</literal></expr>)</condition> <block pos:start="207:18" pos:end="225:5">{<block_content pos:start="209:9" pos:end="223:17">

        <expr_stmt pos:start="209:9" pos:end="216:0"><expr pos:start="209:9" pos:end="211:31"><call pos:start="209:9" pos:end="211:31"><name pos:start="209:9" pos:end="209:15">fprintf</name><argument_list pos:start="209:16" pos:end="211:31">(<argument pos:start="209:17" pos:end="209:22"><expr pos:start="209:17" pos:end="209:22"><name pos:start="209:17" pos:end="209:22">stderr</name></expr></argument>, <argument pos:start="209:25" pos:end="209:62"><expr pos:start="209:25" pos:end="209:62"><literal type="string" pos:start="209:25" pos:end="209:62">"ioctl(KVM_CREATE_VM) failed: %d %s\n"</literal></expr></argument>, <argument pos:start="209:65" pos:end="209:68"><expr pos:start="209:65" pos:end="209:68"><operator pos:start="209:65" pos:end="209:65">-</operator><name pos:start="209:66" pos:end="209:68">ret</name></expr></argument>,

                <argument pos:start="211:17" pos:end="211:30"><expr pos:start="211:17" pos:end="211:30"><call pos:start="211:17" pos:end="211:30"><name pos:start="211:17" pos:end="211:24">strerror</name><argument_list pos:start="211:25" pos:end="211:30">(<argument pos:start="211:26" pos:end="211:29"><expr pos:start="211:26" pos:end="211:29"><operator pos:start="211:26" pos:end="211:26">-</operator><name pos:start="211:27" pos:end="211:29">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="215:1" pos:end="215:19">#<cpp:directive pos:start="215:2" pos:end="215:6">ifdef</cpp:directive> <name pos:start="215:8" pos:end="215:19">TARGET_S390X</name></cpp:ifdef>

        <expr_stmt pos:start="217:9" pos:end="222:0"><expr pos:start="217:9" pos:end="219:58"><call pos:start="217:9" pos:end="219:58"><name pos:start="217:9" pos:end="217:15">fprintf</name><argument_list pos:start="217:16" pos:end="219:58">(<argument pos:start="217:17" pos:end="217:22"><expr pos:start="217:17" pos:end="217:22"><name pos:start="217:17" pos:end="217:22">stderr</name></expr></argument>, <argument pos:start="217:25" pos:end="219:57"><expr pos:start="217:25" pos:end="219:57"><literal type="string" pos:start="217:25" pos:end="217:76">"Please add the 'switch_amode' kernel parameter to "</literal>

                        <literal type="string" pos:start="219:25" pos:end="219:57">"your host kernel command line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="221:1" pos:end="221:6">#<cpp:directive pos:start="221:2" pos:end="221:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="223:9" pos:end="223:17">goto <name pos:start="223:14" pos:end="223:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="229:5" pos:end="229:18"><expr pos:start="229:5" pos:end="229:17"><name pos:start="229:5" pos:end="229:11"><name pos:start="229:5" pos:end="229:5">s</name><operator pos:start="229:6" pos:end="229:7">-&gt;</operator><name pos:start="229:8" pos:end="229:11">vmfd</name></name> <operator pos:start="229:13" pos:end="229:13">=</operator> <name pos:start="229:15" pos:end="229:17">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:72"><expr pos:start="231:5" pos:end="231:71"><name pos:start="231:5" pos:end="231:15">missing_cap</name> <operator pos:start="231:17" pos:end="231:17">=</operator> <call pos:start="231:19" pos:end="231:71"><name pos:start="231:19" pos:end="231:42">kvm_check_extension_list</name><argument_list pos:start="231:43" pos:end="231:71">(<argument pos:start="231:44" pos:end="231:44"><expr pos:start="231:44" pos:end="231:44"><name pos:start="231:44" pos:end="231:44">s</name></expr></argument>, <argument pos:start="231:47" pos:end="231:70"><expr pos:start="231:47" pos:end="231:70"><name pos:start="231:47" pos:end="231:70">kvm_required_capabilites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="233:5" pos:end="239:5"><if pos:start="233:5" pos:end="239:5">if <condition pos:start="233:8" pos:end="233:21">(<expr pos:start="233:9" pos:end="233:20"><operator pos:start="233:9" pos:end="233:9">!</operator><name pos:start="233:10" pos:end="233:20">missing_cap</name></expr>)</condition> <block pos:start="233:23" pos:end="239:5">{<block_content pos:start="235:9" pos:end="237:72">

        <expr_stmt pos:start="235:9" pos:end="237:72"><expr pos:start="235:9" pos:end="237:71"><name pos:start="235:9" pos:end="235:19">missing_cap</name> <operator pos:start="235:21" pos:end="235:21">=</operator>

            <call pos:start="237:13" pos:end="237:71"><name pos:start="237:13" pos:end="237:36">kvm_check_extension_list</name><argument_list pos:start="237:37" pos:end="237:71">(<argument pos:start="237:38" pos:end="237:38"><expr pos:start="237:38" pos:end="237:38"><name pos:start="237:38" pos:end="237:38">s</name></expr></argument>, <argument pos:start="237:41" pos:end="237:70"><expr pos:start="237:41" pos:end="237:70"><name pos:start="237:41" pos:end="237:70">kvm_arch_required_capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="251:5"><if pos:start="241:5" pos:end="251:5">if <condition pos:start="241:8" pos:end="241:20">(<expr pos:start="241:9" pos:end="241:19"><name pos:start="241:9" pos:end="241:19">missing_cap</name></expr>)</condition> <block pos:start="241:22" pos:end="251:5">{<block_content pos:start="243:9" pos:end="249:17">

        <expr_stmt pos:start="243:9" pos:end="243:22"><expr pos:start="243:9" pos:end="243:21"><name pos:start="243:9" pos:end="243:11">ret</name> <operator pos:start="243:13" pos:end="243:13">=</operator> <operator pos:start="243:15" pos:end="243:15">-</operator><name pos:start="243:16" pos:end="243:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="247:49"><expr pos:start="245:9" pos:end="247:48"><call pos:start="245:9" pos:end="247:48"><name pos:start="245:9" pos:end="245:15">fprintf</name><argument_list pos:start="245:16" pos:end="247:48">(<argument pos:start="245:17" pos:end="245:22"><expr pos:start="245:17" pos:end="245:22"><name pos:start="245:17" pos:end="245:22">stderr</name></expr></argument>, <argument pos:start="245:25" pos:end="245:53"><expr pos:start="245:25" pos:end="245:53"><literal type="string" pos:start="245:25" pos:end="245:53">"kvm does not support %s\n%s"</literal></expr></argument>,

                <argument pos:start="247:17" pos:end="247:33"><expr pos:start="247:17" pos:end="247:33"><name pos:start="247:17" pos:end="247:33"><name pos:start="247:17" pos:end="247:27">missing_cap</name><operator pos:start="247:28" pos:end="247:29">-&gt;</operator><name pos:start="247:30" pos:end="247:33">name</name></name></expr></argument>, <argument pos:start="247:36" pos:end="247:47"><expr pos:start="247:36" pos:end="247:47"><name pos:start="247:36" pos:end="247:47">upgrade_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="249:9" pos:end="249:17">goto <name pos:start="249:14" pos:end="249:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:71"><expr pos:start="255:5" pos:end="255:70"><name pos:start="255:5" pos:end="255:21"><name pos:start="255:5" pos:end="255:5">s</name><operator pos:start="255:6" pos:end="255:7">-&gt;</operator><name pos:start="255:8" pos:end="255:21">coalesced_mmio</name></name> <operator pos:start="255:23" pos:end="255:23">=</operator> <call pos:start="255:25" pos:end="255:70"><name pos:start="255:25" pos:end="255:43">kvm_check_extension</name><argument_list pos:start="255:44" pos:end="255:70">(<argument pos:start="255:45" pos:end="255:45"><expr pos:start="255:45" pos:end="255:45"><name pos:start="255:45" pos:end="255:45">s</name></expr></argument>, <argument pos:start="255:48" pos:end="255:69"><expr pos:start="255:48" pos:end="255:69"><name pos:start="255:48" pos:end="255:69">KVM_CAP_COALESCED_MMIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:33"><expr pos:start="259:5" pos:end="259:32"><name pos:start="259:5" pos:end="259:28"><name pos:start="259:5" pos:end="259:5">s</name><operator pos:start="259:6" pos:end="259:7">-&gt;</operator><name pos:start="259:8" pos:end="259:28">broken_set_mem_region</name></name> <operator pos:start="259:30" pos:end="259:30">=</operator> <literal type="number" pos:start="259:32" pos:end="259:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:68"><expr pos:start="261:5" pos:end="261:67"><name pos:start="261:5" pos:end="261:7">ret</name> <operator pos:start="261:9" pos:end="261:9">=</operator> <call pos:start="261:11" pos:end="261:67"><name pos:start="261:11" pos:end="261:29">kvm_check_extension</name><argument_list pos:start="261:30" pos:end="261:67">(<argument pos:start="261:31" pos:end="261:31"><expr pos:start="261:31" pos:end="261:31"><name pos:start="261:31" pos:end="261:31">s</name></expr></argument>, <argument pos:start="261:34" pos:end="261:66"><expr pos:start="261:34" pos:end="261:66"><name pos:start="261:34" pos:end="261:66">KVM_CAP_JOIN_MEMORY_REGIONS_WORKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="263:5" pos:end="272:0"><if pos:start="263:5" pos:end="272:0">if <condition pos:start="263:8" pos:end="263:16">(<expr pos:start="263:9" pos:end="263:15"><name pos:start="263:9" pos:end="263:11">ret</name> <operator pos:start="263:13" pos:end="263:13">&gt;</operator> <literal type="number" pos:start="263:15" pos:end="263:15">0</literal></expr>)</condition> <block pos:start="263:18" pos:end="272:0">{<block_content pos:start="265:9" pos:end="265:37">

        <expr_stmt pos:start="265:9" pos:end="265:37"><expr pos:start="265:9" pos:end="265:36"><name pos:start="265:9" pos:end="265:32"><name pos:start="265:9" pos:end="265:9">s</name><operator pos:start="265:10" pos:end="265:11">-&gt;</operator><name pos:start="265:12" pos:end="265:32">broken_set_mem_region</name></name> <operator pos:start="265:34" pos:end="265:34">=</operator> <literal type="number" pos:start="265:36" pos:end="265:36">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="271:1" pos:end="271:26">#<cpp:directive pos:start="271:2" pos:end="271:6">ifdef</cpp:directive> <name pos:start="271:8" pos:end="271:26">KVM_CAP_VCPU_EVENTS</name></cpp:ifdef>

    <expr_stmt pos:start="273:5" pos:end="276:0"><expr pos:start="273:5" pos:end="273:64"><name pos:start="273:5" pos:end="273:18"><name pos:start="273:5" pos:end="273:5">s</name><operator pos:start="273:6" pos:end="273:7">-&gt;</operator><name pos:start="273:8" pos:end="273:18">vcpu_events</name></name> <operator pos:start="273:20" pos:end="273:20">=</operator> <call pos:start="273:22" pos:end="273:64"><name pos:start="273:22" pos:end="273:40">kvm_check_extension</name><argument_list pos:start="273:41" pos:end="273:64">(<argument pos:start="273:42" pos:end="273:42"><expr pos:start="273:42" pos:end="273:42"><name pos:start="273:42" pos:end="273:42">s</name></expr></argument>, <argument pos:start="273:45" pos:end="273:63"><expr pos:start="273:45" pos:end="273:63"><name pos:start="273:45" pos:end="273:63">KVM_CAP_VCPU_EVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="275:1" pos:end="275:6">#<cpp:directive pos:start="275:2" pos:end="275:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="279:5" pos:end="286:0"><expr pos:start="279:5" pos:end="281:61"><name pos:start="279:5" pos:end="279:24"><name pos:start="279:5" pos:end="279:5">s</name><operator pos:start="279:6" pos:end="279:7">-&gt;</operator><name pos:start="279:8" pos:end="279:24">robust_singlestep</name></name> <operator pos:start="279:26" pos:end="279:26">=</operator>

        <call pos:start="281:9" pos:end="281:61"><name pos:start="281:9" pos:end="281:27">kvm_check_extension</name><argument_list pos:start="281:28" pos:end="281:61">(<argument pos:start="281:29" pos:end="281:29"><expr pos:start="281:29" pos:end="281:29"><name pos:start="281:29" pos:end="281:29">s</name></expr></argument>, <argument pos:start="281:32" pos:end="281:60"><expr pos:start="281:32" pos:end="281:60"><name pos:start="281:32" pos:end="281:60">KVM_CAP_X86_ROBUST_SINGLESTEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="285:1" pos:end="285:24">#<cpp:directive pos:start="285:2" pos:end="285:6">ifdef</cpp:directive> <name pos:start="285:8" pos:end="285:24">KVM_CAP_DEBUGREGS</name></cpp:ifdef>

    <expr_stmt pos:start="287:5" pos:end="294:0"><expr pos:start="287:5" pos:end="287:60"><name pos:start="287:5" pos:end="287:16"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:16">debugregs</name></name> <operator pos:start="287:18" pos:end="287:18">=</operator> <call pos:start="287:20" pos:end="287:60"><name pos:start="287:20" pos:end="287:38">kvm_check_extension</name><argument_list pos:start="287:39" pos:end="287:60">(<argument pos:start="287:40" pos:end="287:40"><expr pos:start="287:40" pos:end="287:40"><name pos:start="287:40" pos:end="287:40">s</name></expr></argument>, <argument pos:start="287:43" pos:end="287:59"><expr pos:start="287:43" pos:end="287:59"><name pos:start="287:43" pos:end="287:59">KVM_CAP_DEBUGREGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="289:1" pos:end="289:6">#<cpp:directive pos:start="289:2" pos:end="289:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="293:1" pos:end="293:20">#<cpp:directive pos:start="293:2" pos:end="293:6">ifdef</cpp:directive> <name pos:start="293:8" pos:end="293:20">KVM_CAP_XSAVE</name></cpp:ifdef>

    <expr_stmt pos:start="295:5" pos:end="302:0"><expr pos:start="295:5" pos:end="295:52"><name pos:start="295:5" pos:end="295:12"><name pos:start="295:5" pos:end="295:5">s</name><operator pos:start="295:6" pos:end="295:7">-&gt;</operator><name pos:start="295:8" pos:end="295:12">xsave</name></name> <operator pos:start="295:14" pos:end="295:14">=</operator> <call pos:start="295:16" pos:end="295:52"><name pos:start="295:16" pos:end="295:34">kvm_check_extension</name><argument_list pos:start="295:35" pos:end="295:52">(<argument pos:start="295:36" pos:end="295:36"><expr pos:start="295:36" pos:end="295:36"><name pos:start="295:36" pos:end="295:36">s</name></expr></argument>, <argument pos:start="295:39" pos:end="295:51"><expr pos:start="295:39" pos:end="295:51"><name pos:start="295:39" pos:end="295:51">KVM_CAP_XSAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="301:1" pos:end="301:19">#<cpp:directive pos:start="301:2" pos:end="301:6">ifdef</cpp:directive> <name pos:start="301:8" pos:end="301:19">KVM_CAP_XCRS</name></cpp:ifdef>

    <expr_stmt pos:start="303:5" pos:end="310:0"><expr pos:start="303:5" pos:end="303:50"><name pos:start="303:5" pos:end="303:11"><name pos:start="303:5" pos:end="303:5">s</name><operator pos:start="303:6" pos:end="303:7">-&gt;</operator><name pos:start="303:8" pos:end="303:11">xcrs</name></name> <operator pos:start="303:13" pos:end="303:13">=</operator> <call pos:start="303:15" pos:end="303:50"><name pos:start="303:15" pos:end="303:33">kvm_check_extension</name><argument_list pos:start="303:34" pos:end="303:50">(<argument pos:start="303:35" pos:end="303:35"><expr pos:start="303:35" pos:end="303:35"><name pos:start="303:35" pos:end="303:35">s</name></expr></argument>, <argument pos:start="303:38" pos:end="303:49"><expr pos:start="303:38" pos:end="303:49"><name pos:start="303:38" pos:end="303:49">KVM_CAP_XCRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="309:1" pos:end="309:25">#<cpp:directive pos:start="309:2" pos:end="309:6">ifdef</cpp:directive> <name pos:start="309:8" pos:end="309:25">KVM_CAP_PIT_STATE2</name></cpp:ifdef>

    <expr_stmt pos:start="311:5" pos:end="318:0"><expr pos:start="311:5" pos:end="311:62"><name pos:start="311:5" pos:end="311:17"><name pos:start="311:5" pos:end="311:5">s</name><operator pos:start="311:6" pos:end="311:7">-&gt;</operator><name pos:start="311:8" pos:end="311:17">pit_state2</name></name> <operator pos:start="311:19" pos:end="311:19">=</operator> <call pos:start="311:21" pos:end="311:62"><name pos:start="311:21" pos:end="311:39">kvm_check_extension</name><argument_list pos:start="311:40" pos:end="311:62">(<argument pos:start="311:41" pos:end="311:41"><expr pos:start="311:41" pos:end="311:41"><name pos:start="311:41" pos:end="311:41">s</name></expr></argument>, <argument pos:start="311:44" pos:end="311:61"><expr pos:start="311:44" pos:end="311:61"><name pos:start="311:44" pos:end="311:61">KVM_CAP_PIT_STATE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="313:1" pos:end="313:6">#<cpp:directive pos:start="313:2" pos:end="313:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="317:1" pos:end="317:26">#<cpp:directive pos:start="317:2" pos:end="317:6">ifdef</cpp:directive> <name pos:start="317:8" pos:end="317:26">KVM_CAP_IRQ_ROUTING</name></cpp:ifdef>

    <expr_stmt pos:start="319:5" pos:end="322:0"><expr pos:start="319:5" pos:end="319:68"><name pos:start="319:5" pos:end="319:17"><name pos:start="319:5" pos:end="319:5">s</name><operator pos:start="319:6" pos:end="319:7">-&gt;</operator><name pos:start="319:8" pos:end="319:17">direct_msi</name></name> <operator pos:start="319:19" pos:end="319:19">=</operator> <operator pos:start="319:21" pos:end="319:21">(</operator><call pos:start="319:22" pos:end="319:63"><name pos:start="319:22" pos:end="319:40">kvm_check_extension</name><argument_list pos:start="319:41" pos:end="319:63">(<argument pos:start="319:42" pos:end="319:42"><expr pos:start="319:42" pos:end="319:42"><name pos:start="319:42" pos:end="319:42">s</name></expr></argument>, <argument pos:start="319:45" pos:end="319:62"><expr pos:start="319:45" pos:end="319:62"><name pos:start="319:45" pos:end="319:62">KVM_CAP_SIGNAL_MSI</name></expr></argument>)</argument_list></call> <operator pos:start="319:65" pos:end="319:65">&gt;</operator> <literal type="number" pos:start="319:67" pos:end="319:67">0</literal><operator pos:start="319:68" pos:end="319:68">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="321:1" pos:end="321:6">#<cpp:directive pos:start="321:2" pos:end="321:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="325:5" pos:end="325:63"><expr pos:start="325:5" pos:end="325:62"><name pos:start="325:5" pos:end="325:20"><name pos:start="325:5" pos:end="325:5">s</name><operator pos:start="325:6" pos:end="325:7">-&gt;</operator><name pos:start="325:8" pos:end="325:20">intx_set_mask</name></name> <operator pos:start="325:22" pos:end="325:22">=</operator> <call pos:start="325:24" pos:end="325:62"><name pos:start="325:24" pos:end="325:42">kvm_check_extension</name><argument_list pos:start="325:43" pos:end="325:62">(<argument pos:start="325:44" pos:end="325:44"><expr pos:start="325:44" pos:end="325:44"><name pos:start="325:44" pos:end="325:44">s</name></expr></argument>, <argument pos:start="325:47" pos:end="325:61"><expr pos:start="325:47" pos:end="325:61"><name pos:start="325:47" pos:end="325:61">KVM_CAP_PCI_2_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:36"><expr pos:start="329:5" pos:end="329:35"><name pos:start="329:5" pos:end="329:20"><name pos:start="329:5" pos:end="329:5">s</name><operator pos:start="329:6" pos:end="329:7">-&gt;</operator><name pos:start="329:8" pos:end="329:20">irq_set_ioctl</name></name> <operator pos:start="329:22" pos:end="329:22">=</operator> <name pos:start="329:24" pos:end="329:35">KVM_IRQ_LINE</name></expr>;</expr_stmt>

    <if_stmt pos:start="331:5" pos:end="340:0"><if pos:start="331:5" pos:end="340:0">if <condition pos:start="331:8" pos:end="331:58">(<expr pos:start="331:9" pos:end="331:57"><call pos:start="331:9" pos:end="331:57"><name pos:start="331:9" pos:end="331:27">kvm_check_extension</name><argument_list pos:start="331:28" pos:end="331:57">(<argument pos:start="331:29" pos:end="331:29"><expr pos:start="331:29" pos:end="331:29"><name pos:start="331:29" pos:end="331:29">s</name></expr></argument>, <argument pos:start="331:32" pos:end="331:56"><expr pos:start="331:32" pos:end="331:56"><name pos:start="331:32" pos:end="331:56">KVM_CAP_IRQ_INJECT_STATUS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="331:60" pos:end="340:0">{<block_content pos:start="333:9" pos:end="333:47">

        <expr_stmt pos:start="333:9" pos:end="333:47"><expr pos:start="333:9" pos:end="333:46"><name pos:start="333:9" pos:end="333:24"><name pos:start="333:9" pos:end="333:9">s</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:24">irq_set_ioctl</name></name> <operator pos:start="333:26" pos:end="333:26">=</operator> <name pos:start="333:28" pos:end="333:46">KVM_IRQ_LINE_STATUS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="339:1" pos:end="339:27">#<cpp:directive pos:start="339:2" pos:end="339:6">ifdef</cpp:directive> <name pos:start="339:8" pos:end="339:27">KVM_CAP_READONLY_MEM</name></cpp:ifdef>

    <expr_stmt pos:start="341:5" pos:end="346:0"><expr pos:start="341:5" pos:end="343:58"><name pos:start="341:5" pos:end="341:28">kvm_readonly_mem_allowed</name> <operator pos:start="341:30" pos:end="341:30">=</operator>

        <operator pos:start="343:9" pos:end="343:9">(</operator><call pos:start="343:10" pos:end="343:53"><name pos:start="343:10" pos:end="343:28">kvm_check_extension</name><argument_list pos:start="343:29" pos:end="343:53">(<argument pos:start="343:30" pos:end="343:30"><expr pos:start="343:30" pos:end="343:30"><name pos:start="343:30" pos:end="343:30">s</name></expr></argument>, <argument pos:start="343:33" pos:end="343:52"><expr pos:start="343:33" pos:end="343:52"><name pos:start="343:33" pos:end="343:52">KVM_CAP_READONLY_MEM</name></expr></argument>)</argument_list></call> <operator pos:start="343:55" pos:end="343:55">&gt;</operator> <literal type="number" pos:start="343:57" pos:end="343:57">0</literal><operator pos:start="343:58" pos:end="343:58">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="349:5" pos:end="349:27"><expr pos:start="349:5" pos:end="349:26"><name pos:start="349:5" pos:end="349:7">ret</name> <operator pos:start="349:9" pos:end="349:9">=</operator> <call pos:start="349:11" pos:end="349:26"><name pos:start="349:11" pos:end="349:23">kvm_arch_init</name><argument_list pos:start="349:24" pos:end="349:26">(<argument pos:start="349:25" pos:end="349:25"><expr pos:start="349:25" pos:end="349:25"><name pos:start="349:25" pos:end="349:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="351:5" pos:end="355:5"><if pos:start="351:5" pos:end="355:5">if <condition pos:start="351:8" pos:end="351:16">(<expr pos:start="351:9" pos:end="351:15"><name pos:start="351:9" pos:end="351:11">ret</name> <operator pos:start="351:13" pos:end="351:13">&lt;</operator> <literal type="number" pos:start="351:15" pos:end="351:15">0</literal></expr>)</condition> <block pos:start="351:18" pos:end="355:5">{<block_content pos:start="353:9" pos:end="353:17">

        <goto pos:start="353:9" pos:end="353:17">goto <name pos:start="353:14" pos:end="353:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="359:5" pos:end="359:32"><expr pos:start="359:5" pos:end="359:31"><name pos:start="359:5" pos:end="359:7">ret</name> <operator pos:start="359:9" pos:end="359:9">=</operator> <call pos:start="359:11" pos:end="359:31"><name pos:start="359:11" pos:end="359:28">kvm_irqchip_create</name><argument_list pos:start="359:29" pos:end="359:31">(<argument pos:start="359:30" pos:end="359:30"><expr pos:start="359:30" pos:end="359:30"><name pos:start="359:30" pos:end="359:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="361:5" pos:end="365:5"><if pos:start="361:5" pos:end="365:5">if <condition pos:start="361:8" pos:end="361:16">(<expr pos:start="361:9" pos:end="361:15"><name pos:start="361:9" pos:end="361:11">ret</name> <operator pos:start="361:13" pos:end="361:13">&lt;</operator> <literal type="number" pos:start="361:15" pos:end="361:15">0</literal></expr>)</condition> <block pos:start="361:18" pos:end="365:5">{<block_content pos:start="363:9" pos:end="363:17">

        <goto pos:start="363:9" pos:end="363:17">goto <name pos:start="363:14" pos:end="363:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="369:5" pos:end="369:18"><expr pos:start="369:5" pos:end="369:17"><name pos:start="369:5" pos:end="369:13">kvm_state</name> <operator pos:start="369:15" pos:end="369:15">=</operator> <name pos:start="369:17" pos:end="369:17">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:74"><expr pos:start="371:5" pos:end="371:73"><call pos:start="371:5" pos:end="371:73"><name pos:start="371:5" pos:end="371:28">memory_listener_register</name><argument_list pos:start="371:29" pos:end="371:73">(<argument pos:start="371:30" pos:end="371:49"><expr pos:start="371:30" pos:end="371:49"><operator pos:start="371:30" pos:end="371:30">&amp;</operator><name pos:start="371:31" pos:end="371:49">kvm_memory_listener</name></expr></argument>, <argument pos:start="371:52" pos:end="371:72"><expr pos:start="371:52" pos:end="371:72"><operator pos:start="371:52" pos:end="371:52">&amp;</operator><name pos:start="371:53" pos:end="371:72">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:66"><expr pos:start="373:5" pos:end="373:65"><call pos:start="373:5" pos:end="373:65"><name pos:start="373:5" pos:end="373:28">memory_listener_register</name><argument_list pos:start="373:29" pos:end="373:65">(<argument pos:start="373:30" pos:end="373:45"><expr pos:start="373:30" pos:end="373:45"><operator pos:start="373:30" pos:end="373:30">&amp;</operator><name pos:start="373:31" pos:end="373:45">kvm_io_listener</name></expr></argument>, <argument pos:start="373:48" pos:end="373:64"><expr pos:start="373:48" pos:end="373:64"><operator pos:start="373:48" pos:end="373:48">&amp;</operator><name pos:start="373:49" pos:end="373:64">address_space_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="377:5" pos:end="377:53"><expr pos:start="377:5" pos:end="377:52"><name pos:start="377:5" pos:end="377:22"><name pos:start="377:5" pos:end="377:5">s</name><operator pos:start="377:6" pos:end="377:7">-&gt;</operator><name pos:start="377:8" pos:end="377:22">many_ioeventfds</name></name> <operator pos:start="377:24" pos:end="377:24">=</operator> <call pos:start="377:26" pos:end="377:52"><name pos:start="377:26" pos:end="377:50">kvm_check_many_ioeventfds</name><argument_list pos:start="377:51" pos:end="377:52">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="381:5" pos:end="381:49"><expr pos:start="381:5" pos:end="381:48"><name pos:start="381:5" pos:end="381:25">cpu_interrupt_handler</name> <operator pos:start="381:27" pos:end="381:27">=</operator> <name pos:start="381:29" pos:end="381:48">kvm_handle_interrupt</name></expr>;</expr_stmt>



    <return pos:start="385:5" pos:end="385:13">return <expr pos:start="385:12" pos:end="385:12"><literal type="number" pos:start="385:12" pos:end="385:12">0</literal></expr>;</return>



<label pos:start="389:1" pos:end="389:4"><name pos:start="389:1" pos:end="389:3">err</name>:</label>

    <if_stmt pos:start="391:5" pos:end="395:5"><if pos:start="391:5" pos:end="395:5">if <condition pos:start="391:8" pos:end="391:21">(<expr pos:start="391:9" pos:end="391:20"><name pos:start="391:9" pos:end="391:15"><name pos:start="391:9" pos:end="391:9">s</name><operator pos:start="391:10" pos:end="391:11">-&gt;</operator><name pos:start="391:12" pos:end="391:15">vmfd</name></name> <operator pos:start="391:17" pos:end="391:18">&gt;=</operator> <literal type="number" pos:start="391:20" pos:end="391:20">0</literal></expr>)</condition> <block pos:start="391:23" pos:end="395:5">{<block_content pos:start="393:9" pos:end="393:23">

        <expr_stmt pos:start="393:9" pos:end="393:23"><expr pos:start="393:9" pos:end="393:22"><call pos:start="393:9" pos:end="393:22"><name pos:start="393:9" pos:end="393:13">close</name><argument_list pos:start="393:14" pos:end="393:22">(<argument pos:start="393:15" pos:end="393:21"><expr pos:start="393:15" pos:end="393:21"><name pos:start="393:15" pos:end="393:21"><name pos:start="393:15" pos:end="393:15">s</name><operator pos:start="393:16" pos:end="393:17">-&gt;</operator><name pos:start="393:18" pos:end="393:21">vmfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="397:5" pos:end="401:5"><if pos:start="397:5" pos:end="401:5">if <condition pos:start="397:8" pos:end="397:20">(<expr pos:start="397:9" pos:end="397:19"><name pos:start="397:9" pos:end="397:13"><name pos:start="397:9" pos:end="397:9">s</name><operator pos:start="397:10" pos:end="397:11">-&gt;</operator><name pos:start="397:12" pos:end="397:13">fd</name></name> <operator pos:start="397:15" pos:end="397:16">!=</operator> <operator pos:start="397:18" pos:end="397:18">-</operator><literal type="number" pos:start="397:19" pos:end="397:19">1</literal></expr>)</condition> <block pos:start="397:22" pos:end="401:5">{<block_content pos:start="399:9" pos:end="399:21">

        <expr_stmt pos:start="399:9" pos:end="399:21"><expr pos:start="399:9" pos:end="399:20"><call pos:start="399:9" pos:end="399:20"><name pos:start="399:9" pos:end="399:13">close</name><argument_list pos:start="399:14" pos:end="399:20">(<argument pos:start="399:15" pos:end="399:19"><expr pos:start="399:15" pos:end="399:19"><name pos:start="399:15" pos:end="399:19"><name pos:start="399:15" pos:end="399:15">s</name><operator pos:start="399:16" pos:end="399:17">-&gt;</operator><name pos:start="399:18" pos:end="399:19">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:21"><expr pos:start="403:5" pos:end="403:20"><call pos:start="403:5" pos:end="403:20"><name pos:start="403:5" pos:end="403:10">g_free</name><argument_list pos:start="403:11" pos:end="403:20">(<argument pos:start="403:12" pos:end="403:19"><expr pos:start="403:12" pos:end="403:19"><name pos:start="403:12" pos:end="403:19"><name pos:start="403:12" pos:end="403:12">s</name><operator pos:start="403:13" pos:end="403:14">-&gt;</operator><name pos:start="403:15" pos:end="403:19">slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:14"><expr pos:start="405:5" pos:end="405:13"><call pos:start="405:5" pos:end="405:13"><name pos:start="405:5" pos:end="405:10">g_free</name><argument_list pos:start="405:11" pos:end="405:13">(<argument pos:start="405:12" pos:end="405:12"><expr pos:start="405:12" pos:end="405:12"><name pos:start="405:12" pos:end="405:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="409:5" pos:end="409:15">return <expr pos:start="409:12" pos:end="409:14"><name pos:start="409:12" pos:end="409:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
