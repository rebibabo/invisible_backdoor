<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21656.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">qemu_tcg_wait_io_event</name><parameter_list pos:start="1:35" pos:end="1:49">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:45"><name pos:start="1:36" pos:end="1:43">CPUState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="25:1">{<block_content pos:start="5:5" pos:end="23:5">

    <while pos:start="5:5" pos:end="11:5">while <condition pos:start="5:11" pos:end="5:34">(<expr pos:start="5:12" pos:end="5:33"><call pos:start="5:12" pos:end="5:33"><name pos:start="5:12" pos:end="5:31">all_cpu_threads_idle</name><argument_list pos:start="5:32" pos:end="5:33">()</argument_list></call></expr>)</condition> <block pos:start="5:36" pos:end="11:5">{<block_content pos:start="7:9" pos:end="9:59">

        <expr_stmt pos:start="7:9" pos:end="7:30"><expr pos:start="7:9" pos:end="7:29"><call pos:start="7:9" pos:end="7:29"><name pos:start="7:9" pos:end="7:27">stop_tcg_kick_timer</name><argument_list pos:start="7:28" pos:end="7:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="9:9" pos:end="9:59"><expr pos:start="9:9" pos:end="9:58"><call pos:start="9:9" pos:end="9:58"><name pos:start="9:9" pos:end="9:22">qemu_cond_wait</name><argument_list pos:start="9:23" pos:end="9:58">(<argument pos:start="9:24" pos:end="9:37"><expr pos:start="9:24" pos:end="9:37"><name pos:start="9:24" pos:end="9:37"><name pos:start="9:24" pos:end="9:26">cpu</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">halt_cond</name></name></expr></argument>, <argument pos:start="9:40" pos:end="9:57"><expr pos:start="9:40" pos:end="9:57"><operator pos:start="9:40" pos:end="9:40">&amp;</operator><name pos:start="9:41" pos:end="9:57">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><call pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:24">start_tcg_kick_timer</name><argument_list pos:start="15:25" pos:end="15:26">()</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:15">CPU_FOREACH</name><argument_list pos:start="19:16" pos:end="19:20">(<argument pos:start="19:17" pos:end="19:19">cpu</argument>)</argument_list></macro> <block pos:start="19:22" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:39">

        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><call pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:33">qemu_wait_io_event_common</name><argument_list pos:start="21:34" pos:end="21:38">(<argument pos:start="21:35" pos:end="21:37"><expr pos:start="21:35" pos:end="21:37"><name pos:start="21:35" pos:end="21:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
