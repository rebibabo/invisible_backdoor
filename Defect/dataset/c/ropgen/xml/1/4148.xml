<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4148.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:44">qvirtio_pci_get_queue_isr_status</name><parameter_list pos:start="1:45" pos:end="1:78">(<parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:58">QVirtioDevice</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">d</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:73">QVirtQueue</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:77">vq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:5">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">QVirtioPCIDevice</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">dev</name> <init pos:start="5:27" pos:end="5:49">= <expr pos:start="5:29" pos:end="5:49"><operator pos:start="5:29" pos:end="5:29">(</operator><name pos:start="5:30" pos:end="5:45">QVirtioPCIDevice</name> <operator pos:start="5:47" pos:end="5:47">*</operator><operator pos:start="5:48" pos:end="5:48">)</operator><name pos:start="5:49" pos:end="5:49">d</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">QVirtQueuePCI</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:24">vqpci</name> <init pos:start="7:26" pos:end="7:46">= <expr pos:start="7:28" pos:end="7:46"><operator pos:start="7:28" pos:end="7:28">(</operator><name pos:start="7:29" pos:end="7:41">QVirtQueuePCI</name> <operator pos:start="7:43" pos:end="7:43">*</operator><operator pos:start="7:44" pos:end="7:44">)</operator><name pos:start="7:45" pos:end="7:46">vq</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">data</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="37:5"><if pos:start="13:5" pos:end="33:5">if <condition pos:start="13:8" pos:end="13:32">(<expr pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:11">dev</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:17">pdev</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:31">msix_enabled</name></name></expr>)</condition> <block pos:start="13:34" pos:end="33:5">{<block_content pos:start="15:9" pos:end="31:9">

        <expr_stmt pos:start="15:9" pos:end="15:51"><expr pos:start="15:9" pos:end="15:50"><call pos:start="15:9" pos:end="15:50"><name pos:start="15:9" pos:end="15:23">g_assert_cmpint</name><argument_list pos:start="15:24" pos:end="15:50">(<argument pos:start="15:25" pos:end="15:41"><expr pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:29">vqpci</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:41">msix_entry</name></name></expr></argument>, <argument pos:start="15:44" pos:end="15:45"><expr pos:start="15:44" pos:end="15:45"><operator pos:start="15:44" pos:end="15:45">!=</operator></expr></argument>, <argument pos:start="15:48" pos:end="15:49"><expr pos:start="15:48" pos:end="15:49"><operator pos:start="15:48" pos:end="15:48">-</operator><literal type="number" pos:start="15:49" pos:end="15:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="31:9"><if pos:start="17:9" pos:end="23:9">if <condition pos:start="17:12" pos:end="17:59">(<expr pos:start="17:13" pos:end="17:58"><call pos:start="17:13" pos:end="17:58"><name pos:start="17:13" pos:end="17:28">qpci_msix_masked</name><argument_list pos:start="17:29" pos:end="17:58">(<argument pos:start="17:30" pos:end="17:38"><expr pos:start="17:30" pos:end="17:38"><name pos:start="17:30" pos:end="17:38"><name pos:start="17:30" pos:end="17:32">dev</name><operator pos:start="17:33" pos:end="17:34">-&gt;</operator><name pos:start="17:35" pos:end="17:38">pdev</name></name></expr></argument>, <argument pos:start="17:41" pos:end="17:57"><expr pos:start="17:41" pos:end="17:57"><name pos:start="17:41" pos:end="17:57"><name pos:start="17:41" pos:end="17:45">vqpci</name><operator pos:start="17:46" pos:end="17:47">-&gt;</operator><name pos:start="17:48" pos:end="17:57">msix_entry</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:61" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:67">

            <comment type="block" pos:start="19:13" pos:end="19:75">/* No ISR checking should be done if masked, but read anyway */</comment>

            <return pos:start="21:13" pos:end="21:67">return <expr pos:start="21:20" pos:end="21:66"><call pos:start="21:20" pos:end="21:66"><name pos:start="21:20" pos:end="21:36">qpci_msix_pending</name><argument_list pos:start="21:37" pos:end="21:66">(<argument pos:start="21:38" pos:end="21:46"><expr pos:start="21:38" pos:end="21:46"><name pos:start="21:38" pos:end="21:46"><name pos:start="21:38" pos:end="21:40">dev</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:46">pdev</name></name></expr></argument>, <argument pos:start="21:49" pos:end="21:65"><expr pos:start="21:49" pos:end="21:65"><name pos:start="21:49" pos:end="21:65"><name pos:start="21:49" pos:end="21:53">vqpci</name><operator pos:start="21:54" pos:end="21:55">-&gt;</operator><name pos:start="21:56" pos:end="21:65">msix_entry</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if> <else pos:start="23:11" pos:end="31:9">else <block pos:start="23:16" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:44">

            <expr_stmt pos:start="25:13" pos:end="25:43"><expr pos:start="25:13" pos:end="25:42"><name pos:start="25:13" pos:end="25:16">data</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <call pos:start="25:20" pos:end="25:42"><name pos:start="25:20" pos:end="25:24">readl</name><argument_list pos:start="25:25" pos:end="25:42">(<argument pos:start="25:26" pos:end="25:41"><expr pos:start="25:26" pos:end="25:41"><name pos:start="25:26" pos:end="25:41"><name pos:start="25:26" pos:end="25:30">vqpci</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:41">msix_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:40"><expr pos:start="27:13" pos:end="27:39"><call pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:18">writel</name><argument_list pos:start="27:19" pos:end="27:39">(<argument pos:start="27:20" pos:end="27:35"><expr pos:start="27:20" pos:end="27:35"><name pos:start="27:20" pos:end="27:35"><name pos:start="27:20" pos:end="27:24">vqpci</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:35">msix_addr</name></name></expr></argument>, <argument pos:start="27:38" pos:end="27:38"><expr pos:start="27:38" pos:end="27:38"><literal type="number" pos:start="27:38" pos:end="27:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="29:13" pos:end="29:44">return <expr pos:start="29:20" pos:end="29:43"><name pos:start="29:20" pos:end="29:23">data</name> <operator pos:start="29:25" pos:end="29:26">==</operator> <name pos:start="29:28" pos:end="29:43"><name pos:start="29:28" pos:end="29:32">vqpci</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:43">msix_data</name></name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="37:5">else <block pos:start="33:12" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:80">

        <return pos:start="35:9" pos:end="35:80">return <expr pos:start="35:16" pos:end="35:79"><call pos:start="35:16" pos:end="35:75"><name pos:start="35:16" pos:end="35:28">qpci_io_readb</name><argument_list pos:start="35:29" pos:end="35:75">(<argument pos:start="35:30" pos:end="35:38"><expr pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:32">dev</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:38">pdev</name></name></expr></argument>, <argument pos:start="35:41" pos:end="35:74"><expr pos:start="35:41" pos:end="35:74"><name pos:start="35:41" pos:end="35:49"><name pos:start="35:41" pos:end="35:43">dev</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:49">addr</name></name> <operator pos:start="35:51" pos:end="35:51">+</operator> <name pos:start="35:53" pos:end="35:74">QVIRTIO_PCI_ISR_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="35:77" pos:end="35:77">&amp;</operator> <literal type="number" pos:start="35:79" pos:end="35:79">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
