<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10165.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">handle_intercept</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:37"><name pos:start="1:29" pos:end="1:35">S390CPU</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">kvm_run</name></name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">run</name> <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:28">cs</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:37">kvm_run</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">icpt_code</name> <init pos:start="9:19" pos:end="9:44">= <expr pos:start="9:21" pos:end="9:44"><name pos:start="9:21" pos:end="9:44"><name pos:start="9:21" pos:end="9:23">run</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:35">s390_sieic</name><operator pos:start="9:36" pos:end="9:36">.</operator><name pos:start="9:37" pos:end="9:44">icptcode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">r</name> <init pos:start="11:11" pos:end="11:13">= <expr pos:start="11:13" pos:end="11:13"><literal type="number" pos:start="11:13" pos:end="11:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:41"><expr pos:start="15:5" pos:end="17:40"><call pos:start="15:5" pos:end="17:40"><name pos:start="15:5" pos:end="15:11">DPRINTF</name><argument_list pos:start="15:12" pos:end="17:40">(<argument pos:start="15:13" pos:end="15:42"><expr pos:start="15:13" pos:end="15:42"><literal type="string" pos:start="15:13" pos:end="15:42">"intercept: 0x%x (at 0x%lx)\n"</literal></expr></argument>, <argument pos:start="15:45" pos:end="15:53"><expr pos:start="15:45" pos:end="15:53"><name pos:start="15:45" pos:end="15:53">icpt_code</name></expr></argument>,

            <argument pos:start="17:13" pos:end="17:39"><expr pos:start="17:13" pos:end="17:39"><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:17">long</name><operator pos:start="17:18" pos:end="17:18">)</operator><name pos:start="17:19" pos:end="17:39"><name pos:start="17:19" pos:end="17:20">cs</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:29">kvm_run</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:39">psw_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="19:5" pos:end="95:5">switch <condition pos:start="19:12" pos:end="19:22">(<expr pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:21">icpt_code</name></expr>)</condition> <block pos:start="19:24" pos:end="95:5">{<block_content pos:start="21:9" pos:end="93:18">

        <case pos:start="21:9" pos:end="21:30">case <expr pos:start="21:14" pos:end="21:29"><name pos:start="21:14" pos:end="21:29">ICPT_INSTRUCTION</name></expr>:</case>

            <expr_stmt pos:start="23:13" pos:end="23:45"><expr pos:start="23:13" pos:end="23:44"><name pos:start="23:13" pos:end="23:13">r</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:44"><name pos:start="23:17" pos:end="23:34">handle_instruction</name><argument_list pos:start="23:35" pos:end="23:44">(<argument pos:start="23:36" pos:end="23:38"><expr pos:start="23:36" pos:end="23:38"><name pos:start="23:36" pos:end="23:38">cpu</name></expr></argument>, <argument pos:start="23:41" pos:end="23:43"><expr pos:start="23:41" pos:end="23:43"><name pos:start="23:41" pos:end="23:43">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="25:13" pos:end="25:18">break;</break>

        <case pos:start="27:9" pos:end="27:26">case <expr pos:start="27:14" pos:end="27:25"><name pos:start="27:14" pos:end="27:25">ICPT_WAITPSW</name></expr>:</case>

            <comment type="block" pos:start="29:13" pos:end="29:72">/* disabled wait, since enabled wait is handled in kernel */</comment>

            <if_stmt pos:start="31:13" pos:end="53:13"><if pos:start="31:13" pos:end="53:13">if <condition pos:start="31:16" pos:end="31:47">(<expr pos:start="31:17" pos:end="31:46"><call pos:start="31:17" pos:end="31:41"><name pos:start="31:17" pos:end="31:36">s390_del_running_cpu</name><argument_list pos:start="31:37" pos:end="31:41">(<argument pos:start="31:38" pos:end="31:40"><expr pos:start="31:38" pos:end="31:40"><name pos:start="31:38" pos:end="31:40">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="31:43" pos:end="31:44">==</operator> <literal type="number" pos:start="31:46" pos:end="31:46">0</literal></expr>)</condition> <block pos:start="31:49" pos:end="53:13">{<block_content pos:start="33:17" pos:end="51:17">

                <if_stmt pos:start="33:17" pos:end="51:17"><if pos:start="33:17" pos:end="37:17">if <condition pos:start="33:20" pos:end="33:44">(<expr pos:start="33:21" pos:end="33:43"><call pos:start="33:21" pos:end="33:43"><name pos:start="33:21" pos:end="33:39">is_special_wait_psw</name><argument_list pos:start="33:40" pos:end="33:43">(<argument pos:start="33:41" pos:end="33:42"><expr pos:start="33:41" pos:end="33:42"><name pos:start="33:41" pos:end="33:42">cs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:46" pos:end="37:17">{<block_content pos:start="35:21" pos:end="35:51">

                    <expr_stmt pos:start="35:21" pos:end="35:51"><expr pos:start="35:21" pos:end="35:50"><call pos:start="35:21" pos:end="35:50"><name pos:start="35:21" pos:end="35:48">qemu_system_shutdown_request</name><argument_list pos:start="35:49" pos:end="35:50">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="37:19" pos:end="51:17">else <block pos:start="37:24" pos:end="51:17">{<block_content pos:start="39:21" pos:end="49:54">

                    <decl_stmt pos:start="39:21" pos:end="39:34"><decl pos:start="39:21" pos:end="39:33"><type pos:start="39:21" pos:end="39:29"><name pos:start="39:21" pos:end="39:27">QObject</name> <modifier pos:start="39:29" pos:end="39:29">*</modifier></type><name pos:start="39:30" pos:end="39:33">data</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="43:21" pos:end="43:75"><expr pos:start="43:21" pos:end="43:74"><name pos:start="43:21" pos:end="43:24">data</name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:74"><name pos:start="43:28" pos:end="43:45">qobject_from_jsonf</name><argument_list pos:start="43:46" pos:end="43:74">(<argument pos:start="43:47" pos:end="43:64"><expr pos:start="43:47" pos:end="43:64"><literal type="string" pos:start="43:47" pos:end="43:64">"{ 'action': %s }"</literal></expr></argument>, <argument pos:start="43:67" pos:end="43:73"><expr pos:start="43:67" pos:end="43:73"><literal type="string" pos:start="43:67" pos:end="43:73">"pause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="45:21" pos:end="45:72"><expr pos:start="45:21" pos:end="45:71"><call pos:start="45:21" pos:end="45:71"><name pos:start="45:21" pos:end="45:42">monitor_protocol_event</name><argument_list pos:start="45:43" pos:end="45:71">(<argument pos:start="45:44" pos:end="45:64"><expr pos:start="45:44" pos:end="45:64"><name pos:start="45:44" pos:end="45:64">QEVENT_GUEST_PANICKED</name></expr></argument>, <argument pos:start="45:67" pos:end="45:70"><expr pos:start="45:67" pos:end="45:70"><name pos:start="45:67" pos:end="45:70">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:41"><expr pos:start="47:21" pos:end="47:40"><call pos:start="47:21" pos:end="47:40"><name pos:start="47:21" pos:end="47:34">qobject_decref</name><argument_list pos:start="47:35" pos:end="47:40">(<argument pos:start="47:36" pos:end="47:39"><expr pos:start="47:36" pos:end="47:39"><name pos:start="47:36" pos:end="47:39">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:54"><expr pos:start="49:21" pos:end="49:53"><call pos:start="49:21" pos:end="49:53"><name pos:start="49:21" pos:end="49:27">vm_stop</name><argument_list pos:start="49:28" pos:end="49:53">(<argument pos:start="49:29" pos:end="49:52"><expr pos:start="49:29" pos:end="49:52"><name pos:start="49:29" pos:end="49:52">RUN_STATE_GUEST_PANICKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:28"><expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:13">r</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:27">EXCP_HALTED</name></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        <case pos:start="59:9" pos:end="59:27">case <expr pos:start="59:14" pos:end="59:26"><name pos:start="59:14" pos:end="59:26">ICPT_CPU_STOP</name></expr>:</case>

            <if_stmt pos:start="61:13" pos:end="65:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:47">(<expr pos:start="61:17" pos:end="61:46"><call pos:start="61:17" pos:end="61:41"><name pos:start="61:17" pos:end="61:36">s390_del_running_cpu</name><argument_list pos:start="61:37" pos:end="61:41">(<argument pos:start="61:38" pos:end="61:40"><expr pos:start="61:38" pos:end="61:40"><name pos:start="61:38" pos:end="61:40">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="61:43" pos:end="61:44">==</operator> <literal type="number" pos:start="61:46" pos:end="61:46">0</literal></expr>)</condition> <block pos:start="61:49" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:47">

                <expr_stmt pos:start="63:17" pos:end="63:47"><expr pos:start="63:17" pos:end="63:46"><call pos:start="63:17" pos:end="63:46"><name pos:start="63:17" pos:end="63:44">qemu_system_shutdown_request</name><argument_list pos:start="63:45" pos:end="63:46">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:28"><expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:13">r</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:27">EXCP_HALTED</name></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:33">case <expr pos:start="71:14" pos:end="71:32"><name pos:start="71:14" pos:end="71:32">ICPT_SOFT_INTERCEPT</name></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:61"><expr pos:start="73:13" pos:end="73:60"><call pos:start="73:13" pos:end="73:60"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="73:60">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="73:59"><expr pos:start="73:29" pos:end="73:59"><literal type="string" pos:start="73:29" pos:end="73:59">"KVM unimplemented icpt SOFT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:20"><expr pos:start="75:13" pos:end="75:19"><call pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">exit</name><argument_list pos:start="75:17" pos:end="75:19">(<argument pos:start="75:18" pos:end="75:18"><expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <case pos:start="79:9" pos:end="79:21">case <expr pos:start="79:14" pos:end="79:20"><name pos:start="79:14" pos:end="79:20">ICPT_IO</name></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:59"><expr pos:start="81:13" pos:end="81:58"><call pos:start="81:13" pos:end="81:58"><name pos:start="81:13" pos:end="81:19">fprintf</name><argument_list pos:start="81:20" pos:end="81:58">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">stderr</name></expr></argument>, <argument pos:start="81:29" pos:end="81:57"><expr pos:start="81:29" pos:end="81:57"><literal type="string" pos:start="81:29" pos:end="81:57">"KVM unimplemented icpt IO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:20"><expr pos:start="83:13" pos:end="83:19"><call pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:16">exit</name><argument_list pos:start="83:17" pos:end="83:19">(<argument pos:start="83:18" pos:end="83:18"><expr pos:start="83:18" pos:end="83:18"><literal type="number" pos:start="83:18" pos:end="83:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <default pos:start="87:9" pos:end="87:16">default:</default>

            <expr_stmt pos:start="89:13" pos:end="89:71"><expr pos:start="89:13" pos:end="89:70"><call pos:start="89:13" pos:end="89:70"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="89:70">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">stderr</name></expr></argument>, <argument pos:start="89:29" pos:end="89:58"><expr pos:start="89:29" pos:end="89:58"><literal type="string" pos:start="89:29" pos:end="89:58">"Unknown intercept code: %d\n"</literal></expr></argument>, <argument pos:start="89:61" pos:end="89:69"><expr pos:start="89:61" pos:end="89:69"><name pos:start="89:61" pos:end="89:69">icpt_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:20"><expr pos:start="91:13" pos:end="91:19"><call pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:16">exit</name><argument_list pos:start="91:17" pos:end="91:19">(<argument pos:start="91:18" pos:end="91:18"><expr pos:start="91:18" pos:end="91:18"><literal type="number" pos:start="91:18" pos:end="91:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

    </block_content>}</block></switch>



    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><name pos:start="99:12" pos:end="99:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
