<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10169.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">char</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:29">spapr_get_cpu_core_type</name><parameter_list pos:start="1:30" pos:end="1:48">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:42"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:21">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:19">core_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:9">gchar</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier><modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:24">model_pieces</name> <init pos:start="7:26" pos:end="7:52">= <expr pos:start="7:28" pos:end="7:52"><call pos:start="7:28" pos:end="7:52"><name pos:start="7:28" pos:end="7:37">g_strsplit</name><argument_list pos:start="7:38" pos:end="7:52">(<argument pos:start="7:39" pos:end="7:43"><expr pos:start="7:39" pos:end="7:43"><name pos:start="7:39" pos:end="7:43">model</name></expr></argument>, <argument pos:start="7:46" pos:end="7:48"><expr pos:start="7:46" pos:end="7:48"><literal type="string" pos:start="7:46" pos:end="7:48">","</literal></expr></argument>, <argument pos:start="7:51" pos:end="7:51"><expr pos:start="7:51" pos:end="7:51"><literal type="number" pos:start="7:51" pos:end="7:51">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:79"><expr pos:start="11:5" pos:end="11:78"><name pos:start="11:5" pos:end="11:13">core_type</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <call pos:start="11:17" pos:end="11:78"><name pos:start="11:17" pos:end="11:31">g_strdup_printf</name><argument_list pos:start="11:32" pos:end="11:78">(<argument pos:start="11:33" pos:end="11:39"><expr pos:start="11:33" pos:end="11:39"><literal type="string" pos:start="11:33" pos:end="11:39">"%s-%s"</literal></expr></argument>, <argument pos:start="11:42" pos:end="11:56"><expr pos:start="11:42" pos:end="11:56"><name pos:start="11:42" pos:end="11:56"><name pos:start="11:42" pos:end="11:53">model_pieces</name><index pos:start="11:54" pos:end="11:56">[<expr pos:start="11:55" pos:end="11:55"><literal type="number" pos:start="11:55" pos:end="11:55">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="11:59" pos:end="11:77"><expr pos:start="11:59" pos:end="11:77"><name pos:start="11:59" pos:end="11:77">TYPE_SPAPR_CPU_CORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><call pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:14">g_strfreev</name><argument_list pos:start="13:15" pos:end="13:28">(<argument pos:start="13:16" pos:end="13:27"><expr pos:start="13:16" pos:end="13:27"><name pos:start="13:16" pos:end="13:27">model_pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:77">/* Check whether it exists or whether we have to look up an alias name */</comment>

    <if_stmt pos:start="19:5" pos:end="37:5"><if pos:start="19:5" pos:end="37:5">if <condition pos:start="19:8" pos:end="19:41">(<expr pos:start="19:9" pos:end="19:40"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:40"><name pos:start="19:10" pos:end="19:29">object_class_by_name</name><argument_list pos:start="19:30" pos:end="19:40">(<argument pos:start="19:31" pos:end="19:39"><expr pos:start="19:31" pos:end="19:39"><name pos:start="19:31" pos:end="19:39">core_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:43" pos:end="37:5">{<block_content pos:start="21:9" pos:end="35:20">

        <decl_stmt pos:start="21:9" pos:end="21:30"><decl pos:start="21:9" pos:end="21:29"><type pos:start="21:9" pos:end="21:20"><specifier pos:start="21:9" pos:end="21:13">const</specifier> <name pos:start="21:15" pos:end="21:18">char</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:29">realmodel</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><call pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:14">g_free</name><argument_list pos:start="25:15" pos:end="25:25">(<argument pos:start="25:16" pos:end="25:24"><expr pos:start="25:16" pos:end="25:24"><name pos:start="25:16" pos:end="25:24">core_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:48"><expr pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:17">realmodel</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:47"><name pos:start="27:21" pos:end="27:40">ppc_cpu_lookup_alias</name><argument_list pos:start="27:41" pos:end="27:47">(<argument pos:start="27:42" pos:end="27:46"><expr pos:start="27:42" pos:end="27:46"><name pos:start="27:42" pos:end="27:46">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:22">(<expr pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:21">realmodel</name></expr>)</condition> <block pos:start="29:24" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:54">

            <return pos:start="31:13" pos:end="31:54">return <expr pos:start="31:20" pos:end="31:53"><call pos:start="31:20" pos:end="31:53"><name pos:start="31:20" pos:end="31:42">spapr_get_cpu_core_type</name><argument_list pos:start="31:43" pos:end="31:53">(<argument pos:start="31:44" pos:end="31:52"><expr pos:start="31:44" pos:end="31:52"><name pos:start="31:44" pos:end="31:52">realmodel</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="35:9" pos:end="35:20">return <expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="41:5" pos:end="41:21">return <expr pos:start="41:12" pos:end="41:20"><name pos:start="41:12" pos:end="41:20">core_type</name></expr>;</return>

</block_content>}</block></function>
</unit>
