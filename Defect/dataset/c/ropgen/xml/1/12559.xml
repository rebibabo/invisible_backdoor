<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12559.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">grlib_apbuart_write</name><parameter_list pos:start="1:32" pos:end="3:62">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:52">hwaddr</name></type> <name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:40">uint64_t</name></type> <name pos:start="3:42" pos:end="3:46">value</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:61"><decl pos:start="3:49" pos:end="3:61"><type pos:start="3:49" pos:end="3:61"><name pos:start="3:49" pos:end="3:56">unsigned</name></type> <name pos:start="3:58" pos:end="3:61">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:52">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:8">UART</name>          <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">uart</name> <init pos:start="7:25" pos:end="7:32">= <expr pos:start="7:27" pos:end="7:32"><name pos:start="7:27" pos:end="7:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type>  <name pos:start="9:20" pos:end="9:20">c</name>    <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:17"><expr pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:8">addr</name> <operator pos:start="13:10" pos:end="13:11">&amp;=</operator> <literal type="number" pos:start="13:13" pos:end="13:16">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:24">/* Unit registers */</comment>

    <switch pos:start="19:5" pos:end="75:5">switch <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr>)</condition> <block pos:start="19:19" pos:end="75:5">{<block_content pos:start="21:5" pos:end="73:14">

    <case pos:start="21:5" pos:end="21:21">case <expr pos:start="21:10" pos:end="21:20"><name pos:start="21:10" pos:end="21:20">DATA_OFFSET</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:25">case <expr pos:start="23:10" pos:end="23:24"><name pos:start="23:10" pos:end="23:20">DATA_OFFSET</name> <operator pos:start="23:22" pos:end="23:22">+</operator> <literal type="number" pos:start="23:24" pos:end="23:24">3</literal></expr>:</case>       <comment type="block" pos:start="23:33" pos:end="23:62">/* When only one byte write */</comment>

        <comment type="block" pos:start="25:9" pos:end="25:78">/* Transmit when character device available and transmitter enabled */</comment>

        <if_stmt pos:start="27:9" pos:end="41:9"><if pos:start="27:9" pos:end="41:9">if <condition pos:start="27:12" pos:end="27:66">(<expr pos:start="27:13" pos:end="27:65"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:22"><name pos:start="27:14" pos:end="27:17">uart</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:22">chr</name></name><operator pos:start="27:23" pos:end="27:23">)</operator> <operator pos:start="27:25" pos:end="27:26">&amp;&amp;</operator> <operator pos:start="27:28" pos:end="27:28">(</operator><name pos:start="27:29" pos:end="27:41"><name pos:start="27:29" pos:end="27:32">uart</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:41">control</name></name> <operator pos:start="27:43" pos:end="27:43">&amp;</operator> <name pos:start="27:45" pos:end="27:64">UART_TRANSMIT_ENABLE</name><operator pos:start="27:65" pos:end="27:65">)</operator></expr>)</condition> <block pos:start="27:68" pos:end="41:9">{<block_content pos:start="29:13" pos:end="39:13">

            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:13">c</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:21">value</name> <operator pos:start="29:23" pos:end="29:23">&amp;</operator> <literal type="number" pos:start="29:25" pos:end="29:28">0xFF</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:48"><expr pos:start="31:13" pos:end="31:47"><call pos:start="31:13" pos:end="31:47"><name pos:start="31:13" pos:end="31:29">qemu_chr_fe_write</name><argument_list pos:start="31:30" pos:end="31:47">(<argument pos:start="31:31" pos:end="31:39"><expr pos:start="31:31" pos:end="31:39"><name pos:start="31:31" pos:end="31:39"><name pos:start="31:31" pos:end="31:34">uart</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:39">chr</name></name></expr></argument>, <argument pos:start="31:42" pos:end="31:43"><expr pos:start="31:42" pos:end="31:43"><operator pos:start="31:42" pos:end="31:42">&amp;</operator><name pos:start="31:43" pos:end="31:43">c</name></expr></argument>, <argument pos:start="31:46" pos:end="31:46"><expr pos:start="31:46" pos:end="31:46"><literal type="number" pos:start="31:46" pos:end="31:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="33:13" pos:end="33:36">/* Generate interrupt */</comment>

            <if_stmt pos:start="35:13" pos:end="39:13"><if pos:start="35:13" pos:end="39:13">if <condition pos:start="35:16" pos:end="35:56">(<expr pos:start="35:17" pos:end="35:55"><name pos:start="35:17" pos:end="35:29"><name pos:start="35:17" pos:end="35:20">uart</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:29">control</name></name> <operator pos:start="35:31" pos:end="35:31">&amp;</operator> <name pos:start="35:33" pos:end="35:55">UART_TRANSMIT_INTERRUPT</name></expr>)</condition> <block pos:start="35:58" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:42">

                <expr_stmt pos:start="37:17" pos:end="37:42"><expr pos:start="37:17" pos:end="37:41"><call pos:start="37:17" pos:end="37:41"><name pos:start="37:17" pos:end="37:30">qemu_irq_pulse</name><argument_list pos:start="37:31" pos:end="37:41">(<argument pos:start="37:32" pos:end="37:40"><expr pos:start="37:32" pos:end="37:40"><name pos:start="37:32" pos:end="37:40"><name pos:start="37:32" pos:end="37:35">uart</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:40">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>



    <case pos:start="47:5" pos:end="47:23">case <expr pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:22">STATUS_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="49:9" pos:end="49:23">/* Read Only */</comment>

        <return pos:start="51:9" pos:end="51:15">return;</return>



    <case pos:start="55:5" pos:end="55:24">case <expr pos:start="55:10" pos:end="55:23"><name pos:start="55:10" pos:end="55:23">CONTROL_OFFSET</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:12">uart</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:21">control</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:29">value</name></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>



    <case pos:start="63:5" pos:end="63:23">case <expr pos:start="63:10" pos:end="63:22"><name pos:start="63:10" pos:end="63:22">SCALER_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="65:9" pos:end="65:27">/* Not supported */</comment>

        <return pos:start="67:9" pos:end="67:15">return;</return>



    <default pos:start="71:5" pos:end="71:12">default:</default>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="79:5" pos:end="79:52"><expr pos:start="79:5" pos:end="79:51"><call pos:start="79:5" pos:end="79:51"><name pos:start="79:5" pos:end="79:38">trace_grlib_apbuart_writel_unknown</name><argument_list pos:start="79:39" pos:end="79:51">(<argument pos:start="79:40" pos:end="79:43"><expr pos:start="79:40" pos:end="79:43"><name pos:start="79:40" pos:end="79:43">addr</name></expr></argument>, <argument pos:start="79:46" pos:end="79:50"><expr pos:start="79:46" pos:end="79:50"><name pos:start="79:46" pos:end="79:50">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
