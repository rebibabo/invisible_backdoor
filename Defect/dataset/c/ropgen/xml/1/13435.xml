<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13435.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">qemu_gluster_reopen_prepare</name><parameter_list pos:start="1:39" pos:end="3:77">(<parameter pos:start="1:40" pos:end="1:61"><decl pos:start="1:40" pos:end="1:61"><type pos:start="1:40" pos:end="1:61"><name pos:start="1:40" pos:end="1:54">BDRVReopenState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">state</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:62"><decl pos:start="3:40" pos:end="3:62"><type pos:start="3:40" pos:end="3:62"><name pos:start="3:40" pos:end="3:55">BlockReopenQueue</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:62">queue</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:76"><decl pos:start="3:65" pos:end="3:76"><type pos:start="3:65" pos:end="3:76"><name pos:start="3:65" pos:end="3:69">Error</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier><modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:76">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26">BDRVGlusterReopenState</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:34">reop_s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">GlusterConf</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:22">gconf</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">open_flags</name> <init pos:start="13:20" pos:end="13:22">= <expr pos:start="13:22" pos:end="13:22"><literal type="number" pos:start="13:22" pos:end="13:22">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:25">(<argument pos:start="17:12" pos:end="17:24"><expr pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:16">state</name> <operator pos:start="17:18" pos:end="17:19">!=</operator> <name pos:start="17:21" pos:end="17:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:29">(<argument pos:start="19:12" pos:end="19:28"><expr pos:start="19:12" pos:end="19:28"><name pos:start="19:12" pos:end="19:20"><name pos:start="19:12" pos:end="19:16">state</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:20">bs</name></name> <operator pos:start="19:22" pos:end="19:23">!=</operator> <name pos:start="19:25" pos:end="19:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:62"><expr pos:start="23:5" pos:end="23:61"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:9">state</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">opaque</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:61"><name pos:start="23:21" pos:end="23:29">g_malloc0</name><argument_list pos:start="23:30" pos:end="23:61">(<argument pos:start="23:31" pos:end="23:60"><expr pos:start="23:31" pos:end="23:60"><sizeof pos:start="23:31" pos:end="23:60">sizeof<argument_list pos:start="23:37" pos:end="23:60">(<argument pos:start="23:38" pos:end="23:59"><expr pos:start="23:38" pos:end="23:59"><name pos:start="23:38" pos:end="23:59">BDRVGlusterReopenState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:10">reop_s</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:18">state</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:26">opaque</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:56"><expr pos:start="29:5" pos:end="29:55"><call pos:start="29:5" pos:end="29:55"><name pos:start="29:5" pos:end="29:28">qemu_gluster_parse_flags</name><argument_list pos:start="29:29" pos:end="29:55">(<argument pos:start="29:30" pos:end="29:41"><expr pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:34">state</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:41">flags</name></name></expr></argument>, <argument pos:start="29:44" pos:end="29:54"><expr pos:start="29:44" pos:end="29:54"><operator pos:start="29:44" pos:end="29:44">&amp;</operator><name pos:start="29:45" pos:end="29:54">open_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:9">gconf</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:21">g_malloc0</name><argument_list pos:start="33:22" pos:end="33:42">(<argument pos:start="33:23" pos:end="33:41"><expr pos:start="33:23" pos:end="33:41"><sizeof pos:start="33:23" pos:end="33:41">sizeof<argument_list pos:start="33:29" pos:end="33:41">(<argument pos:start="33:30" pos:end="33:40"><expr pos:start="33:30" pos:end="33:40"><name pos:start="33:30" pos:end="33:40">GlusterConf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:71"><expr pos:start="37:5" pos:end="37:70"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:10">reop_s</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:16">glfs</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:70"><name pos:start="37:20" pos:end="37:36">qemu_gluster_init</name><argument_list pos:start="37:37" pos:end="37:70">(<argument pos:start="37:38" pos:end="37:42"><expr pos:start="37:38" pos:end="37:42"><name pos:start="37:38" pos:end="37:42">gconf</name></expr></argument>, <argument pos:start="37:45" pos:end="37:63"><expr pos:start="37:45" pos:end="37:63"><name pos:start="37:45" pos:end="37:63"><name pos:start="37:45" pos:end="37:49">state</name><operator pos:start="37:50" pos:end="37:51">-&gt;</operator><name pos:start="37:52" pos:end="37:53">bs</name><operator pos:start="37:54" pos:end="37:55">-&gt;</operator><name pos:start="37:56" pos:end="37:63">filename</name></name></expr></argument>, <argument pos:start="37:66" pos:end="37:69"><expr pos:start="37:66" pos:end="37:69"><name pos:start="37:66" pos:end="37:69">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:29">(<expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:14">reop_s</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:20">glfs</name></name> <operator pos:start="39:22" pos:end="39:23">==</operator> <name pos:start="39:25" pos:end="39:28">NULL</name></expr>)</condition> <block pos:start="39:31" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:21"><expr pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:67"><expr pos:start="49:5" pos:end="49:66"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:10">reop_s</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:14">fd</name></name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:66"><name pos:start="49:18" pos:end="49:26">glfs_open</name><argument_list pos:start="49:27" pos:end="49:66">(<argument pos:start="49:28" pos:end="49:39"><expr pos:start="49:28" pos:end="49:39"><name pos:start="49:28" pos:end="49:39"><name pos:start="49:28" pos:end="49:33">reop_s</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:39">glfs</name></name></expr></argument>, <argument pos:start="49:42" pos:end="49:53"><expr pos:start="49:42" pos:end="49:53"><name pos:start="49:42" pos:end="49:53"><name pos:start="49:42" pos:end="49:46">gconf</name><operator pos:start="49:47" pos:end="49:48">-&gt;</operator><name pos:start="49:49" pos:end="49:53">image</name></name></expr></argument>, <argument pos:start="49:56" pos:end="49:65"><expr pos:start="49:56" pos:end="49:65"><name pos:start="49:56" pos:end="49:65">open_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:27">(<expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:14">reop_s</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:18">fd</name></name> <operator pos:start="51:20" pos:end="51:21">==</operator> <name pos:start="51:23" pos:end="51:26">NULL</name></expr>)</condition> <block pos:start="51:29" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <comment type="block" pos:start="53:9" pos:end="53:54">/* reops-&gt;glfs will be cleaned up in _abort */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:21"><expr pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <operator pos:start="55:15" pos:end="55:15">-</operator><name pos:start="55:16" pos:end="55:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:18">goto <name pos:start="57:14" pos:end="57:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="63:1" pos:end="63:5"><name pos:start="63:1" pos:end="63:4">exit</name>:</label>

    <comment type="block" pos:start="65:5" pos:end="65:69">/* state-&gt;opaque will be freed in either the _abort or _commit */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><call pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:27">qemu_gluster_gconf_free</name><argument_list pos:start="67:28" pos:end="67:34">(<argument pos:start="67:29" pos:end="67:33"><expr pos:start="67:29" pos:end="67:33"><name pos:start="67:29" pos:end="67:33">gconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
