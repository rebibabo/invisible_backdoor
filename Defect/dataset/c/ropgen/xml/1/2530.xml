<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2530.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_audio_mix_set_matrix</name><parameter_list pos:start="1:28" pos:end="1:75">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:36">AudioMix</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">am</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:62"><decl pos:start="1:43" pos:end="1:62"><type pos:start="1:43" pos:end="1:62"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:54">double</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:62">matrix</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:74"><decl pos:start="1:65" pos:end="1:74"><type pos:start="1:65" pos:end="1:74"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:74">stride</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">o</name></decl>, <decl pos:start="5:15" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:16">i0</name></decl>, <decl pos:start="5:19" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:20">o0</name></decl>, <decl pos:start="5:23" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:25">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:28"><name pos:start="7:10" pos:end="7:23">in_layout_name</name><index pos:start="7:24" pos:end="7:28">[<expr pos:start="7:25" pos:end="7:27"><literal type="number" pos:start="7:25" pos:end="7:27">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:29"><name pos:start="9:10" pos:end="9:24">out_layout_name</name><index pos:start="9:25" pos:end="9:29">[<expr pos:start="9:26" pos:end="9:28"><literal type="number" pos:start="9:26" pos:end="9:28">128</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="15:76">( <expr pos:start="13:10" pos:end="15:75"><name pos:start="13:10" pos:end="13:24"><name pos:start="13:10" pos:end="13:11">am</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:24">in_channels</name></name> <operator pos:start="13:26" pos:end="13:27">&lt;=</operator> <literal type="number" pos:start="13:29" pos:end="13:29">0</literal> <operator pos:start="13:31" pos:end="13:32">||</operator>  <name pos:start="13:35" pos:end="13:49"><name pos:start="13:35" pos:end="13:36">am</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:49">in_channels</name></name> <operator pos:start="13:51" pos:end="13:51">&gt;</operator> <name pos:start="13:53" pos:end="13:75">AVRESAMPLE_MAX_CHANNELS</name> <operator pos:start="13:77" pos:end="13:78">||</operator>

        <name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:10">am</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:24">out_channels</name></name> <operator pos:start="15:26" pos:end="15:27">&lt;=</operator> <literal type="number" pos:start="15:29" pos:end="15:29">0</literal> <operator pos:start="15:31" pos:end="15:32">||</operator> <name pos:start="15:34" pos:end="15:49"><name pos:start="15:34" pos:end="15:35">am</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:49">out_channels</name></name> <operator pos:start="15:51" pos:end="15:51">&gt;</operator> <name pos:start="15:53" pos:end="15:75">AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block pos:start="15:78" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:31">

        <expr_stmt pos:start="17:9" pos:end="17:66"><expr pos:start="17:9" pos:end="17:65"><call pos:start="17:9" pos:end="17:65"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:65">(<argument pos:start="17:16" pos:end="17:22"><expr pos:start="17:16" pos:end="17:22"><name pos:start="17:16" pos:end="17:22"><name pos:start="17:16" pos:end="17:17">am</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:22">avr</name></name></expr></argument>, <argument pos:start="17:25" pos:end="17:36"><expr pos:start="17:25" pos:end="17:36"><name pos:start="17:25" pos:end="17:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:39" pos:end="17:64"><expr pos:start="17:39" pos:end="17:64"><literal type="string" pos:start="17:39" pos:end="17:64">"Invalid channel counts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:10">am</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:18">matrix</name></name></expr>)</condition> <block pos:start="25:21" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:26">

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><call pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:15">av_free</name><argument_list pos:start="27:16" pos:end="27:30">(<argument pos:start="27:17" pos:end="27:29"><expr pos:start="27:17" pos:end="27:29"><name pos:start="27:17" pos:end="27:29"><name pos:start="27:17" pos:end="27:18">am</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:26">matrix</name><index pos:start="27:27" pos:end="27:29">[<expr pos:start="27:28" pos:end="27:28"><literal type="number" pos:start="27:28" pos:end="27:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:26"><expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:10">am</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:18">matrix</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:25">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:6">am</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:26">in_matrix_channels</name></name>  <operator pos:start="35:29" pos:end="35:29">=</operator> <name pos:start="35:31" pos:end="35:45"><name pos:start="35:31" pos:end="35:32">am</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:45">in_channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:6">am</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:27">out_matrix_channels</name></name> <operator pos:start="37:29" pos:end="37:29">=</operator> <name pos:start="37:31" pos:end="37:46"><name pos:start="37:31" pos:end="37:32">am</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:46">out_channels</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="90:0"><expr pos:start="41:5" pos:end="41:37"><call pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:17">reduce_matrix</name><argument_list pos:start="41:18" pos:end="41:37">(<argument pos:start="41:19" pos:end="41:20"><expr pos:start="41:19" pos:end="41:20"><name pos:start="41:19" pos:end="41:20">am</name></expr></argument>, <argument pos:start="41:23" pos:end="41:28"><expr pos:start="41:23" pos:end="41:28"><name pos:start="41:23" pos:end="41:28">matrix</name></expr></argument>, <argument pos:start="41:31" pos:end="41:36"><expr pos:start="41:31" pos:end="41:36"><name pos:start="41:31" pos:end="41:36">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:define pos:start="45:1" pos:end="89:45">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:22">CONVERT_MATRIX</name><parameter_list pos:start="45:23" pos:end="45:34">(<parameter pos:start="45:24" pos:end="45:27"><type pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:27">type</name></type></parameter>, <parameter pos:start="45:30" pos:end="45:33"><type pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">expr</name></type></parameter>)</parameter_list></cpp:macro>                                          \

    <cpp:value pos:start="47:5" pos:end="89:45">am-&gt;matrix_## type[0] = av_mallocz(am-&gt;out_matrix_channels *            \

                                       am-&gt;in_matrix_channels  *            \

                                       sizeof(*am-&gt;matrix_## type[0]));     \

    if (!am-&gt;matrix_## type[0])                                             \

        return AVERROR(ENOMEM);                                             \

    for (o = 0, o0 = 0; o &lt; am-&gt;out_channels; o++) {                        \

        if (am-&gt;output_zero[o] || am-&gt;output_skip[o])                       \

            continue;                                                       \

        if (o0 &gt; 0)                                                         \

            am-&gt;matrix_## type[o0] = am-&gt;matrix_## type[o0 - 1] +           \

                                     am-&gt;in_matrix_channels;                \

        for (i = 0, i0 = 0; i &lt; am-&gt;in_channels; i++) {                     \

            double v;                                                       \

            if (am-&gt;input_skip[i])                                          \

                continue;                                                   \

            v = matrix[o * stride + i];                                     \

            am-&gt;matrix_## type[o0][i0] = expr;                              \

            i0++;                                                           \

        }                                                                   \

        o0++;                                                               \

    }                                                                       \

    am-&gt;matrix = (void **)am-&gt;matrix_## type;</cpp:value></cpp:define>



    <if_stmt pos:start="93:5" pos:end="123:5"><if pos:start="93:5" pos:end="123:5">if <condition pos:start="93:8" pos:end="93:58">(<expr pos:start="93:9" pos:end="93:57"><name pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:10">am</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:30">in_matrix_channels</name></name> <operator pos:start="93:32" pos:end="93:33">&amp;&amp;</operator> <name pos:start="93:35" pos:end="93:57"><name pos:start="93:35" pos:end="93:36">am</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:57">out_matrix_channels</name></name></expr>)</condition> <block pos:start="93:60" pos:end="123:5">{<block_content pos:start="95:9" pos:end="121:9">

        <switch pos:start="95:9" pos:end="121:9">switch <condition pos:start="95:16" pos:end="95:31">(<expr pos:start="95:17" pos:end="95:30"><name pos:start="95:17" pos:end="95:30"><name pos:start="95:17" pos:end="95:18">am</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:30">coeff_type</name></name></expr>)</condition> <block pos:start="95:33" pos:end="121:9">{<block_content pos:start="97:9" pos:end="119:35">

        <case pos:start="97:9" pos:end="97:34">case <expr pos:start="97:14" pos:end="97:33"><name pos:start="97:14" pos:end="97:33">AV_MIX_COEFF_TYPE_Q8</name></expr>:</case>

            <macro pos:start="99:13" pos:end="99:63"><name pos:start="99:13" pos:end="99:26">CONVERT_MATRIX</name><argument_list pos:start="99:27" pos:end="99:63">(<argument pos:start="99:28" pos:end="99:29">q8</argument>, <argument pos:start="99:32" pos:end="99:62">av_clip_int16(lrint(<literal type="number" pos:start="99:52" pos:end="99:56">256.0</literal> * v))</argument>)</argument_list></macro>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:35">case <expr pos:start="103:14" pos:end="103:34"><name pos:start="103:14" pos:end="103:34">AV_MIX_COEFF_TYPE_Q15</name></expr>:</case>

            <macro pos:start="105:13" pos:end="105:68"><name pos:start="105:13" pos:end="105:26">CONVERT_MATRIX</name><argument_list pos:start="105:27" pos:end="105:68">(<argument pos:start="105:28" pos:end="105:30">q15</argument>, <argument pos:start="105:33" pos:end="105:67">av_clipl_int32(llrint(<literal type="number" pos:start="105:55" pos:end="105:61">32768.0</literal> * v))</argument>)</argument_list></macro>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:35">case <expr pos:start="109:14" pos:end="109:34"><name pos:start="109:14" pos:end="109:34">AV_MIX_COEFF_TYPE_FLT</name></expr>:</case>

            <macro pos:start="111:13" pos:end="111:34"><name pos:start="111:13" pos:end="111:26">CONVERT_MATRIX</name><argument_list pos:start="111:27" pos:end="111:34">(<argument pos:start="111:28" pos:end="111:30">flt</argument>, <argument pos:start="111:33" pos:end="111:33">v</argument>)</argument_list></macro>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <default pos:start="115:9" pos:end="115:16">default:</default>

            <expr_stmt pos:start="117:13" pos:end="117:70"><expr pos:start="117:13" pos:end="117:69"><call pos:start="117:13" pos:end="117:69"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:69">(<argument pos:start="117:20" pos:end="117:26"><expr pos:start="117:20" pos:end="117:26"><name pos:start="117:20" pos:end="117:26"><name pos:start="117:20" pos:end="117:21">am</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:26">avr</name></name></expr></argument>, <argument pos:start="117:29" pos:end="117:40"><expr pos:start="117:29" pos:end="117:40"><name pos:start="117:29" pos:end="117:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:43" pos:end="117:68"><expr pos:start="117:43" pos:end="117:68"><literal type="string" pos:start="117:43" pos:end="117:68">"Invalid mix coeff type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:35">return <expr pos:start="119:20" pos:end="119:34"><call pos:start="119:20" pos:end="119:34"><name pos:start="119:20" pos:end="119:26">AVERROR</name><argument_list pos:start="119:27" pos:end="119:34">(<argument pos:start="119:28" pos:end="119:33"><expr pos:start="119:28" pos:end="119:33"><name pos:start="119:28" pos:end="119:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:32"><expr pos:start="127:5" pos:end="127:31"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="127:31"><name pos:start="127:11" pos:end="127:27">mix_function_init</name><argument_list pos:start="127:28" pos:end="127:31">(<argument pos:start="127:29" pos:end="127:30"><expr pos:start="127:29" pos:end="127:30"><name pos:start="127:29" pos:end="127:30">am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="131:19"><if pos:start="129:5" pos:end="131:19">if <condition pos:start="129:8" pos:end="129:16">(<expr pos:start="129:9" pos:end="129:15"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">&lt;</operator> <literal type="number" pos:start="129:15" pos:end="129:15">0</literal></expr>)</condition><block type="pseudo" pos:start="131:9" pos:end="131:19"><block_content pos:start="131:9" pos:end="131:19">

        <return pos:start="131:9" pos:end="131:19">return <expr pos:start="131:16" pos:end="131:18"><name pos:start="131:16" pos:end="131:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:65"><expr pos:start="135:5" pos:end="137:64"><call pos:start="135:5" pos:end="137:64"><name pos:start="135:5" pos:end="135:32">av_get_channel_layout_string</name><argument_list pos:start="135:33" pos:end="137:64">(<argument pos:start="135:34" pos:end="135:47"><expr pos:start="135:34" pos:end="135:47"><name pos:start="135:34" pos:end="135:47">in_layout_name</name></expr></argument>, <argument pos:start="135:50" pos:end="135:71"><expr pos:start="135:50" pos:end="135:71"><sizeof pos:start="135:50" pos:end="135:71">sizeof<argument_list pos:start="135:56" pos:end="135:71">(<argument pos:start="135:57" pos:end="135:70"><expr pos:start="135:57" pos:end="135:70"><name pos:start="135:57" pos:end="135:70">in_layout_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                 <argument pos:start="137:34" pos:end="137:48"><expr pos:start="137:34" pos:end="137:48"><name pos:start="137:34" pos:end="137:48"><name pos:start="137:34" pos:end="137:35">am</name><operator pos:start="137:36" pos:end="137:37">-&gt;</operator><name pos:start="137:38" pos:end="137:48">in_channels</name></name></expr></argument>, <argument pos:start="137:51" pos:end="137:63"><expr pos:start="137:51" pos:end="137:63"><name pos:start="137:51" pos:end="137:63"><name pos:start="137:51" pos:end="137:52">am</name><operator pos:start="137:53" pos:end="137:54">-&gt;</operator><name pos:start="137:55" pos:end="137:63">in_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="141:67"><expr pos:start="139:5" pos:end="141:66"><call pos:start="139:5" pos:end="141:66"><name pos:start="139:5" pos:end="139:32">av_get_channel_layout_string</name><argument_list pos:start="139:33" pos:end="141:66">(<argument pos:start="139:34" pos:end="139:48"><expr pos:start="139:34" pos:end="139:48"><name pos:start="139:34" pos:end="139:48">out_layout_name</name></expr></argument>, <argument pos:start="139:51" pos:end="139:73"><expr pos:start="139:51" pos:end="139:73"><sizeof pos:start="139:51" pos:end="139:73">sizeof<argument_list pos:start="139:57" pos:end="139:73">(<argument pos:start="139:58" pos:end="139:72"><expr pos:start="139:58" pos:end="139:72"><name pos:start="139:58" pos:end="139:72">out_layout_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                 <argument pos:start="141:34" pos:end="141:49"><expr pos:start="141:34" pos:end="141:49"><name pos:start="141:34" pos:end="141:49"><name pos:start="141:34" pos:end="141:35">am</name><operator pos:start="141:36" pos:end="141:37">-&gt;</operator><name pos:start="141:38" pos:end="141:49">out_channels</name></name></expr></argument>, <argument pos:start="141:52" pos:end="141:65"><expr pos:start="141:52" pos:end="141:65"><name pos:start="141:52" pos:end="141:65"><name pos:start="141:52" pos:end="141:53">am</name><operator pos:start="141:54" pos:end="141:55">-&gt;</operator><name pos:start="141:56" pos:end="141:65">out_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="145:44"><expr pos:start="143:5" pos:end="145:43"><call pos:start="143:5" pos:end="145:43"><name pos:start="143:5" pos:end="143:10">av_log</name><argument_list pos:start="143:11" pos:end="145:43">(<argument pos:start="143:12" pos:end="143:18"><expr pos:start="143:12" pos:end="143:18"><name pos:start="143:12" pos:end="143:18"><name pos:start="143:12" pos:end="143:13">am</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:18">avr</name></name></expr></argument>, <argument pos:start="143:21" pos:end="143:32"><expr pos:start="143:21" pos:end="143:32"><name pos:start="143:21" pos:end="143:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="143:35" pos:end="143:57"><expr pos:start="143:35" pos:end="143:57"><literal type="string" pos:start="143:35" pos:end="143:57">"audio_mix: %s to %s\n"</literal></expr></argument>,

           <argument pos:start="145:12" pos:end="145:25"><expr pos:start="145:12" pos:end="145:25"><name pos:start="145:12" pos:end="145:25">in_layout_name</name></expr></argument>, <argument pos:start="145:28" pos:end="145:42"><expr pos:start="145:28" pos:end="145:42"><name pos:start="145:28" pos:end="145:42">out_layout_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="149:60"><expr pos:start="147:5" pos:end="149:59"><call pos:start="147:5" pos:end="149:59"><name pos:start="147:5" pos:end="147:10">av_log</name><argument_list pos:start="147:11" pos:end="149:59">(<argument pos:start="147:12" pos:end="147:18"><expr pos:start="147:12" pos:end="147:18"><name pos:start="147:12" pos:end="147:18"><name pos:start="147:12" pos:end="147:13">am</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:18">avr</name></name></expr></argument>, <argument pos:start="147:21" pos:end="147:32"><expr pos:start="147:21" pos:end="147:32"><name pos:start="147:21" pos:end="147:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="147:35" pos:end="147:58"><expr pos:start="147:35" pos:end="147:58"><literal type="string" pos:start="147:35" pos:end="147:58">"matrix size: %d x %d\n"</literal></expr></argument>,

           <argument pos:start="149:12" pos:end="149:33"><expr pos:start="149:12" pos:end="149:33"><name pos:start="149:12" pos:end="149:33"><name pos:start="149:12" pos:end="149:13">am</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:33">in_matrix_channels</name></name></expr></argument>, <argument pos:start="149:36" pos:end="149:58"><expr pos:start="149:36" pos:end="149:58"><name pos:start="149:36" pos:end="149:58"><name pos:start="149:36" pos:end="149:37">am</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:58">out_matrix_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="151:5" pos:end="173:5">for <control pos:start="151:9" pos:end="151:42">(<init pos:start="151:10" pos:end="151:15"><expr pos:start="151:10" pos:end="151:14"><name pos:start="151:10" pos:end="151:10">o</name> <operator pos:start="151:12" pos:end="151:12">=</operator> <literal type="number" pos:start="151:14" pos:end="151:14">0</literal></expr>;</init> <condition pos:start="151:17" pos:end="151:37"><expr pos:start="151:17" pos:end="151:36"><name pos:start="151:17" pos:end="151:17">o</name> <operator pos:start="151:19" pos:end="151:19">&lt;</operator> <name pos:start="151:21" pos:end="151:36"><name pos:start="151:21" pos:end="151:22">am</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:36">out_channels</name></name></expr>;</condition> <incr pos:start="151:39" pos:end="151:41"><expr pos:start="151:39" pos:end="151:41"><name pos:start="151:39" pos:end="151:39">o</name><operator pos:start="151:40" pos:end="151:41">++</operator></expr></incr>)</control> <block pos:start="151:44" pos:end="173:5">{<block_content pos:start="153:9" pos:end="171:44">

        <for pos:start="153:9" pos:end="169:9">for <control pos:start="153:13" pos:end="153:45">(<init pos:start="153:14" pos:end="153:19"><expr pos:start="153:14" pos:end="153:18"><name pos:start="153:14" pos:end="153:14">i</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>;</init> <condition pos:start="153:21" pos:end="153:40"><expr pos:start="153:21" pos:end="153:39"><name pos:start="153:21" pos:end="153:21">i</name> <operator pos:start="153:23" pos:end="153:23">&lt;</operator> <name pos:start="153:25" pos:end="153:39"><name pos:start="153:25" pos:end="153:26">am</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:39">in_channels</name></name></expr>;</condition> <incr pos:start="153:42" pos:end="153:44"><expr pos:start="153:42" pos:end="153:44"><name pos:start="153:42" pos:end="153:42">i</name><operator pos:start="153:43" pos:end="153:44">++</operator></expr></incr>)</control> <block pos:start="153:47" pos:end="169:9">{<block_content pos:start="155:13" pos:end="167:56">

            <if_stmt pos:start="155:13" pos:end="167:56"><if pos:start="155:13" pos:end="157:58">if <condition pos:start="155:16" pos:end="155:35">(<expr pos:start="155:17" pos:end="155:34"><name pos:start="155:17" pos:end="155:34"><name pos:start="155:17" pos:end="155:18">am</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:31">output_zero</name><index pos:start="155:32" pos:end="155:34">[<expr pos:start="155:33" pos:end="155:33"><name pos:start="155:33" pos:end="155:33">o</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:58"><block_content pos:start="157:17" pos:end="157:58">

                <expr_stmt pos:start="157:17" pos:end="157:58"><expr pos:start="157:17" pos:end="157:57"><call pos:start="157:17" pos:end="157:57"><name pos:start="157:17" pos:end="157:22">av_log</name><argument_list pos:start="157:23" pos:end="157:57">(<argument pos:start="157:24" pos:end="157:30"><expr pos:start="157:24" pos:end="157:30"><name pos:start="157:24" pos:end="157:30"><name pos:start="157:24" pos:end="157:25">am</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:30">avr</name></name></expr></argument>, <argument pos:start="157:33" pos:end="157:44"><expr pos:start="157:33" pos:end="157:44"><name pos:start="157:33" pos:end="157:44">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="157:47" pos:end="157:56"><expr pos:start="157:47" pos:end="157:56"><literal type="string" pos:start="157:47" pos:end="157:56">"  (ZERO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="159:13" pos:end="161:58">else if <condition pos:start="159:21" pos:end="159:61">(<expr pos:start="159:22" pos:end="159:60"><name pos:start="159:22" pos:end="159:38"><name pos:start="159:22" pos:end="159:23">am</name><operator pos:start="159:24" pos:end="159:25">-&gt;</operator><name pos:start="159:26" pos:end="159:35">input_skip</name><index pos:start="159:36" pos:end="159:38">[<expr pos:start="159:37" pos:end="159:37"><name pos:start="159:37" pos:end="159:37">i</name></expr>]</index></name> <operator pos:start="159:40" pos:end="159:41">||</operator> <name pos:start="159:43" pos:end="159:60"><name pos:start="159:43" pos:end="159:44">am</name><operator pos:start="159:45" pos:end="159:46">-&gt;</operator><name pos:start="159:47" pos:end="159:57">output_skip</name><index pos:start="159:58" pos:end="159:60">[<expr pos:start="159:59" pos:end="159:59"><name pos:start="159:59" pos:end="159:59">o</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:58"><block_content pos:start="161:17" pos:end="161:58">

                <expr_stmt pos:start="161:17" pos:end="161:58"><expr pos:start="161:17" pos:end="161:57"><call pos:start="161:17" pos:end="161:57"><name pos:start="161:17" pos:end="161:22">av_log</name><argument_list pos:start="161:23" pos:end="161:57">(<argument pos:start="161:24" pos:end="161:30"><expr pos:start="161:24" pos:end="161:30"><name pos:start="161:24" pos:end="161:30"><name pos:start="161:24" pos:end="161:25">am</name><operator pos:start="161:26" pos:end="161:27">-&gt;</operator><name pos:start="161:28" pos:end="161:30">avr</name></name></expr></argument>, <argument pos:start="161:33" pos:end="161:44"><expr pos:start="161:33" pos:end="161:44"><name pos:start="161:33" pos:end="161:44">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="161:47" pos:end="161:56"><expr pos:start="161:47" pos:end="161:56"><literal type="string" pos:start="161:47" pos:end="161:56">"  (SKIP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="163:13" pos:end="167:56">else<block type="pseudo" pos:start="165:17" pos:end="167:56"><block_content pos:start="165:17" pos:end="167:56">

                <expr_stmt pos:start="165:17" pos:end="167:56"><expr pos:start="165:17" pos:end="167:55"><call pos:start="165:17" pos:end="167:55"><name pos:start="165:17" pos:end="165:22">av_log</name><argument_list pos:start="165:23" pos:end="167:55">(<argument pos:start="165:24" pos:end="165:30"><expr pos:start="165:24" pos:end="165:30"><name pos:start="165:24" pos:end="165:30"><name pos:start="165:24" pos:end="165:25">am</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:30">avr</name></name></expr></argument>, <argument pos:start="165:33" pos:end="165:44"><expr pos:start="165:33" pos:end="165:44"><name pos:start="165:33" pos:end="165:44">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="165:47" pos:end="165:56"><expr pos:start="165:47" pos:end="165:56"><literal type="string" pos:start="165:47" pos:end="165:56">"  %0.3f "</literal></expr></argument>,

                       <argument pos:start="167:24" pos:end="167:54"><expr pos:start="167:24" pos:end="167:54"><name pos:start="167:24" pos:end="167:54"><name pos:start="167:24" pos:end="167:29">matrix</name><index pos:start="167:30" pos:end="167:54">[<expr pos:start="167:31" pos:end="167:53"><name pos:start="167:31" pos:end="167:31">o</name> <operator pos:start="167:33" pos:end="167:33">*</operator> <name pos:start="167:35" pos:end="167:49"><name pos:start="167:35" pos:end="167:36">am</name><operator pos:start="167:37" pos:end="167:38">-&gt;</operator><name pos:start="167:39" pos:end="167:49">in_channels</name></name> <operator pos:start="167:51" pos:end="167:51">+</operator> <name pos:start="167:53" pos:end="167:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="171:9" pos:end="171:44"><expr pos:start="171:9" pos:end="171:43"><call pos:start="171:9" pos:end="171:43"><name pos:start="171:9" pos:end="171:14">av_log</name><argument_list pos:start="171:15" pos:end="171:43">(<argument pos:start="171:16" pos:end="171:22"><expr pos:start="171:16" pos:end="171:22"><name pos:start="171:16" pos:end="171:22"><name pos:start="171:16" pos:end="171:17">am</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:22">avr</name></name></expr></argument>, <argument pos:start="171:25" pos:end="171:36"><expr pos:start="171:25" pos:end="171:36"><name pos:start="171:25" pos:end="171:36">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="171:39" pos:end="171:42"><expr pos:start="171:39" pos:end="171:42"><literal type="string" pos:start="171:39" pos:end="171:42">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="177:5" pos:end="177:13">return <expr pos:start="177:12" pos:end="177:12"><literal type="number" pos:start="177:12" pos:end="177:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
