<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13343.c" pos:tabs="8"><function pos:start="1:1" pos:end="335:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">fic_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">got_frame</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="335:1">{<block_content pos:start="7:5" pos:end="333:23">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">FICContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">ctx</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">src</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">slice</name></decl>, <decl pos:start="13:16" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:22">nslices</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">msize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">tsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:13">cur_x</name></decl>, <decl pos:start="19:16" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:16" pos:end="19:20">cur_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:38"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">skip_cursor</name> <init pos:start="21:21" pos:end="21:38">= <expr pos:start="21:23" pos:end="21:38"><name pos:start="21:23" pos:end="21:38"><name pos:start="21:23" pos:end="21:25">ctx</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:38">skip_cursor</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:18">sdata</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:19"><if pos:start="27:5" pos:end="29:19">if <condition pos:start="27:8" pos:end="27:55">(<expr pos:start="27:9" pos:end="27:54"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">ret</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:49"><name pos:start="27:16" pos:end="27:30">ff_reget_buffer</name><argument_list pos:start="27:31" pos:end="27:49">(<argument pos:start="27:32" pos:end="27:36"><expr pos:start="27:32" pos:end="27:36"><name pos:start="27:32" pos:end="27:36">avctx</name></expr></argument>, <argument pos:start="27:39" pos:end="27:48"><expr pos:start="27:39" pos:end="27:48"><name pos:start="27:39" pos:end="27:48"><name pos:start="27:39" pos:end="27:41">ctx</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:48">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="27:50" pos:end="27:50">)</operator> <operator pos:start="27:52" pos:end="27:52">&lt;</operator> <literal type="number" pos:start="27:54" pos:end="27:54">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:19"><block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:41">/* Header + at least one slice (4) */</comment>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:42">(<expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:13">avpkt</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">size</name></name> <operator pos:start="35:21" pos:end="35:21">&lt;</operator> <name pos:start="35:23" pos:end="35:37">FIC_HEADER_SIZE</name> <operator pos:start="35:39" pos:end="35:39">+</operator> <literal type="number" pos:start="35:41" pos:end="35:41">4</literal></expr>)</condition> <block pos:start="35:44" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:35">

        <expr_stmt pos:start="37:9" pos:end="37:66"><expr pos:start="37:9" pos:end="37:65"><call pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:65">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:64"><expr pos:start="37:37" pos:end="37:64"><literal type="string" pos:start="37:37" pos:end="37:64">"Frame data is too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:27">/* Check for header. */</comment>

    <if_stmt pos:start="47:5" pos:end="49:63"><if pos:start="47:5" pos:end="49:63">if <condition pos:start="47:8" pos:end="47:35">(<expr pos:start="47:9" pos:end="47:34"><call pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:14">memcmp</name><argument_list pos:start="47:15" pos:end="47:34">(<argument pos:start="47:16" pos:end="47:18"><expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">src</name></expr></argument>, <argument pos:start="47:21" pos:end="47:30"><expr pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:30">fic_header</name></expr></argument>, <argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:63"><block_content pos:start="49:9" pos:end="49:63">

        <expr_stmt pos:start="49:9" pos:end="49:63"><expr pos:start="49:9" pos:end="49:62"><call pos:start="49:9" pos:end="49:62"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:62">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:36"><expr pos:start="49:23" pos:end="49:36"><name pos:start="49:23" pos:end="49:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="49:39" pos:end="49:61"><expr pos:start="49:39" pos:end="49:61"><literal type="string" pos:start="49:39" pos:end="49:61">"Invalid FIC Header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:29">/* Is it a skip frame? */</comment>

    <if_stmt pos:start="55:5" pos:end="67:5"><if pos:start="55:5" pos:end="67:5">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">src</name><index pos:start="55:12" pos:end="55:15">[<expr pos:start="55:13" pos:end="55:14"><literal type="number" pos:start="55:13" pos:end="55:14">17</literal></expr>]</index></name></expr>)</condition> <block pos:start="55:18" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:18">

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:30">(<expr pos:start="57:13" pos:end="57:29"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:29"><name pos:start="57:14" pos:end="57:16">ctx</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:29">final_frame</name></name></expr>)</condition> <block pos:start="57:32" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:39">

            <expr_stmt pos:start="59:13" pos:end="59:72"><expr pos:start="59:13" pos:end="59:71"><call pos:start="59:13" pos:end="59:71"><name pos:start="59:13" pos:end="59:18">av_log</name><argument_list pos:start="59:19" pos:end="59:71">(<argument pos:start="59:20" pos:end="59:24"><expr pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:24">avctx</name></expr></argument>, <argument pos:start="59:27" pos:end="59:40"><expr pos:start="59:27" pos:end="59:40"><name pos:start="59:27" pos:end="59:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="59:43" pos:end="59:70"><expr pos:start="59:43" pos:end="59:70"><literal type="string" pos:start="59:43" pos:end="59:70">"Initial frame is skipped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:39">return <expr pos:start="61:20" pos:end="61:38"><name pos:start="61:20" pos:end="61:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">skip</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:22"><expr pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:11">nslices</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:21"><name pos:start="71:15" pos:end="71:17">src</name><index pos:start="71:18" pos:end="71:21">[<expr pos:start="71:19" pos:end="71:20"><literal type="number" pos:start="71:19" pos:end="71:20">13</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:17">(<expr pos:start="73:9" pos:end="73:16"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:16">nslices</name></expr>)</condition> <block pos:start="73:19" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:35">

        <expr_stmt pos:start="75:9" pos:end="75:60"><expr pos:start="75:9" pos:end="75:59"><call pos:start="75:9" pos:end="75:59"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="75:59">(<argument pos:start="75:16" pos:end="75:20"><expr pos:start="75:16" pos:end="75:20"><name pos:start="75:16" pos:end="75:20">avctx</name></expr></argument>, <argument pos:start="75:23" pos:end="75:34"><expr pos:start="75:23" pos:end="75:34"><name pos:start="75:23" pos:end="75:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:37" pos:end="75:58"><expr pos:start="75:37" pos:end="75:58"><literal type="string" pos:start="75:37" pos:end="75:58">"Zero slices found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:35">return <expr pos:start="77:16" pos:end="77:34"><name pos:start="77:16" pos:end="77:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:37">/* High or Low Quality Matrix? */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:52"><expr pos:start="85:5" pos:end="85:51"><name pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:7">ctx</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:13">qmat</name></name> <operator pos:start="85:15" pos:end="85:15">=</operator> <ternary pos:start="85:17" pos:end="85:51"><condition pos:start="85:17" pos:end="85:25"><expr pos:start="85:17" pos:end="85:23"><name pos:start="85:17" pos:end="85:23"><name pos:start="85:17" pos:end="85:19">src</name><index pos:start="85:20" pos:end="85:23">[<expr pos:start="85:21" pos:end="85:22"><literal type="number" pos:start="85:21" pos:end="85:22">23</literal></expr>]</index></name></expr> ?</condition><then pos:start="85:27" pos:end="85:37"> <expr pos:start="85:27" pos:end="85:37"><name pos:start="85:27" pos:end="85:37">fic_qmat_hq</name></expr> </then><else pos:start="85:39" pos:end="85:51">: <expr pos:start="85:41" pos:end="85:51"><name pos:start="85:41" pos:end="85:51">fic_qmat_lq</name></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:27">/* Skip cursor data. */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:30"><expr pos:start="91:5" pos:end="91:29"><name pos:start="91:5" pos:end="91:9">tsize</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:19">AV_RB24</name><argument_list pos:start="91:20" pos:end="91:29">(<argument pos:start="91:21" pos:end="91:28"><expr pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:23">src</name> <operator pos:start="91:25" pos:end="91:25">+</operator> <literal type="number" pos:start="91:27" pos:end="91:28">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="103:5"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:46">(<expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:13">tsize</name> <operator pos:start="93:15" pos:end="93:15">&gt;</operator> <name pos:start="93:17" pos:end="93:27"><name pos:start="93:17" pos:end="93:21">avpkt</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:27">size</name></name> <operator pos:start="93:29" pos:end="93:29">-</operator> <name pos:start="93:31" pos:end="93:45">FIC_HEADER_SIZE</name></expr>)</condition> <block pos:start="93:48" pos:end="103:5">{<block_content pos:start="95:9" pos:end="101:35">

        <expr_stmt pos:start="95:9" pos:end="99:53"><expr pos:start="95:9" pos:end="99:52"><call pos:start="95:9" pos:end="99:52"><name pos:start="95:9" pos:end="95:14">av_log</name><argument_list pos:start="95:15" pos:end="99:52">(<argument pos:start="95:16" pos:end="95:20"><expr pos:start="95:16" pos:end="95:20"><name pos:start="95:16" pos:end="95:20">avctx</name></expr></argument>, <argument pos:start="95:23" pos:end="95:34"><expr pos:start="95:23" pos:end="95:34"><name pos:start="95:23" pos:end="95:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="97:16" pos:end="97:74"><expr pos:start="97:16" pos:end="97:74"><literal type="string" pos:start="97:16" pos:end="97:74">"Packet is too small to contain cursor (%d vs %d bytes).\n"</literal></expr></argument>,

               <argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">tsize</name></expr></argument>, <argument pos:start="99:23" pos:end="99:51"><expr pos:start="99:23" pos:end="99:51"><name pos:start="99:23" pos:end="99:33"><name pos:start="99:23" pos:end="99:27">avpkt</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:33">size</name></name> <operator pos:start="99:35" pos:end="99:35">-</operator> <name pos:start="99:37" pos:end="99:51">FIC_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:35">return <expr pos:start="101:16" pos:end="101:34"><name pos:start="101:16" pos:end="101:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="109:24"><if pos:start="107:5" pos:end="109:24">if <condition pos:start="107:8" pos:end="107:59">(<expr pos:start="107:9" pos:end="107:58"><operator pos:start="107:9" pos:end="107:9">!</operator><name pos:start="107:10" pos:end="107:14">tsize</name> <operator pos:start="107:16" pos:end="107:17">||</operator> <operator pos:start="107:19" pos:end="107:19">!</operator><call pos:start="107:20" pos:end="107:36"><name pos:start="107:20" pos:end="107:26">AV_RL16</name><argument_list pos:start="107:27" pos:end="107:36">(<argument pos:start="107:28" pos:end="107:35"><expr pos:start="107:28" pos:end="107:35"><name pos:start="107:28" pos:end="107:30">src</name> <operator pos:start="107:32" pos:end="107:32">+</operator> <literal type="number" pos:start="107:34" pos:end="107:35">37</literal></expr></argument>)</argument_list></call> <operator pos:start="107:38" pos:end="107:39">||</operator> <operator pos:start="107:41" pos:end="107:41">!</operator><call pos:start="107:42" pos:end="107:58"><name pos:start="107:42" pos:end="107:48">AV_RL16</name><argument_list pos:start="107:49" pos:end="107:58">(<argument pos:start="107:50" pos:end="107:57"><expr pos:start="107:50" pos:end="107:57"><name pos:start="107:50" pos:end="107:52">src</name> <operator pos:start="107:54" pos:end="107:54">+</operator> <literal type="number" pos:start="107:56" pos:end="107:57">39</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:24"><block_content pos:start="109:9" pos:end="109:24">

        <expr_stmt pos:start="109:9" pos:end="109:24"><expr pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:19">skip_cursor</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <literal type="number" pos:start="109:23" pos:end="109:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="121:5"><if pos:start="113:5" pos:end="121:5">if <condition pos:start="113:8" pos:end="113:35">(<expr pos:start="113:9" pos:end="113:34"><operator pos:start="113:9" pos:end="113:9">!</operator><name pos:start="113:10" pos:end="113:20">skip_cursor</name> <operator pos:start="113:22" pos:end="113:23">&amp;&amp;</operator> <name pos:start="113:25" pos:end="113:29">tsize</name> <operator pos:start="113:31" pos:end="113:31">&lt;</operator> <literal type="number" pos:start="113:33" pos:end="113:34">32</literal></expr>)</condition> <block pos:start="113:37" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:24">

        <expr_stmt pos:start="115:9" pos:end="117:60"><expr pos:start="115:9" pos:end="117:59"><call pos:start="115:9" pos:end="117:59"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="117:59">(<argument pos:start="115:16" pos:end="115:20"><expr pos:start="115:16" pos:end="115:20"><name pos:start="115:16" pos:end="115:20">avctx</name></expr></argument>, <argument pos:start="115:23" pos:end="115:36"><expr pos:start="115:23" pos:end="115:36"><name pos:start="115:23" pos:end="115:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="117:16" pos:end="117:58"><expr pos:start="117:16" pos:end="117:58"><literal type="string" pos:start="117:16" pos:end="117:58">"Cursor data too small. Skipping cursor.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:24"><expr pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:19">skip_cursor</name> <operator pos:start="119:21" pos:end="119:21">=</operator> <literal type="number" pos:start="119:23" pos:end="119:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:26">/* Cursor position. */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:30"><expr pos:start="127:5" pos:end="127:29"><name pos:start="127:5" pos:end="127:9">cur_x</name> <operator pos:start="127:11" pos:end="127:11">=</operator> <call pos:start="127:13" pos:end="127:29"><name pos:start="127:13" pos:end="127:19">AV_RL16</name><argument_list pos:start="127:20" pos:end="127:29">(<argument pos:start="127:21" pos:end="127:28"><expr pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:23">src</name> <operator pos:start="127:25" pos:end="127:25">+</operator> <literal type="number" pos:start="127:27" pos:end="127:28">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:30"><expr pos:start="129:5" pos:end="129:29"><name pos:start="129:5" pos:end="129:9">cur_y</name> <operator pos:start="129:11" pos:end="129:11">=</operator> <call pos:start="129:13" pos:end="129:29"><name pos:start="129:13" pos:end="129:19">AV_RL16</name><argument_list pos:start="129:20" pos:end="129:29">(<argument pos:start="129:21" pos:end="129:28"><expr pos:start="129:21" pos:end="129:28"><name pos:start="129:21" pos:end="129:23">src</name> <operator pos:start="129:25" pos:end="129:25">+</operator> <literal type="number" pos:start="129:27" pos:end="129:28">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="141:5"><if pos:start="131:5" pos:end="141:5">if <condition pos:start="131:8" pos:end="131:72">(<expr pos:start="131:9" pos:end="131:71"><operator pos:start="131:9" pos:end="131:9">!</operator><name pos:start="131:10" pos:end="131:20">skip_cursor</name> <operator pos:start="131:22" pos:end="131:23">&amp;&amp;</operator> <operator pos:start="131:25" pos:end="131:25">(</operator><name pos:start="131:26" pos:end="131:30">cur_x</name> <operator pos:start="131:32" pos:end="131:32">&gt;</operator> <name pos:start="131:34" pos:end="131:45"><name pos:start="131:34" pos:end="131:38">avctx</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:45">width</name></name> <operator pos:start="131:47" pos:end="131:48">||</operator> <name pos:start="131:50" pos:end="131:54">cur_y</name> <operator pos:start="131:56" pos:end="131:56">&gt;</operator> <name pos:start="131:58" pos:end="131:70"><name pos:start="131:58" pos:end="131:62">avctx</name><operator pos:start="131:63" pos:end="131:64">-&gt;</operator><name pos:start="131:65" pos:end="131:70">height</name></name><operator pos:start="131:71" pos:end="131:71">)</operator></expr>)</condition> <block pos:start="131:74" pos:end="141:5">{<block_content pos:start="133:9" pos:end="139:24">

        <expr_stmt pos:start="133:9" pos:end="137:29"><expr pos:start="133:9" pos:end="137:28"><call pos:start="133:9" pos:end="137:28"><name pos:start="133:9" pos:end="133:14">av_log</name><argument_list pos:start="133:15" pos:end="137:28">(<argument pos:start="133:16" pos:end="133:20"><expr pos:start="133:16" pos:end="133:20"><name pos:start="133:16" pos:end="133:20">avctx</name></expr></argument>, <argument pos:start="133:23" pos:end="133:34"><expr pos:start="133:23" pos:end="133:34"><name pos:start="133:23" pos:end="133:34">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="135:16" pos:end="135:69"><expr pos:start="135:16" pos:end="135:69"><literal type="string" pos:start="135:16" pos:end="135:69">"Invalid cursor position: (%d,%d). Skipping cursor.\n"</literal></expr></argument>,

               <argument pos:start="137:16" pos:end="137:20"><expr pos:start="137:16" pos:end="137:20"><name pos:start="137:16" pos:end="137:20">cur_x</name></expr></argument>, <argument pos:start="137:23" pos:end="137:27"><expr pos:start="137:23" pos:end="137:27"><name pos:start="137:23" pos:end="137:27">cur_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:19">skip_cursor</name> <operator pos:start="139:21" pos:end="139:21">=</operator> <literal type="number" pos:start="139:23" pos:end="139:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="153:5"><if pos:start="145:5" pos:end="153:5">if <condition pos:start="145:8" pos:end="145:77">(<expr pos:start="145:9" pos:end="145:76"><operator pos:start="145:9" pos:end="145:9">!</operator><name pos:start="145:10" pos:end="145:20">skip_cursor</name> <operator pos:start="145:22" pos:end="145:23">&amp;&amp;</operator> <operator pos:start="145:25" pos:end="145:25">(</operator><call pos:start="145:26" pos:end="145:42"><name pos:start="145:26" pos:end="145:32">AV_RL16</name><argument_list pos:start="145:33" pos:end="145:42">(<argument pos:start="145:34" pos:end="145:41"><expr pos:start="145:34" pos:end="145:41"><name pos:start="145:34" pos:end="145:36">src</name> <operator pos:start="145:38" pos:end="145:38">+</operator> <literal type="number" pos:start="145:40" pos:end="145:41">37</literal></expr></argument>)</argument_list></call> <operator pos:start="145:44" pos:end="145:45">!=</operator> <literal type="number" pos:start="145:47" pos:end="145:48">32</literal> <operator pos:start="145:50" pos:end="145:51">||</operator> <call pos:start="145:53" pos:end="145:69"><name pos:start="145:53" pos:end="145:59">AV_RL16</name><argument_list pos:start="145:60" pos:end="145:69">(<argument pos:start="145:61" pos:end="145:68"><expr pos:start="145:61" pos:end="145:68"><name pos:start="145:61" pos:end="145:63">src</name> <operator pos:start="145:65" pos:end="145:65">+</operator> <literal type="number" pos:start="145:67" pos:end="145:68">39</literal></expr></argument>)</argument_list></call> <operator pos:start="145:71" pos:end="145:72">!=</operator> <literal type="number" pos:start="145:74" pos:end="145:75">32</literal><operator pos:start="145:76" pos:end="145:76">)</operator></expr>)</condition> <block pos:start="145:79" pos:end="153:5">{<block_content pos:start="147:9" pos:end="151:24">

        <expr_stmt pos:start="147:9" pos:end="149:58"><expr pos:start="147:9" pos:end="149:57"><call pos:start="147:9" pos:end="149:57"><name pos:start="147:9" pos:end="147:14">av_log</name><argument_list pos:start="147:15" pos:end="149:57">(<argument pos:start="147:16" pos:end="147:20"><expr pos:start="147:16" pos:end="147:20"><name pos:start="147:16" pos:end="147:20">avctx</name></expr></argument>, <argument pos:start="147:23" pos:end="147:36"><expr pos:start="147:23" pos:end="147:36"><name pos:start="147:23" pos:end="147:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="149:16" pos:end="149:56"><expr pos:start="149:16" pos:end="149:56"><literal type="string" pos:start="149:16" pos:end="149:56">"Invalid cursor size. Skipping cursor.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:24"><expr pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:19">skip_cursor</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <literal type="number" pos:start="151:23" pos:end="151:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:50">/* Slice height for all but the last slice. */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:61"><expr pos:start="159:5" pos:end="159:60"><name pos:start="159:5" pos:end="159:16"><name pos:start="159:5" pos:end="159:7">ctx</name><operator pos:start="159:8" pos:end="159:9">-&gt;</operator><name pos:start="159:10" pos:end="159:16">slice_h</name></name> <operator pos:start="159:18" pos:end="159:18">=</operator> <literal type="number" pos:start="159:20" pos:end="159:21">16</literal> <operator pos:start="159:23" pos:end="159:23">*</operator> <operator pos:start="159:25" pos:end="159:25">(</operator><name pos:start="159:26" pos:end="159:44"><name pos:start="159:26" pos:end="159:28">ctx</name><operator pos:start="159:29" pos:end="159:30">-&gt;</operator><name pos:start="159:31" pos:end="159:44">aligned_height</name></name> <operator pos:start="159:46" pos:end="159:47">&gt;&gt;</operator> <literal type="number" pos:start="159:49" pos:end="159:49">4</literal><operator pos:start="159:50" pos:end="159:50">)</operator> <operator pos:start="159:52" pos:end="159:52">/</operator> <name pos:start="159:54" pos:end="159:60">nslices</name></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="163:54"><if pos:start="161:5" pos:end="163:54">if <condition pos:start="161:8" pos:end="161:26">(<expr pos:start="161:9" pos:end="161:25"><name pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:11">ctx</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:20">slice_h</name></name> <operator pos:start="161:22" pos:end="161:22">%</operator> <literal type="number" pos:start="161:24" pos:end="161:25">16</literal></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="163:54"><block_content pos:start="163:9" pos:end="163:54">

        <expr_stmt pos:start="163:9" pos:end="163:54"><expr pos:start="163:9" pos:end="163:53"><name pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:11">ctx</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:20">slice_h</name></name> <operator pos:start="163:22" pos:end="163:22">=</operator> <call pos:start="163:24" pos:end="163:53"><name pos:start="163:24" pos:end="163:30">FFALIGN</name><argument_list pos:start="163:31" pos:end="163:53">(<argument pos:start="163:32" pos:end="163:48"><expr pos:start="163:32" pos:end="163:48"><name pos:start="163:32" pos:end="163:43"><name pos:start="163:32" pos:end="163:34">ctx</name><operator pos:start="163:35" pos:end="163:36">-&gt;</operator><name pos:start="163:37" pos:end="163:43">slice_h</name></name> <operator pos:start="163:45" pos:end="163:45">-</operator> <literal type="number" pos:start="163:47" pos:end="163:48">16</literal></expr></argument>, <argument pos:start="163:51" pos:end="163:52"><expr pos:start="163:51" pos:end="163:52"><literal type="number" pos:start="163:51" pos:end="163:52">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:48">/* First slice offset and remaining data. */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:56"><expr pos:start="169:5" pos:end="169:55"><name pos:start="169:5" pos:end="169:9">sdata</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <name pos:start="169:13" pos:end="169:15">src</name> <operator pos:start="169:17" pos:end="169:17">+</operator> <name pos:start="169:19" pos:end="169:23">tsize</name> <operator pos:start="169:25" pos:end="169:25">+</operator> <name pos:start="169:27" pos:end="169:41">FIC_HEADER_SIZE</name> <operator pos:start="169:43" pos:end="169:43">+</operator> <literal type="number" pos:start="169:45" pos:end="169:45">4</literal> <operator pos:start="169:47" pos:end="169:47">*</operator> <name pos:start="169:49" pos:end="169:55">nslices</name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:64"><expr pos:start="171:5" pos:end="171:63"><name pos:start="171:5" pos:end="171:9">msize</name> <operator pos:start="171:11" pos:end="171:11">=</operator> <name pos:start="171:13" pos:end="171:23"><name pos:start="171:13" pos:end="171:17">avpkt</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:23">size</name></name> <operator pos:start="171:25" pos:end="171:25">-</operator> <name pos:start="171:27" pos:end="171:33">nslices</name> <operator pos:start="171:35" pos:end="171:35">*</operator> <literal type="number" pos:start="171:37" pos:end="171:39">4</literal> <operator pos:start="171:39" pos:end="171:39">-</operator> <name pos:start="171:41" pos:end="171:45">tsize</name> <operator pos:start="171:47" pos:end="171:47">-</operator> <name pos:start="171:49" pos:end="171:63">FIC_HEADER_SIZE</name></expr>;</expr_stmt>



    <if_stmt pos:start="175:5" pos:end="181:5"><if pos:start="175:5" pos:end="181:5">if <condition pos:start="175:8" pos:end="175:19">(<expr pos:start="175:9" pos:end="175:18"><name pos:start="175:9" pos:end="175:13">msize</name> <operator pos:start="175:15" pos:end="175:16">&lt;=</operator> <literal type="number" pos:start="175:18" pos:end="175:18">0</literal></expr>)</condition> <block pos:start="175:21" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:35">

        <expr_stmt pos:start="177:9" pos:end="177:74"><expr pos:start="177:9" pos:end="177:73"><call pos:start="177:9" pos:end="177:73"><name pos:start="177:9" pos:end="177:14">av_log</name><argument_list pos:start="177:15" pos:end="177:73">(<argument pos:start="177:16" pos:end="177:20"><expr pos:start="177:16" pos:end="177:20"><name pos:start="177:16" pos:end="177:20">avctx</name></expr></argument>, <argument pos:start="177:23" pos:end="177:34"><expr pos:start="177:23" pos:end="177:34"><name pos:start="177:23" pos:end="177:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:37" pos:end="177:72"><expr pos:start="177:37" pos:end="177:72"><literal type="string" pos:start="177:37" pos:end="177:72">"Not enough frame data to decode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:35">return <expr pos:start="179:16" pos:end="179:34"><name pos:start="179:16" pos:end="179:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="195:7">/*

     * Set the frametype to I initially. It will be set to P if the frame

     * has any dependencies (skip blocks). There will be a race condition

     * inside the slice decode function to set these, but we do not care.

     * since they will only ever be set to 0/P.

     */</comment>

    <expr_stmt pos:start="197:5" pos:end="197:30"><expr pos:start="197:5" pos:end="197:29"><name pos:start="197:5" pos:end="197:25"><name pos:start="197:5" pos:end="197:7">ctx</name><operator pos:start="197:8" pos:end="197:9">-&gt;</operator><name pos:start="197:10" pos:end="197:14">frame</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:25">key_frame</name></name> <operator pos:start="197:27" pos:end="197:27">=</operator> <literal type="number" pos:start="197:29" pos:end="197:29">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:46"><expr pos:start="199:5" pos:end="199:45"><name pos:start="199:5" pos:end="199:25"><name pos:start="199:5" pos:end="199:7">ctx</name><operator pos:start="199:8" pos:end="199:9">-&gt;</operator><name pos:start="199:10" pos:end="199:14">frame</name><operator pos:start="199:15" pos:end="199:16">-&gt;</operator><name pos:start="199:17" pos:end="199:25">pict_type</name></name> <operator pos:start="199:27" pos:end="199:27">=</operator> <name pos:start="199:29" pos:end="199:45">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:30">/* Allocate slice data. */</comment>

    <expr_stmt pos:start="205:5" pos:end="207:57"><expr pos:start="205:5" pos:end="207:56"><call pos:start="205:5" pos:end="207:56"><name pos:start="205:5" pos:end="205:18">av_fast_malloc</name><argument_list pos:start="205:19" pos:end="207:56">(<argument pos:start="205:20" pos:end="205:35"><expr pos:start="205:20" pos:end="205:35"><operator pos:start="205:20" pos:end="205:20">&amp;</operator><name pos:start="205:21" pos:end="205:35"><name pos:start="205:21" pos:end="205:23">ctx</name><operator pos:start="205:24" pos:end="205:25">-&gt;</operator><name pos:start="205:26" pos:end="205:35">slice_data</name></name></expr></argument>, <argument pos:start="205:38" pos:end="205:58"><expr pos:start="205:38" pos:end="205:58"><operator pos:start="205:38" pos:end="205:38">&amp;</operator><name pos:start="205:39" pos:end="205:58"><name pos:start="205:39" pos:end="205:41">ctx</name><operator pos:start="205:42" pos:end="205:43">-&gt;</operator><name pos:start="205:44" pos:end="205:58">slice_data_size</name></name></expr></argument>,

                   <argument pos:start="207:20" pos:end="207:55"><expr pos:start="207:20" pos:end="207:55"><name pos:start="207:20" pos:end="207:26">nslices</name> <operator pos:start="207:28" pos:end="207:28">*</operator> <sizeof pos:start="207:30" pos:end="207:55">sizeof<argument_list pos:start="207:36" pos:end="207:55">(<argument pos:start="207:37" pos:end="207:54"><expr pos:start="207:37" pos:end="207:54"><name pos:start="207:37" pos:end="207:54"><name pos:start="207:37" pos:end="207:39">ctx</name><operator pos:start="207:40" pos:end="207:41">-&gt;</operator><name pos:start="207:42" pos:end="207:51">slice_data</name><index pos:start="207:52" pos:end="207:54">[<expr pos:start="207:53" pos:end="207:53"><literal type="number" pos:start="207:53" pos:end="207:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="209:5" pos:end="215:5"><if pos:start="209:5" pos:end="215:5">if <condition pos:start="209:8" pos:end="209:30">(<expr pos:start="209:9" pos:end="209:29"><operator pos:start="209:9" pos:end="209:9">!</operator><name pos:start="209:10" pos:end="209:29"><name pos:start="209:10" pos:end="209:12">ctx</name><operator pos:start="209:13" pos:end="209:14">-&gt;</operator><name pos:start="209:15" pos:end="209:29">slice_data_size</name></name></expr>)</condition> <block pos:start="209:32" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:31">

        <expr_stmt pos:start="211:9" pos:end="211:72"><expr pos:start="211:9" pos:end="211:71"><call pos:start="211:9" pos:end="211:71"><name pos:start="211:9" pos:end="211:14">av_log</name><argument_list pos:start="211:15" pos:end="211:71">(<argument pos:start="211:16" pos:end="211:20"><expr pos:start="211:16" pos:end="211:20"><name pos:start="211:16" pos:end="211:20">avctx</name></expr></argument>, <argument pos:start="211:23" pos:end="211:34"><expr pos:start="211:23" pos:end="211:34"><name pos:start="211:23" pos:end="211:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:37" pos:end="211:70"><expr pos:start="211:37" pos:end="211:70"><literal type="string" pos:start="211:37" pos:end="211:70">"Could not allocate slice data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="213:9" pos:end="213:31">return <expr pos:start="213:16" pos:end="213:30"><call pos:start="213:16" pos:end="213:30"><name pos:start="213:16" pos:end="213:22">AVERROR</name><argument_list pos:start="213:23" pos:end="213:30">(<argument pos:start="213:24" pos:end="213:29"><expr pos:start="213:24" pos:end="213:29"><name pos:start="213:24" pos:end="213:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:69"><expr pos:start="217:5" pos:end="217:68"><call pos:start="217:5" pos:end="217:68"><name pos:start="217:5" pos:end="217:10">memset</name><argument_list pos:start="217:11" pos:end="217:68">(<argument pos:start="217:12" pos:end="217:26"><expr pos:start="217:12" pos:end="217:26"><name pos:start="217:12" pos:end="217:26"><name pos:start="217:12" pos:end="217:14">ctx</name><operator pos:start="217:15" pos:end="217:16">-&gt;</operator><name pos:start="217:17" pos:end="217:26">slice_data</name></name></expr></argument>, <argument pos:start="217:29" pos:end="217:29"><expr pos:start="217:29" pos:end="217:29"><literal type="number" pos:start="217:29" pos:end="217:29">0</literal></expr></argument>, <argument pos:start="217:32" pos:end="217:67"><expr pos:start="217:32" pos:end="217:67"><name pos:start="217:32" pos:end="217:38">nslices</name> <operator pos:start="217:40" pos:end="217:40">*</operator> <sizeof pos:start="217:42" pos:end="217:67">sizeof<argument_list pos:start="217:48" pos:end="217:67">(<argument pos:start="217:49" pos:end="217:66"><expr pos:start="217:49" pos:end="217:66"><name pos:start="217:49" pos:end="217:66"><name pos:start="217:49" pos:end="217:51">ctx</name><operator pos:start="217:52" pos:end="217:53">-&gt;</operator><name pos:start="217:54" pos:end="217:63">slice_data</name><index pos:start="217:64" pos:end="217:66">[<expr pos:start="217:65" pos:end="217:65"><literal type="number" pos:start="217:65" pos:end="217:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="221:5" pos:end="273:5">for <control pos:start="221:9" pos:end="221:45">(<init pos:start="221:10" pos:end="221:19"><expr pos:start="221:10" pos:end="221:18"><name pos:start="221:10" pos:end="221:14">slice</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <literal type="number" pos:start="221:18" pos:end="221:18">0</literal></expr>;</init> <condition pos:start="221:21" pos:end="221:36"><expr pos:start="221:21" pos:end="221:35"><name pos:start="221:21" pos:end="221:25">slice</name> <operator pos:start="221:27" pos:end="221:27">&lt;</operator> <name pos:start="221:29" pos:end="221:35">nslices</name></expr>;</condition> <incr pos:start="221:38" pos:end="221:44"><expr pos:start="221:38" pos:end="221:44"><name pos:start="221:38" pos:end="221:42">slice</name><operator pos:start="221:43" pos:end="221:44">++</operator></expr></incr>)</control> <block pos:start="221:47" pos:end="273:5">{<block_content pos:start="223:9" pos:end="271:48">

        <decl_stmt pos:start="223:9" pos:end="223:80"><decl pos:start="223:9" pos:end="223:79"><type pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:16">unsigned</name></type> <name pos:start="223:18" pos:end="223:26">slice_off</name> <init pos:start="223:28" pos:end="223:79">= <expr pos:start="223:30" pos:end="223:79"><call pos:start="223:30" pos:end="223:79"><name pos:start="223:30" pos:end="223:36">AV_RB32</name><argument_list pos:start="223:37" pos:end="223:79">(<argument pos:start="223:38" pos:end="223:78"><expr pos:start="223:38" pos:end="223:78"><name pos:start="223:38" pos:end="223:40">src</name> <operator pos:start="223:42" pos:end="223:42">+</operator> <name pos:start="223:44" pos:end="223:48">tsize</name> <operator pos:start="223:50" pos:end="223:50">+</operator> <name pos:start="223:52" pos:end="223:66">FIC_HEADER_SIZE</name> <operator pos:start="223:68" pos:end="223:68">+</operator> <name pos:start="223:70" pos:end="223:74">slice</name> <operator pos:start="223:76" pos:end="223:76">*</operator> <literal type="number" pos:start="223:78" pos:end="223:78">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="225:9" pos:end="225:28"><decl pos:start="225:9" pos:end="225:27"><type pos:start="225:9" pos:end="225:16"><name pos:start="225:9" pos:end="225:16">unsigned</name></type> <name pos:start="225:18" pos:end="225:27">slice_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="227:9" pos:end="227:43"><decl pos:start="227:9" pos:end="227:42"><type pos:start="227:9" pos:end="227:11"><name pos:start="227:9" pos:end="227:11">int</name></type> <name pos:start="227:13" pos:end="227:17">y_off</name>   <init pos:start="227:21" pos:end="227:42">= <expr pos:start="227:23" pos:end="227:42"><name pos:start="227:23" pos:end="227:34"><name pos:start="227:23" pos:end="227:25">ctx</name><operator pos:start="227:26" pos:end="227:27">-&gt;</operator><name pos:start="227:28" pos:end="227:34">slice_h</name></name> <operator pos:start="227:36" pos:end="227:36">*</operator> <name pos:start="227:38" pos:end="227:42">slice</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="229:9" pos:end="229:35"><decl pos:start="229:9" pos:end="229:34"><type pos:start="229:9" pos:end="229:11"><name pos:start="229:9" pos:end="229:11">int</name></type> <name pos:start="229:13" pos:end="229:19">slice_h</name> <init pos:start="229:21" pos:end="229:34">= <expr pos:start="229:23" pos:end="229:34"><name pos:start="229:23" pos:end="229:34"><name pos:start="229:23" pos:end="229:25">ctx</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:34">slice_h</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="233:9" pos:end="239:11">/*

         * Either read the slice size, or consume all data left.

         * Also, special case the last slight height.

         */</comment>

        <if_stmt pos:start="241:9" pos:end="251:9"><if pos:start="241:9" pos:end="247:9">if <condition pos:start="241:12" pos:end="241:33">(<expr pos:start="241:13" pos:end="241:32"><name pos:start="241:13" pos:end="241:17">slice</name> <operator pos:start="241:19" pos:end="241:20">==</operator> <name pos:start="241:22" pos:end="241:28">nslices</name> <operator pos:start="241:30" pos:end="241:30">-</operator> <literal type="number" pos:start="241:32" pos:end="241:32">1</literal></expr>)</condition> <block pos:start="241:35" pos:end="247:9">{<block_content pos:start="243:13" pos:end="245:85">

            <expr_stmt pos:start="243:13" pos:end="243:33"><expr pos:start="243:13" pos:end="243:32"><name pos:start="243:13" pos:end="243:22">slice_size</name>   <operator pos:start="243:26" pos:end="243:26">=</operator> <name pos:start="243:28" pos:end="243:32">msize</name></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:85"><expr pos:start="245:13" pos:end="245:84"><name pos:start="245:13" pos:end="245:19">slice_h</name>      <operator pos:start="245:26" pos:end="245:26">=</operator> <call pos:start="245:28" pos:end="245:84"><name pos:start="245:28" pos:end="245:34">FFALIGN</name><argument_list pos:start="245:35" pos:end="245:84">(<argument pos:start="245:36" pos:end="245:79"><expr pos:start="245:36" pos:end="245:79"><name pos:start="245:36" pos:end="245:48"><name pos:start="245:36" pos:end="245:40">avctx</name><operator pos:start="245:41" pos:end="245:42">-&gt;</operator><name pos:start="245:43" pos:end="245:48">height</name></name> <operator pos:start="245:50" pos:end="245:50">-</operator> <name pos:start="245:52" pos:end="245:63"><name pos:start="245:52" pos:end="245:54">ctx</name><operator pos:start="245:55" pos:end="245:56">-&gt;</operator><name pos:start="245:57" pos:end="245:63">slice_h</name></name> <operator pos:start="245:65" pos:end="245:65">*</operator> <operator pos:start="245:67" pos:end="245:67">(</operator><name pos:start="245:68" pos:end="245:74">nslices</name> <operator pos:start="245:76" pos:end="245:76">-</operator> <literal type="number" pos:start="245:78" pos:end="245:78">1</literal><operator pos:start="245:79" pos:end="245:79">)</operator></expr></argument>, <argument pos:start="245:82" pos:end="245:83"><expr pos:start="245:82" pos:end="245:83"><literal type="number" pos:start="245:82" pos:end="245:83">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="247:11" pos:end="251:9">else <block pos:start="247:16" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:80">

            <expr_stmt pos:start="249:13" pos:end="249:80"><expr pos:start="249:13" pos:end="249:79"><name pos:start="249:13" pos:end="249:22">slice_size</name> <operator pos:start="249:24" pos:end="249:24">=</operator> <call pos:start="249:26" pos:end="249:79"><name pos:start="249:26" pos:end="249:32">AV_RB32</name><argument_list pos:start="249:33" pos:end="249:79">(<argument pos:start="249:34" pos:end="249:78"><expr pos:start="249:34" pos:end="249:78"><name pos:start="249:34" pos:end="249:36">src</name> <operator pos:start="249:38" pos:end="249:38">+</operator> <name pos:start="249:40" pos:end="249:44">tsize</name> <operator pos:start="249:46" pos:end="249:46">+</operator> <name pos:start="249:48" pos:end="249:62">FIC_HEADER_SIZE</name> <operator pos:start="249:64" pos:end="249:64">+</operator> <name pos:start="249:66" pos:end="249:70">slice</name> <operator pos:start="249:72" pos:end="249:72">*</operator> <literal type="number" pos:start="249:74" pos:end="249:76">4</literal> <operator pos:start="249:76" pos:end="249:76">+</operator> <literal type="number" pos:start="249:78" pos:end="249:78">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="255:9" pos:end="257:21"><if pos:start="255:9" pos:end="257:21">if <condition pos:start="255:12" pos:end="255:57">(<expr pos:start="255:13" pos:end="255:56"><name pos:start="255:13" pos:end="255:50"><name pos:start="255:13" pos:end="255:22">slice_size</name> <argument_list type="generic" pos:start="255:24" pos:end="255:50">&lt; <argument pos:start="255:26" pos:end="255:48"><expr pos:start="255:26" pos:end="255:48"><name pos:start="255:26" pos:end="255:34">slice_off</name> <operator pos:start="255:36" pos:end="255:37">||</operator> <name pos:start="255:39" pos:end="255:48">slice_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="255:52" pos:end="255:56">msize</name></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="257:21"><block_content pos:start="257:13" pos:end="257:21">

            <continue pos:start="257:13" pos:end="257:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="261:9" pos:end="261:32"><expr pos:start="261:9" pos:end="261:31"><name pos:start="261:9" pos:end="261:18">slice_size</name> <operator pos:start="261:20" pos:end="261:21">-=</operator> <name pos:start="261:23" pos:end="261:31">slice_off</name></expr>;</expr_stmt>



        <expr_stmt pos:start="265:9" pos:end="265:60"><expr pos:start="265:9" pos:end="265:59"><name pos:start="265:9" pos:end="265:30"><name pos:start="265:9" pos:end="265:11">ctx</name><operator pos:start="265:12" pos:end="265:13">-&gt;</operator><name pos:start="265:14" pos:end="265:23">slice_data</name><index pos:start="265:24" pos:end="265:30">[<expr pos:start="265:25" pos:end="265:29"><name pos:start="265:25" pos:end="265:29">slice</name></expr>]</index></name><operator pos:start="265:31" pos:end="265:31">.</operator><name pos:start="265:32" pos:end="265:34">src</name>      <operator pos:start="265:41" pos:end="265:41">=</operator> <name pos:start="265:43" pos:end="265:47">sdata</name> <operator pos:start="265:49" pos:end="265:49">+</operator> <name pos:start="265:51" pos:end="265:59">slice_off</name></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:53"><expr pos:start="267:9" pos:end="267:52"><name pos:start="267:9" pos:end="267:30"><name pos:start="267:9" pos:end="267:11">ctx</name><operator pos:start="267:12" pos:end="267:13">-&gt;</operator><name pos:start="267:14" pos:end="267:23">slice_data</name><index pos:start="267:24" pos:end="267:30">[<expr pos:start="267:25" pos:end="267:29"><name pos:start="267:25" pos:end="267:29">slice</name></expr>]</index></name><operator pos:start="267:31" pos:end="267:31">.</operator><name pos:start="267:32" pos:end="267:39">src_size</name> <operator pos:start="267:41" pos:end="267:41">=</operator> <name pos:start="267:43" pos:end="267:52">slice_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:50"><expr pos:start="269:9" pos:end="269:49"><name pos:start="269:9" pos:end="269:30"><name pos:start="269:9" pos:end="269:11">ctx</name><operator pos:start="269:12" pos:end="269:13">-&gt;</operator><name pos:start="269:14" pos:end="269:23">slice_data</name><index pos:start="269:24" pos:end="269:30">[<expr pos:start="269:25" pos:end="269:29"><name pos:start="269:25" pos:end="269:29">slice</name></expr>]</index></name><operator pos:start="269:31" pos:end="269:31">.</operator><name pos:start="269:32" pos:end="269:38">slice_h</name>  <operator pos:start="269:41" pos:end="269:41">=</operator> <name pos:start="269:43" pos:end="269:49">slice_h</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:48"><expr pos:start="271:9" pos:end="271:47"><name pos:start="271:9" pos:end="271:30"><name pos:start="271:9" pos:end="271:11">ctx</name><operator pos:start="271:12" pos:end="271:13">-&gt;</operator><name pos:start="271:14" pos:end="271:23">slice_data</name><index pos:start="271:24" pos:end="271:30">[<expr pos:start="271:25" pos:end="271:29"><name pos:start="271:25" pos:end="271:29">slice</name></expr>]</index></name><operator pos:start="271:31" pos:end="271:31">.</operator><name pos:start="271:32" pos:end="271:36">y_off</name>    <operator pos:start="271:41" pos:end="271:41">=</operator> <name pos:start="271:43" pos:end="271:47">y_off</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="277:5" pos:end="281:19"><if pos:start="277:5" pos:end="281:19">if <condition pos:start="277:8" pos:end="279:78">(<expr pos:start="277:9" pos:end="279:77"><operator pos:start="277:9" pos:end="277:9">(</operator><name pos:start="277:10" pos:end="277:12">ret</name> <operator pos:start="277:14" pos:end="277:14">=</operator> <call pos:start="277:16" pos:end="279:72"><name pos:start="277:16" pos:end="277:29"><name pos:start="277:16" pos:end="277:20">avctx</name><operator pos:start="277:21" pos:end="277:22">-&gt;</operator><name pos:start="277:23" pos:end="277:29">execute</name></name><argument_list pos:start="277:30" pos:end="279:72">(<argument pos:start="277:31" pos:end="277:35"><expr pos:start="277:31" pos:end="277:35"><name pos:start="277:31" pos:end="277:35">avctx</name></expr></argument>, <argument pos:start="277:38" pos:end="277:53"><expr pos:start="277:38" pos:end="277:53"><name pos:start="277:38" pos:end="277:53">fic_decode_slice</name></expr></argument>, <argument pos:start="277:56" pos:end="277:70"><expr pos:start="277:56" pos:end="277:70"><name pos:start="277:56" pos:end="277:70"><name pos:start="277:56" pos:end="277:58">ctx</name><operator pos:start="277:59" pos:end="277:60">-&gt;</operator><name pos:start="277:61" pos:end="277:70">slice_data</name></name></expr></argument>,

                              <argument pos:start="279:31" pos:end="279:34"><expr pos:start="279:31" pos:end="279:34"><name pos:start="279:31" pos:end="279:34">NULL</name></expr></argument>, <argument pos:start="279:37" pos:end="279:43"><expr pos:start="279:37" pos:end="279:43"><name pos:start="279:37" pos:end="279:43">nslices</name></expr></argument>, <argument pos:start="279:46" pos:end="279:71"><expr pos:start="279:46" pos:end="279:71"><sizeof pos:start="279:46" pos:end="279:71">sizeof<argument_list pos:start="279:52" pos:end="279:71">(<argument pos:start="279:53" pos:end="279:70"><expr pos:start="279:53" pos:end="279:70"><name pos:start="279:53" pos:end="279:70"><name pos:start="279:53" pos:end="279:55">ctx</name><operator pos:start="279:56" pos:end="279:57">-&gt;</operator><name pos:start="279:58" pos:end="279:67">slice_data</name><index pos:start="279:68" pos:end="279:70">[<expr pos:start="279:69" pos:end="279:69"><literal type="number" pos:start="279:69" pos:end="279:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="279:73" pos:end="279:73">)</operator> <operator pos:start="279:75" pos:end="279:75">&lt;</operator> <literal type="number" pos:start="279:77" pos:end="279:77">0</literal></expr>)</condition><block type="pseudo" pos:start="281:9" pos:end="281:19"><block_content pos:start="281:9" pos:end="281:19">

        <return pos:start="281:9" pos:end="281:19">return <expr pos:start="281:16" pos:end="281:18"><name pos:start="281:16" pos:end="281:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="285:5" pos:end="285:37"><expr pos:start="285:5" pos:end="285:36"><call pos:start="285:5" pos:end="285:36"><name pos:start="285:5" pos:end="285:17">av_frame_free</name><argument_list pos:start="285:18" pos:end="285:36">(<argument pos:start="285:19" pos:end="285:35"><expr pos:start="285:19" pos:end="285:35"><operator pos:start="285:19" pos:end="285:19">&amp;</operator><name pos:start="285:20" pos:end="285:35"><name pos:start="285:20" pos:end="285:22">ctx</name><operator pos:start="285:23" pos:end="285:24">-&gt;</operator><name pos:start="285:25" pos:end="285:35">final_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:50"><expr pos:start="287:5" pos:end="287:49"><name pos:start="287:5" pos:end="287:20"><name pos:start="287:5" pos:end="287:7">ctx</name><operator pos:start="287:8" pos:end="287:9">-&gt;</operator><name pos:start="287:10" pos:end="287:20">final_frame</name></name> <operator pos:start="287:22" pos:end="287:22">=</operator> <call pos:start="287:24" pos:end="287:49"><name pos:start="287:24" pos:end="287:37">av_frame_clone</name><argument_list pos:start="287:38" pos:end="287:49">(<argument pos:start="287:39" pos:end="287:48"><expr pos:start="287:39" pos:end="287:48"><name pos:start="287:39" pos:end="287:48"><name pos:start="287:39" pos:end="287:41">ctx</name><operator pos:start="287:42" pos:end="287:43">-&gt;</operator><name pos:start="287:44" pos:end="287:48">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="289:5" pos:end="295:5"><if pos:start="289:5" pos:end="295:5">if <condition pos:start="289:8" pos:end="289:26">(<expr pos:start="289:9" pos:end="289:25"><operator pos:start="289:9" pos:end="289:9">!</operator><name pos:start="289:10" pos:end="289:25"><name pos:start="289:10" pos:end="289:12">ctx</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:25">final_frame</name></name></expr>)</condition> <block pos:start="289:28" pos:end="295:5">{<block_content pos:start="291:9" pos:end="293:31">

        <expr_stmt pos:start="291:9" pos:end="291:71"><expr pos:start="291:9" pos:end="291:70"><call pos:start="291:9" pos:end="291:70"><name pos:start="291:9" pos:end="291:14">av_log</name><argument_list pos:start="291:15" pos:end="291:70">(<argument pos:start="291:16" pos:end="291:20"><expr pos:start="291:16" pos:end="291:20"><name pos:start="291:16" pos:end="291:20">avctx</name></expr></argument>, <argument pos:start="291:23" pos:end="291:34"><expr pos:start="291:23" pos:end="291:34"><name pos:start="291:23" pos:end="291:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="291:37" pos:end="291:69"><expr pos:start="291:37" pos:end="291:69"><literal type="string" pos:start="291:37" pos:end="291:69">"Could not clone frame buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="293:9" pos:end="293:31">return <expr pos:start="293:16" pos:end="293:30"><call pos:start="293:16" pos:end="293:30"><name pos:start="293:16" pos:end="293:22">AVERROR</name><argument_list pos:start="293:23" pos:end="293:30">(<argument pos:start="293:24" pos:end="293:29"><expr pos:start="293:24" pos:end="293:29"><name pos:start="293:24" pos:end="293:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="299:5" pos:end="299:50">/* Make sure we use a user-supplied buffer. */</comment>

    <if_stmt pos:start="301:5" pos:end="307:5"><if pos:start="301:5" pos:end="307:5">if <condition pos:start="301:8" pos:end="301:61">(<expr pos:start="301:9" pos:end="301:60"><operator pos:start="301:9" pos:end="301:9">(</operator><name pos:start="301:10" pos:end="301:12">ret</name> <operator pos:start="301:14" pos:end="301:14">=</operator> <call pos:start="301:16" pos:end="301:55"><name pos:start="301:16" pos:end="301:30">ff_reget_buffer</name><argument_list pos:start="301:31" pos:end="301:55">(<argument pos:start="301:32" pos:end="301:36"><expr pos:start="301:32" pos:end="301:36"><name pos:start="301:32" pos:end="301:36">avctx</name></expr></argument>, <argument pos:start="301:39" pos:end="301:54"><expr pos:start="301:39" pos:end="301:54"><name pos:start="301:39" pos:end="301:54"><name pos:start="301:39" pos:end="301:41">ctx</name><operator pos:start="301:42" pos:end="301:43">-&gt;</operator><name pos:start="301:44" pos:end="301:54">final_frame</name></name></expr></argument>)</argument_list></call><operator pos:start="301:56" pos:end="301:56">)</operator> <operator pos:start="301:58" pos:end="301:58">&lt;</operator> <literal type="number" pos:start="301:60" pos:end="301:60">0</literal></expr>)</condition> <block pos:start="301:63" pos:end="307:5">{<block_content pos:start="303:9" pos:end="305:19">

        <expr_stmt pos:start="303:9" pos:end="303:72"><expr pos:start="303:9" pos:end="303:71"><call pos:start="303:9" pos:end="303:71"><name pos:start="303:9" pos:end="303:14">av_log</name><argument_list pos:start="303:15" pos:end="303:71">(<argument pos:start="303:16" pos:end="303:20"><expr pos:start="303:16" pos:end="303:20"><name pos:start="303:16" pos:end="303:20">avctx</name></expr></argument>, <argument pos:start="303:23" pos:end="303:34"><expr pos:start="303:23" pos:end="303:34"><name pos:start="303:23" pos:end="303:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="303:37" pos:end="303:70"><expr pos:start="303:37" pos:end="303:70"><literal type="string" pos:start="303:37" pos:end="303:70">"Could not make frame writable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="305:9" pos:end="305:19">return <expr pos:start="305:16" pos:end="305:18"><name pos:start="305:16" pos:end="305:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="311:5" pos:end="311:22">/* Draw cursor. */</comment>

    <if_stmt pos:start="313:5" pos:end="319:5"><if pos:start="313:5" pos:end="319:5">if <condition pos:start="313:8" pos:end="313:21">(<expr pos:start="313:9" pos:end="313:20"><operator pos:start="313:9" pos:end="313:9">!</operator><name pos:start="313:10" pos:end="313:20">skip_cursor</name></expr>)</condition> <block pos:start="313:23" pos:end="319:5">{<block_content pos:start="315:9" pos:end="317:45">

        <expr_stmt pos:start="315:9" pos:end="315:55"><expr pos:start="315:9" pos:end="315:54"><call pos:start="315:9" pos:end="315:54"><name pos:start="315:9" pos:end="315:14">memcpy</name><argument_list pos:start="315:15" pos:end="315:54">(<argument pos:start="315:16" pos:end="315:30"><expr pos:start="315:16" pos:end="315:30"><name pos:start="315:16" pos:end="315:30"><name pos:start="315:16" pos:end="315:18">ctx</name><operator pos:start="315:19" pos:end="315:20">-&gt;</operator><name pos:start="315:21" pos:end="315:30">cursor_buf</name></name></expr></argument>, <argument pos:start="315:33" pos:end="315:40"><expr pos:start="315:33" pos:end="315:40"><name pos:start="315:33" pos:end="315:35">src</name> <operator pos:start="315:37" pos:end="315:37">+</operator> <literal type="number" pos:start="315:39" pos:end="315:40">59</literal></expr></argument>, <argument pos:start="315:43" pos:end="315:53"><expr pos:start="315:43" pos:end="315:53"><literal type="number" pos:start="315:43" pos:end="315:44">32</literal> <operator pos:start="315:46" pos:end="315:46">*</operator> <literal type="number" pos:start="315:48" pos:end="315:49">32</literal> <operator pos:start="315:51" pos:end="315:51">*</operator> <literal type="number" pos:start="315:53" pos:end="315:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:45"><expr pos:start="317:9" pos:end="317:44"><call pos:start="317:9" pos:end="317:44"><name pos:start="317:9" pos:end="317:23">fic_draw_cursor</name><argument_list pos:start="317:24" pos:end="317:44">(<argument pos:start="317:25" pos:end="317:29"><expr pos:start="317:25" pos:end="317:29"><name pos:start="317:25" pos:end="317:29">avctx</name></expr></argument>, <argument pos:start="317:32" pos:end="317:36"><expr pos:start="317:32" pos:end="317:36"><name pos:start="317:32" pos:end="317:36">cur_x</name></expr></argument>, <argument pos:start="317:39" pos:end="317:43"><expr pos:start="317:39" pos:end="317:43"><name pos:start="317:39" pos:end="317:43">cur_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="323:1" pos:end="323:5"><name pos:start="323:1" pos:end="323:4">skip</name>:</label>

    <expr_stmt pos:start="325:5" pos:end="325:19"><expr pos:start="325:5" pos:end="325:18"><operator pos:start="325:5" pos:end="325:5">*</operator><name pos:start="325:6" pos:end="325:14">got_frame</name> <operator pos:start="325:16" pos:end="325:16">=</operator> <literal type="number" pos:start="325:18" pos:end="325:18">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="327:5" pos:end="329:19"><if pos:start="327:5" pos:end="329:19">if <condition pos:start="327:8" pos:end="327:57">(<expr pos:start="327:9" pos:end="327:56"><operator pos:start="327:9" pos:end="327:9">(</operator><name pos:start="327:10" pos:end="327:12">ret</name> <operator pos:start="327:14" pos:end="327:14">=</operator> <call pos:start="327:16" pos:end="327:51"><name pos:start="327:16" pos:end="327:27">av_frame_ref</name><argument_list pos:start="327:28" pos:end="327:51">(<argument pos:start="327:29" pos:end="327:32"><expr pos:start="327:29" pos:end="327:32"><name pos:start="327:29" pos:end="327:32">data</name></expr></argument>, <argument pos:start="327:35" pos:end="327:50"><expr pos:start="327:35" pos:end="327:50"><name pos:start="327:35" pos:end="327:50"><name pos:start="327:35" pos:end="327:37">ctx</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:50">final_frame</name></name></expr></argument>)</argument_list></call><operator pos:start="327:52" pos:end="327:52">)</operator> <operator pos:start="327:54" pos:end="327:54">&lt;</operator> <literal type="number" pos:start="327:56" pos:end="327:56">0</literal></expr>)</condition><block type="pseudo" pos:start="329:9" pos:end="329:19"><block_content pos:start="329:9" pos:end="329:19">

        <return pos:start="329:9" pos:end="329:19">return <expr pos:start="329:16" pos:end="329:18"><name pos:start="329:16" pos:end="329:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="333:5" pos:end="333:23">return <expr pos:start="333:12" pos:end="333:22"><name pos:start="333:12" pos:end="333:22"><name pos:start="333:12" pos:end="333:16">avpkt</name><operator pos:start="333:17" pos:end="333:18">-&gt;</operator><name pos:start="333:19" pos:end="333:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
