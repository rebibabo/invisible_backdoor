<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17460.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_block_passwd</name><parameter_list pos:start="1:22" pos:end="5:57">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:26">bool</name></type> <name pos:start="1:28" pos:end="1:37">has_device</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:57">device</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:40"><decl pos:start="3:23" pos:end="3:40"><type pos:start="3:23" pos:end="3:40"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:40">has_node_name</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:63"><decl pos:start="3:43" pos:end="3:63"><type pos:start="3:43" pos:end="3:63"><specifier pos:start="3:43" pos:end="3:47">const</specifier> <name pos:start="3:49" pos:end="3:52">char</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:63">node_name</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:42"><decl pos:start="5:23" pos:end="5:42"><type pos:start="5:23" pos:end="5:42"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:32">char</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:42">password</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:49">Error</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier><modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="49:1">{<block_content pos:start="9:5" pos:end="47:5">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="21:36"><expr pos:start="17:5" pos:end="21:35"><name pos:start="17:5" pos:end="17:6">bs</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="21:35"><name pos:start="17:10" pos:end="17:23">bdrv_lookup_bs</name><argument_list pos:start="17:24" pos:end="21:35">(<argument pos:start="17:25" pos:end="17:50"><expr pos:start="17:25" pos:end="17:50"><ternary pos:start="17:25" pos:end="17:50"><condition pos:start="17:25" pos:end="17:36"><expr pos:start="17:25" pos:end="17:34"><name pos:start="17:25" pos:end="17:34">has_device</name></expr> ?</condition><then pos:start="17:38" pos:end="17:43"> <expr pos:start="17:38" pos:end="17:43"><name pos:start="17:38" pos:end="17:43">device</name></expr> </then><else pos:start="17:45" pos:end="17:50">: <expr pos:start="17:47" pos:end="17:50"><name pos:start="17:47" pos:end="17:50">NULL</name></expr></else></ternary></expr></argument>,

                        <argument pos:start="19:25" pos:end="19:56"><expr pos:start="19:25" pos:end="19:56"><ternary pos:start="19:25" pos:end="19:56"><condition pos:start="19:25" pos:end="19:39"><expr pos:start="19:25" pos:end="19:37"><name pos:start="19:25" pos:end="19:37">has_node_name</name></expr> ?</condition><then pos:start="19:41" pos:end="19:49"> <expr pos:start="19:41" pos:end="19:49"><name pos:start="19:41" pos:end="19:49">node_name</name></expr> </then><else pos:start="19:51" pos:end="19:56">: <expr pos:start="19:53" pos:end="19:56"><name pos:start="19:53" pos:end="19:56">NULL</name></expr></else></ternary></expr></argument>,

                        <argument pos:start="21:25" pos:end="21:34"><expr pos:start="21:25" pos:end="21:34"><operator pos:start="21:25" pos:end="21:25">&amp;</operator><name pos:start="21:26" pos:end="21:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:17">local_err</name></expr>)</condition> <block pos:start="23:20" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:15">

        <expr_stmt pos:start="25:9" pos:end="25:41"><expr pos:start="25:9" pos:end="25:40"><call pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:23">error_propagate</name><argument_list pos:start="25:24" pos:end="25:40">(<argument pos:start="25:25" pos:end="25:28"><expr pos:start="25:25" pos:end="25:28"><name pos:start="25:25" pos:end="25:28">errp</name></expr></argument>, <argument pos:start="25:31" pos:end="25:39"><expr pos:start="25:31" pos:end="25:39"><name pos:start="25:31" pos:end="25:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:7">err</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:36"><name pos:start="33:11" pos:end="33:22">bdrv_set_key</name><argument_list pos:start="33:23" pos:end="33:36">(<argument pos:start="33:24" pos:end="33:25"><expr pos:start="33:24" pos:end="33:25"><name pos:start="33:24" pos:end="33:25">bs</name></expr></argument>, <argument pos:start="33:28" pos:end="33:35"><expr pos:start="33:28" pos:end="33:35"><name pos:start="33:28" pos:end="33:35">password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="47:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:11">err</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:22">EINVAL</name></expr>)</condition> <block pos:start="35:25" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:77"><expr pos:start="37:9" pos:end="37:76"><call pos:start="37:9" pos:end="37:76"><name pos:start="37:9" pos:end="37:17">error_set</name><argument_list pos:start="37:18" pos:end="37:76">(<argument pos:start="37:19" pos:end="37:22"><expr pos:start="37:19" pos:end="37:22"><name pos:start="37:19" pos:end="37:22">errp</name></expr></argument>, <argument pos:start="37:25" pos:end="37:49"><expr pos:start="37:25" pos:end="37:49"><name pos:start="37:25" pos:end="37:49">QERR_DEVICE_NOT_ENCRYPTED</name></expr></argument>, <argument pos:start="37:52" pos:end="37:75"><expr pos:start="37:52" pos:end="37:75"><call pos:start="37:52" pos:end="37:75"><name pos:start="37:52" pos:end="37:71">bdrv_get_device_name</name><argument_list pos:start="37:72" pos:end="37:75">(<argument pos:start="37:73" pos:end="37:74"><expr pos:start="37:73" pos:end="37:74"><name pos:start="37:73" pos:end="37:74">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="47:5">else if <condition pos:start="41:15" pos:end="41:23">(<expr pos:start="41:16" pos:end="41:22"><name pos:start="41:16" pos:end="41:18">err</name> <operator pos:start="41:20" pos:end="41:20">&lt;</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>)</condition> <block pos:start="41:25" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:17">error_set</name><argument_list pos:start="43:18" pos:end="43:46">(<argument pos:start="43:19" pos:end="43:22"><expr pos:start="43:19" pos:end="43:22"><name pos:start="43:19" pos:end="43:22">errp</name></expr></argument>, <argument pos:start="43:25" pos:end="43:45"><expr pos:start="43:25" pos:end="43:45"><name pos:start="43:25" pos:end="43:45">QERR_INVALID_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
