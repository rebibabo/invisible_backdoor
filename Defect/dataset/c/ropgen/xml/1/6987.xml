<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6987.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">ccid_handle_bulk_out</name><parameter_list pos:start="1:33" pos:end="1:63">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:45">USBCCIDState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:59">USBPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:11">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CCID_Header</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:28">ccid_header</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:59">(<expr pos:start="9:9" pos:end="9:58"><name pos:start="9:9" pos:end="9:19"><name pos:start="9:9" pos:end="9:9">p</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:14">iov</name><operator pos:start="9:15" pos:end="9:15">.</operator><name pos:start="9:16" pos:end="9:19">size</name></name> <operator pos:start="9:21" pos:end="9:21">+</operator> <name pos:start="9:23" pos:end="9:37"><name pos:start="9:23" pos:end="9:23">s</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:37">bulk_out_pos</name></name> <operator pos:start="9:39" pos:end="9:39">&gt;</operator> <name pos:start="9:41" pos:end="9:58">BULK_OUT_DATA_SIZE</name></expr>)</condition> <block pos:start="9:61" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:17">

        <goto pos:start="11:9" pos:end="11:17">goto <name pos:start="11:14" pos:end="11:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:72"><expr pos:start="15:5" pos:end="15:71"><call pos:start="15:5" pos:end="15:71"><name pos:start="15:5" pos:end="15:19">usb_packet_copy</name><argument_list pos:start="15:20" pos:end="15:71">(<argument pos:start="15:21" pos:end="15:21"><expr pos:start="15:21" pos:end="15:21"><name pos:start="15:21" pos:end="15:21">p</name></expr></argument>, <argument pos:start="15:24" pos:end="15:57"><expr pos:start="15:24" pos:end="15:57"><name pos:start="15:24" pos:end="15:39"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:39">bulk_out_data</name></name> <operator pos:start="15:41" pos:end="15:41">+</operator> <name pos:start="15:43" pos:end="15:57"><name pos:start="15:43" pos:end="15:43">s</name><operator pos:start="15:44" pos:end="15:45">-&gt;</operator><name pos:start="15:46" pos:end="15:57">bulk_out_pos</name></name></expr></argument>, <argument pos:start="15:60" pos:end="15:70"><expr pos:start="15:60" pos:end="15:70"><name pos:start="15:60" pos:end="15:70"><name pos:start="15:60" pos:end="15:60">p</name><operator pos:start="15:61" pos:end="15:62">-&gt;</operator><name pos:start="15:63" pos:end="15:65">iov</name><operator pos:start="15:66" pos:end="15:66">.</operator><name pos:start="15:67" pos:end="15:70">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:19">bulk_out_pos</name></name> <operator pos:start="17:21" pos:end="17:22">+=</operator> <name pos:start="17:24" pos:end="17:34"><name pos:start="17:24" pos:end="17:24">p</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:29">iov</name><operator pos:start="17:30" pos:end="17:30">.</operator><name pos:start="17:31" pos:end="17:34">size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:23">bulk_out_pos</name></name> <operator pos:start="19:25" pos:end="19:25">&lt;</operator> <literal type="number" pos:start="19:27" pos:end="19:28">10</literal></expr>)</condition> <block pos:start="19:31" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:17">

        <expr_stmt pos:start="21:9" pos:end="21:59"><expr pos:start="21:9" pos:end="21:58"><call pos:start="21:9" pos:end="21:58"><name pos:start="21:9" pos:end="21:15">DPRINTF</name><argument_list pos:start="21:16" pos:end="21:58">(<argument pos:start="21:17" pos:end="21:17"><expr pos:start="21:17" pos:end="21:17"><name pos:start="21:17" pos:end="21:17">s</name></expr></argument>, <argument pos:start="21:20" pos:end="21:20"><expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">1</literal></expr></argument>, <argument pos:start="21:23" pos:end="21:47"><expr pos:start="21:23" pos:end="21:47"><literal type="string" pos:start="21:23" pos:end="21:47">"%s: header incomplete\n"</literal></expr></argument>, <argument pos:start="21:50" pos:end="21:57"><expr pos:start="21:50" pos:end="21:57"><name pos:start="21:50" pos:end="21:57">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="23:9" pos:end="23:17">goto <name pos:start="23:14" pos:end="23:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:15">ccid_header</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <operator pos:start="29:19" pos:end="29:19">(</operator><name pos:start="29:20" pos:end="29:30">CCID_Header</name> <operator pos:start="29:32" pos:end="29:32">*</operator><operator pos:start="29:33" pos:end="29:33">)</operator><name pos:start="29:34" pos:end="29:49"><name pos:start="29:34" pos:end="29:34">s</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:49">bulk_out_data</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:44">(<expr pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:9">p</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:14">iov</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:19">size</name></name> <operator pos:start="31:21" pos:end="31:22">==</operator> <name pos:start="31:24" pos:end="31:43">CCID_MAX_PACKET_SIZE</name></expr>)</condition> <block pos:start="31:46" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:15">

        <expr_stmt pos:start="33:9" pos:end="37:48"><expr pos:start="33:9" pos:end="37:47"><call pos:start="33:9" pos:end="37:47"><name pos:start="33:9" pos:end="33:15">DPRINTF</name><argument_list pos:start="33:16" pos:end="37:47">(<argument pos:start="33:17" pos:end="33:17"><expr pos:start="33:17" pos:end="33:17"><name pos:start="33:17" pos:end="33:17">s</name></expr></argument>, <argument pos:start="33:20" pos:end="33:28"><expr pos:start="33:20" pos:end="33:28"><name pos:start="33:20" pos:end="33:28">D_VERBOSE</name></expr></argument>,

            <argument pos:start="35:13" pos:end="35:66"><expr pos:start="35:13" pos:end="35:66"><literal type="string" pos:start="35:13" pos:end="35:66">"usb-ccid: bulk_in: expecting more packets (%zd/%d)\n"</literal></expr></argument>,

            <argument pos:start="37:13" pos:end="37:23"><expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:13">p</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:18">iov</name><operator pos:start="37:19" pos:end="37:19">.</operator><name pos:start="37:20" pos:end="37:23">size</name></name></expr></argument>, <argument pos:start="37:26" pos:end="37:46"><expr pos:start="37:26" pos:end="37:46"><name pos:start="37:26" pos:end="37:46"><name pos:start="37:26" pos:end="37:36">ccid_header</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:46">dwLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="49:65"><expr pos:start="45:5" pos:end="49:64"><call pos:start="45:5" pos:end="49:64"><name pos:start="45:5" pos:end="45:11">DPRINTF</name><argument_list pos:start="45:12" pos:end="49:64">(<argument pos:start="45:13" pos:end="45:13"><expr pos:start="45:13" pos:end="45:13"><name pos:start="45:13" pos:end="45:13">s</name></expr></argument>, <argument pos:start="45:16" pos:end="45:26"><expr pos:start="45:16" pos:end="45:26"><name pos:start="45:16" pos:end="45:26">D_MORE_INFO</name></expr></argument>, <argument pos:start="45:29" pos:end="45:40"><expr pos:start="45:29" pos:end="45:40"><literal type="string" pos:start="45:29" pos:end="45:40">"%s %x %s\n"</literal></expr></argument>, <argument pos:start="45:43" pos:end="45:50"><expr pos:start="45:43" pos:end="45:50"><name pos:start="45:43" pos:end="45:50">__func__</name></expr></argument>,

            <argument pos:start="47:13" pos:end="47:37"><expr pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:23">ccid_header</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:37">bMessageType</name></name></expr></argument>,

            <argument pos:start="49:13" pos:end="49:63"><expr pos:start="49:13" pos:end="49:63"><call pos:start="49:13" pos:end="49:63"><name pos:start="49:13" pos:end="49:36">ccid_message_type_to_str</name><argument_list pos:start="49:37" pos:end="49:63">(<argument pos:start="49:38" pos:end="49:62"><expr pos:start="49:38" pos:end="49:62"><name pos:start="49:38" pos:end="49:62"><name pos:start="49:38" pos:end="49:48">ccid_header</name><operator pos:start="49:49" pos:end="49:50">-&gt;</operator><name pos:start="49:51" pos:end="49:62">bMessageType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="51:5" pos:end="153:5">switch <condition pos:start="51:12" pos:end="51:38">(<expr pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:23">ccid_header</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:37">bMessageType</name></name></expr>)</condition> <block pos:start="51:40" pos:end="153:5">{<block_content pos:start="53:5" pos:end="151:14">

    <case pos:start="53:5" pos:end="53:51">case <expr pos:start="53:10" pos:end="53:50"><name pos:start="53:10" pos:end="53:50">CCID_MESSAGE_TYPE_PC_to_RDR_GetSlotStatus</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><call pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:30">ccid_write_slot_status</name><argument_list pos:start="55:31" pos:end="55:46">(<argument pos:start="55:32" pos:end="55:32"><expr pos:start="55:32" pos:end="55:32"><name pos:start="55:32" pos:end="55:32">s</name></expr></argument>, <argument pos:start="55:35" pos:end="55:45"><expr pos:start="55:35" pos:end="55:45"><name pos:start="55:35" pos:end="55:45">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:48">case <expr pos:start="59:10" pos:end="59:47"><name pos:start="59:10" pos:end="59:47">CCID_MESSAGE_TYPE_PC_to_RDR_IccPowerOn</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="63:66"><expr pos:start="61:9" pos:end="63:65"><call pos:start="61:9" pos:end="63:65"><name pos:start="61:9" pos:end="61:15">DPRINTF</name><argument_list pos:start="61:16" pos:end="63:65">(<argument pos:start="61:17" pos:end="61:17"><expr pos:start="61:17" pos:end="61:17"><name pos:start="61:17" pos:end="61:17">s</name></expr></argument>, <argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">1</literal></expr></argument>, <argument pos:start="61:23" pos:end="61:41"><expr pos:start="61:23" pos:end="61:41"><literal type="string" pos:start="61:23" pos:end="61:41">"%s: PowerOn: %d\n"</literal></expr></argument>, <argument pos:start="61:44" pos:end="61:51"><expr pos:start="61:44" pos:end="61:51"><name pos:start="61:44" pos:end="61:51">__func__</name></expr></argument>,

                <argument pos:start="63:17" pos:end="63:64"><expr pos:start="63:17" pos:end="63:64"><operator pos:start="63:17" pos:end="63:17">(</operator><operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:33">CCID_IccPowerOn</name> <operator pos:start="63:35" pos:end="63:35">*</operator><operator pos:start="63:36" pos:end="63:36">)</operator><operator pos:start="63:37" pos:end="63:37">(</operator><name pos:start="63:38" pos:end="63:48">ccid_header</name><operator pos:start="63:49" pos:end="63:49">)</operator><operator pos:start="63:50" pos:end="63:50">)</operator><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:64">bPowerSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:18">powered</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:25">true</name></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:35">(<expr pos:start="67:13" pos:end="67:34"><operator pos:start="67:13" pos:end="67:13">!</operator><call pos:start="67:14" pos:end="67:34"><name pos:start="67:14" pos:end="67:31">ccid_card_inserted</name><argument_list pos:start="67:32" pos:end="67:34">(<argument pos:start="67:33" pos:end="67:33"><expr pos:start="67:33" pos:end="67:33"><name pos:start="67:33" pos:end="67:33">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:37" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:56">

            <expr_stmt pos:start="69:13" pos:end="69:56"><expr pos:start="69:13" pos:end="69:55"><call pos:start="69:13" pos:end="69:55"><name pos:start="69:13" pos:end="69:36">ccid_report_error_failed</name><argument_list pos:start="69:37" pos:end="69:55">(<argument pos:start="69:38" pos:end="69:38"><expr pos:start="69:38" pos:end="69:38"><name pos:start="69:38" pos:end="69:38">s</name></expr></argument>, <argument pos:start="69:41" pos:end="69:54"><expr pos:start="69:41" pos:end="69:54"><name pos:start="69:41" pos:end="69:54">ERROR_ICC_MUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="73:9" pos:end="73:49">/* atr is written regardless of error. */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:50"><expr pos:start="75:9" pos:end="75:49"><call pos:start="75:9" pos:end="75:49"><name pos:start="75:9" pos:end="75:33">ccid_write_data_block_atr</name><argument_list pos:start="75:34" pos:end="75:49">(<argument pos:start="75:35" pos:end="75:35"><expr pos:start="75:35" pos:end="75:35"><name pos:start="75:35" pos:end="75:35">s</name></expr></argument>, <argument pos:start="75:38" pos:end="75:48"><expr pos:start="75:38" pos:end="75:48"><name pos:start="75:38" pos:end="75:48">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:49">case <expr pos:start="79:10" pos:end="79:48"><name pos:start="79:10" pos:end="79:48">CCID_MESSAGE_TYPE_PC_to_RDR_IccPowerOff</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><call pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:31">ccid_reset_error_status</name><argument_list pos:start="81:32" pos:end="81:34">(<argument pos:start="81:33" pos:end="81:33"><expr pos:start="81:33" pos:end="81:33"><name pos:start="81:33" pos:end="81:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:27"><expr pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:18">powered</name></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <name pos:start="83:22" pos:end="83:26">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:47"><expr pos:start="85:9" pos:end="85:46"><call pos:start="85:9" pos:end="85:46"><name pos:start="85:9" pos:end="85:30">ccid_write_slot_status</name><argument_list pos:start="85:31" pos:end="85:46">(<argument pos:start="85:32" pos:end="85:32"><expr pos:start="85:32" pos:end="85:32"><name pos:start="85:32" pos:end="85:32">s</name></expr></argument>, <argument pos:start="85:35" pos:end="85:45"><expr pos:start="85:35" pos:end="85:45"><name pos:start="85:35" pos:end="85:45">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <case pos:start="89:5" pos:end="89:46">case <expr pos:start="89:10" pos:end="89:45"><name pos:start="89:10" pos:end="89:45">CCID_MESSAGE_TYPE_PC_to_RDR_XfrBlock</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:71"><expr pos:start="91:9" pos:end="91:70"><call pos:start="91:9" pos:end="91:70"><name pos:start="91:9" pos:end="91:31">ccid_on_apdu_from_guest</name><argument_list pos:start="91:32" pos:end="91:70">(<argument pos:start="91:33" pos:end="91:33"><expr pos:start="91:33" pos:end="91:33"><name pos:start="91:33" pos:end="91:33">s</name></expr></argument>, <argument pos:start="91:36" pos:end="91:69"><expr pos:start="91:36" pos:end="91:69"><operator pos:start="91:36" pos:end="91:36">(</operator><name pos:start="91:37" pos:end="91:50">CCID_XferBlock</name> <operator pos:start="91:52" pos:end="91:52">*</operator><operator pos:start="91:53" pos:end="91:53">)</operator><name pos:start="91:54" pos:end="91:69"><name pos:start="91:54" pos:end="91:54">s</name><operator pos:start="91:55" pos:end="91:56">-&gt;</operator><name pos:start="91:57" pos:end="91:69">bulk_out_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:51">case <expr pos:start="95:10" pos:end="95:50"><name pos:start="95:10" pos:end="95:50">CCID_MESSAGE_TYPE_PC_to_RDR_SetParameters</name></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:35"><expr pos:start="97:9" pos:end="97:34"><call pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:31">ccid_reset_error_status</name><argument_list pos:start="97:32" pos:end="97:34">(<argument pos:start="97:33" pos:end="97:33"><expr pos:start="97:33" pos:end="97:33"><name pos:start="97:33" pos:end="97:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><call pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:27">ccid_set_parameters</name><argument_list pos:start="99:28" pos:end="99:43">(<argument pos:start="99:29" pos:end="99:29"><expr pos:start="99:29" pos:end="99:29"><name pos:start="99:29" pos:end="99:29">s</name></expr></argument>, <argument pos:start="99:32" pos:end="99:42"><expr pos:start="99:32" pos:end="99:42"><name pos:start="99:32" pos:end="99:42">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><call pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:29">ccid_write_parameters</name><argument_list pos:start="101:30" pos:end="101:45">(<argument pos:start="101:31" pos:end="101:31"><expr pos:start="101:31" pos:end="101:31"><name pos:start="101:31" pos:end="101:31">s</name></expr></argument>, <argument pos:start="101:34" pos:end="101:44"><expr pos:start="101:34" pos:end="101:44"><name pos:start="101:34" pos:end="101:44">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:53">case <expr pos:start="105:10" pos:end="105:52"><name pos:start="105:10" pos:end="105:52">CCID_MESSAGE_TYPE_PC_to_RDR_ResetParameters</name></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:35"><expr pos:start="107:9" pos:end="107:34"><call pos:start="107:9" pos:end="107:34"><name pos:start="107:9" pos:end="107:31">ccid_reset_error_status</name><argument_list pos:start="107:32" pos:end="107:34">(<argument pos:start="107:33" pos:end="107:33"><expr pos:start="107:33" pos:end="107:33"><name pos:start="107:33" pos:end="107:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:33"><expr pos:start="109:9" pos:end="109:32"><call pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:29">ccid_reset_parameters</name><argument_list pos:start="109:30" pos:end="109:32">(<argument pos:start="109:31" pos:end="109:31"><expr pos:start="109:31" pos:end="109:31"><name pos:start="109:31" pos:end="109:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:46"><expr pos:start="111:9" pos:end="111:45"><call pos:start="111:9" pos:end="111:45"><name pos:start="111:9" pos:end="111:29">ccid_write_parameters</name><argument_list pos:start="111:30" pos:end="111:45">(<argument pos:start="111:31" pos:end="111:31"><expr pos:start="111:31" pos:end="111:31"><name pos:start="111:31" pos:end="111:31">s</name></expr></argument>, <argument pos:start="111:34" pos:end="111:44"><expr pos:start="111:34" pos:end="111:44"><name pos:start="111:34" pos:end="111:44">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:51">case <expr pos:start="115:10" pos:end="115:50"><name pos:start="115:10" pos:end="115:50">CCID_MESSAGE_TYPE_PC_to_RDR_GetParameters</name></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><call pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:31">ccid_reset_error_status</name><argument_list pos:start="117:32" pos:end="117:34">(<argument pos:start="117:33" pos:end="117:33"><expr pos:start="117:33" pos:end="117:33"><name pos:start="117:33" pos:end="117:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:46"><expr pos:start="119:9" pos:end="119:45"><call pos:start="119:9" pos:end="119:45"><name pos:start="119:9" pos:end="119:29">ccid_write_parameters</name><argument_list pos:start="119:30" pos:end="119:45">(<argument pos:start="119:31" pos:end="119:31"><expr pos:start="119:31" pos:end="119:31"><name pos:start="119:31" pos:end="119:31">s</name></expr></argument>, <argument pos:start="119:34" pos:end="119:44"><expr pos:start="119:34" pos:end="119:44"><name pos:start="119:34" pos:end="119:44">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:48">case <expr pos:start="123:10" pos:end="123:47"><name pos:start="123:10" pos:end="123:47">CCID_MESSAGE_TYPE_PC_to_RDR_Mechanical</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><call pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:32">ccid_report_error_failed</name><argument_list pos:start="125:33" pos:end="125:38">(<argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><name pos:start="125:34" pos:end="125:34">s</name></expr></argument>, <argument pos:start="125:37" pos:end="125:37"><expr pos:start="125:37" pos:end="125:37"><literal type="number" pos:start="125:37" pos:end="125:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:47"><expr pos:start="127:9" pos:end="127:46"><call pos:start="127:9" pos:end="127:46"><name pos:start="127:9" pos:end="127:30">ccid_write_slot_status</name><argument_list pos:start="127:31" pos:end="127:46">(<argument pos:start="127:32" pos:end="127:32"><expr pos:start="127:32" pos:end="127:32"><name pos:start="127:32" pos:end="127:32">s</name></expr></argument>, <argument pos:start="127:35" pos:end="127:45"><expr pos:start="127:35" pos:end="127:45"><name pos:start="127:35" pos:end="127:45">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <default pos:start="131:5" pos:end="131:12">default:</default>

        <expr_stmt pos:start="133:9" pos:end="137:43"><expr pos:start="133:9" pos:end="137:42"><call pos:start="133:9" pos:end="137:42"><name pos:start="133:9" pos:end="133:15">DPRINTF</name><argument_list pos:start="133:16" pos:end="137:42">(<argument pos:start="133:17" pos:end="133:17"><expr pos:start="133:17" pos:end="133:17"><name pos:start="133:17" pos:end="133:17">s</name></expr></argument>, <argument pos:start="133:20" pos:end="133:20"><expr pos:start="133:20" pos:end="133:20"><literal type="number" pos:start="133:20" pos:end="133:20">1</literal></expr></argument>,

                <argument pos:start="135:17" pos:end="135:66"><expr pos:start="135:17" pos:end="135:66"><literal type="string" pos:start="135:17" pos:end="135:66">"handle_data: ERROR: unhandled message type %Xh\n"</literal></expr></argument>,

                <argument pos:start="137:17" pos:end="137:41"><expr pos:start="137:17" pos:end="137:41"><name pos:start="137:17" pos:end="137:41"><name pos:start="137:17" pos:end="137:27">ccid_header</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:41">bMessageType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="139:9" pos:end="145:11">/*

         * The caller is expecting the device to respond, tell it we

         * don't support the operation.

         */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:61"><expr pos:start="147:9" pos:end="147:60"><call pos:start="147:9" pos:end="147:60"><name pos:start="147:9" pos:end="147:32">ccid_report_error_failed</name><argument_list pos:start="147:33" pos:end="147:60">(<argument pos:start="147:34" pos:end="147:34"><expr pos:start="147:34" pos:end="147:34"><name pos:start="147:34" pos:end="147:34">s</name></expr></argument>, <argument pos:start="147:37" pos:end="147:59"><expr pos:start="147:37" pos:end="147:59"><name pos:start="147:37" pos:end="147:59">ERROR_CMD_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:47"><expr pos:start="149:9" pos:end="149:46"><call pos:start="149:9" pos:end="149:46"><name pos:start="149:9" pos:end="149:30">ccid_write_slot_status</name><argument_list pos:start="149:31" pos:end="149:46">(<argument pos:start="149:32" pos:end="149:32"><expr pos:start="149:32" pos:end="149:32"><name pos:start="149:32" pos:end="149:32">s</name></expr></argument>, <argument pos:start="149:35" pos:end="149:45"><expr pos:start="149:35" pos:end="149:45"><name pos:start="149:35" pos:end="149:45">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="155:5" pos:end="155:24"><expr pos:start="155:5" pos:end="155:23"><name pos:start="155:5" pos:end="155:19"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:19">bulk_out_pos</name></name> <operator pos:start="155:21" pos:end="155:21">=</operator> <literal type="number" pos:start="155:23" pos:end="155:23">0</literal></expr>;</expr_stmt>

    <return pos:start="157:5" pos:end="157:11">return;</return>



<label pos:start="161:1" pos:end="161:4"><name pos:start="161:1" pos:end="161:3">err</name>:</label>

    <expr_stmt pos:start="163:5" pos:end="163:30"><expr pos:start="163:5" pos:end="163:29"><name pos:start="163:5" pos:end="163:13"><name pos:start="163:5" pos:end="163:5">p</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:13">status</name></name> <operator pos:start="163:15" pos:end="163:15">=</operator> <name pos:start="163:17" pos:end="163:29">USB_RET_STALL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:24"><expr pos:start="165:5" pos:end="165:23"><name pos:start="165:5" pos:end="165:19"><name pos:start="165:5" pos:end="165:5">s</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:19">bulk_out_pos</name></name> <operator pos:start="165:21" pos:end="165:21">=</operator> <literal type="number" pos:start="165:23" pos:end="165:23">0</literal></expr>;</expr_stmt>

    <return pos:start="167:5" pos:end="167:11">return;</return>

</block_content>}</block></function>
</unit>
