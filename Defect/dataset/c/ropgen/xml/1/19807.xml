<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19807.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">wsaud_read_packet</name><parameter_list pos:start="1:29" pos:end="2:43">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>,
                             <parameter pos:start="2:30" pos:end="2:42"><decl pos:start="2:30" pos:end="2:42"><type pos:start="2:30" pos:end="2:42"><name pos:start="2:30" pos:end="2:37">AVPacket</name> <modifier pos:start="2:39" pos:end="2:39">*</modifier></type><name pos:start="2:40" pos:end="2:42">pkt</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="35:15">{<block_content pos:start="4:5" pos:end="35:15">
    <decl_stmt pos:start="4:5" pos:end="4:28"><decl pos:start="4:5" pos:end="4:27"><type pos:start="4:5" pos:end="4:17"><name pos:start="4:5" pos:end="4:15">AVIOContext</name> <modifier pos:start="4:17" pos:end="4:17">*</modifier></type><name pos:start="4:18" pos:end="4:19">pb</name> <init pos:start="4:21" pos:end="4:27">= <expr pos:start="4:23" pos:end="4:27"><name pos:start="4:23" pos:end="4:27"><name pos:start="4:23" pos:end="4:23">s</name><operator pos:start="4:24" pos:end="4:25">-&gt;</operator><name pos:start="4:26" pos:end="4:27">pb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">char</name></type> <name pos:start="5:19" pos:end="5:51"><name pos:start="5:19" pos:end="5:26">preamble</name><index pos:start="5:27" pos:end="5:51">[<expr pos:start="5:28" pos:end="5:50"><name pos:start="5:28" pos:end="5:50">AUD_CHUNK_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:28"><decl pos:start="6:5" pos:end="6:27"><type pos:start="6:5" pos:end="6:16"><name pos:start="6:5" pos:end="6:12">unsigned</name> <name pos:start="6:14" pos:end="6:16">int</name></type> <name pos:start="6:18" pos:end="6:27">chunk_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:33"><decl pos:start="8:5" pos:end="8:32"><type pos:start="8:5" pos:end="8:14"><name pos:start="8:5" pos:end="8:12">AVStream</name> <modifier pos:start="8:14" pos:end="8:14">*</modifier></type><name pos:start="8:15" pos:end="8:16">st</name> <init pos:start="8:18" pos:end="8:32">= <expr pos:start="8:20" pos:end="8:32"><name pos:start="8:20" pos:end="8:32"><name pos:start="8:20" pos:end="8:20">s</name><operator pos:start="8:21" pos:end="8:22">-&gt;</operator><name pos:start="8:23" pos:end="8:29">streams</name><index pos:start="8:30" pos:end="8:32">[<expr pos:start="8:31" pos:end="8:31"><literal type="number" pos:start="8:31" pos:end="8:31">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="9:5" pos:end="11:28"><if pos:start="9:5" pos:end="11:28">if <condition pos:start="9:8" pos:end="10:32">(<expr pos:start="9:9" pos:end="10:31"><call pos:start="9:9" pos:end="9:56"><name pos:start="9:9" pos:end="9:17">avio_read</name><argument_list pos:start="9:18" pos:end="9:56">(<argument pos:start="9:19" pos:end="9:20"><expr pos:start="9:19" pos:end="9:20"><name pos:start="9:19" pos:end="9:20">pb</name></expr></argument>, <argument pos:start="9:23" pos:end="9:30"><expr pos:start="9:23" pos:end="9:30"><name pos:start="9:23" pos:end="9:30">preamble</name></expr></argument>, <argument pos:start="9:33" pos:end="9:55"><expr pos:start="9:33" pos:end="9:55"><name pos:start="9:33" pos:end="9:55">AUD_CHUNK_PREAMBLE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="9:58" pos:end="9:59">!=</operator>
        <name pos:start="10:9" pos:end="10:31">AUD_CHUNK_PREAMBLE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:28"><block_content pos:start="11:9" pos:end="11:28">
        <return pos:start="11:9" pos:end="11:28">return <expr pos:start="11:16" pos:end="11:27"><call pos:start="11:16" pos:end="11:27"><name pos:start="11:16" pos:end="11:22">AVERROR</name><argument_list pos:start="11:23" pos:end="11:27">(<argument pos:start="11:24" pos:end="11:26"><expr pos:start="11:24" pos:end="11:26"><name pos:start="11:24" pos:end="11:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="12:5" pos:end="12:28">/* validate the chunk */</comment>
    <if_stmt pos:start="13:5" pos:end="14:39"><if pos:start="13:5" pos:end="14:39">if <condition pos:start="13:8" pos:end="13:53">(<expr pos:start="13:9" pos:end="13:52"><call pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:15">AV_RL32</name><argument_list pos:start="13:16" pos:end="13:29">(<argument pos:start="13:17" pos:end="13:28"><expr pos:start="13:17" pos:end="13:28"><operator pos:start="13:17" pos:end="13:17">&amp;</operator><name pos:start="13:18" pos:end="13:28"><name pos:start="13:18" pos:end="13:25">preamble</name><index pos:start="13:26" pos:end="13:28">[<expr pos:start="13:27" pos:end="13:27"><literal type="number" pos:start="13:27" pos:end="13:27">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="13:31" pos:end="13:32">!=</operator> <name pos:start="13:34" pos:end="13:52">AUD_CHUNK_SIGNATURE</name></expr>)</condition><block type="pseudo" pos:start="14:5" pos:end="14:39"><block_content pos:start="14:5" pos:end="14:39">
    <expr_stmt pos:start="14:5" pos:end="14:39"><expr pos:start="14:5" pos:end="14:38"><name pos:start="14:5" pos:end="14:14">chunk_size</name> <operator pos:start="14:16" pos:end="14:16">=</operator> <call pos:start="14:18" pos:end="14:38"><name pos:start="14:18" pos:end="14:24">AV_RL16</name><argument_list pos:start="14:25" pos:end="14:38">(<argument pos:start="14:26" pos:end="14:37"><expr pos:start="14:26" pos:end="14:37"><operator pos:start="14:26" pos:end="14:26">&amp;</operator><name pos:start="14:27" pos:end="14:37"><name pos:start="14:27" pos:end="14:34">preamble</name><index pos:start="14:35" pos:end="14:37">[<expr pos:start="14:36" pos:end="14:36"><literal type="number" pos:start="14:36" pos:end="14:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="15:5" pos:end="35:15"><if pos:start="15:5" pos:end="28:5">if <condition pos:start="15:8" pos:end="15:60">(<expr pos:start="15:9" pos:end="15:59"><name pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:10">st</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:20">codecpar</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:30">codec_id</name></name> <operator pos:start="15:32" pos:end="15:33">==</operator> <name pos:start="15:35" pos:end="15:59">AV_CODEC_ID_WESTWOOD_SND1</name></expr>)</condition> <block pos:start="15:62" pos:end="28:5">{<block_content pos:start="20:9" pos:end="27:33">
        <comment type="block" pos:start="16:9" pos:end="19:63">/* For Westwood SND1 audio we need to add the output size and input
           size to the start of the packet to match what is in VQA.
           Specifically, this is needed to signal when a packet should be
           decoding as raw 8-bit pcm or variable-size ADPCM. */</comment>
        <decl_stmt pos:start="20:9" pos:end="20:45"><decl pos:start="20:9" pos:end="20:44"><type pos:start="20:9" pos:end="20:11"><name pos:start="20:9" pos:end="20:11">int</name></type> <name pos:start="20:13" pos:end="20:20">out_size</name> <init pos:start="20:22" pos:end="20:44">= <expr pos:start="20:24" pos:end="20:44"><call pos:start="20:24" pos:end="20:44"><name pos:start="20:24" pos:end="20:30">AV_RL16</name><argument_list pos:start="20:31" pos:end="20:44">(<argument pos:start="20:32" pos:end="20:43"><expr pos:start="20:32" pos:end="20:43"><operator pos:start="20:32" pos:end="20:32">&amp;</operator><name pos:start="20:33" pos:end="20:43"><name pos:start="20:33" pos:end="20:40">preamble</name><index pos:start="20:41" pos:end="20:43">[<expr pos:start="20:42" pos:end="20:42"><literal type="number" pos:start="20:42" pos:end="20:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="21:9" pos:end="22:23"><if pos:start="21:9" pos:end="22:23">if <condition pos:start="21:12" pos:end="21:59">(<expr pos:start="21:13" pos:end="21:58"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:16">ret</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:53"><name pos:start="21:20" pos:end="21:32">av_new_packet</name><argument_list pos:start="21:33" pos:end="21:53">(<argument pos:start="21:34" pos:end="21:36"><expr pos:start="21:34" pos:end="21:36"><name pos:start="21:34" pos:end="21:36">pkt</name></expr></argument>, <argument pos:start="21:39" pos:end="21:52"><expr pos:start="21:39" pos:end="21:52"><name pos:start="21:39" pos:end="21:48">chunk_size</name> <operator pos:start="21:50" pos:end="21:50">+</operator> <literal type="number" pos:start="21:52" pos:end="21:52">4</literal></expr></argument>)</argument_list></call><operator pos:start="21:54" pos:end="21:54">)</operator> <operator pos:start="21:56" pos:end="21:56">&lt;</operator> <literal type="number" pos:start="21:58" pos:end="21:58">0</literal></expr>)</condition><block type="pseudo" pos:start="22:13" pos:end="22:23"><block_content pos:start="22:13" pos:end="22:23">
            <return pos:start="22:13" pos:end="22:23">return <expr pos:start="22:20" pos:end="22:22"><name pos:start="22:20" pos:end="22:22">ret</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="23:9" pos:end="24:48"><if pos:start="23:9" pos:end="24:48">if <condition pos:start="23:12" pos:end="23:75">(<expr pos:start="23:13" pos:end="23:74"><operator pos:start="23:13" pos:end="23:13">(</operator><name pos:start="23:14" pos:end="23:16">ret</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:59"><name pos:start="23:20" pos:end="23:28">avio_read</name><argument_list pos:start="23:29" pos:end="23:59">(<argument pos:start="23:30" pos:end="23:31"><expr pos:start="23:30" pos:end="23:31"><name pos:start="23:30" pos:end="23:31">pb</name></expr></argument>, <argument pos:start="23:34" pos:end="23:46"><expr pos:start="23:34" pos:end="23:46"><operator pos:start="23:34" pos:end="23:34">&amp;</operator><name pos:start="23:35" pos:end="23:46"><name pos:start="23:35" pos:end="23:37">pkt</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:43">data</name><index pos:start="23:44" pos:end="23:46">[<expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="23:49" pos:end="23:58"><expr pos:start="23:49" pos:end="23:58"><name pos:start="23:49" pos:end="23:58">chunk_size</name></expr></argument>)</argument_list></call><operator pos:start="23:60" pos:end="23:60">)</operator> <operator pos:start="23:62" pos:end="23:63">!=</operator> <name pos:start="23:65" pos:end="23:74">chunk_size</name></expr>)</condition><block type="pseudo" pos:start="24:13" pos:end="24:48"><block_content pos:start="24:13" pos:end="24:48">
            <return pos:start="24:13" pos:end="24:48">return <expr pos:start="24:20" pos:end="24:47"><ternary pos:start="24:20" pos:end="24:47"><condition pos:start="24:20" pos:end="24:28"><expr pos:start="24:20" pos:end="24:26"><name pos:start="24:20" pos:end="24:22">ret</name> <operator pos:start="24:24" pos:end="24:24">&lt;</operator> <literal type="number" pos:start="24:26" pos:end="24:26">0</literal></expr> ?</condition><then pos:start="24:30" pos:end="24:32"> <expr pos:start="24:30" pos:end="24:32"><name pos:start="24:30" pos:end="24:32">ret</name></expr> </then><else pos:start="24:34" pos:end="24:47">: <expr pos:start="24:36" pos:end="24:47"><call pos:start="24:36" pos:end="24:47"><name pos:start="24:36" pos:end="24:42">AVERROR</name><argument_list pos:start="24:43" pos:end="24:47">(<argument pos:start="24:44" pos:end="24:46"><expr pos:start="24:44" pos:end="24:46"><name pos:start="24:44" pos:end="24:46">EIO</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:41"><expr pos:start="25:9" pos:end="25:40"><call pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:15">AV_WL16</name><argument_list pos:start="25:16" pos:end="25:40">(<argument pos:start="25:17" pos:end="25:29"><expr pos:start="25:17" pos:end="25:29"><operator pos:start="25:17" pos:end="25:17">&amp;</operator><name pos:start="25:18" pos:end="25:29"><name pos:start="25:18" pos:end="25:20">pkt</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:26">data</name><index pos:start="25:27" pos:end="25:29">[<expr pos:start="25:28" pos:end="25:28"><literal type="number" pos:start="25:28" pos:end="25:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="25:32" pos:end="25:39"><expr pos:start="25:32" pos:end="25:39"><name pos:start="25:32" pos:end="25:39">out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:43"><expr pos:start="26:9" pos:end="26:42"><call pos:start="26:9" pos:end="26:42"><name pos:start="26:9" pos:end="26:15">AV_WL16</name><argument_list pos:start="26:16" pos:end="26:42">(<argument pos:start="26:17" pos:end="26:29"><expr pos:start="26:17" pos:end="26:29"><operator pos:start="26:17" pos:end="26:17">&amp;</operator><name pos:start="26:18" pos:end="26:29"><name pos:start="26:18" pos:end="26:20">pkt</name><operator pos:start="26:21" pos:end="26:22">-&gt;</operator><name pos:start="26:23" pos:end="26:26">data</name><index pos:start="26:27" pos:end="26:29">[<expr pos:start="26:28" pos:end="26:28"><literal type="number" pos:start="26:28" pos:end="26:28">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="26:32" pos:end="26:41"><expr pos:start="26:32" pos:end="26:41"><name pos:start="26:32" pos:end="26:41">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">pkt</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:21">duration</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:32">out_size</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="28:7" pos:end="35:15">else <block pos:start="28:12" pos:end="35:15">{<block_content pos:start="29:9" pos:end="35:15">
        <expr_stmt pos:start="29:9" pos:end="29:49"><expr pos:start="29:9" pos:end="29:48"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:48"><name pos:start="29:15" pos:end="29:27">av_get_packet</name><argument_list pos:start="29:28" pos:end="29:48">(<argument pos:start="29:29" pos:end="29:30"><expr pos:start="29:29" pos:end="29:30"><name pos:start="29:29" pos:end="29:30">pb</name></expr></argument>, <argument pos:start="29:33" pos:end="29:35"><expr pos:start="29:33" pos:end="29:35"><name pos:start="29:33" pos:end="29:35">pkt</name></expr></argument>, <argument pos:start="29:38" pos:end="29:47"><expr pos:start="29:38" pos:end="29:47"><name pos:start="29:38" pos:end="29:47">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="30:9" pos:end="31:32"><if pos:start="30:9" pos:end="31:32">if <condition pos:start="30:12" pos:end="30:30">(<expr pos:start="30:13" pos:end="30:29"><name pos:start="30:13" pos:end="30:15">ret</name> <operator pos:start="30:17" pos:end="30:18">!=</operator> <name pos:start="30:20" pos:end="30:29">chunk_size</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:32"><block_content pos:start="31:13" pos:end="31:32">
            <return pos:start="31:13" pos:end="31:32">return <expr pos:start="31:20" pos:end="31:31"><call pos:start="31:20" pos:end="31:31"><name pos:start="31:20" pos:end="31:26">AVERROR</name><argument_list pos:start="31:27" pos:end="31:31">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="32:9" pos:end="32:74">/* 2 samples/byte, 1 or 2 samples per frame depending on stereo */</comment>
        <expr_stmt pos:start="33:9" pos:end="33:66"><expr pos:start="33:9" pos:end="33:65"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:11">pkt</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:21">duration</name></name> <operator pos:start="33:23" pos:end="33:23">=</operator> <operator pos:start="33:25" pos:end="33:25">(</operator><name pos:start="33:26" pos:end="33:35">chunk_size</name> <operator pos:start="33:37" pos:end="33:37">*</operator> <literal type="number" pos:start="33:39" pos:end="33:39">2</literal><operator pos:start="33:40" pos:end="33:40">)</operator> <operator pos:start="33:42" pos:end="33:42">/</operator> <name pos:start="33:44" pos:end="33:65"><name pos:start="33:44" pos:end="33:45">st</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:55">codecpar</name><operator pos:start="33:56" pos:end="33:57">-&gt;</operator><name pos:start="33:58" pos:end="33:65">channels</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:34"><expr pos:start="34:5" pos:end="34:33"><name pos:start="34:5" pos:end="34:21"><name pos:start="34:5" pos:end="34:7">pkt</name><operator pos:start="34:8" pos:end="34:9">-&gt;</operator><name pos:start="34:10" pos:end="34:21">stream_index</name></name> <operator pos:start="34:23" pos:end="34:23">=</operator> <name pos:start="34:25" pos:end="34:33"><name pos:start="34:25" pos:end="34:26">st</name><operator pos:start="34:27" pos:end="34:28">-&gt;</operator><name pos:start="34:29" pos:end="34:33">index</name></name></expr>;</expr_stmt>
    <return pos:start="35:5" pos:end="35:15">return <expr pos:start="35:12" pos:end="35:14"><name pos:start="35:12" pos:end="35:14">ret</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></function></unit>
