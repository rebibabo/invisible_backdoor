<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9294.c" pos:tabs="8"><function pos:start="1:1" pos:end="289:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name> <name pos:start="1:19" pos:end="1:24">RENAME</name></type>(<name pos:start="1:26" pos:end="1:37">yuv420_rgb24</name>)<parameter_list pos:start="1:39" pos:end="3:60">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:49">SwsContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">c</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:61">uint8_t</name><modifier pos:start="1:62" pos:end="1:62">*</modifier></type> <name pos:start="1:64" pos:end="1:68"><name pos:start="1:64" pos:end="1:66">src</name><index pos:start="1:67" pos:end="1:68">[]</index></name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:85"><decl pos:start="1:71" pos:end="1:85"><type pos:start="1:71" pos:end="1:83"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:85"><name pos:start="1:75" pos:end="1:83">srcStride</name><index pos:start="1:84" pos:end="1:85">[]</index></name></decl></parameter>, <parameter pos:start="1:88" pos:end="1:100"><decl pos:start="1:88" pos:end="1:100"><type pos:start="1:88" pos:end="1:100"><name pos:start="1:88" pos:end="1:90">int</name></type> <name pos:start="1:92" pos:end="1:100">srcSliceY</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:26"><decl pos:start="3:14" pos:end="3:26"><type pos:start="3:14" pos:end="3:26"><name pos:start="3:14" pos:end="3:16">int</name></type> <name pos:start="3:18" pos:end="3:26">srcSliceH</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:35">uint8_t</name><modifier pos:start="3:36" pos:end="3:36">*</modifier></type> <name pos:start="3:38" pos:end="3:42"><name pos:start="3:38" pos:end="3:40">dst</name><index pos:start="3:41" pos:end="3:42">[]</index></name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:59"><name pos:start="3:49" pos:end="3:57">dstStride</name><index pos:start="3:58" pos:end="3:59">[]</index></name></decl></parameter>)</parameter_list><block pos:start="3:61" pos:end="289:1">{<block_content pos:start="5:5" pos:end="287:21">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">y</name></decl>, <decl pos:start="5:12" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:17">h_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if<condition pos:start="9:7" pos:end="9:39">(<expr pos:start="9:8" pos:end="9:38"><name pos:start="9:8" pos:end="9:19"><name pos:start="9:8" pos:end="9:8">c</name><operator pos:start="9:9" pos:end="9:10">-&gt;</operator><name pos:start="9:11" pos:end="9:19">srcFormat</name></name> <operator pos:start="9:21" pos:end="9:22">==</operator> <name pos:start="9:24" pos:end="9:38">PIX_FMT_YUV422P</name></expr>)</condition><block pos:start="9:40" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:26">

	<expr_stmt pos:start="11:9" pos:end="11:26"><expr pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:17">srcStride</name><index pos:start="11:18" pos:end="11:20">[<expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">1</literal></expr>]</index></name> <operator pos:start="11:22" pos:end="11:23">*=</operator> <literal type="number" pos:start="11:25" pos:end="11:25">2</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="13:9" pos:end="13:26"><expr pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:17">srcStride</name><index pos:start="13:18" pos:end="13:20">[<expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">2</literal></expr>]</index></name> <operator pos:start="13:22" pos:end="13:23">*=</operator> <literal type="number" pos:start="13:25" pos:end="13:25">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:10">h_size</name><operator pos:start="19:11" pos:end="19:11">=</operator> <operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:20"><name pos:start="19:14" pos:end="19:14">c</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:20">dstW</name></name><operator pos:start="19:21" pos:end="19:21">+</operator><literal type="number" pos:start="19:22" pos:end="19:22">7</literal><operator pos:start="19:23" pos:end="19:23">)</operator><operator pos:start="19:24" pos:end="19:24">&amp;</operator><operator pos:start="19:25" pos:end="19:25">~</operator><literal type="number" pos:start="19:26" pos:end="19:26">7</literal></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="21:49"><if pos:start="21:5" pos:end="21:49">if<condition pos:start="21:7" pos:end="21:38">(<expr pos:start="21:8" pos:end="21:37"><name pos:start="21:8" pos:end="21:13">h_size</name><operator pos:start="21:14" pos:end="21:14">*</operator><literal type="number" pos:start="21:15" pos:end="21:15">3</literal> <operator pos:start="21:17" pos:end="21:17">&gt;</operator> <call pos:start="21:19" pos:end="21:37"><name pos:start="21:19" pos:end="21:23">FFABS</name><argument_list pos:start="21:24" pos:end="21:37">(<argument pos:start="21:25" pos:end="21:36"><expr pos:start="21:25" pos:end="21:36"><name pos:start="21:25" pos:end="21:36"><name pos:start="21:25" pos:end="21:33">dstStride</name><index pos:start="21:34" pos:end="21:36">[<expr pos:start="21:35" pos:end="21:35"><literal type="number" pos:start="21:35" pos:end="21:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:40" pos:end="21:49"><block_content pos:start="21:40" pos:end="21:49"> <expr_stmt pos:start="21:40" pos:end="21:49"><expr pos:start="21:40" pos:end="21:48"><name pos:start="21:40" pos:end="21:45">h_size</name><operator pos:start="21:46" pos:end="21:47">-=</operator><literal type="number" pos:start="21:48" pos:end="21:48">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <asm pos:start="25:5" pos:end="25:62">__asm__ <specifier pos:start="25:13" pos:end="25:24">__volatile__</specifier> ("pxor %mm4, %mm4;" <comment type="block" pos:start="25:46" pos:end="25:59">/* zero mm4 */</comment> );</asm>



    <for pos:start="29:5" pos:end="281:5">for <control pos:start="29:9" pos:end="29:33">(<init pos:start="29:10" pos:end="29:14"><expr pos:start="29:10" pos:end="29:13"><name pos:start="29:10" pos:end="29:10">y</name><operator pos:start="29:11" pos:end="29:11">=</operator> <literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr>;</init> <condition pos:start="29:16" pos:end="29:27"><expr pos:start="29:16" pos:end="29:26"><name pos:start="29:16" pos:end="29:16">y</name><operator pos:start="29:17" pos:end="29:17">&lt;</operator><name pos:start="29:18" pos:end="29:26">srcSliceH</name></expr>;</condition> <incr pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:29">y</name><operator pos:start="29:30" pos:end="29:31">++</operator></expr></incr> )</control> <block pos:start="29:35" pos:end="281:5">{<block_content pos:start="31:9" pos:end="279:23">

	<decl_stmt pos:start="31:9" pos:end="31:62"><decl pos:start="31:9" pos:end="31:61"><type pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:15">uint8_t</name> <modifier pos:start="31:17" pos:end="31:17">*</modifier></type><name pos:start="31:18" pos:end="31:23">_image</name> <init pos:start="31:25" pos:end="31:61">= <expr pos:start="31:27" pos:end="31:61"><name pos:start="31:27" pos:end="31:32"><name pos:start="31:27" pos:end="31:29">dst</name><index pos:start="31:30" pos:end="31:32">[<expr pos:start="31:31" pos:end="31:31"><literal type="number" pos:start="31:31" pos:end="31:31">0</literal></expr>]</index></name> <operator pos:start="31:34" pos:end="31:34">+</operator> <operator pos:start="31:36" pos:end="31:36">(</operator><name pos:start="31:37" pos:end="31:37">y</name><operator pos:start="31:38" pos:end="31:38">+</operator><name pos:start="31:39" pos:end="31:47">srcSliceY</name><operator pos:start="31:48" pos:end="31:48">)</operator><operator pos:start="31:49" pos:end="31:49">*</operator><name pos:start="31:50" pos:end="31:61"><name pos:start="31:50" pos:end="31:58">dstStride</name><index pos:start="31:59" pos:end="31:61">[<expr pos:start="31:60" pos:end="31:60"><literal type="number" pos:start="31:60" pos:end="31:60">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="33:9" pos:end="33:47"><decl pos:start="33:9" pos:end="33:46"><type pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:15">uint8_t</name> <modifier pos:start="33:17" pos:end="33:17">*</modifier></type><name pos:start="33:18" pos:end="33:20">_py</name> <init pos:start="33:22" pos:end="33:46">= <expr pos:start="33:24" pos:end="33:46"><name pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:26">src</name><index pos:start="33:27" pos:end="33:29">[<expr pos:start="33:28" pos:end="33:28"><literal type="number" pos:start="33:28" pos:end="33:28">0</literal></expr>]</index></name> <operator pos:start="33:31" pos:end="33:31">+</operator> <name pos:start="33:33" pos:end="33:33">y</name><operator pos:start="33:34" pos:end="33:34">*</operator><name pos:start="33:35" pos:end="33:46"><name pos:start="33:35" pos:end="33:43">srcStride</name><index pos:start="33:44" pos:end="33:46">[<expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="35:9" pos:end="35:52"><decl pos:start="35:9" pos:end="35:51"><type pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:15">uint8_t</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:20">_pu</name> <init pos:start="35:22" pos:end="35:51">= <expr pos:start="35:24" pos:end="35:51"><name pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:26">src</name><index pos:start="35:27" pos:end="35:29">[<expr pos:start="35:28" pos:end="35:28"><literal type="number" pos:start="35:28" pos:end="35:28">1</literal></expr>]</index></name> <operator pos:start="35:31" pos:end="35:31">+</operator> <operator pos:start="35:33" pos:end="35:33">(</operator><name pos:start="35:34" pos:end="35:34">y</name><operator pos:start="35:35" pos:end="35:36">&gt;&gt;</operator><literal type="number" pos:start="35:37" pos:end="35:37">1</literal><operator pos:start="35:38" pos:end="35:38">)</operator><operator pos:start="35:39" pos:end="35:39">*</operator><name pos:start="35:40" pos:end="35:51"><name pos:start="35:40" pos:end="35:48">srcStride</name><index pos:start="35:49" pos:end="35:51">[<expr pos:start="35:50" pos:end="35:50"><literal type="number" pos:start="35:50" pos:end="35:50">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="37:9" pos:end="37:52"><decl pos:start="37:9" pos:end="37:51"><type pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:15">uint8_t</name> <modifier pos:start="37:17" pos:end="37:17">*</modifier></type><name pos:start="37:18" pos:end="37:20">_pv</name> <init pos:start="37:22" pos:end="37:51">= <expr pos:start="37:24" pos:end="37:51"><name pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:26">src</name><index pos:start="37:27" pos:end="37:29">[<expr pos:start="37:28" pos:end="37:28"><literal type="number" pos:start="37:28" pos:end="37:28">2</literal></expr>]</index></name> <operator pos:start="37:31" pos:end="37:31">+</operator> <operator pos:start="37:33" pos:end="37:33">(</operator><name pos:start="37:34" pos:end="37:34">y</name><operator pos:start="37:35" pos:end="37:36">&gt;&gt;</operator><literal type="number" pos:start="37:37" pos:end="37:37">1</literal><operator pos:start="37:38" pos:end="37:38">)</operator><operator pos:start="37:39" pos:end="37:39">*</operator><name pos:start="37:40" pos:end="37:51"><name pos:start="37:40" pos:end="37:48">srcStride</name><index pos:start="37:49" pos:end="37:51">[<expr pos:start="37:50" pos:end="37:50"><literal type="number" pos:start="37:50" pos:end="37:50">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="39:9" pos:end="39:30"><decl pos:start="39:9" pos:end="39:29"><type pos:start="39:9" pos:end="39:12"><name pos:start="39:9" pos:end="39:12">long</name></type> <name pos:start="39:14" pos:end="39:18">index</name><init pos:start="39:19" pos:end="39:29">= <expr pos:start="39:21" pos:end="39:29"><operator pos:start="39:21" pos:end="39:21">-</operator><name pos:start="39:22" pos:end="39:27">h_size</name><operator pos:start="39:28" pos:end="39:28">/</operator><literal type="number" pos:start="39:29" pos:end="39:29">2</literal></expr></init></decl>;</decl_stmt>



	    <comment type="block" pos:start="43:13" pos:end="45:42">/* this mmx assembly code deals with SINGLE scan line at a time, it convert 8

	       pixels in each iteration */</comment>

	    <asm pos:start="47:13" pos:end="279:23">__asm__ <specifier pos:start="47:21" pos:end="47:32">__volatile__</specifier> (

	<comment type="block" pos:start="49:9" pos:end="49:51">/* load data for start of next scan line */</comment>

		     "movd (%2, %0), %%mm0;" <comment type="block" pos:start="51:46" pos:end="51:84">/* Load 4 Cb 00 00 00 00 u3 u2 u1 u0 */</comment>

		     "movd (%3, %0), %%mm1;" <comment type="block" pos:start="53:46" pos:end="53:84">/* Load 4 Cr 00 00 00 00 v3 v2 v1 v0 */</comment>

		     "movq (%5, %0, 2), %%mm6;" <comment type="block" pos:start="55:49" pos:end="55:87">/* Load 8  Y Y7 Y6 Y5 Y4 Y3 Y2 Y1 Y0 */</comment>

<comment type="line" pos:start="57:1" pos:end="57:53">//		    ".balign 16			\n\t"</comment>

		    "1:				\n\t"

YUV2RGB

	<comment type="block" pos:start="63:9" pos:end="63:37">/* mm0=B, %%mm2=G, %%mm1=R */</comment>

<cpp:ifdef pos:start="65:1" pos:end="65:16">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:16">HAVE_MMX2</name></cpp:ifdef>

			"movq "MANGLE(M24A)", %%mm4	\n\t"

			"movq "MANGLE(M24C)", %%mm7	\n\t"

			"pshufw $0x50, %%mm0, %%mm5	\n\t" <comment type="block" pos:start="71:63" pos:end="71:92">/* B3 B2 B3 B2  B1 B0 B1 B0 */</comment>

			"pshufw $0x50, %%mm2, %%mm3	\n\t" <comment type="block" pos:start="73:63" pos:end="73:92">/* G3 G2 G3 G2  G1 G0 G1 G0 */</comment>

			"pshufw $0x00, %%mm1, %%mm6	\n\t" <comment type="block" pos:start="75:63" pos:end="75:92">/* R1 R0 R1 R0  R1 R0 R1 R0 */</comment>



			"pand %%mm4, %%mm5		\n\t" <comment type="block" pos:start="79:63" pos:end="79:92">/*    B2        B1       B0 */</comment>

			"pand %%mm4, %%mm3		\n\t" <comment type="block" pos:start="81:63" pos:end="81:92">/*    G2        G1       G0 */</comment>

			"pand %%mm7, %%mm6		\n\t" <comment type="block" pos:start="83:63" pos:end="83:92">/*       R1        R0       */</comment>



			"psllq $8, %%mm3		\n\t" <comment type="block" pos:start="87:63" pos:end="87:92">/* G2        G1       G0    */</comment>

			"por %%mm5, %%mm6		\n\t"

			"por %%mm3, %%mm6		\n\t"

			MOVNTQ" %%mm6, (%1)		\n\t"



			"psrlq $8, %%mm2		\n\t" <comment type="block" pos:start="97:63" pos:end="97:92">/* 00 G7 G6 G5  G4 G3 G2 G1 */</comment>

			"pshufw $0xA5, %%mm0, %%mm5	\n\t" <comment type="block" pos:start="99:63" pos:end="99:92">/* B5 B4 B5 B4  B3 B2 B3 B2 */</comment>

			"pshufw $0x55, %%mm2, %%mm3	\n\t" <comment type="block" pos:start="101:63" pos:end="101:92">/* G4 G3 G4 G3  G4 G3 G4 G3 */</comment>

			"pshufw $0xA5, %%mm1, %%mm6	\n\t" <comment type="block" pos:start="103:63" pos:end="103:92">/* R5 R4 R5 R4  R3 R2 R3 R2 */</comment>



			"pand "MANGLE(M24B)", %%mm5	\n\t" <comment type="block" pos:start="107:63" pos:end="107:92">/* B5       B4        B3    */</comment>

			"pand %%mm7, %%mm3		\n\t" <comment type="block" pos:start="109:63" pos:end="109:92">/*       G4        G3       */</comment>

			"pand %%mm4, %%mm6		\n\t" <comment type="block" pos:start="111:63" pos:end="111:92">/*    R4        R3       R2 */</comment>



			"por %%mm5, %%mm3		\n\t" <comment type="block" pos:start="115:63" pos:end="115:92">/* B5    G4 B4     G3 B3    */</comment>

			"por %%mm3, %%mm6		\n\t"

			MOVNTQ" %%mm6, 8(%1)		\n\t"



			"pshufw $0xFF, %%mm0, %%mm5	\n\t" <comment type="block" pos:start="123:63" pos:end="123:92">/* B7 B6 B7 B6  B7 B6 B6 B7 */</comment>

			"pshufw $0xFA, %%mm2, %%mm3	\n\t" <comment type="block" pos:start="125:63" pos:end="125:92">/* 00 G7 00 G7  G6 G5 G6 G5 */</comment>

			"pshufw $0xFA, %%mm1, %%mm6	\n\t" <comment type="block" pos:start="127:63" pos:end="127:92">/* R7 R6 R7 R6  R5 R4 R5 R4 */</comment>

			"movd 4 (%2, %0), %%mm0;" <comment type="block" pos:start="129:51" pos:end="129:89">/* Load 4 Cb 00 00 00 00 u3 u2 u1 u0 */</comment>



			"pand %%mm7, %%mm5		\n\t" <comment type="block" pos:start="133:63" pos:end="133:92">/*       B7        B6       */</comment>

			"pand %%mm4, %%mm3		\n\t" <comment type="block" pos:start="135:63" pos:end="135:92">/*    G7        G6       G5 */</comment>

			"pand "MANGLE(M24B)", %%mm6	\n\t" <comment type="block" pos:start="137:63" pos:end="137:92">/* R7       R6        R5    */</comment>

			"movd 4 (%3, %0), %%mm1;" <comment type="block" pos:start="139:51" pos:end="139:89">/* Load 4 Cr 00 00 00 00 v3 v2 v1 v0 */</comment>

\

			"por %%mm5, %%mm3		\n\t"

			"por %%mm3, %%mm6		\n\t"

			MOVNTQ" %%mm6, 16(%1)		\n\t"

			"movq 8 (%5, %0, 2), %%mm6;" <comment type="block" pos:start="149:54" pos:end="149:91">/* Load 8 Y Y7 Y6 Y5 Y4 Y3 Y2 Y1 Y0 */</comment>

			"pxor %%mm4, %%mm4		\n\t"



<cpp:else pos:start="155:1" pos:end="155:5">#<cpp:directive pos:start="155:2" pos:end="155:5">else</cpp:directive></cpp:else>



			"pxor %%mm4, %%mm4		\n\t"

			"movq %%mm0, %%mm5		\n\t" <comment type="block" pos:start="161:63" pos:end="161:69">/* B */</comment>

			"movq %%mm1, %%mm6		\n\t" <comment type="block" pos:start="163:63" pos:end="163:69">/* R */</comment>

			"punpcklbw %%mm2, %%mm0		\n\t" <comment type="block" pos:start="165:63" pos:end="165:78">/* GBGBGBGB 0 */</comment>

			"punpcklbw %%mm4, %%mm1		\n\t" <comment type="block" pos:start="167:63" pos:end="167:78">/* 0R0R0R0R 0 */</comment>

			"punpckhbw %%mm2, %%mm5		\n\t" <comment type="block" pos:start="169:63" pos:end="169:78">/* GBGBGBGB 2 */</comment>

			"punpckhbw %%mm4, %%mm6		\n\t" <comment type="block" pos:start="171:63" pos:end="171:78">/* 0R0R0R0R 2 */</comment>

			"movq %%mm0, %%mm7		\n\t" <comment type="block" pos:start="173:63" pos:end="173:78">/* GBGBGBGB 0 */</comment>

			"movq %%mm5, %%mm3		\n\t" <comment type="block" pos:start="175:63" pos:end="175:78">/* GBGBGBGB 2 */</comment>

			"punpcklwd %%mm1, %%mm7		\n\t" <comment type="block" pos:start="177:63" pos:end="177:78">/* 0RGB0RGB 0 */</comment>

			"punpckhwd %%mm1, %%mm0		\n\t" <comment type="block" pos:start="179:63" pos:end="179:78">/* 0RGB0RGB 1 */</comment>

			"punpcklwd %%mm6, %%mm5		\n\t" <comment type="block" pos:start="181:63" pos:end="181:78">/* 0RGB0RGB 2 */</comment>

			"punpckhwd %%mm6, %%mm3		\n\t" <comment type="block" pos:start="183:63" pos:end="183:78">/* 0RGB0RGB 3 */</comment>



			"movq %%mm7, %%mm2		\n\t" <comment type="block" pos:start="187:63" pos:end="187:78">/* 0RGB0RGB 0 */</comment>

			"movq %%mm0, %%mm6		\n\t" <comment type="block" pos:start="189:63" pos:end="189:78">/* 0RGB0RGB 1 */</comment>

			"movq %%mm5, %%mm1		\n\t" <comment type="block" pos:start="191:63" pos:end="191:78">/* 0RGB0RGB 2 */</comment>

			"movq %%mm3, %%mm4		\n\t" <comment type="block" pos:start="193:63" pos:end="193:78">/* 0RGB0RGB 3 */</comment>



			"psllq $40, %%mm7		\n\t" <comment type="block" pos:start="197:63" pos:end="197:78">/* RGB00000 0 */</comment>

			"psllq $40, %%mm0		\n\t" <comment type="block" pos:start="199:63" pos:end="199:78">/* RGB00000 1 */</comment>

			"psllq $40, %%mm5		\n\t" <comment type="block" pos:start="201:63" pos:end="201:78">/* RGB00000 2 */</comment>

			"psllq $40, %%mm3		\n\t" <comment type="block" pos:start="203:63" pos:end="203:78">/* RGB00000 3 */</comment>



			"punpckhdq %%mm2, %%mm7		\n\t" <comment type="block" pos:start="207:63" pos:end="207:78">/* 0RGBRGB0 0 */</comment>

			"punpckhdq %%mm6, %%mm0		\n\t" <comment type="block" pos:start="209:63" pos:end="209:78">/* 0RGBRGB0 1 */</comment>

			"punpckhdq %%mm1, %%mm5		\n\t" <comment type="block" pos:start="211:63" pos:end="211:78">/* 0RGBRGB0 2 */</comment>

			"punpckhdq %%mm4, %%mm3		\n\t" <comment type="block" pos:start="213:63" pos:end="213:78">/* 0RGBRGB0 3 */</comment>



			"psrlq $8, %%mm7		\n\t" <comment type="block" pos:start="217:63" pos:end="217:78">/* 00RGBRGB 0 */</comment>

			"movq %%mm0, %%mm6		\n\t" <comment type="block" pos:start="219:63" pos:end="219:78">/* 0RGBRGB0 1 */</comment>

			"psllq $40, %%mm0		\n\t" <comment type="block" pos:start="221:63" pos:end="221:78">/* GB000000 1 */</comment>

			"por %%mm0, %%mm7		\n\t" <comment type="block" pos:start="223:63" pos:end="223:78">/* GBRGBRGB 0 */</comment>

			MOVNTQ" %%mm7, (%1)		\n\t"



			"movd 4 (%2, %0), %%mm0;" <comment type="block" pos:start="229:51" pos:end="229:89">/* Load 4 Cb 00 00 00 00 u3 u2 u1 u0 */</comment>



			"psrlq $24, %%mm6		\n\t" <comment type="block" pos:start="233:63" pos:end="233:78">/* 0000RGBR 1 */</comment>

			"movq %%mm5, %%mm1		\n\t" <comment type="block" pos:start="235:63" pos:end="235:78">/* 0RGBRGB0 2 */</comment>

			"psllq $24, %%mm5		\n\t" <comment type="block" pos:start="237:63" pos:end="237:78">/* BRGB0000 2 */</comment>

			"por %%mm5, %%mm6		\n\t" <comment type="block" pos:start="239:63" pos:end="239:78">/* BRGBRGBR 1 */</comment>

			MOVNTQ" %%mm6, 8(%1)		\n\t"



			"movq 8 (%5, %0, 2), %%mm6;" <comment type="block" pos:start="245:54" pos:end="245:91">/* Load 8 Y Y7 Y6 Y5 Y4 Y3 Y2 Y1 Y0 */</comment>



			"psrlq $40, %%mm1		\n\t" <comment type="block" pos:start="249:63" pos:end="249:78">/* 000000RG 2 */</comment>

			"psllq $8, %%mm3		\n\t" <comment type="block" pos:start="251:63" pos:end="251:78">/* RGBRGB00 3 */</comment>

			"por %%mm3, %%mm1		\n\t" <comment type="block" pos:start="253:63" pos:end="253:78">/* RGBRGBRG 2 */</comment>

			MOVNTQ" %%mm1, 16(%1)		\n\t"



			"movd 4 (%3, %0), %%mm1;" <comment type="block" pos:start="259:51" pos:end="259:89">/* Load 4 Cr 00 00 00 00 v3 v2 v1 v0 */</comment>

			"pxor %%mm4, %%mm4		\n\t"

<cpp:endif pos:start="263:1" pos:end="263:6">#<cpp:directive pos:start="263:2" pos:end="263:6">endif</cpp:directive></cpp:endif>



		     "add $24, %1			\n\t"

		     "add $4, %0			\n\t"

		     " js 1b				\n\t"



		     : "+r" (index), "+r" (_image)

		     : "r" (_pu - index), "r" (_pv - index), "r"(&amp;c-&gt;redDither), "r" (_py - 2*index)

		     );</asm>

    </block_content>}</block></for>



    <asm pos:start="285:5" pos:end="285:32">__asm__ <specifier pos:start="285:13" pos:end="285:24">__volatile__</specifier> (EMMS);</asm>

    <return pos:start="287:5" pos:end="287:21">return <expr pos:start="287:12" pos:end="287:20"><name pos:start="287:12" pos:end="287:20">srcSliceH</name></expr>;</return>

</block_content>}</block></function>
</unit>
