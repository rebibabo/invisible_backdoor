<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20695.c" pos:tabs="8"><function pos:start="1:1" pos:end="429:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:35">cook_decode_init</name><parameter_list pos:start="1:36" pos:end="1:58">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="429:1">{<block_content pos:start="5:5" pos:end="427:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">COOKContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">q</name> <init pos:start="5:20" pos:end="5:37">= <expr pos:start="5:22" pos:end="5:37"><name pos:start="5:22" pos:end="5:37"><name pos:start="5:22" pos:end="5:26">avctx</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">edata_ptr</name> <init pos:start="7:30" pos:end="7:47">= <expr pos:start="7:32" pos:end="7:47"><name pos:start="7:32" pos:end="7:47"><name pos:start="7:32" pos:end="7:36">avctx</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:47">extradata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:69"><decl pos:start="9:5" pos:end="9:68"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:32">edata_ptr_end</name> <init pos:start="9:34" pos:end="9:68">= <expr pos:start="9:36" pos:end="9:68"><name pos:start="9:36" pos:end="9:44">edata_ptr</name> <operator pos:start="9:46" pos:end="9:46">+</operator> <name pos:start="9:48" pos:end="9:68"><name pos:start="9:48" pos:end="9:52">avctx</name><operator pos:start="9:53" pos:end="9:54">-&gt;</operator><name pos:start="9:55" pos:end="9:68">extradata_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">extradata_size</name> <init pos:start="11:24" pos:end="11:46">= <expr pos:start="11:26" pos:end="11:46"><name pos:start="11:26" pos:end="11:46"><name pos:start="11:26" pos:end="11:30">avctx</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:46">extradata_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">s</name> <init pos:start="13:11" pos:end="13:13">= <expr pos:start="13:13" pos:end="13:13"><literal type="number" pos:start="13:13" pos:end="13:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:29">channel_mask</name> <init pos:start="15:31" pos:end="15:33">= <expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:25">samples_per_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:5">q</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:12">avctx</name></name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:20">avctx</name></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:52">/* Take care of the codec specific extradata. */</comment>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:22">extradata_size</name> <operator pos:start="27:24" pos:end="27:24">&lt;</operator> <literal type="number" pos:start="27:26" pos:end="27:26">8</literal></expr>)</condition> <block pos:start="27:29" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:35">

        <expr_stmt pos:start="29:9" pos:end="29:70"><expr pos:start="29:9" pos:end="29:69"><call pos:start="29:9" pos:end="29:69"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:69">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:68"><expr pos:start="29:37" pos:end="29:68"><literal type="string" pos:start="29:37" pos:end="29:68">"Necessary extradata missing!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:80"><expr pos:start="35:5" pos:end="35:79"><call pos:start="35:5" pos:end="35:79"><name pos:start="35:5" pos:end="35:10">av_log</name><argument_list pos:start="35:11" pos:end="35:79">(<argument pos:start="35:12" pos:end="35:16"><expr pos:start="35:12" pos:end="35:16"><name pos:start="35:12" pos:end="35:16">avctx</name></expr></argument>, <argument pos:start="35:19" pos:end="35:30"><expr pos:start="35:19" pos:end="35:30"><name pos:start="35:19" pos:end="35:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="35:33" pos:end="35:55"><expr pos:start="35:33" pos:end="35:55"><literal type="string" pos:start="35:33" pos:end="35:55">"codecdata_length=%d\n"</literal></expr></argument>, <argument pos:start="35:58" pos:end="35:78"><expr pos:start="35:58" pos:end="35:78"><name pos:start="35:58" pos:end="35:78"><name pos:start="35:58" pos:end="35:62">avctx</name><operator pos:start="35:63" pos:end="35:64">-&gt;</operator><name pos:start="35:65" pos:end="35:78">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:59">/* Take data from the AVCodecContext (RM container). */</comment>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:25">(<expr pos:start="41:9" pos:end="41:24"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:24"><name pos:start="41:10" pos:end="41:14">avctx</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:24">channels</name></name></expr>)</condition> <block pos:start="41:27" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35">

        <expr_stmt pos:start="43:9" pos:end="43:68"><expr pos:start="43:9" pos:end="43:67"><call pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:67">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:66"><expr pos:start="43:37" pos:end="43:66"><literal type="string" pos:start="43:37" pos:end="43:66">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:25">/* Initialize RNG. */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><call pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:15">av_lfg_init</name><argument_list pos:start="53:16" pos:end="53:36">(<argument pos:start="53:17" pos:end="53:32"><expr pos:start="53:17" pos:end="53:32"><operator pos:start="53:17" pos:end="53:17">&amp;</operator><name pos:start="53:18" pos:end="53:32"><name pos:start="53:18" pos:end="53:18">q</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:32">random_state</name></name></expr></argument>, <argument pos:start="53:35" pos:end="53:35"><expr pos:start="53:35" pos:end="53:35"><literal type="number" pos:start="53:35" pos:end="53:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><call pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:20">ff_audiodsp_init</name><argument_list pos:start="57:21" pos:end="57:30">(<argument pos:start="57:22" pos:end="57:29"><expr pos:start="57:22" pos:end="57:29"><operator pos:start="57:22" pos:end="57:22">&amp;</operator><name pos:start="57:23" pos:end="57:29"><name pos:start="57:23" pos:end="57:23">q</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:29">adsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="61:5" pos:end="321:5">while <condition pos:start="61:11" pos:end="61:37">(<expr pos:start="61:12" pos:end="61:36"><name pos:start="61:12" pos:end="61:20">edata_ptr</name> <operator pos:start="61:22" pos:end="61:22">&lt;</operator> <name pos:start="61:24" pos:end="61:36">edata_ptr_end</name></expr>)</condition> <block pos:start="61:39" pos:end="321:5">{<block_content pos:start="67:9" pos:end="319:9">

        <comment type="block" pos:start="63:9" pos:end="65:73">/* 8 for mono, 16 for stereo, ? for multichannel

           Swap to right endianness so we don't need to care later on. */</comment>

        <if_stmt pos:start="67:9" pos:end="77:9"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="67:32">(<expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:26">extradata_size</name> <operator pos:start="67:28" pos:end="67:29">&gt;=</operator> <literal type="number" pos:start="67:31" pos:end="67:31">8</literal></expr>)</condition> <block pos:start="67:34" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:32">

            <expr_stmt pos:start="69:13" pos:end="69:74"><expr pos:start="69:13" pos:end="69:73"><name pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:13">q</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:24">subpacket</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">s</name></expr>]</index></name><operator pos:start="69:28" pos:end="69:28">.</operator><name pos:start="69:29" pos:end="69:39">cookversion</name> <operator pos:start="69:41" pos:end="69:41">=</operator> <call pos:start="69:43" pos:end="69:73"><name pos:start="69:43" pos:end="69:61">bytestream_get_be32</name><argument_list pos:start="69:62" pos:end="69:73">(<argument pos:start="69:63" pos:end="69:72"><expr pos:start="69:63" pos:end="69:72"><operator pos:start="69:63" pos:end="69:63">&amp;</operator><name pos:start="69:64" pos:end="69:72">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:74"><expr pos:start="71:13" pos:end="71:73"><name pos:start="71:13" pos:end="71:29">samples_per_frame</name>           <operator pos:start="71:41" pos:end="71:41">=</operator> <call pos:start="71:43" pos:end="71:73"><name pos:start="71:43" pos:end="71:61">bytestream_get_be16</name><argument_list pos:start="71:62" pos:end="71:73">(<argument pos:start="71:63" pos:end="71:72"><expr pos:start="71:63" pos:end="71:72"><operator pos:start="71:63" pos:end="71:63">&amp;</operator><name pos:start="71:64" pos:end="71:72">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:71"><expr pos:start="73:13" pos:end="73:70"><name pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:13">q</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:24">subpacket</name><index pos:start="73:25" pos:end="73:27">[<expr pos:start="73:26" pos:end="73:26"><name pos:start="73:26" pos:end="73:26">s</name></expr>]</index></name><operator pos:start="73:28" pos:end="73:28">.</operator><name pos:start="73:29" pos:end="73:36">subbands</name> <operator pos:start="73:38" pos:end="73:38">=</operator> <call pos:start="73:40" pos:end="73:70"><name pos:start="73:40" pos:end="73:58">bytestream_get_be16</name><argument_list pos:start="73:59" pos:end="73:70">(<argument pos:start="73:60" pos:end="73:69"><expr pos:start="73:60" pos:end="73:69"><operator pos:start="73:60" pos:end="73:60">&amp;</operator><name pos:start="73:61" pos:end="73:69">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:26">extradata_size</name> <operator pos:start="75:28" pos:end="75:29">-=</operator> <literal type="number" pos:start="75:31" pos:end="75:31">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="89:9"><if pos:start="79:9" pos:end="89:9">if <condition pos:start="79:12" pos:end="79:32">(<expr pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:26">extradata_size</name> <operator pos:start="79:28" pos:end="79:29">&gt;=</operator> <literal type="number" pos:start="79:31" pos:end="79:31">8</literal></expr>)</condition> <block pos:start="79:34" pos:end="89:9">{<block_content pos:start="81:13" pos:end="87:32">

            <expr_stmt pos:start="81:13" pos:end="81:44"><expr pos:start="81:13" pos:end="81:43"><call pos:start="81:13" pos:end="81:43"><name pos:start="81:13" pos:end="81:31">bytestream_get_be32</name><argument_list pos:start="81:32" pos:end="81:43">(<argument pos:start="81:33" pos:end="81:42"><expr pos:start="81:33" pos:end="81:42"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:42">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:start="81:49" pos:end="81:65">// Unknown unused</comment>

            <expr_stmt pos:start="83:13" pos:end="83:79"><expr pos:start="83:13" pos:end="83:78"><name pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:13">q</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:24">subpacket</name><index pos:start="83:25" pos:end="83:27">[<expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">s</name></expr>]</index></name><operator pos:start="83:28" pos:end="83:28">.</operator><name pos:start="83:29" pos:end="83:44">js_subband_start</name> <operator pos:start="83:46" pos:end="83:46">=</operator> <call pos:start="83:48" pos:end="83:78"><name pos:start="83:48" pos:end="83:66">bytestream_get_be16</name><argument_list pos:start="83:67" pos:end="83:78">(<argument pos:start="83:68" pos:end="83:77"><expr pos:start="83:68" pos:end="83:77"><operator pos:start="83:68" pos:end="83:68">&amp;</operator><name pos:start="83:69" pos:end="83:77">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:74"><expr pos:start="85:13" pos:end="85:73"><name pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:13">q</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:24">subpacket</name><index pos:start="85:25" pos:end="85:27">[<expr pos:start="85:26" pos:end="85:26"><name pos:start="85:26" pos:end="85:26">s</name></expr>]</index></name><operator pos:start="85:28" pos:end="85:28">.</operator><name pos:start="85:29" pos:end="85:39">js_vlc_bits</name> <operator pos:start="85:41" pos:end="85:41">=</operator> <call pos:start="85:43" pos:end="85:73"><name pos:start="85:43" pos:end="85:61">bytestream_get_be16</name><argument_list pos:start="85:62" pos:end="85:73">(<argument pos:start="85:63" pos:end="85:72"><expr pos:start="85:63" pos:end="85:72"><operator pos:start="85:63" pos:end="85:63">&amp;</operator><name pos:start="85:64" pos:end="85:72">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:32"><expr pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:26">extradata_size</name> <operator pos:start="87:28" pos:end="87:29">-=</operator> <literal type="number" pos:start="87:31" pos:end="87:31">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="93:9" pos:end="93:53">/* Initialize extradata related variables. */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:82"><expr pos:start="95:9" pos:end="95:81"><name pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:9">q</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:20">subpacket</name><index pos:start="95:21" pos:end="95:23">[<expr pos:start="95:22" pos:end="95:22"><name pos:start="95:22" pos:end="95:22">s</name></expr>]</index></name><operator pos:start="95:24" pos:end="95:24">.</operator><name pos:start="95:25" pos:end="95:43">samples_per_channel</name> <operator pos:start="95:45" pos:end="95:45">=</operator> <name pos:start="95:47" pos:end="95:63">samples_per_frame</name> <operator pos:start="95:65" pos:end="95:65">/</operator> <name pos:start="95:67" pos:end="95:81"><name pos:start="95:67" pos:end="95:71">avctx</name><operator pos:start="95:72" pos:end="95:73">-&gt;</operator><name pos:start="95:74" pos:end="95:81">channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:68"><expr pos:start="97:9" pos:end="97:67"><name pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:9">q</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:20">subpacket</name><index pos:start="97:21" pos:end="97:23">[<expr pos:start="97:22" pos:end="97:22"><name pos:start="97:22" pos:end="97:22">s</name></expr>]</index></name><operator pos:start="97:24" pos:end="97:24">.</operator><name pos:start="97:25" pos:end="97:42">bits_per_subpacket</name> <operator pos:start="97:44" pos:end="97:44">=</operator> <name pos:start="97:46" pos:end="97:63"><name pos:start="97:46" pos:end="97:50">avctx</name><operator pos:start="97:51" pos:end="97:52">-&gt;</operator><name pos:start="97:53" pos:end="97:63">block_align</name></name> <operator pos:start="97:65" pos:end="97:65">*</operator> <literal type="number" pos:start="97:67" pos:end="97:67">8</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="101:9" pos:end="101:45">/* Initialize default data states. */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:48"><expr pos:start="103:9" pos:end="103:47"><name pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:9">q</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:20">subpacket</name><index pos:start="103:21" pos:end="103:23">[<expr pos:start="103:22" pos:end="103:22"><name pos:start="103:22" pos:end="103:22">s</name></expr>]</index></name><operator pos:start="103:24" pos:end="103:24">.</operator><name pos:start="103:25" pos:end="103:43">log2_numvector_size</name> <operator pos:start="103:45" pos:end="103:45">=</operator> <literal type="number" pos:start="103:47" pos:end="103:47">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:66"><expr pos:start="105:9" pos:end="105:65"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:9">q</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:20">subpacket</name><index pos:start="105:21" pos:end="105:23">[<expr pos:start="105:22" pos:end="105:22"><name pos:start="105:22" pos:end="105:22">s</name></expr>]</index></name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:38">total_subbands</name> <operator pos:start="105:40" pos:end="105:40">=</operator> <name pos:start="105:42" pos:end="105:56"><name pos:start="105:42" pos:end="105:42">q</name><operator pos:start="105:43" pos:end="105:44">-&gt;</operator><name pos:start="105:45" pos:end="105:53">subpacket</name><index pos:start="105:54" pos:end="105:56">[<expr pos:start="105:55" pos:end="105:55"><name pos:start="105:55" pos:end="105:55">s</name></expr>]</index></name><operator pos:start="105:57" pos:end="105:57">.</operator><name pos:start="105:58" pos:end="105:65">subbands</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:41"><expr pos:start="107:9" pos:end="107:40"><name pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:9">q</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:20">subpacket</name><index pos:start="107:21" pos:end="107:23">[<expr pos:start="107:22" pos:end="107:22"><name pos:start="107:22" pos:end="107:22">s</name></expr>]</index></name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:36">num_channels</name> <operator pos:start="107:38" pos:end="107:38">=</operator> <literal type="number" pos:start="107:40" pos:end="107:40">1</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:52">/* Initialize version-dependent variables */</comment>



        <expr_stmt pos:start="115:9" pos:end="117:44"><expr pos:start="115:9" pos:end="117:43"><call pos:start="115:9" pos:end="117:43"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="117:43">(<argument pos:start="115:16" pos:end="115:20"><expr pos:start="115:16" pos:end="115:20"><name pos:start="115:16" pos:end="115:20">avctx</name></expr></argument>, <argument pos:start="115:23" pos:end="115:34"><expr pos:start="115:23" pos:end="115:34"><name pos:start="115:23" pos:end="115:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="115:37" pos:end="115:68"><expr pos:start="115:37" pos:end="115:68"><literal type="string" pos:start="115:37" pos:end="115:68">"subpacket[%i].cookversion=%x\n"</literal></expr></argument>, <argument pos:start="115:71" pos:end="115:71"><expr pos:start="115:71" pos:end="115:71"><name pos:start="115:71" pos:end="115:71">s</name></expr></argument>,

               <argument pos:start="117:16" pos:end="117:42"><expr pos:start="117:16" pos:end="117:42"><name pos:start="117:16" pos:end="117:30"><name pos:start="117:16" pos:end="117:16">q</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:27">subpacket</name><index pos:start="117:28" pos:end="117:30">[<expr pos:start="117:29" pos:end="117:29"><name pos:start="117:29" pos:end="117:29">s</name></expr>]</index></name><operator pos:start="117:31" pos:end="117:31">.</operator><name pos:start="117:32" pos:end="117:42">cookversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:9">q</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:20">subpacket</name><index pos:start="119:21" pos:end="119:23">[<expr pos:start="119:22" pos:end="119:22"><name pos:start="119:22" pos:end="119:22">s</name></expr>]</index></name><operator pos:start="119:24" pos:end="119:24">.</operator><name pos:start="119:25" pos:end="119:36">joint_stereo</name> <operator pos:start="119:38" pos:end="119:38">=</operator> <literal type="number" pos:start="119:40" pos:end="119:40">0</literal></expr>;</expr_stmt>

        <switch pos:start="121:9" pos:end="241:9">switch <condition pos:start="121:16" pos:end="121:44">(<expr pos:start="121:17" pos:end="121:43"><name pos:start="121:17" pos:end="121:31"><name pos:start="121:17" pos:end="121:17">q</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:28">subpacket</name><index pos:start="121:29" pos:end="121:31">[<expr pos:start="121:30" pos:end="121:30"><name pos:start="121:30" pos:end="121:30">s</name></expr>]</index></name><operator pos:start="121:32" pos:end="121:32">.</operator><name pos:start="121:33" pos:end="121:43">cookversion</name></expr>)</condition> <block pos:start="121:46" pos:end="241:9">{<block_content pos:start="123:9" pos:end="239:40">

        <case pos:start="123:9" pos:end="123:18">case <expr pos:start="123:14" pos:end="123:17"><name pos:start="123:14" pos:end="123:17">MONO</name></expr>:</case>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:37">(<expr pos:start="125:17" pos:end="125:36"><name pos:start="125:17" pos:end="125:31"><name pos:start="125:17" pos:end="125:21">avctx</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:31">channels</name></name> <operator pos:start="125:33" pos:end="125:34">!=</operator> <literal type="number" pos:start="125:36" pos:end="125:36">1</literal></expr>)</condition> <block pos:start="125:39" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:44">

                <expr_stmt pos:start="127:17" pos:end="127:72"><expr pos:start="127:17" pos:end="127:71"><call pos:start="127:17" pos:end="127:71"><name pos:start="127:17" pos:end="127:37">avpriv_request_sample</name><argument_list pos:start="127:38" pos:end="127:71">(<argument pos:start="127:39" pos:end="127:43"><expr pos:start="127:39" pos:end="127:43"><name pos:start="127:39" pos:end="127:43">avctx</name></expr></argument>, <argument pos:start="127:46" pos:end="127:70"><expr pos:start="127:46" pos:end="127:70"><literal type="string" pos:start="127:46" pos:end="127:70">"Container channels != 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="129:17" pos:end="129:44">return <expr pos:start="129:24" pos:end="129:43"><name pos:start="129:24" pos:end="129:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:50"><expr pos:start="133:13" pos:end="133:49"><call pos:start="133:13" pos:end="133:49"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="133:49">(<argument pos:start="133:20" pos:end="133:24"><expr pos:start="133:20" pos:end="133:24"><name pos:start="133:20" pos:end="133:24">avctx</name></expr></argument>, <argument pos:start="133:27" pos:end="133:38"><expr pos:start="133:27" pos:end="133:38"><name pos:start="133:27" pos:end="133:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="133:41" pos:end="133:48"><expr pos:start="133:41" pos:end="133:48"><literal type="string" pos:start="133:41" pos:end="133:48">"MONO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="135:13" pos:end="135:18">break;</break>

        <case pos:start="137:9" pos:end="137:20">case <expr pos:start="137:14" pos:end="137:19"><name pos:start="137:14" pos:end="137:19">STEREO</name></expr>:</case>

            <if_stmt pos:start="139:13" pos:end="145:13"><if pos:start="139:13" pos:end="145:13">if <condition pos:start="139:16" pos:end="139:37">(<expr pos:start="139:17" pos:end="139:36"><name pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:21">avctx</name><operator pos:start="139:22" pos:end="139:23">-&gt;</operator><name pos:start="139:24" pos:end="139:31">channels</name></name> <operator pos:start="139:33" pos:end="139:34">!=</operator> <literal type="number" pos:start="139:36" pos:end="139:36">1</literal></expr>)</condition> <block pos:start="139:39" pos:end="145:13">{<block_content pos:start="141:17" pos:end="143:49">

                <expr_stmt pos:start="141:17" pos:end="141:53"><expr pos:start="141:17" pos:end="141:52"><name pos:start="141:17" pos:end="141:31"><name pos:start="141:17" pos:end="141:17">q</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:28">subpacket</name><index pos:start="141:29" pos:end="141:31">[<expr pos:start="141:30" pos:end="141:30"><name pos:start="141:30" pos:end="141:30">s</name></expr>]</index></name><operator pos:start="141:32" pos:end="141:32">.</operator><name pos:start="141:33" pos:end="141:48">bits_per_subpdiv</name> <operator pos:start="141:50" pos:end="141:50">=</operator> <literal type="number" pos:start="141:52" pos:end="141:52">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:49"><expr pos:start="143:17" pos:end="143:48"><name pos:start="143:17" pos:end="143:31"><name pos:start="143:17" pos:end="143:17">q</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:28">subpacket</name><index pos:start="143:29" pos:end="143:31">[<expr pos:start="143:30" pos:end="143:30"><name pos:start="143:30" pos:end="143:30">s</name></expr>]</index></name><operator pos:start="143:32" pos:end="143:32">.</operator><name pos:start="143:33" pos:end="143:44">num_channels</name> <operator pos:start="143:46" pos:end="143:46">=</operator> <literal type="number" pos:start="143:48" pos:end="143:48">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:52"><expr pos:start="147:13" pos:end="147:51"><call pos:start="147:13" pos:end="147:51"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="147:51">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="147:41" pos:end="147:50"><expr pos:start="147:41" pos:end="147:50"><literal type="string" pos:start="147:41" pos:end="147:50">"STEREO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:26">case <expr pos:start="151:14" pos:end="151:25"><name pos:start="151:14" pos:end="151:25">JOINT_STEREO</name></expr>:</case>

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:37">(<expr pos:start="153:17" pos:end="153:36"><name pos:start="153:17" pos:end="153:31"><name pos:start="153:17" pos:end="153:21">avctx</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:31">channels</name></name> <operator pos:start="153:33" pos:end="153:34">!=</operator> <literal type="number" pos:start="153:36" pos:end="153:36">2</literal></expr>)</condition> <block pos:start="153:39" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:44">

                <expr_stmt pos:start="155:17" pos:end="155:72"><expr pos:start="155:17" pos:end="155:71"><call pos:start="155:17" pos:end="155:71"><name pos:start="155:17" pos:end="155:37">avpriv_request_sample</name><argument_list pos:start="155:38" pos:end="155:71">(<argument pos:start="155:39" pos:end="155:43"><expr pos:start="155:39" pos:end="155:43"><name pos:start="155:39" pos:end="155:43">avctx</name></expr></argument>, <argument pos:start="155:46" pos:end="155:70"><expr pos:start="155:46" pos:end="155:70"><literal type="string" pos:start="155:46" pos:end="155:70">"Container channels != 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="157:17" pos:end="157:44">return <expr pos:start="157:24" pos:end="157:43"><name pos:start="157:24" pos:end="157:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:58"><expr pos:start="161:13" pos:end="161:57"><call pos:start="161:13" pos:end="161:57"><name pos:start="161:13" pos:end="161:18">av_log</name><argument_list pos:start="161:19" pos:end="161:57">(<argument pos:start="161:20" pos:end="161:24"><expr pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:24">avctx</name></expr></argument>, <argument pos:start="161:27" pos:end="161:38"><expr pos:start="161:27" pos:end="161:38"><name pos:start="161:27" pos:end="161:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="161:41" pos:end="161:56"><expr pos:start="161:41" pos:end="161:56"><literal type="string" pos:start="161:41" pos:end="161:56">"JOINT_STEREO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="173:13"><if pos:start="163:13" pos:end="173:13">if <condition pos:start="163:16" pos:end="163:44">(<expr pos:start="163:17" pos:end="163:43"><name pos:start="163:17" pos:end="163:37"><name pos:start="163:17" pos:end="163:21">avctx</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:37">extradata_size</name></name> <operator pos:start="163:39" pos:end="163:40">&gt;=</operator> <literal type="number" pos:start="163:42" pos:end="163:43">16</literal></expr>)</condition> <block pos:start="163:46" pos:end="173:13">{<block_content pos:start="165:17" pos:end="171:49">

                <expr_stmt pos:start="165:17" pos:end="167:82"><expr pos:start="165:17" pos:end="167:81"><name pos:start="165:17" pos:end="165:31"><name pos:start="165:17" pos:end="165:17">q</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:28">subpacket</name><index pos:start="165:29" pos:end="165:31">[<expr pos:start="165:30" pos:end="165:30"><name pos:start="165:30" pos:end="165:30">s</name></expr>]</index></name><operator pos:start="165:32" pos:end="165:32">.</operator><name pos:start="165:33" pos:end="165:46">total_subbands</name> <operator pos:start="165:48" pos:end="165:48">=</operator> <name pos:start="165:50" pos:end="165:64"><name pos:start="165:50" pos:end="165:50">q</name><operator pos:start="165:51" pos:end="165:52">-&gt;</operator><name pos:start="165:53" pos:end="165:61">subpacket</name><index pos:start="165:62" pos:end="165:64">[<expr pos:start="165:63" pos:end="165:63"><name pos:start="165:63" pos:end="165:63">s</name></expr>]</index></name><operator pos:start="165:65" pos:end="165:65">.</operator><name pos:start="165:66" pos:end="165:73">subbands</name> <operator pos:start="165:75" pos:end="165:75">+</operator>

                                                 <name pos:start="167:50" pos:end="167:64"><name pos:start="167:50" pos:end="167:50">q</name><operator pos:start="167:51" pos:end="167:52">-&gt;</operator><name pos:start="167:53" pos:end="167:61">subpacket</name><index pos:start="167:62" pos:end="167:64">[<expr pos:start="167:63" pos:end="167:63"><name pos:start="167:63" pos:end="167:63">s</name></expr>]</index></name><operator pos:start="167:65" pos:end="167:65">.</operator><name pos:start="167:66" pos:end="167:81">js_subband_start</name></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:49"><expr pos:start="169:17" pos:end="169:48"><name pos:start="169:17" pos:end="169:31"><name pos:start="169:17" pos:end="169:17">q</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:28">subpacket</name><index pos:start="169:29" pos:end="169:31">[<expr pos:start="169:30" pos:end="169:30"><name pos:start="169:30" pos:end="169:30">s</name></expr>]</index></name><operator pos:start="169:32" pos:end="169:32">.</operator><name pos:start="169:33" pos:end="169:44">joint_stereo</name> <operator pos:start="169:46" pos:end="169:46">=</operator> <literal type="number" pos:start="169:48" pos:end="169:48">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:49"><expr pos:start="171:17" pos:end="171:48"><name pos:start="171:17" pos:end="171:31"><name pos:start="171:17" pos:end="171:17">q</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:28">subpacket</name><index pos:start="171:29" pos:end="171:31">[<expr pos:start="171:30" pos:end="171:30"><name pos:start="171:30" pos:end="171:30">s</name></expr>]</index></name><operator pos:start="171:32" pos:end="171:32">.</operator><name pos:start="171:33" pos:end="171:44">num_channels</name> <operator pos:start="171:46" pos:end="171:46">=</operator> <literal type="number" pos:start="171:48" pos:end="171:48">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="175:13" pos:end="179:13"><if pos:start="175:13" pos:end="179:13">if <condition pos:start="175:16" pos:end="175:58">(<expr pos:start="175:17" pos:end="175:57"><name pos:start="175:17" pos:end="175:31"><name pos:start="175:17" pos:end="175:17">q</name><operator pos:start="175:18" pos:end="175:19">-&gt;</operator><name pos:start="175:20" pos:end="175:28">subpacket</name><index pos:start="175:29" pos:end="175:31">[<expr pos:start="175:30" pos:end="175:30"><name pos:start="175:30" pos:end="175:30">s</name></expr>]</index></name><operator pos:start="175:32" pos:end="175:32">.</operator><name pos:start="175:33" pos:end="175:51">samples_per_channel</name> <operator pos:start="175:53" pos:end="175:53">&gt;</operator> <literal type="number" pos:start="175:55" pos:end="175:57">256</literal></expr>)</condition> <block pos:start="175:60" pos:end="179:13">{<block_content pos:start="177:17" pos:end="177:56">

                <expr_stmt pos:start="177:17" pos:end="177:56"><expr pos:start="177:17" pos:end="177:55"><name pos:start="177:17" pos:end="177:31"><name pos:start="177:17" pos:end="177:17">q</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:28">subpacket</name><index pos:start="177:29" pos:end="177:31">[<expr pos:start="177:30" pos:end="177:30"><name pos:start="177:30" pos:end="177:30">s</name></expr>]</index></name><operator pos:start="177:32" pos:end="177:32">.</operator><name pos:start="177:33" pos:end="177:51">log2_numvector_size</name> <operator pos:start="177:53" pos:end="177:53">=</operator> <literal type="number" pos:start="177:55" pos:end="177:55">6</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="181:13" pos:end="185:13"><if pos:start="181:13" pos:end="185:13">if <condition pos:start="181:16" pos:end="181:58">(<expr pos:start="181:17" pos:end="181:57"><name pos:start="181:17" pos:end="181:31"><name pos:start="181:17" pos:end="181:17">q</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:28">subpacket</name><index pos:start="181:29" pos:end="181:31">[<expr pos:start="181:30" pos:end="181:30"><name pos:start="181:30" pos:end="181:30">s</name></expr>]</index></name><operator pos:start="181:32" pos:end="181:32">.</operator><name pos:start="181:33" pos:end="181:51">samples_per_channel</name> <operator pos:start="181:53" pos:end="181:53">&gt;</operator> <literal type="number" pos:start="181:55" pos:end="181:57">512</literal></expr>)</condition> <block pos:start="181:60" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:56">

                <expr_stmt pos:start="183:17" pos:end="183:56"><expr pos:start="183:17" pos:end="183:55"><name pos:start="183:17" pos:end="183:31"><name pos:start="183:17" pos:end="183:17">q</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:28">subpacket</name><index pos:start="183:29" pos:end="183:31">[<expr pos:start="183:30" pos:end="183:30"><name pos:start="183:30" pos:end="183:30">s</name></expr>]</index></name><operator pos:start="183:32" pos:end="183:32">.</operator><name pos:start="183:33" pos:end="183:51">log2_numvector_size</name> <operator pos:start="183:53" pos:end="183:53">=</operator> <literal type="number" pos:start="183:55" pos:end="183:55">7</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <case pos:start="189:9" pos:end="189:21">case <expr pos:start="189:14" pos:end="189:20"><name pos:start="189:14" pos:end="189:20">MC_COOK</name></expr>:</case>

            <expr_stmt pos:start="191:13" pos:end="191:59"><expr pos:start="191:13" pos:end="191:58"><call pos:start="191:13" pos:end="191:58"><name pos:start="191:13" pos:end="191:18">av_log</name><argument_list pos:start="191:19" pos:end="191:58">(<argument pos:start="191:20" pos:end="191:24"><expr pos:start="191:20" pos:end="191:24"><name pos:start="191:20" pos:end="191:24">avctx</name></expr></argument>, <argument pos:start="191:27" pos:end="191:38"><expr pos:start="191:27" pos:end="191:38"><name pos:start="191:27" pos:end="191:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="191:41" pos:end="191:57"><expr pos:start="191:41" pos:end="191:57"><literal type="string" pos:start="191:41" pos:end="191:57">"MULTI_CHANNEL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="195:95"><if pos:start="193:13" pos:end="195:95">if <condition pos:start="193:16" pos:end="193:36">(<expr pos:start="193:17" pos:end="193:35"><name pos:start="193:17" pos:end="193:30">extradata_size</name> <operator pos:start="193:32" pos:end="193:33">&gt;=</operator> <literal type="number" pos:start="193:35" pos:end="193:35">4</literal></expr>)</condition><block type="pseudo" pos:start="195:17" pos:end="195:95"><block_content pos:start="195:17" pos:end="195:95">

                <expr_stmt pos:start="195:17" pos:end="195:95"><expr pos:start="195:17" pos:end="195:94"><name pos:start="195:17" pos:end="195:28">channel_mask</name> <operator pos:start="195:30" pos:end="195:31">|=</operator> <name pos:start="195:33" pos:end="195:47"><name pos:start="195:33" pos:end="195:33">q</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:44">subpacket</name><index pos:start="195:45" pos:end="195:47">[<expr pos:start="195:46" pos:end="195:46"><name pos:start="195:46" pos:end="195:46">s</name></expr>]</index></name><operator pos:start="195:48" pos:end="195:48">.</operator><name pos:start="195:49" pos:end="195:60">channel_mask</name> <operator pos:start="195:62" pos:end="195:62">=</operator> <call pos:start="195:64" pos:end="195:94"><name pos:start="195:64" pos:end="195:82">bytestream_get_be32</name><argument_list pos:start="195:83" pos:end="195:94">(<argument pos:start="195:84" pos:end="195:93"><expr pos:start="195:84" pos:end="195:93"><operator pos:start="195:84" pos:end="195:84">&amp;</operator><name pos:start="195:85" pos:end="195:93">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="199:13" pos:end="227:72"><if pos:start="199:13" pos:end="225:13">if <condition pos:start="199:16" pos:end="199:84">(<expr pos:start="199:17" pos:end="199:83"><call pos:start="199:17" pos:end="199:79"><name pos:start="199:17" pos:end="199:49">av_get_channel_layout_nb_channels</name><argument_list pos:start="199:50" pos:end="199:79">(<argument pos:start="199:51" pos:end="199:78"><expr pos:start="199:51" pos:end="199:78"><name pos:start="199:51" pos:end="199:65"><name pos:start="199:51" pos:end="199:51">q</name><operator pos:start="199:52" pos:end="199:53">-&gt;</operator><name pos:start="199:54" pos:end="199:62">subpacket</name><index pos:start="199:63" pos:end="199:65">[<expr pos:start="199:64" pos:end="199:64"><name pos:start="199:64" pos:end="199:64">s</name></expr>]</index></name><operator pos:start="199:66" pos:end="199:66">.</operator><name pos:start="199:67" pos:end="199:78">channel_mask</name></expr></argument>)</argument_list></call> <operator pos:start="199:81" pos:end="199:81">&gt;</operator> <literal type="number" pos:start="199:83" pos:end="199:83">1</literal></expr>)</condition> <block pos:start="199:86" pos:end="225:13">{<block_content pos:start="201:17" pos:end="223:17">

                <expr_stmt pos:start="201:17" pos:end="203:82"><expr pos:start="201:17" pos:end="203:81"><name pos:start="201:17" pos:end="201:31"><name pos:start="201:17" pos:end="201:17">q</name><operator pos:start="201:18" pos:end="201:19">-&gt;</operator><name pos:start="201:20" pos:end="201:28">subpacket</name><index pos:start="201:29" pos:end="201:31">[<expr pos:start="201:30" pos:end="201:30"><name pos:start="201:30" pos:end="201:30">s</name></expr>]</index></name><operator pos:start="201:32" pos:end="201:32">.</operator><name pos:start="201:33" pos:end="201:46">total_subbands</name> <operator pos:start="201:48" pos:end="201:48">=</operator> <name pos:start="201:50" pos:end="201:64"><name pos:start="201:50" pos:end="201:50">q</name><operator pos:start="201:51" pos:end="201:52">-&gt;</operator><name pos:start="201:53" pos:end="201:61">subpacket</name><index pos:start="201:62" pos:end="201:64">[<expr pos:start="201:63" pos:end="201:63"><name pos:start="201:63" pos:end="201:63">s</name></expr>]</index></name><operator pos:start="201:65" pos:end="201:65">.</operator><name pos:start="201:66" pos:end="201:73">subbands</name> <operator pos:start="201:75" pos:end="201:75">+</operator>

                                                 <name pos:start="203:50" pos:end="203:64"><name pos:start="203:50" pos:end="203:50">q</name><operator pos:start="203:51" pos:end="203:52">-&gt;</operator><name pos:start="203:53" pos:end="203:61">subpacket</name><index pos:start="203:62" pos:end="203:64">[<expr pos:start="203:63" pos:end="203:63"><name pos:start="203:63" pos:end="203:63">s</name></expr>]</index></name><operator pos:start="203:65" pos:end="203:65">.</operator><name pos:start="203:66" pos:end="203:81">js_subband_start</name></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:49"><expr pos:start="205:17" pos:end="205:48"><name pos:start="205:17" pos:end="205:31"><name pos:start="205:17" pos:end="205:17">q</name><operator pos:start="205:18" pos:end="205:19">-&gt;</operator><name pos:start="205:20" pos:end="205:28">subpacket</name><index pos:start="205:29" pos:end="205:31">[<expr pos:start="205:30" pos:end="205:30"><name pos:start="205:30" pos:end="205:30">s</name></expr>]</index></name><operator pos:start="205:32" pos:end="205:32">.</operator><name pos:start="205:33" pos:end="205:44">joint_stereo</name> <operator pos:start="205:46" pos:end="205:46">=</operator> <literal type="number" pos:start="205:48" pos:end="205:48">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:49"><expr pos:start="207:17" pos:end="207:48"><name pos:start="207:17" pos:end="207:31"><name pos:start="207:17" pos:end="207:17">q</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:28">subpacket</name><index pos:start="207:29" pos:end="207:31">[<expr pos:start="207:30" pos:end="207:30"><name pos:start="207:30" pos:end="207:30">s</name></expr>]</index></name><operator pos:start="207:32" pos:end="207:32">.</operator><name pos:start="207:33" pos:end="207:44">num_channels</name> <operator pos:start="207:46" pos:end="207:46">=</operator> <literal type="number" pos:start="207:48" pos:end="207:48">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:77"><expr pos:start="209:17" pos:end="209:76"><name pos:start="209:17" pos:end="209:31"><name pos:start="209:17" pos:end="209:17">q</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:28">subpacket</name><index pos:start="209:29" pos:end="209:31">[<expr pos:start="209:30" pos:end="209:30"><name pos:start="209:30" pos:end="209:30">s</name></expr>]</index></name><operator pos:start="209:32" pos:end="209:32">.</operator><name pos:start="209:33" pos:end="209:51">samples_per_channel</name> <operator pos:start="209:53" pos:end="209:53">=</operator> <name pos:start="209:55" pos:end="209:71">samples_per_frame</name> <operator pos:start="209:73" pos:end="209:74">&gt;&gt;</operator> <literal type="number" pos:start="209:76" pos:end="209:76">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="213:17" pos:end="217:17"><if pos:start="213:17" pos:end="217:17">if <condition pos:start="213:20" pos:end="213:62">(<expr pos:start="213:21" pos:end="213:61"><name pos:start="213:21" pos:end="213:35"><name pos:start="213:21" pos:end="213:21">q</name><operator pos:start="213:22" pos:end="213:23">-&gt;</operator><name pos:start="213:24" pos:end="213:32">subpacket</name><index pos:start="213:33" pos:end="213:35">[<expr pos:start="213:34" pos:end="213:34"><name pos:start="213:34" pos:end="213:34">s</name></expr>]</index></name><operator pos:start="213:36" pos:end="213:36">.</operator><name pos:start="213:37" pos:end="213:55">samples_per_channel</name> <operator pos:start="213:57" pos:end="213:57">&gt;</operator> <literal type="number" pos:start="213:59" pos:end="213:61">256</literal></expr>)</condition> <block pos:start="213:64" pos:end="217:17">{<block_content pos:start="215:21" pos:end="215:60">

                    <expr_stmt pos:start="215:21" pos:end="215:60"><expr pos:start="215:21" pos:end="215:59"><name pos:start="215:21" pos:end="215:35"><name pos:start="215:21" pos:end="215:21">q</name><operator pos:start="215:22" pos:end="215:23">-&gt;</operator><name pos:start="215:24" pos:end="215:32">subpacket</name><index pos:start="215:33" pos:end="215:35">[<expr pos:start="215:34" pos:end="215:34"><name pos:start="215:34" pos:end="215:34">s</name></expr>]</index></name><operator pos:start="215:36" pos:end="215:36">.</operator><name pos:start="215:37" pos:end="215:55">log2_numvector_size</name> <operator pos:start="215:57" pos:end="215:57">=</operator> <literal type="number" pos:start="215:59" pos:end="215:59">6</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="219:17" pos:end="223:17"><if pos:start="219:17" pos:end="223:17">if <condition pos:start="219:20" pos:end="219:62">(<expr pos:start="219:21" pos:end="219:61"><name pos:start="219:21" pos:end="219:35"><name pos:start="219:21" pos:end="219:21">q</name><operator pos:start="219:22" pos:end="219:23">-&gt;</operator><name pos:start="219:24" pos:end="219:32">subpacket</name><index pos:start="219:33" pos:end="219:35">[<expr pos:start="219:34" pos:end="219:34"><name pos:start="219:34" pos:end="219:34">s</name></expr>]</index></name><operator pos:start="219:36" pos:end="219:36">.</operator><name pos:start="219:37" pos:end="219:55">samples_per_channel</name> <operator pos:start="219:57" pos:end="219:57">&gt;</operator> <literal type="number" pos:start="219:59" pos:end="219:61">512</literal></expr>)</condition> <block pos:start="219:64" pos:end="223:17">{<block_content pos:start="221:21" pos:end="221:60">

                    <expr_stmt pos:start="221:21" pos:end="221:60"><expr pos:start="221:21" pos:end="221:59"><name pos:start="221:21" pos:end="221:35"><name pos:start="221:21" pos:end="221:21">q</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:32">subpacket</name><index pos:start="221:33" pos:end="221:35">[<expr pos:start="221:34" pos:end="221:34"><name pos:start="221:34" pos:end="221:34">s</name></expr>]</index></name><operator pos:start="221:36" pos:end="221:36">.</operator><name pos:start="221:37" pos:end="221:55">log2_numvector_size</name> <operator pos:start="221:57" pos:end="221:57">=</operator> <literal type="number" pos:start="221:59" pos:end="221:59">7</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="225:15" pos:end="227:72">else<block type="pseudo" pos:start="227:17" pos:end="227:72"><block_content pos:start="227:17" pos:end="227:72">

                <expr_stmt pos:start="227:17" pos:end="227:72"><expr pos:start="227:17" pos:end="227:71"><name pos:start="227:17" pos:end="227:31"><name pos:start="227:17" pos:end="227:17">q</name><operator pos:start="227:18" pos:end="227:19">-&gt;</operator><name pos:start="227:20" pos:end="227:28">subpacket</name><index pos:start="227:29" pos:end="227:31">[<expr pos:start="227:30" pos:end="227:30"><name pos:start="227:30" pos:end="227:30">s</name></expr>]</index></name><operator pos:start="227:32" pos:end="227:32">.</operator><name pos:start="227:33" pos:end="227:51">samples_per_channel</name> <operator pos:start="227:53" pos:end="227:53">=</operator> <name pos:start="227:55" pos:end="227:71">samples_per_frame</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <break pos:start="231:13" pos:end="231:18">break;</break>

        <default pos:start="233:9" pos:end="233:16">default:</default>

            <expr_stmt pos:start="235:13" pos:end="237:63"><expr pos:start="235:13" pos:end="237:62"><call pos:start="235:13" pos:end="237:62"><name pos:start="235:13" pos:end="235:33">avpriv_request_sample</name><argument_list pos:start="235:34" pos:end="237:62">(<argument pos:start="235:35" pos:end="235:39"><expr pos:start="235:35" pos:end="235:39"><name pos:start="235:35" pos:end="235:39">avctx</name></expr></argument>, <argument pos:start="235:42" pos:end="235:58"><expr pos:start="235:42" pos:end="235:58"><literal type="string" pos:start="235:42" pos:end="235:58">"Cook version %d"</literal></expr></argument>,

                                  <argument pos:start="237:35" pos:end="237:61"><expr pos:start="237:35" pos:end="237:61"><name pos:start="237:35" pos:end="237:49"><name pos:start="237:35" pos:end="237:35">q</name><operator pos:start="237:36" pos:end="237:37">-&gt;</operator><name pos:start="237:38" pos:end="237:46">subpacket</name><index pos:start="237:47" pos:end="237:49">[<expr pos:start="237:48" pos:end="237:48"><name pos:start="237:48" pos:end="237:48">s</name></expr>]</index></name><operator pos:start="237:50" pos:end="237:50">.</operator><name pos:start="237:51" pos:end="237:61">cookversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="239:13" pos:end="239:40">return <expr pos:start="239:20" pos:end="239:39"><name pos:start="239:20" pos:end="239:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></switch>



        <if_stmt pos:start="245:9" pos:end="253:73"><if pos:start="245:9" pos:end="251:9">if <condition pos:start="245:12" pos:end="245:83">(<expr pos:start="245:13" pos:end="245:82"><name pos:start="245:13" pos:end="245:13">s</name> <operator pos:start="245:15" pos:end="245:15">&gt;</operator> <literal type="number" pos:start="245:17" pos:end="245:17">1</literal> <operator pos:start="245:19" pos:end="245:20">&amp;&amp;</operator> <name pos:start="245:22" pos:end="245:36"><name pos:start="245:22" pos:end="245:22">q</name><operator pos:start="245:23" pos:end="245:24">-&gt;</operator><name pos:start="245:25" pos:end="245:33">subpacket</name><index pos:start="245:34" pos:end="245:36">[<expr pos:start="245:35" pos:end="245:35"><name pos:start="245:35" pos:end="245:35">s</name></expr>]</index></name><operator pos:start="245:37" pos:end="245:37">.</operator><name pos:start="245:38" pos:end="245:56">samples_per_channel</name> <operator pos:start="245:58" pos:end="245:59">!=</operator> <name pos:start="245:61" pos:end="245:82"><name pos:start="245:61" pos:end="245:61">q</name><operator pos:start="245:62" pos:end="245:63">-&gt;</operator><name pos:start="245:64" pos:end="245:82">samples_per_channel</name></name></expr>)</condition> <block pos:start="245:85" pos:end="251:9">{<block_content pos:start="247:13" pos:end="249:39">

            <expr_stmt pos:start="247:13" pos:end="247:86"><expr pos:start="247:13" pos:end="247:85"><call pos:start="247:13" pos:end="247:85"><name pos:start="247:13" pos:end="247:18">av_log</name><argument_list pos:start="247:19" pos:end="247:85">(<argument pos:start="247:20" pos:end="247:24"><expr pos:start="247:20" pos:end="247:24"><name pos:start="247:20" pos:end="247:24">avctx</name></expr></argument>, <argument pos:start="247:27" pos:end="247:38"><expr pos:start="247:27" pos:end="247:38"><name pos:start="247:27" pos:end="247:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="247:41" pos:end="247:84"><expr pos:start="247:41" pos:end="247:84"><literal type="string" pos:start="247:41" pos:end="247:84">"different number of samples per channel!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="249:13" pos:end="249:39">return <expr pos:start="249:20" pos:end="249:38"><name pos:start="249:20" pos:end="249:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="251:11" pos:end="253:73">else<block type="pseudo" pos:start="253:13" pos:end="253:73"><block_content pos:start="253:13" pos:end="253:73">

            <expr_stmt pos:start="253:13" pos:end="253:73"><expr pos:start="253:13" pos:end="253:72"><name pos:start="253:13" pos:end="253:34"><name pos:start="253:13" pos:end="253:13">q</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:34">samples_per_channel</name></name> <operator pos:start="253:36" pos:end="253:36">=</operator> <name pos:start="253:38" pos:end="253:52"><name pos:start="253:38" pos:end="253:38">q</name><operator pos:start="253:39" pos:end="253:40">-&gt;</operator><name pos:start="253:41" pos:end="253:49">subpacket</name><index pos:start="253:50" pos:end="253:52">[<expr pos:start="253:51" pos:end="253:51"><literal type="number" pos:start="253:51" pos:end="253:51">0</literal></expr>]</index></name><operator pos:start="253:53" pos:end="253:53">.</operator><name pos:start="253:54" pos:end="253:72">samples_per_channel</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





        <comment type="block" pos:start="259:9" pos:end="259:43">/* Initialize variable relations */</comment>

        <expr_stmt pos:start="261:9" pos:end="261:84"><expr pos:start="261:9" pos:end="261:83"><name pos:start="261:9" pos:end="261:23"><name pos:start="261:9" pos:end="261:9">q</name><operator pos:start="261:10" pos:end="261:11">-&gt;</operator><name pos:start="261:12" pos:end="261:20">subpacket</name><index pos:start="261:21" pos:end="261:23">[<expr pos:start="261:22" pos:end="261:22"><name pos:start="261:22" pos:end="261:22">s</name></expr>]</index></name><operator pos:start="261:24" pos:end="261:24">.</operator><name pos:start="261:25" pos:end="261:38">numvector_size</name> <operator pos:start="261:40" pos:end="261:40">=</operator> <operator pos:start="261:42" pos:end="261:42">(</operator><literal type="number" pos:start="261:43" pos:end="261:43">1</literal> <operator pos:start="261:45" pos:end="261:46">&lt;&lt;</operator> <name pos:start="261:48" pos:end="261:62"><name pos:start="261:48" pos:end="261:48">q</name><operator pos:start="261:49" pos:end="261:50">-&gt;</operator><name pos:start="261:51" pos:end="261:59">subpacket</name><index pos:start="261:60" pos:end="261:62">[<expr pos:start="261:61" pos:end="261:61"><name pos:start="261:61" pos:end="261:61">s</name></expr>]</index></name><operator pos:start="261:63" pos:end="261:63">.</operator><name pos:start="261:64" pos:end="261:82">log2_numvector_size</name><operator pos:start="261:83" pos:end="261:83">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="265:9" pos:end="265:91">/* Try to catch some obviously faulty streams, otherwise it might be exploitable */</comment>

        <if_stmt pos:start="267:9" pos:end="273:9"><if pos:start="267:9" pos:end="273:9">if <condition pos:start="267:12" pos:end="267:48">(<expr pos:start="267:13" pos:end="267:47"><name pos:start="267:13" pos:end="267:27"><name pos:start="267:13" pos:end="267:13">q</name><operator pos:start="267:14" pos:end="267:15">-&gt;</operator><name pos:start="267:16" pos:end="267:24">subpacket</name><index pos:start="267:25" pos:end="267:27">[<expr pos:start="267:26" pos:end="267:26"><name pos:start="267:26" pos:end="267:26">s</name></expr>]</index></name><operator pos:start="267:28" pos:end="267:28">.</operator><name pos:start="267:29" pos:end="267:42">total_subbands</name> <operator pos:start="267:44" pos:end="267:44">&gt;</operator> <literal type="number" pos:start="267:46" pos:end="267:47">53</literal></expr>)</condition> <block pos:start="267:50" pos:end="273:9">{<block_content pos:start="269:13" pos:end="271:40">

            <expr_stmt pos:start="269:13" pos:end="269:64"><expr pos:start="269:13" pos:end="269:63"><call pos:start="269:13" pos:end="269:63"><name pos:start="269:13" pos:end="269:33">avpriv_request_sample</name><argument_list pos:start="269:34" pos:end="269:63">(<argument pos:start="269:35" pos:end="269:39"><expr pos:start="269:35" pos:end="269:39"><name pos:start="269:35" pos:end="269:39">avctx</name></expr></argument>, <argument pos:start="269:42" pos:end="269:62"><expr pos:start="269:42" pos:end="269:62"><literal type="string" pos:start="269:42" pos:end="269:62">"total_subbands &gt; 53"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="271:13" pos:end="271:40">return <expr pos:start="271:20" pos:end="271:39"><name pos:start="271:20" pos:end="271:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="277:9" pos:end="287:9"><if pos:start="277:9" pos:end="287:9">if <condition pos:start="277:12" pos:end="279:77">(<expr pos:start="277:13" pos:end="279:76"><operator pos:start="277:13" pos:end="277:13">(</operator><name pos:start="277:14" pos:end="277:28"><name pos:start="277:14" pos:end="277:14">q</name><operator pos:start="277:15" pos:end="277:16">-&gt;</operator><name pos:start="277:17" pos:end="277:25">subpacket</name><index pos:start="277:26" pos:end="277:28">[<expr pos:start="277:27" pos:end="277:27"><name pos:start="277:27" pos:end="277:27">s</name></expr>]</index></name><operator pos:start="277:29" pos:end="277:29">.</operator><name pos:start="277:30" pos:end="277:40">js_vlc_bits</name> <operator pos:start="277:42" pos:end="277:42">&gt;</operator> <literal type="number" pos:start="277:44" pos:end="277:44">6</literal><operator pos:start="277:45" pos:end="277:45">)</operator> <operator pos:start="277:47" pos:end="277:48">||</operator>

            <operator pos:start="279:13" pos:end="279:13">(</operator><name pos:start="279:14" pos:end="279:28"><name pos:start="279:14" pos:end="279:14">q</name><operator pos:start="279:15" pos:end="279:16">-&gt;</operator><name pos:start="279:17" pos:end="279:25">subpacket</name><index pos:start="279:26" pos:end="279:28">[<expr pos:start="279:27" pos:end="279:27"><name pos:start="279:27" pos:end="279:27">s</name></expr>]</index></name><operator pos:start="279:29" pos:end="279:29">.</operator><name pos:start="279:30" pos:end="279:40">js_vlc_bits</name> <operator pos:start="279:42" pos:end="279:42">&lt;</operator> <literal type="number" pos:start="279:44" pos:end="279:44">2</literal> <operator pos:start="279:46" pos:end="279:46">*</operator> <name pos:start="279:48" pos:end="279:62"><name pos:start="279:48" pos:end="279:48">q</name><operator pos:start="279:49" pos:end="279:50">-&gt;</operator><name pos:start="279:51" pos:end="279:59">subpacket</name><index pos:start="279:60" pos:end="279:62">[<expr pos:start="279:61" pos:end="279:61"><name pos:start="279:61" pos:end="279:61">s</name></expr>]</index></name><operator pos:start="279:63" pos:end="279:63">.</operator><name pos:start="279:64" pos:end="279:75">joint_stereo</name><operator pos:start="279:76" pos:end="279:76">)</operator></expr>)</condition> <block pos:start="279:79" pos:end="287:9">{<block_content pos:start="281:13" pos:end="285:39">

            <expr_stmt pos:start="281:13" pos:end="283:82"><expr pos:start="281:13" pos:end="283:81"><call pos:start="281:13" pos:end="283:81"><name pos:start="281:13" pos:end="281:18">av_log</name><argument_list pos:start="281:19" pos:end="283:81">(<argument pos:start="281:20" pos:end="281:24"><expr pos:start="281:20" pos:end="281:24"><name pos:start="281:20" pos:end="281:24">avctx</name></expr></argument>, <argument pos:start="281:27" pos:end="281:38"><expr pos:start="281:27" pos:end="281:38"><name pos:start="281:27" pos:end="281:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="281:41" pos:end="281:90"><expr pos:start="281:41" pos:end="281:90"><literal type="string" pos:start="281:41" pos:end="281:90">"js_vlc_bits = %d, only &gt;= %d and &lt;= 6 allowed!\n"</literal></expr></argument>,

                   <argument pos:start="283:20" pos:end="283:46"><expr pos:start="283:20" pos:end="283:46"><name pos:start="283:20" pos:end="283:34"><name pos:start="283:20" pos:end="283:20">q</name><operator pos:start="283:21" pos:end="283:22">-&gt;</operator><name pos:start="283:23" pos:end="283:31">subpacket</name><index pos:start="283:32" pos:end="283:34">[<expr pos:start="283:33" pos:end="283:33"><name pos:start="283:33" pos:end="283:33">s</name></expr>]</index></name><operator pos:start="283:35" pos:end="283:35">.</operator><name pos:start="283:36" pos:end="283:46">js_vlc_bits</name></expr></argument>, <argument pos:start="283:49" pos:end="283:80"><expr pos:start="283:49" pos:end="283:80"><literal type="number" pos:start="283:49" pos:end="283:49">2</literal> <operator pos:start="283:51" pos:end="283:51">*</operator> <name pos:start="283:53" pos:end="283:67"><name pos:start="283:53" pos:end="283:53">q</name><operator pos:start="283:54" pos:end="283:55">-&gt;</operator><name pos:start="283:56" pos:end="283:64">subpacket</name><index pos:start="283:65" pos:end="283:67">[<expr pos:start="283:66" pos:end="283:66"><name pos:start="283:66" pos:end="283:66">s</name></expr>]</index></name><operator pos:start="283:68" pos:end="283:68">.</operator><name pos:start="283:69" pos:end="283:80">joint_stereo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="285:13" pos:end="285:39">return <expr pos:start="285:20" pos:end="285:38"><name pos:start="285:20" pos:end="285:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="291:9" pos:end="297:9"><if pos:start="291:9" pos:end="297:9">if <condition pos:start="291:12" pos:end="291:42">(<expr pos:start="291:13" pos:end="291:41"><name pos:start="291:13" pos:end="291:27"><name pos:start="291:13" pos:end="291:13">q</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:24">subpacket</name><index pos:start="291:25" pos:end="291:27">[<expr pos:start="291:26" pos:end="291:26"><name pos:start="291:26" pos:end="291:26">s</name></expr>]</index></name><operator pos:start="291:28" pos:end="291:28">.</operator><name pos:start="291:29" pos:end="291:36">subbands</name> <operator pos:start="291:38" pos:end="291:38">&gt;</operator> <literal type="number" pos:start="291:40" pos:end="291:41">50</literal></expr>)</condition> <block pos:start="291:44" pos:end="297:9">{<block_content pos:start="293:13" pos:end="295:40">

            <expr_stmt pos:start="293:13" pos:end="293:58"><expr pos:start="293:13" pos:end="293:57"><call pos:start="293:13" pos:end="293:57"><name pos:start="293:13" pos:end="293:33">avpriv_request_sample</name><argument_list pos:start="293:34" pos:end="293:57">(<argument pos:start="293:35" pos:end="293:39"><expr pos:start="293:35" pos:end="293:39"><name pos:start="293:35" pos:end="293:39">avctx</name></expr></argument>, <argument pos:start="293:42" pos:end="293:56"><expr pos:start="293:42" pos:end="293:56"><literal type="string" pos:start="293:42" pos:end="293:56">"subbands &gt; 50"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="295:13" pos:end="295:40">return <expr pos:start="295:20" pos:end="295:39"><name pos:start="295:20" pos:end="295:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:65"><expr pos:start="299:9" pos:end="299:64"><name pos:start="299:9" pos:end="299:23"><name pos:start="299:9" pos:end="299:9">q</name><operator pos:start="299:10" pos:end="299:11">-&gt;</operator><name pos:start="299:12" pos:end="299:20">subpacket</name><index pos:start="299:21" pos:end="299:23">[<expr pos:start="299:22" pos:end="299:22"><name pos:start="299:22" pos:end="299:22">s</name></expr>]</index></name><operator pos:start="299:24" pos:end="299:24">.</operator><name pos:start="299:25" pos:end="299:34"><name pos:start="299:25" pos:end="299:30">gains1</name><operator pos:start="299:31" pos:end="299:31">.</operator><name pos:start="299:32" pos:end="299:34">now</name></name>      <operator pos:start="299:41" pos:end="299:41">=</operator> <name pos:start="299:43" pos:end="299:57"><name pos:start="299:43" pos:end="299:43">q</name><operator pos:start="299:44" pos:end="299:45">-&gt;</operator><name pos:start="299:46" pos:end="299:54">subpacket</name><index pos:start="299:55" pos:end="299:57">[<expr pos:start="299:56" pos:end="299:56"><name pos:start="299:56" pos:end="299:56">s</name></expr>]</index></name><operator pos:start="299:58" pos:end="299:58">.</operator><name pos:start="299:59" pos:end="299:64">gain_1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:65"><expr pos:start="301:9" pos:end="301:64"><name pos:start="301:9" pos:end="301:23"><name pos:start="301:9" pos:end="301:9">q</name><operator pos:start="301:10" pos:end="301:11">-&gt;</operator><name pos:start="301:12" pos:end="301:20">subpacket</name><index pos:start="301:21" pos:end="301:23">[<expr pos:start="301:22" pos:end="301:22"><name pos:start="301:22" pos:end="301:22">s</name></expr>]</index></name><operator pos:start="301:24" pos:end="301:24">.</operator><name pos:start="301:25" pos:end="301:39"><name pos:start="301:25" pos:end="301:30">gains1</name><operator pos:start="301:31" pos:end="301:31">.</operator><name pos:start="301:32" pos:end="301:39">previous</name></name> <operator pos:start="301:41" pos:end="301:41">=</operator> <name pos:start="301:43" pos:end="301:57"><name pos:start="301:43" pos:end="301:43">q</name><operator pos:start="301:44" pos:end="301:45">-&gt;</operator><name pos:start="301:46" pos:end="301:54">subpacket</name><index pos:start="301:55" pos:end="301:57">[<expr pos:start="301:56" pos:end="301:56"><name pos:start="301:56" pos:end="301:56">s</name></expr>]</index></name><operator pos:start="301:58" pos:end="301:58">.</operator><name pos:start="301:59" pos:end="301:64">gain_2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:65"><expr pos:start="303:9" pos:end="303:64"><name pos:start="303:9" pos:end="303:23"><name pos:start="303:9" pos:end="303:9">q</name><operator pos:start="303:10" pos:end="303:11">-&gt;</operator><name pos:start="303:12" pos:end="303:20">subpacket</name><index pos:start="303:21" pos:end="303:23">[<expr pos:start="303:22" pos:end="303:22"><name pos:start="303:22" pos:end="303:22">s</name></expr>]</index></name><operator pos:start="303:24" pos:end="303:24">.</operator><name pos:start="303:25" pos:end="303:34"><name pos:start="303:25" pos:end="303:30">gains2</name><operator pos:start="303:31" pos:end="303:31">.</operator><name pos:start="303:32" pos:end="303:34">now</name></name>      <operator pos:start="303:41" pos:end="303:41">=</operator> <name pos:start="303:43" pos:end="303:57"><name pos:start="303:43" pos:end="303:43">q</name><operator pos:start="303:44" pos:end="303:45">-&gt;</operator><name pos:start="303:46" pos:end="303:54">subpacket</name><index pos:start="303:55" pos:end="303:57">[<expr pos:start="303:56" pos:end="303:56"><name pos:start="303:56" pos:end="303:56">s</name></expr>]</index></name><operator pos:start="303:58" pos:end="303:58">.</operator><name pos:start="303:59" pos:end="303:64">gain_3</name></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:65"><expr pos:start="305:9" pos:end="305:64"><name pos:start="305:9" pos:end="305:23"><name pos:start="305:9" pos:end="305:9">q</name><operator pos:start="305:10" pos:end="305:11">-&gt;</operator><name pos:start="305:12" pos:end="305:20">subpacket</name><index pos:start="305:21" pos:end="305:23">[<expr pos:start="305:22" pos:end="305:22"><name pos:start="305:22" pos:end="305:22">s</name></expr>]</index></name><operator pos:start="305:24" pos:end="305:24">.</operator><name pos:start="305:25" pos:end="305:39"><name pos:start="305:25" pos:end="305:30">gains2</name><operator pos:start="305:31" pos:end="305:31">.</operator><name pos:start="305:32" pos:end="305:39">previous</name></name> <operator pos:start="305:41" pos:end="305:41">=</operator> <name pos:start="305:43" pos:end="305:57"><name pos:start="305:43" pos:end="305:43">q</name><operator pos:start="305:44" pos:end="305:45">-&gt;</operator><name pos:start="305:46" pos:end="305:54">subpacket</name><index pos:start="305:55" pos:end="305:57">[<expr pos:start="305:56" pos:end="305:56"><name pos:start="305:56" pos:end="305:56">s</name></expr>]</index></name><operator pos:start="305:58" pos:end="305:58">.</operator><name pos:start="305:59" pos:end="305:64">gain_4</name></expr>;</expr_stmt>



        <expr_stmt pos:start="309:9" pos:end="309:28"><expr pos:start="309:9" pos:end="309:27"><name pos:start="309:9" pos:end="309:25"><name pos:start="309:9" pos:end="309:9">q</name><operator pos:start="309:10" pos:end="309:11">-&gt;</operator><name pos:start="309:12" pos:end="309:25">num_subpackets</name></name><operator pos:start="309:26" pos:end="309:27">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:12"><expr pos:start="311:9" pos:end="311:11"><name pos:start="311:9" pos:end="311:9">s</name><operator pos:start="311:10" pos:end="311:11">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="313:9" pos:end="319:9"><if pos:start="313:9" pos:end="319:9">if <condition pos:start="313:12" pos:end="313:31">(<expr pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:13">s</name> <operator pos:start="313:15" pos:end="313:15">&gt;</operator> <name pos:start="313:17" pos:end="313:30">MAX_SUBPACKETS</name></expr>)</condition> <block pos:start="313:33" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:40">

            <expr_stmt pos:start="315:13" pos:end="315:76"><expr pos:start="315:13" pos:end="315:75"><call pos:start="315:13" pos:end="315:75"><name pos:start="315:13" pos:end="315:33">avpriv_request_sample</name><argument_list pos:start="315:34" pos:end="315:75">(<argument pos:start="315:35" pos:end="315:39"><expr pos:start="315:35" pos:end="315:39"><name pos:start="315:35" pos:end="315:39">avctx</name></expr></argument>, <argument pos:start="315:42" pos:end="315:58"><expr pos:start="315:42" pos:end="315:58"><literal type="string" pos:start="315:42" pos:end="315:58">"subpackets &gt; %d"</literal></expr></argument>, <argument pos:start="315:61" pos:end="315:74"><expr pos:start="315:61" pos:end="315:74"><name pos:start="315:61" pos:end="315:74">MAX_SUBPACKETS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="317:13" pos:end="317:40">return <expr pos:start="317:20" pos:end="317:39"><name pos:start="317:20" pos:end="317:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="323:5" pos:end="323:25">/* Generate tables */</comment>

    <expr_stmt pos:start="325:5" pos:end="325:21"><expr pos:start="325:5" pos:end="325:20"><call pos:start="325:5" pos:end="325:20"><name pos:start="325:5" pos:end="325:18">init_pow2table</name><argument_list pos:start="325:19" pos:end="325:20">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:23"><expr pos:start="327:5" pos:end="327:22"><call pos:start="327:5" pos:end="327:22"><name pos:start="327:5" pos:end="327:19">init_gain_table</name><argument_list pos:start="327:20" pos:end="327:22">(<argument pos:start="327:21" pos:end="327:21"><expr pos:start="327:21" pos:end="327:21"><name pos:start="327:21" pos:end="327:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:28"><expr pos:start="329:5" pos:end="329:27"><call pos:start="329:5" pos:end="329:27"><name pos:start="329:5" pos:end="329:24">init_cplscales_table</name><argument_list pos:start="329:25" pos:end="329:27">(<argument pos:start="329:26" pos:end="329:26"><expr pos:start="329:26" pos:end="329:26"><name pos:start="329:26" pos:end="329:26">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="333:5" pos:end="335:19"><if pos:start="333:5" pos:end="335:19">if <condition pos:start="333:8" pos:end="333:40">(<expr pos:start="333:9" pos:end="333:39"><operator pos:start="333:9" pos:end="333:9">(</operator><name pos:start="333:10" pos:end="333:12">ret</name> <operator pos:start="333:14" pos:end="333:14">=</operator> <call pos:start="333:16" pos:end="333:38"><name pos:start="333:16" pos:end="333:35">init_cook_vlc_tables</name><argument_list pos:start="333:36" pos:end="333:38">(<argument pos:start="333:37" pos:end="333:37"><expr pos:start="333:37" pos:end="333:37"><name pos:start="333:37" pos:end="333:37">q</name></expr></argument>)</argument_list></call><operator pos:start="333:39" pos:end="333:39">)</operator></expr>)</condition><block type="pseudo" pos:start="335:9" pos:end="335:19"><block_content pos:start="335:9" pos:end="335:19">

        <return pos:start="335:9" pos:end="335:19">return <expr pos:start="335:16" pos:end="335:18"><name pos:start="335:16" pos:end="335:18">ret</name></expr>;</return></block_content></block></if></if_stmt>





    <if_stmt pos:start="341:5" pos:end="343:31"><if pos:start="341:5" pos:end="343:31">if <condition pos:start="341:8" pos:end="341:43">(<expr pos:start="341:9" pos:end="341:42"><name pos:start="341:9" pos:end="341:26"><name pos:start="341:9" pos:end="341:13">avctx</name><operator pos:start="341:14" pos:end="341:15">-&gt;</operator><name pos:start="341:16" pos:end="341:26">block_align</name></name> <operator pos:start="341:28" pos:end="341:29">&gt;=</operator> <name pos:start="341:31" pos:end="341:38">UINT_MAX</name> <operator pos:start="341:40" pos:end="341:40">/</operator> <literal type="number" pos:start="341:42" pos:end="341:42">2</literal></expr>)</condition><block type="pseudo" pos:start="343:9" pos:end="343:31"><block_content pos:start="343:9" pos:end="343:31">

        <return pos:start="343:9" pos:end="343:31">return <expr pos:start="343:16" pos:end="343:30"><call pos:start="343:16" pos:end="343:30"><name pos:start="343:16" pos:end="343:22">AVERROR</name><argument_list pos:start="343:23" pos:end="343:30">(<argument pos:start="343:24" pos:end="343:29"><expr pos:start="343:24" pos:end="343:29"><name pos:start="343:24" pos:end="343:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="347:5" pos:end="351:64">/* Pad the databuffer with:

       DECODE_BYTES_PAD1 or DECODE_BYTES_PAD2 for decode_bytes(),

       AV_INPUT_BUFFER_PADDING_SIZE, for the bitstreamreader. */</comment>

    <expr_stmt pos:start="353:5" pos:end="359:51"><expr pos:start="353:5" pos:end="359:50"><name pos:start="353:5" pos:end="353:27"><name pos:start="353:5" pos:end="353:5">q</name><operator pos:start="353:6" pos:end="353:7">-&gt;</operator><name pos:start="353:8" pos:end="353:27">decoded_bytes_buffer</name></name> <operator pos:start="353:29" pos:end="353:29">=</operator>

        <call pos:start="355:9" pos:end="359:50"><name pos:start="355:9" pos:end="355:18">av_mallocz</name><argument_list pos:start="355:19" pos:end="359:50">(<argument pos:start="355:20" pos:end="359:49"><expr pos:start="355:20" pos:end="359:49"><name pos:start="355:20" pos:end="355:37"><name pos:start="355:20" pos:end="355:24">avctx</name><operator pos:start="355:25" pos:end="355:26">-&gt;</operator><name pos:start="355:27" pos:end="355:37">block_align</name></name>

                   <operator pos:start="357:20" pos:end="357:20">+</operator> <call pos:start="357:22" pos:end="357:58"><name pos:start="357:22" pos:end="357:38">DECODE_BYTES_PAD1</name><argument_list pos:start="357:39" pos:end="357:58">(<argument pos:start="357:40" pos:end="357:57"><expr pos:start="357:40" pos:end="357:57"><name pos:start="357:40" pos:end="357:57"><name pos:start="357:40" pos:end="357:44">avctx</name><operator pos:start="357:45" pos:end="357:46">-&gt;</operator><name pos:start="357:47" pos:end="357:57">block_align</name></name></expr></argument>)</argument_list></call>

                   <operator pos:start="359:20" pos:end="359:20">+</operator> <name pos:start="359:22" pos:end="359:49">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="361:5" pos:end="363:31"><if pos:start="361:5" pos:end="363:31">if <condition pos:start="361:8" pos:end="361:33">(<expr pos:start="361:9" pos:end="361:32"><operator pos:start="361:9" pos:end="361:9">!</operator><name pos:start="361:10" pos:end="361:32"><name pos:start="361:10" pos:end="361:10">q</name><operator pos:start="361:11" pos:end="361:12">-&gt;</operator><name pos:start="361:13" pos:end="361:32">decoded_bytes_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="363:9" pos:end="363:31"><block_content pos:start="363:9" pos:end="363:31">

        <return pos:start="363:9" pos:end="363:31">return <expr pos:start="363:16" pos:end="363:30"><call pos:start="363:16" pos:end="363:30"><name pos:start="363:16" pos:end="363:22">AVERROR</name><argument_list pos:start="363:23" pos:end="363:30">(<argument pos:start="363:24" pos:end="363:29"><expr pos:start="363:24" pos:end="363:29"><name pos:start="363:24" pos:end="363:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="367:5" pos:end="367:31">/* Initialize transform. */</comment>

    <if_stmt pos:start="369:5" pos:end="371:19"><if pos:start="369:5" pos:end="371:19">if <condition pos:start="369:8" pos:end="369:33">(<expr pos:start="369:9" pos:end="369:32"><operator pos:start="369:9" pos:end="369:9">(</operator><name pos:start="369:10" pos:end="369:12">ret</name> <operator pos:start="369:14" pos:end="369:14">=</operator> <call pos:start="369:16" pos:end="369:31"><name pos:start="369:16" pos:end="369:28">init_cook_mlt</name><argument_list pos:start="369:29" pos:end="369:31">(<argument pos:start="369:30" pos:end="369:30"><expr pos:start="369:30" pos:end="369:30"><name pos:start="369:30" pos:end="369:30">q</name></expr></argument>)</argument_list></call><operator pos:start="369:32" pos:end="369:32">)</operator></expr>)</condition><block type="pseudo" pos:start="371:9" pos:end="371:19"><block_content pos:start="371:9" pos:end="371:19">

        <return pos:start="371:9" pos:end="371:19">return <expr pos:start="371:16" pos:end="371:18"><name pos:start="371:16" pos:end="371:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="375:5" pos:end="375:52">/* Initialize COOK signal arithmetic handling */</comment>

    <if_stmt pos:start="377:5" pos:end="389:5"><if pos:start="377:5" pos:end="389:5">if <condition pos:start="377:8" pos:end="377:10">(<expr pos:start="377:9" pos:end="377:9"><literal type="number" pos:start="377:9" pos:end="377:9">1</literal></expr>)</condition> <block pos:start="377:12" pos:end="389:5">{<block_content pos:start="379:9" pos:end="387:51">

        <expr_stmt pos:start="379:9" pos:end="379:50"><expr pos:start="379:9" pos:end="379:49"><name pos:start="379:9" pos:end="379:25"><name pos:start="379:9" pos:end="379:9">q</name><operator pos:start="379:10" pos:end="379:11">-&gt;</operator><name pos:start="379:12" pos:end="379:25">scalar_dequant</name></name>  <operator pos:start="379:28" pos:end="379:28">=</operator> <name pos:start="379:30" pos:end="379:49">scalar_dequant_float</name></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:44"><expr pos:start="381:9" pos:end="381:43"><name pos:start="381:9" pos:end="381:19"><name pos:start="381:9" pos:end="381:9">q</name><operator pos:start="381:10" pos:end="381:11">-&gt;</operator><name pos:start="381:12" pos:end="381:19">decouple</name></name>        <operator pos:start="381:28" pos:end="381:28">=</operator> <name pos:start="381:30" pos:end="381:43">decouple_float</name></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:47"><expr pos:start="383:9" pos:end="383:46"><name pos:start="383:9" pos:end="383:22"><name pos:start="383:9" pos:end="383:9">q</name><operator pos:start="383:10" pos:end="383:11">-&gt;</operator><name pos:start="383:12" pos:end="383:22">imlt_window</name></name>     <operator pos:start="383:28" pos:end="383:28">=</operator> <name pos:start="383:30" pos:end="383:46">imlt_window_float</name></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:47"><expr pos:start="385:9" pos:end="385:46"><name pos:start="385:9" pos:end="385:22"><name pos:start="385:9" pos:end="385:9">q</name><operator pos:start="385:10" pos:end="385:11">-&gt;</operator><name pos:start="385:12" pos:end="385:22">interpolate</name></name>     <operator pos:start="385:28" pos:end="385:28">=</operator> <name pos:start="385:30" pos:end="385:46">interpolate_float</name></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:51"><expr pos:start="387:9" pos:end="387:50"><name pos:start="387:9" pos:end="387:26"><name pos:start="387:9" pos:end="387:9">q</name><operator pos:start="387:10" pos:end="387:11">-&gt;</operator><name pos:start="387:12" pos:end="387:26">saturate_output</name></name> <operator pos:start="387:28" pos:end="387:28">=</operator> <name pos:start="387:30" pos:end="387:50">saturate_output_float</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="393:5" pos:end="393:87">/* Try to catch some obviously faulty streams, otherwise it might be exploitable */</comment>

    <if_stmt pos:start="395:5" pos:end="405:5"><if pos:start="395:5" pos:end="405:5">if <condition pos:start="395:8" pos:end="397:39">(<expr pos:start="395:9" pos:end="397:38"><name pos:start="395:9" pos:end="395:30"><name pos:start="395:9" pos:end="395:9">q</name><operator pos:start="395:10" pos:end="395:11">-&gt;</operator><name pos:start="395:12" pos:end="395:30">samples_per_channel</name></name> <operator pos:start="395:32" pos:end="395:33">!=</operator> <literal type="number" pos:start="395:35" pos:end="395:37">256</literal> <operator pos:start="395:39" pos:end="395:40">&amp;&amp;</operator> <name pos:start="395:42" pos:end="395:63"><name pos:start="395:42" pos:end="395:42">q</name><operator pos:start="395:43" pos:end="395:44">-&gt;</operator><name pos:start="395:45" pos:end="395:63">samples_per_channel</name></name> <operator pos:start="395:65" pos:end="395:66">!=</operator> <literal type="number" pos:start="395:68" pos:end="395:70">512</literal> <operator pos:start="395:72" pos:end="395:73">&amp;&amp;</operator>

        <name pos:start="397:9" pos:end="397:30"><name pos:start="397:9" pos:end="397:9">q</name><operator pos:start="397:10" pos:end="397:11">-&gt;</operator><name pos:start="397:12" pos:end="397:30">samples_per_channel</name></name> <operator pos:start="397:32" pos:end="397:33">!=</operator> <literal type="number" pos:start="397:35" pos:end="397:38">1024</literal></expr>)</condition> <block pos:start="397:41" pos:end="405:5">{<block_content pos:start="399:9" pos:end="403:36">

        <expr_stmt pos:start="399:9" pos:end="401:54"><expr pos:start="399:9" pos:end="401:53"><call pos:start="399:9" pos:end="401:53"><name pos:start="399:9" pos:end="399:29">avpriv_request_sample</name><argument_list pos:start="399:30" pos:end="401:53">(<argument pos:start="399:31" pos:end="399:35"><expr pos:start="399:31" pos:end="399:35"><name pos:start="399:31" pos:end="399:35">avctx</name></expr></argument>, <argument pos:start="399:38" pos:end="399:63"><expr pos:start="399:38" pos:end="399:63"><literal type="string" pos:start="399:38" pos:end="399:63">"samples_per_channel = %d"</literal></expr></argument>,

                              <argument pos:start="401:31" pos:end="401:52"><expr pos:start="401:31" pos:end="401:52"><name pos:start="401:31" pos:end="401:52"><name pos:start="401:31" pos:end="401:31">q</name><operator pos:start="401:32" pos:end="401:33">-&gt;</operator><name pos:start="401:34" pos:end="401:52">samples_per_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="403:9" pos:end="403:36">return <expr pos:start="403:16" pos:end="403:35"><name pos:start="403:16" pos:end="403:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="409:5" pos:end="409:43"><expr pos:start="409:5" pos:end="409:42"><name pos:start="409:5" pos:end="409:21"><name pos:start="409:5" pos:end="409:9">avctx</name><operator pos:start="409:10" pos:end="409:11">-&gt;</operator><name pos:start="409:12" pos:end="409:21">sample_fmt</name></name> <operator pos:start="409:23" pos:end="409:23">=</operator> <name pos:start="409:25" pos:end="409:42">AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

    <if_stmt pos:start="411:5" pos:end="422:0"><if pos:start="411:5" pos:end="413:45">if <condition pos:start="411:8" pos:end="411:21">(<expr pos:start="411:9" pos:end="411:20"><name pos:start="411:9" pos:end="411:20">channel_mask</name></expr>)</condition><block type="pseudo" pos:start="413:9" pos:end="413:45"><block_content pos:start="413:9" pos:end="413:45">

        <expr_stmt pos:start="413:9" pos:end="413:45"><expr pos:start="413:9" pos:end="413:44"><name pos:start="413:9" pos:end="413:29"><name pos:start="413:9" pos:end="413:13">avctx</name><operator pos:start="413:14" pos:end="413:15">-&gt;</operator><name pos:start="413:16" pos:end="413:29">channel_layout</name></name> <operator pos:start="413:31" pos:end="413:31">=</operator> <name pos:start="413:33" pos:end="413:44">channel_mask</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="415:5" pos:end="422:0">else<block type="pseudo" pos:start="417:9" pos:end="422:0"><block_content pos:start="417:9" pos:end="422:0">

        <expr_stmt pos:start="417:9" pos:end="422:0"><expr pos:start="417:9" pos:end="417:96"><name pos:start="417:9" pos:end="417:29"><name pos:start="417:9" pos:end="417:13">avctx</name><operator pos:start="417:14" pos:end="417:15">-&gt;</operator><name pos:start="417:16" pos:end="417:29">channel_layout</name></name> <operator pos:start="417:31" pos:end="417:31">=</operator> <ternary pos:start="417:33" pos:end="417:96"><condition pos:start="417:33" pos:end="417:56"><expr pos:start="417:33" pos:end="417:54"><operator pos:start="417:33" pos:end="417:33">(</operator><name pos:start="417:34" pos:end="417:48"><name pos:start="417:34" pos:end="417:38">avctx</name><operator pos:start="417:39" pos:end="417:40">-&gt;</operator><name pos:start="417:41" pos:end="417:48">channels</name></name> <operator pos:start="417:50" pos:end="417:51">==</operator> <literal type="number" pos:start="417:53" pos:end="417:53">2</literal><operator pos:start="417:54" pos:end="417:54">)</operator></expr> ?</condition><then pos:start="417:58" pos:end="417:76"> <expr pos:start="417:58" pos:end="417:76"><name pos:start="417:58" pos:end="417:76">AV_CH_LAYOUT_STEREO</name></expr> </then><else pos:start="417:78" pos:end="417:96">: <expr pos:start="417:80" pos:end="417:96"><name pos:start="417:80" pos:end="417:96">AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



<cpp:ifdef pos:start="421:1" pos:end="421:12">#<cpp:directive pos:start="421:2" pos:end="421:6">ifdef</cpp:directive> <name pos:start="421:8" pos:end="421:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="423:5" pos:end="426:0"><expr pos:start="423:5" pos:end="423:24"><call pos:start="423:5" pos:end="423:24"><name pos:start="423:5" pos:end="423:21">dump_cook_context</name><argument_list pos:start="423:22" pos:end="423:24">(<argument pos:start="423:23" pos:end="423:23"><expr pos:start="423:23" pos:end="423:23"><name pos:start="423:23" pos:end="423:23">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="425:1" pos:end="425:6">#<cpp:directive pos:start="425:2" pos:end="425:6">endif</cpp:directive></cpp:endif>

    <return pos:start="427:5" pos:end="427:13">return <expr pos:start="427:12" pos:end="427:12"><literal type="number" pos:start="427:12" pos:end="427:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
