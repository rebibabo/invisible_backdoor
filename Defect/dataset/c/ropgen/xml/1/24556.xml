<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24556.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:43">avcodec_send_packet</name><parameter_list pos:start="1:44" pos:end="1:89">(<parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><name pos:start="1:45" pos:end="1:58">AVCodecContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">avctx</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:88"><decl pos:start="1:68" pos:end="1:88"><type pos:start="1:68" pos:end="1:88"><specifier pos:start="1:68" pos:end="1:72">const</specifier> <name pos:start="1:74" pos:end="1:81">AVPacket</name> <modifier pos:start="1:83" pos:end="1:83">*</modifier></type><name pos:start="1:84" pos:end="1:88">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:47">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:31"><if pos:start="9:5" pos:end="11:31">if <condition pos:start="9:8" pos:end="9:70">(<expr pos:start="9:9" pos:end="9:69"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:31"><name pos:start="9:10" pos:end="9:24">avcodec_is_open</name><argument_list pos:start="9:25" pos:end="9:31">(<argument pos:start="9:26" pos:end="9:30"><expr pos:start="9:26" pos:end="9:30"><name pos:start="9:26" pos:end="9:30">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="9:33" pos:end="9:34">||</operator> <operator pos:start="9:36" pos:end="9:36">!</operator><call pos:start="9:37" pos:end="9:69"><name pos:start="9:37" pos:end="9:55">av_codec_is_decoder</name><argument_list pos:start="9:56" pos:end="9:69">(<argument pos:start="9:57" pos:end="9:68"><expr pos:start="9:57" pos:end="9:68"><name pos:start="9:57" pos:end="9:68"><name pos:start="9:57" pos:end="9:61">avctx</name><operator pos:start="9:62" pos:end="9:63">-&gt;</operator><name pos:start="9:64" pos:end="9:68">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:31"><block_content pos:start="11:9" pos:end="11:31">

        <return pos:start="11:9" pos:end="11:31">return <expr pos:start="11:16" pos:end="11:30"><call pos:start="11:16" pos:end="11:30"><name pos:start="11:16" pos:end="11:22">AVERROR</name><argument_list pos:start="11:23" pos:end="11:30">(<argument pos:start="11:24" pos:end="11:29"><expr pos:start="11:24" pos:end="11:29"><name pos:start="11:24" pos:end="11:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="17:27"><if pos:start="15:5" pos:end="17:27">if <condition pos:start="15:8" pos:end="15:34">(<expr pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:13">avctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:23">internal</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:33">draining</name></name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:27"><block_content pos:start="17:9" pos:end="17:27">

        <return pos:start="17:9" pos:end="17:27">return <expr pos:start="17:16" pos:end="17:26"><name pos:start="17:16" pos:end="17:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="33:5">if <condition pos:start="21:8" pos:end="21:31">(<expr pos:start="21:9" pos:end="21:30"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:14">avpkt</name> <operator pos:start="21:16" pos:end="21:17">||</operator> <operator pos:start="21:19" pos:end="21:19">!</operator><name pos:start="21:20" pos:end="21:30"><name pos:start="21:20" pos:end="21:24">avpkt</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:30">size</name></name></expr>)</condition> <block pos:start="21:33" pos:end="33:5">{<block_content pos:start="23:9" pos:end="31:21">

        <expr_stmt pos:start="23:9" pos:end="23:38"><expr pos:start="23:9" pos:end="23:37"><name pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:13">avctx</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:23">internal</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:33">draining</name></name> <operator pos:start="23:35" pos:end="23:35">=</operator> <literal type="number" pos:start="23:37" pos:end="23:37">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:13">avpkt</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:20">NULL</name></expr>;</expr_stmt>



        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:63">(<expr pos:start="29:13" pos:end="29:62"><operator pos:start="29:13" pos:end="29:13">!</operator><operator pos:start="29:14" pos:end="29:14">(</operator><name pos:start="29:15" pos:end="29:40"><name pos:start="29:15" pos:end="29:19">avctx</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:26">codec</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:40">capabilities</name></name> <operator pos:start="29:42" pos:end="29:42">&amp;</operator> <name pos:start="29:44" pos:end="29:61">AV_CODEC_CAP_DELAY</name><operator pos:start="29:62" pos:end="29:62">)</operator></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <return pos:start="31:13" pos:end="31:21">return <expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="51:5">if <condition pos:start="37:8" pos:end="37:34">(<expr pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">codec</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:33">send_packet</name></name></expr>)</condition> <block pos:start="37:36" pos:end="51:5">{<block_content pos:start="39:9" pos:end="49:55">

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:18">(<expr pos:start="39:13" pos:end="39:17"><name pos:start="39:13" pos:end="39:17">avpkt</name></expr>)</condition> <block pos:start="39:20" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:27">

            <expr_stmt pos:start="41:13" pos:end="41:63"><expr pos:start="41:13" pos:end="41:62"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:62"><name pos:start="41:19" pos:end="41:36">apply_param_change</name><argument_list pos:start="41:37" pos:end="41:62">(<argument pos:start="41:38" pos:end="41:42"><expr pos:start="41:38" pos:end="41:42"><name pos:start="41:38" pos:end="41:42">avctx</name></expr></argument>, <argument pos:start="41:45" pos:end="41:61"><expr pos:start="41:45" pos:end="41:61"><operator pos:start="41:45" pos:end="41:45">(</operator><name pos:start="41:46" pos:end="41:53">AVPacket</name> <operator pos:start="41:55" pos:end="41:55">*</operator><operator pos:start="41:56" pos:end="41:56">)</operator><name pos:start="41:57" pos:end="41:61">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="45:27"><if pos:start="43:13" pos:end="45:27">if <condition pos:start="43:16" pos:end="43:24">(<expr pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:21">&lt;</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:27"><block_content pos:start="45:17" pos:end="45:27">

                <return pos:start="45:17" pos:end="45:27">return <expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="49:9" pos:end="49:55">return <expr pos:start="49:16" pos:end="49:54"><call pos:start="49:16" pos:end="49:54"><name pos:start="49:16" pos:end="49:40"><name pos:start="49:16" pos:end="49:20">avctx</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:27">codec</name><operator pos:start="49:28" pos:end="49:29">-&gt;</operator><name pos:start="49:30" pos:end="49:40">send_packet</name></name><argument_list pos:start="49:41" pos:end="49:54">(<argument pos:start="49:42" pos:end="49:46"><expr pos:start="49:42" pos:end="49:46"><name pos:start="49:42" pos:end="49:46">avctx</name></expr></argument>, <argument pos:start="49:49" pos:end="49:53"><expr pos:start="49:49" pos:end="49:53"><name pos:start="49:49" pos:end="49:53">avpkt</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="55:5" pos:end="55:74">// Emulation via old API. Assume avpkt is likely not refcounted, while</comment>

    <comment type="line" pos:start="57:5" pos:end="57:62">// decoder output is always refcounted, and avoid copying.</comment>



    <if_stmt pos:start="61:5" pos:end="63:31"><if pos:start="61:5" pos:end="63:31">if <condition pos:start="61:8" pos:end="61:83">(<expr pos:start="61:9" pos:end="61:82"><name pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:23">internal</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:35">buffer_pkt</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:41">size</name></name> <operator pos:start="61:43" pos:end="61:44">||</operator> <name pos:start="61:46" pos:end="61:82"><name pos:start="61:46" pos:end="61:50">avctx</name><operator pos:start="61:51" pos:end="61:52">-&gt;</operator><name pos:start="61:53" pos:end="61:60">internal</name><operator pos:start="61:61" pos:end="61:62">-&gt;</operator><name pos:start="61:63" pos:end="61:74">buffer_frame</name><operator pos:start="61:75" pos:end="61:76">-&gt;</operator><name pos:start="61:77" pos:end="61:79">buf</name><index pos:start="61:80" pos:end="61:82">[<expr pos:start="61:81" pos:end="61:81"><literal type="number" pos:start="61:81" pos:end="61:81">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:31"><block_content pos:start="63:9" pos:end="63:31">

        <return pos:start="63:9" pos:end="63:31">return <expr pos:start="63:16" pos:end="63:30"><call pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:30">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="67:5" pos:end="67:79">// The goal is decoding the first frame of the packet without using memcpy,</comment>

    <comment type="line" pos:start="69:5" pos:end="69:76">// because the common case is having only 1 frame per packet (especially</comment>

    <comment type="line" pos:start="71:5" pos:end="71:78">// with video, but audio too). In other cases, it can't be avoided, unless</comment>

    <comment type="line" pos:start="73:5" pos:end="73:46">// the user is feeding refcounted packets.</comment>

    <return pos:start="75:5" pos:end="75:47">return <expr pos:start="75:12" pos:end="75:46"><call pos:start="75:12" pos:end="75:46"><name pos:start="75:12" pos:end="75:20">do_decode</name><argument_list pos:start="75:21" pos:end="75:46">(<argument pos:start="75:22" pos:end="75:26"><expr pos:start="75:22" pos:end="75:26"><name pos:start="75:22" pos:end="75:26">avctx</name></expr></argument>, <argument pos:start="75:29" pos:end="75:45"><expr pos:start="75:29" pos:end="75:45"><operator pos:start="75:29" pos:end="75:29">(</operator><name pos:start="75:30" pos:end="75:37">AVPacket</name> <operator pos:start="75:39" pos:end="75:39">*</operator><operator pos:start="75:40" pos:end="75:40">)</operator><name pos:start="75:41" pos:end="75:45">avpkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
