<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10793.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:35">handle_cpu_signal</name><parameter_list pos:start="1:36" pos:end="3:68">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:45">uintptr_t</name></type> <name pos:start="1:47" pos:end="1:48">pc</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:71"><decl pos:start="1:51" pos:end="1:71"><type pos:start="1:51" pos:end="1:71"><name pos:start="1:51" pos:end="1:58">unsigned</name> <name pos:start="1:60" pos:end="1:63">long</name></type> <name pos:start="1:65" pos:end="1:71">address</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:48">is_write</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:67"><decl pos:start="3:51" pos:end="3:67"><type pos:start="3:51" pos:end="3:67"><name pos:start="3:51" pos:end="3:58">sigset_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:67">old_set</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:13">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUClass</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:25">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:25">(<argument pos:start="15:13" pos:end="15:24"><expr pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="17:5" pos:end="22:0"><expr pos:start="17:5" pos:end="19:60"><call pos:start="17:5" pos:end="19:60"><name pos:start="17:5" pos:end="17:10">printf</name><argument_list pos:start="17:11" pos:end="19:60">(<argument pos:start="17:12" pos:end="17:73"><expr pos:start="17:12" pos:end="17:73"><literal type="string" pos:start="17:12" pos:end="17:73">"qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n"</literal></expr></argument>,

           <argument pos:start="19:12" pos:end="19:13"><expr pos:start="19:12" pos:end="19:13"><name pos:start="19:12" pos:end="19:13">pc</name></expr></argument>, <argument pos:start="19:16" pos:end="19:22"><expr pos:start="19:16" pos:end="19:22"><name pos:start="19:16" pos:end="19:22">address</name></expr></argument>, <argument pos:start="19:25" pos:end="19:32"><expr pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:32">is_write</name></expr></argument>, <argument pos:start="19:35" pos:end="19:59"><expr pos:start="19:35" pos:end="19:59"><operator pos:start="19:35" pos:end="19:35">*</operator><operator pos:start="19:36" pos:end="19:36">(</operator><name pos:start="19:37" pos:end="19:44">unsigned</name> <name pos:start="19:46" pos:end="19:49">long</name> <operator pos:start="19:51" pos:end="19:51">*</operator><operator pos:start="19:52" pos:end="19:52">)</operator><name pos:start="19:53" pos:end="19:59">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="23:5" pos:end="23:28">/* XXX: locking issue */</comment>

    <if_stmt pos:start="25:5" pos:end="69:5"><if pos:start="25:5" pos:end="69:5">if <condition pos:start="25:8" pos:end="25:39">(<expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:16">is_write</name> <operator pos:start="25:18" pos:end="25:19">&amp;&amp;</operator> <call pos:start="25:21" pos:end="25:38"><name pos:start="25:21" pos:end="25:29">h2g_valid</name><argument_list pos:start="25:30" pos:end="25:38">(<argument pos:start="25:31" pos:end="25:37"><expr pos:start="25:31" pos:end="25:37"><name pos:start="25:31" pos:end="25:37">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:41" pos:end="69:5">{<block_content pos:start="27:9" pos:end="67:9">

        <switch pos:start="27:9" pos:end="67:9">switch <condition pos:start="27:16" pos:end="27:49">(<expr pos:start="27:17" pos:end="27:48"><call pos:start="27:17" pos:end="27:48"><name pos:start="27:17" pos:end="27:30">page_unprotect</name><argument_list pos:start="27:31" pos:end="27:48">(<argument pos:start="27:32" pos:end="27:43"><expr pos:start="27:32" pos:end="27:43"><call pos:start="27:32" pos:end="27:43"><name pos:start="27:32" pos:end="27:34">h2g</name><argument_list pos:start="27:35" pos:end="27:43">(<argument pos:start="27:36" pos:end="27:42"><expr pos:start="27:36" pos:end="27:42"><name pos:start="27:36" pos:end="27:42">address</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:46" pos:end="27:47"><expr pos:start="27:46" pos:end="27:47"><name pos:start="27:46" pos:end="27:47">pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:51" pos:end="67:9">{<block_content pos:start="29:9" pos:end="65:35">

        <case pos:start="29:9" pos:end="29:15">case <expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>:</case>

            <comment type="block" pos:start="31:13" pos:end="35:15">/* Fault not caused by a page marked unwritable to protect

             * cached translations, must be the guest binary's problem

             */</comment>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <case pos:start="39:9" pos:end="39:15">case <expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">1</literal></expr>:</case>

            <comment type="block" pos:start="41:13" pos:end="45:15">/* Fault caused by protection of cached translation; TBs

             * invalidated, so resume execution

             */</comment>

            <return pos:start="47:13" pos:end="47:21">return <expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">1</literal></expr>;</return>

        <case pos:start="49:9" pos:end="49:15">case <expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">2</literal></expr>:</case>

            <comment type="block" pos:start="51:13" pos:end="57:15">/* Fault caused by protection of cached translation, and the

             * currently executing TB was modified and must be exited

             * immediately.

             */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:62"><expr pos:start="59:13" pos:end="59:61"><call pos:start="59:13" pos:end="59:61"><name pos:start="59:13" pos:end="59:39">cpu_exit_tb_from_sighandler</name><argument_list pos:start="59:40" pos:end="59:61">(<argument pos:start="59:41" pos:end="59:51"><expr pos:start="59:41" pos:end="59:51"><name pos:start="59:41" pos:end="59:51">current_cpu</name></expr></argument>, <argument pos:start="59:54" pos:end="59:60"><expr pos:start="59:54" pos:end="59:60"><name pos:start="59:54" pos:end="59:60">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><call pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:32">g_assert_not_reached</name><argument_list pos:start="61:33" pos:end="61:34">()</argument_list></call></expr>;</expr_stmt>

        <default pos:start="63:9" pos:end="63:16">default:</default>

            <expr_stmt pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:34"><call pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:32">g_assert_not_reached</name><argument_list pos:start="65:33" pos:end="65:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="75:35">/* Convert forcefully to guest address space, invalid addresses

       are still valid segv ones */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:35"><expr pos:start="77:5" pos:end="77:34"><name pos:start="77:5" pos:end="77:11">address</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:34"><name pos:start="77:15" pos:end="77:25">h2g_nocheck</name><argument_list pos:start="77:26" pos:end="77:34">(<argument pos:start="77:27" pos:end="77:33"><expr pos:start="77:27" pos:end="77:33"><name pos:start="77:27" pos:end="77:33">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:22"><expr pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:7">cpu</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <name pos:start="81:11" pos:end="81:21">current_cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:28"><expr pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:6">cc</name> <operator pos:start="83:8" pos:end="83:8">=</operator> <call pos:start="83:10" pos:end="83:27"><name pos:start="83:10" pos:end="83:22">CPU_GET_CLASS</name><argument_list pos:start="83:23" pos:end="83:27">(<argument pos:start="83:24" pos:end="83:26"><expr pos:start="83:24" pos:end="83:26"><name pos:start="83:24" pos:end="83:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="85:5" pos:end="85:35">/* see if it is an MMU fault */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:35"><expr pos:start="87:5" pos:end="87:34"><call pos:start="87:5" pos:end="87:34"><name pos:start="87:5" pos:end="87:12">g_assert</name><argument_list pos:start="87:13" pos:end="87:34">(<argument pos:start="87:14" pos:end="87:33"><expr pos:start="87:14" pos:end="87:33"><name pos:start="87:14" pos:end="87:33"><name pos:start="87:14" pos:end="87:15">cc</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:33">handle_mmu_fault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:69"><expr pos:start="89:5" pos:end="89:68"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:68"><name pos:start="89:11" pos:end="89:30"><name pos:start="89:11" pos:end="89:12">cc</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:30">handle_mmu_fault</name></name><argument_list pos:start="89:31" pos:end="89:68">(<argument pos:start="89:32" pos:end="89:34"><expr pos:start="89:32" pos:end="89:34"><name pos:start="89:32" pos:end="89:34">cpu</name></expr></argument>, <argument pos:start="89:37" pos:end="89:43"><expr pos:start="89:37" pos:end="89:43"><name pos:start="89:37" pos:end="89:43">address</name></expr></argument>, <argument pos:start="89:46" pos:end="89:53"><expr pos:start="89:46" pos:end="89:53"><name pos:start="89:46" pos:end="89:53">is_write</name></expr></argument>, <argument pos:start="89:56" pos:end="89:67"><expr pos:start="89:56" pos:end="89:67"><name pos:start="89:56" pos:end="89:67">MMU_USER_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:16">(<expr pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">&lt;</operator> <literal type="number" pos:start="91:15" pos:end="91:15">0</literal></expr>)</condition> <block pos:start="91:18" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:17">

        <return pos:start="93:9" pos:end="93:17">return <expr pos:start="93:16" pos:end="93:16"><literal type="number" pos:start="93:16" pos:end="93:16">0</literal></expr>;</return> <comment type="block" pos:start="93:19" pos:end="93:40">/* not an MMU fault */</comment>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:17">(<expr pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:14">==</operator> <literal type="number" pos:start="97:16" pos:end="97:16">0</literal></expr>)</condition> <block pos:start="97:19" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:17">

        <return pos:start="99:9" pos:end="99:17">return <expr pos:start="99:16" pos:end="99:16"><literal type="number" pos:start="99:16" pos:end="99:16">1</literal></expr>;</return> <comment type="block" pos:start="99:19" pos:end="99:80">/* the MMU fault was handled without causing real CPU fault */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="109:46">/* Now we have a real cpu fault.  Since this is the exact location of

     * the exception, we must undo the adjustment done by cpu_restore_state

     * for handling call return addresses.  */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:43"><expr pos:start="111:5" pos:end="111:42"><call pos:start="111:5" pos:end="111:42"><name pos:start="111:5" pos:end="111:21">cpu_restore_state</name><argument_list pos:start="111:22" pos:end="111:42">(<argument pos:start="111:23" pos:end="111:25"><expr pos:start="111:23" pos:end="111:25"><name pos:start="111:23" pos:end="111:25">cpu</name></expr></argument>, <argument pos:start="111:28" pos:end="111:41"><expr pos:start="111:28" pos:end="111:41"><name pos:start="111:28" pos:end="111:29">pc</name> <operator pos:start="111:31" pos:end="111:31">+</operator> <name pos:start="111:33" pos:end="111:41">GETPC_ADJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:44"><expr pos:start="115:5" pos:end="115:43"><call pos:start="115:5" pos:end="115:43"><name pos:start="115:5" pos:end="115:15">sigprocmask</name><argument_list pos:start="115:16" pos:end="115:43">(<argument pos:start="115:17" pos:end="115:27"><expr pos:start="115:17" pos:end="115:27"><name pos:start="115:17" pos:end="115:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="115:30" pos:end="115:36"><expr pos:start="115:30" pos:end="115:36"><name pos:start="115:30" pos:end="115:36">old_set</name></expr></argument>, <argument pos:start="115:39" pos:end="115:42"><expr pos:start="115:39" pos:end="115:42"><name pos:start="115:39" pos:end="115:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:23"><expr pos:start="117:5" pos:end="117:22"><call pos:start="117:5" pos:end="117:22"><name pos:start="117:5" pos:end="117:17">cpu_loop_exit</name><argument_list pos:start="117:18" pos:end="117:22">(<argument pos:start="117:19" pos:end="117:21"><expr pos:start="117:19" pos:end="117:21"><name pos:start="117:19" pos:end="117:21">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:26">/* never comes here */</comment>

    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
