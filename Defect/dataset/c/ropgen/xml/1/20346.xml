<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20346.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">parse_pci_devfn</name><parameter_list pos:start="1:27" pos:end="1:77">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">DeviceState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dev</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:53">Property</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">prop</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><specifier pos:start="1:62" pos:end="1:66">const</specifier> <name pos:start="1:68" pos:end="1:71">char</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">str</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:13">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">uint32_t</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">ptr</name> <init pos:start="5:19" pos:end="5:48">= <expr pos:start="5:21" pos:end="5:48"><call pos:start="5:21" pos:end="5:48"><name pos:start="5:21" pos:end="5:37">qdev_get_prop_ptr</name><argument_list pos:start="5:38" pos:end="5:48">(<argument pos:start="5:39" pos:end="5:41"><expr pos:start="5:39" pos:end="5:41"><name pos:start="5:39" pos:end="5:41">dev</name></expr></argument>, <argument pos:start="5:44" pos:end="5:47"><expr pos:start="5:44" pos:end="5:47"><name pos:start="5:44" pos:end="5:47">prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:21">slot</name></decl>, <decl pos:start="7:24" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:24" pos:end="7:25">fn</name></decl>, <decl pos:start="7:28" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:28" pos:end="7:28">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:52">(<expr pos:start="11:9" pos:end="11:51"><call pos:start="11:9" pos:end="11:46"><name pos:start="11:9" pos:end="11:14">sscanf</name><argument_list pos:start="11:15" pos:end="11:46">(<argument pos:start="11:16" pos:end="11:18"><expr pos:start="11:16" pos:end="11:18"><name pos:start="11:16" pos:end="11:18">str</name></expr></argument>, <argument pos:start="11:21" pos:end="11:29"><expr pos:start="11:21" pos:end="11:29"><literal type="string" pos:start="11:21" pos:end="11:29">"%x.%x%n"</literal></expr></argument>, <argument pos:start="11:32" pos:end="11:36"><expr pos:start="11:32" pos:end="11:36"><operator pos:start="11:32" pos:end="11:32">&amp;</operator><name pos:start="11:33" pos:end="11:36">slot</name></expr></argument>, <argument pos:start="11:39" pos:end="11:41"><expr pos:start="11:39" pos:end="11:41"><operator pos:start="11:39" pos:end="11:39">&amp;</operator><name pos:start="11:40" pos:end="11:41">fn</name></expr></argument>, <argument pos:start="11:44" pos:end="11:45"><expr pos:start="11:44" pos:end="11:45"><operator pos:start="11:44" pos:end="11:44">&amp;</operator><name pos:start="11:45" pos:end="11:45">n</name></expr></argument>)</argument_list></call> <operator pos:start="11:48" pos:end="11:49">!=</operator> <literal type="number" pos:start="11:51" pos:end="11:51">2</literal></expr>)</condition> <block pos:start="11:54" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:9">

        <expr_stmt pos:start="13:9" pos:end="13:15"><expr pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:10">fn</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:48">(<expr pos:start="15:13" pos:end="15:47"><call pos:start="15:13" pos:end="15:42"><name pos:start="15:13" pos:end="15:18">sscanf</name><argument_list pos:start="15:19" pos:end="15:42">(<argument pos:start="15:20" pos:end="15:22"><expr pos:start="15:20" pos:end="15:22"><name pos:start="15:20" pos:end="15:22">str</name></expr></argument>, <argument pos:start="15:25" pos:end="15:30"><expr pos:start="15:25" pos:end="15:30"><literal type="string" pos:start="15:25" pos:end="15:30">"%x%n"</literal></expr></argument>, <argument pos:start="15:33" pos:end="15:37"><expr pos:start="15:33" pos:end="15:37"><operator pos:start="15:33" pos:end="15:33">&amp;</operator><name pos:start="15:34" pos:end="15:37">slot</name></expr></argument>, <argument pos:start="15:40" pos:end="15:41"><expr pos:start="15:40" pos:end="15:41"><operator pos:start="15:40" pos:end="15:40">&amp;</operator><name pos:start="15:41" pos:end="15:41">n</name></expr></argument>)</argument_list></call> <operator pos:start="15:44" pos:end="15:45">!=</operator> <literal type="number" pos:start="15:47" pos:end="15:47">1</literal></expr>)</condition> <block pos:start="15:50" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:27">

            <return pos:start="17:13" pos:end="17:27">return <expr pos:start="17:20" pos:end="17:26"><operator pos:start="17:20" pos:end="17:20">-</operator><name pos:start="17:21" pos:end="17:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="25:23"><if pos:start="23:5" pos:end="25:23">if <condition pos:start="23:8" pos:end="23:23">(<expr pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:11">str</name><index pos:start="23:12" pos:end="23:14">[<expr pos:start="23:13" pos:end="23:13"><name pos:start="23:13" pos:end="23:13">n</name></expr>]</index></name> <operator pos:start="23:16" pos:end="23:17">!=</operator> <literal type="char" pos:start="23:19" pos:end="23:22">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:23"><block_content pos:start="25:9" pos:end="25:23">

        <return pos:start="25:9" pos:end="25:23">return <expr pos:start="25:16" pos:end="25:22"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:22">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="29:23"><if pos:start="27:5" pos:end="29:23">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">fn</name> <operator pos:start="27:12" pos:end="27:12">&gt;</operator> <literal type="number" pos:start="27:14" pos:end="27:14">7</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:23"><block_content pos:start="29:9" pos:end="29:23">

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="33:23"><if pos:start="31:5" pos:end="33:23">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:12">slot</name> <operator pos:start="31:14" pos:end="31:14">&gt;</operator> <literal type="number" pos:start="31:16" pos:end="31:17">31</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:23"><block_content pos:start="33:9" pos:end="33:23">

        <return pos:start="33:9" pos:end="33:23">return <expr pos:start="33:16" pos:end="33:22"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:22">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><operator pos:start="35:5" pos:end="35:5">*</operator><name pos:start="35:6" pos:end="35:8">ptr</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <name pos:start="35:12" pos:end="35:15">slot</name> <operator pos:start="35:17" pos:end="35:18">&lt;&lt;</operator> <literal type="number" pos:start="35:20" pos:end="35:20">3</literal> <operator pos:start="35:22" pos:end="35:22">|</operator> <name pos:start="35:24" pos:end="35:25">fn</name></expr>;</expr_stmt>

    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
