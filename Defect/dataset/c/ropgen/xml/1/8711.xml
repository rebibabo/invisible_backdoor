<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8711.c" pos:tabs="8"><function pos:start="1:1" pos:end="421:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="5:62">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:42">uint8_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:47">buf</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:61"><decl pos:start="5:50" pos:end="5:61"><type pos:start="5:50" pos:end="5:61"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:61">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="421:1">{<block_content pos:start="9:5" pos:end="419:54">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">H264Context</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">h</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:26">h</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">buf_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:12">flags</name></name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:26"><name pos:start="19:15" pos:end="19:19">avctx</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:13">flags2</name></name><operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:20">avctx</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:28">flags2</name></name></expr>;</expr_stmt>



   <comment type="block" pos:start="25:4" pos:end="25:59">/* end of stream, output what is still in the buffers */</comment>

    <if_stmt pos:start="27:5" pos:end="71:5"><if pos:start="27:5" pos:end="71:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:19">==</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>)</condition> <block pos:start="27:24" pos:end="71:5">{<block_content pos:start="29:9" pos:end="69:17">

        <decl_stmt pos:start="29:9" pos:end="29:21"><decl pos:start="29:9" pos:end="29:20"><type pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:15">Picture</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:20">out</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:23"><decl pos:start="31:9" pos:end="31:13"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:13">i</name></decl>, <decl pos:start="31:16" pos:end="31:22"><type ref="prev" pos:start="31:9" pos:end="31:11"/><name pos:start="31:16" pos:end="31:22">out_idx</name></decl>;</decl_stmt>



<comment type="line" pos:start="35:1" pos:end="35:49">//FIXME factorize this with the output code below</comment>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:11">out</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:31"><name pos:start="37:15" pos:end="37:15">h</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:28">delayed_pic</name><index pos:start="37:29" pos:end="37:31">[<expr pos:start="37:30" pos:end="37:30"><literal type="number" pos:start="37:30" pos:end="37:30">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:20"><expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:15">out_idx</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>;</expr_stmt>

        <for pos:start="41:9" pos:end="49:13">for<control pos:start="41:12" pos:end="41:66">(<init pos:start="41:13" pos:end="41:16"><expr pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:13">i</name><operator pos:start="41:14" pos:end="41:14">=</operator><literal type="number" pos:start="41:15" pos:end="41:15">1</literal></expr>;</init> <condition pos:start="41:18" pos:end="41:61"><expr pos:start="41:18" pos:end="41:60"><name pos:start="41:18" pos:end="41:34"><name pos:start="41:18" pos:end="41:18">h</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:31">delayed_pic</name><index pos:start="41:32" pos:end="41:34">[<expr pos:start="41:33" pos:end="41:33"><name pos:start="41:33" pos:end="41:33">i</name></expr>]</index></name> <operator pos:start="41:36" pos:end="41:37">&amp;&amp;</operator> <name pos:start="41:39" pos:end="41:55"><name pos:start="41:39" pos:end="41:39">h</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:52">delayed_pic</name><index pos:start="41:53" pos:end="41:55">[<expr pos:start="41:54" pos:end="41:54"><name pos:start="41:54" pos:end="41:54">i</name></expr>]</index></name><operator pos:start="41:56" pos:end="41:57">-&gt;</operator><name pos:start="41:58" pos:end="41:60">poc</name></expr>;</condition> <incr pos:start="41:63" pos:end="41:65"><expr pos:start="41:63" pos:end="41:65"><name pos:start="41:63" pos:end="41:63">i</name><operator pos:start="41:64" pos:end="41:65">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:13" pos:end="49:13"><block_content pos:start="43:13" pos:end="49:13">

            <if_stmt pos:start="43:13" pos:end="49:13"><if pos:start="43:13" pos:end="49:13">if<condition pos:start="43:15" pos:end="43:49">(<expr pos:start="43:16" pos:end="43:48"><name pos:start="43:16" pos:end="43:32"><name pos:start="43:16" pos:end="43:16">h</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:29">delayed_pic</name><index pos:start="43:30" pos:end="43:32">[<expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">i</name></expr>]</index></name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:37">poc</name> <operator pos:start="43:39" pos:end="43:39">&lt;</operator> <name pos:start="43:41" pos:end="43:48"><name pos:start="43:41" pos:end="43:43">out</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:48">poc</name></name></expr>)</condition><block pos:start="43:50" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:28">

                <expr_stmt pos:start="45:17" pos:end="45:40"><expr pos:start="45:17" pos:end="45:39"><name pos:start="45:17" pos:end="45:19">out</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:39"><name pos:start="45:23" pos:end="45:23">h</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:36">delayed_pic</name><index pos:start="45:37" pos:end="45:39">[<expr pos:start="45:38" pos:end="45:38"><name pos:start="45:38" pos:end="45:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:28"><expr pos:start="47:17" pos:end="47:27"><name pos:start="47:17" pos:end="47:23">out_idx</name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <for pos:start="53:9" pos:end="55:52">for<control pos:start="53:12" pos:end="53:46">(<init pos:start="53:13" pos:end="53:22"><expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:13">i</name><operator pos:start="53:14" pos:end="53:14">=</operator><name pos:start="53:15" pos:end="53:21">out_idx</name></expr>;</init> <condition pos:start="53:24" pos:end="53:41"><expr pos:start="53:24" pos:end="53:40"><name pos:start="53:24" pos:end="53:40"><name pos:start="53:24" pos:end="53:24">h</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:37">delayed_pic</name><index pos:start="53:38" pos:end="53:40">[<expr pos:start="53:39" pos:end="53:39"><name pos:start="53:39" pos:end="53:39">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="53:43" pos:end="53:45"><expr pos:start="53:43" pos:end="53:45"><name pos:start="53:43" pos:end="53:43">i</name><operator pos:start="53:44" pos:end="53:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="55:13" pos:end="55:52"><block_content pos:start="55:13" pos:end="55:52">

            <expr_stmt pos:start="55:13" pos:end="55:52"><expr pos:start="55:13" pos:end="55:51"><name pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:13">h</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:26">delayed_pic</name><index pos:start="55:27" pos:end="55:29">[<expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">i</name></expr>]</index></name> <operator pos:start="55:31" pos:end="55:31">=</operator> <name pos:start="55:33" pos:end="55:51"><name pos:start="55:33" pos:end="55:33">h</name><operator pos:start="55:34" pos:end="55:35">-&gt;</operator><name pos:start="55:36" pos:end="55:46">delayed_pic</name><index pos:start="55:47" pos:end="55:51">[<expr pos:start="55:48" pos:end="55:50"><name pos:start="55:48" pos:end="55:48">i</name><operator pos:start="55:49" pos:end="55:49">+</operator><literal type="number" pos:start="55:50" pos:end="55:50">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if<condition pos:start="59:11" pos:end="59:15">(<expr pos:start="59:12" pos:end="59:14"><name pos:start="59:12" pos:end="59:14">out</name></expr>)</condition><block pos:start="59:16" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:34">

            <expr_stmt pos:start="61:13" pos:end="61:41"><expr pos:start="61:13" pos:end="61:40"><operator pos:start="61:13" pos:end="61:13">*</operator><name pos:start="61:14" pos:end="61:22">data_size</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <sizeof pos:start="61:26" pos:end="61:40">sizeof<argument_list pos:start="61:32" pos:end="61:40">(<argument pos:start="61:33" pos:end="61:39"><expr pos:start="61:33" pos:end="61:39"><name pos:start="61:33" pos:end="61:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:34"><expr pos:start="63:13" pos:end="63:33"><operator pos:start="63:13" pos:end="63:13">*</operator><name pos:start="63:14" pos:end="63:17">pict</name><operator pos:start="63:18" pos:end="63:18">=</operator> <operator pos:start="63:20" pos:end="63:20">*</operator><operator pos:start="63:21" pos:end="63:21">(</operator><name pos:start="63:22" pos:end="63:28">AVFrame</name><operator pos:start="63:29" pos:end="63:29">*</operator><operator pos:start="63:30" pos:end="63:30">)</operator><name pos:start="63:31" pos:end="63:33">out</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="153:5"><if pos:start="75:5" pos:end="153:5">if<condition pos:start="75:7" pos:end="75:33">(<expr pos:start="75:8" pos:end="75:32"><name pos:start="75:8" pos:end="75:16"><name pos:start="75:8" pos:end="75:8">h</name><operator pos:start="75:9" pos:end="75:10">-&gt;</operator><name pos:start="75:11" pos:end="75:16">is_avc</name></name> <operator pos:start="75:18" pos:end="75:19">&amp;&amp;</operator> <operator pos:start="75:21" pos:end="75:21">!</operator><name pos:start="75:22" pos:end="75:32"><name pos:start="75:22" pos:end="75:22">h</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:32">got_avcC</name></name></expr>)</condition> <block pos:start="75:35" pos:end="153:5">{<block_content pos:start="77:9" pos:end="151:24">

        <decl_stmt pos:start="77:9" pos:end="77:28"><decl pos:start="77:9" pos:end="77:13"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:13">i</name></decl>, <decl pos:start="77:16" pos:end="77:18"><type ref="prev" pos:start="77:9" pos:end="77:11"/><name pos:start="77:16" pos:end="77:18">cnt</name></decl>, <decl pos:start="77:21" pos:end="77:27"><type ref="prev" pos:start="77:9" pos:end="77:11"/><name pos:start="77:21" pos:end="77:27">nalsize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:44"><decl pos:start="79:9" pos:end="79:43"><type pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:16">unsigned</name> <name pos:start="79:18" pos:end="79:21">char</name> <modifier pos:start="79:23" pos:end="79:23">*</modifier></type><name pos:start="79:24" pos:end="79:24">p</name> <init pos:start="79:26" pos:end="79:43">= <expr pos:start="79:28" pos:end="79:43"><name pos:start="79:28" pos:end="79:43"><name pos:start="79:28" pos:end="79:32">avctx</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:43">extradata</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if<condition pos:start="81:11" pos:end="81:37">(<expr pos:start="81:12" pos:end="81:36"><name pos:start="81:12" pos:end="81:32"><name pos:start="81:12" pos:end="81:16">avctx</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:32">extradata_size</name></name> <operator pos:start="81:34" pos:end="81:34">&lt;</operator> <literal type="number" pos:start="81:36" pos:end="81:36">7</literal></expr>)</condition> <block pos:start="81:39" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:22">

            <expr_stmt pos:start="83:13" pos:end="83:60"><expr pos:start="83:13" pos:end="83:59"><call pos:start="83:13" pos:end="83:59"><name pos:start="83:13" pos:end="83:18">av_log</name><argument_list pos:start="83:19" pos:end="83:59">(<argument pos:start="83:20" pos:end="83:24"><expr pos:start="83:20" pos:end="83:24"><name pos:start="83:20" pos:end="83:24">avctx</name></expr></argument>, <argument pos:start="83:27" pos:end="83:38"><expr pos:start="83:27" pos:end="83:38"><name pos:start="83:27" pos:end="83:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:41" pos:end="83:58"><expr pos:start="83:41" pos:end="83:58"><literal type="string" pos:start="83:41" pos:end="83:58">"avcC too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:22">return <expr pos:start="85:20" pos:end="85:21"><operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if<condition pos:start="89:11" pos:end="89:19">(<expr pos:start="89:12" pos:end="89:18"><operator pos:start="89:12" pos:end="89:12">*</operator><name pos:start="89:13" pos:end="89:13">p</name> <operator pos:start="89:15" pos:end="89:16">!=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr>)</condition> <block pos:start="89:21" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:22">

            <expr_stmt pos:start="91:13" pos:end="91:73"><expr pos:start="91:13" pos:end="91:72"><call pos:start="91:13" pos:end="91:72"><name pos:start="91:13" pos:end="91:18">av_log</name><argument_list pos:start="91:19" pos:end="91:72">(<argument pos:start="91:20" pos:end="91:24"><expr pos:start="91:20" pos:end="91:24"><name pos:start="91:20" pos:end="91:24">avctx</name></expr></argument>, <argument pos:start="91:27" pos:end="91:38"><expr pos:start="91:27" pos:end="91:38"><name pos:start="91:27" pos:end="91:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:41" pos:end="91:67"><expr pos:start="91:41" pos:end="91:67"><literal type="string" pos:start="91:41" pos:end="91:67">"Unknown avcC version %d\n"</literal></expr></argument>, <argument pos:start="91:70" pos:end="91:71"><expr pos:start="91:70" pos:end="91:71"><operator pos:start="91:70" pos:end="91:70">*</operator><name pos:start="91:71" pos:end="91:71">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="97:9" pos:end="99:66">/* sps and pps in the avcC always have length coded with 2 bytes,

           so put a fake nal_length_size = 2 while parsing them */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:31"><expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:26"><name pos:start="101:9" pos:end="101:9">h</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:26">nal_length_size</name></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <literal type="number" pos:start="101:30" pos:end="101:30">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="103:9" pos:end="103:31">// Decode sps from avcC</comment>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:11">cnt</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">*</operator><operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:17">p</name><operator pos:start="105:18" pos:end="105:18">+</operator><literal type="number" pos:start="105:19" pos:end="105:19">5</literal><operator pos:start="105:20" pos:end="105:20">)</operator> <operator pos:start="105:22" pos:end="105:22">&amp;</operator> <literal type="number" pos:start="105:24" pos:end="105:27">0x1f</literal></expr>;</expr_stmt> <comment type="line" pos:start="105:30" pos:end="105:45">// Number of sps</comment>

        <expr_stmt pos:start="107:9" pos:end="107:15"><expr pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:9">p</name> <operator pos:start="107:11" pos:end="107:12">+=</operator> <literal type="number" pos:start="107:14" pos:end="107:14">6</literal></expr>;</expr_stmt>

        <for pos:start="109:9" pos:end="123:9">for <control pos:start="109:13" pos:end="109:33">(<init pos:start="109:14" pos:end="109:19"><expr pos:start="109:14" pos:end="109:18"><name pos:start="109:14" pos:end="109:14">i</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>;</init> <condition pos:start="109:21" pos:end="109:28"><expr pos:start="109:21" pos:end="109:27"><name pos:start="109:21" pos:end="109:21">i</name> <operator pos:start="109:23" pos:end="109:23">&lt;</operator> <name pos:start="109:25" pos:end="109:27">cnt</name></expr>;</condition> <incr pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><name pos:start="109:30" pos:end="109:30">i</name><operator pos:start="109:31" pos:end="109:32">++</operator></expr></incr>)</control> <block pos:start="109:35" pos:end="123:9">{<block_content pos:start="111:13" pos:end="121:25">

            <expr_stmt pos:start="111:13" pos:end="111:37"><expr pos:start="111:13" pos:end="111:36"><name pos:start="111:13" pos:end="111:19">nalsize</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <call pos:start="111:23" pos:end="111:32"><name pos:start="111:23" pos:end="111:29">AV_RB16</name><argument_list pos:start="111:30" pos:end="111:32">(<argument pos:start="111:31" pos:end="111:31"><expr pos:start="111:31" pos:end="111:31"><name pos:start="111:31" pos:end="111:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="111:34" pos:end="111:34">+</operator> <literal type="number" pos:start="111:36" pos:end="111:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if<condition pos:start="113:15" pos:end="113:51">(<expr pos:start="113:16" pos:end="113:50"><call pos:start="113:16" pos:end="113:46"><name pos:start="113:16" pos:end="113:31">decode_nal_units</name><argument_list pos:start="113:32" pos:end="113:46">(<argument pos:start="113:33" pos:end="113:33"><expr pos:start="113:33" pos:end="113:33"><name pos:start="113:33" pos:end="113:33">h</name></expr></argument>, <argument pos:start="113:36" pos:end="113:36"><expr pos:start="113:36" pos:end="113:36"><name pos:start="113:36" pos:end="113:36">p</name></expr></argument>, <argument pos:start="113:39" pos:end="113:45"><expr pos:start="113:39" pos:end="113:45"><name pos:start="113:39" pos:end="113:45">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="113:48" pos:end="113:48">&lt;</operator> <literal type="number" pos:start="113:50" pos:end="113:50">0</literal></expr>)</condition> <block pos:start="113:53" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:26">

                <expr_stmt pos:start="115:17" pos:end="115:85"><expr pos:start="115:17" pos:end="115:84"><call pos:start="115:17" pos:end="115:84"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="115:84">(<argument pos:start="115:24" pos:end="115:28"><expr pos:start="115:24" pos:end="115:28"><name pos:start="115:24" pos:end="115:28">avctx</name></expr></argument>, <argument pos:start="115:31" pos:end="115:42"><expr pos:start="115:31" pos:end="115:42"><name pos:start="115:31" pos:end="115:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:45" pos:end="115:80"><expr pos:start="115:45" pos:end="115:80"><literal type="string" pos:start="115:45" pos:end="115:80">"Decoding sps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="115:83" pos:end="115:83"><expr pos:start="115:83" pos:end="115:83"><name pos:start="115:83" pos:end="115:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="117:17" pos:end="117:26">return <expr pos:start="117:24" pos:end="117:25"><operator pos:start="117:24" pos:end="117:24">-</operator><literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:25"><expr pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:13">p</name> <operator pos:start="121:15" pos:end="121:16">+=</operator> <name pos:start="121:18" pos:end="121:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="125:9" pos:end="125:31">// Decode pps from avcC</comment>

        <expr_stmt pos:start="127:9" pos:end="127:21"><expr pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:11">cnt</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <operator pos:start="127:15" pos:end="127:15">*</operator><operator pos:start="127:16" pos:end="127:16">(</operator><name pos:start="127:17" pos:end="127:17">p</name><operator pos:start="127:18" pos:end="127:19">++</operator><operator pos:start="127:20" pos:end="127:20">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="127:23" pos:end="127:38">// Number of pps</comment>

        <for pos:start="129:9" pos:end="143:9">for <control pos:start="129:13" pos:end="129:33">(<init pos:start="129:14" pos:end="129:19"><expr pos:start="129:14" pos:end="129:18"><name pos:start="129:14" pos:end="129:14">i</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <literal type="number" pos:start="129:18" pos:end="129:18">0</literal></expr>;</init> <condition pos:start="129:21" pos:end="129:28"><expr pos:start="129:21" pos:end="129:27"><name pos:start="129:21" pos:end="129:21">i</name> <operator pos:start="129:23" pos:end="129:23">&lt;</operator> <name pos:start="129:25" pos:end="129:27">cnt</name></expr>;</condition> <incr pos:start="129:30" pos:end="129:32"><expr pos:start="129:30" pos:end="129:32"><name pos:start="129:30" pos:end="129:30">i</name><operator pos:start="129:31" pos:end="129:32">++</operator></expr></incr>)</control> <block pos:start="129:35" pos:end="143:9">{<block_content pos:start="131:13" pos:end="141:25">

            <expr_stmt pos:start="131:13" pos:end="131:37"><expr pos:start="131:13" pos:end="131:36"><name pos:start="131:13" pos:end="131:19">nalsize</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <call pos:start="131:23" pos:end="131:32"><name pos:start="131:23" pos:end="131:29">AV_RB16</name><argument_list pos:start="131:30" pos:end="131:32">(<argument pos:start="131:31" pos:end="131:31"><expr pos:start="131:31" pos:end="131:31"><name pos:start="131:31" pos:end="131:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="131:34" pos:end="131:34">+</operator> <literal type="number" pos:start="131:36" pos:end="131:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="139:13"><if pos:start="133:13" pos:end="139:13">if<condition pos:start="133:15" pos:end="133:59">(<expr pos:start="133:16" pos:end="133:58"><call pos:start="133:16" pos:end="133:46"><name pos:start="133:16" pos:end="133:31">decode_nal_units</name><argument_list pos:start="133:32" pos:end="133:46">(<argument pos:start="133:33" pos:end="133:33"><expr pos:start="133:33" pos:end="133:33"><name pos:start="133:33" pos:end="133:33">h</name></expr></argument>, <argument pos:start="133:36" pos:end="133:36"><expr pos:start="133:36" pos:end="133:36"><name pos:start="133:36" pos:end="133:36">p</name></expr></argument>, <argument pos:start="133:39" pos:end="133:45"><expr pos:start="133:39" pos:end="133:45"><name pos:start="133:39" pos:end="133:45">nalsize</name></expr></argument>)</argument_list></call>  <operator pos:start="133:49" pos:end="133:50">!=</operator> <name pos:start="133:52" pos:end="133:58">nalsize</name></expr>)</condition> <block pos:start="133:61" pos:end="139:13">{<block_content pos:start="135:17" pos:end="137:26">

                <expr_stmt pos:start="135:17" pos:end="135:85"><expr pos:start="135:17" pos:end="135:84"><call pos:start="135:17" pos:end="135:84"><name pos:start="135:17" pos:end="135:22">av_log</name><argument_list pos:start="135:23" pos:end="135:84">(<argument pos:start="135:24" pos:end="135:28"><expr pos:start="135:24" pos:end="135:28"><name pos:start="135:24" pos:end="135:28">avctx</name></expr></argument>, <argument pos:start="135:31" pos:end="135:42"><expr pos:start="135:31" pos:end="135:42"><name pos:start="135:31" pos:end="135:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:45" pos:end="135:80"><expr pos:start="135:45" pos:end="135:80"><literal type="string" pos:start="135:45" pos:end="135:80">"Decoding pps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="135:83" pos:end="135:83"><expr pos:start="135:83" pos:end="135:83"><name pos:start="135:83" pos:end="135:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="137:17" pos:end="137:26">return <expr pos:start="137:24" pos:end="137:25"><operator pos:start="137:24" pos:end="137:24">-</operator><literal type="number" pos:start="137:25" pos:end="137:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:25"><expr pos:start="141:13" pos:end="141:24"><name pos:start="141:13" pos:end="141:13">p</name> <operator pos:start="141:15" pos:end="141:16">+=</operator> <name pos:start="141:18" pos:end="141:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="145:9" pos:end="145:84">// Now store right nal length size, that will be use to parse all other nals</comment>

        <expr_stmt pos:start="147:9" pos:end="147:73"><expr pos:start="147:9" pos:end="147:72"><name pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:9">h</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:26">nal_length_size</name></name> <operator pos:start="147:28" pos:end="147:28">=</operator> <operator pos:start="147:30" pos:end="147:30">(</operator><operator pos:start="147:31" pos:end="147:31">(</operator><operator pos:start="147:32" pos:end="147:32">*</operator><operator pos:start="147:33" pos:end="147:33">(</operator><operator pos:start="147:34" pos:end="147:34">(</operator><operator pos:start="147:35" pos:end="147:35">(</operator><name pos:start="147:36" pos:end="147:39">char</name><operator pos:start="147:40" pos:end="147:40">*</operator><operator pos:start="147:41" pos:end="147:41">)</operator><operator pos:start="147:42" pos:end="147:42">(</operator><name pos:start="147:43" pos:end="147:58"><name pos:start="147:43" pos:end="147:47">avctx</name><operator pos:start="147:48" pos:end="147:49">-&gt;</operator><name pos:start="147:50" pos:end="147:58">extradata</name></name><operator pos:start="147:59" pos:end="147:59">)</operator><operator pos:start="147:60" pos:end="147:60">)</operator><operator pos:start="147:61" pos:end="147:61">+</operator><literal type="number" pos:start="147:62" pos:end="147:62">4</literal><operator pos:start="147:63" pos:end="147:63">)</operator><operator pos:start="147:64" pos:end="147:64">)</operator><operator pos:start="147:65" pos:end="147:65">&amp;</operator><literal type="number" pos:start="147:66" pos:end="147:69">0x03</literal><operator pos:start="147:70" pos:end="147:70">)</operator><operator pos:start="147:71" pos:end="147:71">+</operator><literal type="number" pos:start="147:72" pos:end="147:72">1</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="149:9" pos:end="149:30">// Do not reparse avcC</comment>

        <expr_stmt pos:start="151:9" pos:end="151:24"><expr pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:19"><name pos:start="151:9" pos:end="151:9">h</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:19">got_avcC</name></name> <operator pos:start="151:21" pos:end="151:21">=</operator> <literal type="number" pos:start="151:23" pos:end="151:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if<condition pos:start="157:7" pos:end="157:72">(<expr pos:start="157:8" pos:end="157:71"><name pos:start="157:8" pos:end="157:26"><name pos:start="157:8" pos:end="157:12">avctx</name><operator pos:start="157:13" pos:end="157:14">-&gt;</operator><name pos:start="157:15" pos:end="157:26">frame_number</name></name><operator pos:start="157:27" pos:end="157:28">==</operator><literal type="number" pos:start="157:29" pos:end="157:29">0</literal> <operator pos:start="157:31" pos:end="157:32">&amp;&amp;</operator> <operator pos:start="157:34" pos:end="157:34">!</operator><name pos:start="157:35" pos:end="157:43"><name pos:start="157:35" pos:end="157:35">h</name><operator pos:start="157:36" pos:end="157:37">-&gt;</operator><name pos:start="157:38" pos:end="157:43">is_avc</name></name> <operator pos:start="157:45" pos:end="157:46">&amp;&amp;</operator> <name pos:start="157:48" pos:end="157:71"><name pos:start="157:48" pos:end="157:48">s</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:55">avctx</name><operator pos:start="157:56" pos:end="157:57">-&gt;</operator><name pos:start="157:58" pos:end="157:71">extradata_size</name></name></expr>)</condition><block pos:start="157:73" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:22">

        <if_stmt pos:start="159:9" pos:end="161:22"><if pos:start="159:9" pos:end="161:22">if<condition pos:start="159:11" pos:end="159:82">(<expr pos:start="159:12" pos:end="159:81"><call pos:start="159:12" pos:end="159:77"><name pos:start="159:12" pos:end="159:27">decode_nal_units</name><argument_list pos:start="159:28" pos:end="159:77">(<argument pos:start="159:29" pos:end="159:29"><expr pos:start="159:29" pos:end="159:29"><name pos:start="159:29" pos:end="159:29">h</name></expr></argument>, <argument pos:start="159:32" pos:end="159:50"><expr pos:start="159:32" pos:end="159:50"><name pos:start="159:32" pos:end="159:50"><name pos:start="159:32" pos:end="159:32">s</name><operator pos:start="159:33" pos:end="159:34">-&gt;</operator><name pos:start="159:35" pos:end="159:39">avctx</name><operator pos:start="159:40" pos:end="159:41">-&gt;</operator><name pos:start="159:42" pos:end="159:50">extradata</name></name></expr></argument>, <argument pos:start="159:53" pos:end="159:76"><expr pos:start="159:53" pos:end="159:76"><name pos:start="159:53" pos:end="159:76"><name pos:start="159:53" pos:end="159:53">s</name><operator pos:start="159:54" pos:end="159:55">-&gt;</operator><name pos:start="159:56" pos:end="159:60">avctx</name><operator pos:start="159:61" pos:end="159:62">-&gt;</operator><name pos:start="159:63" pos:end="159:76">extradata_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="159:79" pos:end="159:79">&lt;</operator> <literal type="number" pos:start="159:81" pos:end="159:81">0</literal></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:22"><block_content pos:start="161:13" pos:end="161:22">

            <return pos:start="161:13" pos:end="161:22">return <expr pos:start="161:20" pos:end="161:21"><operator pos:start="161:20" pos:end="161:20">-</operator><literal type="number" pos:start="161:21" pos:end="161:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:49"><expr pos:start="167:5" pos:end="167:48"><name pos:start="167:5" pos:end="167:13">buf_index</name><operator pos:start="167:14" pos:end="167:14">=</operator><call pos:start="167:15" pos:end="167:48"><name pos:start="167:15" pos:end="167:30">decode_nal_units</name><argument_list pos:start="167:31" pos:end="167:48">(<argument pos:start="167:32" pos:end="167:32"><expr pos:start="167:32" pos:end="167:32"><name pos:start="167:32" pos:end="167:32">h</name></expr></argument>, <argument pos:start="167:35" pos:end="167:37"><expr pos:start="167:35" pos:end="167:37"><name pos:start="167:35" pos:end="167:37">buf</name></expr></argument>, <argument pos:start="167:40" pos:end="167:47"><expr pos:start="167:40" pos:end="167:47"><name pos:start="167:40" pos:end="167:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="171:18"><if pos:start="169:5" pos:end="171:18">if<condition pos:start="169:7" pos:end="169:21">(<expr pos:start="169:8" pos:end="169:20"><name pos:start="169:8" pos:end="169:16">buf_index</name> <operator pos:start="169:18" pos:end="169:18">&lt;</operator> <literal type="number" pos:start="169:20" pos:end="169:20">0</literal></expr>)</condition><block type="pseudo" pos:start="171:9" pos:end="171:18"><block_content pos:start="171:9" pos:end="171:18">

        <return pos:start="171:9" pos:end="171:18">return <expr pos:start="171:16" pos:end="171:17"><operator pos:start="171:16" pos:end="171:16">-</operator><literal type="number" pos:start="171:17" pos:end="171:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="175:5" pos:end="183:5"><if pos:start="175:5" pos:end="183:5">if<condition pos:start="175:7" pos:end="175:68">(<expr pos:start="175:8" pos:end="175:67"><operator pos:start="175:8" pos:end="175:8">!</operator><operator pos:start="175:9" pos:end="175:9">(</operator><name pos:start="175:10" pos:end="175:18"><name pos:start="175:10" pos:end="175:10">s</name><operator pos:start="175:11" pos:end="175:12">-&gt;</operator><name pos:start="175:13" pos:end="175:18">flags2</name></name> <operator pos:start="175:20" pos:end="175:20">&amp;</operator> <name pos:start="175:22" pos:end="175:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="175:40" pos:end="175:40">)</operator> <operator pos:start="175:42" pos:end="175:43">&amp;&amp;</operator> <operator pos:start="175:45" pos:end="175:45">!</operator><name pos:start="175:46" pos:end="175:67"><name pos:start="175:46" pos:end="175:46">s</name><operator pos:start="175:47" pos:end="175:48">-&gt;</operator><name pos:start="175:49" pos:end="175:67">current_picture_ptr</name></name></expr>)</condition><block pos:start="175:69" pos:end="183:5">{<block_content pos:start="177:9" pos:end="181:18">

        <if_stmt pos:start="177:9" pos:end="177:75"><if pos:start="177:9" pos:end="177:75">if <condition pos:start="177:12" pos:end="177:65">(<expr pos:start="177:13" pos:end="177:64"><name pos:start="177:13" pos:end="177:29"><name pos:start="177:13" pos:end="177:17">avctx</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:29">skip_frame</name></name> <operator pos:start="177:31" pos:end="177:32">&gt;=</operator> <name pos:start="177:34" pos:end="177:49">AVDISCARD_NONREF</name> <operator pos:start="177:51" pos:end="177:52">||</operator> <name pos:start="177:54" pos:end="177:64"><name pos:start="177:54" pos:end="177:54">s</name><operator pos:start="177:55" pos:end="177:56">-&gt;</operator><name pos:start="177:57" pos:end="177:64">hurry_up</name></name></expr>)</condition><block type="pseudo" pos:start="177:67" pos:end="177:75"><block_content pos:start="177:67" pos:end="177:75"> <return pos:start="177:67" pos:end="177:75">return <expr pos:start="177:74" pos:end="177:74"><literal type="number" pos:start="177:74" pos:end="177:74">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:51"><expr pos:start="179:9" pos:end="179:50"><call pos:start="179:9" pos:end="179:50"><name pos:start="179:9" pos:end="179:14">av_log</name><argument_list pos:start="179:15" pos:end="179:50">(<argument pos:start="179:16" pos:end="179:20"><expr pos:start="179:16" pos:end="179:20"><name pos:start="179:16" pos:end="179:20">avctx</name></expr></argument>, <argument pos:start="179:23" pos:end="179:34"><expr pos:start="179:23" pos:end="179:34"><name pos:start="179:23" pos:end="179:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:37" pos:end="179:49"><expr pos:start="179:37" pos:end="179:49"><literal type="string" pos:start="179:37" pos:end="179:49">"no frame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="181:9" pos:end="181:18">return <expr pos:start="181:16" pos:end="181:17"><operator pos:start="181:16" pos:end="181:16">-</operator><literal type="number" pos:start="181:17" pos:end="181:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="397:5"><if pos:start="187:5" pos:end="397:5">if<condition pos:start="187:7" pos:end="187:86">(<expr pos:start="187:8" pos:end="187:85"><operator pos:start="187:8" pos:end="187:8">!</operator><operator pos:start="187:9" pos:end="187:9">(</operator><name pos:start="187:10" pos:end="187:18"><name pos:start="187:10" pos:end="187:10">s</name><operator pos:start="187:11" pos:end="187:12">-&gt;</operator><name pos:start="187:13" pos:end="187:18">flags2</name></name> <operator pos:start="187:20" pos:end="187:20">&amp;</operator> <name pos:start="187:22" pos:end="187:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="187:40" pos:end="187:40">)</operator> <operator pos:start="187:42" pos:end="187:43">||</operator> <operator pos:start="187:45" pos:end="187:45">(</operator><name pos:start="187:46" pos:end="187:52"><name pos:start="187:46" pos:end="187:46">s</name><operator pos:start="187:47" pos:end="187:48">-&gt;</operator><name pos:start="187:49" pos:end="187:52">mb_y</name></name> <operator pos:start="187:54" pos:end="187:55">&gt;=</operator> <name pos:start="187:57" pos:end="187:68"><name pos:start="187:57" pos:end="187:57">s</name><operator pos:start="187:58" pos:end="187:59">-&gt;</operator><name pos:start="187:60" pos:end="187:68">mb_height</name></name> <operator pos:start="187:70" pos:end="187:71">&amp;&amp;</operator> <name pos:start="187:73" pos:end="187:84"><name pos:start="187:73" pos:end="187:73">s</name><operator pos:start="187:74" pos:end="187:75">-&gt;</operator><name pos:start="187:76" pos:end="187:84">mb_height</name></name><operator pos:start="187:85" pos:end="187:85">)</operator></expr>)</condition><block pos:start="187:87" pos:end="397:5">{<block_content pos:start="189:9" pos:end="395:9">

        <decl_stmt pos:start="189:9" pos:end="189:46"><decl pos:start="189:9" pos:end="189:45"><type pos:start="189:9" pos:end="189:17"><name pos:start="189:9" pos:end="189:15">Picture</name> <modifier pos:start="189:17" pos:end="189:17">*</modifier></type><name pos:start="189:18" pos:end="189:20">out</name> <init pos:start="189:22" pos:end="189:45">= <expr pos:start="189:24" pos:end="189:45"><name pos:start="189:24" pos:end="189:45"><name pos:start="189:24" pos:end="189:24">s</name><operator pos:start="189:25" pos:end="189:26">-&gt;</operator><name pos:start="189:27" pos:end="189:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:46"><decl pos:start="191:9" pos:end="191:45"><type pos:start="191:9" pos:end="191:17"><name pos:start="191:9" pos:end="191:15">Picture</name> <modifier pos:start="191:17" pos:end="191:17">*</modifier></type><name pos:start="191:18" pos:end="191:20">cur</name> <init pos:start="191:22" pos:end="191:45">= <expr pos:start="191:24" pos:end="191:45"><name pos:start="191:24" pos:end="191:45"><name pos:start="191:24" pos:end="191:24">s</name><operator pos:start="191:25" pos:end="191:26">-&gt;</operator><name pos:start="191:27" pos:end="191:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="193:9" pos:end="193:54"><decl pos:start="193:9" pos:end="193:13"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:13">i</name></decl>, <decl pos:start="193:16" pos:end="193:19"><type ref="prev" pos:start="193:9" pos:end="193:11"/><name pos:start="193:16" pos:end="193:19">pics</name></decl>, <decl pos:start="193:22" pos:end="193:30"><type ref="prev" pos:start="193:9" pos:end="193:11"/><name pos:start="193:22" pos:end="193:30">cross_idr</name></decl>, <decl pos:start="193:33" pos:end="193:44"><type ref="prev" pos:start="193:9" pos:end="193:11"/><name pos:start="193:33" pos:end="193:44">out_of_order</name></decl>, <decl pos:start="193:47" pos:end="193:53"><type ref="prev" pos:start="193:9" pos:end="193:11"/><name pos:start="193:47" pos:end="193:53">out_idx</name></decl>;</decl_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:19"><expr pos:start="197:9" pos:end="197:18"><name pos:start="197:9" pos:end="197:15"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:15">mb_y</name></name><operator pos:start="197:16" pos:end="197:16">=</operator> <literal type="number" pos:start="197:18" pos:end="197:18">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="201:9" pos:end="201:65"><expr pos:start="201:9" pos:end="201:64"><name pos:start="201:9" pos:end="201:43"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:30">current_picture_ptr</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:43">qscale_type</name></name><operator pos:start="201:44" pos:end="201:44">=</operator> <name pos:start="201:46" pos:end="201:64">FF_QSCALE_TYPE_H264</name></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:56"><expr pos:start="203:9" pos:end="203:55"><name pos:start="203:9" pos:end="203:41"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:30">current_picture_ptr</name><operator pos:start="203:31" pos:end="203:32">-&gt;</operator><name pos:start="203:33" pos:end="203:41">pict_type</name></name><operator pos:start="203:42" pos:end="203:42">=</operator> <name pos:start="203:44" pos:end="203:55"><name pos:start="203:44" pos:end="203:44">s</name><operator pos:start="203:45" pos:end="203:46">-&gt;</operator><name pos:start="203:47" pos:end="203:55">pict_type</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if<condition pos:start="207:11" pos:end="207:24">(<expr pos:start="207:12" pos:end="207:23"><operator pos:start="207:12" pos:end="207:12">!</operator><name pos:start="207:13" pos:end="207:23"><name pos:start="207:13" pos:end="207:13">s</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:23">dropable</name></name></expr>)</condition> <block pos:start="207:26" pos:end="215:9">{<block_content pos:start="209:13" pos:end="213:40">

            <expr_stmt pos:start="209:13" pos:end="209:63"><expr pos:start="209:13" pos:end="209:62"><call pos:start="209:13" pos:end="209:62"><name pos:start="209:13" pos:end="209:35">execute_ref_pic_marking</name><argument_list pos:start="209:36" pos:end="209:62">(<argument pos:start="209:37" pos:end="209:37"><expr pos:start="209:37" pos:end="209:37"><name pos:start="209:37" pos:end="209:37">h</name></expr></argument>, <argument pos:start="209:40" pos:end="209:46"><expr pos:start="209:40" pos:end="209:46"><name pos:start="209:40" pos:end="209:46"><name pos:start="209:40" pos:end="209:40">h</name><operator pos:start="209:41" pos:end="209:42">-&gt;</operator><name pos:start="209:43" pos:end="209:46">mmco</name></name></expr></argument>, <argument pos:start="209:49" pos:end="209:61"><expr pos:start="209:49" pos:end="209:61"><name pos:start="209:49" pos:end="209:61"><name pos:start="209:49" pos:end="209:49">h</name><operator pos:start="209:50" pos:end="209:51">-&gt;</operator><name pos:start="209:52" pos:end="209:61">mmco_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:40"><expr pos:start="211:13" pos:end="211:39"><name pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:13">h</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:27">prev_poc_msb</name></name><operator pos:start="211:28" pos:end="211:28">=</operator> <name pos:start="211:30" pos:end="211:39"><name pos:start="211:30" pos:end="211:30">h</name><operator pos:start="211:31" pos:end="211:32">-&gt;</operator><name pos:start="211:33" pos:end="211:39">poc_msb</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:40"><expr pos:start="213:13" pos:end="213:39"><name pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:13">h</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:27">prev_poc_lsb</name></name><operator pos:start="213:28" pos:end="213:28">=</operator> <name pos:start="213:30" pos:end="213:39"><name pos:start="213:30" pos:end="213:30">h</name><operator pos:start="213:31" pos:end="213:32">-&gt;</operator><name pos:start="213:33" pos:end="213:39">poc_lsb</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:54"><expr pos:start="217:9" pos:end="217:53"><name pos:start="217:9" pos:end="217:32"><name pos:start="217:9" pos:end="217:9">h</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:32">prev_frame_num_offset</name></name><operator pos:start="217:33" pos:end="217:33">=</operator> <name pos:start="217:35" pos:end="217:53"><name pos:start="217:35" pos:end="217:35">h</name><operator pos:start="217:36" pos:end="217:37">-&gt;</operator><name pos:start="217:38" pos:end="217:53">frame_num_offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:40"><expr pos:start="219:9" pos:end="219:39"><name pos:start="219:9" pos:end="219:25"><name pos:start="219:9" pos:end="219:9">h</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:25">prev_frame_num</name></name><operator pos:start="219:26" pos:end="219:26">=</operator> <name pos:start="219:28" pos:end="219:39"><name pos:start="219:28" pos:end="219:28">h</name><operator pos:start="219:29" pos:end="219:30">-&gt;</operator><name pos:start="219:31" pos:end="219:39">frame_num</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="223:9" pos:end="245:11">/*

         * FIXME: Error handling code does not seem to support interlaced

         * when slices span multiple rows

         * The ff_er_add_slice calls don't work right for bottom

         * fields; they cause massive erroneous error concealing

         * Error marking covers both fields (top and bottom).

         * This causes a mismatched s-&gt;error_count

         * and a bad error table. Further, the error count goes to

         * INT_MAX when called for bottom field, because mb_y is

         * past end by one (callers fault) and resync_mb_y != 0

         * causes problems for the first MB line, too.

         */</comment>

        <if_stmt pos:start="247:9" pos:end="249:31"><if pos:start="247:9" pos:end="249:31">if <condition pos:start="247:12" pos:end="247:27">(<expr pos:start="247:13" pos:end="247:26"><operator pos:start="247:13" pos:end="247:13">!</operator><name pos:start="247:14" pos:end="247:26">FIELD_PICTURE</name></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:31"><block_content pos:start="249:13" pos:end="249:31">

            <expr_stmt pos:start="249:13" pos:end="249:31"><expr pos:start="249:13" pos:end="249:30"><call pos:start="249:13" pos:end="249:30"><name pos:start="249:13" pos:end="249:27">ff_er_frame_end</name><argument_list pos:start="249:28" pos:end="249:30">(<argument pos:start="249:29" pos:end="249:29"><expr pos:start="249:29" pos:end="249:29"><name pos:start="249:29" pos:end="249:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="253:9" pos:end="253:25"><expr pos:start="253:9" pos:end="253:24"><call pos:start="253:9" pos:end="253:24"><name pos:start="253:9" pos:end="253:21">MPV_frame_end</name><argument_list pos:start="253:22" pos:end="253:24">(<argument pos:start="253:23" pos:end="253:23"><expr pos:start="253:23" pos:end="253:23"><name pos:start="253:23" pos:end="253:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="257:9" pos:end="395:9"><if pos:start="257:9" pos:end="265:9">if <condition pos:start="257:12" pos:end="257:27">(<expr pos:start="257:13" pos:end="257:26"><name pos:start="257:13" pos:end="257:26"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:26">first_field</name></name></expr>)</condition> <block pos:start="257:29" pos:end="265:9">{<block_content pos:start="261:13" pos:end="261:27">

            <comment type="block" pos:start="259:13" pos:end="259:40">/* Wait for second field. */</comment>

            <expr_stmt pos:start="261:13" pos:end="261:27"><expr pos:start="261:13" pos:end="261:26"><operator pos:start="261:13" pos:end="261:13">*</operator><name pos:start="261:14" pos:end="261:22">data_size</name> <operator pos:start="261:24" pos:end="261:24">=</operator> <literal type="number" pos:start="261:26" pos:end="261:26">0</literal></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="265:11" pos:end="395:9">else <block pos:start="265:16" pos:end="395:9">{<block_content pos:start="267:13" pos:end="393:13">

            <expr_stmt pos:start="267:13" pos:end="267:59"><expr pos:start="267:13" pos:end="267:58"><name pos:start="267:13" pos:end="267:33"><name pos:start="267:13" pos:end="267:15">cur</name><operator pos:start="267:16" pos:end="267:17">-&gt;</operator><name pos:start="267:18" pos:end="267:33">interlaced_frame</name></name> <operator pos:start="267:35" pos:end="267:35">=</operator> <name pos:start="267:37" pos:end="267:58">FIELD_OR_MBAFF_PICTURE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="269:13" pos:end="269:57">/* Derive top_field_first from field pocs. */</comment>

            <expr_stmt pos:start="271:13" pos:end="271:73"><expr pos:start="271:13" pos:end="271:72"><name pos:start="271:13" pos:end="271:32"><name pos:start="271:13" pos:end="271:15">cur</name><operator pos:start="271:16" pos:end="271:17">-&gt;</operator><name pos:start="271:18" pos:end="271:32">top_field_first</name></name> <operator pos:start="271:34" pos:end="271:34">=</operator> <name pos:start="271:36" pos:end="271:52"><name pos:start="271:36" pos:end="271:38">cur</name><operator pos:start="271:39" pos:end="271:40">-&gt;</operator><name pos:start="271:41" pos:end="271:49">field_poc</name><index pos:start="271:50" pos:end="271:52">[<expr pos:start="271:51" pos:end="271:51"><literal type="number" pos:start="271:51" pos:end="271:51">0</literal></expr>]</index></name> <operator pos:start="271:54" pos:end="271:54">&lt;</operator> <name pos:start="271:56" pos:end="271:72"><name pos:start="271:56" pos:end="271:58">cur</name><operator pos:start="271:59" pos:end="271:60">-&gt;</operator><name pos:start="271:61" pos:end="271:69">field_poc</name><index pos:start="271:70" pos:end="271:72">[<expr pos:start="271:71" pos:end="271:71"><literal type="number" pos:start="271:71" pos:end="271:71">1</literal></expr>]</index></name></expr>;</expr_stmt>



        <comment type="line" pos:start="275:9" pos:end="275:62">//FIXME do something with unavailable reference frames</comment>



            <comment type="block" pos:start="279:13" pos:end="279:50">/* Sort B-frames into display order */</comment>



            <if_stmt pos:start="283:13" pos:end="291:13"><if pos:start="283:13" pos:end="291:13">if<condition pos:start="283:15" pos:end="285:69">(<expr pos:start="283:16" pos:end="285:68"><name pos:start="283:16" pos:end="283:48"><name pos:start="283:16" pos:end="283:16">h</name><operator pos:start="283:17" pos:end="283:18">-&gt;</operator><name pos:start="283:19" pos:end="283:21">sps</name><operator pos:start="283:22" pos:end="283:22">.</operator><name pos:start="283:23" pos:end="283:48">bitstream_restriction_flag</name></name>

               <operator pos:start="285:16" pos:end="285:17">&amp;&amp;</operator> <name pos:start="285:19" pos:end="285:40"><name pos:start="285:19" pos:end="285:19">s</name><operator pos:start="285:20" pos:end="285:21">-&gt;</operator><name pos:start="285:22" pos:end="285:26">avctx</name><operator pos:start="285:27" pos:end="285:28">-&gt;</operator><name pos:start="285:29" pos:end="285:40">has_b_frames</name></name> <operator pos:start="285:42" pos:end="285:42">&lt;</operator> <name pos:start="285:44" pos:end="285:68"><name pos:start="285:44" pos:end="285:44">h</name><operator pos:start="285:45" pos:end="285:46">-&gt;</operator><name pos:start="285:47" pos:end="285:49">sps</name><operator pos:start="285:50" pos:end="285:50">.</operator><name pos:start="285:51" pos:end="285:68">num_reorder_frames</name></name></expr>)</condition><block pos:start="285:70" pos:end="291:13">{<block_content pos:start="287:17" pos:end="289:33">

                <expr_stmt pos:start="287:17" pos:end="287:67"><expr pos:start="287:17" pos:end="287:66"><name pos:start="287:17" pos:end="287:38"><name pos:start="287:17" pos:end="287:17">s</name><operator pos:start="287:18" pos:end="287:19">-&gt;</operator><name pos:start="287:20" pos:end="287:24">avctx</name><operator pos:start="287:25" pos:end="287:26">-&gt;</operator><name pos:start="287:27" pos:end="287:38">has_b_frames</name></name> <operator pos:start="287:40" pos:end="287:40">=</operator> <name pos:start="287:42" pos:end="287:66"><name pos:start="287:42" pos:end="287:42">h</name><operator pos:start="287:43" pos:end="287:44">-&gt;</operator><name pos:start="287:45" pos:end="287:47">sps</name><operator pos:start="287:48" pos:end="287:48">.</operator><name pos:start="287:49" pos:end="287:66">num_reorder_frames</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:33"><expr pos:start="289:17" pos:end="289:32"><name pos:start="289:17" pos:end="289:28"><name pos:start="289:17" pos:end="289:17">s</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:28">low_delay</name></name> <operator pos:start="289:30" pos:end="289:30">=</operator> <literal type="number" pos:start="289:32" pos:end="289:32">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="295:13" pos:end="303:13"><if pos:start="295:13" pos:end="303:13">if<condition pos:start="295:15" pos:end="297:53">(   <expr pos:start="295:19" pos:end="297:52"><name pos:start="295:19" pos:end="295:49"><name pos:start="295:19" pos:end="295:19">s</name><operator pos:start="295:20" pos:end="295:21">-&gt;</operator><name pos:start="295:22" pos:end="295:26">avctx</name><operator pos:start="295:27" pos:end="295:28">-&gt;</operator><name pos:start="295:29" pos:end="295:49">strict_std_compliance</name></name> <operator pos:start="295:51" pos:end="295:52">&gt;=</operator> <name pos:start="295:54" pos:end="295:73">FF_COMPLIANCE_STRICT</name>

               <operator pos:start="297:16" pos:end="297:17">&amp;&amp;</operator> <operator pos:start="297:19" pos:end="297:19">!</operator><name pos:start="297:20" pos:end="297:52"><name pos:start="297:20" pos:end="297:20">h</name><operator pos:start="297:21" pos:end="297:22">-&gt;</operator><name pos:start="297:23" pos:end="297:25">sps</name><operator pos:start="297:26" pos:end="297:26">.</operator><name pos:start="297:27" pos:end="297:52">bitstream_restriction_flag</name></name></expr>)</condition><block pos:start="297:54" pos:end="303:13">{<block_content pos:start="299:17" pos:end="301:32">

                <expr_stmt pos:start="299:17" pos:end="299:62"><expr pos:start="299:17" pos:end="299:61"><name pos:start="299:17" pos:end="299:38"><name pos:start="299:17" pos:end="299:17">s</name><operator pos:start="299:18" pos:end="299:19">-&gt;</operator><name pos:start="299:20" pos:end="299:24">avctx</name><operator pos:start="299:25" pos:end="299:26">-&gt;</operator><name pos:start="299:27" pos:end="299:38">has_b_frames</name></name><operator pos:start="299:39" pos:end="299:39">=</operator> <name pos:start="299:41" pos:end="299:61">MAX_DELAYED_PIC_COUNT</name></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:32"><expr pos:start="301:17" pos:end="301:31"><name pos:start="301:17" pos:end="301:28"><name pos:start="301:17" pos:end="301:17">s</name><operator pos:start="301:18" pos:end="301:19">-&gt;</operator><name pos:start="301:20" pos:end="301:28">low_delay</name></name><operator pos:start="301:29" pos:end="301:29">=</operator> <literal type="number" pos:start="301:31" pos:end="301:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="307:13" pos:end="307:21"><expr pos:start="307:13" pos:end="307:20"><name pos:start="307:13" pos:end="307:16">pics</name> <operator pos:start="307:18" pos:end="307:18">=</operator> <literal type="number" pos:start="307:20" pos:end="307:20">0</literal></expr>;</expr_stmt>

            <while pos:start="309:13" pos:end="309:47">while<condition pos:start="309:18" pos:end="309:39">(<expr pos:start="309:19" pos:end="309:38"><name pos:start="309:19" pos:end="309:38"><name pos:start="309:19" pos:end="309:19">h</name><operator pos:start="309:20" pos:end="309:21">-&gt;</operator><name pos:start="309:22" pos:end="309:32">delayed_pic</name><index pos:start="309:33" pos:end="309:38">[<expr pos:start="309:34" pos:end="309:37"><name pos:start="309:34" pos:end="309:37">pics</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="309:41" pos:end="309:47"><block_content pos:start="309:41" pos:end="309:47"> <expr_stmt pos:start="309:41" pos:end="309:47"><expr pos:start="309:41" pos:end="309:46"><name pos:start="309:41" pos:end="309:44">pics</name><operator pos:start="309:45" pos:end="309:46">++</operator></expr>;</expr_stmt></block_content></block></while>



            <expr_stmt pos:start="313:13" pos:end="313:50"><expr pos:start="313:13" pos:end="313:49"><call pos:start="313:13" pos:end="313:49"><name pos:start="313:13" pos:end="313:18">assert</name><argument_list pos:start="313:19" pos:end="313:49">(<argument pos:start="313:20" pos:end="313:48"><expr pos:start="313:20" pos:end="313:48"><name pos:start="313:20" pos:end="313:23">pics</name> <operator pos:start="313:25" pos:end="313:26">&lt;=</operator> <name pos:start="313:28" pos:end="313:48">MAX_DELAYED_PIC_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="317:13" pos:end="317:41"><expr pos:start="317:13" pos:end="317:40"><name pos:start="317:13" pos:end="317:34"><name pos:start="317:13" pos:end="317:13">h</name><operator pos:start="317:14" pos:end="317:15">-&gt;</operator><name pos:start="317:16" pos:end="317:26">delayed_pic</name><index pos:start="317:27" pos:end="317:34">[<expr pos:start="317:28" pos:end="317:33"><name pos:start="317:28" pos:end="317:31">pics</name><operator pos:start="317:32" pos:end="317:33">++</operator></expr>]</index></name> <operator pos:start="317:36" pos:end="317:36">=</operator> <name pos:start="317:38" pos:end="317:40">cur</name></expr>;</expr_stmt>

            <if_stmt pos:start="319:13" pos:end="321:49"><if pos:start="319:13" pos:end="321:49">if<condition pos:start="319:15" pos:end="319:35">(<expr pos:start="319:16" pos:end="319:34"><name pos:start="319:16" pos:end="319:29"><name pos:start="319:16" pos:end="319:18">cur</name><operator pos:start="319:19" pos:end="319:20">-&gt;</operator><name pos:start="319:21" pos:end="319:29">reference</name></name> <operator pos:start="319:31" pos:end="319:32">==</operator> <literal type="number" pos:start="319:34" pos:end="319:34">0</literal></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:49"><block_content pos:start="321:17" pos:end="321:49">

                <expr_stmt pos:start="321:17" pos:end="321:49"><expr pos:start="321:17" pos:end="321:48"><name pos:start="321:17" pos:end="321:30"><name pos:start="321:17" pos:end="321:19">cur</name><operator pos:start="321:20" pos:end="321:21">-&gt;</operator><name pos:start="321:22" pos:end="321:30">reference</name></name> <operator pos:start="321:32" pos:end="321:32">=</operator> <name pos:start="321:34" pos:end="321:48">DELAYED_PIC_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="325:13" pos:end="325:36"><expr pos:start="325:13" pos:end="325:35"><name pos:start="325:13" pos:end="325:15">out</name> <operator pos:start="325:17" pos:end="325:17">=</operator> <name pos:start="325:19" pos:end="325:35"><name pos:start="325:19" pos:end="325:19">h</name><operator pos:start="325:20" pos:end="325:21">-&gt;</operator><name pos:start="325:22" pos:end="325:32">delayed_pic</name><index pos:start="325:33" pos:end="325:35">[<expr pos:start="325:34" pos:end="325:34"><literal type="number" pos:start="325:34" pos:end="325:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:24"><expr pos:start="327:13" pos:end="327:23"><name pos:start="327:13" pos:end="327:19">out_idx</name> <operator pos:start="327:21" pos:end="327:21">=</operator> <literal type="number" pos:start="327:23" pos:end="327:23">0</literal></expr>;</expr_stmt>

            <for pos:start="329:13" pos:end="337:17">for<control pos:start="329:16" pos:end="329:70">(<init pos:start="329:17" pos:end="329:20"><expr pos:start="329:17" pos:end="329:19"><name pos:start="329:17" pos:end="329:17">i</name><operator pos:start="329:18" pos:end="329:18">=</operator><literal type="number" pos:start="329:19" pos:end="329:19">1</literal></expr>;</init> <condition pos:start="329:22" pos:end="329:65"><expr pos:start="329:22" pos:end="329:64"><name pos:start="329:22" pos:end="329:38"><name pos:start="329:22" pos:end="329:22">h</name><operator pos:start="329:23" pos:end="329:24">-&gt;</operator><name pos:start="329:25" pos:end="329:35">delayed_pic</name><index pos:start="329:36" pos:end="329:38">[<expr pos:start="329:37" pos:end="329:37"><name pos:start="329:37" pos:end="329:37">i</name></expr>]</index></name> <operator pos:start="329:40" pos:end="329:41">&amp;&amp;</operator> <name pos:start="329:43" pos:end="329:59"><name pos:start="329:43" pos:end="329:43">h</name><operator pos:start="329:44" pos:end="329:45">-&gt;</operator><name pos:start="329:46" pos:end="329:56">delayed_pic</name><index pos:start="329:57" pos:end="329:59">[<expr pos:start="329:58" pos:end="329:58"><name pos:start="329:58" pos:end="329:58">i</name></expr>]</index></name><operator pos:start="329:60" pos:end="329:61">-&gt;</operator><name pos:start="329:62" pos:end="329:64">poc</name></expr>;</condition> <incr pos:start="329:67" pos:end="329:69"><expr pos:start="329:67" pos:end="329:69"><name pos:start="329:67" pos:end="329:67">i</name><operator pos:start="329:68" pos:end="329:69">++</operator></expr></incr>)</control><block type="pseudo" pos:start="331:17" pos:end="337:17"><block_content pos:start="331:17" pos:end="337:17">

                <if_stmt pos:start="331:17" pos:end="337:17"><if pos:start="331:17" pos:end="337:17">if<condition pos:start="331:19" pos:end="331:53">(<expr pos:start="331:20" pos:end="331:52"><name pos:start="331:20" pos:end="331:36"><name pos:start="331:20" pos:end="331:20">h</name><operator pos:start="331:21" pos:end="331:22">-&gt;</operator><name pos:start="331:23" pos:end="331:33">delayed_pic</name><index pos:start="331:34" pos:end="331:36">[<expr pos:start="331:35" pos:end="331:35"><name pos:start="331:35" pos:end="331:35">i</name></expr>]</index></name><operator pos:start="331:37" pos:end="331:38">-&gt;</operator><name pos:start="331:39" pos:end="331:41">poc</name> <operator pos:start="331:43" pos:end="331:43">&lt;</operator> <name pos:start="331:45" pos:end="331:52"><name pos:start="331:45" pos:end="331:47">out</name><operator pos:start="331:48" pos:end="331:49">-&gt;</operator><name pos:start="331:50" pos:end="331:52">poc</name></name></expr>)</condition><block pos:start="331:54" pos:end="337:17">{<block_content pos:start="333:21" pos:end="335:32">

                    <expr_stmt pos:start="333:21" pos:end="333:44"><expr pos:start="333:21" pos:end="333:43"><name pos:start="333:21" pos:end="333:23">out</name> <operator pos:start="333:25" pos:end="333:25">=</operator> <name pos:start="333:27" pos:end="333:43"><name pos:start="333:27" pos:end="333:27">h</name><operator pos:start="333:28" pos:end="333:29">-&gt;</operator><name pos:start="333:30" pos:end="333:40">delayed_pic</name><index pos:start="333:41" pos:end="333:43">[<expr pos:start="333:42" pos:end="333:42"><name pos:start="333:42" pos:end="333:42">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:32"><expr pos:start="335:21" pos:end="335:31"><name pos:start="335:21" pos:end="335:27">out_idx</name> <operator pos:start="335:29" pos:end="335:29">=</operator> <name pos:start="335:31" pos:end="335:31">i</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt></block_content></block></for>

            <expr_stmt pos:start="339:13" pos:end="339:71"><expr pos:start="339:13" pos:end="339:70"><name pos:start="339:13" pos:end="339:21">cross_idr</name> <operator pos:start="339:23" pos:end="339:23">=</operator> <operator pos:start="339:25" pos:end="339:25">!</operator><name pos:start="339:26" pos:end="339:42"><name pos:start="339:26" pos:end="339:26">h</name><operator pos:start="339:27" pos:end="339:28">-&gt;</operator><name pos:start="339:29" pos:end="339:39">delayed_pic</name><index pos:start="339:40" pos:end="339:42">[<expr pos:start="339:41" pos:end="339:41"><literal type="number" pos:start="339:41" pos:end="339:41">0</literal></expr>]</index></name><operator pos:start="339:43" pos:end="339:44">-&gt;</operator><name pos:start="339:45" pos:end="339:47">poc</name> <operator pos:start="339:49" pos:end="339:50">||</operator> <operator pos:start="339:52" pos:end="339:52">!</operator><operator pos:start="339:53" pos:end="339:53">!</operator><name pos:start="339:54" pos:end="339:70"><name pos:start="339:54" pos:end="339:54">h</name><operator pos:start="339:55" pos:end="339:56">-&gt;</operator><name pos:start="339:57" pos:end="339:67">delayed_pic</name><index pos:start="339:68" pos:end="339:70">[<expr pos:start="339:69" pos:end="339:69"><name pos:start="339:69" pos:end="339:69">i</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="343:13" pos:end="343:68"><expr pos:start="343:13" pos:end="343:67"><name pos:start="343:13" pos:end="343:24">out_of_order</name> <operator pos:start="343:26" pos:end="343:26">=</operator> <operator pos:start="343:28" pos:end="343:28">!</operator><name pos:start="343:29" pos:end="343:37">cross_idr</name> <operator pos:start="343:39" pos:end="343:40">&amp;&amp;</operator> <name pos:start="343:42" pos:end="343:49"><name pos:start="343:42" pos:end="343:44">out</name><operator pos:start="343:45" pos:end="343:46">-&gt;</operator><name pos:start="343:47" pos:end="343:49">poc</name></name> <operator pos:start="343:51" pos:end="343:51">&lt;</operator> <name pos:start="343:53" pos:end="343:67"><name pos:start="343:53" pos:end="343:53">h</name><operator pos:start="343:54" pos:end="343:55">-&gt;</operator><name pos:start="343:56" pos:end="343:67">outputed_poc</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="347:13" pos:end="365:13"><if pos:start="347:13" pos:end="349:19">if<condition pos:start="347:15" pos:end="347:104">(<expr pos:start="347:16" pos:end="347:103"><name pos:start="347:16" pos:end="347:48"><name pos:start="347:16" pos:end="347:16">h</name><operator pos:start="347:17" pos:end="347:18">-&gt;</operator><name pos:start="347:19" pos:end="347:21">sps</name><operator pos:start="347:22" pos:end="347:22">.</operator><name pos:start="347:23" pos:end="347:48">bitstream_restriction_flag</name></name> <operator pos:start="347:50" pos:end="347:51">&amp;&amp;</operator> <name pos:start="347:53" pos:end="347:74"><name pos:start="347:53" pos:end="347:53">s</name><operator pos:start="347:54" pos:end="347:55">-&gt;</operator><name pos:start="347:56" pos:end="347:60">avctx</name><operator pos:start="347:61" pos:end="347:62">-&gt;</operator><name pos:start="347:63" pos:end="347:74">has_b_frames</name></name> <operator pos:start="347:76" pos:end="347:77">&gt;=</operator> <name pos:start="347:79" pos:end="347:103"><name pos:start="347:79" pos:end="347:79">h</name><operator pos:start="347:80" pos:end="347:81">-&gt;</operator><name pos:start="347:82" pos:end="347:84">sps</name><operator pos:start="347:85" pos:end="347:85">.</operator><name pos:start="347:86" pos:end="347:103">num_reorder_frames</name></name></expr>)</condition>

                <block pos:start="349:17" pos:end="349:19">{<block_content> </block_content>}</block></if>

            <if type="elseif" pos:start="351:13" pos:end="365:13">else if<condition pos:start="351:20" pos:end="357:50">(<expr pos:start="351:21" pos:end="357:49"><operator pos:start="351:21" pos:end="351:21">(</operator><name pos:start="351:22" pos:end="351:33">out_of_order</name> <operator pos:start="351:35" pos:end="351:36">&amp;&amp;</operator> <name pos:start="351:38" pos:end="351:41">pics</name><operator pos:start="351:42" pos:end="351:42">-</operator><literal type="number" pos:start="351:43" pos:end="351:43">1</literal> <operator pos:start="351:45" pos:end="351:46">==</operator> <name pos:start="351:48" pos:end="351:69"><name pos:start="351:48" pos:end="351:48">s</name><operator pos:start="351:49" pos:end="351:50">-&gt;</operator><name pos:start="351:51" pos:end="351:55">avctx</name><operator pos:start="351:56" pos:end="351:57">-&gt;</operator><name pos:start="351:58" pos:end="351:69">has_b_frames</name></name> <operator pos:start="351:71" pos:end="351:72">&amp;&amp;</operator> <name pos:start="351:74" pos:end="351:95"><name pos:start="351:74" pos:end="351:74">s</name><operator pos:start="351:75" pos:end="351:76">-&gt;</operator><name pos:start="351:77" pos:end="351:81">avctx</name><operator pos:start="351:82" pos:end="351:83">-&gt;</operator><name pos:start="351:84" pos:end="351:95">has_b_frames</name></name> <operator pos:start="351:97" pos:end="351:97">&lt;</operator> <name pos:start="351:99" pos:end="351:119">MAX_DELAYED_PIC_COUNT</name><operator pos:start="351:120" pos:end="351:120">)</operator>

               <operator pos:start="353:16" pos:end="353:17">||</operator> <operator pos:start="353:19" pos:end="353:19">(</operator><name pos:start="353:20" pos:end="353:31"><name pos:start="353:20" pos:end="353:20">s</name><operator pos:start="353:21" pos:end="353:22">-&gt;</operator><name pos:start="353:23" pos:end="353:31">low_delay</name></name> <operator pos:start="353:33" pos:end="353:34">&amp;&amp;</operator>

                <operator pos:start="355:17" pos:end="355:17">(</operator><operator pos:start="355:18" pos:end="355:18">(</operator><operator pos:start="355:19" pos:end="355:19">!</operator><name pos:start="355:20" pos:end="355:28">cross_idr</name> <operator pos:start="355:30" pos:end="355:31">&amp;&amp;</operator> <name pos:start="355:33" pos:end="355:40"><name pos:start="355:33" pos:end="355:35">out</name><operator pos:start="355:36" pos:end="355:37">-&gt;</operator><name pos:start="355:38" pos:end="355:40">poc</name></name> <operator pos:start="355:42" pos:end="355:42">&gt;</operator> <name pos:start="355:44" pos:end="355:58"><name pos:start="355:44" pos:end="355:44">h</name><operator pos:start="355:45" pos:end="355:46">-&gt;</operator><name pos:start="355:47" pos:end="355:58">outputed_poc</name></name> <operator pos:start="355:60" pos:end="355:60">+</operator> <literal type="number" pos:start="355:62" pos:end="355:62">2</literal><operator pos:start="355:63" pos:end="355:63">)</operator>

                 <operator pos:start="357:18" pos:end="357:19">||</operator> <name pos:start="357:21" pos:end="357:34"><name pos:start="357:21" pos:end="357:23">cur</name><operator pos:start="357:24" pos:end="357:25">-&gt;</operator><name pos:start="357:26" pos:end="357:34">pict_type</name></name> <operator pos:start="357:36" pos:end="357:37">==</operator> <name pos:start="357:39" pos:end="357:47">FF_B_TYPE</name><operator pos:start="357:48" pos:end="357:48">)</operator><operator pos:start="357:49" pos:end="357:49">)</operator></expr>)</condition>

            <block pos:start="359:13" pos:end="365:13">{<block_content pos:start="361:17" pos:end="363:41">

                <expr_stmt pos:start="361:17" pos:end="361:33"><expr pos:start="361:17" pos:end="361:32"><name pos:start="361:17" pos:end="361:28"><name pos:start="361:17" pos:end="361:17">s</name><operator pos:start="361:18" pos:end="361:19">-&gt;</operator><name pos:start="361:20" pos:end="361:28">low_delay</name></name> <operator pos:start="361:30" pos:end="361:30">=</operator> <literal type="number" pos:start="361:32" pos:end="361:32">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:41"><expr pos:start="363:17" pos:end="363:40"><name pos:start="363:17" pos:end="363:38"><name pos:start="363:17" pos:end="363:17">s</name><operator pos:start="363:18" pos:end="363:19">-&gt;</operator><name pos:start="363:20" pos:end="363:24">avctx</name><operator pos:start="363:25" pos:end="363:26">-&gt;</operator><name pos:start="363:27" pos:end="363:38">has_b_frames</name></name><operator pos:start="363:39" pos:end="363:40">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="369:13" pos:end="377:13"><if pos:start="369:13" pos:end="377:13">if<condition pos:start="369:15" pos:end="369:61">(<expr pos:start="369:16" pos:end="369:60"><name pos:start="369:16" pos:end="369:27">out_of_order</name> <operator pos:start="369:29" pos:end="369:30">||</operator> <name pos:start="369:32" pos:end="369:35">pics</name> <operator pos:start="369:37" pos:end="369:37">&gt;</operator> <name pos:start="369:39" pos:end="369:60"><name pos:start="369:39" pos:end="369:39">s</name><operator pos:start="369:40" pos:end="369:41">-&gt;</operator><name pos:start="369:42" pos:end="369:46">avctx</name><operator pos:start="369:47" pos:end="369:48">-&gt;</operator><name pos:start="369:49" pos:end="369:60">has_b_frames</name></name></expr>)</condition><block pos:start="369:62" pos:end="377:13">{<block_content pos:start="371:17" pos:end="375:60">

                <expr_stmt pos:start="371:17" pos:end="371:51"><expr pos:start="371:17" pos:end="371:50"><name pos:start="371:17" pos:end="371:30"><name pos:start="371:17" pos:end="371:19">out</name><operator pos:start="371:20" pos:end="371:21">-&gt;</operator><name pos:start="371:22" pos:end="371:30">reference</name></name> <operator pos:start="371:32" pos:end="371:33">&amp;=</operator> <operator pos:start="371:35" pos:end="371:35">~</operator><name pos:start="371:36" pos:end="371:50">DELAYED_PIC_REF</name></expr>;</expr_stmt>

                <for pos:start="373:17" pos:end="375:60">for<control pos:start="373:20" pos:end="373:54">(<init pos:start="373:21" pos:end="373:30"><expr pos:start="373:21" pos:end="373:29"><name pos:start="373:21" pos:end="373:21">i</name><operator pos:start="373:22" pos:end="373:22">=</operator><name pos:start="373:23" pos:end="373:29">out_idx</name></expr>;</init> <condition pos:start="373:32" pos:end="373:49"><expr pos:start="373:32" pos:end="373:48"><name pos:start="373:32" pos:end="373:48"><name pos:start="373:32" pos:end="373:32">h</name><operator pos:start="373:33" pos:end="373:34">-&gt;</operator><name pos:start="373:35" pos:end="373:45">delayed_pic</name><index pos:start="373:46" pos:end="373:48">[<expr pos:start="373:47" pos:end="373:47"><name pos:start="373:47" pos:end="373:47">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="373:51" pos:end="373:53"><expr pos:start="373:51" pos:end="373:53"><name pos:start="373:51" pos:end="373:51">i</name><operator pos:start="373:52" pos:end="373:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="375:21" pos:end="375:60"><block_content pos:start="375:21" pos:end="375:60">

                    <expr_stmt pos:start="375:21" pos:end="375:60"><expr pos:start="375:21" pos:end="375:59"><name pos:start="375:21" pos:end="375:37"><name pos:start="375:21" pos:end="375:21">h</name><operator pos:start="375:22" pos:end="375:23">-&gt;</operator><name pos:start="375:24" pos:end="375:34">delayed_pic</name><index pos:start="375:35" pos:end="375:37">[<expr pos:start="375:36" pos:end="375:36"><name pos:start="375:36" pos:end="375:36">i</name></expr>]</index></name> <operator pos:start="375:39" pos:end="375:39">=</operator> <name pos:start="375:41" pos:end="375:59"><name pos:start="375:41" pos:end="375:41">h</name><operator pos:start="375:42" pos:end="375:43">-&gt;</operator><name pos:start="375:44" pos:end="375:54">delayed_pic</name><index pos:start="375:55" pos:end="375:59">[<expr pos:start="375:56" pos:end="375:58"><name pos:start="375:56" pos:end="375:56">i</name><operator pos:start="375:57" pos:end="375:57">+</operator><literal type="number" pos:start="375:58" pos:end="375:58">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="379:13" pos:end="393:13"><if pos:start="379:13" pos:end="389:13">if<condition pos:start="379:15" pos:end="379:62">(<expr pos:start="379:16" pos:end="379:61"><operator pos:start="379:16" pos:end="379:16">!</operator><name pos:start="379:17" pos:end="379:28">out_of_order</name> <operator pos:start="379:30" pos:end="379:31">&amp;&amp;</operator> <name pos:start="379:33" pos:end="379:36">pics</name> <operator pos:start="379:38" pos:end="379:38">&gt;</operator> <name pos:start="379:40" pos:end="379:61"><name pos:start="379:40" pos:end="379:40">s</name><operator pos:start="379:41" pos:end="379:42">-&gt;</operator><name pos:start="379:43" pos:end="379:47">avctx</name><operator pos:start="379:48" pos:end="379:49">-&gt;</operator><name pos:start="379:50" pos:end="379:61">has_b_frames</name></name></expr>)</condition><block pos:start="379:63" pos:end="389:13">{<block_content pos:start="381:17" pos:end="387:38">

                <expr_stmt pos:start="381:17" pos:end="381:45"><expr pos:start="381:17" pos:end="381:44"><operator pos:start="381:17" pos:end="381:17">*</operator><name pos:start="381:18" pos:end="381:26">data_size</name> <operator pos:start="381:28" pos:end="381:28">=</operator> <sizeof pos:start="381:30" pos:end="381:44">sizeof<argument_list pos:start="381:36" pos:end="381:44">(<argument pos:start="381:37" pos:end="381:43"><expr pos:start="381:37" pos:end="381:43"><name pos:start="381:37" pos:end="381:43">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



                <expr_stmt pos:start="385:17" pos:end="385:43"><expr pos:start="385:17" pos:end="385:42"><name pos:start="385:17" pos:end="385:31"><name pos:start="385:17" pos:end="385:17">h</name><operator pos:start="385:18" pos:end="385:19">-&gt;</operator><name pos:start="385:20" pos:end="385:31">outputed_poc</name></name> <operator pos:start="385:33" pos:end="385:33">=</operator> <name pos:start="385:35" pos:end="385:42"><name pos:start="385:35" pos:end="385:37">out</name><operator pos:start="385:38" pos:end="385:39">-&gt;</operator><name pos:start="385:40" pos:end="385:42">poc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:38"><expr pos:start="387:17" pos:end="387:37"><operator pos:start="387:17" pos:end="387:17">*</operator><name pos:start="387:18" pos:end="387:21">pict</name><operator pos:start="387:22" pos:end="387:22">=</operator> <operator pos:start="387:24" pos:end="387:24">*</operator><operator pos:start="387:25" pos:end="387:25">(</operator><name pos:start="387:26" pos:end="387:32">AVFrame</name><operator pos:start="387:33" pos:end="387:33">*</operator><operator pos:start="387:34" pos:end="387:34">)</operator><name pos:start="387:35" pos:end="387:37">out</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="389:14" pos:end="393:13">else<block pos:start="389:18" pos:end="393:13">{<block_content pos:start="391:17" pos:end="391:60">

                <expr_stmt pos:start="391:17" pos:end="391:60"><expr pos:start="391:17" pos:end="391:59"><call pos:start="391:17" pos:end="391:59"><name pos:start="391:17" pos:end="391:22">av_log</name><argument_list pos:start="391:23" pos:end="391:59">(<argument pos:start="391:24" pos:end="391:28"><expr pos:start="391:24" pos:end="391:28"><name pos:start="391:24" pos:end="391:28">avctx</name></expr></argument>, <argument pos:start="391:31" pos:end="391:42"><expr pos:start="391:31" pos:end="391:42"><name pos:start="391:31" pos:end="391:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="391:45" pos:end="391:58"><expr pos:start="391:45" pos:end="391:58"><literal type="string" pos:start="391:45" pos:end="391:58">"no picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="401:5" pos:end="401:41"><expr pos:start="401:5" pos:end="401:40"><call pos:start="401:5" pos:end="401:40"><name pos:start="401:5" pos:end="401:10">assert</name><argument_list pos:start="401:11" pos:end="401:40">(<argument pos:start="401:12" pos:end="401:39"><expr pos:start="401:12" pos:end="401:39"><name pos:start="401:12" pos:end="401:24"><name pos:start="401:12" pos:end="401:15">pict</name><operator pos:start="401:16" pos:end="401:17">-&gt;</operator><name pos:start="401:18" pos:end="401:21">data</name><index pos:start="401:22" pos:end="401:24">[<expr pos:start="401:23" pos:end="401:23"><literal type="number" pos:start="401:23" pos:end="401:23">0</literal></expr>]</index></name> <operator pos:start="401:26" pos:end="401:27">||</operator> <operator pos:start="401:29" pos:end="401:29">!</operator><operator pos:start="401:30" pos:end="401:30">*</operator><name pos:start="401:31" pos:end="401:39">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="418:0"><expr pos:start="403:5" pos:end="403:32"><call pos:start="403:5" pos:end="403:32"><name pos:start="403:5" pos:end="403:23">ff_print_debug_info</name><argument_list pos:start="403:24" pos:end="403:32">(<argument pos:start="403:25" pos:end="403:25"><expr pos:start="403:25" pos:end="403:25"><name pos:start="403:25" pos:end="403:25">s</name></expr></argument>, <argument pos:start="403:28" pos:end="403:31"><expr pos:start="403:28" pos:end="403:31"><name pos:start="403:28" pos:end="403:31">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="405:1" pos:end="405:41">//printf("out %d\n", (int)pict-&gt;data[0]);</comment>

<cpp:if pos:start="407:1" pos:end="407:5">#<cpp:directive pos:start="407:2" pos:end="407:3">if</cpp:directive> <expr pos:start="407:5" pos:end="407:5"><literal type="number" pos:start="407:5" pos:end="407:5">0</literal></expr></cpp:if> <comment type="line" pos:start="407:7" pos:end="407:9">//?</comment>



    <comment type="block" pos:start="411:5" pos:end="411:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="413:5" pos:end="413:58">/* we subtract 1 because it is added on utils.c     */</comment>

    avctx-&gt;frame_number = s-&gt;picture_number - 1;

<cpp:endif pos:start="417:1" pos:end="417:6">#<cpp:directive pos:start="417:2" pos:end="417:6">endif</cpp:directive></cpp:endif>

    <return pos:start="419:5" pos:end="419:54">return <expr pos:start="419:12" pos:end="419:53"><call pos:start="419:12" pos:end="419:53"><name pos:start="419:12" pos:end="419:29">get_consumed_bytes</name><argument_list pos:start="419:30" pos:end="419:53">(<argument pos:start="419:31" pos:end="419:31"><expr pos:start="419:31" pos:end="419:31"><name pos:start="419:31" pos:end="419:31">s</name></expr></argument>, <argument pos:start="419:34" pos:end="419:42"><expr pos:start="419:34" pos:end="419:42"><name pos:start="419:34" pos:end="419:42">buf_index</name></expr></argument>, <argument pos:start="419:45" pos:end="419:52"><expr pos:start="419:45" pos:end="419:52"><name pos:start="419:45" pos:end="419:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
