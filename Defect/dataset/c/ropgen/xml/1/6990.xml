<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6990.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:33">monitor_read_block_device_key</name><parameter_list pos:start="1:34" pos:end="5:47">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:41">Monitor</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">mon</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">device</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:68"><decl pos:start="3:35" pos:end="3:68"><type pos:start="3:35" pos:end="3:68"><name pos:start="3:35" pos:end="3:53">BlockCompletionFunc</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:68">completion_cb</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:46"><decl pos:start="5:35" pos:end="5:46"><type pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:38">void</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:46">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="55:1">{<block_content pos:start="9:5" pos:end="53:13">

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">BlockBackend</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">blk</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:7">blk</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:29"><name pos:start="15:11" pos:end="15:21">blk_by_name</name><argument_list pos:start="15:22" pos:end="15:29">(<argument pos:start="15:23" pos:end="15:28"><expr pos:start="15:23" pos:end="15:28"><name pos:start="15:23" pos:end="15:28">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">blk</name></expr>)</condition> <block pos:start="17:15" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:61"><expr pos:start="19:9" pos:end="19:60"><call pos:start="19:9" pos:end="19:60"><name pos:start="19:9" pos:end="19:22">monitor_printf</name><argument_list pos:start="19:23" pos:end="19:60">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">mon</name></expr></argument>, <argument pos:start="19:29" pos:end="19:51"><expr pos:start="19:29" pos:end="19:51"><literal type="string" pos:start="19:29" pos:end="19:51">"Device not found %s\n"</literal></expr></argument>, <argument pos:start="19:54" pos:end="19:59"><expr pos:start="19:54" pos:end="19:59"><name pos:start="19:54" pos:end="19:59">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:21">(<expr pos:start="25:9" pos:end="25:20"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:20"><name pos:start="25:10" pos:end="25:15">blk_bs</name><argument_list pos:start="25:16" pos:end="25:20">(<argument pos:start="25:17" pos:end="25:19"><expr pos:start="25:17" pos:end="25:19"><name pos:start="25:17" pos:end="25:19">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:23" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:67"><expr pos:start="27:9" pos:end="27:66"><call pos:start="27:9" pos:end="27:66"><name pos:start="27:9" pos:end="27:22">monitor_printf</name><argument_list pos:start="27:23" pos:end="27:66">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">mon</name></expr></argument>, <argument pos:start="27:29" pos:end="27:57"><expr pos:start="27:29" pos:end="27:57"><literal type="string" pos:start="27:29" pos:end="27:57">"Device '%s' has no medium\n"</literal></expr></argument>, <argument pos:start="27:60" pos:end="27:65"><expr pos:start="27:60" pos:end="27:65"><name pos:start="27:60" pos:end="27:65">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><call pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:16">bdrv_add_key</name><argument_list pos:start="35:17" pos:end="35:41">(<argument pos:start="35:18" pos:end="35:28"><expr pos:start="35:18" pos:end="35:28"><call pos:start="35:18" pos:end="35:28"><name pos:start="35:18" pos:end="35:23">blk_bs</name><argument_list pos:start="35:24" pos:end="35:28">(<argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><name pos:start="35:31" pos:end="35:34">NULL</name></expr></argument>, <argument pos:start="35:37" pos:end="35:40"><expr pos:start="35:37" pos:end="35:40"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:12">(<expr pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">err</name></expr>)</condition> <block pos:start="37:14" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:84">

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><call pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:18">error_free</name><argument_list pos:start="39:19" pos:end="39:23">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:84">return <expr pos:start="41:16" pos:end="41:83"><call pos:start="41:16" pos:end="41:83"><name pos:start="41:16" pos:end="41:42">monitor_read_bdrv_key_start</name><argument_list pos:start="41:43" pos:end="41:83">(<argument pos:start="41:44" pos:end="41:46"><expr pos:start="41:44" pos:end="41:46"><name pos:start="41:44" pos:end="41:46">mon</name></expr></argument>, <argument pos:start="41:49" pos:end="41:59"><expr pos:start="41:49" pos:end="41:59"><call pos:start="41:49" pos:end="41:59"><name pos:start="41:49" pos:end="41:54">blk_bs</name><argument_list pos:start="41:55" pos:end="41:59">(<argument pos:start="41:56" pos:end="41:58"><expr pos:start="41:56" pos:end="41:58"><name pos:start="41:56" pos:end="41:58">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:62" pos:end="41:74"><expr pos:start="41:62" pos:end="41:74"><name pos:start="41:62" pos:end="41:74">completion_cb</name></expr></argument>, <argument pos:start="41:77" pos:end="41:82"><expr pos:start="41:77" pos:end="41:82"><name pos:start="41:77" pos:end="41:82">opaque</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:22">(<expr pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:21">completion_cb</name></expr>)</condition> <block pos:start="47:24" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:33">

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><call pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:21">completion_cb</name><argument_list pos:start="49:22" pos:end="49:32">(<argument pos:start="49:23" pos:end="49:28"><expr pos:start="49:23" pos:end="49:28"><name pos:start="49:23" pos:end="49:28">opaque</name></expr></argument>, <argument pos:start="49:31" pos:end="49:31"><expr pos:start="49:31" pos:end="49:31"><literal type="number" pos:start="49:31" pos:end="49:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
