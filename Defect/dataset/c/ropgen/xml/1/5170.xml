<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5170.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:20">GuestMemoryBlockList</name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:49">qmp_guest_get_memory_blocks</name><parameter_list pos:start="1:50" pos:end="1:63">(<parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:58"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:16">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24">GuestMemoryBlockList</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:30">head</name></decl>, <decl pos:start="5:33" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:26"><modifier pos:start="5:33" pos:end="5:33">*</modifier><modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:38">link</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">dirent</name></name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">de</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">DIR</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:11">dp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:8">head</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:8">link</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <operator pos:start="17:12" pos:end="17:12">&amp;</operator><name pos:start="17:13" pos:end="17:16">head</name></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:48"><expr pos:start="21:5" pos:end="21:47"><name pos:start="21:5" pos:end="21:6">dp</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <call pos:start="21:10" pos:end="21:47"><name pos:start="21:10" pos:end="21:16">opendir</name><argument_list pos:start="21:17" pos:end="21:47">(<argument pos:start="21:18" pos:end="21:46"><expr pos:start="21:18" pos:end="21:46"><literal type="string" pos:start="21:18" pos:end="21:46">"/sys/devices/system/memory/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:12">(<expr pos:start="23:9" pos:end="23:11"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:11">dp</name></expr>)</condition> <block pos:start="23:14" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:20">

        <expr_stmt pos:start="25:9" pos:end="27:62"><expr pos:start="25:9" pos:end="27:61"><call pos:start="25:9" pos:end="27:61"><name pos:start="25:9" pos:end="25:24">error_setg_errno</name><argument_list pos:start="25:25" pos:end="27:61">(<argument pos:start="25:26" pos:end="25:29"><expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">errp</name></expr></argument>, <argument pos:start="25:32" pos:end="25:36"><expr pos:start="25:32" pos:end="25:36"><name pos:start="25:32" pos:end="25:36">errno</name></expr></argument>, <argument pos:start="25:39" pos:end="27:60"><expr pos:start="25:39" pos:end="27:60"><literal type="string" pos:start="25:39" pos:end="25:60">"Can't open directory"</literal>

                         <literal type="string" pos:start="27:26" pos:end="27:60">"\"/sys/devices/system/memory/\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:20">return <expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="43:7">/* Note: the phys_index of memory block may be discontinuous,

     * this is because a memblk is the unit of the Sparse Memory design, which

     * allows discontinuous memory ranges (ex. NUMA), so here we should

     * traverse the memory block directory.

     */</comment>

    <while pos:start="45:5" pos:end="85:5">while <condition pos:start="45:11" pos:end="45:38">(<expr pos:start="45:12" pos:end="45:37"><operator pos:start="45:12" pos:end="45:12">(</operator><name pos:start="45:13" pos:end="45:14">de</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:28"><name pos:start="45:18" pos:end="45:24">readdir</name><argument_list pos:start="45:25" pos:end="45:28">(<argument pos:start="45:26" pos:end="45:27"><expr pos:start="45:26" pos:end="45:27"><name pos:start="45:26" pos:end="45:27">dp</name></expr></argument>)</argument_list></call><operator pos:start="45:29" pos:end="45:29">)</operator> <operator pos:start="45:31" pos:end="45:32">!=</operator> <name pos:start="45:34" pos:end="45:37">NULL</name></expr>)</condition> <block pos:start="45:40" pos:end="85:5">{<block_content pos:start="47:9" pos:end="83:28">

        <decl_stmt pos:start="47:9" pos:end="47:34"><decl pos:start="47:9" pos:end="47:33"><type pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:24">GuestMemoryBlock</name> <modifier pos:start="47:26" pos:end="47:26">*</modifier></type><name pos:start="47:27" pos:end="47:33">mem_blk</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:36"><decl pos:start="49:9" pos:end="49:35"><type pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:28">GuestMemoryBlockList</name> <modifier pos:start="49:30" pos:end="49:30">*</modifier></type><name pos:start="49:31" pos:end="49:35">entry</name></decl>;</decl_stmt>



        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="55:35">(<expr pos:start="53:13" pos:end="55:34"><operator pos:start="53:13" pos:end="53:13">(</operator><call pos:start="53:14" pos:end="53:45"><name pos:start="53:14" pos:end="53:20">strncmp</name><argument_list pos:start="53:21" pos:end="53:45">(<argument pos:start="53:22" pos:end="53:31"><expr pos:start="53:22" pos:end="53:31"><name pos:start="53:22" pos:end="53:31"><name pos:start="53:22" pos:end="53:23">de</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:31">d_name</name></name></expr></argument>, <argument pos:start="53:34" pos:end="53:41"><expr pos:start="53:34" pos:end="53:41"><literal type="string" pos:start="53:34" pos:end="53:41">"memory"</literal></expr></argument>, <argument pos:start="53:44" pos:end="53:44"><expr pos:start="53:44" pos:end="53:44"><literal type="number" pos:start="53:44" pos:end="53:44">6</literal></expr></argument>)</argument_list></call> <operator pos:start="53:47" pos:end="53:48">!=</operator> <literal type="number" pos:start="53:50" pos:end="53:50">0</literal><operator pos:start="53:51" pos:end="53:51">)</operator> <operator pos:start="53:53" pos:end="53:54">||</operator>

            <operator pos:start="55:13" pos:end="55:13">!</operator><operator pos:start="55:14" pos:end="55:14">(</operator><name pos:start="55:15" pos:end="55:24"><name pos:start="55:15" pos:end="55:16">de</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:24">d_type</name></name> <operator pos:start="55:26" pos:end="55:26">&amp;</operator> <name pos:start="55:28" pos:end="55:33">DT_DIR</name><operator pos:start="55:34" pos:end="55:34">)</operator></expr>)</condition> <block pos:start="55:37" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:21">

            <continue pos:start="57:13" pos:end="57:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:45"><expr pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:15">mem_blk</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:44"><name pos:start="63:19" pos:end="63:27">g_malloc0</name><argument_list pos:start="63:28" pos:end="63:44">(<argument pos:start="63:29" pos:end="63:43"><expr pos:start="63:29" pos:end="63:43"><sizeof pos:start="63:29" pos:end="63:34">sizeof <name/></sizeof>*<name pos:start="63:37" pos:end="63:43">mem_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:77">/* The d_name is "memoryXXX",  phys_index is block id, same as XXX */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:64"><expr pos:start="67:9" pos:end="67:63"><name pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:15">mem_blk</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:27">phys_index</name></name> <operator pos:start="67:29" pos:end="67:29">=</operator> <call pos:start="67:31" pos:end="67:63"><name pos:start="67:31" pos:end="67:37">strtoul</name><argument_list pos:start="67:38" pos:end="67:63">(<argument pos:start="67:39" pos:end="67:52"><expr pos:start="67:39" pos:end="67:52"><operator pos:start="67:39" pos:end="67:39">&amp;</operator><name pos:start="67:40" pos:end="67:52"><name pos:start="67:40" pos:end="67:41">de</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:49">d_name</name><index pos:start="67:50" pos:end="67:52">[<expr pos:start="67:51" pos:end="67:51"><literal type="number" pos:start="67:51" pos:end="67:51">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="67:55" pos:end="67:58"><expr pos:start="67:55" pos:end="67:58"><name pos:start="67:55" pos:end="67:58">NULL</name></expr></argument>, <argument pos:start="67:61" pos:end="67:62"><expr pos:start="67:61" pos:end="67:62"><literal type="number" pos:start="67:61" pos:end="67:62">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:15">mem_blk</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:32">has_can_offline</name></name> <operator pos:start="69:34" pos:end="69:34">=</operator> <name pos:start="69:36" pos:end="69:39">true</name></expr>;</expr_stmt> <comment type="block" pos:start="69:42" pos:end="69:59">/* lolspeak ftw */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:63"><expr pos:start="71:9" pos:end="71:62"><call pos:start="71:9" pos:end="71:62"><name pos:start="71:9" pos:end="71:29">transfer_memory_block</name><argument_list pos:start="71:30" pos:end="71:62">(<argument pos:start="71:31" pos:end="71:37"><expr pos:start="71:31" pos:end="71:37"><name pos:start="71:31" pos:end="71:37">mem_blk</name></expr></argument>, <argument pos:start="71:40" pos:end="71:43"><expr pos:start="71:40" pos:end="71:43"><name pos:start="71:40" pos:end="71:43">true</name></expr></argument>, <argument pos:start="71:46" pos:end="71:49"><expr pos:start="71:46" pos:end="71:49"><name pos:start="71:46" pos:end="71:49">NULL</name></expr></argument>, <argument pos:start="71:52" pos:end="71:61"><expr pos:start="71:52" pos:end="71:61"><operator pos:start="71:52" pos:end="71:52">&amp;</operator><name pos:start="71:53" pos:end="71:61">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:13">entry</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <call pos:start="75:17" pos:end="75:40"><name pos:start="75:17" pos:end="75:25">g_malloc0</name><argument_list pos:start="75:26" pos:end="75:40">(<argument pos:start="75:27" pos:end="75:39"><expr pos:start="75:27" pos:end="75:39"><sizeof pos:start="75:27" pos:end="75:32">sizeof <name/></sizeof>*<name pos:start="75:35" pos:end="75:39">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:13">entry</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:20">value</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:30">mem_blk</name></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><operator pos:start="81:9" pos:end="81:9">*</operator><name pos:start="81:10" pos:end="81:13">link</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:21">entry</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:28"><expr pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:12">link</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <operator pos:start="83:16" pos:end="83:16">&amp;</operator><name pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:21">entry</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:27">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="89:5" pos:end="89:17"><expr pos:start="89:5" pos:end="89:16"><call pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:12">closedir</name><argument_list pos:start="89:13" pos:end="89:16">(<argument pos:start="89:14" pos:end="89:15"><expr pos:start="89:14" pos:end="89:15"><name pos:start="89:14" pos:end="89:15">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="103:5">if <condition pos:start="91:8" pos:end="91:26">(<expr pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:17">local_err</name> <operator pos:start="91:19" pos:end="91:20">==</operator> <name pos:start="91:22" pos:end="91:25">NULL</name></expr>)</condition> <block pos:start="91:28" pos:end="103:5">{<block_content pos:start="95:9" pos:end="101:20">

        <comment type="block" pos:start="93:9" pos:end="93:54">/* there's no guest with zero memory blocks */</comment>

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:25">(<expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:16">head</name> <operator pos:start="95:18" pos:end="95:19">==</operator> <name pos:start="95:21" pos:end="95:24">NULL</name></expr>)</condition> <block pos:start="95:27" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:67">

            <expr_stmt pos:start="97:13" pos:end="97:67"><expr pos:start="97:13" pos:end="97:66"><call pos:start="97:13" pos:end="97:66"><name pos:start="97:13" pos:end="97:22">error_setg</name><argument_list pos:start="97:23" pos:end="97:66">(<argument pos:start="97:24" pos:end="97:27"><expr pos:start="97:24" pos:end="97:27"><name pos:start="97:24" pos:end="97:27">errp</name></expr></argument>, <argument pos:start="97:30" pos:end="97:65"><expr pos:start="97:30" pos:end="97:65"><literal type="string" pos:start="97:30" pos:end="97:65">"guest reported zero memory blocks!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="101:9" pos:end="101:20">return <expr pos:start="101:16" pos:end="101:19"><name pos:start="101:16" pos:end="101:19">head</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:41"><expr pos:start="107:5" pos:end="107:40"><call pos:start="107:5" pos:end="107:40"><name pos:start="107:5" pos:end="107:34">qapi_free_GuestMemoryBlockList</name><argument_list pos:start="107:35" pos:end="107:40">(<argument pos:start="107:36" pos:end="107:39"><expr pos:start="107:36" pos:end="107:39"><name pos:start="107:36" pos:end="107:39">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:37"><expr pos:start="109:5" pos:end="109:36"><call pos:start="109:5" pos:end="109:36"><name pos:start="109:5" pos:end="109:19">error_propagate</name><argument_list pos:start="109:20" pos:end="109:36">(<argument pos:start="109:21" pos:end="109:24"><expr pos:start="109:21" pos:end="109:24"><name pos:start="109:21" pos:end="109:24">errp</name></expr></argument>, <argument pos:start="109:27" pos:end="109:35"><expr pos:start="109:27" pos:end="109:35"><name pos:start="109:27" pos:end="109:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="111:5" pos:end="111:16">return <expr pos:start="111:12" pos:end="111:15"><name pos:start="111:12" pos:end="111:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
