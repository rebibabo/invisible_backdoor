<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15259.c" pos:tabs="8"><function pos:start="1:1" pos:end="333:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcx_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">got_frame</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="333:1">{<block_content pos:start="7:5" pos:end="331:15">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier><specifier pos:start="11:14" pos:end="11:18">const</specifier></type> <name pos:start="11:20" pos:end="11:20">p</name>   <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">compressed</name></decl>, <decl pos:start="13:21" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:24">xmin</name></decl>, <decl pos:start="13:27" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:27" pos:end="13:30">ymin</name></decl>, <decl pos:start="13:33" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:33" pos:end="13:36">xmax</name></decl>, <decl pos:start="13:39" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:39" pos:end="13:42">ymax</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="17:36"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:18">w</name></decl>, <decl pos:start="15:21" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:21" pos:end="15:21">h</name></decl>, <decl pos:start="15:24" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:24" pos:end="15:37">bits_per_pixel</name></decl>, <decl pos:start="15:40" pos:end="15:53"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:40" pos:end="15:53">bytes_per_line</name></decl>, <decl pos:start="15:56" pos:end="15:62"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:56" pos:end="15:62">nplanes</name></decl>, <decl pos:start="15:65" pos:end="15:70"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:65" pos:end="15:70">stride</name></decl>, <decl pos:start="15:73" pos:end="15:73"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:73" pos:end="15:73">y</name></decl>, <decl pos:start="15:76" pos:end="15:76"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:76" pos:end="15:76">x</name></decl>,

                 <decl pos:start="17:18" pos:end="17:35"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="17:18" pos:end="17:35">bytes_per_scanline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:44"><decl pos:start="21:5" pos:end="21:43"><type pos:start="21:5" pos:end="21:19"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:17">uint8_t</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:26">buf_end</name> <init pos:start="21:28" pos:end="21:43">= <expr pos:start="21:30" pos:end="21:43"><name pos:start="21:30" pos:end="21:32">buf</name> <operator pos:start="21:34" pos:end="21:34">+</operator> <name pos:start="21:36" pos:end="21:43">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:33"><type pos:start="23:5" pos:end="23:19"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:17">uint8_t</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:27">bufstart</name> <init pos:start="23:29" pos:end="23:33">= <expr pos:start="23:31" pos:end="23:33"><name pos:start="23:31" pos:end="23:33">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:21">scanline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">ret</name> <init pos:start="27:13" pos:end="27:16">= <expr pos:start="27:15" pos:end="27:16"><operator pos:start="27:15" pos:end="27:15">-</operator><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:37">(<expr pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:11">buf</name><index pos:start="31:12" pos:end="31:14">[<expr pos:start="31:13" pos:end="31:13"><literal type="number" pos:start="31:13" pos:end="31:13">0</literal></expr>]</index></name> <operator pos:start="31:16" pos:end="31:17">!=</operator> <literal type="number" pos:start="31:19" pos:end="31:22">0x0a</literal> <operator pos:start="31:24" pos:end="31:25">||</operator> <name pos:start="31:27" pos:end="31:32"><name pos:start="31:27" pos:end="31:29">buf</name><index pos:start="31:30" pos:end="31:32">[<expr pos:start="31:31" pos:end="31:31"><literal type="number" pos:start="31:31" pos:end="31:31">1</literal></expr>]</index></name> <operator pos:start="31:34" pos:end="31:34">&gt;</operator> <literal type="number" pos:start="31:36" pos:end="31:36">5</literal></expr>)</condition> <block pos:start="31:39" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:35">

        <expr_stmt pos:start="33:9" pos:end="33:70"><expr pos:start="33:9" pos:end="33:69"><call pos:start="33:9" pos:end="33:69"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:69">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:37" pos:end="33:68"><expr pos:start="33:37" pos:end="33:68"><literal type="string" pos:start="33:37" pos:end="33:68">"this is not PCX encoded data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:14">compressed</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:23"><name pos:start="41:18" pos:end="41:20">buf</name><index pos:start="41:21" pos:end="41:23">[<expr pos:start="41:22" pos:end="41:22"><literal type="number" pos:start="41:22" pos:end="41:22">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:8">xmin</name>       <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:33"><name pos:start="43:18" pos:end="43:24">AV_RL16</name><argument_list pos:start="43:25" pos:end="43:33">(<argument pos:start="43:26" pos:end="43:32"><expr pos:start="43:26" pos:end="43:32"><name pos:start="43:26" pos:end="43:28">buf</name> <operator pos:start="43:30" pos:end="43:30">+</operator> <literal type="number" pos:start="43:32" pos:end="43:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:34"><expr pos:start="45:5" pos:end="45:33"><name pos:start="45:5" pos:end="45:8">ymin</name>       <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:33"><name pos:start="45:18" pos:end="45:24">AV_RL16</name><argument_list pos:start="45:25" pos:end="45:33">(<argument pos:start="45:26" pos:end="45:32"><expr pos:start="45:26" pos:end="45:32"><name pos:start="45:26" pos:end="45:28">buf</name> <operator pos:start="45:30" pos:end="45:30">+</operator> <literal type="number" pos:start="45:32" pos:end="45:32">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:34"><expr pos:start="47:5" pos:end="47:33"><name pos:start="47:5" pos:end="47:8">xmax</name>       <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:33"><name pos:start="47:18" pos:end="47:24">AV_RL16</name><argument_list pos:start="47:25" pos:end="47:33">(<argument pos:start="47:26" pos:end="47:32"><expr pos:start="47:26" pos:end="47:32"><name pos:start="47:26" pos:end="47:28">buf</name> <operator pos:start="47:30" pos:end="47:30">+</operator> <literal type="number" pos:start="47:32" pos:end="47:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:35"><expr pos:start="49:5" pos:end="49:34"><name pos:start="49:5" pos:end="49:8">ymax</name>       <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:34"><name pos:start="49:18" pos:end="49:24">AV_RL16</name><argument_list pos:start="49:25" pos:end="49:34">(<argument pos:start="49:26" pos:end="49:33"><expr pos:start="49:26" pos:end="49:33"><name pos:start="49:26" pos:end="49:28">buf</name> <operator pos:start="49:30" pos:end="49:30">+</operator> <literal type="number" pos:start="49:32" pos:end="49:33">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:35">(<expr pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:12">xmax</name> <operator pos:start="53:14" pos:end="53:14">&lt;</operator> <name pos:start="53:16" pos:end="53:19">xmin</name> <operator pos:start="53:21" pos:end="53:22">||</operator> <name pos:start="53:24" pos:end="53:27">ymax</name> <operator pos:start="53:29" pos:end="53:29">&lt;</operator> <name pos:start="53:31" pos:end="53:34">ymin</name></expr>)</condition> <block pos:start="53:37" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:35">

        <expr_stmt pos:start="55:9" pos:end="55:66"><expr pos:start="55:9" pos:end="55:65"><call pos:start="55:9" pos:end="55:65"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:65">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:64"><expr pos:start="55:37" pos:end="55:64"><literal type="string" pos:start="55:37" pos:end="55:64">"invalid image dimensions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:35">return <expr pos:start="57:16" pos:end="57:34"><name pos:start="57:16" pos:end="57:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:5">w</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <name pos:start="63:9" pos:end="63:12">xmax</name> <operator pos:start="63:14" pos:end="63:14">-</operator> <name pos:start="63:16" pos:end="63:19">xmin</name> <operator pos:start="63:21" pos:end="63:21">+</operator> <literal type="number" pos:start="63:23" pos:end="63:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:5">h</name> <operator pos:start="65:7" pos:end="65:7">=</operator> <name pos:start="65:9" pos:end="65:12">ymax</name> <operator pos:start="65:14" pos:end="65:14">-</operator> <name pos:start="65:16" pos:end="65:19">ymin</name> <operator pos:start="65:21" pos:end="65:21">+</operator> <literal type="number" pos:start="65:23" pos:end="65:23">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:32"><expr pos:start="69:5" pos:end="69:31"><name pos:start="69:5" pos:end="69:18">bits_per_pixel</name>     <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:31"><name pos:start="69:26" pos:end="69:28">buf</name><index pos:start="69:29" pos:end="69:31">[<expr pos:start="69:30" pos:end="69:30"><literal type="number" pos:start="69:30" pos:end="69:30">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:43"><expr pos:start="71:5" pos:end="71:42"><name pos:start="71:5" pos:end="71:18">bytes_per_line</name>     <operator pos:start="71:24" pos:end="71:24">=</operator> <call pos:start="71:26" pos:end="71:42"><name pos:start="71:26" pos:end="71:32">AV_RL16</name><argument_list pos:start="71:33" pos:end="71:42">(<argument pos:start="71:34" pos:end="71:41"><expr pos:start="71:34" pos:end="71:41"><name pos:start="71:34" pos:end="71:36">buf</name> <operator pos:start="71:38" pos:end="71:38">+</operator> <literal type="number" pos:start="71:40" pos:end="71:41">66</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:11">nplanes</name>            <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:32"><name pos:start="73:26" pos:end="73:28">buf</name><index pos:start="73:29" pos:end="73:32">[<expr pos:start="73:30" pos:end="73:31"><literal type="number" pos:start="73:30" pos:end="73:31">65</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:50"><expr pos:start="75:5" pos:end="75:49"><name pos:start="75:5" pos:end="75:22">bytes_per_scanline</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:32">nplanes</name> <operator pos:start="75:34" pos:end="75:34">*</operator> <name pos:start="75:36" pos:end="75:49">bytes_per_line</name></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="81:59">(<expr pos:start="79:9" pos:end="81:58"><name pos:start="79:9" pos:end="79:26">bytes_per_scanline</name> <operator pos:start="79:28" pos:end="79:28">&lt;</operator> <operator pos:start="79:30" pos:end="79:30">(</operator><name pos:start="79:31" pos:end="79:31">w</name> <operator pos:start="79:33" pos:end="79:33">*</operator> <name pos:start="79:35" pos:end="79:48">bits_per_pixel</name> <operator pos:start="79:50" pos:end="79:50">*</operator> <name pos:start="79:52" pos:end="79:58">nplanes</name> <operator pos:start="79:60" pos:end="79:60">+</operator> <literal type="number" pos:start="79:62" pos:end="79:62">7</literal><operator pos:start="79:63" pos:end="79:63">)</operator> <operator pos:start="79:65" pos:end="79:65">/</operator> <literal type="number" pos:start="79:67" pos:end="79:67">8</literal> <operator pos:start="79:69" pos:end="79:70">||</operator>

        <operator pos:start="81:9" pos:end="81:9">(</operator><operator pos:start="81:10" pos:end="81:10">!</operator><name pos:start="81:11" pos:end="81:20">compressed</name> <operator pos:start="81:22" pos:end="81:23">&amp;&amp;</operator> <name pos:start="81:25" pos:end="81:42">bytes_per_scanline</name> <operator pos:start="81:44" pos:end="81:44">&gt;</operator> <name pos:start="81:46" pos:end="81:53">buf_size</name> <operator pos:start="81:55" pos:end="81:55">/</operator> <name pos:start="81:57" pos:end="81:57">h</name><operator pos:start="81:58" pos:end="81:58">)</operator></expr>)</condition> <block pos:start="81:61" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:35">

        <expr_stmt pos:start="83:9" pos:end="83:63"><expr pos:start="83:9" pos:end="83:62"><call pos:start="83:9" pos:end="83:62"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:62">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:61"><expr pos:start="83:37" pos:end="83:61"><literal type="string" pos:start="83:37" pos:end="83:61">"PCX data is corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:35">return <expr pos:start="85:16" pos:end="85:34"><name pos:start="85:16" pos:end="85:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="91:5" pos:end="123:5">switch <condition pos:start="91:12" pos:end="91:44">(<expr pos:start="91:13" pos:end="91:43"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:20">nplanes</name> <operator pos:start="91:22" pos:end="91:23">&lt;&lt;</operator> <literal type="number" pos:start="91:25" pos:end="91:25">8</literal><operator pos:start="91:26" pos:end="91:26">)</operator> <operator pos:start="91:28" pos:end="91:28">+</operator> <name pos:start="91:30" pos:end="91:43">bits_per_pixel</name></expr>)</condition> <block pos:start="91:46" pos:end="123:5">{<block_content pos:start="93:5" pos:end="121:35">

    <case pos:start="93:5" pos:end="93:16">case <expr pos:start="93:10" pos:end="93:15"><literal type="number" pos:start="93:10" pos:end="93:15">0x0308</literal></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:42"><expr pos:start="95:9" pos:end="95:41"><name pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:13">avctx</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:22">pix_fmt</name></name> <operator pos:start="95:24" pos:end="95:24">=</operator> <name pos:start="95:26" pos:end="95:41">AV_PIX_FMT_RGB24</name></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <case pos:start="99:5" pos:end="99:16">case <expr pos:start="99:10" pos:end="99:15"><literal type="number" pos:start="99:10" pos:end="99:15">0x0108</literal></expr>:</case>

    <case pos:start="101:5" pos:end="101:16">case <expr pos:start="101:10" pos:end="101:15"><literal type="number" pos:start="101:10" pos:end="101:15">0x0104</literal></expr>:</case>

    <case pos:start="103:5" pos:end="103:16">case <expr pos:start="103:10" pos:end="103:15"><literal type="number" pos:start="103:10" pos:end="103:15">0x0102</literal></expr>:</case>

    <case pos:start="105:5" pos:end="105:16">case <expr pos:start="105:10" pos:end="105:15"><literal type="number" pos:start="105:10" pos:end="105:15">0x0101</literal></expr>:</case>

    <case pos:start="107:5" pos:end="107:16">case <expr pos:start="107:10" pos:end="107:15"><literal type="number" pos:start="107:10" pos:end="107:15">0x0401</literal></expr>:</case>

    <case pos:start="109:5" pos:end="109:16">case <expr pos:start="109:10" pos:end="109:15"><literal type="number" pos:start="109:10" pos:end="109:15">0x0301</literal></expr>:</case>

    <case pos:start="111:5" pos:end="111:16">case <expr pos:start="111:10" pos:end="111:15"><literal type="number" pos:start="111:10" pos:end="111:15">0x0201</literal></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:41"><expr pos:start="113:9" pos:end="113:40"><name pos:start="113:9" pos:end="113:22"><name pos:start="113:9" pos:end="113:13">avctx</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:22">pix_fmt</name></name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:40">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <default pos:start="117:5" pos:end="117:12">default:</default>

        <expr_stmt pos:start="119:9" pos:end="119:58"><expr pos:start="119:9" pos:end="119:57"><call pos:start="119:9" pos:end="119:57"><name pos:start="119:9" pos:end="119:14">av_log</name><argument_list pos:start="119:15" pos:end="119:57">(<argument pos:start="119:16" pos:end="119:20"><expr pos:start="119:16" pos:end="119:20"><name pos:start="119:16" pos:end="119:20">avctx</name></expr></argument>, <argument pos:start="119:23" pos:end="119:34"><expr pos:start="119:23" pos:end="119:34"><name pos:start="119:23" pos:end="119:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:37" pos:end="119:56"><expr pos:start="119:37" pos:end="119:56"><literal type="string" pos:start="119:37" pos:end="119:56">"invalid PCX file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:35">return <expr pos:start="121:16" pos:end="121:34"><name pos:start="121:16" pos:end="121:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="127:5" pos:end="127:15"><expr pos:start="127:5" pos:end="127:14"><name pos:start="127:5" pos:end="127:7">buf</name> <operator pos:start="127:9" pos:end="127:10">+=</operator> <literal type="number" pos:start="127:12" pos:end="127:14">128</literal></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="133:19"><if pos:start="131:5" pos:end="133:19">if <condition pos:start="131:8" pos:end="131:51">(<expr pos:start="131:9" pos:end="131:50"><operator pos:start="131:9" pos:end="131:9">(</operator><name pos:start="131:10" pos:end="131:12">ret</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:45"><name pos:start="131:16" pos:end="131:32">ff_set_dimensions</name><argument_list pos:start="131:33" pos:end="131:45">(<argument pos:start="131:34" pos:end="131:38"><expr pos:start="131:34" pos:end="131:38"><name pos:start="131:34" pos:end="131:38">avctx</name></expr></argument>, <argument pos:start="131:41" pos:end="131:41"><expr pos:start="131:41" pos:end="131:41"><name pos:start="131:41" pos:end="131:41">w</name></expr></argument>, <argument pos:start="131:44" pos:end="131:44"><expr pos:start="131:44" pos:end="131:44"><name pos:start="131:44" pos:end="131:44">h</name></expr></argument>)</argument_list></call><operator pos:start="131:46" pos:end="131:46">)</operator> <operator pos:start="131:48" pos:end="131:48">&lt;</operator> <literal type="number" pos:start="131:50" pos:end="131:50">0</literal></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:19"><block_content pos:start="133:9" pos:end="133:19">

        <return pos:start="133:9" pos:end="133:19">return <expr pos:start="133:16" pos:end="133:18"><name pos:start="133:16" pos:end="133:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:47">(<expr pos:start="137:9" pos:end="137:46"><operator pos:start="137:9" pos:end="137:9">(</operator><name pos:start="137:10" pos:end="137:12">ret</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <call pos:start="137:16" pos:end="137:41"><name pos:start="137:16" pos:end="137:28">ff_get_buffer</name><argument_list pos:start="137:29" pos:end="137:41">(<argument pos:start="137:30" pos:end="137:34"><expr pos:start="137:30" pos:end="137:34"><name pos:start="137:30" pos:end="137:34">avctx</name></expr></argument>, <argument pos:start="137:37" pos:end="137:37"><expr pos:start="137:37" pos:end="137:37"><name pos:start="137:37" pos:end="137:37">p</name></expr></argument>, <argument pos:start="137:40" pos:end="137:40"><expr pos:start="137:40" pos:end="137:40"><literal type="number" pos:start="137:40" pos:end="137:40">0</literal></expr></argument>)</argument_list></call><operator pos:start="137:42" pos:end="137:42">)</operator> <operator pos:start="137:44" pos:end="137:44">&lt;</operator> <literal type="number" pos:start="137:46" pos:end="137:46">0</literal></expr>)</condition> <block pos:start="137:49" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:19">

        <expr_stmt pos:start="139:9" pos:end="139:61"><expr pos:start="139:9" pos:end="139:60"><call pos:start="139:9" pos:end="139:60"><name pos:start="139:9" pos:end="139:14">av_log</name><argument_list pos:start="139:15" pos:end="139:60">(<argument pos:start="139:16" pos:end="139:20"><expr pos:start="139:16" pos:end="139:20"><name pos:start="139:16" pos:end="139:20">avctx</name></expr></argument>, <argument pos:start="139:23" pos:end="139:34"><expr pos:start="139:23" pos:end="139:34"><name pos:start="139:23" pos:end="139:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:37" pos:end="139:59"><expr pos:start="139:37" pos:end="139:59"><literal type="string" pos:start="139:37" pos:end="139:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:19">return <expr pos:start="141:16" pos:end="141:18"><name pos:start="141:16" pos:end="141:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:37"><expr pos:start="147:5" pos:end="147:36"><name pos:start="147:5" pos:end="147:16"><name pos:start="147:5" pos:end="147:5">p</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:16">pict_type</name></name> <operator pos:start="147:18" pos:end="147:18">=</operator> <name pos:start="147:20" pos:end="147:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:24"><expr pos:start="151:5" pos:end="151:23"><name pos:start="151:5" pos:end="151:7">ptr</name>    <operator pos:start="151:12" pos:end="151:12">=</operator> <name pos:start="151:14" pos:end="151:23"><name pos:start="151:14" pos:end="151:14">p</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:20">data</name><index pos:start="151:21" pos:end="151:23">[<expr pos:start="151:22" pos:end="151:22"><literal type="number" pos:start="151:22" pos:end="151:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:28"><expr pos:start="153:5" pos:end="153:27"><name pos:start="153:5" pos:end="153:10">stride</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <name pos:start="153:14" pos:end="153:27"><name pos:start="153:14" pos:end="153:14">p</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:24">linesize</name><index pos:start="153:25" pos:end="153:27">[<expr pos:start="153:26" pos:end="153:26"><literal type="number" pos:start="153:26" pos:end="153:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:45"><expr pos:start="157:5" pos:end="157:44"><name pos:start="157:5" pos:end="157:12">scanline</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <call pos:start="157:16" pos:end="157:44"><name pos:start="157:16" pos:end="157:24">av_malloc</name><argument_list pos:start="157:25" pos:end="157:44">(<argument pos:start="157:26" pos:end="157:43"><expr pos:start="157:26" pos:end="157:43"><name pos:start="157:26" pos:end="157:43">bytes_per_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="161:31"><if pos:start="159:5" pos:end="161:31">if <condition pos:start="159:8" pos:end="159:18">(<expr pos:start="159:9" pos:end="159:17"><operator pos:start="159:9" pos:end="159:9">!</operator><name pos:start="159:10" pos:end="159:17">scanline</name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:31"><block_content pos:start="161:9" pos:end="161:31">

        <return pos:start="161:9" pos:end="161:31">return <expr pos:start="161:16" pos:end="161:30"><call pos:start="161:16" pos:end="161:30"><name pos:start="161:16" pos:end="161:22">AVERROR</name><argument_list pos:start="161:23" pos:end="161:30">(<argument pos:start="161:24" pos:end="161:29"><expr pos:start="161:24" pos:end="161:29"><name pos:start="161:24" pos:end="161:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="303:5"><if pos:start="165:5" pos:end="191:5">if <condition pos:start="165:8" pos:end="165:44">(<expr pos:start="165:9" pos:end="165:43"><name pos:start="165:9" pos:end="165:15">nplanes</name> <operator pos:start="165:17" pos:end="165:18">==</operator> <literal type="number" pos:start="165:20" pos:end="165:20">3</literal> <operator pos:start="165:22" pos:end="165:23">&amp;&amp;</operator> <name pos:start="165:25" pos:end="165:38">bits_per_pixel</name> <operator pos:start="165:40" pos:end="165:41">==</operator> <literal type="number" pos:start="165:43" pos:end="165:43">8</literal></expr>)</condition> <block pos:start="165:46" pos:end="191:5">{<block_content pos:start="167:9" pos:end="189:9">

        <for pos:start="167:9" pos:end="189:9">for <control pos:start="167:13" pos:end="167:31">(<init pos:start="167:14" pos:end="167:19"><expr pos:start="167:14" pos:end="167:18"><name pos:start="167:14" pos:end="167:14">y</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <literal type="number" pos:start="167:18" pos:end="167:18">0</literal></expr>;</init> <condition pos:start="167:21" pos:end="167:26"><expr pos:start="167:21" pos:end="167:25"><name pos:start="167:21" pos:end="167:21">y</name> <operator pos:start="167:23" pos:end="167:23">&lt;</operator> <name pos:start="167:25" pos:end="167:25">h</name></expr>;</condition> <incr pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:28">y</name><operator pos:start="167:29" pos:end="167:30">++</operator></expr></incr>)</control> <block pos:start="167:33" pos:end="189:9">{<block_content pos:start="169:13" pos:end="187:26">

            <expr_stmt pos:start="169:13" pos:end="171:75"><expr pos:start="169:13" pos:end="171:74"><name pos:start="169:13" pos:end="169:15">buf</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="171:74"><name pos:start="169:19" pos:end="169:32">pcx_rle_decode</name><argument_list pos:start="169:33" pos:end="171:74">(<argument pos:start="169:34" pos:end="169:36"><expr pos:start="169:34" pos:end="169:36"><name pos:start="169:34" pos:end="169:36">buf</name></expr></argument>, <argument pos:start="169:39" pos:end="169:45"><expr pos:start="169:39" pos:end="169:45"><name pos:start="169:39" pos:end="169:45">buf_end</name></expr></argument>,

                                 <argument pos:start="171:34" pos:end="171:41"><expr pos:start="171:34" pos:end="171:41"><name pos:start="171:34" pos:end="171:41">scanline</name></expr></argument>, <argument pos:start="171:44" pos:end="171:61"><expr pos:start="171:44" pos:end="171:61"><name pos:start="171:44" pos:end="171:61">bytes_per_scanline</name></expr></argument>, <argument pos:start="171:64" pos:end="171:73"><expr pos:start="171:64" pos:end="171:73"><name pos:start="171:64" pos:end="171:73">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="175:13" pos:end="183:13">for <control pos:start="175:17" pos:end="175:35">(<init pos:start="175:18" pos:end="175:23"><expr pos:start="175:18" pos:end="175:22"><name pos:start="175:18" pos:end="175:18">x</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <literal type="number" pos:start="175:22" pos:end="175:22">0</literal></expr>;</init> <condition pos:start="175:25" pos:end="175:30"><expr pos:start="175:25" pos:end="175:29"><name pos:start="175:25" pos:end="175:25">x</name> <operator pos:start="175:27" pos:end="175:27">&lt;</operator> <name pos:start="175:29" pos:end="175:29">w</name></expr>;</condition> <incr pos:start="175:32" pos:end="175:34"><expr pos:start="175:32" pos:end="175:34"><name pos:start="175:32" pos:end="175:32">x</name><operator pos:start="175:33" pos:end="175:34">++</operator></expr></incr>)</control> <block pos:start="175:37" pos:end="183:13">{<block_content pos:start="177:17" pos:end="181:69">

                <expr_stmt pos:start="177:17" pos:end="177:45"><expr pos:start="177:17" pos:end="177:44"><name pos:start="177:17" pos:end="177:26"><name pos:start="177:17" pos:end="177:19">ptr</name><index pos:start="177:20" pos:end="177:26">[<expr pos:start="177:21" pos:end="177:25"><literal type="number" pos:start="177:21" pos:end="177:21">3</literal> <operator pos:start="177:23" pos:end="177:23">*</operator> <name pos:start="177:25" pos:end="177:25">x</name></expr>]</index></name>     <operator pos:start="177:32" pos:end="177:32">=</operator> <name pos:start="177:34" pos:end="177:44"><name pos:start="177:34" pos:end="177:41">scanline</name><index pos:start="177:42" pos:end="177:44">[<expr pos:start="177:43" pos:end="177:43"><name pos:start="177:43" pos:end="177:43">x</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:62"><expr pos:start="179:17" pos:end="179:61"><name pos:start="179:17" pos:end="179:30"><name pos:start="179:17" pos:end="179:19">ptr</name><index pos:start="179:20" pos:end="179:30">[<expr pos:start="179:21" pos:end="179:29"><literal type="number" pos:start="179:21" pos:end="179:21">3</literal> <operator pos:start="179:23" pos:end="179:23">*</operator> <name pos:start="179:25" pos:end="179:25">x</name> <operator pos:start="179:27" pos:end="179:27">+</operator> <literal type="number" pos:start="179:29" pos:end="179:29">1</literal></expr>]</index></name> <operator pos:start="179:32" pos:end="179:32">=</operator> <name pos:start="179:34" pos:end="179:61"><name pos:start="179:34" pos:end="179:41">scanline</name><index pos:start="179:42" pos:end="179:61">[<expr pos:start="179:43" pos:end="179:60"><name pos:start="179:43" pos:end="179:43">x</name> <operator pos:start="179:45" pos:end="179:45">+</operator> <name pos:start="179:47" pos:end="179:60">bytes_per_line</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:69"><expr pos:start="181:17" pos:end="181:68"><name pos:start="181:17" pos:end="181:30"><name pos:start="181:17" pos:end="181:19">ptr</name><index pos:start="181:20" pos:end="181:30">[<expr pos:start="181:21" pos:end="181:29"><literal type="number" pos:start="181:21" pos:end="181:21">3</literal> <operator pos:start="181:23" pos:end="181:23">*</operator> <name pos:start="181:25" pos:end="181:25">x</name> <operator pos:start="181:27" pos:end="181:27">+</operator> <literal type="number" pos:start="181:29" pos:end="181:29">2</literal></expr>]</index></name> <operator pos:start="181:32" pos:end="181:32">=</operator> <name pos:start="181:34" pos:end="181:68"><name pos:start="181:34" pos:end="181:41">scanline</name><index pos:start="181:42" pos:end="181:68">[<expr pos:start="181:43" pos:end="181:67"><name pos:start="181:43" pos:end="181:43">x</name> <operator pos:start="181:45" pos:end="181:45">+</operator> <operator pos:start="181:47" pos:end="181:47">(</operator><name pos:start="181:48" pos:end="181:61">bytes_per_line</name> <operator pos:start="181:63" pos:end="181:64">&lt;&lt;</operator> <literal type="number" pos:start="181:66" pos:end="181:66">1</literal><operator pos:start="181:67" pos:end="181:67">)</operator></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="187:13" pos:end="187:26"><expr pos:start="187:13" pos:end="187:25"><name pos:start="187:13" pos:end="187:15">ptr</name> <operator pos:start="187:17" pos:end="187:18">+=</operator> <name pos:start="187:20" pos:end="187:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="191:7" pos:end="243:5">else if <condition pos:start="191:15" pos:end="191:51">(<expr pos:start="191:16" pos:end="191:50"><name pos:start="191:16" pos:end="191:22">nplanes</name> <operator pos:start="191:24" pos:end="191:25">==</operator> <literal type="number" pos:start="191:27" pos:end="191:27">1</literal> <operator pos:start="191:29" pos:end="191:30">&amp;&amp;</operator> <name pos:start="191:32" pos:end="191:45">bits_per_pixel</name> <operator pos:start="191:47" pos:end="191:48">==</operator> <literal type="number" pos:start="191:50" pos:end="191:50">8</literal></expr>)</condition> <block pos:start="191:53" pos:end="243:5">{<block_content pos:start="193:9" pos:end="241:9">

        <decl_stmt pos:start="193:9" pos:end="193:60"><decl pos:start="193:9" pos:end="193:59"><type pos:start="193:9" pos:end="193:23"><specifier pos:start="193:9" pos:end="193:13">const</specifier> <name pos:start="193:15" pos:end="193:21">uint8_t</name> <modifier pos:start="193:23" pos:end="193:23">*</modifier></type><name pos:start="193:24" pos:end="193:31">palstart</name> <init pos:start="193:33" pos:end="193:59">= <expr pos:start="193:35" pos:end="193:59"><name pos:start="193:35" pos:end="193:42">bufstart</name> <operator pos:start="193:44" pos:end="193:44">+</operator> <name pos:start="193:46" pos:end="193:53">buf_size</name> <operator pos:start="193:55" pos:end="193:55">-</operator> <literal type="number" pos:start="193:57" pos:end="193:59">769</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="197:9" pos:end="207:9"><if pos:start="197:9" pos:end="207:9">if <condition pos:start="197:12" pos:end="197:27">(<expr pos:start="197:13" pos:end="197:26"><name pos:start="197:13" pos:end="197:20">buf_size</name> <operator pos:start="197:22" pos:end="197:22">&lt;</operator> <literal type="number" pos:start="197:24" pos:end="197:26">769</literal></expr>)</condition> <block pos:start="197:29" pos:end="207:9">{<block_content pos:start="199:13" pos:end="205:21">

            <expr_stmt pos:start="199:13" pos:end="199:63"><expr pos:start="199:13" pos:end="199:62"><call pos:start="199:13" pos:end="199:62"><name pos:start="199:13" pos:end="199:18">av_log</name><argument_list pos:start="199:19" pos:end="199:62">(<argument pos:start="199:20" pos:end="199:24"><expr pos:start="199:20" pos:end="199:24"><name pos:start="199:20" pos:end="199:24">avctx</name></expr></argument>, <argument pos:start="199:27" pos:end="199:38"><expr pos:start="199:27" pos:end="199:38"><name pos:start="199:27" pos:end="199:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:41" pos:end="199:61"><expr pos:start="199:41" pos:end="199:61"><literal type="string" pos:start="199:41" pos:end="199:61">"File is too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="203:49"><expr pos:start="201:13" pos:end="203:48"><name pos:start="201:13" pos:end="201:15">ret</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <ternary pos:start="201:19" pos:end="203:48"><condition pos:start="201:19" pos:end="201:58"><expr pos:start="201:19" pos:end="201:56"><name pos:start="201:19" pos:end="201:40"><name pos:start="201:19" pos:end="201:23">avctx</name><operator pos:start="201:24" pos:end="201:25">-&gt;</operator><name pos:start="201:26" pos:end="201:40">err_recognition</name></name> <operator pos:start="201:42" pos:end="201:42">&amp;</operator> <name pos:start="201:44" pos:end="201:56">AV_EF_EXPLODE</name></expr> ?</condition><then pos:start="203:19" pos:end="203:37">

                  <expr pos:start="203:19" pos:end="203:37"><name pos:start="203:19" pos:end="203:37">AVERROR_INVALIDDATA</name></expr> </then><else pos:start="203:39" pos:end="203:48">: <expr pos:start="203:41" pos:end="203:48"><name pos:start="203:41" pos:end="203:48">buf_size</name></expr></else></ternary></expr>;</expr_stmt>

            <goto pos:start="205:13" pos:end="205:21">goto <name pos:start="205:18" pos:end="205:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="211:9" pos:end="219:9">for <control pos:start="211:13" pos:end="211:46">(<init pos:start="211:14" pos:end="211:19"><expr pos:start="211:14" pos:end="211:18"><name pos:start="211:14" pos:end="211:14">y</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <literal type="number" pos:start="211:18" pos:end="211:18">0</literal></expr>;</init> <condition pos:start="211:21" pos:end="211:26"><expr pos:start="211:21" pos:end="211:25"><name pos:start="211:21" pos:end="211:21">y</name> <operator pos:start="211:23" pos:end="211:23">&lt;</operator> <name pos:start="211:25" pos:end="211:25">h</name></expr>;</condition> <incr pos:start="211:28" pos:end="211:45"><expr pos:start="211:28" pos:end="211:30"><name pos:start="211:28" pos:end="211:28">y</name><operator pos:start="211:29" pos:end="211:30">++</operator></expr><operator pos:start="211:31" pos:end="211:31">,</operator> <expr pos:start="211:33" pos:end="211:45"><name pos:start="211:33" pos:end="211:35">ptr</name> <operator pos:start="211:37" pos:end="211:38">+=</operator> <name pos:start="211:40" pos:end="211:45">stride</name></expr></incr>)</control> <block pos:start="211:48" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:37">

            <expr_stmt pos:start="213:13" pos:end="215:75"><expr pos:start="213:13" pos:end="215:74"><name pos:start="213:13" pos:end="213:15">buf</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <call pos:start="213:19" pos:end="215:74"><name pos:start="213:19" pos:end="213:32">pcx_rle_decode</name><argument_list pos:start="213:33" pos:end="215:74">(<argument pos:start="213:34" pos:end="213:36"><expr pos:start="213:34" pos:end="213:36"><name pos:start="213:34" pos:end="213:36">buf</name></expr></argument>, <argument pos:start="213:39" pos:end="213:45"><expr pos:start="213:39" pos:end="213:45"><name pos:start="213:39" pos:end="213:45">buf_end</name></expr></argument>,

                                 <argument pos:start="215:34" pos:end="215:41"><expr pos:start="215:34" pos:end="215:41"><name pos:start="215:34" pos:end="215:41">scanline</name></expr></argument>, <argument pos:start="215:44" pos:end="215:61"><expr pos:start="215:44" pos:end="215:61"><name pos:start="215:44" pos:end="215:61">bytes_per_scanline</name></expr></argument>, <argument pos:start="215:64" pos:end="215:73"><expr pos:start="215:64" pos:end="215:73"><name pos:start="215:64" pos:end="215:73">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:37"><expr pos:start="217:13" pos:end="217:36"><call pos:start="217:13" pos:end="217:36"><name pos:start="217:13" pos:end="217:18">memcpy</name><argument_list pos:start="217:19" pos:end="217:36">(<argument pos:start="217:20" pos:end="217:22"><expr pos:start="217:20" pos:end="217:22"><name pos:start="217:20" pos:end="217:22">ptr</name></expr></argument>, <argument pos:start="217:25" pos:end="217:32"><expr pos:start="217:25" pos:end="217:32"><name pos:start="217:25" pos:end="217:32">scanline</name></expr></argument>, <argument pos:start="217:35" pos:end="217:35"><expr pos:start="217:35" pos:end="217:35"><name pos:start="217:35" pos:end="217:35">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="223:9" pos:end="229:9"><if pos:start="223:9" pos:end="229:9">if <condition pos:start="223:12" pos:end="223:28">(<expr pos:start="223:13" pos:end="223:27"><name pos:start="223:13" pos:end="223:15">buf</name> <operator pos:start="223:17" pos:end="223:18">!=</operator> <name pos:start="223:20" pos:end="223:27">palstart</name></expr>)</condition> <block pos:start="223:30" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:27">

            <expr_stmt pos:start="225:13" pos:end="225:77"><expr pos:start="225:13" pos:end="225:76"><call pos:start="225:13" pos:end="225:76"><name pos:start="225:13" pos:end="225:18">av_log</name><argument_list pos:start="225:19" pos:end="225:76">(<argument pos:start="225:20" pos:end="225:24"><expr pos:start="225:20" pos:end="225:24"><name pos:start="225:20" pos:end="225:24">avctx</name></expr></argument>, <argument pos:start="225:27" pos:end="225:40"><expr pos:start="225:27" pos:end="225:40"><name pos:start="225:27" pos:end="225:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="225:43" pos:end="225:75"><expr pos:start="225:43" pos:end="225:75"><literal type="string" pos:start="225:43" pos:end="225:75">"image data possibly corrupted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:27"><expr pos:start="227:13" pos:end="227:26"><name pos:start="227:13" pos:end="227:15">buf</name> <operator pos:start="227:17" pos:end="227:17">=</operator> <name pos:start="227:19" pos:end="227:26">palstart</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="231:9" pos:end="241:9"><if pos:start="231:9" pos:end="241:9">if <condition pos:start="231:12" pos:end="231:25">(<expr pos:start="231:13" pos:end="231:24"><operator pos:start="231:13" pos:end="231:13">*</operator><name pos:start="231:14" pos:end="231:16">buf</name><operator pos:start="231:17" pos:end="231:18">++</operator> <operator pos:start="231:20" pos:end="231:21">!=</operator> <literal type="number" pos:start="231:23" pos:end="231:24">12</literal></expr>)</condition> <block pos:start="231:27" pos:end="241:9">{<block_content pos:start="233:13" pos:end="239:21">

            <expr_stmt pos:start="233:13" pos:end="233:79"><expr pos:start="233:13" pos:end="233:78"><call pos:start="233:13" pos:end="233:78"><name pos:start="233:13" pos:end="233:18">av_log</name><argument_list pos:start="233:19" pos:end="233:78">(<argument pos:start="233:20" pos:end="233:24"><expr pos:start="233:20" pos:end="233:24"><name pos:start="233:20" pos:end="233:24">avctx</name></expr></argument>, <argument pos:start="233:27" pos:end="233:38"><expr pos:start="233:27" pos:end="233:38"><name pos:start="233:27" pos:end="233:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:41" pos:end="233:77"><expr pos:start="233:41" pos:end="233:77"><literal type="string" pos:start="233:41" pos:end="233:77">"expected palette after image data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="237:49"><expr pos:start="235:13" pos:end="237:48"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <ternary pos:start="235:19" pos:end="237:48"><condition pos:start="235:19" pos:end="235:58"><expr pos:start="235:19" pos:end="235:56"><name pos:start="235:19" pos:end="235:40"><name pos:start="235:19" pos:end="235:23">avctx</name><operator pos:start="235:24" pos:end="235:25">-&gt;</operator><name pos:start="235:26" pos:end="235:40">err_recognition</name></name> <operator pos:start="235:42" pos:end="235:42">&amp;</operator> <name pos:start="235:44" pos:end="235:56">AV_EF_EXPLODE</name></expr> ?</condition><then pos:start="237:19" pos:end="237:37">

                  <expr pos:start="237:19" pos:end="237:37"><name pos:start="237:19" pos:end="237:37">AVERROR_INVALIDDATA</name></expr> </then><else pos:start="237:39" pos:end="237:48">: <expr pos:start="237:41" pos:end="237:48"><name pos:start="237:41" pos:end="237:48">buf_size</name></expr></else></ternary></expr>;</expr_stmt>

            <goto pos:start="239:13" pos:end="239:21">goto <name pos:start="239:18" pos:end="239:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="243:7" pos:end="269:5">else if <condition pos:start="243:15" pos:end="243:28">(<expr pos:start="243:16" pos:end="243:27"><name pos:start="243:16" pos:end="243:22">nplanes</name> <operator pos:start="243:24" pos:end="243:25">==</operator> <literal type="number" pos:start="243:27" pos:end="243:27">1</literal></expr>)</condition> <block pos:start="243:30" pos:end="269:5">{<block_content pos:start="245:9" pos:end="267:9">   <comment type="block" pos:start="243:34" pos:end="243:73">/* all packed formats, max. 16 colors */</comment>

        <decl_stmt pos:start="245:9" pos:end="245:24"><decl pos:start="245:9" pos:end="245:23"><type pos:start="245:9" pos:end="245:21"><name pos:start="245:9" pos:end="245:21">GetBitContext</name></type> <name pos:start="245:23" pos:end="245:23">s</name></decl>;</decl_stmt>



        <for pos:start="249:9" pos:end="267:9">for <control pos:start="249:13" pos:end="249:31">(<init pos:start="249:14" pos:end="249:19"><expr pos:start="249:14" pos:end="249:18"><name pos:start="249:14" pos:end="249:14">y</name> <operator pos:start="249:16" pos:end="249:16">=</operator> <literal type="number" pos:start="249:18" pos:end="249:18">0</literal></expr>;</init> <condition pos:start="249:21" pos:end="249:26"><expr pos:start="249:21" pos:end="249:25"><name pos:start="249:21" pos:end="249:21">y</name> <operator pos:start="249:23" pos:end="249:23">&lt;</operator> <name pos:start="249:25" pos:end="249:25">h</name></expr>;</condition> <incr pos:start="249:28" pos:end="249:30"><expr pos:start="249:28" pos:end="249:30"><name pos:start="249:28" pos:end="249:28">y</name><operator pos:start="249:29" pos:end="249:30">++</operator></expr></incr>)</control> <block pos:start="249:33" pos:end="267:9">{<block_content pos:start="251:13" pos:end="265:26">

            <expr_stmt pos:start="251:13" pos:end="251:65"><expr pos:start="251:13" pos:end="251:64"><call pos:start="251:13" pos:end="251:64"><name pos:start="251:13" pos:end="251:25">init_get_bits</name><argument_list pos:start="251:26" pos:end="251:64">(<argument pos:start="251:27" pos:end="251:28"><expr pos:start="251:27" pos:end="251:28"><operator pos:start="251:27" pos:end="251:27">&amp;</operator><name pos:start="251:28" pos:end="251:28">s</name></expr></argument>, <argument pos:start="251:31" pos:end="251:38"><expr pos:start="251:31" pos:end="251:38"><name pos:start="251:31" pos:end="251:38">scanline</name></expr></argument>, <argument pos:start="251:41" pos:end="251:63"><expr pos:start="251:41" pos:end="251:63"><name pos:start="251:41" pos:end="251:58">bytes_per_scanline</name> <operator pos:start="251:60" pos:end="251:61">&lt;&lt;</operator> <literal type="number" pos:start="251:63" pos:end="251:63">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="255:13" pos:end="257:75"><expr pos:start="255:13" pos:end="257:74"><name pos:start="255:13" pos:end="255:15">buf</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <call pos:start="255:19" pos:end="257:74"><name pos:start="255:19" pos:end="255:32">pcx_rle_decode</name><argument_list pos:start="255:33" pos:end="257:74">(<argument pos:start="255:34" pos:end="255:36"><expr pos:start="255:34" pos:end="255:36"><name pos:start="255:34" pos:end="255:36">buf</name></expr></argument>, <argument pos:start="255:39" pos:end="255:45"><expr pos:start="255:39" pos:end="255:45"><name pos:start="255:39" pos:end="255:45">buf_end</name></expr></argument>,

                                 <argument pos:start="257:34" pos:end="257:41"><expr pos:start="257:34" pos:end="257:41"><name pos:start="257:34" pos:end="257:41">scanline</name></expr></argument>, <argument pos:start="257:44" pos:end="257:61"><expr pos:start="257:44" pos:end="257:61"><name pos:start="257:44" pos:end="257:61">bytes_per_scanline</name></expr></argument>, <argument pos:start="257:64" pos:end="257:73"><expr pos:start="257:64" pos:end="257:73"><name pos:start="257:64" pos:end="257:73">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="261:13" pos:end="263:54">for <control pos:start="261:17" pos:end="261:35">(<init pos:start="261:18" pos:end="261:23"><expr pos:start="261:18" pos:end="261:22"><name pos:start="261:18" pos:end="261:18">x</name> <operator pos:start="261:20" pos:end="261:20">=</operator> <literal type="number" pos:start="261:22" pos:end="261:22">0</literal></expr>;</init> <condition pos:start="261:25" pos:end="261:30"><expr pos:start="261:25" pos:end="261:29"><name pos:start="261:25" pos:end="261:25">x</name> <operator pos:start="261:27" pos:end="261:27">&lt;</operator> <name pos:start="261:29" pos:end="261:29">w</name></expr>;</condition> <incr pos:start="261:32" pos:end="261:34"><expr pos:start="261:32" pos:end="261:34"><name pos:start="261:32" pos:end="261:32">x</name><operator pos:start="261:33" pos:end="261:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="263:17" pos:end="263:54"><block_content pos:start="263:17" pos:end="263:54">

                <expr_stmt pos:start="263:17" pos:end="263:54"><expr pos:start="263:17" pos:end="263:53"><name pos:start="263:17" pos:end="263:22"><name pos:start="263:17" pos:end="263:19">ptr</name><index pos:start="263:20" pos:end="263:22">[<expr pos:start="263:21" pos:end="263:21"><name pos:start="263:21" pos:end="263:21">x</name></expr>]</index></name> <operator pos:start="263:24" pos:end="263:24">=</operator> <call pos:start="263:26" pos:end="263:53"><name pos:start="263:26" pos:end="263:33">get_bits</name><argument_list pos:start="263:34" pos:end="263:53">(<argument pos:start="263:35" pos:end="263:36"><expr pos:start="263:35" pos:end="263:36"><operator pos:start="263:35" pos:end="263:35">&amp;</operator><name pos:start="263:36" pos:end="263:36">s</name></expr></argument>, <argument pos:start="263:39" pos:end="263:52"><expr pos:start="263:39" pos:end="263:52"><name pos:start="263:39" pos:end="263:52">bits_per_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="265:13" pos:end="265:26"><expr pos:start="265:13" pos:end="265:25"><name pos:start="265:13" pos:end="265:15">ptr</name> <operator pos:start="265:17" pos:end="265:18">+=</operator> <name pos:start="265:20" pos:end="265:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="269:7" pos:end="303:5">else <block pos:start="269:12" pos:end="303:5">{<block_content pos:start="271:9" pos:end="301:9">    <comment type="block" pos:start="269:17" pos:end="269:47">/* planar, 4, 8 or 16 colors */</comment>

        <decl_stmt pos:start="271:9" pos:end="271:14"><decl pos:start="271:9" pos:end="271:13"><type pos:start="271:9" pos:end="271:11"><name pos:start="271:9" pos:end="271:11">int</name></type> <name pos:start="271:13" pos:end="271:13">i</name></decl>;</decl_stmt>



        <for pos:start="275:9" pos:end="301:9">for <control pos:start="275:13" pos:end="275:31">(<init pos:start="275:14" pos:end="275:19"><expr pos:start="275:14" pos:end="275:18"><name pos:start="275:14" pos:end="275:14">y</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <literal type="number" pos:start="275:18" pos:end="275:18">0</literal></expr>;</init> <condition pos:start="275:21" pos:end="275:26"><expr pos:start="275:21" pos:end="275:25"><name pos:start="275:21" pos:end="275:21">y</name> <operator pos:start="275:23" pos:end="275:23">&lt;</operator> <name pos:start="275:25" pos:end="275:25">h</name></expr>;</condition> <incr pos:start="275:28" pos:end="275:30"><expr pos:start="275:28" pos:end="275:30"><name pos:start="275:28" pos:end="275:28">y</name><operator pos:start="275:29" pos:end="275:30">++</operator></expr></incr>)</control> <block pos:start="275:33" pos:end="301:9">{<block_content pos:start="277:13" pos:end="299:26">

            <expr_stmt pos:start="277:13" pos:end="279:75"><expr pos:start="277:13" pos:end="279:74"><name pos:start="277:13" pos:end="277:15">buf</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <call pos:start="277:19" pos:end="279:74"><name pos:start="277:19" pos:end="277:32">pcx_rle_decode</name><argument_list pos:start="277:33" pos:end="279:74">(<argument pos:start="277:34" pos:end="277:36"><expr pos:start="277:34" pos:end="277:36"><name pos:start="277:34" pos:end="277:36">buf</name></expr></argument>, <argument pos:start="277:39" pos:end="277:45"><expr pos:start="277:39" pos:end="277:45"><name pos:start="277:39" pos:end="277:45">buf_end</name></expr></argument>,

                                 <argument pos:start="279:34" pos:end="279:41"><expr pos:start="279:34" pos:end="279:41"><name pos:start="279:34" pos:end="279:41">scanline</name></expr></argument>, <argument pos:start="279:44" pos:end="279:61"><expr pos:start="279:44" pos:end="279:61"><name pos:start="279:44" pos:end="279:61">bytes_per_scanline</name></expr></argument>, <argument pos:start="279:64" pos:end="279:73"><expr pos:start="279:64" pos:end="279:73"><name pos:start="279:64" pos:end="279:73">compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="283:13" pos:end="297:13">for <control pos:start="283:17" pos:end="283:35">(<init pos:start="283:18" pos:end="283:23"><expr pos:start="283:18" pos:end="283:22"><name pos:start="283:18" pos:end="283:18">x</name> <operator pos:start="283:20" pos:end="283:20">=</operator> <literal type="number" pos:start="283:22" pos:end="283:22">0</literal></expr>;</init> <condition pos:start="283:25" pos:end="283:30"><expr pos:start="283:25" pos:end="283:29"><name pos:start="283:25" pos:end="283:25">x</name> <operator pos:start="283:27" pos:end="283:27">&lt;</operator> <name pos:start="283:29" pos:end="283:29">w</name></expr>;</condition> <incr pos:start="283:32" pos:end="283:34"><expr pos:start="283:32" pos:end="283:34"><name pos:start="283:32" pos:end="283:32">x</name><operator pos:start="283:33" pos:end="283:34">++</operator></expr></incr>)</control> <block pos:start="283:37" pos:end="297:13">{<block_content pos:start="285:17" pos:end="295:27">

                <decl_stmt pos:start="285:17" pos:end="285:47"><decl pos:start="285:17" pos:end="285:39"><type pos:start="285:17" pos:end="285:19"><name pos:start="285:17" pos:end="285:19">int</name></type> <name pos:start="285:21" pos:end="285:21">m</name> <init pos:start="285:23" pos:end="285:39">= <expr pos:start="285:25" pos:end="285:39"><literal type="number" pos:start="285:25" pos:end="285:28">0x80</literal> <operator pos:start="285:30" pos:end="285:31">&gt;&gt;</operator> <operator pos:start="285:33" pos:end="285:33">(</operator><name pos:start="285:34" pos:end="285:34">x</name> <operator pos:start="285:36" pos:end="285:36">&amp;</operator> <literal type="number" pos:start="285:38" pos:end="285:38">7</literal><operator pos:start="285:39" pos:end="285:39">)</operator></expr></init></decl>, <decl pos:start="285:42" pos:end="285:46"><type ref="prev" pos:start="285:17" pos:end="285:19"/><name pos:start="285:42" pos:end="285:42">v</name> <init pos:start="285:44" pos:end="285:46">= <expr pos:start="285:46" pos:end="285:46"><literal type="number" pos:start="285:46" pos:end="285:46">0</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="287:17" pos:end="293:17">for <control pos:start="287:21" pos:end="287:50">(<init pos:start="287:22" pos:end="287:37"><expr pos:start="287:22" pos:end="287:36"><name pos:start="287:22" pos:end="287:22">i</name> <operator pos:start="287:24" pos:end="287:24">=</operator> <name pos:start="287:26" pos:end="287:32">nplanes</name> <operator pos:start="287:34" pos:end="287:34">-</operator> <literal type="number" pos:start="287:36" pos:end="287:36">1</literal></expr>;</init> <condition pos:start="287:39" pos:end="287:45"><expr pos:start="287:39" pos:end="287:44"><name pos:start="287:39" pos:end="287:39">i</name> <operator pos:start="287:41" pos:end="287:42">&gt;=</operator> <literal type="number" pos:start="287:44" pos:end="287:44">0</literal></expr>;</condition> <incr pos:start="287:47" pos:end="287:49"><expr pos:start="287:47" pos:end="287:49"><name pos:start="287:47" pos:end="287:47">i</name><operator pos:start="287:48" pos:end="287:49">--</operator></expr></incr>)</control> <block pos:start="287:52" pos:end="293:17">{<block_content pos:start="289:21" pos:end="291:74">

                    <expr_stmt pos:start="289:21" pos:end="289:28"><expr pos:start="289:21" pos:end="289:27"><name pos:start="289:21" pos:end="289:21">v</name> <operator pos:start="289:23" pos:end="289:25">&lt;&lt;=</operator> <literal type="number" pos:start="289:27" pos:end="289:27">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:74"><expr pos:start="291:21" pos:end="291:73"><name pos:start="291:21" pos:end="291:21">v</name>  <operator pos:start="291:24" pos:end="291:25">+=</operator> <operator pos:start="291:27" pos:end="291:27">!</operator><operator pos:start="291:28" pos:end="291:28">!</operator><operator pos:start="291:29" pos:end="291:29">(</operator><name pos:start="291:30" pos:end="291:68"><name pos:start="291:30" pos:end="291:37">scanline</name><index pos:start="291:38" pos:end="291:68">[<expr pos:start="291:39" pos:end="291:67"><name pos:start="291:39" pos:end="291:39">i</name> <operator pos:start="291:41" pos:end="291:41">*</operator> <name pos:start="291:43" pos:end="291:56">bytes_per_line</name> <operator pos:start="291:58" pos:end="291:58">+</operator> <operator pos:start="291:60" pos:end="291:60">(</operator><name pos:start="291:61" pos:end="291:61">x</name> <operator pos:start="291:63" pos:end="291:64">&gt;&gt;</operator> <literal type="number" pos:start="291:66" pos:end="291:66">3</literal><operator pos:start="291:67" pos:end="291:67">)</operator></expr>]</index></name> <operator pos:start="291:70" pos:end="291:70">&amp;</operator> <name pos:start="291:72" pos:end="291:72">m</name><operator pos:start="291:73" pos:end="291:73">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="295:17" pos:end="295:27"><expr pos:start="295:17" pos:end="295:26"><name pos:start="295:17" pos:end="295:22"><name pos:start="295:17" pos:end="295:19">ptr</name><index pos:start="295:20" pos:end="295:22">[<expr pos:start="295:21" pos:end="295:21"><name pos:start="295:21" pos:end="295:21">x</name></expr>]</index></name> <operator pos:start="295:24" pos:end="295:24">=</operator> <name pos:start="295:26" pos:end="295:26">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="299:13" pos:end="299:26"><expr pos:start="299:13" pos:end="299:25"><name pos:start="299:13" pos:end="299:15">ptr</name> <operator pos:start="299:17" pos:end="299:18">+=</operator> <name pos:start="299:20" pos:end="299:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="307:5" pos:end="317:5"><if pos:start="307:5" pos:end="311:5">if <condition pos:start="307:8" pos:end="307:44">(<expr pos:start="307:9" pos:end="307:43"><name pos:start="307:9" pos:end="307:15">nplanes</name> <operator pos:start="307:17" pos:end="307:18">==</operator> <literal type="number" pos:start="307:20" pos:end="307:20">1</literal> <operator pos:start="307:22" pos:end="307:23">&amp;&amp;</operator> <name pos:start="307:25" pos:end="307:38">bits_per_pixel</name> <operator pos:start="307:40" pos:end="307:41">==</operator> <literal type="number" pos:start="307:43" pos:end="307:43">8</literal></expr>)</condition> <block pos:start="307:46" pos:end="311:5">{<block_content pos:start="309:9" pos:end="309:55">

        <expr_stmt pos:start="309:9" pos:end="309:55"><expr pos:start="309:9" pos:end="309:54"><call pos:start="309:9" pos:end="309:54"><name pos:start="309:9" pos:end="309:19">pcx_palette</name><argument_list pos:start="309:20" pos:end="309:54">(<argument pos:start="309:21" pos:end="309:24"><expr pos:start="309:21" pos:end="309:24"><operator pos:start="309:21" pos:end="309:21">&amp;</operator><name pos:start="309:22" pos:end="309:24">buf</name></expr></argument>, <argument pos:start="309:27" pos:end="309:48"><expr pos:start="309:27" pos:end="309:48"><operator pos:start="309:27" pos:end="309:27">(</operator><name pos:start="309:28" pos:end="309:35">uint32_t</name> <operator pos:start="309:37" pos:end="309:37">*</operator><operator pos:start="309:38" pos:end="309:38">)</operator><name pos:start="309:39" pos:end="309:48"><name pos:start="309:39" pos:end="309:39">p</name><operator pos:start="309:40" pos:end="309:41">-&gt;</operator><name pos:start="309:42" pos:end="309:45">data</name><index pos:start="309:46" pos:end="309:48">[<expr pos:start="309:47" pos:end="309:47"><literal type="number" pos:start="309:47" pos:end="309:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="309:51" pos:end="309:53"><expr pos:start="309:51" pos:end="309:53"><literal type="number" pos:start="309:51" pos:end="309:53">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="311:7" pos:end="317:5">else if <condition pos:start="311:15" pos:end="311:34">(<expr pos:start="311:16" pos:end="311:33"><name pos:start="311:16" pos:end="311:29">bits_per_pixel</name> <operator pos:start="311:31" pos:end="311:31">&lt;</operator> <literal type="number" pos:start="311:33" pos:end="311:33">8</literal></expr>)</condition> <block pos:start="311:36" pos:end="317:5">{<block_content pos:start="313:9" pos:end="315:58">

        <decl_stmt pos:start="313:9" pos:end="313:47"><decl pos:start="313:9" pos:end="313:46"><type pos:start="313:9" pos:end="313:23"><specifier pos:start="313:9" pos:end="313:13">const</specifier> <name pos:start="313:15" pos:end="313:21">uint8_t</name> <modifier pos:start="313:23" pos:end="313:23">*</modifier></type><name pos:start="313:24" pos:end="313:30">palette</name> <init pos:start="313:32" pos:end="313:46">= <expr pos:start="313:34" pos:end="313:46"><name pos:start="313:34" pos:end="313:41">bufstart</name> <operator pos:start="313:43" pos:end="313:43">+</operator> <literal type="number" pos:start="313:45" pos:end="313:46">16</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:58"><expr pos:start="315:9" pos:end="315:57"><call pos:start="315:9" pos:end="315:57"><name pos:start="315:9" pos:end="315:19">pcx_palette</name><argument_list pos:start="315:20" pos:end="315:57">(<argument pos:start="315:21" pos:end="315:28"><expr pos:start="315:21" pos:end="315:28"><operator pos:start="315:21" pos:end="315:21">&amp;</operator><name pos:start="315:22" pos:end="315:28">palette</name></expr></argument>, <argument pos:start="315:31" pos:end="315:52"><expr pos:start="315:31" pos:end="315:52"><operator pos:start="315:31" pos:end="315:31">(</operator><name pos:start="315:32" pos:end="315:39">uint32_t</name> <operator pos:start="315:41" pos:end="315:41">*</operator><operator pos:start="315:42" pos:end="315:42">)</operator><name pos:start="315:43" pos:end="315:52"><name pos:start="315:43" pos:end="315:43">p</name><operator pos:start="315:44" pos:end="315:45">-&gt;</operator><name pos:start="315:46" pos:end="315:49">data</name><index pos:start="315:50" pos:end="315:52">[<expr pos:start="315:51" pos:end="315:51"><literal type="number" pos:start="315:51" pos:end="315:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="315:55" pos:end="315:56"><expr pos:start="315:55" pos:end="315:56"><literal type="number" pos:start="315:55" pos:end="315:56">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="321:5" pos:end="321:19"><expr pos:start="321:5" pos:end="321:18"><operator pos:start="321:5" pos:end="321:5">*</operator><name pos:start="321:6" pos:end="321:14">got_frame</name> <operator pos:start="321:16" pos:end="321:16">=</operator> <literal type="number" pos:start="321:18" pos:end="321:18">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="325:5" pos:end="325:25"><expr pos:start="325:5" pos:end="325:24"><name pos:start="325:5" pos:end="325:7">ret</name> <operator pos:start="325:9" pos:end="325:9">=</operator> <name pos:start="325:11" pos:end="325:13">buf</name> <operator pos:start="325:15" pos:end="325:15">-</operator> <name pos:start="325:17" pos:end="325:24">bufstart</name></expr>;</expr_stmt>

<label pos:start="327:1" pos:end="327:4"><name pos:start="327:1" pos:end="327:3">end</name>:</label>

    <expr_stmt pos:start="329:5" pos:end="329:22"><expr pos:start="329:5" pos:end="329:21"><call pos:start="329:5" pos:end="329:21"><name pos:start="329:5" pos:end="329:11">av_free</name><argument_list pos:start="329:12" pos:end="329:21">(<argument pos:start="329:13" pos:end="329:20"><expr pos:start="329:13" pos:end="329:20"><name pos:start="329:13" pos:end="329:20">scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="331:5" pos:end="331:15">return <expr pos:start="331:12" pos:end="331:14"><name pos:start="331:12" pos:end="331:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
