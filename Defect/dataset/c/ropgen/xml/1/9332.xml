<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9332.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">boot_sector_init</name><parameter_list pos:start="1:21" pos:end="1:33">(<parameter pos:start="1:22" pos:end="1:32"><decl pos:start="1:22" pos:end="1:32"><type pos:start="1:22" pos:end="1:27"><name pos:start="1:22" pos:end="1:25">char</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:32">fname</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>, <decl pos:start="5:13" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:14">len</name> <init pos:start="7:16" pos:end="7:35">= <expr pos:start="7:18" pos:end="7:35"><sizeof pos:start="7:18" pos:end="7:35">sizeof <name pos:start="7:25" pos:end="7:35">boot_sector</name></sizeof></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:6">fd</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:23"><name pos:start="11:10" pos:end="11:16">mkstemp</name><argument_list pos:start="11:17" pos:end="11:23">(<argument pos:start="11:18" pos:end="11:22"><expr pos:start="11:18" pos:end="11:22"><name pos:start="11:18" pos:end="11:22">fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:15">(<expr pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:10">fd</name> <operator pos:start="13:12" pos:end="13:12">&lt;</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>)</condition> <block pos:start="13:17" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:76"><expr pos:start="15:9" pos:end="15:75"><call pos:start="15:9" pos:end="15:75"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:75">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:50"><expr pos:start="15:25" pos:end="15:50"><literal type="string" pos:start="15:25" pos:end="15:50">"Couldn't open \"%s\": %s"</literal></expr></argument>, <argument pos:start="15:53" pos:end="15:57"><expr pos:start="15:53" pos:end="15:57"><name pos:start="15:53" pos:end="15:57">fname</name></expr></argument>, <argument pos:start="15:60" pos:end="15:74"><expr pos:start="15:60" pos:end="15:74"><call pos:start="15:60" pos:end="15:74"><name pos:start="15:60" pos:end="15:67">strerror</name><argument_list pos:start="15:68" pos:end="15:74">(<argument pos:start="15:69" pos:end="15:73"><expr pos:start="15:69" pos:end="15:73"><name pos:start="15:69" pos:end="15:73">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:75">/* For Open Firmware based system, we can use a Forth script instead */</comment>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:47">(<expr pos:start="25:9" pos:end="25:46"><call pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:14">strcmp</name><argument_list pos:start="25:15" pos:end="25:41">(<argument pos:start="25:16" pos:end="25:31"><expr pos:start="25:16" pos:end="25:31"><call pos:start="25:16" pos:end="25:31"><name pos:start="25:16" pos:end="25:29">qtest_get_arch</name><argument_list pos:start="25:30" pos:end="25:31">()</argument_list></call></expr></argument>, <argument pos:start="25:34" pos:end="25:40"><expr pos:start="25:34" pos:end="25:40"><literal type="string" pos:start="25:34" pos:end="25:40">"ppc64"</literal></expr></argument>)</argument_list></call> <operator pos:start="25:43" pos:end="25:44">==</operator> <literal type="number" pos:start="25:46" pos:end="25:46">0</literal></expr>)</condition> <block pos:start="25:49" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:77">

        <expr_stmt pos:start="27:9" pos:end="31:77"><expr pos:start="27:9" pos:end="31:76"><name pos:start="27:9" pos:end="27:11">len</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="31:76"><name pos:start="27:15" pos:end="27:21">sprintf</name><argument_list pos:start="27:22" pos:end="31:76">(<argument pos:start="27:23" pos:end="27:41"><expr pos:start="27:23" pos:end="27:41"><operator pos:start="27:23" pos:end="27:23">(</operator><name pos:start="27:24" pos:end="27:27">char</name> <operator pos:start="27:29" pos:end="27:29">*</operator><operator pos:start="27:30" pos:end="27:30">)</operator><name pos:start="27:31" pos:end="27:41">boot_sector</name></expr></argument>, <argument pos:start="27:44" pos:end="27:79"><expr pos:start="27:44" pos:end="27:79"><literal type="string" pos:start="27:44" pos:end="27:79">"\\ Bootscript\n%x %x c! %x %x c!\n"</literal></expr></argument>,

                <argument pos:start="29:17" pos:end="29:30"><expr pos:start="29:17" pos:end="29:30"><call pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:19">LOW</name><argument_list pos:start="29:20" pos:end="29:30">(<argument pos:start="29:21" pos:end="29:29"><expr pos:start="29:21" pos:end="29:29"><name pos:start="29:21" pos:end="29:29">SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="29:33" pos:end="29:70"><expr pos:start="29:33" pos:end="29:70"><name pos:start="29:33" pos:end="29:51">BOOT_SECTOR_ADDRESS</name> <operator pos:start="29:53" pos:end="29:53">+</operator> <name pos:start="29:55" pos:end="29:70">SIGNATURE_OFFSET</name></expr></argument>,

                <argument pos:start="31:17" pos:end="31:31"><expr pos:start="31:17" pos:end="31:31"><call pos:start="31:17" pos:end="31:31"><name pos:start="31:17" pos:end="31:20">HIGH</name><argument_list pos:start="31:21" pos:end="31:31">(<argument pos:start="31:22" pos:end="31:30"><expr pos:start="31:22" pos:end="31:30"><name pos:start="31:22" pos:end="31:30">SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:34" pos:end="31:75"><expr pos:start="31:34" pos:end="31:75"><name pos:start="31:34" pos:end="31:52">BOOT_SECTOR_ADDRESS</name> <operator pos:start="31:54" pos:end="31:54">+</operator> <name pos:start="31:56" pos:end="31:71">SIGNATURE_OFFSET</name> <operator pos:start="31:73" pos:end="31:73">+</operator> <literal type="number" pos:start="31:75" pos:end="31:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:37"><name pos:start="37:11" pos:end="37:15">write</name><argument_list pos:start="37:16" pos:end="37:37">(<argument pos:start="37:17" pos:end="37:18"><expr pos:start="37:17" pos:end="37:18"><name pos:start="37:17" pos:end="37:18">fd</name></expr></argument>, <argument pos:start="37:21" pos:end="37:31"><expr pos:start="37:21" pos:end="37:31"><name pos:start="37:21" pos:end="37:31">boot_sector</name></expr></argument>, <argument pos:start="37:34" pos:end="37:36"><expr pos:start="37:34" pos:end="37:36"><name pos:start="37:34" pos:end="37:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:14"><expr pos:start="39:5" pos:end="39:13"><call pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:9">close</name><argument_list pos:start="39:10" pos:end="39:13">(<argument pos:start="39:11" pos:end="39:12"><expr pos:start="39:11" pos:end="39:12"><name pos:start="39:11" pos:end="39:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:14">!=</operator> <name pos:start="43:16" pos:end="43:18">len</name></expr>)</condition> <block pos:start="43:21" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:17">

        <expr_stmt pos:start="45:9" pos:end="45:57"><expr pos:start="45:9" pos:end="45:56"><call pos:start="45:9" pos:end="45:56"><name pos:start="45:9" pos:end="45:15">fprintf</name><argument_list pos:start="45:16" pos:end="45:56">(<argument pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">stderr</name></expr></argument>, <argument pos:start="45:25" pos:end="45:48"><expr pos:start="45:25" pos:end="45:48"><literal type="string" pos:start="45:25" pos:end="45:48">"Could not write \"%s\""</literal></expr></argument>, <argument pos:start="45:51" pos:end="45:55"><expr pos:start="45:51" pos:end="45:55"><name pos:start="45:51" pos:end="45:55">fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
