<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12210.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:73"><name pos:start="1:1" pos:end="1:14">opts_type_size</name><argument_list pos:start="1:15" pos:end="1:73">(<argument pos:start="1:16" pos:end="1:25">Visitor *v</argument>, <argument pos:start="1:28" pos:end="1:40">uint64_t *obj</argument>, <argument pos:start="1:43" pos:end="1:58">const char *name</argument>, <argument pos:start="1:61" pos:end="1:72">Error **errp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:68">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">OptsVisitor</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">ov</name> <init pos:start="5:21" pos:end="5:56">= <expr pos:start="5:23" pos:end="5:56"><call pos:start="5:23" pos:end="5:56"><name pos:start="5:23" pos:end="5:31">DO_UPCAST</name><argument_list pos:start="5:32" pos:end="5:56">(<argument pos:start="5:33" pos:end="5:43"><expr pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:43">OptsVisitor</name></expr></argument>, <argument pos:start="5:46" pos:end="5:52"><expr pos:start="5:46" pos:end="5:52"><name pos:start="5:46" pos:end="5:52">visitor</name></expr></argument>, <argument pos:start="5:55" pos:end="5:55"><expr pos:start="5:55" pos:end="5:55"><name pos:start="5:55" pos:end="5:55">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">QemuOpt</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">opt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:16">endptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:7">opt</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:39"><name pos:start="15:11" pos:end="15:23">lookup_scalar</name><argument_list pos:start="15:24" pos:end="15:39">(<argument pos:start="15:25" pos:end="15:26"><expr pos:start="15:25" pos:end="15:26"><name pos:start="15:25" pos:end="15:26">ov</name></expr></argument>, <argument pos:start="15:29" pos:end="15:32"><expr pos:start="15:29" pos:end="15:32"><name pos:start="15:29" pos:end="15:32">name</name></expr></argument>, <argument pos:start="15:35" pos:end="15:38"><expr pos:start="15:35" pos:end="15:38"><name pos:start="15:35" pos:end="15:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">opt</name></expr>)</condition> <block pos:start="17:15" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:15">

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:46"><expr pos:start="25:5" pos:end="27:45"><name pos:start="25:5" pos:end="25:7">val</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="27:45"><name pos:start="25:11" pos:end="25:24">strtosz_suffix</name><argument_list pos:start="25:25" pos:end="27:45">(<argument pos:start="25:26" pos:end="25:49"><expr pos:start="25:26" pos:end="25:49"><ternary pos:start="25:26" pos:end="25:49"><condition pos:start="25:26" pos:end="25:35"><expr pos:start="25:26" pos:end="25:33"><name pos:start="25:26" pos:end="25:33"><name pos:start="25:26" pos:end="25:28">opt</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:33">str</name></name></expr> ?</condition><then pos:start="25:37" pos:end="25:44"> <expr pos:start="25:37" pos:end="25:44"><name pos:start="25:37" pos:end="25:44"><name pos:start="25:37" pos:end="25:39">opt</name><operator pos:start="25:40" pos:end="25:41">-&gt;</operator><name pos:start="25:42" pos:end="25:44">str</name></name></expr> </then><else pos:start="25:46" pos:end="25:49">: <expr pos:start="25:48" pos:end="25:49"><literal type="string" pos:start="25:48" pos:end="25:49">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="25:52" pos:end="25:58"><expr pos:start="25:52" pos:end="25:58"><operator pos:start="25:52" pos:end="25:52">&amp;</operator><name pos:start="25:53" pos:end="25:58">endptr</name></expr></argument>,

                         <argument pos:start="27:26" pos:end="27:44"><expr pos:start="27:26" pos:end="27:44"><name pos:start="27:26" pos:end="27:44">STRTOSZ_DEFSUFFIX_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:37">(<expr pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:11">val</name> <operator pos:start="29:13" pos:end="29:14">!=</operator> <operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal> <operator pos:start="29:19" pos:end="29:20">&amp;&amp;</operator> <operator pos:start="29:22" pos:end="29:22">*</operator><name pos:start="29:23" pos:end="29:28">endptr</name> <operator pos:start="29:30" pos:end="29:31">==</operator> <literal type="char" pos:start="29:33" pos:end="29:36">'\0'</literal></expr>)</condition> <block pos:start="29:39" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:15">

        <expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><operator pos:start="31:9" pos:end="31:9">*</operator><name pos:start="31:10" pos:end="31:12">obj</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:18">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><call pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:17">processed</name><argument_list pos:start="33:18" pos:end="33:27">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">ov</name></expr></argument>, <argument pos:start="33:23" pos:end="33:26"><expr pos:start="33:23" pos:end="33:26"><name pos:start="33:23" pos:end="33:26">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:68"><expr pos:start="39:5" pos:end="41:67"><call pos:start="39:5" pos:end="41:67"><name pos:start="39:5" pos:end="39:13">error_set</name><argument_list pos:start="39:14" pos:end="41:67">(<argument pos:start="39:15" pos:end="39:18"><expr pos:start="39:15" pos:end="39:18"><name pos:start="39:15" pos:end="39:18">errp</name></expr></argument>, <argument pos:start="39:21" pos:end="39:48"><expr pos:start="39:21" pos:end="39:48"><name pos:start="39:21" pos:end="39:48">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="39:51" pos:end="39:59"><expr pos:start="39:51" pos:end="39:59"><name pos:start="39:51" pos:end="39:59"><name pos:start="39:51" pos:end="39:53">opt</name><operator pos:start="39:54" pos:end="39:55">-&gt;</operator><name pos:start="39:56" pos:end="39:59">name</name></name></expr></argument>,

              <argument pos:start="41:15" pos:end="41:66"><expr pos:start="41:15" pos:end="41:66"><literal type="string" pos:start="41:15" pos:end="41:66">"a size value representible as a non-negative int64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
