<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2969.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">swr_convert</name><parameter_list pos:start="1:16" pos:end="3:82">(<parameter pos:start="1:17" pos:end="1:36"><decl pos:start="1:17" pos:end="1:36"><type pos:start="1:17" pos:end="1:36"><name pos:start="1:17" pos:end="1:33"><name pos:start="1:17" pos:end="1:22">struct</name> <name pos:start="1:24" pos:end="1:33">SwrContext</name></name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:66"><decl pos:start="1:39" pos:end="1:66"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:45">uint8_t</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:66"><name pos:start="1:48" pos:end="1:54">out_arg</name><index pos:start="1:55" pos:end="1:66">[<expr pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:65">SWR_CH_MAX</name></expr>]</index></name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:81"><decl pos:start="1:69" pos:end="1:81"><type pos:start="1:69" pos:end="1:81"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:81">out_count</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:66"><decl pos:start="3:33" pos:end="3:66"><type pos:start="3:33" pos:end="3:53"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:45">uint8_t</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:66"><name pos:start="3:48" pos:end="3:53">in_arg</name> <index pos:start="3:55" pos:end="3:66">[<expr pos:start="3:56" pos:end="3:65"><name pos:start="3:56" pos:end="3:65">SWR_CH_MAX</name></expr>]</index></name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:81"><decl pos:start="3:69" pos:end="3:81"><type pos:start="3:69" pos:end="3:81"><name pos:start="3:69" pos:end="3:71">int</name></type>  <name pos:start="3:74" pos:end="3:81">in_count</name></decl></parameter>)</parameter_list><block pos:start="3:83" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">AudioData</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type> <name pos:start="5:17" pos:end="5:18">in</name><init pos:start="5:19" pos:end="5:26">= <expr pos:start="5:21" pos:end="5:26"><operator pos:start="5:21" pos:end="5:21">&amp;</operator><name pos:start="5:22" pos:end="5:26"><name pos:start="5:22" pos:end="5:22">s</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:26">in</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">AudioData</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">out</name><init pos:start="7:19" pos:end="7:27">= <expr pos:start="7:21" pos:end="7:27"><operator pos:start="7:21" pos:end="7:21">&amp;</operator><name pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:22">s</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:27">out</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:31">(<expr pos:start="11:9" pos:end="11:30"><operator pos:start="11:9" pos:end="11:9">!</operator><call pos:start="11:10" pos:end="11:30"><name pos:start="11:10" pos:end="11:27">swr_is_initialized</name><argument_list pos:start="11:28" pos:end="11:30">(<argument pos:start="11:29" pos:end="11:29"><expr pos:start="11:29" pos:end="11:29"><name pos:start="11:29" pos:end="11:29">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:33" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:31">

        <expr_stmt pos:start="13:9" pos:end="13:70"><expr pos:start="13:9" pos:end="13:69"><call pos:start="13:9" pos:end="13:69"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:69">(<argument pos:start="13:16" pos:end="13:16"><expr pos:start="13:16" pos:end="13:16"><name pos:start="13:16" pos:end="13:16">s</name></expr></argument>, <argument pos:start="13:19" pos:end="13:30"><expr pos:start="13:19" pos:end="13:30"><name pos:start="13:19" pos:end="13:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:33" pos:end="13:68"><expr pos:start="13:33" pos:end="13:68"><literal type="string" pos:start="13:33" pos:end="13:68">"Context has not been initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="21:5" pos:end="63:5">while<condition pos:start="21:10" pos:end="21:29">(<expr pos:start="21:11" pos:end="21:28"><name pos:start="21:11" pos:end="21:24"><name pos:start="21:11" pos:end="21:11">s</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:24">drop_output</name></name> <operator pos:start="21:26" pos:end="21:26">&gt;</operator> <literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr>)</condition><block pos:start="21:30" pos:end="63:5">{<block_content pos:start="23:9" pos:end="61:17">

        <decl_stmt pos:start="23:9" pos:end="23:16"><decl pos:start="23:9" pos:end="23:15"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="28:0"><decl pos:start="25:9" pos:end="25:36"><type pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:15">uint8_t</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:36"><name pos:start="25:18" pos:end="25:24">tmp_arg</name><index pos:start="25:25" pos:end="25:36">[<expr pos:start="25:26" pos:end="25:35"><name pos:start="25:26" pos:end="25:35">SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define pos:start="27:1" pos:end="27:27">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:21">MAX_DROP_STEP</name></cpp:macro> <cpp:value pos:start="27:23" pos:end="27:27">16384</cpp:value></cpp:define>

        <if_stmt pos:start="29:9" pos:end="31:23"><if pos:start="29:9" pos:end="31:23">if<condition pos:start="29:11" pos:end="29:91">(<expr pos:start="29:12" pos:end="29:90"><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:15">ret</name><operator pos:start="29:16" pos:end="29:16">=</operator><call pos:start="29:17" pos:end="29:87"><name pos:start="29:17" pos:end="29:34">swri_realloc_audio</name><argument_list pos:start="29:35" pos:end="29:87">(<argument pos:start="29:36" pos:end="29:48"><expr pos:start="29:36" pos:end="29:48"><operator pos:start="29:36" pos:end="29:36">&amp;</operator><name pos:start="29:37" pos:end="29:48"><name pos:start="29:37" pos:end="29:37">s</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:48">drop_temp</name></name></expr></argument>, <argument pos:start="29:51" pos:end="29:86"><expr pos:start="29:51" pos:end="29:86"><call pos:start="29:51" pos:end="29:86"><name pos:start="29:51" pos:end="29:55">FFMIN</name><argument_list pos:start="29:56" pos:end="29:86">(<argument pos:start="29:57" pos:end="29:70"><expr pos:start="29:57" pos:end="29:70"><name pos:start="29:57" pos:end="29:70"><name pos:start="29:57" pos:end="29:57">s</name><operator pos:start="29:58" pos:end="29:59">-&gt;</operator><name pos:start="29:60" pos:end="29:70">drop_output</name></name></expr></argument>, <argument pos:start="29:73" pos:end="29:85"><expr pos:start="29:73" pos:end="29:85"><name pos:start="29:73" pos:end="29:85">MAX_DROP_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="29:88" pos:end="29:88">)</operator><operator pos:start="29:89" pos:end="29:89">&lt;</operator><literal type="number" pos:start="29:90" pos:end="29:90">0</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:23"><block_content pos:start="31:13" pos:end="31:23">

            <return pos:start="31:13" pos:end="31:23">return <expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:54"><expr pos:start="35:9" pos:end="35:53"><call pos:start="35:9" pos:end="35:53"><name pos:start="35:9" pos:end="35:29">reversefill_audiodata</name><argument_list pos:start="35:30" pos:end="35:53">(<argument pos:start="35:31" pos:end="35:43"><expr pos:start="35:31" pos:end="35:43"><operator pos:start="35:31" pos:end="35:31">&amp;</operator><name pos:start="35:32" pos:end="35:43"><name pos:start="35:32" pos:end="35:32">s</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:43">drop_temp</name></name></expr></argument>, <argument pos:start="35:46" pos:end="35:52"><expr pos:start="35:46" pos:end="35:52"><name pos:start="35:46" pos:end="35:52">tmp_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:22">drop_output</name></name> <operator pos:start="37:24" pos:end="37:25">*=</operator> <operator pos:start="37:27" pos:end="37:27">-</operator><literal type="number" pos:start="37:28" pos:end="37:28">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="37:31" pos:end="37:66">//FIXME find a less hackish solution</comment>

        <expr_stmt pos:start="39:9" pos:end="39:95"><expr pos:start="39:9" pos:end="39:94"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:94"><name pos:start="39:15" pos:end="39:25">swr_convert</name><argument_list pos:start="39:26" pos:end="39:94">(<argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><name pos:start="39:27" pos:end="39:27">s</name></expr></argument>, <argument pos:start="39:30" pos:end="39:36"><expr pos:start="39:30" pos:end="39:36"><name pos:start="39:30" pos:end="39:36">tmp_arg</name></expr></argument>, <argument pos:start="39:39" pos:end="39:75"><expr pos:start="39:39" pos:end="39:75"><call pos:start="39:39" pos:end="39:75"><name pos:start="39:39" pos:end="39:43">FFMIN</name><argument_list pos:start="39:44" pos:end="39:75">(<argument pos:start="39:45" pos:end="39:59"><expr pos:start="39:45" pos:end="39:59"><operator pos:start="39:45" pos:end="39:45">-</operator><name pos:start="39:46" pos:end="39:59"><name pos:start="39:46" pos:end="39:46">s</name><operator pos:start="39:47" pos:end="39:48">-&gt;</operator><name pos:start="39:49" pos:end="39:59">drop_output</name></name></expr></argument>, <argument pos:start="39:62" pos:end="39:74"><expr pos:start="39:62" pos:end="39:74"><name pos:start="39:62" pos:end="39:74">MAX_DROP_STEP</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:78" pos:end="39:83"><expr pos:start="39:78" pos:end="39:83"><name pos:start="39:78" pos:end="39:83">in_arg</name></expr></argument>, <argument pos:start="39:86" pos:end="39:93"><expr pos:start="39:86" pos:end="39:93"><name pos:start="39:86" pos:end="39:93">in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="39:97" pos:end="39:175">//FIXME optimize but this is as good as never called so maybe it doesn't matter</comment>

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:22">drop_output</name></name> <operator pos:start="41:24" pos:end="41:25">*=</operator> <operator pos:start="41:27" pos:end="41:27">-</operator><literal type="number" pos:start="41:28" pos:end="41:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:21"><expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:16">in_count</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if<condition pos:start="45:11" pos:end="45:17">(<expr pos:start="45:12" pos:end="45:16"><name pos:start="45:12" pos:end="45:14">ret</name><operator pos:start="45:15" pos:end="45:15">&gt;</operator><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>)</condition> <block pos:start="45:19" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:21">

            <expr_stmt pos:start="47:13" pos:end="47:34"><expr pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:26">drop_output</name></name> <operator pos:start="47:28" pos:end="47:29">-=</operator> <name pos:start="47:31" pos:end="47:33">ret</name></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="51:25"><if pos:start="49:13" pos:end="51:25">if <condition pos:start="49:16" pos:end="49:44">(<expr pos:start="49:17" pos:end="49:43"><operator pos:start="49:17" pos:end="49:17">!</operator><name pos:start="49:18" pos:end="49:31"><name pos:start="49:18" pos:end="49:18">s</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:31">drop_output</name></name> <operator pos:start="49:33" pos:end="49:34">&amp;&amp;</operator> <operator pos:start="49:36" pos:end="49:36">!</operator><name pos:start="49:37" pos:end="49:43">out_arg</name></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:25"><block_content pos:start="51:17" pos:end="51:25">

                <return pos:start="51:17" pos:end="51:25">return <expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <continue pos:start="53:13" pos:end="53:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><call pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:18">av_assert0</name><argument_list pos:start="59:19" pos:end="59:34">(<argument pos:start="59:20" pos:end="59:33"><expr pos:start="59:20" pos:end="59:33"><name pos:start="59:20" pos:end="59:33"><name pos:start="59:20" pos:end="59:20">s</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:33">drop_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>;</return>

    </block_content>}</block></while>



    <if_stmt pos:start="67:5" pos:end="87:44"><if pos:start="67:5" pos:end="85:5">if<condition pos:start="67:7" pos:end="67:15">(<expr pos:start="67:8" pos:end="67:14"><operator pos:start="67:8" pos:end="67:8">!</operator><name pos:start="67:9" pos:end="67:14">in_arg</name></expr>)</condition><block pos:start="67:16" pos:end="85:5">{<block_content pos:start="69:9" pos:end="83:9">

        <if_stmt pos:start="69:9" pos:end="83:9"><if pos:start="69:9" pos:end="79:9">if<condition pos:start="69:11" pos:end="69:23">(<expr pos:start="69:12" pos:end="69:22"><name pos:start="69:12" pos:end="69:22"><name pos:start="69:12" pos:end="69:12">s</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:22">resample</name></name></expr>)</condition><block pos:start="69:24" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:27">

            <if_stmt pos:start="71:13" pos:end="73:39"><if pos:start="71:13" pos:end="73:39">if <condition pos:start="71:16" pos:end="71:28">(<expr pos:start="71:17" pos:end="71:27"><operator pos:start="71:17" pos:end="71:17">!</operator><name pos:start="71:18" pos:end="71:27"><name pos:start="71:18" pos:end="71:18">s</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:27">flushed</name></name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:39"><block_content pos:start="73:17" pos:end="73:39">

                <expr_stmt pos:start="73:17" pos:end="73:39"><expr pos:start="73:17" pos:end="73:38"><call pos:start="73:17" pos:end="73:38"><name pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:28">resampler</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:35">flush</name></name><argument_list pos:start="73:36" pos:end="73:38">(<argument pos:start="73:37" pos:end="73:37"><expr pos:start="73:37" pos:end="73:37"><name pos:start="73:37" pos:end="73:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:42"><expr pos:start="75:13" pos:end="75:41"><name pos:start="75:13" pos:end="75:37"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:37">resample_in_constraint</name></name> <operator pos:start="75:39" pos:end="75:39">=</operator> <literal type="number" pos:start="75:41" pos:end="75:41">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:27"><expr pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:22">flushed</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <literal type="number" pos:start="77:26" pos:end="77:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="79:10" pos:end="83:9">else if<condition pos:start="79:17" pos:end="79:37">(<expr pos:start="79:18" pos:end="79:36"><operator pos:start="79:18" pos:end="79:18">!</operator><name pos:start="79:19" pos:end="79:36"><name pos:start="79:19" pos:end="79:19">s</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:36">in_buffer_count</name></name></expr>)</condition><block pos:start="79:38" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:21">

            <return pos:start="81:13" pos:end="81:21">return <expr pos:start="81:20" pos:end="81:20"><literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if><else pos:start="85:6" pos:end="87:44">else<block type="pseudo" pos:start="87:9" pos:end="87:44"><block_content pos:start="87:9" pos:end="87:44">

        <expr_stmt pos:start="87:9" pos:end="87:44"><expr pos:start="87:9" pos:end="87:43"><call pos:start="87:9" pos:end="87:43"><name pos:start="87:9" pos:end="87:22">fill_audiodata</name><argument_list pos:start="87:23" pos:end="87:43">(<argument pos:start="87:24" pos:end="87:25"><expr pos:start="87:24" pos:end="87:25"><name pos:start="87:24" pos:end="87:25">in</name></expr></argument> ,  <argument pos:start="87:30" pos:end="87:42"><expr pos:start="87:30" pos:end="87:42"><operator pos:start="87:30" pos:end="87:30">(</operator><name pos:start="87:31" pos:end="87:34">void</name><operator pos:start="87:35" pos:end="87:35">*</operator><operator pos:start="87:36" pos:end="87:36">)</operator><name pos:start="87:37" pos:end="87:42">in_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:33"><expr pos:start="91:5" pos:end="91:32"><call pos:start="91:5" pos:end="91:32"><name pos:start="91:5" pos:end="91:18">fill_audiodata</name><argument_list pos:start="91:19" pos:end="91:32">(<argument pos:start="91:20" pos:end="91:22"><expr pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">out</name></expr></argument>, <argument pos:start="91:25" pos:end="91:31"><expr pos:start="91:25" pos:end="91:31"><name pos:start="91:25" pos:end="91:31">out_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="207:5"><if pos:start="95:5" pos:end="105:5">if<condition pos:start="95:7" pos:end="95:19">(<expr pos:start="95:8" pos:end="95:18"><name pos:start="95:8" pos:end="95:18"><name pos:start="95:8" pos:end="95:8">s</name><operator pos:start="95:9" pos:end="95:10">-&gt;</operator><name pos:start="95:11" pos:end="95:18">resample</name></name></expr>)</condition><block pos:start="95:20" pos:end="105:5">{<block_content pos:start="97:9" pos:end="103:19">

        <decl_stmt pos:start="97:9" pos:end="97:72"><decl pos:start="97:9" pos:end="97:71"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:15">ret</name> <init pos:start="97:17" pos:end="97:71">= <expr pos:start="97:19" pos:end="97:71"><call pos:start="97:19" pos:end="97:71"><name pos:start="97:19" pos:end="97:38">swr_convert_internal</name><argument_list pos:start="97:39" pos:end="97:71">(<argument pos:start="97:40" pos:end="97:40"><expr pos:start="97:40" pos:end="97:40"><name pos:start="97:40" pos:end="97:40">s</name></expr></argument>, <argument pos:start="97:43" pos:end="97:45"><expr pos:start="97:43" pos:end="97:45"><name pos:start="97:43" pos:end="97:45">out</name></expr></argument>, <argument pos:start="97:48" pos:end="97:56"><expr pos:start="97:48" pos:end="97:56"><name pos:start="97:48" pos:end="97:56">out_count</name></expr></argument>, <argument pos:start="97:59" pos:end="97:60"><expr pos:start="97:59" pos:end="97:60"><name pos:start="97:59" pos:end="97:60">in</name></expr></argument>, <argument pos:start="97:63" pos:end="97:70"><expr pos:start="97:63" pos:end="97:70"><name pos:start="97:63" pos:end="97:70">in_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="99:9" pos:end="101:58"><if pos:start="99:9" pos:end="101:58">if<condition pos:start="99:11" pos:end="99:36">(<expr pos:start="99:12" pos:end="99:35"><name pos:start="99:12" pos:end="99:14">ret</name><operator pos:start="99:15" pos:end="99:15">&gt;</operator><literal type="number" pos:start="99:16" pos:end="99:16">0</literal> <operator pos:start="99:18" pos:end="99:19">&amp;&amp;</operator> <operator pos:start="99:21" pos:end="99:21">!</operator><name pos:start="99:22" pos:end="99:35"><name pos:start="99:22" pos:end="99:22">s</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:35">drop_output</name></name></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:58"><block_content pos:start="101:13" pos:end="101:58">

            <expr_stmt pos:start="101:13" pos:end="101:58"><expr pos:start="101:13" pos:end="101:57"><name pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:21">outpts</name></name> <operator pos:start="101:23" pos:end="101:24">+=</operator> <name pos:start="101:26" pos:end="101:28">ret</name> <operator pos:start="101:30" pos:end="101:30">*</operator> <operator pos:start="101:32" pos:end="101:32">(</operator><name pos:start="101:33" pos:end="101:39">int64_t</name><operator pos:start="101:40" pos:end="101:40">)</operator><name pos:start="101:41" pos:end="101:57"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:57">in_sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="103:9" pos:end="103:19">return <expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ret</name></expr>;</return>

    </block_content>}</block></if><else pos:start="105:6" pos:end="207:5">else<block pos:start="105:10" pos:end="207:5">{<block_content pos:start="107:9" pos:end="205:20">

        <decl_stmt pos:start="107:9" pos:end="107:27"><decl pos:start="107:9" pos:end="107:26"><type pos:start="107:9" pos:end="107:17"><name pos:start="107:9" pos:end="107:17">AudioData</name></type> <name pos:start="107:19" pos:end="107:21">tmp</name><init pos:start="107:22" pos:end="107:26">= <expr pos:start="107:24" pos:end="107:26"><operator pos:start="107:24" pos:end="107:24">*</operator><name pos:start="107:25" pos:end="107:26">in</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:19"><decl pos:start="109:9" pos:end="109:18"><type pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">int</name></type> <name pos:start="109:13" pos:end="109:16">ret2</name><init pos:start="109:17" pos:end="109:18">=<expr pos:start="109:18" pos:end="109:18"><literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:22"><decl pos:start="111:9" pos:end="111:15"><type pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">int</name></type> <name pos:start="111:13" pos:end="111:15">ret</name></decl>, <decl pos:start="111:18" pos:end="111:21"><type ref="prev" pos:start="111:9" pos:end="111:11"/><name pos:start="111:18" pos:end="111:21">size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:52"><expr pos:start="113:9" pos:end="113:51"><name pos:start="113:9" pos:end="113:12">size</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:51"><name pos:start="113:16" pos:end="113:20">FFMIN</name><argument_list pos:start="113:21" pos:end="113:51">(<argument pos:start="113:22" pos:end="113:30"><expr pos:start="113:22" pos:end="113:30"><name pos:start="113:22" pos:end="113:30">out_count</name></expr></argument>, <argument pos:start="113:33" pos:end="113:50"><expr pos:start="113:33" pos:end="113:50"><name pos:start="113:33" pos:end="113:50"><name pos:start="113:33" pos:end="113:33">s</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:50">in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="139:9"><if pos:start="115:9" pos:end="139:9">if<condition pos:start="115:11" pos:end="115:16">(<expr pos:start="115:12" pos:end="115:15"><name pos:start="115:12" pos:end="115:15">size</name></expr>)</condition><block pos:start="115:17" pos:end="139:9">{<block_content pos:start="117:13" pos:end="137:39">

            <expr_stmt pos:start="117:13" pos:end="117:61"><expr pos:start="117:13" pos:end="117:60"><call pos:start="117:13" pos:end="117:60"><name pos:start="117:13" pos:end="117:19">buf_set</name><argument_list pos:start="117:20" pos:end="117:60">(<argument pos:start="117:21" pos:end="117:24"><expr pos:start="117:21" pos:end="117:24"><operator pos:start="117:21" pos:end="117:21">&amp;</operator><name pos:start="117:22" pos:end="117:24">tmp</name></expr></argument>, <argument pos:start="117:27" pos:end="117:39"><expr pos:start="117:27" pos:end="117:39"><operator pos:start="117:27" pos:end="117:27">&amp;</operator><name pos:start="117:28" pos:end="117:39"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:39">in_buffer</name></name></expr></argument>, <argument pos:start="117:42" pos:end="117:59"><expr pos:start="117:42" pos:end="117:59"><name pos:start="117:42" pos:end="117:59"><name pos:start="117:42" pos:end="117:42">s</name><operator pos:start="117:43" pos:end="117:44">-&gt;</operator><name pos:start="117:45" pos:end="117:59">in_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:64"><expr pos:start="119:13" pos:end="119:63"><name pos:start="119:13" pos:end="119:15">ret</name><operator pos:start="119:16" pos:end="119:16">=</operator> <call pos:start="119:18" pos:end="119:63"><name pos:start="119:18" pos:end="119:37">swr_convert_internal</name><argument_list pos:start="119:38" pos:end="119:63">(<argument pos:start="119:39" pos:end="119:39"><expr pos:start="119:39" pos:end="119:39"><name pos:start="119:39" pos:end="119:39">s</name></expr></argument>, <argument pos:start="119:42" pos:end="119:44"><expr pos:start="119:42" pos:end="119:44"><name pos:start="119:42" pos:end="119:44">out</name></expr></argument>, <argument pos:start="119:47" pos:end="119:50"><expr pos:start="119:47" pos:end="119:50"><name pos:start="119:47" pos:end="119:50">size</name></expr></argument>, <argument pos:start="119:53" pos:end="119:56"><expr pos:start="119:53" pos:end="119:56"><operator pos:start="119:53" pos:end="119:53">&amp;</operator><name pos:start="119:54" pos:end="119:56">tmp</name></expr></argument>, <argument pos:start="119:59" pos:end="119:62"><expr pos:start="119:59" pos:end="119:62"><name pos:start="119:59" pos:end="119:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="123:27"><if pos:start="121:13" pos:end="123:27">if<condition pos:start="121:15" pos:end="121:21">(<expr pos:start="121:16" pos:end="121:20"><name pos:start="121:16" pos:end="121:18">ret</name><operator pos:start="121:19" pos:end="121:19">&lt;</operator><literal type="number" pos:start="121:20" pos:end="121:20">0</literal></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:27"><block_content pos:start="123:17" pos:end="123:27">

                <return pos:start="123:17" pos:end="123:27">return <expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:22"><expr pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:16">ret2</name><operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:21">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:38"><expr pos:start="127:13" pos:end="127:37"><name pos:start="127:13" pos:end="127:30"><name pos:start="127:13" pos:end="127:13">s</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:30">in_buffer_count</name></name> <operator pos:start="127:32" pos:end="127:33">-=</operator> <name pos:start="127:35" pos:end="127:37">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:38"><expr pos:start="129:13" pos:end="129:37"><name pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:13">s</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:30">in_buffer_index</name></name> <operator pos:start="129:32" pos:end="129:33">+=</operator> <name pos:start="129:35" pos:end="129:37">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:35"><expr pos:start="131:13" pos:end="131:34"><call pos:start="131:13" pos:end="131:34"><name pos:start="131:13" pos:end="131:19">buf_set</name><argument_list pos:start="131:20" pos:end="131:34">(<argument pos:start="131:21" pos:end="131:23"><expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">out</name></expr></argument>, <argument pos:start="131:26" pos:end="131:28"><expr pos:start="131:26" pos:end="131:28"><name pos:start="131:26" pos:end="131:28">out</name></expr></argument>, <argument pos:start="131:31" pos:end="131:33"><expr pos:start="131:31" pos:end="131:33"><name pos:start="131:31" pos:end="131:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:29"><expr pos:start="133:13" pos:end="133:28"><name pos:start="133:13" pos:end="133:21">out_count</name> <operator pos:start="133:23" pos:end="133:24">-=</operator> <name pos:start="133:26" pos:end="133:28">ret</name></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="137:39"><if pos:start="135:13" pos:end="137:39">if<condition pos:start="135:15" pos:end="135:35">(<expr pos:start="135:16" pos:end="135:34"><operator pos:start="135:16" pos:end="135:16">!</operator><name pos:start="135:17" pos:end="135:34"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:34">in_buffer_count</name></name></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:39"><block_content pos:start="137:17" pos:end="137:39">

                <expr_stmt pos:start="137:17" pos:end="137:39"><expr pos:start="137:17" pos:end="137:38"><name pos:start="137:17" pos:end="137:34"><name pos:start="137:17" pos:end="137:17">s</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:34">in_buffer_index</name></name> <operator pos:start="137:36" pos:end="137:36">=</operator> <literal type="number" pos:start="137:38" pos:end="137:38">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="143:9" pos:end="199:9"><if pos:start="143:9" pos:end="199:9">if<condition pos:start="143:11" pos:end="143:20">(<expr pos:start="143:12" pos:end="143:19"><name pos:start="143:12" pos:end="143:19">in_count</name></expr>)</condition><block pos:start="143:21" pos:end="199:9">{<block_content pos:start="145:13" pos:end="197:13">

            <expr_stmt pos:start="145:13" pos:end="145:81"><expr pos:start="145:13" pos:end="145:80"><name pos:start="145:13" pos:end="145:16">size</name><operator pos:start="145:17" pos:end="145:17">=</operator> <name pos:start="145:19" pos:end="145:36"><name pos:start="145:19" pos:end="145:19">s</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:36">in_buffer_index</name></name> <operator pos:start="145:38" pos:end="145:38">+</operator> <name pos:start="145:40" pos:end="145:57"><name pos:start="145:40" pos:end="145:40">s</name><operator pos:start="145:41" pos:end="145:42">-&gt;</operator><name pos:start="145:43" pos:end="145:57">in_buffer_count</name></name> <operator pos:start="145:59" pos:end="145:59">+</operator> <name pos:start="145:61" pos:end="145:68">in_count</name> <operator pos:start="145:70" pos:end="145:70">-</operator> <name pos:start="145:72" pos:end="145:80">out_count</name></expr>;</expr_stmt>



            <if_stmt pos:start="149:13" pos:end="167:13"><if pos:start="149:13" pos:end="167:13">if<condition pos:start="149:15" pos:end="149:36">(<expr pos:start="149:16" pos:end="149:35"><name pos:start="149:16" pos:end="149:23">in_count</name> <operator pos:start="149:25" pos:end="149:25">&gt;</operator> <name pos:start="149:27" pos:end="149:35">out_count</name></expr>)</condition> <block pos:start="149:38" pos:end="167:13">{<block_content pos:start="151:17" pos:end="165:35"> <comment type="line" pos:start="149:40" pos:end="149:78">//FIXME move after swr_convert_internal</comment>

                <if_stmt pos:start="151:17" pos:end="165:35"><if pos:start="151:17" pos:end="161:17">if<condition pos:start="151:19" pos:end="153:83">(   <expr pos:start="151:23" pos:end="153:82"><name pos:start="151:23" pos:end="151:26">size</name> <operator pos:start="151:28" pos:end="151:28">&gt;</operator> <name pos:start="151:30" pos:end="151:47"><name pos:start="151:30" pos:end="151:30">s</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:41">in_buffer</name><operator pos:start="151:42" pos:end="151:42">.</operator><name pos:start="151:43" pos:end="151:47">count</name></name>

                <operator pos:start="153:17" pos:end="153:18">&amp;&amp;</operator> <name pos:start="153:20" pos:end="153:37"><name pos:start="153:20" pos:end="153:20">s</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:37">in_buffer_count</name></name> <operator pos:start="153:39" pos:end="153:39">+</operator> <name pos:start="153:41" pos:end="153:48">in_count</name> <operator pos:start="153:50" pos:end="153:50">-</operator> <name pos:start="153:52" pos:end="153:60">out_count</name> <operator pos:start="153:62" pos:end="153:63">&lt;=</operator> <name pos:start="153:65" pos:end="153:82"><name pos:start="153:65" pos:end="153:65">s</name><operator pos:start="153:66" pos:end="153:67">-&gt;</operator><name pos:start="153:68" pos:end="153:82">in_buffer_index</name></name></expr>)</condition><block pos:start="153:84" pos:end="161:17">{<block_content pos:start="155:21" pos:end="159:41">

                    <expr_stmt pos:start="155:21" pos:end="155:69"><expr pos:start="155:21" pos:end="155:68"><call pos:start="155:21" pos:end="155:68"><name pos:start="155:21" pos:end="155:27">buf_set</name><argument_list pos:start="155:28" pos:end="155:68">(<argument pos:start="155:29" pos:end="155:32"><expr pos:start="155:29" pos:end="155:32"><operator pos:start="155:29" pos:end="155:29">&amp;</operator><name pos:start="155:30" pos:end="155:32">tmp</name></expr></argument>, <argument pos:start="155:35" pos:end="155:47"><expr pos:start="155:35" pos:end="155:47"><operator pos:start="155:35" pos:end="155:35">&amp;</operator><name pos:start="155:36" pos:end="155:47"><name pos:start="155:36" pos:end="155:36">s</name><operator pos:start="155:37" pos:end="155:38">-&gt;</operator><name pos:start="155:39" pos:end="155:47">in_buffer</name></name></expr></argument>, <argument pos:start="155:50" pos:end="155:67"><expr pos:start="155:50" pos:end="155:67"><name pos:start="155:50" pos:end="155:67"><name pos:start="155:50" pos:end="155:50">s</name><operator pos:start="155:51" pos:end="155:52">-&gt;</operator><name pos:start="155:53" pos:end="155:67">in_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:66"><expr pos:start="157:21" pos:end="157:65"><call pos:start="157:21" pos:end="157:65"><name pos:start="157:21" pos:end="157:24">copy</name><argument_list pos:start="157:25" pos:end="157:65">(<argument pos:start="157:26" pos:end="157:38"><expr pos:start="157:26" pos:end="157:38"><operator pos:start="157:26" pos:end="157:26">&amp;</operator><name pos:start="157:27" pos:end="157:38"><name pos:start="157:27" pos:end="157:27">s</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:38">in_buffer</name></name></expr></argument>, <argument pos:start="157:41" pos:end="157:44"><expr pos:start="157:41" pos:end="157:44"><operator pos:start="157:41" pos:end="157:41">&amp;</operator><name pos:start="157:42" pos:end="157:44">tmp</name></expr></argument>, <argument pos:start="157:47" pos:end="157:64"><expr pos:start="157:47" pos:end="157:64"><name pos:start="157:47" pos:end="157:64"><name pos:start="157:47" pos:end="157:47">s</name><operator pos:start="157:48" pos:end="157:49">-&gt;</operator><name pos:start="157:50" pos:end="157:64">in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="159:21" pos:end="159:41"><expr pos:start="159:21" pos:end="159:40"><name pos:start="159:21" pos:end="159:38"><name pos:start="159:21" pos:end="159:21">s</name><operator pos:start="159:22" pos:end="159:23">-&gt;</operator><name pos:start="159:24" pos:end="159:38">in_buffer_index</name></name><operator pos:start="159:39" pos:end="159:39">=</operator><literal type="number" pos:start="159:40" pos:end="159:40">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="161:18" pos:end="165:35">else

                    if<condition pos:start="163:23" pos:end="163:73">(<expr pos:start="163:24" pos:end="163:72"><operator pos:start="163:24" pos:end="163:24">(</operator><name pos:start="163:25" pos:end="163:27">ret</name><operator pos:start="163:28" pos:end="163:28">=</operator><call pos:start="163:29" pos:end="163:67"><name pos:start="163:29" pos:end="163:46">swri_realloc_audio</name><argument_list pos:start="163:47" pos:end="163:67">(<argument pos:start="163:48" pos:end="163:60"><expr pos:start="163:48" pos:end="163:60"><operator pos:start="163:48" pos:end="163:48">&amp;</operator><name pos:start="163:49" pos:end="163:60"><name pos:start="163:49" pos:end="163:49">s</name><operator pos:start="163:50" pos:end="163:51">-&gt;</operator><name pos:start="163:52" pos:end="163:60">in_buffer</name></name></expr></argument>, <argument pos:start="163:63" pos:end="163:66"><expr pos:start="163:63" pos:end="163:66"><name pos:start="163:63" pos:end="163:66">size</name></expr></argument>)</argument_list></call><operator pos:start="163:68" pos:end="163:68">)</operator> <operator pos:start="163:70" pos:end="163:70">&lt;</operator> <literal type="number" pos:start="163:72" pos:end="163:72">0</literal></expr>)</condition><block type="pseudo" pos:start="165:25" pos:end="165:35"><block_content pos:start="165:25" pos:end="165:35">

                        <return pos:start="165:25" pos:end="165:35">return <expr pos:start="165:32" pos:end="165:34"><name pos:start="165:32" pos:end="165:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="171:13" pos:end="187:13"><if pos:start="171:13" pos:end="187:13">if<condition pos:start="171:15" pos:end="171:25">(<expr pos:start="171:16" pos:end="171:24"><name pos:start="171:16" pos:end="171:24">out_count</name></expr>)</condition><block pos:start="171:26" pos:end="187:13">{<block_content pos:start="173:17" pos:end="185:28">

                <expr_stmt pos:start="173:17" pos:end="173:50"><expr pos:start="173:17" pos:end="173:49"><name pos:start="173:17" pos:end="173:20">size</name> <operator pos:start="173:22" pos:end="173:22">=</operator> <call pos:start="173:24" pos:end="173:49"><name pos:start="173:24" pos:end="173:28">FFMIN</name><argument_list pos:start="173:29" pos:end="173:49">(<argument pos:start="173:30" pos:end="173:37"><expr pos:start="173:30" pos:end="173:37"><name pos:start="173:30" pos:end="173:37">in_count</name></expr></argument>, <argument pos:start="173:40" pos:end="173:48"><expr pos:start="173:40" pos:end="173:48"><name pos:start="173:40" pos:end="173:48">out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:66"><expr pos:start="175:17" pos:end="175:65"><name pos:start="175:17" pos:end="175:19">ret</name><operator pos:start="175:20" pos:end="175:20">=</operator> <call pos:start="175:22" pos:end="175:65"><name pos:start="175:22" pos:end="175:41">swr_convert_internal</name><argument_list pos:start="175:42" pos:end="175:65">(<argument pos:start="175:43" pos:end="175:43"><expr pos:start="175:43" pos:end="175:43"><name pos:start="175:43" pos:end="175:43">s</name></expr></argument>, <argument pos:start="175:46" pos:end="175:48"><expr pos:start="175:46" pos:end="175:48"><name pos:start="175:46" pos:end="175:48">out</name></expr></argument>, <argument pos:start="175:51" pos:end="175:54"><expr pos:start="175:51" pos:end="175:54"><name pos:start="175:51" pos:end="175:54">size</name></expr></argument>, <argument pos:start="175:57" pos:end="175:58"><expr pos:start="175:57" pos:end="175:58"><name pos:start="175:57" pos:end="175:58">in</name></expr></argument>, <argument pos:start="175:61" pos:end="175:64"><expr pos:start="175:61" pos:end="175:64"><name pos:start="175:61" pos:end="175:64">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="177:17" pos:end="179:31"><if pos:start="177:17" pos:end="179:31">if<condition pos:start="177:19" pos:end="177:25">(<expr pos:start="177:20" pos:end="177:24"><name pos:start="177:20" pos:end="177:22">ret</name><operator pos:start="177:23" pos:end="177:23">&lt;</operator><literal type="number" pos:start="177:24" pos:end="177:24">0</literal></expr>)</condition><block type="pseudo" pos:start="179:21" pos:end="179:31"><block_content pos:start="179:21" pos:end="179:31">

                    <return pos:start="179:21" pos:end="179:31">return <expr pos:start="179:28" pos:end="179:30"><name pos:start="179:28" pos:end="179:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:37"><expr pos:start="181:17" pos:end="181:36"><call pos:start="181:17" pos:end="181:36"><name pos:start="181:17" pos:end="181:23">buf_set</name><argument_list pos:start="181:24" pos:end="181:36">(<argument pos:start="181:25" pos:end="181:26"><expr pos:start="181:25" pos:end="181:26"><name pos:start="181:25" pos:end="181:26">in</name></expr></argument>, <argument pos:start="181:29" pos:end="181:30"><expr pos:start="181:29" pos:end="181:30"><name pos:start="181:29" pos:end="181:30">in</name></expr></argument>, <argument pos:start="181:33" pos:end="181:35"><expr pos:start="181:33" pos:end="181:35"><name pos:start="181:33" pos:end="181:35">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:32"><expr pos:start="183:17" pos:end="183:31"><name pos:start="183:17" pos:end="183:24">in_count</name> <operator pos:start="183:26" pos:end="183:27">-=</operator> <name pos:start="183:29" pos:end="183:31">ret</name></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:28"><expr pos:start="185:17" pos:end="185:27"><name pos:start="185:17" pos:end="185:20">ret2</name> <operator pos:start="185:22" pos:end="185:23">+=</operator> <name pos:start="185:25" pos:end="185:27">ret</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="189:13" pos:end="197:13"><if pos:start="189:13" pos:end="197:13">if<condition pos:start="189:15" pos:end="189:24">(<expr pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:23">in_count</name></expr>)</condition><block pos:start="189:25" pos:end="197:13">{<block_content pos:start="191:17" pos:end="195:47">

                <expr_stmt pos:start="191:17" pos:end="191:86"><expr pos:start="191:17" pos:end="191:85"><call pos:start="191:17" pos:end="191:85"><name pos:start="191:17" pos:end="191:23">buf_set</name><argument_list pos:start="191:24" pos:end="191:85">(<argument pos:start="191:25" pos:end="191:28"><expr pos:start="191:25" pos:end="191:28"><operator pos:start="191:25" pos:end="191:25">&amp;</operator><name pos:start="191:26" pos:end="191:28">tmp</name></expr></argument>, <argument pos:start="191:31" pos:end="191:43"><expr pos:start="191:31" pos:end="191:43"><operator pos:start="191:31" pos:end="191:31">&amp;</operator><name pos:start="191:32" pos:end="191:43"><name pos:start="191:32" pos:end="191:32">s</name><operator pos:start="191:33" pos:end="191:34">-&gt;</operator><name pos:start="191:35" pos:end="191:43">in_buffer</name></name></expr></argument>, <argument pos:start="191:46" pos:end="191:84"><expr pos:start="191:46" pos:end="191:84"><name pos:start="191:46" pos:end="191:63"><name pos:start="191:46" pos:end="191:46">s</name><operator pos:start="191:47" pos:end="191:48">-&gt;</operator><name pos:start="191:49" pos:end="191:63">in_buffer_index</name></name> <operator pos:start="191:65" pos:end="191:65">+</operator> <name pos:start="191:67" pos:end="191:84"><name pos:start="191:67" pos:end="191:67">s</name><operator pos:start="191:68" pos:end="191:69">-&gt;</operator><name pos:start="191:70" pos:end="191:84">in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:41"><expr pos:start="193:17" pos:end="193:40"><call pos:start="193:17" pos:end="193:40"><name pos:start="193:17" pos:end="193:20">copy</name><argument_list pos:start="193:21" pos:end="193:40">(<argument pos:start="193:22" pos:end="193:25"><expr pos:start="193:22" pos:end="193:25"><operator pos:start="193:22" pos:end="193:22">&amp;</operator><name pos:start="193:23" pos:end="193:25">tmp</name></expr></argument>, <argument pos:start="193:28" pos:end="193:29"><expr pos:start="193:28" pos:end="193:29"><name pos:start="193:28" pos:end="193:29">in</name></expr></argument>, <argument pos:start="193:32" pos:end="193:39"><expr pos:start="193:32" pos:end="193:39"><name pos:start="193:32" pos:end="193:39">in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:47"><expr pos:start="195:17" pos:end="195:46"><name pos:start="195:17" pos:end="195:34"><name pos:start="195:17" pos:end="195:17">s</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:34">in_buffer_count</name></name> <operator pos:start="195:36" pos:end="195:37">+=</operator> <name pos:start="195:39" pos:end="195:46">in_count</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="201:9" pos:end="203:59"><if pos:start="201:9" pos:end="203:59">if<condition pos:start="201:11" pos:end="201:37">(<expr pos:start="201:12" pos:end="201:36"><name pos:start="201:12" pos:end="201:15">ret2</name><operator pos:start="201:16" pos:end="201:16">&gt;</operator><literal type="number" pos:start="201:17" pos:end="201:17">0</literal> <operator pos:start="201:19" pos:end="201:20">&amp;&amp;</operator> <operator pos:start="201:22" pos:end="201:22">!</operator><name pos:start="201:23" pos:end="201:36"><name pos:start="201:23" pos:end="201:23">s</name><operator pos:start="201:24" pos:end="201:25">-&gt;</operator><name pos:start="201:26" pos:end="201:36">drop_output</name></name></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="203:59"><block_content pos:start="203:13" pos:end="203:59">

            <expr_stmt pos:start="203:13" pos:end="203:59"><expr pos:start="203:13" pos:end="203:58"><name pos:start="203:13" pos:end="203:21"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:21">outpts</name></name> <operator pos:start="203:23" pos:end="203:24">+=</operator> <name pos:start="203:26" pos:end="203:29">ret2</name> <operator pos:start="203:31" pos:end="203:31">*</operator> <operator pos:start="203:33" pos:end="203:33">(</operator><name pos:start="203:34" pos:end="203:40">int64_t</name><operator pos:start="203:41" pos:end="203:41">)</operator><name pos:start="203:42" pos:end="203:58"><name pos:start="203:42" pos:end="203:42">s</name><operator pos:start="203:43" pos:end="203:44">-&gt;</operator><name pos:start="203:45" pos:end="203:58">in_sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="205:9" pos:end="205:20">return <expr pos:start="205:16" pos:end="205:19"><name pos:start="205:16" pos:end="205:19">ret2</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
