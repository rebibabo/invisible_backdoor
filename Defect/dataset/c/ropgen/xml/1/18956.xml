<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18956.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vhdx_open</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="233:1">{<block_content pos:start="7:5" pos:end="231:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVVHDXState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">signature</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:20">log_flushed</name> <init pos:start="15:22" pos:end="15:28">= <expr pos:start="15:24" pos:end="15:28"><name pos:start="15:24" pos:end="15:28">false</name></expr></init></decl>;</decl_stmt>





    <expr_stmt pos:start="21:5" pos:end="21:18"><expr pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:10">bat</name></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:26">first_visible_write</name></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <name pos:start="23:30" pos:end="23:33">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:22">qemu_co_mutex_init</name><argument_list pos:start="27:23" pos:end="27:32">(<argument pos:start="27:24" pos:end="27:31"><expr pos:start="27:24" pos:end="27:31"><operator pos:start="27:24" pos:end="27:24">&amp;</operator><name pos:start="27:25" pos:end="27:31"><name pos:start="27:25" pos:end="27:25">s</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><call pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:14">QLIST_INIT</name><argument_list pos:start="29:15" pos:end="29:27">(<argument pos:start="29:16" pos:end="29:26"><expr pos:start="29:16" pos:end="29:26"><operator pos:start="29:16" pos:end="29:16">&amp;</operator><name pos:start="29:17" pos:end="29:26"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:26">regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:37">/* validate the file signature */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:64"><expr pos:start="35:5" pos:end="35:63"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:63"><name pos:start="35:11" pos:end="35:20">bdrv_pread</name><argument_list pos:start="35:21" pos:end="35:63">(<argument pos:start="35:22" pos:end="35:29"><expr pos:start="35:22" pos:end="35:29"><name pos:start="35:22" pos:end="35:29"><name pos:start="35:22" pos:end="35:23">bs</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:29">file</name></name></expr></argument>, <argument pos:start="35:32" pos:end="35:32"><expr pos:start="35:32" pos:end="35:32"><literal type="number" pos:start="35:32" pos:end="35:32">0</literal></expr></argument>, <argument pos:start="35:35" pos:end="35:44"><expr pos:start="35:35" pos:end="35:44"><operator pos:start="35:35" pos:end="35:35">&amp;</operator><name pos:start="35:36" pos:end="35:44">signature</name></expr></argument>, <argument pos:start="35:47" pos:end="35:62"><expr pos:start="35:47" pos:end="35:62"><sizeof pos:start="35:47" pos:end="35:62">sizeof<argument_list pos:start="35:53" pos:end="35:62">(<argument pos:start="35:54" pos:end="35:61"><expr pos:start="35:54" pos:end="35:61"><name pos:start="35:54" pos:end="35:61">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition> <block pos:start="37:18" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:42">(<expr pos:start="43:9" pos:end="43:41"><call pos:start="43:9" pos:end="43:41"><name pos:start="43:9" pos:end="43:14">memcmp</name><argument_list pos:start="43:15" pos:end="43:41">(<argument pos:start="43:16" pos:end="43:25"><expr pos:start="43:16" pos:end="43:25"><operator pos:start="43:16" pos:end="43:16">&amp;</operator><name pos:start="43:17" pos:end="43:25">signature</name></expr></argument>, <argument pos:start="43:28" pos:end="43:37"><expr pos:start="43:28" pos:end="43:37"><literal type="string" pos:start="43:28" pos:end="43:37">"vhdxfile"</literal></expr></argument>, <argument pos:start="43:40" pos:end="43:40"><expr pos:start="43:40" pos:end="43:40"><literal type="number" pos:start="43:40" pos:end="43:40">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:44" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <expr_stmt pos:start="45:9" pos:end="45:22"><expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">-</operator><name pos:start="45:16" pos:end="45:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="57:23">/* This is used for any header updates, for the file_write_guid.

     * The spec dictates that a new value should be used for the first

     * header update */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><call pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:22">vhdx_guid_generate</name><argument_list pos:start="59:23" pos:end="59:40">(<argument pos:start="59:24" pos:end="59:39"><expr pos:start="59:24" pos:end="59:39"><operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:39"><name pos:start="59:25" pos:end="59:25">s</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:39">session_guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:7">ret</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="63:34"><name pos:start="63:11" pos:end="63:27">vhdx_parse_header</name><argument_list pos:start="63:28" pos:end="63:34">(<argument pos:start="63:29" pos:end="63:30"><expr pos:start="63:29" pos:end="63:30"><name pos:start="63:29" pos:end="63:30">bs</name></expr></argument>, <argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><name pos:start="63:33" pos:end="63:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:16">(<expr pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">&lt;</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>)</condition> <block pos:start="65:18" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:18">

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:46"><expr pos:start="73:5" pos:end="73:45"><name pos:start="73:5" pos:end="73:7">ret</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:45"><name pos:start="73:11" pos:end="73:24">vhdx_parse_log</name><argument_list pos:start="73:25" pos:end="73:45">(<argument pos:start="73:26" pos:end="73:27"><expr pos:start="73:26" pos:end="73:27"><name pos:start="73:26" pos:end="73:27">bs</name></expr></argument>, <argument pos:start="73:30" pos:end="73:30"><expr pos:start="73:30" pos:end="73:30"><name pos:start="73:30" pos:end="73:30">s</name></expr></argument>, <argument pos:start="73:33" pos:end="73:44"><expr pos:start="73:33" pos:end="73:44"><operator pos:start="73:33" pos:end="73:33">&amp;</operator><name pos:start="73:34" pos:end="73:44">log_flushed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>)</condition> <block pos:start="75:18" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:18">

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:41"><expr pos:start="83:5" pos:end="83:40"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:40"><name pos:start="83:11" pos:end="83:33">vhdx_open_region_tables</name><argument_list pos:start="83:34" pos:end="83:40">(<argument pos:start="83:35" pos:end="83:36"><expr pos:start="83:35" pos:end="83:36"><name pos:start="83:35" pos:end="83:36">bs</name></expr></argument>, <argument pos:start="83:39" pos:end="83:39"><expr pos:start="83:39" pos:end="83:39"><name pos:start="83:39" pos:end="83:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:18">

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:37"><expr pos:start="93:5" pos:end="93:36"><name pos:start="93:5" pos:end="93:7">ret</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:36"><name pos:start="93:11" pos:end="93:29">vhdx_parse_metadata</name><argument_list pos:start="93:30" pos:end="93:36">(<argument pos:start="93:31" pos:end="93:32"><expr pos:start="93:31" pos:end="93:32"><name pos:start="93:31" pos:end="93:32">bs</name></expr></argument>, <argument pos:start="93:35" pos:end="93:35"><expr pos:start="93:35" pos:end="93:35"><name pos:start="93:35" pos:end="93:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:16">(<expr pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">&lt;</operator> <literal type="number" pos:start="95:15" pos:end="95:15">0</literal></expr>)</condition> <block pos:start="95:18" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:18">

        <goto pos:start="97:9" pos:end="97:18">goto <name pos:start="97:14" pos:end="97:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:17">block_size</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:40"><name pos:start="103:21" pos:end="103:21">s</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:29">params</name><operator pos:start="103:30" pos:end="103:30">.</operator><name pos:start="103:31" pos:end="103:40">block_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="109:29">/* the VHDX spec dictates that virtual_disk_size is always a multiple of

     * logical_sector_size */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:76"><expr pos:start="111:5" pos:end="111:75"><name pos:start="111:5" pos:end="111:21"><name pos:start="111:5" pos:end="111:6">bs</name><operator pos:start="111:7" pos:end="111:8">-&gt;</operator><name pos:start="111:9" pos:end="111:21">total_sectors</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:44"><name pos:start="111:25" pos:end="111:25">s</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:44">virtual_disk_size</name></name> <operator pos:start="111:46" pos:end="111:47">&gt;&gt;</operator> <name pos:start="111:49" pos:end="111:75"><name pos:start="111:49" pos:end="111:49">s</name><operator pos:start="111:50" pos:end="111:51">-&gt;</operator><name pos:start="111:52" pos:end="111:75">logical_sector_size_bits</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><call pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:25">vhdx_calc_bat_entries</name><argument_list pos:start="115:26" pos:end="115:28">(<argument pos:start="115:27" pos:end="115:27"><expr pos:start="115:27" pos:end="115:27"><name pos:start="115:27" pos:end="115:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:42"><expr pos:start="119:5" pos:end="119:41"><name pos:start="119:5" pos:end="119:17"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:17">bat_offset</name></name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:41"><name pos:start="119:21" pos:end="119:21">s</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:29">bat_rt</name><operator pos:start="119:30" pos:end="119:30">.</operator><name pos:start="119:31" pos:end="119:41">file_offset</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:65">(<expr pos:start="123:9" pos:end="123:64"><name pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:22">bat_entries</name></name> <operator pos:start="123:24" pos:end="123:24">&gt;</operator> <name pos:start="123:26" pos:end="123:41"><name pos:start="123:26" pos:end="123:26">s</name><operator pos:start="123:27" pos:end="123:28">-&gt;</operator><name pos:start="123:29" pos:end="123:34">bat_rt</name><operator pos:start="123:35" pos:end="123:35">.</operator><name pos:start="123:36" pos:end="123:41">length</name></name> <operator pos:start="123:43" pos:end="123:43">/</operator> <sizeof pos:start="123:45" pos:end="123:64">sizeof<argument_list pos:start="123:51" pos:end="123:64">(<argument pos:start="123:52" pos:end="123:63"><expr pos:start="123:52" pos:end="123:63"><name pos:start="123:52" pos:end="123:63">VHDXBatEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="123:67" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:18">

        <comment type="block" pos:start="125:9" pos:end="125:64">/* BAT allocation is not large enough for all entries */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:22"><expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <operator pos:start="127:15" pos:end="127:15">-</operator><name pos:start="127:16" pos:end="127:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="129:9" pos:end="129:18">goto <name pos:start="129:14" pos:end="129:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:41">/* s-&gt;bat is freed in vhdx_close() */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:51"><expr pos:start="137:5" pos:end="137:50"><name pos:start="137:5" pos:end="137:10"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:10">bat</name></name> <operator pos:start="137:12" pos:end="137:12">=</operator> <call pos:start="137:14" pos:end="137:50"><name pos:start="137:14" pos:end="137:28">qemu_blockalign</name><argument_list pos:start="137:29" pos:end="137:50">(<argument pos:start="137:30" pos:end="137:31"><expr pos:start="137:30" pos:end="137:31"><name pos:start="137:30" pos:end="137:31">bs</name></expr></argument>, <argument pos:start="137:34" pos:end="137:49"><expr pos:start="137:34" pos:end="137:49"><name pos:start="137:34" pos:end="137:49"><name pos:start="137:34" pos:end="137:34">s</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:42">bat_rt</name><operator pos:start="137:43" pos:end="137:43">.</operator><name pos:start="137:44" pos:end="137:49">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:72"><expr pos:start="141:5" pos:end="141:71"><name pos:start="141:5" pos:end="141:7">ret</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="141:71"><name pos:start="141:11" pos:end="141:20">bdrv_pread</name><argument_list pos:start="141:21" pos:end="141:71">(<argument pos:start="141:22" pos:end="141:29"><expr pos:start="141:22" pos:end="141:29"><name pos:start="141:22" pos:end="141:29"><name pos:start="141:22" pos:end="141:23">bs</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:29">file</name></name></expr></argument>, <argument pos:start="141:32" pos:end="141:44"><expr pos:start="141:32" pos:end="141:44"><name pos:start="141:32" pos:end="141:44"><name pos:start="141:32" pos:end="141:32">s</name><operator pos:start="141:33" pos:end="141:34">-&gt;</operator><name pos:start="141:35" pos:end="141:44">bat_offset</name></name></expr></argument>, <argument pos:start="141:47" pos:end="141:52"><expr pos:start="141:47" pos:end="141:52"><name pos:start="141:47" pos:end="141:52"><name pos:start="141:47" pos:end="141:47">s</name><operator pos:start="141:48" pos:end="141:49">-&gt;</operator><name pos:start="141:50" pos:end="141:52">bat</name></name></expr></argument>, <argument pos:start="141:55" pos:end="141:70"><expr pos:start="141:55" pos:end="141:70"><name pos:start="141:55" pos:end="141:70"><name pos:start="141:55" pos:end="141:55">s</name><operator pos:start="141:56" pos:end="141:57">-&gt;</operator><name pos:start="141:58" pos:end="141:63">bat_rt</name><operator pos:start="141:64" pos:end="141:64">.</operator><name pos:start="141:65" pos:end="141:70">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">&lt;</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>)</condition> <block pos:start="143:18" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:18">

        <goto pos:start="145:9" pos:end="145:18">goto <name pos:start="145:14" pos:end="145:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <decl_stmt pos:start="151:5" pos:end="151:40"><decl pos:start="151:5" pos:end="151:39"><type pos:start="151:5" pos:end="151:12"><name pos:start="151:5" pos:end="151:12">uint64_t</name></type> <name pos:start="151:14" pos:end="151:22">payblocks</name> <init pos:start="151:24" pos:end="151:39">= <expr pos:start="151:26" pos:end="151:39"><name pos:start="151:26" pos:end="151:39"><name pos:start="151:26" pos:end="151:26">s</name><operator pos:start="151:27" pos:end="151:28">-&gt;</operator><name pos:start="151:29" pos:end="151:39">chunk_ratio</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="153:5" pos:end="155:38">/* endian convert, and verify populated BAT field file offsets against

     * region table and log entries */</comment>

    <for pos:start="157:5" pos:end="191:5">for <control pos:start="157:9" pos:end="157:40">(<init pos:start="157:10" pos:end="157:15"><expr pos:start="157:10" pos:end="157:14"><name pos:start="157:10" pos:end="157:10">i</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <literal type="number" pos:start="157:14" pos:end="157:14">0</literal></expr>;</init> <condition pos:start="157:17" pos:end="157:35"><expr pos:start="157:17" pos:end="157:34"><name pos:start="157:17" pos:end="157:17">i</name> <operator pos:start="157:19" pos:end="157:19">&lt;</operator> <name pos:start="157:21" pos:end="157:34"><name pos:start="157:21" pos:end="157:21">s</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:34">bat_entries</name></name></expr>;</condition> <incr pos:start="157:37" pos:end="157:39"><expr pos:start="157:37" pos:end="157:39"><name pos:start="157:37" pos:end="157:37">i</name><operator pos:start="157:38" pos:end="157:39">++</operator></expr></incr>)</control> <block pos:start="157:42" pos:end="191:5">{<block_content pos:start="159:9" pos:end="189:9">

        <expr_stmt pos:start="159:9" pos:end="159:33"><expr pos:start="159:9" pos:end="159:32"><call pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:20">le64_to_cpus</name><argument_list pos:start="159:21" pos:end="159:32">(<argument pos:start="159:22" pos:end="159:31"><expr pos:start="159:22" pos:end="159:31"><operator pos:start="159:22" pos:end="159:22">&amp;</operator><name pos:start="159:23" pos:end="159:31"><name pos:start="159:23" pos:end="159:23">s</name><operator pos:start="159:24" pos:end="159:25">-&gt;</operator><name pos:start="159:26" pos:end="159:28">bat</name><index pos:start="159:29" pos:end="159:31">[<expr pos:start="159:30" pos:end="159:30"><name pos:start="159:30" pos:end="159:30">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="189:9"><if pos:start="161:9" pos:end="181:9">if <condition pos:start="161:12" pos:end="161:24">(<expr pos:start="161:13" pos:end="161:23"><name pos:start="161:13" pos:end="161:21">payblocks</name><operator pos:start="161:22" pos:end="161:23">--</operator></expr>)</condition> <block pos:start="161:26" pos:end="181:9">{<block_content pos:start="165:13" pos:end="179:13">

            <comment type="block" pos:start="163:13" pos:end="163:37">/* payload bat entries */</comment>

            <if_stmt pos:start="165:13" pos:end="179:13"><if pos:start="165:13" pos:end="179:13">if <condition pos:start="165:16" pos:end="167:48">(<expr pos:start="165:17" pos:end="167:47"><operator pos:start="165:17" pos:end="165:17">(</operator><name pos:start="165:18" pos:end="165:26"><name pos:start="165:18" pos:end="165:18">s</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:23">bat</name><index pos:start="165:24" pos:end="165:26">[<expr pos:start="165:25" pos:end="165:25"><name pos:start="165:25" pos:end="165:25">i</name></expr>]</index></name> <operator pos:start="165:28" pos:end="165:28">&amp;</operator> <name pos:start="165:30" pos:end="165:52">VHDX_BAT_STATE_BIT_MASK</name><operator pos:start="165:53" pos:end="165:53">)</operator> <operator pos:start="165:55" pos:end="165:56">==</operator>

                    <name pos:start="167:21" pos:end="167:47">PAYLOAD_BLOCK_FULLY_PRESENT</name></expr>)</condition> <block pos:start="167:50" pos:end="179:13">{<block_content pos:start="169:17" pos:end="177:17">

                <expr_stmt pos:start="169:17" pos:end="171:55"><expr pos:start="169:17" pos:end="171:54"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <call pos:start="169:23" pos:end="171:54"><name pos:start="169:23" pos:end="169:39">vhdx_region_check</name><argument_list pos:start="169:40" pos:end="171:54">(<argument pos:start="169:41" pos:end="169:41"><expr pos:start="169:41" pos:end="169:41"><name pos:start="169:41" pos:end="169:41">s</name></expr></argument>, <argument pos:start="169:44" pos:end="169:77"><expr pos:start="169:44" pos:end="169:77"><name pos:start="169:44" pos:end="169:52"><name pos:start="169:44" pos:end="169:44">s</name><operator pos:start="169:45" pos:end="169:46">-&gt;</operator><name pos:start="169:47" pos:end="169:49">bat</name><index pos:start="169:50" pos:end="169:52">[<expr pos:start="169:51" pos:end="169:51"><name pos:start="169:51" pos:end="169:51">i</name></expr>]</index></name> <operator pos:start="169:54" pos:end="169:54">&amp;</operator> <name pos:start="169:56" pos:end="169:77">VHDX_BAT_FILE_OFF_MASK</name></expr></argument>,

                                        <argument pos:start="171:41" pos:end="171:53"><expr pos:start="171:41" pos:end="171:53"><name pos:start="171:41" pos:end="171:53"><name pos:start="171:41" pos:end="171:41">s</name><operator pos:start="171:42" pos:end="171:43">-&gt;</operator><name pos:start="171:44" pos:end="171:53">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="173:17" pos:end="177:17"><if pos:start="173:17" pos:end="177:17">if <condition pos:start="173:20" pos:end="173:28">(<expr pos:start="173:21" pos:end="173:27"><name pos:start="173:21" pos:end="173:23">ret</name> <operator pos:start="173:25" pos:end="173:25">&lt;</operator> <literal type="number" pos:start="173:27" pos:end="173:27">0</literal></expr>)</condition> <block pos:start="173:30" pos:end="177:17">{<block_content pos:start="175:21" pos:end="175:30">

                    <goto pos:start="175:21" pos:end="175:30">goto <name pos:start="175:26" pos:end="175:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="181:11" pos:end="189:9">else <block pos:start="181:16" pos:end="189:9">{<block_content pos:start="183:13" pos:end="183:39">

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:21">payblocks</name> <operator pos:start="183:23" pos:end="183:23">=</operator> <name pos:start="183:25" pos:end="183:38"><name pos:start="183:25" pos:end="183:25">s</name><operator pos:start="183:26" pos:end="183:27">-&gt;</operator><name pos:start="183:28" pos:end="183:38">chunk_ratio</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="185:13" pos:end="187:29">/* Once differencing files are supported, verify sector bitmap

             * blocks here */</comment>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="195:5" pos:end="205:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="195:28">(<expr pos:start="195:9" pos:end="195:27"><name pos:start="195:9" pos:end="195:13">flags</name> <operator pos:start="195:15" pos:end="195:15">&amp;</operator> <name pos:start="195:17" pos:end="195:27">BDRV_O_RDWR</name></expr>)</condition> <block pos:start="195:30" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:9">

        <expr_stmt pos:start="197:9" pos:end="197:54"><expr pos:start="197:9" pos:end="197:53"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:53"><name pos:start="197:15" pos:end="197:33">vhdx_update_headers</name><argument_list pos:start="197:34" pos:end="197:53">(<argument pos:start="197:35" pos:end="197:36"><expr pos:start="197:35" pos:end="197:36"><name pos:start="197:35" pos:end="197:36">bs</name></expr></argument>, <argument pos:start="197:39" pos:end="197:39"><expr pos:start="197:39" pos:end="197:39"><name pos:start="197:39" pos:end="197:39">s</name></expr></argument>, <argument pos:start="197:42" pos:end="197:46"><expr pos:start="197:42" pos:end="197:46"><name pos:start="197:42" pos:end="197:46">false</name></expr></argument>, <argument pos:start="197:49" pos:end="197:52"><expr pos:start="197:49" pos:end="197:52"><name pos:start="197:49" pos:end="197:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="203:9"><if pos:start="199:9" pos:end="203:9">if <condition pos:start="199:12" pos:end="199:20">(<expr pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:15">ret</name> <operator pos:start="199:17" pos:end="199:17">&lt;</operator> <literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr>)</condition> <block pos:start="199:22" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:22">

            <goto pos:start="201:13" pos:end="201:22">goto <name pos:start="201:18" pos:end="201:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:34">/* TODO: differencing files */</comment>



    <comment type="block" pos:start="213:5" pos:end="213:53">/* Disable migration when VHDX images are used */</comment>

    <expr_stmt pos:start="215:5" pos:end="219:55"><expr pos:start="215:5" pos:end="219:54"><call pos:start="215:5" pos:end="219:54"><name pos:start="215:5" pos:end="215:13">error_set</name><argument_list pos:start="215:14" pos:end="219:54">(<argument pos:start="215:15" pos:end="215:35"><expr pos:start="215:15" pos:end="215:35"><operator pos:start="215:15" pos:end="215:15">&amp;</operator><name pos:start="215:16" pos:end="215:35"><name pos:start="215:16" pos:end="215:16">s</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:35">migration_blocker</name></name></expr></argument>,

            <argument pos:start="217:13" pos:end="217:51"><expr pos:start="217:13" pos:end="217:51"><name pos:start="217:13" pos:end="217:51">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,

            <argument pos:start="219:13" pos:end="219:18"><expr pos:start="219:13" pos:end="219:18"><literal type="string" pos:start="219:13" pos:end="219:18">"vhdx"</literal></expr></argument>, <argument pos:start="219:21" pos:end="219:35"><expr pos:start="219:21" pos:end="219:35"><name pos:start="219:21" pos:end="219:35"><name pos:start="219:21" pos:end="219:22">bs</name><operator pos:start="219:23" pos:end="219:24">-&gt;</operator><name pos:start="219:25" pos:end="219:35">device_name</name></name></expr></argument>, <argument pos:start="219:38" pos:end="219:53"><expr pos:start="219:38" pos:end="219:53"><literal type="string" pos:start="219:38" pos:end="219:53">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:46"><expr pos:start="221:5" pos:end="221:45"><call pos:start="221:5" pos:end="221:45"><name pos:start="221:5" pos:end="221:23">migrate_add_blocker</name><argument_list pos:start="221:24" pos:end="221:45">(<argument pos:start="221:25" pos:end="221:44"><expr pos:start="221:25" pos:end="221:44"><name pos:start="221:25" pos:end="221:44"><name pos:start="221:25" pos:end="221:25">s</name><operator pos:start="221:26" pos:end="221:27">-&gt;</operator><name pos:start="221:28" pos:end="221:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="225:5" pos:end="225:13">return <expr pos:start="225:12" pos:end="225:12"><literal type="number" pos:start="225:12" pos:end="225:12">0</literal></expr>;</return>

<label pos:start="227:1" pos:end="227:5"><name pos:start="227:1" pos:end="227:4">fail</name>:</label>

    <expr_stmt pos:start="229:5" pos:end="229:19"><expr pos:start="229:5" pos:end="229:18"><call pos:start="229:5" pos:end="229:18"><name pos:start="229:5" pos:end="229:14">vhdx_close</name><argument_list pos:start="229:15" pos:end="229:18">(<argument pos:start="229:16" pos:end="229:17"><expr pos:start="229:16" pos:end="229:17"><name pos:start="229:16" pos:end="229:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="231:5" pos:end="231:15">return <expr pos:start="231:12" pos:end="231:14"><name pos:start="231:12" pos:end="231:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
