<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9843.c" pos:tabs="8"><function pos:start="1:1" pos:end="607:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">bmp_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="607:1">{<block_content pos:start="9:5" pos:end="605:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">BMPContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name> <init pos:start="13:19" pos:end="13:36">= <expr pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">picture</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:14">p</name> <init pos:start="17:16" pos:end="17:28">= <expr pos:start="17:18" pos:end="17:28"><operator pos:start="17:18" pos:end="17:18">&amp;</operator><name pos:start="17:19" pos:end="17:28"><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:28">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:22">fsize</name></decl>, <decl pos:start="19:25" pos:end="19:29"><type ref="prev" pos:start="19:5" pos:end="19:16"/><name pos:start="19:25" pos:end="19:29">hsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">width</name></decl>, <decl pos:start="21:16" pos:end="21:21"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:16" pos:end="21:21">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:22">depth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:17">BiCompression</name></type> <name pos:start="25:19" pos:end="25:22">comp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:12">unsigned</name> <name pos:start="27:14" pos:end="27:16">int</name></type> <name pos:start="27:18" pos:end="27:23">ihsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>, <decl pos:start="29:12" pos:end="29:12"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:12">j</name></decl>, <decl pos:start="29:15" pos:end="29:15"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:15" pos:end="29:15">n</name></decl>, <decl pos:start="29:18" pos:end="29:25"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:18" pos:end="29:25">linesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">uint32_t</name></type> <name pos:start="31:14" pos:end="31:19"><name pos:start="31:14" pos:end="31:16">rgb</name><index pos:start="31:17" pos:end="31:19">[<expr pos:start="31:18" pos:end="31:18"><literal type="number" pos:start="31:18" pos:end="31:18">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:23"><decl pos:start="33:5" pos:end="33:22"><type pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:12">uint32_t</name></type> <name pos:start="33:14" pos:end="33:18">alpha</name> <init pos:start="33:20" pos:end="33:22">= <expr pos:start="33:22" pos:end="33:22"><literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:17"><decl pos:start="35:5" pos:end="35:16"><type pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:11">uint8_t</name> <modifier pos:start="35:13" pos:end="35:13">*</modifier></type><name pos:start="35:14" pos:end="35:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:14"><decl pos:start="37:5" pos:end="37:13"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:13">dsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:30"><decl pos:start="39:5" pos:end="39:29"><type pos:start="39:5" pos:end="39:19"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:17">uint8_t</name> <modifier pos:start="39:19" pos:end="39:19">*</modifier></type><name pos:start="39:20" pos:end="39:23">buf0</name> <init pos:start="39:25" pos:end="39:29">= <expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:29">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:18">GetByteContext</name></type> <name pos:start="41:20" pos:end="41:21">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if<condition pos:start="45:7" pos:end="45:21">(<expr pos:start="45:8" pos:end="45:20"><name pos:start="45:8" pos:end="45:15">buf_size</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:20">14</literal></expr>)</condition><block pos:start="45:22" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:75"><expr pos:start="47:9" pos:end="47:74"><call pos:start="47:9" pos:end="47:74"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="47:74">(<argument pos:start="47:16" pos:end="47:20"><expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">avctx</name></expr></argument>, <argument pos:start="47:23" pos:end="47:34"><expr pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:37" pos:end="47:63"><expr pos:start="47:37" pos:end="47:63"><literal type="string" pos:start="47:37" pos:end="47:63">"buf size too small (%d)\n"</literal></expr></argument>, <argument pos:start="47:66" pos:end="47:73"><expr pos:start="47:66" pos:end="47:73"><name pos:start="47:66" pos:end="47:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:18">return <expr pos:start="49:16" pos:end="49:17"><operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if<condition pos:start="55:7" pos:end="57:40">(<expr pos:start="55:8" pos:end="57:39"><call pos:start="55:8" pos:end="55:32"><name pos:start="55:8" pos:end="55:26">bytestream_get_byte</name><argument_list pos:start="55:27" pos:end="55:32">(<argument pos:start="55:28" pos:end="55:31"><expr pos:start="55:28" pos:end="55:31"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:31">buf</name></expr></argument>)</argument_list></call> <operator pos:start="55:34" pos:end="55:35">!=</operator> <literal type="char" pos:start="55:37" pos:end="55:39">'B'</literal> <operator pos:start="55:41" pos:end="55:42">||</operator>

       <call pos:start="57:8" pos:end="57:32"><name pos:start="57:8" pos:end="57:26">bytestream_get_byte</name><argument_list pos:start="57:27" pos:end="57:32">(<argument pos:start="57:28" pos:end="57:31"><expr pos:start="57:28" pos:end="57:31"><operator pos:start="57:28" pos:end="57:28">&amp;</operator><name pos:start="57:29" pos:end="57:31">buf</name></expr></argument>)</argument_list></call> <operator pos:start="57:34" pos:end="57:35">!=</operator> <literal type="char" pos:start="57:37" pos:end="57:39">'M'</literal></expr>)</condition> <block pos:start="57:42" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:58"><expr pos:start="59:9" pos:end="59:57"><call pos:start="59:9" pos:end="59:57"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:57">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">avctx</name></expr></argument>, <argument pos:start="59:23" pos:end="59:34"><expr pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:37" pos:end="59:56"><expr pos:start="59:37" pos:end="59:56"><literal type="string" pos:start="59:37" pos:end="59:56">"bad magic number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:38"><expr pos:start="67:5" pos:end="67:37"><name pos:start="67:5" pos:end="67:9">fsize</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:31">bytestream_get_le32</name><argument_list pos:start="67:32" pos:end="67:37">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><operator pos:start="67:33" pos:end="67:33">&amp;</operator><name pos:start="67:34" pos:end="67:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if<condition pos:start="69:7" pos:end="69:24">(<expr pos:start="69:8" pos:end="69:23"><name pos:start="69:8" pos:end="69:15">buf_size</name> <operator pos:start="69:17" pos:end="69:17">&lt;</operator> <name pos:start="69:19" pos:end="69:23">fsize</name></expr>)</condition><block pos:start="69:25" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:25">

        <expr_stmt pos:start="71:9" pos:end="73:32"><expr pos:start="71:9" pos:end="73:31"><call pos:start="71:9" pos:end="73:31"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="73:31">(<argument pos:start="71:16" pos:end="71:20"><expr pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:20">avctx</name></expr></argument>, <argument pos:start="71:23" pos:end="71:34"><expr pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:37" pos:end="71:90"><expr pos:start="71:37" pos:end="71:90"><literal type="string" pos:start="71:37" pos:end="71:90">"not enough data (%d &lt; %d), trying to decode anyway\n"</literal></expr></argument>,

               <argument pos:start="73:16" pos:end="73:23"><expr pos:start="73:16" pos:end="73:23"><name pos:start="73:16" pos:end="73:23">buf_size</name></expr></argument>, <argument pos:start="73:26" pos:end="73:30"><expr pos:start="73:26" pos:end="73:30"><name pos:start="73:26" pos:end="73:30">fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:25"><expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:13">fsize</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:24">buf_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:13"><expr pos:start="81:5" pos:end="81:12"><name pos:start="81:5" pos:end="81:7">buf</name> <operator pos:start="81:9" pos:end="81:10">+=</operator> <literal type="number" pos:start="81:12" pos:end="81:12">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="81:15" pos:end="81:29">/* reserved1 */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:13"><expr pos:start="83:5" pos:end="83:12"><name pos:start="83:5" pos:end="83:7">buf</name> <operator pos:start="83:9" pos:end="83:10">+=</operator> <literal type="number" pos:start="83:12" pos:end="83:12">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="83:15" pos:end="83:29">/* reserved2 */</comment>



    <expr_stmt pos:start="87:5" pos:end="87:38"><expr pos:start="87:5" pos:end="87:37"><name pos:start="87:5" pos:end="87:9">hsize</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:31">bytestream_get_le32</name><argument_list pos:start="87:32" pos:end="87:37">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><operator pos:start="87:33" pos:end="87:33">&amp;</operator><name pos:start="87:34" pos:end="87:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:40" pos:end="87:56">/* header size */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:39"><expr pos:start="89:5" pos:end="89:38"><name pos:start="89:5" pos:end="89:10">ihsize</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:38"><name pos:start="89:14" pos:end="89:32">bytestream_get_le32</name><argument_list pos:start="89:33" pos:end="89:38">(<argument pos:start="89:34" pos:end="89:37"><expr pos:start="89:34" pos:end="89:37"><operator pos:start="89:34" pos:end="89:34">&amp;</operator><name pos:start="89:35" pos:end="89:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block" pos:start="89:47" pos:end="89:68">/* more header size */</comment>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if<condition pos:start="91:7" pos:end="91:27">(<expr pos:start="91:8" pos:end="91:26"><name pos:start="91:8" pos:end="91:13">ihsize</name> <operator pos:start="91:15" pos:end="91:15">+</operator> <literal type="number" pos:start="91:17" pos:end="91:18">14</literal> <operator pos:start="91:20" pos:end="91:20">&gt;</operator> <name pos:start="91:22" pos:end="91:26">hsize</name></expr>)</condition><block pos:start="91:28" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:18">

        <expr_stmt pos:start="93:9" pos:end="93:71"><expr pos:start="93:9" pos:end="93:70"><call pos:start="93:9" pos:end="93:70"><name pos:start="93:9" pos:end="93:14">av_log</name><argument_list pos:start="93:15" pos:end="93:70">(<argument pos:start="93:16" pos:end="93:20"><expr pos:start="93:16" pos:end="93:20"><name pos:start="93:16" pos:end="93:20">avctx</name></expr></argument>, <argument pos:start="93:23" pos:end="93:34"><expr pos:start="93:23" pos:end="93:34"><name pos:start="93:23" pos:end="93:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:37" pos:end="93:62"><expr pos:start="93:37" pos:end="93:62"><literal type="string" pos:start="93:37" pos:end="93:62">"invalid header size %d\n"</literal></expr></argument>, <argument pos:start="93:65" pos:end="93:69"><expr pos:start="93:65" pos:end="93:69"><name pos:start="93:65" pos:end="93:69">hsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:87">/* sometimes file size is set to some headers size, set a real size in that case */</comment>

    <if_stmt pos:start="103:5" pos:end="105:29"><if pos:start="103:5" pos:end="105:29">if<condition pos:start="103:7" pos:end="103:43">(<expr pos:start="103:8" pos:end="103:42"><name pos:start="103:8" pos:end="103:12">fsize</name> <operator pos:start="103:14" pos:end="103:15">==</operator> <literal type="number" pos:start="103:17" pos:end="103:18">14</literal> <operator pos:start="103:20" pos:end="103:21">||</operator> <name pos:start="103:23" pos:end="103:27">fsize</name> <operator pos:start="103:29" pos:end="103:30">==</operator> <name pos:start="103:32" pos:end="103:37">ihsize</name> <operator pos:start="103:39" pos:end="103:39">+</operator> <literal type="number" pos:start="103:41" pos:end="103:42">14</literal></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:29"><block_content pos:start="105:9" pos:end="105:29">

        <expr_stmt pos:start="105:9" pos:end="105:29"><expr pos:start="105:9" pos:end="105:28"><name pos:start="105:9" pos:end="105:13">fsize</name> <operator pos:start="105:15" pos:end="105:15">=</operator> <name pos:start="105:17" pos:end="105:24">buf_size</name> <operator pos:start="105:26" pos:end="105:26">-</operator> <literal type="number" pos:start="105:28" pos:end="105:28">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="117:5">if<condition pos:start="109:7" pos:end="109:22">(<expr pos:start="109:8" pos:end="109:21"><name pos:start="109:8" pos:end="109:12">fsize</name> <operator pos:start="109:14" pos:end="109:15">&lt;=</operator> <name pos:start="109:17" pos:end="109:21">hsize</name></expr>)</condition><block pos:start="109:23" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:18">

        <expr_stmt pos:start="111:9" pos:end="113:29"><expr pos:start="111:9" pos:end="113:28"><call pos:start="111:9" pos:end="113:28"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="113:28">(<argument pos:start="111:16" pos:end="111:20"><expr pos:start="111:16" pos:end="111:20"><name pos:start="111:16" pos:end="111:20">avctx</name></expr></argument>, <argument pos:start="111:23" pos:end="111:34"><expr pos:start="111:23" pos:end="111:34"><name pos:start="111:23" pos:end="111:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:37" pos:end="111:93"><expr pos:start="111:37" pos:end="111:93"><literal type="string" pos:start="111:37" pos:end="111:93">"declared file size is less than header size (%d &lt; %d)\n"</literal></expr></argument>,

               <argument pos:start="113:16" pos:end="113:20"><expr pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:20">fsize</name></expr></argument>, <argument pos:start="113:23" pos:end="113:27"><expr pos:start="113:23" pos:end="113:27"><name pos:start="113:23" pos:end="113:27">hsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:18">return <expr pos:start="115:16" pos:end="115:17"><operator pos:start="115:16" pos:end="115:16">-</operator><literal type="number" pos:start="115:17" pos:end="115:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="121:5" pos:end="153:5">switch<condition pos:start="121:11" pos:end="121:18">(<expr pos:start="121:12" pos:end="121:17"><name pos:start="121:12" pos:end="121:17">ihsize</name></expr>)</condition><block pos:start="121:19" pos:end="153:5">{<block_content pos:start="123:5" pos:end="151:18">

    <case pos:start="123:5" pos:end="123:13">case  <expr pos:start="123:11" pos:end="123:12"><literal type="number" pos:start="123:11" pos:end="123:12">40</literal></expr>:</case> <comment type="line" pos:start="123:15" pos:end="123:23">// windib</comment>

    <case pos:start="125:5" pos:end="125:13">case  <expr pos:start="125:11" pos:end="125:12"><literal type="number" pos:start="125:11" pos:end="125:12">56</literal></expr>:</case> <comment type="line" pos:start="125:15" pos:end="125:26">// windib v3</comment>

    <case pos:start="127:5" pos:end="127:13">case  <expr pos:start="127:11" pos:end="127:12"><literal type="number" pos:start="127:11" pos:end="127:12">64</literal></expr>:</case> <comment type="line" pos:start="127:15" pos:end="127:24">// OS/2 v2</comment>

    <case pos:start="129:5" pos:end="129:13">case <expr pos:start="129:10" pos:end="129:12"><literal type="number" pos:start="129:10" pos:end="129:12">108</literal></expr>:</case> <comment type="line" pos:start="129:15" pos:end="129:26">// windib v4</comment>

    <case pos:start="131:5" pos:end="131:13">case <expr pos:start="131:10" pos:end="131:12"><literal type="number" pos:start="131:10" pos:end="131:12">124</literal></expr>:</case> <comment type="line" pos:start="131:15" pos:end="131:26">// windib v5</comment>

        <expr_stmt pos:start="133:9" pos:end="133:42"><expr pos:start="133:9" pos:end="133:41"><name pos:start="133:9" pos:end="133:13">width</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <call pos:start="133:17" pos:end="133:41"><name pos:start="133:17" pos:end="133:35">bytestream_get_le32</name><argument_list pos:start="133:36" pos:end="133:41">(<argument pos:start="133:37" pos:end="133:40"><expr pos:start="133:37" pos:end="133:40"><operator pos:start="133:37" pos:end="133:37">&amp;</operator><name pos:start="133:38" pos:end="133:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:43"><expr pos:start="135:9" pos:end="135:42"><name pos:start="135:9" pos:end="135:14">height</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <call pos:start="135:18" pos:end="135:42"><name pos:start="135:18" pos:end="135:36">bytestream_get_le32</name><argument_list pos:start="135:37" pos:end="135:42">(<argument pos:start="135:38" pos:end="135:41"><expr pos:start="135:38" pos:end="135:41"><operator pos:start="135:38" pos:end="135:38">&amp;</operator><name pos:start="135:39" pos:end="135:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:13">case  <expr pos:start="139:11" pos:end="139:12"><literal type="number" pos:start="139:11" pos:end="139:12">12</literal></expr>:</case> <comment type="line" pos:start="139:15" pos:end="139:24">// OS/2 v1</comment>

        <expr_stmt pos:start="141:9" pos:end="141:43"><expr pos:start="141:9" pos:end="141:42"><name pos:start="141:9" pos:end="141:13">width</name>  <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="141:42"><name pos:start="141:18" pos:end="141:36">bytestream_get_le16</name><argument_list pos:start="141:37" pos:end="141:42">(<argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><operator pos:start="141:38" pos:end="141:38">&amp;</operator><name pos:start="141:39" pos:end="141:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:43"><expr pos:start="143:9" pos:end="143:42"><name pos:start="143:9" pos:end="143:14">height</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:42"><name pos:start="143:18" pos:end="143:36">bytestream_get_le16</name><argument_list pos:start="143:37" pos:end="143:42">(<argument pos:start="143:38" pos:end="143:41"><expr pos:start="143:38" pos:end="143:41"><operator pos:start="143:38" pos:end="143:38">&amp;</operator><name pos:start="143:39" pos:end="143:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <default pos:start="147:5" pos:end="147:12">default:</default>

        <expr_stmt pos:start="149:9" pos:end="149:77"><expr pos:start="149:9" pos:end="149:76"><call pos:start="149:9" pos:end="149:76"><name pos:start="149:9" pos:end="149:14">av_log</name><argument_list pos:start="149:15" pos:end="149:76">(<argument pos:start="149:16" pos:end="149:20"><expr pos:start="149:16" pos:end="149:20"><name pos:start="149:16" pos:end="149:20">avctx</name></expr></argument>, <argument pos:start="149:23" pos:end="149:34"><expr pos:start="149:23" pos:end="149:34"><name pos:start="149:23" pos:end="149:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="149:37" pos:end="149:75"><expr pos:start="149:37" pos:end="149:75"><literal type="string" pos:start="149:37" pos:end="149:75">"unsupported BMP file, patch welcome\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:18">return <expr pos:start="151:16" pos:end="151:17"><operator pos:start="151:16" pos:end="151:16">-</operator><literal type="number" pos:start="151:17" pos:end="151:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if<condition pos:start="157:7" pos:end="157:38">(<expr pos:start="157:8" pos:end="157:37"><call pos:start="157:8" pos:end="157:32"><name pos:start="157:8" pos:end="157:26">bytestream_get_le16</name><argument_list pos:start="157:27" pos:end="157:32">(<argument pos:start="157:28" pos:end="157:31"><expr pos:start="157:28" pos:end="157:31"><operator pos:start="157:28" pos:end="157:28">&amp;</operator><name pos:start="157:29" pos:end="157:31">buf</name></expr></argument>)</argument_list></call> <operator pos:start="157:34" pos:end="157:35">!=</operator> <literal type="number" pos:start="157:37" pos:end="157:37">1</literal></expr>)</condition><block pos:start="157:39" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:18"> <comment type="block" pos:start="157:41" pos:end="157:52">/* planes */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:60"><expr pos:start="159:9" pos:end="159:59"><call pos:start="159:9" pos:end="159:59"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="159:59">(<argument pos:start="159:16" pos:end="159:20"><expr pos:start="159:16" pos:end="159:20"><name pos:start="159:16" pos:end="159:20">avctx</name></expr></argument>, <argument pos:start="159:23" pos:end="159:34"><expr pos:start="159:23" pos:end="159:34"><name pos:start="159:23" pos:end="159:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:37" pos:end="159:58"><expr pos:start="159:37" pos:end="159:58"><literal type="string" pos:start="159:37" pos:end="159:58">"invalid BMP header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="161:9" pos:end="161:18">return <expr pos:start="161:16" pos:end="161:17"><operator pos:start="161:16" pos:end="161:16">-</operator><literal type="number" pos:start="161:17" pos:end="161:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:38"><expr pos:start="167:5" pos:end="167:37"><name pos:start="167:5" pos:end="167:9">depth</name> <operator pos:start="167:11" pos:end="167:11">=</operator> <call pos:start="167:13" pos:end="167:37"><name pos:start="167:13" pos:end="167:31">bytestream_get_le16</name><argument_list pos:start="167:32" pos:end="167:37">(<argument pos:start="167:33" pos:end="167:36"><expr pos:start="167:33" pos:end="167:36"><operator pos:start="167:33" pos:end="167:33">&amp;</operator><name pos:start="167:34" pos:end="167:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="171:5" pos:end="177:23"><if pos:start="171:5" pos:end="173:41">if <condition pos:start="171:8" pos:end="171:21">(<expr pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:14">ihsize</name> <operator pos:start="171:16" pos:end="171:17">&gt;=</operator> <literal type="number" pos:start="171:19" pos:end="171:20">40</literal></expr>)</condition><block type="pseudo" pos:start="173:9" pos:end="173:41"><block_content pos:start="173:9" pos:end="173:41">

        <expr_stmt pos:start="173:9" pos:end="173:41"><expr pos:start="173:9" pos:end="173:40"><name pos:start="173:9" pos:end="173:12">comp</name> <operator pos:start="173:14" pos:end="173:14">=</operator> <call pos:start="173:16" pos:end="173:40"><name pos:start="173:16" pos:end="173:34">bytestream_get_le32</name><argument_list pos:start="173:35" pos:end="173:40">(<argument pos:start="173:36" pos:end="173:39"><expr pos:start="173:36" pos:end="173:39"><operator pos:start="173:36" pos:end="173:36">&amp;</operator><name pos:start="173:37" pos:end="173:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="175:5" pos:end="177:23">else<block type="pseudo" pos:start="177:9" pos:end="177:23"><block_content pos:start="177:9" pos:end="177:23">

        <expr_stmt pos:start="177:9" pos:end="177:23"><expr pos:start="177:9" pos:end="177:22"><name pos:start="177:9" pos:end="177:12">comp</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <name pos:start="177:16" pos:end="177:22">BMP_RGB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if<condition pos:start="181:7" pos:end="181:88">(<expr pos:start="181:8" pos:end="181:87"><name pos:start="181:8" pos:end="181:11">comp</name> <operator pos:start="181:13" pos:end="181:14">!=</operator> <name pos:start="181:16" pos:end="181:22">BMP_RGB</name> <operator pos:start="181:24" pos:end="181:25">&amp;&amp;</operator> <name pos:start="181:27" pos:end="181:30">comp</name> <operator pos:start="181:32" pos:end="181:33">!=</operator> <name pos:start="181:35" pos:end="181:47">BMP_BITFIELDS</name> <operator pos:start="181:49" pos:end="181:50">&amp;&amp;</operator> <name pos:start="181:52" pos:end="181:55">comp</name> <operator pos:start="181:57" pos:end="181:58">!=</operator> <name pos:start="181:60" pos:end="181:67">BMP_RLE4</name> <operator pos:start="181:69" pos:end="181:70">&amp;&amp;</operator> <name pos:start="181:72" pos:end="181:75">comp</name> <operator pos:start="181:77" pos:end="181:78">!=</operator> <name pos:start="181:80" pos:end="181:87">BMP_RLE8</name></expr>)</condition><block pos:start="181:89" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:18">

        <expr_stmt pos:start="183:9" pos:end="183:75"><expr pos:start="183:9" pos:end="183:74"><call pos:start="183:9" pos:end="183:74"><name pos:start="183:9" pos:end="183:14">av_log</name><argument_list pos:start="183:15" pos:end="183:74">(<argument pos:start="183:16" pos:end="183:20"><expr pos:start="183:16" pos:end="183:20"><name pos:start="183:16" pos:end="183:20">avctx</name></expr></argument>, <argument pos:start="183:23" pos:end="183:34"><expr pos:start="183:23" pos:end="183:34"><name pos:start="183:23" pos:end="183:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="183:37" pos:end="183:67"><expr pos:start="183:37" pos:end="183:67"><literal type="string" pos:start="183:37" pos:end="183:67">"BMP coding %d not supported\n"</literal></expr></argument>, <argument pos:start="183:70" pos:end="183:73"><expr pos:start="183:70" pos:end="183:73"><name pos:start="183:70" pos:end="183:73">comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="185:9" pos:end="185:18">return <expr pos:start="185:16" pos:end="185:17"><operator pos:start="185:16" pos:end="185:16">-</operator><literal type="number" pos:start="185:17" pos:end="185:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="203:5"><if pos:start="191:5" pos:end="203:5">if<condition pos:start="191:7" pos:end="191:29">(<expr pos:start="191:8" pos:end="191:28"><name pos:start="191:8" pos:end="191:11">comp</name> <operator pos:start="191:13" pos:end="191:14">==</operator> <name pos:start="191:16" pos:end="191:28">BMP_BITFIELDS</name></expr>)</condition><block pos:start="191:30" pos:end="203:5">{<block_content pos:start="193:9" pos:end="201:42">

        <expr_stmt pos:start="193:9" pos:end="193:18"><expr pos:start="193:9" pos:end="193:17"><name pos:start="193:9" pos:end="193:11">buf</name> <operator pos:start="193:13" pos:end="193:14">+=</operator> <literal type="number" pos:start="193:16" pos:end="193:17">20</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:43"><expr pos:start="195:9" pos:end="195:42"><name pos:start="195:9" pos:end="195:14"><name pos:start="195:9" pos:end="195:11">rgb</name><index pos:start="195:12" pos:end="195:14">[<expr pos:start="195:13" pos:end="195:13"><literal type="number" pos:start="195:13" pos:end="195:13">0</literal></expr>]</index></name> <operator pos:start="195:16" pos:end="195:16">=</operator> <call pos:start="195:18" pos:end="195:42"><name pos:start="195:18" pos:end="195:36">bytestream_get_le32</name><argument_list pos:start="195:37" pos:end="195:42">(<argument pos:start="195:38" pos:end="195:41"><expr pos:start="195:38" pos:end="195:41"><operator pos:start="195:38" pos:end="195:38">&amp;</operator><name pos:start="195:39" pos:end="195:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:43"><expr pos:start="197:9" pos:end="197:42"><name pos:start="197:9" pos:end="197:14"><name pos:start="197:9" pos:end="197:11">rgb</name><index pos:start="197:12" pos:end="197:14">[<expr pos:start="197:13" pos:end="197:13"><literal type="number" pos:start="197:13" pos:end="197:13">1</literal></expr>]</index></name> <operator pos:start="197:16" pos:end="197:16">=</operator> <call pos:start="197:18" pos:end="197:42"><name pos:start="197:18" pos:end="197:36">bytestream_get_le32</name><argument_list pos:start="197:37" pos:end="197:42">(<argument pos:start="197:38" pos:end="197:41"><expr pos:start="197:38" pos:end="197:41"><operator pos:start="197:38" pos:end="197:38">&amp;</operator><name pos:start="197:39" pos:end="197:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:43"><expr pos:start="199:9" pos:end="199:42"><name pos:start="199:9" pos:end="199:14"><name pos:start="199:9" pos:end="199:11">rgb</name><index pos:start="199:12" pos:end="199:14">[<expr pos:start="199:13" pos:end="199:13"><literal type="number" pos:start="199:13" pos:end="199:13">2</literal></expr>]</index></name> <operator pos:start="199:16" pos:end="199:16">=</operator> <call pos:start="199:18" pos:end="199:42"><name pos:start="199:18" pos:end="199:36">bytestream_get_le32</name><argument_list pos:start="199:37" pos:end="199:42">(<argument pos:start="199:38" pos:end="199:41"><expr pos:start="199:38" pos:end="199:41"><operator pos:start="199:38" pos:end="199:38">&amp;</operator><name pos:start="199:39" pos:end="199:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:42"><expr pos:start="201:9" pos:end="201:41"><name pos:start="201:9" pos:end="201:13">alpha</name> <operator pos:start="201:15" pos:end="201:15">=</operator> <call pos:start="201:17" pos:end="201:41"><name pos:start="201:17" pos:end="201:35">bytestream_get_le32</name><argument_list pos:start="201:36" pos:end="201:41">(<argument pos:start="201:37" pos:end="201:40"><expr pos:start="201:37" pos:end="201:40"><operator pos:start="201:37" pos:end="201:37">&amp;</operator><name pos:start="201:38" pos:end="201:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:25"><expr pos:start="207:5" pos:end="207:24"><name pos:start="207:5" pos:end="207:16"><name pos:start="207:5" pos:end="207:9">avctx</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:16">width</name></name> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:24">width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:48"><expr pos:start="209:5" pos:end="209:47"><name pos:start="209:5" pos:end="209:17"><name pos:start="209:5" pos:end="209:9">avctx</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:17">height</name></name> <operator pos:start="209:19" pos:end="209:19">=</operator> <ternary pos:start="209:21" pos:end="209:47"><condition pos:start="209:21" pos:end="209:31"><expr pos:start="209:21" pos:end="209:30"><name pos:start="209:21" pos:end="209:26">height</name> <operator pos:start="209:28" pos:end="209:28">&gt;</operator> <literal type="number" pos:start="209:30" pos:end="209:30">0</literal></expr>?</condition><then pos:start="209:33" pos:end="209:38"> <expr pos:start="209:33" pos:end="209:38"><name pos:start="209:33" pos:end="209:38">height</name></expr></then><else pos:start="209:39" pos:end="209:47">: <expr pos:start="209:41" pos:end="209:47"><operator pos:start="209:41" pos:end="209:41">-</operator><name pos:start="209:42" pos:end="209:47">height</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:37"><expr pos:start="213:5" pos:end="213:36"><name pos:start="213:5" pos:end="213:18"><name pos:start="213:5" pos:end="213:9">avctx</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:18">pix_fmt</name></name> <operator pos:start="213:20" pos:end="213:20">=</operator> <name pos:start="213:22" pos:end="213:36">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>



    <switch pos:start="217:5" pos:end="329:5">switch<condition pos:start="217:11" pos:end="217:17">(<expr pos:start="217:12" pos:end="217:16"><name pos:start="217:12" pos:end="217:16">depth</name></expr>)</condition><block pos:start="217:18" pos:end="329:5">{<block_content pos:start="219:5" pos:end="327:18">

    <case pos:start="219:5" pos:end="219:12">case <expr pos:start="219:10" pos:end="219:11"><literal type="number" pos:start="219:10" pos:end="219:11">32</literal></expr>:</case>

        <if_stmt pos:start="221:9" pos:end="251:9"><if pos:start="221:9" pos:end="247:9">if<condition pos:start="221:11" pos:end="221:33">(<expr pos:start="221:12" pos:end="221:32"><name pos:start="221:12" pos:end="221:15">comp</name> <operator pos:start="221:17" pos:end="221:18">==</operator> <name pos:start="221:20" pos:end="221:32">BMP_BITFIELDS</name></expr>)</condition><block pos:start="221:34" pos:end="247:9">{<block_content pos:start="223:13" pos:end="245:13">

            <if_stmt pos:start="223:13" pos:end="245:13"><if pos:start="223:13" pos:end="225:75">if <condition pos:start="223:16" pos:end="223:85">(<expr pos:start="223:17" pos:end="223:84"><name pos:start="223:17" pos:end="223:22"><name pos:start="223:17" pos:end="223:19">rgb</name><index pos:start="223:20" pos:end="223:22">[<expr pos:start="223:21" pos:end="223:21"><literal type="number" pos:start="223:21" pos:end="223:21">0</literal></expr>]</index></name> <operator pos:start="223:24" pos:end="223:25">==</operator> <literal type="number" pos:start="223:27" pos:end="223:36">0xFF000000</literal> <operator pos:start="223:38" pos:end="223:39">&amp;&amp;</operator> <name pos:start="223:41" pos:end="223:46"><name pos:start="223:41" pos:end="223:43">rgb</name><index pos:start="223:44" pos:end="223:46">[<expr pos:start="223:45" pos:end="223:45"><literal type="number" pos:start="223:45" pos:end="223:45">1</literal></expr>]</index></name> <operator pos:start="223:48" pos:end="223:49">==</operator> <literal type="number" pos:start="223:51" pos:end="223:60">0x00FF0000</literal> <operator pos:start="223:62" pos:end="223:63">&amp;&amp;</operator> <name pos:start="223:65" pos:end="223:70"><name pos:start="223:65" pos:end="223:67">rgb</name><index pos:start="223:68" pos:end="223:70">[<expr pos:start="223:69" pos:end="223:69"><literal type="number" pos:start="223:69" pos:end="223:69">2</literal></expr>]</index></name> <operator pos:start="223:72" pos:end="223:73">==</operator> <literal type="number" pos:start="223:75" pos:end="223:84">0x0000FF00</literal></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:75"><block_content pos:start="225:17" pos:end="225:75">

                <expr_stmt pos:start="225:17" pos:end="225:75"><expr pos:start="225:17" pos:end="225:74"><name pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:21">avctx</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:30">pix_fmt</name></name> <operator pos:start="225:32" pos:end="225:32">=</operator> <ternary pos:start="225:34" pos:end="225:74"><condition pos:start="225:34" pos:end="225:40"><expr pos:start="225:34" pos:end="225:38"><name pos:start="225:34" pos:end="225:38">alpha</name></expr> ?</condition><then pos:start="225:42" pos:end="225:56"> <expr pos:start="225:42" pos:end="225:56"><name pos:start="225:42" pos:end="225:56">AV_PIX_FMT_ABGR</name></expr> </then><else pos:start="225:58" pos:end="225:74">: <expr pos:start="225:60" pos:end="225:74"><name pos:start="225:60" pos:end="225:74">AV_PIX_FMT_0BGR</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="227:13" pos:end="229:75">else if <condition pos:start="227:21" pos:end="227:90">(<expr pos:start="227:22" pos:end="227:89"><name pos:start="227:22" pos:end="227:27"><name pos:start="227:22" pos:end="227:24">rgb</name><index pos:start="227:25" pos:end="227:27">[<expr pos:start="227:26" pos:end="227:26"><literal type="number" pos:start="227:26" pos:end="227:26">0</literal></expr>]</index></name> <operator pos:start="227:29" pos:end="227:30">==</operator> <literal type="number" pos:start="227:32" pos:end="227:41">0x00FF0000</literal> <operator pos:start="227:43" pos:end="227:44">&amp;&amp;</operator> <name pos:start="227:46" pos:end="227:51"><name pos:start="227:46" pos:end="227:48">rgb</name><index pos:start="227:49" pos:end="227:51">[<expr pos:start="227:50" pos:end="227:50"><literal type="number" pos:start="227:50" pos:end="227:50">1</literal></expr>]</index></name> <operator pos:start="227:53" pos:end="227:54">==</operator> <literal type="number" pos:start="227:56" pos:end="227:65">0x0000FF00</literal> <operator pos:start="227:67" pos:end="227:68">&amp;&amp;</operator> <name pos:start="227:70" pos:end="227:75"><name pos:start="227:70" pos:end="227:72">rgb</name><index pos:start="227:73" pos:end="227:75">[<expr pos:start="227:74" pos:end="227:74"><literal type="number" pos:start="227:74" pos:end="227:74">2</literal></expr>]</index></name> <operator pos:start="227:77" pos:end="227:78">==</operator> <literal type="number" pos:start="227:80" pos:end="227:89">0x000000FF</literal></expr>)</condition><block type="pseudo" pos:start="229:17" pos:end="229:75"><block_content pos:start="229:17" pos:end="229:75">

                <expr_stmt pos:start="229:17" pos:end="229:75"><expr pos:start="229:17" pos:end="229:74"><name pos:start="229:17" pos:end="229:30"><name pos:start="229:17" pos:end="229:21">avctx</name><operator pos:start="229:22" pos:end="229:23">-&gt;</operator><name pos:start="229:24" pos:end="229:30">pix_fmt</name></name> <operator pos:start="229:32" pos:end="229:32">=</operator> <ternary pos:start="229:34" pos:end="229:74"><condition pos:start="229:34" pos:end="229:40"><expr pos:start="229:34" pos:end="229:38"><name pos:start="229:34" pos:end="229:38">alpha</name></expr> ?</condition><then pos:start="229:42" pos:end="229:56"> <expr pos:start="229:42" pos:end="229:56"><name pos:start="229:42" pos:end="229:56">AV_PIX_FMT_BGRA</name></expr> </then><else pos:start="229:58" pos:end="229:74">: <expr pos:start="229:60" pos:end="229:74"><name pos:start="229:60" pos:end="229:74">AV_PIX_FMT_BGR0</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="231:13" pos:end="233:75">else if <condition pos:start="231:21" pos:end="231:90">(<expr pos:start="231:22" pos:end="231:89"><name pos:start="231:22" pos:end="231:27"><name pos:start="231:22" pos:end="231:24">rgb</name><index pos:start="231:25" pos:end="231:27">[<expr pos:start="231:26" pos:end="231:26"><literal type="number" pos:start="231:26" pos:end="231:26">0</literal></expr>]</index></name> <operator pos:start="231:29" pos:end="231:30">==</operator> <literal type="number" pos:start="231:32" pos:end="231:41">0x0000FF00</literal> <operator pos:start="231:43" pos:end="231:44">&amp;&amp;</operator> <name pos:start="231:46" pos:end="231:51"><name pos:start="231:46" pos:end="231:48">rgb</name><index pos:start="231:49" pos:end="231:51">[<expr pos:start="231:50" pos:end="231:50"><literal type="number" pos:start="231:50" pos:end="231:50">1</literal></expr>]</index></name> <operator pos:start="231:53" pos:end="231:54">==</operator> <literal type="number" pos:start="231:56" pos:end="231:65">0x00FF0000</literal> <operator pos:start="231:67" pos:end="231:68">&amp;&amp;</operator> <name pos:start="231:70" pos:end="231:75"><name pos:start="231:70" pos:end="231:72">rgb</name><index pos:start="231:73" pos:end="231:75">[<expr pos:start="231:74" pos:end="231:74"><literal type="number" pos:start="231:74" pos:end="231:74">2</literal></expr>]</index></name> <operator pos:start="231:77" pos:end="231:78">==</operator> <literal type="number" pos:start="231:80" pos:end="231:89">0xFF000000</literal></expr>)</condition><block type="pseudo" pos:start="233:17" pos:end="233:75"><block_content pos:start="233:17" pos:end="233:75">

                <expr_stmt pos:start="233:17" pos:end="233:75"><expr pos:start="233:17" pos:end="233:74"><name pos:start="233:17" pos:end="233:30"><name pos:start="233:17" pos:end="233:21">avctx</name><operator pos:start="233:22" pos:end="233:23">-&gt;</operator><name pos:start="233:24" pos:end="233:30">pix_fmt</name></name> <operator pos:start="233:32" pos:end="233:32">=</operator> <ternary pos:start="233:34" pos:end="233:74"><condition pos:start="233:34" pos:end="233:40"><expr pos:start="233:34" pos:end="233:38"><name pos:start="233:34" pos:end="233:38">alpha</name></expr> ?</condition><then pos:start="233:42" pos:end="233:56"> <expr pos:start="233:42" pos:end="233:56"><name pos:start="233:42" pos:end="233:56">AV_PIX_FMT_ARGB</name></expr> </then><else pos:start="233:58" pos:end="233:74">: <expr pos:start="233:60" pos:end="233:74"><name pos:start="233:60" pos:end="233:74">AV_PIX_FMT_0RGB</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="235:13" pos:end="237:75">else if <condition pos:start="235:21" pos:end="235:90">(<expr pos:start="235:22" pos:end="235:89"><name pos:start="235:22" pos:end="235:27"><name pos:start="235:22" pos:end="235:24">rgb</name><index pos:start="235:25" pos:end="235:27">[<expr pos:start="235:26" pos:end="235:26"><literal type="number" pos:start="235:26" pos:end="235:26">0</literal></expr>]</index></name> <operator pos:start="235:29" pos:end="235:30">==</operator> <literal type="number" pos:start="235:32" pos:end="235:41">0x000000FF</literal> <operator pos:start="235:43" pos:end="235:44">&amp;&amp;</operator> <name pos:start="235:46" pos:end="235:51"><name pos:start="235:46" pos:end="235:48">rgb</name><index pos:start="235:49" pos:end="235:51">[<expr pos:start="235:50" pos:end="235:50"><literal type="number" pos:start="235:50" pos:end="235:50">1</literal></expr>]</index></name> <operator pos:start="235:53" pos:end="235:54">==</operator> <literal type="number" pos:start="235:56" pos:end="235:65">0x0000FF00</literal> <operator pos:start="235:67" pos:end="235:68">&amp;&amp;</operator> <name pos:start="235:70" pos:end="235:75"><name pos:start="235:70" pos:end="235:72">rgb</name><index pos:start="235:73" pos:end="235:75">[<expr pos:start="235:74" pos:end="235:74"><literal type="number" pos:start="235:74" pos:end="235:74">2</literal></expr>]</index></name> <operator pos:start="235:77" pos:end="235:78">==</operator> <literal type="number" pos:start="235:80" pos:end="235:89">0x00FF0000</literal></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:75"><block_content pos:start="237:17" pos:end="237:75">

                <expr_stmt pos:start="237:17" pos:end="237:75"><expr pos:start="237:17" pos:end="237:74"><name pos:start="237:17" pos:end="237:30"><name pos:start="237:17" pos:end="237:21">avctx</name><operator pos:start="237:22" pos:end="237:23">-&gt;</operator><name pos:start="237:24" pos:end="237:30">pix_fmt</name></name> <operator pos:start="237:32" pos:end="237:32">=</operator> <ternary pos:start="237:34" pos:end="237:74"><condition pos:start="237:34" pos:end="237:40"><expr pos:start="237:34" pos:end="237:38"><name pos:start="237:34" pos:end="237:38">alpha</name></expr> ?</condition><then pos:start="237:42" pos:end="237:56"> <expr pos:start="237:42" pos:end="237:56"><name pos:start="237:42" pos:end="237:56">AV_PIX_FMT_RGBA</name></expr> </then><else pos:start="237:58" pos:end="237:74">: <expr pos:start="237:60" pos:end="237:74"><name pos:start="237:60" pos:end="237:74">AV_PIX_FMT_RGB0</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="239:13" pos:end="245:13">else <block pos:start="239:18" pos:end="245:13">{<block_content pos:start="241:17" pos:end="243:39">

                <expr_stmt pos:start="241:17" pos:end="241:103"><expr pos:start="241:17" pos:end="241:102"><call pos:start="241:17" pos:end="241:102"><name pos:start="241:17" pos:end="241:22">av_log</name><argument_list pos:start="241:23" pos:end="241:102">(<argument pos:start="241:24" pos:end="241:28"><expr pos:start="241:24" pos:end="241:28"><name pos:start="241:24" pos:end="241:28">avctx</name></expr></argument>, <argument pos:start="241:31" pos:end="241:42"><expr pos:start="241:31" pos:end="241:42"><name pos:start="241:31" pos:end="241:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:45" pos:end="241:77"><expr pos:start="241:45" pos:end="241:77"><literal type="string" pos:start="241:45" pos:end="241:77">"Unknown bitfields %0X %0X %0X\n"</literal></expr></argument>, <argument pos:start="241:80" pos:end="241:85"><expr pos:start="241:80" pos:end="241:85"><name pos:start="241:80" pos:end="241:85"><name pos:start="241:80" pos:end="241:82">rgb</name><index pos:start="241:83" pos:end="241:85">[<expr pos:start="241:84" pos:end="241:84"><literal type="number" pos:start="241:84" pos:end="241:84">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="241:88" pos:end="241:93"><expr pos:start="241:88" pos:end="241:93"><name pos:start="241:88" pos:end="241:93"><name pos:start="241:88" pos:end="241:90">rgb</name><index pos:start="241:91" pos:end="241:93">[<expr pos:start="241:92" pos:end="241:92"><literal type="number" pos:start="241:92" pos:end="241:92">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="241:96" pos:end="241:101"><expr pos:start="241:96" pos:end="241:101"><name pos:start="241:96" pos:end="241:101"><name pos:start="241:96" pos:end="241:98">rgb</name><index pos:start="241:99" pos:end="241:101">[<expr pos:start="241:100" pos:end="241:100"><literal type="number" pos:start="241:100" pos:end="241:100">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="243:17" pos:end="243:39">return <expr pos:start="243:24" pos:end="243:38"><call pos:start="243:24" pos:end="243:38"><name pos:start="243:24" pos:end="243:30">AVERROR</name><argument_list pos:start="243:31" pos:end="243:38">(<argument pos:start="243:32" pos:end="243:37"><expr pos:start="243:32" pos:end="243:37"><name pos:start="243:32" pos:end="243:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="247:11" pos:end="251:9">else <block pos:start="247:16" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:45">

            <expr_stmt pos:start="249:13" pos:end="249:45"><expr pos:start="249:13" pos:end="249:44"><name pos:start="249:13" pos:end="249:26"><name pos:start="249:13" pos:end="249:17">avctx</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:26">pix_fmt</name></name> <operator pos:start="249:28" pos:end="249:28">=</operator> <name pos:start="249:30" pos:end="249:44">AV_PIX_FMT_BGRA</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="253:9" pos:end="253:14">break;</break>

    <case pos:start="255:5" pos:end="255:12">case <expr pos:start="255:10" pos:end="255:11"><literal type="number" pos:start="255:10" pos:end="255:11">24</literal></expr>:</case>

        <expr_stmt pos:start="257:9" pos:end="257:42"><expr pos:start="257:9" pos:end="257:41"><name pos:start="257:9" pos:end="257:22"><name pos:start="257:9" pos:end="257:13">avctx</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:22">pix_fmt</name></name> <operator pos:start="257:24" pos:end="257:24">=</operator> <name pos:start="257:26" pos:end="257:41">AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>

        <break pos:start="259:9" pos:end="259:14">break;</break>

    <case pos:start="261:5" pos:end="261:12">case <expr pos:start="261:10" pos:end="261:11"><literal type="number" pos:start="261:10" pos:end="261:11">16</literal></expr>:</case>

        <if_stmt pos:start="263:9" pos:end="289:9"><if pos:start="263:9" pos:end="265:47">if<condition pos:start="263:11" pos:end="263:27">(<expr pos:start="263:12" pos:end="263:26"><name pos:start="263:12" pos:end="263:15">comp</name> <operator pos:start="263:17" pos:end="263:18">==</operator> <name pos:start="263:20" pos:end="263:26">BMP_RGB</name></expr>)</condition><block type="pseudo" pos:start="265:13" pos:end="265:47"><block_content pos:start="265:13" pos:end="265:47">

            <expr_stmt pos:start="265:13" pos:end="265:47"><expr pos:start="265:13" pos:end="265:46"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:17">avctx</name><operator pos:start="265:18" pos:end="265:19">-&gt;</operator><name pos:start="265:20" pos:end="265:26">pix_fmt</name></name> <operator pos:start="265:28" pos:end="265:28">=</operator> <name pos:start="265:30" pos:end="265:46">AV_PIX_FMT_RGB555</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="267:9" pos:end="289:9">else if <condition pos:start="267:17" pos:end="267:39">(<expr pos:start="267:18" pos:end="267:38"><name pos:start="267:18" pos:end="267:21">comp</name> <operator pos:start="267:23" pos:end="267:24">==</operator> <name pos:start="267:26" pos:end="267:38">BMP_BITFIELDS</name></expr>)</condition> <block pos:start="267:41" pos:end="289:9">{<block_content pos:start="269:13" pos:end="287:13">

            <if_stmt pos:start="269:13" pos:end="287:13"><if pos:start="269:13" pos:end="271:50">if <condition pos:start="269:16" pos:end="269:73">(<expr pos:start="269:17" pos:end="269:72"><name pos:start="269:17" pos:end="269:22"><name pos:start="269:17" pos:end="269:19">rgb</name><index pos:start="269:20" pos:end="269:22">[<expr pos:start="269:21" pos:end="269:21"><literal type="number" pos:start="269:21" pos:end="269:21">0</literal></expr>]</index></name> <operator pos:start="269:24" pos:end="269:25">==</operator> <literal type="number" pos:start="269:27" pos:end="269:32">0xF800</literal> <operator pos:start="269:34" pos:end="269:35">&amp;&amp;</operator> <name pos:start="269:37" pos:end="269:42"><name pos:start="269:37" pos:end="269:39">rgb</name><index pos:start="269:40" pos:end="269:42">[<expr pos:start="269:41" pos:end="269:41"><literal type="number" pos:start="269:41" pos:end="269:41">1</literal></expr>]</index></name> <operator pos:start="269:44" pos:end="269:45">==</operator> <literal type="number" pos:start="269:47" pos:end="269:52">0x07E0</literal> <operator pos:start="269:54" pos:end="269:55">&amp;&amp;</operator> <name pos:start="269:57" pos:end="269:62"><name pos:start="269:57" pos:end="269:59">rgb</name><index pos:start="269:60" pos:end="269:62">[<expr pos:start="269:61" pos:end="269:61"><literal type="number" pos:start="269:61" pos:end="269:61">2</literal></expr>]</index></name> <operator pos:start="269:64" pos:end="269:65">==</operator> <literal type="number" pos:start="269:67" pos:end="269:72">0x001F</literal></expr>)</condition><block type="pseudo" pos:start="271:16" pos:end="271:50"><block_content pos:start="271:16" pos:end="271:50">

               <expr_stmt pos:start="271:16" pos:end="271:50"><expr pos:start="271:16" pos:end="271:49"><name pos:start="271:16" pos:end="271:29"><name pos:start="271:16" pos:end="271:20">avctx</name><operator pos:start="271:21" pos:end="271:22">-&gt;</operator><name pos:start="271:23" pos:end="271:29">pix_fmt</name></name> <operator pos:start="271:31" pos:end="271:31">=</operator> <name pos:start="271:33" pos:end="271:49">AV_PIX_FMT_RGB565</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="273:13" pos:end="275:50">else if <condition pos:start="273:21" pos:end="273:78">(<expr pos:start="273:22" pos:end="273:77"><name pos:start="273:22" pos:end="273:27"><name pos:start="273:22" pos:end="273:24">rgb</name><index pos:start="273:25" pos:end="273:27">[<expr pos:start="273:26" pos:end="273:26"><literal type="number" pos:start="273:26" pos:end="273:26">0</literal></expr>]</index></name> <operator pos:start="273:29" pos:end="273:30">==</operator> <literal type="number" pos:start="273:32" pos:end="273:37">0x7C00</literal> <operator pos:start="273:39" pos:end="273:40">&amp;&amp;</operator> <name pos:start="273:42" pos:end="273:47"><name pos:start="273:42" pos:end="273:44">rgb</name><index pos:start="273:45" pos:end="273:47">[<expr pos:start="273:46" pos:end="273:46"><literal type="number" pos:start="273:46" pos:end="273:46">1</literal></expr>]</index></name> <operator pos:start="273:49" pos:end="273:50">==</operator> <literal type="number" pos:start="273:52" pos:end="273:57">0x03E0</literal> <operator pos:start="273:59" pos:end="273:60">&amp;&amp;</operator> <name pos:start="273:62" pos:end="273:67"><name pos:start="273:62" pos:end="273:64">rgb</name><index pos:start="273:65" pos:end="273:67">[<expr pos:start="273:66" pos:end="273:66"><literal type="number" pos:start="273:66" pos:end="273:66">2</literal></expr>]</index></name> <operator pos:start="273:69" pos:end="273:70">==</operator> <literal type="number" pos:start="273:72" pos:end="273:77">0x001F</literal></expr>)</condition><block type="pseudo" pos:start="275:16" pos:end="275:50"><block_content pos:start="275:16" pos:end="275:50">

               <expr_stmt pos:start="275:16" pos:end="275:50"><expr pos:start="275:16" pos:end="275:49"><name pos:start="275:16" pos:end="275:29"><name pos:start="275:16" pos:end="275:20">avctx</name><operator pos:start="275:21" pos:end="275:22">-&gt;</operator><name pos:start="275:23" pos:end="275:29">pix_fmt</name></name> <operator pos:start="275:31" pos:end="275:31">=</operator> <name pos:start="275:33" pos:end="275:49">AV_PIX_FMT_RGB555</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="277:13" pos:end="279:50">else if <condition pos:start="277:21" pos:end="277:78">(<expr pos:start="277:22" pos:end="277:77"><name pos:start="277:22" pos:end="277:27"><name pos:start="277:22" pos:end="277:24">rgb</name><index pos:start="277:25" pos:end="277:27">[<expr pos:start="277:26" pos:end="277:26"><literal type="number" pos:start="277:26" pos:end="277:26">0</literal></expr>]</index></name> <operator pos:start="277:29" pos:end="277:30">==</operator> <literal type="number" pos:start="277:32" pos:end="277:37">0x0F00</literal> <operator pos:start="277:39" pos:end="277:40">&amp;&amp;</operator> <name pos:start="277:42" pos:end="277:47"><name pos:start="277:42" pos:end="277:44">rgb</name><index pos:start="277:45" pos:end="277:47">[<expr pos:start="277:46" pos:end="277:46"><literal type="number" pos:start="277:46" pos:end="277:46">1</literal></expr>]</index></name> <operator pos:start="277:49" pos:end="277:50">==</operator> <literal type="number" pos:start="277:52" pos:end="277:57">0x00F0</literal> <operator pos:start="277:59" pos:end="277:60">&amp;&amp;</operator> <name pos:start="277:62" pos:end="277:67"><name pos:start="277:62" pos:end="277:64">rgb</name><index pos:start="277:65" pos:end="277:67">[<expr pos:start="277:66" pos:end="277:66"><literal type="number" pos:start="277:66" pos:end="277:66">2</literal></expr>]</index></name> <operator pos:start="277:69" pos:end="277:70">==</operator> <literal type="number" pos:start="277:72" pos:end="277:77">0x000F</literal></expr>)</condition><block type="pseudo" pos:start="279:16" pos:end="279:50"><block_content pos:start="279:16" pos:end="279:50">

               <expr_stmt pos:start="279:16" pos:end="279:50"><expr pos:start="279:16" pos:end="279:49"><name pos:start="279:16" pos:end="279:29"><name pos:start="279:16" pos:end="279:20">avctx</name><operator pos:start="279:21" pos:end="279:22">-&gt;</operator><name pos:start="279:23" pos:end="279:29">pix_fmt</name></name> <operator pos:start="279:31" pos:end="279:31">=</operator> <name pos:start="279:33" pos:end="279:49">AV_PIX_FMT_RGB444</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="281:13" pos:end="287:13">else <block pos:start="281:18" pos:end="287:13">{<block_content pos:start="283:16" pos:end="285:38">

               <expr_stmt pos:start="283:16" pos:end="283:102"><expr pos:start="283:16" pos:end="283:101"><call pos:start="283:16" pos:end="283:101"><name pos:start="283:16" pos:end="283:21">av_log</name><argument_list pos:start="283:22" pos:end="283:101">(<argument pos:start="283:23" pos:end="283:27"><expr pos:start="283:23" pos:end="283:27"><name pos:start="283:23" pos:end="283:27">avctx</name></expr></argument>, <argument pos:start="283:30" pos:end="283:41"><expr pos:start="283:30" pos:end="283:41"><name pos:start="283:30" pos:end="283:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="283:44" pos:end="283:76"><expr pos:start="283:44" pos:end="283:76"><literal type="string" pos:start="283:44" pos:end="283:76">"Unknown bitfields %0X %0X %0X\n"</literal></expr></argument>, <argument pos:start="283:79" pos:end="283:84"><expr pos:start="283:79" pos:end="283:84"><name pos:start="283:79" pos:end="283:84"><name pos:start="283:79" pos:end="283:81">rgb</name><index pos:start="283:82" pos:end="283:84">[<expr pos:start="283:83" pos:end="283:83"><literal type="number" pos:start="283:83" pos:end="283:83">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="283:87" pos:end="283:92"><expr pos:start="283:87" pos:end="283:92"><name pos:start="283:87" pos:end="283:92"><name pos:start="283:87" pos:end="283:89">rgb</name><index pos:start="283:90" pos:end="283:92">[<expr pos:start="283:91" pos:end="283:91"><literal type="number" pos:start="283:91" pos:end="283:91">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="283:95" pos:end="283:100"><expr pos:start="283:95" pos:end="283:100"><name pos:start="283:95" pos:end="283:100"><name pos:start="283:95" pos:end="283:97">rgb</name><index pos:start="283:98" pos:end="283:100">[<expr pos:start="283:99" pos:end="283:99"><literal type="number" pos:start="283:99" pos:end="283:99">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <return pos:start="285:16" pos:end="285:38">return <expr pos:start="285:23" pos:end="285:37"><call pos:start="285:23" pos:end="285:37"><name pos:start="285:23" pos:end="285:29">AVERROR</name><argument_list pos:start="285:30" pos:end="285:37">(<argument pos:start="285:31" pos:end="285:36"><expr pos:start="285:31" pos:end="285:36"><name pos:start="285:31" pos:end="285:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="291:9" pos:end="291:14">break;</break>

    <case pos:start="293:5" pos:end="293:11">case <expr pos:start="293:10" pos:end="293:10"><literal type="number" pos:start="293:10" pos:end="293:10">8</literal></expr>:</case>

        <if_stmt pos:start="295:9" pos:end="301:46"><if pos:start="295:9" pos:end="297:45">if<condition pos:start="295:11" pos:end="295:35">(<expr pos:start="295:12" pos:end="295:34"><name pos:start="295:12" pos:end="295:16">hsize</name> <operator pos:start="295:18" pos:end="295:18">-</operator> <name pos:start="295:20" pos:end="295:25">ihsize</name> <operator pos:start="295:27" pos:end="295:27">-</operator> <literal type="number" pos:start="295:29" pos:end="295:30">14</literal> <operator pos:start="295:32" pos:end="295:32">&gt;</operator> <literal type="number" pos:start="295:34" pos:end="295:34">0</literal></expr>)</condition><block type="pseudo" pos:start="297:13" pos:end="297:45"><block_content pos:start="297:13" pos:end="297:45">

            <expr_stmt pos:start="297:13" pos:end="297:45"><expr pos:start="297:13" pos:end="297:44"><name pos:start="297:13" pos:end="297:26"><name pos:start="297:13" pos:end="297:17">avctx</name><operator pos:start="297:18" pos:end="297:19">-&gt;</operator><name pos:start="297:20" pos:end="297:26">pix_fmt</name></name> <operator pos:start="297:28" pos:end="297:28">=</operator> <name pos:start="297:30" pos:end="297:44">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="299:9" pos:end="301:46">else<block type="pseudo" pos:start="301:13" pos:end="301:46"><block_content pos:start="301:13" pos:end="301:46">

            <expr_stmt pos:start="301:13" pos:end="301:46"><expr pos:start="301:13" pos:end="301:45"><name pos:start="301:13" pos:end="301:26"><name pos:start="301:13" pos:end="301:17">avctx</name><operator pos:start="301:18" pos:end="301:19">-&gt;</operator><name pos:start="301:20" pos:end="301:26">pix_fmt</name></name> <operator pos:start="301:28" pos:end="301:28">=</operator> <name pos:start="301:30" pos:end="301:45">AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="303:9" pos:end="303:14">break;</break>

    <case pos:start="305:5" pos:end="305:11">case <expr pos:start="305:10" pos:end="305:10"><literal type="number" pos:start="305:10" pos:end="305:10">1</literal></expr>:</case>

    <case pos:start="307:5" pos:end="307:11">case <expr pos:start="307:10" pos:end="307:10"><literal type="number" pos:start="307:10" pos:end="307:10">4</literal></expr>:</case>

        <if_stmt pos:start="309:9" pos:end="319:9"><if pos:start="309:9" pos:end="313:9">if<condition pos:start="309:11" pos:end="309:35">(<expr pos:start="309:12" pos:end="309:34"><name pos:start="309:12" pos:end="309:16">hsize</name> <operator pos:start="309:18" pos:end="309:18">-</operator> <name pos:start="309:20" pos:end="309:25">ihsize</name> <operator pos:start="309:27" pos:end="309:27">-</operator> <literal type="number" pos:start="309:29" pos:end="309:30">14</literal> <operator pos:start="309:32" pos:end="309:32">&gt;</operator> <literal type="number" pos:start="309:34" pos:end="309:34">0</literal></expr>)</condition><block pos:start="309:36" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:45">

            <expr_stmt pos:start="311:13" pos:end="311:45"><expr pos:start="311:13" pos:end="311:44"><name pos:start="311:13" pos:end="311:26"><name pos:start="311:13" pos:end="311:17">avctx</name><operator pos:start="311:18" pos:end="311:19">-&gt;</operator><name pos:start="311:20" pos:end="311:26">pix_fmt</name></name> <operator pos:start="311:28" pos:end="311:28">=</operator> <name pos:start="311:30" pos:end="311:44">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="313:10" pos:end="319:9">else<block pos:start="313:14" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:22">

            <expr_stmt pos:start="315:13" pos:end="315:89"><expr pos:start="315:13" pos:end="315:88"><call pos:start="315:13" pos:end="315:88"><name pos:start="315:13" pos:end="315:18">av_log</name><argument_list pos:start="315:19" pos:end="315:88">(<argument pos:start="315:20" pos:end="315:24"><expr pos:start="315:20" pos:end="315:24"><name pos:start="315:20" pos:end="315:24">avctx</name></expr></argument>, <argument pos:start="315:27" pos:end="315:38"><expr pos:start="315:27" pos:end="315:38"><name pos:start="315:27" pos:end="315:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="315:41" pos:end="315:77"><expr pos:start="315:41" pos:end="315:77"><literal type="string" pos:start="315:41" pos:end="315:77">"Unknown palette for %d-colour BMP\n"</literal></expr></argument>, <argument pos:start="315:80" pos:end="315:87"><expr pos:start="315:80" pos:end="315:87"><literal type="number" pos:start="315:80" pos:end="315:80">1</literal><operator pos:start="315:81" pos:end="315:82">&lt;&lt;</operator><name pos:start="315:83" pos:end="315:87">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="317:13" pos:end="317:22">return <expr pos:start="317:20" pos:end="317:21"><operator pos:start="317:20" pos:end="317:20">-</operator><literal type="number" pos:start="317:21" pos:end="317:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <break pos:start="321:9" pos:end="321:14">break;</break>

    <default pos:start="323:5" pos:end="323:12">default:</default>

        <expr_stmt pos:start="325:9" pos:end="325:71"><expr pos:start="325:9" pos:end="325:70"><call pos:start="325:9" pos:end="325:70"><name pos:start="325:9" pos:end="325:14">av_log</name><argument_list pos:start="325:15" pos:end="325:70">(<argument pos:start="325:16" pos:end="325:20"><expr pos:start="325:16" pos:end="325:20"><name pos:start="325:16" pos:end="325:20">avctx</name></expr></argument>, <argument pos:start="325:23" pos:end="325:34"><expr pos:start="325:23" pos:end="325:34"><name pos:start="325:23" pos:end="325:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="325:37" pos:end="325:62"><expr pos:start="325:37" pos:end="325:62"><literal type="string" pos:start="325:37" pos:end="325:62">"depth %d not supported\n"</literal></expr></argument>, <argument pos:start="325:65" pos:end="325:69"><expr pos:start="325:65" pos:end="325:69"><name pos:start="325:65" pos:end="325:69">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="327:9" pos:end="327:18">return <expr pos:start="327:16" pos:end="327:17"><operator pos:start="327:16" pos:end="327:16">-</operator><literal type="number" pos:start="327:17" pos:end="327:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="333:5" pos:end="339:5"><if pos:start="333:5" pos:end="339:5">if<condition pos:start="333:7" pos:end="333:41">(<expr pos:start="333:8" pos:end="333:40"><name pos:start="333:8" pos:end="333:21"><name pos:start="333:8" pos:end="333:12">avctx</name><operator pos:start="333:13" pos:end="333:14">-&gt;</operator><name pos:start="333:15" pos:end="333:21">pix_fmt</name></name> <operator pos:start="333:23" pos:end="333:24">==</operator> <name pos:start="333:26" pos:end="333:40">AV_PIX_FMT_NONE</name></expr>)</condition><block pos:start="333:42" pos:end="339:5">{<block_content pos:start="335:9" pos:end="337:18">

        <expr_stmt pos:start="335:9" pos:end="335:66"><expr pos:start="335:9" pos:end="335:65"><call pos:start="335:9" pos:end="335:65"><name pos:start="335:9" pos:end="335:14">av_log</name><argument_list pos:start="335:15" pos:end="335:65">(<argument pos:start="335:16" pos:end="335:20"><expr pos:start="335:16" pos:end="335:20"><name pos:start="335:16" pos:end="335:20">avctx</name></expr></argument>, <argument pos:start="335:23" pos:end="335:34"><expr pos:start="335:23" pos:end="335:34"><name pos:start="335:23" pos:end="335:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="335:37" pos:end="335:64"><expr pos:start="335:37" pos:end="335:64"><literal type="string" pos:start="335:37" pos:end="335:64">"unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="337:9" pos:end="337:18">return <expr pos:start="337:16" pos:end="337:17"><operator pos:start="337:16" pos:end="337:16">-</operator><literal type="number" pos:start="337:17" pos:end="337:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="343:5" pos:end="345:40"><if pos:start="343:5" pos:end="345:40">if<condition pos:start="343:7" pos:end="343:18">(<expr pos:start="343:8" pos:end="343:17"><name pos:start="343:8" pos:end="343:17"><name pos:start="343:8" pos:end="343:8">p</name><operator pos:start="343:9" pos:end="343:10">-&gt;</operator><name pos:start="343:11" pos:end="343:14">data</name><index pos:start="343:15" pos:end="343:17">[<expr pos:start="343:16" pos:end="343:16"><literal type="number" pos:start="343:16" pos:end="343:16">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="345:9" pos:end="345:40"><block_content pos:start="345:9" pos:end="345:40">

        <expr_stmt pos:start="345:9" pos:end="345:40"><expr pos:start="345:9" pos:end="345:39"><call pos:start="345:9" pos:end="345:39"><name pos:start="345:9" pos:end="345:29"><name pos:start="345:9" pos:end="345:13">avctx</name><operator pos:start="345:14" pos:end="345:15">-&gt;</operator><name pos:start="345:16" pos:end="345:29">release_buffer</name></name><argument_list pos:start="345:30" pos:end="345:39">(<argument pos:start="345:31" pos:end="345:35"><expr pos:start="345:31" pos:end="345:35"><name pos:start="345:31" pos:end="345:35">avctx</name></expr></argument>, <argument pos:start="345:38" pos:end="345:38"><expr pos:start="345:38" pos:end="345:38"><name pos:start="345:38" pos:end="345:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="349:5" pos:end="349:21"><expr pos:start="349:5" pos:end="349:20"><name pos:start="349:5" pos:end="349:16"><name pos:start="349:5" pos:end="349:5">p</name><operator pos:start="349:6" pos:end="349:7">-&gt;</operator><name pos:start="349:8" pos:end="349:16">reference</name></name> <operator pos:start="349:18" pos:end="349:18">=</operator> <literal type="number" pos:start="349:20" pos:end="349:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="351:5" pos:end="357:5"><if pos:start="351:5" pos:end="357:5">if<condition pos:start="351:7" pos:end="351:39">(<expr pos:start="351:8" pos:end="351:38"><call pos:start="351:8" pos:end="351:34"><name pos:start="351:8" pos:end="351:24"><name pos:start="351:8" pos:end="351:12">avctx</name><operator pos:start="351:13" pos:end="351:14">-&gt;</operator><name pos:start="351:15" pos:end="351:24">get_buffer</name></name><argument_list pos:start="351:25" pos:end="351:34">(<argument pos:start="351:26" pos:end="351:30"><expr pos:start="351:26" pos:end="351:30"><name pos:start="351:26" pos:end="351:30">avctx</name></expr></argument>, <argument pos:start="351:33" pos:end="351:33"><expr pos:start="351:33" pos:end="351:33"><name pos:start="351:33" pos:end="351:33">p</name></expr></argument>)</argument_list></call> <operator pos:start="351:36" pos:end="351:36">&lt;</operator> <literal type="number" pos:start="351:38" pos:end="351:38">0</literal></expr>)</condition><block pos:start="351:40" pos:end="357:5">{<block_content pos:start="353:9" pos:end="355:18">

        <expr_stmt pos:start="353:9" pos:end="353:61"><expr pos:start="353:9" pos:end="353:60"><call pos:start="353:9" pos:end="353:60"><name pos:start="353:9" pos:end="353:14">av_log</name><argument_list pos:start="353:15" pos:end="353:60">(<argument pos:start="353:16" pos:end="353:20"><expr pos:start="353:16" pos:end="353:20"><name pos:start="353:16" pos:end="353:20">avctx</name></expr></argument>, <argument pos:start="353:23" pos:end="353:34"><expr pos:start="353:23" pos:end="353:34"><name pos:start="353:23" pos:end="353:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="353:37" pos:end="353:59"><expr pos:start="353:37" pos:end="353:59"><literal type="string" pos:start="353:37" pos:end="353:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="355:9" pos:end="355:18">return <expr pos:start="355:16" pos:end="355:17"><operator pos:start="355:16" pos:end="355:16">-</operator><literal type="number" pos:start="355:17" pos:end="355:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:37"><expr pos:start="359:5" pos:end="359:36"><name pos:start="359:5" pos:end="359:16"><name pos:start="359:5" pos:end="359:5">p</name><operator pos:start="359:6" pos:end="359:7">-&gt;</operator><name pos:start="359:8" pos:end="359:16">pict_type</name></name> <operator pos:start="359:18" pos:end="359:18">=</operator> <name pos:start="359:20" pos:end="359:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:21"><expr pos:start="361:5" pos:end="361:20"><name pos:start="361:5" pos:end="361:16"><name pos:start="361:5" pos:end="361:5">p</name><operator pos:start="361:6" pos:end="361:7">-&gt;</operator><name pos:start="361:8" pos:end="361:16">key_frame</name></name> <operator pos:start="361:18" pos:end="361:18">=</operator> <literal type="number" pos:start="361:20" pos:end="361:20">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="365:5" pos:end="365:23"><expr pos:start="365:5" pos:end="365:22"><name pos:start="365:5" pos:end="365:7">buf</name> <operator pos:start="365:9" pos:end="365:9">=</operator> <name pos:start="365:11" pos:end="365:14">buf0</name> <operator pos:start="365:16" pos:end="365:16">+</operator> <name pos:start="365:18" pos:end="365:22">hsize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:29"><expr pos:start="367:5" pos:end="367:28"><name pos:start="367:5" pos:end="367:9">dsize</name> <operator pos:start="367:11" pos:end="367:11">=</operator> <name pos:start="367:13" pos:end="367:20">buf_size</name> <operator pos:start="367:22" pos:end="367:22">-</operator> <name pos:start="367:24" pos:end="367:28">hsize</name></expr>;</expr_stmt>



    <comment type="block" pos:start="371:5" pos:end="371:41">/* Line size in file multiple of 4 */</comment>

    <expr_stmt pos:start="373:5" pos:end="373:47"><expr pos:start="373:5" pos:end="373:46"><name pos:start="373:5" pos:end="373:5">n</name> <operator pos:start="373:7" pos:end="373:7">=</operator> <operator pos:start="373:9" pos:end="373:9">(</operator><operator pos:start="373:10" pos:end="373:10">(</operator><name pos:start="373:11" pos:end="373:22"><name pos:start="373:11" pos:end="373:15">avctx</name><operator pos:start="373:16" pos:end="373:17">-&gt;</operator><name pos:start="373:18" pos:end="373:22">width</name></name> <operator pos:start="373:24" pos:end="373:24">*</operator> <name pos:start="373:26" pos:end="373:30">depth</name> <operator pos:start="373:32" pos:end="373:32">+</operator> <literal type="number" pos:start="373:34" pos:end="373:35">31</literal><operator pos:start="373:36" pos:end="373:36">)</operator> <operator pos:start="373:38" pos:end="373:38">/</operator> <literal type="number" pos:start="373:40" pos:end="373:40">8</literal><operator pos:start="373:41" pos:end="373:41">)</operator> <operator pos:start="373:43" pos:end="373:43">&amp;</operator> <operator pos:start="373:45" pos:end="373:45">~</operator><literal type="number" pos:start="373:46" pos:end="373:46">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="377:5" pos:end="385:5"><if pos:start="377:5" pos:end="385:5">if<condition pos:start="377:7" pos:end="377:73">(<expr pos:start="377:8" pos:end="377:72"><name pos:start="377:8" pos:end="377:8">n</name> <operator pos:start="377:10" pos:end="377:10">*</operator> <name pos:start="377:12" pos:end="377:24"><name pos:start="377:12" pos:end="377:16">avctx</name><operator pos:start="377:17" pos:end="377:18">-&gt;</operator><name pos:start="377:19" pos:end="377:24">height</name></name> <operator pos:start="377:26" pos:end="377:26">&gt;</operator> <name pos:start="377:28" pos:end="377:32">dsize</name> <operator pos:start="377:34" pos:end="377:35">&amp;&amp;</operator> <name pos:start="377:37" pos:end="377:40">comp</name> <operator pos:start="377:42" pos:end="377:43">!=</operator> <name pos:start="377:45" pos:end="377:52">BMP_RLE4</name> <operator pos:start="377:54" pos:end="377:55">&amp;&amp;</operator> <name pos:start="377:57" pos:end="377:60">comp</name> <operator pos:start="377:62" pos:end="377:63">!=</operator> <name pos:start="377:65" pos:end="377:72">BMP_RLE8</name></expr>)</condition><block pos:start="377:74" pos:end="385:5">{<block_content pos:start="379:9" pos:end="383:18">

        <expr_stmt pos:start="379:9" pos:end="381:41"><expr pos:start="379:9" pos:end="381:40"><call pos:start="379:9" pos:end="381:40"><name pos:start="379:9" pos:end="379:14">av_log</name><argument_list pos:start="379:15" pos:end="381:40">(<argument pos:start="379:16" pos:end="379:20"><expr pos:start="379:16" pos:end="379:20"><name pos:start="379:16" pos:end="379:20">avctx</name></expr></argument>, <argument pos:start="379:23" pos:end="379:34"><expr pos:start="379:23" pos:end="379:34"><name pos:start="379:23" pos:end="379:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="379:37" pos:end="379:65"><expr pos:start="379:37" pos:end="379:65"><literal type="string" pos:start="379:37" pos:end="379:65">"not enough data (%d &lt; %d)\n"</literal></expr></argument>,

               <argument pos:start="381:16" pos:end="381:20"><expr pos:start="381:16" pos:end="381:20"><name pos:start="381:16" pos:end="381:20">dsize</name></expr></argument>, <argument pos:start="381:23" pos:end="381:39"><expr pos:start="381:23" pos:end="381:39"><name pos:start="381:23" pos:end="381:23">n</name> <operator pos:start="381:25" pos:end="381:25">*</operator> <name pos:start="381:27" pos:end="381:39"><name pos:start="381:27" pos:end="381:31">avctx</name><operator pos:start="381:32" pos:end="381:33">-&gt;</operator><name pos:start="381:34" pos:end="381:39">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="383:9" pos:end="383:18">return <expr pos:start="383:16" pos:end="383:17"><operator pos:start="383:16" pos:end="383:16">-</operator><literal type="number" pos:start="383:17" pos:end="383:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="389:5" pos:end="389:81">// RLE may skip decoding some picture areas, so blank picture before decoding</comment>

    <if_stmt pos:start="391:5" pos:end="393:62"><if pos:start="391:5" pos:end="393:62">if<condition pos:start="391:7" pos:end="391:44">(<expr pos:start="391:8" pos:end="391:43"><name pos:start="391:8" pos:end="391:11">comp</name> <operator pos:start="391:13" pos:end="391:14">==</operator> <name pos:start="391:16" pos:end="391:23">BMP_RLE4</name> <operator pos:start="391:25" pos:end="391:26">||</operator> <name pos:start="391:28" pos:end="391:31">comp</name> <operator pos:start="391:33" pos:end="391:34">==</operator> <name pos:start="391:36" pos:end="391:43">BMP_RLE8</name></expr>)</condition><block type="pseudo" pos:start="393:9" pos:end="393:62"><block_content pos:start="393:9" pos:end="393:62">

        <expr_stmt pos:start="393:9" pos:end="393:62"><expr pos:start="393:9" pos:end="393:61"><call pos:start="393:9" pos:end="393:61"><name pos:start="393:9" pos:end="393:14">memset</name><argument_list pos:start="393:15" pos:end="393:61">(<argument pos:start="393:16" pos:end="393:25"><expr pos:start="393:16" pos:end="393:25"><name pos:start="393:16" pos:end="393:25"><name pos:start="393:16" pos:end="393:16">p</name><operator pos:start="393:17" pos:end="393:18">-&gt;</operator><name pos:start="393:19" pos:end="393:22">data</name><index pos:start="393:23" pos:end="393:25">[<expr pos:start="393:24" pos:end="393:24"><literal type="number" pos:start="393:24" pos:end="393:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="393:28" pos:end="393:28"><expr pos:start="393:28" pos:end="393:28"><literal type="number" pos:start="393:28" pos:end="393:28">0</literal></expr></argument>, <argument pos:start="393:31" pos:end="393:60"><expr pos:start="393:31" pos:end="393:60"><name pos:start="393:31" pos:end="393:43"><name pos:start="393:31" pos:end="393:35">avctx</name><operator pos:start="393:36" pos:end="393:37">-&gt;</operator><name pos:start="393:38" pos:end="393:43">height</name></name> <operator pos:start="393:45" pos:end="393:45">*</operator> <name pos:start="393:47" pos:end="393:60"><name pos:start="393:47" pos:end="393:47">p</name><operator pos:start="393:48" pos:end="393:49">-&gt;</operator><name pos:start="393:50" pos:end="393:57">linesize</name><index pos:start="393:58" pos:end="393:60">[<expr pos:start="393:59" pos:end="393:59"><literal type="number" pos:start="393:59" pos:end="393:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="397:5" pos:end="409:5"><if pos:start="397:5" pos:end="403:5">if<condition pos:start="397:7" pos:end="397:18">(<expr pos:start="397:8" pos:end="397:17"><name pos:start="397:8" pos:end="397:13">height</name> <operator pos:start="397:15" pos:end="397:15">&gt;</operator> <literal type="number" pos:start="397:17" pos:end="397:17">0</literal></expr>)</condition><block pos:start="397:19" pos:end="403:5">{<block_content pos:start="399:9" pos:end="401:35">

        <expr_stmt pos:start="399:9" pos:end="399:64"><expr pos:start="399:9" pos:end="399:63"><name pos:start="399:9" pos:end="399:11">ptr</name> <operator pos:start="399:13" pos:end="399:13">=</operator> <name pos:start="399:15" pos:end="399:24"><name pos:start="399:15" pos:end="399:15">p</name><operator pos:start="399:16" pos:end="399:17">-&gt;</operator><name pos:start="399:18" pos:end="399:21">data</name><index pos:start="399:22" pos:end="399:24">[<expr pos:start="399:23" pos:end="399:23"><literal type="number" pos:start="399:23" pos:end="399:23">0</literal></expr>]</index></name> <operator pos:start="399:26" pos:end="399:26">+</operator> <operator pos:start="399:28" pos:end="399:28">(</operator><name pos:start="399:29" pos:end="399:41"><name pos:start="399:29" pos:end="399:33">avctx</name><operator pos:start="399:34" pos:end="399:35">-&gt;</operator><name pos:start="399:36" pos:end="399:41">height</name></name> <operator pos:start="399:43" pos:end="399:43">-</operator> <literal type="number" pos:start="399:45" pos:end="399:45">1</literal><operator pos:start="399:46" pos:end="399:46">)</operator> <operator pos:start="399:48" pos:end="399:48">*</operator> <name pos:start="399:50" pos:end="399:63"><name pos:start="399:50" pos:end="399:50">p</name><operator pos:start="399:51" pos:end="399:52">-&gt;</operator><name pos:start="399:53" pos:end="399:60">linesize</name><index pos:start="399:61" pos:end="399:63">[<expr pos:start="399:62" pos:end="399:62"><literal type="number" pos:start="399:62" pos:end="399:62">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:35"><expr pos:start="401:9" pos:end="401:34"><name pos:start="401:9" pos:end="401:16">linesize</name> <operator pos:start="401:18" pos:end="401:18">=</operator> <operator pos:start="401:20" pos:end="401:20">-</operator><name pos:start="401:21" pos:end="401:34"><name pos:start="401:21" pos:end="401:21">p</name><operator pos:start="401:22" pos:end="401:23">-&gt;</operator><name pos:start="401:24" pos:end="401:31">linesize</name><index pos:start="401:32" pos:end="401:34">[<expr pos:start="401:33" pos:end="401:33"><literal type="number" pos:start="401:33" pos:end="401:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="403:7" pos:end="409:5">else <block pos:start="403:12" pos:end="409:5">{<block_content pos:start="405:9" pos:end="407:34">

        <expr_stmt pos:start="405:9" pos:end="405:25"><expr pos:start="405:9" pos:end="405:24"><name pos:start="405:9" pos:end="405:11">ptr</name> <operator pos:start="405:13" pos:end="405:13">=</operator> <name pos:start="405:15" pos:end="405:24"><name pos:start="405:15" pos:end="405:15">p</name><operator pos:start="405:16" pos:end="405:17">-&gt;</operator><name pos:start="405:18" pos:end="405:21">data</name><index pos:start="405:22" pos:end="405:24">[<expr pos:start="405:23" pos:end="405:23"><literal type="number" pos:start="405:23" pos:end="405:23">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:34"><expr pos:start="407:9" pos:end="407:33"><name pos:start="407:9" pos:end="407:16">linesize</name> <operator pos:start="407:18" pos:end="407:18">=</operator> <name pos:start="407:20" pos:end="407:33"><name pos:start="407:20" pos:end="407:20">p</name><operator pos:start="407:21" pos:end="407:22">-&gt;</operator><name pos:start="407:23" pos:end="407:30">linesize</name><index pos:start="407:31" pos:end="407:33">[<expr pos:start="407:32" pos:end="407:32"><literal type="number" pos:start="407:32" pos:end="407:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="413:5" pos:end="461:5"><if pos:start="413:5" pos:end="461:5">if<condition pos:start="413:7" pos:end="413:41">(<expr pos:start="413:8" pos:end="413:40"><name pos:start="413:8" pos:end="413:21"><name pos:start="413:8" pos:end="413:12">avctx</name><operator pos:start="413:13" pos:end="413:14">-&gt;</operator><name pos:start="413:15" pos:end="413:21">pix_fmt</name></name> <operator pos:start="413:23" pos:end="413:24">==</operator> <name pos:start="413:26" pos:end="413:40">AV_PIX_FMT_PAL8</name></expr>)</condition><block pos:start="413:42" pos:end="461:5">{<block_content pos:start="415:9" pos:end="459:27">

        <decl_stmt pos:start="415:9" pos:end="415:32"><decl pos:start="415:9" pos:end="415:31"><type pos:start="415:9" pos:end="415:11"><name pos:start="415:9" pos:end="415:11">int</name></type> <name pos:start="415:13" pos:end="415:18">colors</name> <init pos:start="415:20" pos:end="415:31">= <expr pos:start="415:22" pos:end="415:31"><literal type="number" pos:start="415:22" pos:end="415:22">1</literal> <operator pos:start="415:24" pos:end="415:25">&lt;&lt;</operator> <name pos:start="415:27" pos:end="415:31">depth</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="419:9" pos:end="419:36"><expr pos:start="419:9" pos:end="419:35"><call pos:start="419:9" pos:end="419:35"><name pos:start="419:9" pos:end="419:14">memset</name><argument_list pos:start="419:15" pos:end="419:35">(<argument pos:start="419:16" pos:end="419:25"><expr pos:start="419:16" pos:end="419:25"><name pos:start="419:16" pos:end="419:25"><name pos:start="419:16" pos:end="419:16">p</name><operator pos:start="419:17" pos:end="419:18">-&gt;</operator><name pos:start="419:19" pos:end="419:22">data</name><index pos:start="419:23" pos:end="419:25">[<expr pos:start="419:24" pos:end="419:24"><literal type="number" pos:start="419:24" pos:end="419:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="419:28" pos:end="419:28"><expr pos:start="419:28" pos:end="419:28"><literal type="number" pos:start="419:28" pos:end="419:28">0</literal></expr></argument>, <argument pos:start="419:31" pos:end="419:34"><expr pos:start="419:31" pos:end="419:34"><literal type="number" pos:start="419:31" pos:end="419:34">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="423:9" pos:end="441:9"><if pos:start="423:9" pos:end="441:9">if<condition pos:start="423:11" pos:end="423:24">(<expr pos:start="423:12" pos:end="423:23"><name pos:start="423:12" pos:end="423:17">ihsize</name> <operator pos:start="423:19" pos:end="423:20">&gt;=</operator> <literal type="number" pos:start="423:22" pos:end="423:23">36</literal></expr>)</condition><block pos:start="423:25" pos:end="441:9">{<block_content pos:start="425:13" pos:end="439:13">

            <decl_stmt pos:start="425:13" pos:end="425:18"><decl pos:start="425:13" pos:end="425:17"><type pos:start="425:13" pos:end="425:15"><name pos:start="425:13" pos:end="425:15">int</name></type> <name pos:start="425:17" pos:end="425:17">t</name></decl>;</decl_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:28"><expr pos:start="427:13" pos:end="427:27"><name pos:start="427:13" pos:end="427:15">buf</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <name pos:start="427:19" pos:end="427:22">buf0</name> <operator pos:start="427:24" pos:end="427:24">+</operator> <literal type="number" pos:start="427:26" pos:end="427:27">46</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:42"><expr pos:start="429:13" pos:end="429:41"><name pos:start="429:13" pos:end="429:13">t</name> <operator pos:start="429:15" pos:end="429:15">=</operator> <call pos:start="429:17" pos:end="429:41"><name pos:start="429:17" pos:end="429:35">bytestream_get_le32</name><argument_list pos:start="429:36" pos:end="429:41">(<argument pos:start="429:37" pos:end="429:40"><expr pos:start="429:37" pos:end="429:40"><operator pos:start="429:37" pos:end="429:37">&amp;</operator><name pos:start="429:38" pos:end="429:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="431:13" pos:end="439:13"><if pos:start="431:13" pos:end="435:13">if<condition pos:start="431:15" pos:end="431:41">(<expr pos:start="431:16" pos:end="431:40"><call pos:start="431:16" pos:end="431:40"><name pos:start="431:16" pos:end="431:27"><name pos:start="431:16" pos:end="431:16">t</name> <argument_list type="generic" pos:start="431:18" pos:end="431:27">&lt; <argument pos:start="431:20" pos:end="431:25"><expr pos:start="431:20" pos:end="431:25"><literal type="number" pos:start="431:20" pos:end="431:20">0</literal> <operator pos:start="431:22" pos:end="431:23">||</operator> <name pos:start="431:25" pos:end="431:25">t</name></expr></argument> &gt;</argument_list></name> <argument_list pos:start="431:29" pos:end="431:40">(<argument pos:start="431:30" pos:end="431:39"><expr pos:start="431:30" pos:end="431:39"><literal type="number" pos:start="431:30" pos:end="431:30">1</literal> <operator pos:start="431:32" pos:end="431:33">&lt;&lt;</operator> <name pos:start="431:35" pos:end="431:39">depth</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="431:42" pos:end="435:13">{<block_content pos:start="433:17" pos:end="433:107">

                <expr_stmt pos:start="433:17" pos:end="433:107"><expr pos:start="433:17" pos:end="433:106"><call pos:start="433:17" pos:end="433:106"><name pos:start="433:17" pos:end="433:22">av_log</name><argument_list pos:start="433:23" pos:end="433:106">(<argument pos:start="433:24" pos:end="433:28"><expr pos:start="433:24" pos:end="433:28"><name pos:start="433:24" pos:end="433:28">avctx</name></expr></argument>, <argument pos:start="433:31" pos:end="433:42"><expr pos:start="433:31" pos:end="433:42"><name pos:start="433:31" pos:end="433:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="433:45" pos:end="433:95"><expr pos:start="433:45" pos:end="433:95"><literal type="string" pos:start="433:45" pos:end="433:95">"Incorrect number of colors - %X for bitdepth %d\n"</literal></expr></argument>, <argument pos:start="433:98" pos:end="433:98"><expr pos:start="433:98" pos:end="433:98"><name pos:start="433:98" pos:end="433:98">t</name></expr></argument>, <argument pos:start="433:101" pos:end="433:105"><expr pos:start="433:101" pos:end="433:105"><name pos:start="433:101" pos:end="433:105">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if><if type="elseif" pos:start="435:14" pos:end="439:13">else if<condition pos:start="435:21" pos:end="435:23">(<expr pos:start="435:22" pos:end="435:22"><name pos:start="435:22" pos:end="435:22">t</name></expr>)</condition><block pos:start="435:24" pos:end="439:13">{<block_content pos:start="437:17" pos:end="437:27">

                <expr_stmt pos:start="437:17" pos:end="437:27"><expr pos:start="437:17" pos:end="437:26"><name pos:start="437:17" pos:end="437:22">colors</name> <operator pos:start="437:24" pos:end="437:24">=</operator> <name pos:start="437:26" pos:end="437:26">t</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:33"><expr pos:start="443:9" pos:end="443:32"><name pos:start="443:9" pos:end="443:11">buf</name> <operator pos:start="443:13" pos:end="443:13">=</operator> <name pos:start="443:15" pos:end="443:18">buf0</name> <operator pos:start="443:20" pos:end="443:20">+</operator> <literal type="number" pos:start="443:22" pos:end="443:25">14</literal> <operator pos:start="443:25" pos:end="443:25">+</operator> <name pos:start="443:27" pos:end="443:32">ihsize</name></expr>;</expr_stmt> <comment type="line" pos:start="443:35" pos:end="443:52">//palette location</comment>

        <if_stmt pos:start="445:9" pos:end="457:9"><if pos:start="445:9" pos:end="451:9">if<condition pos:start="445:11" pos:end="445:45">(<expr pos:start="445:12" pos:end="445:44"><operator pos:start="445:12" pos:end="445:12">(</operator><name pos:start="445:13" pos:end="445:17">hsize</name><operator pos:start="445:18" pos:end="445:18">-</operator><name pos:start="445:19" pos:end="445:24">ihsize</name><operator pos:start="445:25" pos:end="445:25">-</operator><literal type="number" pos:start="445:26" pos:end="445:27">14</literal><operator pos:start="445:28" pos:end="445:28">)</operator> <operator pos:start="445:30" pos:end="445:30">&lt;</operator> <operator pos:start="445:32" pos:end="445:32">(</operator><name pos:start="445:33" pos:end="445:38">colors</name> <operator pos:start="445:40" pos:end="445:41">&lt;&lt;</operator> <literal type="number" pos:start="445:43" pos:end="445:43">2</literal><operator pos:start="445:44" pos:end="445:44">)</operator></expr>)</condition><block pos:start="445:46" pos:end="451:9">{<block_content pos:start="447:13" pos:end="449:84"> <comment type="line" pos:start="445:48" pos:end="445:88">// OS/2 bitmap, 3 bytes per palette entry</comment>

            <for pos:start="447:13" pos:end="449:84">for<control pos:start="447:16" pos:end="447:39">(<init pos:start="447:17" pos:end="447:22"><expr pos:start="447:17" pos:end="447:21"><name pos:start="447:17" pos:end="447:17">i</name> <operator pos:start="447:19" pos:end="447:19">=</operator> <literal type="number" pos:start="447:21" pos:end="447:21">0</literal></expr>;</init> <condition pos:start="447:24" pos:end="447:34"><expr pos:start="447:24" pos:end="447:33"><name pos:start="447:24" pos:end="447:24">i</name> <operator pos:start="447:26" pos:end="447:26">&lt;</operator> <name pos:start="447:28" pos:end="447:33">colors</name></expr>;</condition> <incr pos:start="447:36" pos:end="447:38"><expr pos:start="447:36" pos:end="447:38"><name pos:start="447:36" pos:end="447:36">i</name><operator pos:start="447:37" pos:end="447:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="449:17" pos:end="449:84"><block_content pos:start="449:17" pos:end="449:84">

                <expr_stmt pos:start="449:17" pos:end="449:84"><expr pos:start="449:17" pos:end="449:83"><operator pos:start="449:17" pos:end="449:17">(</operator><operator pos:start="449:18" pos:end="449:18">(</operator><name pos:start="449:19" pos:end="449:26">uint32_t</name><operator pos:start="449:27" pos:end="449:27">*</operator><operator pos:start="449:28" pos:end="449:28">)</operator><name pos:start="449:29" pos:end="449:38"><name pos:start="449:29" pos:end="449:29">p</name><operator pos:start="449:30" pos:end="449:31">-&gt;</operator><name pos:start="449:32" pos:end="449:35">data</name><index pos:start="449:36" pos:end="449:38">[<expr pos:start="449:37" pos:end="449:37"><literal type="number" pos:start="449:37" pos:end="449:37">1</literal></expr>]</index></name><operator pos:start="449:39" pos:end="449:39">)</operator><index pos:start="449:40" pos:end="449:42">[<expr pos:start="449:41" pos:end="449:41"><name pos:start="449:41" pos:end="449:41">i</name></expr>]</index> <operator pos:start="449:44" pos:end="449:44">=</operator> <operator pos:start="449:46" pos:end="449:46">(</operator><literal type="number" pos:start="449:47" pos:end="449:50">0xff</literal><operator pos:start="449:51" pos:end="449:52">&lt;&lt;</operator><literal type="number" pos:start="449:53" pos:end="449:54">24</literal><operator pos:start="449:55" pos:end="449:55">)</operator> <operator pos:start="449:57" pos:end="449:57">|</operator> <call pos:start="449:59" pos:end="449:83"><name pos:start="449:59" pos:end="449:77">bytestream_get_le24</name><argument_list pos:start="449:78" pos:end="449:83">(<argument pos:start="449:79" pos:end="449:82"><expr pos:start="449:79" pos:end="449:82"><operator pos:start="449:79" pos:end="449:79">&amp;</operator><name pos:start="449:80" pos:end="449:82">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if><else pos:start="451:10" pos:end="457:9">else<block pos:start="451:14" pos:end="457:9">{<block_content pos:start="453:13" pos:end="455:85">

            <for pos:start="453:13" pos:end="455:85">for<control pos:start="453:16" pos:end="453:39">(<init pos:start="453:17" pos:end="453:22"><expr pos:start="453:17" pos:end="453:21"><name pos:start="453:17" pos:end="453:17">i</name> <operator pos:start="453:19" pos:end="453:19">=</operator> <literal type="number" pos:start="453:21" pos:end="453:21">0</literal></expr>;</init> <condition pos:start="453:24" pos:end="453:34"><expr pos:start="453:24" pos:end="453:33"><name pos:start="453:24" pos:end="453:24">i</name> <operator pos:start="453:26" pos:end="453:26">&lt;</operator> <name pos:start="453:28" pos:end="453:33">colors</name></expr>;</condition> <incr pos:start="453:36" pos:end="453:38"><expr pos:start="453:36" pos:end="453:38"><name pos:start="453:36" pos:end="453:36">i</name><operator pos:start="453:37" pos:end="453:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="455:17" pos:end="455:85"><block_content pos:start="455:17" pos:end="455:85">

                <expr_stmt pos:start="455:17" pos:end="455:85"><expr pos:start="455:17" pos:end="455:84"><operator pos:start="455:17" pos:end="455:17">(</operator><operator pos:start="455:18" pos:end="455:18">(</operator><name pos:start="455:19" pos:end="455:26">uint32_t</name><operator pos:start="455:27" pos:end="455:27">*</operator><operator pos:start="455:28" pos:end="455:28">)</operator><name pos:start="455:29" pos:end="455:38"><name pos:start="455:29" pos:end="455:29">p</name><operator pos:start="455:30" pos:end="455:31">-&gt;</operator><name pos:start="455:32" pos:end="455:35">data</name><index pos:start="455:36" pos:end="455:38">[<expr pos:start="455:37" pos:end="455:37"><literal type="number" pos:start="455:37" pos:end="455:37">1</literal></expr>]</index></name><operator pos:start="455:39" pos:end="455:39">)</operator><index pos:start="455:40" pos:end="455:42">[<expr pos:start="455:41" pos:end="455:41"><name pos:start="455:41" pos:end="455:41">i</name></expr>]</index> <operator pos:start="455:44" pos:end="455:44">=</operator> <literal type="number" pos:start="455:46" pos:end="455:50">0xFFU</literal> <operator pos:start="455:52" pos:end="455:53">&lt;&lt;</operator> <literal type="number" pos:start="455:55" pos:end="455:56">24</literal> <operator pos:start="455:58" pos:end="455:58">|</operator> <call pos:start="455:60" pos:end="455:84"><name pos:start="455:60" pos:end="455:78">bytestream_get_le32</name><argument_list pos:start="455:79" pos:end="455:84">(<argument pos:start="455:80" pos:end="455:83"><expr pos:start="455:80" pos:end="455:83"><operator pos:start="455:80" pos:end="455:80">&amp;</operator><name pos:start="455:81" pos:end="455:83">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:27"><expr pos:start="459:9" pos:end="459:26"><name pos:start="459:9" pos:end="459:11">buf</name> <operator pos:start="459:13" pos:end="459:13">=</operator> <name pos:start="459:15" pos:end="459:18">buf0</name> <operator pos:start="459:20" pos:end="459:20">+</operator> <name pos:start="459:22" pos:end="459:26">hsize</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="463:5" pos:end="595:5"><if pos:start="463:5" pos:end="485:5">if<condition pos:start="463:7" pos:end="463:44">(<expr pos:start="463:8" pos:end="463:43"><name pos:start="463:8" pos:end="463:11">comp</name> <operator pos:start="463:13" pos:end="463:14">==</operator> <name pos:start="463:16" pos:end="463:23">BMP_RLE4</name> <operator pos:start="463:25" pos:end="463:26">||</operator> <name pos:start="463:28" pos:end="463:31">comp</name> <operator pos:start="463:33" pos:end="463:34">==</operator> <name pos:start="463:36" pos:end="463:43">BMP_RLE8</name></expr>)</condition><block pos:start="463:45" pos:end="485:5">{<block_content pos:start="465:9" pos:end="483:9">

        <if_stmt pos:start="465:9" pos:end="471:9"><if pos:start="465:9" pos:end="471:9">if<condition pos:start="465:11" pos:end="465:22">(<expr pos:start="465:12" pos:end="465:21"><name pos:start="465:12" pos:end="465:17">height</name> <operator pos:start="465:19" pos:end="465:19">&lt;</operator> <literal type="number" pos:start="465:21" pos:end="465:21">0</literal></expr>)</condition><block pos:start="465:23" pos:end="471:9">{<block_content pos:start="467:13" pos:end="469:45">

            <expr_stmt pos:start="467:13" pos:end="467:63"><expr pos:start="467:13" pos:end="467:62"><name pos:start="467:13" pos:end="467:22"><name pos:start="467:13" pos:end="467:13">p</name><operator pos:start="467:14" pos:end="467:15">-&gt;</operator><name pos:start="467:16" pos:end="467:19">data</name><index pos:start="467:20" pos:end="467:22">[<expr pos:start="467:21" pos:end="467:21"><literal type="number" pos:start="467:21" pos:end="467:21">0</literal></expr>]</index></name> <operator pos:start="467:24" pos:end="467:25">+=</operator> <name pos:start="467:27" pos:end="467:40"><name pos:start="467:27" pos:end="467:27">p</name><operator pos:start="467:28" pos:end="467:29">-&gt;</operator><name pos:start="467:30" pos:end="467:37">linesize</name><index pos:start="467:38" pos:end="467:40">[<expr pos:start="467:39" pos:end="467:39"><literal type="number" pos:start="467:39" pos:end="467:39">0</literal></expr>]</index></name> <operator pos:start="467:42" pos:end="467:42">*</operator> <operator pos:start="467:44" pos:end="467:44">(</operator><name pos:start="467:45" pos:end="467:57"><name pos:start="467:45" pos:end="467:49">avctx</name><operator pos:start="467:50" pos:end="467:51">-&gt;</operator><name pos:start="467:52" pos:end="467:57">height</name></name> <operator pos:start="467:59" pos:end="467:59">-</operator> <literal type="number" pos:start="467:61" pos:end="467:61">1</literal><operator pos:start="467:62" pos:end="467:62">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:45"><expr pos:start="469:13" pos:end="469:44"><name pos:start="469:13" pos:end="469:26"><name pos:start="469:13" pos:end="469:13">p</name><operator pos:start="469:14" pos:end="469:15">-&gt;</operator><name pos:start="469:16" pos:end="469:23">linesize</name><index pos:start="469:24" pos:end="469:26">[<expr pos:start="469:25" pos:end="469:25"><literal type="number" pos:start="469:25" pos:end="469:25">0</literal></expr>]</index></name> <operator pos:start="469:28" pos:end="469:28">=</operator> <operator pos:start="469:30" pos:end="469:30">-</operator><name pos:start="469:31" pos:end="469:44"><name pos:start="469:31" pos:end="469:31">p</name><operator pos:start="469:32" pos:end="469:33">-&gt;</operator><name pos:start="469:34" pos:end="469:41">linesize</name><index pos:start="469:42" pos:end="469:44">[<expr pos:start="469:43" pos:end="469:43"><literal type="number" pos:start="469:43" pos:end="469:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="473:9" pos:end="473:42"><expr pos:start="473:9" pos:end="473:41"><call pos:start="473:9" pos:end="473:41"><name pos:start="473:9" pos:end="473:24">bytestream2_init</name><argument_list pos:start="473:25" pos:end="473:41">(<argument pos:start="473:26" pos:end="473:28"><expr pos:start="473:26" pos:end="473:28"><operator pos:start="473:26" pos:end="473:26">&amp;</operator><name pos:start="473:27" pos:end="473:28">gb</name></expr></argument>, <argument pos:start="473:31" pos:end="473:33"><expr pos:start="473:31" pos:end="473:33"><name pos:start="473:31" pos:end="473:33">buf</name></expr></argument>, <argument pos:start="473:36" pos:end="473:40"><expr pos:start="473:36" pos:end="473:40"><name pos:start="473:36" pos:end="473:40">dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="475:9" pos:end="475:58"><expr pos:start="475:9" pos:end="475:57"><call pos:start="475:9" pos:end="475:57"><name pos:start="475:9" pos:end="475:23">ff_msrle_decode</name><argument_list pos:start="475:24" pos:end="475:57">(<argument pos:start="475:25" pos:end="475:29"><expr pos:start="475:25" pos:end="475:29"><name pos:start="475:25" pos:end="475:29">avctx</name></expr></argument>, <argument pos:start="475:32" pos:end="475:44"><expr pos:start="475:32" pos:end="475:44"><operator pos:start="475:32" pos:end="475:32">(</operator><name pos:start="475:33" pos:end="475:41">AVPicture</name><operator pos:start="475:42" pos:end="475:42">*</operator><operator pos:start="475:43" pos:end="475:43">)</operator><name pos:start="475:44" pos:end="475:44">p</name></expr></argument>, <argument pos:start="475:47" pos:end="475:51"><expr pos:start="475:47" pos:end="475:51"><name pos:start="475:47" pos:end="475:51">depth</name></expr></argument>, <argument pos:start="475:54" pos:end="475:56"><expr pos:start="475:54" pos:end="475:56"><operator pos:start="475:54" pos:end="475:54">&amp;</operator><name pos:start="475:55" pos:end="475:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="477:9" pos:end="483:9"><if pos:start="477:9" pos:end="483:9">if<condition pos:start="477:11" pos:end="477:22">(<expr pos:start="477:12" pos:end="477:21"><name pos:start="477:12" pos:end="477:17">height</name> <operator pos:start="477:19" pos:end="477:19">&lt;</operator> <literal type="number" pos:start="477:21" pos:end="477:21">0</literal></expr>)</condition><block pos:start="477:23" pos:end="483:9">{<block_content pos:start="479:13" pos:end="481:45">

            <expr_stmt pos:start="479:13" pos:end="479:63"><expr pos:start="479:13" pos:end="479:62"><name pos:start="479:13" pos:end="479:22"><name pos:start="479:13" pos:end="479:13">p</name><operator pos:start="479:14" pos:end="479:15">-&gt;</operator><name pos:start="479:16" pos:end="479:19">data</name><index pos:start="479:20" pos:end="479:22">[<expr pos:start="479:21" pos:end="479:21"><literal type="number" pos:start="479:21" pos:end="479:21">0</literal></expr>]</index></name> <operator pos:start="479:24" pos:end="479:25">+=</operator> <name pos:start="479:27" pos:end="479:40"><name pos:start="479:27" pos:end="479:27">p</name><operator pos:start="479:28" pos:end="479:29">-&gt;</operator><name pos:start="479:30" pos:end="479:37">linesize</name><index pos:start="479:38" pos:end="479:40">[<expr pos:start="479:39" pos:end="479:39"><literal type="number" pos:start="479:39" pos:end="479:39">0</literal></expr>]</index></name> <operator pos:start="479:42" pos:end="479:42">*</operator> <operator pos:start="479:44" pos:end="479:44">(</operator><name pos:start="479:45" pos:end="479:57"><name pos:start="479:45" pos:end="479:49">avctx</name><operator pos:start="479:50" pos:end="479:51">-&gt;</operator><name pos:start="479:52" pos:end="479:57">height</name></name> <operator pos:start="479:59" pos:end="479:59">-</operator> <literal type="number" pos:start="479:61" pos:end="479:61">1</literal><operator pos:start="479:62" pos:end="479:62">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:45"><expr pos:start="481:13" pos:end="481:44"><name pos:start="481:13" pos:end="481:26"><name pos:start="481:13" pos:end="481:13">p</name><operator pos:start="481:14" pos:end="481:15">-&gt;</operator><name pos:start="481:16" pos:end="481:23">linesize</name><index pos:start="481:24" pos:end="481:26">[<expr pos:start="481:25" pos:end="481:25"><literal type="number" pos:start="481:25" pos:end="481:25">0</literal></expr>]</index></name> <operator pos:start="481:28" pos:end="481:28">=</operator> <operator pos:start="481:30" pos:end="481:30">-</operator><name pos:start="481:31" pos:end="481:44"><name pos:start="481:31" pos:end="481:31">p</name><operator pos:start="481:32" pos:end="481:33">-&gt;</operator><name pos:start="481:34" pos:end="481:41">linesize</name><index pos:start="481:42" pos:end="481:44">[<expr pos:start="481:43" pos:end="481:43"><literal type="number" pos:start="481:43" pos:end="481:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if><else pos:start="485:6" pos:end="595:5">else<block pos:start="485:10" pos:end="595:5">{<block_content pos:start="487:9" pos:end="593:9">

        <switch pos:start="487:9" pos:end="593:9">switch<condition pos:start="487:15" pos:end="487:21">(<expr pos:start="487:16" pos:end="487:20"><name pos:start="487:16" pos:end="487:20">depth</name></expr>)</condition><block pos:start="487:22" pos:end="593:9">{<block_content pos:start="489:9" pos:end="591:22">

        <case pos:start="489:9" pos:end="489:15">case <expr pos:start="489:14" pos:end="489:14"><literal type="number" pos:start="489:14" pos:end="489:14">1</literal></expr>:</case>

            <for pos:start="491:13" pos:end="519:13">for <control pos:start="491:17" pos:end="491:47">(<init pos:start="491:18" pos:end="491:23"><expr pos:start="491:18" pos:end="491:22"><name pos:start="491:18" pos:end="491:18">i</name> <operator pos:start="491:20" pos:end="491:20">=</operator> <literal type="number" pos:start="491:22" pos:end="491:22">0</literal></expr>;</init> <condition pos:start="491:25" pos:end="491:42"><expr pos:start="491:25" pos:end="491:41"><name pos:start="491:25" pos:end="491:25">i</name> <operator pos:start="491:27" pos:end="491:27">&lt;</operator> <name pos:start="491:29" pos:end="491:41"><name pos:start="491:29" pos:end="491:33">avctx</name><operator pos:start="491:34" pos:end="491:35">-&gt;</operator><name pos:start="491:36" pos:end="491:41">height</name></name></expr>;</condition> <incr pos:start="491:44" pos:end="491:46"><expr pos:start="491:44" pos:end="491:46"><name pos:start="491:44" pos:end="491:44">i</name><operator pos:start="491:45" pos:end="491:46">++</operator></expr></incr>)</control> <block pos:start="491:49" pos:end="519:13">{<block_content pos:start="493:17" pos:end="517:32">

                <decl_stmt pos:start="493:17" pos:end="493:22"><decl pos:start="493:17" pos:end="493:21"><type pos:start="493:17" pos:end="493:19"><name pos:start="493:17" pos:end="493:19">int</name></type> <name pos:start="493:21" pos:end="493:21">j</name></decl>;</decl_stmt>

                <for pos:start="495:17" pos:end="513:17">for <control pos:start="495:21" pos:end="495:39">(<init pos:start="495:22" pos:end="495:27"><expr pos:start="495:22" pos:end="495:26"><name pos:start="495:22" pos:end="495:22">j</name> <operator pos:start="495:24" pos:end="495:24">=</operator> <literal type="number" pos:start="495:26" pos:end="495:26">0</literal></expr>;</init> <condition pos:start="495:29" pos:end="495:34"><expr pos:start="495:29" pos:end="495:33"><name pos:start="495:29" pos:end="495:29">j</name> <operator pos:start="495:31" pos:end="495:31">&lt;</operator> <name pos:start="495:33" pos:end="495:33">n</name></expr>;</condition> <incr pos:start="495:36" pos:end="495:38"><expr pos:start="495:36" pos:end="495:38"><name pos:start="495:36" pos:end="495:36">j</name><operator pos:start="495:37" pos:end="495:38">++</operator></expr></incr>)</control> <block pos:start="495:41" pos:end="513:17">{<block_content pos:start="497:21" pos:end="511:51">

                    <expr_stmt pos:start="497:21" pos:end="497:46"><expr pos:start="497:21" pos:end="497:45"><name pos:start="497:21" pos:end="497:30"><name pos:start="497:21" pos:end="497:23">ptr</name><index pos:start="497:24" pos:end="497:30">[<expr pos:start="497:25" pos:end="497:29"><name pos:start="497:25" pos:end="497:25">j</name><operator pos:start="497:26" pos:end="497:26">*</operator><literal type="number" pos:start="497:27" pos:end="497:27">8</literal><operator pos:start="497:28" pos:end="497:28">+</operator><literal type="number" pos:start="497:29" pos:end="497:29">0</literal></expr>]</index></name> <operator pos:start="497:32" pos:end="497:32">=</operator>  <name pos:start="497:35" pos:end="497:40"><name pos:start="497:35" pos:end="497:37">buf</name><index pos:start="497:38" pos:end="497:40">[<expr pos:start="497:39" pos:end="497:39"><name pos:start="497:39" pos:end="497:39">j</name></expr>]</index></name> <operator pos:start="497:42" pos:end="497:43">&gt;&gt;</operator> <literal type="number" pos:start="497:45" pos:end="497:45">7</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="499:21" pos:end="499:51"><expr pos:start="499:21" pos:end="499:50"><name pos:start="499:21" pos:end="499:30"><name pos:start="499:21" pos:end="499:23">ptr</name><index pos:start="499:24" pos:end="499:30">[<expr pos:start="499:25" pos:end="499:29"><name pos:start="499:25" pos:end="499:25">j</name><operator pos:start="499:26" pos:end="499:26">*</operator><literal type="number" pos:start="499:27" pos:end="499:27">8</literal><operator pos:start="499:28" pos:end="499:28">+</operator><literal type="number" pos:start="499:29" pos:end="499:29">1</literal></expr>]</index></name> <operator pos:start="499:32" pos:end="499:32">=</operator> <operator pos:start="499:34" pos:end="499:34">(</operator><name pos:start="499:35" pos:end="499:40"><name pos:start="499:35" pos:end="499:37">buf</name><index pos:start="499:38" pos:end="499:40">[<expr pos:start="499:39" pos:end="499:39"><name pos:start="499:39" pos:end="499:39">j</name></expr>]</index></name> <operator pos:start="499:42" pos:end="499:43">&gt;&gt;</operator> <literal type="number" pos:start="499:45" pos:end="499:45">6</literal><operator pos:start="499:46" pos:end="499:46">)</operator> <operator pos:start="499:48" pos:end="499:48">&amp;</operator> <literal type="number" pos:start="499:50" pos:end="499:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="501:21" pos:end="501:51"><expr pos:start="501:21" pos:end="501:50"><name pos:start="501:21" pos:end="501:30"><name pos:start="501:21" pos:end="501:23">ptr</name><index pos:start="501:24" pos:end="501:30">[<expr pos:start="501:25" pos:end="501:29"><name pos:start="501:25" pos:end="501:25">j</name><operator pos:start="501:26" pos:end="501:26">*</operator><literal type="number" pos:start="501:27" pos:end="501:27">8</literal><operator pos:start="501:28" pos:end="501:28">+</operator><literal type="number" pos:start="501:29" pos:end="501:29">2</literal></expr>]</index></name> <operator pos:start="501:32" pos:end="501:32">=</operator> <operator pos:start="501:34" pos:end="501:34">(</operator><name pos:start="501:35" pos:end="501:40"><name pos:start="501:35" pos:end="501:37">buf</name><index pos:start="501:38" pos:end="501:40">[<expr pos:start="501:39" pos:end="501:39"><name pos:start="501:39" pos:end="501:39">j</name></expr>]</index></name> <operator pos:start="501:42" pos:end="501:43">&gt;&gt;</operator> <literal type="number" pos:start="501:45" pos:end="501:45">5</literal><operator pos:start="501:46" pos:end="501:46">)</operator> <operator pos:start="501:48" pos:end="501:48">&amp;</operator> <literal type="number" pos:start="501:50" pos:end="501:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="503:21" pos:end="503:51"><expr pos:start="503:21" pos:end="503:50"><name pos:start="503:21" pos:end="503:30"><name pos:start="503:21" pos:end="503:23">ptr</name><index pos:start="503:24" pos:end="503:30">[<expr pos:start="503:25" pos:end="503:29"><name pos:start="503:25" pos:end="503:25">j</name><operator pos:start="503:26" pos:end="503:26">*</operator><literal type="number" pos:start="503:27" pos:end="503:27">8</literal><operator pos:start="503:28" pos:end="503:28">+</operator><literal type="number" pos:start="503:29" pos:end="503:29">3</literal></expr>]</index></name> <operator pos:start="503:32" pos:end="503:32">=</operator> <operator pos:start="503:34" pos:end="503:34">(</operator><name pos:start="503:35" pos:end="503:40"><name pos:start="503:35" pos:end="503:37">buf</name><index pos:start="503:38" pos:end="503:40">[<expr pos:start="503:39" pos:end="503:39"><name pos:start="503:39" pos:end="503:39">j</name></expr>]</index></name> <operator pos:start="503:42" pos:end="503:43">&gt;&gt;</operator> <literal type="number" pos:start="503:45" pos:end="503:45">4</literal><operator pos:start="503:46" pos:end="503:46">)</operator> <operator pos:start="503:48" pos:end="503:48">&amp;</operator> <literal type="number" pos:start="503:50" pos:end="503:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="505:21" pos:end="505:51"><expr pos:start="505:21" pos:end="505:50"><name pos:start="505:21" pos:end="505:30"><name pos:start="505:21" pos:end="505:23">ptr</name><index pos:start="505:24" pos:end="505:30">[<expr pos:start="505:25" pos:end="505:29"><name pos:start="505:25" pos:end="505:25">j</name><operator pos:start="505:26" pos:end="505:26">*</operator><literal type="number" pos:start="505:27" pos:end="505:27">8</literal><operator pos:start="505:28" pos:end="505:28">+</operator><literal type="number" pos:start="505:29" pos:end="505:29">4</literal></expr>]</index></name> <operator pos:start="505:32" pos:end="505:32">=</operator> <operator pos:start="505:34" pos:end="505:34">(</operator><name pos:start="505:35" pos:end="505:40"><name pos:start="505:35" pos:end="505:37">buf</name><index pos:start="505:38" pos:end="505:40">[<expr pos:start="505:39" pos:end="505:39"><name pos:start="505:39" pos:end="505:39">j</name></expr>]</index></name> <operator pos:start="505:42" pos:end="505:43">&gt;&gt;</operator> <literal type="number" pos:start="505:45" pos:end="505:45">3</literal><operator pos:start="505:46" pos:end="505:46">)</operator> <operator pos:start="505:48" pos:end="505:48">&amp;</operator> <literal type="number" pos:start="505:50" pos:end="505:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="507:21" pos:end="507:51"><expr pos:start="507:21" pos:end="507:50"><name pos:start="507:21" pos:end="507:30"><name pos:start="507:21" pos:end="507:23">ptr</name><index pos:start="507:24" pos:end="507:30">[<expr pos:start="507:25" pos:end="507:29"><name pos:start="507:25" pos:end="507:25">j</name><operator pos:start="507:26" pos:end="507:26">*</operator><literal type="number" pos:start="507:27" pos:end="507:27">8</literal><operator pos:start="507:28" pos:end="507:28">+</operator><literal type="number" pos:start="507:29" pos:end="507:29">5</literal></expr>]</index></name> <operator pos:start="507:32" pos:end="507:32">=</operator> <operator pos:start="507:34" pos:end="507:34">(</operator><name pos:start="507:35" pos:end="507:40"><name pos:start="507:35" pos:end="507:37">buf</name><index pos:start="507:38" pos:end="507:40">[<expr pos:start="507:39" pos:end="507:39"><name pos:start="507:39" pos:end="507:39">j</name></expr>]</index></name> <operator pos:start="507:42" pos:end="507:43">&gt;&gt;</operator> <literal type="number" pos:start="507:45" pos:end="507:45">2</literal><operator pos:start="507:46" pos:end="507:46">)</operator> <operator pos:start="507:48" pos:end="507:48">&amp;</operator> <literal type="number" pos:start="507:50" pos:end="507:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="509:21" pos:end="509:51"><expr pos:start="509:21" pos:end="509:50"><name pos:start="509:21" pos:end="509:30"><name pos:start="509:21" pos:end="509:23">ptr</name><index pos:start="509:24" pos:end="509:30">[<expr pos:start="509:25" pos:end="509:29"><name pos:start="509:25" pos:end="509:25">j</name><operator pos:start="509:26" pos:end="509:26">*</operator><literal type="number" pos:start="509:27" pos:end="509:27">8</literal><operator pos:start="509:28" pos:end="509:28">+</operator><literal type="number" pos:start="509:29" pos:end="509:29">6</literal></expr>]</index></name> <operator pos:start="509:32" pos:end="509:32">=</operator> <operator pos:start="509:34" pos:end="509:34">(</operator><name pos:start="509:35" pos:end="509:40"><name pos:start="509:35" pos:end="509:37">buf</name><index pos:start="509:38" pos:end="509:40">[<expr pos:start="509:39" pos:end="509:39"><name pos:start="509:39" pos:end="509:39">j</name></expr>]</index></name> <operator pos:start="509:42" pos:end="509:43">&gt;&gt;</operator> <literal type="number" pos:start="509:45" pos:end="509:45">1</literal><operator pos:start="509:46" pos:end="509:46">)</operator> <operator pos:start="509:48" pos:end="509:48">&amp;</operator> <literal type="number" pos:start="509:50" pos:end="509:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="511:21" pos:end="511:51"><expr pos:start="511:21" pos:end="511:50"><name pos:start="511:21" pos:end="511:30"><name pos:start="511:21" pos:end="511:23">ptr</name><index pos:start="511:24" pos:end="511:30">[<expr pos:start="511:25" pos:end="511:29"><name pos:start="511:25" pos:end="511:25">j</name><operator pos:start="511:26" pos:end="511:26">*</operator><literal type="number" pos:start="511:27" pos:end="511:27">8</literal><operator pos:start="511:28" pos:end="511:28">+</operator><literal type="number" pos:start="511:29" pos:end="511:29">7</literal></expr>]</index></name> <operator pos:start="511:32" pos:end="511:32">=</operator>  <name pos:start="511:35" pos:end="511:40"><name pos:start="511:35" pos:end="511:37">buf</name><index pos:start="511:38" pos:end="511:40">[<expr pos:start="511:39" pos:end="511:39"><name pos:start="511:39" pos:end="511:39">j</name></expr>]</index></name>       <operator pos:start="511:48" pos:end="511:48">&amp;</operator> <literal type="number" pos:start="511:50" pos:end="511:50">1</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="515:17" pos:end="515:25"><expr pos:start="515:17" pos:end="515:24"><name pos:start="515:17" pos:end="515:19">buf</name> <operator pos:start="515:21" pos:end="515:22">+=</operator> <name pos:start="515:24" pos:end="515:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="517:17" pos:end="517:32"><expr pos:start="517:17" pos:end="517:31"><name pos:start="517:17" pos:end="517:19">ptr</name> <operator pos:start="517:21" pos:end="517:22">+=</operator> <name pos:start="517:24" pos:end="517:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="521:13" pos:end="521:18">break;</break>

        <case pos:start="523:9" pos:end="523:15">case <expr pos:start="523:14" pos:end="523:14"><literal type="number" pos:start="523:14" pos:end="523:14">8</literal></expr>:</case>

        <case pos:start="525:9" pos:end="525:16">case <expr pos:start="525:14" pos:end="525:15"><literal type="number" pos:start="525:14" pos:end="525:15">24</literal></expr>:</case>

        <case pos:start="527:9" pos:end="527:16">case <expr pos:start="527:14" pos:end="527:15"><literal type="number" pos:start="527:14" pos:end="527:15">32</literal></expr>:</case>

            <for pos:start="529:13" pos:end="537:13">for<control pos:start="529:16" pos:end="529:46">(<init pos:start="529:17" pos:end="529:22"><expr pos:start="529:17" pos:end="529:21"><name pos:start="529:17" pos:end="529:17">i</name> <operator pos:start="529:19" pos:end="529:19">=</operator> <literal type="number" pos:start="529:21" pos:end="529:21">0</literal></expr>;</init> <condition pos:start="529:24" pos:end="529:41"><expr pos:start="529:24" pos:end="529:40"><name pos:start="529:24" pos:end="529:24">i</name> <operator pos:start="529:26" pos:end="529:26">&lt;</operator> <name pos:start="529:28" pos:end="529:40"><name pos:start="529:28" pos:end="529:32">avctx</name><operator pos:start="529:33" pos:end="529:34">-&gt;</operator><name pos:start="529:35" pos:end="529:40">height</name></name></expr>;</condition> <incr pos:start="529:43" pos:end="529:45"><expr pos:start="529:43" pos:end="529:45"><name pos:start="529:43" pos:end="529:43">i</name><operator pos:start="529:44" pos:end="529:45">++</operator></expr></incr>)</control><block pos:start="529:47" pos:end="537:13">{<block_content pos:start="531:17" pos:end="535:32">

                <expr_stmt pos:start="531:17" pos:end="531:36"><expr pos:start="531:17" pos:end="531:35"><call pos:start="531:17" pos:end="531:35"><name pos:start="531:17" pos:end="531:22">memcpy</name><argument_list pos:start="531:23" pos:end="531:35">(<argument pos:start="531:24" pos:end="531:26"><expr pos:start="531:24" pos:end="531:26"><name pos:start="531:24" pos:end="531:26">ptr</name></expr></argument>, <argument pos:start="531:29" pos:end="531:31"><expr pos:start="531:29" pos:end="531:31"><name pos:start="531:29" pos:end="531:31">buf</name></expr></argument>, <argument pos:start="531:34" pos:end="531:34"><expr pos:start="531:34" pos:end="531:34"><name pos:start="531:34" pos:end="531:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="533:17" pos:end="533:25"><expr pos:start="533:17" pos:end="533:24"><name pos:start="533:17" pos:end="533:19">buf</name> <operator pos:start="533:21" pos:end="533:22">+=</operator> <name pos:start="533:24" pos:end="533:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="535:17" pos:end="535:32"><expr pos:start="535:17" pos:end="535:31"><name pos:start="535:17" pos:end="535:19">ptr</name> <operator pos:start="535:21" pos:end="535:22">+=</operator> <name pos:start="535:24" pos:end="535:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="539:13" pos:end="539:18">break;</break>

        <case pos:start="541:9" pos:end="541:15">case <expr pos:start="541:14" pos:end="541:14"><literal type="number" pos:start="541:14" pos:end="541:14">4</literal></expr>:</case>

            <for pos:start="543:13" pos:end="559:13">for<control pos:start="543:16" pos:end="543:46">(<init pos:start="543:17" pos:end="543:22"><expr pos:start="543:17" pos:end="543:21"><name pos:start="543:17" pos:end="543:17">i</name> <operator pos:start="543:19" pos:end="543:19">=</operator> <literal type="number" pos:start="543:21" pos:end="543:21">0</literal></expr>;</init> <condition pos:start="543:24" pos:end="543:41"><expr pos:start="543:24" pos:end="543:40"><name pos:start="543:24" pos:end="543:24">i</name> <operator pos:start="543:26" pos:end="543:26">&lt;</operator> <name pos:start="543:28" pos:end="543:40"><name pos:start="543:28" pos:end="543:32">avctx</name><operator pos:start="543:33" pos:end="543:34">-&gt;</operator><name pos:start="543:35" pos:end="543:40">height</name></name></expr>;</condition> <incr pos:start="543:43" pos:end="543:45"><expr pos:start="543:43" pos:end="543:45"><name pos:start="543:43" pos:end="543:43">i</name><operator pos:start="543:44" pos:end="543:45">++</operator></expr></incr>)</control><block pos:start="543:47" pos:end="559:13">{<block_content pos:start="545:17" pos:end="557:32">

                <decl_stmt pos:start="545:17" pos:end="545:22"><decl pos:start="545:17" pos:end="545:21"><type pos:start="545:17" pos:end="545:19"><name pos:start="545:17" pos:end="545:19">int</name></type> <name pos:start="545:21" pos:end="545:21">j</name></decl>;</decl_stmt>

                <for pos:start="547:17" pos:end="553:17">for<control pos:start="547:20" pos:end="547:38">(<init pos:start="547:21" pos:end="547:26"><expr pos:start="547:21" pos:end="547:25"><name pos:start="547:21" pos:end="547:21">j</name> <operator pos:start="547:23" pos:end="547:23">=</operator> <literal type="number" pos:start="547:25" pos:end="547:25">0</literal></expr>;</init> <condition pos:start="547:28" pos:end="547:33"><expr pos:start="547:28" pos:end="547:32"><name pos:start="547:28" pos:end="547:28">j</name> <operator pos:start="547:30" pos:end="547:30">&lt;</operator> <name pos:start="547:32" pos:end="547:32">n</name></expr>;</condition> <incr pos:start="547:35" pos:end="547:37"><expr pos:start="547:35" pos:end="547:37"><name pos:start="547:35" pos:end="547:35">j</name><operator pos:start="547:36" pos:end="547:37">++</operator></expr></incr>)</control><block pos:start="547:39" pos:end="553:17">{<block_content pos:start="549:21" pos:end="551:46">

                    <expr_stmt pos:start="549:21" pos:end="549:53"><expr pos:start="549:21" pos:end="549:52"><name pos:start="549:21" pos:end="549:30"><name pos:start="549:21" pos:end="549:23">ptr</name><index pos:start="549:24" pos:end="549:30">[<expr pos:start="549:25" pos:end="549:29"><name pos:start="549:25" pos:end="549:25">j</name><operator pos:start="549:26" pos:end="549:26">*</operator><literal type="number" pos:start="549:27" pos:end="549:27">2</literal><operator pos:start="549:28" pos:end="549:28">+</operator><literal type="number" pos:start="549:29" pos:end="549:29">0</literal></expr>]</index></name> <operator pos:start="549:32" pos:end="549:32">=</operator> <operator pos:start="549:34" pos:end="549:34">(</operator><name pos:start="549:35" pos:end="549:40"><name pos:start="549:35" pos:end="549:37">buf</name><index pos:start="549:38" pos:end="549:40">[<expr pos:start="549:39" pos:end="549:39"><name pos:start="549:39" pos:end="549:39">j</name></expr>]</index></name> <operator pos:start="549:42" pos:end="549:43">&gt;&gt;</operator> <literal type="number" pos:start="549:45" pos:end="549:45">4</literal><operator pos:start="549:46" pos:end="549:46">)</operator> <operator pos:start="549:48" pos:end="549:48">&amp;</operator> <literal type="number" pos:start="549:50" pos:end="549:52">0xF</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="551:21" pos:end="551:46"><expr pos:start="551:21" pos:end="551:45"><name pos:start="551:21" pos:end="551:30"><name pos:start="551:21" pos:end="551:23">ptr</name><index pos:start="551:24" pos:end="551:30">[<expr pos:start="551:25" pos:end="551:29"><name pos:start="551:25" pos:end="551:25">j</name><operator pos:start="551:26" pos:end="551:26">*</operator><literal type="number" pos:start="551:27" pos:end="551:27">2</literal><operator pos:start="551:28" pos:end="551:28">+</operator><literal type="number" pos:start="551:29" pos:end="551:29">1</literal></expr>]</index></name> <operator pos:start="551:32" pos:end="551:32">=</operator> <name pos:start="551:34" pos:end="551:39"><name pos:start="551:34" pos:end="551:36">buf</name><index pos:start="551:37" pos:end="551:39">[<expr pos:start="551:38" pos:end="551:38"><name pos:start="551:38" pos:end="551:38">j</name></expr>]</index></name> <operator pos:start="551:41" pos:end="551:41">&amp;</operator> <literal type="number" pos:start="551:43" pos:end="551:45">0xF</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="555:17" pos:end="555:25"><expr pos:start="555:17" pos:end="555:24"><name pos:start="555:17" pos:end="555:19">buf</name> <operator pos:start="555:21" pos:end="555:22">+=</operator> <name pos:start="555:24" pos:end="555:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="557:17" pos:end="557:32"><expr pos:start="557:17" pos:end="557:31"><name pos:start="557:17" pos:end="557:19">ptr</name> <operator pos:start="557:21" pos:end="557:22">+=</operator> <name pos:start="557:24" pos:end="557:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="561:13" pos:end="561:18">break;</break>

        <case pos:start="563:9" pos:end="563:16">case <expr pos:start="563:14" pos:end="563:15"><literal type="number" pos:start="563:14" pos:end="563:15">16</literal></expr>:</case>

            <for pos:start="565:13" pos:end="583:13">for<control pos:start="565:16" pos:end="565:46">(<init pos:start="565:17" pos:end="565:22"><expr pos:start="565:17" pos:end="565:21"><name pos:start="565:17" pos:end="565:17">i</name> <operator pos:start="565:19" pos:end="565:19">=</operator> <literal type="number" pos:start="565:21" pos:end="565:21">0</literal></expr>;</init> <condition pos:start="565:24" pos:end="565:41"><expr pos:start="565:24" pos:end="565:40"><name pos:start="565:24" pos:end="565:24">i</name> <operator pos:start="565:26" pos:end="565:26">&lt;</operator> <name pos:start="565:28" pos:end="565:40"><name pos:start="565:28" pos:end="565:32">avctx</name><operator pos:start="565:33" pos:end="565:34">-&gt;</operator><name pos:start="565:35" pos:end="565:40">height</name></name></expr>;</condition> <incr pos:start="565:43" pos:end="565:45"><expr pos:start="565:43" pos:end="565:45"><name pos:start="565:43" pos:end="565:43">i</name><operator pos:start="565:44" pos:end="565:45">++</operator></expr></incr>)</control><block pos:start="565:47" pos:end="583:13">{<block_content pos:start="567:17" pos:end="581:32">

                <decl_stmt pos:start="567:17" pos:end="567:61"><decl pos:start="567:17" pos:end="567:60"><type pos:start="567:17" pos:end="567:32"><specifier pos:start="567:17" pos:end="567:21">const</specifier> <name pos:start="567:23" pos:end="567:30">uint16_t</name> <modifier pos:start="567:32" pos:end="567:32">*</modifier></type><name pos:start="567:33" pos:end="567:35">src</name> <init pos:start="567:37" pos:end="567:60">= <expr pos:start="567:39" pos:end="567:60"><operator pos:start="567:39" pos:end="567:39">(</operator><specifier pos:start="567:40" pos:end="567:44">const</specifier> <name pos:start="567:46" pos:end="567:53">uint16_t</name> <operator pos:start="567:55" pos:end="567:55">*</operator><operator pos:start="567:56" pos:end="567:56">)</operator> <name pos:start="567:58" pos:end="567:60">buf</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="569:17" pos:end="569:49"><decl pos:start="569:17" pos:end="569:48"><type pos:start="569:17" pos:end="569:26"><name pos:start="569:17" pos:end="569:24">uint16_t</name> <modifier pos:start="569:26" pos:end="569:26">*</modifier></type><name pos:start="569:27" pos:end="569:29">dst</name> <init pos:start="569:31" pos:end="569:48">= <expr pos:start="569:33" pos:end="569:48"><operator pos:start="569:33" pos:end="569:33">(</operator><name pos:start="569:34" pos:end="569:41">uint16_t</name> <operator pos:start="569:43" pos:end="569:43">*</operator><operator pos:start="569:44" pos:end="569:44">)</operator> <name pos:start="569:46" pos:end="569:48">ptr</name></expr></init></decl>;</decl_stmt>



                <for pos:start="573:17" pos:end="575:48">for<control pos:start="573:20" pos:end="573:49">(<init pos:start="573:21" pos:end="573:26"><expr pos:start="573:21" pos:end="573:25"><name pos:start="573:21" pos:end="573:21">j</name> <operator pos:start="573:23" pos:end="573:23">=</operator> <literal type="number" pos:start="573:25" pos:end="573:25">0</literal></expr>;</init> <condition pos:start="573:28" pos:end="573:44"><expr pos:start="573:28" pos:end="573:43"><name pos:start="573:28" pos:end="573:28">j</name> <operator pos:start="573:30" pos:end="573:30">&lt;</operator> <name pos:start="573:32" pos:end="573:43"><name pos:start="573:32" pos:end="573:36">avctx</name><operator pos:start="573:37" pos:end="573:38">-&gt;</operator><name pos:start="573:39" pos:end="573:43">width</name></name></expr>;</condition> <incr pos:start="573:46" pos:end="573:48"><expr pos:start="573:46" pos:end="573:48"><name pos:start="573:46" pos:end="573:46">j</name><operator pos:start="573:47" pos:end="573:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="575:21" pos:end="575:48"><block_content pos:start="575:21" pos:end="575:48">

                    <expr_stmt pos:start="575:21" pos:end="575:48"><expr pos:start="575:21" pos:end="575:47"><operator pos:start="575:21" pos:end="575:21">*</operator><name pos:start="575:22" pos:end="575:24">dst</name><operator pos:start="575:25" pos:end="575:26">++</operator> <operator pos:start="575:28" pos:end="575:28">=</operator> <call pos:start="575:30" pos:end="575:47"><name pos:start="575:30" pos:end="575:39">av_le2ne16</name><argument_list pos:start="575:40" pos:end="575:47">(<argument pos:start="575:41" pos:end="575:46"><expr pos:start="575:41" pos:end="575:46"><operator pos:start="575:41" pos:end="575:41">*</operator><name pos:start="575:42" pos:end="575:44">src</name><operator pos:start="575:45" pos:end="575:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                <expr_stmt pos:start="579:17" pos:end="579:25"><expr pos:start="579:17" pos:end="579:24"><name pos:start="579:17" pos:end="579:19">buf</name> <operator pos:start="579:21" pos:end="579:22">+=</operator> <name pos:start="579:24" pos:end="579:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="581:17" pos:end="581:32"><expr pos:start="581:17" pos:end="581:31"><name pos:start="581:17" pos:end="581:19">ptr</name> <operator pos:start="581:21" pos:end="581:22">+=</operator> <name pos:start="581:24" pos:end="581:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="585:13" pos:end="585:18">break;</break>

        <default pos:start="587:9" pos:end="587:16">default:</default>

            <expr_stmt pos:start="589:13" pos:end="589:67"><expr pos:start="589:13" pos:end="589:66"><call pos:start="589:13" pos:end="589:66"><name pos:start="589:13" pos:end="589:18">av_log</name><argument_list pos:start="589:19" pos:end="589:66">(<argument pos:start="589:20" pos:end="589:24"><expr pos:start="589:20" pos:end="589:24"><name pos:start="589:20" pos:end="589:24">avctx</name></expr></argument>, <argument pos:start="589:27" pos:end="589:38"><expr pos:start="589:27" pos:end="589:38"><name pos:start="589:27" pos:end="589:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="589:41" pos:end="589:65"><expr pos:start="589:41" pos:end="589:65"><literal type="string" pos:start="589:41" pos:end="589:65">"BMP decoder is broken\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="591:13" pos:end="591:22">return <expr pos:start="591:20" pos:end="591:21"><operator pos:start="591:20" pos:end="591:20">-</operator><literal type="number" pos:start="591:21" pos:end="591:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="599:5" pos:end="599:26"><expr pos:start="599:5" pos:end="599:25"><operator pos:start="599:5" pos:end="599:5">*</operator><name pos:start="599:6" pos:end="599:12">picture</name> <operator pos:start="599:14" pos:end="599:14">=</operator> <name pos:start="599:16" pos:end="599:25"><name pos:start="599:16" pos:end="599:16">s</name><operator pos:start="599:17" pos:end="599:18">-&gt;</operator><name pos:start="599:19" pos:end="599:25">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="601:5" pos:end="601:35"><expr pos:start="601:5" pos:end="601:34"><operator pos:start="601:5" pos:end="601:5">*</operator><name pos:start="601:6" pos:end="601:14">data_size</name> <operator pos:start="601:16" pos:end="601:16">=</operator> <sizeof pos:start="601:18" pos:end="601:34">sizeof<argument_list pos:start="601:24" pos:end="601:34">(<argument pos:start="601:25" pos:end="601:33"><expr pos:start="601:25" pos:end="601:33"><name pos:start="601:25" pos:end="601:33">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="605:5" pos:end="605:20">return <expr pos:start="605:12" pos:end="605:19"><name pos:start="605:12" pos:end="605:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
