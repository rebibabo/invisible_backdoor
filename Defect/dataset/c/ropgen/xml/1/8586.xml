<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8586.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:29"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">alac_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:76">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,
                             <parameter pos:start="2:30" pos:end="2:44"><decl pos:start="2:30" pos:end="2:44"><type pos:start="2:30" pos:end="2:44"><name pos:start="2:30" pos:end="2:33">void</name> <modifier pos:start="2:35" pos:end="2:35">*</modifier></type><name pos:start="2:36" pos:end="2:44">outbuffer</name></decl></parameter>, <parameter pos:start="2:47" pos:end="2:61"><decl pos:start="2:47" pos:end="2:61"><type pos:start="2:47" pos:end="2:61"><name pos:start="2:47" pos:end="2:49">int</name> <modifier pos:start="2:51" pos:end="2:51">*</modifier></type><name pos:start="2:52" pos:end="2:61">outputsize</name></decl></parameter>,
                             <parameter pos:start="3:30" pos:end="3:52"><decl pos:start="3:30" pos:end="3:52"><type pos:start="3:30" pos:end="3:52"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:52">inbuffer</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:75"><decl pos:start="3:55" pos:end="3:75"><type pos:start="3:55" pos:end="3:75"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:75">input_buffer_size</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="151:29">{<block_content pos:start="5:5" pos:end="151:29">
    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">ALACContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:21">alac</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:17"><decl pos:start="6:5" pos:end="6:16"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:16">channels</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:30">outputsamples</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:16"><decl pos:start="8:5" pos:end="8:15"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:15">hassize</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:22">readsamplesize</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:21"><decl pos:start="10:5" pos:end="10:20"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:20">wasted_bytes</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23">isnotcompressed</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:30"><decl pos:start="12:5" pos:end="12:29"><type pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:11">uint8_t</name></type> <name pos:start="12:13" pos:end="12:29">interlacing_shift</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:34">interlacing_leftweight</name></decl>;</decl_stmt>
    <comment type="block" pos:start="14:5" pos:end="14:36">/* short-circuit null buffers */</comment>
    <if_stmt pos:start="15:5" pos:end="16:33"><if pos:start="15:5" pos:end="16:33">if <condition pos:start="15:8" pos:end="15:40">(<expr pos:start="15:9" pos:end="15:39"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:17">inbuffer</name> <operator pos:start="15:19" pos:end="15:20">||</operator> <operator pos:start="15:22" pos:end="15:22">!</operator><name pos:start="15:23" pos:end="15:39">input_buffer_size</name></expr>)</condition><block type="pseudo" pos:start="16:9" pos:end="16:33"><block_content pos:start="16:9" pos:end="16:33">
        <return pos:start="16:9" pos:end="16:33">return <expr pos:start="16:16" pos:end="16:32"><name pos:start="16:16" pos:end="16:32">input_buffer_size</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="17:5" pos:end="17:39">/* initialize from the extradata */</comment>
    <if_stmt pos:start="18:5" pos:end="151:29"><if pos:start="18:5" pos:end="151:29">if <condition pos:start="18:8" pos:end="18:35">(<expr pos:start="18:9" pos:end="18:34"><operator pos:start="18:9" pos:end="18:9">!</operator><name pos:start="18:10" pos:end="18:34"><name pos:start="18:10" pos:end="18:13">alac</name><operator pos:start="18:14" pos:end="18:15">-&gt;</operator><name pos:start="18:16" pos:end="18:34">context_initialized</name></name></expr>)</condition> <block pos:start="18:37" pos:end="151:29">{<block_content pos:start="19:9" pos:end="151:29">
        <if_stmt pos:start="19:9" pos:end="151:29"><if pos:start="19:9" pos:end="151:29">if <condition pos:start="19:12" pos:end="19:63">(<expr pos:start="19:13" pos:end="19:62"><name pos:start="19:13" pos:end="19:39"><name pos:start="19:13" pos:end="19:16">alac</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:23">avctx</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:39">extradata_size</name></name> <operator pos:start="19:41" pos:end="19:42">!=</operator> <name pos:start="19:44" pos:end="19:62">ALAC_EXTRADATA_SIZE</name></expr>)</condition> <block pos:start="19:65" pos:end="151:29">{<block_content pos:start="20:13" pos:end="151:29">
            <expr_stmt pos:start="20:13" pos:end="21:37"><expr pos:start="20:13" pos:end="21:36"><call pos:start="20:13" pos:end="21:36"><name pos:start="20:13" pos:end="20:18">av_log</name><argument_list pos:start="20:19" pos:end="21:36">(<argument pos:start="20:20" pos:end="20:24"><expr pos:start="20:20" pos:end="20:24"><name pos:start="20:20" pos:end="20:24">avctx</name></expr></argument>, <argument pos:start="20:27" pos:end="20:38"><expr pos:start="20:27" pos:end="20:38"><name pos:start="20:27" pos:end="20:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="20:41" pos:end="20:77"><expr pos:start="20:41" pos:end="20:77"><literal type="string" pos:start="20:41" pos:end="20:77">"alac: expected %d extradata bytes\n"</literal></expr></argument>,
                <argument pos:start="21:17" pos:end="21:35"><expr pos:start="21:17" pos:end="21:35"><name pos:start="21:17" pos:end="21:35">ALAC_EXTRADATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="22:13" pos:end="22:37">return <expr pos:start="22:20" pos:end="22:36"><name pos:start="22:20" pos:end="22:36">input_buffer_size</name></expr>;</return>
        <if_stmt pos:start="23:9" pos:end="151:29"><if pos:start="23:9" pos:end="151:29">if <condition pos:start="23:12" pos:end="23:32">(<expr pos:start="23:13" pos:end="23:31"><call pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:25">alac_set_info</name><argument_list pos:start="23:26" pos:end="23:31">(<argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><name pos:start="23:27" pos:end="23:30">alac</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:34" pos:end="151:29">{<block_content pos:start="24:13" pos:end="151:29">
            <expr_stmt pos:start="24:13" pos:end="24:67"><expr pos:start="24:13" pos:end="24:66"><call pos:start="24:13" pos:end="24:66"><name pos:start="24:13" pos:end="24:18">av_log</name><argument_list pos:start="24:19" pos:end="24:66">(<argument pos:start="24:20" pos:end="24:24"><expr pos:start="24:20" pos:end="24:24"><name pos:start="24:20" pos:end="24:24">avctx</name></expr></argument>, <argument pos:start="24:27" pos:end="24:38"><expr pos:start="24:27" pos:end="24:38"><name pos:start="24:27" pos:end="24:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="24:41" pos:end="24:65"><expr pos:start="24:41" pos:end="24:65"><literal type="string" pos:start="24:41" pos:end="24:65">"alac: set_info failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="25:13" pos:end="25:37">return <expr pos:start="25:20" pos:end="25:36"><name pos:start="25:20" pos:end="25:36">input_buffer_size</name></expr>;</return>
        <expr_stmt pos:start="26:9" pos:end="26:38"><expr pos:start="26:9" pos:end="26:37"><name pos:start="26:9" pos:end="26:33"><name pos:start="26:9" pos:end="26:12">alac</name><operator pos:start="26:13" pos:end="26:14">-&gt;</operator><name pos:start="26:15" pos:end="26:33">context_initialized</name></name> <operator pos:start="26:35" pos:end="26:35">=</operator> <literal type="number" pos:start="26:37" pos:end="26:37">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:62"><expr pos:start="27:5" pos:end="27:61"><call pos:start="27:5" pos:end="27:61"><name pos:start="27:5" pos:end="27:17">init_get_bits</name><argument_list pos:start="27:18" pos:end="27:61">(<argument pos:start="27:19" pos:end="27:27"><expr pos:start="27:19" pos:end="27:27"><operator pos:start="27:19" pos:end="27:19">&amp;</operator><name pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:23">alac</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:27">gb</name></name></expr></argument>, <argument pos:start="27:30" pos:end="27:37"><expr pos:start="27:30" pos:end="27:37"><name pos:start="27:30" pos:end="27:37">inbuffer</name></expr></argument>, <argument pos:start="27:40" pos:end="27:60"><expr pos:start="27:40" pos:end="27:60"><name pos:start="27:40" pos:end="27:56">input_buffer_size</name> <operator pos:start="27:58" pos:end="27:58">*</operator> <literal type="number" pos:start="27:60" pos:end="27:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:42"><expr pos:start="28:5" pos:end="28:41"><name pos:start="28:5" pos:end="28:12">channels</name> <operator pos:start="28:14" pos:end="28:14">=</operator> <call pos:start="28:16" pos:end="28:37"><name pos:start="28:16" pos:end="28:23">get_bits</name><argument_list pos:start="28:24" pos:end="28:37">(<argument pos:start="28:25" pos:end="28:33"><expr pos:start="28:25" pos:end="28:33"><operator pos:start="28:25" pos:end="28:25">&amp;</operator><name pos:start="28:26" pos:end="28:33"><name pos:start="28:26" pos:end="28:29">alac</name><operator pos:start="28:30" pos:end="28:31">-&gt;</operator><name pos:start="28:32" pos:end="28:33">gb</name></name></expr></argument>, <argument pos:start="28:36" pos:end="28:36"><expr pos:start="28:36" pos:end="28:36"><literal type="number" pos:start="28:36" pos:end="28:36">3</literal></expr></argument>)</argument_list></call> <operator pos:start="28:39" pos:end="28:39">+</operator> <literal type="number" pos:start="28:41" pos:end="28:41">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="151:29"><if pos:start="29:5" pos:end="151:29">if <condition pos:start="29:8" pos:end="29:32">(<expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:16">channels</name> <operator pos:start="29:18" pos:end="29:18">&gt;</operator> <name pos:start="29:20" pos:end="29:31">MAX_CHANNELS</name></expr>)</condition> <block pos:start="29:34" pos:end="151:29">{<block_content pos:start="30:9" pos:end="151:29">
        <expr_stmt pos:start="30:9" pos:end="31:29"><expr pos:start="30:9" pos:end="31:28"><call pos:start="30:9" pos:end="31:28"><name pos:start="30:9" pos:end="30:14">av_log</name><argument_list pos:start="30:15" pos:end="31:28">(<argument pos:start="30:16" pos:end="30:20"><expr pos:start="30:16" pos:end="30:20"><name pos:start="30:16" pos:end="30:20">avctx</name></expr></argument>, <argument pos:start="30:23" pos:end="30:34"><expr pos:start="30:23" pos:end="30:34"><name pos:start="30:23" pos:end="30:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="30:37" pos:end="30:67"><expr pos:start="30:37" pos:end="30:67"><literal type="string" pos:start="30:37" pos:end="30:67">"channels &gt; %d not supported\n"</literal></expr></argument>,
               <argument pos:start="31:16" pos:end="31:27"><expr pos:start="31:16" pos:end="31:27"><name pos:start="31:16" pos:end="31:27">MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="32:9" pos:end="32:33">return <expr pos:start="32:16" pos:end="32:32"><name pos:start="32:16" pos:end="32:32">input_buffer_size</name></expr>;</return>
    <comment type="block" pos:start="33:5" pos:end="35:7">/* 2^result = something to do with output waiting.
     * perhaps matters if we read &gt; 1 frame in a pass?
     */</comment>
    <expr_stmt pos:start="36:5" pos:end="36:28"><expr pos:start="36:5" pos:end="36:27"><call pos:start="36:5" pos:end="36:27"><name pos:start="36:5" pos:end="36:13">skip_bits</name><argument_list pos:start="36:14" pos:end="36:27">(<argument pos:start="36:15" pos:end="36:23"><expr pos:start="36:15" pos:end="36:23"><operator pos:start="36:15" pos:end="36:15">&amp;</operator><name pos:start="36:16" pos:end="36:23"><name pos:start="36:16" pos:end="36:19">alac</name><operator pos:start="36:20" pos:end="36:21">-&gt;</operator><name pos:start="36:22" pos:end="36:23">gb</name></name></expr></argument>, <argument pos:start="36:26" pos:end="36:26"><expr pos:start="36:26" pos:end="36:26"><literal type="number" pos:start="36:26" pos:end="36:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:13">skip_bits</name><argument_list pos:start="37:14" pos:end="37:28">(<argument pos:start="37:15" pos:end="37:23"><expr pos:start="37:15" pos:end="37:23"><operator pos:start="37:15" pos:end="37:15">&amp;</operator><name pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:19">alac</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:23">gb</name></name></expr></argument>, <argument pos:start="37:26" pos:end="37:27"><expr pos:start="37:26" pos:end="37:27"><literal type="number" pos:start="37:26" pos:end="37:27">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="37:31" pos:end="37:57">/* unknown, skip 12 bits */</comment>
    <comment type="block" pos:start="38:5" pos:end="38:47">/* the output sample size is stored soon */</comment>
    <expr_stmt pos:start="39:5" pos:end="39:35"><expr pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:11">hassize</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:34"><name pos:start="39:15" pos:end="39:23">get_bits1</name><argument_list pos:start="39:24" pos:end="39:34">(<argument pos:start="39:25" pos:end="39:33"><expr pos:start="39:25" pos:end="39:33"><operator pos:start="39:25" pos:end="39:25">&amp;</operator><name pos:start="39:26" pos:end="39:33"><name pos:start="39:26" pos:end="39:29">alac</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:42"><expr pos:start="40:5" pos:end="40:41"><name pos:start="40:5" pos:end="40:16">wasted_bytes</name> <operator pos:start="40:18" pos:end="40:18">=</operator> <call pos:start="40:20" pos:end="40:41"><name pos:start="40:20" pos:end="40:27">get_bits</name><argument_list pos:start="40:28" pos:end="40:41">(<argument pos:start="40:29" pos:end="40:37"><expr pos:start="40:29" pos:end="40:37"><operator pos:start="40:29" pos:end="40:29">&amp;</operator><name pos:start="40:30" pos:end="40:37"><name pos:start="40:30" pos:end="40:33">alac</name><operator pos:start="40:34" pos:end="40:35">-&gt;</operator><name pos:start="40:36" pos:end="40:37">gb</name></name></expr></argument>, <argument pos:start="40:40" pos:end="40:40"><expr pos:start="40:40" pos:end="40:40"><literal type="number" pos:start="40:40" pos:end="40:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="40:44" pos:end="40:58">/* unknown ? */</comment>
    <comment type="block" pos:start="41:5" pos:end="41:41">/* whether the frame is compressed */</comment>
    <expr_stmt pos:start="42:5" pos:end="42:43"><expr pos:start="42:5" pos:end="42:42"><name pos:start="42:5" pos:end="42:19">isnotcompressed</name> <operator pos:start="42:21" pos:end="42:21">=</operator> <call pos:start="42:23" pos:end="42:42"><name pos:start="42:23" pos:end="42:31">get_bits1</name><argument_list pos:start="42:32" pos:end="42:42">(<argument pos:start="42:33" pos:end="42:41"><expr pos:start="42:33" pos:end="42:41"><operator pos:start="42:33" pos:end="42:33">&amp;</operator><name pos:start="42:34" pos:end="42:41"><name pos:start="42:34" pos:end="42:37">alac</name><operator pos:start="42:38" pos:end="42:39">-&gt;</operator><name pos:start="42:40" pos:end="42:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="43:5" pos:end="151:29"><if pos:start="43:5" pos:end="151:29">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:15">hassize</name></expr>)</condition> <block pos:start="43:18" pos:end="151:29">{<block_content pos:start="45:9" pos:end="151:29">
        <comment type="block" pos:start="44:9" pos:end="44:63">/* now read the number of samples as a 32bit integer */</comment>
        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:21">outputsamples</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <call pos:start="45:25" pos:end="45:47"><name pos:start="45:25" pos:end="45:32">get_bits</name><argument_list pos:start="45:33" pos:end="45:47">(<argument pos:start="45:34" pos:end="45:42"><expr pos:start="45:34" pos:end="45:42"><operator pos:start="45:34" pos:end="45:34">&amp;</operator><name pos:start="45:35" pos:end="45:42"><name pos:start="45:35" pos:end="45:38">alac</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:42">gb</name></name></expr></argument>, <argument pos:start="45:45" pos:end="45:46"><expr pos:start="45:45" pos:end="45:46"><literal type="number" pos:start="45:45" pos:end="45:46">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="46:9" pos:end="49:60"><if pos:start="46:9" pos:end="48:5">if<condition pos:start="46:11" pos:end="46:63">(<expr pos:start="46:12" pos:end="46:62"><name pos:start="46:12" pos:end="46:24">outputsamples</name> <operator pos:start="46:26" pos:end="46:26">&gt;</operator> <name pos:start="46:28" pos:end="46:62"><name pos:start="46:28" pos:end="46:31">alac</name><operator pos:start="46:32" pos:end="46:33">-&gt;</operator><name pos:start="46:34" pos:end="46:62">setinfo_max_samples_per_frame</name></name></expr>)</condition><block pos:start="46:64" pos:end="48:5">{<block_content pos:start="47:13" pos:end="47:119">
            <expr_stmt pos:start="47:13" pos:end="47:119"><expr pos:start="47:13" pos:end="47:118"><call pos:start="47:13" pos:end="47:118"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="47:118">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">avctx</name></expr></argument>, <argument pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:41" pos:end="47:65"><expr pos:start="47:41" pos:end="47:65"><literal type="string" pos:start="47:41" pos:end="47:65">"outputsamples %d &gt; %d\n"</literal></expr></argument>, <argument pos:start="47:68" pos:end="47:80"><expr pos:start="47:68" pos:end="47:80"><name pos:start="47:68" pos:end="47:80">outputsamples</name></expr></argument>, <argument pos:start="47:83" pos:end="47:117"><expr pos:start="47:83" pos:end="47:117"><name pos:start="47:83" pos:end="47:117"><name pos:start="47:83" pos:end="47:86">alac</name><operator pos:start="47:87" pos:end="47:88">-&gt;</operator><name pos:start="47:89" pos:end="47:117">setinfo_max_samples_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="48:7" pos:end="49:60">else<block type="pseudo" pos:start="49:9" pos:end="49:60"><block_content pos:start="49:9" pos:end="49:60">
        <expr_stmt pos:start="49:9" pos:end="49:60"><expr pos:start="49:9" pos:end="49:59"><name pos:start="49:9" pos:end="49:21">outputsamples</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:59"><name pos:start="49:25" pos:end="49:28">alac</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:59">setinfo_max_samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:55"><expr pos:start="50:5" pos:end="50:54"><operator pos:start="50:5" pos:end="50:5">*</operator><name pos:start="50:6" pos:end="50:15">outputsize</name> <operator pos:start="50:17" pos:end="50:17">=</operator> <name pos:start="50:19" pos:end="50:31">outputsamples</name> <operator pos:start="50:33" pos:end="50:33">*</operator> <name pos:start="50:35" pos:end="50:54"><name pos:start="50:35" pos:end="50:38">alac</name><operator pos:start="50:39" pos:end="50:40">-&gt;</operator><name pos:start="50:41" pos:end="50:54">bytespersample</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:83"><expr pos:start="51:5" pos:end="51:82"><name pos:start="51:5" pos:end="51:18">readsamplesize</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:46"><name pos:start="51:22" pos:end="51:25">alac</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:46">setinfo_sample_size</name></name> <operator pos:start="51:48" pos:end="51:48">-</operator> <operator pos:start="51:50" pos:end="51:50">(</operator><name pos:start="51:51" pos:end="51:62">wasted_bytes</name> <operator pos:start="51:64" pos:end="51:64">*</operator> <literal type="number" pos:start="51:66" pos:end="51:66">8</literal><operator pos:start="51:67" pos:end="51:67">)</operator> <operator pos:start="51:69" pos:end="51:69">+</operator> <name pos:start="51:71" pos:end="51:78">channels</name> <operator pos:start="51:80" pos:end="51:80">-</operator> <literal type="number" pos:start="51:82" pos:end="51:82">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="52:5" pos:end="151:29"><if pos:start="52:5" pos:end="151:29">if <condition pos:start="52:8" pos:end="52:25">(<expr pos:start="52:9" pos:end="52:24"><operator pos:start="52:9" pos:end="52:9">!</operator><name pos:start="52:10" pos:end="52:24">isnotcompressed</name></expr>)</condition> <block pos:start="52:27" pos:end="151:29">{<block_content pos:start="54:9" pos:end="151:29">
        <comment type="block" pos:start="53:9" pos:end="53:33">/* so it is compressed */</comment>
        <decl_stmt pos:start="54:9" pos:end="54:51"><decl pos:start="54:9" pos:end="54:50"><type pos:start="54:9" pos:end="54:15"><name pos:start="54:9" pos:end="54:15">int16_t</name></type> <name pos:start="54:17" pos:end="54:50"><name pos:start="54:17" pos:end="54:36">predictor_coef_table</name><index pos:start="54:37" pos:end="54:46">[<expr pos:start="54:38" pos:end="54:45"><name pos:start="54:38" pos:end="54:45">channels</name></expr>]</index><index pos:start="54:47" pos:end="54:50">[<expr pos:start="54:48" pos:end="54:49"><literal type="number" pos:start="54:48" pos:end="54:49">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="55:9" pos:end="55:41"><decl pos:start="55:9" pos:end="55:40"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:30">predictor_coef_num</name><index pos:start="55:31" pos:end="55:40">[<expr pos:start="55:32" pos:end="55:39"><name pos:start="55:32" pos:end="55:39">channels</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="56:9" pos:end="56:38"><decl pos:start="56:9" pos:end="56:37"><type pos:start="56:9" pos:end="56:11"><name pos:start="56:9" pos:end="56:11">int</name></type> <name pos:start="56:13" pos:end="56:37"><name pos:start="56:13" pos:end="56:27">prediction_type</name><index pos:start="56:28" pos:end="56:37">[<expr pos:start="56:29" pos:end="56:36"><name pos:start="56:29" pos:end="56:36">channels</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="57:9" pos:end="57:48"><decl pos:start="57:9" pos:end="57:47"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:47"><name pos:start="57:13" pos:end="57:37">prediction_quantitization</name><index pos:start="57:38" pos:end="57:47">[<expr pos:start="57:39" pos:end="57:46"><name pos:start="57:39" pos:end="57:46">channels</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="58:9" pos:end="58:35"><decl pos:start="58:9" pos:end="58:34"><type pos:start="58:9" pos:end="58:11"><name pos:start="58:9" pos:end="58:11">int</name></type> <name pos:start="58:13" pos:end="58:34"><name pos:start="58:13" pos:end="58:24">ricemodifier</name><index pos:start="58:25" pos:end="58:34">[<expr pos:start="58:26" pos:end="58:33"><name pos:start="58:26" pos:end="58:33">channels</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="59:9" pos:end="59:20"><decl pos:start="59:9" pos:end="59:13"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:13">i</name></decl>, <decl pos:start="59:16" pos:end="59:19"><type ref="prev" pos:start="59:9" pos:end="59:11"/><name pos:start="59:16" pos:end="59:19">chan</name></decl>;</decl_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:51"><expr pos:start="60:9" pos:end="60:50"><name pos:start="60:9" pos:end="60:25">interlacing_shift</name> <operator pos:start="60:27" pos:end="60:27">=</operator> <call pos:start="60:29" pos:end="60:50"><name pos:start="60:29" pos:end="60:36">get_bits</name><argument_list pos:start="60:37" pos:end="60:50">(<argument pos:start="60:38" pos:end="60:46"><expr pos:start="60:38" pos:end="60:46"><operator pos:start="60:38" pos:end="60:38">&amp;</operator><name pos:start="60:39" pos:end="60:46"><name pos:start="60:39" pos:end="60:42">alac</name><operator pos:start="60:43" pos:end="60:44">-&gt;</operator><name pos:start="60:45" pos:end="60:46">gb</name></name></expr></argument>, <argument pos:start="60:49" pos:end="60:49"><expr pos:start="60:49" pos:end="60:49"><literal type="number" pos:start="60:49" pos:end="60:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:56"><expr pos:start="61:9" pos:end="61:55"><name pos:start="61:9" pos:end="61:30">interlacing_leftweight</name> <operator pos:start="61:32" pos:end="61:32">=</operator> <call pos:start="61:34" pos:end="61:55"><name pos:start="61:34" pos:end="61:41">get_bits</name><argument_list pos:start="61:42" pos:end="61:55">(<argument pos:start="61:43" pos:end="61:51"><expr pos:start="61:43" pos:end="61:51"><operator pos:start="61:43" pos:end="61:43">&amp;</operator><name pos:start="61:44" pos:end="61:51"><name pos:start="61:44" pos:end="61:47">alac</name><operator pos:start="61:48" pos:end="61:49">-&gt;</operator><name pos:start="61:50" pos:end="61:51">gb</name></name></expr></argument>, <argument pos:start="61:54" pos:end="61:54"><expr pos:start="61:54" pos:end="61:54"><literal type="number" pos:start="61:54" pos:end="61:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="62:9" pos:end="151:29">for <control pos:start="62:13" pos:end="62:47">(<init pos:start="62:14" pos:end="62:22"><expr pos:start="62:14" pos:end="62:21"><name pos:start="62:14" pos:end="62:17">chan</name> <operator pos:start="62:19" pos:end="62:19">=</operator> <literal type="number" pos:start="62:21" pos:end="62:21">0</literal></expr>;</init> <condition pos:start="62:24" pos:end="62:39"><expr pos:start="62:24" pos:end="62:38"><name pos:start="62:24" pos:end="62:27">chan</name> <operator pos:start="62:29" pos:end="62:29">&lt;</operator> <name pos:start="62:31" pos:end="62:38">channels</name></expr>;</condition> <incr pos:start="62:41" pos:end="62:46"><expr pos:start="62:41" pos:end="62:46"><name pos:start="62:41" pos:end="62:44">chan</name><operator pos:start="62:45" pos:end="62:46">++</operator></expr></incr>)</control> <block pos:start="62:49" pos:end="151:29">{<block_content pos:start="63:13" pos:end="151:29">
            <expr_stmt pos:start="63:13" pos:end="63:59"><expr pos:start="63:13" pos:end="63:58"><name pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:27">prediction_type</name><index pos:start="63:28" pos:end="63:33">[<expr pos:start="63:29" pos:end="63:32"><name pos:start="63:29" pos:end="63:32">chan</name></expr>]</index></name> <operator pos:start="63:35" pos:end="63:35">=</operator> <call pos:start="63:37" pos:end="63:58"><name pos:start="63:37" pos:end="63:44">get_bits</name><argument_list pos:start="63:45" pos:end="63:58">(<argument pos:start="63:46" pos:end="63:54"><expr pos:start="63:46" pos:end="63:54"><operator pos:start="63:46" pos:end="63:46">&amp;</operator><name pos:start="63:47" pos:end="63:54"><name pos:start="63:47" pos:end="63:50">alac</name><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:54">gb</name></name></expr></argument>, <argument pos:start="63:57" pos:end="63:57"><expr pos:start="63:57" pos:end="63:57"><literal type="number" pos:start="63:57" pos:end="63:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:69"><expr pos:start="64:13" pos:end="64:68"><name pos:start="64:13" pos:end="64:43"><name pos:start="64:13" pos:end="64:37">prediction_quantitization</name><index pos:start="64:38" pos:end="64:43">[<expr pos:start="64:39" pos:end="64:42"><name pos:start="64:39" pos:end="64:42">chan</name></expr>]</index></name> <operator pos:start="64:45" pos:end="64:45">=</operator> <call pos:start="64:47" pos:end="64:68"><name pos:start="64:47" pos:end="64:54">get_bits</name><argument_list pos:start="64:55" pos:end="64:68">(<argument pos:start="64:56" pos:end="64:64"><expr pos:start="64:56" pos:end="64:64"><operator pos:start="64:56" pos:end="64:56">&amp;</operator><name pos:start="64:57" pos:end="64:64"><name pos:start="64:57" pos:end="64:60">alac</name><operator pos:start="64:61" pos:end="64:62">-&gt;</operator><name pos:start="64:63" pos:end="64:64">gb</name></name></expr></argument>, <argument pos:start="64:67" pos:end="64:67"><expr pos:start="64:67" pos:end="64:67"><literal type="number" pos:start="64:67" pos:end="64:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="65:13" pos:end="65:56"><expr pos:start="65:13" pos:end="65:55"><name pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:24">ricemodifier</name><index pos:start="65:25" pos:end="65:30">[<expr pos:start="65:26" pos:end="65:29"><name pos:start="65:26" pos:end="65:29">chan</name></expr>]</index></name> <operator pos:start="65:32" pos:end="65:32">=</operator> <call pos:start="65:34" pos:end="65:55"><name pos:start="65:34" pos:end="65:41">get_bits</name><argument_list pos:start="65:42" pos:end="65:55">(<argument pos:start="65:43" pos:end="65:51"><expr pos:start="65:43" pos:end="65:51"><operator pos:start="65:43" pos:end="65:43">&amp;</operator><name pos:start="65:44" pos:end="65:51"><name pos:start="65:44" pos:end="65:47">alac</name><operator pos:start="65:48" pos:end="65:49">-&gt;</operator><name pos:start="65:50" pos:end="65:51">gb</name></name></expr></argument>, <argument pos:start="65:54" pos:end="65:54"><expr pos:start="65:54" pos:end="65:54"><literal type="number" pos:start="65:54" pos:end="65:54">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:62"><expr pos:start="66:13" pos:end="66:61"><name pos:start="66:13" pos:end="66:36"><name pos:start="66:13" pos:end="66:30">predictor_coef_num</name><index pos:start="66:31" pos:end="66:36">[<expr pos:start="66:32" pos:end="66:35"><name pos:start="66:32" pos:end="66:35">chan</name></expr>]</index></name> <operator pos:start="66:38" pos:end="66:38">=</operator> <call pos:start="66:40" pos:end="66:61"><name pos:start="66:40" pos:end="66:47">get_bits</name><argument_list pos:start="66:48" pos:end="66:61">(<argument pos:start="66:49" pos:end="66:57"><expr pos:start="66:49" pos:end="66:57"><operator pos:start="66:49" pos:end="66:49">&amp;</operator><name pos:start="66:50" pos:end="66:57"><name pos:start="66:50" pos:end="66:53">alac</name><operator pos:start="66:54" pos:end="66:55">-&gt;</operator><name pos:start="66:56" pos:end="66:57">gb</name></name></expr></argument>, <argument pos:start="66:60" pos:end="66:60"><expr pos:start="66:60" pos:end="66:60"><literal type="number" pos:start="66:60" pos:end="66:60">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="67:13" pos:end="67:42">/* read the predictor table */</comment>
            <for pos:start="68:13" pos:end="69:81">for <control pos:start="68:17" pos:end="68:58">(<init pos:start="68:18" pos:end="68:23"><expr pos:start="68:18" pos:end="68:22"><name pos:start="68:18" pos:end="68:18">i</name> <operator pos:start="68:20" pos:end="68:20">=</operator> <literal type="number" pos:start="68:22" pos:end="68:22">0</literal></expr>;</init> <condition pos:start="68:25" pos:end="68:53"><expr pos:start="68:25" pos:end="68:52"><name pos:start="68:25" pos:end="68:25">i</name> <operator pos:start="68:27" pos:end="68:27">&lt;</operator> <name pos:start="68:29" pos:end="68:52"><name pos:start="68:29" pos:end="68:46">predictor_coef_num</name><index pos:start="68:47" pos:end="68:52">[<expr pos:start="68:48" pos:end="68:51"><name pos:start="68:48" pos:end="68:51">chan</name></expr>]</index></name></expr>;</condition> <incr pos:start="68:55" pos:end="68:57"><expr pos:start="68:55" pos:end="68:57"><name pos:start="68:55" pos:end="68:55">i</name><operator pos:start="68:56" pos:end="68:57">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:17" pos:end="69:81"><block_content pos:start="69:17" pos:end="69:81">
                <expr_stmt pos:start="69:17" pos:end="69:81"><expr pos:start="69:17" pos:end="69:80"><name pos:start="69:17" pos:end="69:45"><name pos:start="69:17" pos:end="69:36">predictor_coef_table</name><index pos:start="69:37" pos:end="69:42">[<expr pos:start="69:38" pos:end="69:41"><name pos:start="69:38" pos:end="69:41">chan</name></expr>]</index><index pos:start="69:43" pos:end="69:45">[<expr pos:start="69:44" pos:end="69:44"><name pos:start="69:44" pos:end="69:44">i</name></expr>]</index></name> <operator pos:start="69:47" pos:end="69:47">=</operator> <operator pos:start="69:49" pos:end="69:49">(</operator><name pos:start="69:50" pos:end="69:56">int16_t</name><operator pos:start="69:57" pos:end="69:57">)</operator><call pos:start="69:58" pos:end="69:80"><name pos:start="69:58" pos:end="69:65">get_bits</name><argument_list pos:start="69:66" pos:end="69:80">(<argument pos:start="69:67" pos:end="69:75"><expr pos:start="69:67" pos:end="69:75"><operator pos:start="69:67" pos:end="69:67">&amp;</operator><name pos:start="69:68" pos:end="69:75"><name pos:start="69:68" pos:end="69:71">alac</name><operator pos:start="69:72" pos:end="69:73">-&gt;</operator><name pos:start="69:74" pos:end="69:75">gb</name></name></expr></argument>, <argument pos:start="69:78" pos:end="69:79"><expr pos:start="69:78" pos:end="69:79"><literal type="number" pos:start="69:78" pos:end="69:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <if_stmt pos:start="70:9" pos:end="71:94"><if pos:start="70:9" pos:end="71:94">if <condition pos:start="70:12" pos:end="70:25">(<expr pos:start="70:13" pos:end="70:24"><name pos:start="70:13" pos:end="70:24">wasted_bytes</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:94"><block_content pos:start="71:13" pos:end="71:94">
            <expr_stmt pos:start="71:13" pos:end="71:94"><expr pos:start="71:13" pos:end="71:93"><call pos:start="71:13" pos:end="71:93"><name pos:start="71:13" pos:end="71:18">av_log</name><argument_list pos:start="71:19" pos:end="71:93">(<argument pos:start="71:20" pos:end="71:24"><expr pos:start="71:20" pos:end="71:24"><name pos:start="71:20" pos:end="71:24">avctx</name></expr></argument>, <argument pos:start="71:27" pos:end="71:38"><expr pos:start="71:27" pos:end="71:38"><name pos:start="71:27" pos:end="71:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:41" pos:end="71:92"><expr pos:start="71:41" pos:end="71:92"><literal type="string" pos:start="71:41" pos:end="71:92">"FIXME: unimplemented, unhandling of wasted_bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <for pos:start="72:9" pos:end="151:29">for <control pos:start="72:13" pos:end="72:47">(<init pos:start="72:14" pos:end="72:22"><expr pos:start="72:14" pos:end="72:21"><name pos:start="72:14" pos:end="72:17">chan</name> <operator pos:start="72:19" pos:end="72:19">=</operator> <literal type="number" pos:start="72:21" pos:end="72:21">0</literal></expr>;</init> <condition pos:start="72:24" pos:end="72:39"><expr pos:start="72:24" pos:end="72:38"><name pos:start="72:24" pos:end="72:27">chan</name> <operator pos:start="72:29" pos:end="72:29">&lt;</operator> <name pos:start="72:31" pos:end="72:38">channels</name></expr>;</condition> <incr pos:start="72:41" pos:end="72:46"><expr pos:start="72:41" pos:end="72:46"><name pos:start="72:41" pos:end="72:44">chan</name><operator pos:start="72:45" pos:end="72:46">++</operator></expr></incr>)</control> <block pos:start="72:49" pos:end="151:29">{<block_content pos:start="73:13" pos:end="151:29">
            <expr_stmt pos:start="73:13" pos:end="80:81"><expr pos:start="73:13" pos:end="80:80"><call pos:start="73:13" pos:end="80:80"><name pos:start="73:13" pos:end="73:39">bastardized_rice_decompress</name><argument_list pos:start="73:40" pos:end="80:80">(<argument pos:start="73:41" pos:end="73:44"><expr pos:start="73:41" pos:end="73:44"><name pos:start="73:41" pos:end="73:44">alac</name></expr></argument>,
                                        <argument pos:start="74:41" pos:end="74:71"><expr pos:start="74:41" pos:end="74:71"><name pos:start="74:41" pos:end="74:71"><name pos:start="74:41" pos:end="74:44">alac</name><operator pos:start="74:45" pos:end="74:46">-&gt;</operator><name pos:start="74:47" pos:end="74:65">predicterror_buffer</name><index pos:start="74:66" pos:end="74:71">[<expr pos:start="74:67" pos:end="74:70"><name pos:start="74:67" pos:end="74:70">chan</name></expr>]</index></name></expr></argument>,
                                        <argument pos:start="75:41" pos:end="75:53"><expr pos:start="75:41" pos:end="75:53"><name pos:start="75:41" pos:end="75:53">outputsamples</name></expr></argument>,
                                        <argument pos:start="76:41" pos:end="76:54"><expr pos:start="76:41" pos:end="76:54"><name pos:start="76:41" pos:end="76:54">readsamplesize</name></expr></argument>,
                                        <argument pos:start="77:41" pos:end="77:73"><expr pos:start="77:41" pos:end="77:73"><name pos:start="77:41" pos:end="77:73"><name pos:start="77:41" pos:end="77:44">alac</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:73">setinfo_rice_initialhistory</name></name></expr></argument>,
                                        <argument pos:start="78:41" pos:end="78:68"><expr pos:start="78:41" pos:end="78:68"><name pos:start="78:41" pos:end="78:68"><name pos:start="78:41" pos:end="78:44">alac</name><operator pos:start="78:45" pos:end="78:46">-&gt;</operator><name pos:start="78:47" pos:end="78:68">setinfo_rice_kmodifier</name></name></expr></argument>,
                                        <argument pos:start="79:41" pos:end="79:95"><expr pos:start="79:41" pos:end="79:95"><name pos:start="79:41" pos:end="79:58"><name pos:start="79:41" pos:end="79:52">ricemodifier</name><index pos:start="79:53" pos:end="79:58">[<expr pos:start="79:54" pos:end="79:57"><name pos:start="79:54" pos:end="79:57">chan</name></expr>]</index></name> <operator pos:start="79:60" pos:end="79:60">*</operator> <name pos:start="79:62" pos:end="79:91"><name pos:start="79:62" pos:end="79:65">alac</name><operator pos:start="79:66" pos:end="79:67">-&gt;</operator><name pos:start="79:68" pos:end="79:91">setinfo_rice_historymult</name></name> <operator pos:start="79:93" pos:end="79:93">/</operator> <literal type="number" pos:start="79:95" pos:end="79:95">4</literal></expr></argument>,
                                        <argument pos:start="80:41" pos:end="80:79"><expr pos:start="80:41" pos:end="80:79"><operator pos:start="80:41" pos:end="80:41">(</operator><literal type="number" pos:start="80:42" pos:end="80:42">1</literal> <operator pos:start="80:44" pos:end="80:45">&lt;&lt;</operator> <name pos:start="80:47" pos:end="80:74"><name pos:start="80:47" pos:end="80:50">alac</name><operator pos:start="80:51" pos:end="80:52">-&gt;</operator><name pos:start="80:53" pos:end="80:74">setinfo_rice_kmodifier</name></name><operator pos:start="80:75" pos:end="80:75">)</operator> <operator pos:start="80:77" pos:end="80:77">-</operator> <literal type="number" pos:start="80:79" pos:end="80:79">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="81:13" pos:end="98:5"><if pos:start="81:13" pos:end="90:13">if <condition pos:start="81:16" pos:end="81:43">(<expr pos:start="81:17" pos:end="81:42"><name pos:start="81:17" pos:end="81:37"><name pos:start="81:17" pos:end="81:31">prediction_type</name><index pos:start="81:32" pos:end="81:37">[<expr pos:start="81:33" pos:end="81:36"><name pos:start="81:33" pos:end="81:36">chan</name></expr>]</index></name> <operator pos:start="81:39" pos:end="81:40">==</operator> <literal type="number" pos:start="81:42" pos:end="81:42">0</literal></expr>)</condition> <block pos:start="81:45" pos:end="90:13">{<block_content pos:start="83:17" pos:end="89:80">
                <comment type="block" pos:start="82:17" pos:end="82:34">/* adaptive fir */</comment>
                <expr_stmt pos:start="83:17" pos:end="89:80"><expr pos:start="83:17" pos:end="89:79"><call pos:start="83:17" pos:end="89:79"><name pos:start="83:17" pos:end="83:46">predictor_decompress_fir_adapt</name><argument_list pos:start="83:47" pos:end="89:79">(<argument pos:start="83:48" pos:end="83:78"><expr pos:start="83:48" pos:end="83:78"><name pos:start="83:48" pos:end="83:78"><name pos:start="83:48" pos:end="83:51">alac</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:72">predicterror_buffer</name><index pos:start="83:73" pos:end="83:78">[<expr pos:start="83:74" pos:end="83:77"><name pos:start="83:74" pos:end="83:77">chan</name></expr>]</index></name></expr></argument>,
                                               <argument pos:start="84:48" pos:end="84:79"><expr pos:start="84:48" pos:end="84:79"><name pos:start="84:48" pos:end="84:79"><name pos:start="84:48" pos:end="84:51">alac</name><operator pos:start="84:52" pos:end="84:53">-&gt;</operator><name pos:start="84:54" pos:end="84:73">outputsamples_buffer</name><index pos:start="84:74" pos:end="84:79">[<expr pos:start="84:75" pos:end="84:78"><name pos:start="84:75" pos:end="84:78">chan</name></expr>]</index></name></expr></argument>,
                                               <argument pos:start="85:48" pos:end="85:60"><expr pos:start="85:48" pos:end="85:60"><name pos:start="85:48" pos:end="85:60">outputsamples</name></expr></argument>,
                                               <argument pos:start="86:48" pos:end="86:61"><expr pos:start="86:48" pos:end="86:61"><name pos:start="86:48" pos:end="86:61">readsamplesize</name></expr></argument>,
                                               <argument pos:start="87:48" pos:end="87:73"><expr pos:start="87:48" pos:end="87:73"><name pos:start="87:48" pos:end="87:73"><name pos:start="87:48" pos:end="87:67">predictor_coef_table</name><index pos:start="87:68" pos:end="87:73">[<expr pos:start="87:69" pos:end="87:72"><name pos:start="87:69" pos:end="87:72">chan</name></expr>]</index></name></expr></argument>,
                                               <argument pos:start="88:48" pos:end="88:71"><expr pos:start="88:48" pos:end="88:71"><name pos:start="88:48" pos:end="88:71"><name pos:start="88:48" pos:end="88:65">predictor_coef_num</name><index pos:start="88:66" pos:end="88:71">[<expr pos:start="88:67" pos:end="88:70"><name pos:start="88:67" pos:end="88:70">chan</name></expr>]</index></name></expr></argument>,
                                               <argument pos:start="89:48" pos:end="89:78"><expr pos:start="89:48" pos:end="89:78"><name pos:start="89:48" pos:end="89:78"><name pos:start="89:48" pos:end="89:72">prediction_quantitization</name><index pos:start="89:73" pos:end="89:78">[<expr pos:start="89:74" pos:end="89:77"><name pos:start="89:74" pos:end="89:77">chan</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="90:15" pos:end="98:5">else <block pos:start="90:20" pos:end="98:5">{<block_content pos:start="91:17" pos:end="91:109">
                <expr_stmt pos:start="91:17" pos:end="91:109"><expr pos:start="91:17" pos:end="91:108"><call pos:start="91:17" pos:end="91:108"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="91:108">(<argument pos:start="91:24" pos:end="91:28"><expr pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:28">avctx</name></expr></argument>, <argument pos:start="91:31" pos:end="91:42"><expr pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:45" pos:end="91:84"><expr pos:start="91:45" pos:end="91:84"><literal type="string" pos:start="91:45" pos:end="91:84">"FIXME: unhandled prediction type: %i\n"</literal></expr></argument>, <argument pos:start="91:87" pos:end="91:107"><expr pos:start="91:87" pos:end="91:107"><name pos:start="91:87" pos:end="91:107"><name pos:start="91:87" pos:end="91:101">prediction_type</name><index pos:start="91:102" pos:end="91:107">[<expr pos:start="91:103" pos:end="91:106"><name pos:start="91:103" pos:end="91:106">chan</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="92:17" pos:end="97:19">/* I think the only other prediction type (or perhaps this is
                 * just a boolean?) runs adaptive fir twice.. like:
                 * predictor_decompress_fir_adapt(predictor_error, tempout, ...)
                 * predictor_decompress_fir_adapt(predictor_error, outputsamples ...)
                 * little strange..
                 */</comment>
    </block_content>}</block></else></if_stmt> <if_stmt pos:start="98:7" pos:end="151:29"><else pos:start="98:7" pos:end="151:29">else <block pos:start="98:12" pos:end="151:29">{<block_content pos:start="100:9" pos:end="151:29">
        <comment type="block" pos:start="99:9" pos:end="99:39">/* not compressed, easy case */</comment>
        <if_stmt pos:start="100:9" pos:end="151:29"><if pos:start="100:9" pos:end="151:29">if <condition pos:start="100:12" pos:end="100:44">(<expr pos:start="100:13" pos:end="100:43"><name pos:start="100:13" pos:end="100:37"><name pos:start="100:13" pos:end="100:16">alac</name><operator pos:start="100:17" pos:end="100:18">-&gt;</operator><name pos:start="100:19" pos:end="100:37">setinfo_sample_size</name></name> <operator pos:start="100:39" pos:end="100:40">&lt;=</operator> <literal type="number" pos:start="100:42" pos:end="100:43">16</literal></expr>)</condition> <block pos:start="100:46" pos:end="151:29">{<block_content pos:start="101:13" pos:end="151:29">
            <decl_stmt pos:start="101:13" pos:end="101:24"><decl pos:start="101:13" pos:end="101:17"><type pos:start="101:13" pos:end="101:15"><name pos:start="101:13" pos:end="101:15">int</name></type> <name pos:start="101:17" pos:end="101:17">i</name></decl>, <decl pos:start="101:20" pos:end="101:23"><type ref="prev" pos:start="101:13" pos:end="101:15"/><name pos:start="101:20" pos:end="101:23">chan</name></decl>;</decl_stmt>
            <for pos:start="102:13" pos:end="108:9">for <control pos:start="102:17" pos:end="102:51">(<init pos:start="102:18" pos:end="102:26"><expr pos:start="102:18" pos:end="102:25"><name pos:start="102:18" pos:end="102:21">chan</name> <operator pos:start="102:23" pos:end="102:23">=</operator> <literal type="number" pos:start="102:25" pos:end="102:25">0</literal></expr>;</init> <condition pos:start="102:28" pos:end="102:43"><expr pos:start="102:28" pos:end="102:42"><name pos:start="102:28" pos:end="102:31">chan</name> <operator pos:start="102:33" pos:end="102:33">&lt;</operator> <name pos:start="102:35" pos:end="102:42">channels</name></expr>;</condition> <incr pos:start="102:45" pos:end="102:50"><expr pos:start="102:45" pos:end="102:50"><name pos:start="102:45" pos:end="102:48">chan</name><operator pos:start="102:49" pos:end="102:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="103:17" pos:end="108:9"><block_content pos:start="103:17" pos:end="108:9">
                <for pos:start="103:17" pos:end="108:9">for <control pos:start="103:21" pos:end="103:51">(<init pos:start="103:22" pos:end="103:27"><expr pos:start="103:22" pos:end="103:26"><name pos:start="103:22" pos:end="103:22">i</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <literal type="number" pos:start="103:26" pos:end="103:26">0</literal></expr>;</init> <condition pos:start="103:29" pos:end="103:46"><expr pos:start="103:29" pos:end="103:45"><name pos:start="103:29" pos:end="103:29">i</name> <operator pos:start="103:31" pos:end="103:31">&lt;</operator> <name pos:start="103:33" pos:end="103:45">outputsamples</name></expr>;</condition> <incr pos:start="103:48" pos:end="103:50"><expr pos:start="103:48" pos:end="103:50"><name pos:start="103:48" pos:end="103:48">i</name><operator pos:start="103:49" pos:end="103:50">++</operator></expr></incr>)</control> <block pos:start="103:53" pos:end="108:9">{<block_content pos:start="104:21" pos:end="107:68">
                    <decl_stmt pos:start="104:21" pos:end="104:38"><decl pos:start="104:21" pos:end="104:37"><type pos:start="104:21" pos:end="104:27"><name pos:start="104:21" pos:end="104:27">int32_t</name></type> <name pos:start="104:29" pos:end="104:37">audiobits</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="105:21" pos:end="105:79"><expr pos:start="105:21" pos:end="105:78"><name pos:start="105:21" pos:end="105:29">audiobits</name> <operator pos:start="105:31" pos:end="105:31">=</operator> <call pos:start="105:33" pos:end="105:78"><name pos:start="105:33" pos:end="105:40">get_bits</name><argument_list pos:start="105:41" pos:end="105:78">(<argument pos:start="105:42" pos:end="105:50"><expr pos:start="105:42" pos:end="105:50"><operator pos:start="105:42" pos:end="105:42">&amp;</operator><name pos:start="105:43" pos:end="105:50"><name pos:start="105:43" pos:end="105:46">alac</name><operator pos:start="105:47" pos:end="105:48">-&gt;</operator><name pos:start="105:49" pos:end="105:50">gb</name></name></expr></argument>, <argument pos:start="105:53" pos:end="105:77"><expr pos:start="105:53" pos:end="105:77"><name pos:start="105:53" pos:end="105:77"><name pos:start="105:53" pos:end="105:56">alac</name><operator pos:start="105:57" pos:end="105:58">-&gt;</operator><name pos:start="105:59" pos:end="105:77">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="106:21" pos:end="106:73"><expr pos:start="106:21" pos:end="106:72"><name pos:start="106:21" pos:end="106:29">audiobits</name> <operator pos:start="106:31" pos:end="106:31">=</operator> <call pos:start="106:33" pos:end="106:72"><name pos:start="106:33" pos:end="106:45">extend_sign32</name><argument_list pos:start="106:46" pos:end="106:72">(<argument pos:start="106:47" pos:end="106:55"><expr pos:start="106:47" pos:end="106:55"><name pos:start="106:47" pos:end="106:55">audiobits</name></expr></argument>, <argument pos:start="106:58" pos:end="106:71"><expr pos:start="106:58" pos:end="106:71"><name pos:start="106:58" pos:end="106:71">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="107:21" pos:end="107:68"><expr pos:start="107:21" pos:end="107:67"><name pos:start="107:21" pos:end="107:55"><name pos:start="107:21" pos:end="107:24">alac</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:46">outputsamples_buffer</name><index pos:start="107:47" pos:end="107:52">[<expr pos:start="107:48" pos:end="107:51"><name pos:start="107:48" pos:end="107:51">chan</name></expr>]</index><index pos:start="107:53" pos:end="107:55">[<expr pos:start="107:54" pos:end="107:54"><name pos:start="107:54" pos:end="107:54">i</name></expr>]</index></name> <operator pos:start="107:57" pos:end="107:57">=</operator> <name pos:start="107:59" pos:end="107:67">audiobits</name></expr>;</expr_stmt>
        </block_content>}</block></for></block_content></block></for> <if_stmt pos:start="108:11" pos:end="151:29"><else pos:start="108:11" pos:end="151:29">else <block pos:start="108:16" pos:end="151:29">{<block_content pos:start="109:13" pos:end="151:29">
            <decl_stmt pos:start="109:13" pos:end="109:24"><decl pos:start="109:13" pos:end="109:17"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:17">i</name></decl>, <decl pos:start="109:20" pos:end="109:23"><type ref="prev" pos:start="109:13" pos:end="109:15"/><name pos:start="109:20" pos:end="109:23">chan</name></decl>;</decl_stmt>
            <for pos:start="110:13" pos:end="151:29">for <control pos:start="110:17" pos:end="110:51">(<init pos:start="110:18" pos:end="110:26"><expr pos:start="110:18" pos:end="110:25"><name pos:start="110:18" pos:end="110:21">chan</name> <operator pos:start="110:23" pos:end="110:23">=</operator> <literal type="number" pos:start="110:25" pos:end="110:25">0</literal></expr>;</init> <condition pos:start="110:28" pos:end="110:43"><expr pos:start="110:28" pos:end="110:42"><name pos:start="110:28" pos:end="110:31">chan</name> <operator pos:start="110:33" pos:end="110:33">&lt;</operator> <name pos:start="110:35" pos:end="110:42">channels</name></expr>;</condition> <incr pos:start="110:45" pos:end="110:50"><expr pos:start="110:45" pos:end="110:50"><name pos:start="110:45" pos:end="110:48">chan</name><operator pos:start="110:49" pos:end="110:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:17" pos:end="151:29"><block_content pos:start="111:17" pos:end="151:29">
                <for pos:start="111:17" pos:end="151:29">for <control pos:start="111:21" pos:end="111:51">(<init pos:start="111:22" pos:end="111:27"><expr pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:22">i</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>;</init> <condition pos:start="111:29" pos:end="111:46"><expr pos:start="111:29" pos:end="111:45"><name pos:start="111:29" pos:end="111:29">i</name> <operator pos:start="111:31" pos:end="111:31">&lt;</operator> <name pos:start="111:33" pos:end="111:45">outputsamples</name></expr>;</condition> <incr pos:start="111:48" pos:end="111:50"><expr pos:start="111:48" pos:end="111:50"><name pos:start="111:48" pos:end="111:48">i</name><operator pos:start="111:49" pos:end="111:50">++</operator></expr></incr>)</control> <block pos:start="111:53" pos:end="151:29">{<block_content pos:start="112:21" pos:end="151:29">
                    <decl_stmt pos:start="112:21" pos:end="112:38"><decl pos:start="112:21" pos:end="112:37"><type pos:start="112:21" pos:end="112:27"><name pos:start="112:21" pos:end="112:27">int32_t</name></type> <name pos:start="112:29" pos:end="112:37">audiobits</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="113:21" pos:end="113:56"><expr pos:start="113:21" pos:end="113:55"><name pos:start="113:21" pos:end="113:29">audiobits</name> <operator pos:start="113:31" pos:end="113:31">=</operator> <call pos:start="113:33" pos:end="113:55"><name pos:start="113:33" pos:end="113:40">get_bits</name><argument_list pos:start="113:41" pos:end="113:55">(<argument pos:start="113:42" pos:end="113:50"><expr pos:start="113:42" pos:end="113:50"><operator pos:start="113:42" pos:end="113:42">&amp;</operator><name pos:start="113:43" pos:end="113:50"><name pos:start="113:43" pos:end="113:46">alac</name><operator pos:start="113:47" pos:end="113:48">-&gt;</operator><name pos:start="113:49" pos:end="113:50">gb</name></name></expr></argument>, <argument pos:start="113:53" pos:end="113:54"><expr pos:start="113:53" pos:end="113:54"><literal type="number" pos:start="113:53" pos:end="113:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block" pos:start="114:21" pos:end="115:68">/* special case of sign extension..
                     * as we'll be ORing the low 16bits into this */</comment>
                    <expr_stmt pos:start="116:21" pos:end="116:48"><expr pos:start="116:21" pos:end="116:47"><name pos:start="116:21" pos:end="116:29">audiobits</name> <operator pos:start="116:31" pos:end="116:31">=</operator> <name pos:start="116:33" pos:end="116:41">audiobits</name> <operator pos:start="116:43" pos:end="116:44">&lt;&lt;</operator> <literal type="number" pos:start="116:46" pos:end="116:47">16</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="117:21" pos:end="117:78"><expr pos:start="117:21" pos:end="117:77"><name pos:start="117:21" pos:end="117:29">audiobits</name> <operator pos:start="117:31" pos:end="117:31">=</operator> <name pos:start="117:33" pos:end="117:41">audiobits</name> <operator pos:start="117:43" pos:end="117:44">&gt;&gt;</operator> <operator pos:start="117:46" pos:end="117:46">(</operator><literal type="number" pos:start="117:47" pos:end="117:50">32</literal> <operator pos:start="117:50" pos:end="117:50">-</operator> <name pos:start="117:52" pos:end="117:76"><name pos:start="117:52" pos:end="117:55">alac</name><operator pos:start="117:56" pos:end="117:57">-&gt;</operator><name pos:start="117:58" pos:end="117:76">setinfo_sample_size</name></name><operator pos:start="117:77" pos:end="117:77">)</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="118:21" pos:end="118:85"><expr pos:start="118:21" pos:end="118:84"><name pos:start="118:21" pos:end="118:29">audiobits</name> <operator pos:start="118:31" pos:end="118:32">|=</operator> <call pos:start="118:34" pos:end="118:84"><name pos:start="118:34" pos:end="118:41">get_bits</name><argument_list pos:start="118:42" pos:end="118:84">(<argument pos:start="118:43" pos:end="118:51"><expr pos:start="118:43" pos:end="118:51"><operator pos:start="118:43" pos:end="118:43">&amp;</operator><name pos:start="118:44" pos:end="118:51"><name pos:start="118:44" pos:end="118:47">alac</name><operator pos:start="118:48" pos:end="118:49">-&gt;</operator><name pos:start="118:50" pos:end="118:51">gb</name></name></expr></argument>, <argument pos:start="118:54" pos:end="118:83"><expr pos:start="118:54" pos:end="118:83"><name pos:start="118:54" pos:end="118:78"><name pos:start="118:54" pos:end="118:57">alac</name><operator pos:start="118:58" pos:end="118:59">-&gt;</operator><name pos:start="118:60" pos:end="118:78">setinfo_sample_size</name></name> <operator pos:start="118:80" pos:end="118:80">-</operator> <literal type="number" pos:start="118:82" pos:end="118:83">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="119:21" pos:end="119:68"><expr pos:start="119:21" pos:end="119:67"><name pos:start="119:21" pos:end="119:55"><name pos:start="119:21" pos:end="119:24">alac</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:46">outputsamples_buffer</name><index pos:start="119:47" pos:end="119:52">[<expr pos:start="119:48" pos:end="119:51"><name pos:start="119:48" pos:end="119:51">chan</name></expr>]</index><index pos:start="119:53" pos:end="119:55">[<expr pos:start="119:54" pos:end="119:54"><name pos:start="119:54" pos:end="119:54">i</name></expr>]</index></name> <operator pos:start="119:57" pos:end="119:57">=</operator> <name pos:start="119:59" pos:end="119:67">audiobits</name></expr>;</expr_stmt>
        <comment type="block" pos:start="120:9" pos:end="120:31">/* wasted_bytes = 0; */</comment>
        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:25">interlacing_shift</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <literal type="number" pos:start="121:29" pos:end="121:29">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="122:9" pos:end="122:35"><expr pos:start="122:9" pos:end="122:34"><name pos:start="122:9" pos:end="122:30">interlacing_leftweight</name> <operator pos:start="122:32" pos:end="122:32">=</operator> <literal type="number" pos:start="122:34" pos:end="122:34">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="123:5" pos:end="124:68"><if pos:start="123:5" pos:end="124:68">if <condition pos:start="123:8" pos:end="123:36">(<expr pos:start="123:9" pos:end="123:35"><call pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:16">get_bits</name><argument_list pos:start="123:17" pos:end="123:30">(<argument pos:start="123:18" pos:end="123:26"><expr pos:start="123:18" pos:end="123:26"><operator pos:start="123:18" pos:end="123:18">&amp;</operator><name pos:start="123:19" pos:end="123:26"><name pos:start="123:19" pos:end="123:22">alac</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:26">gb</name></name></expr></argument>, <argument pos:start="123:29" pos:end="123:29"><expr pos:start="123:29" pos:end="123:29"><literal type="number" pos:start="123:29" pos:end="123:29">3</literal></expr></argument>)</argument_list></call> <operator pos:start="123:32" pos:end="123:33">!=</operator> <literal type="number" pos:start="123:35" pos:end="123:35">7</literal></expr>)</condition><block type="pseudo" pos:start="124:9" pos:end="124:68"><block_content pos:start="124:9" pos:end="124:68">
        <expr_stmt pos:start="124:9" pos:end="124:68"><expr pos:start="124:9" pos:end="124:67"><call pos:start="124:9" pos:end="124:67"><name pos:start="124:9" pos:end="124:14">av_log</name><argument_list pos:start="124:15" pos:end="124:67">(<argument pos:start="124:16" pos:end="124:20"><expr pos:start="124:16" pos:end="124:20"><name pos:start="124:16" pos:end="124:20">avctx</name></expr></argument>, <argument pos:start="124:23" pos:end="124:34"><expr pos:start="124:23" pos:end="124:34"><name pos:start="124:23" pos:end="124:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="124:37" pos:end="124:66"><expr pos:start="124:37" pos:end="124:66"><literal type="string" pos:start="124:37" pos:end="124:66">"Error : Wrong End Of Frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <switch pos:start="125:5" pos:end="151:29">switch<condition pos:start="125:11" pos:end="125:37">(<expr pos:start="125:12" pos:end="125:36"><name pos:start="125:12" pos:end="125:36"><name pos:start="125:12" pos:end="125:15">alac</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:36">setinfo_sample_size</name></name></expr>)</condition> <block pos:start="125:39" pos:end="151:29">{<block_content pos:start="126:5" pos:end="151:29">
    <case pos:start="126:5" pos:end="126:12">case <expr pos:start="126:10" pos:end="126:11"><literal type="number" pos:start="126:10" pos:end="126:11">16</literal></expr>:</case>
        <if_stmt pos:start="127:9" pos:end="151:29"><if pos:start="127:9" pos:end="134:9">if <condition pos:start="127:12" pos:end="127:26">(<expr pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:20">channels</name> <operator pos:start="127:22" pos:end="127:23">==</operator> <literal type="number" pos:start="127:25" pos:end="127:25">2</literal></expr>)</condition> <block pos:start="127:28" pos:end="134:9">{<block_content pos:start="128:13" pos:end="133:58">
            <expr_stmt pos:start="128:13" pos:end="133:58"><expr pos:start="128:13" pos:end="133:57"><call pos:start="128:13" pos:end="133:57"><name pos:start="128:13" pos:end="128:33">reconstruct_stereo_16</name><argument_list pos:start="128:34" pos:end="133:57">(<argument pos:start="128:35" pos:end="128:60"><expr pos:start="128:35" pos:end="128:60"><name pos:start="128:35" pos:end="128:60"><name pos:start="128:35" pos:end="128:38">alac</name><operator pos:start="128:39" pos:end="128:40">-&gt;</operator><name pos:start="128:41" pos:end="128:60">outputsamples_buffer</name></name></expr></argument>,
                                  <argument pos:start="129:35" pos:end="129:53"><expr pos:start="129:35" pos:end="129:53"><operator pos:start="129:35" pos:end="129:35">(</operator><name pos:start="129:36" pos:end="129:42">int16_t</name><operator pos:start="129:43" pos:end="129:43">*</operator><operator pos:start="129:44" pos:end="129:44">)</operator><name pos:start="129:45" pos:end="129:53">outbuffer</name></expr></argument>,
                                  <argument pos:start="130:35" pos:end="130:51"><expr pos:start="130:35" pos:end="130:51"><name pos:start="130:35" pos:end="130:51"><name pos:start="130:35" pos:end="130:38">alac</name><operator pos:start="130:39" pos:end="130:40">-&gt;</operator><name pos:start="130:41" pos:end="130:51">numchannels</name></name></expr></argument>,
                                  <argument pos:start="131:35" pos:end="131:47"><expr pos:start="131:35" pos:end="131:47"><name pos:start="131:35" pos:end="131:47">outputsamples</name></expr></argument>,
                                  <argument pos:start="132:35" pos:end="132:51"><expr pos:start="132:35" pos:end="132:51"><name pos:start="132:35" pos:end="132:51">interlacing_shift</name></expr></argument>,
                                  <argument pos:start="133:35" pos:end="133:56"><expr pos:start="133:35" pos:end="133:56"><name pos:start="133:35" pos:end="133:56">interlacing_leftweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="134:11" pos:end="151:29">else <block pos:start="134:16" pos:end="151:29">{<block_content pos:start="135:13" pos:end="151:29">
            <decl_stmt pos:start="135:13" pos:end="135:18"><decl pos:start="135:13" pos:end="135:17"><type pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">int</name></type> <name pos:start="135:17" pos:end="135:17">i</name></decl>;</decl_stmt>
            <for pos:start="136:13" pos:end="151:29">for <control pos:start="136:17" pos:end="136:47">(<init pos:start="136:18" pos:end="136:23"><expr pos:start="136:18" pos:end="136:22"><name pos:start="136:18" pos:end="136:18">i</name> <operator pos:start="136:20" pos:end="136:20">=</operator> <literal type="number" pos:start="136:22" pos:end="136:22">0</literal></expr>;</init> <condition pos:start="136:25" pos:end="136:42"><expr pos:start="136:25" pos:end="136:41"><name pos:start="136:25" pos:end="136:25">i</name> <operator pos:start="136:27" pos:end="136:27">&lt;</operator> <name pos:start="136:29" pos:end="136:41">outputsamples</name></expr>;</condition> <incr pos:start="136:44" pos:end="136:46"><expr pos:start="136:44" pos:end="136:46"><name pos:start="136:44" pos:end="136:44">i</name><operator pos:start="136:45" pos:end="136:46">++</operator></expr></incr>)</control> <block pos:start="136:49" pos:end="151:29">{<block_content pos:start="137:17" pos:end="151:29">
                <decl_stmt pos:start="137:17" pos:end="137:66"><decl pos:start="137:17" pos:end="137:65"><type pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:23">int16_t</name></type> <name pos:start="137:25" pos:end="137:30">sample</name> <init pos:start="137:32" pos:end="137:65">= <expr pos:start="137:34" pos:end="137:65"><name pos:start="137:34" pos:end="137:65"><name pos:start="137:34" pos:end="137:37">alac</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:59">outputsamples_buffer</name><index pos:start="137:60" pos:end="137:62">[<expr pos:start="137:61" pos:end="137:61"><literal type="number" pos:start="137:61" pos:end="137:61">0</literal></expr>]</index><index pos:start="137:63" pos:end="137:65">[<expr pos:start="137:64" pos:end="137:64"><name pos:start="137:64" pos:end="137:64">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="138:17" pos:end="138:70"><expr pos:start="138:17" pos:end="138:69"><operator pos:start="138:17" pos:end="138:17">(</operator><operator pos:start="138:18" pos:end="138:18">(</operator><name pos:start="138:19" pos:end="138:25">int16_t</name><operator pos:start="138:26" pos:end="138:26">*</operator><operator pos:start="138:27" pos:end="138:27">)</operator><name pos:start="138:28" pos:end="138:36">outbuffer</name><operator pos:start="138:37" pos:end="138:37">)</operator><index pos:start="138:38" pos:end="138:60">[<expr pos:start="138:39" pos:end="138:59"><name pos:start="138:39" pos:end="138:39">i</name> <operator pos:start="138:41" pos:end="138:41">*</operator> <name pos:start="138:43" pos:end="138:59"><name pos:start="138:43" pos:end="138:46">alac</name><operator pos:start="138:47" pos:end="138:48">-&gt;</operator><name pos:start="138:49" pos:end="138:59">numchannels</name></name></expr>]</index> <operator pos:start="138:62" pos:end="138:62">=</operator> <name pos:start="138:64" pos:end="138:69">sample</name></expr>;</expr_stmt>
        <break pos:start="139:9" pos:end="139:14">break;</break>
    <case pos:start="140:5" pos:end="140:12">case <expr pos:start="140:10" pos:end="140:11"><literal type="number" pos:start="140:10" pos:end="140:11">20</literal></expr>:</case>
    <case pos:start="141:5" pos:end="141:12">case <expr pos:start="141:10" pos:end="141:11"><literal type="number" pos:start="141:10" pos:end="141:11">24</literal></expr>:</case>
        <comment type="line" pos:start="142:9" pos:end="142:78">// It is not clear if there exist any encoder that creates 24 bit ALAC</comment>
        <comment type="line" pos:start="143:9" pos:end="143:76">// files. iTunes convert 24 bit raw files to 16 bit before encoding.</comment>
    <case pos:start="144:5" pos:end="144:12">case <expr pos:start="144:10" pos:end="144:11"><literal type="number" pos:start="144:10" pos:end="144:11">32</literal></expr>:</case>
        <expr_stmt pos:start="145:9" pos:end="145:104"><expr pos:start="145:9" pos:end="145:103"><call pos:start="145:9" pos:end="145:103"><name pos:start="145:9" pos:end="145:14">av_log</name><argument_list pos:start="145:15" pos:end="145:103">(<argument pos:start="145:16" pos:end="145:20"><expr pos:start="145:16" pos:end="145:20"><name pos:start="145:16" pos:end="145:20">avctx</name></expr></argument>, <argument pos:start="145:23" pos:end="145:34"><expr pos:start="145:23" pos:end="145:34"><name pos:start="145:23" pos:end="145:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:37" pos:end="145:75"><expr pos:start="145:37" pos:end="145:75"><literal type="string" pos:start="145:37" pos:end="145:75">"FIXME: unimplemented sample size %i\n"</literal></expr></argument>, <argument pos:start="145:78" pos:end="145:102"><expr pos:start="145:78" pos:end="145:102"><name pos:start="145:78" pos:end="145:102"><name pos:start="145:78" pos:end="145:81">alac</name><operator pos:start="145:82" pos:end="145:83">-&gt;</operator><name pos:start="145:84" pos:end="145:102">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="146:9" pos:end="146:14">break;</break>
    <default pos:start="147:5" pos:end="147:12">default:</default>
        <break pos:start="148:9" pos:end="148:14">break;</break>
    <if_stmt pos:start="149:5" pos:end="150:113"><if pos:start="149:5" pos:end="150:113">if <condition pos:start="149:8" pos:end="149:62">(<expr pos:start="149:9" pos:end="149:61"><name pos:start="149:9" pos:end="149:25">input_buffer_size</name> <operator pos:start="149:27" pos:end="149:27">*</operator> <literal type="number" pos:start="149:29" pos:end="149:31">8</literal> <operator pos:start="149:31" pos:end="149:31">-</operator> <call pos:start="149:33" pos:end="149:57"><name pos:start="149:33" pos:end="149:46">get_bits_count</name><argument_list pos:start="149:47" pos:end="149:57">(<argument pos:start="149:48" pos:end="149:56"><expr pos:start="149:48" pos:end="149:56"><operator pos:start="149:48" pos:end="149:48">&amp;</operator><name pos:start="149:49" pos:end="149:56"><name pos:start="149:49" pos:end="149:52">alac</name><operator pos:start="149:53" pos:end="149:54">-&gt;</operator><name pos:start="149:55" pos:end="149:56">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="149:59" pos:end="149:59">&gt;</operator> <literal type="number" pos:start="149:61" pos:end="149:61">8</literal></expr>)</condition><block type="pseudo" pos:start="150:9" pos:end="150:113"><block_content pos:start="150:9" pos:end="150:113">
        <expr_stmt pos:start="150:9" pos:end="150:113"><expr pos:start="150:9" pos:end="150:112"><call pos:start="150:9" pos:end="150:112"><name pos:start="150:9" pos:end="150:14">av_log</name><argument_list pos:start="150:15" pos:end="150:112">(<argument pos:start="150:16" pos:end="150:20"><expr pos:start="150:16" pos:end="150:20"><name pos:start="150:16" pos:end="150:20">avctx</name></expr></argument>, <argument pos:start="150:23" pos:end="150:34"><expr pos:start="150:23" pos:end="150:34"><name pos:start="150:23" pos:end="150:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="150:37" pos:end="150:60"><expr pos:start="150:37" pos:end="150:60"><literal type="string" pos:start="150:37" pos:end="150:60">"Error : %d bits left\n"</literal></expr></argument>, <argument pos:start="150:63" pos:end="150:111"><expr pos:start="150:63" pos:end="150:111"><name pos:start="150:63" pos:end="150:79">input_buffer_size</name> <operator pos:start="150:81" pos:end="150:81">*</operator> <literal type="number" pos:start="150:83" pos:end="150:85">8</literal> <operator pos:start="150:85" pos:end="150:85">-</operator> <call pos:start="150:87" pos:end="150:111"><name pos:start="150:87" pos:end="150:100">get_bits_count</name><argument_list pos:start="150:101" pos:end="150:111">(<argument pos:start="150:102" pos:end="150:110"><expr pos:start="150:102" pos:end="150:110"><operator pos:start="150:102" pos:end="150:102">&amp;</operator><name pos:start="150:103" pos:end="150:110"><name pos:start="150:103" pos:end="150:106">alac</name><operator pos:start="150:107" pos:end="150:108">-&gt;</operator><name pos:start="150:109" pos:end="150:110">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="151:5" pos:end="151:29">return <expr pos:start="151:12" pos:end="151:28"><name pos:start="151:12" pos:end="151:28">input_buffer_size</name></expr>;</return></block_content></block></for></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></for></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
