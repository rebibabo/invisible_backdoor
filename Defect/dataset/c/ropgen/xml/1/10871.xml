<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10871.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">nbd_receive_list</name><parameter_list pos:start="1:28" pos:end="1:71">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:38">QIOChannel</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ioc</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:56"><decl pos:start="1:46" pos:end="1:56"><type pos:start="1:46" pos:end="1:56"><name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">name</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:63">Error</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier><modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="163:1">{<block_content pos:start="5:5" pos:end="161:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">opt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">namelen</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><operator pos:start="17:5" pos:end="17:5">*</operator><name pos:start="17:6" pos:end="17:9">name</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <name pos:start="17:13" pos:end="17:16">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:63">(<expr pos:start="19:9" pos:end="19:62"><call pos:start="19:9" pos:end="19:45"><name pos:start="19:9" pos:end="19:17">read_sync</name><argument_list pos:start="19:18" pos:end="19:45">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><name pos:start="19:19" pos:end="19:21">ioc</name></expr></argument>, <argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:29">magic</name></expr></argument>, <argument pos:start="19:32" pos:end="19:44"><expr pos:start="19:32" pos:end="19:44"><sizeof pos:start="19:32" pos:end="19:44">sizeof<argument_list pos:start="19:38" pos:end="19:44">(<argument pos:start="19:39" pos:end="19:43"><expr pos:start="19:39" pos:end="19:43"><name pos:start="19:39" pos:end="19:43">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="19:47" pos:end="19:48">!=</operator> <sizeof pos:start="19:50" pos:end="19:62">sizeof<argument_list pos:start="19:56" pos:end="19:62">(<argument pos:start="19:57" pos:end="19:61"><expr pos:start="19:57" pos:end="19:61"><name pos:start="19:57" pos:end="19:61">magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="19:65" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <expr_stmt pos:start="21:9" pos:end="21:61"><expr pos:start="21:9" pos:end="21:60"><call pos:start="21:9" pos:end="21:60"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:60">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:59"><expr pos:start="21:26" pos:end="21:59"><literal type="string" pos:start="21:26" pos:end="21:59">"failed to read list option magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:9">magic</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:30"><name pos:start="27:13" pos:end="27:23">be64_to_cpu</name><argument_list pos:start="27:24" pos:end="27:30">(<argument pos:start="27:25" pos:end="27:29"><expr pos:start="27:25" pos:end="27:29"><name pos:start="27:25" pos:end="27:29">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:31">(<expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:13">magic</name> <operator pos:start="29:15" pos:end="29:16">!=</operator> <name pos:start="29:18" pos:end="29:30">NBD_REP_MAGIC</name></expr>)</condition> <block pos:start="29:33" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><call pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:18">error_setg</name><argument_list pos:start="31:19" pos:end="31:56">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">errp</name></expr></argument>, <argument pos:start="31:26" pos:end="31:55"><expr pos:start="31:26" pos:end="31:55"><literal type="string" pos:start="31:26" pos:end="31:55">"Unexpected option list magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:57">(<expr pos:start="37:9" pos:end="37:56"><call pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:17">read_sync</name><argument_list pos:start="37:18" pos:end="37:41">(<argument pos:start="37:19" pos:end="37:21"><expr pos:start="37:19" pos:end="37:21"><name pos:start="37:19" pos:end="37:21">ioc</name></expr></argument>, <argument pos:start="37:24" pos:end="37:27"><expr pos:start="37:24" pos:end="37:27"><operator pos:start="37:24" pos:end="37:24">&amp;</operator><name pos:start="37:25" pos:end="37:27">opt</name></expr></argument>, <argument pos:start="37:30" pos:end="37:40"><expr pos:start="37:30" pos:end="37:40"><sizeof pos:start="37:30" pos:end="37:40">sizeof<argument_list pos:start="37:36" pos:end="37:40">(<argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><name pos:start="37:37" pos:end="37:39">opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="37:43" pos:end="37:44">!=</operator> <sizeof pos:start="37:46" pos:end="37:56">sizeof<argument_list pos:start="37:52" pos:end="37:56">(<argument pos:start="37:53" pos:end="37:55"><expr pos:start="37:53" pos:end="37:55"><name pos:start="37:53" pos:end="37:55">opt</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="37:59" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:55"><expr pos:start="39:9" pos:end="39:54"><call pos:start="39:9" pos:end="39:54"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:54">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:53"><expr pos:start="39:26" pos:end="39:53"><literal type="string" pos:start="39:26" pos:end="39:53">"failed to read list option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:27"><expr pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:7">opt</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:26"><name pos:start="45:11" pos:end="45:21">be32_to_cpu</name><argument_list pos:start="45:22" pos:end="45:26">(<argument pos:start="45:23" pos:end="45:25"><expr pos:start="45:23" pos:end="45:25"><name pos:start="45:23" pos:end="45:25">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:28">(<expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:11">opt</name> <operator pos:start="47:13" pos:end="47:14">!=</operator> <name pos:start="47:16" pos:end="47:27">NBD_OPT_LIST</name></expr>)</condition> <block pos:start="47:30" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:18">

        <expr_stmt pos:start="49:9" pos:end="51:38"><expr pos:start="49:9" pos:end="51:37"><call pos:start="49:9" pos:end="51:37"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="51:37">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:64"><expr pos:start="49:26" pos:end="49:64"><literal type="string" pos:start="49:26" pos:end="49:64">"Unexpected option type %x expected %x"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">opt</name></expr></argument>, <argument pos:start="51:25" pos:end="51:36"><expr pos:start="51:25" pos:end="51:36"><name pos:start="51:25" pos:end="51:36">NBD_OPT_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:60">(<expr pos:start="59:9" pos:end="59:59"><call pos:start="59:9" pos:end="59:43"><name pos:start="59:9" pos:end="59:17">read_sync</name><argument_list pos:start="59:18" pos:end="59:43">(<argument pos:start="59:19" pos:end="59:21"><expr pos:start="59:19" pos:end="59:21"><name pos:start="59:19" pos:end="59:21">ioc</name></expr></argument>, <argument pos:start="59:24" pos:end="59:28"><expr pos:start="59:24" pos:end="59:28"><operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:28">type</name></expr></argument>, <argument pos:start="59:31" pos:end="59:42"><expr pos:start="59:31" pos:end="59:42"><sizeof pos:start="59:31" pos:end="59:42">sizeof<argument_list pos:start="59:37" pos:end="59:42">(<argument pos:start="59:38" pos:end="59:41"><expr pos:start="59:38" pos:end="59:41"><name pos:start="59:38" pos:end="59:41">type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="59:45" pos:end="59:46">!=</operator> <sizeof pos:start="59:48" pos:end="59:59">sizeof<argument_list pos:start="59:54" pos:end="59:59">(<argument pos:start="59:55" pos:end="59:58"><expr pos:start="59:55" pos:end="59:58"><name pos:start="59:55" pos:end="59:58">type</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="59:62" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:60"><expr pos:start="61:9" pos:end="61:59"><call pos:start="61:9" pos:end="61:59"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="61:59">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:58"><expr pos:start="61:26" pos:end="61:58"><literal type="string" pos:start="61:26" pos:end="61:58">"failed to read list option type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:29"><expr pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:8">type</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="67:28"><name pos:start="67:12" pos:end="67:22">be32_to_cpu</name><argument_list pos:start="67:23" pos:end="67:28">(<argument pos:start="67:24" pos:end="67:27"><expr pos:start="67:24" pos:end="67:27"><name pos:start="67:24" pos:end="67:27">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:34">(<expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:12">type</name> <operator pos:start="69:14" pos:end="69:15">==</operator> <name pos:start="69:17" pos:end="69:33">NBD_REP_ERR_UNSUP</name></expr>)</condition> <block pos:start="69:36" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:17">

        <return pos:start="71:9" pos:end="71:17">return <expr pos:start="71:16" pos:end="71:16"><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:50">(<expr pos:start="75:9" pos:end="75:49"><call pos:start="75:9" pos:end="75:45"><name pos:start="75:9" pos:end="75:28">nbd_handle_reply_err</name><argument_list pos:start="75:29" pos:end="75:45">(<argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">opt</name></expr></argument>, <argument pos:start="75:35" pos:end="75:38"><expr pos:start="75:35" pos:end="75:38"><name pos:start="75:35" pos:end="75:38">type</name></expr></argument>, <argument pos:start="75:41" pos:end="75:44"><expr pos:start="75:41" pos:end="75:44"><name pos:start="75:41" pos:end="75:44">errp</name></expr></argument>)</argument_list></call> <operator pos:start="75:47" pos:end="75:47">&lt;</operator> <literal type="number" pos:start="75:49" pos:end="75:49">0</literal></expr>)</condition> <block pos:start="75:52" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:18">

        <return pos:start="77:9" pos:end="77:18">return <expr pos:start="77:16" pos:end="77:17"><operator pos:start="77:16" pos:end="77:16">-</operator><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:57">(<expr pos:start="83:9" pos:end="83:56"><call pos:start="83:9" pos:end="83:41"><name pos:start="83:9" pos:end="83:17">read_sync</name><argument_list pos:start="83:18" pos:end="83:41">(<argument pos:start="83:19" pos:end="83:21"><expr pos:start="83:19" pos:end="83:21"><name pos:start="83:19" pos:end="83:21">ioc</name></expr></argument>, <argument pos:start="83:24" pos:end="83:27"><expr pos:start="83:24" pos:end="83:27"><operator pos:start="83:24" pos:end="83:24">&amp;</operator><name pos:start="83:25" pos:end="83:27">len</name></expr></argument>, <argument pos:start="83:30" pos:end="83:40"><expr pos:start="83:30" pos:end="83:40"><sizeof pos:start="83:30" pos:end="83:40">sizeof<argument_list pos:start="83:36" pos:end="83:40">(<argument pos:start="83:37" pos:end="83:39"><expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:39">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="83:43" pos:end="83:44">!=</operator> <sizeof pos:start="83:46" pos:end="83:56">sizeof<argument_list pos:start="83:52" pos:end="83:56">(<argument pos:start="83:53" pos:end="83:55"><expr pos:start="83:53" pos:end="83:55"><name pos:start="83:53" pos:end="83:55">len</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="83:59" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:18">

        <expr_stmt pos:start="85:9" pos:end="85:57"><expr pos:start="85:9" pos:end="85:56"><call pos:start="85:9" pos:end="85:56"><name pos:start="85:9" pos:end="85:18">error_setg</name><argument_list pos:start="85:19" pos:end="85:56">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">errp</name></expr></argument>, <argument pos:start="85:26" pos:end="85:55"><expr pos:start="85:26" pos:end="85:55"><literal type="string" pos:start="85:26" pos:end="85:55">"failed to read option length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:27"><expr pos:start="91:5" pos:end="91:26"><name pos:start="91:5" pos:end="91:7">len</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:26"><name pos:start="91:11" pos:end="91:21">be32_to_cpu</name><argument_list pos:start="91:22" pos:end="91:26">(<argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="159:5"><if pos:start="95:5" pos:end="105:5">if <condition pos:start="95:8" pos:end="95:28">(<expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:12">type</name> <operator pos:start="95:14" pos:end="95:15">==</operator> <name pos:start="95:17" pos:end="95:27">NBD_REP_ACK</name></expr>)</condition> <block pos:start="95:30" pos:end="105:5">{<block_content pos:start="97:9" pos:end="103:9">

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:21">(<expr pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:15">len</name> <operator pos:start="97:17" pos:end="97:18">!=</operator> <literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>)</condition> <block pos:start="97:23" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:22">

            <expr_stmt pos:start="99:13" pos:end="99:63"><expr pos:start="99:13" pos:end="99:62"><call pos:start="99:13" pos:end="99:62"><name pos:start="99:13" pos:end="99:22">error_setg</name><argument_list pos:start="99:23" pos:end="99:62">(<argument pos:start="99:24" pos:end="99:27"><expr pos:start="99:24" pos:end="99:27"><name pos:start="99:24" pos:end="99:27">errp</name></expr></argument>, <argument pos:start="99:30" pos:end="99:61"><expr pos:start="99:30" pos:end="99:61"><literal type="string" pos:start="99:30" pos:end="99:61">"length too long for option end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:22">return <expr pos:start="101:20" pos:end="101:21"><operator pos:start="101:20" pos:end="101:20">-</operator><literal type="number" pos:start="101:21" pos:end="101:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="105:7" pos:end="151:5">else if <condition pos:start="105:15" pos:end="105:38">(<expr pos:start="105:16" pos:end="105:37"><name pos:start="105:16" pos:end="105:19">type</name> <operator pos:start="105:21" pos:end="105:22">==</operator> <name pos:start="105:24" pos:end="105:37">NBD_REP_SERVER</name></expr>)</condition> <block pos:start="105:40" pos:end="151:5">{<block_content pos:start="107:9" pos:end="149:32">

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:73">(<expr pos:start="107:13" pos:end="107:72"><call pos:start="107:13" pos:end="107:53"><name pos:start="107:13" pos:end="107:21">read_sync</name><argument_list pos:start="107:22" pos:end="107:53">(<argument pos:start="107:23" pos:end="107:25"><expr pos:start="107:23" pos:end="107:25"><name pos:start="107:23" pos:end="107:25">ioc</name></expr></argument>, <argument pos:start="107:28" pos:end="107:35"><expr pos:start="107:28" pos:end="107:35"><operator pos:start="107:28" pos:end="107:28">&amp;</operator><name pos:start="107:29" pos:end="107:35">namelen</name></expr></argument>, <argument pos:start="107:38" pos:end="107:52"><expr pos:start="107:38" pos:end="107:52"><sizeof pos:start="107:38" pos:end="107:52">sizeof<argument_list pos:start="107:44" pos:end="107:52">(<argument pos:start="107:45" pos:end="107:51"><expr pos:start="107:45" pos:end="107:51"><name pos:start="107:45" pos:end="107:51">namelen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="107:55" pos:end="107:56">!=</operator> <sizeof pos:start="107:58" pos:end="107:72">sizeof<argument_list pos:start="107:64" pos:end="107:72">(<argument pos:start="107:65" pos:end="107:71"><expr pos:start="107:65" pos:end="107:71"><name pos:start="107:65" pos:end="107:71">namelen</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="107:75" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:22">

            <expr_stmt pos:start="109:13" pos:end="109:66"><expr pos:start="109:13" pos:end="109:65"><call pos:start="109:13" pos:end="109:65"><name pos:start="109:13" pos:end="109:22">error_setg</name><argument_list pos:start="109:23" pos:end="109:65">(<argument pos:start="109:24" pos:end="109:27"><expr pos:start="109:24" pos:end="109:27"><name pos:start="109:24" pos:end="109:27">errp</name></expr></argument>, <argument pos:start="109:30" pos:end="109:64"><expr pos:start="109:30" pos:end="109:64"><literal type="string" pos:start="109:30" pos:end="109:64">"failed to read option name length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:22">return <expr pos:start="111:20" pos:end="111:21"><operator pos:start="111:20" pos:end="111:20">-</operator><literal type="number" pos:start="111:21" pos:end="111:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:39"><expr pos:start="115:9" pos:end="115:38"><name pos:start="115:9" pos:end="115:15">namelen</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:38"><name pos:start="115:19" pos:end="115:29">be32_to_cpu</name><argument_list pos:start="115:30" pos:end="115:38">(<argument pos:start="115:31" pos:end="115:37"><expr pos:start="115:31" pos:end="115:37"><name pos:start="115:31" pos:end="115:37">namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="123:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:47">(<expr pos:start="117:13" pos:end="117:46"><name pos:start="117:13" pos:end="117:15">len</name> <operator pos:start="117:17" pos:end="117:18">!=</operator> <operator pos:start="117:20" pos:end="117:20">(</operator><name pos:start="117:21" pos:end="117:27">namelen</name> <operator pos:start="117:29" pos:end="117:29">+</operator> <sizeof pos:start="117:31" pos:end="117:45">sizeof<argument_list pos:start="117:37" pos:end="117:45">(<argument pos:start="117:38" pos:end="117:44"><expr pos:start="117:38" pos:end="117:44"><name pos:start="117:38" pos:end="117:44">namelen</name></expr></argument>)</argument_list></sizeof><operator pos:start="117:46" pos:end="117:46">)</operator></expr>)</condition> <block pos:start="117:49" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:22">

            <expr_stmt pos:start="119:13" pos:end="119:61"><expr pos:start="119:13" pos:end="119:60"><call pos:start="119:13" pos:end="119:60"><name pos:start="119:13" pos:end="119:22">error_setg</name><argument_list pos:start="119:23" pos:end="119:60">(<argument pos:start="119:24" pos:end="119:27"><expr pos:start="119:24" pos:end="119:27"><name pos:start="119:24" pos:end="119:27">errp</name></expr></argument>, <argument pos:start="119:30" pos:end="119:59"><expr pos:start="119:30" pos:end="119:59"><literal type="string" pos:start="119:30" pos:end="119:59">"incorrect option mame length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:22">return <expr pos:start="121:20" pos:end="121:21"><operator pos:start="121:20" pos:end="121:20">-</operator><literal type="number" pos:start="121:21" pos:end="121:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="125:26">(<expr pos:start="125:13" pos:end="125:25"><name pos:start="125:13" pos:end="125:19">namelen</name> <operator pos:start="125:21" pos:end="125:21">&gt;</operator> <literal type="number" pos:start="125:23" pos:end="125:25">255</literal></expr>)</condition> <block pos:start="125:28" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:22">

            <expr_stmt pos:start="127:13" pos:end="127:72"><expr pos:start="127:13" pos:end="127:71"><call pos:start="127:13" pos:end="127:71"><name pos:start="127:13" pos:end="127:22">error_setg</name><argument_list pos:start="127:23" pos:end="127:71">(<argument pos:start="127:24" pos:end="127:27"><expr pos:start="127:24" pos:end="127:27"><name pos:start="127:24" pos:end="127:27">errp</name></expr></argument>, <argument pos:start="127:30" pos:end="127:61"><expr pos:start="127:30" pos:end="127:61"><literal type="string" pos:start="127:30" pos:end="127:61">"export name length too long %d"</literal></expr></argument>, <argument pos:start="127:64" pos:end="127:70"><expr pos:start="127:64" pos:end="127:70"><name pos:start="127:64" pos:end="127:70">namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="129:13" pos:end="129:22">return <expr pos:start="129:20" pos:end="129:21"><operator pos:start="129:20" pos:end="129:20">-</operator><literal type="number" pos:start="129:21" pos:end="129:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:42"><expr pos:start="135:9" pos:end="135:41"><operator pos:start="135:9" pos:end="135:9">*</operator><name pos:start="135:10" pos:end="135:13">name</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <call pos:start="135:17" pos:end="135:41"><name pos:start="135:17" pos:end="135:22">g_new0</name><argument_list pos:start="135:23" pos:end="135:41">(<argument pos:start="135:24" pos:end="135:27"><expr pos:start="135:24" pos:end="135:27"><name pos:start="135:24" pos:end="135:27">char</name></expr></argument>, <argument pos:start="135:30" pos:end="135:40"><expr pos:start="135:30" pos:end="135:40"><name pos:start="135:30" pos:end="135:36">namelen</name> <operator pos:start="135:38" pos:end="135:38">+</operator> <literal type="number" pos:start="135:40" pos:end="135:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="147:9"><if pos:start="137:9" pos:end="147:9">if <condition pos:start="137:12" pos:end="137:54">(<expr pos:start="137:13" pos:end="137:53"><call pos:start="137:13" pos:end="137:42"><name pos:start="137:13" pos:end="137:21">read_sync</name><argument_list pos:start="137:22" pos:end="137:42">(<argument pos:start="137:23" pos:end="137:25"><expr pos:start="137:23" pos:end="137:25"><name pos:start="137:23" pos:end="137:25">ioc</name></expr></argument>, <argument pos:start="137:28" pos:end="137:32"><expr pos:start="137:28" pos:end="137:32"><operator pos:start="137:28" pos:end="137:28">*</operator><name pos:start="137:29" pos:end="137:32">name</name></expr></argument>, <argument pos:start="137:35" pos:end="137:41"><expr pos:start="137:35" pos:end="137:41"><name pos:start="137:35" pos:end="137:41">namelen</name></expr></argument>)</argument_list></call> <operator pos:start="137:44" pos:end="137:45">!=</operator> <name pos:start="137:47" pos:end="137:53">namelen</name></expr>)</condition> <block pos:start="137:56" pos:end="147:9">{<block_content pos:start="139:13" pos:end="145:22">

            <expr_stmt pos:start="139:13" pos:end="139:59"><expr pos:start="139:13" pos:end="139:58"><call pos:start="139:13" pos:end="139:58"><name pos:start="139:13" pos:end="139:22">error_setg</name><argument_list pos:start="139:23" pos:end="139:58">(<argument pos:start="139:24" pos:end="139:27"><expr pos:start="139:24" pos:end="139:27"><name pos:start="139:24" pos:end="139:27">errp</name></expr></argument>, <argument pos:start="139:30" pos:end="139:57"><expr pos:start="139:30" pos:end="139:57"><literal type="string" pos:start="139:30" pos:end="139:57">"failed to read export name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:26"><expr pos:start="141:13" pos:end="141:25"><call pos:start="141:13" pos:end="141:25"><name pos:start="141:13" pos:end="141:18">g_free</name><argument_list pos:start="141:19" pos:end="141:25">(<argument pos:start="141:20" pos:end="141:24"><expr pos:start="141:20" pos:end="141:24"><operator pos:start="141:20" pos:end="141:20">*</operator><name pos:start="141:21" pos:end="141:24">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:25"><expr pos:start="143:13" pos:end="143:24"><operator pos:start="143:13" pos:end="143:13">*</operator><name pos:start="143:14" pos:end="143:17">name</name> <operator pos:start="143:19" pos:end="143:19">=</operator> <name pos:start="143:21" pos:end="143:24">NULL</name></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:22">return <expr pos:start="145:20" pos:end="145:21"><operator pos:start="145:20" pos:end="145:20">-</operator><literal type="number" pos:start="145:21" pos:end="145:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:32"><expr pos:start="149:9" pos:end="149:31"><operator pos:start="149:9" pos:end="149:9">(</operator><operator pos:start="149:10" pos:end="149:10">*</operator><name pos:start="149:11" pos:end="149:14">name</name><operator pos:start="149:15" pos:end="149:15">)</operator><index pos:start="149:16" pos:end="149:24">[<expr pos:start="149:17" pos:end="149:23"><name pos:start="149:17" pos:end="149:23">namelen</name></expr>]</index> <operator pos:start="149:26" pos:end="149:26">=</operator> <literal type="char" pos:start="149:28" pos:end="149:31">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="151:7" pos:end="159:5">else <block pos:start="151:12" pos:end="159:5">{<block_content pos:start="153:9" pos:end="157:18">

        <expr_stmt pos:start="153:9" pos:end="155:41"><expr pos:start="153:9" pos:end="155:40"><call pos:start="153:9" pos:end="155:40"><name pos:start="153:9" pos:end="153:18">error_setg</name><argument_list pos:start="153:19" pos:end="155:40">(<argument pos:start="153:20" pos:end="153:23"><expr pos:start="153:20" pos:end="153:23"><name pos:start="153:20" pos:end="153:23">errp</name></expr></argument>, <argument pos:start="153:26" pos:end="153:63"><expr pos:start="153:26" pos:end="153:63"><literal type="string" pos:start="153:26" pos:end="153:63">"Unexpected reply type %x expected %x"</literal></expr></argument>,

                   <argument pos:start="155:20" pos:end="155:23"><expr pos:start="155:20" pos:end="155:23"><name pos:start="155:20" pos:end="155:23">type</name></expr></argument>, <argument pos:start="155:26" pos:end="155:39"><expr pos:start="155:26" pos:end="155:39"><name pos:start="155:26" pos:end="155:39">NBD_REP_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:18">return <expr pos:start="157:16" pos:end="157:17"><operator pos:start="157:16" pos:end="157:16">-</operator><literal type="number" pos:start="157:17" pos:end="157:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
