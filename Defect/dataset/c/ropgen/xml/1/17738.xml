<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17738.c" pos:tabs="8"><function pos:start="1:1" pos:end="247:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">virtqueue_get_avail_bytes</name><parameter_list pos:start="1:31" pos:end="5:77">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:40">VirtQueue</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">vq</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:68"><decl pos:start="1:47" pos:end="1:68"><type pos:start="1:47" pos:end="1:68"><name pos:start="1:47" pos:end="1:54">unsigned</name> <name pos:start="1:56" pos:end="1:58">int</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:68">in_bytes</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:54"><decl pos:start="3:32" pos:end="3:54"><type pos:start="3:32" pos:end="3:54"><name pos:start="3:32" pos:end="3:39">unsigned</name> <name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">out_bytes</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:52"><decl pos:start="5:32" pos:end="5:52"><type pos:start="5:32" pos:end="5:52"><name pos:start="5:32" pos:end="5:39">unsigned</name></type> <name pos:start="5:41" pos:end="5:52">max_in_bytes</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:76"><decl pos:start="5:55" pos:end="5:76"><type pos:start="5:55" pos:end="5:76"><name pos:start="5:55" pos:end="5:62">unsigned</name></type> <name pos:start="5:64" pos:end="5:76">max_out_bytes</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="247:1">{<block_content pos:start="9:5" pos:end="245:14">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">VirtIODevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">vdev</name> <init pos:start="9:24" pos:end="9:33">= <expr pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:27">vq</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:33">vdev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:20">max</name></decl>, <decl pos:start="11:23" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:23" pos:end="11:25">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:27">total_bufs</name></decl>, <decl pos:start="13:30" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:30" pos:end="13:37">in_total</name></decl>, <decl pos:start="13:40" pos:end="13:48"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:40" pos:end="13:48">out_total</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:27">VRingMemoryRegionCaches</name> <modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:35">caches</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:72"><decl pos:start="17:5" pos:end="17:71"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:21">MemoryRegionCache</name></type> <name pos:start="17:23" pos:end="17:41">indirect_desc_cache</name> <init pos:start="17:43" pos:end="17:71">= <expr pos:start="17:45" pos:end="17:71"><name pos:start="17:45" pos:end="17:71">MEMORY_REGION_CACHE_INVALID</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:15">len</name> <init pos:start="19:17" pos:end="19:19">= <expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:11"><decl pos:start="21:5" pos:end="21:10"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">rc</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="41:5"><if pos:start="25:5" pos:end="41:5">if <condition pos:start="25:8" pos:end="25:34">(<expr pos:start="25:9" pos:end="25:33"><call pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:16">unlikely</name><argument_list pos:start="25:17" pos:end="25:33">(<argument pos:start="25:18" pos:end="25:32"><expr pos:start="25:18" pos:end="25:32"><operator pos:start="25:18" pos:end="25:18">!</operator><name pos:start="25:19" pos:end="25:32"><name pos:start="25:19" pos:end="25:20">vq</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:27">vring</name><operator pos:start="25:28" pos:end="25:28">.</operator><name pos:start="25:29" pos:end="25:32">desc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:36" pos:end="41:5">{<block_content pos:start="27:9" pos:end="39:15">

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:21">(<expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:20">in_bytes</name></expr>)</condition> <block pos:start="27:23" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:26">

            <expr_stmt pos:start="29:13" pos:end="29:26"><expr pos:start="29:13" pos:end="29:25"><operator pos:start="29:13" pos:end="29:13">*</operator><name pos:start="29:14" pos:end="29:21">in_bytes</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:21">out_bytes</name></expr>)</condition> <block pos:start="33:24" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:27">

            <expr_stmt pos:start="35:13" pos:end="35:27"><expr pos:start="35:13" pos:end="35:26"><operator pos:start="35:13" pos:end="35:13">*</operator><name pos:start="35:14" pos:end="35:22">out_bytes</name> <operator pos:start="35:24" pos:end="35:24">=</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><call pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:17">rcu_read_lock</name><argument_list pos:start="45:18" pos:end="45:19">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:7">idx</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <name pos:start="47:11" pos:end="47:28"><name pos:start="47:11" pos:end="47:12">vq</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:28">last_avail_idx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:42"><expr pos:start="49:5" pos:end="49:41"><name pos:start="49:5" pos:end="49:14">total_bufs</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <name pos:start="49:18" pos:end="49:25">in_total</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:37">out_total</name> <operator pos:start="49:39" pos:end="49:39">=</operator> <literal type="number" pos:start="49:41" pos:end="49:41">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:7">max</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <name pos:start="53:11" pos:end="53:23"><name pos:start="53:11" pos:end="53:12">vq</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:19">vring</name><operator pos:start="53:20" pos:end="53:20">.</operator><name pos:start="53:21" pos:end="53:23">num</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:10">caches</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:47"><name pos:start="55:14" pos:end="55:28">atomic_rcu_read</name><argument_list pos:start="55:29" pos:end="55:47">(<argument pos:start="55:30" pos:end="55:46"><expr pos:start="55:30" pos:end="55:46"><operator pos:start="55:30" pos:end="55:30">&amp;</operator><name pos:start="55:31" pos:end="55:46"><name pos:start="55:31" pos:end="55:32">vq</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:39">vring</name><operator pos:start="55:40" pos:end="55:40">.</operator><name pos:start="55:41" pos:end="55:46">caches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:51">(<expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:14">caches</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">desc</name><operator pos:start="57:21" pos:end="57:21">.</operator><name pos:start="57:22" pos:end="57:24">len</name></name> <operator pos:start="57:26" pos:end="57:26">&lt;</operator> <name pos:start="57:28" pos:end="57:30">max</name> <operator pos:start="57:32" pos:end="57:32">*</operator> <sizeof pos:start="57:34" pos:end="57:50">sizeof<argument_list pos:start="57:40" pos:end="57:50">(<argument pos:start="57:41" pos:end="57:49"><expr pos:start="57:41" pos:end="57:49"><name pos:start="57:41" pos:end="57:49">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="57:53" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:17">

        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><call pos:start="59:9" pos:end="59:56"><name pos:start="59:9" pos:end="59:20">virtio_error</name><argument_list pos:start="59:21" pos:end="59:56">(<argument pos:start="59:22" pos:end="59:25"><expr pos:start="59:22" pos:end="59:25"><name pos:start="59:22" pos:end="59:25">vdev</name></expr></argument>, <argument pos:start="59:28" pos:end="59:55"><expr pos:start="59:28" pos:end="59:55"><literal type="string" pos:start="59:28" pos:end="59:55">"Cannot map descriptor ring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <while pos:start="67:5" pos:end="207:5">while <condition pos:start="67:11" pos:end="67:51">(<expr pos:start="67:12" pos:end="67:50"><operator pos:start="67:12" pos:end="67:12">(</operator><name pos:start="67:13" pos:end="67:14">rc</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:45"><name pos:start="67:18" pos:end="67:36">virtqueue_num_heads</name><argument_list pos:start="67:37" pos:end="67:45">(<argument pos:start="67:38" pos:end="67:39"><expr pos:start="67:38" pos:end="67:39"><name pos:start="67:38" pos:end="67:39">vq</name></expr></argument>, <argument pos:start="67:42" pos:end="67:44"><expr pos:start="67:42" pos:end="67:44"><name pos:start="67:42" pos:end="67:44">idx</name></expr></argument>)</argument_list></call><operator pos:start="67:46" pos:end="67:46">)</operator> <operator pos:start="67:48" pos:end="67:48">&gt;</operator> <literal type="number" pos:start="67:50" pos:end="67:50">0</literal></expr>)</condition> <block pos:start="67:53" pos:end="207:5">{<block_content pos:start="69:9" pos:end="205:9">

        <decl_stmt pos:start="69:9" pos:end="69:54"><decl pos:start="69:9" pos:end="69:53"><type pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:25">MemoryRegionCache</name> <modifier pos:start="69:27" pos:end="69:27">*</modifier></type><name pos:start="69:28" pos:end="69:37">desc_cache</name> <init pos:start="69:39" pos:end="69:53">= <expr pos:start="69:41" pos:end="69:53"><operator pos:start="69:41" pos:end="69:41">&amp;</operator><name pos:start="69:42" pos:end="69:53"><name pos:start="69:42" pos:end="69:47">caches</name><operator pos:start="69:48" pos:end="69:49">-&gt;</operator><name pos:start="69:50" pos:end="69:53">desc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:30"><decl pos:start="71:9" pos:end="71:29"><type pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:16">unsigned</name> <name pos:start="71:18" pos:end="71:20">int</name></type> <name pos:start="71:22" pos:end="71:29">num_bufs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:23"><decl pos:start="73:9" pos:end="73:22"><type pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:17">VRingDesc</name></type> <name pos:start="73:19" pos:end="73:22">desc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:23"><decl pos:start="75:9" pos:end="75:22"><type pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:16">unsigned</name> <name pos:start="75:18" pos:end="75:20">int</name></type> <name pos:start="75:22" pos:end="75:22">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:16">num_bufs</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:29">total_bufs</name></expr>;</expr_stmt>



        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:47">(<expr pos:start="83:13" pos:end="83:46"><operator pos:start="83:13" pos:end="83:13">!</operator><call pos:start="83:14" pos:end="83:46"><name pos:start="83:14" pos:end="83:31">virtqueue_get_head</name><argument_list pos:start="83:32" pos:end="83:46">(<argument pos:start="83:33" pos:end="83:34"><expr pos:start="83:33" pos:end="83:34"><name pos:start="83:33" pos:end="83:34">vq</name></expr></argument>, <argument pos:start="83:37" pos:end="83:41"><expr pos:start="83:37" pos:end="83:41"><name pos:start="83:37" pos:end="83:39">idx</name><operator pos:start="83:40" pos:end="83:41">++</operator></expr></argument>, <argument pos:start="83:44" pos:end="83:45"><expr pos:start="83:44" pos:end="83:45"><operator pos:start="83:44" pos:end="83:44">&amp;</operator><name pos:start="83:45" pos:end="83:45">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:49" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:21">

            <goto pos:start="85:13" pos:end="85:21">goto <name pos:start="85:18" pos:end="85:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:52"><expr pos:start="91:9" pos:end="91:51"><call pos:start="91:9" pos:end="91:51"><name pos:start="91:9" pos:end="91:23">vring_desc_read</name><argument_list pos:start="91:24" pos:end="91:51">(<argument pos:start="91:25" pos:end="91:28"><expr pos:start="91:25" pos:end="91:28"><name pos:start="91:25" pos:end="91:28">vdev</name></expr></argument>, <argument pos:start="91:31" pos:end="91:35"><expr pos:start="91:31" pos:end="91:35"><operator pos:start="91:31" pos:end="91:31">&amp;</operator><name pos:start="91:32" pos:end="91:35">desc</name></expr></argument>, <argument pos:start="91:38" pos:end="91:47"><expr pos:start="91:38" pos:end="91:47"><name pos:start="91:38" pos:end="91:47">desc_cache</name></expr></argument>, <argument pos:start="91:50" pos:end="91:50"><expr pos:start="91:50" pos:end="91:50"><name pos:start="91:50" pos:end="91:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="95:9" pos:end="145:9"><if pos:start="95:9" pos:end="145:9">if <condition pos:start="95:12" pos:end="95:47">(<expr pos:start="95:13" pos:end="95:46"><name pos:start="95:13" pos:end="95:22"><name pos:start="95:13" pos:end="95:16">desc</name><operator pos:start="95:17" pos:end="95:17">.</operator><name pos:start="95:18" pos:end="95:22">flags</name></name> <operator pos:start="95:24" pos:end="95:24">&amp;</operator> <name pos:start="95:26" pos:end="95:46">VRING_DESC_F_INDIRECT</name></expr>)</condition> <block pos:start="95:49" pos:end="145:9">{<block_content pos:start="97:13" pos:end="143:56">

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:45">(<expr pos:start="97:17" pos:end="97:44"><name pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:20">desc</name><operator pos:start="97:21" pos:end="97:21">.</operator><name pos:start="97:22" pos:end="97:24">len</name></name> <operator pos:start="97:26" pos:end="97:26">%</operator> <sizeof pos:start="97:28" pos:end="97:44">sizeof<argument_list pos:start="97:34" pos:end="97:44">(<argument pos:start="97:35" pos:end="97:43"><expr pos:start="97:35" pos:end="97:43"><name pos:start="97:35" pos:end="97:43">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="97:47" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:25">

                <expr_stmt pos:start="99:17" pos:end="99:77"><expr pos:start="99:17" pos:end="99:76"><call pos:start="99:17" pos:end="99:76"><name pos:start="99:17" pos:end="99:28">virtio_error</name><argument_list pos:start="99:29" pos:end="99:76">(<argument pos:start="99:30" pos:end="99:33"><expr pos:start="99:30" pos:end="99:33"><name pos:start="99:30" pos:end="99:33">vdev</name></expr></argument>, <argument pos:start="99:36" pos:end="99:75"><expr pos:start="99:36" pos:end="99:75"><literal type="string" pos:start="99:36" pos:end="99:75">"Invalid size for indirect buffer table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="101:17" pos:end="101:25">goto <name pos:start="101:22" pos:end="101:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="107:13" pos:end="107:72">/* If we've got too many, that implies a descriptor loop. */</comment>

            <if_stmt pos:start="109:13" pos:end="115:13"><if pos:start="109:13" pos:end="115:13">if <condition pos:start="109:16" pos:end="109:32">(<expr pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:24">num_bufs</name> <operator pos:start="109:26" pos:end="109:27">&gt;=</operator> <name pos:start="109:29" pos:end="109:31">max</name></expr>)</condition> <block pos:start="109:34" pos:end="115:13">{<block_content pos:start="111:17" pos:end="113:25">

                <expr_stmt pos:start="111:17" pos:end="111:56"><expr pos:start="111:17" pos:end="111:55"><call pos:start="111:17" pos:end="111:55"><name pos:start="111:17" pos:end="111:28">virtio_error</name><argument_list pos:start="111:29" pos:end="111:55">(<argument pos:start="111:30" pos:end="111:33"><expr pos:start="111:30" pos:end="111:33"><name pos:start="111:30" pos:end="111:33">vdev</name></expr></argument>, <argument pos:start="111:36" pos:end="111:54"><expr pos:start="111:36" pos:end="111:54"><literal type="string" pos:start="111:36" pos:end="111:54">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="113:17" pos:end="113:25">goto <name pos:start="113:22" pos:end="113:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="119:13" pos:end="119:57">/* loop over the indirect descriptor table */</comment>

            <expr_stmt pos:start="121:13" pos:end="125:71"><expr pos:start="121:13" pos:end="125:70"><name pos:start="121:13" pos:end="121:15">len</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="125:70"><name pos:start="121:19" pos:end="121:42">address_space_cache_init</name><argument_list pos:start="121:43" pos:end="125:70">(<argument pos:start="121:44" pos:end="121:63"><expr pos:start="121:44" pos:end="121:63"><operator pos:start="121:44" pos:end="121:44">&amp;</operator><name pos:start="121:45" pos:end="121:63">indirect_desc_cache</name></expr></argument>,

                                           <argument pos:start="123:44" pos:end="123:55"><expr pos:start="123:44" pos:end="123:55"><name pos:start="123:44" pos:end="123:55"><name pos:start="123:44" pos:end="123:47">vdev</name><operator pos:start="123:48" pos:end="123:49">-&gt;</operator><name pos:start="123:50" pos:end="123:55">dma_as</name></name></expr></argument>,

                                           <argument pos:start="125:44" pos:end="125:52"><expr pos:start="125:44" pos:end="125:52"><name pos:start="125:44" pos:end="125:52"><name pos:start="125:44" pos:end="125:47">desc</name><operator pos:start="125:48" pos:end="125:48">.</operator><name pos:start="125:49" pos:end="125:52">addr</name></name></expr></argument>, <argument pos:start="125:55" pos:end="125:62"><expr pos:start="125:55" pos:end="125:62"><name pos:start="125:55" pos:end="125:62"><name pos:start="125:55" pos:end="125:58">desc</name><operator pos:start="125:59" pos:end="125:59">.</operator><name pos:start="125:60" pos:end="125:62">len</name></name></expr></argument>, <argument pos:start="125:65" pos:end="125:69"><expr pos:start="125:65" pos:end="125:69"><name pos:start="125:65" pos:end="125:69">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:46"><expr pos:start="127:13" pos:end="127:45"><name pos:start="127:13" pos:end="127:22">desc_cache</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <operator pos:start="127:26" pos:end="127:26">&amp;</operator><name pos:start="127:27" pos:end="127:45">indirect_desc_cache</name></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="135:13"><if pos:start="129:13" pos:end="135:13">if <condition pos:start="129:16" pos:end="129:31">(<expr pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:19">len</name> <operator pos:start="129:21" pos:end="129:21">&lt;</operator> <name pos:start="129:23" pos:end="129:30"><name pos:start="129:23" pos:end="129:26">desc</name><operator pos:start="129:27" pos:end="129:27">.</operator><name pos:start="129:28" pos:end="129:30">len</name></name></expr>)</condition> <block pos:start="129:33" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:25">

                <expr_stmt pos:start="131:17" pos:end="131:65"><expr pos:start="131:17" pos:end="131:64"><call pos:start="131:17" pos:end="131:64"><name pos:start="131:17" pos:end="131:28">virtio_error</name><argument_list pos:start="131:29" pos:end="131:64">(<argument pos:start="131:30" pos:end="131:33"><expr pos:start="131:30" pos:end="131:33"><name pos:start="131:30" pos:end="131:33">vdev</name></expr></argument>, <argument pos:start="131:36" pos:end="131:63"><expr pos:start="131:36" pos:end="131:63"><literal type="string" pos:start="131:36" pos:end="131:63">"Cannot map indirect buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="133:17" pos:end="133:25">goto <name pos:start="133:22" pos:end="133:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="139:13" pos:end="139:47"><expr pos:start="139:13" pos:end="139:46"><name pos:start="139:13" pos:end="139:15">max</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <name pos:start="139:19" pos:end="139:26"><name pos:start="139:19" pos:end="139:22">desc</name><operator pos:start="139:23" pos:end="139:23">.</operator><name pos:start="139:24" pos:end="139:26">len</name></name> <operator pos:start="139:28" pos:end="139:28">/</operator> <sizeof pos:start="139:30" pos:end="139:46">sizeof<argument_list pos:start="139:36" pos:end="139:46">(<argument pos:start="139:37" pos:end="139:45"><expr pos:start="139:37" pos:end="139:45"><name pos:start="139:37" pos:end="139:45">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:29"><expr pos:start="141:13" pos:end="141:28"><name pos:start="141:13" pos:end="141:20">num_bufs</name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:24">i</name> <operator pos:start="141:26" pos:end="141:26">=</operator> <literal type="number" pos:start="141:28" pos:end="141:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:56"><expr pos:start="143:13" pos:end="143:55"><call pos:start="143:13" pos:end="143:55"><name pos:start="143:13" pos:end="143:27">vring_desc_read</name><argument_list pos:start="143:28" pos:end="143:55">(<argument pos:start="143:29" pos:end="143:32"><expr pos:start="143:29" pos:end="143:32"><name pos:start="143:29" pos:end="143:32">vdev</name></expr></argument>, <argument pos:start="143:35" pos:end="143:39"><expr pos:start="143:35" pos:end="143:39"><operator pos:start="143:35" pos:end="143:35">&amp;</operator><name pos:start="143:36" pos:end="143:39">desc</name></expr></argument>, <argument pos:start="143:42" pos:end="143:51"><expr pos:start="143:42" pos:end="143:51"><name pos:start="143:42" pos:end="143:51">desc_cache</name></expr></argument>, <argument pos:start="143:54" pos:end="143:54"><expr pos:start="143:54" pos:end="143:54"><name pos:start="143:54" pos:end="143:54">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <do pos:start="149:9" pos:end="183:49">do <block pos:start="149:12" pos:end="183:9">{<block_content pos:start="153:13" pos:end="181:76">

            <comment type="block" pos:start="151:13" pos:end="151:72">/* If we've got too many, that implies a descriptor loop. */</comment>

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:33">(<expr pos:start="153:17" pos:end="153:32"><operator pos:start="153:17" pos:end="153:18">++</operator><name pos:start="153:19" pos:end="153:26">num_bufs</name> <operator pos:start="153:28" pos:end="153:28">&gt;</operator> <name pos:start="153:30" pos:end="153:32">max</name></expr>)</condition> <block pos:start="153:35" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:25">

                <expr_stmt pos:start="155:17" pos:end="155:56"><expr pos:start="155:17" pos:end="155:55"><call pos:start="155:17" pos:end="155:55"><name pos:start="155:17" pos:end="155:28">virtio_error</name><argument_list pos:start="155:29" pos:end="155:55">(<argument pos:start="155:30" pos:end="155:33"><expr pos:start="155:30" pos:end="155:33"><name pos:start="155:30" pos:end="155:33">vdev</name></expr></argument>, <argument pos:start="155:36" pos:end="155:54"><expr pos:start="155:36" pos:end="155:54"><literal type="string" pos:start="155:36" pos:end="155:54">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="157:17" pos:end="157:25">goto <name pos:start="157:22" pos:end="157:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="163:13" pos:end="171:13"><if pos:start="163:13" pos:end="167:13">if <condition pos:start="163:16" pos:end="163:48">(<expr pos:start="163:17" pos:end="163:47"><name pos:start="163:17" pos:end="163:26"><name pos:start="163:17" pos:end="163:20">desc</name><operator pos:start="163:21" pos:end="163:21">.</operator><name pos:start="163:22" pos:end="163:26">flags</name></name> <operator pos:start="163:28" pos:end="163:28">&amp;</operator> <name pos:start="163:30" pos:end="163:47">VRING_DESC_F_WRITE</name></expr>)</condition> <block pos:start="163:50" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:37">

                <expr_stmt pos:start="165:17" pos:end="165:37"><expr pos:start="165:17" pos:end="165:36"><name pos:start="165:17" pos:end="165:24">in_total</name> <operator pos:start="165:26" pos:end="165:27">+=</operator> <name pos:start="165:29" pos:end="165:36"><name pos:start="165:29" pos:end="165:32">desc</name><operator pos:start="165:33" pos:end="165:33">.</operator><name pos:start="165:34" pos:end="165:36">len</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="171:13">else <block pos:start="167:20" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:38">

                <expr_stmt pos:start="169:17" pos:end="169:38"><expr pos:start="169:17" pos:end="169:37"><name pos:start="169:17" pos:end="169:25">out_total</name> <operator pos:start="169:27" pos:end="169:28">+=</operator> <name pos:start="169:30" pos:end="169:37"><name pos:start="169:30" pos:end="169:33">desc</name><operator pos:start="169:34" pos:end="169:34">.</operator><name pos:start="169:35" pos:end="169:37">len</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="173:13" pos:end="177:13"><if pos:start="173:13" pos:end="177:13">if <condition pos:start="173:16" pos:end="173:71">(<expr pos:start="173:17" pos:end="173:70"><name pos:start="173:17" pos:end="173:24">in_total</name> <operator pos:start="173:26" pos:end="173:27">&gt;=</operator> <name pos:start="173:29" pos:end="173:40">max_in_bytes</name> <operator pos:start="173:42" pos:end="173:43">&amp;&amp;</operator> <name pos:start="173:45" pos:end="173:53">out_total</name> <operator pos:start="173:55" pos:end="173:56">&gt;=</operator> <name pos:start="173:58" pos:end="173:70">max_out_bytes</name></expr>)</condition> <block pos:start="173:73" pos:end="177:13">{<block_content pos:start="175:17" pos:end="175:26">

                <goto pos:start="175:17" pos:end="175:26">goto <name pos:start="175:22" pos:end="175:25">done</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="181:13" pos:end="181:76"><expr pos:start="181:13" pos:end="181:75"><name pos:start="181:13" pos:end="181:14">rc</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <call pos:start="181:18" pos:end="181:75"><name pos:start="181:18" pos:end="181:41">virtqueue_read_next_desc</name><argument_list pos:start="181:42" pos:end="181:75">(<argument pos:start="181:43" pos:end="181:46"><expr pos:start="181:43" pos:end="181:46"><name pos:start="181:43" pos:end="181:46">vdev</name></expr></argument>, <argument pos:start="181:49" pos:end="181:53"><expr pos:start="181:49" pos:end="181:53"><operator pos:start="181:49" pos:end="181:49">&amp;</operator><name pos:start="181:50" pos:end="181:53">desc</name></expr></argument>, <argument pos:start="181:56" pos:end="181:65"><expr pos:start="181:56" pos:end="181:65"><name pos:start="181:56" pos:end="181:65">desc_cache</name></expr></argument>, <argument pos:start="181:68" pos:end="181:70"><expr pos:start="181:68" pos:end="181:70"><name pos:start="181:68" pos:end="181:70">max</name></expr></argument>, <argument pos:start="181:73" pos:end="181:74"><expr pos:start="181:73" pos:end="181:74"><operator pos:start="181:73" pos:end="181:73">&amp;</operator><name pos:start="181:74" pos:end="181:74">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="183:17" pos:end="183:48">(<expr pos:start="183:18" pos:end="183:47"><name pos:start="183:18" pos:end="183:19">rc</name> <operator pos:start="183:21" pos:end="183:22">==</operator> <name pos:start="183:24" pos:end="183:47">VIRTQUEUE_READ_DESC_MORE</name></expr>)</condition>;</do>



        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:44">(<expr pos:start="187:13" pos:end="187:43"><name pos:start="187:13" pos:end="187:14">rc</name> <operator pos:start="187:16" pos:end="187:17">==</operator> <name pos:start="187:19" pos:end="187:43">VIRTQUEUE_READ_DESC_ERROR</name></expr>)</condition> <block pos:start="187:46" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:21">

            <goto pos:start="189:13" pos:end="189:21">goto <name pos:start="189:18" pos:end="189:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="195:9" pos:end="205:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:47">(<expr pos:start="195:13" pos:end="195:46"><name pos:start="195:13" pos:end="195:22">desc_cache</name> <operator pos:start="195:24" pos:end="195:25">==</operator> <operator pos:start="195:27" pos:end="195:27">&amp;</operator><name pos:start="195:28" pos:end="195:46">indirect_desc_cache</name></expr>)</condition> <block pos:start="195:49" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:25">

            <expr_stmt pos:start="197:13" pos:end="197:62"><expr pos:start="197:13" pos:end="197:61"><call pos:start="197:13" pos:end="197:61"><name pos:start="197:13" pos:end="197:39">address_space_cache_destroy</name><argument_list pos:start="197:40" pos:end="197:61">(<argument pos:start="197:41" pos:end="197:60"><expr pos:start="197:41" pos:end="197:60"><operator pos:start="197:41" pos:end="197:41">&amp;</operator><name pos:start="197:42" pos:end="197:60">indirect_desc_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:25"><expr pos:start="199:13" pos:end="199:24"><name pos:start="199:13" pos:end="199:22">total_bufs</name><operator pos:start="199:23" pos:end="199:24">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="201:11" pos:end="205:9">else <block pos:start="201:16" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:34">

            <expr_stmt pos:start="203:13" pos:end="203:34"><expr pos:start="203:13" pos:end="203:33"><name pos:start="203:13" pos:end="203:22">total_bufs</name> <operator pos:start="203:24" pos:end="203:24">=</operator> <name pos:start="203:26" pos:end="203:33">num_bufs</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="211:5" pos:end="215:5"><if pos:start="211:5" pos:end="215:5">if <condition pos:start="211:8" pos:end="211:15">(<expr pos:start="211:9" pos:end="211:14"><name pos:start="211:9" pos:end="211:10">rc</name> <operator pos:start="211:12" pos:end="211:12">&lt;</operator> <literal type="number" pos:start="211:14" pos:end="211:14">0</literal></expr>)</condition> <block pos:start="211:17" pos:end="215:5">{<block_content pos:start="213:9" pos:end="213:17">

        <goto pos:start="213:9" pos:end="213:17">goto <name pos:start="213:14" pos:end="213:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="219:1" pos:end="219:5"><name pos:start="219:1" pos:end="219:4">done</name>:</label>

    <expr_stmt pos:start="221:5" pos:end="221:54"><expr pos:start="221:5" pos:end="221:53"><call pos:start="221:5" pos:end="221:53"><name pos:start="221:5" pos:end="221:31">address_space_cache_destroy</name><argument_list pos:start="221:32" pos:end="221:53">(<argument pos:start="221:33" pos:end="221:52"><expr pos:start="221:33" pos:end="221:52"><operator pos:start="221:33" pos:end="221:33">&amp;</operator><name pos:start="221:34" pos:end="221:52">indirect_desc_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="223:5" pos:end="227:5"><if pos:start="223:5" pos:end="227:5">if <condition pos:start="223:8" pos:end="223:17">(<expr pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:16">in_bytes</name></expr>)</condition> <block pos:start="223:19" pos:end="227:5">{<block_content pos:start="225:9" pos:end="225:29">

        <expr_stmt pos:start="225:9" pos:end="225:29"><expr pos:start="225:9" pos:end="225:28"><operator pos:start="225:9" pos:end="225:9">*</operator><name pos:start="225:10" pos:end="225:17">in_bytes</name> <operator pos:start="225:19" pos:end="225:19">=</operator> <name pos:start="225:21" pos:end="225:28">in_total</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="229:5" pos:end="233:5"><if pos:start="229:5" pos:end="233:5">if <condition pos:start="229:8" pos:end="229:18">(<expr pos:start="229:9" pos:end="229:17"><name pos:start="229:9" pos:end="229:17">out_bytes</name></expr>)</condition> <block pos:start="229:20" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:31">

        <expr_stmt pos:start="231:9" pos:end="231:31"><expr pos:start="231:9" pos:end="231:30"><operator pos:start="231:9" pos:end="231:9">*</operator><name pos:start="231:10" pos:end="231:18">out_bytes</name> <operator pos:start="231:20" pos:end="231:20">=</operator> <name pos:start="231:22" pos:end="231:30">out_total</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:22"><expr pos:start="235:5" pos:end="235:21"><call pos:start="235:5" pos:end="235:21"><name pos:start="235:5" pos:end="235:19">rcu_read_unlock</name><argument_list pos:start="235:20" pos:end="235:21">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="237:5" pos:end="237:11">return;</return>



<label pos:start="241:1" pos:end="241:4"><name pos:start="241:1" pos:end="241:3">err</name>:</label>

    <expr_stmt pos:start="243:5" pos:end="243:29"><expr pos:start="243:5" pos:end="243:28"><name pos:start="243:5" pos:end="243:12">in_total</name> <operator pos:start="243:14" pos:end="243:14">=</operator> <name pos:start="243:16" pos:end="243:24">out_total</name> <operator pos:start="243:26" pos:end="243:26">=</operator> <literal type="number" pos:start="243:28" pos:end="243:28">0</literal></expr>;</expr_stmt>

    <goto pos:start="245:5" pos:end="245:14">goto <name pos:start="245:10" pos:end="245:13">done</name>;</goto>

</block_content>}</block></function>
</unit>
