<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2319.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">ff_put_pixels_clamped_mmx</name><parameter_list pos:start="1:31" pos:end="3:45">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:44">DCTELEM</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">block</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:68">pixels</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:44"><decl pos:start="3:32" pos:end="3:44"><type pos:start="3:32" pos:end="3:44"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:44">line_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="111:1">{<block_content pos:start="7:5" pos:end="109:20">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">DCTELEM</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">pix</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:25">/* read the pixels */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:5">p</name>   <operator pos:start="15:9" pos:end="15:9">=</operator> <name pos:start="15:11" pos:end="15:15">block</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:7">pix</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:16">pixels</name></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:23">/* unrolled loop */</comment>

    <asm pos:start="21:5" pos:end="59:20">__asm__ <specifier pos:start="21:13" pos:end="21:20">volatile</specifier> (

        "movq        %3, %%mm0          \n\t"

        "movq       8%3, %%mm1          \n\t"

        "movq      16%3, %%mm2          \n\t"

        "movq      24%3, %%mm3          \n\t"

        "movq      32%3, %%mm4          \n\t"

        "movq      40%3, %%mm5          \n\t"

        "movq      48%3, %%mm6          \n\t"

        "movq      56%3, %%mm7          \n\t"

        "packuswb %%mm1, %%mm0          \n\t"

        "packuswb %%mm3, %%mm2          \n\t"

        "packuswb %%mm5, %%mm4          \n\t"

        "packuswb %%mm7, %%mm6          \n\t"

        "movq     %%mm0, (%0)           \n\t"

        "movq     %%mm2, (%0, %1)       \n\t"

        "movq     %%mm4, (%0, %1, 2)    \n\t"

        "movq     %%mm6, (%0, %2)       \n\t"

        :: "r"(pix), "r"((x86_reg)line_size), "r"((x86_reg)line_size * 3),

           "m"(*p)

        : "memory");</asm>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:7">pix</name> <operator pos:start="61:9" pos:end="61:10">+=</operator> <name pos:start="61:12" pos:end="61:20">line_size</name> <operator pos:start="61:22" pos:end="61:22">*</operator> <literal type="number" pos:start="61:24" pos:end="61:24">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:14"><expr pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:5">p</name>   <operator pos:start="63:9" pos:end="63:10">+=</operator> <literal type="number" pos:start="63:12" pos:end="63:13">32</literal></expr>;</expr_stmt>



    <comment type="line" pos:start="67:5" pos:end="67:55">// if here would be an exact copy of the code above</comment>

    <comment type="line" pos:start="69:5" pos:end="69:53">// compiler would generate some very strange code</comment>

    <comment type="line" pos:start="71:5" pos:end="71:21">// thus using "r"</comment>

    <asm pos:start="73:5" pos:end="109:20">__asm__ <specifier pos:start="73:13" pos:end="73:20">volatile</specifier> (

        "movq       (%3), %%mm0         \n\t"

        "movq      8(%3), %%mm1         \n\t"

        "movq     16(%3), %%mm2         \n\t"

        "movq     24(%3), %%mm3         \n\t"

        "movq     32(%3), %%mm4         \n\t"

        "movq     40(%3), %%mm5         \n\t"

        "movq     48(%3), %%mm6         \n\t"

        "movq     56(%3), %%mm7         \n\t"

        "packuswb  %%mm1, %%mm0         \n\t"

        "packuswb  %%mm3, %%mm2         \n\t"

        "packuswb  %%mm5, %%mm4         \n\t"

        "packuswb  %%mm7, %%mm6         \n\t"

        "movq      %%mm0, (%0)          \n\t"

        "movq      %%mm2, (%0, %1)      \n\t"

        "movq      %%mm4, (%0, %1, 2)   \n\t"

        "movq      %%mm6, (%0, %2)      \n\t"

        :: "r"(pix), "r"((x86_reg)line_size), "r"((x86_reg)line_size * 3), "r"(p)

        : "memory");</asm>

</block_content>}</block></function>
</unit>
