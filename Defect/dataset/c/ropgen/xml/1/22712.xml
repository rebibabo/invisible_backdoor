<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22712.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:37">realloc_refcount_block</name><parameter_list pos:start="1:38" pos:end="3:54">(<parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:54">BlockDriverState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">bs</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:78">reftable_index</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:53"><decl pos:start="3:39" pos:end="3:53"><type pos:start="3:39" pos:end="3:53"><name pos:start="3:39" pos:end="3:46">uint64_t</name></type> <name pos:start="3:48" pos:end="3:53">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="141:1">{<block_content pos:start="7:5" pos:end="139:22">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:22">new_offset</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:24">refcount_block</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:37">/* allocate new refcount block */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:59"><expr pos:start="19:5" pos:end="19:58"><name pos:start="19:5" pos:end="19:14">new_offset</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <call pos:start="19:18" pos:end="19:58"><name pos:start="19:18" pos:end="19:37">qcow2_alloc_clusters</name><argument_list pos:start="19:38" pos:end="19:58">(<argument pos:start="19:39" pos:end="19:40"><expr pos:start="19:39" pos:end="19:40"><name pos:start="19:39" pos:end="19:40">bs</name></expr></argument>, <argument pos:start="19:43" pos:end="19:57"><expr pos:start="19:43" pos:end="19:57"><name pos:start="19:43" pos:end="19:57"><name pos:start="19:43" pos:end="19:43">s</name><operator pos:start="19:44" pos:end="19:45">-&gt;</operator><name pos:start="19:46" pos:end="19:57">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:23">(<expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:18">new_offset</name> <operator pos:start="21:20" pos:end="21:20">&lt;</operator> <literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr>)</condition> <block pos:start="21:25" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:18">

        <expr_stmt pos:start="23:9" pos:end="25:39"><expr pos:start="23:9" pos:end="25:38"><call pos:start="23:9" pos:end="25:38"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="25:38">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:62"><expr pos:start="23:25" pos:end="23:62"><literal type="string" pos:start="23:25" pos:end="23:62">"Could not allocate new cluster: %s\n"</literal></expr></argument>,

                <argument pos:start="25:17" pos:end="25:37"><expr pos:start="25:17" pos:end="25:37"><call pos:start="25:17" pos:end="25:37"><name pos:start="25:17" pos:end="25:24">strerror</name><argument_list pos:start="25:25" pos:end="25:37">(<argument pos:start="25:26" pos:end="25:36"><expr pos:start="25:26" pos:end="25:36"><operator pos:start="25:26" pos:end="25:26">-</operator><name pos:start="25:27" pos:end="25:36">new_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:24">new_offset</name></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:46">/* fetch current refcount block content */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:80"><expr pos:start="37:5" pos:end="37:79"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:79"><name pos:start="37:11" pos:end="37:25">qcow2_cache_get</name><argument_list pos:start="37:26" pos:end="37:79">(<argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><name pos:start="37:27" pos:end="37:28">bs</name></expr></argument>, <argument pos:start="37:31" pos:end="37:53"><expr pos:start="37:31" pos:end="37:53"><name pos:start="37:31" pos:end="37:53"><name pos:start="37:31" pos:end="37:31">s</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:53">refcount_block_cache</name></name></expr></argument>, <argument pos:start="37:56" pos:end="37:61"><expr pos:start="37:56" pos:end="37:61"><name pos:start="37:56" pos:end="37:61">offset</name></expr></argument>, <argument pos:start="37:64" pos:end="37:78"><expr pos:start="37:64" pos:end="37:78"><operator pos:start="37:64" pos:end="37:64">&amp;</operator><name pos:start="37:65" pos:end="37:78">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:80"><expr pos:start="41:9" pos:end="41:79"><call pos:start="41:9" pos:end="41:79"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="41:79">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:62"><expr pos:start="41:25" pos:end="41:62"><literal type="string" pos:start="41:25" pos:end="41:62">"Could not fetch refcount block: %s\n"</literal></expr></argument>, <argument pos:start="41:65" pos:end="41:78"><expr pos:start="41:65" pos:end="41:78"><call pos:start="41:65" pos:end="41:78"><name pos:start="41:65" pos:end="41:72">strerror</name><argument_list pos:start="41:73" pos:end="41:78">(<argument pos:start="41:74" pos:end="41:77"><expr pos:start="41:74" pos:end="41:77"><operator pos:start="41:74" pos:end="41:74">-</operator><name pos:start="41:75" pos:end="41:77">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="51:54">/* new block has not yet been entered into refcount table, therefore it is

     * no refcount block yet (regarding this check) */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:76"><expr pos:start="53:5" pos:end="53:75"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:75"><name pos:start="53:11" pos:end="53:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="53:40" pos:end="53:75">(<argument pos:start="53:41" pos:end="53:42"><expr pos:start="53:41" pos:end="53:42"><name pos:start="53:41" pos:end="53:42">bs</name></expr></argument>, <argument pos:start="53:45" pos:end="53:45"><expr pos:start="53:45" pos:end="53:45"><literal type="number" pos:start="53:45" pos:end="53:45">0</literal></expr></argument>, <argument pos:start="53:48" pos:end="53:57"><expr pos:start="53:48" pos:end="53:57"><name pos:start="53:48" pos:end="53:57">new_offset</name></expr></argument>, <argument pos:start="53:60" pos:end="53:74"><expr pos:start="53:60" pos:end="53:74"><name pos:start="53:60" pos:end="53:74"><name pos:start="53:60" pos:end="53:60">s</name><operator pos:start="53:61" pos:end="53:62">-&gt;</operator><name pos:start="53:63" pos:end="53:74">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="69:5"><if pos:start="55:5" pos:end="69:5">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>)</condition> <block pos:start="55:18" pos:end="69:5">{<block_content pos:start="57:9" pos:end="67:18">

        <expr_stmt pos:start="57:9" pos:end="59:54"><expr pos:start="57:9" pos:end="59:53"><call pos:start="57:9" pos:end="59:53"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="59:53">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="59:36"><expr pos:start="57:25" pos:end="59:36"><literal type="string" pos:start="57:25" pos:end="57:75">"Could not write refcount block; metadata overlap "</literal>

                <literal type="string" pos:start="59:17" pos:end="59:36">"check failed: %s\n"</literal></expr></argument>, <argument pos:start="59:39" pos:end="59:52"><expr pos:start="59:39" pos:end="59:52"><call pos:start="59:39" pos:end="59:52"><name pos:start="59:39" pos:end="59:46">strerror</name><argument_list pos:start="59:47" pos:end="59:52">(<argument pos:start="59:48" pos:end="59:51"><expr pos:start="59:48" pos:end="59:51"><operator pos:start="59:48" pos:end="59:48">-</operator><name pos:start="59:49" pos:end="59:51">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="61:9" pos:end="63:25">/* the image will be marked corrupt, so don't even attempt on freeing

         * the cluster */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:23"><expr pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:18">new_offset</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">0</literal></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:28">/* write to new block */</comment>

    <expr_stmt pos:start="75:5" pos:end="77:32"><expr pos:start="75:5" pos:end="77:31"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="77:31"><name pos:start="75:11" pos:end="75:20">bdrv_write</name><argument_list pos:start="75:21" pos:end="77:31">(<argument pos:start="75:22" pos:end="75:29"><expr pos:start="75:22" pos:end="75:29"><name pos:start="75:22" pos:end="75:29"><name pos:start="75:22" pos:end="75:23">bs</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:29">file</name></name></expr></argument>, <argument pos:start="75:32" pos:end="75:60"><expr pos:start="75:32" pos:end="75:60"><name pos:start="75:32" pos:end="75:41">new_offset</name> <operator pos:start="75:43" pos:end="75:43">/</operator> <name pos:start="75:45" pos:end="75:60">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="75:63" pos:end="75:76"><expr pos:start="75:63" pos:end="75:76"><name pos:start="75:63" pos:end="75:76">refcount_block</name></expr></argument>,

            <argument pos:start="77:13" pos:end="77:30"><expr pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:30">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:18">

        <expr_stmt pos:start="81:9" pos:end="81:80"><expr pos:start="81:9" pos:end="81:79"><call pos:start="81:9" pos:end="81:79"><name pos:start="81:9" pos:end="81:15">fprintf</name><argument_list pos:start="81:16" pos:end="81:79">(<argument pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">stderr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:62"><expr pos:start="81:25" pos:end="81:62"><literal type="string" pos:start="81:25" pos:end="81:62">"Could not write refcount block: %s\n"</literal></expr></argument>, <argument pos:start="81:65" pos:end="81:78"><expr pos:start="81:65" pos:end="81:78"><call pos:start="81:65" pos:end="81:78"><name pos:start="81:65" pos:end="81:72">strerror</name><argument_list pos:start="81:73" pos:end="81:78">(<argument pos:start="81:74" pos:end="81:77"><expr pos:start="81:74" pos:end="81:77"><operator pos:start="81:74" pos:end="81:74">-</operator><name pos:start="81:75" pos:end="81:77">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:18">goto <name pos:start="83:14" pos:end="83:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:31">/* update refcount table */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:48"><expr pos:start="91:5" pos:end="91:47"><call pos:start="91:5" pos:end="91:47"><name pos:start="91:5" pos:end="91:10">assert</name><argument_list pos:start="91:11" pos:end="91:47">(<argument pos:start="91:12" pos:end="91:46"><expr pos:start="91:12" pos:end="91:46"><operator pos:start="91:12" pos:end="91:12">!</operator><call pos:start="91:13" pos:end="91:46"><name pos:start="91:13" pos:end="91:31">offset_into_cluster</name><argument_list pos:start="91:32" pos:end="91:46">(<argument pos:start="91:33" pos:end="91:33"><expr pos:start="91:33" pos:end="91:33"><name pos:start="91:33" pos:end="91:33">s</name></expr></argument>, <argument pos:start="91:36" pos:end="91:45"><expr pos:start="91:36" pos:end="91:45"><name pos:start="91:36" pos:end="91:45">new_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:51"><expr pos:start="93:5" pos:end="93:50"><name pos:start="93:5" pos:end="93:37"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:21">refcount_table</name><index pos:start="93:22" pos:end="93:37">[<expr pos:start="93:23" pos:end="93:36"><name pos:start="93:23" pos:end="93:36">reftable_index</name></expr>]</index></name> <operator pos:start="93:39" pos:end="93:39">=</operator> <name pos:start="93:41" pos:end="93:50">new_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:51"><expr pos:start="95:5" pos:end="95:50"><name pos:start="95:5" pos:end="95:7">ret</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:50"><name pos:start="95:11" pos:end="95:30">write_reftable_entry</name><argument_list pos:start="95:31" pos:end="95:50">(<argument pos:start="95:32" pos:end="95:33"><expr pos:start="95:32" pos:end="95:33"><name pos:start="95:32" pos:end="95:33">bs</name></expr></argument>, <argument pos:start="95:36" pos:end="95:49"><expr pos:start="95:36" pos:end="95:49"><name pos:start="95:36" pos:end="95:49">reftable_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">&lt;</operator> <literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>)</condition> <block pos:start="97:18" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:18">

        <expr_stmt pos:start="99:9" pos:end="101:32"><expr pos:start="99:9" pos:end="101:31"><call pos:start="99:9" pos:end="101:31"><name pos:start="99:9" pos:end="99:15">fprintf</name><argument_list pos:start="99:16" pos:end="101:31">(<argument pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">stderr</name></expr></argument>, <argument pos:start="99:25" pos:end="99:63"><expr pos:start="99:25" pos:end="99:63"><literal type="string" pos:start="99:25" pos:end="99:63">"Could not update refcount table: %s\n"</literal></expr></argument>,

                <argument pos:start="101:17" pos:end="101:30"><expr pos:start="101:17" pos:end="101:30"><call pos:start="101:17" pos:end="101:30"><name pos:start="101:17" pos:end="101:24">strerror</name><argument_list pos:start="101:25" pos:end="101:30">(<argument pos:start="101:26" pos:end="101:29"><expr pos:start="101:26" pos:end="101:29"><operator pos:start="101:26" pos:end="101:26">-</operator><name pos:start="101:27" pos:end="101:29">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="109:1" pos:end="109:5"><name pos:start="109:1" pos:end="109:4">fail</name>:</label>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:32">(<expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:18">new_offset</name> <operator pos:start="111:20" pos:end="111:21">&amp;&amp;</operator> <operator pos:start="111:23" pos:end="111:23">(</operator><name pos:start="111:24" pos:end="111:26">ret</name> <operator pos:start="111:28" pos:end="111:28">&lt;</operator> <literal type="number" pos:start="111:30" pos:end="111:30">0</literal><operator pos:start="111:31" pos:end="111:31">)</operator></expr>)</condition> <block pos:start="111:34" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:38">

        <expr_stmt pos:start="113:9" pos:end="115:38"><expr pos:start="113:9" pos:end="115:37"><call pos:start="113:9" pos:end="115:37"><name pos:start="113:9" pos:end="113:27">qcow2_free_clusters</name><argument_list pos:start="113:28" pos:end="115:37">(<argument pos:start="113:29" pos:end="113:30"><expr pos:start="113:29" pos:end="113:30"><name pos:start="113:29" pos:end="113:30">bs</name></expr></argument>, <argument pos:start="113:33" pos:end="113:42"><expr pos:start="113:33" pos:end="113:42"><name pos:start="113:33" pos:end="113:42">new_offset</name></expr></argument>, <argument pos:start="113:45" pos:end="113:59"><expr pos:start="113:45" pos:end="113:59"><name pos:start="113:45" pos:end="113:59"><name pos:start="113:45" pos:end="113:45">s</name><operator pos:start="113:46" pos:end="113:47">-&gt;</operator><name pos:start="113:48" pos:end="113:59">cluster_size</name></name></expr></argument>,

                <argument pos:start="115:17" pos:end="115:36"><expr pos:start="115:17" pos:end="115:36"><name pos:start="115:17" pos:end="115:36">QCOW2_DISCARD_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="119:5" pos:end="131:5"><if pos:start="119:5" pos:end="131:5">if <condition pos:start="119:8" pos:end="119:23">(<expr pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:22">refcount_block</name></expr>)</condition> <block pos:start="119:25" pos:end="131:5">{<block_content pos:start="121:9" pos:end="129:9">

        <if_stmt pos:start="121:9" pos:end="129:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:20">(<expr pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">&lt;</operator> <literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>)</condition> <block pos:start="121:22" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:74">

            <expr_stmt pos:start="123:13" pos:end="123:74"><expr pos:start="123:13" pos:end="123:73"><call pos:start="123:13" pos:end="123:73"><name pos:start="123:13" pos:end="123:27">qcow2_cache_put</name><argument_list pos:start="123:28" pos:end="123:73">(<argument pos:start="123:29" pos:end="123:30"><expr pos:start="123:29" pos:end="123:30"><name pos:start="123:29" pos:end="123:30">bs</name></expr></argument>, <argument pos:start="123:33" pos:end="123:55"><expr pos:start="123:33" pos:end="123:55"><name pos:start="123:33" pos:end="123:55"><name pos:start="123:33" pos:end="123:33">s</name><operator pos:start="123:34" pos:end="123:35">-&gt;</operator><name pos:start="123:36" pos:end="123:55">refcount_block_cache</name></name></expr></argument>, <argument pos:start="123:58" pos:end="123:72"><expr pos:start="123:58" pos:end="123:72"><operator pos:start="123:58" pos:end="123:58">&amp;</operator><name pos:start="123:59" pos:end="123:72">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="129:9">else <block pos:start="125:16" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:80">

            <expr_stmt pos:start="127:13" pos:end="127:80"><expr pos:start="127:13" pos:end="127:79"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:79"><name pos:start="127:19" pos:end="127:33">qcow2_cache_put</name><argument_list pos:start="127:34" pos:end="127:79">(<argument pos:start="127:35" pos:end="127:36"><expr pos:start="127:35" pos:end="127:36"><name pos:start="127:35" pos:end="127:36">bs</name></expr></argument>, <argument pos:start="127:39" pos:end="127:61"><expr pos:start="127:39" pos:end="127:61"><name pos:start="127:39" pos:end="127:61"><name pos:start="127:39" pos:end="127:39">s</name><operator pos:start="127:40" pos:end="127:41">-&gt;</operator><name pos:start="127:42" pos:end="127:61">refcount_block_cache</name></name></expr></argument>, <argument pos:start="127:64" pos:end="127:78"><expr pos:start="127:64" pos:end="127:78"><operator pos:start="127:64" pos:end="127:64">&amp;</operator><name pos:start="127:65" pos:end="127:78">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="133:5" pos:end="137:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:16">(<expr pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:11">ret</name> <operator pos:start="133:13" pos:end="133:13">&lt;</operator> <literal type="number" pos:start="133:15" pos:end="133:15">0</literal></expr>)</condition> <block pos:start="133:18" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:19">

        <return pos:start="135:9" pos:end="135:19">return <expr pos:start="135:16" pos:end="135:18"><name pos:start="135:16" pos:end="135:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="139:5" pos:end="139:22">return <expr pos:start="139:12" pos:end="139:21"><name pos:start="139:12" pos:end="139:21">new_offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
