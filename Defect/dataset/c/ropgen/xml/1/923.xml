<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/923.c" pos:tabs="8"><function pos:start="1:1" pos:end="217:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name> <name pos:start="1:16" pos:end="1:27">coroutine_fn</name></type> <name pos:start="1:29" pos:end="1:53">iscsi_co_get_block_status</name><parameter_list pos:start="1:54" pos:end="7:74">(<parameter pos:start="1:55" pos:end="1:74"><decl pos:start="1:55" pos:end="1:74"><type pos:start="1:55" pos:end="1:74"><name pos:start="1:55" pos:end="1:70">BlockDriverState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">bs</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:68"><decl pos:start="3:51" pos:end="3:68"><type pos:start="3:51" pos:end="3:68"><name pos:start="3:51" pos:end="3:57">int64_t</name></type> <name pos:start="3:59" pos:end="3:68">sector_num</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:64">nb_sectors</name></decl></parameter>, <parameter pos:start="5:67" pos:end="5:75"><decl pos:start="5:67" pos:end="5:75"><type pos:start="5:67" pos:end="5:75"><name pos:start="5:67" pos:end="5:69">int</name> <modifier pos:start="5:71" pos:end="5:71">*</modifier></type><name pos:start="5:72" pos:end="5:75">pnum</name></decl></parameter>,

                                                  <parameter pos:start="7:51" pos:end="7:73"><decl pos:start="7:51" pos:end="7:73"><type pos:start="7:51" pos:end="7:73"><name pos:start="7:51" pos:end="7:66">BlockDriverState</name> <modifier pos:start="7:68" pos:end="7:68">*</modifier><modifier pos:start="7:69" pos:end="7:69">*</modifier></type><name pos:start="7:70" pos:end="7:73">file</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="217:1">{<block_content pos:start="11:5" pos:end="215:15">

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">IscsiLun</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">iscsilun</name> <init pos:start="11:24" pos:end="11:35">= <expr pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:27">bs</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:30">scsi_get_lba_status</name></name> <modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:36">lbas</name> <init pos:start="13:38" pos:end="13:43">= <expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:37">scsi_lba_status_descriptor</name></name> <modifier pos:start="15:39" pos:end="15:39">*</modifier></type><name pos:start="15:40" pos:end="15:44">lbasd</name> <init pos:start="15:46" pos:end="15:51">= <expr pos:start="15:48" pos:end="15:51"><name pos:start="15:48" pos:end="15:51">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:20">IscsiTask</name></name></type> <name pos:start="17:22" pos:end="17:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:15">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:73">(<expr pos:start="25:9" pos:end="25:72"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:72"><name pos:start="25:10" pos:end="25:38">is_sector_request_lun_aligned</name><argument_list pos:start="25:39" pos:end="25:72">(<argument pos:start="25:40" pos:end="25:49"><expr pos:start="25:40" pos:end="25:49"><name pos:start="25:40" pos:end="25:49">sector_num</name></expr></argument>, <argument pos:start="25:52" pos:end="25:61"><expr pos:start="25:52" pos:end="25:61"><name pos:start="25:52" pos:end="25:61">nb_sectors</name></expr></argument>, <argument pos:start="25:64" pos:end="25:71"><expr pos:start="25:64" pos:end="25:71"><name pos:start="25:64" pos:end="25:71">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:75" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">-</operator><name pos:start="27:16" pos:end="27:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:42">/* default to all sectors allocated */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:25">BDRV_BLOCK_DATA</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:70"><expr pos:start="39:5" pos:end="39:69"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:10">|=</operator> <operator pos:start="39:12" pos:end="39:12">(</operator><name pos:start="39:13" pos:end="39:22">sector_num</name> <operator pos:start="39:24" pos:end="39:25">&lt;&lt;</operator> <name pos:start="39:27" pos:end="39:42">BDRV_SECTOR_BITS</name><operator pos:start="39:43" pos:end="39:43">)</operator> <operator pos:start="39:45" pos:end="39:45">|</operator> <name pos:start="39:47" pos:end="39:69">BDRV_BLOCK_OFFSET_VALID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><operator pos:start="41:5" pos:end="41:5">*</operator><name pos:start="41:6" pos:end="41:9">pnum</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <name pos:start="41:13" pos:end="41:22">nb_sectors</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:57">/* LUN does not support logical block provisioning */</comment>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:25">(<expr pos:start="47:9" pos:end="47:24"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:24"><name pos:start="47:10" pos:end="47:17">iscsilun</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:24">lbpme</name></name></expr>)</condition> <block pos:start="47:27" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:17">

        <goto pos:start="49:9" pos:end="49:17">goto <name pos:start="49:14" pos:end="49:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:7">lba</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:47"><name pos:start="55:11" pos:end="55:25">sector_qemu2lun</name><argument_list pos:start="55:26" pos:end="55:47">(<argument pos:start="55:27" pos:end="55:36"><expr pos:start="55:27" pos:end="55:36"><name pos:start="55:27" pos:end="55:36">sector_num</name></expr></argument>, <argument pos:start="55:39" pos:end="55:46"><expr pos:start="55:39" pos:end="55:46"><name pos:start="55:39" pos:end="55:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><call pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:27">iscsi_co_init_iscsitask</name><argument_list pos:start="59:28" pos:end="59:45">(<argument pos:start="59:29" pos:end="59:36"><expr pos:start="59:29" pos:end="59:36"><name pos:start="59:29" pos:end="59:36">iscsilun</name></expr></argument>, <argument pos:start="59:39" pos:end="59:44"><expr pos:start="59:39" pos:end="59:44"><operator pos:start="59:39" pos:end="59:39">&amp;</operator><name pos:start="59:40" pos:end="59:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:38"><expr pos:start="61:5" pos:end="61:37"><call pos:start="61:5" pos:end="61:37"><name pos:start="61:5" pos:end="61:19">qemu_mutex_lock</name><argument_list pos:start="61:20" pos:end="61:37">(<argument pos:start="61:21" pos:end="61:36"><expr pos:start="61:21" pos:end="61:36"><operator pos:start="61:21" pos:end="61:21">&amp;</operator><name pos:start="61:22" pos:end="61:36"><name pos:start="61:22" pos:end="61:29">iscsilun</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="63:1" pos:end="63:6"><name pos:start="63:1" pos:end="63:5">retry</name>:</label>

    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="69:50">(<expr pos:start="65:9" pos:end="69:49"><call pos:start="65:9" pos:end="69:41"><name pos:start="65:9" pos:end="65:33">iscsi_get_lba_status_task</name><argument_list pos:start="65:34" pos:end="69:41">(<argument pos:start="65:35" pos:end="65:49"><expr pos:start="65:35" pos:end="65:49"><name pos:start="65:35" pos:end="65:49"><name pos:start="65:35" pos:end="65:42">iscsilun</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:49">iscsi</name></name></expr></argument>, <argument pos:start="65:52" pos:end="65:64"><expr pos:start="65:52" pos:end="65:64"><name pos:start="65:52" pos:end="65:64"><name pos:start="65:52" pos:end="65:59">iscsilun</name><operator pos:start="65:60" pos:end="65:61">-&gt;</operator><name pos:start="65:62" pos:end="65:64">lun</name></name></expr></argument>,

                                  <argument pos:start="67:35" pos:end="67:37"><expr pos:start="67:35" pos:end="67:37"><name pos:start="67:35" pos:end="67:37">lba</name></expr></argument>, <argument pos:start="67:40" pos:end="67:45"><expr pos:start="67:40" pos:end="67:45"><literal type="number" pos:start="67:40" pos:end="67:42">8</literal> <operator pos:start="67:42" pos:end="67:42">+</operator> <literal type="number" pos:start="67:44" pos:end="67:45">16</literal></expr></argument>, <argument pos:start="67:48" pos:end="67:66"><expr pos:start="67:48" pos:end="67:66"><name pos:start="67:48" pos:end="67:66">iscsi_co_generic_cb</name></expr></argument>,

                                  <argument pos:start="69:35" pos:end="69:40"><expr pos:start="69:35" pos:end="69:40"><operator pos:start="69:35" pos:end="69:35">&amp;</operator><name pos:start="69:36" pos:end="69:40">iTask</name></expr></argument>)</argument_list></call> <operator pos:start="69:43" pos:end="69:44">==</operator> <name pos:start="69:46" pos:end="69:49">NULL</name></expr>)</condition> <block pos:start="69:52" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:24">

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:24">goto <name pos:start="73:14" pos:end="73:23">out_unlock</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <while pos:start="79:5" pos:end="89:5">while <condition pos:start="79:11" pos:end="79:27">(<expr pos:start="79:12" pos:end="79:26"><operator pos:start="79:12" pos:end="79:12">!</operator><name pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:17">iTask</name><operator pos:start="79:18" pos:end="79:18">.</operator><name pos:start="79:19" pos:end="79:26">complete</name></name></expr>)</condition> <block pos:start="79:29" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:42">

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><call pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:24">iscsi_set_events</name><argument_list pos:start="81:25" pos:end="81:34">(<argument pos:start="81:26" pos:end="81:33"><expr pos:start="81:26" pos:end="81:33"><name pos:start="81:26" pos:end="81:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:44"><expr pos:start="83:9" pos:end="83:43"><call pos:start="83:9" pos:end="83:43"><name pos:start="83:9" pos:end="83:25">qemu_mutex_unlock</name><argument_list pos:start="83:26" pos:end="83:43">(<argument pos:start="83:27" pos:end="83:42"><expr pos:start="83:27" pos:end="83:42"><operator pos:start="83:27" pos:end="83:27">&amp;</operator><name pos:start="83:28" pos:end="83:42"><name pos:start="83:28" pos:end="83:35">iscsilun</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:42">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><call pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:28">qemu_coroutine_yield</name><argument_list pos:start="85:29" pos:end="85:30">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:42"><expr pos:start="87:9" pos:end="87:41"><call pos:start="87:9" pos:end="87:41"><name pos:start="87:9" pos:end="87:23">qemu_mutex_lock</name><argument_list pos:start="87:24" pos:end="87:41">(<argument pos:start="87:25" pos:end="87:40"><expr pos:start="87:25" pos:end="87:40"><operator pos:start="87:25" pos:end="87:25">&amp;</operator><name pos:start="87:26" pos:end="87:40"><name pos:start="87:26" pos:end="87:33">iscsilun</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:40">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="93:5" pos:end="107:5"><if pos:start="93:5" pos:end="107:5">if <condition pos:start="93:8" pos:end="93:23">(<expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:13">iTask</name><operator pos:start="93:14" pos:end="93:14">.</operator><name pos:start="93:15" pos:end="93:22">do_retry</name></name></expr>)</condition> <block pos:start="93:25" pos:end="107:5">{<block_content pos:start="95:9" pos:end="105:19">

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:31">(<expr pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:22"><name pos:start="95:13" pos:end="95:17">iTask</name><operator pos:start="95:18" pos:end="95:18">.</operator><name pos:start="95:19" pos:end="95:22">task</name></name> <operator pos:start="95:24" pos:end="95:25">!=</operator> <name pos:start="95:27" pos:end="95:30">NULL</name></expr>)</condition> <block pos:start="95:33" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:30">

            <expr_stmt pos:start="97:13" pos:end="97:44"><expr pos:start="97:13" pos:end="97:43"><call pos:start="97:13" pos:end="97:43"><name pos:start="97:13" pos:end="97:31">scsi_free_scsi_task</name><argument_list pos:start="97:32" pos:end="97:43">(<argument pos:start="97:33" pos:end="97:42"><expr pos:start="97:33" pos:end="97:42"><name pos:start="97:33" pos:end="97:42"><name pos:start="97:33" pos:end="97:37">iTask</name><operator pos:start="97:38" pos:end="97:38">.</operator><name pos:start="97:39" pos:end="97:42">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:30"><expr pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:17">iTask</name><operator pos:start="99:18" pos:end="99:18">.</operator><name pos:start="99:19" pos:end="99:22">task</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <name pos:start="99:26" pos:end="99:29">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:27"><expr pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:13">iTask</name><operator pos:start="103:14" pos:end="103:14">.</operator><name pos:start="103:15" pos:end="103:22">complete</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <literal type="number" pos:start="103:26" pos:end="103:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:19">goto <name pos:start="105:14" pos:end="105:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="127:5"><if pos:start="111:5" pos:end="127:5">if <condition pos:start="111:8" pos:end="111:41">(<expr pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:13">iTask</name><operator pos:start="111:14" pos:end="111:14">.</operator><name pos:start="111:15" pos:end="111:20">status</name></name> <operator pos:start="111:22" pos:end="111:23">!=</operator> <name pos:start="111:25" pos:end="111:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="111:43" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:24">

        <comment type="block" pos:start="113:9" pos:end="119:41">/* in case the get_lba_status_callout fails (i.e.

         * because the device is busy or the cmd is not

         * supported) we pretend all blocks are allocated

         * for backwards compatibility */</comment>

        <expr_stmt pos:start="121:9" pos:end="123:41"><expr pos:start="121:9" pos:end="123:40"><call pos:start="121:9" pos:end="123:40"><name pos:start="121:9" pos:end="121:20">error_report</name><argument_list pos:start="121:21" pos:end="123:40">(<argument pos:start="121:22" pos:end="121:73"><expr pos:start="121:22" pos:end="121:73"><literal type="string" pos:start="121:22" pos:end="121:59">"iSCSI GET_LBA_STATUS failed at lba %"</literal> <name pos:start="121:61" pos:end="121:66">PRIu64</name> <literal type="string" pos:start="121:68" pos:end="121:73">": %s"</literal></expr></argument>,

                     <argument pos:start="123:22" pos:end="123:24"><expr pos:start="123:22" pos:end="123:24"><name pos:start="123:22" pos:end="123:24">lba</name></expr></argument>, <argument pos:start="123:27" pos:end="123:39"><expr pos:start="123:27" pos:end="123:39"><name pos:start="123:27" pos:end="123:39"><name pos:start="123:27" pos:end="123:31">iTask</name><operator pos:start="123:32" pos:end="123:32">.</operator><name pos:start="123:33" pos:end="123:39">err_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="125:9" pos:end="125:24">goto <name pos:start="125:14" pos:end="125:23">out_unlock</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:46"><expr pos:start="131:5" pos:end="131:45"><name pos:start="131:5" pos:end="131:8">lbas</name> <operator pos:start="131:10" pos:end="131:10">=</operator> <call pos:start="131:12" pos:end="131:45"><name pos:start="131:12" pos:end="131:33">scsi_datain_unmarshall</name><argument_list pos:start="131:34" pos:end="131:45">(<argument pos:start="131:35" pos:end="131:44"><expr pos:start="131:35" pos:end="131:44"><name pos:start="131:35" pos:end="131:44"><name pos:start="131:35" pos:end="131:39">iTask</name><operator pos:start="131:40" pos:end="131:40">.</operator><name pos:start="131:41" pos:end="131:44">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:21">(<expr pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:12">lbas</name> <operator pos:start="133:14" pos:end="133:15">==</operator> <name pos:start="133:17" pos:end="133:20">NULL</name></expr>)</condition> <block pos:start="133:23" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:24">

        <expr_stmt pos:start="135:9" pos:end="135:19"><expr pos:start="135:9" pos:end="135:18"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <operator pos:start="135:15" pos:end="135:15">-</operator><name pos:start="135:16" pos:end="135:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:24">goto <name pos:start="137:14" pos:end="137:23">out_unlock</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:34"><expr pos:start="143:5" pos:end="143:33"><name pos:start="143:5" pos:end="143:9">lbasd</name> <operator pos:start="143:11" pos:end="143:11">=</operator> <operator pos:start="143:13" pos:end="143:13">&amp;</operator><name pos:start="143:14" pos:end="143:33"><name pos:start="143:14" pos:end="143:17">lbas</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:30">descriptors</name><index pos:start="143:31" pos:end="143:33">[<expr pos:start="143:32" pos:end="143:32"><literal type="number" pos:start="143:32" pos:end="143:32">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:60">(<expr pos:start="147:9" pos:end="147:59"><call pos:start="147:9" pos:end="147:45"><name pos:start="147:9" pos:end="147:23">sector_qemu2lun</name><argument_list pos:start="147:24" pos:end="147:45">(<argument pos:start="147:25" pos:end="147:34"><expr pos:start="147:25" pos:end="147:34"><name pos:start="147:25" pos:end="147:34">sector_num</name></expr></argument>, <argument pos:start="147:37" pos:end="147:44"><expr pos:start="147:37" pos:end="147:44"><name pos:start="147:37" pos:end="147:44">iscsilun</name></expr></argument>)</argument_list></call> <operator pos:start="147:47" pos:end="147:48">!=</operator> <name pos:start="147:50" pos:end="147:59"><name pos:start="147:50" pos:end="147:54">lbasd</name><operator pos:start="147:55" pos:end="147:56">-&gt;</operator><name pos:start="147:57" pos:end="147:59">lba</name></name></expr>)</condition> <block pos:start="147:62" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:24">

        <expr_stmt pos:start="149:9" pos:end="149:19"><expr pos:start="149:9" pos:end="149:18"><name pos:start="149:9" pos:end="149:11">ret</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <operator pos:start="149:15" pos:end="149:15">-</operator><name pos:start="149:16" pos:end="149:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="151:9" pos:end="151:24">goto <name pos:start="151:14" pos:end="151:23">out_unlock</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:57"><expr pos:start="157:5" pos:end="157:56"><operator pos:start="157:5" pos:end="157:5">*</operator><name pos:start="157:6" pos:end="157:9">pnum</name> <operator pos:start="157:11" pos:end="157:11">=</operator> <call pos:start="157:13" pos:end="157:56"><name pos:start="157:13" pos:end="157:27">sector_lun2qemu</name><argument_list pos:start="157:28" pos:end="157:56">(<argument pos:start="157:29" pos:end="157:45"><expr pos:start="157:29" pos:end="157:45"><name pos:start="157:29" pos:end="157:45"><name pos:start="157:29" pos:end="157:33">lbasd</name><operator pos:start="157:34" pos:end="157:35">-&gt;</operator><name pos:start="157:36" pos:end="157:45">num_blocks</name></name></expr></argument>, <argument pos:start="157:48" pos:end="157:55"><expr pos:start="157:48" pos:end="157:55"><name pos:start="157:48" pos:end="157:55">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="161:5" pos:end="173:5"><if pos:start="161:5" pos:end="173:5">if <condition pos:start="161:8" pos:end="163:63">(<expr pos:start="161:9" pos:end="163:62"><name pos:start="161:9" pos:end="161:27"><name pos:start="161:9" pos:end="161:13">lbasd</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:27">provisioning</name></name> <operator pos:start="161:29" pos:end="161:30">==</operator> <name pos:start="161:32" pos:end="161:65">SCSI_PROVISIONING_TYPE_DEALLOCATED</name> <operator pos:start="161:67" pos:end="161:68">||</operator>

        <name pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:13">lbasd</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:27">provisioning</name></name> <operator pos:start="163:29" pos:end="163:30">==</operator> <name pos:start="163:32" pos:end="163:62">SCSI_PROVISIONING_TYPE_ANCHORED</name></expr>)</condition> <block pos:start="163:65" pos:end="173:5">{<block_content pos:start="165:9" pos:end="171:9">

        <expr_stmt pos:start="165:9" pos:end="165:32"><expr pos:start="165:9" pos:end="165:31"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:14">&amp;=</operator> <operator pos:start="165:16" pos:end="165:16">~</operator><name pos:start="165:17" pos:end="165:31">BDRV_BLOCK_DATA</name></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:28">(<expr pos:start="167:13" pos:end="167:27"><name pos:start="167:13" pos:end="167:27"><name pos:start="167:13" pos:end="167:20">iscsilun</name><operator pos:start="167:21" pos:end="167:22">-&gt;</operator><name pos:start="167:23" pos:end="167:27">lbprz</name></name></expr>)</condition> <block pos:start="167:30" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:35">

            <expr_stmt pos:start="169:13" pos:end="169:35"><expr pos:start="169:13" pos:end="169:34"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:18">|=</operator> <name pos:start="169:20" pos:end="169:34">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="185:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:30">(<expr pos:start="177:9" pos:end="177:29"><name pos:start="177:9" pos:end="177:11">ret</name> <operator pos:start="177:13" pos:end="177:13">&amp;</operator> <name pos:start="177:15" pos:end="177:29">BDRV_BLOCK_ZERO</name></expr>)</condition> <block pos:start="177:32" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:68">

        <expr_stmt pos:start="179:9" pos:end="179:68"><expr pos:start="179:9" pos:end="179:67"><call pos:start="179:9" pos:end="179:67"><name pos:start="179:9" pos:end="179:38">iscsi_allocmap_set_unallocated</name><argument_list pos:start="179:39" pos:end="179:67">(<argument pos:start="179:40" pos:end="179:47"><expr pos:start="179:40" pos:end="179:47"><name pos:start="179:40" pos:end="179:47">iscsilun</name></expr></argument>, <argument pos:start="179:50" pos:end="179:59"><expr pos:start="179:50" pos:end="179:59"><name pos:start="179:50" pos:end="179:59">sector_num</name></expr></argument>, <argument pos:start="179:62" pos:end="179:66"><expr pos:start="179:62" pos:end="179:66"><operator pos:start="179:62" pos:end="179:62">*</operator><name pos:start="179:63" pos:end="179:66">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="181:7" pos:end="185:5">else <block pos:start="181:12" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:66">

        <expr_stmt pos:start="183:9" pos:end="183:66"><expr pos:start="183:9" pos:end="183:65"><call pos:start="183:9" pos:end="183:65"><name pos:start="183:9" pos:end="183:36">iscsi_allocmap_set_allocated</name><argument_list pos:start="183:37" pos:end="183:65">(<argument pos:start="183:38" pos:end="183:45"><expr pos:start="183:38" pos:end="183:45"><name pos:start="183:38" pos:end="183:45">iscsilun</name></expr></argument>, <argument pos:start="183:48" pos:end="183:57"><expr pos:start="183:48" pos:end="183:57"><name pos:start="183:48" pos:end="183:57">sector_num</name></expr></argument>, <argument pos:start="183:60" pos:end="183:64"><expr pos:start="183:60" pos:end="183:64"><operator pos:start="183:60" pos:end="183:60">*</operator><name pos:start="183:61" pos:end="183:64">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="189:5" pos:end="193:5"><if pos:start="189:5" pos:end="193:5">if <condition pos:start="189:8" pos:end="189:27">(<expr pos:start="189:9" pos:end="189:26"><operator pos:start="189:9" pos:end="189:9">*</operator><name pos:start="189:10" pos:end="189:13">pnum</name> <operator pos:start="189:15" pos:end="189:15">&gt;</operator> <name pos:start="189:17" pos:end="189:26">nb_sectors</name></expr>)</condition> <block pos:start="189:29" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:27">

        <expr_stmt pos:start="191:9" pos:end="191:27"><expr pos:start="191:9" pos:end="191:26"><operator pos:start="191:9" pos:end="191:9">*</operator><name pos:start="191:10" pos:end="191:13">pnum</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <name pos:start="191:17" pos:end="191:26">nb_sectors</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="195:1" pos:end="195:11"><name pos:start="195:1" pos:end="195:10">out_unlock</name>:</label>

    <expr_stmt pos:start="197:5" pos:end="197:40"><expr pos:start="197:5" pos:end="197:39"><call pos:start="197:5" pos:end="197:39"><name pos:start="197:5" pos:end="197:21">qemu_mutex_unlock</name><argument_list pos:start="197:22" pos:end="197:39">(<argument pos:start="197:23" pos:end="197:38"><expr pos:start="197:23" pos:end="197:38"><operator pos:start="197:23" pos:end="197:23">&amp;</operator><name pos:start="197:24" pos:end="197:38"><name pos:start="197:24" pos:end="197:31">iscsilun</name><operator pos:start="197:32" pos:end="197:33">-&gt;</operator><name pos:start="197:34" pos:end="197:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:26"><expr pos:start="199:5" pos:end="199:25"><call pos:start="199:5" pos:end="199:25"><name pos:start="199:5" pos:end="199:10">g_free</name><argument_list pos:start="199:11" pos:end="199:25">(<argument pos:start="199:12" pos:end="199:24"><expr pos:start="199:12" pos:end="199:24"><name pos:start="199:12" pos:end="199:24"><name pos:start="199:12" pos:end="199:16">iTask</name><operator pos:start="199:17" pos:end="199:17">.</operator><name pos:start="199:18" pos:end="199:24">err_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="201:1" pos:end="201:4"><name pos:start="201:1" pos:end="201:3">out</name>:</label>

    <if_stmt pos:start="203:5" pos:end="207:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:27">(<expr pos:start="203:9" pos:end="203:26"><name pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:13">iTask</name><operator pos:start="203:14" pos:end="203:14">.</operator><name pos:start="203:15" pos:end="203:18">task</name></name> <operator pos:start="203:20" pos:end="203:21">!=</operator> <name pos:start="203:23" pos:end="203:26">NULL</name></expr>)</condition> <block pos:start="203:29" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:40">

        <expr_stmt pos:start="205:9" pos:end="205:40"><expr pos:start="205:9" pos:end="205:39"><call pos:start="205:9" pos:end="205:39"><name pos:start="205:9" pos:end="205:27">scsi_free_scsi_task</name><argument_list pos:start="205:28" pos:end="205:39">(<argument pos:start="205:29" pos:end="205:38"><expr pos:start="205:29" pos:end="205:38"><name pos:start="205:29" pos:end="205:38"><name pos:start="205:29" pos:end="205:33">iTask</name><operator pos:start="205:34" pos:end="205:34">.</operator><name pos:start="205:35" pos:end="205:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="209:5" pos:end="213:5"><if pos:start="209:5" pos:end="213:5">if <condition pos:start="209:8" pos:end="209:49">(<expr pos:start="209:9" pos:end="209:48"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">&gt;</operator> <literal type="number" pos:start="209:15" pos:end="209:15">0</literal> <operator pos:start="209:17" pos:end="209:18">&amp;&amp;</operator> <name pos:start="209:20" pos:end="209:22">ret</name> <operator pos:start="209:24" pos:end="209:24">&amp;</operator> <name pos:start="209:26" pos:end="209:48">BDRV_BLOCK_OFFSET_VALID</name></expr>)</condition> <block pos:start="209:51" pos:end="213:5">{<block_content pos:start="211:9" pos:end="211:19">

        <expr_stmt pos:start="211:9" pos:end="211:19"><expr pos:start="211:9" pos:end="211:18"><operator pos:start="211:9" pos:end="211:9">*</operator><name pos:start="211:10" pos:end="211:13">file</name> <operator pos:start="211:15" pos:end="211:15">=</operator> <name pos:start="211:17" pos:end="211:18">bs</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="215:5" pos:end="215:15">return <expr pos:start="215:12" pos:end="215:14"><name pos:start="215:12" pos:end="215:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
