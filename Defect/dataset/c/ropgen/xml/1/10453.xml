<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10453.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">uhci_handle_td</name><parameter_list pos:start="1:26" pos:end="1:87">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:35">UHCIState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">uint32_t</name></type> <name pos:start="1:50" pos:end="1:53">addr</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:62">UHCI_TD</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:66">td</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:86"><decl pos:start="1:69" pos:end="1:86"><type pos:start="1:69" pos:end="1:86"><name pos:start="1:69" pos:end="1:76">uint32_t</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:86">int_mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">UHCIAsync</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">async</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>, <decl pos:start="7:18" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:24">max_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:15">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">USBDevice</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">USBEndpoint</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">ep</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:21">/* Is active ? */</comment>

    <if_stmt pos:start="19:5" pos:end="21:33"><if pos:start="19:5" pos:end="21:33">if <condition pos:start="19:8" pos:end="19:37">(<expr pos:start="19:9" pos:end="19:36"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:18"><name pos:start="19:11" pos:end="19:12">td</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:18">ctrl</name></name> <operator pos:start="19:20" pos:end="19:20">&amp;</operator> <name pos:start="19:22" pos:end="19:35">TD_CTRL_ACTIVE</name><operator pos:start="19:36" pos:end="19:36">)</operator></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:33"><block_content pos:start="21:9" pos:end="21:33">

        <return pos:start="21:9" pos:end="21:33">return <expr pos:start="21:16" pos:end="21:32"><name pos:start="21:16" pos:end="21:32">TD_RESULT_NEXT_QH</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:9">async</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:43"><name pos:start="25:13" pos:end="25:30">uhci_async_find_td</name><argument_list pos:start="25:31" pos:end="25:43">(<argument pos:start="25:32" pos:end="25:32"><expr pos:start="25:32" pos:end="25:32"><name pos:start="25:32" pos:end="25:32">s</name></expr></argument>, <argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><name pos:start="25:35" pos:end="25:38">addr</name></expr></argument>, <argument pos:start="25:41" pos:end="25:42"><expr pos:start="25:41" pos:end="25:42"><name pos:start="25:41" pos:end="25:42">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="45:5"><if pos:start="27:5" pos:end="45:5">if <condition pos:start="27:8" pos:end="27:14">(<expr pos:start="27:9" pos:end="27:13"><name pos:start="27:9" pos:end="27:13">async</name></expr>)</condition> <block pos:start="27:16" pos:end="45:5">{<block_content pos:start="31:9" pos:end="43:18">

        <comment type="block" pos:start="29:9" pos:end="29:31">/* Already submitted */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:13">async</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:20">queue</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:27">valid</name></name> <operator pos:start="31:29" pos:end="31:29">=</operator> <literal type="number" pos:start="31:31" pos:end="31:32">32</literal></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="37:40"><if pos:start="35:9" pos:end="37:40">if <condition pos:start="35:12" pos:end="35:25">(<expr pos:start="35:13" pos:end="35:24"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:24"><name pos:start="35:14" pos:end="35:18">async</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:24">done</name></name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:40"><block_content pos:start="37:13" pos:end="37:40">

            <return pos:start="37:13" pos:end="37:40">return <expr pos:start="37:20" pos:end="37:39"><name pos:start="37:20" pos:end="37:39">TD_RESULT_ASYNC_CONT</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><call pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:25">uhci_async_unlink</name><argument_list pos:start="41:26" pos:end="41:32">(<argument pos:start="41:27" pos:end="41:31"><expr pos:start="41:27" pos:end="41:31"><name pos:start="41:27" pos:end="41:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:29">/* Allocate new packet */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:58"><expr pos:start="51:5" pos:end="51:57"><name pos:start="51:5" pos:end="51:9">async</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <call pos:start="51:13" pos:end="51:57"><name pos:start="51:13" pos:end="51:28">uhci_async_alloc</name><argument_list pos:start="51:29" pos:end="51:57">(<argument pos:start="51:30" pos:end="51:50"><expr pos:start="51:30" pos:end="51:50"><call pos:start="51:30" pos:end="51:50"><name pos:start="51:30" pos:end="51:43">uhci_queue_get</name><argument_list pos:start="51:44" pos:end="51:50">(<argument pos:start="51:45" pos:end="51:45"><expr pos:start="51:45" pos:end="51:45"><name pos:start="51:45" pos:end="51:45">s</name></expr></argument>, <argument pos:start="51:48" pos:end="51:49"><expr pos:start="51:48" pos:end="51:49"><name pos:start="51:48" pos:end="51:49">td</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:53" pos:end="51:56"><expr pos:start="51:53" pos:end="51:56"><name pos:start="51:53" pos:end="51:56">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:33"><if pos:start="53:5" pos:end="55:33">if <condition pos:start="53:8" pos:end="53:15">(<expr pos:start="53:9" pos:end="53:14"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:14">async</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:33"><block_content pos:start="55:9" pos:end="55:33">

        <return pos:start="55:9" pos:end="55:33">return <expr pos:start="55:16" pos:end="55:32"><name pos:start="55:16" pos:end="55:32">TD_RESULT_NEXT_QH</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="63:7">/* valid needs to be large enough to handle 10 frame delay

     * for initial isochronous requests

     */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:9">async</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:16">queue</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:23">valid</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <literal type="number" pos:start="65:27" pos:end="65:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:42"><expr pos:start="67:5" pos:end="67:41"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:9">async</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:15">isoc</name></name>  <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:21">td</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:27">ctrl</name></name> <operator pos:start="67:29" pos:end="67:29">&amp;</operator> <name pos:start="67:31" pos:end="67:41">TD_CTRL_IOS</name></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:46"><expr pos:start="71:5" pos:end="71:45"><name pos:start="71:5" pos:end="71:11">max_len</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">(</operator><operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:25"><name pos:start="71:17" pos:end="71:18">td</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:25">token</name></name> <operator pos:start="71:27" pos:end="71:28">&gt;&gt;</operator> <literal type="number" pos:start="71:30" pos:end="71:31">21</literal><operator pos:start="71:32" pos:end="71:32">)</operator> <operator pos:start="71:34" pos:end="71:34">+</operator> <literal type="number" pos:start="71:36" pos:end="71:36">1</literal><operator pos:start="71:37" pos:end="71:37">)</operator> <operator pos:start="71:39" pos:end="71:39">&amp;</operator> <literal type="number" pos:start="71:41" pos:end="71:45">0x7ff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:7">pid</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <name pos:start="73:11" pos:end="73:19"><name pos:start="73:11" pos:end="73:12">td</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:19">token</name></name> <operator pos:start="73:21" pos:end="73:21">&amp;</operator> <literal type="number" pos:start="73:23" pos:end="73:26">0xff</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:55"><expr pos:start="77:5" pos:end="77:54"><name pos:start="77:5" pos:end="77:7">dev</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:54"><name pos:start="77:11" pos:end="77:26">uhci_find_device</name><argument_list pos:start="77:27" pos:end="77:54">(<argument pos:start="77:28" pos:end="77:28"><expr pos:start="77:28" pos:end="77:28"><name pos:start="77:28" pos:end="77:28">s</name></expr></argument>, <argument pos:start="77:31" pos:end="77:53"><expr pos:start="77:31" pos:end="77:53"><operator pos:start="77:31" pos:end="77:31">(</operator><name pos:start="77:32" pos:end="77:40"><name pos:start="77:32" pos:end="77:33">td</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:40">token</name></name> <operator pos:start="77:42" pos:end="77:43">&gt;&gt;</operator> <literal type="number" pos:start="77:45" pos:end="77:45">8</literal><operator pos:start="77:46" pos:end="77:46">)</operator> <operator pos:start="77:48" pos:end="77:48">&amp;</operator> <literal type="number" pos:start="77:50" pos:end="77:53">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:6">ep</name> <operator pos:start="79:8" pos:end="79:8">=</operator> <call pos:start="79:10" pos:end="79:54"><name pos:start="79:10" pos:end="79:19">usb_ep_get</name><argument_list pos:start="79:20" pos:end="79:54">(<argument pos:start="79:21" pos:end="79:23"><expr pos:start="79:21" pos:end="79:23"><name pos:start="79:21" pos:end="79:23">dev</name></expr></argument>, <argument pos:start="79:26" pos:end="79:28"><expr pos:start="79:26" pos:end="79:28"><name pos:start="79:26" pos:end="79:28">pid</name></expr></argument>, <argument pos:start="79:31" pos:end="79:53"><expr pos:start="79:31" pos:end="79:53"><operator pos:start="79:31" pos:end="79:31">(</operator><name pos:start="79:32" pos:end="79:40"><name pos:start="79:32" pos:end="79:33">td</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:40">token</name></name> <operator pos:start="79:42" pos:end="79:43">&gt;&gt;</operator> <literal type="number" pos:start="79:45" pos:end="79:46">15</literal><operator pos:start="79:47" pos:end="79:47">)</operator> <operator pos:start="79:49" pos:end="79:49">&amp;</operator> <literal type="number" pos:start="79:51" pos:end="79:53">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:46"><expr pos:start="81:5" pos:end="81:45"><call pos:start="81:5" pos:end="81:45"><name pos:start="81:5" pos:end="81:20">usb_packet_setup</name><argument_list pos:start="81:21" pos:end="81:45">(<argument pos:start="81:22" pos:end="81:35"><expr pos:start="81:22" pos:end="81:35"><operator pos:start="81:22" pos:end="81:22">&amp;</operator><name pos:start="81:23" pos:end="81:35"><name pos:start="81:23" pos:end="81:27">async</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:35">packet</name></name></expr></argument>, <argument pos:start="81:38" pos:end="81:40"><expr pos:start="81:38" pos:end="81:40"><name pos:start="81:38" pos:end="81:40">pid</name></expr></argument>, <argument pos:start="81:43" pos:end="81:44"><expr pos:start="81:43" pos:end="81:44"><name pos:start="81:43" pos:end="81:44">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:54"><expr pos:start="83:5" pos:end="83:53"><call pos:start="83:5" pos:end="83:53"><name pos:start="83:5" pos:end="83:19">qemu_sglist_add</name><argument_list pos:start="83:20" pos:end="83:53">(<argument pos:start="83:21" pos:end="83:31"><expr pos:start="83:21" pos:end="83:31"><operator pos:start="83:21" pos:end="83:21">&amp;</operator><name pos:start="83:22" pos:end="83:31"><name pos:start="83:22" pos:end="83:26">async</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:31">sgl</name></name></expr></argument>, <argument pos:start="83:34" pos:end="83:43"><expr pos:start="83:34" pos:end="83:43"><name pos:start="83:34" pos:end="83:43"><name pos:start="83:34" pos:end="83:35">td</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:43">buffer</name></name></expr></argument>, <argument pos:start="83:46" pos:end="83:52"><expr pos:start="83:46" pos:end="83:52"><name pos:start="83:46" pos:end="83:52">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:48"><expr pos:start="85:5" pos:end="85:47"><call pos:start="85:5" pos:end="85:47"><name pos:start="85:5" pos:end="85:18">usb_packet_map</name><argument_list pos:start="85:19" pos:end="85:47">(<argument pos:start="85:20" pos:end="85:33"><expr pos:start="85:20" pos:end="85:33"><operator pos:start="85:20" pos:end="85:20">&amp;</operator><name pos:start="85:21" pos:end="85:33"><name pos:start="85:21" pos:end="85:25">async</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:33">packet</name></name></expr></argument>, <argument pos:start="85:36" pos:end="85:46"><expr pos:start="85:36" pos:end="85:46"><operator pos:start="85:36" pos:end="85:36">&amp;</operator><name pos:start="85:37" pos:end="85:46"><name pos:start="85:37" pos:end="85:41">async</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:46">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="89:5" pos:end="125:5">switch<condition pos:start="89:11" pos:end="89:15">(<expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">pid</name></expr>)</condition> <block pos:start="89:17" pos:end="125:5">{<block_content pos:start="91:5" pos:end="123:36">

    <case pos:start="91:5" pos:end="91:23">case <expr pos:start="91:10" pos:end="91:22"><name pos:start="91:10" pos:end="91:22">USB_TOKEN_OUT</name></expr>:</case>

    <case pos:start="93:5" pos:end="93:25">case <expr pos:start="93:10" pos:end="93:24"><name pos:start="93:10" pos:end="93:24">USB_TOKEN_SETUP</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:53"><expr pos:start="95:9" pos:end="95:52"><name pos:start="95:9" pos:end="95:11">len</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:52"><name pos:start="95:15" pos:end="95:31">usb_handle_packet</name><argument_list pos:start="95:32" pos:end="95:52">(<argument pos:start="95:33" pos:end="95:35"><expr pos:start="95:33" pos:end="95:35"><name pos:start="95:33" pos:end="95:35">dev</name></expr></argument>, <argument pos:start="95:38" pos:end="95:51"><expr pos:start="95:38" pos:end="95:51"><operator pos:start="95:38" pos:end="95:38">&amp;</operator><name pos:start="95:39" pos:end="95:51"><name pos:start="95:39" pos:end="95:43">async</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:51">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="99:26"><if pos:start="97:9" pos:end="99:26">if <condition pos:start="97:12" pos:end="97:21">(<expr pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:15">len</name> <operator pos:start="97:17" pos:end="97:18">&gt;=</operator> <literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:26"><block_content pos:start="99:13" pos:end="99:26">

            <expr_stmt pos:start="99:13" pos:end="99:26"><expr pos:start="99:13" pos:end="99:25"><name pos:start="99:13" pos:end="99:15">len</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <name pos:start="99:19" pos:end="99:25">max_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>



    <case pos:start="105:5" pos:end="105:22">case <expr pos:start="105:10" pos:end="105:21"><name pos:start="105:10" pos:end="105:21">USB_TOKEN_IN</name></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:53"><expr pos:start="107:9" pos:end="107:52"><name pos:start="107:9" pos:end="107:11">len</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="107:52"><name pos:start="107:15" pos:end="107:31">usb_handle_packet</name><argument_list pos:start="107:32" pos:end="107:52">(<argument pos:start="107:33" pos:end="107:35"><expr pos:start="107:33" pos:end="107:35"><name pos:start="107:33" pos:end="107:35">dev</name></expr></argument>, <argument pos:start="107:38" pos:end="107:51"><expr pos:start="107:38" pos:end="107:51"><operator pos:start="107:38" pos:end="107:38">&amp;</operator><name pos:start="107:39" pos:end="107:51"><name pos:start="107:39" pos:end="107:43">async</name><operator pos:start="107:44" pos:end="107:45">-&gt;</operator><name pos:start="107:46" pos:end="107:51">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>



    <default pos:start="113:5" pos:end="113:12">default:</default>

        <comment type="block" pos:start="115:9" pos:end="115:45">/* invalid pid : frame interrupted */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:31"><expr pos:start="117:9" pos:end="117:30"><call pos:start="117:9" pos:end="117:30"><name pos:start="117:9" pos:end="117:23">uhci_async_free</name><argument_list pos:start="117:24" pos:end="117:30">(<argument pos:start="117:25" pos:end="117:29"><expr pos:start="117:25" pos:end="117:29"><name pos:start="117:25" pos:end="117:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:37"><expr pos:start="119:9" pos:end="119:36"><name pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:17">status</name></name> <operator pos:start="119:19" pos:end="119:20">|=</operator> <name pos:start="119:22" pos:end="119:36">UHCI_STS_HCPERR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:27"><expr pos:start="121:9" pos:end="121:26"><call pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:23">uhci_update_irq</name><argument_list pos:start="121:24" pos:end="121:26">(<argument pos:start="121:25" pos:end="121:25"><expr pos:start="121:25" pos:end="121:25"><name pos:start="121:25" pos:end="121:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:36">return <expr pos:start="123:16" pos:end="123:35"><name pos:start="123:16" pos:end="123:35">TD_RESULT_STOP_FRAME</name></expr>;</return>

    </block_content>}</block></switch>

 

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:29">(<expr pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:11">len</name> <operator pos:start="129:13" pos:end="129:14">==</operator> <name pos:start="129:16" pos:end="129:28">USB_RET_ASYNC</name></expr>)</condition> <block pos:start="129:31" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:37">

        <expr_stmt pos:start="131:9" pos:end="131:31"><expr pos:start="131:9" pos:end="131:30"><call pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:23">uhci_async_link</name><argument_list pos:start="131:24" pos:end="131:30">(<argument pos:start="131:25" pos:end="131:29"><expr pos:start="131:25" pos:end="131:29"><name pos:start="131:25" pos:end="131:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:37">return <expr pos:start="133:16" pos:end="133:36"><name pos:start="133:16" pos:end="133:36">TD_RESULT_ASYNC_START</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:31"><expr pos:start="139:5" pos:end="139:30"><name pos:start="139:5" pos:end="139:24"><name pos:start="139:5" pos:end="139:9">async</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:17">packet</name><operator pos:start="139:18" pos:end="139:18">.</operator><name pos:start="139:19" pos:end="139:24">result</name></name> <operator pos:start="139:26" pos:end="139:26">=</operator> <name pos:start="139:28" pos:end="139:30">len</name></expr>;</expr_stmt>



<label pos:start="143:1" pos:end="143:5"><name pos:start="143:1" pos:end="143:4">done</name>:</label>

    <expr_stmt pos:start="145:5" pos:end="145:51"><expr pos:start="145:5" pos:end="145:50"><name pos:start="145:5" pos:end="145:7">len</name> <operator pos:start="145:9" pos:end="145:9">=</operator> <call pos:start="145:11" pos:end="145:50"><name pos:start="145:11" pos:end="145:26">uhci_complete_td</name><argument_list pos:start="145:27" pos:end="145:50">(<argument pos:start="145:28" pos:end="145:28"><expr pos:start="145:28" pos:end="145:28"><name pos:start="145:28" pos:end="145:28">s</name></expr></argument>, <argument pos:start="145:31" pos:end="145:32"><expr pos:start="145:31" pos:end="145:32"><name pos:start="145:31" pos:end="145:32">td</name></expr></argument>, <argument pos:start="145:35" pos:end="145:39"><expr pos:start="145:35" pos:end="145:39"><name pos:start="145:35" pos:end="145:39">async</name></expr></argument>, <argument pos:start="145:42" pos:end="145:49"><expr pos:start="145:42" pos:end="145:49"><name pos:start="145:42" pos:end="145:49">int_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:37"><expr pos:start="147:5" pos:end="147:36"><call pos:start="147:5" pos:end="147:36"><name pos:start="147:5" pos:end="147:20">usb_packet_unmap</name><argument_list pos:start="147:21" pos:end="147:36">(<argument pos:start="147:22" pos:end="147:35"><expr pos:start="147:22" pos:end="147:35"><operator pos:start="147:22" pos:end="147:22">&amp;</operator><name pos:start="147:23" pos:end="147:35"><name pos:start="147:23" pos:end="147:27">async</name><operator pos:start="147:28" pos:end="147:29">-&gt;</operator><name pos:start="147:30" pos:end="147:35">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:27"><expr pos:start="149:5" pos:end="149:26"><call pos:start="149:5" pos:end="149:26"><name pos:start="149:5" pos:end="149:19">uhci_async_free</name><argument_list pos:start="149:20" pos:end="149:26">(<argument pos:start="149:21" pos:end="149:25"><expr pos:start="149:21" pos:end="149:25"><name pos:start="149:21" pos:end="149:25">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="151:5" pos:end="151:15">return <expr pos:start="151:12" pos:end="151:14"><name pos:start="151:12" pos:end="151:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
