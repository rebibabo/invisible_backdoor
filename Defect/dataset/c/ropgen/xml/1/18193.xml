<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18193.c" pos:tabs="8"><function pos:start="1:1" pos:end="108:0"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb15to32</name>)<parameter_list pos:start="1:37" pos:end="1:89">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">dst</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:88"><decl pos:start="1:72" pos:end="1:88"><type pos:start="1:72" pos:end="1:88"><name pos:start="1:72" pos:end="1:79">unsigned</name></type> <name pos:start="1:81" pos:end="1:88">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="108:0">{<block_content pos:start="5:9" pos:end="99:23">

	<decl_stmt pos:start="5:9" pos:end="8:0"><decl pos:start="5:9" pos:end="5:27"><type pos:start="5:9" pos:end="5:24"><specifier pos:start="5:9" pos:end="5:13">const</specifier> <name pos:start="5:15" pos:end="5:22">uint16_t</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">end</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:15">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:15">HAVE_MMX</name></cpp:ifdef>

	<decl_stmt pos:start="9:9" pos:end="12:0"><decl pos:start="9:9" pos:end="9:30"><type pos:start="9:9" pos:end="9:24"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:22">uint16_t</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:30">mm_end</name></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>

	<decl_stmt pos:start="13:9" pos:end="13:36"><decl pos:start="13:9" pos:end="13:35"><type pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:15">uint8_t</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:18">d</name> <init pos:start="13:20" pos:end="13:35">= <expr pos:start="13:22" pos:end="13:35"><operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:29">uint8_t</name> <operator pos:start="13:31" pos:end="13:31">*</operator><operator pos:start="13:32" pos:end="13:32">)</operator><name pos:start="13:33" pos:end="13:35">dst</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:50"><decl pos:start="15:9" pos:end="15:49"><type pos:start="15:9" pos:end="15:24"><specifier pos:start="15:9" pos:end="15:13">const</specifier> <name pos:start="15:15" pos:end="15:22">uint16_t</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:25">s</name> <init pos:start="15:27" pos:end="15:49">= <expr pos:start="15:29" pos:end="15:49"><operator pos:start="15:29" pos:end="15:29">(</operator><specifier pos:start="15:30" pos:end="15:34">const</specifier> <name pos:start="15:36" pos:end="15:43">uint16_t</name> <operator pos:start="15:45" pos:end="15:45">*</operator><operator pos:start="15:46" pos:end="15:46">)</operator><name pos:start="15:47" pos:end="15:49">src</name></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="17:9" pos:end="23:61"><expr pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:11">end</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:15">s</name> <operator pos:start="17:17" pos:end="17:17">+</operator> <name pos:start="17:19" pos:end="17:26">src_size</name><operator pos:start="17:27" pos:end="17:27">/</operator><literal type="number" pos:start="17:28" pos:end="17:28">2</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="19:1" pos:end="19:15">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:15">HAVE_MMX</name></cpp:ifdef>

	<asm pos:start="21:9" pos:end="21:63">__asm __volatile(PREFETCH"	%0"::"m"(*s):"memory");</asm>

	<asm pos:start="23:9" pos:end="23:61">__asm __volatile("pxor	%%mm7,%%mm7\n\t":::"memory");</asm>

	<expr_stmt pos:start="25:9" pos:end="25:25"><expr pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:14">mm_end</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:20">end</name> <operator pos:start="25:22" pos:end="25:22">-</operator> <literal type="number" pos:start="25:24" pos:end="25:24">3</literal></expr>;</expr_stmt>

	<while pos:start="27:9" pos:end="95:27">while<condition pos:start="27:14" pos:end="27:25">(<expr pos:start="27:15" pos:end="27:24"><name pos:start="27:15" pos:end="27:15">s</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <name pos:start="27:19" pos:end="27:24">mm_end</name></expr>)</condition>

	<block pos:start="29:9" pos:end="95:26">{<block_content pos:start="33:17" pos:end="95:26">

	    <asm pos:start="31:13" pos:end="31:29">__asm __volatile(</asm>

		<expr_stmt pos:start="33:17" pos:end="95:25"><expr pos:start="33:17" pos:end="93:24"><name pos:start="33:17" pos:end="33:24">PREFETCH</name><literal type="string" pos:start="33:25" pos:end="33:35">" 32%1\n\t"</literal>

		<literal type="string" pos:start="35:17" pos:end="35:38">"movq	%1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="37:17" pos:end="37:38">"movq	%1, %%mm1\n\t"</literal>

		<literal type="string" pos:start="39:17" pos:end="39:38">"movq	%1, %%mm2\n\t"</literal>

		<literal type="string" pos:start="41:17" pos:end="41:38">"pand	%2, %%mm0\n\t"</literal>

		<literal type="string" pos:start="43:17" pos:end="43:38">"pand	%3, %%mm1\n\t"</literal>

		<literal type="string" pos:start="45:17" pos:end="45:38">"pand	%4, %%mm2\n\t"</literal>

		<literal type="string" pos:start="47:17" pos:end="47:38">"psllq	$3, %%mm0\n\t"</literal>

		<literal type="string" pos:start="49:17" pos:end="49:38">"psrlq	$2, %%mm1\n\t"</literal>

		<literal type="string" pos:start="51:17" pos:end="51:38">"psrlq	$7, %%mm2\n\t"</literal>

		<literal type="string" pos:start="53:17" pos:end="53:41">"movq	%%mm0, %%mm3\n\t"</literal>

		<literal type="string" pos:start="55:17" pos:end="55:41">"movq	%%mm1, %%mm4\n\t"</literal>

		<literal type="string" pos:start="57:17" pos:end="57:41">"movq	%%mm2, %%mm5\n\t"</literal>

		<literal type="string" pos:start="59:17" pos:end="59:44">"punpcklwd %%mm7, %%mm0\n\t"</literal>

		<literal type="string" pos:start="61:17" pos:end="61:44">"punpcklwd %%mm7, %%mm1\n\t"</literal>

		<literal type="string" pos:start="63:17" pos:end="63:44">"punpcklwd %%mm7, %%mm2\n\t"</literal>

		<literal type="string" pos:start="65:17" pos:end="65:44">"punpckhwd %%mm7, %%mm3\n\t"</literal>

		<literal type="string" pos:start="67:17" pos:end="67:44">"punpckhwd %%mm7, %%mm4\n\t"</literal>

		<literal type="string" pos:start="69:17" pos:end="69:44">"punpckhwd %%mm7, %%mm5\n\t"</literal>

		<literal type="string" pos:start="71:17" pos:end="71:38">"psllq	$8, %%mm1\n\t"</literal>

		<literal type="string" pos:start="73:17" pos:end="73:39">"psllq	$16, %%mm2\n\t"</literal>

		<literal type="string" pos:start="75:17" pos:end="75:41">"por	%%mm1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="77:17" pos:end="77:41">"por	%%mm2, %%mm0\n\t"</literal>

		<literal type="string" pos:start="79:17" pos:end="79:38">"psllq	$8, %%mm4\n\t"</literal>

		<literal type="string" pos:start="81:17" pos:end="81:39">"psllq	$16, %%mm5\n\t"</literal>

		<literal type="string" pos:start="83:17" pos:end="83:41">"por	%%mm4, %%mm3\n\t"</literal>

		<literal type="string" pos:start="85:17" pos:end="85:41">"por	%%mm5, %%mm3\n\t"</literal>

		<name pos:start="87:17" pos:end="87:22">MOVNTQ</name><literal type="string" pos:start="87:23" pos:end="87:38">"	%%mm0, %0\n\t"</literal>

		<name pos:start="89:17" pos:end="89:22">MOVNTQ</name><literal type="string" pos:start="89:23" pos:end="89:39">"	%%mm3, 8%0\n\t"</literal>

		<operator pos:start="91:17" pos:end="91:17">:</operator><literal type="string" pos:start="91:18" pos:end="91:21">"=m"</literal><operator pos:start="91:22" pos:end="91:22">(</operator><operator pos:start="91:23" pos:end="91:23">*</operator><name pos:start="91:24" pos:end="91:24">d</name><operator pos:start="91:25" pos:end="91:25">)</operator>

		<operator pos:start="93:17" pos:end="93:17">:</operator><literal type="string" pos:start="93:18" pos:end="93:20">"m"</literal><operator pos:start="93:21" pos:end="93:21">(</operator><operator pos:start="93:22" pos:end="93:22">*</operator><name pos:start="93:23" pos:end="93:23">s</name><operator pos:start="93:24" pos:end="93:24">)</operator></expr><operator pos:start="93:25" pos:end="93:25">,</operator><expr pos:start="93:26" pos:end="93:37"><literal type="string" pos:start="93:26" pos:end="93:28">"m"</literal><operator pos:start="93:29" pos:end="93:29">(</operator><name pos:start="93:30" pos:end="93:36">mask15b</name><operator pos:start="93:37" pos:end="93:37">)</operator></expr><operator pos:start="93:38" pos:end="93:38">,</operator><expr pos:start="93:39" pos:end="93:50"><literal type="string" pos:start="93:39" pos:end="93:41">"m"</literal><operator pos:start="93:42" pos:end="93:42">(</operator><name pos:start="93:43" pos:end="93:49">mask15g</name><operator pos:start="93:50" pos:end="93:50">)</operator></expr><operator pos:start="93:51" pos:end="93:51">,</operator><expr pos:start="93:52" pos:end="95:25"><literal type="string" pos:start="93:52" pos:end="93:54">"m"</literal><operator pos:start="93:55" pos:end="93:55">(</operator><name pos:start="93:56" pos:end="93:62">mask15r</name><operator pos:start="93:63" pos:end="93:63">)</operator>

		<operator pos:start="95:17" pos:end="95:17">:</operator><literal type="string" pos:start="95:18" pos:end="95:25">"memory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="95:27" pos:end="95:27">;</empty_stmt></while>

		<expr_stmt pos:start="97:17" pos:end="97:24"><expr pos:start="97:17" pos:end="97:23"><name pos:start="97:17" pos:end="97:17">d</name> <operator pos:start="97:19" pos:end="97:20">+=</operator> <literal type="number" pos:start="97:22" pos:end="97:23">16</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="99:17" pos:end="99:23"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:17">s</name> <operator pos:start="99:19" pos:end="99:20">+=</operator> <literal type="number" pos:start="99:22" pos:end="99:22">4</literal></expr>;</expr_stmt>

	</block_content>}</block></function>

	<asm pos:start="103:9" pos:end="103:44">__asm __volatile(SFENCE:::"memory");</asm>

	<asm pos:start="105:9" pos:end="105:42">__asm __volatile(EMMS:::"memory");</asm>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

	<while pos:start="109:9" pos:end="153:9">while<condition pos:start="109:14" pos:end="109:22">(<expr pos:start="109:15" pos:end="109:21"><name pos:start="109:15" pos:end="109:15">s</name> <operator pos:start="109:17" pos:end="109:17">&lt;</operator> <name pos:start="109:19" pos:end="109:21">end</name></expr>)</condition>

	<block pos:start="111:9" pos:end="153:9">{<block_content pos:start="123:17" pos:end="152:0">

<cpp:if pos:start="113:1" pos:end="113:5">#<cpp:directive pos:start="113:2" pos:end="113:3">if</cpp:directive> <expr pos:start="113:5" pos:end="113:5"><literal type="number" pos:start="113:5" pos:end="113:5">0</literal></expr></cpp:if> <comment type="line" pos:start="113:7" pos:end="113:33">//slightly slower on athlon</comment>

		int bgr= *s++;

		*((uint32_t*)d)++ = ((bgr&amp;0x1F)&lt;&lt;3) + ((bgr&amp;0x3E0)&lt;&lt;6) + ((bgr&amp;0x7C00)&lt;&lt;9);

<cpp:else pos:start="119:1" pos:end="119:5">#<cpp:directive pos:start="119:2" pos:end="119:5">else</cpp:directive></cpp:else>

<comment type="line" pos:start="121:1" pos:end="121:82">//FIXME this is very likely wrong for bigendian (and the following converters too)</comment>

		<decl_stmt pos:start="123:17" pos:end="123:38"><decl pos:start="123:17" pos:end="123:37"><type pos:start="123:17" pos:end="123:33"><specifier pos:start="123:17" pos:end="123:24">register</specifier> <name pos:start="123:26" pos:end="123:33">uint16_t</name></type> <name pos:start="123:35" pos:end="123:37">bgr</name></decl>;</decl_stmt>

		<expr_stmt pos:start="125:17" pos:end="128:0"><expr pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:19">bgr</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <operator pos:start="125:23" pos:end="125:23">*</operator><name pos:start="125:24" pos:end="125:24">s</name><operator pos:start="125:25" pos:end="125:26">++</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="127:1" pos:end="127:22">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:22">WORDS_BIGENDIAN</name></cpp:ifdef>

		<expr_stmt pos:start="129:17" pos:end="129:25"><expr pos:start="129:17" pos:end="129:24"><operator pos:start="129:17" pos:end="129:17">*</operator><name pos:start="129:18" pos:end="129:18">d</name><operator pos:start="129:19" pos:end="129:20">++</operator> <operator pos:start="129:22" pos:end="129:22">=</operator> <literal type="number" pos:start="129:24" pos:end="129:24">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="131:17" pos:end="131:37"><expr pos:start="131:17" pos:end="131:36"><operator pos:start="131:17" pos:end="131:17">*</operator><name pos:start="131:18" pos:end="131:18">d</name><operator pos:start="131:19" pos:end="131:20">++</operator> <operator pos:start="131:22" pos:end="131:22">=</operator> <operator pos:start="131:24" pos:end="131:24">(</operator><name pos:start="131:25" pos:end="131:27">bgr</name><operator pos:start="131:28" pos:end="131:28">&amp;</operator><literal type="number" pos:start="131:29" pos:end="131:32">0x1F</literal><operator pos:start="131:33" pos:end="131:33">)</operator><operator pos:start="131:34" pos:end="131:35">&lt;&lt;</operator><literal type="number" pos:start="131:36" pos:end="131:36">3</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="133:17" pos:end="133:38"><expr pos:start="133:17" pos:end="133:37"><operator pos:start="133:17" pos:end="133:17">*</operator><name pos:start="133:18" pos:end="133:18">d</name><operator pos:start="133:19" pos:end="133:20">++</operator> <operator pos:start="133:22" pos:end="133:22">=</operator> <operator pos:start="133:24" pos:end="133:24">(</operator><name pos:start="133:25" pos:end="133:27">bgr</name><operator pos:start="133:28" pos:end="133:28">&amp;</operator><literal type="number" pos:start="133:29" pos:end="133:33">0x3E0</literal><operator pos:start="133:34" pos:end="133:34">)</operator><operator pos:start="133:35" pos:end="133:36">&gt;&gt;</operator><literal type="number" pos:start="133:37" pos:end="133:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="135:17" pos:end="138:0"><expr pos:start="135:17" pos:end="135:38"><operator pos:start="135:17" pos:end="135:17">*</operator><name pos:start="135:18" pos:end="135:18">d</name><operator pos:start="135:19" pos:end="135:20">++</operator> <operator pos:start="135:22" pos:end="135:22">=</operator> <operator pos:start="135:24" pos:end="135:24">(</operator><name pos:start="135:25" pos:end="135:27">bgr</name><operator pos:start="135:28" pos:end="135:28">&amp;</operator><literal type="number" pos:start="135:29" pos:end="135:34">0x7C00</literal><operator pos:start="135:35" pos:end="135:35">)</operator><operator pos:start="135:36" pos:end="135:37">&gt;&gt;</operator><literal type="number" pos:start="135:38" pos:end="135:38">7</literal></expr>;</expr_stmt>

<cpp:else pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:5">else</cpp:directive></cpp:else>

		<expr_stmt pos:start="139:17" pos:end="139:37"><expr pos:start="139:17" pos:end="139:36"><operator pos:start="139:17" pos:end="139:17">*</operator><name pos:start="139:18" pos:end="139:18">d</name><operator pos:start="139:19" pos:end="139:20">++</operator> <operator pos:start="139:22" pos:end="139:22">=</operator> <operator pos:start="139:24" pos:end="139:24">(</operator><name pos:start="139:25" pos:end="139:27">bgr</name><operator pos:start="139:28" pos:end="139:28">&amp;</operator><literal type="number" pos:start="139:29" pos:end="139:32">0x1F</literal><operator pos:start="139:33" pos:end="139:33">)</operator><operator pos:start="139:34" pos:end="139:35">&lt;&lt;</operator><literal type="number" pos:start="139:36" pos:end="139:36">3</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="141:17" pos:end="141:38"><expr pos:start="141:17" pos:end="141:37"><operator pos:start="141:17" pos:end="141:17">*</operator><name pos:start="141:18" pos:end="141:18">d</name><operator pos:start="141:19" pos:end="141:20">++</operator> <operator pos:start="141:22" pos:end="141:22">=</operator> <operator pos:start="141:24" pos:end="141:24">(</operator><name pos:start="141:25" pos:end="141:27">bgr</name><operator pos:start="141:28" pos:end="141:28">&amp;</operator><literal type="number" pos:start="141:29" pos:end="141:33">0x3E0</literal><operator pos:start="141:34" pos:end="141:34">)</operator><operator pos:start="141:35" pos:end="141:36">&gt;&gt;</operator><literal type="number" pos:start="141:37" pos:end="141:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="143:17" pos:end="143:39"><expr pos:start="143:17" pos:end="143:38"><operator pos:start="143:17" pos:end="143:17">*</operator><name pos:start="143:18" pos:end="143:18">d</name><operator pos:start="143:19" pos:end="143:20">++</operator> <operator pos:start="143:22" pos:end="143:22">=</operator> <operator pos:start="143:24" pos:end="143:24">(</operator><name pos:start="143:25" pos:end="143:27">bgr</name><operator pos:start="143:28" pos:end="143:28">&amp;</operator><literal type="number" pos:start="143:29" pos:end="143:34">0x7C00</literal><operator pos:start="143:35" pos:end="143:35">)</operator><operator pos:start="143:36" pos:end="143:37">&gt;&gt;</operator><literal type="number" pos:start="143:38" pos:end="143:38">7</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="145:17" pos:end="152:0"><expr pos:start="145:17" pos:end="145:24"><operator pos:start="145:17" pos:end="145:17">*</operator><name pos:start="145:18" pos:end="145:18">d</name><operator pos:start="145:19" pos:end="145:20">++</operator> <operator pos:start="145:22" pos:end="145:22">=</operator> <literal type="number" pos:start="145:24" pos:end="145:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>



<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>

	</block_content>}</block></while>

}
</unit>
