<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26053.c" pos:tabs="8"><function pos:start="1:1" pos:end="381:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">vc1_decode_intra_block</name><parameter_list pos:start="1:34" pos:end="1:112">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:44">VC1Context</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">v</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:66"><decl pos:start="1:50" pos:end="1:66"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:56">DCTELEM</name></type> <name pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:62">block</name><index pos:start="1:63" pos:end="1:66">[<expr pos:start="1:64" pos:end="1:65"><literal type="number" pos:start="1:64" pos:end="1:65">64</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:73"><decl pos:start="1:69" pos:end="1:73"><type pos:start="1:69" pos:end="1:73"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:73">n</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:84"><decl pos:start="1:76" pos:end="1:84"><type pos:start="1:76" pos:end="1:84"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:84">coded</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:96"><decl pos:start="1:87" pos:end="1:96"><type pos:start="1:87" pos:end="1:96"><name pos:start="1:87" pos:end="1:89">int</name></type> <name pos:start="1:91" pos:end="1:96">mquant</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:111"><decl pos:start="1:99" pos:end="1:111"><type pos:start="1:99" pos:end="1:111"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:111">codingset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="381:1">{<block_content pos:start="5:5" pos:end="379:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GetBitContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:32">= <expr pos:start="5:25" pos:end="5:32"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:32"><name pos:start="5:26" pos:end="5:26">v</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:30">.</operator><name pos:start="5:31" pos:end="5:32">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:26">v</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">dc_pred_dir</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="9:26" pos:end="9:66">/* Direction of the DC prediction used */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">run_diff</name></decl>, <decl pos:start="11:19" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:19">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int16_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">dc_val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:19">ac_val</name></decl>, <decl pos:start="15:22" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:29">ac_val2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">dcdiff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:50"><decl pos:start="19:5" pos:end="19:49"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">mb_pos</name> <init pos:start="19:16" pos:end="19:49">= <expr pos:start="19:18" pos:end="19:49"><name pos:start="19:18" pos:end="19:24"><name pos:start="19:18" pos:end="19:18">s</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:24">mb_x</name></name> <operator pos:start="19:26" pos:end="19:26">+</operator> <name pos:start="19:28" pos:end="19:34"><name pos:start="19:28" pos:end="19:28">s</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:34">mb_y</name></name> <operator pos:start="19:36" pos:end="19:36">*</operator> <name pos:start="19:38" pos:end="19:49"><name pos:start="19:38" pos:end="19:38">s</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:49">mb_stride</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:51"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">a_avail</name> <init pos:start="21:17" pos:end="21:28">= <expr pos:start="21:19" pos:end="21:28"><name pos:start="21:19" pos:end="21:28"><name pos:start="21:19" pos:end="21:19">v</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:28">a_avail</name></name></expr></init></decl>, <decl pos:start="21:31" pos:end="21:50"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:31" pos:end="21:37">c_avail</name> <init pos:start="21:39" pos:end="21:50">= <expr pos:start="21:41" pos:end="21:50"><name pos:start="21:41" pos:end="21:50"><name pos:start="21:41" pos:end="21:41">v</name><operator pos:start="21:42" pos:end="21:43">-&gt;</operator><name pos:start="21:44" pos:end="21:50">c_avail</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">use_pred</name> <init pos:start="23:18" pos:end="23:29">= <expr pos:start="23:20" pos:end="23:29"><name pos:start="23:20" pos:end="23:29"><name pos:start="23:20" pos:end="23:20">s</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:29">ac_pred</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">scale</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:10"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:10">q1</name></decl>, <decl pos:start="27:13" pos:end="27:18"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:13" pos:end="27:14">q2</name> <init pos:start="27:16" pos:end="27:18">= <expr pos:start="27:18" pos:end="27:18"><literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:50">/* XXX: Guard against dumb values of mquant */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:62"><expr pos:start="33:5" pos:end="33:61"><name pos:start="33:5" pos:end="33:10">mquant</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <ternary pos:start="33:14" pos:end="33:61"><condition pos:start="33:14" pos:end="33:27"><expr pos:start="33:14" pos:end="33:25"><operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:20">mquant</name> <operator pos:start="33:22" pos:end="33:22">&lt;</operator> <literal type="number" pos:start="33:24" pos:end="33:24">1</literal><operator pos:start="33:25" pos:end="33:25">)</operator></expr> ?</condition><then pos:start="33:29" pos:end="33:29"> <expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">0</literal></expr> </then><else pos:start="33:31" pos:end="33:61">: <expr pos:start="33:33" pos:end="33:61"><operator pos:start="33:33" pos:end="33:33">(</operator> <ternary pos:start="33:35" pos:end="33:59"><condition pos:start="33:35" pos:end="33:47"><expr pos:start="33:35" pos:end="33:45"><operator pos:start="33:35" pos:end="33:35">(</operator><name pos:start="33:36" pos:end="33:41">mquant</name><operator pos:start="33:42" pos:end="33:42">&gt;</operator><literal type="number" pos:start="33:43" pos:end="33:44">31</literal><operator pos:start="33:45" pos:end="33:45">)</operator></expr> ?</condition><then pos:start="33:49" pos:end="33:50"> <expr pos:start="33:49" pos:end="33:50"><literal type="number" pos:start="33:49" pos:end="33:50">31</literal></expr> </then><else pos:start="33:52" pos:end="33:59">: <expr pos:start="33:54" pos:end="33:59"><name pos:start="33:54" pos:end="33:59">mquant</name></expr></else></ternary> <operator pos:start="33:61" pos:end="33:61">)</operator></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:45">/* Set DC scale - y and c use the same */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:48"><expr pos:start="39:5" pos:end="39:47"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:17">y_dc_scale</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:47"><name pos:start="39:21" pos:end="39:21">s</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:39">y_dc_scale_table</name><index pos:start="39:40" pos:end="39:47">[<expr pos:start="39:41" pos:end="39:46"><name pos:start="39:41" pos:end="39:46">mquant</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:17">c_dc_scale</name></name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:47"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:39">c_dc_scale_table</name><index pos:start="41:40" pos:end="41:47">[<expr pos:start="41:41" pos:end="41:46"><name pos:start="41:41" pos:end="41:46">mquant</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:29">/* Get DC differential */</comment>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:14">(<expr pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:9">n</name> <operator pos:start="47:11" pos:end="47:11">&lt;</operator> <literal type="number" pos:start="47:13" pos:end="47:13">4</literal></expr>)</condition> <block pos:start="47:16" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:97">

        <expr_stmt pos:start="49:9" pos:end="49:97"><expr pos:start="49:9" pos:end="49:96"><name pos:start="49:9" pos:end="49:14">dcdiff</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:96"><name pos:start="49:18" pos:end="49:25">get_vlc2</name><argument_list pos:start="49:26" pos:end="49:96">(<argument pos:start="49:27" pos:end="49:32"><expr pos:start="49:27" pos:end="49:32"><operator pos:start="49:27" pos:end="49:27">&amp;</operator><name pos:start="49:28" pos:end="49:32"><name pos:start="49:28" pos:end="49:28">s</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:32">gb</name></name></expr></argument>, <argument pos:start="49:35" pos:end="49:79"><expr pos:start="49:35" pos:end="49:79"><name pos:start="49:35" pos:end="49:73"><name pos:start="49:35" pos:end="49:54">ff_msmp4_dc_luma_vlc</name><index pos:start="49:55" pos:end="49:73">[<expr pos:start="49:56" pos:end="49:72"><name pos:start="49:56" pos:end="49:72"><name pos:start="49:56" pos:end="49:56">s</name><operator pos:start="49:57" pos:end="49:58">-&gt;</operator><name pos:start="49:59" pos:end="49:72">dc_table_index</name></name></expr>]</index></name><operator pos:start="49:74" pos:end="49:74">.</operator><name pos:start="49:75" pos:end="49:79">table</name></expr></argument>, <argument pos:start="49:82" pos:end="49:92"><expr pos:start="49:82" pos:end="49:92"><name pos:start="49:82" pos:end="49:92">DC_VLC_BITS</name></expr></argument>, <argument pos:start="49:95" pos:end="49:95"><expr pos:start="49:95" pos:end="49:95"><literal type="number" pos:start="49:95" pos:end="49:95">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:99">

        <expr_stmt pos:start="53:9" pos:end="53:99"><expr pos:start="53:9" pos:end="53:98"><name pos:start="53:9" pos:end="53:14">dcdiff</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:98"><name pos:start="53:18" pos:end="53:25">get_vlc2</name><argument_list pos:start="53:26" pos:end="53:98">(<argument pos:start="53:27" pos:end="53:32"><expr pos:start="53:27" pos:end="53:32"><operator pos:start="53:27" pos:end="53:27">&amp;</operator><name pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:32">gb</name></name></expr></argument>, <argument pos:start="53:35" pos:end="53:81"><expr pos:start="53:35" pos:end="53:81"><name pos:start="53:35" pos:end="53:75"><name pos:start="53:35" pos:end="53:56">ff_msmp4_dc_chroma_vlc</name><index pos:start="53:57" pos:end="53:75">[<expr pos:start="53:58" pos:end="53:74"><name pos:start="53:58" pos:end="53:74"><name pos:start="53:58" pos:end="53:58">s</name><operator pos:start="53:59" pos:end="53:60">-&gt;</operator><name pos:start="53:61" pos:end="53:74">dc_table_index</name></name></expr>]</index></name><operator pos:start="53:76" pos:end="53:76">.</operator><name pos:start="53:77" pos:end="53:81">table</name></expr></argument>, <argument pos:start="53:84" pos:end="53:94"><expr pos:start="53:84" pos:end="53:94"><name pos:start="53:84" pos:end="53:94">DC_VLC_BITS</name></expr></argument>, <argument pos:start="53:97" pos:end="53:97"><expr pos:start="53:97" pos:end="53:97"><literal type="number" pos:start="53:97" pos:end="53:97">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:19">(<expr pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:14">dcdiff</name> <operator pos:start="57:16" pos:end="57:16">&lt;</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>)</condition><block pos:start="57:20" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:59"><expr pos:start="59:9" pos:end="59:58"><call pos:start="59:9" pos:end="59:58"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:58">(<argument pos:start="59:16" pos:end="59:23"><expr pos:start="59:16" pos:end="59:23"><name pos:start="59:16" pos:end="59:23"><name pos:start="59:16" pos:end="59:16">s</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:23">avctx</name></name></expr></argument>, <argument pos:start="59:26" pos:end="59:37"><expr pos:start="59:26" pos:end="59:37"><name pos:start="59:26" pos:end="59:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:40" pos:end="59:57"><expr pos:start="59:40" pos:end="59:57"><literal type="string" pos:start="59:40" pos:end="59:57">"Illegal DC VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="101:5"><if pos:start="65:5" pos:end="101:5">if <condition pos:start="65:8" pos:end="65:15">(<expr pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:14">dcdiff</name></expr>)</condition>

    <block pos:start="67:5" pos:end="101:5">{<block_content pos:start="69:9" pos:end="99:29">

        <if_stmt pos:start="69:9" pos:end="95:9"><if pos:start="69:9" pos:end="81:9">if <condition pos:start="69:12" pos:end="69:48">(<expr pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:18">dcdiff</name> <operator pos:start="69:20" pos:end="69:21">==</operator> <literal type="number" pos:start="69:23" pos:end="69:25">119</literal></expr> <comment type="block" pos:start="69:27" pos:end="69:47">/* ESC index value */</comment>)</condition>

        <block pos:start="71:9" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:42">

            <comment type="block" pos:start="73:13" pos:end="73:32">/* TODO: Optimize */</comment>

            <if_stmt pos:start="75:13" pos:end="79:42"><if pos:start="75:13" pos:end="75:55">if <condition pos:start="75:16" pos:end="75:28">(<expr pos:start="75:17" pos:end="75:27"><name pos:start="75:17" pos:end="75:22">mquant</name> <operator pos:start="75:24" pos:end="75:25">==</operator> <literal type="number" pos:start="75:27" pos:end="75:27">1</literal></expr>)</condition><block type="pseudo" pos:start="75:30" pos:end="75:55"><block_content pos:start="75:30" pos:end="75:55"> <expr_stmt pos:start="75:30" pos:end="75:55"><expr pos:start="75:30" pos:end="75:54"><name pos:start="75:30" pos:end="75:35">dcdiff</name> <operator pos:start="75:37" pos:end="75:37">=</operator> <call pos:start="75:39" pos:end="75:54"><name pos:start="75:39" pos:end="75:46">get_bits</name><argument_list pos:start="75:47" pos:end="75:54">(<argument pos:start="75:48" pos:end="75:49"><expr pos:start="75:48" pos:end="75:49"><name pos:start="75:48" pos:end="75:49">gb</name></expr></argument>, <argument pos:start="75:52" pos:end="75:53"><expr pos:start="75:52" pos:end="75:53"><literal type="number" pos:start="75:52" pos:end="75:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="77:13" pos:end="77:59">else if <condition pos:start="77:21" pos:end="77:33">(<expr pos:start="77:22" pos:end="77:32"><name pos:start="77:22" pos:end="77:27">mquant</name> <operator pos:start="77:29" pos:end="77:30">==</operator> <literal type="number" pos:start="77:32" pos:end="77:32">2</literal></expr>)</condition><block type="pseudo" pos:start="77:35" pos:end="77:59"><block_content pos:start="77:35" pos:end="77:59"> <expr_stmt pos:start="77:35" pos:end="77:59"><expr pos:start="77:35" pos:end="77:58"><name pos:start="77:35" pos:end="77:40">dcdiff</name> <operator pos:start="77:42" pos:end="77:42">=</operator> <call pos:start="77:44" pos:end="77:58"><name pos:start="77:44" pos:end="77:51">get_bits</name><argument_list pos:start="77:52" pos:end="77:58">(<argument pos:start="77:53" pos:end="77:54"><expr pos:start="77:53" pos:end="77:54"><name pos:start="77:53" pos:end="77:54">gb</name></expr></argument>, <argument pos:start="77:57" pos:end="77:57"><expr pos:start="77:57" pos:end="77:57"><literal type="number" pos:start="77:57" pos:end="77:57">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="79:13" pos:end="79:42">else<block type="pseudo" pos:start="79:18" pos:end="79:42"><block_content pos:start="79:18" pos:end="79:42"> <expr_stmt pos:start="79:18" pos:end="79:42"><expr pos:start="79:18" pos:end="79:41"><name pos:start="79:18" pos:end="79:23">dcdiff</name> <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="79:41"><name pos:start="79:27" pos:end="79:34">get_bits</name><argument_list pos:start="79:35" pos:end="79:41">(<argument pos:start="79:36" pos:end="79:37"><expr pos:start="79:36" pos:end="79:37"><name pos:start="79:36" pos:end="79:37">gb</name></expr></argument>, <argument pos:start="79:40" pos:end="79:40"><expr pos:start="79:40" pos:end="79:40"><literal type="number" pos:start="79:40" pos:end="79:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if>

        <else pos:start="83:9" pos:end="95:9">else

        <block pos:start="85:9" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:59">

            <if_stmt pos:start="87:13" pos:end="93:59"><if pos:start="87:13" pos:end="89:59">if <condition pos:start="87:16" pos:end="87:28">(<expr pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:22">mquant</name> <operator pos:start="87:24" pos:end="87:25">==</operator> <literal type="number" pos:start="87:27" pos:end="87:27">1</literal></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:59"><block_content pos:start="89:17" pos:end="89:59">

                <expr_stmt pos:start="89:17" pos:end="89:59"><expr pos:start="89:17" pos:end="89:58"><name pos:start="89:17" pos:end="89:22">dcdiff</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <operator pos:start="89:26" pos:end="89:26">(</operator><name pos:start="89:27" pos:end="89:32">dcdiff</name><operator pos:start="89:33" pos:end="89:34">&lt;&lt;</operator><literal type="number" pos:start="89:35" pos:end="89:35">2</literal><operator pos:start="89:36" pos:end="89:36">)</operator> <operator pos:start="89:38" pos:end="89:38">+</operator> <call pos:start="89:40" pos:end="89:54"><name pos:start="89:40" pos:end="89:47">get_bits</name><argument_list pos:start="89:48" pos:end="89:54">(<argument pos:start="89:49" pos:end="89:50"><expr pos:start="89:49" pos:end="89:50"><name pos:start="89:49" pos:end="89:50">gb</name></expr></argument>, <argument pos:start="89:53" pos:end="89:53"><expr pos:start="89:53" pos:end="89:53"><literal type="number" pos:start="89:53" pos:end="89:53">2</literal></expr></argument>)</argument_list></call> <operator pos:start="89:56" pos:end="89:56">-</operator> <literal type="number" pos:start="89:58" pos:end="89:58">3</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="91:13" pos:end="93:59">else if <condition pos:start="91:21" pos:end="91:33">(<expr pos:start="91:22" pos:end="91:32"><name pos:start="91:22" pos:end="91:27">mquant</name> <operator pos:start="91:29" pos:end="91:30">==</operator> <literal type="number" pos:start="91:32" pos:end="91:32">2</literal></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:59"><block_content pos:start="93:17" pos:end="93:59">

                <expr_stmt pos:start="93:17" pos:end="93:59"><expr pos:start="93:17" pos:end="93:58"><name pos:start="93:17" pos:end="93:22">dcdiff</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <operator pos:start="93:26" pos:end="93:26">(</operator><name pos:start="93:27" pos:end="93:32">dcdiff</name><operator pos:start="93:33" pos:end="93:34">&lt;&lt;</operator><literal type="number" pos:start="93:35" pos:end="93:35">1</literal><operator pos:start="93:36" pos:end="93:36">)</operator> <operator pos:start="93:38" pos:end="93:38">+</operator> <call pos:start="93:40" pos:end="93:54"><name pos:start="93:40" pos:end="93:47">get_bits</name><argument_list pos:start="93:48" pos:end="93:54">(<argument pos:start="93:49" pos:end="93:50"><expr pos:start="93:49" pos:end="93:50"><name pos:start="93:49" pos:end="93:50">gb</name></expr></argument>, <argument pos:start="93:53" pos:end="93:53"><expr pos:start="93:53" pos:end="93:53"><literal type="number" pos:start="93:53" pos:end="93:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="93:56" pos:end="93:56">-</operator> <literal type="number" pos:start="93:58" pos:end="93:58">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="97:9" pos:end="99:29"><if pos:start="97:9" pos:end="99:29">if <condition pos:start="97:12" pos:end="97:28">(<expr pos:start="97:13" pos:end="97:27"><call pos:start="97:13" pos:end="97:27"><name pos:start="97:13" pos:end="97:20">get_bits</name><argument_list pos:start="97:21" pos:end="97:27">(<argument pos:start="97:22" pos:end="97:23"><expr pos:start="97:22" pos:end="97:23"><name pos:start="97:22" pos:end="97:23">gb</name></expr></argument>, <argument pos:start="97:26" pos:end="97:26"><expr pos:start="97:26" pos:end="97:26"><literal type="number" pos:start="97:26" pos:end="97:26">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:29"><block_content pos:start="99:13" pos:end="99:29">

            <expr_stmt pos:start="99:13" pos:end="99:29"><expr pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:18">dcdiff</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <operator pos:start="99:22" pos:end="99:22">-</operator><name pos:start="99:23" pos:end="99:28">dcdiff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:20">/* Prediction */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:97"><expr pos:start="107:5" pos:end="107:96"><name pos:start="107:5" pos:end="107:10">dcdiff</name> <operator pos:start="107:12" pos:end="107:13">+=</operator> <call pos:start="107:15" pos:end="107:96"><name pos:start="107:15" pos:end="107:25">vc1_pred_dc</name><argument_list pos:start="107:26" pos:end="107:96">(<argument pos:start="107:27" pos:end="107:31"><expr pos:start="107:27" pos:end="107:31"><operator pos:start="107:27" pos:end="107:27">&amp;</operator><name pos:start="107:28" pos:end="107:31"><name pos:start="107:28" pos:end="107:28">v</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:31">s</name></name></expr></argument>, <argument pos:start="107:34" pos:end="107:43"><expr pos:start="107:34" pos:end="107:43"><name pos:start="107:34" pos:end="107:43"><name pos:start="107:34" pos:end="107:34">v</name><operator pos:start="107:35" pos:end="107:36">-&gt;</operator><name pos:start="107:37" pos:end="107:43">overlap</name></name></expr></argument>, <argument pos:start="107:46" pos:end="107:51"><expr pos:start="107:46" pos:end="107:51"><name pos:start="107:46" pos:end="107:51">mquant</name></expr></argument>, <argument pos:start="107:54" pos:end="107:54"><expr pos:start="107:54" pos:end="107:54"><name pos:start="107:54" pos:end="107:54">n</name></expr></argument>, <argument pos:start="107:57" pos:end="107:63"><expr pos:start="107:57" pos:end="107:63"><name pos:start="107:57" pos:end="107:63">a_avail</name></expr></argument>, <argument pos:start="107:66" pos:end="107:72"><expr pos:start="107:66" pos:end="107:72"><name pos:start="107:66" pos:end="107:72">c_avail</name></expr></argument>, <argument pos:start="107:75" pos:end="107:81"><expr pos:start="107:75" pos:end="107:81"><operator pos:start="107:75" pos:end="107:75">&amp;</operator><name pos:start="107:76" pos:end="107:81">dc_val</name></expr></argument>, <argument pos:start="107:84" pos:end="107:95"><expr pos:start="107:84" pos:end="107:95"><operator pos:start="107:84" pos:end="107:84">&amp;</operator><name pos:start="107:85" pos:end="107:95">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><operator pos:start="109:5" pos:end="109:5">*</operator><name pos:start="109:6" pos:end="109:11">dc_val</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <name pos:start="109:15" pos:end="109:20">dcdiff</name></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:59">/* Store the quantized DC coeff, used for prediction */</comment>



    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:14">(<expr pos:start="117:9" pos:end="117:13"><name pos:start="117:9" pos:end="117:9">n</name> <operator pos:start="117:11" pos:end="117:11">&lt;</operator> <literal type="number" pos:start="117:13" pos:end="117:13">4</literal></expr>)</condition> <block pos:start="117:16" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:42">

        <expr_stmt pos:start="119:9" pos:end="119:42"><expr pos:start="119:9" pos:end="119:41"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:13">block</name><index pos:start="119:14" pos:end="119:16">[<expr pos:start="119:15" pos:end="119:15"><literal type="number" pos:start="119:15" pos:end="119:15">0</literal></expr>]</index></name> <operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:25">dcdiff</name> <operator pos:start="119:27" pos:end="119:27">*</operator> <name pos:start="119:29" pos:end="119:41"><name pos:start="119:29" pos:end="119:29">s</name><operator pos:start="119:30" pos:end="119:31">-&gt;</operator><name pos:start="119:32" pos:end="119:41">y_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="125:5">else <block pos:start="121:12" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:42">

        <expr_stmt pos:start="123:9" pos:end="123:42"><expr pos:start="123:9" pos:end="123:41"><name pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:13">block</name><index pos:start="123:14" pos:end="123:16">[<expr pos:start="123:15" pos:end="123:15"><literal type="number" pos:start="123:15" pos:end="123:15">0</literal></expr>]</index></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:25">dcdiff</name> <operator pos:start="123:27" pos:end="123:27">*</operator> <name pos:start="123:29" pos:end="123:41"><name pos:start="123:29" pos:end="123:29">s</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:41">c_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="127:5" pos:end="127:16">/* Skip ? */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:17"><expr pos:start="129:5" pos:end="129:16"><name pos:start="129:5" pos:end="129:12">run_diff</name> <operator pos:start="129:14" pos:end="129:14">=</operator> <literal type="number" pos:start="129:16" pos:end="129:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:10"><expr pos:start="131:5" pos:end="131:9"><name pos:start="131:5" pos:end="131:5">i</name> <operator pos:start="131:7" pos:end="131:7">=</operator> <literal type="number" pos:start="131:9" pos:end="131:9">0</literal></expr>;</expr_stmt>



    <comment type="line" pos:start="135:5" pos:end="135:17">//AC Decoding</comment>

    <expr_stmt pos:start="137:5" pos:end="137:10"><expr pos:start="137:5" pos:end="137:9"><name pos:start="137:5" pos:end="137:5">i</name> <operator pos:start="137:7" pos:end="137:7">=</operator> <literal type="number" pos:start="137:9" pos:end="137:9">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:69">/* check if AC is needed at all and adjust direction if needed */</comment>

    <if_stmt pos:start="143:5" pos:end="143:33"><if pos:start="143:5" pos:end="143:33">if<condition pos:start="143:7" pos:end="143:16">(<expr pos:start="143:8" pos:end="143:15"><operator pos:start="143:8" pos:end="143:8">!</operator><name pos:start="143:9" pos:end="143:15">a_avail</name></expr>)</condition><block type="pseudo" pos:start="143:18" pos:end="143:33"><block_content pos:start="143:18" pos:end="143:33"> <expr_stmt pos:start="143:18" pos:end="143:33"><expr pos:start="143:18" pos:end="143:32"><name pos:start="143:18" pos:end="143:28">dc_pred_dir</name> <operator pos:start="143:30" pos:end="143:30">=</operator> <literal type="number" pos:start="143:32" pos:end="143:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="145:5" pos:end="145:33"><if pos:start="145:5" pos:end="145:33">if<condition pos:start="145:7" pos:end="145:16">(<expr pos:start="145:8" pos:end="145:15"><operator pos:start="145:8" pos:end="145:8">!</operator><name pos:start="145:9" pos:end="145:15">c_avail</name></expr>)</condition><block type="pseudo" pos:start="145:18" pos:end="145:33"><block_content pos:start="145:18" pos:end="145:33"> <expr_stmt pos:start="145:18" pos:end="145:33"><expr pos:start="145:18" pos:end="145:32"><name pos:start="145:18" pos:end="145:28">dc_pred_dir</name> <operator pos:start="145:30" pos:end="145:30">=</operator> <literal type="number" pos:start="145:32" pos:end="145:32">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="147:5" pos:end="147:42"><if pos:start="147:5" pos:end="147:42">if<condition pos:start="147:7" pos:end="147:28">(<expr pos:start="147:8" pos:end="147:27"><operator pos:start="147:8" pos:end="147:8">!</operator><name pos:start="147:9" pos:end="147:15">a_avail</name> <operator pos:start="147:17" pos:end="147:18">&amp;&amp;</operator> <operator pos:start="147:20" pos:end="147:20">!</operator><name pos:start="147:21" pos:end="147:27">c_avail</name></expr>)</condition><block type="pseudo" pos:start="147:30" pos:end="147:42"><block_content pos:start="147:30" pos:end="147:42"> <expr_stmt pos:start="147:30" pos:end="147:42"><expr pos:start="147:30" pos:end="147:41"><name pos:start="147:30" pos:end="147:37">use_pred</name> <operator pos:start="147:39" pos:end="147:39">=</operator> <literal type="number" pos:start="147:41" pos:end="147:41">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:54"><expr pos:start="149:5" pos:end="149:53"><name pos:start="149:5" pos:end="149:10">ac_val</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <name pos:start="149:14" pos:end="149:28"><name pos:start="149:14" pos:end="149:14">s</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:22">ac_val</name><index pos:start="149:23" pos:end="149:25">[<expr pos:start="149:24" pos:end="149:24"><literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr>]</index><index pos:start="149:26" pos:end="149:28">[<expr pos:start="149:27" pos:end="149:27"><literal type="number" pos:start="149:27" pos:end="149:27">0</literal></expr>]</index></name> <operator pos:start="149:30" pos:end="149:30">+</operator> <name pos:start="149:32" pos:end="149:48"><name pos:start="149:32" pos:end="149:32">s</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:45">block_index</name><index pos:start="149:46" pos:end="149:48">[<expr pos:start="149:47" pos:end="149:47"><name pos:start="149:47" pos:end="149:47">n</name></expr>]</index></name> <operator pos:start="149:50" pos:end="149:50">*</operator> <literal type="number" pos:start="149:52" pos:end="149:53">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:21"><expr pos:start="151:5" pos:end="151:20"><name pos:start="151:5" pos:end="151:11">ac_val2</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <name pos:start="151:15" pos:end="151:20">ac_val</name></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:35"><expr pos:start="155:5" pos:end="155:34"><name pos:start="155:5" pos:end="155:9">scale</name> <operator pos:start="155:11" pos:end="155:11">=</operator> <name pos:start="155:13" pos:end="155:18">mquant</name> <operator pos:start="155:20" pos:end="155:20">*</operator> <literal type="number" pos:start="155:22" pos:end="155:24">2</literal> <operator pos:start="155:24" pos:end="155:24">+</operator> <name pos:start="155:26" pos:end="155:34"><name pos:start="155:26" pos:end="155:26">v</name><operator pos:start="155:27" pos:end="155:28">-&gt;</operator><name pos:start="155:29" pos:end="155:34">halfpq</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="165:40"><if pos:start="159:5" pos:end="161:21">if<condition pos:start="159:7" pos:end="159:19">(<expr pos:start="159:8" pos:end="159:18"><name pos:start="159:8" pos:end="159:18">dc_pred_dir</name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:21"><block_content pos:start="161:9" pos:end="161:21"> <comment type="line" pos:start="159:21" pos:end="159:26">//left</comment>

        <expr_stmt pos:start="161:9" pos:end="161:21"><expr pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:14">ac_val</name> <operator pos:start="161:16" pos:end="161:17">-=</operator> <literal type="number" pos:start="161:19" pos:end="161:20">16</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="163:5" pos:end="165:40">else<block type="pseudo" pos:start="165:9" pos:end="165:40"><block_content pos:start="165:9" pos:end="165:40"> <comment type="line" pos:start="163:10" pos:end="163:14">//top</comment>

        <expr_stmt pos:start="165:9" pos:end="165:40"><expr pos:start="165:9" pos:end="165:39"><name pos:start="165:9" pos:end="165:14">ac_val</name> <operator pos:start="165:16" pos:end="165:17">-=</operator> <literal type="number" pos:start="165:19" pos:end="165:20">16</literal> <operator pos:start="165:22" pos:end="165:22">*</operator> <name pos:start="165:24" pos:end="165:39"><name pos:start="165:24" pos:end="165:24">s</name><operator pos:start="165:25" pos:end="165:26">-&gt;</operator><name pos:start="165:27" pos:end="165:36">block_wrap</name><index pos:start="165:37" pos:end="165:39">[<expr pos:start="165:38" pos:end="165:38"><name pos:start="165:38" pos:end="165:38">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:49"><expr pos:start="169:5" pos:end="169:48"><name pos:start="169:5" pos:end="169:6">q1</name> <operator pos:start="169:8" pos:end="169:8">=</operator> <name pos:start="169:10" pos:end="169:48"><name pos:start="169:10" pos:end="169:10">s</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:27">current_picture</name><operator pos:start="169:28" pos:end="169:28">.</operator><name pos:start="169:29" pos:end="169:40">qscale_table</name><index pos:start="169:41" pos:end="169:48">[<expr pos:start="169:42" pos:end="169:47"><name pos:start="169:42" pos:end="169:47">mb_pos</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="171:80"><if pos:start="171:5" pos:end="171:80">if<condition pos:start="171:7" pos:end="171:30">(<expr pos:start="171:8" pos:end="171:29"><name pos:start="171:8" pos:end="171:18">dc_pred_dir</name> <operator pos:start="171:20" pos:end="171:21">&amp;&amp;</operator> <name pos:start="171:23" pos:end="171:29">c_avail</name></expr>)</condition><block type="pseudo" pos:start="171:32" pos:end="171:80"><block_content pos:start="171:32" pos:end="171:80"> <expr_stmt pos:start="171:32" pos:end="171:80"><expr pos:start="171:32" pos:end="171:79"><name pos:start="171:32" pos:end="171:33">q2</name> <operator pos:start="171:35" pos:end="171:35">=</operator> <name pos:start="171:37" pos:end="171:79"><name pos:start="171:37" pos:end="171:37">s</name><operator pos:start="171:38" pos:end="171:39">-&gt;</operator><name pos:start="171:40" pos:end="171:54">current_picture</name><operator pos:start="171:55" pos:end="171:55">.</operator><name pos:start="171:56" pos:end="171:67">qscale_table</name><index pos:start="171:68" pos:end="171:79">[<expr pos:start="171:69" pos:end="171:78"><name pos:start="171:69" pos:end="171:74">mb_pos</name> <operator pos:start="171:76" pos:end="171:76">-</operator> <literal type="number" pos:start="171:78" pos:end="171:78">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="173:5" pos:end="173:92"><if pos:start="173:5" pos:end="173:92">if<condition pos:start="173:7" pos:end="173:31">(<expr pos:start="173:8" pos:end="173:30"><operator pos:start="173:8" pos:end="173:8">!</operator><name pos:start="173:9" pos:end="173:19">dc_pred_dir</name> <operator pos:start="173:21" pos:end="173:22">&amp;&amp;</operator> <name pos:start="173:24" pos:end="173:30">a_avail</name></expr>)</condition><block type="pseudo" pos:start="173:33" pos:end="173:92"><block_content pos:start="173:33" pos:end="173:92"> <expr_stmt pos:start="173:33" pos:end="173:92"><expr pos:start="173:33" pos:end="173:91"><name pos:start="173:33" pos:end="173:34">q2</name> <operator pos:start="173:36" pos:end="173:36">=</operator> <name pos:start="173:38" pos:end="173:91"><name pos:start="173:38" pos:end="173:38">s</name><operator pos:start="173:39" pos:end="173:40">-&gt;</operator><name pos:start="173:41" pos:end="173:55">current_picture</name><operator pos:start="173:56" pos:end="173:56">.</operator><name pos:start="173:57" pos:end="173:68">qscale_table</name><index pos:start="173:69" pos:end="173:91">[<expr pos:start="173:70" pos:end="173:90"><name pos:start="173:70" pos:end="173:75">mb_pos</name> <operator pos:start="173:77" pos:end="173:77">-</operator> <name pos:start="173:79" pos:end="173:90"><name pos:start="173:79" pos:end="173:79">s</name><operator pos:start="173:80" pos:end="173:81">-&gt;</operator><name pos:start="173:82" pos:end="173:90">mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="175:5" pos:end="175:25"><if pos:start="175:5" pos:end="175:25">if<condition pos:start="175:7" pos:end="175:16">(<expr pos:start="175:8" pos:end="175:15"><name pos:start="175:8" pos:end="175:8">n</name> <operator pos:start="175:10" pos:end="175:11">&amp;&amp;</operator> <name pos:start="175:13" pos:end="175:13">n</name><operator pos:start="175:14" pos:end="175:14">&lt;</operator><literal type="number" pos:start="175:15" pos:end="175:15">4</literal></expr>)</condition><block type="pseudo" pos:start="175:18" pos:end="175:25"><block_content pos:start="175:18" pos:end="175:25"> <expr_stmt pos:start="175:18" pos:end="175:25"><expr pos:start="175:18" pos:end="175:24"><name pos:start="175:18" pos:end="175:19">q2</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <name pos:start="175:23" pos:end="175:24">q1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="179:5" pos:end="373:5"><if pos:start="179:5" pos:end="287:5">if<condition pos:start="179:7" pos:end="179:13">(<expr pos:start="179:8" pos:end="179:12"><name pos:start="179:8" pos:end="179:12">coded</name></expr>)</condition> <block pos:start="179:15" pos:end="287:5">{<block_content pos:start="181:9" pos:end="285:28">

        <decl_stmt pos:start="181:9" pos:end="181:34"><decl pos:start="181:9" pos:end="181:20"><type pos:start="181:9" pos:end="181:11"><name pos:start="181:9" pos:end="181:11">int</name></type> <name pos:start="181:13" pos:end="181:16">last</name> <init pos:start="181:18" pos:end="181:20">= <expr pos:start="181:20" pos:end="181:20"><literal type="number" pos:start="181:20" pos:end="181:20">0</literal></expr></init></decl>, <decl pos:start="181:23" pos:end="181:26"><type ref="prev" pos:start="181:9" pos:end="181:11"/><name pos:start="181:23" pos:end="181:26">skip</name></decl>, <decl pos:start="181:29" pos:end="181:33"><type ref="prev" pos:start="181:9" pos:end="181:11"/><name pos:start="181:29" pos:end="181:33">value</name></decl>;</decl_stmt>

        <decl_stmt pos:start="183:9" pos:end="183:31"><decl pos:start="183:9" pos:end="183:30"><type pos:start="183:9" pos:end="183:22"><specifier pos:start="183:9" pos:end="183:13">const</specifier> <name pos:start="183:15" pos:end="183:20">int8_t</name> <modifier pos:start="183:22" pos:end="183:22">*</modifier></type><name pos:start="183:23" pos:end="183:30">zz_table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="185:9" pos:end="185:14"><decl pos:start="185:9" pos:end="185:13"><type pos:start="185:9" pos:end="185:11"><name pos:start="185:9" pos:end="185:11">int</name></type> <name pos:start="185:13" pos:end="185:13">k</name></decl>;</decl_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:49"><expr pos:start="189:9" pos:end="189:48"><name pos:start="189:9" pos:end="189:16">zz_table</name> <operator pos:start="189:18" pos:end="189:18">=</operator> <name pos:start="189:20" pos:end="189:48">vc1_simple_progressive_8x8_zz</name></expr>;</expr_stmt>



        <while pos:start="193:9" pos:end="205:9">while <condition pos:start="193:15" pos:end="193:21">(<expr pos:start="193:16" pos:end="193:20"><operator pos:start="193:16" pos:end="193:16">!</operator><name pos:start="193:17" pos:end="193:20">last</name></expr>)</condition> <block pos:start="193:23" pos:end="205:9">{<block_content pos:start="195:13" pos:end="203:41">

            <expr_stmt pos:start="195:13" pos:end="195:68"><expr pos:start="195:13" pos:end="195:67"><call pos:start="195:13" pos:end="195:67"><name pos:start="195:13" pos:end="195:31">vc1_decode_ac_coeff</name><argument_list pos:start="195:32" pos:end="195:67">(<argument pos:start="195:33" pos:end="195:33"><expr pos:start="195:33" pos:end="195:33"><name pos:start="195:33" pos:end="195:33">v</name></expr></argument>, <argument pos:start="195:36" pos:end="195:40"><expr pos:start="195:36" pos:end="195:40"><operator pos:start="195:36" pos:end="195:36">&amp;</operator><name pos:start="195:37" pos:end="195:40">last</name></expr></argument>, <argument pos:start="195:43" pos:end="195:47"><expr pos:start="195:43" pos:end="195:47"><operator pos:start="195:43" pos:end="195:43">&amp;</operator><name pos:start="195:44" pos:end="195:47">skip</name></expr></argument>, <argument pos:start="195:50" pos:end="195:55"><expr pos:start="195:50" pos:end="195:55"><operator pos:start="195:50" pos:end="195:50">&amp;</operator><name pos:start="195:51" pos:end="195:55">value</name></expr></argument>, <argument pos:start="195:58" pos:end="195:66"><expr pos:start="195:58" pos:end="195:66"><name pos:start="195:58" pos:end="195:66">codingset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:22"><expr pos:start="197:13" pos:end="197:21"><name pos:start="197:13" pos:end="197:13">i</name> <operator pos:start="197:15" pos:end="197:16">+=</operator> <name pos:start="197:18" pos:end="197:21">skip</name></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="201:22"><if pos:start="199:13" pos:end="201:22">if<condition pos:start="199:15" pos:end="199:22">(<expr pos:start="199:16" pos:end="199:21"><name pos:start="199:16" pos:end="199:16">i</name> <operator pos:start="199:18" pos:end="199:18">&gt;</operator> <literal type="number" pos:start="199:20" pos:end="199:21">63</literal></expr>)</condition><block type="pseudo" pos:start="201:17" pos:end="201:22"><block_content pos:start="201:17" pos:end="201:22">

                <break pos:start="201:17" pos:end="201:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:41"><expr pos:start="203:13" pos:end="203:40"><name pos:start="203:13" pos:end="203:32"><name pos:start="203:13" pos:end="203:17">block</name><index pos:start="203:18" pos:end="203:32">[<expr pos:start="203:19" pos:end="203:31"><name pos:start="203:19" pos:end="203:31"><name pos:start="203:19" pos:end="203:26">zz_table</name><index pos:start="203:27" pos:end="203:31">[<expr pos:start="203:28" pos:end="203:30"><name pos:start="203:28" pos:end="203:28">i</name><operator pos:start="203:29" pos:end="203:30">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="203:34" pos:end="203:34">=</operator> <name pos:start="203:36" pos:end="203:40">value</name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <comment type="block" pos:start="209:9" pos:end="209:43">/* apply AC prediction if needed */</comment>

        <if_stmt pos:start="211:9" pos:end="255:9"><if pos:start="211:9" pos:end="255:9">if<condition pos:start="211:11" pos:end="211:20">(<expr pos:start="211:12" pos:end="211:19"><name pos:start="211:12" pos:end="211:19">use_pred</name></expr>)</condition> <block pos:start="211:22" pos:end="255:9">{<block_content pos:start="215:13" pos:end="253:13">

            <comment type="block" pos:start="213:13" pos:end="213:43">/* scale predictors if needed*/</comment>

            <if_stmt pos:start="215:13" pos:end="253:13"><if pos:start="215:13" pos:end="237:13">if<condition pos:start="215:15" pos:end="215:28">(<expr pos:start="215:16" pos:end="215:27"><name pos:start="215:16" pos:end="215:17">q2</name> <operator pos:start="215:19" pos:end="215:20">&amp;&amp;</operator> <name pos:start="215:22" pos:end="215:23">q1</name><operator pos:start="215:24" pos:end="215:25">!=</operator><name pos:start="215:26" pos:end="215:27">q2</name></expr>)</condition> <block pos:start="215:30" pos:end="237:13">{<block_content pos:start="217:17" pos:end="235:17">

                <expr_stmt pos:start="217:17" pos:end="217:66"><expr pos:start="217:17" pos:end="217:65"><name pos:start="217:17" pos:end="217:18">q1</name> <operator pos:start="217:20" pos:end="217:20">=</operator> <name pos:start="217:22" pos:end="217:23">q1</name> <operator pos:start="217:25" pos:end="217:25">*</operator> <literal type="number" pos:start="217:27" pos:end="217:29">2</literal> <operator pos:start="217:29" pos:end="217:29">+</operator> <operator pos:start="217:31" pos:end="217:31">(</operator><ternary pos:start="217:32" pos:end="217:60"><condition pos:start="217:32" pos:end="217:46"><expr pos:start="217:32" pos:end="217:44"><operator pos:start="217:32" pos:end="217:32">(</operator><name pos:start="217:33" pos:end="217:34">q1</name> <operator pos:start="217:36" pos:end="217:37">==</operator> <name pos:start="217:39" pos:end="217:43"><name pos:start="217:39" pos:end="217:39">v</name><operator pos:start="217:40" pos:end="217:41">-&gt;</operator><name pos:start="217:42" pos:end="217:43">pq</name></name><operator pos:start="217:44" pos:end="217:44">)</operator></expr> ?</condition><then pos:start="217:48" pos:end="217:56"> <expr pos:start="217:48" pos:end="217:56"><name pos:start="217:48" pos:end="217:56"><name pos:start="217:48" pos:end="217:48">v</name><operator pos:start="217:49" pos:end="217:50">-&gt;</operator><name pos:start="217:51" pos:end="217:56">halfpq</name></name></expr> </then><else pos:start="217:58" pos:end="217:60">: <expr pos:start="217:60" pos:end="217:60"><literal type="number" pos:start="217:60" pos:end="217:60">0</literal></expr></else></ternary><operator pos:start="217:61" pos:end="217:61">)</operator> <operator pos:start="217:63" pos:end="217:63">-</operator> <literal type="number" pos:start="217:65" pos:end="217:65">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:66"><expr pos:start="219:17" pos:end="219:65"><name pos:start="219:17" pos:end="219:18">q2</name> <operator pos:start="219:20" pos:end="219:20">=</operator> <name pos:start="219:22" pos:end="219:23">q2</name> <operator pos:start="219:25" pos:end="219:25">*</operator> <literal type="number" pos:start="219:27" pos:end="219:29">2</literal> <operator pos:start="219:29" pos:end="219:29">+</operator> <operator pos:start="219:31" pos:end="219:31">(</operator><ternary pos:start="219:32" pos:end="219:60"><condition pos:start="219:32" pos:end="219:46"><expr pos:start="219:32" pos:end="219:44"><operator pos:start="219:32" pos:end="219:32">(</operator><name pos:start="219:33" pos:end="219:34">q2</name> <operator pos:start="219:36" pos:end="219:37">==</operator> <name pos:start="219:39" pos:end="219:43"><name pos:start="219:39" pos:end="219:39">v</name><operator pos:start="219:40" pos:end="219:41">-&gt;</operator><name pos:start="219:42" pos:end="219:43">pq</name></name><operator pos:start="219:44" pos:end="219:44">)</operator></expr> ?</condition><then pos:start="219:48" pos:end="219:56"> <expr pos:start="219:48" pos:end="219:56"><name pos:start="219:48" pos:end="219:56"><name pos:start="219:48" pos:end="219:48">v</name><operator pos:start="219:49" pos:end="219:50">-&gt;</operator><name pos:start="219:51" pos:end="219:56">halfpq</name></name></expr> </then><else pos:start="219:58" pos:end="219:60">: <expr pos:start="219:60" pos:end="219:60"><literal type="number" pos:start="219:60" pos:end="219:60">0</literal></expr></else></ternary><operator pos:start="219:61" pos:end="219:61">)</operator> <operator pos:start="219:63" pos:end="219:63">-</operator> <literal type="number" pos:start="219:65" pos:end="219:65">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="223:17" pos:end="235:17"><if pos:start="223:17" pos:end="229:17">if<condition pos:start="223:19" pos:end="223:31">(<expr pos:start="223:20" pos:end="223:30"><name pos:start="223:20" pos:end="223:30">dc_pred_dir</name></expr>)</condition> <block pos:start="223:33" pos:end="229:17">{<block_content pos:start="225:21" pos:end="227:96"> <comment type="line" pos:start="223:35" pos:end="223:40">//left</comment>

                    <for pos:start="225:21" pos:end="227:96">for<control pos:start="225:24" pos:end="225:42">(<init pos:start="225:25" pos:end="225:30"><expr pos:start="225:25" pos:end="225:29"><name pos:start="225:25" pos:end="225:25">k</name> <operator pos:start="225:27" pos:end="225:27">=</operator> <literal type="number" pos:start="225:29" pos:end="225:29">1</literal></expr>;</init> <condition pos:start="225:32" pos:end="225:37"><expr pos:start="225:32" pos:end="225:36"><name pos:start="225:32" pos:end="225:32">k</name> <operator pos:start="225:34" pos:end="225:34">&lt;</operator> <literal type="number" pos:start="225:36" pos:end="225:36">8</literal></expr>;</condition> <incr pos:start="225:39" pos:end="225:41"><expr pos:start="225:39" pos:end="225:41"><name pos:start="225:39" pos:end="225:39">k</name><operator pos:start="225:40" pos:end="225:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="227:25" pos:end="227:96"><block_content pos:start="227:25" pos:end="227:96">

                        <expr_stmt pos:start="227:25" pos:end="227:96"><expr pos:start="227:25" pos:end="227:95"><name pos:start="227:25" pos:end="227:37"><name pos:start="227:25" pos:end="227:29">block</name><index pos:start="227:30" pos:end="227:37">[<expr pos:start="227:31" pos:end="227:36"><name pos:start="227:31" pos:end="227:31">k</name> <operator pos:start="227:33" pos:end="227:34">&lt;&lt;</operator> <literal type="number" pos:start="227:36" pos:end="227:36">3</literal></expr>]</index></name> <operator pos:start="227:39" pos:end="227:40">+=</operator> <operator pos:start="227:42" pos:end="227:42">(</operator><name pos:start="227:43" pos:end="227:51"><name pos:start="227:43" pos:end="227:48">ac_val</name><index pos:start="227:49" pos:end="227:51">[<expr pos:start="227:50" pos:end="227:50"><name pos:start="227:50" pos:end="227:50">k</name></expr>]</index></name> <operator pos:start="227:53" pos:end="227:53">*</operator> <name pos:start="227:55" pos:end="227:56">q2</name> <operator pos:start="227:58" pos:end="227:58">*</operator> <name pos:start="227:60" pos:end="227:78"><name pos:start="227:60" pos:end="227:70">vc1_dqscale</name><index pos:start="227:71" pos:end="227:78">[<expr pos:start="227:72" pos:end="227:77"><name pos:start="227:72" pos:end="227:73">q1</name> <operator pos:start="227:75" pos:end="227:75">-</operator> <literal type="number" pos:start="227:77" pos:end="227:77">1</literal></expr>]</index></name> <operator pos:start="227:80" pos:end="227:80">+</operator> <literal type="number" pos:start="227:82" pos:end="227:88">0x20000</literal><operator pos:start="227:89" pos:end="227:89">)</operator> <operator pos:start="227:91" pos:end="227:92">&gt;&gt;</operator> <literal type="number" pos:start="227:94" pos:end="227:95">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="229:19" pos:end="235:17">else <block pos:start="229:24" pos:end="235:17">{<block_content pos:start="231:21" pos:end="233:95"> <comment type="line" pos:start="229:26" pos:end="229:30">//top</comment>

                    <for pos:start="231:21" pos:end="233:95">for<control pos:start="231:24" pos:end="231:42">(<init pos:start="231:25" pos:end="231:30"><expr pos:start="231:25" pos:end="231:29"><name pos:start="231:25" pos:end="231:25">k</name> <operator pos:start="231:27" pos:end="231:27">=</operator> <literal type="number" pos:start="231:29" pos:end="231:29">1</literal></expr>;</init> <condition pos:start="231:32" pos:end="231:37"><expr pos:start="231:32" pos:end="231:36"><name pos:start="231:32" pos:end="231:32">k</name> <operator pos:start="231:34" pos:end="231:34">&lt;</operator> <literal type="number" pos:start="231:36" pos:end="231:36">8</literal></expr>;</condition> <incr pos:start="231:39" pos:end="231:41"><expr pos:start="231:39" pos:end="231:41"><name pos:start="231:39" pos:end="231:39">k</name><operator pos:start="231:40" pos:end="231:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="233:25" pos:end="233:95"><block_content pos:start="233:25" pos:end="233:95">

                        <expr_stmt pos:start="233:25" pos:end="233:95"><expr pos:start="233:25" pos:end="233:94"><name pos:start="233:25" pos:end="233:32"><name pos:start="233:25" pos:end="233:29">block</name><index pos:start="233:30" pos:end="233:32">[<expr pos:start="233:31" pos:end="233:31"><name pos:start="233:31" pos:end="233:31">k</name></expr>]</index></name> <operator pos:start="233:34" pos:end="233:35">+=</operator> <operator pos:start="233:37" pos:end="233:37">(</operator><name pos:start="233:38" pos:end="233:50"><name pos:start="233:38" pos:end="233:43">ac_val</name><index pos:start="233:44" pos:end="233:50">[<expr pos:start="233:45" pos:end="233:49"><name pos:start="233:45" pos:end="233:45">k</name> <operator pos:start="233:47" pos:end="233:47">+</operator> <literal type="number" pos:start="233:49" pos:end="233:49">8</literal></expr>]</index></name> <operator pos:start="233:52" pos:end="233:52">*</operator> <name pos:start="233:54" pos:end="233:55">q2</name> <operator pos:start="233:57" pos:end="233:57">*</operator> <name pos:start="233:59" pos:end="233:77"><name pos:start="233:59" pos:end="233:69">vc1_dqscale</name><index pos:start="233:70" pos:end="233:77">[<expr pos:start="233:71" pos:end="233:76"><name pos:start="233:71" pos:end="233:72">q1</name> <operator pos:start="233:74" pos:end="233:74">-</operator> <literal type="number" pos:start="233:76" pos:end="233:76">1</literal></expr>]</index></name> <operator pos:start="233:79" pos:end="233:79">+</operator> <literal type="number" pos:start="233:81" pos:end="233:87">0x20000</literal><operator pos:start="233:88" pos:end="233:88">)</operator> <operator pos:start="233:90" pos:end="233:91">&gt;&gt;</operator> <literal type="number" pos:start="233:93" pos:end="233:94">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="237:15" pos:end="253:13">else <block pos:start="237:20" pos:end="253:13">{<block_content pos:start="239:17" pos:end="251:17">

                <if_stmt pos:start="239:17" pos:end="251:17"><if pos:start="239:17" pos:end="245:17">if<condition pos:start="239:19" pos:end="239:31">(<expr pos:start="239:20" pos:end="239:30"><name pos:start="239:20" pos:end="239:30">dc_pred_dir</name></expr>)</condition> <block pos:start="239:33" pos:end="245:17">{<block_content pos:start="241:21" pos:end="243:51"> <comment type="line" pos:start="239:35" pos:end="239:40">//left</comment>

                    <for pos:start="241:21" pos:end="243:51">for<control pos:start="241:24" pos:end="241:42">(<init pos:start="241:25" pos:end="241:30"><expr pos:start="241:25" pos:end="241:29"><name pos:start="241:25" pos:end="241:25">k</name> <operator pos:start="241:27" pos:end="241:27">=</operator> <literal type="number" pos:start="241:29" pos:end="241:29">1</literal></expr>;</init> <condition pos:start="241:32" pos:end="241:37"><expr pos:start="241:32" pos:end="241:36"><name pos:start="241:32" pos:end="241:32">k</name> <operator pos:start="241:34" pos:end="241:34">&lt;</operator> <literal type="number" pos:start="241:36" pos:end="241:36">8</literal></expr>;</condition> <incr pos:start="241:39" pos:end="241:41"><expr pos:start="241:39" pos:end="241:41"><name pos:start="241:39" pos:end="241:39">k</name><operator pos:start="241:40" pos:end="241:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="243:25" pos:end="243:51"><block_content pos:start="243:25" pos:end="243:51">

                        <expr_stmt pos:start="243:25" pos:end="243:51"><expr pos:start="243:25" pos:end="243:50"><name pos:start="243:25" pos:end="243:37"><name pos:start="243:25" pos:end="243:29">block</name><index pos:start="243:30" pos:end="243:37">[<expr pos:start="243:31" pos:end="243:36"><name pos:start="243:31" pos:end="243:31">k</name> <operator pos:start="243:33" pos:end="243:34">&lt;&lt;</operator> <literal type="number" pos:start="243:36" pos:end="243:36">3</literal></expr>]</index></name> <operator pos:start="243:39" pos:end="243:40">+=</operator> <name pos:start="243:42" pos:end="243:50"><name pos:start="243:42" pos:end="243:47">ac_val</name><index pos:start="243:48" pos:end="243:50">[<expr pos:start="243:49" pos:end="243:49"><name pos:start="243:49" pos:end="243:49">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="245:19" pos:end="251:17">else <block pos:start="245:24" pos:end="251:17">{<block_content pos:start="247:21" pos:end="249:50"> <comment type="line" pos:start="245:26" pos:end="245:30">//top</comment>

                    <for pos:start="247:21" pos:end="249:50">for<control pos:start="247:24" pos:end="247:42">(<init pos:start="247:25" pos:end="247:30"><expr pos:start="247:25" pos:end="247:29"><name pos:start="247:25" pos:end="247:25">k</name> <operator pos:start="247:27" pos:end="247:27">=</operator> <literal type="number" pos:start="247:29" pos:end="247:29">1</literal></expr>;</init> <condition pos:start="247:32" pos:end="247:37"><expr pos:start="247:32" pos:end="247:36"><name pos:start="247:32" pos:end="247:32">k</name> <operator pos:start="247:34" pos:end="247:34">&lt;</operator> <literal type="number" pos:start="247:36" pos:end="247:36">8</literal></expr>;</condition> <incr pos:start="247:39" pos:end="247:41"><expr pos:start="247:39" pos:end="247:41"><name pos:start="247:39" pos:end="247:39">k</name><operator pos:start="247:40" pos:end="247:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="249:25" pos:end="249:50"><block_content pos:start="249:25" pos:end="249:50">

                        <expr_stmt pos:start="249:25" pos:end="249:50"><expr pos:start="249:25" pos:end="249:49"><name pos:start="249:25" pos:end="249:32"><name pos:start="249:25" pos:end="249:29">block</name><index pos:start="249:30" pos:end="249:32">[<expr pos:start="249:31" pos:end="249:31"><name pos:start="249:31" pos:end="249:31">k</name></expr>]</index></name> <operator pos:start="249:34" pos:end="249:35">+=</operator> <name pos:start="249:37" pos:end="249:49"><name pos:start="249:37" pos:end="249:42">ac_val</name><index pos:start="249:43" pos:end="249:49">[<expr pos:start="249:44" pos:end="249:48"><name pos:start="249:44" pos:end="249:44">k</name> <operator pos:start="249:46" pos:end="249:46">+</operator> <literal type="number" pos:start="249:48" pos:end="249:48">8</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="257:9" pos:end="257:51">/* save AC coeffs for further prediction */</comment>

        <for pos:start="259:9" pos:end="265:9">for<control pos:start="259:12" pos:end="259:30">(<init pos:start="259:13" pos:end="259:18"><expr pos:start="259:13" pos:end="259:17"><name pos:start="259:13" pos:end="259:13">k</name> <operator pos:start="259:15" pos:end="259:15">=</operator> <literal type="number" pos:start="259:17" pos:end="259:17">1</literal></expr>;</init> <condition pos:start="259:20" pos:end="259:25"><expr pos:start="259:20" pos:end="259:24"><name pos:start="259:20" pos:end="259:20">k</name> <operator pos:start="259:22" pos:end="259:22">&lt;</operator> <literal type="number" pos:start="259:24" pos:end="259:24">8</literal></expr>;</condition> <incr pos:start="259:27" pos:end="259:29"><expr pos:start="259:27" pos:end="259:29"><name pos:start="259:27" pos:end="259:27">k</name><operator pos:start="259:28" pos:end="259:29">++</operator></expr></incr>)</control> <block pos:start="259:32" pos:end="265:9">{<block_content pos:start="261:13" pos:end="263:38">

            <expr_stmt pos:start="261:13" pos:end="261:39"><expr pos:start="261:13" pos:end="261:38"><name pos:start="261:13" pos:end="261:22"><name pos:start="261:13" pos:end="261:19">ac_val2</name><index pos:start="261:20" pos:end="261:22">[<expr pos:start="261:21" pos:end="261:21"><name pos:start="261:21" pos:end="261:21">k</name></expr>]</index></name> <operator pos:start="261:24" pos:end="261:24">=</operator> <name pos:start="261:26" pos:end="261:38"><name pos:start="261:26" pos:end="261:30">block</name><index pos:start="261:31" pos:end="261:38">[<expr pos:start="261:32" pos:end="261:37"><name pos:start="261:32" pos:end="261:32">k</name> <operator pos:start="261:34" pos:end="261:35">&lt;&lt;</operator> <literal type="number" pos:start="261:37" pos:end="261:37">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:38"><expr pos:start="263:13" pos:end="263:37"><name pos:start="263:13" pos:end="263:26"><name pos:start="263:13" pos:end="263:19">ac_val2</name><index pos:start="263:20" pos:end="263:26">[<expr pos:start="263:21" pos:end="263:25"><name pos:start="263:21" pos:end="263:21">k</name> <operator pos:start="263:23" pos:end="263:23">+</operator> <literal type="number" pos:start="263:25" pos:end="263:25">8</literal></expr>]</index></name> <operator pos:start="263:28" pos:end="263:28">=</operator> <name pos:start="263:30" pos:end="263:37"><name pos:start="263:30" pos:end="263:34">block</name><index pos:start="263:35" pos:end="263:37">[<expr pos:start="263:36" pos:end="263:36"><name pos:start="263:36" pos:end="263:36">k</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="269:9" pos:end="269:29">/* scale AC coeffs */</comment>

        <for pos:start="271:9" pos:end="281:13">for<control pos:start="271:12" pos:end="271:31">(<init pos:start="271:13" pos:end="271:18"><expr pos:start="271:13" pos:end="271:17"><name pos:start="271:13" pos:end="271:13">k</name> <operator pos:start="271:15" pos:end="271:15">=</operator> <literal type="number" pos:start="271:17" pos:end="271:17">1</literal></expr>;</init> <condition pos:start="271:20" pos:end="271:26"><expr pos:start="271:20" pos:end="271:25"><name pos:start="271:20" pos:end="271:20">k</name> <operator pos:start="271:22" pos:end="271:22">&lt;</operator> <literal type="number" pos:start="271:24" pos:end="271:25">64</literal></expr>;</condition> <incr pos:start="271:28" pos:end="271:30"><expr pos:start="271:28" pos:end="271:30"><name pos:start="271:28" pos:end="271:28">k</name><operator pos:start="271:29" pos:end="271:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="273:13" pos:end="281:13"><block_content pos:start="273:13" pos:end="281:13">

            <if_stmt pos:start="273:13" pos:end="281:13"><if pos:start="273:13" pos:end="281:13">if<condition pos:start="273:15" pos:end="273:24">(<expr pos:start="273:16" pos:end="273:23"><name pos:start="273:16" pos:end="273:23"><name pos:start="273:16" pos:end="273:20">block</name><index pos:start="273:21" pos:end="273:23">[<expr pos:start="273:22" pos:end="273:22"><name pos:start="273:22" pos:end="273:22">k</name></expr>]</index></name></expr>)</condition> <block pos:start="273:26" pos:end="281:13">{<block_content pos:start="275:17" pos:end="279:66">

                <expr_stmt pos:start="275:17" pos:end="275:34"><expr pos:start="275:17" pos:end="275:33"><name pos:start="275:17" pos:end="275:24"><name pos:start="275:17" pos:end="275:21">block</name><index pos:start="275:22" pos:end="275:24">[<expr pos:start="275:23" pos:end="275:23"><name pos:start="275:23" pos:end="275:23">k</name></expr>]</index></name> <operator pos:start="275:26" pos:end="275:27">*=</operator> <name pos:start="275:29" pos:end="275:33">scale</name></expr>;</expr_stmt>

                <if_stmt pos:start="277:17" pos:end="279:66"><if pos:start="277:17" pos:end="279:66">if<condition pos:start="277:19" pos:end="277:34">(<expr pos:start="277:20" pos:end="277:33"><operator pos:start="277:20" pos:end="277:20">!</operator><name pos:start="277:21" pos:end="277:33"><name pos:start="277:21" pos:end="277:21">v</name><operator pos:start="277:22" pos:end="277:23">-&gt;</operator><name pos:start="277:24" pos:end="277:33">pquantizer</name></name></expr>)</condition><block type="pseudo" pos:start="279:21" pos:end="279:66"><block_content pos:start="279:21" pos:end="279:66">

                    <expr_stmt pos:start="279:21" pos:end="279:66"><expr pos:start="279:21" pos:end="279:65"><name pos:start="279:21" pos:end="279:28"><name pos:start="279:21" pos:end="279:25">block</name><index pos:start="279:26" pos:end="279:28">[<expr pos:start="279:27" pos:end="279:27"><name pos:start="279:27" pos:end="279:27">k</name></expr>]</index></name> <operator pos:start="279:30" pos:end="279:31">+=</operator> <ternary pos:start="279:33" pos:end="279:65"><condition pos:start="279:33" pos:end="279:48"><expr pos:start="279:33" pos:end="279:46"><operator pos:start="279:33" pos:end="279:33">(</operator><name pos:start="279:34" pos:end="279:41"><name pos:start="279:34" pos:end="279:38">block</name><index pos:start="279:39" pos:end="279:41">[<expr pos:start="279:40" pos:end="279:40"><name pos:start="279:40" pos:end="279:40">k</name></expr>]</index></name> <operator pos:start="279:43" pos:end="279:43">&lt;</operator> <literal type="number" pos:start="279:45" pos:end="279:45">0</literal><operator pos:start="279:46" pos:end="279:46">)</operator></expr> ?</condition><then pos:start="279:50" pos:end="279:56"> <expr pos:start="279:50" pos:end="279:56"><operator pos:start="279:50" pos:end="279:50">-</operator><name pos:start="279:51" pos:end="279:56">mquant</name></expr> </then><else pos:start="279:58" pos:end="279:65">: <expr pos:start="279:60" pos:end="279:65"><name pos:start="279:60" pos:end="279:65">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <if_stmt pos:start="285:9" pos:end="285:28"><if pos:start="285:9" pos:end="285:28">if<condition pos:start="285:11" pos:end="285:20">(<expr pos:start="285:12" pos:end="285:19"><name pos:start="285:12" pos:end="285:19">use_pred</name></expr>)</condition><block type="pseudo" pos:start="285:22" pos:end="285:28"><block_content pos:start="285:22" pos:end="285:28"> <expr_stmt pos:start="285:22" pos:end="285:28"><expr pos:start="285:22" pos:end="285:27"><name pos:start="285:22" pos:end="285:22">i</name> <operator pos:start="285:24" pos:end="285:24">=</operator> <literal type="number" pos:start="285:26" pos:end="285:27">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="287:7" pos:end="373:5">else <block pos:start="287:12" pos:end="373:5">{<block_content pos:start="289:9" pos:end="371:9"> <comment type="line" pos:start="287:14" pos:end="287:28">// no AC coeffs</comment>

        <decl_stmt pos:start="289:9" pos:end="289:14"><decl pos:start="289:9" pos:end="289:13"><type pos:start="289:9" pos:end="289:11"><name pos:start="289:9" pos:end="289:11">int</name></type> <name pos:start="289:13" pos:end="289:13">k</name></decl>;</decl_stmt>



        <expr_stmt pos:start="293:9" pos:end="293:35"><expr pos:start="293:9" pos:end="293:34"><call pos:start="293:9" pos:end="293:34"><name pos:start="293:9" pos:end="293:14">memset</name><argument_list pos:start="293:15" pos:end="293:34">(<argument pos:start="293:16" pos:end="293:22"><expr pos:start="293:16" pos:end="293:22"><name pos:start="293:16" pos:end="293:22">ac_val2</name></expr></argument>, <argument pos:start="293:25" pos:end="293:25"><expr pos:start="293:25" pos:end="293:25"><literal type="number" pos:start="293:25" pos:end="293:25">0</literal></expr></argument>, <argument pos:start="293:28" pos:end="293:33"><expr pos:start="293:28" pos:end="293:33"><literal type="number" pos:start="293:28" pos:end="293:29">16</literal> <operator pos:start="293:31" pos:end="293:31">*</operator> <literal type="number" pos:start="293:33" pos:end="293:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="295:9" pos:end="335:9"><if pos:start="295:9" pos:end="315:9">if<condition pos:start="295:11" pos:end="295:23">(<expr pos:start="295:12" pos:end="295:22"><name pos:start="295:12" pos:end="295:22">dc_pred_dir</name></expr>)</condition> <block pos:start="295:25" pos:end="315:9">{<block_content pos:start="297:13" pos:end="313:13"><comment type="line" pos:start="295:26" pos:end="295:31">//left</comment>

            <if_stmt pos:start="297:13" pos:end="313:13"><if pos:start="297:13" pos:end="313:13">if<condition pos:start="297:15" pos:end="297:24">(<expr pos:start="297:16" pos:end="297:23"><name pos:start="297:16" pos:end="297:23">use_pred</name></expr>)</condition> <block pos:start="297:26" pos:end="313:13">{<block_content pos:start="299:17" pos:end="311:17">

                <expr_stmt pos:start="299:17" pos:end="299:47"><expr pos:start="299:17" pos:end="299:46"><call pos:start="299:17" pos:end="299:46"><name pos:start="299:17" pos:end="299:22">memcpy</name><argument_list pos:start="299:23" pos:end="299:46">(<argument pos:start="299:24" pos:end="299:30"><expr pos:start="299:24" pos:end="299:30"><name pos:start="299:24" pos:end="299:30">ac_val2</name></expr></argument>, <argument pos:start="299:33" pos:end="299:38"><expr pos:start="299:33" pos:end="299:38"><name pos:start="299:33" pos:end="299:38">ac_val</name></expr></argument>, <argument pos:start="299:41" pos:end="299:45"><expr pos:start="299:41" pos:end="299:45"><literal type="number" pos:start="299:41" pos:end="299:41">8</literal> <operator pos:start="299:43" pos:end="299:43">*</operator> <literal type="number" pos:start="299:45" pos:end="299:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="301:17" pos:end="311:17"><if pos:start="301:17" pos:end="311:17">if<condition pos:start="301:19" pos:end="301:32">(<expr pos:start="301:20" pos:end="301:31"><name pos:start="301:20" pos:end="301:21">q2</name> <operator pos:start="301:23" pos:end="301:24">&amp;&amp;</operator> <name pos:start="301:26" pos:end="301:27">q1</name><operator pos:start="301:28" pos:end="301:29">!=</operator><name pos:start="301:30" pos:end="301:31">q2</name></expr>)</condition> <block pos:start="301:34" pos:end="311:17">{<block_content pos:start="303:21" pos:end="309:93">

                    <expr_stmt pos:start="303:21" pos:end="303:70"><expr pos:start="303:21" pos:end="303:69"><name pos:start="303:21" pos:end="303:22">q1</name> <operator pos:start="303:24" pos:end="303:24">=</operator> <name pos:start="303:26" pos:end="303:27">q1</name> <operator pos:start="303:29" pos:end="303:29">*</operator> <literal type="number" pos:start="303:31" pos:end="303:33">2</literal> <operator pos:start="303:33" pos:end="303:33">+</operator> <operator pos:start="303:35" pos:end="303:35">(</operator><ternary pos:start="303:36" pos:end="303:64"><condition pos:start="303:36" pos:end="303:50"><expr pos:start="303:36" pos:end="303:48"><operator pos:start="303:36" pos:end="303:36">(</operator><name pos:start="303:37" pos:end="303:38">q1</name> <operator pos:start="303:40" pos:end="303:41">==</operator> <name pos:start="303:43" pos:end="303:47"><name pos:start="303:43" pos:end="303:43">v</name><operator pos:start="303:44" pos:end="303:45">-&gt;</operator><name pos:start="303:46" pos:end="303:47">pq</name></name><operator pos:start="303:48" pos:end="303:48">)</operator></expr> ?</condition><then pos:start="303:52" pos:end="303:60"> <expr pos:start="303:52" pos:end="303:60"><name pos:start="303:52" pos:end="303:60"><name pos:start="303:52" pos:end="303:52">v</name><operator pos:start="303:53" pos:end="303:54">-&gt;</operator><name pos:start="303:55" pos:end="303:60">halfpq</name></name></expr> </then><else pos:start="303:62" pos:end="303:64">: <expr pos:start="303:64" pos:end="303:64"><literal type="number" pos:start="303:64" pos:end="303:64">0</literal></expr></else></ternary><operator pos:start="303:65" pos:end="303:65">)</operator> <operator pos:start="303:67" pos:end="303:67">-</operator> <literal type="number" pos:start="303:69" pos:end="303:69">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="305:21" pos:end="305:70"><expr pos:start="305:21" pos:end="305:69"><name pos:start="305:21" pos:end="305:22">q2</name> <operator pos:start="305:24" pos:end="305:24">=</operator> <name pos:start="305:26" pos:end="305:27">q2</name> <operator pos:start="305:29" pos:end="305:29">*</operator> <literal type="number" pos:start="305:31" pos:end="305:33">2</literal> <operator pos:start="305:33" pos:end="305:33">+</operator> <operator pos:start="305:35" pos:end="305:35">(</operator><ternary pos:start="305:36" pos:end="305:64"><condition pos:start="305:36" pos:end="305:50"><expr pos:start="305:36" pos:end="305:48"><operator pos:start="305:36" pos:end="305:36">(</operator><name pos:start="305:37" pos:end="305:38">q2</name> <operator pos:start="305:40" pos:end="305:41">==</operator> <name pos:start="305:43" pos:end="305:47"><name pos:start="305:43" pos:end="305:43">v</name><operator pos:start="305:44" pos:end="305:45">-&gt;</operator><name pos:start="305:46" pos:end="305:47">pq</name></name><operator pos:start="305:48" pos:end="305:48">)</operator></expr> ?</condition><then pos:start="305:52" pos:end="305:60"> <expr pos:start="305:52" pos:end="305:60"><name pos:start="305:52" pos:end="305:60"><name pos:start="305:52" pos:end="305:52">v</name><operator pos:start="305:53" pos:end="305:54">-&gt;</operator><name pos:start="305:55" pos:end="305:60">halfpq</name></name></expr> </then><else pos:start="305:62" pos:end="305:64">: <expr pos:start="305:64" pos:end="305:64"><literal type="number" pos:start="305:64" pos:end="305:64">0</literal></expr></else></ternary><operator pos:start="305:65" pos:end="305:65">)</operator> <operator pos:start="305:67" pos:end="305:67">-</operator> <literal type="number" pos:start="305:69" pos:end="305:69">1</literal></expr>;</expr_stmt>

                    <for pos:start="307:21" pos:end="309:93">for<control pos:start="307:24" pos:end="307:42">(<init pos:start="307:25" pos:end="307:30"><expr pos:start="307:25" pos:end="307:29"><name pos:start="307:25" pos:end="307:25">k</name> <operator pos:start="307:27" pos:end="307:27">=</operator> <literal type="number" pos:start="307:29" pos:end="307:29">1</literal></expr>;</init> <condition pos:start="307:32" pos:end="307:37"><expr pos:start="307:32" pos:end="307:36"><name pos:start="307:32" pos:end="307:32">k</name> <operator pos:start="307:34" pos:end="307:34">&lt;</operator> <literal type="number" pos:start="307:36" pos:end="307:36">8</literal></expr>;</condition> <incr pos:start="307:39" pos:end="307:41"><expr pos:start="307:39" pos:end="307:41"><name pos:start="307:39" pos:end="307:39">k</name><operator pos:start="307:40" pos:end="307:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="309:25" pos:end="309:93"><block_content pos:start="309:25" pos:end="309:93">

                        <expr_stmt pos:start="309:25" pos:end="309:93"><expr pos:start="309:25" pos:end="309:92"><name pos:start="309:25" pos:end="309:34"><name pos:start="309:25" pos:end="309:31">ac_val2</name><index pos:start="309:32" pos:end="309:34">[<expr pos:start="309:33" pos:end="309:33"><name pos:start="309:33" pos:end="309:33">k</name></expr>]</index></name> <operator pos:start="309:36" pos:end="309:36">=</operator> <operator pos:start="309:38" pos:end="309:38">(</operator><name pos:start="309:39" pos:end="309:48"><name pos:start="309:39" pos:end="309:45">ac_val2</name><index pos:start="309:46" pos:end="309:48">[<expr pos:start="309:47" pos:end="309:47"><name pos:start="309:47" pos:end="309:47">k</name></expr>]</index></name> <operator pos:start="309:50" pos:end="309:50">*</operator> <name pos:start="309:52" pos:end="309:53">q2</name> <operator pos:start="309:55" pos:end="309:55">*</operator> <name pos:start="309:57" pos:end="309:75"><name pos:start="309:57" pos:end="309:67">vc1_dqscale</name><index pos:start="309:68" pos:end="309:75">[<expr pos:start="309:69" pos:end="309:74"><name pos:start="309:69" pos:end="309:70">q1</name> <operator pos:start="309:72" pos:end="309:72">-</operator> <literal type="number" pos:start="309:74" pos:end="309:74">1</literal></expr>]</index></name> <operator pos:start="309:77" pos:end="309:77">+</operator> <literal type="number" pos:start="309:79" pos:end="309:85">0x20000</literal><operator pos:start="309:86" pos:end="309:86">)</operator> <operator pos:start="309:88" pos:end="309:89">&gt;&gt;</operator> <literal type="number" pos:start="309:91" pos:end="309:92">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="315:11" pos:end="335:9">else <block pos:start="315:16" pos:end="335:9">{<block_content pos:start="317:13" pos:end="333:13"><comment type="line" pos:start="315:17" pos:end="315:21">//top</comment>

            <if_stmt pos:start="317:13" pos:end="333:13"><if pos:start="317:13" pos:end="333:13">if<condition pos:start="317:15" pos:end="317:24">(<expr pos:start="317:16" pos:end="317:23"><name pos:start="317:16" pos:end="317:23">use_pred</name></expr>)</condition> <block pos:start="317:26" pos:end="333:13">{<block_content pos:start="319:17" pos:end="331:17">

                <expr_stmt pos:start="319:17" pos:end="319:55"><expr pos:start="319:17" pos:end="319:54"><call pos:start="319:17" pos:end="319:54"><name pos:start="319:17" pos:end="319:22">memcpy</name><argument_list pos:start="319:23" pos:end="319:54">(<argument pos:start="319:24" pos:end="319:34"><expr pos:start="319:24" pos:end="319:34"><name pos:start="319:24" pos:end="319:30">ac_val2</name> <operator pos:start="319:32" pos:end="319:32">+</operator> <literal type="number" pos:start="319:34" pos:end="319:34">8</literal></expr></argument>, <argument pos:start="319:37" pos:end="319:46"><expr pos:start="319:37" pos:end="319:46"><name pos:start="319:37" pos:end="319:42">ac_val</name> <operator pos:start="319:44" pos:end="319:44">+</operator> <literal type="number" pos:start="319:46" pos:end="319:46">8</literal></expr></argument>, <argument pos:start="319:49" pos:end="319:53"><expr pos:start="319:49" pos:end="319:53"><literal type="number" pos:start="319:49" pos:end="319:49">8</literal> <operator pos:start="319:51" pos:end="319:51">*</operator> <literal type="number" pos:start="319:53" pos:end="319:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="321:17" pos:end="331:17"><if pos:start="321:17" pos:end="331:17">if<condition pos:start="321:19" pos:end="321:32">(<expr pos:start="321:20" pos:end="321:31"><name pos:start="321:20" pos:end="321:21">q2</name> <operator pos:start="321:23" pos:end="321:24">&amp;&amp;</operator> <name pos:start="321:26" pos:end="321:27">q1</name><operator pos:start="321:28" pos:end="321:29">!=</operator><name pos:start="321:30" pos:end="321:31">q2</name></expr>)</condition> <block pos:start="321:34" pos:end="331:17">{<block_content pos:start="323:21" pos:end="329:101">

                    <expr_stmt pos:start="323:21" pos:end="323:70"><expr pos:start="323:21" pos:end="323:69"><name pos:start="323:21" pos:end="323:22">q1</name> <operator pos:start="323:24" pos:end="323:24">=</operator> <name pos:start="323:26" pos:end="323:27">q1</name> <operator pos:start="323:29" pos:end="323:29">*</operator> <literal type="number" pos:start="323:31" pos:end="323:33">2</literal> <operator pos:start="323:33" pos:end="323:33">+</operator> <operator pos:start="323:35" pos:end="323:35">(</operator><ternary pos:start="323:36" pos:end="323:64"><condition pos:start="323:36" pos:end="323:50"><expr pos:start="323:36" pos:end="323:48"><operator pos:start="323:36" pos:end="323:36">(</operator><name pos:start="323:37" pos:end="323:38">q1</name> <operator pos:start="323:40" pos:end="323:41">==</operator> <name pos:start="323:43" pos:end="323:47"><name pos:start="323:43" pos:end="323:43">v</name><operator pos:start="323:44" pos:end="323:45">-&gt;</operator><name pos:start="323:46" pos:end="323:47">pq</name></name><operator pos:start="323:48" pos:end="323:48">)</operator></expr> ?</condition><then pos:start="323:52" pos:end="323:60"> <expr pos:start="323:52" pos:end="323:60"><name pos:start="323:52" pos:end="323:60"><name pos:start="323:52" pos:end="323:52">v</name><operator pos:start="323:53" pos:end="323:54">-&gt;</operator><name pos:start="323:55" pos:end="323:60">halfpq</name></name></expr> </then><else pos:start="323:62" pos:end="323:64">: <expr pos:start="323:64" pos:end="323:64"><literal type="number" pos:start="323:64" pos:end="323:64">0</literal></expr></else></ternary><operator pos:start="323:65" pos:end="323:65">)</operator> <operator pos:start="323:67" pos:end="323:67">-</operator> <literal type="number" pos:start="323:69" pos:end="323:69">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="325:21" pos:end="325:70"><expr pos:start="325:21" pos:end="325:69"><name pos:start="325:21" pos:end="325:22">q2</name> <operator pos:start="325:24" pos:end="325:24">=</operator> <name pos:start="325:26" pos:end="325:27">q2</name> <operator pos:start="325:29" pos:end="325:29">*</operator> <literal type="number" pos:start="325:31" pos:end="325:33">2</literal> <operator pos:start="325:33" pos:end="325:33">+</operator> <operator pos:start="325:35" pos:end="325:35">(</operator><ternary pos:start="325:36" pos:end="325:64"><condition pos:start="325:36" pos:end="325:50"><expr pos:start="325:36" pos:end="325:48"><operator pos:start="325:36" pos:end="325:36">(</operator><name pos:start="325:37" pos:end="325:38">q2</name> <operator pos:start="325:40" pos:end="325:41">==</operator> <name pos:start="325:43" pos:end="325:47"><name pos:start="325:43" pos:end="325:43">v</name><operator pos:start="325:44" pos:end="325:45">-&gt;</operator><name pos:start="325:46" pos:end="325:47">pq</name></name><operator pos:start="325:48" pos:end="325:48">)</operator></expr> ?</condition><then pos:start="325:52" pos:end="325:60"> <expr pos:start="325:52" pos:end="325:60"><name pos:start="325:52" pos:end="325:60"><name pos:start="325:52" pos:end="325:52">v</name><operator pos:start="325:53" pos:end="325:54">-&gt;</operator><name pos:start="325:55" pos:end="325:60">halfpq</name></name></expr> </then><else pos:start="325:62" pos:end="325:64">: <expr pos:start="325:64" pos:end="325:64"><literal type="number" pos:start="325:64" pos:end="325:64">0</literal></expr></else></ternary><operator pos:start="325:65" pos:end="325:65">)</operator> <operator pos:start="325:67" pos:end="325:67">-</operator> <literal type="number" pos:start="325:69" pos:end="325:69">1</literal></expr>;</expr_stmt>

                    <for pos:start="327:21" pos:end="329:101">for<control pos:start="327:24" pos:end="327:42">(<init pos:start="327:25" pos:end="327:30"><expr pos:start="327:25" pos:end="327:29"><name pos:start="327:25" pos:end="327:25">k</name> <operator pos:start="327:27" pos:end="327:27">=</operator> <literal type="number" pos:start="327:29" pos:end="327:29">1</literal></expr>;</init> <condition pos:start="327:32" pos:end="327:37"><expr pos:start="327:32" pos:end="327:36"><name pos:start="327:32" pos:end="327:32">k</name> <operator pos:start="327:34" pos:end="327:34">&lt;</operator> <literal type="number" pos:start="327:36" pos:end="327:36">8</literal></expr>;</condition> <incr pos:start="327:39" pos:end="327:41"><expr pos:start="327:39" pos:end="327:41"><name pos:start="327:39" pos:end="327:39">k</name><operator pos:start="327:40" pos:end="327:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="329:25" pos:end="329:101"><block_content pos:start="329:25" pos:end="329:101">

                        <expr_stmt pos:start="329:25" pos:end="329:101"><expr pos:start="329:25" pos:end="329:100"><name pos:start="329:25" pos:end="329:38"><name pos:start="329:25" pos:end="329:31">ac_val2</name><index pos:start="329:32" pos:end="329:38">[<expr pos:start="329:33" pos:end="329:37"><name pos:start="329:33" pos:end="329:33">k</name> <operator pos:start="329:35" pos:end="329:35">+</operator> <literal type="number" pos:start="329:37" pos:end="329:37">8</literal></expr>]</index></name> <operator pos:start="329:40" pos:end="329:40">=</operator> <operator pos:start="329:42" pos:end="329:42">(</operator><name pos:start="329:43" pos:end="329:56"><name pos:start="329:43" pos:end="329:49">ac_val2</name><index pos:start="329:50" pos:end="329:56">[<expr pos:start="329:51" pos:end="329:55"><name pos:start="329:51" pos:end="329:51">k</name> <operator pos:start="329:53" pos:end="329:53">+</operator> <literal type="number" pos:start="329:55" pos:end="329:55">8</literal></expr>]</index></name> <operator pos:start="329:58" pos:end="329:58">*</operator> <name pos:start="329:60" pos:end="329:61">q2</name> <operator pos:start="329:63" pos:end="329:63">*</operator> <name pos:start="329:65" pos:end="329:83"><name pos:start="329:65" pos:end="329:75">vc1_dqscale</name><index pos:start="329:76" pos:end="329:83">[<expr pos:start="329:77" pos:end="329:82"><name pos:start="329:77" pos:end="329:78">q1</name> <operator pos:start="329:80" pos:end="329:80">-</operator> <literal type="number" pos:start="329:82" pos:end="329:82">1</literal></expr>]</index></name> <operator pos:start="329:85" pos:end="329:85">+</operator> <literal type="number" pos:start="329:87" pos:end="329:93">0x20000</literal><operator pos:start="329:94" pos:end="329:94">)</operator> <operator pos:start="329:96" pos:end="329:97">&gt;&gt;</operator> <literal type="number" pos:start="329:99" pos:end="329:100">18</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="339:9" pos:end="339:43">/* apply AC prediction if needed */</comment>

        <if_stmt pos:start="341:9" pos:end="371:9"><if pos:start="341:9" pos:end="371:9">if<condition pos:start="341:11" pos:end="341:20">(<expr pos:start="341:12" pos:end="341:19"><name pos:start="341:12" pos:end="341:19">use_pred</name></expr>)</condition> <block pos:start="341:22" pos:end="371:9">{<block_content pos:start="343:13" pos:end="369:19">

            <if_stmt pos:start="343:13" pos:end="367:13"><if pos:start="343:13" pos:end="355:13">if<condition pos:start="343:15" pos:end="343:27">(<expr pos:start="343:16" pos:end="343:26"><name pos:start="343:16" pos:end="343:26">dc_pred_dir</name></expr>)</condition> <block pos:start="343:29" pos:end="355:13">{<block_content pos:start="345:17" pos:end="353:17"> <comment type="line" pos:start="343:31" pos:end="343:36">//left</comment>

                <for pos:start="345:17" pos:end="353:17">for<control pos:start="345:20" pos:end="345:38">(<init pos:start="345:21" pos:end="345:26"><expr pos:start="345:21" pos:end="345:25"><name pos:start="345:21" pos:end="345:21">k</name> <operator pos:start="345:23" pos:end="345:23">=</operator> <literal type="number" pos:start="345:25" pos:end="345:25">1</literal></expr>;</init> <condition pos:start="345:28" pos:end="345:33"><expr pos:start="345:28" pos:end="345:32"><name pos:start="345:28" pos:end="345:28">k</name> <operator pos:start="345:30" pos:end="345:30">&lt;</operator> <literal type="number" pos:start="345:32" pos:end="345:32">8</literal></expr>;</condition> <incr pos:start="345:35" pos:end="345:37"><expr pos:start="345:35" pos:end="345:37"><name pos:start="345:35" pos:end="345:35">k</name><operator pos:start="345:36" pos:end="345:37">++</operator></expr></incr>)</control> <block pos:start="345:40" pos:end="353:17">{<block_content pos:start="347:21" pos:end="351:80">

                    <expr_stmt pos:start="347:21" pos:end="347:55"><expr pos:start="347:21" pos:end="347:54"><name pos:start="347:21" pos:end="347:33"><name pos:start="347:21" pos:end="347:25">block</name><index pos:start="347:26" pos:end="347:33">[<expr pos:start="347:27" pos:end="347:32"><name pos:start="347:27" pos:end="347:27">k</name> <operator pos:start="347:29" pos:end="347:30">&lt;&lt;</operator> <literal type="number" pos:start="347:32" pos:end="347:32">3</literal></expr>]</index></name> <operator pos:start="347:35" pos:end="347:35">=</operator> <name pos:start="347:37" pos:end="347:46"><name pos:start="347:37" pos:end="347:43">ac_val2</name><index pos:start="347:44" pos:end="347:46">[<expr pos:start="347:45" pos:end="347:45"><name pos:start="347:45" pos:end="347:45">k</name></expr>]</index></name> <operator pos:start="347:48" pos:end="347:48">*</operator> <name pos:start="347:50" pos:end="347:54">scale</name></expr>;</expr_stmt>

                    <if_stmt pos:start="349:21" pos:end="351:80"><if pos:start="349:21" pos:end="351:80">if<condition pos:start="349:23" pos:end="349:55">(<expr pos:start="349:24" pos:end="349:54"><operator pos:start="349:24" pos:end="349:24">!</operator><name pos:start="349:25" pos:end="349:37"><name pos:start="349:25" pos:end="349:25">v</name><operator pos:start="349:26" pos:end="349:27">-&gt;</operator><name pos:start="349:28" pos:end="349:37">pquantizer</name></name> <operator pos:start="349:39" pos:end="349:40">&amp;&amp;</operator> <name pos:start="349:42" pos:end="349:54"><name pos:start="349:42" pos:end="349:46">block</name><index pos:start="349:47" pos:end="349:54">[<expr pos:start="349:48" pos:end="349:53"><name pos:start="349:48" pos:end="349:48">k</name> <operator pos:start="349:50" pos:end="349:51">&lt;&lt;</operator> <literal type="number" pos:start="349:53" pos:end="349:53">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="351:25" pos:end="351:80"><block_content pos:start="351:25" pos:end="351:80">

                        <expr_stmt pos:start="351:25" pos:end="351:80"><expr pos:start="351:25" pos:end="351:79"><name pos:start="351:25" pos:end="351:37"><name pos:start="351:25" pos:end="351:29">block</name><index pos:start="351:30" pos:end="351:37">[<expr pos:start="351:31" pos:end="351:36"><name pos:start="351:31" pos:end="351:31">k</name> <operator pos:start="351:33" pos:end="351:34">&lt;&lt;</operator> <literal type="number" pos:start="351:36" pos:end="351:36">3</literal></expr>]</index></name> <operator pos:start="351:39" pos:end="351:40">+=</operator> <ternary pos:start="351:42" pos:end="351:79"><condition pos:start="351:42" pos:end="351:62"><expr pos:start="351:42" pos:end="351:60"><operator pos:start="351:42" pos:end="351:42">(</operator><name pos:start="351:43" pos:end="351:55"><name pos:start="351:43" pos:end="351:47">block</name><index pos:start="351:48" pos:end="351:55">[<expr pos:start="351:49" pos:end="351:54"><name pos:start="351:49" pos:end="351:49">k</name> <operator pos:start="351:51" pos:end="351:52">&lt;&lt;</operator> <literal type="number" pos:start="351:54" pos:end="351:54">3</literal></expr>]</index></name> <operator pos:start="351:57" pos:end="351:57">&lt;</operator> <literal type="number" pos:start="351:59" pos:end="351:59">0</literal><operator pos:start="351:60" pos:end="351:60">)</operator></expr> ?</condition><then pos:start="351:64" pos:end="351:70"> <expr pos:start="351:64" pos:end="351:70"><operator pos:start="351:64" pos:end="351:64">-</operator><name pos:start="351:65" pos:end="351:70">mquant</name></expr> </then><else pos:start="351:72" pos:end="351:79">: <expr pos:start="351:74" pos:end="351:79"><name pos:start="351:74" pos:end="351:79">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="355:15" pos:end="367:13">else <block pos:start="355:20" pos:end="367:13">{<block_content pos:start="357:17" pos:end="365:17"> <comment type="line" pos:start="355:22" pos:end="355:26">//top</comment>

                <for pos:start="357:17" pos:end="365:17">for<control pos:start="357:20" pos:end="357:38">(<init pos:start="357:21" pos:end="357:26"><expr pos:start="357:21" pos:end="357:25"><name pos:start="357:21" pos:end="357:21">k</name> <operator pos:start="357:23" pos:end="357:23">=</operator> <literal type="number" pos:start="357:25" pos:end="357:25">1</literal></expr>;</init> <condition pos:start="357:28" pos:end="357:33"><expr pos:start="357:28" pos:end="357:32"><name pos:start="357:28" pos:end="357:28">k</name> <operator pos:start="357:30" pos:end="357:30">&lt;</operator> <literal type="number" pos:start="357:32" pos:end="357:32">8</literal></expr>;</condition> <incr pos:start="357:35" pos:end="357:37"><expr pos:start="357:35" pos:end="357:37"><name pos:start="357:35" pos:end="357:35">k</name><operator pos:start="357:36" pos:end="357:37">++</operator></expr></incr>)</control> <block pos:start="357:40" pos:end="365:17">{<block_content pos:start="359:21" pos:end="363:70">

                    <expr_stmt pos:start="359:21" pos:end="359:54"><expr pos:start="359:21" pos:end="359:53"><name pos:start="359:21" pos:end="359:28"><name pos:start="359:21" pos:end="359:25">block</name><index pos:start="359:26" pos:end="359:28">[<expr pos:start="359:27" pos:end="359:27"><name pos:start="359:27" pos:end="359:27">k</name></expr>]</index></name> <operator pos:start="359:30" pos:end="359:30">=</operator> <name pos:start="359:32" pos:end="359:45"><name pos:start="359:32" pos:end="359:38">ac_val2</name><index pos:start="359:39" pos:end="359:45">[<expr pos:start="359:40" pos:end="359:44"><name pos:start="359:40" pos:end="359:40">k</name> <operator pos:start="359:42" pos:end="359:42">+</operator> <literal type="number" pos:start="359:44" pos:end="359:44">8</literal></expr>]</index></name> <operator pos:start="359:47" pos:end="359:47">*</operator> <name pos:start="359:49" pos:end="359:53">scale</name></expr>;</expr_stmt>

                    <if_stmt pos:start="361:21" pos:end="363:70"><if pos:start="361:21" pos:end="363:70">if<condition pos:start="361:23" pos:end="361:50">(<expr pos:start="361:24" pos:end="361:49"><operator pos:start="361:24" pos:end="361:24">!</operator><name pos:start="361:25" pos:end="361:37"><name pos:start="361:25" pos:end="361:25">v</name><operator pos:start="361:26" pos:end="361:27">-&gt;</operator><name pos:start="361:28" pos:end="361:37">pquantizer</name></name> <operator pos:start="361:39" pos:end="361:40">&amp;&amp;</operator> <name pos:start="361:42" pos:end="361:49"><name pos:start="361:42" pos:end="361:46">block</name><index pos:start="361:47" pos:end="361:49">[<expr pos:start="361:48" pos:end="361:48"><name pos:start="361:48" pos:end="361:48">k</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="363:25" pos:end="363:70"><block_content pos:start="363:25" pos:end="363:70">

                        <expr_stmt pos:start="363:25" pos:end="363:70"><expr pos:start="363:25" pos:end="363:69"><name pos:start="363:25" pos:end="363:32"><name pos:start="363:25" pos:end="363:29">block</name><index pos:start="363:30" pos:end="363:32">[<expr pos:start="363:31" pos:end="363:31"><name pos:start="363:31" pos:end="363:31">k</name></expr>]</index></name> <operator pos:start="363:34" pos:end="363:35">+=</operator> <ternary pos:start="363:37" pos:end="363:69"><condition pos:start="363:37" pos:end="363:52"><expr pos:start="363:37" pos:end="363:50"><operator pos:start="363:37" pos:end="363:37">(</operator><name pos:start="363:38" pos:end="363:45"><name pos:start="363:38" pos:end="363:42">block</name><index pos:start="363:43" pos:end="363:45">[<expr pos:start="363:44" pos:end="363:44"><name pos:start="363:44" pos:end="363:44">k</name></expr>]</index></name> <operator pos:start="363:47" pos:end="363:47">&lt;</operator> <literal type="number" pos:start="363:49" pos:end="363:49">0</literal><operator pos:start="363:50" pos:end="363:50">)</operator></expr> ?</condition><then pos:start="363:54" pos:end="363:60"> <expr pos:start="363:54" pos:end="363:60"><operator pos:start="363:54" pos:end="363:54">-</operator><name pos:start="363:55" pos:end="363:60">mquant</name></expr> </then><else pos:start="363:62" pos:end="363:69">: <expr pos:start="363:64" pos:end="363:69"><name pos:start="363:64" pos:end="363:69">mquant</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:19"><expr pos:start="369:13" pos:end="369:18"><name pos:start="369:13" pos:end="369:13">i</name> <operator pos:start="369:15" pos:end="369:15">=</operator> <literal type="number" pos:start="369:17" pos:end="369:18">63</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:31"><expr pos:start="375:5" pos:end="375:30"><name pos:start="375:5" pos:end="375:26"><name pos:start="375:5" pos:end="375:5">s</name><operator pos:start="375:6" pos:end="375:7">-&gt;</operator><name pos:start="375:8" pos:end="375:23">block_last_index</name><index pos:start="375:24" pos:end="375:26">[<expr pos:start="375:25" pos:end="375:25"><name pos:start="375:25" pos:end="375:25">n</name></expr>]</index></name> <operator pos:start="375:28" pos:end="375:28">=</operator> <name pos:start="375:30" pos:end="375:30">i</name></expr>;</expr_stmt>



    <return pos:start="379:5" pos:end="379:13">return <expr pos:start="379:12" pos:end="379:12"><literal type="number" pos:start="379:12" pos:end="379:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
