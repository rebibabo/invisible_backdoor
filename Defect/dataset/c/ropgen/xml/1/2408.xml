<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2408.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">qemu_ram_remap</name><parameter_list pos:start="1:20" pos:end="1:55">(<parameter pos:start="1:21" pos:end="1:35"><decl pos:start="1:21" pos:end="1:35"><type pos:start="1:21" pos:end="1:35"><name pos:start="1:21" pos:end="1:30">ram_addr_t</name></type> <name pos:start="1:32" pos:end="1:35">addr</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:47">ram_addr_t</name></type> <name pos:start="1:49" pos:end="1:54">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:5">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:19">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">ram_addr_t</name></type> <name pos:start="7:16" pos:end="7:21">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:14">area</name></decl>, <decl pos:start="11:17" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:22">vaddr</name></decl>;</decl_stmt>



    <macro pos:start="15:5" pos:end="15:48"><name pos:start="15:5" pos:end="15:17">QLIST_FOREACH</name><argument_list pos:start="15:18" pos:end="15:48">(<argument pos:start="15:19" pos:end="15:23">block</argument>, <argument pos:start="15:26" pos:end="15:41">&amp;ram_list.blocks</argument>, <argument pos:start="15:44" pos:end="15:47">next</argument>)</argument_list></macro> <block pos:start="15:50" pos:end="107:5">{<block_content pos:start="17:9" pos:end="105:9">

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><name pos:start="17:9" pos:end="17:14">offset</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:21">addr</name> <operator pos:start="17:23" pos:end="17:23">-</operator> <name pos:start="17:25" pos:end="17:37"><name pos:start="17:25" pos:end="17:29">block</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:37">offset</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="105:9"><if pos:start="19:9" pos:end="105:9">if <condition pos:start="19:12" pos:end="19:35">(<expr pos:start="19:13" pos:end="19:34"><name pos:start="19:13" pos:end="19:18">offset</name> <operator pos:start="19:20" pos:end="19:20">&lt;</operator> <name pos:start="19:22" pos:end="19:34"><name pos:start="19:22" pos:end="19:26">block</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:34">length</name></name></expr>)</condition> <block pos:start="19:37" pos:end="105:9">{<block_content pos:start="21:13" pos:end="103:19">

            <expr_stmt pos:start="21:13" pos:end="21:41"><expr pos:start="21:13" pos:end="21:40"><name pos:start="21:13" pos:end="21:17">vaddr</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:31"><name pos:start="21:21" pos:end="21:25">block</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:31">host</name></name> <operator pos:start="21:33" pos:end="21:33">+</operator> <name pos:start="21:35" pos:end="21:40">offset</name></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="101:13"><if pos:start="23:13" pos:end="27:13">if <condition pos:start="23:16" pos:end="23:49">(<expr pos:start="23:17" pos:end="23:48"><name pos:start="23:17" pos:end="23:28"><name pos:start="23:17" pos:end="23:21">block</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:28">flags</name></name> <operator pos:start="23:30" pos:end="23:30">&amp;</operator> <name pos:start="23:32" pos:end="23:48">RAM_PREALLOC_MASK</name></expr>)</condition> <block pos:start="23:51" pos:end="27:13">{<block_content pos:start="25:17" pos:end="25:17">

                <empty_stmt pos:start="25:17" pos:end="25:17">;</empty_stmt>

            </block_content>}</block></if> <else pos:start="27:15" pos:end="101:13">else <block pos:start="27:20" pos:end="101:13">{<block_content pos:start="29:17" pos:end="99:65">

                <expr_stmt pos:start="29:17" pos:end="29:34"><expr pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:21">flags</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:33">MAP_FIXED</name></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:38"><expr pos:start="31:17" pos:end="31:37"><call pos:start="31:17" pos:end="31:37"><name pos:start="31:17" pos:end="31:22">munmap</name><argument_list pos:start="31:23" pos:end="31:37">(<argument pos:start="31:24" pos:end="31:28"><expr pos:start="31:24" pos:end="31:28"><name pos:start="31:24" pos:end="31:28">vaddr</name></expr></argument>, <argument pos:start="31:31" pos:end="31:36"><expr pos:start="31:31" pos:end="31:36"><name pos:start="31:31" pos:end="31:36">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="33:17" pos:end="87:17"><if pos:start="33:17" pos:end="68:17">if <condition pos:start="33:20" pos:end="33:29">(<expr pos:start="33:21" pos:end="33:28"><name pos:start="33:21" pos:end="33:28">mem_path</name></expr>)</condition> <block pos:start="33:31" pos:end="68:17">{<block_content pos:start="37:21" pos:end="67:0">

<cpp:if pos:start="35:1" pos:end="35:48">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:48"><call pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:22">(<argument pos:start="35:13" pos:end="35:21"><expr pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:21">__linux__</name></expr></argument>)</argument_list></call> <operator pos:start="35:24" pos:end="35:25">&amp;&amp;</operator> <operator pos:start="35:27" pos:end="35:27">!</operator><call pos:start="35:28" pos:end="35:48"><name pos:start="35:28" pos:end="35:34">defined</name><argument_list pos:start="35:35" pos:end="35:48">(<argument pos:start="35:36" pos:end="35:47"><expr pos:start="35:36" pos:end="35:47"><name pos:start="35:36" pos:end="35:47">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <if_stmt pos:start="37:21" pos:end="67:0"><if pos:start="37:21" pos:end="54:21">if <condition pos:start="37:24" pos:end="37:34">(<expr pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:29">block</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:33">fd</name></name></expr>)</condition> <block pos:start="37:36" pos:end="54:21">{<block_content pos:start="41:25" pos:end="52:62">

<cpp:ifdef pos:start="39:1" pos:end="39:19">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:19">MAP_POPULATE</name></cpp:ifdef>

                        <expr_stmt pos:start="41:25" pos:end="43:40"><expr pos:start="41:25" pos:end="43:39"><name pos:start="41:25" pos:end="41:29">flags</name> <operator pos:start="41:31" pos:end="41:32">|=</operator> <ternary pos:start="41:34" pos:end="43:39"><condition pos:start="41:34" pos:end="41:47"><expr pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:45">mem_prealloc</name></expr> ?</condition><then pos:start="41:49" pos:end="41:73"> <expr pos:start="41:49" pos:end="41:73"><name pos:start="41:49" pos:end="41:60">MAP_POPULATE</name> <operator pos:start="41:62" pos:end="41:62">|</operator> <name pos:start="41:64" pos:end="41:73">MAP_SHARED</name></expr> </then><else pos:start="41:75" pos:end="43:39">:

                            <expr pos:start="43:29" pos:end="43:39"><name pos:start="43:29" pos:end="43:39">MAP_PRIVATE</name></expr></else></ternary></expr>;</expr_stmt>


                        <expr_stmt pos:start="46:25" pos:end="49:0"><expr pos:start="46:25" pos:end="46:44"><name pos:start="46:25" pos:end="46:29">flags</name> <operator pos:start="46:31" pos:end="46:32">|=</operator> <name pos:start="46:34" pos:end="46:44">MAP_PRIVATE</name></expr>;</expr_stmt>

<cpp:endif pos:start="48:1" pos:end="48:6">#<cpp:directive pos:start="48:2" pos:end="48:6">endif</cpp:directive></cpp:endif>

                        <expr_stmt pos:start="50:25" pos:end="52:62"><expr pos:start="50:25" pos:end="52:61"><name pos:start="50:25" pos:end="50:28">area</name> <operator pos:start="50:30" pos:end="50:30">=</operator> <call pos:start="50:32" pos:end="52:61"><name pos:start="50:32" pos:end="50:35">mmap</name><argument_list pos:start="50:36" pos:end="52:61">(<argument pos:start="50:37" pos:end="50:41"><expr pos:start="50:37" pos:end="50:41"><name pos:start="50:37" pos:end="50:41">vaddr</name></expr></argument>, <argument pos:start="50:44" pos:end="50:49"><expr pos:start="50:44" pos:end="50:49"><name pos:start="50:44" pos:end="50:49">length</name></expr></argument>, <argument pos:start="50:52" pos:end="50:73"><expr pos:start="50:52" pos:end="50:73"><name pos:start="50:52" pos:end="50:60">PROT_READ</name> <operator pos:start="50:62" pos:end="50:62">|</operator> <name pos:start="50:64" pos:end="50:73">PROT_WRITE</name></expr></argument>,

                                    <argument pos:start="52:37" pos:end="52:41"><expr pos:start="52:37" pos:end="52:41"><name pos:start="52:37" pos:end="52:41">flags</name></expr></argument>, <argument pos:start="52:44" pos:end="52:52"><expr pos:start="52:44" pos:end="52:52"><name pos:start="52:44" pos:end="52:52"><name pos:start="52:44" pos:end="52:48">block</name><operator pos:start="52:49" pos:end="52:50">-&gt;</operator><name pos:start="52:51" pos:end="52:52">fd</name></name></expr></argument>, <argument pos:start="52:55" pos:end="52:60"><expr pos:start="52:55" pos:end="52:60"><name pos:start="52:55" pos:end="52:60">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="54:23" pos:end="67:0">else <block pos:start="54:28" pos:end="67:0">{<block_content pos:start="56:25" pos:end="60:50">

                        <expr_stmt pos:start="56:25" pos:end="56:61"><expr pos:start="56:25" pos:end="56:60"><name pos:start="56:25" pos:end="56:29">flags</name> <operator pos:start="56:31" pos:end="56:32">|=</operator> <name pos:start="56:34" pos:end="56:44">MAP_PRIVATE</name> <operator pos:start="56:46" pos:end="56:46">|</operator> <name pos:start="56:48" pos:end="56:60">MAP_ANONYMOUS</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="58:25" pos:end="60:50"><expr pos:start="58:25" pos:end="60:49"><name pos:start="58:25" pos:end="58:28">area</name> <operator pos:start="58:30" pos:end="58:30">=</operator> <call pos:start="58:32" pos:end="60:49"><name pos:start="58:32" pos:end="58:35">mmap</name><argument_list pos:start="58:36" pos:end="60:49">(<argument pos:start="58:37" pos:end="58:41"><expr pos:start="58:37" pos:end="58:41"><name pos:start="58:37" pos:end="58:41">vaddr</name></expr></argument>, <argument pos:start="58:44" pos:end="58:49"><expr pos:start="58:44" pos:end="58:49"><name pos:start="58:44" pos:end="58:49">length</name></expr></argument>, <argument pos:start="58:52" pos:end="58:73"><expr pos:start="58:52" pos:end="58:73"><name pos:start="58:52" pos:end="58:60">PROT_READ</name> <operator pos:start="58:62" pos:end="58:62">|</operator> <name pos:start="58:64" pos:end="58:73">PROT_WRITE</name></expr></argument>,

                                    <argument pos:start="60:37" pos:end="60:41"><expr pos:start="60:37" pos:end="60:41"><name pos:start="60:37" pos:end="60:41">flags</name></expr></argument>, <argument pos:start="60:44" pos:end="60:45"><expr pos:start="60:44" pos:end="60:45"><operator pos:start="60:44" pos:end="60:44">-</operator><literal type="number" pos:start="60:45" pos:end="60:45">1</literal></expr></argument>, <argument pos:start="60:48" pos:end="60:48"><expr pos:start="60:48" pos:end="60:48"><literal type="number" pos:start="60:48" pos:end="60:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



<cpp:endif pos:start="66:1" pos:end="66:6">#<cpp:directive pos:start="66:2" pos:end="66:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if> <else pos:start="68:19" pos:end="87:17">else <block pos:start="68:24" pos:end="87:17">{<block_content pos:start="72:21" pos:end="86:0">

<cpp:if pos:start="70:1" pos:end="70:48">#<cpp:directive pos:start="70:2" pos:end="70:3">if</cpp:directive> <expr pos:start="70:5" pos:end="70:48"><call pos:start="70:5" pos:end="70:25"><name pos:start="70:5" pos:end="70:11">defined</name><argument_list pos:start="70:12" pos:end="70:25">(<argument pos:start="70:13" pos:end="70:24"><expr pos:start="70:13" pos:end="70:24"><name pos:start="70:13" pos:end="70:24">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="70:27" pos:end="70:28">&amp;&amp;</operator> <call pos:start="70:30" pos:end="70:48"><name pos:start="70:30" pos:end="70:36">defined</name><argument_list pos:start="70:37" pos:end="70:48">(<argument pos:start="70:38" pos:end="70:47"><expr pos:start="70:38" pos:end="70:47"><name pos:start="70:38" pos:end="70:47">CONFIG_KVM</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <expr_stmt pos:start="72:21" pos:end="72:56"><expr pos:start="72:21" pos:end="72:55"><name pos:start="72:21" pos:end="72:25">flags</name> <operator pos:start="72:27" pos:end="72:28">|=</operator> <name pos:start="72:30" pos:end="72:39">MAP_SHARED</name> <operator pos:start="72:41" pos:end="72:41">|</operator> <name pos:start="72:43" pos:end="72:55">MAP_ANONYMOUS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="74:21" pos:end="76:46"><expr pos:start="74:21" pos:end="76:45"><name pos:start="74:21" pos:end="74:24">area</name> <operator pos:start="74:26" pos:end="74:26">=</operator> <call pos:start="74:28" pos:end="76:45"><name pos:start="74:28" pos:end="74:31">mmap</name><argument_list pos:start="74:32" pos:end="76:45">(<argument pos:start="74:33" pos:end="74:37"><expr pos:start="74:33" pos:end="74:37"><name pos:start="74:33" pos:end="74:37">vaddr</name></expr></argument>, <argument pos:start="74:40" pos:end="74:45"><expr pos:start="74:40" pos:end="74:45"><name pos:start="74:40" pos:end="74:45">length</name></expr></argument>, <argument pos:start="74:48" pos:end="74:77"><expr pos:start="74:48" pos:end="74:77"><name pos:start="74:48" pos:end="74:56">PROT_EXEC</name><operator pos:start="74:57" pos:end="74:57">|</operator><name pos:start="74:58" pos:end="74:66">PROT_READ</name><operator pos:start="74:67" pos:end="74:67">|</operator><name pos:start="74:68" pos:end="74:77">PROT_WRITE</name></expr></argument>,

                                <argument pos:start="76:33" pos:end="76:37"><expr pos:start="76:33" pos:end="76:37"><name pos:start="76:33" pos:end="76:37">flags</name></expr></argument>, <argument pos:start="76:40" pos:end="76:41"><expr pos:start="76:40" pos:end="76:41"><operator pos:start="76:40" pos:end="76:40">-</operator><literal type="number" pos:start="76:41" pos:end="76:41">1</literal></expr></argument>, <argument pos:start="76:44" pos:end="76:44"><expr pos:start="76:44" pos:end="76:44"><literal type="number" pos:start="76:44" pos:end="76:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                    <expr_stmt pos:start="79:21" pos:end="79:57"><expr pos:start="79:21" pos:end="79:56"><name pos:start="79:21" pos:end="79:25">flags</name> <operator pos:start="79:27" pos:end="79:28">|=</operator> <name pos:start="79:30" pos:end="79:40">MAP_PRIVATE</name> <operator pos:start="79:42" pos:end="79:42">|</operator> <name pos:start="79:44" pos:end="79:56">MAP_ANONYMOUS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="86:0"><expr pos:start="81:21" pos:end="83:45"><name pos:start="81:21" pos:end="81:24">area</name> <operator pos:start="81:26" pos:end="81:26">=</operator> <call pos:start="81:28" pos:end="83:45"><name pos:start="81:28" pos:end="81:31">mmap</name><argument_list pos:start="81:32" pos:end="83:45">(<argument pos:start="81:33" pos:end="81:37"><expr pos:start="81:33" pos:end="81:37"><name pos:start="81:33" pos:end="81:37">vaddr</name></expr></argument>, <argument pos:start="81:40" pos:end="81:45"><expr pos:start="81:40" pos:end="81:45"><name pos:start="81:40" pos:end="81:45">length</name></expr></argument>, <argument pos:start="81:48" pos:end="81:69"><expr pos:start="81:48" pos:end="81:69"><name pos:start="81:48" pos:end="81:56">PROT_READ</name> <operator pos:start="81:58" pos:end="81:58">|</operator> <name pos:start="81:60" pos:end="81:69">PROT_WRITE</name></expr></argument>,

                                <argument pos:start="83:33" pos:end="83:37"><expr pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:37">flags</name></expr></argument>, <argument pos:start="83:40" pos:end="83:41"><expr pos:start="83:40" pos:end="83:41"><operator pos:start="83:40" pos:end="83:40">-</operator><literal type="number" pos:start="83:41" pos:end="83:41">1</literal></expr></argument>, <argument pos:start="83:44" pos:end="83:44"><expr pos:start="83:44" pos:end="83:44"><literal type="number" pos:start="83:44" pos:end="83:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="89:17" pos:end="97:17"><if pos:start="89:17" pos:end="97:17">if <condition pos:start="89:20" pos:end="89:34">(<expr pos:start="89:21" pos:end="89:33"><name pos:start="89:21" pos:end="89:24">area</name> <operator pos:start="89:26" pos:end="89:27">!=</operator> <name pos:start="89:29" pos:end="89:33">vaddr</name></expr>)</condition> <block pos:start="89:36" pos:end="97:17">{<block_content pos:start="91:21" pos:end="95:28">

                    <expr_stmt pos:start="91:21" pos:end="93:42"><expr pos:start="91:21" pos:end="93:41"><call pos:start="91:21" pos:end="93:41"><name pos:start="91:21" pos:end="91:27">fprintf</name><argument_list pos:start="91:28" pos:end="93:41">(<argument pos:start="91:29" pos:end="91:34"><expr pos:start="91:29" pos:end="91:34"><name pos:start="91:29" pos:end="91:34">stderr</name></expr></argument>, <argument pos:start="91:37" pos:end="91:69"><expr pos:start="91:37" pos:end="91:69"><literal type="string" pos:start="91:37" pos:end="91:69">"Could not remap addr: %lx@%lx\n"</literal></expr></argument>,

                            <argument pos:start="93:29" pos:end="93:34"><expr pos:start="93:29" pos:end="93:34"><name pos:start="93:29" pos:end="93:34">length</name></expr></argument>, <argument pos:start="93:37" pos:end="93:40"><expr pos:start="93:37" pos:end="93:40"><name pos:start="93:37" pos:end="93:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:28"><expr pos:start="95:21" pos:end="95:27"><call pos:start="95:21" pos:end="95:27"><name pos:start="95:21" pos:end="95:24">exit</name><argument_list pos:start="95:25" pos:end="95:27">(<argument pos:start="95:26" pos:end="95:26"><expr pos:start="95:26" pos:end="95:26"><literal type="number" pos:start="95:26" pos:end="95:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:65"><expr pos:start="99:17" pos:end="99:64"><call pos:start="99:17" pos:end="99:64"><name pos:start="99:17" pos:end="99:28">qemu_madvise</name><argument_list pos:start="99:29" pos:end="99:64">(<argument pos:start="99:30" pos:end="99:34"><expr pos:start="99:30" pos:end="99:34"><name pos:start="99:30" pos:end="99:34">vaddr</name></expr></argument>, <argument pos:start="99:37" pos:end="99:42"><expr pos:start="99:37" pos:end="99:42"><name pos:start="99:37" pos:end="99:42">length</name></expr></argument>, <argument pos:start="99:45" pos:end="99:63"><expr pos:start="99:45" pos:end="99:63"><name pos:start="99:45" pos:end="99:63">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <return pos:start="103:13" pos:end="103:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

</block_content>}</block></function></unit>
