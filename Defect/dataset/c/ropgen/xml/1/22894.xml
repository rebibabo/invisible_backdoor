<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22894.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_wdlt</name><parameter_list pos:start="1:23" pos:end="1:81">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:37">GetByteContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">gb</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">frame</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">width</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:80"><decl pos:start="1:71" pos:end="1:80"><type pos:start="1:71" pos:end="1:80"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:80">height</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:13">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:28">frame_end</name>   <init pos:start="5:32" pos:end="5:55">= <expr pos:start="5:34" pos:end="5:55"><name pos:start="5:34" pos:end="5:38">frame</name> <operator pos:start="5:40" pos:end="5:40">+</operator> <name pos:start="5:42" pos:end="5:46">width</name> <operator pos:start="5:48" pos:end="5:48">*</operator> <name pos:start="5:50" pos:end="5:55">height</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">line_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">count</name></decl>, <decl pos:start="9:16" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">i</name></decl>, <decl pos:start="9:19" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:19">v</name></decl>, <decl pos:start="9:22" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:26">lines</name></decl>, <decl pos:start="9:29" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:29" pos:end="9:36">segments</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">y</name> <init pos:start="11:11" pos:end="11:13">= <expr pos:start="11:13" pos:end="11:13"><literal type="number" pos:start="11:13" pos:end="11:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:9">lines</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:36"><name pos:start="15:13" pos:end="15:32">bytestream2_get_le16</name><argument_list pos:start="15:33" pos:end="15:36">(<argument pos:start="15:34" pos:end="15:35"><expr pos:start="15:34" pos:end="15:35"><name pos:start="15:34" pos:end="15:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:35"><if pos:start="17:5" pos:end="19:35">if <condition pos:start="17:8" pos:end="17:23">(<expr pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:13">lines</name> <operator pos:start="17:15" pos:end="17:15">&gt;</operator> <name pos:start="17:17" pos:end="17:22">height</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:35"><block_content pos:start="19:9" pos:end="19:35">

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="23:5" pos:end="113:5">while <condition pos:start="23:11" pos:end="23:19">(<expr pos:start="23:12" pos:end="23:18"><name pos:start="23:12" pos:end="23:16">lines</name><operator pos:start="23:17" pos:end="23:18">--</operator></expr>)</condition> <block pos:start="23:21" pos:end="113:5">{<block_content pos:start="25:9" pos:end="111:9">

        <if_stmt pos:start="25:9" pos:end="27:39"><if pos:start="25:9" pos:end="27:39">if <condition pos:start="25:12" pos:end="25:47">(<expr pos:start="25:13" pos:end="25:46"><call pos:start="25:13" pos:end="25:42"><name pos:start="25:13" pos:end="25:38">bytestream2_get_bytes_left</name><argument_list pos:start="25:39" pos:end="25:42">(<argument pos:start="25:40" pos:end="25:41"><expr pos:start="25:40" pos:end="25:41"><name pos:start="25:40" pos:end="25:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="25:44" pos:end="25:44">&lt;</operator> <literal type="number" pos:start="25:46" pos:end="25:46">2</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:39"><block_content pos:start="27:13" pos:end="27:39">

            <return pos:start="27:13" pos:end="27:39">return <expr pos:start="27:20" pos:end="27:38"><name pos:start="27:20" pos:end="27:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:16">segments</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:44"><name pos:start="29:20" pos:end="29:40">bytestream2_get_le16u</name><argument_list pos:start="29:41" pos:end="29:44">(<argument pos:start="29:42" pos:end="29:43"><expr pos:start="29:42" pos:end="29:43"><name pos:start="29:42" pos:end="29:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="31:9" pos:end="47:9">while <condition pos:start="31:15" pos:end="31:45">(<expr pos:start="31:16" pos:end="31:44"><operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:24">segments</name> <operator pos:start="31:26" pos:end="31:26">&amp;</operator> <literal type="number" pos:start="31:28" pos:end="31:33">0xC000</literal><operator pos:start="31:34" pos:end="31:34">)</operator> <operator pos:start="31:36" pos:end="31:37">==</operator> <literal type="number" pos:start="31:39" pos:end="31:44">0xC000</literal></expr>)</condition> <block pos:start="31:47" pos:end="47:9">{<block_content pos:start="33:13" pos:end="45:48">

            <decl_stmt pos:start="33:13" pos:end="33:53"><decl pos:start="33:13" pos:end="33:52"><type pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:20">unsigned</name></type> <name pos:start="33:22" pos:end="33:31">skip_lines</name> <init pos:start="33:33" pos:end="33:52">= <expr pos:start="33:35" pos:end="33:52"><operator pos:start="33:35" pos:end="33:35">-</operator><operator pos:start="33:36" pos:end="33:36">(</operator><name pos:start="33:37" pos:end="33:43">int16_t</name><operator pos:start="33:44" pos:end="33:44">)</operator><name pos:start="33:45" pos:end="33:52">segments</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="35:13" pos:end="35:58"><decl pos:start="35:13" pos:end="35:57"><type pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:20">unsigned</name></type> <name pos:start="35:22" pos:end="35:26">delta</name> <init pos:start="35:28" pos:end="35:57">= <expr pos:start="35:30" pos:end="35:57"><operator pos:start="35:30" pos:end="35:30">-</operator><operator pos:start="35:31" pos:end="35:31">(</operator><operator pos:start="35:32" pos:end="35:32">(</operator><name pos:start="35:33" pos:end="35:39">int16_t</name><operator pos:start="35:40" pos:end="35:40">)</operator><name pos:start="35:41" pos:end="35:48">segments</name> <operator pos:start="35:50" pos:end="35:50">*</operator> <name pos:start="35:52" pos:end="35:56">width</name><operator pos:start="35:57" pos:end="35:57">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="37:13" pos:end="39:43"><if pos:start="37:13" pos:end="39:43">if <condition pos:start="37:16" pos:end="37:78">(<expr pos:start="37:17" pos:end="37:77"><name pos:start="37:17" pos:end="37:25">frame_end</name> <operator pos:start="37:27" pos:end="37:27">-</operator> <name pos:start="37:29" pos:end="37:33">frame</name> <operator pos:start="37:35" pos:end="37:36">&lt;=</operator> <name pos:start="37:38" pos:end="37:42">delta</name> <operator pos:start="37:44" pos:end="37:45">||</operator> <name pos:start="37:47" pos:end="37:47">y</name> <operator pos:start="37:49" pos:end="37:49">+</operator> <name pos:start="37:51" pos:end="37:55">lines</name> <operator pos:start="37:57" pos:end="37:57">+</operator> <name pos:start="37:59" pos:end="37:68">skip_lines</name> <operator pos:start="37:70" pos:end="37:70">&gt;</operator> <name pos:start="37:72" pos:end="37:77">height</name></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:43"><block_content pos:start="39:17" pos:end="39:43">

                <return pos:start="39:17" pos:end="39:43">return <expr pos:start="39:24" pos:end="39:42"><name pos:start="39:24" pos:end="39:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:30"><expr pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:17">frame</name>    <operator pos:start="41:22" pos:end="41:23">+=</operator> <name pos:start="41:25" pos:end="41:29">delta</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:35"><expr pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:13">y</name>        <operator pos:start="43:22" pos:end="43:23">+=</operator> <name pos:start="43:25" pos:end="43:34">skip_lines</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:48"><expr pos:start="45:13" pos:end="45:47"><name pos:start="45:13" pos:end="45:20">segments</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <call pos:start="45:24" pos:end="45:47"><name pos:start="45:24" pos:end="45:43">bytestream2_get_le16</name><argument_list pos:start="45:44" pos:end="45:47">(<argument pos:start="45:45" pos:end="45:46"><expr pos:start="45:45" pos:end="45:46"><name pos:start="45:45" pos:end="45:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="51:9" pos:end="53:39"><if pos:start="51:9" pos:end="53:39">if <condition pos:start="51:12" pos:end="51:31">(<expr pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:21">frame_end</name> <operator pos:start="51:23" pos:end="51:24">&lt;=</operator> <name pos:start="51:26" pos:end="51:30">frame</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:39"><block_content pos:start="53:13" pos:end="53:39">

            <return pos:start="53:13" pos:end="53:39">return <expr pos:start="53:20" pos:end="53:38"><name pos:start="53:20" pos:end="53:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:30">(<expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:20">segments</name> <operator pos:start="55:22" pos:end="55:22">&amp;</operator> <literal type="number" pos:start="55:24" pos:end="55:29">0x8000</literal></expr>)</condition> <block pos:start="55:32" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:48">

            <expr_stmt pos:start="57:13" pos:end="57:47"><expr pos:start="57:13" pos:end="57:46"><name pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:17">frame</name><index pos:start="57:18" pos:end="57:28">[<expr pos:start="57:19" pos:end="57:27"><name pos:start="57:19" pos:end="57:23">width</name> <operator pos:start="57:25" pos:end="57:25">-</operator> <literal type="number" pos:start="57:27" pos:end="57:27">1</literal></expr>]</index></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <name pos:start="57:32" pos:end="57:39">segments</name> <operator pos:start="57:41" pos:end="57:41">&amp;</operator> <literal type="number" pos:start="57:43" pos:end="57:46">0xFF</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:48"><expr pos:start="59:13" pos:end="59:47"><name pos:start="59:13" pos:end="59:20">segments</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <call pos:start="59:24" pos:end="59:47"><name pos:start="59:24" pos:end="59:43">bytestream2_get_le16</name><argument_list pos:start="59:44" pos:end="59:47">(<argument pos:start="59:45" pos:end="59:46"><expr pos:start="59:45" pos:end="59:46"><name pos:start="59:45" pos:end="59:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:16">line_ptr</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:24">frame</name></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:39"><if pos:start="65:9" pos:end="67:39">if <condition pos:start="65:12" pos:end="65:38">(<expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:21">frame_end</name> <operator pos:start="65:23" pos:end="65:23">-</operator> <name pos:start="65:25" pos:end="65:29">frame</name> <operator pos:start="65:31" pos:end="65:31">&lt;</operator> <name pos:start="65:33" pos:end="65:37">width</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:39"><block_content pos:start="67:13" pos:end="67:39">

            <return pos:start="67:13" pos:end="67:39">return <expr pos:start="67:20" pos:end="67:38"><name pos:start="67:20" pos:end="67:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:13">frame</name> <operator pos:start="69:15" pos:end="69:16">+=</operator> <name pos:start="69:18" pos:end="69:22">width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:12"><expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:9">y</name><operator pos:start="71:10" pos:end="71:11">++</operator></expr>;</expr_stmt>

        <while pos:start="73:9" pos:end="111:9">while <condition pos:start="73:15" pos:end="73:26">(<expr pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:23">segments</name><operator pos:start="73:24" pos:end="73:25">--</operator></expr>)</condition> <block pos:start="73:28" pos:end="111:9">{<block_content pos:start="75:13" pos:end="109:13">

            <if_stmt pos:start="75:13" pos:end="77:43"><if pos:start="75:13" pos:end="77:43">if <condition pos:start="75:16" pos:end="75:62">(<expr pos:start="75:17" pos:end="75:61"><name pos:start="75:17" pos:end="75:21">frame</name> <operator pos:start="75:23" pos:end="75:23">-</operator> <name pos:start="75:25" pos:end="75:32">line_ptr</name> <operator pos:start="75:34" pos:end="75:35">&lt;=</operator> <call pos:start="75:37" pos:end="75:61"><name pos:start="75:37" pos:end="75:57">bytestream2_peek_byte</name><argument_list pos:start="75:58" pos:end="75:61">(<argument pos:start="75:59" pos:end="75:60"><expr pos:start="75:59" pos:end="75:60"><name pos:start="75:59" pos:end="75:60">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:43"><block_content pos:start="77:17" pos:end="77:43">

                <return pos:start="77:17" pos:end="77:43">return <expr pos:start="77:24" pos:end="77:42"><name pos:start="77:24" pos:end="77:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:49"><expr pos:start="79:13" pos:end="79:48"><name pos:start="79:13" pos:end="79:20">line_ptr</name> <operator pos:start="79:22" pos:end="79:23">+=</operator> <call pos:start="79:25" pos:end="79:48"><name pos:start="79:25" pos:end="79:44">bytestream2_get_byte</name><argument_list pos:start="79:45" pos:end="79:48">(<argument pos:start="79:46" pos:end="79:47"><expr pos:start="79:46" pos:end="79:47"><name pos:start="79:46" pos:end="79:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:53"><expr pos:start="81:13" pos:end="81:52"><name pos:start="81:13" pos:end="81:17">count</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <operator pos:start="81:21" pos:end="81:21">(</operator><name pos:start="81:22" pos:end="81:27">int8_t</name><operator pos:start="81:28" pos:end="81:28">)</operator><call pos:start="81:29" pos:end="81:52"><name pos:start="81:29" pos:end="81:48">bytestream2_get_byte</name><argument_list pos:start="81:49" pos:end="81:52">(<argument pos:start="81:50" pos:end="81:51"><expr pos:start="81:50" pos:end="81:51"><name pos:start="81:50" pos:end="81:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="109:13"><if pos:start="83:13" pos:end="95:13">if <condition pos:start="83:16" pos:end="83:27">(<expr pos:start="83:17" pos:end="83:26"><name pos:start="83:17" pos:end="83:21">count</name> <operator pos:start="83:23" pos:end="83:24">&gt;=</operator> <literal type="number" pos:start="83:26" pos:end="83:26">0</literal></expr>)</condition> <block pos:start="83:29" pos:end="95:13">{<block_content pos:start="85:17" pos:end="93:38">

                <if_stmt pos:start="85:17" pos:end="87:47"><if pos:start="85:17" pos:end="87:47">if <condition pos:start="85:20" pos:end="85:49">(<expr pos:start="85:21" pos:end="85:48"><name pos:start="85:21" pos:end="85:25">frame</name> <operator pos:start="85:27" pos:end="85:27">-</operator> <name pos:start="85:29" pos:end="85:36">line_ptr</name> <operator pos:start="85:38" pos:end="85:38">&lt;</operator> <name pos:start="85:40" pos:end="85:44">count</name> <operator pos:start="85:46" pos:end="85:46">*</operator> <literal type="number" pos:start="85:48" pos:end="85:48">2</literal></expr>)</condition><block type="pseudo" pos:start="87:21" pos:end="87:47"><block_content pos:start="87:21" pos:end="87:47">

                    <return pos:start="87:21" pos:end="87:47">return <expr pos:start="87:28" pos:end="87:46"><name pos:start="87:28" pos:end="87:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="89:17" pos:end="91:47"><if pos:start="89:17" pos:end="91:47">if <condition pos:start="89:20" pos:end="89:81">(<expr pos:start="89:21" pos:end="89:80"><call pos:start="89:21" pos:end="89:67"><name pos:start="89:21" pos:end="89:42">bytestream2_get_buffer</name><argument_list pos:start="89:43" pos:end="89:67">(<argument pos:start="89:44" pos:end="89:45"><expr pos:start="89:44" pos:end="89:45"><name pos:start="89:44" pos:end="89:45">gb</name></expr></argument>, <argument pos:start="89:48" pos:end="89:55"><expr pos:start="89:48" pos:end="89:55"><name pos:start="89:48" pos:end="89:55">line_ptr</name></expr></argument>, <argument pos:start="89:58" pos:end="89:66"><expr pos:start="89:58" pos:end="89:66"><name pos:start="89:58" pos:end="89:62">count</name> <operator pos:start="89:64" pos:end="89:64">*</operator> <literal type="number" pos:start="89:66" pos:end="89:66">2</literal></expr></argument>)</argument_list></call> <operator pos:start="89:69" pos:end="89:70">!=</operator> <name pos:start="89:72" pos:end="89:76">count</name> <operator pos:start="89:78" pos:end="89:78">*</operator> <literal type="number" pos:start="89:80" pos:end="89:80">2</literal></expr>)</condition><block type="pseudo" pos:start="91:21" pos:end="91:47"><block_content pos:start="91:21" pos:end="91:47">

                    <return pos:start="91:21" pos:end="91:47">return <expr pos:start="91:28" pos:end="91:46"><name pos:start="91:28" pos:end="91:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:38"><expr pos:start="93:17" pos:end="93:37"><name pos:start="93:17" pos:end="93:24">line_ptr</name> <operator pos:start="93:26" pos:end="93:27">+=</operator> <name pos:start="93:29" pos:end="93:33">count</name> <operator pos:start="93:35" pos:end="93:35">*</operator> <literal type="number" pos:start="93:37" pos:end="93:37">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="95:15" pos:end="109:13">else <block pos:start="95:20" pos:end="109:13">{<block_content pos:start="97:17" pos:end="107:54">

                <expr_stmt pos:start="97:17" pos:end="97:31"><expr pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:21">count</name> <operator pos:start="97:23" pos:end="97:23">=</operator> <operator pos:start="97:25" pos:end="97:25">-</operator><name pos:start="97:26" pos:end="97:30">count</name></expr>;</expr_stmt>

                <if_stmt pos:start="99:17" pos:end="101:47"><if pos:start="99:17" pos:end="101:47">if <condition pos:start="99:20" pos:end="99:49">(<expr pos:start="99:21" pos:end="99:48"><name pos:start="99:21" pos:end="99:25">frame</name> <operator pos:start="99:27" pos:end="99:27">-</operator> <name pos:start="99:29" pos:end="99:36">line_ptr</name> <operator pos:start="99:38" pos:end="99:38">&lt;</operator> <name pos:start="99:40" pos:end="99:44">count</name> <operator pos:start="99:46" pos:end="99:46">*</operator> <literal type="number" pos:start="99:48" pos:end="99:48">2</literal></expr>)</condition><block type="pseudo" pos:start="101:21" pos:end="101:47"><block_content pos:start="101:21" pos:end="101:47">

                    <return pos:start="101:21" pos:end="101:47">return <expr pos:start="101:28" pos:end="101:46"><name pos:start="101:28" pos:end="101:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:45"><expr pos:start="103:17" pos:end="103:44"><name pos:start="103:17" pos:end="103:17">v</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <call pos:start="103:21" pos:end="103:44"><name pos:start="103:21" pos:end="103:40">bytestream2_get_le16</name><argument_list pos:start="103:41" pos:end="103:44">(<argument pos:start="103:42" pos:end="103:43"><expr pos:start="103:42" pos:end="103:43"><name pos:start="103:42" pos:end="103:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="105:17" pos:end="107:54">for <control pos:start="105:21" pos:end="105:43">(<init pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:26"><name pos:start="105:22" pos:end="105:22">i</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>;</init> <condition pos:start="105:29" pos:end="105:38"><expr pos:start="105:29" pos:end="105:37"><name pos:start="105:29" pos:end="105:29">i</name> <operator pos:start="105:31" pos:end="105:31">&lt;</operator> <name pos:start="105:33" pos:end="105:37">count</name></expr>;</condition> <incr pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><name pos:start="105:40" pos:end="105:40">i</name><operator pos:start="105:41" pos:end="105:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="107:21" pos:end="107:54"><block_content pos:start="107:21" pos:end="107:54">

                    <expr_stmt pos:start="107:21" pos:end="107:54"><expr pos:start="107:21" pos:end="107:53"><call pos:start="107:21" pos:end="107:53"><name pos:start="107:21" pos:end="107:39">bytestream_put_le16</name><argument_list pos:start="107:40" pos:end="107:53">(<argument pos:start="107:41" pos:end="107:49"><expr pos:start="107:41" pos:end="107:49"><operator pos:start="107:41" pos:end="107:41">&amp;</operator><name pos:start="107:42" pos:end="107:49">line_ptr</name></expr></argument>, <argument pos:start="107:52" pos:end="107:52"><expr pos:start="107:52" pos:end="107:52"><name pos:start="107:52" pos:end="107:52">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>



    <return pos:start="117:5" pos:end="117:13">return <expr pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
