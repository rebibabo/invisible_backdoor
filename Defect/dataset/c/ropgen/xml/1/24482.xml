<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24482.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mirror_start_job</name><parameter_list pos:start="1:29" pos:end="17:70">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:75"><decl pos:start="1:52" pos:end="1:75"><type pos:start="1:52" pos:end="1:75"><name pos:start="1:52" pos:end="1:67">BlockDriverState</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:75">target</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:41"><decl pos:start="3:29" pos:end="3:41"><type pos:start="3:29" pos:end="3:41"><name pos:start="3:29" pos:end="3:35">int64_t</name></type> <name pos:start="3:37" pos:end="3:41">speed</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:62"><decl pos:start="3:44" pos:end="3:62"><type pos:start="3:44" pos:end="3:62"><name pos:start="3:44" pos:end="3:50">int64_t</name></type> <name pos:start="3:52" pos:end="3:62">granularity</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:44"><decl pos:start="5:29" pos:end="5:44"><type pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:35">int64_t</name></type> <name pos:start="5:37" pos:end="5:44">buf_size</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:59"><decl pos:start="7:29" pos:end="7:59"><type pos:start="7:29" pos:end="7:59"><name pos:start="7:29" pos:end="7:43">BlockdevOnError</name></type> <name pos:start="7:45" pos:end="7:59">on_source_error</name></decl></parameter>,

                            <parameter pos:start="9:29" pos:end="9:59"><decl pos:start="9:29" pos:end="9:59"><type pos:start="9:29" pos:end="9:59"><name pos:start="9:29" pos:end="9:43">BlockdevOnError</name></type> <name pos:start="9:45" pos:end="9:59">on_target_error</name></decl></parameter>,

                            <parameter pos:start="11:29" pos:end="11:57"><decl pos:start="11:29" pos:end="11:57"><type pos:start="11:29" pos:end="11:57"><name pos:start="11:29" pos:end="11:53">BlockDriverCompletionFunc</name> <modifier pos:start="11:55" pos:end="11:55">*</modifier></type><name pos:start="11:56" pos:end="11:57">cb</name></decl></parameter>,

                            <parameter pos:start="13:29" pos:end="13:40"><decl pos:start="13:29" pos:end="13:40"><type pos:start="13:29" pos:end="13:40"><name pos:start="13:29" pos:end="13:32">void</name> <modifier pos:start="13:34" pos:end="13:34">*</modifier></type><name pos:start="13:35" pos:end="13:40">opaque</name></decl></parameter>, <parameter pos:start="13:43" pos:end="13:54"><decl pos:start="13:43" pos:end="13:54"><type pos:start="13:43" pos:end="13:54"><name pos:start="13:43" pos:end="13:47">Error</name> <modifier pos:start="13:49" pos:end="13:49">*</modifier><modifier pos:start="13:50" pos:end="13:50">*</modifier></type><name pos:start="13:51" pos:end="13:54">errp</name></decl></parameter>,

                            <parameter pos:start="15:29" pos:end="15:56"><decl pos:start="15:29" pos:end="15:56"><type pos:start="15:29" pos:end="15:56"><specifier pos:start="15:29" pos:end="15:33">const</specifier> <name pos:start="15:35" pos:end="15:48">BlockJobDriver</name> <modifier pos:start="15:50" pos:end="15:50">*</modifier></type><name pos:start="15:51" pos:end="15:56">driver</name></decl></parameter>,

                            <parameter pos:start="17:29" pos:end="17:45"><decl pos:start="17:29" pos:end="17:45"><type pos:start="17:29" pos:end="17:45"><name pos:start="17:29" pos:end="17:32">bool</name></type> <name pos:start="17:34" pos:end="17:45">is_none_mode</name></decl></parameter>, <parameter pos:start="17:48" pos:end="17:69"><decl pos:start="17:48" pos:end="17:69"><type pos:start="17:48" pos:end="17:69"><name pos:start="17:48" pos:end="17:63">BlockDriverState</name> <modifier pos:start="17:65" pos:end="17:65">*</modifier></type><name pos:start="17:66" pos:end="17:69">base</name></decl></parameter>)</parameter_list>

<block pos:start="19:1" pos:end="109:1">{<block_content pos:start="21:5" pos:end="107:42">

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">MirrorBlockJob</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:21">s</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="45:5"><if pos:start="25:5" pos:end="45:5">if <condition pos:start="25:8" pos:end="25:25">(<expr pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:19">granularity</name> <operator pos:start="25:21" pos:end="25:22">==</operator> <literal type="number" pos:start="25:24" pos:end="25:24">0</literal></expr>)</condition> <block pos:start="25:27" pos:end="45:5">{<block_content pos:start="31:9" pos:end="43:9">

        <comment type="block" pos:start="27:9" pos:end="29:48">/* Choose the default granularity based on the target file's cluster

         * size, clamped between 4k and 64k.  */</comment>

        <decl_stmt pos:start="31:9" pos:end="31:28"><decl pos:start="31:9" pos:end="31:27"><type pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:23">BlockDriverInfo</name></type> <name pos:start="31:25" pos:end="31:27">bdi</name></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="43:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:70">(<expr pos:start="33:13" pos:end="33:69"><call pos:start="33:13" pos:end="33:39"><name pos:start="33:13" pos:end="33:25">bdrv_get_info</name><argument_list pos:start="33:26" pos:end="33:39">(<argument pos:start="33:27" pos:end="33:32"><expr pos:start="33:27" pos:end="33:32"><name pos:start="33:27" pos:end="33:32">target</name></expr></argument>, <argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><operator pos:start="33:35" pos:end="33:35">&amp;</operator><name pos:start="33:36" pos:end="33:38">bdi</name></expr></argument>)</argument_list></call> <operator pos:start="33:41" pos:end="33:42">&gt;=</operator> <literal type="number" pos:start="33:44" pos:end="33:44">0</literal> <operator pos:start="33:46" pos:end="33:47">&amp;&amp;</operator> <name pos:start="33:49" pos:end="33:64"><name pos:start="33:49" pos:end="33:51">bdi</name><operator pos:start="33:52" pos:end="33:52">.</operator><name pos:start="33:53" pos:end="33:64">cluster_size</name></name> <operator pos:start="33:66" pos:end="33:67">!=</operator> <literal type="number" pos:start="33:69" pos:end="33:69">0</literal></expr>)</condition> <block pos:start="33:72" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:50">

            <expr_stmt pos:start="35:13" pos:end="35:54"><expr pos:start="35:13" pos:end="35:53"><name pos:start="35:13" pos:end="35:23">granularity</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <call pos:start="35:27" pos:end="35:53"><name pos:start="35:27" pos:end="35:29">MAX</name><argument_list pos:start="35:30" pos:end="35:53">(<argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><literal type="number" pos:start="35:31" pos:end="35:34">4096</literal></expr></argument>, <argument pos:start="35:37" pos:end="35:52"><expr pos:start="35:37" pos:end="35:52"><name pos:start="35:37" pos:end="35:52"><name pos:start="35:37" pos:end="35:39">bdi</name><operator pos:start="35:40" pos:end="35:40">.</operator><name pos:start="35:41" pos:end="35:52">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:50"><expr pos:start="37:13" pos:end="37:49"><name pos:start="37:13" pos:end="37:23">granularity</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <call pos:start="37:27" pos:end="37:49"><name pos:start="37:27" pos:end="37:29">MIN</name><argument_list pos:start="37:30" pos:end="37:49">(<argument pos:start="37:31" pos:end="37:35"><expr pos:start="37:31" pos:end="37:35"><literal type="number" pos:start="37:31" pos:end="37:35">65536</literal></expr></argument>, <argument pos:start="37:38" pos:end="37:48"><expr pos:start="37:38" pos:end="37:48"><name pos:start="37:38" pos:end="37:48">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="43:9">else <block pos:start="39:16" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:32">

            <expr_stmt pos:start="41:13" pos:end="41:32"><expr pos:start="41:13" pos:end="41:31"><name pos:start="41:13" pos:end="41:23">granularity</name> <operator pos:start="41:25" pos:end="41:25">=</operator> <literal type="number" pos:start="41:27" pos:end="41:31">65536</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:52"><expr pos:start="49:5" pos:end="49:51"><call pos:start="49:5" pos:end="49:51"><name pos:start="49:5" pos:end="49:10">assert</name> <argument_list pos:start="49:12" pos:end="49:51">(<argument pos:start="49:13" pos:end="49:50"><expr pos:start="49:13" pos:end="49:50"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:24">granularity</name> <operator pos:start="49:26" pos:end="49:26">&amp;</operator> <operator pos:start="49:28" pos:end="49:28">(</operator><name pos:start="49:29" pos:end="49:39">granularity</name> <operator pos:start="49:41" pos:end="49:41">-</operator> <literal type="number" pos:start="49:43" pos:end="49:43">1</literal><operator pos:start="49:44" pos:end="49:44">)</operator><operator pos:start="49:45" pos:end="49:45">)</operator> <operator pos:start="49:47" pos:end="49:48">==</operator> <literal type="number" pos:start="49:50" pos:end="49:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="57:38">(<expr pos:start="53:9" pos:end="57:37"><operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:24">on_source_error</name> <operator pos:start="53:26" pos:end="53:27">==</operator> <name pos:start="53:29" pos:end="53:50">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="53:52" pos:end="53:53">||</operator>

         <name pos:start="55:10" pos:end="55:24">on_source_error</name> <operator pos:start="55:26" pos:end="55:27">==</operator> <name pos:start="55:29" pos:end="55:52">BLOCKDEV_ON_ERROR_ENOSPC</name><operator pos:start="55:53" pos:end="55:53">)</operator> <operator pos:start="55:55" pos:end="55:56">&amp;&amp;</operator>

        <operator pos:start="57:9" pos:end="57:9">!</operator><call pos:start="57:10" pos:end="57:37"><name pos:start="57:10" pos:end="57:33">bdrv_iostatus_is_enabled</name><argument_list pos:start="57:34" pos:end="57:37">(<argument pos:start="57:35" pos:end="57:36"><expr pos:start="57:35" pos:end="57:36"><name pos:start="57:35" pos:end="57:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:40" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:15">

        <expr_stmt pos:start="59:9" pos:end="59:67"><expr pos:start="59:9" pos:end="59:66"><call pos:start="59:9" pos:end="59:66"><name pos:start="59:9" pos:end="59:17">error_set</name><argument_list pos:start="59:18" pos:end="59:66">(<argument pos:start="59:19" pos:end="59:22"><expr pos:start="59:19" pos:end="59:22"><name pos:start="59:19" pos:end="59:22">errp</name></expr></argument>, <argument pos:start="59:25" pos:end="59:46"><expr pos:start="59:25" pos:end="59:46"><name pos:start="59:25" pos:end="59:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="59:49" pos:end="59:65"><expr pos:start="59:49" pos:end="59:65"><literal type="string" pos:start="59:49" pos:end="59:65">"on-source-error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="69:5" pos:end="69:62"><expr pos:start="69:5" pos:end="69:61"><name pos:start="69:5" pos:end="69:5">s</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <call pos:start="69:9" pos:end="69:61"><name pos:start="69:9" pos:end="69:24">block_job_create</name><argument_list pos:start="69:25" pos:end="69:61">(<argument pos:start="69:26" pos:end="69:31"><expr pos:start="69:26" pos:end="69:31"><name pos:start="69:26" pos:end="69:31">driver</name></expr></argument>, <argument pos:start="69:34" pos:end="69:35"><expr pos:start="69:34" pos:end="69:35"><name pos:start="69:34" pos:end="69:35">bs</name></expr></argument>, <argument pos:start="69:38" pos:end="69:42"><expr pos:start="69:38" pos:end="69:42"><name pos:start="69:38" pos:end="69:42">speed</name></expr></argument>, <argument pos:start="69:45" pos:end="69:46"><expr pos:start="69:45" pos:end="69:46"><name pos:start="69:45" pos:end="69:46">cb</name></expr></argument>, <argument pos:start="69:49" pos:end="69:54"><expr pos:start="69:49" pos:end="69:54"><name pos:start="69:49" pos:end="69:54">opaque</name></expr></argument>, <argument pos:start="69:57" pos:end="69:60"><expr pos:start="69:57" pos:end="69:60"><name pos:start="69:57" pos:end="69:60">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:11">(<expr pos:start="71:9" pos:end="71:10"><operator pos:start="71:9" pos:end="71:9">!</operator><name pos:start="71:10" pos:end="71:10">s</name></expr>)</condition> <block pos:start="71:13" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:15">

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:41"><expr pos:start="79:5" pos:end="79:40"><name pos:start="79:5" pos:end="79:22"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:22">on_source_error</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <name pos:start="79:26" pos:end="79:40">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:41"><expr pos:start="81:5" pos:end="81:40"><name pos:start="81:5" pos:end="81:22"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:22">on_target_error</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:40">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:23"><expr pos:start="83:5" pos:end="83:22"><name pos:start="83:5" pos:end="83:13"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:13">target</name></name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:22">target</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:19">is_none_mode</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:34">is_none_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:19"><expr pos:start="87:5" pos:end="87:18"><name pos:start="87:5" pos:end="87:11"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:11">base</name></name> <operator pos:start="87:13" pos:end="87:13">=</operator> <name pos:start="87:15" pos:end="87:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:18">granularity</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:32">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:45"><expr pos:start="91:5" pos:end="91:44"><name pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:15">buf_size</name></name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:44"><name pos:start="91:19" pos:end="91:21">MAX</name><argument_list pos:start="91:22" pos:end="91:44">(<argument pos:start="91:23" pos:end="91:30"><expr pos:start="91:23" pos:end="91:30"><name pos:start="91:23" pos:end="91:30">buf_size</name></expr></argument>, <argument pos:start="91:33" pos:end="91:43"><expr pos:start="91:33" pos:end="91:43"><name pos:start="91:33" pos:end="91:43">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:64"><expr pos:start="95:5" pos:end="95:63"><name pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:19">dirty_bitmap</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="95:63"><name pos:start="95:23" pos:end="95:46">bdrv_create_dirty_bitmap</name><argument_list pos:start="95:47" pos:end="95:63">(<argument pos:start="95:48" pos:end="95:49"><expr pos:start="95:48" pos:end="95:49"><name pos:start="95:48" pos:end="95:49">bs</name></expr></argument>, <argument pos:start="95:52" pos:end="95:62"><expr pos:start="95:52" pos:end="95:62"><name pos:start="95:52" pos:end="95:62">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:49"><expr pos:start="97:5" pos:end="97:48"><call pos:start="97:5" pos:end="97:48"><name pos:start="97:5" pos:end="97:31">bdrv_set_enable_write_cache</name><argument_list pos:start="97:32" pos:end="97:48">(<argument pos:start="97:33" pos:end="97:41"><expr pos:start="97:33" pos:end="97:41"><name pos:start="97:33" pos:end="97:41"><name pos:start="97:33" pos:end="97:33">s</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:41">target</name></name></expr></argument>, <argument pos:start="97:44" pos:end="97:47"><expr pos:start="97:44" pos:end="97:47"><name pos:start="97:44" pos:end="97:47">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:67"><expr pos:start="99:5" pos:end="99:66"><call pos:start="99:5" pos:end="99:66"><name pos:start="99:5" pos:end="99:21">bdrv_set_on_error</name><argument_list pos:start="99:22" pos:end="99:66">(<argument pos:start="99:23" pos:end="99:31"><expr pos:start="99:23" pos:end="99:31"><name pos:start="99:23" pos:end="99:31"><name pos:start="99:23" pos:end="99:23">s</name><operator pos:start="99:24" pos:end="99:25">-&gt;</operator><name pos:start="99:26" pos:end="99:31">target</name></name></expr></argument>, <argument pos:start="99:34" pos:end="99:48"><expr pos:start="99:34" pos:end="99:48"><name pos:start="99:34" pos:end="99:48">on_target_error</name></expr></argument>, <argument pos:start="99:51" pos:end="99:65"><expr pos:start="99:51" pos:end="99:65"><name pos:start="99:51" pos:end="99:65">on_target_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:36"><expr pos:start="101:5" pos:end="101:35"><call pos:start="101:5" pos:end="101:35"><name pos:start="101:5" pos:end="101:24">bdrv_iostatus_enable</name><argument_list pos:start="101:25" pos:end="101:35">(<argument pos:start="101:26" pos:end="101:34"><expr pos:start="101:26" pos:end="101:34"><name pos:start="101:26" pos:end="101:34"><name pos:start="101:26" pos:end="101:26">s</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:34">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:53"><expr pos:start="103:5" pos:end="103:52"><name pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:13">common</name><operator pos:start="103:14" pos:end="103:14">.</operator><name pos:start="103:15" pos:end="103:16">co</name></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:52"><name pos:start="103:20" pos:end="103:40">qemu_coroutine_create</name><argument_list pos:start="103:41" pos:end="103:52">(<argument pos:start="103:42" pos:end="103:51"><expr pos:start="103:42" pos:end="103:51"><name pos:start="103:42" pos:end="103:51">mirror_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:52"><expr pos:start="105:5" pos:end="105:51"><call pos:start="105:5" pos:end="105:51"><name pos:start="105:5" pos:end="105:22">trace_mirror_start</name><argument_list pos:start="105:23" pos:end="105:51">(<argument pos:start="105:24" pos:end="105:25"><expr pos:start="105:24" pos:end="105:25"><name pos:start="105:24" pos:end="105:25">bs</name></expr></argument>, <argument pos:start="105:28" pos:end="105:28"><expr pos:start="105:28" pos:end="105:28"><name pos:start="105:28" pos:end="105:28">s</name></expr></argument>, <argument pos:start="105:31" pos:end="105:42"><expr pos:start="105:31" pos:end="105:42"><name pos:start="105:31" pos:end="105:42"><name pos:start="105:31" pos:end="105:31">s</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:39">common</name><operator pos:start="105:40" pos:end="105:40">.</operator><name pos:start="105:41" pos:end="105:42">co</name></name></expr></argument>, <argument pos:start="105:45" pos:end="105:50"><expr pos:start="105:45" pos:end="105:50"><name pos:start="105:45" pos:end="105:50">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:42"><expr pos:start="107:5" pos:end="107:41"><call pos:start="107:5" pos:end="107:41"><name pos:start="107:5" pos:end="107:24">qemu_coroutine_enter</name><argument_list pos:start="107:25" pos:end="107:41">(<argument pos:start="107:26" pos:end="107:37"><expr pos:start="107:26" pos:end="107:37"><name pos:start="107:26" pos:end="107:37"><name pos:start="107:26" pos:end="107:26">s</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:34">common</name><operator pos:start="107:35" pos:end="107:35">.</operator><name pos:start="107:36" pos:end="107:37">co</name></name></expr></argument>, <argument pos:start="107:40" pos:end="107:40"><expr pos:start="107:40" pos:end="107:40"><name pos:start="107:40" pos:end="107:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
