<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19085.c" pos:tabs="8"><function pos:start="1:1" pos:end="98:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">handle_packet</name><parameter_list pos:start="1:25" pos:end="1:66">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:38">MpegTSContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">ts</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:65">packet</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="98:13">{<block_content pos:start="3:5" pos:end="98:13">
    <decl_stmt pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:21"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:16">MpegTSFilter</name> <modifier pos:start="3:18" pos:end="3:18">*</modifier></type><name pos:start="3:19" pos:end="3:21">tss</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="5:36"><decl pos:start="4:5" pos:end="4:11"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">len</name></decl>, <decl pos:start="4:14" pos:end="4:16"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:14" pos:end="4:16">pid</name></decl>, <decl pos:start="4:19" pos:end="4:20"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:19" pos:end="4:20">cc</name></decl>, <decl pos:start="4:23" pos:end="4:33"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:23" pos:end="4:33">expected_cc</name></decl>, <decl pos:start="4:36" pos:end="4:40"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:36" pos:end="4:40">cc_ok</name></decl>, <decl pos:start="4:43" pos:end="4:45"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:43" pos:end="4:45">afc</name></decl>, <decl pos:start="4:48" pos:end="4:55"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:48" pos:end="4:55">is_start</name></decl>, <decl pos:start="4:58" pos:end="4:73"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:58" pos:end="4:73">is_discontinuity</name></decl>,
        <decl pos:start="5:9" pos:end="5:22"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="5:9" pos:end="5:22">has_adaptation</name></decl>, <decl pos:start="5:25" pos:end="5:35"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="5:25" pos:end="5:35">has_payload</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:29"><decl pos:start="6:5" pos:end="6:20"><type pos:start="6:5" pos:end="6:19"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:17">uint8_t</name> <modifier pos:start="6:19" pos:end="6:19">*</modifier></type><name pos:start="6:20" pos:end="6:20">p</name></decl>, <decl pos:start="6:23" pos:end="6:28"><type ref="prev" pos:start="6:5" pos:end="6:19"><modifier pos:start="6:23" pos:end="6:23">*</modifier></type><name pos:start="6:24" pos:end="6:28">p_end</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:15">pos</name></decl>;</decl_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:39"><expr pos:start="8:5" pos:end="8:38"><name pos:start="8:5" pos:end="8:7">pid</name> <operator pos:start="8:9" pos:end="8:9">=</operator> <call pos:start="8:11" pos:end="8:29"><name pos:start="8:11" pos:end="8:17">AV_RB16</name><argument_list pos:start="8:18" pos:end="8:29">(<argument pos:start="8:19" pos:end="8:28"><expr pos:start="8:19" pos:end="8:28"><name pos:start="8:19" pos:end="8:24">packet</name> <operator pos:start="8:26" pos:end="8:26">+</operator> <literal type="number" pos:start="8:28" pos:end="8:28">1</literal></expr></argument>)</argument_list></call> <operator pos:start="8:31" pos:end="8:31">&amp;</operator> <literal type="number" pos:start="8:33" pos:end="8:38">0x1fff</literal></expr>;</expr_stmt>
    <if_stmt pos:start="9:5" pos:end="10:17"><if pos:start="9:5" pos:end="10:17">if <condition pos:start="9:8" pos:end="9:36">(<expr pos:start="9:9" pos:end="9:35"><name pos:start="9:9" pos:end="9:11">pid</name> <operator pos:start="9:13" pos:end="9:14">&amp;&amp;</operator> <call pos:start="9:16" pos:end="9:35"><name pos:start="9:16" pos:end="9:26">discard_pid</name><argument_list pos:start="9:27" pos:end="9:35">(<argument pos:start="9:28" pos:end="9:29"><expr pos:start="9:28" pos:end="9:29"><name pos:start="9:28" pos:end="9:29">ts</name></expr></argument>, <argument pos:start="9:32" pos:end="9:34"><expr pos:start="9:32" pos:end="9:34"><name pos:start="9:32" pos:end="9:34">pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="10:9" pos:end="10:17"><block_content pos:start="10:9" pos:end="10:17">
        <return pos:start="10:9" pos:end="10:17">return <expr pos:start="10:16" pos:end="10:16"><literal type="number" pos:start="10:16" pos:end="10:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:12">is_start</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:24"><name pos:start="11:16" pos:end="11:21">packet</name><index pos:start="11:22" pos:end="11:24">[<expr pos:start="11:23" pos:end="11:23"><literal type="number" pos:start="11:23" pos:end="11:23">1</literal></expr>]</index></name> <operator pos:start="11:26" pos:end="11:26">&amp;</operator> <literal type="number" pos:start="11:28" pos:end="11:31">0x40</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:24"><expr pos:start="12:5" pos:end="12:23"><name pos:start="12:5" pos:end="12:7">tss</name> <operator pos:start="12:9" pos:end="12:9">=</operator> <name pos:start="12:11" pos:end="12:23"><name pos:start="12:11" pos:end="12:12">ts</name><operator pos:start="12:13" pos:end="12:14">-&gt;</operator><name pos:start="12:15" pos:end="12:18">pids</name><index pos:start="12:19" pos:end="12:23">[<expr pos:start="12:20" pos:end="12:22"><name pos:start="12:20" pos:end="12:22">pid</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt pos:start="13:5" pos:end="98:13"><if pos:start="13:5" pos:end="98:13">if <condition pos:start="13:8" pos:end="13:43">(<expr pos:start="13:9" pos:end="13:42"><name pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:10">ts</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:22">auto_guess</name></name> <operator pos:start="13:24" pos:end="13:25">&amp;&amp;</operator> <operator pos:start="13:27" pos:end="13:27">!</operator><name pos:start="13:28" pos:end="13:30">tss</name> <operator pos:start="13:32" pos:end="13:33">&amp;&amp;</operator> <name pos:start="13:35" pos:end="13:42">is_start</name></expr>)</condition> <block pos:start="13:45" pos:end="98:13">{<block_content pos:start="14:9" pos:end="98:13">
        <expr_stmt pos:start="14:9" pos:end="14:36"><expr pos:start="14:9" pos:end="14:35"><call pos:start="14:9" pos:end="14:35"><name pos:start="14:9" pos:end="14:22">add_pes_stream</name><argument_list pos:start="14:23" pos:end="14:35">(<argument pos:start="14:24" pos:end="14:25"><expr pos:start="14:24" pos:end="14:25"><name pos:start="14:24" pos:end="14:25">ts</name></expr></argument>, <argument pos:start="14:28" pos:end="14:30"><expr pos:start="14:28" pos:end="14:30"><name pos:start="14:28" pos:end="14:30">pid</name></expr></argument>, <argument pos:start="14:33" pos:end="14:34"><expr pos:start="14:33" pos:end="14:34"><operator pos:start="14:33" pos:end="14:33">-</operator><literal type="number" pos:start="14:34" pos:end="14:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:28"><expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:11">tss</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:27"><name pos:start="15:15" pos:end="15:16">ts</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:22">pids</name><index pos:start="15:23" pos:end="15:27">[<expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:26">pid</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="17:17"><if pos:start="16:5" pos:end="17:17">if <condition pos:start="16:8" pos:end="16:13">(<expr pos:start="16:9" pos:end="16:12"><operator pos:start="16:9" pos:end="16:9">!</operator><name pos:start="16:10" pos:end="16:12">tss</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">
        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:26"><expr pos:start="18:5" pos:end="18:25"><name pos:start="18:5" pos:end="18:19"><name pos:start="18:5" pos:end="18:6">ts</name><operator pos:start="18:7" pos:end="18:8">-&gt;</operator><name pos:start="18:9" pos:end="18:19">current_pid</name></name> <operator pos:start="18:21" pos:end="18:21">=</operator> <name pos:start="18:23" pos:end="18:25">pid</name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:7">afc</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <operator pos:start="19:11" pos:end="19:11">(</operator><name pos:start="19:12" pos:end="19:20"><name pos:start="19:12" pos:end="19:17">packet</name><index pos:start="19:18" pos:end="19:20">[<expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">3</literal></expr>]</index></name> <operator pos:start="19:22" pos:end="19:23">&gt;&gt;</operator> <literal type="number" pos:start="19:25" pos:end="19:25">4</literal><operator pos:start="19:26" pos:end="19:26">)</operator> <operator pos:start="19:28" pos:end="19:28">&amp;</operator> <literal type="number" pos:start="19:30" pos:end="19:30">3</literal></expr>;</expr_stmt>
    <if_stmt pos:start="20:5" pos:end="21:17"><if pos:start="20:5" pos:end="21:17">if <condition pos:start="20:8" pos:end="20:17">(<expr pos:start="20:9" pos:end="20:16"><name pos:start="20:9" pos:end="20:11">afc</name> <operator pos:start="20:13" pos:end="20:14">==</operator> <literal type="number" pos:start="20:16" pos:end="20:16">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:17"><block_content pos:start="21:9" pos:end="21:17"> <comment type="block" pos:start="20:19" pos:end="20:38">/* reserved value */</comment>
        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:31"><expr pos:start="22:5" pos:end="22:30"><name pos:start="22:5" pos:end="22:18">has_adaptation</name>   <operator pos:start="22:22" pos:end="22:22">=</operator> <name pos:start="22:24" pos:end="22:26">afc</name> <operator pos:start="22:28" pos:end="22:28">&amp;</operator> <literal type="number" pos:start="22:30" pos:end="22:30">2</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:15">has_payload</name>      <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:26">afc</name> <operator pos:start="23:28" pos:end="23:28">&amp;</operator> <literal type="number" pos:start="23:30" pos:end="23:30">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="26:42"><expr pos:start="24:5" pos:end="26:41"><name pos:start="24:5" pos:end="24:20">is_discontinuity</name> <operator pos:start="24:22" pos:end="24:22">=</operator> <name pos:start="24:24" pos:end="24:37">has_adaptation</name> <operator pos:start="24:39" pos:end="24:40">&amp;&amp;</operator>
                       <name pos:start="25:24" pos:end="25:32"><name pos:start="25:24" pos:end="25:29">packet</name><index pos:start="25:30" pos:end="25:32">[<expr pos:start="25:31" pos:end="25:31"><literal type="number" pos:start="25:31" pos:end="25:31">4</literal></expr>]</index></name> <operator pos:start="25:34" pos:end="25:35">!=</operator> <literal type="number" pos:start="25:37" pos:end="25:37">0</literal> <operator pos:start="25:39" pos:end="25:40">&amp;&amp;</operator> <comment type="block" pos:start="25:42" pos:end="25:62">/* with length &gt; 0 */</comment>
                       <operator pos:start="26:24" pos:end="26:24">(</operator><name pos:start="26:25" pos:end="26:33"><name pos:start="26:25" pos:end="26:30">packet</name><index pos:start="26:31" pos:end="26:33">[<expr pos:start="26:32" pos:end="26:32"><literal type="number" pos:start="26:32" pos:end="26:32">5</literal></expr>]</index></name> <operator pos:start="26:35" pos:end="26:35">&amp;</operator> <literal type="number" pos:start="26:37" pos:end="26:40">0x80</literal><operator pos:start="26:41" pos:end="26:41">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="26:44" pos:end="26:76">/* and discontinuity indicated */</comment>
    <comment type="block" pos:start="27:5" pos:end="27:47">/* continuity check (currently not used) */</comment>
    <expr_stmt pos:start="28:5" pos:end="28:27"><expr pos:start="28:5" pos:end="28:26"><name pos:start="28:5" pos:end="28:6">cc</name> <operator pos:start="28:8" pos:end="28:8">=</operator> <operator pos:start="28:10" pos:end="28:10">(</operator><name pos:start="28:11" pos:end="28:19"><name pos:start="28:11" pos:end="28:16">packet</name><index pos:start="28:17" pos:end="28:19">[<expr pos:start="28:18" pos:end="28:18"><literal type="number" pos:start="28:18" pos:end="28:18">3</literal></expr>]</index></name> <operator pos:start="28:21" pos:end="28:21">&amp;</operator> <literal type="number" pos:start="28:23" pos:end="28:25">0xf</literal><operator pos:start="28:26" pos:end="28:26">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:73"><expr pos:start="29:5" pos:end="29:72"><name pos:start="29:5" pos:end="29:15">expected_cc</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <ternary pos:start="29:19" pos:end="29:72"><condition pos:start="29:19" pos:end="29:31"><expr pos:start="29:19" pos:end="29:29"><name pos:start="29:19" pos:end="29:29">has_payload</name></expr> ?</condition><then pos:start="29:33" pos:end="29:57"> <expr pos:start="29:33" pos:end="29:57"><operator pos:start="29:33" pos:end="29:33">(</operator><name pos:start="29:34" pos:end="29:45"><name pos:start="29:34" pos:end="29:36">tss</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:45">last_cc</name></name> <operator pos:start="29:47" pos:end="29:47">+</operator> <literal type="number" pos:start="29:49" pos:end="29:49">1</literal><operator pos:start="29:50" pos:end="29:50">)</operator> <operator pos:start="29:52" pos:end="29:52">&amp;</operator> <literal type="number" pos:start="29:54" pos:end="29:57">0x0f</literal></expr> </then><else pos:start="29:59" pos:end="29:72">: <expr pos:start="29:61" pos:end="29:72"><name pos:start="29:61" pos:end="29:72"><name pos:start="29:61" pos:end="29:63">tss</name><operator pos:start="29:64" pos:end="29:65">-&gt;</operator><name pos:start="29:66" pos:end="29:72">last_cc</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="33:30"><expr pos:start="30:5" pos:end="33:29"><name pos:start="30:5" pos:end="30:9">cc_ok</name> <operator pos:start="30:11" pos:end="30:11">=</operator> <name pos:start="30:13" pos:end="30:15">pid</name> <operator pos:start="30:17" pos:end="30:18">==</operator> <literal type="number" pos:start="30:20" pos:end="30:25">0x1FFF</literal> <operator pos:start="30:27" pos:end="30:28">||</operator> <comment type="line" pos:start="30:30" pos:end="30:47">// null packet PID</comment>
            <name pos:start="31:13" pos:end="31:28">is_discontinuity</name> <operator pos:start="31:30" pos:end="31:31">||</operator>
            <name pos:start="32:13" pos:end="32:24"><name pos:start="32:13" pos:end="32:15">tss</name><operator pos:start="32:16" pos:end="32:17">-&gt;</operator><name pos:start="32:18" pos:end="32:24">last_cc</name></name> <operator pos:start="32:26" pos:end="32:26">&lt;</operator> <literal type="number" pos:start="32:28" pos:end="32:28">0</literal> <operator pos:start="32:30" pos:end="32:31">||</operator>
            <name pos:start="33:13" pos:end="33:23">expected_cc</name> <operator pos:start="33:25" pos:end="33:26">==</operator> <name pos:start="33:28" pos:end="33:29">cc</name></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:22"><expr pos:start="34:5" pos:end="34:21"><name pos:start="34:5" pos:end="34:16"><name pos:start="34:5" pos:end="34:7">tss</name><operator pos:start="34:8" pos:end="34:9">-&gt;</operator><name pos:start="34:10" pos:end="34:16">last_cc</name></name> <operator pos:start="34:18" pos:end="34:18">=</operator> <name pos:start="34:20" pos:end="34:21">cc</name></expr>;</expr_stmt>
    <if_stmt pos:start="35:5" pos:end="98:13"><if pos:start="35:5" pos:end="98:13">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:14">cc_ok</name></expr>)</condition> <block pos:start="35:17" pos:end="98:13">{<block_content pos:start="36:9" pos:end="98:13">
        <expr_stmt pos:start="36:9" pos:end="38:37"><expr pos:start="36:9" pos:end="38:36"><call pos:start="36:9" pos:end="38:36"><name pos:start="36:9" pos:end="36:14">av_log</name><argument_list pos:start="36:15" pos:end="38:36">(<argument pos:start="36:16" pos:end="36:25"><expr pos:start="36:16" pos:end="36:25"><name pos:start="36:16" pos:end="36:25"><name pos:start="36:16" pos:end="36:17">ts</name><operator pos:start="36:18" pos:end="36:19">-&gt;</operator><name pos:start="36:20" pos:end="36:25">stream</name></name></expr></argument>, <argument pos:start="36:28" pos:end="36:39"><expr pos:start="36:28" pos:end="36:39"><name pos:start="36:28" pos:end="36:39">AV_LOG_DEBUG</name></expr></argument>,
               <argument pos:start="37:16" pos:end="37:72"><expr pos:start="37:16" pos:end="37:72"><literal type="string" pos:start="37:16" pos:end="37:72">"Continuity check failed for pid %d expected %d got %d\n"</literal></expr></argument>,
               <argument pos:start="38:16" pos:end="38:18"><expr pos:start="38:16" pos:end="38:18"><name pos:start="38:16" pos:end="38:18">pid</name></expr></argument>, <argument pos:start="38:21" pos:end="38:31"><expr pos:start="38:21" pos:end="38:31"><name pos:start="38:21" pos:end="38:31">expected_cc</name></expr></argument>, <argument pos:start="38:34" pos:end="38:35"><expr pos:start="38:34" pos:end="38:35"><name pos:start="38:34" pos:end="38:35">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:19"><expr pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:5">p</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <name pos:start="39:9" pos:end="39:14">packet</name> <operator pos:start="39:16" pos:end="39:16">+</operator> <literal type="number" pos:start="39:18" pos:end="39:18">4</literal></expr>;</expr_stmt>
    <if_stmt pos:start="40:5" pos:end="98:13"><if pos:start="40:5" pos:end="98:13">if <condition pos:start="40:8" pos:end="40:23">(<expr pos:start="40:9" pos:end="40:22"><name pos:start="40:9" pos:end="40:22">has_adaptation</name></expr>)</condition> <block pos:start="40:25" pos:end="98:13">{<block_content pos:start="41:9" pos:end="98:13">
        <decl_stmt pos:start="41:9" pos:end="41:22"><decl pos:start="41:9" pos:end="41:21"><type pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:15">int64_t</name></type> <name pos:start="41:17" pos:end="41:21">pcr_h</name></decl>;</decl_stmt>
        <decl_stmt pos:start="42:9" pos:end="42:18"><decl pos:start="42:9" pos:end="42:17"><type pos:start="42:9" pos:end="42:11"><name pos:start="42:9" pos:end="42:11">int</name></type> <name pos:start="42:13" pos:end="42:17">pcr_l</name></decl>;</decl_stmt>
        <if_stmt pos:start="43:9" pos:end="44:48"><if pos:start="43:9" pos:end="44:48">if <condition pos:start="43:12" pos:end="43:51">(<expr pos:start="43:13" pos:end="43:50"><call pos:start="43:13" pos:end="43:45"><name pos:start="43:13" pos:end="43:21">parse_pcr</name><argument_list pos:start="43:22" pos:end="43:45">(<argument pos:start="43:23" pos:end="43:28"><expr pos:start="43:23" pos:end="43:28"><operator pos:start="43:23" pos:end="43:23">&amp;</operator><name pos:start="43:24" pos:end="43:28">pcr_h</name></expr></argument>, <argument pos:start="43:31" pos:end="43:36"><expr pos:start="43:31" pos:end="43:36"><operator pos:start="43:31" pos:end="43:31">&amp;</operator><name pos:start="43:32" pos:end="43:36">pcr_l</name></expr></argument>, <argument pos:start="43:39" pos:end="43:44"><expr pos:start="43:39" pos:end="43:44"><name pos:start="43:39" pos:end="43:44">packet</name></expr></argument>)</argument_list></call> <operator pos:start="43:47" pos:end="43:48">==</operator> <literal type="number" pos:start="43:50" pos:end="43:50">0</literal></expr>)</condition><block type="pseudo" pos:start="44:13" pos:end="44:48"><block_content pos:start="44:13" pos:end="44:48">
            <expr_stmt pos:start="44:13" pos:end="44:48"><expr pos:start="44:13" pos:end="44:47"><name pos:start="44:13" pos:end="44:25"><name pos:start="44:13" pos:end="44:15">tss</name><operator pos:start="44:16" pos:end="44:17">-&gt;</operator><name pos:start="44:18" pos:end="44:25">last_pcr</name></name> <operator pos:start="44:27" pos:end="44:27">=</operator> <name pos:start="44:29" pos:end="44:33">pcr_h</name> <operator pos:start="44:35" pos:end="44:35">*</operator> <literal type="number" pos:start="44:37" pos:end="44:41">300</literal> <operator pos:start="44:41" pos:end="44:41">+</operator> <name pos:start="44:43" pos:end="44:47">pcr_l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="45:9" pos:end="45:35">/* skip adaptation field */</comment>
        <expr_stmt pos:start="46:9" pos:end="46:22"><expr pos:start="46:9" pos:end="46:21"><name pos:start="46:9" pos:end="46:9">p</name> <operator pos:start="46:11" pos:end="46:12">+=</operator> <name pos:start="46:14" pos:end="46:17"><name pos:start="46:14" pos:end="46:14">p</name><index pos:start="46:15" pos:end="46:17">[<expr pos:start="46:16" pos:end="46:16"><literal type="number" pos:start="46:16" pos:end="46:16">0</literal></expr>]</index></name> <operator pos:start="46:19" pos:end="46:19">+</operator> <literal type="number" pos:start="46:21" pos:end="46:21">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="47:5" pos:end="47:43">/* if past the end of packet, ignore */</comment>
    <expr_stmt pos:start="48:5" pos:end="48:36"><expr pos:start="48:5" pos:end="48:35"><name pos:start="48:5" pos:end="48:9">p_end</name> <operator pos:start="48:11" pos:end="48:11">=</operator> <name pos:start="48:13" pos:end="48:18">packet</name> <operator pos:start="48:20" pos:end="48:20">+</operator> <name pos:start="48:22" pos:end="48:35">TS_PACKET_SIZE</name></expr>;</expr_stmt>
    <if_stmt pos:start="49:5" pos:end="50:17"><if pos:start="49:5" pos:end="50:17">if <condition pos:start="49:8" pos:end="49:35">(<expr pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:9">p</name> <operator pos:start="49:11" pos:end="49:12">&gt;=</operator> <name pos:start="49:14" pos:end="49:18">p_end</name> <operator pos:start="49:20" pos:end="49:21">||</operator> <operator pos:start="49:23" pos:end="49:23">!</operator><name pos:start="49:24" pos:end="49:34">has_payload</name></expr>)</condition><block type="pseudo" pos:start="50:9" pos:end="50:17"><block_content pos:start="50:9" pos:end="50:17">
        <return pos:start="50:9" pos:end="50:17">return <expr pos:start="50:16" pos:end="50:16"><literal type="number" pos:start="50:16" pos:end="50:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:36"><expr pos:start="51:5" pos:end="51:35"><name pos:start="51:5" pos:end="51:7">pos</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:35"><name pos:start="51:11" pos:end="51:19">avio_tell</name><argument_list pos:start="51:20" pos:end="51:35">(<argument pos:start="51:21" pos:end="51:34"><expr pos:start="51:21" pos:end="51:34"><name pos:start="51:21" pos:end="51:34"><name pos:start="51:21" pos:end="51:22">ts</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:30">stream</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:34">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="52:5" pos:end="98:13"><if pos:start="52:5" pos:end="98:13">if <condition pos:start="52:8" pos:end="52:17">(<expr pos:start="52:9" pos:end="52:16"><name pos:start="52:9" pos:end="52:11">pos</name> <operator pos:start="52:13" pos:end="52:14">&gt;=</operator> <literal type="number" pos:start="52:16" pos:end="52:16">0</literal></expr>)</condition> <block pos:start="52:19" pos:end="98:13">{<block_content pos:start="53:9" pos:end="98:13">
        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><call pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:18">av_assert0</name><argument_list pos:start="53:19" pos:end="53:41">(<argument pos:start="53:20" pos:end="53:40"><expr pos:start="53:20" pos:end="53:40"><name pos:start="53:20" pos:end="53:22">pos</name> <operator pos:start="53:24" pos:end="53:25">&gt;=</operator> <name pos:start="53:27" pos:end="53:40">TS_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:46"><expr pos:start="54:9" pos:end="54:45"><name pos:start="54:9" pos:end="54:22"><name pos:start="54:9" pos:end="54:10">ts</name><operator pos:start="54:11" pos:end="54:12">-&gt;</operator><name pos:start="54:13" pos:end="54:22">pos47_full</name></name> <operator pos:start="54:24" pos:end="54:24">=</operator> <name pos:start="54:26" pos:end="54:28">pos</name> <operator pos:start="54:30" pos:end="54:30">-</operator> <name pos:start="54:32" pos:end="54:45">TS_PACKET_SIZE</name></expr>;</expr_stmt>
    <if_stmt pos:start="55:5" pos:end="98:13"><if pos:start="55:5" pos:end="98:13">if <condition pos:start="55:8" pos:end="55:36">(<expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:11">tss</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:17">type</name></name> <operator pos:start="55:19" pos:end="55:20">==</operator> <name pos:start="55:22" pos:end="55:35">MPEGTS_SECTION</name></expr>)</condition> <block pos:start="55:38" pos:end="98:13">{<block_content pos:start="56:9" pos:end="98:13">
        <if_stmt pos:start="56:9" pos:end="98:13"><if pos:start="56:9" pos:end="98:13">if <condition pos:start="56:12" pos:end="56:21">(<expr pos:start="56:13" pos:end="56:20"><name pos:start="56:13" pos:end="56:20">is_start</name></expr>)</condition> <block pos:start="56:23" pos:end="98:13">{<block_content pos:start="58:13" pos:end="98:13">
            <comment type="block" pos:start="57:13" pos:end="57:39">/* pointer field present */</comment>
            <expr_stmt pos:start="58:13" pos:end="58:23"><expr pos:start="58:13" pos:end="58:22"><name pos:start="58:13" pos:end="58:15">len</name> <operator pos:start="58:17" pos:end="58:17">=</operator> <operator pos:start="58:19" pos:end="58:19">*</operator><name pos:start="58:20" pos:end="58:20">p</name><operator pos:start="58:21" pos:end="58:22">++</operator></expr>;</expr_stmt>
            <if_stmt pos:start="59:13" pos:end="60:25"><if pos:start="59:13" pos:end="60:25">if <condition pos:start="59:16" pos:end="59:32">(<expr pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:19">len</name> <operator pos:start="59:21" pos:end="59:21">&gt;</operator> <name pos:start="59:23" pos:end="59:27">p_end</name> <operator pos:start="59:29" pos:end="59:29">-</operator> <name pos:start="59:31" pos:end="59:31">p</name></expr>)</condition><block type="pseudo" pos:start="60:17" pos:end="60:25"><block_content pos:start="60:17" pos:end="60:25">
                <return pos:start="60:17" pos:end="60:25">return <expr pos:start="60:24" pos:end="60:24"><literal type="number" pos:start="60:24" pos:end="60:24">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt pos:start="61:13" pos:end="98:13"><if pos:start="61:13" pos:end="98:13">if <condition pos:start="61:16" pos:end="61:29">(<expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:19">len</name> <operator pos:start="61:21" pos:end="61:22">&amp;&amp;</operator> <name pos:start="61:24" pos:end="61:28">cc_ok</name></expr>)</condition> <block pos:start="61:31" pos:end="98:13">{<block_content pos:start="63:17" pos:end="98:13">
                <comment type="block" pos:start="62:17" pos:end="62:51">/* write remaining section bytes */</comment>
                <expr_stmt pos:start="63:17" pos:end="64:46"><expr pos:start="63:17" pos:end="64:45"><call pos:start="63:17" pos:end="64:45"><name pos:start="63:17" pos:end="63:34">write_section_data</name><argument_list pos:start="63:35" pos:end="64:45">(<argument pos:start="63:36" pos:end="63:37"><expr pos:start="63:36" pos:end="63:37"><name pos:start="63:36" pos:end="63:37">ts</name></expr></argument>, <argument pos:start="63:40" pos:end="63:42"><expr pos:start="63:40" pos:end="63:42"><name pos:start="63:40" pos:end="63:42">tss</name></expr></argument>,
                                   <argument pos:start="64:36" pos:end="64:36"><expr pos:start="64:36" pos:end="64:36"><name pos:start="64:36" pos:end="64:36">p</name></expr></argument>, <argument pos:start="64:39" pos:end="64:41"><expr pos:start="64:39" pos:end="64:41"><name pos:start="64:39" pos:end="64:41">len</name></expr></argument>, <argument pos:start="64:44" pos:end="64:44"><expr pos:start="64:44" pos:end="64:44"><literal type="number" pos:start="64:44" pos:end="64:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="65:17" pos:end="65:58">/* check whether filter has been closed */</comment>
                <if_stmt pos:start="66:17" pos:end="67:29"><if pos:start="66:17" pos:end="67:29">if <condition pos:start="66:20" pos:end="66:35">(<expr pos:start="66:21" pos:end="66:34"><operator pos:start="66:21" pos:end="66:21">!</operator><name pos:start="66:22" pos:end="66:34"><name pos:start="66:22" pos:end="66:23">ts</name><operator pos:start="66:24" pos:end="66:25">-&gt;</operator><name pos:start="66:26" pos:end="66:29">pids</name><index pos:start="66:30" pos:end="66:34">[<expr pos:start="66:31" pos:end="66:33"><name pos:start="66:31" pos:end="66:33">pid</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="67:21" pos:end="67:29"><block_content pos:start="67:21" pos:end="67:29">
                    <return pos:start="67:21" pos:end="67:29">return <expr pos:start="67:28" pos:end="67:28"><literal type="number" pos:start="67:28" pos:end="67:28">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:21"><expr pos:start="68:13" pos:end="68:20"><name pos:start="68:13" pos:end="68:13">p</name> <operator pos:start="68:15" pos:end="68:16">+=</operator> <name pos:start="68:18" pos:end="68:20">len</name></expr>;</expr_stmt>
            <if_stmt pos:start="69:13" pos:end="98:13"><if pos:start="69:13" pos:end="72:9">if <condition pos:start="69:16" pos:end="69:26">(<expr pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:17">p</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <name pos:start="69:21" pos:end="69:25">p_end</name></expr>)</condition> <block pos:start="69:28" pos:end="72:9">{<block_content pos:start="70:17" pos:end="71:52">
                <expr_stmt pos:start="70:17" pos:end="71:52"><expr pos:start="70:17" pos:end="71:51"><call pos:start="70:17" pos:end="71:51"><name pos:start="70:17" pos:end="70:34">write_section_data</name><argument_list pos:start="70:35" pos:end="71:51">(<argument pos:start="70:36" pos:end="70:37"><expr pos:start="70:36" pos:end="70:37"><name pos:start="70:36" pos:end="70:37">ts</name></expr></argument>, <argument pos:start="70:40" pos:end="70:42"><expr pos:start="70:40" pos:end="70:42"><name pos:start="70:40" pos:end="70:42">tss</name></expr></argument>,
                                   <argument pos:start="71:36" pos:end="71:36"><expr pos:start="71:36" pos:end="71:36"><name pos:start="71:36" pos:end="71:36">p</name></expr></argument>, <argument pos:start="71:39" pos:end="71:47"><expr pos:start="71:39" pos:end="71:47"><name pos:start="71:39" pos:end="71:43">p_end</name> <operator pos:start="71:45" pos:end="71:45">-</operator> <name pos:start="71:47" pos:end="71:47">p</name></expr></argument>, <argument pos:start="71:50" pos:end="71:50"><expr pos:start="71:50" pos:end="71:50"><literal type="number" pos:start="71:50" pos:end="71:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="72:11" pos:end="98:13">else <block pos:start="72:16" pos:end="98:13">{<block_content pos:start="73:13" pos:end="98:13">
            <if_stmt pos:start="73:13" pos:end="98:13"><if pos:start="73:13" pos:end="98:13">if <condition pos:start="73:16" pos:end="73:22">(<expr pos:start="73:17" pos:end="73:21"><name pos:start="73:17" pos:end="73:21">cc_ok</name></expr>)</condition> <block pos:start="73:24" pos:end="98:13">{<block_content pos:start="74:17" pos:end="98:13">
                <expr_stmt pos:start="74:17" pos:end="75:52"><expr pos:start="74:17" pos:end="75:51"><call pos:start="74:17" pos:end="75:51"><name pos:start="74:17" pos:end="74:34">write_section_data</name><argument_list pos:start="74:35" pos:end="75:51">(<argument pos:start="74:36" pos:end="74:37"><expr pos:start="74:36" pos:end="74:37"><name pos:start="74:36" pos:end="74:37">ts</name></expr></argument>, <argument pos:start="74:40" pos:end="74:42"><expr pos:start="74:40" pos:end="74:42"><name pos:start="74:40" pos:end="74:42">tss</name></expr></argument>,
                                   <argument pos:start="75:36" pos:end="75:36"><expr pos:start="75:36" pos:end="75:36"><name pos:start="75:36" pos:end="75:36">p</name></expr></argument>, <argument pos:start="75:39" pos:end="75:47"><expr pos:start="75:39" pos:end="75:47"><name pos:start="75:39" pos:end="75:43">p_end</name> <operator pos:start="75:45" pos:end="75:45">-</operator> <name pos:start="75:47" pos:end="75:47">p</name></expr></argument>, <argument pos:start="75:50" pos:end="75:50"><expr pos:start="75:50" pos:end="75:50"><literal type="number" pos:start="75:50" pos:end="75:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:start="76:9" pos:end="76:62">// stop find_stream_info from waiting for more streams</comment>
        <comment type="line" pos:start="77:9" pos:end="77:48">// when all programs have received a PMT</comment>
        <if_stmt pos:start="78:9" pos:end="98:13"><if pos:start="78:9" pos:end="98:13">if <condition pos:start="78:12" pos:end="78:80">(<expr pos:start="78:13" pos:end="78:79"><name pos:start="78:13" pos:end="78:33"><name pos:start="78:13" pos:end="78:14">ts</name><operator pos:start="78:15" pos:end="78:16">-&gt;</operator><name pos:start="78:17" pos:end="78:22">stream</name><operator pos:start="78:23" pos:end="78:24">-&gt;</operator><name pos:start="78:25" pos:end="78:33">ctx_flags</name></name> <operator pos:start="78:35" pos:end="78:35">&amp;</operator> <name pos:start="78:37" pos:end="78:53">AVFMTCTX_NOHEADER</name> <operator pos:start="78:55" pos:end="78:56">&amp;&amp;</operator> <name pos:start="78:58" pos:end="78:74"><name pos:start="78:58" pos:end="78:59">ts</name><operator pos:start="78:60" pos:end="78:61">-&gt;</operator><name pos:start="78:62" pos:end="78:74">scan_all_pmts</name></name> <operator pos:start="78:76" pos:end="78:77">&lt;=</operator> <literal type="number" pos:start="78:79" pos:end="78:79">0</literal></expr>)</condition> <block pos:start="78:82" pos:end="98:13">{<block_content pos:start="79:13" pos:end="98:13">
            <decl_stmt pos:start="79:13" pos:end="79:18"><decl pos:start="79:13" pos:end="79:17"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:17">i</name></decl>;</decl_stmt>
            <for pos:start="80:13" pos:end="98:13">for <control pos:start="80:17" pos:end="80:44">(<init pos:start="80:18" pos:end="80:23"><expr pos:start="80:18" pos:end="80:22"><name pos:start="80:18" pos:end="80:18">i</name> <operator pos:start="80:20" pos:end="80:20">=</operator> <literal type="number" pos:start="80:22" pos:end="80:22">0</literal></expr>;</init> <condition pos:start="80:25" pos:end="80:39"><expr pos:start="80:25" pos:end="80:38"><name pos:start="80:25" pos:end="80:25">i</name> <operator pos:start="80:27" pos:end="80:27">&lt;</operator> <name pos:start="80:29" pos:end="80:38"><name pos:start="80:29" pos:end="80:30">ts</name><operator pos:start="80:31" pos:end="80:32">-&gt;</operator><name pos:start="80:33" pos:end="80:38">nb_prg</name></name></expr>;</condition> <incr pos:start="80:41" pos:end="80:43"><expr pos:start="80:41" pos:end="80:43"><name pos:start="80:41" pos:end="80:41">i</name><operator pos:start="80:42" pos:end="80:43">++</operator></expr></incr>)</control> <block pos:start="80:46" pos:end="98:13">{<block_content pos:start="81:17" pos:end="98:13">
                <if_stmt pos:start="81:17" pos:end="82:26"><if pos:start="81:17" pos:end="82:26">if <condition pos:start="81:20" pos:end="81:42">(<expr pos:start="81:21" pos:end="81:41"><operator pos:start="81:21" pos:end="81:21">!</operator><name pos:start="81:22" pos:end="81:31"><name pos:start="81:22" pos:end="81:23">ts</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:28">prg</name><index pos:start="81:29" pos:end="81:31">[<expr pos:start="81:30" pos:end="81:30"><name pos:start="81:30" pos:end="81:30">i</name></expr>]</index></name><operator pos:start="81:32" pos:end="81:32">.</operator><name pos:start="81:33" pos:end="81:41">pmt_found</name></expr>)</condition><block type="pseudo" pos:start="82:21" pos:end="82:26"><block_content pos:start="82:21" pos:end="82:26">
                    <break pos:start="82:21" pos:end="82:26">break;</break></block_content></block></if></if_stmt>
            <if_stmt pos:start="83:13" pos:end="98:13"><if pos:start="83:13" pos:end="98:13">if <condition pos:start="83:16" pos:end="83:50">(<expr pos:start="83:17" pos:end="83:49"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:20">==</operator> <name pos:start="83:22" pos:end="83:31"><name pos:start="83:22" pos:end="83:23">ts</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:31">nb_prg</name></name> <operator pos:start="83:33" pos:end="83:34">&amp;&amp;</operator> <name pos:start="83:36" pos:end="83:45"><name pos:start="83:36" pos:end="83:37">ts</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:45">nb_prg</name></name> <operator pos:start="83:47" pos:end="83:47">&gt;</operator> <literal type="number" pos:start="83:49" pos:end="83:49">0</literal></expr>)</condition> <block pos:start="83:52" pos:end="98:13">{<block_content pos:start="84:17" pos:end="98:13">
                <decl_stmt pos:start="84:17" pos:end="84:30"><decl pos:start="84:17" pos:end="84:29"><type pos:start="84:17" pos:end="84:19"><name pos:start="84:17" pos:end="84:19">int</name></type> <name pos:start="84:21" pos:end="84:25">types</name> <init pos:start="84:27" pos:end="84:29">= <expr pos:start="84:29" pos:end="84:29"><literal type="number" pos:start="84:29" pos:end="84:29">0</literal></expr></init></decl>;</decl_stmt>
                <for pos:start="85:17" pos:end="98:13">for <control pos:start="85:21" pos:end="85:60">(<init pos:start="85:22" pos:end="85:27"><expr pos:start="85:22" pos:end="85:26"><name pos:start="85:22" pos:end="85:22">i</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>;</init> <condition pos:start="85:29" pos:end="85:55"><expr pos:start="85:29" pos:end="85:54"><name pos:start="85:29" pos:end="85:29">i</name> <operator pos:start="85:31" pos:end="85:31">&lt;</operator> <name pos:start="85:33" pos:end="85:54"><name pos:start="85:33" pos:end="85:34">ts</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:42">stream</name><operator pos:start="85:43" pos:end="85:44">-&gt;</operator><name pos:start="85:45" pos:end="85:54">nb_streams</name></name></expr>;</condition> <incr pos:start="85:57" pos:end="85:59"><expr pos:start="85:57" pos:end="85:59"><name pos:start="85:57" pos:end="85:57">i</name><operator pos:start="85:58" pos:end="85:59">++</operator></expr></incr>)</control> <block pos:start="85:62" pos:end="98:13">{<block_content pos:start="86:21" pos:end="98:13">
                    <decl_stmt pos:start="86:21" pos:end="86:58"><decl pos:start="86:21" pos:end="86:57"><type pos:start="86:21" pos:end="86:30"><name pos:start="86:21" pos:end="86:28">AVStream</name> <modifier pos:start="86:30" pos:end="86:30">*</modifier></type><name pos:start="86:31" pos:end="86:32">st</name> <init pos:start="86:34" pos:end="86:57">= <expr pos:start="86:36" pos:end="86:57"><name pos:start="86:36" pos:end="86:57"><name pos:start="86:36" pos:end="86:37">ts</name><operator pos:start="86:38" pos:end="86:39">-&gt;</operator><name pos:start="86:40" pos:end="86:45">stream</name><operator pos:start="86:46" pos:end="86:47">-&gt;</operator><name pos:start="86:48" pos:end="86:54">streams</name><index pos:start="86:55" pos:end="86:57">[<expr pos:start="86:56" pos:end="86:56"><name pos:start="86:56" pos:end="86:56">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if_stmt pos:start="87:21" pos:end="88:61"><if pos:start="87:21" pos:end="88:61">if <condition pos:start="87:24" pos:end="87:54">(<expr pos:start="87:25" pos:end="87:53"><name pos:start="87:25" pos:end="87:48"><name pos:start="87:25" pos:end="87:26">st</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:36">codecpar</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:48">codec_type</name></name> <operator pos:start="87:50" pos:end="87:51">&gt;=</operator> <literal type="number" pos:start="87:53" pos:end="87:53">0</literal></expr>)</condition><block type="pseudo" pos:start="88:25" pos:end="88:61"><block_content pos:start="88:25" pos:end="88:61">
                        <expr_stmt pos:start="88:25" pos:end="88:61"><expr pos:start="88:25" pos:end="88:60"><name pos:start="88:25" pos:end="88:29">types</name> <operator pos:start="88:31" pos:end="88:32">|=</operator> <literal type="number" pos:start="88:34" pos:end="88:34">1</literal><operator pos:start="88:35" pos:end="88:36">&lt;&lt;</operator><name pos:start="88:37" pos:end="88:60"><name pos:start="88:37" pos:end="88:38">st</name><operator pos:start="88:39" pos:end="88:40">-&gt;</operator><name pos:start="88:41" pos:end="88:48">codecpar</name><operator pos:start="88:49" pos:end="88:50">-&gt;</operator><name pos:start="88:51" pos:end="88:60">codec_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="89:17" pos:end="98:13"><if pos:start="89:17" pos:end="92:5">if <condition pos:start="89:20" pos:end="89:105">(<expr pos:start="89:21" pos:end="89:104"><operator pos:start="89:21" pos:end="89:21">(</operator><name pos:start="89:22" pos:end="89:26">types</name> <operator pos:start="89:28" pos:end="89:28">&amp;</operator> <operator pos:start="89:30" pos:end="89:30">(</operator><literal type="number" pos:start="89:31" pos:end="89:31">1</literal><operator pos:start="89:32" pos:end="89:33">&lt;&lt;</operator><name pos:start="89:34" pos:end="89:51">AVMEDIA_TYPE_AUDIO</name><operator pos:start="89:52" pos:end="89:52">)</operator> <operator pos:start="89:54" pos:end="89:55">&amp;&amp;</operator> <name pos:start="89:57" pos:end="89:61">types</name> <operator pos:start="89:63" pos:end="89:63">&amp;</operator> <operator pos:start="89:65" pos:end="89:65">(</operator><literal type="number" pos:start="89:66" pos:end="89:66">1</literal><operator pos:start="89:67" pos:end="89:68">&lt;&lt;</operator><name pos:start="89:69" pos:end="89:86">AVMEDIA_TYPE_VIDEO</name><operator pos:start="89:87" pos:end="89:87">)</operator><operator pos:start="89:88" pos:end="89:88">)</operator> <operator pos:start="89:90" pos:end="89:91">||</operator> <name pos:start="89:93" pos:end="89:95">pos</name> <operator pos:start="89:97" pos:end="89:97">&gt;</operator> <literal type="number" pos:start="89:99" pos:end="89:104">100000</literal></expr>)</condition> <block pos:start="89:107" pos:end="92:5">{<block_content pos:start="90:21" pos:end="91:64">
                    <expr_stmt pos:start="90:21" pos:end="90:95"><expr pos:start="90:21" pos:end="90:94"><call pos:start="90:21" pos:end="90:94"><name pos:start="90:21" pos:end="90:26">av_log</name><argument_list pos:start="90:27" pos:end="90:94">(<argument pos:start="90:28" pos:end="90:37"><expr pos:start="90:28" pos:end="90:37"><name pos:start="90:28" pos:end="90:37"><name pos:start="90:28" pos:end="90:29">ts</name><operator pos:start="90:30" pos:end="90:31">-&gt;</operator><name pos:start="90:32" pos:end="90:37">stream</name></name></expr></argument>, <argument pos:start="90:40" pos:end="90:51"><expr pos:start="90:40" pos:end="90:51"><name pos:start="90:40" pos:end="90:51">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="90:54" pos:end="90:93"><expr pos:start="90:54" pos:end="90:93"><literal type="string" pos:start="90:54" pos:end="90:93">"All programs have pmt, headers found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="91:21" pos:end="91:64"><expr pos:start="91:21" pos:end="91:63"><name pos:start="91:21" pos:end="91:41"><name pos:start="91:21" pos:end="91:22">ts</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:30">stream</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:41">ctx_flags</name></name> <operator pos:start="91:43" pos:end="91:44">&amp;=</operator> <operator pos:start="91:46" pos:end="91:46">~</operator><name pos:start="91:47" pos:end="91:63">AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="92:7" pos:end="98:13">else <block pos:start="92:12" pos:end="98:13">{<block_content pos:start="93:9" pos:end="98:13">
        <decl_stmt pos:start="93:9" pos:end="93:16"><decl pos:start="93:9" pos:end="93:15"><type pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">int</name></type> <name pos:start="93:13" pos:end="93:15">ret</name></decl>;</decl_stmt>
        <comment type="line" pos:start="94:9" pos:end="94:77">// Note: The position here points actually behind the current packet.</comment>
            <if_stmt pos:start="95:13" pos:end="97:27"><if pos:start="95:13" pos:end="97:27">if <condition pos:start="95:16" pos:end="96:80">(<expr pos:start="95:17" pos:end="96:79"><operator pos:start="95:17" pos:end="95:17">(</operator><name pos:start="95:18" pos:end="95:20">ret</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="96:74"><name pos:start="95:24" pos:end="95:47"><name pos:start="95:24" pos:end="95:26">tss</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:29">u</name><operator pos:start="95:30" pos:end="95:30">.</operator><name pos:start="95:31" pos:end="95:40">pes_filter</name><operator pos:start="95:41" pos:end="95:41">.</operator><name pos:start="95:42" pos:end="95:47">pes_cb</name></name><argument_list pos:start="95:48" pos:end="96:74">(<argument pos:start="95:49" pos:end="95:51"><expr pos:start="95:49" pos:end="95:51"><name pos:start="95:49" pos:end="95:51">tss</name></expr></argument>, <argument pos:start="95:54" pos:end="95:54"><expr pos:start="95:54" pos:end="95:54"><name pos:start="95:54" pos:end="95:54">p</name></expr></argument>, <argument pos:start="95:57" pos:end="95:65"><expr pos:start="95:57" pos:end="95:65"><name pos:start="95:57" pos:end="95:61">p_end</name> <operator pos:start="95:63" pos:end="95:63">-</operator> <name pos:start="95:65" pos:end="95:65">p</name></expr></argument>, <argument pos:start="95:68" pos:end="95:75"><expr pos:start="95:68" pos:end="95:75"><name pos:start="95:68" pos:end="95:75">is_start</name></expr></argument>,
                                                <argument pos:start="96:49" pos:end="96:73"><expr pos:start="96:49" pos:end="96:73"><name pos:start="96:49" pos:end="96:51">pos</name> <operator pos:start="96:53" pos:end="96:53">-</operator> <name pos:start="96:55" pos:end="96:73"><name pos:start="96:55" pos:end="96:56">ts</name><operator pos:start="96:57" pos:end="96:58">-&gt;</operator><name pos:start="96:59" pos:end="96:73">raw_packet_size</name></name></expr></argument>)</argument_list></call><operator pos:start="96:75" pos:end="96:75">)</operator> <operator pos:start="96:77" pos:end="96:77">&lt;</operator> <literal type="number" pos:start="96:79" pos:end="96:79">0</literal></expr>)</condition><block type="pseudo" pos:start="97:17" pos:end="97:27"><block_content pos:start="97:17" pos:end="97:27">
                <return pos:start="97:17" pos:end="97:27">return <expr pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="98:5" pos:end="98:13">return <expr pos:start="98:12" pos:end="98:12"><literal type="number" pos:start="98:12" pos:end="98:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
