<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22317.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb15to16</name>)<parameter_list pos:start="1:37" pos:end="1:84">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">dst</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:83"><decl pos:start="1:72" pos:end="1:83"><type pos:start="1:72" pos:end="1:83"><name pos:start="1:72" pos:end="1:74">int</name></type> <name pos:start="1:76" pos:end="1:83">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:27"><specifier pos:start="5:5" pos:end="5:12">register</specifier> <specifier pos:start="5:14" pos:end="5:18">const</specifier> <name pos:start="5:20" pos:end="5:26">uint8_t</name><modifier pos:start="5:27" pos:end="5:27">*</modifier></type> <name pos:start="5:29" pos:end="5:29">s</name><init pos:start="5:30" pos:end="5:33">=<expr pos:start="5:31" pos:end="5:33"><name pos:start="5:31" pos:end="5:33">src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:21"><specifier pos:start="7:5" pos:end="7:12">register</specifier> <name pos:start="7:14" pos:end="7:20">uint8_t</name><modifier pos:start="7:21" pos:end="7:21">*</modifier></type> <name pos:start="7:23" pos:end="7:23">d</name><init pos:start="7:24" pos:end="7:27">=<expr pos:start="7:25" pos:end="7:27"><name pos:start="7:25" pos:end="7:27">dst</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:28"><specifier pos:start="9:5" pos:end="9:12">register</specifier> <specifier pos:start="9:14" pos:end="9:18">const</specifier> <name pos:start="9:20" pos:end="9:26">uint8_t</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:31">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:25">mm_end</name></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:7">end</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:11">s</name> <operator pos:start="13:13" pos:end="13:13">+</operator> <name pos:start="13:15" pos:end="13:22">src_size</name></expr>;</expr_stmt>

    <asm pos:start="15:5" pos:end="15:48">__asm__ <specifier pos:start="15:13" pos:end="15:20">volatile</specifier>(PREFETCH"    %0"::"m"(*s));</asm>

    <asm pos:start="17:5" pos:end="17:60">__asm__ <specifier pos:start="17:13" pos:end="17:20">volatile</specifier>("movq        %0, %%mm4"::"m"(mask15s));</asm>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:10">mm_end</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:16">end</name> <operator pos:start="19:18" pos:end="19:18">-</operator> <literal type="number" pos:start="19:20" pos:end="19:21">15</literal></expr>;</expr_stmt>

    <while pos:start="21:5" pos:end="57:5">while <condition pos:start="21:11" pos:end="21:20">(<expr pos:start="21:12" pos:end="21:19"><name pos:start="21:12" pos:end="21:12">s</name><operator pos:start="21:13" pos:end="21:13">&lt;</operator><name pos:start="21:14" pos:end="21:19">mm_end</name></expr>)</condition> <block pos:start="21:22" pos:end="57:5">{<block_content pos:start="23:9" pos:end="55:14">

        <asm pos:start="23:9" pos:end="51:10">__asm__ <specifier pos:start="23:17" pos:end="23:24">volatile</specifier>(

            PREFETCH"  32%1         \n\t"

            "movq        %1, %%mm0  \n\t"

            "movq       8%1, %%mm2  \n\t"

            "movq     %%mm0, %%mm1  \n\t"

            "movq     %%mm2, %%mm3  \n\t"

            "pand     %%mm4, %%mm0  \n\t"

            "pand     %%mm4, %%mm2  \n\t"

            "paddw    %%mm1, %%mm0  \n\t"

            "paddw    %%mm3, %%mm2  \n\t"

            MOVNTQ"   %%mm0,  %0    \n\t"

            MOVNTQ"   %%mm2, 8%0"

            :"=m"(*d)

            :"m"(*s)

        );</asm>

        <expr_stmt pos:start="53:9" pos:end="53:14"><expr pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:9">d</name><operator pos:start="53:10" pos:end="53:11">+=</operator><literal type="number" pos:start="53:12" pos:end="53:13">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:14"><expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">+=</operator><literal type="number" pos:start="55:12" pos:end="55:13">16</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <asm pos:start="59:5" pos:end="59:40">__asm__ <specifier pos:start="59:13" pos:end="59:20">volatile</specifier>(SFENCE:::"memory");</asm>

    <asm pos:start="61:5" pos:end="61:38">__asm__ <specifier pos:start="61:13" pos:end="61:20">volatile</specifier>(EMMS:::"memory");</asm>

    <expr_stmt pos:start="63:5" pos:end="63:21"><expr pos:start="63:5" pos:end="63:20"><name pos:start="63:5" pos:end="63:10">mm_end</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <name pos:start="63:14" pos:end="63:16">end</name> <operator pos:start="63:18" pos:end="63:18">-</operator> <literal type="number" pos:start="63:20" pos:end="63:20">3</literal></expr>;</expr_stmt>

    <while pos:start="65:5" pos:end="75:5">while <condition pos:start="65:11" pos:end="65:22">(<expr pos:start="65:12" pos:end="65:21"><name pos:start="65:12" pos:end="65:12">s</name> <operator pos:start="65:14" pos:end="65:14">&lt;</operator> <name pos:start="65:16" pos:end="65:21">mm_end</name></expr>)</condition> <block pos:start="65:24" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:13">

        <decl_stmt pos:start="67:9" pos:end="67:52"><decl pos:start="67:9" pos:end="67:51"><type pos:start="67:9" pos:end="67:25"><specifier pos:start="67:9" pos:end="67:16">register</specifier> <name pos:start="67:18" pos:end="67:25">unsigned</name></type> <name pos:start="67:27" pos:end="67:27">x</name><init pos:start="67:28" pos:end="67:51">= <expr pos:start="67:30" pos:end="67:51"><operator pos:start="67:30" pos:end="67:30">*</operator><operator pos:start="67:31" pos:end="67:31">(</operator><operator pos:start="67:32" pos:end="67:32">(</operator><specifier pos:start="67:33" pos:end="67:37">const</specifier> <name pos:start="67:39" pos:end="67:46">uint32_t</name> <operator pos:start="67:48" pos:end="67:48">*</operator><operator pos:start="67:49" pos:end="67:49">)</operator><name pos:start="67:50" pos:end="67:50">s</name><operator pos:start="67:51" pos:end="67:51">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:59"><expr pos:start="69:9" pos:end="69:58"><operator pos:start="69:9" pos:end="69:9">*</operator><operator pos:start="69:10" pos:end="69:10">(</operator><operator pos:start="69:11" pos:end="69:11">(</operator><name pos:start="69:12" pos:end="69:19">uint32_t</name> <operator pos:start="69:21" pos:end="69:21">*</operator><operator pos:start="69:22" pos:end="69:22">)</operator><name pos:start="69:23" pos:end="69:23">d</name><operator pos:start="69:24" pos:end="69:24">)</operator> <operator pos:start="69:26" pos:end="69:26">=</operator> <operator pos:start="69:28" pos:end="69:28">(</operator><name pos:start="69:29" pos:end="69:29">x</name><operator pos:start="69:30" pos:end="69:30">&amp;</operator><literal type="number" pos:start="69:31" pos:end="69:40">0x7FFF7FFF</literal><operator pos:start="69:41" pos:end="69:41">)</operator> <operator pos:start="69:43" pos:end="69:43">+</operator> <operator pos:start="69:45" pos:end="69:45">(</operator><name pos:start="69:46" pos:end="69:46">x</name><operator pos:start="69:47" pos:end="69:47">&amp;</operator><literal type="number" pos:start="69:48" pos:end="69:57">0x7FE07FE0</literal><operator pos:start="69:58" pos:end="69:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:13"><expr pos:start="71:9" pos:end="71:12"><name pos:start="71:9" pos:end="71:9">d</name><operator pos:start="71:10" pos:end="71:11">+=</operator><literal type="number" pos:start="71:12" pos:end="71:12">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:13"><expr pos:start="73:9" pos:end="73:12"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">+=</operator><literal type="number" pos:start="73:12" pos:end="73:12">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:9">s</name> <operator pos:start="77:11" pos:end="77:11">&lt;</operator> <name pos:start="77:13" pos:end="77:15">end</name></expr>)</condition> <block pos:start="77:18" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:51">

        <decl_stmt pos:start="79:9" pos:end="79:58"><decl pos:start="79:9" pos:end="79:57"><type pos:start="79:9" pos:end="79:31"><specifier pos:start="79:9" pos:end="79:16">register</specifier> <name pos:start="79:18" pos:end="79:25">unsigned</name> <name pos:start="79:27" pos:end="79:31">short</name></type> <name pos:start="79:33" pos:end="79:33">x</name><init pos:start="79:34" pos:end="79:57">= <expr pos:start="79:36" pos:end="79:57"><operator pos:start="79:36" pos:end="79:36">*</operator><operator pos:start="79:37" pos:end="79:37">(</operator><operator pos:start="79:38" pos:end="79:38">(</operator><specifier pos:start="79:39" pos:end="79:43">const</specifier> <name pos:start="79:45" pos:end="79:52">uint16_t</name> <operator pos:start="79:54" pos:end="79:54">*</operator><operator pos:start="79:55" pos:end="79:55">)</operator><name pos:start="79:56" pos:end="79:56">s</name><operator pos:start="79:57" pos:end="79:57">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:51"><expr pos:start="81:9" pos:end="81:50"><operator pos:start="81:9" pos:end="81:9">*</operator><operator pos:start="81:10" pos:end="81:10">(</operator><operator pos:start="81:11" pos:end="81:11">(</operator><name pos:start="81:12" pos:end="81:19">uint16_t</name> <operator pos:start="81:21" pos:end="81:21">*</operator><operator pos:start="81:22" pos:end="81:22">)</operator><name pos:start="81:23" pos:end="81:23">d</name><operator pos:start="81:24" pos:end="81:24">)</operator> <operator pos:start="81:26" pos:end="81:26">=</operator> <operator pos:start="81:28" pos:end="81:28">(</operator><name pos:start="81:29" pos:end="81:29">x</name><operator pos:start="81:30" pos:end="81:30">&amp;</operator><literal type="number" pos:start="81:31" pos:end="81:36">0x7FFF</literal><operator pos:start="81:37" pos:end="81:37">)</operator> <operator pos:start="81:39" pos:end="81:39">+</operator> <operator pos:start="81:41" pos:end="81:41">(</operator><name pos:start="81:42" pos:end="81:42">x</name><operator pos:start="81:43" pos:end="81:43">&amp;</operator><literal type="number" pos:start="81:44" pos:end="81:49">0x7FE0</literal><operator pos:start="81:50" pos:end="81:50">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
