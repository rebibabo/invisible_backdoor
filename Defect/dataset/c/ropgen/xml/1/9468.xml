<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9468.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">gif_put_bits_rev</name><parameter_list pos:start="1:29" pos:end="1:73">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:42">PutBitContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:52"><decl pos:start="1:48" pos:end="1:52"><type pos:start="1:48" pos:end="1:52"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:52">n</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:72"><decl pos:start="1:55" pos:end="1:72"><type pos:start="1:55" pos:end="1:72"><name pos:start="1:55" pos:end="1:62">unsigned</name> <name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">value</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:31">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:24">bit_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">bit_cnt</name></decl>;</decl_stmt>



    <comment type="line" pos:start="11:5" pos:end="11:47">//    printf("put_bits=%d %x\n", n, value);</comment>

    <expr_stmt pos:start="13:5" pos:end="13:41"><expr pos:start="13:5" pos:end="13:40"><call pos:start="13:5" pos:end="13:40"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:40">(<argument pos:start="13:12" pos:end="13:39"><expr pos:start="13:12" pos:end="13:39"><name pos:start="13:12" pos:end="13:12">n</name> <operator pos:start="13:14" pos:end="13:15">==</operator> <literal type="number" pos:start="13:17" pos:end="13:18">32</literal> <operator pos:start="13:20" pos:end="13:21">||</operator> <name pos:start="13:23" pos:end="13:27">value</name> <operator pos:start="13:29" pos:end="13:29">&lt;</operator> <operator pos:start="13:31" pos:end="13:31">(</operator><literal type="number" pos:start="13:32" pos:end="13:33">1U</literal> <operator pos:start="13:35" pos:end="13:36">&lt;&lt;</operator> <name pos:start="13:38" pos:end="13:38">n</name><operator pos:start="13:39" pos:end="13:39">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:11">bit_buf</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:24"><name pos:start="17:15" pos:end="17:15">s</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:24">bit_buf</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:11">bit_cnt</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <literal type="number" pos:start="19:15" pos:end="19:18">32</literal> <operator pos:start="19:18" pos:end="19:18">-</operator> <name pos:start="19:20" pos:end="19:30"><name pos:start="19:20" pos:end="19:20">s</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:30">bit_left</name></name></expr>;</expr_stmt> <comment type="block" pos:start="19:33" pos:end="19:71">/* XXX:lazyness... was = s-&gt;bit_cnt; */</comment>



    <comment type="line" pos:start="23:5" pos:end="23:78">//    printf("n=%d value=%x cnt=%d buf=%x\n", n, value, bit_cnt, bit_buf);</comment>

    <comment type="block" pos:start="25:5" pos:end="25:23">/* XXX: optimize */</comment>

    <if_stmt pos:start="27:5" pos:end="71:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:9">n</name> <operator pos:start="27:11" pos:end="27:11">&lt;</operator> <operator pos:start="27:13" pos:end="27:13">(</operator><literal type="number" pos:start="27:14" pos:end="27:16">32</literal><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:23">bit_cnt</name><operator pos:start="27:24" pos:end="27:24">)</operator></expr>)</condition> <block pos:start="27:27" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:19">

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:15">bit_buf</name> <operator pos:start="29:17" pos:end="29:18">|=</operator> <name pos:start="29:20" pos:end="29:24">value</name> <operator pos:start="29:26" pos:end="29:27">&lt;&lt;</operator> <operator pos:start="29:29" pos:end="29:29">(</operator><name pos:start="29:30" pos:end="29:36">bit_cnt</name><operator pos:start="29:37" pos:end="29:37">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:15">bit_cnt</name><operator pos:start="31:16" pos:end="31:17">+=</operator><name pos:start="31:18" pos:end="31:18">n</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="71:5">else <block pos:start="33:12" pos:end="71:5">{<block_content pos:start="35:9" pos:end="69:9">

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:15">bit_buf</name> <operator pos:start="35:17" pos:end="35:18">|=</operator> <name pos:start="35:20" pos:end="35:24">value</name> <operator pos:start="35:26" pos:end="35:27">&lt;&lt;</operator> <operator pos:start="35:29" pos:end="35:29">(</operator><name pos:start="35:30" pos:end="35:36">bit_cnt</name><operator pos:start="35:37" pos:end="35:37">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:37"><expr pos:start="39:9" pos:end="39:36"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:19"><name pos:start="39:10" pos:end="39:10">s</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:19">buf_ptr</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:29">bit_buf</name> <operator pos:start="39:31" pos:end="39:31">&amp;</operator> <literal type="number" pos:start="39:33" pos:end="39:36">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:46"><expr pos:start="41:9" pos:end="41:45"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:18">buf_ptr</name><index pos:start="41:19" pos:end="41:21">[<expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>]</index></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <operator pos:start="41:25" pos:end="41:25">(</operator><name pos:start="41:26" pos:end="41:32">bit_buf</name> <operator pos:start="41:34" pos:end="41:35">&gt;&gt;</operator> <literal type="number" pos:start="41:37" pos:end="41:37">8</literal><operator pos:start="41:38" pos:end="41:38">)</operator> <operator pos:start="41:40" pos:end="41:40">&amp;</operator> <literal type="number" pos:start="41:42" pos:end="41:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:18">buf_ptr</name><index pos:start="43:19" pos:end="43:21">[<expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">2</literal></expr>]</index></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <operator pos:start="43:25" pos:end="43:25">(</operator><name pos:start="43:26" pos:end="43:32">bit_buf</name> <operator pos:start="43:34" pos:end="43:35">&gt;&gt;</operator> <literal type="number" pos:start="43:37" pos:end="43:38">16</literal><operator pos:start="43:39" pos:end="43:39">)</operator> <operator pos:start="43:41" pos:end="43:41">&amp;</operator> <literal type="number" pos:start="43:43" pos:end="43:46">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:47"><expr pos:start="45:9" pos:end="45:46"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">buf_ptr</name><index pos:start="45:19" pos:end="45:21">[<expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">3</literal></expr>]</index></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <operator pos:start="45:25" pos:end="45:25">(</operator><name pos:start="45:26" pos:end="45:32">bit_buf</name> <operator pos:start="45:34" pos:end="45:35">&gt;&gt;</operator> <literal type="number" pos:start="45:37" pos:end="45:38">24</literal><operator pos:start="45:39" pos:end="45:39">)</operator> <operator pos:start="45:41" pos:end="45:41">&amp;</operator> <literal type="number" pos:start="45:43" pos:end="45:46">0xff</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="49:9" pos:end="49:45">//printf("bitbuf = %08x\n", bit_buf);</comment>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:18">buf_ptr</name></name><operator pos:start="51:19" pos:end="51:20">+=</operator><literal type="number" pos:start="51:21" pos:end="51:21">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:43"><if pos:start="53:9" pos:end="55:43">if <condition pos:start="53:12" pos:end="53:37">(<expr pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:22">buf_ptr</name></name> <operator pos:start="53:24" pos:end="53:25">&gt;=</operator> <name pos:start="53:27" pos:end="53:36"><name pos:start="53:27" pos:end="53:27">s</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:36">buf_end</name></name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:43"><block_content pos:start="55:13" pos:end="55:43">

            <expr_stmt pos:start="55:13" pos:end="55:43"><expr pos:start="55:13" pos:end="55:42"><call pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:16">puts</name><argument_list pos:start="55:17" pos:end="55:42">(<argument pos:start="55:18" pos:end="55:41"><expr pos:start="55:18" pos:end="55:41"><literal type="string" pos:start="55:18" pos:end="55:41">"bit buffer overflow !!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="55:45" pos:end="55:100">// should never happen ! who got rid of the callback ???</comment>

<comment type="line" pos:start="57:1" pos:end="57:34">//            flush_buffer_rev(s);</comment>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:15">bit_cnt</name><operator pos:start="59:16" pos:end="59:16">=</operator><name pos:start="59:17" pos:end="59:23">bit_cnt</name> <operator pos:start="59:25" pos:end="59:25">+</operator> <name pos:start="59:27" pos:end="59:27">n</name> <operator pos:start="59:29" pos:end="59:29">-</operator> <literal type="number" pos:start="59:31" pos:end="59:32">32</literal></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="69:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:19">bit_cnt</name> <operator pos:start="61:21" pos:end="61:22">==</operator> <literal type="number" pos:start="61:24" pos:end="61:24">0</literal></expr>)</condition> <block pos:start="61:27" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:24">

            <expr_stmt pos:start="63:13" pos:end="63:24"><expr pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:19">bit_buf</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:45">

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:19">bit_buf</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:27">value</name> <operator pos:start="67:29" pos:end="67:30">&gt;&gt;</operator> <operator pos:start="67:32" pos:end="67:32">(</operator><name pos:start="67:33" pos:end="67:33">n</name> <operator pos:start="67:35" pos:end="67:35">-</operator> <name pos:start="67:37" pos:end="67:43">bit_cnt</name><operator pos:start="67:44" pos:end="67:44">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:25"><expr pos:start="75:5" pos:end="75:24"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:14">bit_buf</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:24">bit_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:31"><expr pos:start="77:5" pos:end="77:30"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:15">bit_left</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <literal type="number" pos:start="77:19" pos:end="77:22">32</literal> <operator pos:start="77:22" pos:end="77:22">-</operator> <name pos:start="77:24" pos:end="77:30">bit_cnt</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
