<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18688.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">ebml_read_ascii</name><parameter_list pos:start="1:27" pos:end="1:65">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:38">AVIOContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">pb</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:52"><decl pos:start="1:45" pos:end="1:52"><type pos:start="1:45" pos:end="1:52"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:52">size</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">str</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:13">

    <expr_stmt pos:start="5:5" pos:end="5:18"><expr pos:start="5:5" pos:end="5:17"><call pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">av_free</name><argument_list pos:start="5:12" pos:end="5:17">(<argument pos:start="5:13" pos:end="5:16"><expr pos:start="5:13" pos:end="5:16"><operator pos:start="5:13" pos:end="5:13">*</operator><name pos:start="5:14" pos:end="5:16">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="7:5" pos:end="9:69">/* EBML strings are usually not 0-terminated, so we allocate one

     * byte more, read the string and NULL-terminate it ourselves. */</comment>

    <if_stmt pos:start="11:5" pos:end="13:31"><if pos:start="11:5" pos:end="13:31">if <condition pos:start="11:8" pos:end="11:38">(<expr pos:start="11:9" pos:end="11:37"><operator pos:start="11:9" pos:end="11:9">!</operator><operator pos:start="11:10" pos:end="11:10">(</operator><operator pos:start="11:11" pos:end="11:11">*</operator><name pos:start="11:12" pos:end="11:14">str</name> <operator pos:start="11:16" pos:end="11:16">=</operator> <call pos:start="11:18" pos:end="11:36"><name pos:start="11:18" pos:end="11:26">av_malloc</name><argument_list pos:start="11:27" pos:end="11:36">(<argument pos:start="11:28" pos:end="11:35"><expr pos:start="11:28" pos:end="11:35"><name pos:start="11:28" pos:end="11:31">size</name> <operator pos:start="11:33" pos:end="11:33">+</operator> <literal type="number" pos:start="11:35" pos:end="11:35">1</literal></expr></argument>)</argument_list></call><operator pos:start="11:37" pos:end="11:37">)</operator></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:31"><block_content pos:start="13:9" pos:end="13:31">

        <return pos:start="13:9" pos:end="13:31">return <expr pos:start="13:16" pos:end="13:30"><call pos:start="13:16" pos:end="13:30"><name pos:start="13:16" pos:end="13:22">AVERROR</name><argument_list pos:start="13:23" pos:end="13:30">(<argument pos:start="13:24" pos:end="13:29"><expr pos:start="13:24" pos:end="13:29"><name pos:start="13:24" pos:end="13:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:54">(<expr pos:start="15:9" pos:end="15:53"><call pos:start="15:9" pos:end="15:45"><name pos:start="15:9" pos:end="15:17">avio_read</name><argument_list pos:start="15:18" pos:end="15:45">(<argument pos:start="15:19" pos:end="15:20"><expr pos:start="15:19" pos:end="15:20"><name pos:start="15:19" pos:end="15:20">pb</name></expr></argument>, <argument pos:start="15:23" pos:end="15:38"><expr pos:start="15:23" pos:end="15:38"><operator pos:start="15:23" pos:end="15:23">(</operator><name pos:start="15:24" pos:end="15:30">uint8_t</name> <operator pos:start="15:32" pos:end="15:32">*</operator><operator pos:start="15:33" pos:end="15:33">)</operator> <operator pos:start="15:35" pos:end="15:35">*</operator><name pos:start="15:36" pos:end="15:38">str</name></expr></argument>, <argument pos:start="15:41" pos:end="15:44"><expr pos:start="15:41" pos:end="15:44"><name pos:start="15:41" pos:end="15:44">size</name></expr></argument>)</argument_list></call> <operator pos:start="15:47" pos:end="15:48">!=</operator> <name pos:start="15:50" pos:end="15:53">size</name></expr>)</condition> <block pos:start="15:56" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:28">

        <expr_stmt pos:start="17:9" pos:end="17:22"><expr pos:start="17:9" pos:end="17:21"><call pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:16">av_freep</name><argument_list pos:start="17:17" pos:end="17:21">(<argument pos:start="17:18" pos:end="17:20"><expr pos:start="17:18" pos:end="17:20"><name pos:start="17:18" pos:end="17:20">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:28">return <expr pos:start="19:16" pos:end="19:27"><call pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:27">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:24"><expr pos:start="23:5" pos:end="23:23"><operator pos:start="23:5" pos:end="23:5">(</operator><operator pos:start="23:6" pos:end="23:6">*</operator><name pos:start="23:7" pos:end="23:9">str</name><operator pos:start="23:10" pos:end="23:10">)</operator><index pos:start="23:11" pos:end="23:16">[<expr pos:start="23:12" pos:end="23:15"><name pos:start="23:12" pos:end="23:15">size</name></expr>]</index> <operator pos:start="23:18" pos:end="23:18">=</operator> <literal type="char" pos:start="23:20" pos:end="23:23">'\0'</literal></expr>;</expr_stmt>



    <return pos:start="27:5" pos:end="27:13">return <expr pos:start="27:12" pos:end="27:12"><literal type="number" pos:start="27:12" pos:end="27:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
