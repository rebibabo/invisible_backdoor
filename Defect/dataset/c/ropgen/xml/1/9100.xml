<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9100.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">print_type_size</name><parameter_list pos:start="1:28" pos:end="3:40">(<parameter pos:start="1:29" pos:end="1:38"><decl pos:start="1:29" pos:end="1:38"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:35">Visitor</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">v</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">uint64_t</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">obj</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:71"><decl pos:start="1:56" pos:end="1:71"><type pos:start="1:56" pos:end="1:71"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:65">char</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:71">name</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:32">Error</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier><modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:32">

    <decl_stmt pos:start="7:5" pos:end="7:74"><decl pos:start="7:5" pos:end="7:73"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">StringOutputVisitor</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:28">sov</name> <init pos:start="7:30" pos:end="7:73">= <expr pos:start="7:32" pos:end="7:73"><call pos:start="7:32" pos:end="7:73"><name pos:start="7:32" pos:end="7:40">DO_UPCAST</name><argument_list pos:start="7:41" pos:end="7:73">(<argument pos:start="7:42" pos:end="7:60"><expr pos:start="7:42" pos:end="7:60"><name pos:start="7:42" pos:end="7:60">StringOutputVisitor</name></expr></argument>, <argument pos:start="7:63" pos:end="7:69"><expr pos:start="7:63" pos:end="7:69"><name pos:start="7:63" pos:end="7:69">visitor</name></expr></argument>, <argument pos:start="7:72" pos:end="7:72"><expr pos:start="7:72" pos:end="7:72"><name pos:start="7:72" pos:end="7:72">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:62"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:21">char</name></type> <name pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:30">suffixes</name><index pos:start="9:31" pos:end="9:32">[]</index></name> <init pos:start="9:34" pos:end="9:62">= <expr pos:start="9:36" pos:end="9:62"><block pos:start="9:36" pos:end="9:62">{ <expr pos:start="9:38" pos:end="9:40"><literal type="char" pos:start="9:38" pos:end="9:40">'B'</literal></expr>, <expr pos:start="9:43" pos:end="9:45"><literal type="char" pos:start="9:43" pos:end="9:45">'K'</literal></expr>, <expr pos:start="9:48" pos:end="9:50"><literal type="char" pos:start="9:48" pos:end="9:50">'M'</literal></expr>, <expr pos:start="9:53" pos:end="9:55"><literal type="char" pos:start="9:53" pos:end="9:55">'G'</literal></expr>, <expr pos:start="9:58" pos:end="9:60"><literal type="char" pos:start="9:58" pos:end="9:60">'T'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:16">div</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:19" pos:end="11:21">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:19"><name pos:start="19:10" pos:end="19:12">sov</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:19">human</name></name></expr>)</condition> <block pos:start="19:22" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:15">

        <expr_stmt pos:start="21:9" pos:end="21:56"><expr pos:start="21:9" pos:end="21:55"><name pos:start="21:9" pos:end="21:11">out</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:55"><name pos:start="21:15" pos:end="21:29">g_strdup_printf</name><argument_list pos:start="21:30" pos:end="21:55">(<argument pos:start="21:31" pos:end="21:36"><expr pos:start="21:31" pos:end="21:36"><literal type="string" pos:start="21:31" pos:end="21:36">"%llu"</literal></expr></argument>, <argument pos:start="21:39" pos:end="21:54"><expr pos:start="21:39" pos:end="21:54"><operator pos:start="21:39" pos:end="21:39">(</operator><name pos:start="21:40" pos:end="21:43">long</name> <name pos:start="21:45" pos:end="21:48">long</name><operator pos:start="21:49" pos:end="21:49">)</operator> <operator pos:start="21:51" pos:end="21:51">*</operator><name pos:start="21:52" pos:end="21:54">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><call pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:25">string_output_set</name><argument_list pos:start="23:26" pos:end="23:35">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">sov</name></expr></argument>, <argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:15"><expr pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:7">val</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <operator pos:start="31:11" pos:end="31:11">*</operator><name pos:start="31:12" pos:end="31:14">obj</name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:36">/* Compute floor(log2(val)).  */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:24"><expr pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:5">i</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <literal type="number" pos:start="37:9" pos:end="37:12">64</literal> <operator pos:start="37:12" pos:end="37:12">-</operator> <call pos:start="37:14" pos:end="37:23"><name pos:start="37:14" pos:end="37:18">clz64</name><argument_list pos:start="37:19" pos:end="37:23">(<argument pos:start="37:20" pos:end="37:22"><expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:66">/* Find the power of 1024 that we'll display as the units.  */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:12"><expr pos:start="43:5" pos:end="43:11"><name pos:start="43:5" pos:end="43:5">i</name> <operator pos:start="43:7" pos:end="43:8">/=</operator> <literal type="number" pos:start="43:10" pos:end="43:11">10</literal></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:34">(<expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:9">i</name> <operator pos:start="45:11" pos:end="45:12">&gt;=</operator> <call pos:start="45:14" pos:end="45:33"><name pos:start="45:14" pos:end="45:23">ARRAY_SIZE</name><argument_list pos:start="45:24" pos:end="45:33">(<argument pos:start="45:25" pos:end="45:32"><expr pos:start="45:25" pos:end="45:32"><name pos:start="45:25" pos:end="45:32">suffixes</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:36" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:37">

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:9">i</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:22">ARRAY_SIZE</name><argument_list pos:start="47:23" pos:end="47:32">(<argument pos:start="47:24" pos:end="47:31"><expr pos:start="47:24" pos:end="47:31"><name pos:start="47:24" pos:end="47:31">suffixes</name></expr></argument>)</argument_list></call> <operator pos:start="47:34" pos:end="47:34">-</operator> <literal type="number" pos:start="47:36" pos:end="47:36">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:7">div</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <literal type="number" pos:start="51:11" pos:end="51:14">1ULL</literal> <operator pos:start="51:16" pos:end="51:17">&lt;&lt;</operator> <operator pos:start="51:19" pos:end="51:19">(</operator><name pos:start="51:20" pos:end="51:20">i</name> <operator pos:start="51:22" pos:end="51:22">*</operator> <literal type="number" pos:start="51:24" pos:end="51:25">10</literal><operator pos:start="51:26" pos:end="51:26">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:68"><expr pos:start="55:5" pos:end="55:67"><name pos:start="55:5" pos:end="55:7">out</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:67"><name pos:start="55:11" pos:end="55:25">g_strdup_printf</name><argument_list pos:start="55:26" pos:end="55:67">(<argument pos:start="55:27" pos:end="55:36"><expr pos:start="55:27" pos:end="55:36"><literal type="string" pos:start="55:27" pos:end="55:36">"%0.03f%c"</literal></expr></argument>, <argument pos:start="55:39" pos:end="55:53"><expr pos:start="55:39" pos:end="55:53"><operator pos:start="55:39" pos:end="55:39">(</operator><name pos:start="55:40" pos:end="55:45">double</name><operator pos:start="55:46" pos:end="55:46">)</operator><name pos:start="55:47" pos:end="55:49">val</name><operator pos:start="55:50" pos:end="55:50">/</operator><name pos:start="55:51" pos:end="55:53">div</name></expr></argument>, <argument pos:start="55:56" pos:end="55:66"><expr pos:start="55:56" pos:end="55:66"><name pos:start="55:56" pos:end="55:66"><name pos:start="55:56" pos:end="55:63">suffixes</name><index pos:start="55:64" pos:end="55:66">[<expr pos:start="55:65" pos:end="55:65"><name pos:start="55:65" pos:end="55:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><call pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:21">string_output_set</name><argument_list pos:start="57:22" pos:end="57:31">(<argument pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:25">sov</name></expr></argument>, <argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
