<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9986.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">scsi_dma_restart_bh</name><parameter_list pos:start="1:32" pos:end="1:45">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:38"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSIDiskState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:29">= <expr pos:start="5:24" pos:end="5:29"><name pos:start="5:24" pos:end="5:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SCSIRequest</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">SCSIDiskReq</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:18">qemu_bh_delete</name><argument_list pos:start="13:19" pos:end="13:25">(<argument pos:start="13:20" pos:end="13:24"><expr pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:20">s</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:24">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:9">bh</name></name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:16">NULL</name></expr>;</expr_stmt>



    <macro pos:start="19:5" pos:end="19:48"><name pos:start="19:5" pos:end="19:18">QTAILQ_FOREACH</name><argument_list pos:start="19:19" pos:end="19:48">(<argument pos:start="19:20" pos:end="19:22">req</argument>, <argument pos:start="19:25" pos:end="19:41">&amp;s-&gt;qdev.requests</argument>, <argument pos:start="19:44" pos:end="19:47">next</argument>)</argument_list></macro> <block pos:start="19:50" pos:end="65:5">{<block_content pos:start="21:9" pos:end="63:9">

        <expr_stmt pos:start="21:9" pos:end="21:45"><expr pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:9">r</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:44"><name pos:start="21:13" pos:end="21:21">DO_UPCAST</name><argument_list pos:start="21:22" pos:end="21:44">(<argument pos:start="21:23" pos:end="21:33"><expr pos:start="21:23" pos:end="21:33"><name pos:start="21:23" pos:end="21:33">SCSIDiskReq</name></expr></argument>, <argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">req</name></expr></argument>, <argument pos:start="21:41" pos:end="21:43"><expr pos:start="21:41" pos:end="21:43"><name pos:start="21:41" pos:end="21:43">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="63:9"><if pos:start="23:9" pos:end="63:9">if <condition pos:start="23:12" pos:end="23:46">(<expr pos:start="23:13" pos:end="23:45"><name pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:13">r</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:21">status</name></name> <operator pos:start="23:23" pos:end="23:23">&amp;</operator> <name pos:start="23:25" pos:end="23:45">SCSI_REQ_STATUS_RETRY</name></expr>)</condition> <block pos:start="23:48" pos:end="63:9">{<block_content pos:start="25:13" pos:end="61:13">

            <decl_stmt pos:start="25:13" pos:end="25:35"><decl pos:start="25:13" pos:end="25:34"><type pos:start="25:13" pos:end="25:15"><name pos:start="25:13" pos:end="25:15">int</name></type> <name pos:start="25:17" pos:end="25:22">status</name> <init pos:start="25:24" pos:end="25:34">= <expr pos:start="25:26" pos:end="25:34"><name pos:start="25:26" pos:end="25:34"><name pos:start="25:26" pos:end="25:26">r</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:34">status</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="27:13" pos:end="27:20"><decl pos:start="27:13" pos:end="27:19"><type pos:start="27:13" pos:end="27:15"><name pos:start="27:13" pos:end="27:15">int</name></type> <name pos:start="27:17" pos:end="27:19">ret</name></decl>;</decl_stmt>



            <expr_stmt pos:start="31:13" pos:end="33:75"><expr pos:start="31:13" pos:end="33:74"><name pos:start="31:13" pos:end="31:21"><name pos:start="31:13" pos:end="31:13">r</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:21">status</name></name> <operator pos:start="31:23" pos:end="31:24">&amp;=</operator>

                <operator pos:start="33:17" pos:end="33:17">~</operator><operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:39">SCSI_REQ_STATUS_RETRY</name> <operator pos:start="33:41" pos:end="33:41">|</operator> <name pos:start="33:43" pos:end="33:73">SCSI_REQ_STATUS_RETRY_TYPE_MASK</name><operator pos:start="33:74" pos:end="33:74">)</operator></expr>;</expr_stmt>



            <switch pos:start="37:13" pos:end="61:13">switch <condition pos:start="37:20" pos:end="37:61">(<expr pos:start="37:21" pos:end="37:60"><name pos:start="37:21" pos:end="37:26">status</name> <operator pos:start="37:28" pos:end="37:28">&amp;</operator> <name pos:start="37:30" pos:end="37:60">SCSI_REQ_STATUS_RETRY_TYPE_MASK</name></expr>)</condition> <block pos:start="37:63" pos:end="61:13">{<block_content pos:start="39:13" pos:end="59:17">

            <case pos:start="39:13" pos:end="39:44">case <expr pos:start="39:18" pos:end="39:43"><name pos:start="39:18" pos:end="39:43">SCSI_REQ_STATUS_RETRY_READ</name></expr>:</case>

                <expr_stmt pos:start="41:17" pos:end="41:40"><expr pos:start="41:17" pos:end="41:39"><call pos:start="41:17" pos:end="41:39"><name pos:start="41:17" pos:end="41:30">scsi_read_data</name><argument_list pos:start="41:31" pos:end="41:39">(<argument pos:start="41:32" pos:end="41:38"><expr pos:start="41:32" pos:end="41:38"><operator pos:start="41:32" pos:end="41:32">&amp;</operator><name pos:start="41:33" pos:end="41:38"><name pos:start="41:33" pos:end="41:33">r</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:38">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="43:17" pos:end="43:22">break;</break>

            <case pos:start="45:13" pos:end="45:45">case <expr pos:start="45:18" pos:end="45:44"><name pos:start="45:18" pos:end="45:44">SCSI_REQ_STATUS_RETRY_WRITE</name></expr>:</case>

                <expr_stmt pos:start="47:17" pos:end="47:41"><expr pos:start="47:17" pos:end="47:40"><call pos:start="47:17" pos:end="47:40"><name pos:start="47:17" pos:end="47:31">scsi_write_data</name><argument_list pos:start="47:32" pos:end="47:40">(<argument pos:start="47:33" pos:end="47:39"><expr pos:start="47:33" pos:end="47:39"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:39"><name pos:start="47:34" pos:end="47:34">r</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:39">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="49:17" pos:end="49:22">break;</break>

            <case pos:start="51:13" pos:end="51:45">case <expr pos:start="51:18" pos:end="51:44"><name pos:start="51:18" pos:end="51:44">SCSI_REQ_STATUS_RETRY_FLUSH</name></expr>:</case>

                <expr_stmt pos:start="53:17" pos:end="53:68"><expr pos:start="53:17" pos:end="53:67"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:67"><name pos:start="53:23" pos:end="53:47">scsi_disk_emulate_command</name><argument_list pos:start="53:48" pos:end="53:67">(<argument pos:start="53:49" pos:end="53:49"><expr pos:start="53:49" pos:end="53:49"><name pos:start="53:49" pos:end="53:49">r</name></expr></argument>, <argument pos:start="53:52" pos:end="53:66"><expr pos:start="53:52" pos:end="53:66"><name pos:start="53:52" pos:end="53:66"><name pos:start="53:52" pos:end="53:52">r</name><operator pos:start="53:53" pos:end="53:54">-&gt;</operator><name pos:start="53:55" pos:end="53:57">iov</name><operator pos:start="53:58" pos:end="53:58">.</operator><name pos:start="53:59" pos:end="53:66">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="55:17" pos:end="59:17"><if pos:start="55:17" pos:end="59:17">if <condition pos:start="55:20" pos:end="55:29">(<expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:23">ret</name> <operator pos:start="55:25" pos:end="55:26">==</operator> <literal type="number" pos:start="55:28" pos:end="55:28">0</literal></expr>)</condition> <block pos:start="55:31" pos:end="59:17">{<block_content pos:start="57:21" pos:end="57:61">

                    <expr_stmt pos:start="57:21" pos:end="57:61"><expr pos:start="57:21" pos:end="57:60"><call pos:start="57:21" pos:end="57:60"><name pos:start="57:21" pos:end="57:41">scsi_command_complete</name><argument_list pos:start="57:42" pos:end="57:60">(<argument pos:start="57:43" pos:end="57:43"><expr pos:start="57:43" pos:end="57:43"><name pos:start="57:43" pos:end="57:43">r</name></expr></argument>, <argument pos:start="57:46" pos:end="57:49"><expr pos:start="57:46" pos:end="57:49"><name pos:start="57:46" pos:end="57:49">GOOD</name></expr></argument>, <argument pos:start="57:52" pos:end="57:59"><expr pos:start="57:52" pos:end="57:59"><name pos:start="57:52" pos:end="57:59">NO_SENSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></switch>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
