<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25125.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">sd_create</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:41">filename</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:51">QemuOpts</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">opts</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="201:1">{<block_content pos:start="7:5" pos:end="199:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">vid</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:22">backing_file</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">buf</name> <init pos:start="13:15" pos:end="13:20">= <expr pos:start="13:17" pos:end="13:20"><name pos:start="13:17" pos:end="13:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:21">BDRVSheepdogState</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:24">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:32"><name pos:start="17:10" pos:end="17:12">tag</name><index pos:start="17:13" pos:end="17:32">[<expr pos:start="17:14" pos:end="17:31"><name pos:start="17:14" pos:end="17:31">SD_MAX_VDI_TAG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19">snapid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:17">prealloc</name> <init pos:start="21:19" pos:end="21:25">= <expr pos:start="21:21" pos:end="21:25"><name pos:start="21:21" pos:end="21:25">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:5">s</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:44"><name pos:start="25:9" pos:end="25:17">g_malloc0</name><argument_list pos:start="25:18" pos:end="25:44">(<argument pos:start="25:19" pos:end="25:43"><expr pos:start="25:19" pos:end="25:43"><sizeof pos:start="25:19" pos:end="25:43">sizeof<argument_list pos:start="25:25" pos:end="25:43">(<argument pos:start="25:26" pos:end="25:42"><expr pos:start="25:26" pos:end="25:42"><name pos:start="25:26" pos:end="25:42">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><call pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:10">memset</name><argument_list pos:start="29:11" pos:end="29:31">(<argument pos:start="29:12" pos:end="29:14"><expr pos:start="29:12" pos:end="29:14"><name pos:start="29:12" pos:end="29:14">tag</name></expr></argument>, <argument pos:start="29:17" pos:end="29:17"><expr pos:start="29:17" pos:end="29:17"><literal type="number" pos:start="29:17" pos:end="29:17">0</literal></expr></argument>, <argument pos:start="29:20" pos:end="29:30"><expr pos:start="29:20" pos:end="29:30"><sizeof pos:start="29:20" pos:end="29:30">sizeof<argument_list pos:start="29:26" pos:end="29:30">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><call pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:14">strstr</name><argument_list pos:start="31:15" pos:end="31:31">(<argument pos:start="31:16" pos:end="31:23"><expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23">filename</name></expr></argument>, <argument pos:start="31:26" pos:end="31:30"><expr pos:start="31:26" pos:end="31:30"><literal type="string" pos:start="31:26" pos:end="31:30">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:34" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:63">

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:62"><name pos:start="33:15" pos:end="33:26">sd_parse_uri</name><argument_list pos:start="33:27" pos:end="33:62">(<argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">s</name></expr></argument>, <argument pos:start="33:31" pos:end="33:38"><expr pos:start="33:31" pos:end="33:38"><name pos:start="33:31" pos:end="33:38">filename</name></expr></argument>, <argument pos:start="33:41" pos:end="33:47"><expr pos:start="33:41" pos:end="33:47"><name pos:start="33:41" pos:end="33:47"><name pos:start="33:41" pos:end="33:41">s</name><operator pos:start="33:42" pos:end="33:43">-&gt;</operator><name pos:start="33:44" pos:end="33:47">name</name></name></expr></argument>, <argument pos:start="33:50" pos:end="33:56"><expr pos:start="33:50" pos:end="33:56"><operator pos:start="33:50" pos:end="33:50">&amp;</operator><name pos:start="33:51" pos:end="33:56">snapid</name></expr></argument>, <argument pos:start="33:59" pos:end="33:61"><expr pos:start="33:59" pos:end="33:61"><name pos:start="33:59" pos:end="33:61">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:64">

        <expr_stmt pos:start="37:9" pos:end="37:64"><expr pos:start="37:9" pos:end="37:63"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:63"><name pos:start="37:15" pos:end="37:27">parse_vdiname</name><argument_list pos:start="37:28" pos:end="37:63">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">s</name></expr></argument>, <argument pos:start="37:32" pos:end="37:39"><expr pos:start="37:32" pos:end="37:39"><name pos:start="37:32" pos:end="37:39">filename</name></expr></argument>, <argument pos:start="37:42" pos:end="37:48"><expr pos:start="37:42" pos:end="37:48"><name pos:start="37:42" pos:end="37:48"><name pos:start="37:42" pos:end="37:42">s</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:48">name</name></name></expr></argument>, <argument pos:start="37:51" pos:end="37:57"><expr pos:start="37:51" pos:end="37:57"><operator pos:start="37:51" pos:end="37:51">&amp;</operator><name pos:start="37:52" pos:end="37:57">snapid</name></expr></argument>, <argument pos:start="37:60" pos:end="37:62"><expr pos:start="37:60" pos:end="37:62"><name pos:start="37:60" pos:end="37:62">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition> <block pos:start="41:18" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17">

        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><call pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:48">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:47"><expr pos:start="43:26" pos:end="43:47"><literal type="string" pos:start="43:26" pos:end="43:47">"Can't parse filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:17">goto <name pos:start="45:14" pos:end="45:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:71"><expr pos:start="51:5" pos:end="51:70"><name pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:12">inode</name><operator pos:start="51:13" pos:end="51:13">.</operator><name pos:start="51:14" pos:end="51:21">vdi_size</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <call pos:start="51:25" pos:end="51:70"><name pos:start="51:25" pos:end="51:45">qemu_opt_get_size_del</name><argument_list pos:start="51:46" pos:end="51:70">(<argument pos:start="51:47" pos:end="51:50"><expr pos:start="51:47" pos:end="51:50"><name pos:start="51:47" pos:end="51:50">opts</name></expr></argument>, <argument pos:start="51:53" pos:end="51:66"><expr pos:start="51:53" pos:end="51:66"><name pos:start="51:53" pos:end="51:66">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="51:69" pos:end="51:69"><expr pos:start="51:69" pos:end="51:69"><literal type="number" pos:start="51:69" pos:end="51:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:66"><expr pos:start="53:5" pos:end="53:65"><name pos:start="53:5" pos:end="53:16">backing_file</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:65"><name pos:start="53:20" pos:end="53:35">qemu_opt_get_del</name><argument_list pos:start="53:36" pos:end="53:65">(<argument pos:start="53:37" pos:end="53:40"><expr pos:start="53:37" pos:end="53:40"><name pos:start="53:37" pos:end="53:40">opts</name></expr></argument>, <argument pos:start="53:43" pos:end="53:64"><expr pos:start="53:43" pos:end="53:64"><name pos:start="53:43" pos:end="53:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:53"><expr pos:start="55:5" pos:end="55:52"><name pos:start="55:5" pos:end="55:7">buf</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:52"><name pos:start="55:11" pos:end="55:26">qemu_opt_get_del</name><argument_list pos:start="55:27" pos:end="55:52">(<argument pos:start="55:28" pos:end="55:31"><expr pos:start="55:28" pos:end="55:31"><name pos:start="55:28" pos:end="55:31">opts</name></expr></argument>, <argument pos:start="55:34" pos:end="55:51"><expr pos:start="55:34" pos:end="55:51"><name pos:start="55:34" pos:end="55:51">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="73:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:36">(<expr pos:start="57:9" pos:end="57:35"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:12">buf</name> <operator pos:start="57:14" pos:end="57:15">||</operator> <operator pos:start="57:17" pos:end="57:17">!</operator><call pos:start="57:18" pos:end="57:35"><name pos:start="57:18" pos:end="57:23">strcmp</name><argument_list pos:start="57:24" pos:end="57:35">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">buf</name></expr></argument>, <argument pos:start="57:30" pos:end="57:34"><expr pos:start="57:30" pos:end="57:34"><literal type="string" pos:start="57:30" pos:end="57:34">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:38" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:25">

        <expr_stmt pos:start="59:9" pos:end="59:25"><expr pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:16">prealloc</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:24">false</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:36">(<expr pos:start="61:16" pos:end="61:35"><operator pos:start="61:16" pos:end="61:16">!</operator><call pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:22">strcmp</name><argument_list pos:start="61:23" pos:end="61:35">(<argument pos:start="61:24" pos:end="61:26"><expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:26">buf</name></expr></argument>, <argument pos:start="61:29" pos:end="61:34"><expr pos:start="61:29" pos:end="61:34"><literal type="string" pos:start="61:29" pos:end="61:34">"full"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:38" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:24">

        <expr_stmt pos:start="63:9" pos:end="63:24"><expr pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:16">prealloc</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:23">true</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="73:5">else <block pos:start="65:12" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:17">

        <expr_stmt pos:start="67:9" pos:end="67:66"><expr pos:start="67:9" pos:end="67:65"><call pos:start="67:9" pos:end="67:65"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="67:65">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>, <argument pos:start="67:26" pos:end="67:59"><expr pos:start="67:26" pos:end="67:59"><literal type="string" pos:start="67:26" pos:end="67:59">"Invalid preallocation mode: '%s'"</literal></expr></argument>, <argument pos:start="67:62" pos:end="67:64"><expr pos:start="67:62" pos:end="67:64"><name pos:start="67:62" pos:end="67:64">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">-</operator><name pos:start="69:16" pos:end="69:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:17">goto <name pos:start="71:14" pos:end="71:16">out</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:16"><expr pos:start="77:5" pos:end="77:15"><call pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:15">(<argument pos:start="77:12" pos:end="77:14"><expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:7">buf</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:54"><name pos:start="79:11" pos:end="79:26">qemu_opt_get_del</name><argument_list pos:start="79:27" pos:end="79:54">(<argument pos:start="79:28" pos:end="79:31"><expr pos:start="79:28" pos:end="79:31"><name pos:start="79:28" pos:end="79:31">opts</name></expr></argument>, <argument pos:start="79:34" pos:end="79:53"><expr pos:start="79:34" pos:end="79:53"><name pos:start="79:34" pos:end="79:53">BLOCK_OPT_REDUNDANCY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="93:5"><if pos:start="81:5" pos:end="93:5">if <condition pos:start="81:8" pos:end="81:12">(<expr pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">buf</name></expr>)</condition> <block pos:start="81:14" pos:end="93:5">{<block_content pos:start="83:9" pos:end="91:9">

        <expr_stmt pos:start="83:9" pos:end="83:39"><expr pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:38"><name pos:start="83:15" pos:end="83:30">parse_redundancy</name><argument_list pos:start="83:31" pos:end="83:38">(<argument pos:start="83:32" pos:end="83:32"><expr pos:start="83:32" pos:end="83:32"><name pos:start="83:32" pos:end="83:32">s</name></expr></argument>, <argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">&lt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition> <block pos:start="85:22" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:21">

            <expr_stmt pos:start="87:13" pos:end="87:67"><expr pos:start="87:13" pos:end="87:66"><call pos:start="87:13" pos:end="87:66"><name pos:start="87:13" pos:end="87:22">error_setg</name><argument_list pos:start="87:23" pos:end="87:66">(<argument pos:start="87:24" pos:end="87:27"><expr pos:start="87:24" pos:end="87:27"><name pos:start="87:24" pos:end="87:27">errp</name></expr></argument>, <argument pos:start="87:30" pos:end="87:60"><expr pos:start="87:30" pos:end="87:60"><literal type="string" pos:start="87:30" pos:end="87:60">"Invalid redundancy mode: '%s'"</literal></expr></argument>, <argument pos:start="87:63" pos:end="87:65"><expr pos:start="87:63" pos:end="87:65"><name pos:start="87:63" pos:end="87:65">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="89:13" pos:end="89:21">goto <name pos:start="89:18" pos:end="89:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:44">(<expr pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:16">inode</name><operator pos:start="97:17" pos:end="97:17">.</operator><name pos:start="97:18" pos:end="97:25">vdi_size</name></name> <operator pos:start="97:27" pos:end="97:27">&gt;</operator> <name pos:start="97:29" pos:end="97:43">SD_MAX_VDI_SIZE</name></expr>)</condition> <block pos:start="97:46" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:17">

        <expr_stmt pos:start="99:9" pos:end="99:47"><expr pos:start="99:9" pos:end="99:46"><call pos:start="99:9" pos:end="99:46"><name pos:start="99:9" pos:end="99:18">error_setg</name><argument_list pos:start="99:19" pos:end="99:46">(<argument pos:start="99:20" pos:end="99:23"><expr pos:start="99:20" pos:end="99:23"><name pos:start="99:20" pos:end="99:23">errp</name></expr></argument>, <argument pos:start="99:26" pos:end="99:45"><expr pos:start="99:26" pos:end="99:45"><literal type="string" pos:start="99:26" pos:end="99:45">"too big image size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <operator pos:start="101:15" pos:end="101:15">-</operator><name pos:start="101:16" pos:end="101:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="169:5"><if pos:start="109:5" pos:end="169:5">if <condition pos:start="109:8" pos:end="109:21">(<expr pos:start="109:9" pos:end="109:20"><name pos:start="109:9" pos:end="109:20">backing_file</name></expr>)</condition> <block pos:start="109:23" pos:end="169:5">{<block_content pos:start="111:9" pos:end="167:23">

        <decl_stmt pos:start="111:9" pos:end="111:29"><decl pos:start="111:9" pos:end="111:28"><type pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:24">BlockDriverState</name> <modifier pos:start="111:26" pos:end="111:26">*</modifier></type><name pos:start="111:27" pos:end="111:28">bs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="113:9" pos:end="113:32"><decl pos:start="113:9" pos:end="113:31"><type pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:25">BDRVSheepdogState</name> <modifier pos:start="113:27" pos:end="113:27">*</modifier></type><name pos:start="113:28" pos:end="113:31">base</name></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:25"><decl pos:start="115:9" pos:end="115:24"><type pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:19">BlockDriver</name> <modifier pos:start="115:21" pos:end="115:21">*</modifier></type><name pos:start="115:22" pos:end="115:24">drv</name></decl>;</decl_stmt>



        <comment type="block" pos:start="119:9" pos:end="119:66">/* Currently, only Sheepdog backing image is supported. */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:53"><expr pos:start="121:9" pos:end="121:52"><name pos:start="121:9" pos:end="121:11">drv</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="121:52"><name pos:start="121:15" pos:end="121:32">bdrv_find_protocol</name><argument_list pos:start="121:33" pos:end="121:52">(<argument pos:start="121:34" pos:end="121:45"><expr pos:start="121:34" pos:end="121:45"><name pos:start="121:34" pos:end="121:45">backing_file</name></expr></argument>, <argument pos:start="121:48" pos:end="121:51"><expr pos:start="121:48" pos:end="121:51"><name pos:start="121:48" pos:end="121:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="123:64">(<expr pos:start="123:13" pos:end="123:63"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:16">drv</name> <operator pos:start="123:18" pos:end="123:19">||</operator> <call pos:start="123:21" pos:end="123:58"><name pos:start="123:21" pos:end="123:26">strcmp</name><argument_list pos:start="123:27" pos:end="123:58">(<argument pos:start="123:28" pos:end="123:45"><expr pos:start="123:28" pos:end="123:45"><name pos:start="123:28" pos:end="123:45"><name pos:start="123:28" pos:end="123:30">drv</name><operator pos:start="123:31" pos:end="123:32">-&gt;</operator><name pos:start="123:33" pos:end="123:45">protocol_name</name></name></expr></argument>, <argument pos:start="123:48" pos:end="123:57"><expr pos:start="123:48" pos:end="123:57"><literal type="string" pos:start="123:48" pos:end="123:57">"sheepdog"</literal></expr></argument>)</argument_list></call> <operator pos:start="123:60" pos:end="123:61">!=</operator> <literal type="number" pos:start="123:63" pos:end="123:63">0</literal></expr>)</condition> <block pos:start="123:66" pos:end="131:9">{<block_content pos:start="125:13" pos:end="129:21">

            <expr_stmt pos:start="125:13" pos:end="125:70"><expr pos:start="125:13" pos:end="125:69"><call pos:start="125:13" pos:end="125:69"><name pos:start="125:13" pos:end="125:22">error_setg</name><argument_list pos:start="125:23" pos:end="125:69">(<argument pos:start="125:24" pos:end="125:27"><expr pos:start="125:24" pos:end="125:27"><name pos:start="125:24" pos:end="125:27">errp</name></expr></argument>, <argument pos:start="125:30" pos:end="125:68"><expr pos:start="125:30" pos:end="125:68"><literal type="string" pos:start="125:30" pos:end="125:68">"backing_file must be a sheepdog image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:26"><expr pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <operator pos:start="127:19" pos:end="127:19">-</operator><name pos:start="127:20" pos:end="127:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:21">goto <name pos:start="129:18" pos:end="129:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:18"><expr pos:start="135:9" pos:end="135:17"><name pos:start="135:9" pos:end="135:10">bs</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <name pos:start="135:14" pos:end="135:17">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="139:30"><expr pos:start="137:9" pos:end="139:29"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <call pos:start="137:15" pos:end="139:29"><name pos:start="137:15" pos:end="137:23">bdrv_open</name><argument_list pos:start="137:24" pos:end="139:29">(<argument pos:start="137:25" pos:end="137:27"><expr pos:start="137:25" pos:end="137:27"><operator pos:start="137:25" pos:end="137:25">&amp;</operator><name pos:start="137:26" pos:end="137:27">bs</name></expr></argument>, <argument pos:start="137:30" pos:end="137:41"><expr pos:start="137:30" pos:end="137:41"><name pos:start="137:30" pos:end="137:41">backing_file</name></expr></argument>, <argument pos:start="137:44" pos:end="137:47"><expr pos:start="137:44" pos:end="137:47"><name pos:start="137:44" pos:end="137:47">NULL</name></expr></argument>, <argument pos:start="137:50" pos:end="137:53"><expr pos:start="137:50" pos:end="137:53"><name pos:start="137:50" pos:end="137:53">NULL</name></expr></argument>, <argument pos:start="137:56" pos:end="137:70"><expr pos:start="137:56" pos:end="137:70"><name pos:start="137:56" pos:end="137:70">BDRV_O_PROTOCOL</name></expr></argument>, <argument pos:start="137:73" pos:end="137:76"><expr pos:start="137:73" pos:end="137:76"><name pos:start="137:73" pos:end="137:76">NULL</name></expr></argument>,

                        <argument pos:start="139:25" pos:end="139:28"><expr pos:start="139:25" pos:end="139:28"><name pos:start="139:25" pos:end="139:28">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="145:9"><if pos:start="141:9" pos:end="145:9">if <condition pos:start="141:12" pos:end="141:20">(<expr pos:start="141:13" pos:end="141:19"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">&lt;</operator> <literal type="number" pos:start="141:19" pos:end="141:19">0</literal></expr>)</condition> <block pos:start="141:22" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:21">

            <goto pos:start="143:13" pos:end="143:21">goto <name pos:start="143:18" pos:end="143:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:12">base</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <name pos:start="149:16" pos:end="149:25"><name pos:start="149:16" pos:end="149:17">bs</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:25">opaque</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="153:9" pos:end="163:9"><if pos:start="153:9" pos:end="163:9">if <condition pos:start="153:12" pos:end="153:39">(<expr pos:start="153:13" pos:end="153:38"><operator pos:start="153:13" pos:end="153:13">!</operator><call pos:start="153:14" pos:end="153:38"><name pos:start="153:14" pos:end="153:24">is_snapshot</name><argument_list pos:start="153:25" pos:end="153:38">(<argument pos:start="153:26" pos:end="153:37"><expr pos:start="153:26" pos:end="153:37"><operator pos:start="153:26" pos:end="153:26">&amp;</operator><name pos:start="153:27" pos:end="153:37"><name pos:start="153:27" pos:end="153:30">base</name><operator pos:start="153:31" pos:end="153:32">-&gt;</operator><name pos:start="153:33" pos:end="153:37">inode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:41" pos:end="163:9">{<block_content pos:start="155:13" pos:end="161:21">

            <expr_stmt pos:start="155:13" pos:end="155:69"><expr pos:start="155:13" pos:end="155:68"><call pos:start="155:13" pos:end="155:68"><name pos:start="155:13" pos:end="155:22">error_setg</name><argument_list pos:start="155:23" pos:end="155:68">(<argument pos:start="155:24" pos:end="155:27"><expr pos:start="155:24" pos:end="155:27"><name pos:start="155:24" pos:end="155:27">errp</name></expr></argument>, <argument pos:start="155:30" pos:end="155:67"><expr pos:start="155:30" pos:end="155:67"><literal type="string" pos:start="155:30" pos:end="155:67">"cannot clone from a non snapshot vdi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:27"><expr pos:start="157:13" pos:end="157:26"><call pos:start="157:13" pos:end="157:26"><name pos:start="157:13" pos:end="157:22">bdrv_unref</name><argument_list pos:start="157:23" pos:end="157:26">(<argument pos:start="157:24" pos:end="157:25"><expr pos:start="157:24" pos:end="157:25"><name pos:start="157:24" pos:end="157:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:26"><expr pos:start="159:13" pos:end="159:25"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <operator pos:start="159:19" pos:end="159:19">-</operator><name pos:start="159:20" pos:end="159:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="161:13" pos:end="161:21">goto <name pos:start="161:18" pos:end="161:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:45"><expr pos:start="165:9" pos:end="165:44"><name pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:16">inode</name><operator pos:start="165:17" pos:end="165:17">.</operator><name pos:start="165:18" pos:end="165:23">vdi_id</name></name> <operator pos:start="165:25" pos:end="165:25">=</operator> <name pos:start="165:27" pos:end="165:44"><name pos:start="165:27" pos:end="165:30">base</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:37">inode</name><operator pos:start="165:38" pos:end="165:38">.</operator><name pos:start="165:39" pos:end="165:44">vdi_id</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:23"><expr pos:start="167:9" pos:end="167:22"><call pos:start="167:9" pos:end="167:22"><name pos:start="167:9" pos:end="167:18">bdrv_unref</name><argument_list pos:start="167:19" pos:end="167:22">(<argument pos:start="167:20" pos:end="167:21"><expr pos:start="167:20" pos:end="167:21"><name pos:start="167:20" pos:end="167:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:44"><expr pos:start="173:5" pos:end="173:43"><name pos:start="173:5" pos:end="173:18"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:18">aio_context</name></name> <operator pos:start="173:20" pos:end="173:20">=</operator> <call pos:start="173:22" pos:end="173:43"><name pos:start="173:22" pos:end="173:41">qemu_get_aio_context</name><argument_list pos:start="173:42" pos:end="173:43">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:41"><expr pos:start="175:5" pos:end="175:40"><name pos:start="175:5" pos:end="175:7">ret</name> <operator pos:start="175:9" pos:end="175:9">=</operator> <call pos:start="175:11" pos:end="175:40"><name pos:start="175:11" pos:end="175:22">do_sd_create</name><argument_list pos:start="175:23" pos:end="175:40">(<argument pos:start="175:24" pos:end="175:24"><expr pos:start="175:24" pos:end="175:24"><name pos:start="175:24" pos:end="175:24">s</name></expr></argument>, <argument pos:start="175:27" pos:end="175:30"><expr pos:start="175:27" pos:end="175:30"><operator pos:start="175:27" pos:end="175:27">&amp;</operator><name pos:start="175:28" pos:end="175:30">vid</name></expr></argument>, <argument pos:start="175:33" pos:end="175:33"><expr pos:start="175:33" pos:end="175:33"><literal type="number" pos:start="175:33" pos:end="175:33">0</literal></expr></argument>, <argument pos:start="175:36" pos:end="175:39"><expr pos:start="175:36" pos:end="175:39"><name pos:start="175:36" pos:end="175:39">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:12">(<expr pos:start="177:9" pos:end="177:11"><name pos:start="177:9" pos:end="177:11">ret</name></expr>)</condition> <block pos:start="177:14" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:17">

        <goto pos:start="179:9" pos:end="179:17">goto <name pos:start="179:14" pos:end="179:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="185:5" pos:end="189:5"><if pos:start="185:5" pos:end="189:5">if <condition pos:start="185:8" pos:end="185:17">(<expr pos:start="185:9" pos:end="185:16"><name pos:start="185:9" pos:end="185:16">prealloc</name></expr>)</condition> <block pos:start="185:19" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:42">

        <expr_stmt pos:start="187:9" pos:end="187:42"><expr pos:start="187:9" pos:end="187:41"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:41"><name pos:start="187:15" pos:end="187:25">sd_prealloc</name><argument_list pos:start="187:26" pos:end="187:41">(<argument pos:start="187:27" pos:end="187:34"><expr pos:start="187:27" pos:end="187:34"><name pos:start="187:27" pos:end="187:34">filename</name></expr></argument>, <argument pos:start="187:37" pos:end="187:40"><expr pos:start="187:37" pos:end="187:40"><name pos:start="187:37" pos:end="187:40">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="191:1" pos:end="191:4"><name pos:start="191:1" pos:end="191:3">out</name>:</label>

    <expr_stmt pos:start="193:5" pos:end="193:25"><expr pos:start="193:5" pos:end="193:24"><call pos:start="193:5" pos:end="193:24"><name pos:start="193:5" pos:end="193:10">g_free</name><argument_list pos:start="193:11" pos:end="193:24">(<argument pos:start="193:12" pos:end="193:23"><expr pos:start="193:12" pos:end="193:23"><name pos:start="193:12" pos:end="193:23">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:16"><expr pos:start="195:5" pos:end="195:15"><call pos:start="195:5" pos:end="195:15"><name pos:start="195:5" pos:end="195:10">g_free</name><argument_list pos:start="195:11" pos:end="195:15">(<argument pos:start="195:12" pos:end="195:14"><expr pos:start="195:12" pos:end="195:14"><name pos:start="195:12" pos:end="195:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:14"><expr pos:start="197:5" pos:end="197:13"><call pos:start="197:5" pos:end="197:13"><name pos:start="197:5" pos:end="197:10">g_free</name><argument_list pos:start="197:11" pos:end="197:13">(<argument pos:start="197:12" pos:end="197:12"><expr pos:start="197:12" pos:end="197:12"><name pos:start="197:12" pos:end="197:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="199:5" pos:end="199:15">return <expr pos:start="199:12" pos:end="199:14"><name pos:start="199:12" pos:end="199:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
