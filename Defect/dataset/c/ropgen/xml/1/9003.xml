<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9003.c" pos:tabs="8"><function pos:start="1:1" pos:end="36:15"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:37">kvm_arch_get_supported_cpuid</name><parameter_list pos:start="1:38" pos:end="2:62">(<parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:46">KVMState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:68">function</name></decl></parameter>,
                                      <parameter pos:start="2:39" pos:end="2:52"><decl pos:start="2:39" pos:end="2:52"><type pos:start="2:39" pos:end="2:52"><name pos:start="2:39" pos:end="2:46">uint32_t</name></type> <name pos:start="2:48" pos:end="2:52">index</name></decl></parameter>, <parameter pos:start="2:55" pos:end="2:61"><decl pos:start="2:55" pos:end="2:61"><type pos:start="2:55" pos:end="2:61"><name pos:start="2:55" pos:end="2:57">int</name></type> <name pos:start="2:59" pos:end="2:61">reg</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="36:15">{<block_content pos:start="4:5" pos:end="36:15">
    <decl_stmt pos:start="4:5" pos:end="4:29"><decl pos:start="4:5" pos:end="4:28"><type pos:start="4:5" pos:end="4:23"><name pos:start="4:5" pos:end="4:21"><name pos:start="4:5" pos:end="4:10">struct</name> <name pos:start="4:12" pos:end="4:21">kvm_cpuid2</name></name> <modifier pos:start="4:23" pos:end="4:23">*</modifier></type><name pos:start="4:24" pos:end="4:28">cpuid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">ret</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:25"><decl pos:start="6:5" pos:end="6:24"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">uint32_t</name></type> <name pos:start="6:14" pos:end="6:24">cpuid_1_edx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:14">found</name> <init pos:start="7:16" pos:end="7:22">= <expr pos:start="7:18" pos:end="7:22"><name pos:start="7:18" pos:end="7:22">false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:35"><expr pos:start="8:5" pos:end="8:34"><name pos:start="8:5" pos:end="8:9">cpuid</name> <operator pos:start="8:11" pos:end="8:11">=</operator> <call pos:start="8:13" pos:end="8:34"><name pos:start="8:13" pos:end="8:31">get_supported_cpuid</name><argument_list pos:start="8:32" pos:end="8:34">(<argument pos:start="8:33" pos:end="8:33"><expr pos:start="8:33" pos:end="8:33"><name pos:start="8:33" pos:end="8:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:78"><decl pos:start="9:5" pos:end="9:77"><type pos:start="9:5" pos:end="9:29"><name pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:27">kvm_cpuid_entry2</name></name> <modifier pos:start="9:29" pos:end="9:29">*</modifier></type><name pos:start="9:30" pos:end="9:34">entry</name> <init pos:start="9:36" pos:end="9:77">= <expr pos:start="9:38" pos:end="9:77"><call pos:start="9:38" pos:end="9:77"><name pos:start="9:38" pos:end="9:53">cpuid_find_entry</name><argument_list pos:start="9:54" pos:end="9:77">(<argument pos:start="9:55" pos:end="9:59"><expr pos:start="9:55" pos:end="9:59"><name pos:start="9:55" pos:end="9:59">cpuid</name></expr></argument>, <argument pos:start="9:62" pos:end="9:69"><expr pos:start="9:62" pos:end="9:69"><name pos:start="9:62" pos:end="9:69">function</name></expr></argument>, <argument pos:start="9:72" pos:end="9:76"><expr pos:start="9:72" pos:end="9:76"><name pos:start="9:72" pos:end="9:76">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="10:5" pos:end="36:15"><if pos:start="10:5" pos:end="36:15">if <condition pos:start="10:8" pos:end="10:14">(<expr pos:start="10:9" pos:end="10:13"><name pos:start="10:9" pos:end="10:13">entry</name></expr>)</condition> <block pos:start="10:16" pos:end="36:15">{<block_content pos:start="11:9" pos:end="36:15">
        <expr_stmt pos:start="11:9" pos:end="11:21"><expr pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:13">found</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <name pos:start="11:17" pos:end="11:20">true</name></expr>;</expr_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:46"><expr pos:start="12:9" pos:end="12:45"><name pos:start="12:9" pos:end="12:11">ret</name> <operator pos:start="12:13" pos:end="12:13">=</operator> <call pos:start="12:15" pos:end="12:45"><name pos:start="12:15" pos:end="12:33">cpuid_entry_get_reg</name><argument_list pos:start="12:34" pos:end="12:45">(<argument pos:start="12:35" pos:end="12:39"><expr pos:start="12:35" pos:end="12:39"><name pos:start="12:35" pos:end="12:39">entry</name></expr></argument>, <argument pos:start="12:42" pos:end="12:44"><expr pos:start="12:42" pos:end="12:44"><name pos:start="12:42" pos:end="12:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="13:5" pos:end="13:52">/* Fixups for the data returned by KVM, below */</comment>
    <if_stmt pos:start="14:5" pos:end="36:15"><if pos:start="14:5" pos:end="17:5">if <condition pos:start="14:8" pos:end="14:38">(<expr pos:start="14:9" pos:end="14:37"><name pos:start="14:9" pos:end="14:16">function</name> <operator pos:start="14:18" pos:end="14:19">==</operator> <literal type="number" pos:start="14:21" pos:end="14:21">1</literal> <operator pos:start="14:23" pos:end="14:24">&amp;&amp;</operator> <name pos:start="14:26" pos:end="14:28">reg</name> <operator pos:start="14:30" pos:end="14:31">==</operator> <name pos:start="14:33" pos:end="14:37">R_EDX</name></expr>)</condition> <block pos:start="14:40" pos:end="17:5">{<block_content pos:start="16:9" pos:end="16:62">
        <comment type="block" pos:start="15:9" pos:end="15:65">/* KVM before 2.6.30 misreports the following features */</comment>
        <expr_stmt pos:start="16:9" pos:end="16:62"><expr pos:start="16:9" pos:end="16:61"><name pos:start="16:9" pos:end="16:11">ret</name> <operator pos:start="16:13" pos:end="16:14">|=</operator> <name pos:start="16:16" pos:end="16:25">CPUID_MTRR</name> <operator pos:start="16:27" pos:end="16:27">|</operator> <name pos:start="16:29" pos:end="16:37">CPUID_PAT</name> <operator pos:start="16:39" pos:end="16:39">|</operator> <name pos:start="16:41" pos:end="16:49">CPUID_MCE</name> <operator pos:start="16:51" pos:end="16:51">|</operator> <name pos:start="16:53" pos:end="16:61">CPUID_MCA</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="17:7" pos:end="36:15">else if <condition pos:start="17:15" pos:end="17:45">(<expr pos:start="17:16" pos:end="17:44"><name pos:start="17:16" pos:end="17:23">function</name> <operator pos:start="17:25" pos:end="17:26">==</operator> <literal type="number" pos:start="17:28" pos:end="17:28">1</literal> <operator pos:start="17:30" pos:end="17:31">&amp;&amp;</operator> <name pos:start="17:33" pos:end="17:35">reg</name> <operator pos:start="17:37" pos:end="17:38">==</operator> <name pos:start="17:40" pos:end="17:44">R_ECX</name></expr>)</condition> <block pos:start="17:47" pos:end="36:15">{<block_content pos:start="34:5" pos:end="36:15">
        <comment type="block" pos:start="18:9" pos:end="33:36">/* We can set the hypervisor flag, even if KVM does not return it on
         * GET_SUPPORTED_CPUID
        ret |= CPUID_EXT_HYPERVISOR;
        /* tsc-deadline flag is not returned by GET_SUPPORTED_CPUID, but it
         * can be enabled if the kernel has KVM_CAP_TSC_DEADLINE_TIMER,
         * and the irqchip is in the kernel.
        if (kvm_irqchip_in_kernel() &amp;&amp;
                kvm_check_extension(s, KVM_CAP_TSC_DEADLINE_TIMER)) {
            ret |= CPUID_EXT_TSC_DEADLINE_TIMER;
    } else if (function == 0x80000001 &amp;&amp; reg == R_EDX) {
        /* On Intel, kvm returns cpuid according to the Intel spec,
         * so add missing bits according to the AMD spec:
        cpuid_1_edx = kvm_arch_get_supported_cpuid(s, 1, 0, R_EDX);
        ret |= cpuid_1_edx &amp; CPUID_EXT2_AMD_ALIASES;
    g_free(cpuid);
    /* fallback for older kernels */</comment>
    <if_stmt pos:start="34:5" pos:end="36:15"><if pos:start="34:5" pos:end="36:15">if <condition pos:start="34:8" pos:end="34:51">(<expr pos:start="34:9" pos:end="34:50"><operator pos:start="34:9" pos:end="34:9">(</operator><name pos:start="34:10" pos:end="34:17">function</name> <operator pos:start="34:19" pos:end="34:20">==</operator> <name pos:start="34:22" pos:end="34:39">KVM_CPUID_FEATURES</name><operator pos:start="34:40" pos:end="34:40">)</operator> <operator pos:start="34:42" pos:end="34:43">&amp;&amp;</operator> <operator pos:start="34:45" pos:end="34:45">!</operator><name pos:start="34:46" pos:end="34:50">found</name></expr>)</condition> <block pos:start="34:53" pos:end="36:15">{<block_content pos:start="35:9" pos:end="36:15">
        <expr_stmt pos:start="35:9" pos:end="35:35"><expr pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:34"><name pos:start="35:15" pos:end="35:31">get_para_features</name><argument_list pos:start="35:32" pos:end="35:34">(<argument pos:start="35:33" pos:end="35:33"><expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="36:5" pos:end="36:15">return <expr pos:start="36:12" pos:end="36:14"><name pos:start="36:12" pos:end="36:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
