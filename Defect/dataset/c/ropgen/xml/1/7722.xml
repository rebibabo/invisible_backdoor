<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7722.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">H264_CHROMA_MC8_TMPL</name><parameter_list pos:start="1:33" pos:end="1:124">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:40">uint8_t</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dst</name></decl></parameter><comment type="block" pos:start="1:46" pos:end="1:56">/*align 8*/</comment>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">src</name></decl></parameter><comment type="block" pos:start="1:71" pos:end="1:81">/*align 1*/</comment>, <parameter pos:start="1:84" pos:end="1:93"><decl pos:start="1:84" pos:end="1:93"><type pos:start="1:84" pos:end="1:93"><name pos:start="1:84" pos:end="1:86">int</name></type> <name pos:start="1:88" pos:end="1:93">stride</name></decl></parameter>, <parameter pos:start="1:96" pos:end="1:100"><decl pos:start="1:96" pos:end="1:100"><type pos:start="1:96" pos:end="1:100"><name pos:start="1:96" pos:end="1:98">int</name></type> <name pos:start="1:100" pos:end="1:100">h</name></decl></parameter>, <parameter pos:start="1:103" pos:end="1:107"><decl pos:start="1:103" pos:end="1:107"><type pos:start="1:103" pos:end="1:107"><name pos:start="1:103" pos:end="1:105">int</name></type> <name pos:start="1:107" pos:end="1:107">x</name></decl></parameter>, <parameter pos:start="1:110" pos:end="1:114"><decl pos:start="1:110" pos:end="1:114"><type pos:start="1:110" pos:end="1:114"><name pos:start="1:110" pos:end="1:112">int</name></type> <name pos:start="1:114" pos:end="1:114">y</name></decl></parameter>, <parameter pos:start="1:117" pos:end="1:123"><decl pos:start="1:117" pos:end="1:123"><type pos:start="1:117" pos:end="1:123"><name pos:start="1:117" pos:end="1:119">int</name></type> <name pos:start="1:121" pos:end="1:123">rnd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="5:5" pos:end="261:6">

    <if_stmt pos:start="5:5" pos:end="13:5"><if pos:start="5:5" pos:end="13:5">if<condition pos:start="5:7" pos:end="5:20">(<expr pos:start="5:8" pos:end="5:19"><name pos:start="5:8" pos:end="5:8">y</name><operator pos:start="5:9" pos:end="5:10">==</operator><literal type="number" pos:start="5:11" pos:end="5:11">0</literal> <operator pos:start="5:13" pos:end="5:14">&amp;&amp;</operator> <name pos:start="5:16" pos:end="5:16">x</name><operator pos:start="5:17" pos:end="5:18">==</operator><literal type="number" pos:start="5:19" pos:end="5:19">0</literal></expr>)</condition> <block pos:start="5:22" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:15">

        <comment type="block" pos:start="7:9" pos:end="7:30">/* no filter needed */</comment>

        <expr_stmt pos:start="9:9" pos:end="9:49"><expr pos:start="9:9" pos:end="9:48"><call pos:start="9:9" pos:end="9:48"><name pos:start="9:9" pos:end="9:27">H264_CHROMA_MC8_MV0</name><argument_list pos:start="9:28" pos:end="9:48">(<argument pos:start="9:29" pos:end="9:31"><expr pos:start="9:29" pos:end="9:31"><name pos:start="9:29" pos:end="9:31">dst</name></expr></argument>, <argument pos:start="9:34" pos:end="9:36"><expr pos:start="9:34" pos:end="9:36"><name pos:start="9:34" pos:end="9:36">src</name></expr></argument>, <argument pos:start="9:39" pos:end="9:44"><expr pos:start="9:39" pos:end="9:44"><name pos:start="9:39" pos:end="9:44">stride</name></expr></argument>, <argument pos:start="9:47" pos:end="9:47"><expr pos:start="9:47" pos:end="9:47"><name pos:start="9:47" pos:end="9:47">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="11:9" pos:end="11:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><call pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:38">(<argument pos:start="17:12" pos:end="17:37"><expr pos:start="17:12" pos:end="17:37"><name pos:start="17:12" pos:end="17:12">x</name><operator pos:start="17:13" pos:end="17:13">&lt;</operator><literal type="number" pos:start="17:14" pos:end="17:14">8</literal> <operator pos:start="17:16" pos:end="17:17">&amp;&amp;</operator> <name pos:start="17:19" pos:end="17:19">y</name><operator pos:start="17:20" pos:end="17:20">&lt;</operator><literal type="number" pos:start="17:21" pos:end="17:21">8</literal> <operator pos:start="17:23" pos:end="17:24">&amp;&amp;</operator> <name pos:start="17:26" pos:end="17:26">x</name><operator pos:start="17:27" pos:end="17:28">&gt;=</operator><literal type="number" pos:start="17:29" pos:end="17:29">0</literal> <operator pos:start="17:31" pos:end="17:32">&amp;&amp;</operator> <name pos:start="17:34" pos:end="17:34">y</name><operator pos:start="17:35" pos:end="17:36">&gt;=</operator><literal type="number" pos:start="17:37" pos:end="17:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="159:5"><if pos:start="21:5" pos:end="159:5">if<condition pos:start="21:7" pos:end="21:20">(<expr pos:start="21:8" pos:end="21:19"><name pos:start="21:8" pos:end="21:8">y</name><operator pos:start="21:9" pos:end="21:10">==</operator><literal type="number" pos:start="21:11" pos:end="21:11">0</literal> <operator pos:start="21:13" pos:end="21:14">||</operator> <name pos:start="21:16" pos:end="21:16">x</name><operator pos:start="21:17" pos:end="21:18">==</operator><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition>

    <block pos:start="23:5" pos:end="159:5">{<block_content pos:start="27:9" pos:end="157:15">

        <comment type="block" pos:start="25:9" pos:end="25:39">/* 1 dimensional filter only */</comment>

        <asm pos:start="27:9" pos:end="39:59">asm <specifier pos:start="27:13" pos:end="27:20">volatile</specifier>(

            "movd %0, %%xmm7 \n\t"

            "movq %1, %%xmm6 \n\t"

            "pshuflw $0, %%xmm7, %%xmm7 \n\t"

            "movlhps %%xmm6, %%xmm6 \n\t"

            "movlhps %%xmm7, %%xmm7 \n\t"

            :: "r"(255*(x+y)+8), "m"(rnd<operator pos:start="39:41" pos:end="39:41">?</operator>ff_pw_4:ff_pw_3));</asm>



        <if_stmt pos:start="43:9" pos:end="155:9"><if pos:start="43:9" pos:end="99:9">if<condition pos:start="43:11" pos:end="43:13">(<expr pos:start="43:12" pos:end="43:12"><name pos:start="43:12" pos:end="43:12">x</name></expr>)</condition> <block pos:start="43:15" pos:end="99:9">{<block_content pos:start="45:13" pos:end="97:14">

            <asm pos:start="45:13" pos:end="97:14">asm <specifier pos:start="45:17" pos:end="45:24">volatile</specifier>(

                "1: \n\t"

                "movq (%1), %%xmm0 \n\t"

                "movq 1(%1), %%xmm1 \n\t"

                "movq (%1,%3), %%xmm2 \n\t"

                "movq 1(%1,%3), %%xmm3 \n\t"

                "punpcklbw %%xmm1, %%xmm0 \n\t"

                "punpcklbw %%xmm3, %%xmm2 \n\t"

                "pmaddubsw %%xmm7, %%xmm0 \n\t"

                "pmaddubsw %%xmm7, %%xmm2 \n\t"

         AVG_OP("movq (%0), %%xmm4 \n\t")

         AVG_OP("movhps (%0,%3), %%xmm4 \n\t")

                "paddw %%xmm6, %%xmm0 \n\t"

                "paddw %%xmm6, %%xmm2 \n\t"

                "psrlw $3, %%xmm0 \n\t"

                "psrlw $3, %%xmm2 \n\t"

                "packuswb %%xmm2, %%xmm0 \n\t"

         AVG_OP("pavgb %%xmm4, %%xmm0 \n\t")

                "movq %%xmm0, (%0) \n\t"

                "movhps %%xmm0, (%0,%3) \n\t"

                "sub $2, %2 \n\t"

                "lea (%1,%3,2), %1 \n\t"

                "lea (%0,%3,2), %0 \n\t"

                "jg 1b \n\t"

                :"+r"(dst), "+r"(src), "+r"(h)

                :"r"((long)stride)

            );</asm>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="155:9">else <block pos:start="99:16" pos:end="155:9">{<block_content pos:start="101:13" pos:end="153:14">

            <asm pos:start="101:13" pos:end="153:14">asm <specifier pos:start="101:17" pos:end="101:24">volatile</specifier>(

                "1: \n\t"

                "movq (%1), %%xmm0 \n\t"

                "movq (%1,%3), %%xmm1 \n\t"

                "movdqa %%xmm1, %%xmm2 \n\t"

                "movq (%1,%3,2), %%xmm3 \n\t"

                "punpcklbw %%xmm1, %%xmm0 \n\t"

                "punpcklbw %%xmm3, %%xmm2 \n\t"

                "pmaddubsw %%xmm7, %%xmm0 \n\t"

                "pmaddubsw %%xmm7, %%xmm2 \n\t"

         AVG_OP("movq (%0), %%xmm4 \n\t")

         AVG_OP("movhps (%0,%3), %%xmm4 \n\t")

                "paddw %%xmm6, %%xmm0 \n\t"

                "paddw %%xmm6, %%xmm2 \n\t"

                "psrlw $3, %%xmm0 \n\t"

                "psrlw $3, %%xmm2 \n\t"

                "packuswb %%xmm2, %%xmm0 \n\t"

         AVG_OP("pavgb %%xmm4, %%xmm0 \n\t")

                "movq %%xmm0, (%0) \n\t"

                "movhps %%xmm0, (%0,%3) \n\t"

                "sub $2, %2 \n\t"

                "lea (%1,%3,2), %1 \n\t"

                "lea (%0,%3,2), %0 \n\t"

                "jg 1b \n\t"

                :"+r"(dst), "+r"(src), "+r"(h)

                :"r"((long)stride)

            );</asm>

        </block_content>}</block></else></if_stmt>

        <return pos:start="157:9" pos:end="157:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:32">/* general case, bilinear */</comment>

    <asm pos:start="165:5" pos:end="183:6">asm <specifier pos:start="165:9" pos:end="165:16">volatile</specifier>(

        "movd %0, %%xmm7 \n\t"

        "movd %1, %%xmm6 \n\t"

        "movdqa %2, %%xmm5 \n\t"

        "pshuflw $0, %%xmm7, %%xmm7 \n\t"

        "pshuflw $0, %%xmm6, %%xmm6 \n\t"

        "movlhps %%xmm7, %%xmm7 \n\t"

        "movlhps %%xmm6, %%xmm6 \n\t"

        :: "r"((x*255+8)*(8-y)), "r"((x*255+8)*y), "m"(rnd<operator pos:start="181:59" pos:end="181:59">?</operator>ff_pw_32:ff_pw_28)

    );</asm>



    <asm pos:start="187:5" pos:end="261:6">asm <specifier pos:start="187:9" pos:end="187:16">volatile</specifier>(

        "movq (%1), %%xmm0 \n\t"

        "movq 1(%1), %%xmm1 \n\t"

        "punpcklbw %%xmm1, %%xmm0 \n\t"

        "add %3, %1 \n\t"

        "1: \n\t"

        "movq (%1), %%xmm1 \n\t"

        "movq 1(%1), %%xmm2 \n\t"

        "movq (%1,%3), %%xmm3 \n\t"

        "movq 1(%1,%3), %%xmm4 \n\t"

        "lea (%1,%3,2), %1 \n\t"

        "punpcklbw %%xmm2, %%xmm1 \n\t"

        "punpcklbw %%xmm4, %%xmm3 \n\t"

        "movdqa %%xmm1, %%xmm2 \n\t"

        "movdqa %%xmm3, %%xmm4 \n\t"

        "pmaddubsw %%xmm7, %%xmm0 \n\t"

        "pmaddubsw %%xmm6, %%xmm1 \n\t"

        "pmaddubsw %%xmm7, %%xmm2 \n\t"

        "pmaddubsw %%xmm6, %%xmm3 \n\t"

        "paddw %%xmm5, %%xmm0 \n\t"

        "paddw %%xmm5, %%xmm2 \n\t"

        "paddw %%xmm0, %%xmm1 \n\t"

        "paddw %%xmm2, %%xmm3 \n\t"

        "movdqa %%xmm4, %%xmm0 \n\t"

        "psrlw $6, %%xmm1 \n\t"

        "psrlw $6, %%xmm3 \n\t"

 AVG_OP("movq (%0), %%xmm2 \n\t")

 AVG_OP("movhps (%0,%3), %%xmm2 \n\t")

        "packuswb %%xmm3, %%xmm1 \n\t"

 AVG_OP("pavgb %%xmm2, %%xmm1 \n\t")

        "movq %%xmm1, (%0)\n\t"

        "movhps %%xmm1, (%0,%3)\n\t"

        "sub $2, %2 \n\t"

        "lea (%0,%3,2), %0 \n\t"

        "jg 1b \n\t"

        :"+r"(dst), "+r"(src), "+r"(h)

        :"r"((long)stride)

    );</asm>

</block_content>}</block></function>
</unit>
