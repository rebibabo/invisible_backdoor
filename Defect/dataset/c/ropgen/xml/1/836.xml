<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/836.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">usb_host_handle_control</name><parameter_list pos:start="1:35" pos:end="1:66">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:48">USBHostDevice</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:62">USBPacket</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:65">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:25">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:23">usbdevfs_urb</name></name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:28">urb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AsyncURB</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">aurb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:18">value</name></decl>, <decl pos:start="9:21" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:25">index</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="19:7">/* 

     * Process certain standard device requests.

     * These are infrequent and are processed synchronously.

     */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:9">value</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:43"><name pos:start="21:13" pos:end="21:23">le16_to_cpu</name><argument_list pos:start="21:24" pos:end="21:43">(<argument pos:start="21:25" pos:end="21:42"><expr pos:start="21:25" pos:end="21:42"><name pos:start="21:25" pos:end="21:42"><name pos:start="21:25" pos:end="21:25">s</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:31">ctrl</name><operator pos:start="21:32" pos:end="21:32">.</operator><name pos:start="21:33" pos:end="21:35">req</name><operator pos:start="21:36" pos:end="21:36">.</operator><name pos:start="21:37" pos:end="21:42">wValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:9">index</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:43"><name pos:start="23:13" pos:end="23:23">le16_to_cpu</name><argument_list pos:start="23:24" pos:end="23:43">(<argument pos:start="23:25" pos:end="23:42"><expr pos:start="23:25" pos:end="23:42"><name pos:start="23:25" pos:end="23:42"><name pos:start="23:25" pos:end="23:25">s</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:31">ctrl</name><operator pos:start="23:32" pos:end="23:32">.</operator><name pos:start="23:33" pos:end="23:35">req</name><operator pos:start="23:36" pos:end="23:36">.</operator><name pos:start="23:37" pos:end="23:42">wIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="31:21"><expr pos:start="27:5" pos:end="31:20"><call pos:start="27:5" pos:end="31:20"><name pos:start="27:5" pos:end="27:11">dprintf</name><argument_list pos:start="27:12" pos:end="31:20">(<argument pos:start="27:13" pos:end="27:70"><expr pos:start="27:13" pos:end="27:70"><literal type="string" pos:start="27:13" pos:end="27:70">"husb: ctrl type 0x%x req 0x%x val 0x%x index %u len %u\n"</literal></expr></argument>,

        <argument pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:15">ctrl</name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:19">req</name><operator pos:start="29:20" pos:end="29:20">.</operator><name pos:start="29:21" pos:end="29:32">bRequestType</name></name></expr></argument>, <argument pos:start="29:35" pos:end="29:54"><expr pos:start="29:35" pos:end="29:54"><name pos:start="29:35" pos:end="29:54"><name pos:start="29:35" pos:end="29:35">s</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:41">ctrl</name><operator pos:start="29:42" pos:end="29:42">.</operator><name pos:start="29:43" pos:end="29:45">req</name><operator pos:start="29:46" pos:end="29:46">.</operator><name pos:start="29:47" pos:end="29:54">bRequest</name></name></expr></argument>, <argument pos:start="29:57" pos:end="29:61"><expr pos:start="29:57" pos:end="29:61"><name pos:start="29:57" pos:end="29:61">value</name></expr></argument>, <argument pos:start="29:64" pos:end="29:68"><expr pos:start="29:64" pos:end="29:68"><name pos:start="29:64" pos:end="29:68">index</name></expr></argument>, 

        <argument pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:15">ctrl</name><operator pos:start="31:16" pos:end="31:16">.</operator><name pos:start="31:17" pos:end="31:19">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="51:5"><if pos:start="35:5" pos:end="51:5">if <condition pos:start="35:8" pos:end="35:38">(<expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:15">ctrl</name><operator pos:start="35:16" pos:end="35:16">.</operator><name pos:start="35:17" pos:end="35:19">req</name><operator pos:start="35:20" pos:end="35:20">.</operator><name pos:start="35:21" pos:end="35:32">bRequestType</name></name> <operator pos:start="35:34" pos:end="35:35">==</operator> <literal type="number" pos:start="35:37" pos:end="35:37">0</literal></expr>)</condition> <block pos:start="35:40" pos:end="51:5">{<block_content pos:start="37:9" pos:end="49:9">

        <switch pos:start="37:9" pos:end="49:9">switch <condition pos:start="37:16" pos:end="37:37">(<expr pos:start="37:17" pos:end="37:36"><name pos:start="37:17" pos:end="37:36"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:23">ctrl</name><operator pos:start="37:24" pos:end="37:24">.</operator><name pos:start="37:25" pos:end="37:27">req</name><operator pos:start="37:28" pos:end="37:28">.</operator><name pos:start="37:29" pos:end="37:36">bRequest</name></name></expr>)</condition> <block pos:start="37:39" pos:end="49:9">{<block_content pos:start="39:9" pos:end="47:56">

        <case pos:start="39:9" pos:end="39:33">case <expr pos:start="39:14" pos:end="39:32"><name pos:start="39:14" pos:end="39:32">USB_REQ_SET_ADDRESS</name></expr>:</case>

            <return pos:start="41:13" pos:end="41:50">return <expr pos:start="41:20" pos:end="41:49"><call pos:start="41:20" pos:end="41:49"><name pos:start="41:20" pos:end="41:39">usb_host_set_address</name><argument_list pos:start="41:40" pos:end="41:49">(<argument pos:start="41:41" pos:end="41:41"><expr pos:start="41:41" pos:end="41:41"><name pos:start="41:41" pos:end="41:41">s</name></expr></argument>, <argument pos:start="41:44" pos:end="41:48"><expr pos:start="41:44" pos:end="41:48"><name pos:start="41:44" pos:end="41:48">value</name></expr></argument>)</argument_list></call></expr>;</return>



        <case pos:start="45:9" pos:end="45:39">case <expr pos:start="45:14" pos:end="45:38"><name pos:start="45:14" pos:end="45:38">USB_REQ_SET_CONFIGURATION</name></expr>:</case>

            <return pos:start="47:13" pos:end="47:56">return <expr pos:start="47:20" pos:end="47:55"><call pos:start="47:20" pos:end="47:55"><name pos:start="47:20" pos:end="47:38">usb_host_set_config</name><argument_list pos:start="47:39" pos:end="47:55">(<argument pos:start="47:40" pos:end="47:40"><expr pos:start="47:40" pos:end="47:40"><name pos:start="47:40" pos:end="47:40">s</name></expr></argument>, <argument pos:start="47:43" pos:end="47:54"><expr pos:start="47:43" pos:end="47:54"><name pos:start="47:43" pos:end="47:47">value</name> <operator pos:start="47:49" pos:end="47:49">&amp;</operator> <literal type="number" pos:start="47:51" pos:end="47:54">0xff</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="59:55"><if pos:start="55:5" pos:end="59:55">if <condition pos:start="55:8" pos:end="57:64">(<expr pos:start="55:9" pos:end="57:63"><name pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:15">ctrl</name><operator pos:start="55:16" pos:end="55:16">.</operator><name pos:start="55:17" pos:end="55:19">req</name><operator pos:start="55:20" pos:end="55:20">.</operator><name pos:start="55:21" pos:end="55:32">bRequestType</name></name> <operator pos:start="55:34" pos:end="55:35">==</operator> <literal type="number" pos:start="55:37" pos:end="55:37">1</literal> <operator pos:start="55:39" pos:end="55:40">&amp;&amp;</operator>

                  <name pos:start="57:19" pos:end="57:38"><name pos:start="57:19" pos:end="57:19">s</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:25">ctrl</name><operator pos:start="57:26" pos:end="57:26">.</operator><name pos:start="57:27" pos:end="57:29">req</name><operator pos:start="57:30" pos:end="57:30">.</operator><name pos:start="57:31" pos:end="57:38">bRequest</name></name> <operator pos:start="57:40" pos:end="57:41">==</operator> <name pos:start="57:43" pos:end="57:63">USB_REQ_SET_INTERFACE</name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:55"><block_content pos:start="59:9" pos:end="59:55">

        <return pos:start="59:9" pos:end="59:55">return <expr pos:start="59:16" pos:end="59:54"><call pos:start="59:16" pos:end="59:54"><name pos:start="59:16" pos:end="59:37">usb_host_set_interface</name><argument_list pos:start="59:38" pos:end="59:54">(<argument pos:start="59:39" pos:end="59:39"><expr pos:start="59:39" pos:end="59:39"><name pos:start="59:39" pos:end="59:39">s</name></expr></argument>, <argument pos:start="59:42" pos:end="59:46"><expr pos:start="59:42" pos:end="59:46"><name pos:start="59:42" pos:end="59:46">index</name></expr></argument>, <argument pos:start="59:49" pos:end="59:53"><expr pos:start="59:49" pos:end="59:53"><name pos:start="59:49" pos:end="59:53">value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:35">/* The rest are asynchronous */</comment>



    <expr_stmt pos:start="67:5" pos:end="67:25"><expr pos:start="67:5" pos:end="67:24"><name pos:start="67:5" pos:end="67:8">aurb</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="67:24"><name pos:start="67:12" pos:end="67:22">async_alloc</name><argument_list pos:start="67:23" pos:end="67:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:21"><expr pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:8">aurb</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:14">hdev</name></name>   <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:20">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:8">aurb</name><operator pos:start="71:9" pos:end="71:10">-&gt;</operator><name pos:start="71:11" pos:end="71:16">packet</name></name> <operator pos:start="71:18" pos:end="71:18">=</operator> <name pos:start="71:20" pos:end="71:20">p</name></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="85:7">/* 

     * Setup ctrl transfer.

     *

     * s-&gt;ctrl is layed out such that data buffer immediately follows

     * 'req' struct which is exactly what usbdevfs expects.

     */</comment> 

    <expr_stmt pos:start="87:5" pos:end="87:21"><expr pos:start="87:5" pos:end="87:20"><name pos:start="87:5" pos:end="87:7">urb</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <operator pos:start="87:11" pos:end="87:11">&amp;</operator><name pos:start="87:12" pos:end="87:20"><name pos:start="87:12" pos:end="87:15">aurb</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:20">urb</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:46"><expr pos:start="91:5" pos:end="91:45"><name pos:start="91:5" pos:end="91:13"><name pos:start="91:5" pos:end="91:7">urb</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:13">type</name></name>     <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:45">USBDEVFS_URB_TYPE_CONTROL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:7">urb</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:17">endpoint</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:28"><name pos:start="93:21" pos:end="93:21">p</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:28">devep</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:38"><expr pos:start="97:5" pos:end="97:37"><name pos:start="97:5" pos:end="97:15"><name pos:start="97:5" pos:end="97:7">urb</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:15">buffer</name></name>        <operator pos:start="97:24" pos:end="97:24">=</operator> <operator pos:start="97:26" pos:end="97:26">&amp;</operator><name pos:start="97:27" pos:end="97:37"><name pos:start="97:27" pos:end="97:27">s</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:33">ctrl</name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:37">req</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:7">urb</name><operator pos:start="99:8" pos:end="99:9">-&gt;</operator><name pos:start="99:10" pos:end="99:22">buffer_length</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <literal type="number" pos:start="99:26" pos:end="99:28">8</literal> <operator pos:start="99:28" pos:end="99:28">+</operator> <name pos:start="99:30" pos:end="99:40"><name pos:start="99:30" pos:end="99:30">s</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:36">ctrl</name><operator pos:start="99:37" pos:end="99:37">.</operator><name pos:start="99:38" pos:end="99:40">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:25"><expr pos:start="103:5" pos:end="103:24"><name pos:start="103:5" pos:end="103:20"><name pos:start="103:5" pos:end="103:7">urb</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:20">usercontext</name></name> <operator pos:start="103:22" pos:end="103:22">=</operator> <name pos:start="103:24" pos:end="103:24">s</name></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:48"><expr pos:start="107:5" pos:end="107:47"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="107:47"><name pos:start="107:11" pos:end="107:15">ioctl</name><argument_list pos:start="107:16" pos:end="107:47">(<argument pos:start="107:17" pos:end="107:21"><expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:17">s</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:21">fd</name></name></expr></argument>, <argument pos:start="107:24" pos:end="107:41"><expr pos:start="107:24" pos:end="107:41"><name pos:start="107:24" pos:end="107:41">USBDEVFS_SUBMITURB</name></expr></argument>, <argument pos:start="107:44" pos:end="107:46"><expr pos:start="107:44" pos:end="107:46"><name pos:start="107:44" pos:end="107:46">urb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:77"><expr pos:start="111:5" pos:end="111:76"><call pos:start="111:5" pos:end="111:76"><name pos:start="111:5" pos:end="111:11">dprintf</name><argument_list pos:start="111:12" pos:end="111:76">(<argument pos:start="111:13" pos:end="111:49"><expr pos:start="111:13" pos:end="111:49"><literal type="string" pos:start="111:13" pos:end="111:49">"husb: submit ctrl. len %u aurb %p\n"</literal></expr></argument>, <argument pos:start="111:52" pos:end="111:69"><expr pos:start="111:52" pos:end="111:69"><name pos:start="111:52" pos:end="111:69"><name pos:start="111:52" pos:end="111:54">urb</name><operator pos:start="111:55" pos:end="111:56">-&gt;</operator><name pos:start="111:57" pos:end="111:69">buffer_length</name></name></expr></argument>, <argument pos:start="111:72" pos:end="111:75"><expr pos:start="111:72" pos:end="111:75"><name pos:start="111:72" pos:end="111:75">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="137:5"><if pos:start="115:5" pos:end="137:5">if <condition pos:start="115:8" pos:end="115:16">(<expr pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">&lt;</operator> <literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>)</condition> <block pos:start="115:18" pos:end="137:5">{<block_content pos:start="117:9" pos:end="135:9">

        <expr_stmt pos:start="117:9" pos:end="117:58"><expr pos:start="117:9" pos:end="117:57"><call pos:start="117:9" pos:end="117:57"><name pos:start="117:9" pos:end="117:15">dprintf</name><argument_list pos:start="117:16" pos:end="117:57">(<argument pos:start="117:17" pos:end="117:49"><expr pos:start="117:17" pos:end="117:49"><literal type="string" pos:start="117:17" pos:end="117:49">"husb: submit failed. errno %d\n"</literal></expr></argument>, <argument pos:start="117:52" pos:end="117:56"><expr pos:start="117:52" pos:end="117:56"><name pos:start="117:52" pos:end="117:56">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:25"><expr pos:start="119:9" pos:end="119:24"><call pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:18">async_free</name><argument_list pos:start="119:19" pos:end="119:24">(<argument pos:start="119:20" pos:end="119:23"><expr pos:start="119:20" pos:end="119:23"><name pos:start="119:20" pos:end="119:23">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="123:9" pos:end="135:9">switch<condition pos:start="123:15" pos:end="123:21">(<expr pos:start="123:16" pos:end="123:20"><name pos:start="123:16" pos:end="123:20">errno</name></expr>)</condition> <block pos:start="123:23" pos:end="135:9">{<block_content pos:start="125:9" pos:end="133:33">

        <case pos:start="125:9" pos:end="125:23">case <expr pos:start="125:14" pos:end="125:22"><name pos:start="125:14" pos:end="125:22">ETIMEDOUT</name></expr>:</case>

            <return pos:start="127:13" pos:end="127:31">return <expr pos:start="127:20" pos:end="127:30"><name pos:start="127:20" pos:end="127:30">USB_RET_NAK</name></expr>;</return>

        <case pos:start="129:9" pos:end="129:19">case <expr pos:start="129:14" pos:end="129:18"><name pos:start="129:14" pos:end="129:18">EPIPE</name></expr>:</case>

        <default pos:start="131:9" pos:end="131:16">default:</default>

            <return pos:start="133:13" pos:end="133:33">return <expr pos:start="133:20" pos:end="133:32"><name pos:start="133:20" pos:end="133:32">USB_RET_STALL</name></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:44"><expr pos:start="141:5" pos:end="141:43"><call pos:start="141:5" pos:end="141:43"><name pos:start="141:5" pos:end="141:20">usb_defer_packet</name><argument_list pos:start="141:21" pos:end="141:43">(<argument pos:start="141:22" pos:end="141:22"><expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">p</name></expr></argument>, <argument pos:start="141:25" pos:end="141:36"><expr pos:start="141:25" pos:end="141:36"><name pos:start="141:25" pos:end="141:36">async_cancel</name></expr></argument>, <argument pos:start="141:39" pos:end="141:42"><expr pos:start="141:39" pos:end="141:42"><name pos:start="141:39" pos:end="141:42">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:25">return <expr pos:start="143:12" pos:end="143:24"><name pos:start="143:12" pos:end="143:24">USB_RET_ASYNC</name></expr>;</return>

</block_content>}</block></function>
</unit>
