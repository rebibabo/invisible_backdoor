<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5179.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">svq1_decode_block_non_intra</name><parameter_list pos:start="1:39" pos:end="3:55">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:60"><name pos:start="1:40" pos:end="1:52">GetBitContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">bitbuf</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:77"><decl pos:start="1:63" pos:end="1:77"><type pos:start="1:63" pos:end="1:77"><name pos:start="1:63" pos:end="1:69">uint8_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:77">pixels</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:54"><decl pos:start="3:40" pos:end="3:54"><type pos:start="3:40" pos:end="3:54"><name pos:start="3:40" pos:end="3:48">ptrdiff_t</name></type> <name pos:start="3:50" pos:end="3:54">pitch</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:13">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:22">bit_cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21"><name pos:start="9:14" pos:end="9:17">list</name><index pos:start="9:18" pos:end="9:21">[<expr pos:start="9:19" pos:end="9:20"><literal type="number" pos:start="9:19" pos:end="9:20">63</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:20"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint32_t</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:28">codebook</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:15">entries</name><index pos:start="15:16" pos:end="15:18">[<expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>, <decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">m</name></decl>, <decl pos:start="17:18" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:18">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">stages</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:17">mean</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">x</name></decl>, <decl pos:start="23:12" pos:end="23:12"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:12">y</name></decl>, <decl pos:start="23:15" pos:end="23:19"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:15" pos:end="23:19">width</name></decl>, <decl pos:start="23:22" pos:end="23:27"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:22" pos:end="23:27">height</name></decl>, <decl pos:start="23:30" pos:end="23:34"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:30" pos:end="23:34">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:15">n1</name></decl>, <decl pos:start="25:18" pos:end="25:19"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:18" pos:end="25:19">n2</name></decl>, <decl pos:start="25:22" pos:end="25:23"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:22" pos:end="25:23">n3</name></decl>, <decl pos:start="25:26" pos:end="25:27"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:26" pos:end="25:27">n4</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:65">/* initialize list for breadth first processing of vectors */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:8">list</name><index pos:start="31:9" pos:end="31:11">[<expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>]</index></name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:20">pixels</name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:36">/* recursively process vector */</comment>

    <for pos:start="37:5" pos:end="113:5">for <control pos:start="37:9" pos:end="37:52">(<init pos:start="37:10" pos:end="37:40"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr><operator pos:start="37:15" pos:end="37:15">,</operator> <expr pos:start="37:17" pos:end="37:21"><name pos:start="37:17" pos:end="37:17">m</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr><operator pos:start="37:22" pos:end="37:22">,</operator> <expr pos:start="37:24" pos:end="37:28"><name pos:start="37:24" pos:end="37:24">n</name> <operator pos:start="37:26" pos:end="37:26">=</operator> <literal type="number" pos:start="37:28" pos:end="37:28">1</literal></expr><operator pos:start="37:29" pos:end="37:29">,</operator> <expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:35">level</name> <operator pos:start="37:37" pos:end="37:37">=</operator> <literal type="number" pos:start="37:39" pos:end="37:39">5</literal></expr>;</init> <condition pos:start="37:42" pos:end="37:47"><expr pos:start="37:42" pos:end="37:46"><name pos:start="37:42" pos:end="37:42">i</name> <operator pos:start="37:44" pos:end="37:44">&lt;</operator> <name pos:start="37:46" pos:end="37:46">n</name></expr>;</condition> <incr pos:start="37:49" pos:end="37:51"><expr pos:start="37:49" pos:end="37:51"><name pos:start="37:49" pos:end="37:49">i</name><operator pos:start="37:50" pos:end="37:51">++</operator></expr></incr>)</control> <block pos:start="37:54" pos:end="113:5">{<block_content pos:start="39:9" pos:end="111:9">

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><call pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:27">SVQ1_PROCESS_VECTOR</name><argument_list pos:start="39:28" pos:end="39:29">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="43:9" pos:end="43:49">/* destination address and vector size */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:11">dst</name>    <operator pos:start="45:16" pos:end="45:16">=</operator> <operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:26">uint32_t</name> <operator pos:start="45:28" pos:end="45:28">*</operator><operator pos:start="45:29" pos:end="45:29">)</operator><name pos:start="45:30" pos:end="45:36"><name pos:start="45:30" pos:end="45:33">list</name><index pos:start="45:34" pos:end="45:36">[<expr pos:start="45:35" pos:end="45:35"><name pos:start="45:35" pos:end="45:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:13">width</name>  <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">1</literal> <operator pos:start="47:20" pos:end="47:21">&lt;&lt;</operator> <operator pos:start="47:23" pos:end="47:23">(</operator><operator pos:start="47:24" pos:end="47:24">(</operator><literal type="number" pos:start="47:25" pos:end="47:27">4</literal> <operator pos:start="47:27" pos:end="47:27">+</operator> <name pos:start="47:29" pos:end="47:33">level</name><operator pos:start="47:34" pos:end="47:34">)</operator> <operator pos:start="47:36" pos:end="47:36">/</operator> <literal type="number" pos:start="47:38" pos:end="47:38">2</literal><operator pos:start="47:39" pos:end="47:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:14">height</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">1</literal> <operator pos:start="49:20" pos:end="49:21">&lt;&lt;</operator> <operator pos:start="49:23" pos:end="49:23">(</operator><operator pos:start="49:24" pos:end="49:24">(</operator><literal type="number" pos:start="49:25" pos:end="49:27">3</literal> <operator pos:start="49:27" pos:end="49:27">+</operator> <name pos:start="49:29" pos:end="49:33">level</name><operator pos:start="49:34" pos:end="49:34">)</operator> <operator pos:start="49:36" pos:end="49:36">/</operator> <literal type="number" pos:start="49:38" pos:end="49:38">2</literal><operator pos:start="49:39" pos:end="49:39">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:69">/* get number of stages (-1 skips vector, 0 for mean only) */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:80"><expr pos:start="55:9" pos:end="55:79"><name pos:start="55:9" pos:end="55:14">stages</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:75"><name pos:start="55:18" pos:end="55:25">get_vlc2</name><argument_list pos:start="55:26" pos:end="55:75">(<argument pos:start="55:27" pos:end="55:32"><expr pos:start="55:27" pos:end="55:32"><name pos:start="55:27" pos:end="55:32">bitbuf</name></expr></argument>, <argument pos:start="55:35" pos:end="55:68"><expr pos:start="55:35" pos:end="55:68"><name pos:start="55:35" pos:end="55:62"><name pos:start="55:35" pos:end="55:55">svq1_inter_multistage</name><index pos:start="55:56" pos:end="55:62">[<expr pos:start="55:57" pos:end="55:61"><name pos:start="55:57" pos:end="55:61">level</name></expr>]</index></name><operator pos:start="55:63" pos:end="55:63">.</operator><name pos:start="55:64" pos:end="55:68">table</name></expr></argument>, <argument pos:start="55:71" pos:end="55:71"><expr pos:start="55:71" pos:end="55:71"><literal type="number" pos:start="55:71" pos:end="55:71">3</literal></expr></argument>, <argument pos:start="55:74" pos:end="55:74"><expr pos:start="55:74" pos:end="55:74"><literal type="number" pos:start="55:74" pos:end="55:74">2</literal></expr></argument>)</argument_list></call> <operator pos:start="55:77" pos:end="55:77">-</operator> <literal type="number" pos:start="55:79" pos:end="55:79">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="61:21"><if pos:start="59:9" pos:end="61:21">if <condition pos:start="59:12" pos:end="59:25">(<expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:18">stages</name> <operator pos:start="59:20" pos:end="59:21">==</operator> <operator pos:start="59:23" pos:end="59:23">-</operator><literal type="number" pos:start="59:24" pos:end="59:24">1</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:21"><block_content pos:start="61:13" pos:end="61:21">

            <continue pos:start="61:13" pos:end="61:21">continue;</continue></block_content></block></if></if_stmt>           <comment type="block" pos:start="61:33" pos:end="61:49">/* skip vector */</comment>



        <if_stmt pos:start="65:9" pos:end="75:9"><if pos:start="65:9" pos:end="75:9">if <condition pos:start="65:12" pos:end="65:39">(<expr pos:start="65:13" pos:end="65:38"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:19">stages</name> <operator pos:start="65:21" pos:end="65:21">&gt;</operator> <literal type="number" pos:start="65:23" pos:end="65:23">0</literal> <operator pos:start="65:25" pos:end="65:26">&amp;&amp;</operator> <name pos:start="65:28" pos:end="65:32">level</name> <operator pos:start="65:34" pos:end="65:35">&gt;=</operator> <literal type="number" pos:start="65:37" pos:end="65:37">4</literal><operator pos:start="65:38" pos:end="65:38">)</operator></expr>)</condition> <block pos:start="65:41" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:39">

            <expr_stmt pos:start="67:13" pos:end="71:35"><expr pos:start="67:13" pos:end="71:34"><call pos:start="67:13" pos:end="71:34"><name pos:start="67:13" pos:end="67:19">ff_dlog</name><argument_list pos:start="67:20" pos:end="71:34">(<argument pos:start="67:21" pos:end="67:24"><expr pos:start="67:21" pos:end="67:24"><name pos:start="67:21" pos:end="67:24">NULL</name></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:95"><expr pos:start="69:21" pos:end="69:95"><literal type="string" pos:start="69:21" pos:end="69:95">"Error (svq1_decode_block_non_intra): invalid vector: stages=%i level=%i\n"</literal></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">stages</name></expr></argument>, <argument pos:start="71:29" pos:end="71:33"><expr pos:start="71:29" pos:end="71:33"><name pos:start="71:29" pos:end="71:33">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:39">return <expr pos:start="73:20" pos:end="73:38"><name pos:start="73:20" pos:end="73:38">AVERROR_INVALIDDATA</name></expr>;</return>  <comment type="block" pos:start="73:42" pos:end="73:61">/* invalid vector */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><call pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:18">av_assert0</name><argument_list pos:start="77:19" pos:end="77:31">(<argument pos:start="77:20" pos:end="77:30"><expr pos:start="77:20" pos:end="77:30"><name pos:start="77:20" pos:end="77:25">stages</name> <operator pos:start="77:27" pos:end="77:28">&gt;=</operator> <literal type="number" pos:start="77:30" pos:end="77:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:67"><expr pos:start="81:9" pos:end="81:66"><name pos:start="81:9" pos:end="81:12">mean</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <call pos:start="81:16" pos:end="81:60"><name pos:start="81:16" pos:end="81:23">get_vlc2</name><argument_list pos:start="81:24" pos:end="81:60">(<argument pos:start="81:25" pos:end="81:30"><expr pos:start="81:25" pos:end="81:30"><name pos:start="81:25" pos:end="81:30">bitbuf</name></expr></argument>, <argument pos:start="81:33" pos:end="81:53"><expr pos:start="81:33" pos:end="81:53"><name pos:start="81:33" pos:end="81:53"><name pos:start="81:33" pos:end="81:47">svq1_inter_mean</name><operator pos:start="81:48" pos:end="81:48">.</operator><name pos:start="81:49" pos:end="81:53">table</name></name></expr></argument>, <argument pos:start="81:56" pos:end="81:56"><expr pos:start="81:56" pos:end="81:56"><literal type="number" pos:start="81:56" pos:end="81:56">9</literal></expr></argument>, <argument pos:start="81:59" pos:end="81:59"><expr pos:start="81:59" pos:end="81:59"><literal type="number" pos:start="81:59" pos:end="81:59">3</literal></expr></argument>)</argument_list></call> <operator pos:start="81:62" pos:end="81:62">-</operator> <literal type="number" pos:start="81:64" pos:end="81:66">256</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:60"><expr pos:start="85:9" pos:end="85:59"><call pos:start="85:9" pos:end="85:59"><name pos:start="85:9" pos:end="85:34">SVQ1_CALC_CODEBOOK_ENTRIES</name><argument_list pos:start="85:35" pos:end="85:59">(<argument pos:start="85:36" pos:end="85:58"><expr pos:start="85:36" pos:end="85:58"><name pos:start="85:36" pos:end="85:58">ff_svq1_inter_codebooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="89:9" pos:end="111:9">for <control pos:start="89:13" pos:end="89:36">(<init pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">y</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</init> <condition pos:start="89:21" pos:end="89:31"><expr pos:start="89:21" pos:end="89:30"><name pos:start="89:21" pos:end="89:21">y</name> <operator pos:start="89:23" pos:end="89:23">&lt;</operator> <name pos:start="89:25" pos:end="89:30">height</name></expr>;</condition> <incr pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:33">y</name><operator pos:start="89:34" pos:end="89:35">++</operator></expr></incr>)</control> <block pos:start="89:38" pos:end="111:9">{<block_content pos:start="91:13" pos:end="109:29">

            <for pos:start="91:13" pos:end="107:13">for <control pos:start="91:17" pos:end="91:55">(<init pos:start="91:18" pos:end="91:23"><expr pos:start="91:18" pos:end="91:22"><name pos:start="91:18" pos:end="91:18">x</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>;</init> <condition pos:start="91:25" pos:end="91:38"><expr pos:start="91:25" pos:end="91:37"><name pos:start="91:25" pos:end="91:25">x</name> <operator pos:start="91:27" pos:end="91:27">&lt;</operator> <name pos:start="91:29" pos:end="91:33">width</name> <operator pos:start="91:35" pos:end="91:35">/</operator> <literal type="number" pos:start="91:37" pos:end="91:37">4</literal></expr>;</condition> <incr pos:start="91:40" pos:end="91:54"><expr pos:start="91:40" pos:end="91:42"><name pos:start="91:40" pos:end="91:40">x</name><operator pos:start="91:41" pos:end="91:42">++</operator></expr><operator pos:start="91:43" pos:end="91:43">,</operator> <expr pos:start="91:45" pos:end="91:54"><name pos:start="91:45" pos:end="91:52">codebook</name><operator pos:start="91:53" pos:end="91:54">++</operator></expr></incr>)</control> <block pos:start="91:57" pos:end="107:13">{<block_content pos:start="93:17" pos:end="105:38">

                <expr_stmt pos:start="93:17" pos:end="93:28"><expr pos:start="93:17" pos:end="93:27"><name pos:start="93:17" pos:end="93:18">n3</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:27"><name pos:start="93:22" pos:end="93:24">dst</name><index pos:start="93:25" pos:end="93:27">[<expr pos:start="93:26" pos:end="93:26"><name pos:start="93:26" pos:end="93:26">x</name></expr>]</index></name></expr>;</expr_stmt>

                <comment type="block" pos:start="95:17" pos:end="95:46">/* add mean value to vector */</comment>

                <expr_stmt pos:start="97:17" pos:end="97:51"><expr pos:start="97:17" pos:end="97:50"><name pos:start="97:17" pos:end="97:18">n1</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:23">n4</name> <operator pos:start="97:25" pos:end="97:25">+</operator> <operator pos:start="97:27" pos:end="97:27">(</operator><operator pos:start="97:28" pos:end="97:28">(</operator><name pos:start="97:29" pos:end="97:30">n3</name> <operator pos:start="97:32" pos:end="97:32">&amp;</operator> <literal type="number" pos:start="97:34" pos:end="97:43">0xFF00FF00</literal><operator pos:start="97:44" pos:end="97:44">)</operator> <operator pos:start="97:46" pos:end="97:47">&gt;&gt;</operator> <literal type="number" pos:start="97:49" pos:end="97:49">8</literal><operator pos:start="97:50" pos:end="97:50">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:45"><expr pos:start="99:17" pos:end="99:44"><name pos:start="99:17" pos:end="99:18">n2</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <name pos:start="99:22" pos:end="99:23">n4</name> <operator pos:start="99:25" pos:end="99:25">+</operator>  <operator pos:start="99:28" pos:end="99:28">(</operator><name pos:start="99:29" pos:end="99:30">n3</name> <operator pos:start="99:32" pos:end="99:32">&amp;</operator> <literal type="number" pos:start="99:34" pos:end="99:43">0x00FF00FF</literal><operator pos:start="99:44" pos:end="99:44">)</operator></expr>;</expr_stmt>

                <macro pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:33">SVQ1_ADD_CODEBOOK</name><argument_list pos:start="101:34" pos:end="101:35">()</argument_list></macro>

                <comment type="block" pos:start="103:17" pos:end="103:34">/* store result */</comment>

                <expr_stmt pos:start="105:17" pos:end="105:38"><expr pos:start="105:17" pos:end="105:37"><name pos:start="105:17" pos:end="105:22"><name pos:start="105:17" pos:end="105:19">dst</name><index pos:start="105:20" pos:end="105:22">[<expr pos:start="105:21" pos:end="105:21"><name pos:start="105:21" pos:end="105:21">x</name></expr>]</index></name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:27">n1</name> <operator pos:start="105:29" pos:end="105:30">&lt;&lt;</operator> <literal type="number" pos:start="105:32" pos:end="105:32">8</literal> <operator pos:start="105:34" pos:end="105:34">|</operator> <name pos:start="105:36" pos:end="105:37">n2</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="109:13" pos:end="109:29"><expr pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:15">dst</name> <operator pos:start="109:17" pos:end="109:18">+=</operator> <name pos:start="109:20" pos:end="109:24">pitch</name> <operator pos:start="109:26" pos:end="109:26">/</operator> <literal type="number" pos:start="109:28" pos:end="109:28">4</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
