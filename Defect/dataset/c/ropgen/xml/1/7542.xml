<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7542.c" pos:tabs="8"><function pos:start="1:1" pos:end="104:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_st</name><parameter_list pos:start="1:28" pos:end="2:36">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:55">TCGArg</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">args</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:35"><decl pos:start="2:29" pos:end="2:35"><type pos:start="2:29" pos:end="2:35"><name pos:start="2:29" pos:end="2:31">int</name></type> <name pos:start="2:33" pos:end="2:35">opc</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="104:1">{<block_content pos:start="4:5" pos:end="103:58">
    <decl_stmt pos:start="4:5" pos:end="6:0"><decl pos:start="4:5" pos:end="4:16"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:16">addr_reg</name></decl>, <decl pos:start="4:19" pos:end="4:26"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:19" pos:end="4:26">data_reg</name></decl>, <decl pos:start="4:29" pos:end="4:32"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:29" pos:end="4:32">arg0</name></decl>, <decl pos:start="4:35" pos:end="4:38"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:35" pos:end="4:38">arg1</name></decl>, <decl pos:start="4:41" pos:end="4:44"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:41" pos:end="4:44">arg2</name></decl>, <decl pos:start="4:47" pos:end="4:55"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:47" pos:end="4:55">mem_index</name></decl>, <decl pos:start="4:58" pos:end="4:63"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:58" pos:end="4:63">s_bits</name></decl>;</decl_stmt>
<cpp:if pos:start="5:1" pos:end="5:27">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:27"><call pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:27">(<argument pos:start="5:13" pos:end="5:26"><expr pos:start="5:13" pos:end="5:26"><name pos:start="5:13" pos:end="5:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt pos:start="6:5" pos:end="6:38"><decl pos:start="6:5" pos:end="6:24"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">uint32_t</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:24">label1_ptr</name></decl>, <decl pos:start="6:27" pos:end="6:37"><type ref="prev" pos:start="6:5" pos:end="6:14"><modifier pos:start="6:27" pos:end="6:27">*</modifier></type><name pos:start="6:28" pos:end="6:37">label2_ptr</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:23"><expr pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:12">data_reg</name> <operator pos:start="7:14" pos:end="7:14">=</operator> <operator pos:start="7:16" pos:end="7:16">*</operator><name pos:start="7:17" pos:end="7:20">args</name><operator pos:start="7:21" pos:end="7:22">++</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:23"><expr pos:start="8:5" pos:end="8:22"><name pos:start="8:5" pos:end="8:12">addr_reg</name> <operator pos:start="8:14" pos:end="8:14">=</operator> <operator pos:start="8:16" pos:end="8:16">*</operator><name pos:start="8:17" pos:end="8:20">args</name><operator pos:start="8:21" pos:end="8:22">++</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:22"><expr pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:13">mem_index</name> <operator pos:start="9:15" pos:end="9:15">=</operator> <operator pos:start="9:17" pos:end="9:17">*</operator><name pos:start="9:18" pos:end="9:21">args</name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:17"><expr pos:start="10:5" pos:end="10:16"><name pos:start="10:5" pos:end="10:10">s_bits</name> <operator pos:start="10:12" pos:end="10:12">=</operator> <name pos:start="10:14" pos:end="10:16">opc</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:8">arg0</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <name pos:start="11:12" pos:end="11:21">TCG_REG_O0</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:22"><expr pos:start="12:5" pos:end="12:21"><name pos:start="12:5" pos:end="12:8">arg1</name> <operator pos:start="12:10" pos:end="12:10">=</operator> <name pos:start="12:12" pos:end="12:21">TCG_REG_O1</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="15:0"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:8">arg2</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <name pos:start="13:12" pos:end="13:21">TCG_REG_O2</name></expr>;</expr_stmt>
<cpp:if pos:start="14:1" pos:end="14:27">#<cpp:directive pos:start="14:2" pos:end="14:3">if</cpp:directive> <expr pos:start="14:5" pos:end="14:27"><call pos:start="14:5" pos:end="14:27"><name pos:start="14:5" pos:end="14:11">defined</name><argument_list pos:start="14:12" pos:end="14:27">(<argument pos:start="14:13" pos:end="14:26"><expr pos:start="14:13" pos:end="14:26"><name pos:start="14:13" pos:end="14:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="15:5" pos:end="15:31">/* srl addr_reg, x, arg1 */</comment>
    <expr_stmt pos:start="16:5" pos:end="17:30"><expr pos:start="16:5" pos:end="17:29"><call pos:start="16:5" pos:end="17:29"><name pos:start="16:5" pos:end="16:18">tcg_out_arithi</name><argument_list pos:start="16:19" pos:end="17:29">(<argument pos:start="16:20" pos:end="16:20"><expr pos:start="16:20" pos:end="16:20"><name pos:start="16:20" pos:end="16:20">s</name></expr></argument>, <argument pos:start="16:23" pos:end="16:26"><expr pos:start="16:23" pos:end="16:26"><name pos:start="16:23" pos:end="16:26">arg1</name></expr></argument>, <argument pos:start="16:29" pos:end="16:36"><expr pos:start="16:29" pos:end="16:36"><name pos:start="16:29" pos:end="16:36">addr_reg</name></expr></argument>, <argument pos:start="16:39" pos:end="16:75"><expr pos:start="16:39" pos:end="16:75"><name pos:start="16:39" pos:end="16:54">TARGET_PAGE_BITS</name> <operator pos:start="16:56" pos:end="16:56">-</operator> <name pos:start="16:58" pos:end="16:75">CPU_TLB_ENTRY_BITS</name></expr></argument>,
                   <argument pos:start="17:20" pos:end="17:28"><expr pos:start="17:20" pos:end="17:28"><name pos:start="17:20" pos:end="17:28">SHIFT_SRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="19:30"><expr pos:start="18:5" pos:end="19:29"><call pos:start="18:5" pos:end="19:29"><name pos:start="18:5" pos:end="18:18">tcg_out_arithi</name><argument_list pos:start="18:19" pos:end="19:29">(<argument pos:start="18:20" pos:end="18:20"><expr pos:start="18:20" pos:end="18:20"><name pos:start="18:20" pos:end="18:20">s</name></expr></argument>, <argument pos:start="18:23" pos:end="18:26"><expr pos:start="18:23" pos:end="18:26"><name pos:start="18:23" pos:end="18:26">arg0</name></expr></argument>, <argument pos:start="18:29" pos:end="18:36"><expr pos:start="18:29" pos:end="18:36"><name pos:start="18:29" pos:end="18:36">addr_reg</name></expr></argument>, <argument pos:start="18:39" pos:end="18:76"><expr pos:start="18:39" pos:end="18:76"><name pos:start="18:39" pos:end="18:54">TARGET_PAGE_MASK</name> <operator pos:start="18:56" pos:end="18:56">|</operator> <operator pos:start="18:58" pos:end="18:58">(</operator><operator pos:start="18:59" pos:end="18:59">(</operator><literal type="number" pos:start="18:60" pos:end="18:60">1</literal> <operator pos:start="18:62" pos:end="18:63">&lt;&lt;</operator> <name pos:start="18:65" pos:end="18:70">s_bits</name><operator pos:start="18:71" pos:end="18:71">)</operator> <operator pos:start="18:73" pos:end="18:73">-</operator> <literal type="number" pos:start="18:75" pos:end="18:75">1</literal><operator pos:start="18:76" pos:end="18:76">)</operator></expr></argument>,
                   <argument pos:start="19:20" pos:end="19:28"><expr pos:start="19:20" pos:end="19:28"><name pos:start="19:20" pos:end="19:28">ARITH_AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="20:5" pos:end="20:27">/* and arg1, x, arg1 */</comment>
    <expr_stmt pos:start="21:5" pos:end="21:68"><expr pos:start="21:5" pos:end="21:67"><call pos:start="21:5" pos:end="21:67"><name pos:start="21:5" pos:end="21:16">tcg_out_andi</name><argument_list pos:start="21:17" pos:end="21:67">(<argument pos:start="21:18" pos:end="21:18"><expr pos:start="21:18" pos:end="21:18"><name pos:start="21:18" pos:end="21:18">s</name></expr></argument>, <argument pos:start="21:21" pos:end="21:24"><expr pos:start="21:21" pos:end="21:24"><name pos:start="21:21" pos:end="21:24">arg1</name></expr></argument>, <argument pos:start="21:27" pos:end="21:66"><expr pos:start="21:27" pos:end="21:66"><operator pos:start="21:27" pos:end="21:27">(</operator><name pos:start="21:28" pos:end="21:39">CPU_TLB_SIZE</name> <operator pos:start="21:41" pos:end="21:41">-</operator> <literal type="number" pos:start="21:43" pos:end="21:43">1</literal><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:47">&lt;&lt;</operator> <name pos:start="21:49" pos:end="21:66">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="22:5" pos:end="22:27">/* add arg1, x, arg1 */</comment>
    <expr_stmt pos:start="23:5" pos:end="24:72"><expr pos:start="23:5" pos:end="24:71"><call pos:start="23:5" pos:end="24:71"><name pos:start="23:5" pos:end="23:16">tcg_out_addi</name><argument_list pos:start="23:17" pos:end="24:71">(<argument pos:start="23:18" pos:end="23:18"><expr pos:start="23:18" pos:end="23:18"><name pos:start="23:18" pos:end="23:18">s</name></expr></argument>, <argument pos:start="23:21" pos:end="23:24"><expr pos:start="23:21" pos:end="23:24"><name pos:start="23:21" pos:end="23:24">arg1</name></expr></argument>, <argument pos:start="23:27" pos:end="24:70"><expr pos:start="23:27" pos:end="24:70"><call pos:start="23:27" pos:end="24:70"><name pos:start="23:27" pos:end="23:34">offsetof</name><argument_list pos:start="23:35" pos:end="24:70">(<argument pos:start="23:36" pos:end="23:43"><expr pos:start="23:36" pos:end="23:43"><name pos:start="23:36" pos:end="23:43">CPUState</name></expr></argument>,
                                   <argument pos:start="24:36" pos:end="24:69"><expr pos:start="24:36" pos:end="24:69"><name pos:start="24:36" pos:end="24:58"><name pos:start="24:36" pos:end="24:44">tlb_table</name><index pos:start="24:45" pos:end="24:55">[<expr pos:start="24:46" pos:end="24:54"><name pos:start="24:46" pos:end="24:54">mem_index</name></expr>]</index><index pos:start="24:56" pos:end="24:58">[<expr pos:start="24:57" pos:end="24:57"><literal type="number" pos:start="24:57" pos:end="24:57">0</literal></expr>]</index></name><operator pos:start="24:59" pos:end="24:59">.</operator><name pos:start="24:60" pos:end="24:69">addr_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="25:5" pos:end="25:29">/* add env, arg1, arg1 */</comment>
    <expr_stmt pos:start="26:5" pos:end="26:55"><expr pos:start="26:5" pos:end="26:54"><call pos:start="26:5" pos:end="26:54"><name pos:start="26:5" pos:end="26:17">tcg_out_arith</name><argument_list pos:start="26:18" pos:end="26:54">(<argument pos:start="26:19" pos:end="26:19"><expr pos:start="26:19" pos:end="26:19"><name pos:start="26:19" pos:end="26:19">s</name></expr></argument>, <argument pos:start="26:22" pos:end="26:25"><expr pos:start="26:22" pos:end="26:25"><name pos:start="26:22" pos:end="26:25">arg1</name></expr></argument>, <argument pos:start="26:28" pos:end="26:36"><expr pos:start="26:28" pos:end="26:36"><name pos:start="26:28" pos:end="26:36">TCG_AREG0</name></expr></argument>, <argument pos:start="26:39" pos:end="26:42"><expr pos:start="26:39" pos:end="26:42"><name pos:start="26:39" pos:end="26:42">arg1</name></expr></argument>, <argument pos:start="26:45" pos:end="26:53"><expr pos:start="26:45" pos:end="26:53"><name pos:start="26:45" pos:end="26:53">ARITH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="27:5" pos:end="27:25">/* ld [arg1], arg2 */</comment>
    <expr_stmt pos:start="28:5" pos:end="29:36"><expr pos:start="28:5" pos:end="29:35"><call pos:start="28:5" pos:end="29:35"><name pos:start="28:5" pos:end="28:13">tcg_out32</name><argument_list pos:start="28:14" pos:end="29:35">(<argument pos:start="28:15" pos:end="28:15"><expr pos:start="28:15" pos:end="28:15"><name pos:start="28:15" pos:end="28:15">s</name></expr></argument>, <argument pos:start="28:18" pos:end="29:34"><expr pos:start="28:18" pos:end="29:34"><name pos:start="28:18" pos:end="28:29">TARGET_LD_OP</name> <operator pos:start="28:31" pos:end="28:31">|</operator> <call pos:start="28:33" pos:end="28:45"><name pos:start="28:33" pos:end="28:39">INSN_RD</name><argument_list pos:start="28:40" pos:end="28:45">(<argument pos:start="28:41" pos:end="28:44"><expr pos:start="28:41" pos:end="28:44"><name pos:start="28:41" pos:end="28:44">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="28:47" pos:end="28:47">|</operator> <call pos:start="28:49" pos:end="28:62"><name pos:start="28:49" pos:end="28:56">INSN_RS1</name><argument_list pos:start="28:57" pos:end="28:62">(<argument pos:start="28:58" pos:end="28:61"><expr pos:start="28:58" pos:end="28:61"><name pos:start="28:58" pos:end="28:61">arg1</name></expr></argument>)</argument_list></call> <operator pos:start="28:64" pos:end="28:64">|</operator>
              <call pos:start="29:15" pos:end="29:34"><name pos:start="29:15" pos:end="29:22">INSN_RS2</name><argument_list pos:start="29:23" pos:end="29:34">(<argument pos:start="29:24" pos:end="29:33"><expr pos:start="29:24" pos:end="29:33"><name pos:start="29:24" pos:end="29:33">TCG_REG_G0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="30:5" pos:end="30:31">/* subcc arg0, arg2, %g0 */</comment>
    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><call pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:17">tcg_out_arith</name><argument_list pos:start="31:18" pos:end="31:57">(<argument pos:start="31:19" pos:end="31:19"><expr pos:start="31:19" pos:end="31:19"><name pos:start="31:19" pos:end="31:19">s</name></expr></argument>, <argument pos:start="31:22" pos:end="31:31"><expr pos:start="31:22" pos:end="31:31"><name pos:start="31:22" pos:end="31:31">TCG_REG_G0</name></expr></argument>, <argument pos:start="31:34" pos:end="31:37"><expr pos:start="31:34" pos:end="31:37"><name pos:start="31:34" pos:end="31:37">arg0</name></expr></argument>, <argument pos:start="31:40" pos:end="31:43"><expr pos:start="31:40" pos:end="31:43"><name pos:start="31:40" pos:end="31:43">arg2</name></expr></argument>, <argument pos:start="31:46" pos:end="31:56"><expr pos:start="31:46" pos:end="31:56"><name pos:start="31:46" pos:end="31:56">ARITH_SUBCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="32:5" pos:end="33:19">/* will become:
       be label1 */</comment>
    <expr_stmt pos:start="34:5" pos:end="34:41"><expr pos:start="34:5" pos:end="34:40"><name pos:start="34:5" pos:end="34:14">label1_ptr</name> <operator pos:start="34:16" pos:end="34:16">=</operator> <operator pos:start="34:18" pos:end="34:18">(</operator><name pos:start="34:19" pos:end="34:26">uint32_t</name> <operator pos:start="34:28" pos:end="34:28">*</operator><operator pos:start="34:29" pos:end="34:29">)</operator><name pos:start="34:30" pos:end="34:40"><name pos:start="34:30" pos:end="34:30">s</name><operator pos:start="34:31" pos:end="34:32">-&gt;</operator><name pos:start="34:33" pos:end="34:40">code_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><call pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:13">tcg_out32</name><argument_list pos:start="35:14" pos:end="35:19">(<argument pos:start="35:15" pos:end="35:15"><expr pos:start="35:15" pos:end="35:15"><name pos:start="35:15" pos:end="35:15">s</name></expr></argument>, <argument pos:start="35:18" pos:end="35:18"><expr pos:start="35:18" pos:end="35:18"><literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="36:5" pos:end="36:26">/* mov (delay slot) */</comment>
    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:15">tcg_out_mov</name><argument_list pos:start="37:16" pos:end="37:34">(<argument pos:start="37:17" pos:end="37:17"><expr pos:start="37:17" pos:end="37:17"><name pos:start="37:17" pos:end="37:17">s</name></expr></argument>, <argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">arg0</name></expr></argument>, <argument pos:start="37:26" pos:end="37:33"><expr pos:start="37:26" pos:end="37:33"><name pos:start="37:26" pos:end="37:33">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="38:5" pos:end="38:13">/* mov */</comment>
    <expr_stmt pos:start="39:5" pos:end="39:35"><expr pos:start="39:5" pos:end="39:34"><call pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:15">tcg_out_mov</name><argument_list pos:start="39:16" pos:end="39:34">(<argument pos:start="39:17" pos:end="39:17"><expr pos:start="39:17" pos:end="39:17"><name pos:start="39:17" pos:end="39:17">s</name></expr></argument>, <argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">arg1</name></expr></argument>, <argument pos:start="39:26" pos:end="39:33"><expr pos:start="39:26" pos:end="39:33"><name pos:start="39:26" pos:end="39:33">data_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="40:5" pos:end="40:13">/* mov */</comment>
    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><call pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:16">tcg_out_movi</name><argument_list pos:start="41:17" pos:end="41:50">(<argument pos:start="41:18" pos:end="41:18"><expr pos:start="41:18" pos:end="41:18"><name pos:start="41:18" pos:end="41:18">s</name></expr></argument>, <argument pos:start="41:21" pos:end="41:32"><expr pos:start="41:21" pos:end="41:32"><name pos:start="41:21" pos:end="41:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="41:35" pos:end="41:38"><expr pos:start="41:35" pos:end="41:38"><name pos:start="41:35" pos:end="41:38">arg2</name></expr></argument>, <argument pos:start="41:41" pos:end="41:49"><expr pos:start="41:41" pos:end="41:49"><name pos:start="41:41" pos:end="41:49">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="42:5" pos:end="42:50">/* XXX: move that code at the end of the TB */</comment>
    <comment type="block" pos:start="43:5" pos:end="43:50">/* qemu_st_helper[s_bits](arg0, arg1, arg2) */</comment>
    <expr_stmt pos:start="44:5" pos:end="46:40"><expr pos:start="44:5" pos:end="46:39"><call pos:start="44:5" pos:end="46:39"><name pos:start="44:5" pos:end="44:13">tcg_out32</name><argument_list pos:start="44:14" pos:end="46:39">(<argument pos:start="44:15" pos:end="44:15"><expr pos:start="44:15" pos:end="44:15"><name pos:start="44:15" pos:end="44:15">s</name></expr></argument>, <argument pos:start="44:18" pos:end="46:38"><expr pos:start="44:18" pos:end="46:38"><name pos:start="44:18" pos:end="44:21">CALL</name> <operator pos:start="44:23" pos:end="44:23">|</operator> <operator pos:start="44:25" pos:end="44:25">(</operator><operator pos:start="44:26" pos:end="44:26">(</operator><operator pos:start="44:27" pos:end="44:27">(</operator><operator pos:start="44:28" pos:end="44:28">(</operator><name pos:start="44:29" pos:end="44:44">tcg_target_ulong</name><operator pos:start="44:45" pos:end="44:45">)</operator><name pos:start="44:46" pos:end="44:68"><name pos:start="44:46" pos:end="44:60">qemu_st_helpers</name><index pos:start="44:61" pos:end="44:68">[<expr pos:start="44:62" pos:end="44:67"><name pos:start="44:62" pos:end="44:67">s_bits</name></expr>]</index></name>
                           <operator pos:start="45:28" pos:end="45:28">-</operator> <operator pos:start="45:30" pos:end="45:30">(</operator><name pos:start="45:31" pos:end="45:46">tcg_target_ulong</name><operator pos:start="45:47" pos:end="45:47">)</operator><name pos:start="45:48" pos:end="45:58"><name pos:start="45:48" pos:end="45:48">s</name><operator pos:start="45:49" pos:end="45:50">-&gt;</operator><name pos:start="45:51" pos:end="45:58">code_ptr</name></name><operator pos:start="45:59" pos:end="45:59">)</operator> <operator pos:start="45:61" pos:end="45:62">&gt;&gt;</operator> <literal type="number" pos:start="45:64" pos:end="45:64">2</literal><operator pos:start="45:65" pos:end="45:65">)</operator>
                         <operator pos:start="46:26" pos:end="46:26">&amp;</operator> <literal type="number" pos:start="46:28" pos:end="46:37">0x3fffffff</literal><operator pos:start="46:38" pos:end="46:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="47:5" pos:end="48:26">/* Store AREG0 in stack to avoid ugly glibc bugs that mangle
       global registers */</comment>
    <comment type="line" pos:start="49:5" pos:end="49:17">// delay slot</comment>
    <expr_stmt pos:start="50:5" pos:end="51:74"><expr pos:start="50:5" pos:end="51:73"><call pos:start="50:5" pos:end="51:73"><name pos:start="50:5" pos:end="50:16">tcg_out_ldst</name><argument_list pos:start="50:17" pos:end="51:73">(<argument pos:start="50:18" pos:end="50:18"><expr pos:start="50:18" pos:end="50:18"><name pos:start="50:18" pos:end="50:18">s</name></expr></argument>, <argument pos:start="50:21" pos:end="50:29"><expr pos:start="50:21" pos:end="50:29"><name pos:start="50:21" pos:end="50:29">TCG_AREG0</name></expr></argument>, <argument pos:start="50:32" pos:end="50:49"><expr pos:start="50:32" pos:end="50:49"><name pos:start="50:32" pos:end="50:49">TCG_REG_CALL_STACK</name></expr></argument>,
                 <argument pos:start="51:18" pos:end="51:60"><expr pos:start="51:18" pos:end="51:60"><name pos:start="51:18" pos:end="51:45">TCG_TARGET_CALL_STACK_OFFSET</name> <operator pos:start="51:47" pos:end="51:47">-</operator> <sizeof pos:start="51:49" pos:end="51:60">sizeof<argument_list pos:start="51:55" pos:end="51:60">(<argument pos:start="51:56" pos:end="51:59"><expr pos:start="51:56" pos:end="51:59"><name pos:start="51:56" pos:end="51:59">long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="51:63" pos:end="51:72"><expr pos:start="51:63" pos:end="51:72"><name pos:start="51:63" pos:end="51:72">HOST_ST_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="53:74"><expr pos:start="52:5" pos:end="53:73"><call pos:start="52:5" pos:end="53:73"><name pos:start="52:5" pos:end="52:16">tcg_out_ldst</name><argument_list pos:start="52:17" pos:end="53:73">(<argument pos:start="52:18" pos:end="52:18"><expr pos:start="52:18" pos:end="52:18"><name pos:start="52:18" pos:end="52:18">s</name></expr></argument>, <argument pos:start="52:21" pos:end="52:29"><expr pos:start="52:21" pos:end="52:29"><name pos:start="52:21" pos:end="52:29">TCG_AREG0</name></expr></argument>, <argument pos:start="52:32" pos:end="52:49"><expr pos:start="52:32" pos:end="52:49"><name pos:start="52:32" pos:end="52:49">TCG_REG_CALL_STACK</name></expr></argument>,
                 <argument pos:start="53:18" pos:end="53:60"><expr pos:start="53:18" pos:end="53:60"><name pos:start="53:18" pos:end="53:45">TCG_TARGET_CALL_STACK_OFFSET</name> <operator pos:start="53:47" pos:end="53:47">-</operator> <sizeof pos:start="53:49" pos:end="53:60">sizeof<argument_list pos:start="53:55" pos:end="53:60">(<argument pos:start="53:56" pos:end="53:59"><expr pos:start="53:56" pos:end="53:59"><name pos:start="53:56" pos:end="53:59">long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:63" pos:end="53:72"><expr pos:start="53:63" pos:end="53:72"><name pos:start="53:63" pos:end="53:72">HOST_LD_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="54:5" pos:end="55:19">/* will become:
       ba label2 */</comment>
    <expr_stmt pos:start="56:5" pos:end="56:41"><expr pos:start="56:5" pos:end="56:40"><name pos:start="56:5" pos:end="56:14">label2_ptr</name> <operator pos:start="56:16" pos:end="56:16">=</operator> <operator pos:start="56:18" pos:end="56:18">(</operator><name pos:start="56:19" pos:end="56:26">uint32_t</name> <operator pos:start="56:28" pos:end="56:28">*</operator><operator pos:start="56:29" pos:end="56:29">)</operator><name pos:start="56:30" pos:end="56:40"><name pos:start="56:30" pos:end="56:30">s</name><operator pos:start="56:31" pos:end="56:32">-&gt;</operator><name pos:start="56:33" pos:end="56:40">code_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:20"><expr pos:start="57:5" pos:end="57:19"><call pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:13">tcg_out32</name><argument_list pos:start="57:14" pos:end="57:19">(<argument pos:start="57:15" pos:end="57:15"><expr pos:start="57:15" pos:end="57:15"><name pos:start="57:15" pos:end="57:15">s</name></expr></argument>, <argument pos:start="57:18" pos:end="57:18"><expr pos:start="57:18" pos:end="57:18"><literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="58:5" pos:end="58:26">/* nop (delay slot) */</comment>
    <expr_stmt pos:start="59:5" pos:end="59:19"><expr pos:start="59:5" pos:end="59:18"><call pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:15">tcg_out_nop</name><argument_list pos:start="59:16" pos:end="59:18">(<argument pos:start="59:17" pos:end="59:17"><expr pos:start="59:17" pos:end="59:17"><name pos:start="59:17" pos:end="59:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="60:5" pos:end="60:17">/* label1: */</comment>
    <expr_stmt pos:start="61:5" pos:end="63:58"><expr pos:start="61:5" pos:end="63:57"><operator pos:start="61:5" pos:end="61:5">*</operator><name pos:start="61:6" pos:end="61:15">label1_ptr</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <operator pos:start="61:19" pos:end="61:19">(</operator><call pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:26">INSN_OP</name><argument_list pos:start="61:27" pos:end="61:29">(<argument pos:start="61:28" pos:end="61:28"><expr pos:start="61:28" pos:end="61:28"><literal type="number" pos:start="61:28" pos:end="61:28">0</literal></expr></argument>)</argument_list></call> <operator pos:start="61:31" pos:end="61:31">|</operator> <call pos:start="61:33" pos:end="61:52"><name pos:start="61:33" pos:end="61:41">INSN_COND</name><argument_list pos:start="61:42" pos:end="61:52">(<argument pos:start="61:43" pos:end="61:48"><expr pos:start="61:43" pos:end="61:48"><name pos:start="61:43" pos:end="61:48">COND_E</name></expr></argument>, <argument pos:start="61:51" pos:end="61:51"><expr pos:start="61:51" pos:end="61:51"><literal type="number" pos:start="61:51" pos:end="61:51">0</literal></expr></argument>)</argument_list></call> <operator pos:start="61:54" pos:end="61:54">|</operator> <call pos:start="61:56" pos:end="61:68"><name pos:start="61:56" pos:end="61:63">INSN_OP2</name><argument_list pos:start="61:64" pos:end="61:68">(<argument pos:start="61:65" pos:end="61:67"><expr pos:start="61:65" pos:end="61:67"><literal type="number" pos:start="61:65" pos:end="61:67">0x2</literal></expr></argument>)</argument_list></call> <operator pos:start="61:70" pos:end="61:70">|</operator>
                   <call pos:start="62:20" pos:end="63:56"><name pos:start="62:20" pos:end="62:29">INSN_OFF22</name><argument_list pos:start="62:30" pos:end="63:56">(<argument pos:start="62:31" pos:end="63:55"><expr pos:start="62:31" pos:end="63:55"><operator pos:start="62:31" pos:end="62:31">(</operator><name pos:start="62:32" pos:end="62:39">unsigned</name> <name pos:start="62:41" pos:end="62:44">long</name><operator pos:start="62:45" pos:end="62:45">)</operator><name pos:start="62:46" pos:end="62:56"><name pos:start="62:46" pos:end="62:46">s</name><operator pos:start="62:47" pos:end="62:48">-&gt;</operator><name pos:start="62:49" pos:end="62:56">code_ptr</name></name> <operator pos:start="62:58" pos:end="62:58">-</operator>
                              <operator pos:start="63:31" pos:end="63:31">(</operator><name pos:start="63:32" pos:end="63:39">unsigned</name> <name pos:start="63:41" pos:end="63:44">long</name><operator pos:start="63:45" pos:end="63:45">)</operator><name pos:start="63:46" pos:end="63:55">label1_ptr</name></expr></argument>)</argument_list></call><operator pos:start="63:57" pos:end="63:57">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="64:5" pos:end="64:29">/* ld [arg1 + x], arg1 */</comment>
    <expr_stmt pos:start="65:5" pos:end="66:64"><expr pos:start="65:5" pos:end="66:63"><call pos:start="65:5" pos:end="66:63"><name pos:start="65:5" pos:end="65:16">tcg_out_ldst</name><argument_list pos:start="65:17" pos:end="66:63">(<argument pos:start="65:18" pos:end="65:18"><expr pos:start="65:18" pos:end="65:18"><name pos:start="65:18" pos:end="65:18">s</name></expr></argument>, <argument pos:start="65:21" pos:end="65:24"><expr pos:start="65:21" pos:end="65:24"><name pos:start="65:21" pos:end="65:24">arg1</name></expr></argument>, <argument pos:start="65:27" pos:end="65:30"><expr pos:start="65:27" pos:end="65:30"><name pos:start="65:27" pos:end="65:30">arg1</name></expr></argument>, <argument pos:start="65:33" pos:end="66:50"><expr pos:start="65:33" pos:end="66:50"><call pos:start="65:33" pos:end="65:61"><name pos:start="65:33" pos:end="65:40">offsetof</name><argument_list pos:start="65:41" pos:end="65:61">(<argument pos:start="65:42" pos:end="65:52"><expr pos:start="65:42" pos:end="65:52"><name pos:start="65:42" pos:end="65:52">CPUTLBEntry</name></expr></argument>, <argument pos:start="65:55" pos:end="65:60"><expr pos:start="65:55" pos:end="65:60"><name pos:start="65:55" pos:end="65:60">addend</name></expr></argument>)</argument_list></call> <operator pos:start="65:63" pos:end="65:63">-</operator>
                 <call pos:start="66:18" pos:end="66:50"><name pos:start="66:18" pos:end="66:25">offsetof</name><argument_list pos:start="66:26" pos:end="66:50">(<argument pos:start="66:27" pos:end="66:37"><expr pos:start="66:27" pos:end="66:37"><name pos:start="66:27" pos:end="66:37">CPUTLBEntry</name></expr></argument>, <argument pos:start="66:40" pos:end="66:49"><expr pos:start="66:40" pos:end="66:49"><name pos:start="66:40" pos:end="66:49">addr_write</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="66:53" pos:end="66:62"><expr pos:start="66:53" pos:end="66:62"><name pos:start="66:53" pos:end="66:62">HOST_LD_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="67:5" pos:end="67:34">/* add addr_reg, arg1, arg0 */</comment>
    <expr_stmt pos:start="68:5" pos:end="68:54"><expr pos:start="68:5" pos:end="68:53"><call pos:start="68:5" pos:end="68:53"><name pos:start="68:5" pos:end="68:17">tcg_out_arith</name><argument_list pos:start="68:18" pos:end="68:53">(<argument pos:start="68:19" pos:end="68:19"><expr pos:start="68:19" pos:end="68:19"><name pos:start="68:19" pos:end="68:19">s</name></expr></argument>, <argument pos:start="68:22" pos:end="68:25"><expr pos:start="68:22" pos:end="68:25"><name pos:start="68:22" pos:end="68:25">arg0</name></expr></argument>, <argument pos:start="68:28" pos:end="68:35"><expr pos:start="68:28" pos:end="68:35"><name pos:start="68:28" pos:end="68:35">addr_reg</name></expr></argument>, <argument pos:start="68:38" pos:end="68:41"><expr pos:start="68:38" pos:end="68:41"><name pos:start="68:38" pos:end="68:41">arg1</name></expr></argument>, <argument pos:start="68:44" pos:end="68:52"><expr pos:start="68:44" pos:end="68:52"><name pos:start="68:44" pos:end="68:52">ARITH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="69:20"><expr pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:8">arg0</name> <operator pos:start="69:10" pos:end="69:10">=</operator> <name pos:start="69:12" pos:end="69:19">addr_reg</name></expr>;</expr_stmt>
    <switch pos:start="70:5" pos:end="100:0">switch<condition pos:start="70:11" pos:end="70:15">(<expr pos:start="70:12" pos:end="70:14"><name pos:start="70:12" pos:end="70:14">opc</name></expr>)</condition> <block pos:start="70:17" pos:end="100:0">{<block_content pos:start="71:5" pos:end="97:20">
    <case pos:start="71:5" pos:end="71:11">case <expr pos:start="71:10" pos:end="71:10"><literal type="number" pos:start="71:10" pos:end="71:10">0</literal></expr>:</case>
        <comment type="block" pos:start="72:9" pos:end="72:34">/* stb data_reg, [arg0] */</comment>
        <expr_stmt pos:start="73:9" pos:end="73:48"><expr pos:start="73:9" pos:end="73:47"><call pos:start="73:9" pos:end="73:47"><name pos:start="73:9" pos:end="73:20">tcg_out_ldst</name><argument_list pos:start="73:21" pos:end="73:47">(<argument pos:start="73:22" pos:end="73:22"><expr pos:start="73:22" pos:end="73:22"><name pos:start="73:22" pos:end="73:22">s</name></expr></argument>, <argument pos:start="73:25" pos:end="73:32"><expr pos:start="73:25" pos:end="73:32"><name pos:start="73:25" pos:end="73:32">data_reg</name></expr></argument>, <argument pos:start="73:35" pos:end="73:38"><expr pos:start="73:35" pos:end="73:38"><name pos:start="73:35" pos:end="73:38">arg0</name></expr></argument>, <argument pos:start="73:41" pos:end="73:41"><expr pos:start="73:41" pos:end="73:41"><literal type="number" pos:start="73:41" pos:end="73:41">0</literal></expr></argument>, <argument pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><name pos:start="73:44" pos:end="73:46">STB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="74:9" pos:end="74:14">break;</break>
    <case pos:start="75:5" pos:end="77:0">case <expr pos:start="75:10" pos:end="75:10"><literal type="number" pos:start="75:10" pos:end="75:10">1</literal></expr>:</case>
<cpp:ifdef pos:start="76:1" pos:end="76:29">#<cpp:directive pos:start="76:2" pos:end="76:6">ifdef</cpp:directive> <name pos:start="76:8" pos:end="76:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="77:9" pos:end="77:34">/* sth data_reg, [arg0] */</comment>
        <expr_stmt pos:start="78:9" pos:end="78:48"><expr pos:start="78:9" pos:end="78:47"><call pos:start="78:9" pos:end="78:47"><name pos:start="78:9" pos:end="78:20">tcg_out_ldst</name><argument_list pos:start="78:21" pos:end="78:47">(<argument pos:start="78:22" pos:end="78:22"><expr pos:start="78:22" pos:end="78:22"><name pos:start="78:22" pos:end="78:22">s</name></expr></argument>, <argument pos:start="78:25" pos:end="78:32"><expr pos:start="78:25" pos:end="78:32"><name pos:start="78:25" pos:end="78:32">data_reg</name></expr></argument>, <argument pos:start="78:35" pos:end="78:38"><expr pos:start="78:35" pos:end="78:38"><name pos:start="78:35" pos:end="78:38">arg0</name></expr></argument>, <argument pos:start="78:41" pos:end="78:41"><expr pos:start="78:41" pos:end="78:41"><literal type="number" pos:start="78:41" pos:end="78:41">0</literal></expr></argument>, <argument pos:start="78:44" pos:end="78:46"><expr pos:start="78:44" pos:end="78:46"><name pos:start="78:44" pos:end="78:46">STH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="79:9" pos:end="79:54">/* stha data_reg, [arg0] ASI_PRIMARY_LITTLE */</comment>
        <expr_stmt pos:start="80:9" pos:end="80:73"><expr pos:start="80:9" pos:end="80:72"><call pos:start="80:9" pos:end="80:72"><name pos:start="80:9" pos:end="80:24">tcg_out_ldst_asi</name><argument_list pos:start="80:25" pos:end="80:72">(<argument pos:start="80:26" pos:end="80:26"><expr pos:start="80:26" pos:end="80:26"><name pos:start="80:26" pos:end="80:26">s</name></expr></argument>, <argument pos:start="80:29" pos:end="80:36"><expr pos:start="80:29" pos:end="80:36"><name pos:start="80:29" pos:end="80:36">data_reg</name></expr></argument>, <argument pos:start="80:39" pos:end="80:42"><expr pos:start="80:39" pos:end="80:42"><name pos:start="80:39" pos:end="80:42">arg0</name></expr></argument>, <argument pos:start="80:45" pos:end="80:45"><expr pos:start="80:45" pos:end="80:45"><literal type="number" pos:start="80:45" pos:end="80:45">0</literal></expr></argument>, <argument pos:start="80:48" pos:end="80:51"><expr pos:start="80:48" pos:end="80:51"><name pos:start="80:48" pos:end="80:51">STHA</name></expr></argument>, <argument pos:start="80:54" pos:end="80:71"><expr pos:start="80:54" pos:end="80:71"><name pos:start="80:54" pos:end="80:71">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="81:9" pos:end="81:14">break;</break>
    <case pos:start="82:5" pos:end="84:0">case <expr pos:start="82:10" pos:end="82:10"><literal type="number" pos:start="82:10" pos:end="82:10">2</literal></expr>:</case>
<cpp:ifdef pos:start="83:1" pos:end="83:29">#<cpp:directive pos:start="83:2" pos:end="83:6">ifdef</cpp:directive> <name pos:start="83:8" pos:end="83:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="84:9" pos:end="84:34">/* stw data_reg, [arg0] */</comment>
        <expr_stmt pos:start="85:9" pos:end="85:48"><expr pos:start="85:9" pos:end="85:47"><call pos:start="85:9" pos:end="85:47"><name pos:start="85:9" pos:end="85:20">tcg_out_ldst</name><argument_list pos:start="85:21" pos:end="85:47">(<argument pos:start="85:22" pos:end="85:22"><expr pos:start="85:22" pos:end="85:22"><name pos:start="85:22" pos:end="85:22">s</name></expr></argument>, <argument pos:start="85:25" pos:end="85:32"><expr pos:start="85:25" pos:end="85:32"><name pos:start="85:25" pos:end="85:32">data_reg</name></expr></argument>, <argument pos:start="85:35" pos:end="85:38"><expr pos:start="85:35" pos:end="85:38"><name pos:start="85:35" pos:end="85:38">arg0</name></expr></argument>, <argument pos:start="85:41" pos:end="85:41"><expr pos:start="85:41" pos:end="85:41"><literal type="number" pos:start="85:41" pos:end="85:41">0</literal></expr></argument>, <argument pos:start="85:44" pos:end="85:46"><expr pos:start="85:44" pos:end="85:46"><name pos:start="85:44" pos:end="85:46">STW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="86:9" pos:end="86:54">/* stwa data_reg, [arg0] ASI_PRIMARY_LITTLE */</comment>
        <expr_stmt pos:start="87:9" pos:end="87:73"><expr pos:start="87:9" pos:end="87:72"><call pos:start="87:9" pos:end="87:72"><name pos:start="87:9" pos:end="87:24">tcg_out_ldst_asi</name><argument_list pos:start="87:25" pos:end="87:72">(<argument pos:start="87:26" pos:end="87:26"><expr pos:start="87:26" pos:end="87:26"><name pos:start="87:26" pos:end="87:26">s</name></expr></argument>, <argument pos:start="87:29" pos:end="87:36"><expr pos:start="87:29" pos:end="87:36"><name pos:start="87:29" pos:end="87:36">data_reg</name></expr></argument>, <argument pos:start="87:39" pos:end="87:42"><expr pos:start="87:39" pos:end="87:42"><name pos:start="87:39" pos:end="87:42">arg0</name></expr></argument>, <argument pos:start="87:45" pos:end="87:45"><expr pos:start="87:45" pos:end="87:45"><literal type="number" pos:start="87:45" pos:end="87:45">0</literal></expr></argument>, <argument pos:start="87:48" pos:end="87:51"><expr pos:start="87:48" pos:end="87:51"><name pos:start="87:48" pos:end="87:51">STWA</name></expr></argument>, <argument pos:start="87:54" pos:end="87:71"><expr pos:start="87:54" pos:end="87:71"><name pos:start="87:54" pos:end="87:71">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="88:9" pos:end="88:14">break;</break>
    <case pos:start="89:5" pos:end="91:0">case <expr pos:start="89:10" pos:end="89:10"><literal type="number" pos:start="89:10" pos:end="89:10">3</literal></expr>:</case>
<cpp:ifdef pos:start="90:1" pos:end="90:29">#<cpp:directive pos:start="90:2" pos:end="90:6">ifdef</cpp:directive> <name pos:start="90:8" pos:end="90:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="91:9" pos:end="91:34">/* stx data_reg, [arg0] */</comment>
        <expr_stmt pos:start="92:9" pos:end="92:48"><expr pos:start="92:9" pos:end="92:47"><call pos:start="92:9" pos:end="92:47"><name pos:start="92:9" pos:end="92:20">tcg_out_ldst</name><argument_list pos:start="92:21" pos:end="92:47">(<argument pos:start="92:22" pos:end="92:22"><expr pos:start="92:22" pos:end="92:22"><name pos:start="92:22" pos:end="92:22">s</name></expr></argument>, <argument pos:start="92:25" pos:end="92:32"><expr pos:start="92:25" pos:end="92:32"><name pos:start="92:25" pos:end="92:32">data_reg</name></expr></argument>, <argument pos:start="92:35" pos:end="92:38"><expr pos:start="92:35" pos:end="92:38"><name pos:start="92:35" pos:end="92:38">arg0</name></expr></argument>, <argument pos:start="92:41" pos:end="92:41"><expr pos:start="92:41" pos:end="92:41"><literal type="number" pos:start="92:41" pos:end="92:41">0</literal></expr></argument>, <argument pos:start="92:44" pos:end="92:46"><expr pos:start="92:44" pos:end="92:46"><name pos:start="92:44" pos:end="92:46">STX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="93:9" pos:end="93:54">/* stxa data_reg, [arg0] ASI_PRIMARY_LITTLE */</comment>
        <expr_stmt pos:start="94:9" pos:end="94:73"><expr pos:start="94:9" pos:end="94:72"><call pos:start="94:9" pos:end="94:72"><name pos:start="94:9" pos:end="94:24">tcg_out_ldst_asi</name><argument_list pos:start="94:25" pos:end="94:72">(<argument pos:start="94:26" pos:end="94:26"><expr pos:start="94:26" pos:end="94:26"><name pos:start="94:26" pos:end="94:26">s</name></expr></argument>, <argument pos:start="94:29" pos:end="94:36"><expr pos:start="94:29" pos:end="94:36"><name pos:start="94:29" pos:end="94:36">data_reg</name></expr></argument>, <argument pos:start="94:39" pos:end="94:42"><expr pos:start="94:39" pos:end="94:42"><name pos:start="94:39" pos:end="94:42">arg0</name></expr></argument>, <argument pos:start="94:45" pos:end="94:45"><expr pos:start="94:45" pos:end="94:45"><literal type="number" pos:start="94:45" pos:end="94:45">0</literal></expr></argument>, <argument pos:start="94:48" pos:end="94:51"><expr pos:start="94:48" pos:end="94:51"><name pos:start="94:48" pos:end="94:51">STXA</name></expr></argument>, <argument pos:start="94:54" pos:end="94:71"><expr pos:start="94:54" pos:end="94:71"><name pos:start="94:54" pos:end="94:71">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="95:9" pos:end="95:14">break;</break>
    <default pos:start="96:5" pos:end="96:12">default:</default>
        <expr_stmt pos:start="97:9" pos:end="97:20"><expr pos:start="97:9" pos:end="97:19"><call pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:17">tcg_abort</name><argument_list pos:start="97:18" pos:end="97:19">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
<cpp:if pos:start="99:1" pos:end="99:27">#<cpp:directive pos:start="99:2" pos:end="99:3">if</cpp:directive> <expr pos:start="99:5" pos:end="99:27"><call pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:11">defined</name><argument_list pos:start="99:12" pos:end="99:27">(<argument pos:start="99:13" pos:end="99:26"><expr pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="100:5" pos:end="100:17">/* label2: */</comment>
    <expr_stmt pos:start="101:5" pos:end="103:58"><expr pos:start="101:5" pos:end="103:57"><operator pos:start="101:5" pos:end="101:5">*</operator><name pos:start="101:6" pos:end="101:15">label2_ptr</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <operator pos:start="101:19" pos:end="101:19">(</operator><call pos:start="101:20" pos:end="101:29"><name pos:start="101:20" pos:end="101:26">INSN_OP</name><argument_list pos:start="101:27" pos:end="101:29">(<argument pos:start="101:28" pos:end="101:28"><expr pos:start="101:28" pos:end="101:28"><literal type="number" pos:start="101:28" pos:end="101:28">0</literal></expr></argument>)</argument_list></call> <operator pos:start="101:31" pos:end="101:31">|</operator> <call pos:start="101:33" pos:end="101:52"><name pos:start="101:33" pos:end="101:41">INSN_COND</name><argument_list pos:start="101:42" pos:end="101:52">(<argument pos:start="101:43" pos:end="101:48"><expr pos:start="101:43" pos:end="101:48"><name pos:start="101:43" pos:end="101:48">COND_A</name></expr></argument>, <argument pos:start="101:51" pos:end="101:51"><expr pos:start="101:51" pos:end="101:51"><literal type="number" pos:start="101:51" pos:end="101:51">0</literal></expr></argument>)</argument_list></call> <operator pos:start="101:54" pos:end="101:54">|</operator> <call pos:start="101:56" pos:end="101:68"><name pos:start="101:56" pos:end="101:63">INSN_OP2</name><argument_list pos:start="101:64" pos:end="101:68">(<argument pos:start="101:65" pos:end="101:67"><expr pos:start="101:65" pos:end="101:67"><literal type="number" pos:start="101:65" pos:end="101:67">0x2</literal></expr></argument>)</argument_list></call> <operator pos:start="101:70" pos:end="101:70">|</operator>
                   <call pos:start="102:20" pos:end="103:56"><name pos:start="102:20" pos:end="102:29">INSN_OFF22</name><argument_list pos:start="102:30" pos:end="103:56">(<argument pos:start="102:31" pos:end="103:55"><expr pos:start="102:31" pos:end="103:55"><operator pos:start="102:31" pos:end="102:31">(</operator><name pos:start="102:32" pos:end="102:39">unsigned</name> <name pos:start="102:41" pos:end="102:44">long</name><operator pos:start="102:45" pos:end="102:45">)</operator><name pos:start="102:46" pos:end="102:56"><name pos:start="102:46" pos:end="102:46">s</name><operator pos:start="102:47" pos:end="102:48">-&gt;</operator><name pos:start="102:49" pos:end="102:56">code_ptr</name></name> <operator pos:start="102:58" pos:end="102:58">-</operator>
                              <operator pos:start="103:31" pos:end="103:31">(</operator><name pos:start="103:32" pos:end="103:39">unsigned</name> <name pos:start="103:41" pos:end="103:44">long</name><operator pos:start="103:45" pos:end="103:45">)</operator><name pos:start="103:46" pos:end="103:55">label2_ptr</name></expr></argument>)</argument_list></call><operator pos:start="103:57" pos:end="103:57">)</operator></expr>;</expr_stmt>
</block_content>}</block></function></unit>
