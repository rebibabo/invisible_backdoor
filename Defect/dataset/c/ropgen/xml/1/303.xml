<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/303.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:11">int</name></type> <name pos:start="1:13" pos:end="1:23">ff_lpc_init</name><parameter_list pos:start="1:24" pos:end="3:48">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">LPCContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:52">blocksize</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:67">max_order</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:47"><decl pos:start="3:25" pos:end="3:47"><type pos:start="3:25" pos:end="3:47"><name pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:28">enum</name> <name pos:start="3:30" pos:end="3:38">FFLPCType</name></name></type> <name pos:start="3:40" pos:end="3:47">lpc_type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:13">

    <expr_stmt pos:start="7:5" pos:end="7:29"><expr pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:5">s</name><operator pos:start="7:6" pos:end="7:7">-&gt;</operator><name pos:start="7:8" pos:end="7:16">blocksize</name></name> <operator pos:start="7:18" pos:end="7:18">=</operator> <name pos:start="7:20" pos:end="7:28">blocksize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:29"><expr pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:16">max_order</name></name> <operator pos:start="9:18" pos:end="9:18">=</operator> <name pos:start="9:20" pos:end="9:28">max_order</name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:28"><expr pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:15">lpc_type</name></name>  <operator pos:start="11:18" pos:end="11:18">=</operator> <name pos:start="11:20" pos:end="11:27">lpc_type</name></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="29:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:16">lpc_type</name> <operator pos:start="15:18" pos:end="15:19">==</operator> <name pos:start="15:21" pos:end="15:40">FF_LPC_TYPE_LEVINSON</name></expr>)</condition> <block pos:start="15:43" pos:end="25:5">{<block_content pos:start="17:9" pos:end="23:35">

        <expr_stmt pos:start="17:9" pos:end="19:71"><expr pos:start="17:9" pos:end="19:70"><name pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:27">windowed_samples</name></name> <operator pos:start="17:29" pos:end="17:29">=</operator> <call pos:start="17:31" pos:end="19:70"><name pos:start="17:31" pos:end="17:40">av_mallocz</name><argument_list pos:start="17:41" pos:end="19:70">(<argument pos:start="17:42" pos:end="19:69"><expr pos:start="17:42" pos:end="19:69"><operator pos:start="17:42" pos:end="17:42">(</operator><name pos:start="17:43" pos:end="17:51">blocksize</name> <operator pos:start="17:53" pos:end="17:53">+</operator> <name pos:start="17:55" pos:end="17:63">max_order</name> <operator pos:start="17:65" pos:end="17:65">+</operator> <literal type="number" pos:start="17:67" pos:end="17:67">2</literal><operator pos:start="17:68" pos:end="17:68">)</operator> <operator pos:start="17:70" pos:end="17:70">*</operator>

                                         <sizeof pos:start="19:42" pos:end="19:69">sizeof<argument_list pos:start="19:48" pos:end="19:69">(<argument pos:start="19:49" pos:end="19:68"><expr pos:start="19:49" pos:end="19:68"><operator pos:start="19:49" pos:end="19:49">*</operator><name pos:start="19:50" pos:end="19:68"><name pos:start="19:50" pos:end="19:50">s</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:68">windowed_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:35"><if pos:start="21:9" pos:end="23:35">if <condition pos:start="21:12" pos:end="21:33">(<expr pos:start="21:13" pos:end="21:32"><operator pos:start="21:13" pos:end="21:13">!</operator><name pos:start="21:14" pos:end="21:32"><name pos:start="21:14" pos:end="21:14">s</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:32">windowed_samples</name></name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:35"><block_content pos:start="23:13" pos:end="23:35">

            <return pos:start="23:13" pos:end="23:35">return <expr pos:start="23:20" pos:end="23:34"><call pos:start="23:20" pos:end="23:34"><name pos:start="23:20" pos:end="23:26">AVERROR</name><argument_list pos:start="23:27" pos:end="23:34">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="29:5">else <block pos:start="25:12" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:35">

        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:27">windowed_samples</name></name> <operator pos:start="27:29" pos:end="27:29">=</operator> <name pos:start="27:31" pos:end="27:34">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:57"><expr pos:start="33:5" pos:end="33:56"><name pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:29">lpc_apply_welch_window</name></name> <operator pos:start="33:31" pos:end="33:31">=</operator> <name pos:start="33:33" pos:end="33:56">lpc_apply_welch_window_c</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><name pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:27">lpc_compute_autocorr</name></name>   <operator pos:start="35:31" pos:end="35:31">=</operator> <name pos:start="35:33" pos:end="35:54">lpc_compute_autocorr_c</name></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="41:27"><if pos:start="39:5" pos:end="41:27">if <condition pos:start="39:8" pos:end="39:17">(<expr pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:16">HAVE_MMX</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:27"><block_content pos:start="41:9" pos:end="41:27">

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><call pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:23">ff_lpc_init_x86</name><argument_list pos:start="41:24" pos:end="41:26">(<argument pos:start="41:25" pos:end="41:25"><expr pos:start="41:25" pos:end="41:25"><name pos:start="41:25" pos:end="41:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="45:5" pos:end="45:13">return <expr pos:start="45:12" pos:end="45:12"><literal type="number" pos:start="45:12" pos:end="45:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
