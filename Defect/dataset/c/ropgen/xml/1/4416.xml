<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4416.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">spapr_set_associativity</name><parameter_list pos:start="1:35" pos:end="1:70">(<parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:44"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">fdt</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:62">sPAPREnvironment</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">spapr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:15">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:23">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUPPCState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:18">cpu_model</name><index pos:start="9:19" pos:end="9:22">[<expr pos:start="9:20" pos:end="9:21"><literal type="number" pos:start="9:20" pos:end="9:21">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">smt</name> <init pos:start="11:13" pos:end="11:34">= <expr pos:start="11:15" pos:end="11:34"><call pos:start="11:15" pos:end="11:34"><name pos:start="11:15" pos:end="11:32">kvmppc_smt_threads</name><argument_list pos:start="11:33" pos:end="11:34">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><call pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:28">(<argument pos:start="15:12" pos:end="15:27"><expr pos:start="15:12" pos:end="15:27"><name pos:start="15:12" pos:end="15:27"><name pos:start="15:12" pos:end="15:16">spapr</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:27">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="19:5" pos:end="69:5">for <control pos:start="19:9" pos:end="19:59">(<init pos:start="19:10" pos:end="19:25"><expr pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:12">env</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:24">first_cpu</name></expr>;</init> <condition pos:start="19:27" pos:end="19:38"><expr pos:start="19:27" pos:end="19:37"><name pos:start="19:27" pos:end="19:29">env</name> <operator pos:start="19:31" pos:end="19:32">!=</operator> <name pos:start="19:34" pos:end="19:37">NULL</name></expr>;</condition> <incr pos:start="19:40" pos:end="19:58"><expr pos:start="19:40" pos:end="19:58"><name pos:start="19:40" pos:end="19:42">env</name> <operator pos:start="19:44" pos:end="19:44">=</operator> <name pos:start="19:46" pos:end="19:58"><name pos:start="19:46" pos:end="19:48">env</name><operator pos:start="19:49" pos:end="19:50">-&gt;</operator><name pos:start="19:51" pos:end="19:58">next_cpu</name></name></expr></incr>)</control> <block pos:start="19:61" pos:end="69:5">{<block_content pos:start="21:9" pos:end="67:9">

        <decl_stmt pos:start="21:9" pos:end="31:65"><decl pos:start="21:9" pos:end="31:64"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint32_t</name></type> <name pos:start="21:18" pos:end="21:32"><name pos:start="21:18" pos:end="21:30">associativity</name><index pos:start="21:31" pos:end="21:32">[]</index></name> <init pos:start="21:34" pos:end="31:64">= <expr pos:start="21:36" pos:end="31:64"><block pos:start="21:36" pos:end="31:64">{<expr pos:start="21:37" pos:end="21:52"><call pos:start="21:37" pos:end="21:52"><name pos:start="21:37" pos:end="21:47">cpu_to_be32</name><argument_list pos:start="21:48" pos:end="21:52">(<argument pos:start="21:49" pos:end="21:51"><expr pos:start="21:49" pos:end="21:51"><literal type="number" pos:start="21:49" pos:end="21:51">0x5</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="23:37" pos:end="23:52"><call pos:start="23:37" pos:end="23:52"><name pos:start="23:37" pos:end="23:47">cpu_to_be32</name><argument_list pos:start="23:48" pos:end="23:52">(<argument pos:start="23:49" pos:end="23:51"><expr pos:start="23:49" pos:end="23:51"><literal type="number" pos:start="23:49" pos:end="23:51">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="25:37" pos:end="25:52"><call pos:start="25:37" pos:end="25:52"><name pos:start="25:37" pos:end="25:47">cpu_to_be32</name><argument_list pos:start="25:48" pos:end="25:52">(<argument pos:start="25:49" pos:end="25:51"><expr pos:start="25:49" pos:end="25:51"><literal type="number" pos:start="25:49" pos:end="25:51">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="27:37" pos:end="27:52"><call pos:start="27:37" pos:end="27:52"><name pos:start="27:37" pos:end="27:47">cpu_to_be32</name><argument_list pos:start="27:48" pos:end="27:52">(<argument pos:start="27:49" pos:end="27:51"><expr pos:start="27:49" pos:end="27:51"><literal type="number" pos:start="27:49" pos:end="27:51">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="29:37" pos:end="29:63"><call pos:start="29:37" pos:end="29:63"><name pos:start="29:37" pos:end="29:47">cpu_to_be32</name><argument_list pos:start="29:48" pos:end="29:63">(<argument pos:start="29:49" pos:end="29:62"><expr pos:start="29:49" pos:end="29:62"><name pos:start="29:49" pos:end="29:62"><name pos:start="29:49" pos:end="29:51">env</name><operator pos:start="29:52" pos:end="29:53">-&gt;</operator><name pos:start="29:54" pos:end="29:62">numa_node</name></name></expr></argument>)</argument_list></call></expr>,

                                    <macro pos:start="31:37" pos:end="31:63"><name pos:start="31:37" pos:end="31:47">cpu_to_be32</name><argument_list pos:start="31:48" pos:end="31:63">(<argument pos:start="31:49" pos:end="31:62">env-&gt;cpu_index</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:40">(<expr pos:start="35:13" pos:end="35:39"><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:27"><name pos:start="35:14" pos:end="35:16">env</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:27">cpu_index</name></name> <operator pos:start="35:29" pos:end="35:29">%</operator> <name pos:start="35:31" pos:end="35:33">smt</name><operator pos:start="35:34" pos:end="35:34">)</operator> <operator pos:start="35:36" pos:end="35:37">!=</operator> <literal type="number" pos:start="35:39" pos:end="35:39">0</literal></expr>)</condition> <block pos:start="35:42" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:21">

            <continue pos:start="37:13" pos:end="37:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="45:33"><expr pos:start="43:9" pos:end="45:32"><call pos:start="43:9" pos:end="45:32"><name pos:start="43:9" pos:end="43:16">snprintf</name><argument_list pos:start="43:17" pos:end="45:32">(<argument pos:start="43:18" pos:end="43:26"><expr pos:start="43:18" pos:end="43:26"><name pos:start="43:18" pos:end="43:26">cpu_model</name></expr></argument>, <argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><literal type="number" pos:start="43:29" pos:end="43:30">32</literal></expr></argument>, <argument pos:start="43:33" pos:end="43:45"><expr pos:start="43:33" pos:end="43:45"><literal type="string" pos:start="43:33" pos:end="43:45">"/cpus/%s@%x"</literal></expr></argument>, <argument pos:start="43:48" pos:end="43:63"><expr pos:start="43:48" pos:end="43:63"><name pos:start="43:48" pos:end="43:63"><name pos:start="43:48" pos:end="43:52">spapr</name><operator pos:start="43:53" pos:end="43:54">-&gt;</operator><name pos:start="43:55" pos:end="43:63">cpu_model</name></name></expr></argument>,

                 <argument pos:start="45:18" pos:end="45:31"><expr pos:start="45:18" pos:end="45:31"><name pos:start="45:18" pos:end="45:31"><name pos:start="45:18" pos:end="45:20">env</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:31">cpu_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:14">offset</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:48"><name pos:start="49:18" pos:end="49:32">fdt_path_offset</name><argument_list pos:start="49:33" pos:end="49:48">(<argument pos:start="49:34" pos:end="49:36"><expr pos:start="49:34" pos:end="49:36"><name pos:start="49:34" pos:end="49:36">fdt</name></expr></argument>, <argument pos:start="49:39" pos:end="49:47"><expr pos:start="49:39" pos:end="49:47"><name pos:start="49:39" pos:end="49:47">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:23">(<expr pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:18">offset</name> <operator pos:start="51:20" pos:end="51:20">&lt;</operator> <literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr>)</condition> <block pos:start="51:25" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:26">

            <return pos:start="53:13" pos:end="53:26">return <expr pos:start="53:20" pos:end="53:25"><name pos:start="53:20" pos:end="53:25">offset</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="61:49"><expr pos:start="59:9" pos:end="61:48"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="61:48"><name pos:start="59:15" pos:end="59:25">fdt_setprop</name><argument_list pos:start="59:26" pos:end="61:48">(<argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><name pos:start="59:27" pos:end="59:29">fdt</name></expr></argument>, <argument pos:start="59:32" pos:end="59:37"><expr pos:start="59:32" pos:end="59:37"><name pos:start="59:32" pos:end="59:37">offset</name></expr></argument>, <argument pos:start="59:40" pos:end="59:58"><expr pos:start="59:40" pos:end="59:58"><literal type="string" pos:start="59:40" pos:end="59:58">"ibm,associativity"</literal></expr></argument>, <argument pos:start="59:61" pos:end="59:73"><expr pos:start="59:61" pos:end="59:73"><name pos:start="59:61" pos:end="59:73">associativity</name></expr></argument>,

                          <argument pos:start="61:27" pos:end="61:47"><expr pos:start="61:27" pos:end="61:47"><sizeof pos:start="61:27" pos:end="61:47">sizeof<argument_list pos:start="61:33" pos:end="61:47">(<argument pos:start="61:34" pos:end="61:46"><expr pos:start="61:34" pos:end="61:46"><name pos:start="61:34" pos:end="61:46">associativity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:23">

            <return pos:start="65:13" pos:end="65:23">return <expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="71:5" pos:end="71:15">return <expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
