<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26720.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_block</name><parameter_list pos:start="1:24" pos:end="5:61">(<parameter pos:start="1:25" pos:end="1:41"><decl pos:start="1:25" pos:end="1:41"><type pos:start="1:25" pos:end="1:41"><name pos:start="1:25" pos:end="1:38">SVQ1EncContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">ref</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:40"><decl pos:start="3:25" pos:end="3:40"><type pos:start="3:25" pos:end="3:40"><name pos:start="3:25" pos:end="3:31">uint8_t</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:40">decoded</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:52"><decl pos:start="3:43" pos:end="3:52"><type pos:start="3:43" pos:end="3:52"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:52">stride</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:63"><decl pos:start="3:55" pos:end="3:63"><type pos:start="3:55" pos:end="3:63"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">level</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:37"><decl pos:start="5:25" pos:end="5:37"><type pos:start="5:25" pos:end="5:37"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:37">threshold</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:49"><decl pos:start="5:40" pos:end="5:49"><type pos:start="5:40" pos:end="5:49"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:49">lambda</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:60"><decl pos:start="5:52" pos:end="5:60"><type pos:start="5:52" pos:end="5:60"><name pos:start="5:52" pos:end="5:54">int</name></type> <name pos:start="5:56" pos:end="5:60">intra</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="287:1">{<block_content pos:start="9:5" pos:end="285:22">

    <decl_stmt pos:start="9:5" pos:end="9:68"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">count</name></decl>, <decl pos:start="9:16" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">y</name></decl>, <decl pos:start="9:19" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:19">x</name></decl>, <decl pos:start="9:22" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:22">i</name></decl>, <decl pos:start="9:25" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:25">j</name></decl>, <decl pos:start="9:28" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:32">split</name></decl>, <decl pos:start="9:35" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:35" pos:end="9:43">best_mean</name></decl>, <decl pos:start="9:46" pos:end="9:55"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:46" pos:end="9:55">best_score</name></decl>, <decl pos:start="9:58" pos:end="9:67"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:58" pos:end="9:67">best_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:19">best_vector</name><index pos:start="11:20" pos:end="11:22">[<expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:17">block_sum</name><index pos:start="13:18" pos:end="13:20">[<expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">7</literal></expr>]</index></name> <init pos:start="13:22" pos:end="13:43">= <expr pos:start="13:24" pos:end="13:43"><block pos:start="13:24" pos:end="13:43">{ <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr>, <expr pos:start="13:29" pos:end="13:29"><literal type="number" pos:start="13:29" pos:end="13:29">0</literal></expr>, <expr pos:start="13:32" pos:end="13:32"><literal type="number" pos:start="13:32" pos:end="13:32">0</literal></expr>, <expr pos:start="13:35" pos:end="13:35"><literal type="number" pos:start="13:35" pos:end="13:35">0</literal></expr>, <expr pos:start="13:38" pos:end="13:38"><literal type="number" pos:start="13:38" pos:end="13:38">0</literal></expr>, <expr pos:start="13:41" pos:end="13:41"><literal type="number" pos:start="13:41" pos:end="13:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">w</name>            <init pos:start="15:22" pos:end="15:44">= <expr pos:start="15:24" pos:end="15:44"><literal type="number" pos:start="15:24" pos:end="15:24">2</literal> <operator pos:start="15:26" pos:end="15:27">&lt;&lt;</operator> <operator pos:start="15:29" pos:end="15:29">(</operator><name pos:start="15:30" pos:end="15:34">level</name> <operator pos:start="15:36" pos:end="15:36">+</operator> <literal type="number" pos:start="15:38" pos:end="15:38">2</literal> <operator pos:start="15:40" pos:end="15:41">&gt;&gt;</operator> <literal type="number" pos:start="15:43" pos:end="15:43">1</literal><operator pos:start="15:44" pos:end="15:44">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:45"><decl pos:start="17:5" pos:end="17:44"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">h</name>            <init pos:start="17:22" pos:end="17:44">= <expr pos:start="17:24" pos:end="17:44"><literal type="number" pos:start="17:24" pos:end="17:24">2</literal> <operator pos:start="17:26" pos:end="17:27">&lt;&lt;</operator> <operator pos:start="17:29" pos:end="17:29">(</operator><name pos:start="17:30" pos:end="17:34">level</name> <operator pos:start="17:36" pos:end="17:36">+</operator> <literal type="number" pos:start="17:38" pos:end="17:38">1</literal> <operator pos:start="17:40" pos:end="17:41">&gt;&gt;</operator> <literal type="number" pos:start="17:43" pos:end="17:43">1</literal><operator pos:start="17:44" pos:end="17:44">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">size</name>         <init pos:start="19:22" pos:end="19:28">= <expr pos:start="19:24" pos:end="19:28"><name pos:start="19:24" pos:end="19:24">w</name> <operator pos:start="19:26" pos:end="19:26">*</operator> <name pos:start="19:28" pos:end="19:28">h</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:59"><expr pos:start="21:5" pos:end="21:58"><call pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:11">int16_t</name> <argument_list pos:start="21:13" pos:end="21:20">(<argument pos:start="21:14" pos:end="21:19"><expr pos:start="21:14" pos:end="21:19"><operator pos:start="21:14" pos:end="21:14">*</operator><name pos:start="21:15" pos:end="21:19">block</name></expr></argument>)</argument_list></call><index pos:start="21:21" pos:end="21:25">[<expr pos:start="21:22" pos:end="21:24"><literal type="number" pos:start="21:22" pos:end="21:24">256</literal></expr>]</index> <operator pos:start="21:27" pos:end="21:27">=</operator> <name pos:start="21:29" pos:end="21:58"><name pos:start="21:29" pos:end="21:29">s</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:51">encoded_block_levels</name><index pos:start="21:52" pos:end="21:58">[<expr pos:start="21:53" pos:end="21:57"><name pos:start="21:53" pos:end="21:57">level</name></expr>]</index></name></expr>;</expr_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:42"><decl pos:start="23:5" pos:end="23:30"><type pos:start="23:5" pos:end="23:18"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:16">int8_t</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:30">codebook_sum</name></decl>, <decl pos:start="23:33" pos:end="23:41"><type ref="prev" pos:start="23:5" pos:end="23:18"><modifier pos:start="23:33" pos:end="23:33">*</modifier></type><name pos:start="23:34" pos:end="23:41">codebook</name></decl>;</decl_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <call pos:start="25:11" pos:end="25:29"><name pos:start="25:11" pos:end="25:18">uint16_t</name><argument_list pos:start="25:19" pos:end="25:29">(<argument pos:start="25:20" pos:end="25:28"><expr pos:start="25:20" pos:end="25:28"><operator pos:start="25:20" pos:end="25:20">*</operator><name pos:start="25:21" pos:end="25:28">mean_vlc</name></expr></argument>)</argument_list></call><index pos:start="25:30" pos:end="25:32">[<expr pos:start="25:31" pos:end="25:31"><literal type="number" pos:start="25:31" pos:end="25:31">2</literal></expr>]</index></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <call pos:start="27:11" pos:end="27:34"><name pos:start="27:11" pos:end="27:17">uint8_t</name><argument_list pos:start="27:18" pos:end="27:34">(<argument pos:start="27:19" pos:end="27:33"><expr pos:start="27:19" pos:end="27:33"><operator pos:start="27:19" pos:end="27:19">*</operator><name pos:start="27:20" pos:end="27:33">multistage_vlc</name></expr></argument>)</argument_list></call><index pos:start="27:35" pos:end="27:37">[<expr pos:start="27:36" pos:end="27:36"><literal type="number" pos:start="27:36" pos:end="27:36">2</literal></expr>]</index></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:14">best_score</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="33:5" pos:end="33:69">// FIXME: Optimize, this does not need to be done multiple times.</comment>

    <if_stmt pos:start="35:5" pos:end="87:5"><if pos:start="35:5" pos:end="61:5">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:13">intra</name></expr>)</condition> <block pos:start="35:16" pos:end="61:5">{<block_content pos:start="37:9" pos:end="59:9">

        <expr_stmt pos:start="37:9" pos:end="37:56"><expr pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:20">codebook_sum</name>   <operator pos:start="37:24" pos:end="37:24">=</operator> <name pos:start="37:26" pos:end="37:55"><name pos:start="37:26" pos:end="37:48">svq1_intra_codebook_sum</name><index pos:start="37:49" pos:end="37:55">[<expr pos:start="37:50" pos:end="37:54"><name pos:start="37:50" pos:end="37:54">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:56"><expr pos:start="39:9" pos:end="39:55"><name pos:start="39:9" pos:end="39:16">codebook</name>       <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:55"><name pos:start="39:26" pos:end="39:48">ff_svq1_intra_codebooks</name><index pos:start="39:49" pos:end="39:55">[<expr pos:start="39:50" pos:end="39:54"><name pos:start="39:50" pos:end="39:54">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:48"><expr pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:16">mean_vlc</name>       <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:47">ff_svq1_intra_mean_vlc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:61"><expr pos:start="43:9" pos:end="43:60"><name pos:start="43:9" pos:end="43:22">multistage_vlc</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:60"><name pos:start="43:26" pos:end="43:53">ff_svq1_intra_multistage_vlc</name><index pos:start="43:54" pos:end="43:60">[<expr pos:start="43:55" pos:end="43:59"><name pos:start="43:55" pos:end="43:59">level</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="45:9" pos:end="59:9">for <control pos:start="45:13" pos:end="45:31">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">y</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:21">y</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <name pos:start="45:25" pos:end="45:25">h</name></expr>;</condition> <incr pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:28">y</name><operator pos:start="45:29" pos:end="45:30">++</operator></expr></incr>)</control> <block pos:start="45:33" pos:end="59:9">{<block_content pos:start="47:13" pos:end="57:13">

            <for pos:start="47:13" pos:end="57:13">for <control pos:start="47:17" pos:end="47:35">(<init pos:start="47:18" pos:end="47:23"><expr pos:start="47:18" pos:end="47:22"><name pos:start="47:18" pos:end="47:18">x</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</init> <condition pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:25">x</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:29">w</name></expr>;</condition> <incr pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:32">x</name><operator pos:start="47:33" pos:end="47:34">++</operator></expr></incr>)</control> <block pos:start="47:37" pos:end="57:13">{<block_content pos:start="49:17" pos:end="55:40">

                <decl_stmt pos:start="49:17" pos:end="49:44"><decl pos:start="49:17" pos:end="49:43"><type pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">int</name></type> <name pos:start="49:21" pos:end="49:21">v</name> <init pos:start="49:23" pos:end="49:43">= <expr pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:27">src</name><index pos:start="49:28" pos:end="49:43">[<expr pos:start="49:29" pos:end="49:42"><name pos:start="49:29" pos:end="49:29">x</name> <operator pos:start="49:31" pos:end="49:31">+</operator> <name pos:start="49:33" pos:end="49:33">y</name> <operator pos:start="49:35" pos:end="49:35">*</operator> <name pos:start="49:37" pos:end="49:42">stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:40"><expr pos:start="51:17" pos:end="51:39"><name pos:start="51:17" pos:end="51:35"><name pos:start="51:17" pos:end="51:21">block</name><index pos:start="51:22" pos:end="51:24">[<expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr>]</index><index pos:start="51:25" pos:end="51:35">[<expr pos:start="51:26" pos:end="51:34"><name pos:start="51:26" pos:end="51:26">x</name> <operator pos:start="51:28" pos:end="51:28">+</operator> <name pos:start="51:30" pos:end="51:30">w</name> <operator pos:start="51:32" pos:end="51:32">*</operator> <name pos:start="51:34" pos:end="51:34">y</name></expr>]</index></name> <operator pos:start="51:37" pos:end="51:37">=</operator> <name pos:start="51:39" pos:end="51:39">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:44"><expr pos:start="53:17" pos:end="53:43"><name pos:start="53:17" pos:end="53:26">best_score</name>         <operator pos:start="53:36" pos:end="53:37">+=</operator> <name pos:start="53:39" pos:end="53:39">v</name> <operator pos:start="53:41" pos:end="53:41">*</operator> <name pos:start="53:43" pos:end="53:43">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:40"><expr pos:start="55:17" pos:end="55:39"><name pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:25">block_sum</name><index pos:start="55:26" pos:end="55:28">[<expr pos:start="55:27" pos:end="55:27"><literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr>]</index></name>       <operator pos:start="55:36" pos:end="55:37">+=</operator> <name pos:start="55:39" pos:end="55:39">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="87:5">else <block pos:start="61:12" pos:end="87:5">{<block_content pos:start="63:9" pos:end="85:9">

        <expr_stmt pos:start="63:9" pos:end="63:56"><expr pos:start="63:9" pos:end="63:55"><name pos:start="63:9" pos:end="63:20">codebook_sum</name>   <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:55"><name pos:start="63:26" pos:end="63:48">svq1_inter_codebook_sum</name><index pos:start="63:49" pos:end="63:55">[<expr pos:start="63:50" pos:end="63:54"><name pos:start="63:50" pos:end="63:54">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:56"><expr pos:start="65:9" pos:end="65:55"><name pos:start="65:9" pos:end="65:16">codebook</name>       <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:55"><name pos:start="65:26" pos:end="65:48">ff_svq1_inter_codebooks</name><index pos:start="65:49" pos:end="65:55">[<expr pos:start="65:50" pos:end="65:54"><name pos:start="65:50" pos:end="65:54">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:54"><expr pos:start="67:9" pos:end="67:53"><name pos:start="67:9" pos:end="67:16">mean_vlc</name>       <operator pos:start="67:24" pos:end="67:24">=</operator> <name pos:start="67:26" pos:end="67:47">ff_svq1_inter_mean_vlc</name> <operator pos:start="67:49" pos:end="67:49">+</operator> <literal type="number" pos:start="67:51" pos:end="67:53">256</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:22">multistage_vlc</name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:60"><name pos:start="69:26" pos:end="69:53">ff_svq1_inter_multistage_vlc</name><index pos:start="69:54" pos:end="69:60">[<expr pos:start="69:55" pos:end="69:59"><name pos:start="69:55" pos:end="69:59">level</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="71:9" pos:end="85:9">for <control pos:start="71:13" pos:end="71:31">(<init pos:start="71:14" pos:end="71:19"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:14">y</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>;</init> <condition pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:25"><name pos:start="71:21" pos:end="71:21">y</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <name pos:start="71:25" pos:end="71:25">h</name></expr>;</condition> <incr pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:28">y</name><operator pos:start="71:29" pos:end="71:30">++</operator></expr></incr>)</control> <block pos:start="71:33" pos:end="85:9">{<block_content pos:start="73:13" pos:end="83:13">

            <for pos:start="73:13" pos:end="83:13">for <control pos:start="73:17" pos:end="73:35">(<init pos:start="73:18" pos:end="73:23"><expr pos:start="73:18" pos:end="73:22"><name pos:start="73:18" pos:end="73:18">x</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</init> <condition pos:start="73:25" pos:end="73:30"><expr pos:start="73:25" pos:end="73:29"><name pos:start="73:25" pos:end="73:25">x</name> <operator pos:start="73:27" pos:end="73:27">&lt;</operator> <name pos:start="73:29" pos:end="73:29">w</name></expr>;</condition> <incr pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:32">x</name><operator pos:start="73:33" pos:end="73:34">++</operator></expr></incr>)</control> <block pos:start="73:37" pos:end="83:13">{<block_content pos:start="75:17" pos:end="81:40">

                <decl_stmt pos:start="75:17" pos:end="75:66"><decl pos:start="75:17" pos:end="75:65"><type pos:start="75:17" pos:end="75:19"><name pos:start="75:17" pos:end="75:19">int</name></type> <name pos:start="75:21" pos:end="75:21">v</name> <init pos:start="75:23" pos:end="75:65">= <expr pos:start="75:25" pos:end="75:65"><name pos:start="75:25" pos:end="75:43"><name pos:start="75:25" pos:end="75:27">src</name><index pos:start="75:28" pos:end="75:43">[<expr pos:start="75:29" pos:end="75:42"><name pos:start="75:29" pos:end="75:29">x</name> <operator pos:start="75:31" pos:end="75:31">+</operator> <name pos:start="75:33" pos:end="75:33">y</name> <operator pos:start="75:35" pos:end="75:35">*</operator> <name pos:start="75:37" pos:end="75:42">stride</name></expr>]</index></name> <operator pos:start="75:45" pos:end="75:45">-</operator> <name pos:start="75:47" pos:end="75:65"><name pos:start="75:47" pos:end="75:49">ref</name><index pos:start="75:50" pos:end="75:65">[<expr pos:start="75:51" pos:end="75:64"><name pos:start="75:51" pos:end="75:51">x</name> <operator pos:start="75:53" pos:end="75:53">+</operator> <name pos:start="75:55" pos:end="75:55">y</name> <operator pos:start="75:57" pos:end="75:57">*</operator> <name pos:start="75:59" pos:end="75:64">stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:40"><expr pos:start="77:17" pos:end="77:39"><name pos:start="77:17" pos:end="77:35"><name pos:start="77:17" pos:end="77:21">block</name><index pos:start="77:22" pos:end="77:24">[<expr pos:start="77:23" pos:end="77:23"><literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>]</index><index pos:start="77:25" pos:end="77:35">[<expr pos:start="77:26" pos:end="77:34"><name pos:start="77:26" pos:end="77:26">x</name> <operator pos:start="77:28" pos:end="77:28">+</operator> <name pos:start="77:30" pos:end="77:30">w</name> <operator pos:start="77:32" pos:end="77:32">*</operator> <name pos:start="77:34" pos:end="77:34">y</name></expr>]</index></name> <operator pos:start="77:37" pos:end="77:37">=</operator> <name pos:start="77:39" pos:end="77:39">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:44"><expr pos:start="79:17" pos:end="79:43"><name pos:start="79:17" pos:end="79:26">best_score</name>         <operator pos:start="79:36" pos:end="79:37">+=</operator> <name pos:start="79:39" pos:end="79:39">v</name> <operator pos:start="79:41" pos:end="79:41">*</operator> <name pos:start="79:43" pos:end="79:43">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:40"><expr pos:start="81:17" pos:end="81:39"><name pos:start="81:17" pos:end="81:28"><name pos:start="81:17" pos:end="81:25">block_sum</name><index pos:start="81:26" pos:end="81:28">[<expr pos:start="81:27" pos:end="81:27"><literal type="number" pos:start="81:27" pos:end="81:27">0</literal></expr>]</index></name>       <operator pos:start="81:36" pos:end="81:37">+=</operator> <name pos:start="81:39" pos:end="81:39">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:20"><expr pos:start="91:5" pos:end="91:19"><name pos:start="91:5" pos:end="91:14">best_count</name>  <operator pos:start="91:17" pos:end="91:17">=</operator> <literal type="number" pos:start="91:19" pos:end="91:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:78"><expr pos:start="93:5" pos:end="93:77"><name pos:start="93:5" pos:end="93:14">best_score</name> <operator pos:start="93:16" pos:end="93:17">-=</operator> <operator pos:start="93:19" pos:end="93:19">(</operator><name pos:start="93:20" pos:end="93:22">int</name><operator pos:start="93:23" pos:end="93:23">)</operator><operator pos:start="93:24" pos:end="93:24">(</operator><operator pos:start="93:25" pos:end="93:25">(</operator><name pos:start="93:26" pos:end="93:33">unsigned</name><operator pos:start="93:34" pos:end="93:34">)</operator><name pos:start="93:35" pos:end="93:46"><name pos:start="93:35" pos:end="93:43">block_sum</name><index pos:start="93:44" pos:end="93:46">[<expr pos:start="93:45" pos:end="93:45"><literal type="number" pos:start="93:45" pos:end="93:45">0</literal></expr>]</index></name> <operator pos:start="93:48" pos:end="93:48">*</operator> <name pos:start="93:50" pos:end="93:61"><name pos:start="93:50" pos:end="93:58">block_sum</name><index pos:start="93:59" pos:end="93:61">[<expr pos:start="93:60" pos:end="93:60"><literal type="number" pos:start="93:60" pos:end="93:60">0</literal></expr>]</index></name> <operator pos:start="93:63" pos:end="93:64">&gt;&gt;</operator> <operator pos:start="93:66" pos:end="93:66">(</operator><name pos:start="93:67" pos:end="93:71">level</name> <operator pos:start="93:73" pos:end="93:73">+</operator> <literal type="number" pos:start="93:75" pos:end="93:75">3</literal><operator pos:start="93:76" pos:end="93:76">)</operator><operator pos:start="93:77" pos:end="93:77">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:13">best_mean</name>   <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:30"><name pos:start="95:19" pos:end="95:27">block_sum</name><index pos:start="95:28" pos:end="95:30">[<expr pos:start="95:29" pos:end="95:29"><literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr>]</index></name> <operator pos:start="95:32" pos:end="95:32">+</operator> <operator pos:start="95:34" pos:end="95:34">(</operator><name pos:start="95:35" pos:end="95:38">size</name> <operator pos:start="95:40" pos:end="95:41">&gt;&gt;</operator> <literal type="number" pos:start="95:43" pos:end="95:43">1</literal><operator pos:start="95:44" pos:end="95:44">)</operator> <operator pos:start="95:46" pos:end="95:47">&gt;&gt;</operator> <operator pos:start="95:49" pos:end="95:49">(</operator><name pos:start="95:50" pos:end="95:54">level</name> <operator pos:start="95:56" pos:end="95:56">+</operator> <literal type="number" pos:start="95:58" pos:end="95:58">3</literal><operator pos:start="95:59" pos:end="95:59">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="181:5"><if pos:start="99:5" pos:end="181:5">if <condition pos:start="99:8" pos:end="99:18">(<expr pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:13">level</name> <operator pos:start="99:15" pos:end="99:15">&lt;</operator> <literal type="number" pos:start="99:17" pos:end="99:17">4</literal></expr>)</condition> <block pos:start="99:20" pos:end="181:5">{<block_content pos:start="101:9" pos:end="179:9">

        <for pos:start="101:9" pos:end="179:9">for <control pos:start="101:13" pos:end="101:43">(<init pos:start="101:14" pos:end="101:23"><expr pos:start="101:14" pos:end="101:22"><name pos:start="101:14" pos:end="101:18">count</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">1</literal></expr>;</init> <condition pos:start="101:25" pos:end="101:34"><expr pos:start="101:25" pos:end="101:33"><name pos:start="101:25" pos:end="101:29">count</name> <operator pos:start="101:31" pos:end="101:31">&lt;</operator> <literal type="number" pos:start="101:33" pos:end="101:33">7</literal></expr>;</condition> <incr pos:start="101:36" pos:end="101:42"><expr pos:start="101:36" pos:end="101:42"><name pos:start="101:36" pos:end="101:40">count</name><operator pos:start="101:41" pos:end="101:42">++</operator></expr></incr>)</control> <block pos:start="101:45" pos:end="179:9">{<block_content pos:start="103:13" pos:end="177:13">

            <decl_stmt pos:start="103:13" pos:end="103:44"><decl pos:start="103:13" pos:end="103:43"><type pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">int</name></type> <name pos:start="103:17" pos:end="103:33">best_vector_score</name> <init pos:start="103:35" pos:end="103:43">= <expr pos:start="103:37" pos:end="103:43"><name pos:start="103:37" pos:end="103:43">INT_MAX</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:66"><decl pos:start="105:13" pos:end="105:40"><type pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">int</name></type> <name pos:start="105:17" pos:end="105:31">best_vector_sum</name>   <init pos:start="105:35" pos:end="105:40">= <expr pos:start="105:37" pos:end="105:40"><operator pos:start="105:37" pos:end="105:37">-</operator><literal type="number" pos:start="105:38" pos:end="105:40">999</literal></expr></init></decl>, <decl pos:start="105:43" pos:end="105:65"><type ref="prev" pos:start="105:13" pos:end="105:15"/><name pos:start="105:43" pos:end="105:58">best_vector_mean</name> <init pos:start="105:60" pos:end="105:65">= <expr pos:start="105:62" pos:end="105:65"><operator pos:start="105:62" pos:end="105:62">-</operator><literal type="number" pos:start="105:63" pos:end="105:65">999</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:46"><decl pos:start="107:13" pos:end="107:45"><type pos:start="107:13" pos:end="107:21"><specifier pos:start="107:13" pos:end="107:17">const</specifier> <name pos:start="107:19" pos:end="107:21">int</name></type> <name pos:start="107:23" pos:end="107:27">stage</name>       <init pos:start="107:35" pos:end="107:45">= <expr pos:start="107:37" pos:end="107:45"><name pos:start="107:37" pos:end="107:41">count</name> <operator pos:start="107:43" pos:end="107:43">-</operator> <literal type="number" pos:start="107:45" pos:end="107:45">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="109:13" pos:end="109:33"><decl pos:start="109:13" pos:end="109:32"><type pos:start="109:13" pos:end="109:26"><specifier pos:start="109:13" pos:end="109:17">const</specifier> <name pos:start="109:19" pos:end="109:24">int8_t</name> <modifier pos:start="109:26" pos:end="109:26">*</modifier></type><name pos:start="109:27" pos:end="109:32">vector</name></decl>;</decl_stmt>



            <for pos:start="113:13" pos:end="147:13">for <control pos:start="113:17" pos:end="113:36">(<init pos:start="113:18" pos:end="113:23"><expr pos:start="113:18" pos:end="113:22"><name pos:start="113:18" pos:end="113:18">i</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>;</init> <condition pos:start="113:25" pos:end="113:31"><expr pos:start="113:25" pos:end="113:30"><name pos:start="113:25" pos:end="113:25">i</name> <operator pos:start="113:27" pos:end="113:27">&lt;</operator> <literal type="number" pos:start="113:29" pos:end="113:30">16</literal></expr>;</condition> <incr pos:start="113:33" pos:end="113:35"><expr pos:start="113:33" pos:end="113:35"><name pos:start="113:33" pos:end="113:33">i</name><operator pos:start="113:34" pos:end="113:35">++</operator></expr></incr>)</control> <block pos:start="113:38" pos:end="147:13">{<block_content pos:start="115:17" pos:end="145:17">

                <decl_stmt pos:start="115:17" pos:end="115:55"><decl pos:start="115:17" pos:end="115:54"><type pos:start="115:17" pos:end="115:19"><name pos:start="115:17" pos:end="115:19">int</name></type> <name pos:start="115:21" pos:end="115:23">sum</name> <init pos:start="115:25" pos:end="115:54">= <expr pos:start="115:27" pos:end="115:54"><name pos:start="115:27" pos:end="115:54"><name pos:start="115:27" pos:end="115:38">codebook_sum</name><index pos:start="115:39" pos:end="115:54">[<expr pos:start="115:40" pos:end="115:53"><name pos:start="115:40" pos:end="115:44">stage</name> <operator pos:start="115:46" pos:end="115:46">*</operator> <literal type="number" pos:start="115:48" pos:end="115:51">16</literal> <operator pos:start="115:51" pos:end="115:51">+</operator> <name pos:start="115:53" pos:end="115:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="117:17" pos:end="117:37"><decl pos:start="117:17" pos:end="117:23"><type pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:19">int</name></type> <name pos:start="117:21" pos:end="117:23">sqr</name></decl>, <decl pos:start="117:26" pos:end="117:29"><type ref="prev" pos:start="117:17" pos:end="117:19"/><name pos:start="117:26" pos:end="117:29">diff</name></decl>, <decl pos:start="117:32" pos:end="117:36"><type ref="prev" pos:start="117:17" pos:end="117:19"/><name pos:start="117:32" pos:end="117:36">score</name></decl>;</decl_stmt>



                <expr_stmt pos:start="121:17" pos:end="121:65"><expr pos:start="121:17" pos:end="121:64"><name pos:start="121:17" pos:end="121:22">vector</name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:33">codebook</name> <operator pos:start="121:35" pos:end="121:35">+</operator> <name pos:start="121:37" pos:end="121:41">stage</name> <operator pos:start="121:43" pos:end="121:43">*</operator> <name pos:start="121:45" pos:end="121:48">size</name> <operator pos:start="121:50" pos:end="121:50">*</operator> <literal type="number" pos:start="121:52" pos:end="121:55">16</literal> <operator pos:start="121:55" pos:end="121:55">+</operator> <name pos:start="121:57" pos:end="121:57">i</name> <operator pos:start="121:59" pos:end="121:59">*</operator> <name pos:start="121:61" pos:end="121:64">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:74"><expr pos:start="123:17" pos:end="123:73"><name pos:start="123:17" pos:end="123:19">sqr</name>    <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:73"><name pos:start="123:26" pos:end="123:45"><name pos:start="123:26" pos:end="123:26">s</name><operator pos:start="123:27" pos:end="123:28">-&gt;</operator><name pos:start="123:29" pos:end="123:45">ssd_int8_vs_int16</name></name><argument_list pos:start="123:46" pos:end="123:73">(<argument pos:start="123:47" pos:end="123:52"><expr pos:start="123:47" pos:end="123:52"><name pos:start="123:47" pos:end="123:52">vector</name></expr></argument>, <argument pos:start="123:55" pos:end="123:66"><expr pos:start="123:55" pos:end="123:66"><name pos:start="123:55" pos:end="123:66"><name pos:start="123:55" pos:end="123:59">block</name><index pos:start="123:60" pos:end="123:66">[<expr pos:start="123:61" pos:end="123:65"><name pos:start="123:61" pos:end="123:65">stage</name></expr>]</index></name></expr></argument>, <argument pos:start="123:69" pos:end="123:72"><expr pos:start="123:69" pos:end="123:72"><name pos:start="123:69" pos:end="123:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:48"><expr pos:start="125:17" pos:end="125:47"><name pos:start="125:17" pos:end="125:20">diff</name>   <operator pos:start="125:24" pos:end="125:24">=</operator> <name pos:start="125:26" pos:end="125:41"><name pos:start="125:26" pos:end="125:34">block_sum</name><index pos:start="125:35" pos:end="125:41">[<expr pos:start="125:36" pos:end="125:40"><name pos:start="125:36" pos:end="125:40">stage</name></expr>]</index></name> <operator pos:start="125:43" pos:end="125:43">-</operator> <name pos:start="125:45" pos:end="125:47">sum</name></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:69"><expr pos:start="127:17" pos:end="127:68"><name pos:start="127:17" pos:end="127:21">score</name>  <operator pos:start="127:24" pos:end="127:24">=</operator> <name pos:start="127:26" pos:end="127:28">sqr</name> <operator pos:start="127:30" pos:end="127:30">-</operator> <operator pos:start="127:32" pos:end="127:32">(</operator><name pos:start="127:33" pos:end="127:36">diff</name> <operator pos:start="127:38" pos:end="127:38">*</operator> <operator pos:start="127:40" pos:end="127:40">(</operator><name pos:start="127:41" pos:end="127:47">int64_t</name><operator pos:start="127:48" pos:end="127:48">)</operator><name pos:start="127:49" pos:end="127:52">diff</name> <operator pos:start="127:54" pos:end="127:55">&gt;&gt;</operator> <operator pos:start="127:57" pos:end="127:57">(</operator><name pos:start="127:58" pos:end="127:62">level</name> <operator pos:start="127:64" pos:end="127:64">+</operator> <literal type="number" pos:start="127:66" pos:end="127:66">3</literal><operator pos:start="127:67" pos:end="127:67">)</operator><operator pos:start="127:68" pos:end="127:68">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="127:71" pos:end="127:92">// FIXME: 64bit slooow</comment>

                <if_stmt pos:start="129:17" pos:end="145:17"><if pos:start="129:17" pos:end="145:17">if <condition pos:start="129:20" pos:end="129:46">(<expr pos:start="129:21" pos:end="129:45"><name pos:start="129:21" pos:end="129:25">score</name> <operator pos:start="129:27" pos:end="129:27">&lt;</operator> <name pos:start="129:29" pos:end="129:45">best_vector_score</name></expr>)</condition> <block pos:start="129:48" pos:end="145:17">{<block_content pos:start="131:21" pos:end="143:46">

                    <decl_stmt pos:start="131:21" pos:end="131:65"><decl pos:start="131:21" pos:end="131:64"><type pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">int</name></type> <name pos:start="131:25" pos:end="131:28">mean</name> <init pos:start="131:30" pos:end="131:64">= <expr pos:start="131:32" pos:end="131:64"><name pos:start="131:32" pos:end="131:35">diff</name> <operator pos:start="131:37" pos:end="131:37">+</operator> <operator pos:start="131:39" pos:end="131:39">(</operator><name pos:start="131:40" pos:end="131:43">size</name> <operator pos:start="131:45" pos:end="131:46">&gt;&gt;</operator> <literal type="number" pos:start="131:48" pos:end="131:48">1</literal><operator pos:start="131:49" pos:end="131:49">)</operator> <operator pos:start="131:51" pos:end="131:52">&gt;&gt;</operator> <operator pos:start="131:54" pos:end="131:54">(</operator><name pos:start="131:55" pos:end="131:59">level</name> <operator pos:start="131:61" pos:end="131:61">+</operator> <literal type="number" pos:start="131:63" pos:end="131:63">3</literal><operator pos:start="131:64" pos:end="131:64">)</operator></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="133:21" pos:end="133:58"><expr pos:start="133:21" pos:end="133:57"><call pos:start="133:21" pos:end="133:57"><name pos:start="133:21" pos:end="133:30">av_assert2</name><argument_list pos:start="133:31" pos:end="133:57">(<argument pos:start="133:32" pos:end="133:56"><expr pos:start="133:32" pos:end="133:56"><name pos:start="133:32" pos:end="133:35">mean</name> <operator pos:start="133:37" pos:end="133:37">&gt;</operator> <operator pos:start="133:39" pos:end="133:39">-</operator><literal type="number" pos:start="133:40" pos:end="133:42">300</literal> <operator pos:start="133:44" pos:end="133:45">&amp;&amp;</operator> <name pos:start="133:47" pos:end="133:50">mean</name> <operator pos:start="133:52" pos:end="133:52">&lt;</operator> <literal type="number" pos:start="133:54" pos:end="133:56">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="135:21" pos:end="135:78"><expr pos:start="135:21" pos:end="135:77"><name pos:start="135:21" pos:end="135:24">mean</name>               <operator pos:start="135:40" pos:end="135:40">=</operator> <call pos:start="135:42" pos:end="135:77"><name pos:start="135:42" pos:end="135:48">av_clip</name><argument_list pos:start="135:49" pos:end="135:77">(<argument pos:start="135:50" pos:end="135:53"><expr pos:start="135:50" pos:end="135:53"><name pos:start="135:50" pos:end="135:53">mean</name></expr></argument>, <argument pos:start="135:56" pos:end="135:71"><expr pos:start="135:56" pos:end="135:71"><ternary pos:start="135:56" pos:end="135:71"><condition pos:start="135:56" pos:end="135:62"><expr pos:start="135:56" pos:end="135:60"><name pos:start="135:56" pos:end="135:60">intra</name></expr> ?</condition><then pos:start="135:64" pos:end="135:64"> <expr pos:start="135:64" pos:end="135:64"><literal type="number" pos:start="135:64" pos:end="135:64">0</literal></expr> </then><else pos:start="135:66" pos:end="135:71">: <expr pos:start="135:68" pos:end="135:71"><operator pos:start="135:68" pos:end="135:68">-</operator><literal type="number" pos:start="135:69" pos:end="135:71">256</literal></expr></else></ternary></expr></argument>, <argument pos:start="135:74" pos:end="135:76"><expr pos:start="135:74" pos:end="135:76"><literal type="number" pos:start="135:74" pos:end="135:76">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="137:21" pos:end="137:47"><expr pos:start="137:21" pos:end="137:46"><name pos:start="137:21" pos:end="137:37">best_vector_score</name>  <operator pos:start="137:40" pos:end="137:40">=</operator> <name pos:start="137:42" pos:end="137:46">score</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:43"><expr pos:start="139:21" pos:end="139:42"><name pos:start="139:21" pos:end="139:38"><name pos:start="139:21" pos:end="139:31">best_vector</name><index pos:start="139:32" pos:end="139:38">[<expr pos:start="139:33" pos:end="139:37"><name pos:start="139:33" pos:end="139:37">stage</name></expr>]</index></name> <operator pos:start="139:40" pos:end="139:40">=</operator> <name pos:start="139:42" pos:end="139:42">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:45"><expr pos:start="141:21" pos:end="141:44"><name pos:start="141:21" pos:end="141:35">best_vector_sum</name>    <operator pos:start="141:40" pos:end="141:40">=</operator> <name pos:start="141:42" pos:end="141:44">sum</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:46"><expr pos:start="143:21" pos:end="143:45"><name pos:start="143:21" pos:end="143:36">best_vector_mean</name>   <operator pos:start="143:40" pos:end="143:40">=</operator> <name pos:start="143:42" pos:end="143:45">mean</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="149:13" pos:end="149:49"><expr pos:start="149:13" pos:end="149:48"><call pos:start="149:13" pos:end="149:48"><name pos:start="149:13" pos:end="149:22">av_assert0</name><argument_list pos:start="149:23" pos:end="149:48">(<argument pos:start="149:24" pos:end="149:47"><expr pos:start="149:24" pos:end="149:47"><name pos:start="149:24" pos:end="149:39">best_vector_mean</name> <operator pos:start="149:41" pos:end="149:42">!=</operator> <operator pos:start="149:44" pos:end="149:44">-</operator><literal type="number" pos:start="149:45" pos:end="149:47">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:78"><expr pos:start="151:13" pos:end="151:77"><name pos:start="151:13" pos:end="151:18">vector</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <name pos:start="151:22" pos:end="151:29">codebook</name> <operator pos:start="151:31" pos:end="151:31">+</operator> <name pos:start="151:33" pos:end="151:37">stage</name> <operator pos:start="151:39" pos:end="151:39">*</operator> <name pos:start="151:41" pos:end="151:44">size</name> <operator pos:start="151:46" pos:end="151:46">*</operator> <literal type="number" pos:start="151:48" pos:end="151:51">16</literal> <operator pos:start="151:51" pos:end="151:51">+</operator> <name pos:start="151:53" pos:end="151:70"><name pos:start="151:53" pos:end="151:63">best_vector</name><index pos:start="151:64" pos:end="151:70">[<expr pos:start="151:65" pos:end="151:69"><name pos:start="151:65" pos:end="151:69">stage</name></expr>]</index></name> <operator pos:start="151:72" pos:end="151:72">*</operator> <name pos:start="151:74" pos:end="151:77">size</name></expr>;</expr_stmt>

            <for pos:start="153:13" pos:end="155:66">for <control pos:start="153:17" pos:end="153:38">(<init pos:start="153:18" pos:end="153:23"><expr pos:start="153:18" pos:end="153:22"><name pos:start="153:18" pos:end="153:18">j</name> <operator pos:start="153:20" pos:end="153:20">=</operator> <literal type="number" pos:start="153:22" pos:end="153:22">0</literal></expr>;</init> <condition pos:start="153:25" pos:end="153:33"><expr pos:start="153:25" pos:end="153:32"><name pos:start="153:25" pos:end="153:25">j</name> <operator pos:start="153:27" pos:end="153:27">&lt;</operator> <name pos:start="153:29" pos:end="153:32">size</name></expr>;</condition> <incr pos:start="153:35" pos:end="153:37"><expr pos:start="153:35" pos:end="153:37"><name pos:start="153:35" pos:end="153:35">j</name><operator pos:start="153:36" pos:end="153:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="155:17" pos:end="155:66"><block_content pos:start="155:17" pos:end="155:66">

                <expr_stmt pos:start="155:17" pos:end="155:66"><expr pos:start="155:17" pos:end="155:65"><name pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:21">block</name><index pos:start="155:22" pos:end="155:32">[<expr pos:start="155:23" pos:end="155:31"><name pos:start="155:23" pos:end="155:27">stage</name> <operator pos:start="155:29" pos:end="155:29">+</operator> <literal type="number" pos:start="155:31" pos:end="155:31">1</literal></expr>]</index><index pos:start="155:33" pos:end="155:35">[<expr pos:start="155:34" pos:end="155:34"><name pos:start="155:34" pos:end="155:34">j</name></expr>]</index></name> <operator pos:start="155:37" pos:end="155:37">=</operator> <name pos:start="155:39" pos:end="155:53"><name pos:start="155:39" pos:end="155:43">block</name><index pos:start="155:44" pos:end="155:50">[<expr pos:start="155:45" pos:end="155:49"><name pos:start="155:45" pos:end="155:49">stage</name></expr>]</index><index pos:start="155:51" pos:end="155:53">[<expr pos:start="155:52" pos:end="155:52"><name pos:start="155:52" pos:end="155:52">j</name></expr>]</index></name> <operator pos:start="155:55" pos:end="155:55">-</operator> <name pos:start="155:57" pos:end="155:65"><name pos:start="155:57" pos:end="155:62">vector</name><index pos:start="155:63" pos:end="155:65">[<expr pos:start="155:64" pos:end="155:64"><name pos:start="155:64" pos:end="155:64">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="157:13" pos:end="157:70"><expr pos:start="157:13" pos:end="157:69"><name pos:start="157:13" pos:end="157:32"><name pos:start="157:13" pos:end="157:21">block_sum</name><index pos:start="157:22" pos:end="157:32">[<expr pos:start="157:23" pos:end="157:31"><name pos:start="157:23" pos:end="157:27">stage</name> <operator pos:start="157:29" pos:end="157:29">+</operator> <literal type="number" pos:start="157:31" pos:end="157:31">1</literal></expr>]</index></name> <operator pos:start="157:34" pos:end="157:34">=</operator> <name pos:start="157:36" pos:end="157:51"><name pos:start="157:36" pos:end="157:44">block_sum</name><index pos:start="157:45" pos:end="157:51">[<expr pos:start="157:46" pos:end="157:50"><name pos:start="157:46" pos:end="157:50">stage</name></expr>]</index></name> <operator pos:start="157:53" pos:end="157:53">-</operator> <name pos:start="157:55" pos:end="157:69">best_vector_sum</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="165:69"><expr pos:start="159:13" pos:end="165:68"><name pos:start="159:13" pos:end="159:29">best_vector_score</name>   <operator pos:start="159:33" pos:end="159:34">+=</operator> <name pos:start="159:36" pos:end="159:41">lambda</name> <operator pos:start="159:43" pos:end="159:43">*</operator>

                                   <operator pos:start="161:36" pos:end="161:36">(</operator><operator pos:start="161:37" pos:end="161:37">+</operator><literal type="number" pos:start="161:38" pos:end="161:40">1</literal> <operator pos:start="161:40" pos:end="161:40">+</operator> <literal type="number" pos:start="161:42" pos:end="161:42">4</literal> <operator pos:start="161:44" pos:end="161:44">*</operator> <name pos:start="161:46" pos:end="161:50">count</name> <operator pos:start="161:52" pos:end="161:52">+</operator>

                                    <name pos:start="163:37" pos:end="163:64"><name pos:start="163:37" pos:end="163:50">multistage_vlc</name><index pos:start="163:51" pos:end="163:61">[<expr pos:start="163:52" pos:end="163:60"><literal type="number" pos:start="163:52" pos:end="163:54">1</literal> <operator pos:start="163:54" pos:end="163:54">+</operator> <name pos:start="163:56" pos:end="163:60">count</name></expr>]</index><index pos:start="163:62" pos:end="163:64">[<expr pos:start="163:63" pos:end="163:63"><literal type="number" pos:start="163:63" pos:end="163:63">1</literal></expr>]</index></name>

                                    <operator pos:start="165:37" pos:end="165:37">+</operator> <name pos:start="165:39" pos:end="165:67"><name pos:start="165:39" pos:end="165:46">mean_vlc</name><index pos:start="165:47" pos:end="165:64">[<expr pos:start="165:48" pos:end="165:63"><name pos:start="165:48" pos:end="165:63">best_vector_mean</name></expr>]</index><index pos:start="165:65" pos:end="165:67">[<expr pos:start="165:66" pos:end="165:66"><literal type="number" pos:start="165:66" pos:end="165:66">1</literal></expr>]</index></name><operator pos:start="165:68" pos:end="165:68">)</operator></expr>;</expr_stmt>



            <if_stmt pos:start="169:13" pos:end="177:13"><if pos:start="169:13" pos:end="177:13">if <condition pos:start="169:16" pos:end="169:47">(<expr pos:start="169:17" pos:end="169:46"><name pos:start="169:17" pos:end="169:33">best_vector_score</name> <operator pos:start="169:35" pos:end="169:35">&lt;</operator> <name pos:start="169:37" pos:end="169:46">best_score</name></expr>)</condition> <block pos:start="169:49" pos:end="177:13">{<block_content pos:start="171:17" pos:end="175:46">

                <expr_stmt pos:start="171:17" pos:end="171:47"><expr pos:start="171:17" pos:end="171:46"><name pos:start="171:17" pos:end="171:26">best_score</name> <operator pos:start="171:28" pos:end="171:28">=</operator> <name pos:start="171:30" pos:end="171:46">best_vector_score</name></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:35"><expr pos:start="173:17" pos:end="173:34"><name pos:start="173:17" pos:end="173:26">best_count</name> <operator pos:start="173:28" pos:end="173:28">=</operator> <name pos:start="173:30" pos:end="173:34">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:46"><expr pos:start="175:17" pos:end="175:45"><name pos:start="175:17" pos:end="175:25">best_mean</name>  <operator pos:start="175:28" pos:end="175:28">=</operator> <name pos:start="175:30" pos:end="175:45">best_vector_mean</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:14"><expr pos:start="185:5" pos:end="185:13"><name pos:start="185:5" pos:end="185:9">split</name> <operator pos:start="185:11" pos:end="185:11">=</operator> <literal type="number" pos:start="185:13" pos:end="185:13">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="227:5"><if pos:start="187:5" pos:end="227:5">if <condition pos:start="187:8" pos:end="187:40">(<expr pos:start="187:9" pos:end="187:39"><name pos:start="187:9" pos:end="187:18">best_score</name> <operator pos:start="187:20" pos:end="187:20">&gt;</operator> <name pos:start="187:22" pos:end="187:30">threshold</name> <operator pos:start="187:32" pos:end="187:33">&amp;&amp;</operator> <name pos:start="187:35" pos:end="187:39">level</name></expr>)</condition> <block pos:start="187:42" pos:end="227:5">{<block_content pos:start="189:9" pos:end="225:9">

        <decl_stmt pos:start="189:9" pos:end="189:23"><decl pos:start="189:9" pos:end="189:22"><type pos:start="189:9" pos:end="189:11"><name pos:start="189:9" pos:end="189:11">int</name></type> <name pos:start="189:13" pos:end="189:17">score</name>  <init pos:start="189:20" pos:end="189:22">= <expr pos:start="189:22" pos:end="189:22"><literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:56"><decl pos:start="191:9" pos:end="191:55"><type pos:start="191:9" pos:end="191:11"><name pos:start="191:9" pos:end="191:11">int</name></type> <name pos:start="191:13" pos:end="191:18">offset</name> <init pos:start="191:20" pos:end="191:55">= <expr pos:start="191:22" pos:end="191:55"><ternary pos:start="191:22" pos:end="191:55"><condition pos:start="191:22" pos:end="191:32"><expr pos:start="191:22" pos:end="191:30"><name pos:start="191:22" pos:end="191:26">level</name> <operator pos:start="191:28" pos:end="191:28">&amp;</operator> <literal type="number" pos:start="191:30" pos:end="191:30">1</literal></expr> ?</condition><then pos:start="191:34" pos:end="191:47"> <expr pos:start="191:34" pos:end="191:47"><name pos:start="191:34" pos:end="191:39">stride</name> <operator pos:start="191:41" pos:end="191:41">*</operator> <name pos:start="191:43" pos:end="191:43">h</name> <operator pos:start="191:45" pos:end="191:45">/</operator> <literal type="number" pos:start="191:47" pos:end="191:47">2</literal></expr> </then><else pos:start="191:49" pos:end="191:55">: <expr pos:start="191:51" pos:end="191:55"><name pos:start="191:51" pos:end="191:51">w</name> <operator pos:start="191:53" pos:end="191:53">/</operator> <literal type="number" pos:start="191:55" pos:end="191:55">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="193:9" pos:end="193:32"><decl pos:start="193:9" pos:end="193:31"><type pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:21">PutBitContext</name></type> <name pos:start="193:23" pos:end="193:31"><name pos:start="193:23" pos:end="193:28">backup</name><index pos:start="193:29" pos:end="193:31">[<expr pos:start="193:30" pos:end="193:30"><literal type="number" pos:start="193:30" pos:end="193:30">6</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="197:9" pos:end="199:41">for <control pos:start="197:13" pos:end="197:40">(<init pos:start="197:14" pos:end="197:27"><expr pos:start="197:14" pos:end="197:26"><name pos:start="197:14" pos:end="197:14">i</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <name pos:start="197:18" pos:end="197:22">level</name> <operator pos:start="197:24" pos:end="197:24">-</operator> <literal type="number" pos:start="197:26" pos:end="197:26">1</literal></expr>;</init> <condition pos:start="197:29" pos:end="197:35"><expr pos:start="197:29" pos:end="197:34"><name pos:start="197:29" pos:end="197:29">i</name> <operator pos:start="197:31" pos:end="197:32">&gt;=</operator> <literal type="number" pos:start="197:34" pos:end="197:34">0</literal></expr>;</condition> <incr pos:start="197:37" pos:end="197:39"><expr pos:start="197:37" pos:end="197:39"><name pos:start="197:37" pos:end="197:37">i</name><operator pos:start="197:38" pos:end="197:39">--</operator></expr></incr>)</control><block type="pseudo" pos:start="199:13" pos:end="199:41"><block_content pos:start="199:13" pos:end="199:41">

            <expr_stmt pos:start="199:13" pos:end="199:41"><expr pos:start="199:13" pos:end="199:40"><name pos:start="199:13" pos:end="199:21"><name pos:start="199:13" pos:end="199:18">backup</name><index pos:start="199:19" pos:end="199:21">[<expr pos:start="199:20" pos:end="199:20"><name pos:start="199:20" pos:end="199:20">i</name></expr>]</index></name> <operator pos:start="199:23" pos:end="199:23">=</operator> <name pos:start="199:25" pos:end="199:40"><name pos:start="199:25" pos:end="199:25">s</name><operator pos:start="199:26" pos:end="199:27">-&gt;</operator><name pos:start="199:28" pos:end="199:37">reorder_pb</name><index pos:start="199:38" pos:end="199:40">[<expr pos:start="199:39" pos:end="199:39"><name pos:start="199:39" pos:end="199:39">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="201:9" pos:end="203:61"><expr pos:start="201:9" pos:end="203:60"><name pos:start="201:9" pos:end="201:13">score</name> <operator pos:start="201:15" pos:end="201:16">+=</operator> <call pos:start="201:18" pos:end="203:60"><name pos:start="201:18" pos:end="201:29">encode_block</name><argument_list pos:start="201:30" pos:end="203:60">(<argument pos:start="201:31" pos:end="201:31"><expr pos:start="201:31" pos:end="201:31"><name pos:start="201:31" pos:end="201:31">s</name></expr></argument>, <argument pos:start="201:34" pos:end="201:36"><expr pos:start="201:34" pos:end="201:36"><name pos:start="201:34" pos:end="201:36">src</name></expr></argument>, <argument pos:start="201:39" pos:end="201:41"><expr pos:start="201:39" pos:end="201:41"><name pos:start="201:39" pos:end="201:41">ref</name></expr></argument>, <argument pos:start="201:44" pos:end="201:50"><expr pos:start="201:44" pos:end="201:50"><name pos:start="201:44" pos:end="201:50">decoded</name></expr></argument>, <argument pos:start="201:53" pos:end="201:58"><expr pos:start="201:53" pos:end="201:58"><name pos:start="201:53" pos:end="201:58">stride</name></expr></argument>, <argument pos:start="201:61" pos:end="201:69"><expr pos:start="201:61" pos:end="201:69"><name pos:start="201:61" pos:end="201:65">level</name> <operator pos:start="201:67" pos:end="201:67">-</operator> <literal type="number" pos:start="201:69" pos:end="201:69">1</literal></expr></argument>,

                              <argument pos:start="203:31" pos:end="203:44"><expr pos:start="203:31" pos:end="203:44"><name pos:start="203:31" pos:end="203:39">threshold</name> <operator pos:start="203:41" pos:end="203:42">&gt;&gt;</operator> <literal type="number" pos:start="203:44" pos:end="203:44">1</literal></expr></argument>, <argument pos:start="203:47" pos:end="203:52"><expr pos:start="203:47" pos:end="203:52"><name pos:start="203:47" pos:end="203:52">lambda</name></expr></argument>, <argument pos:start="203:55" pos:end="203:59"><expr pos:start="203:55" pos:end="203:59"><name pos:start="203:55" pos:end="203:59">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="207:80"><expr pos:start="205:9" pos:end="207:79"><name pos:start="205:9" pos:end="205:13">score</name> <operator pos:start="205:15" pos:end="205:16">+=</operator> <call pos:start="205:18" pos:end="207:79"><name pos:start="205:18" pos:end="205:29">encode_block</name><argument_list pos:start="205:30" pos:end="207:79">(<argument pos:start="205:31" pos:end="205:31"><expr pos:start="205:31" pos:end="205:31"><name pos:start="205:31" pos:end="205:31">s</name></expr></argument>, <argument pos:start="205:34" pos:end="205:45"><expr pos:start="205:34" pos:end="205:45"><name pos:start="205:34" pos:end="205:36">src</name> <operator pos:start="205:38" pos:end="205:38">+</operator> <name pos:start="205:40" pos:end="205:45">offset</name></expr></argument>, <argument pos:start="205:48" pos:end="205:59"><expr pos:start="205:48" pos:end="205:59"><name pos:start="205:48" pos:end="205:50">ref</name> <operator pos:start="205:52" pos:end="205:52">+</operator> <name pos:start="205:54" pos:end="205:59">offset</name></expr></argument>, <argument pos:start="205:62" pos:end="205:77"><expr pos:start="205:62" pos:end="205:77"><name pos:start="205:62" pos:end="205:68">decoded</name> <operator pos:start="205:70" pos:end="205:70">+</operator> <name pos:start="205:72" pos:end="205:77">offset</name></expr></argument>,

                              <argument pos:start="207:31" pos:end="207:36"><expr pos:start="207:31" pos:end="207:36"><name pos:start="207:31" pos:end="207:36">stride</name></expr></argument>, <argument pos:start="207:39" pos:end="207:47"><expr pos:start="207:39" pos:end="207:47"><name pos:start="207:39" pos:end="207:43">level</name> <operator pos:start="207:45" pos:end="207:45">-</operator> <literal type="number" pos:start="207:47" pos:end="207:47">1</literal></expr></argument>, <argument pos:start="207:50" pos:end="207:63"><expr pos:start="207:50" pos:end="207:63"><name pos:start="207:50" pos:end="207:58">threshold</name> <operator pos:start="207:60" pos:end="207:61">&gt;&gt;</operator> <literal type="number" pos:start="207:63" pos:end="207:63">1</literal></expr></argument>, <argument pos:start="207:66" pos:end="207:71"><expr pos:start="207:66" pos:end="207:71"><name pos:start="207:66" pos:end="207:71">lambda</name></expr></argument>, <argument pos:start="207:74" pos:end="207:78"><expr pos:start="207:74" pos:end="207:78"><name pos:start="207:74" pos:end="207:78">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:24"><expr pos:start="209:9" pos:end="209:23"><name pos:start="209:9" pos:end="209:13">score</name> <operator pos:start="209:15" pos:end="209:16">+=</operator> <name pos:start="209:18" pos:end="209:23">lambda</name></expr>;</expr_stmt>



        <if_stmt pos:start="213:9" pos:end="225:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:31">(<expr pos:start="213:13" pos:end="213:30"><name pos:start="213:13" pos:end="213:17">score</name> <operator pos:start="213:19" pos:end="213:19">&lt;</operator> <name pos:start="213:21" pos:end="213:30">best_score</name></expr>)</condition> <block pos:start="213:33" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:27">

            <expr_stmt pos:start="215:13" pos:end="215:31"><expr pos:start="215:13" pos:end="215:30"><name pos:start="215:13" pos:end="215:22">best_score</name> <operator pos:start="215:24" pos:end="215:24">=</operator> <name pos:start="215:26" pos:end="215:30">score</name></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:27"><expr pos:start="217:13" pos:end="217:26"><name pos:start="217:13" pos:end="217:17">split</name>      <operator pos:start="217:24" pos:end="217:24">=</operator> <literal type="number" pos:start="217:26" pos:end="217:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="219:11" pos:end="225:9">else <block pos:start="219:16" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:45">

            <for pos:start="221:13" pos:end="223:45">for <control pos:start="221:17" pos:end="221:44">(<init pos:start="221:18" pos:end="221:31"><expr pos:start="221:18" pos:end="221:30"><name pos:start="221:18" pos:end="221:18">i</name> <operator pos:start="221:20" pos:end="221:20">=</operator> <name pos:start="221:22" pos:end="221:26">level</name> <operator pos:start="221:28" pos:end="221:28">-</operator> <literal type="number" pos:start="221:30" pos:end="221:30">1</literal></expr>;</init> <condition pos:start="221:33" pos:end="221:39"><expr pos:start="221:33" pos:end="221:38"><name pos:start="221:33" pos:end="221:33">i</name> <operator pos:start="221:35" pos:end="221:36">&gt;=</operator> <literal type="number" pos:start="221:38" pos:end="221:38">0</literal></expr>;</condition> <incr pos:start="221:41" pos:end="221:43"><expr pos:start="221:41" pos:end="221:43"><name pos:start="221:41" pos:end="221:41">i</name><operator pos:start="221:42" pos:end="221:43">--</operator></expr></incr>)</control><block type="pseudo" pos:start="223:17" pos:end="223:45"><block_content pos:start="223:17" pos:end="223:45">

                <expr_stmt pos:start="223:17" pos:end="223:45"><expr pos:start="223:17" pos:end="223:44"><name pos:start="223:17" pos:end="223:32"><name pos:start="223:17" pos:end="223:17">s</name><operator pos:start="223:18" pos:end="223:19">-&gt;</operator><name pos:start="223:20" pos:end="223:29">reorder_pb</name><index pos:start="223:30" pos:end="223:32">[<expr pos:start="223:31" pos:end="223:31"><name pos:start="223:31" pos:end="223:31">i</name></expr>]</index></name> <operator pos:start="223:34" pos:end="223:34">=</operator> <name pos:start="223:36" pos:end="223:44"><name pos:start="223:36" pos:end="223:41">backup</name><index pos:start="223:42" pos:end="223:44">[<expr pos:start="223:43" pos:end="223:43"><name pos:start="223:43" pos:end="223:43">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="229:5" pos:end="231:50"><if pos:start="229:5" pos:end="231:50">if <condition pos:start="229:8" pos:end="229:18">(<expr pos:start="229:9" pos:end="229:17"><name pos:start="229:9" pos:end="229:13">level</name> <operator pos:start="229:15" pos:end="229:15">&gt;</operator> <literal type="number" pos:start="229:17" pos:end="229:17">0</literal></expr>)</condition><block type="pseudo" pos:start="231:9" pos:end="231:50"><block_content pos:start="231:9" pos:end="231:50">

        <expr_stmt pos:start="231:9" pos:end="231:50"><expr pos:start="231:9" pos:end="231:49"><call pos:start="231:9" pos:end="231:49"><name pos:start="231:9" pos:end="231:16">put_bits</name><argument_list pos:start="231:17" pos:end="231:49">(<argument pos:start="231:18" pos:end="231:38"><expr pos:start="231:18" pos:end="231:38"><operator pos:start="231:18" pos:end="231:18">&amp;</operator><name pos:start="231:19" pos:end="231:38"><name pos:start="231:19" pos:end="231:19">s</name><operator pos:start="231:20" pos:end="231:21">-&gt;</operator><name pos:start="231:22" pos:end="231:31">reorder_pb</name><index pos:start="231:32" pos:end="231:38">[<expr pos:start="231:33" pos:end="231:37"><name pos:start="231:33" pos:end="231:37">level</name></expr>]</index></name></expr></argument>, <argument pos:start="231:41" pos:end="231:41"><expr pos:start="231:41" pos:end="231:41"><literal type="number" pos:start="231:41" pos:end="231:41">1</literal></expr></argument>, <argument pos:start="231:44" pos:end="231:48"><expr pos:start="231:44" pos:end="231:48"><name pos:start="231:44" pos:end="231:48">split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="235:5" pos:end="281:5"><if pos:start="235:5" pos:end="281:5">if <condition pos:start="235:8" pos:end="235:15">(<expr pos:start="235:9" pos:end="235:14"><operator pos:start="235:9" pos:end="235:9">!</operator><name pos:start="235:10" pos:end="235:14">split</name></expr>)</condition> <block pos:start="235:17" pos:end="281:5">{<block_content pos:start="237:9" pos:end="279:52">

        <expr_stmt pos:start="237:9" pos:end="237:64"><expr pos:start="237:9" pos:end="237:63"><call pos:start="237:9" pos:end="237:63"><name pos:start="237:9" pos:end="237:18">av_assert1</name><argument_list pos:start="237:19" pos:end="237:63">(<argument pos:start="237:20" pos:end="237:62"><expr pos:start="237:20" pos:end="237:62"><name pos:start="237:20" pos:end="237:28">best_mean</name> <operator pos:start="237:30" pos:end="237:31">&gt;=</operator> <literal type="number" pos:start="237:33" pos:end="237:33">0</literal> <operator pos:start="237:35" pos:end="237:36">&amp;&amp;</operator> <name pos:start="237:38" pos:end="237:46">best_mean</name> <operator pos:start="237:48" pos:end="237:48">&lt;</operator> <literal type="number" pos:start="237:50" pos:end="237:52">256</literal> <operator pos:start="237:54" pos:end="237:55">||</operator> <operator pos:start="237:57" pos:end="237:57">!</operator><name pos:start="237:58" pos:end="237:62">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:57"><expr pos:start="239:9" pos:end="239:56"><call pos:start="239:9" pos:end="239:56"><name pos:start="239:9" pos:end="239:18">av_assert1</name><argument_list pos:start="239:19" pos:end="239:56">(<argument pos:start="239:20" pos:end="239:55"><expr pos:start="239:20" pos:end="239:55"><name pos:start="239:20" pos:end="239:28">best_mean</name> <operator pos:start="239:30" pos:end="239:31">&gt;=</operator> <operator pos:start="239:33" pos:end="239:33">-</operator><literal type="number" pos:start="239:34" pos:end="239:36">256</literal> <operator pos:start="239:38" pos:end="239:39">&amp;&amp;</operator> <name pos:start="239:41" pos:end="239:49">best_mean</name> <operator pos:start="239:51" pos:end="239:51">&lt;</operator> <literal type="number" pos:start="239:53" pos:end="239:55">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:54"><expr pos:start="241:9" pos:end="241:53"><call pos:start="241:9" pos:end="241:53"><name pos:start="241:9" pos:end="241:18">av_assert1</name><argument_list pos:start="241:19" pos:end="241:53">(<argument pos:start="241:20" pos:end="241:52"><expr pos:start="241:20" pos:end="241:52"><name pos:start="241:20" pos:end="241:29">best_count</name> <operator pos:start="241:31" pos:end="241:32">&gt;=</operator> <literal type="number" pos:start="241:34" pos:end="241:34">0</literal> <operator pos:start="241:36" pos:end="241:37">&amp;&amp;</operator> <name pos:start="241:39" pos:end="241:48">best_count</name> <operator pos:start="241:50" pos:end="241:50">&lt;</operator> <literal type="number" pos:start="241:52" pos:end="241:52">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:49"><expr pos:start="243:9" pos:end="243:48"><call pos:start="243:9" pos:end="243:48"><name pos:start="243:9" pos:end="243:18">av_assert1</name><argument_list pos:start="243:19" pos:end="243:48">(<argument pos:start="243:20" pos:end="243:47"><expr pos:start="243:20" pos:end="243:47"><name pos:start="243:20" pos:end="243:24">level</name> <operator pos:start="243:26" pos:end="243:26">&lt;</operator> <literal type="number" pos:start="243:28" pos:end="243:28">4</literal> <operator pos:start="243:30" pos:end="243:31">||</operator> <name pos:start="243:33" pos:end="243:42">best_count</name> <operator pos:start="243:44" pos:end="243:45">==</operator> <literal type="number" pos:start="243:47" pos:end="243:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="247:9" pos:end="247:33">/* output the encoding */</comment>

        <expr_stmt pos:start="249:9" pos:end="253:52"><expr pos:start="249:9" pos:end="253:51"><call pos:start="249:9" pos:end="253:51"><name pos:start="249:9" pos:end="249:16">put_bits</name><argument_list pos:start="249:17" pos:end="253:51">(<argument pos:start="249:18" pos:end="249:38"><expr pos:start="249:18" pos:end="249:38"><operator pos:start="249:18" pos:end="249:18">&amp;</operator><name pos:start="249:19" pos:end="249:38"><name pos:start="249:19" pos:end="249:19">s</name><operator pos:start="249:20" pos:end="249:21">-&gt;</operator><name pos:start="249:22" pos:end="249:31">reorder_pb</name><index pos:start="249:32" pos:end="249:38">[<expr pos:start="249:33" pos:end="249:37"><name pos:start="249:33" pos:end="249:37">level</name></expr>]</index></name></expr></argument>,

                 <argument pos:start="251:18" pos:end="251:50"><expr pos:start="251:18" pos:end="251:50"><name pos:start="251:18" pos:end="251:50"><name pos:start="251:18" pos:end="251:31">multistage_vlc</name><index pos:start="251:32" pos:end="251:47">[<expr pos:start="251:33" pos:end="251:46"><literal type="number" pos:start="251:33" pos:end="251:35">1</literal> <operator pos:start="251:35" pos:end="251:35">+</operator> <name pos:start="251:37" pos:end="251:46">best_count</name></expr>]</index><index pos:start="251:48" pos:end="251:50">[<expr pos:start="251:49" pos:end="251:49"><literal type="number" pos:start="251:49" pos:end="251:49">1</literal></expr>]</index></name></expr></argument>,

                 <argument pos:start="253:18" pos:end="253:50"><expr pos:start="253:18" pos:end="253:50"><name pos:start="253:18" pos:end="253:50"><name pos:start="253:18" pos:end="253:31">multistage_vlc</name><index pos:start="253:32" pos:end="253:47">[<expr pos:start="253:33" pos:end="253:46"><literal type="number" pos:start="253:33" pos:end="253:35">1</literal> <operator pos:start="253:35" pos:end="253:35">+</operator> <name pos:start="253:37" pos:end="253:46">best_count</name></expr>]</index><index pos:start="253:48" pos:end="253:50">[<expr pos:start="253:49" pos:end="253:49"><literal type="number" pos:start="253:49" pos:end="253:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="257:41"><expr pos:start="255:9" pos:end="257:40"><call pos:start="255:9" pos:end="257:40"><name pos:start="255:9" pos:end="255:16">put_bits</name><argument_list pos:start="255:17" pos:end="257:40">(<argument pos:start="255:18" pos:end="255:38"><expr pos:start="255:18" pos:end="255:38"><operator pos:start="255:18" pos:end="255:18">&amp;</operator><name pos:start="255:19" pos:end="255:38"><name pos:start="255:19" pos:end="255:19">s</name><operator pos:start="255:20" pos:end="255:21">-&gt;</operator><name pos:start="255:22" pos:end="255:31">reorder_pb</name><index pos:start="255:32" pos:end="255:38">[<expr pos:start="255:33" pos:end="255:37"><name pos:start="255:33" pos:end="255:37">level</name></expr>]</index></name></expr></argument>, <argument pos:start="255:41" pos:end="255:62"><expr pos:start="255:41" pos:end="255:62"><name pos:start="255:41" pos:end="255:62"><name pos:start="255:41" pos:end="255:48">mean_vlc</name><index pos:start="255:49" pos:end="255:59">[<expr pos:start="255:50" pos:end="255:58"><name pos:start="255:50" pos:end="255:58">best_mean</name></expr>]</index><index pos:start="255:60" pos:end="255:62">[<expr pos:start="255:61" pos:end="255:61"><literal type="number" pos:start="255:61" pos:end="255:61">1</literal></expr>]</index></name></expr></argument>,

                 <argument pos:start="257:18" pos:end="257:39"><expr pos:start="257:18" pos:end="257:39"><name pos:start="257:18" pos:end="257:39"><name pos:start="257:18" pos:end="257:25">mean_vlc</name><index pos:start="257:26" pos:end="257:36">[<expr pos:start="257:27" pos:end="257:35"><name pos:start="257:27" pos:end="257:35">best_mean</name></expr>]</index><index pos:start="257:37" pos:end="257:39">[<expr pos:start="257:38" pos:end="257:38"><literal type="number" pos:start="257:38" pos:end="257:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="261:9" pos:end="267:9">for <control pos:start="261:13" pos:end="261:40">(<init pos:start="261:14" pos:end="261:19"><expr pos:start="261:14" pos:end="261:18"><name pos:start="261:14" pos:end="261:14">i</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:35"><expr pos:start="261:21" pos:end="261:34"><name pos:start="261:21" pos:end="261:21">i</name> <operator pos:start="261:23" pos:end="261:23">&lt;</operator> <name pos:start="261:25" pos:end="261:34">best_count</name></expr>;</condition> <incr pos:start="261:37" pos:end="261:39"><expr pos:start="261:37" pos:end="261:39"><name pos:start="261:37" pos:end="261:37">i</name><operator pos:start="261:38" pos:end="261:39">++</operator></expr></incr>)</control> <block pos:start="261:42" pos:end="267:9">{<block_content pos:start="263:13" pos:end="265:63">

            <expr_stmt pos:start="263:13" pos:end="263:67"><expr pos:start="263:13" pos:end="263:66"><call pos:start="263:13" pos:end="263:66"><name pos:start="263:13" pos:end="263:22">av_assert2</name><argument_list pos:start="263:23" pos:end="263:66">(<argument pos:start="263:24" pos:end="263:65"><expr pos:start="263:24" pos:end="263:65"><name pos:start="263:24" pos:end="263:37"><name pos:start="263:24" pos:end="263:34">best_vector</name><index pos:start="263:35" pos:end="263:37">[<expr pos:start="263:36" pos:end="263:36"><name pos:start="263:36" pos:end="263:36">i</name></expr>]</index></name> <operator pos:start="263:39" pos:end="263:40">&gt;=</operator> <literal type="number" pos:start="263:42" pos:end="263:42">0</literal> <operator pos:start="263:44" pos:end="263:45">&amp;&amp;</operator> <name pos:start="263:47" pos:end="263:60"><name pos:start="263:47" pos:end="263:57">best_vector</name><index pos:start="263:58" pos:end="263:60">[<expr pos:start="263:59" pos:end="263:59"><name pos:start="263:59" pos:end="263:59">i</name></expr>]</index></name> <operator pos:start="263:62" pos:end="263:62">&lt;</operator> <literal type="number" pos:start="263:64" pos:end="263:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:63"><expr pos:start="265:13" pos:end="265:62"><call pos:start="265:13" pos:end="265:62"><name pos:start="265:13" pos:end="265:20">put_bits</name><argument_list pos:start="265:21" pos:end="265:62">(<argument pos:start="265:22" pos:end="265:42"><expr pos:start="265:22" pos:end="265:42"><operator pos:start="265:22" pos:end="265:22">&amp;</operator><name pos:start="265:23" pos:end="265:42"><name pos:start="265:23" pos:end="265:23">s</name><operator pos:start="265:24" pos:end="265:25">-&gt;</operator><name pos:start="265:26" pos:end="265:35">reorder_pb</name><index pos:start="265:36" pos:end="265:42">[<expr pos:start="265:37" pos:end="265:41"><name pos:start="265:37" pos:end="265:41">level</name></expr>]</index></name></expr></argument>, <argument pos:start="265:45" pos:end="265:45"><expr pos:start="265:45" pos:end="265:45"><literal type="number" pos:start="265:45" pos:end="265:45">4</literal></expr></argument>, <argument pos:start="265:48" pos:end="265:61"><expr pos:start="265:48" pos:end="265:61"><name pos:start="265:48" pos:end="265:61"><name pos:start="265:48" pos:end="265:58">best_vector</name><index pos:start="265:59" pos:end="265:61">[<expr pos:start="265:60" pos:end="265:60"><name pos:start="265:60" pos:end="265:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="271:9" pos:end="279:52">for <control pos:start="271:13" pos:end="271:31">(<init pos:start="271:14" pos:end="271:19"><expr pos:start="271:14" pos:end="271:18"><name pos:start="271:14" pos:end="271:14">y</name> <operator pos:start="271:16" pos:end="271:16">=</operator> <literal type="number" pos:start="271:18" pos:end="271:18">0</literal></expr>;</init> <condition pos:start="271:21" pos:end="271:26"><expr pos:start="271:21" pos:end="271:25"><name pos:start="271:21" pos:end="271:21">y</name> <operator pos:start="271:23" pos:end="271:23">&lt;</operator> <name pos:start="271:25" pos:end="271:25">h</name></expr>;</condition> <incr pos:start="271:28" pos:end="271:30"><expr pos:start="271:28" pos:end="271:30"><name pos:start="271:28" pos:end="271:28">y</name><operator pos:start="271:29" pos:end="271:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="273:13" pos:end="279:52"><block_content pos:start="273:13" pos:end="279:52">

            <for pos:start="273:13" pos:end="279:52">for <control pos:start="273:17" pos:end="273:35">(<init pos:start="273:18" pos:end="273:23"><expr pos:start="273:18" pos:end="273:22"><name pos:start="273:18" pos:end="273:18">x</name> <operator pos:start="273:20" pos:end="273:20">=</operator> <literal type="number" pos:start="273:22" pos:end="273:22">0</literal></expr>;</init> <condition pos:start="273:25" pos:end="273:30"><expr pos:start="273:25" pos:end="273:29"><name pos:start="273:25" pos:end="273:25">x</name> <operator pos:start="273:27" pos:end="273:27">&lt;</operator> <name pos:start="273:29" pos:end="273:29">w</name></expr>;</condition> <incr pos:start="273:32" pos:end="273:34"><expr pos:start="273:32" pos:end="273:34"><name pos:start="273:32" pos:end="273:32">x</name><operator pos:start="273:33" pos:end="273:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="275:17" pos:end="279:52"><block_content pos:start="275:17" pos:end="279:52">

                <expr_stmt pos:start="275:17" pos:end="279:52"><expr pos:start="275:17" pos:end="279:51"><name pos:start="275:17" pos:end="275:39"><name pos:start="275:17" pos:end="275:23">decoded</name><index pos:start="275:24" pos:end="275:39">[<expr pos:start="275:25" pos:end="275:38"><name pos:start="275:25" pos:end="275:25">x</name> <operator pos:start="275:27" pos:end="275:27">+</operator> <name pos:start="275:29" pos:end="275:29">y</name> <operator pos:start="275:31" pos:end="275:31">*</operator> <name pos:start="275:33" pos:end="275:38">stride</name></expr>]</index></name> <operator pos:start="275:41" pos:end="275:41">=</operator> <name pos:start="275:43" pos:end="275:61"><name pos:start="275:43" pos:end="275:45">src</name><index pos:start="275:46" pos:end="275:61">[<expr pos:start="275:47" pos:end="275:60"><name pos:start="275:47" pos:end="275:47">x</name> <operator pos:start="275:49" pos:end="275:49">+</operator> <name pos:start="275:51" pos:end="275:51">y</name> <operator pos:start="275:53" pos:end="275:53">*</operator> <name pos:start="275:55" pos:end="275:60">stride</name></expr>]</index></name> <operator pos:start="275:63" pos:end="275:63">-</operator>

                                          <name pos:start="277:43" pos:end="277:70"><name pos:start="277:43" pos:end="277:47">block</name><index pos:start="277:48" pos:end="277:59">[<expr pos:start="277:49" pos:end="277:58"><name pos:start="277:49" pos:end="277:58">best_count</name></expr>]</index><index pos:start="277:60" pos:end="277:70">[<expr pos:start="277:61" pos:end="277:69"><name pos:start="277:61" pos:end="277:61">x</name> <operator pos:start="277:63" pos:end="277:63">+</operator> <name pos:start="277:65" pos:end="277:65">w</name> <operator pos:start="277:67" pos:end="277:67">*</operator> <name pos:start="277:69" pos:end="277:69">y</name></expr>]</index></name> <operator pos:start="277:72" pos:end="277:72">+</operator>

                                          <name pos:start="279:43" pos:end="279:51">best_mean</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="285:5" pos:end="285:22">return <expr pos:start="285:12" pos:end="285:21"><name pos:start="285:12" pos:end="285:21">best_score</name></expr>;</return>

</block_content>}</block></function>
</unit>
