<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14375.c" pos:tabs="8"><function pos:start="1:1" pos:end="259:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">lm32_uclinux_init</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">MachineState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="259:1">{<block_content pos:start="5:5" pos:end="257:52">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">LM32CPU</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">CPULM32State</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">DriveInfo</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:59"><decl pos:start="19:5" pos:end="19:58"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:35">address_space_mem</name> <init pos:start="19:37" pos:end="19:58">=  <expr pos:start="19:40" pos:end="19:58"><call pos:start="19:40" pos:end="19:58"><name pos:start="19:40" pos:end="19:56">get_system_memory</name><argument_list pos:start="19:57" pos:end="19:58">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:26">phys_ram</name> <init pos:start="21:28" pos:end="21:51">= <expr pos:start="21:30" pos:end="21:51"><call pos:start="21:30" pos:end="21:51"><name pos:start="21:30" pos:end="21:34">g_new</name><argument_list pos:start="21:35" pos:end="21:51">(<argument pos:start="21:36" pos:end="21:47"><expr pos:start="21:36" pos:end="21:47"><name pos:start="21:36" pos:end="21:47">MemoryRegion</name></expr></argument>, <argument pos:start="21:50" pos:end="21:50"><expr pos:start="21:50" pos:end="21:50"><literal type="number" pos:start="21:50" pos:end="21:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">qemu_irq</name></type> <name pos:start="23:14" pos:end="23:20"><name pos:start="23:14" pos:end="23:16">irq</name><index pos:start="23:17" pos:end="23:20">[<expr pos:start="23:18" pos:end="23:19"><literal type="number" pos:start="23:18" pos:end="23:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">HWSetup</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:15">hw</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">ResetInfo</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:25">reset_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:10"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:20">/* memory map */</comment>

    <decl_stmt pos:start="35:5" pos:end="35:37"><decl pos:start="35:5" pos:end="35:36"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">hwaddr</name></type> <name pos:start="35:12" pos:end="35:21">flash_base</name>   <init pos:start="35:25" pos:end="35:36">= <expr pos:start="35:27" pos:end="35:36"><literal type="number" pos:start="35:27" pos:end="35:36">0x04000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:49"><decl pos:start="37:5" pos:end="37:48"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:10">size_t</name></type> <name pos:start="37:12" pos:end="37:28">flash_sector_size</name>        <init pos:start="37:37" pos:end="37:48">= <expr pos:start="37:39" pos:end="37:48"><literal type="number" pos:start="37:39" pos:end="37:41">256</literal> <operator pos:start="37:43" pos:end="37:43">*</operator> <literal type="number" pos:start="37:45" pos:end="37:48">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:55"><decl pos:start="39:5" pos:end="39:54"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:10">size_t</name></type> <name pos:start="39:12" pos:end="39:21">flash_size</name>               <init pos:start="39:37" pos:end="39:54">= <expr pos:start="39:39" pos:end="39:54"><literal type="number" pos:start="39:39" pos:end="39:40">32</literal> <operator pos:start="39:42" pos:end="39:42">*</operator> <literal type="number" pos:start="39:44" pos:end="39:47">1024</literal> <operator pos:start="39:49" pos:end="39:49">*</operator> <literal type="number" pos:start="39:51" pos:end="39:54">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:37"><decl pos:start="41:5" pos:end="41:36"><type pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:10">hwaddr</name></type> <name pos:start="41:12" pos:end="41:19">ram_base</name>     <init pos:start="41:25" pos:end="41:36">= <expr pos:start="41:27" pos:end="41:36"><literal type="number" pos:start="41:27" pos:end="41:36">0x08000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:55"><decl pos:start="43:5" pos:end="43:54"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:10">size_t</name></type> <name pos:start="43:12" pos:end="43:19">ram_size</name>                 <init pos:start="43:37" pos:end="43:54">= <expr pos:start="43:39" pos:end="43:54"><literal type="number" pos:start="43:39" pos:end="43:40">64</literal> <operator pos:start="43:42" pos:end="43:42">*</operator> <literal type="number" pos:start="43:44" pos:end="43:47">1024</literal> <operator pos:start="43:49" pos:end="43:49">*</operator> <literal type="number" pos:start="43:51" pos:end="43:54">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:37"><decl pos:start="45:5" pos:end="45:36"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:10">hwaddr</name></type> <name pos:start="45:12" pos:end="45:21">uart0_base</name>   <init pos:start="45:25" pos:end="45:36">= <expr pos:start="45:27" pos:end="45:36"><literal type="number" pos:start="45:27" pos:end="45:36">0x80000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:37"><decl pos:start="47:5" pos:end="47:36"><type pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:10">hwaddr</name></type> <name pos:start="47:12" pos:end="47:22">timer0_base</name>  <init pos:start="47:25" pos:end="47:36">= <expr pos:start="47:27" pos:end="47:36"><literal type="number" pos:start="47:27" pos:end="47:36">0x80002000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:37"><decl pos:start="49:5" pos:end="49:36"><type pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:10">hwaddr</name></type> <name pos:start="49:12" pos:end="49:22">timer1_base</name>  <init pos:start="49:25" pos:end="49:36">= <expr pos:start="49:27" pos:end="49:36"><literal type="number" pos:start="49:27" pos:end="49:36">0x80010000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:37"><decl pos:start="51:5" pos:end="51:36"><type pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:10">hwaddr</name></type> <name pos:start="51:12" pos:end="51:22">timer2_base</name>  <init pos:start="51:25" pos:end="51:36">= <expr pos:start="51:27" pos:end="51:36"><literal type="number" pos:start="51:27" pos:end="51:36">0x80012000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:40"><decl pos:start="53:5" pos:end="53:39"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:17">uart0_irq</name>                   <init pos:start="53:37" pos:end="53:39">= <expr pos:start="53:39" pos:end="53:39"><literal type="number" pos:start="53:39" pos:end="53:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:40"><decl pos:start="55:5" pos:end="55:39"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:18">timer0_irq</name>                  <init pos:start="55:37" pos:end="55:39">= <expr pos:start="55:39" pos:end="55:39"><literal type="number" pos:start="55:39" pos:end="55:39">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:41"><decl pos:start="57:5" pos:end="57:40"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:18">timer1_irq</name>                  <init pos:start="57:37" pos:end="57:40">= <expr pos:start="57:39" pos:end="57:40"><literal type="number" pos:start="57:39" pos:end="57:40">20</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:41"><decl pos:start="59:5" pos:end="59:40"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:18">timer2_irq</name>                  <init pos:start="59:37" pos:end="59:40">= <expr pos:start="59:39" pos:end="59:40"><literal type="number" pos:start="59:39" pos:end="59:40">21</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:37"><decl pos:start="61:5" pos:end="61:36"><type pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:10">hwaddr</name></type> <name pos:start="61:12" pos:end="61:23">hwsetup_base</name> <init pos:start="61:25" pos:end="61:36">= <expr pos:start="61:27" pos:end="61:36"><literal type="number" pos:start="61:27" pos:end="61:36">0x0bffe000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:37"><decl pos:start="63:5" pos:end="63:36"><type pos:start="63:5" pos:end="63:10"><name pos:start="63:5" pos:end="63:10">hwaddr</name></type> <name pos:start="63:12" pos:end="63:23">cmdline_base</name> <init pos:start="63:25" pos:end="63:36">= <expr pos:start="63:27" pos:end="63:36"><literal type="number" pos:start="63:27" pos:end="63:36">0x0bfff000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:37"><decl pos:start="65:5" pos:end="65:36"><type pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:10">hwaddr</name></type> <name pos:start="65:12" pos:end="65:22">initrd_base</name>  <init pos:start="65:25" pos:end="65:36">= <expr pos:start="65:27" pos:end="65:36"><literal type="number" pos:start="65:27" pos:end="65:36">0x08400000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:49"><decl pos:start="67:5" pos:end="67:48"><type pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:10">size_t</name></type> <name pos:start="67:12" pos:end="67:21">initrd_max</name>               <init pos:start="67:37" pos:end="67:48">= <expr pos:start="67:39" pos:end="67:48"><literal type="number" pos:start="67:39" pos:end="67:48">0x01000000</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:46"><expr pos:start="71:5" pos:end="71:45"><name pos:start="71:5" pos:end="71:14">reset_info</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:45"><name pos:start="71:18" pos:end="71:26">g_malloc0</name><argument_list pos:start="71:27" pos:end="71:45">(<argument pos:start="71:28" pos:end="71:44"><expr pos:start="71:28" pos:end="71:44"><sizeof pos:start="71:28" pos:end="71:44">sizeof<argument_list pos:start="71:34" pos:end="71:44">(<argument pos:start="71:35" pos:end="71:43"><expr pos:start="71:35" pos:end="71:43"><name pos:start="71:35" pos:end="71:43">ResetInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:17">cpu_model</name> <operator pos:start="75:19" pos:end="75:20">==</operator> <name pos:start="75:22" pos:end="75:25">NULL</name></expr>)</condition> <block pos:start="75:28" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:32">

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:17">cpu_model</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="string" pos:start="77:21" pos:end="77:31">"lm32-full"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:63"><expr pos:start="81:5" pos:end="81:62"><name pos:start="81:5" pos:end="81:7">cpu</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:62"><name pos:start="81:11" pos:end="81:18">LM32_CPU</name><argument_list pos:start="81:19" pos:end="81:62">(<argument pos:start="81:20" pos:end="81:61"><expr pos:start="81:20" pos:end="81:61"><call pos:start="81:20" pos:end="81:61"><name pos:start="81:20" pos:end="81:35">cpu_generic_init</name><argument_list pos:start="81:36" pos:end="81:61">(<argument pos:start="81:37" pos:end="81:49"><expr pos:start="81:37" pos:end="81:49"><name pos:start="81:37" pos:end="81:49">TYPE_LM32_CPU</name></expr></argument>, <argument pos:start="81:52" pos:end="81:60"><expr pos:start="81:52" pos:end="81:60"><name pos:start="81:52" pos:end="81:60">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:20">(<expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:11">cpu</name> <operator pos:start="83:13" pos:end="83:14">==</operator> <name pos:start="83:16" pos:end="83:19">NULL</name></expr>)</condition> <block pos:start="83:22" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:16">

        <expr_stmt pos:start="85:9" pos:end="85:70"><expr pos:start="85:9" pos:end="85:69"><call pos:start="85:9" pos:end="85:69"><name pos:start="85:9" pos:end="85:15">fprintf</name><argument_list pos:start="85:16" pos:end="85:69">(<argument pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22">stderr</name></expr></argument>, <argument pos:start="85:25" pos:end="85:57"><expr pos:start="85:25" pos:end="85:57"><literal type="string" pos:start="85:25" pos:end="85:57">"qemu: unable to find CPU '%s'\n"</literal></expr></argument>, <argument pos:start="85:60" pos:end="85:68"><expr pos:start="85:60" pos:end="85:68"><name pos:start="85:60" pos:end="85:68">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:12">exit</name><argument_list pos:start="87:13" pos:end="87:15">(<argument pos:start="87:14" pos:end="87:14"><expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:20"><expr pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:7">env</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <operator pos:start="93:11" pos:end="93:11">&amp;</operator><name pos:start="93:12" pos:end="93:19"><name pos:start="93:12" pos:end="93:14">cpu</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:14">reset_info</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:19">cpu</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:25">cpu</name></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:40"><expr pos:start="99:5" pos:end="99:39"><name pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:14">reset_info</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:26">flash_base</name></name> <operator pos:start="99:28" pos:end="99:28">=</operator> <name pos:start="99:30" pos:end="99:39">flash_base</name></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="105:73"><expr pos:start="103:5" pos:end="105:72"><call pos:start="103:5" pos:end="105:72"><name pos:start="103:5" pos:end="103:40">memory_region_allocate_system_memory</name><argument_list pos:start="103:41" pos:end="105:72">(<argument pos:start="103:42" pos:end="103:49"><expr pos:start="103:42" pos:end="103:49"><name pos:start="103:42" pos:end="103:49">phys_ram</name></expr></argument>, <argument pos:start="103:52" pos:end="103:55"><expr pos:start="103:52" pos:end="103:55"><name pos:start="103:52" pos:end="103:55">NULL</name></expr></argument>,

                                         <argument pos:start="105:42" pos:end="105:61"><expr pos:start="105:42" pos:end="105:61"><literal type="string" pos:start="105:42" pos:end="105:61">"lm32_uclinux.sdram"</literal></expr></argument>, <argument pos:start="105:64" pos:end="105:71"><expr pos:start="105:64" pos:end="105:71"><name pos:start="105:64" pos:end="105:71">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:71"><expr pos:start="107:5" pos:end="107:70"><call pos:start="107:5" pos:end="107:70"><name pos:start="107:5" pos:end="107:31">memory_region_add_subregion</name><argument_list pos:start="107:32" pos:end="107:70">(<argument pos:start="107:33" pos:end="107:49"><expr pos:start="107:33" pos:end="107:49"><name pos:start="107:33" pos:end="107:49">address_space_mem</name></expr></argument>, <argument pos:start="107:52" pos:end="107:59"><expr pos:start="107:52" pos:end="107:59"><name pos:start="107:52" pos:end="107:59">ram_base</name></expr></argument>, <argument pos:start="107:62" pos:end="107:69"><expr pos:start="107:62" pos:end="107:69"><name pos:start="107:62" pos:end="107:69">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:39"><expr pos:start="111:5" pos:end="111:38"><name pos:start="111:5" pos:end="111:9">dinfo</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <call pos:start="111:13" pos:end="111:38"><name pos:start="111:13" pos:end="111:21">drive_get</name><argument_list pos:start="111:22" pos:end="111:38">(<argument pos:start="111:23" pos:end="111:31"><expr pos:start="111:23" pos:end="111:31"><name pos:start="111:23" pos:end="111:31">IF_PFLASH</name></expr></argument>, <argument pos:start="111:34" pos:end="111:34"><expr pos:start="111:34" pos:end="111:34"><literal type="number" pos:start="111:34" pos:end="111:34">0</literal></expr></argument>, <argument pos:start="111:37" pos:end="111:37"><expr pos:start="111:37" pos:end="111:37"><literal type="number" pos:start="111:37" pos:end="111:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="113:5" pos:end="113:28">/* Spansion S29NS128P */</comment>

    <expr_stmt pos:start="115:5" pos:end="121:73"><expr pos:start="115:5" pos:end="121:72"><call pos:start="115:5" pos:end="121:72"><name pos:start="115:5" pos:end="115:25">pflash_cfi02_register</name><argument_list pos:start="115:26" pos:end="121:72">(<argument pos:start="115:27" pos:end="115:36"><expr pos:start="115:27" pos:end="115:36"><name pos:start="115:27" pos:end="115:36">flash_base</name></expr></argument>, <argument pos:start="115:39" pos:end="115:42"><expr pos:start="115:39" pos:end="115:42"><name pos:start="115:39" pos:end="115:42">NULL</name></expr></argument>, <argument pos:start="115:45" pos:end="115:64"><expr pos:start="115:45" pos:end="115:64"><literal type="string" pos:start="115:45" pos:end="115:64">"lm32_uclinux.flash"</literal></expr></argument>, <argument pos:start="115:67" pos:end="115:76"><expr pos:start="115:67" pos:end="115:76"><name pos:start="115:67" pos:end="115:76">flash_size</name></expr></argument>,

                          <argument pos:start="117:27" pos:end="117:67"><expr pos:start="117:27" pos:end="117:67"><ternary pos:start="117:27" pos:end="117:67"><condition pos:start="117:27" pos:end="117:33"><expr pos:start="117:27" pos:end="117:31"><name pos:start="117:27" pos:end="117:31">dinfo</name></expr> ?</condition><then pos:start="117:35" pos:end="117:60"> <expr pos:start="117:35" pos:end="117:60"><call pos:start="117:35" pos:end="117:60"><name pos:start="117:35" pos:end="117:53">blk_by_legacy_dinfo</name><argument_list pos:start="117:54" pos:end="117:60">(<argument pos:start="117:55" pos:end="117:59"><expr pos:start="117:55" pos:end="117:59"><name pos:start="117:55" pos:end="117:59">dinfo</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="117:62" pos:end="117:67">: <expr pos:start="117:64" pos:end="117:67"><name pos:start="117:64" pos:end="117:67">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="119:27" pos:end="119:43"><expr pos:start="119:27" pos:end="119:43"><name pos:start="119:27" pos:end="119:43">flash_sector_size</name></expr></argument>, <argument pos:start="119:46" pos:end="119:75"><expr pos:start="119:46" pos:end="119:75"><name pos:start="119:46" pos:end="119:55">flash_size</name> <operator pos:start="119:57" pos:end="119:57">/</operator> <name pos:start="119:59" pos:end="119:75">flash_sector_size</name></expr></argument>,

                          <argument pos:start="121:27" pos:end="121:27"><expr pos:start="121:27" pos:end="121:27"><literal type="number" pos:start="121:27" pos:end="121:27">1</literal></expr></argument>, <argument pos:start="121:30" pos:end="121:30"><expr pos:start="121:30" pos:end="121:30"><literal type="number" pos:start="121:30" pos:end="121:30">2</literal></expr></argument>, <argument pos:start="121:33" pos:end="121:36"><expr pos:start="121:33" pos:end="121:36"><literal type="number" pos:start="121:33" pos:end="121:36">0x01</literal></expr></argument>, <argument pos:start="121:39" pos:end="121:42"><expr pos:start="121:39" pos:end="121:42"><literal type="number" pos:start="121:39" pos:end="121:42">0x7e</literal></expr></argument>, <argument pos:start="121:45" pos:end="121:48"><expr pos:start="121:45" pos:end="121:48"><literal type="number" pos:start="121:45" pos:end="121:48">0x43</literal></expr></argument>, <argument pos:start="121:51" pos:end="121:54"><expr pos:start="121:51" pos:end="121:54"><literal type="number" pos:start="121:51" pos:end="121:54">0x00</literal></expr></argument>, <argument pos:start="121:57" pos:end="121:61"><expr pos:start="121:57" pos:end="121:61"><literal type="number" pos:start="121:57" pos:end="121:61">0x555</literal></expr></argument>, <argument pos:start="121:64" pos:end="121:68"><expr pos:start="121:64" pos:end="121:68"><literal type="number" pos:start="121:64" pos:end="121:68">0x2aa</literal></expr></argument>, <argument pos:start="121:71" pos:end="121:71"><expr pos:start="121:71" pos:end="121:71"><literal type="number" pos:start="121:71" pos:end="121:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:26">/* create irq lines */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:79"><expr pos:start="127:5" pos:end="127:78"><name pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:7">env</name><operator pos:start="127:8" pos:end="127:9">-&gt;</operator><name pos:start="127:10" pos:end="127:18">pic_state</name></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:78"><name pos:start="127:22" pos:end="127:34">lm32_pic_init</name><argument_list pos:start="127:35" pos:end="127:78">(<argument pos:start="127:36" pos:end="127:77"><expr pos:start="127:36" pos:end="127:77"><call pos:start="127:36" pos:end="127:77"><name pos:start="127:36" pos:end="127:52">qemu_allocate_irq</name><argument_list pos:start="127:53" pos:end="127:77">(<argument pos:start="127:54" pos:end="127:68"><expr pos:start="127:54" pos:end="127:68"><name pos:start="127:54" pos:end="127:68">cpu_irq_handler</name></expr></argument>, <argument pos:start="127:71" pos:end="127:73"><expr pos:start="127:71" pos:end="127:73"><name pos:start="127:71" pos:end="127:73">env</name></expr></argument>, <argument pos:start="127:76" pos:end="127:76"><expr pos:start="127:76" pos:end="127:76"><literal type="number" pos:start="127:76" pos:end="127:76">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="129:5" pos:end="133:5">for <control pos:start="129:9" pos:end="129:28">(<init pos:start="129:10" pos:end="129:15"><expr pos:start="129:10" pos:end="129:14"><name pos:start="129:10" pos:end="129:10">i</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <literal type="number" pos:start="129:14" pos:end="129:14">0</literal></expr>;</init> <condition pos:start="129:17" pos:end="129:23"><expr pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:17">i</name> <operator pos:start="129:19" pos:end="129:19">&lt;</operator> <literal type="number" pos:start="129:21" pos:end="129:22">32</literal></expr>;</condition> <incr pos:start="129:25" pos:end="129:27"><expr pos:start="129:25" pos:end="129:27"><name pos:start="129:25" pos:end="129:25">i</name><operator pos:start="129:26" pos:end="129:27">++</operator></expr></incr>)</control> <block pos:start="129:30" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:53">

        <expr_stmt pos:start="131:9" pos:end="131:53"><expr pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:14"><name pos:start="131:9" pos:end="131:11">irq</name><index pos:start="131:12" pos:end="131:14">[<expr pos:start="131:13" pos:end="131:13"><name pos:start="131:13" pos:end="131:13">i</name></expr>]</index></name> <operator pos:start="131:16" pos:end="131:16">=</operator> <call pos:start="131:18" pos:end="131:52"><name pos:start="131:18" pos:end="131:33">qdev_get_gpio_in</name><argument_list pos:start="131:34" pos:end="131:52">(<argument pos:start="131:35" pos:end="131:48"><expr pos:start="131:35" pos:end="131:48"><name pos:start="131:35" pos:end="131:48"><name pos:start="131:35" pos:end="131:37">env</name><operator pos:start="131:38" pos:end="131:39">-&gt;</operator><name pos:start="131:40" pos:end="131:48">pic_state</name></name></expr></argument>, <argument pos:start="131:51" pos:end="131:51"><expr pos:start="131:51" pos:end="131:51"><name pos:start="131:51" pos:end="131:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="137:5" pos:end="137:64"><expr pos:start="137:5" pos:end="137:63"><call pos:start="137:5" pos:end="137:63"><name pos:start="137:5" pos:end="137:20">lm32_uart_create</name><argument_list pos:start="137:21" pos:end="137:63">(<argument pos:start="137:22" pos:end="137:31"><expr pos:start="137:22" pos:end="137:31"><name pos:start="137:22" pos:end="137:31">uart0_base</name></expr></argument>, <argument pos:start="137:34" pos:end="137:47"><expr pos:start="137:34" pos:end="137:47"><name pos:start="137:34" pos:end="137:47"><name pos:start="137:34" pos:end="137:36">irq</name><index pos:start="137:37" pos:end="137:47">[<expr pos:start="137:38" pos:end="137:46"><name pos:start="137:38" pos:end="137:46">uart0_irq</name></expr>]</index></name></expr></argument>, <argument pos:start="137:50" pos:end="137:62"><expr pos:start="137:50" pos:end="137:62"><name pos:start="137:50" pos:end="137:62"><name pos:start="137:50" pos:end="137:59">serial_hds</name><index pos:start="137:60" pos:end="137:62">[<expr pos:start="137:61" pos:end="137:61"><literal type="number" pos:start="137:61" pos:end="137:61">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:69"><expr pos:start="139:5" pos:end="139:68"><call pos:start="139:5" pos:end="139:68"><name pos:start="139:5" pos:end="139:24">sysbus_create_simple</name><argument_list pos:start="139:25" pos:end="139:68">(<argument pos:start="139:26" pos:end="139:37"><expr pos:start="139:26" pos:end="139:37"><literal type="string" pos:start="139:26" pos:end="139:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="139:40" pos:end="139:50"><expr pos:start="139:40" pos:end="139:50"><name pos:start="139:40" pos:end="139:50">timer0_base</name></expr></argument>, <argument pos:start="139:53" pos:end="139:67"><expr pos:start="139:53" pos:end="139:67"><name pos:start="139:53" pos:end="139:67"><name pos:start="139:53" pos:end="139:55">irq</name><index pos:start="139:56" pos:end="139:67">[<expr pos:start="139:57" pos:end="139:66"><name pos:start="139:57" pos:end="139:66">timer0_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:69"><expr pos:start="141:5" pos:end="141:68"><call pos:start="141:5" pos:end="141:68"><name pos:start="141:5" pos:end="141:24">sysbus_create_simple</name><argument_list pos:start="141:25" pos:end="141:68">(<argument pos:start="141:26" pos:end="141:37"><expr pos:start="141:26" pos:end="141:37"><literal type="string" pos:start="141:26" pos:end="141:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="141:40" pos:end="141:50"><expr pos:start="141:40" pos:end="141:50"><name pos:start="141:40" pos:end="141:50">timer1_base</name></expr></argument>, <argument pos:start="141:53" pos:end="141:67"><expr pos:start="141:53" pos:end="141:67"><name pos:start="141:53" pos:end="141:67"><name pos:start="141:53" pos:end="141:55">irq</name><index pos:start="141:56" pos:end="141:67">[<expr pos:start="141:57" pos:end="141:66"><name pos:start="141:57" pos:end="141:66">timer1_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:69"><expr pos:start="143:5" pos:end="143:68"><call pos:start="143:5" pos:end="143:68"><name pos:start="143:5" pos:end="143:24">sysbus_create_simple</name><argument_list pos:start="143:25" pos:end="143:68">(<argument pos:start="143:26" pos:end="143:37"><expr pos:start="143:26" pos:end="143:37"><literal type="string" pos:start="143:26" pos:end="143:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="143:40" pos:end="143:50"><expr pos:start="143:40" pos:end="143:50"><name pos:start="143:40" pos:end="143:50">timer2_base</name></expr></argument>, <argument pos:start="143:53" pos:end="143:67"><expr pos:start="143:53" pos:end="143:67"><name pos:start="143:53" pos:end="143:67"><name pos:start="143:53" pos:end="143:55">irq</name><index pos:start="143:56" pos:end="143:67">[<expr pos:start="143:57" pos:end="143:66"><name pos:start="143:57" pos:end="143:66">timer2_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:49">/* make sure juart isn't the first chardev */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:54"><expr pos:start="149:5" pos:end="149:53"><name pos:start="149:5" pos:end="149:20"><name pos:start="149:5" pos:end="149:7">env</name><operator pos:start="149:8" pos:end="149:9">-&gt;</operator><name pos:start="149:10" pos:end="149:20">juart_state</name></name> <operator pos:start="149:22" pos:end="149:22">=</operator> <call pos:start="149:24" pos:end="149:53"><name pos:start="149:24" pos:end="149:38">lm32_juart_init</name><argument_list pos:start="149:39" pos:end="149:53">(<argument pos:start="149:40" pos:end="149:52"><expr pos:start="149:40" pos:end="149:52"><name pos:start="149:40" pos:end="149:52"><name pos:start="149:40" pos:end="149:49">serial_hds</name><index pos:start="149:50" pos:end="149:52">[<expr pos:start="149:51" pos:end="149:51"><literal type="number" pos:start="149:51" pos:end="149:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:42"><expr pos:start="153:5" pos:end="153:41"><name pos:start="153:5" pos:end="153:28"><name pos:start="153:5" pos:end="153:14">reset_info</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:28">bootstrap_pc</name></name> <operator pos:start="153:30" pos:end="153:30">=</operator> <name pos:start="153:32" pos:end="153:41">flash_base</name></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="195:5"><if pos:start="157:5" pos:end="195:5">if <condition pos:start="157:8" pos:end="157:24">(<expr pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:23">kernel_filename</name></expr>)</condition> <block pos:start="157:26" pos:end="195:5">{<block_content pos:start="159:9" pos:end="193:9">

        <decl_stmt pos:start="159:9" pos:end="159:23"><decl pos:start="159:9" pos:end="159:22"><type pos:start="159:9" pos:end="159:16"><name pos:start="159:9" pos:end="159:16">uint64_t</name></type> <name pos:start="159:18" pos:end="159:22">entry</name></decl>;</decl_stmt>

        <decl_stmt pos:start="161:9" pos:end="161:24"><decl pos:start="161:9" pos:end="161:23"><type pos:start="161:9" pos:end="161:11"><name pos:start="161:9" pos:end="161:11">int</name></type> <name pos:start="161:13" pos:end="161:23">kernel_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="165:9" pos:end="167:58"><expr pos:start="165:9" pos:end="167:57"><name pos:start="165:9" pos:end="165:19">kernel_size</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <call pos:start="165:23" pos:end="167:57"><name pos:start="165:23" pos:end="165:30">load_elf</name><argument_list pos:start="165:31" pos:end="167:57">(<argument pos:start="165:32" pos:end="165:46"><expr pos:start="165:32" pos:end="165:46"><name pos:start="165:32" pos:end="165:46">kernel_filename</name></expr></argument>, <argument pos:start="165:49" pos:end="165:52"><expr pos:start="165:49" pos:end="165:52"><name pos:start="165:49" pos:end="165:52">NULL</name></expr></argument>, <argument pos:start="165:55" pos:end="165:58"><expr pos:start="165:55" pos:end="165:58"><name pos:start="165:55" pos:end="165:58">NULL</name></expr></argument>, <argument pos:start="165:61" pos:end="165:66"><expr pos:start="165:61" pos:end="165:66"><operator pos:start="165:61" pos:end="165:61">&amp;</operator><name pos:start="165:62" pos:end="165:66">entry</name></expr></argument>, <argument pos:start="165:69" pos:end="165:72"><expr pos:start="165:69" pos:end="165:72"><name pos:start="165:69" pos:end="165:72">NULL</name></expr></argument>, <argument pos:start="165:75" pos:end="165:78"><expr pos:start="165:75" pos:end="165:78"><name pos:start="165:75" pos:end="165:78">NULL</name></expr></argument>,

                               <argument pos:start="167:32" pos:end="167:32"><expr pos:start="167:32" pos:end="167:32"><literal type="number" pos:start="167:32" pos:end="167:32">1</literal></expr></argument>, <argument pos:start="167:35" pos:end="167:50"><expr pos:start="167:35" pos:end="167:50"><name pos:start="167:35" pos:end="167:50">EM_LATTICEMICO32</name></expr></argument>, <argument pos:start="167:53" pos:end="167:53"><expr pos:start="167:53" pos:end="167:53"><literal type="number" pos:start="167:53" pos:end="167:53">0</literal></expr></argument>, <argument pos:start="167:56" pos:end="167:56"><expr pos:start="167:56" pos:end="167:56"><literal type="number" pos:start="167:56" pos:end="167:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:41"><expr pos:start="169:9" pos:end="169:40"><name pos:start="169:9" pos:end="169:32"><name pos:start="169:9" pos:end="169:18">reset_info</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:32">bootstrap_pc</name></name> <operator pos:start="169:34" pos:end="169:34">=</operator> <name pos:start="169:36" pos:end="169:40">entry</name></expr>;</expr_stmt>



        <if_stmt pos:start="173:9" pos:end="181:9"><if pos:start="173:9" pos:end="181:9">if <condition pos:start="173:12" pos:end="173:28">(<expr pos:start="173:13" pos:end="173:27"><name pos:start="173:13" pos:end="173:23">kernel_size</name> <operator pos:start="173:25" pos:end="173:25">&lt;</operator> <literal type="number" pos:start="173:27" pos:end="173:27">0</literal></expr>)</condition> <block pos:start="173:30" pos:end="181:9">{<block_content pos:start="175:13" pos:end="179:48">

            <expr_stmt pos:start="175:13" pos:end="177:56"><expr pos:start="175:13" pos:end="177:55"><name pos:start="175:13" pos:end="175:23">kernel_size</name> <operator pos:start="175:25" pos:end="175:25">=</operator> <call pos:start="175:27" pos:end="177:55"><name pos:start="175:27" pos:end="175:45">load_image_targphys</name><argument_list pos:start="175:46" pos:end="177:55">(<argument pos:start="175:47" pos:end="175:61"><expr pos:start="175:47" pos:end="175:61"><name pos:start="175:47" pos:end="175:61">kernel_filename</name></expr></argument>, <argument pos:start="175:64" pos:end="175:71"><expr pos:start="175:64" pos:end="175:71"><name pos:start="175:64" pos:end="175:71">ram_base</name></expr></argument>,

                                              <argument pos:start="177:47" pos:end="177:54"><expr pos:start="177:47" pos:end="177:54"><name pos:start="177:47" pos:end="177:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:48"><expr pos:start="179:13" pos:end="179:47"><name pos:start="179:13" pos:end="179:36"><name pos:start="179:13" pos:end="179:22">reset_info</name><operator pos:start="179:23" pos:end="179:24">-&gt;</operator><name pos:start="179:25" pos:end="179:36">bootstrap_pc</name></name> <operator pos:start="179:38" pos:end="179:38">=</operator> <name pos:start="179:40" pos:end="179:47">ram_base</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="185:9" pos:end="193:9"><if pos:start="185:9" pos:end="193:9">if <condition pos:start="185:12" pos:end="185:28">(<expr pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:23">kernel_size</name> <operator pos:start="185:25" pos:end="185:25">&lt;</operator> <literal type="number" pos:start="185:27" pos:end="185:27">0</literal></expr>)</condition> <block pos:start="185:30" pos:end="193:9">{<block_content pos:start="187:13" pos:end="191:20">

            <expr_stmt pos:start="187:13" pos:end="189:37"><expr pos:start="187:13" pos:end="189:36"><call pos:start="187:13" pos:end="189:36"><name pos:start="187:13" pos:end="187:19">fprintf</name><argument_list pos:start="187:20" pos:end="189:36">(<argument pos:start="187:21" pos:end="187:26"><expr pos:start="187:21" pos:end="187:26"><name pos:start="187:21" pos:end="187:26">stderr</name></expr></argument>, <argument pos:start="187:29" pos:end="187:64"><expr pos:start="187:29" pos:end="187:64"><literal type="string" pos:start="187:29" pos:end="187:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="189:21" pos:end="189:35"><expr pos:start="189:21" pos:end="189:35"><name pos:start="189:21" pos:end="189:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:20"><expr pos:start="191:13" pos:end="191:19"><call pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:16">exit</name><argument_list pos:start="191:17" pos:end="191:19">(<argument pos:start="191:18" pos:end="191:18"><expr pos:start="191:18" pos:end="191:18"><literal type="number" pos:start="191:18" pos:end="191:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:54">/* generate a rom with the hardware description */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:24"><expr pos:start="201:5" pos:end="201:23"><name pos:start="201:5" pos:end="201:6">hw</name> <operator pos:start="201:8" pos:end="201:8">=</operator> <call pos:start="201:10" pos:end="201:23"><name pos:start="201:10" pos:end="201:21">hwsetup_init</name><argument_list pos:start="201:22" pos:end="201:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:42"><expr pos:start="203:5" pos:end="203:41"><call pos:start="203:5" pos:end="203:41"><name pos:start="203:5" pos:end="203:19">hwsetup_add_cpu</name><argument_list pos:start="203:20" pos:end="203:41">(<argument pos:start="203:21" pos:end="203:22"><expr pos:start="203:21" pos:end="203:22"><name pos:start="203:21" pos:end="203:22">hw</name></expr></argument>, <argument pos:start="203:25" pos:end="203:30"><expr pos:start="203:25" pos:end="203:30"><literal type="string" pos:start="203:25" pos:end="203:30">"LM32"</literal></expr></argument>, <argument pos:start="203:33" pos:end="203:40"><expr pos:start="203:33" pos:end="203:40"><literal type="number" pos:start="203:33" pos:end="203:40">75000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:59"><expr pos:start="205:5" pos:end="205:58"><call pos:start="205:5" pos:end="205:58"><name pos:start="205:5" pos:end="205:21">hwsetup_add_flash</name><argument_list pos:start="205:22" pos:end="205:58">(<argument pos:start="205:23" pos:end="205:24"><expr pos:start="205:23" pos:end="205:24"><name pos:start="205:23" pos:end="205:24">hw</name></expr></argument>, <argument pos:start="205:27" pos:end="205:33"><expr pos:start="205:27" pos:end="205:33"><literal type="string" pos:start="205:27" pos:end="205:33">"flash"</literal></expr></argument>, <argument pos:start="205:36" pos:end="205:45"><expr pos:start="205:36" pos:end="205:45"><name pos:start="205:36" pos:end="205:45">flash_base</name></expr></argument>, <argument pos:start="205:48" pos:end="205:57"><expr pos:start="205:48" pos:end="205:57"><name pos:start="205:48" pos:end="205:57">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:63"><expr pos:start="207:5" pos:end="207:62"><call pos:start="207:5" pos:end="207:62"><name pos:start="207:5" pos:end="207:25">hwsetup_add_ddr_sdram</name><argument_list pos:start="207:26" pos:end="207:62">(<argument pos:start="207:27" pos:end="207:28"><expr pos:start="207:27" pos:end="207:28"><name pos:start="207:27" pos:end="207:28">hw</name></expr></argument>, <argument pos:start="207:31" pos:end="207:41"><expr pos:start="207:31" pos:end="207:41"><literal type="string" pos:start="207:31" pos:end="207:41">"ddr_sdram"</literal></expr></argument>, <argument pos:start="207:44" pos:end="207:51"><expr pos:start="207:44" pos:end="207:51"><name pos:start="207:44" pos:end="207:51">ram_base</name></expr></argument>, <argument pos:start="207:54" pos:end="207:61"><expr pos:start="207:54" pos:end="207:61"><name pos:start="207:54" pos:end="207:61">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:61"><expr pos:start="209:5" pos:end="209:60"><call pos:start="209:5" pos:end="209:60"><name pos:start="209:5" pos:end="209:21">hwsetup_add_timer</name><argument_list pos:start="209:22" pos:end="209:60">(<argument pos:start="209:23" pos:end="209:24"><expr pos:start="209:23" pos:end="209:24"><name pos:start="209:23" pos:end="209:24">hw</name></expr></argument>, <argument pos:start="209:27" pos:end="209:34"><expr pos:start="209:27" pos:end="209:34"><literal type="string" pos:start="209:27" pos:end="209:34">"timer0"</literal></expr></argument>, <argument pos:start="209:37" pos:end="209:47"><expr pos:start="209:37" pos:end="209:47"><name pos:start="209:37" pos:end="209:47">timer0_base</name></expr></argument>, <argument pos:start="209:50" pos:end="209:59"><expr pos:start="209:50" pos:end="209:59"><name pos:start="209:50" pos:end="209:59">timer0_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:70"><expr pos:start="211:5" pos:end="211:69"><call pos:start="211:5" pos:end="211:69"><name pos:start="211:5" pos:end="211:21">hwsetup_add_timer</name><argument_list pos:start="211:22" pos:end="211:69">(<argument pos:start="211:23" pos:end="211:24"><expr pos:start="211:23" pos:end="211:24"><name pos:start="211:23" pos:end="211:24">hw</name></expr></argument>, <argument pos:start="211:27" pos:end="211:43"><expr pos:start="211:27" pos:end="211:43"><literal type="string" pos:start="211:27" pos:end="211:43">"timer1_dev_only"</literal></expr></argument>, <argument pos:start="211:46" pos:end="211:56"><expr pos:start="211:46" pos:end="211:56"><name pos:start="211:46" pos:end="211:56">timer1_base</name></expr></argument>, <argument pos:start="211:59" pos:end="211:68"><expr pos:start="211:59" pos:end="211:68"><name pos:start="211:59" pos:end="211:68">timer1_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:70"><expr pos:start="213:5" pos:end="213:69"><call pos:start="213:5" pos:end="213:69"><name pos:start="213:5" pos:end="213:21">hwsetup_add_timer</name><argument_list pos:start="213:22" pos:end="213:69">(<argument pos:start="213:23" pos:end="213:24"><expr pos:start="213:23" pos:end="213:24"><name pos:start="213:23" pos:end="213:24">hw</name></expr></argument>, <argument pos:start="213:27" pos:end="213:43"><expr pos:start="213:27" pos:end="213:43"><literal type="string" pos:start="213:27" pos:end="213:43">"timer2_dev_only"</literal></expr></argument>, <argument pos:start="213:46" pos:end="213:56"><expr pos:start="213:46" pos:end="213:56"><name pos:start="213:46" pos:end="213:56">timer2_base</name></expr></argument>, <argument pos:start="213:59" pos:end="213:68"><expr pos:start="213:59" pos:end="213:68"><name pos:start="213:59" pos:end="213:68">timer2_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:56"><expr pos:start="215:5" pos:end="215:55"><call pos:start="215:5" pos:end="215:55"><name pos:start="215:5" pos:end="215:20">hwsetup_add_uart</name><argument_list pos:start="215:21" pos:end="215:55">(<argument pos:start="215:22" pos:end="215:23"><expr pos:start="215:22" pos:end="215:23"><name pos:start="215:22" pos:end="215:23">hw</name></expr></argument>, <argument pos:start="215:26" pos:end="215:31"><expr pos:start="215:26" pos:end="215:31"><literal type="string" pos:start="215:26" pos:end="215:31">"uart"</literal></expr></argument>, <argument pos:start="215:34" pos:end="215:43"><expr pos:start="215:34" pos:end="215:43"><name pos:start="215:34" pos:end="215:43">uart0_base</name></expr></argument>, <argument pos:start="215:46" pos:end="215:54"><expr pos:start="215:46" pos:end="215:54"><name pos:start="215:46" pos:end="215:54">uart0_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:28"><expr pos:start="217:5" pos:end="217:27"><call pos:start="217:5" pos:end="217:27"><name pos:start="217:5" pos:end="217:23">hwsetup_add_trailer</name><argument_list pos:start="217:24" pos:end="217:27">(<argument pos:start="217:25" pos:end="217:26"><expr pos:start="217:25" pos:end="217:26"><name pos:start="217:25" pos:end="217:26">hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:41"><expr pos:start="219:5" pos:end="219:40"><call pos:start="219:5" pos:end="219:40"><name pos:start="219:5" pos:end="219:22">hwsetup_create_rom</name><argument_list pos:start="219:23" pos:end="219:40">(<argument pos:start="219:24" pos:end="219:25"><expr pos:start="219:24" pos:end="219:25"><name pos:start="219:24" pos:end="219:25">hw</name></expr></argument>, <argument pos:start="219:28" pos:end="219:39"><expr pos:start="219:28" pos:end="219:39"><name pos:start="219:28" pos:end="219:39">hwsetup_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:21"><expr pos:start="221:5" pos:end="221:20"><call pos:start="221:5" pos:end="221:20"><name pos:start="221:5" pos:end="221:16">hwsetup_free</name><argument_list pos:start="221:17" pos:end="221:20">(<argument pos:start="221:18" pos:end="221:19"><expr pos:start="221:18" pos:end="221:19"><name pos:start="221:18" pos:end="221:19">hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:44"><expr pos:start="225:5" pos:end="225:43"><name pos:start="225:5" pos:end="225:28"><name pos:start="225:5" pos:end="225:14">reset_info</name><operator pos:start="225:15" pos:end="225:16">-&gt;</operator><name pos:start="225:17" pos:end="225:28">hwsetup_base</name></name> <operator pos:start="225:30" pos:end="225:30">=</operator> <name pos:start="225:32" pos:end="225:43">hwsetup_base</name></expr>;</expr_stmt>



    <if_stmt pos:start="229:5" pos:end="237:5"><if pos:start="229:5" pos:end="237:5">if <condition pos:start="229:8" pos:end="229:49">(<expr pos:start="229:9" pos:end="229:48"><name pos:start="229:9" pos:end="229:22">kernel_cmdline</name> <operator pos:start="229:24" pos:end="229:25">&amp;&amp;</operator> <call pos:start="229:27" pos:end="229:48"><name pos:start="229:27" pos:end="229:32">strlen</name><argument_list pos:start="229:33" pos:end="229:48">(<argument pos:start="229:34" pos:end="229:47"><expr pos:start="229:34" pos:end="229:47"><name pos:start="229:34" pos:end="229:47">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:51" pos:end="237:5">{<block_content pos:start="231:9" pos:end="235:48">

        <expr_stmt pos:start="231:9" pos:end="233:32"><expr pos:start="231:9" pos:end="233:31"><call pos:start="231:9" pos:end="233:31"><name pos:start="231:9" pos:end="231:24">pstrcpy_targphys</name><argument_list pos:start="231:25" pos:end="233:31">(<argument pos:start="231:26" pos:end="231:34"><expr pos:start="231:26" pos:end="231:34"><literal type="string" pos:start="231:26" pos:end="231:34">"cmdline"</literal></expr></argument>, <argument pos:start="231:37" pos:end="231:48"><expr pos:start="231:37" pos:end="231:48"><name pos:start="231:37" pos:end="231:48">cmdline_base</name></expr></argument>, <argument pos:start="231:51" pos:end="231:66"><expr pos:start="231:51" pos:end="231:66"><name pos:start="231:51" pos:end="231:66">TARGET_PAGE_SIZE</name></expr></argument>,

                <argument pos:start="233:17" pos:end="233:30"><expr pos:start="233:17" pos:end="233:30"><name pos:start="233:17" pos:end="233:30">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:48"><expr pos:start="235:9" pos:end="235:47"><name pos:start="235:9" pos:end="235:32"><name pos:start="235:9" pos:end="235:18">reset_info</name><operator pos:start="235:19" pos:end="235:20">-&gt;</operator><name pos:start="235:21" pos:end="235:32">cmdline_base</name></name> <operator pos:start="235:34" pos:end="235:34">=</operator> <name pos:start="235:36" pos:end="235:47">cmdline_base</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="241:5" pos:end="253:5"><if pos:start="241:5" pos:end="253:5">if <condition pos:start="241:8" pos:end="241:24">(<expr pos:start="241:9" pos:end="241:23"><name pos:start="241:9" pos:end="241:23">initrd_filename</name></expr>)</condition> <block pos:start="241:26" pos:end="253:5">{<block_content pos:start="243:9" pos:end="251:46">

        <decl_stmt pos:start="243:9" pos:end="243:27"><decl pos:start="243:9" pos:end="243:26"><type pos:start="243:9" pos:end="243:14"><name pos:start="243:9" pos:end="243:14">size_t</name></type> <name pos:start="243:16" pos:end="243:26">initrd_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="245:9" pos:end="247:28"><expr pos:start="245:9" pos:end="247:27"><name pos:start="245:9" pos:end="245:19">initrd_size</name> <operator pos:start="245:21" pos:end="245:21">=</operator> <call pos:start="245:23" pos:end="247:27"><name pos:start="245:23" pos:end="245:41">load_image_targphys</name><argument_list pos:start="245:42" pos:end="247:27">(<argument pos:start="245:43" pos:end="245:57"><expr pos:start="245:43" pos:end="245:57"><name pos:start="245:43" pos:end="245:57">initrd_filename</name></expr></argument>, <argument pos:start="245:60" pos:end="245:70"><expr pos:start="245:60" pos:end="245:70"><name pos:start="245:60" pos:end="245:70">initrd_base</name></expr></argument>,

                <argument pos:start="247:17" pos:end="247:26"><expr pos:start="247:17" pos:end="247:26"><name pos:start="247:17" pos:end="247:26">initrd_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:46"><expr pos:start="249:9" pos:end="249:45"><name pos:start="249:9" pos:end="249:31"><name pos:start="249:9" pos:end="249:18">reset_info</name><operator pos:start="249:19" pos:end="249:20">-&gt;</operator><name pos:start="249:21" pos:end="249:31">initrd_base</name></name> <operator pos:start="249:33" pos:end="249:33">=</operator> <name pos:start="249:35" pos:end="249:45">initrd_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:46"><expr pos:start="251:9" pos:end="251:45"><name pos:start="251:9" pos:end="251:31"><name pos:start="251:9" pos:end="251:18">reset_info</name><operator pos:start="251:19" pos:end="251:20">-&gt;</operator><name pos:start="251:21" pos:end="251:31">initrd_size</name></name> <operator pos:start="251:33" pos:end="251:33">=</operator> <name pos:start="251:35" pos:end="251:45">initrd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:52"><expr pos:start="257:5" pos:end="257:51"><call pos:start="257:5" pos:end="257:51"><name pos:start="257:5" pos:end="257:23">qemu_register_reset</name><argument_list pos:start="257:24" pos:end="257:51">(<argument pos:start="257:25" pos:end="257:38"><expr pos:start="257:25" pos:end="257:38"><name pos:start="257:25" pos:end="257:38">main_cpu_reset</name></expr></argument>, <argument pos:start="257:41" pos:end="257:50"><expr pos:start="257:41" pos:end="257:50"><name pos:start="257:41" pos:end="257:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
