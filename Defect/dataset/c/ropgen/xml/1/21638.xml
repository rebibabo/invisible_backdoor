<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21638.c" pos:tabs="8"><function pos:start="1:1" pos:end="307:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ac3_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="307:1">{<block_content pos:start="7:5" pos:end="305:42">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">AC3DecodeContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">s</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">blk</name></decl>, <decl pos:start="13:14" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:15">ch</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">err</name></decl>, <decl pos:start="13:23" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:25">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:30">channel_map</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:17"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:15">float</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:41"><name pos:start="17:18" pos:end="17:23">output</name><index pos:start="17:24" pos:end="17:41">[<expr pos:start="17:25" pos:end="17:40"><name pos:start="17:25" pos:end="17:40">AC3_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="23:71">/* copy input buffer to decoder context to avoid reading past the end

       of the buffer, which can be caused by a damaged input stream. */</comment>

    <if_stmt pos:start="25:5" pos:end="35:77"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:48">(<expr pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:16">buf_size</name> <operator pos:start="25:18" pos:end="25:19">&gt;=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">2</literal> <operator pos:start="25:23" pos:end="25:24">&amp;&amp;</operator> <call pos:start="25:26" pos:end="25:37"><name pos:start="25:26" pos:end="25:32">AV_RB16</name><argument_list pos:start="25:33" pos:end="25:37">(<argument pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><name pos:start="25:34" pos:end="25:36">buf</name></expr></argument>)</argument_list></call> <operator pos:start="25:39" pos:end="25:40">==</operator> <literal type="number" pos:start="25:42" pos:end="25:47">0x770B</literal></expr>)</condition> <block pos:start="25:50" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:84">

        <comment type="line" pos:start="27:9" pos:end="27:40">// seems to be byte-swapped AC-3</comment>

        <decl_stmt pos:start="29:9" pos:end="29:62"><decl pos:start="29:9" pos:end="29:61"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:15">cnt</name> <init pos:start="29:17" pos:end="29:61">= <expr pos:start="29:19" pos:end="29:61"><call pos:start="29:19" pos:end="29:56"><name pos:start="29:19" pos:end="29:23">FFMIN</name><argument_list pos:start="29:24" pos:end="29:56">(<argument pos:start="29:25" pos:end="29:32"><expr pos:start="29:25" pos:end="29:32"><name pos:start="29:25" pos:end="29:32">buf_size</name></expr></argument>, <argument pos:start="29:35" pos:end="29:55"><expr pos:start="29:35" pos:end="29:55"><name pos:start="29:35" pos:end="29:55">AC3_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="29:58" pos:end="29:59">&gt;&gt;</operator> <literal type="number" pos:start="29:61" pos:end="29:61">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:84"><expr pos:start="31:9" pos:end="31:83"><call pos:start="31:9" pos:end="31:83"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:14">dsp</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:26">bswap16_buf</name></name><argument_list pos:start="31:27" pos:end="31:83">(<argument pos:start="31:28" pos:end="31:54"><expr pos:start="31:28" pos:end="31:54"><operator pos:start="31:28" pos:end="31:28">(</operator><name pos:start="31:29" pos:end="31:36">uint16_t</name> <operator pos:start="31:38" pos:end="31:38">*</operator><operator pos:start="31:39" pos:end="31:39">)</operator><name pos:start="31:40" pos:end="31:54"><name pos:start="31:40" pos:end="31:40">s</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:54">input_buffer</name></name></expr></argument>, <argument pos:start="31:57" pos:end="31:77"><expr pos:start="31:57" pos:end="31:77"><operator pos:start="31:57" pos:end="31:57">(</operator><specifier pos:start="31:58" pos:end="31:62">const</specifier> <name pos:start="31:64" pos:end="31:71">uint16_t</name> <operator pos:start="31:73" pos:end="31:73">*</operator><operator pos:start="31:74" pos:end="31:74">)</operator><name pos:start="31:75" pos:end="31:77">buf</name></expr></argument>, <argument pos:start="31:80" pos:end="31:82"><expr pos:start="31:80" pos:end="31:82"><name pos:start="31:80" pos:end="31:82">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="35:77">else<block type="pseudo" pos:start="35:9" pos:end="35:77"><block_content pos:start="35:9" pos:end="35:77">

        <expr_stmt pos:start="35:9" pos:end="35:77"><expr pos:start="35:9" pos:end="35:76"><call pos:start="35:9" pos:end="35:76"><name pos:start="35:9" pos:end="35:14">memcpy</name><argument_list pos:start="35:15" pos:end="35:76">(<argument pos:start="35:16" pos:end="35:30"><expr pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:16">s</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:30">input_buffer</name></name></expr></argument>, <argument pos:start="35:33" pos:end="35:35"><expr pos:start="35:33" pos:end="35:35"><name pos:start="35:33" pos:end="35:35">buf</name></expr></argument>, <argument pos:start="35:38" pos:end="35:75"><expr pos:start="35:38" pos:end="35:75"><call pos:start="35:38" pos:end="35:75"><name pos:start="35:38" pos:end="35:42">FFMIN</name><argument_list pos:start="35:43" pos:end="35:75">(<argument pos:start="35:44" pos:end="35:51"><expr pos:start="35:44" pos:end="35:51"><name pos:start="35:44" pos:end="35:51">buf_size</name></expr></argument>, <argument pos:start="35:54" pos:end="35:74"><expr pos:start="35:54" pos:end="35:74"><name pos:start="35:54" pos:end="35:74">AC3_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:7">buf</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:25"><name pos:start="37:11" pos:end="37:11">s</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:25">input_buffer</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:73">/* initialize the GetBitContext with the start of valid AC-3 Frame */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:46"><expr pos:start="41:5" pos:end="41:45"><call pos:start="41:5" pos:end="41:45"><name pos:start="41:5" pos:end="41:17">init_get_bits</name><argument_list pos:start="41:18" pos:end="41:45">(<argument pos:start="41:19" pos:end="41:25"><expr pos:start="41:19" pos:end="41:25"><operator pos:start="41:19" pos:end="41:19">&amp;</operator><name pos:start="41:20" pos:end="41:25"><name pos:start="41:20" pos:end="41:20">s</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:25">gbc</name></name></expr></argument>, <argument pos:start="41:28" pos:end="41:30"><expr pos:start="41:28" pos:end="41:30"><name pos:start="41:28" pos:end="41:30">buf</name></expr></argument>, <argument pos:start="41:33" pos:end="41:44"><expr pos:start="41:33" pos:end="41:44"><name pos:start="41:33" pos:end="41:40">buf_size</name> <operator pos:start="41:42" pos:end="41:42">*</operator> <literal type="number" pos:start="41:44" pos:end="41:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:28">/* parse the syncinfo */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:7">err</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:31"><name pos:start="47:11" pos:end="47:28">parse_frame_header</name><argument_list pos:start="47:29" pos:end="47:31">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="137:5"><if pos:start="51:5" pos:end="111:5">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">err</name></expr>)</condition> <block pos:start="51:14" pos:end="111:5">{<block_content pos:start="53:9" pos:end="109:9">

        <switch pos:start="53:9" pos:end="109:9">switch <condition pos:start="53:16" pos:end="53:20">(<expr pos:start="53:17" pos:end="53:19"><name pos:start="53:17" pos:end="53:19">err</name></expr>)</condition> <block pos:start="53:22" pos:end="109:9">{<block_content pos:start="55:9" pos:end="107:18">

        <case pos:start="55:9" pos:end="55:38">case <expr pos:start="55:14" pos:end="55:37"><name pos:start="55:14" pos:end="55:37">AAC_AC3_PARSE_ERROR_SYNC</name></expr>:</case>

            <expr_stmt pos:start="57:13" pos:end="57:62"><expr pos:start="57:13" pos:end="57:61"><call pos:start="57:13" pos:end="57:61"><name pos:start="57:13" pos:end="57:18">av_log</name><argument_list pos:start="57:19" pos:end="57:61">(<argument pos:start="57:20" pos:end="57:24"><expr pos:start="57:20" pos:end="57:24"><name pos:start="57:20" pos:end="57:24">avctx</name></expr></argument>, <argument pos:start="57:27" pos:end="57:38"><expr pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:41" pos:end="57:60"><expr pos:start="57:41" pos:end="57:60"><literal type="string" pos:start="57:41" pos:end="57:60">"frame sync error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:22">return <expr pos:start="59:20" pos:end="59:21"><operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</return>

        <case pos:start="61:9" pos:end="61:38">case <expr pos:start="61:14" pos:end="61:37"><name pos:start="61:14" pos:end="61:37">AAC_AC3_PARSE_ERROR_BSID</name></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="63:66"><expr pos:start="63:13" pos:end="63:65"><call pos:start="63:13" pos:end="63:65"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:65">(<argument pos:start="63:20" pos:end="63:24"><expr pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:24">avctx</name></expr></argument>, <argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:41" pos:end="63:64"><expr pos:start="63:41" pos:end="63:64"><literal type="string" pos:start="63:41" pos:end="63:64">"invalid bitstream id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:45">case <expr pos:start="67:14" pos:end="67:44"><name pos:start="67:14" pos:end="67:44">AAC_AC3_PARSE_ERROR_SAMPLE_RATE</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:65"><expr pos:start="69:13" pos:end="69:64"><call pos:start="69:13" pos:end="69:64"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:64">(<argument pos:start="69:20" pos:end="69:24"><expr pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:24">avctx</name></expr></argument>, <argument pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:41" pos:end="69:63"><expr pos:start="69:41" pos:end="69:63"><literal type="string" pos:start="69:41" pos:end="69:63">"invalid sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:44">case <expr pos:start="73:14" pos:end="73:43"><name pos:start="73:14" pos:end="73:43">AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>:</case>

            <expr_stmt pos:start="75:13" pos:end="75:64"><expr pos:start="75:13" pos:end="75:63"><call pos:start="75:13" pos:end="75:63"><name pos:start="75:13" pos:end="75:18">av_log</name><argument_list pos:start="75:19" pos:end="75:63">(<argument pos:start="75:20" pos:end="75:24"><expr pos:start="75:20" pos:end="75:24"><name pos:start="75:20" pos:end="75:24">avctx</name></expr></argument>, <argument pos:start="75:27" pos:end="75:38"><expr pos:start="75:27" pos:end="75:38"><name pos:start="75:27" pos:end="75:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:41" pos:end="75:62"><expr pos:start="75:41" pos:end="75:62"><literal type="string" pos:start="75:41" pos:end="75:62">"invalid frame size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <case pos:start="79:9" pos:end="79:44">case <expr pos:start="79:14" pos:end="79:43"><name pos:start="79:14" pos:end="79:43">AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>:</case>

            <comment type="block" pos:start="81:13" pos:end="81:75">/* skip frame if CRC is ok. otherwise use error concealment. */</comment>

            <comment type="block" pos:start="83:13" pos:end="83:71">/* TODO: add support for substreams and dependent frames */</comment>

            <if_stmt pos:start="85:13" pos:end="99:13"><if pos:start="85:13" pos:end="95:13">if <condition pos:start="85:16" pos:end="85:77">(<expr pos:start="85:17" pos:end="85:76"><name pos:start="85:17" pos:end="85:29"><name pos:start="85:17" pos:end="85:17">s</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:29">frame_type</name></name> <operator pos:start="85:31" pos:end="85:32">==</operator> <name pos:start="85:34" pos:end="85:58">EAC3_FRAME_TYPE_DEPENDENT</name> <operator pos:start="85:60" pos:end="85:61">||</operator> <name pos:start="85:63" pos:end="85:76"><name pos:start="85:63" pos:end="85:63">s</name><operator pos:start="85:64" pos:end="85:65">-&gt;</operator><name pos:start="85:66" pos:end="85:76">substreamid</name></name></expr>)</condition> <block pos:start="85:79" pos:end="95:13">{<block_content pos:start="87:17" pos:end="93:37">

                <expr_stmt pos:start="87:17" pos:end="89:43"><expr pos:start="87:17" pos:end="89:42"><call pos:start="87:17" pos:end="89:42"><name pos:start="87:17" pos:end="87:22">av_log</name><argument_list pos:start="87:23" pos:end="89:42">(<argument pos:start="87:24" pos:end="87:28"><expr pos:start="87:24" pos:end="87:28"><name pos:start="87:24" pos:end="87:28">avctx</name></expr></argument>, <argument pos:start="87:31" pos:end="87:42"><expr pos:start="87:31" pos:end="87:42"><name pos:start="87:31" pos:end="87:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:45" pos:end="89:41"><expr pos:start="87:45" pos:end="89:41"><literal type="string" pos:start="87:45" pos:end="87:71">"unsupported frame type : "</literal>

                       <literal type="string" pos:start="89:24" pos:end="89:41">"skipping frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:35"><expr pos:start="91:17" pos:end="91:34"><operator pos:start="91:17" pos:end="91:17">*</operator><name pos:start="91:18" pos:end="91:30">got_frame_ptr</name> <operator pos:start="91:32" pos:end="91:32">=</operator> <literal type="number" pos:start="91:34" pos:end="91:34">0</literal></expr>;</expr_stmt>

                <return pos:start="93:17" pos:end="93:37">return <expr pos:start="93:24" pos:end="93:36"><name pos:start="93:24" pos:end="93:36"><name pos:start="93:24" pos:end="93:24">s</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:36">frame_size</name></name></expr>;</return>

            </block_content>}</block></if> <else pos:start="95:15" pos:end="99:13">else <block pos:start="95:20" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:68">

                <expr_stmt pos:start="97:17" pos:end="97:68"><expr pos:start="97:17" pos:end="97:67"><call pos:start="97:17" pos:end="97:67"><name pos:start="97:17" pos:end="97:22">av_log</name><argument_list pos:start="97:23" pos:end="97:67">(<argument pos:start="97:24" pos:end="97:28"><expr pos:start="97:24" pos:end="97:28"><name pos:start="97:24" pos:end="97:28">avctx</name></expr></argument>, <argument pos:start="97:31" pos:end="97:42"><expr pos:start="97:31" pos:end="97:42"><name pos:start="97:31" pos:end="97:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:45" pos:end="97:66"><expr pos:start="97:45" pos:end="97:66"><literal type="string" pos:start="97:45" pos:end="97:66">"invalid frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <default pos:start="103:9" pos:end="103:16">default:</default>

            <expr_stmt pos:start="105:13" pos:end="105:60"><expr pos:start="105:13" pos:end="105:59"><call pos:start="105:13" pos:end="105:59"><name pos:start="105:13" pos:end="105:18">av_log</name><argument_list pos:start="105:19" pos:end="105:59">(<argument pos:start="105:20" pos:end="105:24"><expr pos:start="105:20" pos:end="105:24"><name pos:start="105:20" pos:end="105:24">avctx</name></expr></argument>, <argument pos:start="105:27" pos:end="105:38"><expr pos:start="105:27" pos:end="105:38"><name pos:start="105:27" pos:end="105:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:41" pos:end="105:58"><expr pos:start="105:41" pos:end="105:58"><literal type="string" pos:start="105:41" pos:end="105:58">"invalid header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="137:5">else <block pos:start="111:12" pos:end="137:5">{<block_content pos:start="115:9" pos:end="135:9">

        <comment type="block" pos:start="113:9" pos:end="113:65">/* check that reported frame size fits in input buffer */</comment>

        <if_stmt pos:start="115:9" pos:end="135:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:37">(<expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:25"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:25">frame_size</name></name> <operator pos:start="115:27" pos:end="115:27">&gt;</operator> <name pos:start="115:29" pos:end="115:36">buf_size</name></expr>)</condition> <block pos:start="115:39" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:49">

            <expr_stmt pos:start="117:13" pos:end="117:62"><expr pos:start="117:13" pos:end="117:61"><call pos:start="117:13" pos:end="117:61"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:61">(<argument pos:start="117:20" pos:end="117:24"><expr pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:24">avctx</name></expr></argument>, <argument pos:start="117:27" pos:end="117:38"><expr pos:start="117:27" pos:end="117:38"><name pos:start="117:27" pos:end="117:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:41" pos:end="117:60"><expr pos:start="117:41" pos:end="117:60"><literal type="string" pos:start="117:41" pos:end="117:60">"incomplete frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:49"><expr pos:start="119:13" pos:end="119:48"><name pos:start="119:13" pos:end="119:15">err</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:48">AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="135:9">else if <condition pos:start="121:19" pos:end="121:75">(<expr pos:start="121:20" pos:end="121:74"><name pos:start="121:20" pos:end="121:41"><name pos:start="121:20" pos:end="121:24">avctx</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:41">err_recognition</name></name> <operator pos:start="121:43" pos:end="121:43">&amp;</operator> <operator pos:start="121:45" pos:end="121:45">(</operator><name pos:start="121:46" pos:end="121:59">AV_EF_CRCCHECK</name><operator pos:start="121:60" pos:end="121:60">|</operator><name pos:start="121:61" pos:end="121:73">AV_EF_CAREFUL</name><operator pos:start="121:74" pos:end="121:74">)</operator></expr>)</condition> <block pos:start="121:77" pos:end="135:9">{<block_content pos:start="125:13" pos:end="133:13">

            <comment type="block" pos:start="123:13" pos:end="123:40">/* check for crc mismatch */</comment>

            <if_stmt pos:start="125:13" pos:end="133:13"><if pos:start="125:13" pos:end="133:13">if <condition pos:start="125:16" pos:end="127:42">(<expr pos:start="125:17" pos:end="127:41"><call pos:start="125:17" pos:end="127:41"><name pos:start="125:17" pos:end="125:22">av_crc</name><argument_list pos:start="125:23" pos:end="127:41">(<argument pos:start="125:24" pos:end="125:55"><expr pos:start="125:24" pos:end="125:55"><call pos:start="125:24" pos:end="125:55"><name pos:start="125:24" pos:end="125:39">av_crc_get_table</name><argument_list pos:start="125:40" pos:end="125:55">(<argument pos:start="125:41" pos:end="125:54"><expr pos:start="125:41" pos:end="125:54"><name pos:start="125:41" pos:end="125:54">AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="125:58" pos:end="125:58"><expr pos:start="125:58" pos:end="125:58"><literal type="number" pos:start="125:58" pos:end="125:58">0</literal></expr></argument>, <argument pos:start="125:61" pos:end="125:67"><expr pos:start="125:61" pos:end="125:67"><operator pos:start="125:61" pos:end="125:61">&amp;</operator><name pos:start="125:62" pos:end="125:67"><name pos:start="125:62" pos:end="125:64">buf</name><index pos:start="125:65" pos:end="125:67">[<expr pos:start="125:66" pos:end="125:66"><literal type="number" pos:start="125:66" pos:end="125:66">2</literal></expr>]</index></name></expr></argument>,

                       <argument pos:start="127:24" pos:end="127:40"><expr pos:start="127:24" pos:end="127:40"><name pos:start="127:24" pos:end="127:36"><name pos:start="127:24" pos:end="127:24">s</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:36">frame_size</name></name> <operator pos:start="127:38" pos:end="127:38">-</operator> <literal type="number" pos:start="127:40" pos:end="127:40">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:44" pos:end="133:13">{<block_content pos:start="129:17" pos:end="131:46">

                <expr_stmt pos:start="129:17" pos:end="129:68"><expr pos:start="129:17" pos:end="129:67"><call pos:start="129:17" pos:end="129:67"><name pos:start="129:17" pos:end="129:22">av_log</name><argument_list pos:start="129:23" pos:end="129:67">(<argument pos:start="129:24" pos:end="129:28"><expr pos:start="129:24" pos:end="129:28"><name pos:start="129:24" pos:end="129:28">avctx</name></expr></argument>, <argument pos:start="129:31" pos:end="129:42"><expr pos:start="129:31" pos:end="129:42"><name pos:start="129:31" pos:end="129:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:45" pos:end="129:66"><expr pos:start="129:45" pos:end="129:66"><literal type="string" pos:start="129:45" pos:end="129:66">"frame CRC mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:46"><expr pos:start="131:17" pos:end="131:45"><name pos:start="131:17" pos:end="131:19">err</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <name pos:start="131:23" pos:end="131:45">AAC_AC3_PARSE_ERROR_CRC</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:46">/* if frame is ok, set audio parameters */</comment>

    <if_stmt pos:start="143:5" pos:end="205:5"><if pos:start="143:5" pos:end="197:5">if <condition pos:start="143:8" pos:end="143:13">(<expr pos:start="143:9" pos:end="143:12"><operator pos:start="143:9" pos:end="143:9">!</operator><name pos:start="143:10" pos:end="143:12">err</name></expr>)</condition> <block pos:start="143:15" pos:end="197:5">{<block_content pos:start="145:9" pos:end="195:9">

        <expr_stmt pos:start="145:9" pos:end="145:44"><expr pos:start="145:9" pos:end="145:43"><name pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:13">avctx</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:26">sample_rate</name></name> <operator pos:start="145:28" pos:end="145:28">=</operator> <name pos:start="145:30" pos:end="145:43"><name pos:start="145:30" pos:end="145:30">s</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:43">sample_rate</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:41"><expr pos:start="147:9" pos:end="147:40"><name pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:13">avctx</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:23">bit_rate</name></name>    <operator pos:start="147:28" pos:end="147:28">=</operator> <name pos:start="147:30" pos:end="147:40"><name pos:start="147:30" pos:end="147:30">s</name><operator pos:start="147:31" pos:end="147:32">-&gt;</operator><name pos:start="147:33" pos:end="147:40">bit_rate</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:28">/* channel config */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:38"><expr pos:start="153:9" pos:end="153:37"><name pos:start="153:9" pos:end="153:23"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:23">out_channels</name></name> <operator pos:start="153:25" pos:end="153:25">=</operator> <name pos:start="153:27" pos:end="153:37"><name pos:start="153:27" pos:end="153:27">s</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:37">channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:42"><expr pos:start="155:9" pos:end="155:41"><name pos:start="155:9" pos:end="155:22"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:22">output_mode</name></name>  <operator pos:start="155:25" pos:end="155:25">=</operator> <name pos:start="155:27" pos:end="155:41"><name pos:start="155:27" pos:end="155:27">s</name><operator pos:start="155:28" pos:end="155:29">-&gt;</operator><name pos:start="155:30" pos:end="155:41">channel_mode</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="159:47"><if pos:start="157:9" pos:end="159:47">if <condition pos:start="157:12" pos:end="157:22">(<expr pos:start="157:13" pos:end="157:21"><name pos:start="157:13" pos:end="157:21"><name pos:start="157:13" pos:end="157:13">s</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:21">lfe_on</name></name></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:47"><block_content pos:start="159:13" pos:end="159:47">

            <expr_stmt pos:start="159:13" pos:end="159:47"><expr pos:start="159:13" pos:end="159:46"><name pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:26">output_mode</name></name> <operator pos:start="159:28" pos:end="159:29">|=</operator> <name pos:start="159:31" pos:end="159:46">AC3_OUTPUT_LFEON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="161:9" pos:end="171:9"><if pos:start="161:9" pos:end="171:9">if <condition pos:start="161:12" pos:end="163:54">(<expr pos:start="161:13" pos:end="163:53"><name pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:17">avctx</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:35">request_channels</name></name> <operator pos:start="161:37" pos:end="161:37">&gt;</operator> <literal type="number" pos:start="161:39" pos:end="161:39">0</literal> <operator pos:start="161:41" pos:end="161:42">&amp;&amp;</operator> <name pos:start="161:44" pos:end="161:66"><name pos:start="161:44" pos:end="161:48">avctx</name><operator pos:start="161:49" pos:end="161:50">-&gt;</operator><name pos:start="161:51" pos:end="161:66">request_channels</name></name> <operator pos:start="161:68" pos:end="161:69">&lt;=</operator> <literal type="number" pos:start="161:71" pos:end="161:71">2</literal> <operator pos:start="161:73" pos:end="161:74">&amp;&amp;</operator>

                <name pos:start="163:17" pos:end="163:39"><name pos:start="163:17" pos:end="163:21">avctx</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:39">request_channels</name></name> <operator pos:start="163:41" pos:end="163:41">&lt;</operator> <name pos:start="163:43" pos:end="163:53"><name pos:start="163:43" pos:end="163:43">s</name><operator pos:start="163:44" pos:end="163:45">-&gt;</operator><name pos:start="163:46" pos:end="163:53">channels</name></name></expr>)</condition> <block pos:start="163:56" pos:end="171:9">{<block_content pos:start="165:13" pos:end="169:78">

            <expr_stmt pos:start="165:13" pos:end="165:54"><expr pos:start="165:13" pos:end="165:53"><name pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:27">out_channels</name></name> <operator pos:start="165:29" pos:end="165:29">=</operator> <name pos:start="165:31" pos:end="165:53"><name pos:start="165:31" pos:end="165:35">avctx</name><operator pos:start="165:36" pos:end="165:37">-&gt;</operator><name pos:start="165:38" pos:end="165:53">request_channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:97"><expr pos:start="167:13" pos:end="167:96"><name pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:26">output_mode</name></name>  <operator pos:start="167:29" pos:end="167:29">=</operator> <ternary pos:start="167:31" pos:end="167:96"><condition pos:start="167:31" pos:end="167:60"><expr pos:start="167:31" pos:end="167:58"><name pos:start="167:31" pos:end="167:53"><name pos:start="167:31" pos:end="167:35">avctx</name><operator pos:start="167:36" pos:end="167:37">-&gt;</operator><name pos:start="167:38" pos:end="167:53">request_channels</name></name> <operator pos:start="167:55" pos:end="167:56">==</operator> <literal type="number" pos:start="167:58" pos:end="167:58">1</literal></expr> ?</condition><then pos:start="167:62" pos:end="167:76"> <expr pos:start="167:62" pos:end="167:76"><name pos:start="167:62" pos:end="167:76">AC3_CHMODE_MONO</name></expr> </then><else pos:start="167:78" pos:end="167:96">: <expr pos:start="167:80" pos:end="167:96"><name pos:start="167:80" pos:end="167:96">AC3_CHMODE_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:78"><expr pos:start="169:13" pos:end="169:77"><name pos:start="169:13" pos:end="169:29"><name pos:start="169:13" pos:end="169:13">s</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:29">channel_layout</name></name> <operator pos:start="169:31" pos:end="169:31">=</operator> <name pos:start="169:33" pos:end="169:77"><name pos:start="169:33" pos:end="169:61">avpriv_ac3_channel_layout_tab</name><index pos:start="169:62" pos:end="169:77">[<expr pos:start="169:63" pos:end="169:76"><name pos:start="169:63" pos:end="169:76"><name pos:start="169:63" pos:end="169:63">s</name><operator pos:start="169:64" pos:end="169:65">-&gt;</operator><name pos:start="169:66" pos:end="169:76">output_mode</name></name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:48"><expr pos:start="173:9" pos:end="173:47"><name pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:13">avctx</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:23">channels</name></name>       <operator pos:start="173:31" pos:end="173:31">=</operator> <name pos:start="173:33" pos:end="173:47"><name pos:start="173:33" pos:end="173:33">s</name><operator pos:start="173:34" pos:end="173:35">-&gt;</operator><name pos:start="173:36" pos:end="173:47">out_channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:50"><expr pos:start="175:9" pos:end="175:49"><name pos:start="175:9" pos:end="175:29"><name pos:start="175:9" pos:end="175:13">avctx</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:29">channel_layout</name></name> <operator pos:start="175:31" pos:end="175:31">=</operator> <name pos:start="175:33" pos:end="175:49"><name pos:start="175:33" pos:end="175:33">s</name><operator pos:start="175:34" pos:end="175:35">-&gt;</operator><name pos:start="175:36" pos:end="175:49">channel_layout</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:72"><expr pos:start="179:9" pos:end="179:71"><name pos:start="179:9" pos:end="179:32"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:32">loro_center_mix_level</name></name>   <operator pos:start="179:36" pos:end="179:36">=</operator> <name pos:start="179:38" pos:end="179:71"><name pos:start="179:38" pos:end="179:48">gain_levels</name><index pos:start="179:49" pos:end="179:71">[<expr pos:start="179:50" pos:end="179:70"><name pos:start="179:50" pos:end="179:70"><name pos:start="179:50" pos:end="179:50">s</name><operator pos:start="179:51" pos:end="179:52">-&gt;</operator>  <name pos:start="179:55" pos:end="179:70">center_mix_level</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:72"><expr pos:start="181:9" pos:end="181:71"><name pos:start="181:9" pos:end="181:34"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:34">loro_surround_mix_level</name></name> <operator pos:start="181:36" pos:end="181:36">=</operator> <name pos:start="181:38" pos:end="181:71"><name pos:start="181:38" pos:end="181:48">gain_levels</name><index pos:start="181:49" pos:end="181:71">[<expr pos:start="181:50" pos:end="181:70"><name pos:start="181:50" pos:end="181:70"><name pos:start="181:50" pos:end="181:50">s</name><operator pos:start="181:51" pos:end="181:52">-&gt;</operator><name pos:start="181:53" pos:end="181:70">surround_mix_level</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:53"><expr pos:start="183:9" pos:end="183:52"><name pos:start="183:9" pos:end="183:32"><name pos:start="183:9" pos:end="183:9">s</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:32">ltrt_center_mix_level</name></name>   <operator pos:start="183:36" pos:end="183:36">=</operator> <name pos:start="183:38" pos:end="183:52">LEVEL_MINUS_3DB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:53"><expr pos:start="185:9" pos:end="185:52"><name pos:start="185:9" pos:end="185:34"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:34">ltrt_surround_mix_level</name></name> <operator pos:start="185:36" pos:end="185:36">=</operator> <name pos:start="185:38" pos:end="185:52">LEVEL_MINUS_3DB</name></expr>;</expr_stmt>

        <comment type="block" pos:start="187:9" pos:end="187:51">/* set downmixing coefficients if needed */</comment>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="191:52">(<expr pos:start="189:13" pos:end="191:51"><name pos:start="189:13" pos:end="189:23"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:23">channels</name></name> <operator pos:start="189:25" pos:end="189:26">!=</operator> <name pos:start="189:28" pos:end="189:42"><name pos:start="189:28" pos:end="189:28">s</name><operator pos:start="189:29" pos:end="189:30">-&gt;</operator><name pos:start="189:31" pos:end="189:42">out_channels</name></name> <operator pos:start="189:44" pos:end="189:45">&amp;&amp;</operator> <operator pos:start="189:47" pos:end="189:47">!</operator><operator pos:start="189:48" pos:end="189:48">(</operator><operator pos:start="189:49" pos:end="189:49">(</operator><name pos:start="189:50" pos:end="189:63"><name pos:start="189:50" pos:end="189:50">s</name><operator pos:start="189:51" pos:end="189:52">-&gt;</operator><name pos:start="189:53" pos:end="189:63">output_mode</name></name> <operator pos:start="189:65" pos:end="189:65">&amp;</operator> <name pos:start="189:67" pos:end="189:82">AC3_OUTPUT_LFEON</name><operator pos:start="189:83" pos:end="189:83">)</operator> <operator pos:start="189:85" pos:end="189:86">&amp;&amp;</operator>

                <name pos:start="191:17" pos:end="191:31"><name pos:start="191:17" pos:end="191:17">s</name><operator pos:start="191:18" pos:end="191:19">-&gt;</operator><name pos:start="191:20" pos:end="191:31">fbw_channels</name></name> <operator pos:start="191:33" pos:end="191:34">==</operator> <name pos:start="191:36" pos:end="191:50"><name pos:start="191:36" pos:end="191:36">s</name><operator pos:start="191:37" pos:end="191:38">-&gt;</operator><name pos:start="191:39" pos:end="191:50">out_channels</name></name><operator pos:start="191:51" pos:end="191:51">)</operator></expr>)</condition> <block pos:start="191:54" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:34">

            <expr_stmt pos:start="193:13" pos:end="193:34"><expr pos:start="193:13" pos:end="193:33"><call pos:start="193:13" pos:end="193:33"><name pos:start="193:13" pos:end="193:30">set_downmix_coeffs</name><argument_list pos:start="193:31" pos:end="193:33">(<argument pos:start="193:32" pos:end="193:32"><expr pos:start="193:32" pos:end="193:32"><name pos:start="193:32" pos:end="193:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="197:7" pos:end="205:5">else if <condition pos:start="197:15" pos:end="197:32">(<expr pos:start="197:16" pos:end="197:31"><operator pos:start="197:16" pos:end="197:16">!</operator><name pos:start="197:17" pos:end="197:31"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:31">out_channels</name></name></expr>)</condition> <block pos:start="197:34" pos:end="205:5">{<block_content pos:start="199:9" pos:end="203:89">

        <expr_stmt pos:start="199:9" pos:end="199:42"><expr pos:start="199:9" pos:end="199:41"><name pos:start="199:9" pos:end="199:23"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:23">out_channels</name></name> <operator pos:start="199:25" pos:end="199:25">=</operator> <name pos:start="199:27" pos:end="199:41"><name pos:start="199:27" pos:end="199:31">avctx</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:41">channels</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="203:89"><if pos:start="201:9" pos:end="203:89">if <condition pos:start="201:12" pos:end="201:42">(<expr pos:start="201:13" pos:end="201:41"><name pos:start="201:13" pos:end="201:27"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:27">out_channels</name></name> <operator pos:start="201:29" pos:end="201:29">&lt;</operator> <name pos:start="201:31" pos:end="201:41"><name pos:start="201:31" pos:end="201:31">s</name><operator pos:start="201:32" pos:end="201:33">-&gt;</operator><name pos:start="201:34" pos:end="201:41">channels</name></name></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="203:89"><block_content pos:start="203:13" pos:end="203:89">

            <expr_stmt pos:start="203:13" pos:end="203:89"><expr pos:start="203:13" pos:end="203:88"><name pos:start="203:13" pos:end="203:26"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:26">output_mode</name></name>  <operator pos:start="203:29" pos:end="203:29">=</operator> <ternary pos:start="203:31" pos:end="203:88"><condition pos:start="203:31" pos:end="203:52"><expr pos:start="203:31" pos:end="203:50"><name pos:start="203:31" pos:end="203:45"><name pos:start="203:31" pos:end="203:31">s</name><operator pos:start="203:32" pos:end="203:33">-&gt;</operator><name pos:start="203:34" pos:end="203:45">out_channels</name></name> <operator pos:start="203:47" pos:end="203:48">==</operator> <literal type="number" pos:start="203:50" pos:end="203:50">1</literal></expr> ?</condition><then pos:start="203:54" pos:end="203:68"> <expr pos:start="203:54" pos:end="203:68"><name pos:start="203:54" pos:end="203:68">AC3_CHMODE_MONO</name></expr> </then><else pos:start="203:70" pos:end="203:88">: <expr pos:start="203:72" pos:end="203:88"><name pos:start="203:72" pos:end="203:88">AC3_CHMODE_STEREO</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="207:5" pos:end="213:5"><if pos:start="207:5" pos:end="213:5">if <condition pos:start="207:8" pos:end="207:43">(<expr pos:start="207:9" pos:end="207:42"><name pos:start="207:9" pos:end="207:23"><name pos:start="207:9" pos:end="207:13">avctx</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:23">channels</name></name> <operator pos:start="207:25" pos:end="207:26">!=</operator> <name pos:start="207:28" pos:end="207:42"><name pos:start="207:28" pos:end="207:28">s</name><operator pos:start="207:29" pos:end="207:30">-&gt;</operator><name pos:start="207:31" pos:end="207:42">out_channels</name></name></expr>)</condition> <block pos:start="207:45" pos:end="213:5">{<block_content pos:start="209:9" pos:end="211:35">

        <expr_stmt pos:start="209:9" pos:end="209:85"><expr pos:start="209:9" pos:end="209:84"><call pos:start="209:9" pos:end="209:84"><name pos:start="209:9" pos:end="209:14">av_log</name><argument_list pos:start="209:15" pos:end="209:84">(<argument pos:start="209:16" pos:end="209:20"><expr pos:start="209:16" pos:end="209:20"><name pos:start="209:16" pos:end="209:20">avctx</name></expr></argument>, <argument pos:start="209:23" pos:end="209:34"><expr pos:start="209:23" pos:end="209:34"><name pos:start="209:23" pos:end="209:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:37" pos:end="209:83"><expr pos:start="209:37" pos:end="209:83"><literal type="string" pos:start="209:37" pos:end="209:83">"channel number mismatching on damaged frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="211:9" pos:end="211:35">return <expr pos:start="211:16" pos:end="211:34"><name pos:start="211:16" pos:end="211:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="215:5" pos:end="215:65">/* set audio service type based on bitstream mode for AC-3 */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:50"><expr pos:start="217:5" pos:end="217:49"><name pos:start="217:5" pos:end="217:29"><name pos:start="217:5" pos:end="217:9">avctx</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:29">audio_service_type</name></name> <operator pos:start="217:31" pos:end="217:31">=</operator> <name pos:start="217:33" pos:end="217:49"><name pos:start="217:33" pos:end="217:33">s</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:49">bitstream_mode</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="221:66"><if pos:start="219:5" pos:end="221:66">if <condition pos:start="219:8" pos:end="219:52">(<expr pos:start="219:9" pos:end="219:51"><name pos:start="219:9" pos:end="219:25"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:25">bitstream_mode</name></name> <operator pos:start="219:27" pos:end="219:28">==</operator> <literal type="number" pos:start="219:30" pos:end="219:32">0x7</literal> <operator pos:start="219:34" pos:end="219:35">&amp;&amp;</operator> <name pos:start="219:37" pos:end="219:47"><name pos:start="219:37" pos:end="219:37">s</name><operator pos:start="219:38" pos:end="219:39">-&gt;</operator><name pos:start="219:40" pos:end="219:47">channels</name></name> <operator pos:start="219:49" pos:end="219:49">&gt;</operator> <literal type="number" pos:start="219:51" pos:end="219:51">1</literal></expr>)</condition><block type="pseudo" pos:start="221:9" pos:end="221:66"><block_content pos:start="221:9" pos:end="221:66">

        <expr_stmt pos:start="221:9" pos:end="221:66"><expr pos:start="221:9" pos:end="221:65"><name pos:start="221:9" pos:end="221:33"><name pos:start="221:9" pos:end="221:13">avctx</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:33">audio_service_type</name></name> <operator pos:start="221:35" pos:end="221:35">=</operator> <name pos:start="221:37" pos:end="221:65">AV_AUDIO_SERVICE_TYPE_KARAOKE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:27">/* get output buffer */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:38"><expr pos:start="227:5" pos:end="227:37"><name pos:start="227:5" pos:end="227:19"><name pos:start="227:5" pos:end="227:9">avctx</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:19">channels</name></name> <operator pos:start="227:21" pos:end="227:21">=</operator> <name pos:start="227:23" pos:end="227:37"><name pos:start="227:23" pos:end="227:23">s</name><operator pos:start="227:24" pos:end="227:25">-&gt;</operator><name pos:start="227:26" pos:end="227:37">out_channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:46"><expr pos:start="229:5" pos:end="229:45"><name pos:start="229:5" pos:end="229:23"><name pos:start="229:5" pos:end="229:5">s</name><operator pos:start="229:6" pos:end="229:7">-&gt;</operator><name pos:start="229:8" pos:end="229:12">frame</name><operator pos:start="229:13" pos:end="229:13">.</operator><name pos:start="229:14" pos:end="229:23">nb_samples</name></name> <operator pos:start="229:25" pos:end="229:25">=</operator> <name pos:start="229:27" pos:end="229:39"><name pos:start="229:27" pos:end="229:27">s</name><operator pos:start="229:28" pos:end="229:29">-&gt;</operator><name pos:start="229:30" pos:end="229:39">num_blocks</name></name> <operator pos:start="229:41" pos:end="229:41">*</operator> <literal type="number" pos:start="229:43" pos:end="229:45">256</literal></expr>;</expr_stmt>

    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:52">(<expr pos:start="231:9" pos:end="231:51"><operator pos:start="231:9" pos:end="231:9">(</operator><name pos:start="231:10" pos:end="231:12">ret</name> <operator pos:start="231:14" pos:end="231:14">=</operator> <call pos:start="231:16" pos:end="231:46"><name pos:start="231:16" pos:end="231:28">ff_get_buffer</name><argument_list pos:start="231:29" pos:end="231:46">(<argument pos:start="231:30" pos:end="231:34"><expr pos:start="231:30" pos:end="231:34"><name pos:start="231:30" pos:end="231:34">avctx</name></expr></argument>, <argument pos:start="231:37" pos:end="231:45"><expr pos:start="231:37" pos:end="231:45"><operator pos:start="231:37" pos:end="231:37">&amp;</operator><name pos:start="231:38" pos:end="231:45"><name pos:start="231:38" pos:end="231:38">s</name><operator pos:start="231:39" pos:end="231:40">-&gt;</operator><name pos:start="231:41" pos:end="231:45">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="231:47" pos:end="231:47">)</operator> <operator pos:start="231:49" pos:end="231:49">&lt;</operator> <literal type="number" pos:start="231:51" pos:end="231:51">0</literal></expr>)</condition> <block pos:start="231:54" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:19">

        <expr_stmt pos:start="233:9" pos:end="233:61"><expr pos:start="233:9" pos:end="233:60"><call pos:start="233:9" pos:end="233:60"><name pos:start="233:9" pos:end="233:14">av_log</name><argument_list pos:start="233:15" pos:end="233:60">(<argument pos:start="233:16" pos:end="233:20"><expr pos:start="233:16" pos:end="233:20"><name pos:start="233:16" pos:end="233:20">avctx</name></expr></argument>, <argument pos:start="233:23" pos:end="233:34"><expr pos:start="233:23" pos:end="233:34"><name pos:start="233:23" pos:end="233:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:37" pos:end="233:59"><expr pos:start="233:37" pos:end="233:59"><literal type="string" pos:start="233:37" pos:end="233:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="235:9" pos:end="235:19">return <expr pos:start="235:16" pos:end="235:18"><name pos:start="235:16" pos:end="235:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:33">/* decode the audio blocks */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:88"><expr pos:start="243:5" pos:end="243:87"><name pos:start="243:5" pos:end="243:15">channel_map</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <name pos:start="243:19" pos:end="243:87"><name pos:start="243:19" pos:end="243:40">ff_ac3_dec_channel_map</name><index pos:start="243:41" pos:end="243:76">[<expr pos:start="243:42" pos:end="243:75"><name pos:start="243:42" pos:end="243:55"><name pos:start="243:42" pos:end="243:42">s</name><operator pos:start="243:43" pos:end="243:44">-&gt;</operator><name pos:start="243:45" pos:end="243:55">output_mode</name></name> <operator pos:start="243:57" pos:end="243:57">&amp;</operator> <operator pos:start="243:59" pos:end="243:59">~</operator><name pos:start="243:60" pos:end="243:75">AC3_OUTPUT_LFEON</name></expr>]</index><index pos:start="243:77" pos:end="243:87">[<expr pos:start="243:78" pos:end="243:86"><name pos:start="243:78" pos:end="243:86"><name pos:start="243:78" pos:end="243:78">s</name><operator pos:start="243:79" pos:end="243:80">-&gt;</operator><name pos:start="243:81" pos:end="243:86">lfe_on</name></name></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="245:5" pos:end="257:5">for <control pos:start="245:9" pos:end="245:40">(<init pos:start="245:10" pos:end="245:16"><expr pos:start="245:10" pos:end="245:15"><name pos:start="245:10" pos:end="245:11">ch</name> <operator pos:start="245:13" pos:end="245:13">=</operator> <literal type="number" pos:start="245:15" pos:end="245:15">0</literal></expr>;</init> <condition pos:start="245:18" pos:end="245:34"><expr pos:start="245:18" pos:end="245:33"><name pos:start="245:18" pos:end="245:19">ch</name> <operator pos:start="245:21" pos:end="245:21">&lt;</operator> <name pos:start="245:23" pos:end="245:33"><name pos:start="245:23" pos:end="245:23">s</name><operator pos:start="245:24" pos:end="245:25">-&gt;</operator><name pos:start="245:26" pos:end="245:33">channels</name></name></expr>;</condition> <incr pos:start="245:36" pos:end="245:39"><expr pos:start="245:36" pos:end="245:39"><name pos:start="245:36" pos:end="245:37">ch</name><operator pos:start="245:38" pos:end="245:39">++</operator></expr></incr>)</control> <block pos:start="245:42" pos:end="257:5">{<block_content pos:start="247:9" pos:end="255:35">

        <if_stmt pos:start="247:9" pos:end="253:42"><if pos:start="247:9" pos:end="249:68">if <condition pos:start="247:12" pos:end="247:33">(<expr pos:start="247:13" pos:end="247:32"><name pos:start="247:13" pos:end="247:14">ch</name> <operator pos:start="247:16" pos:end="247:16">&lt;</operator> <name pos:start="247:18" pos:end="247:32"><name pos:start="247:18" pos:end="247:18">s</name><operator pos:start="247:19" pos:end="247:20">-&gt;</operator><name pos:start="247:21" pos:end="247:32">out_channels</name></name></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:68"><block_content pos:start="249:13" pos:end="249:68">

            <expr_stmt pos:start="249:13" pos:end="249:68"><expr pos:start="249:13" pos:end="249:67"><name pos:start="249:13" pos:end="249:38"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:21">outptr</name><index pos:start="249:22" pos:end="249:38">[<expr pos:start="249:23" pos:end="249:37"><name pos:start="249:23" pos:end="249:37"><name pos:start="249:23" pos:end="249:33">channel_map</name><index pos:start="249:34" pos:end="249:37">[<expr pos:start="249:35" pos:end="249:36"><name pos:start="249:35" pos:end="249:36">ch</name></expr>]</index></name></expr>]</index></name> <operator pos:start="249:40" pos:end="249:40">=</operator> <operator pos:start="249:42" pos:end="249:42">(</operator><name pos:start="249:43" pos:end="249:47">float</name> <operator pos:start="249:49" pos:end="249:49">*</operator><operator pos:start="249:50" pos:end="249:50">)</operator><name pos:start="249:51" pos:end="249:67"><name pos:start="249:51" pos:end="249:51">s</name><operator pos:start="249:52" pos:end="249:53">-&gt;</operator><name pos:start="249:54" pos:end="249:58">frame</name><operator pos:start="249:59" pos:end="249:59">.</operator><name pos:start="249:60" pos:end="249:63">data</name><index pos:start="249:64" pos:end="249:67">[<expr pos:start="249:65" pos:end="249:66"><name pos:start="249:65" pos:end="249:66">ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="251:9" pos:end="253:42">else<block type="pseudo" pos:start="253:13" pos:end="253:42"><block_content pos:start="253:13" pos:end="253:42">

            <expr_stmt pos:start="253:13" pos:end="253:42"><expr pos:start="253:13" pos:end="253:41"><name pos:start="253:13" pos:end="253:25"><name pos:start="253:13" pos:end="253:13">s</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:21">outptr</name><index pos:start="253:22" pos:end="253:25">[<expr pos:start="253:23" pos:end="253:24"><name pos:start="253:23" pos:end="253:24">ch</name></expr>]</index></name> <operator pos:start="253:27" pos:end="253:27">=</operator> <name pos:start="253:29" pos:end="253:41"><name pos:start="253:29" pos:end="253:29">s</name><operator pos:start="253:30" pos:end="253:31">-&gt;</operator><name pos:start="253:32" pos:end="253:37">output</name><index pos:start="253:38" pos:end="253:41">[<expr pos:start="253:39" pos:end="253:40"><name pos:start="253:39" pos:end="253:40">ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:35"><expr pos:start="255:9" pos:end="255:34"><name pos:start="255:9" pos:end="255:18"><name pos:start="255:9" pos:end="255:14">output</name><index pos:start="255:15" pos:end="255:18">[<expr pos:start="255:16" pos:end="255:17"><name pos:start="255:16" pos:end="255:17">ch</name></expr>]</index></name> <operator pos:start="255:20" pos:end="255:20">=</operator> <name pos:start="255:22" pos:end="255:34"><name pos:start="255:22" pos:end="255:22">s</name><operator pos:start="255:23" pos:end="255:24">-&gt;</operator><name pos:start="255:25" pos:end="255:30">output</name><index pos:start="255:31" pos:end="255:34">[<expr pos:start="255:32" pos:end="255:33"><name pos:start="255:32" pos:end="255:33">ch</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="259:5" pos:end="283:5">for <control pos:start="259:9" pos:end="259:45">(<init pos:start="259:10" pos:end="259:17"><expr pos:start="259:10" pos:end="259:16"><name pos:start="259:10" pos:end="259:12">blk</name> <operator pos:start="259:14" pos:end="259:14">=</operator> <literal type="number" pos:start="259:16" pos:end="259:16">0</literal></expr>;</init> <condition pos:start="259:19" pos:end="259:38"><expr pos:start="259:19" pos:end="259:37"><name pos:start="259:19" pos:end="259:21">blk</name> <operator pos:start="259:23" pos:end="259:23">&lt;</operator> <name pos:start="259:25" pos:end="259:37"><name pos:start="259:25" pos:end="259:25">s</name><operator pos:start="259:26" pos:end="259:27">-&gt;</operator><name pos:start="259:28" pos:end="259:37">num_blocks</name></name></expr>;</condition> <incr pos:start="259:40" pos:end="259:44"><expr pos:start="259:40" pos:end="259:44"><name pos:start="259:40" pos:end="259:42">blk</name><operator pos:start="259:43" pos:end="259:44">++</operator></expr></incr>)</control> <block pos:start="259:47" pos:end="283:5">{<block_content pos:start="261:9" pos:end="281:9">

        <if_stmt pos:start="261:9" pos:end="267:9"><if pos:start="261:9" pos:end="267:9">if <condition pos:start="261:12" pos:end="261:47">(<expr pos:start="261:13" pos:end="261:46"><operator pos:start="261:13" pos:end="261:13">!</operator><name pos:start="261:14" pos:end="261:16">err</name> <operator pos:start="261:18" pos:end="261:19">&amp;&amp;</operator> <call pos:start="261:21" pos:end="261:46"><name pos:start="261:21" pos:end="261:38">decode_audio_block</name><argument_list pos:start="261:39" pos:end="261:46">(<argument pos:start="261:40" pos:end="261:40"><expr pos:start="261:40" pos:end="261:40"><name pos:start="261:40" pos:end="261:40">s</name></expr></argument>, <argument pos:start="261:43" pos:end="261:45"><expr pos:start="261:43" pos:end="261:45"><name pos:start="261:43" pos:end="261:45">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="261:49" pos:end="267:9">{<block_content pos:start="263:13" pos:end="265:20">

            <expr_stmt pos:start="263:13" pos:end="263:76"><expr pos:start="263:13" pos:end="263:75"><call pos:start="263:13" pos:end="263:75"><name pos:start="263:13" pos:end="263:18">av_log</name><argument_list pos:start="263:19" pos:end="263:75">(<argument pos:start="263:20" pos:end="263:24"><expr pos:start="263:20" pos:end="263:24"><name pos:start="263:20" pos:end="263:24">avctx</name></expr></argument>, <argument pos:start="263:27" pos:end="263:38"><expr pos:start="263:27" pos:end="263:38"><name pos:start="263:27" pos:end="263:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="263:41" pos:end="263:74"><expr pos:start="263:41" pos:end="263:74"><literal type="string" pos:start="263:41" pos:end="263:74">"error decoding the audio block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:20"><expr pos:start="265:13" pos:end="265:19"><name pos:start="265:13" pos:end="265:15">err</name> <operator pos:start="265:17" pos:end="265:17">=</operator> <literal type="number" pos:start="265:19" pos:end="265:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="269:9" pos:end="273:69"><if pos:start="269:9" pos:end="273:69">if <condition pos:start="269:12" pos:end="269:16">(<expr pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:15">err</name></expr>)</condition><block type="pseudo" pos:start="271:13" pos:end="273:69"><block_content pos:start="271:13" pos:end="273:69">

            <for pos:start="271:13" pos:end="273:69">for <control pos:start="271:17" pos:end="271:52">(<init pos:start="271:18" pos:end="271:24"><expr pos:start="271:18" pos:end="271:23"><name pos:start="271:18" pos:end="271:19">ch</name> <operator pos:start="271:21" pos:end="271:21">=</operator> <literal type="number" pos:start="271:23" pos:end="271:23">0</literal></expr>;</init> <condition pos:start="271:26" pos:end="271:46"><expr pos:start="271:26" pos:end="271:45"><name pos:start="271:26" pos:end="271:27">ch</name> <operator pos:start="271:29" pos:end="271:29">&lt;</operator> <name pos:start="271:31" pos:end="271:45"><name pos:start="271:31" pos:end="271:31">s</name><operator pos:start="271:32" pos:end="271:33">-&gt;</operator><name pos:start="271:34" pos:end="271:45">out_channels</name></name></expr>;</condition> <incr pos:start="271:48" pos:end="271:51"><expr pos:start="271:48" pos:end="271:51"><name pos:start="271:48" pos:end="271:49">ch</name><operator pos:start="271:50" pos:end="271:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="273:17" pos:end="273:69"><block_content pos:start="273:17" pos:end="273:69">

                <expr_stmt pos:start="273:17" pos:end="273:69"><expr pos:start="273:17" pos:end="273:68"><call pos:start="273:17" pos:end="273:68"><name pos:start="273:17" pos:end="273:22">memcpy</name><argument_list pos:start="273:23" pos:end="273:68">(<argument pos:start="273:24" pos:end="273:49"><expr pos:start="273:24" pos:end="273:49"><name pos:start="273:24" pos:end="273:49"><name pos:start="273:24" pos:end="273:24">s</name><operator pos:start="273:25" pos:end="273:26">-&gt;</operator><name pos:start="273:27" pos:end="273:32">outptr</name><index pos:start="273:33" pos:end="273:49">[<expr pos:start="273:34" pos:end="273:48"><name pos:start="273:34" pos:end="273:48"><name pos:start="273:34" pos:end="273:44">channel_map</name><index pos:start="273:45" pos:end="273:48">[<expr pos:start="273:46" pos:end="273:47"><name pos:start="273:46" pos:end="273:47">ch</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="273:52" pos:end="273:61"><expr pos:start="273:52" pos:end="273:61"><name pos:start="273:52" pos:end="273:61"><name pos:start="273:52" pos:end="273:57">output</name><index pos:start="273:58" pos:end="273:61">[<expr pos:start="273:59" pos:end="273:60"><name pos:start="273:59" pos:end="273:60">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="273:64" pos:end="273:67"><expr pos:start="273:64" pos:end="273:67"><literal type="number" pos:start="273:64" pos:end="273:67">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

        <for pos:start="275:9" pos:end="281:9">for <control pos:start="275:13" pos:end="275:48">(<init pos:start="275:14" pos:end="275:20"><expr pos:start="275:14" pos:end="275:19"><name pos:start="275:14" pos:end="275:15">ch</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <literal type="number" pos:start="275:19" pos:end="275:19">0</literal></expr>;</init> <condition pos:start="275:22" pos:end="275:42"><expr pos:start="275:22" pos:end="275:41"><name pos:start="275:22" pos:end="275:23">ch</name> <operator pos:start="275:25" pos:end="275:25">&lt;</operator> <name pos:start="275:27" pos:end="275:41"><name pos:start="275:27" pos:end="275:27">s</name><operator pos:start="275:28" pos:end="275:29">-&gt;</operator><name pos:start="275:30" pos:end="275:41">out_channels</name></name></expr>;</condition> <incr pos:start="275:44" pos:end="275:47"><expr pos:start="275:44" pos:end="275:47"><name pos:start="275:44" pos:end="275:45">ch</name><operator pos:start="275:46" pos:end="275:47">++</operator></expr></incr>)</control> <block pos:start="275:50" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:57">

            <expr_stmt pos:start="277:13" pos:end="277:52"><expr pos:start="277:13" pos:end="277:51"><name pos:start="277:13" pos:end="277:22"><name pos:start="277:13" pos:end="277:18">output</name><index pos:start="277:19" pos:end="277:22">[<expr pos:start="277:20" pos:end="277:21"><name pos:start="277:20" pos:end="277:21">ch</name></expr>]</index></name> <operator pos:start="277:24" pos:end="277:24">=</operator> <name pos:start="277:26" pos:end="277:51"><name pos:start="277:26" pos:end="277:26">s</name><operator pos:start="277:27" pos:end="277:28">-&gt;</operator><name pos:start="277:29" pos:end="277:34">outptr</name><index pos:start="277:35" pos:end="277:51">[<expr pos:start="277:36" pos:end="277:50"><name pos:start="277:36" pos:end="277:50"><name pos:start="277:36" pos:end="277:46">channel_map</name><index pos:start="277:47" pos:end="277:50">[<expr pos:start="277:48" pos:end="277:49"><name pos:start="277:48" pos:end="277:49">ch</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:57"><expr pos:start="279:13" pos:end="279:56"><name pos:start="279:13" pos:end="279:38"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:21">outptr</name><index pos:start="279:22" pos:end="279:38">[<expr pos:start="279:23" pos:end="279:37"><name pos:start="279:23" pos:end="279:37"><name pos:start="279:23" pos:end="279:33">channel_map</name><index pos:start="279:34" pos:end="279:37">[<expr pos:start="279:35" pos:end="279:36"><name pos:start="279:35" pos:end="279:36">ch</name></expr>]</index></name></expr>]</index></name> <operator pos:start="279:40" pos:end="279:41">+=</operator> <name pos:start="279:43" pos:end="279:56">AC3_BLOCK_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="287:5" pos:end="287:78"><expr pos:start="287:5" pos:end="287:77"><name pos:start="287:5" pos:end="287:31"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:12">frame</name><operator pos:start="287:13" pos:end="287:13">.</operator><name pos:start="287:14" pos:end="287:31">decode_error_flags</name></name> <operator pos:start="287:33" pos:end="287:33">=</operator> <ternary pos:start="287:35" pos:end="287:77"><condition pos:start="287:35" pos:end="287:39"><expr pos:start="287:35" pos:end="287:37"><name pos:start="287:35" pos:end="287:37">err</name></expr> ?</condition><then pos:start="287:41" pos:end="287:73"> <expr pos:start="287:41" pos:end="287:73"><name pos:start="287:41" pos:end="287:73">FF_DECODE_ERROR_INVALID_BITSTREAM</name></expr> </then><else pos:start="287:75" pos:end="287:77">: <expr pos:start="287:77" pos:end="287:77"><literal type="number" pos:start="287:77" pos:end="287:77">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:61">/* keep last block for error concealment in next frame */</comment>

    <for pos:start="293:5" pos:end="295:48">for <control pos:start="293:9" pos:end="293:44">(<init pos:start="293:10" pos:end="293:16"><expr pos:start="293:10" pos:end="293:15"><name pos:start="293:10" pos:end="293:11">ch</name> <operator pos:start="293:13" pos:end="293:13">=</operator> <literal type="number" pos:start="293:15" pos:end="293:15">0</literal></expr>;</init> <condition pos:start="293:18" pos:end="293:38"><expr pos:start="293:18" pos:end="293:37"><name pos:start="293:18" pos:end="293:19">ch</name> <operator pos:start="293:21" pos:end="293:21">&lt;</operator> <name pos:start="293:23" pos:end="293:37"><name pos:start="293:23" pos:end="293:23">s</name><operator pos:start="293:24" pos:end="293:25">-&gt;</operator><name pos:start="293:26" pos:end="293:37">out_channels</name></name></expr>;</condition> <incr pos:start="293:40" pos:end="293:43"><expr pos:start="293:40" pos:end="293:43"><name pos:start="293:40" pos:end="293:41">ch</name><operator pos:start="293:42" pos:end="293:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="295:9" pos:end="295:48"><block_content pos:start="295:9" pos:end="295:48">

        <expr_stmt pos:start="295:9" pos:end="295:48"><expr pos:start="295:9" pos:end="295:47"><call pos:start="295:9" pos:end="295:47"><name pos:start="295:9" pos:end="295:14">memcpy</name><argument_list pos:start="295:15" pos:end="295:47">(<argument pos:start="295:16" pos:end="295:28"><expr pos:start="295:16" pos:end="295:28"><name pos:start="295:16" pos:end="295:28"><name pos:start="295:16" pos:end="295:16">s</name><operator pos:start="295:17" pos:end="295:18">-&gt;</operator><name pos:start="295:19" pos:end="295:24">output</name><index pos:start="295:25" pos:end="295:28">[<expr pos:start="295:26" pos:end="295:27"><name pos:start="295:26" pos:end="295:27">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="295:31" pos:end="295:40"><expr pos:start="295:31" pos:end="295:40"><name pos:start="295:31" pos:end="295:40"><name pos:start="295:31" pos:end="295:36">output</name><index pos:start="295:37" pos:end="295:40">[<expr pos:start="295:38" pos:end="295:39"><name pos:start="295:38" pos:end="295:39">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="295:43" pos:end="295:46"><expr pos:start="295:43" pos:end="295:46"><literal type="number" pos:start="295:43" pos:end="295:46">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="299:5" pos:end="299:25"><expr pos:start="299:5" pos:end="299:24"><operator pos:start="299:5" pos:end="299:5">*</operator><name pos:start="299:6" pos:end="299:18">got_frame_ptr</name>   <operator pos:start="299:22" pos:end="299:22">=</operator> <literal type="number" pos:start="299:24" pos:end="299:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:32"><expr pos:start="301:5" pos:end="301:31"><operator pos:start="301:5" pos:end="301:5">*</operator><operator pos:start="301:6" pos:end="301:6">(</operator><name pos:start="301:7" pos:end="301:13">AVFrame</name> <operator pos:start="301:15" pos:end="301:15">*</operator><operator pos:start="301:16" pos:end="301:16">)</operator><name pos:start="301:17" pos:end="301:20">data</name> <operator pos:start="301:22" pos:end="301:22">=</operator> <name pos:start="301:24" pos:end="301:31"><name pos:start="301:24" pos:end="301:24">s</name><operator pos:start="301:25" pos:end="301:26">-&gt;</operator><name pos:start="301:27" pos:end="301:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="305:5" pos:end="305:42">return <expr pos:start="305:12" pos:end="305:41"><call pos:start="305:12" pos:end="305:41"><name pos:start="305:12" pos:end="305:16">FFMIN</name><argument_list pos:start="305:17" pos:end="305:41">(<argument pos:start="305:18" pos:end="305:25"><expr pos:start="305:18" pos:end="305:25"><name pos:start="305:18" pos:end="305:25">buf_size</name></expr></argument>, <argument pos:start="305:28" pos:end="305:40"><expr pos:start="305:28" pos:end="305:40"><name pos:start="305:28" pos:end="305:40"><name pos:start="305:28" pos:end="305:28">s</name><operator pos:start="305:29" pos:end="305:30">-&gt;</operator><name pos:start="305:31" pos:end="305:40">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
