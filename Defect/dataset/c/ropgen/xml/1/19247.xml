<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19247.c" pos:tabs="8"><function pos:start="1:1" pos:end="393:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">inline</specifier> <specifier pos:start="1:8" pos:end="1:13">static</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hcscale</name>)<parameter_list pos:start="1:35" pos:end="7:76">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dst</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:62">dstWidth</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:77">src1</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:92"><decl pos:start="1:80" pos:end="1:92"><type pos:start="1:80" pos:end="1:92"><name pos:start="1:80" pos:end="1:86">uint8_t</name> <modifier pos:start="1:88" pos:end="1:88">*</modifier></type><name pos:start="1:89" pos:end="1:92">src2</name></decl></parameter>,

				   <parameter pos:start="3:36" pos:end="3:43"><decl pos:start="3:36" pos:end="3:43"><type pos:start="3:36" pos:end="3:43"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:43">srcW</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">xInc</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:64"><decl pos:start="3:56" pos:end="3:64"><type pos:start="3:56" pos:end="3:64"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:64">flags</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:83"><decl pos:start="3:67" pos:end="3:83"><type pos:start="3:67" pos:end="3:83"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:83">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:86" pos:end="3:104"><decl pos:start="3:86" pos:end="3:104"><type pos:start="3:86" pos:end="3:104"><name pos:start="3:86" pos:end="3:92">int16_t</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:104">hChrFilter</name></decl></parameter>,

				   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hChrFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hChrFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:96"><decl pos:start="5:80" pos:end="5:96"><type pos:start="5:80" pos:end="5:96"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:96">funnyUVCode</name></decl></parameter>,

				   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="393:1">{<block_content pos:start="11:5" pos:end="391:4">

    <if_stmt pos:start="11:5" pos:end="106:0"><if pos:start="11:5" pos:end="21:5">if<condition pos:start="11:7" pos:end="11:30">(<expr pos:start="11:8" pos:end="11:29"><name pos:start="11:8" pos:end="11:16">srcFormat</name><operator pos:start="11:17" pos:end="11:18">==</operator><name pos:start="11:19" pos:end="11:29">IMGFMT_YUY2</name></expr>)</condition>

    <block pos:start="13:5" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:36">

	<expr_stmt pos:start="15:9" pos:end="15:84"><expr pos:start="15:9" pos:end="15:83"><call pos:start="15:9" pos:end="15:83"><call pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:14">RENAME</name><argument_list pos:start="15:15" pos:end="15:24">(<argument pos:start="15:16" pos:end="15:23"><expr pos:start="15:16" pos:end="15:23"><name pos:start="15:16" pos:end="15:23">yuy2ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="15:25" pos:end="15:83">(<argument pos:start="15:26" pos:end="15:41"><expr pos:start="15:26" pos:end="15:41"><name pos:start="15:26" pos:end="15:41">formatConvBuffer</name></expr></argument>, <argument pos:start="15:44" pos:end="15:64"><expr pos:start="15:44" pos:end="15:64"><name pos:start="15:44" pos:end="15:59">formatConvBuffer</name><operator pos:start="15:60" pos:end="15:60">+</operator><literal type="number" pos:start="15:61" pos:end="15:64">2048</literal></expr></argument>, <argument pos:start="15:67" pos:end="15:70"><expr pos:start="15:67" pos:end="15:70"><name pos:start="15:67" pos:end="15:70">src1</name></expr></argument>, <argument pos:start="15:73" pos:end="15:76"><expr pos:start="15:73" pos:end="15:76"><name pos:start="15:73" pos:end="15:76">src2</name></expr></argument>, <argument pos:start="15:79" pos:end="15:82"><expr pos:start="15:79" pos:end="15:82"><name pos:start="15:79" pos:end="15:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:12">src1</name><operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:12">src2</name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:30">formatConvBuffer</name><operator pos:start="19:31" pos:end="19:31">+</operator><literal type="number" pos:start="19:32" pos:end="19:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="23:5" pos:end="33:5">else if<condition pos:start="23:12" pos:end="23:36">(<expr pos:start="23:13" pos:end="23:35"><name pos:start="23:13" pos:end="23:21">srcFormat</name><operator pos:start="23:22" pos:end="23:23">==</operator><name pos:start="23:24" pos:end="23:35">IMGFMT_BGR32</name></expr>)</condition>

    <block pos:start="25:5" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:36">

	<expr_stmt pos:start="27:9" pos:end="27:85"><expr pos:start="27:9" pos:end="27:84"><call pos:start="27:9" pos:end="27:84"><call pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:14">RENAME</name><argument_list pos:start="27:15" pos:end="27:25">(<argument pos:start="27:16" pos:end="27:24"><expr pos:start="27:16" pos:end="27:24"><name pos:start="27:16" pos:end="27:24">bgr32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="27:26" pos:end="27:84">(<argument pos:start="27:27" pos:end="27:42"><expr pos:start="27:27" pos:end="27:42"><name pos:start="27:27" pos:end="27:42">formatConvBuffer</name></expr></argument>, <argument pos:start="27:45" pos:end="27:65"><expr pos:start="27:45" pos:end="27:65"><name pos:start="27:45" pos:end="27:60">formatConvBuffer</name><operator pos:start="27:61" pos:end="27:61">+</operator><literal type="number" pos:start="27:62" pos:end="27:65">2048</literal></expr></argument>, <argument pos:start="27:68" pos:end="27:71"><expr pos:start="27:68" pos:end="27:71"><name pos:start="27:68" pos:end="27:71">src1</name></expr></argument>, <argument pos:start="27:74" pos:end="27:77"><expr pos:start="27:74" pos:end="27:77"><name pos:start="27:74" pos:end="27:77">src2</name></expr></argument>, <argument pos:start="27:80" pos:end="27:83"><expr pos:start="27:80" pos:end="27:83"><name pos:start="27:80" pos:end="27:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:12">src1</name><operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="31:9" pos:end="31:36"><expr pos:start="31:9" pos:end="31:35"><name pos:start="31:9" pos:end="31:12">src2</name><operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:30">formatConvBuffer</name><operator pos:start="31:31" pos:end="31:31">+</operator><literal type="number" pos:start="31:32" pos:end="31:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="35:5" pos:end="45:5">else if<condition pos:start="35:12" pos:end="35:36">(<expr pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:21">srcFormat</name><operator pos:start="35:22" pos:end="35:23">==</operator><name pos:start="35:24" pos:end="35:35">IMGFMT_BGR24</name></expr>)</condition>

    <block pos:start="37:5" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:36">

	<expr_stmt pos:start="39:9" pos:end="39:85"><expr pos:start="39:9" pos:end="39:84"><call pos:start="39:9" pos:end="39:84"><call pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:14">RENAME</name><argument_list pos:start="39:15" pos:end="39:25">(<argument pos:start="39:16" pos:end="39:24"><expr pos:start="39:16" pos:end="39:24"><name pos:start="39:16" pos:end="39:24">bgr24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="39:26" pos:end="39:84">(<argument pos:start="39:27" pos:end="39:42"><expr pos:start="39:27" pos:end="39:42"><name pos:start="39:27" pos:end="39:42">formatConvBuffer</name></expr></argument>, <argument pos:start="39:45" pos:end="39:65"><expr pos:start="39:45" pos:end="39:65"><name pos:start="39:45" pos:end="39:60">formatConvBuffer</name><operator pos:start="39:61" pos:end="39:61">+</operator><literal type="number" pos:start="39:62" pos:end="39:65">2048</literal></expr></argument>, <argument pos:start="39:68" pos:end="39:71"><expr pos:start="39:68" pos:end="39:71"><name pos:start="39:68" pos:end="39:71">src1</name></expr></argument>, <argument pos:start="39:74" pos:end="39:77"><expr pos:start="39:74" pos:end="39:77"><name pos:start="39:74" pos:end="39:77">src2</name></expr></argument>, <argument pos:start="39:80" pos:end="39:83"><expr pos:start="39:80" pos:end="39:83"><name pos:start="39:80" pos:end="39:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:12">src1</name><operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:12">src2</name><operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:30">formatConvBuffer</name><operator pos:start="43:31" pos:end="43:31">+</operator><literal type="number" pos:start="43:32" pos:end="43:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="47:5" pos:end="57:5">else if<condition pos:start="47:12" pos:end="47:36">(<expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:21">srcFormat</name><operator pos:start="47:22" pos:end="47:23">==</operator><name pos:start="47:24" pos:end="47:35">IMGFMT_BGR16</name></expr>)</condition>

    <block pos:start="49:5" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:36">

	<expr_stmt pos:start="51:9" pos:end="51:85"><expr pos:start="51:9" pos:end="51:84"><call pos:start="51:9" pos:end="51:84"><call pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:14">RENAME</name><argument_list pos:start="51:15" pos:end="51:25">(<argument pos:start="51:16" pos:end="51:24"><expr pos:start="51:16" pos:end="51:24"><name pos:start="51:16" pos:end="51:24">bgr16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="51:26" pos:end="51:84">(<argument pos:start="51:27" pos:end="51:42"><expr pos:start="51:27" pos:end="51:42"><name pos:start="51:27" pos:end="51:42">formatConvBuffer</name></expr></argument>, <argument pos:start="51:45" pos:end="51:65"><expr pos:start="51:45" pos:end="51:65"><name pos:start="51:45" pos:end="51:60">formatConvBuffer</name><operator pos:start="51:61" pos:end="51:61">+</operator><literal type="number" pos:start="51:62" pos:end="51:65">2048</literal></expr></argument>, <argument pos:start="51:68" pos:end="51:71"><expr pos:start="51:68" pos:end="51:71"><name pos:start="51:68" pos:end="51:71">src1</name></expr></argument>, <argument pos:start="51:74" pos:end="51:77"><expr pos:start="51:74" pos:end="51:77"><name pos:start="51:74" pos:end="51:77">src2</name></expr></argument>, <argument pos:start="51:80" pos:end="51:83"><expr pos:start="51:80" pos:end="51:83"><name pos:start="51:80" pos:end="51:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="53:9" pos:end="53:31"><expr pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:12">src1</name><operator pos:start="53:13" pos:end="53:13">=</operator> <name pos:start="53:15" pos:end="53:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:12">src2</name><operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:30">formatConvBuffer</name><operator pos:start="55:31" pos:end="55:31">+</operator><literal type="number" pos:start="55:32" pos:end="55:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="59:5" pos:end="69:5">else if<condition pos:start="59:12" pos:end="59:36">(<expr pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:21">srcFormat</name><operator pos:start="59:22" pos:end="59:23">==</operator><name pos:start="59:24" pos:end="59:35">IMGFMT_BGR15</name></expr>)</condition>

    <block pos:start="61:5" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:36">

	<expr_stmt pos:start="63:9" pos:end="63:85"><expr pos:start="63:9" pos:end="63:84"><call pos:start="63:9" pos:end="63:84"><call pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:14">RENAME</name><argument_list pos:start="63:15" pos:end="63:25">(<argument pos:start="63:16" pos:end="63:24"><expr pos:start="63:16" pos:end="63:24"><name pos:start="63:16" pos:end="63:24">bgr15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="63:26" pos:end="63:84">(<argument pos:start="63:27" pos:end="63:42"><expr pos:start="63:27" pos:end="63:42"><name pos:start="63:27" pos:end="63:42">formatConvBuffer</name></expr></argument>, <argument pos:start="63:45" pos:end="63:65"><expr pos:start="63:45" pos:end="63:65"><name pos:start="63:45" pos:end="63:60">formatConvBuffer</name><operator pos:start="63:61" pos:end="63:61">+</operator><literal type="number" pos:start="63:62" pos:end="63:65">2048</literal></expr></argument>, <argument pos:start="63:68" pos:end="63:71"><expr pos:start="63:68" pos:end="63:71"><name pos:start="63:68" pos:end="63:71">src1</name></expr></argument>, <argument pos:start="63:74" pos:end="63:77"><expr pos:start="63:74" pos:end="63:77"><name pos:start="63:74" pos:end="63:77">src2</name></expr></argument>, <argument pos:start="63:80" pos:end="63:83"><expr pos:start="63:80" pos:end="63:83"><name pos:start="63:80" pos:end="63:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="65:9" pos:end="65:31"><expr pos:start="65:9" pos:end="65:30"><name pos:start="65:9" pos:end="65:12">src1</name><operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:12">src2</name><operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:30">formatConvBuffer</name><operator pos:start="67:31" pos:end="67:31">+</operator><literal type="number" pos:start="67:32" pos:end="67:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="71:5" pos:end="81:5">else if<condition pos:start="71:12" pos:end="71:36">(<expr pos:start="71:13" pos:end="71:35"><name pos:start="71:13" pos:end="71:21">srcFormat</name><operator pos:start="71:22" pos:end="71:23">==</operator><name pos:start="71:24" pos:end="71:35">IMGFMT_RGB32</name></expr>)</condition>

    <block pos:start="73:5" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:36">

	<expr_stmt pos:start="75:9" pos:end="75:85"><expr pos:start="75:9" pos:end="75:84"><call pos:start="75:9" pos:end="75:84"><call pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:14">RENAME</name><argument_list pos:start="75:15" pos:end="75:25">(<argument pos:start="75:16" pos:end="75:24"><expr pos:start="75:16" pos:end="75:24"><name pos:start="75:16" pos:end="75:24">rgb32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="75:26" pos:end="75:84">(<argument pos:start="75:27" pos:end="75:42"><expr pos:start="75:27" pos:end="75:42"><name pos:start="75:27" pos:end="75:42">formatConvBuffer</name></expr></argument>, <argument pos:start="75:45" pos:end="75:65"><expr pos:start="75:45" pos:end="75:65"><name pos:start="75:45" pos:end="75:60">formatConvBuffer</name><operator pos:start="75:61" pos:end="75:61">+</operator><literal type="number" pos:start="75:62" pos:end="75:65">2048</literal></expr></argument>, <argument pos:start="75:68" pos:end="75:71"><expr pos:start="75:68" pos:end="75:71"><name pos:start="75:68" pos:end="75:71">src1</name></expr></argument>, <argument pos:start="75:74" pos:end="75:77"><expr pos:start="75:74" pos:end="75:77"><name pos:start="75:74" pos:end="75:77">src2</name></expr></argument>, <argument pos:start="75:80" pos:end="75:83"><expr pos:start="75:80" pos:end="75:83"><name pos:start="75:80" pos:end="75:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:12">src1</name><operator pos:start="77:13" pos:end="77:13">=</operator> <name pos:start="77:15" pos:end="77:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:12">src2</name><operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:30">formatConvBuffer</name><operator pos:start="79:31" pos:end="79:31">+</operator><literal type="number" pos:start="79:32" pos:end="79:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="83:5" pos:end="93:5">else if<condition pos:start="83:12" pos:end="83:36">(<expr pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:21">srcFormat</name><operator pos:start="83:22" pos:end="83:23">==</operator><name pos:start="83:24" pos:end="83:35">IMGFMT_RGB24</name></expr>)</condition>

    <block pos:start="85:5" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:36">

	<expr_stmt pos:start="87:9" pos:end="87:85"><expr pos:start="87:9" pos:end="87:84"><call pos:start="87:9" pos:end="87:84"><call pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:14">RENAME</name><argument_list pos:start="87:15" pos:end="87:25">(<argument pos:start="87:16" pos:end="87:24"><expr pos:start="87:16" pos:end="87:24"><name pos:start="87:16" pos:end="87:24">rgb24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="87:26" pos:end="87:84">(<argument pos:start="87:27" pos:end="87:42"><expr pos:start="87:27" pos:end="87:42"><name pos:start="87:27" pos:end="87:42">formatConvBuffer</name></expr></argument>, <argument pos:start="87:45" pos:end="87:65"><expr pos:start="87:45" pos:end="87:65"><name pos:start="87:45" pos:end="87:60">formatConvBuffer</name><operator pos:start="87:61" pos:end="87:61">+</operator><literal type="number" pos:start="87:62" pos:end="87:65">2048</literal></expr></argument>, <argument pos:start="87:68" pos:end="87:71"><expr pos:start="87:68" pos:end="87:71"><name pos:start="87:68" pos:end="87:71">src1</name></expr></argument>, <argument pos:start="87:74" pos:end="87:77"><expr pos:start="87:74" pos:end="87:77"><name pos:start="87:74" pos:end="87:77">src2</name></expr></argument>, <argument pos:start="87:80" pos:end="87:83"><expr pos:start="87:80" pos:end="87:83"><name pos:start="87:80" pos:end="87:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:12">src1</name><operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="91:9" pos:end="91:36"><expr pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:12">src2</name><operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:30">formatConvBuffer</name><operator pos:start="91:31" pos:end="91:31">+</operator><literal type="number" pos:start="91:32" pos:end="91:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="95:5" pos:end="106:0">else if<condition pos:start="95:12" pos:end="95:30">(<expr pos:start="95:13" pos:end="95:29"><call pos:start="95:13" pos:end="95:29"><name pos:start="95:13" pos:end="95:18">isGray</name><argument_list pos:start="95:19" pos:end="95:29">(<argument pos:start="95:20" pos:end="95:28"><expr pos:start="95:20" pos:end="95:28"><name pos:start="95:20" pos:end="95:28">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="97:5" pos:end="106:0">{<block_content pos:start="99:9" pos:end="99:15">

    	<return pos:start="99:9" pos:end="99:15">return;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="105:1" pos:end="105:15">#<cpp:directive pos:start="105:2" pos:end="105:6">ifdef</cpp:directive> <name pos:start="105:8" pos:end="105:15">HAVE_MMX</name></cpp:ifdef>

	<comment type="line" pos:start="107:9" pos:end="107:90">// use the new MMX scaler if th mmx2 cant be used (its faster than the x86asm one)</comment>

    <if_stmt pos:start="109:5" pos:end="391:4"><if pos:start="109:5" pos:end="391:4">if<condition pos:start="109:7" pos:end="112:0">(<expr pos:start="109:8" pos:end="109:53"><operator pos:start="109:8" pos:end="109:8">!</operator><operator pos:start="109:9" pos:end="109:9">(</operator><name pos:start="109:10" pos:end="109:14">flags</name><operator pos:start="109:15" pos:end="109:15">&amp;</operator><name pos:start="109:16" pos:end="109:32">SWS_FAST_BILINEAR</name><operator pos:start="109:33" pos:end="109:33">)</operator> <operator pos:start="109:35" pos:end="109:36">||</operator> <operator pos:start="109:38" pos:end="109:38">(</operator><operator pos:start="109:39" pos:end="109:39">!</operator><name pos:start="109:40" pos:end="109:52">canMMX2BeUsed</name><operator pos:start="109:53" pos:end="109:53">)</operator></expr>)</condition><block type="pseudo" pos:start="113:5" pos:end="391:4"><block_content pos:start="113:5" pos:end="391:4">

<cpp:else pos:start="111:1" pos:end="111:5">#<cpp:directive pos:start="111:2" pos:end="111:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="113:5" pos:end="391:4"><if pos:start="113:5" pos:end="123:5">if<condition pos:start="113:7" pos:end="116:0">(<expr pos:start="113:8" pos:end="113:33"><operator pos:start="113:8" pos:end="113:8">!</operator><operator pos:start="113:9" pos:end="113:9">(</operator><name pos:start="113:10" pos:end="113:14">flags</name><operator pos:start="113:15" pos:end="113:15">&amp;</operator><name pos:start="113:16" pos:end="113:32">SWS_FAST_BILINEAR</name><operator pos:start="113:33" pos:end="113:33">)</operator></expr>)</condition>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

    <block pos:start="117:5" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:104">

    	<function_decl pos:start="119:9" pos:end="119:104"><type pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:14">RENAME</name></type>(<name pos:start="119:16" pos:end="119:21">hScale</name>)<parameter_list pos:start="119:23" pos:end="119:103">(<parameter pos:start="119:24" pos:end="119:26"><decl pos:start="119:24" pos:end="119:26"><type pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:26">dst</name></type></decl></parameter>     , <parameter pos:start="119:34" pos:end="119:41"><decl pos:start="119:34" pos:end="119:41"><type pos:start="119:34" pos:end="119:41"><name pos:start="119:34" pos:end="119:41">dstWidth</name></type></decl></parameter>, <parameter pos:start="119:44" pos:end="119:47"><decl pos:start="119:44" pos:end="119:47"><type pos:start="119:44" pos:end="119:47"><name pos:start="119:44" pos:end="119:47">src1</name></type></decl></parameter>, <parameter pos:start="119:50" pos:end="119:53"><decl pos:start="119:50" pos:end="119:53"><type pos:start="119:50" pos:end="119:53"><name pos:start="119:50" pos:end="119:53">srcW</name></type></decl></parameter>, <parameter pos:start="119:56" pos:end="119:59"><decl pos:start="119:56" pos:end="119:59"><type pos:start="119:56" pos:end="119:59"><name pos:start="119:56" pos:end="119:59">xInc</name></type></decl></parameter>, <parameter pos:start="119:62" pos:end="119:71"><decl pos:start="119:62" pos:end="119:71"><type pos:start="119:62" pos:end="119:71"><name pos:start="119:62" pos:end="119:71">hChrFilter</name></type></decl></parameter>, <parameter pos:start="119:74" pos:end="119:86"><decl pos:start="119:74" pos:end="119:86"><type pos:start="119:74" pos:end="119:86"><name pos:start="119:74" pos:end="119:86">hChrFilterPos</name></type></decl></parameter>, <parameter pos:start="119:89" pos:end="119:102"><decl pos:start="119:89" pos:end="119:102"><type pos:start="119:89" pos:end="119:102"><name pos:start="119:89" pos:end="119:102">hChrFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

    	<expr_stmt pos:start="121:9" pos:end="121:104"><expr pos:start="121:9" pos:end="121:103"><call pos:start="121:9" pos:end="121:103"><call pos:start="121:9" pos:end="121:22"><name pos:start="121:9" pos:end="121:14">RENAME</name><argument_list pos:start="121:15" pos:end="121:22">(<argument pos:start="121:16" pos:end="121:21"><expr pos:start="121:16" pos:end="121:21"><name pos:start="121:16" pos:end="121:21">hScale</name></expr></argument>)</argument_list></call><argument_list pos:start="121:23" pos:end="121:103">(<argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:26">dst</name><operator pos:start="121:27" pos:end="121:27">+</operator><literal type="number" pos:start="121:28" pos:end="121:31">2048</literal></expr></argument>, <argument pos:start="121:34" pos:end="121:41"><expr pos:start="121:34" pos:end="121:41"><name pos:start="121:34" pos:end="121:41">dstWidth</name></expr></argument>, <argument pos:start="121:44" pos:end="121:47"><expr pos:start="121:44" pos:end="121:47"><name pos:start="121:44" pos:end="121:47">src2</name></expr></argument>, <argument pos:start="121:50" pos:end="121:53"><expr pos:start="121:50" pos:end="121:53"><name pos:start="121:50" pos:end="121:53">srcW</name></expr></argument>, <argument pos:start="121:56" pos:end="121:59"><expr pos:start="121:56" pos:end="121:59"><name pos:start="121:56" pos:end="121:59">xInc</name></expr></argument>, <argument pos:start="121:62" pos:end="121:71"><expr pos:start="121:62" pos:end="121:71"><name pos:start="121:62" pos:end="121:71">hChrFilter</name></expr></argument>, <argument pos:start="121:74" pos:end="121:86"><expr pos:start="121:74" pos:end="121:86"><name pos:start="121:74" pos:end="121:86">hChrFilterPos</name></expr></argument>, <argument pos:start="121:89" pos:end="121:102"><expr pos:start="121:89" pos:end="121:102"><name pos:start="121:89" pos:end="121:102">hChrFilterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="125:5" pos:end="391:4">else <comment type="line" pos:start="125:10" pos:end="125:50">// Fast Bilinear upscale / crap downscale</comment>

    <block pos:start="127:5" pos:end="391:4">{<block_content pos:start="133:9" pos:end="390:0">

<cpp:ifdef pos:start="129:1" pos:end="129:15">#<cpp:directive pos:start="129:2" pos:end="129:6">ifdef</cpp:directive> <name pos:start="129:8" pos:end="129:15">ARCH_X86</name></cpp:ifdef>

<cpp:ifdef pos:start="131:1" pos:end="131:16">#<cpp:directive pos:start="131:2" pos:end="131:6">ifdef</cpp:directive> <name pos:start="131:8" pos:end="131:16">HAVE_MMX2</name></cpp:ifdef>

	<decl_stmt pos:start="133:9" pos:end="133:14"><decl pos:start="133:9" pos:end="133:13"><type pos:start="133:9" pos:end="133:11"><name pos:start="133:9" pos:end="133:11">int</name></type> <name pos:start="133:13" pos:end="133:13">i</name></decl>;</decl_stmt>

	<if_stmt pos:start="135:9" pos:end="360:0"><if pos:start="135:9" pos:end="271:9">if<condition pos:start="135:11" pos:end="135:25">(<expr pos:start="135:12" pos:end="135:24"><name pos:start="135:12" pos:end="135:24">canMMX2BeUsed</name></expr>)</condition>

	<block pos:start="137:9" pos:end="271:9">{<block_content pos:start="139:17" pos:end="269:17">

		<asm pos:start="139:17" pos:end="257:10">asm <specifier pos:start="139:21" pos:end="139:28">volatile</specifier>(

		"pxor %%mm7, %%mm7		\n\t"

		"pxor %%mm2, %%mm2		\n\t" <comment type="line" pos:start="143:55" pos:end="143:65">// 2*xalpha</comment>

		"movd %5, %%mm6			\n\t" <comment type="line" pos:start="145:55" pos:end="145:68">// xInc&amp;0xFFFF</comment>

		"punpcklwd %%mm6, %%mm6		\n\t"

		"punpcklwd %%mm6, %%mm6		\n\t"

		"movq %%mm6, %%mm2		\n\t"

		"psllq $16, %%mm2		\n\t"

		"paddw %%mm6, %%mm2		\n\t"

		"psllq $16, %%mm2		\n\t"

		"paddw %%mm6, %%mm2		\n\t"

		"psllq $16, %%mm2		\n\t" <comment type="line" pos:start="161:55" pos:end="161:93">//0,t,2t,3t		t=xInc&amp;0xFFFF</comment>

		"movq %%mm2, %%mm4		\n\t"

		"movd %4, %%mm6			\n\t" <comment type="line" pos:start="165:55" pos:end="165:71">//(xInc*4)&amp;0xFFFF</comment>

		"punpcklwd %%mm6, %%mm6		\n\t"

		"punpcklwd %%mm6, %%mm6		\n\t"

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="171:55" pos:end="171:58">// i</comment>

		"movl %0, %%esi			\n\t" <comment type="line" pos:start="173:55" pos:end="173:60">// src</comment>

		"movl %1, %%edi			\n\t" <comment type="line" pos:start="175:55" pos:end="175:61">// buf1</comment>

		"movl %3, %%edx			\n\t" <comment type="line" pos:start="177:55" pos:end="177:69">// (xInc*4)&gt;&gt;16</comment>

		"xorl %%ecx, %%ecx		\n\t"

		"xorl %%ebx, %%ebx		\n\t"

		"movw %4, %%bx			\n\t" <comment type="line" pos:start="183:55" pos:end="183:72">// (xInc*4)&amp;0xFFFF</comment>



<cpp:define pos:start="187:1" pos:end="199:61">#<cpp:directive pos:start="187:2" pos:end="187:7">define</cpp:directive> <cpp:macro pos:start="187:9" pos:end="187:19"><name pos:start="187:9" pos:end="187:19">FUNNYUVCODE</name></cpp:macro> \

			<cpp:value pos:start="189:25" pos:end="199:61">PREFETCH" 1024(%%esi)		\n\t"\

			PREFETCH" 1056(%%esi)		\n\t"\

			PREFETCH" 1088(%%esi)		\n\t"\

			"call *%7			\n\t"\

			"movq %%mm4, %%mm2	\n\t"\

			"xorl %%ecx, %%ecx		\n\t"</cpp:value></cpp:define>



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="221:55" pos:end="221:58">// i</comment>

		"movl %6, %%esi			\n\t" <comment type="line" pos:start="223:55" pos:end="223:60">// src</comment>

		"movl %1, %%edi			\n\t" <comment type="line" pos:start="225:55" pos:end="225:61">// buf1</comment>

		"addl $4096, %%edi		\n\t"



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE



FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE

FUNNYUVCODE



		:: "m" (src1), "m" (dst), "m" (dstWidth), "m" ((xInc*4)&gt;&gt;16),

		  "m" ((xInc*4)&amp;0xFFFF), "m" (xInc&amp;0xFFFF), "m" (src2), "m" (funnyUVCode)

		: "%eax", "%ebx", "%ecx", "%edx", "%esi", "%edi"

	);</asm>

		<for pos:start="259:17" pos:end="269:17">for<control pos:start="259:20" pos:end="259:61">(<init pos:start="259:21" pos:end="259:33"><expr pos:start="259:21" pos:end="259:32"><name pos:start="259:21" pos:end="259:21">i</name><operator pos:start="259:22" pos:end="259:22">=</operator><name pos:start="259:23" pos:end="259:30">dstWidth</name><operator pos:start="259:31" pos:end="259:31">-</operator><literal type="number" pos:start="259:32" pos:end="259:32">1</literal></expr>;</init> <condition pos:start="259:35" pos:end="259:56"><expr pos:start="259:35" pos:end="259:55"><operator pos:start="259:35" pos:end="259:35">(</operator><name pos:start="259:36" pos:end="259:36">i</name><operator pos:start="259:37" pos:end="259:37">*</operator><name pos:start="259:38" pos:end="259:41">xInc</name><operator pos:start="259:42" pos:end="259:42">)</operator><operator pos:start="259:43" pos:end="259:44">&gt;&gt;</operator><literal type="number" pos:start="259:45" pos:end="259:46">16</literal> <operator pos:start="259:48" pos:end="259:49">&gt;=</operator><name pos:start="259:50" pos:end="259:53">srcW</name><operator pos:start="259:54" pos:end="259:54">-</operator><literal type="number" pos:start="259:55" pos:end="259:55">1</literal></expr>;</condition> <incr pos:start="259:58" pos:end="259:60"><expr pos:start="259:58" pos:end="259:60"><name pos:start="259:58" pos:end="259:58">i</name><operator pos:start="259:59" pos:end="259:60">--</operator></expr></incr>)</control>

		<block pos:start="261:17" pos:end="269:17">{<block_content pos:start="265:25" pos:end="267:55">

<comment type="line" pos:start="263:1" pos:end="263:64">//			printf("%d %d %d\n", dstWidth, i, srcW);</comment>

			<expr_stmt pos:start="265:25" pos:end="265:50"><expr pos:start="265:25" pos:end="265:49"><name pos:start="265:25" pos:end="265:30"><name pos:start="265:25" pos:end="265:27">dst</name><index pos:start="265:28" pos:end="265:30">[<expr pos:start="265:29" pos:end="265:29"><name pos:start="265:29" pos:end="265:29">i</name></expr>]</index></name> <operator pos:start="265:32" pos:end="265:32">=</operator> <name pos:start="265:34" pos:end="265:45"><name pos:start="265:34" pos:end="265:37">src1</name><index pos:start="265:38" pos:end="265:45">[<expr pos:start="265:39" pos:end="265:44"><name pos:start="265:39" pos:end="265:42">srcW</name><operator pos:start="265:43" pos:end="265:43">-</operator><literal type="number" pos:start="265:44" pos:end="265:44">1</literal></expr>]</index></name><operator pos:start="265:46" pos:end="265:46">*</operator><literal type="number" pos:start="265:47" pos:end="265:49">128</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="267:25" pos:end="267:55"><expr pos:start="267:25" pos:end="267:54"><name pos:start="267:25" pos:end="267:35"><name pos:start="267:25" pos:end="267:27">dst</name><index pos:start="267:28" pos:end="267:35">[<expr pos:start="267:29" pos:end="267:34"><name pos:start="267:29" pos:end="267:29">i</name><operator pos:start="267:30" pos:end="267:30">+</operator><literal type="number" pos:start="267:31" pos:end="267:34">2048</literal></expr>]</index></name> <operator pos:start="267:37" pos:end="267:37">=</operator> <name pos:start="267:39" pos:end="267:50"><name pos:start="267:39" pos:end="267:42">src2</name><index pos:start="267:43" pos:end="267:50">[<expr pos:start="267:44" pos:end="267:49"><name pos:start="267:44" pos:end="267:47">srcW</name><operator pos:start="267:48" pos:end="267:48">-</operator><literal type="number" pos:start="267:49" pos:end="267:49">1</literal></expr>]</index></name><operator pos:start="267:51" pos:end="267:51">*</operator><literal type="number" pos:start="267:52" pos:end="267:54">128</literal></expr>;</expr_stmt>

		</block_content>}</block></for>

	</block_content>}</block></if>

	<else pos:start="273:9" pos:end="360:0">else

	<block pos:start="275:9" pos:end="360:0">{<block_content pos:start="279:9" pos:end="354:0">

<cpp:endif pos:start="277:1" pos:end="277:6">#<cpp:directive pos:start="277:2" pos:end="277:6">endif</cpp:directive></cpp:endif>

	<asm pos:start="279:9" pos:end="354:0">asm <specifier pos:start="279:13" pos:end="279:20">volatile</specifier>(

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="281:55" pos:end="281:58">// i</comment>

		"xorl %%ebx, %%ebx		\n\t" <comment type="line" pos:start="283:55" pos:end="283:59">// xx</comment>

		"xorl %%ecx, %%ecx		\n\t" <comment type="line" pos:start="285:55" pos:end="285:65">// 2*xalpha</comment>

		".balign 16			\n\t"

		"1:				\n\t"

		"movl %0, %%esi			\n\t"

		"movzbl  (%%esi, %%ebx), %%edi	\n\t" <comment type="line" pos:start="293:55" pos:end="293:63">//src[xx]</comment>

		"movzbl 1(%%esi, %%ebx), %%esi	\n\t" <comment type="line" pos:start="295:55" pos:end="295:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="297:55" pos:end="297:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="299:55" pos:end="299:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="303:55" pos:end="303:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, (%%edi, %%eax, 2)	\n\t"



		"movzbl  (%5, %%ebx), %%edi	\n\t" <comment type="line" pos:start="313:55" pos:end="313:63">//src[xx]</comment>

		"movzbl 1(%5, %%ebx), %%esi	\n\t" <comment type="line" pos:start="315:55" pos:end="315:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="317:55" pos:end="317:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="319:55" pos:end="319:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="323:55" pos:end="323:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, 4096(%%edi, %%eax, 2)\n\t"



		"addw %4, %%cx			\n\t" <comment type="line" pos:start="333:55" pos:end="333:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adcl %3, %%ebx			\n\t" <comment type="line" pos:start="335:55" pos:end="335:76">//xx+= xInc&gt;&gt;8 + carry</comment>

		"addl $1, %%eax			\n\t"

		"cmpl %2, %%eax			\n\t"

		" jb 1b				\n\t"



		:: "m" (src1), "m" (dst), "m" (dstWidth), "m" (xInc&gt;&gt;16), "m" (xInc&amp;0xFFFF),

		"r" (src2)

		: "%eax", "%ebx", "%ecx", "%edi", "%esi"

		);</asm>

<cpp:ifdef pos:start="353:1" pos:end="353:16">#<cpp:directive pos:start="353:2" pos:end="353:6">ifdef</cpp:directive> <name pos:start="353:8" pos:end="353:16">HAVE_MMX2</name></cpp:ifdef>

	</block_content>}</block></else></if_stmt> <comment type="line" pos:start="355:11" pos:end="355:32">//if MMX2 cant be used</comment>

<cpp:endif pos:start="357:1" pos:end="357:6">#<cpp:directive pos:start="357:2" pos:end="357:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="359:1" pos:end="359:5">#<cpp:directive pos:start="359:2" pos:end="359:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="361:9" pos:end="361:14"><decl pos:start="361:9" pos:end="361:13"><type pos:start="361:9" pos:end="361:11"><name pos:start="361:9" pos:end="361:11">int</name></type> <name pos:start="361:13" pos:end="361:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="363:9" pos:end="363:28"><decl pos:start="363:9" pos:end="363:27"><type pos:start="363:9" pos:end="363:20"><name pos:start="363:9" pos:end="363:16">unsigned</name> <name pos:start="363:18" pos:end="363:20">int</name></type> <name pos:start="363:22" pos:end="363:25">xpos</name><init pos:start="363:26" pos:end="363:27">=<expr pos:start="363:27" pos:end="363:27"><literal type="number" pos:start="363:27" pos:end="363:27">0</literal></expr></init></decl>;</decl_stmt>

	<for pos:start="365:9" pos:end="390:0">for<control pos:start="365:12" pos:end="365:31">(<init pos:start="365:13" pos:end="365:16"><expr pos:start="365:13" pos:end="365:15"><name pos:start="365:13" pos:end="365:13">i</name><operator pos:start="365:14" pos:end="365:14">=</operator><literal type="number" pos:start="365:15" pos:end="365:15">0</literal></expr>;</init><condition pos:start="365:17" pos:end="365:27"><expr pos:start="365:17" pos:end="365:26"><name pos:start="365:17" pos:end="365:17">i</name><operator pos:start="365:18" pos:end="365:18">&lt;</operator><name pos:start="365:19" pos:end="365:26">dstWidth</name></expr>;</condition><incr pos:start="365:28" pos:end="365:30"><expr pos:start="365:28" pos:end="365:30"><name pos:start="365:28" pos:end="365:28">i</name><operator pos:start="365:29" pos:end="365:30">++</operator></expr></incr>)</control>

	<block pos:start="367:9" pos:end="390:0">{<block_content pos:start="369:17" pos:end="385:27">

		<decl_stmt pos:start="369:17" pos:end="369:50"><decl pos:start="369:17" pos:end="369:49"><type pos:start="369:17" pos:end="369:37"><specifier pos:start="369:17" pos:end="369:24">register</specifier> <name pos:start="369:26" pos:end="369:33">unsigned</name> <name pos:start="369:35" pos:end="369:37">int</name></type> <name pos:start="369:39" pos:end="369:40">xx</name><init pos:start="369:41" pos:end="369:49">=<expr pos:start="369:42" pos:end="369:49"><name pos:start="369:42" pos:end="369:45">xpos</name><operator pos:start="369:46" pos:end="369:47">&gt;&gt;</operator><literal type="number" pos:start="369:48" pos:end="369:49">16</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="371:17" pos:end="371:62"><decl pos:start="371:17" pos:end="371:61"><type pos:start="371:17" pos:end="371:37"><specifier pos:start="371:17" pos:end="371:24">register</specifier> <name pos:start="371:26" pos:end="371:33">unsigned</name> <name pos:start="371:35" pos:end="371:37">int</name></type> <name pos:start="371:39" pos:end="371:44">xalpha</name><init pos:start="371:45" pos:end="371:61">=<expr pos:start="371:46" pos:end="371:61"><operator pos:start="371:46" pos:end="371:46">(</operator><name pos:start="371:47" pos:end="371:50">xpos</name><operator pos:start="371:51" pos:end="371:51">&amp;</operator><literal type="number" pos:start="371:52" pos:end="371:57">0xFFFF</literal><operator pos:start="371:58" pos:end="371:58">)</operator><operator pos:start="371:59" pos:end="371:60">&gt;&gt;</operator><literal type="number" pos:start="371:61" pos:end="371:61">9</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="373:17" pos:end="373:65"><expr pos:start="373:17" pos:end="373:64"><name pos:start="373:17" pos:end="373:22"><name pos:start="373:17" pos:end="373:19">dst</name><index pos:start="373:20" pos:end="373:22">[<expr pos:start="373:21" pos:end="373:21"><name pos:start="373:21" pos:end="373:21">i</name></expr>]</index></name><operator pos:start="373:23" pos:end="373:23">=</operator><operator pos:start="373:24" pos:end="373:24">(</operator><name pos:start="373:25" pos:end="373:32"><name pos:start="373:25" pos:end="373:28">src1</name><index pos:start="373:29" pos:end="373:32">[<expr pos:start="373:30" pos:end="373:31"><name pos:start="373:30" pos:end="373:31">xx</name></expr>]</index></name><operator pos:start="373:33" pos:end="373:33">*</operator><operator pos:start="373:34" pos:end="373:34">(</operator><name pos:start="373:35" pos:end="373:40">xalpha</name><operator pos:start="373:41" pos:end="373:41">^</operator><literal type="number" pos:start="373:42" pos:end="373:44">127</literal><operator pos:start="373:45" pos:end="373:45">)</operator><operator pos:start="373:46" pos:end="373:46">+</operator><name pos:start="373:47" pos:end="373:56"><name pos:start="373:47" pos:end="373:50">src1</name><index pos:start="373:51" pos:end="373:56">[<expr pos:start="373:52" pos:end="373:55"><name pos:start="373:52" pos:end="373:53">xx</name><operator pos:start="373:54" pos:end="373:54">+</operator><literal type="number" pos:start="373:55" pos:end="373:55">1</literal></expr>]</index></name><operator pos:start="373:57" pos:end="373:57">*</operator><name pos:start="373:58" pos:end="373:63">xalpha</name><operator pos:start="373:64" pos:end="373:64">)</operator></expr>;</expr_stmt>

		<expr_stmt pos:start="375:17" pos:end="375:70"><expr pos:start="375:17" pos:end="375:69"><name pos:start="375:17" pos:end="375:27"><name pos:start="375:17" pos:end="375:19">dst</name><index pos:start="375:20" pos:end="375:27">[<expr pos:start="375:21" pos:end="375:26"><name pos:start="375:21" pos:end="375:21">i</name><operator pos:start="375:22" pos:end="375:22">+</operator><literal type="number" pos:start="375:23" pos:end="375:26">2048</literal></expr>]</index></name><operator pos:start="375:28" pos:end="375:28">=</operator><operator pos:start="375:29" pos:end="375:29">(</operator><name pos:start="375:30" pos:end="375:37"><name pos:start="375:30" pos:end="375:33">src2</name><index pos:start="375:34" pos:end="375:37">[<expr pos:start="375:35" pos:end="375:36"><name pos:start="375:35" pos:end="375:36">xx</name></expr>]</index></name><operator pos:start="375:38" pos:end="375:38">*</operator><operator pos:start="375:39" pos:end="375:39">(</operator><name pos:start="375:40" pos:end="375:45">xalpha</name><operator pos:start="375:46" pos:end="375:46">^</operator><literal type="number" pos:start="375:47" pos:end="375:49">127</literal><operator pos:start="375:50" pos:end="375:50">)</operator><operator pos:start="375:51" pos:end="375:51">+</operator><name pos:start="375:52" pos:end="375:61"><name pos:start="375:52" pos:end="375:55">src2</name><index pos:start="375:56" pos:end="375:61">[<expr pos:start="375:57" pos:end="375:60"><name pos:start="375:57" pos:end="375:58">xx</name><operator pos:start="375:59" pos:end="375:59">+</operator><literal type="number" pos:start="375:60" pos:end="375:60">1</literal></expr>]</index></name><operator pos:start="375:62" pos:end="375:62">*</operator><name pos:start="375:63" pos:end="375:68">xalpha</name><operator pos:start="375:69" pos:end="375:69">)</operator></expr>;</expr_stmt>

<comment type="block" pos:start="377:1" pos:end="383:2">/* slower

	  dst[i]= (src1[xx]&lt;&lt;7) + (src1[xx+1] - src1[xx])*xalpha;

	  dst[i+2048]=(src2[xx]&lt;&lt;7) + (src2[xx+1] - src2[xx])*xalpha;

*/</comment>

		<expr_stmt pos:start="385:17" pos:end="385:27"><expr pos:start="385:17" pos:end="385:26"><name pos:start="385:17" pos:end="385:20">xpos</name><operator pos:start="385:21" pos:end="385:22">+=</operator><name pos:start="385:23" pos:end="385:26">xInc</name></expr>;</expr_stmt>

	</block_content>}</block></for>

<cpp:endif pos:start="389:1" pos:end="389:6">#<cpp:directive pos:start="389:2" pos:end="389:6">endif</cpp:directive></cpp:endif>

   </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
