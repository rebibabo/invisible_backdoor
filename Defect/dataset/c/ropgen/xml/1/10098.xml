<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10098.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">x86_cpu_realizefn</name><parameter_list pos:start="1:30" pos:end="1:61">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:41">DeviceState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="375:1">{<block_content pos:start="5:5" pos:end="373:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">X86CPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:30">= <expr pos:start="7:19" pos:end="7:30"><call pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:25">X86_CPU</name><argument_list pos:start="7:26" pos:end="7:30">(<argument pos:start="7:27" pos:end="7:29"><expr pos:start="7:27" pos:end="7:29"><name pos:start="7:27" pos:end="7:29">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">X86CPUClass</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">xcc</name> <init pos:start="9:22" pos:end="9:45">= <expr pos:start="9:24" pos:end="9:45"><call pos:start="9:24" pos:end="9:45"><name pos:start="9:24" pos:end="9:40">X86_CPU_GET_CLASS</name><argument_list pos:start="9:41" pos:end="9:45">(<argument pos:start="9:42" pos:end="9:44"><expr pos:start="9:42" pos:end="9:44"><name pos:start="9:42" pos:end="9:44">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUX86State</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:32">= <expr pos:start="11:24" pos:end="11:32"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:27">cpu</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:15"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <name pos:start="15:12" pos:end="15:15">bool</name></type> <name pos:start="15:17" pos:end="15:25">ht_warned</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:44">(<expr pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:11">xcc</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:25">kvm_required</name></name> <operator pos:start="19:27" pos:end="19:28">&amp;&amp;</operator> <operator pos:start="19:30" pos:end="19:30">!</operator><call pos:start="19:31" pos:end="19:43"><name pos:start="19:31" pos:end="19:41">kvm_enabled</name><argument_list pos:start="19:42" pos:end="19:43">()</argument_list></call></expr>)</condition> <block pos:start="19:46" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:17">

        <decl_stmt pos:start="21:9" pos:end="21:55"><decl pos:start="21:9" pos:end="21:54"><type pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:12">char</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:18">name</name> <init pos:start="21:20" pos:end="21:54">= <expr pos:start="21:22" pos:end="21:54"><call pos:start="21:22" pos:end="21:54"><name pos:start="21:22" pos:end="21:49">x86_cpu_class_get_model_name</name><argument_list pos:start="21:50" pos:end="21:54">(<argument pos:start="21:51" pos:end="21:53"><expr pos:start="21:51" pos:end="21:53"><name pos:start="21:51" pos:end="21:53">xcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:68"><expr pos:start="23:9" pos:end="23:67"><call pos:start="23:9" pos:end="23:67"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="23:67">(<argument pos:start="23:20" pos:end="23:29"><expr pos:start="23:20" pos:end="23:29"><operator pos:start="23:20" pos:end="23:20">&amp;</operator><name pos:start="23:21" pos:end="23:29">local_err</name></expr></argument>, <argument pos:start="23:32" pos:end="23:60"><expr pos:start="23:32" pos:end="23:60"><literal type="string" pos:start="23:32" pos:end="23:60">"CPU model '%s' requires KVM"</literal></expr></argument>, <argument pos:start="23:63" pos:end="23:66"><expr pos:start="23:63" pos:end="23:66"><name pos:start="23:63" pos:end="23:66">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><call pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:14">g_free</name><argument_list pos:start="25:15" pos:end="25:20">(<argument pos:start="25:16" pos:end="25:19"><expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:43">(<expr pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:11">cpu</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:20">apic_id</name></name> <operator pos:start="33:22" pos:end="33:23">==</operator> <name pos:start="33:25" pos:end="33:42">UNASSIGNED_APIC_ID</name></expr>)</condition> <block pos:start="33:45" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:74"><expr pos:start="35:9" pos:end="35:73"><call pos:start="35:9" pos:end="35:73"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="35:73">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="35:72"><expr pos:start="35:26" pos:end="35:72"><literal type="string" pos:start="35:26" pos:end="35:72">"apic-id property was not initialized properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><call pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:25">x86_cpu_load_features</name><argument_list pos:start="43:26" pos:end="43:42">(<argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><name pos:start="43:27" pos:end="43:29">cpu</name></expr></argument>, <argument pos:start="43:32" pos:end="43:41"><expr pos:start="43:32" pos:end="43:41"><operator pos:start="43:32" pos:end="43:32">&amp;</operator><name pos:start="43:33" pos:end="43:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:17">local_err</name></expr>)</condition> <block pos:start="45:20" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:17">

        <goto pos:start="47:9" pos:end="47:17">goto <name pos:start="47:14" pos:end="47:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="73:5"><if pos:start="53:5" pos:end="73:5">if <condition pos:start="53:8" pos:end="55:49">(<expr pos:start="53:9" pos:end="55:48"><call pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:31">x86_cpu_filter_features</name><argument_list pos:start="53:32" pos:end="53:36">(<argument pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><name pos:start="53:33" pos:end="53:35">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="53:38" pos:end="53:39">&amp;&amp;</operator>

        <operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:25"><name pos:start="55:10" pos:end="55:12">cpu</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:25">check_cpuid</name></name> <operator pos:start="55:27" pos:end="55:28">||</operator> <name pos:start="55:30" pos:end="55:47"><name pos:start="55:30" pos:end="55:32">cpu</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:47">enforce_cpuid</name></name><operator pos:start="55:48" pos:end="55:48">)</operator></expr>)</condition> <block pos:start="55:51" pos:end="73:5">{<block_content pos:start="57:9" pos:end="71:9">

        <expr_stmt pos:start="57:9" pos:end="57:46"><expr pos:start="57:9" pos:end="57:45"><call pos:start="57:9" pos:end="57:45"><name pos:start="57:9" pos:end="57:40">x86_cpu_report_filtered_features</name><argument_list pos:start="57:41" pos:end="57:45">(<argument pos:start="57:42" pos:end="57:44"><expr pos:start="57:42" pos:end="57:44"><name pos:start="57:42" pos:end="57:44">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="71:9"><if pos:start="59:9" pos:end="71:9">if <condition pos:start="59:12" pos:end="59:31">(<expr pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:15">cpu</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:30">enforce_cpuid</name></name></expr>)</condition> <block pos:start="59:33" pos:end="71:9">{<block_content pos:start="61:13" pos:end="69:21">

            <expr_stmt pos:start="61:13" pos:end="67:69"><expr pos:start="61:13" pos:end="67:68"><call pos:start="61:13" pos:end="67:68"><name pos:start="61:13" pos:end="61:22">error_setg</name><argument_list pos:start="61:23" pos:end="67:68">(<argument pos:start="61:24" pos:end="61:33"><expr pos:start="61:24" pos:end="61:33"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:33">local_err</name></expr></argument>,

                       <argument pos:start="63:24" pos:end="67:67"><expr pos:start="63:24" pos:end="67:67"><ternary pos:start="63:24" pos:end="67:67"><condition pos:start="63:24" pos:end="63:38"><expr pos:start="63:24" pos:end="63:36"><call pos:start="63:24" pos:end="63:36"><name pos:start="63:24" pos:end="63:34">kvm_enabled</name><argument_list pos:start="63:35" pos:end="63:36">()</argument_list></call></expr> ?</condition><then pos:start="65:28" pos:end="65:68">

                           <expr pos:start="65:28" pos:end="65:68"><literal type="string" pos:start="65:28" pos:end="65:68">"Host doesn't support requested features"</literal></expr> </then><else pos:start="65:70" pos:end="67:67">:

                           <expr pos:start="67:28" pos:end="67:67"><literal type="string" pos:start="67:28" pos:end="67:67">"TCG doesn't support requested features"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:21">goto <name pos:start="69:18" pos:end="69:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="81:7">/* On AMD CPUs, some CPUID[8000_0001].EDX bits must match the bits on

     * CPUID[1].EDX.

     */</comment>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:24">(<expr pos:start="83:9" pos:end="83:23"><call pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:18">IS_AMD_CPU</name><argument_list pos:start="83:19" pos:end="83:23">(<argument pos:start="83:20" pos:end="83:22"><expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:26" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:37">

        <expr_stmt pos:start="85:9" pos:end="85:69"><expr pos:start="85:9" pos:end="85:68"><name pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:11">env</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:21">features</name><index pos:start="85:22" pos:end="85:41">[<expr pos:start="85:23" pos:end="85:40"><name pos:start="85:23" pos:end="85:40">FEAT_8000_0001_EDX</name></expr>]</index></name> <operator pos:start="85:43" pos:end="85:44">&amp;=</operator> <operator pos:start="85:46" pos:end="85:46">~</operator><name pos:start="85:47" pos:end="85:68">CPUID_EXT2_AMD_ALIASES</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="89:37"><expr pos:start="87:9" pos:end="89:36"><name pos:start="87:9" pos:end="87:41"><name pos:start="87:9" pos:end="87:11">env</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:21">features</name><index pos:start="87:22" pos:end="87:41">[<expr pos:start="87:23" pos:end="87:40"><name pos:start="87:23" pos:end="87:40">FEAT_8000_0001_EDX</name></expr>]</index></name> <operator pos:start="87:43" pos:end="87:44">|=</operator> <operator pos:start="87:46" pos:end="87:46">(</operator><name pos:start="87:47" pos:end="87:71"><name pos:start="87:47" pos:end="87:49">env</name><operator pos:start="87:50" pos:end="87:51">-&gt;</operator><name pos:start="87:52" pos:end="87:59">features</name><index pos:start="87:60" pos:end="87:71">[<expr pos:start="87:61" pos:end="87:70"><name pos:start="87:61" pos:end="87:70">FEAT_1_EDX</name></expr>]</index></name>

           <operator pos:start="89:12" pos:end="89:12">&amp;</operator> <name pos:start="89:14" pos:end="89:35">CPUID_EXT2_AMD_ALIASES</name><operator pos:start="89:36" pos:end="89:36">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="105:7">/* For 64bit systems think about the number of physical bits to present.

     * ideally this should be the same as the host; anything other than matching

     * the host can cause incorrect guest behaviour.

     * QEMU used to pick the magic value of 40 bits that corresponds to

     * consumer AMD devices but nothing else.

     */</comment>

    <if_stmt pos:start="107:5" pos:end="221:5"><if pos:start="107:5" pos:end="193:5">if <condition pos:start="107:8" pos:end="107:58">(<expr pos:start="107:9" pos:end="107:57"><name pos:start="107:9" pos:end="107:41"><name pos:start="107:9" pos:end="107:11">env</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:21">features</name><index pos:start="107:22" pos:end="107:41">[<expr pos:start="107:23" pos:end="107:40"><name pos:start="107:23" pos:end="107:40">FEAT_8000_0001_EDX</name></expr>]</index></name> <operator pos:start="107:43" pos:end="107:43">&amp;</operator> <name pos:start="107:45" pos:end="107:57">CPUID_EXT2_LM</name></expr>)</condition> <block pos:start="107:60" pos:end="193:5">{<block_content pos:start="109:9" pos:end="191:9">

        <if_stmt pos:start="109:9" pos:end="177:9"><if pos:start="109:9" pos:end="165:9">if <condition pos:start="109:12" pos:end="109:26">(<expr pos:start="109:13" pos:end="109:25"><call pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:23">kvm_enabled</name><argument_list pos:start="109:24" pos:end="109:25">()</argument_list></call></expr>)</condition> <block pos:start="109:28" pos:end="165:9">{<block_content pos:start="111:13" pos:end="163:13">

            <decl_stmt pos:start="111:13" pos:end="111:59"><decl pos:start="111:13" pos:end="111:58"><type pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:20">uint32_t</name></type> <name pos:start="111:22" pos:end="111:35">host_phys_bits</name> <init pos:start="111:37" pos:end="111:58">= <expr pos:start="111:39" pos:end="111:58"><call pos:start="111:39" pos:end="111:58"><name pos:start="111:39" pos:end="111:56">x86_host_phys_bits</name><argument_list pos:start="111:57" pos:end="111:58">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="113:13" pos:end="113:31"><decl pos:start="113:13" pos:end="113:30"><type pos:start="113:13" pos:end="113:23"><specifier pos:start="113:13" pos:end="113:18">static</specifier> <name pos:start="113:20" pos:end="113:23">bool</name></type> <name pos:start="113:25" pos:end="113:30">warned</name></decl>;</decl_stmt>



            <if_stmt pos:start="117:13" pos:end="123:13"><if pos:start="117:13" pos:end="123:13">if <condition pos:start="117:16" pos:end="117:36">(<expr pos:start="117:17" pos:end="117:35"><name pos:start="117:17" pos:end="117:35"><name pos:start="117:17" pos:end="117:19">cpu</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:35">host_phys_bits</name></name></expr>)</condition> <block pos:start="117:38" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:48">

                <comment type="block" pos:start="119:17" pos:end="119:73">/* The user asked for us to use the host physical bits */</comment>

                <expr_stmt pos:start="121:17" pos:end="121:48"><expr pos:start="121:17" pos:end="121:47"><name pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:19">cpu</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:30">phys_bits</name></name> <operator pos:start="121:32" pos:end="121:32">=</operator> <name pos:start="121:34" pos:end="121:47">host_phys_bits</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="127:13" pos:end="131:15">/* Print a warning if the user set it to a value that's not the

             * host value.

             */</comment>

            <if_stmt pos:start="133:13" pos:end="145:13"><if pos:start="133:13" pos:end="145:13">if <condition pos:start="133:16" pos:end="135:24">(<expr pos:start="133:17" pos:end="135:23"><name pos:start="133:17" pos:end="133:30"><name pos:start="133:17" pos:end="133:19">cpu</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:30">phys_bits</name></name> <operator pos:start="133:32" pos:end="133:33">!=</operator> <name pos:start="133:35" pos:end="133:48">host_phys_bits</name> <operator pos:start="133:50" pos:end="133:51">&amp;&amp;</operator> <name pos:start="133:53" pos:end="133:66"><name pos:start="133:53" pos:end="133:55">cpu</name><operator pos:start="133:56" pos:end="133:57">-&gt;</operator><name pos:start="133:58" pos:end="133:66">phys_bits</name></name> <operator pos:start="133:68" pos:end="133:69">!=</operator> <literal type="number" pos:start="133:71" pos:end="133:71">0</literal> <operator pos:start="133:73" pos:end="133:74">&amp;&amp;</operator>

                <operator pos:start="135:17" pos:end="135:17">!</operator><name pos:start="135:18" pos:end="135:23">warned</name></expr>)</condition> <block pos:start="135:26" pos:end="145:13">{<block_content pos:start="137:17" pos:end="143:30">

                <expr_stmt pos:start="137:17" pos:end="141:65"><expr pos:start="137:17" pos:end="141:64"><call pos:start="137:17" pos:end="141:64"><name pos:start="137:17" pos:end="137:28">error_report</name><argument_list pos:start="137:29" pos:end="141:64">(<argument pos:start="137:30" pos:end="139:74"><expr pos:start="137:30" pos:end="139:74"><literal type="string" pos:start="137:30" pos:end="137:63">"Warning: Host physical bits (%u)"</literal>

                                 <literal type="string" pos:start="139:34" pos:end="139:74">" does not match phys-bits property (%u)"</literal></expr></argument>,

                                 <argument pos:start="141:34" pos:end="141:47"><expr pos:start="141:34" pos:end="141:47"><name pos:start="141:34" pos:end="141:47">host_phys_bits</name></expr></argument>, <argument pos:start="141:50" pos:end="141:63"><expr pos:start="141:50" pos:end="141:63"><name pos:start="141:50" pos:end="141:63"><name pos:start="141:50" pos:end="141:52">cpu</name><operator pos:start="141:53" pos:end="141:54">-&gt;</operator><name pos:start="141:55" pos:end="141:63">phys_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:30"><expr pos:start="143:17" pos:end="143:29"><name pos:start="143:17" pos:end="143:22">warned</name> <operator pos:start="143:24" pos:end="143:24">=</operator> <name pos:start="143:26" pos:end="143:29">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="149:13" pos:end="163:13"><if pos:start="149:13" pos:end="163:13">if <condition pos:start="149:16" pos:end="153:37">(<expr pos:start="149:17" pos:end="153:36"><name pos:start="149:17" pos:end="149:30"><name pos:start="149:17" pos:end="149:19">cpu</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:30">phys_bits</name></name> <operator pos:start="149:32" pos:end="149:33">&amp;&amp;</operator>

                <operator pos:start="151:17" pos:end="151:17">(</operator><name pos:start="151:18" pos:end="151:31"><name pos:start="151:18" pos:end="151:20">cpu</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:31">phys_bits</name></name> <operator pos:start="151:33" pos:end="151:33">&gt;</operator> <name pos:start="151:35" pos:end="151:61">TARGET_PHYS_ADDR_SPACE_BITS</name> <operator pos:start="151:63" pos:end="151:64">||</operator>

                <name pos:start="153:17" pos:end="153:30"><name pos:start="153:17" pos:end="153:19">cpu</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:30">phys_bits</name></name> <operator pos:start="153:32" pos:end="153:32">&lt;</operator> <literal type="number" pos:start="153:34" pos:end="153:35">32</literal><operator pos:start="153:36" pos:end="153:36">)</operator></expr>)</condition> <block pos:start="153:39" pos:end="163:13">{<block_content pos:start="155:17" pos:end="161:23">

                <expr_stmt pos:start="155:17" pos:end="159:78"><expr pos:start="155:17" pos:end="159:77"><call pos:start="155:17" pos:end="159:77"><name pos:start="155:17" pos:end="155:26">error_setg</name><argument_list pos:start="155:27" pos:end="159:77">(<argument pos:start="155:28" pos:end="155:31"><expr pos:start="155:28" pos:end="155:31"><name pos:start="155:28" pos:end="155:31">errp</name></expr></argument>, <argument pos:start="155:34" pos:end="157:47"><expr pos:start="155:34" pos:end="157:47"><literal type="string" pos:start="155:34" pos:end="155:73">"phys-bits should be between 32 and %u "</literal>

                                 <literal type="string" pos:start="157:34" pos:end="157:47">" (but is %u)"</literal></expr></argument>,

                                 <argument pos:start="159:34" pos:end="159:60"><expr pos:start="159:34" pos:end="159:60"><name pos:start="159:34" pos:end="159:60">TARGET_PHYS_ADDR_SPACE_BITS</name></expr></argument>, <argument pos:start="159:63" pos:end="159:76"><expr pos:start="159:63" pos:end="159:76"><name pos:start="159:63" pos:end="159:76"><name pos:start="159:63" pos:end="159:65">cpu</name><operator pos:start="159:66" pos:end="159:67">-&gt;</operator><name pos:start="159:68" pos:end="159:76">phys_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="161:17" pos:end="161:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="165:11" pos:end="177:9">else <block pos:start="165:16" pos:end="177:9">{<block_content pos:start="167:13" pos:end="175:13">

            <if_stmt pos:start="167:13" pos:end="175:13"><if pos:start="167:13" pos:end="175:13">if <condition pos:start="167:16" pos:end="167:71">(<expr pos:start="167:17" pos:end="167:70"><name pos:start="167:17" pos:end="167:30"><name pos:start="167:17" pos:end="167:19">cpu</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:30">phys_bits</name></name> <operator pos:start="167:32" pos:end="167:33">&amp;&amp;</operator> <name pos:start="167:35" pos:end="167:48"><name pos:start="167:35" pos:end="167:37">cpu</name><operator pos:start="167:38" pos:end="167:39">-&gt;</operator><name pos:start="167:40" pos:end="167:48">phys_bits</name></name> <operator pos:start="167:50" pos:end="167:51">!=</operator> <name pos:start="167:53" pos:end="167:70">TCG_PHYS_ADDR_BITS</name></expr>)</condition> <block pos:start="167:73" pos:end="175:13">{<block_content pos:start="169:17" pos:end="173:23">

                <expr_stmt pos:start="169:17" pos:end="171:54"><expr pos:start="169:17" pos:end="171:53"><call pos:start="169:17" pos:end="171:53"><name pos:start="169:17" pos:end="169:26">error_setg</name><argument_list pos:start="169:27" pos:end="171:53">(<argument pos:start="169:28" pos:end="169:31"><expr pos:start="169:28" pos:end="169:31"><name pos:start="169:28" pos:end="169:31">errp</name></expr></argument>, <argument pos:start="169:34" pos:end="169:65"><expr pos:start="169:34" pos:end="169:65"><literal type="string" pos:start="169:34" pos:end="169:65">"TCG only supports phys-bits=%u"</literal></expr></argument>,

                                  <argument pos:start="171:35" pos:end="171:52"><expr pos:start="171:35" pos:end="171:52"><name pos:start="171:35" pos:end="171:52">TCG_PHYS_ADDR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="173:17" pos:end="173:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="179:9" pos:end="185:11">/* 0 means it was not explicitly set by the user (or by machine

         * compat_props or by the host code above). In this case, the default

         * is the value used by TCG (40).

         */</comment>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:32">(<expr pos:start="187:13" pos:end="187:31"><name pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:15">cpu</name><operator pos:start="187:16" pos:end="187:17">-&gt;</operator><name pos:start="187:18" pos:end="187:26">phys_bits</name></name> <operator pos:start="187:28" pos:end="187:29">==</operator> <literal type="number" pos:start="187:31" pos:end="187:31">0</literal></expr>)</condition> <block pos:start="187:34" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:48">

            <expr_stmt pos:start="189:13" pos:end="189:48"><expr pos:start="189:13" pos:end="189:47"><name pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:15">cpu</name><operator pos:start="189:16" pos:end="189:17">-&gt;</operator><name pos:start="189:18" pos:end="189:26">phys_bits</name></name> <operator pos:start="189:28" pos:end="189:28">=</operator> <name pos:start="189:30" pos:end="189:47">TCG_PHYS_ADDR_BITS</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="193:7" pos:end="221:5">else <block pos:start="193:12" pos:end="221:5">{<block_content pos:start="201:9" pos:end="219:9">

        <comment type="block" pos:start="195:9" pos:end="199:11">/* For 32 bit systems don't use the user set value, but keep

         * phys_bits consistent with what we tell the guest.

         */</comment>

        <if_stmt pos:start="201:9" pos:end="207:9"><if pos:start="201:9" pos:end="207:9">if <condition pos:start="201:12" pos:end="201:32">(<expr pos:start="201:13" pos:end="201:31"><name pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:15">cpu</name><operator pos:start="201:16" pos:end="201:17">-&gt;</operator><name pos:start="201:18" pos:end="201:26">phys_bits</name></name> <operator pos:start="201:28" pos:end="201:29">!=</operator> <literal type="number" pos:start="201:31" pos:end="201:31">0</literal></expr>)</condition> <block pos:start="201:34" pos:end="207:9">{<block_content pos:start="203:13" pos:end="205:19">

            <expr_stmt pos:start="203:13" pos:end="203:77"><expr pos:start="203:13" pos:end="203:76"><call pos:start="203:13" pos:end="203:76"><name pos:start="203:13" pos:end="203:22">error_setg</name><argument_list pos:start="203:23" pos:end="203:76">(<argument pos:start="203:24" pos:end="203:27"><expr pos:start="203:24" pos:end="203:27"><name pos:start="203:24" pos:end="203:27">errp</name></expr></argument>, <argument pos:start="203:30" pos:end="203:75"><expr pos:start="203:30" pos:end="203:75"><literal type="string" pos:start="203:30" pos:end="203:75">"phys-bits is not user-configurable in 32 bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="205:13" pos:end="205:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="211:9" pos:end="219:9"><if pos:start="211:9" pos:end="215:9">if <condition pos:start="211:12" pos:end="211:52">(<expr pos:start="211:13" pos:end="211:51"><name pos:start="211:13" pos:end="211:37"><name pos:start="211:13" pos:end="211:15">env</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:25">features</name><index pos:start="211:26" pos:end="211:37">[<expr pos:start="211:27" pos:end="211:36"><name pos:start="211:27" pos:end="211:36">FEAT_1_EDX</name></expr>]</index></name> <operator pos:start="211:39" pos:end="211:39">&amp;</operator> <name pos:start="211:41" pos:end="211:51">CPUID_PSE36</name></expr>)</condition> <block pos:start="211:54" pos:end="215:9">{<block_content pos:start="213:13" pos:end="213:32">

            <expr_stmt pos:start="213:13" pos:end="213:32"><expr pos:start="213:13" pos:end="213:31"><name pos:start="213:13" pos:end="213:26"><name pos:start="213:13" pos:end="213:15">cpu</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:26">phys_bits</name></name> <operator pos:start="213:28" pos:end="213:28">=</operator> <literal type="number" pos:start="213:30" pos:end="213:31">36</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="215:11" pos:end="219:9">else <block pos:start="215:16" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:32">

            <expr_stmt pos:start="217:13" pos:end="217:32"><expr pos:start="217:13" pos:end="217:31"><name pos:start="217:13" pos:end="217:26"><name pos:start="217:13" pos:end="217:15">cpu</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:26">phys_bits</name></name> <operator pos:start="217:28" pos:end="217:28">=</operator> <literal type="number" pos:start="217:30" pos:end="217:31">32</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:36"><expr pos:start="223:5" pos:end="223:35"><call pos:start="223:5" pos:end="223:35"><name pos:start="223:5" pos:end="223:17">cpu_exec_init</name><argument_list pos:start="223:18" pos:end="223:35">(<argument pos:start="223:19" pos:end="223:20"><expr pos:start="223:19" pos:end="223:20"><name pos:start="223:19" pos:end="223:20">cs</name></expr></argument>, <argument pos:start="223:23" pos:end="223:34"><expr pos:start="223:23" pos:end="223:34"><operator pos:start="223:23" pos:end="223:23">&amp;</operator><name pos:start="223:24" pos:end="223:34">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="227:5" pos:end="236:0"><if pos:start="227:5" pos:end="236:0">if <condition pos:start="227:8" pos:end="227:22">(<expr pos:start="227:9" pos:end="227:21"><call pos:start="227:9" pos:end="227:21"><name pos:start="227:9" pos:end="227:19">tcg_enabled</name><argument_list pos:start="227:20" pos:end="227:21">()</argument_list></call></expr>)</condition> <block pos:start="227:24" pos:end="236:0">{<block_content pos:start="229:9" pos:end="229:23">

        <expr_stmt pos:start="229:9" pos:end="229:23"><expr pos:start="229:9" pos:end="229:22"><call pos:start="229:9" pos:end="229:22"><name pos:start="229:9" pos:end="229:20">tcg_x86_init</name><argument_list pos:start="229:21" pos:end="229:22">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="235:1" pos:end="235:24">#<cpp:directive pos:start="235:2" pos:end="235:7">ifndef</cpp:directive> <name pos:start="235:9" pos:end="235:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <expr_stmt pos:start="237:5" pos:end="237:55"><expr pos:start="237:5" pos:end="237:54"><call pos:start="237:5" pos:end="237:54"><name pos:start="237:5" pos:end="237:23">qemu_register_reset</name><argument_list pos:start="237:24" pos:end="237:54">(<argument pos:start="237:25" pos:end="237:48"><expr pos:start="237:25" pos:end="237:48"><name pos:start="237:25" pos:end="237:48">x86_cpu_machine_reset_cb</name></expr></argument>, <argument pos:start="237:51" pos:end="237:53"><expr pos:start="237:51" pos:end="237:53"><name pos:start="237:51" pos:end="237:53">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="241:5" pos:end="254:0"><if pos:start="241:5" pos:end="254:0">if <condition pos:start="241:8" pos:end="241:67">(<expr pos:start="241:9" pos:end="241:66"><name pos:start="241:9" pos:end="241:37"><name pos:start="241:9" pos:end="241:11">cpu</name><operator pos:start="241:12" pos:end="241:13">-&gt;</operator><name pos:start="241:14" pos:end="241:16">env</name><operator pos:start="241:17" pos:end="241:17">.</operator><name pos:start="241:18" pos:end="241:25">features</name><index pos:start="241:26" pos:end="241:37">[<expr pos:start="241:27" pos:end="241:36"><name pos:start="241:27" pos:end="241:36">FEAT_1_EDX</name></expr>]</index></name> <operator pos:start="241:39" pos:end="241:39">&amp;</operator> <name pos:start="241:41" pos:end="241:50">CPUID_APIC</name> <operator pos:start="241:52" pos:end="241:53">||</operator> <name pos:start="241:55" pos:end="241:62">smp_cpus</name> <operator pos:start="241:64" pos:end="241:64">&gt;</operator> <literal type="number" pos:start="241:66" pos:end="241:66">1</literal></expr>)</condition> <block pos:start="241:69" pos:end="254:0">{<block_content pos:start="243:9" pos:end="249:9">

        <expr_stmt pos:start="243:9" pos:end="243:45"><expr pos:start="243:9" pos:end="243:44"><call pos:start="243:9" pos:end="243:44"><name pos:start="243:9" pos:end="243:27">x86_cpu_apic_create</name><argument_list pos:start="243:28" pos:end="243:44">(<argument pos:start="243:29" pos:end="243:31"><expr pos:start="243:29" pos:end="243:31"><name pos:start="243:29" pos:end="243:31">cpu</name></expr></argument>, <argument pos:start="243:34" pos:end="243:43"><expr pos:start="243:34" pos:end="243:43"><operator pos:start="243:34" pos:end="243:34">&amp;</operator><name pos:start="243:35" pos:end="243:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="245:9" pos:end="249:9"><if pos:start="245:9" pos:end="249:9">if <condition pos:start="245:12" pos:end="245:30">(<expr pos:start="245:13" pos:end="245:29"><name pos:start="245:13" pos:end="245:21">local_err</name> <operator pos:start="245:23" pos:end="245:24">!=</operator> <name pos:start="245:26" pos:end="245:29">NULL</name></expr>)</condition> <block pos:start="245:32" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:21">

            <goto pos:start="247:13" pos:end="247:21">goto <name pos:start="247:18" pos:end="247:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="257:5" pos:end="262:0"><expr pos:start="257:5" pos:end="257:17"><call pos:start="257:5" pos:end="257:17"><name pos:start="257:5" pos:end="257:12">mce_init</name><argument_list pos:start="257:13" pos:end="257:17">(<argument pos:start="257:14" pos:end="257:16"><expr pos:start="257:14" pos:end="257:16"><name pos:start="257:14" pos:end="257:16">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifndef pos:start="261:1" pos:end="261:24">#<cpp:directive pos:start="261:2" pos:end="261:7">ifndef</cpp:directive> <name pos:start="261:9" pos:end="261:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <if_stmt pos:start="263:5" pos:end="314:0"><if pos:start="263:5" pos:end="314:0">if <condition pos:start="263:8" pos:end="263:22">(<expr pos:start="263:9" pos:end="263:21"><call pos:start="263:9" pos:end="263:21"><name pos:start="263:9" pos:end="263:19">tcg_enabled</name><argument_list pos:start="263:20" pos:end="263:21">()</argument_list></call></expr>)</condition> <block pos:start="263:24" pos:end="314:0">{<block_content pos:start="265:9" pos:end="309:64">

        <decl_stmt pos:start="265:9" pos:end="265:53"><decl pos:start="265:9" pos:end="265:52"><type pos:start="265:9" pos:end="265:22"><name pos:start="265:9" pos:end="265:20">AddressSpace</name> <modifier pos:start="265:22" pos:end="265:22">*</modifier></type><name pos:start="265:23" pos:end="265:27">newas</name> <init pos:start="265:29" pos:end="265:52">= <expr pos:start="265:31" pos:end="265:52"><call pos:start="265:31" pos:end="265:52"><name pos:start="265:31" pos:end="265:35">g_new</name><argument_list pos:start="265:36" pos:end="265:52">(<argument pos:start="265:37" pos:end="265:48"><expr pos:start="265:37" pos:end="265:48"><name pos:start="265:37" pos:end="265:48">AddressSpace</name></expr></argument>, <argument pos:start="265:51" pos:end="265:51"><expr pos:start="265:51" pos:end="265:51"><literal type="number" pos:start="265:51" pos:end="265:51">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="269:9" pos:end="269:49"><expr pos:start="269:9" pos:end="269:48"><name pos:start="269:9" pos:end="269:23"><name pos:start="269:9" pos:end="269:11">cpu</name><operator pos:start="269:12" pos:end="269:13">-&gt;</operator><name pos:start="269:14" pos:end="269:23">cpu_as_mem</name></name> <operator pos:start="269:25" pos:end="269:25">=</operator> <call pos:start="269:27" pos:end="269:48"><name pos:start="269:27" pos:end="269:31">g_new</name><argument_list pos:start="269:32" pos:end="269:48">(<argument pos:start="269:33" pos:end="269:44"><expr pos:start="269:33" pos:end="269:44"><name pos:start="269:33" pos:end="269:44">MemoryRegion</name></expr></argument>, <argument pos:start="269:47" pos:end="269:47"><expr pos:start="269:47" pos:end="269:47"><literal type="number" pos:start="269:47" pos:end="269:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:50"><expr pos:start="271:9" pos:end="271:49"><name pos:start="271:9" pos:end="271:24"><name pos:start="271:9" pos:end="271:11">cpu</name><operator pos:start="271:12" pos:end="271:13">-&gt;</operator><name pos:start="271:14" pos:end="271:24">cpu_as_root</name></name> <operator pos:start="271:26" pos:end="271:26">=</operator> <call pos:start="271:28" pos:end="271:49"><name pos:start="271:28" pos:end="271:32">g_new</name><argument_list pos:start="271:33" pos:end="271:49">(<argument pos:start="271:34" pos:end="271:45"><expr pos:start="271:34" pos:end="271:45"><name pos:start="271:34" pos:end="271:45">MemoryRegion</name></expr></argument>, <argument pos:start="271:48" pos:end="271:48"><expr pos:start="271:48" pos:end="271:48"><literal type="number" pos:start="271:48" pos:end="271:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="275:9" pos:end="275:32">/* Outer container... */</comment>

        <expr_stmt pos:start="277:9" pos:end="277:75"><expr pos:start="277:9" pos:end="277:74"><call pos:start="277:9" pos:end="277:74"><name pos:start="277:9" pos:end="277:26">memory_region_init</name><argument_list pos:start="277:27" pos:end="277:74">(<argument pos:start="277:28" pos:end="277:43"><expr pos:start="277:28" pos:end="277:43"><name pos:start="277:28" pos:end="277:43"><name pos:start="277:28" pos:end="277:30">cpu</name><operator pos:start="277:31" pos:end="277:32">-&gt;</operator><name pos:start="277:33" pos:end="277:43">cpu_as_root</name></name></expr></argument>, <argument pos:start="277:46" pos:end="277:56"><expr pos:start="277:46" pos:end="277:56"><call pos:start="277:46" pos:end="277:56"><name pos:start="277:46" pos:end="277:51">OBJECT</name><argument_list pos:start="277:52" pos:end="277:56">(<argument pos:start="277:53" pos:end="277:55"><expr pos:start="277:53" pos:end="277:55"><name pos:start="277:53" pos:end="277:55">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="277:59" pos:end="277:66"><expr pos:start="277:59" pos:end="277:66"><literal type="string" pos:start="277:59" pos:end="277:66">"memory"</literal></expr></argument>, <argument pos:start="277:69" pos:end="277:73"><expr pos:start="277:69" pos:end="277:73"><operator pos:start="277:69" pos:end="277:69">~</operator><literal type="number" pos:start="277:70" pos:end="277:73">0ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:58"><expr pos:start="279:9" pos:end="279:57"><call pos:start="279:9" pos:end="279:57"><name pos:start="279:9" pos:end="279:33">memory_region_set_enabled</name><argument_list pos:start="279:34" pos:end="279:57">(<argument pos:start="279:35" pos:end="279:50"><expr pos:start="279:35" pos:end="279:50"><name pos:start="279:35" pos:end="279:50"><name pos:start="279:35" pos:end="279:37">cpu</name><operator pos:start="279:38" pos:end="279:39">-&gt;</operator><name pos:start="279:40" pos:end="279:50">cpu_as_root</name></name></expr></argument>, <argument pos:start="279:53" pos:end="279:56"><expr pos:start="279:53" pos:end="279:56"><name pos:start="279:53" pos:end="279:56">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="283:9" pos:end="287:11">/* ... with two regions inside: normal system memory with low

         * priority, and...

         */</comment>

        <expr_stmt pos:start="289:9" pos:end="291:64"><expr pos:start="289:9" pos:end="291:63"><call pos:start="289:9" pos:end="291:63"><name pos:start="289:9" pos:end="289:32">memory_region_init_alias</name><argument_list pos:start="289:33" pos:end="291:63">(<argument pos:start="289:34" pos:end="289:48"><expr pos:start="289:34" pos:end="289:48"><name pos:start="289:34" pos:end="289:48"><name pos:start="289:34" pos:end="289:36">cpu</name><operator pos:start="289:37" pos:end="289:38">-&gt;</operator><name pos:start="289:39" pos:end="289:48">cpu_as_mem</name></name></expr></argument>, <argument pos:start="289:51" pos:end="289:61"><expr pos:start="289:51" pos:end="289:61"><call pos:start="289:51" pos:end="289:61"><name pos:start="289:51" pos:end="289:56">OBJECT</name><argument_list pos:start="289:57" pos:end="289:61">(<argument pos:start="289:58" pos:end="289:60"><expr pos:start="289:58" pos:end="289:60"><name pos:start="289:58" pos:end="289:60">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="289:64" pos:end="289:71"><expr pos:start="289:64" pos:end="289:71"><literal type="string" pos:start="289:64" pos:end="289:71">"memory"</literal></expr></argument>,

                                 <argument pos:start="291:34" pos:end="291:52"><expr pos:start="291:34" pos:end="291:52"><call pos:start="291:34" pos:end="291:52"><name pos:start="291:34" pos:end="291:50">get_system_memory</name><argument_list pos:start="291:51" pos:end="291:52">()</argument_list></call></expr></argument>, <argument pos:start="291:55" pos:end="291:55"><expr pos:start="291:55" pos:end="291:55"><literal type="number" pos:start="291:55" pos:end="291:55">0</literal></expr></argument>, <argument pos:start="291:58" pos:end="291:62"><expr pos:start="291:58" pos:end="291:62"><operator pos:start="291:58" pos:end="291:58">~</operator><literal type="number" pos:start="291:59" pos:end="291:62">0ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:85"><expr pos:start="293:9" pos:end="293:84"><call pos:start="293:9" pos:end="293:84"><name pos:start="293:9" pos:end="293:43">memory_region_add_subregion_overlap</name><argument_list pos:start="293:44" pos:end="293:84">(<argument pos:start="293:45" pos:end="293:60"><expr pos:start="293:45" pos:end="293:60"><name pos:start="293:45" pos:end="293:60"><name pos:start="293:45" pos:end="293:47">cpu</name><operator pos:start="293:48" pos:end="293:49">-&gt;</operator><name pos:start="293:50" pos:end="293:60">cpu_as_root</name></name></expr></argument>, <argument pos:start="293:63" pos:end="293:63"><expr pos:start="293:63" pos:end="293:63"><literal type="number" pos:start="293:63" pos:end="293:63">0</literal></expr></argument>, <argument pos:start="293:66" pos:end="293:80"><expr pos:start="293:66" pos:end="293:80"><name pos:start="293:66" pos:end="293:80"><name pos:start="293:66" pos:end="293:68">cpu</name><operator pos:start="293:69" pos:end="293:70">-&gt;</operator><name pos:start="293:71" pos:end="293:80">cpu_as_mem</name></name></expr></argument>, <argument pos:start="293:83" pos:end="293:83"><expr pos:start="293:83" pos:end="293:83"><literal type="number" pos:start="293:83" pos:end="293:83">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:57"><expr pos:start="295:9" pos:end="295:56"><call pos:start="295:9" pos:end="295:56"><name pos:start="295:9" pos:end="295:33">memory_region_set_enabled</name><argument_list pos:start="295:34" pos:end="295:56">(<argument pos:start="295:35" pos:end="295:49"><expr pos:start="295:35" pos:end="295:49"><name pos:start="295:35" pos:end="295:49"><name pos:start="295:35" pos:end="295:37">cpu</name><operator pos:start="295:38" pos:end="295:39">-&gt;</operator><name pos:start="295:40" pos:end="295:49">cpu_as_mem</name></name></expr></argument>, <argument pos:start="295:52" pos:end="295:55"><expr pos:start="295:52" pos:end="295:55"><name pos:start="295:52" pos:end="295:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:59"><expr pos:start="297:9" pos:end="297:58"><call pos:start="297:9" pos:end="297:58"><name pos:start="297:9" pos:end="297:26">address_space_init</name><argument_list pos:start="297:27" pos:end="297:58">(<argument pos:start="297:28" pos:end="297:32"><expr pos:start="297:28" pos:end="297:32"><name pos:start="297:28" pos:end="297:32">newas</name></expr></argument>, <argument pos:start="297:35" pos:end="297:50"><expr pos:start="297:35" pos:end="297:50"><name pos:start="297:35" pos:end="297:50"><name pos:start="297:35" pos:end="297:37">cpu</name><operator pos:start="297:38" pos:end="297:39">-&gt;</operator><name pos:start="297:40" pos:end="297:50">cpu_as_root</name></name></expr></argument>, <argument pos:start="297:53" pos:end="297:57"><expr pos:start="297:53" pos:end="297:57"><literal type="string" pos:start="297:53" pos:end="297:57">"CPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:25"><expr pos:start="299:9" pos:end="299:24"><name pos:start="299:9" pos:end="299:20"><name pos:start="299:9" pos:end="299:10">cs</name><operator pos:start="299:11" pos:end="299:12">-&gt;</operator><name pos:start="299:13" pos:end="299:20">num_ases</name></name> <operator pos:start="299:22" pos:end="299:22">=</operator> <literal type="number" pos:start="299:24" pos:end="299:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:45"><expr pos:start="301:9" pos:end="301:44"><call pos:start="301:9" pos:end="301:44"><name pos:start="301:9" pos:end="301:30">cpu_address_space_init</name><argument_list pos:start="301:31" pos:end="301:44">(<argument pos:start="301:32" pos:end="301:33"><expr pos:start="301:32" pos:end="301:33"><name pos:start="301:32" pos:end="301:33">cs</name></expr></argument>, <argument pos:start="301:36" pos:end="301:40"><expr pos:start="301:36" pos:end="301:40"><name pos:start="301:36" pos:end="301:40">newas</name></expr></argument>, <argument pos:start="301:43" pos:end="301:43"><expr pos:start="301:43" pos:end="301:43"><literal type="number" pos:start="301:43" pos:end="301:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="305:9" pos:end="305:74">/* ... SMRAM with higher priority, linked from /machine/smram.  */</comment>

        <expr_stmt pos:start="307:9" pos:end="307:56"><expr pos:start="307:9" pos:end="307:55"><name pos:start="307:9" pos:end="307:32"><name pos:start="307:9" pos:end="307:11">cpu</name><operator pos:start="307:12" pos:end="307:13">-&gt;</operator><name pos:start="307:14" pos:end="307:25">machine_done</name><operator pos:start="307:26" pos:end="307:26">.</operator><name pos:start="307:27" pos:end="307:32">notify</name></name> <operator pos:start="307:34" pos:end="307:34">=</operator> <name pos:start="307:36" pos:end="307:55">x86_cpu_machine_done</name></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:64"><expr pos:start="309:9" pos:end="309:63"><call pos:start="309:9" pos:end="309:63"><name pos:start="309:9" pos:end="309:43">qemu_add_machine_init_done_notifier</name><argument_list pos:start="309:44" pos:end="309:63">(<argument pos:start="309:45" pos:end="309:62"><expr pos:start="309:45" pos:end="309:62"><operator pos:start="309:45" pos:end="309:45">&amp;</operator><name pos:start="309:46" pos:end="309:62"><name pos:start="309:46" pos:end="309:48">cpu</name><operator pos:start="309:49" pos:end="309:50">-&gt;</operator><name pos:start="309:51" pos:end="309:62">machine_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="313:1" pos:end="313:6">#<cpp:directive pos:start="313:2" pos:end="313:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="317:5" pos:end="317:23"><expr pos:start="317:5" pos:end="317:22"><call pos:start="317:5" pos:end="317:22"><name pos:start="317:5" pos:end="317:18">qemu_init_vcpu</name><argument_list pos:start="317:19" pos:end="317:22">(<argument pos:start="317:20" pos:end="317:21"><expr pos:start="317:20" pos:end="317:21"><name pos:start="317:20" pos:end="317:21">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="321:5" pos:end="335:7">/* Only Intel CPUs support hyperthreading. Even though QEMU fixes this

     * issue by adjusting CPUID_0000_0001_EBX and CPUID_8000_0008_ECX

     * based on inputs (sockets,cores,threads), it is still better to gives

     * users a warning.

     *

     * NOTE: the following code has to follow qemu_init_vcpu(). Otherwise

     * cs-&gt;nr_threads hasn't be populated yet and the checking is incorrect.

     */</comment>

    <if_stmt pos:start="337:5" pos:end="345:5"><if pos:start="337:5" pos:end="345:5">if <condition pos:start="337:8" pos:end="337:63">(<expr pos:start="337:9" pos:end="337:62"><operator pos:start="337:9" pos:end="337:9">!</operator><call pos:start="337:10" pos:end="337:26"><name pos:start="337:10" pos:end="337:21">IS_INTEL_CPU</name><argument_list pos:start="337:22" pos:end="337:26">(<argument pos:start="337:23" pos:end="337:25"><expr pos:start="337:23" pos:end="337:25"><name pos:start="337:23" pos:end="337:25">env</name></expr></argument>)</argument_list></call> <operator pos:start="337:28" pos:end="337:29">&amp;&amp;</operator> <name pos:start="337:31" pos:end="337:44"><name pos:start="337:31" pos:end="337:32">cs</name><operator pos:start="337:33" pos:end="337:34">-&gt;</operator><name pos:start="337:35" pos:end="337:44">nr_threads</name></name> <operator pos:start="337:46" pos:end="337:46">&gt;</operator> <literal type="number" pos:start="337:48" pos:end="337:48">1</literal> <operator pos:start="337:50" pos:end="337:51">&amp;&amp;</operator> <operator pos:start="337:53" pos:end="337:53">!</operator><name pos:start="337:54" pos:end="337:62">ht_warned</name></expr>)</condition> <block pos:start="337:65" pos:end="345:5">{<block_content pos:start="339:9" pos:end="343:25">

        <expr_stmt pos:start="339:9" pos:end="341:48"><expr pos:start="339:9" pos:end="341:47"><call pos:start="339:9" pos:end="341:47"><name pos:start="339:9" pos:end="339:20">error_report</name><argument_list pos:start="339:21" pos:end="341:47">(<argument pos:start="339:22" pos:end="341:46"><expr pos:start="339:22" pos:end="341:46"><literal type="string" pos:start="339:22" pos:end="339:79">"AMD CPU doesn't support hyperthreading. Please configure"</literal>

                     <literal type="string" pos:start="341:22" pos:end="341:46">" -smp options properly."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:25"><expr pos:start="343:9" pos:end="343:24"><name pos:start="343:9" pos:end="343:17">ht_warned</name> <operator pos:start="343:19" pos:end="343:19">=</operator> <name pos:start="343:21" pos:end="343:24">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="349:5" pos:end="349:42"><expr pos:start="349:5" pos:end="349:41"><call pos:start="349:5" pos:end="349:41"><name pos:start="349:5" pos:end="349:24">x86_cpu_apic_realize</name><argument_list pos:start="349:25" pos:end="349:41">(<argument pos:start="349:26" pos:end="349:28"><expr pos:start="349:26" pos:end="349:28"><name pos:start="349:26" pos:end="349:28">cpu</name></expr></argument>, <argument pos:start="349:31" pos:end="349:40"><expr pos:start="349:31" pos:end="349:40"><operator pos:start="349:31" pos:end="349:31">&amp;</operator><name pos:start="349:32" pos:end="349:40">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="351:5" pos:end="355:5"><if pos:start="351:5" pos:end="355:5">if <condition pos:start="351:8" pos:end="351:26">(<expr pos:start="351:9" pos:end="351:25"><name pos:start="351:9" pos:end="351:17">local_err</name> <operator pos:start="351:19" pos:end="351:20">!=</operator> <name pos:start="351:22" pos:end="351:25">NULL</name></expr>)</condition> <block pos:start="351:28" pos:end="355:5">{<block_content pos:start="353:9" pos:end="353:17">

        <goto pos:start="353:9" pos:end="353:17">goto <name pos:start="353:14" pos:end="353:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:18"><expr pos:start="357:5" pos:end="357:17"><call pos:start="357:5" pos:end="357:17"><name pos:start="357:5" pos:end="357:13">cpu_reset</name><argument_list pos:start="357:14" pos:end="357:17">(<argument pos:start="357:15" pos:end="357:16"><expr pos:start="357:15" pos:end="357:16"><name pos:start="357:15" pos:end="357:16">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="361:5" pos:end="361:41"><expr pos:start="361:5" pos:end="361:40"><call pos:start="361:5" pos:end="361:40"><name pos:start="361:5" pos:end="361:23"><name pos:start="361:5" pos:end="361:7">xcc</name><operator pos:start="361:8" pos:end="361:9">-&gt;</operator><name pos:start="361:10" pos:end="361:23">parent_realize</name></name><argument_list pos:start="361:24" pos:end="361:40">(<argument pos:start="361:25" pos:end="361:27"><expr pos:start="361:25" pos:end="361:27"><name pos:start="361:25" pos:end="361:27">dev</name></expr></argument>, <argument pos:start="361:30" pos:end="361:39"><expr pos:start="361:30" pos:end="361:39"><operator pos:start="361:30" pos:end="361:30">&amp;</operator><name pos:start="361:31" pos:end="361:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="365:1" pos:end="365:4"><name pos:start="365:1" pos:end="365:3">out</name>:</label>

    <if_stmt pos:start="367:5" pos:end="373:5"><if pos:start="367:5" pos:end="373:5">if <condition pos:start="367:8" pos:end="367:26">(<expr pos:start="367:9" pos:end="367:25"><name pos:start="367:9" pos:end="367:17">local_err</name> <operator pos:start="367:19" pos:end="367:20">!=</operator> <name pos:start="367:22" pos:end="367:25">NULL</name></expr>)</condition> <block pos:start="367:28" pos:end="373:5">{<block_content pos:start="369:9" pos:end="371:15">

        <expr_stmt pos:start="369:9" pos:end="369:41"><expr pos:start="369:9" pos:end="369:40"><call pos:start="369:9" pos:end="369:40"><name pos:start="369:9" pos:end="369:23">error_propagate</name><argument_list pos:start="369:24" pos:end="369:40">(<argument pos:start="369:25" pos:end="369:28"><expr pos:start="369:25" pos:end="369:28"><name pos:start="369:25" pos:end="369:28">errp</name></expr></argument>, <argument pos:start="369:31" pos:end="369:39"><expr pos:start="369:31" pos:end="369:39"><name pos:start="369:31" pos:end="369:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="371:9" pos:end="371:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
