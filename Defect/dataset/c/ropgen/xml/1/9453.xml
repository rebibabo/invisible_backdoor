<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9453.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:18"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">FWCfgState</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:26">pc_memory_init</name><parameter_list pos:start="1:27" pos:end="7:51">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:39">MachineState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:48">machine</name></decl></parameter>,
                           <parameter pos:start="2:28" pos:end="2:54"><decl pos:start="2:28" pos:end="2:54"><type pos:start="2:28" pos:end="2:54"><name pos:start="2:28" pos:end="2:39">MemoryRegion</name> <modifier pos:start="2:41" pos:end="2:41">*</modifier></type><name pos:start="2:42" pos:end="2:54">system_memory</name></decl></parameter>,
                           <parameter pos:start="3:28" pos:end="3:55"><decl pos:start="3:28" pos:end="3:55"><type pos:start="3:28" pos:end="3:55"><name pos:start="3:28" pos:end="3:37">ram_addr_t</name></type> <name pos:start="3:39" pos:end="3:55">below_4g_mem_size</name></decl></parameter>,
                           <parameter pos:start="4:28" pos:end="4:55"><decl pos:start="4:28" pos:end="4:55"><type pos:start="4:28" pos:end="4:55"><name pos:start="4:28" pos:end="4:37">ram_addr_t</name></type> <name pos:start="4:39" pos:end="4:55">above_4g_mem_size</name></decl></parameter>,
                           <parameter pos:start="5:28" pos:end="5:51"><decl pos:start="5:28" pos:end="5:51"><type pos:start="5:28" pos:end="5:51"><name pos:start="5:28" pos:end="5:39">MemoryRegion</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:51">rom_memory</name></decl></parameter>,
                           <parameter pos:start="6:28" pos:end="6:52"><decl pos:start="6:28" pos:end="6:52"><type pos:start="6:28" pos:end="6:52"><name pos:start="6:28" pos:end="6:39">MemoryRegion</name> <modifier pos:start="6:41" pos:end="6:41">*</modifier><modifier pos:start="6:42" pos:end="6:42">*</modifier></type><name pos:start="6:43" pos:end="6:52">ram_memory</name></decl></parameter>,
                           <parameter pos:start="7:28" pos:end="7:50"><decl pos:start="7:28" pos:end="7:50"><type pos:start="7:28" pos:end="7:50"><name pos:start="7:28" pos:end="7:38">PcGuestInfo</name> <modifier pos:start="7:40" pos:end="7:40">*</modifier></type><name pos:start="7:41" pos:end="7:50">guest_info</name></decl></parameter>)</parameter_list>
<block pos:start="8:1" pos:end="85:18">{<block_content pos:start="9:5" pos:end="85:18">
    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">linux_boot</name></decl>, <decl pos:start="9:21" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:21">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:38"><decl pos:start="10:5" pos:end="10:21"><type pos:start="10:5" pos:end="10:18"><name pos:start="10:5" pos:end="10:16">MemoryRegion</name> <modifier pos:start="10:18" pos:end="10:18">*</modifier></type><name pos:start="10:19" pos:end="10:21">ram</name></decl>, <decl pos:start="10:24" pos:end="10:37"><type ref="prev" pos:start="10:5" pos:end="10:18"><modifier pos:start="10:24" pos:end="10:24">*</modifier></type><name pos:start="10:25" pos:end="10:37">option_rom_mr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:30">ram_below_4g</name></decl>, <decl pos:start="11:33" pos:end="11:45"><type ref="prev" pos:start="11:5" pos:end="11:18"><modifier pos:start="11:33" pos:end="11:33">*</modifier></type><name pos:start="11:34" pos:end="11:45">ram_above_4g</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:23"><decl pos:start="12:5" pos:end="12:22"><type pos:start="12:5" pos:end="12:16"><name pos:start="12:5" pos:end="12:14">FWCfgState</name> <modifier pos:start="12:16" pos:end="12:16">*</modifier></type><name pos:start="12:17" pos:end="12:22">fw_cfg</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">PCMachineState</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:24">pcms</name> <init pos:start="13:26" pos:end="13:46">= <expr pos:start="13:28" pos:end="13:46"><call pos:start="13:28" pos:end="13:46"><name pos:start="13:28" pos:end="13:37">PC_MACHINE</name><argument_list pos:start="13:38" pos:end="13:46">(<argument pos:start="13:39" pos:end="13:45"><expr pos:start="13:39" pos:end="13:45"><name pos:start="13:39" pos:end="13:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:71"><expr pos:start="14:5" pos:end="14:70"><call pos:start="14:5" pos:end="14:70"><name pos:start="14:5" pos:end="14:10">assert</name><argument_list pos:start="14:11" pos:end="14:70">(<argument pos:start="14:12" pos:end="14:69"><expr pos:start="14:12" pos:end="14:69"><name pos:start="14:12" pos:end="14:28"><name pos:start="14:12" pos:end="14:18">machine</name><operator pos:start="14:19" pos:end="14:20">-&gt;</operator><name pos:start="14:21" pos:end="14:28">ram_size</name></name> <operator pos:start="14:30" pos:end="14:31">==</operator> <name pos:start="14:33" pos:end="14:49">below_4g_mem_size</name> <operator pos:start="14:51" pos:end="14:51">+</operator> <name pos:start="14:53" pos:end="14:69">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:52"><expr pos:start="15:5" pos:end="15:51"><name pos:start="15:5" pos:end="15:14">linux_boot</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <operator pos:start="15:18" pos:end="15:18">(</operator><name pos:start="15:19" pos:end="15:42"><name pos:start="15:19" pos:end="15:25">machine</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:42">kernel_filename</name></name> <operator pos:start="15:44" pos:end="15:45">!=</operator> <name pos:start="15:47" pos:end="15:50">NULL</name><operator pos:start="15:51" pos:end="15:51">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="16:5" pos:end="19:7">/* Allocate RAM.  We allocate it as a single memory region and use
     * aliases to address portions of it, mostly for backwards compatibility
     * with older qemus that used qemu_ram_alloc().
     */</comment>
    <expr_stmt pos:start="20:5" pos:end="20:33"><expr pos:start="20:5" pos:end="20:32"><name pos:start="20:5" pos:end="20:7">ram</name> <operator pos:start="20:9" pos:end="20:9">=</operator> <call pos:start="20:11" pos:end="20:32"><name pos:start="20:11" pos:end="20:18">g_malloc</name><argument_list pos:start="20:19" pos:end="20:32">(<argument pos:start="20:20" pos:end="20:31"><expr pos:start="20:20" pos:end="20:31"><sizeof pos:start="20:20" pos:end="20:31">sizeof<argument_list pos:start="20:26" pos:end="20:31">(<argument pos:start="20:27" pos:end="20:30"><expr pos:start="20:27" pos:end="20:30"><operator pos:start="20:27" pos:end="20:27">*</operator><name pos:start="20:28" pos:end="20:30">ram</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="22:60"><expr pos:start="21:5" pos:end="22:59"><call pos:start="21:5" pos:end="22:59"><name pos:start="21:5" pos:end="21:40">memory_region_allocate_system_memory</name><argument_list pos:start="21:41" pos:end="22:59">(<argument pos:start="21:42" pos:end="21:44"><expr pos:start="21:42" pos:end="21:44"><name pos:start="21:42" pos:end="21:44">ram</name></expr></argument>, <argument pos:start="21:47" pos:end="21:50"><expr pos:start="21:47" pos:end="21:50"><name pos:start="21:47" pos:end="21:50">NULL</name></expr></argument>, <argument pos:start="21:53" pos:end="21:60"><expr pos:start="21:53" pos:end="21:60"><literal type="string" pos:start="21:53" pos:end="21:60">"pc.ram"</literal></expr></argument>,
                                         <argument pos:start="22:42" pos:end="22:58"><expr pos:start="22:42" pos:end="22:58"><name pos:start="22:42" pos:end="22:58"><name pos:start="22:42" pos:end="22:48">machine</name><operator pos:start="22:49" pos:end="22:50">-&gt;</operator><name pos:start="22:51" pos:end="22:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:15">ram_memory</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:21">ram</name></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:51"><expr pos:start="24:5" pos:end="24:50"><name pos:start="24:5" pos:end="24:16">ram_below_4g</name> <operator pos:start="24:18" pos:end="24:18">=</operator> <call pos:start="24:20" pos:end="24:50"><name pos:start="24:20" pos:end="24:27">g_malloc</name><argument_list pos:start="24:28" pos:end="24:50">(<argument pos:start="24:29" pos:end="24:49"><expr pos:start="24:29" pos:end="24:49"><sizeof pos:start="24:29" pos:end="24:49">sizeof<argument_list pos:start="24:35" pos:end="24:49">(<argument pos:start="24:36" pos:end="24:48"><expr pos:start="24:36" pos:end="24:48"><operator pos:start="24:36" pos:end="24:36">*</operator><name pos:start="24:37" pos:end="24:48">ram_below_4g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="26:51"><expr pos:start="25:5" pos:end="26:50"><call pos:start="25:5" pos:end="26:50"><name pos:start="25:5" pos:end="25:28">memory_region_init_alias</name><argument_list pos:start="25:29" pos:end="26:50">(<argument pos:start="25:30" pos:end="25:41"><expr pos:start="25:30" pos:end="25:41"><name pos:start="25:30" pos:end="25:41">ram_below_4g</name></expr></argument>, <argument pos:start="25:44" pos:end="25:47"><expr pos:start="25:44" pos:end="25:47"><name pos:start="25:44" pos:end="25:47">NULL</name></expr></argument>, <argument pos:start="25:50" pos:end="25:63"><expr pos:start="25:50" pos:end="25:63"><literal type="string" pos:start="25:50" pos:end="25:63">"ram-below-4g"</literal></expr></argument>, <argument pos:start="25:66" pos:end="25:68"><expr pos:start="25:66" pos:end="25:68"><name pos:start="25:66" pos:end="25:68">ram</name></expr></argument>,
                             <argument pos:start="26:30" pos:end="26:30"><expr pos:start="26:30" pos:end="26:30"><literal type="number" pos:start="26:30" pos:end="26:30">0</literal></expr></argument>, <argument pos:start="26:33" pos:end="26:49"><expr pos:start="26:33" pos:end="26:49"><name pos:start="26:33" pos:end="26:49">below_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:64"><expr pos:start="27:5" pos:end="27:63"><call pos:start="27:5" pos:end="27:63"><name pos:start="27:5" pos:end="27:31">memory_region_add_subregion</name><argument_list pos:start="27:32" pos:end="27:63">(<argument pos:start="27:33" pos:end="27:45"><expr pos:start="27:33" pos:end="27:45"><name pos:start="27:33" pos:end="27:45">system_memory</name></expr></argument>, <argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><literal type="number" pos:start="27:48" pos:end="27:48">0</literal></expr></argument>, <argument pos:start="27:51" pos:end="27:62"><expr pos:start="27:51" pos:end="27:62"><name pos:start="27:51" pos:end="27:62">ram_below_4g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:51"><expr pos:start="28:5" pos:end="28:50"><call pos:start="28:5" pos:end="28:50"><name pos:start="28:5" pos:end="28:18">e820_add_entry</name><argument_list pos:start="28:19" pos:end="28:50">(<argument pos:start="28:20" pos:end="28:20"><expr pos:start="28:20" pos:end="28:20"><literal type="number" pos:start="28:20" pos:end="28:20">0</literal></expr></argument>, <argument pos:start="28:23" pos:end="28:39"><expr pos:start="28:23" pos:end="28:39"><name pos:start="28:23" pos:end="28:39">below_4g_mem_size</name></expr></argument>, <argument pos:start="28:42" pos:end="28:49"><expr pos:start="28:42" pos:end="28:49"><name pos:start="28:42" pos:end="28:49">E820_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="85:18"><if pos:start="29:5" pos:end="85:18">if <condition pos:start="29:8" pos:end="29:30">(<expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:25">above_4g_mem_size</name> <operator pos:start="29:27" pos:end="29:27">&gt;</operator> <literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr>)</condition> <block pos:start="29:32" pos:end="85:18">{<block_content pos:start="30:9" pos:end="85:18">
        <expr_stmt pos:start="30:9" pos:end="30:55"><expr pos:start="30:9" pos:end="30:54"><name pos:start="30:9" pos:end="30:20">ram_above_4g</name> <operator pos:start="30:22" pos:end="30:22">=</operator> <call pos:start="30:24" pos:end="30:54"><name pos:start="30:24" pos:end="30:31">g_malloc</name><argument_list pos:start="30:32" pos:end="30:54">(<argument pos:start="30:33" pos:end="30:53"><expr pos:start="30:33" pos:end="30:53"><sizeof pos:start="30:33" pos:end="30:53">sizeof<argument_list pos:start="30:39" pos:end="30:53">(<argument pos:start="30:40" pos:end="30:52"><expr pos:start="30:40" pos:end="30:52"><operator pos:start="30:40" pos:end="30:40">*</operator><name pos:start="30:41" pos:end="30:52">ram_above_4g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="32:71"><expr pos:start="31:9" pos:end="32:70"><call pos:start="31:9" pos:end="32:70"><name pos:start="31:9" pos:end="31:32">memory_region_init_alias</name><argument_list pos:start="31:33" pos:end="32:70">(<argument pos:start="31:34" pos:end="31:45"><expr pos:start="31:34" pos:end="31:45"><name pos:start="31:34" pos:end="31:45">ram_above_4g</name></expr></argument>, <argument pos:start="31:48" pos:end="31:51"><expr pos:start="31:48" pos:end="31:51"><name pos:start="31:48" pos:end="31:51">NULL</name></expr></argument>, <argument pos:start="31:54" pos:end="31:67"><expr pos:start="31:54" pos:end="31:67"><literal type="string" pos:start="31:54" pos:end="31:67">"ram-above-4g"</literal></expr></argument>, <argument pos:start="31:70" pos:end="31:72"><expr pos:start="31:70" pos:end="31:72"><name pos:start="31:70" pos:end="31:72">ram</name></expr></argument>,
                                 <argument pos:start="32:34" pos:end="32:50"><expr pos:start="32:34" pos:end="32:50"><name pos:start="32:34" pos:end="32:50">below_4g_mem_size</name></expr></argument>, <argument pos:start="32:53" pos:end="32:69"><expr pos:start="32:53" pos:end="32:69"><name pos:start="32:53" pos:end="32:69">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="34:50"><expr pos:start="33:9" pos:end="34:49"><call pos:start="33:9" pos:end="34:49"><name pos:start="33:9" pos:end="33:35">memory_region_add_subregion</name><argument_list pos:start="33:36" pos:end="34:49">(<argument pos:start="33:37" pos:end="33:49"><expr pos:start="33:37" pos:end="33:49"><name pos:start="33:37" pos:end="33:49">system_memory</name></expr></argument>, <argument pos:start="33:52" pos:end="33:65"><expr pos:start="33:52" pos:end="33:65"><literal type="number" pos:start="33:52" pos:end="33:65">0x100000000ULL</literal></expr></argument>,
                                    <argument pos:start="34:37" pos:end="34:48"><expr pos:start="34:37" pos:end="34:48"><name pos:start="34:37" pos:end="34:48">ram_above_4g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:68"><expr pos:start="35:9" pos:end="35:67"><call pos:start="35:9" pos:end="35:67"><name pos:start="35:9" pos:end="35:22">e820_add_entry</name><argument_list pos:start="35:23" pos:end="35:67">(<argument pos:start="35:24" pos:end="35:37"><expr pos:start="35:24" pos:end="35:37"><literal type="number" pos:start="35:24" pos:end="35:37">0x100000000ULL</literal></expr></argument>, <argument pos:start="35:40" pos:end="35:56"><expr pos:start="35:40" pos:end="35:56"><name pos:start="35:40" pos:end="35:56">above_4g_mem_size</name></expr></argument>, <argument pos:start="35:59" pos:end="35:66"><expr pos:start="35:59" pos:end="35:66"><name pos:start="35:59" pos:end="35:66">E820_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="36:5" pos:end="85:18"><if pos:start="36:5" pos:end="85:18">if <condition pos:start="36:8" pos:end="38:53">(<expr pos:start="36:9" pos:end="38:52"><operator pos:start="36:9" pos:end="36:9">!</operator><name pos:start="36:10" pos:end="36:40"><name pos:start="36:10" pos:end="36:19">guest_info</name><operator pos:start="36:20" pos:end="36:21">-&gt;</operator><name pos:start="36:22" pos:end="36:40">has_reserved_memory</name></name> <operator pos:start="36:42" pos:end="36:43">&amp;&amp;</operator>
        <operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:27"><name pos:start="37:10" pos:end="37:16">machine</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:27">ram_slots</name></name> <operator pos:start="37:29" pos:end="37:30">||</operator>
         <operator pos:start="38:10" pos:end="38:10">(</operator><name pos:start="38:11" pos:end="38:30"><name pos:start="38:11" pos:end="38:17">machine</name><operator pos:start="38:18" pos:end="38:19">-&gt;</operator><name pos:start="38:20" pos:end="38:30">maxram_size</name></name> <operator pos:start="38:32" pos:end="38:32">&gt;</operator> <name pos:start="38:34" pos:end="38:50"><name pos:start="38:34" pos:end="38:40">machine</name><operator pos:start="38:41" pos:end="38:42">-&gt;</operator><name pos:start="38:43" pos:end="38:50">ram_size</name></name><operator pos:start="38:51" pos:end="38:51">)</operator><operator pos:start="38:52" pos:end="38:52">)</operator></expr>)</condition> <block pos:start="38:55" pos:end="85:18">{<block_content pos:start="39:9" pos:end="85:18">
        <decl_stmt pos:start="39:9" pos:end="39:54"><decl pos:start="39:9" pos:end="39:53"><type pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:20">MachineClass</name> <modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:24">mc</name> <init pos:start="39:26" pos:end="39:53">= <expr pos:start="39:28" pos:end="39:53"><call pos:start="39:28" pos:end="39:53"><name pos:start="39:28" pos:end="39:44">MACHINE_GET_CLASS</name><argument_list pos:start="39:45" pos:end="39:53">(<argument pos:start="39:46" pos:end="39:52"><expr pos:start="39:46" pos:end="39:52"><name pos:start="39:46" pos:end="39:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="40:9" pos:end="41:31"><expr pos:start="40:9" pos:end="41:30"><call pos:start="40:9" pos:end="41:30"><name pos:start="40:9" pos:end="40:20">error_report</name><argument_list pos:start="40:21" pos:end="41:30">(<argument pos:start="40:22" pos:end="40:73"><expr pos:start="40:22" pos:end="40:73"><literal type="string" pos:start="40:22" pos:end="40:73">"\"-memory 'slots|maxmem'\" is not supported by: %s"</literal></expr></argument>,
                     <argument pos:start="41:22" pos:end="41:29"><expr pos:start="41:22" pos:end="41:29"><name pos:start="41:22" pos:end="41:29"><name pos:start="41:22" pos:end="41:23">mc</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:29">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="42:5" pos:end="42:49">/* initialize hotplug memory address space */</comment>
    <if_stmt pos:start="43:5" pos:end="85:18"><if pos:start="43:5" pos:end="85:18">if <condition pos:start="43:8" pos:end="44:51">(<expr pos:start="43:9" pos:end="44:50"><name pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:18">guest_info</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:39">has_reserved_memory</name></name> <operator pos:start="43:41" pos:end="43:42">&amp;&amp;</operator>
        <operator pos:start="44:9" pos:end="44:9">(</operator><name pos:start="44:10" pos:end="44:26"><name pos:start="44:10" pos:end="44:16">machine</name><operator pos:start="44:17" pos:end="44:18">-&gt;</operator><name pos:start="44:19" pos:end="44:26">ram_size</name></name> <operator pos:start="44:28" pos:end="44:28">&lt;</operator> <name pos:start="44:30" pos:end="44:49"><name pos:start="44:30" pos:end="44:36">machine</name><operator pos:start="44:37" pos:end="44:38">-&gt;</operator><name pos:start="44:39" pos:end="44:49">maxram_size</name></name><operator pos:start="44:50" pos:end="44:50">)</operator></expr>)</condition> <block pos:start="44:53" pos:end="85:18">{<block_content pos:start="45:9" pos:end="85:18">
        <decl_stmt pos:start="45:9" pos:end="46:53"><decl pos:start="45:9" pos:end="46:52"><type pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:18">ram_addr_t</name></type> <name pos:start="45:20" pos:end="45:35">hotplug_mem_size</name> <init pos:start="45:37" pos:end="46:52">=
            <expr pos:start="46:13" pos:end="46:52"><name pos:start="46:13" pos:end="46:32"><name pos:start="46:13" pos:end="46:19">machine</name><operator pos:start="46:20" pos:end="46:21">-&gt;</operator><name pos:start="46:22" pos:end="46:32">maxram_size</name></name> <operator pos:start="46:34" pos:end="46:34">-</operator> <name pos:start="46:36" pos:end="46:52"><name pos:start="46:36" pos:end="46:42">machine</name><operator pos:start="46:43" pos:end="46:44">-&gt;</operator><name pos:start="46:45" pos:end="46:52">ram_size</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="47:9" pos:end="85:18"><if pos:start="47:9" pos:end="85:18">if <condition pos:start="47:12" pos:end="47:52">(<expr pos:start="47:13" pos:end="47:51"><name pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:19">machine</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:30">ram_slots</name></name> <operator pos:start="47:32" pos:end="47:32">&gt;</operator> <name pos:start="47:34" pos:end="47:51">ACPI_MAX_RAM_SLOTS</name></expr>)</condition> <block pos:start="47:54" pos:end="85:18">{<block_content pos:start="48:13" pos:end="85:18">
            <expr_stmt pos:start="48:13" pos:end="49:45"><expr pos:start="48:13" pos:end="49:44"><call pos:start="48:13" pos:end="49:44"><name pos:start="48:13" pos:end="48:24">error_report</name><argument_list pos:start="48:25" pos:end="49:44">(<argument pos:start="48:26" pos:end="48:70"><expr pos:start="48:26" pos:end="48:70"><literal type="string" pos:start="48:26" pos:end="48:64">"unsupported amount of memory slots: %"</literal><name pos:start="48:65" pos:end="48:70">PRIu64</name></expr></argument>,
                         <argument pos:start="49:26" pos:end="49:43"><expr pos:start="49:26" pos:end="49:43"><name pos:start="49:26" pos:end="49:43"><name pos:start="49:26" pos:end="49:32">machine</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:43">ram_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="51:69"><expr pos:start="50:9" pos:end="51:68"><name pos:start="50:9" pos:end="50:33"><name pos:start="50:9" pos:end="50:12">pcms</name><operator pos:start="50:13" pos:end="50:14">-&gt;</operator><name pos:start="50:15" pos:end="50:33">hotplug_memory_base</name></name> <operator pos:start="50:35" pos:end="50:35">=</operator>
            <call pos:start="51:13" pos:end="51:68"><name pos:start="51:13" pos:end="51:20">ROUND_UP</name><argument_list pos:start="51:21" pos:end="51:68">(<argument pos:start="51:22" pos:end="51:55"><expr pos:start="51:22" pos:end="51:55"><literal type="number" pos:start="51:22" pos:end="51:37">0x100000000ULL</literal> <operator pos:start="51:37" pos:end="51:37">+</operator> <name pos:start="51:39" pos:end="51:55">above_4g_mem_size</name></expr></argument>, <argument pos:start="51:58" pos:end="51:67"><expr pos:start="51:58" pos:end="51:67"><literal type="number" pos:start="51:58" pos:end="51:61">1ULL</literal> <operator pos:start="51:63" pos:end="51:64">&lt;&lt;</operator> <literal type="number" pos:start="51:66" pos:end="51:67">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="52:9" pos:end="85:18"><if pos:start="52:9" pos:end="85:18">if <condition pos:start="52:12" pos:end="52:39">(<expr pos:start="52:13" pos:end="52:38"><name pos:start="52:13" pos:end="52:38"><name pos:start="52:13" pos:end="52:16">pcms</name><operator pos:start="52:17" pos:end="52:18">-&gt;</operator><name pos:start="52:19" pos:end="52:38">enforce_aligned_dimm</name></name></expr>)</condition> <block pos:start="52:41" pos:end="85:18">{<block_content pos:start="54:13" pos:end="85:18">
            <comment type="block" pos:start="53:13" pos:end="53:77">/* size hotplug region assuming 1G page max alignment per slot */</comment>
            <expr_stmt pos:start="54:13" pos:end="54:66"><expr pos:start="54:13" pos:end="54:65"><name pos:start="54:13" pos:end="54:28">hotplug_mem_size</name> <operator pos:start="54:30" pos:end="54:31">+=</operator> <operator pos:start="54:33" pos:end="54:33">(</operator><literal type="number" pos:start="54:34" pos:end="54:37">1ULL</literal> <operator pos:start="54:39" pos:end="54:40">&lt;&lt;</operator> <literal type="number" pos:start="54:42" pos:end="54:43">30</literal><operator pos:start="54:44" pos:end="54:44">)</operator> <operator pos:start="54:46" pos:end="54:46">*</operator> <name pos:start="54:48" pos:end="54:65"><name pos:start="54:48" pos:end="54:54">machine</name><operator pos:start="54:55" pos:end="54:56">-&gt;</operator><name pos:start="54:57" pos:end="54:65">ram_slots</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="55:9" pos:end="85:18"><if pos:start="55:9" pos:end="85:18">if <condition pos:start="55:12" pos:end="56:29">(<expr pos:start="55:13" pos:end="56:28"><operator pos:start="55:13" pos:end="55:13">(</operator><name pos:start="55:14" pos:end="55:38"><name pos:start="55:14" pos:end="55:17">pcms</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:38">hotplug_memory_base</name></name> <operator pos:start="55:40" pos:end="55:40">+</operator> <name pos:start="55:42" pos:end="55:57">hotplug_mem_size</name><operator pos:start="55:58" pos:end="55:58">)</operator> <operator pos:start="55:60" pos:end="55:60">&lt;</operator>
            <name pos:start="56:13" pos:end="56:28">hotplug_mem_size</name></expr>)</condition> <block pos:start="56:31" pos:end="85:18">{<block_content pos:start="57:13" pos:end="85:18">
            <expr_stmt pos:start="57:13" pos:end="58:47"><expr pos:start="57:13" pos:end="58:46"><call pos:start="57:13" pos:end="58:46"><name pos:start="57:13" pos:end="57:24">error_report</name><argument_list pos:start="57:25" pos:end="58:46">(<argument pos:start="57:26" pos:end="57:78"><expr pos:start="57:26" pos:end="57:78"><literal type="string" pos:start="57:26" pos:end="57:65">"unsupported amount of maximum memory: "</literal> <name pos:start="57:67" pos:end="57:78">RAM_ADDR_FMT</name></expr></argument>,
                         <argument pos:start="58:26" pos:end="58:45"><expr pos:start="58:26" pos:end="58:45"><name pos:start="58:26" pos:end="58:45"><name pos:start="58:26" pos:end="58:32">machine</name><operator pos:start="58:33" pos:end="58:34">-&gt;</operator><name pos:start="58:35" pos:end="58:45">maxram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="59:9" pos:end="60:63"><expr pos:start="59:9" pos:end="60:62"><call pos:start="59:9" pos:end="60:62"><name pos:start="59:9" pos:end="59:26">memory_region_init</name><argument_list pos:start="59:27" pos:end="60:62">(<argument pos:start="59:28" pos:end="59:48"><expr pos:start="59:28" pos:end="59:48"><operator pos:start="59:28" pos:end="59:28">&amp;</operator><name pos:start="59:29" pos:end="59:48"><name pos:start="59:29" pos:end="59:32">pcms</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:48">hotplug_memory</name></name></expr></argument>, <argument pos:start="59:51" pos:end="59:62"><expr pos:start="59:51" pos:end="59:62"><call pos:start="59:51" pos:end="59:62"><name pos:start="59:51" pos:end="59:56">OBJECT</name><argument_list pos:start="59:57" pos:end="59:62">(<argument pos:start="59:58" pos:end="59:61"><expr pos:start="59:58" pos:end="59:61"><name pos:start="59:58" pos:end="59:61">pcms</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument pos:start="60:28" pos:end="60:43"><expr pos:start="60:28" pos:end="60:43"><literal type="string" pos:start="60:28" pos:end="60:43">"hotplug-memory"</literal></expr></argument>, <argument pos:start="60:46" pos:end="60:61"><expr pos:start="60:46" pos:end="60:61"><name pos:start="60:46" pos:end="60:61">hotplug_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="62:59"><expr pos:start="61:9" pos:end="62:58"><call pos:start="61:9" pos:end="62:58"><name pos:start="61:9" pos:end="61:35">memory_region_add_subregion</name><argument_list pos:start="61:36" pos:end="62:58">(<argument pos:start="61:37" pos:end="61:49"><expr pos:start="61:37" pos:end="61:49"><name pos:start="61:37" pos:end="61:49">system_memory</name></expr></argument>, <argument pos:start="61:52" pos:end="61:76"><expr pos:start="61:52" pos:end="61:76"><name pos:start="61:52" pos:end="61:76"><name pos:start="61:52" pos:end="61:55">pcms</name><operator pos:start="61:56" pos:end="61:57">-&gt;</operator><name pos:start="61:58" pos:end="61:76">hotplug_memory_base</name></name></expr></argument>,
                                    <argument pos:start="62:37" pos:end="62:57"><expr pos:start="62:37" pos:end="62:57"><operator pos:start="62:37" pos:end="62:37">&amp;</operator><name pos:start="62:38" pos:end="62:57"><name pos:start="62:38" pos:end="62:41">pcms</name><operator pos:start="62:42" pos:end="62:43">-&gt;</operator><name pos:start="62:44" pos:end="62:57">hotplug_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="63:5" pos:end="63:39">/* Initialize PC system firmware */</comment>
    <expr_stmt pos:start="64:5" pos:end="64:66"><expr pos:start="64:5" pos:end="64:65"><call pos:start="64:5" pos:end="64:65"><name pos:start="64:5" pos:end="64:27">pc_system_firmware_init</name><argument_list pos:start="64:28" pos:end="64:65">(<argument pos:start="64:29" pos:end="64:38"><expr pos:start="64:29" pos:end="64:38"><name pos:start="64:29" pos:end="64:38">rom_memory</name></expr></argument>, <argument pos:start="64:41" pos:end="64:64"><expr pos:start="64:41" pos:end="64:64"><name pos:start="64:41" pos:end="64:64"><name pos:start="64:41" pos:end="64:50">guest_info</name><operator pos:start="64:51" pos:end="64:52">-&gt;</operator><name pos:start="64:53" pos:end="64:64">isapc_ram_fw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:53"><expr pos:start="65:5" pos:end="65:52"><name pos:start="65:5" pos:end="65:17">option_rom_mr</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:52"><name pos:start="65:21" pos:end="65:28">g_malloc</name><argument_list pos:start="65:29" pos:end="65:52">(<argument pos:start="65:30" pos:end="65:51"><expr pos:start="65:30" pos:end="65:51"><sizeof pos:start="65:30" pos:end="65:51">sizeof<argument_list pos:start="65:36" pos:end="65:51">(<argument pos:start="65:37" pos:end="65:50"><expr pos:start="65:37" pos:end="65:50"><operator pos:start="65:37" pos:end="65:37">*</operator><name pos:start="65:38" pos:end="65:50">option_rom_mr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="67:41"><expr pos:start="66:5" pos:end="67:40"><call pos:start="66:5" pos:end="67:40"><name pos:start="66:5" pos:end="66:26">memory_region_init_ram</name><argument_list pos:start="66:27" pos:end="67:40">(<argument pos:start="66:28" pos:end="66:40"><expr pos:start="66:28" pos:end="66:40"><name pos:start="66:28" pos:end="66:40">option_rom_mr</name></expr></argument>, <argument pos:start="66:43" pos:end="66:46"><expr pos:start="66:43" pos:end="66:46"><name pos:start="66:43" pos:end="66:46">NULL</name></expr></argument>, <argument pos:start="66:49" pos:end="66:56"><expr pos:start="66:49" pos:end="66:56"><literal type="string" pos:start="66:49" pos:end="66:56">"pc.rom"</literal></expr></argument>, <argument pos:start="66:59" pos:end="66:69"><expr pos:start="66:59" pos:end="66:69"><name pos:start="66:59" pos:end="66:69">PC_ROM_SIZE</name></expr></argument>,
                           <argument pos:start="67:28" pos:end="67:39"><expr pos:start="67:28" pos:end="67:39"><operator pos:start="67:28" pos:end="67:28">&amp;</operator><name pos:start="67:29" pos:end="67:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="68:47"><expr pos:start="68:5" pos:end="68:46"><call pos:start="68:5" pos:end="68:46"><name pos:start="68:5" pos:end="68:31">vmstate_register_ram_global</name><argument_list pos:start="68:32" pos:end="68:46">(<argument pos:start="68:33" pos:end="68:45"><expr pos:start="68:33" pos:end="68:45"><name pos:start="68:33" pos:end="68:45">option_rom_mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="72:43"><expr pos:start="69:5" pos:end="72:42"><call pos:start="69:5" pos:end="72:42"><name pos:start="69:5" pos:end="69:39">memory_region_add_subregion_overlap</name><argument_list pos:start="69:40" pos:end="72:42">(<argument pos:start="69:41" pos:end="69:50"><expr pos:start="69:41" pos:end="69:50"><name pos:start="69:41" pos:end="69:50">rom_memory</name></expr></argument>,
                                        <argument pos:start="70:41" pos:end="70:54"><expr pos:start="70:41" pos:end="70:54"><name pos:start="70:41" pos:end="70:54">PC_ROM_MIN_VGA</name></expr></argument>,
                                        <argument pos:start="71:41" pos:end="71:53"><expr pos:start="71:41" pos:end="71:53"><name pos:start="71:41" pos:end="71:53">option_rom_mr</name></expr></argument>,
                                        <argument pos:start="72:41" pos:end="72:41"><expr pos:start="72:41" pos:end="72:41"><literal type="number" pos:start="72:41" pos:end="72:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:31"><expr pos:start="73:5" pos:end="73:30"><name pos:start="73:5" pos:end="73:10">fw_cfg</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <call pos:start="73:14" pos:end="73:30"><name pos:start="73:14" pos:end="73:28">bochs_bios_init</name><argument_list pos:start="73:29" pos:end="73:30">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="74:5" pos:end="74:23"><expr pos:start="74:5" pos:end="74:22"><call pos:start="74:5" pos:end="74:22"><name pos:start="74:5" pos:end="74:14">rom_set_fw</name><argument_list pos:start="74:15" pos:end="74:22">(<argument pos:start="74:16" pos:end="74:21"><expr pos:start="74:16" pos:end="74:21"><name pos:start="74:16" pos:end="74:21">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="75:5" pos:end="85:18"><if pos:start="75:5" pos:end="85:18">if <condition pos:start="75:8" pos:end="75:69">(<expr pos:start="75:9" pos:end="75:68"><name pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:18">guest_info</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:39">has_reserved_memory</name></name> <operator pos:start="75:41" pos:end="75:42">&amp;&amp;</operator> <name pos:start="75:44" pos:end="75:68"><name pos:start="75:44" pos:end="75:47">pcms</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:68">hotplug_memory_base</name></name></expr>)</condition> <block pos:start="75:71" pos:end="85:18">{<block_content pos:start="76:9" pos:end="85:18">
        <decl_stmt pos:start="76:9" pos:end="76:47"><decl pos:start="76:9" pos:end="76:46"><type pos:start="76:9" pos:end="76:18"><name pos:start="76:9" pos:end="76:16">uint64_t</name> <modifier pos:start="76:18" pos:end="76:18">*</modifier></type><name pos:start="76:19" pos:end="76:21">val</name> <init pos:start="76:23" pos:end="76:46">= <expr pos:start="76:25" pos:end="76:46"><call pos:start="76:25" pos:end="76:46"><name pos:start="76:25" pos:end="76:32">g_malloc</name><argument_list pos:start="76:33" pos:end="76:46">(<argument pos:start="76:34" pos:end="76:45"><expr pos:start="76:34" pos:end="76:45"><sizeof pos:start="76:34" pos:end="76:45">sizeof<argument_list pos:start="76:40" pos:end="76:45">(<argument pos:start="76:41" pos:end="76:44"><expr pos:start="76:41" pos:end="76:44"><operator pos:start="76:41" pos:end="76:41">*</operator><name pos:start="76:42" pos:end="76:44">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="77:9" pos:end="77:78"><expr pos:start="77:9" pos:end="77:77"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:12">val</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:77"><name pos:start="77:16" pos:end="77:26">cpu_to_le64</name><argument_list pos:start="77:27" pos:end="77:77">(<argument pos:start="77:28" pos:end="77:76"><expr pos:start="77:28" pos:end="77:76"><call pos:start="77:28" pos:end="77:76"><name pos:start="77:28" pos:end="77:35">ROUND_UP</name><argument_list pos:start="77:36" pos:end="77:76">(<argument pos:start="77:37" pos:end="77:61"><expr pos:start="77:37" pos:end="77:61"><name pos:start="77:37" pos:end="77:61"><name pos:start="77:37" pos:end="77:40">pcms</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:61">hotplug_memory_base</name></name></expr></argument>, <argument pos:start="77:64" pos:end="77:75"><expr pos:start="77:64" pos:end="77:75"><literal type="number" pos:start="77:64" pos:end="77:69">0x1ULL</literal> <operator pos:start="77:71" pos:end="77:72">&lt;&lt;</operator> <literal type="number" pos:start="77:74" pos:end="77:75">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:78"><expr pos:start="78:9" pos:end="78:77"><call pos:start="78:9" pos:end="78:77"><name pos:start="78:9" pos:end="78:23">fw_cfg_add_file</name><argument_list pos:start="78:24" pos:end="78:77">(<argument pos:start="78:25" pos:end="78:30"><expr pos:start="78:25" pos:end="78:30"><name pos:start="78:25" pos:end="78:30">fw_cfg</name></expr></argument>, <argument pos:start="78:33" pos:end="78:57"><expr pos:start="78:33" pos:end="78:57"><literal type="string" pos:start="78:33" pos:end="78:57">"etc/reserved-memory-end"</literal></expr></argument>, <argument pos:start="78:60" pos:end="78:62"><expr pos:start="78:60" pos:end="78:62"><name pos:start="78:60" pos:end="78:62">val</name></expr></argument>, <argument pos:start="78:65" pos:end="78:76"><expr pos:start="78:65" pos:end="78:76"><sizeof pos:start="78:65" pos:end="78:76">sizeof<argument_list pos:start="78:71" pos:end="78:76">(<argument pos:start="78:72" pos:end="78:75"><expr pos:start="78:72" pos:end="78:75"><operator pos:start="78:72" pos:end="78:72">*</operator><name pos:start="78:73" pos:end="78:75">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="79:5" pos:end="85:18"><if pos:start="79:5" pos:end="85:18">if <condition pos:start="79:8" pos:end="79:19">(<expr pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:18">linux_boot</name></expr>)</condition> <block pos:start="79:21" pos:end="85:18">{<block_content pos:start="80:9" pos:end="85:18">
        <expr_stmt pos:start="80:9" pos:end="81:63"><expr pos:start="80:9" pos:end="81:62"><call pos:start="80:9" pos:end="81:62"><name pos:start="80:9" pos:end="80:18">load_linux</name><argument_list pos:start="80:19" pos:end="81:62">(<argument pos:start="80:20" pos:end="80:25"><expr pos:start="80:20" pos:end="80:25"><name pos:start="80:20" pos:end="80:25">fw_cfg</name></expr></argument>, <argument pos:start="80:28" pos:end="80:51"><expr pos:start="80:28" pos:end="80:51"><name pos:start="80:28" pos:end="80:51"><name pos:start="80:28" pos:end="80:34">machine</name><operator pos:start="80:35" pos:end="80:36">-&gt;</operator><name pos:start="80:37" pos:end="80:51">kernel_filename</name></name></expr></argument>, <argument pos:start="80:54" pos:end="80:77"><expr pos:start="80:54" pos:end="80:77"><name pos:start="80:54" pos:end="80:77"><name pos:start="80:54" pos:end="80:60">machine</name><operator pos:start="80:61" pos:end="80:62">-&gt;</operator><name pos:start="80:63" pos:end="80:77">initrd_filename</name></name></expr></argument>,
                   <argument pos:start="81:20" pos:end="81:42"><expr pos:start="81:20" pos:end="81:42"><name pos:start="81:20" pos:end="81:42"><name pos:start="81:20" pos:end="81:26">machine</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:42">kernel_cmdline</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:61"><expr pos:start="81:45" pos:end="81:61"><name pos:start="81:45" pos:end="81:61">below_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="82:5" pos:end="85:18">for <control pos:start="82:9" pos:end="82:40">(<init pos:start="82:10" pos:end="82:15"><expr pos:start="82:10" pos:end="82:14"><name pos:start="82:10" pos:end="82:10">i</name> <operator pos:start="82:12" pos:end="82:12">=</operator> <literal type="number" pos:start="82:14" pos:end="82:14">0</literal></expr>;</init> <condition pos:start="82:17" pos:end="82:35"><expr pos:start="82:17" pos:end="82:34"><name pos:start="82:17" pos:end="82:17">i</name> <operator pos:start="82:19" pos:end="82:19">&lt;</operator> <name pos:start="82:21" pos:end="82:34">nb_option_roms</name></expr>;</condition> <incr pos:start="82:37" pos:end="82:39"><expr pos:start="82:37" pos:end="82:39"><name pos:start="82:37" pos:end="82:37">i</name><operator pos:start="82:38" pos:end="82:39">++</operator></expr></incr>)</control> <block pos:start="82:42" pos:end="85:18">{<block_content pos:start="83:9" pos:end="85:18">
        <expr_stmt pos:start="83:9" pos:end="83:68"><expr pos:start="83:9" pos:end="83:67"><call pos:start="83:9" pos:end="83:67"><name pos:start="83:9" pos:end="83:22">rom_add_option</name><argument_list pos:start="83:23" pos:end="83:67">(<argument pos:start="83:24" pos:end="83:41"><expr pos:start="83:24" pos:end="83:41"><name pos:start="83:24" pos:end="83:36"><name pos:start="83:24" pos:end="83:33">option_rom</name><index pos:start="83:34" pos:end="83:36">[<expr pos:start="83:35" pos:end="83:35"><name pos:start="83:35" pos:end="83:35">i</name></expr>]</index></name><operator pos:start="83:37" pos:end="83:37">.</operator><name pos:start="83:38" pos:end="83:41">name</name></expr></argument>, <argument pos:start="83:44" pos:end="83:66"><expr pos:start="83:44" pos:end="83:66"><name pos:start="83:44" pos:end="83:56"><name pos:start="83:44" pos:end="83:53">option_rom</name><index pos:start="83:54" pos:end="83:56">[<expr pos:start="83:55" pos:end="83:55"><name pos:start="83:55" pos:end="83:55">i</name></expr>]</index></name><operator pos:start="83:57" pos:end="83:57">.</operator><name pos:start="83:58" pos:end="83:66">bootindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:32"><expr pos:start="84:5" pos:end="84:31"><name pos:start="84:5" pos:end="84:22"><name pos:start="84:5" pos:end="84:14">guest_info</name><operator pos:start="84:15" pos:end="84:16">-&gt;</operator><name pos:start="84:17" pos:end="84:22">fw_cfg</name></name> <operator pos:start="84:24" pos:end="84:24">=</operator> <name pos:start="84:26" pos:end="84:31">fw_cfg</name></expr>;</expr_stmt>
    <return pos:start="85:5" pos:end="85:18">return <expr pos:start="85:12" pos:end="85:17"><name pos:start="85:12" pos:end="85:17">fw_cfg</name></expr>;</return></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
