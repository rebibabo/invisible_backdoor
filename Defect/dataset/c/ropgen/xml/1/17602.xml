<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17602.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:30"><name pos:start="1:1" pos:end="1:7">write_f</name><argument_list pos:start="1:8" pos:end="1:30">(<argument pos:start="1:9" pos:end="1:16">int argc</argument>, <argument pos:start="1:19" pos:end="1:29">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="171:1">{<block_content pos:start="5:9" pos:end="169:17">

	<decl_stmt pos:start="5:9" pos:end="5:30"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:22">timeval</name></name></type> <name pos:start="5:24" pos:end="5:25">t1</name></decl>, <decl pos:start="5:28" pos:end="5:29"><type ref="prev" pos:start="5:9" pos:end="5:22"/><name pos:start="5:28" pos:end="5:29">t2</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:44"><decl pos:start="7:9" pos:end="7:21"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:17">Cflag</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>, <decl pos:start="7:24" pos:end="7:32"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:24" pos:end="7:28">pflag</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>, <decl pos:start="7:35" pos:end="7:43"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:35" pos:end="7:39">qflag</name> <init pos:start="7:41" pos:end="7:43">= <expr pos:start="7:43" pos:end="7:43"><literal type="number" pos:start="7:43" pos:end="7:43">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:19"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">c</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:16" pos:end="9:18">cnt</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:18"><decl pos:start="11:9" pos:end="11:17"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:12">char</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">buf</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:23"><decl pos:start="13:9" pos:end="13:22"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:15">int64_t</name></type> <name pos:start="13:17" pos:end="13:22">offset</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:18"><decl pos:start="15:9" pos:end="15:17"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:17">count</name></decl>;</decl_stmt>

        <comment type="block" pos:start="17:9" pos:end="17:79">/* Some compilers get confused and warn if this is not initialized.  */</comment>

        <decl_stmt pos:start="19:9" pos:end="19:22"><decl pos:start="19:9" pos:end="19:21"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:17">total</name> <init pos:start="19:19" pos:end="19:21">= <expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="21:9" pos:end="21:27"><decl pos:start="21:9" pos:end="21:26"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:19">pattern</name> <init pos:start="21:21" pos:end="21:26">= <expr pos:start="21:23" pos:end="21:26"><literal type="number" pos:start="21:23" pos:end="21:26">0xcd</literal></expr></init></decl>;</decl_stmt>



	<while pos:start="25:9" pos:end="59:9">while <condition pos:start="25:15" pos:end="25:56">(<expr pos:start="25:16" pos:end="25:55"><operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:17">c</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:47"><name pos:start="25:21" pos:end="25:26">getopt</name><argument_list pos:start="25:27" pos:end="25:47">(<argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">argc</name></expr></argument>, <argument pos:start="25:34" pos:end="25:37"><expr pos:start="25:34" pos:end="25:37"><name pos:start="25:34" pos:end="25:37">argv</name></expr></argument>, <argument pos:start="25:40" pos:end="25:46"><expr pos:start="25:40" pos:end="25:46"><literal type="string" pos:start="25:40" pos:end="25:46">"CpP:q"</literal></expr></argument>)</argument_list></call><operator pos:start="25:48" pos:end="25:48">)</operator> <operator pos:start="25:50" pos:end="25:51">!=</operator> <name pos:start="25:53" pos:end="25:55">EOF</name></expr>)</condition> <block pos:start="25:58" pos:end="59:9">{<block_content pos:start="27:17" pos:end="57:17">

		<switch pos:start="27:17" pos:end="57:17">switch <condition pos:start="27:24" pos:end="27:26">(<expr pos:start="27:25" pos:end="27:25"><name pos:start="27:25" pos:end="27:25">c</name></expr>)</condition> <block pos:start="27:28" pos:end="57:17">{<block_content pos:start="29:17" pos:end="55:57">

		<case pos:start="29:17" pos:end="29:25">case <expr pos:start="29:22" pos:end="29:24"><literal type="char" pos:start="29:22" pos:end="29:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="31:25" pos:end="31:34"><expr pos:start="31:25" pos:end="31:33"><name pos:start="31:25" pos:end="31:29">Cflag</name> <operator pos:start="31:31" pos:end="31:31">=</operator> <literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr>;</expr_stmt>

			<break pos:start="33:25" pos:end="33:30">break;</break>

		<case pos:start="35:17" pos:end="35:25">case <expr pos:start="35:22" pos:end="35:24"><literal type="char" pos:start="35:22" pos:end="35:24">'p'</literal></expr>:</case>

			<expr_stmt pos:start="37:25" pos:end="37:34"><expr pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:29">pflag</name> <operator pos:start="37:31" pos:end="37:31">=</operator> <literal type="number" pos:start="37:33" pos:end="37:33">1</literal></expr>;</expr_stmt>

			<break pos:start="39:25" pos:end="39:30">break;</break>

		<case pos:start="41:17" pos:end="41:25">case <expr pos:start="41:22" pos:end="41:24"><literal type="char" pos:start="41:22" pos:end="41:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="43:25" pos:end="43:47"><expr pos:start="43:25" pos:end="43:46"><name pos:start="43:25" pos:end="43:31">pattern</name> <operator pos:start="43:33" pos:end="43:33">=</operator> <call pos:start="43:35" pos:end="43:46"><name pos:start="43:35" pos:end="43:38">atoi</name><argument_list pos:start="43:39" pos:end="43:46">(<argument pos:start="43:40" pos:end="43:45"><expr pos:start="43:40" pos:end="43:45"><name pos:start="43:40" pos:end="43:45">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="45:25" pos:end="45:30">break;</break>

		<case pos:start="47:17" pos:end="47:25">case <expr pos:start="47:22" pos:end="47:24"><literal type="char" pos:start="47:22" pos:end="47:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="49:25" pos:end="49:34"><expr pos:start="49:25" pos:end="49:33"><name pos:start="49:25" pos:end="49:29">qflag</name> <operator pos:start="49:31" pos:end="49:31">=</operator> <literal type="number" pos:start="49:33" pos:end="49:33">1</literal></expr>;</expr_stmt>

			<break pos:start="51:25" pos:end="51:30">break;</break>

		<default pos:start="53:17" pos:end="53:24">default:</default>

			<return pos:start="55:25" pos:end="55:57">return <expr pos:start="55:32" pos:end="55:56"><call pos:start="55:32" pos:end="55:56"><name pos:start="55:32" pos:end="55:44">command_usage</name><argument_list pos:start="55:45" pos:end="55:56">(<argument pos:start="55:46" pos:end="55:55"><expr pos:start="55:46" pos:end="55:55"><operator pos:start="55:46" pos:end="55:46">&amp;</operator><name pos:start="55:47" pos:end="55:55">write_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="63:9" pos:end="65:49"><if pos:start="63:9" pos:end="65:49">if <condition pos:start="63:12" pos:end="63:31">(<expr pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:18">optind</name> <operator pos:start="63:20" pos:end="63:21">!=</operator> <name pos:start="63:23" pos:end="63:26">argc</name> <operator pos:start="63:28" pos:end="63:28">-</operator> <literal type="number" pos:start="63:30" pos:end="63:30">2</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:49"><block_content pos:start="65:17" pos:end="65:49">

		<return pos:start="65:17" pos:end="65:49">return <expr pos:start="65:24" pos:end="65:48"><call pos:start="65:24" pos:end="65:48"><name pos:start="65:24" pos:end="65:36">command_usage</name><argument_list pos:start="65:37" pos:end="65:48">(<argument pos:start="65:38" pos:end="65:47"><expr pos:start="65:38" pos:end="65:47"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:47">write_cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



	<expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:14">offset</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:37"><name pos:start="69:18" pos:end="69:23">cvtnum</name><argument_list pos:start="69:24" pos:end="69:37">(<argument pos:start="69:25" pos:end="69:36"><expr pos:start="69:25" pos:end="69:36"><name pos:start="69:25" pos:end="69:36"><name pos:start="69:25" pos:end="69:28">argv</name><index pos:start="69:29" pos:end="69:36">[<expr pos:start="69:30" pos:end="69:35"><name pos:start="69:30" pos:end="69:35">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:23">(<expr pos:start="71:13" pos:end="71:22"><name pos:start="71:13" pos:end="71:18">offset</name> <operator pos:start="71:20" pos:end="71:20">&lt;</operator> <literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr>)</condition> <block pos:start="71:25" pos:end="77:9">{<block_content pos:start="73:17" pos:end="75:25">

		<expr_stmt pos:start="73:17" pos:end="73:76"><expr pos:start="73:17" pos:end="73:75"><call pos:start="73:17" pos:end="73:75"><name pos:start="73:17" pos:end="73:22">printf</name><argument_list pos:start="73:23" pos:end="73:75">(<argument pos:start="73:24" pos:end="73:60"><expr pos:start="73:24" pos:end="73:60"><literal type="string" pos:start="73:24" pos:end="73:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="73:63" pos:end="73:74"><expr pos:start="73:63" pos:end="73:74"><name pos:start="73:63" pos:end="73:74"><name pos:start="73:63" pos:end="73:66">argv</name><index pos:start="73:67" pos:end="73:74">[<expr pos:start="73:68" pos:end="73:73"><name pos:start="73:68" pos:end="73:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="75:17" pos:end="75:25">return <expr pos:start="75:24" pos:end="75:24"><literal type="number" pos:start="75:24" pos:end="75:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="81:9" pos:end="81:17"><expr pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:14">optind</name><operator pos:start="81:15" pos:end="81:16">++</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:13">count</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <call pos:start="83:17" pos:end="83:36"><name pos:start="83:17" pos:end="83:22">cvtnum</name><argument_list pos:start="83:23" pos:end="83:36">(<argument pos:start="83:24" pos:end="83:35"><expr pos:start="83:24" pos:end="83:35"><name pos:start="83:24" pos:end="83:35"><name pos:start="83:24" pos:end="83:27">argv</name><index pos:start="83:28" pos:end="83:35">[<expr pos:start="83:29" pos:end="83:34"><name pos:start="83:29" pos:end="83:34">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:22">(<expr pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:17">count</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <literal type="number" pos:start="85:21" pos:end="85:21">0</literal></expr>)</condition> <block pos:start="85:24" pos:end="91:9">{<block_content pos:start="87:17" pos:end="89:25">

		<expr_stmt pos:start="87:17" pos:end="87:76"><expr pos:start="87:17" pos:end="87:75"><call pos:start="87:17" pos:end="87:75"><name pos:start="87:17" pos:end="87:22">printf</name><argument_list pos:start="87:23" pos:end="87:75">(<argument pos:start="87:24" pos:end="87:60"><expr pos:start="87:24" pos:end="87:60"><literal type="string" pos:start="87:24" pos:end="87:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="87:63" pos:end="87:74"><expr pos:start="87:63" pos:end="87:74"><name pos:start="87:63" pos:end="87:74"><name pos:start="87:63" pos:end="87:66">argv</name><index pos:start="87:67" pos:end="87:74">[<expr pos:start="87:68" pos:end="87:73"><name pos:start="87:68" pos:end="87:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="89:17" pos:end="89:25">return <expr pos:start="89:24" pos:end="89:24"><literal type="number" pos:start="89:24" pos:end="89:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="95:9" pos:end="119:9"><if pos:start="95:9" pos:end="119:9">if <condition pos:start="95:12" pos:end="95:19">(<expr pos:start="95:13" pos:end="95:18"><operator pos:start="95:13" pos:end="95:13">!</operator><name pos:start="95:14" pos:end="95:18">pflag</name></expr>)</condition> <block pos:start="95:21" pos:end="119:9">{<block_content pos:start="97:17" pos:end="117:17">

		<if_stmt pos:start="97:17" pos:end="105:17"><if pos:start="97:17" pos:end="105:17">if <condition pos:start="97:20" pos:end="97:35">(<expr pos:start="97:21" pos:end="97:34"><name pos:start="97:21" pos:end="97:26">offset</name> <operator pos:start="97:28" pos:end="97:28">&amp;</operator> <literal type="number" pos:start="97:30" pos:end="97:34">0x1ff</literal></expr>)</condition> <block pos:start="97:37" pos:end="105:17">{<block_content pos:start="99:25" pos:end="103:33">

			<expr_stmt pos:start="99:25" pos:end="101:51"><expr pos:start="99:25" pos:end="101:50"><call pos:start="99:25" pos:end="101:50"><name pos:start="99:25" pos:end="99:30">printf</name><argument_list pos:start="99:31" pos:end="101:50">(<argument pos:start="99:32" pos:end="99:68"><expr pos:start="99:32" pos:end="99:68"><literal type="string" pos:start="99:32" pos:end="99:68">"offset %lld is not sector aligned\n"</literal></expr></argument>,

				<argument pos:start="101:33" pos:end="101:49"><expr pos:start="101:33" pos:end="101:49"><operator pos:start="101:33" pos:end="101:33">(</operator><name pos:start="101:34" pos:end="101:37">long</name> <name pos:start="101:39" pos:end="101:42">long</name><operator pos:start="101:43" pos:end="101:43">)</operator><name pos:start="101:44" pos:end="101:49">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="103:25" pos:end="103:33">return <expr pos:start="103:32" pos:end="103:32"><literal type="number" pos:start="103:32" pos:end="103:32">0</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<if_stmt pos:start="109:17" pos:end="117:17"><if pos:start="109:17" pos:end="117:17">if <condition pos:start="109:20" pos:end="109:34">(<expr pos:start="109:21" pos:end="109:33"><name pos:start="109:21" pos:end="109:25">count</name> <operator pos:start="109:27" pos:end="109:27">&amp;</operator> <literal type="number" pos:start="109:29" pos:end="109:33">0x1ff</literal></expr>)</condition> <block pos:start="109:36" pos:end="117:17">{<block_content pos:start="111:25" pos:end="115:33">

			<expr_stmt pos:start="111:25" pos:end="113:39"><expr pos:start="111:25" pos:end="113:38"><call pos:start="111:25" pos:end="113:38"><name pos:start="111:25" pos:end="111:30">printf</name><argument_list pos:start="111:31" pos:end="113:38">(<argument pos:start="111:32" pos:end="111:65"><expr pos:start="111:32" pos:end="111:65"><literal type="string" pos:start="111:32" pos:end="111:65">"count %d is not sector aligned\n"</literal></expr></argument>,

				<argument pos:start="113:33" pos:end="113:37"><expr pos:start="113:33" pos:end="113:37"><name pos:start="113:33" pos:end="113:37">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="115:25" pos:end="115:33">return <expr pos:start="115:32" pos:end="115:32"><literal type="number" pos:start="115:32" pos:end="115:32">0</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="123:9" pos:end="123:44"><expr pos:start="123:9" pos:end="123:43"><name pos:start="123:9" pos:end="123:11">buf</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="123:43"><name pos:start="123:15" pos:end="123:27">qemu_io_alloc</name><argument_list pos:start="123:28" pos:end="123:43">(<argument pos:start="123:29" pos:end="123:33"><expr pos:start="123:29" pos:end="123:33"><name pos:start="123:29" pos:end="123:33">count</name></expr></argument>, <argument pos:start="123:36" pos:end="123:42"><expr pos:start="123:36" pos:end="123:42"><name pos:start="123:36" pos:end="123:42">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="127:9" pos:end="127:32"><expr pos:start="127:9" pos:end="127:31"><call pos:start="127:9" pos:end="127:31"><name pos:start="127:9" pos:end="127:20">gettimeofday</name><argument_list pos:start="127:21" pos:end="127:31">(<argument pos:start="127:22" pos:end="127:24"><expr pos:start="127:22" pos:end="127:24"><operator pos:start="127:22" pos:end="127:22">&amp;</operator><name pos:start="127:23" pos:end="127:24">t1</name></expr></argument>, <argument pos:start="127:27" pos:end="127:30"><expr pos:start="127:27" pos:end="127:30"><name pos:start="127:27" pos:end="127:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="129:9" pos:end="135:59"><if pos:start="129:9" pos:end="131:60">if <condition pos:start="129:12" pos:end="129:18">(<expr pos:start="129:13" pos:end="129:17"><name pos:start="129:13" pos:end="129:17">pflag</name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:60"><block_content pos:start="131:17" pos:end="131:60">

		<expr_stmt pos:start="131:17" pos:end="131:60"><expr pos:start="131:17" pos:end="131:59"><name pos:start="131:17" pos:end="131:19">cnt</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <call pos:start="131:23" pos:end="131:59"><name pos:start="131:23" pos:end="131:31">do_pwrite</name><argument_list pos:start="131:32" pos:end="131:59">(<argument pos:start="131:33" pos:end="131:35"><expr pos:start="131:33" pos:end="131:35"><name pos:start="131:33" pos:end="131:35">buf</name></expr></argument>, <argument pos:start="131:38" pos:end="131:43"><expr pos:start="131:38" pos:end="131:43"><name pos:start="131:38" pos:end="131:43">offset</name></expr></argument>, <argument pos:start="131:46" pos:end="131:50"><expr pos:start="131:46" pos:end="131:50"><name pos:start="131:46" pos:end="131:50">count</name></expr></argument>, <argument pos:start="131:53" pos:end="131:58"><expr pos:start="131:53" pos:end="131:58"><operator pos:start="131:53" pos:end="131:53">&amp;</operator><name pos:start="131:54" pos:end="131:58">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="133:9" pos:end="135:59">else<block type="pseudo" pos:start="135:17" pos:end="135:59"><block_content pos:start="135:17" pos:end="135:59">

		<expr_stmt pos:start="135:17" pos:end="135:59"><expr pos:start="135:17" pos:end="135:58"><name pos:start="135:17" pos:end="135:19">cnt</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="135:58"><name pos:start="135:23" pos:end="135:30">do_write</name><argument_list pos:start="135:31" pos:end="135:58">(<argument pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><name pos:start="135:32" pos:end="135:34">buf</name></expr></argument>, <argument pos:start="135:37" pos:end="135:42"><expr pos:start="135:37" pos:end="135:42"><name pos:start="135:37" pos:end="135:42">offset</name></expr></argument>, <argument pos:start="135:45" pos:end="135:49"><expr pos:start="135:45" pos:end="135:49"><name pos:start="135:45" pos:end="135:49">count</name></expr></argument>, <argument pos:start="135:52" pos:end="135:57"><expr pos:start="135:52" pos:end="135:57"><operator pos:start="135:52" pos:end="135:52">&amp;</operator><name pos:start="135:53" pos:end="135:57">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt pos:start="137:9" pos:end="137:32"><expr pos:start="137:9" pos:end="137:31"><call pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:20">gettimeofday</name><argument_list pos:start="137:21" pos:end="137:31">(<argument pos:start="137:22" pos:end="137:24"><expr pos:start="137:22" pos:end="137:24"><operator pos:start="137:22" pos:end="137:22">&amp;</operator><name pos:start="137:23" pos:end="137:24">t2</name></expr></argument>, <argument pos:start="137:27" pos:end="137:30"><expr pos:start="137:27" pos:end="137:30"><name pos:start="137:27" pos:end="137:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if <condition pos:start="141:12" pos:end="141:20">(<expr pos:start="141:13" pos:end="141:19"><name pos:start="141:13" pos:end="141:15">cnt</name> <operator pos:start="141:17" pos:end="141:17">&lt;</operator> <literal type="number" pos:start="141:19" pos:end="141:19">0</literal></expr>)</condition> <block pos:start="141:22" pos:end="147:9">{<block_content pos:start="143:17" pos:end="145:25">

		<expr_stmt pos:start="143:17" pos:end="143:61"><expr pos:start="143:17" pos:end="143:60"><call pos:start="143:17" pos:end="143:60"><name pos:start="143:17" pos:end="143:22">printf</name><argument_list pos:start="143:23" pos:end="143:60">(<argument pos:start="143:24" pos:end="143:43"><expr pos:start="143:24" pos:end="143:43"><literal type="string" pos:start="143:24" pos:end="143:43">"write failed: %s\n"</literal></expr></argument>, <argument pos:start="143:46" pos:end="143:59"><expr pos:start="143:46" pos:end="143:59"><call pos:start="143:46" pos:end="143:59"><name pos:start="143:46" pos:end="143:53">strerror</name><argument_list pos:start="143:54" pos:end="143:59">(<argument pos:start="143:55" pos:end="143:58"><expr pos:start="143:55" pos:end="143:58"><operator pos:start="143:55" pos:end="143:55">-</operator><name pos:start="143:56" pos:end="143:58">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="145:17" pos:end="145:25">return <expr pos:start="145:24" pos:end="145:24"><literal type="number" pos:start="145:24" pos:end="145:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="151:9" pos:end="153:25"><if pos:start="151:9" pos:end="153:25">if <condition pos:start="151:12" pos:end="151:18">(<expr pos:start="151:13" pos:end="151:17"><name pos:start="151:13" pos:end="151:17">qflag</name></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:25"><block_content pos:start="153:17" pos:end="153:25">

		<return pos:start="153:17" pos:end="153:25">return <expr pos:start="153:24" pos:end="153:24"><literal type="number" pos:start="153:24" pos:end="153:24">0</literal></expr>;</return></block_content></block></if></if_stmt>



	<comment type="block" pos:start="157:9" pos:end="157:64">/* Finally, report back -- -C gives a parsable format */</comment>

	<expr_stmt pos:start="159:9" pos:end="159:26"><expr pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:10">t2</name> <operator pos:start="159:12" pos:end="159:12">=</operator> <call pos:start="159:14" pos:end="159:25"><name pos:start="159:14" pos:end="159:17">tsub</name><argument_list pos:start="159:18" pos:end="159:25">(<argument pos:start="159:19" pos:end="159:20"><expr pos:start="159:19" pos:end="159:20"><name pos:start="159:19" pos:end="159:20">t2</name></expr></argument>, <argument pos:start="159:23" pos:end="159:24"><expr pos:start="159:23" pos:end="159:24"><name pos:start="159:23" pos:end="159:24">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="161:9" pos:end="161:69"><expr pos:start="161:9" pos:end="161:68"><call pos:start="161:9" pos:end="161:68"><name pos:start="161:9" pos:end="161:20">print_report</name><argument_list pos:start="161:21" pos:end="161:68">(<argument pos:start="161:22" pos:end="161:28"><expr pos:start="161:22" pos:end="161:28"><literal type="string" pos:start="161:22" pos:end="161:28">"wrote"</literal></expr></argument>, <argument pos:start="161:31" pos:end="161:33"><expr pos:start="161:31" pos:end="161:33"><operator pos:start="161:31" pos:end="161:31">&amp;</operator><name pos:start="161:32" pos:end="161:33">t2</name></expr></argument>, <argument pos:start="161:36" pos:end="161:41"><expr pos:start="161:36" pos:end="161:41"><name pos:start="161:36" pos:end="161:41">offset</name></expr></argument>, <argument pos:start="161:44" pos:end="161:48"><expr pos:start="161:44" pos:end="161:48"><name pos:start="161:44" pos:end="161:48">count</name></expr></argument>, <argument pos:start="161:51" pos:end="161:55"><expr pos:start="161:51" pos:end="161:55"><name pos:start="161:51" pos:end="161:55">total</name></expr></argument>, <argument pos:start="161:58" pos:end="161:60"><expr pos:start="161:58" pos:end="161:60"><name pos:start="161:58" pos:end="161:60">cnt</name></expr></argument>, <argument pos:start="161:63" pos:end="161:67"><expr pos:start="161:63" pos:end="161:67"><name pos:start="161:63" pos:end="161:67">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="165:9" pos:end="165:26"><expr pos:start="165:9" pos:end="165:25"><call pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:20">qemu_io_free</name><argument_list pos:start="165:21" pos:end="165:25">(<argument pos:start="165:22" pos:end="165:24"><expr pos:start="165:22" pos:end="165:24"><name pos:start="165:22" pos:end="165:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<return pos:start="169:9" pos:end="169:17">return <expr pos:start="169:16" pos:end="169:16"><literal type="number" pos:start="169:16" pos:end="169:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
