<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16680.c" pos:tabs="8"><function pos:start="1:1" pos:end="381:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">planarCopyWrapper</name><parameter_list pos:start="1:29" pos:end="3:76">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">SwsContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">c</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name><modifier pos:start="1:58" pos:end="1:58">*</modifier></type> <name pos:start="1:60" pos:end="1:64"><name pos:start="1:60" pos:end="1:62">src</name><index pos:start="1:63" pos:end="1:64">[]</index></name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:81"><decl pos:start="1:67" pos:end="1:81"><type pos:start="1:67" pos:end="1:79"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:81"><name pos:start="1:71" pos:end="1:79">srcStride</name><index pos:start="1:80" pos:end="1:81">[]</index></name></decl></parameter>, <parameter pos:start="1:84" pos:end="1:96"><decl pos:start="1:84" pos:end="1:96"><type pos:start="1:84" pos:end="1:96"><name pos:start="1:84" pos:end="1:86">int</name></type> <name pos:start="1:88" pos:end="1:96">srcSliceY</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:42">srcSliceH</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:56"><name pos:start="3:45" pos:end="3:51">uint8_t</name><modifier pos:start="3:52" pos:end="3:52">*</modifier></type> <name pos:start="3:54" pos:end="3:58"><name pos:start="3:54" pos:end="3:56">dst</name><index pos:start="3:57" pos:end="3:58">[]</index></name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:75"><decl pos:start="3:61" pos:end="3:75"><type pos:start="3:61" pos:end="3:73"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:75"><name pos:start="3:65" pos:end="3:73">dstStride</name><index pos:start="3:74" pos:end="3:75">[]</index></name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="381:1">{<block_content pos:start="7:5" pos:end="379:21">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">plane</name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">i</name></decl>, <decl pos:start="7:19" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:19">j</name></decl>;</decl_stmt>

    <for pos:start="9:5" pos:end="377:5">for <control pos:start="9:9" pos:end="9:35">(<init pos:start="9:10" pos:end="9:17"><expr pos:start="9:10" pos:end="9:16"><name pos:start="9:10" pos:end="9:14">plane</name><operator pos:start="9:15" pos:end="9:15">=</operator><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr>;</init> <condition pos:start="9:19" pos:end="9:26"><expr pos:start="9:19" pos:end="9:25"><name pos:start="9:19" pos:end="9:23">plane</name><operator pos:start="9:24" pos:end="9:24">&lt;</operator><literal type="number" pos:start="9:25" pos:end="9:25">4</literal></expr>;</condition> <incr pos:start="9:28" pos:end="9:34"><expr pos:start="9:28" pos:end="9:34"><name pos:start="9:28" pos:end="9:32">plane</name><operator pos:start="9:33" pos:end="9:34">++</operator></expr></incr>)</control> <block pos:start="9:37" pos:end="377:5">{<block_content pos:start="11:9" pos:end="375:9">

        <decl_stmt pos:start="11:9" pos:end="11:93"><decl pos:start="11:9" pos:end="11:92"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:18">length</name><init pos:start="11:19" pos:end="11:92">= <expr pos:start="11:21" pos:end="11:92"><ternary pos:start="11:21" pos:end="11:92"><condition pos:start="11:21" pos:end="11:44"><expr pos:start="11:21" pos:end="11:42"><operator pos:start="11:21" pos:end="11:21">(</operator><name pos:start="11:22" pos:end="11:26">plane</name><operator pos:start="11:27" pos:end="11:28">==</operator><literal type="number" pos:start="11:29" pos:end="11:29">0</literal> <operator pos:start="11:31" pos:end="11:32">||</operator> <name pos:start="11:34" pos:end="11:38">plane</name><operator pos:start="11:39" pos:end="11:40">==</operator><literal type="number" pos:start="11:41" pos:end="11:41">3</literal><operator pos:start="11:42" pos:end="11:42">)</operator></expr> ?</condition><then pos:start="11:46" pos:end="11:52"> <expr pos:start="11:46" pos:end="11:52"><name pos:start="11:46" pos:end="11:52"><name pos:start="11:46" pos:end="11:46">c</name><operator pos:start="11:47" pos:end="11:48">-&gt;</operator><name pos:start="11:49" pos:end="11:52">srcW</name></name></expr>  </then><else pos:start="11:55" pos:end="11:92">: <expr pos:start="11:57" pos:end="11:92"><operator pos:start="11:57" pos:end="11:57">-</operator><operator pos:start="11:58" pos:end="11:58">(</operator><operator pos:start="11:59" pos:end="11:59">(</operator><operator pos:start="11:60" pos:end="11:60">-</operator><name pos:start="11:61" pos:end="11:67"><name pos:start="11:61" pos:end="11:61">c</name><operator pos:start="11:62" pos:end="11:63">-&gt;</operator><name pos:start="11:64" pos:end="11:67">srcW</name></name>  <operator pos:start="11:70" pos:end="11:70">)</operator><operator pos:start="11:71" pos:end="11:72">&gt;&gt;</operator><name pos:start="11:73" pos:end="11:91"><name pos:start="11:73" pos:end="11:73">c</name><operator pos:start="11:74" pos:end="11:75">-&gt;</operator><name pos:start="11:76" pos:end="11:91">chrDstHSubSample</name></name><operator pos:start="11:92" pos:end="11:92">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:93"><decl pos:start="13:9" pos:end="13:92"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:13">y</name><init pos:start="13:14" pos:end="13:92">=      <expr pos:start="13:21" pos:end="13:92"><ternary pos:start="13:21" pos:end="13:92"><condition pos:start="13:21" pos:end="13:44"><expr pos:start="13:21" pos:end="13:42"><operator pos:start="13:21" pos:end="13:21">(</operator><name pos:start="13:22" pos:end="13:26">plane</name><operator pos:start="13:27" pos:end="13:28">==</operator><literal type="number" pos:start="13:29" pos:end="13:29">0</literal> <operator pos:start="13:31" pos:end="13:32">||</operator> <name pos:start="13:34" pos:end="13:38">plane</name><operator pos:start="13:39" pos:end="13:40">==</operator><literal type="number" pos:start="13:41" pos:end="13:41">3</literal><operator pos:start="13:42" pos:end="13:42">)</operator></expr> ?</condition><then pos:start="13:46" pos:end="13:54"> <expr pos:start="13:46" pos:end="13:54"><name pos:start="13:46" pos:end="13:54">srcSliceY</name></expr></then><else pos:start="13:55" pos:end="13:92">: <expr pos:start="13:57" pos:end="13:92"><operator pos:start="13:57" pos:end="13:57">-</operator><operator pos:start="13:58" pos:end="13:58">(</operator><operator pos:start="13:59" pos:end="13:59">(</operator><operator pos:start="13:60" pos:end="13:60">-</operator><name pos:start="13:61" pos:end="13:69">srcSliceY</name><operator pos:start="13:70" pos:end="13:70">)</operator><operator pos:start="13:71" pos:end="13:72">&gt;&gt;</operator><name pos:start="13:73" pos:end="13:91"><name pos:start="13:73" pos:end="13:73">c</name><operator pos:start="13:74" pos:end="13:75">-&gt;</operator><name pos:start="13:76" pos:end="13:91">chrDstVSubSample</name></name><operator pos:start="13:92" pos:end="13:92">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:93"><decl pos:start="15:9" pos:end="15:92"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:18">height</name><init pos:start="15:19" pos:end="15:92">= <expr pos:start="15:21" pos:end="15:92"><ternary pos:start="15:21" pos:end="15:92"><condition pos:start="15:21" pos:end="15:44"><expr pos:start="15:21" pos:end="15:42"><operator pos:start="15:21" pos:end="15:21">(</operator><name pos:start="15:22" pos:end="15:26">plane</name><operator pos:start="15:27" pos:end="15:28">==</operator><literal type="number" pos:start="15:29" pos:end="15:29">0</literal> <operator pos:start="15:31" pos:end="15:32">||</operator> <name pos:start="15:34" pos:end="15:38">plane</name><operator pos:start="15:39" pos:end="15:40">==</operator><literal type="number" pos:start="15:41" pos:end="15:41">3</literal><operator pos:start="15:42" pos:end="15:42">)</operator></expr> ?</condition><then pos:start="15:46" pos:end="15:54"> <expr pos:start="15:46" pos:end="15:54"><name pos:start="15:46" pos:end="15:54">srcSliceH</name></expr></then><else pos:start="15:55" pos:end="15:92">: <expr pos:start="15:57" pos:end="15:92"><operator pos:start="15:57" pos:end="15:57">-</operator><operator pos:start="15:58" pos:end="15:58">(</operator><operator pos:start="15:59" pos:end="15:59">(</operator><operator pos:start="15:60" pos:end="15:60">-</operator><name pos:start="15:61" pos:end="15:69">srcSliceH</name><operator pos:start="15:70" pos:end="15:70">)</operator><operator pos:start="15:71" pos:end="15:72">&gt;&gt;</operator><name pos:start="15:73" pos:end="15:91"><name pos:start="15:73" pos:end="15:73">c</name><operator pos:start="15:74" pos:end="15:75">-&gt;</operator><name pos:start="15:76" pos:end="15:91">chrDstVSubSample</name></name><operator pos:start="15:92" pos:end="15:92">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:42"><decl pos:start="17:9" pos:end="17:41"><type pos:start="17:9" pos:end="17:23"><specifier pos:start="17:9" pos:end="17:13">const</specifier> <name pos:start="17:15" pos:end="17:21">uint8_t</name> <modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:29">srcPtr</name><init pos:start="17:30" pos:end="17:41">= <expr pos:start="17:32" pos:end="17:41"><name pos:start="17:32" pos:end="17:41"><name pos:start="17:32" pos:end="17:34">src</name><index pos:start="17:35" pos:end="17:41">[<expr pos:start="17:36" pos:end="17:40"><name pos:start="17:36" pos:end="17:40">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:57"><decl pos:start="19:9" pos:end="19:56"><type pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:15">uint8_t</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:23">dstPtr</name><init pos:start="19:24" pos:end="19:56">= <expr pos:start="19:26" pos:end="19:56"><name pos:start="19:26" pos:end="19:35"><name pos:start="19:26" pos:end="19:28">dst</name><index pos:start="19:29" pos:end="19:35">[<expr pos:start="19:30" pos:end="19:34"><name pos:start="19:30" pos:end="19:34">plane</name></expr>]</index></name> <operator pos:start="19:37" pos:end="19:37">+</operator> <name pos:start="19:39" pos:end="19:54"><name pos:start="19:39" pos:end="19:47">dstStride</name><index pos:start="19:48" pos:end="19:54">[<expr pos:start="19:49" pos:end="19:53"><name pos:start="19:49" pos:end="19:53">plane</name></expr>]</index></name><operator pos:start="19:55" pos:end="19:55">*</operator><name pos:start="19:56" pos:end="19:56">y</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="23:9" pos:end="23:34"><if pos:start="23:9" pos:end="23:34">if <condition pos:start="23:12" pos:end="23:24">(<expr pos:start="23:13" pos:end="23:23"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:23"><name pos:start="23:14" pos:end="23:16">dst</name><index pos:start="23:17" pos:end="23:23">[<expr pos:start="23:18" pos:end="23:22"><name pos:start="23:18" pos:end="23:22">plane</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="23:26" pos:end="23:34"><block_content pos:start="23:26" pos:end="23:34"> <continue pos:start="23:26" pos:end="23:34">continue;</continue></block_content></block></if></if_stmt>

        <comment type="line" pos:start="25:9" pos:end="25:35">// ignore palette for GRAY8</comment>

        <if_stmt pos:start="27:9" pos:end="27:44"><if pos:start="27:9" pos:end="27:44">if <condition pos:start="27:12" pos:end="27:34">(<expr pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:17">plane</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <literal type="number" pos:start="27:22" pos:end="27:22">1</literal> <operator pos:start="27:24" pos:end="27:25">&amp;&amp;</operator> <operator pos:start="27:27" pos:end="27:27">!</operator><name pos:start="27:28" pos:end="27:33"><name pos:start="27:28" pos:end="27:30">dst</name><index pos:start="27:31" pos:end="27:33">[<expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="27:36" pos:end="27:44"><block_content pos:start="27:36" pos:end="27:44"> <continue pos:start="27:36" pos:end="27:44">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="375:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:51">(<expr pos:start="29:13" pos:end="29:50"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:23"><name pos:start="29:14" pos:end="29:16">src</name><index pos:start="29:17" pos:end="29:23">[<expr pos:start="29:18" pos:end="29:22"><name pos:start="29:18" pos:end="29:22">plane</name></expr>]</index></name> <operator pos:start="29:25" pos:end="29:26">||</operator> <operator pos:start="29:28" pos:end="29:28">(</operator><name pos:start="29:29" pos:end="29:33">plane</name> <operator pos:start="29:35" pos:end="29:36">==</operator> <literal type="number" pos:start="29:38" pos:end="29:38">1</literal> <operator pos:start="29:40" pos:end="29:41">&amp;&amp;</operator> <operator pos:start="29:43" pos:end="29:43">!</operator><name pos:start="29:44" pos:end="29:49"><name pos:start="29:44" pos:end="29:46">src</name><index pos:start="29:47" pos:end="29:49">[<expr pos:start="29:48" pos:end="29:48"><literal type="number" pos:start="29:48" pos:end="29:48">2</literal></expr>]</index></name><operator pos:start="29:50" pos:end="29:50">)</operator></expr>)</condition> <block pos:start="29:53" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:95">

            <if_stmt pos:start="31:13" pos:end="33:26"><if pos:start="31:13" pos:end="33:26">if<condition pos:start="31:15" pos:end="31:37">(<expr pos:start="31:16" pos:end="31:36"><call pos:start="31:16" pos:end="31:36"><name pos:start="31:16" pos:end="31:22">is16BPS</name><argument_list pos:start="31:23" pos:end="31:36">(<argument pos:start="31:24" pos:end="31:35"><expr pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:24">c</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:35">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:26"><block_content pos:start="33:17" pos:end="33:26">

                <expr_stmt pos:start="33:17" pos:end="33:26"><expr pos:start="33:17" pos:end="33:25"><name pos:start="33:17" pos:end="33:22">length</name><operator pos:start="33:23" pos:end="33:24">*=</operator><literal type="number" pos:start="33:25" pos:end="33:25">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:95"><expr pos:start="35:13" pos:end="35:94"><call pos:start="35:13" pos:end="35:94"><name pos:start="35:13" pos:end="35:21">fillPlane</name><argument_list pos:start="35:22" pos:end="35:94">(<argument pos:start="35:23" pos:end="35:32"><expr pos:start="35:23" pos:end="35:32"><name pos:start="35:23" pos:end="35:32"><name pos:start="35:23" pos:end="35:25">dst</name><index pos:start="35:26" pos:end="35:32">[<expr pos:start="35:27" pos:end="35:31"><name pos:start="35:27" pos:end="35:31">plane</name></expr>]</index></name></expr></argument>, <argument pos:start="35:35" pos:end="35:50"><expr pos:start="35:35" pos:end="35:50"><name pos:start="35:35" pos:end="35:50"><name pos:start="35:35" pos:end="35:43">dstStride</name><index pos:start="35:44" pos:end="35:50">[<expr pos:start="35:45" pos:end="35:49"><name pos:start="35:45" pos:end="35:49">plane</name></expr>]</index></name></expr></argument>, <argument pos:start="35:53" pos:end="35:58"><expr pos:start="35:53" pos:end="35:58"><name pos:start="35:53" pos:end="35:58">length</name></expr></argument>, <argument pos:start="35:61" pos:end="35:66"><expr pos:start="35:61" pos:end="35:66"><name pos:start="35:61" pos:end="35:66">height</name></expr></argument>, <argument pos:start="35:69" pos:end="35:69"><expr pos:start="35:69" pos:end="35:69"><name pos:start="35:69" pos:end="35:69">y</name></expr></argument>, <argument pos:start="35:72" pos:end="35:93"><expr pos:start="35:72" pos:end="35:93"><ternary pos:start="35:72" pos:end="35:93"><condition pos:start="35:72" pos:end="35:83"><expr pos:start="35:72" pos:end="35:81"><operator pos:start="35:72" pos:end="35:72">(</operator><name pos:start="35:73" pos:end="35:77">plane</name><operator pos:start="35:78" pos:end="35:79">==</operator><literal type="number" pos:start="35:80" pos:end="35:80">3</literal><operator pos:start="35:81" pos:end="35:81">)</operator></expr> ?</condition><then pos:start="35:85" pos:end="35:87"> <expr pos:start="35:85" pos:end="35:87"><literal type="number" pos:start="35:85" pos:end="35:87">255</literal></expr> </then><else pos:start="35:89" pos:end="35:93">: <expr pos:start="35:91" pos:end="35:93"><literal type="number" pos:start="35:91" pos:end="35:93">128</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="375:9">else <block pos:start="37:16" pos:end="375:9">{<block_content pos:start="39:13" pos:end="373:13">

            <if_stmt pos:start="39:13" pos:end="373:13"><if pos:start="39:13" pos:end="201:13">if<condition pos:start="39:15" pos:end="39:42">(<expr pos:start="39:16" pos:end="39:41"><call pos:start="39:16" pos:end="39:41"><name pos:start="39:16" pos:end="39:27">is9_OR_10BPS</name><argument_list pos:start="39:28" pos:end="39:41">(<argument pos:start="39:29" pos:end="39:40"><expr pos:start="39:29" pos:end="39:40"><name pos:start="39:29" pos:end="39:40"><name pos:start="39:29" pos:end="39:29">c</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:40">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:44" pos:end="201:13">{<block_content pos:start="41:17" pos:end="199:17">

                <decl_stmt pos:start="41:17" pos:end="41:102"><decl pos:start="41:17" pos:end="41:101"><type pos:start="41:17" pos:end="41:25"><specifier pos:start="41:17" pos:end="41:21">const</specifier> <name pos:start="41:23" pos:end="41:25">int</name></type> <name pos:start="41:27" pos:end="41:35">src_depth</name> <init pos:start="41:37" pos:end="41:101">= <expr pos:start="41:39" pos:end="41:101"><name pos:start="41:39" pos:end="41:74"><name pos:start="41:39" pos:end="41:60">av_pix_fmt_descriptors</name><index pos:start="41:61" pos:end="41:74">[<expr pos:start="41:62" pos:end="41:73"><name pos:start="41:62" pos:end="41:73"><name pos:start="41:62" pos:end="41:62">c</name><operator pos:start="41:63" pos:end="41:64">-&gt;</operator><name pos:start="41:65" pos:end="41:73">srcFormat</name></name></expr>]</index></name><operator pos:start="41:75" pos:end="41:75">.</operator><name pos:start="41:76" pos:end="41:86"><name pos:start="41:76" pos:end="41:79">comp</name><index pos:start="41:80" pos:end="41:86">[<expr pos:start="41:81" pos:end="41:85"><name pos:start="41:81" pos:end="41:85">plane</name></expr>]</index></name><operator pos:start="41:87" pos:end="41:87">.</operator><name pos:start="41:88" pos:end="41:99">depth_minus1</name><operator pos:start="41:100" pos:end="41:100">+</operator><literal type="number" pos:start="41:101" pos:end="41:101">1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="43:17" pos:end="43:102"><decl pos:start="43:17" pos:end="43:101"><type pos:start="43:17" pos:end="43:25"><specifier pos:start="43:17" pos:end="43:21">const</specifier> <name pos:start="43:23" pos:end="43:25">int</name></type> <name pos:start="43:27" pos:end="43:35">dst_depth</name> <init pos:start="43:37" pos:end="43:101">= <expr pos:start="43:39" pos:end="43:101"><name pos:start="43:39" pos:end="43:74"><name pos:start="43:39" pos:end="43:60">av_pix_fmt_descriptors</name><index pos:start="43:61" pos:end="43:74">[<expr pos:start="43:62" pos:end="43:73"><name pos:start="43:62" pos:end="43:73"><name pos:start="43:62" pos:end="43:62">c</name><operator pos:start="43:63" pos:end="43:64">-&gt;</operator><name pos:start="43:65" pos:end="43:73">dstFormat</name></name></expr>]</index></name><operator pos:start="43:75" pos:end="43:75">.</operator><name pos:start="43:76" pos:end="43:86"><name pos:start="43:76" pos:end="43:79">comp</name><index pos:start="43:80" pos:end="43:86">[<expr pos:start="43:81" pos:end="43:85"><name pos:start="43:81" pos:end="43:85">plane</name></expr>]</index></name><operator pos:start="43:87" pos:end="43:87">.</operator><name pos:start="43:88" pos:end="43:99">depth_minus1</name><operator pos:start="43:100" pos:end="43:100">+</operator><literal type="number" pos:start="43:101" pos:end="43:101">1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="45:17" pos:end="45:66"><decl pos:start="45:17" pos:end="45:65"><type pos:start="45:17" pos:end="45:32"><specifier pos:start="45:17" pos:end="45:21">const</specifier> <name pos:start="45:23" pos:end="45:30">uint16_t</name> <modifier pos:start="45:32" pos:end="45:32">*</modifier></type><name pos:start="45:33" pos:end="45:39">srcPtr2</name> <init pos:start="45:41" pos:end="45:65">= <expr pos:start="45:43" pos:end="45:65"><operator pos:start="45:43" pos:end="45:43">(</operator><specifier pos:start="45:44" pos:end="45:48">const</specifier> <name pos:start="45:50" pos:end="45:57">uint16_t</name><operator pos:start="45:58" pos:end="45:58">*</operator><operator pos:start="45:59" pos:end="45:59">)</operator><name pos:start="45:60" pos:end="45:65">srcPtr</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="49:17" pos:end="199:17"><if pos:start="49:17" pos:end="97:17">if <condition pos:start="49:20" pos:end="49:42">(<expr pos:start="49:21" pos:end="49:41"><call pos:start="49:21" pos:end="49:41"><name pos:start="49:21" pos:end="49:27">is16BPS</name><argument_list pos:start="49:28" pos:end="49:41">(<argument pos:start="49:29" pos:end="49:40"><expr pos:start="49:29" pos:end="49:40"><name pos:start="49:29" pos:end="49:40"><name pos:start="49:29" pos:end="49:29">c</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:40">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:44" pos:end="97:17">{<block_content pos:start="51:21" pos:end="95:21">

                    <decl_stmt pos:start="51:21" pos:end="70:0"><decl pos:start="51:21" pos:end="51:57"><type pos:start="51:21" pos:end="51:30"><name pos:start="51:21" pos:end="51:28">uint16_t</name> <modifier pos:start="51:30" pos:end="51:30">*</modifier></type><name pos:start="51:31" pos:end="51:37">dstPtr2</name> <init pos:start="51:39" pos:end="51:57">= <expr pos:start="51:41" pos:end="51:57"><operator pos:start="51:41" pos:end="51:41">(</operator><name pos:start="51:42" pos:end="51:49">uint16_t</name><operator pos:start="51:50" pos:end="51:50">*</operator><operator pos:start="51:51" pos:end="51:51">)</operator><name pos:start="51:52" pos:end="51:57">dstPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="53:1" pos:end="69:21">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:23">COPY9_OR_10TO16</name><parameter_list pos:start="53:24" pos:end="53:37">(<parameter pos:start="53:25" pos:end="53:29"><type pos:start="53:25" pos:end="53:29"><name pos:start="53:25" pos:end="53:29">rfunc</name></type></parameter>, <parameter pos:start="53:32" pos:end="53:36"><type pos:start="53:32" pos:end="53:36"><name pos:start="53:32" pos:end="53:36">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="55:21" pos:end="69:21">for (i = 0; i &lt; height; i++) { \

                        for (j = 0; j &lt; length; j++) { \

                            int srcpx = rfunc(&amp;srcPtr2[j]); \

                            wfunc(&amp;dstPtr2[j], (srcpx&lt;&lt;(16-src_depth)) | (srcpx&gt;&gt;(2*src_depth-16))); \

                        } \

                        dstPtr2 += dstStride[plane]/2; \

                        srcPtr2 += srcStride[plane]/2; \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="71:21" pos:end="95:21"><if pos:start="71:21" pos:end="83:21">if <condition pos:start="71:24" pos:end="71:43">(<expr pos:start="71:25" pos:end="71:42"><call pos:start="71:25" pos:end="71:42"><name pos:start="71:25" pos:end="71:28">isBE</name><argument_list pos:start="71:29" pos:end="71:42">(<argument pos:start="71:30" pos:end="71:41"><expr pos:start="71:30" pos:end="71:41"><name pos:start="71:30" pos:end="71:41"><name pos:start="71:30" pos:end="71:30">c</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:45" pos:end="83:21">{<block_content pos:start="73:25" pos:end="81:25">

                        <if_stmt pos:start="73:25" pos:end="81:25"><if pos:start="73:25" pos:end="77:25">if <condition pos:start="73:28" pos:end="73:47">(<expr pos:start="73:29" pos:end="73:46"><call pos:start="73:29" pos:end="73:46"><name pos:start="73:29" pos:end="73:32">isBE</name><argument_list pos:start="73:33" pos:end="73:46">(<argument pos:start="73:34" pos:end="73:45"><expr pos:start="73:34" pos:end="73:45"><name pos:start="73:34" pos:end="73:45"><name pos:start="73:34" pos:end="73:34">c</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:49" pos:end="77:25">{<block_content pos:start="75:29" pos:end="75:62">

                            <expr_stmt pos:start="75:29" pos:end="75:62"><expr pos:start="75:29" pos:end="75:61"><call pos:start="75:29" pos:end="75:61"><name pos:start="75:29" pos:end="75:43">COPY9_OR_10TO16</name><argument_list pos:start="75:44" pos:end="75:61">(<argument pos:start="75:45" pos:end="75:51"><expr pos:start="75:45" pos:end="75:51"><name pos:start="75:45" pos:end="75:51">AV_RB16</name></expr></argument>, <argument pos:start="75:54" pos:end="75:60"><expr pos:start="75:54" pos:end="75:60"><name pos:start="75:54" pos:end="75:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="77:27" pos:end="81:25">else <block pos:start="77:32" pos:end="81:25">{<block_content pos:start="79:29" pos:end="79:62">

                            <expr_stmt pos:start="79:29" pos:end="79:62"><expr pos:start="79:29" pos:end="79:61"><call pos:start="79:29" pos:end="79:61"><name pos:start="79:29" pos:end="79:43">COPY9_OR_10TO16</name><argument_list pos:start="79:44" pos:end="79:61">(<argument pos:start="79:45" pos:end="79:51"><expr pos:start="79:45" pos:end="79:51"><name pos:start="79:45" pos:end="79:51">AV_RL16</name></expr></argument>, <argument pos:start="79:54" pos:end="79:60"><expr pos:start="79:54" pos:end="79:60"><name pos:start="79:54" pos:end="79:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="83:23" pos:end="95:21">else <block pos:start="83:28" pos:end="95:21">{<block_content pos:start="85:25" pos:end="93:25">

                        <if_stmt pos:start="85:25" pos:end="93:25"><if pos:start="85:25" pos:end="89:25">if <condition pos:start="85:28" pos:end="85:47">(<expr pos:start="85:29" pos:end="85:46"><call pos:start="85:29" pos:end="85:46"><name pos:start="85:29" pos:end="85:32">isBE</name><argument_list pos:start="85:33" pos:end="85:46">(<argument pos:start="85:34" pos:end="85:45"><expr pos:start="85:34" pos:end="85:45"><name pos:start="85:34" pos:end="85:45"><name pos:start="85:34" pos:end="85:34">c</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:49" pos:end="89:25">{<block_content pos:start="87:29" pos:end="87:62">

                            <expr_stmt pos:start="87:29" pos:end="87:62"><expr pos:start="87:29" pos:end="87:61"><call pos:start="87:29" pos:end="87:61"><name pos:start="87:29" pos:end="87:43">COPY9_OR_10TO16</name><argument_list pos:start="87:44" pos:end="87:61">(<argument pos:start="87:45" pos:end="87:51"><expr pos:start="87:45" pos:end="87:51"><name pos:start="87:45" pos:end="87:51">AV_RB16</name></expr></argument>, <argument pos:start="87:54" pos:end="87:60"><expr pos:start="87:54" pos:end="87:60"><name pos:start="87:54" pos:end="87:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="89:27" pos:end="93:25">else <block pos:start="89:32" pos:end="93:25">{<block_content pos:start="91:29" pos:end="91:62">

                            <expr_stmt pos:start="91:29" pos:end="91:62"><expr pos:start="91:29" pos:end="91:61"><call pos:start="91:29" pos:end="91:61"><name pos:start="91:29" pos:end="91:43">COPY9_OR_10TO16</name><argument_list pos:start="91:44" pos:end="91:61">(<argument pos:start="91:45" pos:end="91:51"><expr pos:start="91:45" pos:end="91:51"><name pos:start="91:45" pos:end="91:51">AV_RL16</name></expr></argument>, <argument pos:start="91:54" pos:end="91:60"><expr pos:start="91:54" pos:end="91:60"><name pos:start="91:54" pos:end="91:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="97:19" pos:end="165:17">else if <condition pos:start="97:27" pos:end="97:54">(<expr pos:start="97:28" pos:end="97:53"><call pos:start="97:28" pos:end="97:53"><name pos:start="97:28" pos:end="97:39">is9_OR_10BPS</name><argument_list pos:start="97:40" pos:end="97:53">(<argument pos:start="97:41" pos:end="97:52"><expr pos:start="97:41" pos:end="97:52"><name pos:start="97:41" pos:end="97:52"><name pos:start="97:41" pos:end="97:41">c</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:52">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:56" pos:end="165:17">{<block_content pos:start="99:21" pos:end="163:21">

                    <decl_stmt pos:start="99:21" pos:end="138:0"><decl pos:start="99:21" pos:end="99:57"><type pos:start="99:21" pos:end="99:30"><name pos:start="99:21" pos:end="99:28">uint16_t</name> <modifier pos:start="99:30" pos:end="99:30">*</modifier></type><name pos:start="99:31" pos:end="99:37">dstPtr2</name> <init pos:start="99:39" pos:end="99:57">= <expr pos:start="99:41" pos:end="99:57"><operator pos:start="99:41" pos:end="99:41">(</operator><name pos:start="99:42" pos:end="99:49">uint16_t</name><operator pos:start="99:50" pos:end="99:50">*</operator><operator pos:start="99:51" pos:end="99:51">)</operator><name pos:start="99:52" pos:end="99:57">dstPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="101:1" pos:end="115:21">#<cpp:directive pos:start="101:2" pos:end="101:7">define</cpp:directive> <cpp:macro pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:28">COPY9_OR_10TO9_OR_10</name><parameter_list pos:start="101:29" pos:end="101:34">(<parameter pos:start="101:30" pos:end="101:33"><type pos:start="101:30" pos:end="101:33"><name pos:start="101:30" pos:end="101:33">loop</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="103:21" pos:end="115:21">for (i = 0; i &lt; height; i++) { \

                        for (j = 0; j &lt; length; j++) { \

                            loop; \

                        } \

                        dstPtr2 += dstStride[plane]/2; \

                        srcPtr2 += srcStride[plane]/2; \

                    }</cpp:value></cpp:define>

<cpp:define pos:start="117:1" pos:end="137:21">#<cpp:directive pos:start="117:2" pos:end="117:7">define</cpp:directive> <cpp:macro pos:start="117:9" pos:end="117:44"><name pos:start="117:9" pos:end="117:30">COPY9_OR_10TO9_OR_10_2</name><parameter_list pos:start="117:31" pos:end="117:44">(<parameter pos:start="117:32" pos:end="117:36"><type pos:start="117:32" pos:end="117:36"><name pos:start="117:32" pos:end="117:36">rfunc</name></type></parameter>, <parameter pos:start="117:39" pos:end="117:43"><type pos:start="117:39" pos:end="117:43"><name pos:start="117:39" pos:end="117:43">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="119:21" pos:end="137:21">if (dst_depth &gt; src_depth) { \

                        COPY9_OR_10TO9_OR_10(int srcpx = rfunc(&amp;srcPtr2[j]); \

                            wfunc(&amp;dstPtr2[j], (srcpx &lt;&lt; 1) | (srcpx &gt;&gt; 9))); \

                    } else if (dst_depth &lt; src_depth) { \

                        DITHER_COPY(dstPtr2, dstStride[plane]/2, wfunc, \

                                    srcPtr2, srcStride[plane]/2, rfunc, \

                                    dither_8x8_1, 1); \

                    } else { \

                        COPY9_OR_10TO9_OR_10(wfunc(&amp;dstPtr2[j], rfunc(&amp;srcPtr2[j]))); \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="139:21" pos:end="163:21"><if pos:start="139:21" pos:end="151:21">if <condition pos:start="139:24" pos:end="139:43">(<expr pos:start="139:25" pos:end="139:42"><call pos:start="139:25" pos:end="139:42"><name pos:start="139:25" pos:end="139:28">isBE</name><argument_list pos:start="139:29" pos:end="139:42">(<argument pos:start="139:30" pos:end="139:41"><expr pos:start="139:30" pos:end="139:41"><name pos:start="139:30" pos:end="139:41"><name pos:start="139:30" pos:end="139:30">c</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:45" pos:end="151:21">{<block_content pos:start="141:25" pos:end="149:25">

                        <if_stmt pos:start="141:25" pos:end="149:25"><if pos:start="141:25" pos:end="145:25">if <condition pos:start="141:28" pos:end="141:47">(<expr pos:start="141:29" pos:end="141:46"><call pos:start="141:29" pos:end="141:46"><name pos:start="141:29" pos:end="141:32">isBE</name><argument_list pos:start="141:33" pos:end="141:46">(<argument pos:start="141:34" pos:end="141:45"><expr pos:start="141:34" pos:end="141:45"><name pos:start="141:34" pos:end="141:45"><name pos:start="141:34" pos:end="141:34">c</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:49" pos:end="145:25">{<block_content pos:start="143:29" pos:end="143:69">

                            <expr_stmt pos:start="143:29" pos:end="143:69"><expr pos:start="143:29" pos:end="143:68"><call pos:start="143:29" pos:end="143:68"><name pos:start="143:29" pos:end="143:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="143:51" pos:end="143:68">(<argument pos:start="143:52" pos:end="143:58"><expr pos:start="143:52" pos:end="143:58"><name pos:start="143:52" pos:end="143:58">AV_RB16</name></expr></argument>, <argument pos:start="143:61" pos:end="143:67"><expr pos:start="143:61" pos:end="143:67"><name pos:start="143:61" pos:end="143:67">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="145:27" pos:end="149:25">else <block pos:start="145:32" pos:end="149:25">{<block_content pos:start="147:29" pos:end="147:69">

                            <expr_stmt pos:start="147:29" pos:end="147:69"><expr pos:start="147:29" pos:end="147:68"><call pos:start="147:29" pos:end="147:68"><name pos:start="147:29" pos:end="147:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="147:51" pos:end="147:68">(<argument pos:start="147:52" pos:end="147:58"><expr pos:start="147:52" pos:end="147:58"><name pos:start="147:52" pos:end="147:58">AV_RL16</name></expr></argument>, <argument pos:start="147:61" pos:end="147:67"><expr pos:start="147:61" pos:end="147:67"><name pos:start="147:61" pos:end="147:67">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="151:23" pos:end="163:21">else <block pos:start="151:28" pos:end="163:21">{<block_content pos:start="153:25" pos:end="161:25">

                        <if_stmt pos:start="153:25" pos:end="161:25"><if pos:start="153:25" pos:end="157:25">if <condition pos:start="153:28" pos:end="153:47">(<expr pos:start="153:29" pos:end="153:46"><call pos:start="153:29" pos:end="153:46"><name pos:start="153:29" pos:end="153:32">isBE</name><argument_list pos:start="153:33" pos:end="153:46">(<argument pos:start="153:34" pos:end="153:45"><expr pos:start="153:34" pos:end="153:45"><name pos:start="153:34" pos:end="153:45"><name pos:start="153:34" pos:end="153:34">c</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:49" pos:end="157:25">{<block_content pos:start="155:29" pos:end="155:69">

                            <expr_stmt pos:start="155:29" pos:end="155:69"><expr pos:start="155:29" pos:end="155:68"><call pos:start="155:29" pos:end="155:68"><name pos:start="155:29" pos:end="155:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="155:51" pos:end="155:68">(<argument pos:start="155:52" pos:end="155:58"><expr pos:start="155:52" pos:end="155:58"><name pos:start="155:52" pos:end="155:58">AV_RB16</name></expr></argument>, <argument pos:start="155:61" pos:end="155:67"><expr pos:start="155:61" pos:end="155:67"><name pos:start="155:61" pos:end="155:67">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="157:27" pos:end="161:25">else <block pos:start="157:32" pos:end="161:25">{<block_content pos:start="159:29" pos:end="159:69">

                            <expr_stmt pos:start="159:29" pos:end="159:69"><expr pos:start="159:29" pos:end="159:68"><call pos:start="159:29" pos:end="159:68"><name pos:start="159:29" pos:end="159:50">COPY9_OR_10TO9_OR_10_2</name><argument_list pos:start="159:51" pos:end="159:68">(<argument pos:start="159:52" pos:end="159:58"><expr pos:start="159:52" pos:end="159:58"><name pos:start="159:52" pos:end="159:58">AV_RL16</name></expr></argument>, <argument pos:start="159:61" pos:end="159:67"><expr pos:start="159:61" pos:end="159:67"><name pos:start="159:61" pos:end="159:67">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="165:19" pos:end="199:17">else <block pos:start="165:24" pos:end="199:17">{<block_content pos:start="189:21" pos:end="197:21">

<cpp:define pos:start="167:1" pos:end="167:32">#<cpp:directive pos:start="167:2" pos:end="167:7">define</cpp:directive> <cpp:macro pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:10">W8</name><parameter_list pos:start="167:11" pos:end="167:16">(<parameter pos:start="167:12" pos:end="167:12"><type pos:start="167:12" pos:end="167:12"><name pos:start="167:12" pos:end="167:12">a</name></type></parameter>, <parameter pos:start="167:15" pos:end="167:15"><type pos:start="167:15" pos:end="167:15"><name pos:start="167:15" pos:end="167:15">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="167:18" pos:end="167:32">{ *(a) = (b); }</cpp:value></cpp:define>

<cpp:define pos:start="169:1" pos:end="187:21">#<cpp:directive pos:start="169:2" pos:end="169:7">define</cpp:directive> <cpp:macro pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:22">COPY9_OR_10TO8</name><parameter_list pos:start="169:23" pos:end="169:29">(<parameter pos:start="169:24" pos:end="169:28"><type pos:start="169:24" pos:end="169:28"><name pos:start="169:24" pos:end="169:28">rfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="171:21" pos:end="187:21">if (src_depth == 9) { \

                        DITHER_COPY(dstPtr,  dstStride[plane],   W8, \

                                    srcPtr2, srcStride[plane]/2, rfunc, \

                                    dither_8x8_1, 1); \

                    } else { \

                        DITHER_COPY(dstPtr,  dstStride[plane],   W8, \

                                    srcPtr2, srcStride[plane]/2, rfunc, \

                                    dither_8x8_3, 2); \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="189:21" pos:end="197:21"><if pos:start="189:21" pos:end="193:21">if <condition pos:start="189:24" pos:end="189:43">(<expr pos:start="189:25" pos:end="189:42"><call pos:start="189:25" pos:end="189:42"><name pos:start="189:25" pos:end="189:28">isBE</name><argument_list pos:start="189:29" pos:end="189:42">(<argument pos:start="189:30" pos:end="189:41"><expr pos:start="189:30" pos:end="189:41"><name pos:start="189:30" pos:end="189:41"><name pos:start="189:30" pos:end="189:30">c</name><operator pos:start="189:31" pos:end="189:32">-&gt;</operator><name pos:start="189:33" pos:end="189:41">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:45" pos:end="193:21">{<block_content pos:start="191:25" pos:end="191:48">

                        <expr_stmt pos:start="191:25" pos:end="191:48"><expr pos:start="191:25" pos:end="191:47"><call pos:start="191:25" pos:end="191:47"><name pos:start="191:25" pos:end="191:38">COPY9_OR_10TO8</name><argument_list pos:start="191:39" pos:end="191:47">(<argument pos:start="191:40" pos:end="191:46"><expr pos:start="191:40" pos:end="191:46"><name pos:start="191:40" pos:end="191:46">AV_RB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="193:23" pos:end="197:21">else <block pos:start="193:28" pos:end="197:21">{<block_content pos:start="195:25" pos:end="195:48">

                        <expr_stmt pos:start="195:25" pos:end="195:48"><expr pos:start="195:25" pos:end="195:47"><call pos:start="195:25" pos:end="195:47"><name pos:start="195:25" pos:end="195:38">COPY9_OR_10TO8</name><argument_list pos:start="195:39" pos:end="195:47">(<argument pos:start="195:40" pos:end="195:46"><expr pos:start="195:40" pos:end="195:46"><name pos:start="195:40" pos:end="195:46">AV_RL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="201:15" pos:end="291:13">else if<condition pos:start="201:22" pos:end="201:49">(<expr pos:start="201:23" pos:end="201:48"><call pos:start="201:23" pos:end="201:48"><name pos:start="201:23" pos:end="201:34">is9_OR_10BPS</name><argument_list pos:start="201:35" pos:end="201:48">(<argument pos:start="201:36" pos:end="201:47"><expr pos:start="201:36" pos:end="201:47"><name pos:start="201:36" pos:end="201:47"><name pos:start="201:36" pos:end="201:36">c</name><operator pos:start="201:37" pos:end="201:38">-&gt;</operator><name pos:start="201:39" pos:end="201:47">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="201:51" pos:end="291:13">{<block_content pos:start="203:17" pos:end="289:17">

                <decl_stmt pos:start="203:17" pos:end="203:102"><decl pos:start="203:17" pos:end="203:101"><type pos:start="203:17" pos:end="203:25"><specifier pos:start="203:17" pos:end="203:21">const</specifier> <name pos:start="203:23" pos:end="203:25">int</name></type> <name pos:start="203:27" pos:end="203:35">dst_depth</name> <init pos:start="203:37" pos:end="203:101">= <expr pos:start="203:39" pos:end="203:101"><name pos:start="203:39" pos:end="203:74"><name pos:start="203:39" pos:end="203:60">av_pix_fmt_descriptors</name><index pos:start="203:61" pos:end="203:74">[<expr pos:start="203:62" pos:end="203:73"><name pos:start="203:62" pos:end="203:73"><name pos:start="203:62" pos:end="203:62">c</name><operator pos:start="203:63" pos:end="203:64">-&gt;</operator><name pos:start="203:65" pos:end="203:73">dstFormat</name></name></expr>]</index></name><operator pos:start="203:75" pos:end="203:75">.</operator><name pos:start="203:76" pos:end="203:86"><name pos:start="203:76" pos:end="203:79">comp</name><index pos:start="203:80" pos:end="203:86">[<expr pos:start="203:81" pos:end="203:85"><name pos:start="203:81" pos:end="203:85">plane</name></expr>]</index></name><operator pos:start="203:87" pos:end="203:87">.</operator><name pos:start="203:88" pos:end="203:99">depth_minus1</name><operator pos:start="203:100" pos:end="203:100">+</operator><literal type="number" pos:start="203:101" pos:end="203:101">1</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="205:17" pos:end="205:54"><decl pos:start="205:17" pos:end="205:53"><type pos:start="205:17" pos:end="205:26"><name pos:start="205:17" pos:end="205:24">uint16_t</name> <modifier pos:start="205:26" pos:end="205:26">*</modifier></type><name pos:start="205:27" pos:end="205:33">dstPtr2</name> <init pos:start="205:35" pos:end="205:53">= <expr pos:start="205:37" pos:end="205:53"><operator pos:start="205:37" pos:end="205:37">(</operator><name pos:start="205:38" pos:end="205:45">uint16_t</name><operator pos:start="205:46" pos:end="205:46">*</operator><operator pos:start="205:47" pos:end="205:47">)</operator><name pos:start="205:48" pos:end="205:53">dstPtr</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="209:17" pos:end="289:17"><if pos:start="209:17" pos:end="259:17">if <condition pos:start="209:20" pos:end="209:42">(<expr pos:start="209:21" pos:end="209:41"><call pos:start="209:21" pos:end="209:41"><name pos:start="209:21" pos:end="209:27">is16BPS</name><argument_list pos:start="209:28" pos:end="209:41">(<argument pos:start="209:29" pos:end="209:40"><expr pos:start="209:29" pos:end="209:40"><name pos:start="209:29" pos:end="209:40"><name pos:start="209:29" pos:end="209:29">c</name><operator pos:start="209:30" pos:end="209:31">-&gt;</operator><name pos:start="209:32" pos:end="209:40">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:44" pos:end="259:17">{<block_content pos:start="211:21" pos:end="257:21">

                    <decl_stmt pos:start="211:21" pos:end="232:0"><decl pos:start="211:21" pos:end="211:69"><type pos:start="211:21" pos:end="211:36"><specifier pos:start="211:21" pos:end="211:25">const</specifier> <name pos:start="211:27" pos:end="211:34">uint16_t</name> <modifier pos:start="211:36" pos:end="211:36">*</modifier></type><name pos:start="211:37" pos:end="211:43">srcPtr2</name> <init pos:start="211:45" pos:end="211:69">= <expr pos:start="211:47" pos:end="211:69"><operator pos:start="211:47" pos:end="211:47">(</operator><specifier pos:start="211:48" pos:end="211:52">const</specifier> <name pos:start="211:54" pos:end="211:61">uint16_t</name><operator pos:start="211:62" pos:end="211:62">*</operator><operator pos:start="211:63" pos:end="211:63">)</operator><name pos:start="211:64" pos:end="211:69">srcPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="213:1" pos:end="231:21">#<cpp:directive pos:start="213:2" pos:end="213:7">define</cpp:directive> <cpp:macro pos:start="213:9" pos:end="213:37"><name pos:start="213:9" pos:end="213:23">COPY16TO9_OR_10</name><parameter_list pos:start="213:24" pos:end="213:37">(<parameter pos:start="213:25" pos:end="213:29"><type pos:start="213:25" pos:end="213:29"><name pos:start="213:25" pos:end="213:29">rfunc</name></type></parameter>, <parameter pos:start="213:32" pos:end="213:36"><type pos:start="213:32" pos:end="213:36"><name pos:start="213:32" pos:end="213:36">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="215:21" pos:end="231:21">if (dst_depth == 9) { \

                        DITHER_COPY(dstPtr2, dstStride[plane]/2, wfunc, \

                                    srcPtr2, srcStride[plane]/2, rfunc, \

                                    dither_8x8_128, 7); \

                    } else { \

                        DITHER_COPY(dstPtr2, dstStride[plane]/2, wfunc, \

                                    srcPtr2, srcStride[plane]/2, rfunc, \

                                    dither_8x8_64, 6); \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="233:21" pos:end="257:21"><if pos:start="233:21" pos:end="245:21">if <condition pos:start="233:24" pos:end="233:43">(<expr pos:start="233:25" pos:end="233:42"><call pos:start="233:25" pos:end="233:42"><name pos:start="233:25" pos:end="233:28">isBE</name><argument_list pos:start="233:29" pos:end="233:42">(<argument pos:start="233:30" pos:end="233:41"><expr pos:start="233:30" pos:end="233:41"><name pos:start="233:30" pos:end="233:41"><name pos:start="233:30" pos:end="233:30">c</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="233:45" pos:end="245:21">{<block_content pos:start="235:25" pos:end="243:25">

                        <if_stmt pos:start="235:25" pos:end="243:25"><if pos:start="235:25" pos:end="239:25">if <condition pos:start="235:28" pos:end="235:47">(<expr pos:start="235:29" pos:end="235:46"><call pos:start="235:29" pos:end="235:46"><name pos:start="235:29" pos:end="235:32">isBE</name><argument_list pos:start="235:33" pos:end="235:46">(<argument pos:start="235:34" pos:end="235:45"><expr pos:start="235:34" pos:end="235:45"><name pos:start="235:34" pos:end="235:45"><name pos:start="235:34" pos:end="235:34">c</name><operator pos:start="235:35" pos:end="235:36">-&gt;</operator><name pos:start="235:37" pos:end="235:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="235:49" pos:end="239:25">{<block_content pos:start="237:29" pos:end="237:62">

                            <expr_stmt pos:start="237:29" pos:end="237:62"><expr pos:start="237:29" pos:end="237:61"><call pos:start="237:29" pos:end="237:61"><name pos:start="237:29" pos:end="237:43">COPY16TO9_OR_10</name><argument_list pos:start="237:44" pos:end="237:61">(<argument pos:start="237:45" pos:end="237:51"><expr pos:start="237:45" pos:end="237:51"><name pos:start="237:45" pos:end="237:51">AV_RB16</name></expr></argument>, <argument pos:start="237:54" pos:end="237:60"><expr pos:start="237:54" pos:end="237:60"><name pos:start="237:54" pos:end="237:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="239:27" pos:end="243:25">else <block pos:start="239:32" pos:end="243:25">{<block_content pos:start="241:29" pos:end="241:62">

                            <expr_stmt pos:start="241:29" pos:end="241:62"><expr pos:start="241:29" pos:end="241:61"><call pos:start="241:29" pos:end="241:61"><name pos:start="241:29" pos:end="241:43">COPY16TO9_OR_10</name><argument_list pos:start="241:44" pos:end="241:61">(<argument pos:start="241:45" pos:end="241:51"><expr pos:start="241:45" pos:end="241:51"><name pos:start="241:45" pos:end="241:51">AV_RL16</name></expr></argument>, <argument pos:start="241:54" pos:end="241:60"><expr pos:start="241:54" pos:end="241:60"><name pos:start="241:54" pos:end="241:60">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="245:23" pos:end="257:21">else <block pos:start="245:28" pos:end="257:21">{<block_content pos:start="247:25" pos:end="255:25">

                        <if_stmt pos:start="247:25" pos:end="255:25"><if pos:start="247:25" pos:end="251:25">if <condition pos:start="247:28" pos:end="247:47">(<expr pos:start="247:29" pos:end="247:46"><call pos:start="247:29" pos:end="247:46"><name pos:start="247:29" pos:end="247:32">isBE</name><argument_list pos:start="247:33" pos:end="247:46">(<argument pos:start="247:34" pos:end="247:45"><expr pos:start="247:34" pos:end="247:45"><name pos:start="247:34" pos:end="247:45"><name pos:start="247:34" pos:end="247:34">c</name><operator pos:start="247:35" pos:end="247:36">-&gt;</operator><name pos:start="247:37" pos:end="247:45">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:49" pos:end="251:25">{<block_content pos:start="249:29" pos:end="249:62">

                            <expr_stmt pos:start="249:29" pos:end="249:62"><expr pos:start="249:29" pos:end="249:61"><call pos:start="249:29" pos:end="249:61"><name pos:start="249:29" pos:end="249:43">COPY16TO9_OR_10</name><argument_list pos:start="249:44" pos:end="249:61">(<argument pos:start="249:45" pos:end="249:51"><expr pos:start="249:45" pos:end="249:51"><name pos:start="249:45" pos:end="249:51">AV_RB16</name></expr></argument>, <argument pos:start="249:54" pos:end="249:60"><expr pos:start="249:54" pos:end="249:60"><name pos:start="249:54" pos:end="249:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="251:27" pos:end="255:25">else <block pos:start="251:32" pos:end="255:25">{<block_content pos:start="253:29" pos:end="253:62">

                            <expr_stmt pos:start="253:29" pos:end="253:62"><expr pos:start="253:29" pos:end="253:61"><call pos:start="253:29" pos:end="253:61"><name pos:start="253:29" pos:end="253:43">COPY16TO9_OR_10</name><argument_list pos:start="253:44" pos:end="253:61">(<argument pos:start="253:45" pos:end="253:51"><expr pos:start="253:45" pos:end="253:51"><name pos:start="253:45" pos:end="253:51">AV_RL16</name></expr></argument>, <argument pos:start="253:54" pos:end="253:60"><expr pos:start="253:54" pos:end="253:60"><name pos:start="253:54" pos:end="253:60">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="259:19" pos:end="289:17">else <comment type="block" pos:start="259:24" pos:end="259:33">/* 8bit */</comment> <block pos:start="259:35" pos:end="289:17">{<block_content pos:start="279:21" pos:end="287:21">

<cpp:define pos:start="261:1" pos:end="277:21">#<cpp:directive pos:start="261:2" pos:end="261:7">define</cpp:directive> <cpp:macro pos:start="261:9" pos:end="261:29"><name pos:start="261:9" pos:end="261:22">COPY8TO9_OR_10</name><parameter_list pos:start="261:23" pos:end="261:29">(<parameter pos:start="261:24" pos:end="261:28"><type pos:start="261:24" pos:end="261:28"><name pos:start="261:24" pos:end="261:28">wfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="263:21" pos:end="277:21">for (i = 0; i &lt; height; i++) { \

                        for (j = 0; j &lt; length; j++) { \

                            const int srcpx = srcPtr[j]; \

                            wfunc(&amp;dstPtr2[j], (srcpx&lt;&lt;(dst_depth-8)) | (srcpx &gt;&gt; (16-dst_depth))); \

                        } \

                        dstPtr2 += dstStride[plane]/2; \

                        srcPtr  += srcStride[plane]; \

                    }</cpp:value></cpp:define>

                    <if_stmt pos:start="279:21" pos:end="287:21"><if pos:start="279:21" pos:end="283:21">if <condition pos:start="279:24" pos:end="279:43">(<expr pos:start="279:25" pos:end="279:42"><call pos:start="279:25" pos:end="279:42"><name pos:start="279:25" pos:end="279:28">isBE</name><argument_list pos:start="279:29" pos:end="279:42">(<argument pos:start="279:30" pos:end="279:41"><expr pos:start="279:30" pos:end="279:41"><name pos:start="279:30" pos:end="279:41"><name pos:start="279:30" pos:end="279:30">c</name><operator pos:start="279:31" pos:end="279:32">-&gt;</operator><name pos:start="279:33" pos:end="279:41">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="279:45" pos:end="283:21">{<block_content pos:start="281:25" pos:end="281:48">

                        <expr_stmt pos:start="281:25" pos:end="281:48"><expr pos:start="281:25" pos:end="281:47"><call pos:start="281:25" pos:end="281:47"><name pos:start="281:25" pos:end="281:38">COPY8TO9_OR_10</name><argument_list pos:start="281:39" pos:end="281:47">(<argument pos:start="281:40" pos:end="281:46"><expr pos:start="281:40" pos:end="281:46"><name pos:start="281:40" pos:end="281:46">AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="283:23" pos:end="287:21">else <block pos:start="283:28" pos:end="287:21">{<block_content pos:start="285:25" pos:end="285:48">

                        <expr_stmt pos:start="285:25" pos:end="285:48"><expr pos:start="285:25" pos:end="285:47"><call pos:start="285:25" pos:end="285:47"><name pos:start="285:25" pos:end="285:38">COPY8TO9_OR_10</name><argument_list pos:start="285:39" pos:end="285:47">(<argument pos:start="285:40" pos:end="285:46"><expr pos:start="285:40" pos:end="285:46"><name pos:start="285:40" pos:end="285:46">AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="291:15" pos:end="313:13">else if<condition pos:start="291:22" pos:end="291:70">(<expr pos:start="291:23" pos:end="291:69"><call pos:start="291:23" pos:end="291:43"><name pos:start="291:23" pos:end="291:29">is16BPS</name><argument_list pos:start="291:30" pos:end="291:43">(<argument pos:start="291:31" pos:end="291:42"><expr pos:start="291:31" pos:end="291:42"><name pos:start="291:31" pos:end="291:42"><name pos:start="291:31" pos:end="291:31">c</name><operator pos:start="291:32" pos:end="291:33">-&gt;</operator><name pos:start="291:34" pos:end="291:42">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="291:45" pos:end="291:46">&amp;&amp;</operator> <operator pos:start="291:48" pos:end="291:48">!</operator><call pos:start="291:49" pos:end="291:69"><name pos:start="291:49" pos:end="291:55">is16BPS</name><argument_list pos:start="291:56" pos:end="291:69">(<argument pos:start="291:57" pos:end="291:68"><expr pos:start="291:57" pos:end="291:68"><name pos:start="291:57" pos:end="291:68"><name pos:start="291:57" pos:end="291:57">c</name><operator pos:start="291:58" pos:end="291:59">-&gt;</operator><name pos:start="291:60" pos:end="291:68">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:72" pos:end="313:13">{<block_content pos:start="293:17" pos:end="311:17">

                <decl_stmt pos:start="293:17" pos:end="302:0"><decl pos:start="293:17" pos:end="293:65"><type pos:start="293:17" pos:end="293:32"><specifier pos:start="293:17" pos:end="293:21">const</specifier> <name pos:start="293:23" pos:end="293:30">uint16_t</name> <modifier pos:start="293:32" pos:end="293:32">*</modifier></type><name pos:start="293:33" pos:end="293:39">srcPtr2</name> <init pos:start="293:41" pos:end="293:65">= <expr pos:start="293:43" pos:end="293:65"><operator pos:start="293:43" pos:end="293:43">(</operator><specifier pos:start="293:44" pos:end="293:48">const</specifier> <name pos:start="293:50" pos:end="293:57">uint16_t</name><operator pos:start="293:58" pos:end="293:58">*</operator><operator pos:start="293:59" pos:end="293:59">)</operator><name pos:start="293:60" pos:end="293:65">srcPtr</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="295:1" pos:end="301:51">#<cpp:directive pos:start="295:2" pos:end="295:7">define</cpp:directive> <cpp:macro pos:start="295:9" pos:end="295:24"><name pos:start="295:9" pos:end="295:17">COPY16TO8</name><parameter_list pos:start="295:18" pos:end="295:24">(<parameter pos:start="295:19" pos:end="295:23"><type pos:start="295:19" pos:end="295:23"><name pos:start="295:19" pos:end="295:23">rfunc</name></type></parameter>)</parameter_list></cpp:macro> \

                    <cpp:value pos:start="297:21" pos:end="301:51">DITHER_COPY(dstPtr,  dstStride[plane],   W8, \

                                srcPtr2, srcStride[plane]/2, rfunc, \

                                dither_8x8_256, 8);</cpp:value></cpp:define>

                <if_stmt pos:start="303:17" pos:end="311:17"><if pos:start="303:17" pos:end="307:17">if <condition pos:start="303:20" pos:end="303:39">(<expr pos:start="303:21" pos:end="303:38"><call pos:start="303:21" pos:end="303:38"><name pos:start="303:21" pos:end="303:24">isBE</name><argument_list pos:start="303:25" pos:end="303:38">(<argument pos:start="303:26" pos:end="303:37"><expr pos:start="303:26" pos:end="303:37"><name pos:start="303:26" pos:end="303:37"><name pos:start="303:26" pos:end="303:26">c</name><operator pos:start="303:27" pos:end="303:28">-&gt;</operator><name pos:start="303:29" pos:end="303:37">srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:41" pos:end="307:17">{<block_content pos:start="305:21" pos:end="305:39">

                    <expr_stmt pos:start="305:21" pos:end="305:39"><expr pos:start="305:21" pos:end="305:38"><call pos:start="305:21" pos:end="305:38"><name pos:start="305:21" pos:end="305:29">COPY16TO8</name><argument_list pos:start="305:30" pos:end="305:38">(<argument pos:start="305:31" pos:end="305:37"><expr pos:start="305:31" pos:end="305:37"><name pos:start="305:31" pos:end="305:37">AV_RB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="307:19" pos:end="311:17">else <block pos:start="307:24" pos:end="311:17">{<block_content pos:start="309:21" pos:end="309:39">

                    <expr_stmt pos:start="309:21" pos:end="309:39"><expr pos:start="309:21" pos:end="309:38"><call pos:start="309:21" pos:end="309:38"><name pos:start="309:21" pos:end="309:29">COPY16TO8</name><argument_list pos:start="309:30" pos:end="309:38">(<argument pos:start="309:31" pos:end="309:37"><expr pos:start="309:31" pos:end="309:37"><name pos:start="309:31" pos:end="309:37">AV_RL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="313:15" pos:end="331:13">else if<condition pos:start="313:22" pos:end="313:70">(<expr pos:start="313:23" pos:end="313:69"><operator pos:start="313:23" pos:end="313:23">!</operator><call pos:start="313:24" pos:end="313:44"><name pos:start="313:24" pos:end="313:30">is16BPS</name><argument_list pos:start="313:31" pos:end="313:44">(<argument pos:start="313:32" pos:end="313:43"><expr pos:start="313:32" pos:end="313:43"><name pos:start="313:32" pos:end="313:43"><name pos:start="313:32" pos:end="313:32">c</name><operator pos:start="313:33" pos:end="313:34">-&gt;</operator><name pos:start="313:35" pos:end="313:43">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="313:46" pos:end="313:47">&amp;&amp;</operator> <call pos:start="313:49" pos:end="313:69"><name pos:start="313:49" pos:end="313:55">is16BPS</name><argument_list pos:start="313:56" pos:end="313:69">(<argument pos:start="313:57" pos:end="313:68"><expr pos:start="313:57" pos:end="313:68"><name pos:start="313:57" pos:end="313:68"><name pos:start="313:57" pos:end="313:57">c</name><operator pos:start="313:58" pos:end="313:59">-&gt;</operator><name pos:start="313:60" pos:end="313:68">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:72" pos:end="331:13">{<block_content pos:start="315:17" pos:end="329:17">

                <for pos:start="315:17" pos:end="329:17">for <control pos:start="315:21" pos:end="315:40">(<init pos:start="315:22" pos:end="315:25"><expr pos:start="315:22" pos:end="315:24"><name pos:start="315:22" pos:end="315:22">i</name><operator pos:start="315:23" pos:end="315:23">=</operator><literal type="number" pos:start="315:24" pos:end="315:24">0</literal></expr>;</init> <condition pos:start="315:27" pos:end="315:35"><expr pos:start="315:27" pos:end="315:34"><name pos:start="315:27" pos:end="315:27">i</name><operator pos:start="315:28" pos:end="315:28">&lt;</operator><name pos:start="315:29" pos:end="315:34">height</name></expr>;</condition> <incr pos:start="315:37" pos:end="315:39"><expr pos:start="315:37" pos:end="315:39"><name pos:start="315:37" pos:end="315:37">i</name><operator pos:start="315:38" pos:end="315:39">++</operator></expr></incr>)</control> <block pos:start="315:42" pos:end="329:17">{<block_content pos:start="317:21" pos:end="327:46">

                    <for pos:start="317:21" pos:end="323:21">for <control pos:start="317:25" pos:end="317:44">(<init pos:start="317:26" pos:end="317:29"><expr pos:start="317:26" pos:end="317:28"><name pos:start="317:26" pos:end="317:26">j</name><operator pos:start="317:27" pos:end="317:27">=</operator><literal type="number" pos:start="317:28" pos:end="317:28">0</literal></expr>;</init> <condition pos:start="317:31" pos:end="317:39"><expr pos:start="317:31" pos:end="317:38"><name pos:start="317:31" pos:end="317:31">j</name><operator pos:start="317:32" pos:end="317:32">&lt;</operator><name pos:start="317:33" pos:end="317:38">length</name></expr>;</condition> <incr pos:start="317:41" pos:end="317:43"><expr pos:start="317:41" pos:end="317:43"><name pos:start="317:41" pos:end="317:41">j</name><operator pos:start="317:42" pos:end="317:43">++</operator></expr></incr>)</control> <block pos:start="317:46" pos:end="323:21">{<block_content pos:start="319:25" pos:end="321:53">

                        <expr_stmt pos:start="319:25" pos:end="319:53"><expr pos:start="319:25" pos:end="319:52"><name pos:start="319:25" pos:end="319:40"><name pos:start="319:25" pos:end="319:30">dstPtr</name><index pos:start="319:31" pos:end="319:40">[ <expr pos:start="319:33" pos:end="319:36"><name pos:start="319:33" pos:end="319:33">j</name><operator pos:start="319:34" pos:end="319:35">&lt;&lt;</operator><literal type="number" pos:start="319:36" pos:end="319:36">1</literal></expr>   ]</index></name> <operator pos:start="319:42" pos:end="319:42">=</operator> <name pos:start="319:44" pos:end="319:52"><name pos:start="319:44" pos:end="319:49">srcPtr</name><index pos:start="319:50" pos:end="319:52">[<expr pos:start="319:51" pos:end="319:51"><name pos:start="319:51" pos:end="319:51">j</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="321:25" pos:end="321:53"><expr pos:start="321:25" pos:end="321:52"><name pos:start="321:25" pos:end="321:40"><name pos:start="321:25" pos:end="321:30">dstPtr</name><index pos:start="321:31" pos:end="321:40">[<expr pos:start="321:32" pos:end="321:39"><operator pos:start="321:32" pos:end="321:32">(</operator><name pos:start="321:33" pos:end="321:33">j</name><operator pos:start="321:34" pos:end="321:35">&lt;&lt;</operator><literal type="number" pos:start="321:36" pos:end="321:36">1</literal><operator pos:start="321:37" pos:end="321:37">)</operator><operator pos:start="321:38" pos:end="321:38">+</operator><literal type="number" pos:start="321:39" pos:end="321:39">1</literal></expr>]</index></name> <operator pos:start="321:42" pos:end="321:42">=</operator> <name pos:start="321:44" pos:end="321:52"><name pos:start="321:44" pos:end="321:49">srcPtr</name><index pos:start="321:50" pos:end="321:52">[<expr pos:start="321:51" pos:end="321:51"><name pos:start="321:51" pos:end="321:51">j</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="325:21" pos:end="325:46"><expr pos:start="325:21" pos:end="325:45"><name pos:start="325:21" pos:end="325:26">srcPtr</name><operator pos:start="325:27" pos:end="325:28">+=</operator> <name pos:start="325:30" pos:end="325:45"><name pos:start="325:30" pos:end="325:38">srcStride</name><index pos:start="325:39" pos:end="325:45">[<expr pos:start="325:40" pos:end="325:44"><name pos:start="325:40" pos:end="325:44">plane</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="327:21" pos:end="327:46"><expr pos:start="327:21" pos:end="327:45"><name pos:start="327:21" pos:end="327:26">dstPtr</name><operator pos:start="327:27" pos:end="327:28">+=</operator> <name pos:start="327:30" pos:end="327:45"><name pos:start="327:30" pos:end="327:38">dstStride</name><index pos:start="327:39" pos:end="327:45">[<expr pos:start="327:40" pos:end="327:44"><name pos:start="327:40" pos:end="327:44">plane</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="331:15" pos:end="349:13">else if<condition pos:start="331:22" pos:end="333:62">(<expr pos:start="331:23" pos:end="333:61"><call pos:start="331:23" pos:end="331:43"><name pos:start="331:23" pos:end="331:29">is16BPS</name><argument_list pos:start="331:30" pos:end="331:43">(<argument pos:start="331:31" pos:end="331:42"><expr pos:start="331:31" pos:end="331:42"><name pos:start="331:31" pos:end="331:42"><name pos:start="331:31" pos:end="331:31">c</name><operator pos:start="331:32" pos:end="331:33">-&gt;</operator><name pos:start="331:34" pos:end="331:42">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="331:45" pos:end="331:46">&amp;&amp;</operator> <call pos:start="331:48" pos:end="331:68"><name pos:start="331:48" pos:end="331:54">is16BPS</name><argument_list pos:start="331:55" pos:end="331:68">(<argument pos:start="331:56" pos:end="331:67"><expr pos:start="331:56" pos:end="331:67"><name pos:start="331:56" pos:end="331:67"><name pos:start="331:56" pos:end="331:56">c</name><operator pos:start="331:57" pos:end="331:58">-&gt;</operator><name pos:start="331:59" pos:end="331:67">dstFormat</name></name></expr></argument>)</argument_list></call>

                  <operator pos:start="333:19" pos:end="333:20">&amp;&amp;</operator> <call pos:start="333:22" pos:end="333:39"><name pos:start="333:22" pos:end="333:25">isBE</name><argument_list pos:start="333:26" pos:end="333:39">(<argument pos:start="333:27" pos:end="333:38"><expr pos:start="333:27" pos:end="333:38"><name pos:start="333:27" pos:end="333:38"><name pos:start="333:27" pos:end="333:27">c</name><operator pos:start="333:28" pos:end="333:29">-&gt;</operator><name pos:start="333:30" pos:end="333:38">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="333:41" pos:end="333:42">!=</operator> <call pos:start="333:44" pos:end="333:61"><name pos:start="333:44" pos:end="333:47">isBE</name><argument_list pos:start="333:48" pos:end="333:61">(<argument pos:start="333:49" pos:end="333:60"><expr pos:start="333:49" pos:end="333:60"><name pos:start="333:49" pos:end="333:60"><name pos:start="333:49" pos:end="333:49">c</name><operator pos:start="333:50" pos:end="333:51">-&gt;</operator><name pos:start="333:52" pos:end="333:60">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="333:64" pos:end="349:13">{<block_content pos:start="337:17" pos:end="347:17">



                <for pos:start="337:17" pos:end="347:17">for <control pos:start="337:21" pos:end="337:40">(<init pos:start="337:22" pos:end="337:25"><expr pos:start="337:22" pos:end="337:24"><name pos:start="337:22" pos:end="337:22">i</name><operator pos:start="337:23" pos:end="337:23">=</operator><literal type="number" pos:start="337:24" pos:end="337:24">0</literal></expr>;</init> <condition pos:start="337:27" pos:end="337:35"><expr pos:start="337:27" pos:end="337:34"><name pos:start="337:27" pos:end="337:27">i</name><operator pos:start="337:28" pos:end="337:28">&lt;</operator><name pos:start="337:29" pos:end="337:34">height</name></expr>;</condition> <incr pos:start="337:37" pos:end="337:39"><expr pos:start="337:37" pos:end="337:39"><name pos:start="337:37" pos:end="337:37">i</name><operator pos:start="337:38" pos:end="337:39">++</operator></expr></incr>)</control> <block pos:start="337:42" pos:end="347:17">{<block_content pos:start="339:21" pos:end="345:46">

                    <for pos:start="339:21" pos:end="341:90">for <control pos:start="339:25" pos:end="339:44">(<init pos:start="339:26" pos:end="339:29"><expr pos:start="339:26" pos:end="339:28"><name pos:start="339:26" pos:end="339:26">j</name><operator pos:start="339:27" pos:end="339:27">=</operator><literal type="number" pos:start="339:28" pos:end="339:28">0</literal></expr>;</init> <condition pos:start="339:31" pos:end="339:39"><expr pos:start="339:31" pos:end="339:38"><name pos:start="339:31" pos:end="339:31">j</name><operator pos:start="339:32" pos:end="339:32">&lt;</operator><name pos:start="339:33" pos:end="339:38">length</name></expr>;</condition> <incr pos:start="339:41" pos:end="339:43"><expr pos:start="339:41" pos:end="339:43"><name pos:start="339:41" pos:end="339:41">j</name><operator pos:start="339:42" pos:end="339:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="341:25" pos:end="341:90"><block_content pos:start="341:25" pos:end="341:90">

                        <expr_stmt pos:start="341:25" pos:end="341:90"><expr pos:start="341:25" pos:end="341:89"><operator pos:start="341:25" pos:end="341:25">(</operator><operator pos:start="341:26" pos:end="341:26">(</operator><name pos:start="341:27" pos:end="341:34">uint16_t</name><operator pos:start="341:35" pos:end="341:35">*</operator><operator pos:start="341:36" pos:end="341:36">)</operator><name pos:start="341:37" pos:end="341:42">dstPtr</name><operator pos:start="341:43" pos:end="341:43">)</operator><index pos:start="341:44" pos:end="341:46">[<expr pos:start="341:45" pos:end="341:45"><name pos:start="341:45" pos:end="341:45">j</name></expr>]</index> <operator pos:start="341:48" pos:end="341:48">=</operator> <call pos:start="341:50" pos:end="341:89"><name pos:start="341:50" pos:end="341:59">av_bswap16</name><argument_list pos:start="341:60" pos:end="341:89">(<argument pos:start="341:61" pos:end="341:88"><expr pos:start="341:61" pos:end="341:88"><operator pos:start="341:61" pos:end="341:61">(</operator><operator pos:start="341:62" pos:end="341:62">(</operator><specifier pos:start="341:63" pos:end="341:67">const</specifier> <name pos:start="341:69" pos:end="341:76">uint16_t</name><operator pos:start="341:77" pos:end="341:77">*</operator><operator pos:start="341:78" pos:end="341:78">)</operator><name pos:start="341:79" pos:end="341:84">srcPtr</name><operator pos:start="341:85" pos:end="341:85">)</operator><index pos:start="341:86" pos:end="341:88">[<expr pos:start="341:87" pos:end="341:87"><name pos:start="341:87" pos:end="341:87">j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <expr_stmt pos:start="343:21" pos:end="343:46"><expr pos:start="343:21" pos:end="343:45"><name pos:start="343:21" pos:end="343:26">srcPtr</name><operator pos:start="343:27" pos:end="343:28">+=</operator> <name pos:start="343:30" pos:end="343:45"><name pos:start="343:30" pos:end="343:38">srcStride</name><index pos:start="343:39" pos:end="343:45">[<expr pos:start="343:40" pos:end="343:44"><name pos:start="343:40" pos:end="343:44">plane</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:46"><expr pos:start="345:21" pos:end="345:45"><name pos:start="345:21" pos:end="345:26">dstPtr</name><operator pos:start="345:27" pos:end="345:28">+=</operator> <name pos:start="345:30" pos:end="345:45"><name pos:start="345:30" pos:end="345:38">dstStride</name><index pos:start="345:39" pos:end="345:45">[<expr pos:start="345:40" pos:end="345:44"><name pos:start="345:40" pos:end="345:44">plane</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="349:15" pos:end="357:13">else if <condition pos:start="349:23" pos:end="351:74">(<expr pos:start="349:24" pos:end="351:73"><name pos:start="349:24" pos:end="349:39"><name pos:start="349:24" pos:end="349:32">dstStride</name><index pos:start="349:33" pos:end="349:39">[<expr pos:start="349:34" pos:end="349:38"><name pos:start="349:34" pos:end="349:38">plane</name></expr>]</index></name> <operator pos:start="349:41" pos:end="349:42">==</operator> <name pos:start="349:44" pos:end="349:59"><name pos:start="349:44" pos:end="349:52">srcStride</name><index pos:start="349:53" pos:end="349:59">[<expr pos:start="349:54" pos:end="349:58"><name pos:start="349:54" pos:end="349:58">plane</name></expr>]</index></name> <operator pos:start="349:61" pos:end="349:62">&amp;&amp;</operator>

                       <name pos:start="351:24" pos:end="351:39"><name pos:start="351:24" pos:end="351:32">srcStride</name><index pos:start="351:33" pos:end="351:39">[<expr pos:start="351:34" pos:end="351:38"><name pos:start="351:34" pos:end="351:38">plane</name></expr>]</index></name> <operator pos:start="351:41" pos:end="351:41">&gt;</operator> <literal type="number" pos:start="351:43" pos:end="351:43">0</literal> <operator pos:start="351:45" pos:end="351:46">&amp;&amp;</operator> <name pos:start="351:48" pos:end="351:63"><name pos:start="351:48" pos:end="351:56">srcStride</name><index pos:start="351:57" pos:end="351:63">[<expr pos:start="351:58" pos:end="351:62"><name pos:start="351:58" pos:end="351:62">plane</name></expr>]</index></name> <operator pos:start="351:65" pos:end="351:66">==</operator> <name pos:start="351:68" pos:end="351:73">length</name></expr>)</condition> <block pos:start="351:76" pos:end="357:13">{<block_content pos:start="353:17" pos:end="355:48">

                <expr_stmt pos:start="353:17" pos:end="355:48"><expr pos:start="353:17" pos:end="355:47"><call pos:start="353:17" pos:end="355:47"><name pos:start="353:17" pos:end="353:22">memcpy</name><argument_list pos:start="353:23" pos:end="355:47">(<argument pos:start="353:24" pos:end="353:54"><expr pos:start="353:24" pos:end="353:54"><name pos:start="353:24" pos:end="353:33"><name pos:start="353:24" pos:end="353:26">dst</name><index pos:start="353:27" pos:end="353:33">[<expr pos:start="353:28" pos:end="353:32"><name pos:start="353:28" pos:end="353:32">plane</name></expr>]</index></name> <operator pos:start="353:35" pos:end="353:35">+</operator> <name pos:start="353:37" pos:end="353:52"><name pos:start="353:37" pos:end="353:45">dstStride</name><index pos:start="353:46" pos:end="353:52">[<expr pos:start="353:47" pos:end="353:51"><name pos:start="353:47" pos:end="353:51">plane</name></expr>]</index></name><operator pos:start="353:53" pos:end="353:53">*</operator><name pos:start="353:54" pos:end="353:54">y</name></expr></argument>, <argument pos:start="353:57" pos:end="353:66"><expr pos:start="353:57" pos:end="353:66"><name pos:start="353:57" pos:end="353:66"><name pos:start="353:57" pos:end="353:59">src</name><index pos:start="353:60" pos:end="353:66">[<expr pos:start="353:61" pos:end="353:65"><name pos:start="353:61" pos:end="353:65">plane</name></expr>]</index></name></expr></argument>,

                       <argument pos:start="355:24" pos:end="355:46"><expr pos:start="355:24" pos:end="355:46"><name pos:start="355:24" pos:end="355:29">height</name><operator pos:start="355:30" pos:end="355:30">*</operator><name pos:start="355:31" pos:end="355:46"><name pos:start="355:31" pos:end="355:39">dstStride</name><index pos:start="355:40" pos:end="355:46">[<expr pos:start="355:41" pos:end="355:45"><name pos:start="355:41" pos:end="355:45">plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="357:15" pos:end="373:13">else <block pos:start="357:20" pos:end="373:13">{<block_content pos:start="359:17" pos:end="371:17">

                <if_stmt pos:start="359:17" pos:end="361:30"><if pos:start="359:17" pos:end="361:30">if<condition pos:start="359:19" pos:end="359:66">(<expr pos:start="359:20" pos:end="359:65"><call pos:start="359:20" pos:end="359:40"><name pos:start="359:20" pos:end="359:26">is16BPS</name><argument_list pos:start="359:27" pos:end="359:40">(<argument pos:start="359:28" pos:end="359:39"><expr pos:start="359:28" pos:end="359:39"><name pos:start="359:28" pos:end="359:39"><name pos:start="359:28" pos:end="359:28">c</name><operator pos:start="359:29" pos:end="359:30">-&gt;</operator><name pos:start="359:31" pos:end="359:39">srcFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="359:42" pos:end="359:43">&amp;&amp;</operator> <call pos:start="359:45" pos:end="359:65"><name pos:start="359:45" pos:end="359:51">is16BPS</name><argument_list pos:start="359:52" pos:end="359:65">(<argument pos:start="359:53" pos:end="359:64"><expr pos:start="359:53" pos:end="359:64"><name pos:start="359:53" pos:end="359:64"><name pos:start="359:53" pos:end="359:53">c</name><operator pos:start="359:54" pos:end="359:55">-&gt;</operator><name pos:start="359:56" pos:end="359:64">dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="361:21" pos:end="361:30"><block_content pos:start="361:21" pos:end="361:30">

                    <expr_stmt pos:start="361:21" pos:end="361:30"><expr pos:start="361:21" pos:end="361:29"><name pos:start="361:21" pos:end="361:26">length</name><operator pos:start="361:27" pos:end="361:28">*=</operator><literal type="number" pos:start="361:29" pos:end="361:29">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <for pos:start="363:17" pos:end="371:17">for <control pos:start="363:21" pos:end="363:40">(<init pos:start="363:22" pos:end="363:25"><expr pos:start="363:22" pos:end="363:24"><name pos:start="363:22" pos:end="363:22">i</name><operator pos:start="363:23" pos:end="363:23">=</operator><literal type="number" pos:start="363:24" pos:end="363:24">0</literal></expr>;</init> <condition pos:start="363:27" pos:end="363:35"><expr pos:start="363:27" pos:end="363:34"><name pos:start="363:27" pos:end="363:27">i</name><operator pos:start="363:28" pos:end="363:28">&lt;</operator><name pos:start="363:29" pos:end="363:34">height</name></expr>;</condition> <incr pos:start="363:37" pos:end="363:39"><expr pos:start="363:37" pos:end="363:39"><name pos:start="363:37" pos:end="363:37">i</name><operator pos:start="363:38" pos:end="363:39">++</operator></expr></incr>)</control> <block pos:start="363:42" pos:end="371:17">{<block_content pos:start="365:21" pos:end="369:46">

                    <expr_stmt pos:start="365:21" pos:end="365:51"><expr pos:start="365:21" pos:end="365:50"><call pos:start="365:21" pos:end="365:50"><name pos:start="365:21" pos:end="365:26">memcpy</name><argument_list pos:start="365:27" pos:end="365:50">(<argument pos:start="365:28" pos:end="365:33"><expr pos:start="365:28" pos:end="365:33"><name pos:start="365:28" pos:end="365:33">dstPtr</name></expr></argument>, <argument pos:start="365:36" pos:end="365:41"><expr pos:start="365:36" pos:end="365:41"><name pos:start="365:36" pos:end="365:41">srcPtr</name></expr></argument>, <argument pos:start="365:44" pos:end="365:49"><expr pos:start="365:44" pos:end="365:49"><name pos:start="365:44" pos:end="365:49">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="367:21" pos:end="367:46"><expr pos:start="367:21" pos:end="367:45"><name pos:start="367:21" pos:end="367:26">srcPtr</name><operator pos:start="367:27" pos:end="367:28">+=</operator> <name pos:start="367:30" pos:end="367:45"><name pos:start="367:30" pos:end="367:38">srcStride</name><index pos:start="367:39" pos:end="367:45">[<expr pos:start="367:40" pos:end="367:44"><name pos:start="367:40" pos:end="367:44">plane</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:46"><expr pos:start="369:21" pos:end="369:45"><name pos:start="369:21" pos:end="369:26">dstPtr</name><operator pos:start="369:27" pos:end="369:28">+=</operator> <name pos:start="369:30" pos:end="369:45"><name pos:start="369:30" pos:end="369:38">dstStride</name><index pos:start="369:39" pos:end="369:45">[<expr pos:start="369:40" pos:end="369:44"><name pos:start="369:40" pos:end="369:44">plane</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <return pos:start="379:5" pos:end="379:21">return <expr pos:start="379:12" pos:end="379:20"><name pos:start="379:12" pos:end="379:20">srcSliceH</name></expr>;</return>

</block_content>}</block></function>
</unit>
