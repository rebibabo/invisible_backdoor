<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22990.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">bdrv_reopen_prepare</name><parameter_list pos:start="1:24" pos:end="3:37">(<parameter pos:start="1:25" pos:end="1:53"><decl pos:start="1:25" pos:end="1:53"><type pos:start="1:25" pos:end="1:53"><name pos:start="1:25" pos:end="1:39">BDRVReopenState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:53">reopen_state</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:78"><decl pos:start="1:56" pos:end="1:78"><type pos:start="1:56" pos:end="1:78"><name pos:start="1:56" pos:end="1:71">BlockReopenQueue</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:78">queue</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:29">Error</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier><modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:36">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="233:1">{<block_content pos:start="7:5" pos:end="231:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:16">= <expr pos:start="7:15" pos:end="7:16"><operator pos:start="7:15" pos:end="7:15">-</operator><literal type="number" pos:start="7:16" pos:end="7:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">BlockDriver</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:21">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:18">read_only</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:33"><expr pos:start="21:5" pos:end="21:32"><call pos:start="21:5" pos:end="21:32"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:32">(<argument pos:start="21:12" pos:end="21:31"><expr pos:start="21:12" pos:end="21:31"><name pos:start="21:12" pos:end="21:23">reopen_state</name> <operator pos:start="21:25" pos:end="21:26">!=</operator> <name pos:start="21:28" pos:end="21:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:41">(<argument pos:start="23:12" pos:end="23:40"><expr pos:start="23:12" pos:end="23:40"><name pos:start="23:12" pos:end="23:32"><name pos:start="23:12" pos:end="23:23">reopen_state</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:27">bs</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:32">drv</name></name> <operator pos:start="23:34" pos:end="23:35">!=</operator> <name pos:start="23:37" pos:end="23:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:7">drv</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:31"><name pos:start="25:11" pos:end="25:22">reopen_state</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:26">bs</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:31">drv</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:45">/* Process generic block layer options */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:71"><expr pos:start="31:5" pos:end="31:70"><name pos:start="31:5" pos:end="31:8">opts</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:70"><name pos:start="31:12" pos:end="31:27">qemu_opts_create</name><argument_list pos:start="31:28" pos:end="31:70">(<argument pos:start="31:29" pos:end="31:46"><expr pos:start="31:29" pos:end="31:46"><operator pos:start="31:29" pos:end="31:29">&amp;</operator><name pos:start="31:30" pos:end="31:46">bdrv_runtime_opts</name></expr></argument>, <argument pos:start="31:49" pos:end="31:52"><expr pos:start="31:49" pos:end="31:52"><name pos:start="31:49" pos:end="31:52">NULL</name></expr></argument>, <argument pos:start="31:55" pos:end="31:55"><expr pos:start="31:55" pos:end="31:55"><literal type="number" pos:start="31:55" pos:end="31:55">0</literal></expr></argument>, <argument pos:start="31:58" pos:end="31:69"><expr pos:start="31:58" pos:end="31:69"><operator pos:start="31:58" pos:end="31:58">&amp;</operator><name pos:start="31:59" pos:end="31:69">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:68"><expr pos:start="33:5" pos:end="33:67"><call pos:start="33:5" pos:end="33:67"><name pos:start="33:5" pos:end="33:26">qemu_opts_absorb_qdict</name><argument_list pos:start="33:27" pos:end="33:67">(<argument pos:start="33:28" pos:end="33:31"><expr pos:start="33:28" pos:end="33:31"><name pos:start="33:28" pos:end="33:31">opts</name></expr></argument>, <argument pos:start="33:34" pos:end="33:54"><expr pos:start="33:34" pos:end="33:54"><name pos:start="33:34" pos:end="33:54"><name pos:start="33:34" pos:end="33:45">reopen_state</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:54">options</name></name></expr></argument>, <argument pos:start="33:57" pos:end="33:66"><expr pos:start="33:57" pos:end="33:66"><operator pos:start="33:57" pos:end="33:57">&amp;</operator><name pos:start="33:58" pos:end="33:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">local_err</name></expr>)</condition> <block pos:start="35:20" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:19">

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:23">error_propagate</name><argument_list pos:start="37:24" pos:end="37:40">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">errp</name></expr></argument>, <argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:22"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">-</operator><name pos:start="39:16" pos:end="39:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:19">goto <name pos:start="41:14" pos:end="41:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:58"><expr pos:start="47:5" pos:end="47:57"><call pos:start="47:5" pos:end="47:57"><name pos:start="47:5" pos:end="47:29">update_flags_from_options</name><argument_list pos:start="47:30" pos:end="47:57">(<argument pos:start="47:31" pos:end="47:50"><expr pos:start="47:31" pos:end="47:50"><operator pos:start="47:31" pos:end="47:31">&amp;</operator><name pos:start="47:32" pos:end="47:50"><name pos:start="47:32" pos:end="47:43">reopen_state</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:50">flags</name></name></expr></argument>, <argument pos:start="47:53" pos:end="47:56"><expr pos:start="47:53" pos:end="47:56"><name pos:start="47:53" pos:end="47:56">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="53:60">/* node-name and driver must be unchanged. Put them back into the QDict, so

     * that they are checked at the end of this function. */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:9">value</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:43"><name pos:start="55:13" pos:end="55:24">qemu_opt_get</name><argument_list pos:start="55:25" pos:end="55:43">(<argument pos:start="55:26" pos:end="55:29"><expr pos:start="55:26" pos:end="55:29"><name pos:start="55:26" pos:end="55:29">opts</name></expr></argument>, <argument pos:start="55:32" pos:end="55:42"><expr pos:start="55:32" pos:end="55:42"><literal type="string" pos:start="55:32" pos:end="55:42">"node-name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:14">(<expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:13">value</name></expr>)</condition> <block pos:start="57:16" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:65">

        <expr_stmt pos:start="59:9" pos:end="59:65"><expr pos:start="59:9" pos:end="59:64"><call pos:start="59:9" pos:end="59:64"><name pos:start="59:9" pos:end="59:21">qdict_put_str</name><argument_list pos:start="59:22" pos:end="59:64">(<argument pos:start="59:23" pos:end="59:43"><expr pos:start="59:23" pos:end="59:43"><name pos:start="59:23" pos:end="59:43"><name pos:start="59:23" pos:end="59:34">reopen_state</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:43">options</name></name></expr></argument>, <argument pos:start="59:46" pos:end="59:56"><expr pos:start="59:46" pos:end="59:56"><literal type="string" pos:start="59:46" pos:end="59:56">"node-name"</literal></expr></argument>, <argument pos:start="59:59" pos:end="59:63"><expr pos:start="59:59" pos:end="59:63"><name pos:start="59:59" pos:end="59:63">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:41"><expr pos:start="65:5" pos:end="65:40"><name pos:start="65:5" pos:end="65:9">value</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:24">qemu_opt_get</name><argument_list pos:start="65:25" pos:end="65:40">(<argument pos:start="65:26" pos:end="65:29"><expr pos:start="65:26" pos:end="65:29"><name pos:start="65:26" pos:end="65:29">opts</name></expr></argument>, <argument pos:start="65:32" pos:end="65:39"><expr pos:start="65:32" pos:end="65:39"><literal type="string" pos:start="65:32" pos:end="65:39">"driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:14">(<expr pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:13">value</name></expr>)</condition> <block pos:start="67:16" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:62">

        <expr_stmt pos:start="69:9" pos:end="69:62"><expr pos:start="69:9" pos:end="69:61"><call pos:start="69:9" pos:end="69:61"><name pos:start="69:9" pos:end="69:21">qdict_put_str</name><argument_list pos:start="69:22" pos:end="69:61">(<argument pos:start="69:23" pos:end="69:43"><expr pos:start="69:23" pos:end="69:43"><name pos:start="69:23" pos:end="69:43"><name pos:start="69:23" pos:end="69:34">reopen_state</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:43">options</name></name></expr></argument>, <argument pos:start="69:46" pos:end="69:53"><expr pos:start="69:46" pos:end="69:53"><literal type="string" pos:start="69:46" pos:end="69:53">"driver"</literal></expr></argument>, <argument pos:start="69:56" pos:end="69:60"><expr pos:start="69:56" pos:end="69:60"><name pos:start="69:56" pos:end="69:60">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="79:63">/* If we are to stay read-only, do not allow permission change

     * to r/w. Attempting to set to r/w may fail if either BDRV_O_ALLOW_RDWR is

     * not set, or if the BDS still has copy_on_read enabled */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:53"><expr pos:start="81:5" pos:end="81:52"><name pos:start="81:5" pos:end="81:13">read_only</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <operator pos:start="81:17" pos:end="81:17">!</operator><operator pos:start="81:18" pos:end="81:18">(</operator><name pos:start="81:19" pos:end="81:37"><name pos:start="81:19" pos:end="81:30">reopen_state</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:37">flags</name></name> <operator pos:start="81:39" pos:end="81:39">&amp;</operator> <name pos:start="81:41" pos:end="81:51">BDRV_O_RDWR</name><operator pos:start="81:52" pos:end="81:52">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:80"><expr pos:start="83:5" pos:end="83:79"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:79"><name pos:start="83:11" pos:end="83:32">bdrv_can_set_read_only</name><argument_list pos:start="83:33" pos:end="83:79">(<argument pos:start="83:34" pos:end="83:49"><expr pos:start="83:34" pos:end="83:49"><name pos:start="83:34" pos:end="83:49"><name pos:start="83:34" pos:end="83:45">reopen_state</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:49">bs</name></name></expr></argument>, <argument pos:start="83:52" pos:end="83:60"><expr pos:start="83:52" pos:end="83:60"><name pos:start="83:52" pos:end="83:60">read_only</name></expr></argument>, <argument pos:start="83:63" pos:end="83:66"><expr pos:start="83:63" pos:end="83:66"><name pos:start="83:63" pos:end="83:66">true</name></expr></argument>, <argument pos:start="83:69" pos:end="83:78"><expr pos:start="83:69" pos:end="83:78"><operator pos:start="83:69" pos:end="83:69">&amp;</operator><name pos:start="83:70" pos:end="83:78">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:18">(<expr pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:17">local_err</name></expr>)</condition> <block pos:start="85:20" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><call pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:23">error_propagate</name><argument_list pos:start="87:24" pos:end="87:40">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">errp</name></expr></argument>, <argument pos:start="87:31" pos:end="87:39"><expr pos:start="87:31" pos:end="87:39"><name pos:start="87:31" pos:end="87:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:19">goto <name pos:start="89:14" pos:end="89:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:56">/* Calculate required permissions after reopening */</comment>

    <expr_stmt pos:start="97:5" pos:end="99:70"><expr pos:start="97:5" pos:end="99:69"><call pos:start="97:5" pos:end="99:69"><name pos:start="97:5" pos:end="97:20">bdrv_reopen_perm</name><argument_list pos:start="97:21" pos:end="99:69">(<argument pos:start="97:22" pos:end="97:26"><expr pos:start="97:22" pos:end="97:26"><name pos:start="97:22" pos:end="97:26">queue</name></expr></argument>, <argument pos:start="97:29" pos:end="97:44"><expr pos:start="97:29" pos:end="97:44"><name pos:start="97:29" pos:end="97:44"><name pos:start="97:29" pos:end="97:40">reopen_state</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:44">bs</name></name></expr></argument>,

                     <argument pos:start="99:22" pos:end="99:40"><expr pos:start="99:22" pos:end="99:40"><operator pos:start="99:22" pos:end="99:22">&amp;</operator><name pos:start="99:23" pos:end="99:40"><name pos:start="99:23" pos:end="99:34">reopen_state</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:40">perm</name></name></expr></argument>, <argument pos:start="99:43" pos:end="99:68"><expr pos:start="99:43" pos:end="99:68"><operator pos:start="99:43" pos:end="99:43">&amp;</operator><name pos:start="99:44" pos:end="99:68"><name pos:start="99:44" pos:end="99:55">reopen_state</name><operator pos:start="99:56" pos:end="99:57">-&gt;</operator><name pos:start="99:58" pos:end="99:68">shared_perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:39"><expr pos:start="103:5" pos:end="103:38"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="103:38"><name pos:start="103:11" pos:end="103:20">bdrv_flush</name><argument_list pos:start="103:21" pos:end="103:38">(<argument pos:start="103:22" pos:end="103:37"><expr pos:start="103:22" pos:end="103:37"><name pos:start="103:22" pos:end="103:37"><name pos:start="103:22" pos:end="103:33">reopen_state</name><operator pos:start="103:34" pos:end="103:35">-&gt;</operator><name pos:start="103:36" pos:end="103:37">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:12">(<expr pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">ret</name></expr>)</condition> <block pos:start="105:14" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:19">

        <expr_stmt pos:start="107:9" pos:end="107:61"><expr pos:start="107:9" pos:end="107:60"><call pos:start="107:9" pos:end="107:60"><name pos:start="107:9" pos:end="107:24">error_setg_errno</name><argument_list pos:start="107:25" pos:end="107:60">(<argument pos:start="107:26" pos:end="107:29"><expr pos:start="107:26" pos:end="107:29"><name pos:start="107:26" pos:end="107:29">errp</name></expr></argument>, <argument pos:start="107:32" pos:end="107:35"><expr pos:start="107:32" pos:end="107:35"><operator pos:start="107:32" pos:end="107:32">-</operator><name pos:start="107:33" pos:end="107:35">ret</name></expr></argument>, <argument pos:start="107:38" pos:end="107:59"><expr pos:start="107:38" pos:end="107:59"><literal type="string" pos:start="107:38" pos:end="107:59">"Error flushing drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:19">goto <name pos:start="109:14" pos:end="109:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="153:5"><if pos:start="115:5" pos:end="137:5">if <condition pos:start="115:8" pos:end="115:33">(<expr pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:11">drv</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:32">bdrv_reopen_prepare</name></name></expr>)</condition> <block pos:start="115:35" pos:end="137:5">{<block_content pos:start="117:9" pos:end="135:9">

        <expr_stmt pos:start="117:9" pos:end="117:72"><expr pos:start="117:9" pos:end="117:71"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:71"><name pos:start="117:15" pos:end="117:38"><name pos:start="117:15" pos:end="117:17">drv</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:38">bdrv_reopen_prepare</name></name><argument_list pos:start="117:39" pos:end="117:71">(<argument pos:start="117:40" pos:end="117:51"><expr pos:start="117:40" pos:end="117:51"><name pos:start="117:40" pos:end="117:51">reopen_state</name></expr></argument>, <argument pos:start="117:54" pos:end="117:58"><expr pos:start="117:54" pos:end="117:58"><name pos:start="117:54" pos:end="117:58">queue</name></expr></argument>, <argument pos:start="117:61" pos:end="117:70"><expr pos:start="117:61" pos:end="117:70"><operator pos:start="117:61" pos:end="117:61">&amp;</operator><name pos:start="117:62" pos:end="117:70">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="135:9"><if pos:start="119:9" pos:end="135:9">if <condition pos:start="119:12" pos:end="119:16">(<expr pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:15">ret</name></expr>)</condition> <block pos:start="119:18" pos:end="135:9">{<block_content pos:start="121:13" pos:end="133:23">

            <if_stmt pos:start="121:13" pos:end="131:13"><if pos:start="121:13" pos:end="125:13">if <condition pos:start="121:16" pos:end="121:34">(<expr pos:start="121:17" pos:end="121:33"><name pos:start="121:17" pos:end="121:25">local_err</name> <operator pos:start="121:27" pos:end="121:28">!=</operator> <name pos:start="121:30" pos:end="121:33">NULL</name></expr>)</condition> <block pos:start="121:36" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:49">

                <expr_stmt pos:start="123:17" pos:end="123:49"><expr pos:start="123:17" pos:end="123:48"><call pos:start="123:17" pos:end="123:48"><name pos:start="123:17" pos:end="123:31">error_propagate</name><argument_list pos:start="123:32" pos:end="123:48">(<argument pos:start="123:33" pos:end="123:36"><expr pos:start="123:33" pos:end="123:36"><name pos:start="123:33" pos:end="123:36">errp</name></expr></argument>, <argument pos:start="123:39" pos:end="123:47"><expr pos:start="123:39" pos:end="123:47"><name pos:start="123:39" pos:end="123:47">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="131:13">else <block pos:start="125:20" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:55">

                <expr_stmt pos:start="127:17" pos:end="129:55"><expr pos:start="127:17" pos:end="129:54"><call pos:start="127:17" pos:end="129:54"><name pos:start="127:17" pos:end="127:26">error_setg</name><argument_list pos:start="127:27" pos:end="129:54">(<argument pos:start="127:28" pos:end="127:31"><expr pos:start="127:28" pos:end="127:31"><name pos:start="127:28" pos:end="127:31">errp</name></expr></argument>, <argument pos:start="127:34" pos:end="127:78"><expr pos:start="127:34" pos:end="127:78"><literal type="string" pos:start="127:34" pos:end="127:78">"failed while preparing to reopen image '%s'"</literal></expr></argument>,

                           <argument pos:start="129:28" pos:end="129:53"><expr pos:start="129:28" pos:end="129:53"><name pos:start="129:28" pos:end="129:53"><name pos:start="129:28" pos:end="129:39">reopen_state</name><operator pos:start="129:40" pos:end="129:41">-&gt;</operator><name pos:start="129:42" pos:end="129:43">bs</name><operator pos:start="129:44" pos:end="129:45">-&gt;</operator><name pos:start="129:46" pos:end="129:53">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <goto pos:start="133:13" pos:end="133:23">goto <name pos:start="133:18" pos:end="133:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="153:5">else <block pos:start="137:12" pos:end="153:5">{<block_content pos:start="143:9" pos:end="151:19">

        <comment type="block" pos:start="139:9" pos:end="141:45">/* It is currently mandatory to have a bdrv_reopen_prepare()

         * handler for each supported drv. */</comment>

        <expr_stmt pos:start="143:9" pos:end="147:67"><expr pos:start="143:9" pos:end="147:66"><call pos:start="143:9" pos:end="147:66"><name pos:start="143:9" pos:end="143:18">error_setg</name><argument_list pos:start="143:19" pos:end="147:66">(<argument pos:start="143:20" pos:end="143:23"><expr pos:start="143:20" pos:end="143:23"><name pos:start="143:20" pos:end="143:23">errp</name></expr></argument>, <argument pos:start="143:26" pos:end="145:53"><expr pos:start="143:26" pos:end="145:53"><literal type="string" pos:start="143:26" pos:end="143:63">"Block format '%s' used by node '%s' "</literal>

                   <literal type="string" pos:start="145:20" pos:end="145:53">"does not support reopening files"</literal></expr></argument>, <argument pos:start="145:56" pos:end="145:71"><expr pos:start="145:56" pos:end="145:71"><name pos:start="145:56" pos:end="145:71"><name pos:start="145:56" pos:end="145:58">drv</name><operator pos:start="145:59" pos:end="145:60">-&gt;</operator><name pos:start="145:61" pos:end="145:71">format_name</name></name></expr></argument>,

                   <argument pos:start="147:20" pos:end="147:65"><expr pos:start="147:20" pos:end="147:65"><call pos:start="147:20" pos:end="147:65"><name pos:start="147:20" pos:end="147:47">bdrv_get_device_or_node_name</name><argument_list pos:start="147:48" pos:end="147:65">(<argument pos:start="147:49" pos:end="147:64"><expr pos:start="147:49" pos:end="147:64"><name pos:start="147:49" pos:end="147:64"><name pos:start="147:49" pos:end="147:60">reopen_state</name><operator pos:start="147:61" pos:end="147:62">-&gt;</operator><name pos:start="147:63" pos:end="147:64">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:17"><expr pos:start="149:9" pos:end="149:16"><name pos:start="149:9" pos:end="149:11">ret</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <operator pos:start="149:15" pos:end="149:15">-</operator><literal type="number" pos:start="149:16" pos:end="149:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="151:9" pos:end="151:19">goto <name pos:start="151:14" pos:end="151:18">error</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="161:67">/* Options that are not handled are only okay if they are unchanged

     * compared to the old state. It is expected that some options are only

     * used for the initial open, but not reopen (e.g. filename) */</comment>

    <if_stmt pos:start="163:5" pos:end="207:5"><if pos:start="163:5" pos:end="207:5">if <condition pos:start="163:8" pos:end="163:42">(<expr pos:start="163:9" pos:end="163:41"><call pos:start="163:9" pos:end="163:41"><name pos:start="163:9" pos:end="163:18">qdict_size</name><argument_list pos:start="163:19" pos:end="163:41">(<argument pos:start="163:20" pos:end="163:40"><expr pos:start="163:20" pos:end="163:40"><name pos:start="163:20" pos:end="163:40"><name pos:start="163:20" pos:end="163:31">reopen_state</name><operator pos:start="163:32" pos:end="163:33">-&gt;</operator><name pos:start="163:34" pos:end="163:40">options</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:44" pos:end="207:5">{<block_content pos:start="165:9" pos:end="205:69">

        <decl_stmt pos:start="165:9" pos:end="165:69"><decl pos:start="165:9" pos:end="165:68"><type pos:start="165:9" pos:end="165:26"><specifier pos:start="165:9" pos:end="165:13">const</specifier> <name pos:start="165:15" pos:end="165:24">QDictEntry</name> <modifier pos:start="165:26" pos:end="165:26">*</modifier></type><name pos:start="165:27" pos:end="165:31">entry</name> <init pos:start="165:33" pos:end="165:68">= <expr pos:start="165:35" pos:end="165:68"><call pos:start="165:35" pos:end="165:68"><name pos:start="165:35" pos:end="165:45">qdict_first</name><argument_list pos:start="165:46" pos:end="165:68">(<argument pos:start="165:47" pos:end="165:67"><expr pos:start="165:47" pos:end="165:67"><name pos:start="165:47" pos:end="165:67"><name pos:start="165:47" pos:end="165:58">reopen_state</name><operator pos:start="165:59" pos:end="165:60">-&gt;</operator><name pos:start="165:61" pos:end="165:67">options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <do pos:start="169:9" pos:end="205:69">do <block pos:start="169:12" pos:end="205:9">{<block_content pos:start="171:13" pos:end="203:13">

            <decl_stmt pos:start="171:13" pos:end="171:64"><decl pos:start="171:13" pos:end="171:63"><type pos:start="171:13" pos:end="171:21"><name pos:start="171:13" pos:end="171:19">QString</name> <modifier pos:start="171:21" pos:end="171:21">*</modifier></type><name pos:start="171:22" pos:end="171:28">new_obj</name> <init pos:start="171:30" pos:end="171:63">= <expr pos:start="171:32" pos:end="171:63"><call pos:start="171:32" pos:end="171:63"><name pos:start="171:32" pos:end="171:49">qobject_to_qstring</name><argument_list pos:start="171:50" pos:end="171:63">(<argument pos:start="171:51" pos:end="171:62"><expr pos:start="171:51" pos:end="171:62"><name pos:start="171:51" pos:end="171:62"><name pos:start="171:51" pos:end="171:55">entry</name><operator pos:start="171:56" pos:end="171:57">-&gt;</operator><name pos:start="171:58" pos:end="171:62">value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="173:13" pos:end="173:55"><decl pos:start="173:13" pos:end="173:54"><type pos:start="173:13" pos:end="173:24"><specifier pos:start="173:13" pos:end="173:17">const</specifier> <name pos:start="173:19" pos:end="173:22">char</name> <modifier pos:start="173:24" pos:end="173:24">*</modifier></type><name pos:start="173:25" pos:end="173:27">new</name> <init pos:start="173:29" pos:end="173:54">= <expr pos:start="173:31" pos:end="173:54"><call pos:start="173:31" pos:end="173:54"><name pos:start="173:31" pos:end="173:45">qstring_get_str</name><argument_list pos:start="173:46" pos:end="173:54">(<argument pos:start="173:47" pos:end="173:53"><expr pos:start="173:47" pos:end="173:53"><name pos:start="173:47" pos:end="173:53">new_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="175:13" pos:end="187:15">/*

             * Caution: while qdict_get_try_str() is fine, getting

             * non-string types would require more care.  When

             * bs-&gt;options come from -blockdev or blockdev_add, its

             * members are typed according to the QAPI schema, but

             * when they come from -drive, they're all QString.

             */</comment>

            <decl_stmt pos:start="189:13" pos:end="191:60"><decl pos:start="189:13" pos:end="191:59"><type pos:start="189:13" pos:end="189:24"><specifier pos:start="189:13" pos:end="189:17">const</specifier> <name pos:start="189:19" pos:end="189:22">char</name> <modifier pos:start="189:24" pos:end="189:24">*</modifier></type><name pos:start="189:25" pos:end="189:27">old</name> <init pos:start="189:29" pos:end="191:59">= <expr pos:start="189:31" pos:end="191:59"><call pos:start="189:31" pos:end="191:59"><name pos:start="189:31" pos:end="189:47">qdict_get_try_str</name><argument_list pos:start="189:48" pos:end="191:59">(<argument pos:start="189:49" pos:end="189:73"><expr pos:start="189:49" pos:end="189:73"><name pos:start="189:49" pos:end="189:73"><name pos:start="189:49" pos:end="189:60">reopen_state</name><operator pos:start="189:61" pos:end="189:62">-&gt;</operator><name pos:start="189:63" pos:end="189:64">bs</name><operator pos:start="189:65" pos:end="189:66">-&gt;</operator><name pos:start="189:67" pos:end="189:73">options</name></name></expr></argument>,

                                                <argument pos:start="191:49" pos:end="191:58"><expr pos:start="191:49" pos:end="191:58"><name pos:start="191:49" pos:end="191:58"><name pos:start="191:49" pos:end="191:53">entry</name><operator pos:start="191:54" pos:end="191:55">-&gt;</operator><name pos:start="191:56" pos:end="191:58">key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="195:13" pos:end="203:13"><if pos:start="195:13" pos:end="203:13">if <condition pos:start="195:16" pos:end="195:41">(<expr pos:start="195:17" pos:end="195:40"><operator pos:start="195:17" pos:end="195:17">!</operator><name pos:start="195:18" pos:end="195:20">old</name> <operator pos:start="195:22" pos:end="195:23">||</operator> <call pos:start="195:25" pos:end="195:40"><name pos:start="195:25" pos:end="195:30">strcmp</name><argument_list pos:start="195:31" pos:end="195:40">(<argument pos:start="195:32" pos:end="195:34"><expr pos:start="195:32" pos:end="195:34"><name pos:start="195:32" pos:end="195:34">new</name></expr></argument>, <argument pos:start="195:37" pos:end="195:39"><expr pos:start="195:37" pos:end="195:39"><name pos:start="195:37" pos:end="195:39">old</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:43" pos:end="203:13">{<block_content pos:start="197:17" pos:end="201:27">

                <expr_stmt pos:start="197:17" pos:end="197:78"><expr pos:start="197:17" pos:end="197:77"><call pos:start="197:17" pos:end="197:77"><name pos:start="197:17" pos:end="197:26">error_setg</name><argument_list pos:start="197:27" pos:end="197:77">(<argument pos:start="197:28" pos:end="197:31"><expr pos:start="197:28" pos:end="197:31"><name pos:start="197:28" pos:end="197:31">errp</name></expr></argument>, <argument pos:start="197:34" pos:end="197:64"><expr pos:start="197:34" pos:end="197:64"><literal type="string" pos:start="197:34" pos:end="197:64">"Cannot change the option '%s'"</literal></expr></argument>, <argument pos:start="197:67" pos:end="197:76"><expr pos:start="197:67" pos:end="197:76"><name pos:start="197:67" pos:end="197:76"><name pos:start="197:67" pos:end="197:71">entry</name><operator pos:start="197:72" pos:end="197:73">-&gt;</operator><name pos:start="197:74" pos:end="197:76">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:30"><expr pos:start="199:17" pos:end="199:29"><name pos:start="199:17" pos:end="199:19">ret</name> <operator pos:start="199:21" pos:end="199:21">=</operator> <operator pos:start="199:23" pos:end="199:23">-</operator><name pos:start="199:24" pos:end="199:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="201:17" pos:end="201:27">goto <name pos:start="201:22" pos:end="201:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="205:17" pos:end="205:68">(<expr pos:start="205:18" pos:end="205:67"><operator pos:start="205:18" pos:end="205:18">(</operator><name pos:start="205:19" pos:end="205:23">entry</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <call pos:start="205:27" pos:end="205:66"><name pos:start="205:27" pos:end="205:36">qdict_next</name><argument_list pos:start="205:37" pos:end="205:66">(<argument pos:start="205:38" pos:end="205:58"><expr pos:start="205:38" pos:end="205:58"><name pos:start="205:38" pos:end="205:58"><name pos:start="205:38" pos:end="205:49">reopen_state</name><operator pos:start="205:50" pos:end="205:51">-&gt;</operator><name pos:start="205:52" pos:end="205:58">options</name></name></expr></argument>, <argument pos:start="205:61" pos:end="205:65"><expr pos:start="205:61" pos:end="205:65"><name pos:start="205:61" pos:end="205:65">entry</name></expr></argument>)</argument_list></call><operator pos:start="205:67" pos:end="205:67">)</operator></expr>)</condition>;</do>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="213:65"><expr pos:start="211:5" pos:end="213:64"><name pos:start="211:5" pos:end="211:7">ret</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <call pos:start="211:11" pos:end="213:64"><name pos:start="211:11" pos:end="211:25">bdrv_check_perm</name><argument_list pos:start="211:26" pos:end="213:64">(<argument pos:start="211:27" pos:end="211:42"><expr pos:start="211:27" pos:end="211:42"><name pos:start="211:27" pos:end="211:42"><name pos:start="211:27" pos:end="211:38">reopen_state</name><operator pos:start="211:39" pos:end="211:40">-&gt;</operator><name pos:start="211:41" pos:end="211:42">bs</name></name></expr></argument>, <argument pos:start="211:45" pos:end="211:49"><expr pos:start="211:45" pos:end="211:49"><name pos:start="211:45" pos:end="211:49">queue</name></expr></argument>, <argument pos:start="211:52" pos:end="211:69"><expr pos:start="211:52" pos:end="211:69"><name pos:start="211:52" pos:end="211:69"><name pos:start="211:52" pos:end="211:63">reopen_state</name><operator pos:start="211:64" pos:end="211:65">-&gt;</operator><name pos:start="211:66" pos:end="211:69">perm</name></name></expr></argument>,

                          <argument pos:start="213:27" pos:end="213:51"><expr pos:start="213:27" pos:end="213:51"><name pos:start="213:27" pos:end="213:51"><name pos:start="213:27" pos:end="213:38">reopen_state</name><operator pos:start="213:39" pos:end="213:40">-&gt;</operator><name pos:start="213:41" pos:end="213:51">shared_perm</name></name></expr></argument>, <argument pos:start="213:54" pos:end="213:57"><expr pos:start="213:54" pos:end="213:57"><name pos:start="213:54" pos:end="213:57">NULL</name></expr></argument>, <argument pos:start="213:60" pos:end="213:63"><expr pos:start="213:60" pos:end="213:63"><name pos:start="213:60" pos:end="213:63">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="215:5" pos:end="219:5"><if pos:start="215:5" pos:end="219:5">if <condition pos:start="215:8" pos:end="215:16">(<expr pos:start="215:9" pos:end="215:15"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">&lt;</operator> <literal type="number" pos:start="215:15" pos:end="215:15">0</literal></expr>)</condition> <block pos:start="215:18" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:19">

        <goto pos:start="217:9" pos:end="217:19">goto <name pos:start="217:14" pos:end="217:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:12"><expr pos:start="223:5" pos:end="223:11"><name pos:start="223:5" pos:end="223:7">ret</name> <operator pos:start="223:9" pos:end="223:9">=</operator> <literal type="number" pos:start="223:11" pos:end="223:11">0</literal></expr>;</expr_stmt>



<label pos:start="227:1" pos:end="227:6"><name pos:start="227:1" pos:end="227:5">error</name>:</label>

    <expr_stmt pos:start="229:5" pos:end="229:24"><expr pos:start="229:5" pos:end="229:23"><call pos:start="229:5" pos:end="229:23"><name pos:start="229:5" pos:end="229:17">qemu_opts_del</name><argument_list pos:start="229:18" pos:end="229:23">(<argument pos:start="229:19" pos:end="229:22"><expr pos:start="229:19" pos:end="229:22"><name pos:start="229:19" pos:end="229:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="231:5" pos:end="231:15">return <expr pos:start="231:12" pos:end="231:14"><name pos:start="231:12" pos:end="231:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
