<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25692.c" pos:tabs="8"><function pos:start="1:1" pos:end="104:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">dmg_open</name><parameter_list pos:start="1:20" pos:end="2:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,
                    <parameter pos:start="2:21" pos:end="2:32"><decl pos:start="2:21" pos:end="2:32"><type pos:start="2:21" pos:end="2:32"><name pos:start="2:21" pos:end="2:25">Error</name> <modifier pos:start="2:27" pos:end="2:27">*</modifier><modifier pos:start="2:28" pos:end="2:28">*</modifier></type><name pos:start="2:29" pos:end="2:32">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="104:15">{<block_content pos:start="4:5" pos:end="104:15">
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:16">BDRVDMGState</name> <modifier pos:start="4:18" pos:end="4:18">*</modifier></type><name pos:start="4:19" pos:end="4:19">s</name> <init pos:start="4:21" pos:end="4:32">= <expr pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:24">bs</name><operator pos:start="4:25" pos:end="4:26">-&gt;</operator><name pos:start="4:27" pos:end="4:32">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:67"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:23">info_begin</name></decl>, <decl pos:start="5:26" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:26" pos:end="5:33">info_end</name></decl>, <decl pos:start="5:36" pos:end="5:49"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:36" pos:end="5:49">last_in_offset</name></decl>, <decl pos:start="5:52" pos:end="5:66"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:52" pos:end="5:66">last_out_offset</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:24"><decl pos:start="6:5" pos:end="6:18"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">uint32_t</name></type> <name pos:start="6:14" pos:end="6:18">count</name></decl>, <decl pos:start="6:21" pos:end="6:23"><type ref="prev" pos:start="6:5" pos:end="6:12"/><name pos:start="6:21" pos:end="6:23">tmp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:67"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:32">max_compressed_size</name> <init pos:start="7:34" pos:end="7:36">= <expr pos:start="7:36" pos:end="7:36"><literal type="number" pos:start="7:36" pos:end="7:36">1</literal></expr></init></decl>, <decl pos:start="7:39" pos:end="7:63"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:39" pos:end="7:59">max_sectors_per_chunk</name> <init pos:start="7:61" pos:end="7:63">= <expr pos:start="7:63" pos:end="7:63"><literal type="number" pos:start="7:63" pos:end="7:63">1</literal></expr></init></decl>, <decl pos:start="7:66" pos:end="7:66"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:66" pos:end="7:66">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:19"><decl pos:start="8:5" pos:end="8:18"><type pos:start="8:5" pos:end="8:11"><name pos:start="8:5" pos:end="8:11">int64_t</name></type> <name pos:start="8:13" pos:end="8:18">offset</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:22"><expr pos:start="10:5" pos:end="10:21"><name pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:6">bs</name><operator pos:start="10:7" pos:end="10:8">-&gt;</operator><name pos:start="10:9" pos:end="10:17">read_only</name></name> <operator pos:start="10:19" pos:end="10:19">=</operator> <literal type="number" pos:start="10:21" pos:end="10:21">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:20"><expr pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:15">n_chunks</name></name> <operator pos:start="11:17" pos:end="11:17">=</operator> <literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:66"><expr pos:start="12:5" pos:end="12:65"><name pos:start="12:5" pos:end="12:14"><name pos:start="12:5" pos:end="12:5">s</name><operator pos:start="12:6" pos:end="12:7">-&gt;</operator><name pos:start="12:8" pos:end="12:14">offsets</name></name> <operator pos:start="12:16" pos:end="12:16">=</operator> <name pos:start="12:18" pos:end="12:27"><name pos:start="12:18" pos:end="12:18">s</name><operator pos:start="12:19" pos:end="12:20">-&gt;</operator><name pos:start="12:21" pos:end="12:27">lengths</name></name> <operator pos:start="12:29" pos:end="12:29">=</operator> <name pos:start="12:31" pos:end="12:40"><name pos:start="12:31" pos:end="12:31">s</name><operator pos:start="12:32" pos:end="12:33">-&gt;</operator><name pos:start="12:34" pos:end="12:40">sectors</name></name> <operator pos:start="12:42" pos:end="12:42">=</operator> <name pos:start="12:44" pos:end="12:58"><name pos:start="12:44" pos:end="12:44">s</name><operator pos:start="12:45" pos:end="12:46">-&gt;</operator><name pos:start="12:47" pos:end="12:58">sectorcounts</name></name> <operator pos:start="12:60" pos:end="12:60">=</operator> <name pos:start="12:62" pos:end="12:65">NULL</name></expr>;</expr_stmt>
    <comment type="block" pos:start="13:5" pos:end="13:36">/* read offset of info blocks */</comment>
    <expr_stmt pos:start="14:5" pos:end="14:38"><expr pos:start="14:5" pos:end="14:37"><name pos:start="14:5" pos:end="14:10">offset</name> <operator pos:start="14:12" pos:end="14:12">=</operator> <call pos:start="14:14" pos:end="14:37"><name pos:start="14:14" pos:end="14:27">bdrv_getlength</name><argument_list pos:start="14:28" pos:end="14:37">(<argument pos:start="14:29" pos:end="14:36"><expr pos:start="14:29" pos:end="14:36"><name pos:start="14:29" pos:end="14:36"><name pos:start="14:29" pos:end="14:30">bs</name><operator pos:start="14:31" pos:end="14:32">-&gt;</operator><name pos:start="14:33" pos:end="14:36">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="15:5" pos:end="104:15"><if pos:start="15:5" pos:end="104:15">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:14">offset</name> <operator pos:start="15:16" pos:end="15:16">&lt;</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>)</condition> <block pos:start="15:21" pos:end="104:15">{<block_content pos:start="16:9" pos:end="104:15">
        <expr_stmt pos:start="16:9" pos:end="16:21"><expr pos:start="16:9" pos:end="16:20"><name pos:start="16:9" pos:end="16:11">ret</name> <operator pos:start="16:13" pos:end="16:13">=</operator> <name pos:start="16:15" pos:end="16:20">offset</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:10">offset</name> <operator pos:start="17:12" pos:end="17:13">-=</operator> <literal type="number" pos:start="17:15" pos:end="17:19">0x1d8</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:47"><expr pos:start="18:5" pos:end="18:46"><name pos:start="18:5" pos:end="18:7">ret</name> <operator pos:start="18:9" pos:end="18:9">=</operator> <call pos:start="18:11" pos:end="18:46"><name pos:start="18:11" pos:end="18:21">read_uint64</name><argument_list pos:start="18:22" pos:end="18:46">(<argument pos:start="18:23" pos:end="18:24"><expr pos:start="18:23" pos:end="18:24"><name pos:start="18:23" pos:end="18:24">bs</name></expr></argument>, <argument pos:start="18:27" pos:end="18:32"><expr pos:start="18:27" pos:end="18:32"><name pos:start="18:27" pos:end="18:32">offset</name></expr></argument>, <argument pos:start="18:35" pos:end="18:45"><expr pos:start="18:35" pos:end="18:45"><operator pos:start="18:35" pos:end="18:35">&amp;</operator><name pos:start="18:36" pos:end="18:45">info_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="104:15"><if pos:start="19:5" pos:end="20:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>)</condition> <block pos:start="19:18" pos:end="20:5">{<block_content>
    </block_content>}</block></if> <if type="elseif" pos:start="20:7" pos:end="104:15">else if <condition pos:start="20:15" pos:end="20:31">(<expr pos:start="20:16" pos:end="20:30"><name pos:start="20:16" pos:end="20:25">info_begin</name> <operator pos:start="20:27" pos:end="20:28">==</operator> <literal type="number" pos:start="20:30" pos:end="20:30">0</literal></expr>)</condition> <block pos:start="20:33" pos:end="104:15">{<block_content pos:start="21:5" pos:end="104:15">
    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:43"><name pos:start="21:11" pos:end="21:21">read_uint32</name><argument_list pos:start="21:22" pos:end="21:43">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">bs</name></expr></argument>, <argument pos:start="21:27" pos:end="21:36"><expr pos:start="21:27" pos:end="21:36"><name pos:start="21:27" pos:end="21:36">info_begin</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><operator pos:start="21:39" pos:end="21:39">&amp;</operator><name pos:start="21:40" pos:end="21:42">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="104:15"><if pos:start="22:5" pos:end="23:5">if <condition pos:start="22:8" pos:end="22:16">(<expr pos:start="22:9" pos:end="22:15"><name pos:start="22:9" pos:end="22:11">ret</name> <operator pos:start="22:13" pos:end="22:13">&lt;</operator> <literal type="number" pos:start="22:15" pos:end="22:15">0</literal></expr>)</condition> <block pos:start="22:18" pos:end="23:5">{<block_content>
    </block_content>}</block></if> <if type="elseif" pos:start="23:7" pos:end="104:15">else if <condition pos:start="23:15" pos:end="23:28">(<expr pos:start="23:16" pos:end="23:27"><name pos:start="23:16" pos:end="23:18">tmp</name> <operator pos:start="23:20" pos:end="23:21">!=</operator> <literal type="number" pos:start="23:23" pos:end="23:27">0x100</literal></expr>)</condition> <block pos:start="23:30" pos:end="104:15">{<block_content pos:start="24:5" pos:end="104:15">
    <expr_stmt pos:start="24:5" pos:end="24:50"><expr pos:start="24:5" pos:end="24:49"><name pos:start="24:5" pos:end="24:7">ret</name> <operator pos:start="24:9" pos:end="24:9">=</operator> <call pos:start="24:11" pos:end="24:49"><name pos:start="24:11" pos:end="24:21">read_uint32</name><argument_list pos:start="24:22" pos:end="24:49">(<argument pos:start="24:23" pos:end="24:24"><expr pos:start="24:23" pos:end="24:24"><name pos:start="24:23" pos:end="24:24">bs</name></expr></argument>, <argument pos:start="24:27" pos:end="24:40"><expr pos:start="24:27" pos:end="24:40"><name pos:start="24:27" pos:end="24:36">info_begin</name> <operator pos:start="24:38" pos:end="24:38">+</operator> <literal type="number" pos:start="24:40" pos:end="24:40">4</literal></expr></argument>, <argument pos:start="24:43" pos:end="24:48"><expr pos:start="24:43" pos:end="24:48"><operator pos:start="24:43" pos:end="24:43">&amp;</operator><name pos:start="24:44" pos:end="24:48">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="25:5" pos:end="104:15"><if pos:start="25:5" pos:end="26:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="26:5">{<block_content>
    </block_content>}</block></if> <if type="elseif" pos:start="26:7" pos:end="104:15">else if <condition pos:start="26:15" pos:end="26:26">(<expr pos:start="26:16" pos:end="26:25"><name pos:start="26:16" pos:end="26:20">count</name> <operator pos:start="26:22" pos:end="26:23">==</operator> <literal type="number" pos:start="26:25" pos:end="26:25">0</literal></expr>)</condition> <block pos:start="26:28" pos:end="104:15">{<block_content pos:start="27:5" pos:end="104:15">
    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:12">info_end</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:25">info_begin</name> <operator pos:start="27:27" pos:end="27:27">+</operator> <name pos:start="27:29" pos:end="27:33">count</name></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:32"><expr pos:start="28:5" pos:end="28:31"><name pos:start="28:5" pos:end="28:10">offset</name> <operator pos:start="28:12" pos:end="28:12">=</operator> <name pos:start="28:14" pos:end="28:23">info_begin</name> <operator pos:start="28:25" pos:end="28:25">+</operator> <literal type="number" pos:start="28:27" pos:end="28:31">0x100</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="29:5" pos:end="29:22">/* read offsets */</comment>
    <expr_stmt pos:start="30:5" pos:end="30:41"><expr pos:start="30:5" pos:end="30:40"><name pos:start="30:5" pos:end="30:18">last_in_offset</name> <operator pos:start="30:20" pos:end="30:20">=</operator> <name pos:start="30:22" pos:end="30:36">last_out_offset</name> <operator pos:start="30:38" pos:end="30:38">=</operator> <literal type="number" pos:start="30:40" pos:end="30:40">0</literal></expr>;</expr_stmt>
    <while pos:start="31:5" pos:end="104:15">while <condition pos:start="31:11" pos:end="31:29">(<expr pos:start="31:12" pos:end="31:28"><name pos:start="31:12" pos:end="31:17">offset</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:28">info_end</name></expr>)</condition> <block pos:start="31:31" pos:end="104:15">{<block_content pos:start="32:9" pos:end="104:15">
        <decl_stmt pos:start="32:9" pos:end="32:22"><decl pos:start="32:9" pos:end="32:21"><type pos:start="32:9" pos:end="32:16"><name pos:start="32:9" pos:end="32:16">uint32_t</name></type> <name pos:start="32:18" pos:end="32:21">type</name></decl>;</decl_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:45"><name pos:start="33:15" pos:end="33:25">read_uint32</name><argument_list pos:start="33:26" pos:end="33:45">(<argument pos:start="33:27" pos:end="33:28"><expr pos:start="33:27" pos:end="33:28"><name pos:start="33:27" pos:end="33:28">bs</name></expr></argument>, <argument pos:start="33:31" pos:end="33:36"><expr pos:start="33:31" pos:end="33:36"><name pos:start="33:31" pos:end="33:36">offset</name></expr></argument>, <argument pos:start="33:39" pos:end="33:44"><expr pos:start="33:39" pos:end="33:44"><operator pos:start="33:39" pos:end="33:39">&amp;</operator><name pos:start="33:40" pos:end="33:44">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="34:9" pos:end="104:15"><if pos:start="34:9" pos:end="35:9">if <condition pos:start="34:12" pos:end="34:20">(<expr pos:start="34:13" pos:end="34:19"><name pos:start="34:13" pos:end="34:15">ret</name> <operator pos:start="34:17" pos:end="34:17">&lt;</operator> <literal type="number" pos:start="34:19" pos:end="34:19">0</literal></expr>)</condition> <block pos:start="34:22" pos:end="35:9">{<block_content>
        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="104:15">else if <condition pos:start="35:19" pos:end="35:30">(<expr pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:24">count</name> <operator pos:start="35:26" pos:end="35:27">==</operator> <literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr>)</condition> <block pos:start="35:32" pos:end="104:15">{<block_content pos:start="36:9" pos:end="104:15">
        <expr_stmt pos:start="36:9" pos:end="36:20"><expr pos:start="36:9" pos:end="36:19"><name pos:start="36:9" pos:end="36:14">offset</name> <operator pos:start="36:16" pos:end="36:17">+=</operator> <literal type="number" pos:start="36:19" pos:end="36:19">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:44"><name pos:start="37:15" pos:end="37:25">read_uint32</name><argument_list pos:start="37:26" pos:end="37:44">(<argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><name pos:start="37:27" pos:end="37:28">bs</name></expr></argument>, <argument pos:start="37:31" pos:end="37:36"><expr pos:start="37:31" pos:end="37:36"><name pos:start="37:31" pos:end="37:36">offset</name></expr></argument>, <argument pos:start="37:39" pos:end="37:43"><expr pos:start="37:39" pos:end="37:43"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:43">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="38:9" pos:end="104:15"><if pos:start="38:9" pos:end="104:15">if <condition pos:start="38:12" pos:end="38:20">(<expr pos:start="38:13" pos:end="38:19"><name pos:start="38:13" pos:end="38:15">ret</name> <operator pos:start="38:17" pos:end="38:17">&lt;</operator> <literal type="number" pos:start="38:19" pos:end="38:19">0</literal></expr>)</condition> <block pos:start="38:22" pos:end="104:15">{<block_content pos:start="39:9" pos:end="104:15">
        <if_stmt pos:start="39:9" pos:end="104:15"><if pos:start="39:9" pos:end="104:15">if <condition pos:start="39:12" pos:end="39:47">(<expr pos:start="39:13" pos:end="39:46"><name pos:start="39:13" pos:end="39:16">type</name> <operator pos:start="39:18" pos:end="39:19">==</operator> <literal type="number" pos:start="39:21" pos:end="39:30">0x6d697368</literal> <operator pos:start="39:32" pos:end="39:33">&amp;&amp;</operator> <name pos:start="39:35" pos:end="39:39">count</name> <operator pos:start="39:41" pos:end="39:42">&gt;=</operator> <literal type="number" pos:start="39:44" pos:end="39:46">244</literal></expr>)</condition> <block pos:start="39:49" pos:end="104:15">{<block_content pos:start="40:13" pos:end="104:15">
            <decl_stmt pos:start="40:13" pos:end="40:28"><decl pos:start="40:13" pos:end="40:27"><type pos:start="40:13" pos:end="40:18"><name pos:start="40:13" pos:end="40:18">size_t</name></type> <name pos:start="40:20" pos:end="40:27">new_size</name></decl>;</decl_stmt>
            <decl_stmt pos:start="41:13" pos:end="41:33"><decl pos:start="41:13" pos:end="41:32"><type pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:20">uint32_t</name></type> <name pos:start="41:22" pos:end="41:32">chunk_count</name></decl>;</decl_stmt>
            <expr_stmt pos:start="42:13" pos:end="42:24"><expr pos:start="42:13" pos:end="42:23"><name pos:start="42:13" pos:end="42:18">offset</name> <operator pos:start="42:20" pos:end="42:21">+=</operator> <literal type="number" pos:start="42:23" pos:end="42:23">4</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="43:13" pos:end="43:26"><expr pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:18">offset</name> <operator pos:start="43:20" pos:end="43:21">+=</operator> <literal type="number" pos:start="43:23" pos:end="43:25">200</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="44:13" pos:end="44:45"><expr pos:start="44:13" pos:end="44:44"><name pos:start="44:13" pos:end="44:23">chunk_count</name> <operator pos:start="44:25" pos:end="44:25">=</operator> <operator pos:start="44:27" pos:end="44:27">(</operator><name pos:start="44:28" pos:end="44:32">count</name> <operator pos:start="44:34" pos:end="44:34">-</operator> <literal type="number" pos:start="44:36" pos:end="44:38">204</literal><operator pos:start="44:39" pos:end="44:39">)</operator> <operator pos:start="44:41" pos:end="44:41">/</operator> <literal type="number" pos:start="44:43" pos:end="44:44">40</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="45:13" pos:end="45:70"><expr pos:start="45:13" pos:end="45:69"><name pos:start="45:13" pos:end="45:20">new_size</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <sizeof pos:start="45:24" pos:end="45:39">sizeof<argument_list pos:start="45:30" pos:end="45:39">(<argument pos:start="45:31" pos:end="45:38"><expr pos:start="45:31" pos:end="45:38"><name pos:start="45:31" pos:end="45:38">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:41" pos:end="45:41">*</operator> <operator pos:start="45:43" pos:end="45:43">(</operator><name pos:start="45:44" pos:end="45:54"><name pos:start="45:44" pos:end="45:44">s</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:54">n_chunks</name></name> <operator pos:start="45:56" pos:end="45:56">+</operator> <name pos:start="45:58" pos:end="45:68">chunk_count</name><operator pos:start="45:69" pos:end="45:69">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="46:13" pos:end="46:57"><expr pos:start="46:13" pos:end="46:56"><name pos:start="46:13" pos:end="46:20"><name pos:start="46:13" pos:end="46:13">s</name><operator pos:start="46:14" pos:end="46:15">-&gt;</operator><name pos:start="46:16" pos:end="46:20">types</name></name> <operator pos:start="46:22" pos:end="46:22">=</operator> <call pos:start="46:24" pos:end="46:56"><name pos:start="46:24" pos:end="46:32">g_realloc</name><argument_list pos:start="46:33" pos:end="46:56">(<argument pos:start="46:34" pos:end="46:41"><expr pos:start="46:34" pos:end="46:41"><name pos:start="46:34" pos:end="46:41"><name pos:start="46:34" pos:end="46:34">s</name><operator pos:start="46:35" pos:end="46:36">-&gt;</operator><name pos:start="46:37" pos:end="46:41">types</name></name></expr></argument>, <argument pos:start="46:44" pos:end="46:55"><expr pos:start="46:44" pos:end="46:55"><name pos:start="46:44" pos:end="46:51">new_size</name> <operator pos:start="46:53" pos:end="46:53">/</operator> <literal type="number" pos:start="46:55" pos:end="46:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="47:13" pos:end="47:57"><expr pos:start="47:13" pos:end="47:56"><name pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:22">offsets</name></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <call pos:start="47:26" pos:end="47:56"><name pos:start="47:26" pos:end="47:34">g_realloc</name><argument_list pos:start="47:35" pos:end="47:56">(<argument pos:start="47:36" pos:end="47:45"><expr pos:start="47:36" pos:end="47:45"><name pos:start="47:36" pos:end="47:45"><name pos:start="47:36" pos:end="47:36">s</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:45">offsets</name></name></expr></argument>, <argument pos:start="47:48" pos:end="47:55"><expr pos:start="47:48" pos:end="47:55"><name pos:start="47:48" pos:end="47:55">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="48:13" pos:end="48:57"><expr pos:start="48:13" pos:end="48:56"><name pos:start="48:13" pos:end="48:22"><name pos:start="48:13" pos:end="48:13">s</name><operator pos:start="48:14" pos:end="48:15">-&gt;</operator><name pos:start="48:16" pos:end="48:22">lengths</name></name> <operator pos:start="48:24" pos:end="48:24">=</operator> <call pos:start="48:26" pos:end="48:56"><name pos:start="48:26" pos:end="48:34">g_realloc</name><argument_list pos:start="48:35" pos:end="48:56">(<argument pos:start="48:36" pos:end="48:45"><expr pos:start="48:36" pos:end="48:45"><name pos:start="48:36" pos:end="48:45"><name pos:start="48:36" pos:end="48:36">s</name><operator pos:start="48:37" pos:end="48:38">-&gt;</operator><name pos:start="48:39" pos:end="48:45">lengths</name></name></expr></argument>, <argument pos:start="48:48" pos:end="48:55"><expr pos:start="48:48" pos:end="48:55"><name pos:start="48:48" pos:end="48:55">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="49:13" pos:end="49:57"><expr pos:start="49:13" pos:end="49:56"><name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:22">sectors</name></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <call pos:start="49:26" pos:end="49:56"><name pos:start="49:26" pos:end="49:34">g_realloc</name><argument_list pos:start="49:35" pos:end="49:56">(<argument pos:start="49:36" pos:end="49:45"><expr pos:start="49:36" pos:end="49:45"><name pos:start="49:36" pos:end="49:45"><name pos:start="49:36" pos:end="49:36">s</name><operator pos:start="49:37" pos:end="49:38">-&gt;</operator><name pos:start="49:39" pos:end="49:45">sectors</name></name></expr></argument>, <argument pos:start="49:48" pos:end="49:55"><expr pos:start="49:48" pos:end="49:55"><name pos:start="49:48" pos:end="49:55">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="50:13" pos:end="50:67"><expr pos:start="50:13" pos:end="50:66"><name pos:start="50:13" pos:end="50:27"><name pos:start="50:13" pos:end="50:13">s</name><operator pos:start="50:14" pos:end="50:15">-&gt;</operator><name pos:start="50:16" pos:end="50:27">sectorcounts</name></name> <operator pos:start="50:29" pos:end="50:29">=</operator> <call pos:start="50:31" pos:end="50:66"><name pos:start="50:31" pos:end="50:39">g_realloc</name><argument_list pos:start="50:40" pos:end="50:66">(<argument pos:start="50:41" pos:end="50:55"><expr pos:start="50:41" pos:end="50:55"><name pos:start="50:41" pos:end="50:55"><name pos:start="50:41" pos:end="50:41">s</name><operator pos:start="50:42" pos:end="50:43">-&gt;</operator><name pos:start="50:44" pos:end="50:55">sectorcounts</name></name></expr></argument>, <argument pos:start="50:58" pos:end="50:65"><expr pos:start="50:58" pos:end="50:65"><name pos:start="50:58" pos:end="50:65">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:start="51:13" pos:end="104:15">for <control pos:start="51:17" pos:end="51:69">(<init pos:start="51:18" pos:end="51:33"><expr pos:start="51:18" pos:end="51:32"><name pos:start="51:18" pos:end="51:18">i</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:32"><name pos:start="51:22" pos:end="51:22">s</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:32">n_chunks</name></name></expr>;</init> <condition pos:start="51:35" pos:end="51:64"><expr pos:start="51:35" pos:end="51:63"><name pos:start="51:35" pos:end="51:35">i</name> <operator pos:start="51:37" pos:end="51:37">&lt;</operator> <name pos:start="51:39" pos:end="51:49"><name pos:start="51:39" pos:end="51:39">s</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:49">n_chunks</name></name> <operator pos:start="51:51" pos:end="51:51">+</operator> <name pos:start="51:53" pos:end="51:63">chunk_count</name></expr>;</condition> <incr pos:start="51:66" pos:end="51:68"><expr pos:start="51:66" pos:end="51:68"><name pos:start="51:66" pos:end="51:66">i</name><operator pos:start="51:67" pos:end="51:68">++</operator></expr></incr>)</control> <block pos:start="51:71" pos:end="104:15">{<block_content pos:start="52:17" pos:end="104:15">
                <expr_stmt pos:start="52:17" pos:end="52:60"><expr pos:start="52:17" pos:end="52:59"><name pos:start="52:17" pos:end="52:19">ret</name> <operator pos:start="52:21" pos:end="52:21">=</operator> <call pos:start="52:23" pos:end="52:59"><name pos:start="52:23" pos:end="52:33">read_uint32</name><argument_list pos:start="52:34" pos:end="52:59">(<argument pos:start="52:35" pos:end="52:36"><expr pos:start="52:35" pos:end="52:36"><name pos:start="52:35" pos:end="52:36">bs</name></expr></argument>, <argument pos:start="52:39" pos:end="52:44"><expr pos:start="52:39" pos:end="52:44"><name pos:start="52:39" pos:end="52:44">offset</name></expr></argument>, <argument pos:start="52:47" pos:end="52:58"><expr pos:start="52:47" pos:end="52:58"><operator pos:start="52:47" pos:end="52:47">&amp;</operator><name pos:start="52:48" pos:end="52:58"><name pos:start="52:48" pos:end="52:48">s</name><operator pos:start="52:49" pos:end="52:50">-&gt;</operator><name pos:start="52:51" pos:end="52:55">types</name><index pos:start="52:56" pos:end="52:58">[<expr pos:start="52:57" pos:end="52:57"><name pos:start="52:57" pos:end="52:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="53:17" pos:end="104:15"><if pos:start="53:17" pos:end="104:15">if <condition pos:start="53:20" pos:end="53:28">(<expr pos:start="53:21" pos:end="53:27"><name pos:start="53:21" pos:end="53:23">ret</name> <operator pos:start="53:25" pos:end="53:25">&lt;</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>)</condition> <block pos:start="53:30" pos:end="104:15">{<block_content pos:start="54:17" pos:end="104:15">
                <expr_stmt pos:start="54:17" pos:end="54:28"><expr pos:start="54:17" pos:end="54:27"><name pos:start="54:17" pos:end="54:22">offset</name> <operator pos:start="54:24" pos:end="54:25">+=</operator> <literal type="number" pos:start="54:27" pos:end="54:27">4</literal></expr>;</expr_stmt>
                <if_stmt pos:start="55:17" pos:end="104:15"><if pos:start="55:17" pos:end="104:15">if <condition pos:start="55:20" pos:end="56:37">(<expr pos:start="55:21" pos:end="56:36"><name pos:start="55:21" pos:end="55:31"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:28">types</name><index pos:start="55:29" pos:end="55:31">[<expr pos:start="55:30" pos:end="55:30"><name pos:start="55:30" pos:end="55:30">i</name></expr>]</index></name> <operator pos:start="55:33" pos:end="55:34">!=</operator> <literal type="number" pos:start="55:36" pos:end="55:45">0x80000005</literal> <operator pos:start="55:47" pos:end="55:48">&amp;&amp;</operator> <name pos:start="55:50" pos:end="55:60"><name pos:start="55:50" pos:end="55:50">s</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:57">types</name><index pos:start="55:58" pos:end="55:60">[<expr pos:start="55:59" pos:end="55:59"><name pos:start="55:59" pos:end="55:59">i</name></expr>]</index></name> <operator pos:start="55:62" pos:end="55:63">!=</operator> <literal type="number" pos:start="55:65" pos:end="55:65">1</literal> <operator pos:start="55:67" pos:end="55:68">&amp;&amp;</operator>
                    <name pos:start="56:21" pos:end="56:31"><name pos:start="56:21" pos:end="56:21">s</name><operator pos:start="56:22" pos:end="56:23">-&gt;</operator><name pos:start="56:24" pos:end="56:28">types</name><index pos:start="56:29" pos:end="56:31">[<expr pos:start="56:30" pos:end="56:30"><name pos:start="56:30" pos:end="56:30">i</name></expr>]</index></name> <operator pos:start="56:33" pos:end="56:34">!=</operator> <literal type="number" pos:start="56:36" pos:end="56:36">2</literal></expr>)</condition> <block pos:start="56:39" pos:end="104:15">{<block_content pos:start="57:21" pos:end="104:15">
                    <if_stmt pos:start="57:21" pos:end="104:15"><if pos:start="57:21" pos:end="104:15">if <condition pos:start="57:24" pos:end="57:59">(<expr pos:start="57:25" pos:end="57:58"><name pos:start="57:25" pos:end="57:35"><name pos:start="57:25" pos:end="57:25">s</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:32">types</name><index pos:start="57:33" pos:end="57:35">[<expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">i</name></expr>]</index></name> <operator pos:start="57:37" pos:end="57:38">==</operator> <literal type="number" pos:start="57:40" pos:end="57:49">0xffffffff</literal> <operator pos:start="57:51" pos:end="57:52">&amp;&amp;</operator> <name pos:start="57:54" pos:end="57:54">i</name> <operator pos:start="57:56" pos:end="57:56">&gt;</operator> <literal type="number" pos:start="57:58" pos:end="57:58">0</literal></expr>)</condition> <block pos:start="57:61" pos:end="104:15">{<block_content pos:start="58:25" pos:end="104:15">
                        <expr_stmt pos:start="58:25" pos:end="58:79"><expr pos:start="58:25" pos:end="58:78"><name pos:start="58:25" pos:end="58:38">last_in_offset</name> <operator pos:start="58:40" pos:end="58:40">=</operator> <name pos:start="58:42" pos:end="58:58"><name pos:start="58:42" pos:end="58:42">s</name><operator pos:start="58:43" pos:end="58:44">-&gt;</operator><name pos:start="58:45" pos:end="58:51">offsets</name><index pos:start="58:52" pos:end="58:58">[<expr pos:start="58:53" pos:end="58:57"><name pos:start="58:53" pos:end="58:53">i</name> <operator pos:start="58:55" pos:end="58:55">-</operator> <literal type="number" pos:start="58:57" pos:end="58:57">1</literal></expr>]</index></name> <operator pos:start="58:60" pos:end="58:60">+</operator> <name pos:start="58:62" pos:end="58:78"><name pos:start="58:62" pos:end="58:62">s</name><operator pos:start="58:63" pos:end="58:64">-&gt;</operator><name pos:start="58:65" pos:end="58:71">lengths</name><index pos:start="58:72" pos:end="58:78">[<expr pos:start="58:73" pos:end="58:77"><name pos:start="58:73" pos:end="58:73">i</name> <operator pos:start="58:75" pos:end="58:75">-</operator> <literal type="number" pos:start="58:77" pos:end="58:77">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt pos:start="59:25" pos:end="60:65"><expr pos:start="59:25" pos:end="60:64"><name pos:start="59:25" pos:end="59:39">last_out_offset</name> <operator pos:start="59:41" pos:end="59:41">=</operator> <name pos:start="59:43" pos:end="59:59"><name pos:start="59:43" pos:end="59:43">s</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:52">sectors</name><index pos:start="59:53" pos:end="59:59">[<expr pos:start="59:54" pos:end="59:58"><name pos:start="59:54" pos:end="59:54">i</name> <operator pos:start="59:56" pos:end="59:56">-</operator> <literal type="number" pos:start="59:58" pos:end="59:58">1</literal></expr>]</index></name> <operator pos:start="59:61" pos:end="59:61">+</operator>
                                          <name pos:start="60:43" pos:end="60:64"><name pos:start="60:43" pos:end="60:43">s</name><operator pos:start="60:44" pos:end="60:45">-&gt;</operator><name pos:start="60:46" pos:end="60:57">sectorcounts</name><index pos:start="60:58" pos:end="60:64">[<expr pos:start="60:59" pos:end="60:63"><name pos:start="60:59" pos:end="60:59">i</name> <operator pos:start="60:61" pos:end="60:61">-</operator> <literal type="number" pos:start="60:63" pos:end="60:63">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="61:21" pos:end="61:34"><expr pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:31">chunk_count</name><operator pos:start="61:32" pos:end="61:33">--</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="62:21" pos:end="62:24"><expr pos:start="62:21" pos:end="62:23"><name pos:start="62:21" pos:end="62:21">i</name><operator pos:start="62:22" pos:end="62:23">--</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="63:21" pos:end="63:33"><expr pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:26">offset</name> <operator pos:start="63:28" pos:end="63:29">+=</operator> <literal type="number" pos:start="63:31" pos:end="63:32">36</literal></expr>;</expr_stmt>
                    <continue pos:start="64:21" pos:end="64:29">continue;</continue>
                <expr_stmt pos:start="65:17" pos:end="65:28"><expr pos:start="65:17" pos:end="65:27"><name pos:start="65:17" pos:end="65:22">offset</name> <operator pos:start="65:24" pos:end="65:25">+=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">4</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="66:17" pos:end="66:62"><expr pos:start="66:17" pos:end="66:61"><name pos:start="66:17" pos:end="66:19">ret</name> <operator pos:start="66:21" pos:end="66:21">=</operator> <call pos:start="66:23" pos:end="66:61"><name pos:start="66:23" pos:end="66:33">read_uint64</name><argument_list pos:start="66:34" pos:end="66:61">(<argument pos:start="66:35" pos:end="66:36"><expr pos:start="66:35" pos:end="66:36"><name pos:start="66:35" pos:end="66:36">bs</name></expr></argument>, <argument pos:start="66:39" pos:end="66:44"><expr pos:start="66:39" pos:end="66:44"><name pos:start="66:39" pos:end="66:44">offset</name></expr></argument>, <argument pos:start="66:47" pos:end="66:60"><expr pos:start="66:47" pos:end="66:60"><operator pos:start="66:47" pos:end="66:47">&amp;</operator><name pos:start="66:48" pos:end="66:60"><name pos:start="66:48" pos:end="66:48">s</name><operator pos:start="66:49" pos:end="66:50">-&gt;</operator><name pos:start="66:51" pos:end="66:57">sectors</name><index pos:start="66:58" pos:end="66:60">[<expr pos:start="66:59" pos:end="66:59"><name pos:start="66:59" pos:end="66:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="67:17" pos:end="104:15"><if pos:start="67:17" pos:end="104:15">if <condition pos:start="67:20" pos:end="67:28">(<expr pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:23">ret</name> <operator pos:start="67:25" pos:end="67:25">&lt;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>)</condition> <block pos:start="67:30" pos:end="104:15">{<block_content pos:start="68:17" pos:end="104:15">
                <expr_stmt pos:start="68:17" pos:end="68:49"><expr pos:start="68:17" pos:end="68:48"><name pos:start="68:17" pos:end="68:29"><name pos:start="68:17" pos:end="68:17">s</name><operator pos:start="68:18" pos:end="68:19">-&gt;</operator><name pos:start="68:20" pos:end="68:26">sectors</name><index pos:start="68:27" pos:end="68:29">[<expr pos:start="68:28" pos:end="68:28"><name pos:start="68:28" pos:end="68:28">i</name></expr>]</index></name> <operator pos:start="68:31" pos:end="68:32">+=</operator> <name pos:start="68:34" pos:end="68:48">last_out_offset</name></expr>;</expr_stmt>
                <expr_stmt pos:start="69:17" pos:end="69:28"><expr pos:start="69:17" pos:end="69:27"><name pos:start="69:17" pos:end="69:22">offset</name> <operator pos:start="69:24" pos:end="69:25">+=</operator> <literal type="number" pos:start="69:27" pos:end="69:27">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="70:17" pos:end="70:67"><expr pos:start="70:17" pos:end="70:66"><name pos:start="70:17" pos:end="70:19">ret</name> <operator pos:start="70:21" pos:end="70:21">=</operator> <call pos:start="70:23" pos:end="70:66"><name pos:start="70:23" pos:end="70:33">read_uint64</name><argument_list pos:start="70:34" pos:end="70:66">(<argument pos:start="70:35" pos:end="70:36"><expr pos:start="70:35" pos:end="70:36"><name pos:start="70:35" pos:end="70:36">bs</name></expr></argument>, <argument pos:start="70:39" pos:end="70:44"><expr pos:start="70:39" pos:end="70:44"><name pos:start="70:39" pos:end="70:44">offset</name></expr></argument>, <argument pos:start="70:47" pos:end="70:65"><expr pos:start="70:47" pos:end="70:65"><operator pos:start="70:47" pos:end="70:47">&amp;</operator><name pos:start="70:48" pos:end="70:65"><name pos:start="70:48" pos:end="70:48">s</name><operator pos:start="70:49" pos:end="70:50">-&gt;</operator><name pos:start="70:51" pos:end="70:62">sectorcounts</name><index pos:start="70:63" pos:end="70:65">[<expr pos:start="70:64" pos:end="70:64"><name pos:start="70:64" pos:end="70:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="71:17" pos:end="104:15"><if pos:start="71:17" pos:end="104:15">if <condition pos:start="71:20" pos:end="71:28">(<expr pos:start="71:21" pos:end="71:27"><name pos:start="71:21" pos:end="71:23">ret</name> <operator pos:start="71:25" pos:end="71:25">&lt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr>)</condition> <block pos:start="71:30" pos:end="104:15">{<block_content pos:start="72:17" pos:end="104:15">
                <expr_stmt pos:start="72:17" pos:end="72:28"><expr pos:start="72:17" pos:end="72:27"><name pos:start="72:17" pos:end="72:22">offset</name> <operator pos:start="72:24" pos:end="72:25">+=</operator> <literal type="number" pos:start="72:27" pos:end="72:27">8</literal></expr>;</expr_stmt>
                <if_stmt pos:start="73:17" pos:end="104:15"><if pos:start="73:17" pos:end="104:15">if <condition pos:start="73:20" pos:end="73:62">(<expr pos:start="73:21" pos:end="73:61"><name pos:start="73:21" pos:end="73:38"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:35">sectorcounts</name><index pos:start="73:36" pos:end="73:38">[<expr pos:start="73:37" pos:end="73:37"><name pos:start="73:37" pos:end="73:37">i</name></expr>]</index></name> <operator pos:start="73:40" pos:end="73:40">&gt;</operator> <name pos:start="73:42" pos:end="73:61">DMG_SECTORCOUNTS_MAX</name></expr>)</condition> <block pos:start="73:64" pos:end="104:15">{<block_content pos:start="74:21" pos:end="104:15">
                    <expr_stmt pos:start="74:21" pos:end="76:78"><expr pos:start="74:21" pos:end="76:77"><call pos:start="74:21" pos:end="76:77"><name pos:start="74:21" pos:end="74:32">error_report</name><argument_list pos:start="74:33" pos:end="76:77">(<argument pos:start="74:34" pos:end="75:55"><expr pos:start="74:34" pos:end="75:55"><literal type="string" pos:start="74:34" pos:end="74:49">"sector count %"</literal> <name pos:start="74:51" pos:end="74:56">PRIu64</name> <literal type="string" pos:start="74:58" pos:end="74:76">" for chunk %u is "</literal>
                                 <literal type="string" pos:start="75:34" pos:end="75:55">"larger than max (%u)"</literal></expr></argument>,
                                 <argument pos:start="76:34" pos:end="76:51"><expr pos:start="76:34" pos:end="76:51"><name pos:start="76:34" pos:end="76:51"><name pos:start="76:34" pos:end="76:34">s</name><operator pos:start="76:35" pos:end="76:36">-&gt;</operator><name pos:start="76:37" pos:end="76:48">sectorcounts</name><index pos:start="76:49" pos:end="76:51">[<expr pos:start="76:50" pos:end="76:50"><name pos:start="76:50" pos:end="76:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="76:54" pos:end="76:54"><expr pos:start="76:54" pos:end="76:54"><name pos:start="76:54" pos:end="76:54">i</name></expr></argument>, <argument pos:start="76:57" pos:end="76:76"><expr pos:start="76:57" pos:end="76:76"><name pos:start="76:57" pos:end="76:76">DMG_SECTORCOUNTS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="77:17" pos:end="77:62"><expr pos:start="77:17" pos:end="77:61"><name pos:start="77:17" pos:end="77:19">ret</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:61"><name pos:start="77:23" pos:end="77:33">read_uint64</name><argument_list pos:start="77:34" pos:end="77:61">(<argument pos:start="77:35" pos:end="77:36"><expr pos:start="77:35" pos:end="77:36"><name pos:start="77:35" pos:end="77:36">bs</name></expr></argument>, <argument pos:start="77:39" pos:end="77:44"><expr pos:start="77:39" pos:end="77:44"><name pos:start="77:39" pos:end="77:44">offset</name></expr></argument>, <argument pos:start="77:47" pos:end="77:60"><expr pos:start="77:47" pos:end="77:60"><operator pos:start="77:47" pos:end="77:47">&amp;</operator><name pos:start="77:48" pos:end="77:60"><name pos:start="77:48" pos:end="77:48">s</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:57">offsets</name><index pos:start="77:58" pos:end="77:60">[<expr pos:start="77:59" pos:end="77:59"><name pos:start="77:59" pos:end="77:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="78:17" pos:end="104:15"><if pos:start="78:17" pos:end="104:15">if <condition pos:start="78:20" pos:end="78:28">(<expr pos:start="78:21" pos:end="78:27"><name pos:start="78:21" pos:end="78:23">ret</name> <operator pos:start="78:25" pos:end="78:25">&lt;</operator> <literal type="number" pos:start="78:27" pos:end="78:27">0</literal></expr>)</condition> <block pos:start="78:30" pos:end="104:15">{<block_content pos:start="79:17" pos:end="104:15">
                <expr_stmt pos:start="79:17" pos:end="79:48"><expr pos:start="79:17" pos:end="79:47"><name pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:26">offsets</name><index pos:start="79:27" pos:end="79:29">[<expr pos:start="79:28" pos:end="79:28"><name pos:start="79:28" pos:end="79:28">i</name></expr>]</index></name> <operator pos:start="79:31" pos:end="79:32">+=</operator> <name pos:start="79:34" pos:end="79:47">last_in_offset</name></expr>;</expr_stmt>
                <expr_stmt pos:start="80:17" pos:end="80:28"><expr pos:start="80:17" pos:end="80:27"><name pos:start="80:17" pos:end="80:22">offset</name> <operator pos:start="80:24" pos:end="80:25">+=</operator> <literal type="number" pos:start="80:27" pos:end="80:27">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="81:17" pos:end="81:62"><expr pos:start="81:17" pos:end="81:61"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:61"><name pos:start="81:23" pos:end="81:33">read_uint64</name><argument_list pos:start="81:34" pos:end="81:61">(<argument pos:start="81:35" pos:end="81:36"><expr pos:start="81:35" pos:end="81:36"><name pos:start="81:35" pos:end="81:36">bs</name></expr></argument>, <argument pos:start="81:39" pos:end="81:44"><expr pos:start="81:39" pos:end="81:44"><name pos:start="81:39" pos:end="81:44">offset</name></expr></argument>, <argument pos:start="81:47" pos:end="81:60"><expr pos:start="81:47" pos:end="81:60"><operator pos:start="81:47" pos:end="81:47">&amp;</operator><name pos:start="81:48" pos:end="81:60"><name pos:start="81:48" pos:end="81:48">s</name><operator pos:start="81:49" pos:end="81:50">-&gt;</operator><name pos:start="81:51" pos:end="81:57">lengths</name><index pos:start="81:58" pos:end="81:60">[<expr pos:start="81:59" pos:end="81:59"><name pos:start="81:59" pos:end="81:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="82:17" pos:end="104:15"><if pos:start="82:17" pos:end="104:15">if <condition pos:start="82:20" pos:end="82:28">(<expr pos:start="82:21" pos:end="82:27"><name pos:start="82:21" pos:end="82:23">ret</name> <operator pos:start="82:25" pos:end="82:25">&lt;</operator> <literal type="number" pos:start="82:27" pos:end="82:27">0</literal></expr>)</condition> <block pos:start="82:30" pos:end="104:15">{<block_content pos:start="83:17" pos:end="104:15">
                <expr_stmt pos:start="83:17" pos:end="83:28"><expr pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:22">offset</name> <operator pos:start="83:24" pos:end="83:25">+=</operator> <literal type="number" pos:start="83:27" pos:end="83:27">8</literal></expr>;</expr_stmt>
                <if_stmt pos:start="84:17" pos:end="104:15"><if pos:start="84:17" pos:end="104:15">if <condition pos:start="84:20" pos:end="84:56">(<expr pos:start="84:21" pos:end="84:55"><name pos:start="84:21" pos:end="84:33"><name pos:start="84:21" pos:end="84:21">s</name><operator pos:start="84:22" pos:end="84:23">-&gt;</operator><name pos:start="84:24" pos:end="84:30">lengths</name><index pos:start="84:31" pos:end="84:33">[<expr pos:start="84:32" pos:end="84:32"><name pos:start="84:32" pos:end="84:32">i</name></expr>]</index></name> <operator pos:start="84:35" pos:end="84:35">&gt;</operator> <name pos:start="84:37" pos:end="84:55">max_compressed_size</name></expr>)</condition> <block pos:start="84:58" pos:end="104:15">{<block_content pos:start="85:21" pos:end="104:15">
                    <expr_stmt pos:start="85:21" pos:end="85:56"><expr pos:start="85:21" pos:end="85:55"><name pos:start="85:21" pos:end="85:39">max_compressed_size</name> <operator pos:start="85:41" pos:end="85:41">=</operator> <name pos:start="85:43" pos:end="85:55"><name pos:start="85:43" pos:end="85:43">s</name><operator pos:start="85:44" pos:end="85:45">-&gt;</operator><name pos:start="85:46" pos:end="85:52">lengths</name><index pos:start="85:53" pos:end="85:55">[<expr pos:start="85:54" pos:end="85:54"><name pos:start="85:54" pos:end="85:54">i</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt pos:start="86:17" pos:end="104:15"><if pos:start="86:17" pos:end="104:15">if <condition pos:start="86:20" pos:end="86:63">(<expr pos:start="86:21" pos:end="86:62"><name pos:start="86:21" pos:end="86:38"><name pos:start="86:21" pos:end="86:21">s</name><operator pos:start="86:22" pos:end="86:23">-&gt;</operator><name pos:start="86:24" pos:end="86:35">sectorcounts</name><index pos:start="86:36" pos:end="86:38">[<expr pos:start="86:37" pos:end="86:37"><name pos:start="86:37" pos:end="86:37">i</name></expr>]</index></name> <operator pos:start="86:40" pos:end="86:40">&gt;</operator> <name pos:start="86:42" pos:end="86:62">max_sectors_per_chunk</name></expr>)</condition> <block pos:start="86:65" pos:end="104:15">{<block_content pos:start="87:21" pos:end="104:15">
                    <expr_stmt pos:start="87:21" pos:end="87:63"><expr pos:start="87:21" pos:end="87:62"><name pos:start="87:21" pos:end="87:41">max_sectors_per_chunk</name> <operator pos:start="87:43" pos:end="87:43">=</operator> <name pos:start="87:45" pos:end="87:62"><name pos:start="87:45" pos:end="87:45">s</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:59">sectorcounts</name><index pos:start="87:60" pos:end="87:62">[<expr pos:start="87:61" pos:end="87:61"><name pos:start="87:61" pos:end="87:61">i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="88:13" pos:end="88:39"><expr pos:start="88:13" pos:end="88:38"><name pos:start="88:13" pos:end="88:23"><name pos:start="88:13" pos:end="88:13">s</name><operator pos:start="88:14" pos:end="88:15">-&gt;</operator><name pos:start="88:16" pos:end="88:23">n_chunks</name></name> <operator pos:start="88:25" pos:end="88:26">+=</operator> <name pos:start="88:28" pos:end="88:38">chunk_count</name></expr>;</expr_stmt>
    <comment type="block" pos:start="89:5" pos:end="89:32">/* initialize zlib engine */</comment>
    <expr_stmt pos:start="90:5" pos:end="90:60"><expr pos:start="90:5" pos:end="90:59"><name pos:start="90:5" pos:end="90:23"><name pos:start="90:5" pos:end="90:5">s</name><operator pos:start="90:6" pos:end="90:7">-&gt;</operator><name pos:start="90:8" pos:end="90:23">compressed_chunk</name></name> <operator pos:start="90:25" pos:end="90:25">=</operator> <call pos:start="90:27" pos:end="90:59"><name pos:start="90:27" pos:end="90:34">g_malloc</name><argument_list pos:start="90:35" pos:end="90:59">(<argument pos:start="90:36" pos:end="90:58"><expr pos:start="90:36" pos:end="90:58"><name pos:start="90:36" pos:end="90:54">max_compressed_size</name> <operator pos:start="90:56" pos:end="90:56">+</operator> <literal type="number" pos:start="90:58" pos:end="90:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:66"><expr pos:start="91:5" pos:end="91:65"><name pos:start="91:5" pos:end="91:25"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:25">uncompressed_chunk</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <call pos:start="91:29" pos:end="91:65"><name pos:start="91:29" pos:end="91:36">g_malloc</name><argument_list pos:start="91:37" pos:end="91:65">(<argument pos:start="91:38" pos:end="91:64"><expr pos:start="91:38" pos:end="91:64"><literal type="number" pos:start="91:38" pos:end="91:40">512</literal> <operator pos:start="91:42" pos:end="91:42">*</operator> <name pos:start="91:44" pos:end="91:64">max_sectors_per_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="92:5" pos:end="104:15"><if pos:start="92:5" pos:end="104:15">if <condition pos:start="92:8" pos:end="92:41">(<expr pos:start="92:9" pos:end="92:40"><call pos:start="92:9" pos:end="92:32"><name pos:start="92:9" pos:end="92:19">inflateInit</name><argument_list pos:start="92:20" pos:end="92:32">(<argument pos:start="92:21" pos:end="92:31"><expr pos:start="92:21" pos:end="92:31"><operator pos:start="92:21" pos:end="92:21">&amp;</operator><name pos:start="92:22" pos:end="92:31"><name pos:start="92:22" pos:end="92:22">s</name><operator pos:start="92:23" pos:end="92:24">-&gt;</operator><name pos:start="92:25" pos:end="92:31">zstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="92:34" pos:end="92:35">!=</operator> <name pos:start="92:37" pos:end="92:40">Z_OK</name></expr>)</condition> <block pos:start="92:43" pos:end="104:15">{<block_content pos:start="93:5" pos:end="104:15">
    <expr_stmt pos:start="93:5" pos:end="93:35"><expr pos:start="93:5" pos:end="93:34"><name pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:20">current_chunk</name></name> <operator pos:start="93:22" pos:end="93:22">=</operator> <name pos:start="93:24" pos:end="93:34"><name pos:start="93:24" pos:end="93:24">s</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:34">n_chunks</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:33"><expr pos:start="94:5" pos:end="94:32"><call pos:start="94:5" pos:end="94:32"><name pos:start="94:5" pos:end="94:22">qemu_co_mutex_init</name><argument_list pos:start="94:23" pos:end="94:32">(<argument pos:start="94:24" pos:end="94:31"><expr pos:start="94:24" pos:end="94:31"><operator pos:start="94:24" pos:end="94:24">&amp;</operator><name pos:start="94:25" pos:end="94:31"><name pos:start="94:25" pos:end="94:25">s</name><operator pos:start="94:26" pos:end="94:27">-&gt;</operator><name pos:start="94:28" pos:end="94:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>
<label pos:start="96:1" pos:end="96:5"><name pos:start="96:1" pos:end="96:4">fail</name>:</label>
    <expr_stmt pos:start="97:5" pos:end="97:21"><expr pos:start="97:5" pos:end="97:20"><call pos:start="97:5" pos:end="97:20"><name pos:start="97:5" pos:end="97:10">g_free</name><argument_list pos:start="97:11" pos:end="97:20">(<argument pos:start="97:12" pos:end="97:19"><expr pos:start="97:12" pos:end="97:19"><name pos:start="97:12" pos:end="97:19"><name pos:start="97:12" pos:end="97:12">s</name><operator pos:start="97:13" pos:end="97:14">-&gt;</operator><name pos:start="97:15" pos:end="97:19">types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:23"><expr pos:start="98:5" pos:end="98:22"><call pos:start="98:5" pos:end="98:22"><name pos:start="98:5" pos:end="98:10">g_free</name><argument_list pos:start="98:11" pos:end="98:22">(<argument pos:start="98:12" pos:end="98:21"><expr pos:start="98:12" pos:end="98:21"><name pos:start="98:12" pos:end="98:21"><name pos:start="98:12" pos:end="98:12">s</name><operator pos:start="98:13" pos:end="98:14">-&gt;</operator><name pos:start="98:15" pos:end="98:21">offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="99:5" pos:end="99:23"><expr pos:start="99:5" pos:end="99:22"><call pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:10">g_free</name><argument_list pos:start="99:11" pos:end="99:22">(<argument pos:start="99:12" pos:end="99:21"><expr pos:start="99:12" pos:end="99:21"><name pos:start="99:12" pos:end="99:21"><name pos:start="99:12" pos:end="99:12">s</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:21">lengths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:23"><expr pos:start="100:5" pos:end="100:22"><call pos:start="100:5" pos:end="100:22"><name pos:start="100:5" pos:end="100:10">g_free</name><argument_list pos:start="100:11" pos:end="100:22">(<argument pos:start="100:12" pos:end="100:21"><expr pos:start="100:12" pos:end="100:21"><name pos:start="100:12" pos:end="100:21"><name pos:start="100:12" pos:end="100:12">s</name><operator pos:start="100:13" pos:end="100:14">-&gt;</operator><name pos:start="100:15" pos:end="100:21">sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="101:5" pos:end="101:28"><expr pos:start="101:5" pos:end="101:27"><call pos:start="101:5" pos:end="101:27"><name pos:start="101:5" pos:end="101:10">g_free</name><argument_list pos:start="101:11" pos:end="101:27">(<argument pos:start="101:12" pos:end="101:26"><expr pos:start="101:12" pos:end="101:26"><name pos:start="101:12" pos:end="101:26"><name pos:start="101:12" pos:end="101:12">s</name><operator pos:start="101:13" pos:end="101:14">-&gt;</operator><name pos:start="101:15" pos:end="101:26">sectorcounts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="102:5" pos:end="102:32"><expr pos:start="102:5" pos:end="102:31"><call pos:start="102:5" pos:end="102:31"><name pos:start="102:5" pos:end="102:10">g_free</name><argument_list pos:start="102:11" pos:end="102:31">(<argument pos:start="102:12" pos:end="102:30"><expr pos:start="102:12" pos:end="102:30"><name pos:start="102:12" pos:end="102:30"><name pos:start="102:12" pos:end="102:12">s</name><operator pos:start="102:13" pos:end="102:14">-&gt;</operator><name pos:start="102:15" pos:end="102:30">compressed_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:34"><expr pos:start="103:5" pos:end="103:33"><call pos:start="103:5" pos:end="103:33"><name pos:start="103:5" pos:end="103:10">g_free</name><argument_list pos:start="103:11" pos:end="103:33">(<argument pos:start="103:12" pos:end="103:32"><expr pos:start="103:12" pos:end="103:32"><name pos:start="103:12" pos:end="103:32"><name pos:start="103:12" pos:end="103:12">s</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:32">uncompressed_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="104:5" pos:end="104:15">return <expr pos:start="104:12" pos:end="104:14"><name pos:start="104:12" pos:end="104:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
