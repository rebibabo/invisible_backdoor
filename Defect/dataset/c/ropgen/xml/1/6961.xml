<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6961.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mmap_read_frame</name><parameter_list pos:start="1:27" pos:end="1:63">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">ctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">AVPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:21">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:21">video_data</name></name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:41">= <expr pos:start="5:28" pos:end="5:41"><name pos:start="5:28" pos:end="5:41"><name pos:start="5:28" pos:end="5:30">ctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="13:6"><decl pos:start="7:5" pos:end="13:5"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">v4l2_buffer</name></name></type> <name pos:start="7:24" pos:end="7:26">buf</name> <init pos:start="7:28" pos:end="13:5">= <expr pos:start="7:30" pos:end="13:5"><block pos:start="7:30" pos:end="13:5">{

        <expr pos:start="9:9" pos:end="9:45"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:13">type</name>   <operator pos:start="9:17" pos:end="9:17">=</operator> <name pos:start="9:19" pos:end="9:45">V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,

        <expr pos:start="11:9" pos:end="11:34"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:15">memory</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:34">V4L2_MEMORY_MMAP</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:18"><expr pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:7">pkt</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:13">size</name></name> <operator pos:start="19:15" pos:end="19:15">=</operator> <literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:84">/* FIXME: Some special treatment might be needed in case of loss of signal... */</comment>

    <while pos:start="25:5" pos:end="25:82">while <condition pos:start="25:11" pos:end="25:81">(<expr pos:start="25:12" pos:end="25:80"><operator pos:start="25:12" pos:end="25:12">(</operator><name pos:start="25:13" pos:end="25:15">res</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:55"><name pos:start="25:19" pos:end="25:28">v4l2_ioctl</name><argument_list pos:start="25:29" pos:end="25:55">(<argument pos:start="25:30" pos:end="25:34"><expr pos:start="25:30" pos:end="25:34"><name pos:start="25:30" pos:end="25:34"><name pos:start="25:30" pos:end="25:30">s</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:34">fd</name></name></expr></argument>, <argument pos:start="25:37" pos:end="25:48"><expr pos:start="25:37" pos:end="25:48"><name pos:start="25:37" pos:end="25:48">VIDIOC_DQBUF</name></expr></argument>, <argument pos:start="25:51" pos:end="25:54"><expr pos:start="25:51" pos:end="25:54"><operator pos:start="25:51" pos:end="25:51">&amp;</operator><name pos:start="25:52" pos:end="25:54">buf</name></expr></argument>)</argument_list></call><operator pos:start="25:56" pos:end="25:56">)</operator> <operator pos:start="25:58" pos:end="25:58">&lt;</operator> <literal type="number" pos:start="25:60" pos:end="25:60">0</literal> <operator pos:start="25:62" pos:end="25:63">&amp;&amp;</operator> <operator pos:start="25:65" pos:end="25:65">(</operator><name pos:start="25:66" pos:end="25:70">errno</name> <operator pos:start="25:72" pos:end="25:73">==</operator> <name pos:start="25:75" pos:end="25:79">EINTR</name><operator pos:start="25:80" pos:end="25:80">)</operator></expr>)</condition><block type="pseudo" pos:start="25:82" pos:end="25:82"><block_content pos:start="25:82" pos:end="25:82"><empty_stmt pos:start="25:82" pos:end="25:82">;</empty_stmt></block_content></block></while>

    <if_stmt pos:start="27:5" pos:end="43:5"><if pos:start="27:5" pos:end="43:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">res</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:19">

        <if_stmt pos:start="29:9" pos:end="31:35"><if pos:start="29:9" pos:end="31:35">if <condition pos:start="29:12" pos:end="29:28">(<expr pos:start="29:13" pos:end="29:27"><name pos:start="29:13" pos:end="29:17">errno</name> <operator pos:start="29:19" pos:end="29:20">==</operator> <name pos:start="29:22" pos:end="29:27">EAGAIN</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:35"><block_content pos:start="31:13" pos:end="31:35">

            <return pos:start="31:13" pos:end="31:35">return <expr pos:start="31:20" pos:end="31:34"><call pos:start="31:20" pos:end="31:34"><name pos:start="31:20" pos:end="31:26">AVERROR</name><argument_list pos:start="31:27" pos:end="31:34">(<argument pos:start="31:28" pos:end="31:33"><expr pos:start="31:28" pos:end="31:33"><name pos:start="31:28" pos:end="31:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:29"><expr pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:11">res</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:28"><name pos:start="35:15" pos:end="35:21">AVERROR</name><argument_list pos:start="35:22" pos:end="35:28">(<argument pos:start="35:23" pos:end="35:27"><expr pos:start="35:23" pos:end="35:27"><name pos:start="35:23" pos:end="35:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:32"><expr pos:start="37:9" pos:end="39:31"><call pos:start="37:9" pos:end="39:31"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="39:31">(<argument pos:start="37:16" pos:end="37:18"><expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ctx</name></expr></argument>, <argument pos:start="37:21" pos:end="37:32"><expr pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:35" pos:end="37:61"><expr pos:start="37:35" pos:end="37:61"><literal type="string" pos:start="37:35" pos:end="37:61">"ioctl(VIDIOC_DQBUF): %s\n"</literal></expr></argument>,

               <argument pos:start="39:16" pos:end="39:30"><expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:25">av_err2str</name><argument_list pos:start="39:26" pos:end="39:30">(<argument pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:29">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:32">(<expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:11">buf</name><operator pos:start="47:12" pos:end="47:12">.</operator><name pos:start="47:13" pos:end="47:17">index</name></name> <operator pos:start="47:19" pos:end="47:20">&gt;=</operator> <name pos:start="47:22" pos:end="47:31"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:31">buffers</name></name></expr>)</condition> <block pos:start="47:34" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:31">

        <expr_stmt pos:start="49:9" pos:end="49:70"><expr pos:start="49:9" pos:end="49:69"><call pos:start="49:9" pos:end="49:69"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:69">(<argument pos:start="49:16" pos:end="49:18"><expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">ctx</name></expr></argument>, <argument pos:start="49:21" pos:end="49:32"><expr pos:start="49:21" pos:end="49:32"><name pos:start="49:21" pos:end="49:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:35" pos:end="49:68"><expr pos:start="49:35" pos:end="49:68"><literal type="string" pos:start="49:35" pos:end="49:68">"Invalid buffer index received.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:31">return <expr pos:start="51:16" pos:end="51:30"><call pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:22">AVERROR</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:29"><expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><call pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:20">atomic_fetch_add</name><argument_list pos:start="55:21" pos:end="55:44">(<argument pos:start="55:22" pos:end="55:39"><expr pos:start="55:22" pos:end="55:39"><operator pos:start="55:22" pos:end="55:22">&amp;</operator><name pos:start="55:23" pos:end="55:39"><name pos:start="55:23" pos:end="55:23">s</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:39">buffers_queued</name></name></expr></argument>, <argument pos:start="55:42" pos:end="55:43"><expr pos:start="55:42" pos:end="55:43"><operator pos:start="55:42" pos:end="55:42">-</operator><literal type="number" pos:start="55:43" pos:end="55:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="57:5" pos:end="57:45">// always keep at least one buffer queued</comment>

    <expr_stmt pos:start="59:5" pos:end="64:0"><expr pos:start="59:5" pos:end="59:52"><call pos:start="59:5" pos:end="59:52"><name pos:start="59:5" pos:end="59:14">av_assert0</name><argument_list pos:start="59:15" pos:end="59:52">(<argument pos:start="59:16" pos:end="59:51"><expr pos:start="59:16" pos:end="59:51"><call pos:start="59:16" pos:end="59:46"><name pos:start="59:16" pos:end="59:26">atomic_load</name><argument_list pos:start="59:27" pos:end="59:46">(<argument pos:start="59:28" pos:end="59:45"><expr pos:start="59:28" pos:end="59:45"><operator pos:start="59:28" pos:end="59:28">&amp;</operator><name pos:start="59:29" pos:end="59:45"><name pos:start="59:29" pos:end="59:29">s</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:45">buffers_queued</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:48" pos:end="59:49">&gt;=</operator> <literal type="number" pos:start="59:51" pos:end="59:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="63:1" pos:end="63:26">#<cpp:directive pos:start="63:2" pos:end="63:6">ifdef</cpp:directive> <name pos:start="63:8" pos:end="63:26">V4L2_BUF_FLAG_ERROR</name></cpp:ifdef>

    <if_stmt pos:start="65:5" pos:end="105:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:40">(<expr pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:11">buf</name><operator pos:start="65:12" pos:end="65:12">.</operator><name pos:start="65:13" pos:end="65:17">flags</name></name> <operator pos:start="65:19" pos:end="65:19">&amp;</operator> <name pos:start="65:21" pos:end="65:39">V4L2_BUF_FLAG_ERROR</name></expr>)</condition> <block pos:start="65:42" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:26">

        <expr_stmt pos:start="67:9" pos:end="71:30"><expr pos:start="67:9" pos:end="71:29"><call pos:start="67:9" pos:end="71:29"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="71:29">(<argument pos:start="67:16" pos:end="67:18"><expr pos:start="67:16" pos:end="67:18"><name pos:start="67:16" pos:end="67:18">ctx</name></expr></argument>, <argument pos:start="67:21" pos:end="67:34"><expr pos:start="67:21" pos:end="67:34"><name pos:start="67:21" pos:end="67:34">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="69:16" pos:end="69:75"><expr pos:start="69:16" pos:end="69:75"><literal type="string" pos:start="69:16" pos:end="69:75">"Dequeued v4l2 buffer contains corrupted data (%d bytes).\n"</literal></expr></argument>,

               <argument pos:start="71:16" pos:end="71:28"><expr pos:start="71:16" pos:end="71:28"><name pos:start="71:16" pos:end="71:28"><name pos:start="71:16" pos:end="71:18">buf</name><operator pos:start="71:19" pos:end="71:19">.</operator><name pos:start="71:20" pos:end="71:28">bytesused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:11">buf</name><operator pos:start="73:12" pos:end="73:12">.</operator><name pos:start="73:13" pos:end="73:21">bytesused</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="105:5">else

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

    <block pos:start="79:5" pos:end="105:5">{<block_content pos:start="85:9" pos:end="103:9">

        <comment type="block" pos:start="81:9" pos:end="83:73">/* CPIA is a compressed format and we don't know the exact number of bytes

         * used by a frame, so set it here as the driver announces it. */</comment>

        <if_stmt pos:start="85:9" pos:end="87:42"><if pos:start="85:9" pos:end="87:42">if <condition pos:start="85:12" pos:end="85:52">(<expr pos:start="85:13" pos:end="85:51"><name pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:15">ctx</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:31">video_codec_id</name></name> <operator pos:start="85:33" pos:end="85:34">==</operator> <name pos:start="85:36" pos:end="85:51">AV_CODEC_ID_CPIA</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:42"><block_content pos:start="87:13" pos:end="87:42">

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:25">frame_size</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <name pos:start="87:29" pos:end="87:41"><name pos:start="87:29" pos:end="87:31">buf</name><operator pos:start="87:32" pos:end="87:32">.</operator><name pos:start="87:33" pos:end="87:41">bytesused</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="91:9" pos:end="103:9"><if pos:start="91:9" pos:end="103:9">if <condition pos:start="91:12" pos:end="91:64">(<expr pos:start="91:13" pos:end="91:63"><name pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:25">frame_size</name></name> <operator pos:start="91:27" pos:end="91:27">&gt;</operator> <literal type="number" pos:start="91:29" pos:end="91:29">0</literal> <operator pos:start="91:31" pos:end="91:32">&amp;&amp;</operator> <name pos:start="91:34" pos:end="91:46"><name pos:start="91:34" pos:end="91:36">buf</name><operator pos:start="91:37" pos:end="91:37">.</operator><name pos:start="91:38" pos:end="91:46">bytesused</name></name> <operator pos:start="91:48" pos:end="91:49">!=</operator> <name pos:start="91:51" pos:end="91:63"><name pos:start="91:51" pos:end="91:51">s</name><operator pos:start="91:52" pos:end="91:53">-&gt;</operator><name pos:start="91:54" pos:end="91:63">frame_size</name></name></expr>)</condition> <block pos:start="91:66" pos:end="103:9">{<block_content pos:start="93:13" pos:end="101:39">

            <expr_stmt pos:start="93:13" pos:end="97:60"><expr pos:start="93:13" pos:end="97:59"><call pos:start="93:13" pos:end="97:59"><name pos:start="93:13" pos:end="93:18">av_log</name><argument_list pos:start="93:19" pos:end="97:59">(<argument pos:start="93:20" pos:end="93:22"><expr pos:start="93:20" pos:end="93:22"><name pos:start="93:20" pos:end="93:22">ctx</name></expr></argument>, <argument pos:start="93:25" pos:end="93:36"><expr pos:start="93:25" pos:end="93:36"><name pos:start="93:25" pos:end="93:36">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="95:20" pos:end="95:99"><expr pos:start="95:20" pos:end="95:99"><literal type="string" pos:start="95:20" pos:end="95:99">"Dequeued v4l2 buffer contains %d bytes, but %d were expected. Flags: 0x%08X.\n"</literal></expr></argument>,

                   <argument pos:start="97:20" pos:end="97:32"><expr pos:start="97:20" pos:end="97:32"><name pos:start="97:20" pos:end="97:32"><name pos:start="97:20" pos:end="97:22">buf</name><operator pos:start="97:23" pos:end="97:23">.</operator><name pos:start="97:24" pos:end="97:32">bytesused</name></name></expr></argument>, <argument pos:start="97:35" pos:end="97:47"><expr pos:start="97:35" pos:end="97:47"><name pos:start="97:35" pos:end="97:47"><name pos:start="97:35" pos:end="97:35">s</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:47">frame_size</name></name></expr></argument>, <argument pos:start="97:50" pos:end="97:58"><expr pos:start="97:50" pos:end="97:58"><name pos:start="97:50" pos:end="97:58"><name pos:start="97:50" pos:end="97:52">buf</name><operator pos:start="97:53" pos:end="97:53">.</operator><name pos:start="97:54" pos:end="97:58">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:36"><expr pos:start="99:13" pos:end="99:35"><call pos:start="99:13" pos:end="99:35"><name pos:start="99:13" pos:end="99:26">enqueue_buffer</name><argument_list pos:start="99:27" pos:end="99:35">(<argument pos:start="99:28" pos:end="99:28"><expr pos:start="99:28" pos:end="99:28"><name pos:start="99:28" pos:end="99:28">s</name></expr></argument>, <argument pos:start="99:31" pos:end="99:34"><expr pos:start="99:31" pos:end="99:34"><operator pos:start="99:31" pos:end="99:31">&amp;</operator><name pos:start="99:32" pos:end="99:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:39">return <expr pos:start="101:20" pos:end="101:38"><name pos:start="101:20" pos:end="101:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:46">/* Image is at s-&gt;buff_start[buf.index] */</comment>

    <if_stmt pos:start="111:5" pos:end="195:5"><if pos:start="111:5" pos:end="141:5">if <condition pos:start="111:8" pos:end="111:68">(<expr pos:start="111:9" pos:end="111:67"><call pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:19">atomic_load</name><argument_list pos:start="111:20" pos:end="111:39">(<argument pos:start="111:21" pos:end="111:38"><expr pos:start="111:21" pos:end="111:38"><operator pos:start="111:21" pos:end="111:21">&amp;</operator><name pos:start="111:22" pos:end="111:38"><name pos:start="111:22" pos:end="111:22">s</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:38">buffers_queued</name></name></expr></argument>)</argument_list></call> <operator pos:start="111:41" pos:end="111:42">==</operator> <call pos:start="111:44" pos:end="111:67"><name pos:start="111:44" pos:end="111:48">FFMAX</name><argument_list pos:start="111:49" pos:end="111:67">(<argument pos:start="111:50" pos:end="111:63"><expr pos:start="111:50" pos:end="111:63"><name pos:start="111:50" pos:end="111:59"><name pos:start="111:50" pos:end="111:50">s</name><operator pos:start="111:51" pos:end="111:52">-&gt;</operator><name pos:start="111:53" pos:end="111:59">buffers</name></name> <operator pos:start="111:61" pos:end="111:61">/</operator> <literal type="number" pos:start="111:63" pos:end="111:63">8</literal></expr></argument>, <argument pos:start="111:66" pos:end="111:66"><expr pos:start="111:66" pos:end="111:66"><literal type="number" pos:start="111:66" pos:end="111:66">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:70" pos:end="141:5">{<block_content pos:start="115:9" pos:end="139:9">

        <comment type="block" pos:start="113:9" pos:end="113:84">/* when we start getting low on queued buffers, fall back on copying data */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:48"><expr pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:11">res</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:47"><name pos:start="115:15" pos:end="115:27">av_new_packet</name><argument_list pos:start="115:28" pos:end="115:47">(<argument pos:start="115:29" pos:end="115:31"><expr pos:start="115:29" pos:end="115:31"><name pos:start="115:29" pos:end="115:31">pkt</name></expr></argument>, <argument pos:start="115:34" pos:end="115:46"><expr pos:start="115:34" pos:end="115:46"><name pos:start="115:34" pos:end="115:46"><name pos:start="115:34" pos:end="115:36">buf</name><operator pos:start="115:37" pos:end="115:37">.</operator><name pos:start="115:38" pos:end="115:46">bytesused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:20">(<expr pos:start="117:13" pos:end="117:19"><name pos:start="117:13" pos:end="117:15">res</name> <operator pos:start="117:17" pos:end="117:17">&lt;</operator> <literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr>)</condition> <block pos:start="117:22" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:23">

            <expr_stmt pos:start="119:13" pos:end="119:70"><expr pos:start="119:13" pos:end="119:69"><call pos:start="119:13" pos:end="119:69"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="119:69">(<argument pos:start="119:20" pos:end="119:22"><expr pos:start="119:20" pos:end="119:22"><name pos:start="119:20" pos:end="119:22">ctx</name></expr></argument>, <argument pos:start="119:25" pos:end="119:36"><expr pos:start="119:25" pos:end="119:36"><name pos:start="119:25" pos:end="119:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:39" pos:end="119:68"><expr pos:start="119:39" pos:end="119:68"><literal type="string" pos:start="119:39" pos:end="119:68">"Error allocating a packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:36"><expr pos:start="121:13" pos:end="121:35"><call pos:start="121:13" pos:end="121:35"><name pos:start="121:13" pos:end="121:26">enqueue_buffer</name><argument_list pos:start="121:27" pos:end="121:35">(<argument pos:start="121:28" pos:end="121:28"><expr pos:start="121:28" pos:end="121:28"><name pos:start="121:28" pos:end="121:28">s</name></expr></argument>, <argument pos:start="121:31" pos:end="121:34"><expr pos:start="121:31" pos:end="121:34"><operator pos:start="121:31" pos:end="121:31">&amp;</operator><name pos:start="121:32" pos:end="121:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:23">return <expr pos:start="123:20" pos:end="123:22"><name pos:start="123:20" pos:end="123:22">res</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:66"><expr pos:start="127:9" pos:end="127:65"><call pos:start="127:9" pos:end="127:65"><name pos:start="127:9" pos:end="127:14">memcpy</name><argument_list pos:start="127:15" pos:end="127:65">(<argument pos:start="127:16" pos:end="127:24"><expr pos:start="127:16" pos:end="127:24"><name pos:start="127:16" pos:end="127:24"><name pos:start="127:16" pos:end="127:18">pkt</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:24">data</name></name></expr></argument>, <argument pos:start="127:27" pos:end="127:49"><expr pos:start="127:27" pos:end="127:49"><name pos:start="127:27" pos:end="127:49"><name pos:start="127:27" pos:end="127:27">s</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:38">buf_start</name><index pos:start="127:39" pos:end="127:49">[<expr pos:start="127:40" pos:end="127:48"><name pos:start="127:40" pos:end="127:48"><name pos:start="127:40" pos:end="127:42">buf</name><operator pos:start="127:43" pos:end="127:43">.</operator><name pos:start="127:44" pos:end="127:48">index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="127:52" pos:end="127:64"><expr pos:start="127:52" pos:end="127:64"><name pos:start="127:52" pos:end="127:64"><name pos:start="127:52" pos:end="127:54">buf</name><operator pos:start="127:55" pos:end="127:55">.</operator><name pos:start="127:56" pos:end="127:64">bytesused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:38"><expr pos:start="131:9" pos:end="131:37"><name pos:start="131:9" pos:end="131:11">res</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="131:37"><name pos:start="131:15" pos:end="131:28">enqueue_buffer</name><argument_list pos:start="131:29" pos:end="131:37">(<argument pos:start="131:30" pos:end="131:30"><expr pos:start="131:30" pos:end="131:30"><name pos:start="131:30" pos:end="131:30">s</name></expr></argument>, <argument pos:start="131:33" pos:end="131:36"><expr pos:start="131:33" pos:end="131:36"><operator pos:start="131:33" pos:end="131:33">&amp;</operator><name pos:start="131:34" pos:end="131:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="139:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:16">(<expr pos:start="133:13" pos:end="133:15"><name pos:start="133:13" pos:end="133:15">res</name></expr>)</condition> <block pos:start="133:18" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:23">

            <expr_stmt pos:start="135:13" pos:end="135:33"><expr pos:start="135:13" pos:end="135:32"><call pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:27">av_packet_unref</name><argument_list pos:start="135:28" pos:end="135:32">(<argument pos:start="135:29" pos:end="135:31"><expr pos:start="135:29" pos:end="135:31"><name pos:start="135:29" pos:end="135:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="137:13" pos:end="137:23">return <expr pos:start="137:20" pos:end="137:22"><name pos:start="137:20" pos:end="137:22">res</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="195:5">else <block pos:start="141:12" pos:end="195:5">{<block_content pos:start="143:9" pos:end="193:9">

        <decl_stmt pos:start="143:9" pos:end="143:41"><decl pos:start="143:9" pos:end="143:40"><type pos:start="143:9" pos:end="143:26"><name pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:14">struct</name> <name pos:start="143:16" pos:end="143:24">buff_data</name></name> <modifier pos:start="143:26" pos:end="143:26">*</modifier></type><name pos:start="143:27" pos:end="143:40">buf_descriptor</name></decl>;</decl_stmt>



        <expr_stmt pos:start="147:9" pos:end="147:48"><expr pos:start="147:9" pos:end="147:47"><name pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:11">pkt</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:17">data</name></name>     <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:47"><name pos:start="147:25" pos:end="147:25">s</name><operator pos:start="147:26" pos:end="147:27">-&gt;</operator><name pos:start="147:28" pos:end="147:36">buf_start</name><index pos:start="147:37" pos:end="147:47">[<expr pos:start="147:38" pos:end="147:46"><name pos:start="147:38" pos:end="147:46"><name pos:start="147:38" pos:end="147:40">buf</name><operator pos:start="147:41" pos:end="147:41">.</operator><name pos:start="147:42" pos:end="147:46">index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:38"><expr pos:start="149:9" pos:end="149:37"><name pos:start="149:9" pos:end="149:17"><name pos:start="149:9" pos:end="149:11">pkt</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:17">size</name></name>     <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:37"><name pos:start="149:25" pos:end="149:27">buf</name><operator pos:start="149:28" pos:end="149:28">.</operator><name pos:start="149:29" pos:end="149:37">bytesused</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:61"><expr pos:start="153:9" pos:end="153:60"><name pos:start="153:9" pos:end="153:22">buf_descriptor</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <call pos:start="153:26" pos:end="153:60"><name pos:start="153:26" pos:end="153:34">av_malloc</name><argument_list pos:start="153:35" pos:end="153:60">(<argument pos:start="153:36" pos:end="153:59"><expr pos:start="153:36" pos:end="153:59"><sizeof pos:start="153:36" pos:end="153:59">sizeof<argument_list pos:start="153:42" pos:end="153:59">(<argument pos:start="153:43" pos:end="153:58"><expr pos:start="153:43" pos:end="153:58">struct <name pos:start="153:50" pos:end="153:58">buff_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="171:9"><if pos:start="155:9" pos:end="171:9">if <condition pos:start="155:12" pos:end="155:28">(<expr pos:start="155:13" pos:end="155:27"><operator pos:start="155:13" pos:end="155:13">!</operator><name pos:start="155:14" pos:end="155:27">buf_descriptor</name></expr>)</condition> <block pos:start="155:30" pos:end="171:9">{<block_content pos:start="163:13" pos:end="169:35">

            <comment type="block" pos:start="157:13" pos:end="161:15">/* Something went wrong... Since av_malloc() failed, we cannot even

             * allocate a buffer for memcpying into it

             */</comment>

            <expr_stmt pos:start="163:13" pos:end="163:82"><expr pos:start="163:13" pos:end="163:81"><call pos:start="163:13" pos:end="163:81"><name pos:start="163:13" pos:end="163:18">av_log</name><argument_list pos:start="163:19" pos:end="163:81">(<argument pos:start="163:20" pos:end="163:22"><expr pos:start="163:20" pos:end="163:22"><name pos:start="163:20" pos:end="163:22">ctx</name></expr></argument>, <argument pos:start="163:25" pos:end="163:36"><expr pos:start="163:25" pos:end="163:36"><name pos:start="163:25" pos:end="163:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:39" pos:end="163:80"><expr pos:start="163:39" pos:end="163:80"><literal type="string" pos:start="163:39" pos:end="163:80">"Failed to allocate a buffer descriptor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:36"><expr pos:start="165:13" pos:end="165:35"><call pos:start="165:13" pos:end="165:35"><name pos:start="165:13" pos:end="165:26">enqueue_buffer</name><argument_list pos:start="165:27" pos:end="165:35">(<argument pos:start="165:28" pos:end="165:28"><expr pos:start="165:28" pos:end="165:28"><name pos:start="165:28" pos:end="165:28">s</name></expr></argument>, <argument pos:start="165:31" pos:end="165:34"><expr pos:start="165:31" pos:end="165:34"><operator pos:start="165:31" pos:end="165:31">&amp;</operator><name pos:start="165:32" pos:end="165:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="169:13" pos:end="169:35">return <expr pos:start="169:20" pos:end="169:34"><call pos:start="169:20" pos:end="169:34"><name pos:start="169:20" pos:end="169:26">AVERROR</name><argument_list pos:start="169:27" pos:end="169:34">(<argument pos:start="169:28" pos:end="169:33"><expr pos:start="169:28" pos:end="169:33"><name pos:start="169:28" pos:end="169:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:42"><expr pos:start="173:9" pos:end="173:41"><name pos:start="173:9" pos:end="173:29"><name pos:start="173:9" pos:end="173:22">buf_descriptor</name><operator pos:start="173:23" pos:end="173:24">-&gt;</operator><name pos:start="173:25" pos:end="173:29">index</name></name> <operator pos:start="173:31" pos:end="173:31">=</operator> <name pos:start="173:33" pos:end="173:41"><name pos:start="173:33" pos:end="173:35">buf</name><operator pos:start="173:36" pos:end="173:36">.</operator><name pos:start="173:37" pos:end="173:41">index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:25"><name pos:start="175:9" pos:end="175:22">buf_descriptor</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:25">s</name></name>     <operator pos:start="175:31" pos:end="175:31">=</operator> <name pos:start="175:33" pos:end="175:33">s</name></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="181:55"><expr pos:start="179:9" pos:end="181:54"><name pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:11">pkt</name><operator pos:start="179:12" pos:end="179:13">-&gt;</operator><name pos:start="179:14" pos:end="179:16">buf</name></name> <operator pos:start="179:18" pos:end="179:18">=</operator> <call pos:start="179:20" pos:end="181:54"><name pos:start="179:20" pos:end="179:35">av_buffer_create</name><argument_list pos:start="179:36" pos:end="181:54">(<argument pos:start="179:37" pos:end="179:45"><expr pos:start="179:37" pos:end="179:45"><name pos:start="179:37" pos:end="179:45"><name pos:start="179:37" pos:end="179:39">pkt</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:45">data</name></name></expr></argument>, <argument pos:start="179:48" pos:end="179:56"><expr pos:start="179:48" pos:end="179:56"><name pos:start="179:48" pos:end="179:56"><name pos:start="179:48" pos:end="179:50">pkt</name><operator pos:start="179:51" pos:end="179:52">-&gt;</operator><name pos:start="179:53" pos:end="179:56">size</name></name></expr></argument>, <argument pos:start="179:59" pos:end="179:77"><expr pos:start="179:59" pos:end="179:77"><name pos:start="179:59" pos:end="179:77">mmap_release_buffer</name></expr></argument>,

                                    <argument pos:start="181:37" pos:end="181:50"><expr pos:start="181:37" pos:end="181:50"><name pos:start="181:37" pos:end="181:50">buf_descriptor</name></expr></argument>, <argument pos:start="181:53" pos:end="181:53"><expr pos:start="181:53" pos:end="181:53"><literal type="number" pos:start="181:53" pos:end="181:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="193:9"><if pos:start="183:9" pos:end="193:9">if <condition pos:start="183:12" pos:end="183:22">(<expr pos:start="183:13" pos:end="183:21"><operator pos:start="183:13" pos:end="183:13">!</operator><name pos:start="183:14" pos:end="183:21"><name pos:start="183:14" pos:end="183:16">pkt</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:21">buf</name></name></expr>)</condition> <block pos:start="183:24" pos:end="193:9">{<block_content pos:start="185:13" pos:end="191:35">

            <expr_stmt pos:start="185:13" pos:end="185:69"><expr pos:start="185:13" pos:end="185:68"><call pos:start="185:13" pos:end="185:68"><name pos:start="185:13" pos:end="185:18">av_log</name><argument_list pos:start="185:19" pos:end="185:68">(<argument pos:start="185:20" pos:end="185:22"><expr pos:start="185:20" pos:end="185:22"><name pos:start="185:20" pos:end="185:22">ctx</name></expr></argument>, <argument pos:start="185:25" pos:end="185:36"><expr pos:start="185:25" pos:end="185:36"><name pos:start="185:25" pos:end="185:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:39" pos:end="185:67"><expr pos:start="185:39" pos:end="185:67"><literal type="string" pos:start="185:39" pos:end="185:67">"Failed to create a buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:36"><expr pos:start="187:13" pos:end="187:35"><call pos:start="187:13" pos:end="187:35"><name pos:start="187:13" pos:end="187:26">enqueue_buffer</name><argument_list pos:start="187:27" pos:end="187:35">(<argument pos:start="187:28" pos:end="187:28"><expr pos:start="187:28" pos:end="187:28"><name pos:start="187:28" pos:end="187:28">s</name></expr></argument>, <argument pos:start="187:31" pos:end="187:34"><expr pos:start="187:31" pos:end="187:34"><operator pos:start="187:31" pos:end="187:31">&amp;</operator><name pos:start="187:32" pos:end="187:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:38"><expr pos:start="189:13" pos:end="189:37"><call pos:start="189:13" pos:end="189:37"><name pos:start="189:13" pos:end="189:20">av_freep</name><argument_list pos:start="189:21" pos:end="189:37">(<argument pos:start="189:22" pos:end="189:36"><expr pos:start="189:22" pos:end="189:36"><operator pos:start="189:22" pos:end="189:22">&amp;</operator><name pos:start="189:23" pos:end="189:36">buf_descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="191:13" pos:end="191:35">return <expr pos:start="191:20" pos:end="191:34"><call pos:start="191:20" pos:end="191:34"><name pos:start="191:20" pos:end="191:26">AVERROR</name><argument_list pos:start="191:27" pos:end="191:34">(<argument pos:start="191:28" pos:end="191:33"><expr pos:start="191:28" pos:end="191:33"><name pos:start="191:28" pos:end="191:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:79"><expr pos:start="197:5" pos:end="197:78"><name pos:start="197:5" pos:end="197:12"><name pos:start="197:5" pos:end="197:7">pkt</name><operator pos:start="197:8" pos:end="197:9">-&gt;</operator><name pos:start="197:10" pos:end="197:12">pts</name></name> <operator pos:start="197:14" pos:end="197:14">=</operator> <name pos:start="197:16" pos:end="197:35"><name pos:start="197:16" pos:end="197:18">buf</name><operator pos:start="197:19" pos:end="197:19">.</operator><name pos:start="197:20" pos:end="197:28">timestamp</name><operator pos:start="197:29" pos:end="197:29">.</operator><name pos:start="197:30" pos:end="197:35">tv_sec</name></name> <operator pos:start="197:37" pos:end="197:37">*</operator> <call pos:start="197:39" pos:end="197:54"><name pos:start="197:39" pos:end="197:45">INT64_C</name><argument_list pos:start="197:46" pos:end="197:54">(<argument pos:start="197:47" pos:end="197:53"><expr pos:start="197:47" pos:end="197:53"><literal type="number" pos:start="197:47" pos:end="197:53">1000000</literal></expr></argument>)</argument_list></call> <operator pos:start="197:56" pos:end="197:56">+</operator> <name pos:start="197:58" pos:end="197:78"><name pos:start="197:58" pos:end="197:60">buf</name><operator pos:start="197:61" pos:end="197:61">.</operator><name pos:start="197:62" pos:end="197:70">timestamp</name><operator pos:start="197:71" pos:end="197:71">.</operator><name pos:start="197:72" pos:end="197:78">tv_usec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:38"><expr pos:start="199:5" pos:end="199:37"><call pos:start="199:5" pos:end="199:37"><name pos:start="199:5" pos:end="199:21">convert_timestamp</name><argument_list pos:start="199:22" pos:end="199:37">(<argument pos:start="199:23" pos:end="199:25"><expr pos:start="199:23" pos:end="199:25"><name pos:start="199:23" pos:end="199:25">ctx</name></expr></argument>, <argument pos:start="199:28" pos:end="199:36"><expr pos:start="199:28" pos:end="199:36"><operator pos:start="199:28" pos:end="199:28">&amp;</operator><name pos:start="199:29" pos:end="199:36"><name pos:start="199:29" pos:end="199:31">pkt</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:36">pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="203:5" pos:end="203:21">return <expr pos:start="203:12" pos:end="203:20"><name pos:start="203:12" pos:end="203:20"><name pos:start="203:12" pos:end="203:14">pkt</name><operator pos:start="203:15" pos:end="203:16">-&gt;</operator><name pos:start="203:17" pos:end="203:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
