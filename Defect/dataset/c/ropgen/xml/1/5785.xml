<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5785.c" pos:tabs="8"><function pos:start="1:1" pos:end="160:20"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_frame_mp3on4</name><parameter_list pos:start="1:31" pos:end="3:67">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:58">void</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:49"><decl pos:start="3:32" pos:end="3:49"><type pos:start="3:32" pos:end="3:49"><name pos:start="3:32" pos:end="3:34">int</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:49">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:66"><decl pos:start="3:52" pos:end="3:66"><type pos:start="3:52" pos:end="3:66"><name pos:start="3:52" pos:end="3:59">AVPacket</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:66">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="160:20">{<block_content pos:start="7:5" pos:end="160:20">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name>     <init pos:start="7:28" pos:end="7:40">= <expr pos:start="7:30" pos:end="7:40"><name pos:start="7:30" pos:end="7:40"><name pos:start="7:30" pos:end="7:34">avpkt</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:40">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>           <init pos:start="9:28" pos:end="9:40">= <expr pos:start="9:30" pos:end="9:40"><name pos:start="9:30" pos:end="9:40"><name pos:start="9:30" pos:end="9:34">avpkt</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:40">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">MP3On4DecodeContext</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:26">s</name> <init pos:start="11:28" pos:end="11:45">= <expr pos:start="11:30" pos:end="11:45"><name pos:start="11:30" pos:end="11:45"><name pos:start="11:30" pos:end="11:34">avctx</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">MPADecodeContext</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:23">m</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">fsize</name></decl>, <decl pos:start="15:16" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:16" pos:end="15:18">len</name> <init pos:start="15:20" pos:end="15:29">= <expr pos:start="15:22" pos:end="15:29"><name pos:start="15:22" pos:end="15:29">buf_size</name></expr></init></decl>, <decl pos:start="15:32" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:32" pos:end="15:39">out_size</name> <init pos:start="15:41" pos:end="15:43">= <expr pos:start="15:43" pos:end="15:43"><literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">OUT_INT</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:24">out_samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">OUT_INT</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:19">outptr</name></decl>, <decl pos:start="21:22" pos:end="21:24"><type ref="prev" pos:start="21:5" pos:end="21:13"><modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:24">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:10"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:10">fr</name></decl>, <decl pos:start="23:13" pos:end="23:13"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:13" pos:end="23:13">j</name></decl>, <decl pos:start="23:16" pos:end="23:16"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:16" pos:end="23:16">n</name></decl>, <decl pos:start="23:19" pos:end="23:20"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:19" pos:end="23:20">ch</name></decl>, <decl pos:start="23:23" pos:end="23:25"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:23" pos:end="23:25">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:27">/* get output buffer */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:12">frame</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:24">nb_samples</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <name pos:start="29:28" pos:end="29:41">MPA_FRAME_SIZE</name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="160:20"><if pos:start="31:5" pos:end="160:20">if <condition pos:start="31:8" pos:end="31:55">(<expr pos:start="31:9" pos:end="31:54"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:12">ret</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:49"><name pos:start="31:16" pos:end="31:32"><name pos:start="31:16" pos:end="31:20">avctx</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:32">get_buffer</name></name><argument_list pos:start="31:33" pos:end="31:49">(<argument pos:start="31:34" pos:end="31:38"><expr pos:start="31:34" pos:end="31:38"><name pos:start="31:34" pos:end="31:38">avctx</name></expr></argument>, <argument pos:start="31:41" pos:end="31:48"><expr pos:start="31:41" pos:end="31:48"><name pos:start="31:41" pos:end="31:48"><name pos:start="31:41" pos:end="31:41">s</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:48">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="31:50" pos:end="31:50">)</operator> <operator pos:start="31:52" pos:end="31:52">&lt;</operator> <literal type="number" pos:start="31:54" pos:end="31:54">0</literal></expr>)</condition> <block pos:start="31:57" pos:end="160:20">{<block_content pos:start="33:9" pos:end="160:20">

        <expr_stmt pos:start="33:9" pos:end="33:61"><expr pos:start="33:9" pos:end="33:60"><call pos:start="33:9" pos:end="33:60"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:60">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:37" pos:end="33:59"><expr pos:start="33:37" pos:end="33:59"><literal type="string" pos:start="33:37" pos:end="33:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:19">return <expr pos:start="35:16" pos:end="35:18"><name pos:start="35:16" pos:end="35:18">ret</name></expr>;</return>


    <expr_stmt pos:start="38:5" pos:end="38:47"><expr pos:start="38:5" pos:end="38:46"><name pos:start="38:5" pos:end="38:15">out_samples</name> <operator pos:start="38:17" pos:end="38:17">=</operator> <operator pos:start="38:19" pos:end="38:19">(</operator><name pos:start="38:20" pos:end="38:26">OUT_INT</name> <operator pos:start="38:28" pos:end="38:28">*</operator><operator pos:start="38:29" pos:end="38:29">)</operator><name pos:start="38:30" pos:end="38:46"><name pos:start="38:30" pos:end="38:30">s</name><operator pos:start="38:31" pos:end="38:32">-&gt;</operator><name pos:start="38:33" pos:end="38:37">frame</name><operator pos:start="38:38" pos:end="38:39">-&gt;</operator><name pos:start="38:40" pos:end="38:43">data</name><index pos:start="38:44" pos:end="38:46">[<expr pos:start="38:45" pos:end="38:45"><literal type="number" pos:start="38:45" pos:end="38:45">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="line" pos:start="42:5" pos:end="42:31">// Discard too short frames</comment>

    <if_stmt pos:start="44:5" pos:end="51:59"><if pos:start="44:5" pos:end="51:59">if <condition pos:start="44:8" pos:end="44:31">(<expr pos:start="44:9" pos:end="44:30"><name pos:start="44:9" pos:end="44:16">buf_size</name> <operator pos:start="44:18" pos:end="44:18">&lt;</operator> <name pos:start="44:20" pos:end="44:30">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="51:5" pos:end="51:59"><block_content pos:start="51:5" pos:end="51:59">




    <comment type="line" pos:start="49:5" pos:end="49:51">// If only one decoder interleave is not needed</comment>

    <expr_stmt pos:start="51:5" pos:end="51:59"><expr pos:start="51:5" pos:end="51:58"><name pos:start="51:5" pos:end="51:10">outptr</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <ternary pos:start="51:14" pos:end="51:58"><condition pos:start="51:14" pos:end="51:29"><expr pos:start="51:14" pos:end="51:27"><name pos:start="51:14" pos:end="51:22"><name pos:start="51:14" pos:end="51:14">s</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:22">frames</name></name> <operator pos:start="51:24" pos:end="51:25">==</operator> <literal type="number" pos:start="51:27" pos:end="51:27">1</literal></expr> ?</condition><then pos:start="51:31" pos:end="51:41"> <expr pos:start="51:31" pos:end="51:41"><name pos:start="51:31" pos:end="51:41">out_samples</name></expr> </then><else pos:start="51:43" pos:end="51:58">: <expr pos:start="51:45" pos:end="51:58"><name pos:start="51:45" pos:end="51:58"><name pos:start="51:45" pos:end="51:45">s</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:58">decoded_buf</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:24"><expr pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:9">avctx</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">bit_rate</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:11"><expr pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:6">ch</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <literal type="number" pos:start="59:10" pos:end="59:10">0</literal></expr>;</expr_stmt>

    <for pos:start="61:5" pos:end="160:20">for <control pos:start="61:9" pos:end="61:38">(<init pos:start="61:10" pos:end="61:16"><expr pos:start="61:10" pos:end="61:15"><name pos:start="61:10" pos:end="61:11">fr</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>;</init> <condition pos:start="61:18" pos:end="61:32"><expr pos:start="61:18" pos:end="61:31"><name pos:start="61:18" pos:end="61:19">fr</name> <operator pos:start="61:21" pos:end="61:21">&lt;</operator> <name pos:start="61:23" pos:end="61:31"><name pos:start="61:23" pos:end="61:23">s</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:31">frames</name></name></expr>;</condition> <incr pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:35">fr</name><operator pos:start="61:36" pos:end="61:37">++</operator></expr></incr>)</control> <block pos:start="61:40" pos:end="160:20">{<block_content pos:start="63:9" pos:end="160:20">

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:13">fsize</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:28"><name pos:start="63:17" pos:end="63:23">AV_RB16</name><argument_list pos:start="63:24" pos:end="63:28">(<argument pos:start="63:25" pos:end="63:27"><expr pos:start="63:25" pos:end="63:27"><name pos:start="63:25" pos:end="63:27">buf</name></expr></argument>)</argument_list></call> <operator pos:start="63:30" pos:end="63:31">&gt;&gt;</operator> <literal type="number" pos:start="63:33" pos:end="63:33">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:13">fsize</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:60"><name pos:start="65:17" pos:end="65:22">FFMIN3</name><argument_list pos:start="65:23" pos:end="65:60">(<argument pos:start="65:24" pos:end="65:28"><expr pos:start="65:24" pos:end="65:28"><name pos:start="65:24" pos:end="65:28">fsize</name></expr></argument>, <argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">len</name></expr></argument>, <argument pos:start="65:36" pos:end="65:59"><expr pos:start="65:36" pos:end="65:59"><name pos:start="65:36" pos:end="65:59">MPA_MAX_CODED_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:9">m</name>     <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:28">mp3decctx</name><index pos:start="67:29" pos:end="67:32">[<expr pos:start="67:30" pos:end="67:31"><name pos:start="67:30" pos:end="67:31">fr</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><call pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:14">assert</name><argument_list pos:start="69:15" pos:end="69:25">(<argument pos:start="69:16" pos:end="69:24"><expr pos:start="69:16" pos:end="69:24"><name pos:start="69:16" pos:end="69:16">m</name> <operator pos:start="69:18" pos:end="69:19">!=</operator> <name pos:start="69:21" pos:end="69:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







        <expr_stmt pos:start="77:9" pos:end="77:59"><expr pos:start="77:9" pos:end="77:58"><name pos:start="77:9" pos:end="77:14">header</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><call pos:start="77:19" pos:end="77:30"><name pos:start="77:19" pos:end="77:25">AV_RB32</name><argument_list pos:start="77:26" pos:end="77:30">(<argument pos:start="77:27" pos:end="77:29"><expr pos:start="77:27" pos:end="77:29"><name pos:start="77:27" pos:end="77:29">buf</name></expr></argument>)</argument_list></call> <operator pos:start="77:32" pos:end="77:32">&amp;</operator> <literal type="number" pos:start="77:34" pos:end="77:43">0x000fffff</literal><operator pos:start="77:44" pos:end="77:44">)</operator> <operator pos:start="77:46" pos:end="77:46">|</operator> <name pos:start="77:48" pos:end="77:58"><name pos:start="77:48" pos:end="77:48">s</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:58">syncword</name></name></expr>;</expr_stmt> <comment type="line" pos:start="77:61" pos:end="77:75">// patch header</comment>



        <if_stmt pos:start="81:9" pos:end="83:18"><if pos:start="81:9" pos:end="83:18">if <condition pos:start="81:12" pos:end="81:44">(<expr pos:start="81:13" pos:end="81:43"><call pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:31">ff_mpa_check_header</name><argument_list pos:start="81:32" pos:end="81:39">(<argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><name pos:start="81:33" pos:end="81:38">header</name></expr></argument>)</argument_list></call> <operator pos:start="81:41" pos:end="81:41">&lt;</operator> <literal type="number" pos:start="81:43" pos:end="81:43">0</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:18"><block_content pos:start="83:13" pos:end="83:18"> <comment type="line" pos:start="81:46" pos:end="81:73">// Bad header, discard block</comment>

            <break pos:start="83:13" pos:end="83:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:69"><expr pos:start="87:9" pos:end="87:68"><call pos:start="87:9" pos:end="87:68"><name pos:start="87:9" pos:end="87:38">avpriv_mpegaudio_decode_header</name><argument_list pos:start="87:39" pos:end="87:68">(<argument pos:start="87:40" pos:end="87:59"><expr pos:start="87:40" pos:end="87:59"><operator pos:start="87:40" pos:end="87:40">(</operator><name pos:start="87:41" pos:end="87:55">MPADecodeHeader</name> <operator pos:start="87:57" pos:end="87:57">*</operator><operator pos:start="87:58" pos:end="87:58">)</operator><name pos:start="87:59" pos:end="87:59">m</name></expr></argument>, <argument pos:start="87:62" pos:end="87:67"><expr pos:start="87:62" pos:end="87:67"><name pos:start="87:62" pos:end="87:67">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="160:20"><if pos:start="91:9" pos:end="160:20">if <condition pos:start="91:12" pos:end="91:50">(<expr pos:start="91:13" pos:end="91:49"><name pos:start="91:13" pos:end="91:14">ch</name> <operator pos:start="91:16" pos:end="91:16">+</operator> <name pos:start="91:18" pos:end="91:31"><name pos:start="91:18" pos:end="91:18">m</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:31">nb_channels</name></name> <operator pos:start="91:33" pos:end="91:33">&gt;</operator> <name pos:start="91:35" pos:end="91:49"><name pos:start="91:35" pos:end="91:39">avctx</name><operator pos:start="91:40" pos:end="91:41">-&gt;</operator><name pos:start="91:42" pos:end="91:49">channels</name></name></expr>)</condition> <block pos:start="91:52" pos:end="160:20">{<block_content pos:start="93:13" pos:end="160:20">

            <expr_stmt pos:start="93:13" pos:end="95:59"><expr pos:start="93:13" pos:end="95:58"><call pos:start="93:13" pos:end="95:58"><name pos:start="93:13" pos:end="93:18">av_log</name><argument_list pos:start="93:19" pos:end="95:58">(<argument pos:start="93:20" pos:end="93:24"><expr pos:start="93:20" pos:end="93:24"><name pos:start="93:20" pos:end="93:24">avctx</name></expr></argument>, <argument pos:start="93:27" pos:end="93:38"><expr pos:start="93:27" pos:end="93:38"><name pos:start="93:27" pos:end="93:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:41" pos:end="95:57"><expr pos:start="93:41" pos:end="95:57"><literal type="string" pos:start="93:41" pos:end="93:76">"frame channel count exceeds codec "</literal>

                                        <literal type="string" pos:start="95:41" pos:end="95:57">"channel count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:29"><expr pos:start="99:9" pos:end="99:28"><name pos:start="99:9" pos:end="99:10">ch</name> <operator pos:start="99:12" pos:end="99:13">+=</operator> <name pos:start="99:15" pos:end="99:28"><name pos:start="99:15" pos:end="99:15">m</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:28">nb_channels</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:59"><expr pos:start="103:9" pos:end="103:58"><name pos:start="103:9" pos:end="103:16">out_size</name> <operator pos:start="103:18" pos:end="103:19">+=</operator> <call pos:start="103:21" pos:end="103:58"><name pos:start="103:21" pos:end="103:35">mp_decode_frame</name><argument_list pos:start="103:36" pos:end="103:58">(<argument pos:start="103:37" pos:end="103:37"><expr pos:start="103:37" pos:end="103:37"><name pos:start="103:37" pos:end="103:37">m</name></expr></argument>, <argument pos:start="103:40" pos:end="103:45"><expr pos:start="103:40" pos:end="103:45"><name pos:start="103:40" pos:end="103:45">outptr</name></expr></argument>, <argument pos:start="103:48" pos:end="103:50"><expr pos:start="103:48" pos:end="103:50"><name pos:start="103:48" pos:end="103:50">buf</name></expr></argument>, <argument pos:start="103:53" pos:end="103:57"><expr pos:start="103:53" pos:end="103:57"><name pos:start="103:53" pos:end="103:57">fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:26"><expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:11">buf</name>      <operator pos:start="105:18" pos:end="105:19">+=</operator> <name pos:start="105:21" pos:end="105:25">fsize</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:26"><expr pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:11">len</name>      <operator pos:start="107:18" pos:end="107:19">-=</operator> <name pos:start="107:21" pos:end="107:25">fsize</name></expr>;</expr_stmt>



        <if_stmt pos:start="111:9" pos:end="160:20"><if pos:start="111:9" pos:end="160:20">if <condition pos:start="111:12" pos:end="111:26">(<expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:21"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:21">frames</name></name> <operator pos:start="111:23" pos:end="111:23">&gt;</operator> <literal type="number" pos:start="111:25" pos:end="111:25">1</literal></expr>)</condition> <block pos:start="111:28" pos:end="160:20">{<block_content pos:start="113:13" pos:end="160:20">

            <expr_stmt pos:start="113:13" pos:end="113:52"><expr pos:start="113:13" pos:end="113:51"><name pos:start="113:13" pos:end="113:13">n</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <name pos:start="113:17" pos:end="113:36"><name pos:start="113:17" pos:end="113:17">m</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:24">avctx</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:36">frame_size</name></name><operator pos:start="113:37" pos:end="113:37">*</operator><name pos:start="113:38" pos:end="113:51"><name pos:start="113:38" pos:end="113:38">m</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:51">nb_channels</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="115:13" pos:end="115:40">/* interleave output data */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:43"><expr pos:start="117:13" pos:end="117:42"><name pos:start="117:13" pos:end="117:14">bp</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <name pos:start="117:18" pos:end="117:28">out_samples</name> <operator pos:start="117:30" pos:end="117:30">+</operator> <name pos:start="117:32" pos:end="117:42"><name pos:start="117:32" pos:end="117:32">s</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:38">coff</name><index pos:start="117:39" pos:end="117:42">[<expr pos:start="117:40" pos:end="117:41"><name pos:start="117:40" pos:end="117:41">fr</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="119:13" pos:end="160:20"><if pos:start="119:13" pos:end="160:20">if <condition pos:start="119:16" pos:end="119:36">(<expr pos:start="119:17" pos:end="119:35"><name pos:start="119:17" pos:end="119:30"><name pos:start="119:17" pos:end="119:17">m</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:30">nb_channels</name></name> <operator pos:start="119:32" pos:end="119:33">==</operator> <literal type="number" pos:start="119:35" pos:end="119:35">1</literal></expr>)</condition> <block pos:start="119:38" pos:end="160:20">{<block_content pos:start="121:17" pos:end="160:20">

                <for pos:start="121:17" pos:end="128:13">for <control pos:start="121:21" pos:end="121:39">(<init pos:start="121:22" pos:end="121:27"><expr pos:start="121:22" pos:end="121:26"><name pos:start="121:22" pos:end="121:22">j</name> <operator pos:start="121:24" pos:end="121:24">=</operator> <literal type="number" pos:start="121:26" pos:end="121:26">0</literal></expr>;</init> <condition pos:start="121:29" pos:end="121:34"><expr pos:start="121:29" pos:end="121:33"><name pos:start="121:29" pos:end="121:29">j</name> <operator pos:start="121:31" pos:end="121:31">&lt;</operator> <name pos:start="121:33" pos:end="121:33">n</name></expr>;</condition> <incr pos:start="121:36" pos:end="121:38"><expr pos:start="121:36" pos:end="121:38"><name pos:start="121:36" pos:end="121:36">j</name><operator pos:start="121:37" pos:end="121:38">++</operator></expr></incr>)</control> <block pos:start="121:41" pos:end="128:13">{<block_content pos:start="123:21" pos:end="125:42">

                    <expr_stmt pos:start="123:21" pos:end="123:44"><expr pos:start="123:21" pos:end="123:43"><operator pos:start="123:21" pos:end="123:21">*</operator><name pos:start="123:22" pos:end="123:23">bp</name> <operator pos:start="123:25" pos:end="123:25">=</operator> <name pos:start="123:27" pos:end="123:43"><name pos:start="123:27" pos:end="123:27">s</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:40">decoded_buf</name><index pos:start="123:41" pos:end="123:43">[<expr pos:start="123:42" pos:end="123:42"><name pos:start="123:42" pos:end="123:42">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:42"><expr pos:start="125:21" pos:end="125:41"><name pos:start="125:21" pos:end="125:22">bp</name> <operator pos:start="125:24" pos:end="125:25">+=</operator> <name pos:start="125:27" pos:end="125:41"><name pos:start="125:27" pos:end="125:31">avctx</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:41">channels</name></name></expr>;</expr_stmt>


            </block_content>}</block></for> <if_stmt pos:start="128:15" pos:end="160:20"><else pos:start="128:15" pos:end="160:20">else <block pos:start="128:20" pos:end="160:20">{<block_content pos:start="130:17" pos:end="160:20">

                <for pos:start="130:17" pos:end="160:20">for <control pos:start="130:21" pos:end="130:39">(<init pos:start="130:22" pos:end="130:27"><expr pos:start="130:22" pos:end="130:26"><name pos:start="130:22" pos:end="130:22">j</name> <operator pos:start="130:24" pos:end="130:24">=</operator> <literal type="number" pos:start="130:26" pos:end="130:26">0</literal></expr>;</init> <condition pos:start="130:29" pos:end="130:34"><expr pos:start="130:29" pos:end="130:33"><name pos:start="130:29" pos:end="130:29">j</name> <operator pos:start="130:31" pos:end="130:31">&lt;</operator> <name pos:start="130:33" pos:end="130:33">n</name></expr>;</condition> <incr pos:start="130:36" pos:end="130:38"><expr pos:start="130:36" pos:end="130:38"><name pos:start="130:36" pos:end="130:36">j</name><operator pos:start="130:37" pos:end="130:38">++</operator></expr></incr>)</control> <block pos:start="130:41" pos:end="160:20">{<block_content pos:start="132:21" pos:end="160:20">

                    <expr_stmt pos:start="132:21" pos:end="132:48"><expr pos:start="132:21" pos:end="132:47"><name pos:start="132:21" pos:end="132:25"><name pos:start="132:21" pos:end="132:22">bp</name><index pos:start="132:23" pos:end="132:25">[<expr pos:start="132:24" pos:end="132:24"><literal type="number" pos:start="132:24" pos:end="132:24">0</literal></expr>]</index></name> <operator pos:start="132:27" pos:end="132:27">=</operator> <name pos:start="132:29" pos:end="132:47"><name pos:start="132:29" pos:end="132:29">s</name><operator pos:start="132:30" pos:end="132:31">-&gt;</operator><name pos:start="132:32" pos:end="132:42">decoded_buf</name><index pos:start="132:43" pos:end="132:47">[<expr pos:start="132:44" pos:end="132:46"><name pos:start="132:44" pos:end="132:44">j</name><operator pos:start="132:45" pos:end="132:46">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="134:21" pos:end="134:46"><expr pos:start="134:21" pos:end="134:45"><name pos:start="134:21" pos:end="134:25"><name pos:start="134:21" pos:end="134:22">bp</name><index pos:start="134:23" pos:end="134:25">[<expr pos:start="134:24" pos:end="134:24"><literal type="number" pos:start="134:24" pos:end="134:24">1</literal></expr>]</index></name> <operator pos:start="134:27" pos:end="134:27">=</operator> <name pos:start="134:29" pos:end="134:45"><name pos:start="134:29" pos:end="134:29">s</name><operator pos:start="134:30" pos:end="134:31">-&gt;</operator><name pos:start="134:32" pos:end="134:42">decoded_buf</name><index pos:start="134:43" pos:end="134:45">[<expr pos:start="134:44" pos:end="134:44"><name pos:start="134:44" pos:end="134:44">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="136:21" pos:end="136:44"><expr pos:start="136:21" pos:end="136:43"><name pos:start="136:21" pos:end="136:22">bp</name>   <operator pos:start="136:26" pos:end="136:27">+=</operator> <name pos:start="136:29" pos:end="136:43"><name pos:start="136:29" pos:end="136:33">avctx</name><operator pos:start="136:34" pos:end="136:35">-&gt;</operator><name pos:start="136:36" pos:end="136:43">channels</name></name></expr>;</expr_stmt>




        <expr_stmt pos:start="141:9" pos:end="141:39"><expr pos:start="141:9" pos:end="141:38"><name pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:13">avctx</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:23">bit_rate</name></name> <operator pos:start="141:25" pos:end="141:26">+=</operator> <name pos:start="141:28" pos:end="141:38"><name pos:start="141:28" pos:end="141:28">m</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:38">bit_rate</name></name></expr>;</expr_stmt>




    <comment type="block" pos:start="146:5" pos:end="146:27">/* update codec info */</comment>

    <expr_stmt pos:start="148:5" pos:end="148:54"><expr pos:start="148:5" pos:end="148:53"><name pos:start="148:5" pos:end="148:22"><name pos:start="148:5" pos:end="148:9">avctx</name><operator pos:start="148:10" pos:end="148:11">-&gt;</operator><name pos:start="148:12" pos:end="148:22">sample_rate</name></name> <operator pos:start="148:24" pos:end="148:24">=</operator> <name pos:start="148:26" pos:end="148:40"><name pos:start="148:26" pos:end="148:26">s</name><operator pos:start="148:27" pos:end="148:28">-&gt;</operator><name pos:start="148:29" pos:end="148:37">mp3decctx</name><index pos:start="148:38" pos:end="148:40">[<expr pos:start="148:39" pos:end="148:39"><literal type="number" pos:start="148:39" pos:end="148:39">0</literal></expr>]</index></name><operator pos:start="148:41" pos:end="148:42">-&gt;</operator><name pos:start="148:43" pos:end="148:53">sample_rate</name></expr>;</expr_stmt>



    <expr_stmt pos:start="152:5" pos:end="152:74"><expr pos:start="152:5" pos:end="152:73"><name pos:start="152:5" pos:end="152:24"><name pos:start="152:5" pos:end="152:5">s</name><operator pos:start="152:6" pos:end="152:7">-&gt;</operator><name pos:start="152:8" pos:end="152:12">frame</name><operator pos:start="152:13" pos:end="152:14">-&gt;</operator><name pos:start="152:15" pos:end="152:24">nb_samples</name></name> <operator pos:start="152:26" pos:end="152:26">=</operator> <name pos:start="152:28" pos:end="152:35">out_size</name> <operator pos:start="152:37" pos:end="152:37">/</operator> <operator pos:start="152:39" pos:end="152:39">(</operator><name pos:start="152:40" pos:end="152:54"><name pos:start="152:40" pos:end="152:44">avctx</name><operator pos:start="152:45" pos:end="152:46">-&gt;</operator><name pos:start="152:47" pos:end="152:54">channels</name></name> <operator pos:start="152:56" pos:end="152:56">*</operator> <sizeof pos:start="152:58" pos:end="152:72">sizeof<argument_list pos:start="152:64" pos:end="152:72">(<argument pos:start="152:65" pos:end="152:71"><expr pos:start="152:65" pos:end="152:71"><name pos:start="152:65" pos:end="152:71">OUT_INT</name></expr></argument>)</argument_list></sizeof><operator pos:start="152:73" pos:end="152:73">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="154:5" pos:end="154:25"><expr pos:start="154:5" pos:end="154:24"><operator pos:start="154:5" pos:end="154:5">*</operator><name pos:start="154:6" pos:end="154:18">got_frame_ptr</name>   <operator pos:start="154:22" pos:end="154:22">=</operator> <literal type="number" pos:start="154:24" pos:end="154:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="156:5" pos:end="156:33"><expr pos:start="156:5" pos:end="156:32"><operator pos:start="156:5" pos:end="156:5">*</operator><operator pos:start="156:6" pos:end="156:6">(</operator><name pos:start="156:7" pos:end="156:13">AVFrame</name> <operator pos:start="156:15" pos:end="156:15">*</operator><operator pos:start="156:16" pos:end="156:16">)</operator><name pos:start="156:17" pos:end="156:20">data</name> <operator pos:start="156:22" pos:end="156:22">=</operator> <operator pos:start="156:24" pos:end="156:24">*</operator><name pos:start="156:25" pos:end="156:32"><name pos:start="156:25" pos:end="156:25">s</name><operator pos:start="156:26" pos:end="156:27">-&gt;</operator><name pos:start="156:28" pos:end="156:32">frame</name></name></expr>;</expr_stmt>



    <return pos:start="160:5" pos:end="160:20">return <expr pos:start="160:12" pos:end="160:19"><name pos:start="160:12" pos:end="160:19">buf_size</name></expr>;</return></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></function>
</unit>
