<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25864.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">gen_intermediate_code</name><parameter_list pos:start="1:27" pos:end="1:63">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">cs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:62"><decl pos:start="1:42" pos:end="1:62"><type pos:start="1:42" pos:end="1:62"><name pos:start="1:42" pos:end="1:57">TranslationBlock</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type> <name pos:start="1:61" pos:end="1:62">tb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="243:1">{<block_content pos:start="5:5" pos:end="242:0">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUSPARCState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:27">cs</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:25">pc_start</name></decl>, <decl pos:start="7:28" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:28" pos:end="7:34">last_pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">dc1</name></decl>, <decl pos:start="9:23" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">dc</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">max_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:21">insn</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><call pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:10">memset</name><argument_list pos:start="19:11" pos:end="19:39">(<argument pos:start="19:12" pos:end="19:13"><expr pos:start="19:12" pos:end="19:13"><name pos:start="19:12" pos:end="19:13">dc</name></expr></argument>, <argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr></argument>, <argument pos:start="19:19" pos:end="19:38"><expr pos:start="19:19" pos:end="19:38"><sizeof pos:start="19:19" pos:end="19:38">sizeof<argument_list pos:start="19:25" pos:end="19:38">(<argument pos:start="19:26" pos:end="19:37"><expr pos:start="19:26" pos:end="19:37"><name pos:start="19:26" pos:end="19:37">DisasContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:6">dc</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:10">tb</name></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:12">pc_start</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:21"><name pos:start="23:16" pos:end="23:17">tb</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:6">dc</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:10">pc</name></name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:11">last_pc</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:20"><name pos:start="27:15" pos:end="27:16">dc</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:20">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:6">dc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:11">npc</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">(</operator><name pos:start="29:16" pos:end="29:27">target_ulong</name><operator pos:start="29:28" pos:end="29:28">)</operator> <name pos:start="29:30" pos:end="29:40"><name pos:start="29:30" pos:end="29:31">tb</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:40">cs_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:6">dc</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:13">cc_op</name></name> <operator pos:start="31:15" pos:end="31:15">=</operator> <name pos:start="31:17" pos:end="31:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:15">mem_idx</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:27"><name pos:start="33:19" pos:end="33:20">tb</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:27">flags</name></name> <operator pos:start="33:29" pos:end="33:29">&amp;</operator> <name pos:start="33:31" pos:end="33:46">TB_FLAG_MMU_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:11">def</name></name> <operator pos:start="35:13" pos:end="35:13">=</operator> <operator pos:start="35:15" pos:end="35:15">&amp;</operator><name pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:18">env</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:23">def</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:19">fpu_enabled</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:47"><name pos:start="37:23" pos:end="37:36">tb_fpu_enabled</name><argument_list pos:start="37:37" pos:end="37:47">(<argument pos:start="37:38" pos:end="37:46"><expr pos:start="37:38" pos:end="37:46"><name pos:start="37:38" pos:end="37:46"><name pos:start="37:38" pos:end="37:39">tb</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:46">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:54"><expr pos:start="39:5" pos:end="39:53"><name pos:start="39:5" pos:end="39:26"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:26">address_mask_32bit</name></name> <operator pos:start="39:28" pos:end="39:28">=</operator> <call pos:start="39:30" pos:end="39:53"><name pos:start="39:30" pos:end="39:42">tb_am_enabled</name><argument_list pos:start="39:43" pos:end="39:53">(<argument pos:start="39:44" pos:end="39:52"><expr pos:start="39:44" pos:end="39:52"><name pos:start="39:44" pos:end="39:52"><name pos:start="39:44" pos:end="39:45">tb</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:52">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:59"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:18">singlestep</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <operator pos:start="41:22" pos:end="41:22">(</operator><name pos:start="41:23" pos:end="41:44"><name pos:start="41:23" pos:end="41:24">cs</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:44">singlestep_enabled</name></name> <operator pos:start="41:46" pos:end="41:47">||</operator> <name pos:start="41:49" pos:end="41:58">singlestep</name><operator pos:start="41:59" pos:end="41:59">)</operator></expr>;</expr_stmt>

<cpp:ifndef pos:start="43:1" pos:end="43:24">#<cpp:directive pos:start="43:2" pos:end="43:7">ifndef</cpp:directive> <name pos:start="43:9" pos:end="43:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <expr_stmt pos:start="45:5" pos:end="50:0"><expr pos:start="45:5" pos:end="45:53"><name pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:18">supervisor</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <operator pos:start="45:22" pos:end="45:22">(</operator><name pos:start="45:23" pos:end="45:31"><name pos:start="45:23" pos:end="45:24">tb</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:31">flags</name></name> <operator pos:start="45:33" pos:end="45:33">&amp;</operator> <name pos:start="45:35" pos:end="45:47">TB_FLAG_SUPER</name><operator pos:start="45:48" pos:end="45:48">)</operator> <operator pos:start="45:50" pos:end="45:51">!=</operator> <literal type="number" pos:start="45:53" pos:end="45:53">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="49:1" pos:end="49:21">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:21">TARGET_SPARC64</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="51:23"><expr pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:18">fprs_dirty</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:53"><name pos:start="53:5" pos:end="53:11"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:11">asi</name></name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">(</operator><name pos:start="53:16" pos:end="53:24"><name pos:start="53:16" pos:end="53:17">tb</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:24">flags</name></name> <operator pos:start="53:26" pos:end="53:27">&gt;&gt;</operator> <name pos:start="53:29" pos:end="53:45">TB_FLAG_ASI_SHIFT</name><operator pos:start="53:46" pos:end="53:46">)</operator> <operator pos:start="53:48" pos:end="53:48">&amp;</operator> <literal type="number" pos:start="53:50" pos:end="53:53">0xff</literal></expr>;</expr_stmt>

<cpp:ifndef pos:start="55:1" pos:end="55:24">#<cpp:directive pos:start="55:2" pos:end="55:7">ifndef</cpp:directive> <name pos:start="55:9" pos:end="55:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <expr_stmt pos:start="57:5" pos:end="62:0"><expr pos:start="57:5" pos:end="57:53"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:18">hypervisor</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <operator pos:start="57:22" pos:end="57:22">(</operator><name pos:start="57:23" pos:end="57:31"><name pos:start="57:23" pos:end="57:24">tb</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:31">flags</name></name> <operator pos:start="57:33" pos:end="57:33">&amp;</operator> <name pos:start="57:35" pos:end="57:47">TB_FLAG_HYPER</name><operator pos:start="57:48" pos:end="57:48">)</operator> <operator pos:start="57:50" pos:end="57:51">!=</operator> <literal type="number" pos:start="57:53" pos:end="57:53">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="65:5" pos:end="65:18"><expr pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:13">num_insns</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:13">max_insns</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:18">tb</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:26">cflags</name></name> <operator pos:start="67:28" pos:end="67:28">&amp;</operator> <name pos:start="67:30" pos:end="67:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:23">(<expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:17">max_insns</name> <operator pos:start="69:19" pos:end="69:20">==</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>)</condition> <block pos:start="69:25" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:34">

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:17">max_insns</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:34">(<expr pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:17">max_insns</name> <operator pos:start="75:19" pos:end="75:19">&gt;</operator> <name pos:start="75:21" pos:end="75:33">TCG_MAX_INSNS</name></expr>)</condition> <block pos:start="75:36" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:34">

        <expr_stmt pos:start="77:9" pos:end="77:34"><expr pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:17">max_insns</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:33">TCG_MAX_INSNS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><call pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:16">gen_tb_start</name><argument_list pos:start="83:17" pos:end="83:20">(<argument pos:start="83:18" pos:end="83:19"><expr pos:start="83:18" pos:end="83:19"><name pos:start="83:18" pos:end="83:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="85:5" pos:end="173:36">do <block pos:start="85:8" pos:end="169:5">{<block_content pos:start="87:9" pos:end="167:9">

        <if_stmt pos:start="87:9" pos:end="97:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:30">(<expr pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:14">dc</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:19">npc</name></name> <operator pos:start="87:21" pos:end="87:21">&amp;</operator> <name pos:start="87:23" pos:end="87:29">JUMP_PC</name></expr>)</condition> <block pos:start="87:32" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:65">

            <expr_stmt pos:start="89:13" pos:end="89:49"><expr pos:start="89:13" pos:end="89:48"><call pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:18">assert</name><argument_list pos:start="89:19" pos:end="89:48">(<argument pos:start="89:20" pos:end="89:47"><expr pos:start="89:20" pos:end="89:47"><name pos:start="89:20" pos:end="89:33"><name pos:start="89:20" pos:end="89:21">dc</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:30">jump_pc</name><index pos:start="89:31" pos:end="89:33">[<expr pos:start="89:32" pos:end="89:32"><literal type="number" pos:start="89:32" pos:end="89:32">1</literal></expr>]</index></name> <operator pos:start="89:35" pos:end="89:36">==</operator> <name pos:start="89:38" pos:end="89:43"><name pos:start="89:38" pos:end="89:39">dc</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:43">pc</name></name> <operator pos:start="89:45" pos:end="89:45">+</operator> <literal type="number" pos:start="89:47" pos:end="89:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:65"><expr pos:start="91:13" pos:end="91:64"><call pos:start="91:13" pos:end="91:64"><name pos:start="91:13" pos:end="91:30">tcg_gen_insn_start</name><argument_list pos:start="91:31" pos:end="91:64">(<argument pos:start="91:32" pos:end="91:37"><expr pos:start="91:32" pos:end="91:37"><name pos:start="91:32" pos:end="91:37"><name pos:start="91:32" pos:end="91:33">dc</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:37">pc</name></name></expr></argument>, <argument pos:start="91:40" pos:end="91:63"><expr pos:start="91:40" pos:end="91:63"><name pos:start="91:40" pos:end="91:53"><name pos:start="91:40" pos:end="91:41">dc</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:50">jump_pc</name><index pos:start="91:51" pos:end="91:53">[<expr pos:start="91:52" pos:end="91:52"><literal type="number" pos:start="91:52" pos:end="91:52">0</literal></expr>]</index></name> <operator pos:start="91:55" pos:end="91:55">|</operator> <name pos:start="91:57" pos:end="91:63">JUMP_PC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="97:9">else <block pos:start="93:16" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:48">

            <expr_stmt pos:start="95:13" pos:end="95:48"><expr pos:start="95:13" pos:end="95:47"><call pos:start="95:13" pos:end="95:47"><name pos:start="95:13" pos:end="95:30">tcg_gen_insn_start</name><argument_list pos:start="95:31" pos:end="95:47">(<argument pos:start="95:32" pos:end="95:37"><expr pos:start="95:32" pos:end="95:37"><name pos:start="95:32" pos:end="95:37"><name pos:start="95:32" pos:end="95:33">dc</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:37">pc</name></name></expr></argument>, <argument pos:start="95:40" pos:end="95:46"><expr pos:start="95:40" pos:end="95:46"><name pos:start="95:40" pos:end="95:46"><name pos:start="95:40" pos:end="95:41">dc</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:46">npc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:20"><expr pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:17">num_insns</name><operator pos:start="99:18" pos:end="99:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:25"><expr pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:15">last_pc</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <name pos:start="101:19" pos:end="101:24"><name pos:start="101:19" pos:end="101:20">dc</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:24">pc</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="121:9"><if pos:start="105:9" pos:end="121:9">if <condition pos:start="105:12" pos:end="105:62">(<expr pos:start="105:13" pos:end="105:61"><call pos:start="105:13" pos:end="105:61"><name pos:start="105:13" pos:end="105:20">unlikely</name><argument_list pos:start="105:21" pos:end="105:61">(<argument pos:start="105:22" pos:end="105:60"><expr pos:start="105:22" pos:end="105:60"><call pos:start="105:22" pos:end="105:60"><name pos:start="105:22" pos:end="105:40">cpu_breakpoint_test</name><argument_list pos:start="105:41" pos:end="105:60">(<argument pos:start="105:42" pos:end="105:43"><expr pos:start="105:42" pos:end="105:43"><name pos:start="105:42" pos:end="105:43">cs</name></expr></argument>, <argument pos:start="105:46" pos:end="105:51"><expr pos:start="105:46" pos:end="105:51"><name pos:start="105:46" pos:end="105:51"><name pos:start="105:46" pos:end="105:47">dc</name><operator pos:start="105:48" pos:end="105:49">-&gt;</operator><name pos:start="105:50" pos:end="105:51">pc</name></name></expr></argument>, <argument pos:start="105:54" pos:end="105:59"><expr pos:start="105:54" pos:end="105:59"><name pos:start="105:54" pos:end="105:59">BP_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:64" pos:end="121:9">{<block_content pos:start="107:13" pos:end="119:31">

            <if_stmt pos:start="107:13" pos:end="111:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:35">(<expr pos:start="107:17" pos:end="107:34"><name pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:18">dc</name><operator pos:start="107:19" pos:end="107:20">-&gt;</operator><name pos:start="107:21" pos:end="107:22">pc</name></name> <operator pos:start="107:24" pos:end="107:25">!=</operator> <name pos:start="107:27" pos:end="107:34">pc_start</name></expr>)</condition> <block pos:start="107:37" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:31">

                <expr_stmt pos:start="109:17" pos:end="109:31"><expr pos:start="109:17" pos:end="109:30"><call pos:start="109:17" pos:end="109:30"><name pos:start="109:17" pos:end="109:26">save_state</name><argument_list pos:start="109:27" pos:end="109:30">(<argument pos:start="109:28" pos:end="109:29"><expr pos:start="109:28" pos:end="109:29"><name pos:start="109:28" pos:end="109:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:38"><expr pos:start="113:13" pos:end="113:37"><call pos:start="113:13" pos:end="113:37"><name pos:start="113:13" pos:end="113:28">gen_helper_debug</name><argument_list pos:start="113:29" pos:end="113:37">(<argument pos:start="113:30" pos:end="113:36"><expr pos:start="113:30" pos:end="113:36"><name pos:start="113:30" pos:end="113:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:31"><expr pos:start="115:13" pos:end="115:30"><call pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:27">tcg_gen_exit_tb</name><argument_list pos:start="115:28" pos:end="115:30">(<argument pos:start="115:29" pos:end="115:29"><expr pos:start="115:29" pos:end="115:29"><literal type="number" pos:start="115:29" pos:end="115:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:26"><expr pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:21"><name pos:start="117:13" pos:end="117:14">dc</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:21">is_br</name></name> <operator pos:start="117:23" pos:end="117:23">=</operator> <literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:31">goto <name pos:start="119:18" pos:end="119:30">exit_gen_loop</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="125:9" pos:end="129:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:64">(<expr pos:start="125:13" pos:end="125:63"><name pos:start="125:13" pos:end="125:21">num_insns</name> <operator pos:start="125:23" pos:end="125:24">==</operator> <name pos:start="125:26" pos:end="125:34">max_insns</name> <operator pos:start="125:36" pos:end="125:37">&amp;&amp;</operator> <operator pos:start="125:39" pos:end="125:39">(</operator><name pos:start="125:40" pos:end="125:49"><name pos:start="125:40" pos:end="125:41">tb</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:49">cflags</name></name> <operator pos:start="125:51" pos:end="125:51">&amp;</operator> <name pos:start="125:53" pos:end="125:62">CF_LAST_IO</name><operator pos:start="125:63" pos:end="125:63">)</operator></expr>)</condition> <block pos:start="125:66" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:27">

            <expr_stmt pos:start="127:13" pos:end="127:27"><expr pos:start="127:13" pos:end="127:26"><call pos:start="127:13" pos:end="127:26"><name pos:start="127:13" pos:end="127:24">gen_io_start</name><argument_list pos:start="127:25" pos:end="127:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:41"><expr pos:start="133:9" pos:end="133:40"><name pos:start="133:9" pos:end="133:12">insn</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <call pos:start="133:16" pos:end="133:40"><name pos:start="133:16" pos:end="133:27">cpu_ldl_code</name><argument_list pos:start="133:28" pos:end="133:40">(<argument pos:start="133:29" pos:end="133:31"><expr pos:start="133:29" pos:end="133:31"><name pos:start="133:29" pos:end="133:31">env</name></expr></argument>, <argument pos:start="133:34" pos:end="133:39"><expr pos:start="133:34" pos:end="133:39"><name pos:start="133:34" pos:end="133:39"><name pos:start="133:34" pos:end="133:35">dc</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:35"><expr pos:start="137:9" pos:end="137:34"><call pos:start="137:9" pos:end="137:34"><name pos:start="137:9" pos:end="137:24">disas_sparc_insn</name><argument_list pos:start="137:25" pos:end="137:34">(<argument pos:start="137:26" pos:end="137:27"><expr pos:start="137:26" pos:end="137:27"><name pos:start="137:26" pos:end="137:27">dc</name></expr></argument>, <argument pos:start="137:30" pos:end="137:33"><expr pos:start="137:30" pos:end="137:33"><name pos:start="137:30" pos:end="137:33">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="141:9" pos:end="143:18"><if pos:start="141:9" pos:end="143:18">if <condition pos:start="141:12" pos:end="141:22">(<expr pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:14">dc</name><operator pos:start="141:15" pos:end="141:16">-&gt;</operator><name pos:start="141:17" pos:end="141:21">is_br</name></name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:18"><block_content pos:start="143:13" pos:end="143:18">

            <break pos:start="143:13" pos:end="143:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="145:9" pos:end="145:55">/* if the next PC is different, we abort now */</comment>

        <if_stmt pos:start="147:9" pos:end="149:18"><if pos:start="147:9" pos:end="149:18">if <condition pos:start="147:12" pos:end="147:36">(<expr pos:start="147:13" pos:end="147:35"><name pos:start="147:13" pos:end="147:18"><name pos:start="147:13" pos:end="147:14">dc</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:18">pc</name></name> <operator pos:start="147:20" pos:end="147:21">!=</operator> <operator pos:start="147:23" pos:end="147:23">(</operator><name pos:start="147:24" pos:end="147:30">last_pc</name> <operator pos:start="147:32" pos:end="147:32">+</operator> <literal type="number" pos:start="147:34" pos:end="147:34">4</literal><operator pos:start="147:35" pos:end="147:35">)</operator></expr>)</condition><block type="pseudo" pos:start="149:13" pos:end="149:18"><block_content pos:start="149:13" pos:end="149:18">

            <break pos:start="149:13" pos:end="149:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="151:9" pos:end="153:69">/* if we reach a page boundary, we stop generation so that the

           PC of a TT_TFAULT exception is always in the right page */</comment>

        <if_stmt pos:start="155:9" pos:end="157:18"><if pos:start="155:9" pos:end="157:18">if <condition pos:start="155:12" pos:end="155:51">(<expr pos:start="155:13" pos:end="155:50"><operator pos:start="155:13" pos:end="155:13">(</operator><name pos:start="155:14" pos:end="155:19"><name pos:start="155:14" pos:end="155:15">dc</name><operator pos:start="155:16" pos:end="155:17">-&gt;</operator><name pos:start="155:18" pos:end="155:19">pc</name></name> <operator pos:start="155:21" pos:end="155:21">&amp;</operator> <operator pos:start="155:23" pos:end="155:23">(</operator><name pos:start="155:24" pos:end="155:39">TARGET_PAGE_SIZE</name> <operator pos:start="155:41" pos:end="155:41">-</operator> <literal type="number" pos:start="155:43" pos:end="155:43">1</literal><operator pos:start="155:44" pos:end="155:44">)</operator><operator pos:start="155:45" pos:end="155:45">)</operator> <operator pos:start="155:47" pos:end="155:48">==</operator> <literal type="number" pos:start="155:50" pos:end="155:50">0</literal></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:18"><block_content pos:start="157:13" pos:end="157:18">

            <break pos:start="157:13" pos:end="157:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="159:9" pos:end="161:35">/* if single step mode, we generate only one instruction and

           generate an exception */</comment>

        <if_stmt pos:start="163:9" pos:end="167:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:27">(<expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:14">dc</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:26">singlestep</name></name></expr>)</condition> <block pos:start="163:29" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:18">

            <break pos:start="165:13" pos:end="165:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="169:13" pos:end="173:35">(<expr pos:start="169:14" pos:end="173:34"><operator pos:start="169:14" pos:end="169:14">!</operator><call pos:start="169:15" pos:end="169:31"><name pos:start="169:15" pos:end="169:29">tcg_op_buf_full</name><argument_list pos:start="169:30" pos:end="169:31">()</argument_list></call> <operator pos:start="169:33" pos:end="169:34">&amp;&amp;</operator>

             <operator pos:start="171:14" pos:end="171:14">(</operator><name pos:start="171:15" pos:end="171:20"><name pos:start="171:15" pos:end="171:16">dc</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:20">pc</name></name> <operator pos:start="171:22" pos:end="171:22">-</operator> <name pos:start="171:24" pos:end="171:31">pc_start</name><operator pos:start="171:32" pos:end="171:32">)</operator> <operator pos:start="171:34" pos:end="171:34">&lt;</operator> <operator pos:start="171:36" pos:end="171:36">(</operator><name pos:start="171:37" pos:end="171:52">TARGET_PAGE_SIZE</name> <operator pos:start="171:54" pos:end="171:54">-</operator> <literal type="number" pos:start="171:56" pos:end="171:57">32</literal><operator pos:start="171:58" pos:end="171:58">)</operator> <operator pos:start="171:60" pos:end="171:61">&amp;&amp;</operator>

             <name pos:start="173:14" pos:end="173:22">num_insns</name> <operator pos:start="173:24" pos:end="173:24">&lt;</operator> <name pos:start="173:26" pos:end="173:34">max_insns</name></expr>)</condition>;</do>



 <label pos:start="177:2" pos:end="177:15"><name pos:start="177:2" pos:end="177:14">exit_gen_loop</name>:</label>

    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:32">(<expr pos:start="179:9" pos:end="179:31"><name pos:start="179:9" pos:end="179:18"><name pos:start="179:9" pos:end="179:10">tb</name><operator pos:start="179:11" pos:end="179:12">-&gt;</operator><name pos:start="179:13" pos:end="179:18">cflags</name></name> <operator pos:start="179:20" pos:end="179:20">&amp;</operator> <name pos:start="179:22" pos:end="179:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="179:34" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:21">

        <expr_stmt pos:start="181:9" pos:end="181:21"><expr pos:start="181:9" pos:end="181:20"><call pos:start="181:9" pos:end="181:20"><name pos:start="181:9" pos:end="181:18">gen_io_end</name><argument_list pos:start="181:19" pos:end="181:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="185:5" pos:end="209:5"><if pos:start="185:5" pos:end="209:5">if <condition pos:start="185:8" pos:end="185:19">(<expr pos:start="185:9" pos:end="185:18"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:18"><name pos:start="185:10" pos:end="185:11">dc</name><operator pos:start="185:12" pos:end="185:13">-&gt;</operator><name pos:start="185:14" pos:end="185:18">is_br</name></name></expr>)</condition> <block pos:start="185:21" pos:end="209:5">{<block_content pos:start="187:9" pos:end="207:9">

        <if_stmt pos:start="187:9" pos:end="207:9"><if pos:start="187:9" pos:end="195:9">if <condition pos:start="187:12" pos:end="189:58">(<expr pos:start="187:13" pos:end="189:57"><name pos:start="187:13" pos:end="187:18"><name pos:start="187:13" pos:end="187:14">dc</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:18">pc</name></name> <operator pos:start="187:20" pos:end="187:21">!=</operator> <name pos:start="187:23" pos:end="187:32">DYNAMIC_PC</name> <operator pos:start="187:34" pos:end="187:35">&amp;&amp;</operator>

            <operator pos:start="189:13" pos:end="189:13">(</operator><name pos:start="189:14" pos:end="189:20"><name pos:start="189:14" pos:end="189:15">dc</name><operator pos:start="189:16" pos:end="189:17">-&gt;</operator><name pos:start="189:18" pos:end="189:20">npc</name></name> <operator pos:start="189:22" pos:end="189:23">!=</operator> <name pos:start="189:25" pos:end="189:34">DYNAMIC_PC</name> <operator pos:start="189:36" pos:end="189:37">&amp;&amp;</operator> <name pos:start="189:39" pos:end="189:45"><name pos:start="189:39" pos:end="189:40">dc</name><operator pos:start="189:41" pos:end="189:42">-&gt;</operator><name pos:start="189:43" pos:end="189:45">npc</name></name> <operator pos:start="189:47" pos:end="189:48">!=</operator> <name pos:start="189:50" pos:end="189:56">JUMP_PC</name><operator pos:start="189:57" pos:end="189:57">)</operator></expr>)</condition> <block pos:start="189:60" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:48">

            <comment type="block" pos:start="191:13" pos:end="191:63">/* static PC and NPC: we can use direct chaining */</comment>

            <expr_stmt pos:start="193:13" pos:end="193:48"><expr pos:start="193:13" pos:end="193:47"><call pos:start="193:13" pos:end="193:47"><name pos:start="193:13" pos:end="193:23">gen_goto_tb</name><argument_list pos:start="193:24" pos:end="193:47">(<argument pos:start="193:25" pos:end="193:26"><expr pos:start="193:25" pos:end="193:26"><name pos:start="193:25" pos:end="193:26">dc</name></expr></argument>, <argument pos:start="193:29" pos:end="193:29"><expr pos:start="193:29" pos:end="193:29"><literal type="number" pos:start="193:29" pos:end="193:29">0</literal></expr></argument>, <argument pos:start="193:32" pos:end="193:37"><expr pos:start="193:32" pos:end="193:37"><name pos:start="193:32" pos:end="193:37"><name pos:start="193:32" pos:end="193:33">dc</name><operator pos:start="193:34" pos:end="193:35">-&gt;</operator><name pos:start="193:36" pos:end="193:37">pc</name></name></expr></argument>, <argument pos:start="193:40" pos:end="193:46"><expr pos:start="193:40" pos:end="193:46"><name pos:start="193:40" pos:end="193:46"><name pos:start="193:40" pos:end="193:41">dc</name><operator pos:start="193:42" pos:end="193:43">-&gt;</operator><name pos:start="193:44" pos:end="193:46">npc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="195:11" pos:end="207:9">else <block pos:start="195:16" pos:end="207:9">{<block_content pos:start="197:13" pos:end="205:31">

            <if_stmt pos:start="197:13" pos:end="201:13"><if pos:start="197:13" pos:end="201:13">if <condition pos:start="197:16" pos:end="197:37">(<expr pos:start="197:17" pos:end="197:36"><name pos:start="197:17" pos:end="197:22"><name pos:start="197:17" pos:end="197:18">dc</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:22">pc</name></name> <operator pos:start="197:24" pos:end="197:25">!=</operator> <name pos:start="197:27" pos:end="197:36">DYNAMIC_PC</name></expr>)</condition> <block pos:start="197:39" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:48">

                <expr_stmt pos:start="199:17" pos:end="199:48"><expr pos:start="199:17" pos:end="199:47"><call pos:start="199:17" pos:end="199:47"><name pos:start="199:17" pos:end="199:31">tcg_gen_movi_tl</name><argument_list pos:start="199:32" pos:end="199:47">(<argument pos:start="199:33" pos:end="199:38"><expr pos:start="199:33" pos:end="199:38"><name pos:start="199:33" pos:end="199:38">cpu_pc</name></expr></argument>, <argument pos:start="199:41" pos:end="199:46"><expr pos:start="199:41" pos:end="199:46"><name pos:start="199:41" pos:end="199:46"><name pos:start="199:41" pos:end="199:42">dc</name><operator pos:start="199:43" pos:end="199:44">-&gt;</operator><name pos:start="199:45" pos:end="199:46">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:25"><expr pos:start="203:13" pos:end="203:24"><call pos:start="203:13" pos:end="203:24"><name pos:start="203:13" pos:end="203:20">save_npc</name><argument_list pos:start="203:21" pos:end="203:24">(<argument pos:start="203:22" pos:end="203:23"><expr pos:start="203:22" pos:end="203:23"><name pos:start="203:22" pos:end="203:23">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:31"><expr pos:start="205:13" pos:end="205:30"><call pos:start="205:13" pos:end="205:30"><name pos:start="205:13" pos:end="205:27">tcg_gen_exit_tb</name><argument_list pos:start="205:28" pos:end="205:30">(<argument pos:start="205:29" pos:end="205:29"><expr pos:start="205:29" pos:end="205:29"><literal type="number" pos:start="205:29" pos:end="205:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:30"><expr pos:start="211:5" pos:end="211:29"><call pos:start="211:5" pos:end="211:29"><name pos:start="211:5" pos:end="211:14">gen_tb_end</name><argument_list pos:start="211:15" pos:end="211:29">(<argument pos:start="211:16" pos:end="211:17"><expr pos:start="211:16" pos:end="211:17"><name pos:start="211:16" pos:end="211:17">tb</name></expr></argument>, <argument pos:start="211:20" pos:end="211:28"><expr pos:start="211:20" pos:end="211:28"><name pos:start="211:20" pos:end="211:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:38"><expr pos:start="215:5" pos:end="215:37"><name pos:start="215:5" pos:end="215:12"><name pos:start="215:5" pos:end="215:6">tb</name><operator pos:start="215:7" pos:end="215:8">-&gt;</operator><name pos:start="215:9" pos:end="215:12">size</name></name> <operator pos:start="215:14" pos:end="215:14">=</operator> <name pos:start="215:16" pos:end="215:22">last_pc</name> <operator pos:start="215:24" pos:end="215:24">+</operator> <literal type="number" pos:start="215:26" pos:end="215:28">4</literal> <operator pos:start="215:28" pos:end="215:28">-</operator> <name pos:start="215:30" pos:end="215:37">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="222:0"><expr pos:start="217:5" pos:end="217:26"><name pos:start="217:5" pos:end="217:14"><name pos:start="217:5" pos:end="217:6">tb</name><operator pos:start="217:7" pos:end="217:8">-&gt;</operator><name pos:start="217:9" pos:end="217:14">icount</name></name> <operator pos:start="217:16" pos:end="217:16">=</operator> <name pos:start="217:18" pos:end="217:26">num_insns</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="221:1" pos:end="221:18">#<cpp:directive pos:start="221:2" pos:end="221:6">ifdef</cpp:directive> <name pos:start="221:8" pos:end="221:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="223:5" pos:end="242:0"><if pos:start="223:5" pos:end="242:0">if <condition pos:start="223:8" pos:end="225:44">(<expr pos:start="223:9" pos:end="225:43"><call pos:start="223:9" pos:end="223:45"><name pos:start="223:9" pos:end="223:26">qemu_loglevel_mask</name><argument_list pos:start="223:27" pos:end="223:45">(<argument pos:start="223:28" pos:end="223:44"><expr pos:start="223:28" pos:end="223:44"><name pos:start="223:28" pos:end="223:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>

        <operator pos:start="225:9" pos:end="225:10">&amp;&amp;</operator> <call pos:start="225:12" pos:end="225:43"><name pos:start="225:12" pos:end="225:33">qemu_log_in_addr_range</name><argument_list pos:start="225:34" pos:end="225:43">(<argument pos:start="225:35" pos:end="225:42"><expr pos:start="225:35" pos:end="225:42"><name pos:start="225:35" pos:end="225:42">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:46" pos:end="242:0">{<block_content pos:start="227:9" pos:end="237:26">

        <expr_stmt pos:start="227:9" pos:end="227:24"><expr pos:start="227:9" pos:end="227:23"><call pos:start="227:9" pos:end="227:23"><name pos:start="227:9" pos:end="227:21">qemu_log_lock</name><argument_list pos:start="227:22" pos:end="227:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:37"><expr pos:start="229:9" pos:end="229:36"><call pos:start="229:9" pos:end="229:36"><name pos:start="229:9" pos:end="229:16">qemu_log</name><argument_list pos:start="229:17" pos:end="229:36">(<argument pos:start="229:18" pos:end="229:35"><expr pos:start="229:18" pos:end="229:35"><literal type="string" pos:start="229:18" pos:end="229:35">"--------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:54"><expr pos:start="231:9" pos:end="231:53"><call pos:start="231:9" pos:end="231:53"><name pos:start="231:9" pos:end="231:16">qemu_log</name><argument_list pos:start="231:17" pos:end="231:53">(<argument pos:start="231:18" pos:end="231:27"><expr pos:start="231:18" pos:end="231:27"><literal type="string" pos:start="231:18" pos:end="231:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="231:30" pos:end="231:52"><expr pos:start="231:30" pos:end="231:52"><call pos:start="231:30" pos:end="231:52"><name pos:start="231:30" pos:end="231:42">lookup_symbol</name><argument_list pos:start="231:43" pos:end="231:52">(<argument pos:start="231:44" pos:end="231:51"><expr pos:start="231:44" pos:end="231:51"><name pos:start="231:44" pos:end="231:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:66"><expr pos:start="233:9" pos:end="233:65"><call pos:start="233:9" pos:end="233:65"><name pos:start="233:9" pos:end="233:24">log_target_disas</name><argument_list pos:start="233:25" pos:end="233:65">(<argument pos:start="233:26" pos:end="233:27"><expr pos:start="233:26" pos:end="233:27"><name pos:start="233:26" pos:end="233:27">cs</name></expr></argument>, <argument pos:start="233:30" pos:end="233:37"><expr pos:start="233:30" pos:end="233:37"><name pos:start="233:30" pos:end="233:37">pc_start</name></expr></argument>, <argument pos:start="233:40" pos:end="233:61"><expr pos:start="233:40" pos:end="233:61"><name pos:start="233:40" pos:end="233:46">last_pc</name> <operator pos:start="233:48" pos:end="233:48">+</operator> <literal type="number" pos:start="233:50" pos:end="233:52">4</literal> <operator pos:start="233:52" pos:end="233:52">-</operator> <name pos:start="233:54" pos:end="233:61">pc_start</name></expr></argument>, <argument pos:start="233:64" pos:end="233:64"><expr pos:start="233:64" pos:end="233:64"><literal type="number" pos:start="233:64" pos:end="233:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:23"><expr pos:start="235:9" pos:end="235:22"><call pos:start="235:9" pos:end="235:22"><name pos:start="235:9" pos:end="235:16">qemu_log</name><argument_list pos:start="235:17" pos:end="235:22">(<argument pos:start="235:18" pos:end="235:21"><expr pos:start="235:18" pos:end="235:21"><literal type="string" pos:start="235:18" pos:end="235:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:26"><expr pos:start="237:9" pos:end="237:25"><call pos:start="237:9" pos:end="237:25"><name pos:start="237:9" pos:end="237:23">qemu_log_unlock</name><argument_list pos:start="237:24" pos:end="237:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="241:1" pos:end="241:6">#<cpp:directive pos:start="241:2" pos:end="241:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
