<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3006.c" pos:tabs="8"><function pos:start="1:1" pos:end="12:22"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:14">cpu_reset</name><parameter_list pos:start="1:15" pos:end="1:33">(<parameter pos:start="1:16" pos:end="1:32"><decl pos:start="1:16" pos:end="1:32"><type pos:start="1:16" pos:end="1:29"><name pos:start="1:16" pos:end="1:27">CPUM68KState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">env</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="12:22">{<block_content pos:start="3:5" pos:end="12:22">
    <expr_stmt pos:start="3:5" pos:end="5:0"><expr pos:start="3:5" pos:end="3:55"><call pos:start="3:5" pos:end="3:55"><name pos:start="3:5" pos:end="3:10">memset</name><argument_list pos:start="3:11" pos:end="3:55">(<argument pos:start="3:12" pos:end="3:14"><expr pos:start="3:12" pos:end="3:14"><name pos:start="3:12" pos:end="3:14">env</name></expr></argument>, <argument pos:start="3:17" pos:end="3:17"><expr pos:start="3:17" pos:end="3:17"><literal type="number" pos:start="3:17" pos:end="3:17">0</literal></expr></argument>, <argument pos:start="3:20" pos:end="3:54"><expr pos:start="3:20" pos:end="3:54"><call pos:start="3:20" pos:end="3:54"><name pos:start="3:20" pos:end="3:27">offsetof</name><argument_list pos:start="3:28" pos:end="3:54">(<argument pos:start="3:29" pos:end="3:40"><expr pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:40">CPUM68KState</name></expr></argument>, <argument pos:start="3:43" pos:end="3:53"><expr pos:start="3:43" pos:end="3:53"><name pos:start="3:43" pos:end="3:53">breakpoints</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="4:1" pos:end="4:31">#<cpp:directive pos:start="4:2" pos:end="4:3">if</cpp:directive> <expr pos:start="4:5" pos:end="4:31"><operator pos:start="4:5" pos:end="4:5">!</operator><call pos:start="4:6" pos:end="4:31"><name pos:start="4:6" pos:end="4:12">defined</name> <argument_list pos:start="4:14" pos:end="4:31">(<argument pos:start="4:15" pos:end="4:30"><expr pos:start="4:15" pos:end="4:30"><name pos:start="4:15" pos:end="4:30">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt pos:start="5:5" pos:end="7:0"><expr pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:7">env</name><operator pos:start="5:8" pos:end="5:9">-&gt;</operator><name pos:start="5:10" pos:end="5:11">sr</name></name> <operator pos:start="5:13" pos:end="5:13">=</operator> <literal type="number" pos:start="5:15" pos:end="5:20">0x2700</literal></expr>;</expr_stmt>
<cpp:endif pos:start="6:1" pos:end="6:6">#<cpp:directive pos:start="6:2" pos:end="6:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="7:5" pos:end="7:24"><expr pos:start="7:5" pos:end="7:23"><call pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:18">m68k_switch_sp</name><argument_list pos:start="7:19" pos:end="7:23">(<argument pos:start="7:20" pos:end="7:22"><expr pos:start="7:20" pos:end="7:22"><name pos:start="7:20" pos:end="7:22">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:52">/* ??? FP regs should be initialized to NaN.  */</comment>
    <expr_stmt pos:start="9:5" pos:end="9:29"><expr pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:7">env</name><operator pos:start="9:8" pos:end="9:9">-&gt;</operator><name pos:start="9:10" pos:end="9:14">cc_op</name></name> <operator pos:start="9:16" pos:end="9:16">=</operator> <name pos:start="9:18" pos:end="9:28">CC_OP_FLAGS</name></expr>;</expr_stmt>
    <comment type="block" pos:start="10:5" pos:end="10:60">/* TODO: We should set PC from the interrupt vector.  */</comment>
    <expr_stmt pos:start="11:5" pos:end="11:16"><expr pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:7">env</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:11">pc</name></name> <operator pos:start="11:13" pos:end="11:13">=</operator> <literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:22"><expr pos:start="12:5" pos:end="12:21"><call pos:start="12:5" pos:end="12:21"><name pos:start="12:5" pos:end="12:13">tlb_flush</name><argument_list pos:start="12:14" pos:end="12:21">(<argument pos:start="12:15" pos:end="12:17"><expr pos:start="12:15" pos:end="12:17"><name pos:start="12:15" pos:end="12:17">env</name></expr></argument>, <argument pos:start="12:20" pos:end="12:20"><expr pos:start="12:20" pos:end="12:20"><literal type="number" pos:start="12:20" pos:end="12:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></function></unit>
