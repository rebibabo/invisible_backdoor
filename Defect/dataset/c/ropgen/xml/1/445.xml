<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/445.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">udp_close</name><parameter_list pos:start="1:21" pos:end="1:35">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:31">URLContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">UDPContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">h</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:121"><if pos:start="9:5" pos:end="11:121">if <condition pos:start="9:8" pos:end="9:55">(<expr pos:start="9:9" pos:end="9:54"><name pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:9">s</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:23">is_multicast</name></name> <operator pos:start="9:25" pos:end="9:26">&amp;&amp;</operator> <operator pos:start="9:28" pos:end="9:28">(</operator><name pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:29">h</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:36">flags</name></name> <operator pos:start="9:38" pos:end="9:38">&amp;</operator> <name pos:start="9:40" pos:end="9:53">AVIO_FLAG_READ</name><operator pos:start="9:54" pos:end="9:54">)</operator></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:121"><block_content pos:start="11:9" pos:end="11:121">

        <expr_stmt pos:start="11:9" pos:end="11:121"><expr pos:start="11:9" pos:end="11:120"><call pos:start="11:9" pos:end="11:120"><name pos:start="11:9" pos:end="11:33">udp_leave_multicast_group</name><argument_list pos:start="11:34" pos:end="11:120">(<argument pos:start="11:35" pos:end="11:43"><expr pos:start="11:35" pos:end="11:43"><name pos:start="11:35" pos:end="11:43"><name pos:start="11:35" pos:end="11:35">s</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:43">udp_fd</name></name></expr></argument>, <argument pos:start="11:46" pos:end="11:77"><expr pos:start="11:46" pos:end="11:77"><operator pos:start="11:46" pos:end="11:46">(</operator>struct <name pos:start="11:54" pos:end="11:61">sockaddr</name> <operator pos:start="11:63" pos:end="11:63">*</operator><operator pos:start="11:64" pos:end="11:64">)</operator><operator pos:start="11:65" pos:end="11:65">&amp;</operator><name pos:start="11:66" pos:end="11:77"><name pos:start="11:66" pos:end="11:66">s</name><operator pos:start="11:67" pos:end="11:68">-&gt;</operator><name pos:start="11:69" pos:end="11:77">dest_addr</name></name></expr></argument>,<argument pos:start="11:79" pos:end="11:119"><expr pos:start="11:79" pos:end="11:119"><operator pos:start="11:79" pos:end="11:79">(</operator>struct <name pos:start="11:87" pos:end="11:94">sockaddr</name> <operator pos:start="11:96" pos:end="11:96">*</operator><operator pos:start="11:97" pos:end="11:97">)</operator><operator pos:start="11:98" pos:end="11:98">&amp;</operator><name pos:start="11:99" pos:end="11:119"><name pos:start="11:99" pos:end="11:99">s</name><operator pos:start="11:100" pos:end="11:101">-&gt;</operator><name pos:start="11:102" pos:end="11:119">local_addr_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="13:5" pos:end="16:0"><expr pos:start="13:5" pos:end="13:26"><call pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:15">closesocket</name><argument_list pos:start="13:16" pos:end="13:26">(<argument pos:start="13:17" pos:end="13:25"><expr pos:start="13:17" pos:end="13:25"><name pos:start="13:17" pos:end="13:25"><name pos:start="13:17" pos:end="13:17">s</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:25">udp_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="15:1" pos:end="15:23">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:23">HAVE_PTHREAD_CANCEL</name></expr></cpp:if>

    <if_stmt pos:start="17:5" pos:end="36:0"><if pos:start="17:5" pos:end="36:0">if <condition pos:start="17:8" pos:end="17:26">(<expr pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:25">thread_started</name></name></expr>)</condition> <block pos:start="17:28" pos:end="36:0">{<block_content pos:start="19:9" pos:end="31:39">

        <decl_stmt pos:start="19:9" pos:end="19:16"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">ret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:50"><expr pos:start="21:9" pos:end="21:49"><call pos:start="21:9" pos:end="21:49"><name pos:start="21:9" pos:end="21:22">pthread_cancel</name><argument_list pos:start="21:23" pos:end="21:49">(<argument pos:start="21:24" pos:end="21:48"><expr pos:start="21:24" pos:end="21:48"><name pos:start="21:24" pos:end="21:48"><name pos:start="21:24" pos:end="21:24">s</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:48">circular_buffer_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:60"><expr pos:start="23:9" pos:end="23:59"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:59"><name pos:start="23:15" pos:end="23:26">pthread_join</name><argument_list pos:start="23:27" pos:end="23:59">(<argument pos:start="23:28" pos:end="23:52"><expr pos:start="23:28" pos:end="23:52"><name pos:start="23:28" pos:end="23:52"><name pos:start="23:28" pos:end="23:28">s</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:52">circular_buffer_thread</name></name></expr></argument>, <argument pos:start="23:55" pos:end="23:58"><expr pos:start="23:55" pos:end="23:58"><name pos:start="23:55" pos:end="23:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:75"><if pos:start="25:9" pos:end="27:75">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:18">!=</operator> <literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:75"><block_content pos:start="27:13" pos:end="27:75">

            <expr_stmt pos:start="27:13" pos:end="27:75"><expr pos:start="27:13" pos:end="27:74"><call pos:start="27:13" pos:end="27:74"><name pos:start="27:13" pos:end="27:18">av_log</name><argument_list pos:start="27:19" pos:end="27:74">(<argument pos:start="27:20" pos:end="27:20"><expr pos:start="27:20" pos:end="27:20"><name pos:start="27:20" pos:end="27:20">h</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:58"><expr pos:start="27:37" pos:end="27:58"><literal type="string" pos:start="27:37" pos:end="27:58">"pthread_join(): %s\n"</literal></expr></argument>, <argument pos:start="27:61" pos:end="27:73"><expr pos:start="27:61" pos:end="27:73"><call pos:start="27:61" pos:end="27:73"><name pos:start="27:61" pos:end="27:68">strerror</name><argument_list pos:start="27:69" pos:end="27:73">(<argument pos:start="27:70" pos:end="27:72"><expr pos:start="27:70" pos:end="27:72"><name pos:start="27:70" pos:end="27:72">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><call pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:29">pthread_mutex_destroy</name><argument_list pos:start="29:30" pos:end="29:40">(<argument pos:start="29:31" pos:end="29:39"><expr pos:start="29:31" pos:end="29:39"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:39"><name pos:start="29:32" pos:end="29:32">s</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:39">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><call pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:28">pthread_cond_destroy</name><argument_list pos:start="31:29" pos:end="31:38">(<argument pos:start="31:30" pos:end="31:37"><expr pos:start="31:30" pos:end="31:37"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:37"><name pos:start="31:31" pos:end="31:31">s</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:37">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><call pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:17">av_fifo_freep</name><argument_list pos:start="37:18" pos:end="37:27">(<argument pos:start="37:19" pos:end="37:26"><expr pos:start="37:19" pos:end="37:26"><operator pos:start="37:19" pos:end="37:19">&amp;</operator><name pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:20">s</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:26">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
