<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26847.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:30">acpi_find_vgia</name><parameter_list pos:start="1:31" pos:end="1:36">(<parameter pos:start="1:32" pos:end="1:35"><decl pos:start="1:32" pos:end="1:35"><type pos:start="1:32" pos:end="1:35"><name pos:start="1:32" pos:end="1:35">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:23">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:24">rsdp_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:24">guid_offset</name> <init pos:start="7:26" pos:end="7:28">= <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">AcpiRsdpDescriptor</name></type> <name pos:start="9:24" pos:end="9:33">rsdp_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">rsdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:26">AcpiRsdtDescriptorRev1</name></type> <name pos:start="13:28" pos:end="13:37">rsdt_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">tables_nr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint32_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:20">tables</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:19">AcpiTableHeader</name></type> <name pos:start="19:21" pos:end="19:30">ssdt_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">VgidTable</name></type> <name pos:start="21:15" pos:end="21:24">vgid_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:64">/* Tables may take a short time to be set up by the guest */</comment>

    <for pos:start="29:5" pos:end="41:5">for <control pos:start="29:9" pos:end="29:40">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:35"><expr pos:start="29:17" pos:end="29:34"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:34">RSDP_TRIES_MAX</name></expr>;</condition> <incr pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><name pos:start="29:37" pos:end="29:37">i</name><operator pos:start="29:38" pos:end="29:39">++</operator></expr></incr>)</control> <block pos:start="29:42" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:32">

        <expr_stmt pos:start="31:9" pos:end="31:47"><expr pos:start="31:9" pos:end="31:46"><name pos:start="31:9" pos:end="31:19">rsdp_offset</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:46"><name pos:start="31:23" pos:end="31:44">acpi_find_rsdp_address</name><argument_list pos:start="31:45" pos:end="31:46">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:44">(<expr pos:start="33:13" pos:end="33:43"><name pos:start="33:13" pos:end="33:23">rsdp_offset</name> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <name pos:start="33:27" pos:end="33:43">RSDP_ADDR_INVALID</name></expr>)</condition> <block pos:start="33:46" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><call pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:16">g_usleep</name><argument_list pos:start="39:17" pos:end="39:31">(<argument pos:start="39:18" pos:end="39:30"><expr pos:start="39:18" pos:end="39:30"><name pos:start="39:18" pos:end="39:30">RSDP_SLEEP_US</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="43:5" pos:end="43:55"><expr pos:start="43:5" pos:end="43:54"><call pos:start="43:5" pos:end="43:54"><name pos:start="43:5" pos:end="43:19">g_assert_cmphex</name><argument_list pos:start="43:20" pos:end="43:54">(<argument pos:start="43:21" pos:end="43:31"><expr pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:31">rsdp_offset</name></expr></argument>, <argument pos:start="43:34" pos:end="43:34"><expr pos:start="43:34" pos:end="43:34"><operator pos:start="43:34" pos:end="43:34">&lt;</operator></expr></argument>, <argument pos:start="43:37" pos:end="43:53"><expr pos:start="43:37" pos:end="43:53"><name pos:start="43:37" pos:end="43:53">RSDP_ADDR_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:52"><expr pos:start="47:5" pos:end="47:51"><call pos:start="47:5" pos:end="47:51"><name pos:start="47:5" pos:end="47:25">acpi_parse_rsdp_table</name><argument_list pos:start="47:26" pos:end="47:51">(<argument pos:start="47:27" pos:end="47:37"><expr pos:start="47:27" pos:end="47:37"><name pos:start="47:27" pos:end="47:37">rsdp_offset</name></expr></argument>, <argument pos:start="47:40" pos:end="47:50"><expr pos:start="47:40" pos:end="47:50"><operator pos:start="47:40" pos:end="47:40">&amp;</operator><name pos:start="47:41" pos:end="47:50">rsdp_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:44"><expr pos:start="51:5" pos:end="51:43"><name pos:start="51:5" pos:end="51:8">rsdt</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <name pos:start="51:12" pos:end="51:43"><name pos:start="51:12" pos:end="51:21">rsdp_table</name><operator pos:start="51:22" pos:end="51:22">.</operator><name pos:start="51:23" pos:end="51:43">rsdt_physical_address</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="53:5" pos:end="53:25">/* read the header */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:46"><expr pos:start="55:5" pos:end="55:45"><call pos:start="55:5" pos:end="55:45"><name pos:start="55:5" pos:end="55:26">ACPI_READ_TABLE_HEADER</name><argument_list pos:start="55:27" pos:end="55:45">(<argument pos:start="55:28" pos:end="55:38"><expr pos:start="55:28" pos:end="55:38"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:38">rsdt_table</name></expr></argument>, <argument pos:start="55:41" pos:end="55:44"><expr pos:start="55:41" pos:end="55:44"><name pos:start="55:41" pos:end="55:44">rsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:50"><expr pos:start="57:5" pos:end="57:49"><call pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:19">ACPI_ASSERT_CMP</name><argument_list pos:start="57:20" pos:end="57:49">(<argument pos:start="57:21" pos:end="57:40"><expr pos:start="57:21" pos:end="57:40"><name pos:start="57:21" pos:end="57:40"><name pos:start="57:21" pos:end="57:30">rsdt_table</name><operator pos:start="57:31" pos:end="57:31">.</operator><name pos:start="57:32" pos:end="57:40">signature</name></name></expr></argument>, <argument pos:start="57:43" pos:end="57:48"><expr pos:start="57:43" pos:end="57:48"><literal type="string" pos:start="57:43" pos:end="57:48">"RSDT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:43">/* compute the table entries in rsdt */</comment>

    <expr_stmt pos:start="63:5" pos:end="65:33"><expr pos:start="63:5" pos:end="65:32"><name pos:start="63:5" pos:end="63:13">tables_nr</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <operator pos:start="63:17" pos:end="63:17">(</operator><name pos:start="63:18" pos:end="63:34"><name pos:start="63:18" pos:end="63:27">rsdt_table</name><operator pos:start="63:28" pos:end="63:28">.</operator><name pos:start="63:29" pos:end="63:34">length</name></name> <operator pos:start="63:36" pos:end="63:36">-</operator> <sizeof pos:start="63:38" pos:end="63:67">sizeof<argument_list pos:start="63:44" pos:end="63:67">(<argument pos:start="63:45" pos:end="63:66"><expr pos:start="63:45" pos:end="63:66"><name pos:start="63:45" pos:end="63:66">AcpiRsdtDescriptorRev1</name></expr></argument>)</argument_list></sizeof><operator pos:start="63:68" pos:end="63:68">)</operator> <operator pos:start="63:70" pos:end="63:70">/</operator>

                <sizeof pos:start="65:17" pos:end="65:32">sizeof<argument_list pos:start="65:23" pos:end="65:32">(<argument pos:start="65:24" pos:end="65:31"><expr pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:31">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><call pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:19">g_assert_cmpint</name><argument_list pos:start="67:20" pos:end="67:36">(<argument pos:start="67:21" pos:end="67:29"><expr pos:start="67:21" pos:end="67:29"><name pos:start="67:21" pos:end="67:29">tables_nr</name></expr></argument>, <argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><operator pos:start="67:32" pos:end="67:32">&gt;</operator></expr></argument>, <argument pos:start="67:35" pos:end="67:35"><expr pos:start="67:35" pos:end="67:35"><literal type="number" pos:start="67:35" pos:end="67:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:57">/* get the addresses of the tables pointed by rsdt */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:41"><expr pos:start="73:5" pos:end="73:40"><name pos:start="73:5" pos:end="73:10">tables</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <call pos:start="73:14" pos:end="73:40"><name pos:start="73:14" pos:end="73:19">g_new0</name><argument_list pos:start="73:20" pos:end="73:40">(<argument pos:start="73:21" pos:end="73:28"><expr pos:start="73:21" pos:end="73:28"><name pos:start="73:21" pos:end="73:28">uint32_t</name></expr></argument>, <argument pos:start="73:31" pos:end="73:39"><expr pos:start="73:31" pos:end="73:39"><name pos:start="73:31" pos:end="73:39">tables_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:49"><expr pos:start="75:5" pos:end="75:48"><call pos:start="75:5" pos:end="75:48"><name pos:start="75:5" pos:end="75:23">ACPI_READ_ARRAY_PTR</name><argument_list pos:start="75:24" pos:end="75:48">(<argument pos:start="75:25" pos:end="75:30"><expr pos:start="75:25" pos:end="75:30"><name pos:start="75:25" pos:end="75:30">tables</name></expr></argument>, <argument pos:start="75:33" pos:end="75:41"><expr pos:start="75:33" pos:end="75:41"><name pos:start="75:33" pos:end="75:41">tables_nr</name></expr></argument>, <argument pos:start="75:44" pos:end="75:47"><expr pos:start="75:44" pos:end="75:47"><name pos:start="75:44" pos:end="75:47">rsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="79:5" pos:end="119:5">for <control pos:start="79:9" pos:end="79:35">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">i</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:30"><expr pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:17">i</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <name pos:start="79:21" pos:end="79:29">tables_nr</name></expr>;</condition> <incr pos:start="79:32" pos:end="79:34"><expr pos:start="79:32" pos:end="79:34"><name pos:start="79:32" pos:end="79:32">i</name><operator pos:start="79:33" pos:end="79:34">++</operator></expr></incr>)</control> <block pos:start="79:37" pos:end="119:5">{<block_content pos:start="81:9" pos:end="117:9">

        <expr_stmt pos:start="81:9" pos:end="81:55"><expr pos:start="81:9" pos:end="81:54"><call pos:start="81:9" pos:end="81:54"><name pos:start="81:9" pos:end="81:30">ACPI_READ_TABLE_HEADER</name><argument_list pos:start="81:31" pos:end="81:54">(<argument pos:start="81:32" pos:end="81:42"><expr pos:start="81:32" pos:end="81:42"><operator pos:start="81:32" pos:end="81:32">&amp;</operator><name pos:start="81:33" pos:end="81:42">ssdt_table</name></expr></argument>, <argument pos:start="81:45" pos:end="81:53"><expr pos:start="81:45" pos:end="81:53"><name pos:start="81:45" pos:end="81:53"><name pos:start="81:45" pos:end="81:50">tables</name><index pos:start="81:51" pos:end="81:53">[<expr pos:start="81:52" pos:end="81:52"><name pos:start="81:52" pos:end="81:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="117:9"><if pos:start="83:9" pos:end="117:9">if <condition pos:start="83:12" pos:end="83:68">(<expr pos:start="83:13" pos:end="83:67"><operator pos:start="83:13" pos:end="83:13">!</operator><call pos:start="83:14" pos:end="83:67"><name pos:start="83:14" pos:end="83:20">strncmp</name><argument_list pos:start="83:21" pos:end="83:67">(<argument pos:start="83:22" pos:end="83:52"><expr pos:start="83:22" pos:end="83:52"><operator pos:start="83:22" pos:end="83:22">(</operator><name pos:start="83:23" pos:end="83:26">char</name> <operator pos:start="83:28" pos:end="83:28">*</operator><operator pos:start="83:29" pos:end="83:29">)</operator><name pos:start="83:30" pos:end="83:52"><name pos:start="83:30" pos:end="83:39">ssdt_table</name><operator pos:start="83:40" pos:end="83:40">.</operator><name pos:start="83:41" pos:end="83:52">oem_table_id</name></name></expr></argument>, <argument pos:start="83:55" pos:end="83:63"><expr pos:start="83:55" pos:end="83:63"><literal type="string" pos:start="83:55" pos:end="83:63">"VMGENID"</literal></expr></argument>, <argument pos:start="83:66" pos:end="83:66"><expr pos:start="83:66" pos:end="83:66"><literal type="number" pos:start="83:66" pos:end="83:66">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:70" pos:end="117:9">{<block_content pos:start="91:13" pos:end="115:18">

            <comment type="block" pos:start="85:13" pos:end="89:15">/* the first entry in the table should be VGIA

             * That's all we need

             */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:59"><expr pos:start="91:13" pos:end="91:58"><call pos:start="91:13" pos:end="91:58"><name pos:start="91:13" pos:end="91:27">ACPI_READ_FIELD</name><argument_list pos:start="91:28" pos:end="91:58">(<argument pos:start="91:29" pos:end="91:46"><expr pos:start="91:29" pos:end="91:46"><name pos:start="91:29" pos:end="91:46"><name pos:start="91:29" pos:end="91:38">vgid_table</name><operator pos:start="91:39" pos:end="91:39">.</operator><name pos:start="91:40" pos:end="91:46">name_op</name></name></expr></argument>, <argument pos:start="91:49" pos:end="91:57"><expr pos:start="91:49" pos:end="91:57"><name pos:start="91:49" pos:end="91:57"><name pos:start="91:49" pos:end="91:54">tables</name><index pos:start="91:55" pos:end="91:57">[<expr pos:start="91:56" pos:end="91:56"><name pos:start="91:56" pos:end="91:56">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:49"><expr pos:start="93:13" pos:end="93:48"><call pos:start="93:13" pos:end="93:48"><name pos:start="93:13" pos:end="93:20">g_assert</name><argument_list pos:start="93:21" pos:end="93:48">(<argument pos:start="93:22" pos:end="93:47"><expr pos:start="93:22" pos:end="93:47"><name pos:start="93:22" pos:end="93:39"><name pos:start="93:22" pos:end="93:31">vgid_table</name><operator pos:start="93:32" pos:end="93:32">.</operator><name pos:start="93:33" pos:end="93:39">name_op</name></name> <operator pos:start="93:41" pos:end="93:42">==</operator> <literal type="number" pos:start="93:44" pos:end="93:47">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="93:52" pos:end="93:61">/* name */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:56"><expr pos:start="95:13" pos:end="95:55"><call pos:start="95:13" pos:end="95:55"><name pos:start="95:13" pos:end="95:27">ACPI_READ_ARRAY</name><argument_list pos:start="95:28" pos:end="95:55">(<argument pos:start="95:29" pos:end="95:43"><expr pos:start="95:29" pos:end="95:43"><name pos:start="95:29" pos:end="95:43"><name pos:start="95:29" pos:end="95:38">vgid_table</name><operator pos:start="95:39" pos:end="95:39">.</operator><name pos:start="95:40" pos:end="95:43">vgia</name></name></expr></argument>, <argument pos:start="95:46" pos:end="95:54"><expr pos:start="95:46" pos:end="95:54"><name pos:start="95:46" pos:end="95:54"><name pos:start="95:46" pos:end="95:51">tables</name><index pos:start="95:52" pos:end="95:54">[<expr pos:start="95:53" pos:end="95:53"><name pos:start="95:53" pos:end="95:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:62"><expr pos:start="97:13" pos:end="97:61"><call pos:start="97:13" pos:end="97:61"><name pos:start="97:13" pos:end="97:20">g_assert</name><argument_list pos:start="97:21" pos:end="97:61">(<argument pos:start="97:22" pos:end="97:60"><expr pos:start="97:22" pos:end="97:60"><call pos:start="97:22" pos:end="97:55"><name pos:start="97:22" pos:end="97:27">memcmp</name><argument_list pos:start="97:28" pos:end="97:55">(<argument pos:start="97:29" pos:end="97:43"><expr pos:start="97:29" pos:end="97:43"><name pos:start="97:29" pos:end="97:43"><name pos:start="97:29" pos:end="97:38">vgid_table</name><operator pos:start="97:39" pos:end="97:39">.</operator><name pos:start="97:40" pos:end="97:43">vgia</name></name></expr></argument>, <argument pos:start="97:46" pos:end="97:51"><expr pos:start="97:46" pos:end="97:51"><literal type="string" pos:start="97:46" pos:end="97:51">"VGIA"</literal></expr></argument>, <argument pos:start="97:54" pos:end="97:54"><expr pos:start="97:54" pos:end="97:54"><literal type="number" pos:start="97:54" pos:end="97:54">4</literal></expr></argument>)</argument_list></call> <operator pos:start="97:57" pos:end="97:58">==</operator> <literal type="number" pos:start="97:60" pos:end="97:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:58"><expr pos:start="99:13" pos:end="99:57"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:27">ACPI_READ_FIELD</name><argument_list pos:start="99:28" pos:end="99:57">(<argument pos:start="99:29" pos:end="99:45"><expr pos:start="99:29" pos:end="99:45"><name pos:start="99:29" pos:end="99:45"><name pos:start="99:29" pos:end="99:38">vgid_table</name><operator pos:start="99:39" pos:end="99:39">.</operator><name pos:start="99:40" pos:end="99:45">val_op</name></name></expr></argument>, <argument pos:start="99:48" pos:end="99:56"><expr pos:start="99:48" pos:end="99:56"><name pos:start="99:48" pos:end="99:56"><name pos:start="99:48" pos:end="99:53">tables</name><index pos:start="99:54" pos:end="99:56">[<expr pos:start="99:55" pos:end="99:55"><name pos:start="99:55" pos:end="99:55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:48"><expr pos:start="101:13" pos:end="101:47"><call pos:start="101:13" pos:end="101:47"><name pos:start="101:13" pos:end="101:20">g_assert</name><argument_list pos:start="101:21" pos:end="101:47">(<argument pos:start="101:22" pos:end="101:46"><expr pos:start="101:22" pos:end="101:46"><name pos:start="101:22" pos:end="101:38"><name pos:start="101:22" pos:end="101:31">vgid_table</name><operator pos:start="101:32" pos:end="101:32">.</operator><name pos:start="101:33" pos:end="101:38">val_op</name></name> <operator pos:start="101:40" pos:end="101:41">==</operator> <literal type="number" pos:start="101:43" pos:end="101:46">0x0C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="101:51" pos:end="101:61">/* dword */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:60"><expr pos:start="103:13" pos:end="103:59"><call pos:start="103:13" pos:end="103:59"><name pos:start="103:13" pos:end="103:27">ACPI_READ_FIELD</name><argument_list pos:start="103:28" pos:end="103:59">(<argument pos:start="103:29" pos:end="103:47"><expr pos:start="103:29" pos:end="103:47"><name pos:start="103:29" pos:end="103:47"><name pos:start="103:29" pos:end="103:38">vgid_table</name><operator pos:start="103:39" pos:end="103:39">.</operator><name pos:start="103:40" pos:end="103:47">vgia_val</name></name></expr></argument>, <argument pos:start="103:50" pos:end="103:58"><expr pos:start="103:50" pos:end="103:58"><name pos:start="103:50" pos:end="103:58"><name pos:start="103:50" pos:end="103:55">tables</name><index pos:start="103:56" pos:end="103:58">[<expr pos:start="103:57" pos:end="103:57"><name pos:start="103:57" pos:end="103:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="105:13" pos:end="111:15">/* The GUID is written at a fixed offset into the fw_cfg file

             * in order to implement the "OVMF SDT Header probe suppressor"

             * see docs/specs/vmgenid.txt for more details

             */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:68"><expr pos:start="113:13" pos:end="113:67"><name pos:start="113:13" pos:end="113:23">guid_offset</name> <operator pos:start="113:25" pos:end="113:25">=</operator> <name pos:start="113:27" pos:end="113:45"><name pos:start="113:27" pos:end="113:36">vgid_table</name><operator pos:start="113:37" pos:end="113:37">.</operator><name pos:start="113:38" pos:end="113:45">vgia_val</name></name> <operator pos:start="113:47" pos:end="113:47">+</operator> <name pos:start="113:49" pos:end="113:67">VMGENID_GUID_OFFSET</name></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="121:5" pos:end="121:19"><expr pos:start="121:5" pos:end="121:18"><call pos:start="121:5" pos:end="121:18"><name pos:start="121:5" pos:end="121:10">g_free</name><argument_list pos:start="121:11" pos:end="121:18">(<argument pos:start="121:12" pos:end="121:17"><expr pos:start="121:12" pos:end="121:17"><name pos:start="121:12" pos:end="121:17">tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:23">return <expr pos:start="123:12" pos:end="123:22"><name pos:start="123:12" pos:end="123:22">guid_offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
