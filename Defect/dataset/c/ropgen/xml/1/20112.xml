<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20112.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">aarch64_numa_cpu</name><parameter_list pos:start="1:29" pos:end="1:46">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:41"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:16">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">cli</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">QDict</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:15">resp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">QList</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:15">cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">QObject</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">e</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="21:43"><expr pos:start="15:5" pos:end="21:42"><name pos:start="15:5" pos:end="15:7">cli</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="21:42"><name pos:start="15:11" pos:end="15:18">make_cli</name><argument_list pos:start="15:19" pos:end="21:42">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">data</name></expr></argument>, <argument pos:start="15:26" pos:end="21:41"><expr pos:start="15:26" pos:end="21:41"><literal type="string" pos:start="15:26" pos:end="15:34">"-smp 2 "</literal>

        <literal type="string" pos:start="17:9" pos:end="17:50">"-numa node,nodeid=0 -numa node,nodeid=1 "</literal>

        <literal type="string" pos:start="19:9" pos:end="19:42">"-numa cpu,node-id=1,thread-id=0 "</literal>

        <literal type="string" pos:start="21:9" pos:end="21:41">"-numa cpu,node-id=0,thread-id=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><call pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:15">qtest_start</name><argument_list pos:start="23:16" pos:end="23:20">(<argument pos:start="23:17" pos:end="23:19"><expr pos:start="23:17" pos:end="23:19"><name pos:start="23:17" pos:end="23:19">cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:8">cpus</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <call pos:start="25:12" pos:end="25:26"><name pos:start="25:12" pos:end="25:19">get_cpus</name><argument_list pos:start="25:20" pos:end="25:26">(<argument pos:start="25:21" pos:end="25:25"><expr pos:start="25:21" pos:end="25:25"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:25">resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><call pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:12">g_assert</name><argument_list pos:start="27:13" pos:end="27:18">(<argument pos:start="27:14" pos:end="27:17"><expr pos:start="27:14" pos:end="27:17"><name pos:start="27:14" pos:end="27:17">cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="31:5" pos:end="71:5">while <condition pos:start="31:11" pos:end="31:33">(<expr pos:start="31:12" pos:end="31:32"><operator pos:start="31:12" pos:end="31:12">(</operator><name pos:start="31:13" pos:end="31:13">e</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:31"><name pos:start="31:17" pos:end="31:25">qlist_pop</name><argument_list pos:start="31:26" pos:end="31:31">(<argument pos:start="31:27" pos:end="31:30"><expr pos:start="31:27" pos:end="31:30"><name pos:start="31:27" pos:end="31:30">cpus</name></expr></argument>)</argument_list></call><operator pos:start="31:32" pos:end="31:32">)</operator></expr>)</condition> <block pos:start="31:35" pos:end="71:5">{<block_content pos:start="33:9" pos:end="69:9">

        <decl_stmt pos:start="33:9" pos:end="33:27"><decl pos:start="33:9" pos:end="33:18"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:13">QDict</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:18">cpu</name></decl>, <decl pos:start="33:21" pos:end="33:26"><type ref="prev" pos:start="33:9" pos:end="33:15"><modifier pos:start="33:21" pos:end="33:21">*</modifier></type><name pos:start="33:22" pos:end="33:26">props</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:29"><decl pos:start="35:9" pos:end="35:22"><type pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">int64_t</name></type> <name pos:start="35:17" pos:end="35:22">thread</name></decl>, <decl pos:start="35:25" pos:end="35:28"><type ref="prev" pos:start="35:9" pos:end="35:15"/><name pos:start="35:25" pos:end="35:28">node</name></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:11">cpu</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:33"><name pos:start="39:15" pos:end="39:30">qobject_to_qdict</name><argument_list pos:start="39:31" pos:end="39:33">(<argument pos:start="39:32" pos:end="39:32"><expr pos:start="39:32" pos:end="39:32"><name pos:start="39:32" pos:end="39:32">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><call pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:16">g_assert</name><argument_list pos:start="41:17" pos:end="41:44">(<argument pos:start="41:18" pos:end="41:43"><expr pos:start="41:18" pos:end="41:43"><call pos:start="41:18" pos:end="41:43"><name pos:start="41:18" pos:end="41:29">qdict_haskey</name><argument_list pos:start="41:30" pos:end="41:43">(<argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">cpu</name></expr></argument>, <argument pos:start="41:36" pos:end="41:42"><expr pos:start="41:36" pos:end="41:42"><literal type="string" pos:start="41:36" pos:end="41:42">"props"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:13">props</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:45"><name pos:start="43:17" pos:end="43:31">qdict_get_qdict</name><argument_list pos:start="43:32" pos:end="43:45">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">cpu</name></expr></argument>, <argument pos:start="43:38" pos:end="43:44"><expr pos:start="43:38" pos:end="43:44"><literal type="string" pos:start="43:38" pos:end="43:44">"props"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:49"><expr pos:start="47:9" pos:end="47:48"><call pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:16">g_assert</name><argument_list pos:start="47:17" pos:end="47:48">(<argument pos:start="47:18" pos:end="47:47"><expr pos:start="47:18" pos:end="47:47"><call pos:start="47:18" pos:end="47:47"><name pos:start="47:18" pos:end="47:29">qdict_haskey</name><argument_list pos:start="47:30" pos:end="47:47">(<argument pos:start="47:31" pos:end="47:35"><expr pos:start="47:31" pos:end="47:35"><name pos:start="47:31" pos:end="47:35">props</name></expr></argument>, <argument pos:start="47:38" pos:end="47:46"><expr pos:start="47:38" pos:end="47:46"><literal type="string" pos:start="47:38" pos:end="47:46">"node-id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:47"><expr pos:start="49:9" pos:end="49:46"><name pos:start="49:9" pos:end="49:12">node</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:46"><name pos:start="49:16" pos:end="49:28">qdict_get_int</name><argument_list pos:start="49:29" pos:end="49:46">(<argument pos:start="49:30" pos:end="49:34"><expr pos:start="49:30" pos:end="49:34"><name pos:start="49:30" pos:end="49:34">props</name></expr></argument>, <argument pos:start="49:37" pos:end="49:45"><expr pos:start="49:37" pos:end="49:45"><literal type="string" pos:start="49:37" pos:end="49:45">"node-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><call pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:50">(<argument pos:start="51:18" pos:end="51:49"><expr pos:start="51:18" pos:end="51:49"><call pos:start="51:18" pos:end="51:49"><name pos:start="51:18" pos:end="51:29">qdict_haskey</name><argument_list pos:start="51:30" pos:end="51:49">(<argument pos:start="51:31" pos:end="51:35"><expr pos:start="51:31" pos:end="51:35"><name pos:start="51:31" pos:end="51:35">props</name></expr></argument>, <argument pos:start="51:38" pos:end="51:48"><expr pos:start="51:38" pos:end="51:48"><literal type="string" pos:start="51:38" pos:end="51:48">"thread-id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:14">thread</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:50"><name pos:start="53:18" pos:end="53:30">qdict_get_int</name><argument_list pos:start="53:31" pos:end="53:50">(<argument pos:start="53:32" pos:end="53:36"><expr pos:start="53:32" pos:end="53:36"><name pos:start="53:32" pos:end="53:36">props</name></expr></argument>, <argument pos:start="53:39" pos:end="53:49"><expr pos:start="53:39" pos:end="53:49"><literal type="string" pos:start="53:39" pos:end="53:49">"thread-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:24">(<expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:18">thread</name> <operator pos:start="57:20" pos:end="57:21">==</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition> <block pos:start="57:26" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:41">

            <expr_stmt pos:start="59:13" pos:end="59:41"><expr pos:start="59:13" pos:end="59:40"><call pos:start="59:13" pos:end="59:40"><name pos:start="59:13" pos:end="59:27">g_assert_cmpint</name><argument_list pos:start="59:28" pos:end="59:40">(<argument pos:start="59:29" pos:end="59:32"><expr pos:start="59:29" pos:end="59:32"><name pos:start="59:29" pos:end="59:32">node</name></expr></argument>, <argument pos:start="59:35" pos:end="59:36"><expr pos:start="59:35" pos:end="59:36"><operator pos:start="59:35" pos:end="59:36">==</operator></expr></argument>, <argument pos:start="59:39" pos:end="59:39"><expr pos:start="59:39" pos:end="59:39"><literal type="number" pos:start="59:39" pos:end="59:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="65:9">else if <condition pos:start="61:19" pos:end="61:31">(<expr pos:start="61:20" pos:end="61:30"><name pos:start="61:20" pos:end="61:25">thread</name> <operator pos:start="61:27" pos:end="61:28">==</operator> <literal type="number" pos:start="61:30" pos:end="61:30">1</literal></expr>)</condition> <block pos:start="61:33" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:41">

            <expr_stmt pos:start="63:13" pos:end="63:41"><expr pos:start="63:13" pos:end="63:40"><call pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:27">g_assert_cmpint</name><argument_list pos:start="63:28" pos:end="63:40">(<argument pos:start="63:29" pos:end="63:32"><expr pos:start="63:29" pos:end="63:32"><name pos:start="63:29" pos:end="63:32">node</name></expr></argument>, <argument pos:start="63:35" pos:end="63:36"><expr pos:start="63:35" pos:end="63:36"><operator pos:start="63:35" pos:end="63:36">==</operator></expr></argument>, <argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:28">

            <expr_stmt pos:start="67:13" pos:end="67:28"><expr pos:start="67:13" pos:end="67:27"><call pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:20">g_assert</name><argument_list pos:start="67:21" pos:end="67:27">(<argument pos:start="67:22" pos:end="67:26"><expr pos:start="67:22" pos:end="67:26"><name pos:start="67:22" pos:end="67:26">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="75:5" pos:end="75:18"><expr pos:start="75:5" pos:end="75:17"><call pos:start="75:5" pos:end="75:17"><name pos:start="75:5" pos:end="75:11">QDECREF</name><argument_list pos:start="75:12" pos:end="75:17">(<argument pos:start="75:13" pos:end="75:16"><expr pos:start="75:13" pos:end="75:16"><name pos:start="75:13" pos:end="75:16">resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:16"><expr pos:start="77:5" pos:end="77:15"><call pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:13">qtest_end</name><argument_list pos:start="77:14" pos:end="77:15">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:16"><expr pos:start="79:5" pos:end="79:15"><call pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:10">g_free</name><argument_list pos:start="79:11" pos:end="79:15">(<argument pos:start="79:12" pos:end="79:14"><expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
