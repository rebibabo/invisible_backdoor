<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10426.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">iscsi_readcapacity_sync</name><parameter_list pos:start="1:35" pos:end="1:54">(<parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:45"><name pos:start="1:36" pos:end="1:43">IscsiLun</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">iscsilun</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:20">scsi_task</name></name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:26">task</name> <init pos:start="5:28" pos:end="5:33">= <expr pos:start="5:30" pos:end="5:33"><name pos:start="5:30" pos:end="5:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:32"><name pos:start="7:5" pos:end="7:30"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:30">scsi_readcapacity10</name></name> <modifier pos:start="7:32" pos:end="7:32">*</modifier></type><name pos:start="7:33" pos:end="7:36">rc10</name> <init pos:start="7:38" pos:end="7:43">= <expr pos:start="7:40" pos:end="7:43"><name pos:start="7:40" pos:end="7:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:32"><name pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:30">scsi_readcapacity16</name></name> <modifier pos:start="9:32" pos:end="9:32">*</modifier></type><name pos:start="9:33" pos:end="9:36">rc16</name> <init pos:start="9:38" pos:end="9:43">= <expr pos:start="9:40" pos:end="9:43"><name pos:start="9:40" pos:end="9:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">retries</name> <init pos:start="13:17" pos:end="13:35">= <expr pos:start="13:19" pos:end="13:35"><name pos:start="13:19" pos:end="13:35">ISCSI_CMD_RETRIES</name></expr></init></decl>;</decl_stmt> 



    <do pos:start="17:5" pos:end="107:31">do <block pos:start="17:8" pos:end="103:5">{<block_content pos:start="19:9" pos:end="101:9">

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:25">(<expr pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:16">task</name> <operator pos:start="19:18" pos:end="19:19">!=</operator> <name pos:start="19:21" pos:end="19:24">NULL</name></expr>)</condition> <block pos:start="19:27" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:24">

            <expr_stmt pos:start="21:13" pos:end="21:38"><expr pos:start="21:13" pos:end="21:37"><call pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:31">scsi_free_scsi_task</name><argument_list pos:start="21:32" pos:end="21:37">(<argument pos:start="21:33" pos:end="21:36"><expr pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:36">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:24"><expr pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:16">task</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:23">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="29:9" pos:end="101:9">switch <condition pos:start="29:16" pos:end="29:31">(<expr pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:24">iscsilun</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:30">type</name></name></expr>)</condition> <block pos:start="29:33" pos:end="101:9">{<block_content pos:start="31:9" pos:end="99:21">

        <case pos:start="31:9" pos:end="31:23">case <expr pos:start="31:14" pos:end="31:22"><name pos:start="31:14" pos:end="31:22">TYPE_DISK</name></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:77"><expr pos:start="33:13" pos:end="33:76"><name pos:start="33:13" pos:end="33:16">task</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:76"><name pos:start="33:20" pos:end="33:44">iscsi_readcapacity16_sync</name><argument_list pos:start="33:45" pos:end="33:76">(<argument pos:start="33:46" pos:end="33:60"><expr pos:start="33:46" pos:end="33:60"><name pos:start="33:46" pos:end="33:60"><name pos:start="33:46" pos:end="33:53">iscsilun</name><operator pos:start="33:54" pos:end="33:55">-&gt;</operator><name pos:start="33:56" pos:end="33:60">iscsi</name></name></expr></argument>, <argument pos:start="33:63" pos:end="33:75"><expr pos:start="33:63" pos:end="33:75"><name pos:start="33:63" pos:end="33:75"><name pos:start="33:63" pos:end="33:70">iscsilun</name><operator pos:start="33:71" pos:end="33:72">-&gt;</operator><name pos:start="33:73" pos:end="33:75">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="57:13"><if pos:start="35:13" pos:end="57:13">if <condition pos:start="35:16" pos:end="35:65">(<expr pos:start="35:17" pos:end="35:64"><name pos:start="35:17" pos:end="35:20">task</name> <operator pos:start="35:22" pos:end="35:23">!=</operator> <name pos:start="35:25" pos:end="35:28">NULL</name> <operator pos:start="35:30" pos:end="35:31">&amp;&amp;</operator> <name pos:start="35:33" pos:end="35:44"><name pos:start="35:33" pos:end="35:36">task</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:44">status</name></name> <operator pos:start="35:46" pos:end="35:47">==</operator> <name pos:start="35:49" pos:end="35:64">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="35:67" pos:end="57:13">{<block_content pos:start="37:17" pos:end="55:17">

                <expr_stmt pos:start="37:17" pos:end="37:52"><expr pos:start="37:17" pos:end="37:51"><name pos:start="37:17" pos:end="37:20">rc16</name> <operator pos:start="37:22" pos:end="37:22">=</operator> <call pos:start="37:24" pos:end="37:51"><name pos:start="37:24" pos:end="37:45">scsi_datain_unmarshall</name><argument_list pos:start="37:46" pos:end="37:51">(<argument pos:start="37:47" pos:end="37:50"><expr pos:start="37:47" pos:end="37:50"><name pos:start="37:47" pos:end="37:50">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="39:17" pos:end="55:17"><if pos:start="39:17" pos:end="45:17">if <condition pos:start="39:20" pos:end="39:33">(<expr pos:start="39:21" pos:end="39:32"><name pos:start="39:21" pos:end="39:24">rc16</name> <operator pos:start="39:26" pos:end="39:27">==</operator> <name pos:start="39:29" pos:end="39:32">NULL</name></expr>)</condition> <block pos:start="39:35" pos:end="45:17">{<block_content pos:start="41:21" pos:end="43:34">

                    <expr_stmt pos:start="41:21" pos:end="41:85"><expr pos:start="41:21" pos:end="41:84"><call pos:start="41:21" pos:end="41:84"><name pos:start="41:21" pos:end="41:32">error_report</name><argument_list pos:start="41:33" pos:end="41:84">(<argument pos:start="41:34" pos:end="41:83"><expr pos:start="41:34" pos:end="41:83"><literal type="string" pos:start="41:34" pos:end="41:83">"iSCSI: Failed to unmarshall readcapacity16 data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="43:21" pos:end="43:34"><expr pos:start="43:21" pos:end="43:33"><name pos:start="43:21" pos:end="43:23">ret</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <operator pos:start="43:27" pos:end="43:27">-</operator><name pos:start="43:28" pos:end="43:33">EINVAL</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="45:19" pos:end="55:17">else <block pos:start="45:24" pos:end="55:17">{<block_content pos:start="47:21" pos:end="53:50">

                    <expr_stmt pos:start="47:21" pos:end="47:62"><expr pos:start="47:21" pos:end="47:61"><name pos:start="47:21" pos:end="47:40"><name pos:start="47:21" pos:end="47:28">iscsilun</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:40">block_size</name></name> <operator pos:start="47:42" pos:end="47:42">=</operator> <name pos:start="47:44" pos:end="47:61"><name pos:start="47:44" pos:end="47:47">rc16</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:61">block_length</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:66"><expr pos:start="49:21" pos:end="49:65"><name pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:28">iscsilun</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:40">num_blocks</name></name> <operator pos:start="49:42" pos:end="49:42">=</operator> <name pos:start="49:44" pos:end="49:61"><name pos:start="49:44" pos:end="49:47">rc16</name><operator pos:start="49:48" pos:end="49:49">-&gt;</operator><name pos:start="49:50" pos:end="49:61">returned_lba</name></name> <operator pos:start="49:63" pos:end="49:63">+</operator> <literal type="number" pos:start="49:65" pos:end="49:65">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="51:21" pos:end="51:50"><expr pos:start="51:21" pos:end="51:49"><name pos:start="51:21" pos:end="51:35"><name pos:start="51:21" pos:end="51:28">iscsilun</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:35">lbpme</name></name> <operator pos:start="51:37" pos:end="51:37">=</operator> <name pos:start="51:39" pos:end="51:49"><name pos:start="51:39" pos:end="51:42">rc16</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:49">lbpme</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="53:21" pos:end="53:50"><expr pos:start="53:21" pos:end="53:49"><name pos:start="53:21" pos:end="53:35"><name pos:start="53:21" pos:end="53:28">iscsilun</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:35">lbprz</name></name> <operator pos:start="53:37" pos:end="53:37">=</operator> <name pos:start="53:39" pos:end="53:49"><name pos:start="53:39" pos:end="53:42">rc16</name><operator pos:start="53:43" pos:end="53:44">-&gt;</operator><name pos:start="53:45" pos:end="53:49">lbprz</name></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        <case pos:start="61:9" pos:end="61:22">case <expr pos:start="61:14" pos:end="61:21"><name pos:start="61:14" pos:end="61:21">TYPE_ROM</name></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="63:83"><expr pos:start="63:13" pos:end="63:82"><name pos:start="63:13" pos:end="63:16">task</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:82"><name pos:start="63:20" pos:end="63:44">iscsi_readcapacity10_sync</name><argument_list pos:start="63:45" pos:end="63:82">(<argument pos:start="63:46" pos:end="63:60"><expr pos:start="63:46" pos:end="63:60"><name pos:start="63:46" pos:end="63:60"><name pos:start="63:46" pos:end="63:53">iscsilun</name><operator pos:start="63:54" pos:end="63:55">-&gt;</operator><name pos:start="63:56" pos:end="63:60">iscsi</name></name></expr></argument>, <argument pos:start="63:63" pos:end="63:75"><expr pos:start="63:63" pos:end="63:75"><name pos:start="63:63" pos:end="63:75"><name pos:start="63:63" pos:end="63:70">iscsilun</name><operator pos:start="63:71" pos:end="63:72">-&gt;</operator><name pos:start="63:73" pos:end="63:75">lun</name></name></expr></argument>, <argument pos:start="63:78" pos:end="63:78"><expr pos:start="63:78" pos:end="63:78"><literal type="number" pos:start="63:78" pos:end="63:78">0</literal></expr></argument>, <argument pos:start="63:81" pos:end="63:81"><expr pos:start="63:81" pos:end="63:81"><literal type="number" pos:start="63:81" pos:end="63:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="93:13"><if pos:start="65:13" pos:end="93:13">if <condition pos:start="65:16" pos:end="65:65">(<expr pos:start="65:17" pos:end="65:64"><name pos:start="65:17" pos:end="65:20">task</name> <operator pos:start="65:22" pos:end="65:23">!=</operator> <name pos:start="65:25" pos:end="65:28">NULL</name> <operator pos:start="65:30" pos:end="65:31">&amp;&amp;</operator> <name pos:start="65:33" pos:end="65:44"><name pos:start="65:33" pos:end="65:36">task</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:44">status</name></name> <operator pos:start="65:46" pos:end="65:47">==</operator> <name pos:start="65:49" pos:end="65:64">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="65:67" pos:end="93:13">{<block_content pos:start="67:17" pos:end="91:17">

                <expr_stmt pos:start="67:17" pos:end="67:52"><expr pos:start="67:17" pos:end="67:51"><name pos:start="67:17" pos:end="67:20">rc10</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <call pos:start="67:24" pos:end="67:51"><name pos:start="67:24" pos:end="67:45">scsi_datain_unmarshall</name><argument_list pos:start="67:46" pos:end="67:51">(<argument pos:start="67:47" pos:end="67:50"><expr pos:start="67:47" pos:end="67:50"><name pos:start="67:47" pos:end="67:50">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="69:17" pos:end="91:17"><if pos:start="69:17" pos:end="75:17">if <condition pos:start="69:20" pos:end="69:33">(<expr pos:start="69:21" pos:end="69:32"><name pos:start="69:21" pos:end="69:24">rc10</name> <operator pos:start="69:26" pos:end="69:27">==</operator> <name pos:start="69:29" pos:end="69:32">NULL</name></expr>)</condition> <block pos:start="69:35" pos:end="75:17">{<block_content pos:start="71:21" pos:end="73:34">

                    <expr_stmt pos:start="71:21" pos:end="71:85"><expr pos:start="71:21" pos:end="71:84"><call pos:start="71:21" pos:end="71:84"><name pos:start="71:21" pos:end="71:32">error_report</name><argument_list pos:start="71:33" pos:end="71:84">(<argument pos:start="71:34" pos:end="71:83"><expr pos:start="71:34" pos:end="71:83"><literal type="string" pos:start="71:34" pos:end="71:83">"iSCSI: Failed to unmarshall readcapacity10 data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="73:21" pos:end="73:34"><expr pos:start="73:21" pos:end="73:33"><name pos:start="73:21" pos:end="73:23">ret</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <operator pos:start="73:27" pos:end="73:27">-</operator><name pos:start="73:28" pos:end="73:33">EINVAL</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="75:19" pos:end="91:17">else <block pos:start="75:24" pos:end="91:17">{<block_content pos:start="77:21" pos:end="89:21">

                    <expr_stmt pos:start="77:21" pos:end="77:60"><expr pos:start="77:21" pos:end="77:59"><name pos:start="77:21" pos:end="77:40"><name pos:start="77:21" pos:end="77:28">iscsilun</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:40">block_size</name></name> <operator pos:start="77:42" pos:end="77:42">=</operator> <name pos:start="77:44" pos:end="77:59"><name pos:start="77:44" pos:end="77:47">rc10</name><operator pos:start="77:48" pos:end="77:49">-&gt;</operator><name pos:start="77:50" pos:end="77:59">block_size</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="79:21" pos:end="89:21"><if pos:start="79:21" pos:end="85:21">if <condition pos:start="79:24" pos:end="79:39">(<expr pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:33"><name pos:start="79:25" pos:end="79:28">rc10</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:33">lba</name></name> <operator pos:start="79:35" pos:end="79:36">==</operator> <literal type="number" pos:start="79:38" pos:end="79:38">0</literal></expr>)</condition> <block pos:start="79:41" pos:end="85:21">{<block_content pos:start="83:25" pos:end="83:49">

                        <comment type="block" pos:start="81:25" pos:end="81:47">/* blank disk loaded */</comment>

                        <expr_stmt pos:start="83:25" pos:end="83:49"><expr pos:start="83:25" pos:end="83:48"><name pos:start="83:25" pos:end="83:44"><name pos:start="83:25" pos:end="83:32">iscsilun</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:44">num_blocks</name></name> <operator pos:start="83:46" pos:end="83:46">=</operator> <literal type="number" pos:start="83:48" pos:end="83:48">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="85:23" pos:end="89:21">else <block pos:start="85:28" pos:end="89:21">{<block_content pos:start="87:25" pos:end="87:61">

                        <expr_stmt pos:start="87:25" pos:end="87:61"><expr pos:start="87:25" pos:end="87:60"><name pos:start="87:25" pos:end="87:44"><name pos:start="87:25" pos:end="87:32">iscsilun</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:44">num_blocks</name></name> <operator pos:start="87:46" pos:end="87:46">=</operator> <name pos:start="87:48" pos:end="87:56"><name pos:start="87:48" pos:end="87:51">rc10</name><operator pos:start="87:52" pos:end="87:53">-&gt;</operator><name pos:start="87:54" pos:end="87:56">lba</name></name> <operator pos:start="87:58" pos:end="87:58">+</operator> <literal type="number" pos:start="87:60" pos:end="87:60">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <default pos:start="97:9" pos:end="97:16">default:</default>

            <return pos:start="99:13" pos:end="99:21">return <expr pos:start="99:20" pos:end="99:20"><literal type="number" pos:start="99:20" pos:end="99:20">0</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block> while <condition pos:start="103:13" pos:end="107:30">(<expr pos:start="103:14" pos:end="107:29"><name pos:start="103:14" pos:end="103:17">task</name> <operator pos:start="103:19" pos:end="103:20">!=</operator> <name pos:start="103:22" pos:end="103:25">NULL</name> <operator pos:start="103:27" pos:end="103:28">&amp;&amp;</operator> <name pos:start="103:30" pos:end="103:41"><name pos:start="103:30" pos:end="103:33">task</name><operator pos:start="103:34" pos:end="103:35">-&gt;</operator><name pos:start="103:36" pos:end="103:41">status</name></name> <operator pos:start="103:43" pos:end="103:44">==</operator> <name pos:start="103:46" pos:end="103:72">SCSI_STATUS_CHECK_CONDITION</name>

             <operator pos:start="105:14" pos:end="105:15">&amp;&amp;</operator> <name pos:start="105:17" pos:end="105:31"><name pos:start="105:17" pos:end="105:20">task</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:27">sense</name><operator pos:start="105:28" pos:end="105:28">.</operator><name pos:start="105:29" pos:end="105:31">key</name></name> <operator pos:start="105:33" pos:end="105:34">==</operator> <name pos:start="105:36" pos:end="105:60">SCSI_SENSE_UNIT_ATTENTION</name>

             <operator pos:start="107:14" pos:end="107:15">&amp;&amp;</operator> <name pos:start="107:17" pos:end="107:23">retries</name><operator pos:start="107:24" pos:end="107:25">--</operator> <operator pos:start="107:27" pos:end="107:27">&gt;</operator> <literal type="number" pos:start="107:29" pos:end="107:29">0</literal></expr>)</condition>;</do>



    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:57">(<expr pos:start="111:9" pos:end="111:56"><name pos:start="111:9" pos:end="111:12">task</name> <operator pos:start="111:14" pos:end="111:15">==</operator> <name pos:start="111:17" pos:end="111:20">NULL</name> <operator pos:start="111:22" pos:end="111:23">||</operator> <name pos:start="111:25" pos:end="111:36"><name pos:start="111:25" pos:end="111:28">task</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:36">status</name></name> <operator pos:start="111:38" pos:end="111:39">!=</operator> <name pos:start="111:41" pos:end="111:56">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="111:59" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:22">

        <expr_stmt pos:start="113:9" pos:end="113:70"><expr pos:start="113:9" pos:end="113:69"><call pos:start="113:9" pos:end="113:69"><name pos:start="113:9" pos:end="113:20">error_report</name><argument_list pos:start="113:21" pos:end="113:69">(<argument pos:start="113:22" pos:end="113:68"><expr pos:start="113:22" pos:end="113:68"><literal type="string" pos:start="113:22" pos:end="113:68">"iSCSI: failed to send readcapacity10 command."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:22"><expr pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <operator pos:start="115:15" pos:end="115:15">-</operator><name pos:start="115:16" pos:end="115:21">EINVAL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:13">(<expr pos:start="119:9" pos:end="119:12"><name pos:start="119:9" pos:end="119:12">task</name></expr>)</condition> <block pos:start="119:15" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:34">

        <expr_stmt pos:start="121:9" pos:end="121:34"><expr pos:start="121:9" pos:end="121:33"><call pos:start="121:9" pos:end="121:33"><name pos:start="121:9" pos:end="121:27">scsi_free_scsi_task</name><argument_list pos:start="121:28" pos:end="121:33">(<argument pos:start="121:29" pos:end="121:32"><expr pos:start="121:29" pos:end="121:32"><name pos:start="121:29" pos:end="121:32">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="125:5" pos:end="125:15">return <expr pos:start="125:12" pos:end="125:14"><name pos:start="125:12" pos:end="125:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
