<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24474.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">vscsi_srp_indirect_data</name><parameter_list pos:start="1:35" pos:end="3:62">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">VSCSIState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:64"><decl pos:start="1:51" pos:end="1:64"><type pos:start="1:51" pos:end="1:64"><name pos:start="1:51" pos:end="1:59">vscsi_req</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">req</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:47"><decl pos:start="3:36" pos:end="3:47"><type pos:start="3:36" pos:end="3:47"><name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:47">buf</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:61"><decl pos:start="3:50" pos:end="3:61"><type pos:start="3:50" pos:end="3:61"><name pos:start="3:50" pos:end="3:57">uint32_t</name></type> <name pos:start="3:59" pos:end="3:61">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="137:1">{<block_content pos:start="7:5" pos:end="135:27">

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:25">srp_direct_buf</name></name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:29">td</name> <init pos:start="7:31" pos:end="7:58">= <expr pos:start="7:33" pos:end="7:58"><operator pos:start="7:33" pos:end="7:33">&amp;</operator><name pos:start="7:34" pos:end="7:58"><name pos:start="7:34" pos:end="7:36">req</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:46">ind_desc</name><operator pos:start="7:47" pos:end="7:48">-&gt;</operator><name pos:start="7:49" pos:end="7:58">table_desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:25">srp_direct_buf</name></name> <modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:29">md</name> <init pos:start="9:31" pos:end="9:45">= <expr pos:start="9:33" pos:end="9:45"><name pos:start="9:33" pos:end="9:45"><name pos:start="9:33" pos:end="9:35">req</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:45">cur_desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name> <init pos:start="11:12" pos:end="11:14">= <expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">llen</name></decl>, <decl pos:start="13:20" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:20" pos:end="13:24">total</name> <init pos:start="13:26" pos:end="13:28">= <expr pos:start="13:28" pos:end="13:28"><literal type="number" pos:start="13:28" pos:end="13:28">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:54"><expr pos:start="17:5" pos:end="19:53"><call pos:start="17:5" pos:end="19:53"><name pos:start="17:5" pos:end="17:11">dprintf</name><argument_list pos:start="17:12" pos:end="19:53">(<argument pos:start="17:13" pos:end="17:73"><expr pos:start="17:13" pos:end="17:73"><literal type="string" pos:start="17:13" pos:end="17:73">"VSCSI: indirect segment 0x%x bytes, td va=0x%llx len=0x%x\n"</literal></expr></argument>,

            <argument pos:start="19:13" pos:end="19:15"><expr pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">len</name></expr></argument>, <argument pos:start="19:18" pos:end="19:43"><expr pos:start="19:18" pos:end="19:43"><operator pos:start="19:18" pos:end="19:18">(</operator><name pos:start="19:19" pos:end="19:26">unsigned</name> <name pos:start="19:28" pos:end="19:31">long</name> <name pos:start="19:33" pos:end="19:36">long</name><operator pos:start="19:37" pos:end="19:37">)</operator><name pos:start="19:38" pos:end="19:43"><name pos:start="19:38" pos:end="19:39">td</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:43">va</name></name></expr></argument>, <argument pos:start="19:46" pos:end="19:52"><expr pos:start="19:46" pos:end="19:52"><name pos:start="19:46" pos:end="19:52"><name pos:start="19:46" pos:end="19:47">td</name><operator pos:start="19:48" pos:end="19:49">-&gt;</operator><name pos:start="19:50" pos:end="19:52">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:32">/* While we have data ... */</comment>

    <while pos:start="25:5" pos:end="133:5">while <condition pos:start="25:11" pos:end="25:15">(<expr pos:start="25:12" pos:end="25:14"><name pos:start="25:12" pos:end="25:14">len</name></expr>)</condition> <block pos:start="25:17" pos:end="133:5">{<block_content pos:start="29:9" pos:end="131:24">

        <comment type="block" pos:start="27:9" pos:end="27:72">/* If we have a descriptor but it's empty, go fetch a new one */</comment>

        <if_stmt pos:start="29:9" pos:end="49:9"><if pos:start="29:9" pos:end="49:9">if <condition pos:start="29:12" pos:end="29:31">(<expr pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:14">md</name> <operator pos:start="29:16" pos:end="29:17">&amp;&amp;</operator> <name pos:start="29:19" pos:end="29:25"><name pos:start="29:19" pos:end="29:20">md</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:25">len</name></name> <operator pos:start="29:27" pos:end="29:28">==</operator> <literal type="number" pos:start="29:30" pos:end="29:30">0</literal></expr>)</condition> <block pos:start="29:33" pos:end="49:9">{<block_content pos:start="33:13" pos:end="47:13">

            <comment type="block" pos:start="31:13" pos:end="31:47">/* More local available, use one */</comment>

            <if_stmt pos:start="33:13" pos:end="47:13"><if pos:start="33:13" pos:end="43:13">if <condition pos:start="33:16" pos:end="33:32">(<expr pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:19">req</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:31">local_desc</name></name></expr>)</condition> <block pos:start="33:34" pos:end="43:13">{<block_content pos:start="35:17" pos:end="41:56">

                <expr_stmt pos:start="35:17" pos:end="35:37"><expr pos:start="35:17" pos:end="35:36"><name pos:start="35:17" pos:end="35:18">md</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <operator pos:start="35:22" pos:end="35:23">++</operator><name pos:start="35:24" pos:end="35:36"><name pos:start="35:24" pos:end="35:26">req</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:36">cur_desc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:34"><expr pos:start="37:17" pos:end="37:33"><operator pos:start="37:17" pos:end="37:18">--</operator><name pos:start="37:19" pos:end="37:33"><name pos:start="37:19" pos:end="37:21">req</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:33">local_desc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:34"><expr pos:start="39:17" pos:end="39:33"><operator pos:start="39:17" pos:end="39:18">--</operator><name pos:start="39:19" pos:end="39:33"><name pos:start="39:19" pos:end="39:21">req</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:33">total_desc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:56"><expr pos:start="41:17" pos:end="41:55"><name pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:18">td</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:22">va</name></name> <operator pos:start="41:24" pos:end="41:25">+=</operator> <sizeof pos:start="41:27" pos:end="41:55">sizeof<argument_list pos:start="41:33" pos:end="41:55">(<argument pos:start="41:34" pos:end="41:54"><expr pos:start="41:34" pos:end="41:54">struct <name pos:start="41:41" pos:end="41:54">srp_direct_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="47:13">else <block pos:start="43:20" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:42">

                <expr_stmt pos:start="45:17" pos:end="45:42"><expr pos:start="45:17" pos:end="45:41"><name pos:start="45:17" pos:end="45:18">md</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:34"><name pos:start="45:22" pos:end="45:24">req</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:34">cur_desc</name></name> <operator pos:start="45:36" pos:end="45:36">=</operator> <name pos:start="45:38" pos:end="45:41">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:46">/* No descriptor at hand, fetch one */</comment>

        <if_stmt pos:start="53:9" pos:end="87:9"><if pos:start="53:9" pos:end="87:9">if <condition pos:start="53:12" pos:end="53:16">(<expr pos:start="53:13" pos:end="53:15"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:15">md</name></expr>)</condition> <block pos:start="53:18" pos:end="87:9">{<block_content pos:start="55:13" pos:end="85:30">

            <if_stmt pos:start="55:13" pos:end="61:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:33">(<expr pos:start="55:17" pos:end="55:32"><operator pos:start="55:17" pos:end="55:17">!</operator><name pos:start="55:18" pos:end="55:32"><name pos:start="55:18" pos:end="55:20">req</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:32">total_desc</name></name></expr>)</condition> <block pos:start="55:35" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:22">

                <expr_stmt pos:start="57:17" pos:end="57:59"><expr pos:start="57:17" pos:end="57:58"><call pos:start="57:17" pos:end="57:58"><name pos:start="57:17" pos:end="57:23">dprintf</name><argument_list pos:start="57:24" pos:end="57:58">(<argument pos:start="57:25" pos:end="57:57"><expr pos:start="57:25" pos:end="57:57"><literal type="string" pos:start="57:25" pos:end="57:57">"VSCSI:   Out of descriptors !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:48"><expr pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:14">md</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:30"><name pos:start="63:18" pos:end="63:20">req</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:30">cur_desc</name></name> <operator pos:start="63:32" pos:end="63:32">=</operator> <operator pos:start="63:34" pos:end="63:34">&amp;</operator><name pos:start="63:35" pos:end="63:47"><name pos:start="63:35" pos:end="63:37">req</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:47">ext_desc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="67:48"><expr pos:start="65:13" pos:end="67:47"><call pos:start="65:13" pos:end="67:47"><name pos:start="65:13" pos:end="65:19">dprintf</name><argument_list pos:start="65:20" pos:end="67:47">(<argument pos:start="65:21" pos:end="65:57"><expr pos:start="65:21" pos:end="65:57"><literal type="string" pos:start="65:21" pos:end="65:57">"VSCSI:   Reading desc from 0x%llx\n"</literal></expr></argument>,

                    <argument pos:start="67:21" pos:end="67:46"><expr pos:start="67:21" pos:end="67:46"><operator pos:start="67:21" pos:end="67:21">(</operator><name pos:start="67:22" pos:end="67:29">unsigned</name> <name pos:start="67:31" pos:end="67:34">long</name> <name pos:start="67:36" pos:end="67:39">long</name><operator pos:start="67:40" pos:end="67:40">)</operator><name pos:start="67:41" pos:end="67:46"><name pos:start="67:41" pos:end="67:42">td</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:46">va</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="71:67"><expr pos:start="69:13" pos:end="71:66"><name pos:start="69:13" pos:end="69:14">rc</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="71:66"><name pos:start="69:18" pos:end="69:35">spapr_tce_dma_read</name><argument_list pos:start="69:36" pos:end="71:66">(<argument pos:start="69:37" pos:end="69:44"><expr pos:start="69:37" pos:end="69:44"><operator pos:start="69:37" pos:end="69:37">&amp;</operator><name pos:start="69:38" pos:end="69:44"><name pos:start="69:38" pos:end="69:38">s</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:44">vdev</name></name></expr></argument>, <argument pos:start="69:47" pos:end="69:52"><expr pos:start="69:47" pos:end="69:52"><name pos:start="69:47" pos:end="69:52"><name pos:start="69:47" pos:end="69:48">td</name><operator pos:start="69:49" pos:end="69:50">-&gt;</operator><name pos:start="69:51" pos:end="69:52">va</name></name></expr></argument>, <argument pos:start="69:55" pos:end="69:56"><expr pos:start="69:55" pos:end="69:56"><name pos:start="69:55" pos:end="69:56">md</name></expr></argument>,

                                    <argument pos:start="71:37" pos:end="71:65"><expr pos:start="71:37" pos:end="71:65"><sizeof pos:start="71:37" pos:end="71:65">sizeof<argument_list pos:start="71:43" pos:end="71:65">(<argument pos:start="71:44" pos:end="71:64"><expr pos:start="71:44" pos:end="71:64">struct <name pos:start="71:51" pos:end="71:64">srp_direct_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:19">(<expr pos:start="73:17" pos:end="73:18"><name pos:start="73:17" pos:end="73:18">rc</name></expr>)</condition> <block pos:start="73:21" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:22">

                <expr_stmt pos:start="75:17" pos:end="75:76"><expr pos:start="75:17" pos:end="75:75"><call pos:start="75:17" pos:end="75:75"><name pos:start="75:17" pos:end="75:23">dprintf</name><argument_list pos:start="75:24" pos:end="75:75">(<argument pos:start="75:25" pos:end="75:70"><expr pos:start="75:25" pos:end="75:70"><literal type="string" pos:start="75:25" pos:end="75:70">"VSCSI: tce_dma_read -&gt; %d reading ext_desc\n"</literal></expr></argument>, <argument pos:start="75:73" pos:end="75:74"><expr pos:start="75:73" pos:end="75:74"><name pos:start="75:73" pos:end="75:74">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="77:17" pos:end="77:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:32"><expr pos:start="81:13" pos:end="81:31"><call pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:27">vscsi_swap_desc</name><argument_list pos:start="81:28" pos:end="81:31">(<argument pos:start="81:29" pos:end="81:30"><expr pos:start="81:29" pos:end="81:30"><name pos:start="81:29" pos:end="81:30">md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:52"><expr pos:start="83:13" pos:end="83:51"><name pos:start="83:13" pos:end="83:18"><name pos:start="83:13" pos:end="83:14">td</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:18">va</name></name> <operator pos:start="83:20" pos:end="83:21">+=</operator> <sizeof pos:start="83:23" pos:end="83:51">sizeof<argument_list pos:start="83:29" pos:end="83:51">(<argument pos:start="83:30" pos:end="83:50"><expr pos:start="83:30" pos:end="83:50">struct <name pos:start="83:37" pos:end="83:50">srp_direct_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:30"><expr pos:start="85:13" pos:end="85:29"><operator pos:start="85:13" pos:end="85:14">--</operator><name pos:start="85:15" pos:end="85:29"><name pos:start="85:15" pos:end="85:17">req</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:29">total_desc</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="91:58"><expr pos:start="89:9" pos:end="91:57"><call pos:start="89:9" pos:end="91:57"><name pos:start="89:9" pos:end="89:15">dprintf</name><argument_list pos:start="89:16" pos:end="91:57">(<argument pos:start="89:17" pos:end="89:69"><expr pos:start="89:17" pos:end="89:69"><literal type="string" pos:start="89:17" pos:end="89:69">"VSCSI:   [desc va=0x%llx,len=0x%x] remaining=0x%x\n"</literal></expr></argument>,

                <argument pos:start="91:17" pos:end="91:42"><expr pos:start="91:17" pos:end="91:42"><operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:25">unsigned</name> <name pos:start="91:27" pos:end="91:30">long</name> <name pos:start="91:32" pos:end="91:35">long</name><operator pos:start="91:36" pos:end="91:36">)</operator><name pos:start="91:37" pos:end="91:42"><name pos:start="91:37" pos:end="91:38">md</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:42">va</name></name></expr></argument>, <argument pos:start="91:45" pos:end="91:51"><expr pos:start="91:45" pos:end="91:51"><name pos:start="91:45" pos:end="91:51"><name pos:start="91:45" pos:end="91:46">md</name><operator pos:start="91:47" pos:end="91:48">-&gt;</operator><name pos:start="91:49" pos:end="91:51">len</name></name></expr></argument>, <argument pos:start="91:54" pos:end="91:56"><expr pos:start="91:54" pos:end="91:56"><name pos:start="91:54" pos:end="91:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:30">/* Perform transfer */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:33"><expr pos:start="97:9" pos:end="97:32"><name pos:start="97:9" pos:end="97:12">llen</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:32"><name pos:start="97:16" pos:end="97:18">MIN</name><argument_list pos:start="97:19" pos:end="97:32">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">len</name></expr></argument>, <argument pos:start="97:25" pos:end="97:31"><expr pos:start="97:25" pos:end="97:31"><name pos:start="97:25" pos:end="97:31"><name pos:start="97:25" pos:end="97:26">md</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:31">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:25">(<expr pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:15">req</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:24">writing</name></name></expr>)</condition> <block pos:start="99:27" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:65"> <comment type="block" pos:start="99:29" pos:end="99:75">/* writing = to device = reading from memory */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:65"><expr pos:start="101:13" pos:end="101:64"><name pos:start="101:13" pos:end="101:14">rc</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <call pos:start="101:18" pos:end="101:64"><name pos:start="101:18" pos:end="101:35">spapr_tce_dma_read</name><argument_list pos:start="101:36" pos:end="101:64">(<argument pos:start="101:37" pos:end="101:44"><expr pos:start="101:37" pos:end="101:44"><operator pos:start="101:37" pos:end="101:37">&amp;</operator><name pos:start="101:38" pos:end="101:44"><name pos:start="101:38" pos:end="101:38">s</name><operator pos:start="101:39" pos:end="101:40">-&gt;</operator><name pos:start="101:41" pos:end="101:44">vdev</name></name></expr></argument>, <argument pos:start="101:47" pos:end="101:52"><expr pos:start="101:47" pos:end="101:52"><name pos:start="101:47" pos:end="101:52"><name pos:start="101:47" pos:end="101:48">md</name><operator pos:start="101:49" pos:end="101:50">-&gt;</operator><name pos:start="101:51" pos:end="101:52">va</name></name></expr></argument>, <argument pos:start="101:55" pos:end="101:57"><expr pos:start="101:55" pos:end="101:57"><name pos:start="101:55" pos:end="101:57">buf</name></expr></argument>, <argument pos:start="101:60" pos:end="101:63"><expr pos:start="101:60" pos:end="101:63"><name pos:start="101:60" pos:end="101:63">llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="107:9">else <block pos:start="103:16" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:66">

            <expr_stmt pos:start="105:13" pos:end="105:66"><expr pos:start="105:13" pos:end="105:65"><name pos:start="105:13" pos:end="105:14">rc</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:65"><name pos:start="105:18" pos:end="105:36">spapr_tce_dma_write</name><argument_list pos:start="105:37" pos:end="105:65">(<argument pos:start="105:38" pos:end="105:45"><expr pos:start="105:38" pos:end="105:45"><operator pos:start="105:38" pos:end="105:38">&amp;</operator><name pos:start="105:39" pos:end="105:45"><name pos:start="105:39" pos:end="105:39">s</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:45">vdev</name></name></expr></argument>, <argument pos:start="105:48" pos:end="105:53"><expr pos:start="105:48" pos:end="105:53"><name pos:start="105:48" pos:end="105:53"><name pos:start="105:48" pos:end="105:49">md</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:53">va</name></name></expr></argument>, <argument pos:start="105:56" pos:end="105:58"><expr pos:start="105:56" pos:end="105:58"><name pos:start="105:56" pos:end="105:58">buf</name></expr></argument>, <argument pos:start="105:61" pos:end="105:64"><expr pos:start="105:61" pos:end="105:64"><name pos:start="105:61" pos:end="105:64">llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:15">(<expr pos:start="109:13" pos:end="109:14"><name pos:start="109:13" pos:end="109:14">rc</name></expr>)</condition> <block pos:start="109:17" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:18">

            <expr_stmt pos:start="111:13" pos:end="111:72"><expr pos:start="111:13" pos:end="111:71"><call pos:start="111:13" pos:end="111:71"><name pos:start="111:13" pos:end="111:19">dprintf</name><argument_list pos:start="111:20" pos:end="111:71">(<argument pos:start="111:21" pos:end="111:52"><expr pos:start="111:21" pos:end="111:52"><literal type="string" pos:start="111:21" pos:end="111:52">"VSCSI: tce_dma_r/w(%d) -&gt; %d\n"</literal></expr></argument>, <argument pos:start="111:55" pos:end="111:66"><expr pos:start="111:55" pos:end="111:66"><name pos:start="111:55" pos:end="111:66"><name pos:start="111:55" pos:end="111:57">req</name><operator pos:start="111:58" pos:end="111:59">-&gt;</operator><name pos:start="111:60" pos:end="111:66">writing</name></name></expr></argument>, <argument pos:start="111:69" pos:end="111:70"><expr pos:start="111:69" pos:end="111:70"><name pos:start="111:69" pos:end="111:70">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="119:48"><expr pos:start="117:9" pos:end="119:47"><call pos:start="117:9" pos:end="119:47"><name pos:start="117:9" pos:end="117:15">dprintf</name><argument_list pos:start="117:16" pos:end="119:47">(<argument pos:start="117:17" pos:end="117:59"><expr pos:start="117:17" pos:end="117:59"><literal type="string" pos:start="117:17" pos:end="117:59">"VSCSI:     data: %02x %02x %02x %02x...\n"</literal></expr></argument>,

                <argument pos:start="119:17" pos:end="119:22"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:19">buf</name><index pos:start="119:20" pos:end="119:22">[<expr pos:start="119:21" pos:end="119:21"><literal type="number" pos:start="119:21" pos:end="119:21">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="119:25" pos:end="119:30"><expr pos:start="119:25" pos:end="119:30"><name pos:start="119:25" pos:end="119:30"><name pos:start="119:25" pos:end="119:27">buf</name><index pos:start="119:28" pos:end="119:30">[<expr pos:start="119:29" pos:end="119:29"><literal type="number" pos:start="119:29" pos:end="119:29">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="119:33" pos:end="119:38"><expr pos:start="119:33" pos:end="119:38"><name pos:start="119:33" pos:end="119:38"><name pos:start="119:33" pos:end="119:35">buf</name><index pos:start="119:36" pos:end="119:38">[<expr pos:start="119:37" pos:end="119:37"><literal type="number" pos:start="119:37" pos:end="119:37">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="119:41" pos:end="119:46"><expr pos:start="119:41" pos:end="119:46"><name pos:start="119:41" pos:end="119:46"><name pos:start="119:41" pos:end="119:43">buf</name><index pos:start="119:44" pos:end="119:46">[<expr pos:start="119:45" pos:end="119:45"><literal type="number" pos:start="119:45" pos:end="119:45">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:20"><expr pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:11">len</name> <operator pos:start="123:13" pos:end="123:14">-=</operator> <name pos:start="123:16" pos:end="123:19">llen</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:20"><expr pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:11">buf</name> <operator pos:start="125:13" pos:end="125:14">+=</operator> <name pos:start="125:16" pos:end="125:19">llen</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:22"><expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:13">total</name> <operator pos:start="127:15" pos:end="127:16">+=</operator> <name pos:start="127:18" pos:end="127:21">llen</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:23"><expr pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:10">md</name><operator pos:start="129:11" pos:end="129:12">-&gt;</operator><name pos:start="129:13" pos:end="129:14">va</name></name> <operator pos:start="129:16" pos:end="129:17">+=</operator> <name pos:start="129:19" pos:end="129:22">llen</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:24"><expr pos:start="131:9" pos:end="131:23"><name pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:10">md</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:15">len</name></name> <operator pos:start="131:17" pos:end="131:18">-=</operator> <name pos:start="131:20" pos:end="131:23">llen</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="135:5" pos:end="135:27">return <expr pos:start="135:12" pos:end="135:26"><ternary pos:start="135:12" pos:end="135:26"><condition pos:start="135:12" pos:end="135:15"><expr pos:start="135:12" pos:end="135:13"><name pos:start="135:12" pos:end="135:13">rc</name></expr> ?</condition><then pos:start="135:17" pos:end="135:18"> <expr pos:start="135:17" pos:end="135:18"><operator pos:start="135:17" pos:end="135:17">-</operator><literal type="number" pos:start="135:18" pos:end="135:18">1</literal></expr> </then><else pos:start="135:20" pos:end="135:26">: <expr pos:start="135:22" pos:end="135:26"><name pos:start="135:22" pos:end="135:26">total</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
