<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17459.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">FWCfgState</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:23">fw_cfg_init</name><parameter_list pos:start="1:24" pos:end="3:58">(<parameter pos:start="1:25" pos:end="1:41"><decl pos:start="1:25" pos:end="1:41"><type pos:start="1:25" pos:end="1:41"><name pos:start="1:25" pos:end="1:32">uint32_t</name></type> <name pos:start="1:34" pos:end="1:41">ctl_port</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><name pos:start="1:44" pos:end="1:51">uint32_t</name></type> <name pos:start="1:53" pos:end="1:61">data_port</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:30">hwaddr</name></type> <name pos:start="3:32" pos:end="3:39">ctl_addr</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:57"><decl pos:start="3:42" pos:end="3:57"><type pos:start="3:42" pos:end="3:57"><name pos:start="3:42" pos:end="3:47">hwaddr</name></type> <name pos:start="3:49" pos:end="3:57">data_addr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:13">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DeviceState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SysBusDevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">FWCfgState</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:7">dev</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:40"><name pos:start="15:11" pos:end="15:21">qdev_create</name><argument_list pos:start="15:22" pos:end="15:40">(<argument pos:start="15:23" pos:end="15:26"><expr pos:start="15:23" pos:end="15:26"><name pos:start="15:23" pos:end="15:26">NULL</name></expr></argument>, <argument pos:start="15:29" pos:end="15:39"><expr pos:start="15:29" pos:end="15:39"><name pos:start="15:29" pos:end="15:39">TYPE_FW_CFG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:54"><expr pos:start="17:5" pos:end="17:53"><call pos:start="17:5" pos:end="17:53"><name pos:start="17:5" pos:end="17:24">qdev_prop_set_uint32</name><argument_list pos:start="17:25" pos:end="17:53">(<argument pos:start="17:26" pos:end="17:28"><expr pos:start="17:26" pos:end="17:28"><name pos:start="17:26" pos:end="17:28">dev</name></expr></argument>, <argument pos:start="17:31" pos:end="17:42"><expr pos:start="17:31" pos:end="17:42"><literal type="string" pos:start="17:31" pos:end="17:42">"ctl_iobase"</literal></expr></argument>, <argument pos:start="17:45" pos:end="17:52"><expr pos:start="17:45" pos:end="17:52"><name pos:start="17:45" pos:end="17:52">ctl_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:56"><expr pos:start="19:5" pos:end="19:55"><call pos:start="19:5" pos:end="19:55"><name pos:start="19:5" pos:end="19:24">qdev_prop_set_uint32</name><argument_list pos:start="19:25" pos:end="19:55">(<argument pos:start="19:26" pos:end="19:28"><expr pos:start="19:26" pos:end="19:28"><name pos:start="19:26" pos:end="19:28">dev</name></expr></argument>, <argument pos:start="19:31" pos:end="19:43"><expr pos:start="19:31" pos:end="19:43"><literal type="string" pos:start="19:31" pos:end="19:43">"data_iobase"</literal></expr></argument>, <argument pos:start="19:46" pos:end="19:54"><expr pos:start="19:46" pos:end="19:54"><name pos:start="19:46" pos:end="19:54">data_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:28"><expr pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:5">d</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <call pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:22">SYS_BUS_DEVICE</name><argument_list pos:start="21:23" pos:end="21:27">(<argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:5">s</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:14">FW_CFG</name><argument_list pos:start="25:15" pos:end="25:19">(<argument pos:start="25:16" pos:end="25:18"><expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><call pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:51">(<argument pos:start="29:12" pos:end="29:50"><expr pos:start="29:12" pos:end="29:50"><operator pos:start="29:12" pos:end="29:12">!</operator><call pos:start="29:13" pos:end="29:50"><name pos:start="29:13" pos:end="29:31">object_resolve_path</name><argument_list pos:start="29:32" pos:end="29:50">(<argument pos:start="29:33" pos:end="29:43"><expr pos:start="29:33" pos:end="29:43"><name pos:start="29:33" pos:end="29:43">FW_CFG_PATH</name></expr></argument>, <argument pos:start="29:46" pos:end="29:49"><expr pos:start="29:46" pos:end="29:49"><name pos:start="29:46" pos:end="29:49">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:80"><expr pos:start="33:5" pos:end="33:79"><call pos:start="33:5" pos:end="33:79"><name pos:start="33:5" pos:end="33:29">object_property_add_child</name><argument_list pos:start="33:30" pos:end="33:79">(<argument pos:start="33:31" pos:end="33:48"><expr pos:start="33:31" pos:end="33:48"><call pos:start="33:31" pos:end="33:48"><name pos:start="33:31" pos:end="33:46">qdev_get_machine</name><argument_list pos:start="33:47" pos:end="33:48">()</argument_list></call></expr></argument>, <argument pos:start="33:51" pos:end="33:61"><expr pos:start="33:51" pos:end="33:61"><name pos:start="33:51" pos:end="33:61">FW_CFG_NAME</name></expr></argument>, <argument pos:start="33:64" pos:end="33:72"><expr pos:start="33:64" pos:end="33:72"><call pos:start="33:64" pos:end="33:72"><name pos:start="33:64" pos:end="33:69">OBJECT</name><argument_list pos:start="33:70" pos:end="33:72">(<argument pos:start="33:71" pos:end="33:71"><expr pos:start="33:71" pos:end="33:71"><name pos:start="33:71" pos:end="33:71">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="33:75" pos:end="33:78"><expr pos:start="33:75" pos:end="33:78"><name pos:start="33:75" pos:end="33:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><call pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:20">qdev_init_nofail</name><argument_list pos:start="37:21" pos:end="37:25">(<argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><name pos:start="37:22" pos:end="37:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:17">(<expr pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">ctl_addr</name></expr>)</condition> <block pos:start="41:19" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:40">

        <expr_stmt pos:start="43:9" pos:end="43:40"><expr pos:start="43:9" pos:end="43:39"><call pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:23">sysbus_mmio_map</name><argument_list pos:start="43:24" pos:end="43:39">(<argument pos:start="43:25" pos:end="43:25"><expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">d</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">0</literal></expr></argument>, <argument pos:start="43:31" pos:end="43:38"><expr pos:start="43:31" pos:end="43:38"><name pos:start="43:31" pos:end="43:38">ctl_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:17">data_addr</name></expr>)</condition> <block pos:start="47:20" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:41">

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:23">sysbus_mmio_map</name><argument_list pos:start="49:24" pos:end="49:40">(<argument pos:start="49:25" pos:end="49:25"><expr pos:start="49:25" pos:end="49:25"><name pos:start="49:25" pos:end="49:25">d</name></expr></argument>, <argument pos:start="49:28" pos:end="49:28"><expr pos:start="49:28" pos:end="49:28"><literal type="number" pos:start="49:28" pos:end="49:28">1</literal></expr></argument>, <argument pos:start="49:31" pos:end="49:39"><expr pos:start="49:31" pos:end="49:39"><name pos:start="49:31" pos:end="49:39">data_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:61"><expr pos:start="53:5" pos:end="53:60"><call pos:start="53:5" pos:end="53:60"><name pos:start="53:5" pos:end="53:20">fw_cfg_add_bytes</name><argument_list pos:start="53:21" pos:end="53:60">(<argument pos:start="53:22" pos:end="53:22"><expr pos:start="53:22" pos:end="53:22"><name pos:start="53:22" pos:end="53:22">s</name></expr></argument>, <argument pos:start="53:25" pos:end="53:40"><expr pos:start="53:25" pos:end="53:40"><name pos:start="53:25" pos:end="53:40">FW_CFG_SIGNATURE</name></expr></argument>, <argument pos:start="53:43" pos:end="53:56"><expr pos:start="53:43" pos:end="53:56"><operator pos:start="53:43" pos:end="53:43">(</operator><name pos:start="53:44" pos:end="53:47">char</name> <operator pos:start="53:49" pos:end="53:49">*</operator><operator pos:start="53:50" pos:end="53:50">)</operator><literal type="string" pos:start="53:51" pos:end="53:56">"QEMU"</literal></expr></argument>, <argument pos:start="53:59" pos:end="53:59"><expr pos:start="53:59" pos:end="53:59"><literal type="number" pos:start="53:59" pos:end="53:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><call pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:20">fw_cfg_add_bytes</name><argument_list pos:start="55:21" pos:end="55:51">(<argument pos:start="55:22" pos:end="55:22"><expr pos:start="55:22" pos:end="55:22"><name pos:start="55:22" pos:end="55:22">s</name></expr></argument>, <argument pos:start="55:25" pos:end="55:35"><expr pos:start="55:25" pos:end="55:35"><name pos:start="55:25" pos:end="55:35">FW_CFG_UUID</name></expr></argument>, <argument pos:start="55:38" pos:end="55:46"><expr pos:start="55:38" pos:end="55:46"><name pos:start="55:38" pos:end="55:46">qemu_uuid</name></expr></argument>, <argument pos:start="55:49" pos:end="55:50"><expr pos:start="55:49" pos:end="55:50"><literal type="number" pos:start="55:49" pos:end="55:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:82"><expr pos:start="57:5" pos:end="57:81"><call pos:start="57:5" pos:end="57:81"><name pos:start="57:5" pos:end="57:18">fw_cfg_add_i16</name><argument_list pos:start="57:19" pos:end="57:81">(<argument pos:start="57:20" pos:end="57:20"><expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">s</name></expr></argument>, <argument pos:start="57:23" pos:end="57:38"><expr pos:start="57:23" pos:end="57:38"><name pos:start="57:23" pos:end="57:38">FW_CFG_NOGRAPHIC</name></expr></argument>, <argument pos:start="57:41" pos:end="57:80"><expr pos:start="57:41" pos:end="57:80"><operator pos:start="57:41" pos:end="57:41">(</operator><name pos:start="57:42" pos:end="57:49">uint16_t</name><operator pos:start="57:50" pos:end="57:50">)</operator><operator pos:start="57:51" pos:end="57:51">(</operator><name pos:start="57:52" pos:end="57:63">display_type</name> <operator pos:start="57:65" pos:end="57:66">==</operator> <name pos:start="57:68" pos:end="57:79">DT_NOGRAPHIC</name><operator pos:start="57:80" pos:end="57:80">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:58"><expr pos:start="59:5" pos:end="59:57"><call pos:start="59:5" pos:end="59:57"><name pos:start="59:5" pos:end="59:18">fw_cfg_add_i16</name><argument_list pos:start="59:19" pos:end="59:57">(<argument pos:start="59:20" pos:end="59:20"><expr pos:start="59:20" pos:end="59:20"><name pos:start="59:20" pos:end="59:20">s</name></expr></argument>, <argument pos:start="59:23" pos:end="59:36"><expr pos:start="59:23" pos:end="59:36"><name pos:start="59:23" pos:end="59:36">FW_CFG_NB_CPUS</name></expr></argument>, <argument pos:start="59:39" pos:end="59:56"><expr pos:start="59:39" pos:end="59:56"><operator pos:start="59:39" pos:end="59:39">(</operator><name pos:start="59:40" pos:end="59:47">uint16_t</name><operator pos:start="59:48" pos:end="59:48">)</operator><name pos:start="59:49" pos:end="59:56">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:61"><expr pos:start="61:5" pos:end="61:60"><call pos:start="61:5" pos:end="61:60"><name pos:start="61:5" pos:end="61:18">fw_cfg_add_i16</name><argument_list pos:start="61:19" pos:end="61:60">(<argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><name pos:start="61:20" pos:end="61:20">s</name></expr></argument>, <argument pos:start="61:23" pos:end="61:38"><expr pos:start="61:23" pos:end="61:38"><name pos:start="61:23" pos:end="61:38">FW_CFG_BOOT_MENU</name></expr></argument>, <argument pos:start="61:41" pos:end="61:59"><expr pos:start="61:41" pos:end="61:59"><operator pos:start="61:41" pos:end="61:41">(</operator><name pos:start="61:42" pos:end="61:49">uint16_t</name><operator pos:start="61:50" pos:end="61:50">)</operator><name pos:start="61:51" pos:end="61:59">boot_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><call pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:21">fw_cfg_bootsplash</name><argument_list pos:start="63:22" pos:end="63:24">(<argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:21"><expr pos:start="65:5" pos:end="65:20"><call pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:17">fw_cfg_reboot</name><argument_list pos:start="65:18" pos:end="65:20">(<argument pos:start="65:19" pos:end="65:19"><expr pos:start="65:19" pos:end="65:19"><name pos:start="65:19" pos:end="65:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:20">machine_ready</name><operator pos:start="69:21" pos:end="69:21">.</operator><name pos:start="69:22" pos:end="69:27">notify</name></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:50">fw_cfg_machine_ready</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:59"><expr pos:start="71:5" pos:end="71:58"><call pos:start="71:5" pos:end="71:58"><name pos:start="71:5" pos:end="71:39">qemu_add_machine_init_done_notifier</name><argument_list pos:start="71:40" pos:end="71:58">(<argument pos:start="71:41" pos:end="71:57"><expr pos:start="71:41" pos:end="71:57"><operator pos:start="71:41" pos:end="71:41">&amp;</operator><name pos:start="71:42" pos:end="71:57"><name pos:start="71:42" pos:end="71:42">s</name><operator pos:start="71:43" pos:end="71:44">-&gt;</operator><name pos:start="71:45" pos:end="71:57">machine_ready</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><name pos:start="75:12" pos:end="75:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
