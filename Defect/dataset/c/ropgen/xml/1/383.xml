<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/383.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">qcow_open</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="269:1">{<block_content pos:start="7:5" pos:end="267:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>, <decl pos:start="9:17" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:21">shift</name></decl>, <decl pos:start="9:24" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:26">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">QCowHeader</name></type> <name pos:start="11:16" pos:end="11:21">header</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:59"><expr pos:start="15:5" pos:end="15:58"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:58"><name pos:start="15:11" pos:end="15:20">bdrv_pread</name><argument_list pos:start="15:21" pos:end="15:58">(<argument pos:start="15:22" pos:end="15:29"><expr pos:start="15:22" pos:end="15:29"><name pos:start="15:22" pos:end="15:29"><name pos:start="15:22" pos:end="15:23">bs</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:29">file</name></name></expr></argument>, <argument pos:start="15:32" pos:end="15:32"><expr pos:start="15:32" pos:end="15:32"><literal type="number" pos:start="15:32" pos:end="15:32">0</literal></expr></argument>, <argument pos:start="15:35" pos:end="15:41"><expr pos:start="15:35" pos:end="15:41"><operator pos:start="15:35" pos:end="15:35">&amp;</operator><name pos:start="15:36" pos:end="15:41">header</name></expr></argument>, <argument pos:start="15:44" pos:end="15:57"><expr pos:start="15:44" pos:end="15:57"><sizeof pos:start="15:44" pos:end="15:57">sizeof<argument_list pos:start="15:50" pos:end="15:57">(<argument pos:start="15:51" pos:end="15:56"><expr pos:start="15:51" pos:end="15:56"><name pos:start="15:51" pos:end="15:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">&lt;</operator> <literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr>)</condition> <block pos:start="17:18" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:18">

        <goto pos:start="19:9" pos:end="19:18">goto <name pos:start="19:14" pos:end="19:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><call pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:16">be32_to_cpus</name><argument_list pos:start="23:17" pos:end="23:31">(<argument pos:start="23:18" pos:end="23:30"><expr pos:start="23:18" pos:end="23:30"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:30"><name pos:start="23:19" pos:end="23:24">header</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><call pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:16">be32_to_cpus</name><argument_list pos:start="25:17" pos:end="25:33">(<argument pos:start="25:18" pos:end="25:32"><expr pos:start="25:18" pos:end="25:32"><operator pos:start="25:18" pos:end="25:18">&amp;</operator><name pos:start="25:19" pos:end="25:32"><name pos:start="25:19" pos:end="25:24">header</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><call pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:16">be64_to_cpus</name><argument_list pos:start="27:17" pos:end="27:45">(<argument pos:start="27:18" pos:end="27:44"><expr pos:start="27:18" pos:end="27:44"><operator pos:start="27:18" pos:end="27:18">&amp;</operator><name pos:start="27:19" pos:end="27:44"><name pos:start="27:19" pos:end="27:24">header</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><call pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:16">be32_to_cpus</name><argument_list pos:start="29:17" pos:end="29:43">(<argument pos:start="29:18" pos:end="29:42"><expr pos:start="29:18" pos:end="29:42"><operator pos:start="29:18" pos:end="29:18">&amp;</operator><name pos:start="29:19" pos:end="29:42"><name pos:start="29:19" pos:end="29:24">header</name><operator pos:start="29:25" pos:end="29:25">.</operator><name pos:start="29:26" pos:end="29:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:32"><expr pos:start="31:5" pos:end="31:31"><call pos:start="31:5" pos:end="31:31"><name pos:start="31:5" pos:end="31:16">be32_to_cpus</name><argument_list pos:start="31:17" pos:end="31:31">(<argument pos:start="31:18" pos:end="31:30"><expr pos:start="31:18" pos:end="31:30"><operator pos:start="31:18" pos:end="31:18">&amp;</operator><name pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:24">header</name><operator pos:start="31:25" pos:end="31:25">.</operator><name pos:start="31:26" pos:end="31:30">mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><call pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:16">be64_to_cpus</name><argument_list pos:start="33:17" pos:end="33:30">(<argument pos:start="33:18" pos:end="33:29"><expr pos:start="33:18" pos:end="33:29"><operator pos:start="33:18" pos:end="33:18">&amp;</operator><name pos:start="33:19" pos:end="33:29"><name pos:start="33:19" pos:end="33:24">header</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><call pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:16">be32_to_cpus</name><argument_list pos:start="35:17" pos:end="35:38">(<argument pos:start="35:18" pos:end="35:37"><expr pos:start="35:18" pos:end="35:37"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:37"><name pos:start="35:19" pos:end="35:24">header</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><call pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:16">be64_to_cpus</name><argument_list pos:start="37:17" pos:end="37:41">(<argument pos:start="37:18" pos:end="37:40"><expr pos:start="37:18" pos:end="37:40"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:40"><name pos:start="37:19" pos:end="37:24">header</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:35">(<expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:14">header</name><operator pos:start="41:15" pos:end="41:15">.</operator><name pos:start="41:16" pos:end="41:20">magic</name></name> <operator pos:start="41:22" pos:end="41:23">!=</operator> <name pos:start="41:25" pos:end="41:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="41:37" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:18">

        <expr_stmt pos:start="43:9" pos:end="43:53"><expr pos:start="43:9" pos:end="43:52"><call pos:start="43:9" pos:end="43:52"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:52">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:51"><expr pos:start="43:26" pos:end="43:51"><literal type="string" pos:start="43:26" pos:end="43:51">"Image not in qcow format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:22"><expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">-</operator><name pos:start="45:16" pos:end="45:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="67:5"><if pos:start="51:5" pos:end="67:5">if <condition pos:start="51:8" pos:end="51:39">(<expr pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:14">header</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:22">version</name></name> <operator pos:start="51:24" pos:end="51:25">!=</operator> <name pos:start="51:27" pos:end="51:38">QCOW_VERSION</name></expr>)</condition> <block pos:start="51:41" pos:end="67:5">{<block_content pos:start="53:9" pos:end="65:18">

        <decl_stmt pos:start="53:9" pos:end="53:25"><decl pos:start="53:9" pos:end="53:24"><type pos:start="53:9" pos:end="53:12"><name pos:start="53:9" pos:end="53:12">char</name></type> <name pos:start="53:14" pos:end="53:24"><name pos:start="53:14" pos:end="53:20">version</name><index pos:start="53:21" pos:end="53:24">[<expr pos:start="53:22" pos:end="53:23"><literal type="number" pos:start="53:22" pos:end="53:23">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="55:9" pos:end="57:33"><expr pos:start="55:9" pos:end="57:32"><call pos:start="55:9" pos:end="57:32"><name pos:start="55:9" pos:end="55:16">snprintf</name><argument_list pos:start="55:17" pos:end="57:32">(<argument pos:start="55:18" pos:end="55:24"><expr pos:start="55:18" pos:end="55:24"><name pos:start="55:18" pos:end="55:24">version</name></expr></argument>, <argument pos:start="55:27" pos:end="55:41"><expr pos:start="55:27" pos:end="55:41"><sizeof pos:start="55:27" pos:end="55:41">sizeof<argument_list pos:start="55:33" pos:end="55:41">(<argument pos:start="55:34" pos:end="55:40"><expr pos:start="55:34" pos:end="55:40"><name pos:start="55:34" pos:end="55:40">version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="55:44" pos:end="55:66"><expr pos:start="55:44" pos:end="55:66"><literal type="string" pos:start="55:44" pos:end="55:59">"QCOW version %"</literal> <name pos:start="55:61" pos:end="55:66">PRIu32</name></expr></argument>,

                 <argument pos:start="57:18" pos:end="57:31"><expr pos:start="57:18" pos:end="57:31"><name pos:start="57:18" pos:end="57:31"><name pos:start="57:18" pos:end="57:23">header</name><operator pos:start="57:24" pos:end="57:24">.</operator><name pos:start="57:25" pos:end="57:31">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="61:52"><expr pos:start="59:9" pos:end="61:51"><call pos:start="59:9" pos:end="61:51"><name pos:start="59:9" pos:end="59:17">error_set</name><argument_list pos:start="59:18" pos:end="61:51">(<argument pos:start="59:19" pos:end="59:22"><expr pos:start="59:19" pos:end="59:22"><name pos:start="59:19" pos:end="59:22">errp</name></expr></argument>, <argument pos:start="59:25" pos:end="59:57"><expr pos:start="59:25" pos:end="59:57"><name pos:start="59:25" pos:end="59:57">QERR_UNKNOWN_BLOCK_FORMAT_FEATURE</name></expr></argument>,

                  <argument pos:start="61:19" pos:end="61:33"><expr pos:start="61:19" pos:end="61:33"><name pos:start="61:19" pos:end="61:33"><name pos:start="61:19" pos:end="61:20">bs</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:33">device_name</name></name></expr></argument>, <argument pos:start="61:36" pos:end="61:41"><expr pos:start="61:36" pos:end="61:41"><literal type="string" pos:start="61:36" pos:end="61:41">"qcow"</literal></expr></argument>, <argument pos:start="61:44" pos:end="61:50"><expr pos:start="61:44" pos:end="61:50"><name pos:start="61:44" pos:end="61:50">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">-</operator><name pos:start="63:16" pos:end="63:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:25">(<expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:14">header</name><operator pos:start="71:15" pos:end="71:15">.</operator><name pos:start="71:16" pos:end="71:19">size</name></name> <operator pos:start="71:21" pos:end="71:22">&lt;=</operator> <literal type="number" pos:start="71:24" pos:end="71:24">1</literal></expr>)</condition> <block pos:start="71:27" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:18">

        <expr_stmt pos:start="73:9" pos:end="73:79"><expr pos:start="73:9" pos:end="73:78"><call pos:start="73:9" pos:end="73:78"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="73:78">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:77"><expr pos:start="73:26" pos:end="73:77"><literal type="string" pos:start="73:26" pos:end="73:77">"Image size is too small (must be at least 2 bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:22"><expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">-</operator><name pos:start="75:16" pos:end="75:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:60">(<expr pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:14">header</name><operator pos:start="81:15" pos:end="81:15">.</operator><name pos:start="81:16" pos:end="81:27">cluster_bits</name></name> <operator pos:start="81:29" pos:end="81:29">&lt;</operator> <literal type="number" pos:start="81:31" pos:end="81:31">9</literal> <operator pos:start="81:33" pos:end="81:34">||</operator> <name pos:start="81:36" pos:end="81:54"><name pos:start="81:36" pos:end="81:41">header</name><operator pos:start="81:42" pos:end="81:42">.</operator><name pos:start="81:43" pos:end="81:54">cluster_bits</name></name> <operator pos:start="81:56" pos:end="81:56">&gt;</operator> <literal type="number" pos:start="81:58" pos:end="81:59">16</literal></expr>)</condition> <block pos:start="81:62" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:18">

        <expr_stmt pos:start="83:9" pos:end="83:69"><expr pos:start="83:9" pos:end="83:68"><call pos:start="83:9" pos:end="83:68"><name pos:start="83:9" pos:end="83:18">error_setg</name><argument_list pos:start="83:19" pos:end="83:68">(<argument pos:start="83:20" pos:end="83:23"><expr pos:start="83:20" pos:end="83:23"><name pos:start="83:20" pos:end="83:23">errp</name></expr></argument>, <argument pos:start="83:26" pos:end="83:67"><expr pos:start="83:26" pos:end="83:67"><literal type="string" pos:start="83:26" pos:end="83:67">"Cluster size must be between 512 and 64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="95:38">/* l2_bits specifies number of entries; storing a uint64_t in each entry,

     * so bytes = num_entries &lt;&lt; 3. */</comment>

    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:58">(<expr pos:start="97:9" pos:end="97:57"><name pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:14">header</name><operator pos:start="97:15" pos:end="97:15">.</operator><name pos:start="97:16" pos:end="97:22">l2_bits</name></name> <operator pos:start="97:24" pos:end="97:24">&lt;</operator> <literal type="number" pos:start="97:26" pos:end="97:28">9</literal> <operator pos:start="97:28" pos:end="97:28">-</operator> <literal type="number" pos:start="97:30" pos:end="97:30">3</literal> <operator pos:start="97:32" pos:end="97:33">||</operator> <name pos:start="97:35" pos:end="97:48"><name pos:start="97:35" pos:end="97:40">header</name><operator pos:start="97:41" pos:end="97:41">.</operator><name pos:start="97:42" pos:end="97:48">l2_bits</name></name> <operator pos:start="97:50" pos:end="97:50">&gt;</operator> <literal type="number" pos:start="97:52" pos:end="97:55">16</literal> <operator pos:start="97:55" pos:end="97:55">-</operator> <literal type="number" pos:start="97:57" pos:end="97:57">3</literal></expr>)</condition> <block pos:start="97:60" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:18">

        <expr_stmt pos:start="99:9" pos:end="99:70"><expr pos:start="99:9" pos:end="99:69"><call pos:start="99:9" pos:end="99:69"><name pos:start="99:9" pos:end="99:18">error_setg</name><argument_list pos:start="99:19" pos:end="99:69">(<argument pos:start="99:20" pos:end="99:23"><expr pos:start="99:20" pos:end="99:23"><name pos:start="99:20" pos:end="99:23">errp</name></expr></argument>, <argument pos:start="99:26" pos:end="99:68"><expr pos:start="99:26" pos:end="99:68"><literal type="string" pos:start="99:26" pos:end="99:68">"L2 table size must be between 512 and 64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <operator pos:start="101:15" pos:end="101:15">-</operator><name pos:start="101:16" pos:end="101:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="109:45">(<expr pos:start="109:9" pos:end="109:44"><name pos:start="109:9" pos:end="109:27"><name pos:start="109:9" pos:end="109:14">header</name><operator pos:start="109:15" pos:end="109:15">.</operator><name pos:start="109:16" pos:end="109:27">crypt_method</name></name> <operator pos:start="109:29" pos:end="109:29">&gt;</operator> <name pos:start="109:31" pos:end="109:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="109:47" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:18">

        <expr_stmt pos:start="111:9" pos:end="111:69"><expr pos:start="111:9" pos:end="111:68"><call pos:start="111:9" pos:end="111:68"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="111:68">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="111:67"><expr pos:start="111:26" pos:end="111:67"><literal type="string" pos:start="111:26" pos:end="111:67">"invalid encryption method in qcow header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:22"><expr pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <operator pos:start="113:15" pos:end="113:15">-</operator><name pos:start="113:16" pos:end="113:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:18">goto <name pos:start="115:14" pos:end="115:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:49"><expr pos:start="119:5" pos:end="119:48"><name pos:start="119:5" pos:end="119:26"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:26">crypt_method_header</name></name> <operator pos:start="119:28" pos:end="119:28">=</operator> <name pos:start="119:30" pos:end="119:48"><name pos:start="119:30" pos:end="119:35">header</name><operator pos:start="119:36" pos:end="119:36">.</operator><name pos:start="119:37" pos:end="119:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:31">(<expr pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="121:33" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:26">

        <expr_stmt pos:start="123:9" pos:end="123:26"><expr pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:10">bs</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:21">encrypted</name></name> <operator pos:start="123:23" pos:end="123:23">=</operator> <literal type="number" pos:start="123:25" pos:end="123:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:42"><expr pos:start="127:5" pos:end="127:41"><name pos:start="127:5" pos:end="127:19"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:19">cluster_bits</name></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:41"><name pos:start="127:23" pos:end="127:28">header</name><operator pos:start="127:29" pos:end="127:29">.</operator><name pos:start="127:30" pos:end="127:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:43"><expr pos:start="129:5" pos:end="129:42"><name pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:19">cluster_size</name></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <literal type="number" pos:start="129:23" pos:end="129:23">1</literal> <operator pos:start="129:25" pos:end="129:26">&lt;&lt;</operator> <name pos:start="129:28" pos:end="129:42"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:52"><expr pos:start="131:5" pos:end="131:51"><name pos:start="131:5" pos:end="131:22"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:22">cluster_sectors</name></name> <operator pos:start="131:24" pos:end="131:24">=</operator> <literal type="number" pos:start="131:26" pos:end="131:26">1</literal> <operator pos:start="131:28" pos:end="131:29">&lt;&lt;</operator> <operator pos:start="131:31" pos:end="131:31">(</operator><name pos:start="131:32" pos:end="131:46"><name pos:start="131:32" pos:end="131:32">s</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:46">cluster_bits</name></name> <operator pos:start="131:48" pos:end="131:48">-</operator> <literal type="number" pos:start="131:50" pos:end="131:50">9</literal><operator pos:start="131:51" pos:end="131:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:32"><expr pos:start="133:5" pos:end="133:31"><name pos:start="133:5" pos:end="133:14"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:14">l2_bits</name></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <name pos:start="133:18" pos:end="133:31"><name pos:start="133:18" pos:end="133:23">header</name><operator pos:start="133:24" pos:end="133:24">.</operator><name pos:start="133:25" pos:end="133:31">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:33"><expr pos:start="135:5" pos:end="135:32"><name pos:start="135:5" pos:end="135:14"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:14">l2_size</name></name> <operator pos:start="135:16" pos:end="135:16">=</operator> <literal type="number" pos:start="135:18" pos:end="135:18">1</literal> <operator pos:start="135:20" pos:end="135:21">&lt;&lt;</operator> <name pos:start="135:23" pos:end="135:32"><name pos:start="135:23" pos:end="135:23">s</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:32">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:42"><expr pos:start="137:5" pos:end="137:41"><name pos:start="137:5" pos:end="137:21"><name pos:start="137:5" pos:end="137:6">bs</name><operator pos:start="137:7" pos:end="137:8">-&gt;</operator><name pos:start="137:9" pos:end="137:21">total_sectors</name></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:35"><name pos:start="137:25" pos:end="137:30">header</name><operator pos:start="137:31" pos:end="137:31">.</operator><name pos:start="137:32" pos:end="137:35">size</name></name> <operator pos:start="137:37" pos:end="137:37">/</operator> <literal type="number" pos:start="137:39" pos:end="137:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:65"><expr pos:start="139:5" pos:end="139:64"><name pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:26">cluster_offset_mask</name></name> <operator pos:start="139:28" pos:end="139:28">=</operator> <operator pos:start="139:30" pos:end="139:30">(</operator><literal type="number" pos:start="139:31" pos:end="139:33">1LL</literal> <operator pos:start="139:35" pos:end="139:36">&lt;&lt;</operator> <operator pos:start="139:38" pos:end="139:38">(</operator><literal type="number" pos:start="139:39" pos:end="139:42">63</literal> <operator pos:start="139:42" pos:end="139:42">-</operator> <name pos:start="139:44" pos:end="139:58"><name pos:start="139:44" pos:end="139:44">s</name><operator pos:start="139:45" pos:end="139:46">-&gt;</operator><name pos:start="139:47" pos:end="139:58">cluster_bits</name></name><operator pos:start="139:59" pos:end="139:59">)</operator><operator pos:start="139:60" pos:end="139:60">)</operator> <operator pos:start="139:62" pos:end="139:62">-</operator> <literal type="number" pos:start="139:64" pos:end="139:64">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:32">/* read the level 1 table */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:41"><expr pos:start="145:5" pos:end="145:40"><name pos:start="145:5" pos:end="145:9">shift</name> <operator pos:start="145:11" pos:end="145:11">=</operator> <name pos:start="145:13" pos:end="145:27"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:27">cluster_bits</name></name> <operator pos:start="145:29" pos:end="145:29">+</operator> <name pos:start="145:31" pos:end="145:40"><name pos:start="145:31" pos:end="145:31">s</name><operator pos:start="145:32" pos:end="145:33">-&gt;</operator><name pos:start="145:34" pos:end="145:40">l2_bits</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="171:5"><if pos:start="147:5" pos:end="155:5">if <condition pos:start="147:8" pos:end="147:50">(<expr pos:start="147:9" pos:end="147:49"><name pos:start="147:9" pos:end="147:19"><name pos:start="147:9" pos:end="147:14">header</name><operator pos:start="147:15" pos:end="147:15">.</operator><name pos:start="147:16" pos:end="147:19">size</name></name> <operator pos:start="147:21" pos:end="147:21">&gt;</operator> <name pos:start="147:23" pos:end="147:32">UINT64_MAX</name> <operator pos:start="147:34" pos:end="147:34">-</operator> <operator pos:start="147:36" pos:end="147:36">(</operator><literal type="number" pos:start="147:37" pos:end="147:39">1LL</literal> <operator pos:start="147:41" pos:end="147:42">&lt;&lt;</operator> <name pos:start="147:44" pos:end="147:48">shift</name><operator pos:start="147:49" pos:end="147:49">)</operator></expr>)</condition> <block pos:start="147:52" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:18">

        <expr_stmt pos:start="149:9" pos:end="149:44"><expr pos:start="149:9" pos:end="149:43"><call pos:start="149:9" pos:end="149:43"><name pos:start="149:9" pos:end="149:18">error_setg</name><argument_list pos:start="149:19" pos:end="149:43">(<argument pos:start="149:20" pos:end="149:23"><expr pos:start="149:20" pos:end="149:23"><name pos:start="149:20" pos:end="149:23">errp</name></expr></argument>, <argument pos:start="149:26" pos:end="149:42"><expr pos:start="149:26" pos:end="149:42"><literal type="string" pos:start="149:26" pos:end="149:42">"Image too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:22"><expr pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <operator pos:start="151:15" pos:end="151:15">-</operator><name pos:start="151:16" pos:end="151:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="153:9" pos:end="153:18">goto <name pos:start="153:14" pos:end="153:17">fail</name>;</goto>

    </block_content>}</block></if> <else pos:start="155:7" pos:end="171:5">else <block pos:start="155:12" pos:end="171:5">{<block_content pos:start="157:9" pos:end="169:29">

        <decl_stmt pos:start="157:9" pos:end="157:71"><decl pos:start="157:9" pos:end="157:70"><type pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:16">uint64_t</name></type> <name pos:start="157:18" pos:end="157:24">l1_size</name> <init pos:start="157:26" pos:end="157:70">= <expr pos:start="157:28" pos:end="157:70"><operator pos:start="157:28" pos:end="157:28">(</operator><name pos:start="157:29" pos:end="157:39"><name pos:start="157:29" pos:end="157:34">header</name><operator pos:start="157:35" pos:end="157:35">.</operator><name pos:start="157:36" pos:end="157:39">size</name></name> <operator pos:start="157:41" pos:end="157:41">+</operator> <operator pos:start="157:43" pos:end="157:43">(</operator><literal type="number" pos:start="157:44" pos:end="157:46">1LL</literal> <operator pos:start="157:48" pos:end="157:49">&lt;&lt;</operator> <name pos:start="157:51" pos:end="157:55">shift</name><operator pos:start="157:56" pos:end="157:56">)</operator> <operator pos:start="157:58" pos:end="157:58">-</operator> <literal type="number" pos:start="157:60" pos:end="157:60">1</literal><operator pos:start="157:61" pos:end="157:61">)</operator> <operator pos:start="157:63" pos:end="157:64">&gt;&gt;</operator> <name pos:start="157:66" pos:end="157:70">shift</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:49">(<expr pos:start="159:13" pos:end="159:48"><name pos:start="159:13" pos:end="159:19">l1_size</name> <operator pos:start="159:21" pos:end="159:21">&gt;</operator> <name pos:start="159:23" pos:end="159:29">INT_MAX</name> <operator pos:start="159:31" pos:end="159:31">/</operator> <sizeof pos:start="159:33" pos:end="159:48">sizeof<argument_list pos:start="159:39" pos:end="159:48">(<argument pos:start="159:40" pos:end="159:47"><expr pos:start="159:40" pos:end="159:47"><name pos:start="159:40" pos:end="159:47">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="159:51" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:22">

            <expr_stmt pos:start="161:13" pos:end="161:48"><expr pos:start="161:13" pos:end="161:47"><call pos:start="161:13" pos:end="161:47"><name pos:start="161:13" pos:end="161:22">error_setg</name><argument_list pos:start="161:23" pos:end="161:47">(<argument pos:start="161:24" pos:end="161:27"><expr pos:start="161:24" pos:end="161:27"><name pos:start="161:24" pos:end="161:27">errp</name></expr></argument>, <argument pos:start="161:30" pos:end="161:46"><expr pos:start="161:30" pos:end="161:46"><literal type="string" pos:start="161:30" pos:end="161:46">"Image too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:26"><expr pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <operator pos:start="163:19" pos:end="163:19">-</operator><name pos:start="163:20" pos:end="163:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="165:13" pos:end="165:22">goto <name pos:start="165:18" pos:end="165:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:18"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:18">l1_size</name></name> <operator pos:start="169:20" pos:end="169:20">=</operator> <name pos:start="169:22" pos:end="169:28">l1_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:48"><expr pos:start="175:5" pos:end="175:47"><name pos:start="175:5" pos:end="175:22"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:22">l1_table_offset</name></name> <operator pos:start="175:24" pos:end="175:24">=</operator> <name pos:start="175:26" pos:end="175:47"><name pos:start="175:26" pos:end="175:31">header</name><operator pos:start="175:32" pos:end="175:32">.</operator><name pos:start="175:33" pos:end="175:47">l1_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:58"><expr pos:start="177:5" pos:end="177:57"><name pos:start="177:5" pos:end="177:15"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:15">l1_table</name></name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:57"><name pos:start="177:19" pos:end="177:26">g_malloc</name><argument_list pos:start="177:27" pos:end="177:57">(<argument pos:start="177:28" pos:end="177:56"><expr pos:start="177:28" pos:end="177:56"><name pos:start="177:28" pos:end="177:37"><name pos:start="177:28" pos:end="177:28">s</name><operator pos:start="177:29" pos:end="177:30">-&gt;</operator><name pos:start="177:31" pos:end="177:37">l1_size</name></name> <operator pos:start="177:39" pos:end="177:39">*</operator> <sizeof pos:start="177:41" pos:end="177:56">sizeof<argument_list pos:start="177:47" pos:end="177:56">(<argument pos:start="177:48" pos:end="177:55"><expr pos:start="177:48" pos:end="177:55"><name pos:start="177:48" pos:end="177:55">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="183:46"><expr pos:start="181:5" pos:end="183:45"><name pos:start="181:5" pos:end="181:7">ret</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <call pos:start="181:11" pos:end="183:45"><name pos:start="181:11" pos:end="181:20">bdrv_pread</name><argument_list pos:start="181:21" pos:end="183:45">(<argument pos:start="181:22" pos:end="181:29"><expr pos:start="181:22" pos:end="181:29"><name pos:start="181:22" pos:end="181:29"><name pos:start="181:22" pos:end="181:23">bs</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:29">file</name></name></expr></argument>, <argument pos:start="181:32" pos:end="181:49"><expr pos:start="181:32" pos:end="181:49"><name pos:start="181:32" pos:end="181:49"><name pos:start="181:32" pos:end="181:32">s</name><operator pos:start="181:33" pos:end="181:34">-&gt;</operator><name pos:start="181:35" pos:end="181:49">l1_table_offset</name></name></expr></argument>, <argument pos:start="181:52" pos:end="181:62"><expr pos:start="181:52" pos:end="181:62"><name pos:start="181:52" pos:end="181:62"><name pos:start="181:52" pos:end="181:52">s</name><operator pos:start="181:53" pos:end="181:54">-&gt;</operator><name pos:start="181:55" pos:end="181:62">l1_table</name></name></expr></argument>,

               <argument pos:start="183:16" pos:end="183:44"><expr pos:start="183:16" pos:end="183:44"><name pos:start="183:16" pos:end="183:25"><name pos:start="183:16" pos:end="183:16">s</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:25">l1_size</name></name> <operator pos:start="183:27" pos:end="183:27">*</operator> <sizeof pos:start="183:29" pos:end="183:44">sizeof<argument_list pos:start="183:35" pos:end="183:44">(<argument pos:start="183:36" pos:end="183:43"><expr pos:start="183:36" pos:end="183:43"><name pos:start="183:36" pos:end="183:43">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="189:5"><if pos:start="185:5" pos:end="189:5">if <condition pos:start="185:8" pos:end="185:16">(<expr pos:start="185:9" pos:end="185:15"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">&lt;</operator> <literal type="number" pos:start="185:15" pos:end="185:15">0</literal></expr>)</condition> <block pos:start="185:18" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:18">

        <goto pos:start="187:9" pos:end="187:18">goto <name pos:start="187:14" pos:end="187:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="193:5" pos:end="197:5">for<control pos:start="193:8" pos:end="193:34">(<init pos:start="193:9" pos:end="193:14"><expr pos:start="193:9" pos:end="193:13"><name pos:start="193:9" pos:end="193:9">i</name> <operator pos:start="193:11" pos:end="193:11">=</operator> <literal type="number" pos:start="193:13" pos:end="193:13">0</literal></expr>;</init><condition pos:start="193:15" pos:end="193:29"><expr pos:start="193:15" pos:end="193:28"><name pos:start="193:15" pos:end="193:15">i</name> <operator pos:start="193:17" pos:end="193:17">&lt;</operator> <name pos:start="193:19" pos:end="193:28"><name pos:start="193:19" pos:end="193:19">s</name><operator pos:start="193:20" pos:end="193:21">-&gt;</operator><name pos:start="193:22" pos:end="193:28">l1_size</name></name></expr>;</condition> <incr pos:start="193:31" pos:end="193:33"><expr pos:start="193:31" pos:end="193:33"><name pos:start="193:31" pos:end="193:31">i</name><operator pos:start="193:32" pos:end="193:33">++</operator></expr></incr>)</control> <block pos:start="193:36" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:38">

        <expr_stmt pos:start="195:9" pos:end="195:38"><expr pos:start="195:9" pos:end="195:37"><call pos:start="195:9" pos:end="195:37"><name pos:start="195:9" pos:end="195:20">be64_to_cpus</name><argument_list pos:start="195:21" pos:end="195:37">(<argument pos:start="195:22" pos:end="195:36"><expr pos:start="195:22" pos:end="195:36"><operator pos:start="195:22" pos:end="195:22">&amp;</operator><name pos:start="195:23" pos:end="195:36"><name pos:start="195:23" pos:end="195:23">s</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:33">l1_table</name><index pos:start="195:34" pos:end="195:36">[<expr pos:start="195:35" pos:end="195:35"><name pos:start="195:35" pos:end="195:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="199:5" pos:end="199:24">/* alloc L2 cache */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:74"><expr pos:start="201:5" pos:end="201:73"><name pos:start="201:5" pos:end="201:15"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:15">l2_cache</name></name> <operator pos:start="201:17" pos:end="201:17">=</operator> <call pos:start="201:19" pos:end="201:73"><name pos:start="201:19" pos:end="201:26">g_malloc</name><argument_list pos:start="201:27" pos:end="201:73">(<argument pos:start="201:28" pos:end="201:72"><expr pos:start="201:28" pos:end="201:72"><name pos:start="201:28" pos:end="201:37"><name pos:start="201:28" pos:end="201:28">s</name><operator pos:start="201:29" pos:end="201:30">-&gt;</operator><name pos:start="201:31" pos:end="201:37">l2_size</name></name> <operator pos:start="201:39" pos:end="201:39">*</operator> <name pos:start="201:41" pos:end="201:53">L2_CACHE_SIZE</name> <operator pos:start="201:55" pos:end="201:55">*</operator> <sizeof pos:start="201:57" pos:end="201:72">sizeof<argument_list pos:start="201:63" pos:end="201:72">(<argument pos:start="201:64" pos:end="201:71"><expr pos:start="201:64" pos:end="201:71"><name pos:start="201:64" pos:end="201:71">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:49"><expr pos:start="203:5" pos:end="203:48"><name pos:start="203:5" pos:end="203:20"><name pos:start="203:5" pos:end="203:5">s</name><operator pos:start="203:6" pos:end="203:7">-&gt;</operator><name pos:start="203:8" pos:end="203:20">cluster_cache</name></name> <operator pos:start="203:22" pos:end="203:22">=</operator> <call pos:start="203:24" pos:end="203:48"><name pos:start="203:24" pos:end="203:31">g_malloc</name><argument_list pos:start="203:32" pos:end="203:48">(<argument pos:start="203:33" pos:end="203:47"><expr pos:start="203:33" pos:end="203:47"><name pos:start="203:33" pos:end="203:47"><name pos:start="203:33" pos:end="203:33">s</name><operator pos:start="203:34" pos:end="203:35">-&gt;</operator><name pos:start="203:36" pos:end="203:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:48"><expr pos:start="205:5" pos:end="205:47"><name pos:start="205:5" pos:end="205:19"><name pos:start="205:5" pos:end="205:5">s</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:19">cluster_data</name></name> <operator pos:start="205:21" pos:end="205:21">=</operator> <call pos:start="205:23" pos:end="205:47"><name pos:start="205:23" pos:end="205:30">g_malloc</name><argument_list pos:start="205:31" pos:end="205:47">(<argument pos:start="205:32" pos:end="205:46"><expr pos:start="205:32" pos:end="205:46"><name pos:start="205:32" pos:end="205:46"><name pos:start="205:32" pos:end="205:32">s</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:46">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:33"><expr pos:start="207:5" pos:end="207:32"><name pos:start="207:5" pos:end="207:27"><name pos:start="207:5" pos:end="207:5">s</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:27">cluster_cache_offset</name></name> <operator pos:start="207:29" pos:end="207:29">=</operator> <operator pos:start="207:31" pos:end="207:31">-</operator><literal type="number" pos:start="207:32" pos:end="207:32">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:36">/* read the backing file name */</comment>

    <if_stmt pos:start="213:5" pos:end="235:5"><if pos:start="213:5" pos:end="235:5">if <condition pos:start="213:8" pos:end="213:40">(<expr pos:start="213:9" pos:end="213:39"><name pos:start="213:9" pos:end="213:34"><name pos:start="213:9" pos:end="213:14">header</name><operator pos:start="213:15" pos:end="213:15">.</operator><name pos:start="213:16" pos:end="213:34">backing_file_offset</name></name> <operator pos:start="213:36" pos:end="213:37">!=</operator> <literal type="number" pos:start="213:39" pos:end="213:39">0</literal></expr>)</condition> <block pos:start="213:42" pos:end="235:5">{<block_content pos:start="215:9" pos:end="233:37">

        <expr_stmt pos:start="215:9" pos:end="215:39"><expr pos:start="215:9" pos:end="215:38"><name pos:start="215:9" pos:end="215:11">len</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <name pos:start="215:15" pos:end="215:38"><name pos:start="215:15" pos:end="215:20">header</name><operator pos:start="215:21" pos:end="215:21">.</operator><name pos:start="215:22" pos:end="215:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="217:9" pos:end="221:9"><if pos:start="217:9" pos:end="221:9">if <condition pos:start="217:12" pos:end="217:23">(<expr pos:start="217:13" pos:end="217:22"><name pos:start="217:13" pos:end="217:15">len</name> <operator pos:start="217:17" pos:end="217:17">&gt;</operator> <literal type="number" pos:start="217:19" pos:end="217:22">1023</literal></expr>)</condition> <block pos:start="217:25" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:23">

            <expr_stmt pos:start="219:13" pos:end="219:23"><expr pos:start="219:13" pos:end="219:22"><name pos:start="219:13" pos:end="219:15">len</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <literal type="number" pos:start="219:19" pos:end="219:22">1023</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="223:9" pos:end="225:42"><expr pos:start="223:9" pos:end="225:41"><name pos:start="223:9" pos:end="223:11">ret</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="225:41"><name pos:start="223:15" pos:end="223:24">bdrv_pread</name><argument_list pos:start="223:25" pos:end="225:41">(<argument pos:start="223:26" pos:end="223:33"><expr pos:start="223:26" pos:end="223:33"><name pos:start="223:26" pos:end="223:33"><name pos:start="223:26" pos:end="223:27">bs</name><operator pos:start="223:28" pos:end="223:29">-&gt;</operator><name pos:start="223:30" pos:end="223:33">file</name></name></expr></argument>, <argument pos:start="223:36" pos:end="223:61"><expr pos:start="223:36" pos:end="223:61"><name pos:start="223:36" pos:end="223:61"><name pos:start="223:36" pos:end="223:41">header</name><operator pos:start="223:42" pos:end="223:42">.</operator><name pos:start="223:43" pos:end="223:61">backing_file_offset</name></name></expr></argument>,

                   <argument pos:start="225:20" pos:end="225:35"><expr pos:start="225:20" pos:end="225:35"><name pos:start="225:20" pos:end="225:35"><name pos:start="225:20" pos:end="225:21">bs</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:35">backing_file</name></name></expr></argument>, <argument pos:start="225:38" pos:end="225:40"><expr pos:start="225:38" pos:end="225:40"><name pos:start="225:38" pos:end="225:40">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="227:9" pos:end="231:9"><if pos:start="227:9" pos:end="231:9">if <condition pos:start="227:12" pos:end="227:20">(<expr pos:start="227:13" pos:end="227:19"><name pos:start="227:13" pos:end="227:15">ret</name> <operator pos:start="227:17" pos:end="227:17">&lt;</operator> <literal type="number" pos:start="227:19" pos:end="227:19">0</literal></expr>)</condition> <block pos:start="227:22" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:22">

            <goto pos:start="229:13" pos:end="229:22">goto <name pos:start="229:18" pos:end="229:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:37"><expr pos:start="233:9" pos:end="233:36"><name pos:start="233:9" pos:end="233:29"><name pos:start="233:9" pos:end="233:10">bs</name><operator pos:start="233:11" pos:end="233:12">-&gt;</operator><name pos:start="233:13" pos:end="233:24">backing_file</name><index pos:start="233:25" pos:end="233:29">[<expr pos:start="233:26" pos:end="233:28"><name pos:start="233:26" pos:end="233:28">len</name></expr>]</index></name> <operator pos:start="233:31" pos:end="233:31">=</operator> <literal type="char" pos:start="233:33" pos:end="233:36">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:53">/* Disable migration when qcow images are used */</comment>

    <expr_stmt pos:start="241:5" pos:end="245:57"><expr pos:start="241:5" pos:end="245:56"><call pos:start="241:5" pos:end="245:56"><name pos:start="241:5" pos:end="241:13">error_set</name><argument_list pos:start="241:14" pos:end="245:56">(<argument pos:start="241:15" pos:end="241:35"><expr pos:start="241:15" pos:end="241:35"><operator pos:start="241:15" pos:end="241:15">&amp;</operator><name pos:start="241:16" pos:end="241:35"><name pos:start="241:16" pos:end="241:16">s</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:35">migration_blocker</name></name></expr></argument>,

              <argument pos:start="243:15" pos:end="243:53"><expr pos:start="243:15" pos:end="243:53"><name pos:start="243:15" pos:end="243:53">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,

              <argument pos:start="245:15" pos:end="245:20"><expr pos:start="245:15" pos:end="245:20"><literal type="string" pos:start="245:15" pos:end="245:20">"qcow"</literal></expr></argument>, <argument pos:start="245:23" pos:end="245:37"><expr pos:start="245:23" pos:end="245:37"><name pos:start="245:23" pos:end="245:37"><name pos:start="245:23" pos:end="245:24">bs</name><operator pos:start="245:25" pos:end="245:26">-&gt;</operator><name pos:start="245:27" pos:end="245:37">device_name</name></name></expr></argument>, <argument pos:start="245:40" pos:end="245:55"><expr pos:start="245:40" pos:end="245:55"><literal type="string" pos:start="245:40" pos:end="245:55">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:46"><expr pos:start="247:5" pos:end="247:45"><call pos:start="247:5" pos:end="247:45"><name pos:start="247:5" pos:end="247:23">migrate_add_blocker</name><argument_list pos:start="247:24" pos:end="247:45">(<argument pos:start="247:25" pos:end="247:44"><expr pos:start="247:25" pos:end="247:44"><name pos:start="247:25" pos:end="247:44"><name pos:start="247:25" pos:end="247:25">s</name><operator pos:start="247:26" pos:end="247:27">-&gt;</operator><name pos:start="247:28" pos:end="247:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:33"><expr pos:start="251:5" pos:end="251:32"><call pos:start="251:5" pos:end="251:32"><name pos:start="251:5" pos:end="251:22">qemu_co_mutex_init</name><argument_list pos:start="251:23" pos:end="251:32">(<argument pos:start="251:24" pos:end="251:31"><expr pos:start="251:24" pos:end="251:31"><operator pos:start="251:24" pos:end="251:24">&amp;</operator><name pos:start="251:25" pos:end="251:31"><name pos:start="251:25" pos:end="251:25">s</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="253:5" pos:end="253:13">return <expr pos:start="253:12" pos:end="253:12"><literal type="number" pos:start="253:12" pos:end="253:12">0</literal></expr>;</return>



 <label pos:start="257:2" pos:end="257:6"><name pos:start="257:2" pos:end="257:5">fail</name>:</label>

    <expr_stmt pos:start="259:5" pos:end="259:24"><expr pos:start="259:5" pos:end="259:23"><call pos:start="259:5" pos:end="259:23"><name pos:start="259:5" pos:end="259:10">g_free</name><argument_list pos:start="259:11" pos:end="259:23">(<argument pos:start="259:12" pos:end="259:22"><expr pos:start="259:12" pos:end="259:22"><name pos:start="259:12" pos:end="259:22"><name pos:start="259:12" pos:end="259:12">s</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:24"><expr pos:start="261:5" pos:end="261:23"><call pos:start="261:5" pos:end="261:23"><name pos:start="261:5" pos:end="261:10">g_free</name><argument_list pos:start="261:11" pos:end="261:23">(<argument pos:start="261:12" pos:end="261:22"><expr pos:start="261:12" pos:end="261:22"><name pos:start="261:12" pos:end="261:22"><name pos:start="261:12" pos:end="261:12">s</name><operator pos:start="261:13" pos:end="261:14">-&gt;</operator><name pos:start="261:15" pos:end="261:22">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:29"><expr pos:start="263:5" pos:end="263:28"><call pos:start="263:5" pos:end="263:28"><name pos:start="263:5" pos:end="263:10">g_free</name><argument_list pos:start="263:11" pos:end="263:28">(<argument pos:start="263:12" pos:end="263:27"><expr pos:start="263:12" pos:end="263:27"><name pos:start="263:12" pos:end="263:27"><name pos:start="263:12" pos:end="263:12">s</name><operator pos:start="263:13" pos:end="263:14">-&gt;</operator><name pos:start="263:15" pos:end="263:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:28"><expr pos:start="265:5" pos:end="265:27"><call pos:start="265:5" pos:end="265:27"><name pos:start="265:5" pos:end="265:10">g_free</name><argument_list pos:start="265:11" pos:end="265:27">(<argument pos:start="265:12" pos:end="265:26"><expr pos:start="265:12" pos:end="265:26"><name pos:start="265:12" pos:end="265:26"><name pos:start="265:12" pos:end="265:12">s</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:26">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="267:5" pos:end="267:15">return <expr pos:start="267:12" pos:end="267:14"><name pos:start="267:12" pos:end="267:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
