<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4042.c" pos:tabs="8"><function pos:start="1:1" pos:end="312:15"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:40">ff_h264_decode_picture_parameter_set</name><parameter_list pos:start="1:41" pos:end="3:75">(<parameter pos:start="1:42" pos:end="1:58"><decl pos:start="1:42" pos:end="1:58"><type pos:start="1:42" pos:end="1:58"><name pos:start="1:42" pos:end="1:54">GetBitContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">gb</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:81"><decl pos:start="1:61" pos:end="1:81"><type pos:start="1:61" pos:end="1:81"><name pos:start="1:61" pos:end="1:74">AVCodecContext</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:81">avctx</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:58"><decl pos:start="3:42" pos:end="3:58"><type pos:start="3:42" pos:end="3:58"><name pos:start="3:42" pos:end="3:54">H264ParamSets</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:58">ps</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:74"><decl pos:start="3:61" pos:end="3:74"><type pos:start="3:61" pos:end="3:74"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:74">bit_length</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="312:15">{<block_content pos:start="7:5" pos:end="312:15">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVBufferRef</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:24">pps_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">SPS</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">sps</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:23">pps_id</name> <init pos:start="11:25" pos:end="11:43">= <expr pos:start="11:27" pos:end="11:43"><call pos:start="11:27" pos:end="11:43"><name pos:start="11:27" pos:end="11:39">get_ue_golomb</name><argument_list pos:start="11:40" pos:end="11:43">(<argument pos:start="11:41" pos:end="11:42"><expr pos:start="11:41" pos:end="11:42"><name pos:start="11:41" pos:end="11:42">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">PPS</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:12">pps</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">qp_bd_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">bits_left</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="312:15"><if pos:start="23:5" pos:end="312:15">if <condition pos:start="23:8" pos:end="23:32">(<expr pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:14">pps_id</name> <operator pos:start="23:16" pos:end="23:17">&gt;=</operator> <name pos:start="23:19" pos:end="23:31">MAX_PPS_COUNT</name></expr>)</condition> <block pos:start="23:34" pos:end="312:15">{<block_content pos:start="25:9" pos:end="312:15">

        <expr_stmt pos:start="25:9" pos:end="25:72"><expr pos:start="25:9" pos:end="25:71"><call pos:start="25:9" pos:end="25:71"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:71">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:62"><expr pos:start="25:37" pos:end="25:62"><literal type="string" pos:start="25:37" pos:end="25:62">"pps_id %u out of range\n"</literal></expr></argument>, <argument pos:start="25:65" pos:end="25:70"><expr pos:start="25:65" pos:end="25:70"><name pos:start="25:65" pos:end="25:70">pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:35">return <expr pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:34">AVERROR_INVALIDDATA</name></expr>;</return>




    <expr_stmt pos:start="32:5" pos:end="32:45"><expr pos:start="32:5" pos:end="32:44"><name pos:start="32:5" pos:end="32:11">pps_buf</name> <operator pos:start="32:13" pos:end="32:13">=</operator> <call pos:start="32:15" pos:end="32:44"><name pos:start="32:15" pos:end="32:30">av_buffer_allocz</name><argument_list pos:start="32:31" pos:end="32:44">(<argument pos:start="32:32" pos:end="32:43"><expr pos:start="32:32" pos:end="32:43"><sizeof pos:start="32:32" pos:end="32:43">sizeof<argument_list pos:start="32:38" pos:end="32:43">(<argument pos:start="32:39" pos:end="32:42"><expr pos:start="32:39" pos:end="32:42"><operator pos:start="32:39" pos:end="32:39">*</operator><name pos:start="32:40" pos:end="32:42">pps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="34:5" pos:end="36:31"><if pos:start="34:5" pos:end="36:31">if <condition pos:start="34:8" pos:end="34:17">(<expr pos:start="34:9" pos:end="34:16"><operator pos:start="34:9" pos:end="34:9">!</operator><name pos:start="34:10" pos:end="34:16">pps_buf</name></expr>)</condition><block type="pseudo" pos:start="36:9" pos:end="36:31"><block_content pos:start="36:9" pos:end="36:31">

        <return pos:start="36:9" pos:end="36:31">return <expr pos:start="36:16" pos:end="36:30"><call pos:start="36:16" pos:end="36:30"><name pos:start="36:16" pos:end="36:22">AVERROR</name><argument_list pos:start="36:23" pos:end="36:30">(<argument pos:start="36:24" pos:end="36:29"><expr pos:start="36:24" pos:end="36:29"><name pos:start="36:24" pos:end="36:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="38:5" pos:end="38:30"><expr pos:start="38:5" pos:end="38:29"><name pos:start="38:5" pos:end="38:7">pps</name> <operator pos:start="38:9" pos:end="38:9">=</operator> <operator pos:start="38:11" pos:end="38:11">(</operator><name pos:start="38:12" pos:end="38:14">PPS</name><operator pos:start="38:15" pos:end="38:15">*</operator><operator pos:start="38:16" pos:end="38:16">)</operator><name pos:start="38:17" pos:end="38:29"><name pos:start="38:17" pos:end="38:23">pps_buf</name><operator pos:start="38:24" pos:end="38:25">-&gt;</operator><name pos:start="38:26" pos:end="38:29">data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="42:5" pos:end="42:49"><expr pos:start="42:5" pos:end="42:48"><name pos:start="42:5" pos:end="42:18"><name pos:start="42:5" pos:end="42:7">pps</name><operator pos:start="42:8" pos:end="42:9">-&gt;</operator><name pos:start="42:10" pos:end="42:18">data_size</name></name> <operator pos:start="42:20" pos:end="42:20">=</operator> <name pos:start="42:22" pos:end="42:35"><name pos:start="42:22" pos:end="42:23">gb</name><operator pos:start="42:24" pos:end="42:25">-&gt;</operator><name pos:start="42:26" pos:end="42:35">buffer_end</name></name> <operator pos:start="42:37" pos:end="42:37">-</operator> <name pos:start="42:39" pos:end="42:48"><name pos:start="42:39" pos:end="42:40">gb</name><operator pos:start="42:41" pos:end="42:42">-&gt;</operator><name pos:start="42:43" pos:end="42:48">buffer</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="44:5" pos:end="312:15"><if pos:start="44:5" pos:end="312:15">if <condition pos:start="44:8" pos:end="44:43">(<expr pos:start="44:9" pos:end="44:42"><name pos:start="44:9" pos:end="44:22"><name pos:start="44:9" pos:end="44:11">pps</name><operator pos:start="44:12" pos:end="44:13">-&gt;</operator><name pos:start="44:14" pos:end="44:22">data_size</name></name> <operator pos:start="44:24" pos:end="44:24">&gt;</operator> <sizeof pos:start="44:26" pos:end="44:42">sizeof<argument_list pos:start="44:32" pos:end="44:42">(<argument pos:start="44:33" pos:end="44:41"><expr pos:start="44:33" pos:end="44:41"><name pos:start="44:33" pos:end="44:41"><name pos:start="44:33" pos:end="44:35">pps</name><operator pos:start="44:36" pos:end="44:37">-&gt;</operator><name pos:start="44:38" pos:end="44:41">data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="44:45" pos:end="312:15">{<block_content pos:start="46:9" pos:end="312:15">

        <expr_stmt pos:start="46:9" pos:end="50:50"><expr pos:start="46:9" pos:end="50:49"><call pos:start="46:9" pos:end="50:49"><name pos:start="46:9" pos:end="46:14">av_log</name><argument_list pos:start="46:15" pos:end="50:49">(<argument pos:start="46:16" pos:end="46:20"><expr pos:start="46:16" pos:end="46:20"><name pos:start="46:16" pos:end="46:20">avctx</name></expr></argument>, <argument pos:start="46:23" pos:end="46:36"><expr pos:start="46:23" pos:end="46:36"><name pos:start="46:23" pos:end="46:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="46:39" pos:end="48:58"><expr pos:start="46:39" pos:end="48:58"><literal type="string" pos:start="46:39" pos:end="46:72">"Truncating likely oversized PPS "</literal>

               <literal type="string" pos:start="48:16" pos:end="48:19">"(%"</literal><name pos:start="48:20" pos:end="48:33">SIZE_SPECIFIER</name><literal type="string" pos:start="48:34" pos:end="48:39">" &gt; %"</literal><name pos:start="48:40" pos:end="48:53">SIZE_SPECIFIER</name><literal type="string" pos:start="48:54" pos:end="48:58">")\n"</literal></expr></argument>,

               <argument pos:start="50:16" pos:end="50:29"><expr pos:start="50:16" pos:end="50:29"><name pos:start="50:16" pos:end="50:29"><name pos:start="50:16" pos:end="50:18">pps</name><operator pos:start="50:19" pos:end="50:20">-&gt;</operator><name pos:start="50:21" pos:end="50:29">data_size</name></name></expr></argument>, <argument pos:start="50:32" pos:end="50:48"><expr pos:start="50:32" pos:end="50:48"><sizeof pos:start="50:32" pos:end="50:48">sizeof<argument_list pos:start="50:38" pos:end="50:48">(<argument pos:start="50:39" pos:end="50:47"><expr pos:start="50:39" pos:end="50:47"><name pos:start="50:39" pos:end="50:47"><name pos:start="50:39" pos:end="50:41">pps</name><operator pos:start="50:42" pos:end="50:43">-&gt;</operator><name pos:start="50:44" pos:end="50:47">data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="52:9" pos:end="52:43"><expr pos:start="52:9" pos:end="52:42"><name pos:start="52:9" pos:end="52:22"><name pos:start="52:9" pos:end="52:11">pps</name><operator pos:start="52:12" pos:end="52:13">-&gt;</operator><name pos:start="52:14" pos:end="52:22">data_size</name></name> <operator pos:start="52:24" pos:end="52:24">=</operator> <sizeof pos:start="52:26" pos:end="52:42">sizeof<argument_list pos:start="52:32" pos:end="52:42">(<argument pos:start="52:33" pos:end="52:41"><expr pos:start="52:33" pos:end="52:41"><name pos:start="52:33" pos:end="52:41"><name pos:start="52:33" pos:end="52:35">pps</name><operator pos:start="52:36" pos:end="52:37">-&gt;</operator><name pos:start="52:38" pos:end="52:41">data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


    <expr_stmt pos:start="55:5" pos:end="55:50"><expr pos:start="55:5" pos:end="55:49"><call pos:start="55:5" pos:end="55:49"><name pos:start="55:5" pos:end="55:10">memcpy</name><argument_list pos:start="55:11" pos:end="55:49">(<argument pos:start="55:12" pos:end="55:20"><expr pos:start="55:12" pos:end="55:20"><name pos:start="55:12" pos:end="55:20"><name pos:start="55:12" pos:end="55:14">pps</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:20">data</name></name></expr></argument>, <argument pos:start="55:23" pos:end="55:32"><expr pos:start="55:23" pos:end="55:32"><name pos:start="55:23" pos:end="55:32"><name pos:start="55:23" pos:end="55:24">gb</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:32">buffer</name></name></expr></argument>, <argument pos:start="55:35" pos:end="55:48"><expr pos:start="55:35" pos:end="55:48"><name pos:start="55:35" pos:end="55:48"><name pos:start="55:35" pos:end="55:37">pps</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:48">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:39"><expr pos:start="59:5" pos:end="59:38"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:7">pps</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:15">sps_id</name></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:38"><name pos:start="59:19" pos:end="59:34">get_ue_golomb_31</name><argument_list pos:start="59:35" pos:end="59:38">(<argument pos:start="59:36" pos:end="59:37"><expr pos:start="59:36" pos:end="59:37"><name pos:start="59:36" pos:end="59:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="312:15"><if pos:start="61:5" pos:end="312:15">if <condition pos:start="61:8" pos:end="63:35">(<expr pos:start="61:9" pos:end="63:34"><operator pos:start="61:9" pos:end="61:9">(</operator><name pos:start="61:10" pos:end="61:17">unsigned</name><operator pos:start="61:18" pos:end="61:18">)</operator><name pos:start="61:19" pos:end="61:29"><name pos:start="61:19" pos:end="61:21">pps</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:29">sps_id</name></name> <operator pos:start="61:31" pos:end="61:32">&gt;=</operator> <name pos:start="61:34" pos:end="61:46">MAX_SPS_COUNT</name> <operator pos:start="61:48" pos:end="61:49">||</operator>

        <operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:34"><name pos:start="63:10" pos:end="63:11">ps</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:21">sps_list</name><index pos:start="63:22" pos:end="63:34">[<expr pos:start="63:23" pos:end="63:33"><name pos:start="63:23" pos:end="63:33"><name pos:start="63:23" pos:end="63:25">pps</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:33">sps_id</name></name></expr>]</index></name></expr>)</condition> <block pos:start="63:37" pos:end="312:15">{<block_content pos:start="65:9" pos:end="312:15">

        <expr_stmt pos:start="65:9" pos:end="65:77"><expr pos:start="65:9" pos:end="65:76"><call pos:start="65:9" pos:end="65:76"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:76">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:62"><expr pos:start="65:37" pos:end="65:62"><literal type="string" pos:start="65:37" pos:end="65:62">"sps_id %u out of range\n"</literal></expr></argument>, <argument pos:start="65:65" pos:end="65:75"><expr pos:start="65:65" pos:end="65:75"><name pos:start="65:65" pos:end="65:75"><name pos:start="65:65" pos:end="65:67">pps</name><operator pos:start="65:68" pos:end="65:69">-&gt;</operator><name pos:start="65:70" pos:end="65:75">sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="70:5" pos:end="70:54"><expr pos:start="70:5" pos:end="70:53"><name pos:start="70:5" pos:end="70:7">sps</name> <operator pos:start="70:9" pos:end="70:9">=</operator> <operator pos:start="70:11" pos:end="70:11">(</operator><specifier pos:start="70:12" pos:end="70:16">const</specifier> <name pos:start="70:18" pos:end="70:20">SPS</name><operator pos:start="70:21" pos:end="70:21">*</operator><operator pos:start="70:22" pos:end="70:22">)</operator><name pos:start="70:23" pos:end="70:47"><name pos:start="70:23" pos:end="70:24">ps</name><operator pos:start="70:25" pos:end="70:26">-&gt;</operator><name pos:start="70:27" pos:end="70:34">sps_list</name><index pos:start="70:35" pos:end="70:47">[<expr pos:start="70:36" pos:end="70:46"><name pos:start="70:36" pos:end="70:46"><name pos:start="70:36" pos:end="70:38">pps</name><operator pos:start="70:39" pos:end="70:40">-&gt;</operator><name pos:start="70:41" pos:end="70:46">sps_id</name></name></expr>]</index></name><operator pos:start="70:48" pos:end="70:49">-&gt;</operator><name pos:start="70:50" pos:end="70:53">data</name></expr>;</expr_stmt>

    <if_stmt pos:start="72:5" pos:end="312:15"><if pos:start="72:5" pos:end="82:5">if <condition pos:start="72:8" pos:end="72:33">(<expr pos:start="72:9" pos:end="72:32"><name pos:start="72:9" pos:end="72:27"><name pos:start="72:9" pos:end="72:11">sps</name><operator pos:start="72:12" pos:end="72:13">-&gt;</operator><name pos:start="72:14" pos:end="72:27">bit_depth_luma</name></name> <operator pos:start="72:29" pos:end="72:29">&gt;</operator> <literal type="number" pos:start="72:31" pos:end="72:32">14</literal></expr>)</condition> <block pos:start="72:35" pos:end="82:5">{<block_content pos:start="74:9" pos:end="78:36">

        <expr_stmt pos:start="74:9" pos:end="78:36"><expr pos:start="74:9" pos:end="78:35"><call pos:start="74:9" pos:end="78:35"><name pos:start="74:9" pos:end="74:14">av_log</name><argument_list pos:start="74:15" pos:end="78:35">(<argument pos:start="74:16" pos:end="74:20"><expr pos:start="74:16" pos:end="74:20"><name pos:start="74:16" pos:end="74:20">avctx</name></expr></argument>, <argument pos:start="74:23" pos:end="74:34"><expr pos:start="74:23" pos:end="74:34"><name pos:start="74:23" pos:end="74:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="76:16" pos:end="76:44"><expr pos:start="76:16" pos:end="76:44"><literal type="string" pos:start="76:16" pos:end="76:44">"Invalid luma bit depth=%d\n"</literal></expr></argument>,

               <argument pos:start="78:16" pos:end="78:34"><expr pos:start="78:16" pos:end="78:34"><name pos:start="78:16" pos:end="78:34"><name pos:start="78:16" pos:end="78:18">sps</name><operator pos:start="78:19" pos:end="78:20">-&gt;</operator><name pos:start="78:21" pos:end="78:34">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="82:7" pos:end="312:15">else if <condition pos:start="82:15" pos:end="82:70">(<expr pos:start="82:16" pos:end="82:69"><name pos:start="82:16" pos:end="82:34"><name pos:start="82:16" pos:end="82:18">sps</name><operator pos:start="82:19" pos:end="82:20">-&gt;</operator><name pos:start="82:21" pos:end="82:34">bit_depth_luma</name></name> <operator pos:start="82:36" pos:end="82:37">==</operator> <literal type="number" pos:start="82:39" pos:end="82:40">11</literal> <operator pos:start="82:42" pos:end="82:43">||</operator> <name pos:start="82:45" pos:end="82:63"><name pos:start="82:45" pos:end="82:47">sps</name><operator pos:start="82:48" pos:end="82:49">-&gt;</operator><name pos:start="82:50" pos:end="82:63">bit_depth_luma</name></name> <operator pos:start="82:65" pos:end="82:66">==</operator> <literal type="number" pos:start="82:68" pos:end="82:69">13</literal></expr>)</condition> <block pos:start="82:72" pos:end="312:15">{<block_content pos:start="84:9" pos:end="312:15">

        <expr_stmt pos:start="84:9" pos:end="88:36"><expr pos:start="84:9" pos:end="88:35"><call pos:start="84:9" pos:end="88:35"><name pos:start="84:9" pos:end="84:14">av_log</name><argument_list pos:start="84:15" pos:end="88:35">(<argument pos:start="84:16" pos:end="84:20"><expr pos:start="84:16" pos:end="84:20"><name pos:start="84:16" pos:end="84:20">avctx</name></expr></argument>, <argument pos:start="84:23" pos:end="84:34"><expr pos:start="84:23" pos:end="84:34"><name pos:start="84:23" pos:end="84:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="86:16" pos:end="86:50"><expr pos:start="86:16" pos:end="86:50"><literal type="string" pos:start="86:16" pos:end="86:50">"Unimplemented luma bit depth=%d\n"</literal></expr></argument>,

               <argument pos:start="88:16" pos:end="88:34"><expr pos:start="88:16" pos:end="88:34"><name pos:start="88:16" pos:end="88:34"><name pos:start="88:16" pos:end="88:18">sps</name><operator pos:start="88:19" pos:end="88:20">-&gt;</operator><name pos:start="88:21" pos:end="88:34">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="90:9" pos:end="90:35"><expr pos:start="90:9" pos:end="90:34"><name pos:start="90:9" pos:end="90:11">ret</name> <operator pos:start="90:13" pos:end="90:13">=</operator> <name pos:start="90:15" pos:end="90:34">AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>





    <expr_stmt pos:start="96:5" pos:end="96:43"><expr pos:start="96:5" pos:end="96:42"><name pos:start="96:5" pos:end="96:14"><name pos:start="96:5" pos:end="96:7">pps</name><operator pos:start="96:8" pos:end="96:9">-&gt;</operator><name pos:start="96:10" pos:end="96:14">cabac</name></name>             <operator pos:start="96:28" pos:end="96:28">=</operator> <call pos:start="96:30" pos:end="96:42"><name pos:start="96:30" pos:end="96:38">get_bits1</name><argument_list pos:start="96:39" pos:end="96:42">(<argument pos:start="96:40" pos:end="96:41"><expr pos:start="96:40" pos:end="96:41"><name pos:start="96:40" pos:end="96:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="98:5" pos:end="98:43"><expr pos:start="98:5" pos:end="98:42"><name pos:start="98:5" pos:end="98:26"><name pos:start="98:5" pos:end="98:7">pps</name><operator pos:start="98:8" pos:end="98:9">-&gt;</operator><name pos:start="98:10" pos:end="98:26">pic_order_present</name></name> <operator pos:start="98:28" pos:end="98:28">=</operator> <call pos:start="98:30" pos:end="98:42"><name pos:start="98:30" pos:end="98:38">get_bits1</name><argument_list pos:start="98:39" pos:end="98:42">(<argument pos:start="98:40" pos:end="98:41"><expr pos:start="98:40" pos:end="98:41"><name pos:start="98:40" pos:end="98:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="100:5" pos:end="100:51"><expr pos:start="100:5" pos:end="100:50"><name pos:start="100:5" pos:end="100:26"><name pos:start="100:5" pos:end="100:7">pps</name><operator pos:start="100:8" pos:end="100:9">-&gt;</operator><name pos:start="100:10" pos:end="100:26">slice_group_count</name></name> <operator pos:start="100:28" pos:end="100:28">=</operator> <call pos:start="100:30" pos:end="100:46"><name pos:start="100:30" pos:end="100:42">get_ue_golomb</name><argument_list pos:start="100:43" pos:end="100:46">(<argument pos:start="100:44" pos:end="100:45"><expr pos:start="100:44" pos:end="100:45"><name pos:start="100:44" pos:end="100:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="100:48" pos:end="100:48">+</operator> <literal type="number" pos:start="100:50" pos:end="100:50">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="102:5" pos:end="312:15"><if pos:start="102:5" pos:end="312:15">if <condition pos:start="102:8" pos:end="102:35">(<expr pos:start="102:9" pos:end="102:34"><name pos:start="102:9" pos:end="102:30"><name pos:start="102:9" pos:end="102:11">pps</name><operator pos:start="102:12" pos:end="102:13">-&gt;</operator><name pos:start="102:14" pos:end="102:30">slice_group_count</name></name> <operator pos:start="102:32" pos:end="102:32">&gt;</operator> <literal type="number" pos:start="102:34" pos:end="102:34">1</literal></expr>)</condition> <block pos:start="102:37" pos:end="312:15">{<block_content pos:start="104:9" pos:end="312:15">

        <expr_stmt pos:start="104:9" pos:end="104:57"><expr pos:start="104:9" pos:end="104:56"><name pos:start="104:9" pos:end="104:36"><name pos:start="104:9" pos:end="104:11">pps</name><operator pos:start="104:12" pos:end="104:13">-&gt;</operator><name pos:start="104:14" pos:end="104:36">mb_slice_group_map_type</name></name> <operator pos:start="104:38" pos:end="104:38">=</operator> <call pos:start="104:40" pos:end="104:56"><name pos:start="104:40" pos:end="104:52">get_ue_golomb</name><argument_list pos:start="104:53" pos:end="104:56">(<argument pos:start="104:54" pos:end="104:55"><expr pos:start="104:54" pos:end="104:55"><name pos:start="104:54" pos:end="104:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="106:9" pos:end="106:59"><expr pos:start="106:9" pos:end="106:58"><call pos:start="106:9" pos:end="106:58"><name pos:start="106:9" pos:end="106:14">av_log</name><argument_list pos:start="106:15" pos:end="106:58">(<argument pos:start="106:16" pos:end="106:20"><expr pos:start="106:16" pos:end="106:20"><name pos:start="106:16" pos:end="106:20">avctx</name></expr></argument>, <argument pos:start="106:23" pos:end="106:34"><expr pos:start="106:23" pos:end="106:34"><name pos:start="106:23" pos:end="106:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="106:37" pos:end="106:57"><expr pos:start="106:37" pos:end="106:57"><literal type="string" pos:start="106:37" pos:end="106:57">"FMO not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="108:9" pos:end="312:15">switch <condition pos:start="108:16" pos:end="108:45">(<expr pos:start="108:17" pos:end="108:44"><name pos:start="108:17" pos:end="108:44"><name pos:start="108:17" pos:end="108:19">pps</name><operator pos:start="108:20" pos:end="108:21">-&gt;</operator><name pos:start="108:22" pos:end="108:44">mb_slice_group_map_type</name></name></expr>)</condition> <block pos:start="108:47" pos:end="312:15">{<block_content pos:start="110:9" pos:end="312:15">

        <case pos:start="110:9" pos:end="119:0">case <expr pos:start="110:14" pos:end="110:14"><literal type="number" pos:start="110:14" pos:end="110:14">0</literal></expr>:</case>

<cpp:if pos:start="112:1" pos:end="112:5">#<cpp:directive pos:start="112:2" pos:end="112:3">if</cpp:directive> <expr pos:start="112:5" pos:end="112:5"><literal type="number" pos:start="112:5" pos:end="112:5">0</literal></expr></cpp:if>

    |       for (i = 0; i &lt;= num_slice_groups_minus1; i++)  |   |      |

    |           run_length[i]                               |1  |ue(v) |

<cpp:endif pos:start="118:1" pos:end="118:6">#<cpp:directive pos:start="118:2" pos:end="118:6">endif</cpp:directive></cpp:endif>

            <break pos:start="120:13" pos:end="120:18">break;</break>

        <case pos:start="122:9" pos:end="135:0">case <expr pos:start="122:14" pos:end="122:14"><literal type="number" pos:start="122:14" pos:end="122:14">2</literal></expr>:</case>

<cpp:if pos:start="124:1" pos:end="124:5">#<cpp:directive pos:start="124:2" pos:end="124:3">if</cpp:directive> <expr pos:start="124:5" pos:end="124:5"><literal type="number" pos:start="124:5" pos:end="124:5">0</literal></expr></cpp:if>

    |       for (i = 0; i &lt; num_slice_groups_minus1; i++) { |   |      |

    |           top_left_mb[i]                              |1  |ue(v) |

    |           bottom_right_mb[i]                          |1  |ue(v) |

    |       }                                               |   |      |

<cpp:endif pos:start="134:1" pos:end="134:6">#<cpp:directive pos:start="134:2" pos:end="134:6">endif</cpp:directive></cpp:endif>

            <break pos:start="136:13" pos:end="136:18">break;</break>

        <case pos:start="138:9" pos:end="138:15">case <expr pos:start="138:14" pos:end="138:14"><literal type="number" pos:start="138:14" pos:end="138:14">3</literal></expr>:</case>

        <case pos:start="140:9" pos:end="140:15">case <expr pos:start="140:14" pos:end="140:14"><literal type="number" pos:start="140:14" pos:end="140:14">4</literal></expr>:</case>

        <case pos:start="142:9" pos:end="151:0">case <expr pos:start="142:14" pos:end="142:14"><literal type="number" pos:start="142:14" pos:end="142:14">5</literal></expr>:</case>

<cpp:if pos:start="144:1" pos:end="144:5">#<cpp:directive pos:start="144:2" pos:end="144:3">if</cpp:directive> <expr pos:start="144:5" pos:end="144:5"><literal type="number" pos:start="144:5" pos:end="144:5">0</literal></expr></cpp:if>

    |       slice_group_change_direction_flag               |1  |u(1)  |

    |       slice_group_change_rate_minus1                  |1  |ue(v) |

<cpp:endif pos:start="150:1" pos:end="150:6">#<cpp:directive pos:start="150:2" pos:end="150:6">endif</cpp:directive></cpp:endif>

            <break pos:start="152:13" pos:end="152:18">break;</break>

        <case pos:start="154:9" pos:end="165:0">case <expr pos:start="154:14" pos:end="154:14"><literal type="number" pos:start="154:14" pos:end="154:14">6</literal></expr>:</case>

<cpp:if pos:start="156:1" pos:end="156:5">#<cpp:directive pos:start="156:2" pos:end="156:3">if</cpp:directive> <expr pos:start="156:5" pos:end="156:5"><literal type="number" pos:start="156:5" pos:end="156:5">0</literal></expr></cpp:if>

    |       slice_group_id_cnt_minus1                       |1  |ue(v) |

    |       for (i = 0; i &lt;= slice_group_id_cnt_minus1; i++)|   |      |

    |           slice_group_id[i]                           |1  |u(v)  |

<cpp:endif pos:start="164:1" pos:end="164:6">#<cpp:directive pos:start="164:2" pos:end="164:6">endif</cpp:directive></cpp:endif>

            <break pos:start="166:13" pos:end="166:18">break;</break>



    <expr_stmt pos:start="170:5" pos:end="170:46"><expr pos:start="170:5" pos:end="170:45"><name pos:start="170:5" pos:end="170:21"><name pos:start="170:5" pos:end="170:7">pps</name><operator pos:start="170:8" pos:end="170:9">-&gt;</operator><name pos:start="170:10" pos:end="170:18">ref_count</name><index pos:start="170:19" pos:end="170:21">[<expr pos:start="170:20" pos:end="170:20"><literal type="number" pos:start="170:20" pos:end="170:20">0</literal></expr>]</index></name> <operator pos:start="170:23" pos:end="170:23">=</operator> <call pos:start="170:25" pos:end="170:41"><name pos:start="170:25" pos:end="170:37">get_ue_golomb</name><argument_list pos:start="170:38" pos:end="170:41">(<argument pos:start="170:39" pos:end="170:40"><expr pos:start="170:39" pos:end="170:40"><name pos:start="170:39" pos:end="170:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="170:43" pos:end="170:43">+</operator> <literal type="number" pos:start="170:45" pos:end="170:45">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="172:5" pos:end="172:46"><expr pos:start="172:5" pos:end="172:45"><name pos:start="172:5" pos:end="172:21"><name pos:start="172:5" pos:end="172:7">pps</name><operator pos:start="172:8" pos:end="172:9">-&gt;</operator><name pos:start="172:10" pos:end="172:18">ref_count</name><index pos:start="172:19" pos:end="172:21">[<expr pos:start="172:20" pos:end="172:20"><literal type="number" pos:start="172:20" pos:end="172:20">1</literal></expr>]</index></name> <operator pos:start="172:23" pos:end="172:23">=</operator> <call pos:start="172:25" pos:end="172:41"><name pos:start="172:25" pos:end="172:37">get_ue_golomb</name><argument_list pos:start="172:38" pos:end="172:41">(<argument pos:start="172:39" pos:end="172:40"><expr pos:start="172:39" pos:end="172:40"><name pos:start="172:39" pos:end="172:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="172:43" pos:end="172:43">+</operator> <literal type="number" pos:start="172:45" pos:end="172:45">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="174:5" pos:end="312:15"><if pos:start="174:5" pos:end="312:15">if <condition pos:start="174:8" pos:end="174:73">(<expr pos:start="174:9" pos:end="174:72"><name pos:start="174:9" pos:end="174:25"><name pos:start="174:9" pos:end="174:11">pps</name><operator pos:start="174:12" pos:end="174:13">-&gt;</operator><name pos:start="174:14" pos:end="174:22">ref_count</name><index pos:start="174:23" pos:end="174:25">[<expr pos:start="174:24" pos:end="174:24"><literal type="number" pos:start="174:24" pos:end="174:24">0</literal></expr>]</index></name> <operator pos:start="174:27" pos:end="174:27">-</operator> <literal type="number" pos:start="174:29" pos:end="174:29">1</literal> <operator pos:start="174:31" pos:end="174:31">&gt;</operator> <literal type="number" pos:start="174:33" pos:end="174:36">32</literal> <operator pos:start="174:36" pos:end="174:36">-</operator> <literal type="number" pos:start="174:38" pos:end="174:38">1</literal> <operator pos:start="174:40" pos:end="174:41">||</operator> <name pos:start="174:43" pos:end="174:59"><name pos:start="174:43" pos:end="174:45">pps</name><operator pos:start="174:46" pos:end="174:47">-&gt;</operator><name pos:start="174:48" pos:end="174:56">ref_count</name><index pos:start="174:57" pos:end="174:59">[<expr pos:start="174:58" pos:end="174:58"><literal type="number" pos:start="174:58" pos:end="174:58">1</literal></expr>]</index></name> <operator pos:start="174:61" pos:end="174:61">-</operator> <literal type="number" pos:start="174:63" pos:end="174:63">1</literal> <operator pos:start="174:65" pos:end="174:65">&gt;</operator> <literal type="number" pos:start="174:67" pos:end="174:70">32</literal> <operator pos:start="174:70" pos:end="174:70">-</operator> <literal type="number" pos:start="174:72" pos:end="174:72">1</literal></expr>)</condition> <block pos:start="174:75" pos:end="312:15">{<block_content pos:start="176:9" pos:end="312:15">

        <expr_stmt pos:start="176:9" pos:end="176:66"><expr pos:start="176:9" pos:end="176:65"><call pos:start="176:9" pos:end="176:65"><name pos:start="176:9" pos:end="176:14">av_log</name><argument_list pos:start="176:15" pos:end="176:65">(<argument pos:start="176:16" pos:end="176:20"><expr pos:start="176:16" pos:end="176:20"><name pos:start="176:16" pos:end="176:20">avctx</name></expr></argument>, <argument pos:start="176:23" pos:end="176:34"><expr pos:start="176:23" pos:end="176:34"><name pos:start="176:23" pos:end="176:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="176:37" pos:end="176:64"><expr pos:start="176:37" pos:end="176:64"><literal type="string" pos:start="176:37" pos:end="176:64">"reference overflow (pps)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






    <expr_stmt pos:start="183:5" pos:end="183:49"><expr pos:start="183:5" pos:end="183:48"><name pos:start="183:5" pos:end="183:16">qp_bd_offset</name> <operator pos:start="183:18" pos:end="183:18">=</operator> <literal type="number" pos:start="183:20" pos:end="183:20">6</literal> <operator pos:start="183:22" pos:end="183:22">*</operator> <operator pos:start="183:24" pos:end="183:24">(</operator><name pos:start="183:25" pos:end="183:43"><name pos:start="183:25" pos:end="183:27">sps</name><operator pos:start="183:28" pos:end="183:29">-&gt;</operator><name pos:start="183:30" pos:end="183:43">bit_depth_luma</name></name> <operator pos:start="183:45" pos:end="183:45">-</operator> <literal type="number" pos:start="183:47" pos:end="183:47">8</literal><operator pos:start="183:48" pos:end="183:48">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:62"><expr pos:start="187:5" pos:end="187:61"><name pos:start="187:5" pos:end="187:22"><name pos:start="187:5" pos:end="187:7">pps</name><operator pos:start="187:8" pos:end="187:9">-&gt;</operator><name pos:start="187:10" pos:end="187:22">weighted_pred</name></name>                        <operator pos:start="187:47" pos:end="187:47">=</operator> <call pos:start="187:49" pos:end="187:61"><name pos:start="187:49" pos:end="187:57">get_bits1</name><argument_list pos:start="187:58" pos:end="187:61">(<argument pos:start="187:59" pos:end="187:60"><expr pos:start="187:59" pos:end="187:60"><name pos:start="187:59" pos:end="187:60">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:64"><expr pos:start="189:5" pos:end="189:63"><name pos:start="189:5" pos:end="189:28"><name pos:start="189:5" pos:end="189:7">pps</name><operator pos:start="189:8" pos:end="189:9">-&gt;</operator><name pos:start="189:10" pos:end="189:28">weighted_bipred_idc</name></name>                  <operator pos:start="189:47" pos:end="189:47">=</operator> <call pos:start="189:49" pos:end="189:63"><name pos:start="189:49" pos:end="189:56">get_bits</name><argument_list pos:start="189:57" pos:end="189:63">(<argument pos:start="189:58" pos:end="189:59"><expr pos:start="189:58" pos:end="189:59"><name pos:start="189:58" pos:end="189:59">gb</name></expr></argument>, <argument pos:start="189:62" pos:end="189:62"><expr pos:start="189:62" pos:end="189:62"><literal type="number" pos:start="189:62" pos:end="189:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:86"><expr pos:start="191:5" pos:end="191:85"><name pos:start="191:5" pos:end="191:16"><name pos:start="191:5" pos:end="191:7">pps</name><operator pos:start="191:8" pos:end="191:9">-&gt;</operator><name pos:start="191:10" pos:end="191:16">init_qp</name></name>                              <operator pos:start="191:47" pos:end="191:47">=</operator> <call pos:start="191:49" pos:end="191:65"><name pos:start="191:49" pos:end="191:61">get_se_golomb</name><argument_list pos:start="191:62" pos:end="191:65">(<argument pos:start="191:63" pos:end="191:64"><expr pos:start="191:63" pos:end="191:64"><name pos:start="191:63" pos:end="191:64">gb</name></expr></argument>)</argument_list></call> <operator pos:start="191:67" pos:end="191:67">+</operator> <literal type="number" pos:start="191:69" pos:end="191:72">26</literal> <operator pos:start="191:72" pos:end="191:72">+</operator> <name pos:start="191:74" pos:end="191:85">qp_bd_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:86"><expr pos:start="193:5" pos:end="193:85"><name pos:start="193:5" pos:end="193:16"><name pos:start="193:5" pos:end="193:7">pps</name><operator pos:start="193:8" pos:end="193:9">-&gt;</operator><name pos:start="193:10" pos:end="193:16">init_qs</name></name>                              <operator pos:start="193:47" pos:end="193:47">=</operator> <call pos:start="193:49" pos:end="193:65"><name pos:start="193:49" pos:end="193:61">get_se_golomb</name><argument_list pos:start="193:62" pos:end="193:65">(<argument pos:start="193:63" pos:end="193:64"><expr pos:start="193:63" pos:end="193:64"><name pos:start="193:63" pos:end="193:64">gb</name></expr></argument>)</argument_list></call> <operator pos:start="193:67" pos:end="193:67">+</operator> <literal type="number" pos:start="193:69" pos:end="193:72">26</literal> <operator pos:start="193:72" pos:end="193:72">+</operator> <name pos:start="193:74" pos:end="193:85">qp_bd_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:66"><expr pos:start="195:5" pos:end="195:65"><name pos:start="195:5" pos:end="195:34"><name pos:start="195:5" pos:end="195:7">pps</name><operator pos:start="195:8" pos:end="195:9">-&gt;</operator><name pos:start="195:10" pos:end="195:31">chroma_qp_index_offset</name><index pos:start="195:32" pos:end="195:34">[<expr pos:start="195:33" pos:end="195:33"><literal type="number" pos:start="195:33" pos:end="195:33">0</literal></expr>]</index></name>            <operator pos:start="195:47" pos:end="195:47">=</operator> <call pos:start="195:49" pos:end="195:65"><name pos:start="195:49" pos:end="195:61">get_se_golomb</name><argument_list pos:start="195:62" pos:end="195:65">(<argument pos:start="195:63" pos:end="195:64"><expr pos:start="195:63" pos:end="195:64"><name pos:start="195:63" pos:end="195:64">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="197:5" pos:end="312:15"><if pos:start="197:5" pos:end="312:15">if <condition pos:start="197:8" pos:end="197:84">(<expr pos:start="197:9" pos:end="197:83"><name pos:start="197:9" pos:end="197:38"><name pos:start="197:9" pos:end="197:11">pps</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:35">chroma_qp_index_offset</name><index pos:start="197:36" pos:end="197:38">[<expr pos:start="197:37" pos:end="197:37"><literal type="number" pos:start="197:37" pos:end="197:37">0</literal></expr>]</index></name> <operator pos:start="197:40" pos:end="197:40">&lt;</operator> <operator pos:start="197:42" pos:end="197:42">-</operator><literal type="number" pos:start="197:43" pos:end="197:44">12</literal> <operator pos:start="197:46" pos:end="197:47">||</operator> <name pos:start="197:49" pos:end="197:78"><name pos:start="197:49" pos:end="197:51">pps</name><operator pos:start="197:52" pos:end="197:53">-&gt;</operator><name pos:start="197:54" pos:end="197:75">chroma_qp_index_offset</name><index pos:start="197:76" pos:end="197:78">[<expr pos:start="197:77" pos:end="197:77"><literal type="number" pos:start="197:77" pos:end="197:77">0</literal></expr>]</index></name> <operator pos:start="197:80" pos:end="197:80">&gt;</operator> <literal type="number" pos:start="197:82" pos:end="197:83">12</literal></expr>)</condition> <block pos:start="197:86" pos:end="312:15">{<block_content pos:start="204:5" pos:end="312:15">






    <expr_stmt pos:start="204:5" pos:end="204:62"><expr pos:start="204:5" pos:end="204:61"><name pos:start="204:5" pos:end="204:45"><name pos:start="204:5" pos:end="204:7">pps</name><operator pos:start="204:8" pos:end="204:9">-&gt;</operator><name pos:start="204:10" pos:end="204:45">deblocking_filter_parameters_present</name></name> <operator pos:start="204:47" pos:end="204:47">=</operator> <call pos:start="204:49" pos:end="204:61"><name pos:start="204:49" pos:end="204:57">get_bits1</name><argument_list pos:start="204:58" pos:end="204:61">(<argument pos:start="204:59" pos:end="204:60"><expr pos:start="204:59" pos:end="204:60"><name pos:start="204:59" pos:end="204:60">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="206:5" pos:end="206:62"><expr pos:start="206:5" pos:end="206:61"><name pos:start="206:5" pos:end="206:31"><name pos:start="206:5" pos:end="206:7">pps</name><operator pos:start="206:8" pos:end="206:9">-&gt;</operator><name pos:start="206:10" pos:end="206:31">constrained_intra_pred</name></name>               <operator pos:start="206:47" pos:end="206:47">=</operator> <call pos:start="206:49" pos:end="206:61"><name pos:start="206:49" pos:end="206:57">get_bits1</name><argument_list pos:start="206:58" pos:end="206:61">(<argument pos:start="206:59" pos:end="206:60"><expr pos:start="206:59" pos:end="206:60"><name pos:start="206:59" pos:end="206:60">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="208:5" pos:end="208:62"><expr pos:start="208:5" pos:end="208:61"><name pos:start="208:5" pos:end="208:34"><name pos:start="208:5" pos:end="208:7">pps</name><operator pos:start="208:8" pos:end="208:9">-&gt;</operator><name pos:start="208:10" pos:end="208:34">redundant_pic_cnt_present</name></name>            <operator pos:start="208:47" pos:end="208:47">=</operator> <call pos:start="208:49" pos:end="208:61"><name pos:start="208:49" pos:end="208:57">get_bits1</name><argument_list pos:start="208:58" pos:end="208:61">(<argument pos:start="208:59" pos:end="208:60"><expr pos:start="208:59" pos:end="208:60"><name pos:start="208:59" pos:end="208:60">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="212:5" pos:end="212:32"><expr pos:start="212:5" pos:end="212:31"><name pos:start="212:5" pos:end="212:27"><name pos:start="212:5" pos:end="212:7">pps</name><operator pos:start="212:8" pos:end="212:9">-&gt;</operator><name pos:start="212:10" pos:end="212:27">transform_8x8_mode</name></name> <operator pos:start="212:29" pos:end="212:29">=</operator> <literal type="number" pos:start="212:31" pos:end="212:31">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="214:5" pos:end="216:41"><expr pos:start="214:5" pos:end="216:40"><call pos:start="214:5" pos:end="216:40"><name pos:start="214:5" pos:end="214:10">memcpy</name><argument_list pos:start="214:11" pos:end="216:40">(<argument pos:start="214:12" pos:end="214:31"><expr pos:start="214:12" pos:end="214:31"><name pos:start="214:12" pos:end="214:31"><name pos:start="214:12" pos:end="214:14">pps</name><operator pos:start="214:15" pos:end="214:16">-&gt;</operator><name pos:start="214:17" pos:end="214:31">scaling_matrix4</name></name></expr></argument>, <argument pos:start="214:34" pos:end="214:53"><expr pos:start="214:34" pos:end="214:53"><name pos:start="214:34" pos:end="214:53"><name pos:start="214:34" pos:end="214:36">sps</name><operator pos:start="214:37" pos:end="214:38">-&gt;</operator><name pos:start="214:39" pos:end="214:53">scaling_matrix4</name></name></expr></argument>,

           <argument pos:start="216:12" pos:end="216:39"><expr pos:start="216:12" pos:end="216:39"><sizeof pos:start="216:12" pos:end="216:39">sizeof<argument_list pos:start="216:18" pos:end="216:39">(<argument pos:start="216:19" pos:end="216:38"><expr pos:start="216:19" pos:end="216:38"><name pos:start="216:19" pos:end="216:38"><name pos:start="216:19" pos:end="216:21">pps</name><operator pos:start="216:22" pos:end="216:23">-&gt;</operator><name pos:start="216:24" pos:end="216:38">scaling_matrix4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="218:5" pos:end="220:41"><expr pos:start="218:5" pos:end="220:40"><call pos:start="218:5" pos:end="220:40"><name pos:start="218:5" pos:end="218:10">memcpy</name><argument_list pos:start="218:11" pos:end="220:40">(<argument pos:start="218:12" pos:end="218:31"><expr pos:start="218:12" pos:end="218:31"><name pos:start="218:12" pos:end="218:31"><name pos:start="218:12" pos:end="218:14">pps</name><operator pos:start="218:15" pos:end="218:16">-&gt;</operator><name pos:start="218:17" pos:end="218:31">scaling_matrix8</name></name></expr></argument>, <argument pos:start="218:34" pos:end="218:53"><expr pos:start="218:34" pos:end="218:53"><name pos:start="218:34" pos:end="218:53"><name pos:start="218:34" pos:end="218:36">sps</name><operator pos:start="218:37" pos:end="218:38">-&gt;</operator><name pos:start="218:39" pos:end="218:53">scaling_matrix8</name></name></expr></argument>,

           <argument pos:start="220:12" pos:end="220:39"><expr pos:start="220:12" pos:end="220:39"><sizeof pos:start="220:12" pos:end="220:39">sizeof<argument_list pos:start="220:18" pos:end="220:39">(<argument pos:start="220:19" pos:end="220:38"><expr pos:start="220:19" pos:end="220:38"><name pos:start="220:19" pos:end="220:38"><name pos:start="220:19" pos:end="220:21">pps</name><operator pos:start="220:22" pos:end="220:23">-&gt;</operator><name pos:start="220:24" pos:end="220:38">scaling_matrix8</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="224:5" pos:end="224:48"><expr pos:start="224:5" pos:end="224:47"><name pos:start="224:5" pos:end="224:13">bits_left</name> <operator pos:start="224:15" pos:end="224:15">=</operator> <name pos:start="224:17" pos:end="224:26">bit_length</name> <operator pos:start="224:28" pos:end="224:28">-</operator> <call pos:start="224:30" pos:end="224:47"><name pos:start="224:30" pos:end="224:43">get_bits_count</name><argument_list pos:start="224:44" pos:end="224:47">(<argument pos:start="224:45" pos:end="224:46"><expr pos:start="224:45" pos:end="224:46"><name pos:start="224:45" pos:end="224:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="226:5" pos:end="312:15"><if pos:start="226:5" pos:end="242:5">if <condition pos:start="226:8" pos:end="226:59">(<expr pos:start="226:9" pos:end="226:58"><name pos:start="226:9" pos:end="226:17">bits_left</name> <operator pos:start="226:19" pos:end="226:19">&gt;</operator> <literal type="number" pos:start="226:21" pos:end="226:21">0</literal> <operator pos:start="226:23" pos:end="226:24">&amp;&amp;</operator> <call pos:start="226:26" pos:end="226:58"><name pos:start="226:26" pos:end="226:46">more_rbsp_data_in_pps</name><argument_list pos:start="226:47" pos:end="226:58">(<argument pos:start="226:48" pos:end="226:50"><expr pos:start="226:48" pos:end="226:50"><name pos:start="226:48" pos:end="226:50">sps</name></expr></argument>, <argument pos:start="226:53" pos:end="226:57"><expr pos:start="226:53" pos:end="226:57"><name pos:start="226:53" pos:end="226:57">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="226:61" pos:end="242:5">{<block_content pos:start="228:9" pos:end="236:59">

        <expr_stmt pos:start="228:9" pos:end="228:48"><expr pos:start="228:9" pos:end="228:47"><name pos:start="228:9" pos:end="228:31"><name pos:start="228:9" pos:end="228:11">pps</name><operator pos:start="228:12" pos:end="228:13">-&gt;</operator><name pos:start="228:14" pos:end="228:31">transform_8x8_mode</name></name> <operator pos:start="228:33" pos:end="228:33">=</operator> <call pos:start="228:35" pos:end="228:47"><name pos:start="228:35" pos:end="228:43">get_bits1</name><argument_list pos:start="228:44" pos:end="228:47">(<argument pos:start="228:45" pos:end="228:46"><expr pos:start="228:45" pos:end="228:46"><name pos:start="228:45" pos:end="228:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="230:9" pos:end="232:76"><expr pos:start="230:9" pos:end="232:75"><call pos:start="230:9" pos:end="232:75"><name pos:start="230:9" pos:end="230:31">decode_scaling_matrices</name><argument_list pos:start="230:32" pos:end="232:75">(<argument pos:start="230:33" pos:end="230:34"><expr pos:start="230:33" pos:end="230:34"><name pos:start="230:33" pos:end="230:34">gb</name></expr></argument>, <argument pos:start="230:37" pos:end="230:39"><expr pos:start="230:37" pos:end="230:39"><name pos:start="230:37" pos:end="230:39">sps</name></expr></argument>, <argument pos:start="230:42" pos:end="230:44"><expr pos:start="230:42" pos:end="230:44"><name pos:start="230:42" pos:end="230:44">pps</name></expr></argument>, <argument pos:start="230:47" pos:end="230:47"><expr pos:start="230:47" pos:end="230:47"><literal type="number" pos:start="230:47" pos:end="230:47">0</literal></expr></argument>,

                                <argument pos:start="232:33" pos:end="232:52"><expr pos:start="232:33" pos:end="232:52"><name pos:start="232:33" pos:end="232:52"><name pos:start="232:33" pos:end="232:35">pps</name><operator pos:start="232:36" pos:end="232:37">-&gt;</operator><name pos:start="232:38" pos:end="232:52">scaling_matrix4</name></name></expr></argument>, <argument pos:start="232:55" pos:end="232:74"><expr pos:start="232:55" pos:end="232:74"><name pos:start="232:55" pos:end="232:74"><name pos:start="232:55" pos:end="232:57">pps</name><operator pos:start="232:58" pos:end="232:59">-&gt;</operator><name pos:start="232:60" pos:end="232:74">scaling_matrix8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="234:9" pos:end="234:40">// second_chroma_qp_index_offset</comment>

        <expr_stmt pos:start="236:9" pos:end="236:59"><expr pos:start="236:9" pos:end="236:58"><name pos:start="236:9" pos:end="236:38"><name pos:start="236:9" pos:end="236:11">pps</name><operator pos:start="236:12" pos:end="236:13">-&gt;</operator><name pos:start="236:14" pos:end="236:35">chroma_qp_index_offset</name><index pos:start="236:36" pos:end="236:38">[<expr pos:start="236:37" pos:end="236:37"><literal type="number" pos:start="236:37" pos:end="236:37">1</literal></expr>]</index></name> <operator pos:start="236:40" pos:end="236:40">=</operator> <call pos:start="236:42" pos:end="236:58"><name pos:start="236:42" pos:end="236:54">get_se_golomb</name><argument_list pos:start="236:55" pos:end="236:58">(<argument pos:start="236:56" pos:end="236:57"><expr pos:start="236:56" pos:end="236:57"><name pos:start="236:56" pos:end="236:57">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    </block_content>}</block></if> <else pos:start="242:7" pos:end="312:15">else <block pos:start="242:12" pos:end="312:15">{<block_content pos:start="244:9" pos:end="312:15">

        <expr_stmt pos:start="244:9" pos:end="244:72"><expr pos:start="244:9" pos:end="244:71"><name pos:start="244:9" pos:end="244:38"><name pos:start="244:9" pos:end="244:11">pps</name><operator pos:start="244:12" pos:end="244:13">-&gt;</operator><name pos:start="244:14" pos:end="244:35">chroma_qp_index_offset</name><index pos:start="244:36" pos:end="244:38">[<expr pos:start="244:37" pos:end="244:37"><literal type="number" pos:start="244:37" pos:end="244:37">1</literal></expr>]</index></name> <operator pos:start="244:40" pos:end="244:40">=</operator> <name pos:start="244:42" pos:end="244:71"><name pos:start="244:42" pos:end="244:44">pps</name><operator pos:start="244:45" pos:end="244:46">-&gt;</operator><name pos:start="244:47" pos:end="244:68">chroma_qp_index_offset</name><index pos:start="244:69" pos:end="244:71">[<expr pos:start="244:70" pos:end="244:70"><literal type="number" pos:start="244:70" pos:end="244:70">0</literal></expr>]</index></name></expr>;</expr_stmt>




    <expr_stmt pos:start="249:5" pos:end="251:40"><expr pos:start="249:5" pos:end="251:39"><call pos:start="249:5" pos:end="251:39"><name pos:start="249:5" pos:end="249:18">build_qp_table</name><argument_list pos:start="249:19" pos:end="251:39">(<argument pos:start="249:20" pos:end="249:22"><expr pos:start="249:20" pos:end="249:22"><name pos:start="249:20" pos:end="249:22">pps</name></expr></argument>, <argument pos:start="249:25" pos:end="249:25"><expr pos:start="249:25" pos:end="249:25"><literal type="number" pos:start="249:25" pos:end="249:25">0</literal></expr></argument>, <argument pos:start="249:28" pos:end="249:57"><expr pos:start="249:28" pos:end="249:57"><name pos:start="249:28" pos:end="249:57"><name pos:start="249:28" pos:end="249:30">pps</name><operator pos:start="249:31" pos:end="249:32">-&gt;</operator><name pos:start="249:33" pos:end="249:54">chroma_qp_index_offset</name><index pos:start="249:55" pos:end="249:57">[<expr pos:start="249:56" pos:end="249:56"><literal type="number" pos:start="249:56" pos:end="249:56">0</literal></expr>]</index></name></expr></argument>,

                   <argument pos:start="251:20" pos:end="251:38"><expr pos:start="251:20" pos:end="251:38"><name pos:start="251:20" pos:end="251:38"><name pos:start="251:20" pos:end="251:22">sps</name><operator pos:start="251:23" pos:end="251:24">-&gt;</operator><name pos:start="251:25" pos:end="251:38">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="255:40"><expr pos:start="253:5" pos:end="255:39"><call pos:start="253:5" pos:end="255:39"><name pos:start="253:5" pos:end="253:18">build_qp_table</name><argument_list pos:start="253:19" pos:end="255:39">(<argument pos:start="253:20" pos:end="253:22"><expr pos:start="253:20" pos:end="253:22"><name pos:start="253:20" pos:end="253:22">pps</name></expr></argument>, <argument pos:start="253:25" pos:end="253:25"><expr pos:start="253:25" pos:end="253:25"><literal type="number" pos:start="253:25" pos:end="253:25">1</literal></expr></argument>, <argument pos:start="253:28" pos:end="253:57"><expr pos:start="253:28" pos:end="253:57"><name pos:start="253:28" pos:end="253:57"><name pos:start="253:28" pos:end="253:30">pps</name><operator pos:start="253:31" pos:end="253:32">-&gt;</operator><name pos:start="253:33" pos:end="253:54">chroma_qp_index_offset</name><index pos:start="253:55" pos:end="253:57">[<expr pos:start="253:56" pos:end="253:56"><literal type="number" pos:start="253:56" pos:end="253:56">1</literal></expr>]</index></name></expr></argument>,

                   <argument pos:start="255:20" pos:end="255:38"><expr pos:start="255:20" pos:end="255:38"><name pos:start="255:20" pos:end="255:38"><name pos:start="255:20" pos:end="255:22">sps</name><operator pos:start="255:23" pos:end="255:24">-&gt;</operator><name pos:start="255:25" pos:end="255:38">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:34"><expr pos:start="259:5" pos:end="259:33"><call pos:start="259:5" pos:end="259:33"><name pos:start="259:5" pos:end="259:23">init_dequant_tables</name><argument_list pos:start="259:24" pos:end="259:33">(<argument pos:start="259:25" pos:end="259:27"><expr pos:start="259:25" pos:end="259:27"><name pos:start="259:25" pos:end="259:27">pps</name></expr></argument>, <argument pos:start="259:30" pos:end="259:32"><expr pos:start="259:30" pos:end="259:32"><name pos:start="259:30" pos:end="259:32">sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="263:5" pos:end="265:32"><if pos:start="263:5" pos:end="265:32">if <condition pos:start="263:8" pos:end="263:73">(<expr pos:start="263:9" pos:end="263:72"><name pos:start="263:9" pos:end="263:38"><name pos:start="263:9" pos:end="263:11">pps</name><operator pos:start="263:12" pos:end="263:13">-&gt;</operator><name pos:start="263:14" pos:end="263:35">chroma_qp_index_offset</name><index pos:start="263:36" pos:end="263:38">[<expr pos:start="263:37" pos:end="263:37"><literal type="number" pos:start="263:37" pos:end="263:37">0</literal></expr>]</index></name> <operator pos:start="263:40" pos:end="263:41">!=</operator> <name pos:start="263:43" pos:end="263:72"><name pos:start="263:43" pos:end="263:45">pps</name><operator pos:start="263:46" pos:end="263:47">-&gt;</operator><name pos:start="263:48" pos:end="263:69">chroma_qp_index_offset</name><index pos:start="263:70" pos:end="263:72">[<expr pos:start="263:71" pos:end="263:71"><literal type="number" pos:start="263:71" pos:end="263:71">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="265:9" pos:end="265:32"><block_content pos:start="265:9" pos:end="265:32">

        <expr_stmt pos:start="265:9" pos:end="265:32"><expr pos:start="265:9" pos:end="265:31"><name pos:start="265:9" pos:end="265:27"><name pos:start="265:9" pos:end="265:11">pps</name><operator pos:start="265:12" pos:end="265:13">-&gt;</operator><name pos:start="265:14" pos:end="265:27">chroma_qp_diff</name></name> <operator pos:start="265:29" pos:end="265:29">=</operator> <literal type="number" pos:start="265:31" pos:end="265:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="269:5" pos:end="312:15"><if pos:start="269:5" pos:end="312:15">if <condition pos:start="269:8" pos:end="269:42">(<expr pos:start="269:9" pos:end="269:41"><name pos:start="269:9" pos:end="269:20"><name pos:start="269:9" pos:end="269:13">avctx</name><operator pos:start="269:14" pos:end="269:15">-&gt;</operator><name pos:start="269:16" pos:end="269:20">debug</name></name> <operator pos:start="269:22" pos:end="269:22">&amp;</operator> <name pos:start="269:24" pos:end="269:41">FF_DEBUG_PICT_INFO</name></expr>)</condition> <block pos:start="269:44" pos:end="312:15">{<block_content pos:start="271:9" pos:end="312:15">

        <expr_stmt pos:start="271:9" pos:end="293:56"><expr pos:start="271:9" pos:end="293:55"><call pos:start="271:9" pos:end="293:55"><name pos:start="271:9" pos:end="271:14">av_log</name><argument_list pos:start="271:15" pos:end="293:55">(<argument pos:start="271:16" pos:end="271:20"><expr pos:start="271:16" pos:end="271:20"><name pos:start="271:16" pos:end="271:20">avctx</name></expr></argument>, <argument pos:start="271:23" pos:end="271:34"><expr pos:start="271:23" pos:end="271:34"><name pos:start="271:23" pos:end="271:34">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="273:16" pos:end="273:91"><expr pos:start="273:16" pos:end="273:91"><literal type="string" pos:start="273:16" pos:end="273:91">"pps:%u sps:%u %s slice_groups:%d ref:%u/%u %s qp:%d/%d/%d/%d %s %s %s %s\n"</literal></expr></argument>,

               <argument pos:start="275:16" pos:end="275:21"><expr pos:start="275:16" pos:end="275:21"><name pos:start="275:16" pos:end="275:21">pps_id</name></expr></argument>, <argument pos:start="275:24" pos:end="275:34"><expr pos:start="275:24" pos:end="275:34"><name pos:start="275:24" pos:end="275:34"><name pos:start="275:24" pos:end="275:26">pps</name><operator pos:start="275:27" pos:end="275:28">-&gt;</operator><name pos:start="275:29" pos:end="275:34">sps_id</name></name></expr></argument>,

               <argument pos:start="277:16" pos:end="277:45"><expr pos:start="277:16" pos:end="277:45"><ternary pos:start="277:16" pos:end="277:45"><condition pos:start="277:16" pos:end="277:27"><expr pos:start="277:16" pos:end="277:25"><name pos:start="277:16" pos:end="277:25"><name pos:start="277:16" pos:end="277:18">pps</name><operator pos:start="277:19" pos:end="277:20">-&gt;</operator><name pos:start="277:21" pos:end="277:25">cabac</name></name></expr> ?</condition><then pos:start="277:29" pos:end="277:35"> <expr pos:start="277:29" pos:end="277:35"><literal type="string" pos:start="277:29" pos:end="277:35">"CABAC"</literal></expr> </then><else pos:start="277:37" pos:end="277:45">: <expr pos:start="277:39" pos:end="277:45"><literal type="string" pos:start="277:39" pos:end="277:45">"CAVLC"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="279:16" pos:end="279:37"><expr pos:start="279:16" pos:end="279:37"><name pos:start="279:16" pos:end="279:37"><name pos:start="279:16" pos:end="279:18">pps</name><operator pos:start="279:19" pos:end="279:20">-&gt;</operator><name pos:start="279:21" pos:end="279:37">slice_group_count</name></name></expr></argument>,

               <argument pos:start="281:16" pos:end="281:32"><expr pos:start="281:16" pos:end="281:32"><name pos:start="281:16" pos:end="281:32"><name pos:start="281:16" pos:end="281:18">pps</name><operator pos:start="281:19" pos:end="281:20">-&gt;</operator><name pos:start="281:21" pos:end="281:29">ref_count</name><index pos:start="281:30" pos:end="281:32">[<expr pos:start="281:31" pos:end="281:31"><literal type="number" pos:start="281:31" pos:end="281:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="281:35" pos:end="281:51"><expr pos:start="281:35" pos:end="281:51"><name pos:start="281:35" pos:end="281:51"><name pos:start="281:35" pos:end="281:37">pps</name><operator pos:start="281:38" pos:end="281:39">-&gt;</operator><name pos:start="281:40" pos:end="281:48">ref_count</name><index pos:start="281:49" pos:end="281:51">[<expr pos:start="281:50" pos:end="281:50"><literal type="number" pos:start="281:50" pos:end="281:50">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="283:16" pos:end="283:51"><expr pos:start="283:16" pos:end="283:51"><ternary pos:start="283:16" pos:end="283:51"><condition pos:start="283:16" pos:end="283:35"><expr pos:start="283:16" pos:end="283:33"><name pos:start="283:16" pos:end="283:33"><name pos:start="283:16" pos:end="283:18">pps</name><operator pos:start="283:19" pos:end="283:20">-&gt;</operator><name pos:start="283:21" pos:end="283:33">weighted_pred</name></name></expr> ?</condition><then pos:start="283:37" pos:end="283:46"> <expr pos:start="283:37" pos:end="283:46"><literal type="string" pos:start="283:37" pos:end="283:46">"weighted"</literal></expr> </then><else pos:start="283:48" pos:end="283:51">: <expr pos:start="283:50" pos:end="283:51"><literal type="string" pos:start="283:50" pos:end="283:51">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="285:16" pos:end="285:27"><expr pos:start="285:16" pos:end="285:27"><name pos:start="285:16" pos:end="285:27"><name pos:start="285:16" pos:end="285:18">pps</name><operator pos:start="285:19" pos:end="285:20">-&gt;</operator><name pos:start="285:21" pos:end="285:27">init_qp</name></name></expr></argument>, <argument pos:start="285:30" pos:end="285:41"><expr pos:start="285:30" pos:end="285:41"><name pos:start="285:30" pos:end="285:41"><name pos:start="285:30" pos:end="285:32">pps</name><operator pos:start="285:33" pos:end="285:34">-&gt;</operator><name pos:start="285:35" pos:end="285:41">init_qs</name></name></expr></argument>, <argument pos:start="285:44" pos:end="285:73"><expr pos:start="285:44" pos:end="285:73"><name pos:start="285:44" pos:end="285:73"><name pos:start="285:44" pos:end="285:46">pps</name><operator pos:start="285:47" pos:end="285:48">-&gt;</operator><name pos:start="285:49" pos:end="285:70">chroma_qp_index_offset</name><index pos:start="285:71" pos:end="285:73">[<expr pos:start="285:72" pos:end="285:72"><literal type="number" pos:start="285:72" pos:end="285:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="285:76" pos:end="285:105"><expr pos:start="285:76" pos:end="285:105"><name pos:start="285:76" pos:end="285:105"><name pos:start="285:76" pos:end="285:78">pps</name><operator pos:start="285:79" pos:end="285:80">-&gt;</operator><name pos:start="285:81" pos:end="285:102">chroma_qp_index_offset</name><index pos:start="285:103" pos:end="285:105">[<expr pos:start="285:104" pos:end="285:104"><literal type="number" pos:start="285:104" pos:end="285:104">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="287:16" pos:end="287:70"><expr pos:start="287:16" pos:end="287:70"><ternary pos:start="287:16" pos:end="287:70"><condition pos:start="287:16" pos:end="287:58"><expr pos:start="287:16" pos:end="287:56"><name pos:start="287:16" pos:end="287:56"><name pos:start="287:16" pos:end="287:18">pps</name><operator pos:start="287:19" pos:end="287:20">-&gt;</operator><name pos:start="287:21" pos:end="287:56">deblocking_filter_parameters_present</name></name></expr> ?</condition><then pos:start="287:60" pos:end="287:65"> <expr pos:start="287:60" pos:end="287:65"><literal type="string" pos:start="287:60" pos:end="287:65">"LPAR"</literal></expr> </then><else pos:start="287:67" pos:end="287:70">: <expr pos:start="287:69" pos:end="287:70"><literal type="string" pos:start="287:69" pos:end="287:70">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="289:16" pos:end="289:58"><expr pos:start="289:16" pos:end="289:58"><ternary pos:start="289:16" pos:end="289:58"><condition pos:start="289:16" pos:end="289:44"><expr pos:start="289:16" pos:end="289:42"><name pos:start="289:16" pos:end="289:42"><name pos:start="289:16" pos:end="289:18">pps</name><operator pos:start="289:19" pos:end="289:20">-&gt;</operator><name pos:start="289:21" pos:end="289:42">constrained_intra_pred</name></name></expr> ?</condition><then pos:start="289:46" pos:end="289:53"> <expr pos:start="289:46" pos:end="289:53"><literal type="string" pos:start="289:46" pos:end="289:53">"CONSTR"</literal></expr> </then><else pos:start="289:55" pos:end="289:58">: <expr pos:start="289:57" pos:end="289:58"><literal type="string" pos:start="289:57" pos:end="289:58">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="291:16" pos:end="291:59"><expr pos:start="291:16" pos:end="291:59"><ternary pos:start="291:16" pos:end="291:59"><condition pos:start="291:16" pos:end="291:47"><expr pos:start="291:16" pos:end="291:45"><name pos:start="291:16" pos:end="291:45"><name pos:start="291:16" pos:end="291:18">pps</name><operator pos:start="291:19" pos:end="291:20">-&gt;</operator><name pos:start="291:21" pos:end="291:45">redundant_pic_cnt_present</name></name></expr> ?</condition><then pos:start="291:49" pos:end="291:54"> <expr pos:start="291:49" pos:end="291:54"><literal type="string" pos:start="291:49" pos:end="291:54">"REDU"</literal></expr> </then><else pos:start="291:56" pos:end="291:59">: <expr pos:start="291:58" pos:end="291:59"><literal type="string" pos:start="291:58" pos:end="291:59">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="293:16" pos:end="293:54"><expr pos:start="293:16" pos:end="293:54"><ternary pos:start="293:16" pos:end="293:54"><condition pos:start="293:16" pos:end="293:40"><expr pos:start="293:16" pos:end="293:38"><name pos:start="293:16" pos:end="293:38"><name pos:start="293:16" pos:end="293:18">pps</name><operator pos:start="293:19" pos:end="293:20">-&gt;</operator><name pos:start="293:21" pos:end="293:38">transform_8x8_mode</name></name></expr> ?</condition><then pos:start="293:42" pos:end="293:49"> <expr pos:start="293:42" pos:end="293:49"><literal type="string" pos:start="293:42" pos:end="293:49">"8x8DCT"</literal></expr> </then><else pos:start="293:51" pos:end="293:54">: <expr pos:start="293:53" pos:end="293:54"><literal type="string" pos:start="293:53" pos:end="293:54">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="298:5" pos:end="298:27"><expr pos:start="298:5" pos:end="298:26"><call pos:start="298:5" pos:end="298:26"><name pos:start="298:5" pos:end="298:14">remove_pps</name><argument_list pos:start="298:15" pos:end="298:26">(<argument pos:start="298:16" pos:end="298:17"><expr pos:start="298:16" pos:end="298:17"><name pos:start="298:16" pos:end="298:17">ps</name></expr></argument>, <argument pos:start="298:20" pos:end="298:25"><expr pos:start="298:20" pos:end="298:25"><name pos:start="298:20" pos:end="298:25">pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="300:5" pos:end="300:35"><expr pos:start="300:5" pos:end="300:34"><name pos:start="300:5" pos:end="300:24"><name pos:start="300:5" pos:end="300:6">ps</name><operator pos:start="300:7" pos:end="300:8">-&gt;</operator><name pos:start="300:9" pos:end="300:16">pps_list</name><index pos:start="300:17" pos:end="300:24">[<expr pos:start="300:18" pos:end="300:23"><name pos:start="300:18" pos:end="300:23">pps_id</name></expr>]</index></name> <operator pos:start="300:26" pos:end="300:26">=</operator> <name pos:start="300:28" pos:end="300:34">pps_buf</name></expr>;</expr_stmt>



    <return pos:start="304:5" pos:end="304:13">return <expr pos:start="304:12" pos:end="304:12"><literal type="number" pos:start="304:12" pos:end="304:12">0</literal></expr>;</return>



<label pos:start="308:1" pos:end="308:5"><name pos:start="308:1" pos:end="308:4">fail</name>:</label>

    <expr_stmt pos:start="310:5" pos:end="310:30"><expr pos:start="310:5" pos:end="310:29"><call pos:start="310:5" pos:end="310:29"><name pos:start="310:5" pos:end="310:19">av_buffer_unref</name><argument_list pos:start="310:20" pos:end="310:29">(<argument pos:start="310:21" pos:end="310:28"><expr pos:start="310:21" pos:end="310:28"><operator pos:start="310:21" pos:end="310:21">&amp;</operator><name pos:start="310:22" pos:end="310:28">pps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="312:5" pos:end="312:15">return <expr pos:start="312:12" pos:end="312:14"><name pos:start="312:12" pos:end="312:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
