<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12189.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">handle_sigp</name><parameter_list pos:start="1:23" pos:end="1:71">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:30">S390CPU</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">cpu</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:56"><decl pos:start="1:38" pos:end="1:56"><type pos:start="1:38" pos:end="1:56"><name pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:43">struct</name> <name pos:start="1:45" pos:end="1:51">kvm_run</name></name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">run</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">uint8_t</name></type> <name pos:start="1:67" pos:end="1:70">ipa1</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUS390XState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:34">= <expr pos:start="5:26" pos:end="5:34"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:34"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name></type> <name pos:start="7:19" pos:end="7:20">r1</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><name pos:start="7:24" pos:end="7:27">ipa1</name> <operator pos:start="7:29" pos:end="7:30">&gt;&gt;</operator> <literal type="number" pos:start="7:32" pos:end="7:32">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:17"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name></type> <name pos:start="9:19" pos:end="9:20">r3</name> <init pos:start="9:22" pos:end="9:34">= <expr pos:start="9:24" pos:end="9:34"><name pos:start="9:24" pos:end="9:27">ipa1</name> <operator pos:start="9:29" pos:end="9:29">&amp;</operator> <literal type="number" pos:start="9:31" pos:end="9:34">0x0f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:17">order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint64_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:24">status_reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:18">param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">S390CPU</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">dst_cpu</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:25">cpu_synchronize_state</name><argument_list pos:start="23:26" pos:end="23:35">(<argument pos:start="23:27" pos:end="23:34"><expr pos:start="23:27" pos:end="23:34"><call pos:start="23:27" pos:end="23:34"><name pos:start="23:27" pos:end="23:29">CPU</name><argument_list pos:start="23:30" pos:end="23:34">(<argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><name pos:start="23:31" pos:end="23:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:24">/* get order code */</comment>

    <expr_stmt pos:start="29:5" pos:end="31:26"><expr pos:start="29:5" pos:end="31:25"><name pos:start="29:5" pos:end="29:9">order</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:62"><name pos:start="29:13" pos:end="29:30">decode_basedisp_rs</name><argument_list pos:start="29:31" pos:end="29:62">(<argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">env</name></expr></argument>, <argument pos:start="29:37" pos:end="29:55"><expr pos:start="29:37" pos:end="29:55"><name pos:start="29:37" pos:end="29:55"><name pos:start="29:37" pos:end="29:39">run</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:51">s390_sieic</name><operator pos:start="29:52" pos:end="29:52">.</operator><name pos:start="29:53" pos:end="29:55">ipb</name></name></expr></argument>, <argument pos:start="29:58" pos:end="29:61"><expr pos:start="29:58" pos:end="29:61"><name pos:start="29:58" pos:end="29:61">NULL</name></expr></argument>)</argument_list></call>

        <operator pos:start="31:9" pos:end="31:9">&amp;</operator> <name pos:start="31:11" pos:end="31:25">SIGP_ORDER_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:14">status_reg</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <operator pos:start="33:18" pos:end="33:18">&amp;</operator><name pos:start="33:19" pos:end="33:31"><name pos:start="33:19" pos:end="33:21">env</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:27">regs</name><index pos:start="33:28" pos:end="33:31">[<expr pos:start="33:29" pos:end="33:30"><name pos:start="33:29" pos:end="33:30">r1</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:57"><expr pos:start="35:5" pos:end="35:56"><name pos:start="35:5" pos:end="35:9">param</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <ternary pos:start="35:13" pos:end="35:56"><condition pos:start="35:13" pos:end="35:22"><expr pos:start="35:13" pos:end="35:20"><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:15">r1</name> <operator pos:start="35:17" pos:end="35:17">%</operator> <literal type="number" pos:start="35:19" pos:end="35:19">2</literal><operator pos:start="35:20" pos:end="35:20">)</operator></expr> ?</condition><then pos:start="35:24" pos:end="35:36"> <expr pos:start="35:24" pos:end="35:36"><name pos:start="35:24" pos:end="35:36"><name pos:start="35:24" pos:end="35:26">env</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:32">regs</name><index pos:start="35:33" pos:end="35:36">[<expr pos:start="35:34" pos:end="35:35"><name pos:start="35:34" pos:end="35:35">r1</name></expr>]</index></name></expr> </then><else pos:start="35:38" pos:end="35:56">: <expr pos:start="35:40" pos:end="35:56"><name pos:start="35:40" pos:end="35:56"><name pos:start="35:40" pos:end="35:42">env</name><operator pos:start="35:43" pos:end="35:44">-&gt;</operator><name pos:start="35:45" pos:end="35:48">regs</name><index pos:start="35:49" pos:end="35:56">[<expr pos:start="35:50" pos:end="35:55"><name pos:start="35:50" pos:end="35:51">r1</name> <operator pos:start="35:53" pos:end="35:53">+</operator> <literal type="number" pos:start="35:55" pos:end="35:55">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:45">(<expr pos:start="39:9" pos:end="39:44"><call pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:26">qemu_mutex_trylock</name><argument_list pos:start="39:27" pos:end="39:44">(<argument pos:start="39:28" pos:end="39:43"><expr pos:start="39:28" pos:end="39:43"><operator pos:start="39:28" pos:end="39:28">&amp;</operator><name pos:start="39:29" pos:end="39:43">qemu_sigp_mutex</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:47" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:17">

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:26">SIGP_CC_BUSY</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:17">goto <name pos:start="43:14" pos:end="43:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="49:5" pos:end="65:5">switch <condition pos:start="49:12" pos:end="49:18">(<expr pos:start="49:13" pos:end="49:17"><name pos:start="49:13" pos:end="49:17">order</name></expr>)</condition> <block pos:start="49:20" pos:end="65:5">{<block_content pos:start="51:5" pos:end="63:72">

    <case pos:start="51:5" pos:end="51:23">case <expr pos:start="51:10" pos:end="51:22"><name pos:start="51:10" pos:end="51:22">SIGP_SET_ARCH</name></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:59"><name pos:start="53:15" pos:end="53:35">sigp_set_architecture</name><argument_list pos:start="53:36" pos:end="53:59">(<argument pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><name pos:start="53:37" pos:end="53:39">cpu</name></expr></argument>, <argument pos:start="53:42" pos:end="53:46"><expr pos:start="53:42" pos:end="53:46"><name pos:start="53:42" pos:end="53:46">param</name></expr></argument>, <argument pos:start="53:49" pos:end="53:58"><expr pos:start="53:49" pos:end="53:58"><name pos:start="53:49" pos:end="53:58">status_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <default pos:start="57:5" pos:end="57:12">default:</default>

        <comment type="block" pos:start="59:9" pos:end="59:56">/* all other sigp orders target a single vcpu */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:53"><expr pos:start="61:9" pos:end="61:52"><name pos:start="61:9" pos:end="61:15">dst_cpu</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:52"><name pos:start="61:19" pos:end="61:37">s390_cpu_addr2state</name><argument_list pos:start="61:38" pos:end="61:52">(<argument pos:start="61:39" pos:end="61:51"><expr pos:start="61:39" pos:end="61:51"><name pos:start="61:39" pos:end="61:51"><name pos:start="61:39" pos:end="61:41">env</name><operator pos:start="61:42" pos:end="61:43">-&gt;</operator><name pos:start="61:44" pos:end="61:47">regs</name><index pos:start="61:48" pos:end="61:51">[<expr pos:start="61:49" pos:end="61:50"><name pos:start="61:49" pos:end="61:50">r3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:72"><expr pos:start="63:9" pos:end="63:71"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:71"><name pos:start="63:15" pos:end="63:36">handle_sigp_single_dst</name><argument_list pos:start="63:37" pos:end="63:71">(<argument pos:start="63:38" pos:end="63:44"><expr pos:start="63:38" pos:end="63:44"><name pos:start="63:38" pos:end="63:44">dst_cpu</name></expr></argument>, <argument pos:start="63:47" pos:end="63:51"><expr pos:start="63:47" pos:end="63:51"><name pos:start="63:47" pos:end="63:51">order</name></expr></argument>, <argument pos:start="63:54" pos:end="63:58"><expr pos:start="63:54" pos:end="63:58"><name pos:start="63:54" pos:end="63:58">param</name></expr></argument>, <argument pos:start="63:61" pos:end="63:70"><expr pos:start="63:61" pos:end="63:70"><name pos:start="63:61" pos:end="63:70">status_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>





    <expr_stmt pos:start="71:5" pos:end="73:73"><expr pos:start="71:5" pos:end="73:72"><call pos:start="71:5" pos:end="73:72"><name pos:start="71:5" pos:end="71:27">trace_kvm_sigp_finished</name><argument_list pos:start="71:28" pos:end="73:72">(<argument pos:start="71:29" pos:end="71:33"><expr pos:start="71:29" pos:end="71:33"><name pos:start="71:29" pos:end="71:33">order</name></expr></argument>, <argument pos:start="71:36" pos:end="71:54"><expr pos:start="71:36" pos:end="71:54"><call pos:start="71:36" pos:end="71:43"><name pos:start="71:36" pos:end="71:38">CPU</name><argument_list pos:start="71:39" pos:end="71:43">(<argument pos:start="71:40" pos:end="71:42"><expr pos:start="71:40" pos:end="71:42"><name pos:start="71:40" pos:end="71:42">cpu</name></expr></argument>)</argument_list></call><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:54">cpu_index</name></expr></argument>,

                            <argument pos:start="73:29" pos:end="73:66"><expr pos:start="73:29" pos:end="73:66"><ternary pos:start="73:29" pos:end="73:66"><condition pos:start="73:29" pos:end="73:37"><expr pos:start="73:29" pos:end="73:35"><name pos:start="73:29" pos:end="73:35">dst_cpu</name></expr> ?</condition><then pos:start="73:39" pos:end="73:61"> <expr pos:start="73:39" pos:end="73:61"><call pos:start="73:39" pos:end="73:50"><name pos:start="73:39" pos:end="73:41">CPU</name><argument_list pos:start="73:42" pos:end="73:50">(<argument pos:start="73:43" pos:end="73:49"><expr pos:start="73:43" pos:end="73:49"><name pos:start="73:43" pos:end="73:49">dst_cpu</name></expr></argument>)</argument_list></call><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:61">cpu_index</name></expr> </then><else pos:start="73:63" pos:end="73:66">: <expr pos:start="73:65" pos:end="73:66"><operator pos:start="73:65" pos:end="73:65">-</operator><literal type="number" pos:start="73:66" pos:end="73:66">1</literal></expr></else></ternary></expr></argument>, <argument pos:start="73:69" pos:end="73:71"><expr pos:start="73:69" pos:end="73:71"><name pos:start="73:69" pos:end="73:71">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:17">(<expr pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:14">&gt;=</operator> <literal type="number" pos:start="77:16" pos:end="77:16">0</literal></expr>)</condition> <block pos:start="77:19" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:17">

        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><call pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:13">setcc</name><argument_list pos:start="79:14" pos:end="79:23">(<argument pos:start="79:15" pos:end="79:17"><expr pos:start="79:15" pos:end="79:17"><name pos:start="79:15" pos:end="79:17">cpu</name></expr></argument>, <argument pos:start="79:20" pos:end="79:22"><expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:17">return <expr pos:start="81:16" pos:end="81:16"><literal type="number" pos:start="81:16" pos:end="81:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="87:5" pos:end="87:15">return <expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
