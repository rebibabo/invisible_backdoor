<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18424.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">palmte_init</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:36">MachineState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:45">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:45">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:58"><decl pos:start="13:5" pos:end="13:57"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:35">address_space_mem</name> <init pos:start="13:37" pos:end="13:57">= <expr pos:start="13:39" pos:end="13:57"><call pos:start="13:39" pos:end="13:57"><name pos:start="13:39" pos:end="13:55">get_system_memory</name><argument_list pos:start="13:56" pos:end="13:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:27">omap_mpu_state_s</name></name> <modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:32">mpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">flash_size</name> <init pos:start="17:20" pos:end="17:31">= <expr pos:start="17:22" pos:end="17:31"><literal type="number" pos:start="17:22" pos:end="17:31">0x00800000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:43"><decl pos:start="19:5" pos:end="19:42"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">sdram_size</name> <init pos:start="19:20" pos:end="19:42">= <expr pos:start="19:22" pos:end="19:42"><name pos:start="19:22" pos:end="19:42"><name pos:start="19:22" pos:end="19:33">palmte_binfo</name><operator pos:start="19:34" pos:end="19:34">.</operator><name pos:start="19:35" pos:end="19:42">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:19"><specifier pos:start="21:5" pos:end="21:10">static</specifier> <name pos:start="21:12" pos:end="21:19">uint32_t</name></type> <name pos:start="21:21" pos:end="21:26">cs0val</name> <init pos:start="21:28" pos:end="21:39">= <expr pos:start="21:30" pos:end="21:39"><literal type="number" pos:start="21:30" pos:end="21:39">0xffffffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:39"><type pos:start="23:5" pos:end="23:19"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <name pos:start="23:12" pos:end="23:19">uint32_t</name></type> <name pos:start="23:21" pos:end="23:26">cs1val</name> <init pos:start="23:28" pos:end="23:39">= <expr pos:start="23:30" pos:end="23:39"><literal type="number" pos:start="23:30" pos:end="23:39">0x0000e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:40"><decl pos:start="25:5" pos:end="25:39"><type pos:start="25:5" pos:end="25:19"><specifier pos:start="25:5" pos:end="25:10">static</specifier> <name pos:start="25:12" pos:end="25:19">uint32_t</name></type> <name pos:start="25:21" pos:end="25:26">cs2val</name> <init pos:start="25:28" pos:end="25:39">= <expr pos:start="25:30" pos:end="25:39"><literal type="number" pos:start="25:30" pos:end="25:39">0x0000e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:40"><decl pos:start="27:5" pos:end="27:39"><type pos:start="27:5" pos:end="27:19"><specifier pos:start="27:5" pos:end="27:10">static</specifier> <name pos:start="27:12" pos:end="27:19">uint32_t</name></type> <name pos:start="27:21" pos:end="27:26">cs3val</name> <init pos:start="27:28" pos:end="27:39">= <expr pos:start="27:30" pos:end="27:39"><literal type="number" pos:start="27:30" pos:end="27:39">0xe1a0e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:33"><decl pos:start="29:5" pos:end="29:16"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:16">rom_size</name></decl>, <decl pos:start="29:19" pos:end="29:32"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:19" pos:end="29:28">rom_loaded</name> <init pos:start="29:30" pos:end="29:32">= <expr pos:start="29:32" pos:end="29:32"><literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:49"><decl pos:start="31:5" pos:end="31:48"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:23">flash</name> <init pos:start="31:25" pos:end="31:48">= <expr pos:start="31:27" pos:end="31:48"><call pos:start="31:27" pos:end="31:48"><name pos:start="31:27" pos:end="31:31">g_new</name><argument_list pos:start="31:32" pos:end="31:48">(<argument pos:start="31:33" pos:end="31:44"><expr pos:start="31:33" pos:end="31:44"><name pos:start="31:33" pos:end="31:44">MemoryRegion</name></expr></argument>, <argument pos:start="31:47" pos:end="31:47"><expr pos:start="31:47" pos:end="31:47"><literal type="number" pos:start="31:47" pos:end="31:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:46"><decl pos:start="33:5" pos:end="33:45"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:20">cs</name> <init pos:start="33:22" pos:end="33:45">= <expr pos:start="33:24" pos:end="33:45"><call pos:start="33:24" pos:end="33:45"><name pos:start="33:24" pos:end="33:28">g_new</name><argument_list pos:start="33:29" pos:end="33:45">(<argument pos:start="33:30" pos:end="33:41"><expr pos:start="33:30" pos:end="33:41"><name pos:start="33:30" pos:end="33:41">MemoryRegion</name></expr></argument>, <argument pos:start="33:44" pos:end="33:44"><expr pos:start="33:44" pos:end="33:44"><literal type="number" pos:start="33:44" pos:end="33:44">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:69"><expr pos:start="37:5" pos:end="37:68"><name pos:start="37:5" pos:end="37:7">mpu</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:68"><name pos:start="37:11" pos:end="37:26">omap310_mpu_init</name><argument_list pos:start="37:27" pos:end="37:68">(<argument pos:start="37:28" pos:end="37:44"><expr pos:start="37:28" pos:end="37:44"><name pos:start="37:28" pos:end="37:44">address_space_mem</name></expr></argument>, <argument pos:start="37:47" pos:end="37:56"><expr pos:start="37:47" pos:end="37:56"><name pos:start="37:47" pos:end="37:56">sdram_size</name></expr></argument>, <argument pos:start="37:59" pos:end="37:67"><expr pos:start="37:59" pos:end="37:67"><name pos:start="37:59" pos:end="37:67">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:32">/* External Flash (EMIFS) */</comment>

    <expr_stmt pos:start="43:5" pos:end="45:41"><expr pos:start="43:5" pos:end="45:40"><call pos:start="43:5" pos:end="45:40"><name pos:start="43:5" pos:end="43:26">memory_region_init_ram</name><argument_list pos:start="43:27" pos:end="45:40">(<argument pos:start="43:28" pos:end="43:32"><expr pos:start="43:28" pos:end="43:32"><name pos:start="43:28" pos:end="43:32">flash</name></expr></argument>, <argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">NULL</name></expr></argument>, <argument pos:start="43:41" pos:end="43:54"><expr pos:start="43:41" pos:end="43:54"><literal type="string" pos:start="43:41" pos:end="43:54">"palmte.flash"</literal></expr></argument>, <argument pos:start="43:57" pos:end="43:66"><expr pos:start="43:57" pos:end="43:66"><name pos:start="43:57" pos:end="43:66">flash_size</name></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:39"><expr pos:start="45:28" pos:end="45:39"><operator pos:start="45:28" pos:end="45:28">&amp;</operator><name pos:start="45:29" pos:end="45:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><call pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:31">vmstate_register_ram_global</name><argument_list pos:start="47:32" pos:end="47:38">(<argument pos:start="47:33" pos:end="47:37"><expr pos:start="47:33" pos:end="47:37"><name pos:start="47:33" pos:end="47:37">flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><call pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:30">memory_region_set_readonly</name><argument_list pos:start="49:31" pos:end="49:43">(<argument pos:start="49:32" pos:end="49:36"><expr pos:start="49:32" pos:end="49:36"><name pos:start="49:32" pos:end="49:36">flash</name></expr></argument>, <argument pos:start="49:39" pos:end="49:42"><expr pos:start="49:39" pos:end="49:42"><name pos:start="49:39" pos:end="49:42">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:73"><expr pos:start="51:5" pos:end="51:72"><call pos:start="51:5" pos:end="51:72"><name pos:start="51:5" pos:end="51:31">memory_region_add_subregion</name><argument_list pos:start="51:32" pos:end="51:72">(<argument pos:start="51:33" pos:end="51:49"><expr pos:start="51:33" pos:end="51:49"><name pos:start="51:33" pos:end="51:49">address_space_mem</name></expr></argument>, <argument pos:start="51:52" pos:end="51:64"><expr pos:start="51:52" pos:end="51:64"><name pos:start="51:52" pos:end="51:64">OMAP_CS0_BASE</name></expr></argument>, <argument pos:start="51:67" pos:end="51:71"><expr pos:start="51:67" pos:end="51:71"><name pos:start="51:67" pos:end="51:71">flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:54"><expr pos:start="55:5" pos:end="57:53"><call pos:start="55:5" pos:end="57:53"><name pos:start="55:5" pos:end="55:25">memory_region_init_io</name><argument_list pos:start="55:26" pos:end="57:53">(<argument pos:start="55:27" pos:end="55:32"><expr pos:start="55:27" pos:end="55:32"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:32"><name pos:start="55:28" pos:end="55:29">cs</name><index pos:start="55:30" pos:end="55:32">[<expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:35" pos:end="55:38"><expr pos:start="55:35" pos:end="55:38"><name pos:start="55:35" pos:end="55:38">NULL</name></expr></argument>, <argument pos:start="55:41" pos:end="55:51"><expr pos:start="55:41" pos:end="55:51"><operator pos:start="55:41" pos:end="55:41">&amp;</operator><name pos:start="55:42" pos:end="55:51">static_ops</name></expr></argument>, <argument pos:start="55:54" pos:end="55:60"><expr pos:start="55:54" pos:end="55:60"><operator pos:start="55:54" pos:end="55:54">&amp;</operator><name pos:start="55:55" pos:end="55:60">cs0val</name></expr></argument>, <argument pos:start="55:63" pos:end="55:74"><expr pos:start="55:63" pos:end="55:74"><literal type="string" pos:start="55:63" pos:end="55:74">"palmte-cs0"</literal></expr></argument>,

                          <argument pos:start="57:27" pos:end="57:52"><expr pos:start="57:27" pos:end="57:52"><name pos:start="57:27" pos:end="57:39">OMAP_CS0_SIZE</name> <operator pos:start="57:41" pos:end="57:41">-</operator> <name pos:start="57:43" pos:end="57:52">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:40"><expr pos:start="59:5" pos:end="61:39"><call pos:start="59:5" pos:end="61:39"><name pos:start="59:5" pos:end="59:31">memory_region_add_subregion</name><argument_list pos:start="59:32" pos:end="61:39">(<argument pos:start="59:33" pos:end="59:49"><expr pos:start="59:33" pos:end="59:49"><name pos:start="59:33" pos:end="59:49">address_space_mem</name></expr></argument>, <argument pos:start="59:52" pos:end="59:77"><expr pos:start="59:52" pos:end="59:77"><name pos:start="59:52" pos:end="59:64">OMAP_CS0_BASE</name> <operator pos:start="59:66" pos:end="59:66">+</operator> <name pos:start="59:68" pos:end="59:77">flash_size</name></expr></argument>,

                                <argument pos:start="61:33" pos:end="61:38"><expr pos:start="61:33" pos:end="61:38"><operator pos:start="61:33" pos:end="61:33">&amp;</operator><name pos:start="61:34" pos:end="61:38"><name pos:start="61:34" pos:end="61:35">cs</name><index pos:start="61:36" pos:end="61:38">[<expr pos:start="61:37" pos:end="61:37"><literal type="number" pos:start="61:37" pos:end="61:37">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:41"><expr pos:start="63:5" pos:end="65:40"><call pos:start="63:5" pos:end="65:40"><name pos:start="63:5" pos:end="63:25">memory_region_init_io</name><argument_list pos:start="63:26" pos:end="65:40">(<argument pos:start="63:27" pos:end="63:32"><expr pos:start="63:27" pos:end="63:32"><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:32"><name pos:start="63:28" pos:end="63:29">cs</name><index pos:start="63:30" pos:end="63:32">[<expr pos:start="63:31" pos:end="63:31"><literal type="number" pos:start="63:31" pos:end="63:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:35" pos:end="63:38"><expr pos:start="63:35" pos:end="63:38"><name pos:start="63:35" pos:end="63:38">NULL</name></expr></argument>, <argument pos:start="63:41" pos:end="63:51"><expr pos:start="63:41" pos:end="63:51"><operator pos:start="63:41" pos:end="63:41">&amp;</operator><name pos:start="63:42" pos:end="63:51">static_ops</name></expr></argument>, <argument pos:start="63:54" pos:end="63:60"><expr pos:start="63:54" pos:end="63:60"><operator pos:start="63:54" pos:end="63:54">&amp;</operator><name pos:start="63:55" pos:end="63:60">cs1val</name></expr></argument>, <argument pos:start="63:63" pos:end="63:74"><expr pos:start="63:63" pos:end="63:74"><literal type="string" pos:start="63:63" pos:end="63:74">"palmte-cs1"</literal></expr></argument>,

                          <argument pos:start="65:27" pos:end="65:39"><expr pos:start="65:27" pos:end="65:39"><name pos:start="65:27" pos:end="65:39">OMAP_CS1_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:74"><expr pos:start="67:5" pos:end="67:73"><call pos:start="67:5" pos:end="67:73"><name pos:start="67:5" pos:end="67:31">memory_region_add_subregion</name><argument_list pos:start="67:32" pos:end="67:73">(<argument pos:start="67:33" pos:end="67:49"><expr pos:start="67:33" pos:end="67:49"><name pos:start="67:33" pos:end="67:49">address_space_mem</name></expr></argument>, <argument pos:start="67:52" pos:end="67:64"><expr pos:start="67:52" pos:end="67:64"><name pos:start="67:52" pos:end="67:64">OMAP_CS1_BASE</name></expr></argument>, <argument pos:start="67:67" pos:end="67:72"><expr pos:start="67:67" pos:end="67:72"><operator pos:start="67:67" pos:end="67:67">&amp;</operator><name pos:start="67:68" pos:end="67:72"><name pos:start="67:68" pos:end="67:69">cs</name><index pos:start="67:70" pos:end="67:72">[<expr pos:start="67:71" pos:end="67:71"><literal type="number" pos:start="67:71" pos:end="67:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="71:41"><expr pos:start="69:5" pos:end="71:40"><call pos:start="69:5" pos:end="71:40"><name pos:start="69:5" pos:end="69:25">memory_region_init_io</name><argument_list pos:start="69:26" pos:end="71:40">(<argument pos:start="69:27" pos:end="69:32"><expr pos:start="69:27" pos:end="69:32"><operator pos:start="69:27" pos:end="69:27">&amp;</operator><name pos:start="69:28" pos:end="69:32"><name pos:start="69:28" pos:end="69:29">cs</name><index pos:start="69:30" pos:end="69:32">[<expr pos:start="69:31" pos:end="69:31"><literal type="number" pos:start="69:31" pos:end="69:31">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:35" pos:end="69:38"><expr pos:start="69:35" pos:end="69:38"><name pos:start="69:35" pos:end="69:38">NULL</name></expr></argument>, <argument pos:start="69:41" pos:end="69:51"><expr pos:start="69:41" pos:end="69:51"><operator pos:start="69:41" pos:end="69:41">&amp;</operator><name pos:start="69:42" pos:end="69:51">static_ops</name></expr></argument>, <argument pos:start="69:54" pos:end="69:60"><expr pos:start="69:54" pos:end="69:60"><operator pos:start="69:54" pos:end="69:54">&amp;</operator><name pos:start="69:55" pos:end="69:60">cs2val</name></expr></argument>, <argument pos:start="69:63" pos:end="69:74"><expr pos:start="69:63" pos:end="69:74"><literal type="string" pos:start="69:63" pos:end="69:74">"palmte-cs2"</literal></expr></argument>,

                          <argument pos:start="71:27" pos:end="71:39"><expr pos:start="71:27" pos:end="71:39"><name pos:start="71:27" pos:end="71:39">OMAP_CS2_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:74"><expr pos:start="73:5" pos:end="73:73"><call pos:start="73:5" pos:end="73:73"><name pos:start="73:5" pos:end="73:31">memory_region_add_subregion</name><argument_list pos:start="73:32" pos:end="73:73">(<argument pos:start="73:33" pos:end="73:49"><expr pos:start="73:33" pos:end="73:49"><name pos:start="73:33" pos:end="73:49">address_space_mem</name></expr></argument>, <argument pos:start="73:52" pos:end="73:64"><expr pos:start="73:52" pos:end="73:64"><name pos:start="73:52" pos:end="73:64">OMAP_CS2_BASE</name></expr></argument>, <argument pos:start="73:67" pos:end="73:72"><expr pos:start="73:67" pos:end="73:72"><operator pos:start="73:67" pos:end="73:67">&amp;</operator><name pos:start="73:68" pos:end="73:72"><name pos:start="73:68" pos:end="73:69">cs</name><index pos:start="73:70" pos:end="73:72">[<expr pos:start="73:71" pos:end="73:71"><literal type="number" pos:start="73:71" pos:end="73:71">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:41"><expr pos:start="75:5" pos:end="77:40"><call pos:start="75:5" pos:end="77:40"><name pos:start="75:5" pos:end="75:25">memory_region_init_io</name><argument_list pos:start="75:26" pos:end="77:40">(<argument pos:start="75:27" pos:end="75:32"><expr pos:start="75:27" pos:end="75:32"><operator pos:start="75:27" pos:end="75:27">&amp;</operator><name pos:start="75:28" pos:end="75:32"><name pos:start="75:28" pos:end="75:29">cs</name><index pos:start="75:30" pos:end="75:32">[<expr pos:start="75:31" pos:end="75:31"><literal type="number" pos:start="75:31" pos:end="75:31">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="75:35" pos:end="75:38"><expr pos:start="75:35" pos:end="75:38"><name pos:start="75:35" pos:end="75:38">NULL</name></expr></argument>, <argument pos:start="75:41" pos:end="75:51"><expr pos:start="75:41" pos:end="75:51"><operator pos:start="75:41" pos:end="75:41">&amp;</operator><name pos:start="75:42" pos:end="75:51">static_ops</name></expr></argument>, <argument pos:start="75:54" pos:end="75:60"><expr pos:start="75:54" pos:end="75:60"><operator pos:start="75:54" pos:end="75:54">&amp;</operator><name pos:start="75:55" pos:end="75:60">cs3val</name></expr></argument>, <argument pos:start="75:63" pos:end="75:74"><expr pos:start="75:63" pos:end="75:74"><literal type="string" pos:start="75:63" pos:end="75:74">"palmte-cs3"</literal></expr></argument>,

                          <argument pos:start="77:27" pos:end="77:39"><expr pos:start="77:27" pos:end="77:39"><name pos:start="77:27" pos:end="77:39">OMAP_CS3_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:74"><expr pos:start="79:5" pos:end="79:73"><call pos:start="79:5" pos:end="79:73"><name pos:start="79:5" pos:end="79:31">memory_region_add_subregion</name><argument_list pos:start="79:32" pos:end="79:73">(<argument pos:start="79:33" pos:end="79:49"><expr pos:start="79:33" pos:end="79:49"><name pos:start="79:33" pos:end="79:49">address_space_mem</name></expr></argument>, <argument pos:start="79:52" pos:end="79:64"><expr pos:start="79:52" pos:end="79:64"><name pos:start="79:52" pos:end="79:64">OMAP_CS3_BASE</name></expr></argument>, <argument pos:start="79:67" pos:end="79:72"><expr pos:start="79:67" pos:end="79:72"><operator pos:start="79:67" pos:end="79:67">&amp;</operator><name pos:start="79:68" pos:end="79:72"><name pos:start="79:68" pos:end="79:69">cs</name><index pos:start="79:70" pos:end="79:72">[<expr pos:start="79:71" pos:end="79:71"><literal type="number" pos:start="79:71" pos:end="79:71">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:32"><expr pos:start="83:5" pos:end="83:31"><call pos:start="83:5" pos:end="83:31"><name pos:start="83:5" pos:end="83:26">palmte_microwire_setup</name><argument_list pos:start="83:27" pos:end="83:31">(<argument pos:start="83:28" pos:end="83:30"><expr pos:start="83:28" pos:end="83:30"><name pos:start="83:28" pos:end="83:30">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:57"><expr pos:start="87:5" pos:end="87:56"><call pos:start="87:5" pos:end="87:56"><name pos:start="87:5" pos:end="87:30">qemu_add_kbd_event_handler</name><argument_list pos:start="87:31" pos:end="87:56">(<argument pos:start="87:32" pos:end="87:50"><expr pos:start="87:32" pos:end="87:50"><name pos:start="87:32" pos:end="87:50">palmte_button_event</name></expr></argument>, <argument pos:start="87:53" pos:end="87:55"><expr pos:start="87:53" pos:end="87:55"><name pos:start="87:53" pos:end="87:55">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:27"><expr pos:start="91:5" pos:end="91:26"><call pos:start="91:5" pos:end="91:26"><name pos:start="91:5" pos:end="91:21">palmte_gpio_setup</name><argument_list pos:start="91:22" pos:end="91:26">(<argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:45">/* Setup initial (reset) machine state */</comment>

    <if_stmt pos:start="97:5" pos:end="129:5"><if pos:start="97:5" pos:end="129:5">if <condition pos:start="97:8" pos:end="97:23">(<expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:22">nb_option_roms</name></expr>)</condition> <block pos:start="97:25" pos:end="129:5">{<block_content pos:start="99:9" pos:end="127:9">

        <expr_stmt pos:start="99:9" pos:end="99:54"><expr pos:start="99:9" pos:end="99:53"><name pos:start="99:9" pos:end="99:16">rom_size</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="99:53"><name pos:start="99:20" pos:end="99:33">get_image_size</name><argument_list pos:start="99:34" pos:end="99:53">(<argument pos:start="99:35" pos:end="99:52"><expr pos:start="99:35" pos:end="99:52"><name pos:start="99:35" pos:end="99:47"><name pos:start="99:35" pos:end="99:44">option_rom</name><index pos:start="99:45" pos:end="99:47">[<expr pos:start="99:46" pos:end="99:46"><literal type="number" pos:start="99:46" pos:end="99:46">0</literal></expr>]</index></name><operator pos:start="99:48" pos:end="99:48">.</operator><name pos:start="99:49" pos:end="99:52">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="109:9"><if pos:start="101:9" pos:end="109:9">if <condition pos:start="101:12" pos:end="101:34">(<expr pos:start="101:13" pos:end="101:33"><name pos:start="101:13" pos:end="101:20">rom_size</name> <operator pos:start="101:22" pos:end="101:22">&gt;</operator> <name pos:start="101:24" pos:end="101:33">flash_size</name></expr>)</condition> <block pos:start="101:36" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:25">

            <expr_stmt pos:start="103:13" pos:end="105:64"><expr pos:start="103:13" pos:end="105:63"><call pos:start="103:13" pos:end="105:63"><name pos:start="103:13" pos:end="103:19">fprintf</name><argument_list pos:start="103:20" pos:end="105:63">(<argument pos:start="103:21" pos:end="103:26"><expr pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:26">stderr</name></expr></argument>, <argument pos:start="103:29" pos:end="103:63"><expr pos:start="103:29" pos:end="103:63"><literal type="string" pos:start="103:29" pos:end="103:63">"%s: ROM image too big (%x &gt; %x)\n"</literal></expr></argument>,

                            <argument pos:start="105:29" pos:end="105:40"><expr pos:start="105:29" pos:end="105:40"><name pos:start="105:29" pos:end="105:40">__FUNCTION__</name></expr></argument>, <argument pos:start="105:43" pos:end="105:50"><expr pos:start="105:43" pos:end="105:50"><name pos:start="105:43" pos:end="105:50">rom_size</name></expr></argument>, <argument pos:start="105:53" pos:end="105:62"><expr pos:start="105:53" pos:end="105:62"><name pos:start="105:53" pos:end="105:62">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:25"><expr pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:20">rom_size</name> <operator pos:start="107:22" pos:end="107:22">=</operator> <literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="111:9" pos:end="119:9"><if pos:start="111:9" pos:end="119:9">if <condition pos:start="111:12" pos:end="111:25">(<expr pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:20">rom_size</name> <operator pos:start="111:22" pos:end="111:22">&gt;</operator> <literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr>)</condition> <block pos:start="111:27" pos:end="119:9">{<block_content pos:start="113:13" pos:end="117:27">

            <expr_stmt pos:start="113:13" pos:end="115:55"><expr pos:start="113:13" pos:end="115:54"><name pos:start="113:13" pos:end="113:20">rom_size</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <call pos:start="113:24" pos:end="115:54"><name pos:start="113:24" pos:end="113:42">load_image_targphys</name><argument_list pos:start="113:43" pos:end="115:54">(<argument pos:start="113:44" pos:end="113:61"><expr pos:start="113:44" pos:end="113:61"><name pos:start="113:44" pos:end="113:56"><name pos:start="113:44" pos:end="113:53">option_rom</name><index pos:start="113:54" pos:end="113:56">[<expr pos:start="113:55" pos:end="113:55"><literal type="number" pos:start="113:55" pos:end="113:55">0</literal></expr>]</index></name><operator pos:start="113:57" pos:end="113:57">.</operator><name pos:start="113:58" pos:end="113:61">name</name></expr></argument>, <argument pos:start="113:64" pos:end="113:76"><expr pos:start="113:64" pos:end="113:76"><name pos:start="113:64" pos:end="113:76">OMAP_CS0_BASE</name></expr></argument>,

                                           <argument pos:start="115:44" pos:end="115:53"><expr pos:start="115:44" pos:end="115:53"><name pos:start="115:44" pos:end="115:53">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:27"><expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:22">rom_loaded</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <literal type="number" pos:start="117:26" pos:end="117:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:25">(<expr pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:20">rom_size</name> <operator pos:start="121:22" pos:end="121:22">&lt;</operator> <literal type="number" pos:start="121:24" pos:end="121:24">0</literal></expr>)</condition> <block pos:start="121:27" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:62">

            <expr_stmt pos:start="123:13" pos:end="125:62"><expr pos:start="123:13" pos:end="125:61"><call pos:start="123:13" pos:end="125:61"><name pos:start="123:13" pos:end="123:19">fprintf</name><argument_list pos:start="123:20" pos:end="125:61">(<argument pos:start="123:21" pos:end="123:26"><expr pos:start="123:21" pos:end="123:26"><name pos:start="123:21" pos:end="123:26">stderr</name></expr></argument>, <argument pos:start="123:29" pos:end="123:54"><expr pos:start="123:29" pos:end="123:54"><literal type="string" pos:start="123:29" pos:end="123:54">"%s: error loading '%s'\n"</literal></expr></argument>,

                            <argument pos:start="125:29" pos:end="125:40"><expr pos:start="125:29" pos:end="125:40"><name pos:start="125:29" pos:end="125:40">__FUNCTION__</name></expr></argument>, <argument pos:start="125:43" pos:end="125:60"><expr pos:start="125:43" pos:end="125:60"><name pos:start="125:43" pos:end="125:55"><name pos:start="125:43" pos:end="125:52">option_rom</name><index pos:start="125:53" pos:end="125:55">[<expr pos:start="125:54" pos:end="125:54"><literal type="number" pos:start="125:54" pos:end="125:54">0</literal></expr>]</index></name><operator pos:start="125:56" pos:end="125:56">.</operator><name pos:start="125:57" pos:end="125:60">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:60">(<expr pos:start="133:9" pos:end="133:59"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:19">rom_loaded</name> <operator pos:start="133:21" pos:end="133:22">&amp;&amp;</operator> <operator pos:start="133:24" pos:end="133:24">!</operator><name pos:start="133:25" pos:end="133:39">kernel_filename</name> <operator pos:start="133:41" pos:end="133:42">&amp;&amp;</operator> <operator pos:start="133:44" pos:end="133:44">!</operator><call pos:start="133:45" pos:end="133:59"><name pos:start="133:45" pos:end="133:57">qtest_enabled</name><argument_list pos:start="133:58" pos:end="133:59">()</argument_list></call></expr>)</condition> <block pos:start="133:62" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:16">

        <expr_stmt pos:start="135:9" pos:end="135:67"><expr pos:start="135:9" pos:end="135:66"><call pos:start="135:9" pos:end="135:66"><name pos:start="135:9" pos:end="135:15">fprintf</name><argument_list pos:start="135:16" pos:end="135:66">(<argument pos:start="135:17" pos:end="135:22"><expr pos:start="135:17" pos:end="135:22"><name pos:start="135:17" pos:end="135:22">stderr</name></expr></argument>, <argument pos:start="135:25" pos:end="135:65"><expr pos:start="135:25" pos:end="135:65"><literal type="string" pos:start="135:25" pos:end="135:65">"Kernel or ROM image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><call pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:12">exit</name><argument_list pos:start="137:13" pos:end="137:15">(<argument pos:start="137:14" pos:end="137:14"><expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:27">/* Load the kernel.  */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:51"><expr pos:start="145:5" pos:end="145:50"><name pos:start="145:5" pos:end="145:32"><name pos:start="145:5" pos:end="145:16">palmte_binfo</name><operator pos:start="145:17" pos:end="145:17">.</operator><name pos:start="145:18" pos:end="145:32">kernel_filename</name></name> <operator pos:start="145:34" pos:end="145:34">=</operator> <name pos:start="145:36" pos:end="145:50">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:49"><expr pos:start="147:5" pos:end="147:48"><name pos:start="147:5" pos:end="147:31"><name pos:start="147:5" pos:end="147:16">palmte_binfo</name><operator pos:start="147:17" pos:end="147:17">.</operator><name pos:start="147:18" pos:end="147:31">kernel_cmdline</name></name> <operator pos:start="147:33" pos:end="147:33">=</operator> <name pos:start="147:35" pos:end="147:48">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:51"><expr pos:start="149:5" pos:end="149:50"><name pos:start="149:5" pos:end="149:32"><name pos:start="149:5" pos:end="149:16">palmte_binfo</name><operator pos:start="149:17" pos:end="149:17">.</operator><name pos:start="149:18" pos:end="149:32">initrd_filename</name></name> <operator pos:start="149:34" pos:end="149:34">=</operator> <name pos:start="149:36" pos:end="149:50">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:45"><expr pos:start="151:5" pos:end="151:44"><call pos:start="151:5" pos:end="151:44"><name pos:start="151:5" pos:end="151:19">arm_load_kernel</name><argument_list pos:start="151:20" pos:end="151:44">(<argument pos:start="151:21" pos:end="151:28"><expr pos:start="151:21" pos:end="151:28"><name pos:start="151:21" pos:end="151:28"><name pos:start="151:21" pos:end="151:23">mpu</name><operator pos:start="151:24" pos:end="151:25">-&gt;</operator><name pos:start="151:26" pos:end="151:28">cpu</name></name></expr></argument>, <argument pos:start="151:31" pos:end="151:43"><expr pos:start="151:31" pos:end="151:43"><operator pos:start="151:31" pos:end="151:31">&amp;</operator><name pos:start="151:32" pos:end="151:43">palmte_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
