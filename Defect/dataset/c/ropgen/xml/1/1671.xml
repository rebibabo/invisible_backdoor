<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1671.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">xilinx_spips_flush_txfifo</name><parameter_list pos:start="1:38" pos:end="1:53">(<parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:49">XilinxSPIPS</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="273:1">{<block_content pos:start="5:5" pos:end="271:5">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">debug_level</name> <init pos:start="5:21" pos:end="5:23">= <expr pos:start="5:23" pos:end="5:23"><literal type="number" pos:start="5:23" pos:end="5:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="9:79"><decl pos:start="7:5" pos:end="9:78"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">XilinxQSPIPS</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">q</name> <init pos:start="7:21" pos:end="9:78">= <expr pos:start="7:23" pos:end="9:78"><operator pos:start="7:23" pos:end="7:23">(</operator><name pos:start="7:24" pos:end="7:35">XilinxQSPIPS</name> <operator pos:start="7:37" pos:end="7:37">*</operator><operator pos:start="7:38" pos:end="7:38">)</operator> <call pos:start="7:40" pos:end="9:78"><name pos:start="7:40" pos:end="7:58">object_dynamic_cast</name><argument_list pos:start="7:59" pos:end="9:78">(<argument pos:start="7:60" pos:end="7:68"><expr pos:start="7:60" pos:end="7:68"><call pos:start="7:60" pos:end="7:68"><name pos:start="7:60" pos:end="7:65">OBJECT</name><argument_list pos:start="7:66" pos:end="7:68">(<argument pos:start="7:67" pos:end="7:67"><expr pos:start="7:67" pos:end="7:67"><name pos:start="7:67" pos:end="7:67">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                                           <argument pos:start="9:60" pos:end="9:77"><expr pos:start="9:60" pos:end="9:77"><name pos:start="9:60" pos:end="9:77">TYPE_XILINX_QSPIPS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="271:5">for <control pos:start="13:9" pos:end="13:12">(<init pos:start="13:10" pos:end="13:10">;</init><condition pos:start="13:11" pos:end="13:11">;</condition><incr/>)</control> <block pos:start="13:14" pos:end="271:5">{<block_content pos:start="15:9" pos:end="269:45">

        <decl_stmt pos:start="15:9" pos:end="15:14"><decl pos:start="15:9" pos:end="15:13"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:23"><decl pos:start="17:9" pos:end="17:22"><type pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">uint8_t</name></type> <name pos:start="17:17" pos:end="17:18">tx</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:47"><decl pos:start="19:9" pos:end="19:46"><type pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:15">uint8_t</name></type> <name pos:start="19:17" pos:end="19:46"><name pos:start="19:17" pos:end="19:21">tx_rx</name><index pos:start="19:22" pos:end="19:46">[<expr pos:start="19:23" pos:end="19:45"><call pos:start="19:23" pos:end="19:45"><name pos:start="19:23" pos:end="19:42">num_effective_busses</name><argument_list pos:start="19:43" pos:end="19:45">(<argument pos:start="19:44" pos:end="19:44"><expr pos:start="19:44" pos:end="19:44"><name pos:start="19:44" pos:end="19:44">s</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:33"><decl pos:start="21:9" pos:end="21:32"><type pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:15">uint8_t</name></type> <name pos:start="21:17" pos:end="21:28">dummy_cycles</name> <init pos:start="21:30" pos:end="21:32">= <expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:28"><decl pos:start="23:9" pos:end="23:27"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">uint8_t</name></type> <name pos:start="23:17" pos:end="23:27">addr_length</name></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="69:9"><if pos:start="27:9" pos:end="39:9">if <condition pos:start="27:12" pos:end="27:40">(<expr pos:start="27:13" pos:end="27:39"><call pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:26">fifo8_is_empty</name><argument_list pos:start="27:27" pos:end="27:39">(<argument pos:start="27:28" pos:end="27:38"><expr pos:start="27:28" pos:end="27:38"><operator pos:start="27:28" pos:end="27:28">&amp;</operator><name pos:start="27:29" pos:end="27:38"><name pos:start="27:29" pos:end="27:29">s</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:38">tx_fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:42" pos:end="39:9">{<block_content pos:start="29:13" pos:end="37:19">

            <if_stmt pos:start="29:13" pos:end="33:13"><if pos:start="29:13" pos:end="33:13">if <condition pos:start="29:16" pos:end="29:60">(<expr pos:start="29:17" pos:end="29:59"><operator pos:start="29:17" pos:end="29:17">!</operator><operator pos:start="29:18" pos:end="29:18">(</operator><name pos:start="29:19" pos:end="29:38"><name pos:start="29:19" pos:end="29:19">s</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:25">regs</name><index pos:start="29:26" pos:end="29:38">[<expr pos:start="29:27" pos:end="29:37"><name pos:start="29:27" pos:end="29:37">R_LQSPI_CFG</name></expr>]</index></name> <operator pos:start="29:40" pos:end="29:40">&amp;</operator> <name pos:start="29:42" pos:end="29:58">LQSPI_CFG_LQ_MODE</name><operator pos:start="29:59" pos:end="29:59">)</operator></expr>)</condition> <block pos:start="29:62" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:64">

                <expr_stmt pos:start="31:17" pos:end="31:64"><expr pos:start="31:17" pos:end="31:63"><name pos:start="31:17" pos:end="31:38"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">regs</name><index pos:start="31:24" pos:end="31:38">[<expr pos:start="31:25" pos:end="31:37"><name pos:start="31:25" pos:end="31:37">R_INTR_STATUS</name></expr>]</index></name> <operator pos:start="31:40" pos:end="31:41">|=</operator> <name pos:start="31:43" pos:end="31:63">IXR_TX_FIFO_UNDERFLOW</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:39"><expr pos:start="35:13" pos:end="35:38"><call pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:35">xilinx_spips_update_ixr</name><argument_list pos:start="35:36" pos:end="35:38">(<argument pos:start="35:37" pos:end="35:37"><expr pos:start="35:37" pos:end="35:37"><name pos:start="35:37" pos:end="35:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="39:11" pos:end="49:9">else if <condition pos:start="39:19" pos:end="39:52">(<expr pos:start="39:20" pos:end="39:51"><name pos:start="39:20" pos:end="39:33"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:33">snoop_state</name></name> <operator pos:start="39:35" pos:end="39:36">==</operator> <name pos:start="39:38" pos:end="39:51">SNOOP_STRIPING</name></expr>)</condition> <block pos:start="39:54" pos:end="49:9">{<block_content pos:start="41:13" pos:end="47:59">

            <for pos:start="41:13" pos:end="45:13">for <control pos:start="41:17" pos:end="41:57">(<init pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:18">i</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</init> <condition pos:start="41:25" pos:end="41:52"><expr pos:start="41:25" pos:end="41:51"><name pos:start="41:25" pos:end="41:25">i</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <call pos:start="41:29" pos:end="41:51"><name pos:start="41:29" pos:end="41:48">num_effective_busses</name><argument_list pos:start="41:49" pos:end="41:51">(<argument pos:start="41:50" pos:end="41:50"><expr pos:start="41:50" pos:end="41:50"><name pos:start="41:50" pos:end="41:50">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="41:54" pos:end="41:56"><expr pos:start="41:54" pos:end="41:56"><operator pos:start="41:54" pos:end="41:55">++</operator><name pos:start="41:56" pos:end="41:56">i</name></expr></incr>)</control> <block pos:start="41:59" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:50">

                <expr_stmt pos:start="43:17" pos:end="43:50"><expr pos:start="43:17" pos:end="43:49"><name pos:start="43:17" pos:end="43:24"><name pos:start="43:17" pos:end="43:21">tx_rx</name><index pos:start="43:22" pos:end="43:24">[<expr pos:start="43:23" pos:end="43:23"><name pos:start="43:23" pos:end="43:23">i</name></expr>]</index></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:49"><name pos:start="43:28" pos:end="43:36">fifo8_pop</name><argument_list pos:start="43:37" pos:end="43:49">(<argument pos:start="43:38" pos:end="43:48"><expr pos:start="43:38" pos:end="43:48"><operator pos:start="43:38" pos:end="43:38">&amp;</operator><name pos:start="43:39" pos:end="43:48"><name pos:start="43:39" pos:end="43:39">s</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:48">tx_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="47:13" pos:end="47:59"><expr pos:start="47:13" pos:end="47:58"><call pos:start="47:13" pos:end="47:58"><name pos:start="47:13" pos:end="47:19">stripe8</name><argument_list pos:start="47:20" pos:end="47:58">(<argument pos:start="47:21" pos:end="47:25"><expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:25">tx_rx</name></expr></argument>, <argument pos:start="47:28" pos:end="47:50"><expr pos:start="47:28" pos:end="47:50"><call pos:start="47:28" pos:end="47:50"><name pos:start="47:28" pos:end="47:47">num_effective_busses</name><argument_list pos:start="47:48" pos:end="47:50">(<argument pos:start="47:49" pos:end="47:49"><expr pos:start="47:49" pos:end="47:49"><name pos:start="47:49" pos:end="47:49">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:53" pos:end="47:57"><expr pos:start="47:53" pos:end="47:57"><name pos:start="47:53" pos:end="47:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="59:9">else if <condition pos:start="49:19" pos:end="49:48">(<expr pos:start="49:20" pos:end="49:47"><name pos:start="49:20" pos:end="49:33"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:33">snoop_state</name></name> <operator pos:start="49:35" pos:end="49:36">&gt;=</operator> <name pos:start="49:38" pos:end="49:47">SNOOP_ADDR</name></expr>)</condition> <block pos:start="49:50" pos:end="59:9">{<block_content pos:start="51:13" pos:end="57:13">

            <expr_stmt pos:start="51:13" pos:end="51:40"><expr pos:start="51:13" pos:end="51:39"><name pos:start="51:13" pos:end="51:14">tx</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:39"><name pos:start="51:18" pos:end="51:26">fifo8_pop</name><argument_list pos:start="51:27" pos:end="51:39">(<argument pos:start="51:28" pos:end="51:38"><expr pos:start="51:28" pos:end="51:38"><operator pos:start="51:28" pos:end="51:28">&amp;</operator><name pos:start="51:29" pos:end="51:38"><name pos:start="51:29" pos:end="51:29">s</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:38">tx_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="53:13" pos:end="57:13">for <control pos:start="53:17" pos:end="53:57">(<init pos:start="53:18" pos:end="53:23"><expr pos:start="53:18" pos:end="53:22"><name pos:start="53:18" pos:end="53:18">i</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>;</init> <condition pos:start="53:25" pos:end="53:52"><expr pos:start="53:25" pos:end="53:51"><name pos:start="53:25" pos:end="53:25">i</name> <operator pos:start="53:27" pos:end="53:27">&lt;</operator> <call pos:start="53:29" pos:end="53:51"><name pos:start="53:29" pos:end="53:48">num_effective_busses</name><argument_list pos:start="53:49" pos:end="53:51">(<argument pos:start="53:50" pos:end="53:50"><expr pos:start="53:50" pos:end="53:50"><name pos:start="53:50" pos:end="53:50">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="53:54" pos:end="53:56"><expr pos:start="53:54" pos:end="53:56"><operator pos:start="53:54" pos:end="53:55">++</operator><name pos:start="53:56" pos:end="53:56">i</name></expr></incr>)</control> <block pos:start="53:59" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:30">

                <expr_stmt pos:start="55:17" pos:end="55:30"><expr pos:start="55:17" pos:end="55:29"><name pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:21">tx_rx</name><index pos:start="55:22" pos:end="55:24">[<expr pos:start="55:23" pos:end="55:23"><name pos:start="55:23" pos:end="55:23">i</name></expr>]</index></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <name pos:start="55:28" pos:end="55:29">tx</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="69:9">else <block pos:start="59:16" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:45">

            <comment type="block" pos:start="61:13" pos:end="63:28">/* Extract a dummy byte and generate dummy cycles according to the

             * link state */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:40"><expr pos:start="65:13" pos:end="65:39"><name pos:start="65:13" pos:end="65:14">tx</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:39"><name pos:start="65:18" pos:end="65:26">fifo8_pop</name><argument_list pos:start="65:27" pos:end="65:39">(<argument pos:start="65:28" pos:end="65:38"><expr pos:start="65:28" pos:end="65:38"><operator pos:start="65:28" pos:end="65:28">&amp;</operator><name pos:start="65:29" pos:end="65:38"><name pos:start="65:29" pos:end="65:29">s</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:38">tx_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:24">dummy_cycles</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <literal type="number" pos:start="67:28" pos:end="67:28">8</literal> <operator pos:start="67:30" pos:end="67:30">/</operator> <name pos:start="67:32" pos:end="67:44"><name pos:start="67:32" pos:end="67:32">s</name><operator pos:start="67:33" pos:end="67:34">-&gt;</operator><name pos:start="67:35" pos:end="67:44">link_state</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <for pos:start="73:9" pos:end="97:9">for <control pos:start="73:13" pos:end="73:53">(<init pos:start="73:14" pos:end="73:19"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">i</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</init> <condition pos:start="73:21" pos:end="73:48"><expr pos:start="73:21" pos:end="73:47"><name pos:start="73:21" pos:end="73:21">i</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <call pos:start="73:25" pos:end="73:47"><name pos:start="73:25" pos:end="73:44">num_effective_busses</name><argument_list pos:start="73:45" pos:end="73:47">(<argument pos:start="73:46" pos:end="73:46"><expr pos:start="73:46" pos:end="73:46"><name pos:start="73:46" pos:end="73:46">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="73:50" pos:end="73:52"><expr pos:start="73:50" pos:end="73:52"><operator pos:start="73:50" pos:end="73:51">++</operator><name pos:start="73:52" pos:end="73:52">i</name></expr></incr>)</control> <block pos:start="73:55" pos:end="97:9">{<block_content pos:start="75:13" pos:end="95:13">

            <decl_stmt pos:start="75:13" pos:end="75:54"><decl pos:start="75:13" pos:end="75:53"><type pos:start="75:13" pos:end="75:15"><name pos:start="75:13" pos:end="75:15">int</name></type> <name pos:start="75:17" pos:end="75:19">bus</name> <init pos:start="75:21" pos:end="75:53">= <expr pos:start="75:23" pos:end="75:53"><call pos:start="75:23" pos:end="75:45"><name pos:start="75:23" pos:end="75:42">num_effective_busses</name><argument_list pos:start="75:43" pos:end="75:45">(<argument pos:start="75:44" pos:end="75:44"><expr pos:start="75:44" pos:end="75:44"><name pos:start="75:44" pos:end="75:44">s</name></expr></argument>)</argument_list></call> <operator pos:start="75:47" pos:end="75:47">-</operator> <literal type="number" pos:start="75:49" pos:end="75:51">1</literal> <operator pos:start="75:51" pos:end="75:51">-</operator> <name pos:start="75:53" pos:end="75:53">i</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="77:13" pos:end="95:13"><if pos:start="77:13" pos:end="87:13">if <condition pos:start="77:16" pos:end="77:29">(<expr pos:start="77:17" pos:end="77:28"><name pos:start="77:17" pos:end="77:28">dummy_cycles</name></expr>)</condition> <block pos:start="77:31" pos:end="87:13">{<block_content pos:start="79:17" pos:end="85:17">

                <decl_stmt pos:start="79:17" pos:end="79:22"><decl pos:start="79:17" pos:end="79:21"><type pos:start="79:17" pos:end="79:19"><name pos:start="79:17" pos:end="79:19">int</name></type> <name pos:start="79:21" pos:end="79:21">d</name></decl>;</decl_stmt>

                <for pos:start="81:17" pos:end="85:17">for <control pos:start="81:21" pos:end="81:50">(<init pos:start="81:22" pos:end="81:27"><expr pos:start="81:22" pos:end="81:26"><name pos:start="81:22" pos:end="81:22">d</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>;</init> <condition pos:start="81:29" pos:end="81:45"><expr pos:start="81:29" pos:end="81:44"><name pos:start="81:29" pos:end="81:29">d</name> <operator pos:start="81:31" pos:end="81:31">&lt;</operator> <name pos:start="81:33" pos:end="81:44">dummy_cycles</name></expr>;</condition> <incr pos:start="81:47" pos:end="81:49"><expr pos:start="81:47" pos:end="81:49"><operator pos:start="81:47" pos:end="81:48">++</operator><name pos:start="81:49" pos:end="81:49">d</name></expr></incr>)</control> <block pos:start="81:52" pos:end="85:17">{<block_content pos:start="83:21" pos:end="83:77">

                    <expr_stmt pos:start="83:21" pos:end="83:77"><expr pos:start="83:21" pos:end="83:76"><name pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:25">tx_rx</name><index pos:start="83:26" pos:end="83:28">[<expr pos:start="83:27" pos:end="83:27"><literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>]</index></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <call pos:start="83:32" pos:end="83:76"><name pos:start="83:32" pos:end="83:43">ssi_transfer</name><argument_list pos:start="83:44" pos:end="83:76">(<argument pos:start="83:45" pos:end="83:55"><expr pos:start="83:45" pos:end="83:55"><name pos:start="83:45" pos:end="83:55"><name pos:start="83:45" pos:end="83:45">s</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:50">spi</name><index pos:start="83:51" pos:end="83:55">[<expr pos:start="83:52" pos:end="83:54"><name pos:start="83:52" pos:end="83:54">bus</name></expr>]</index></name></expr></argument>, <argument pos:start="83:58" pos:end="83:75"><expr pos:start="83:58" pos:end="83:75"><operator pos:start="83:58" pos:end="83:58">(</operator><name pos:start="83:59" pos:end="83:66">uint32_t</name><operator pos:start="83:67" pos:end="83:67">)</operator><name pos:start="83:68" pos:end="83:75"><name pos:start="83:68" pos:end="83:72">tx_rx</name><index pos:start="83:73" pos:end="83:75">[<expr pos:start="83:74" pos:end="83:74"><literal type="number" pos:start="83:74" pos:end="83:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="87:15" pos:end="95:13">else <block pos:start="87:20" pos:end="95:13">{<block_content pos:start="89:17" pos:end="93:65">

                <expr_stmt pos:start="89:17" pos:end="89:65"><expr pos:start="89:17" pos:end="89:64"><call pos:start="89:17" pos:end="89:64"><name pos:start="89:17" pos:end="89:26">DB_PRINT_L</name><argument_list pos:start="89:27" pos:end="89:64">(<argument pos:start="89:28" pos:end="89:38"><expr pos:start="89:28" pos:end="89:38"><name pos:start="89:28" pos:end="89:38">debug_level</name></expr></argument>, <argument pos:start="89:41" pos:end="89:53"><expr pos:start="89:41" pos:end="89:53"><literal type="string" pos:start="89:41" pos:end="89:53">"tx = %02x\n"</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:63"><expr pos:start="89:56" pos:end="89:63"><name pos:start="89:56" pos:end="89:63"><name pos:start="89:56" pos:end="89:60">tx_rx</name><index pos:start="89:61" pos:end="89:63">[<expr pos:start="89:62" pos:end="89:62"><name pos:start="89:62" pos:end="89:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:73"><expr pos:start="91:17" pos:end="91:72"><name pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:21">tx_rx</name><index pos:start="91:22" pos:end="91:24">[<expr pos:start="91:23" pos:end="91:23"><name pos:start="91:23" pos:end="91:23">i</name></expr>]</index></name> <operator pos:start="91:26" pos:end="91:26">=</operator> <call pos:start="91:28" pos:end="91:72"><name pos:start="91:28" pos:end="91:39">ssi_transfer</name><argument_list pos:start="91:40" pos:end="91:72">(<argument pos:start="91:41" pos:end="91:51"><expr pos:start="91:41" pos:end="91:51"><name pos:start="91:41" pos:end="91:51"><name pos:start="91:41" pos:end="91:41">s</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:46">spi</name><index pos:start="91:47" pos:end="91:51">[<expr pos:start="91:48" pos:end="91:50"><name pos:start="91:48" pos:end="91:50">bus</name></expr>]</index></name></expr></argument>, <argument pos:start="91:54" pos:end="91:71"><expr pos:start="91:54" pos:end="91:71"><operator pos:start="91:54" pos:end="91:54">(</operator><name pos:start="91:55" pos:end="91:62">uint32_t</name><operator pos:start="91:63" pos:end="91:63">)</operator><name pos:start="91:64" pos:end="91:71"><name pos:start="91:64" pos:end="91:68">tx_rx</name><index pos:start="91:69" pos:end="91:71">[<expr pos:start="91:70" pos:end="91:70"><name pos:start="91:70" pos:end="91:70">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:65"><expr pos:start="93:17" pos:end="93:64"><call pos:start="93:17" pos:end="93:64"><name pos:start="93:17" pos:end="93:26">DB_PRINT_L</name><argument_list pos:start="93:27" pos:end="93:64">(<argument pos:start="93:28" pos:end="93:38"><expr pos:start="93:28" pos:end="93:38"><name pos:start="93:28" pos:end="93:38">debug_level</name></expr></argument>, <argument pos:start="93:41" pos:end="93:53"><expr pos:start="93:41" pos:end="93:53"><literal type="string" pos:start="93:41" pos:end="93:53">"rx = %02x\n"</literal></expr></argument>, <argument pos:start="93:56" pos:end="93:63"><expr pos:start="93:56" pos:end="93:63"><name pos:start="93:56" pos:end="93:63"><name pos:start="93:56" pos:end="93:60">tx_rx</name><index pos:start="93:61" pos:end="93:63">[<expr pos:start="93:62" pos:end="93:62"><name pos:start="93:62" pos:end="93:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="101:9" pos:end="137:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:50">(<expr pos:start="101:13" pos:end="101:49"><name pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:19">regs</name><index pos:start="101:20" pos:end="101:27">[<expr pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:26">R_CMND</name></expr>]</index></name> <operator pos:start="101:29" pos:end="101:29">&amp;</operator> <name pos:start="101:31" pos:end="101:49">R_CMND_RXFIFO_DRAIN</name></expr>)</condition> <block pos:start="101:52" pos:end="107:9">{<block_content pos:start="103:13" pos:end="103:68">

            <expr_stmt pos:start="103:13" pos:end="103:68"><expr pos:start="103:13" pos:end="103:67"><call pos:start="103:13" pos:end="103:67"><name pos:start="103:13" pos:end="103:22">DB_PRINT_L</name><argument_list pos:start="103:23" pos:end="103:67">(<argument pos:start="103:24" pos:end="103:34"><expr pos:start="103:24" pos:end="103:34"><name pos:start="103:24" pos:end="103:34">debug_level</name></expr></argument>, <argument pos:start="103:37" pos:end="103:66"><expr pos:start="103:37" pos:end="103:66"><literal type="string" pos:start="103:37" pos:end="103:66">"dircarding drained rx byte\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="105:13" pos:end="105:28">/* Do nothing */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="113:9">else if <condition pos:start="107:19" pos:end="107:33">(<expr pos:start="107:20" pos:end="107:32"><name pos:start="107:20" pos:end="107:32"><name pos:start="107:20" pos:end="107:20">s</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:32">rx_discard</name></name></expr>)</condition> <block pos:start="107:35" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:47">

            <expr_stmt pos:start="109:13" pos:end="109:70"><expr pos:start="109:13" pos:end="109:69"><call pos:start="109:13" pos:end="109:69"><name pos:start="109:13" pos:end="109:22">DB_PRINT_L</name><argument_list pos:start="109:23" pos:end="109:69">(<argument pos:start="109:24" pos:end="109:34"><expr pos:start="109:24" pos:end="109:34"><name pos:start="109:24" pos:end="109:34">debug_level</name></expr></argument>, <argument pos:start="109:37" pos:end="109:68"><expr pos:start="109:37" pos:end="109:68"><literal type="string" pos:start="109:37" pos:end="109:68">"dircarding discarded rx byte\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:47"><expr pos:start="111:13" pos:end="111:46"><name pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:25">rx_discard</name></name> <operator pos:start="111:27" pos:end="111:28">-=</operator> <literal type="number" pos:start="111:30" pos:end="111:30">8</literal> <operator pos:start="111:32" pos:end="111:32">/</operator> <name pos:start="111:34" pos:end="111:46"><name pos:start="111:34" pos:end="111:34">s</name><operator pos:start="111:35" pos:end="111:36">-&gt;</operator><name pos:start="111:37" pos:end="111:46">link_state</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="119:9">else if <condition pos:start="113:19" pos:end="113:46">(<expr pos:start="113:20" pos:end="113:45"><call pos:start="113:20" pos:end="113:45"><name pos:start="113:20" pos:end="113:32">fifo8_is_full</name><argument_list pos:start="113:33" pos:end="113:45">(<argument pos:start="113:34" pos:end="113:44"><expr pos:start="113:34" pos:end="113:44"><operator pos:start="113:34" pos:end="113:34">&amp;</operator><name pos:start="113:35" pos:end="113:44"><name pos:start="113:35" pos:end="113:35">s</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:44">rx_fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:48" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:46">

            <expr_stmt pos:start="115:13" pos:end="115:59"><expr pos:start="115:13" pos:end="115:58"><name pos:start="115:13" pos:end="115:34"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:19">regs</name><index pos:start="115:20" pos:end="115:34">[<expr pos:start="115:21" pos:end="115:33"><name pos:start="115:21" pos:end="115:33">R_INTR_STATUS</name></expr>]</index></name> <operator pos:start="115:36" pos:end="115:37">|=</operator> <name pos:start="115:39" pos:end="115:58">IXR_RX_FIFO_OVERFLOW</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:46"><expr pos:start="117:13" pos:end="117:45"><call pos:start="117:13" pos:end="117:45"><name pos:start="117:13" pos:end="117:22">DB_PRINT_L</name><argument_list pos:start="117:23" pos:end="117:45">(<argument pos:start="117:24" pos:end="117:24"><expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr></argument>, <argument pos:start="117:27" pos:end="117:44"><expr pos:start="117:27" pos:end="117:44"><literal type="string" pos:start="117:27" pos:end="117:44">"rx FIFO overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="119:11" pos:end="131:9">else if <condition pos:start="119:19" pos:end="119:52">(<expr pos:start="119:20" pos:end="119:51"><name pos:start="119:20" pos:end="119:33"><name pos:start="119:20" pos:end="119:20">s</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:33">snoop_state</name></name> <operator pos:start="119:35" pos:end="119:36">==</operator> <name pos:start="119:38" pos:end="119:51">SNOOP_STRIPING</name></expr>)</condition> <block pos:start="119:54" pos:end="131:9">{<block_content pos:start="121:13" pos:end="129:13">

            <expr_stmt pos:start="121:13" pos:end="121:58"><expr pos:start="121:13" pos:end="121:57"><call pos:start="121:13" pos:end="121:57"><name pos:start="121:13" pos:end="121:19">stripe8</name><argument_list pos:start="121:20" pos:end="121:57">(<argument pos:start="121:21" pos:end="121:25"><expr pos:start="121:21" pos:end="121:25"><name pos:start="121:21" pos:end="121:25">tx_rx</name></expr></argument>, <argument pos:start="121:28" pos:end="121:50"><expr pos:start="121:28" pos:end="121:50"><call pos:start="121:28" pos:end="121:50"><name pos:start="121:28" pos:end="121:47">num_effective_busses</name><argument_list pos:start="121:48" pos:end="121:50">(<argument pos:start="121:49" pos:end="121:49"><expr pos:start="121:49" pos:end="121:49"><name pos:start="121:49" pos:end="121:49">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:53" pos:end="121:56"><expr pos:start="121:53" pos:end="121:56"><name pos:start="121:53" pos:end="121:56">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="123:13" pos:end="129:13">for <control pos:start="123:17" pos:end="123:57">(<init pos:start="123:18" pos:end="123:23"><expr pos:start="123:18" pos:end="123:22"><name pos:start="123:18" pos:end="123:18">i</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <literal type="number" pos:start="123:22" pos:end="123:22">0</literal></expr>;</init> <condition pos:start="123:25" pos:end="123:52"><expr pos:start="123:25" pos:end="123:51"><name pos:start="123:25" pos:end="123:25">i</name> <operator pos:start="123:27" pos:end="123:27">&lt;</operator> <call pos:start="123:29" pos:end="123:51"><name pos:start="123:29" pos:end="123:48">num_effective_busses</name><argument_list pos:start="123:49" pos:end="123:51">(<argument pos:start="123:50" pos:end="123:50"><expr pos:start="123:50" pos:end="123:50"><name pos:start="123:50" pos:end="123:50">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="123:54" pos:end="123:56"><expr pos:start="123:54" pos:end="123:56"><operator pos:start="123:54" pos:end="123:55">++</operator><name pos:start="123:56" pos:end="123:56">i</name></expr></incr>)</control> <block pos:start="123:59" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:69">

                <expr_stmt pos:start="125:17" pos:end="125:59"><expr pos:start="125:17" pos:end="125:58"><call pos:start="125:17" pos:end="125:58"><name pos:start="125:17" pos:end="125:26">fifo8_push</name><argument_list pos:start="125:27" pos:end="125:58">(<argument pos:start="125:28" pos:end="125:38"><expr pos:start="125:28" pos:end="125:38"><operator pos:start="125:28" pos:end="125:28">&amp;</operator><name pos:start="125:29" pos:end="125:38"><name pos:start="125:29" pos:end="125:29">s</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:38">rx_fifo</name></name></expr></argument>, <argument pos:start="125:41" pos:end="125:57"><expr pos:start="125:41" pos:end="125:57"><operator pos:start="125:41" pos:end="125:41">(</operator><name pos:start="125:42" pos:end="125:48">uint8_t</name><operator pos:start="125:49" pos:end="125:49">)</operator><name pos:start="125:50" pos:end="125:57"><name pos:start="125:50" pos:end="125:54">tx_rx</name><index pos:start="125:55" pos:end="125:57">[<expr pos:start="125:56" pos:end="125:56"><name pos:start="125:56" pos:end="125:56">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:69"><expr pos:start="127:17" pos:end="127:68"><call pos:start="127:17" pos:end="127:68"><name pos:start="127:17" pos:end="127:26">DB_PRINT_L</name><argument_list pos:start="127:27" pos:end="127:68">(<argument pos:start="127:28" pos:end="127:38"><expr pos:start="127:28" pos:end="127:38"><name pos:start="127:28" pos:end="127:38">debug_level</name></expr></argument>, <argument pos:start="127:41" pos:end="127:67"><expr pos:start="127:41" pos:end="127:67"><literal type="string" pos:start="127:41" pos:end="127:67">"pushing striped rx byte\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="131:11" pos:end="137:9">else <block pos:start="131:16" pos:end="137:9">{<block_content pos:start="133:12" pos:end="135:54">

           <expr_stmt pos:start="133:12" pos:end="133:66"><expr pos:start="133:12" pos:end="133:65"><call pos:start="133:12" pos:end="133:65"><name pos:start="133:12" pos:end="133:21">DB_PRINT_L</name><argument_list pos:start="133:22" pos:end="133:65">(<argument pos:start="133:23" pos:end="133:33"><expr pos:start="133:23" pos:end="133:33"><name pos:start="133:23" pos:end="133:33">debug_level</name></expr></argument>, <argument pos:start="133:36" pos:end="133:64"><expr pos:start="133:36" pos:end="133:64"><literal type="string" pos:start="133:36" pos:end="133:64">"pushing unstriped rx byte\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="135:12" pos:end="135:54"><expr pos:start="135:12" pos:end="135:53"><call pos:start="135:12" pos:end="135:53"><name pos:start="135:12" pos:end="135:21">fifo8_push</name><argument_list pos:start="135:22" pos:end="135:53">(<argument pos:start="135:23" pos:end="135:33"><expr pos:start="135:23" pos:end="135:33"><operator pos:start="135:23" pos:end="135:23">&amp;</operator><name pos:start="135:24" pos:end="135:33"><name pos:start="135:24" pos:end="135:24">s</name><operator pos:start="135:25" pos:end="135:26">-&gt;</operator><name pos:start="135:27" pos:end="135:33">rx_fifo</name></name></expr></argument>, <argument pos:start="135:36" pos:end="135:52"><expr pos:start="135:36" pos:end="135:52"><operator pos:start="135:36" pos:end="135:36">(</operator><name pos:start="135:37" pos:end="135:43">uint8_t</name><operator pos:start="135:44" pos:end="135:44">)</operator><name pos:start="135:45" pos:end="135:52"><name pos:start="135:45" pos:end="135:49">tx_rx</name><index pos:start="135:50" pos:end="135:52">[<expr pos:start="135:51" pos:end="135:51"><literal type="number" pos:start="135:51" pos:end="135:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="141:9" pos:end="151:9"><if pos:start="141:9" pos:end="151:9">if <condition pos:start="141:12" pos:end="141:36">(<expr pos:start="141:13" pos:end="141:35"><name pos:start="141:13" pos:end="141:35"><name pos:start="141:13" pos:end="141:13">s</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:35">link_state_next_when</name></name></expr>)</condition> <block pos:start="141:38" pos:end="151:9">{<block_content pos:start="143:13" pos:end="149:13">

            <expr_stmt pos:start="143:13" pos:end="143:38"><expr pos:start="143:13" pos:end="143:37"><name pos:start="143:13" pos:end="143:35"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:35">link_state_next_when</name></name><operator pos:start="143:36" pos:end="143:37">--</operator></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="149:13"><if pos:start="145:13" pos:end="149:13">if <condition pos:start="145:16" pos:end="145:41">(<expr pos:start="145:17" pos:end="145:40"><operator pos:start="145:17" pos:end="145:17">!</operator><name pos:start="145:18" pos:end="145:40"><name pos:start="145:18" pos:end="145:18">s</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:40">link_state_next_when</name></name></expr>)</condition> <block pos:start="145:43" pos:end="149:13">{<block_content pos:start="147:17" pos:end="147:51">

                <expr_stmt pos:start="147:17" pos:end="147:51"><expr pos:start="147:17" pos:end="147:50"><name pos:start="147:17" pos:end="147:29"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:29">link_state</name></name> <operator pos:start="147:31" pos:end="147:31">=</operator> <name pos:start="147:33" pos:end="147:50"><name pos:start="147:33" pos:end="147:33">s</name><operator pos:start="147:34" pos:end="147:35">-&gt;</operator><name pos:start="147:36" pos:end="147:50">link_state_next</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="155:9" pos:end="157:45"><expr pos:start="155:9" pos:end="157:44"><call pos:start="155:9" pos:end="157:44"><name pos:start="155:9" pos:end="155:18">DB_PRINT_L</name><argument_list pos:start="155:19" pos:end="157:44">(<argument pos:start="155:20" pos:end="155:30"><expr pos:start="155:20" pos:end="155:30"><name pos:start="155:20" pos:end="155:30">debug_level</name></expr></argument>, <argument pos:start="155:33" pos:end="155:59"><expr pos:start="155:33" pos:end="155:59"><literal type="string" pos:start="155:33" pos:end="155:59">"initial snoop state: %x\n"</literal></expr></argument>,

                   <argument pos:start="157:20" pos:end="157:43"><expr pos:start="157:20" pos:end="157:43"><operator pos:start="157:20" pos:end="157:20">(</operator><name pos:start="157:21" pos:end="157:28">unsigned</name><operator pos:start="157:29" pos:end="157:29">)</operator><name pos:start="157:30" pos:end="157:43"><name pos:start="157:30" pos:end="157:30">s</name><operator pos:start="157:31" pos:end="157:32">-&gt;</operator><name pos:start="157:33" pos:end="157:43">snoop_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="159:9" pos:end="265:9">switch <condition pos:start="159:16" pos:end="159:31">(<expr pos:start="159:17" pos:end="159:30"><name pos:start="159:17" pos:end="159:30"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:30">snoop_state</name></name></expr>)</condition> <block pos:start="159:33" pos:end="265:9">{<block_content pos:start="161:9" pos:end="263:29">

        <case pos:start="161:9" pos:end="161:30">case <expr pos:start="161:14" pos:end="161:29"><operator pos:start="161:14" pos:end="161:14">(</operator><name pos:start="161:15" pos:end="161:28">SNOOP_CHECKING</name><operator pos:start="161:29" pos:end="161:29">)</operator></expr>:</case>

            <comment type="block" pos:start="163:13" pos:end="163:62">/* Store the count of dummy bytes in the txfifo */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:61"><expr pos:start="165:13" pos:end="165:60"><name pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:26">cmd_dummies</name></name> <operator pos:start="165:28" pos:end="165:28">=</operator> <call pos:start="165:30" pos:end="165:60"><name pos:start="165:30" pos:end="165:53">xilinx_spips_num_dummies</name><argument_list pos:start="165:54" pos:end="165:60">(<argument pos:start="165:55" pos:end="165:55"><expr pos:start="165:55" pos:end="165:55"><name pos:start="165:55" pos:end="165:55">q</name></expr></argument>, <argument pos:start="165:58" pos:end="165:59"><expr pos:start="165:58" pos:end="165:59"><name pos:start="165:58" pos:end="165:59">tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:49"><expr pos:start="167:13" pos:end="167:48"><name pos:start="167:13" pos:end="167:23">addr_length</name> <operator pos:start="167:25" pos:end="167:25">=</operator> <call pos:start="167:27" pos:end="167:48"><name pos:start="167:27" pos:end="167:41">get_addr_length</name><argument_list pos:start="167:42" pos:end="167:48">(<argument pos:start="167:43" pos:end="167:43"><expr pos:start="167:43" pos:end="167:43"><name pos:start="167:43" pos:end="167:43">s</name></expr></argument>, <argument pos:start="167:46" pos:end="167:47"><expr pos:start="167:46" pos:end="167:47"><name pos:start="167:46" pos:end="167:47">tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="177:13"><if pos:start="169:13" pos:end="173:13">if <condition pos:start="169:16" pos:end="169:35">(<expr pos:start="169:17" pos:end="169:34"><name pos:start="169:17" pos:end="169:30"><name pos:start="169:17" pos:end="169:17">s</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:30">cmd_dummies</name></name> <operator pos:start="169:32" pos:end="169:32">&lt;</operator> <literal type="number" pos:start="169:34" pos:end="169:34">0</literal></expr>)</condition> <block pos:start="169:37" pos:end="173:13">{<block_content pos:start="171:17" pos:end="171:44">

                <expr_stmt pos:start="171:17" pos:end="171:44"><expr pos:start="171:17" pos:end="171:43"><name pos:start="171:17" pos:end="171:30"><name pos:start="171:17" pos:end="171:17">s</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:30">snoop_state</name></name> <operator pos:start="171:32" pos:end="171:32">=</operator> <name pos:start="171:34" pos:end="171:43">SNOOP_NONE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="173:15" pos:end="177:13">else <block pos:start="173:20" pos:end="177:13">{<block_content pos:start="175:17" pos:end="175:62">

                <expr_stmt pos:start="175:17" pos:end="175:62"><expr pos:start="175:17" pos:end="175:61"><name pos:start="175:17" pos:end="175:30"><name pos:start="175:17" pos:end="175:17">s</name><operator pos:start="175:18" pos:end="175:19">-&gt;</operator><name pos:start="175:20" pos:end="175:30">snoop_state</name></name> <operator pos:start="175:32" pos:end="175:32">=</operator> <name pos:start="175:34" pos:end="175:43">SNOOP_ADDR</name> <operator pos:start="175:45" pos:end="175:45">+</operator> <name pos:start="175:47" pos:end="175:57">addr_length</name> <operator pos:start="175:59" pos:end="175:59">-</operator> <literal type="number" pos:start="175:61" pos:end="175:61">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <switch pos:start="179:13" pos:end="223:13">switch <condition pos:start="179:20" pos:end="179:23">(<expr pos:start="179:21" pos:end="179:22"><name pos:start="179:21" pos:end="179:22">tx</name></expr>)</condition> <block pos:start="179:25" pos:end="223:13">{<block_content pos:start="181:13" pos:end="221:22">

            <case pos:start="181:13" pos:end="181:21">case <expr pos:start="181:18" pos:end="181:20"><name pos:start="181:18" pos:end="181:20">DPP</name></expr>:</case>

            <case pos:start="183:13" pos:end="183:21">case <expr pos:start="183:18" pos:end="183:20"><name pos:start="183:18" pos:end="183:20">DOR</name></expr>:</case>

            <case pos:start="185:13" pos:end="185:23">case <expr pos:start="185:18" pos:end="185:22"><name pos:start="185:18" pos:end="185:22">DOR_4</name></expr>:</case>

                <expr_stmt pos:start="187:17" pos:end="187:39"><expr pos:start="187:17" pos:end="187:38"><name pos:start="187:17" pos:end="187:34"><name pos:start="187:17" pos:end="187:17">s</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:34">link_state_next</name></name> <operator pos:start="187:36" pos:end="187:36">=</operator> <literal type="number" pos:start="187:38" pos:end="187:38">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:71"><expr pos:start="189:17" pos:end="189:70"><name pos:start="189:17" pos:end="189:39"><name pos:start="189:17" pos:end="189:17">s</name><operator pos:start="189:18" pos:end="189:19">-&gt;</operator><name pos:start="189:20" pos:end="189:39">link_state_next_when</name></name> <operator pos:start="189:41" pos:end="189:41">=</operator> <name pos:start="189:43" pos:end="189:53">addr_length</name> <operator pos:start="189:55" pos:end="189:55">+</operator> <name pos:start="189:57" pos:end="189:70"><name pos:start="189:57" pos:end="189:57">s</name><operator pos:start="189:58" pos:end="189:59">-&gt;</operator><name pos:start="189:60" pos:end="189:70">cmd_dummies</name></name></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            <case pos:start="193:13" pos:end="193:21">case <expr pos:start="193:18" pos:end="193:20"><name pos:start="193:18" pos:end="193:20">QPP</name></expr>:</case>

            <case pos:start="195:13" pos:end="195:23">case <expr pos:start="195:18" pos:end="195:22"><name pos:start="195:18" pos:end="195:22">QPP_4</name></expr>:</case>

            <case pos:start="197:13" pos:end="197:21">case <expr pos:start="197:18" pos:end="197:20"><name pos:start="197:18" pos:end="197:20">QOR</name></expr>:</case>

            <case pos:start="199:13" pos:end="199:23">case <expr pos:start="199:18" pos:end="199:22"><name pos:start="199:18" pos:end="199:22">QOR_4</name></expr>:</case>

                <expr_stmt pos:start="201:17" pos:end="201:39"><expr pos:start="201:17" pos:end="201:38"><name pos:start="201:17" pos:end="201:34"><name pos:start="201:17" pos:end="201:17">s</name><operator pos:start="201:18" pos:end="201:19">-&gt;</operator><name pos:start="201:20" pos:end="201:34">link_state_next</name></name> <operator pos:start="201:36" pos:end="201:36">=</operator> <literal type="number" pos:start="201:38" pos:end="201:38">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:71"><expr pos:start="203:17" pos:end="203:70"><name pos:start="203:17" pos:end="203:39"><name pos:start="203:17" pos:end="203:17">s</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:39">link_state_next_when</name></name> <operator pos:start="203:41" pos:end="203:41">=</operator> <name pos:start="203:43" pos:end="203:53">addr_length</name> <operator pos:start="203:55" pos:end="203:55">+</operator> <name pos:start="203:57" pos:end="203:70"><name pos:start="203:57" pos:end="203:57">s</name><operator pos:start="203:58" pos:end="203:59">-&gt;</operator><name pos:start="203:60" pos:end="203:70">cmd_dummies</name></name></expr>;</expr_stmt>

                <break pos:start="205:17" pos:end="205:22">break;</break>

            <case pos:start="207:13" pos:end="207:22">case <expr pos:start="207:18" pos:end="207:21"><name pos:start="207:18" pos:end="207:21">DIOR</name></expr>:</case>

            <case pos:start="209:13" pos:end="209:24">case <expr pos:start="209:18" pos:end="209:23"><name pos:start="209:18" pos:end="209:23">DIOR_4</name></expr>:</case>

                <expr_stmt pos:start="211:17" pos:end="211:34"><expr pos:start="211:17" pos:end="211:33"><name pos:start="211:17" pos:end="211:29"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:29">link_state</name></name> <operator pos:start="211:31" pos:end="211:31">=</operator> <literal type="number" pos:start="211:33" pos:end="211:33">2</literal></expr>;</expr_stmt>

                <break pos:start="213:17" pos:end="213:22">break;</break>

            <case pos:start="215:13" pos:end="215:22">case <expr pos:start="215:18" pos:end="215:21"><name pos:start="215:18" pos:end="215:21">QIOR</name></expr>:</case>

            <case pos:start="217:13" pos:end="217:24">case <expr pos:start="217:18" pos:end="217:23"><name pos:start="217:18" pos:end="217:23">QIOR_4</name></expr>:</case>

                <expr_stmt pos:start="219:17" pos:end="219:34"><expr pos:start="219:17" pos:end="219:33"><name pos:start="219:17" pos:end="219:29"><name pos:start="219:17" pos:end="219:17">s</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:29">link_state</name></name> <operator pos:start="219:31" pos:end="219:31">=</operator> <literal type="number" pos:start="219:33" pos:end="219:33">4</literal></expr>;</expr_stmt>

                <break pos:start="221:17" pos:end="221:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="225:13" pos:end="225:18">break;</break>

        <case pos:start="227:9" pos:end="227:26">case <expr pos:start="227:14" pos:end="227:25"><operator pos:start="227:14" pos:end="227:14">(</operator><name pos:start="227:15" pos:end="227:24">SNOOP_ADDR</name><operator pos:start="227:25" pos:end="227:25">)</operator></expr>:</case>

            <comment type="block" pos:start="229:13" pos:end="231:24">/* Address has been transmitted, transmit dummy cycles now if

             * needed */</comment>

            <if_stmt pos:start="233:13" pos:end="241:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:35">(<expr pos:start="233:17" pos:end="233:34"><name pos:start="233:17" pos:end="233:30"><name pos:start="233:17" pos:end="233:17">s</name><operator pos:start="233:18" pos:end="233:19">-&gt;</operator><name pos:start="233:20" pos:end="233:30">cmd_dummies</name></name> <operator pos:start="233:32" pos:end="233:32">&lt;</operator> <literal type="number" pos:start="233:34" pos:end="233:34">0</literal></expr>)</condition> <block pos:start="233:37" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:44">

                <expr_stmt pos:start="235:17" pos:end="235:44"><expr pos:start="235:17" pos:end="235:43"><name pos:start="235:17" pos:end="235:30"><name pos:start="235:17" pos:end="235:17">s</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:30">snoop_state</name></name> <operator pos:start="235:32" pos:end="235:32">=</operator> <name pos:start="235:34" pos:end="235:43">SNOOP_NONE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="237:15" pos:end="241:13">else <block pos:start="237:20" pos:end="241:13">{<block_content pos:start="239:17" pos:end="239:48">

                <expr_stmt pos:start="239:17" pos:end="239:48"><expr pos:start="239:17" pos:end="239:47"><name pos:start="239:17" pos:end="239:30"><name pos:start="239:17" pos:end="239:17">s</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:30">snoop_state</name></name> <operator pos:start="239:32" pos:end="239:32">=</operator> <name pos:start="239:34" pos:end="239:47"><name pos:start="239:34" pos:end="239:34">s</name><operator pos:start="239:35" pos:end="239:36">-&gt;</operator><name pos:start="239:37" pos:end="239:47">cmd_dummies</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        <case pos:start="245:9" pos:end="245:30">case <expr pos:start="245:14" pos:end="245:29"><operator pos:start="245:14" pos:end="245:14">(</operator><name pos:start="245:15" pos:end="245:28">SNOOP_STRIPING</name><operator pos:start="245:29" pos:end="245:29">)</operator></expr>:</case>

        <case pos:start="247:9" pos:end="247:26">case <expr pos:start="247:14" pos:end="247:25"><operator pos:start="247:14" pos:end="247:14">(</operator><name pos:start="247:15" pos:end="247:24">SNOOP_NONE</name><operator pos:start="247:25" pos:end="247:25">)</operator></expr>:</case>

            <comment type="block" pos:start="249:13" pos:end="249:68">/* Once we hit the boring stuff - squelch debug noise */</comment>

            <if_stmt pos:start="251:13" pos:end="257:13"><if pos:start="251:13" pos:end="257:13">if <condition pos:start="251:16" pos:end="251:29">(<expr pos:start="251:17" pos:end="251:28"><operator pos:start="251:17" pos:end="251:17">!</operator><name pos:start="251:18" pos:end="251:28">debug_level</name></expr>)</condition> <block pos:start="251:31" pos:end="257:13">{<block_content pos:start="253:17" pos:end="255:32">

                <expr_stmt pos:start="253:17" pos:end="253:62"><expr pos:start="253:17" pos:end="253:61"><call pos:start="253:17" pos:end="253:61"><name pos:start="253:17" pos:end="253:26">DB_PRINT_L</name><argument_list pos:start="253:27" pos:end="253:61">(<argument pos:start="253:28" pos:end="253:28"><expr pos:start="253:28" pos:end="253:28"><literal type="number" pos:start="253:28" pos:end="253:28">0</literal></expr></argument>, <argument pos:start="253:31" pos:end="253:60"><expr pos:start="253:31" pos:end="253:60"><literal type="string" pos:start="253:31" pos:end="253:60">"squelching debug info ....\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:32"><expr pos:start="255:17" pos:end="255:31"><name pos:start="255:17" pos:end="255:27">debug_level</name> <operator pos:start="255:29" pos:end="255:29">=</operator> <literal type="number" pos:start="255:31" pos:end="255:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="259:13" pos:end="259:18">break;</break>

        <default pos:start="261:9" pos:end="261:16">default:</default>

            <expr_stmt pos:start="263:13" pos:end="263:29"><expr pos:start="263:13" pos:end="263:28"><name pos:start="263:13" pos:end="263:26"><name pos:start="263:13" pos:end="263:13">s</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:26">snoop_state</name></name><operator pos:start="263:27" pos:end="263:28">--</operator></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="267:9" pos:end="269:45"><expr pos:start="267:9" pos:end="269:44"><call pos:start="267:9" pos:end="269:44"><name pos:start="267:9" pos:end="267:18">DB_PRINT_L</name><argument_list pos:start="267:19" pos:end="269:44">(<argument pos:start="267:20" pos:end="267:30"><expr pos:start="267:20" pos:end="267:30"><name pos:start="267:20" pos:end="267:30">debug_level</name></expr></argument>, <argument pos:start="267:33" pos:end="267:57"><expr pos:start="267:33" pos:end="267:57"><literal type="string" pos:start="267:33" pos:end="267:57">"final snoop state: %x\n"</literal></expr></argument>,

                   <argument pos:start="269:20" pos:end="269:43"><expr pos:start="269:20" pos:end="269:43"><operator pos:start="269:20" pos:end="269:20">(</operator><name pos:start="269:21" pos:end="269:28">unsigned</name><operator pos:start="269:29" pos:end="269:29">)</operator><name pos:start="269:30" pos:end="269:43"><name pos:start="269:30" pos:end="269:30">s</name><operator pos:start="269:31" pos:end="269:32">-&gt;</operator><name pos:start="269:33" pos:end="269:43">snoop_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
