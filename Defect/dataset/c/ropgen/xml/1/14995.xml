<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14995.c" pos:tabs="8"><function pos:start="1:1" pos:end="78:49"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">decode_opc_special3</name><parameter_list pos:start="1:32" pos:end="1:69">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:44">CPUMIPSState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:63">DisasContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="78:49">{<block_content pos:start="3:5" pos:end="78:49">
    <decl_stmt pos:start="3:5" pos:end="3:23"><decl pos:start="3:5" pos:end="3:10"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:10">rs</name></decl>, <decl pos:start="3:13" pos:end="3:14"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:13" pos:end="3:14">rt</name></decl>, <decl pos:start="3:17" pos:end="3:18"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:17" pos:end="3:18">rd</name></decl>, <decl pos:start="3:21" pos:end="3:22"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:21" pos:end="3:22">sa</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:22"><decl pos:start="4:5" pos:end="4:16"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:12">uint32_t</name></type> <name pos:start="4:14" pos:end="4:16">op1</name></decl>, <decl pos:start="4:19" pos:end="4:21"><type ref="prev" pos:start="4:5" pos:end="4:12"/><name pos:start="4:19" pos:end="4:21">op2</name></decl>;</decl_stmt>
    <expr_stmt pos:start="5:5" pos:end="5:36"><expr pos:start="5:5" pos:end="5:35"><name pos:start="5:5" pos:end="5:6">rs</name> <operator pos:start="5:8" pos:end="5:8">=</operator> <operator pos:start="5:10" pos:end="5:10">(</operator><name pos:start="5:11" pos:end="5:21"><name pos:start="5:11" pos:end="5:13">ctx</name><operator pos:start="5:14" pos:end="5:15">-&gt;</operator><name pos:start="5:16" pos:end="5:21">opcode</name></name> <operator pos:start="5:23" pos:end="5:24">&gt;&gt;</operator> <literal type="number" pos:start="5:26" pos:end="5:27">21</literal><operator pos:start="5:28" pos:end="5:28">)</operator> <operator pos:start="5:30" pos:end="5:30">&amp;</operator> <literal type="number" pos:start="5:32" pos:end="5:35">0x1f</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:36"><expr pos:start="6:5" pos:end="6:35"><name pos:start="6:5" pos:end="6:6">rt</name> <operator pos:start="6:8" pos:end="6:8">=</operator> <operator pos:start="6:10" pos:end="6:10">(</operator><name pos:start="6:11" pos:end="6:21"><name pos:start="6:11" pos:end="6:13">ctx</name><operator pos:start="6:14" pos:end="6:15">-&gt;</operator><name pos:start="6:16" pos:end="6:21">opcode</name></name> <operator pos:start="6:23" pos:end="6:24">&gt;&gt;</operator> <literal type="number" pos:start="6:26" pos:end="6:27">16</literal><operator pos:start="6:28" pos:end="6:28">)</operator> <operator pos:start="6:30" pos:end="6:30">&amp;</operator> <literal type="number" pos:start="6:32" pos:end="6:35">0x1f</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:36"><expr pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:6">rd</name> <operator pos:start="7:8" pos:end="7:8">=</operator> <operator pos:start="7:10" pos:end="7:10">(</operator><name pos:start="7:11" pos:end="7:21"><name pos:start="7:11" pos:end="7:13">ctx</name><operator pos:start="7:14" pos:end="7:15">-&gt;</operator><name pos:start="7:16" pos:end="7:21">opcode</name></name> <operator pos:start="7:23" pos:end="7:24">&gt;&gt;</operator> <literal type="number" pos:start="7:26" pos:end="7:27">11</literal><operator pos:start="7:28" pos:end="7:28">)</operator> <operator pos:start="7:30" pos:end="7:30">&amp;</operator> <literal type="number" pos:start="7:32" pos:end="7:35">0x1f</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:35"><expr pos:start="8:5" pos:end="8:34"><name pos:start="8:5" pos:end="8:6">sa</name> <operator pos:start="8:8" pos:end="8:8">=</operator> <operator pos:start="8:10" pos:end="8:10">(</operator><name pos:start="8:11" pos:end="8:21"><name pos:start="8:11" pos:end="8:13">ctx</name><operator pos:start="8:14" pos:end="8:15">-&gt;</operator><name pos:start="8:16" pos:end="8:21">opcode</name></name> <operator pos:start="8:23" pos:end="8:24">&gt;&gt;</operator> <literal type="number" pos:start="8:26" pos:end="8:26">6</literal><operator pos:start="8:27" pos:end="8:27">)</operator> <operator pos:start="8:29" pos:end="8:29">&amp;</operator> <literal type="number" pos:start="8:31" pos:end="8:34">0x1f</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:37"><expr pos:start="9:5" pos:end="9:36"><name pos:start="9:5" pos:end="9:7">op1</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:36"><name pos:start="9:11" pos:end="9:23">MASK_SPECIAL3</name><argument_list pos:start="9:24" pos:end="9:36">(<argument pos:start="9:25" pos:end="9:35"><expr pos:start="9:25" pos:end="9:35"><name pos:start="9:25" pos:end="9:35"><name pos:start="9:25" pos:end="9:27">ctx</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:35">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="10:5" pos:end="10:17">case <expr pos:start="10:10" pos:end="10:16"><name pos:start="10:10" pos:end="10:16">OPC_EXT</name></expr>:</case>
    <case pos:start="11:5" pos:end="11:17">case <expr pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:16">OPC_INS</name></expr>:</case>
        <expr_stmt pos:start="12:9" pos:end="12:38"><expr pos:start="12:9" pos:end="12:37"><call pos:start="12:9" pos:end="12:37"><name pos:start="12:9" pos:end="12:18">check_insn</name><argument_list pos:start="12:19" pos:end="12:37">(<argument pos:start="12:20" pos:end="12:22"><expr pos:start="12:20" pos:end="12:22"><name pos:start="12:20" pos:end="12:22">ctx</name></expr></argument>, <argument pos:start="12:25" pos:end="12:36"><expr pos:start="12:25" pos:end="12:36"><name pos:start="12:25" pos:end="12:36">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:45"><expr pos:start="13:9" pos:end="13:44"><call pos:start="13:9" pos:end="13:44"><name pos:start="13:9" pos:end="13:18">gen_bitops</name><argument_list pos:start="13:19" pos:end="13:44">(<argument pos:start="13:20" pos:end="13:22"><expr pos:start="13:20" pos:end="13:22"><name pos:start="13:20" pos:end="13:22">ctx</name></expr></argument>, <argument pos:start="13:25" pos:end="13:27"><expr pos:start="13:25" pos:end="13:27"><name pos:start="13:25" pos:end="13:27">op1</name></expr></argument>, <argument pos:start="13:30" pos:end="13:31"><expr pos:start="13:30" pos:end="13:31"><name pos:start="13:30" pos:end="13:31">rt</name></expr></argument>, <argument pos:start="13:34" pos:end="13:35"><expr pos:start="13:34" pos:end="13:35"><name pos:start="13:34" pos:end="13:35">rs</name></expr></argument>, <argument pos:start="13:38" pos:end="13:39"><expr pos:start="13:38" pos:end="13:39"><name pos:start="13:38" pos:end="13:39">sa</name></expr></argument>, <argument pos:start="13:42" pos:end="13:43"><expr pos:start="13:42" pos:end="13:43"><name pos:start="13:42" pos:end="13:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="14:9" pos:end="14:14">break;</break>
    <case pos:start="15:5" pos:end="15:19">case <expr pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:18">OPC_BSHFL</name></expr>:</case>
        <expr_stmt pos:start="16:9" pos:end="16:38"><expr pos:start="16:9" pos:end="16:37"><name pos:start="16:9" pos:end="16:11">op2</name> <operator pos:start="16:13" pos:end="16:13">=</operator> <call pos:start="16:15" pos:end="16:37"><name pos:start="16:15" pos:end="16:24">MASK_BSHFL</name><argument_list pos:start="16:25" pos:end="16:37">(<argument pos:start="16:26" pos:end="16:36"><expr pos:start="16:26" pos:end="16:36"><name pos:start="16:26" pos:end="16:36"><name pos:start="16:26" pos:end="16:28">ctx</name><operator pos:start="16:29" pos:end="16:30">-&gt;</operator><name pos:start="16:31" pos:end="16:36">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="17:9" pos:end="78:49">switch <condition pos:start="17:16" pos:end="17:20">(<expr pos:start="17:17" pos:end="17:19"><name pos:start="17:17" pos:end="17:19">op2</name></expr>)</condition> <block pos:start="17:22" pos:end="78:49">{<block_content pos:start="18:9" pos:end="78:49">
        <case pos:start="18:9" pos:end="18:41">case <expr pos:start="18:14" pos:end="18:40"><name pos:start="18:14" pos:end="18:22">OPC_ALIGN</name> <operator pos:start="18:24" pos:end="18:26">...</operator> <name pos:start="18:28" pos:end="18:40">OPC_ALIGN_END</name></expr>:</case>
        <case pos:start="19:9" pos:end="19:25">case <expr pos:start="19:14" pos:end="19:24"><name pos:start="19:14" pos:end="19:24">OPC_BITSWAP</name></expr>:</case>
            <expr_stmt pos:start="20:13" pos:end="20:42"><expr pos:start="20:13" pos:end="20:41"><call pos:start="20:13" pos:end="20:41"><name pos:start="20:13" pos:end="20:22">check_insn</name><argument_list pos:start="20:23" pos:end="20:41">(<argument pos:start="20:24" pos:end="20:26"><expr pos:start="20:24" pos:end="20:26"><name pos:start="20:24" pos:end="20:26">ctx</name></expr></argument>, <argument pos:start="20:29" pos:end="20:40"><expr pos:start="20:29" pos:end="20:40"><name pos:start="20:29" pos:end="20:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="21:13" pos:end="21:45"><expr pos:start="21:13" pos:end="21:44"><call pos:start="21:13" pos:end="21:44"><name pos:start="21:13" pos:end="21:34">decode_opc_special3_r6</name><argument_list pos:start="21:35" pos:end="21:44">(<argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">env</name></expr></argument>, <argument pos:start="21:41" pos:end="21:43"><expr pos:start="21:41" pos:end="21:43"><name pos:start="21:41" pos:end="21:43">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="22:13" pos:end="22:18">break;</break>
        <default pos:start="23:9" pos:end="23:16">default:</default>
            <expr_stmt pos:start="24:13" pos:end="24:42"><expr pos:start="24:13" pos:end="24:41"><call pos:start="24:13" pos:end="24:41"><name pos:start="24:13" pos:end="24:22">check_insn</name><argument_list pos:start="24:23" pos:end="24:41">(<argument pos:start="24:24" pos:end="24:26"><expr pos:start="24:24" pos:end="24:26"><name pos:start="24:24" pos:end="24:26">ctx</name></expr></argument>, <argument pos:start="24:29" pos:end="24:40"><expr pos:start="24:29" pos:end="24:40"><name pos:start="24:29" pos:end="24:40">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="25:13" pos:end="25:40"><expr pos:start="25:13" pos:end="25:39"><call pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:21">gen_bshfl</name><argument_list pos:start="25:22" pos:end="25:39">(<argument pos:start="25:23" pos:end="25:25"><expr pos:start="25:23" pos:end="25:25"><name pos:start="25:23" pos:end="25:25">ctx</name></expr></argument>, <argument pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:30">op2</name></expr></argument>, <argument pos:start="25:33" pos:end="25:34"><expr pos:start="25:33" pos:end="25:34"><name pos:start="25:33" pos:end="25:34">rt</name></expr></argument>, <argument pos:start="25:37" pos:end="25:38"><expr pos:start="25:37" pos:end="25:38"><name pos:start="25:37" pos:end="25:38">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="26:13" pos:end="26:18">break;</break>
        <break pos:start="27:9" pos:end="29:0">break;</break>
<cpp:if pos:start="28:1" pos:end="28:26">#<cpp:directive pos:start="28:2" pos:end="28:3">if</cpp:directive> <expr pos:start="28:5" pos:end="28:26"><call pos:start="28:5" pos:end="28:26"><name pos:start="28:5" pos:end="28:11">defined</name><argument_list pos:start="28:12" pos:end="28:26">(<argument pos:start="28:13" pos:end="28:25"><expr pos:start="28:13" pos:end="28:25"><name pos:start="28:13" pos:end="28:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case pos:start="29:5" pos:end="29:32">case <expr pos:start="29:10" pos:end="29:31"><name pos:start="29:10" pos:end="29:18">OPC_DEXTM</name> <operator pos:start="29:20" pos:end="29:22">...</operator> <name pos:start="29:24" pos:end="29:31">OPC_DEXT</name></expr>:</case>
    <case pos:start="30:5" pos:end="30:32">case <expr pos:start="30:10" pos:end="30:31"><name pos:start="30:10" pos:end="30:18">OPC_DINSM</name> <operator pos:start="30:20" pos:end="30:22">...</operator> <name pos:start="30:24" pos:end="30:31">OPC_DINS</name></expr>:</case>
        <expr_stmt pos:start="31:9" pos:end="31:38"><expr pos:start="31:9" pos:end="31:37"><call pos:start="31:9" pos:end="31:37"><name pos:start="31:9" pos:end="31:18">check_insn</name><argument_list pos:start="31:19" pos:end="31:37">(<argument pos:start="31:20" pos:end="31:22"><expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">ctx</name></expr></argument>, <argument pos:start="31:25" pos:end="31:36"><expr pos:start="31:25" pos:end="31:36"><name pos:start="31:25" pos:end="31:36">ISA_MIPS64R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:27"><expr pos:start="32:9" pos:end="32:26"><call pos:start="32:9" pos:end="32:26"><name pos:start="32:9" pos:end="32:21">check_mips_64</name><argument_list pos:start="32:22" pos:end="32:26">(<argument pos:start="32:23" pos:end="32:25"><expr pos:start="32:23" pos:end="32:25"><name pos:start="32:23" pos:end="32:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:45"><expr pos:start="33:9" pos:end="33:44"><call pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:18">gen_bitops</name><argument_list pos:start="33:19" pos:end="33:44">(<argument pos:start="33:20" pos:end="33:22"><expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ctx</name></expr></argument>, <argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">op1</name></expr></argument>, <argument pos:start="33:30" pos:end="33:31"><expr pos:start="33:30" pos:end="33:31"><name pos:start="33:30" pos:end="33:31">rt</name></expr></argument>, <argument pos:start="33:34" pos:end="33:35"><expr pos:start="33:34" pos:end="33:35"><name pos:start="33:34" pos:end="33:35">rs</name></expr></argument>, <argument pos:start="33:38" pos:end="33:39"><expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">sa</name></expr></argument>, <argument pos:start="33:42" pos:end="33:43"><expr pos:start="33:42" pos:end="33:43"><name pos:start="33:42" pos:end="33:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="34:9" pos:end="34:14">break;</break>
    <case pos:start="35:5" pos:end="35:20">case <expr pos:start="35:10" pos:end="35:19"><name pos:start="35:10" pos:end="35:19">OPC_DBSHFL</name></expr>:</case>
        <expr_stmt pos:start="36:9" pos:end="36:39"><expr pos:start="36:9" pos:end="36:38"><name pos:start="36:9" pos:end="36:11">op2</name> <operator pos:start="36:13" pos:end="36:13">=</operator> <call pos:start="36:15" pos:end="36:38"><name pos:start="36:15" pos:end="36:25">MASK_DBSHFL</name><argument_list pos:start="36:26" pos:end="36:38">(<argument pos:start="36:27" pos:end="36:37"><expr pos:start="36:27" pos:end="36:37"><name pos:start="36:27" pos:end="36:37"><name pos:start="36:27" pos:end="36:29">ctx</name><operator pos:start="36:30" pos:end="36:31">-&gt;</operator><name pos:start="36:32" pos:end="36:37">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="37:9" pos:end="78:49">switch <condition pos:start="37:16" pos:end="37:20">(<expr pos:start="37:17" pos:end="37:19"><name pos:start="37:17" pos:end="37:19">op2</name></expr>)</condition> <block pos:start="37:22" pos:end="78:49">{<block_content pos:start="38:9" pos:end="78:49">
        <case pos:start="38:9" pos:end="38:43">case <expr pos:start="38:14" pos:end="38:42"><name pos:start="38:14" pos:end="38:23">OPC_DALIGN</name> <operator pos:start="38:25" pos:end="38:27">...</operator> <name pos:start="38:29" pos:end="38:42">OPC_DALIGN_END</name></expr>:</case>
        <case pos:start="39:9" pos:end="39:26">case <expr pos:start="39:14" pos:end="39:25"><name pos:start="39:14" pos:end="39:25">OPC_DBITSWAP</name></expr>:</case>
            <expr_stmt pos:start="40:13" pos:end="40:42"><expr pos:start="40:13" pos:end="40:41"><call pos:start="40:13" pos:end="40:41"><name pos:start="40:13" pos:end="40:22">check_insn</name><argument_list pos:start="40:23" pos:end="40:41">(<argument pos:start="40:24" pos:end="40:26"><expr pos:start="40:24" pos:end="40:26"><name pos:start="40:24" pos:end="40:26">ctx</name></expr></argument>, <argument pos:start="40:29" pos:end="40:40"><expr pos:start="40:29" pos:end="40:40"><name pos:start="40:29" pos:end="40:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="41:13" pos:end="41:45"><expr pos:start="41:13" pos:end="41:44"><call pos:start="41:13" pos:end="41:44"><name pos:start="41:13" pos:end="41:34">decode_opc_special3_r6</name><argument_list pos:start="41:35" pos:end="41:44">(<argument pos:start="41:36" pos:end="41:38"><expr pos:start="41:36" pos:end="41:38"><name pos:start="41:36" pos:end="41:38">env</name></expr></argument>, <argument pos:start="41:41" pos:end="41:43"><expr pos:start="41:41" pos:end="41:43"><name pos:start="41:41" pos:end="41:43">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="42:13" pos:end="42:18">break;</break>
        <default pos:start="43:9" pos:end="43:16">default:</default>
            <expr_stmt pos:start="44:13" pos:end="44:42"><expr pos:start="44:13" pos:end="44:41"><call pos:start="44:13" pos:end="44:41"><name pos:start="44:13" pos:end="44:22">check_insn</name><argument_list pos:start="44:23" pos:end="44:41">(<argument pos:start="44:24" pos:end="44:26"><expr pos:start="44:24" pos:end="44:26"><name pos:start="44:24" pos:end="44:26">ctx</name></expr></argument>, <argument pos:start="44:29" pos:end="44:40"><expr pos:start="44:29" pos:end="44:40"><name pos:start="44:29" pos:end="44:40">ISA_MIPS64R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="45:13" pos:end="45:31"><expr pos:start="45:13" pos:end="45:30"><call pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:25">check_mips_64</name><argument_list pos:start="45:26" pos:end="45:30">(<argument pos:start="45:27" pos:end="45:29"><expr pos:start="45:27" pos:end="45:29"><name pos:start="45:27" pos:end="45:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="46:13" pos:end="46:43"><expr pos:start="46:13" pos:end="46:42"><name pos:start="46:13" pos:end="46:15">op2</name> <operator pos:start="46:17" pos:end="46:17">=</operator> <call pos:start="46:19" pos:end="46:42"><name pos:start="46:19" pos:end="46:29">MASK_DBSHFL</name><argument_list pos:start="46:30" pos:end="46:42">(<argument pos:start="46:31" pos:end="46:41"><expr pos:start="46:31" pos:end="46:41"><name pos:start="46:31" pos:end="46:41"><name pos:start="46:31" pos:end="46:33">ctx</name><operator pos:start="46:34" pos:end="46:35">-&gt;</operator><name pos:start="46:36" pos:end="46:41">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="47:13" pos:end="47:40"><expr pos:start="47:13" pos:end="47:39"><call pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:21">gen_bshfl</name><argument_list pos:start="47:22" pos:end="47:39">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">ctx</name></expr></argument>, <argument pos:start="47:28" pos:end="47:30"><expr pos:start="47:28" pos:end="47:30"><name pos:start="47:28" pos:end="47:30">op2</name></expr></argument>, <argument pos:start="47:33" pos:end="47:34"><expr pos:start="47:33" pos:end="47:34"><name pos:start="47:33" pos:end="47:34">rt</name></expr></argument>, <argument pos:start="47:37" pos:end="47:38"><expr pos:start="47:37" pos:end="47:38"><name pos:start="47:37" pos:end="47:38">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="48:13" pos:end="48:18">break;</break>
        <break pos:start="49:9" pos:end="51:0">break;</break>
<cpp:endif pos:start="50:1" pos:end="50:6">#<cpp:directive pos:start="50:2" pos:end="50:6">endif</cpp:directive></cpp:endif>
    <case pos:start="51:5" pos:end="51:19">case <expr pos:start="51:10" pos:end="51:18"><name pos:start="51:10" pos:end="51:18">OPC_RDHWR</name></expr>:</case>
        <expr_stmt pos:start="52:9" pos:end="52:61"><expr pos:start="52:9" pos:end="52:60"><call pos:start="52:9" pos:end="52:60"><name pos:start="52:9" pos:end="52:17">gen_rdhwr</name><argument_list pos:start="52:18" pos:end="52:60">(<argument pos:start="52:19" pos:end="52:21"><expr pos:start="52:19" pos:end="52:21"><name pos:start="52:19" pos:end="52:21">ctx</name></expr></argument>, <argument pos:start="52:24" pos:end="52:25"><expr pos:start="52:24" pos:end="52:25"><name pos:start="52:24" pos:end="52:25">rt</name></expr></argument>, <argument pos:start="52:28" pos:end="52:29"><expr pos:start="52:28" pos:end="52:29"><name pos:start="52:28" pos:end="52:29">rd</name></expr></argument>, <argument pos:start="52:32" pos:end="52:59"><expr pos:start="52:32" pos:end="52:59"><call pos:start="52:32" pos:end="52:59"><name pos:start="52:32" pos:end="52:40">extract32</name><argument_list pos:start="52:41" pos:end="52:59">(<argument pos:start="52:42" pos:end="52:52"><expr pos:start="52:42" pos:end="52:52"><name pos:start="52:42" pos:end="52:52"><name pos:start="52:42" pos:end="52:44">ctx</name><operator pos:start="52:45" pos:end="52:46">-&gt;</operator><name pos:start="52:47" pos:end="52:52">opcode</name></name></expr></argument>, <argument pos:start="52:55" pos:end="52:55"><expr pos:start="52:55" pos:end="52:55"><literal type="number" pos:start="52:55" pos:end="52:55">6</literal></expr></argument>, <argument pos:start="52:58" pos:end="52:58"><expr pos:start="52:58" pos:end="52:58"><literal type="number" pos:start="52:58" pos:end="52:58">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="53:9" pos:end="53:14">break;</break>
    <case pos:start="54:5" pos:end="54:18">case <expr pos:start="54:10" pos:end="54:17"><name pos:start="54:10" pos:end="54:17">OPC_FORK</name></expr>:</case>
        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><call pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:18">check_insn</name><argument_list pos:start="55:19" pos:end="55:31">(<argument pos:start="55:20" pos:end="55:22"><expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">ctx</name></expr></argument>, <argument pos:start="55:25" pos:end="55:30"><expr pos:start="55:25" pos:end="55:30"><name pos:start="55:25" pos:end="55:30">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block pos:start="56:9" pos:end="78:49">{<block_content pos:start="57:13" pos:end="78:49">
            <decl_stmt pos:start="57:13" pos:end="57:37"><decl pos:start="57:13" pos:end="57:36"><type pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:16">TCGv</name></type> <name pos:start="57:18" pos:end="57:19">t0</name> <init pos:start="57:21" pos:end="57:36">= <expr pos:start="57:23" pos:end="57:36"><call pos:start="57:23" pos:end="57:36"><name pos:start="57:23" pos:end="57:34">tcg_temp_new</name><argument_list pos:start="57:35" pos:end="57:36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="58:13" pos:end="58:37"><decl pos:start="58:13" pos:end="58:36"><type pos:start="58:13" pos:end="58:16"><name pos:start="58:13" pos:end="58:16">TCGv</name></type> <name pos:start="58:18" pos:end="58:19">t1</name> <init pos:start="58:21" pos:end="58:36">= <expr pos:start="58:23" pos:end="58:36"><call pos:start="58:23" pos:end="58:36"><name pos:start="58:23" pos:end="58:34">tcg_temp_new</name><argument_list pos:start="58:35" pos:end="58:36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><call pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:24">gen_load_gpr</name><argument_list pos:start="59:25" pos:end="59:32">(<argument pos:start="59:26" pos:end="59:27"><expr pos:start="59:26" pos:end="59:27"><name pos:start="59:26" pos:end="59:27">t0</name></expr></argument>, <argument pos:start="59:30" pos:end="59:31"><expr pos:start="59:30" pos:end="59:31"><name pos:start="59:30" pos:end="59:31">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="60:13" pos:end="60:33"><expr pos:start="60:13" pos:end="60:32"><call pos:start="60:13" pos:end="60:32"><name pos:start="60:13" pos:end="60:24">gen_load_gpr</name><argument_list pos:start="60:25" pos:end="60:32">(<argument pos:start="60:26" pos:end="60:27"><expr pos:start="60:26" pos:end="60:27"><name pos:start="60:26" pos:end="60:27">t1</name></expr></argument>, <argument pos:start="60:30" pos:end="60:31"><expr pos:start="60:30" pos:end="60:31"><name pos:start="60:30" pos:end="60:31">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="61:13" pos:end="61:36"><expr pos:start="61:13" pos:end="61:35"><call pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:27">gen_helper_fork</name><argument_list pos:start="61:28" pos:end="61:35">(<argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><name pos:start="61:29" pos:end="61:30">t0</name></expr></argument>, <argument pos:start="61:33" pos:end="61:34"><expr pos:start="61:33" pos:end="61:34"><name pos:start="61:33" pos:end="61:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="62:13" pos:end="62:30"><expr pos:start="62:13" pos:end="62:29"><call pos:start="62:13" pos:end="62:29"><name pos:start="62:13" pos:end="62:25">tcg_temp_free</name><argument_list pos:start="62:26" pos:end="62:29">(<argument pos:start="62:27" pos:end="62:28"><expr pos:start="62:27" pos:end="62:28"><name pos:start="62:27" pos:end="62:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="63:13" pos:end="63:30"><expr pos:start="63:13" pos:end="63:29"><call pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:25">tcg_temp_free</name><argument_list pos:start="63:26" pos:end="63:29">(<argument pos:start="63:27" pos:end="63:28"><expr pos:start="63:27" pos:end="63:28"><name pos:start="63:27" pos:end="63:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="64:9" pos:end="64:14">break;</break>
    <case pos:start="65:5" pos:end="65:19">case <expr pos:start="65:10" pos:end="65:18"><name pos:start="65:10" pos:end="65:18">OPC_YIELD</name></expr>:</case>
        <expr_stmt pos:start="66:9" pos:end="66:32"><expr pos:start="66:9" pos:end="66:31"><call pos:start="66:9" pos:end="66:31"><name pos:start="66:9" pos:end="66:18">check_insn</name><argument_list pos:start="66:19" pos:end="66:31">(<argument pos:start="66:20" pos:end="66:22"><expr pos:start="66:20" pos:end="66:22"><name pos:start="66:20" pos:end="66:22">ctx</name></expr></argument>, <argument pos:start="66:25" pos:end="66:30"><expr pos:start="66:25" pos:end="66:30"><name pos:start="66:25" pos:end="66:30">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block pos:start="67:9" pos:end="78:49">{<block_content pos:start="68:13" pos:end="78:49">
            <decl_stmt pos:start="68:13" pos:end="68:37"><decl pos:start="68:13" pos:end="68:36"><type pos:start="68:13" pos:end="68:16"><name pos:start="68:13" pos:end="68:16">TCGv</name></type> <name pos:start="68:18" pos:end="68:19">t0</name> <init pos:start="68:21" pos:end="68:36">= <expr pos:start="68:23" pos:end="68:36"><call pos:start="68:23" pos:end="68:36"><name pos:start="68:23" pos:end="68:34">tcg_temp_new</name><argument_list pos:start="68:35" pos:end="68:36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:33"><expr pos:start="69:13" pos:end="69:32"><call pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:24">gen_load_gpr</name><argument_list pos:start="69:25" pos:end="69:32">(<argument pos:start="69:26" pos:end="69:27"><expr pos:start="69:26" pos:end="69:27"><name pos:start="69:26" pos:end="69:27">t0</name></expr></argument>, <argument pos:start="69:30" pos:end="69:31"><expr pos:start="69:30" pos:end="69:31"><name pos:start="69:30" pos:end="69:31">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="70:13" pos:end="70:46"><expr pos:start="70:13" pos:end="70:45"><call pos:start="70:13" pos:end="70:45"><name pos:start="70:13" pos:end="70:28">gen_helper_yield</name><argument_list pos:start="70:29" pos:end="70:45">(<argument pos:start="70:30" pos:end="70:31"><expr pos:start="70:30" pos:end="70:31"><name pos:start="70:30" pos:end="70:31">t0</name></expr></argument>, <argument pos:start="70:34" pos:end="70:40"><expr pos:start="70:34" pos:end="70:40"><name pos:start="70:34" pos:end="70:40">cpu_env</name></expr></argument>, <argument pos:start="70:43" pos:end="70:44"><expr pos:start="70:43" pos:end="70:44"><name pos:start="70:43" pos:end="70:44">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><call pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:25">gen_store_gpr</name><argument_list pos:start="71:26" pos:end="71:33">(<argument pos:start="71:27" pos:end="71:28"><expr pos:start="71:27" pos:end="71:28"><name pos:start="71:27" pos:end="71:28">t0</name></expr></argument>, <argument pos:start="71:31" pos:end="71:32"><expr pos:start="71:31" pos:end="71:32"><name pos:start="71:31" pos:end="71:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="72:13" pos:end="72:30"><expr pos:start="72:13" pos:end="72:29"><call pos:start="72:13" pos:end="72:29"><name pos:start="72:13" pos:end="72:25">tcg_temp_free</name><argument_list pos:start="72:26" pos:end="72:29">(<argument pos:start="72:27" pos:end="72:28"><expr pos:start="72:27" pos:end="72:28"><name pos:start="72:27" pos:end="72:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="73:9" pos:end="73:14">break;</break>
    <default pos:start="74:5" pos:end="74:12">default:</default>
        <if_stmt pos:start="75:9" pos:end="78:49"><if pos:start="75:9" pos:end="77:9">if <condition pos:start="75:12" pos:end="75:43">(<expr pos:start="75:13" pos:end="75:42"><name pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:15">ctx</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:27">insn_flags</name></name> <operator pos:start="75:29" pos:end="75:29">&amp;</operator> <name pos:start="75:31" pos:end="75:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="75:45" pos:end="77:9">{<block_content pos:start="76:13" pos:end="76:45">
            <expr_stmt pos:start="76:13" pos:end="76:45"><expr pos:start="76:13" pos:end="76:44"><call pos:start="76:13" pos:end="76:44"><name pos:start="76:13" pos:end="76:34">decode_opc_special3_r6</name><argument_list pos:start="76:35" pos:end="76:44">(<argument pos:start="76:36" pos:end="76:38"><expr pos:start="76:36" pos:end="76:38"><name pos:start="76:36" pos:end="76:38">env</name></expr></argument>, <argument pos:start="76:41" pos:end="76:43"><expr pos:start="76:41" pos:end="76:43"><name pos:start="76:41" pos:end="76:43">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="77:11" pos:end="78:49">else <block pos:start="77:16" pos:end="78:49">{<block_content pos:start="78:13" pos:end="78:49">
            <expr_stmt pos:start="78:13" pos:end="78:49"><expr pos:start="78:13" pos:end="78:48"><call pos:start="78:13" pos:end="78:48"><name pos:start="78:13" pos:end="78:38">decode_opc_special3_legacy</name><argument_list pos:start="78:39" pos:end="78:48">(<argument pos:start="78:40" pos:end="78:42"><expr pos:start="78:40" pos:end="78:42"><name pos:start="78:40" pos:end="78:42">env</name></expr></argument>, <argument pos:start="78:45" pos:end="78:47"><expr pos:start="78:45" pos:end="78:47"><name pos:start="78:45" pos:end="78:47">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></block_content></block></switch></block_content></block></switch></block_content></block></function></unit>
