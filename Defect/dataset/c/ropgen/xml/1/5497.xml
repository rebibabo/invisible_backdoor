<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5497.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">vmgenid_set_guid_test</name><parameter_list pos:start="1:34" pos:end="1:39">(<parameter pos:start="1:35" pos:end="1:38"><decl pos:start="1:35" pos:end="1:38"><type pos:start="1:35" pos:end="1:38"><name pos:start="1:35" pos:end="1:38">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:16">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">QemuUUID</name></type> <name pos:start="5:14" pos:end="5:21">expected</name></decl>, <decl pos:start="5:24" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:24" pos:end="5:31">measured</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">gchar</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">cmd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:57"><expr pos:start="11:5" pos:end="11:56"><call pos:start="11:5" pos:end="11:56"><name pos:start="11:5" pos:end="11:12">g_assert</name><argument_list pos:start="11:13" pos:end="11:56">(<argument pos:start="11:14" pos:end="11:55"><expr pos:start="11:14" pos:end="11:55"><call pos:start="11:14" pos:end="11:50"><name pos:start="11:14" pos:end="11:28">qemu_uuid_parse</name><argument_list pos:start="11:29" pos:end="11:50">(<argument pos:start="11:30" pos:end="11:38"><expr pos:start="11:30" pos:end="11:38"><name pos:start="11:30" pos:end="11:38">VGID_GUID</name></expr></argument>, <argument pos:start="11:41" pos:end="11:49"><expr pos:start="11:41" pos:end="11:49"><operator pos:start="11:41" pos:end="11:41">&amp;</operator><name pos:start="11:42" pos:end="11:49">expected</name></expr></argument>)</argument_list></call> <operator pos:start="11:52" pos:end="11:53">==</operator> <literal type="number" pos:start="11:55" pos:end="11:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:48"><expr pos:start="15:5" pos:end="17:47"><name pos:start="15:5" pos:end="15:7">cmd</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="17:47"><name pos:start="15:11" pos:end="15:25">g_strdup_printf</name><argument_list pos:start="15:26" pos:end="17:47">(<argument pos:start="15:27" pos:end="17:35"><expr pos:start="15:27" pos:end="17:35"><literal type="string" pos:start="15:27" pos:end="15:75">"-machine accel=tcg -device vmgenid,id=testvgid,"</literal>

                          <literal type="string" pos:start="17:27" pos:end="17:35">"guid=%s"</literal></expr></argument>, <argument pos:start="17:38" pos:end="17:46"><expr pos:start="17:38" pos:end="17:46"><name pos:start="17:38" pos:end="17:46">VGID_GUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:21"><expr pos:start="19:5" pos:end="19:20"><call pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:15">qtest_start</name><argument_list pos:start="19:16" pos:end="19:20">(<argument pos:start="19:17" pos:end="19:19"><expr pos:start="19:17" pos:end="19:19"><name pos:start="19:17" pos:end="19:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:51">/* Read the GUID from accessing guest memory */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><call pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:25">read_guid_from_memory</name><argument_list pos:start="25:26" pos:end="25:36">(<argument pos:start="25:27" pos:end="25:35"><expr pos:start="25:27" pos:end="25:35"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:35">measured</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:79"><expr pos:start="27:5" pos:end="27:78"><call pos:start="27:5" pos:end="27:78"><name pos:start="27:5" pos:end="27:12">g_assert</name><argument_list pos:start="27:13" pos:end="27:78">(<argument pos:start="27:14" pos:end="27:77"><expr pos:start="27:14" pos:end="27:77"><call pos:start="27:14" pos:end="27:72"><name pos:start="27:14" pos:end="27:19">memcmp</name><argument_list pos:start="27:20" pos:end="27:72">(<argument pos:start="27:21" pos:end="27:33"><expr pos:start="27:21" pos:end="27:33"><name pos:start="27:21" pos:end="27:33"><name pos:start="27:21" pos:end="27:28">measured</name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:33">data</name></name></expr></argument>, <argument pos:start="27:36" pos:end="27:48"><expr pos:start="27:36" pos:end="27:48"><name pos:start="27:36" pos:end="27:48"><name pos:start="27:36" pos:end="27:43">expected</name><operator pos:start="27:44" pos:end="27:44">.</operator><name pos:start="27:45" pos:end="27:48">data</name></name></expr></argument>, <argument pos:start="27:51" pos:end="27:71"><expr pos:start="27:51" pos:end="27:71"><sizeof pos:start="27:51" pos:end="27:71">sizeof<argument_list pos:start="27:57" pos:end="27:71">(<argument pos:start="27:58" pos:end="27:70"><expr pos:start="27:58" pos:end="27:70"><name pos:start="27:58" pos:end="27:70"><name pos:start="27:58" pos:end="27:65">measured</name><operator pos:start="27:66" pos:end="27:66">.</operator><name pos:start="27:67" pos:end="27:70">data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="27:74" pos:end="27:75">==</operator> <literal type="number" pos:start="27:77" pos:end="27:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><call pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:14">qtest_quit</name><argument_list pos:start="31:15" pos:end="31:28">(<argument pos:start="31:16" pos:end="31:27"><expr pos:start="31:16" pos:end="31:27"><name pos:start="31:16" pos:end="31:27">global_qtest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><call pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:10">g_free</name><argument_list pos:start="33:11" pos:end="33:15">(<argument pos:start="33:12" pos:end="33:14"><expr pos:start="33:12" pos:end="33:14"><name pos:start="33:12" pos:end="33:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
