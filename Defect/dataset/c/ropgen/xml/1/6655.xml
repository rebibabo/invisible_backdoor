<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6655.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">mpeg2_decode_block_non_intra</name><parameter_list pos:start="1:40" pos:end="5:46">(<parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:54">MpegEncContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, 

                                        <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:47">DCTELEM</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:54">block</name></decl></parameter>, 

                                        <parameter pos:start="5:41" pos:end="5:45"><decl pos:start="5:41" pos:end="5:45"><type pos:start="5:41" pos:end="5:45"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:45">n</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="161:1">{<block_content pos:start="9:5" pos:end="159:13">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">level</name></decl>, <decl pos:start="9:16" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">i</name></decl>, <decl pos:start="9:19" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:19">j</name></decl>, <decl pos:start="9:22" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:24">run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">RLTable</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:15">rl</name> <init pos:start="13:17" pos:end="13:27">= <expr pos:start="13:19" pos:end="13:27"><operator pos:start="13:19" pos:end="13:19">&amp;</operator><name pos:start="13:20" pos:end="13:27">rl_mpeg1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:17"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:15">UINT8</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:27">scan_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:18"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:16">UINT16</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">matrix</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">mismatch</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="29:35"><if pos:start="23:5" pos:end="25:48">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:25">alternate_scan</name></name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:48"><block_content pos:start="25:9" pos:end="25:48">

        <expr_stmt pos:start="25:9" pos:end="25:48"><expr pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:18">scan_table</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:47">ff_alternate_vertical_scan</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="27:5" pos:end="29:35">else<block type="pseudo" pos:start="29:9" pos:end="29:35"><block_content pos:start="29:9" pos:end="29:35">

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:18">scan_table</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:34">zigzag_direct</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">mismatch</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <literal type="number" pos:start="31:16" pos:end="31:16">1</literal></expr>;</expr_stmt>



    <block pos:start="35:5" pos:end="77:5">{<block_content pos:start="37:9" pos:end="75:29">

        <decl_stmt pos:start="37:9" pos:end="37:23"><decl pos:start="37:9" pos:end="37:19"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:19">bit_cnt</name></decl>, <decl pos:start="37:22" pos:end="37:22"><type ref="prev" pos:start="37:9" pos:end="37:11"/><name pos:start="37:22" pos:end="37:22">v</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:23"><decl pos:start="39:9" pos:end="39:22"><type pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:14">UINT32</name></type> <name pos:start="39:16" pos:end="39:22">bit_buf</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:23"><decl pos:start="41:9" pos:end="41:22"><type pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:13">UINT8</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:22">buf_ptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:14"><expr pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:9">i</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:48"><if pos:start="45:9" pos:end="47:41">if <condition pos:start="45:12" pos:end="45:18">(<expr pos:start="45:13" pos:end="45:17"><name pos:start="45:13" pos:end="45:13">n</name> <operator pos:start="45:15" pos:end="45:15">&lt;</operator> <literal type="number" pos:start="45:17" pos:end="45:17">4</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:41"><block_content pos:start="47:13" pos:end="47:41"> 

            <expr_stmt pos:start="47:13" pos:end="47:41"><expr pos:start="47:13" pos:end="47:40"><name pos:start="47:13" pos:end="47:18">matrix</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:40"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:40">non_intra_matrix</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="49:9" pos:end="51:48">else<block type="pseudo" pos:start="51:13" pos:end="51:48"><block_content pos:start="51:13" pos:end="51:48">

            <expr_stmt pos:start="51:13" pos:end="51:48"><expr pos:start="51:13" pos:end="51:47"><name pos:start="51:13" pos:end="51:18">matrix</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:47"><name pos:start="51:22" pos:end="51:22">s</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:47">chroma_non_intra_matrix</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

        <comment type="block" pos:start="55:9" pos:end="55:80">/* special case for the first coef. no need to add a second vlc table */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:26"><expr pos:start="57:9" pos:end="57:25"><call pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:17">SAVE_BITS</name><argument_list pos:start="57:18" pos:end="57:25">(<argument pos:start="57:19" pos:end="57:24"><expr pos:start="57:19" pos:end="57:24"><operator pos:start="57:19" pos:end="57:19">&amp;</operator><name pos:start="57:20" pos:end="57:24"><name pos:start="57:20" pos:end="57:20">s</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:24">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:32"><expr pos:start="59:9" pos:end="59:31"><call pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:17">SHOW_BITS</name><argument_list pos:start="59:18" pos:end="59:31">(<argument pos:start="59:19" pos:end="59:24"><expr pos:start="59:19" pos:end="59:24"><operator pos:start="59:19" pos:end="59:19">&amp;</operator><name pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:20">s</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:24">gb</name></name></expr></argument>, <argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><name pos:start="59:27" pos:end="59:27">v</name></expr></argument>, <argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><literal type="number" pos:start="59:30" pos:end="59:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="73:9"><if pos:start="61:9" pos:end="73:9">if <condition pos:start="61:12" pos:end="61:18">(<expr pos:start="61:13" pos:end="61:17"><name pos:start="61:13" pos:end="61:13">v</name> <operator pos:start="61:15" pos:end="61:15">&amp;</operator> <literal type="number" pos:start="61:17" pos:end="61:17">2</literal></expr>)</condition> <block pos:start="61:20" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:26">

            <expr_stmt pos:start="63:13" pos:end="63:20"><expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">run</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:39"><expr pos:start="65:13" pos:end="65:38"><name pos:start="65:13" pos:end="65:17">level</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <literal type="number" pos:start="65:21" pos:end="65:23">1</literal> <operator pos:start="65:23" pos:end="65:23">-</operator> <operator pos:start="65:25" pos:end="65:25">(</operator><operator pos:start="65:26" pos:end="65:26">(</operator><name pos:start="65:27" pos:end="65:27">v</name> <operator pos:start="65:29" pos:end="65:29">&amp;</operator> <literal type="number" pos:start="65:31" pos:end="65:31">1</literal><operator pos:start="65:32" pos:end="65:32">)</operator> <operator pos:start="65:34" pos:end="65:35">&lt;&lt;</operator> <literal type="number" pos:start="65:37" pos:end="65:37">1</literal><operator pos:start="65:38" pos:end="65:38">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><call pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:22">FLUSH_BITS</name><argument_list pos:start="67:23" pos:end="67:25">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><literal type="number" pos:start="67:24" pos:end="67:24">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:33"><expr pos:start="69:13" pos:end="69:32"><call pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:24">RESTORE_BITS</name><argument_list pos:start="69:25" pos:end="69:32">(<argument pos:start="69:26" pos:end="69:31"><expr pos:start="69:26" pos:end="69:31"><operator pos:start="69:26" pos:end="69:26">&amp;</operator><name pos:start="69:27" pos:end="69:31"><name pos:start="69:27" pos:end="69:27">s</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:26">goto <name pos:start="71:18" pos:end="71:25">add_coef</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:29"><expr pos:start="75:9" pos:end="75:28"><call pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:20">RESTORE_BITS</name><argument_list pos:start="75:21" pos:end="75:28">(<argument pos:start="75:22" pos:end="75:27"><expr pos:start="75:22" pos:end="75:27"><operator pos:start="75:22" pos:end="75:22">&amp;</operator><name pos:start="75:23" pos:end="75:27"><name pos:start="75:23" pos:end="75:23">s</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="81:5" pos:end="81:40">/* now quantify &amp; encode AC coefs */</comment>

    <for pos:start="83:5" pos:end="153:5">for<control pos:start="83:8" pos:end="83:11">(<init pos:start="83:9" pos:end="83:9">;</init><condition pos:start="83:10" pos:end="83:10">;</condition><incr/>)</control> <block pos:start="83:13" pos:end="153:5">{<block_content pos:start="85:9" pos:end="151:12">

        <expr_stmt pos:start="85:9" pos:end="85:41"><expr pos:start="85:9" pos:end="85:40"><name pos:start="85:9" pos:end="85:12">code</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:40"><name pos:start="85:16" pos:end="85:22">get_vlc</name><argument_list pos:start="85:23" pos:end="85:40">(<argument pos:start="85:24" pos:end="85:29"><expr pos:start="85:24" pos:end="85:29"><operator pos:start="85:24" pos:end="85:24">&amp;</operator><name pos:start="85:25" pos:end="85:29"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:29">gb</name></name></expr></argument>, <argument pos:start="85:32" pos:end="85:39"><expr pos:start="85:32" pos:end="85:39"><operator pos:start="85:32" pos:end="85:32">&amp;</operator><name pos:start="85:33" pos:end="85:39"><name pos:start="85:33" pos:end="85:34">rl</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:39">vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:22"><if pos:start="87:9" pos:end="89:22">if <condition pos:start="87:12" pos:end="87:21">(<expr pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:16">code</name> <operator pos:start="87:18" pos:end="87:18">&lt;</operator> <literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:22"><block_content pos:start="89:13" pos:end="89:22">

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="115:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:24">(<expr pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:16">code</name> <operator pos:start="91:18" pos:end="91:19">==</operator> <literal type="number" pos:start="91:21" pos:end="91:23">112</literal></expr>)</condition> <block pos:start="91:26" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:18">

            <break pos:start="93:13" pos:end="93:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="95:11" pos:end="105:9">else if <condition pos:start="95:19" pos:end="95:31">(<expr pos:start="95:20" pos:end="95:30"><name pos:start="95:20" pos:end="95:23">code</name> <operator pos:start="95:25" pos:end="95:26">==</operator> <literal type="number" pos:start="95:28" pos:end="95:30">111</literal></expr>)</condition> <block pos:start="95:33" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:40">

            <comment type="block" pos:start="97:13" pos:end="97:24">/* escape */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:38"><expr pos:start="99:13" pos:end="99:37"><name pos:start="99:13" pos:end="99:15">run</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:37"><name pos:start="99:19" pos:end="99:26">get_bits</name><argument_list pos:start="99:27" pos:end="99:37">(<argument pos:start="99:28" pos:end="99:33"><expr pos:start="99:28" pos:end="99:33"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:33"><name pos:start="99:29" pos:end="99:29">s</name><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:33">gb</name></name></expr></argument>, <argument pos:start="99:36" pos:end="99:36"><expr pos:start="99:36" pos:end="99:36"><literal type="number" pos:start="99:36" pos:end="99:36">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:17">level</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <call pos:start="101:21" pos:end="101:40"><name pos:start="101:21" pos:end="101:28">get_bits</name><argument_list pos:start="101:29" pos:end="101:40">(<argument pos:start="101:30" pos:end="101:35"><expr pos:start="101:30" pos:end="101:35"><operator pos:start="101:30" pos:end="101:30">&amp;</operator><name pos:start="101:31" pos:end="101:35"><name pos:start="101:31" pos:end="101:31">s</name><operator pos:start="101:32" pos:end="101:33">-&gt;</operator><name pos:start="101:34" pos:end="101:35">gb</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:39"><expr pos:start="101:38" pos:end="101:39"><literal type="number" pos:start="101:38" pos:end="101:39">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:40"><expr pos:start="103:13" pos:end="103:39"><name pos:start="103:13" pos:end="103:17">level</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:26">level</name> <operator pos:start="103:28" pos:end="103:29">&lt;&lt;</operator> <literal type="number" pos:start="103:31" pos:end="103:32">20</literal><operator pos:start="103:33" pos:end="103:33">)</operator> <operator pos:start="103:35" pos:end="103:36">&gt;&gt;</operator> <literal type="number" pos:start="103:38" pos:end="103:39">20</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="115:9">else <block pos:start="105:16" pos:end="115:9">{<block_content pos:start="107:13" pos:end="113:31">

            <expr_stmt pos:start="107:13" pos:end="107:38"><expr pos:start="107:13" pos:end="107:37"><name pos:start="107:13" pos:end="107:15">run</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <name pos:start="107:19" pos:end="107:37"><name pos:start="107:19" pos:end="107:20">rl</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:31">table_run</name><index pos:start="107:32" pos:end="107:37">[<expr pos:start="107:33" pos:end="107:36"><name pos:start="107:33" pos:end="107:36">code</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:42"><expr pos:start="109:13" pos:end="109:41"><name pos:start="109:13" pos:end="109:17">level</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:41"><name pos:start="109:21" pos:end="109:22">rl</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:35">table_level</name><index pos:start="109:36" pos:end="109:41">[<expr pos:start="109:37" pos:end="109:40"><name pos:start="109:37" pos:end="109:40">code</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="113:31"><if pos:start="111:13" pos:end="113:31">if <condition pos:start="111:16" pos:end="111:34">(<expr pos:start="111:17" pos:end="111:33"><call pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:25">get_bits1</name><argument_list pos:start="111:26" pos:end="111:33">(<argument pos:start="111:27" pos:end="111:32"><expr pos:start="111:27" pos:end="111:32"><operator pos:start="111:27" pos:end="111:27">&amp;</operator><name pos:start="111:28" pos:end="111:32"><name pos:start="111:28" pos:end="111:28">s</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:32">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:31"><block_content pos:start="113:17" pos:end="113:31">

                <expr_stmt pos:start="113:17" pos:end="113:31"><expr pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:21">level</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <operator pos:start="113:25" pos:end="113:25">-</operator><name pos:start="113:26" pos:end="113:30">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:17"><expr pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:9">i</name> <operator pos:start="117:11" pos:end="117:12">+=</operator> <name pos:start="117:14" pos:end="117:16">run</name></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="121:22"><if pos:start="119:9" pos:end="121:22">if <condition pos:start="119:12" pos:end="119:20">(<expr pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:13">i</name> <operator pos:start="119:15" pos:end="119:16">&gt;=</operator> <literal type="number" pos:start="119:18" pos:end="119:19">64</literal></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:22"><block_content pos:start="121:13" pos:end="121:22">

            <return pos:start="121:13" pos:end="121:22">return <expr pos:start="121:20" pos:end="121:21"><operator pos:start="121:20" pos:end="121:20">-</operator><literal type="number" pos:start="121:21" pos:end="121:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <label pos:start="123:5" pos:end="123:13"><name pos:start="123:5" pos:end="123:12">add_coef</name>:</label>

	<expr_stmt pos:start="125:9" pos:end="125:26"><expr pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:9">j</name> <operator pos:start="125:11" pos:end="125:11">=</operator> <name pos:start="125:13" pos:end="125:25"><name pos:start="125:13" pos:end="125:22">scan_table</name><index pos:start="125:23" pos:end="125:25">[<expr pos:start="125:24" pos:end="125:24"><name pos:start="125:24" pos:end="125:24">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:56"><expr pos:start="127:9" pos:end="127:55"><call pos:start="127:9" pos:end="127:55"><name pos:start="127:9" pos:end="127:15">dprintf</name><argument_list pos:start="127:16" pos:end="127:55">(<argument pos:start="127:17" pos:end="127:39"><expr pos:start="127:17" pos:end="127:39"><literal type="string" pos:start="127:17" pos:end="127:39">"%d: run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="127:42" pos:end="127:42"><expr pos:start="127:42" pos:end="127:42"><name pos:start="127:42" pos:end="127:42">n</name></expr></argument>, <argument pos:start="127:45" pos:end="127:47"><expr pos:start="127:45" pos:end="127:47"><name pos:start="127:45" pos:end="127:47">run</name></expr></argument>, <argument pos:start="127:50" pos:end="127:54"><expr pos:start="127:50" pos:end="127:54"><name pos:start="127:50" pos:end="127:54">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="129:9" pos:end="129:27">/* XXX: optimize */</comment>

        <if_stmt pos:start="131:9" pos:end="141:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:22">(<expr pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:17">level</name> <operator pos:start="131:19" pos:end="131:19">&gt;</operator> <literal type="number" pos:start="131:21" pos:end="131:21">0</literal></expr>)</condition> <block pos:start="131:24" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:67">

            <expr_stmt pos:start="133:13" pos:end="133:67"><expr pos:start="133:13" pos:end="133:66"><name pos:start="133:13" pos:end="133:17">level</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <operator pos:start="133:21" pos:end="133:21">(</operator><operator pos:start="133:22" pos:end="133:22">(</operator><name pos:start="133:23" pos:end="133:27">level</name> <operator pos:start="133:29" pos:end="133:29">*</operator> <literal type="number" pos:start="133:31" pos:end="133:33">2</literal> <operator pos:start="133:33" pos:end="133:33">+</operator> <literal type="number" pos:start="133:35" pos:end="133:35">1</literal><operator pos:start="133:36" pos:end="133:36">)</operator> <operator pos:start="133:38" pos:end="133:38">*</operator> <name pos:start="133:40" pos:end="133:48"><name pos:start="133:40" pos:end="133:40">s</name><operator pos:start="133:41" pos:end="133:42">-&gt;</operator><name pos:start="133:43" pos:end="133:48">qscale</name></name> <operator pos:start="133:50" pos:end="133:50">*</operator> <name pos:start="133:52" pos:end="133:60"><name pos:start="133:52" pos:end="133:57">matrix</name><index pos:start="133:58" pos:end="133:60">[<expr pos:start="133:59" pos:end="133:59"><name pos:start="133:59" pos:end="133:59">j</name></expr>]</index></name><operator pos:start="133:61" pos:end="133:61">)</operator> <operator pos:start="133:63" pos:end="133:64">&gt;&gt;</operator> <literal type="number" pos:start="133:66" pos:end="133:66">5</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="141:9">else <block pos:start="135:16" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:27">

            <expr_stmt pos:start="137:13" pos:end="137:68"><expr pos:start="137:13" pos:end="137:67"><name pos:start="137:13" pos:end="137:17">level</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <operator pos:start="137:21" pos:end="137:21">(</operator><operator pos:start="137:22" pos:end="137:22">(</operator><operator pos:start="137:23" pos:end="137:23">-</operator><name pos:start="137:24" pos:end="137:28">level</name> <operator pos:start="137:30" pos:end="137:30">*</operator> <literal type="number" pos:start="137:32" pos:end="137:34">2</literal> <operator pos:start="137:34" pos:end="137:34">+</operator> <literal type="number" pos:start="137:36" pos:end="137:36">1</literal><operator pos:start="137:37" pos:end="137:37">)</operator> <operator pos:start="137:39" pos:end="137:39">*</operator> <name pos:start="137:41" pos:end="137:49"><name pos:start="137:41" pos:end="137:41">s</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:49">qscale</name></name> <operator pos:start="137:51" pos:end="137:51">*</operator> <name pos:start="137:53" pos:end="137:61"><name pos:start="137:53" pos:end="137:58">matrix</name><index pos:start="137:59" pos:end="137:61">[<expr pos:start="137:60" pos:end="137:60"><name pos:start="137:60" pos:end="137:60">j</name></expr>]</index></name><operator pos:start="137:62" pos:end="137:62">)</operator> <operator pos:start="137:64" pos:end="137:65">&gt;&gt;</operator> <literal type="number" pos:start="137:67" pos:end="137:67">5</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:27"><expr pos:start="139:13" pos:end="139:26"><name pos:start="139:13" pos:end="139:17">level</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <operator pos:start="139:21" pos:end="139:21">-</operator><name pos:start="139:22" pos:end="139:26">level</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="143:9" pos:end="145:36">/* XXX: is it really necessary to saturate since the encoder

           knows whats going on ? */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:26"><expr pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:16">mismatch</name> <operator pos:start="147:18" pos:end="147:19">^=</operator> <name pos:start="147:21" pos:end="147:25">level</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:16"><name pos:start="149:9" pos:end="149:13">block</name><index pos:start="149:14" pos:end="149:16">[<expr pos:start="149:15" pos:end="149:15"><name pos:start="149:15" pos:end="149:15">j</name></expr>]</index></name> <operator pos:start="149:18" pos:end="149:18">=</operator> <name pos:start="149:20" pos:end="149:24">level</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:12"><expr pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:9">i</name><operator pos:start="151:10" pos:end="151:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="155:5" pos:end="155:32"><expr pos:start="155:5" pos:end="155:31"><name pos:start="155:5" pos:end="155:13"><name pos:start="155:5" pos:end="155:9">block</name><index pos:start="155:10" pos:end="155:13">[<expr pos:start="155:11" pos:end="155:12"><literal type="number" pos:start="155:11" pos:end="155:12">63</literal></expr>]</index></name> <operator pos:start="155:15" pos:end="155:16">^=</operator> <operator pos:start="155:18" pos:end="155:18">(</operator><name pos:start="155:19" pos:end="155:26">mismatch</name> <operator pos:start="155:28" pos:end="155:28">&amp;</operator> <literal type="number" pos:start="155:30" pos:end="155:30">1</literal><operator pos:start="155:31" pos:end="155:31">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:31"><expr pos:start="157:5" pos:end="157:30"><name pos:start="157:5" pos:end="157:26"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:23">block_last_index</name><index pos:start="157:24" pos:end="157:26">[<expr pos:start="157:25" pos:end="157:25"><name pos:start="157:25" pos:end="157:25">n</name></expr>]</index></name> <operator pos:start="157:28" pos:end="157:28">=</operator> <name pos:start="157:30" pos:end="157:30">i</name></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
