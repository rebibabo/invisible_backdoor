<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25073.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">asf_read_value</name><parameter_list pos:start="1:26" pos:end="3:73">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">name</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:78"><decl pos:start="1:62" pos:end="1:78"><type pos:start="1:62" pos:end="1:78"><name pos:start="1:62" pos:end="1:69">uint16_t</name></type> <name pos:start="1:71" pos:end="1:78">name_len</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><name pos:start="3:27" pos:end="3:34">uint16_t</name></type> <name pos:start="3:36" pos:end="3:42">val_len</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:52"><decl pos:start="3:45" pos:end="3:52"><type pos:start="3:45" pos:end="3:52"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:52">type</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:72"><decl pos:start="3:55" pos:end="3:72"><type pos:start="3:55" pos:end="3:72"><name pos:start="3:55" pos:end="3:66">AVDictionary</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier><modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:72">met</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:18">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:19">buflen</name> <init pos:start="11:21" pos:end="11:37">= <expr pos:start="11:23" pos:end="11:37"><literal type="number" pos:start="11:23" pos:end="11:23">2</literal> <operator pos:start="11:25" pos:end="11:25">*</operator> <name pos:start="11:27" pos:end="11:33">val_len</name> <operator pos:start="11:35" pos:end="11:35">+</operator> <literal type="number" pos:start="11:37" pos:end="11:37">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">AVIOContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">pb</name> <init pos:start="13:21" pos:end="13:27">= <expr pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:23">s</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:27">pb</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:9">value</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:29"><name pos:start="17:13" pos:end="17:21">av_malloc</name><argument_list pos:start="17:22" pos:end="17:29">(<argument pos:start="17:23" pos:end="17:28"><expr pos:start="17:23" pos:end="17:28"><name pos:start="17:23" pos:end="17:28">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:31"><if pos:start="19:5" pos:end="21:31">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:14">value</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:31"><block_content pos:start="21:9" pos:end="21:31">

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="65:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:28">(<expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:12">type</name> <operator pos:start="23:14" pos:end="23:15">==</operator> <name pos:start="23:17" pos:end="23:27">ASF_UNICODE</name></expr>)</condition> <block pos:start="23:30" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:63">

        <comment type="line" pos:start="25:9" pos:end="25:89">// get_asf_string reads UTF-16 and converts it to UTF-8 which needs longer buffer</comment>

        <if_stmt pos:start="27:9" pos:end="29:24"><if pos:start="27:9" pos:end="29:24">if <condition pos:start="27:12" pos:end="27:67">(<expr pos:start="27:13" pos:end="27:66"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:16">ret</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:61"><name pos:start="27:20" pos:end="27:33">get_asf_string</name><argument_list pos:start="27:34" pos:end="27:61">(<argument pos:start="27:35" pos:end="27:36"><expr pos:start="27:35" pos:end="27:36"><name pos:start="27:35" pos:end="27:36">pb</name></expr></argument>, <argument pos:start="27:39" pos:end="27:45"><expr pos:start="27:39" pos:end="27:45"><name pos:start="27:39" pos:end="27:45">val_len</name></expr></argument>, <argument pos:start="27:48" pos:end="27:52"><expr pos:start="27:48" pos:end="27:52"><name pos:start="27:48" pos:end="27:52">value</name></expr></argument>, <argument pos:start="27:55" pos:end="27:60"><expr pos:start="27:55" pos:end="27:60"><name pos:start="27:55" pos:end="27:60">buflen</name></expr></argument>)</argument_list></call><operator pos:start="27:62" pos:end="27:62">)</operator> <operator pos:start="27:64" pos:end="27:64">&lt;</operator> <literal type="number" pos:start="27:66" pos:end="27:66">0</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:24"><block_content pos:start="29:13" pos:end="29:24">

            <goto pos:start="29:13" pos:end="29:24">goto <name pos:start="29:18" pos:end="29:23">failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="33:63"><if pos:start="31:9" pos:end="33:63">if <condition pos:start="31:12" pos:end="31:49">(<expr pos:start="31:13" pos:end="31:48"><call pos:start="31:13" pos:end="31:44"><name pos:start="31:13" pos:end="31:23">av_dict_set</name><argument_list pos:start="31:24" pos:end="31:44">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">met</name></expr></argument>, <argument pos:start="31:30" pos:end="31:33"><expr pos:start="31:30" pos:end="31:33"><name pos:start="31:30" pos:end="31:33">name</name></expr></argument>, <argument pos:start="31:36" pos:end="31:40"><expr pos:start="31:36" pos:end="31:40"><name pos:start="31:36" pos:end="31:40">value</name></expr></argument>, <argument pos:start="31:43" pos:end="31:43"><expr pos:start="31:43" pos:end="31:43"><literal type="number" pos:start="31:43" pos:end="31:43">0</literal></expr></argument>)</argument_list></call> <operator pos:start="31:46" pos:end="31:46">&lt;</operator> <literal type="number" pos:start="31:48" pos:end="31:48">0</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:63"><block_content pos:start="33:13" pos:end="33:63">

            <expr_stmt pos:start="33:13" pos:end="33:63"><expr pos:start="33:13" pos:end="33:62"><call pos:start="33:13" pos:end="33:62"><name pos:start="33:13" pos:end="33:18">av_log</name><argument_list pos:start="33:19" pos:end="33:62">(<argument pos:start="33:20" pos:end="33:20"><expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">s</name></expr></argument>, <argument pos:start="33:23" pos:end="33:36"><expr pos:start="33:23" pos:end="33:36"><name pos:start="33:23" pos:end="33:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="33:39" pos:end="33:61"><expr pos:start="33:39" pos:end="33:61"><literal type="string" pos:start="33:39" pos:end="33:61">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="65:5">else <block pos:start="35:12" pos:end="65:5">{<block_content pos:start="37:9" pos:end="63:63">

        <decl_stmt pos:start="37:9" pos:end="37:22"><decl pos:start="37:9" pos:end="37:21"><type pos:start="37:9" pos:end="37:12"><name pos:start="37:9" pos:end="37:12">char</name></type> <name pos:start="37:14" pos:end="37:21"><name pos:start="37:14" pos:end="37:16">buf</name><index pos:start="37:17" pos:end="37:21">[<expr pos:start="37:18" pos:end="37:20"><literal type="number" pos:start="37:18" pos:end="37:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:34">(<expr pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:19">val_len</name> <operator pos:start="39:21" pos:end="39:21">&gt;</operator> <sizeof pos:start="39:23" pos:end="39:33">sizeof<argument_list pos:start="39:29" pos:end="39:33">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:32">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="39:36" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:24">

            <expr_stmt pos:start="41:13" pos:end="41:38"><expr pos:start="41:13" pos:end="41:37"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="43:13" pos:end="43:24">goto <name pos:start="43:18" pos:end="43:23">failed</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="49:24"><if pos:start="47:9" pos:end="49:24">if <condition pos:start="47:12" pos:end="47:54">(<expr pos:start="47:13" pos:end="47:53"><operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:16">ret</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:48"><name pos:start="47:20" pos:end="47:28">avio_read</name><argument_list pos:start="47:29" pos:end="47:48">(<argument pos:start="47:30" pos:end="47:31"><expr pos:start="47:30" pos:end="47:31"><name pos:start="47:30" pos:end="47:31">pb</name></expr></argument>, <argument pos:start="47:34" pos:end="47:38"><expr pos:start="47:34" pos:end="47:38"><name pos:start="47:34" pos:end="47:38">value</name></expr></argument>, <argument pos:start="47:41" pos:end="47:47"><expr pos:start="47:41" pos:end="47:47"><name pos:start="47:41" pos:end="47:47">val_len</name></expr></argument>)</argument_list></call><operator pos:start="47:49" pos:end="47:49">)</operator> <operator pos:start="47:51" pos:end="47:51">&lt;</operator> <literal type="number" pos:start="47:53" pos:end="47:53">0</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:24"><block_content pos:start="49:13" pos:end="49:24">

            <goto pos:start="49:13" pos:end="49:24">goto <name pos:start="49:18" pos:end="49:23">failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="57:42"><if pos:start="51:9" pos:end="53:30">if <condition pos:start="51:12" pos:end="51:30">(<expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <literal type="number" pos:start="51:19" pos:end="51:19">2</literal> <operator pos:start="51:21" pos:end="51:21">*</operator> <name pos:start="51:23" pos:end="51:29">val_len</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:30"><block_content pos:start="53:13" pos:end="53:30">

            <expr_stmt pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:17">value</name><index pos:start="53:18" pos:end="53:22">[<expr pos:start="53:19" pos:end="53:21"><name pos:start="53:19" pos:end="53:21">ret</name></expr>]</index></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <literal type="char" pos:start="53:26" pos:end="53:29">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="55:9" pos:end="57:42">else<block type="pseudo" pos:start="57:13" pos:end="57:42"><block_content pos:start="57:13" pos:end="57:42">

            <expr_stmt pos:start="57:13" pos:end="57:42"><expr pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:17">value</name><index pos:start="57:18" pos:end="57:34">[<expr pos:start="57:19" pos:end="57:33"><literal type="number" pos:start="57:19" pos:end="57:19">2</literal> <operator pos:start="57:21" pos:end="57:21">*</operator> <name pos:start="57:23" pos:end="57:29">val_len</name> <operator pos:start="57:31" pos:end="57:31">-</operator> <literal type="number" pos:start="57:33" pos:end="57:33">1</literal></expr>]</index></name> <operator pos:start="57:36" pos:end="57:36">=</operator> <literal type="char" pos:start="57:38" pos:end="57:41">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><call pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:16">snprintf</name><argument_list pos:start="59:17" pos:end="59:47">(<argument pos:start="59:18" pos:end="59:20"><expr pos:start="59:18" pos:end="59:20"><name pos:start="59:18" pos:end="59:20">buf</name></expr></argument>, <argument pos:start="59:23" pos:end="59:33"><expr pos:start="59:23" pos:end="59:33"><sizeof pos:start="59:23" pos:end="59:33">sizeof<argument_list pos:start="59:29" pos:end="59:33">(<argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><name pos:start="59:30" pos:end="59:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="59:36" pos:end="59:39"><expr pos:start="59:36" pos:end="59:39"><literal type="string" pos:start="59:36" pos:end="59:39">"%s"</literal></expr></argument>, <argument pos:start="59:42" pos:end="59:46"><expr pos:start="59:42" pos:end="59:46"><name pos:start="59:42" pos:end="59:46">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="63:63"><if pos:start="61:9" pos:end="63:63">if <condition pos:start="61:12" pos:end="61:47">(<expr pos:start="61:13" pos:end="61:46"><call pos:start="61:13" pos:end="61:42"><name pos:start="61:13" pos:end="61:23">av_dict_set</name><argument_list pos:start="61:24" pos:end="61:42">(<argument pos:start="61:25" pos:end="61:27"><expr pos:start="61:25" pos:end="61:27"><name pos:start="61:25" pos:end="61:27">met</name></expr></argument>, <argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">name</name></expr></argument>, <argument pos:start="61:36" pos:end="61:38"><expr pos:start="61:36" pos:end="61:38"><name pos:start="61:36" pos:end="61:38">buf</name></expr></argument>, <argument pos:start="61:41" pos:end="61:41"><expr pos:start="61:41" pos:end="61:41"><literal type="number" pos:start="61:41" pos:end="61:41">0</literal></expr></argument>)</argument_list></call> <operator pos:start="61:44" pos:end="61:44">&lt;</operator> <literal type="number" pos:start="61:46" pos:end="61:46">0</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:63"><block_content pos:start="63:13" pos:end="63:63">

            <expr_stmt pos:start="63:13" pos:end="63:63"><expr pos:start="63:13" pos:end="63:62"><call pos:start="63:13" pos:end="63:62"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:62">(<argument pos:start="63:20" pos:end="63:20"><expr pos:start="63:20" pos:end="63:20"><name pos:start="63:20" pos:end="63:20">s</name></expr></argument>, <argument pos:start="63:23" pos:end="63:36"><expr pos:start="63:23" pos:end="63:36"><name pos:start="63:23" pos:end="63:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="63:39" pos:end="63:61"><expr pos:start="63:39" pos:end="63:61"><literal type="string" pos:start="63:39" pos:end="63:61">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:21"><expr pos:start="67:5" pos:end="67:20"><call pos:start="67:5" pos:end="67:20"><name pos:start="67:5" pos:end="67:12">av_freep</name><argument_list pos:start="67:13" pos:end="67:20">(<argument pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:19"><operator pos:start="67:14" pos:end="67:14">&amp;</operator><name pos:start="67:15" pos:end="67:19">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>



<label pos:start="75:1" pos:end="75:7"><name pos:start="75:1" pos:end="75:6">failed</name>:</label>

    <expr_stmt pos:start="77:5" pos:end="77:21"><expr pos:start="77:5" pos:end="77:20"><call pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:12">av_freep</name><argument_list pos:start="77:13" pos:end="77:20">(<argument pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:19"><operator pos:start="77:14" pos:end="77:14">&amp;</operator><name pos:start="77:15" pos:end="77:19">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="79:5" pos:end="79:15">return <expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
