<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17755.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">v9fs_write</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="163:1">{<block_content pos:start="5:5" pos:end="161:27">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">ssize_t</name></type> <name pos:start="5:13" pos:end="5:15">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int32_t</name></type> <name pos:start="7:13" pos:end="7:15">fid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">off</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int32_t</name></type> <name pos:start="13:13" pos:end="13:15">len</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int32_t</name></type> <name pos:start="15:13" pos:end="15:17">total</name> <init pos:start="15:19" pos:end="15:21">= <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:17">offset</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">7</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">V9fsFidState</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:22">fidp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">V9fsPDU</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">pdu</name> <init pos:start="21:18" pos:end="21:25">= <expr pos:start="21:20" pos:end="21:25"><name pos:start="21:20" pos:end="21:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">V9fsState</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:16">s</name> <init pos:start="23:18" pos:end="23:25">= <expr pos:start="23:20" pos:end="23:25"><name pos:start="23:20" pos:end="23:25"><name pos:start="23:20" pos:end="23:22">pdu</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:25">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">QEMUIOVector</name></type> <name pos:start="25:18" pos:end="25:26">qiov_full</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:16">QEMUIOVector</name></type> <name pos:start="27:18" pos:end="27:21">qiov</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:64"><expr pos:start="31:5" pos:end="31:63"><name pos:start="31:5" pos:end="31:7">err</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:63"><name pos:start="31:11" pos:end="31:23">pdu_unmarshal</name><argument_list pos:start="31:24" pos:end="31:63">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">pdu</name></expr></argument>, <argument pos:start="31:30" pos:end="31:35"><expr pos:start="31:30" pos:end="31:35"><name pos:start="31:30" pos:end="31:35">offset</name></expr></argument>, <argument pos:start="31:38" pos:end="31:42"><expr pos:start="31:38" pos:end="31:42"><literal type="string" pos:start="31:38" pos:end="31:42">"dqd"</literal></expr></argument>, <argument pos:start="31:45" pos:end="31:48"><expr pos:start="31:45" pos:end="31:48"><operator pos:start="31:45" pos:end="31:45">&amp;</operator><name pos:start="31:46" pos:end="31:48">fid</name></expr></argument>, <argument pos:start="31:51" pos:end="31:54"><expr pos:start="31:51" pos:end="31:54"><operator pos:start="31:51" pos:end="31:51">&amp;</operator><name pos:start="31:52" pos:end="31:54">off</name></expr></argument>, <argument pos:start="31:57" pos:end="31:62"><expr pos:start="31:57" pos:end="31:62"><operator pos:start="31:57" pos:end="31:57">&amp;</operator><name pos:start="31:58" pos:end="31:62">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">err</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:31"><expr pos:start="35:9" pos:end="35:30"><call pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:20">pdu_complete</name><argument_list pos:start="35:21" pos:end="35:30">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><name pos:start="35:22" pos:end="35:24">pdu</name></expr></argument>, <argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:29">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:18"><expr pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:10">offset</name> <operator pos:start="41:12" pos:end="41:13">+=</operator> <name pos:start="41:15" pos:end="41:17">err</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:66"><expr pos:start="43:5" pos:end="43:65"><call pos:start="43:5" pos:end="43:65"><name pos:start="43:5" pos:end="43:27">v9fs_init_qiov_from_pdu</name><argument_list pos:start="43:28" pos:end="43:65">(<argument pos:start="43:29" pos:end="43:38"><expr pos:start="43:29" pos:end="43:38"><operator pos:start="43:29" pos:end="43:29">&amp;</operator><name pos:start="43:30" pos:end="43:38">qiov_full</name></expr></argument>, <argument pos:start="43:41" pos:end="43:43"><expr pos:start="43:41" pos:end="43:43"><name pos:start="43:41" pos:end="43:43">pdu</name></expr></argument>, <argument pos:start="43:46" pos:end="43:51"><expr pos:start="43:46" pos:end="43:51"><name pos:start="43:46" pos:end="43:51">offset</name></expr></argument>, <argument pos:start="43:54" pos:end="43:58"><expr pos:start="43:54" pos:end="43:58"><name pos:start="43:54" pos:end="43:58">count</name></expr></argument>, <argument pos:start="43:61" pos:end="43:64"><expr pos:start="43:61" pos:end="43:64"><name pos:start="43:61" pos:end="43:64">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:73"><expr pos:start="45:5" pos:end="45:72"><call pos:start="45:5" pos:end="45:72"><name pos:start="45:5" pos:end="45:20">trace_v9fs_write</name><argument_list pos:start="45:21" pos:end="45:72">(<argument pos:start="45:22" pos:end="45:29"><expr pos:start="45:22" pos:end="45:29"><name pos:start="45:22" pos:end="45:29"><name pos:start="45:22" pos:end="45:24">pdu</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:29">tag</name></name></expr></argument>, <argument pos:start="45:32" pos:end="45:38"><expr pos:start="45:32" pos:end="45:38"><name pos:start="45:32" pos:end="45:38"><name pos:start="45:32" pos:end="45:34">pdu</name><operator pos:start="45:35" pos:end="45:36">-&gt;</operator><name pos:start="45:37" pos:end="45:38">id</name></name></expr></argument>, <argument pos:start="45:41" pos:end="45:43"><expr pos:start="45:41" pos:end="45:43"><name pos:start="45:41" pos:end="45:43">fid</name></expr></argument>, <argument pos:start="45:46" pos:end="45:48"><expr pos:start="45:46" pos:end="45:48"><name pos:start="45:46" pos:end="45:48">off</name></expr></argument>, <argument pos:start="45:51" pos:end="45:55"><expr pos:start="45:51" pos:end="45:55"><name pos:start="45:51" pos:end="45:55">count</name></expr></argument>, <argument pos:start="45:58" pos:end="45:71"><expr pos:start="45:58" pos:end="45:71"><name pos:start="45:58" pos:end="45:71"><name pos:start="45:58" pos:end="45:66">qiov_full</name><operator pos:start="45:67" pos:end="45:67">.</operator><name pos:start="45:68" pos:end="45:71">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:8">fidp</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <call pos:start="49:12" pos:end="49:28"><name pos:start="49:12" pos:end="49:18">get_fid</name><argument_list pos:start="49:19" pos:end="49:28">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">pdu</name></expr></argument>, <argument pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:27">fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:12">fidp</name> <operator pos:start="51:14" pos:end="51:15">==</operator> <name pos:start="51:17" pos:end="51:20">NULL</name></expr>)</condition> <block pos:start="51:23" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:23">

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">err</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:23">goto <name pos:start="55:14" pos:end="55:22">out_nofid</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="89:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:38">(<expr pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:12">fidp</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:22">fid_type</name></name> <operator pos:start="59:24" pos:end="59:25">==</operator> <name pos:start="59:27" pos:end="59:37">P9_FID_FILE</name></expr>)</condition> <block pos:start="59:40" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:9">

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:30">(<expr pos:start="61:13" pos:end="61:29"><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:16">fidp</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:20">fs</name><operator pos:start="61:21" pos:end="61:21">.</operator><name pos:start="61:22" pos:end="61:23">fd</name></name> <operator pos:start="61:25" pos:end="61:26">==</operator> <operator pos:start="61:28" pos:end="61:28">-</operator><literal type="number" pos:start="61:29" pos:end="61:29">1</literal></expr>)</condition> <block pos:start="61:32" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:21">

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:15">err</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">-</operator><name pos:start="63:20" pos:end="63:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:21">goto <name pos:start="65:18" pos:end="65:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="83:5">else if <condition pos:start="69:15" pos:end="69:46">(<expr pos:start="69:16" pos:end="69:45"><name pos:start="69:16" pos:end="69:29"><name pos:start="69:16" pos:end="69:19">fidp</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:29">fid_type</name></name> <operator pos:start="69:31" pos:end="69:32">==</operator> <name pos:start="69:34" pos:end="69:45">P9_FID_XATTR</name></expr>)</condition> <block pos:start="69:48" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:17">

        <comment type="block" pos:start="71:9" pos:end="75:11">/*

         * setxattr operation

         */</comment>

        <expr_stmt pos:start="77:9" pos:end="79:62"><expr pos:start="77:9" pos:end="79:61"><name pos:start="77:9" pos:end="77:11">err</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="79:61"><name pos:start="77:15" pos:end="77:30">v9fs_xattr_write</name><argument_list pos:start="77:31" pos:end="79:61">(<argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><name pos:start="77:32" pos:end="77:32">s</name></expr></argument>, <argument pos:start="77:35" pos:end="77:37"><expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">pdu</name></expr></argument>, <argument pos:start="77:40" pos:end="77:43"><expr pos:start="77:40" pos:end="77:43"><name pos:start="77:40" pos:end="77:43">fidp</name></expr></argument>, <argument pos:start="77:46" pos:end="77:48"><expr pos:start="77:46" pos:end="77:48"><name pos:start="77:46" pos:end="77:48">off</name></expr></argument>, <argument pos:start="77:51" pos:end="77:55"><expr pos:start="77:51" pos:end="77:55"><name pos:start="77:51" pos:end="77:55">count</name></expr></argument>,

                               <argument pos:start="79:32" pos:end="79:44"><expr pos:start="79:32" pos:end="79:44"><name pos:start="79:32" pos:end="79:44"><name pos:start="79:32" pos:end="79:40">qiov_full</name><operator pos:start="79:41" pos:end="79:41">.</operator><name pos:start="79:42" pos:end="79:44">iov</name></name></expr></argument>, <argument pos:start="79:47" pos:end="79:60"><expr pos:start="79:47" pos:end="79:60"><name pos:start="79:47" pos:end="79:60"><name pos:start="79:47" pos:end="79:55">qiov_full</name><operator pos:start="79:56" pos:end="79:56">.</operator><name pos:start="79:57" pos:end="79:60">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:17">goto <name pos:start="81:14" pos:end="81:16">out</name>;</goto>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="89:5">else <block pos:start="83:12" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:17">

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:11">err</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:17">goto <name pos:start="87:14" pos:end="87:16">out</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><call pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:19">qemu_iovec_init</name><argument_list pos:start="91:20" pos:end="91:42">(<argument pos:start="91:21" pos:end="91:25"><expr pos:start="91:21" pos:end="91:25"><operator pos:start="91:21" pos:end="91:21">&amp;</operator><name pos:start="91:22" pos:end="91:25">qiov</name></expr></argument>, <argument pos:start="91:28" pos:end="91:41"><expr pos:start="91:28" pos:end="91:41"><name pos:start="91:28" pos:end="91:41"><name pos:start="91:28" pos:end="91:36">qiov_full</name><operator pos:start="91:37" pos:end="91:37">.</operator><name pos:start="91:38" pos:end="91:41">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="93:5" pos:end="131:39">do <block pos:start="93:8" pos:end="131:5">{<block_content pos:start="95:9" pos:end="129:9">

        <expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><call pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:24">qemu_iovec_reset</name><argument_list pos:start="95:25" pos:end="95:31">(<argument pos:start="95:26" pos:end="95:30"><expr pos:start="95:26" pos:end="95:30"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:30">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:76"><expr pos:start="97:9" pos:end="97:75"><call pos:start="97:9" pos:end="97:75"><name pos:start="97:9" pos:end="97:25">qemu_iovec_concat</name><argument_list pos:start="97:26" pos:end="97:75">(<argument pos:start="97:27" pos:end="97:31"><expr pos:start="97:27" pos:end="97:31"><operator pos:start="97:27" pos:end="97:27">&amp;</operator><name pos:start="97:28" pos:end="97:31">qiov</name></expr></argument>, <argument pos:start="97:34" pos:end="97:43"><expr pos:start="97:34" pos:end="97:43"><operator pos:start="97:34" pos:end="97:34">&amp;</operator><name pos:start="97:35" pos:end="97:43">qiov_full</name></expr></argument>, <argument pos:start="97:46" pos:end="97:50"><expr pos:start="97:46" pos:end="97:50"><name pos:start="97:46" pos:end="97:50">total</name></expr></argument>, <argument pos:start="97:53" pos:end="97:74"><expr pos:start="97:53" pos:end="97:74"><name pos:start="97:53" pos:end="97:66"><name pos:start="97:53" pos:end="97:61">qiov_full</name><operator pos:start="97:62" pos:end="97:62">.</operator><name pos:start="97:63" pos:end="97:66">size</name></name> <operator pos:start="97:68" pos:end="97:68">-</operator> <name pos:start="97:70" pos:end="97:74">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:14">(<expr pos:start="99:13" pos:end="99:13"><literal type="number" pos:start="99:13" pos:end="99:13">0</literal></expr>)</condition> <block pos:start="99:16" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:42">

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><call pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:20">print_sg</name><argument_list pos:start="101:21" pos:end="101:41">(<argument pos:start="101:22" pos:end="101:29"><expr pos:start="101:22" pos:end="101:29"><name pos:start="101:22" pos:end="101:29"><name pos:start="101:22" pos:end="101:25">qiov</name><operator pos:start="101:26" pos:end="101:26">.</operator><name pos:start="101:27" pos:end="101:29">iov</name></name></expr></argument>, <argument pos:start="101:32" pos:end="101:40"><expr pos:start="101:32" pos:end="101:40"><name pos:start="101:32" pos:end="101:40"><name pos:start="101:32" pos:end="101:35">qiov</name><operator pos:start="101:36" pos:end="101:36">.</operator><name pos:start="101:37" pos:end="101:40">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="105:9" pos:end="105:35">/* Loop in case of EINTR */</comment>

        <do pos:start="107:9" pos:end="119:51">do <block pos:start="107:12" pos:end="119:9">{<block_content pos:start="109:13" pos:end="117:13">

            <expr_stmt pos:start="109:13" pos:end="109:71"><expr pos:start="109:13" pos:end="109:70"><name pos:start="109:13" pos:end="109:15">len</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:70"><name pos:start="109:19" pos:end="109:33">v9fs_co_pwritev</name><argument_list pos:start="109:34" pos:end="109:70">(<argument pos:start="109:35" pos:end="109:37"><expr pos:start="109:35" pos:end="109:37"><name pos:start="109:35" pos:end="109:37">pdu</name></expr></argument>, <argument pos:start="109:40" pos:end="109:43"><expr pos:start="109:40" pos:end="109:43"><name pos:start="109:40" pos:end="109:43">fidp</name></expr></argument>, <argument pos:start="109:46" pos:end="109:53"><expr pos:start="109:46" pos:end="109:53"><name pos:start="109:46" pos:end="109:53"><name pos:start="109:46" pos:end="109:49">qiov</name><operator pos:start="109:50" pos:end="109:50">.</operator><name pos:start="109:51" pos:end="109:53">iov</name></name></expr></argument>, <argument pos:start="109:56" pos:end="109:64"><expr pos:start="109:56" pos:end="109:64"><name pos:start="109:56" pos:end="109:64"><name pos:start="109:56" pos:end="109:59">qiov</name><operator pos:start="109:60" pos:end="109:60">.</operator><name pos:start="109:61" pos:end="109:64">niov</name></name></expr></argument>, <argument pos:start="109:67" pos:end="109:69"><expr pos:start="109:67" pos:end="109:69"><name pos:start="109:67" pos:end="109:69">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="117:13"><if pos:start="111:13" pos:end="117:13">if <condition pos:start="111:16" pos:end="111:25">(<expr pos:start="111:17" pos:end="111:24"><name pos:start="111:17" pos:end="111:19">len</name> <operator pos:start="111:21" pos:end="111:22">&gt;=</operator> <literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr>)</condition> <block pos:start="111:27" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:29">

                <expr_stmt pos:start="113:17" pos:end="113:29"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:19">off</name>   <operator pos:start="113:23" pos:end="113:24">+=</operator> <name pos:start="113:26" pos:end="113:28">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:29"><expr pos:start="115:17" pos:end="115:28"><name pos:start="115:17" pos:end="115:21">total</name> <operator pos:start="115:23" pos:end="115:24">+=</operator> <name pos:start="115:26" pos:end="115:28">len</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="119:17" pos:end="119:50">(<expr pos:start="119:18" pos:end="119:49"><name pos:start="119:18" pos:end="119:20">len</name> <operator pos:start="119:22" pos:end="119:23">==</operator> <operator pos:start="119:25" pos:end="119:25">-</operator><name pos:start="119:26" pos:end="119:30">EINTR</name> <operator pos:start="119:32" pos:end="119:33">&amp;&amp;</operator> <operator pos:start="119:35" pos:end="119:35">!</operator><name pos:start="119:36" pos:end="119:49"><name pos:start="119:36" pos:end="119:38">pdu</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:49">cancelled</name></name></expr>)</condition>;</do>

        <if_stmt pos:start="121:9" pos:end="129:9"><if pos:start="121:9" pos:end="129:9">if <condition pos:start="121:12" pos:end="121:20">(<expr pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:15">len</name> <operator pos:start="121:17" pos:end="121:17">&lt;</operator> <literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>)</condition> <block pos:start="121:22" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:26">

            <comment type="block" pos:start="123:13" pos:end="123:43">/* IO error return the error */</comment>

            <expr_stmt pos:start="125:13" pos:end="125:22"><expr pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:15">err</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:21">len</name></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:26">goto <name pos:start="127:18" pos:end="127:25">out_qiov</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="131:13" pos:end="131:38">(<expr pos:start="131:14" pos:end="131:37"><name pos:start="131:14" pos:end="131:35"><name pos:start="131:14" pos:end="131:18">total</name> <argument_list type="generic" pos:start="131:20" pos:end="131:35">&lt; <argument pos:start="131:22" pos:end="131:33"><expr pos:start="131:22" pos:end="131:33"><name pos:start="131:22" pos:end="131:26">count</name> <operator pos:start="131:28" pos:end="131:29">&amp;&amp;</operator> <name pos:start="131:31" pos:end="131:33">len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="131:37" pos:end="131:37">0</literal></expr>)</condition>;</do>



    <expr_stmt pos:start="135:5" pos:end="135:15"><expr pos:start="135:5" pos:end="135:14"><name pos:start="135:5" pos:end="135:10">offset</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <literal type="number" pos:start="135:14" pos:end="135:14">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:47"><expr pos:start="137:5" pos:end="137:46"><name pos:start="137:5" pos:end="137:7">err</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:46"><name pos:start="137:11" pos:end="137:21">pdu_marshal</name><argument_list pos:start="137:22" pos:end="137:46">(<argument pos:start="137:23" pos:end="137:25"><expr pos:start="137:23" pos:end="137:25"><name pos:start="137:23" pos:end="137:25">pdu</name></expr></argument>, <argument pos:start="137:28" pos:end="137:33"><expr pos:start="137:28" pos:end="137:33"><name pos:start="137:28" pos:end="137:33">offset</name></expr></argument>, <argument pos:start="137:36" pos:end="137:38"><expr pos:start="137:36" pos:end="137:38"><literal type="string" pos:start="137:36" pos:end="137:38">"d"</literal></expr></argument>, <argument pos:start="137:41" pos:end="137:45"><expr pos:start="137:41" pos:end="137:45"><name pos:start="137:41" pos:end="137:45">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">err</name> <operator pos:start="139:13" pos:end="139:13">&lt;</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition> <block pos:start="139:18" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:17">

        <goto pos:start="141:9" pos:end="141:17">goto <name pos:start="141:14" pos:end="141:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:18"><expr pos:start="145:5" pos:end="145:17"><name pos:start="145:5" pos:end="145:7">err</name> <operator pos:start="145:9" pos:end="145:10">+=</operator> <name pos:start="145:12" pos:end="145:17">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:59"><expr pos:start="147:5" pos:end="147:58"><call pos:start="147:5" pos:end="147:58"><name pos:start="147:5" pos:end="147:27">trace_v9fs_write_return</name><argument_list pos:start="147:28" pos:end="147:58">(<argument pos:start="147:29" pos:end="147:36"><expr pos:start="147:29" pos:end="147:36"><name pos:start="147:29" pos:end="147:36"><name pos:start="147:29" pos:end="147:31">pdu</name><operator pos:start="147:32" pos:end="147:33">-&gt;</operator><name pos:start="147:34" pos:end="147:36">tag</name></name></expr></argument>, <argument pos:start="147:39" pos:end="147:45"><expr pos:start="147:39" pos:end="147:45"><name pos:start="147:39" pos:end="147:45"><name pos:start="147:39" pos:end="147:41">pdu</name><operator pos:start="147:42" pos:end="147:43">-&gt;</operator><name pos:start="147:44" pos:end="147:45">id</name></name></expr></argument>, <argument pos:start="147:48" pos:end="147:52"><expr pos:start="147:48" pos:end="147:52"><name pos:start="147:48" pos:end="147:52">total</name></expr></argument>, <argument pos:start="147:55" pos:end="147:57"><expr pos:start="147:55" pos:end="147:57"><name pos:start="147:55" pos:end="147:57">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="149:1" pos:end="149:9"><name pos:start="149:1" pos:end="149:8">out_qiov</name>:</label>

    <expr_stmt pos:start="151:5" pos:end="151:30"><expr pos:start="151:5" pos:end="151:29"><call pos:start="151:5" pos:end="151:29"><name pos:start="151:5" pos:end="151:22">qemu_iovec_destroy</name><argument_list pos:start="151:23" pos:end="151:29">(<argument pos:start="151:24" pos:end="151:28"><expr pos:start="151:24" pos:end="151:28"><operator pos:start="151:24" pos:end="151:24">&amp;</operator><name pos:start="151:25" pos:end="151:28">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="153:1" pos:end="153:4"><name pos:start="153:1" pos:end="153:3">out</name>:</label>

    <expr_stmt pos:start="155:5" pos:end="155:23"><expr pos:start="155:5" pos:end="155:22"><call pos:start="155:5" pos:end="155:22"><name pos:start="155:5" pos:end="155:11">put_fid</name><argument_list pos:start="155:12" pos:end="155:22">(<argument pos:start="155:13" pos:end="155:15"><expr pos:start="155:13" pos:end="155:15"><name pos:start="155:13" pos:end="155:15">pdu</name></expr></argument>, <argument pos:start="155:18" pos:end="155:21"><expr pos:start="155:18" pos:end="155:21"><name pos:start="155:18" pos:end="155:21">fidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="157:1" pos:end="157:10"><name pos:start="157:1" pos:end="157:9">out_nofid</name>:</label>

    <expr_stmt pos:start="159:5" pos:end="159:35"><expr pos:start="159:5" pos:end="159:34"><call pos:start="159:5" pos:end="159:34"><name pos:start="159:5" pos:end="159:22">qemu_iovec_destroy</name><argument_list pos:start="159:23" pos:end="159:34">(<argument pos:start="159:24" pos:end="159:33"><expr pos:start="159:24" pos:end="159:33"><operator pos:start="159:24" pos:end="159:24">&amp;</operator><name pos:start="159:25" pos:end="159:33">qiov_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:27"><expr pos:start="161:5" pos:end="161:26"><call pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:16">pdu_complete</name><argument_list pos:start="161:17" pos:end="161:26">(<argument pos:start="161:18" pos:end="161:20"><expr pos:start="161:18" pos:end="161:20"><name pos:start="161:18" pos:end="161:20">pdu</name></expr></argument>, <argument pos:start="161:23" pos:end="161:25"><expr pos:start="161:23" pos:end="161:25"><name pos:start="161:23" pos:end="161:25">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
