<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7953.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">qcow2_update_ext_header</name><parameter_list pos:start="1:35" pos:end="3:54">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:28"><decl pos:start="3:5" pos:end="3:28"><type pos:start="3:5" pos:end="3:28"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:14">char</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:28">backing_file</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:53"><decl pos:start="3:31" pos:end="3:53"><type pos:start="3:31" pos:end="3:53"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">char</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:53">backing_fmt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="167:1">{<block_content pos:start="7:5" pos:end="165:15">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:27">backing_file_len</name> <init pos:start="7:29" pos:end="7:31">= <expr pos:start="7:31" pos:end="7:31"><literal type="number" pos:start="7:31" pos:end="7:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:26">backing_fmt_len</name> <init pos:start="9:28" pos:end="9:30">= <expr pos:start="9:30" pos:end="9:30"><literal type="number" pos:start="9:30" pos:end="9:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVQcowState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">QCowExtension</name></type> <name pos:start="13:19" pos:end="13:33">ext_backing_fmt</name> <init pos:start="13:35" pos:end="13:42">= <expr pos:start="13:37" pos:end="13:42"><block pos:start="13:37" pos:end="13:42">{<expr pos:start="13:38" pos:end="13:38"><literal type="number" pos:start="13:38" pos:end="13:38">0</literal></expr>, <expr pos:start="13:41" pos:end="13:41"><literal type="number" pos:start="13:41" pos:end="13:41">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:71">/* Backing file format doesn't make sense without a backing file */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:37">(<expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:19">backing_fmt</name> <operator pos:start="21:21" pos:end="21:22">&amp;&amp;</operator> <operator pos:start="21:24" pos:end="21:24">!</operator><name pos:start="21:25" pos:end="21:36">backing_file</name></expr>)</condition> <block pos:start="21:39" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:23">

        <return pos:start="23:9" pos:end="23:23">return <expr pos:start="23:16" pos:end="23:22"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:61">/* Prepare the backing file format extension if needed */</comment>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:19">backing_fmt</name></expr>)</condition> <block pos:start="31:22" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:45">

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:23">ext_backing_fmt</name><operator pos:start="33:24" pos:end="33:24">.</operator><name pos:start="33:25" pos:end="33:27">len</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <call pos:start="33:31" pos:end="33:62"><name pos:start="33:31" pos:end="33:41">cpu_to_be32</name><argument_list pos:start="33:42" pos:end="33:62">(<argument pos:start="33:43" pos:end="33:61"><expr pos:start="33:43" pos:end="33:61"><call pos:start="33:43" pos:end="33:61"><name pos:start="33:43" pos:end="33:48">strlen</name><argument_list pos:start="33:49" pos:end="33:61">(<argument pos:start="33:50" pos:end="33:60"><expr pos:start="33:50" pos:end="33:60"><name pos:start="33:50" pos:end="33:60">backing_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:75"><expr pos:start="35:9" pos:end="35:74"><name pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:23">ext_backing_fmt</name><operator pos:start="35:24" pos:end="35:24">.</operator><name pos:start="35:25" pos:end="35:29">magic</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <call pos:start="35:33" pos:end="35:74"><name pos:start="35:33" pos:end="35:43">cpu_to_be32</name><argument_list pos:start="35:44" pos:end="35:74">(<argument pos:start="35:45" pos:end="35:73"><expr pos:start="35:45" pos:end="35:73"><name pos:start="35:45" pos:end="35:73">QCOW_EXT_MAGIC_BACKING_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:45"><expr pos:start="37:9" pos:end="39:44"><name pos:start="37:9" pos:end="37:23">backing_fmt_len</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <operator pos:start="37:27" pos:end="37:27">(</operator><operator pos:start="37:28" pos:end="37:28">(</operator><sizeof pos:start="37:29" pos:end="37:51">sizeof<argument_list pos:start="37:35" pos:end="37:51">(<argument pos:start="37:36" pos:end="37:50"><expr pos:start="37:36" pos:end="37:50"><name pos:start="37:36" pos:end="37:50">ext_backing_fmt</name></expr></argument>)</argument_list></sizeof>

            <operator pos:start="39:13" pos:end="39:13">+</operator> <call pos:start="39:15" pos:end="39:33"><name pos:start="39:15" pos:end="39:20">strlen</name><argument_list pos:start="39:21" pos:end="39:33">(<argument pos:start="39:22" pos:end="39:32"><expr pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:32">backing_fmt</name></expr></argument>)</argument_list></call> <operator pos:start="39:35" pos:end="39:35">+</operator> <literal type="number" pos:start="39:37" pos:end="39:37">7</literal><operator pos:start="39:38" pos:end="39:38">)</operator> <operator pos:start="39:40" pos:end="39:40">&amp;</operator> <operator pos:start="39:42" pos:end="39:42">~</operator><literal type="number" pos:start="39:43" pos:end="39:43">7</literal><operator pos:start="39:44" pos:end="39:44">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:67">/* Check if we can fit the new header into the first cluster */</comment>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:21">(<expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:20">backing_file</name></expr>)</condition> <block pos:start="47:23" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:48">

        <expr_stmt pos:start="49:9" pos:end="49:48"><expr pos:start="49:9" pos:end="49:47"><name pos:start="49:9" pos:end="49:24">backing_file_len</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:47"><name pos:start="49:28" pos:end="49:33">strlen</name><argument_list pos:start="49:34" pos:end="49:47">(<argument pos:start="49:35" pos:end="49:46"><expr pos:start="49:35" pos:end="49:46"><name pos:start="49:35" pos:end="49:46">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <decl_stmt pos:start="55:5" pos:end="57:26"><decl pos:start="55:5" pos:end="57:25"><type pos:start="55:5" pos:end="55:10"><name pos:start="55:5" pos:end="55:10">size_t</name></type> <name pos:start="55:12" pos:end="55:22">header_size</name> <init pos:start="55:24" pos:end="57:25">= <expr pos:start="55:26" pos:end="57:25"><sizeof pos:start="55:26" pos:end="55:43">sizeof<argument_list pos:start="55:32" pos:end="55:43">(<argument pos:start="55:33" pos:end="55:42"><expr pos:start="55:33" pos:end="55:42"><name pos:start="55:33" pos:end="55:42">QCowHeader</name></expr></argument>)</argument_list></sizeof> <operator pos:start="55:45" pos:end="55:45">+</operator> <name pos:start="55:47" pos:end="55:62">backing_file_len</name>

        <operator pos:start="57:9" pos:end="57:9">+</operator> <name pos:start="57:11" pos:end="57:25">backing_fmt_len</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:38">(<expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:19">header_size</name> <operator pos:start="61:21" pos:end="61:21">&gt;</operator> <name pos:start="61:23" pos:end="61:37"><name pos:start="61:23" pos:end="61:23">s</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:37">cluster_size</name></name></expr>)</condition> <block pos:start="61:40" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:23">

        <return pos:start="63:9" pos:end="63:23">return <expr pos:start="63:16" pos:end="63:22"><operator pos:start="63:16" pos:end="63:16">-</operator><name pos:start="63:17" pos:end="63:22">ENOSPC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:56">/* Rewrite backing file name and qcow2 extensions */</comment>

    <decl_stmt pos:start="71:5" pos:end="71:55"><decl pos:start="71:5" pos:end="71:54"><type pos:start="71:5" pos:end="71:10"><name pos:start="71:5" pos:end="71:10">size_t</name></type> <name pos:start="71:12" pos:end="71:19">ext_size</name> <init pos:start="71:21" pos:end="71:54">= <expr pos:start="71:23" pos:end="71:54"><name pos:start="71:23" pos:end="71:33">header_size</name> <operator pos:start="71:35" pos:end="71:35">-</operator> <sizeof pos:start="71:37" pos:end="71:54">sizeof<argument_list pos:start="71:43" pos:end="71:54">(<argument pos:start="71:44" pos:end="71:53"><expr pos:start="71:44" pos:end="71:53"><name pos:start="71:44" pos:end="71:53">QCowHeader</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="73:5" pos:end="73:26"><decl pos:start="73:5" pos:end="73:25"><type pos:start="73:5" pos:end="73:11"><name pos:start="73:5" pos:end="73:11">uint8_t</name></type> <name pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:15">buf</name><index pos:start="73:16" pos:end="73:25">[<expr pos:start="73:17" pos:end="73:24"><name pos:start="73:17" pos:end="73:24">ext_size</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="75:5" pos:end="75:22"><decl pos:start="75:5" pos:end="75:21"><type pos:start="75:5" pos:end="75:10"><name pos:start="75:5" pos:end="75:10">size_t</name></type> <name pos:start="75:12" pos:end="75:17">offset</name> <init pos:start="75:19" pos:end="75:21">= <expr pos:start="75:21" pos:end="75:21"><literal type="number" pos:start="75:21" pos:end="75:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="77:5" pos:end="77:35"><decl pos:start="77:5" pos:end="77:34"><type pos:start="77:5" pos:end="77:10"><name pos:start="77:5" pos:end="77:10">size_t</name></type> <name pos:start="77:12" pos:end="77:30">backing_file_offset</name> <init pos:start="77:32" pos:end="77:34">= <expr pos:start="77:34" pos:end="77:34"><literal type="number" pos:start="77:34" pos:end="77:34">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="81:5" pos:end="115:5"><if pos:start="81:5" pos:end="115:5">if <condition pos:start="81:8" pos:end="81:21">(<expr pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:20">backing_file</name></expr>)</condition> <block pos:start="81:23" pos:end="115:5">{<block_content pos:start="83:9" pos:end="113:58">

        <if_stmt pos:start="83:9" pos:end="107:9"><if pos:start="83:9" pos:end="107:9">if <condition pos:start="83:12" pos:end="83:24">(<expr pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:23">backing_fmt</name></expr>)</condition> <block pos:start="83:26" pos:end="107:9">{<block_content pos:start="85:13" pos:end="105:30">

            <decl_stmt pos:start="85:13" pos:end="87:64"><decl pos:start="85:13" pos:end="87:63"><type pos:start="85:13" pos:end="85:15"><name pos:start="85:13" pos:end="85:15">int</name></type> <name pos:start="85:17" pos:end="85:23">padding</name> <init pos:start="85:25" pos:end="87:63">= <expr pos:start="85:27" pos:end="87:63"><name pos:start="85:27" pos:end="85:41">backing_fmt_len</name> <operator pos:start="85:43" pos:end="85:43">-</operator>

                <operator pos:start="87:17" pos:end="87:17">(</operator><sizeof pos:start="87:18" pos:end="87:40">sizeof<argument_list pos:start="87:24" pos:end="87:40">(<argument pos:start="87:25" pos:end="87:39"><expr pos:start="87:25" pos:end="87:39"><name pos:start="87:25" pos:end="87:39">ext_backing_fmt</name></expr></argument>)</argument_list></sizeof> <operator pos:start="87:42" pos:end="87:42">+</operator> <call pos:start="87:44" pos:end="87:62"><name pos:start="87:44" pos:end="87:49">strlen</name><argument_list pos:start="87:50" pos:end="87:62">(<argument pos:start="87:51" pos:end="87:61"><expr pos:start="87:51" pos:end="87:61"><name pos:start="87:51" pos:end="87:61">backing_fmt</name></expr></argument>)</argument_list></call><operator pos:start="87:63" pos:end="87:63">)</operator></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="91:13" pos:end="91:76"><expr pos:start="91:13" pos:end="91:75"><call pos:start="91:13" pos:end="91:75"><name pos:start="91:13" pos:end="91:18">memcpy</name><argument_list pos:start="91:19" pos:end="91:75">(<argument pos:start="91:20" pos:end="91:31"><expr pos:start="91:20" pos:end="91:31"><name pos:start="91:20" pos:end="91:22">buf</name> <operator pos:start="91:24" pos:end="91:24">+</operator> <name pos:start="91:26" pos:end="91:31">offset</name></expr></argument>, <argument pos:start="91:34" pos:end="91:49"><expr pos:start="91:34" pos:end="91:49"><operator pos:start="91:34" pos:end="91:34">&amp;</operator><name pos:start="91:35" pos:end="91:49">ext_backing_fmt</name></expr></argument>, <argument pos:start="91:52" pos:end="91:74"><expr pos:start="91:52" pos:end="91:74"><sizeof pos:start="91:52" pos:end="91:74">sizeof<argument_list pos:start="91:58" pos:end="91:74">(<argument pos:start="91:59" pos:end="91:73"><expr pos:start="91:59" pos:end="91:73"><name pos:start="91:59" pos:end="91:73">ext_backing_fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:46"><expr pos:start="93:13" pos:end="93:45"><name pos:start="93:13" pos:end="93:18">offset</name> <operator pos:start="93:20" pos:end="93:21">+=</operator> <sizeof pos:start="93:23" pos:end="93:45">sizeof<argument_list pos:start="93:29" pos:end="93:45">(<argument pos:start="93:30" pos:end="93:44"><expr pos:start="93:30" pos:end="93:44"><name pos:start="93:30" pos:end="93:44">ext_backing_fmt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



            <expr_stmt pos:start="97:13" pos:end="97:67"><expr pos:start="97:13" pos:end="97:66"><call pos:start="97:13" pos:end="97:66"><name pos:start="97:13" pos:end="97:18">memcpy</name><argument_list pos:start="97:19" pos:end="97:66">(<argument pos:start="97:20" pos:end="97:31"><expr pos:start="97:20" pos:end="97:31"><name pos:start="97:20" pos:end="97:22">buf</name> <operator pos:start="97:24" pos:end="97:24">+</operator> <name pos:start="97:26" pos:end="97:31">offset</name></expr></argument>, <argument pos:start="97:34" pos:end="97:44"><expr pos:start="97:34" pos:end="97:44"><name pos:start="97:34" pos:end="97:44">backing_fmt</name></expr></argument>, <argument pos:start="97:47" pos:end="97:65"><expr pos:start="97:47" pos:end="97:65"><call pos:start="97:47" pos:end="97:65"><name pos:start="97:47" pos:end="97:52">strlen</name><argument_list pos:start="97:53" pos:end="97:65">(<argument pos:start="97:54" pos:end="97:64"><expr pos:start="97:54" pos:end="97:64"><name pos:start="97:54" pos:end="97:64">backing_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:42"><expr pos:start="99:13" pos:end="99:41"><name pos:start="99:13" pos:end="99:18">offset</name> <operator pos:start="99:20" pos:end="99:21">+=</operator> <call pos:start="99:23" pos:end="99:41"><name pos:start="99:23" pos:end="99:28">strlen</name><argument_list pos:start="99:29" pos:end="99:41">(<argument pos:start="99:30" pos:end="99:40"><expr pos:start="99:30" pos:end="99:40"><name pos:start="99:30" pos:end="99:40">backing_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="103:13" pos:end="103:45"><expr pos:start="103:13" pos:end="103:44"><call pos:start="103:13" pos:end="103:44"><name pos:start="103:13" pos:end="103:18">memset</name><argument_list pos:start="103:19" pos:end="103:44">(<argument pos:start="103:20" pos:end="103:31"><expr pos:start="103:20" pos:end="103:31"><name pos:start="103:20" pos:end="103:22">buf</name> <operator pos:start="103:24" pos:end="103:24">+</operator> <name pos:start="103:26" pos:end="103:31">offset</name></expr></argument>, <argument pos:start="103:34" pos:end="103:34"><expr pos:start="103:34" pos:end="103:34"><literal type="number" pos:start="103:34" pos:end="103:34">0</literal></expr></argument>, <argument pos:start="103:37" pos:end="103:43"><expr pos:start="103:37" pos:end="103:43"><name pos:start="103:37" pos:end="103:43">padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:30"><expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:18">offset</name> <operator pos:start="105:20" pos:end="105:21">+=</operator> <name pos:start="105:23" pos:end="105:29">padding</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:61"><expr pos:start="111:9" pos:end="111:60"><call pos:start="111:9" pos:end="111:60"><name pos:start="111:9" pos:end="111:14">memcpy</name><argument_list pos:start="111:15" pos:end="111:60">(<argument pos:start="111:16" pos:end="111:27"><expr pos:start="111:16" pos:end="111:27"><name pos:start="111:16" pos:end="111:18">buf</name> <operator pos:start="111:20" pos:end="111:20">+</operator> <name pos:start="111:22" pos:end="111:27">offset</name></expr></argument>, <argument pos:start="111:30" pos:end="111:41"><expr pos:start="111:30" pos:end="111:41"><name pos:start="111:30" pos:end="111:41">backing_file</name></expr></argument>, <argument pos:start="111:44" pos:end="111:59"><expr pos:start="111:44" pos:end="111:59"><name pos:start="111:44" pos:end="111:59">backing_file_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:58"><expr pos:start="113:9" pos:end="113:57"><name pos:start="113:9" pos:end="113:27">backing_file_offset</name> <operator pos:start="113:29" pos:end="113:29">=</operator> <sizeof pos:start="113:31" pos:end="113:48">sizeof<argument_list pos:start="113:37" pos:end="113:48">(<argument pos:start="113:38" pos:end="113:47"><expr pos:start="113:38" pos:end="113:47"><name pos:start="113:38" pos:end="113:47">QCowHeader</name></expr></argument>)</argument_list></sizeof> <operator pos:start="113:50" pos:end="113:50">+</operator> <name pos:start="113:52" pos:end="113:57">offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:67"><expr pos:start="119:5" pos:end="119:66"><name pos:start="119:5" pos:end="119:7">ret</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:66"><name pos:start="119:11" pos:end="119:21">bdrv_pwrite</name><argument_list pos:start="119:22" pos:end="119:66">(<argument pos:start="119:23" pos:end="119:30"><expr pos:start="119:23" pos:end="119:30"><name pos:start="119:23" pos:end="119:30"><name pos:start="119:23" pos:end="119:24">bs</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:30">file</name></name></expr></argument>, <argument pos:start="119:33" pos:end="119:50"><expr pos:start="119:33" pos:end="119:50"><sizeof pos:start="119:33" pos:end="119:50">sizeof<argument_list pos:start="119:39" pos:end="119:50">(<argument pos:start="119:40" pos:end="119:49"><expr pos:start="119:40" pos:end="119:49"><name pos:start="119:40" pos:end="119:49">QCowHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="119:53" pos:end="119:55"><expr pos:start="119:53" pos:end="119:55"><name pos:start="119:53" pos:end="119:55">buf</name></expr></argument>, <argument pos:start="119:58" pos:end="119:65"><expr pos:start="119:58" pos:end="119:65"><name pos:start="119:58" pos:end="119:65">ext_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:16">(<expr pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">&lt;</operator> <literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>)</condition> <block pos:start="121:18" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:18">

        <goto pos:start="123:9" pos:end="123:18">goto <name pos:start="123:14" pos:end="123:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:30">/* Update header fields */</comment>

    <decl_stmt pos:start="131:5" pos:end="131:71"><decl pos:start="131:5" pos:end="131:70"><type pos:start="131:5" pos:end="131:12"><name pos:start="131:5" pos:end="131:12">uint64_t</name></type> <name pos:start="131:14" pos:end="131:35">be_backing_file_offset</name> <init pos:start="131:37" pos:end="131:70">= <expr pos:start="131:39" pos:end="131:70"><call pos:start="131:39" pos:end="131:70"><name pos:start="131:39" pos:end="131:49">cpu_to_be64</name><argument_list pos:start="131:50" pos:end="131:70">(<argument pos:start="131:51" pos:end="131:69"><expr pos:start="131:51" pos:end="131:69"><name pos:start="131:51" pos:end="131:69">backing_file_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="133:5" pos:end="133:66"><decl pos:start="133:5" pos:end="133:65"><type pos:start="133:5" pos:end="133:12"><name pos:start="133:5" pos:end="133:12">uint32_t</name></type> <name pos:start="133:14" pos:end="133:33">be_backing_file_size</name> <init pos:start="133:35" pos:end="133:65">= <expr pos:start="133:37" pos:end="133:65"><call pos:start="133:37" pos:end="133:65"><name pos:start="133:37" pos:end="133:47">cpu_to_be32</name><argument_list pos:start="133:48" pos:end="133:65">(<argument pos:start="133:49" pos:end="133:64"><expr pos:start="133:49" pos:end="133:64"><name pos:start="133:49" pos:end="133:64">backing_file_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="137:5" pos:end="139:51"><expr pos:start="137:5" pos:end="139:50"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="139:50"><name pos:start="137:11" pos:end="137:21">bdrv_pwrite</name><argument_list pos:start="137:22" pos:end="139:50">(<argument pos:start="137:23" pos:end="137:30"><expr pos:start="137:23" pos:end="137:30"><name pos:start="137:23" pos:end="137:30"><name pos:start="137:23" pos:end="137:24">bs</name><operator pos:start="137:25" pos:end="137:26">-&gt;</operator><name pos:start="137:27" pos:end="137:30">file</name></name></expr></argument>, <argument pos:start="137:33" pos:end="137:73"><expr pos:start="137:33" pos:end="137:73"><call pos:start="137:33" pos:end="137:73"><name pos:start="137:33" pos:end="137:40">offsetof</name><argument_list pos:start="137:41" pos:end="137:73">(<argument pos:start="137:42" pos:end="137:51"><expr pos:start="137:42" pos:end="137:51"><name pos:start="137:42" pos:end="137:51">QCowHeader</name></expr></argument>, <argument pos:start="137:54" pos:end="137:72"><expr pos:start="137:54" pos:end="137:72"><name pos:start="137:54" pos:end="137:72">backing_file_offset</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="139:9" pos:end="139:31"><expr pos:start="139:9" pos:end="139:31"><operator pos:start="139:9" pos:end="139:9">&amp;</operator><name pos:start="139:10" pos:end="139:31">be_backing_file_offset</name></expr></argument>, <argument pos:start="139:34" pos:end="139:49"><expr pos:start="139:34" pos:end="139:49"><sizeof pos:start="139:34" pos:end="139:49">sizeof<argument_list pos:start="139:40" pos:end="139:49">(<argument pos:start="139:41" pos:end="139:48"><expr pos:start="139:41" pos:end="139:48"><name pos:start="139:41" pos:end="139:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="145:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:16">(<expr pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">&lt;</operator> <literal type="number" pos:start="141:15" pos:end="141:15">0</literal></expr>)</condition> <block pos:start="141:18" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:18">

        <goto pos:start="143:9" pos:end="143:18">goto <name pos:start="143:14" pos:end="143:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="151:49"><expr pos:start="149:5" pos:end="151:48"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="151:48"><name pos:start="149:11" pos:end="149:21">bdrv_pwrite</name><argument_list pos:start="149:22" pos:end="151:48">(<argument pos:start="149:23" pos:end="149:30"><expr pos:start="149:23" pos:end="149:30"><name pos:start="149:23" pos:end="149:30"><name pos:start="149:23" pos:end="149:24">bs</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:30">file</name></name></expr></argument>, <argument pos:start="149:33" pos:end="149:71"><expr pos:start="149:33" pos:end="149:71"><call pos:start="149:33" pos:end="149:71"><name pos:start="149:33" pos:end="149:40">offsetof</name><argument_list pos:start="149:41" pos:end="149:71">(<argument pos:start="149:42" pos:end="149:51"><expr pos:start="149:42" pos:end="149:51"><name pos:start="149:42" pos:end="149:51">QCowHeader</name></expr></argument>, <argument pos:start="149:54" pos:end="149:70"><expr pos:start="149:54" pos:end="149:70"><name pos:start="149:54" pos:end="149:70">backing_file_size</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="151:9" pos:end="151:29"><expr pos:start="151:9" pos:end="151:29"><operator pos:start="151:9" pos:end="151:9">&amp;</operator><name pos:start="151:10" pos:end="151:29">be_backing_file_size</name></expr></argument>, <argument pos:start="151:32" pos:end="151:47"><expr pos:start="151:32" pos:end="151:47"><sizeof pos:start="151:32" pos:end="151:47">sizeof<argument_list pos:start="151:38" pos:end="151:47">(<argument pos:start="151:39" pos:end="151:46"><expr pos:start="151:39" pos:end="151:46"><name pos:start="151:39" pos:end="151:46">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="157:5"><if pos:start="153:5" pos:end="157:5">if <condition pos:start="153:8" pos:end="153:16">(<expr pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">&lt;</operator> <literal type="number" pos:start="153:15" pos:end="153:15">0</literal></expr>)</condition> <block pos:start="153:18" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:18">

        <goto pos:start="155:9" pos:end="155:18">goto <name pos:start="155:14" pos:end="155:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:12"><expr pos:start="161:5" pos:end="161:11"><name pos:start="161:5" pos:end="161:7">ret</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <literal type="number" pos:start="161:11" pos:end="161:11">0</literal></expr>;</expr_stmt>

<label pos:start="163:1" pos:end="163:5"><name pos:start="163:1" pos:end="163:4">fail</name>:</label>

    <return pos:start="165:5" pos:end="165:15">return <expr pos:start="165:12" pos:end="165:14"><name pos:start="165:12" pos:end="165:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
