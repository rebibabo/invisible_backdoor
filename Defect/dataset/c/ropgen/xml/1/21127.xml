<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21127.c" pos:tabs="8"><function pos:start="1:1" pos:end="14:32"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">ide_data_writel</name><parameter_list pos:start="1:21" pos:end="1:63">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:25">void</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:33">opaque</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint32_t</name></type> <name pos:start="1:45" pos:end="1:48">addr</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:62">val</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="14:32">{<block_content pos:start="3:5" pos:end="14:32">
    <decl_stmt pos:start="3:5" pos:end="3:25"><decl pos:start="3:5" pos:end="3:24"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:10">IDEBus</name> <modifier pos:start="3:12" pos:end="3:12">*</modifier></type><name pos:start="3:13" pos:end="3:15">bus</name> <init pos:start="3:17" pos:end="3:24">= <expr pos:start="3:19" pos:end="3:24"><name pos:start="3:19" pos:end="3:24">opaque</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:40"><decl pos:start="4:5" pos:end="4:39"><type pos:start="4:5" pos:end="4:14"><name pos:start="4:5" pos:end="4:12">IDEState</name> <modifier pos:start="4:14" pos:end="4:14">*</modifier></type><name pos:start="4:15" pos:end="4:15">s</name> <init pos:start="4:17" pos:end="4:39">= <expr pos:start="4:19" pos:end="4:39"><call pos:start="4:19" pos:end="4:39"><name pos:start="4:19" pos:end="4:34">idebus_active_if</name><argument_list pos:start="4:35" pos:end="4:39">(<argument pos:start="4:36" pos:end="4:38"><expr pos:start="4:36" pos:end="4:38"><name pos:start="4:36" pos:end="4:38">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:14">p</name></decl>;</decl_stmt>
    <comment type="block" pos:start="6:5" pos:end="7:58">/* PIO data access allowed only when DRQ bit is set. The result of a write
     * during PIO out is indeterminate, just ignore it. */</comment>
    <if_stmt pos:start="8:5" pos:end="14:32"><if pos:start="8:5" pos:end="14:32">if <condition pos:start="8:8" pos:end="8:53">(<expr pos:start="8:9" pos:end="8:52"><operator pos:start="8:9" pos:end="8:9">!</operator><operator pos:start="8:10" pos:end="8:10">(</operator><name pos:start="8:11" pos:end="8:19"><name pos:start="8:11" pos:end="8:11">s</name><operator pos:start="8:12" pos:end="8:13">-&gt;</operator><name pos:start="8:14" pos:end="8:19">status</name></name> <operator pos:start="8:21" pos:end="8:21">&amp;</operator> <name pos:start="8:23" pos:end="8:30">DRQ_STAT</name><operator pos:start="8:31" pos:end="8:31">)</operator> <operator pos:start="8:33" pos:end="8:34">||</operator> <call pos:start="8:36" pos:end="8:52"><name pos:start="8:36" pos:end="8:49">ide_is_pio_out</name><argument_list pos:start="8:50" pos:end="8:52">(<argument pos:start="8:51" pos:end="8:51"><expr pos:start="8:51" pos:end="8:51"><name pos:start="8:51" pos:end="8:51">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="8:55" pos:end="14:32">{<block_content pos:start="9:5" pos:end="14:32">
    <expr_stmt pos:start="9:5" pos:end="9:20"><expr pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:5">p</name> <operator pos:start="9:7" pos:end="9:7">=</operator> <name pos:start="9:9" pos:end="9:19"><name pos:start="9:9" pos:end="9:9">s</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:19">data_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:38"><expr pos:start="10:5" pos:end="10:37"><operator pos:start="10:5" pos:end="10:5">*</operator><operator pos:start="10:6" pos:end="10:6">(</operator><name pos:start="10:7" pos:end="10:14">uint32_t</name> <operator pos:start="10:16" pos:end="10:16">*</operator><operator pos:start="10:17" pos:end="10:17">)</operator><name pos:start="10:18" pos:end="10:18">p</name> <operator pos:start="10:20" pos:end="10:20">=</operator> <call pos:start="10:22" pos:end="10:37"><name pos:start="10:22" pos:end="10:32">le32_to_cpu</name><argument_list pos:start="10:33" pos:end="10:37">(<argument pos:start="10:34" pos:end="10:36"><expr pos:start="10:34" pos:end="10:36"><name pos:start="10:34" pos:end="10:36">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:11"><expr pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:5">p</name> <operator pos:start="11:7" pos:end="11:8">+=</operator> <literal type="number" pos:start="11:10" pos:end="11:10">4</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:20"><expr pos:start="12:5" pos:end="12:19"><name pos:start="12:5" pos:end="12:15"><name pos:start="12:5" pos:end="12:5">s</name><operator pos:start="12:6" pos:end="12:7">-&gt;</operator><name pos:start="12:8" pos:end="12:15">data_ptr</name></name> <operator pos:start="12:17" pos:end="12:17">=</operator> <name pos:start="12:19" pos:end="12:19">p</name></expr>;</expr_stmt>
    <if_stmt pos:start="13:5" pos:end="14:32"><if pos:start="13:5" pos:end="14:32">if <condition pos:start="13:8" pos:end="13:25">(<expr pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:9">p</name> <operator pos:start="13:11" pos:end="13:12">&gt;=</operator> <name pos:start="13:14" pos:end="13:24"><name pos:start="13:14" pos:end="13:14">s</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:24">data_end</name></name></expr>)</condition><block type="pseudo" pos:start="14:9" pos:end="14:32"><block_content pos:start="14:9" pos:end="14:32">
        <expr_stmt pos:start="14:9" pos:end="14:32"><expr pos:start="14:9" pos:end="14:31"><call pos:start="14:9" pos:end="14:31"><name pos:start="14:9" pos:end="14:28"><name pos:start="14:9" pos:end="14:9">s</name><operator pos:start="14:10" pos:end="14:11">-&gt;</operator><name pos:start="14:12" pos:end="14:28">end_transfer_func</name></name><argument_list pos:start="14:29" pos:end="14:31">(<argument pos:start="14:30" pos:end="14:30"><expr pos:start="14:30" pos:end="14:30"><name pos:start="14:30" pos:end="14:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
